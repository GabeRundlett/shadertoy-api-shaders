{
    "Shader": {
        "info": {
            "date": "1610308282",
            "description": "If you draw a picture on the screen by dragging, calculate the Euler number of your picture in real time!!",
            "flags": 48,
            "hasliked": 0,
            "id": "3lyczz",
            "likes": 2,
            "name": "Euler number calculator",
            "published": 3,
            "tags": [
                "eulernumber"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n\n// Euler Number Calculator\n//\n// Calculates the Euler number of the area drawn in black.\n//\n// If you draw discrete points, the Euler number is the number of points.\n// If a loop is constructed, the Euler number is decreased.\n//\n// Since the screen is considered a torus, drawing a line directly\n// across or vertically will result in an Euler number of zero.\n// (Perhaps, the edges of the screen are not well processed.)\n//\n// How to Use:\n// - Dragging: draw black pixels \n// - Shift + Dragging: erase black pixels\n// - R: clear buffer\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PIXEL_SIZE = 4.0;\n\n// If the resolution is very large, this value should also be large.\nconst int LINE_THICK = 3;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// The MIT License\n// Copyright © 2021 IWBTShyGuy\n\nbool isKeyPressed(int code) {\n    return texelFetch(iChannel1, ivec2(code, 1), 0).x > 0.0;\n}\n\nbool isKeyDown(int code) {\n    return texelFetch(iChannel1, ivec2(code, 0), 0).x > 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame == 0 || isKeyPressed(82)) {\n        fragColor = vec4(1);\n        return;\n    }\n    ivec2 uv = ivec2(fragCoord / PIXEL_SIZE);\n    ivec2 mouse = ivec2(iMouse.xy / PIXEL_SIZE);\n    if (iMouse.z > 0.0 && max(abs(uv.x - mouse.x), abs(uv.y - mouse.y)) < LINE_THICK) {\n        fragColor = isKeyDown(16) ? vec4(1) : vec4(0, 0, 0, 1);\n    } else {\n        fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// The MIT License\n// Copyright © 2021 IWBTShyGuy\n\nfloat clamped(float x, float a, float b) {\n    return clamp(floor(x - a + 1.0), 0.0, 1.0) * clamp(floor(b - x + 1.0), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 resolution = ivec2(iResolution.xy / PIXEL_SIZE);\n    vec2 uv = fragCoord / iResolution.xy;\n    float du = PIXEL_SIZE / iResolution.x;\n    float dv = PIXEL_SIZE / iResolution.y;\n    if (uv.x > 0.1) fragColor = vec4(0);\n    else if (iFrame % 3 == 0) {\n        // x: vertices, y: edges, z: faces\n        ivec4 counter = ivec4(0);\n        for(int i = 0; i < resolution.x; i++) {\n            float x = (float(i) + 0.5) * PIXEL_SIZE / iResolution.x;\n            int vertex = int(1.0 - texture(iChannel0, vec2(x, uv.y)).x + 0.1);\n            counter.x += vertex;\n            int edges = int(1.0 - texture(iChannel0, vec2(x + du, uv.y)).x + 0.1);\n            edges += int(1.0 - texture(iChannel0, vec2(x, uv.y + dv)).x + 0.1);\n            counter.y += vertex * edges;\n            int faces = vertex * int(clamped(float(edges), 1.5, 2.5));\n            faces *= int(1.0 - texture(iChannel0, vec2(x + du, uv.y + dv)).x + 0.1);\n            counter.z += faces;\n        }\n        fragColor = vec4(counter);\n    } else if (iFrame % 3 == 1) {\n        ivec4 counter = ivec4(0);\n        for (int i = 0; i < resolution.y; i++) {\n            float y = (float(i) + 0.5) * PIXEL_SIZE / iResolution.y;\n            counter += ivec4(texture(iChannel1, vec2(0.05, y)) + 0.1);\n        }\n        fragColor = vec4(counter);\n    } else {\n        fragColor = texture(iChannel1, vec2(0.05, 0.5));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// The MIT License\n// Copyright © 2021 IWBTShyGuy\n\nfloat letter(in vec2 uv, in int idx) {\n    uv = clamp(uv, 0.0, 1.0);\n    int i = idx % 16;\n    int j = 15 - idx / 16;\n    vec2 origin = vec2(float(i) / 16.0, float(j) / 16.0);\n    uv = (uv / 16.0 + origin);\n    float r = texture(iChannel2, uv).x;\n    return floor(r + 0.5);\n}\n\nfloat figure(in vec2 uv, in int number) {\n    float size = 0.5;\n    int a = sign(sign(number) + 1);\n    a = a * 32 + (1 - a) * 45;\n    number *= sign(number);\n    int b = (number % 1000) / 100;\n    int c = (number % 100) / 10;\n    int d = number % 10;\n    float irr0 = letter((uv - 0.5 + vec2(0.3, 0)) / size + 0.5, a);\n    float irr1 = letter((uv - 0.5 + vec2(0.1, 0)) / size + 0.5 , 48 + b);\n    float irr2 = letter((uv - 0.5 - vec2(0.1, 0)) / size + 0.5 , 48 + c);\n    float irr3 = letter((uv - 0.5 - vec2(0.3, 0)) / size + 0.5, 48 + d);\n    return max(max(max(irr0, irr1), irr2), irr3);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float supx = 1.0 - 0.2 * iResolution.y / iResolution.x;\n    if (uv.x < supx || uv.y > 0.2) {\n        fragColor = texture(iChannel0, uv);\n    } else if (iFrame % 3 == 2) {\n        // We need to multiply by 10 here. It's very strange...\n        vec4 counter = vec4(texture(iChannel1, vec2(0.05, 0.5)));\n        int calc = int(counter.x - counter.y + counter.z);\n        float digit = figure((uv - vec2(supx, 0.0)) / vec2((1.0 - supx), 0.2), calc);\n        fragColor = vec4(digit, digit, digit, 1.0);\n    } else {\n        fragColor = texture(iChannel3, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}