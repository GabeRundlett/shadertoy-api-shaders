{
    "Shader": {
        "info": {
            "date": "1588898577",
            "description": "Drag mouse around to make waves in the pool.  Comment line 1 to see just the fluid simulation.",
            "flags": 32,
            "hasliked": 0,
            "id": "3sXBzs",
            "likes": 6,
            "name": "Rippling Pool",
            "published": 3,
            "tags": [
                "reflection",
                "raymarch",
                "water",
                "ripple",
                "pool"
            ],
            "usePreview": 0,
            "username": "natethegreat2525",
            "viewed": 575
        },
        "renderpass": [
            {
                "code": "#define raymarch 1\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF 0.01\n#define EP 0.01\n#define PI 3.14159\n\nmat2 rot(float a) {\n    float x = sin(a);\n    float y = cos(a);\n    return mat2(y, x, -x, y);\n}\n\nfloat sdRect(vec3 p, vec3 s) {\n    return max(max(p.x-s.x, p.y-s.y), max(max(p.z-s.z, -p.x-s.x), max(-p.y-s.y, -p.z-s.z)));\n}\n\nfloat sdPlaneBumpy(vec3 p) {\n    p.x+=4.;\n    p.z+=4.;\n    float b = texture(iChannel0, p.xz*.1).z*.1;\n    return abs(p.y-b* .8)-.002;\n}\n\nvec2 getDist(vec3 p) {\n    float sphere = length(p-vec3(2,0,-2)) - 1.;\n    \n    float plane = sdPlaneBumpy(p-vec3(0,0,0));\n    float planeBox = sdRect(p-vec3(0,0,0), vec3(6));\n    plane = max(plane, planeBox);\n    \n    float wall1 = sdRect(p-vec3(-5,-.8,0), vec3(1, 1, 6));\n    float wall2 = sdRect(p-vec3(7,-.8,0), vec3(1, 1, 6));\n    float wall3 = sdRect(p-vec3(0,-.8,-5), vec3(6, 1, 1));\n    float wall4 = sdRect(p-vec3(1,-.8,7), vec3(7, 1, 1));\n    float wall = min(min(wall1, wall2), min(wall3, wall4));\n    \n    float floorD = sdRect(p-vec3(1, -2.8, 1), vec3(7, 1, 7));\n    \n    vec2 ret = vec2(plane, 0);\n    if (wall < ret.x) {\n        ret = vec2(wall, 1);\n    }\n    if (floorD < ret.x) {\n        ret = vec2(floorD, 2);\n    }\n    return ret;\n}\n\nvec2 getRayDist(vec3 rp, vec3 rd) {\n    float d = 0.;\n    vec3 p = rp;\n    vec2 ret;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        p = rp + rd*d;\n        ret = getDist(p);\n        d += ret.x*.6;\n        if(ret.x <= SURF || d > MAX_DIST) break;\n    }\n    ret.x = d;\n    return ret;\n}\n\nvec3 getNorm(vec3 p) {\n    float c = getDist(p).x;\n    vec2 ep = vec2(EP,0);\n    vec3 norm;\n    vec3 eps[3] = vec3[3](ep.xyy, ep.yxy, ep.yyx);\n    for (int i = min(0,iFrame); i < 3; i++) {\n        norm[i] = getDist(p+eps[i]).x-c;\n    }\n    return normalize(norm);\n}\n\nvec3 reflectRay(vec3 ray, vec3 norm) {\n    float d = dot(ray, norm);\n    vec3 side = ray - d*norm;\n    return -d*norm + side;\n}\n\nvec3 getColor(vec3 rp, vec3 rd) {\n    vec2 refD = getRayDist(rp, rd);\n    vec3 refP = rp + rd*refD.x;\n    vec3 refCol = vec3(0);\n    if (refD.x > 99.) {\n        return vec3(0);\n    }\n    vec3 norm = getNorm(refP);\n    float refShade = clamp(dot(vec3(0,1,0), norm), .3, 1.);\n    vec3 refl = reflect(rd, norm);\n    float reflSparkle = clamp(dot(vec3(0,1,0), refl), 0., 1.);\n    vec3 color;\n    if (refD.y < .5) {\n        vec2 refractD = getRayDist(refP+rd*.1, refract(rd, norm, .8));\n        vec3 refractP = refP+rd*.1+refractD.x*rd;\n        vec3 refractColor = vec3(0);\n        if (refractD.x < 50.) {\n            refractColor = texture(iChannel1, refractP.xz*.2 + refractP.zy*.2).rgb;\n            if (refractD.y > 1.5 && refractD.y < 2.5) {\n        \t\trefractColor = texture(iChannel2, refractP.xz*.2).rgb;\n    \t\t}\n        }\n        float transparency = -dot(rd, norm);\n        color = mix(vec3(.1, .5, .8), refractColor, pow(transparency, 2.));\n    }\n    if (refD.y > .5 && refD.y < 1.5) {\n        color = texture(iChannel1, refP.xz*.2).rgb;\n        //color = vec3(.3, .3, .3);\n    }\n    if (refD.y > 1.5 && refD.y < 2.5) {\n        color = texture(iChannel0, refP.xz*.2).rgb;\n    }\n    refCol = refShade*color + pow(reflSparkle, 22.) * vec3(1);\n    return refCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef raymarch\n    vec2 uv = (fragCoord*2.-iResolution.xy)/(iResolution.x);\n\n    float time = iTime*.3;\n    //vec3 rp = vec3(1.+cos(iTime)*3.,7,-5.+sin(iTime)*2.);\n    vec3 rp = vec3(1.+8.*sin(time), 7,1.+8.*cos(time));\n    //rp.xz = vec2(sin(iTime)*8., -cos(iTime)*8.);\n    vec3 rd = normalize(vec3(uv.xy, 1));\n    rd.yz *= rot(-.7);\n    rd.xz *= rot(time+3.1415);\n    //rd.xz *= rot(iMouse.x*.01);\n    \n    vec3 col = getColor(rp, rd);\n    \n    fragColor = vec4(col,1.0);\n    #else\n    float tex = texture(iChannel0, fragCoord/iResolution.xy).z;\n    fragColor = vec4(.5-tex, 0, tex, 1);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 10) {\n        fragColor.z = .4*texture(iChannel1, fragCoord/iResolution.xy).r-.1;\n        return;\n    }\n    \n    ivec2 pos = ivec2(fragCoord);\n    vec4 cur = texelFetch(iChannel0, pos, 0);\n    \n    if (length(iMouse.xy - fragCoord) < 10.) {\n    \tcur = vec4(0,0,1,0);   \n    }\n    \n    vec4 left = texelFetch(iChannel0, pos+ivec2(-1,0), 0);\n    vec4 right = texelFetch(iChannel0, pos+ivec2(1,0), 0);\n    vec4 up = texelFetch(iChannel0, pos+ivec2(0,1), 0);\n    vec4 down = texelFetch(iChannel0, pos+ivec2(0,-1), 0);\n    float targ = (left.z + right.z + up.z + down.z) * .25;\n    float diff = targ - cur.z;\n    cur.x += diff*.2 - cur.z*.001;\n    cur.x *= .9999;\n    cur.z += cur.x;\n    \n    //cur.z = clamp(cur.z, 0., 1.);\n    //cur.x = clamp(cur.x, -1., 1.);\n    \n    fragColor = cur;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n    vec4 cur = texelFetch(iChannel0, pos, 0);\n    \n    if (length(iMouse.xy - fragCoord) < 10.) {\n    \tcur = vec4(0,0,1,0);   \n    }\n    \n    vec4 left = texelFetch(iChannel0, pos+ivec2(-1,0), 0);\n    vec4 right = texelFetch(iChannel0, pos+ivec2(1,0), 0);\n    vec4 up = texelFetch(iChannel0, pos+ivec2(0,1), 0);\n    vec4 down = texelFetch(iChannel0, pos+ivec2(0,-1), 0);\n    float targ = (left.z + right.z + up.z + down.z) * .25;\n    float diff = targ - cur.z;\n    cur.x += diff*.2 - cur.z*.001;\n    cur.x *= .9999;\n    cur.z += cur.x;\n    \n    //cur.z = clamp(cur.z, 0., 1.);\n    //cur.x = clamp(cur.x, -1., 1.);\n    \n    fragColor = cur;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n    vec4 cur = texelFetch(iChannel0, pos, 0);\n    \n    if (length(iMouse.xy - fragCoord) < 10.) {\n    \tcur = vec4(0,0,1,0);   \n    }\n    \n    vec4 left = texelFetch(iChannel0, pos+ivec2(-1,0), 0);\n    vec4 right = texelFetch(iChannel0, pos+ivec2(1,0), 0);\n    vec4 up = texelFetch(iChannel0, pos+ivec2(0,1), 0);\n    vec4 down = texelFetch(iChannel0, pos+ivec2(0,-1), 0);\n    float targ = (left.z + right.z + up.z + down.z) * .25;\n    float diff = targ - cur.z;\n    cur.x += diff*.2 - cur.z*.001;\n    cur.x *= .9999;\n    cur.z += cur.x;\n    \n    //cur.z = clamp(cur.z, 0., 1.);\n    //cur.x = clamp(cur.x, -1., 1.);\n    \n    fragColor = cur;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n    vec4 cur = texelFetch(iChannel0, pos, 0);\n    \n    if (length(iMouse.xy - fragCoord) < 10.) {\n    \tcur = vec4(0,0,1,0);   \n    }\n    \n    vec4 left = texelFetch(iChannel0, pos+ivec2(-1,0), 0);\n    vec4 right = texelFetch(iChannel0, pos+ivec2(1,0), 0);\n    vec4 up = texelFetch(iChannel0, pos+ivec2(0,1), 0);\n    vec4 down = texelFetch(iChannel0, pos+ivec2(0,-1), 0);\n    float targ = (left.z + right.z + up.z + down.z) * .25;\n    float diff = targ - cur.z;\n    cur.x += diff*.2 - cur.z*.001;\n    cur.x *= .9999;\n    cur.z += cur.x;\n    \n    //cur.z = clamp(cur.z, 0., 1.);\n    //cur.x = clamp(cur.x, -1., 1.);\n    \n    fragColor = cur;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}