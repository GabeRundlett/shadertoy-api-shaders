{
    "Shader": {
        "info": {
            "date": "1652746363",
            "description": "Alll the smoothstep described in [url=https://iquilezles.org/articles/smoothsteps/]this article[/url]. Polynomial, Rational, Piecewise Polynomial and Trigonometric, paired with their first and second derivatives.",
            "flags": 0,
            "hasliked": 0,
            "id": "st2BRd",
            "likes": 116,
            "name": "Smoothsteps",
            "published": 3,
            "tags": [
                "2d",
                "smoothstep"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 4506
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Nine different smoothsteps, as described at\n// https://iquilezles.org/articles/smoothsteps/\n//\n//         ┎──────────────────────┰─────────────────────┰────────────────┒\n// Top:    ┃ Cubic Polynomial     ┃ Quartic Polynomial  ┃ Polynomial     ┃\n//         ┠──────────────────────╂─────────────────────╂────────────────┨\n// Middle: ┃ Quadratic Rational   ┃ Cubic Rational      ┃ Rational       ┃\n//         ┠──────────────────────╂─────────────────────╂────────────────┨\n// Bottom: ┃ Piecewise Polynomial ┃ Piecewise Quadratic ┃ Trigonometric  ┃\n//         ┖──────────────────────┸─────────────────────┸────────────────┚\n//\n// Blue:   smoothstep\n// Gren:   inverse smoothstep\n// Yellow: first derivative\n// Red:    second derivative\n\n\n// return smoothstep (.x), its inverse (.y) and its derivative (.z)\nvec3 my_smoothstep( float x, int id )\n{\n    // Cubic Polynomial\n    if( id==0 )\n    {\n        return vec3( // smoothstep\n                     x*x*(3.0-2.0*x),\n                     // inverse\n                     0.5-sin(asin(1.0-2.0*x)/3.0),\n                     // derivative\n                     6.0*x*(1.0-x));\n    }\n    \n    // Quartic Polynomial (note it's not symmetric)\n    if( id==1 )\n    {\n        return vec3( // smoothstep\n                     x*x*(2.0-x*x),\n                     // inverse\n                     sqrt(1.0-sqrt(1.0-x)),\n                     // derivative\n                     4.0*x*(1.0-x*x));\n    }\n    \n    // Quintic Polynomial\n    if( id==2 )\n    {\n        return vec3( // smoothstep\n                     x*x*x*(x*(x*6.0-15.0)+10.0),\n                     // inverse\n                     -1.0, // no closed form\n                     // derivative\n                     30.0*x*x*(x*(x-2.0)+1.0));\n    }\n    \n    // Quadratic Rational\n    if( id==3 )\n    {\n        float d = 2.0*x*(x-1.0)+1.0;\n        return vec3( // smoothstep\n                     x*x/d,\n                     // inverse\n                     (x-sqrt(x*(1.0-x)))/(2.0*x-1.0),\n                     // derivative\n                     2.0*x*(1.0-x)/(d*d));\n    }\n    \n    // Cubic Rational\n    if( id==4 )\n    {\n        float d = 3.0*x*(x-1.0)+1.0;\n        return vec3( // smoothstep\n                     x*x*x/d,\n                     // inverse\n                     pow(x,1.0/3.0)/(pow(x,1.0/3.0)+pow(1.0-x,1.0/3.0)),\n                     // derivative\n                     3.0*x*x*(x*(x-2.0)+1.0)/(d*d) );\n    }\n    \n    // General Rational, see https://www.shadertoy.com/view/WtSGWw\n    if( id==5 )\n    {\n        const float k = 4.0;    // can be adjusted\n        float a = pow(    x,k);\n        float b = pow(1.0-x,k);\n        return vec3( // smoothstep\n                     a/(a+b),\n                     // inverse\n                     pow(x,1.0/k)/(pow(x,1.0/k)+pow(1.0-x,1.0/k)),\n                     // derivative\n                     -k*b*pow(x,k-1.0)/(x-1.0)/(a+b)/(a+b));\n    }\n    \n    // Piecewise Polynomial\n    if( id==6 )\n    {\n        const float k = 4.0;    // can be adjusted\n        return (x<0.5) ? \n            vec3( // smoothstep\n                  0.5*pow(2.0*x,k),\n                  // inverse\n                  0.5*pow(2.0*x,1.0/k),\n                  // derivative\n                  k*pow(2.0*x,k-1.0)) :\n            vec3( // smoothstep\n                  1.0-0.5*pow(2.0*(1.0-x),k),\n                  // inverse\n                  1.0-0.5*pow(2.0*(1.0-x),1.0/k),\n                  // derivative\n                  k*pow(2.0*(1.0-x),k-1.0));\n    }\n\n    // Piecewise Quadratic\n    if( id==7 )\n    {\n        return (x<0.5) ? \n            vec3( // smoothstep\n                  2.0*x*x,\n                  // inverse\n                  sqrt(0.5*x),\n                  // derivative\n                  4.0*x) :\n            vec3( // smoothstep\n                  2.0*x*(2.0-x)-1.0,\n                  // inverse\n                  1.0-sqrt(0.5-0.5*x),\n                  // derivative\n                  4.0-4.0*x);\n    }\n      \n    // Trigonometric\n    if( id==8 )\n    {\n        const float kPi = 3.1415927;\n        return vec3( // smoothstep\n                     0.5-0.5*cos(x*kPi),\n                     // inverse\n                     acos(1.0-2.0*x)/kPi,\n                     // derivative\n                     0.5*kPi*sin(x*kPi));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    // coord\n    vec2  p = fragCoord/iResolution.xy;\n    float px = 4.0/iResolution.y;\n\n    // tiling\n    ivec2 id2 = ivec2( p*3.0 ); id2.y=2-id2.y;\n    int id = id2.y*3 + id2.x;\n    p = fract( p*3.0 );\n    p.x *= 2.0;\n    \n    // render\n    vec3 col = vec3(0.0);\n    \n    const float b1 = 0.04;\n    const float b2 = 0.02;\n    vec2 pa = (p-vec2(    b1,b1))/vec2(1.0-b1-b2,1.0-b1-b1);\n    vec2 pb = (p-vec2(1.0+b2,b1))/vec2(1.0-b1-b2,1.0-b1-b1);\n\n    if( max(abs(pa.x-0.5),abs(pa.y-0.5))<0.5 )\n    {\n        const float e = 0.005;\n        pa.x = 0.5*e + pa.x*(1.0-e); // remap to prevent out of range\n\n        col = vec3(0.15+0.02*sin(63.0*pa.x)*sin(63.0*pa.y));\n\n        // identity\n        {\n        float di = abs(pa.y-pa.x);\n        col = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep( 0.005, 0.005+px, di ) );\n        }\n\n        // smoothstep and inverse\n        {\n        vec2 f = my_smoothstep( pa.x, id ).xy;\n        vec2 df = ( 1.0*my_smoothstep(pa.x+0.5*e, id).xy-\n                    1.0*my_smoothstep(pa.x-0.5*e, id).xy)/e;\n        vec2 di = abs(pa.y-f)/sqrt(1.0+df*df);\n        col = mix( col, vec3(0.0,0.6,0.3), 1.0-smoothstep( 0.005, 0.005+px, di.y ) );\n        col = mix( col, vec3(0.0,0.8,1.0), 1.0-smoothstep( 0.005, 0.005+px, di.x ) );\n        }\n    }\n    else if( max(abs(pb.x-0.5),abs(pb.y-0.5))<0.5 )\n    {\n        const float e = 0.005;\n        pb.x = e + pb.x*(1.0-2.0*e); // remap to prevent out of range\n\n        col = vec3(0.2);\n        vec3   f  = my_smoothstep(pb.x, id);\n\n        float  y  = f.x;\n        float dy1 = f.z; // derivative\n        float dy2 = (+1.0*my_smoothstep(pb.x+0.5*e, id).z\n                     -1.0*my_smoothstep(pb.x-0.5*e, id).z)/e; // second derivative\n        float dy3 = (+1.0*my_smoothstep(pb.x+1.0*e, id).z\n                     -2.0*my_smoothstep(pb.x+0.0*e, id).z\n                     +1.0*my_smoothstep(pb.x-1.0*e, id).z)/(e*e); // third derivative\n        // axis\n        {\n        float di = abs(pb.y-0.5);\n        col = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep( 0.005, 0.005+px, di ) );\n        }\n\n        // y''(x) * 0.02\n        if( !((id==6 || id==7) && abs(pb.x-0.5)<0.005) ) // hack to hide y'' discontinuities\n        {\n        float  f = 0.02*dy2 + 0.5;\n        float df = 0.02*dy3;\n        float di = abs(pb.y-f)/sqrt(1.0+df*df);\n        col = mix( col, vec3(0.9,0.3,0.0), 1.0-smoothstep( 0.005, 0.005+px, di ) );\n        }\n\n        // y'(x) * 0.1\n        {\n        float  f = 0.1*dy1 + 0.5;\n        float df = 0.1*dy2;\n        float di = abs(pb.y-f)/sqrt(1.0+df*df);\n        col = mix( col, vec3(1.0,0.7,0.0), 1.0-smoothstep( 0.005, 0.005+px, di ) );\n        }\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}