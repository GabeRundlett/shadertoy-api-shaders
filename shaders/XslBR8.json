{
    "Shader": {
        "info": {
            "date": "1494841680",
            "description": "Not so easy with real glass",
            "flags": 0,
            "hasliked": 0,
            "id": "XslBR8",
            "likes": 16,
            "name": "Glass Duck",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "texture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 739
        },
        "renderpass": [
            {
                "code": "// \"Glass Duck\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrEllCylDf (vec3 p, vec2 r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\n\nvec3 ltDir;\nfloat dstFar, tCur;\nint idObj;\nconst int idBdy = 1, idWng = 2, idHead = 3, idBk = 4, idEye = 5;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 r;\n  const vec2 cs = vec2 (cos (0.3), sin (0.3));\n  float dMin, d, h, s;\n  dMin = dstFar;\n  h = 0.5;\n  r = vec2 (0.2, 0.3 + 0.05 * clamp (p.z, -2., 2.));\n  s = (length (p.xz / r) - 1.) * min (r.x, r.y);\n  d = min (max (s, abs (p.y) - h), length (vec2 (s, p.y)) - h);\n  if (d < dMin) { dMin = d;  idObj = idBdy; }\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, 0.3, 0.6);\n  q.yz = Rot2Cs (q.yz, cs);\n  q.xy = Rot2Cs (q.xy, vec2 (cs.x, - cs.y));\n  q.xz = Rot2Cs (q.xz, vec2 (cs.x, - cs.y));\n  r = vec2 (0.3, 0.5 + 0.08 * clamp (q.z, -2., 2.));\n  h = 0.07;\n  s = (length (q.yz / r) - 1.) * min (r.x, r.y);\n  d = SmoothMin (min (max (s, abs (q.x) - h), length (vec2 (s, q.x)) - h), dMin, 0.05);\n  if (d < dMin) { dMin = d;  idObj = idWng; }\n  d = SmoothMin (PrEllipsDf (p - vec3 (0., 0.75, -0.4), vec3 (0.4, 0.35, 0.5)),\n     dMin, 0.1);\n  if (d < dMin) { dMin = d;  idObj = idHead; }\n  q = p - vec3 (0., 0.65, -0.9);\n  q.zy = Rot2Cs (q.zy, vec2 (cs.x, - cs.y));\n  h = 0.15;\n  r = vec2 (0.15, 0.04) * (1. - 0.1 * min (2., max (0., 1. - q.z / h)));\n  d = PrEllCylDf (q, r, h);\n  q.z -= 0.9 * h;\n  d = SmoothMin (max (d, - PrEllCylDf (q, r - 0.02, 2. * h)), dMin, 0.01);\n  if (d < dMin) { dMin = d;  idObj = idBk; }\n  q = p;\n  q.x = abs (q.x);\n  d = PrSphDf (q - vec3 (0.245, 0.825, -0.6), 0.125);\n  if (d < dMin) { dMin = d;  idObj = idEye; }\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat MarbVol (vec3 p)\n{\n  vec3 q;\n  float f;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 5; j ++) {\n    q = abs (q) / dot (q, q) - 0.89;\n    f += 1. / (1. + abs (dot (p, q)));\n  }\n  return f;\n}\n\nvec3 DukMarb (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float t;\n  col = vec3 (0.);\n  t = 0.;\n  for (int j = 0; j < 32; j ++) {\n    t += 0.02;\n    col = mix (HsvToRgb (vec3 (mod (MarbVol (ro + t * rd), 1.), 1., 1. / (1. + t))),\n       col, 0.95);  \n  }\n  return clamp (col, 0., 1.);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.0005;\n  for (int j = 0; j < 50; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.01;\n    if (sh < 0.03) break;\n  }\n  return sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 q, vn, vnp, col;\n  const vec2 cs = vec2 (cos (0.3), sin (0.3));\n  float dstObj, ltDotVn, sh, glit, fr;\n  dstFar = 30.;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    q = ro;\n    if (idObj != idEye) { \n      col = DukMarb (ro, refract (rd, vn, 0.75));\n      if (idObj == idBdy) {\n        col *= 1. - smoothstep (0.1, 0.3, ro.y) * smoothstep (0., 0.7, ro.z) * 0.1 *\n           SmoothBump (0.3, 0.5, 0.05, mod (20. * ro.x, 1.));\n      } else if (idObj == idWng) {\n        q.x = abs (q.x);\n        q -= vec3 (0.5, 0.3, 0.6);\n        q.yz = Rot2Cs (q.yz, cs);\n        q.xy = Rot2Cs (q.xy, vec2 (cs.x, - cs.y));\n        q.xz = Rot2Cs (q.xz, vec2 (cs.x, - cs.y));\n        col *= 1. - step (0.02, q.x) * smoothstep (0., 0.2, q.z) * 0.2 *\n           SmoothBump (0.3, 0.5, 0.05, mod (30. * q.y, 1.));\n      } else if (idObj == idBk) {\n        col = mix (vec3 (0.6, 0.6, 0.9) * max (0.7 - 0.3 * dot (rd, vn), 0.), col,\n          smoothstep (-1.1, -0.97, ro.z));\n      }\n    } else {\n       col = mix (vec3 (0.1), vec3 (0.8, 0.7, 0.2) * max (0.7 - 0.3 * dot (rd, vn), 0.),\n         smoothstep (0.02, 0.04, length (q.yz - vec2 (0.875, -0.65))));\n    }\n    sh = ObjSShadow (ro, ltDir);\n    ltDotVn = max (0., dot (vn, ltDir));\n    vnp = VaryNf (1000. * ro, vn, 2.);\n    glit = 500. * step (0.01, ltDotVn) *\n       pow (max (0., dot (ltDir, reflect (rd, vn))), 16.) *\n       pow (1. - 0.6 * abs (dot (normalize (ltDir - rd), vnp)), 8.);\n    col += sh * vec3 (1., 1., 0.5) * (glit +\n       0.3 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 256.));\n    fr = pow (1. - abs (dot (rd, vn)), 5.);\n    col = mix (col, vec3 (0.5) * (0.7 + 0.3 * reflect (rd, vn).y), fr);\n  } else {\n    col = vec3 (0.5) * (0.7 + 0.3 * rd.y);\n  }\n  col = pow (clamp (col, 0., 1.), vec3 (0.9));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2.5 * pi * mPtr.x;\n    el += 0.3 * pi * mPtr.y;\n    el = clamp (el, -0.27 * pi, -0.03 * pi);\n  } else {\n    az += 3.5 * pi * sin (0.014 * pi * tCur);\n    el += 0.12 * pi * sin (0.2 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 4.));\n  ro = vuMat * vec3 (0., 0., -5.);\n  ro.y += 0.15;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrEllCylDf (vec3 p, vec2 r, float h)\n{\n  return max ((length (p.xy / r) - 1.) * min (r.x, r.y), abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}