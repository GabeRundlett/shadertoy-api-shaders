{
    "Shader": {
        "info": {
            "date": "1538690033",
            "description": "The same house, but this time without the if statements.",
            "flags": 0,
            "hasliked": 0,
            "id": "4tcfR4",
            "likes": 0,
            "name": "Layered House using step()",
            "published": 3,
            "tags": [
                "layers",
                "house",
                "step"
            ],
            "usePreview": 0,
            "username": "D4VID",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "//Positions\nvec2 housePos = vec2(0.5, 0.3);\nvec2 windowPos = vec2(0.3, 0.3);\nvec2 window2Pos = vec2(0.68, 0.3);\nvec2 chimneyPos = vec2(0.3, 0.7);\nvec2 doorPos = vec2(0.5, 0.15);\n\n//Dimentions\nvec2 houseSideLength = vec2(0.3, 0.2);\n\nvec2 windowSideLength = vec2(0.05, 0.05);\n\nvec2 chimneySideLength = vec2(0.05, 0.1);\n\nvec2 doorSideLength = vec2(0.06, 0.1);\n\n//Layer controls \nfloat layer1On = 1.0;\nfloat layer2On = 1.0;\nfloat layer3On = 1.0;\nfloat layer4On = 1.0;\nfloat layer5On = 1.0;\n\n//Colors\nvec3 house = vec3(1.0, 0.5, 0.0);\nvec3 window = vec3(0.9, 0.9, 0.9);    \nvec3 chimney = vec3(0.5, 0.5, 0.5);\nvec3 door = vec3(0.5, 0.4, 0.2);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float aspectRatio = iResolution.y / iResolution.x;\n    uv.y *= aspectRatio;\n    housePos.y *= aspectRatio;\n\twindowPos.y *= aspectRatio;\n\twindow2Pos.y *= aspectRatio;\n\tchimneyPos.y *= aspectRatio;\n\tdoorPos.y *= aspectRatio;\n    \n    \nvec4 BG = vec4(0.0, 0.0, uv.y*3.0, 1.0); \nvec4 layer2 = vec4(0.0, 0.0, 0.0, 0.0);\nvec4 layer3 = vec4(0.0, 0.0, 0.0, 0.0);    \nvec4 layer4 = vec4(0.0, 0.0, 0.0, 0.0);\nvec4 layer5 = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    \n\tfloat houseX = step(housePos.x-(houseSideLength.x), uv.x) - step(housePos.x + (houseSideLength.x), uv.x);\n    float houseY = step(housePos.y-(houseSideLength.y), uv.y) - step(housePos.y + (houseSideLength.y), uv.y);\n   \n    \tlayer2 = vec4(house, ((houseX*houseY) * 1.0) * layer2On);\n    \n\tfloat windowX = step(windowPos.x-(windowSideLength.x), uv.x) - step(windowPos.x + (windowSideLength.x), uv.x);\n    float windowY = step(windowPos.y-(windowSideLength.y), uv.y) - step(windowPos.y + (windowSideLength.y), uv.y);\n\n        layer3 = vec4(window, ((windowX*windowY) * 1.0) * layer3On);\n        \n    \n\tfloat chimneyX = step(chimneyPos.x-(chimneySideLength.x), uv.x) - step(chimneyPos.x + (chimneySideLength.x), uv.x);\n    float chimneyY = step(chimneyPos.y-(chimneySideLength.y), uv.y) - step(chimneyPos.y + (chimneySideLength.y), uv.y);\n\t\t\n    \tlayer4 = vec4( chimney, ((chimneyX*chimneyY) *1.0) * layer4On);\n        \n    \n\tfloat doorX = step(doorPos.x-(doorSideLength.x), uv.x) - step(doorPos.x + (doorSideLength.x), uv.x);\n    float doorY = step(doorPos.y-(doorSideLength.y), uv.y) - step(doorPos.y + (doorSideLength.y), uv.y);\n\n    \tlayer5 = vec4(door, ((doorX*doorY) * 1.0) * layer5On);\n        \n    \n    vec4 Composite = mix(BG, layer4, layer4.a);\n\tComposite = mix(Composite, layer2, layer2.a);\n    Composite = mix(Composite, layer3, layer3.a);\n    Composite = mix(Composite, layer5, layer5.a);\n    fragColor = Composite;\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}