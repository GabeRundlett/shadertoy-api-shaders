{
    "Shader": {
        "info": {
            "date": "1654695757",
            "description": "I'm about to show off for my next videoconference",
            "flags": 2,
            "hasliked": 0,
            "id": "NdKyDR",
            "likes": 23,
            "name": "Webcam Glitch",
            "published": 3,
            "tags": [
                "glitch",
                "webcam"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 1410
        },
        "renderpass": [
            {
                "code": "// Webcam Glitch\n// By Leon Denise 08-06-2022\n// Simple and handy glitch effect for digital screen\n\nvec3 hash33(vec3 p3) // Dave Hoskins https://www.shadertoy.com/view/4djSRW\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // zoom out\n    uv = (uv-.5)*1.1+.5;\n    \n    // animation\n    float speed = 10.;\n    float t = floor(iTime*speed);\n    \n    // randomness\n    vec2 lod = iResolution.xy/hash21(t)/200.;\n    vec2 p = floor(uv*lod);\n    vec3 rng = hash33(vec3(p,t));\n    \n    // displace uv\n    vec2 offset = vec2(cos(rng.x*6.283),sin(rng.x*6.283))*rng.y;\n    float fade = sin(fract(iTime*speed)*3.14);\n    vec2 scale = 50. / iResolution.xy;\n    float threshold = step(0.9, rng.z) ;\n    uv += offset * threshold * fade * scale;\n    \n    // chromatic abberation\n    vec2 rgb = 10./iResolution.xy * fade * threshold;\n    fragColor.r = texture(iChannel0, uv+rgb).r;\n    fragColor.g = texture(iChannel0, uv).g;\n    fragColor.b = texture(iChannel0, uv-rgb).b;\n    fragColor.a = 1.0;\n    \n    // crop\n    fragColor.rgb *= step(0.,uv.x) * step(uv.x,1.) * step(0.,uv.y) * step(uv.y,1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}