{
    "Shader": {
        "info": {
            "date": "1668414556",
            "description": "version 2.4;\nadded pixelation shader;\nfix mirror",
            "flags": 32,
            "hasliked": 0,
            "id": "cdfXzr",
            "likes": 1,
            "name": "ray marching with rtx",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Kolya142",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "#define PIXELATION false\n#define BLOCKSIZE  5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    if (PIXELATION) {\n        uv /= float(BLOCKSIZE);\n        uv.x = float(int(uv.x)*BLOCKSIZE);\n        uv.y = float(int(uv.y)*BLOCKSIZE);\n    }\n    fragColor = texture(iChannel0, uv/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sphere(vec3 p, vec3 c, float r) {\n    return length(p-c)-r;\n}\nfloat sdBox( vec3 p, vec3 c, vec3 b )\n{\n  vec3 q = abs(p-c) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nvec3 light_pos() {\n    return vec3(vec2(1.6, 7.), .0);\n}\nvec2 rot(vec2 p, float a) {\n    return vec2(p.x * cos(a) - p.y * sin(a), \n                p.x * sin(a) + p.y * cos(a));\n}\nvec2 map_the_world(in vec3 p) {\n    vec3 pbi = p;\n    pbi.xy = rot(pbi.xy, sin(iTime));\n    pbi.xz = rot(pbi.xz, cos(iTime));\n    float s = sphere(vec3(p.x, p.y, p.z), vec3(-3., sin(iTime)+3., -3.), 1.);\n    float b1 = sdBox(p, vec3(sin(2.68), cos(2.68), -3.), vec3(100., 2., 100.));\n    float bi = sdBox(pbi, vec3(3., 1., 2.), vec3(1.) );\n    float l = sphere(p, light_pos(), .3);\n    float glass = sphere(vec3(p.x, p.y, p.z), vec3(+3., 3., -3.), .3);\n    float index = 0.;\n    float m = min(s, min(b1, min(bi, min(l, glass))));\n    if (s == m) {\n        index = 1.;\n    }\n    if (b1 == m) {\n        index = 2.;\n    }\n    if (bi == m) {\n        index = 3.;\n    }\n    if (l == m) {\n        index = 4.;\n    }\n    if (glass == m) {\n        index = 5.;\n    }\n    return vec2(m, index);\n}\nvec3 Norm(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = map_the_world(p + small_step.xyy).x - map_the_world(p - small_step.xyy).x;\n    float gradient_y = map_the_world(p + small_step.yxy).x - map_the_world(p - small_step.yxy).x;\n    float gradient_z = map_the_world(p + small_step.yyx).x - map_the_world(p - small_step.yyx).x;\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\nfloat shadow(vec3 ro, vec3 rd) {\n    float step_size;\n    vec3 pos;\n    float dist;\n    float d;\n    for (int i = 0; i < 20;i++) {\n        pos = ro + dist * rd;\n        vec2 map = map_the_world(pos);\n        d = map.x;\n        if (d < .0001 && dist > .015) {\n            if (map.y == 4.) return -10.;\n            return .5;\n        }\n        dist += d;\n    }\n    return 0.;    \n}\nvec4 render(vec3 ro, vec3 rd) {\n    float step_size;\n    vec3 pos;\n    float dist;\n    float d;\n    vec3 color = vec3(1.);\n    for (int iter = 0; iter < 2; iter++) {\n        for (int i = 0; i < 100;i++) {\n            pos = ro + dist * rd;\n            vec2 map = map_the_world(pos);\n            d = map.x;\n            float id = map.y;\n            vec3 norm = Norm(pos);\n            float light = max(.1, dot(norm, normalize(light_pos())));\n            light -= shadow(pos, normalize(light_pos()));\n            if (d < .001) {\n                bool end = true;\n                if (id == 3.) {\n                    color *= vec3(.2, 1., .2);\n                }\n                if (id == 2.) {\n                    color *= vec3(.5, .6, .4);\n                }\n                if (id == 1.) {\n                    rd = reflect(rd, norm);ro = pos;color = vec3(1., .6, 1.);\n                    end = false;\n                }\n                if (id == 4.) {\n                    color *= vec3(10.);\n                }\n                if (id == 5.) {\n                    rd = -norm;pos += rd;end = false;ro = pos;\n                }\n                if (end) {\n                    return vec4(color * light, dist);\n                }\n            }\n            dist += d;\n        }\n    }\n    return vec4(vec3(.4, .5, .8)*color, 0.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 vuv = fragCoord/iResolution.xy;\n    vuv.x *= iResolution.x / iResolution.y;\n    vuv.x -= .5;\n    vec2 uv = vuv * 2. - 1.;\n    vec3 ro = vec3(0., 0., -6.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    vec2 mouse = (iMouse.xy/iResolution.xy - .5) * 3.;\n    rd.yz = rot(rd.yz, mouse.y);rd.xz = rot(rd.xz, mouse.x);\n    ro.yz = rot(ro.yz, mouse.y);ro.xz = rot(ro.xz, mouse.x);\n\n    // Time varying pixel color\n    vec4 col = render(ro, rd);\n\n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}