{
    "Shader": {
        "info": {
            "date": "1613670379",
            "description": "Stacked parabolas converge to trinagle. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "tl3fDl",
            "likes": 3,
            "name": "Parabolas -> Triangle",
            "published": 3,
            "tags": [
                "triangle",
                "parabola"
            ],
            "usePreview": 0,
            "username": "branc116",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "\n#define zoom 16.0\n#define t 0.01\n\nvec4 vclamp(in vec4 a) {\n    return vec4(\n        min(max(a.x, 0.0), 1.0),\n        min(max(a.y, 0.0), 1.0),\n        min(max(a.z, 0.0), 1.0),\n        min(max(a.w, 0.0), 1.0)\n    );\n}\n\nvec4 color(vec3 uv) {\n\tvec4 oc;\n    uv.y -= 1.0;\n    uv *=  max(1.0, 39.0 * pow(abs(sin(.1*uv.z)), 2.));\n    uv.x *= 1.7;\n    oc = vec4(0.0);\n   \toc += vec4(abs(uv.x) < 0.1 && uv.y > -1.0 ? 1.0 : 0.0) * .5;\n\tfloat i = float(int(uv.y));\n    if (i >= 0.0)\n    \treturn oc;\n    \n    uv.y = mod(uv.y, -1.0);\n    uv.x += float(i);\n    float j = float(int(uv.x + 1.0));\n\tuv.x = mod(uv.x, 2.0);\n\tuv.x -=1.0;\n    uv.y += 0.09;\n\tif (j >= 1.0)\n\t\treturn oc;\n\tif ( j < (i + 1.0) * 2.0)\n\t\treturn oc;\n\tfloat e = abs(-uv.x * uv.x - uv.y);\n    oc += vec4(exp(-e*30.0));\n\t//oc += e < t ? 1.4 : 0.0;\n\treturn oc;\n}\n#define mt 0.02\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst ivec3 msaa = ivec3(4, 4, 4);\n    const vec3 msaaf = vec3(msaa);\n\tvec3 uv = vec3((fragCoord.xy/iResolution.xy * vec2(1.0, 1.) - vec2(.5))  * zoom, iTime);\n\tfragColor = vclamp(color(uv));\n\tfor (int i = 0 ; i <= msaa.x ; i++) {\n\t\tfloat l = ((msaaf.x / -2.0) + float(i))/msaaf.x * 1.0;\n\t\t\tfor (int j = 0 ; j <= msaa.y ; j++) {\n                float tt = (-(msaaf.y / 2.0) + float(j))/msaaf.y * 1.0;\n                for (int k = 0; k <= msaa.z ; k++) {\n                    float time = iTime + (-mt + 2.0*mt*(float(k)/msaaf.z));\n                    uv = vec3(((fragCoord.xy + vec2(l, tt)) /iResolution.xy * vec2(1.0, 1.) - vec2(.5)) * zoom, time * 2.0);\n                    fragColor += vclamp(color(uv));\n                }\n\t\t}\n\t}\n\tfragColor /=msaaf.x;\n    fragColor /=msaaf.y;\n    fragColor /=msaaf.z;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}