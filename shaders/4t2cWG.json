{
    "Shader": {
        "info": {
            "date": "1510008103",
            "description": "adaptive quadtree floor tiling based on camera criterion.\nThe idea is to compute terrain data only in tiles (of constant resolution), and to keep the tiles in a LRU cache. \nEven in a very large domain, the number of tiles remains~constant and small.",
            "flags": 0,
            "hasliked": 0,
            "id": "4t2cWG",
            "likes": 53,
            "name": "quadtree for adaptive terrain",
            "published": 3,
            "tags": [
                "short",
                "quadtree"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1788
        },
        "renderpass": [
            {
                "code": "// Adaptive quadtree floor tiling based on camera criterion. ( inspired from https://www.shadertoy.com/view/lljSDy )\n// NB: to be conservative, we should clip the screen proj rather than only test tile corners.\n// see use there: https://www.shadertoy.com/view/Mt2cWG\n\n#define lodM  8 - int(H<200.)\n#define T iTime\n#define r(v,t) { float a = (t)*T, c=cos(a),s=sin(a); v*=mat2(c,s,-s,c); }\n\nvec3 p,  d, right, up;                            // camera pos + matrix\nfloat scal, fov, Znear, H;                        // camera scale + fov + near ; window height \n\nfloat lod(vec2 P, float r) {                      // --- determine quadtree LOD level ( MIPmap-like )\n    vec3 Vs = vec3(-P/r,p.z);                     // back to world coordinates\n    Vs *= mat3(right,up,d);                       // screen frame\n    vec2 S = abs(Vs.xy/Vs.z);                     // perspective\n    return  max(S.x,S.y) > 1. || Vs.z < Znear\n        ? 0.                                      // out of frustum\n        : float(lodM) - log2(Vs.z);               // LOD ( 0 = coarsest ; lodM at Z=1 )\n}\n\nvoid mainImage( out vec4 o,  vec2 U )\n{    \n    U /= H = iResolution.y;\n    \n    p     = vec3(.5+.5*cos(T),.5+.5*sin(T),.01);  // --- set camera geometry\n    d     = normalize(vec3(-cos(T),-sin(T),-.3)); \n    right = normalize(vec3(d.y,-d.x,0));\n    up    = cross(right,d);\n    scal = .1; fov = .5 *scal;  Znear = 1.;\n    right /= fov; up /= fov; d /= scal;\n\n    vec2 P = p.xy, fU;                    // camera xy projection ( ugly parameter transmission inheritated from object drawing )\n    float r=1.;                            \n\n    U*=.5; P*=.5; r*=.5;                  // unzoom for the whole domain falls within [0,1]^n\n    \n    o = vec4(0,0,.25,0);                  // backgroud = cold blue\n    \n    for ( int i = 0; i <= lodM; i++ ) {   // === subdivide to infinity, and beyond ! :-)\n        fU = min(U,1.-U); if (min(fU.x,fU.y) < .6*r/H) { o--; break; } // cell border\n                                          // --- test if tile subdiv is needed \n#if 0                                     //     ( indeed we should do a true clipping )\n        if ( lod( P-.5, r ) < float(i) ) break; // ( eval at tile center )\n#else\n       // if ((                           //       ( eval at tile corners )\n        if (max( lod(P-.5, r ),           //       ( ... +  center ). Switch comment if you don't\n            max( max( lod( P          , r ), lod( P-vec2(1,0), r )),\n                 max( lod( P-vec2(0,1), r ), lod( P-vec2(1,1), r ))\n                ))  < float(i) ) break;    \n#endif\n                                          // --- iterate to child tile\n        fU = step(.5,U);                  // select child\n        U = 2.*U - fU;                    // go to new local frame\n        P = 2.*P - fU;  r *= 2.;\n        \n        o += .13;                         // getting closer, getting hotter\n    }\n               \n\to.r *= lod(P-U,r);                    // draw LOD & frustum\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}