{
    "Shader": {
        "info": {
            "date": "1569983137",
            "description": "Just a test shader to try to understand the notion of optical depth better.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdyGDR",
            "likes": 8,
            "name": "Optical Depth / Beer-Lambert Law",
            "published": 3,
            "tags": [
                "scattering",
                "opticaldepth"
            ],
            "usePreview": 0,
            "username": "Zeliss",
            "viewed": 922
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float s = 4.0; //Scale factor\n    vec3 I = vec3(1.0, 1.0, 1.0); //Intensity of light when it enters medium at pLeft\n    vec3 A = vec3(0.81, 0.73, 0.5); //Scattering or absorption of each wavelength by the medium\n    vec3 pLeft = vec3(0.0, sin(iTime/1.53)*0.5 + 0.5, -0.1*(sin(iTime/1.14)*0.5+0.5)); //Point on the left side of the medium\n    vec3 pRight = vec3(1.0, sin(iTime/2.785)*0.5 + 0.5, -0.1*(sin(iTime/1.871)*0.5+0.5)); //Point on the right side of the medium\n    vec3 pL = mix(pLeft, pRight, uv.x); //Point on the \"laser line\" passing through the medium\n    vec3 pS = vec3(uv, 0.0); //Point on the interface between the medium and the camera\n    vec3 col = I * exp(-A * s * (distance(pLeft, pL) + distance(pL, pS))); //Optical depth is the ... term in exp(-...)\n    //Optical depth is essentially how much scattering or absorbing \"stuff\" there is on the path the light takes.\n    //It's higher if the medium is denser, it's higher if the path is longer.\n    //By having it vary by rgb component (different wavelength is absorbed or scattered more) we get spectral optical depth.\n    //Since this is modeling single-scattering, the light path length is the sum of\n    // the distance from the pLeft to pL and the distance from pL to pS.\n    \n    //For correctness, I should add a phase function that accounts for scattering in the direction of the camera\n    // being more likely if the beam is aimed at the camera.\n    \n    col = (1.0 - exp(-2.0*col)); //Gamma correction maybe?\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}