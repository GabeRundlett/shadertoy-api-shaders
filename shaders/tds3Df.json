{
    "Shader": {
        "info": {
            "date": "1547725595",
            "description": "pattern simplex",
            "flags": 0,
            "hasliked": 0,
            "id": "tds3Df",
            "likes": 0,
            "name": "[Ese] Simplex pattern",
            "published": 3,
            "tags": [
                "simplexpattern"
            ],
            "usePreview": 0,
            "username": "Eseris",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "const float Pi = 3.1415926535;\n\nconst mat2 Skew = mat2(\n    1.1547,  .57735, \n    0.,     1.);\n\nconst mat2 Unskew = mat2(\n     .86603, -.5,\n     0.,     1.);\n    \n\nvec2 skew(vec2 st) {\n    vec2 r = vec2(0.0);\n    r.x = 1.1547 * st.x;\n    r.y = st.y + 0.5 * r.x;\n    return r;\n}\n\nvec3 simplexGrid (vec2 st) {\n    vec3 xyz = vec3(0.0);\n\n    vec2 p = fract(Skew * st);\n    if (p.x > p.y) {\n        xyz.xy = 1.0 - vec2(p.x, p.y - p.x);\n        xyz.z = p.y;\n    } else {\n        xyz.yz = 1.0 - vec2(p.x - p.y, p.y);\n        xyz.x = p.x;\n    }\n\n    return fract(xyz);\n}\n\nvec4 drawRingQuarter(vec2 uv) {\n    if(uv.x > uv.y)\n        uv = 1. - uv;\n    float mask = 0.;\n    mask += smoothstep(.02, .0, abs(length(Unskew * uv) - .5) - .1);\n    //mask += smoothstep(.02, .0, abs(distance(Unskew * uv, vec2(0,1)) - .5) - .1);\n    //mask += smoothstep(.02, .0, \n    //\tabs(distance(Unskew * uv, vec2(1,0)) - .5) - .1);\n    mask += step(distance(Unskew * (uv - vec2(1,0)), vec2(0,0)), .2); \n    return vec4(vec3(1.), mask);\n}\n\nvec4 drawSimplex(vec3 pos) {\n    float mask = 0.;\n    mask += smoothstep(.02, .0, abs(length(pos.xy) - .5) - .1 / 2.);\n    mask += smoothstep(.02, .0, abs(length(pos.yz) - .5) - .1 / 2.);\n    mask += smoothstep(.02, .0, abs(length(pos.zx)  - .5) - .1 / 2.);\n    return vec4(vec3(1.), mask);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= iResolution.xy / iResolution.y;\n    uv *= 5.;\n    \n    vec3 col = vec3(0.);\n    \n    vec2 suv = fract(skew(uv));\n    vec4 ring = drawRingQuarter(fract(Skew * uv));\n    //vec4 ring = drawSimplex(simplexGrid(uv));\n    col.rgb = simplexGrid(uv);\n    col = mix(col, ring.rgb, ring.a);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}