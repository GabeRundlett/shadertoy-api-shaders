{
    "Shader": {
        "info": {
            "date": "1496705186",
            "description": "I don't really know anything about quasicrystals so I'm figuring out how [url=shadertoy.com/view/4tcXDl]sheepmaster's shader[/url] works.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdXBzS",
            "likes": 11,
            "name": "Interactive Quasicrystal Zoom",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "interactive",
                "quasicrystal",
                "zoom"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 926
        },
        "renderpass": [
            {
                "code": "const int numWaves = 5;\nconst float numStripes = 1.0;\nconst float numFreqs = 8.0;\nconst float meanFreq = 4.0;\nconst float stdDev = 2.0;\nconst float period = 3.0;\nconst float pi = 4.0 * atan(1.0);\nconst float pi2 = 2.0 * pi;\nconst float ln2 = log(2.0);\nconst float mean = meanFreq * .69314718;\n\nfloat wavething(int n, float x){\n    float l = ln2 * float(n) + log(x);\n    l -= mean;\n    return exp(-l * l / stdDev) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = exp2(-fract(iTime / period));\n    float sum1 = 0.0;\n    for(int n = 0; n < int(numFreqs); n++){\n        sum1 += wavething(n, scale);\n    }\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    if(iMouse.xy == vec2(0.0)) m = vec2(0.0);\n    vec2 xy = pi2 * numStripes\n        * ((2.0 * fragCoord - iResolution.xy) / iResolution.y - m);\n    \n    float sum2 = 0.0;\n    for(int n = 0; n < numWaves; n++){\n        float theta = pi * float(n) / float(numWaves);\n        vec2 waveVec = vec2(cos(theta), sin(theta));\n        float phase = dot(xy, waveVec);\n        for(int k = 0; k < int(numFreqs); k++){\n            sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale);\n        }\n    }\n    fragColor = vec4(sum2 / sum1);\n    float r = length(xy);\n    fragColor.x *= .5 + .5 * sin(-iTime * .25 + r);\n    fragColor.y *= .5 + .5 * cos(iTime * .25 + r);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}