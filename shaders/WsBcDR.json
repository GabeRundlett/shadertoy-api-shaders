{
    "Shader": {
        "info": {
            "date": "1586385663",
            "description": "Going through a tunnel of swords.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBcDR",
            "likes": 3,
            "name": "Live by The Sword",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "sword"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "\nint matID = 0;\n\n//https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) +iTime);\n}\nmat2 rotate(float a){\n\treturn mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat sdfBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdfSphere(vec3 p,float size){\n\treturn length(p)-size;\n}\n\nfloat sdfCutAwayBox(vec3 translate,mat2 rot){\n    translate.xz*= rot;\n    float a = 0.5;\n    float b = 0.2;\n    float height = 4.0;\n    \n    float a2= length(vec2(a/1.5,b/2.)); \n     \n\treturn sdfBox(translate,vec3(a2,height,b));\n}\n\nfloat sdfPlane(vec3 p){\n    return p.y +15.5;\n}\n\nfloat sdfSword(vec3 p){\n    vec3 tip = p;\n    tip-=vec3(0,2,1.4);\n    tip.zy*=rotate((-12.*3.14)/180.);\n    vec3 tip2 = p;\n    tip2-=vec3(0,2,-1.4);\n    tip2.zy*=rotate((12.*3.14)/180.);\n    \n    vec3 tip3 = p;\n    tip3-=vec3(2.5,2,0);\n    tip3.xy*=rotate((-24.*3.14)/180.);\n    vec3 tip4 = p;\n    tip4-=vec3(-2.5,2,0);\n    tip4.xy*=rotate((24.*3.14)/180.);\n    \n    \n    float a = 0.5;\n    float b = 0.2;\n    float height = 4.;\n    \n    float a2= length(vec2(a/2.,b/2.)); \n    float box = sdfBox(p+vec3(0,-1,0),vec3(a,height,b));\n    \n    float box2 = sdfCutAwayBox(p+vec3(-0.53,-1,-0.3),rotate((20.*3.14)/180.));\n    float box3 = sdfCutAwayBox(p+vec3(-0.53,-1,0.3),rotate((-20.*3.14)/180.));\n    \n    float box4 = sdfCutAwayBox(p+vec3(0.53,-1,-0.3),rotate((-20.*3.14)/180.));\n    float box5 = sdfCutAwayBox(p+vec3(0.53,-1,0.3),rotate((20.*3.14)/180.));\n    float box6 = sdfBox(tip,vec3(2,2,1.2));\n    float box7 = sdfBox(tip2,vec3(2,2,1.2));\n    float box8 = sdfBox(tip3,vec3(2,4,1.2));\n    float box9 = sdfBox(tip4,vec3(2,4,1.2));\n    \n    float crossGuard = sdfBox(p+vec3(0.,3.3,0.),vec3(1.,0.3,0.3));\n    float pom = sdfSphere(p+vec3(0,6.4,0),0.4);\n    p.xz*=rotate(p.y*8.);\n    float handle = sdfBox(p+vec3(0.,4.8,0),vec3(0.2,1.3,0.2));\n \n  \n    float best = max(min(handle,min(crossGuard,min(pom,box))),\n                     -min(box8,min(box6,min(box9,min(box5,min(box4,min(box3,min(box2,box7))))))));\n    \n\n    return best;\n}\n\nfloat map(vec3 p){    \n    p.x+=sin(iTime*2.)*1.5;\n    float plane = sdfPlane(p);\n    float plane2 = sdfPlane(p*vec3(1,-1,1));\n  \n    float ang = 6.283185/13.0;\n    float sector = round(atan(p.x,p.y)/ang);\n    float c = 44.;\n    vec3 r = mod(p+0.5*c,c)-0.5*c;\n    vec3 q = p;\n    q.z = r.z;\n    \n    float an = sector*ang;\n    \n    q.xy *= rotate(an);\n    \n    q.zy *=rotate((180.*3.14)/180.);\n    vec3 q2 = q;\n    q2.zy*=rotate((180.*3.14)/180.);\n    \n   \n    float sword = sdfSword(q+ vec3(0,6,0));\n    float sword2 = sdfSword(q2- vec3(0,10,22));\n    float best = min(plane,min(plane2,min(sword2,sword)));\n    if(best == sword || best == sword2){\n    \tmatID=1;\n    } else if(best == plane || best == plane2){matID=2;}\n    return best;\n}\n\nvec3 normal(vec3 p){\n    vec2 e= vec2(0,0.01);\n\treturn normalize(vec3(map(p+e.yxx)-map(p-e.yxx),\n                          map(p+e.xyx)-map(p-e.xyx),\n                          map(p+e.xxy)-map(p-e.xxy)));\n}\n\nvec3 march(vec3 ro, vec3 rd){\n    float total = 0.;\n    float dist = 0.;\n    for(int i = 0; i<100; i++){\n        dist = map(ro+rd*total);\n        total+=dist;\n        if(dist < 0.1){\n        \tbreak;\n        }\n    }\n    \n   \n    return (ro+rd*total);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 ro = vec3(0,0,iTime*20.);\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 st = uv*5.*sin(iTime);\n    st*=rotate(iTime);\n    st = fract(st);\n    \n    ro.xy*= rotate(iTime*.5);\n    rd.xy*= rotate(iTime*.5);\n    \n   \n    vec3 col = (march(ro,rd));\n    vec3 p = (march(ro,rd));\n    vec3 n = normal(p);\n    \n  \tif(matID ==1){\n        col = 1.-pal((max(dot(normalize(ro-p),n),0.)),vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    }\n     if(matID ==2){\n         col = mix(vec3(0.04,0.14,0.15),vec3(0.04,0.33,0.32),vec3(smoothstep(0.2,0.19,length(st-0.5))));\n    }\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}