{
    "Shader": {
        "info": {
            "date": "1668636513",
            "description": "Idk what I made but it's cool",
            "flags": 32,
            "hasliked": 0,
            "id": "ddfSz7",
            "likes": 9,
            "name": "untitled #0",
            "published": 3,
            "tags": [
                "blob",
                "glowing"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "#define STEPS 100. // set higher for coolness\n#define BLUR_OUTWARDS\n//#define ADD_ORIGINAL\n\nfloat hash21(in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat dither(float c, float b, vec2 p)\n{\n    float s = floor(c*b)/b;\n    float r = fract(c*b);\n    return s + float(hash21(p) < r)*r/b;\n}\n\nvec4 dither(in vec4 c, float b, vec2 p)\n{\n    for(int s = 0; s < 4; s++)\n    {\n        c[s] = dither(c[s], b, p);\n    }\n    return c;\n}\n\nvec4 ghostBlur(sampler2D tex, vec2 p, float it)\n{\n    vec4 res = vec4(0);\n    vec2 np;\n    float st = 2./it;\n    for(float i = 1.; i > -1.-st; i -= st)\n    {\n        #ifdef BLUR_OUTWARDS\n        np = (p-0.5) * i + 0.5;\n        #else\n        np = (p-0.5) / i + 0.5;\n        #endif\n        res += texture(tex, np);\n    }\n    return res / it\n    #ifdef ADD_ORIGINAL \n    + texture(tex, p)\n    #endif\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = ghostBlur(iChannel0, uv, STEPS) + 0.1;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ss(a) (smoothstep(-1.0, 1.0, a)*2.0-1.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy-0.5)*vec2(iResolution.x/iResolution.y, 1.0);\n    //vec2 m = (iMouse.xy/iResolution.xy-0.5)*vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 m = vec2(sin(iTime),cos(iTime))*0.1*(sin(iTime)+1.5);\n    \n\n    fragColor = vec4(vec3(smoothstep(0.1 + 1.5/iResolution.y, 0.1,length(uv-m))),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}