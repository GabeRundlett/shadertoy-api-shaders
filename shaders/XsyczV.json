{
    "Shader": {
        "info": {
            "date": "1522601057",
            "description": "Simple effect",
            "flags": 0,
            "hasliked": 0,
            "id": "XsyczV",
            "likes": 40,
            "name": "LatticeWithFolding",
            "published": 3,
            "tags": [
                "tunnel",
                "grid",
                "folding",
                "lattice"
            ],
            "usePreview": 0,
            "username": "EvilRyu",
            "viewed": 1292
        },
        "renderpass": [
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Continue playing with folding lattice, code is not interesting.\n\n#define PI 3.14159265\n\nfloat smin(float a, float b, float k)\n{\n    float h = clamp(0.5+0.5*(b-a)/k,0.,1.);\n    return mix(b,a,h)-k*h*(1.-h);\n}\n\nvec4 texcube(sampler2D sam, vec3 p, vec3 n)\n{\n    vec4 p1=texture(sam, p.xy);\n    vec4 p2=texture(sam, p.xz);\n    vec4 p3=texture(sam, p.yz);\n    return p1*abs(n.z)+p2*abs(n.y)+p3*abs(n.x);\n}\n\nfloat bump(vec3 p, vec3 n)\n{\n    return dot(texcube(iChannel0, 0.2*p, n).xyz, vec3(0.299, 0.587, 0.114)); \n}\n\nvec3 bump_mapping(vec3 p, vec3 n, float weight)\n{\n    vec2 e = vec2(2./iResolution.y, 0); \n    vec3 g=vec3(bump(p-e.xyy, n)-bump(p+e.xyy, n),\n                bump(p-e.yxy, n)-bump(p+e.yxy, n),\n                bump(p-e.yyx, n)-bump(p+e.yyx, n))/(e.x*2.);  \n    g=(g-n*dot(g,n));\n    return normalize(n+g*weight);\n}\n\nvec3 path(float p)\n{\n    return vec3(sin(p*0.05)*cos(p*0.05)*18., 0.,0.);\n}\n\n// folding from gaz: https://www.shadertoy.com/view/4tX3DS\nvec2 fold(vec2 p, float a)\n{\n    p.x=abs(p.x);\n    vec2 n = vec2(cos(a),sin(a));\n    for(int i = 0; i < 3; ++i)\n    {\n        p -= 2.*min(0.,dot(p,n))*n;\n        n = normalize(n-vec2(1.,0.));\n    }\n    return p;\n}\n\nmat2 rot(float t)\n{\n    float c=cos(t);\n    float s=sin(t);\n    return mat2(c,-s,s,c);\n}\n\nfloat infi_box(vec3 p, vec2 b)\n{\n    vec2 d = abs(p.xy) - b;\n    return min(max(d.x, d.y), 0.0) + length(max(d,0.0));\n}\n\nint mateid=0;\n\nfloat map(vec3 p)\n{\n    p-=path(p.z);\n    vec3 q=p;\n    p=vec3(rot(0.05*p.z)*p.xy, p.z);\n    p.xy=fold(p.xy,PI/3.);\n    p=mod(p,2.)-1.;\n\n    // variation of BCC lattice from paniq: https://www.shadertoy.com/view/llfGRj\n    vec3 o = abs(p); \n    o-=(o.x+o.y+o.z)*0.33333;\n    float d0=max(o.x,max(o.y,o.z))-0.03;\n    float d1=length(q.xy)-1.;\n    d0=max(d0,-d1);\n    \n    mateid=0;\n    \n    float d2=infi_box(q+vec3(0.,1.2,0.),vec2(1.5,0.1+0.06*texture(iChannel1,0.1*q.xz).x));\n  \tfloat d3=d1-4.;\n    if(d2<d0) mateid=1;\n    \n    d0=smin(d0,d2,0.5);\n    \n    if(-d3<d0) mateid=2;\n    \n    // warped by a tunnel\n    d0=smin(d0,-d3,0.5);\n    \n    return d0;\n}\n\nvec3 get_normal(vec3 p)\n{ \n    vec3 e=vec3(0.001,0.0,0.0); \n    return normalize(vec3(map(p+e.xyy)-map(p-e.xyy), \n                          map(p+e.yxy)-map(p-e.yxy), \n                          map(p+e.yyx)-map(p-e.yyx))); \n} \n\nfloat intersect(vec3 ro, vec3 rd)\n{\n    float t=0.01;\n    float d=map(ro+t*rd);\n    for(int i=0;i<128;++i)\n    {\n        if(abs(d)<0.002||t>100.)\n            continue;\n        t+=d;\n        d=map(ro+t*rd);\n    }\n    if(t>100.)t=-1.;\n    return t;\n}\n\nvec3 hash3(float n)\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\n// curvature from iq: https://www.shadertoy.com/view/MsXGzM\nfloat curvature(vec3 p, vec3 n)\n{\n    float acc=0.0;\n    for(int i=0;i<4;i++)\n    {\n        vec3 aopos=normalize(hash3(float(i)*213.47));\n        aopos=aopos-dot(n,aopos)*n;\n        aopos=p+aopos*0.07;\n        float dd=clamp(map(aopos)*100.0, 0.0, 1.0 );\n        acc+=dd;\n    }\n    return smoothstep(0.2, 1.0, acc/4.0);\n}\n\nfloat shadow(vec3 ro, vec3 rd, float dist)\n{\n    float res=1.0;\n    float t=0.05;\n    float h;\n    \n    for(int i=0;i<12;i++)\n    {\n        // break still breaks on my windows.\n        if(t>dist) continue;\n        h=map(ro+rd*t);\n        res = min(6.0*h/t, res);\n        t+=h;\n    }\n    return max(res, 0.0);\n}\n\nvec3 light_source(vec3 spot_light, vec3 dir, float dis)\n{\n    float g = 0.0;\n    if (length(spot_light) < dis)\n    {\n\t\tg = pow(max(dot(normalize(spot_light), dir), 0.0), 600.0);\n    }\n    return vec3(1.6,1.2,1.) * g;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q=fragCoord.xy/iResolution.xy;\n    vec2 p=q*2.-1.;\n    p.x*=iResolution.x/iResolution.y;\n\n    vec3 ro=vec3(0.,0.,-iTime);\n    vec3 ta=ro+vec3(0,0,-1.);\n    \n    vec3 lp0=ro+vec3(0,0.2,-3);\n    \n    ro+=path(ro.z);\n    ta+=path(ta.z);\n    lp0+=path(lp0.z-1.*(.5+.5*sin(iTime)));\n    \n    vec3 f=normalize(ta-ro);\n    vec3 r=normalize(cross(f,vec3(0,1,0)));\n    vec3 u=normalize(cross(r,f));\n    \n    vec3 rd=normalize(mat3(r,u,f)*vec3(p.xy,1.717));\n    vec3 col=vec3(0.6,0.8,1.1);\n\n    float t=intersect(ro,rd);\n    if(t>-0.5)\n    {\n        vec3 pos=ro+t*rd;\n        vec3 n=get_normal(pos);\n        \n        vec3 mate=texcube(iChannel0, pos, n).xyz*vec3(0.5,0.7,1.);\n        float cur = curvature(pos, n);\n        \n        mate += cur*vec3(1.);\n        vec3 tex=texture(iChannel1,pos.xz).xyz;\n        if(mateid==1)\n        {\n            mate=.5*vec3(.6*tex.x,.8*tex.x,1.*tex.x);\n            n=bump_mapping(pos, n, 0.2/(1.+t*0.4));\n        }\n        else if(mateid==2)\n        {\n            mate=2.*vec3(0.5,.6, .6);\n            n=bump_mapping(pos, n, 0.2/(1.+t*0.4));\n        }\n        \n        if(mateid!=1)\n       \tmate=mix(mate,mate*tex,smoothstep(2.5,-1.,pos.y));\n        \n        vec3 ld0=lp0-pos;\n        float ldist=length(ld0);\n        ld0/=ldist;\n        vec3 lc0=2.*vec3(1.2,0.8,0.5);\n        \n        float sha=shadow(pos+0.01*n, ld0, ldist);\n        float dif=max(0.,dot(n,ld0))*sha;\n        float bac=max(0.,dot(n,-ld0));\n        float amb=max(0.,dot(n,vec3(0,1,0)))*max(0.,(pos.y+1.));\n        float spe=max(0.0, pow(clamp(dot(ld0, reflect(rd, n)), 0.0, 1.0), 32.0));\n        \n        vec3 Lo=10.*dif*lc0/(1.5*ldist);\n        Lo+=2.*amb*vec3(0.5,0.8,1.0);    \n        Lo+=0.5*bac*lc0;\n        Lo+=2.*spe*vec3(1.);\n        \n        Lo*=clamp(pos.y+1.8,0.0,1.);\n        \n        col=mate*Lo*0.2;\n    }\n    col=mix(col, 0.5*vec3(0.6,0.8,1.1), 1.0-exp(-0.005*t*t) );\n    col += light_source(lp0-ro, rd, 10.);\n    \n    col=pow(clamp(col,0.0,1.0),vec3(0.45));    \n    col=pow(col,vec3(0.95,.95,0.9));\n    col*=pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1);\n    fragColor.xyz=col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}