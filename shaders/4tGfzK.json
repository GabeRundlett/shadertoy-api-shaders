{
    "Shader": {
        "info": {
            "date": "1558445766",
            "description": "I put the song cuz its my graduation song ok?",
            "flags": 96,
            "hasliked": 0,
            "id": "4tGfzK",
            "likes": 3,
            "name": "equalizer i guess",
            "published": 3,
            "tags": [
                "equalizer"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 510
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n#define CIRCULAR\nfloat sgn(float n) {\n    return n > 0. ? 1. :\n    \tn < 0. ? -1. : 0.;\n}\n\n#define BARS 32.\n#define cover_no_matter_where_you_are\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 pcol1 = vec3(0.), pcol2 = vec3(0.);\n    float totalTime = 0.;\n    #ifdef cover_no_matter_where_you_are\n    totalTime = 180.;\n    #endif\n    \n    float cTime = mod(iTime, totalTime);\n    \n    #ifdef cover_no_matter_where_you_are\n    if(cTime < 34.4) {\n        pcol1 = vec3(1.)-vec3(1.,1.,0.);\n        pcol2 = vec3(1.)-vec3(0.,1.,1.);\n    } else if(cTime < 88.) {\n        pcol1 = vec3(1.)-vec3(1.,1.,0.);\n        pcol2 = vec3(1.)-vec3(1.,0.1,0.);\n    } else if(cTime < 142.6) {\n        pcol1 = vec3(1.)-vec3(1.,1.,0.);\n        pcol2 = vec3(1.)-vec3(1.,0.2,1.);\n    } else {\n        pcol1 = vec3(1.)-vec3(0.,1.,1.);\n        pcol2 = vec3(1.)-vec3(1.,0.,1.);\n    }\n    #endif\n    \n    #ifdef CIRCULAR\n    uv = -1.0+2.0*uv;\n    float sizer = texture(iChannel0, vec2(0., 0.)).r/2. + .7;\n    uv /= sizer;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    uv.xy *= mat2x2(cos(iTime*PI/180.),sin(iTime*PI/180.),-sin(iTime*PI/180.),cos(iTime*PI/180.));\n    \n    float uvx = uv.x;\n    float uvy = uv.y;\n    //bool bb = uv.x < 0. || uv.y < 0.;\n    vec2 uvv = uv;\n    \n    float x1 = atan(abs(uvv.y),abs(uvv.x));\n    //x1 += iTime;\n    if(uvx < 0. && uvy < 0.) {\n        x1 += PI;\n    } else if(uvx < 0.) {\n        x1 = PI - x1;\n    } else if(uvy < 0.) {\n        x1 = 2.*PI - x1;\n    }\n    uv.x = x1*180./PI/360.;\n    //uv.x *= mix(4.,8.,sin(iTime*3.)/2.+0.5);\n    uv.x *= 5.;\n    uv.x = mod(uv.x, 1.);\n    float y1 = distance(vec2(0.,0.), uvv) - 0.2;\n    uv.y = y1;\n    \n    #endif\n    \n    //float x1 = (atan(normalize(uvv).y, normalize(uvv).x)+PI/2.*sgn((abs(uv.x)+uv.x)/2.))/PI/2.;\n    //float x1 = (atan(uvv.y, uvv.x))*180./PI-180.+180.*sign( ( abs(uv.x) + uv.x ) / 2. );\n    //uv.x = x1/(360.+180.)+(bb?1.:0.);\n    //float y1 = distance(vec2(0., 0.), uvv) - 0.2;\n    //uv.y = y1;\n    \n    float ufx = floor(uv.x*BARS)/BARS;\n\n    // Time varying pixel color\n    float level = texture(iChannel0, vec2(ufx,0.)).r;\n    vec3 col = smoothstep(pcol1,pcol2,vec3(level));\n    \n    for(float i = 0.; i < 20.; i++) {\n        //if(uv.y > level*(1.+i/20.)/2.) {\n        if(uv.y > level*(1.)/2.) {\n            col /= i/2.+1.;\n        }\n    }\n    if(col.r < 0.1 && col.g < 0.1 && col.b < 0.1){\n    \tcol = texture(iChannel1, fragCoord.xy/iResolution.xy).rgb - vec3(1.618*1.618*1.618*iTimeDelta);\n    }\n    //col = pow(clamp(col,vec3(0.),vec3(1.)), vec3(1.0/2.2));\n    //col = sqrt(col);\n\n    // Output to screen i know i don't need gamma but yeah\n    if(uv.y > 0.){\n    \tfragColor = vec4(col,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 18651,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ariseljuju/no-matter-where-you-are"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}