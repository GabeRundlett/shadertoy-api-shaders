{
    "Shader": {
        "info": {
            "date": "1595629529",
            "description": "-",
            "flags": 0,
            "hasliked": 0,
            "id": "WlBcDt",
            "likes": 4,
            "name": "Wobbling box",
            "published": 3,
            "tags": [
                "jakowlew"
            ],
            "usePreview": 0,
            "username": "Jakowlew",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 60;\nconst float MIN_DIST = 0.1;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Operations\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(d1,-d2);\n}\n\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\n// Primitives\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdScene(vec3 p)\n{\n    p = rotateY(iTime / 2.0) * p;\n    \n    float res = MAX_DIST;\n    \n    { // Box\n    float box = sdBox(p, vec3(.9) +  + 0.1*sin(3.*iTime)) - .1;\n    \n    float clipSphere = sdSphere(p, 1.5 + 0.1*sin(3.*iTime));\n    res = opUnion(res, opIntersection(box, clipSphere));\n    \n    float subSphere = sdSphere(p, 1.3);\n    res = opSubtraction(res, subSphere);\n    }\n    \n    { // Center ball\n    float sphere = sdSphere(p, .4);\n    res = opUnion(res, sphere);   \n    }\n    \n    { // Side balls   \n    float angle = 6.28 / 4.;\n    float sector = round(atan(p.z, p.x) / angle);\n    \n    vec3 q = p;\n    float an = sector * angle;\n    q.xz = mat2(cos(an), -sin(an), sin(an), cos(an)) * q.xz;\n    \n    \n    float sphere = sdSphere(q + vec3(-1.5 + 0.5*sin(3.*iTime), 0, 0), .4 - 0.1*sin(3.*iTime));\n    res = opUnion(res, sphere);\n    }\n    \n    // Wobble\n    res *= inversesqrt(p.x*p.x + p.y*p.y + p.z*p.z);\n    // Displacement\n    res += .3*sin(sin(1.*iTime)*25.*p.x)*.3*sin(sin(1.*iTime)*25.*p.y)*.3*sin(sin(1.*iTime)*25.*p.z);\n    return res;\n} \n\n\n// Raymarching\nfloat rayMarch(vec3 eye, vec3 marchingDirection, float start, float end, int maxSteps) {\n    float depth = start;\n    for (int i = 0; i < maxSteps; ++i) {\n        float dist = sdScene(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\n\n// Lightning\nvec3 estimateNormal(vec3 p)\n{\n    float pDist = sdScene(p);\n    return normalize(vec3(\n        sdScene(vec3(p.x + EPSILON, p.y, p.z)) - pDist,\n        sdScene(vec3(p.x, p.y + EPSILON, p.z)) - pDist,\n        sdScene(vec3(p.x, p.y, p.z  + EPSILON)) - pDist\n    ));\n}\n\nvec3 phongIllumination(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity)\n{\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = clamp(dot(L, N),0.,1.); \n    //float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 lightScene(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongIllumination(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongIllumination(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Setup camera\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n\tvec3 eye = vec3(8.0, 5.0 * sin(0.2 * iTime), 7.0);    \n    //vec3 eye = vec3(0., 0., 10.0);\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * viewDir;\n    \n    // Calc SDF\n    float dist = rayMarch(eye, worldDir, MIN_DIST, MAX_DIST, MAX_MARCHING_STEPS);\n    \n    if (dist > MAX_DIST - EPSILON)\n    {\n\t\tfragColor = vec4(0);\n        return;\n    }\n    \n    vec3 p = eye + dist * worldDir;\n    \n    //vec3 K_a = vec3(1.0, .19, .0);\n    vec3 K_a = 0.5 + 0.5*cos(iTime+p.xyx+vec3(0,2,4));\n    //vec3 K_a = (estimateNormal(p) + vec3(1.0)) / 2.0;\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    \n    vec3 color = lightScene(K_a, K_d, K_s, shininess, p, eye);\n    \n    // gamma correction\n    color = pow(color, vec3(0.4545));\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}