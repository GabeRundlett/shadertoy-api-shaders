{
    "Shader": {
        "info": {
            "date": "1608564227",
            "description": "basico rostro 2d",
            "flags": 0,
            "hasliked": 0,
            "id": "tl3yRN",
            "likes": 1,
            "name": "basico rostro 2d",
            "published": 3,
            "tags": [
                "basicorostro2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1\n//recursos\n//https://iquilezles.org/articles/distfunctions2d\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{ if (d1.x<d2.x) return d1;   else return d2; }\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{ if  (-d1.x<d2.x) return d1;  else  return d2;}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{ if (d1.x>d2.x) return d1; else return d2;}\n\nvec2 opS(vec2 d1, vec2 d2) \n{ return vec2(max(-d2.x, d1.x), 2.0); }\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q; }\n\nfloat sdCirc(vec2 p, float r)\n{  return length(p)-r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\n\nvec2 rostro(vec2 p)\n{   p.y-=0.1;\n    float sPelo1= sdCirc(p-vec2(-0.5,0.0), 0.3);\n    float sPelo2= sdCirc(p-vec2(-0.6,-0.4), 0.28);\n    float sPelo3= sdCirc(p-vec2(-0.3,-0.4), 0.25);\n    float sPelo4= sdCirc(p-vec2(-0.4,-0.7), 0.26);\n    float sPelo5= sdCirc(p-vec2(-0.1,0.3), 0.35);\n    float sPelo6= sdCirc(p-vec2(0.3,0.25), 0.3);\n    float sRostro= sdCirc(p-vec2(0.1,-0.2), 0.4);\n    vec2 p2=p;\n    p2.x=p2.x-1.6;     p2.y=p2.y-0.1;\n    float sOjo1A= sdUnevenCapsule( p2-vec2(-1.5,-0.5), 0.01, 0.1, 0.2 );\n    float sOjo2A= sdUnevenCapsule( p2-vec2(-1.5,-0.52), 0.01, 0.1, 0.18 );\n    float sb1A= sdBox(p2-vec2(-1.5,-0.43), vec2(0.13,0.13) );\n    float posxb=-1.25;\n    float sOjo1B= sdUnevenCapsule( p2-vec2(posxb,-0.5), 0.01, 0.1, 0.2 );\n    float sOjo2B= sdUnevenCapsule( p2-vec2(posxb,-0.52), 0.01, 0.1, 0.18 );\n    float sb1B= sdBox(p2-vec2(posxb,-0.43), vec2(0.13,0.13) );\n    float posBocaY=0.035*sin(iTime);\n    float sBocaA= sdCirc(p-vec2(0.22,-0.4+posBocaY), 0.1);\n    float sBocaB= sdCirc(p-vec2(0.22,-0.3+posBocaY), 0.15);\n    sRostro=opS(sPelo1,sRostro);\n    sRostro=opS(sPelo2,sRostro);\n    sRostro=opS(sPelo3,sRostro);\n    sOjo1A=opS(sOjo2A,sOjo1A);\n    sOjo1A=opS(sb1A,sOjo1A);\n    sRostro=opS(sOjo1A,sRostro);\n    sOjo1B=opS(sOjo2B,sOjo1B);\n    sOjo1B=opS(sb1B,sOjo1B);\n    sRostro=opS(sOjo1B,sRostro);\n    sBocaA=opS(sBocaB, sBocaA);\n    sRostro=opS(sBocaA,sRostro);\n    vec2 resp=vec2(9999.9,-1.0);\n    resp=opU2(resp, vec2( sRostro, 1.0) );\n    resp=opU2(resp, vec2( sPelo1, 0.0) );\n    resp=opU2(resp, vec2( sPelo2, 0.0) );\n    resp=opU2(resp, vec2( sPelo3, 0.0) );\n    resp=opU2(resp, vec2( sPelo4, 0.0) );\n    resp=opU2(resp, vec2( sPelo5, 0.0) );\n    resp=opU2(resp, vec2( sPelo6, 0.0) );\n    resp=opU2(resp, vec2( sOjo1A, 0.0) );\n    resp=opU2(resp, vec2( sOjo1B, 0.0) );\n    resp=opU2(resp, vec2( sBocaA, 2.0) );\n    return resp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n     \n\tvec3 col = vec3(0.280,0.320,1.0);\n    \n    vec2 c=vec2(2.5,10.);\n    vec2 pr= opRep2D( p+ vec2(iTime*0.125,0.0),  c );\n    vec2 r1= rostro(pr);\n    col= DibujoConBordeVec2(p, r1,col);\n    \n    fragColor = vec4(col,1.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);  float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvec3 DibujoConBordeVec2(vec2 uv, vec2 vdist,   vec3 colOut)\n{   \n    vec3 colIn=getColorf(vdist.y); //color\n    float dist=vdist.x; //distancia\n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}