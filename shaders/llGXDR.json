{
    "Shader": {
        "info": {
            "date": "1483813688",
            "description": "A golden mandelbox. Rotate the box with the mouse. Change the parameters using the defines. Try using the SS option for extra-high quality!",
            "flags": 0,
            "hasliked": 0,
            "id": "llGXDR",
            "likes": 21,
            "name": "PBR Golden Mandelbox",
            "published": 3,
            "tags": [
                "fractal",
                "pbr"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 1365
        },
        "renderpass": [
            {
                "code": "/**\n\tThe BRDF used in this shader is based on those used by Disney and Epic Games.\n\t\n\tThe input parameters and individual components are modelled after the ones\n\tdescribed in\n\n\t\thttps://de45xmedrsdbp.cloudfront.net/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\n\tThe various components are then combined based on Disney's PBR shader, found here\n\n\t\thttps://github.com/wdas/brdf/blob/master/src/brdfs/disney.brdf\n\t\n\tI'd recommend reading this for a description of what the parameters in this BRDF do\n\n\t\thttp://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\n\n\t\n*/\n\n//Adjust to fit the box in view\n#define CAM_POS vec3(0.0, 0.0, -12.0)\n#define LIGHT_POS vec3(2.0, 2.0, -12.0)\n\n//Background radius is 15 - disable it if the box is bigger than this or you need the camera further back.\n//#define DISABLE_BG\n\n//Fractal Parameters\n#define ITERS 10\n#define SCALE 3.0\n#define MR2 0.25\n\n//Enables Fresnel reflections - disable to reduce noise\n#define SURF_REFL\n\n//Ray march detail - lower numbers increase detail\n#define DETAIL 1.0\n\n//Enable 4x super-sampling - greatly reduces noise and your framerate\n//#define SS\n\n//GOLDEN MANDELBOX\n#define BOX_ROUGHNESS 0.5\n#define BOX_METAL 1.0\n#define BOX_COLOUR vec3(0.854902, 0.750196, 0.368627)\n\nfloat closeObj = 0.0;\nconst float PI = 3.14159;\n\nmat3 rotX(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(1.0, 0.0, 0.0,\n                0.0,   c,  -s,\n                0.0,   s,   c );\n}\n\nmat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nmat3 rotZ(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c,  -s, 0.0,\n                  s,   c, 0.0,\n                0.0, 0.0, 1.0);\n}\n\n// Mandelbox DE from \n// http://www.fractalforums.com/3d-fractal-generation/a-mandelbox-distance-estimate-formula/msg21412/#msg21412\n\nvec4 scalevec = vec4(SCALE, SCALE, SCALE, abs(SCALE)) / MR2;\nfloat C1 = abs(SCALE-1.0), C2 = pow(abs(SCALE), float(1-ITERS));\n\nfloat mandelbox(vec3 position){\n  vec4 p = vec4(position.xyz, 1.0), p0 = vec4(position.xyz, 1.0);  // p.w is knighty's DEfactor\n  for (int i=0; i<ITERS; i++) {\n    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;  // box fold: min3, max3, mad3\n    float r2 = dot(p.xyz, p.xyz);  // dp3\n    p.xyzw *= clamp(max(MR2/r2, MR2), 0.0, 1.0);  // sphere fold: div1, max1.sat, mul4\n    p.xyzw = p*scalevec + p0;  // mad4\n  }\n  return (length(p.xyz) - C1) / p.w - C2;\n}\n    \nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\n\nfloat lastx = 0.0;\nfloat lasty = 0.0;\n\nvec2 mapMat(vec3 p){\n    \n    vec2 box = vec2(mandelbox(rotZ(radians(lastx) / 1.5) * rotX(radians(lasty) / 1.5) * p), 3.0);\n    \n    #ifdef DISABLE_BG\n    \n    return box;\n    \n    #endif\n    \n    vec2 cmap = vec2(-length(p) + 15.0, 1.0);\n    \n    return vecMin(box, cmap);\n}\n\n//Returns the min distance\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.5;\n    float d = 0.0;\n    float w = 1.3;\n    float ld = 0.0;\n    float ls = 0.0;\n    float s = 0.0;\n    float cerr = 10000.0;\n    float ct = 0.0;\n    float pixradius = DETAIL / iResolution.y;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 256; i++){\n        ld = d;\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        \n        //Detect intersections missed by over-relaxation\n        if(w > 1.0 && abs(ld) + abs(d) < s){\n            s -= w * s;\n            w = 1.0;\n            t += s;\n            continue;\n        }\n        s = w * d;\n        \n        float err = d / t;\n        \n        if(abs(err) < abs(cerr)){\n            ct = t;\n            cerr = err;\n        }\n        \n        //Intersect when d / t < one pixel\n        if(abs(err) < pixradius){\n            inter = 1;\n            break;\n        }\n        \n        t += s;\n        if(t > 30.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        ct = -1.0;\n    }\n    return ct;\n}\n\n//Approximate normal\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0);\nvec3 lightPos = vec3(0.0);\n\n//Determine if a point is in shadow - 1.0 = not in shadow\nfloat shadow(vec3 ro, vec3 rd){\n    float t = 0.01;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 128; iter++){\n        d = map(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lightPos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < 10; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(occ * 3.0, 0.0, 1.0);\n}\n\n//Square\nfloat sqr(float x){\n  return x * x;\n}\n\n//Diffusion normalisation\nfloat diff(float albedo){\n  return albedo / PI;\n}\n\n//GGX NDF\nfloat specD(float NdotH, float a){\n  float asqr = sqr(a);\n  float NdotHsqr = sqr(NdotH);\n  return asqr / (PI * sqr((NdotHsqr) * (asqr - 1.0) + 1.0));\n}\n\nfloat G1(float NdotX, float k){\n  return NdotX / (NdotX * (1.0 - k) + k);\n}\n\n//Geometric attenuation term\nfloat specG(float NdotV, float NdotL, float k){\n  k /= 2.0;\n  return G1(NdotV, k) * G1(NdotL, k);\n}\n\n//Schlick fresnel approximation used by Unreal Engine\nfloat fresnel(float AdotB){\n  float power = pow(2.0, (-5.55473 * AdotB - 6.98316) * AdotB);\n  return 0.04 + (1.0 - 0.04) * power;\n}\n\n\nvec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 c, vec3 lc, float metallic, float roughness, float s, float o, float ccr){\n  vec3 H = normalize(L + V);\n  float NdotH = dot(N, H);\n  float NdotL = dot(N, L);\n  float NdotV = dot(N, V);\n  \n  if (NdotL < 0.0 || NdotV < 0.0) return vec3(0.0);\n  \n  float VdotH = dot(V, H);\n  float alpha = roughness * roughness;\n\n  float conductor = 1.0 - metallic;\n    \n  c = c - (0.4 - 0.4 * s) * c;\n\n  vec3 specCol = mix(vec3(1.0), c, metallic);\n  \n  float FresL = fresnel(NdotL);\n  float FresV = fresnel(NdotV);\n  float Fresd90 = 0.5 + 2.0 * sqr(VdotH) * roughness;\n  float Fresd = mix(1.0, Fresd90, FresL) * mix(1.0, Fresd90, FresV); \n  \n  float Ds = specD(NdotH, alpha);\n  float FresH = fresnel(VdotH);\n  vec3 Fress = mix(specCol, vec3(1.0), FresH);\n  float Gs = specG(NdotV, NdotL, roughness);\n    \n  vec3 ccSpec = vec3(0.0);\n  if(ccr > 0.0){\n  \tfloat ccDs = specD(NdotH, sqr(ccr));\n  \tvec3 ccFress = vec3(1.0);\n  \tfloat ccGs = specG(NdotV, NdotL, ccr);\n    ccSpec = ccDs * ccFress * ccGs * floor(s);\n  }\n    \n  vec3 ref = vec3(0.0);  \n  #ifdef SURF_REFL\n  if(roughness > 0.5){\n  \tref = pow(texture(iChannel1, reflect(V, N)).xyz, vec3(2.2)) * specCol * FresV;\n  }else{\n    ref = pow(texture(iChannel0, reflect(V, N)).xyz, vec3(2.2)) * specCol * FresV;\n  } \n  #endif\n\n  return ((diff(conductor) * Fresd * max(0.0, NdotL) * o * c + Gs * Fress * Ds * floor(s) + ccSpec) + ref) * lc;\n}\n\nvec3 colour(vec3 p, float id){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(camPos - p);\n    \n    vec3 lc = pow(vec3(1.0, 0.72549, 0.631373), vec3(2.2));\n    \n    float o = occlusion(p, n);\n    \n    if(id == 1.0){\n        return pow(texture(iChannel0, n).xyz, vec3(2.2));\n    }\n    if(id == 3.0){\n        float s = shadow(p, l);\n        vec3 col = BOX_COLOUR;\n        col = pow(col, vec3(1.0 / 0.4545));\n        return BRDF(l, v, n, col, lc, BOX_METAL, BOX_ROUGHNESS, s, o, 0.0);\n    }\n    return vec3(0.0, 1.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = CAM_POS;\n    lightPos = LIGHT_POS;\n    \n    lastx += iMouse.x - 0.5;\n\tlasty += iMouse.y - 0.5;\n    \n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv, 1.5));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    \n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n        //Colour the point\n        col = colour(c, closeObj);\n        \n    }else{\n        col = vec3(0.0);\n    }\n    \n    #ifdef SS\n    \n    vec3 ssro = camPos;\n    vec3 ssrd = normalize(vec3(uv.x + 0.5/iResolution.x, uv.y, 1.5));\n\tfloat ssd = trace(ssro, ssrd);\n    vec3 ssc = ssro + ssrd * ssd;\n    \n    vec3 colss;\n    \n    //If intersected\n    if(d > 0.0){\n        //Colour the point\n        \n        colss = colour(ssc, closeObj);\n        col = (colss + col) / vec3(2.0);\n        \n    }else{\n        col = (vec3(0.0) + col) / vec3(2.0);\n    }\n    \n    ssrd = normalize(vec3(uv.x + 0.5/iResolution.x, uv.y + 0.5/iResolution.y, 1.5));\n\tssd = trace(ssro, ssrd);\n    ssc = ssro + ssrd * ssd;\n    \n    //If intersected\n    if(d > 0.0){\n        //Colour the point\n        \n        colss = colour(ssc, closeObj);\n        col = (colss + col) / vec3(2.0);\n        \n    }else{\n        col = (vec3(0.0) + col) / vec3(2.0);\n    }\n    \n    ssrd = normalize(vec3(uv.x, uv.y + 0.5/iResolution.y, 1.5));\n\tssd = trace(ssro, ssrd);\n    ssc = ssro + ssrd * ssd;\n    \n    //If intersected\n    if(d > 0.0){\n        //Colour the point\n        \n        colss = colour(ssc, closeObj);\n        col = (colss + col) / vec3(2.0);\n        \n    }else{\n        col = (vec3(0.0) + col) / vec3(2.0);\n    }\n    \n    #endif\n    \n    //col *= 1.0 / exp(d * 0.25);\n    col = pow( col, vec3(0.4545) );\n\tfragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}