{
    "Shader": {
        "info": {
            "date": "1673553974",
            "description": "Corner color flash",
            "flags": 32,
            "hasliked": 0,
            "id": "Dt23zV",
            "likes": 1,
            "name": "Corner audio link",
            "published": 3,
            "tags": [
                "audiolink"
            ],
            "usePreview": 0,
            "username": "Iliana",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = I/iResolution.xy;\n    \n    // Read data\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    Data data = readData(iChannel0, invRes);\n    \n\n    float tr = uv.x*uv.y;\n    float tl = (1.-uv.x)*uv.y;\n    float br = uv.x*(1.-uv.y);\n    float bl = (1.-uv.x)*(1.-uv.y);\n    \n\n    // Get data\n    float bands[4] = toArr(data.bands);\n    float facs[4] = toArr(data.correctedFac);\n    float avgs[4] = toArr(data.averages);\n    float mins[4] = toArr(data.mins);\n    float maxs[4] = toArr(data.maxs);\n    \n    vec3 col =  vec3(0.8,0.8,0.4)*tr * bands[0] + \n                vec3(0.2,0.6,0.9)*tl * bands[1] + \n                vec3(0.9,0.4,0.9)*br * bands[2] +\n                vec3(0.2,0.8,0.2)*bl * bands[3];\n    \n    vec3 dbgCol = debugBands(bands, facs, avgs, mins, maxs, I, iResolution);\n    col = mix(col, dbgCol, 0.);\n    O = vec4(col, 1.);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float readData1(sampler2D tex, int id) {\n    return texelFetch(tex, ivec2(id,0), 0).r;\n}\nvec3 readData3(sampler2D tex, int id) {\n    return texelFetch(tex, ivec2(id,0), 0).rgb;\n}\nvec4 readData4(sampler2D tex, int id) {\n    return texelFetch(tex, ivec2(id,0), 0);\n}\nvec4 writeData(vec4 col, vec2 fragCoord, int id, float value) {\n    if (floor(fragCoord.x) == float(id))\n        col.r = value;\n        \n    return col;\n}\nvec4 writeData(vec4 col, vec2 fragCoord, int id, vec3 value) {\n    if (floor(fragCoord.x) == float(id))\n        col.rgb = value.rgb;\n        \n    return col;\n}\nvec4 writeData(vec4 col, vec2 fragCoord, int id, vec4 value) {\n    if (floor(fragCoord.x) == float(id))\n        col = value;\n        \n    return col;\n}\n\n// Convert vec4 to float[4]\nfloat[4] toArr(vec4 values)\n{\n    float res[4];\n    res[0]=values.r;\n    res[1]=values.g;\n    res[2]=values.b;\n    res[3]=values.a;\n    return res;\n}\n\n\n// Convert float[4] to vec4\nvec4 toVec(float arr[4])\n{\n    return vec4(arr[0],arr[1],arr[2],arr[3]);\n}\n\n// Data for transmission\nstruct Data\n{\n    float volume;\n    vec4 bands;\n    vec4 lastBands;\n    vec4 averages;\n    vec4 correctedFac;\n    vec4 mins;\n    vec4 maxs;\n};\n\n\n// Read data\nData readData(sampler2D tex, vec2 invRes) {\n\tData data;\n    data.volume = readData1(tex, 0);\n    data.bands = readData4(tex, 1);\n    data.lastBands = readData4(tex, 2);\n    data.averages = readData4(tex, 3);\n    data.correctedFac = readData4(tex, 4);\n    data.mins = readData4(tex, 5);\n    data.maxs = readData4(tex, 6);\n    return data;\n}\n\n// Write data\nvec4 writeData(vec4 col, vec2 fragCoord, Data data) {\n    col = writeData(col, fragCoord.xy, 0, data.volume);\n    col = writeData(col, fragCoord.xy, 1, data.bands);\n    col = writeData(col, fragCoord.xy, 2, data.lastBands);\n    col = writeData(col, fragCoord.xy, 3, data.averages);\n    col = writeData(col, fragCoord.xy, 4, data.correctedFac);\n    col = writeData(col, fragCoord.xy, 5, data.mins);\n    col = writeData(col, fragCoord.xy, 6, data.maxs);\n    return col;\n}\n\n\n\nvec3 debugBands(float bands[4], float facs[4], float avgs[4], float mins[4], float maxs[4], vec2 fragCoord, vec3 iResolution)\n{\n    // Number of values per band\n    int count = 5;\n\n    // Color levels\n    float lvl1 = 0.;\n    float lvl2 = 0.;\n    float lvl3 = 0.;\n    \n    // Get index of the value according to the position on the screen\n    int index = int(floor(fragCoord.x/iResolution.x*4.*float(count)));\n    \n    \n    // Draw bands on screen\n    if (index%count == 0 && bands[index/count]*iResolution.y > fragCoord.y) {lvl1 = 1.;} // Raw band\n    if (index%count == 1 && facs[index/count]*iResolution.y > fragCoord.y) {lvl2 = 1.;} // Output factor\n    //if (index%count == 2 && avgs[index/count]*iResolution.y > fragCoord.y) {lvl3 = 1.;} // Averages\n    //if (index%count == 3 && mins[index/count]*iResolution.y > fragCoord.y) {lvl3 = 1.; lvl2 = 1.;} // Minimums\n    //if (index%count == 4 && maxs[index/count]*iResolution.y > fragCoord.y) {lvl1 = 1.; lvl2 = 1.;} // Maximums\n    \n    // Convert to color\n    return vec3(lvl1, lvl2, lvl3);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// Audio functions ----------------------------------------------\n#define getLevel(x) (texelFetch(iChannel0, ivec2(int(x*512.), 0), 0).r)\n#define logX(x,a,c) (1./(exp(-a*(x-c))+1.))\nfloat logisticAmp(float amp){\n   float c = .88, a = 20.;  \n   return (logX(amp, a, c) - logX(0.0, a, c)) / (logX(1.0, a, c) - logX(0.0, a, c));\n}\nfloat getPitch(float freq, float octave){\n   freq = pow(2., freq)   * 261.;\n   freq = pow(2., octave) * freq / 12000.;\n   return logisticAmp(getLevel(freq));\n}\n\nfloat getVol(float samples) {\n    float avg = 0.5;\n    for (float i = 0.; i < samples; ++i) avg += getLevel(i/samples);\n    return avg / samples;\n}\n\nfloat hash13(vec3 p3) {\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n// --------------------------------------------------------------\n\n// Sample audio from a start freq to end freq (0.0 - 1.0) at *samples* positions\nfloat sampleAvg(float start, float end, float samples, bool mode)\n{\n    float delta = (end - start) / samples;\n    float res = 0.001;\n    if (!mode)\n    {\n    \n        for (float i = start; i < end; i+= delta)\n        {\n            res += getPitch(i, 0.7);\n        }\n        return res / samples;\n    }\n    else\n    {\n        for (float i = start; i < end; i+= delta)\n        {\n            res = max(getPitch(i, 0.7), res);\n        }\n        return res;\n    }\n}\n\n// Compute the minimums for each band with smoothing\nvoid computeMins(inout float mins[4], float bands[4], float avgs[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        mins[i] = min((mins[i]*fsmooth + avgs[i]) / (fsmooth + 1.), bands[i]);\n    }\n}\n\n// Compute the maximums for each dand with smoothing\nvoid computeMaxs(inout float maxs[4], float bands[4], float avgs[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        maxs[i] = max((maxs[i]*fsmooth + avgs[i]) / (fsmooth + 1.), bands[i]);\n    }\n}\n\n// Compute averages with smoothing\nvoid computeAverages(inout float avgs[4], float bands[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        //avgs[i] = smoothstep(avgs[i],bands[i], 0.1);\n        avgs[i] = (avgs[i]*fsmooth + bands[i]) / (fsmooth + 1.);\n    }\n}\n\n// Get thresholds by two methods and make a ratio between the two.\n// Method 1:\n// Use a position between the min and max as the threshold\n// min ........... max\n//             ^\n//             Threshold\n//\n// Method 2:\n// Use the average as the threshold.\nfloat[4] getThresholds(float mins[4], float maxs[4], float avgs[4], float minmaxRatio, float avgsRatio)\n{\n    float res[4];\n    for (int i = 0; i < 4; ++i)\n    {\n        float thresh = smoothstep(mins[i], maxs[i], minmaxRatio);\n        res[i] = smoothstep(thresh, avgs[i], avgsRatio);\n    }\n    return res;\n}\n\n\n// If under threshold, return 0.0, if over, return 1.0\nvoid setCorrectedFacs(out float facs[4], float thresh[4], float bands[4])\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        facs[i] = 0.;\n        if (bands[i] > thresh[i]) facs[i] = 1.;\n    }\n}\n\n\n// Scale the band from 0.0 to 1.0 according to min and max\nvoid setScales(out float facs[4], float bands[4], float mins[4], float maxs[4])\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        facs[i] = (bands[i] - mins[i]) / (maxs[i] - mins[i]);\n    }\n}\n\n\n// If instant peek is found, apply it to the output\nvoid applyDerivative(inout float facs[4], float lastBands[4], float bands[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        if (lastBands[i] < bands[i])\n        {\n            float delta = bands[i] - lastBands[i];\n            facs[i] += delta * fsmooth;\n        }\n    }\n}\n\n// Output\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Read data\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    Data data = readData(iChannel1, invRes);\n    \n    // Run only once per frame\n    if (fragCoord.y > .5 && fragCoord.x > 0.5)\n    {\n        fragColor = writeData(fragColor, fragCoord, data);\n        return; // Returns if this is not the first pixel\n    }\n    \n    // Frequency separators (0.0-1.0)\n    float s1 = 0.1;\n    float s2 = 0.5;\n    float s3 = 0.8;\n\n    \n    // Get global volume\n    data.volume = getVol(30.);\n    data.lastBands = data.bands;\n    \n    // Get bands from audio\n    float bands[4] = toArr(data.bands);\n    bands[0] = sampleAvg(0.,s1, 5.,true)/(data.volume*.5);\n    bands[1] = sampleAvg(s1,s2, 10.,true)/(data.volume*0.3);\n    bands[2] = sampleAvg(s2,s3, 15.,true)/(data.volume*.2);\n    bands[3] = sampleAvg(s3,1., 20.,true)/(data.volume*.1);\n    \n    // Get values from last frame\n    float[4] mins = toArr(data.mins);\n    float[4] maxs = toArr(data.maxs);\n    float[4] avgs = toArr(data.averages);\n    float[4] lastBands = toArr(data.lastBands);\n    \n    \n    // Compute the new values\n    computeAverages(avgs, bands, 20.);\n    computeMins(mins, bands, avgs, 20.);\n    computeMaxs(maxs, bands, avgs, 20.);\n    \n    // Get thresholds for bands\n    float thresh[4] = getThresholds(mins, maxs, avgs, 0.1, 0.4);\n    \n    // Get factors calculated from thresholds\n    float facs[4];\n    setCorrectedFacs(facs, thresh, bands);\n    applyDerivative(facs, lastBands, bands, 5.);\n    \n    // Get factors scaled from 0.0 to 1.0 from min and max\n    float facs2[4];\n    setScales(facs2, bands, mins, maxs);\n    \n\n    // Update data\n    data.bands = toVec(bands);\n    data.mins = toVec(mins);\n    data.maxs = toVec(maxs);\n    data.averages = toVec(avgs);\n    \n    // If global volume is close to zero, prevent x / ~0 = almost infinity;\n    for (int i = 0; i < 4; ++i)\n    {\n        if (data.volume < 0.8) facs[i] = smoothstep(facs[i], 0., data.volume/.8);\n    }\n    \n    // Set new corrected data band\n    data.correctedFac = toVec(facs) * toVec(facs2);\n    \n    // Write data\n    fragColor = writeData(fragColor, fragCoord, data);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 21,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}