{
    "Shader": {
        "info": {
            "date": "1715695005",
            "description": "palm",
            "flags": 0,
            "hasliked": 0,
            "id": "McGXWy",
            "likes": 5,
            "name": "Miami Beach Palm",
            "published": 3,
            "tags": [
                "palm"
            ],
            "usePreview": 0,
            "username": "robert_blum",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "mat2 rotate(float angle){\n    angle = radians(angle);\n\treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n\nfloat Circle(vec2 p, vec2 c, float r)  {\n    float d = length(p-c);\n    return smoothstep(fwidth(d), 0.0, d - r);\n}\n\n\n\nfloat Stripes(vec2 p, float speed, float count, float ratio) {\n    p += iTime * speed;\n    float pos = (p.y + 0.5) * count ;\n    return floor(fract(pos) + ratio);\n}\n\nfloat StemLine(vec2 p, vec2 a, vec2 b)  {\n    vec2 pa = p - a, ba  = b - a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    vec2 c = a + ba * t;\n    float d = length(c-p);\n    return smoothstep(fwidth(d), 0.0, d - 0.005 + (p.y * 0.075));\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b)  {\n    vec2 pa = p - a, ba  = b - a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    vec2 c = a + ba * t;\n    float d = length(c-p);\n    return smoothstep(fwidth(d), 0.0, d - 0.0003);\n}\n\nfloat LeafLine(vec2 p, vec2 a, vec2 b, float num, float i)  {\n    vec2 pa = p - a, ba  = b - a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    vec2 c = a + ba * t;\n    float d = length(c-p);\n\n    return smoothstep(fwidth(d), 0.0, d - (abs(num/2.0 - i) * -0.001 + 0.025));\n}\n\nvec2 Bezier(vec2 A, vec2 B, vec2 C, float t) {\n    return mix(mix(A, C, t), mix(C, B, t), t);\n}\n\nvec3 Sun(vec2 uv, vec2 center, float radius){\n    float m = Circle(uv, center, radius) ;\n    vec3 col = vec3(0.);\n    col += max(0.,m - Stripes(uv, 0.1, 15.0, smoothstep(-0.5, 0.3, uv.y)));\n    return col = vec3(col.x, col.y * (1.0 - (uv.y + 0.5)), col.z *  (uv.y + 0.5));\n\n}\n\nfloat Palm(vec2 uv, vec2 stem, vec2 tip)\n{\n    float col;    \n    float t = sin(iTime)*0.5 + 0.5;\n    float offset = 0.1; \n    \n    vec2 A = stem, \n         B = tip,\n         C = mix(A, B, 0.75);\n         \n         C += vec2(sin(iTime * 0.75)/15.0, 0.0);\n         B += vec2(sin(iTime + sin(iTime))/10.5, 0.0);   \n    \n    int NUM = 50;\n    vec2 P, PP = A;\n    for(int i = 1; i<=NUM; i++) {\n       t = float(i)/float(NUM);\n       P = Bezier(A, B, C, t);\n       col = max(col, StemLine(uv, P, PP));\n       PP = P;\n        \n    }\n    \n    vec2 F = B; \n    float r1 = .075;\n    float r2 = .1;\n    float o = r1/sqrt(2.);\n    \n    uv -= F;\n    uv = rotate((sin(iTime * 5.) + 1.) / 2. * -10.) * uv;\n    uv += F;\n    col += max(0.,Circle(uv, F + vec2(o, o), r1)   - Circle(uv, F + vec2(r2,  0.), r2));\n    uv -= F;\n    uv = rotate((sin(iTime * 4.) + 1.) / 2. * 20.) * uv;\n    uv += F;\n    col += max(0.,Circle(uv, F + vec2(o, -o), r1)  - Circle(uv, F + vec2(0., -r2), r2));\n    uv -= F;\n    uv = rotate((sin(iTime * 3.) + 10.) / 2. * 10.) * uv;\n    uv += F;\n    col += max(0.,Circle(uv, F + vec2(-o, -o), r1) - Circle(uv, F + vec2(0., -r2), r2));\n    uv -= F;\n    uv = rotate((sin(iTime * 4.) + 1.) / 2. * 10.) * uv;\n    uv += F;\n    col += max(0.,Circle(uv, F + vec2(-o, o), r1)  - Circle(uv, F + vec2(-r2,  0.), r2));\n    \n    return col;\n\n}\n\nfloat Horizon(vec2 uv, float height){\n    float col = 1.;\n    \n    float y = height; \n    float o = 0.001;\n    col += smoothstep(y, y + o, uv.y) - 1.;\n\n    return col;\n}\n\nfloat Waves(vec2 uv, vec2 coord, float horizon) {\n    float col;\n    \n    float beachHeigt = 5.;\n    float amplitude = 1.;\n    float waveLength = 36.;\n    int waveNum = 10;\n    uv = coord/iResolution.xy * waveLength;\n    \n    for(int i = 1; i <= waveNum; i ++) {\n        \n        float y = (sin(uv.x + iTime) + 1.) / (amplitude * float(i));\n        y += beachHeigt;\n        for(int j = 1; j < i; j++)\n        {\n           y += 1./float(j) + 0.5;\n        }\n        if(y >= horizon * -115.){break;}\n        float width = 1. / float(i + 1) * 0.5;\n        float o = 0.1; \n        col += smoothstep(y, y + o, uv.y) * smoothstep(y + width + o , y + width, uv.y);\n    }\n    \n    return col;\n    \n}\n\nfloat Bird(vec2 uv, vec2 center, float scale, float speed, float deg, float rot) {\n    float col;\n    \n    vec2 F = center; \n    float r1 = .075 * scale;\n    float r2 = .2 * scale;\n    float o = r1/sqrt(2.);\n    \n    uv -= F;\n    uv = rotate(-rot) * uv;\n    uv = rotate(sin(iTime * speed) * deg) * uv;\n    uv += F;\n    col += max(0.,Circle(uv, F + vec2(o, o), r1)   - Circle(uv, F + vec2(r2,  0.), r2));\n    uv -= F;\n    uv = rotate(-sin(iTime * speed) * deg * 2.) * uv;\n    uv += F;\n    col += max(0.,Circle(uv, F + vec2(-o, -o), r1) - Circle(uv, F + vec2(0., -r2), r2));\n    uv -= F;\n\n    \n    \n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n\n    \n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;\n    vec3 col = vec3(0.0);\n    \n    \n    \n    col = Sun(uv, vec2(0.0), 0.25);\n    col *= Horizon(uv, -0.1);\n    col += Waves(uv, fragCoord, -0.1);\n    col += Palm(uv, vec2(-0.3, -0.25), vec2(-0.3, 0.0));\n    col += Bird(uv, vec2(.35, .0), 0.2, 7., 20. + sin(iTime) * 3., 75.  + sin(iTime * 2.) * 20.);\n    col += Bird(uv, vec2(.3, -.05), 0.1, 10., 10. + sin(iTime) * 2., 35.  + sin(iTime * 4.) * -10.);\n    col += Bird(uv, vec2(.425, -.045), 0.3 , 4., 15. + sin(iTime) * 5., 40.  + sin(iTime) * 40.);\n\n\n\n\n    fragColor = vec4(col, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}