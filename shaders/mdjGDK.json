{
    "Shader": {
        "info": {
            "date": "1668164362",
            "description": "buffA texture is just a  0 / 1 checker.\nImage tab:   zoom & interpolate.\ntop: hardware derivative.    why ??? \nbottom: manual derivative. not continuous either, but at least x/y symmetrical.",
            "flags": 32,
            "hasliked": 0,
            "id": "mdjGDK",
            "likes": 3,
            "name": "derivative of textures 2",
            "published": 3,
            "tags": [
                "dfdx",
                "dfdy",
                "precision",
                "interpolation",
                "fwidth"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/ddj3WK\n\n#define T(U) texture(iChannel0,(U)/128.).xxxx\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,  U = u / R; \n // vec2 R = vec2(512), U = ( u-.5 ) / 512.; // avoids float approx. not better.\n    \n    O = T(U); \n    O = U.y > .5\n      ? dFdx( O )                     // top: hardware derivative\n      : O - T( U + vec2(1./R.x,0) );  // bottom: manual derivative\n          // analytical: should be a const vertical gradient B to W or W to B\n   O =  .5 + 50. * O;\n   \n   if ( int(u.y)*2 == int(iResolution.y) ) O = vec4(1,0,0,1); // red separator\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n     O.x = mod(u.x+u.y,2.);     //  pure checker\n  // O.x = mod( u.x-.5, 2.);    //  alternate bars\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}