{
    "Shader": {
        "info": {
            "date": "1658067553",
            "description": "Using Fractal Brownian Motion and a Kaleidoscope to make some trippy effects.\n\nThe code is very readable, so check it out!",
            "flags": 0,
            "hasliked": 0,
            "id": "NdyBD1",
            "likes": 6,
            "name": "Understanding",
            "published": 3,
            "tags": [
                "2d",
                "kaleidoscope",
                "brauwnian"
            ],
            "usePreview": 0,
            "username": "SanderVanhove",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "vec3 hash(vec3 p){\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise_3d(in vec3 p){\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nfloat fbm (vec2 uv, float amplitude, int octaves, float lacunarity, float gain) {\n\tfloat value = 0.;\n\t\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += amplitude * abs(noise_3d(vec3(uv, iTime * .5)) * 7.);\n\t\tuv *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\t\n\treturn value;\n}\n\nvec2 kaleidoscope(vec2 uv) {\n\tif (uv.x > .5)\n\t\tuv.x = 1. - uv.x;\n\tif (uv.y > .5)\n\t\tuv.y = 1. - uv.y;\n\n\tif (uv.x > uv.y) {\n\t\tfloat old_x = uv.x;\n\t\tuv.x = uv.y;\n\t\tuv.y = old_x;\n\t}\n\t\n\treturn uv;\n}\n\nvec2 rotate2D(vec2 uv, float angle) {\n\tuv -= .5;\n\tuv = mat2(vec2(cos(angle), -sin(angle)), vec2(sin(angle), cos(angle))) * uv;\n\tuv += .5;\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy - vec2(.25, 0.);\n    uv.x *= iResolution.x/iResolution.y;\n\n    uv = rotate2D(uv, iTime * .1);\n\tuv = kaleidoscope(uv);\n\tuv = rotate2D(uv, iTime * -.05);\n\tfloat n = fbm(uv * 3., .5, 10, sin(iTime * .1) * 1. + 5., abs(sin(iTime * .2)) * .5 + .1);\n\tn = sin(iTime) * .4 + 1.2 - n;\n\tn = n * n * n * n;\n\t\n\tvec2 color_uv = fragCoord/iResolution.xy - vec2(.5);\n\tcolor_uv *= 2.5;\n\tvec3 color = mix(vec3(.9, 0., 0.1), vec3(.6, sin(iTime) * .2 + .5, .8), length(color_uv));\n\n    // Output to screen\n    fragColor.rgb = mix(color, vec3(0.), 1. - n);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}