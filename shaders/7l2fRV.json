{
    "Shader": {
        "info": {
            "date": "1652464684",
            "description": "Yet another tunnel, yet another IFS",
            "flags": 32,
            "hasliked": 0,
            "id": "7l2fRV",
            "likes": 13,
            "name": "Passthrough firmly",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "ifs"
            ],
            "usePreview": 0,
            "username": "kostik1337",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define mr(a) (mat2(cos(a),sin(a),-sin(a),cos(a)))\n#define INF 1e10\n#define rep(p, s) mod(p,(s))-(s)/2.\n#define rep2(p, s) abs(rep(p, (s)*2.))-(s)/2.\n#define PI 3.14159265\n#define TAU (2.*3.14159265)\n#define time iTime\n\nfloat hash(float x) {return fract(sin(x)*43758.5453);}\nfloat hash(vec2 x) {return hash(dot(x, vec2(43.123, 32.12345)));}\nfloat hash(vec3 x) {return hash(dot(x, vec3(12.9898, 4.1414, 5.6135)));}\n\nvec3 ct(vec3 p) {\n  if (p.x > p.y) p.xy = p.yx;\n  if (p.y > p.z) p.yz = p.zy;\n  if (p.x > p.y) p.xy = p.yx;\n  return p;\n}\n\nfloat box2(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p,0.0)) + min(max(p.x,max(p.y,p.z)),0.0);\n}\n\nvec2 repPolar(vec2 p, float n) {\n    p = vec2(length(p), atan(p.y, p.x));\n    p.y = rep(p.y+PI/n, 2.*PI/n);\n    return p.x * vec2(cos(p.y), sin(p.y));\n}\n\nfloat ngon(vec2 p, float w, float n) {\n    return repPolar(p, n).x-w;\n}\n\nint material = 0;\nvec2 lightParams = vec2(.7, 6.); // radius, z mod\nbool mapRings = true;\n\nvec2 lightOffset(float i) {\n    float h = hash(i)*TAU;\n    return .1*vec2(cos(h+1.31*time), sin(h+time));\n}\n\nfloat glow = 0.;\n\nfloat map(vec3 op) {\n    float m = INF;\n\n    vec3 p=op;\n    float mbs = 1.6, sides=6.;\n\n    material = 0;\n    p=op;\n    vec3 s=4.*vec3(2., 1., 2.);\n    float shift = time * .1;\n    shift = floor(shift) + smoothstep(0., .2, fract(shift));\n    vec3 p1 = op;\n    p.xy = abs(p.xy)-10.5;\n    for(int i=0; i<4;++i) {\n        if(i==0) m = INF;\n        vec3 p2 = p;\n        p.xy += 3.*vec2(.1, .13)*shift;\n        p = rep2(p, s);\n        p = ct(p);\n        \n        s /= 1.781;\n        s.xz *= mr(1.93);\n        s.xy *= mr(.46);\n        s = abs(s);\n        float wall = box2(p, s/3.);\n\n        wall = max(wall, -ngon(p1.xy, mbs, sides));\n        mbs *= .8;\n        m = min(m, wall);\n    }\n\n    if (mapRings) {\n        p = op;\n        float cz = floor(p.z / lightParams.y);\n        p.z = rep(p.z, lightParams.y);\n        p.xy += lightOffset(cz);\n        p.xy = vec2(length(p.xy)-lightParams.x, atan(p.y, p.x));\n        float rings = INF;\n        for(float i=0.; i<3.; ++i) {\n            float ring = length(vec2(p.x, p.z)) - (.02 + i*.02);\n            if (i>0.) {\n                float phase = mix(.5, .7, hash(i+cz+.13)) * (hash(i+cz)>.5?1.:-1.) * time;\n                p.y = rep2(p.y+phase, TAU/(i+2.));\n                ring = max(ring, p.y);\n            }\n            rings = min(rings, ring);\n        }\n        if (rings < m) {\n            m = rings;\n            material = 10;\n        }\n        glow += .0005 / (rings);\n    }\n\n    return m;\n}\n\nvec3 normal(vec3 p) {\n    vec2 E = vec2(.001, .0);\n    return normalize(\n        vec3(map(p+E.xyy), map(p+E.yxy), map(p+E.yyx)) - map(p)\n    );\n}\n\nfloat getAO(vec3 O, vec3 D) {\n    float totao = 0.;\n    float sca = 1.0;\n\n    for (int i = 0; i < 5; i++) {\n        float hr = 0.01 + 0.03 * float(i * i);\n        vec3 p = O + D * hr;\n        float m = map(p);\n        float ao = clamp(hr-m, 0.0, 1.0);\n        totao += ao * sca;\n        sca *= 0.7;\n    }\n\n    return 1.0 - clamp(2. * totao, 0.0, 1.0);\n}\n\nfloat march(vec3 O, vec3 D, float I, float md, out float shadow) {\n    float d = 0.;\n    shadow = INF;\n    for(float i=0.;i<I;++i) {\n        vec3 p = O+D*d;\n        float m = map(p);\n        d += m;\n        shadow = min(shadow, 20.*m/d);\n        if (d > md || m < .001*d) {\n            return d;\n        }\n    }\n    return INF;\n}\n\nvec3 ACESFilm(vec3 x){\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 O = vec3(0.), D=normalize(vec3(uv, 1.));\n    float t=time;\n    O.xy += .2*vec2(sin(t*.3), sin(t*.35));\n    D.xy *= mr(.6*sin(.1*t));\n    D.xz *= mr(.2*sin(.1*t));\n    O.z += 1.*time;\n\n    float md = 30., shad;\n    float d = march(O, D, 64., md, shad);\n    vec3 p = O+D*d;\n\n    vec3 color = vec3(0.);\n    vec3 bg = vec3(.01);\n    vec3 fogp = vec3(.2, .18, .13);\n    if (d > md) {\n        color = bg;\n    } else if (material == 10) {\n        color = vec3(100.) * exp(-d * fogp * 2.5);\n    } else {\n        float lightIndex = floor(p.z / lightParams.y);\n        vec3 lightPos = vec3(0., 0., (lightIndex+.5) * lightParams.y);\n\n        float randAng = TAU*hash(fract(40.*p) + t+2.3);\n        lightPos.xy += (vec2(cos(randAng), sin(randAng)) + lightOffset(lightIndex)) * lightParams.x;\n        vec3 toLight = lightPos-p;\n        vec3 normToLight = normalize(toLight);\n        float lenToLight = length(toLight);\n\n        mapRings = false;\n        vec3 n = normal(p);\n        float shadow = march(p + n*d*.05, normToLight, 12., lenToLight, shad);\n        shadow = min(1., shad);\n\n        vec3 c1 = vec3(.6, .8, 1.);\n        vec3 c2 = vec3(1., .8, .8);\n        vec3 diff = .7 * c1 * max(0., dot(n, normToLight));\n        vec3 h = normalize(-D + normToLight);\n        vec3 spec = 5. * c2 * pow(max(0., dot(n, h)), 80.);\n        vec3 c = vec3(0.);\n        c += diff * min(1., 600.*exp(-3.1*abs(lenToLight)));\n        c += spec  * min(1., 600.*exp(-2.1*abs(lenToLight)));\n        c *= shadow;\n        c += vec3(.01);\n        if (shadow > 0.) c *= getAO(p, n);\n        color += c;\n        color = mix(bg, color, min(exp(-d * fogp), 1.));\n    }\n    color += glow;\n    color = clamp(color, vec3(0.), vec3(1.));\n    color = ACESFilm(color);\n    color = sqrt(color);\n\n    uv = fragCoord/iResolution.xy;\n    vec3 prev = texture(iChannel0, uv).rgb;\n    color = mix(color, prev, .8);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}