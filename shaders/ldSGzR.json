{
    "Shader": {
        "info": {
            "date": "1382482572",
            "description": "Mikkelsen's technique for Bump Mapping Unparametrized Surfaces  (pretty much copy & pasted).",
            "flags": 0,
            "hasliked": 0,
            "id": "ldSGzR",
            "likes": 70,
            "name": "Screen space bump mapping",
            "published": 3,
            "tags": [
                "3d",
                "bump",
                "bumpmapping",
                "mikkelsen"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 7916
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Mikkelsen's technique for Bump Mapping Unparametrized Surfaces \n// https://dl.dropboxusercontent.com/u/55891920/papers/mm_sfgrad_bump.pdf\n// Pretty much copy & pasted, with minor changes. It aliases quite a bit :(\n\n\n// make GPU_DERIVATIVES 1 for dFdx()/dFdy() based derivatives, which produces\n// 2x2 pixel artifacts (in a deferred renderer you could perhaps compute these\n// by manually differencing UVs in the uv buffer)\n\n#define GPU_DERIVATIVES 0\n\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n\n\n#if GPU_DERIVATIVES==1\nvec3 doBump( in vec3 pos, in vec3 nor, in float signal, in float scale )\n{\n    vec3 dpdx = dFdx( pos );\n    vec3 dpdy = dFdy( pos );\n    \n    float dbdx = dFdx(signal);\n    float dbdy = dFdy(signal);\n\n    vec3  u = cross( dpdy, nor );\n    vec3  v = cross( nor, dpdx );\n    float d = dot( dpdx, u );\n\t\n\tvec3 surfGrad = dbdx*u + dbdy*v;\n    return normalize( abs(d)*nor - sign(d)*scale*surfGrad );\n}\n\n#else    \n\nvec3 doBump( in vec3 dpdx, in vec3 dpdy, in vec3 nor, \n             in float dbdx, in float dbdy,\n             in float scale )\n{\n    vec3  u = cross( dpdy, nor );\n    vec3  v = cross( nor, dpdx );\n    float d = dot( dpdx, u );\n\t\n\tvec3 surfGrad = dbdx*u + dbdy*v;\n    return normalize( abs(d)*nor - sign(d)*scale*surfGrad );\n}\n#endif\n\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\nfloat softShadowSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = sph.xyz - ro;\n    float b = dot( oc, rd );\n\t\n    float res = 1.0;\n    if( b>0.0 )\n    {\n        float h = dot(oc,oc) - b*b - sph.w*sph.w;\n        res = clamp( 2.0 * h / b, 0.0, 1.0 );\n    }\n    return res;\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\n\nvoid calcCamera( out vec3 ro, out vec3 ta )\n{\n\tfloat an = 3.1 + 0.25*iTime;\n\tro = vec3( 2.5*cos(an), 1.0, 2.5*sin(an) );\n    ta = vec3( 0.0, 1.0, 0.0 );\n}\n\nvoid calcRayForPixel( in vec2 pix, out vec3 resRo, out vec3 resRd )\n{\n\tvec2 p = (2.0*pix-iResolution.xy)/iResolution.y;\n\t\n     // camera movement\t\n\tvec3 ro, ta;\n\tcalcCamera( ro, ta );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\t\n\tresRo = ro;\n\tresRd = rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float bump = smoothstep( -0.8, -0.7, cos( 0.5*iTime ) );\n\n\tvec3 ro, rd, ddx_ro, ddx_rd, ddy_ro, ddy_rd;\n\tcalcRayForPixel( fragCoord + vec2(0.0,0.0), ro, rd );\n\tcalcRayForPixel( fragCoord + vec2(1.0,0.0), ddx_ro, ddx_rd );\n\tcalcRayForPixel( fragCoord + vec2(0.0,1.0), ddy_ro, ddy_rd );\n\n    \n    // sphere center\t\n\tvec3 sc = vec3(0.0,1.0,0.0);\n\n\tvec3 mate = vec3(0.0);\n\t\n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tfloat occ = 1.0;\n\tvec3  pos = vec3(0.0);\n\t\n\t// raytrace-plane\n\tfloat h = (0.0-ro.y)/rd.y;\n\tif( h>0.0 ) \n\t{ \n\t\ttmin = h; \n\t\tnor = vec3(0.0,1.0,0.0); \n\t\tpos = ro + h*rd;\n\t\t\n        vec3 di = sc - pos;\n\t\tfloat l = length(di);\n\t\t\n            \n        #if GPU_DERIVATIVES==1\n\t\tmate = texture( iChannel0, 0.25*pos.zx, .1*l ).xyz;\n        float signal = dot(mate,vec3(0.33));\n\t\tnor = doBump( pos, nor, signal, 0.15*bump );\n        #else\n\t\t// computer ray differentials\n\t\tvec3 ddx_pos = ddx_ro - ddx_rd*dot(ddx_ro-pos,nor)/dot(ddx_rd,nor);\n\t\tvec3 ddy_pos = ddy_ro - ddy_rd*dot(ddy_ro-pos,nor)/dot(ddy_rd,nor);\n\t\tvec3 dposdx = ddx_pos - pos;\n\t\tvec3 dposdy = ddy_pos - pos;\n\n        mate = texture( iChannel0, 0.25*pos.zx, .1*l ).xyz;\n        float signal = dot(mate,vec3(0.33));\n        float dsignaldx = dot(texture( iChannel0, 0.25*ddx_pos.zx, .1*l ).xyz,vec3(0.33)) - signal;\n        float dsignaldy = dot(texture( iChannel0, 0.25*ddy_pos.zx, .1*l ).xyz,vec3(0.33)) - signal;\n\t\t\n        nor = doBump( dposdx, dposdy, nor, dsignaldx, dsignaldy, 0.15*bump );\n        #endif\n\n        occ = 1.0 - dot(nor,di/l)*1.0*1.0/(l*l); \n\t}\n\n\t// raytrace-sphere\n\tvec3  ce = ro - sc;\n\tfloat b = dot( rd, ce );\n\tfloat c = dot( ce, ce ) - 1.0;\n\th = b*b - c;\n\tif( h>0.0 )\n\t{\n\t\th = -b - sqrt(h);\n\t\tif( h<tmin ) \n\t\t{ \n\t\t\ttmin=h; \n            pos = ro + tmin*rd;\n\t\t\tnor = normalize(ro+h*rd-sc); \n\n            #if GPU_DERIVATIVES==1\n            mate = texcube( iChannel0, 0.25*pos, nor ).xyz;\n            float signal = dot(mate,vec3(0.33));\n\t\t    nor = doBump( pos, nor, signal, 0.03*bump );\n            #else\n            // computer ray differentials\n            vec3 ddx_pos = ddx_ro - ddx_rd*dot(ddx_ro-pos,nor)/dot(ddx_rd,nor);\n            vec3 ddy_pos = ddy_ro - ddy_rd*dot(ddy_ro-pos,nor)/dot(ddy_rd,nor);\n            vec3 dposdx = ddx_pos - pos;\n            vec3 dposdy = ddy_pos - pos;\n\n            mate = texcube( iChannel0, 0.25*pos, nor ).xyz;\n            float signal = dot(mate,vec3(0.33));\n            float dsignaldx = dot(texcube( iChannel0, 0.25*ddx_pos, nor ).xyz,vec3(0.33)) - signal;\n            float dsignaldy = dot(texcube( iChannel0, 0.25*ddy_pos, nor ).xyz,vec3(0.33)) - signal;\n            \n            nor = doBump( dposdx, dposdy, nor, dsignaldx, dsignaldy, 0.03*bump );\n            #endif\n\t\t\tocc = 0.5 + 0.5*nor.y;\n\t\t}\n\t}\n\n    // shading/lighting\t\n\tvec3 col = vec3(0.9);\n\tif( tmin<100.0 )\n\t{\n\t    pos = ro + tmin*rd;\n\t\t\n\t\tfloat sh = softShadowSphere( pos, vec3(0.57703), vec4(sc,1.0) );\n        vec3 lin = vec3(0.8,0.7,0.6)*sh * clamp(dot(nor,vec3(0.57703)),0.0,1.0);\n\t\t     lin += occ*vec3(0.2,0.3,0.4);\n\t\t     lin += sh*0.5*pow(clamp(dot(reflect(rd,nor),vec3(0.57703)),0.0,1.0),12.0);\n\t\tcol = mate * lin;\n\t\tcol = mix( col, vec3(0.9), 1.0-exp( -0.003*tmin*tmin ) );\n\t}\n\t\n\tcol = sqrt( col );\n\t\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}