{
    "Shader": {
        "info": {
            "date": "1690266892",
            "description": "Computing a 2D signed distance field per-pixel. Higher paint calls work well for faster update. Interactive-only: use mouse to draw a shape, then wait for SDF to be computed.\n\n* mouse to draw *\n* space to reset *",
            "flags": 48,
            "hasliked": 0,
            "id": "dd2fWV",
            "likes": 22,
            "name": "SDF Writer",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "interactive",
                "sdf",
                "multipass"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2023\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  Computing a 2D signed distance field per-pixel. Distance is stored in x. In yz is\n//  stored the coordinates of the \"root\": the drawn-on pixel closest to us. Each\n//  iteration, we search near the root for a better root. Raising the paint calls \n//  allows for faster update.\n//\n//  I guess this SDF would be usable for ray marching, if there is a use for 2D ray\n//  marching. But it seems like this approach would extend to 3D reasonably easily.\n//  The resolution would not need to be very high for it to work, and we could use\n//  texture hardware for interpolation.\n//\n//  I used a compact style because it seemed clear enough this way, but I didn't\n//  really try very hard to reduce characters. But if someone wants to golf this\n//  I will happily post your efforts.\n// ---------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);\n    \n    O = mix( vec4(1), vec4(.9,.6,.3,0) // iq's standard SDF distance visualization\n\t                     * (1. - exp(-6.*abs(O.x * .002)))\n\t                     * (.8 + .2*cos(O.x * .3)), smoothstep(0., 3.,O.x) );\n                         \n    vec2 c = (vec2(sin(iTime * .3), cos(iTime)) * .45 + .5) * iResolution.xy;\n    O = mix(O, vec4(1, 1, 0, 1), smoothstep(3., 0., abs(distance(c, u) - T(c).x)));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void n(vec2 u, inout vec4 O)\n{\n    vec4 v = T(u), a; // get neighbor value\n    for (int x = -1; x <= 1; ++x)\n    for (int y = -1; y <= 1; ++y)\n    {\n        a = T(v.yz + vec2(x, y)); // search near neighbor's root\n        a.x += distance(u, v.yz + vec2(x, y)); // new prospective distance\n        O = (a.x <= O.x) ? vec4(a.x, v.yz, 0) : O; // when we find a shorter path, update our distance and root\n    }\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec3 R = iResolution, m = iMouse.xyz, e = vec3(1, 0, distance(m.xy, u));\n    \n    if (max(u.x, u.y) < 1.)\n        O.x = R.x * R.y; // resolution stored in lower left corner, unreachable by sim\n    else if (iFrame == 0 || // bootstrap\n        T(vec2(0)).x != R.x * R.y || // detect resolution changes\n        texelFetch(iChannel3,ivec2(32,0),0).x > 0. || // support keyboard \"space\" reset\n        u.x < 1. || u.x == R.x - .5 || // detect edges\n        u.y < 1. || u.y == R.y - .5)\n        \n        O = vec4(1e6); // clear edges and screen\n    else\n    {\n        // support drawing with mouse\n        O = m.z > 0. && e.z < R.y * .005 ? vec4(max(0., e.z - R.y * .005), u, 0) : T(u);\n\n        // search neighbors for new shorter path\n        n(u + e.xy, O);\n        n(u - e.xy, O);\n        n(u + e.yx, O);\n        n(u - e.yx, O);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(u) texelFetch(iChannel0, ivec2(u), 0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}