{
    "Shader": {
        "info": {
            "date": "1627835437",
            "description": "Anti-aliased circles with linearstep/smoothstep/smootherstep",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl2XWm",
            "likes": 0,
            "name": "anti-aliased circles",
            "published": 3,
            "tags": [
                "antialiased"
            ],
            "usePreview": 0,
            "username": "modesty",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWOPI 6.28318530718\n\nfloat linearstep(float edge0, float edge1, float x) {\n    float t = (x - edge0)/(edge1-edge0);\n    \n    return clamp(t, 0., 1.);\n}\n\nfloat smootherstep(float edge0, float edge1, float x) {\n    float t = (x-edge0)/(edge1-edge0);\n    float t1 = t*t*t*(t*(t*6. - 15.) + 10.);\n    \n    return clamp(t1, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy) / iResolution.y;\n    float xMax = iResolution.x/iResolution.y;\n    \n    vec3 bgCol = vec3(0.3);\n\tvec3 col1 = vec3(0.216, 0.471, 0.698); // blue\n\tvec3 col2 = vec3(1.00, 0.329, 0.298); // yellow\n\tvec3 col3 = vec3(0.867, 0.910, 0.247); // red\n    \n    vec3 pixel = bgCol;\n    float m;\n    \n    float radius = 0.4; // increase radius to see the effect better\n    if(r.x < -0.5*xMax) { // PART I\n        // no interpolation, yes aliasing\n        m = step(radius, length(r-vec2(-0.5*xMax-0.4, 0.0)));\n        \n        // if the distance from the center is smaller than radius,\n\t\t// then mix value is 0.0\n\t\t// otherwise the mix value is 1.0\n        pixel = mix(col1, bgCol, m);\n    } else if(r.x < -0.0*xMax) { // PART II \n       // linearstep (first order, linear interpolation)\n       \n       m = linearstep(radius - 0.005, radius + 0.005, length(r - vec2(-0.0*xMax-0.4, 0.0)));\n       \n       pixel = mix(col1, bgCol, m);\n    } else if(r.x < 0.5*xMax) { // PART III\n        // smoothstep (cubical interpolation)\n        \n        m = smoothstep(radius - 0.005, radius + 0.005, length(r - vec2(0.5*xMax-0.4, 0.0)));\n        \n        pixel = mix(col1, bgCol, m);\n    } else if(r.x < 1.0*xMax) { // PART IV\n        // smootherstep (sixth order interpolation) \n        \n        m = smootherstep(radius-0.005, radius + 0.005, length(r - vec2(1.0*xMax-0.4, 0.0)));\n        \n        pixel = mix(col1, bgCol, m);\n    }\n    \n    fragColor = vec4(pixel, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}