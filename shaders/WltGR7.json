{
    "Shader": {
        "info": {
            "date": "1575980419",
            "description": "iterationsPerFrame in the common tab controls the simulation speed. Postprocessing is in image.",
            "flags": 32,
            "hasliked": 0,
            "id": "WltGR7",
            "likes": 5,
            "name": "Hopalong Fractal Renderer",
            "published": 3,
            "tags": [
                "fractal",
                "bloom",
                "hopalong",
                "hop"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 561
        },
        "renderpass": [
            {
                "code": "\n// ------ Main ------ //\n// Read up at http://www.fluxury.com/a5x/hopfrac1.htm and https://dzone.com/articles/hopalong-fractals\n//\n// Parameters are in Common\n// Calculations are in Buffers. All of them are duplicates of one another.\n//\n// This tab is for visual flair.\n// Disable bloom to see true representation.\n// Pallete parameters change the colours of things.\n\n\n\n\n#define bloomEnabled\n#define bloomStrength 0.7\n#define bloomBrightness 5.\n#define bloomDiameter 0.004\n#define bloomTolerance 9. \n#define bloomTaps 10.\n#define bloomColourOffset vec3(1.,1.,1.)\n\n\n#define palleteHue 1.6\n#define palleteVariation 3.3\n#define palleteParameterA 3.8\n#define palleteParameterB vec3(0.19,.28,2.3)\n\n#define brightness 0.03\n#define backgroundColor vec3(0.00,0.0,0.00)\n\n\n// https://iquilezles.org/articles/palettes\n#define pallete(x,t) 0.5 + 0.5*sin(palleteParameterB *x + 2.*t)        \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float density = texture(iChannel0, fragCoord/iResolution.xy).z ;\n    //density /= 0.07*iterationsPerFrame*bufferCnt;\n    vec3 col = pallete(density*palleteVariation + palleteHue,palleteParameterA);\n    \n    col *= density * brightness ;\n    \n\t#ifdef bloomEnabled\n    vec3 bloom = vec3(0);\n    for (float i = 0.; i < bloomTaps; i ++) {\n        float idx = (i/bloomTaps) * tau;\n        vec2 bloomOffset = vec2(cos(idx), sin(idx));\n\t\tfloat tapDensity = texture(iChannel0 , uv + bloomDiameter*bloomOffset).z;    \t\n        vec3 tapColour = pallete(tapDensity*palleteVariation + palleteHue,palleteParameterA);\n        bloom += tapColour * tapDensity ;\n    }\n    bloom = bloom/bloomTaps;\n    bloom *= bloomStrength;\n    col += mix(backgroundColor, bloom, vec3(  pow(length(bloom) * 1. ,bloomTolerance))    )*bloomBrightness*bloomColourOffset;\n    #endif\n    \n    col = pow(col, vec3(0.44)); // linear to sRGB conversion\n    \n    fragColor = vec4(col.xyz,0.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n// ------ Calculation Buffer ------ //\n// col.xy is x and y\n// col.z is density passed onto buffer B\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    col = texture(iChannel0, fragCoord/iResolution.xy);\n    fragCoord -= iResolution.xy*0.5;\n    fragCoord  *= 0.2 * (1. - zoom);\n    \n    float x = col.x;\n    float y = col.y;\n    \n    float prevX = x;\n    float prevY = y;\n    \n    if (iFrame == 2 ){\n    \tprevX = initialX;\n        x = initialX;\n    \tprevY = initialY;\n        y = initialY;\n    }    \n    \n    int iterCurr = iFrame;\n    \n    for (float i = 0.; i < iterationsPerFrame; i++) {\n        x = prevY - sign(prevX) * sqrt(abs((b * prevX) - c ));\n        y = a - prevX;\n        \n    \tprevX = x;\n   \t\tprevY = y;\n        \n    \tcol.z += smoothstep(dotSize,dotSize*dotSmoothing,distance(vec2(x,y), fragCoord));\n    }\n\n    col.x = x;\n    col.y = y;\n    \n    if (iFrame < 2){\n        col = vec4(0);\n    \n    }\n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n// ------ Calculation Buffer ------ //\n// col.xy is x and y\n// col.z is density passed onto buffer B\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    col = texture(iChannel0, fragCoord/iResolution.xy);\n    fragCoord -= iResolution.xy*0.5;\n    fragCoord  *= 0.2 * (1. - zoom);\n    \n    float x = col.x;\n    float y = col.y;\n    \n    float prevX = x;\n    float prevY = y;\n    \n    if (iFrame == 2 ){\n    \tprevX = initialX;\n        x = initialX;\n    \tprevY = initialY;\n        y = initialY;\n    }    \n    \n    int iterCurr = iFrame;\n    \n    \n    for (float i = 0.; i < iterationsPerFrame; i++) {\n        x = prevY - sign(prevX) * sqrt(abs((b * prevX) - c ));\n        y = a - prevX;\n        \n    \tprevX = x;\n   \t\tprevY = y;\n        \n    \tcol.z += smoothstep(dotSize,dotSize*dotSmoothing,distance(vec2(x,y), fragCoord));\n    }\n\n    col.x = x;\n    col.y = y;\n    \n    if (iFrame < 2){\n        col = vec4(0);\n    \n    }\n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n// ------ Calculation Buffer ------ //\n// col.xy is x and y\n// col.z is density passed onto buffer B\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    col = texture(iChannel0, fragCoord/iResolution.xy);\n    fragCoord -= iResolution.xy*0.5;\n    fragCoord  *= 0.2 * (1. - zoom);\n    \n    float x = col.x;\n    float y = col.y;\n    \n    float prevX = x;\n    float prevY = y;\n    \n    if (iFrame == 2 ){\n    \tprevX = initialX;\n        x = initialX;\n    \tprevY = initialY;\n        y = initialY;\n    }    \n    \n    int iterCurr = iFrame;\n    \n    \n    for (float i = 0.; i < iterationsPerFrame; i++) {\n        x = prevY - sign(prevX) * sqrt(abs((b * prevX) - c ));\n        y = a - prevX;\n        \n    \tprevX = x;\n   \t\tprevY = y;\n        \n    \tcol.z += smoothstep(dotSize,dotSize*dotSmoothing,distance(vec2(x,y), fragCoord));\n    }\n\n    col.x = x;\n    col.y = y;\n    \n    if (iFrame < 2){\n        col = vec4(0);\n    \n    }\n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi (acos(-1.))\n#define tau (2.*pi)\n\n// ---- Parameters ---- //\n\n#define a 0.5\n#define b 5.1\n#define c 1.\n#define initialX -1.\n#define initialY 0.\n\n\n// ---- Settings ---- //\n\n#define iterationsPerFrame 1000.\n\n// zoom goes from -infinity to 1.\n#define zoom 0.6\n\n#define dotSize 0.07\n#define dotSmoothing 0.2\n#define dotBrightness 0.5\n\n#define bufferCnt 4.\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n// ------ Calculation Buffer ------ //\n// col.xy is x and y\n// col.z is density passed onto buffer B\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    col = texture(iChannel0, fragCoord/iResolution.xy);\n    fragCoord -= iResolution.xy*0.5;\n    fragCoord  *= 0.2 * (1. - zoom);\n    \n    float x = col.x;\n    float y = col.y;\n    \n    float prevX = x;\n    float prevY = y;\n    \n    if (iFrame == 2 ){\n    \tprevX = initialX;\n        x = initialX;\n    \tprevY = initialY;\n        y = initialY;\n    }    \n    \n    int iterCurr = iFrame;\n    \n    \n    for (float i = 0.; i < iterationsPerFrame; i++) {\n        x = prevY - sign(prevX) * sqrt(abs((b * prevX) - c ));\n        y = a - prevX;\n        \n    \tprevX = x;\n   \t\tprevY = y;\n        \n    \tcol.z += smoothstep(dotSize,dotSize*dotSmoothing,distance(vec2(x,y), fragCoord));\n    }\n\n    col.x = x;\n    col.y = y;\n    \n    if (iFrame < 2){\n        col = vec4(0);\n    \n    }\n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}