{
    "Shader": {
        "info": {
            "date": "1726322553",
            "description": "Kid koala visualizer by 0rblivius",
            "flags": 32,
            "hasliked": 0,
            "id": "MXXcRB",
            "likes": 2,
            "name": "Kid Koala Visualizer",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 1,
            "username": "orblivius",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "// Kid Koala visualizer by 0rblivius\n// Source: https://shadertoy.com/view/MlcGDj\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.141592653\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat cir(vec2 uv, float r)\n{\n    return length(uv)-r;\n}\n\nfloat sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}\n\nvec3 doBloom(vec2 uv, float blur, float threshold)\n{\n    vec3 col;\n    int cnt = 100;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = (fi/fcnt);\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 5.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*(fi/fcnt)*blur;\n        vec3 smple = texture(iChannel0, p).xyz;\n        if (length(smple) > threshold)\n            col += smple;\n    }\n    \n    return col/float(cnt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    float bloomIntensity = 624./640.;  \n    vec3 bloomSample = doBloom(uv, 30./360., 217./ 640.);\n    bloomSample = pow(bloomSample, vec3(0.5));\n    \n    col = col + (bloomSample*bloomIntensity);\n    \n    col = mix(col, col.zyx, pow(sat(length(cuv*2.)),4.));\n    \n   \n    \n    col = pow(col, vec3(1.5));\n\n    col *= sat(iTime-1.);\n    fragColor = vec4(col.yxz, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Kid Koala visualizer by 0rblivius\n// Source: https://shadertoy.com/view/MlcGDj\n\nconst float USE_KALEIDOSCOPE = 1.0;\nconst float NUM_SIDES = 8.0;\n// float NUM_SIDES = 10.0 *(sin(iTime * 0.6) + 1.2);\n// math const\nconst float PI = 3.141;\nconst float DEG_TO_RAD = PI / 120.0;\n\nvec3 aces(vec3 x) {\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvec2 rotateUV(vec2 uv, float angle) {\n    angle = angle*PI*PI;\n    mat2 matrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return matrix * uv;\n}\n\n\nvec3 hueShift(vec3 col, float shift) {\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\n\n// -4/9(r/R)^6 + (17/9)(r/R)^4 - (22/9)(r/R)^2 + 1.0\nfloat field( vec2 p, vec2 center, float r ) {\n\tfloat d = length( p - center ) / r;\n\t\n\tfloat t   = d  * d;\n\tfloat tt  = t  * d;\n\tfloat ttt = tt * d;\n\t\n\tfloat v =\n\t\t( - 4.0 / 9.0 ) * ttt +\n\t\t(  17.0 / 9.0 ) * tt +\n\t\t( -22.0 / 9.0 ) * t +\n\t\t1.0;\n\t\n\treturn clamp( v, 0.0, 1.0 );\n}\n\nvec2 Kaleidoscope( vec2 uv, float n, float bias ) {\n\tfloat angle = PI / n;\n\t\n\tfloat r = length( uv );\n\tfloat a = atan( uv.y, uv.x ) / angle;\n\t\n\ta = mix( fract( a ), 1.0 - fract( a ), mod( floor( a ), 2.0 ) ) * angle;\n\t\n\treturn vec2( cos( a ), sin( a ) ) * r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 ratio = iResolution.xy / min( iResolution.x, iResolution.y );\n\tvec2 uv = ( fragCoord.xy * 2.0 - iResolution.xy ) / min( iResolution.x, iResolution.y );\n\t\n    float snd2 = fract((.005*iTime+1.))*abs(sin(texture( iChannel1, vec2( 0.08, 0.25)).r));\n    \n\t// --- Kaleidoscope ---\n\tuv = mix( uv, Kaleidoscope( rotateUV(uv,sin(iTime*.2)), NUM_SIDES, iTime * 0.6 ), USE_KALEIDOSCOPE ); \n\t\n\tvec3 final_color = vec3( 0.0 );\n\tfloat final_density = 0.0;\n\tfor ( int i = 0; i < 150; i++ ) {\n\t\tvec4 noise  = texture( iChannel0, vec2( float( i ) + 0.5, 0.5 ) / 256.0 );\n\t\tvec4 noise2 = texture( iChannel0, vec2( float( i ) + 0.5, 9.5 ) / 256.0 );\n\t\tfloat snd = texture( iChannel1, vec2( float(i)/128., 0.25)).r;\n\t\t// velocity\n\t\tvec2 vel = noise.xy * 2. - vec2( 1. );\n\t\t\n\t\t// center\n\t\tvec2 pos = noise.xy;\n\t\tpos += iTime * vel * 0.2* (1.+abs(sin(.001*snd+iTime*.001)));\n\t\tpos = mix( fract( pos ), 1.0 - fract( pos ), mod( floor( pos ), 2.0 ) );\n\t\t\n\t\t// remap to screen\n\t\tpos = ( pos * 2.0  - 1.0 ) * ratio;\n\t\t\n\t\t// radius\n\t\tfloat radius = clamp( noise.w * (2.*snd), 0.4, 0.7 );\n\t\tradius *= radius * 0.5;\n\t\t\n\t\t// color\n\t\tvec3 color = noise2.xyz;\n\t\t\n\t\t// density\n\t\tfloat density = field( uv, pos, radius );\n\n\t\t// accumulate\n\t\tfinal_density += density;\t\t\n\t\tfinal_color += density * color;\n\t}\n\n\tfinal_density = clamp( final_density - 0.1, 0.0, 1.0 );\n\tfinal_density = pow( final_density, 4.0 );\n\n\tfragColor = vec4( final_color * final_color * final_density * final_density, 1.0 );\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}