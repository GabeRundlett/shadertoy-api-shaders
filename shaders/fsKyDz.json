{
    "Shader": {
        "info": {
            "date": "1654707357",
            "description": "12345",
            "flags": 0,
            "hasliked": 0,
            "id": "fsKyDz",
            "likes": 0,
            "name": "123ERRR",
            "published": 3,
            "tags": [
                "12"
            ],
            "usePreview": 0,
            "username": "Igger",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "#define myPi 3.141592654f\n#define Eps 1e-8\n#define maxZ 100.0\n\nconst int n = 4;\nvec3 colVec[n] = vec3[n](vec3(0.6, 0.6, 0.9), vec3(0.9, 0.1, 0.7), vec3(0.9, 0.9, 0.6),vec3(0.9, 0.9, 0.2));\nvec3 BGcol = vec3(0.5, 0.9, 1.0);\n//float zVec[n] = float[n](3.0, 2.0, 1.0);\n//век3 - цвет треугольника\nint sizes[n] = int[n](3, 3, 4,6), inds[n] = int[n](0, 3, 6,10); const int m = 16;\nvec2 polygonsXY[m]; float polygonsZ[m];\n\nvoid initPolygons(out vec2 polygonsXY[m], out float polygonsZ[m], in float time){\n// 0 — triangle\npolygonsXY[0] = vec2(0.0, 0.0); polygonsZ[0] = 0.1;\npolygonsXY[1] = vec2(1.0, 0.0); polygonsZ[1] = 0.1;\npolygonsXY[2] = vec2(1.0, 0.0); polygonsZ[2] = 0.1;\n// 1 — triangle\npolygonsXY[3] = vec2(0.3*cos(time), 0.9*cos(time)); polygonsZ[3] = 0.1;\npolygonsXY[4] = vec2(0.2*cos(time), 0.7*sin(time)); polygonsZ[4] = 0.11;\npolygonsXY[5] = vec2(0.6*cos(time), 0.2*cos(time)); polygonsZ[5] = 0.09;\n// 2 — rotated square\nfloat w = 2.0;\nvec3 center = vec3(0.55, 0.2, 0.1 + 0.05*sin(time*w)); float r = 0.2;\nint i; float j =0.0, phi = myPi/6.0;\nfloat ang = 2.0*myPi/4.0;\nvec3 tmpVec;\nmat3 rot = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(phi), sin(phi)), vec3(0.0, -sin(phi), cos(phi)) );\nfor (i = 6; i < 10; i++){\ntmpVec = rot*(r*vec3(cos(j*ang + time), sin(j*ang + time), .0));\npolygonsXY[i] = tmpVec.xy + center.xy;\npolygonsZ[i] = tmpVec.z + center.z;\nj = j + 1.0;\n}\n\n\n\n\n// 3 — 6angle\nang = myPi/3.0;\nfloat rr = 0.1;\nfor (i = 10; i < 16; i++){\ntmpVec = rot*(rr*vec3(cos(j+ang ), sin(j+ang), 0.1));\npolygonsXY[i] = tmpVec.xy + (center.xy + 0.1);\npolygonsZ[i] = tmpVec.z - center.z;\nj = j + 1.0;\ncolVec[3]=vec3(polygonsXY[i][0],polygonsXY[i][1],polygonsZ[i]);\n}\n\n\n\n;\n}\n\n\n\nint leftTurn(in vec2 a, in vec2 b, in vec2 c)\n{\nfloat tmp = (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);\nif (abs(tmp) < Eps)\nreturn 0;\nelse\nreturn tmp > 0.0 ? 1: -1;\n}\n\n\nbool inPolygon(in int ind0, in int size, in vec2 vert[m], in vec2 p) // vertices in counter clockwise order\n{\nbool res = leftTurn(vert[ind0 + size-1], vert[ind0], p) <= 0; int i = ind0;\nwhile(res && (i < ind0 + size -1))\n{\nres = res && (leftTurn(vert[i], vert[i+1], p) <= 0); i++;\n}\nreturn res;\n}\n\nfloat zInPlane(in vec3 a, in vec3 b, in vec3 c, in vec2 p) // z coordinate for (x,y) point of a plane (a-b, c-b)\n{\nvec3 nrm = cross(a-b, c-b);\n//float D = - dot(nrm, b);\nif (abs(nrm.z) < Eps) return a.z;\nelse return (dot(nrm, b) - nrm.x*p.x - nrm.y*p.y)/nrm.z;\n}\n\n\n// vec3 normalize(vec3), vec3 cross(vec3, vec3) are predefined\nvoid initColors(in float polygonsZ[m]) {\nfloat w = 2.0;\n\n\ncolVec[2] = vec3(polygonsZ[8]*15.5, 1.0, 411.7);\n\n}\n\n\n\n// vec3 normalize(vec3), vec3 cross(vec3, vec3) are predefined\nvec3 initColors2(in vec2 uv) {\nreturn vec3((uv.x),(uv.y),(uv.x)*(uv.y));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// Normalized pixel coordinates (from 0 to 1)\nvec2 uv = fragCoord/iResolution.xy;\nfloat time = iTime, tmp; //iTime;\ninitPolygons(polygonsXY, polygonsZ, time);\nvec3 col = BGcol; float z = maxZ;\nint i;\ninitColors( polygonsZ);\nfor (i =0; i < n; i++){\n\nif ( inPolygon(inds[i], sizes[i], polygonsXY, uv) ){\ntmp = zInPlane(vec3(polygonsXY[inds[i]].x, polygonsXY[inds[i]].y, polygonsZ[inds[i]]), \\\nvec3(polygonsXY[inds[i]+1].x, polygonsXY[inds[i]+1].y, polygonsZ[inds[i]+1]), \\\nvec3(polygonsXY[inds[i]+2].x, polygonsXY[inds[i]+2].y, polygonsZ[inds[i]+2]), uv);\nif (tmp < z){\nif (i==3) col =initColors2( uv);else{\nz = tmp; col = colVec[i]; }\n} }\n\n}\n\n// Output to screen\nfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}