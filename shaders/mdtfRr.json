{
    "Shader": {
        "info": {
            "date": "1696817867",
            "description": "infinite cubes\nthe sdf is slightly incorrect but it's good enough",
            "flags": 0,
            "hasliked": 0,
            "id": "mdtfRr",
            "likes": 1,
            "name": "diamboy's infinite cubes",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Diamboy",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "float sdf(vec3 p)\n{\n    p -= vec3(iTime * 0.31, iTime * 0.1, -1.01);\n    vec3 idx = round(p / 2.0);\n    p -= idx * 2.0;\n\n    float angle = iTime + idx.x + idx.y * 1.2 + idx.z * 2.3;\n    vec3 az = vec3(cos(angle), sin(angle), 1) * sqrt(0.5);\n    vec3 ax = normalize(cross(vec3(0,1,0), az));\n    vec3 ay = cross(az, ax);\n    vec3 q = vec3(dot(p, ax), dot(p, ay), dot(p, az));\n    vec3 r = abs(q);\n    return max(max(r.x, r.y), r.z) - 0.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 rd = normalize(vec3(uv, 1));\n    float t = 0.0;\n    for (int i = 0; i < 100; i++)\n        t += sdf(rd * t);\n    vec3 c = fract(vec3(0.45 / pow(t,0.3)));\n    fragColor = vec4(c, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}