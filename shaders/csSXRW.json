{
    "Shader": {
        "info": {
            "date": "1669933401",
            "description": "coma tag",
            "flags": 0,
            "hasliked": 0,
            "id": "csSXRW",
            "likes": 3,
            "name": "sun set cloud hhhh",
            "published": 3,
            "tags": [
                "tagcoma"
            ],
            "usePreview": 0,
            "username": "Issam_X_Mhadhbi",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "float random (in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +(c - a)* u.y * (1.0 - u.x) +(d - b) * u.x * u.y;\n}\n\n#define OCTAVES 8\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(st);\n        st *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nvec3 draw_sky(vec2 uv ){\n    vec3 c0 = vec3(0.996,0.868,0.297) ; \n    vec3 c1  = vec3(0.996,0.711,0.515) ; \n    vec3 c2 = vec3(0.151,0.694,0.996) ; \n    float h1 = 0.02; \n    if(uv.y <  h1 ){\n        if(uv.y <  0.5*h1 ){\n        float gradient = (uv.y - h1 ) / (h1) ; \n        return mix(c1 , c0  , gradient)  ;  \n        }\n        else\n        {\n        float gradient = (uv.y - h1 ) / (h1) ; \n        return mix(c1 , c0  , gradient)  ;     \n        }\n    }else{\n        float gradient = (uv.y - h1 ) / (h1) ; \n        return mix(c1 , c2  , gradient)  ;       \n    }\n}\n\nfloat sunR = 0.05 ; \nvec3 sunColor = vec3(1.0,1.0,0.8) ; \nvec2 sunpos = vec2(0.5, 0.5  ) ; \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    st.x *= iResolution.x / iResolution.y ; \n\n\tvec3 sky  = draw_sky(st) ; \n    vec3 white = vec3(0.971,1.000,0.785) ; \n    float r = fbm(st*4.0);\n    vec3 color = mix(sky,white,r) ; \n    vec2 uv = st ; \n    float distance_cubic = (uv.x - sunpos.x)*(uv.x - sunpos.x) + (uv.y - sunpos.y)*(uv.y - sunpos.y) ; \n    if (distance_cubic < sunR*sunR ){\n\n    \tcolor = vec4(sunColor,1.0).xyz ; \n    }\n    else{\n\n    \tcolor = vec4(mix(color , sunColor, 1.2*(sunR*sunR)/distance_cubic),1).xyz ; \n    }\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}