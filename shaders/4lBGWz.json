{
    "Shader": {
        "info": {
            "date": "1428621400",
            "description": "Ray Marching Experiment 15",
            "flags": 0,
            "hasliked": 0,
            "id": "4lBGWz",
            "likes": 3,
            "name": "Ray Marching Experiment 15",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "15"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1399
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n    \nvec3 cell(vec2 v, float t){return texture(iChannel1, v/t*0.001).rgb;}\nvec4 displ(vec3 p)\n{\n    vec3 uv = vec3(atan(p.x,p.y), atan(p.y,p.z), length(p));\n    float t = (sin(iTime*0.25)*.6+.8)*.1;\n    vec3 col = cell(uv.xy, t)*cell(uv.yz, t)*cell(uv.xz, t);\n    return vec4(dot(col,vec3(0.35)),col);\n}\n\nvec4 map(vec3 p)\n{\n   \tvec4 disp = displ(p);\n    float dist = length(p) - 4. - smoothstep(0., 1., disp.x) * 3.;\n    return vec4(dist, disp.yzw);\n}\n\n// from nimitz\nvec3 nor( in vec3 p )\n{\n    vec2 e = vec2( 0.2, 0.);\n\tvec3 n = vec3(\n\t    map(p+e.xyy).x - map(p-e.xyy).x,\n\t    map(p+e.yxy).x - map(p-e.yxy).x,\n\t    map(p+e.yyx).x - map(p-e.yyx).x );\n\treturn normalize(n);\n}\n\n// from iq\nfloat ao( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<10; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aop =  nor * hr + pos;\n        float dd = map( aop ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.5;\n    float cam_a = time; // angle z\n    \n    float cam_e = 5.52; // elevation\n    float cam_d = 1.88; // distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); //Change camere view here\n  \tfloat li = 0.6; // light intensity\n    float prec = 1e-5; // ray marching precision\n    float maxd = 20.; // ray marching distance max\n    float refl_i = .6; // reflexion intensity\n    float bii = 0.35; // bright init intensity\n    float marchPrecision = 0.5; // ray marching tolerance precision\n     \n    /////////////////////////////////////////////////////////\n    if ( iMouse.z>0.) cam_e = iMouse.x/iResolution.x * 10.; // mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y/iResolution.y * 50.; // mouse y axis \n    /////////////////////////////////////////////////////////\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d=0.;\n    vec3 p=ro;\n    float s=prec;\n    vec3 ray,cubeRay,m;\n    \n    for(int i=0;i<250;i++)\n    {      \n        if(s<0.025*log(d*d/s/1e5)||s>maxd) break;\n        s=map(p).x;\n        d+=s*0.4;\n        p=ro+rd*d;\n    }\n   \n    if (d<maxd)\n    {\n       \tvec3 n=nor(p);\n        b+=li;\n        ray=reflect(rd, n);\n        cubeRay=texture(iChannel0,ray).rgb*refl_i ;\n        col+=cubeRay+pow(b,15.); \n        \n        // from iq        \n        float occ = ao( p, n );\n        vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n        float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n        float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n        float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n        vec3 brdf = 1.20*dif*vec3(1.00,0.90,0.60);\n        brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 1.10*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.20*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.60*fre*vec3(1.00,1.00,1.00)*occ;\n        brdf += 0.03;\n        col = col*brdf;\n        col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n        col = mix(col, map(p).yzw, 0.5);\n    }\n    else\n    {\n        col = texture(iChannel0, rd).rgb;\n    }\n\n    fragColor.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}