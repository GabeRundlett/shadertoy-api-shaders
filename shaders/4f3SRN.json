{
    "Shader": {
        "info": {
            "date": "1713627473",
            "description": "With more params. Demo:\n- https://youtu.be/Xdhe1KVdsxo",
            "flags": 0,
            "hasliked": 0,
            "id": "4f3SRN",
            "likes": 19,
            "name": "AF - Kaleidoscope Bao01",
            "published": 3,
            "tags": [
                "kaleidoscope",
                "animationfractal"
            ],
            "usePreview": 0,
            "username": "tristanC",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "#ifndef ANIMATION_FRACTAL\n// Simulate the pitch inputs using a smoothed stairs function STEP\n#define STEP1(x) ((x) - sin(x))\n#define STEP(x, offset, amp) (STEP1(STEP1(offset + x * amp)) * .15)\n#define is (iTime)\n\nfloat pitches[9];\nvoid genPitches() {\n  pitches[0] = STEP(is, 1., 1.);\n  pitches[1] = STEP(is, 2., 2.);\n  pitches[2] = STEP(is, 3., 3.);\n  pitches[3] = STEP(is, 4., 4.);\n  pitches[4] = STEP(is, 5., 1.);\n  pitches[5] = STEP(is, 6., 2.);\n  pitches[6] = STEP(is, 7., 3.);\n  pitches[7] = STEP(is, 8., 4.);\n  pitches[8] = STEP(is, 1., 5.);\n}\n#define ipitch_1 pitches[0]\n#define ipitch_2 pitches[1]\n#define ipitch_3 pitches[2]\n#define ipitch_4 pitches[3]\n#define ipitch_5 pitches[4]\n#define ipitch_6 pitches[5]\n#define ipitch_7 pitches[6]\n#define ipitch_8 pitches[7]\n#define ipitch_9 pitches[8]\n\n#define icolor (iTime*.5)\n#define imoveFWD (iTime*.1)\n#endif\n\n#define PI 3.141592\n#define orbs 20.\n\nvec2 kale(vec2 uv, vec2 offset, float sides) {\n  float angle = atan(uv.y, uv.x);\n  angle = ((angle / PI) + 1.0) * 0.5;\n  angle = mod(angle, 1.0 / sides) * sides;\n  angle = -abs(2.0 * angle - 1.0) + 1.0;\n  angle = angle;\n  float y = length(uv);\n  angle = angle * (y);\n  return vec2(angle, y) - offset;\n}\n\nvec4 orb(vec2 uv, float size, vec2 position, vec3 color, float contrast) {\n  return pow(vec4(size / length(uv + position) * color, 1.), vec4(contrast));\n}\n\nmat2 rotate(float angle) {\n  return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n// The MIT License\n// See https://iquilezles.org/articles/palettes for more information\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 palette ( float t ) {\n // return pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n // return pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n return pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n}\n\n#ifdef ANIMATION_FRACTAL\nvoid main() {\n    vec2 uv = -1. + 2*inUV;\n    uv *= 42.;\n    uv.y *= scene.screenRatio;\n#else\nvoid mainImage( out vec4 oColor, in vec2 fragCoord ) {\n    vec2 uv = 23.09 * (2. * fragCoord - iResolution.xy) / iResolution.y;\n    genPitches();\n#endif\n  float dist = length(uv);\n  oColor = vec4(0.);\n  uv *= rotate(imoveFWD);\n  uv = kale(uv, vec2(6.97), 9.);\n  uv *= rotate(ipitch_2 * .5);\n  for (float i = 0.; i < orbs; i++) {\n    uv *= rotate(ipitch_7*.01);\n    uv.x += 0.57 * sin(0.3 * uv.y + ipitch_3);\n    uv.y -= 0.63 * cos(0.53 * uv.x + ipitch_4);\n    float t = i * PI / orbs * 2.;\n    float x = 4.02 * tan(t - (ipitch_1 + ipitch_5) * .1);\n    float y = 4.02 * cos(t - ipitch_6 * .5);\n    vec2 position = vec2(x, y);\n    vec3 color = .15 + palette(icolor + i / orbs) * .25; // vec3(0.,0.3,0.8) * 0.25 + 0.25;\n    oColor += orb(uv, 1.39, position, color, 1.37);\n  }\n#ifdef ANIMATION_FRACTAL\n    oColor = pow(oColor, vec4(1.2, .9, .9, 1.) * 3.);\n#endif\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}