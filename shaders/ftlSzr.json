{
    "Shader": {
        "info": {
            "date": "1625074992",
            "description": "License CC0: Simple function vizualizer\nI had the need to visualize some functions so created a simple visualizer\nThought perhaps someone else could find use for it. I am sure examples\nalready exists on shadertoy but I didn't find them",
            "flags": 0,
            "hasliked": 0,
            "id": "ftlSzr",
            "likes": 5,
            "name": "Simple function vizualizer",
            "published": 3,
            "tags": [
                "2d",
                "simple"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "// -----------------------------------------------------------------------------\n// License CC0: Simple function vizualizer\n//  I had the need to visualize some functions so created a simple visualizer\n//  Thought perhaps someone else could find use for it. I am sure examples\n//  already exists on shadertoy but I didn't find them\n// -----------------------------------------------------------------------------\n\n#define ZOOM 0.5\n#define TIME 1.0*iTime\n\n// f - the function that is visualized\nfloat f(float x) {\n  return sin(x)*sin(x*sqrt(0.5));\n}\n\n// -----------------------------------------------------------------------------\n\n// From: http://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// From: https://iquilezles.org/articles/distfunctions2d\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h );\n}\n\nvec2 df(vec2 p, float z, float aa) {\n  p /= z;\n  vec2 gp = p;\n  float m = aa*2.0;\n  float n = mod1(p.x, m);\n  float d = 1E3;\n  \n  const int reps = 3;\n\n  for (int i = -reps; i <= reps; ++i) {\n    float x0 = (n + float(i))*m + TIME*0.5;\n    float x1 = (n + float(i + 1))*m + TIME*0.5;\n  \n    float y0 = 0.5*f(2.0*x0);\n    float y1 = 0.5*f(2.0*x1);\n    \n    float dd = segment(p, vec2(-m*0.5 + m * float(i), y0), vec2(m*0.5 + m * float(i), y1))-2.0*aa/z;\n    \n    d = min(d, dd);\n  }\n  \n  gp.x += TIME*0.5;\n  mod1(gp.x, 0.5);\n  mod1(gp.y, 0.5);\n  float dgrid = min(abs(gp.x), abs(gp.y))-aa/z;\n  return vec2(d, dgrid)*z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= iResolution.x/iResolution.y;\n  float aa = 2.0/iResolution.y;\n  \n  vec2 d = df(p, ZOOM, aa);\n \n  vec3 col = mix(vec3(0.05), vec3(0.1), q.y);\n  col = mix(col, vec3(0.5, 0.75, 1.0), smoothstep(-aa, aa, -d.y));\n  col = mix(col, vec3(1.0), smoothstep(-aa, aa, -d.x));\n  \n  col = pow(col, vec3(1.0/2.0));\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}