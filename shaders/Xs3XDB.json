{
    "Shader": {
        "info": {
            "date": "1461158587",
            "description": "Somewhere in the Roman empire... Use the mouse to examine the architecture.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xs3XDB",
            "likes": 13,
            "name": "Amphitheater",
            "published": 3,
            "tags": [
                "raymarching",
                "architecture",
                "android"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 682
        },
        "renderpass": [
            {
                "code": "// \"Amphitheater\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4v3 (ip);\n  t2 = Hashv4v3 (ip + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrOBoxDf (vec3 p, vec3 b)\n{\n  return length (max (abs (p) - b, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrERCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z - 0.5 * h) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo)\n{\n  return length (p - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo;\n}\n\nvec2 SSBump (float w, float s, float x)\n{\n  return vec2 (step (x + s, w) * step (- w, x + s),\n     step (x - s, w) * step (- w, x - s));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 sunDir;\nvec2 rAngHCs, rAngACs, rAngLCs, rAngTCs;\nfloat dstFar, tCur;\nint idObj;\nbool walk;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, p;\n  float ds, fd, att, attSum, d, sd;\n  if (rd.y >= 0.) {\n    p = rd * (200. - ro.y) / max (rd.y, 0.0001);\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;  p.xz += 0.1 * tCur;\n    att = Fbm2 (p.xz);  attSum = att;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    attSum *= 0.3;  att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n    col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n       max (rd.y - 0.1, 0.)));\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  } else {\n    p = ro - (ro.y / rd.y) * rd;\n    col = 0.6 * mix (vec3 (0.4, 0.4, 0.1), vec3 (0.5, 0.5, 0.2),\n       Fbm2 (9. * p.xz)) * (1. - 0.1 * Noisefv2 (150. * p.xz));\n  }\n  return col;\n}\n\nfloat BldgDf (vec3 p, float dMin)\n{\n  vec3 q, qq, qt;\n  vec2 rh, drh;\n  float d, a;\n  qq = p;\n  qq.xz = Rot2D (qq.xz, 2. * pi / 48.);\n  a = atan (qq.z, - qq.x) / (2. * pi);\n  q = qq;  q.y -= 0.57;\n  d = PrCylAnDf (q.xzy, 2., 0.03, 0.57);\n  q = qq;  q.xz = Rot2D (q.xz, 2. * pi * (floor (24. * a) + 0.5) / 24.);\n  q.y -= 0.11;\n  d = max (d, - max (PrFlatCyl2Df (q.yz, 0.2, 0.16), -0.1 - q.y));\n  q = qq;  q.xz = Rot2D (q.xz, 2. * pi * (floor (48. * a) + 0.5) / 48.);\n  qt = q;\n  q.y -= 0.63;\n  d = max (d, - max (PrFlatCyl2Df (q.yz, 0.13, 0.1), -0.05 - q.y));\n  q = qq;  q.xz = Rot2D (q.xz, 2. * pi * (floor (96. * a) + 0.5) / 96.);\n  q.y -= 0.96;\n  d = max (d, - max (PrFlatCyl2Df (q.yz, 0.08, 0.05), -0.025 - q.y));\n  q = qt;  q.xy -= vec2 (-1.9, 0.47);\n  d = min (d, PrOBoxDf (q, vec3 (0.07, 0.01, 0.02)));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p;  q.y -= 0.25;\n  rh = vec2 (1.8, 0.25);\n  drh = vec2 (0.05, 0.0175);\n  d = PrCylAnDf (q.xzy, rh.x, 0.5 * drh.x, rh.y);\n  for (int k = 0; k < 13; k ++) {\n    q.y -= - drh.y;  rh -= drh;\n    d = min (d, PrCylAnDf (q.xzy, rh.x, 0.5 * drh.x, rh.y));\n  }\n  qq = p;\n  a = atan (qq.z, - qq.x) / (2. * pi);\n  qq.xz = Rot2D (qq.xz, 2. * pi * ((floor (6. * a) + 0.5) / 6.));\n  q = qq;  q.y -= 0.07;\n  d = max (d, - max (PrFlatCyl2Df (q.yz, 0.22, 0.1), -0.05 - q.y));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;  q.y = abs (q.y - 0.26) - 0.25;\n  d = PrCylAnDf (q.xzy, 0.3, 0.01, 0.01);\n  q = qq;  q.xy -= vec2 (-0.3, 0.26);\n  d = min (d, PrCylDf (q.xzy, 0.01, 0.25));\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  q = p;  q.y -= 0.03;\n  d = PrCylDf (q.xzy, 0.2, 0.03);\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q = p;  q.y -= -0.003;\n  d = PrCylDf (q.xzy, 2.5, 0.003);\n  if (d < dMin) { dMin = d;  idObj = 5; }\n  return dMin;\n}\n\nfloat RobDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 s;\n  float hGap, bf, d, szFac, spx;\n  bool isMob;\n  isMob = (length (p.xz) > 0.4);\n  if (isMob) {\n    p.xz = Rot2Cs (p.xz, rAngTCs);\n    s = step (0., p.xz);\n    p.xz = abs (p.xz) - 0.5;\n    p.xz = Rot2D (p.xz, ((s.x == s.y) ? -0.75 :\n       (0.75 - 2. * step (s.x, s.y))) * pi);\n    szFac = 25.;\n  } else {\n    p.xz = vec2 (- p.z, p.x);  p.y -= 0.06;\n    szFac = 10.;\n  }\n  p *= szFac;\n  hGap = 2.;\n  bf = isMob ? PrBoxDf (p, vec3 (3. * hGap, 6., 3. * hGap)) : 0.;\n  dMin *= szFac;\n  if (isMob) {\n    p.xz = mod (p.xz + hGap, 2. * hGap) - hGap;\n    if (s.x == s.y) p.xz = vec2 (- p.z, p.x);\n    if (! walk) {\n      p.xz = vec2 (- p.z, p.x);\n      if (s.x == s.y) p.xz = - p.xz;\n    }\n  }\n  spx = 2. * step (0., p.x) - 1.;\n  q = p;  q.y -= 2.2;\n  d = max (PrSphDf (q, 0.85), - q.y);\n  q = p;  q.y -= 1.2;\n  d = min (d, PrERCylDf (q.xzy, 0.9, 0.28, 0.7));\n  q = p;  q.xz = Rot2Cs (q.xz, rAngHCs);\n  q.x = abs (q.x) - 0.3;  q.y -= 3.;\n  q.xy = Rot2D (q.xy, 0.2 * pi);\n  d = min (d, PrERCylDf (q.xzy, 0.06, 0.04, 0.2));\n  q = p;  q.x = abs (q.x) - 1.05;  q.y -= 2.1;\n  if (isMob || ! walk) q.yz = Rot2Cs (q.yz, rAngACs *\n     vec2 (1., (walk ? spx : 1.)));\n  q.y -= -0.9;\n  d = min (d, PrERCylDf (q.xzy, 0.2, 0.15, 0.6));\n  q = p;  q.x = abs (q.x) - 0.4;  q.y -= 1.;\n  if (isMob) q.yz = Rot2Cs (q.yz, rAngLCs * vec2 (1., spx));\n  q.y -= -0.8;\n  d = max (min (d, PrERCylDf (q.xzy, 0.25, 0.15, 0.55)), bf);\n  if (d < dMin) { dMin = d;  idObj = 11; }\n  q = p;  q.xz = Rot2Cs (q.xz, rAngHCs);\n  q.x = abs (q.x) - 0.4;  q.yz -= vec2 (2.6, 0.7);\n  d = max (PrSphDf (q, 0.15), bf);\n  if (d < dMin) { dMin = d;  idObj = 12; }\n  dMin /= szFac;\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = BldgDf (p, dMin);\n  dMin = RobDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy),\n     ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.07 * d, h));\n    d += max (0.04, 0.08 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, q;\n  vec2 ss;\n  float dstObj, spec, sn, a, f, sh;\n  int idObjT;\n  bool isRuf;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    isRuf = true;\n    spec = 0.1;\n    if (idObj == 1 || idObj == 2) a = atan (ro.z, - ro.x) / (2. * pi);\n    if (idObj == 1) {\n      q = ro;\n      col = vec3 (0.8, 0.6, 0.3);\n      ss = vec2 (0.);\n      if (abs (q.y - 0.53) < 0.021) {\n        ss = SSBump (0.008, 0.013, q.y - 0.53);\n        sn = 0.3;\n      } else if (abs (q.y - 0.9) < 0.013) {\n        ss = SSBump (0.005, 0.008, q.y - 0.9);\n        sn = 0.2;\n      } else if (abs (q.y - 1.125) < 0.008) {\n        ss = SSBump (0.003, 0.005, q.y - 1.125);\n        sn = 0.15;\n      }\n      if (ss.x + ss.y != 0.) {\n        vn.y += sn * (ss.y - ss.x);\n        vn = normalize (vn);\n        col *= 0.8 * ss.x + 1.1 * ss.y;\n        isRuf = false;\n      } else if (length (q.xz) > 2. && q.y < 0.505) {\n        q.xz = Rot2D (q.xz, 2. * pi * (floor (24. * a) + 0.5) / 24.);\n        if (abs (q.z) < 0.032) {\n          ss = SSBump (0.013, -0.015, q.z);\n          if (ss.x + ss.y != 0.) {\n            vn.xz += 0.3 * (ss.y - ss.x) * vn.zx * vec2 (-1., 1.);\n            col *= 0.8 * ss.x + 1.1 * ss.y;\n          }\n        }\n      }\n      if (length (q.xz) > 2. && abs (q.y - 0.84) < 0.03) {\n        q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * a) + 0.5) / 6.);\n        q.y -= 0.84;\n        if (length (q.yz) < 0.03) {\n          col = mix (vec3 (1., 0.7, 0.), vec3 (0., 0., 1.),\n             step (0., sin (500. * length (q.yz))));\n          isRuf = false;\n          spec = -1.;\n        }\n      }\n    } else if (idObj == 2) {\n      if (length (ro.xz) > 1.82) {\n        f = SmoothBump (0.7, 1.1, 0.1, Fbm2 (40. * vec2 (10. * a, ro.y)));\n        col = vec3 (0.6, 0.6, 0.8) * mix (1., 0.9, f);\n      } else {\n        col = vec3 (0.6, 0.6, 0.7) * mix (1., 0.9, Noisefv3a (200. * ro));\n      }\n    } else if (idObj == 3) {\n      col = vec3 (0.8, 0.8, 0.2);\n      spec = 1.;\n    } else if (idObj == 4) {\n      col = vec3 (0.1, 0.2, 0.6);\n    } else if (idObj == 5) {\n      if (length (ro.xz) > 2.) col = vec3 (0.4, 0.4, 0.3) * (1. -\n         0.1 * SmoothBump (0.1, 0.3, 0.05, mod (30. *\n         (length (ro.xz) - 2.), 1.)));\n      else col = vec3 (0.5, 0.5, 0.45) * mix (1., 0.7, Noisefv2 (400. * ro.xz));\n    } else if (idObj == 11) {\n      col = (length (ro.xz) > 0.4) ? vec3 (0.2, 0.8, 0.2) : vec3 (0.8, 0.2, 0.8);\n      spec = 0.5;\n    } else if (idObj == 12) {\n      col = (length (ro.xz) > 0.4) ? vec3 (0.8, 0.3, 0.) : vec3 (1., 0., 0.);\n      spec = 1.;\n    }\n    if (spec >= 0.) {\n      if (idObj == 1 && isRuf || idObj == 5) vn = VaryNf (100. * ro, vn, 0.5);\n      sh = ObjSShadow (ro, sunDir);\n      col = col * (0.2 +\n         sh * (0.1 * max (vn.y, 0.) + 0.8 * max (dot (vn, sunDir), 0.)) +\n         sh * spec * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n    }\n  } else {\n    sh = (rd.y < 0.) ? ObjSShadow (ro - (ro.y / rd.y) * rd, sunDir) : 1.;\n    col = sh * BgCol (ro, rd);\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid SetState ()\n{\n  float tCyc, wkSpd, rAngH, rAngA, rAngL, rAngT;\n  wkSpd = 2. * pi * 0.55 / 7.;\n  tCyc = mod (wkSpd * tCur, 7.);\n  rAngT = - 0.07 * (4. * floor (wkSpd * tCur / 7.) + min (tCyc, 4.)) / wkSpd;\n  rAngTCs = vec2 (cos (rAngT), sin (rAngT));\n  if (tCyc < 4.) {\n    walk = true;\n    tCyc = mod (tCyc, 1.);\n    rAngH = -0.7 * sin (2. * pi * tCyc);\n    rAngA = 1.1 * sin (2. * pi * tCyc);\n    rAngL = -0.6 * sin (2. * pi * tCyc);\n  } else {\n    walk = false;\n    tCyc = mod (tCyc, 1.);\n    rAngH = 0.;\n    rAngA = 2. * pi * (0.5 - abs (tCyc - 0.5)); \n    rAngL = 0.;\n  }\n  rAngHCs = vec2 (cos (rAngH), sin (rAngH));\n  rAngACs = vec2 (cos (rAngA), sin (rAngA));\n  rAngLCs = vec2 (cos (rAngL), sin (rAngL));\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p, w;\n  float ti[7], rI, rO, hI, hO, hC, s;\n  ti[0] = 0.;  ti[1] = ti[0] + 0.3;  ti[2] = ti[1] + 0.1;  ti[3] = ti[2] + 0.4;\n  ti[4] = ti[3] + 0.1;  ti[5] = ti[4] + 0.3;  ti[6] = ti[5] + 0.3;\n  t = mod (0.02 * t, ti[6]);\n  rI = 1.6;  rO = 5.5;  hI = 0.7;  hO = 0.5;  hC = 0.2;\n  if (t < ti[1]) {\n    s = (t - ti[0]) / (ti[1] - ti[0]);\n    w = vec3 (rO - s * (rO - rI), hO + s * (hC - hO), -0.5 * pi);\n  } else if (t < ti[2]) {\n    s = (t - ti[1]) / (ti[2] - ti[1]);\n    w = vec3 (rI, hC + s * (hI - hC), -0.5 * pi);\n  } else if (t < ti[3]) {\n    s = (t - ti[2]) / (ti[3] - ti[2]);\n    w = vec3 (rI, hI, - 0.5 * pi + s * 1.333 * pi);\n  } else if (t < ti[4]) {\n    s = (t - ti[3]) / (ti[4] - ti[3]);\n    w = vec3 (rI, hI - s * (hI - hC), 0.833 * pi);\n  } else if (t < ti[5]) {\n    s = (t - ti[4]) / (ti[5] - ti[4]);\n    w = vec3 (rI + s * (rO - rI), hC + s * (hO - hC), 0.833 * pi);\n  } else {\n    s = (t - ti[5]) / (ti[6] - ti[5]);\n    w = vec3 (rO, hO, 0.833 * pi + s * 0.667 * pi);\n  }\n  p.xz = w.x * vec2 (cos (w.z), sin (w.z));  p.y = w.y;\n  return p;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, vuMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 12.;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  vuMode = 1.;\n  az = 0.;\n  el = (vuMode == 1.) ? 0.05 : -0.3;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  if (vuMode == 1.) {\n    ro = TrackPath (tCur);\n    vd = normalize (vec3 (0., 0.1, 0.) - ro);\n    az = clamp (az, -0.7 * pi, 0.7 * pi);\n    el = clamp (el, -0.2 * pi, 0.2 * pi);\n    az += 0.5 * pi + atan (- vd.z, vd.x);\n    el += asin (vd.y);\n    zmFac = 1.4 + 0.45 * length (ro.xz);\n  } else {\n    el = min (el, 0.);\n    zmFac = 3.6;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  if (vuMode == 0.) ro = vuMat * vec3 (0., 0.3, -6.);\n  SetState ();\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}