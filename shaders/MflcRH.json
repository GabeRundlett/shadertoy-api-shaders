{
    "Shader": {
        "info": {
            "date": "1720864939",
            "description": "Sci Fi Pattern",
            "flags": 32,
            "hasliked": 0,
            "id": "MflcRH",
            "likes": 8,
            "name": "Sci Fi Pattern",
            "published": 3,
            "tags": [
                "abstract",
                "pattern",
                "scifi"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "\n// Sci Fi Pattern\n// 2024/07/13 Leon Denise\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 frame = texture(iChannel0, uv);\n    \n    // coordinates distance\n    #define T(u) texture(iChannel0, uv+u/iResolution.xy).x\n    float z = T(0.);\n    \n    float edge = 0.;\n    float ao = 0.;\n    \n    const float count = 9.;\n    for (float a = 0.; a < count; ++a)\n    {\n        // blue noise scroll https://www.shadertoy.com/view/tlySzR\n        ivec2 pp = ivec2(fragCoord);\n        pp = (pp+(int(a))*ivec2(113,127)) & 1023;\n        vec3 blu = texelFetch(iChannel1,pp,0).xyz;\n        \n        // edge detection\n        float f = a/count;\n        float aa = 6.283*f;\n        vec2 xy = vec2(cos(aa),sin(aa));\n        edge += abs(T(xy)-T(-xy));\n        \n        // sort of ambient occlusion\n        float r = (.5+blu.z) * 10.;\n        xy = normalize(vec2(blu.xy-.5))*r;\n        ao += abs(z-T(xy))/r;\n    }\n    \n    vec3 color = vec3(edge+ao);\n    \n    // dots\n    //float screen = iResolution.x/1200.;\n    //color += smoothstep(.05,-.05,abs(length(frame.xy*20.*screen)-.2)-.05);\n    \n    fragColor = vec4(1.-color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 aspect = vec2(iResolution.x/iResolution.y,1);\n    vec4 frame = texture(iChannel0, uv);\n    \n    // timeline\n    float tick = mod(float(iFrame), 200.);\n    \n    // init\n    if (tick < 1.)\n    {\n        vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n        frame = vec4(p, max(abs(p.x),abs(p.y)), 0);\n    }\n    // iterate\n    else if (tick < 20.)\n    {\n        // previous coordinates\n        vec2 p = frame.xy;\n        \n        // seed\n        vec4 rng = hash41(tick+iDate.w+iDate.z+iDate.y+iDate.x);\n        \n        // rotate\n        p.xy *= rot(3.1415/2.);\n        \n        // translate\n        p.xy += (rng.xy-.5)*50./tick*max(0.1,rng.w);\n        \n        // keep result if closer\n        float dist = max(abs(p.x),abs(p.y));\n        if (dist < frame.z)\n        {\n            frame.xy = p.xy;\n            frame.z = dist;\n            frame.w = tick;\n        }\n    }\n    \n    fragColor = frame;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nmat2 rot (float a) { float c=cos(a),s=sin(a);return mat2(c,-s,s,c); }\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}