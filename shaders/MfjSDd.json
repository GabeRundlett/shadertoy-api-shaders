{
    "Shader": {
        "info": {
            "date": "1707027350",
            "description": "for Time Travelers on twitch. I used techniques from evvvvil and shane to create a fractal based on the volkswagen logo. I explain stuff and play good music.\nUse mouse to look around.",
            "flags": 32,
            "hasliked": 0,
            "id": "MfjSDd",
            "likes": 28,
            "name": "Volkswagen Fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "\n/*\nParty for Time Travelers on twitch. \nI used techniques from evvvvil and shane to \ncreate a fractal based on the volkswagen logo. \n\nI explain stuff and play good music too.\n \nUse mouse to look around. \nHere is the video on youtube: \nhttps://youtu.be/F0ESRoTFDX8\n\n*/\n\n\nfloat glow = 0.;\n\nvec3 path(in float z){ \n    float tt=mod(iTime,62.82);\n    vec3 ro=vec3(0., 2., -15.+iTime*2.);\n     //ro=vec3(0.,2.,-10.);\n    return ro;\n}\n\nvec3 globalP = vec3(0.);\nvec2 object(vec3 p){\n     ///float a = mix(PI*iTime*2.,PI*0.75*2.,clamp(iTime,0.,1.));\n     //p.zx *= rot(iTime);\n     \n     //Black Block\n     vec2 t = vec2(sdCappedCylinder(p.xzy, 0.5,4.),1.);\n     vec2 h = vec2(sdCappedCylinder(p.xzy, 0.6,3.7),0.);\n     addH;\n     h = vec2(sdCappedCylinder(p.xzy, 1.,3.1),1.);\n     //addH;\n     h.x = smax(h.x,-sdCappedCylinder(p.xzy-vec3(0.,0.,0.), 1.6,2.6),0.1);\n     addH;\n     \n     \n     //the top triangle thing\n     vec3 rp = p;\n     rp.x = abs(rp.x)-0.3;\n     rp.y -= 1.;\n     rp.xy *= rot(0.45);\n     h = vec2(roundedSdBox(rp,vec3(0.25,2.,1.),0.1),1.);\n     //addH;\n     \n     //the small bottom triangle thing\n     rp = p;\n     rp.x = abs(rp.x)-0.3;\n     rp.y += 1.;\n     rp.xy *= rot(-0.45);\n     h.x = smin(h.x,roundedSdBox(rp,vec3(0.25,2.,1.),0.1), 0.1);\n     \n     //cut two small triangle things with a small center box\n     h.x = smax(h.x,-roundedSdBox(p,vec3(0.5,.05,2.),0.1), 0.1);\n     \n     \n     //cut of the small bottom triangle by wings\n     rp = p;\n     rp.x = abs(rp.x)-2.3;\n     rp.y += 1.;\n     rp.xy *= rot(0.45);\n    \n     h.x = smax(h.x,-roundedSdBox(rp,vec3(0.25,1.8,2.),0.1),0.1);\n     \n     addH;\n     \n     //the large bottome wings \n     rp = p;\n     rp.x = abs(rp.x)-1.5;\n     rp.y += 1.;\n     rp.xy *= rot(0.45);\n     rp.y -= .7;\n     h = vec2(roundedSdBox(rp,vec3(0.25,1.9,1.),0.1),1.);\n     addH;\n     \n     //h = vec2(roundedSdBox(abs(p.xzy)-vec3(0.5,0.,0.5),vec3(0.1,100.9,0.1),0.1),2.);\n     //addH;\n   //glow += g;\n     return t;\n}\n\nfloat angle = 0.93;\nvec2 map(vec3 p){\n    //angle = mmm.y;\n    vec3 rp = p;\n    rp.zx *= rot(iTime);\n    vec2 t0 = vec2(object(rp));\n    vec3 op = p;\n    p.xz = mod(p.xz,30.)-15.;\n    //globalP = op;\n    for(int i=0;i<5;i++){//3,4 or 5 are all good bros\n    \t\n        p.xz*=rot(0.5*float(i));\n        p.xy*=rot((angle)*float(i));\n        //p=abs(abs(p)-0.1)-vec3(4.8,5.,5.5);\n       // p=p.yxz;\n       //p=abs(p)-vec3(4.,5.2,3.9);//this one is cool\n    p=abs(p)-vec3(3.6,5.2,5.1);//this idk\n    p=abs(p)-vec3(4.8,5.,5.5);\n    }\n   // p.xy*=rot(3.5);\n   \n     p.zy *= rot(PI*0.5);\n     vec2 t = vec2(object(p));\n     vec2 h = vec2(length(op.xy-vec2(0.,2.5))-1.5,2.);\n     t.x = smax(t.x,-h.x,0.2);\n     t.x = mix(t0.x,t.x,clamp(pow((iTime-1.)*0.2,3.),0.,1.));\n     t.y = mix(t0.y,t.y, float(iTime > 5.));\n     \n     \n     return t;\n}\nvec2 mapUV(vec3 p,vec3 n){\n    p.xz = mod(p.xz,30.)-15.;\n    //globalP = op;\n    for(int i=0;i<5;i++){//3,4 or 5 are all good bros\n    \t\n        p.xz*=rot(0.5*float(i));\n        p.xy*=rot((angle)*float(i));\n        //p=abs(abs(p)-0.1)-vec3(4.8,5.,5.5);\n       // p=p.yxz;\n       //p=abs(p)-vec3(4.,5.2,3.9);//this one is cool\n    p=abs(p)-vec3(3.6,5.2,5.1);//this idk\n    p=abs(p)-vec3(4.8,5.,5.5);\n    }\n    n = n*0.5+0.5;\n    p = fract(p*0.3)-0.5;\n    return (p.xy*n.z + p.xz*n.y + p.yz*n.z)/(n.x+n.y+n.z);  \n    //return p;\n}\n\n\nvec2 trace(vec3 ro, vec3 rd){\n   \tvec2 t = vec2(0.),dist;\n    for(int i=0; i<96; i++)\n    {\n         dist = map(ro + rd*t.x);\n         \n         if(dist.x<0.01 || t.x > 70.){break;}\n         t.x += dist.x*0.95;\n         t.y = dist.y;\n       // glow += 0.1/(0.1+dist.x+20.)*float(dist.y>3.);\n       // glow += 0.001/exp(-dist.x*2.);\n    }\n return t;   \n}\n\n\nvec3 normal(vec3 p) {\n    vec2 e = vec2(.0001, 0);\n    vec3 n = map(p).x - \n        vec3(\n            map(p-e.xyy).x, \n            map(p-e.yxy).x,\n            map(p-e.yyx).x\n            );\n    \n    return normalize(n);\n}\n\nfloat calculateAO(in vec3 pos, in vec3 nor){\n\tfloat sca = 2.0, occ = 0.0;\n    for( int i=0; i<5; i++ ){\n    \n        float hr = 0.01 + float(i)*0.5/4.0;        \n        float dd = map(nor * hr + pos).x;\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\nfloat softShadow(vec3 ro, vec3 lp, float k){\n\n    // More would be nicer. More is always nicer, but not really affordable... Not on my slow test machine, anyway.\n    const int maxIterationsShad = 14; \n    \n    vec3 rd = lp - ro; // Unnormalized direction ray.\n\n    float shade = 1.;\n    float dist = .002;    \n    float end = max(length(rd), .001);\n    float stepDist = end/float(maxIterationsShad);\n    \n    rd /= end;\n\n    // Max shadow iterations - More iterations make nicer shadows, but slow things down. Obviously, the lowest \n    // number to give a decent shadow is the best one to choose. \n    for (int i = 0; i<maxIterationsShad; i++){\n\n        float h = map(ro + rd*dist).x;\n        //shade = min(shade, k*h/dist);\n        shade = min(shade, smoothstep(0., 1., k*h/dist)); // Subtle difference. Thanks to IQ for this tidbit.\n        // So many options here, and none are perfect: dist += min(h, .2), dist += clamp(h, .01, .2), \n        // clamp(h, .02, stepDist*2.), etc.\n        dist += clamp(h, .02, .25);\n        \n        // Early exits from accumulative distance function calls tend to be a good thing.\n        if (h<0. || dist>end) break; \n        //if (h<.001 || dist > end) break; // If you're prepared to put up with more artifacts.\n    }\n\n    // I've added 0.5 to the final shade value, which lightens the shadow a bit. It's a preference thing. \n    // Really dark shadows look too brutal to me.\n    return min(max(shade, 0.) + .25, 1.); \n}\nvec2 getUV(vec3 p, vec3 n){\n   n = n*0.5+0.5;\n   return (p.xy*n.z + p.xz*n.y + p.yz*n.z)/(n.x+n.y+n.z);  \n}\n\nvec3 lighting(vec3 sp, vec3 sn, vec3 lp, vec3 rd, float id){\n    vec3 color;\n   // sn = normalize(sn);//\n    //vector from hit position to light position\n    vec3 lv = lp - sp;\n    //length of that vector\n    float ldist = max(length(lv), 0.001);\n    //direction of that vector\n    vec3 ldir = lv/ldist;\n    //attenuation\n    float atte = 1.0/(1. + 0.02*ldist*ldist );\n    //diffuse color\n    float diff = max(dot(ldir, sn),0.);\n    //specular reflection\n    float spec = pow(max(dot(reflect(-ldir, sn), -rd), 0.0), 10.);\n    //fresnel\n    float fres = pow(max(dot(rd, sn) + 1., 0.0), 1.);\n\t//ambient occlusion\n    float ao = calculateAO(sp, sn);\n    //reflecton\n    vec3 refl = reflect(rd, sn);\n    //id for random tile color\n    //sp.yz*=rot(+iTime)*float(id<1.);\n    float sh = 1.;//softShadow(sp,lp,16.);\n    float rndTile = rnd(floor(sp.xz));\n    \n    //color options\n    float rough = 0.6;\n    \n    float tex = texture(iChannel1,mapUV(sp,sn)).b;\n                //rough = smoothstep(0.6,0.1,tex)*0.2;\n                vec3 color2 = vec3(0.,0.2,0.99);//-tex*0.1;\n    if(id > 0.){\n                \n                color2 = mix(vec3(0.99),vec3(0.5),tex*0.5*float(iTime > 5.));\n                }\n    if(id > 1.){\n                \n                color2 = vec3(0.,0.5,0.9)-tex*0.1;\n                }\n    //getting reflected and refracted color froma cubemap, only refl is used\n    vec4 reflColor = texture(iChannel0, refl);\n    //orage specular\n    vec3 hotSpec = vec3(0.9,0.5, 0.2);\n    //apply color options and add refl/refr options\n    color = color2*0.1+(diff*color2*2. +  spec*hotSpec +reflColor.xyz*rough )*atte;\n    color = clamp(color,0.,1.);\n    //apply ambient occlusion and return.\n    return color*ao*(clamp(sh,0.9,1.));   \n}\nmat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) - a);\treturn mat2(v, -v.y, v.x); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n    //fisheye\n\t//uv = normalize(uv) * tan(asin(length(uv) *1.));\n    \n\t//Camera Setup.\n\tvec3 lk = path(0.);//vec3(0, 3.7, iTime*6.);  \n    //lk.xy += path(lk.z);\n\tvec3 ro = lk + vec3(0, .05, -.25);\n \tvec3 lp = ro + vec3(0, 3.75, 5);\n    vec2 m = (iMouse.xy - iResolution.xy*.5)/iResolution.y;\n    //camera\n    float FOV = 1.57;\n    vec3 fwd = normalize(lk-ro);\n    vec3 rgt = normalize(vec3(fwd.z, 0., -fwd.x )); \n    vec3 up = cross(fwd, rgt); \n    vec3 rd = normalize(fwd + FOV*uv.x*rgt + FOV*uv.y*up);    \n\t\n    if(iMouse.z < 0.5){\n        //rd.xy *= rot( path(lk.z).z/128.);\n        //rd.xz *= rot( lk.z/64.);\n    }\n    else{\n        rd.yz *= rot(-m.y*2.);\n        rd.xz *= rot(-m.x*4.);\n    }\n    \n    //distance to closest hit\n    vec2 t = trace(ro, rd);\n    //normalized distance\n    float far = smoothstep(0.0, 1.0, t.x/60.);\n    //hit point\n    vec3 sp = ro + rd*t.x;\n    //normal\n    vec3 sn = normal(sp);\n    \n    vec4 cubeColor = texture(iChannel0, rd);\n    //lighting\n    vec3 color = lighting(sp, sn, lp, rd, t.y);\n    /*\n    if(t.y < 2.5){\n        //reflection based on shanes reflection shader\n        vec3 refRay = reflect(rd, sn);\n        \n        //trace reflection\n        vec2 rt = rtrace(sp+sn*0.01, refRay);\n\n        //relection hit point\n        vec3 rsp = (sp+refRay*0.01) + refRay*rt.x;\n\n        //reflection surfact normal\n        vec3 rsn = normal(rsp);\n        \n        float tex = texture(iChannel1,mapUV(sp,sn)).r;\n        float rough = smoothstep(0.6,0.1,tex);\n                \n        //add reflection lighting\n        color += lighting(rsp, rsn, lp, refRay, t.y)*rough;\n    }*/\n    //accidental solar halo\n    vec3 sky = vec3(.0);//mix(vec3(0.9, 0.5, 0.2)*4., vec3(0.0)-0.4, pow(abs(rd.y), 1./3.))*(1./pow(abs(length(rd.xy)-0.4), 1./3.))/8.;\n    //*(2.+mix(vec3(0.,0.7,0.99),vec3(0.9,0.45,0.3),pow((sin(sp.y)+sin(sp.z))+2.,.3)));\n    //add cube color\n    //sky += cubeColor.xyz*0.1;\n    \n   // color += mix(vec3(0.,0.7,0.99),vec3(0.9,0.45,0.3),sin(sp.z+sp.y)*0.4+0.5)*glow;\n   // color = clamp(color,0.,1.);\n    color +=glow;\n    color = clamp(color,0.,1.);\n    color = mix(color, sky, far);\n    \n    \n    \n    color = pow(color,vec3(0.65));\n    \n    //naive vignette\n    //float vig = 1.0-smoothstep(1.0,3.5, length(uv));\n    //color.xyz *= mix( 0.8, 1.0, vig);\n    //\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926\n#define addH t = t.x < h.x ? t : h;\n#define mmm (iMouse.xy/iResolution.xy)\n\nfloat rnd(vec2 p){\n    vec2 seed = vec2(13.234, 72.1849);\n    return fract(sin(dot(p,seed))*43251.1234);    \n}\nfloat rb(vec3 p, vec3 b, float r){\n    return length(max(abs(p)-b,0.0))-r;   \n}\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat roundedSdBox(vec3 p, vec3 s, float r) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.) - r;\n}\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - 0.08;\n}\nmat2 rot(float a){\n     float c = cos(a),s = sin(a);\n     return mat2(c, -s, s, c);\n}\n\n//IQ Smooth funktionen\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\n\n\n        ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define LEVELS 3.\n#define EPS 2./iResolution.y\n#define EPS_N 10./iResolution.y\n\n#define SCALE 3.\n\n/*\n\nThe checkerboard shifting: Deciding which of the two\ncircles in a cell will be on top and below. You start\nwith always the upper right circle ontop and \nthe lower left below. Then view the cells as a checker\nboard and flip the order of all the white squares on \nthe board.\n\nThe part that almost had me was shading because you\nhave to rotate the coordinate systems back the other\nway but only after you do the checkerboard shifting and\ncreation of the circles. \n\nAnd THEN it still matters how you use atan since odd \nmultiples of the result will show a discontinuity at \nthe cell borders when passed through sin.\n\n*/\n\nvec2 concentricCircles(vec2 st, float r, float num, float type, vec2 checker,float scale){\n    float d1 = \n            smax(dot(st,vec2(0.7,-0.7)),\n            smax(dot(st,vec2(-0.7,0.7)),\n            smax(dot(st,-vec2(0.7,0.7)),\n            smax(dot(st,vec2(0.7,0.7)),\n            smax(abs(st.x),\n            abs(st.y),0.1),0.1),0.1),0.1),0.1);\n    float d2 = length(st);\n    \n    float d = type < 0.50 \n              ? mix(d1,d2,sin(iTime*1.9)*0.5+0.5)\n              : mix(d2,d1,cos(iTime*1.99 + type)*0.5+0.5);\n    //d *=  length(st)*cos(atan(st.y,st.x)*3.+PI*0.5)*0.21;\n    float cutoff = smoothstep(r+EPS,r-EPS,d*(1.0+0.02*(scale-0.5)));\n    float circles = sin(d*num*PI);//-0.1*(mod(checker.x+1.,2.)*mod(checker.y,2.));\n    return vec2(smoothstep(0.,1.,abs(circles*cutoff))+0.2*cutoff,d);\n}\n\nfloat overlappingConcentricCircles(vec2 st, float r, float num, vec2 checker, float a, float scale){\n    float type = a;\n    vec2 sp1 = st-vec2(1.,1.)+vec2(2.,2.)*checker;\n    vec2 group_1 = concentricCircles(sp1, r, num,type,checker,scale);\n    //sp1 = st*rot(-a)-vec2(1.,1.)+vec2(2.,2.)*checker;\n    sp1 *= rot(-a);\n    float light_1 = 0.; //sin(atan(sp1.y,sp1.x)*2.+iTime)*0.5+0.5;\n   // group_1.x -= smoothstep(0.8,0.9,group_1.y);\n    \n    \n    vec2 sp2 = st+vec2(1.,1.)-vec2(2.,2.)*checker;\n    vec2 group_2 = concentricCircles(sp2, r, num, type,checker,scale);\n    //sp2 = st*rot(-a)+vec2(1.,1.)-vec2(2.,2.)*checker;\n    sp2 *= rot(-a);\n    float light_2 = 0.;//sin(atan(sp2.y,sp2.x)*2.+iTime)*0.5+0.5;\n    //float shadow = 0.;//(1.-smoothstep(0.5,0.6,group_2.y*0.25));\n    \n    float total = mix(group_1.x-light_1*0.2, group_2.x-light_2*0.2, smoothstep(0.1,0.2,group_2.x));\n    \n    \n    return total;\n}\nfloat quadTree(vec2 st){\n\n    float s = 1.;\n    float seed;\n    vec2 fr, fl;\n    float circle_num =  4.;\n    for(float i = 0.; i <= LEVELS; i ++){\n        fr = fract(st)-0.5;\n        fl = floor(st);\n      /*  if(abs(fr.x)>0.5-0.02*s || abs(fr.y) > 0.5-0.04*s){\n            return smoothstep(0.5,0.5-0.04*s,max(abs(fr.x),abs(fr.y)));\n        } */\n        seed = rnd(fl); \n        seed = seed + 0.2*mod(fl.x,2.) + 0.2*mod(fl.y,2.);\n        if( seed > 0.7 || LEVELS - i == 1.){\n            float a =  (floor(rnd(fl*325.2435)*4.)/4.)*PI*2.;\n            fr *= rot(a);\n            return overlappingConcentricCircles(fr*2.,\n                                                2., \n                                                circle_num,\n                                                mod(fl,2.),\n                                                a,\n                                                s);\n        }\n        \n        s *= 2.;\n        st *= 2.;\n        circle_num /= 2.;\n    }\n    return 1.;\n}\nvec2 getNormal(vec2 p){\n    return vec2(quadTree(p+vec2(EPS_N,0.))-quadTree(p-vec2(EPS_N,0.)),\n                quadTree(p+vec2(0.,EPS_N))-quadTree(p-vec2(0.,EPS_N))\n                );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n    //vec3\n    // Time varying pixel color\n    vec3 col;// = vec3(quadTree(uv*8.));\n    vec3 ld1 = normalize( vec3(1., sin(iTime)*0.9, -1.) - vec3(uv*SCALE, 0.) );\n    vec3 ld2 = normalize( vec3(-1., -.9, -1.) - vec3(uv*SCALE, 0.) );\n    vec3 rd = normalize(vec3(uv*SCALE,1.));\n    \n    //uv.xy += vec2(iTime*0.075,iTime*0.05);\n    //col = vec3(concentricCircles(uv*2.,1., 12.,1.,vec2(1.,1.)).x);\n    //col = vec3(quadTree(uv*5.));\n    float d = quadTree(uv*SCALE);\n    vec3 n = normalize(vec3(-getNormal(uv*SCALE),-d*.25));\n    float spec = pow(max(dot(reflect(n,-ld1),rd),0.),10.)*1.;\n    float spec2 = pow(max(dot(reflect(n,-ld2),rd),0.),10.)*3.;\n    float diff = max(dot(n,ld1),0.)*1.4;\n    float diff2 = max(dot(n,ld2),0.)*1.4;\n    \n    float fres = pow(max(0., dot(n, normalize(vec3(uv*SCALE, 1.)))),200.)*10.;\n    \n    float stripes = smoothstep(0.25,0.255,abs(fract(uv.x*75.-uv.y*90.)-0.5));\n    col = mix(vec3(0.,0.,0.), vec3(0.7,0.1,0.1)*1.3,  smoothstep(0.59,.6,d)); \n    //col = mix(col, vec3(0.7,0.13,0.4), stripes*1.9);\n    \n    //OR vec3(0.9,0.,0.);\n    col = mix(col, vec3(0.15,0.13,0.35)*2.7-stripes*0.2, d*2.);\n   \n  //  col = mix(col, vec3(0.1,0.6,0.1), smoothstep(.93,.65,d));\n    col = mix(col, vec3(0.45,0.3,0.1)*0.8, smoothstep(0.3,0.299,d));\n    \n    col = mix(col, vec3(0.), smoothstep(.1,1.9,d*0.9));\n //   col = pow(col, vec3(1.0));\n    //col = mix(col, vec3(cos(vec3(1.,2.,4.)/2. + uv.x*0.06.1 + (uv.y-0.5)*1.6 + d*1.937*PI)) + stripes*0.2, d*.9);\n    \n    col = col*0.5\n          + vec3(1.3,0.7,0.1)*(diff*0.15 +spec*0.3) \n          + vec3(0.2,0.9,0.6)*(diff2*0.15 +spec2*0.3);\n    col *= 1.36;\n    col += 0.4*texture(iChannel0,reflect(rd,n)).xyz;\n    col = mix(col, vec3(0.0,0.0,0.0), smoothstep(.3,.2,abs(d-0.6)));\n   // col.xz *= rot(iTime);\n    col = pow(col, vec3(1.));\n    // Output to screen\n    //col = vec3(stripes);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}