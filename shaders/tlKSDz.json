{
    "Shader": {
        "info": {
            "date": "1582556959",
            "description": "Background video for Chaosflux Infobeamer  (www.chaosflux.de/en/) (info-beamer.com/)\nIn the rendered version gaussian blur is added with an ffmpeg filter\nLoops in 60 seconds",
            "flags": 0,
            "hasliked": 0,
            "id": "tlKSDz",
            "likes": 2,
            "name": "Chaosflux Background",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "svg",
                "chaosflux"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "//The logo is generated with a script from svg (see https://www.shadertoy.com/view/Wtt3Wl)\n\n#define ZERO min(0,iFrame)\n\nfloat border;\n\n//hash functions from https://www.shadertoy.com/view/4djSRW\n\nvec2 hash21(float p)\n{\n\tvec2 p2  = fract(p * vec2(5.3983, 5.4427));\n\tp2 += dot(p2.yx, p2.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec2(p2.x * p2.y * 95.4337, p2.x * p2.y * 97.597));\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 19.19;\n    p *= p + p;\n    return fract(p);\n}\n\n// Modified from http://tog.acm.org/resources/GraphicsGems/gems/Roots3And4.c\n// Credits to Doublefresh for hinting there\nint solve_quadric(vec2 coeffs, inout vec2 roots){\n\n\t// normal form: x^2 + px + q = 0\n\tfloat p = coeffs[1] / 2.;\n\tfloat q = coeffs[0];\n\n\tfloat D = p * p - q;\n\n\tif (D < 0.){\n\t\treturn 0;\n\t}\n\telse{\n\t\troots[0] = -sqrt(D) - p;\n\t\troots[1] = sqrt(D) - p;\n\n\t\treturn 2;\n\t}\n}\n\n//From Trisomie21\n//But instead of his cancellation fix i'm using a newton iteration\nint solve_cubic(vec3 coeffs, inout vec3 r){\n\n\tfloat a = coeffs[2];\n\tfloat b = coeffs[1];\n\tfloat c = coeffs[0];\n\n\tfloat p = b - a*a / 3.0;\n\tfloat q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n\tfloat p3 = p*p*p;\n\tfloat d = q*q + 4.0*p3 / 27.0;\n\tfloat offset = -a / 3.0;\n\tif(d >= 0.0) { // Single solution\n\t\tfloat z = sqrt(d);\n\t\tfloat u = (-q + z) / 2.0;\n\t\tfloat v = (-q - z) / 2.0;\n\t\tu = sign(u)*pow(abs(u),1.0/3.0);\n\t\tv = sign(v)*pow(abs(v),1.0/3.0);\n\t\tr[0] = offset + u + v;\t\n\n\t\t//Single newton iteration to account for cancellation\n\t\tfloat f = ((r[0] + a) * r[0] + b) * r[0] + c;\n\t\tfloat f1 = (3. * r[0] + 2. * a) * r[0] + b;\n\n\t\tr[0] -= f / f1;\n\n\t\treturn 1;\n\t}\n\tfloat u = sqrt(-p / 3.0);\n\tfloat v = acos(-sqrt( -27.0 / p3) * q / 2.0) / 3.0;\n\tfloat m = cos(v), n = sin(v)*1.732050808;\n\n\t//Single newton iteration to account for cancellation\n\t//(once for every root)\n\tr[0] = offset + u * (m + m);\n\tr[1] = offset - u * (n + m);\n\tr[2] = offset + u * (n - m);\n\n\tvec3 f = ((r + a) * r + b) * r + c;\n\tvec3 f1 = (3. * r + 2. * a) * r + b;\n\n\tr -= f / f1;\n\n\treturn 3;\n}\n\nfloat cubic_bezier_normal_iteration(float t, vec2 a0, vec2 a1, vec2 a2, vec2 a3){\n\t//horner's method\n\tvec2 a_2=a2+t*a3;\n\tvec2 a_1=a1+t*a_2;\n\tvec2 b_2=a_2+t*a3;\n\n\tvec2 uv_to_p=a0+t*a_1;\n\tvec2 tang=a_1+t*b_2;\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat cubic_bezier_dis_approx_sq(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\tvec2 a3 = (-p0 + 3. * p1 - 3. * p2 + p3);\n\tvec2 a2 = (3. * p0 - 6. * p1 + 3. * p2);\n\tvec2 a1 = (-3. * p0 + 3. * p1);\n\tvec2 a0 = p0 - uv;\n\n\tfloat d0 = 1e38;\n\n\tfloat t;\n\tvec3 params=vec3(0,.5,1);\n\n\tfor(int i=ZERO;i<3;i++){\n\t\tt=params[i];\n\t\tfor(int j=ZERO;j<3;j++){\n\t\t\tt=cubic_bezier_normal_iteration(t,a0,a1,a2,a3);\n\t\t}\n\t\tt=clamp(t,0.,1.);\n\t\tvec2 uv_to_p=((a3*t+a2)*t+a1)*t+a0;\n\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t}\n\n\treturn d0;\n}\n\n//segment_dis_sq by iq\nfloat length2( vec2 v ) { return dot(v,v); }\n\nfloat segment_dis_sq( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length2( pa - ba*h );\n}\n\nint segment_int_test(vec2 uv, vec2 p0, vec2 p1){\n\tp0-=uv;\n\tp1-=uv;\n\n\tint ret;\n\t\n\tif(p0.y*p1.y<0.){\n\t\tvec2 nor=p0-p1;\n\t\tnor=vec2(nor.y,-nor.x);\n\t\t\n\t\tfloat sgn;\n\t\t\n\t\tif(p0.y>p1.y){\n\t\t\tsgn=1.;\n\t\t}\n\t\telse{\n\t\t\tsgn=-1.;\n\t\t}\n\n\t\tif(dot(nor,p0)*sgn<0.){\n\t\t\tret=0;\n\t\t}\n\t\telse{\n\t\t\tret=1;\n\t\t}\n\t}\n\telse{\n\t\tret=0;\n\t}\n\n\treturn ret;\n}\n\nint cubic_bezier_int_test(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\n\tfloat cu = (-p0.y + 3. * p1.y - 3. * p2.y + p3.y);\n\tfloat qu = (3. * p0.y - 6. * p1.y + 3. * p2.y);\n\tfloat li = (-3. * p0.y + 3. * p1.y);\n\tfloat co = p0.y - uv.y;\n\n\tvec3 roots = vec3(1e38);\n\tint n_roots;\n\n\tint n_ints=0;\n\n\tif(uv.x<min(min(p0.x,p1.x),min(p2.x,p3.x))){\n\t\tif(uv.y>=min(p0.y,p3.y) && uv.y<=max(p0.y,p3.y)){\n\t\t\tn_ints=1;\n\t\t}\n\t}\n\telse{\n\t\tif(abs(cu) < .0001){\n\t\t\tn_roots = solve_quadric(vec2(co/qu,li/qu),roots.xy);\n\t\t}\n\t\telse{\n\t\t\tn_roots = solve_cubic(vec3(co/cu,li/cu,qu/cu),roots);\n\t\t}\n\n\t\tfor(int i=ZERO;i<n_roots;i++){\n\t\t\tif(roots[i] >= 0. && roots[i] <= 1.){\n\t\t\t\tfloat x_pos = -p0.x + 3. * p1.x - 3. * p2.x + p3.x;\n\t\t\t\tx_pos = x_pos * roots[i] + 3. * p0.x - 6. * p1.x + 3. * p2.x;\n\t\t\t\tx_pos = x_pos * roots[i] + -3. * p0.x + 3. * p1.x;\n\t\t\t\tx_pos = x_pos * roots[i] + p0.x;\n\n\t\t\t\tif(x_pos > uv.x){\n\t\t\t\t\tn_ints++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn n_ints;\n}\n\nfloat path0_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[26] p=vec2[](vec2(-0.10513741178015773,0.18225451483640648),\n\t                  vec2(-0.11508189293211292,0.16479023569220425),\n\t                  vec2(-0.11508189293211292,0.16479023569220425),\n\t                  vec2(-0.05226020912336337,0.1277696341578051),\n\t                  vec2(-0.03668564162604742,0.07191650538101095),\n\t                  vec2(-0.020574983549088138,0.014140812609831214),\n\t                  vec2(-0.03874981615009546,-0.05058622819157852),\n\t                  vec2(-0.005903441805151979,-0.12697315364094866),\n\t                  vec2(0.011146458769719193,-0.16662410194662905),\n\t                  vec2(0.04289724510756864,-0.18487622572225562),\n\t                  vec2(0.06947080013727487,-0.19243802290398837),\n\t                  vec2(0.09604435516698105,-0.2000000000000005),\n\t                  vec2(0.1185958365136935,-0.19763880499136252),\n\t                  vec2(0.1185958365136935,-0.19763880499136252),\n\t                  vec2(0.11652259430994151,-0.17764439132975135),\n\t                  vec2(0.11652259430994151,-0.17764439132975135),\n\t                  vec2(0.09767716721368143,-0.1795680348098153),\n\t                  vec2(0.07498770960575862,-0.17311127113486824),\n\t                  vec2(0.05229823400640781,-0.16665468737420056),\n\t                  vec2(0.026955562522236406,-0.15254508989192175),\n\t                  vec2(0.012544806526930286,-0.11903173732874979),\n\t                  vec2(-0.017530186242764697,-0.04908970121185751),\n\t                  vec2(0.0007400549008424999,0.01254785157611735),\n\t                  vec2(-0.017323788580930685,0.07732796709008026),\n\t                  vec2(-0.03592372264234721,0.14403064659842876),\n\t                  vec2(-0.10513741178015773,0.18225451483640648));\n\n\tivec2[2] seg=ivec2[](ivec2(0,1),\n\t                     ivec2(13,14));\n\n\tivec4[8] c_bez=ivec4[](ivec4(1,2,3,4),\n\t                       ivec4(4,5,6,7),\n\t                       ivec4(7,8,9,10),\n\t                       ivec4(10,11,12,13),\n\t                       ivec4(14,15,16,17),\n\t                       ivec4(17,18,19,20),\n\t                       ivec4(20,21,22,23),\n\t                       ivec4(23,24,25,0));\n\n\tif(all(lessThan(uv,vec2(0.1185958365136935,0.18225451483640648)+border/2.)) && all(greaterThan(uv,vec2(-0.11508189293211292,-0.2000000000000005)-border/2.))){\n\t\tfor(int i=ZERO;i<2;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<8;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat path1_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[20] p=vec2[](vec2(0.1157846758911721,0.10522871377931982),\n\t                  vec2(0.1157846758911721,0.10522871377931982),\n\t                  vec2(0.07492137521078111,0.09615221827560297),\n\t                  vec2(0.0326445959822444,0.07536006469717456),\n\t                  vec2(-0.009632165254864348,0.05456791111874716),\n\t                  vec2(-0.055505466920286024,0.021423562743529884),\n\t                  vec2(-0.06061566216776037,-0.029355623513178133),\n\t                  vec2(-0.0700863318671821,-0.12346428544120289),\n\t                  vec2(-0.019045622213296524,-0.18474254941233453),\n\t                  vec2(-0.019045622213296524,-0.18474254941233453),\n\t                  vec2(-0.0036545133071348183,-0.1718462938333055),\n\t                  vec2(-0.0036545133071348183,-0.1718462938333055),\n\t                  vec2(-0.04929437619446233,-0.11754204709166494),\n\t                  vec2(-0.040621266497577364,-0.0313586091906533),\n\t                  vec2(-0.03665957204689839,0.008008254467156873),\n\t                  vec2(0.0017859865667003067,0.037784607523743366),\n\t                  vec2(0.041534898197753835,0.05733355342846704),\n\t                  vec2(0.08128379183737937,0.07688249933319072),\n\t                  vec2(0.12017710311921934,0.0856207559908058),\n\t                  vec2(0.12017712111064728,0.0856207559908058));\n\n\tivec2[2] seg=ivec2[](ivec2(9,10),\n\t                     ivec2(19,0));\n\n\tivec4[6] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                       ivec4(3,4,5,6),\n\t                       ivec4(6,7,8,9),\n\t                       ivec4(10,11,12,13),\n\t                       ivec4(13,14,15,16),\n\t                       ivec4(16,17,18,19));\n\n\tif(all(lessThan(uv,vec2(0.12017712111064728,0.10522871377931982)+border/2.)) && all(greaterThan(uv,vec2(-0.0700863318671821,-0.18474254941233453)-border/2.))){\n\t\tfor(int i=ZERO;i<2;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<6;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat path2_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[32] p=vec2[](vec2(0.10956498526277197,0.19999999999999948),\n\t                  vec2(0.10956498526277197,0.19999999999999948),\n\t                  vec2(0.037350325937207385,0.17016751368810307),\n\t                  vec2(0.017323779585216685,0.09714660450028534),\n\t                  vec2(0.007738234618116232,0.06219573684118168),\n\t                  vec2(0.007829828977983476,0.038356375105080734),\n\t                  vec2(0.007906382504055958,0.01646638459106055),\n\t                  vec2(0.007983745644387759,-0.005423785837239025),\n\t                  vec2(0.008066506213114787,-0.02529927615987463),\n\t                  vec2(-0.0010893314880125555,-0.05669413807791444),\n\t                  vec2(-0.009436958261236469,-0.08531688077215802),\n\t                  vec2(-0.03893978763817994,-0.11694311245407363),\n\t                  vec2(-0.0668002155373075,-0.14029112829192678),\n\t                  vec2(-0.0946606254450071,-0.16363896421550156),\n\t                  vec2(-0.12017712111064728,-0.17901479839930393),\n\t                  vec2(-0.12017712111064728,-0.17901479839930393),\n\t                  vec2(-0.10981096586531387,-0.19623313472296214),\n\t                  vec2(-0.10981096586531387,-0.19623313472296214),\n\t                  vec2(-0.08302986891895385,-0.18012001182036896),\n\t                  vec2(-0.05386887667370899,-0.1556820752752355),\n\t                  vec2(-0.02470786643703615,-0.13124431864438244),\n\t                  vec2(0.0075665963951476066,-0.09878454410396154),\n\t                  vec2(0.018202265030826132,-0.06231645932295521),\n\t                  vec2(0.028029452867181538,-0.028620673680024494),\n\t                  vec2(0.02804769617515748,-0.005384744438511793),\n\t                  vec2(0.02797105269194502,0.016536551160200502),\n\t                  vec2(0.027893689551613216,0.0384578467589128),\n\t                  vec2(0.027741482070867428,0.059099771913672515),\n\t                  vec2(0.03672078788061441,0.09184057255920483),\n\t                  vec2(0.053824069022314486,0.15420264015210025),\n\t                  vec2(0.11736594249669793,0.18144633989136022),\n\t                  vec2(0.11736596048812586,0.18144633989136022));\n\n\tivec2[2] seg=ivec2[](ivec2(15,16),\n\t                     ivec2(31,0));\n\n\tivec4[10] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(3,4,5,6),\n\t                        ivec4(6,7,8,9),\n\t                        ivec4(9,10,11,12),\n\t                        ivec4(12,13,14,15),\n\t                        ivec4(16,17,18,19),\n\t                        ivec4(19,20,21,22),\n\t                        ivec4(22,23,24,25),\n\t                        ivec4(25,26,27,28),\n\t                        ivec4(28,29,30,31));\n\n\tif(all(lessThan(uv,vec2(0.11736596048812586,0.19999999999999948)+border/2.)) && all(greaterThan(uv,vec2(-0.12017712111064728,-0.19623313472296214)-border/2.))){\n\t\tfor(int i=ZERO;i<2;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<10;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat logo_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tif(all(lessThan(uv,vec2(0.12017712111064728,0.2)+border/2.)) && all(greaterThan(uv,vec2(-0.12017712111064728,-0.2)-border/2.))){\n\t\tdis_sq=min(dis_sq,path0_dis_sq(uv));\n\t\tdis_sq=min(dis_sq,path1_dis_sq(uv));\n\t\tdis_sq=min(dis_sq,path2_dis_sq(uv));\n\t}\n\n\treturn dis_sq;\n}\n\nfloat logo_dis(vec2 uv){\n\tfloat dis_sq=logo_dis_sq(uv);\n\tfloat dis=sign(dis_sq)*sqrt(abs(dis_sq));\n\n\treturn dis;\n}\n\nmat2 rot(float t){\n\treturn mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\tuv-=.5;\n\tuv.x*=iResolution.x/iResolution.y;\n\n\tborder=2./iResolution.y;\n\n\tconst vec3 bg_col=vec3(0);\n\n\tvec3 color=bg_col;\n\n\tconst float pi=3.14159265358979;\n\n\tconst vec3 logo_color_dark=vec3(.185);\n\tconst vec3 logo_color_light=vec3(1);\n\n\tfloat dis_sq=1e38;\n\n\tconst vec2 grid_size=vec2(.2,.2);\n\n\tconst float loop_time=60.;\n\n\tfloat t0 = iTime;\n\tfloat t1 = mod(t0/loop_time*2.*pi,2.*pi);\n\tfloat t2 = .4*cos(t1);\n\n\tfloat zoom1=4.*exp(-1.3+.3*sin(t1));\n\tfloat z_val=(1.-(1.+.2*cos(t1))*uv.y+.2*sin(t1)*uv.x);\n\tzoom1/=z_val;\n\n\tconst float zoom2=4.;\n\n\tuv*=rot(t2);\n\n\tuv*=zoom1;\n\tborder*=zoom1;\n\n\tfloat veil=.875+.125*sin(mod(32.*uv.y+8.*uv.x,2.*pi));\n\tveil*=.875+.125*cos(mod(2.*uv.x+1.*uv.y,2.*pi));\n\n\tvec2 cell_index=floor(uv/grid_size+.5);\n\tvec2 cur_midpoint=cell_index*grid_size;\n\tuv-=cur_midpoint;\n\n\tif( mod(cell_index.x+cell_index.y,2.) == 0.){\n\t\tuv*=rot(pi/2.);\n\t}\n\n\tconst float light_speed=.1;\n\tconst int num_lights=7;\n\n\tvec3 logo_color=logo_color_dark;\n\tfor(int i=0;i<num_lights;i++){\n\t\tif(floor(.5+(hash21(1.4+floor(mod(t0*light_speed+float(i)/float(num_lights),loop_time*light_speed))+hash11(float(i)))*vec2(20.,11.)-vec2(11.,2.))) == cell_index){\n\t\t\t//fade in and out\n\t\t\t//float fade_param=smoothstep(0.,1.,1.-2.*abs(fract(t0*light_speed)-.5));\n\t\t\t//only fade in\n\t\t\tfloat fade_param=smoothstep(0.,.25,fract(t0*light_speed+float(i)/float(num_lights)));\n\t\t\tlogo_color=mix(logo_color_dark,logo_color_light,fade_param);\n\t\t}\n\t}\n\n\tuv*=zoom2;\n\tborder*=zoom2;\n\n\tfloat dis=logo_dis(uv);\n\n\tcolor=mix(logo_color,color,smoothstep(-border/2.,border/2., dis));\n\tcolor*=veil;\n\n\tfragColor=vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}