{
    "Shader": {
        "info": {
            "date": "1478631742",
            "description": " I tried to find circles distribution without intersections, but voronoi isn't good idea for animation.",
            "flags": 32,
            "hasliked": 0,
            "id": "4ldSz4",
            "likes": 22,
            "name": "Thousands of stars",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "circles",
                "space",
                "stars"
            ],
            "usePreview": 0,
            "username": "_A_",
            "viewed": 2433
        },
        "renderpass": [
            {
                "code": "\nvec3 Blur (vec2 uv)\n{\n    const int radius = 1;\n    \n    vec3 color = vec3(0.0);\n    float kernel = 0.0;\n    vec2 uvScale = 1.75 / iChannelResolution[0].xy;\n    \n    for (int y = -radius; y <= radius; ++y)\n    {\n        for (int x = -radius; x <= radius; ++x)\n        {\n            float k = 1.0 / pow( 2.0, abs(float(x)) + abs(float(y)) );\n            \n            color += texture( iChannel0, uv + vec2(x,y) * uvScale ).rgb * k;\n            kernel += k;\n        }\n    }\n    \n    return color / kernel;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //fragColor = texture( iChannel0, uv );\n    fragColor = vec4( Blur( uv ), 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat Hash11 (float a)\n{\n    return fract( sin(a) * 10403.9 );\n}\n\nvec2 Hash22 (vec2 p)\n{\n    vec2 q = vec2( dot( p, vec2(127.1,311.7) ), \n\t\t\t\t   dot( p, vec2(269.5,183.3) ) );\n    \n\treturn fract( sin(q) * 43758.5453 );\n}\n\nbool IsEven (int x)\n{\n    return x - (x / 2 * 2) == 0;\n}\n\nfloat Hash21 (vec2 p)\n{\n    return fract( sin( p.x + p.y * 64.0 ) * 104003.9 );\n}\n\nbool Hash1b (float x)\n{\n    return Hash11(x) > 0.5;\n}\n\n\nvec2 CenterOfVoronoiCell (vec2 local, vec2 global, float time)\n{\n    vec2 point = local + global;\n    return local +\n        \tvec2( IsEven( int(point.y) ) ? 0.5 : 0.0, 0.0 ) +\t\t// hex\n        \t(sin( time * Hash22( point ) * 0.628 ) * 0.5 + 0.5);\t// animation\n}\n\nfloat ValueOfVoronoiCell (vec2 coord)\n{\n    return Hash21( coord );\n}\n\n\nvec2 VoronoiCircles (in vec2 coord, float freq, float time, float radiusScale)\n{\n    const int radius = 1;\n    \n    vec2 point = coord * freq;\n    vec2 ipoint = floor( point );\n    vec2 fpoint = fract( point );\n    \n    vec2 center = fpoint;\n    vec2 icenter = vec2(0);\n    \n    float md = 2147483647.0;\n\tfloat mr = 2147483647.0;\n    \n\t// find nearest circle\n\tfor (int y = -radius; y <= radius; ++y)\n\tfor (int x = -radius; x <= radius; ++x)\n\t{\n        vec2 cur = vec2(x, y);\n\t\tvec2 c = CenterOfVoronoiCell( vec2(cur), ipoint, time );\n\t\tfloat d = dot( c - fpoint, c - fpoint );\n\n\t\tif ( d < md )\n\t\t{\n\t\t\tmd = d;\n\t\t\tcenter = c;\n\t\t\ticenter = cur;\n\t\t}\n\t}\n    \n\t// calc circle radius\n\tfor (int y = -radius; y <= radius; ++y)\n\tfor (int x = -radius; x <= radius; ++x)\n\t{\n        if ( x == 0 && y == 0 )\n            continue;\n        \n        vec2 cur = icenter + vec2(x, y);\n\t\tvec2 c = CenterOfVoronoiCell( vec2(cur), ipoint, time );\n\t\tfloat d = dot( c - fpoint, c - fpoint );\n\t\t\n\t\tif ( d < mr )\n\t\t\tmr = d;\n\t}\n    \n    md = sqrt( md );\n\tmr = sqrt( mr ) * 0.5 * radiusScale;\n    \n\tif ( md < mr )\n\t\treturn vec2( md / mr, ValueOfVoronoiCell( icenter + ipoint ) );\n\n\treturn vec2( 0.0, -2.0 );\n}\n\n\nvec3 Mix3 (vec3 color1, vec3 color2, vec3 color3, float a)\n{\n    if ( a < 0.5 )\n        return mix( color1, color2, a * 2.0 );\n    else\n        return mix( color2, color3, a * 2.0 - 1.0 );\n}\n\nvec3 StarColor (float value)\n{\n    return mix( vec3(1.0, 0.5, 0.0), vec3(0.0, 0.7, 1.0), value );\n}\n\nvec4 Star (vec2 value)\n{\n    if ( value.y < -1.0 )\n        return vec4( 0.0 );\n    \n    float alpha;\n    \n    if ( Hash1b( value.y ) )\n        alpha = 1.0 / (value.x * value.x * 16.0) - 0.07;\n    else\n        alpha = 1.0 / (value.x * 8.0) - 0.15;\n    \n    return clamp( vec4( Mix3( vec3(0.0), StarColor( value.y ), vec3(1.0), alpha ), alpha ), 0.0, 1.0 );\n}\n\n\nvec4 StarLayers (vec2 coord, float time)\n{\n    vec4 color = Star( VoronoiCircles( coord, 1.25, time * 0.07274, 0.5 ) );\n    color += Star( VoronoiCircles( coord + vec2(2.372), 10.0, time * 0.229 + 2.496, 0.75 ) );\n    color += Star( VoronoiCircles( coord + vec2(6.518), 30.0, time * 0.57 + 8.513, 0.9 ) ) * 0.85;\n    color += Star( VoronoiCircles( coord + vec2(3.584), 60.0, time + 2.649, 1.0 ) ) * 0.75;\n    color += Star( VoronoiCircles( coord + vec2(0.493), 60.0, time + 8.624, 1.0 ) ) * 0.75;\n    \n    return color;\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / min( iResolution.x, iResolution.y );\n    \n    uv += vec2(1.0) * iTime * 0.01;\n    \n    fragColor = StarLayers( uv, iTime + 412.54 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}