{
    "Shader": {
        "info": {
            "date": "1634415697",
            "description": "First attempt to visualize an animated phyllotaxis arrangement using shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsVSRw",
            "likes": 4,
            "name": "Animated Phyllotaxis 2D ",
            "published": 3,
            "tags": [
                "colors",
                "animated",
                "phyllotaxis"
            ],
            "usePreview": 0,
            "username": "mvaios",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "// First attempt to visualize a phyllotaxis arrangement using shader.\n// I am a beginner with the shaders, so the code might not be very optimal.\n\n// A tshirt and probably a mug with this design will be available in my store soon. \n// Feel free to check it out here:\n// https://threadhub.store/products/phyllotaxis-t-shirt\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x = uv.x * ratio + (iResolution.y - iResolution.x)/iResolution.y / 2.;\n    float time = iTime + 1.;\n    float c = 0.025;\n    vec2 center = vec2(0.5, 0.5);\n    vec2 _uv = uv - center;\n    float minDiff = 1.;\n    float index = 0.;\n    for(float i = 0.; i < 400.; i++) {\n        float angle = 137.5 * (i + (i / 2300.) * iTime / 20.);\n        float radius = c * sqrt(i);\n        float x = radius * cos(angle);\n        float y = radius * sin(angle);\n        \n        vec2 pos = vec2(x, y);\n        float diff = abs(distance(pos, _uv)) * 60.;\n        \n        if(diff < minDiff) {\n            minDiff = diff;\n            index = i + 1.;\n        }\n    }\n    \n    minDiff = smoothstep(0., .5, minDiff);\n    minDiff = minDiff * minDiff;\n    minDiff = 1. - minDiff;\n    float changeRate = .05;\n    float r = minDiff * (sin((time * 1. * index) * changeRate) + 1.);\n    float g = minDiff * (sin((time * 2. * index) * changeRate) + 1.);\n    float b = minDiff * (sin((time * 3. * index) * changeRate) + 1.);\n\n    fragColor = vec4(r, g, b, 1);\n    return;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}