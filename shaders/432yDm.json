{
    "Shader": {
        "info": {
            "date": "1727325394",
            "description": "I need to be more creative when making scenes.",
            "flags": 32,
            "hasliked": 0,
            "id": "432yDm",
            "likes": 10,
            "name": "More Path Tracing",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "dof",
                "pathtrace"
            ],
            "usePreview": 0,
            "username": "FifthStateOfMatter",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "vec3 ACES(vec3 x) {\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.1;\n    float d = 0.7;\n    float e = 0.12;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    // Concise recursion system borrowed from Poisson (starts in main in buffer A)\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    col.rgb /= col.a;\n    col.rgb = ACES(col.rgb);\n    fragColor = vec4(pow(col.rgb, vec3(1.0/2.2)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Borrowed hash and sampling from Poisson (https://www.shadertoy.com/user/Poisson)\n\nconst vec3 lDir = normalize(vec3(0, -5, -10));\nconst vec2 camDir = vec2(0, 0);\n\nstruct material {\n    vec3 col;\n    float emission;\n    float smoothness;\n    float specular;\n};\n\nfloat seed;\nvec2 hash22(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat hash1() {\n    return fract(sin(seed += 0.1) * 4568.7564);\n}\n\nvec2 hash2() {\n    return vec2(hash1(), hash1());\n}\n\nvec3 hash3() {\n    return vec3(hash1(), hash1(), hash1());\n}\n\nvec2 randomDir2D() {\n    vec2 curr;\n    while(true) {\n        curr = hash2() * 2.0 - 1.0;\n        if(length(curr) < 1.0){\n            return curr;\n        }\n    }\n}\n\nvec3 randomDir() {\n    vec3 d;\n    while(true) {\n        d = hash3() * 2.0 - 1.0;\n        if(length(d) <= 1.0) return normalize(d);\n    }\n}\n\nvec3 rotate2D(vec3 p, vec2 t){\n    float stx = sin(t.x);\n    float ctx = cos(t.x);\n    float sty = sin(t.y);\n    float cty = cos(t.y);\n    mat3 xRotation;\n    xRotation[0] = vec3(1, 0, 0);\n    xRotation[1] = vec3(0, ctx, -stx);\n    xRotation[2] = vec3(0, stx, ctx);\n    \n    mat3 yRotation;\n    yRotation[0] = vec3(cty, 0, -sty);\n    yRotation[1] = vec3(0, 1, 0);\n    yRotation[2] = vec3(sty, 0, cty);\n    return p*xRotation*yRotation;\n}\n\nfloat box(vec3 p, vec3 s) {\n    vec3 q = abs(p) - s;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat boxFrame(vec3 p, vec3 b, float e) {\n    p = abs(p) - b;\n    vec3 q = abs(p + e) - e;\n    return min(min(\n        length(max(vec3(p.x, q.y, q.z), 0.0)) + min(max(p.x, max(q.y, q.z)), 0.0),\n        length(max(vec3(q.x, p.y, q.z), 0.0)) + min(max(q.x, max(p.y, q.z)), 0.0)),\n        length(max(vec3(q.x, q.y, p.z), 0.0)) + min(max(q.x, max(q.y, p.z)), 0.0)\n    );\n}\n\nfloat sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat scene(vec3 p, out material mat) {\n    float ground = box(p - vec3(0, -3.25, 0), vec3(1000, 1, 1000));\n    float b1 = boxFrame(rotate2D(p - vec3(0, 0, 5), vec2(0.34, 0.43)), vec3(1), 0.1);\n    float b2 = boxFrame(rotate2D(p - vec3(0, 0, 5), vec2(0.13, 0.73)) - vec3(1), vec3(1), 0.1);\n    float b3 = boxFrame(rotate2D(p - vec3(0, 0, 5), vec2(0.24, 0.92)) + vec3(1), vec3(1), 0.1);\n    \n    float closest = min(ground, min(b1, min(b2, b3)));\n    \n    if (closest == ground) {\n        mat = material(vec3(0), 0.5, 0.7, 0.05);\n    } else if (closest == b1) {\n        mat = material(vec3(1, 1, 0), 0.5, 1.0, 0.06);\n    } else if (closest == b2) {\n        mat = material(vec3(0, 1, 1), 2.0, 0.0, 0.0);\n    } else {\n        mat = material(vec3(1, 0, 0), 2.0, 0.0, 0.0);\n    }\n    \n    return closest;\n}\n\nfloat raymarch(vec3 o, vec3 d, inout bool h, inout material mat) {\n    float t = 0.0;\n    \n    for (int i = 0; i < 100 && t <= 100.0 && !h; ++i) {\n        float s = scene(o + d * t, mat);\n        t += s;\n        \n        h = s <= 0.003 * t && t >= 0.0;\n    }\n    \n    return t;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0, 0.001);\n    material mat;\n    return normalize(vec3(\n        scene(p + e.yxx, mat) - scene(p - e.yxx, mat),\n        scene(p + e.xyx, mat) - scene(p - e.xyx, mat),\n        scene(p + e.xxy, mat) - scene(p - e.xxy, mat)\n    ));\n}\n\nvec3 pathtrace(vec3 o, vec3 d) {\n    vec3 col = vec3(1);\n    float initT = 0.0;\n    vec3 initD = d;\n    for (int i = 0; i < 12; ++i) {\n        bool h = false;\n        material mat;\n        float t = raymarch(o, d, h, mat);\n        if (i < 1) initT = h ? t : 500.0;\n        if (h) {\n            vec3 p = o + d * t;\n            vec3 n = getNormal(p);\n            o = p + n * 0.01;\n            vec3 dd = normalize(randomDir() + n);\n            vec3 rd = normalize(reflect(d, n));\n            \n            float specular = hash1() < mat.specular ? 1.0 : 0.0;\n            \n            d = mix(dd, rd, mat.smoothness * specular);\n            \n            col *= mix(mat.col * mat.emission, vec3(1), specular);\n            \n            if (mat.emission > 1.0) break;\n        } else {\n            col *= vec3(0.2);\n            break;\n        }\n    }\n    \n    return mix(col, vec3(0), 1.0 - exp(-initT * vec3(0.03, 0.036, 0.05)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    seed = iTime + dot(sin(fragCoord), vec2(443.712, 983.234));\n    seed += hash1() * 434.251;\n    \n    vec2 uv = ((fragCoord + hash2() - 0.5) - 0.5 * iResolution.xy)/iResolution.y;\n    \n    vec3 o = rotate2D(vec3(0, 0, 0), vec2(radians(camDir)));\n    vec3 d = rotate2D(normalize(vec3(uv, 0.75)), vec2(radians(0.0), radians(0.0)));\n    vec3 focalPoint = o + d * 5.0;\n    \n    o += rotate2D(vec3(randomDir2D(), 0), vec2(radians(camDir))) * 0.1;\n    vec3 shiftedDir = normalize(focalPoint - o);\n    \n    vec3 col = pathtrace(o, shiftedDir);\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if(iMouse.z > 0.0){\n        data *= 0.0;\n    }\n    data += vec4(col, 1);\n    \n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}