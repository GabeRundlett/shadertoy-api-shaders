{
    "Shader": {
        "info": {
            "date": "1564648696",
            "description": "Original https://www.shadertoy.com/view/XldSRr\nClick on right to hide UI\nSceen width and pupillary dist seem broken... It's from 3 years ago so I don't remember \n\nFork this and code your new shapeDistance functions :) ",
            "flags": 32,
            "hasliked": 0,
            "id": "WllXDl",
            "likes": 12,
            "name": "Magic Eye Toy - UI Tweakable",
            "published": 3,
            "tags": [
                "stereogram",
                "ui",
                "ui",
                "autostereogram",
                "interface"
            ],
            "usePreview": 1,
            "username": "ttoinou",
            "viewed": 1056
        },
        "renderpass": [
            {
                "code": "\n//Only what you need in your shaders to get the IU inputs\nfloat uiSlider(int id){return texture(iChannel0, vec2(float(id)+.5,0.5)/iResolution.xy).r;}\n\n#define TWOPI \t\t\t\t6.28\n#define maxLoopCancellation 20\n#define maxLoop \t\t\t50\n#define eyesDist_ \t\t    (uiSlider(3))\t// (180.)\n#define faceScreenDist_ \t(uiSlider(2))\n#define patternRepeat \t\t(uiSlider(8)*eyesDist_)\n#define bounds \t\t\t\t(10000.)\n\n//------------------------------------------------------------------------------\nfloat shapeDistance(vec2 uv, float time)\n{\n    float A = 60.;\n    float B = 0.9*patternRepeat;\n    float C = 1.;\n    float D = 450.;\n    return A*cos( ( length(uv)/B + time/C)*TWOPI ) + D;\n} // shapeDistance()\n\n//------------------------------------------------------------------------------\nvec2 viewport(vec2 p)\n{   \n    return vec2( (2.*p.x - iResolution.x)/ iResolution.y,\n                  2.*p.y                 / iResolution.y - 1.);\n    \n    //return p/min(iResolution.x,iResolution.y);\n} // viewport()\n\n//------------------------------------------------------------------------------\nfloat func2cancel(vec2 uv, float time, float xP,float eyesDist, float faceScreenDist)\n{\n    return shapeDistance(vec2(xP,uv.y),time)*(uv.x - eyesDist) + (uv.x - xP)*faceScreenDist;\n} // func2cancel()\n\n//------------------------------------------------------------------------------\nfloat cancellation(vec2 uv, float time, float eyesDist, float faceScreenDist)\n{\n    float a = -bounds, b = bounds; // (iMouse.x/iResolution.x*200.);\n    float ga = func2cancel(uv,time,a,eyesDist,faceScreenDist);\n    float gb = func2cancel(uv,time,b,eyesDist,faceScreenDist);\n    \n    for( int i = 0 ; i < maxLoopCancellation ; i++ )\n    {\n        float m = 0.5*(a+b);\n        float gm = func2cancel(uv,time,m,eyesDist,faceScreenDist);\n        \n        if( gm*ga >= 0. )\n        {\n        \ta = m;\n            ga = gm;\n        }\n        else\n        {\n            b = m;\n            gb = gm;\n        }\n    } // while()\n    \n    return 0.5*(a+b);\n} // cancellation()\n\n//------------------------------------------------------------------------------\nvec2 intersectionStereogram(vec2 uv, float time, float eyesDist, float faceScreenDist,float rightToLeft)\n{\n    float xP = cancellation(uv,time,rightToLeft * eyesDist,faceScreenDist);\n    float fxP = shapeDistance(vec2(xP,uv.y),time);\n    float newX = - rightToLeft * eyesDist + faceScreenDist * ( xP + rightToLeft * eyesDist ) / ( faceScreenDist + fxP );\n\n    return vec2(newX,uv.y);\n} // intersectionStereogram()\n\n//------------------------------------------------------------------------------\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    vec2 uv = viewport(coord)*patternRepeat;\n    \n    \n    float speed = uiSlider(4)/100.*2.;\n    if( abs(speed) < 0.02 ){\n        speed = 0.;\n    }\n    \n    float time = iTime*speed;\n    float patternWidth = 1./patternRepeat;\n    float eyesDist = eyesDist_;\n    float faceScreenDist =faceScreenDist_ ; // sqrt( faceScreenDist_*faceScreenDist_ ;\n    \n    float xP;\n    float fxP;\n    float newX;\n    \n\tfloat size = intersectionStereogram(vec2(0.,uv.y),time,eyesDist,faceScreenDist,-1.0).x;\n    \n    \n    for( int i = 0 ; i < maxLoop ; i++ )\n    {\n        \n        if( uv.x > size )\n        {\n\t\t\tuv = intersectionStereogram(uv,time,eyesDist,faceScreenDist,1.0);\n        }\n        else if( uv.x < 0. )\n        {\n\t\t\tuv = intersectionStereogram(uv,time,eyesDist,faceScreenDist,-1.0);\n        }\n        else\n        {\n            break;\n        }\n        \n    } // for()\n    \n    // pattern texture\n    int textureID = int(floor(uiSlider(7)));\n    if( textureID < 4 ){\n        // texture is in buff1\n    \tfloat margin = 310.;\n        float W = iChannelResolution[0].x;\n        vec2 pos = uv/size;\n        pos.x = mod(pos.x,1.);\n        pos.y = mod(pos.y,1.);\n        pos = pos*vec2((W - margin)/W,1.) + vec2(margin/W,0.);\n    \tcolor = texture(iChannel0,pos);\n    } else {\n        // texture is in input channels\n        vec2 pos = uv/size;\n        \n        if( textureID == 4 ){\n    \t\tcolor = texture(iChannel2,pos);\n        } else if( textureID == 5 ){\n    \t\tcolor = texture(iChannel3,pos);\n        }\n    }\n    \n    float nyanSpeed = uiSlider(5)/100. * 64.;\n    vec2 vecNyan = vec2( uv.x/size , uv.y/size);\n    vecNyan.x = mod(vecNyan.x,1.);\n    vecNyan.y = mod(vecNyan.y,2.);\n    if( vecNyan.y > 1. ){\n        vecNyan.y -= 1.;\n        nyanSpeed *= 1.;\n        vecNyan.x = 1. - vecNyan.x;\n    }\n    vecNyan.x = (mod(vecNyan.x - time*nyanSpeed/32.,1.0) + floor(mod(time*nyanSpeed,6.0)) ) * 40./256.;\n    vecNyan.x = mod(vecNyan.x,1.);\n    \n    vec4 nyan = texture(iChannel1,vecNyan);\n    color = mix( color , nyan , clamp( uiSlider(6)/100.*nyan.a,0.,1.) );\n    \n    //UI integration\n    \n    if( coord.y > 2. && iMouse.x < iResolution.x*.9  ){\n    \tvec4 ui = texture(iChannel0,coord/iResolution.xy);\n    \tcolor.rgb = mix(color.rgb,ui.rgb, ui.a*0.6);\n    \t//color.rgb = ui.rgb;\n   \t}\n        \n\tcolor.a = 1.;\n    \n} // mainImage()",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by anatole duprat - XT95/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Thx to :\n// Smooth HSV - iq : https://www.shadertoy.com/view/MsS3Wc\n// Rounded box - iq : https://www.shadertoy.com/view/4llXD7\n// 96-Bit 8x12 font - Flyguy : https://www.shadertoy.com/view/Mt2GWD\n\n#define MAX_DIGIT 6\n#define FLOAT_PRECISION 1\n#define SLIDER_LENGTH 256\n#define FONT_HEIGHT    24\n#define FONT_WIDTH     8\n#define SLIDER_HEIGHTf 6.\n#define SLIDER_SPACING 32\n#define BOX_INNERMARGIN 16\n#define BOX_OUTERMARGIN 16\n\n#define SLIDER_LENGTHf float(SLIDER_LENGTH)\n#define SLIDER_BEGIN (BOX_INNERMARGIN+BOX_OUTERMARGIN)\n#define BOX_WIDTH (2*BOX_INNERMARGIN + SLIDER_LENGTH )\n#define BOX_WIDTHf float(BOX_WIDTH)\n#define WIDGET_COLOR vec3(.3,1.,.3)\n\n/* global var */  vec4  col = vec4(0.); vec2 pos = vec2(0.);  vec2 uv = vec2(0.);\n/* char sprite */ vec4 ch_spc = vec4(0x000000,0x000000,0x000000,0x000000); vec4 ch_exc = vec4(0x003078,0x787830,0x300030,0x300000); vec4 ch_quo = vec4(0x006666,0x662400,0x000000,0x000000); vec4 ch_hsh = vec4(0x006C6C,0xFE6C6C,0x6CFE6C,0x6C0000); vec4 ch_dol = vec4(0x30307C,0xC0C078,0x0C0CF8,0x303000); vec4 ch_pct = vec4(0x000000,0xC4CC18,0x3060CC,0x8C0000); vec4 ch_amp = vec4(0x0070D8,0xD870FA,0xDECCDC,0x760000); vec4 ch_apo = vec4(0x003030,0x306000,0x000000,0x000000); vec4 ch_lbr = vec4(0x000C18,0x306060,0x603018,0x0C0000); vec4 ch_rbr = vec4(0x006030,0x180C0C,0x0C1830,0x600000); vec4 ch_ast = vec4(0x000000,0x663CFF,0x3C6600,0x000000); vec4 ch_crs = vec4(0x000000,0x18187E,0x181800,0x000000); vec4 ch_com = vec4(0x000000,0x000000,0x000038,0x386000); vec4 ch_dsh = vec4(0x000000,0x0000FE,0x000000,0x000000); vec4 ch_per = vec4(0x000000,0x000000,0x000038,0x380000); vec4 ch_lsl = vec4(0x000002,0x060C18,0x3060C0,0x800000); vec4 ch_0 = vec4(0x007CC6,0xD6D6D6,0xD6D6C6,0x7C0000); vec4 ch_1 = vec4(0x001030,0xF03030,0x303030,0xFC0000); vec4 ch_2 = vec4(0x0078CC,0xCC0C18,0x3060CC,0xFC0000); vec4 ch_3 = vec4(0x0078CC,0x0C0C38,0x0C0CCC,0x780000); vec4 ch_4 = vec4(0x000C1C,0x3C6CCC,0xFE0C0C,0x1E0000); vec4 ch_5 = vec4(0x00FCC0,0xC0C0F8,0x0C0CCC,0x780000); vec4 ch_6 = vec4(0x003860,0xC0C0F8,0xCCCCCC,0x780000); vec4 ch_7 = vec4(0x00FEC6,0xC6060C,0x183030,0x300000); vec4 ch_8 = vec4(0x0078CC,0xCCEC78,0xDCCCCC,0x780000); vec4 ch_9 = vec4(0x0078CC,0xCCCC7C,0x181830,0x700000); vec4 ch_col = vec4(0x000000,0x383800,0x003838,0x000000); vec4 ch_scl = vec4(0x000000,0x383800,0x003838,0x183000); vec4 ch_les = vec4(0x000C18,0x3060C0,0x603018,0x0C0000); vec4 ch_equ = vec4(0x000000,0x007E00,0x7E0000,0x000000); vec4 ch_grt = vec4(0x006030,0x180C06,0x0C1830,0x600000); vec4 ch_que = vec4(0x0078CC,0x0C1830,0x300030,0x300000); vec4 ch_ats = vec4(0x007CC6,0xC6DEDE,0xDEC0C0,0x7C0000); vec4 ch_A = vec4(0x003078,0xCCCCCC,0xFCCCCC,0xCC0000); vec4 ch_B = vec4(0x00FC66,0x66667C,0x666666,0xFC0000); vec4 ch_C = vec4(0x003C66,0xC6C0C0,0xC0C666,0x3C0000); vec4 ch_D = vec4(0x00F86C,0x666666,0x66666C,0xF80000); vec4 ch_E = vec4(0x00FE62,0x60647C,0x646062,0xFE0000); vec4 ch_F = vec4(0x00FE66,0x62647C,0x646060,0xF00000); vec4 ch_G = vec4(0x003C66,0xC6C0C0,0xCEC666,0x3E0000); vec4 ch_H = vec4(0x00CCCC,0xCCCCFC,0xCCCCCC,0xCC0000); vec4 ch_I = vec4(0x007830,0x303030,0x303030,0x780000); vec4 ch_J = vec4(0x001E0C,0x0C0C0C,0xCCCCCC,0x780000); vec4 ch_K = vec4(0x00E666,0x6C6C78,0x6C6C66,0xE60000); vec4 ch_L = vec4(0x00F060,0x606060,0x626666,0xFE0000); vec4 ch_M = vec4(0x00C6EE,0xFEFED6,0xC6C6C6,0xC60000); vec4 ch_N = vec4(0x00C6C6,0xE6F6FE,0xDECEC6,0xC60000); vec4 ch_O = vec4(0x00386C,0xC6C6C6,0xC6C66C,0x380000); vec4 ch_P = vec4(0x00FC66,0x66667C,0x606060,0xF00000); vec4 ch_Q = vec4(0x00386C,0xC6C6C6,0xCEDE7C,0x0C1E00); vec4 ch_R = vec4(0x00FC66,0x66667C,0x6C6666,0xE60000); vec4 ch_S = vec4(0x0078CC,0xCCC070,0x18CCCC,0x780000); vec4 ch_T = vec4(0x00FCB4,0x303030,0x303030,0x780000); vec4 ch_U = vec4(0x00CCCC,0xCCCCCC,0xCCCCCC,0x780000); vec4 ch_V = vec4(0x00CCCC,0xCCCCCC,0xCCCC78,0x300000); vec4 ch_W = vec4(0x00C6C6,0xC6C6D6,0xD66C6C,0x6C0000); vec4 ch_X = vec4(0x00CCCC,0xCC7830,0x78CCCC,0xCC0000); vec4 ch_Y = vec4(0x00CCCC,0xCCCC78,0x303030,0x780000); vec4 ch_Z = vec4(0x00FECE,0x981830,0x6062C6,0xFE0000); vec4 ch_lsb = vec4(0x003C30,0x303030,0x303030,0x3C0000); vec4 ch_rsl = vec4(0x000080,0xC06030,0x180C06,0x020000); vec4 ch_rsb = vec4(0x003C0C,0x0C0C0C,0x0C0C0C,0x3C0000); vec4 ch_pow = vec4(0x10386C,0xC60000,0x000000,0x000000); vec4 ch_usc = vec4(0x000000,0x000000,0x000000,0x00FF00); vec4 ch_a = vec4(0x000000,0x00780C,0x7CCCCC,0x760000); vec4 ch_b = vec4(0x00E060,0x607C66,0x666666,0xDC0000); vec4 ch_c = vec4(0x000000,0x0078CC,0xC0C0CC,0x780000); vec4 ch_d = vec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000); vec4 ch_e = vec4(0x000000,0x0078CC,0xFCC0CC,0x780000); vec4 ch_f = vec4(0x00386C,0x6060F8,0x606060,0xF00000); vec4 ch_g = vec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78); vec4 ch_h = vec4(0x00E060,0x606C76,0x666666,0xE60000); vec4 ch_i = vec4(0x001818,0x007818,0x181818,0x7E0000); vec4 ch_j = vec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78); vec4 ch_k = vec4(0x00E060,0x60666C,0x786C66,0xE60000); vec4 ch_l = vec4(0x007818,0x181818,0x181818,0x7E0000); vec4 ch_m = vec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000); vec4 ch_n = vec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000); vec4 ch_o = vec4(0x000000,0x0078CC,0xCCCCCC,0x780000); vec4 ch_p = vec4(0x000000,0x00DC66,0x666666,0x7C60F0); vec4 ch_q = vec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E); vec4 ch_r = vec4(0x000000,0x00EC6E,0x766060,0xF00000); vec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000); vec4 ch_t = vec4(0x000020,0x60FC60,0x60606C,0x380000); vec4 ch_u = vec4(0x000000,0x00CCCC,0xCCCCCC,0x760000); vec4 ch_v = vec4(0x000000,0x00CCCC,0xCCCC78,0x300000); vec4 ch_w = vec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000); vec4 ch_x = vec4(0x000000,0x00C66C,0x38386C,0xC60000); vec4 ch_y = vec4(0x000000,0x006666,0x66663C,0x0C18F0); vec4 ch_z = vec4(0x000000,0x00FC8C,0x1860C4,0xFC0000); vec4 ch_lpa = vec4(0x001C30,0x3060C0,0x603030,0x1C0000); vec4 ch_bar = vec4(0x001818,0x181800,0x181818,0x180000); vec4 ch_rpa = vec4(0x00E030,0x30180C,0x183030,0xE00000); vec4 ch_tid = vec4(0x0073DA,0xCE0000,0x000000,0x000000); vec4 ch_lar = vec4(0x000000,0x10386C,0xC6C6FE,0x000000);\n#define _a  col += vec4( char(ch_a) );\n#define _b  col += vec4( char(ch_b) );\n#define _c  col += vec4( char(ch_c) );\n#define _d  col += vec4( char(ch_d) );\n#define _e  col += vec4( char(ch_e) );\n#define _f  col += vec4( char(ch_f) );\n#define _g  col += vec4( char(ch_g) );\n#define _h  col += vec4( char(ch_h) );\n#define _i  col += vec4( char(ch_i) );\n#define _j  col += vec4( char(ch_j) );\n#define _k  col += vec4( char(ch_k) );\n#define _l  col += vec4( char(ch_l) );\n#define _m  col += vec4( char(ch_m) );\n#define _n  col += vec4( char(ch_n) );\n#define _o  col += vec4( char(ch_o) );\n#define _p  col += vec4( char(ch_p) );\n#define _q  col += vec4( char(ch_q) );\n#define _r  col += vec4( char(ch_r) );\n#define _s  col += vec4( char(ch_s) );\n#define _t  col += vec4( char(ch_t) );\n#define _u  col += vec4( char(ch_u) );\n#define _v  col += vec4( char(ch_v) );\n#define _w  col += vec4( char(ch_w) );\n#define _x  col += vec4( char(ch_x) );\n#define _y  col += vec4( char(ch_y) );\n#define _z  col += vec4( char(ch_z) );\n#define _A  col += vec4( char(ch_A) );\n#define _B  col += vec4( char(ch_B) );\n#define _C  col += vec4( char(ch_C) );\n#define _D  col += vec4( char(ch_D) );\n#define _E  col += vec4( char(ch_E) );\n#define _F  col += vec4( char(ch_F) );\n#define _G  col += vec4( char(ch_G) );\n#define _H  col += vec4( char(ch_H) );\n#define _I  col += vec4( char(ch_I) );\n#define _J  col += vec4( char(ch_J) );\n#define _K  col += vec4( char(ch_K) );\n#define _L  col += vec4( char(ch_L) );\n#define _M  col += vec4( char(ch_M) );\n#define _N  col += vec4( char(ch_N) );\n#define _O  col += vec4( char(ch_O) );\n#define _P  col += vec4( char(ch_P) );\n#define _Q  col += vec4( char(ch_Q) );\n#define _R  col += vec4( char(ch_R) );\n#define _S  col += vec4( char(ch_S) );\n#define _T  col += vec4( char(ch_T) );\n#define _U  col += vec4( char(ch_U) );\n#define _V  col += vec4( char(ch_V) );\n#define _W  col += vec4( char(ch_W) );\n#define _X  col += vec4( char(ch_X) );\n#define _Y  col += vec4( char(ch_Y) );\n#define _Z  col += vec4( char(ch_Z) );\n#define _spc  col += vec4( char(ch_spc) );\n#define _float(a)  col += vec4(print_float(a));\n#define _int(a)  col += vec4(print_int(a));\n#define _slider(x,y,id,v,min_,max_,integer,clamp_) setCursor(x,y);print_slider(id,v,min_,max_,integer,clamp_);\n#define _box(p,s,c) print_box(p,s,c);\n#define _cursor(x,y)  setCursor(x,y);\n\nvoid setCursor(int x, int y)\n{\n    pos = vec2(float(x),iResolution.y-float(y));\n}\n\nfloat extract_bit(float n, float b)\n{\n    b = clamp(b,-1.0,24.0);\n    return floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\nfloat sprite(vec4 spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));\n    \n    float pixels = 0.0;\n    pixels += extract_bit(spr.x, bit - 72.0);\n    pixels += extract_bit(spr.y, bit - 48.0);\n    pixels += extract_bit(spr.z, bit - 24.0);\n    pixels += extract_bit(spr.w, bit - 00.0);\n    \n    return bounds ? pixels : 0.0;\n}\n\nfloat char(vec4 ch)\n{\n    float px = sprite(ch, vec2(8, 12), uv - pos);\n    pos.x += 8.;\n    return px;\n}\n\nvec4 get_digit(float d)\n{\n    d = floor(d);\n    if(d == 0.0) return ch_0;\n    if(d == 1.0) return ch_1;\n    if(d == 2.0) return ch_2;\n    if(d == 3.0) return ch_3;\n    if(d == 4.0) return ch_4;\n    if(d == 5.0) return ch_5;\n    if(d == 6.0) return ch_6;\n    if(d == 7.0) return ch_7;\n    if(d == 8.0) return ch_8;\n    if(d == 9.0) return ch_9;\n    return ch_0;\n}\n\nfloat print_float(float number)\n{\n    float result = 0.0;\n    \n    for(int i = MAX_DIGIT-1; i >= -FLOAT_PRECISION;i--)\n    {\n        float digit = mod( number / pow(10.0, float(i)) , 10.0);\n        \n        if(i == -1)\n        {\n            result += char(ch_per);\n        }\n        \n        if((abs(number) > pow(10.0, float(i))) || i <= 0)\n        {\n            result += char(get_digit(digit));\n        }\n    } \n    return result;\n}\n\nfloat print_int(float number)\n{\n    float result = 0.0;\n    \n    for(int i = MAX_DIGIT;i >= 0;i--)\n    {\n        float digit = mod( number / pow(10.0, float(i)) , 10.0);\n\n        if(abs(number) > pow(10.0, float(i)) || i == 0)\n        {\n            result += char(get_digit(digit));\n        }\n    }   \n    return result;\n}\n\n\nvec3 widgetSelected()\n{\n    return texture(iChannel0, vec2(.5,2.5)/iResolution.xy).rgb;\n}\nvec4 uiSlider(int id){return texture(iChannel0, vec2(float(id)+.5,0.5)/iResolution.xy);}\n\nfloat roundBox( in vec2 p, in vec2 b, in float r ) \n{\n    vec2 q = abs(p) - b;\n    vec2 m = vec2( min(q.x,q.y), max(q.x,q.y) );\n    float d = (m.x > 0.0) ? length(q) : m.y; \n    return d - r;\n}\n\n\nvoid print_slider( int id, float v , float min_, float max_, bool integer, bool clamp_)\n{\n    vec2 puv = uv-vec2(.5);\n    vec3 select = widgetSelected();\n    float sl2 = SLIDER_LENGTHf/2.;\n    vec4 value = uiSlider(id);\n    if(value.a == 0.)\n        value.r = v;\n    \n    //Check if value changed\n    bool selected = ( select.r == .1 && select.g*255. == float(id) );\n    bool mouseAndNoSelect = iMouse.w>.5 && roundBox( iMouse.xy-pos-vec2(sl2,6.), vec2(sl2,3.), 5.) < 0. && select.r == 0.; \n    \n    \n    if(mouseAndNoSelect || selected){\n    \t//value.r = clamp((iMouse.x-pos.x-2.)/SLIDER_LENGTHf,0.,1.);\n    \tvalue.g = (iMouse.x-pos.x-2.)/SLIDER_LENGTHf;\n        value.r = (max_-min_)*value.g + min_;\n        \n    }\n    \n    if( integer ){\n        value.r = floor(value.r);\n    }\n    \n    if( clamp_ ){\n        value.r = clamp(value.r,min_,max_);\n    }\n    \n    //value.g = 0.5;\n    value.g = clamp( (value.r - min_)/(max_ - min_) , 0. , 1. );\n    \n    \n    \n    //Draw slider\n    float d = roundBox( uv-pos-vec2(sl2,6.), vec2(sl2,SLIDER_HEIGHTf), 5.);\n    float layer = clamp(sign(-d),0.,1.);\n    col.rgb += vec3((clamp( 1.6-abs(d) , 0., 2.))*max(.0,-sign(uv.x-pos.x-value.g*SLIDER_LENGTHf))*.5 );\n    col.rgb += WIDGET_COLOR*vec3( clamp( 1.5-abs(d)*1.5 , 0., 1.) );\n    col.a += layer + clamp( 1.-abs(d) , 0., 1.);\n    \n    //Draw value\n    float oldx = pos.x;\n    pos.x += SLIDER_LENGTHf-12.*4.;\n    _float(value.r)\n    pos.x = oldx;\n    \n    //value.r = 333.333;\n    \n    //Save value\n    if(puv.x == float(id) && puv.y==0.)\n        col = vec4(value.r,0.,0.,1.);\n    \n    //Save selection\n    if(puv.x == 0. && puv.y == 2.)\n    {\n        if(iMouse.w<.5)\n            col = vec4(0.);\n        else if(mouseAndNoSelect)\n        \tcol = vec4(.1,float(id)/255.,0.,0.);\n    }\n}\n\n\nvoid print_box(vec2 p, vec2 s, vec4 c)\n{\n    if(uv.x>p.x && uv.x <p.x+s.x && uv.y>p.y && uv.y<p.y+s.y)\n        col += c;\n}\n\n//FUNCTIONS :\n// _cursor(x,y) : define the cursor (0,0) == top-left\n// _slider(x,y,id,v) : define a slider at the position x,y with an ID and a default value float v\n// _color(x,y,id,v) : define a color picker at the position x,y with an ID and a default value vec3 v\n// _box(x,y,sx,sy,c) : define a layout box at the position x,y with the size sx,sy and a color vec4 c\n\n//_[a..Z] : write a character at the position of the cursor\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy;\n    if(uv.x-.5 == 0. && uv.y-.5 == 2.)\n        col = vec4(widgetSelected(),0.);\n    \n    _box(vec2(BOX_OUTERMARGIN,BOX_OUTERMARGIN),\n         vec2(BOX_WIDTHf,iResolution.y-2.*float(BOX_OUTERMARGIN))\n         ,vec4(0.,0.08,0.,.7))\n        \n    int begin = BOX_OUTERMARGIN+FONT_HEIGHT-4;\n    \n    #define POSCENTER(x) (SLIDER_BEGIN + SLIDER_LENGTH/2 -(x)*FONT_WIDTH)\n    \n    _cursor(POSCENTER(4),begin) _G _e _o _m _e _t _r _y\n    ;begin += FONT_HEIGHT;\n    _slider(SLIDER_BEGIN,begin, 1, 470., 0. , 1000. , false , false ) _S _c _r _e _e _n _spc _w _i _d _t _h\n    ;begin += SLIDER_SPACING;\n    _slider(SLIDER_BEGIN,begin, 2, 2000., 0. , 4000. , false , false ) _D _i _s _t _a _n _c _e\n    ;begin += SLIDER_SPACING;\n    _slider(SLIDER_BEGIN,begin, 3, 66.5 , 1. , 200. , false , false ) _P _u _p _i _l _l _a _r _y _spc _d _i _s _t\n    ;begin += SLIDER_SPACING;\n\n    _cursor(POSCENTER(3) ,begin) _P _a _r _a _m _s\n    ;begin += FONT_HEIGHT;\n        \n    _slider(SLIDER_BEGIN,begin, 4, 40. , 0. , 100. , false , false ) _S _p _e _e _d\n    ;begin += SLIDER_SPACING;        \n    _slider(SLIDER_BEGIN,begin, 5, 10. , 0. , 100. , false , true ) _N _y _a _n _spc _S _p _e _e _d\n    ;begin += SLIDER_SPACING;\n    \n    _cursor(POSCENTER(3),begin) _T _e _x _t _u _r _e\n    ;begin += FONT_HEIGHT;\n    _slider(SLIDER_BEGIN,begin, 6, 60. , 0. , 100. , false , true )  _N _y _a _n _spc _O _p _a _c _i _t _y\n    ;begin += SLIDER_SPACING;       \n    _slider(SLIDER_BEGIN,begin, 8, 1. , 1. , 9. , true , true )  _R _e _p _e _a _t\n    ;begin += SLIDER_SPACING;  \n    _slider(SLIDER_BEGIN,begin, 7, 1. , 1. , 5. , true , true )  _T _e _x _t _u _r _e _spc _I _D\n    ;begin += SLIDER_SPACING;  \n    \n    int textureID = int(floor(uiSlider(7)));\n    if( textureID < 4 ){\n        float margin = 310.;\n        vec2 pos = (fragCoord - vec2(margin,0.))/vec2(iResolution.x - margin,iResolution.y);\n        if( pos.x >= 0. && pos.x <= 1. && pos.y <= 1. && pos.y >= 0. ){\n            \n            if( textureID == 1 ){\n            \tcol = texture(iChannel1,pos);\n            } else if ( textureID == 2 ){\n            \tcol = texture(iChannel2,pos);\n            } else if ( textureID == 3 ){\n            \tcol = texture(iChannel3,pos);\n            }\n            \n            col.a = 0.;\n        }\n    }\n    \n    fragColor = col.rgba;\n}\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}