{
    "Shader": {
        "info": {
            "date": "1715958435",
            "description": "inspired slightly by cmzw's pixel waterfall\nmanipulating noise w/o blender nodes was a pain so here's this, for now...\n\nplease tell me how to center the UV ive been trying to math it out for so long\nvoronoi concept; https://www.shadertoy.com/view/MfVSDd",
            "flags": 0,
            "hasliked": 0,
            "id": "XfcSDM",
            "likes": 3,
            "name": "basic pixel water effect",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "IDG_works",
            "viewed": 180
        },
        "renderpass": [
            {
                "code": "vec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat voronoi( in vec2 x )\n{\n    vec2 p = floor( x );\n    vec2  f = fract( x );\n\n    float res = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 b = vec2( i, j );\n        vec2  r = vec2( b ) - f + hash22( p + b );\n        float d = dot( r, r );\n\n        res = min( res, d );\n    }\n    return sqrt( res );\n}\n\nfloat smoothVoronoi( in vec2 x )\n{\n    vec2 p = floor( x );\n    vec2  f = fract( x );\n\n    float res = 0.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 b = vec2( i, j );\n        vec2  r = vec2( b ) - f + hash22( p + b );\n        float d = dot( r, r );\n\n        res += 1.0/pow( d, 8.0 );\n    }\n    return pow( 1.0/res, 1.0/16.0 );\n}\n\nfloat fbm( in vec2 x, in float H )\n{    \n    float t = 0.0;\n    for( int i=0; i<4; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        t += a*smoothVoronoi(f*x);\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x -= 0.5;\n    vec2 uvinit = uv;\n    vec2 uvw2 = uv;\n    \n    // Time varying pixel color\n    \n    //if (uv.x < 0.1) { uv.x = 0.; }\n    const float tickWidth = 1./32.;\n    \n    // snaps to pixels on x\n\tfor(float i=0.0; i<1.+tickWidth; i+=tickWidth) {\n\t// \"i\" is the line coordinate.\n        if (uvinit.x < i && uvinit.x > i-tickWidth) {\n            \n            uv.x = i;\n        }\n    \n    }\n    // snaps to pixels on y\n    for(float i=0.0; i<1.+tickWidth; i+=tickWidth) {\n\t// \"i\" is the line coordinate.\n        if (uvinit.y < i && uvinit.y > i-tickWidth) {\n            \n            uv.y = i;\n        }\n    }\n    \n    // init noise\n    vec3 col = vec3(mix(0., 1., float(fbm(vec2(uv.x*4.-400., uv.y*4.-400.+iTime), iTime))+0.2), \n    mix(0., 1., float(fbm(vec2(uv.x*4.+100., uv.y*4.+100.+iTime), iTime))+0.2),\n    mix(0., 1., float(fbm(vec2(uv.x*4.+800.-iTime*.8, uv.y*4.+800.+iTime), iTime))+0.2));\n    \n    \n    // adds the xyz into x, compensates via division, then sets all of col to x\n    col.x += (col.y + col.z);\n    col.x /= 3.;\n    col = vec3(col.x);\n    \n    // simple colorization of col\n    col = mix(vec3(.0, .0, .3), vec3(.4, .8, 1.), col);\n    \n    vec3 precol = col;\n    \n    // a (really inefficient) posterize effect, using a palette\n    if (col.z < 4./12.) {col = vec3(0.01, 0, 0.39);} else\n    if (col.z < 6./12. && col.z > 4./12.) {col = vec3(0, 0.05, 0.57);} else\n    if (col.z < 8./12. && col.z > 6./12.) {col = vec3(0, 0.31, 0.59);} else\n    if (col.z < 9./12. && col.z > 8./12.) {col = vec3(0, 0.43, 0.68);} else\n    if (col.z < 10./12. && col.z > 9./12.) {col = vec3(0, 0.62, 0.82);} else\n    if (col.z < 11./6. && col.z > 10./12.) {col = vec3(0.07, 0.83, 0.93);}\n    \n    \n    // mixes posterization\n    col = mix(col, precol, 0.5);\n    \n    // for if you don't like the highlights\n    precol = col;\n    // new noise for highlights\n    vec3 highlight = vec3(mix(0., 1., float(fbm(vec2(uv.x*4.-400., uv.y*4.-400.+iTime), iTime))+0.2), \n    mix(0., 1., float(fbm(vec2(uv.x*4.+100., uv.y*4.+100.+iTime), iTime))+0.2),\n    mix(0., 1., float(fbm(vec2(uv.x*4.+800.-iTime*.8, uv.y*4.+800.+iTime), iTime))+0.2));\n    // all into x, again\n    highlight.x += (highlight.y + highlight.z);\n    highlight.x /= 3.;\n    highlight = vec3(highlight.x);\n    \n    // over-the-top fun warp effect, barely shows in highlight\n    vec2 uvw = uv;\n    uvw.x *= 0.4;\n    vec3 warp = vec3(fbm(uvw*8. * fbm(vec2(uvw.y, uvw.x*2.+iTime), 2.) * sin(uvw.y) - fbm(uvw*sin(uvw.y*2.+iTime), 1.),\n    1.));\n    \n    \n    // mixes higlight and warp\n    highlight = highlight * (warp/1.5);\n    \n    // adds color to highlight\n    highlight = mix(col, highlight, 0.5)*1.5;\n    col *= 1.2;\n    // gates highlight to add into col\n    if (highlight.z > 1.0) {\n        col = highlight;\n    }\n\n    \n    \n    // adds \"borders\"\n    if (uvinit.x < 0.0) {\n    uv = vec2(0.);\n    col *= 2.;\n    }\n    \n    if (uvinit.x > 1.0) {\n    uv = vec2(0.);\n    col *= 2.;\n    }\n    uvinit.y *= 1.;\n    \n    \n    // Output to screen\n    // fragColor = vec4(precol, 1.0);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}