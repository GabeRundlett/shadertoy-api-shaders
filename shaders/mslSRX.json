{
    "Shader": {
        "info": {
            "date": "1669333691",
            "description": "use the mouse to draw!",
            "flags": 32,
            "hasliked": 0,
            "id": "mslSRX",
            "likes": 3,
            "name": "draw / backdraw / buffer",
            "published": 3,
            "tags": [
                "draw"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//this function simply animates the mouse movement\nvec2 f_o_anim_h(float n_t){\n    float n_parts = 3.0;\n    float n_part_quotient = 1./n_parts;\n    float n_t_modnor = mod(n_t, n_part_quotient) / n_part_quotient;\n    float n_index = floor(n_t / n_part_quotient);\n    \n    vec2[] a_o = vec2[](\n        vec2(0.0, n_t_modnor), \n        vec2(1.0, n_t_modnor), \n        vec2(n_t_modnor, 0.5)\n    );\n    \n    return a_o[int(n_index)]-vec2(0.5,0.5);\n}\nvec2 f_o_anim_e(float n_t){\n    float n_parts = 2.0;\n    float n_part_quotient = 1./n_parts;\n    float n_t_modnor = mod(n_t, n_part_quotient) / n_part_quotient;\n    float n_index = floor(n_t / n_part_quotient);\n    \n    float n_rad = 0.5;\n    float n_rot = 6.2831/4.;\n    float n_radia = 6.2831 * 0.9;\n    vec2[] a_o = vec2[](\n        vec2(sin(n_t_modnor*-n_radia+n_rot)*n_rad,cos(n_t_modnor*-n_radia+n_rot)*n_rad), \n        vec2(n_t_modnor-0.5, 0.0)\n    );\n    \n    return a_o[int(n_index)];\n}\nvec2 f_o_anim_l(float n_t){\n    float n_parts = 1.0;\n    float n_part_quotient = 1./n_parts;\n    float n_t_modnor = mod(n_t, n_part_quotient) / n_part_quotient;\n    float n_index = floor(n_t / n_part_quotient);\n\n    vec2[] a_o = vec2[](\n        vec2(0.5, n_t_modnor)\n    );\n    \n    return a_o[int(n_index)]-vec2(0.5);\n}\nvec2 f_o_anim_o(float n_t){\n    float n_parts = 1.0;\n    float n_part_quotient = 1./n_parts;\n    float n_t_modnor = mod(n_t, n_part_quotient) / n_part_quotient;\n    float n_index = floor(n_t / n_part_quotient);\n    float n_tau = 6.2831;\n    float n_rad = 0.5;\n    vec2[] a_o = vec2[](\n        vec2(sin(n_t_modnor*n_tau)*n_rad,cos(n_t_modnor*n_tau)*n_rad)\n    );\n    \n    return a_o[int(n_index)];\n}\nvec2 f_o_anim_exm(float n_t){\n    float n_parts = 2.0;\n    float n_part_quotient = 1./n_parts;\n    float n_t_modnor = mod(n_t, n_part_quotient) / n_part_quotient;\n    float n_index = floor(n_t / n_part_quotient);\n    float n_rad = 0.1;\n    float n_tau = 6.2831;\n    vec2[] a_o = vec2[](\n        vec2(0.0, 0.5-n_t_modnor*0.8),\n        vec2(sin(n_t_modnor*n_tau)*n_rad,cos(n_t_modnor*n_tau)*n_rad)+vec2(0.0, - 0.6)\n    );\n    \n    return a_o[int(n_index)];\n}\nvec2 f_o_mou_coo_nor(){\n    float n_rad = 0.2;\n    \n    float n_index = floor(iTime);\n    float n_t = fract(iTime);\n    vec2[] a_o = vec2[](\n        f_o_anim_h(n_t),\n        f_o_anim_e(n_t),\n        f_o_anim_l(n_t),\n        f_o_anim_l(n_t),\n        f_o_anim_o(n_t),\n        f_o_anim_exm(n_t)\n    );\n    vec2 o = a_o[int(n_index)];\n    float n_margin = 0.5;\n    o = (o+vec2(n_index+(n_margin*n_index)-(float(a_o.length())/2.0), 0.0))*0.1;\n    if(n_index > float(a_o.length())-1.){\n        o = vec2(sin(iTime)*0.5,cos(iTime)*0.5);\n    }\n    return o;\n    //vec2[] a_o_anim = vec2[] (\n    //    vec2()\n    //);\n    //return vec2(sin(iTime)*n_rad, cos(iTime)*n_rad);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 o_pix_coo_nor = (fragCoord.xy - (iResolution.xy*0.5)) / iResolution.y;\n    vec2 o_mou_coo_nor = (iMouse.xy - (iResolution.xy*0.5)) / iResolution.y;\n    if(iMouse.w == 0.0){\n        o_mou_coo_nor = f_o_mou_coo_nor();\n    }\n    vec4 o_col_last = texture(iChannel0, uv);\n    \n    float n_dist = length(o_pix_coo_nor-o_mou_coo_nor);\n    float n_pen_size_nor = 0.005;\n    float n_dist_smoothstep = smoothstep(n_pen_size_nor+(n_pen_size_nor*2.), n_pen_size_nor, n_dist);\n    vec4 o_col_curr = vec4(n_dist_smoothstep);\n    \n    // by keeping only the higher color value we will overdraw everything\n    float n_max = max(o_col_curr.r, o_col_last.r);\n    \n    fragColor = vec4(n_max);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}