{
    "Shader": {
        "info": {
            "date": "1530243307",
            "description": "Mouse moves the camera\nRay marching a volumetric KIFS",
            "flags": 64,
            "hasliked": 0,
            "id": "lsyfDy",
            "likes": 10,
            "name": "Volumetric KIFS",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "volumetric",
                "kifs"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 813
        },
        "renderpass": [
            {
                "code": "#define STEPS       1256\n#define FAR         20.\n#define PI acos( -1.0 )\n#define TPI    2.0 * PI\n#define MAXITER     2.0\n#define STEPPER     0.2\n#define DENSITY     0.5\n// iq's procedural vs from texture noise, uncomment at your own risk\n//#define PROCEDURAL\n// Uncomment the following for a different pattern\n//#define ONE\n#define HASHSCALE .1031\n#define WAV texture( iChannel1, vec2( 0.0, 0.55 ) ).x * 0.5\n#define FRE texture( iChannel1, vec2( 0.0, 0.25 ) ).x * 0.5\n\nmat2 rot( float a )\n{\n\n\treturn mat2( cos( a ), -sin( a ),\n               \t sin( a ),  cos( a )\n               );\n\n}\n\n/*\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n*/\n\n// https://www.shadertoy.com/view/4djSRW\n\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// iq's\n\n#ifdef PROCEDURAL\n\nfloat noise( in vec3 x )\n{\n    \n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\n#else\n\nfloat noise( in vec3 x )\n{\n\n\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n    \n}\n\n#endif\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02; p -= iTime * 0.1 + WAV;\n    f += 0.2500 * noise( p ); p *= 2.03; p += iTime * 0.2 + FRE;\n    f += 0.1250 * noise( p ); p *= 2.01; p -= iTime * 0.1 + WAV;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nfloat map( vec3 p )\n{\n\n    for( float i = 0.; i < MAXITER; i+=STEPPER )\n    {\n    \n        p = abs( p - vec3( 0.1 ) ) - 0.1;\n        p.xy *= rot( iTime * 0.05 + WAV * 0.1 );\n        p.xz *= rot( iTime * 0.05 + FRE * 0.1 );\n    \n    }\n    \n    float f = 0.0;\n    \n    #ifdef ONE\n    \n    f = fbm( p );\n    \n    #else\n    \n    f = 2.0 - length( p ) * fbm( p );\n    \n    #endif\n    \n    return f;\n    \n}\n\nfloat ray( vec3 ro, vec3 rd, out float den )\n{\n\n    float t = 0.0, maxD = 0.0, d = 1.0; den = 0.0;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n        \n        vec3 p = ro + rd * t;\n    \n        den = d * ( map( p ) * t * t * 0.01 );\n        //den = map( p ) * 0.5;\n        maxD = maxD < den ? den : maxD;\n        \n        if( maxD > 0.9 || t > FAR ) break;\n        \n        // https://www.shadertoy.com/view/MscXRH\n        //t += max( maxD*.1, .05 );\n        \n        t += 0.05;\n    \n    }\n    \n    den = maxD;\n    \n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd, vec2 uv )\n{\n\n    float den = 0.0;\n    float t = ray( ro, rd, den );\n    \n    vec3 p = ro + rd * t;\n\n    vec3 col = mix( vec3( 0.2 ),  \n               mix( vec3( 1.2, map( p ) + 2.5 + WAV * 1.2, 1.2 + FRE + 0.3 ),\n               vec3( map( p + WAV ) + 3.7 + FRE, 0.5 - map( p + WAV ) * 0.2, map( p + FRE ) + 0.5 ), \n               den ), ( den * DENSITY ) + FRE );\n    \n    col *= sqrt( col );\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    vec2 mou = -iMouse.xy / iResolution.xy;\n\n    vec3 ro = vec3( 0.0, 0.0, 2.5 );\n    vec3 rd = normalize( vec3( uv, -1.0 ) );\n    ro.zy *= rot( mou.y * TPI );\n    rd.zy *= rot( mou.y * TPI );\n    ro.xy *= rot( mou.x * TPI );\n    rd.xy *= rot( mou.x * TPI );\n    \n    float den = 0.0, t = ray( ro, rd, den );\n    \n    vec3 col = shad( ro, rd, uv );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 15796,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/alexander-austere/jimi-hendrix-purple-haze"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}