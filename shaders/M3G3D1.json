{
    "Shader": {
        "info": {
            "date": "1717593681",
            "description": "explosion time♥",
            "flags": 0,
            "hasliked": 0,
            "id": "M3G3D1",
            "likes": 11,
            "name": "SimpleFireworks",
            "published": 3,
            "tags": [
                "heart"
            ],
            "usePreview": 0,
            "username": "bobh_zen",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "\n#define PI      3.141592653589793\n#define TWO_PI   6.283185307179586\nfloat star5SDF( vec2 p,  float r,  float m){\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    //ab = ob - oa\n    vec2 ab = m*vec2(-k1.y,k1.x) - vec2(0,r); \n    float h = clamp( dot(p,ab)/dot(ab,ab), 0.0, 1.0 );\n    return length(p-ab*h) * sign(p.y*ab.x-p.x*ab.y);\n}\nfloat hash1(float p){\n    p = fract(p * .1031*9811.164);  p *= p + 33.33; p *= p + p;return fract(p);\n}\nvec2 hash21(float p){\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973)*1023.468);p3 += dot(p3, p3.yzx + 33.33);return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec3 colorRibbon(float t){\n    return  abs(mod(vec3(0.,1.,2.)/3. + t, 1.) - .5) * 4. - 0.5;\n}\n//https://mathworld.wolfram.com/HeartCurve.html  \n//www.shadertoy.com/view/WdK3Dz\nvec2 getHeartPosition(float t){\n    return vec2(16.0 * sin(t) * sin(t) * sin(t),-(13.0 * cos(t) - 5.0 * cos(2.0*t)- 2.0 * cos(3.0*t) - cos(4.0*t)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \n   float t=iTime*.50;\n    vec2 uv = fragCoord.xy*2./iResolution.xy-1.;\n    uv.x *= iResolution.x/iResolution.y;\n\t \n    vec3 color =vec3(0.);\n    const float jmax=10.;\n    const float imax=20.;\n    for(float j=0.;j<jmax;j++){\n    \tfloat ja=j/jmax;\n    \tt-=hash1(ja*33.669);\n    \tfloat t1=floor(t); \n    \tfloat t1f=fract(t); //0，1\n    \t//0.3上升 0.7爆炸\n    \tfloat t2fa=min(0.3,t1f)/0.3;//[0.,0.3]/0.3 -> [0.,1.]\n    \tfloat t2fb= max(t1f*(step(0.3,t1f)) -0.3,0.)/0.7 ; // max([0.3,1.]-0.3,0.)/0.7 -> [0.,1.]\n    \tfloat flasht=t2fb*(step(0.1,t2fb)-step(0.,t2fb))*10.;//爆炸闪光 爆炸的前1/10时间 \n    \tvec2  layer1_pos=hash21(t1*j);\n    \tvec3 col=colorRibbon(hash1( layer1_pos.y) ) ;\n    \tfor(float i=0.;i<imax;i++){ \n         float ia=i/imax;\n   \t      //float layer2_a=(ia+hash1(t1+ia))*TWO_PI; //随机角度\n       \t  //float layer2_len=t2fb*(hash1(t1*ia)+1.)*0.5;//随机距离\n         //vec2  layer2_pos=vec2(cos(layer2_a),sin(layer2_a))*layer2_len; //随机方向\n         vec2  layer2_pos=getHeartPosition(ia*TWO_PI)*t2fb*-0.028; //心型方向\n         layer2_pos-=vec2(1.-layer1_pos.x*2.,1.-max(layer1_pos.y+0.75,0.75)*t2fa  );\n    \t \tfloat blink=step(1.,mod(i,2.));//二分之一的点闪烁 \n       \t // float sdf =length(st-layer2_pos);\n\t\t\tfloat sdf =star5SDF(uv-layer2_pos,0.05,0.09)+0.05;//五角星\n   \t\t\tcolor +=col *smoothstep(-0.016,flasht*3.6+4.5+ sin(t2fb*30.)*blink,(0.02/sdf));\n\n   \t\t}\n        \n    }//for j\n \n    \n\n  \n    fragColor = vec4(color,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}