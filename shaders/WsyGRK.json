{
    "Shader": {
        "info": {
            "date": "1570518316",
            "description": "Assorted steam engines (\"Steam Engine No.1/2/3\" and \"Endless Engines\"); album title page (unoriginal) counts cylinders; horizontal mouse selects page.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WsyGRK",
            "likes": 25,
            "name": "Engine Album",
            "published": 3,
            "tags": [
                "steam",
                "replication",
                "book",
                "kinematics"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "// \"Engine Album\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Maxv3 (vec3 p);\nfloat Minv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv3 (vec3 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDirEx, qHit, pgSize, gSize, cId;\nvec2 aCs[3], crCs[3], crMid[3];\nfloat tCur, dstFarEx, dstFar, tpBook, phsTurn, idPage, crRad, crLen, aRot;\nint idObj, nCyl;\nbool repObj;\nconst int idWhl = 1, idSpk = 2, idCrnk = 3, idAx = 4, idPis = 5, idCrod = 6, idCyl = 7,\n   idCylEnt = 8, idValv = 9, idPipes = 10, idSup = 11, idBase = 12, idFlr = 13, idCol = 14,\n   idRail = 15, idLt = 16;\nconst int nPage = 6;\nconst float pi = 3.14159;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat HallDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;\n  d = max (0.5 * gSize.y - 0.4 - abs (q.y),\n    - PrBox2Df (vec2 (q.x, abs (q.z) - 0.5 * gSize.z), vec2 (16., 8.)));\n  DMINQ (idFlr);\n  d = length (abs (q.xz) - vec2 (16.6, 11.9)) - 0.6;\n  DMIN (idCol);\n  q = p;\n  q.z = abs (q.z) - 11.8;\n  q.y -= -4.6;\n  d = min (min (PrCylDf (q.zyx, 0.15, 16.1),\n     PrCylDf (vec3 (abs (abs (q.x) - 7.) - 3.5, q.y + 2.5, q.z).xzy, 0.1, 2.5)),\n     PrCylDf (vec3 (q.x, abs (q.y + 2.5) - 1., q.z).zyx, 0.1, 16.1));\n  q = p;\n  q.xz = abs (q.xz) - vec2 (16.4, 19.4);\n  q.y -= -4.6;\n  d = min (d, min (min (PrCylDf (q, 0.15, 7.7),\n     PrCylDf (vec3 (q.x, q.y + 2.5, abs (q.z) - 2.).xzy, 0.1, 2.5)),\n     PrCylDf (vec3 (q.x, abs (q.y + 2.5) - 1., q.z), 0.1, 7.7)));\n  DMIN (idRail);\n  q = p;\n  q.xz = abs (q.xz);\n  q -= vec3 (6., 9.6, 6.);\n  d = PrCylDf (q.xzy, 2., 0.2);\n  DMINQ (idLt);\n  return dMin;\n}\n\nfloat CrnkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, dz;\n  for (int k = VAR_ZERO; k < 3; k ++) {\n    if (k >= nCyl) break;\n    dz = (nCyl == 3) ? float (k - 1) * 4. : (((nCyl == 2)) ? float (2 * k - 1) * 3. : 0.);\n    q = p;\n    q.x -= 8.;\n    q.xy = Rot2Cs (q.xy, aCs[k]);\n    q.z += dz;\n    d = min (PrBoxDf (vec3 (q.x + 0.5 * crRad, q.y, abs (q.z) - 0.5), vec3 (0.5 * crRad, 0.2, 0.1)),\n       PrCylDf (vec3 (abs (q.x + 0.5 * crRad) - 0.5 * crRad, q.y, abs (q.z) - 0.5), 0.6, 0.1));\n    DMIN (idCrnk);\n    d = PrCylDf (vec3 (q.x + crRad, q.yz), 0.3, 0.65);\n    DMIN (idAx);\n    q = p;\n    q.xz -= vec2 (8., - dz);\n    q.xy = Rot2Cs (q.xy + crMid[k], crCs[k]);\n    d = min (PrCylDf (vec3 (abs (q.y) - 0.12, q.zx), 0.15, crLen - 0.5),\n       PrCylDf (vec3 (abs (q.x) - crLen, q.yz), 0.6, 0.15));\n    DMIN (idCrod);\n    q = p;\n    q.xz -= vec2 (3.5 - (crMid[k].x + crLen * crCs[k].x), - dz);\n    d = PrCylDf (q.yzx, 0.25, 3.7);\n    DMIN (idPis);\n    d = PrCylDf ((q - vec3 (0.7, 1.7, 0.)).yzx, 0.07, 3.);\n    DMIN (idPis);\n    q.x -= 4.5;\n    d = PrCylDf (q, 0.3, 0.5);\n    DMIN (idAx);\n    d = min (min (PrCylDf ((q + vec3 (0.8, 0., 0.)).yzx, 0.6, 0.13),\n       PrCylDf ((q + vec3 (0.8, -0.8, 0.)).xzy, 0.08, 0.95)),\n       PrCylDf (vec3 (q.xy, abs (q.z) - 0.35), 0.7, 0.1));\n    DMIN (idCrnk);\n  }\n  return dMin;\n}\n\n#define SHOW_SPNR 1  // 0/1 extra spinning regulator\n\nfloat EngDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, w, z;\n  if (repObj) p.y += 4.6;\n  w = float (nCyl) - 2.;\n  z = (nCyl == 3) ? mod (p.z + 2., 4.) - 2. : ((nCyl == 2) ? mod (p.z, 6.) - 3. : p.z);\n  d = min (PrBoxDf (p + vec3 (0., 4., 0.), vec3 (13., 1., 5. + w)),\n     PrBoxDf (vec3 (abs (p.x + 9.) - 2., p.y + 2.5, p.z), vec3 (1., 1.4, 4. + w)));\n  DMIN (idBase);\n  q = p;\n  q.x -= 8.;\n  q.xy = Rot2Cs (q.xy, aCs[0]);\n  q.z = abs (q.z) - 6. - w;\n  d = min (PrCylAnDf (q, 4., 0.2, 0.6), PrCylDf (q, 0.6, 0.6));\n  DMINQ (idWhl);\n  q.xy = Rot2D (q.xy, 2. * pi * (floor (6. * atan (q.y, - q.x) / (2. * pi) + 0.5)) / 6.);\n  d = PrCylDf (vec3 (q.x + 2.2, q.y, abs (q.z) - 0.35).zyx, 0.2, 1.7);\n  DMIN (idSpk);\n  q.z = z;\n  d = 0.35 - abs (q.z);\n  if (nCyl > 1) d = - max (- d, abs (p.z) - 6.);\n  d = max (PrCylDf (p - vec3 (8., 0., 0.), 0.3, 6.8 + w), d);\n  DMIN (idAx);\n  dMin = CrnkDf (p, dMin);\n  q = p;\n  q.x -= -8.9;\n  q.z = z;\n  d = PrCylDf ((q + vec3 (-3.5, 0., 0.)).yzx, 0.7, 0.2);\n  if (nCyl > 1) d = max (d, abs (p.z) - 6.);\n  DMINQ (idCylEnt);\n  d = PrCylDf (q.yzx, 1.5, 3.5);\n  if (nCyl > 1) d = max (d, abs (p.z) - 6.);\n  DMINQ (idCyl);\n  q = p + vec3 (8.9, -1.7, 0.);\n  q.z = z;\n  d = PrCylDf (q.yzx, 0.5, 2.5);\n  if (nCyl > 1) d = max (d, abs (p.z) - 6.);\n  DMINQ (idValv);\n  q = vec3 (abs (p.x + 8.9) - 1.5, p.y - 2.5, z);\n  d = PrCylDf (q.xzy, 0.35, 1.25);\n  if (nCyl > 1) {\n    d = max (d, abs (p.z) - 6.);\n    d = min (min (d, PrCylDf (vec3 (q.x, q.y - 1.3, p.z), 0.35, 3. + w)),\n       PrSphDf (vec3 (q.x, q.y - 1.3, abs (p.z) - 3. - w), 0.35));\n  }\n  q = p + vec3 (8.9, (repObj ? -6.3 : -5.3), 0.);\n  if (nCyl > 1) d = min (d, min (PrCylDf ((q + vec3 (-1.5, 0., 1. + w)).xzy, 0.35, (repObj ? 2.5 : 1.5)),\n    PrCylDf ((q + vec3 (1.5, 0., - 1. - w)).xzy, 0.35, (repObj ? 2.5 : 1.5))));\n  else d = min (d, PrCylDf (vec3 (abs (q.x) - 1.5, q.y, q.z).xzy, 0.35, 0.05 + (repObj ? 2.5 : 1.5)));\n  if (repObj) d = min (d, length (vec2 (abs (q.x) - 1.5, q.y - 2.5)) - 0.4);\n  DMIN (idPipes); \n  q = p;\n  q.x -= 8.;\n  q.z = (nCyl > 1) ? abs (abs (p.z) - 3. - w) - 1.7 : abs (abs (p.z) - 3.8 - w) - 0.9;\n  d = min (PrBoxDf (q + vec3 (0., 1.6, 0.), vec3 (0.5, 1.5, 0.2)), PrCylDf (q, 0.5, 0.3));\n  DMIN (idSup);\n#if SHOW_SPNR\n  q = p + vec3 (-8., -1.8, - ((nCyl > 1) ? 1.3 : 3.) - w);\n  d = PrCylDf ((q + vec3 (0., 0.6, 0.)).xzy, 0.12, 0.8);\n  q.xz = Rot2D (q.xz, 4. * aRot);\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 4.);\n  q.xy = Rot2D (q.xy, -0.25 * pi);\n  d = min (d, PrCylDf ((q + vec3 (0.4, -0.1, 0.)).yzx, 0.05, 0.4));\n  DMIN (idAx);\n  d = PrSphDf (q + vec3 (0.7, -0.1, 0.), 0.15);\n  DMIN (idPis);\n#endif\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  if (repObj) dMin = HallDf (p, dMin);\n  dMin = EngDf (p, dMin);\n  return dMin;\n}\n\nvoid SetEngConf ()\n{\n  float h;\n  h = Hashfv3 (137.1 * cId + 11.1);\n  if (repObj) {\n    nCyl = (h > 0.6) ? 3 : ((h < 0.25) ? 1 : 2); \n    aRot = -(0.1 + 0.3 * h) * 2. * pi * tCur;\n  } else aRot = -0.2 * 2. * pi * tCur;\n  for (int k = 0; k < 3; k ++) {\n    if (k >= nCyl) break;\n    aCs[k] = sin (aRot + 2. * pi * (float (k) / float (nCyl)) + vec2 (0.5 * pi, 0.));\n    crMid[k].y = -0.5 * crRad * aCs[k].y;\n    crCs[k] = vec2 (cos (asin (crMid[k].y / crLen)), crMid[k].y / crLen);\n    crMid[k].x = crLen * crCs[k].x + crRad * aCs[k].x;\n  }\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi, s, cIdP;\n  float dHit, d, eps;\n  eps = 0.0005;\n  dHit = eps;\n  if (repObj) {\n    if (rd.x == 0.) rd.x = 0.001;\n    if (rd.y == 0.) rd.y = 0.001;\n    if (rd.z == 0.) rd.z = 0.001;\n    ro /= gSize;\n    rd /= gSize;\n    rdi = 1. / rd;\n    cIdP = vec3 (-99.);\n  } else {\n    SetEngConf ();\n  }\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    if (repObj) {\n      cId = floor (p);\n      if (cId != cIdP) {\n        SetEngConf ();\n        cIdP = cId;\n      }\n      s = (cId + step (0., rd) - p) * rdi;\n      p = gSize * (p - (cId + 0.5));\n    } else {\n      p = ro + dHit * rd;\n    }\n    d = ObjDf (p);\n    if (repObj) d = min (d, abs (Minv3 (s) + eps));\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n    if (! repObj && j >= 120) break;\n  }\n  if (repObj && d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  if (repObj) p -= gSize * (cId + 0.5);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p, cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  if (repObj) cIdP = vec3 (-99.);\n  for (int j = VAR_ZERO; j < 16; j ++) {\n    p = ro + d * rd;\n    if (repObj) {\n      cId = floor (p / gSize);\n      if (cId != cIdP) {\n        SetEngConf ();\n        cIdP = cId;\n      }\n      h = ObjDf (p - gSize * (cId + 0.5));\n    } else {\n      SetEngConf ();\n      h = ObjDf (p);\n    }\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += 0.3;\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nvec3 ShGrid (vec2 p, bool stag)\n{\n  vec2 q, sq, ss;\n  q = p;\n  if (stag && 2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec2 BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, qnBlk;\n  vec2 qBlk;\n  float dn, df, bSize;\n  bSize = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk)) / bSize;\n  } else qBlk = vec2 (0.);\n  return qBlk;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, lVec, rg, ff;\n  vec2 qBlk, vf;\n  float dstObj, a, s, fFade;\n  bool fxz;\n  crRad = 2.;\n  crLen = 5.;\n  if (repObj) bgCol = mix (0.6 * vec3 (0.4, 0.4, 0.5), vec3 (0.21), smoothstep (-0.01, 0.01, rd.y));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    if (repObj) {\n      cId = floor (ro / gSize);\n      SetEngConf ();\n    }\n    vn = ObjNf (ro);\n    qBlk = mod (2. * BlkHit (ro, reflect (rd, vn)), 1.);\n    vf = vec2 (0.);\n    ff = vec3 (0.);\n    fFade = exp (32. * min (0., 0.7 - dstObj / dstFar));\n    if (idObj == idFlr) {\n      if (vn.y > 0.99) {\n        col4 = vec4 (0.4, 0.4, 0.5, 0.1);\n        rg = ShGrid (ro.xz, false);\n        ff = vec3 (2. * ro.xz, 0.3);\n        col4.rgb *= mix (1., rg.y, fFade);\n        if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z * fFade);\n        else vn.yx = Rot2D (vn.yx, rg.x * fFade);\n        col4 *= (1. - 0.5 * smoothstep (12., 16., length (qHit.xz)));\n        vf = vec2 (32., 1.);\n      } else if (vn.y < -0.99) {\n        col4 = vec4 (vec3 (0.3) * (1. - 0.3 * smoothstep (3., 7.,\n           length (abs (qHit.xz) - 6.))), -1.);\n      } else {\n        col4 = vec4 (0.3, 0.3, 0.3, 0.1);\n        vf = vec2 (32., 1.);\n      }\n    } else if (idObj == idBase) {\n      col4 = (nCyl == 3) ? vec4 (0.3, 0.5, 0.6, 0.1) : ((nCyl == 2) ?\n         vec4 (0.3, 0.6, 0.2, 0.1) : vec4 (0.6, 0.3, 0.2, 0.1));\n      if (abs (vn.y) < 0.01) {\n        rg = ro;\n        rg.y += 0.5;\n        fxz = (abs (vn.x) > 0.99);\n        rg = ShGrid ((fxz ? rg.zy : rg.xy) * vec2 (1., 2.), true);\n        col4.r *= rg.y;\n        ff = vec3 (2. * (fxz ? ro.zy : ro.xy), 0.3);\n        rg.xz *= sign (fxz ? vn.x : vn.z);\n        if (fxz) {\n          if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n          else vn.xz = Rot2D (vn.xz, rg.x);\n        } else {\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n        }\n      } else {\n        rg = ShGrid (ro.xz, false);\n        col4.r *= rg.y;\n        ff = vec3 (2. * ro.xz, 0.3);\n        if (vn.y > 0.99) {\n          if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n          else vn.yx = Rot2D (vn.yx, rg.x);\n        }\n      }\n      vf = vec2 (32., 1.);\n    } else if (idObj == idCol) {\n      col4 = vec4 (0.8, 0.8, 0.75, 0.05);\n      vf = vec2 (32., 1.);\n    } else if (idObj == idCyl) {\n      col4 = vec4 (0.8, 0.7, 0.7, 0.3);\n      a = atan (qHit.z, - qHit.y) / (2. * pi);\n      if (abs (vn.x) > 0.99) {\n        ff = vec3 (4. * qHit.yz, 0.2);\n        col4.rgb *= (1. - 0.5 * SmoothBump (0.2, 0.4, 0.01, mod (16. * a + 0.5, 1.)) *\n           SmoothBump (0.05, 0.13, 0.01, 1. - length (qHit.yz) / 1.5));\n      } else {\n        ff = vec3 (4. * vec2 (8. * a, qHit.x), 0.2);\n        col4.rgb *= (1. - 0.5 * SmoothBump (0.03, 0.06, 0.01, 1. - abs (qHit.x) / 3.5));\n        a = mod (32. * a, 1.);\n        if (abs (qHit.x) < 3.3) vn.yz = Rot2D (vn.yz, 0.4 * SmoothBump (0.25, 0.75, 0.2, a) *\n           sign (a - 0.5));\n      }\n    } else if (idObj == idWhl) {\n      if (abs (vn.z) < 0.01) {\n        s = length (qHit.xy);\n        qHit.xy = vec2 (8. * atan (qHit.x, - qHit.y) / pi, qHit.z);\n        if (s > 4.1) {\n          s = mod (4. * qHit.z, 1.);\n          vn.z = -0.2 * SmoothBump (0.25, 0.75, 0.15, s) * sign (s - 0.5) * sign (ro.z);\n          vn = normalize (vn);\n        }\n      }\n      col4 = vec4 (0.5, 0.5, 0.55, 0.05) * (1. + 0.2 * Noisefv2 (128. * qHit.xy));\n    } else if (idObj == idSpk) {\n      col4 = vec4 (0.55, 0.55, 0.6, 0.2);\n    } else if (idObj == idCrnk) {\n      col4 = vec4 (0.5, 0.5, 0.6, 0.2);\n    } else if (idObj == idAx) {\n      col4 = vec4 (0.6, 0.4, 0.1, 0.3);\n    } else if (idObj == idPis) {\n      col4 = vec4 (0.5, 0.5, 0.2, 0.3);\n    } else if (idObj == idCrod) {\n      col4 = vec4 (0.6, 0.6, 0.5, 0.3);\n    } else if (idObj == idCylEnt) {\n      col4 = vec4 (0.7, 0.7, 0.8, 0.2) * (1. - 0.5 * step (length (qHit.yz), 0.33));\n    } else if (idObj == idValv) {\n      col4 = vec4 (0.7, 0.6, 0.6, 0.5) * (1. - 0.5 * step (0., vn.x) *\n         step (length (qHit.yz), 0.13));\n      vf = vec2 (32., 0.3);\n    } else if (idObj == idPipes) {\n      col4 = vec4 (0.6, 0.4, 0.1, 0.1);\n      vf = vec2 (32., 0.3);\n    } else if (idObj == idSup) {\n      col4 = vec4 (0.4, 0.2, 0.1, 0.05);\n      vf = vec2 (32., 1.);\n    } else if (idObj == idRail) {\n      col4 = vec4 (0.2, 0.4, 0.2, 0.1);\n      vf = vec2 (32., 0.2);\n    } else if (idObj == idLt) {\n      qHit.xz = smoothstep (0.05, 0.1, abs (qHit.xz));\n      col4 = vec4 (vec3 (1., 1., 0.8) * 0.5 * (1. - vn.y) * (0.7 + 0.3 * qHit.x * qHit.z), -1.);\n    }\n    if (ff.z > 0.) col4.rgb *= 1. - ff.z * Fbm2 (ff.xy);\n    if (col4.a >= 0.) {\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      lVec = normalize (vec3 (1., 1.3, 1.));\n      col = 0.2 * col4.rgb;\n      for (float sx = -1.; sx <= 1.; sx += 2.) {\n        for (float sz = -1.; sz <= 1.; sz += 2.) {\n          col += 0.5 * col4.rgb * max (dot (vn, lVec * vec3 (sx, 1., sz)), 0.) +\n             col4.a * pow (max (dot (normalize (lVec * vec3 (sx, 1., sz) - rd), vn), 0.), 64.);\n        }\n      }\n      col = col * (0.7 + 0.3 * ObjSShadow (ro, vec3 (0., 1., 0.))) +\n         col4.a * vec3 (0.1) * (0.5 + 0.5 * SmoothBump (0.25, 0.75, 0.05, qBlk.x) *\n         SmoothBump (0.25, 0.75, 0.05, qBlk.y));\n    } else col = col4.rgb;\n    if (repObj) col = clamp (mix (bgCol, col, fFade), 0., 1.);\n  } else {\n    if (repObj) {\n      col = bgCol;\n    } else {\n      qBlk = mod (4. * BlkHit (ro, rd), 1.);\n      col = vec3 (0.4, 0.5, 0.4) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.)) +\n         vec3 (0.2) * (0.8 + 0.2 * SmoothBump (0.25, 0.75, 0.1, qBlk.x) *\n         SmoothBump (0.25, 0.75, 0.1, qBlk.y));\n    }\n  }\n  return col;\n}\n\nvoid ExMain  (out vec3 fCol, in vec2 fCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, col;\n  vec2 ori, ca, sa;\n  float el, az, zmFac;\n  if (idPage < 4.) {\n    repObj = false;\n    nCyl = int (idPage);\n    zmFac = 3.7;\n  } else {\n    repObj = true;\n    zmFac = 1.8;\n  }\n  gSize = vec3 (40., 20., 40.);\n  if (repObj) {\n    az = 0.5 * pi * (2. * mod (floor (0.06 * tCur), 2.) - 1.) *\n       SmoothBump (0.2, 0.8, 0.1, mod (0.06 * tCur, 1.));\n    el = -0.05 * pi;\n  } else {\n    az = 0.03 * pi * tCur;\n    el = -0.1 * pi - 0.05 * pi * cos (0.02 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  if (repObj) ro = vuMat * vec3 (0., 0., -1.) + vec3 (0., 8., 3. * tCur);\n  else ro = vuMat * vec3 (0., -1., -40.);\n  rd = vuMat * normalize (vec3 (fCoord, zmFac));\n  dstFar = 180.;\n  col = ShowScene (ro, rd);\n  if (idPage == 5.) col = pow (vec3 (1., 0.59, 0.18) * Maxv3 (col), vec3 (0.8));\n  fCol = clamp (col, 0., 1.);\n}\n\nfloat ExObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, rRad, hRad, hOff, np, zr, thFac;\n  dMin = dstFarEx;\n  rRad = 0.3;\n  hRad = 0.08;\n  hOff = 0.15;\n  thFac = 2.2;\n  np = float (nPage - 1);\n  q = p;\n  zr = mod (q.z + 0.33 * pgSize.z, 0.66 * pgSize.z) - 0.33 * pgSize.z;\n  for (int k = VAR_ZERO; k < nPage; k ++) {\n    q = p;\n    q.y -= 0.5 * np * thFac * pgSize.y;\n    if (k == 0) q.xy = Rot2D (vec2 (q.x, q.y + np * thFac * pgSize.y * phsTurn), -2. * pi * phsTurn);\n    else q.y -= thFac * pgSize.y * (phsTurn - float (k));\n    q.x -= pgSize.x + rRad - hOff;\n    d = max (PrRoundBoxDf (q, pgSize - pgSize.y, pgSize.y), hRad - length (vec2 (q.x + pgSize.x - hOff, zr)));\n    DMINQ (k + 1);\n  }\n  q = p;\n  d = abs (q.z) - pgSize.z;\n  q.z = zr;\n  d = max (PrTorusDf (q, 0.5 * hRad, rRad + 0.3 * hRad), d);\n  DMINQ (nPage + 1);\n  return dMin;\n}\n\nfloat ExObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ExObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFarEx) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ExObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  v = vec4 (- ExObjDf (p + e.xxx), ExObjDf (p + e.xyy), ExObjDf (p + e.yxy), ExObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ExObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ExObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.01 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ExZeroPg (vec2 w)\n{\n  vec3 col;\n  vec2 s, b;\n  float d;\n  b = vec2 (0.01, 0.2);\n  s = w;\n  s.x += 0.5;\n  d = length (max (abs (s) - b, 0.));\n  s.x -= 0.25;\n  d = min (d, length (max (abs (abs (s) - vec2 (0.03, 0.)) - b, 0.)));\n  s.x -= 0.25;\n  d = min (d, min (length (max (abs (s) - b, 0.)),\n     length (max (abs (abs (s) - vec2 (0.06, 0.)) - b, 0.))));\n  s.x -= 0.4;\n  d = min (d, step (2. * b.x, abs (length (vec2 (1.75 * (abs (s.x) - 0.11), s.y)) - 0.95 * b.y)));\n  col = mix (vec3 (1., 0., 0.), vec3 (1.), smoothstep (0., 0.01, length (d)));\n  return col;\n}\n\nvec3 ExShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, c, vn;\n  vec2 s, w;\n  float dstObj, sh, npCyc, tpCyc, tpWait, nDotL, t;\n  bool isImg;\n  pgSize = vec3 (2.5, 0.011, 1.6);\n  tpCyc = 3.;\n  tpWait = 4.;\n  t = (tpBook < 0.) ? (- tpBook * float (nPage - 1) * (tpCyc + tpWait)) :\n     mod (tpBook - tpWait, float (nPage) * (tpCyc + tpWait));\n  npCyc = mod (floor (t / (tpCyc + tpWait)), float (nPage));\n  phsTurn = min (mod (t / (tpCyc + tpWait), 1.) * (tpCyc + tpWait) / tpCyc, 1.);\n  isImg = false;\n  dstObj = ExObjRay (ro, rd);\n  if (dstObj < dstFarEx) {\n    ro += dstObj * rd;\n    vn = ExObjNf (ro);\n    nDotL = max (dot (vn, ltDirEx), 0.);\n    if (idObj <= nPage) {\n      idPage = mod ((float (idObj - 1) + npCyc), float (nPage));\n      c = (idPage > 0. && idPage < float (nPage - 1)) ?\n         HsvToRgb (vec3 ((idPage - 1.) / float (nPage - 2), 0.7, 1.)) : vec3 (0.8);\n      s = pgSize.xz - abs (qHit.xz - vec2 (0.05, 0.));\n      t = min (s.x, s.y) - 0.3;\n      col4 = vec4 (0.9, 0.9, 0.8, 0.2);\n      if (qHit.y > 0.) {\n        w = (qHit.xz - vec2 (0.05, 0.)) / (pgSize.x - 0.05);\n        if (idPage > 0.) {\n          if (t > 0.) {\n            isImg = true;\n            ExMain (col, 2. * w);\n          } else col4 = mix (vec4 (c, 0.2), vec4 (0.6 * c, 0.2), step (-0.03, t));\n        } else {\n          if (t > 0.) col4 = vec4 (ExZeroPg (w), 0.2);\n          else col4 = mix (vec4 (c, 0.2), vec4 (0.), step (-0.03, t));\n        }\n      } else {\n        col4 = vec4 (c, 0.2);\n      }\n    } else if (idObj == nPage + 1) {\n      col4 = vec4 (0.9, 0.9, 0.95, 0.2);\n      nDotL *= nDotL;\n    }\n    sh = ExObjSShadow (ro + 0.001 * vn, ltDirEx);\n    if (isImg) col *= 0.5 + 0.5 * sh;\n    else col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (ltDirEx - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (1.) * (0.4 + 0.1 * rd.z);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tpBook = tCur;\n  az = 0.;\n  el = -0.5 * pi;\n  if (mPtr.z > 0.) {\n    tpBook = - clamp (1.05 * mPtr.x + 0.5, 0., 1.);\n    el += pi * mPtr.y * smoothstep (0.1, 0.15, abs (mPtr.y));\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vec3 (1.5, 0., -10.);\n  ro = vuMat * ro;\n  zmFac = 4.5;\n  dstFarEx = 40.;\n  ltDirEx = normalize (vec3 (1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ExShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}