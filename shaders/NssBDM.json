{
    "Shader": {
        "info": {
            "date": "1647340521",
            "description": "A chill vaporwave landscape inspired by album covers of bands I love.",
            "flags": 32,
            "hasliked": 0,
            "id": "NssBDM",
            "likes": 8,
            "name": "Vaporwave thing",
            "published": 3,
            "tags": [
                "vapor",
                "chill"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 408
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456)*123.456, 1.);\n}\n\nmat2 r2d(float a) { float c= cos(a), s= sin(a); return mat2(c, -s, s, c); }\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\n// Thanks IQ\n// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.5;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\n\n#define GROUND_MAT 0.\n#define BALL_MAT 1.\n#define TUBEA_MAT 2.\n#define TUBEB_MAT 3.\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000., -1.);\n    \n    float bouboules = 1000.;\n    float coef = 10.8;\n    bouboules = smin(bouboules, length(p-vec3(4.+cos(iTime*.3),-25.+sin(iTime*1.2)*3.,1.))-3., coef);\n    bouboules = smin(bouboules, length(p-vec3(-4.+2.*sin(iTime),-25.+3.*sin(iTime*.35),7.+3.*sin(iTime)))-5., coef);\n    bouboules = smin(bouboules, length(p-vec3(-2.+5.*cos(iTime),-20.+7.*sin(-iTime*.5),11.+cos(iTime*.5)))-2., coef);\n    acc = _min(acc, vec2(bouboules, BALL_MAT));\n    \n    \n    acc = _min(acc, vec2(-p.y, GROUND_MAT));\n    \n    acc = _min(acc, vec2(length(p.zy-vec2(-3.,-23.))-.01, TUBEA_MAT));\n    acc = _min(acc, vec2(length(p.xy-vec2(12.,-20.))-.01, TUBEB_MAT));\n    return acc;\n}\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        if (res.y == TUBEA_MAT)\n            accCol += (1.-sat(res.x/3.))*vec3(.75,.1,.3)*.4;\n        if (res.y == TUBEB_MAT)\n            accCol += (1.-sat(res.x/3.))*vec3(.1,.75,.3)*.4;\n        float f = sat((res.x-20.)*.5);\n        p+= rd*res.x*mix(1., 150., f);\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    float f = sat(pow(abs(rd.y-.05)*2., .65));\n    vec3 cols[6];\n    cols[0] = vec3(0.910,0.502,0.392);\n    cols[1] = vec3(0.929,0.427,0.290);\n    cols[2] = vec3(0.902,0.663,0.431);\n    cols[3] = vec3(0.800,0.643,0.678);\n    cols[4] = vec3(0.482,0.435,0.631);\n    cols[5] = vec3(0.055,0.141,0.294);\n    \n    float cnt = 5.;\n    float cur = f*cnt;\n    float curIdx = floor(cur);\n    vec3 col =  mix(cols[int(curIdx)], cols[int(min(curIdx+1., cnt))], sat(fract(cur)));\n    col = pow(col, vec3(.8));\n    col= col*sat(.7+.3*dot(rd, vec3(0.,0.,1.)))\n    +col*pow(sat(.7+.3*dot(rd, vec3(0.,0.,1.))), 5.)*.5;\n    return col;//*sat(-rd.y*10000.+200.);\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 albedo = vec3(0.);\n    if (res.z == GROUND_MAT)\n    {\n        albedo = vec3(.0)+vec3(.3)*texture(iChannel0, p.xz*.001).x;\n    }\n    if (res.z == TUBEA_MAT || res.z == TUBEB_MAT)\n        albedo = vec3(1.);\n    return albedo;\n}\n\nfloat _sqr(vec2 uv, vec2 sz)\n{\n    vec2 l = abs(uv)-sz;\n    return max(l.x, l.y);\n}\n\nvec3 rdr(vec2 uv)\n{\n    uv *= r2d(.15);\n    vec2 ouv = uv;\n    vec3 col = vec3(0.);\n    \n    float d = 25.;\n    float t = iTime*0.2+2.;\n    vec3 ro = vec3(sin(t)*d,-20.,-5.+cos(t)*d);\n    vec3 ta = vec3(0.,-22.5,0.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    float maxDist = 100.;\n    float dist = maxDist;\n    vec3 res = trace(ro, rd, 512);\n    vec3 accLightA = accCol;\n    if (res.y > 0.)\n    {\n        dist = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(res, rd, p, n);\n        float reflf = 1.;\n        vec3 refl = vec3(0.);// normalize(reflect(rd, n)+0.3*(vec3(rand(), rand(), rand())-.5));\n        float spec = mix(0.4, 0., sat(sin(p.y*2.)*100.));\n\n        if (res.z == BALL_MAT)\n        {\n            refl = normalize(reflect(rd, n)+spec*(vec3(rand(), rand(), rand())-.5));\n        }\n        else if (res.z == GROUND_MAT)\n        {\n            refl = normalize(vec3(rand(), rand(), rand()-.5));\n            if (dot(refl, vec3(0.,1.,0.)) > 0.)\n                refl = -refl;\n\n            reflf = .125;\n        }\n        if (length(refl) > .1)\n        {\n            vec3 resrefl = trace(p+n*0.01, refl, 128);\n            if (resrefl.y > 0.)\n            {\n                vec3 prefl = p+refl*resrefl.y;\n                vec3 nrefl = getNorm(prefl, resrefl.x);\n                \n                col += getMat(resrefl, refl, prefl, nrefl);\n            }\n            else\n                col += getEnv(refl);\n            col += accCol;\n            if (spec > 0.1)\n                col = col * .5;\n        }\n        col += getEnv(refl)*reflf;\n\n    }\n    else\n        col = getEnv(rd);\n    col += accLightA;\n    col = sat(col);\n    rd.y = -abs(rd.y);\n    col = mix(col, getEnv(rd), 1.-sat(exp(-dist*.01)));\n    \n    float rect2 = abs(_sqr(uv*r2d(.25), vec2(.43)))-0.001;\n    col = mix(col, vec3(1.000,0.322,0.749)*5., 1.-sat(rect2*400.));\n    col = mix(col, vec3(0.482,0.059,1.000)*5., (1.-sat(rect2*40.))*.1);\n\nfloat rect = abs(_sqr(uv, vec2(.35)))-0.001;\n    col = mix(col, vec3(1.000,0.322,0.749)*5., 1.-sat(rect*400.));\n    col = mix(col, vec3(1.000,0.322,0.749)*5., (1.-sat(rect*40.))*.2);\n\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    float stp = .005;\n    uv = floor(uv/stp)*stp;\n    _seed = iTime+texture(iChannel0, uv).x;\n    vec3 col = rdr(uv);\n    col *= 2./(col+1.);\n    col = pow(col, vec3(2.2));\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .75);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}