{
    "Shader": {
        "info": {
            "date": "1579771210",
            "description": "For learning",
            "flags": 0,
            "hasliked": 0,
            "id": "3tV3Dy",
            "likes": 1,
            "name": "Animating Smile",
            "published": 3,
            "tags": [
                "animation"
            ],
            "usePreview": 0,
            "username": "tonywu",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "#define S(a, b, t) smoothstep(a, b, t)\n#define sat(x) clamp(x, 0., 1.)\n\nfloat remap01(float a, float b, float t){\n\treturn sat((t-a)/(b-a));\n}\n\nfloat remap(float a, float b, float c, float d, float t){\n\treturn sat((t-a)/(b-a)) * (d-c) + c;\n}\n\nvec2 within(vec2 uv, vec4 rect){\n    return (uv - rect.xy)/(rect.zw - rect.xy);\n}\n\nvec4 Brow(vec2 uv){\n\n    float y = uv.y;\n    uv.y += uv.x*.8-.3;\n    uv.x -= .1;\n    uv -= .5;\n    \n    vec4 col = vec4(0.);\n    float blur = .1;\n    \n    float d1 = length(uv);\n    float s1 = S(.45, .45-blur, d1);\n    float d2 = length(uv-vec2(.1, -.2)*.7);\n    float s2 = S(.5, .5-blur, d2);\n    \n    float browMask = sat(s1-s2);\n    \n    float colMask = remap01(.7, .8, y)*.75;\n    colMask *= S(.6, .9, browMask);\n    vec4 browCol = mix(vec4(.4, .2, .2, 1.), vec4(1., .75, .5, 1.), colMask); \n    \n    uv.y += .15;\n    blur += .1;\n    d1 = length(uv);\n    s1 = S(.45, .45-blur, d1);\n    d2 = length(uv-vec2(.1, -.2)*.7);\n    s2 = S(.5, .5-blur, d2);\n    float shadowMask = sat(s1-s2);\n    \n    col = mix(col, vec4(0., 0., 0., 1.), S(.0, 1., shadowMask));\n    \n    col = mix(col, browCol, S(.2, .4, browMask));\n    \n    \n    return col;\n    \n}\n\nvec4 Eye(vec2 uv, float side, vec2 m){\n    uv -= 0.5;\n    uv.x *= side;\n    \n    float d = length(uv);\n\t\n    vec4 irisCol = vec4(.3, .5, 1., 1.);\n    \n    vec4 col = mix(vec4(1.), irisCol, S(.1, .7, d)*0.5);\n    \n    col.rgb *= 1. - S(.45, .5, d)*0.5*sat(-uv.y-uv.x*side);\n    \n    d = length(uv - m*.4);\n    col.rgb = mix(col.rgb, vec3(0.), S(.3, .28, d));\n    \n    irisCol.rgb *= 1. + S(.3, .05, d);\n    col.rgb = mix(col.rgb, irisCol.rgb, S(.28, .25, d));\n    \n    col.rgb = mix(col.rgb, vec3(0.), S(.16, .14, d));\n    \n    d = length(uv-m*.45);\n    \n    float highlight = S(.1, .09, length(uv - vec2(-.15, .15)));\n    highlight += S(.07, .05, length(uv + vec2(-.08, .08)));\n    \n    col.rgb = mix(col.rgb, vec3(1.), highlight);\n    \n    col.a = S(.5, .48, d);\n    \n     \n    return col;\n}\n\nvec4 Mouth(vec2 uv){\n\tuv -= .5;\n    vec4 col = vec4(.5, .18, .05, 1.);\n    \n    uv.y *= 3.5;\n    uv.y -= uv.x * uv.x*2.; \n    float d = length(uv);\n    col.a = S(.5, .48, d);\n    \n    float td = length(uv-vec2(0., .6));\n    \n    vec3 toothCol = vec3(1.) * S(.6, .35, d);\n    col.rgb = mix(col.rgb, toothCol, S(.4, .37, td));\n     \n    td = length(uv+vec2(0., .5));\n    col.rgb =mix(col.rgb, vec3(1., .5, .5), S(.5, .2, td));\n    return col;\n}\n\nvec4 Head(vec2 uv){\n\tvec4 col = vec4(.9, .65, .1, 1.);\n    float d = length(uv);\n    col.a = S(0.5, 0.49, d);\n    float edgeShade = remap01(.35, .5, d);\n    edgeShade *= edgeShade;\n    \n    col.rgb *= 1. - edgeShade*.5;\n    col.rgb = mix(col.rgb, vec3(.6, .3, .1), S(0.47, 0.48, d));\n    \n    float highlight = S(0.41, 0.405, d);\n    highlight *= remap(0.41, -.1, 0.75, 0., uv.y);\n    highlight *= S(.18, .19, length(uv-vec2(.21,.08)));\n    col.rgb = mix(col.rgb, vec3(1.0), highlight);\n    \n    \n    \n    d = length(uv - vec2(.25, -.2));\n    float cheek = S(0.2, 0.01, d)*0.4;\n    cheek *= S(0.17, 0.16, d);\n    col.rgb = mix(col.rgb, vec3(1., .1, .1), cheek);\n    \n    return col;\n}\n\nvec4 Smiley(vec2 uv, vec2 m){\n\tvec4 col = vec4(0.0);\n    float side = sign(uv.x);\n    uv.x = abs(uv.x);\n    vec4 head = Head(uv);\n    vec4 eye = Eye(within(uv, vec4(0.03, -.1, .37, .25)), side, m);\n    vec4 mouth = Mouth(within(uv, vec4(-.3, -.4, .3, -.1)));\n    vec4 brow = Brow(within(uv, vec4(.03,.2,0.4,0.45)));\n    \n    col = mix(col, head, head.a);\n    col = mix(col, eye, eye.a);\n    col = mix(col, mouth, mouth.a);\n    col = mix(col, brow, brow.a);\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec2 m = iMouse.xy / iResolution.xy;\n    m -= .5;\n    \n    if(m.x<-.49 && m.y<-.49) {\t\t\t// make it that he looks around when the mouse hasn't been used\n    \tfloat s = sin(t*.5);\n        float c = cos(t*.38);\n        \n        m = vec2(s, c)*.4;\n    }\n    \n    if(length(m) > .707) m *= 0.;\t\t// fix bug when coming back from fullscreen\n    \n    float d = dot(uv, uv);\n    uv -= m*sat(.23-d);\n    \n    m.x = sin(iTime)*.15;\n    m.y = cos(iTime)*.2;\n\n    // Output to screen\n    fragColor = Smiley(uv,m);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}