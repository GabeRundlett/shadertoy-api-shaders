{
    "Shader": {
        "info": {
            "date": "1514483849",
            "description": "While trying to code something else (a tree), I realized I could create snowflakes easily using polar coordinates with `floor` and other math functions.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XlSBz1",
            "likes": 19,
            "name": "Polar Snowflakes",
            "published": 3,
            "tags": [
                "snow",
                "winter",
                "snowflakes",
                "xmass"
            ],
            "usePreview": 0,
            "username": "antoineMoPa",
            "viewed": 4703
        },
        "renderpass": [
            {
                "code": "\nprecision highp float;\n\n\n// Convention:\n// vec2s ending with 'c'\n// are in circular coords\n// ex: pc = vec2(angle of p, length of p)\n\n\n\n#define time (iTime / 2.0)\n\n#define PI2 6.28\n#define PI 3.1416\n\n\n// Point to polar coord\nvec2 p_to_pc(vec2 p){\n    return vec2(atan(p.y, p.x), length(p));\n}\n\n// Polar coord to point\nvec2 pc_to_p(vec2 pc){\n    return vec2(pc.y * cos(pc.x), pc.y * sin(pc.x));\n}\n\n// I use these fields to create and tweak the snowflakes\nvec2 fieldA(vec2 pc){\n    // Modify angle and distance\n    pc.y += 0.02 * floor(cos(pc.x * 6.0 ) * 5.0);\n    pc.y += 0.01 * floor(10.0 * cos(pc.x * 30.0));\n    pc.y += 0.5 * cos(pc.y * 10.0);\n    \n    // Take back to position\n    return pc;\n}\n\n\n// Different values of f happen to give quite different\n// snowflake shapes. Interesting...\nvec2 fieldB(vec2 pc, float f){\n    // Modify angle and distance\n    pc.y += 0.1 * cos(pc.y * 100.0 + 10.0);\n    pc.y += 0.1 * cos(pc.y * 20.0 + f);\n    pc.y += 0.04 * cos(pc.y * 10.0 + 10.0);\n    \n    return pc;\n} \n\nvec4 snow_flake(vec2 p, float f){\n    \n    vec4 col = vec4(0.0);\n\n\tvec2 pc = p_to_pc(p * 10.0);\n    \n    \n    pc = fieldA(fieldB(pc, f));\n    \n    p = pc_to_p(pc);\n    \n    float d = length(p);\n    \n    if(d < 0.3){\n        col.rgba += vec4(1.0);\n    }\n    \n    return col;\n}\n\nvec4 snow(vec2 p){\n   \n    vec4 col = vec4(0.0);\n\n\tp.y += 2.0 * time;\n    \n    p = fract(p + 0.5) - 0.5;\n    \n    p *= 1.0;\n    \n    \n    p.x += 0.01 * cos(p.y * 3.0 + p.x * 3.0 + time * PI2);\n    \n    \n    // Just me pseudo randomly adding snowflakes\n    // Could be optimized by not calling the function 8 times\n    // (using some field distortion )\n    col += snow_flake(p, 1.0);\n    col += snow_flake(p + vec2(0.2, -0.1), 4.0);\n    col += snow_flake(p * 2.0 + vec2(-0.4, -0.5), 5.0);\n    col += snow_flake(p * 1.0 + vec2(-0.2, 0.4), 9.0);\n    col += 2.0 * snow_flake(p * 1.0 + vec2(0.4, -0.4), 5.0);\n    col += snow_flake(p * 1.0 + vec2(-1.2, 1.2), 9.0);\n    col += snow_flake(p * 1.0 + vec2(2.4, -1.2), 5.0);\n    col += snow_flake(p * 1.0 + vec2(-1.2, 1.1), 9.0);\n   \n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    \n\tvec2 uv = fragCoord.xy / iResolution.x;\n    float x = uv.x;\n    float y = uv.y;\n    \n    vec2 p = vec2(x, y) - vec2(0.5);\n   \t\n    vec4 col = vec4(0.2, 0.4, 0.7, 1.0);\n    \n    col += 0.3 * snow(p * 2.0);\n    col += 0.2 * snow(p * 4.0 + vec2(time, 0.0));\n    col += 0.1 * snow(p * 8.0);\n    \n    col.a = 1.0;\n    \n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}