{
    "Shader": {
        "info": {
            "date": "1523435845",
            "description": "Here is my attempt to make a user-friendly API to write things.\nWe need to keep the sampler2D parameter everywhere to put it in the Common tab... But I guess #define's do the job :p\nText disp auto-newline :)\nNumber disp robust to inf and nan :)",
            "flags": 0,
            "hasliked": 0,
            "id": "MdycDK",
            "likes": 8,
            "name": "Utils : font display",
            "published": 3,
            "tags": [
                "font",
                "display"
            ],
            "usePreview": 0,
            "username": "ABizard",
            "viewed": 922
        },
        "renderpass": [
            {
                "code": "\n/*\nAvailable functions : ## NOT UP TO DATE ##\n\nvec2 setDisplayUV(vec2 pos, float scale) : Init position and scale of the text\nvoid nextLine(inout vec2 uv, inout vec2 pos, float scale) : Go to next line\n\nvoid writeNormalChar(int char, vec3 char_color,\n\t\t\tinout vec2 uv, sampler2D font_tex, inout vec3 color)\n\nvoid writeWord(int[] word, int word_size, vec3 char_color,\n\t\t\tinout vec2 uv, sampler2D font_tex, inout vec3 color)\n\nvoid writeNumber(float number, int min_int_digits, int dec_digits, vec3 num_color,\n\t\t\tinout vec2 uv, sampler2D font_tex, inout vec3 color)\nmin_int_digits : minimum number of digits in integer part. 0's will be added if necessary.\ndec_digits : fixed number of decimal digits\n\n\nTo display characters of different size, use :\n\nvoid writeChar(int char, vec3 char_color,\n               float w, float x_offset,\n               inout vec2 uv, sampler2D font_tex, inout vec3 color)\nw : width of the char to be displayed\nx_offset : left margin before the char starts in the font\nSmall characters : target small w and large offset\nBig characters : target large w and small offset\n*/\n\n#define tex iChannel1\n\n#define NextLine nextLine(p)\n#define WriteChar(char,style) writeStandardChar(char,style,p,tex,color)\n#define WriteWord(word,style) writeWord(word,style,p,tex,color)\n#define WriteText(text,style) writeText(text,style,p,tex,color)\n#define WriteNumber(number,min_int_digits,dec_digits,style) writeNumber(number,min_int_digits,dec_digits,style,p,tex,color)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0,fragCoord/R.xy).rgb/2.;\n    \n    const int[] helloworld = int[](_H,_e,_l,_l,_o,_COMMA,_,_w,_o,_r,_l,_d,_,_EXCL,_);\n    const int[] date = int[](_D,_a,_t,_e,_COLON,_);\n    const int[] time = int[](_T,_i,_m,_e,_COLON,_);\n    \n    // Bottom left corner of the first letter of the line\n    PrintPosition p;\n    vec2 pos = vec2(75,270)/vec2(640,360);\n    float scale = 1./11.;\n    p = getDisplayPos(pos,scale);\n    \n    PrintStyle green_out_black = NewPrintStyle(GREEN,BLACK);\n    PrintStyle red_out_black = NewPrintStyle(RED,BLACK);\n    PrintStyle white_out_black = NewPrintStyle(WHITE,BLACK);\n    PrintStyle yellow_out_black = NewPrintStyle(YELLOW,BLACK);\n    PrintStyle blue_out_black = NewPrintStyle(LIGHT_BLUE,BLACK);\n    \n    WriteWord(helloworld,green_out_black);\n    // Smileys !\n    writeChar(29,NewPrintStyle(GREEN,1.-GREEN),1.,.3,p,tex,color);\n    writeChar(29,NewPrintStyle(ORANGE,1.-ORANGE),1.,.3,p,tex,color);\n    writeChar(29,NewPrintStyle(RED,1.-RED),1.,.3,p,tex,color);\n    NextLine;\n    \n    // Date\n    WriteWord(date,blue_out_black);\n    WriteNumber(iDate.z,2,0,red_out_black);\n    WriteChar(_SLASH,white_out_black);\n    WriteNumber(iDate.y+1.,2,0,red_out_black);\n    WriteChar(_SLASH,white_out_black);\n    WriteNumber(iDate.x,2,0,red_out_black);\n    NextLine;\n\n    // Time\n    WriteWord(time,yellow_out_black);\n    float h = floor(iDate.w/3600.);\n    float m = mod(floor(iDate.w/60.),60.);\n    float s = mod(iDate.w,60.);\n    WriteNumber(h,2,0,red_out_black);\n    int blinking_points = mod(iDate.w,1.)>.5 ? _COLON : _;\n    WriteChar(blinking_points,white_out_black);\n    WriteNumber(m,2,0,red_out_black);\n    WriteChar(blinking_points,white_out_black);\n    WriteNumber(s,2,2,red_out_black);\n    \n    // Lorem Ipsum\n#define LOREM_IPSUM 1\n#if LOREM_IPSUM\n    pos = vec2(10,130)/vec2(640,360);\n    scale = 1./30.;\n    p = getDisplayPos(pos,scale);\n    const int[] loremipsum = int[](_,_,_L,_o,_r,_e,_m,_,_i,_p,_s,_u,_m,_,_d,_o,_l,_o,_r,_,_s,_i,_t,_,_a,_m,_e,_t,_COMMA,_,_c,_o,_n,_s,_e,_c,_t,_e,_t,_u,_r,_,_a,_d,_i,_p,_i,_s,_c,_i,_n,_g,_,_e,_l,_i,_t,_COMMA,_,_s,_e,_d,_,_d,_o,_,_e,_i,_u,_s,_m,_o,_d,_,_t,_e,_m,_p,_o,_r,_,_i,_n,_c,_i,_d,_i,_d,_u,_n,_t,_,_u,_t,_,_l,_a,_b,_o,_r,_e,_,_e,_t,_,_d,_o,_l,_o,_r,_e,_,_m,_a,_g,_n,_a,_,_a,_l,_i,_q,_u,_a,_DOT);\n    WriteText(loremipsum,DefaultPrintStyle);\n#endif\n    \n    // Slider\n    vec2 pixel = fragCoord/R.xy;\n    const float line_pos = .12;\n    const float nan_lim = .1;\n    const float inf_lim = .9;\n    const float limits_size = .05;\n    vec3 line_color = mix(RED,\n                          mix(GREEN,BLUE,clamp((pixel.x - (inf_lim-limits_size))*200.,0.,1.)),\n                          clamp((pixel.x -(nan_lim+limits_size))*200.,0.,1.));\n    color = mix(color,line_color,\n                periodicDirac(pixel.y-line_pos,1.,4000.)*\n                smoothstep(nan_lim, nan_lim+.01, pixel.x)*\n               \tsmoothstep(inf_lim, inf_lim-.01, pixel.x));\n    \n    // Slider circle\n    float mousey = iMouse.y/R.y;\n    float mousex = (mousey>line_pos-.05 && mousey<line_pos+.05) ? clamp(iMouse.x/R.x,nan_lim,inf_lim) : .5;\n    \n    color = mix(YELLOW,color,POW4(smoothstep(0.,.015,length(fragCoord/R.x-vec2(mousex,line_pos*R.y/R.x)))));\n    \n    // Slider legend\n    pos = vec2(65,10)/vec2(640,360);\n    scale = 1./30.;\n    p = getDisplayPos(pos,scale);\n    WriteWord(int[](_N,_a,_N),red_out_black);\n    pos = vec2(316,10)/vec2(640,360);\n    p = getDisplayPos(pos,scale);\n    WriteChar(_0,green_out_black);\n    pos = vec2(545,10)/vec2(640,360);\n    p = getDisplayPos(pos,scale);\n    WriteWord(int[](_I,_n,_f),blue_out_black);\n    \n    \n    // Slider value\n    pos = vec2(296,55)/vec2(640,360);\n    scale = 1./20.;\n    p = getDisplayPos(pos,scale);\n    float x = 42.;\n    float nan = normalize(vec2(x-x)).x;\n    float inf = 1./(x-x);\n    float value = (mousex>nan_lim+limits_size ? (mousex<inf_lim-limits_size ? POW3((mousex-.5)*20.) : inf) : nan);\n    WriteNumber(value,1,2,yellow_out_black);\n    \n    fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BLACK\t\tvec3(0)\n#define WHITE\t\tvec3(1)\n#define GREY(A)\t\tvec3(A)\n#define RED  \t\tvec3(1,0,0)\n#define GREEN\t\tvec3(0,1,0)\n#define BLUE \t\tvec3(0,0,1)\n#define TURQUOISE \tvec3(0,1,1)\n#define PURPLE\t\tvec3(1,0,1)\n#define YELLOW \t\tvec3(1,1,0)\n#define VIOLET \t\tvec3(.5,0,1)\n#define LIGHT_BLUE\tvec3(0,.5,1)\n#define LIGHT_GREEN\tvec3(.5,1,0)\n#define LAGOON\t\tvec3(0,1,.5)\n#define ORANGE\t\tvec3(1,.5,0)\n#define MAGENTA\t\tvec3(1,0,.5)\n#define PINK\t\tvec3(1,.3,.7)\n\n\n#define POW2(A) ((A)*(A))\n#define POW3(A) (POW2(A)*(A))\n#define POW4(A) (POW3(A)*(A))\n\n#define PI 3.141593\n\n#define R iResolution\n\nint powInt(int a, int b){\n    int r = 1;\n    for(int i=0;i++<b;r*=a);\n    return r;\n}\n\nint intLog(int x, int base){\n    if(x<1) return 0;\n    int res = 0;\n    for(;x>=base;res++)\n        x /= base;\n    return res;\n}\n\n// Periodic function __|__|__|__|__\n// s : dirac compression\nfloat periodicDirac(float x, float period, float s){\n\treturn pow(abs(cos(x*(PI/period))),s);\n}\n\n////////////////////////////////\n\n// Ascii encoding. Takes ~900 chars so you may want to take onlywhat you need\nconst int\t_=32,\n\t\t\t_EXCL=33,\t\t// !\n\t\t\t_QUOTE=34,\t\t// \"\n\t\t\t_SHARP=35,\t\t// #\n\t\t\t_DOLLAR=36,\t\t// $\n\t\t\t_PERCENT=37,\t// %\n\t\t\t_AMPER=38,\t\t// &\n\t\t\t_SQUOTE=39,\t\t// '\n\t\t\t_LPAR=40,\t\t// (\n\t\t\t_RPAR=41,\t\t// )\n\t\t\t_ASTERISK=42,\t// *\n\t\t\t_PLUS=43,\t\t// +\n\t\t\t_COMMA=44,\t\t// ,\n\t\t\t_MINUS=45,\t\t// -\n\t\t\t_DOT=46,\t\t// .\n\t\t\t_SLASH=47,\t\t// /\n\t\t\t_0=48,\t_1=49,\t_2=50,\t_3=51,\t_4=52,\n    \t\t_5=53,\t_6=54,\t_7=55,\t_8=56,\t_9=57,\n    \t\t_COLON=58,\t\t// :\n    \t\t_SEMICOLON=59,\t// ;\n    \t\t_LT=60,\t\t\t// <\n    \t\t_EQ=61,\t\t\t// =\n    \t\t_GT=62,\t\t\t// >\n    \t\t_QUEST=63,\t\t// ?\n    \t\t_AT=64,\t\t\t// @\n\t\t\t_A=65,\t_B=66,\t_C=67,\t_D=68,\t_E=69,\n\t\t\t_F=70,\t_G=71,\t_H=72,\t_I=73,\t_J=74,\n\t\t\t_K=75,\t_L=76,\t_M=77,\t_N=78,\t_O=79,\n\t\t\t_P=80,\t_Q=81,\t_R=82,\t_S=83,\t_T=84,\n\t\t\t_U=85,\t_V=86,\t_W=87,\t_X=88,\t_Y=89,\n\t\t\t_Z=90,\n\t\t\t_a=97,\t_b=98,\t_c=99,\t_d=100,\t_e=101,\n\t\t\t_f=102,\t_g=103,\t_h=104,\t_i=105,\t_j=106,\n\t\t\t_k=107,\t_l=108,\t_m=109,\t_n=110,\t_o=111,\n\t\t\t_p=112,\t_q=113,\t_r=114,\t_s=115,\t_t=116,\n\t\t\t_u=117,\t_v=118,\t_w=119,\t_x=120,\t_y=121,\n\t\t\t_z=122,\n    \t\t_alpha=128,\t\t_beta=129,\t_gamma=130,\t\t_delta=131,\n    \t\t_epsilon=132,\t_theta=133,\t_lambda=134,\t_mu=135,\n    \t\t_xi=136,\t\t_pi=137,\t_rho=138,\t\t_sigma=139,\n    \t\t_tau=140,\t\t_phi=141,\t_psi=142,\t\t_omega=143,\n    \t\t_GAMMA=144,\t\t_DELTA=145,\t_THETA=146,\t\t_LAMBDA=147,\n    \t\t_PI=148,\t\t_SIGMA=149,\t_PHI=150,\t\t_PSI=151,\n    \t\t_OMEGA=152;\n\nstruct PrintPosition{\n    vec2 uv,\n         pos,\n         R;\n    float scale;\n};\n\nstruct PrintStyle{\n    vec3 char_color,\n         outline_color;\n    float outline_size;\n};\n\nPrintStyle NewPrintStyle(vec3 col1, vec3 col2, float w){\n\treturn PrintStyle(col1,col2,w);\n}\nPrintStyle NewPrintStyle(vec3 col1, vec3 col2){\n\treturn PrintStyle(col1,col2,.05);\n}\nPrintStyle NewPrintStyle(vec3 col){\n\treturn PrintStyle(col,col,0.);\n}\n#define DefaultPrintStyle NewPrintStyle(WHITE,BLACK)\n\n#define getDisplayPos(pos,scale) PrintPosition((fragCoord-pos*R.xy)/(scale*R.x),pos,R.xy,scale);\n#define nextLine(p)\tp.pos.y -= scale*1.5,\\\n\t\t\t\t\tp = getDisplayPos(p.pos,p.scale);\n\nvoid writeChar(int char, PrintStyle style,\n               float w, float x_offset, // Dimensions of the bbox of the char\n               inout PrintPosition p, sampler2D font_tex, inout vec3 color){\n    \t#define getFont(uv,char) texture(font_tex, (uv+vec2(char%16,15-char/16))/16.)\n\t\tvec2 uv = p.uv;\n    \tuv.x += x_offset;\n    \tfloat outline_size = style.outline_size;\n    \tif(uv.x>0. && uv.x<w && uv.y>0. && uv.y<1.){\n            // We are inside the bbox, display the char\n            color = mix(color,style.outline_color,smoothstep(0.,-1./p.R.y,getFont(uv,char).a - outline_size-.5));\n            color = mix(color,style.char_color, getFont(uv,char).r);\n        }\n\t\tuv.x -= w; // move uv for next char\n    \tp.uv = uv;\n}\n\nfloat default_ch_w = .8,\n      default_ch_off = .3;\n\nvoid writeStandardChar(int char, PrintStyle style,\n                     inout PrintPosition p, sampler2D font_tex, inout vec3 color){\n    writeChar(char,style,\n              default_ch_w,default_ch_off,\n              p,font_tex,color);\n}\n\n#define writeText(text, style, p, font_tex, color)\\\n\t{int chars_per_line = int((1.-p.pos.x)/(p.scale*(default_ch_w-default_ch_off)));\\\n\tfor(int i=0;i<text.length();i++){\\\n        writeStandardChar(text[i],style,p,font_tex,color);\\\n        if((i+1)%chars_per_line==0)\\\n            nextLine(p);\\\n    }}\n\n#define writeWord(word, style, p, font_tex, color)\\\n\tfor(int i=0;i<word.length();i++)\\\n        writeStandardChar(word[i],style,p,font_tex,color);\n\nvoid writeNumber(float number, int min_int_digits, int dec_digits,\n                 PrintStyle style,\n                 inout PrintPosition p, sampler2D font_tex, inout vec3 color){\n\t\n    if(isnan(number)){\n    \tPrintStyle NaN_style = PrintStyle(BLACK,RED,.05);\n        writeWord(int[](_N,_a,_N),NaN_style,p,font_tex,color);\n    }\n    else if(isinf(number)){\n        PrintStyle Inf_style = PrintStyle(BLACK,LIGHT_BLUE,.05);\n        writeWord(int[](_I,_n,_f),Inf_style,p,font_tex,color);\n    }\n    else{\n        // Display the minus if number is negative\n        if(number<0.)\n            writeStandardChar(_MINUS,style,p,font_tex,color);\n        \n        // Round the number according to the number of decimal digits\n        float decimal_digits_factor = float(powInt(10,dec_digits));\n        int rounded_number = int(round(abs(number)*decimal_digits_factor));\n        \n        int int_part = rounded_number/int(decimal_digits_factor);\n        int int_digits = 1 + intLog(int_part,10);\n        // Fill with zeros to match min digits\n        for(int i=0;i++< min_int_digits - int_digits ;)\n            writeStandardChar(_0,style,\n                              p,font_tex,color);\n        \n        \n        int digits = int_digits+dec_digits;\n        for(int x = powInt(10,digits);digits>0;digits--){\n            if(digits==dec_digits)\n                // Dot\n                writeChar(_DOT,style,\n                      .65,.45,\n                      p,font_tex,color);\n            writeStandardChar(_0+rounded_number/(x/=10),style,\n                              p,font_tex,color);\n            rounded_number%=x;\n        }\n    }\n        \n}\n\nvoid writeNumber(int number, int min_int_digits, PrintStyle style,\n                 inout PrintPosition p, sampler2D font_tex, inout vec3 color){\n    writeNumber(float(number),min_int_digits,0,\n                style,\n                p,font_tex,color);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}