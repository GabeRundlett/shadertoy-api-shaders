{
    "Shader": {
        "info": {
            "date": "1538458644",
            "description": "yep",
            "flags": 0,
            "hasliked": 0,
            "id": "llGyz1",
            "likes": 14,
            "name": "spinnerjoy1.1",
            "published": 3,
            "tags": [
                "yep"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 705
        },
        "renderpass": [
            {
                "code": "// parameters\n#define BOX_SIZE      18.0\n#define LINE_WIDTH     1.5\n#define RENDER_CROSS   1\n#define MOUSE_AMOUNT   0.0\n#define LINE_LENGTH    6.0\n\n// careful with this value. iterations = (2n + 1)^2\n// needs to be large enough to fit LINE_LENGTH.\n#define offsetSize     3.0\n\n\n\n// not parameters\n#define LARGE_VALUE 100000000.0\n#define STRAIGHT       1\n\nfloat oxeVec2f_distanceRight_PointLine(vec2 linePt, vec2 unitDir, vec2 pt)\n{\n   float vx = pt.x - linePt.x;\n   float vy = pt.y - linePt.y;\n   return unitDir.y * vx - unitDir.x * vy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float boxDim = BOX_SIZE;\n    vec2 lineCenterC = vec2(boxDim, boxDim) * 0.5;\n    vec2 fc2 = fragCoord - (iResolution.xy * 0.5);\n    vec2 pt  = mod(fc2, boxDim);\n    \n    #if STRAIGHT\n    vec2 boxPosC = (floor(fc2 / boxDim) + vec2(0.5)) * boxDim + iResolution.xy * 0.5;\n    #else\n    vec2 boxPosC = fc2;\n    #endif\n    \n    vec3 col = vec3(0.);\n    \n    float r = LINE_LENGTH;\n        \n    for (float dx = -offsetSize; dx <= offsetSize; dx += 1.0) {\n\t    for (float dy = -offsetSize; dy <= offsetSize; dy += 1.0) {\n            vec2 offset = vec2(dx, dy) * boxDim;\n            vec2 lineCenter = lineCenterC + offset;\n            vec2 boxPos = boxPosC + offset;\n\t\t    float boxDist1 = length(boxPos - iResolution.xy * 0.5) *  1.0;\n\t\t    float boxDist2 = length(boxPos - iMouse.xy)            * -MOUSE_AMOUNT;\n\t\t\tfloat boxDist = boxDist1 + boxDist2;\n    \n\t\t    float t = iTime * 1.4 * (boxDist * 0.003 + 0.2);\n            vec2 lineDir = vec2(cos(t), sin(t));\n    \n\t\t    float distN = length(pt - lineCenter) / (boxDim * 0.5);\n    \n            float d = 0.0;\n            float sd;\n            sd = oxeVec2f_distanceRight_PointLine(lineCenter, lineDir, pt);\n            d  = max(d, smoothstep(LINE_WIDTH, 0.0, abs(sd)));\n    \n            #if RENDER_CROSS\n            lineDir = vec2(-lineDir.y, lineDir.x);\n            sd = oxeVec2f_distanceRight_PointLine(lineCenter, lineDir, pt);\n            d  = max(d, smoothstep(LINE_WIDTH, 0.0, abs(sd)));\n            #endif // RENDER_CROSS\n\n            // restrict to a circle\n            d *= smoothstep(r * 1.0, r * 0.5, distN);\n            // mute the middle\n            d *= smoothstep(r * 0.0, r * 0.2, distN);\n            \n    \n            // grey in the middle\n            // d *= smoothstep(0.0, 0.8, distN) * 0.5 + 0.5;\n    \n            col.xyz += d;\n   \t\t    // col.z   = boxDist / iResolution.y;\n        }\n    }\n\t\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}