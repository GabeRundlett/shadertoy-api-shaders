{
    "Shader": {
        "info": {
            "date": "1574566780",
            "description": "Bilateral Filter with performance optimized precomputed kernel.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdjXWd",
            "likes": 6,
            "name": "Bilateral Filter",
            "published": 3,
            "tags": [
                "filter",
                "vision",
                "bilateral"
            ],
            "usePreview": 1,
            "username": "athlete",
            "viewed": 745
        },
        "renderpass": [
            {
                "code": "#define SIGMA 10.0\n#define BSIGMA 0.1\n#define MSIZE 15\n\n#define precomputedKernel false\n\n\n//sigma 10.0, MSIZE 15\n//in GLSL ES 3.0 you could use this (instead of calling init kernel) to make it even faster\n//const float kernel[MSIZE] = float[MSIZE](0.031225216, 0.033322271, 0.035206333, 0.036826804, 0.038138565, 0.039104044, 0.039695028, 0.039894000, 0.039695028, 0.039104044, 0.038138565, 0.036826804, 0.035206333, 0.033322271, 0.031225216);\nfloat kernel[MSIZE];\n\nvoid initKernel()\n{\n    if(!precomputedKernel)\n    {\n        for(int i=0; i<MSIZE; i++)\n            kernel[i] = .0;\n    \treturn;\n    }\n    \n\tkernel[0] = 0.031225216;\n    kernel[1] = 0.033322271;\n    kernel[2] = 0.035206333;\n    kernel[3] = 0.036826804;\n    kernel[4] = 0.038138565;\n    kernel[5] = 0.039104044;\n    kernel[6] = 0.039695028;\n    kernel[7] = 0.039894000;\n    kernel[8] = 0.039695028;\n    kernel[9] = 0.039104044;\n    kernel[10] = 0.038138565;\n    kernel[11] = 0.036826804;\n    kernel[12] = 0.035206333;\n    kernel[13] = 0.033322271;\n    kernel[14] = 0.031225216;\n}\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nfloat normpdf3(in vec3 v, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*dot(v,v)/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initKernel();\n\tvec3 c = texture(iChannel0, fragCoord.xy/iResolution.xy).rgb;\n\t//declare stuff\n\tconst int ksize = (MSIZE-1)/2;\n\tvec3 final_colour = vec3(0.0);\n\t\n    if(!precomputedKernel)\n    {\n        //create the 1-d kernel\n        for (int j = 0; j <= ksize; ++j)\n        {\n            kernel[ksize+j] = kernel[ksize-j] = normpdf(float(j), SIGMA);\n        }\n    }\n\t\t\n\tfloat Z = 0.0;\n\tvec3 cc;\n\tfloat factor;\n\tfloat bZ = 0.39894/BSIGMA; // == 1.0/normpdf(0.0, BSIGMA);\n\n\t//read out the texels\n\tfor(int i=-ksize; i <= ksize; ++i)\n\t{\n\t\tfor (int j=-ksize; j <= ksize; ++j)\n\t\t{\n\t\t\tvec2 offset;\n\t\t\toffset.x = float(i)/iResolution.x;\n\t\t\toffset.y = float(j)/iResolution.y;\n\t\t\tcc = texture(iChannel0, fragCoord.xy/iResolution.xy + offset).rgb;\n\t\t\tfactor = normpdf3(cc-c, BSIGMA)*bZ*kernel[ksize+j]*kernel[ksize+i];\n\t\t\tZ += factor;\n\t\t\tfinal_colour += factor*cc;\n\t\t}\n\t}    \n    \n    if (fragCoord.x > iMouse.x)\n\t{\n        vec3 currFragment = texture(iChannel0, (fragCoord.xy / iResolution.xy)).rgb;\n\t\tfragColor = vec4(currFragment, 1.0);\n\t}\n    else\n        fragColor = vec4(final_colour/Z,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}