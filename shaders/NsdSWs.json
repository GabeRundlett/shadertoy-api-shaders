{
    "Shader": {
        "info": {
            "date": "1638290199",
            "description": "poggers",
            "flags": 0,
            "hasliked": 0,
            "id": "NsdSWs",
            "likes": 4,
            "name": "Numerical Derivative",
            "published": 3,
            "tags": [
                "derivative",
                "numerical",
                "numeric"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "#define dt 0.001\n\n/*\nfloat f(float x)\n{\n    return tanh(x);\n}\n*/\n\n// Suggested demonstration from elenzil (https://www.shadertoy.com/user/elenzil)\nfloat f(float x)\n{\n    float[8] fs;\n    int n = 0;\n    fs[n++] =  tanh(x);\n    fs[n++] =  sinh(x);\n    fs[n++] =  sin (x);\n    fs[n++] =  pow(x, 3.0);\n    fs[n++] =  pow(x, 2.0) * 3.0;\n    fs[n++] =  x * 6.0;\n    fs[n++] =  x;\n    fs[n++] = -x;\n    \n    float t = iTime * 0.25;\n    \n    float T = mod(t, float(fs.length() + 1));\n    int n1 = int(t) % fs.length();\n    int n2 = int((n1 + 1) % fs.length());\n    \n    float m = smoothstep(0.0, 1.0, fract(T) * 2.0);    \n    \n    return mix(fs[n1], fs[n2], m);\n}\n\nfloat df(float x)\n{\n    //return ( f(x + dt) - f(x) ) / dt;\n    return ( f(x + dt) - f(x - dt) ) / (2.0 * dt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 8.0 * (fragCoord - 0.5 * iResolution.xy) / max(iResolution.x, iResolution.y);\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    fragColor.x =  f(uv.x) > uv.y ? 0.5               : fragColor.x;\n    fragColor.x = df(uv.x) > uv.y ? 0.5 + fragColor.x : fragColor.x;\n\n    fragColor = fragColor.xxxw;\n\n    if(abs(uv.x) < 0.01)\n    {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    if(abs(uv.y) < 0.01)\n    {\n        fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n    }\n    if(uv.x * uv.x + uv.y * uv.y < 0.001)\n    {\n        fragColor = vec4(1.0, 1.0, 0.0, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}