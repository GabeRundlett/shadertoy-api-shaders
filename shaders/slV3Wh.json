{
    "Shader": {
        "info": {
            "date": "1637635054",
            "description": "This is a parameterized spirograph system based on the Wikipedia article ([url]https://en.wikipedia.org/wiki/Spirograph[/url]).",
            "flags": 32,
            "hasliked": 0,
            "id": "slV3Wh",
            "likes": 6,
            "name": "spirograph mechanics",
            "published": 3,
            "tags": [
                "spirograph"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "// Image\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv  = fragCoord / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Common\n\nvec2 spiro(float t, float R, float k, float l) {\n    // https://en.wikipedia.org/wiki/Spirograph\n    return vec2(\n        R * ((1.0 - k) * cos(t) + l * k * cos((1.0 - k) / k * t)),\n        R * ((1.0 - k) * sin(t) - l * k * sin((1.0 - k) / k * t))\n    );\n}\n\nfloat udSegment(in vec2 p, in vec2 a, in vec2 b) {\n    // https://www.shadertoy.com/view/3tdSDj\n    vec2 ba = b - a;\n    vec2 pa = p - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - h * ba);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Buffer A\n\nvoid mainImage_remaindeer(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y;\n    vec2 center = iResolution.xy / iResolution.y / 2.0;\n    vec3 col = vec3(0);\n    vec3 rnd = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n    \n    // https://en.wikipedia.org/wiki/Spirograph\n    float R = 0.5;                                     // outer circle radius\n    float l = 0.7;                                     // dimensionless l parameter = rho / r\n    float k = 0.6;                                     // dimensionless k parameter = r   / R\n    float t = iTime;                                   // outer circle tangent point rotation angle\n    float r = k * R;                                   // inner circle radius\n    float rho = l * r;                                 // distance from inner circle center to the pen\n    float tp = -((R - r) / r) * t;                     // inner circle tangent point rotation angle\n    vec2 pc = (R - r) * vec2(cos(t), sin(t)) + center; // inner circle center\n    vec2 A = rho * vec2(cos(tp), sin(tp)) + pc;        // pen coordinate\n    vec2 point = spiro(t, R, k, l) + center;           // also pen coordinate\n\n    /****/ if (length(uv - center) < 0.005) {\n        col = vec3(1);\n    } else if (length(uv - point ) < 0.005) {\n        col = rnd;\n    } else if (length(uv - point ) < 0.005 * 2.0) {\n        col = vec3(1);\n    } else if (udSegment(uv, A, pc) < 0.0005) {\n        col = vec3(1);\n    } else if (r - 0.0005 < length(uv - pc) && length(uv - pc) < r + 0.0005) {\n        col = rnd;\n    } else if (R - 0.0025 < length(uv - center) && length(uv - center) < R + 0.0025) {\n        col = vec3(1);\n    } else {\n        vec2 uv = fragCoord / iResolution.xy;\n        col = mix(col, texture(iChannel0, uv).xyz, 0.9995);\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n\n// Prevent time-skipping due to changing framerate\nvoid mainImage_oneshade(out vec4 fragColor, in vec2 fragCoord) {\n    #define iTimeDelta 0.01\n    #define iTime (float(iFrame) * iTimeDelta)\n    #define draw(dist, color) col = max(col, color * smoothstep(aa, 0.0, dist))\n    \n    vec2 uv = fragCoord / iResolution.y;\n    vec2 center = iResolution.xy / iResolution.y / 2.0;\n    vec3 col = texture(iChannel0, fragCoord / iResolution.xy).xyz * 0.99;\n    vec3 rnd = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n    \n    // https://en.wikipedia.org/wiki/Spirograph\n    float R = 0.5;                                     // outer circle radius\n    float l = 0.7;                                     // dimensionless l parameter = rho / r\n    float k = 0.6;                                     // dimensionless k parameter = r   / R\n    float t = iTime;                                   // outer circle tangent point rotation angle\n    float r = k * R;                                   // inner circle radius\n    float rho = l * r;                                 // distance from inner circle center to the pen\n    float tp = -((R - r) / r) * t;                     // inner circle tangent point rotation angle\n    vec2 pc = (R - r) * vec2(cos(t), sin(t)) + center; // inner circle center\n    vec2 A = rho * vec2(cos(tp), sin(tp)) + pc;        // pen coordinate\n    vec2 point = spiro(iTime, R, k, l) + center;       // also pen coordinate\n\n    float aa = 2.0 / iResolution.y; // 2x pixel width\n    draw(length(uv - center) - 0.005, vec3(1.0));\n\n    float distPoint = length(uv - point);\n    draw(distPoint - 0.005, rnd);\n    draw(distPoint - 0.01, vec3(1.0));\n\n    draw(udSegment(uv, A, pc) - 0.0005, vec3(1.0));\n    draw(abs(length(uv - pc) - r) - 0.0005, rnd);\n    draw(abs(length(uv - center) - R) - 0.0025, vec3(1.0));\n\n    fragColor = vec4(col, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    mainImage_remaindeer(fragColor, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}