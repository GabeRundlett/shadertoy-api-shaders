{
    "Shader": {
        "info": {
            "date": "1723140604",
            "description": "originals https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/ssVGWc",
            "flags": 0,
            "hasliked": 0,
            "id": "McByDt",
            "likes": 1,
            "name": " color fractal tunnel",
            "published": 3,
            "tags": [
                "fractal",
                "tunnel",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 180
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)cos((h)*6.3+vec3(0,23,21))*.5+.5\n#define time iTime\n#define resolution iResolution.xy\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon(vec2 p, float r)\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 23.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nconst float pi = acos(-1.);\nconst float pi2 = 2. * pi;\n\nmat2 rot(float a){\n        float s = sin(a), c = cos(a);\n        return mat2(c, s, -s, c);\n}\n\nvec2 pmod(vec2 p, float r){\n        float a = atan(p.x, p.y) + pi / r;\n        float n = pi2 / r;\n        a = floor(a/n) * n;\n        return p * rot(-a);\n}\n\nfloat cube(vec3 p, vec3 s){\n        return length(max(abs(p) - s, 0.));\n}\n\nfloat map(vec3 p){\n\n        vec3 q = p;\n        float d = 1e5;\n        q.xy = pmod(q.xy, 8.);\n       \n       \n        q = mod(q, .8) - .4;\n        \n        float b = cube(q, vec3(.15));\n        float h1 = cube(q, vec3(10., .01, .01));\n        float h2 = cube(q, vec3(.01, 10., .01));\n        float h3 = cube(q, vec3(.1, .1, 10.));\n        float h = min(min(h1, h2), h3);\n        d = min(min(d, b), h);\n        \n        return d;\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n    \n      vec2 p = (gl_FragCoord.xy * 2. - resolution) / min(resolution.x, resolution.y);\n\n        vec3 ro = vec3(0., 0., 3.);\n      \n        float ft = abs(sin(time/2.));\n        \n               \n         ro.z+=iTime*1.01;\n                \n        vec3 ta = vec3(0.);\n        vec3 cDir = normalize(ta - ro);\n        vec3 cUp = vec3(0., 1., 0.);\n        vec3 cSide = cross(cDir, cUp);\n        float fov = 1.;\n        vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * fov);\n\n        vec3 destColor = vec3(1.);\n        vec3 rayPos = ro;\n        float d, t = 0.;\n        float mainEmissive = 0.;\n\n        for(int i=0; i<74; i++){\n                rayPos = ro + ray * d;\n                t = map(rayPos);\n                mainEmissive += exp(abs(t) * -.2);\n                if(t < .001){\n                        destColor = (1. + abs(tan(time))) * vec3(0.1, 0.3, 1.) * mainEmissive * .03 + abs(1. - exp(d*d*.005));\n                        break;\n                }\n                d += t;\n        }\n        \n    vec2 uv = (C.xy / iResolution.xy) - .5;\n    vec3 p3,r=iResolution,\n    d3=normalize(vec3((C-.5*r.xy)/r.y,1));  \n    float i=0.,g=0.,e,s;\n    for(;++i<99.;){\n        p3=d3*g;\n      \tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    \n     \n        \n        p3=atan(sin(p3*4.));\n        float sdf=sdHexagon(p3.xy,2.);\n        p.xy=vec2(sdf);\n        s=3.;\n          p3.xy*=ma;\n        for(int i=0;i++<6;){\n\t\t\tp3=vec3(3.2,6.8,5.2)-abs(p3+destColor);      \n          \n          \tp3=p3.x<p3.y?p3.zxy:p3.zyx;\n            s*=e=17.8/min(dot(p3,p3),11.8);\n            p3=abs(p3)*e;\n        }\n        g+=e=abs(p3.y)/s+.001;\n        O.xyz+=(H(log(s)*.8)+.5)*exp(sin(i))/e*3e-5;\n    }\n    O+=O*O*O;\n   \n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,1.55)*1., 1.0);\n    \n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}