{
    "Shader": {
        "info": {
            "date": "1699715452",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nAA in Buffer A - turn on with #define AA 2",
            "flags": 32,
            "hasliked": 0,
            "id": "dlKSzm",
            "likes": 26,
            "name": "Year of Truchets #059",
            "published": 3,
            "tags": [
                "raymarching",
                "texture",
                "truchet"
            ],
            "usePreview": 1,
            "username": "byt3_m3chanic",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #059\n    11/11/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n\n    AA in Buffer A - turn on with #define AA 2\n*/\n\nfloat offset[3] = float[]( .0, 1.35, 2.95 );\nfloat weight[3] = float[]( .2, .35, .075 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\n    vec3 C = texture(iChannel0, uv).rgb;\n    vec3 R = texture(iChannel0, uv).rgb * weight[0];\n    for (int i=1; i<3; i++) {\n      R += texture(iChannel0, uv + vec2(offset[i])/iResolution.xy, 0.).rgb * weight[i];\n      R += texture(iChannel0, uv - vec2(offset[i])/iResolution.xy, 0.).rgb * weight[i];\n    }\n    \n    // mask for effect and mixdown \n    float dt = distance(uv.xy,vec2(.5))*.32;\n    dt = smoothstep(.82,.965,1.-dt);\n    vec3 Color = mix(R,C,dt);\n    \n    // output\n    Color=pow(Color, vec3(.4545));\n    fragColor = vec4(Color,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #059\n    11/11/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n\n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI         3.141592653\n\n#define MAX_DIST    35.\n#define MIN_DIST    1e-5\n\n// AA - comment out to disable\n//#define AA 2\n\nfloat vmul(vec2 v) {\n    return v.x * v.y;\n}\n\n// globals\nvec3 hit,hitPoint;\nfloat tspeed=0.,gs,gg,time;\n\nfloat hash21(vec2 p){return fract(sin(dot(p,vec2(27,32)))*4832.3234); }\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat box(vec3 p, vec3 b) {vec3 q = abs(p) - b;return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);}\n\n//@iq extrude\nfloat opx(in float d, in float p, in float h){\n    vec2 w = vec2(d,abs(p)-h);\n  \treturn min(max(w.x, w.y),0.)+length(max(w,0.));\n}\n\nvec2 map(vec3 pos){\n\n    vec2 res = vec2(1e5,0),\n          uv = pos.xz*.235;\n    \n    vec2 id = floor(uv),\n          q = fract(uv)-.5;\n    \n    float rnd = hash21(id+vec2(0,iDate.z)); \n    if(rnd>.5) q.x=-q.x; \n\n    rnd = fract(rnd*32.232);\n    float flt = fract(rnd*31.232);\n\n    vec2 q1 = q-.5, q2 = q+.5;\n    \n    vec2 cv = vec2(length(q1),length(q2));\n    vec2 p = cv.x<cv.y?q1:q2;\n    \n    float ff  = .25+.25*sin(pos.x*.35);\n          ff += .25+.25*cos(pos.z*.65);\n          ff +=  1.3;\n    \n    float thc = .18, wdt = .365;\n    if (flt>.8) { thc = .05;wdt = .3;ff += .45; }\n\n    gs = ff;\n    \n    float k = length(p)-.5; \n          k = abs(k)-thc;\n    \n    if(rnd>.75) k = min(length(q.x)-thc,length(q.y)-thc);\n\n    float d = opx(k,pos.y,3.);\n    float b = box(vec3(q.x,pos.y,q.y),vec3(wdt,ff,wdt))-.1;\n\n    if(flt<.8) { d=max(b,-d); } else { d=max(d,b); }\n    \n    if(d<res.x) {\n        res = vec2(d,flt<.8?flt<.4?2.:4.:5.);\n        hit=pos;\n    }\n\n    float gnd = pos.y+.01;\n    if(gnd<res.x) {\n        float gnt = d-.05;\n        res = vec2(gnd,gnt<gnd?3.:1.);\n        hit=pos;\n    }\n\n    return res;\n}\n\n// Tetrahedron technique @iq\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\n// Tri-Planar blending function. GPU Gems 3 - Ryan Geiss:\nvec3 tex3D(sampler2D t, in vec3 p, in vec3 n ){\n    n = max(abs(n), MIN_DIST);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(t, p.yz).xyz;\n    vec3 ty = texture(t, p.zx).xyz;\n    vec3 tz = texture(t, p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n;\n}\n\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, float last, inout float d, vec2 uv) {\n\n    float m = 0.;\n    vec3 color = vec3(0), n = vec3(0), p = vec3(0);\n\n    // marcher\n    for(int i=0;i<132;i++) \n    { \n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(abs(ray.x)<MIN_DIST*d||d>MAX_DIST)break;\n        d += ray.x*.7;\n        m  = ray.y;\n    } \n    \n    hitPoint=hit;\n    gg=gs;\n    \n    if (d < MAX_DIST) \n    {\n        vec3 n = normal(p, d);\n        vec3 lpos =vec3(-4,18,12.*sin(tspeed));\n        vec3 l = normalize(lpos-p);\n        float diff = clamp(dot(n,l),.05,1.);\n        \n        //shadows\n        float shdw = 1.;\n        for( float t=.1; t < 8.; ) \n        {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 32.*h/t);\n            t += h;\n            if( shdw<MIN_DIST) break;\n        }\n        diff = mix(diff,diff*shdw,.65);\n\n        float spec = .75 * pow(max(dot(normalize(p-ro),reflect(l,n)),.0),75.);\n        vec3 h = vec3(0);\n \n        if(m==5.) \n        {\n            h = mix(vec3(.5,.3,.0),tex3D(iChannel1,hitPoint,n).rgb,.5);\n            float dd = .25+.25*sin(hitPoint.y*42.);\n            h = mix(h,h*.7,smoothstep(0.,.3,dd));\n            ref = mix(h*.6,vec3(0),dd);\n        }\n        if(m==4.) \n        {\n            h = mix(vec3(.62,.57,.46),tex3D(iChannel2,hitPoint*.5,n).rgb,.5);\n            float dd = hitPoint.y>(gg-.6)&&hitPoint.y<(gg-.15)? 1.:0.;\n            float dx = hitPoint.y>(gg-.5)&&hitPoint.y<(gg-.25)? 1.:0.;\n            h = mix(h,h*.7,dd);\n            h = mix(h,vec3(1),dx);\n            ref = mix(h*.75,vec3(0),dd);\n        }\n        if(m==3.) \n        { \n            h = vec3(.05); \n        }\n        if(m==2.) \n        {\n            h = tex3D(iChannel0,hitPoint*.35,n).rgb;\n            float dd = hitPoint.y>(gg-.6)&&hitPoint.y<(gg-.15)? 1.:0.;\n            float dx = hitPoint.y>(gg-.5)&&hitPoint.y<(gg-.25)? 1.:0.;\n            h = mix(h,h*.7,dd);\n            h = mix(h,vec3(1),dx);\n            ref = mix(vec3(0),vec3(1),dd);\n        }\n        if(m==1.) \n        { \n            h = vec3(.87,.68,.38)*tex3D(iChannel1,hitPoint,n).rgb;\n            ref = h;\n        }\n        \n        color = h*diff+spec;\n        ro = p+n*.001;\n        rd = reflect(rd,n);\n    }\n\n    return vec4(color,d);\n}\n\nvec3 renderFull( in vec2 uv )\n{   \n\n    vec3 ro = vec3(22,0,10.5);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    float x = M.xy==vec2(0) ? 0. : -(M.y/R.y*.2-.1)*PI;\n    float y = M.xy==vec2(0) ? 0. : -(M.x/R.x*1.-.5)*PI;\n\n    mat2 rx = rot(-.87-x), ry = rot(y+T*.02);\n    ro.zy *= rx; ro.xz *= ry; \n    rd.zy *= rx; rd.xz *= ry;\n    \n    // reflection loop (@BigWings)\n    vec3 C = vec3(0), ref=vec3(0), fil=vec3(1.);\n    float d = 0.,a = 0.;\n\n    for(float i=0.; i<2.; i++) {\n        vec4 pass = render(ro, rd, ref, i, d, uv);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.)a=pass.w;\n    }\n           \n    return mix(vec3(.26,.32,.36),C,exp(-.00003*a*a*a*a));\n}\n\n\nvoid mainImage(out vec4 O, in vec2 F) { \n\n    vec3 col = vec3(0); \n    vec2 o = vec2(0);\n\n    // AA and motion blur from iq https://www.shadertoy.com/view/3lsSzf\n    #ifdef AA\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n    \to = vec2(float(m),float(n)) / float(AA) - 0.5;\n    #endif\n    \tvec2 p = (-R.xy + 2. * (F + o)) / R.x;\n    \tcol += renderFull(p);\n        \n    #ifdef AA\n    }\n    col /= float(AA*AA);\n    #endif\n\n    O = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}