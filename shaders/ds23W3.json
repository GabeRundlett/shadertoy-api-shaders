{
    "Shader": {
        "info": {
            "date": "1668268071",
            "description": "I love fantasy underwater universe, so I gave it a try\nI wanted to raymarch the mushroom cap to make them emit some light, but it may be too costly",
            "flags": 32,
            "hasliked": 0,
            "id": "ds23W3",
            "likes": 19,
            "name": "Underwater Mushroom forest",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "water",
                "underwater",
                "mushroom"
            ],
            "usePreview": 1,
            "username": "rcargou",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\nfloat mapWorm(vec3 p, out vec2 id, float h) {\n    return 1E10;\n    vec2 inset = -(p.yz) * .3 * cos( +iTime + 5.*p.x) * .051*cos( +iTime + 5.*p.x);\n    p.yz -= inset;\n    id.x = p.x + iTime/2.;\n    float s = .2;// + .02*cos( +iTime *10.+ 5.*p.x);\n    p.z -= 5.;\n    p.y += h - s;\n    p.z += cos(p.x + iTime) * sin(iTime);\n    float d = length(p.yz) - s;\n\n    return d;\n}\n\nfloat mapstarfish(in vec3 pos, out vec2 id, float h) {\n    pos.xz*=2.;\n    float rep = 3.;\n    vec3 mp = mod(pos.xxz, rep) - rep / 2.;\n    mp.xz = rotate2d(.3) * mp.xz;\n    vec2 l_id = hash22(floor(pos.xz/rep));\n    id.x = l_id.x;\n    if(id.x < .6)\n    return 3.;\n    return opExtrusionT(vec3(mp.x, mp.z, pos.y - 0.0 + h), .03); \n}\n\nfloat mapMushroom(in vec3 pos, out vec2 id, out vec3 ep) {\n    float rep = 3.9;\n    pos.x+=1.;\n    pos.z+=.1;\n    pos.xz = rotate2d(-.2) * pos.xz;\n    \n    vec3 u = pos;\n    vec2 m_id = hash2( 12.387*floor(pos.xz / rep));\n   \n    pos.xz = mod(pos.xz, rep) - rep / 2.;\n    pos.xz = rotate2d(m_id.y*33.14) * pos.xz;\n     pos *= 1.6;\n \n//    pos.x -= m_id.x * 1.;\n    \n    vec3 pcap = pos;\n    \n    pcap.xy = rotate2d(-.5 ) * pcap.xy;\n    pcap.x+=2.;\n    \n    float h= 1.9 + .6*cos(3.14*m_id.y+iTime/1.515) + m_id.x * 4.;\n    id.x = pos.y / h;\n    pos.y += 1.;\n    float bcap = smoothstep(13.0, 2.01, pos.y);\n    pos.x += cos(pos.y/1.5 - sin(iTime)  ) /2.;\n    vec2 r = normalize(vec2(pos.z, pos.x) );\n    float a = atan(r.x, r.y);\n    if(m_id.x < .4 ||noise(floor(u / rep ) *vec3(1, .0, .1)) <.2)\n     return 1.1;\n    vec2 inset = -pos.xz * cos( a * 40. + iTime *0.)  * .5;\n    pcap.xz+= inset / 8.;\n    pos.xz+= inset/64.;\n    float s = .95 - m_id.x * .8 + sin(m_id.y + iTime / 3.) / 10.;\n    float scap = -.1;//-1.05  + sin(m_id.y+iTime / 3.);// + m_id.y/5.*sin(11.*length(pos.xz));\n    id.x = 1. + sin(iTime / 3.);\n    float j = 5.5;\n    float j2 = 5.;\n    float h2 = h  - .0 ;\n    id.y = m_id.y;\n     pcap.y -= h;\n     \n     \n     float prep = 4.;\n //   pcap.y = mod(pcap.y, prep) - prep / 2.;\n\n    float dcap = length(pcap * vec3(1., j, 1.) - vec3(0., j*h*0., 0.)) - scap;\n    ep = pos - vec3(0., j*h, 0.);\n    float dt = max( length(pos.xz) - s, abs(pos.y) - h * 1.2) ;\n    \n//     dcap = opST(indcap, dcap);\n    return smin(dcap, dt, 10.5);\n\n}\n\n\nfloat mapJellyfish(in vec3 pos) {\n\n    float s = 5.;\n    pos.z += 2.;\n    float mrep = 3.5;\n    if (pos.z > 11. || pos.y < -1.5 || pos.y > 4.)\n         return 1e10; \n     ;//pos *= 2.;\n     pos.xy = rotate2d(.2) * pos.xy;\n     \n    vec3 id = floor(pos / vec3(mrep));\n    vec2 r = hash2(id.xz);\n    float t = .5 * (iTime * (1.5 +  r.y / 2.));\n    pos.y -= t / 1. - 0.1*((r.x+ cos(t * 6.)));\n\n    pos.y += r.x * 10.;\n //   pos.x += r.y * 5.;\n    pos = mod(pos, vec3(mrep)) - vec3(mrep/2.);\n    pos.xz = rotate2d(iTime) * pos.xz;\n\n    //pos.xz=rotate2d(5.) * pos.xz;\n//       pos.z += 2.;\n    float h = 2.5 / s;\n    float st = .015 / s;\n    float sc = 1.6 / s;\n    float j = 1.5;\n    \n    float dc = length(pos * vec3(1., j, 1.) - vec3(0., h*j, 0)) - sc;\n \n     float mtrep = .2;\n    float l = 4. /  s;\n    vec2 o = vec2(0.);//floor(pos.xz / mtrep);\n    vec2 ct = pos.xz;\n    ct.x += cos(pos.y * 2./h + iTime * 3. + o.x) / (s * 3.);\n    ct.y += sin(pos.y * 2. / h + iTime * 3. + o.y) / ( s * 3.);\n \n    vec2 mt = ct.xy;//-mtrep*clamp(round(pos.xz/mtrep),-l,l);\n    mt = ct.xy-mtrep*clamp(round(ct.xy/mtrep),-l,l);\n   \n    float dt = max( length(mt) - st, abs(pos.y) - h);\n    return smin(dt, dc, .4 / s);\n}\n\nvec2 map( in vec3 pos, out vec2 id, bool b, out vec3 ep )\n{\n    vec2 res = vec2( 1e10, 0.0f );\n    float d = 1e10;\n    id.y = 1.;\n    float dg=1e10;\n    float y = 1.0;\n    float dm;\n    vec2 tmp_id;\n    \n    if ((dm = mapMushroom(pos, id, ep)) < res.x) {    \n        res.y = 7.0f;\n        res.x = dm;// smin(d, dg+.9, 1.5);\n    }\n    y += noise(pos / 5.) / .5;\n    if ((dg = abs(pos.y + .5 + y ) ) < res.x) {\n        res.y = 3.0f;\n        res.x = dg;//smin(dg, dm, .5);\n    }\n    res.x = smin(dg, dm, .2);       \n    if ((d = abs(pos.y - 10.5 + 1.*getwaves(pos.xz / 5., iTime) ))  < res.x) {\n        res.y = 2.0f;\n        res.x = d;\n    }\n    if ((d = mapJellyfish(pos)) < res.x) {\n        res.y = 5.0f;\n        res.x = d;\n    }\n    if ((d = mapstarfish(pos, tmp_id, y + .5)) < res.x) {    \n        res.y = 8.0f;\n        res.x = d;\n        id = tmp_id;\n    }\n    if ((d = mapWorm(pos, tmp_id, y + .5)) < res.x) {    \n        res.y = 9.0f;\n        res.x = d;\n        id = tmp_id;\n    }    \n    return res;\n}\n\nconst float maxHei = 0.8;\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n\n    vec3 acc = vec3(0.);\n    float t = 1.;\n    float far = 40.;\n    float num_step = 164.;\n    float stepSize = (far - 1.) / num_step;\n\n    for(int i = 0; float(i) < num_step; i++) {\n        vec3 pos = ro + rd * t;\n        \n        vec3 pc = pos + vec3(-.2, 0.0, .0) * (abs(pos.y + 20.));\n        float v = (texture(iChannel0, pc.xz / 190. + .5).x);\n       // v = pow(v / 5., .5);\n        v = smoothstep(.4, .1, v);\n        acc += vec3(v) / num_step / max(5.0, pow( (pos.y * 1.), 1.) );\n        t+= stepSize;\n    }\n    return acc;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, out vec2 id, out vec3 ep )\n{\n    vec2 res = vec2(-1.0,-1.0);\n    \n    bool b = false;\n    \n    float tmin = 1.0;\n    float tmax = 35.0;\n    // raymarch primitives   \n    {\n    \n        float t = tmin;\n        for( int i=0; i<250 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t,id, b, ep );\n            if( abs(h.x)<(0.001*t) )\n            { \n                     res = vec2(t,h.y);\n                     break;\n            }\n            t += h.x * .5;\n        }\n    }\n    return res;\n}\n\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 normal (in vec3 p)\n{\n    vec2 e = vec2(.001, .0);\n    vec2 id;\n    vec3 ep;\n    bool b = false;\n    float d = map (p,id,b, ep).x;\n    vec3 n = vec3 (map (p + e.xyy,id,b, ep).x - d,\n                   map (p + e.yxy,id,b, ep).x - d,\n                   map (p + e.yyx,id,b, ep).x - d);\n    return normalize(n);\n}\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    vec2 id;\n    bool d = false;\n    float res = 1.0;\n    float t = mint;\n    vec3 ep;\n    for( int i=ZERO; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t,id, d,ep ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    \n    vec3 ep;\n    vec2 id;\n    vec2 res = castRay(ro,rd, id, ep);\n    float t = res.x;\n\tfloat m = res.y;\n    vec3 k_water = 2.5*vec3(0.01, .1, .35);\n    vec3 k_sun = 2.*vec3(.5, .2, .1 ) + k_water / 2.;\n    vec3 k_backlit = vec3(2., 3.4, .5) * 2.;\n    vec3 lbackdir = normalize( -vec3(0., 1, 0.) );\n    vec3 ldir = normalize( -vec3(-30., -100, 10.) );\n    vec3 col = vec3(0.);//k_water;\n    vec3 p = ro + rd * t;\n    vec3 nor = normal(p);\n    vec3 albedo = vec3(.2);\n    float ndotl = max(0.2, dot(nor, ldir) );\n    float ndotlback = max(.0, dot(nor, lbackdir) );\n    float d = length(ro - p);\n\n  if (res.x > .0f) {\n    \tvec3 c = vec3((texture(iChannel0, p.xz / 25. + .5).x)) * vec3(0.1, 0.25, 0.55);\n         col += smoothstep(0.05, 0.9, pow(c / 2., vec3(2.2)) / .02) / 2.;\n         col += k_water / 3.;\n    }else {\n        d = 100.;\n    }\n    \n    if (res.y == 5.) {    \n        albedo = vec3(0.,.2,.2)/15.;\n        col+=.4;\n    }\n\n    if (res.y == 3.) {\n        vec3 k_sand = vec3(.5, .5, .1);\n        float shadow = calcSoftshadow( p, -ldir, .5, 10. );\n        vec3 t = k_sand * texture(iChannel1, p.xz * 1.).xxx * 15.;\n        col += t / 8.;\n        //col+=vec3(.2);\n        col = col*.3*shadow + col *.7; \n    }\n\n    if (res.y == 7.) {\n        albedo = vec3(.15);\n        vec3 c1 = vec3(.2, .1, .1);\n        vec3 c4 = pal(id.y/1. + .1,vec3(.00,0.0,.28),vec3(.2,.3,-.16),vec3(0.33,0.36,0.73),vec3(0.74,1.00,0.79));\n        col = .0+ c1/200.;\n        albedo = c4 / 5.;\n        float up = smoothstep(.3, .4, nor.y);\n        //albedo *= vec3( pow( 18./length(ep), 6.5) );\n        col += texture(iChannel2,  p.xz).rrr * up;\n        \n    }\n    if (res.y == 8.) {\n    \n        col += .7 * pal(id.x,vec3(0.95,0.65,0.00),vec3(0.26,0.47,0.00),vec3(0.64,0.57,0.00),vec3(0.00,0.00,0.00));\n        albedo = col;\n    }\n    if(id.y == 4.) {\n    //    col = vec3(.0);\n        albedo += vec3(.2);\n    }\n    if (res.y != 2.) {\n        col += albedo * ndotl * k_sun;\n     } else {\n         col += max(0., smoothstep(.9, 1., -nor.y) ) * vec3(.3, .5, .25) / 2.;\n         col /= 1.3;\n        \n     //    col += vec3(.1,.1,.15) * 2.;\n     }\n     if (res.y == 9.) {\n         albedo = vec3(.3 + .05 * sin(10.* id.x))  * vec3(.44, .4, .1) * 3.;\n     //    albedo *= texture(iChannel1, p.xy * 2.).xxx * 2.;\n         col = albedo ;\n     }\n    //if (res.y == 6.0f) \n      \n    //col+= .1;\n        if(res.y!=2. && res.y != 9.) {\n        col += albedo * ndotlback * k_backlit * 2.;\n    }\n\n    col = mix(col, k_water * 1.8, clamp(pow(d / 33., 2.), 0., 1.  ) );\n         \n   \n    col += mix( vec3(0.), vec3(1.) ,max(0., rd.y / 1.5));\n\n    vec3 r= raymarch(ro, rd) * 8.;\n    col += r;\n    float turfu = 0.;//pow(sin(iTime*8.), 2.);\n    r *= mix(vec3(1.), vec3(1., .3, .3), turfu);\n    col = mix( col, col * ((r) * 1.), turfu * .8); \n   \treturn vec3(col);\n}\n\nfloat ghash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat bubble(vec2 uv) {\n    uv.x -= iTime;\n    // uv.y -= iTime;\n    uv *= 40.;\n    \n    float acc = 0.;\n    for (int i = 0; i < 3; ++i) {\n        float rep = 2.;\n        vec2 f= floor(uv / rep);\n        vec2 ouv = uv;\n        \n        //ouv.x += mod(f.y, 2.);\n         float r = ghash(f / float(21.*float(1+i)));\n        \n        vec2 p = mod(ouv, rep) - rep/2.;\n   // p.y += sin(4.*iTime) * r/2.;\n        float c = smoothstep(.9, .8, length(p) );\n        c *= smoothstep(.3, .75, length(p));\n        if(r < .97)\n            c = 0.;\n        acc+= c;\n        uv *= 2.;\n    }\n    return acc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = .0f; //iTime;\n\n    vec3 ro = vec3( sin(0. / 2.), -.3f ,  -6.0f+ cos(0. / 2.));\n    vec3 ta = vec3( 1., 1.9, 0. );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    vec3 tot = vec3(0.0);\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // ray direction\n    vec3 rd = normalize( ca * vec3(p.xy,1.4) );\n    ro.x += 2.;// + iTime;\n   // ro.z += iTime*5.;\n    ro.y -=1.;\n    // render\t\n    vec3 col = render( ro, rd );\n\n    // gamma\n    col = pow( col*1. * (.95 + .05*bubble(p.yx + vec2(0., 0.))), vec3(2.5 ));\n\n    tot += col;\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nvec2 hash22( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(175.1,311.7)),\n             dot(p,vec2(260.5,752.3)));\n    return fract(sin(p+455.)*18.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise( p/1.3 ); p = m*p*2.02;\n    f += 0.2500*noise( p  ); p = m*p*2.03;\n    f += 0.12500*noise( p ); p = m*p*2.01;\n    f += 0.06250*noise( p );\n    return f;\n }\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\nfloat hash1( float n ) { return fract(sin(n)*43758.5453); }\nvec2  hash2( vec2  p ) { p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) ); return fract(sin(p)*43758.5453); }\n\nvec2 wavedx(vec2 position, vec2 direction, float speed, float frequency, float timeshift) {\n    float x = dot(direction, position) * frequency + timeshift * speed;\n    float wave = exp(sin(x) - 1.0);\n    float dx = wave * cos(x);\n    return vec2(wave, -dx);\n}\n\nfloat getwaves(vec2 position, float time){\n\tfloat iter = 0.0;\n    float phase = 6.0;\n    float speed = 2.0;\n    int iterations = 2;\n    float weight = 1.0;\n    float w = 0.0;\n    float ws = 0.0;\n    for(int i=0;i<iterations;i++){\n        vec2 p = vec2(sin(iter), cos(iter));\n        vec2 res = wavedx(position, p, speed, phase, time);\n        position += p * res.y * weight * 0.048;\n        w += res.x * weight;\n        iter += 12.0;\n        ws += weight;\n        weight = mix(weight, 0.0, 0.2);\n        phase *= 1.18;\n        speed *= 1.07;\n    }\n    return w / ws;\n}\n\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nfloat opST( in float d1, in float d2 )\n{\n    d1 *= -1.0;\n    return (d1 > d2) ? d1 : d2;\n}\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\nfloat starfish(vec2 uv) {\n    vec3 col = vec3(0.);\n\n    vec2 l = uv;\n \n     float it = 5.;\n    for(int i = 0; i < int(it); ++i) {\n        uv.xy = rotate2d(6.28/it + cos(length(uv) * 2.) / 80. ) * uv;\n        float h = 1.;\n\n        float u = smoothstep(.2, .1, uv.y);\n        float d = min(10.,  max(0., h - ((uv.y) / h) ));\n        d = .5 * (d + pow(d, .3));\n        float l = abs(uv.x + sin(0.)/3.) / d + u;\n        float c = smoothstep(.4, .32, l);\n        col += vec3(c);\n    }\n    col += smoothstep(.3, .2, length(uv) );\n   // col = normalize(col);\n    col.x = smoothstep(.0, .1, col.x);\n   // col.x = 1.;\n    //col /= 1.+length(l)*2.;\n    return 1.-col.x;\n}\nfloat opExtrusionT( in vec3 p, in float h )\n{\n    float d = starfish(p.xy);\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float phase1() {\nreturn 0.;\n    return .5* sin(iTime / 6.) + .5;\n} \n// The parameter w controls the smoothness\nvec4 voronoi( in vec2 x, float w )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec4 m = vec4( 8.0, 0.0, 0.0, 0.0 );\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n        vec2 o = hash2( n + g );\n\t\t\n\t\t// animate\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n\n        // distance to cell\t\t\n\t\tfloat d = length(g - f + o);\n\t\t\n        // cell color\n\t\tvec3 col = 0.5 + 0.5*sin( hash1(dot(n+g,vec2(7.0,113.0)))*2.5 + 3.5 + vec3(2.0,3.0,0.0));\n        // in linear space\n        col = col*col;\n        \n        // do the smooth min for colors and distances\t\t\n\t\tfloat h = smoothstep( -1.0, 1.0, (m.x-d)/w );\n\t    m.x   = mix( m.x,     d, h ) - h*(1.0-h)*w/(1.0+3.0*w); // distance\n\t\tm.yzw = mix( m.yzw, col, h ) - h*(1.0-h)*w/(1.0+3.0*w); // color\n    }\n  //     return vec4(length(x) - .5);\n\treturn m;\n}\n\nvec3 eart( vec2 p )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    p *= 10.;\n    float rep = 2.;\n    \n    p = mod(p, rep) - rep/2.;\n    p.y -= 0.25;\n    float a = atan(p.x,p.y)/3.141593;\n    float r = length(p);\n    float h = abs(a);\n    float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);\n\n    \t// color\n\tfloat s = 0.75 + 0.75*p.x;\n\ts *= 1.0-0.4*r;\n\ts = 0.3 + 0.7*s;\n\ts *= 0.5+0.5*pow( 1.0-clamp(r/d, 0.0, 1.0 ), 0.1 );\n\tvec3 hcol = vec3(1.0,0.4*r,0.3)*s;\n\t\n    vec3 col = mix( vec3(0.), hcol, smoothstep( -0.01, 0.01, d-r) );\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    p-=iTime / 20.;\n    p.x += iTime / 8.;\n    vec3 v = voronoi(p * 20., .5).xyz;\n    vec3 e =vec3(1.) -eart(p);\n    vec3 c = mix(v, e, phase1());\n    fragColor = vec4(c,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}