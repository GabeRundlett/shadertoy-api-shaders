{
    "Shader": {
        "info": {
            "date": "1485945143",
            "description": "Balloon flight in Voronoia",
            "flags": 0,
            "hasliked": 0,
            "id": "MlyXDV",
            "likes": 28,
            "name": "Voronoian Waterway",
            "published": 3,
            "tags": [
                "voronoi",
                "landscape",
                "flight"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 3090
        },
        "renderpass": [
            {
                "code": "// \"Voronoian Waterway\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Balloon flight in Voronoia.\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\n#define N_BAL 5\n\nmat3 vuMat;\nvec3 balPos[N_BAL], qHit, qHitFlm, vuPos, sunDir;\nfloat balRad, flmCylRad, flmCylLen, tCur, dstFar;\nint idObj, idGrp;\nbool balFlm[N_BAL], balFlmCur;\nconst float pi = 3.14159;\n\nfloat VorDist (vec2 p)\n{\n  vec3 dv;\n  vec2 ip, fp, g, b;\n  ip = floor (p);\n  fp = fract (p);\n  dv = vec3 (8.);\n  b.x = 0.;\n  for (float gy = -1.; gy <= 1.; gy ++) {\n    for (float gx = -1.; gx <= 1.; gx ++) {\n      g = vec2 (gx, gy);\n      dv.z = length (g + 0.9 * Hashv2v2 (ip + g) - fp);\n      b.y = step (dv.z, dv.y) * (dv.z - dv.y);\n      dv.xy += b + step (dv.z, dv.x) * (dv.zx - dv.xy - b);\n    }\n  }\n  return dv.y - dv.x;\n}\n\nfloat GrndHt (vec2 p)\n{\n  float s;\n  s = Noisefv2 (0.7 * p.yx);\n  p += 0.2 * sin (2. * pi * s) +\n     0.1 * sin (2. * pi * Noisefv2 (2. * p.xy));\n  return 5. * smoothstep (0.05, 0.6 + 0.2 * s, VorDist (0.07 * p));\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.2, 0.4 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  float h;\n  h = GrndHt (p.xz);\n  vec2 e = vec2 (0.01, 0.);\n  return normalize (vec3 (h - GrndHt (p.xz + e.xy), e.x,\n     h - GrndHt (p.xz + e.yx)));\n}\n\nfloat FlmDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin;\n  dMin = dstFar;\n  for (int k = 0; k < N_BAL; k ++) {\n    if (balFlm[k]) {\n      q = p - (balPos[k] - vec3 (0., 0.8 * balRad, 0.));\n      d = PrCylDf (q.xzy, flmCylRad + 0.3 * q.y / flmCylLen, flmCylLen);\n      d = max (d, - q.y - 0.5 * flmCylLen);\n      if (d < dMin) { dMin = d;  qHitFlm = q; }\n    }\n  }\n  return dMin;\n}\n\nfloat FlmRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = FlmDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nfloat BalDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;\n  d = max (PrSphDf (q, balRad), - PrSphDf (q, 0.98 * balRad));\n  q.y -= - balRad;\n  d = max (d, - PrCylDf (q.xzy, 0.3 * balRad, 0.1 * balRad));\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = p;}\n  q = p;\n  q.y -= -1.42 * balRad;\n  d = PrCylDf (q.xzy, 0.05 * balRad, 0.13 * balRad);\n  q.y -= 0.02 * balRad;\n  d = max (d, - PrCylDf (q.xzy, 0.03 * balRad, 0.13 * balRad));\n  if (d < dMin) { dMin = d;  idObj = 2;  qHit = p;}\n  q = p;\n  q.y -= -1.5 * balRad;\n  d = PrCylDf (q.xzy, 0.2 * balRad, 0.07 * balRad);\n  q.y -= 0.02 * balRad;\n  d = max (d, - PrCylDf (q.xzy, 0.18 * balRad, 0.07 * balRad));\n  if (d < dMin) { dMin = d;  idObj = 3;  qHit = p;}\n  q = p;\n  q.xz = abs (q.xz) - 0.25 * balRad;\n  q.y -= -1.15 * balRad;\n  q.yz = Rot2D (q.yz, -0.35);\n  q.xy = Rot2D (q.xy, 0.35);\n  d = PrCylDf (q.xzy, 0.005 * balRad, 0.35 * balRad);\n  if (d < dMin) { dMin = d;  idObj = 4;  qHit = p;}\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  for (int k = 0; k < N_BAL; k ++) {\n    d = BalDf (p - balPos[k], dMin);\n    if (d < dMin) { dMin = d;  idGrp = k;  balFlmCur = balFlm[k]; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  return vec3 (0.2, 0.3, 0.5) + 0.1 * pow (1. - max (rd.y, 0.), 4.);\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  ro.x += 0.5 * tCur;\n  f = Fbm2 (0.05 * (rd.xz * (100. - ro.y) / rd.y + ro.xz));\n  sd = pow (max (dot (rd, sunDir), 0.), 64.);\n  col = SkyBg (rd) + (0.35 * sd + 0.65 * min (pow (sd, 4.), 0.3)) *\n     vec3 (1., 1., 0.3);\n  return mix (col, vec3 (0.85), clamp (f * rd.y + 0.1, 0., 1.));\n}\n\nvec3 FlmCol (vec3 p, vec3 rd)\n{\n  vec3 q, qq;\n  float a, f, dr;\n  a = 0.;\n  p.y -= - flmCylLen;\n  dr = 0.05 / flmCylRad;\n  for (int j = 0; j < 20; j ++) {\n    p += dr * rd;\n    q = 15. * p / flmCylLen;\n    q.y -= 40. * tCur;\n    qq.y = Noisefv3 (q + 0.1 * vec3 (sin (tCur)));\n    qq.x = Noisefv3 (q + vec3 (qq.y));\n    qq.z = Noisefv3 (q + vec3 (qq.x));\n    q = p + 0.25 * (1. - 3. * p.y / flmCylLen) * (qq - 0.5);\n    f = 0.45 * q.y - 2.5 * length (q.xz);\n    f = clamp (sign (f) * f * f, 0., 1.) * (3. - 0.9 * q.y);\n    a += f;\n  }\n  return clamp (a * vec3 (1., 0.5, 0.3), 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, colFlm;\n  float dstObj, dstFlm, dstGrnd, f, a;\n  bool inSun, inFlm;\n  dstGrnd = GrndRay (ro, rd);\n  dstFlm = FlmRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  inSun = true;\n  inFlm = false;\n  if (dstObj < min (dstGrnd, dstFar)) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col = HsvToRgb (vec3 (float (idGrp) / float (N_BAL), 0.9, 0.8));\n      inFlm = balFlmCur;\n      if (length (qHit) < 0.99 * balRad) {\n        col *= 0.2;\n        if (inFlm) col += 0.1 * vec3 (1., 0.5, 0.);\n        inSun = false;\n      } else {\n        if (length (qHit) > 0.99 * balRad) {\n          a = atan (qHit.x, qHit.z) / (2. * pi) + 0.5;\n          vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (24. * a, 1.))));\n        }\n      }\n    } else if (idObj == 2) {\n       a = atan (qHit.x, qHit.z) / (2. * pi) + 0.5;\n       vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (12. * a, 1.))));\n      col = vec3 (0.6);\n    } else if (idObj == 3) {\n      a = atan (qHit.x, qHit.z) / (2. * pi) + 0.5;\n      vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (32. * a, 1.))));\n      col = vec3 (0.6, 0.3, 0.);\n    } else if (idObj == 4) {\n      col = vec3 (0.3);\n    }\n    if (inSun) col = col * (0.2 +\n       0.2 * max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.) +\n       0.6 * max (dot (vn, sunDir), 0.)) +\n       0.1 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n  } else if (dstGrnd < dstFar) {\n    ro += dstGrnd * rd;\n    if (ro.y > 0.1) {\n      vn = VaryNf (1.3 * ro, GrndNf (ro), 5.);\n      f = clamp (0.7 * Noisefv2 (ro.xz) - 0.3, 0., 1.);\n      col = mix (mix (vec3 (0.4, 0.3, 0.), vec3 (0.5, 0.4, 0.1), f),\n         mix (vec3 (0.3, 0.7, 0.3), vec3 (0.5, 0.6, 0.1), f),\n         (0.1 + 0.9 * smoothstep (0.1, 0.2, ro.y)) *\n         clamp (1.2 * vn.y - 0.2, 0.2, 1.)) *\n         (0.3 + 0.7 * max (0., max (dot (vn, sunDir), 0.))) +\n         0.1 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n    } else {\n      vn = VaryNf (5.1 * ro, vec3 (0., 1., 0.), 0.2);\n      rd = reflect (rd, vn);\n      col = mix (vec3 (0.15, 0.2, 0.15), vec3 (0.1, 0.1, 0.2), Fbm2 (ro.xz));\n      col = mix (col, 0.8 * SkyCol (ro, rd), smoothstep (0.8, 0.95,\n          1. - pow (dot (rd, vn), 3.)));\n    }\n    col = mix (col, SkyBg (rd), max (pow (dstGrnd / dstFar, 4.) - 0.1, 0.));\n  } else col = SkyCol (ro, rd);\n  if (dstFlm < min (min (dstGrnd, dstObj), dstFar)) {\n    colFlm = FlmCol (qHitFlm, rd);\n    col = mix (col, colFlm, 0.6 * length (colFlm));\n  }\n  if (inFlm) col = mix (col, vec3 (1., 0.5, 0.),\n     0.3 * pow (clamp (dot (normalize (qHit), - rd), 0., 1.), 4.));\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (30. * sin (0.35 * t) * sin (0.12 * t) * cos (0.1 * t) +\n     26. * sin (0.032 * t), 1. + 3. * sin (0.21 * t) * sin (1. + 0.23 * t),\n     10. * t);\n}\n\nvoid VuPM (float t)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, cr, sr;\n  float dt;\n  dt = 1.;\n  vuPos = TrackPath (t);\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  vel = (fpF - fpB) / (2. * dt);\n  vel.y = 0.;\n  acc = (fpF - 2. * vuPos + fpB) / (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) / length (vel);\n  ort = vec3 (0.2, atan (vel.z, vel.x) - 0.5 * pi, 0.02 * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  vuMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat2;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, s, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  sunDir = normalize (vec3 (1., 0.5, 0.5));\n  dstFar = 200.;\n  balRad = 2.;\n  for (int k = 0; k < N_BAL; k ++) {\n    s = float (k - 1) / float (N_BAL);\n    balPos[k] = TrackPath (0.5 * tCur + 3. + 7. * s);\n    a = 2. * pi * fract (0.037 * tCur + s);\n    balPos[k].y = 6.5 * balRad + 2. * balRad * sin (a);\n    balFlm[k] = (a > pi);\n  }\n  el = 0.;\n  az = 0.;\n  if (mPtr.z > 0.) {\n    el = clamp (el - 1.3 * pi * mPtr.y, - 0.49 * pi, 0.49 * pi);\n    az = clamp (az - 1.8 * pi * mPtr.x, - pi, pi);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat2 = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  VuPM (0.5 * tCur);\n  ro = vuPos;\n  ro.y += 6.5 * balRad + 2. * balRad * sin (2. * pi * fract (0.07 * tCur));\n  rd = normalize (vec3 (uv, 2.))* vuMat2 * vuMat;\n  flmCylRad = 0.4;\n  flmCylLen = 2.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}