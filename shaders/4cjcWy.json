{
    "Shader": {
        "info": {
            "date": "1722942289",
            "description": "eclipse shader ",
            "flags": 0,
            "hasliked": 0,
            "id": "4cjcWy",
            "likes": 2,
            "name": "eclipse shader",
            "published": 3,
            "tags": [
                "test",
                "light",
                "eclipse",
                "cicle"
            ],
            "usePreview": 0,
            "username": "RenanMALV",
            "viewed": 69
        },
        "renderpass": [
            {
                "code": "#define BLACK vec4(0., 0., 0., 1.)\n#define PI 3.14\n#define SLOW_MO 10\nprecision mediump float;\n\n\nuniform vec2 resolution;\n\nfloat sdCircle ( in vec2 p, in vec2 pos, in float r )\n{\n   return length(p-pos) - r; \n}\n\n\nvec4 circle(vec2 p, float r){\n    vec2 pos = vec2(0.0, 0.0);\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+p.xyx+vec3(0,2,4));\n    vec4 pColor;\n    \n    float d = sdCircle(p, pos, r*0.5);\n    if (d >= 0. && d <= 1.) {; \n      pColor = mix(BLACK, vec4(col.xyz,1.0), smoothstep( 1.0, 0.0, pow(d,0.4) ) );\n    }\n    else pColor = BLACK;\n    return pColor;\n}\n\nvec4 fade(vec4 pColor, float rate){\n    return mix(BLACK, pColor, sin( mod((iTime/5.), PI) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;        \n    float r = sin( mod((iTime/10.), PI/2.) )+0.1;\n    vec4 finalColor = fade(circle(p, r), r);\n    fragColor = finalColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}