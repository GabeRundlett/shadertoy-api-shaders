{
    "Shader": {
        "info": {
            "date": "1593654074",
            "description": "Highly inspired by the work of Jagarikin\nhttps://twitter.com/jagarikin",
            "flags": 0,
            "hasliked": 0,
            "id": "3lByzh",
            "likes": 4,
            "name": "Jagarikin illusion 2",
            "published": 3,
            "tags": [
                "illusion",
                "opart",
                "jagarikin"
            ],
            "usePreview": 0,
            "username": "ciphered",
            "viewed": 462
        },
        "renderpass": [
            {
                "code": "//\n// Highly inspired by the work of Jagarikin\n// https://twitter.com/jagarikin\n//\n// \n//\n\n#define DELAY .1\n#define PI 3.1415927\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n\n\n// @author Fabrice Neyret \n// https://www.shadertoy.com/view/MtG3Wh\n// His color interpolation just works so well with this illusion !\nvec3 rainbow (float h) {\n\tvec4 O = mod(vec4(1,2,3,0)-3.*h, 3.); O = min(O,2.-O);     // linear rainbow\n  \tO = .5+.5*cos(6.283185*(h +vec4(0,1,-1,0)/3.));       // 1/j/jÂ² rainbow \n    //O = pow(max(O,0.),vec4(1./2.2));\t\t// gamma correction\n    return O.rgb;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float T = iTime * .1;\n    vec2 uv = (fragCoord - .5*iResolution.xy)  / iResolution.y;\n    uv*= 3.;\n    \n    \n    float L = length(uv);\n    float An = atan(uv.y, uv.x)*10. + sin(L*(clamp(cos(T*2.), -.2, .2)-.2)*10.)*5.;\n    float B = mod(An, 2.*PI) / (2.*PI) - .5;\n    vec2 id = vec2(floor(abs(An)/(PI*2.) - .5), floor((L-.5)*3.));\n    float S = cos(An) * .5 + .5;\n    \n    float C = smoothstep(.7, .8, S);\n    float Lt = smoothstep(.6, .62, S) - C;\n    \n    float A = step(abs(cos(L*10.)), .5);\n    C*= A;\n    Lt*= A;\n    \n    T*=  10.;\n    T+= (-id.y * .08 + id.x * (.08 + cos(iTime*.1)*.05)) * min(iTime/60., 1.);\n    vec3 cC = rainbow(T);\n    vec3 cLt = rainbow(T + DELAY*sign(B));\n\n\n    vec3 col = vec3(.5);\n    \n    col = mix(col, cC, C);\n    col = mix(col, cLt, Lt);\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}