{
    "Shader": {
        "info": {
            "date": "1670932620",
            "description": "Inspired by xavierseb's shader \"Edge detection and other filters\", this shader demonstrates simple feature extraction using convolution filter",
            "flags": 2,
            "hasliked": 0,
            "id": "md2SWK",
            "likes": 3,
            "name": "BraKi vertical lines convolution",
            "published": 3,
            "tags": [
                "convolution",
                "vertical",
                "xavierseb"
            ],
            "usePreview": 0,
            "username": "braki",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "// basic convolutional filtering\n//\n//\n// vertical edge detection:\n// [  +2  0  -2 ]\n// [  +2  0  -2 ]\n// [  +2  0  -2 ]\n\n// set the convolution filter 0(none) - 1(vertical lines) other(sharpen)\n#define FILTER 1\n\n// adjust the distance used in the filter convolution\n#define STEP .005\n\n#define BOT 1.-STEP\n#define TOP 1.+STEP\n#define CEN 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = \n#if FILTER==0        \n        // none\n          \t\ttexture(iChannel0, uv*vec2(1));               \n#elif FILTER==1\n       // my filter\n       // vertcical lines enhanced\n              // column 1\n         \t\t+texture(iChannel0, uv*vec2(BOT, BOT)) *2.0\n         \t\t+texture(iChannel0, uv*vec2(BOT, CEN)) *2.0\n         \t\t+texture(iChannel0, uv*vec2(BOT, TOP)) *2.0\n              // column 2\n                -texture(iChannel0, uv*vec2(CEN, BOT)) *0.0\n                -texture(iChannel0, uv*vec2(CEN, CEN)) *0.0\n                -texture(iChannel0, uv*vec2(CEN, TOP)) *0.0\n              // column 3\n         \t\t-texture(iChannel0, uv*vec2(TOP, BOT)) *2.0\n         \t\t-texture(iChannel0, uv*vec2(TOP, CEN)) *2.0\n         \t\t-texture(iChannel0, uv*vec2(TOP, TOP)) *2.0;\n#else \n       // sharpen\n        \t\ttexture( iChannel0, uv) *5.\n         \t\t-texture(iChannel0, uv*vec2(CEN, BOT))\n         \t\t-texture(iChannel0, uv*vec2(BOT, CEN))\n         \t\t-texture(iChannel0, uv*vec2(TOP, CEN))\n         \t\t-texture(iChannel0, uv*vec2(CEN, TOP));\n\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}