{
    "Shader": {
        "info": {
            "date": "1680485626",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\ntaking the pattern from my last Raymarching shader and playing around with it.",
            "flags": 0,
            "hasliked": 0,
            "id": "dd3SRB",
            "likes": 28,
            "name": "Year of Truchets #007",
            "published": 3,
            "tags": [
                "2d",
                "truchettiles",
                "tiles"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #007\n    04/02/2023  @byt3_m3chanic\n    \n    All year long I'm going to just focus on truchet tiles and the likes!\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n*/\n\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\nfloat scale = 8.;\n\nfloat hash21(vec2 a) { return fract(sin(dot(a, vec2(27.609, 57.583)))*43758.5453);}\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n//@iq sdfs\nfloat box(vec2 p, vec2 a) {\n    vec2 q = abs(p)-a;\n    return length(max(q,0.)) + min(max(q.x,q.y),0.);\n}\n\nfloat ck = 0., d2 = 0.;\nvec2 g = vec2(0), id = vec2(0);\n\nfloat makeTile(vec2 uv){\n\n    id = floor(uv);\n    vec2 q = fract(uv)-.5;\n    g=q;\n    \n    ck = mod(id.x+id.y,2.)*2.-1.;\n    float hs = hash21(id);\n\n    float wd = .125+.065*sin(uv.x*.5+T*.75);\n    if(hs>.5) q.x=-q.x;\n    \n    vec2 sp = vec2(length(q-.5),length(q+.5));\n    vec2 p = sp.x<sp.y? q-.5 : q+.5;\n\n    // main pattern\n    float d = length(p)-.5;\n    d = abs(d)-wd;\n    \n    float c = min(length(q.x)-wd,length(q.y)-wd);\n    if (hs>.9) d = c;\n    \n    hs = fract(hs*413.372);\n    if (hs>.9) d = min(length(abs(q)-vec2(.5,0))-wd,length(q.x)-wd);\n    if (hs<.1) d = min(abs(length(q)-.3)-wd,max(c,-(length(q)-.3)));\n    \n    if(ck<.5 && hs>.925) d = min(length(q)-(wd*1.8),d);\n\n    d2 = abs(max(abs(q.x),abs(q.y))-.5)-.005;\n\n    return d;\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n\n    vec3 C = vec3(.1);\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n    vec3 clr = mix(vec3(.0,.48,.64),vec3(1.,.5,.1),uv.x);\n    vec3 clx = mix(vec3(1,.5,0),vec3(1,.1,0),uv.x);\n    \n    uv*=scale;    \n    float px = fwidth(uv.x); \n    \n    uv*=rot(T*.035);\n    uv.x -= .25*T;\n\n    float d = makeTile(uv);\n    float hs = hash21(id);\n    float h2 = fract(hs*32.233);\n    \n    float b = box(g,vec2(.31))-.15;\n    float h = box(g,vec2(.28))-.13;\n    float s = smoothstep(.05+px,-px,b);\n    if(h2>.4) C = mix(C,C*.1,s);\n    \n    b = smoothstep(px,-px,b);\n    if(h2>.4) C = mix(C,ck>.5?clx:vec3(0.212,0.227,0.227),b);\n \n    h=max(h,clamp((g.y+.25)*.02,0.,1.));\n    h = smoothstep(px,-px,h);\n    if(h2>.4) C = mix(C,C+.25,h);\n        \n    d2 = smoothstep(px,-px,d2);\n    if(M.z>0.) C = mix(C,vec3(1.),d2);\n    \n    s = smoothstep(.075+px,-px,d);\n    C = mix(C,C*.3,s);\n\n    float d3 = smoothstep(px,-px,abs(d)-.01);\n    d = smoothstep(px,-px,d);\n    C = mix(C,clr,d);\n    C = mix(C,C*.1,d3);\n    \n    C = pow(C,vec3(.4545));\n    O = vec4(C,1.);\n}\n\n\n\n    \n    \n        \n    \n        \n    \n        \n    \n        \n    \n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}