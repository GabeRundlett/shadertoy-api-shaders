{
    "Shader": {
        "info": {
            "date": "1608287146",
            "description": "Metallic goo with several blobs (based on \"Quick Slime 3D\")",
            "flags": 32,
            "hasliked": 0,
            "id": "wsKBDd",
            "likes": 6,
            "name": "Multi-Slime",
            "published": 3,
            "tags": [
                "reflection",
                "metaball",
                "dynamics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// \"Multi-Slime\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat SmoothMin (float a, float b, float r);\nmat3 DirVuMat (vec3 vd);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nconst int nBall = 48;\nvec3 sunDir;\nfloat tCur, dstFar, obSpc, obSz;\nint idObj;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 s;\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  d = dstFar;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    s = Loadv4 (3 + 3 * n);\n    d = SmoothMin (d, PrSphDf (p - s.xyz, 0.5 * s.w), 1.5);\n  }\n  DMIN (1);\n  q = p;\n  q.xz = mod (q.xz + 0.5 * obSpc, obSpc) - 0.5 * obSpc;\n  d = PrSphDf (q, 0.5 * obSz);\n  DMIN (2);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, clCol;\n  vec2 q;\n  float dstGrnd, f, fd, ff, sd, sh;\n  if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    vn = vec3 (0., 1., 0.);\n    f = 1. - smoothstep (0.6, 0.9, dstGrnd / dstFar);\n    if (f > 0.) vn = VaryNf (2. * ro, vn, f);\n    sh = (dstGrnd < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n    col = 0.9 * mix (vec3 (1., 0.8, 0.5), vec3 (0.9, 0.7, 0.5), 0.1 +\n       0.5 * smoothstep (0.3, 0.5, Fbm2 (ro.xz)));\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.));\n    col = mix (col, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n  } else if (rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.005 * (ro.xz + tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.1, 0.8, ff);\n    fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol,\n       0.1 + 0.9 * f * fd);\n    sd = max (dot (rd, sunDir), 0.);\n    col += vec3 (1., 1., 0.9) * (0.3 * pow (sd, 512.) + 0.1 * pow (sd, 1024.));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo;\n  float dstObj, f;\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (0., 1., 0., 0.2);\n    } else if (idObj == 2) {\n      col4 = vec4 (0.5, 0.55, 0.5, 0.);\n      f = 1. - smoothstep (0.6, 0.9, dstObj / dstFar);\n      if (f > 0.) vn = VaryNf (8. * ro, vn, 4. * f);\n    }\n    col = col4.rgb * (0.2 + 0.1 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n       0.8 * max (dot (vn, sunDir), 0.)) + col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    if (idObj == 1) col = mix (col, BgCol (ro, reflect (rd, vn)), 0.5);\n    col = mix (col, BgCol (roo, rd), smoothstep (0.8, 1., dstObj / dstFar));\n  } else col = BgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, stDat;\n  vec3 col, rd, ro, rMid;\n  vec2 canvas, uv;\n  float az, el, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  stDat = Loadv4 (0);\n  obSpc = stDat.y;\n  obSz = stDat.z;\n  rMid = Loadv4 (2).xyz;\n  dstFar = 200.;\n  az = -0.01 * pi * tCur;\n  el = 0.15 * pi;\n  zmFac = 5.5;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, 0.08 * pi, 0.45 * pi);\n  ro = rMid + 40. * vec3 (cos (el) * sin (az + vec2 (0.5 * pi, 0.)), sin (el)).xzy;\n  vuMat = DirVuMat (normalize (rMid - ro));\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (cos (0.01 * tCur), 1., sin (0.01 * tCur)));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nmat3 DirVuMat (vec3 vd)\n{\n  float s;\n  s = sqrt (max (1. - vd.y * vd.y, 1e-6));\n  return mat3 (vec3 (vd.z, 0., - vd.x) / s, vec3 (- vd.y * vd.x, 1. - vd.y * vd.y,\n     - vd.y * vd.z) / s, vd);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Multi-Slime\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBall = 48;\n\nvec3 rLead;\nfloat tCur, nStep, obSpc, obSz;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec3 wm, out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv, drw, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fAttr, grav, rSep, szN, szAv,\n     fc, ft, drv, dt;\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricS = 0.05;\n  fricSW = 10.;\n  fricT = 0.5;\n  fAttr = 0.1;\n  fDamp = 0.01;\n  grav = 10.;\n  p = Loadv4 (3 + 3 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (3 + 3 * mId + 1).xyz;\n  wm = Loadv4 (3 + 3 * mId + 2).xyz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (3 + 3 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      fc = fOvlap * (szAv / rSep - 1.);\n      vmN = Loadv4 (3 + 3 * n + 1).xyz;\n      wmN = Loadv4 (3 + 3 * n + 2).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross ((sz * wm + szN * wmN) / (sz + szN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    if (n / (nBall / 3) == mId / (nBall / 3)) am += 5. * fAttr * (rmN - rm);\n  }\n  szAv = 0.5 * (sz + 1.);\n  dr = vec3 (0., rm.y, 0.);\n  rSep = abs (dr.y);\n  if (rSep < szAv) {\n    fc = fOvlap * (szAv / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  szAv = 0.5 * (sz + obSz);\n  dr = rm;\n  dr.xz -= obSpc * floor ((rm.xz + 0.5 * obSpc) / obSpc);\n  rSep = length (dr);\n  if (rSep < szAv) {\n    fc = fOvlap * (szAv / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  am += fAttr * (rLead - rm);\n  am.y -= grav;\n  am -= fDamp * vm;\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * sz);\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec3 wm, out float sz)\n{\n  float mIdf, nbEdge;\n  nbEdge = floor (sqrt (float (nBall)) + 0.01);\n  mIdf = float (mId);\n  rm = vec3 (floor (vec2 (mod (mIdf, nbEdge), mIdf / nbEdge)) - 0.5 * (nbEdge - 1.), 3.).xzy;\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + tCur + 0.3),\n     Hashff (mIdf + 0.6)) - 0.5);\n  wm = vec3 (0.);\n  sz = 1. - 0.1 * Hashff (mIdf + 0.1);\n}\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 rm, vm, wm, rMid;\n  vec2 iFrag;\n  float sz;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 3 * nBall + 3) discard;\n  tCur = iTime;\n  if (pxId >= 3) mId = (pxId - 3) / 3;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) {\n    obSpc = 7.;\n    obSz = 3.5;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    obSpc = stDat.y;\n    obSz = stDat.z;\n    rLead = Loadv4 (1).xyz;\n  }\n  if (doInit) {\n    nStep = 0.;\n    rLead = vec3 (0., 0., 0.);\n    if (mId >= 0) Init (mId, rm, vm, wm, sz);\n  } else {\n    ++ nStep;\n    rLead += 0.05 * vec3 (0.9, 0., 1.);\n    if (mId >= 0) Step (mId, rm, vm, wm, sz);\n  }\n  if (pxId == 2) {\n    rMid = vec3 (0.);\n    for (int n = VAR_ZERO; n < nBall; n ++) rMid += Loadv4 (3 + 3 * n).xyz;\n    rMid /= float (nBall);\n  }\n  if      (pxId == 0) stDat = vec4 (nStep, obSpc, obSz, 0.);\n  else if (pxId == 1) stDat = vec4 (rLead, 0.);\n  else if (pxId == 2) stDat = vec4 (rMid, 0.);\n  else if (pxId == 3 + 3 * mId) stDat = vec4 (rm, sz);\n  else if (pxId == 3 + 3 * mId + 1) stDat = vec4 (vm, 0.);\n  else if (pxId == 3 + 3 * mId + 2) stDat = vec4 (wm, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}