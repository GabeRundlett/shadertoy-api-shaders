{
    "Shader": {
        "info": {
            "date": "1536423805",
            "description": "colorful bouncy spheres. inspired by [url=https://www.shadertoy.com/view/Xlt3Dn]SH16B Speed tracer[/url] by [url=https://www.shadertoy.com/view/Xlt3Dn]reinder[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MlKyzW",
            "likes": 4,
            "name": "bouncy spheres",
            "published": 3,
            "tags": [
                "raymarching",
                "reflections"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 717
        },
        "renderpass": [
            {
                "code": "#define eps 0.0001\n#define maxdist 20.0\n#define big 10000.0\n#define ambient 0.2\n\nfloat map(vec3 p) {\n    p.y = abs(p.y);\n    vec3 fp = floor(p)-0.5;\n    \n    p.xz = mod(p.xz,1.0)-0.5;\n    \n    float num = abs(sin(iTime)+sin(fp.x)*sin(fp.z+iTime*2.4));\n    return 0.6*(length(p-vec3(0,0.1+num,0))-0.1);\n}\n\nvec3 findnormal(vec3 p) {\n    vec2 e = vec2(eps,0.0);\n    \n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)));\n    \n}\n\nfloat ray(vec3 ro, vec3 rd) {\n    float dist = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro+dist*rd;\n        float len = map(p);\n        \n        dist += len;\n        \n        if (len < 0.01||dist > maxdist) break;\n    }\n    if (dist > maxdist) return big;\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 light = normalize(vec3(0.5,1,0.5));\n    \n    vec3 cam = vec3(0,1,iTime);\n    vec3 rd = normalize(vec3(uv,1));\n    \n    float dist = ray(cam,rd);\n    \n    if (dist < maxdist) {\n        \n        vec3 ro = cam+rd*dist;\n        ro.y = abs(ro.y);\n        \n        vec3 normal = findnormal(ro);\n        \n        vec2 cell = floor(ro.xz);\n        \n        vec3 color = vec3(sin(cell.x),cos(cell.y),sin(cell.x+cell.y*cell.x))*0.5+0.5;\n        \n        float shadow = ray(ro+light*0.1,light);\n        \n        float diffuse = max(dot(light,normal),ambient);\n        \n        if (shadow < big) {\n            diffuse = ambient;\n        }\n        \n        color *= diffuse;\n        fragColor = vec4(color,1);\n        \n    } else {\n        fragColor = texture(iChannel0,vec3(rd.xz,abs(rd.y)).xzy);\n        fragColor *= fragColor;\n    }\n    \n    float plane = cam.y/max(-rd.y,eps);\n    \n    if (plane < dist) {\n        \n        vec4 pcol = vec4(0);\n        vec3 ro = cam+rd*plane;\n        \n        bool checker = mod(dot(floor(ro.xz),vec2(1)),2.0)==1.0;\n        \n        if (checker) {\n            pcol = vec4(0.6,0.2,0.5,1)*vec4(0.6,0.2,0.5,1);\n        } else {\n            pcol = vec4(0.4,0.8,0.5,1)*vec4(0.4,0.8,0.5,1);\n        }\n        \n        float shadow = ray(ro,light);\n        \n        if (shadow < big) {\n            pcol *= ambient;\n        }\n        \n        fragColor = mix(fragColor,pcol,0.5);\n    }\n    \n    \n    fragColor = sqrt(fragColor);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}