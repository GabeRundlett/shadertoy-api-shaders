{
    "Shader": {
        "info": {
            "date": "1687417991",
            "description": "Trying to make sdCapsule faster using early skipping, in the grey area the calculation of the capsule distance is skipped. The bounding volume is an aligned cylinder with radius of the first point a, I assume that the radius at a is bigger.",
            "flags": 0,
            "hasliked": 0,
            "id": "DslcWB",
            "likes": 1,
            "name": "Early skipping sdCapsule",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "distance",
                "aabb",
                "bounding"
            ],
            "usePreview": 0,
            "username": "pizzahollandaise",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Based on:\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n#define INF 1.0 / 0.0\n\nfloat distLine(vec3 p, vec3 dir) {\n    return length(cross(p, dir))/length(dir)-0.1;\n}\n\nfloat sdSphere(vec3 p, vec4 s) {\n    return length(p-s.xyz)-s.w;\n}\n\nbool bounded = false;\n// Rounded capsule https://iquilezles.org/articles/distfunctions/\nfloat dot2(in vec3 v) { return dot(v,v); }\nfloat sdBranchFast(vec3 p, vec4 a, vec4 b, float minDist) {\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b.xyz - a.xyz;\n    float l2 = dot(ba, ba);\n    float bound = length(cross(p-a.xyz, ba))/sqrt(l2) -a.w;\n    if (bound > minDist) {\n        bounded = true;\n        return minDist; // Early skip\n    } // Bounding cylinder\n    float rr = a.w - b.w;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n        \n    // sampling dependant computations\n    vec3 pa = p - a.xyz;\n    float y = dot(pa, ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2>k ) return min(sqrt(x2 + z2)         *il2 - b.w, minDist);\n    if( sign(y)*a2*y2<k ) return min(sqrt(x2 + y2)         *il2 - a.w, minDist);\n                          return min((sqrt(x2*a2*il2)+y*rr)*il2 - a.w, minDist);\n}\n\nfloat map(vec2 p2) {\n    vec3 p = vec3(p2.x, p2.y, 0.0);\n    float other = sdSphere(p, vec4(0.5, 0.0, 0.0, 0.3));\n    //return distLine(p, vec3(1.0, 1.0, 0.0));\n    return sdBranchFast(p, vec4(-0.3, -0.3, 0.0, 0.4), vec4(0.5, 0.5, 0.0, 0.1), other);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n\tfloat d = map(p);\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 ) {\n        d = map(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    if (bounded) col *= 0.5;\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}