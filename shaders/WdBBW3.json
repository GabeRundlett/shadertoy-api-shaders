{
    "Shader": {
        "info": {
            "date": "1590927519",
            "description": "\"multi-scale truchet scaled\" by phi16 simplified and commented [url]https://shadertoy.com/view/wdjfDK[/url]\n\nThen golfed (+further simplif) there (unlisted) [url]https://www.shadertoy.com/view/wd2fD3[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WdBBW3",
            "likes": 27,
            "name": "multi-scale truchet scaled - 2",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "// Fork of \"multi-scale truchet scaled\" by phi16. (1825) https://shadertoy.com/view/wdjfDK\n// Simplified and commented.\n\n// hash(int(p)) with seed varying with parameter i and time\n#define rand(p,i) fract(  sin( dot( ceil(p), vec2(12.9,78.2) ) ) * 4e5  \\\n                         + .2 + 1.4 * (i + floor(iTime/2.) )            \\\n                       )             \nfloat H(vec2 U) {                           // choose truchet LOD\n    float i=0.;\n    for( ; i < 5. ; i++, U*=2. )\n        if( U.y > 1. && ( abs(U.y) > 2. || rand(U,i) < .5 ) ) break;\n \n    return i;\n}\n\nvoid mainImage( out vec4 O, vec2 co )\n{\n    vec2 R = iResolution.xy, F,\n         U = co / R.y - vec2( .5*R.x/R.y, - .075);\n    \n    float z =  1.8 * exp2(-fract(iTime/2.)),// zooming coordinates\n          h = H(U*=z), s = exp2(h), u,v,d;  // truchet LOD h and scale s\n    \n    F = fract(U*s);                         // local coords in truchet tile    \n    v = rand( U*s, h ) -.5;                 // 2 rands per tile: sign,abs\n\n    if( v < 0.) F = vec2( 1.-F.y, F.x );    // < 0 : rotate 90Â°\n    v = abs(v);                             // [0,.5]\n    d =  v > .4                             // 20% luck:\n           ? min(  abs( length(F)    - .5 ),// round parts at one of the 2 ends\n                   abs( length(F-1.) - .5 )\n                ) -1./6. \n       : v > .1                             // 60% luck:\n           ? min(       abs(F.y-.5)  -1./6.,// segment parts\n                  max(  abs(F.x-.5) - 1./6.,// crossing ?\n                      -(abs(F.y-.5) - 1./4.) \n                )    )\n       :     min( abs( F.y = abs(F.y-.5) ), // 20% luck:\n                  length( F-.5 )            // semi-round parts ?\n                ) - 1./6.;\n   \td /= s;        \n    \n    for(float c,i=h; i < 6.; i++, s*=2., d=-d) {  // draw all LOD >= h\n        F = round(U*s)/s;                   // local tile id\n        vec2 e = vec2(-1,1)/64.;            // ( any small value ? )\n        c = max( max( H( F + e.xx),         // seek deepest LOD \"around\"\n                      H( F + e.yx)),\n                 max( H( F + e.xy),\n                      H( F + e.yy)) );\n        if( i < c )                         // if less deep,\n            u = length(U - F) - 1./6./s,    // draw disk (?) \n            d = min( d, u );                // ( not sure why we continue )\n    }\n    int(iTime/2.) % 2 >0 ? d = -d : d;      // for cycling continuity, alternate BW\n    O = vec4( .5+.5* d*R.y/z );             // paint with AA\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}