{
    "Shader": {
        "info": {
            "date": "1647417877",
            "description": "sample code\nf0, f1, f2, f3: distances to the first, second , third, and fourth feature points\nblack if f3<threshold; blue if f2<threshold<f3; green if f1<threshold<f2; red if f0<threshold<f1; white if threshold<f0",
            "flags": 0,
            "hasliked": 0,
            "id": "ftXyzr",
            "likes": 0,
            "name": "6_5_fdist4RGB",
            "published": 3,
            "tags": [
                "ch6"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "ivec2 channel;\n//begin hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\nuint uhash11(uint n){\n    n ^= (n << u.x);\n    n ^= (n >> u.x);\n    n *= k.x;\n    n ^= (n << u.x);\n    return n * k.x;\n}\nuvec2 uhash22(uvec2 n){\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n){\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\nfloat hash11(float p){\n    uint n = floatBitsToUint(p);\n    return float(uhash11(n)) / float(UINT_MAX);\n}\nfloat hash21(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n}\nfloat hash31(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n}\nvec2 hash22(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\nvec3 hash33(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\nvec4 sort(vec4 list, float v){\n    bvec4 res = bvec4(step(v, list));\n    return res.x ? vec4(v, list.xyz):\n        res.y ? vec4(list.x, v, list.yz):\n        res.z ? vec4(list.xy, v, list.z):\n        res.w ? vec4(list.xyz, v):\n        list;\n}\nvec4 fdist24(vec2 p){\n    vec2 n = floor(p) + 0.5;\n    vec4 dist4 = vec4(length(1.5 - abs(p - n)));\n    for(float j = 0.0; j <= 4.0; j ++ ){\n        vec2 glid;\n        glid.y = n.y + sign(mod(j, 2.0) - 0.5) * ceil(j * 0.5);\n        if (abs(glid.y - p.y) - 0.5 > dist4.w){\n            continue;\n        }\n        for(float i = -2.0; i <= 2.0; i ++ ){\n            glid.x = n.x + i;\n            vec2 jitter = hash22(glid) - 0.5;\n            dist4 = sort(dist4, length(glid + jitter - p));\n        }\n    }\n    return dist4;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 pos = fragCoord.xy/ min(iResolution.x, iResolution.y);\n    channel = ivec2(vec2(4, 2) * fragCoord.xy/ iResolution.xy); \n    pos *= 3.0;\n    pos += iTime;\n    float thr = 0.7;\n    bvec4 dist4b = bvec4(step(thr, fdist24(pos)));\n    fragColor = dist4b.x ? vec4(1,1,1,1): \n        dist4b.y ? vec4(1,0,0,1): \n        dist4b.z ? vec4(0,1,0,1): \n        dist4b.w ? vec4(0,0,1,1):\n        vec4(0,0,0,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}