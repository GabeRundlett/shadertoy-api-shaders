{
    "Shader": {
        "info": {
            "date": "1589071876",
            "description": "This is a copy of \"this is a good sin :0\" by gurudevbk",
            "flags": 0,
            "hasliked": 0,
            "id": "wdffDj",
            "likes": 1,
            "name": "This is a good sin copy",
            "published": 3,
            "tags": [
                "sin"
            ],
            "usePreview": 0,
            "username": "RubinReality",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "// Copy of \"this is a good sign :0\" by gurudevbk\n// returns true if a point [uv] is within the circle defined by [origin, radius]\nbool circle(vec2 uv, vec2 origin, float radius) {\n \treturn (length(uv-origin) < radius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float thickness = 0.1;\n    float radius = 0.3;\n    vec2 origin = vec2(0.5);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    vec3 col = vec3(0.5,0.5,0.36);\n    \n    // Time varying pixel color\n    if (abs(length(uv-origin) - radius) < abs(sin(iTime)/3.)) {\n    \tcol = 0.5 + 0.5*cos(iTime+length(uv-radius)+col);\n    \tcol.r += sin(iTime)+cos(iTime);\n    }\n    \n    else {\n    \tcol = 0.5 + 0.5*sin(iTime+length(uv-radius)+col);\n        col.r += sin(iTime)+cos(iTime);\n    }\n    \n    col.g /= col.r;\n    \n    col.g *= 0.05;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}