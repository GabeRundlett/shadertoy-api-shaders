{
    "Shader": {
        "info": {
            "date": "1573688713",
            "description": "Carving a series of sphere fields of higher frequencies and smaller sizes. Unlike simply doing an FBM displacement on a solid, this yields a distance field (bound).",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3XWl",
            "likes": 185,
            "name": "Sphere FBM",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "distancefield",
                "sdf",
                "fbm"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 12153
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// This shader uses a a grid of spheres to carve out fractal detail from\n// a solid block. Unlike naive SDF disaplcemente by a traditional fBM,\n// this shader produces a field that is a valid SDF, so there's no need\n// to reduce the raymarcher's step size to get artifact free visuals.\n//\n// The article that explains this technique can be found here:\n//\n//     https://iquilezles.org/articles/fbmsdf\n//\n// A additive synthesis example of this technique, here: \n//\n//     https://www.shadertoy.com/view/3dGSWR\n\n\n\n// 0 = lattice\n// 1 = simplex\n#define NOISE 0\n\n\n// please, do not use in real projects - replace this by something better\nfloat hash(vec3 p)  \n{\n    p  = 17.0*fract( p*0.3183099+vec3(.11,.17,.13) );\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return vec2(-1.0);\n\treturn vec2( tN, tF );\n}\n\n//---------------------------------------------------------------\n// A random SDF - it places spheres of random sizes in a grid\n//---------------------------------------------------------------\n\nfloat sdBase( in vec3 p )\n{\n#if NOISE==0\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n\n\t#define RAD(r) ((r)*(r)*0.7)\n    #define SPH(i,f,c) length(f-c)-RAD(hash(i+c))\n    \n    return min(min(min(SPH(i,f,vec3(0,0,0)),\n                       SPH(i,f,vec3(0,0,1))),\n                   min(SPH(i,f,vec3(0,1,0)),\n                       SPH(i,f,vec3(0,1,1)))),\n               min(min(SPH(i,f,vec3(1,0,0)),\n                       SPH(i,f,vec3(1,0,1))),\n                   min(SPH(i,f,vec3(1,1,0)),\n                       SPH(i,f,vec3(1,1,1)))));\n#else\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    vec3 e = step(d0.yzx, d0);\n\tvec3 i1 = e*(1.0-e.zxy);\n\tvec3 i2 = 1.0-e.zxy*(1.0-e);\n    \n    vec3 d1 = d0 - (i1  - 1.0*K2);\n    vec3 d2 = d0 - (i2  - 2.0*K2);\n    vec3 d3 = d0 - (1.0 - 3.0*K2);\n    \n    float r0 = hash( i+0.0 );\n    float r1 = hash( i+i1 );\n    float r2 = hash( i+i2 );\n    float r3 = hash( i+1.0 );\n\n    #define SPH(d,r) length(d)-r*r*0.55\n\n    return min( min(SPH(d0,r0),\n                    SPH(d1,r1)),\n                min(SPH(d2,r2),\n                    SPH(d3,r3)));\n#endif\n}\n\n//---------------------------------------------------------------\n// subtractive fbm\n//---------------------------------------------------------------\nvec2 sdFbm( in vec3 p, float d )\n{\n    const mat3 m = mat3( 0.00,  0.80,  0.60, \n                        -0.80,  0.36, -0.48,\n                        -0.60, -0.48,  0.64 );\n    float t = 0.0;\n\tfloat s = 1.0;\n    for( int i=0; i<7; i++ )\n    {\n        float n = s*sdBase(p);\n    \td = smax( d, -n, 0.15*s );\n        t += d;\n        p = 2.0*m*p;\n        s = 0.55*s;\n    }\n    \n    return vec2(d,t);\n}\n\nvec2 map( in vec3 p )\n{\n    // box\n    float d = sdBox( p, vec3(1.0) );\n\n    // fbm\n    vec2 dt = sdFbm( p+0.5, d );\n\n    dt.y = 1.0+dt.y*2.0; dt.y = dt.y*dt.y;\n    \n    return dt;\n}\n\nconst float precis = 0.0005;\n\nvec2 raycast( in vec3 ro, in vec3 rd )\n{\n\tvec2 res = vec2(-1.0);\n\n    // bounding volume    \n    vec2 dis = iBox( ro, rd, vec3(1.0) ) ;\n    if( dis.y<0.0 ) return res;\n\n    // raymarch\n    float t = dis.x;\n\tfor( int i=0; i<256; i++ )\n\t{\n        vec3 pos = ro + t*rd;\n\t\tvec2 h = map( pos );\n        res.x = t;\n        res.y = h.y;\n        \n\t\tif( h.x<precis || t>dis.y ) break;\n\t\tt += h.x;\n\t}\n\n\tif( t>dis.y ) res = vec2(-1.0);\n\treturn res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*precis;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftShadow(vec3 ro, vec3 rd, float tmin, float tmax, float w)\n{\n    // bounding volume    \n    vec2 dis = iBox( ro, rd, vec3(1.0) ) ;\n    if( dis.y<0.0 ) return 1.0;\n    \n    tmin = max(tmin,dis.x);\n\ttmax = min(tmax,dis.y);\n    \n    float t = tmin;\n    float res = 1.0;\n    for( int i=0; i<128; i++ )\n    {\n     \tfloat h = map(ro + t*rd).x;\n        res = min( res, h/(w*t) );\n    \tt += clamp(h, 0.005, 0.50);\n        if( res<-1.0 || t>tmax ) break;\n    }\n    res = max(res,-1.0); // clamp to [-1,1]\n\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res); // smoothstep\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 1   // make this 2 or 3 for antialiasing\n#endif\n\n#define ZERO min(iFrame,0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        float d = 0.5*sin(fragCoord.x*147.0)*sin(fragCoord.y*131.0);\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n   \n        // camera anim\n        float an = -0.1*iTime;\n        vec3 ro = 4.0*vec3( cos(an), 0.4, sin(an) );\n        vec3 ta = vec3( 0.0, -0.35, 0.0 );\n\n        // camera matrix\t\n        vec3  cw = normalize( ta-ro );\n        vec3  cu = normalize( cross(cw,vec3(0.0,1.0,0.0)) );\n        vec3  cv = normalize( cross(cu,cw) );\n        vec3  rd = normalize( p.x*cu + p.y*cv + 2.7*cw );\n\n        // render\n        vec3 col = vec3(0.01);\n        vec2 tm = raycast( ro, rd );\n        float t = tm.x;\n        if( t>0.0 )\n        {\n            vec3  pos = ro + t*rd;\n            vec3  nor = calcNormal( pos );\n            float occ = tm.y*tm.y;\n\n            // material\n            vec3 mate = mix( vec3(0.6,0.3,0.1), vec3(1), tm.y )*0.7;\n\n            // key light\n            {\n            const vec3 lig = normalize(vec3(1.0,0.5,0.6));\n            float dif = dot(lig,nor);\n            if( dif>0.0 ) dif *= calcSoftShadow(pos+nor*0.001,lig,0.001,10.0,0.003);\n            dif = clamp(dif,0.0,1.0);\n            vec3 hal = normalize(lig-rd);\n            float spe = clamp(dot(hal,nor),0.0,1.0);\n            spe = pow(spe,4.0)*dif*(0.04+0.96*pow(max(1.0-dot(hal,lig),0.0),5.0));\n\n            col = vec3(0.0);\n            col += mate*1.5*vec3(1.30,0.85,0.75)*dif;\n            col +=      9.0*spe;\n            }\n            // ambient light\n            {\n            col += mate*0.2*vec3(0.40,0.45,0.60)*occ*(0.6+0.4*nor.y);\n            }\n        }\n\n        // tonemap\n        col = col*1.7/(1.0+col);\n        \n        // gamma\n        col = pow(col,vec3(0.4545));\n        \n        tot += col;\n\t#if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // vignetting\n    vec2 q = fragCoord/iResolution.xy;\n    tot *= 0.7 + 0.3*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n    \n    // cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor=vec4(tot,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}