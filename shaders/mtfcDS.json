{
    "Shader": {
        "info": {
            "date": "1691099664",
            "description": "An attempt at making something similar to the github globe\nFor textures check instructions in \"Buffer A\".",
            "flags": 32,
            "hasliked": 0,
            "id": "mtfcDS",
            "likes": 3,
            "name": "Glob",
            "published": 3,
            "tags": [
                "globe"
            ],
            "usePreview": 0,
            "username": "soimn",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "void\nmainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect_ratio = 9.0/16.0;\n    float PI      = 3.1415926535;\n    float TAU     = 6.2831853071;\n    float RES_TAU = 0.1591549430;\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 ray = normalize(vec3(-0.5 + uv.x, (-0.5 + uv.y)*aspect_ratio, -0.5));\n    \n    vec3 globe_center = vec3(0.0, 0.0, -2.2);\n    float globe_r     = 1.0;\n    \n    vec3 p             = globe_center;\n    float b            = dot(ray, p);\n    float discriminant = b*b - dot(p, p) + globe_r*globe_r;\n    float t            = b - sqrt(discriminant);\n    \n    vec3 light_dir = normalize(vec3(-0.5, 0.5, 0.5));\n    \n    vec3 color;\n    if (discriminant >= 0.0)\n    {\n        vec3 hit          = t*ray;\n        vec3 globe_to_hit = hit - globe_center;\n        vec3 normal       = normalize(globe_to_hit);\n        \n        float cos_tilt = cos(-0.4189/2.3);\n        float sin_tilt = sin(-0.4189/2.3);\n        vec3 glob_vector = vec3(normal.x*cos_tilt - normal.y*sin_tilt, normal.x*sin_tilt + normal.y*cos_tilt, normal.z);\n        \n        float it = mod(iTime, TAU);\n        float cos_it = cos(it);\n        float sin_it = sin(it);\n        vec3 afr_vector = normalize(vec3(cos_it,   0.0, -sin_it));\n        vec3 nfr_vector = normalize(vec3(sin_it,   0.0,  cos_it));\n        vec3 mn_vector  = normalize(vec3(glob_vector.x, 0.0,  glob_vector.z));\n        \n        float half_map_x = acos(dot(mn_vector, afr_vector))*RES_TAU;\n        float map_x = (dot(mn_vector, nfr_vector) >= 0.0 ? 1.0 - half_map_x : half_map_x);\n        float map_y = acos(-glob_vector.y)/PI;\n        \n        int imap_x = int(clamp(iResolution.x*map_x, 0.0, iResolution.x));\n        int imap_y = int(clamp(iResolution.y*map_y, 0.0, iResolution.y));\n        \n        vec3 map_color = texelFetch(iChannel0, ivec2(imap_x, imap_y), 0).rgb;\n        \n        float light = max(dot(normal, light_dir), 0.0);\n        color = light*mix(vec3(0.43, 0.09, 0.31), vec3(0.25, 0.27, 0.72), pow(light, 0.2));\n        \n        float al = clamp(map_color.r, 0.0, 1.0);\n        al *= al;\n        color = (1.0-al)*color + al*vec3(0.7, 0.8, 1.0);\n    }\n    else\n    {\n        float l = 0.1;\n        float ring = max(0.0, discriminant + l)/l;\n        vec3 fake_normal = normalize(b*ray - globe_center);\n        \n        float fake_light = max(dot(fake_normal, light_dir), 0.0);\n        \n        vec3 ring_color = ring*mix(vec3(0.02, 0.05, 0.13), vec3(0.34, 0.47, 0.98), fake_light);\n        \n        color = vec3(0.02, 0.05, 0.13) + ring_color;\n    }\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* For custom globe texture\n// ----------------------------------------------------------------------------------------\n//\t\"Load Custom Textures\" by Antoine Clappier - March 2015\n//\n//\tLicensed under a Creative Commons Attribution-ShareAlike 4.0 International License\n//\thttp://creativecommons.org/licenses/by-sa/4.0/\n// ----------------------------------------------------------------------------------------\n\n\n// Image credits:\n//  Nasa, http://visibleearth.nasa.gov/\n\n\nA simple method to load custom image textures in Shadertoy!\n-----------------------------------------------------------\n\nThe idea is to call directly the SetTexture function found in Shadertoy js code.\n\nHere is how to loads the three textures needed for this shader:\n - Open the javascript console of your browser:\n\t\t\t\t   Mac      /     Windows\n\tChrome:  cmd + opt + J  /  ctrl + shift J\n\tFirefox: cmd + opt + K  /  ctrl + shift K\n    IE:          na         /  F12   \n\n- Then copy the following lines in the console to load custom 2048x2048 textures:\n\ngShaderToy.SetTexture(0, {mSrc:'https://dl.dropboxusercontent.com/s/88u2uo8dxdmgzxo/height2.jpg?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n*/\n\nvoid\nmainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    \n    float t = 1.0;\n    fragColor = vec4(sin(t*fragCoord.x)*cos(t*fragCoord.y) * (color.r*color.g >= 0.01 ? 1.0 : 0.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}