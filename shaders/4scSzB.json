{
    "Shader": {
        "info": {
            "date": "1460923219",
            "description": "Raymarching atom scene with bloom surges.",
            "flags": 32,
            "hasliked": 0,
            "id": "4scSzB",
            "likes": 14,
            "name": "Atomic power surge",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Fluffy",
            "viewed": 992
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dist = texture(iChannel0, vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y)).a / 100.0;\n    dist = pow(dist, 0.10);\n    dist = clamp(dist, 0.0, 1.0);\n    vec3 col =\n        texture(iChannel0, vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y)).xyz * (1.0 - dist) + \n        texture(iChannel1, vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y)).xyz * 0.4 * dist;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define REFLECTIONS 2\n#define GLOSSY 0.45\n#define TRACE_BLEND 1.000\n//#define iTime 2920.00\n#define iTime iTime\n\n#define PI 3.14159265359\n\nvec3 sunDir;\nvec3 qDir;\nvec3 tDir;\n\nhighp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return min(d1,d2);\n    return max(-d1,d2);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat map(vec3 posIn)\n{\n    vec3 c = vec3(2.0);\n    vec3 pos = mod(posIn, c) - 0.5 * c;\n    \n    float r = sin(iTime / 10.0) * 0.1 + 0.65;\n    float h = r / 2.0;\n    vec2 p = vec2(0.0, r);\n    \n    return\n        opS(sdSphere(pos + p.xxy, h),\n        opS(sdSphere(pos - p.xxy, h),\n        opS(sdSphere(pos + p.xyx, h),\n        opS(sdSphere(pos - p.xyx, h),\n        opS(sdSphere(pos + p.yxx, h),\n        opS(sdSphere(pos - p.yxx, h),\n        sdSphere(pos, r)))))));\n}\n\nvec3 normalAt(vec3 pos)\n{\n    float epsilon = 0.001;\n    \n    float s = map(pos);\n    float dx = s - map(vec3(pos.x + epsilon, pos.y, pos.z));\n    float dy = s - map(vec3(pos.x, pos.y + epsilon, pos.z));\n    float dz = s - map(vec3(pos.x, pos.y, pos.z + epsilon));\n                                   \n    return normalize(vec3(dx, dy, dz));\n}\n\nfloat march(vec3 offset, vec3 dir)\n{\n    const float minDist = 0.01;\n    const float maxDist = 500.0;\n    const float delta = 0.1;\n    \n    float closest = 10.0;\n    \n    float d = minDist;\n    \n    for (float t = 0.0; t < 256.0; t++)\n    {\n        if (d > maxDist)\n            break;\n        vec3 pos = offset + dir * d;\n        float ter = map(pos);\n        \n        if (ter <= 0.0)\n            return d + ter;\n        \n        if (ter < 0.001)\n            return d - ter;\n        \n        if (ter < closest)\n            closest = ter;\n        \n        d += ter;\n    }\n    \n    return -closest;\n}\n\nvec3 rotX(vec3 vec, float r)\n{\n    float c = cos(r);\n    float s = sin(r);\n    float cy = c * vec.y;\n    float sy = s * vec.y;\n    float cz = c * vec.z;\n    float sz = s * vec.z;\n    \n    return normalize(vec3(vec.x, cy - sz, sy + cz));\n}\n\nvec3 rotY(vec3 vec, float r)\n{\n    float c = cos(r);\n    float s = sin(r);\n    float cx = c * vec.x;\n    float sx = s * vec.x;\n    float cz = c * vec.z;\n    float sz = s * vec.z;\n    \n    return normalize(vec3(cx - sz, vec.y, sx + cz));\n}\n\nvec3 shade(vec3 position, vec3 rayDir)\n{\n    vec3 c = vec3(sin(iTime / 13.0) * 0.3 + 0.5, 0.8, sin(iTime / 4.0) * 0.2 + 0.8);\n    vec3 q = vec3(0.4, 0.4, 0.4);\n    vec3 t = vec3(0.1, 0.4, 0.9);\n    vec3 normal = normalAt(position);\n    vec3 col = c * clamp(dot(normal, sunDir), 0.0, 1.0) * (1.0 - GLOSSY) * 0.0;\n\n    float mul = 1.0;\n    \n    for (int i = 0; i < REFLECTIONS + 1; i++)\n    {\n    \n        vec3 stroke = clamp(vec3(1.002, 1.0, 1.02) * sin(position.y * position.z * (position.x + 5550.0) / 5000.0 + (iTime + sin(iTime / 4.0) * 0.9) / 0.1), 0.0, 1.0);\n        stroke *= stroke;\n        stroke *= stroke;\n        stroke *= stroke;\n        stroke *= stroke;\n        stroke *= stroke;\n        stroke *= stroke;\n        stroke *= stroke;\n        col += clamp(stroke / 1.0 * mul, 0.0, 1.0) * (1.5 + sin(iTime / 2.0) * 0.5);\n        \n        vec3 oldRay = rayDir;\n        rayDir = reflect(rayDir, normal);\n        \n        float dist = march(position, rayDir);\n        \n        if (dist >= 0.0)\n            position = (position + rayDir * dist);\n        else\n            break;\n        \n    \tnormal = normalAt(position);\n        mul *= GLOSSY * clamp(dot(rayDir, oldRay) + 1.0 , 0.0, 1.0); // Fresnel\n        col += c * clamp(dot(normal, sunDir), -0.2, 1.0) * mul;\n        col += q * clamp(dot(normal, qDir), -0.2, 1.0) * mul;\n        col += t * clamp(dot(normal, tDir), -0.2, 1.0) * mul;\n    }\n    \n    return col * 1.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    sunDir = normalize(vec3(0.0, sin(iTime), cos(iTime)));\n    qDir = normalize(vec3(-1.0, 1.0, 1.0));\n    tDir = normalize(vec3(1.0, -1.0, 1.0));\n    \n    vec3 cameraPos = vec3(sin(iTime / 7.0), sin(iTime / 5.0) * 3.0, sin(iTime / 13.0));\n    cameraPos = vec3(mod((iTime / 5.0) * 5.0, 2000.0), 0.0, 0.0);\n    float focalLength = sin(iTime / 2.0) * 4.0 + 5.0;\n    \n    float range = 0.0;\n    float offset = range / 2.0;\n    float randX = rand(fragCoord + iTime) * range - offset;\n    float randY = rand(fragCoord + 1000.0 + iTime) * range - offset;\n    \n    float x = (fragCoord.x + randX) / iResolution.x - 0.5;\n    float y = ((fragCoord.y + randY) / iResolution.y - 0.5) * (iResolution.y / iResolution.x);\n    \n    float lookX = iTime / 4.0;\n    float lookY = iTime / 5.18513;\n    \n    vec3 rayDir = normalize(vec3(x * focalLength, -1, y * focalLength));\n    rayDir = rotX(rayDir, lookX);\n    rayDir = rotY(rayDir, lookY);\n    float dist = march(cameraPos, rayDir);\n\t\n\tvec3 color = vec3(0);\n    if (dist >= 0.0)\n    {\n\t\tvec3 pos = (cameraPos + rayDir * dist);\t\t\n\t\tcolor = shade(pos, rayDir);\n\t}\n    \n\tfragColor = vec4(color, dist) * TRACE_BLEND +\n        texture(iChannel0, vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y)) * (1.0 - TRACE_BLEND);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define RANGE 30.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    for (float i = -RANGE; i < RANGE; i++)\n    \tcol += (texture(iChannel0, vec2((fragCoord.x + i) / iResolution.x, fragCoord.y / iResolution.y)) / ((abs(i)) + RANGE)).xyz;\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define RANGE 30.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    for (float i = -RANGE; i < RANGE; i++)\n    \tcol += (texture(iChannel0, vec2(fragCoord.x / iResolution.x, (fragCoord.y + i) / iResolution.y)) / ((abs(i)) + RANGE)).xyz;\n    \n    col *= col * col;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}