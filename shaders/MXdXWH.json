{
    "Shader": {
        "info": {
            "date": "1719157512",
            "description": "A recreation of the planet Brittle Hollow from Outer Wilds",
            "flags": 0,
            "hasliked": 0,
            "id": "MXdXWH",
            "likes": 5,
            "name": "Cravit√©",
            "published": 3,
            "tags": [
                "procedural",
                "raymarching",
                "perlinnoise",
                "space",
                "planet",
                "blackhole",
                "outerwilds"
            ],
            "usePreview": 0,
            "username": "Docteur_Raton",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "mat2 rot(float angle)\n{\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, -s, s, c);\n}\n\nfloat hash(float x)\n{\n\tx += 123.23f;\n\tx = sin(123.48179f * x);\n\n\treturn fract(123.41f * fract(125.313f * x));\n}\n\nvec2 hash(vec2 p)\n{\n\treturn vec2(hash(sin(p.x) * p.y), hash(2.123f * p.x * p.y));\n}\n\nvec3 hash(vec3 p)\n{\n\treturn vec3(hash(sin(p.x) * p.y * p.z), hash(2.123f * p.x * p.y * p.z), hash(p.x * sin(123.43f * p.y) * p.z));\n}\n\nfloat generateNoise(vec2 uv0)\n// Generates Perlin noise.\n{\n\tvec2 uv = fract(uv0);\n\tvec2 cellID = floor(uv0);\n\tvec2 v00 = vec2(0.f, 0.f);\n\tvec2 v01 = vec2(0.f, 1.f);\n\tvec2 v10 = vec2(1.f, 0.f);\n\tvec2 v11 = vec2(1.f, 1.f);\n\tfloat dot00 = dot(2.f * hash(cellID + v00) - 1.f, uv - v00) + .15f;\n\tfloat dot01 = dot(2.f * hash(cellID + v01) - 1.f, uv - v01) + .15f;\n\tfloat dot10 = dot(2.f * hash(cellID + v10) - 1.f, uv - v10) + .15f;\n\tfloat dot11 = dot(2.f * hash(cellID + v11) - 1.f, uv - v11) + .15f;\n\tfloat total = mix(mix(dot00, dot10, uv.x), mix(dot01, dot11, uv.x), uv.y);\n\n\treturn total;\n}\n\nfloat findPerlinDot(vec3 uv0, vec3 corner)\n{\n\tvec3 uv = fract(uv0);\n\tvec3 cellID = floor(uv0);\n\n\treturn dot(2.f * hash(cellID + corner) - 1.f, uv - corner) + .15f;\n}\n\nfloat generateNoise(vec3 uv0)\n// Generates Perlin noise.\n{\n\tuv0 += 13.213f;\n\tvec3 uv = fract(uv0);\n\tvec3 cellID = floor(uv0);\n\tvec2 a = vec2(0.f, 1.f);\n\tvec3 v000 = a.xxx;\n\tvec3 v001 = a.xxy;\n\tvec3 v010 = a.xyx;\n\tvec3 v011 = a.xyy;\n\tvec3 v100 = a.yxx;\n\tvec3 v101 = a.yxy;\n\tvec3 v110 = a.yyx;\n\tvec3 v111 = a.yyy;\n\tfloat dot000 = findPerlinDot(uv0, v000);\n\tfloat dot001 = findPerlinDot(uv0, v001);\n\tfloat dot010 = findPerlinDot(uv0, v010);\n\tfloat dot011 = findPerlinDot(uv0, v011);\n\tfloat dot100 = findPerlinDot(uv0, v100);\n\tfloat dot101 = findPerlinDot(uv0, v101);\n\tfloat dot110 = findPerlinDot(uv0, v110);\n\tfloat dot111 = findPerlinDot(uv0, v111);\n\tfloat total = mix(mix(mix(dot000, dot100, uv.x), mix(dot010, dot110, uv.x), uv.y), mix(mix(dot001, dot101, uv.x), mix(dot011, dot111, uv.x), uv.y), uv.z);\n\n\treturn total;\n}\n\nfloat map(vec3 p)\n{\n\tfloat frequency = 4.f;\n\tfloat noise = generateNoise(3.f * p);\n\tfloat noise2 = generateNoise(15.f * p);\n\tfloat exterior = length(p) + .004f * noise2 - 1.f - (.1f * floor(frequency * noise) / frequency);\n\tfloat interior = length(p) - 1.1f + noise;\n\n\treturn .2f * max(exterior, -interior);\n}\n\nvec3 getNormal(vec3 p)\n{\n\tvec2 e = vec2(.00001f, 0);\n\tvec3 n = map(p) - vec3(map(p - e.xyy), map(p - e.yxy), map(p - e.yyx));\n\n\treturn normalize(n);\n}\n\nvec3 findPaletteColor(float t)\n{\n\tvec3 a = vec3(0.518f, 0.580f, 0.580f);\n\tvec3 b = vec3(0.515f, 0.515f, 0.421f);\n\tvec3 c = vec3(0.336f, 0.336f, 0.210f);\n\tvec3 d = vec3(-1.122f, -0.792f, -0.452f);\n\n\treturn a + b * cos(6.28318f * (c * t + d));\n}\n\nvec3 drawStars(vec2 uv0)\n{\n\tfloat total = generateNoise(200.f * uv0);\n\ttotal = pow(total, 1.3f);\n\n\treturn 1.5f * vec3(smoothstep(.45f, .8f, total)) + .05f;\n}\n\nvec4 render(vec2 uv)\n{\n\tvec3 ro = vec3(0.f, 0.f, 2.f);\n\tvec3 rd = vec3(uv, -1.f);\n\t//vec2 angle = vec2(6.f * iMouse.x / iResolution.x, -6.f * iMouse.y / iResolution.y);\n    vec2 angle = vec2(.2 * iTime, 0.);\n\tro.xz *= rot(angle.x);\n\trd.xz *= rot(angle.x);\n\tro.yz *= rot(angle.y);\n\trd.yz *= rot(angle.y);\n\tvec3 p = ro;\n\tfloat numIterations = 200.f;\n\tfor (float i = 0.f; i < numIterations; ++i)\n\t{\n\t\tfloat d = map(p);\n\t\tif (length(p) < 0.6f && length(p) < .3f)\n\t\t{\n\t\t\treturn vec4(vec3(.5f * smoothstep(.198f, .2f, length(uv.xy))), 1.f);\n\t\t}\n\t\tif (d < 0.001f)\n\t\t{\n\t\t\tvec3 normal = getNormal(p);\n\t\t\t//return vec4(findPaletteColor(.5 * normal.y + 1.5), 1.);\n\t\t\t//return vec4(vec3(1.15 - length(p)), 1.);\n\t\t\treturn vec4(.9f * findPaletteColor(.6f * length(p) + .8) * (.5f * normal.y + .5f), 1.f);\n\t\t\treturn vec4(abs(normal), 1.f);\n\t\t}\n\t\tif (d > 100.f)\n\t\t\treturn vec4(0.f);\n\t\trd = normalize(rd - .1f * d * p / pow(length(p), 3.f));\n\t\tp +=  d * rd;\n\t}\n\n\treturn vec4(0.f);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n\tvec2 uv = (2.f * fragCoord - iResolution.xy) / iResolution.y;\n\tvec3 col = drawStars(uv);\n\tfragColor = vec4(col, 1.0f);\n\tvec4 image = render(uv);\n\tfragColor.rgb = mix(fragColor.rgb, image.rgb, image.a);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}