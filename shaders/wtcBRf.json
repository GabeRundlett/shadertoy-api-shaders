{
    "Shader": {
        "info": {
            "date": "1613200956",
            "description": "fork of fabrice's [url]https://www.shadertoy.com/view/3l3fzf[/url],\nwith accelerated falling.",
            "flags": 32,
            "hasliked": 0,
            "id": "wtcBRf",
            "likes": 5,
            "name": "Construction Game fork",
            "published": 3,
            "tags": [
                "gravity"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// Fork of \"construction game\" by FabriceNeyret2. https://shadertoy.com/view/3l3fzf\n// 2021-02-12 20:05:55\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = u/R.y, A; \n    \n    // the \"O -= O\" thing yield static on iOS.\n    O = vec4(0.0);\n    for ( float x = 0.; x < S; x++ )                            // parse particles\n        for ( float y = 0.; y < S; y++ ) {\n            vec4 T = T(vec2(x,y));\n            A = abs( U - T.xy );\n            if ( max(A.x,A.y) < r ) O += vec4(.5+.5*T.zz,1,1);  // draw particle\n          }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float S  =  4.,                // S² bricks\n            r  = .4/S /2.;           // brick radius\n#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// --- is current particle colliding ?\nbool collide(vec2 particleIndex, vec2 testPt, out vec2 fix) {\n\n    fix = vec2(0.0);\n\n// collide with floor\n    if ( testPt.y < r ) {\n        fix = vec2(0.0, r - testPt.y);\n        return true;\n    }\n\n    bool ret = false;\n    for ( float x = 0.; x < S; x++ ) {\n        for ( float y = 0.; y < S; y++ ) {\n            vec2 P = vec2(x,y), A;\n            if ( P != particleIndex-.5 ) {\n\n                vec2 otherPartPartPos = T(P).xy;\n                A = testPt - otherPartPartPos;\n\n                if (abs(A.x) < 2.0 * r && abs(A.y) < 2.0 * r) {\n                    if (abs(A.x) > abs(A.y)) {\n                        float tmp = (r + 0.5/R.y) * sign(A.x) * 2.0 - A.x;\n                        fix.x = abs(tmp) > abs(fix.x) ? tmp : fix.x;\n                    }\n                    else {\n                        float tmp = (r + 0.5/R.y) * sign(A.y) * 2.0 - A.y;\n                        fix.y = abs(tmp) > abs(fix.y) ? tmp : fix.y;\n                    }\n                    ret = true;\n                }\n            }\n        }\n    }\n\n// no collision\n    return ret;\n }\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\n    // manage only S² particles\n    if ( max(U.x,U.y) > S ) return;\n\n    // init state\n    if ( iFrame < 1 ) {\n        O = vec4(.5*U/S,0,1.0);\n        return;\n    }\n\n\n    // restore state\n    O = T(U);\n    vec2 M = iMouse.xy/R.y;\n    vec2 D = vec2(0.,1./R.y);\n\n    // mouse release\n    if ( iMouse.z < 0. ) {\n        O.z = 0.;\n        \n    }\n    // mouse down on me: activate\n    else if ( iMouse.w > 0. && length(M-O.xy) < r ) {\n        O.z = 1.;\n        O.w = 1.;\n    }\n\n    vec2 fix;\n\n    if (O.z > 0.) {\n        // active particle\n\n        if (collide(U, M, fix)) {\n            // collision: stop\n            O.xy = M + fix * 1.0;\n        }\n        else {\n            // no obstactle: follow mouse\n            O.xy = M;\n        }\n    }\n      \n    else {\n        //  not active particle\n        \n        vec2 d = D * O.w;\n\n        if (collide(U, O.xy-d, fix)) {\n            // collision,\n            O.xy -= d;\n            O.xy += fix;\n            O.w   = 1.0;\n        }\n        else {\n            // free fall\n            O.xy -= d;\n            O.w  += 0.5;\n        }\n    }\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}