{
    "Shader": {
        "info": {
            "date": "1617545223",
            "description": "Two golden eggs in a hyperboloid wrapper, undergoing a projective transformation. This brings the line at infinity into real space, which creates problems for raymarching unless it is hidden. Press 'x' to unhide. 1-4 to show/hide the various quadrics.",
            "flags": 48,
            "hasliked": 0,
            "id": "fdSGzG",
            "likes": 3,
            "name": "Projective Easter Egg II",
            "published": 3,
            "tags": [
                "egg",
                "projective",
                "easter"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Projective Easter Egg II\n// Matthew Arcus, mla, 2021.\n//\n// Mouse, <up> and <down> to move around\n// 1-4: show/hide various quadrics\n// 'x': don't hide plane at infinity\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec3 lightdir = vec3(0,2,1);\n\n// 4 quadrics, adjust de of each so that the eye is on the inside,\nfloat eyesign0 = 1.0; \nfloat eyesign1 = 1.0;\nfloat eyesign2 = 1.0;\nfloat eyesign3 = 1.0;\n\nbool doquadric0 = true;\nbool doquadric1 = true;\nbool doquadric2 = true;\nbool doquadric3 = false;\n\nbool hideinfinity = true;\n\n// Implicit equation for quadric ap.p = r\nfloat quadric(vec3 p, vec3 a, float r) {\n  return dot(a*p,p) - r;\n}\n\nfloat r2 = 0.9;\nfloat scene0(vec3 p) { return quadric(p,vec3(1),r2); }\nfloat scene1(vec3 p) { return quadric(p,vec3(1,1,-1),1.0); }\nfloat scene2(vec3 p) { return quadric(p,vec3(1,-1,-1),1.0/r2); }\nfloat scene3(vec3 p) { return quadric(p,vec3(-1,-1,1),1.0/r2); }\n\nfloat scene(vec3 p, out int type) {\n  //r2 = 0.5+0.5*sin(iTime);\n  float d = 1e8,d1;\n  if (doquadric0) {\n    float d1 = eyesign0*scene0(p);\n    if (d1 < d) { d = d1; type = 2; }\n  }\n  if (doquadric1) {\n    float d1 = eyesign1*scene1(p);\n    if (d1 < d) { d = d1; type = 0; }\n  }\n  if (doquadric2) {\n    float d1 = eyesign2*scene2(p);\n    if (d1 < d) { d = d1; type = 2; }\n  }\n  if (doquadric3) {\n    float d1 = eyesign3*scene3(p);\n    if (d1 < d) { d = d1; type = 2; }\n  }\n  return d;\n}\n\nmat4 A = mat4(0.8,0,0,0,\n              0,1,0,0,\n              0,0,1,0,\n              0,0,0,1);\n\nfloat de(vec3 p3) {\n  vec4 p = vec4(p3,1);\n  p = A*p;\n  p /= p.w;\n  float t = length(p.xyz);\n  // This gets rid of \"line at infinity\", which otherwise shrinks\n  // all distances to 0.\n  if (hideinfinity && t > 100.0) p.xyz *= 100.0/t;\n  int type;\n  return scene(p.xyz,type);\n}\n\nvec3 grad(vec3 p,float d) {\n  // First order seems to be OK for our purposes.\n  float eps = 1.0/256.0;\n  vec2 e = vec2(eps, 0.0);\n  //float d = de(p); // Pass in de(p)\n  return vec3(de(p + e.xyy) - d,\n              de(p + e.yxy) - d,\n              de(p + e.yyx) - d)/eps;\n}\n\nfloat eval(vec3 p) {\n  float d = de(p);\n  vec3 g = grad(p,d);\n  d /= length(g);\n  return d;\n}\n\nfloat maxdist = 10.0;\nfloat fogdist = 4.0;\nfloat march(vec3 q, vec3 r) {\n  float t = 0.1;\n  int numsteps = 500;\n  float precis = 1e-4;\n  for (int i = 0; i < numsteps; i++) {\n    vec3 p = q+t*r;\n    float d = eval(p);\n    if (abs(d) < precis) return t;\n    t += min(0.5,0.8*d);\n    if (t < 0.0 || t > maxdist) break;\n  }\n  return -1.0;\n}\n\nvec3 getcolor(vec3 p, out float specfact, out float specpow) {\n  int type;\n  specfact = 0.5;\n  specpow = 2.0;\n  vec4 p4 = A*vec4(p,1);\n  p = p4.xyz/p4.w;\n  scene(p,type);\n  if (type == 0) {\n    p = p.yzx;\n    float phi = atan(p.x/length(p.yz)); //[-PI/2..+PI/2]\n    float rho = atan(p.y,p.z);\n    //vec3 color = hsv2rgb(vec3(0.3+0.4*(0.5+phi/PI),1,1));\n    vec3 color = hsv2rgb(vec3(0.5+phi/PI,1,1));\n    color *= 0.5+0.5*cos(32.0*phi+rho);\n    return color;\n  } else if (type == 2) {\n    specfact = 1.0;\n    specpow = 10.0;\n    return 0.8*vec3(1,0.75,0.25);\n  } else {\n    return vec3(0,1,1);\n  }\n}\n\nvoid init() {\n  // Use quaternion rotation?\n  float time = 0.125*PI*iTime;\n  A *= mat4(cos(time),0,0,sin(time),\n            0,1,0,0,\n            0,0,1,0,\n            -sin(time),0,0,cos(time));\n  A *= mat4(1,0,0,0,\n            0,cos(time),sin(time),0,\n            0,-sin(time),cos(time),0,\n            0,0,0,1);\n}\n\nvec3 background = vec3(0,0,0.01);\n\nvec3 raycolor(vec3 q, vec3 r) {\n  float t = march(q,r);\n  if (t < 0.0) return background;\n  vec3 p = q+t*r;\n  float d = de(p);\n  vec3 normal = normalize(grad(p,d));\n  float specfact, specpow;\n  vec3 color = getcolor(p,specfact,specpow);\n  vec3 speccolor = color;\n  float ambient = 0.5;\n  float diffuse = 0.3*clamp(dot(normal,lightdir),0.0,1.0);\n  color *= ambient+diffuse;\n  float specular = pow(max(0.0,dot(reflect(lightdir,normal),r)),2.0);\n  color += specfact*specular*speccolor;\n  color = mix(color,background,clamp((t-fogdist)/(maxdist-fogdist),0.0,1.0));\n  return color;\n}\n\nvec3 rotateframe(vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  {\n    float t = 0.0; // iTime;\n    p.yz = rotate(p.yz,0.5+t*0.125);\n    p.zx = rotate(p.zx,0.5+t*0.1);\n  }\n  return p;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n  init();\n  doquadric0 = doquadric0 != key(CHAR_0+1);\n  doquadric1 = doquadric1 != key(CHAR_0+2);\n  doquadric2 = doquadric2 != key(CHAR_0+3);\n  doquadric3 = doquadric3 != key(CHAR_0+4);\n\n  hideinfinity = hideinfinity != key(CHAR_X);\n  \n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  float eyedist = 6.0;\n  eyedist *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  fogdist = eyedist;\n  maxdist = 2.0*eyedist;\n  vec3 eye = vec3(0,0,eyedist);\n  vec3 ray = vec3(z,-2);\n  eye = rotateframe(eye);\n  {\n    vec4 eye4 = A*vec4(eye,1);\n    vec3 eye1 = eye4.xyz/eye4.w;\n    eyesign0 = sign(scene0(eye1));\n    eyesign1 = sign(scene1(eye1));\n    eyesign2 = sign(scene2(eye1));\n    eyesign3 = sign(scene3(eye1));\n  }\n  ray = rotateframe(ray);\n  ray = normalize(ray);\n  lightdir = rotateframe(lightdir);\n  lightdir = normalize(lightdir);\n  vec3 col = raycolor(eye,ray);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\nconst int CHAR_0 = 48;\nconst int CHAR_X = 88;\n\n// Macros for use in \"common\" blocks.\n#define key(code) (texelFetch(iChannel0, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel1, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\nfloat PI = 3.14159;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}