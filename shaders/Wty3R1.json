{
    "Shader": {
        "info": {
            "date": "1578232394",
            "description": "new to shaders and raymarch",
            "flags": 0,
            "hasliked": 0,
            "id": "Wty3R1",
            "likes": 3,
            "name": "Terrain-",
            "published": 3,
            "tags": [
                "noise",
                "raymarch",
                "beginner"
            ],
            "usePreview": 0,
            "username": "Subash",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 100.\n#define MIN_DIST 0.01\n#define MAX_COUNT 100\n\nfloat rand(vec2 uv)\n{\n    return fract(sin(uv.x * 1033.5 + uv.y) * 23930.58);\n}\nmat2 rotate(float ang){\n    float ca = cos(ang);\n    float sa = sin(ang);\n    return mat2(ca, sa, -sa, ca);\n}\nfloat noise(vec2 uv){\n \tvec2 xy = floor(uv);\n    vec2 frac = fract(uv);\n    frac = frac * frac * (3. - 2. * frac);\n    \n    vec2 bl = xy;\n    vec2 tl = xy + vec2(0.,1.);\n    vec2 br = xy + vec2(1.,0.);\n    vec2 tr = xy + vec2(1.,1.);\n\n    float a = rand(tl);\n    float b = rand(tr);\n    float c = rand(bl);\n    float d = rand(br);\n    \n    float top = mix(a, b, frac.x);\n    float bottom = mix(c, d, frac.x);\n    \n    return mix(bottom, top, frac.y);\n}\n\nfloat fbm(vec2 uv){\n \tfloat res = 0.;\n    float amp = .5;\n    float freq = .5;\n    \n    for(int i = 0; i < 8; ++i)\n    {\n        uv *= rotate(80.);\n        res += amp * noise(uv * freq + 3.0);\n        amp *= 0.5;\n        freq *= 2.0;\n    }\n    return res;\n}\n\n\nfloat getDist(vec3 p){   \n    float disp = fbm(p.xz*0.08);\n    //return disp;\n    return (p.y+disp*50.)*.3;\n}\n\n\nvec3 normal(vec3 p){\n\tvec2 e = vec2(.001, 0.0);\n    return normalize(vec3(\n    \tgetDist(p + e.xyy) - getDist(p - e.xyy),\n        getDist(p + e.yxy) - getDist(p - e.yxy),\n        getDist(p + e.yyx) - getDist(p - e.yyx)\n    ));\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd){\n \tfloat R0 = 0.;\n    for(int i = 0; i < MAX_COUNT; i++){\n     \tvec3 p = ro + R0 * rd;\n        float d = getDist(p);\n        R0 += d;\n        if(d < MIN_DIST || R0 > MAX_DIST) break;\n    }\n    return R0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy * 100.;\n\tvec3 ro = vec3(0., 2., -30.);\n    ro.xz *= rotate(mouse.x);\n    float zoom = .5;\n    vec3 target = vec3(0.0);\n    ro.z += iTime * 5.;\n    target.z +=iTime * 5.;\n    vec3 ww = normalize(target - ro);\n    vec3 uu = normalize(cross(vec3(0., 1., 0.), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(uu * uv.x + vv * uv.y + ww * zoom);\n    vec3 col = vec3(0.);\n    float d0 = rayMarch(ro, rd);\n    col = vec3(d0)/100.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}