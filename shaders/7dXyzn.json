{
    "Shader": {
        "info": {
            "date": "1641579469",
            "description": "This is not what I planned to make...\nUse the mouse to explore.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dXyzn",
            "likes": 10,
            "name": "Neon ripples",
            "published": 3,
            "tags": [
                "2d",
                "interactive",
                "animation"
            ],
            "usePreview": 0,
            "username": "kmaork",
            "viewed": 471
        },
        "renderpass": [
            {
                "code": "float getBrightness(float x) {\n    return powerCycle(((x - 0.5) * 500.) + 0.5, 6.);\n}\n\nvec3 hsb2rgb(in vec3 c){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float noise = sqrt(fetchState(STATE_NOISE_X, fragCoord.x) * fetchState(STATE_NOISE_Y, fragCoord.y));\n    float br = getBrightness(noise);\n    fragColor = vec4(hsb2rgb(vec3(noise * 3. + 0.5, .8, br)), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float SPEED = 0.2;\nconst int NUM_WAVES = 5;\nconst float[NUM_WAVES] X_FREQS = float[](4., 7., 9., 13., 17.);\nconst float[NUM_WAVES] X_DIRECTIONS = float[](0.1, 0.5, -0.2, 0.3, -0.4);\nconst float[NUM_WAVES] Y_FREQS = float[](5., 9., 10., 13., 16.);\nconst float[NUM_WAVES] Y_DIRECTIONS = float[](0.5, -0.3, 0.1, -0.4, 0.2);\nconst float DIV = 1. / float(NUM_WAVES);\n\nfloat getNoise(in float[NUM_WAVES] freqs, in float[NUM_WAVES] directions, in float pos, in float dp) {\n    float noise = 0.;\n    for (int i = 0; i < NUM_WAVES; ++i) {\n        float offset = SPEED * iTime * directions[i] + dp;\n        noise += sin((pos + offset) * freqs[i]) / 2. / freqs[i] + 0.5; //powerCycle((pos + offset) * freqs[i], 6.8);\n    }\n    return noise * DIV;\n}\n\nbool mouseClicked() {\n    return iMouse.w > 0.;\n}\n\nbool mouseDown() {\n    return (iMouse.z > 0.) && !mouseClicked();\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float val;\n    vec2 offset = iFrame == 0 ? vec2(0, 0) : \n                                vec2(fetchState(STATE_CONTROL, CONTROL_OFFSET_X), fetchState(STATE_CONTROL, CONTROL_OFFSET_Y));\n    switch(int(fragCoord.y)) {\n    case STATE_NOISE_X:\n        val = getNoise(X_FREQS, X_DIRECTIONS, fragCoord.x / iResolution.x, offset.x);\n        break;\n    case STATE_NOISE_Y:\n        val = getNoise(Y_FREQS, Y_DIRECTIONS, fragCoord.x / iResolution.x, offset.y);\n        break;\n    case STATE_CONTROL:\n        switch (int(fragCoord.x)) {\n            case CONTROL_LAST_MOUSE_X:\n                val = iMouse.x;\n                break;\n            case CONTROL_LAST_MOUSE_Y:\n                val = iMouse.y;\n                break;\n            case CONTROL_OFFSET_X:\n                val = offset.x - (mouseDown() ? iMouse.x - fetchState(STATE_CONTROL, CONTROL_LAST_MOUSE_X) : 0.) / iResolution.x;\n                break;\n            case CONTROL_OFFSET_Y:\n                val = offset.y - (mouseDown() ? iMouse.y - fetchState(STATE_CONTROL, CONTROL_LAST_MOUSE_Y) : 0.) / iResolution.x;\n                break;\n        }\n        break;\n    default:\n        return;\n    }\n    fragColor = vec4(val, 0., 0., 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int STATE_NOISE_X = 0;\nconst int STATE_NOISE_Y = 1;\nconst int STATE_CONTROL = 2;\nconst int CONTROL_LAST_MOUSE_X = 0;\nconst int CONTROL_LAST_MOUSE_Y = 1;\nconst int CONTROL_OFFSET_X = 2;\nconst int CONTROL_OFFSET_Y = 3;\n\n#define fetchState(bank, idx) texelFetch(iChannel0, ivec2(float(idx), float(bank) + 0.5), 0).x\n\nfloat powerCycle(in float x, in float deg) {\n    float w = sin(x);\n    float mag = pow(abs(w), 1. / deg);\n    return 0.5 * ((w > 0. ? mag : -mag) + 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}