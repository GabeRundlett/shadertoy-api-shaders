{
    "Shader": {
        "info": {
            "date": "1635246403",
            "description": "网格噪声 + Voronoi算法",
            "flags": 0,
            "hasliked": 0,
            "id": "ssVXWG",
            "likes": 0,
            "name": "入门之路-7",
            "published": 3,
            "tags": [],
            "usePreview": 0,
            "username": "jialouluo",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "vec2 random( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv*=3.;\n    vec2 f = fract(uv);//取小数部分 -单元网格坐标\n    vec2 k = floor(uv);//取整\n    vec3 color =vec3(0.0);\n    float m = 2.0;\n    vec2 dir = vec2(0.0);\n    for(int i=-1;i<=1;i++){\n        for(int j =-1;j<=1;j++){\n            vec2 rand = vec2(float(i),float(j));\n            vec2 result = random(rand+ k );\n            result = 0.5 + 0.5*sin(iTime + result*6.28 ) + rand ;\n            float dis = length(result - f);\n            if(dis<m){\n                m = dis;\n                dir = result;\n            }\n        }\n    }\n    //简单的理解为 找到每个像素与多个（这里是9个--上下左右四个斜角还有像素自身存在的网格的特殊点(伪随机点)）单元网格特殊点(伪随机点)的最短距离特殊点，然后将其距离的值存储下来\n    color+=m;\n    color-=abs(sin(35.43 * m))*0.3;\n    color.rg =dir; \n    \n    color = step(0.05,color)*color;\n    \n    \n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}