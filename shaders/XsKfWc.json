{
    "Shader": {
        "info": {
            "date": "1531497156",
            "description": "Tech Sphere",
            "flags": 8,
            "hasliked": 0,
            "id": "XsKfWc",
            "likes": 0,
            "name": "Tech Sphere - 2018-07-05",
            "published": 3,
            "tags": [
                "sphere",
                "tech"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "float sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat cylinder(vec3 p, vec3 d, float r)\n{\n    return distance(d * dot(p, d), p) - r;\n}\n\nfloat SDF(in vec3 p)\n{   \n    return cylinder(p, vec3(0.0, 1.0, 0.0), 0.1 + texture(iChannel0, p.xy).r * 0.2);\n}\n\nvec3 Norm(in vec3 p)\n{\n    return normalize(vec3(\n        SDF(p + vec3(0.1, 0., 0.)) - SDF(p - vec3(0.1, 0., 0.)),\n        SDF(p + vec3(0., 0.1, 0.)) - SDF(p - vec3(0., 0.1, 0.)),\n        SDF(p + vec3(0., 0., 0.1)) - SDF(p - vec3(0., 0., 0.1))\n        ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ndc = uv * 2. - 1.;\n    \n    vec3 o = vec3(0., 0., -2.);\n    \n    vec3 f = vec3(0., 0., 1.);\n    vec3 r = vec3(1., 0., 0.);\n    vec3 u = vec3(0., 1., 0.);\n    \n    float aspect = iResolution.y / iResolution.x;\n    float aperture = 1.;\n    \n    vec3 dir = normalize(f * aperture + r * ndc.x + u * ndc.y * aspect);\n    float dist = 0.;\n    \n    vec4 fc = texture(iChannel1, dir);\n    \n    const int stepCount = 64;\n    for(int i = 0; i < stepCount; i++)\n    {\n    \tvec3 p = o + dir * dist;\n        float d = SDF(p);\n        \n        const float E = 0.01;\n        if(d < E)\n        {\n            vec3 n = Norm(p);\n            \n           \tvec3 lp = vec3(cos(iTime) * 2.0, 1.0, sin(iTime) * 2.0);\n            vec3 ld = normalize(lp - p);\n            \n            vec3 hl = normalize(-dir + ld);\n            float diff = max(dot(n, ld), 0.1);\n            float spec = pow(max(dot(hl, n), 0.), 50.);\n            fc = texture(iChannel0, p.xy) * diff + spec;\n            fc = pow(fc, vec4(1.0/2.2));\n            \n            break;\n        }\n        \n        dist += d;\n    }\n\n    // Output to screen\n    fragColor = fc;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float t;\n\nfloat F(float f)\n{\n    return sin(6.2831*f*mod(t, 1.0 / f));\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    t = time;\n    \n    return vec2( F(440.0) + F(441.0) + F(442.0) + F(443.0) + F(444.0) + F(445.0) ) / 1000.;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}