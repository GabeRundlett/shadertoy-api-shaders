{
    "Shader": {
        "info": {
            "date": "1473017863",
            "description": "Flight through a starfield inspired by the galactic map in No Man's Sky",
            "flags": 32,
            "hasliked": 0,
            "id": "MtcGDf",
            "likes": 164,
            "name": "No Man's Starfield",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "star",
                "space",
                "galaxy",
                "stars",
                "nebula",
                "starfield"
            ],
            "usePreview": 1,
            "username": "marian42",
            "viewed": 22593
        },
        "renderpass": [
            {
                "code": "const float FLIGHT_SPEED = 8.0;\n\nconst float DRAW_DISTANCE = 60.0; // Lower this to increase framerate\nconst float FADEOUT_DISTANCE = 10.0; // must be < DRAW_DISTANCE    \nconst float FIELD_OF_VIEW = 1.05;   \n\nconst float STAR_SIZE = 0.6; // must be > 0 and < 1\nconst float STAR_CORE_SIZE = 0.14;\n\nconst float CLUSTER_SCALE = 0.02;\nconst float STAR_THRESHOLD = 0.775;\n\nconst float BLACK_HOLE_CORE_RADIUS = 0.2;\nconst float BLACK_HOLE_THRESHOLD = 0.9995;\nconst float BLACK_HOLE_DISTORTION = 0.03;\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 getRayDirection(vec2 fragCoord, vec3 cameraDirection) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    const float screenWidth = 1.0;\n    float originToScreen = screenWidth / 2.0 / tan(FIELD_OF_VIEW / 2.0);\n    \n    vec3 screenCenter = originToScreen * cameraDirection;\n    vec3 baseX = normalize(cross(screenCenter, vec3(0, -1.0, 0)));\n    vec3 baseY = normalize(cross(screenCenter, baseX));\n    \n    return normalize(screenCenter + (uv.x - 0.5) * baseX + (uv.y - 0.5) * iResolution.y / iResolution.x * baseY);\n}\n\nfloat getDistance(ivec3 chunkPath, vec3 localStart, vec3 localPosition) {\n    return length(vec3(chunkPath) + localPosition - localStart);\n}\n\nvoid move(inout vec3 localPosition, vec3 rayDirection, vec3 directionBound) {\n    vec3 directionSign = sign(rayDirection);\n\tvec3 amountVector = (directionBound - directionSign * localPosition) / abs(rayDirection);\n    \n    float amount = min(amountVector.x, min(amountVector.y, amountVector.z));\n    \n    localPosition += amount * rayDirection;\n}\n\n// Makes sure that each component of localPosition is >= 0 and <= 1\nvoid moveInsideBox(inout vec3 localPosition, inout ivec3 chunk, vec3 directionSign, vec3 direcctionBound) {\n    const float eps = 0.0000001;\n    if (localPosition.x * directionSign.x >= direcctionBound.x - eps) {\n        localPosition.x -= directionSign.x;\n        chunk.x += int(directionSign.x);\n    } else if (localPosition.y * directionSign.y >= direcctionBound.y - eps) {\n        localPosition.y -= directionSign.y;\n        chunk.y += int(directionSign.y);\n    } else if (localPosition.z * directionSign.z >= direcctionBound.z - eps) {\n        localPosition.z -= directionSign.z;\n        chunk.z += int(directionSign.z);\n    }\n}\n\nbool hasStar(ivec3 chunk) {\n    return texture(iChannel0, mod(CLUSTER_SCALE * (vec2(chunk.xy) + vec2(chunk.zx)) + vec2(0.724, 0.111), 1.0)).r > STAR_THRESHOLD\n        && texture(iChannel0, mod(CLUSTER_SCALE * (vec2(chunk.xz) + vec2(chunk.zy)) + vec2(0.333, 0.777), 1.0)).r > STAR_THRESHOLD;\n}\n\nbool hasBlackHole(ivec3 chunk) {\n    return rand(0.0001 * vec2(chunk.xy) + 0.002 * vec2(chunk.yz)) > BLACK_HOLE_THRESHOLD;\n}\n\nvec3 getStarToRayVector(vec3 rayBase, vec3 rayDirection, vec3 starPosition) {\n\tfloat r = (dot(rayDirection, starPosition) - dot(rayDirection, rayBase)) / dot(rayDirection, rayDirection);\n    vec3 pointOnRay = rayBase + r * rayDirection;\n    return pointOnRay - starPosition;\n}\n\nvec3 getStarPosition(ivec3 chunk, float starSize) {\n    vec3 position = abs(vec3(rand(vec2(float(chunk.x) / float(chunk.y) + 0.24, float(chunk.y) / float(chunk.z) + 0.66)),\n                             rand(vec2(float(chunk.x) / float(chunk.z) + 0.73, float(chunk.z) / float(chunk.y) + 0.45)),\n                             rand(vec2(float(chunk.y) / float(chunk.x) + 0.12, float(chunk.y) / float(chunk.z) + 0.76))));\n    \n    return starSize * vec3(1.0) + (1.0 - 2.0 * starSize) * position;\n}\n\nvec4 getNebulaColor(vec3 globalPosition, vec3 rayDirection) {\n    vec3 color = vec3(0.0);\n    float spaceLeft = 1.0;\n    \n    const float layerDistance = 10.0;\n    float rayLayerStep = rayDirection.z / layerDistance;\n    \n    const int steps = 4;\n    for (int i = 0; i <= steps; i++) {\n    \tvec3 noiseeval = globalPosition + rayDirection * ((1.0 - fract(globalPosition.z / layerDistance) + float(i)) * layerDistance / rayDirection.z);\n    \tnoiseeval.xy += noiseeval.z;\n        \n        \n        float value = 0.06 * texture(iChannel0, fract(noiseeval.xy / 60.0)).r;\n         \n        if (i == 0) {\n            value *= 1.0 - fract(globalPosition.z / layerDistance);\n        } else if (i == steps) {\n            value *= fract(globalPosition.z / layerDistance);\n        }\n        \n        float hue = mod(noiseeval.z / layerDistance / 34.444, 1.0);\n        \n        color += spaceLeft * hsv2rgb(vec3(hue, 1.0, value));\n        spaceLeft = max(0.0, spaceLeft - value * 2.0);\n    }\n    return vec4(color, 1.0);\n}\n\nvec4 getStarGlowColor(float starDistance, float angle, float hue) {\n    float progress = 1.0 - starDistance;\n    return vec4(hsv2rgb(vec3(hue, 0.3, 1.0)), 0.4 * pow(progress, 2.0) * mix(pow(abs(sin(angle * 2.5)), 8.0), 1.0, progress));\n}\n\nfloat atan2(vec2 value) {\n    if (value.x > 0.0) {\n        return atan(value.y / value.x);\n    } else if (value.x == 0.0) {\n    \treturn 3.14592 * 0.5 * sign(value.y);   \n    } else if (value.y >= 0.0) {\n        return atan(value.y / value.x) + 3.141592;\n    } else {\n        return atan(value.y / value.x) - 3.141592;\n    }\n}\n\nvec3 getStarColor(vec3 starSurfaceLocation, float seed, float viewDistance) {\n    const float DISTANCE_FAR = 20.0;\n    const float DISTANCE_NEAR = 15.0;\n    \n    if (viewDistance > DISTANCE_FAR) {\n    \treturn vec3(1.0);\n    }\n    \n    float fadeToWhite = max(0.0, (viewDistance - DISTANCE_NEAR) / (DISTANCE_FAR - DISTANCE_NEAR));\n    \n    vec3 coordinate = vec3(acos(starSurfaceLocation.y), atan2(starSurfaceLocation.xz), seed);\n    \n    float progress = pow(texture(iChannel0, fract(0.3 * coordinate.xy + seed * vec2(1.1))).r, 4.0);\n    \n    return mix(mix(vec3(1.0, 0.98, 0.9), vec3(1.0, 0.627, 0.01), progress), vec3(1.0), fadeToWhite);\n}\n\nvec4 blendColors(vec4 front, vec4 back) {\n  \treturn vec4(mix(back.rgb, front.rgb, front.a / (front.a + back.a)), front.a + back.a - front.a * back.a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 movementDirection = normalize(vec3(0.01, 0.0, 1.0));\n    \n    vec3 rayDirection = getRayDirection(fragCoord, movementDirection);\n    vec3 directionSign = sign(rayDirection);\n    vec3 directionBound = vec3(0.5) + 0.5 * directionSign;\n    \n    vec3 globalPosition = vec3(3.14159, 3.14159, 0.0) + (iTime + 1000.0) * FLIGHT_SPEED * movementDirection;\n    ivec3 chunk = ivec3(globalPosition);\n    vec3 localPosition = mod(globalPosition, 1.0);\n    moveInsideBox(localPosition, chunk, directionSign, directionBound);\n    \n    ivec3 startChunk = chunk;\n    vec3 localStart = localPosition;\n    \n    fragColor = vec4(0.0);\n    \n    for (int i = 0; i < 200; i++) {\n        move(localPosition, rayDirection, directionBound);\n        moveInsideBox(localPosition, chunk, directionSign, directionBound);\n        \n        if (hasStar(chunk)) {\n            vec3 starPosition = getStarPosition(chunk, 0.5 * STAR_SIZE);\n\t\t\tfloat currentDistance = getDistance(chunk - startChunk, localStart, starPosition);\n            if (currentDistance > DRAW_DISTANCE && false) {\n                break;\n            }\n            \n            // This vector points from the center of the star to the closest point on the ray (orthogonal to the ray)\n            vec3 starToRayVector = getStarToRayVector(localPosition, rayDirection, starPosition);\n            // Distance between ray and star\n            float distanceToStar = length(starToRayVector);\n            distanceToStar *= 2.0;\n            \n            if (distanceToStar < STAR_SIZE) {\n                float starMaxBrightness = clamp((DRAW_DISTANCE - currentDistance) / FADEOUT_DISTANCE, 0.001, 1.0);\n            \t\n                float starColorSeed = (float(chunk.x) + 13.0 * float(chunk.y) + 7.0 * float(chunk.z)) * 0.00453;\n                if (distanceToStar < STAR_SIZE * STAR_CORE_SIZE) {\n                    // This vector points from the center of the star to the point of the star sphere surface that this ray hits\n            \t\tvec3 starSurfaceVector = normalize(starToRayVector + rayDirection * sqrt(pow(STAR_CORE_SIZE * STAR_SIZE, 2.0) - pow(distanceToStar, 2.0)));\n\t\t\t\t\t\n                    fragColor = blendColors(fragColor, vec4(getStarColor(starSurfaceVector, starColorSeed, currentDistance), starMaxBrightness));                    \n                    break;\n                } else {\n                    float localStarDistance = ((distanceToStar / STAR_SIZE) - STAR_CORE_SIZE) / (1.0 - STAR_CORE_SIZE);\n                    vec4 glowColor = getStarGlowColor(localStarDistance, atan2(starToRayVector.xy), starColorSeed);\n                    glowColor.a *= starMaxBrightness;\n                \tfragColor = blendColors(fragColor, glowColor);\n                }\n            }\n        } else if (hasBlackHole(chunk)) {\n            const vec3 blackHolePosition = vec3(0.5);\n\t\t\tfloat currentDistance = getDistance(chunk - startChunk, localStart, blackHolePosition);\n            float fadeout = min(1.0, (DRAW_DISTANCE - currentDistance) / FADEOUT_DISTANCE);\n            \t\n            // This vector points from the center of the black hole to the closest point on the ray (orthogonal to the ray)\n            vec3 coreToRayVector = getStarToRayVector(localPosition, rayDirection, blackHolePosition);\n            float distanceToCore = length(coreToRayVector);\n            if (distanceToCore < BLACK_HOLE_CORE_RADIUS * 0.5) {\n                fragColor = blendColors(fragColor, vec4(vec3(0.0), fadeout));\n                break;\n            } else if (distanceToCore < 0.5) {\n            \trayDirection = normalize(rayDirection - fadeout * (BLACK_HOLE_DISTORTION / distanceToCore - BLACK_HOLE_DISTORTION / 0.5) * coreToRayVector / distanceToCore);\n            }\n        }\n        \n        if (length(vec3(chunk - startChunk)) > DRAW_DISTANCE) {\n            break;\n        }\n    }\n    \n    if (fragColor.a < 1.0) {\n    \tfragColor = blendColors(fragColor, getNebulaColor(globalPosition, rayDirection));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n    vec3 mod289(vec3 x) {\n      return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 mod289(vec4 x) {\n      return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 permute(vec4 x) {\n         return mod289(((x*34.0)+1.0)*x);\n    }\n\n    vec4 taylorInvSqrt(vec4 r)\n    {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n\n    float snoise(vec3 v)\n      { \n      const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n      const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n      vec3 i  = floor(v + dot(v, C.yyy) );\n      vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n      vec3 g = step(x0.yzx, x0.xyz);\n      vec3 l = 1.0 - g;\n      vec3 i1 = min( g.xyz, l.zxy );\n      vec3 i2 = max( g.xyz, l.zxy );\n\n      //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n      //   x1 = x0 - i1  + 1.0 * C.xxx;\n      //   x2 = x0 - i2  + 2.0 * C.xxx;\n      //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n      vec3 x1 = x0 - i1 + C.xxx;\n      vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n      vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n      i = mod289(i); \n      vec4 p = permute( permute( permute( \n                 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n               + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n               + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n      float n_ = 0.142857142857; // 1.0/7.0\n      vec3  ns = n_ * D.wyz - D.xzx;\n\n      vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n      vec4 x_ = floor(j * ns.z);\n      vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n      vec4 x = x_ *ns.x + ns.yyyy;\n      vec4 y = y_ *ns.x + ns.yyyy;\n      vec4 h = 1.0 - abs(x) - abs(y);\n\n      vec4 b0 = vec4( x.xy, y.xy );\n      vec4 b1 = vec4( x.zw, y.zw );\n\n      //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n      //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n      vec4 s0 = floor(b0)*2.0 + 1.0;\n      vec4 s1 = floor(b1)*2.0 + 1.0;\n      vec4 sh = -step(h, vec4(0.0));\n\n      vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n      vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n      vec3 p0 = vec3(a0.xy,h.x);\n      vec3 p1 = vec3(a0.zw,h.y);\n      vec3 p2 = vec3(a1.xy,h.z);\n      vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n      vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n      p0 *= norm.x;\n      p1 *= norm.y;\n      p2 *= norm.z;\n      p3 *= norm.w;\n\n    // Mix final noise value\n      vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n      m = m * m;\n      return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                    dot(p2,x2), dot(p3,x3)));\n\t}\n\nfloat tilingNoise(vec2 position, float size) {\n    float value = snoise(vec3(position * size, 0.0));\n    \n    float wrapx = snoise(vec3(position * size - vec2(size, 0.0), 0.0));    \n    value = mix(value, wrapx, max(0.0, position.x * size - (size - 1.0)));\n\n    float wrapy = snoise(vec3(position * size - vec2(0.0, size), 0.0));\n    float wrapxy = snoise(vec3(position * size - vec2(size, size), 0.0)); \n    wrapy = mix(wrapy, wrapxy, max(0.0, position.x * size - (size - 1.0)));\n\treturn mix(value, wrapy, max(0.0, position.y * size - (size - 1.0)));\n}\n\nvoid initialize(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    const int octaves = 6;\n    \n    float value = 0.0;\n  \tfloat maxValue = 0.0; \n    for (float octave = 0.0; octave < float(octaves); octave++) {\n    \tvalue += pow(2.0, -octave) * tilingNoise(uv, 8.0 * pow(2.0, octave));\n        maxValue += pow(2.0, -octave);\n    }\n    \n    maxValue *= 0.5;\n    \n    fragColor = vec4(0.5 * (1.0 + value / maxValue) * vec3(1.0), 1.0);\n    fragColor.g = iResolution.x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    if (fragColor.g != iResolution.x) {\n    \tinitialize(fragColor, fragCoord);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}