{
    "Shader": {
        "info": {
            "date": "1677443462",
            "description": "bending space",
            "flags": 0,
            "hasliked": 0,
            "id": "msc3RS",
            "likes": 1,
            "name": "Bending space",
            "published": 3,
            "tags": [
                "bendingspace"
            ],
            "usePreview": 0,
            "username": "oemfoe",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "#define TWOPI 6.28318530718\n\n\nvec2 toPolar(vec2 cartesian){\n\tfloat distance = length(cartesian);\n\tfloat angle = atan(cartesian.y, cartesian.x);\n\treturn vec2(angle / TWOPI, distance);\n}\n\nvec2 rotate(vec2 uv, float phi) {\n    return vec2(\n        uv.x * cos(phi) + uv.y * sin(phi),\n        -uv.x * sin(phi) + uv.y * cos(phi)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspect = iResolution.x / iResolution.y;\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.y /= aspect;\n    \n    vec2 uv0 = uv;\n    \n \n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //////////////////////////////////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    // zoomen\n    uv *= 1. + (1. + sin(iTime)) / 2.0;\n    \n    \n    // roteren\n    float phi = iTime / 4.;\n    uv = rotate(uv, phi);\n    \n    // Verplaatsen\n    uv.x += sin(iTime);\n    //uv.y += cos(iTime) / aspect;\n    \n    // Polaire coordinaten\n    //uv = toPolar(uv);\n    \n    // krom maken\n    uv.y += 0.05 * sin(uv.x * 5.);\n    \n    // Herhalen\n    //uv.x = mod(uv.x + 0.5, 1.) - 0.5;\n    //uv.y = mod(uv.y + 0.5, 1.) - 0.5;\n    uv = mod(uv + 0.5, 1.) - 0.5;\n    \n    \n    \n    //////////////////////////////////////////////\n    // Output to screen\n    //vec3 col = vec3(uv.x, uv.y, 0.0);\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col, 1.0);\n    \n    if (uv.x >= -1.0 && uv.x <= 1.0 && uv.y >= -1.0 && uv.y <= 1.0)\n    {\n        if (mod(uv.x, 0.1) < 0.01 || mod(uv.y, 0.1) < 0.01)\n            fragColor = vec4(0.);\n    }\n    \n    //if (mod(uv.x, 1. / 8.) > 0.05 && mod(uv.y, 0.1) < 0.04)\n    //    fragColor = vec4(1.);\n    \n    //uv = uv0;\n    \n    // schijf\n    float dtc = length(uv);\n    if (dtc < 0.5 + 0.5 * sin(iTime)) {\n        fragColor = vec4(1., 0., 0., 1.);\n    }\n    \n    //uv.x *= 2.;\n    // vierkant\n    if (max(abs(uv.x), abs(uv.y)) < 0.2) {\n        if (max(abs(uv.x), abs(uv.y)) > 0.175)\n        fragColor = vec4(1.);\n    }\n    \n    \n    // lijn\n    if (uv.y > 0.25 && uv.y < 0.26)\n        fragColor = vec4(0., 1., 0., 1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}