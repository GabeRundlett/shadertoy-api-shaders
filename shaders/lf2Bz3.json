{
    "Shader": {
        "info": {
            "date": "1725297790",
            "description": "originals  https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/DtGyWh",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2Bz3",
            "likes": 4,
            "name": "star with light",
            "published": 3,
            "tags": [
                "fractal",
                "starlight"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 98
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Mandelbulb fractal distance function\nfloat mandelbulb(vec3 p) {\n    vec3 z = p;\n    float dr = 1.0;\n    float r = 0.0;\n    float power = 8.0 + 2.0 ; // Pulsating power factor\n\n    for (int i = 0; i < 8; i++) {\n        r = length(z);\n        if (r > 2.0) break;\n\n        // Convert to polar coordinates\n        float theta = acos(z.z / r);\n        float phi = atan(z.y, z.x);\n        dr = pow(r, power - 1.0) * power * dr + 1.0;\n\n        // Scale and rotate the point\n        float zr = pow(r, power);\n        theta *= power;\n        phi *= power;\n\n        // Convert back to Cartesian coordinates\n        z = zr * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));\n\n        z += p;\n    }\n    return 0.5 * log(r) * r / dr;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = mandelbulb(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n\n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = mandelbulb(p);\n    vec2 e = vec2(0.001, 0);\n    vec3 n = d - vec3(\n        mandelbulb(p - e.xyy),\n        mandelbulb(p - e.yxy),\n        mandelbulb(p - e.yyx)\n    );\n    return normalize(n);\n}\n\n// Psychedelic color based on the position and time\nvec3 getPsychedelicColor(vec3 p) {\n    return vec3(\n        0.5 + 0.5 * sin(p.x * 4.0  * 2.0),\n        0.5 + 0.5 * sin(p.y * 4.0  * 1.5),\n        0.5 + 0.5 * sin(p.z * 4.0  * 2.5)\n    );\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec2 uv = C.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float time = iTime * 3.0;  // Significantly increased time factor for much faster motion\n\n    // Create a 3D orb effect\n    float radius = 0.5;\n    vec2 center = vec2(0.0, 0.0);\n    vec2 dispUV = uv - center;\n    float dist = length(dispUV);\nvec3 color2;\nvec3 baseColor;\n   float shading;\n    if (dist < radius) {\n        // Project UVs onto the sphere\n        vec3 sphereUV = normalize(vec3(dispUV, sqrt(radius*radius - dist*dist)));\n\n        // Map flowing pattern onto the orb\n        vec2 patternUV = sphereUV.xy;\n        patternUV += 0.2 * sin(patternUV.yx * 10.0 + time + vec2(0, 1.57));\n        patternUV += 0.1 * sin(patternUV.yx * 20.0 + time * 2.0);\n\n        // Create striped pattern\n        float stripes = sin(patternUV.x * 10.0) * cos(patternUV.y * 10.0);\n\n        // Map to color with shading for the orb\n         baseColor = vec3(1.0, 0.6, 0.2) * stripes + vec3(0.1, 0.1, 0.3);\n         shading = sphereUV.z * 0.5 + 0.5;\n      \n    } else {\n        // Background pattern outside the orb\n        uv += 0.2 * sin(uv.yx * 10.0 + time + vec2(0, 1.57));\n        uv += 0.1 * sin(uv.yx * 20.0 + time * 2.0);\n        float stripes = sin(uv.x * 10.0) * cos(uv.y * 10.0);\n         color2 = vec3(1.0, 0.6, 0.2) * stripes + vec3(0.1, 0.1, 0.3);\n        \n    }\n   \n\n    // Fixed camera setup looking straight ahead\n    vec3 ro = vec3(0, 0, -5);\n    vec3 rd = normalize(vec3(uv, 2.1));\n\n    // Raymarching to find the distance to the fractal surface\n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 n = getNormal(p);\n\n    // Lighting and color\n    vec3 lightPos = vec3(5.0, 5.0, -5.0);\n    vec3 l = normalize(lightPos - p);\n\n    float diff = max(dot(n, l), 0.0);\n    float spec = pow(max(dot(reflect(-l, n), -rd), 0.0), 32.0);\n\n    vec3 color = getPsychedelicColor(p) * diff + vec3(1.0, 1.0, 1.0) * spec;\n\n    // Distance fog\n    color *= exp(-0.102 * d);\n\n    vec3 n1,q,r=iResolution,\n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1.,2.2,1.),H(g*2.1),sin(1.2))*1./e/8000.\n    )\n    {\n         n1=g*d2;\n   \n        a=30.;\n         n1=mod( n1-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n             n1=0.23-abs( n1);\n            \n            n1.x< n1.z? n1= n1.zyx:n1;\n             n1.z< n1.y? n1= n1.xzy:n1;\n             n1.y> n1.x? n1= n1.zyx: n1;\n            \n            s*=e=1.7+sin(iTime*.0234)*.1;\n             n1=abs(n1)*e-\n                vec3(\n                    5.,\n                    120,\n                    8.\n                 );\n         }\n      \n         g+=e=length( n1.yxyz)/s;\n    }\n   \n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.75)*10., 1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}