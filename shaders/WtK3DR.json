{
    "Shader": {
        "info": {
            "date": "1578680223",
            "description": "Look of phasor/Gabor noise along a distance field (here, to letters).\nUsing convolution with hash grid instead of sparse convolution with random splats.\nMouse.y tunes freq",
            "flags": 0,
            "hasliked": 0,
            "id": "WtK3DR",
            "likes": 5,
            "name": "Gabor/Phasor distance field",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "fluid",
                "flow",
                "field",
                "complex",
                "screenspace",
                "curlnoise",
                "stream",
                "gabornoise",
                "phasornoise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "// Fork of  https://shadertoy.com/view/3tKGWR\n// ( see also https://shadertoy.com/view/wtt3RH )\n\n// --- Gabor params & utils\n\nfloat F = 1.8;                     // frequency\n#define W 12.                      // filtering neighborhood\n#define N int(W*2.+0.)             // sampling = NxN   ( N=2W+1 but smaller may work )\n#define PI 3.14159\n#define TG 1.*iTime                // try 1\n#define CS(a)       vec2( cos(a+TG), sin(a+TG) )\n#define hash2(p)    fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )  // by deMoivre formula\n\n// draw line segment\n#define L(a,b) O+= .3/R.y/length( clamp( dot(U-(a),v=b-(a))/dot(v,v), 0.,1.) *v - U+a )\n\n// === Gabor noise =============\n\nvec2 Gabor(vec2 U, vec2 V) {\n    vec2 P, v, s = vec2(0);\n    float T=0., K;    \n    for( int k = 0; k < N*N; k++) {            // Gabor noise: convolve with noise with K*oscill\n        P = vec2( k%N, k/N ) -  W;             // sample neighborhood ( W = float(N-1)/2. )\n        v = CS( 2.*PI* hash2( U+P ));          // random complex signal\n        v = cmul( v, CS(-F*dot(P,V)));         // mul by oscillator in main direction\n        K = .5+.5*cos(PI*min(1.,length(P)/W)); // smoothing kernel\n        s += v * K;\n        T += K;\n    }\n    return s / T; \n}\nvec4 char(vec2 p, int c) {\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n    //if (p.x<.25|| p.x>.75 || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5); // strange bug with an old driver\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx, dFdy );\n}\n// ========================================================\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 1.2*u/R.y;\n    O -= O;\n    float ofs = .5,\n           n0 = char(U,65).w, //vec2 V = vec2(-dFdy(n),dFdx(n));\n           n1 = char(U-vec2(ofs,0),67).w,\n           n2 = char(U-ofs*vec2(2,0),69).w;\n#define dist(n) max(0.,  1.-(n-.5)/.3 )  \n    n0 = dist(n0), n1 = dist(n1), n2 = dist(n2); \n    vec2 V0 = char(U,65).zy - .5, \n         V1 = char(U-vec2(ofs,0),67).zy - .5,\n         V2 = char(U-ofs*vec2(2,0),69).zy - .5,\n         V;\n  //V = mix(V0,V1,smoothstep(0.,1.,n0/(n0+n1)));\n    V = (n0*V0+n1*V1+n2*V2)/(n0+n1+n2);\n  //V = n0<n1 ? V0 : V1;\n  //V = V0;\n  //V.x+=1.;\n    \n#if 0                                   // --- draw flow ( debug )\n  //O += pow(.5+.5*sin(100.*n),1./2.2); return;\n    float S = R.y/10.;\n    vec2 p = floor(U*S+.5)/S, v;               // draw velocity vectors\n    L ( p-V*2., p+V*2.);  //O.rb = u-u;  \n    return;\n#endif\n \n    vec2 M = iMouse.xy;                 // --- draw Gabor/Phasor noise\n    if (length(M)>10.) F = .2+M.y/R.y*1.8; \n    V = normalize(V);  // direction only\n  //V *= R.y;          // variant: varying length\n#if 1\n    V = vec2(-V.y,V.x); // normal field\n    vec2 s = Gabor(u -.5*R, V );\n    float T = \n         //   4.*length(s);                    // show contrast oscillations\n              .5+.5*normalize(s).x;            // phasor profile\n  T = pow( T, 1./2.2);                       // to sRGB\n    O += T;\n#else                                          // local grid\n    O.r = .5+.5*normalize(Gabor(u -.5*R, V )).x;\n    V = vec2(-V.y,V.x); \n    O.g = .5+.5*normalize(Gabor(u -.5*R, V )).x;\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}