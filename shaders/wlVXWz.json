{
    "Shader": {
        "info": {
            "date": "1590891118",
            "description": "Random atmospheric lunar planet made for fun",
            "flags": 64,
            "hasliked": 0,
            "id": "wlVXWz",
            "likes": 3,
            "name": "Lunar Planet",
            "published": 3,
            "tags": [
                "space",
                "lunarplanet"
            ],
            "usePreview": 0,
            "username": "propagant",
            "viewed": 534
        },
        "renderpass": [
            {
                "code": "// Lunar planet atmospheric practice shader written by Matej Vanco, May 2020\n\n\n// Method shortcuts\n\n#define sph(c, p) length(c - p.xyz) - p.w\n\n#define geometry(p) sph(p, vec4(-0.1,0.,1.8,0.25))\n\n// Ray-march core\nfloat march(vec3 ro, vec3 rd)\n{\n    float pr = 0.;\n    \n    for(int i = 0; i < 6; i++)\n    {\n     \tvec3 p = ro + rd * pr;\n        pr += geometry(p);\n        if(pr >= 8.)\n            break;\n    }\n    return pr;\n}\n\n// Normals calculation\nvec3 normal(vec3 p)\n{\n \tvec2 off = vec2(0.001, 0.0);\n    float copy = geometry(p);\n    vec3 n = copy - vec3(geometry(p- off.xyy), geometry(p- off.yxy), geometry(p- off.yyx));\n    return normalize(n);\n}\n\n// Simple diffuse lighting\nfloat lighting(vec3 p, vec3 lpos)\n{\n    vec3 n = normal(p);\n    vec3 l = normalize(lpos - n);\n    vec3 ll = normalize(lpos - p);\n    float diff = dot(l, n) + 1.;\n    diff+=pow(max(dot(l,n),0.),2.0)*2.0;\n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n// Ray\n    vec3 ro = vec3(0.0);\n    vec3 rd = normalize(vec3(uv.xy,1.0));\n    float m = march(ro,rd);\n    \n    vec3 p = ro + rd * m;\n// Lighting\n    vec3 lp = vec3(sin(iTime*0.15)*3.,2.0,0.5);\n    vec3 col = vec3(lighting(p,lp)) \n        * vec3(lighting(p,vec3(lp.x,-lp.y/2.,lp.z)));\n\tcol += vec3(0.25,0.35,0.3)/1.;\n// Bg cutoff\n    col *= exp(-1. * pow(m,1.1));\n    \n// Stars\n    if(m > 3.) col+=vec3(smoothstep(0.998, 1., fract(cos(dot(uv, vec2(0.2, 7.13)))*5894.5458)))/4.;\n    \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22993,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/astropilot/space-ambient-demo-00"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}