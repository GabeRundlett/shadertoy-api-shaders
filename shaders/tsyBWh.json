{
    "Shader": {
        "info": {
            "date": "1607467612",
            "description": "This is an edit of NoxWings' Fire Shader, https://www.shadertoy.com/view/MdKfDh , so the quality doesn't deteriorate as much as the frame count gets very high. It also distorts differently.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsyBWh",
            "likes": 3,
            "name": "Fire Shader Edit",
            "published": 3,
            "tags": [
                "noise",
                "fire"
            ],
            "usePreview": 0,
            "username": "TEttinger",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "#define timeScale \t\t\tiTime * 1.0\n#define fireMovement \t\tvec2(-0.03, -0.5)\n\n/** NOISE **/\n\n// phi, the Golden Ratio\nconst float PHI = 1.61803398874989484820459;\n// harmonious numbers for 2D\nconst vec2 H2 = vec2(1.324717957244746, 1.754877666246693);\n// harmonious numbers for 3D, inverse\nconst vec3 H3 = vec3(0.8191725134, 0.6710436067, 0.5497004779);\n\nvec2 hash( vec2 p ) {\n    const vec2 seed = vec2(42.0, 61.0);\n    return fract(fract((p - seed) * PHI + seed) * (PHI - p.yx) - seed) * 1.999999 - 1.0;\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    h *= h;\n\tvec3 n = h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n}\n\nfloat fbm ( in vec2 p ) {\n    float f = 0.0;\n    mat2 m = mat2( 1.6,  1.3, -1.3,  1.6 );\n    f  = 0.5000*noise(p); p = m*p;\n    f += 0.2500*noise(p); p = m*p;\n    f += 0.1250*noise(p); p = m*p;\n    f += 0.0625*noise(p); p = m*p;\n    f = 0.5 + 0.5 * f;\n    return f;\n}\n\n/** MAIN **/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //// heat distortion\n    uv.x += pow(fbm((uv.yx + timeScale) * vec2(0.15, 0.3)), 3.0) * 0.08;\n    \n    vec2 uvT = (uv * vec2(1.0, 0.5)) + timeScale * fireMovement;\n    float n = fbm(8.0 * uvT);\n    \n    float finalNoise = n * pow(1.0 - uv.y, 2.0) * 5.0;\n    \n    vec3 color = finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}