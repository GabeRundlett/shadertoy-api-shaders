{
    "Shader": {
        "info": {
            "date": "1614310317",
            "description": "Cereal rings in the galaxy. Who wouldn't want that?",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGBDD",
            "likes": 3,
            "name": "Cereal for Dinner?",
            "published": 3,
            "tags": [
                "grid",
                "rotate",
                "star",
                "galaxy",
                "starfield",
                "infinite",
                "food",
                "artofthecode",
                "cereal",
                "dinner"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "// followed tutorials https://youtu.be/rvDo9LvfoVE\n//https://youtu.be/dhuigO4A7RY\n\n#define NUM_LAYERS 5.\n\nmat2 Rot(float a){\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n\n}\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);//distance to the center \n    float m = .03/d;//more light like than smoothstep(.1,.05,d);\n    \n    //float rays= max(0.,1.-abs(uv.x*uv.y*1000.)); \n    //m +=rays*flare;\n    \n    //uv*=Rot(3.1415/4.);\n    //rays= max(0.,1.-abs(uv.x*uv.y*1000.));\n    //m+=rays*.5*flare;\n    m=2.*smoothstep(.3,.1,d);\n    m-=smoothstep(.2,.0,d);\n    m*=smoothstep(1.,mix(.8,.5,uv.y),d);\n\n    return m;\n\n\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n    \n\n}\n\nvec3 StarLayer(vec2 uv) {\n\tvec3 col = vec3(0);\n\t\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    // should add <=\n    for(int y=-1;y<=1;y++) {\n    \tfor(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            \n    \t\tfloat n = Hash21(id+offs); // random between 0 and 1\n            float size = fract(n*345.32);\n            \n    \t\tfloat star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.6, 1., size)*.6);\n            \n            vec3 color = sin(vec3(.5, .1, .9)*fract(n*2345.2)*123.2)*.5+.5;\n            color = color*vec3(1,.2,.8+size)+vec3(.2, .2, .1)*2.;\n            \n            star *= sin(iTime*2.+n*6.2831)*.5+1.;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    \n    float t = iTime*.03;\n      // float fft  = texelFetch( iChannel0, ivec2(0.,0), 0 ).x; \n    \n\n \n    vec3 col = vec3(0);\n    \n    for (float i =0.; i <1.;i+=1./NUM_LAYERS){\n\n        float depth = fract(i+t);\n        //if mouse is engaged\n        float scale = mix (mix(0.,100.,length(uv-M)),2.,depth);\n        // if mouse is not engaged \n       // float scale = mix (mix(0.,100.,length(uv-(mix(0.4,0.9,fft)))),2.,depth);\n//https://www.shadertoy.com/img/close2.png\n        float fade = depth*smoothstep(1., .8, depth);\n        col += StarLayer(uv*scale+i*532.*M)*fade-.2*Hash21(uv);\n\n    }\n       uv*=Rot(t);\n    uv.x+=max(t*.0001,1.);\n    uv.y-=max(t*.0001,.5);\n\n    \n        col = pow(col, vec3(.85));\t// gamma correction\n \n    \n    //if(gv.x>.48|| gv.y>.48) col.r=1.;//coloring the grid\n  \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}