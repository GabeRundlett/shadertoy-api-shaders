{
    "Shader": {
        "info": {
            "date": "1657989283",
            "description": "IFS with Field Of Space",
            "flags": 32,
            "hasliked": 0,
            "id": "NdVfWR",
            "likes": 7,
            "name": "IFS with Field Of Space",
            "published": 3,
            "tags": [
                "ifs"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "// color clamping https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord.xy / iResolution.xy );\n    vec3 minColor = vec3(9999.);\n    vec3 maxColor = vec3(-9999.);\n    vec3 previousColor = textureLod(iChannel0,uv,100.0).rgb;\n    \n    for(int x = -1; x <= 1; ++x)\n    {\n        for(int y = -1; y <= 1; ++y)\n        {\n            vec3 color = textureLod(iChannel0,uv + vec2(x, y) / iResolution.xy,100.0).rgb; // Sample neighbor\n            minColor = min(minColor, color); // Take min and max\n            maxColor = max(maxColor, color);\n        }\n    }\n    \n    vec3 previousColorClamped = clamp(previousColor, minColor, maxColor);\n    vec3 currentColor = textureLod(iChannel0,uv,100.0).rgb;\n    vec3 res = currentColor * 0.1 + previousColorClamped * 0.9;\n    \n    //fragColor =  textureLod(iChannel0,uv,100.0);\n    fragColor = vec4(res,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_STEPS 128\n#define MAX_DIST 128.\n#define SURF_DIST .001\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define MATERIAL 0\n#define LINE_SIZE 0.02\n#define ZERO (min(iFrame,0))\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat basePattern(vec2 p, float size){\n    vec2 prevP = p;\n    p.x = abs(p.x)-size;\n    p.y = abs(p.y)-size;\n    float d = p.y;\n    float d2 = p.x;\n    return min(d,d2);\n}\n\nfloat topPt(vec2 p){\n    vec2 prevP = p;\n    float size = LINE_SIZE;\n    float d = basePattern(p,size);\n    d = max(-(p.y+size),d);\n    return d;\n}\n\nfloat bottomPt(vec2 p){\n    vec2 prevP = p;\n    float size = LINE_SIZE;\n    float d = basePattern(p,size);\n    d = max((p.y-size),d);\n    return d;\n}\n\nfloat leftPt(vec2 p){\n    vec2 prevP = p;\n    float size = LINE_SIZE;\n    float d = basePattern(p,size);\n    d = max((p.x-size),d);\n    return d;\n}\n\nfloat rightPt(vec2 p){\n    vec2 prevP = p;\n    float size = LINE_SIZE;\n    float d = basePattern(p,size);\n    d = max(-(p.x+size),d);\n    return d;\n}\n\nfloat patterm(vec2 p){\n    p*=4.0;\n    float d = 100000.0;\n    for(int i = 0; i<7; i++){\n        \n        p*=Rot(90.*float(i)+iTime*0.1);\n        p = abs(p)-1.0;\n        \n        float d2 = topPt(p);\n        if(i%2 == 0){\n            d2 = bottomPt(p);\n        }\n        \n        if(i%3 == 0){\n            d2 = leftPt(p);\n        }\n        \n        if(i%4 == 0){\n            d2 = rightPt(p);\n        }\n        d = min(d,d2);\n    }\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    float size = 0.3;\n    float d = patterm(p.xy);\n    float d2 = patterm(p.yz);\n    float d3 = patterm(p.xy);\n    d = max(sdBox(p,vec3(size)),min(min(d,d2),d3));\n    \n    d = mix(sdOctahedron(p,size+0.1),d,clamp(sin(iTime*0.5),0.1,1.0));\n    \n    return vec2(d*0.3, MATERIAL);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 reflectMaterial(vec3 p, vec3 rd, vec3 n) {\n    float IOR = 1.62; //IOR:index of reflection\n    vec3 rdIn = refract(rd,n,1.0/IOR); \n    vec3 refTex = textureLod(iChannel0,rdIn,0.0).rgb;\n    return refTex;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == MATERIAL){\n        vec3 c = vec3(0.8);\n        col = reflectMaterial(p,rd,n);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0.0, -1.);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(-10.0));\n        ro.xz *= Rot(radians(iTime*10.0-45.));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        col = vec3(1.0);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );\n    \n    uv-=vec2(-0.6,-0.32);\n    float dd = B(uv,vec2(0.25,0.15));\n    col = mix(col,vec3(0.),S(dd,0.0));\n    uv*=3.0;\n    dd = patterm(uv);\n    \n    uv = prevUV;\n    uv-=vec2(-0.6,-0.32);\n    dd = max(B(uv,vec2(0.25,0.15)),dd);\n    col = mix(col,vec3(1.),S(dd,0.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}