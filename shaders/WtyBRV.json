{
    "Shader": {
        "info": {
            "date": "1614638682",
            "description": "License CC0: Simple heart shape\nMany examples of heart shapes on shadertoy. \nI didn't really understand them so decided to create one of my own\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WtyBRV",
            "likes": 5,
            "name": "Simple heart shape",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 539
        },
        "renderpass": [
            {
                "code": "// License CC0: Simple heart shape\n// Many examples of heart shapes on shadertoy. \n// I didn't really understand them so decided to create one of my own\n#define RESOLUTION    iResolution\n\n\nfloat heart(vec2 p) {\n  // Late night maths\n  p.x = abs(p.x);\n  const float r  = 0.275;\n  const float l  = length(vec2(0.5-r, 1.0-r));\n  const float b  = atan((0.5-r)/(1.0-r));\n  const float c  = asin(r/l);\n  const float ll = l*cos(c);\n  const float a  = b + c;\n  const vec2 n   = vec2(cos(a), -sin(a));\n  const vec2 nn  = vec2(n.y, -n.x);\n  const vec2 off = vec2(0.5-r, 0.5-r);\n  const vec2 bot = vec2(0.0, -0.5);\n  const vec2 top = bot + -nn*ll;\n  const vec2 mid = vec2(0.0, 0.5-r-(0.5-r)/tan(a));\n  const float m1 = -dot(bot, n);\n  const float m2 = -dot(bot, nn);\n  const float m3 = -dot(top, nn);\n  const float m4 = -dot(mid, n);\n  vec2 rp = p;\n  rp -= n*min(0.0, dot(rp, n)+m4)*2.0;\n  float dc = length(p-off) - r;\n  float dl = dot(rp, n) + m1; \n  float dp = length(p - bot);\n  float d = 0.0;\n  d = (dot(p, nn) + m3) > 0.0 ? dl : dc;\n  d = (dot(p, nn) + m2) > 0.0 ? dp : d;\n  return d;\n}\n\nfloat df(vec2 p) {\n  float dh = heart(p)-0.025;\n  return dh;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  float d = df(p);\n  \n  vec3 col = vec3(0.1);\n  col = mix(col, vec3(1.0), smoothstep(-aa, aa, -d));\n  if (p.x > 0.0) {\n    col += 0.5*cos(d*100.0);\n  }\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}