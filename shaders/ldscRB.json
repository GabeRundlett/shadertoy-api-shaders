{
    "Shader": {
        "info": {
            "date": "1488821894",
            "description": "My attempt at a 3D Kaliset",
            "flags": 4,
            "hasliked": 0,
            "id": "ldscRB",
            "likes": 17,
            "name": "3D Kali",
            "published": 3,
            "tags": [
                "raymarch",
                "kali"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 1814
        },
        "renderpass": [
            {
                "code": "#define r(p, a) {p = cos(a) * p + sin(a) * vec2(p.y, -p.x);}\n#define time iTime\nfloat fftsmooth(float a, sampler2D s)\n{\n    //from nick shelton\n    //FFT_smooth_n = FFTRaw_n * alpha + FFT_smooth_n-1 * (1 - alpha)\n    float audio = texture(s, vec2(.5)).r;\n    return audio * a + audio-1. * (1.-a);\n    \n}\n\n#define PSD fftsmooth(.5, iChannel0)\n\nfloat trap = 0.;\n\nfloat map(vec3 pos)\n{\n\tvec4 p = vec4(pos, 1.);\n\tfloat d = 100.;\n\tfor (int i = 0; i < 5; i++)\n\t{\n        // Kali set formula: abs(p) / dot(p, p)\n\t\tp = abs(p)/clamp(dot(p,p), -1., 1.)-vec4(1., 1.3, .6, .4);\n\t\tr(p.xz, time + PSD);\n\t\tr(p.yz, time + PSD);\n\t\tr(p.xy, time + PSD);\n\t\t\n\t\t\n\t\td = min(d, length(p.x*p.y*p.z*p.w)-.5);\n        \n        // Alternate formula using code from https://www.shadertoy.com/view/XsGXWc\n\t\t//d = min(d, sin(p.x*p.y*p.z));\n\t\ttrap = distance(p, vec4(0.));\n\t}\n\treturn d;\n}\n\nvec3 calcNormal(vec3 p)\n{\n\tvec2 e = vec2(0.005, 0);\n\treturn normalize(vec3(map(p+e.xyy)-map(p-e.xyy), map(p+e.yxy)-map(p-e.yxy), map(p+e.yyx)-map(p-e.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = (2.*fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    // Fun effect to go with the fractal from https://www.shadertoy.com/view/XtSGDK\n    //#define DEFORM\n    #ifdef DEFORM\n    float r2 = dot(uv, uv);\n    uv /= r2;\n    #endif\n    \n\tvec3 ro = vec3(uv, 1.);\n\tvec3 rd = normalize(vec3(uv, -1.));\n\t\n\tfloat t = 0.;\n\tfor (int i = 0; i < 100; i++)\n\t{\n\t\tfloat m = map(ro + rd * t);\n\t\tt+=m;\n\t\tif (t > 40. || m < 0.02) break;\n\t}\n\t\n\tif (t > 40.)\n\t{\n\t\tfragColor = vec4(0.);\n\t\treturn;\n\t}\n\t\n\tvec3 p = ro + rd * t;\n\tvec3 n = calcNormal(p);\n\t\n\tvec3 lp = vec3(1., 3., 5.);\n\tvec3 ld = lp - p;\n\tfloat len = length(ld);\n\tld /= len;\n\tfloat diff = max(dot(ld, n), 0.);\n\tfloat atten = min(1., 1./len);\n\tfloat amb = .25;\n\tfloat spec = pow(max(dot(normalize(ro-p), reflect(-ld, n)), 0.), 8.);\n\t\n\tvec3 col = vec3(trap, trap*trap, pow(trap, 4.)) * ((diff+amb)+spec)*atten;\n\t\n\tcol /= abs(sin(vec3(.5, .2, .9) + col + time + PSD));\n\tfragColor = vec4( col, 1.0 );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}