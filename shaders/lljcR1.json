{
    "Shader": {
        "info": {
            "date": "1507518802",
            "description": "fork of https://www.shadertoy.com/view/lss3zr",
            "flags": 0,
            "hasliked": 0,
            "id": "lljcR1",
            "likes": 9,
            "name": "Volume marching",
            "published": 3,
            "tags": [
                "volume",
                "raycasting",
                "lightscattering",
                "cloud"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 944
        },
        "renderpass": [
            {
                "code": "\n//noise\nfloat h11(float n){return fract(sin(n)*43758.5453);}\nfloat noise(in vec3 x){vec3 p=floor(x),f=fract(x)\n;f=f*f*(3.-2.*f);float n=p.x+p.y*57.+113.*p.z\n;return mix(mix(mix(h11(n+  .0),h11(n+  1.),f.x),\n                mix(h11(n+ 57.),h11(n+ 58.),f.x),f.y),\n            mix(mix(h11(n+113.),h11(n+114.),f.x),\n                mix(h11(n+170.),h11(n+171.),f.x),f.y),f.z);}\nconst mat3 m=mat3(0,8,6,-8,3,-4,-6,-4, 6 )*.1;//fbm rotation matrix\nfloat fbm(vec3 p){float f=.5*noise(p)\n;p*=m*2.02;f+=.25*noise(p)\n;p*=m*2.03;f+=.125*noise(p)\n;return f;}\n\n\n//distanceFieldGadient that we volume march trough\nfloat gdVolume(vec3 p){return.1-length(p)*.05+fbm(p*.3);}\n\n//I could define everything as a very dense cloud\n//and volume march it, but that seems inefficient.\n//doing deferred shading of cloud and npn-cloud (special cases) \n//is not much simpler though, or is it\n//yes the second approah is simpler, more flexible and more hacky.\n\n//Volume marching iterations, outer and inner loop\n//outerLoop<=64 samples along viewRay\n//innerLoop<= 6 samples along LightDirection\n#define iterMarchVolume vec2(64,6)\n\n//(orange) color of least scattered light in (earths) athmosphere\n//depends on pollution\n#define clAmbi vec4(.9,.6,.1,1)\n//(bue sky color) color of most scattered light in (earths) athmosphere\n#define cDiff vec4(1.-clAmbi.xyz,1)\n//HDR usually over-ambolidies this to white.\n//ie, even the red ammount of scattered light is (nearly)maxed.\n#define clDiff vec4(pow(cDiff.xyz,vec3(cos(iTime*.5+.5))),1)\n\n//brightness scale of lit parts of cloud\n#define cloudBright 90.\n//brightness scale of occluded parts of cloud\n#define cloudDark 60.\n//aboove 2 values also scale the .rgb of orangeBlue scatter.\n\n//return color of volumeMarching (trough a cloud)\n//[u]RayOrigin\n//[t]RayDirection\n//[s]SunlightDirection (parallel, infinite distance)\nvec4 MarchVolume(vec3 u,vec3 t,vec3 s){\n;t=normalize(t);//save>sorry\n;vec4 c=vec4(0)//return vaslue\n;const vec2 stepn=vec2(40,20)/iterMarchVolume;//2 loop params\n;float a=1.,b=110.//diminishing accumulator//absorbtion\n;for(float i=.0;i<iterMarchVolume.x;i++)\n{;float d=gdVolume(u)\n ;if(d>0.)\n {;d=d/iterMarchVolume.x\n  ;a*=1.-d*b\n  ;if(a<=.01)break\n  ;float Tl=1.\n  ;for(float j=.0;j<iterMarchVolume.y; j++)\n  {;float l=gdVolume(u+normalize(s)*float(j)*stepn.y)\n   //todo, also calculate occlusion of a non-clud distance field.\n   ;if(l>0.)\n    Tl*=1.-l*b/iterMarchVolume.x\n   ;if(Tl<=.01)break;}\n  ;c+=clDiff*cloudDark*d*a//light.diffuse\n  ;c+=clAmbi*cloudBright*d*a*Tl;//light.ambbience\n ;}\n ;u+=t*stepn.x;}    \n;return max(c,(cDiff*cDiff));//;return c\n;}\n\nvoid mainImage( out vec4 o, in vec2 u){\n;u=u.xy/iResolution.xy\n;u=u*2.-1.\n;u.x *= iResolution.x/ iResolution.y;\n;vec2 mo\n;if(iMouse.z>0.)mo=iMouse.xy/iResolution.xy*2.-1.\n;else            mo=vec2(iTime*.1,cos(iTime*.25)*3.)\n;vec3 org=25.*normalize(vec3(cos(2.75-3.*mo.x),.7-(mo.y-1.0),sin(2.75-3.*mo.x)))\n;vec3 ta=vec3(0,1,0)\n;vec3 ww=normalize(ta-org)\n;vec3 uu=normalize(cross(ta,ww))\n;vec3 vv=normalize(cross(ww,uu))\n;vec3 di=normalize(u.x*uu+u.y*vv+1.5*ww)\n;vec3 s=vec3(1,0,0)//sinLightDirection\n;o=MarchVolume(org,di,s);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}