{
    "Shader": {
        "info": {
            "date": "1462073949",
            "description": "Sorry guys! I still can't wrap my mind around why we can't do Fractal Flames in GLSL alone... This is my latest attempt, and at least my eyes are fooled :)",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms3SDl",
            "likes": 5,
            "name": "G-Lectric Sheep",
            "published": 3,
            "tags": [
                "glectricsheepelectric"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 965
        },
        "renderpass": [
            {
                "code": "//-----------------USEFUL-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS .001\n\n#define time ((saw(float(__LINE__))+1.0)*(iTime+12345.12345)/PI/PI/2.0)\n#define saw(x) (acos(cos(x))/PI)\n\nvec3 phase(float map)\n{\n    return vec3(saw(map),\n                saw(4.0*PI/3.0+map),\n                saw(2.0*PI/3.0+map))\n        \t*smoothstep(0.0, .5, saw(map*2.0*PI));\n}\n\n//-----------------IMAGINARY-----------------\n\nvec2 cmul(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);\n}\n\n//-----------------RENDERING-----------------\n\nfloat seedling;\n\nvec2 mobius(vec2 uv)\n{\n\tvec2 a = sin(seedling+vec2(time, time*GR/E));\n\tvec2 b = sin(seedling+vec2(time, time*GR/E));\n\tvec2 c = sin(seedling+vec2(time, time*GR/E));\n\tvec2 d = sin(seedling+vec2(time, time*GR/E));\n\treturn cdiv(cmul(uv, a) + b, cmul(uv, c) + d);\n}\n\nvec2 map(vec2 uv)\n{\n    return saw(mobius(uv*2.0-1.0)*1.0*PI);\n}\n\nvec2 iterate(vec2 uv, vec2 dxdy, out float magnification)\n{\n    vec2 a = uv+vec2(0.0, \t\t0.0);\n    vec2 b = uv+vec2(dxdy.x, \t0.0);\n    vec2 c = uv+vec2(dxdy.x, \tdxdy.y);\n    vec2 d = uv+vec2(0.0, \t\tdxdy.y);//((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n\n    vec2 ma = map(a);\n    vec2 mb = map(b);\n    vec2 mc = map(c);\n    vec2 md = map(d);\n    \n    float da = length(mb-ma);\n    float db = length(mc-mb);\n    float dc = length(md-mc);\n    float dd = length(ma-md);\n    \n\tfloat stretch = max(max(max(da/dxdy.x,db/dxdy.y),dc/dxdy.x),dd/dxdy.y);\n    \n    magnification = stretch;\n    \n    return map(uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 fbdim = vec2(851.0, 315.0); //Facebook cover photo dimensions.\n    vec2 fbdim = iResolution.xy;\n    float fbaspect = fbdim.y/fbdim.x;\n   \n    vec2 uv = fragCoord.xy-iResolution.xy/2.0;\n    \n    if(abs(uv.x) > fbdim.x/2.0 || abs(uv.y) > fbdim.y/2.0)\n        discard;\n    \n    float zoom = 4.0;//(8.0+3.0*sin(time))*PI;\n    \n    uv = uv.xy / (iResolution.xy/2.0-fbdim.xy);\n    uv.x *= fbaspect;\n    uv *= zoom;\n    uv = uv*.5+.5;\n    \n   \tconst int max_i = 16;\n    float stretch = 1.0;\n    float ifs = 1.0;\n    float sum = 0.0;\n    float magnification;\n    \n    for(int i = 0; i < max_i; i++)\n    {\n        seedling = fract(float(i)*123456.123456);\n        vec2 next = iterate(uv, .5/fbdim, magnification);\n        \n        stretch *= magnification;\n        \n        //omg so platform dependent... pls help fix:\n        float weight = smoothstep(.25, 1.0, ifs*2.0);\n        \n        uv = next*weight+uv*(1.0-weight);\n        \n        sum += (seedling+pow(clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0), .5))*weight;    \n        \n        ifs *= sqrt(clamp(1.0/stretch, 0.0, 1.0)*weight);\n        \n\t\tif(ifs == 0.0)\n            break;\n    }\n    \n    fragColor = vec4(uv, 0.0, 1.0);\n    fragColor = vec4(phase(sum*PI), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}