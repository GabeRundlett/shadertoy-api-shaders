{
    "Shader": {
        "info": {
            "date": "1499766185",
            "description": "My first shader! You can use the mouse to \"rotate\" the galaxy, even though it's only an illusion and 3D is a lie.\nMaybe one day I'll make a whale shader, but this also looks kind of neat.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdBfzW",
            "likes": 15,
            "name": "Rainbow Galaxy",
            "published": 3,
            "tags": [
                "2d",
                "galaxy",
                "glow",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "iveks",
            "viewed": 1276
        },
        "renderpass": [
            {
                "code": "vec2 uv;\nvec3 rgb;\n\nconst float PI = 3.1415926535897;\n\nvoid circle( vec2 offset, float radius, vec3 color )\n{\n    vec3 intensity = vec3(radius/length(uv+offset));\n    rgb += intensity * color;\n}\n\nvoid circle( vec2 offset )\n{\n    circle(offset, 1., vec3(1.,1.,1.));\n}\n\nfloat normalcos( float a )\n{\n\treturn (cos(a)+1.)/2.;\n}\n\nfloat normalsin( float a )\n{\n\treturn (sin(a)+1.)/2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tuv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 mp;\n    \n    mp = ((-iMouse.xy / iResolution.xy) + 0.5) * 2.;\n    mp.x *= iResolution.x / iResolution.y;\n    \n    rgb = vec3(0.,0.,0.);\n\n    float rings = 6.;\n    \n    for ( float h = 0.; h < rings; h++ )\n    {\n        float balls = 10.;\n    \tfloat rad = (0.4*h+0.1)*sin((iTime*h*h*h)/1000.)+0.1;\n    \tfloat slice = PI*2. / balls;\n    \tfor ( float i = 0.; i < balls; i++ )\n        {\n            vec2 p = vec2(slice*i+iTime+1./rad);\n            p+=mp+vec2((h/rings)*PI*2.+iTime/8.,0.);\n            p.x=sin(p.x);\n            p.y=cos(p.y);\n            \n            p*=rad+0.01;\n\n            float color=(i/balls)*PI*2.;\n            \n            circle(vec2(p), 0.02/(rad*rad+1.), vec3(normalcos(color+iTime),normalcos(color+iTime+(2.*PI)/3.),normalcos(color+iTime+(4.*PI)/3.)));\n        }\n    }\n    \n\tfragColor = vec4(rgb,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}