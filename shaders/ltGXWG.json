{
    "Shader": {
        "info": {
            "date": "1485619444",
            "description": "Mouse control preempt time.\nChange #EPS for sharper.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltGXWG",
            "likes": 13,
            "name": "walls - 2",
            "published": 3,
            "tags": [
                "raytracing",
                "spheremarching",
                "crowded"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 802
        },
        "renderpass": [
            {
                "code": "// using the base ray-marcher of Trisomie21: https://www.shadertoy.com/view/4tfGRB#\n\n// play with the 2D graph here: https://www.desmos.com/calculator/p3ugg70d4e\n\n#define EPS .001 // smaller = sharper & more contrasted\n\n#define r(v,t) { float a = (t)*T, c=cos(a),s=sin(a); v*=mat2(c,s,-s,c); }\n\nvoid mainImage( out vec4 f, vec2 w ) {\n    float T = iTime+20., \n        closest = 999.;\n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R;\n    vec4 p = vec4((w-.5*R)/R.y,-.5,0), d,c;      // init ray \n    p.z -= .4;                                   // view angle width / zoom\n//  r(p.xz,.13); r(p.yz,.2); r(p.xy,.1);         // camera rotations\n  //d = p;                                       // ray dir = ray0-vec3(0) \n    d = normalize(p);\n    if (length(m)>.01) p.z = -30.*(1.-m.y), T = 30.*m.x; // mouse control preempts.\n    else p.z -= 60.;                             // camera distance.\n    \n    f -= f;\n   \n    for (float i=1.; i>0.; i-=.01)  {\n        \n        vec4 //u = floor(p/18.+3.5), \n            t = p, ta;\n            c = p/p*1.2;\n\t    float x=1e9,x1=1e9;\n\n#define smod(t,n)       ( mod(t+(n)/2., n) - (n)/2.  )\n#define setbox(t,h,w,d)   abs(t) / vec4(h,w,d,1)\n#define setboxU(t)        abs(t)\n#define dbox(t,r)       ( max(t.x,max(t.y,t.z)) -(r) )\n#define dsphere(t,r)    ( length((t).xyz) -(r)       )\n#define dcyl(t,r)       ( length((t).xy ) -(r)       )\n#define union(a,b)        min(a,b)\n#define sub(a,b)          max(a,-(b))\n        \n        r(t.xz,.13); r(t.yz,.2); r(t.xy,.1);         // object rotation\n        // the object\n\t\tt.yz = smod(t.yz,17.);\n        ta = setboxU(t); x = dbox(ta,8.) ;\n        ta = setboxU(smod(t-4.5,9.)); x = sub(x,dbox(ta,4.) );\n        ta = setboxU(t); x = union(x,dbox(ta,7.)) ;\n        ta = setboxU(smod(t-4.5,9.)); x = sub(x,dbox(ta,3.) );\n        ta = setboxU(t); x = union(x,dbox(ta,6.)) ;\n        ta = setboxU(smod(t-4.5,9.)); x = sub(x,dbox(ta,2.) );\n        ta = setboxU(t); x = union(x,dbox(ta,5.)) ;\n        ta = setboxU(smod(t-4.5,9.)); x = sub(x,dbox(ta,1.) );\n   \n        \n        x1 = dsphere(t,.3);          // red spheres\n       // x1 = dsphere(t+vec4(4,8,8,0),.3);          // red spheres\n        closest = min(closest, x1);         // glow footprint\n        //x = min(x1,x);                   // uncomment to display the spheres\n        if (x==x1) c  = vec4(2.,.3,0,0);\n        // if (cos(.25*T)>0.) c += vec4(2.,.3,0,0)*pow(abs((x-x1)),.2)*(.5+.5*cos(.5*T));  // glow1: thanks squid !\n\n        // if (x<-.01) c = vec4(0,0,1,0);          // DEBUG: too thin or near-plane cut parts\n             \n        if(x<EPS)                           // hit ! \n            {   x = i+.01*(1.-abs(x)/EPS);  // decrease banding\n                f = x*x*c; break;           // color texture + black fog \n            }\n        p -= d*x;                           // march ray\n     }\n\n     f += vec4(1,0,0,0) * exp(-closest/4.); //*(.5+.5*cos(.5*T)); // glow2 - thanks kuvkar ! \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}