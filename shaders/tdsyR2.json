{
    "Shader": {
        "info": {
            "date": "1585522010",
            "description": "Mesh from:\nhttps://opengameart.org/content/lowpoly-animated-farm-animal-pack",
            "flags": 1,
            "hasliked": 0,
            "id": "tdsyR2",
            "likes": 30,
            "name": "Swarovski Piglet",
            "published": 3,
            "tags": [
                "raytracing",
                "reflection",
                "refraction",
                "beer",
                "gem",
                "crystal",
                "facet",
                "pig",
                "beerlambert",
                "piglet",
                "faceted"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 1448
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\n//#define AA\n#define GAMMA 1\n\n\n// https://iquilezles.org/articles/intersectors\nbool boxIntersect( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad ) \n{\n\tvec3 roo = ro - cen;\n    if( abs(roo.x)<rad.x && abs(roo.y)<rad.y && abs(roo.z)<rad.z ) return true;\n\n    vec3 m = 1.0/rd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\treturn ( tN < tF && tF > 0.0);\n}\n\n\n// https://iquilezles.org/articles/intersectors\nvec3 triIntersect( in vec3 ro, in vec3 rd, in vec3 v0, in vec3 v1, in vec3 v2 )\n{\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n\n    vec3  n = cross( v1v0, v2v0 );\n    vec3  q = cross( rov0, rd );\n    float d = 1.0/dot( rd, n );\n    float u = d*dot( -q, v2v0 );\n    float v = d*dot(  q, v1v0 );\n    float t = d*dot( -n, rov0 );\n\n    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;\n    \n    return vec3( t, u, v );\n}\n\n#define ZERO_NOLOOP min(0,iFrame)\n\nbool intersectMesh( in vec3 ro, in vec3 rd, float tmax, out float oDis, out vec3 oNor, int exclude, out int faceId)\n{\n   if( !boxIntersect( ro, rd, bboxCtr, bboxSiz ) )\n        return false;\n        \n    bool\tres = false;\n    float\ttmin = tmax;\n    for( int i=ZERO_NOLOOP; i < numVertices / 3; i++ )\n    {\n\t\t// get the triangle        \n        vec3 v0 = getVertex(uint(i*3));\n        vec3 v1 = getVertex(uint(i*3 + 2));\n        vec3 v2 = getVertex(uint(i*3 + 1));\n\n        int id = i * 2;\n        if(id != exclude)\n        {\n            vec3 h = triIntersect( ro, rd, v0, v1, v2 );\n            if( h.x > 0. && h.x < tmin)\n            {\n                tmin = h.x;\n                oNor = normalize(cross(v1 - v0, v2 - v0));;\n                oDis = tmin;\n                faceId = id;\n                res = true;\n            }\n        }\n        \n        // Mirror X  \n        \n        id = i * 2 + 1;\n        if(id != exclude)\n        {\n            v0.x *= -1.;\n            v1.x *= -1.;\n            v2.x *= -1.;\n            vec3 h = triIntersect( ro, rd, v0, v1, v2 );\n            if( h.x > 0. && h.x < tmin)\n            {\n                tmin = h.x;\n                oNor = normalize(cross(v2 - v0, v1 - v0));;\n                oDis = tmin;\n                faceId = id;\n                res = true;\n            }\n        }\n        \n    }\n    \n    return res;\n}\n\n\nvec3 getSkyColor(vec3 rd)\n{\n    vec3 col = texture(iChannel0, rd).rgb;\n    #if GAMMA\n    \tcol = pow(col, vec3(2.2));\n    #endif\n    return col;\n}\n\n\n#define MAX_BOUNCES 10\n#define ABSORB\t\tvec3(0, 5, 0)\n\nvec3 Render(in vec3 ro, in vec3 rd, in float dist)\n{\n    float sgn = 1.;\n    float cref = 0.7;\n    vec3  col = vec3(0);\n    vec3  rel = vec3(1);\n    float transp = 0.99;\n    vec3  absorb = ABSORB;\n    int\t  exclude = -1;\n    for(int i = 0; i < MAX_BOUNCES; i++)\n    {\n        vec3\tn;\n        float \td;\n        if(!intersectMesh(ro, rd, 15., d, n, exclude, exclude))\n        {\n            col += rel * getSkyColor(rd);\n            return col;\n        }\n        vec3 rabs = mix(absorb, vec3(0), (sgn + 1.) / 2.);\n        vec3 beerlamb = exp(-rabs * d);\n        vec3 p = ro + rd * d;\n        n *= sgn;\n        vec3 refl = reflect(rd, n);\n        vec3 refr = refract(rd, n, cref);\n        //float fresnel = 1.0 - pow(dot(n, -rd), 2.);\n        float fresnel = pow(1.0 - abs(dot(n, rd)), 2.0);\n        float reflectorFactor = mix (0.2, 1.0, fresnel);\n        float refractionFactor = mix (transp, 0., fresnel);\n    \n    \tcol += (1.0 - refractionFactor) * rel * beerlamb * getSkyColor(refl) * reflectorFactor;\n    \trel *= refractionFactor * beerlamb;     \n        \n       \tro = p;     \n        if (refr == vec3(0.0))\n        {\n            rd = refl;\n        }\n        else\n        {\n            rd = refr; \n            sgn *= -1.;\n            cref = 1. / cref;\n        }        \n    }\n    col += rel * getSkyColor(rd);\n    return col;\n}\n\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    fragColor = vec4(Render(ro/3. + vec3(0.0,.0,4.0),rd, 14.) ,1);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvec3 vignette(vec3 color, vec2 q, float v)\n{\n    color *= 0.3 + 0.8 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), v);\n    return color;\n}\n\nvec3 desaturate(in vec3 c, in float a)\n{\n    float l = dot(c, vec3(1. / 3.));\n    return mix(c, vec3(l), a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n \n\tvec3 tot = vec3(0.0);\n        \n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n \n        // camera\n        \n        float theta\t= radians(360.)*(iMouse.x/iResolution.x-0.5) + iTime*.2;\n        float phi\t= radians(90.)*(iMouse.y/iResolution.y-0.5)-1.;\n        vec3 ro = 2. * vec3( sin(phi)*cos(theta),cos(phi),sin(phi)*sin(theta));\n        //vec3 ro = vec3(0.0,.2,4.0);\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        //vec3 cd = ca[2];    \n        \n        vec3 rd =  ca*normalize(vec3(p,1.5));        \n        \n        vec3 col = Render(ro, rd, 12.);\n        \n        tot += col;\n            \n#ifdef AA\n    }\n    tot /= 4.;\n#endif\n    \n    tot = desaturate(tot, -0.4);\n    tot = vignette(tot, fragCoord / iResolution.xy, 0.6);\n    #if GAMMA\n    \ttot = pow(tot, vec3(1. / 2.2));\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// export from Houdini using this python script\n/*\nimport sys\n\nnode = hou.pwd()\ngeo = node.geometry()\n\nprims = geo.prims()\n\nvertices = []\n\nbbox =  geo.boundingBox();\nmaxPos = bbox.maxvec()\nminPos = bbox.minvec()\n\nfor prim in prims:\n    points = prim.points()\n    for point in points:\n        pos = point.position()\n        vertices.append(pos)\n        \noutput = \"const int numVertices = \" + str(len(vertices)) + \";\\n\\n\"  \n\noutput = output + \"const uint vertices[\" + str(len(vertices)) + \"] = uint[](\"\n\nfor i in range(len(vertices)):\n    if i % 12 == 0 :\n        output = output + \"\\n\"\n    vert = vertices[i]\n    x = int(round(1023 * (vert.x() - minPos.x()) / (maxPos.x() - minPos.x())))\n    y = int(round(1023 * (vert.y() - minPos.y()) / (maxPos.y() - minPos.y())))\n    z = int(round(1023 * (vert.z() - minPos.z()) / (maxPos.z() - minPos.z())))\n    v = (x << 20) + (y << 10) + z\n    output = output + str(v).rjust(10,\" \") + \"U\"\n    if i != len(vertices) - 1 :\n        output = output + \",\"\n\noutput = output + \" );\\n\\n\"\n\noutput = output + \"vec3 getVertex( uint id )\\n{\\n\\tuint d = vertices[id];\\n\\tvec3 v = vec3(ivec3(d >> 20, d >> 10, d)&1023) / 1023.0;\\n\\t\"\noutput = output + \"return v * vec3(\" + str(maxPos.x() - minPos.x()) + \", \" + str(maxPos.y() - minPos.y()) + \", \" + str(maxPos.z() - minPos.z()) + \") + vec3(\" + str(minPos.x()) + \", \" + str(minPos.y()) + \", \" + str(minPos.z()) + \");\\n}\\n\\n\"\n\nbbox.enlargeToContain(hou.Vector3(-bbox.maxvec().x(), bbox.center().y(), bbox.center().z()))\noutput = output + \"const vec3 bboxSiz = vec3(\" + str(bbox.sizevec().x() / 2.) + \", \" + str(bbox.sizevec().y() / 2.) + \", \" + str(bbox.sizevec().z() / 2.) + \");\\n\"\noutput = output + \"const vec3 bboxCtr = vec3(\" + str(bbox.center().x()) + \", \" + str(bbox.center().y()) + \", \" + str(bbox.center().z()) + \");\\n\"\n\n\nprint(output)\n*/\n\n\nconst int numVertices = 843;\n\nconst uint vertices[843] = uint[](\n    315732U, 759517524U, 732299537U, 759517524U, 852052304U, 839540001U, 852052304U, 666853697U, 718198016U, 666853697U,   1036610U,   1032449U,\n 676298155U,   1047979U,   1036610U, 595515963U, 677284481U,    977537U, 901337518U, 676298155U, 666853697U, 799369646U, 901337518U, 852052304U,\n    322990U, 799369646U, 759517524U, 718198016U, 916197626U, 988461325U, 732299537U, 645281997U,    378059U, 732299537U, 661952734U, 691317895U,\n   1032449U,    982177U, 701384865U, 701384865U,    982177U,    889968U, 689311855U,1068931204U, 920118396U, 677284481U, 668892873U,    965321U,\n 985038081U, 861184222U, 661952734U, 685585524U, 950857857U, 701384865U, 827884092U, 909646466U, 677284481U, 697699911U, 763732599U, 909646466U,\n    365129U,    366203U, 763732599U, 985038081U, 988461325U,1073384569U, 703063151U, 920118396U, 910858349U,    515171U,    383087U, 689311855U,\n 100326486U, 105576508U,    682046U,    378059U, 645281997U, 689311855U, 909646466U, 893979330U, 668892873U,    363144U,    363218U, 631609034U,\n 893979330U, 637081347U, 371019545U, 631609034U, 476439293U, 637081347U, 668892873U, 371019545U,    885530U,    363218U,    366330U, 476439293U,\n    384826U,    388965U, 470181733U, 476711726U, 417005402U, 372030303U, 372053823U, 372030303U,    849759U,    388965U,    391027U, 460747642U,\n    496607U, 258450391U, 306654156U, 417005402U, 555392898U, 529277827U, 470181733U, 460747642U, 464146320U, 464146320U, 322497475U, 355183507U,\n 306654156U, 254317528U, 322497475U, 322497475U, 254317528U,    589794U, 258450391U, 254258154U, 250124268U,    496607U,    498675U, 254258154U,\n 254317528U, 250124268U,    590838U, 306654156U, 258450391U, 254317528U, 988461325U, 916197626U, 950857857U, 985038081U,1068931204U, 910472328U,\n 920118396U,1073384569U, 910858349U,1068931204U,1073384569U, 920118396U,1073384569U, 950857857U, 910858349U, 692760672U, 910858349U, 950857857U,\n 839540001U, 988461325U, 985038081U, 631609034U, 960864955U, 866362047U, 861184222U, 856928426U, 686008490U, 661952734U, 686008490U, 677623929U,\n 689311855U, 691317895U, 910472328U, 476439293U, 417746750U, 476711726U, 645281997U, 691317895U, 689311855U, 637081347U, 476711726U, 372053823U,\n 677623929U, 637719675U, 927128699U, 861184222U, 910472328U, 880001145U,    366330U,    384826U, 417746750U, 371019545U, 372053823U,    871231U,\n 880001145U, 927128699U, 893577385U, 686008490U, 648208553U, 637719675U, 856928426U, 893577385U, 648208553U, 638770832U, 693150364U, 880845468U,\n 916197626U, 718198016U, 701384865U, 763732599U, 944057991U, 984044172U,    366203U,    363144U, 567644808U, 944057991U, 960864955U,1000852155U,\n 893979330U,1000852155U, 960864955U, 909646466U, 984044172U,1000852155U, 950857857U, 916197626U, 701384865U, 631609034U, 695444159U, 683912846U,\n 944057991U, 886288014U, 866362047U, 944057991U, 763732599U, 683912846U, 763732599U, 567644808U, 683912846U, 100326486U, 692760672U, 685585524U,\n 389466014U, 306654156U, 464146320U,    420760U,    443335U, 306654156U, 460747642U, 389466014U, 464146320U, 322497475U, 464146320U, 306654156U,\n    391027U,    420760U, 389466014U,    611273U,    803734U, 355183507U, 886288014U, 929225360U, 900912830U, 695444159U, 654498494U, 638770832U,\n    849759U, 184314770U, 525051779U, 365710193U, 417005402U, 464146320U, 365710193U, 355183507U,    803734U, 417746750U, 470181733U, 417005402U,\n 250124268U, 253252595U,    570367U, 253252595U, 254258154U,    498675U, 253252595U, 250124268U, 254258154U,    322990U,    365129U, 697699911U,\n 799369646U, 697699911U, 827884092U, 901337518U, 827884092U, 595515963U, 676298155U, 595515963U,   1001019U, 691317895U, 677623929U, 880001145U,\n 866362047U, 900912830U, 654498494U, 637719675U, 698391691U, 858823820U, 927128699U, 858823820U, 855681197U, 893577385U, 855681197U, 652257453U,\n 648208553U, 652257453U, 698391691U, 683912846U, 638770832U, 929225360U, 929225360U, 880845468U, 890284734U, 900912830U, 890284734U, 686860990U,\n 654498494U, 686860990U, 693150364U, 555392898U, 533336997U, 596318155U, 184314770U, 349947835U, 530237388U, 372030303U, 529277827U, 184314770U,\n 365710193U, 525051779U, 555392898U, 596318155U, 530237388U, 349947835U, 533336997U, 530237388U, 596318155U, 529277827U, 596318155U, 349947835U,\n 525051779U, 530237388U, 533336997U,    753728U,    771112U, 118196249U, 703063151U, 692760672U, 100326486U,    749658U,    753728U, 105576508U,\n 105576508U, 118196249U,    728078U,    771112U,    845848U, 115135499U, 118196249U, 115135499U,    824320U, 115135499U, 123589654U,    917514U,\n    845848U,    884767U, 123589654U, 123589654U, 127808561U,    954413U,    884767U,    903217U, 127808561U,    903217U,    888897U, 144567367U,\n 127808561U, 144567367U,    937034U,    888897U,    849998U, 138220630U, 144567367U, 138220630U,    869470U, 138220630U, 143417425U,    807002U,\n    849998U,    820297U, 143417425U,    820297U,    812095U, 146544702U, 143417425U, 146544702U,    772162U, 146544702U, 124534832U,    788529U,\n    812095U,    816178U, 124534832U,    803888U,    788529U, 124534832U,    816178U,    803888U, 124534832U, 652257453U, 653264050U, 673186965U,\n 858823820U, 882902166U, 854590642U, 855681197U, 854590642U, 653264050U, 653264050U, 854590642U, 882902166U, 890284734U, 889193155U, 687866563U,\n 687866563U, 889193155U, 907019941U, 880845468U, 907019941U, 889193155U, 698391691U, 673186965U, 882902166U, 686860990U, 687866563U, 673187494U,\n 693150364U, 673187494U, 907019941U, 907019941U, 880845468U, 693150364U, 673187494U, 693150364U, 686860990U, 882902166U, 858823820U, 698391691U,\n 889193155U, 890284734U, 880845468U, 907019941U, 673187494U, 687866563U, 687866563U, 686860990U, 890284734U, 882902166U, 673186965U, 653264050U,\n 653264050U, 652257453U, 855681197U, 854590642U, 855681197U, 858823820U, 673186965U, 698391691U, 652257453U, 124534832U, 146544702U,    812095U,\n    788529U,    772162U, 146544702U,    772162U,    807002U, 143417425U, 146544702U, 143417425U,    820297U, 143417425U, 138220630U,    849998U,\n    807002U,    869470U, 138220630U,    869470U,    937034U, 144567367U, 138220630U, 144567367U,    888897U,    937034U,    954413U, 127808561U,\n 144567367U, 127808561U,    903217U, 127808561U, 123589654U,    884767U,    954413U,    917514U, 123589654U, 123589654U, 115135499U,    845848U,\n    917514U,    824320U, 115135499U,    824320U,    728078U, 118196249U, 115135499U, 118196249U,    771112U,    728078U,    682046U, 105576508U,\n 105576508U, 100326486U,    749658U,    671831U,    515171U, 100326486U,    515171U, 703063151U, 100326486U, 118196249U, 105576508U,    753728U,\n 533336997U, 555392898U, 525051779U, 349947835U, 184314770U, 529277827U, 555392898U, 417005402U, 365710193U, 184314770U,    849759U, 372030303U,\n 530237388U, 525051779U, 184314770U, 596318155U, 529277827U, 555392898U, 693150364U, 638770832U, 654498494U, 686860990U, 654498494U, 900912830U,\n 890284734U, 900912830U, 929225360U, 929225360U, 886288014U, 683912846U, 698391691U, 637719675U, 648208553U, 652257453U, 648208553U, 893577385U,\n 855681197U, 893577385U, 927128699U, 858823820U, 927128699U, 637719675U, 654498494U, 695444159U, 866362047U, 880001145U, 910472328U, 691317895U,\n   1001019U,   1047979U, 676298155U, 595515963U, 676298155U, 901337518U, 827884092U, 901337518U, 799369646U, 697699911U, 799369646U,    322990U,\n    498675U,    570367U, 253252595U,    570367U,    590838U, 250124268U, 417005402U, 476711726U, 417746750U,    803734U,    849759U, 365710193U,\n 464146320U, 355183507U, 365710193U, 525051779U, 365710193U,    849759U, 638770832U, 683912846U, 695444159U, 900912830U, 866362047U, 886288014U,\n 355183507U, 322497475U,    611273U, 389466014U, 460747642U,    391027U, 306654156U, 389466014U,    420760U,    889968U,    749658U, 685585524U,\n    749658U, 100326486U, 685585524U, 683912846U, 886288014U, 944057991U, 866362047U, 960864955U, 944057991U, 683912846U, 567644808U, 631609034U,\n1000852155U, 893979330U, 909646466U, 960864955U, 631609034U, 893979330U,1000852155U, 984044172U, 944057991U, 567644808U, 763732599U,    366203U,\n 984044172U, 909646466U, 763732599U, 880845468U, 929225360U, 638770832U, 648208553U, 686008490U, 856928426U, 637719675U, 677623929U, 686008490U,\n 893577385U, 856928426U, 880001145U,    871231U,    885530U, 371019545U, 417746750U, 476439293U,    366330U, 880001145U, 856928426U, 861184222U,\n 927128699U, 880001145U, 677623929U, 372053823U, 371019545U, 637081347U, 476711726U, 637081347U, 476439293U, 910472328U,1068931204U, 689311855U,\n 677623929U, 691317895U, 661952734U, 686008490U, 661952734U, 861184222U, 866362047U, 695444159U, 631609034U, 985038081U, 732299537U, 839540001U,\n 950857857U, 685585524U, 692760672U, 910472328U, 861184222U, 985038081U, 950857857U,1073384569U, 988461325U,    590838U,    589794U, 254317528U,\n 254258154U, 258450391U,    496607U, 250124268U, 254317528U, 258450391U,    589794U,    611273U, 322497475U, 464146320U, 417005402U, 470181733U,\n 529277827U, 372030303U, 417005402U, 306654156U,    443335U,    496607U, 460747642U, 470181733U,    388965U,    849759U,    871231U, 372053823U,\n 372030303U, 372053823U, 476711726U, 470181733U, 417746750U,    384826U, 476439293U, 631609034U,    363218U,    885530U,    965321U, 668892873U,\n 637081347U, 893979330U, 631609034U, 371019545U, 668892873U, 893979330U, 631609034U, 567644808U,    363144U, 668892873U, 677284481U, 909646466U,\n 689311855U,    383087U,    378059U,    682046U,    671831U, 100326486U, 689311855U, 703063151U,    515171U, 910858349U, 692760672U, 703063151U,\n1073384569U,1068931204U, 985038081U, 763732599U, 697699911U,    365129U, 909646466U, 827884092U, 697699911U, 677284481U, 595515963U, 827884092U,\n 661952734U, 732299537U, 985038081U,    965321U,    977537U, 677284481U, 920118396U, 703063151U, 689311855U,    889968U, 685585524U, 701384865U,\n 701384865U, 718198016U,   1032449U, 691317895U, 645281997U, 732299537U,    378059U,    375057U, 732299537U, 988461325U, 839540001U, 718198016U,\n 759517524U,    315732U,    322990U, 852052304U, 759517524U, 799369646U, 666853697U, 852052304U, 901337518U,    977537U,   1001019U, 595515963U,\n   1036610U, 666853697U, 676298155U,   1032449U, 718198016U, 666853697U, 718198016U, 839540001U, 852052304U, 839540001U, 732299537U, 759517524U,\n 732299537U,    375057U,    315732U );\n\nvec3 getVertex( uint id )\n{\n\tuint d = vertices[id];\n\tvec3 v = vec3(ivec3(d >> 20, d >> 10, d)&1023) / 1023.0;\n\treturn v * vec3(0.337168395519, 0.915008187294, 1.95409280062) + vec3(0.0, -0.500852227211, -0.908407986164);\n}\n\nconst vec3 bboxSiz = vec3(0.337168395519, 0.457504093647, 0.977046400309);\nconst vec3 bboxCtr = vec3(0.0, -0.043348133564, 0.0686384141445);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}