{
    "Shader": {
        "info": {
            "date": "1691911139",
            "description": "Animated (julia constant) julia fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "dlScRG",
            "likes": 1,
            "name": "Julia fractal animated",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "animated",
                "juliafractal"
            ],
            "usePreview": 0,
            "username": "tovaris",
            "viewed": 157
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 2000\n#define ESCAPE_RADIUS 999999.0\n#define PI 3.14159265359\n\n#define xmin -2.5\n#define xmax 2.5\n#define ymin -1.5\n#define ymax 1.5\n\nvec2 c_mul(in vec2 a, in vec2 b) {\n   return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\n\nfloat escape(in vec2 coord, in vec2 c) {\n    \n    vec2 z = vec2(coord);\n    for (int i = 0; i < MAX_ITER; ++i) {\n        z = c_mul(z, z) + c;\n        \n        if (length(z) > ESCAPE_RADIUS) {\n        \n            float v = float(i) / float(MAX_ITER);\n            v = 2.0 / (1.0 + exp(-300.0 * v)) - 1.0;\n            return v;\n        }\n    }\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 maxs = vec2(xmax, ymax);\n    vec2 mins = vec2(xmin, ymin);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Map to user defined range\n    uv = uv * (maxs - mins) + mins;\n\n    float cReal = noise(vec2(-0.5251993, -0.5251993) * iTime * 0.3);\n    float cImag = noise(vec2(-0.4, 0.6) * iTime * 0.3);\n    vec2 c = vec2(cReal, cImag) * 2.0 - 1.0;\n    float blue = escape(uv, c);\n    \n    vec3 color = vec3(1.0, 0.0, 0.0);\n    \n\n    // Output to screen\n    fragColor = vec4(vec3(0.0, 0.0, blue), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nvec3 hueShift(vec3 color, float hue) {\n    const vec3 k = vec3(0.57735, 0.57735, 0.57735);\n    float cosAngle = cos(hue);\n    return vec3(color * cosAngle + cross(k, color) * sin(hue) + k * dot(k, color) * (1.0 - cosAngle));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}