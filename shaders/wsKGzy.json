{
    "Shader": {
        "info": {
            "date": "1570515716",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "wsKGzy",
            "likes": 5,
            "name": "shadetober #07 (enchanted)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 484
        },
        "renderpass": [
            {
                "code": "// noise functions from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n#define PI 3.14159\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nfloat sdCircle( vec2 p, float r )\n{\n  return length(p) + .5 - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    // this is sloppy and weird what's the real math here\n    uv.x *= aspect;\n    uv.x -= aspect * .5;\n    uv.y -= .5;\n    \n    vec3 final = vec3(.2,.3,.7);\n    float dt = 500.+iTime * .05;\n    for (int i = 1; i < 15; i++) {\n        // the \"pn\" vectors represent points in the snoise space\n        vec2 noiseSamplePoint = vec2(dt*.1, dt*.2) * float(i);\n        \n        // radius\n        float radius = clamp(.15 + .1 * snoise(noiseSamplePoint), 0., 1.); // not sure why this can go negative\n        \n        // pos.x [-.5, .5]\n        float posx = snoise(noiseSamplePoint + .3);\n        \n        // pos.y [-.5, .5]\n        float posy = snoise(noiseSamplePoint + .7);\n        \n        // \"blur\"\n        float blur = clamp(.4 + snoise(noiseSamplePoint + .11) * .1, 0., 1.);  // this one too\n        \n        // randomize some color channels too\n        float red = clamp(.2 + snoise(noiseSamplePoint + .13), 0., 1.);\n        float green = clamp(.3 + snoise(noiseSamplePoint + .17), 0., 1.);\n        float blue = clamp(.8 + snoise(noiseSamplePoint + .19), 0., 1.);\n        \n        vec2 offset = vec2(posx, posy) * .5;\n        float cDist = sdCircle(uv - offset, radius);\n        cDist = 1.-smoothstep(blur, .5, cDist);\n        \n        final += vec3(red,green,blue) * vec3(cDist) * .14;\n    }\n    \n    // add a little vignette/hotspot\n    final *= 1.1 - length(uv);\n    \n    // Output to screen\n    // vec3 col = texture(iChannel0, uv).xxx;\n    fragColor = vec4(final, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}