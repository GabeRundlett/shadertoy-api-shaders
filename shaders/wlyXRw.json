{
    "Shader": {
        "info": {
            "date": "1582390754",
            "description": "Capsule rep with smooth camera rotations.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyXRw",
            "likes": 2,
            "name": "Capsule repetition camera rot",
            "published": 3,
            "tags": [
                "rm"
            ],
            "usePreview": 0,
            "username": "rodgzilla",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "#define time .4 * iTime\n#define ZPOS -30. + 20. * time\n\nfloat PI = acos(-1.);\n\nmat2 rot2d(float a) {\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat sph(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat tube(vec3 p, vec3 a, vec3 b, float r) {\n  vec3 ab = b - a;\n  vec3 ap = p - a;\n  float t = dot(ab, ap) / dot(ab, ab);\n  t = clamp(t, 0., 1.);\n  vec3 c = a + ab * t;\n  \n  return length(p - c) - r;\n}\n\nvec3 rep(vec3 p, vec3 r) {\n  vec3 q = mod(p, r) - .5 * r;\n  \n  return q;\n}\n\nfloat at = 0.;\nfloat map(vec3 p) {\n  p.xy *= rot2d(sin(1. * time) * sin(p.z / 15.));\n  p.x += 20. * sin(p.z / 100.);\n  p.x += 15. * cos(p.z / 50.);\n  p.xz *= rot2d(sin(.0001 * time) * PI);\n  p = rep(p, vec3(5, 5, 5));\n  float d = 5000.;\n  vec3 a1 = vec3(-2, 0, 0);\n  vec3 b1 = vec3(2, 0, 0);\n  vec3 a2 = vec3(0, -2, 0);\n  vec3 b2 = vec3(0, 2, 0);\n  vec3 a3 = vec3(0, 0, -3.);\n  vec3 b3 = vec3(0, 0, 3.);\n  float t = floor(time * .5) + smoothstep(.3, .6, fract(time * .5));\n  a1.xy *= rot2d(t);\n  b1.xy *= rot2d(t);\n  a2.xy *= rot2d(t);\n  b2.xy *= rot2d(t);\n  d = min(d, tube(p, a1, b1, .5));\n  d = min(d, tube(p, a2, b2, .5));\n  d = min(d, tube(p, a3, b3, .5));\n  \n  float t_wave = floor(time) + fract(time);\n  float wave = .5 * sin(t_wave) + .5;\n  vec3 shift = vec3(.2 * sin(time), 0, 0);\n  d = min(d, sph(p + shift, 1.));\n  \n  at += .1 / (.1 + d);\n  \n  return d;\n}\n\n\nvec3 glow = vec3(0, 0, 0);\nfloat rm(vec3 ro, vec3 rd) {\n  float d = 0.;\n  \n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 100.) {\n      break;\n    }\n    \n    d += ds * 1.;\n    glow += .02 * at * vec3(0, 1., 0.);\n  }\n  \n  return d;\n}\n\nvec3 normal(vec3 p) {\n  vec2 e = vec2(0.01, 0);\n  \n  vec3 n = map(p) - vec3(\n    map(p - e.xyy),\n    map(p - e.yxy),\n    map(p - e.yyx)\n  );\n  \n  return normalize(n);\n}\n\nfloat light(vec3 p) {\n  vec3 lp = vec3(0, 0, ZPOS);\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  vec3 n = normal(p);\n  float dif = dot(n, tln);\n  float d = rm(p + .001 * n, tln);\n  \n  if (d < length(tl)) {\n    dif *= .1;\n  }\n  \n  return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n\tvec3 ro = vec3(0, 0, ZPOS);\n  \tvec3 rd = normalize(vec3(uv, 1.));\n\tfloat t = floor(time / 2.) + smoothstep(0., .5, fract(time / 2.));\n    rd.xz *= rot2d(t * PI / 2.);\n    t = floor(time / 4.) + smoothstep(.5, .7, fract(time / 4.));\n    rd.yz *= rot2d(t * PI / 2.);\n  \tfloat d = rm(ro, rd);\n  \tvec3 p = ro + d * rd;\n//  \tfloat dif = light(p);\n  \n    vec3 col = .2 * glow;\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}