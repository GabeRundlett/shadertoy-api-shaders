{
    "Shader": {
        "info": {
            "date": "1628436574",
            "description": "Parameterized Apollonians. Use mouse to set inversion circle dihedral. See code for further controls.",
            "flags": 48,
            "hasliked": 0,
            "id": "7tBXzd",
            "likes": 26,
            "name": "More Apollonians",
            "published": 3,
            "tags": [
                "inversion",
                "apollonian"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Apollonian circles. Iterated inversion in a ring of circles.\n//\n// Construct K circles in a ring, as well as a central circle. The circles have\n// dihedral angles phi and psi, set with the mouse. Press 'c' to see the circles.\n// The dihedral angles can be varied continously, though for exact alignment of\n// the pattern they should be integral fractions of pi.\n//\n// For each point in the plane, if it is inside any of the circles, invert the\n// point in that circle. Repeat. The pattern converges on a set of complementary\n// circles, orthogonal to the original circles.\n//\n// Limits of dihedral angles depends on K, eg. for K = 3, phi should be in\n// range 0 <= phi <= PI/7 for sensible results.\n// \n// Controls:\n// mouse: set phi and psi angles from x & y coordinates\n// left/right: change K, the number of circles in the ring\n// up/down: zoom\n// a: antialiasing\n// b: outlines of circles\n// c: show inversion circles\n// f: central reflection when inverting in centre circle\n// g: gyrate\n// h: transform to halfplane\n// i: invert unit circle to exterior\n// l: show inversion circle lines\n// s: color according to inversion steps taken\n// t: alternative colouring\n//\n// This can all be better understood in terms of limits of hyperbolic\n// honeycombs (the fundamental tetrahedron of the honeycomb corresponds\n// a set of four circles on the Poincare ball boundary, which can be\n// stereographically mapped to the plane. See eg.\n// https://www.shadertoy.com/view/WtXcWs for more).\n//\n////////////////////////////////////////////////////////////////////////////////\n\nint maxsteps = 200;\n\nconst int MAXK = 20;\nvec3 circles0[MAXK+1];\nvec3 circles1[MAXK+1];\n\nvoid initcircles(int K, float phi, float psi) {\n  float theta = PI/float(K); // half angle between circle centres\n  // radius of ring circles, centred on unit circle\n  float r = sin(theta);\n  r /= cos(0.5*phi); // Get correct dihedral between ring circles\n  float r2 = r*r;\n\n  // s2 is the radiusÂ² for the inner circle that gives\n  // the right dihedral angle with the outer circles.\n  // cosine formula + quadratic equation\n  float B = -r*cos(psi);\n  float C = r2-1.0;\n  float s = B + sqrt(B*B-C);\n  float s2 = s*s;\n\n  // Scale factor to make disc be 1 unit radius\n  float scale2 = 1.0/(1.0-r2);\n  float scale = sqrt(scale2);\n  circles0[0] = vec3(0,0,scale2*s2);\n  // The complementary/dual set of circles\n  //circles1[0] = vec3(0,0,1);\n  circles1[0] = vec3(0,0,sqr(scale2*s2)); // Unit circle inverted in midcircle\n  // Centre & radius for orthogonal circles\n  float k = 0.5*(1.0+s2-r2)/cos(theta);\n  for (int i = 0; i < K; i++) {\n    float t = float(2*i)*theta;\n    circles0[i+1] = vec3(scale*vec2(sin(t+theta),cos(t+theta)),scale2*r2);\n    circles1[i+1] = vec3(scale*k*vec2(sin(t),cos(t)),scale2*(k*k-s2));\n  }\n}\n\nbool inside(vec2 p, vec3 c) {\n  float r2 = length2(p-c.xy);\n  return r2 <= c.z;\n}\n\n// Invert p in circle c, keeping track of conformal scale factor.\nvec2 invert(vec2 p, vec3 c, inout float scale) {\n  p -= c.xy;\n  float k = c.z/dot(p,p);\n  scale *= k;\n  p *= k;\n  p += c.xy;\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  int K = 3+max(0,keycount(KEY_RIGHT)-keycount(KEY_LEFT));\n  int N = K+1;\n  // Same rules as hyperbolic Schwarz triangles\n  float pmax = float((3*K-2)/(K-2));\n  float phi = PI/round(pmax*iResolution.x/iMouse.x);\n  float psi = PI/round(3.0*iResolution.y/iMouse.y);\n\n  initcircles(K,phi,psi);\n\n  float zoom = exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  if (key(CHAR_Z)) zoom *= 0.5;\n\n  vec3 aacol = vec3(0);\n  bool dohalfplane = key(CHAR_H);\n  int AA = 1;\n  if (key(CHAR_A)) AA = 2;\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 z = (2.0*(fragCoord.xy+vec2(i,j)/float(AA)) - iResolution.xy)/iResolution.y;\n      float pwidth = fwidth(z.x);\n      if (dohalfplane) z.y += 1.0;\n      z *= zoom;\n      float scale = zoom;\n      float scale0 = scale;\n      if (dohalfplane) z = invert(z,vec3(0,-1,2),scale);\n      vec2 z0 = z; // Remember original for scaling\n      int step;\n      for (step = 0; step < maxsteps; step++) {\n        bool found = false;\n        if (key(CHAR_I) && dot(z,z) > 1.0) {\n          z = invert(z,vec3(0,0,1),scale);\n        }\n        for (int i = 0; i < N; i++) {\n          vec3 c = circles0[i];\n          if (inside(z,c)) {\n            z = invert(z,c,scale);\n            if (key(CHAR_F) && i == 0) z = -z;\n            if (key(CHAR_G) && i == 0) z = rotate(z,0.2*PI*iTime); //-z;\n            found = true;\n            break;\n          }\n        }\n        if (!found) break;\n      }\n      vec3 col = vec3(1);\n      float dmin = 1e10;\n      int imin = 0;\n      if (dot(z,z) > 1.0) {\n        dmin = length(z)-1.0;\n      } else {\n        for (int i = 1; i < N; i++) {\n          vec3 c = circles1[i];\n          float d = abs(length(z-c.xy) - sqrt(abs(c.z)));\n          if (inside(z,c)) {\n            dmin = d;\n            imin = i;\n            break;\n          }\n        }\n      }\n      if (key(CHAR_S)) {\n        col = hsv2rgb(vec3(float(step)/20.0,0.8,0.8));\n      } else {\n        col = hsv2rgb(vec3(float(imin)/float(N+1),0.8,0.8));\n      }\n      if (!key(CHAR_B)) col *= smoothstep(0.0,0.002,dmin/scale);\n\n      if (!key(CHAR_L)) {\n        float dmin = 1e10;\n        int imin = -1;\n\n        for (int i = 0; i < N; i++) {\n          vec3 c = circles0[i];\n          float d = abs(length(z-c.xy) - sqrt(c.z));\n          if (d < dmin) {\n            dmin = d;\n            imin = i;\n          }\n        }\n        if (key(CHAR_T)) {\n          col *= (1.0-0.5*smoothstep(0.0,0.02,dmin));\n        } else {\n          col = mix(col,vec3(0),0.3*smoothstep(0.0,pwidth,dmin/scale));\n        }\n      }\n      bool showcircles = key(CHAR_C);\n      if (showcircles) {\n        float d = 1e8;\n        for (int i = 0; i < N; i++) {\n          d = min(d,abs(length(z0-circles0[i].xy) - sqrt(circles0[i].z)));\n          //d = min(d,abs(length(z0-circles1[i].xy) - sqrt(circles1[i].z)));\n        }\n        d /= scale0;\n        col = mix(vec3(0),col,smoothstep(0.005,0.01,d));\n      }\n      aacol += col;\n      }\n  }\n  aacol /= float(AA*AA);\n  aacol = pow(aacol,vec3(0.4545));\n  if (alert) aacol.x = 1.0;\n  fragColor = vec4(aacol,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  } else if (i == 1) {\n    if (j == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (j == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#if !defined key\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#endif\n#define keycount(key) (int(store(0,(key)).x))\n\nconst float PI = 3.14159265;\nconst float TWOPI = 2.0*PI;\nconst int AA = 2;\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66; // black outlines\nconst int CHAR_C = 67; // show circles\nconst int CHAR_D = 68;\nconst int CHAR_F = 70; // Flip centre circle\nconst int CHAR_G = 71; // gyrate\nconst int CHAR_H = 72; // halfplane\nconst int CHAR_I = 73; // invert in unit circle\nconst int CHAR_J = 74;\nconst int CHAR_L = 76; // show circle lines\nconst int CHAR_S = 83; // show steps\nconst int CHAR_T = 84; // alternative display\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_Z = 90; // zoom\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nfloat length2(vec2 p) {\n  return dot(p,p);\n}\n\nfloat sqr(float x) {\n  return x*x;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}