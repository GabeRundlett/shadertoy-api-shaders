{
    "Shader": {
        "info": {
            "date": "1570794930",
            "description": "Simulating relativistic hydrodynamics using nonlinear wave equations(what!)",
            "flags": 32,
            "hasliked": 0,
            "id": "tsK3zt",
            "likes": 13,
            "name": "Solitonic wave droplet aquarium",
            "published": 3,
            "tags": [
                "waves",
                "simulation",
                "particles",
                "physics",
                "droplets",
                "nonlinear",
                "classicalfieldtheory",
                "hydrodynamics"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 857
        },
        "renderpass": [
            {
                "code": "// Fork of \"Droplets in weightlessness\" by michael0884. https://shadertoy.com/view/tdyGR3\n// 2019-10-11 10:24:15\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    vec4  field = SAMPLR(F1, pos);\n  \n    float A = 2.*PI*length(field.xy); //the complex field module\n   \tfloat At = 1.*dt*PI*length(field.zw);\n    float charge = 50.*(field.x*field.w - field.y*field.z); //charge in this frame of reference\n    float E = sqrt(A*A + At*At);\n    float isdroplet =(max(E*0.5,0.8) - 0.8);\n    \n    vec2 red = vec2(1,0), green = vec2(-0.5,sqrt(3.)*0.5), blue = vec2(-0.5,-sqrt(3.)*0.5);\n   \n    vec3 RGB =  vec3(dot(field.xy, red),dot(field.xy, green),dot(field.xy, blue));\n    \n    // Output to screen\n    fragColor.xyz = vec3(1.0)*length(RGB);\n    //fragColor.xyz = vec3(isdroplet);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define size iResolution.xy\n#define SAMPLR(a, pos) texture((a), (pos)/size)\n#define SAMPLRs(a, pos,sz) texture((a), (pos)/sz)\n#define F1 iChannel0\n\n//scales\n#define dt sqrt(2.)/3.6\n#define dx 1.\n\n//the border is hydrophobic btw\n#define BORDER_WIDTH 0.00001\n#define BORDER_HEIGHT 0.01\n\n#define BORDER\n#define UPPER_BORDER\n\n#define mouse_amplitude 0.4\n#define mouse_radius 20.\n//nonlinearity, the higher, the smaller the minimal size of the droplet will be\n#define K 0.4\n\n//diffusion\n#define smooth 0.001\n\n\n#define PI 3.14159265\n\n\n//gravity\nfloat potential(vec2 X)\n{\n\treturn 0.9*(X.y-800.)/1000.;\n}\n\n\nfloat field_fluid_potential(float U, vec2 pos)\n{\n    float transition_sharpness = 8.; //incompressibility\n    float fluid_amplitude = 0.; // the density of the fluid\n    return K*((1.+potential(pos))*U*U + 0.5*pow(U*0.4, 6.) - 0.3*exp(-transition_sharpness*pow(abs(fluid_amplitude-U),2.))) ;\n}\n\n#define eps 0.005\nfloat force(float U, vec2 pos)\n{\n    return (field_fluid_potential(U+eps,pos)-field_fluid_potential(U-eps,pos))*0.5/eps;\n}\n\n///DON'T CHANGE THESE CONSTANTS \n//the frequency of the soliton\n#define freq sqrt(K)*1.\n//the radius of the soliton in pixels\n#define rad 2./(sqrt(K)*dx)\n\n//2d positive spinner(droplet/soliton, I call it spinner because the field spins in the complex space) approximate solution, exact solution unknown, probably doesn't exist\nvec4 spinner(vec2 pos, float t, float R)\n{\n    pos /= rad;\n    float r = length(pos);\n    float amplitude = (0.5 - 0.5*tanh(5.*(r - R)));\n    float FREQ = 5.3*freq/sqrt(R); // the frequency of the spinner is inversly proportonal to its radius\n\tfloat u1 = sin(FREQ*t)*amplitude;\n    float u2 = cos(FREQ*t)*amplitude;\n    //time derivative is perpendicular in complex space to the amplitude - aka rotation\n\tfloat du1_dt = FREQ*u2;\n    float du2_dt = -FREQ*u1;\n    return vec4(u1, u2, du1_dt, du2_dt);\n}\n//you can get a negatively charged spinner by flipping the sign of the time derivative, i.e. flipping time backwards\n\n\n//more that 0.3c is unstable with this numerical scheme and approximate solution\n//using the lorentz transformation of a stationary soliton to get a moving one, |speed| < 1\nvec4 moving_spinner(vec2 pos, vec2 speed, float R, float t)\n{\n    float v2 = dot(speed, speed);\n    float ps = dot(pos,speed);\n    //lorentz factor\n    float gamma = sqrt(1./(1.-v2));\n    vec2 pos_new = pos + (gamma - 1.)*ps*speed/(v2+0.0001);\n    float time_new = 0.5*PI*t-gamma*ps;\n    return spinner(pos_new, time_new, R);\n}\n\nvec4 Laplacian(sampler2D F, vec2 pos, vec2 sz)\n{\n    vec4 a = SAMPLRs(F, pos,sz);\n    vec3 k = vec3(-1./12., 4./3., -5./2.);\n\tvec4 x_l1 = SAMPLRs(F, pos + vec2(-1,0),sz);\n    vec4 x_l2 = SAMPLRs(F, pos + vec2(-2,0),sz);\n    vec4 x_r1 = SAMPLRs(F, pos + vec2(1,0),sz);\n    vec4 x_r2 = SAMPLRs(F, pos + vec2(2,0),sz);\n    vec4 y_l1 = SAMPLRs(F, pos + vec2(0,-1),sz);\n    vec4 y_l2 = SAMPLRs(F, pos + vec2(0,-2),sz);\n    vec4 y_r1 = SAMPLRs(F, pos + vec2(0,1),sz);\n    vec4 y_r2 = SAMPLRs(F, pos + vec2(0,2),sz);\n \n\treturn ((x_l2+x_r2+y_l2+y_r2)*k.s + (x_l1+x_r1+y_l1+y_r1)*k.y + a*2.*k.z)/(dx*dx);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        field += mouse_amplitude*spinner(pos-iMouse.xy, 0., mouse_radius);\n    \n   // field += 0.08*moving_spinner(pos - vec2(0.2,0.8)*size, vec2(0.1, 0.0), 2., float(iFrame)*dt);\n    float border_potential=0.;\n    #ifdef BORDER\n        //border conditions\n        vec2 X = pos/size.x; \n    \tborder_potential = 0.6*(1. - clamp((1. - X.x)*(1.-X.y)*X.x*X.y/BORDER_WIDTH,0.,1.));\n    #endif\n    \n    \n    vec4 LAP = Laplacian(F1, pos,size);\n    \n    field.xy += LAP.xy*smooth; //pretty useful, smooths the liquid and makes it more stable\n\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( LAP.xy - force(length(field.xy),pos)*field.xy/(length(field.xy)+0.001) );\n    field *= round(1.-border_potential);\n    //field value\n    field.xy += dt*field.zw;\n    \n    //initial conditions\n    if(iFrame <1) {\n    \tfield = 4.*moving_spinner(pos - vec2(0.5,0.5)*size, vec2(0.0, 0.0), 10., iTime);\n        \t\n    }\n    \n    #ifdef UPPER_BORDER\n   \t\tfloat border = clamp((1.-X.y)/0.01,0.,1.);\n    \tfield *= vec4(border);\n    #endif\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n   \n //mouse interaction\n    if(iMouse.z>0.)\n        field += mouse_amplitude*spinner(pos-iMouse.xy, 0., mouse_radius);\n    \n    //field += 0.08*moving_spinner(pos - vec2(0.2,0.8)*size, vec2(0.1, 0.0), 2., float(iFrame)*dt);\n   \n    float border_potential=0.;\n    #ifdef BORDER\n        //border conditions\n        vec2 X = pos/size; \n    \tborder_potential = BORDER_HEIGHT*(1. - clamp((1. - X.x)*(1.-X.y)*X.x*X.y/BORDER_WIDTH,0.,1.));\n    #endif\n    \n    vec4 LAP = Laplacian(F1, pos,size);\n    \n    field.xy += LAP.xy*smooth; //pretty useful, smooths the liquid and makes it more stable\n\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( LAP.xy - force(length(field.xy),pos)*field.xy/(length(field.xy)+0.001) ) - border_potential*field.xy;\n    //field value\n    field.xy += dt*field.zw;\n    \n    #ifdef UPPER_BORDER\n   \t\tfloat border = clamp((1.-X.y)/0.01,0.,1.);\n    \tfield *= vec4(border);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n   //mouse interaction\n    if(iMouse.z>0.)\n        field += mouse_amplitude*spinner(pos-iMouse.xy, 0., mouse_radius);\n    //field += 0.08*moving_spinner(pos - vec2(0.2,0.8)*size, vec2(0.1, 0.0), 2., float(iFrame)*dt);\n    \n    float border_potential=0.;\n    #ifdef BORDER\n        //border conditions\n        vec2 X = pos/size; \n    \tborder_potential = BORDER_HEIGHT*(1. - clamp((1. - X.x)*(1.-X.y)*X.x*X.y/BORDER_WIDTH,0.,1.));\n    #endif\n    vec4 LAP = Laplacian(F1, pos,size);\n    \n    field.xy += LAP.xy*smooth; //pretty useful, smooths the liquid and makes it more stable\n\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( LAP.xy - force(length(field.xy),pos)*field.xy/(length(field.xy)+0.001) ) - border_potential*field.xy;\n    //field value\n    field.xy += dt*field.zw;\n    \n \t#ifdef UPPER_BORDER\n   \t\tfloat border = clamp((1.-X.y)/0.01,0.,1.);\n    \tfield *= vec4(border);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n //mouse interaction\n    if(iMouse.z>0.)\n        field += mouse_amplitude*spinner(pos-iMouse.xy, 0., mouse_radius);\n    \n    //field += 0.08*moving_spinner(pos - vec2(0.2,0.8)*size, vec2(0.1, 0.0), 2., float(iFrame)*dt);\n    \n    float border_potential=0.;\n    #ifdef BORDER\n        //border conditions\n        vec2 X = pos/size; \n    \tborder_potential = BORDER_HEIGHT*(1. - clamp((1. - X.x)*(1.-X.y)*X.x*X.y/BORDER_WIDTH,0.,1.));\n    #endif\n    \n  vec4 LAP = Laplacian(F1, pos,size);\n    \n    field.xy += LAP.xy*smooth; //pretty useful, smooths the liquid and makes it more stable\n\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( LAP.xy - force(length(field.xy),pos)*field.xy/(length(field.xy)+0.001) ) - border_potential*field.xy;\n    //field value\n    field.xy += dt*field.zw;\n    \n    #ifdef UPPER_BORDER\n   \t\tfloat border = clamp((1.-X.y)/0.01,0.,1.);\n    \tfield *= vec4(border);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}