{
    "Shader": {
        "info": {
            "date": "1618536105",
            "description": "Scribble made out of quadratic beziers.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdXSW8",
            "likes": 9,
            "name": "Bezier Scribbles",
            "published": 3,
            "tags": [
                "bezier",
                "random",
                "spline",
                "curve",
                "quadratic",
                "path",
                "scribbles"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "// Based on a quick doodle I did on desmos:\n// https://www.desmos.com/calculator/mbtrtwqbwb\n\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat sdBezier(in vec2 p, in vec2 v1, in vec2 v2, in vec2 v3) {\n    vec2 c1 = p - v1;\n    vec2 c2 = 2.0 * v2 - v3 - v1;\n    vec2 c3 = v1 - v2;\n\n    float t3 = dot(c2, c2);\n    float t2 = dot(c3, c2) * 3.0 / t3;\n    float t1 = (dot(c1, c2) + 2.0 * dot(c3, c3)) / t3;\n    float t0 = dot(c1, c3) / t3;\n\n    float t22 = t2 * t2;\n    vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n    float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n    float p2 = abs(pq.x);\n    float r1 = 1.5 / pq.x * pq.y;\n\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float r2 = r1 * sqrt(3.0 / p2), root;\n        if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n        else root = sinh(asinh(r2) / 3.0);\n        root = clamp(-2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0, 0.0, 1.0);\n        return length(p - mix(mix(v1, v2, root), mix(v2, v3, root), root));\n    }\n\n    else {\n        float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0;\n        vec2 roots = clamp(2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0, 0.0, 1.0);\n        vec2 p1 = p - mix(mix(v1, v2, roots.x), mix(v2, v3, roots.x), roots.x);\n        vec2 p2 = p - mix(mix(v1, v2, roots.y), mix(v2, v3, roots.y), roots.y);\n        return sqrt(min(dot(p1, p1), dot(p2, p2)));\n    }\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// Modified hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadcrtoy.com/view/4djSRW)\nvec2 Hash12(in float x) {\n\tvec3 p3 = fract(x * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy) * 2.0 - 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 2.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n\n    float dc = 1000000000000.0, dp = dc, de = dc;\n    float par = fract(iTime), sec = floor(iTime);\n    for (float v=sec; v < sec + 10.0; v++) {\n        vec2 v1 = Hash12(v), v2 = Hash12(v + 1.0), v3 = Hash12(v + 2.0);\n        vec2 a = mix(v1, v2, par), b = mix(v2, v3, par), c = mix(v3, Hash12(v + 3.0), par);\n        dc = min(dc, sdBezier(uv, 0.5 * (a + b), b, 0.5 * (b + c)));\n\n        de = min(de, sdLine(uv, a, b));\n        de = min(de, sdLine(uv, b, c));\n\n        dp = min(dp, dot2(uv - a));\n        dp = min(dp, dot2(uv - b));\n        dp = min(dp, dot2(uv - c));\n    }\n\n    vec3 color = vec3(0.0);\n\n    color = mix(color, vec3(1.0, 0.8, 0.0), 1.0 - smoothstep(0.0, 0.015, de - 0.0025));\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 0.015, sqrt(dp) - 0.02));\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, dc - 0.01));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}