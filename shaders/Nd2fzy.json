{
    "Shader": {
        "info": {
            "date": "1646568745",
            "description": "CC0: Julia domain mapping\n  Inspired by: https://twitter.com/matthen2/status/1498684431669907458?s=20&t=ddm5bZNo5VHHCqLvZ6XGwg\n  Very interesting idea IMHO by matthen2\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Nd2fzy",
            "likes": 13,
            "name": "Julia domain mapping",
            "published": 3,
            "tags": [
                "julia",
                "domain"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "// CC0: Julia domain mapping\n//  Inspired by: https://twitter.com/matthen2/status/1498684431669907458?s=20&t=ddm5bZNo5VHHCqLvZ6XGwg\n//  Very interesting idea IMHO by matthen2\n\n// Uncomment to animate\n// #define ANIMATE\n\n#define JULIA_ITERATIONS 8\n\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvec2 spiralEffect(vec2 p, float a, float n) {\n  vec2 op = p;\n  float b = a/TAU;\n  vec2 pp   = toPolar(op);\n  pp.y += PI;\n  float  aa = pp.y;\n  pp        -= vec2(pp.y*n*b, (pp.x/b+PI)/n);\n  vec2  nn  = mod2(pp, vec2(a, TAU/n));\n  // Yes, this is a trial and error:ed until it looked good \n  // because I couldn't be bothered to compute the real solution\n  float xf  = tanh_approx(20.0*length(p)/abs(n));\n  return vec2(abs(pp.x)*xf, mod(nn.y, n));\n}\n\nfloat df(vec2 p) {\n  vec2 sp = spiralEffect(p, 0.1,2.0);\n  \n  float d0 = sp.x;\n  float d1 = length(p)-2.0;\n  \n  float d = d0;\n  d = max(d, d1);\n  return d;\n}\n\nfloat julia_map(inout vec2 p, vec2 c) {\n  float s = 1.0;\n\n  for (int i = 0; i < JULIA_ITERATIONS; ++i) {\n    // Turns out this is the classic julia loop after all. \n    // Oh well :)\n    vec2 p2 = p*p;\n    p = vec2(p2.x-p2.y, 2.0*p.x*p.y);\n    p += c;\n    s *= 1.9; // Mindless fine tuning at its best\n    s *= sqrt(p2.x+p2.y);\n  }\n  \n  return 1.0/s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  float aa = 2.0/RESOLUTION.y;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n#if defined(ANIMATE)\n  vec2 c = 0.85*cos(vec2(1.0, sqrt(0.5))*time);\n#else\n  vec2 c = 0.85*vec2(0.45, 0.35);\n#endif\n  \n  const float z = 1.0;\n  vec2 dp = p;\n  dp /= z;\n  float js = julia_map(dp, c); \n  float d = df(dp);\n  d *= js;\n  d -= 2.0*aa;\n  d *= z;\n  \n  vec3 col = vec3(0.0);\n  col = mix(col, vec3(0.75), smoothstep(aa, -aa, d));\n  col = sRGB(col);  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}