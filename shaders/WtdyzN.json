{
    "Shader": {
        "info": {
            "date": "1608593160",
            "description": "First exact SDF modelling execercise (aside from the easy ones: sphere, torus, plane ;) ).",
            "flags": 0,
            "hasliked": 0,
            "id": "WtdyzN",
            "likes": 5,
            "name": "Exact SDF Modelling Exercise #1",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "exercise",
                "exact",
                "revolved"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 420
        },
        "renderpass": [
            {
                "code": "float mapScene(in vec3 p) {\n    vec3 a = vec3(cos(iTime), 2.0 * sin(iTime), cos(iTime * 2.0)); // Opening of the tube\n    vec3 b = vec3(0.0, 0.0, 0.0); // Base of the tube\n\n    vec3 ba = a - b;\n    vec2 sp = vec2(atan(ba.z, ba.x), atan(ba.y, length(ba.xz)));\n    vec4 cs = vec4(cos(sp), sin(sp));\n\n    p -= b; // Translate to the base\n    p.xz *= mat2(cs.x, cs.z, -cs.z, cs.x); // Rotate to point along axis ba\n    p.xy *= mat2(cs.y, cs.w, -cs.w, cs.y);\n\n    vec2 size = vec2(cos(iTime) + 1.0, sin(iTime * 2.0) + 2.0); // radius, height\n    vec2 pr = vec2(length(p.yz), p.x); // Revolve the shape\n\n    // Can you spot those sneaky branches?\n    float tube = pr.y < 0.0 ? abs(length(pr) - size.x) : pr.y < size.y ? abs(abs(pr.x) - size.x) : length(abs(pr - vec2(0.0, size.y)) - vec2(size.x, 0.0));\n\n    return tube - 0.25 + 0.249 * sin(iTime);\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float dt = 0.0;\n    for (int iter=0; iter < 150; iter++) {\n        vec3 p = ro + rd * dt;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            fragColor.rgb += max(0.2, dot(n, l));\n\n            break;\n        }\n\n        if (dt > 10.0) {\n            break;\n        }\n\n        dt += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}