{
    "Shader": {
        "info": {
            "date": "1627351472",
            "description": "Quick Test to see how badly SDF CSG Operations + ellipsoid approximations bastardize the shape of north star combiner.\n\nI primarily focused on the reflecting surfaces; the outline/nose cutout aren't terribly accurate.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt2Xzm",
            "likes": 0,
            "name": "North Star Combiner SDF",
            "published": 3,
            "tags": [
                "sdf",
                "star",
                "combiner",
                "north"
            ],
            "usePreview": 0,
            "username": "zalo",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Forked from https://www.shadertoy.com/view/tdS3DG\n// Modelled to look like the North Star Combiner Optics\n\n#define AA 2   // make this 3 is you have a fast computer\n\n//------------------------------------------------------------------\n\n// generic ellipsoid - improved approximated distance\nfloat sdEllipsoid( in vec3 p, in vec3 r ) \n{\n    float  k0 = length(p/r);\n    float  k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n// prolate ellipsoid defined by two foci and the radius of the minor axis\nfloat sdEllipsoidFoci( in vec3 p, in vec3 f1, in vec3 f2, in float minorAxis ) \n{\n    // Calculate Major Axis\n    float halfLength    = length(f2 - f1) * 0.5;\n    float halfMinorAxis =       minorAxis * 0.5;\n    float halfMajorAxis     = sqrt((halfLength * halfLength) + (halfMinorAxis * halfMinorAxis));\n    vec3  r             = vec3(halfMajorAxis, halfMinorAxis, halfMinorAxis);\n    \n    // Calculate the input point in local space\n    mat3 rotation;\n    rotation[0] = normalize(f1 - f2); // Use Graham-Schmidt to hallucinate y, z bases\n    rotation[1] = normalize(cross(vec3(0,0,1), rotation[0])); // Twist about x doesn't matter  \n    rotation[2] = normalize(cross(rotation[0], rotation[1])); // because Minor Axes are symmetric\n    rotation    = transpose(rotation); // Transpose because GLSL indexes matrices funny\n    rotation    = inverse  (rotation); // Invert to reverse the rotation\n    vec3 localp = (p - ((f1 + f2) * 0.5)) * rotation;\n    \n    return sdEllipsoid(localp , r);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat opUnion       ( float d1, float d2 ) { return min( d1,d2); }\nfloat opSubtraction ( float d1, float d2 ) { return max(-d1,d2); }\nfloat opIntersection( float d1, float d2 ) { return max( d1,d2); }\n\nfloat approxNorthStarCombiner( vec3 p )\n{\n    vec3 lf1 = vec3(-0.02626856, 0.007116468, -0.03609176);\n    vec3 rf1 = vec3( 0.02626856, 0.007116468, -0.03609176);\n    vec3 lf2 = vec3(-0.2060344, 0.05526515, -0.07436727);\n    vec3 rf2 = vec3( 0.2060344, 0.05526515, -0.07436727);\n\n    // Outer and Inner Ellipsoid Surfaces\n    float d11 = sdEllipsoidFoci( p, lf1, lf2, 0.244949 ); // Inner Surfaces\n    float d12 = sdEllipsoidFoci( p, rf1, rf2, 0.244949 );\n    float d31 = d11 - 0.001; // Outer Surfaces\n    float d32 = d12 - 0.001;\n    float d1  = opUnion(d11, d12);\n    float d3  = opUnion(d31, d32);\n    \n    // Subtract inner (reflecting) surface from outer surface\n    d1 = opSubtraction (d1, d3); \n    \n    // Cut out the outer edges of the ellipsoids\n    d1 = opIntersection(d1, sdRoundBox( p + vec3(0.0, 0.015 , -0.11), vec3(0.08, 0.03, 0.075), 0.005 )); \n\n    // Cut out the nose sort of\n    d1 = opSubtraction(     sdRoundBox( p + vec3(0.0, 0.2  ,-0.15), vec3(0.00, 0.2  , 2   ), 0.01 ), d1);\n    \n    // Debug Spheres for Foci\n    //d1 = opUnion(d1, length(p - lf1) - 0.003 );\n    //d1 = opUnion(d1, length(p - lf2) - 0.003 );\n    //d1 = opUnion(d1, length(p - rf1) - 0.003 );\n    //d1 = opUnion(d1, length(p - rf2) - 0.003 );\n    \n    return d1;\n}\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 p, int id )\n{\n    // North Star Reflector\n    float d1 = approxNorthStarCombiner(p*0.2); // *0.2 scales it up 5x so it's easier to see\n\n    // Ground Plane\n    float d2 = p.y+0.3;\n    \n    return (d1<d2) ? vec2(d1,1.0) : vec2(d2,2.0);\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, int id )\n{\n    float m = 0.0;\n    float t = 0.0;\n    const float tmax = 100.0;\n    for( int i=0; i<200 && t<tmax; i++ )\n    {\n\t    vec2 h = map( ro+rd*t, id );\n        if( h.x<0.001 ) break;\n        m = h.y;\n        t += h.x;\n    }\n\n    return (t<tmax) ? vec2(t,m) : vec2(0.0);\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in int id)\n{\n\tfloat res = 1.0;\n    float t = 0.01;\n    for( int i=0; i<256; i++ )\n    {\n\t\tfloat h = map( ro + rd*t, id ).x;\n        res = min( res, smoothstep(0.0,1.0,8.0*h/t ));\n        t += clamp( h, 0.005, 0.02 );\n        if( res<0.001 || t>5.0 ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, in int id )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy, id ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx, id ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy, id ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx, id ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, in int id )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos, id).x;\n        occ += (hr-dd)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );    \n}\n \n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd, int id )\n{ \n    vec3 col = vec3(0.0);\n    \n    vec2  res = castRay(ro,rd, id);\n\n    if( res.y>0.5 )\n    {\n        float t   = res.x;\n        vec3  pos = ro + t*rd;\n        vec3  nor;\n        float occ;\n\n        // material        \n        if( res.y>1.5 )\n        {\n        \tnor = vec3(0.0,1.0,0.0);\n            col = 0.05*vec3(1.0);\n            col *= 0.7+0.3*checkersGradBox( pos.xz*2.0 );\n            occ = 1.0;\n\n        }\n        else\n        {\n            nor = calcNormal( pos, id );\n            occ = 0.5+0.5*nor.y;\n            col = vec3(0.2);\n        }\n\n        // lighting\n        occ *= calcAO( pos, nor, id );\n\n        vec3  lig = normalize( vec3(-0.5, 1.9, 0.8) );\n        vec3  hal = normalize( lig-rd );\n        float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\n        float sha = calcSoftshadow( pos, lig, id );\n        sha = sha*sha;\n\n        float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),32.0)*\n                    dif * sha *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n        //vec3 lin = vec3(0.0);\n        //lin += 2.00*dif*vec3(3.30,2.50,2.00)*sha;\n        //lin += 0.50*amb*vec3(0.30,0.60,1.50)*occ;\n        //lin += 0.30*bac*vec3(0.40,0.30,0.25)*occ;\n        //col = col*lin;\n        //col += 2.00*spe*vec3(3.30,2.50,2.00);\n        \n        col *= 5.0;\n        col *= vec3(0.2,0.3,0.4)*amb*occ + 1.6*vec3(1.0,0.9,0.75)*dif*sha;\n        col += vec3(2.8,2.2,1.8)*spe*3.0;            \n\n\n        \n        //col = mix( col, vec3(0.1), 1.0-exp(-0.03*t) );\n    }\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera\t\n    vec3 ro = vec3( 1.0*cos(0.8*iTime), 0.12, 1.0*sin(0.8*iTime) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera-to-world transformation\n    vec3 cw = normalize(ta-ro);\n    vec3 cu = normalize( cross(cw,vec3(0.0, 1.0,0.0)) );\n    vec3 cv =          ( cross(cu,cw) );\n\n    // scene selection\n    int id = 0;\n\n    // render\n    vec3 tot = vec3(0.0);\n\t#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 fc = o + vec2( fragCoord.x, fragCoord.y);\n\t\t#else    \n        vec2 fc = vec2( fragCoord.x, fragCoord.y);\n\t\t#endif\n        vec2 p = (-vec2(iResolution.x,iResolution.y) + 2.0*fc)/iResolution.y;\n\n        // ray direction\n        vec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n        // render\t\n        vec3 col = render( ro, rd, id );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n\t#if AA>1\n    }\n    tot /= float(AA*AA);\n\t#endif\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}