{
    "Shader": {
        "info": {
            "date": "1590684342",
            "description": "Worley Noise 3D",
            "flags": 0,
            "hasliked": 0,
            "id": "WdSfDy",
            "likes": 6,
            "name": "WorleyNoise3D",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "im_sky",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nfloat GetIntegerNoise(vec2 p)  // replace this by something better, p is essentially ivec2\n{\n    p  = 53.7 * fract( (p*0.3183099) + vec2(0.71,0.113));\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat Hash(float f)\n{\n    return fract(sin(f)*43758.5453);\n}\n\nfloat Hash21(vec2 v)\n{\n    return Hash(dot(v, vec2(253.14, 453.74)));\n}\n\nfloat Hash31(vec3 v)\n{\n    return Hash(dot(v, vec3(253.14, 453.74, 183.3)));\n}\n\nvec3 Random3D( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1,311.7,217.3)),dot(p,vec3(269.5,183.3,431.1)), dot(p,vec3(365.6,749.9,323.7))))*437158.5453);\n}\n\nvec2 Rotate2D(vec2 v, float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    \n    mat2 rotMat = mat2(c,s,-s,c);\n    return rotMat * v;\n}\n\nvec4 GetWorleyNoise3D(vec3 uvw)\n{\n    float noise = 0.0;\n    \n    vec3 p = floor(uvw);\n    vec3 f = fract(uvw);\n    \n    vec4 res = vec4(1.0);\n    for(int x = -1; x <=1; ++x)\n    {\n        for(int y = -1; y <=1; ++y)\n        {\n            for(int z = -1; z <=1; ++z)\n            {\n                vec3 gp = p + vec3(x, y, z);\t//grid point\n\n                vec3 v = Random3D(gp);\n\n\t\t\t\tvec3 diff = gp + v - uvw;\n                \n                float d = length(diff);\n                \n                if(d < res.x)\n                {\n                    res.xyz = vec3(d, res.x, res.y);\n                }\n                else if(d < res.y)\n                {\n                    res.xyz = vec3(res.x, d, res.y);\n                }\n                else if(d < res.z)\n                {\n                    res.z = d;\n                }\n                \n                res.w = Hash31(gp);\n            }\n        }\n    }\n\n    return res;\n}\n\nfloat fBMWorley(vec3 x, float lacunarity, float gain, int numOctaves)\n{\n    float total = 0.0;\n    float frequency = 1.0;\n    float amplitude = 1.0;\n\tfloat totalAmplitude = 0.0;\n    for(int i = 0; i < numOctaves; ++i)\n    {\n        totalAmplitude += amplitude;\n        \n        vec4 n = GetWorleyNoise3D(x * frequency);\n        total += amplitude * n.x;\n        \n        frequency *= lacunarity;\n        amplitude *= gain;\n    }\n    \n    return total/totalAmplitude;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    uv *= 3.0;\n    vec3 uvw = vec3(uv, iTime * 0.1);\n    \n    //uv *= 0.5*(sin(iTime * 2.0) + 5.0) * 2.40;\n\n\tfloat noise = fBMWorley(uvw, 2.0, 0.5, 4);\n    //noise += GetWorleyNoise3D(uvw * 2.0) * 0.5;\n\n    vec3 color = noise * vec3(1.0);\n    fragColor = vec4(1.0 - color, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}