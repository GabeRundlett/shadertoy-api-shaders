{
    "Shader": {
        "info": {
            "date": "1586669845",
            "description": "It's Easter, it's an egg, it's projective.",
            "flags": 48,
            "hasliked": 0,
            "id": "ws2yWz",
            "likes": 4,
            "name": "Projective Easter Egg",
            "published": 3,
            "tags": [
                "egg",
                "projective",
                "easter"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Projective Easter Egg\n// Matthew Arcus, mla, 2020.\n//\n// Mouse, <up> and <down> to move around\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec3 lightdir = vec3(0,2,1);\n\nfloat PI = 3.14159;\n\nfloat segment(vec3 p, vec3 q, vec3 r) {\n  // Rebase to origin at q  \n  p -= q; r -= q;\n  // t*r is orthogonal projection of p onto qr.\n  float t = clamp(dot(p,r)/dot(r,r), 0.0, 1.0);\n  return distance(p,t*r);\n}\n\nfloat scene(vec3 p, out int type) {\n  p = abs(p);\n  if (p.x < p.y) p.xy = p.yx;\n  if (p.y < p.z) p.yz = p.zy;\n  if (p.x < p.y) p.xy = p.yx;\n  float d = 1e8,d1;\n  d1 = length(p)-1.0;\n  if (d1 < d) { d = d1; type = 0; }\n  d1 = segment(p,vec3(1,1,1),vec3(1,1,-1))-0.1;\n  if (d1 < d) { d = d1; type = 1; }\n  d1 = distance(p,vec3(1,1,1))-0.2;\n  if (d1 < d) { d = d1; type = 2; }\n  return d;\n}\n\nfloat de(vec4 p) {\n  p /= p.w;\n  float t = length(p.xyz);\n  // This gets rid of \"line at infinity\", which otherwise shrinks\n  // all distances to 0.\n  if (t > 100.0) p.xyz *= 100.0/t;\n  int type;\n  return scene(p.xyz,type);\n}\n\nvec4 grad(vec4 p) {\n  // 4 dimensional gradient of distance field\n  // First order seems to be OK for our purposes -\n  // just want to scale the distance field.\n  float eps = 1.0/256.0;\n  vec2 e = vec2(eps, 0.0);\n  float t = de(p);\n  return vec4(de(p + e.xyyy) - t,\n              de(p + e.yxyy) - t,\n              de(p + e.yyxy) - t,\n              de(p + e.yyyx) - t)/eps;\n}\n\nmat4 A = mat4(0.8,0,0,0,\n              0,1,0,0,\n              0,0,1,0,\n              0,0,0,1);\n\nfloat eyesign = 1.0; // Sign of distance field at eye.\n\nfloat eval(vec4 p) {\n  p = A*p;\n  float d = de(p);\n  vec3 g = transpose(mat3x4(A))*grad(p);\n  d /= length(g);\n  return eyesign*d;\n}\n\nfloat eval(vec3 p) {\n  return eval(vec4(p,1));\n}\n\nvec3 getnormal(vec3 p) {\n  float eps = 0.0125;\n  vec2 e = vec2(eps, 0.0);\n  return normalize(vec3(eval(p + e.xyy) - eval(p - e.xyy),\n                        eval(p + e.yxy) - eval(p - e.yxy),\n                        eval(p + e.yyx) - eval(p - e.yyx)));\n}\n\nfloat maxdist = 10.0;\nfloat fogdist = 4.0;\nfloat march(vec3 q, vec3 r) {\n  float t = 0.1;\n  int numsteps = 200;\n  float precis = 1e-3;\n  for (int i = 0; i < numsteps; i++) {\n    vec3 p = q+t*r;\n    float d = eval(p);\n    if (abs(d) < precis) return t;\n    t += min(0.5,0.8*d);\n    if (t < 0.0 || t > maxdist) break;\n  }\n  return -1.0;\n}\n\nvec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 getcolor(vec3 p) {\n  int type;\n  vec4 p4 = A*vec4(p,1);\n  p = p4.xyz/p4.w;\n  scene(p,type);\n  if (type == 0) {\n    float phi = atan(p.x/length(p.yz)); //[-PI/2..+PI/2]\n    float rho = atan(p.y,p.z);\n    vec3 color = hsv2rgb(vec3(0.3+0.4*(0.5+phi/PI),1,1));\n    //vec3 color = hsv2rgb(vec3(0.5+phi/PI,1,1));\n    color *= 0.5+0.5*cos(32.0*phi+rho);\n    return color;\n  } else if (type == 1) {\n    return vec3(0.02);\n  } else if (type == 2) {\n    return 0.5*vec3(1,0.75,0);\n  } else {\n    return vec3(0,1,1);\n  }\n}\n\nvoid init() {\n  float time = 0.5*iTime;\n  A *= mat4(cos(time),0,0,sin(time),\n            0,1,0,0,\n            0,0,1,0,\n            -sin(time),0,0,cos(time));\n  A *= mat4(1,0,0,0,\n            0,cos(time),sin(time),0,\n            0,-sin(time),cos(time),0,\n            0,0,0,1);\n}\n\nvec3 background = vec3(0,0,0.01);\n\nvec3 raycolor(vec3 q, vec3 r) {\n  float t = march(q,r);\n  if (t < 0.0) return background;\n  vec3 p = q+t*r;\n  vec3 normal = getnormal(p);\n  if (dot(normal,r) > 0.0) normal = vec3(0);\n  vec3 color = getcolor(p);\n  vec3 speccolor = color;\n  float ambient = 0.5;\n  float diffuse = 0.3*clamp(dot(normal,lightdir),0.0,1.0);\n  color *= ambient+diffuse;\n  float specular = pow(max(0.0,dot(reflect(lightdir,normal),r)),10.0);\n  color += 0.8*specular*speccolor;\n  color = mix(color,background,clamp((t-fogdist)/(maxdist-fogdist),0.0,1.0));\n  return color;\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 rotateframe(vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  {\n    float t = 0.0; // iTime;\n    p.yz = rotate(p.yz,0.5+t*0.125);\n    p.zx = rotate(p.zx,0.5+t*0.1);\n  }\n  return p;\n}\n\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n  init();\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  float eyedist = 4.0;\n  eyedist *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  fogdist = eyedist;\n  maxdist = 2.0*eyedist;\n  vec3 eye = vec3(0,0,eyedist);\n  vec3 ray = vec3(z,-2);\n  eye = rotateframe(eye);\n  eyesign = sign(eval(eye));\n  ray = rotateframe(ray);\n  ray = normalize(ray);\n  lightdir = rotateframe(lightdir);\n  lightdir = normalize(lightdir);\n  vec3 col = raycolor(eye,ray);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}