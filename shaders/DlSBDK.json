{
    "Shader": {
        "info": {
            "date": "1694471741",
            "description": "A fractal rug pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "DlSBDK",
            "likes": 4,
            "name": "Red and green rug (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    bool b = uv.y>uv.x;\n    for(int k = 0; k < 6; k++){\n        \n        //uv.y -= t1_(floor(uv),floor(uv));\n\n        \n        t2 =\n            -triangle_wave(uv-.5)\n        ;\n        \n        uv =\n            t2-triangle_wave(uv.yx)\n        ;\n        \n        \n        \n        \n        uv =\n            //abs(.5+uv/1.5+t2)\n            abs(.5+uv+t2/1.5)\n            //abs(.5+uv+t2)/1.5\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*2.)-.5)/2.;\n        \n        \n        \n        b =\n            uv.y>uv.x\n            //uv.y>uv.x || t2.y<t2.x\n        ;\n        if(b) uv = uv.yx;\n        col =\n            vec3(col.zx,max(uv.x-uv.y,0.))\n        ;\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //a += floor(a/(2.+b*b*4.));\n    //a += (abs(mod(a,3.)-mod(a,5.)));\n    a += mod(-b/2.,2.);\n    return\n        floor(mod(mod(floor(a/2.)*5.,b)*mod(floor(a/2.)*3.,b),b))\n        //floor(mod(floor(a)*1.5,b))\n    ;\n}\n\nfloat prime_rhythm(float time){\n    return (1.+fmod(time/5.,2.))/(1.+fmod(time/3.,2.));\n}\n\nvec2 mainSound(int samp, float time){\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time)\n  ,\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod(t4,2.),\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6,s1/2.)/2.),\n  m2 =\n      1. + fmod(t/t3/2.,s1/2.),\n  a=\n      (1.-log(fract(t/2./prime_rhythm(time+14.))/2.))*(1.-log(fract(t/prime_rhythm(time+7.))/4.)),\n  nb =\n      t*pow(2.,(m3+m2-t1*4.)/7.+7.5)*tempo1/2.\n  ;\n  return\n      log(abs(.5-vec2(fract(nb*.998),fract(nb)))*a)\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}