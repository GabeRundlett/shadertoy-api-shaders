{
    "Shader": {
        "info": {
            "date": "1450312343",
            "description": "MegaWave ,3",
            "flags": 0,
            "hasliked": 0,
            "id": "4sc3zS",
            "likes": 11,
            "name": "MegaWave 3",
            "published": 3,
            "tags": [
                "3",
                "megawave"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 757
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst vec3 ligthDir = vec3(0.,1., 0.5);\n\nvec4 pattern(vec3 p)\n{\n\tvec2 uv = p.xz/2.;\n\tuv = vec2(length(uv)) - vec2(mod(iTime, 10.)*.1,0);\n\tvec4 tex = texture(iChannel1, uv, -2.2);\n\tfloat dist = dot(tex, vec4(0.01));\n\treturn vec4(dist, tex.rgb); \n}\n\nvec3 path(vec3 p)\n{\n\tp.y = p.y * 3. - 10. + cos(p.x/3.8) *4. + sin(p.z/3.8)*4.;\n    p.y -= texture(iChannel2, p.xz*0.03).x * 5. * sin(iTime * .5);\n\tp.x = cos(p.x*1.2)*4.;\n\tp.z = sin(p.z*1.2)*4.;\n\treturn p;\n}\n\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\n\nvec4 df(vec3 p)\n{\n\tvec3 q = path(p);\n    vec4 pat = pattern(q);\n    float y = 1. - smoothstep(0., 1., pat.x) * 3.;\n\tfloat dist = obox(q, vec3(6,1.-y,6));\n    return vec4(dist, pat.yzw);\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy).x - df(p-e.xyy).x,\n\t\tdf(p+e.yxy).x - df(p-e.yxy).x,\n\t\tdf(p+e.yyx).x - df(p-e.yyx).x );\n    return normalize(n);\n}\n\n//--------------------------------------------------------------------------\n// Grab all sky information for a given ray from camera\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(.32, .32, .32), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tfragColor = vec4(0);\n\t\n\tvec2 si = iResolution.xy;\n    \n\tvec2 uv = (2.*fragCoord-si)/min(si.x, si.y);\n\t\n\tvec3 rayOrg = vec3(0,1,iTime)*5.;\n\tvec3 camUp = vec3(0,1,0);\n\tvec3 camOrg = rayOrg + vec3(0,0,.1);\n\t\n\tfloat fov = .5;\n\tvec3 axisZ = normalize(camOrg - rayOrg);\n\tvec3 axisX = normalize(cross(camUp, axisZ));\n\tvec3 axisY = normalize(cross(axisZ, axisX));\n\tvec3 rayDir = normalize(axisZ + fov * uv.x * axisX + fov * uv.y * axisY);\n\t\n    float dMax = 80.;\n\tfloat sMin = .0001;\n\t\n\tvec4 s = vec4(sMin);\n\tfloat d = 0.;\n\tvec3 p = rayOrg;\n\t\n\tfor (float i=0.; i<150.; i++)\n\t{\n\t\tif (s.x < sMin || d > dMax) break;\n\t\ts = df(p);\n\t\td += s.x * (s.x > .1 ? .2 : .01);\n\t\tp = rayOrg + rayDir * d;\t\n\t}\n\t\n    if (d<dMax)\n\t{\n\t\tvec3 n = nor(p, .05);\n\t\tvec3 reflRay = reflect(rayDir, n);\n        vec3 cubeRefl = texture(iChannel0, reflRay).rgb * .45;\n\t\tfragColor.rgb = cubeRefl + pow(.35, 15.);\n\t\tfragColor.rgb = mix( fragColor.rgb, vec3(.8,.9,1), 1.-exp( -0.0008*d*d ) );\n       \tfragColor.rgb = mix(fragColor.rgb, s.yzw, .5);\n\t}\n\telse\n\t{\n\t\tfragColor.rgb = GetSky(rayDir, ligthDir, vec3(4.));\n\t}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}