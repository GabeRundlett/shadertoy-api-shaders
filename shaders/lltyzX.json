{
    "Shader": {
        "info": {
            "date": "1533515066",
            "description": "first raymarching test",
            "flags": 0,
            "hasliked": 0,
            "id": "lltyzX",
            "likes": 3,
            "name": "cubelattice",
            "published": 3,
            "tags": [
                "raymarch",
                "cube"
            ],
            "usePreview": 0,
            "username": "Harha",
            "viewed": 720
        },
        "renderpass": [
            {
                "code": "/**\n * Started from: https://www.youtube.com/watch?v=yxNnRSefK94\n * \n * Just a quick GLSL/Raymarching experiment.\n *\n **/\n\n#define GRID_CELL_SIZE 3.0\n#define GRID_SIZE (GRID_CELL_SIZE + 1.0)\n#define GRID_MOD (GRID_SIZE * 2.0)\n\nfloat map(vec3 p)\n{\n\tfloat t1 = iTime * 0.5;\n\tp.x += sin(p.y) * 0.2;\n\tp.y += sin(p.x) * 0.2;\n\tvec3 q = fract(p) * 2.0 - 1.0;\n\tq = clamp(q, -0.33, 0.33);\n\treturn length(q) - 0.33;\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n\tfloat t = 0.0;\n\tfor (int i = 0; i < 32; ++i)\n\t{\n\t\tvec3 p = o + r * t;\n\t\tfloat d = map(p);\n\t\tt += d * 0.5;\n\t}\n\t\n\treturn t;\n}\n\nbool circle(in float r, in vec2 o, in vec2 v)\n{\n    return (length(o - v) <= r) ? true : false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy;\n\n\tbool in_circle = circle(GRID_CELL_SIZE, uv - mod(uv, GRID_MOD) + vec2(GRID_SIZE), uv);\n\n\tvec3 color = vec3(0.0, 0.0, 0.0);\n\tif (in_circle)\n\t{\n\t\tuv /= iResolution.xy;\n\t\tuv = uv * 2.0 - 1.0;\n\t\tuv.x *= iResolution.x / iResolution.y;\n\n\t\tvec3 r = normalize(vec3(uv, 1.0));\n\t\t\n\t\tfloat the1 = sin(iTime * 0.1) * 5.0;\n\t\tfloat the2 = iTime * 0.25;\n\t\tr.xz *= mat2(cos(the1), -sin(the1), sin(the1), cos(the1));\n\t\tr.xy *= mat2(cos(the2), -sin(the2), sin(the2), cos(the2));\n\n\t\tfloat t1 = iTime * 0.5;\n\t\tvec3 o = vec3(cos(t1), sin(t1), 0.0);\n\t\t\n\t\tfloat t = trace(o, r);\n\t\t\n\t\tfloat fog = 1.0 / (1.0 + t * t * 0.25);\n\t\t\n\t\tr = sin(r + iTime * 2.5);\n\t\tr *= 0.5;\n\t\tr += 1.0;\n\t\tcolor = vec3(fog) * vec3(r.x, r.y, r.z);\n\t}\n\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}