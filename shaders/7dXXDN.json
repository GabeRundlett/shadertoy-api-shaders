{
    "Shader": {
        "info": {
            "date": "1618649101",
            "description": "good approximation of erf function  ( light green )\nred: gaussian    blue: derivative of erf: ultra close.\n\nnot so bad approx of reciprocal (cyan) derived from not so bad approx of erf ( dark green )\ngrey:  Ierf(erf(x))   dark-red: y=x : ultra-close.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXXDN",
            "likes": 7,
            "name": "erf(x) & erf⁻¹(x)",
            "published": 3,
            "tags": [
                "normal",
                "plot",
                "gauss",
                "erf",
                "reciprocal"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 652
        },
        "renderpass": [
            {
                "code": "#define P  ( sqrt(3.14159265359)/2. )\n\nfloat erf(float x) {                        // very good approx https://en.wikipedia.org/wiki/Error_function\n    float e = exp(-x*x);                    // ( Bürmann series )\n    return sign(x)/P * sqrt( 1. - e ) * ( P + 31./200.*e - 341./8000. *e*e );\n}\n\n#define erf0(x)     tanh(1.2*(x))           // not so bad approx, with easy reciprocal\n#define Ierf(x) ( atanh(x) / 1.2 )          // not so bad reciprocal\n\n#define gauss(x,s)    exp(-.5*(x)*(x) / ((s)*(s)) )\n\n#define plot(v)     clamp( 1.- abs(v-y) / fwidth(v-y) , 0.,1.)\n\n#define deriv(f)   ( ( f(x) - f(x-1e-3) ) /1e-3 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) /R.y;\n    float x = U.x, y = U.y, v;\n    \n    O.g = plot( erf(x) );                   // erf\n    O.b = plot( P * deriv(erf) );           // derivative of erf\n    O.r = plot( gauss( x, 1./sqrt(2.)) );   // gaussian, for comparison\n    \n    O.g  += .3* plot( erf0(x) );            // lesser approx of erf\n    O.gb += .8* plot( Ierf(x) );            // reciprocal\n    O    += .5* plot( Ierf(erf(x)) );       // erf⁻¹(erf)\n    O.r  += .5*plot( x );                   // y=x, for comparison\n    \n    O += plot(0.);\n    O = sqrt(O);                            // to sRGB\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}