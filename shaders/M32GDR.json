{
    "Shader": {
        "info": {
            "date": "1708387456",
            "description": "a way to generate a field of roundish circles\n",
            "flags": 0,
            "hasliked": 0,
            "id": "M32GDR",
            "likes": 3,
            "name": "color dots",
            "published": 3,
            "tags": [
                "colordots"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718\n\nvec2 waves (in float x) {\n    vec2 a = fract(x+vec2(0.,0.5)) - 0.5;\n    return (abs(a) - a*a)*8. - 1.; // -1 -> 1\n}\n\nvec2 steps (in float x) {\n    vec2 a = mod(x+vec2(0.5,0.),2.);\n    return max(floor(a),vec2(0.)); // 0 or 1\n}\n\n//inspiration from https://www.shadertoy.com/view/ftySRt by oneshade\n//the sin value at the end was replaced with a homebrew oscillating function with two results\n//once everyting is added, we get a nice field of circles (visible with a step function) !\n\nvec2 getVal( in vec2 p, in float n, in float offset ) {\n    \n    vec2 light = vec2(0.);\n    vec2 id    = vec2(0.);\n\n    float size = 0.5;\n    for (float a = 0.; a < TAU; a += TAU / n) {\n        \n        vec2 dir = vec2(cos(a),sin(a));\n        \n        float d = dot(p, dir) + offset;\n        \n        light += waves( d );\n        id    += steps( d ) * size;\n        \n        size *= 0.5;\n\n    }\n\n    light /= ceil(n);\n    \n    return (light.x > light.y) ?  vec2(light.x,id.x) : vec2(light.y,id.y);\n    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 m  = iMouse.xy/iResolution.xy;\n    vec2 uv = (fragCoord-0.5 - 0.5*iResolution.xy) / iResolution.y + iTime*0.05;\n\n    uv *= 15.;\n\n    /////\n        \n    float n = (m.x == 0.) ? 8.765 : 3. + m.x*8.;\n    float offset = iTime*0.05;\n\n    vec2 val = getVal( uv, n, offset );  \n    \n    // we obtain the circle shapes from the raw distance value\n    float val2 = smoothstep(0.5, 0.525, val.x );\n    \n    // hue to rgb (from iq) from the \"id\" value\n    vec3 rgb = clamp( abs(mod(val.y*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    \n    fragColor = vec4( rgb*val2,  1.);\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}