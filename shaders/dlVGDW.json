{
    "Shader": {
        "info": {
            "date": "1684049449",
            "description": "mouse.x vs .y  controls the 2 turns parameters",
            "flags": 0,
            "hasliked": 0,
            "id": "dlVGDW",
            "likes": 29,
            "name": "generalized solenoid",
            "published": 3,
            "tags": [
                "spiral",
                "ring"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/ctyGWD\n\n#define rot2(a)      mat2(cos(a+vec4(0,11,33,0)))\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,r;\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -12.*R.y) - R),        // ray direction\n          p = vec3(0,0,15), q, a,                        // marching point along ray \n          C = // iMouse.z > 0. ? 6.*iMouse.xyz/R -3. :   // camera control\n                vec3( 1,-.5,0),\n            //  vec3( 1,.5,0) * cos(.3*iTime + vec3(0,11,0)),\n          S = ceil(20.* ( iMouse.z > 0. ? iMouse.xyz/R : // control of the turns amount\n                                         .5+.5*vec3(sin(iTime),cos(iTime/1.7),0)\n                  )     );\n\n    \n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.01 )       // march scene\n        q = p, \n        q.yz *= rot2(-C.y),                              // rotations\n        q.xz *= rot2(-C.x-1.57),\n        q = vec3( length(q.xz)-1., q.y, atan(q.z,q.x)-.5*iTime ), // cylindrical coordinates\n        q = vec3( length(q.xy), atan(q.y,q.x), q.z ),    // torus coordinates\n      //a = cos(q.z -iTime + vec3(0,11,0)), q.z += .5*iTime, // time modulators: radius, angle\n      //q.x -= .2*(.5+.5*a.x), q.z += .5*a.y,            // time modulation\n        t = min(t, length( vec2(q.x-.2, ( mod(S.x*q.z-S.y*q.y,6.28)-3.14 ) /16. ) // soleno√Ød\n                         ) - .05 ),\n        p += .5*t*D;                                     // step forward = dist to obj    \n    \n   O *= O*O*O*1.6;                                       // color scheme \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}