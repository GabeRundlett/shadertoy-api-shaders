{
    "Shader": {
        "info": {
            "date": "1588206204",
            "description": "https://www.youtube.com/watch?v=dKA5ZVALOhs\nhttps://www.youtube.com/watch?v=PBxuVlp7nuM",
            "flags": 0,
            "hasliked": 0,
            "id": "WsfBW4",
            "likes": 2,
            "name": "Tutorial point cube",
            "published": 3,
            "tags": [
                "3d",
                "tutorial"
            ],
            "usePreview": 0,
            "username": "CraftedCart",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "const vec3 WORLD_UP = vec3(0.0, 1.0, 0.0);\nconst vec3 VIEW_TARGET = vec3(0.0, 0.0, 0.0);\nconst float ZOOM_FAC = 2.0;\n\n/** Returns how far away `point` is from the ray line */\nfloat distLine(vec3 rayOrigin, vec3 rayDir, vec3 point) {\n    return length(cross(point - rayOrigin, rayDir)) / length(rayDir);\n}\n\nfloat drawPoint(vec3 rayOrigin, vec3 rayDir, vec3 point) {\n    return smoothstep(0.06, 0.05, distLine(rayOrigin, rayDir, point));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n\n    uv -= 0.5; // Move the origin to the middle of the screen\n    uv.x *= ratio; // Account for the aspect ratio\n\n    vec3 rayOrigin = vec3(cos(iTime) * 4.0, sin(iTime) * 4.0, sin(iTime) * 4.0); // Camera position\n\n    vec3 camForward = normalize(VIEW_TARGET - rayOrigin);\n    vec3 camRight = normalize(cross(WORLD_UP, camForward));\n    vec3 camUp = cross(camForward, camRight);\n\n    vec3 screenCenter = rayOrigin + camForward * ZOOM_FAC; // Figure out where the center of the screen is in 3D space\n    vec3 intersectPoint = screenCenter + (uv.x * camRight) + (uv.y * camUp);\n\n    vec3 rayDir = intersectPoint - rayOrigin;\n\n    // Make a color shifting gradient\n    vec3 col = 0.5 + 0.5 * cos((iTime * 0.8) + uv.xyx + vec3(0.0, 2.0, 4.0));\n\n    float mask = 0.0;\n\n    // Add points of a cube\n    // mask += drawPoint(rayOrigin, rayDir, vec3(-0.5, -0.5, -0.5));\n    // mask += drawPoint(rayOrigin, rayDir, vec3(-0.5, -0.5,  0.5));\n    // mask += drawPoint(rayOrigin, rayDir, vec3(-0.5,  0.5, -0.5));\n    // mask += drawPoint(rayOrigin, rayDir, vec3(-0.5,  0.5,  0.5));\n    // mask += drawPoint(rayOrigin, rayDir, vec3( 0.5, -0.5, -0.5));\n    // mask += drawPoint(rayOrigin, rayDir, vec3( 0.5, -0.5,  0.5));\n    // mask += drawPoint(rayOrigin, rayDir, vec3( 0.5,  0.5, -0.5));\n    // mask += drawPoint(rayOrigin, rayDir, vec3( 0.5,  0.5,  0.5));\n\n    // Add \"lines\" (composed of many points) of a cube\n    for (float x = -0.5; x < 0.5; x += 0.05) {\n        mask += drawPoint(rayOrigin, rayDir, vec3(x, -0.5, -0.5));\n        mask += drawPoint(rayOrigin, rayDir, vec3(x,  0.5, -0.5));\n        mask += drawPoint(rayOrigin, rayDir, vec3(x, -0.5,  0.5));\n        mask += drawPoint(rayOrigin, rayDir, vec3(x,  0.5,  0.5));\n    }\n\n    for (float y = -0.5; y < 0.5; y += 0.05) {\n        mask += drawPoint(rayOrigin, rayDir, vec3(-0.5, y, -0.5));\n        mask += drawPoint(rayOrigin, rayDir, vec3( 0.5, y, -0.5));\n        mask += drawPoint(rayOrigin, rayDir, vec3(-0.5, y,  0.5));\n        mask += drawPoint(rayOrigin, rayDir, vec3( 0.5, y,  0.5));\n    }\n\n    for (float z = -0.5; z < 0.5; z += 0.05) {\n        mask += drawPoint(rayOrigin, rayDir, vec3(-0.5, -0.5, z));\n        mask += drawPoint(rayOrigin, rayDir, vec3( 0.5, -0.5, z));\n        mask += drawPoint(rayOrigin, rayDir, vec3(-0.5,  0.5, z));\n        mask += drawPoint(rayOrigin, rayDir, vec3( 0.5,  0.5, z));\n    }\n\n    col *= (min(mask, 1.0) * 0.8) + 0.2;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}