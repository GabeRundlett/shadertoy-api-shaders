{
    "Shader": {
        "info": {
            "date": "1613755778",
            "description": "A simple ray marching shader for shading clouds.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyfzz",
            "likes": 1,
            "name": "Volumetric Ray Marched Clouds",
            "published": 3,
            "tags": [
                "raymarchingvolumetricclouds"
            ],
            "usePreview": 0,
            "username": "ArenaGrenade",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "#define PI 3.142\n\n// Worley Noise Code from https://www.shadertoy.com/view/MstGRl\n#define CELL_COUNT 10.0\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec2 get_cell_point(ivec2 cell) {\n\tvec2 cell_base = vec2(cell) / CELL_COUNT;\n\tfloat noise_x = rand(vec2(cell));\n    float noise_y = rand(vec2(cell.yx));\n    return cell_base + (0.5 + 1.5 * vec2(noise_x, noise_y)) / CELL_COUNT;\n}\nfloat worley(vec2 coord) {\n    ivec2 cell = ivec2(coord * CELL_COUNT);\n    float dist = 1.0;\n    \n    for (int x = 0; x < 5; x++) { \n        for (int y = 0; y < 5; y++) {\n        \tvec2 cell_point = get_cell_point(cell + ivec2(x-2, y-2));\n            dist = min(dist, distance(cell_point, coord));\n\n        }\n    }\n    \n    dist /= length(vec2(1.0 / CELL_COUNT));\n    dist = 1.0 - dist;\n    return dist;\n}\n\n// Perlin Noise Function\nconst int firstOctave = 3;\nconst int octaves = 8;\nconst float persistence = 0.8;\n\n//Not able to use bit operator like <<, so use alternative noise function from YoYo\n//\n//https://www.shadertoy.com/view/Mls3RS\n//\n//And it is a better realization I think\nfloat noise(int x,int y)\n{   \n    float fx = float(x);\n    float fy = float(y);\n    \n    return 2.0 * fract(sin(dot(vec2(fx, fy) ,vec2(12.9898,78.233))) * 43758.5453) - 1.0;\n}\n\nfloat smoothNoise(int x,int y)\n{\n    return noise(x,y)/4.0+(noise(x+1,y)+noise(x-1,y)+noise(x,y+1)+noise(x,y-1))/8.0+(noise(x+1,y+1)+noise(x+1,y-1)+noise(x-1,y+1)+noise(x-1,y-1))/16.0;\n}\n\nfloat COSInterpolation(float x,float y,float n)\n{\n    float r = n*3.1415926;\n    float f = (1.0-cos(r))*0.5;\n    return x*(1.0-f)+y*f;\n    \n}\n\nfloat InterpolationNoise(float x, float y)\n{\n    int ix = int(x);\n    int iy = int(y);\n    float fracx = x-float(int(x));\n    float fracy = y-float(int(y));\n    \n    float v1 = smoothNoise(ix,iy);\n    float v2 = smoothNoise(ix+1,iy);\n    float v3 = smoothNoise(ix,iy+1);\n    float v4 = smoothNoise(ix+1,iy+1);\n    \n   \tfloat i1 = COSInterpolation(v1,v2,fracx);\n    float i2 = COSInterpolation(v3,v4,fracx);\n    \n    return COSInterpolation(i1,i2,fracy);\n    \n}\n\nfloat PerlinNoise2D(float x,float y)\n{\n    float sum = 0.0;\n    float frequency =0.0;\n    float amplitude = 0.0;\n    for(int i=firstOctave;i<octaves + firstOctave;i++)\n    {\n        frequency = pow(2.0,float(i));\n        amplitude = pow(persistence,float(i));\n        sum = sum + InterpolationNoise(x*frequency,y*frequency)*amplitude;\n    }\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    float perlin_noise = 0.1 + 0.9 * PerlinNoise2D(uv.x, uv.y);\n    float worley_noise = worley(uv);\n    fragColor = vec4(worley_noise / 2.0 + perlin_noise / 2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}