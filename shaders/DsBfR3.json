{
    "Shader": {
        "info": {
            "date": "1689923755",
            "description": "waves camera version 2",
            "flags": 0,
            "hasliked": 0,
            "id": "DsBfR3",
            "likes": 0,
            "name": "waves camera version 2",
            "published": 3,
            "tags": [
                "wavescameraversion2"
            ],
            "usePreview": 0,
            "username": "tianluo970922",
            "viewed": 132
        },
        "renderpass": [
            {
                "code": "\n// Redefine below to see the tiling...\n//#define SHOW_TILING\nconst vec2 target_resolution = vec2(940, 86);\n\n#define TAU 6.28318530718\n#define MAX_ITER 5\n\nfloat cubicPulse( float c, float w, float x ){\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    \n    \n\tfloat time = iTime * .2 + 23.0;\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n    uv += .5;\n    uv.y -= 0.5/r - 0.5; \n    \n    vec2 uv0 = uv; \n    uv0.x *= 6.;\n    uv0.y *= 1.;\n    uv0.y += iTime * 0.1;\n    \n    vec2 p = mod(uv0*TAU, TAU) - 250.0;\n    \n\tvec2 i = vec2(p);\n\tfloat c = 1.0;\n\tfloat inten = .009;\n    \n    //pattern control\n    float iTimeCtrl = iTime * 0.05;\n    iTimeCtrl = pow(iTimeCtrl, 1.1);\n    \n    float scale = 2.0; \n    float timetest = -sin((iTimeCtrl * 1.0/scale - 0.25) * 3.1415926 * 4.0/2.0) * 0.5 + 0.5;\n    float endPattern = mix(4.5, 2.7, uv.y + pow(1.0-uv.y, 5.0));\n    float pattern = mix(3.0, endPattern, timetest * 1.2);\n    \n    //通过算法测算出water的pattern，通过增大tiling的值可以增大pattern的密度\n\tfor (int n = 0; n < int(MAX_ITER); n++) \n\t{\n\t\tfloat t = time * (1.0 - (2.5/ float(n+1)));\n        float t1= time * .2;\n\t\ti = p + vec2(cos(t1 - i.x) + sin(t + i.y), sin(t - i.y) + cos(t1 + i.x));\n\t\tc += 1.0/length(vec2(p.x / (sin(i.x+ t1)/inten),p.y / (cos(i.y+t)/inten)));\n\t}\n    \n\tc /= float(pattern);\n    \n    //1.12 可以调整白色的对比度，数值越高，对比度越高\n    //1. 1可以调整蓝色的深浅,数值越高，蓝色越浅，白色越多且会过曝\n\tc = 1.25 - pow(c, 1.5);\n    \n    float intensityblue = mix(13.0, 10.0, timetest);\n    vec3 blueChange = mix(vec3(0.000,0.545,0.780), vec3(0.000,0.349,0.502), timetest);\n    //7.5可以调整蓝色的深浅，数值越高，蓝色越深，但不会影响白色的细节\n\tvec3 colour = vec3(pow(abs(c), intensityblue));\n    colour = clamp(colour + blueChange, 0.0, 1.0);\n                                             \n\t#ifdef SHOW_TILING\n\t// Flash tile borders...\n\tvec2 pixel = 2.0 / iResolution.xy;\n\tuv *= 2.0;\n\tfloat f = floor(mod(iTime*.5, 2.0)); \t// Flash value.\n\tvec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\n\tuv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\n\tcolour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\n\t#endif\n    \n    //WhiteEdge\n    float offset = uv.y + iTimeCtrl;\n    float y = mod(offset, scale);\n    \n    float d = smoothstep(0.1 * scale, 0.0  * scale, y) * 1.0;\n    float d1 = smoothstep(0.85  * scale, 1.0  * scale, y) * 1.0;\n    vec3 maskColor =  vec3(d) + vec3(d1);\n    \n    //maskColor *= pow(1.0 - uv.y, 2.0);   //test0 从0-1.0\n    //maskColor *= pow(1.0 - uv.y, 2.0)/2.0 + 0.5; //test1 从0.5-1.0\n    maskColor *= smoothstep(0.0, 1.0, pow(1.0 - uv.y, 1.0) + 0.15) * 0.8; //test2 从0.2-1.0\n    \n    float near = pow(uv.y, 3.5) * mix(0.75, 0.5, timetest);\n    vec3 frontEdge = vec3(near) * 1.;\n    \n    //结尾的mask\n    float mask = pow(uv.y, 1.0);\n    //0.492的值越小，黑色边缘越硬\n    mask = smoothstep(0.,0.672,uv.y);\n    \n    fragColor.rgb = colour;\n    //maskColor *= pow(mask1, 1.5); \n    fragColor.rgb = colour + maskColor + frontEdge ;\n    \n    //摄像机追踪\n    float cameraTrackingPosition; //摄像机追踪的变量\n    cameraTrackingPosition = 0.0; \n    float mask1 = cubicPulse(cameraTrackingPosition,0.2,uv.x);\n    mask1 += 0.05;\n    \n    fragColor.rgb = mix(vec3(0.000,0.208,0.341), fragColor.rgb,  mask1  );\n\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}