{
    "Shader": {
        "info": {
            "date": "1671493627",
            "description": "i want to reproduce the shader you see when googling \"world cup winner\" ",
            "flags": 32,
            "hasliked": 0,
            "id": "Dls3z4",
            "likes": 5,
            "name": "random flickering effect",
            "published": 3,
            "tags": [
                "firework"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n\n    fragColor = texture(iChannel0, o_trpino_nooffset);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define n_size_max_a_o_col_last_krnl const 1000;\nfloat f_n_rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvec4 f_o_coltxtnyan(vec2 o_nor){\n    vec2 o_scl_sprt = vec2(33.,20.);\n    vec2 o_offset_frst_sprt = vec2(3.,6.);\n    float n_t = iTime*10.;\n    n_t = 0.; // comment to animate\n    vec2 o_trs_sprt = vec2(floor(mod(n_t, 5.)), 0.);\n    \n    vec2 o_trs = o_nor * o_scl_sprt;\n    vec2 o_trsextra = vec2(7., 0.);\n    return texelFetch(\n        iChannel1,\n        ivec2(o_trs)\n\n         + ivec2(o_trsextra*o_trs_sprt.x)\n         + ivec2(o_trs_sprt*o_scl_sprt)\n         + ivec2(o_offset_frst_sprt),\n        0\n    );\n}\nvec2 f_o_index_by_trn_scl(\n    vec2 o_trn, \n    vec2 o_scl\n){\n    float n_index = floor(o_trn.x)+floor(floor(o_trn.y)*floor(o_scl.x));\n    float n_index_nor = n_index / (floor(o_scl.x)*floor(o_scl.y));\n    return vec2(\n        n_index,\n        n_index_nor\n    );\n} \nvec3 f_o_distmin_distsum_distmul(\n    vec2 o_fragCoord, \n    vec2 o_iResolution,\n    float n_random,\n    float n_sphere_size_nor,\n    vec2 o_scale_kernel, \n    vec2 o_rnd_trns_inside_kernel_max_nor\n){\n\n    float n_size_kernel = o_scale_kernel.x * o_scale_kernel.y;\n    vec2 o_index = f_o_index_by_trn_scl(\n        o_fragCoord, \n        o_iResolution\n    );\n\n    float n_sphere_size_max = floor(o_scale_kernel.x/2.);\n    vec3 o_dist_sum = vec3(0.);\n    vec3 o_dist_mul = vec3(1.);\n    vec3 o_dist_min = vec3(1.);\n\n    vec3 o_col = vec3(0.);\n    for(float n_y = 0.; n_y < o_scale_kernel.y; n_y+=1.){\n        for(float n_x = 0.; n_x < o_scale_kernel.x; n_x+=1.){\n            vec2 o_fragCoord_offset = vec2(\n                        n_x-floor(o_scale_kernel.x/2.),\n                        n_y-floor(o_scale_kernel.y/2.)\n            );\n            vec2 o_index_current = f_o_index_by_trn_scl(\n                floor(o_fragCoord+o_fragCoord_offset),\n                o_iResolution\n               );\n               float n_rand = f_n_rand(o_index_current.x*n_random)-.5;\n               float n_rand2 = f_n_rand(o_index_current.x*n_rand*n_random)-.5;\n                vec2 o_diff = (\n                    (fract(o_fragCoord)-\n                      o_fragCoord_offset)\n                     + vec2(n_rand,n_rand2)*(vec2(floor(o_scale_kernel/2.))*o_rnd_trns_inside_kernel_max_nor)//*sin(iTime)))\n                    );\n                float n_dist = length(o_diff);\n                \n                o_dist_min = vec3(min(o_dist_min.r, n_dist));\n                o_dist_mul = vec3(o_dist_mul * vec3(n_dist));\n                float n = step(0., n_sphere_size_max-(n_dist*(1./(n_sphere_size_nor/2.))));\n                vec4 o_coltxtnyan = f_o_coltxtnyan(\n                    floor(o_fragCoord+o_fragCoord_offset) \n                        / floor(o_iResolution)\n                );\n                o_dist_sum+=o_coltxtnyan.rgb* vec3(n/n_size_kernel);\n                //n_dist_min = o_trpino_scld.x;\n        }\n    }\n    //return vec3(\n    \n        //n_dist_min, \n        //n_dist_sum,\n        //n_dist_mul\n    //);\n    return o_dist_sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_fragCoord_nor = fragCoord.xy /iResolution.xy;\n    vec4 o_col_last = texture(iChannel0, o_fragCoord_nor);\n\n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.y;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.y;\n    if(iMouse.w == 0.0){\n        float n_t = floor(iTime * 1.0);\n        float n_t_x = fract(n_t/5.)-.5;\n        float n_t_y = fract(n_t/10.)-.5;\n        o_trmono = vec2(\n            n_t_x*2.,\n            n_t_y\n            //(f_n_rand(n_t)-0.5)*2.,\n            //f_n_rand(n_t*3.33)-0.5\n        );\n    }\n    float n_fadeout = 5.;\n    vec2 o_scale_factor = vec2(0.1);\n    vec3 o_distmin_distsum_distmul = f_o_distmin_distsum_distmul(\n        fragCoord.xy*o_scale_factor,//+vec2(sin(iTime)*20.),\n        iResolution.xy*o_scale_factor, \n        mod(floor(iTime*20.), 20.)+1., \n        1.-fract(iTime)*fract(iTime),//n_sphere_size_nor, \n        vec2(5.),//o_scale_kernel, \n        vec2(1.) //o_rnd_trns_inside_kernel_max_nor\n    );\n\n    fragColor = vec4(\n        o_distmin_distsum_distmul.rgb*5., 1.\n    );\n\n    fragColor = mix(vec4(o_col_last), fragColor, 0.09);\n\n    //fragColor = vec4(n_dist_min);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}