{
    "Shader": {
        "info": {
            "date": "1493540786",
            "description": "Underground books",
            "flags": 0,
            "hasliked": 0,
            "id": "ldSyDG",
            "likes": 13,
            "name": "Literary Tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "library",
                "books"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 641
        },
        "renderpass": [
            {
                "code": "// \"Literary Tunnel\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\nvec3 ltDir;\nfloat dstFar, tCur, wdTun, htTun, segTun, spShf;\nint idObj;\nconst int idWal = 1, idCeil = 2, idFlr = 3, idLmp = 4, idBks = 5, idShlf = 6;\nconst float pi = 3.14159;\n\nfloat TrackPath (float t)\n{\n  return wdTun * (0.6 * sin (0.005 * 2. * pi * t) + 0.3 * cos (0.009 * 2. * pi * t));\n}\n\nfloat TrackPathD (float t)\n{\n  return wdTun * 2. * pi * (0.6 * 0.005 * cos (0.005 * 2. * pi * t) -\n     0.3 * 0.009 * sin (0.009 * 2. * pi * t));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, db;\n  dMin = dstFar;\n  p.x -= TrackPath (p.z);\n  q = p;\n  q.y -= htTun;\n  d = wdTun - abs (q.x);\n  if (d < dMin) { dMin = d;  idObj = idWal; }\n  d = q.y + htTun;\n  if (d < dMin) { dMin = d;  idObj = idFlr; }\n  q.y -= htTun;\n  d = max (wdTun - length (q.xy), - q.y);\n  if (d < dMin) { dMin = d;  idObj = idCeil; }\n  q.z = mod (q.z + segTun, 2. * segTun) - segTun;\n  q.y -= 0.5 * wdTun;\n  d = PrCylDf (q.xzy, 0.1 * wdTun, 0.01 * wdTun);\n  q.y -= 0.25 * wdTun;\n  d = min (d, PrCylDf (q.xzy, 0.005 * wdTun, 0.25 * wdTun));\n  q.y -= 0.25 * wdTun;\n  d = min (d, PrCylDf (q.xzy, 0.05 * wdTun, 0.02 * wdTun));\n  q.y -= - wdTun - htTun;\n  if (d < dMin) { dMin = d;  idObj = idLmp; }\n  q.x = abs (q.x) - wdTun + 0.75;\n  d = length (max (abs (q) - vec3 (0.75, htTun, segTun - 1.1), 0.));\n  if (d < dMin) { dMin = d;  idObj = idBks; }\n  q.x += 0.1;\n  db = length (max (abs (q) - vec3 (0.85, htTun, segTun - 1.), 0.));\n  q.y = mod (q.y, spShf) - 0.5 * spShf;\n  q.yz = abs (q.yz) - vec2 (0.5 * spShf - 0.05, segTun - 1.1);\n  d = max (db, - min (max (q.y, q.z), 0.));\n  if (d < dMin) { dMin = d;  idObj = idShlf; }\n  return 0.6 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 300; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  float f;\n  p *= 5.;\n  f = dot (vec3 (Fbm2 (p.yz * vec2 (1., 0.2)),\n     Fbm2 (p.xz * vec2 (1., 0.2)), Fbm2 (p.xy * vec2 (1., 0.2))), abs (n));\n  return mix (vec3 (0.9, 0.4, 0.2), vec3 (0.5, 0.3, 0.), f);\n}\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, (SQRT3/2.) - q.x + 0.5 * min (q.x - SQRT3 * q.y, 0.));\n}\n\nfloat BrickGrid (vec2 p)\n{\n  vec2 q, iq;\n  q = p * vec2 (2./3., 2.);\n  iq = floor (q);\n  if (2. * floor (iq.y / 2.) != iq.y) {\n    q.x += 0.5;\n    iq = floor (q);\n  }\n  q = smoothstep (0.03, 0.05, abs (fract (q + 0.5) - 0.5));\n  return 1. - 0.4 * q.x * q.y;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, q, qh;\n  vec2 gb, bt, bs;\n  float dstObj, bh, s, spec, att;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    q = ro;\n    q.x -= TrackPath (q.z);\n    vn = ObjNf (ro);\n    spec = 0.1;\n    if (idObj == idWal) {\n      col = vec3 (0.3, 0.4, 1.) * BrickGrid (q.zy);\n    } else if (idObj == idCeil) {\n      q.x = wdTun * atan (q.x, q.y - 2. * htTun);\n      qh = HexGrid (1.5 * q.xz);\n      col = mix (vec3 (0.9, 0.9, 1.), vec3 (0.1, 0.1, 1.), (1. - length (qh.xy)) *\n         (0.3 + 0.7 * smoothstep (0.03, 0.06, qh.z)));\n      spec = 0.05;\n    } else if (idObj == idFlr) {\n      qh = HexGrid (q.zx);\n      col = vec3 (0.8, 0.8, 0.85) * (0.3 + 0.7 * smoothstep (0.03, 0.06, qh.z)) *\n         (1. - 0.1 * Noisefv2 (150. * q.xz));\n      q.z = mod (q.z + segTun, 2. * segTun) - segTun;\n      col *= 1. - 0.3 * smoothstep (0.4, 0.85, length (q.xz) / wdTun);\n      spec = 0.1;\n      s = max (length (qh.xy) - 0.5, 0.);\n      vn = vec3 (0., Rot2D (vec2 (1., 0.), 5. * s * s));\n      vn.zx = vn.z * vec2 (qh.x, - qh.y) / length (qh.xy);\n      vn = VaryNf (100. * q, vn, 0.2);\n    } else if (idObj == idShlf) {\n      col = WoodCol (ro, vn);\n    } else if (idObj == idBks) {\n      bs = vec2 (sign (q.x), floor (q.z / (2. * segTun) + 0.5));\n      bt = floor (vec2 (q.yz * vec2 (200., 120.)));\n      q.z = mod (q.z, 2. * segTun);\n      q.z = 50. * (q.z - 1.1) / (2. * segTun - 2.2);\n      gb = floor (vec2 (q.y / spShf, q.z));\n      bh = (0.7 + 0.3 * Fbm2 (gb * vec2 (19., 31.))) * spShf;\n      q.y = mod (q.y, spShf);\n      if (q.y < bh) {\n        s = mod (q.z, 1.);\n        col = vec3 (HsvToRgb (vec3 (mod (5. * Fbm2 (gb * vec2 (17., 11.) + bs), 1.), 1.,\n           0.05 + 0.8 * SmoothBump (0.05, 0.95, 0.015, abs (s)))));\n        q.y = q.y / bh - 0.5;\n        if (abs (s - 0.5) < 0.1 && abs (q.y) < 0.2 &&\n           Noisefv2 (gb * vec2 (19., 31.) + mod (bs * 73. + bt, 1000.)) > 0.6) {\n          col *= 0.1;\n        } else {\n          spec = 0.1;\n          vn.xz = Rot2D (vn.xz, (1. - 2. * s) * bs.x);\n        }\n      } else {\n        col = vec3 (0.05);\n        spec = -1.;\n      }\n    } else if (idObj == idLmp) {\n      if (q.y < htTun + wdTun) {\n        col = vec3 (1., 1., 0.7) * 0.5 * (1. - vn.y);\n        spec = -1.;\n      } else col = vec3 (0.6, 0.4, 0.1);\n    }\n    if (spec >= 0.) {\n      att = min (600. / pow (dstObj, 1.5), 1.);\n      col = col * (0.3 + 0.7 * max (dot (vn, ltDir), 0.) +\n         spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.)) * att;\n    }\n  } else col = vec3 (0.02, 0.02, 0.1);\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  wdTun = 8.;\n  htTun = 4.;\n  segTun = 5.;\n  spShf = 0.3333 * htTun;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    el = clamp (el + pi * mPtr.y, -0.4 * pi, 0.4 * pi);\n    az = az + 2.5 * pi * mPtr.x;\n  }\n  dstFar = 300.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  ro.z = mod (8. * tCur, 30000.);\n  ro.x = TrackPath (ro.z);\n  ro.y = htTun + 1.5 * spShf;\n  a = atan (TrackPathD (ro.z));\n  rd.zx = Rot2D (rd.zx, 4. * a);\n  ltDir = vuMat * normalize (vec3 (0., 0.2, -1.));\n  ltDir.zx = Rot2D (ltDir.zx, 4. * a);\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}