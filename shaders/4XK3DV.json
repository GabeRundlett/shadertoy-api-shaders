{
    "Shader": {
        "info": {
            "date": "1718282254",
            "description": "combination, admin pls answer on my question on mail",
            "flags": 0,
            "hasliked": 0,
            "id": "4XK3DV",
            "likes": 7,
            "name": "quasar star",
            "published": 3,
            "tags": [
                "fractal",
                "star",
                "universe",
                "cindeshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "/*originals https://www.shadertoy.com/view/lXsSRN https://www.shadertoy.com/view/wdtczM*/\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nfloat hash( ivec3 p )    // this hash is not production ready, please\n{                        // replace this by something better\n\n    // 3D -> 1D\n    int n = p.x*3 + p.y*113 + p.z*311;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return float( n & ivec3(0x0fffffff))/float(0x0fffffff);\n}\nvec2 rotZ( float alpha, vec2 r)\n{\n    float xComp = r.x*cos(alpha) - r.y*sin(alpha);\n    float yComp = r.x*sin(alpha) + r.y*cos(alpha);\n    return vec2( xComp, yComp );\n}\nfloat noise( in vec3 x )\n{\nx.xz=rotZ(iTime, x.zx);\n    ivec3 i = ivec3(floor(x));\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+ivec3(0,0,0)), \n                        hash(i+ivec3(1,0,0)),f.x),\n                   mix( hash(i+ivec3(0,1,0)), \n                        hash(i+ivec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+ivec3(0,0,1)), \n                        hash(i+ivec3(1,0,1)),f.x),\n                   mix( hash(i+ivec3(0,1,1)), \n                        hash(i+ivec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// https://www.shadertoy.com/view/XsGfWV\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\nvec2 r(vec2 p, float a) { return p*mat2(cos(a), sin(a), -sin(a), cos(a)); }\n#define R iResolution.xy\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = I/R;\n    vec2 p = (2.*I - R) / R.y * 1.5;\n    \n    float fp = pow(.5/length(pow(abs(r(p,.43))\n        *vec2(3.4,1),vec2(0.5))),2.5);\n       \n       \n       vec4 o=O;\n     vec2 F = I;\n\n    o-=o;\n    for(float d,t = -iTime*.01, i = 0. ; i > -1.; i -= .06 )          \t\n    {   d = fract( i -3.*t );                                          \t\n        vec4 c = vec4( ( F - R *.5 ) / R.y *d ,i,0 ) * 28.;  \n     c.xz=rotZ(iTime, c.zx);\n        for (int j=0 ; j++ <27; )                                      \t\n            c.xzyw = abs( c / dot(c,c)                                 \t\n            \n                    -vec4( 7.-.2*sin(t) , 6.3 , .7 , 1.-cos(t/.8))/7.);\t\n                    \n       o -= c * c.yzww  * d--*d  / vec4(3,4,1,1);                     \n    }\n    vec2 uv2 = ( I - .5*iResolution.xy ) / iResolution.y;\n      vec2 uv3 = ( I - .5*iResolution.xy ) / iResolution.y;\n         vec2 uv4 = ( I - .5*iResolution.xy ) / iResolution.y;\n    p *= mat2(1.0,-.1,-.0,1.2);    \n    vec3 pos = normalize(vec3(r(p,-.4/length(p)),.25));\n    pos.z -= iTime*0.5;\n    uv2-=0.2;\n       uv3+=0.1;\n         uv4+=.3;\n         uv4.y-=0.72;\n    vec3 q = 2.*pos;\n     \n    float f  = 0.5000*noise( q*o.xyz ); q = q*2.;\n          f += 0.2500*noise( q*o.xyz ); q = q*2.;\n          f += 0.1250*noise( q *o.xyz); q = q*2.;\n          f += 0.0625*noise( q *o.xyz);\n    \n    vec2 n = uv*(1.-uv+o.xy)*3.; float v = pow(n.x*n.y,.8);\n    \n    float fr = .6/length(p);\n    f = smoothstep(-.4,2.,f*f) * fr*fr + fp;\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n \n    O = vec4(aces_tonemap(\n        pow(f*f * vec3(0., .05, .5)*v*o.xyz,vec3(.45))*3.5),0);\n        \n        \n           O+= vec4(happy_star(uv2, anim) * vec3(0.35,0.2,0.15)*0.01, 1.0);\n             O+= vec4(happy_star(uv3, anim) * vec3(0.35,0.7,0.35)*0.005, 1.0);\n               O+= vec4(happy_star(uv4, anim) * vec3(0.35,0.07,0.05)*0.0205, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}