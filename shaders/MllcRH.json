{
    "Shader": {
        "info": {
            "date": "1503514325",
            "description": "Shader for 4kb PC intro ranked 8th at EVOKE 2017. Made by DESiRE demogroup\n--------------------------------------------------------------code: evvvvil\n--------------------------------------------------------------music: Dascon",
            "flags": 96,
            "hasliked": 0,
            "id": "MllcRH",
            "likes": 29,
            "name": "PointlessErectionsBrokenSausages",
            "published": 3,
            "tags": [
                "procedural",
                "raymarching",
                "fractal",
                "noise",
                "intro",
                "landscape",
                "demo",
                "organic",
                "bright",
                "evoke",
                "architecture",
                "outside",
                "4kb"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 1812
        },
        "renderpass": [
            {
                "code": "// \n//     d@MP*W#,  ,meg=   ,d$#M*  ,A#P,A@ ,d@P ,meg=_\n//    .NP^  Y#k x@K J@P  q@k     QM^ QW@#^*\" x@K J@P\n//    J#K   #$P MWad#P'   Y@b,  j@p j#p\"     MWad@P'\n//  ,#$[  _d@T J@K'  _,wn, J@\" d$W dM*      J@K'  _,\n//  G@#&#&@^\"  *#badP' \"W#@%P J#W'J&P [hf7] *#badP'\n//              \n//             p  r  e  s  e  n  t  s\n//\n//     \"Pointless erections and broken sausages\"\n//      a PC 4k Intro by DESiRE for EVOKE 2017\n//\n//                 code: evvvvil\n//                 music: dascon\n//\n//            g  r  e  e  t  i  n  g  s\n//\n//     Virgill, UNC, Quite, LJ, Alcatraz, Fairlight,\n//     Poo-brain, Conspiracy, ASD, Smash, RamonB5,\n//     Hellmood, Prismbeings, Collapse, Farbrausch,\n//     Ronny, Triace, Gopher, RGBA, Pixtur, Mercury\n\n#define res iResolution\n\nconst float GA =2.399; \nconst mat2 rot = mat2(cos(GA),sin(GA),-sin(GA),cos(GA));\n\n// \tsimplyfied version of Dave Hoskins blur\nvec3 dof(sampler2D tex,vec2 uv,float rad)\n{\n\tvec3 acc=vec3(0);\n    vec2 pixel=vec2(.0023*res.y/res.x,.0023),angle=vec2(0,rad);\n   \n\tfor (int j=0;j<80;j++){  \n\t    angle*=rot;\n        vec4 col=texture(tex,uv+pixel*angle);\n\t\tacc+=col.xyz;}\n\treturn acc/80.;\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / res.xy;\n\tfragColor=vec4(dof(iChannel0,uv,texture(iChannel0,uv).w),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 11744,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/berndhoffmann/dascon-pointless-erections-and-broken-sausages"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 flap, flap2; float modTime,ti,posMult,clampEnd; int scene;\n\n//boring stuff:\nfloat sdBox( vec3 p, vec3 b ){vec3 d = abs(p) - b; return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));}\nfloat sdSphere( vec3 p, float s ){return length(p)-s;}\nvec3 opRep( vec3 p, vec3 c ){ vec3 q = mod(p,c)-0.5*c; return q;}\nvec2 opU(vec2 d1,vec2 d2){return (d1.x<d2.x) ? d1 : d2;}\n//classic iqnoise, thankx iq broh, you da man\nfloat iqhash( float n ){return fract(sin(n)*43758.5453);}\nfloat iqnoise( vec3 x ){\n\tvec3 p = floor(x), f = fract(x); f=f*f*(3.0-2.0*f);\n\tfloat n = p.x + p.y*57.0 + 113.0*p.z;\n\treturn mix(mix(mix(iqhash(n), iqhash(n+1.0),f.x),\n\tmix(iqhash(n+57.0), iqhash(n+58.0),f.x),f.y),\n\tmix(mix(iqhash(n+113.0), iqhash(n+114.0),f.x),\n\tmix(iqhash(n+170.0), iqhash(n+171.0),f.x),f.y),f.z);\n}\n\n//This isn't exactly fucking elegant but neither am I on a saturday night skateboarding home as fast as drunk from the pub \nfloat[28] cE = float[](0.89,.89,2.06,1.52,1.52,1.6,1.6,1.27,2.06,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6);\nvec3[28] cP = vec3[](vec3(-2.3,0.94,0.1),vec3(-2.3,0.94,0.1),vec3(-0.04,0.93,-5.33),vec3(-0.43,0.45,-0.35),vec3(0.83,-0.05,0.63),vec3(-0.62,0.64,-0.96),vec3(-0.89,0.35,-0.43),\n                     vec3(0,1.91,0.02),vec3(0,0.91,-1.2),vec3(0.03,0.91,0.59),vec3(-1.05,5.16,0),vec3(0.,4.87,1.5),vec3(0.0,4.3,-0.5),vec3(0.0,4.3,0.0),\n                     vec3(-0.1,4.3,.6),vec3(-0.5,3.9,.1),vec3(-0.6,4.3,-0.45),vec3(0.5,0.1,0.23),vec3(-0.62,2.64,-0.96),vec3(0,1.91,0.02),\n                     vec3(-1.,1.,.43),vec3(0.6,1.,-1.6),vec3(0.03,1.91,1.59),vec3(-2.05,4.16,0),vec3(-1.9,7.,0),vec3(5.5,5.5,1.5),vec3(5.5,5.5,1.5),vec3(6.0,0.5,1.0));\nvec3[28] cD = vec3[](vec3(1.,1.4,-0.1),vec3(1.,1.4,-0.1),vec3(-2.5,3.2,-1.13),vec3(0.,-5.5,-1.6),vec3(0.4,0.2,0.2),vec3(0.2,0.4,0.50),vec3(0.5,0.8,.50),\n                     vec3(0.0,1.25,0.0),vec3(0.0,0.8,0.0),vec3(-0.5,0.6,-.5),vec3(3.5,9.5,0.),vec3(0.,5.,.0),vec3(0.1,3.8,0.5),vec3(-.3,-1.5,-0.6),\n                     vec3(0.,4.,0.),vec3(0.5,3.2,-1.13),vec3(3.,3.,2.2),vec3(0.1,0.2,0.2),vec3(0.2,2.0,0.50),vec3(0.0,1.25,0.0),vec3(0.2,0.2,-2.0),\n                     vec3(0.,0.8,.4),vec3(0.,1.0,-.5),vec3(3.5,-0.5,0.),vec3(3.5,-.5,0.),vec3(0.,4.3,.0),vec3(0.,4.3,.0),vec3(0.,3.5,.0));\nvec2 map(vec3 pos )\n{    \n    vec2 res;\n    //make some fucking noise broh\n    float noise = iqnoise(pos-modTime*0.5)*.9;\n    //fractal derived/simplified from Kali's Generators -> https://www.shadertoy.com/view/Xtf3Rn\n    vec4 p=vec4(pos,1.0); \n\tfor (int i=0; i<7; i++) {\n\t\tp.xyz = abs(p.xyz)-flap;        \n\t\tp=p*(posMult)/clamp(dot(p.xyz,p.xyz),0.5,clampEnd);\n\t\tp.xyz-=flap2;\n\t}    \n    //we  draw the fractal here broh first \"normally\"...\n\tvec2 d=vec2((length(max(p.xyz,0.0))-0.05)/p.w,30);\n    \n    //(animation bullshit: We Hate Tottenham, We Hate Tottenham, We Hate Tottenham, We Hate Tottenham)\n    float tottenhamHotspurFCarefuckingshit = mix(0.8,-2.5,0.0555*max(modTime-92.4,0.)),\n          myballs=1.-min(max(modTime-120.,0.)*.2,1.), mydick=35.*max(modTime-105.,0.)*.04;\n    \n    //...then now we draw the fractal again through red sdBox with * offset\n\td=opU(d,vec2((scene>2?1.7:1.)*sdBox(p.xyz*0.5,vec3(0.5+mydick*(2.-myballs)))/p.w,50.-mydick));\n    //Terrain crap\n\td=opU(d,vec2(pos.y+sin(pos.z*0.8)*cos(pos.x*.1+modTime*.3)*.5,5));\n    // Totally drawing some  cubes next few lines broh:\n    vec3 cubePos; float cubes, limiter = 0.8;\n    if(scene>15) limiter=0.4; // this is lame as fuck i know, this intro was made in one week after work, \"under pressure\", you see...\n    // I could change it but it's ok I own up to my shit code, it's alright broski.\n    if(length(pos.xz)<limiter && modTime >55.4145 && modTime <105.6){\n        if(modTime <73.9){\n            cubePos = opRep(pos+vec3(0,-(modTime-55.4145)*.1,25.),vec3(0.15,0.3+cos(pos.x)*.1,50.));\n            cubes = sdBox(cubePos,vec3(min(modTime-55.4145,1.)*0.05));\n        }else{    \n            cubePos = opRep(pos+vec3(0.,ceil(noise*15.5),0.),vec3(0.05,0.35,0.05));\n            cubes = sdBox(cubePos,vec3(0.02,0.02,0.02)-(noise*5.5)*.0010);\n        }d=opU(d,vec2(cubes,21.));\n\t}\n    //The wave at the end that covers the erection rendering it so pointless, you know, noise and shit basically\n    if(pos.y<max((2.-tottenhamHotspurFCarefuckingshit*2.),2.)){\n        vec3 noisePos = vec3(pos.x+noise,sin(pos.x*-pos.z)+abs(sin(pos.y-modTime))+noise,pos.z+noise);\n\t    d=opU(d,vec2(max(-sdSphere(pos+vec3(0.,-2.+tottenhamHotspurFCarefuckingshit,0.),myballs*3.+tottenhamHotspurFCarefuckingshit),sdBox(noisePos,myballs*vec3(0.8+cos(pos.y*(1.+tottenhamHotspurFCarefuckingshit*.25))))),5));\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t    \t\t\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    uv.x=1.-uv.x;\n    vec2 p = (uv*2.-1.)*vec2(1.69,.9); // aspect ratio tweak for c++ framework bullshit\n    modTime =mod(iTime,135.5); // yo this loops to infinity, take a fucking seat, grab a cigar and make mine a double\n    float time=modTime-4.6145; //takes a while to load a 4kb intro hey? you never know, best chill for a bit\n    scene = int(ceil(max(time,0.)/4.6145+(scene>12?2.1:0.))); // super mega fucking simple scene indexer thingy\n    ti=min(max(time,0.)/60.,1.); //ti = time broh or some shit about space\n    flap=mix(vec3(0.,1.,0.),vec3(.2,2.09,.2),ti)+vec3(0.,.5,0.)*.01*max(modTime-62.4,0.); //fractal grows with this lame thing\n    flap2=mix(vec3(0.,0.79+(1.-min(max(time,0.)*0.25,1.0))*-2.84,0.),vec3(0.45,2.42,0.36),ti); // and this as well affects the fractal fucker\n    posMult = 1.24+ti*2.1; //tweak the fractal pos scale with this shit        \n    clampEnd = cE[scene]; //we grab the clamp end from this fucking array        \n    if(scene==1) clampEnd+=ti*7.;\n    \n    //SET CAMERA you knwo like iq does\n    vec3 ro = cP[scene];\n    vec3 cw=normalize(cD[scene]-ro)*0.6;\n\tvec3 cu=normalize(cross(cw,vec3(0,1,0)));\n    vec3 cv=normalize(cross(cu,cw));\n    vec3 rd=mat3(cu,cv,cw)*normalize(vec3(p.xy,2));\n    \n    // light dir, fog, sun and some wrestling midgets breaking boundaries\n\tvec3 lig= vec3(-.62,0.48,0.61);\n    vec3 skyCol =vec3(0.6,0.71,0.75)-rd.y*0.2*vec3(1,.5,1)+0.15*.5;\n    float sun = clamp(dot(lig,rd),0.,1.);\n    vec3 sunColour = 0.6*vec3(1,.6,0.1)*pow(sun,16.0);\n    vec3 col, fogCol; col=fogCol=skyCol+sunColour;\n    \n    //castray like iq does man, like a real broh, broh\n    float t = 0.01, m = -1.0;\n    for( int i=0; i<96; i++ )\n    {\n\t    float precis = 0.0002*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>15.) break;\n        t += res.x;\n\t    m = res.y;\n    }\n    if( t>15. ) m=-1.0;    \n    //leave code alone above bro, iq wrote it, what you gonna do about it?...\n    //...............................................................EXACTLY.\n    if( m>-.5 )\n    {\n        vec3 pos = ro + t*rd;  \n        //Normals calculation like the boss of the basques\n        vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    \tvec3 nor =  normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );        \n        col = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );         \n        //Classic Ambient occlusion shit\n        float occ = 0.0;float sca = 1.0;\n    \tfor( int i=0; i<5; i++ )\n    \t{\n            float hr = 0.01 + 0.12*float(i)/4.0;\n            occ += -(map( nor * hr + pos ).x-hr)*sca;\n            sca *= 0.95;\n    \t}\n        occ=clamp( 1.0 - 3.0*occ, 0.0, 1.0 );        \n        //Love a fucking soft shadow\n    \tfloat softshadow = 1.0, st = 0.1;\n        for( int i=0; i<16; i++ )\n        {\n            float h = map( pos + lig*st ).x;\n            softshadow = min(softshadow, 8.0*h/st );\n            st += clamp( h, 0.02, 0.10 );\n            if( h<0.001 || st>2.5 ) break;\n        } \n        //Final render a la IQ you know the deal, a simpler example would be the IQ's primitives one here -> https://www.shadertoy.com/view/Xds3zN\n        //this is just a compressed version of it with no specular or reflection (for a more organic look)\n\t\tcol *=1.30*clamp( dot( nor, lig ), 0.0, 1.0 )*clamp(softshadow, 0.0, 1.0 )*vec3(1,0.80,0.55)+0.40*clamp( .5+.5*nor.y, 0.0, 1.0 )*vec3(0.40,0.60,1)*occ+0.25*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 )*occ;        \n\t\tcol = mix( col, fogCol, 1.0-exp( -0.0002*t*t*t ) )+0.2*vec3(1,.4,.2)*pow( sun,16.0 )+ 0.2*vec3(1.,0.4,0.2)*pow(sun,3.0);\n    }\n    //please note for dof we pass depth with t as .w of col\n    fragColor = vec4(pow(col,vec3(0.45)),min(t,0.6));\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}