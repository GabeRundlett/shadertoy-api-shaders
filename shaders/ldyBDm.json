{
    "Shader": {
        "info": {
            "date": "1529065789",
            "description": "Roll the ball through the maze between the red markers",
            "flags": 32,
            "hasliked": 0,
            "id": "ldyBDm",
            "likes": 15,
            "name": "Maze Ball",
            "published": 3,
            "tags": [
                "game",
                "dynamics",
                "maze",
                "puzzle"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 823
        },
        "renderpass": [
            {
                "code": "// \"Maze Ball\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Roll the ball through the maze between the red markers.\n  Drag red ring to control tilt angles (vary automatically until\n    first click); click yellow ring for new random maze; otherwise\n    mouse controls view angle.\n  See \"Maze Builder\" for maze method\n*/\n\n#define AA  0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nmat3 QToRMat (vec4 q);\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (vec2 vId);\n\nvec3 ltDir, qHit, bSize, vnBall;\nvec2 gSize, aTilt, ballPos;\nfloat dstFar, tCur;\nint idObj;\nconst float pi = 3.14159;\n\nfloat WallDst (vec2 p, float a)\n{\n  p = 0.5 - ((a < 0.) ? vec2 (0.) : (fract ((a <= 1.) ? ((a == 0.) ? p : vec2 (- p.y, p.x)) :\n     ((a == 2.) ? - p : vec2 (p.y, - p.x)))));\n  return length (vec2 (p.x, max (0., p.y)));\n}\n\nvec3 ColMaze (vec2 q)\n{\n  vec2 ut, e;\n  float dw, s;\n  ut = q * gSize;\n  s = Loadv4 (floor (ut)).x;\n  dw = WallDst (ut, (s >= 0.) ? s : -1.);\n  for (float ai = 0.; ai < 4.; ai ++) {\n    e = vec2 (0., 1.);\n    e = (ai < 2.) ? ((ai == 0.) ? e : e.yx) : ((ai == 2.) ? - e : - e.yx);\n    if (Loadv4 (floor (ut) - e).x == ai) dw = min (dw, WallDst (ut, mod (ai + 2., 4.)));\n  }\n  return mix (vec3 (0.3, 0.5, 0.1), vec3 (0.7, 0.7, 0.9), step (0.33, dw));\n}\n\nfloat HtMaze (vec2 q)\n{\n  vec2 ut, e;\n  float dw, s;\n  ut = q * gSize;\n  s = Loadv4 (floor (ut)).x;\n  dw = WallDst (ut, (s >= 0.) ? s : -1.);\n  for (float ai = 0.; ai < 4.; ai ++) {\n    e = vec2 (0., 1.);\n    e = (ai < 2.) ? ((ai == 0.) ? e : e.yx) : ((ai == 2.) ? - e : - e.yx);\n    if (Loadv4 (floor (ut) - e).x == ai) dw = min (dw, WallDst (ut, mod (ai + 2., 4.)));\n  }\n  return max (1. - 9. * dw * dw, 0.);\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, b;\n  float dMin, d, h;\n  dMin = dstFar;\n  q = p;\n  q.xy = Rot2D (q.xy, aTilt.x);\n  q.zy = Rot2D (q.zy, aTilt.y);\n  h = 0.5 * bSize.y * HtMaze (0.5 * q.xz / bSize.xz + 0.5);\n  b = bSize;\n  b.xz *= (1. - 0.9 / gSize);\n  q.y -= h;\n  b.y += h;\n  d = 0.6 * length (max (abs (q) - b, 0.));\n  DMINQ (1);\n  q = p;\n  q.xy = Rot2D (q.xy, aTilt.x);\n  d = max (PrBoxDf (q, bSize + vec3 (0., bSize.y, 0.)),\n     - PrBox2Df (q.xz, b.xz + vec2 (0.01)));\n  DMINQ (2);\n  q = p;\n  d = max (PrBoxDf (q, bSize + vec3 (bSize.x - b.x, bSize.y, bSize.z - b.z)),\n     - PrBox2Df (q.xz, bSize.xz + vec2 (0.01)));\n  DMINQ (2);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallRay (vec3 ro, vec3 rd)\n{\n  vec3 u;\n  float b, d, w, dMin, rad;\n  ro.xy = Rot2D (ro.xy, aTilt.x);\n  ro.zy = Rot2D (ro.zy, aTilt.y);\n  rd.xy = Rot2D (rd.xy, aTilt.x);\n  rd.zy = Rot2D (rd.zy, aTilt.y);\n  dMin = dstFar;\n  rad = 0.25;\n  u = ro - vec3 (ballPos.x, rad + 0.6 * bSize.y, ballPos.y);\n  b = dot (rd, u);\n  w = b * b - dot (u, u) + rad * rad;\n  if (w >= 0.) {\n    d = - b - sqrt (w);\n    if (d > 0. && d < dMin) {\n      dMin = d;\n      vnBall = (u + d * rd) / rad;\n    }\n  }\n  return dMin;\n}\n\nfloat BallChqr (vec3 vnBall)\n{\n  vec3 u;\n  u = QToRMat (vec4 (Loadv4 (vec2 (4., 0.)).yz, Loadv4 (vec2 (5., 0.)).yz)) * vnBall;\n  return step (0., sign (u.y) * sign (u.z) * atan (u.x, u.y));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  vec2 bx;\n  float dstObj, dstBall, spec;\n  dstBall = BallRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstBall, dstObj) < dstFar) {\n    spec = 0.05;\n    if (dstBall < dstObj) {\n      vn = vnBall;\n      col = mix (vec3 (1., 0., 0.), vec3 (1., 1., 0.), BallChqr (vn));\n      spec = 0.4;\n    } else if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        if (qHit.y > 0.) {\n          col = ColMaze (0.5 * qHit.xz / bSize.xz + 0.5);\n          col *= 0.8 + 0.2 * smoothstep (0.25, 0.3, length (0.5 * gSize * qHit.xz / bSize.xz - ballPos));\n          bx = vec2 (0.5 * gSize.x - 0.7, 0.5 * gSize.y - 2.);\n          col = mix (vec3 (1., 0., 0.), col,\n             smoothstep (0.15, 0.2, min (length (0.5 * gSize * qHit.xz / bSize.xz + bx),\n             length (0.5 * gSize * qHit.xz / bSize.xz - bx))));\n          spec = 0.2;\n        } else col = vec3 (0.4, 0.3, 0.3);\n      } else col = vec3 (0.4, 0.3, 0.2);\n    }\n    col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       spec * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col, wgBxC;\n  vec2 canvas, uv, um, us, ut, ca, sa;\n  float asp, tFrac, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (vec2 (0., 0.));\n  gSize = stDat.yz;\n  stDat = Loadv4 (vec2 (1., 0.));\n  aTilt = clamp (stDat.yz, -0.25, 0.25);\n  bSize = vec3 (0.5 * gSize.x, 0.15, 0.5 * gSize.y);\n  stDat = Loadv4 (vec2 (2., 0.));\n  ballPos = stDat.yz;\n  stDat = Loadv4 (vec2 (4., 0.));\n  tFrac = stDat.w;\n  stDat = Loadv4 (vec2 (3., 0.));\n  ca = cos (stDat.yz);\n  sa = sin (stDat.yz);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., -0.03, -3.) * length (bSize.xz);\n  dstFar = 150.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), 4.));\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  um = vec2 (0.4, 0.3) * vec2 (asp, 1.);\n  us = uv - 2. * um;\n  ut = abs (us) - vec2 (0.25);\n  if (max (ut.x, ut.y) < 0.) {\n    if (min (abs (ut.x), abs (ut.y)) < 0.015) col = vec3 (0., 0.7, 0.);\n    else {\n      f = length (0.5 * us - (1./2.) * aTilt) - 0.02;\n      col = mix (mix (vec3 (1., 0.1, 0.1), vec3 (0.1, 0.1, 1.),\n         step (0.005, abs (f))), vec3 (0.1, 0.1, 0.4), step (0., f));\n    }\n  }\n  wgBxC = vec3 (0.48 * asp, -0.46, 0.022);\n  if (abs (length (0.5 * uv - wgBxC.xy) - wgBxC.z) * canvas.y < 2.) col = vec3 (1., 1., 0.7);\n  ut = uv - vec2 (-0.8, 0.8) * vec2 (asp, 1.);\n  f = length (ut) - 0.1;\n  if (f < 0.) col = mix (mix (vec3 (0.2, 1., 0.2), vec3 (1., 0.2, 0.2),\n     step (0.5 * (atan (- ut.x, - ut.y) / pi + 1.), tFrac)),\n     vec3 (0.5, 1., 0.5), step (0.02, abs (f + 0.03)));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nmat3 QToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Maze Ball\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nmat3 VToRMat (vec3 v, float a);\nmat3 QToRMat (vec4 q);\nvec4 RMatToQ (mat3 m);\nfloat Hashfv2 (vec2 p);\nvec4 Loadv4 (vec2 vId);\n\nvec4 ballQt;\nvec2 gSize, aTilt, ballPos, ballVel;\nconst float pi = 3.14159;\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\n\nfloat WallDst (vec2 p, float a)\n{\n  p = 0.5 - ((a < 0.) ? vec2 (0.) : (fract ((a <= 1.) ? ((a == 0.) ? p : vec2 (- p.y, p.x)) :\n     ((a == 2.) ? - p : vec2 (p.y, - p.x)))));\n  return length (vec2 (p.x, max (0., p.y)));\n}\n\nfloat HtMaze (vec2 p)\n{\n  vec2 e;\n  float dw, s;\n  p += 0.5 * gSize;\n  s = Loadv4 (floor (p)).x;\n  dw = WallDst (p, (s >= 0.) ? s : -1.);\n  for (float ai = 0.; ai < 4.; ai ++) {\n    e = vec2 (0., 1.);\n    e = (ai < 2.) ? ((ai == 0.) ? e : e.yx) : ((ai == 2.) ? - e : - e.yx);\n    if (Loadv4 (floor (p) - e).x == ai) dw = min (dw, WallDst (p, mod (ai + 2., 4.)));\n  }\n  return max (1. - 4. * dw, 0.);\n}\n\nvoid Step ()\n{\n  float s, v;\n  s = 0.25;\n  ballVel -= 0.2 * sign (ballVel) *\n      vec2 (HtMaze (ballPos + vec2 (s * sign (ballVel.x), 0.)),\n            HtMaze (ballPos + vec2 (0., s * sign (ballVel.y))));\n  ballVel += 0.005 * aTilt - 0.03 * ballVel;\n  if (length (ballVel) > 0.1) ballVel *= 0.1 / length (ballVel);\n  ballPos += ballVel;\n  if (abs (ballPos.x) > 0.5 * gSize.x - 0.7) {\n    ballPos.x = (0.5 * gSize.x - 0.71) * sign (ballPos.x);\n    ballVel = vec2 (0.);\n  }\n  v = length (ballVel);\n  if (v > 0.) ballQt = RMatToQ (QToRMat (ballQt) *\n     VToRMat (normalize (vec3 (ballVel.y, 0., - ballVel.x)), v / 0.25));\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 wgBxC;\n  vec2 canvas, iFrag, um, ud, e;\n  float tCur, nStep, growInt, autoRot, tGame, tBgn, ai, ar, az, el, asp;\n  int wgSel, wgReg;\n  bool init;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = vec2 (14.);\n  if (fragCoord.x >= txSize.x || fragCoord.y >= txSize.y) discard;\n  iFrag = floor (fragCoord);\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  growInt = 1.;\n  init = (iFrame <= 5);\n  aTilt = vec2 (0.);\n  autoRot = 1.;\n  tGame = 60.;\n  if (iFrame > 5) {\n    stDat = Loadv4 (vec2 (3., 0.));\n    el = stDat.y;\n    az = stDat.z;\n    autoRot = Loadv4 (vec2 (1., 0.)).w;\n    mPtrP = vec4 (Loadv4 (vec2 (7., 0.)).yzw, 0.);\n    wgSel = int (Loadv4 (vec2 (3., 0.)).w);\n  }\n  wgBxC = vec3 (0.48 * asp, -0.46, 0.022);\n  if (mPtr.z > 0.) {\n    um = vec2 (0.4, 0.3) * vec2 (asp, 1.);\n    ud = mPtr.xy * vec2 (asp, 1.) - um;\n    if (max (abs (ud.x), abs (ud.y)) < 0.13 || wgSel == 0) {\n      if (wgSel == 0) {\n        aTilt = 2. * ud;\n        autoRot = 0.;\n      }\n      wgReg = 0;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else if (length (mPtr.xy * vec2 (asp, 1.) - wgBxC.xy) < wgBxC.z) {\n      if (mPtrP.z <= 0.) init = true;\n    } else if (wgReg < 0) {\n      az = 2. * pi * mPtr.x;\n      el = clamp (-0.35 * pi + 0.7 * pi * mPtr.y, -0.5 * pi, 0.5 * pi);\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (! init) {\n    nStep = Loadv4 (vec2 (0., 0.)).w;\n    init = (mod ((nStep + 1.) * growInt, 12000.) == 0.);\n  }\n  ar = -1.;\n  if (init) {\n    mPtrP = mPtr;\n    az = 0.;\n    el = -0.35 * pi;\n    autoRot = 1.;\n    nStep = 0.;\n    tBgn = tCur;\n    if (iFrag.y == 0. || iFrag.y == gSize.y - 1.) ar = 1.;\n    else if (iFrag.x == 0.) ar = (iFrag.y >= 2.) ? 0. : 2.;\n    else if (iFrag.x == gSize.x - 1.) ar = (iFrag.y >= gSize.y - 2.) ? 0. : 2.;\n    ballPos = vec2 (-0.5 * gSize.x + 0.8, -0.5 * gSize.y + 2.);\n    ballVel = vec2 (0.);\n    ballQt = vec4 (0., 0., 0., 1.);\n  } else {\n    tBgn = Loadv4 (vec2 (5., 0.)).w;\n    ar = texture (txBuf, fragCoord / txSize).x;\n    if (nStep < 2. * max (gSize.x, gSize.y)) {\n      if (mod (float (iFrame), growInt) == 0. && ar < 0.) {\n        ai = floor (4. * Hashfv2 (iFrag + tCur));\n        e = vec2 (0., 1.);\n        e = (ai < 2.) ? ((ai == 0.) ? e : e.yx) : ((ai == 2.) ? - e : - e.yx);\n        if (texture (txBuf, (fragCoord + e) / txSize).x >= 0.) ar = ai;\n      }\n    }\n    if (iFrag.y == 0. && iFrag.x <= 7.) {\n      if (mod (float (iFrame), growInt) == 0.) ++ nStep;\n      ballPos = Loadv4 (vec2 (2., 0.)).yz;\n      ballVel = Loadv4 (vec2 (6., 0.)).yz;\n      ballQt = vec4 (Loadv4 (vec2 (4., 0.)).yz, Loadv4 (vec2 (5., 0.)).yz);\n      if (autoRot > 0.) aTilt = 0.15 * sin (0.1 * 2. * pi * tCur + vec2 (0., 0.5 * pi));\n      if (nStep > 1.3 * max (gSize.x, gSize.y)) Step ();\n    }\n  }\n  fragColor.x = ar;\n  if (iFrag.y == 0.) {\n    if      (iFrag.x == 0.) fragColor.yzw = vec3 (gSize, nStep);\n    else if (iFrag.x == 1.) fragColor.yzw = vec3 (aTilt, autoRot);\n    else if (iFrag.x == 2.) fragColor.yzw = vec3 (ballPos, 0.);\n    else if (iFrag.x == 3.) fragColor.yzw = vec3 (el, az, float (wgSel));\n    else if (iFrag.x == 4.) fragColor.yzw = vec3 (ballQt.xy, (tCur - tBgn) / tGame);\n    else if (iFrag.x == 5.) fragColor.yzw = vec3 (ballQt.zw, tBgn);\n    else if (iFrag.x == 6.) fragColor.yzw = vec3 (ballVel, 0.);\n    else if (iFrag.x == 7.) fragColor.yzw = vec3 (mPtr.xyz);\n  }\n}\n\nmat3 VToRMat (vec3 v, float a)\n{\n  mat3 m;\n  float c, s, a1, a2;\n  c = cos (a);  s = sin (a);\n  m[0][0] = (1. - c) * v.x * v.x + c;\n  m[1][1] = (1. - c) * v.y * v.y + c;\n  m[2][2] = (1. - c) * v.z * v.z + c;\n  a1 = (1. - c) * v.x * v.y;  a2 = - s * v.z;\n  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = (1. - c) * v.z * v.x;  a2 = - s * v.y;\n  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = (1. - c) * v.y * v.z;  a2 = - s * v.x;\n  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return m;\n}\n\nmat3 QToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQ (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}