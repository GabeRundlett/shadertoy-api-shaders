{
    "Shader": {
        "info": {
            "date": "1563949739",
            "description": "drawing a hyperboloid as a doubly ruled surface.",
            "flags": 64,
            "hasliked": 0,
            "id": "WtsXRs",
            "likes": 7,
            "name": "hyperboloid basket",
            "published": 3,
            "tags": [
                "surface",
                "hyperboloid",
                "ruled"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 1251
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 10.0\n\n// 0.309017\n// 0.9510565\nmat3 twistor = mat3(0.9510565, -0.309017, 0.0,\n                    0.309017, 0.9510565, 0.0,\n                    0.0, 0.0, 1.0);\n\nvec3 thicks = vec3(0.01);\n\nfloat s_min(in float x, in float y, in float s) {\n\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return min(x,y) - 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\nfloat s_max(in float x, in float y, in float s) {\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return max(x,y) + 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\nfloat cyl_sdf(in vec3 p, in vec3 dir, in float radius, in float scale) {\n    float l = length(p - dir * dot(p, dir));\n    return l * max(0.2, 1.0 - 1.5 * scale) -  radius;\n}\n\nfloat bundle(in vec3 p, in float slope_sign) {\n    vec3 ptmp = p;\n    float result = MAX_DIST;\n\n    float lookup = 0.0;\n    for (int i = 0; i < 20; ++i) {\n    \tptmp = twistor * ptmp;\n        \n        result = min(result, cyl_sdf(ptmp - vec3(0.5, 0.0, 0.0),\n                                     vec3(0.0, slope_sign * 0.6, 0.8),\n                                     0.001, \n                                     texture(iChannel0, \n                                             vec2(lookup, 0.0)).r));\n        \n        \n        lookup += 0.05;\n        \n    }\n    return result;\n}\n\n\n    \n\nfloat sdf(in vec3 p) {\n    float s = MAX_DIST;\n    \n    s = bundle(p, 1.0);\n    // s = s_min(s, bundle(p * vec3(-1.0, -1.0, 1.0), -1.0, 0.01 + thicks.y), thicks.z);\n \n    // s = s_max(s, abs(p.z) - 1.25, 0.01);\n    return s;\n}\n\nvec3 normal_to_sdf(in vec3 p) {\n    float f = sdf(p);\n    return normalize(vec3(sdf(p + vec3(0.1, 0.0, 0.0)) - f,\n                          sdf(p + vec3(0.0, 0.1, 0.0)) - f,\n                          sdf(p + vec3(0.0, 0.0, 0.1)) - f));\n}\n\nfloat trace(in vec3 pt, in vec3 dir, out float closest) {\n    float d = sdf(pt);\n    float accum = 0.0;\n    closest = d;\n    vec3 p = pt;\n    for (int i = 0; i < 100; ++i) {\n        accum += 1.0 * d;\n        p = pt + accum * dir;\n        d = sdf(p);\n        closest = min(closest, max(d, 0.0));\n        if (d < 1.0e-2 || accum > MAX_DIST) {\n            return accum;\n        }\n    }\n    return MAX_DIST + 1.0;\n}\n\nvec3 color(in vec3 p, in vec3 dir) {\n    float closest;\n    float d = trace(p, dir, closest);\n    if (d > MAX_DIST) {\n        float weight = 1.0 / (1.0 + 5.0 * closest);\n        return weight * (0.5 + 0.5 * dir);\n    }\n    vec3 at = p + d * dir;\n    vec3 n = normal_to_sdf(at);\n    vec3 b = reflect(dir, n);\n    return 0.5 + 0.5 * b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n\tvec3 dir = normalize(vec3(uv, sqrt(3.0))).zxy;\n    \n    vec3 orig = vec3(0.0);\n    float len = 1.0;\n    vec3 off = vec3(-2.0 * len, 0.0, 0.0);\n\n    \n    float theta = 2.0 * 3.141592654 * iMouse.x / iResolution.x;\n    theta = theta + iTime;\n    float st = sin(theta);\n    float ct = cos(theta);\n \n    mat3 rot = mat3(ct, st, 0.0,\n                    -st, ct, 0.0,\n                    0.0, 0.0, 1.0);\n    dir = rot * dir;\n    off = rot * off;\n\n    orig = orig + off;\n    \n    vec3 col = color(orig, dir);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19290,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/gumnutmusic/nuthouse"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}