{
    "Shader": {
        "info": {
            "date": "1685914683",
            "description": "This shader is made with \"An introduction to Shader Art Coding\" by kishimisu. Check out the video and their channel @ https://www.youtube.com/watch?v=f4s1h2YETNY <3",
            "flags": 0,
            "hasliked": 0,
            "id": "DlGXR1",
            "likes": 1,
            "name": "Introduction by kishimisu #2",
            "published": 3,
            "tags": [
                "neon"
            ],
            "usePreview": 0,
            "username": "grey_",
            "viewed": 122
        },
        "renderpass": [
            {
                "code": "// Cosine-based palette function by Inigo Quilez\n// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t) {\n    // Colors from: http://dev.thi.ng/gradients/\n    // [[0.660 0.560 0.680] [0.337 0.206 0.448] [0.536 0.824 0.536] [-0.393 -0.393 0.107]]\n    vec3 a = vec3(.860, .560, .680);\n    vec3 b = vec3(.337, .206, .448);\n    vec3 c = vec3(.536, .124, .536);\n    vec3 d = vec3(-.393, -.393, .107);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// Almost 100% on \"An introduction to Shader Art Coding\" by kishimisu\n// https://www.youtube.com/watch?v=f4s1h2YETNY\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    // Square variant\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / max(iResolution.x, iResolution.y);\n\n    // Original uv, without tiling.\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.);\n\n    for(float i = 0.0; i < 3.0; i++) {\n        uv = fract(uv * pow(1.5, 1.6)) - .5;\n\n        float d = length(uv) + 9. * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i * .4 + iTime * .4);\n\n        d = sin(d * 8. + iTime) / 8.;\n        d = abs(d);\n\n        // Reduce this further for interesting effects.\n        d = pow(0.01 / d, 1.1);\n\n        finalColor += col * d * sin(palette(max(abs(uv.x), abs(uv.y) * uv0.x))) * 1.9;\n    }\n\n    // The final output color of the current fragment pixel is set as a combination of the previously calculated color ('col')\n    // and a dynamically calculated brightness value ('d'). It is then sent to the buffer as well.\n    fragColor = vec4(finalColor, 1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}