{
    "Shader": {
        "info": {
            "date": "1484331249",
            "description": "Simple spring and torque simulation. Click on the screen to move the spring. I'm not so sure about the correctness of the whole thing since I made everything from scratch.",
            "flags": 32,
            "hasliked": 0,
            "id": "llGXDW",
            "likes": 14,
            "name": "Torque and Spring",
            "published": 3,
            "tags": [
                "mechanics",
                "physics",
                "newton"
            ],
            "usePreview": 0,
            "username": "Klems",
            "viewed": 867
        },
        "renderpass": [
            {
                "code": "\nconst vec2 ADR_POS_VEL = vec2(0, 0); // position in xy, velocity in zw\nconst vec2 ADR_ANG_ANGVEL = vec2(1, 0); // orientation in x, angular velocity in y\nconst vec2 ADR_SPRING = vec2(2, 0); // spring position in xy\n\nvec4 loadValue( in vec2 re ) {\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvec2 getAnchorPos( vec2 cubePos, float cubeAng ) {\n    return cubePos + vec2(cos(cubeAng), sin(cubeAng))*0.4;\n}\n\nvec2 fragToWorld( vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    return uv;\n}\n\nmat2 rot( in float a ) {\n    float c = cos(a);\n    float s = sin(a);\n\treturn mat2(c,s,-s,c);\t\n}\n\nfloat sdCapsule( vec2 p, vec2 a, vec2 b, float r ) {\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragToWorld(fragCoord);\n    \n    vec2 propPos = loadValue(ADR_POS_VEL).xy;\n    float propAng = loadValue(ADR_ANG_ANGVEL).x;\n    vec2 springPos = loadValue(ADR_SPRING).xy;\n    \n    vec2 inCube = uv-propPos;\n    inCube *= rot(propAng);\n    float square = smoothstep(0.42, 0.41, abs(inCube.x) + abs(inCube.y));\n    \n    float spring = sdCapsule(uv, getAnchorPos(propPos, propAng), springPos, 0.004);\n    \n    vec3 col = vec3(square);\n    col = mix(col, vec3(0, 1, 0), smoothstep(0.01, 0.0, spring));\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst vec2 ADR_POS_VEL = vec2(0, 0); // position in xy, velocity in zw\nconst vec2 ADR_ANG_ANGVEL = vec2(1, 0); // orientation in x, angular velocity in y\nconst vec2 ADR_SPRING = vec2(2, 0); // spring position in xy\n\nfloat isInside( vec2 p, vec2 c ) {\n    vec2 d = abs(p-0.5-c) - 0.5001;\n    return -max(d.x,d.y);\n}\n\nvec4 loadValue( in vec2 re ) {\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvec2 getAnchorPos( vec2 cubePos, float cubeAng ) {\n    return cubePos + vec2(cos(cubeAng), sin(cubeAng))*0.4;\n}\n\nvec2 fragToWorld( vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float deltaTime = min(0.1, iTimeDelta);\n    \n    fragColor = loadValue(ADR_POS_VEL);\n    vec2 pos = fragColor.xy;\n    vec2 vel = fragColor.zw;\n    \n    fragColor = loadValue(ADR_ANG_ANGVEL);\n    float ang = fragColor.x;\n    float angVel = fragColor.y;\n    \n    fragColor = loadValue(ADR_SPRING);\n    vec2 spring = fragColor.xy;\n    \n    vec2 anchor = getAnchorPos(pos, ang);\n    \n    // acceleration vector, proportionnal to the spring length according to hooke's law\n    vec2 accelVec = spring - anchor;\n    float len = length(accelVec);\n    accelVec /= len;\n    accelVec *= len - 0.25; // rest distance\n    accelVec *= 6.0;\n    \n    // deal with the position and velocity\n    if ( isInside(fragCoord, ADR_POS_VEL) > 0.0 ) {\n        \n        // base acceleration vector from the spring\n        vec2 acceleration = accelVec;\n        // add gravity\n        acceleration += vec2(0.0, -4.0);\n        // add drag\n        acceleration -= vel * 0.5;\n        \n        vel += acceleration*deltaTime*0.5;\n        pos += vel*deltaTime;\n        vel += acceleration*deltaTime*0.5;\n        \n        fragColor = vec4(pos, vel);\n    }\n    \n    // deal with orientation and torque\n    else if ( isInside(fragCoord, ADR_ANG_ANGVEL) > 0.0 ) {\n        \n        // base torque\n        float torque = cross(vec3(anchor-pos, 0), vec3(accelVec, 0)).z;\n        // add friction\n        torque -= sign(angVel)*0.1;\n        \n        angVel += torque*deltaTime*0.5;\n        ang += angVel*deltaTime;\n        angVel += torque*deltaTime*0.5;\n\n        fragColor = vec4(ang, angVel, 0, 0);\n        \n    }\n    \n    // change spring position\n    else if ( isInside(fragCoord, ADR_SPRING) > 0.0 ) {\n        \n        if (iMouse.z > 0.0) {\n            spring = fragToWorld(iMouse.xy);\n        } else {\n            spring = vec2(sin(iTime*0.7)*1.2, 0.8);\n        }\n\n        fragColor = vec4(spring, 0, 0);\n        \n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}