{
    "Shader": {
        "info": {
            "date": "1672420692",
            "description": "My proudest work yet\nMove mouse to change shrink factor :)",
            "flags": 0,
            "hasliked": 0,
            "id": "dlfGDB",
            "likes": 6,
            "name": "Claude after the LSD hits",
            "published": 3,
            "tags": [
                "2d",
                "chroma",
                "distort",
                "greenscreen",
                "chromakey",
                "matte",
                "compositing",
                "weird",
                "drugs",
                "funny",
                "weed"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "const float TAU = 6.28318530;\n\nfloat getAlpha(vec3 col) {\n    const vec3 green = vec3(0.0, 1.0, 0.0);\n    return smoothstep(0.6, 0.7, distance(col, green));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    const float dirSteps = 32.0;\n    \n    // Shrink factor, change with mouse\n    float radius = iMouse.z > 0.0 ? length(iMouse.xy / iResolution.xy - 0.5) * 500.0 : 30.0;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 bg = vec3(uv.x, 1.0 - uv.y, 1.0) + smoothstep(0.4, 0.6, length(uv - 0.5));\n    \n    fragColor = texture(iChannel0, uv);\n    float alpha = getAlpha(fragColor.rgb);\n    \n    // Correct aspect ratio\n    vec2 aspect = 1.0 / vec2(textureSize(iChannel0, 0));\n    \n    // STEP 1: Find average direction away from edge\n    \n    vec2 dirAvg = vec2(0.0);\n    for (float i = 0.0; i < TAU; i += TAU / dirSteps) {\n        // Move in a circle to find edges within radius\n        vec2 dir = vec2(sin(i), cos(i));\n        vec4 col = texture(iChannel0, uv + dir * aspect * radius);\n        // Edge was found, accumulate for average\n        if (alpha > getAlpha(col.rgb)) dirAvg += dir;\n    }\n    \n    // No edges within radius\n    if (length(dirAvg) <= 0.0) {\n        fragColor.rgb = mix(bg, fragColor.rgb, alpha);\n        return;\n    }\n    \n    // Calculate average direction\n    dirAvg = normalize(dirAvg);\n\n    // STEP 2: Raycast in average direction until an edge is hit\n    \n    float d = radius * 0.5;\n    float move = d * 0.5;\n    // Binary search works better than linear search\n    for (int i = 0; i < 8; i++, move *= 0.5) {\n        vec4 col = texture(iChannel0, uv + dirAvg * aspect * d);\n        d += alpha > getAlpha(col.rgb) ? -move : move;\n    }\n    \n    // Distort the image\n    fragColor = texture(iChannel0, uv + dirAvg * aspect * (radius - d));\n    fragColor.rgb = mix(bg, fragColor.rgb, getAlpha(fragColor.rgb));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}