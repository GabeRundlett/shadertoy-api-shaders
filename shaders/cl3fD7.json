{
    "Shader": {
        "info": {
            "date": "1701283074",
            "description": "I",
            "flags": 0,
            "hasliked": 0,
            "id": "cl3fD7",
            "likes": 1,
            "name": "Gradient Circles Spiral Distort",
            "published": 3,
            "tags": [
                "distortion",
                "spiral",
                "gradient",
                "circl"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 83
        },
        "renderpass": [
            {
                "code": "const float OPACITY = 0.2;\nconst vec3 HALO_COL = vec3(0.2, 0.6, 1.0);\nconst vec3 EDGE1_COL = vec3(1.0, 0.68, 0.66);\nconst vec3 EDGE2_COL = vec3(1.0, 0.3, 0.2);\nconst vec3 BACKGROUND_COL = vec3(0.2);\n\nfloat mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 perm(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\n\nfloat noise(vec3 p)\n{\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat rand1d(float n) { return fract(sin(n) * 43758.5453123); }\n\nvec3 hueShift(vec3 col, float hue) {\n    const vec3 k = vec3(0.57735, 0.57735, 0.57735);\n    float cosa = cos(hue);\n    return vec3(col * cosa + cross(k, col) * sin(hue) + k * dot(k, col) * (1.0 - cosa));\n}\n\nvec2 rot(vec2 v, float a) \n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nvec3 circle(vec2 uv, float off) \n{\n    vec3 col = HALO_COL;\n    float t = iTime * 0.5 + off;\n    float f = 0.0001;\n    uv = rot(uv, 6.2831853 * rand1d(off));\n    float n = noise(vec3(uv * 1.2, t)) * 0.2 + noise(vec3(-uv * 1.7, t)) * 0.15 + noise(vec3(uv * 2.2, t)) * 0.1;\n    \n    float l = length(uv) * 5.0 - iTime;\n    float d = distance(uv, vec2(sin(l), cos(l)));\n    \n    float hd = d + n;\n    float shd = smoothstep(1.0, 1.0 - f, hd);\n    col = pow(vec3(hd), vec3(3.5, 3.5, 2.0)) * HALO_COL * shd;\n    float cd = d * hd * hd * shd * 1.25;\n    col += cd * cd * mix(EDGE1_COL, EDGE2_COL, pow(hd, 8.0)) - (cd * cd * cd) * col;\n    vec3 color = BACKGROUND_COL * 0.5 + col * shd;\n    float glow = smoothstep(1.5, 1.0, hd) * (1.0 - shd * 1.25);\n    col = color + color * glow;\n    col += EDGE2_COL * glow * glow * glow * glow * glow * glow * glow * 0.5;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min_res * 1.1;\n    \n    vec3 col = mix(mix(mix(mix(\n    circle(uv, 0.0), \n    circle(uv, 1000.0), OPACITY), \n    circle(uv, 2000.0), OPACITY), \n    circle(uv, 3000.0), OPACITY), \n    circle(uv, 4000.0), OPACITY);\n    col = 1.0 - col;\n    col = hueShift(col, 3.1415);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}