{
    "Shader": {
        "info": {
            "date": "1645160781",
            "description": "Used in DepthLab: Real-Time 3D Interaction With Depth Maps for Mobile Augmented Reality https://augmentedperception.github.io/depthlab/",
            "flags": 0,
            "hasliked": 0,
            "id": "7slfRX",
            "likes": 1,
            "name": "Turbo and TurboPlus Colormaps",
            "published": 3,
            "tags": [
                "color"
            ],
            "usePreview": 0,
            "username": "starea",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "// Turbo and TuborPlus colormaps\n// Applied in DepthLab: Real-Time 3D Interaction With Depth Maps for Mobile Augmented Reality https://augmentedperception.github.io/depthlab/\n// Also explained in https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html\n\n#define BLACK_BANDS\n\nfloat saturate(float x) {\n  return clamp( x, 0.0, 1.0 );\n}\n\n\nvec3 TurboPlus(in float x) {\n  const float d = 1. / 32.;\n  const vec3[] kColors = vec3[](\n    vec3(0.4796, 0.0158, 0.0106), vec3(0.6754, 0.0898, 0.0045), vec3(0.8240, 0.1918, 0.0197), vec3(0.9262, 0.3247, 0.0584), vec3(0.9859, 0.5048, 0.1337), vec3(0.9916, 0.6841, 0.2071), vec3(0.9267, 0.8203, 0.2257), vec3(0.7952, 0.9303, 0.2039), vec3(0.6332, 0.9919, 0.2394), vec3(0.4123, 0.9927, 0.3983), vec3(0.1849, 0.9448, 0.6071), vec3(0.0929, 0.8588, 0.7724), vec3(0.1653, 0.7262, 0.9316), vec3(0.2625, 0.5697, 0.9977), vec3(0.337, 0.443, 0.925), vec3(0.365, 0.306, 0.859),\n    vec3(0.4310, 0.1800, 0.827),  vec3(0.576, 0.118, 0.859), vec3(0.737, 0.200, 0.886), vec3(0.8947, 0.2510, 0.9137), vec3(1.0000, 0.3804, 0.8431), vec3(1.0000, 0.4902, 0.7451), vec3(1.0000, 0.5961, 0.6471), vec3(1.0000, 0.6902, 0.6039), vec3(1.0000, 0.7333, 0.6157), vec3(1.0000, 0.7804, 0.6431), vec3(1.0000, 0.8275, 0.6824), vec3(1.0000, 0.8706, 0.7255), vec3(1.0000, 0.9098, 0.7765), vec3(1.0000, 0.9451, 0.8235), vec3(1.0000, 0.9725, 0.8588), vec3(1.0000, 0.9922, 0.8863),\n    vec3(1., 1., 1.)\n  );\n  \n  vec3 col = vec3(0.0);\n  for (float i = 0.; i < 32.; i += 1.) {\n    col += (step(d*i, x) - step(d *(i+1.), x)) * mix(kColors[int(i)], kColors[int(i+1.)], saturate((x-d*i)/d));\n  }\n  \n  // Adds the last white colors after 99%.\n  col += step(.99, x) * mix(kColors[31], kColors[32], saturate((x-.99)/.01));\n  \n  return col;\n}\n\n\nvec3 GetPolynomialColor6(in float x, in vec4 kRedVec4, in vec4 kGreenVec4, in vec4 kBlueVec4,\n                       in vec2 kRedVec2, in vec2 kGreenVec2, in vec2 kBlueVec2) {\n  x = saturate(x);\n  vec4 v4 = vec4( 1.0, x, x * x, x * x * x);\n  vec2 v2 = v4.zw * v4.z;\n  return vec3(\n    dot(v4, kRedVec4) + dot(v2, kRedVec2),\n\tdot(v4, kGreenVec4) + dot(v2, kGreenVec2),\n\tdot(v4, kBlueVec4) + dot(v2, kBlueVec2)\n  );\n}\n\n\nvec3 GetPolynomialColor8(in float x, in vec4 kRedVec4, in vec4 kGreenVec4, in vec4 kBlueVec4,\n                       in vec4 kRedVec2, in vec4 kGreenVec2, in vec4 kBlueVec2) {\n  x = saturate(x);\n  vec4 v = vec4( 1.0, x, x * x, x * x * x);\n  vec4 v2 = vec4( v.zw, v.zw * v.z) * v.z;\n  return vec3(\n    dot(v, kRedVec4) + dot(v2, kRedVec2),\n\tdot(v, kGreenVec4) + dot(v2, kGreenVec2),\n\tdot(v, kBlueVec4) + dot(v2, kBlueVec2)\n  );\n}\n\n\nvec3 GetPolynomialColor12(in float x, \n   in vec4 kRedVec, in vec4 kGreenVec, in vec4 kBlueVec,\n   in vec4 kRedVec2, in vec4 kGreenVec2, in vec4 kBlueVec2,\n   in vec4 kRedVec3, in vec4 kGreenVec3, in vec4 kBlueVec3) {\n    x = saturate(x);\n    vec4 v = vec4( 1.0, x, x * x, x * x * x);\n    vec4 v2 = vec4( v.zw, v.zw * v.z) * v.z; // 4, 5, 6, 7\n    vec4 v3 = vec4( v.zw, v2.zw) * v2.z; // 2+6, 3+6, \n    return vec3(\n    dot(v, kRedVec) + dot(v2, kRedVec2) + dot(v3, kRedVec3),\n\tdot(v, kGreenVec) + dot(v2, kGreenVec2) + dot(v3, kGreenVec3),\n\tdot(v, kBlueVec) + dot(v2, kBlueVec2) + dot(v3, kBlueVec3)\n  );\n}\n\nvec3 Turbo(in float x) {\n  x = 1.0 - x;\n  const vec4 kRedVec4 = vec4(0.13572138, 4.61539260, -42.66032258, 132.13108234);\n  const vec4 kGreenVec4 = vec4(0.09140261, 2.19418839, 4.84296658, -14.18503333);\n  const vec4 kBlueVec4 = vec4(0.10667330, 12.64194608, -60.58204836, 110.36276771);\n  const vec2 kRedVec2 = vec2(-152.94239396, 59.28637943);\n  const vec2 kGreenVec2 = vec2(4.27729857, 2.82956604);\n  const vec2 kBlueVec2 = vec2(-89.90310912, 27.34824973);\n  return GetPolynomialColor6(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 GetPolynomialColor(in float x, in vec4 kRedVec4, in vec4 kGreenVec4, in vec4 kBlueVec4,\n                       in vec2 kRedVec2, in vec2 kGreenVec2, in vec2 kBlueVec2) {\n  x = saturate(x);\n  vec4 v4 = vec4( 1.0, x, x * x, x * x * x);\n  vec2 v2 = v4.zw * v4.z;\n  return vec3(\n    dot(v4, kRedVec4) + dot(v2, kRedVec2),\n\tdot(v4, kGreenVec4) + dot(v2, kGreenVec2),\n\tdot(v4, kBlueVec4) + dot(v2, kBlueVec2)\n  );\n}\n\nvec3 Inferno(in float x) {\n  const vec4 kRedVec4 = vec4(-0.027780558, 1.228188385, 0.278906882, 3.892783760);\n  const vec4 kGreenVec4 = vec4(0.014065206, 0.015360518, 1.605395918, -4.821108251);\n  const vec4 kBlueVec4 = vec4(-0.019628385, 3.122510347, -5.893222355, 2.798380308);\n  const vec2 kRedVec2 = vec2(-8.490712758, 4.069046086);\n  const vec2 kGreenVec2 = vec2(8.389314011, -4.193858954);\n  const vec2 kBlueVec2 = vec2(-3.608884658, 4.324996022);\n  return GetPolynomialColor(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 Magma(in float x) {\n  const vec4 kRedVec4 = vec4(-0.023226960, +1.087154378, -0.109964741, +6.3336657630);\n  const vec4 kGreenVec4 = vec4(+0.010680993, +0.176613780, +1.638227448, -6.743522237);\n  const vec4 kBlueVec4 = vec4(-0.008260782, +2.244286052, +3.005587601, -24.279769818);\n  const vec2 kRedVec2 = vec2(-11.640596589, +5.337625354);\n  const vec2 kGreenVec2 = vec2(+11.426396979, -5.523236379);\n  const vec2 kBlueVec2 = vec2(+32.484310068, -12.6882);\n  return GetPolynomialColor(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 Plasma(in float x) {\n  const vec4 kRedVec4 = vec4(+0.063861086, +1.992659096, -1.023901152, -0.490832805);\n  const vec4 kGreenVec4 = vec4(+0.049718590, -0.791144343, +2.892305078, +0.811726816);\n  const vec4 kBlueVec4 = vec4(+0.513275779, +1.580255060, -5.164414457, +4.559573646);\n  const vec2 kRedVec2 = vec2(+1.308442123, -0.914547012);\n  const vec2 kGreenVec2 = vec2(-4.686502417, +2.717794514);\n  const vec2 kBlueVec2 = vec2(-1.916810682, +0.570638854);\n  return GetPolynomialColor(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 TurboPlus2(in float x) {\n  float d = 1. / 32.;\n  const vec3[] kColors = vec3[](\n    vec3(0.4796, 0.0158, 0.0106), vec3(0.6754, 0.0898, 0.0045), vec3(0.8240, 0.1918, 0.0197), vec3(0.9262, 0.3247, 0.0584), vec3(0.9859, 0.5048, 0.1337), vec3(0.9916, 0.6841, 0.2071), vec3(0.9267, 0.8203, 0.2257), vec3(0.7952, 0.9303, 0.2039), vec3(0.6332, 0.9919, 0.2394), vec3(0.4123, 0.9927, 0.3983), vec3(0.1849, 0.9448, 0.6071), vec3(0.0929, 0.8588, 0.7724), vec3(0.1653, 0.7262, 0.9316), vec3(0.2625, 0.5697, 0.9977), vec3(0.2758, 0.4110, 0.8794), vec3(0.2483, 0.2414, 0.6129),\n    vec3(0.3804, 0.0000, 0.4239), vec3(0.5500, 0.0000, 0.6876), vec3(0.8500, 0.1500, 0.8576), vec3(0.8947, 0.2510, 0.9137), vec3(1.0000, 0.3804, 0.8431), vec3(1.0000, 0.4902, 0.7451), vec3(1.0000, 0.5961, 0.6471), vec3(1.0000, 0.6902, 0.6039), vec3(1.0000, 0.7333, 0.6157), vec3(1.0000, 0.7804, 0.6431), vec3(1.0000, 0.8275, 0.6824), vec3(1.0000, 0.8706, 0.7255), vec3(1.0000, 0.9098, 0.7765), vec3(1.0000, 0.9451, 0.8235), vec3(1.0000, 0.9725, 0.8588), vec3(1.0000, 0.9922, 0.8863),\n    vec3(1., 1., 1.)\n  );\n  \n  vec3 col = vec3(0.0);\n  for (float i = 0.; i < 32.; i += 1.) {\n    col += (step(d*i, x) - step(d *(i+1.), x)) * mix(kColors[int(i)], kColors[int(i+1.)], saturate((x-d*i)/d));\n  }\n  \n  // Adds the last white colors behind.\n  col += step(.99, x) * mix(kColors[31], kColors[32], saturate((x-.99)/.01));\n  \n  //col += step(x, d) * mix(kColors[0], kColors[1], saturate(x/d));\n  //col += (step(d, x) - step(d*2., x)) * mix(vec3(0.9859, 0.50479, 0.13367), vec3(0.64920, 0.99416, 0.28237), saturate((x-d)/d));\n  //col += (step(d*2., x) - step(d *3., x)) * mix(vec3(0.64920, 0.99416, 0.28237), vec3(0.15844, 0.73551, 0.92305), saturate((x-d*2.)/d));\n  //col += (step(d*3., x) - step(d *4., x)) * mix(vec3(0.15844, 0.73551, 0.92305), vec3(0.525490196, 0.0, 0.874509804), saturate((x-d*3.)/d));\n  //col += (step(d*4., x) - step(d *5., x)) * mix(vec3(0.525490196, 0.0, 0.874509804), vec3(0.890196078, 0.337254902, 0.88627451), saturate((x-d*4.)/d));\n  \n  // vec3(0.9859, 0.50479, 0.13367);\n  //col += step(.5, x) * mix(vec3(0.18995, 0.07176, 0.23217), vec3(1.0, 0.9922, 0.8904),  saturate((x-0.5)/0.5));\n  //col = texture(iChannel0, vec2(x, 0.5)).rgb;\n  \n  return col;\n}\n\n\nvec3 TurboPlusLog(in highp float x) {\n  const vec4 kRedVec = vec4(0.59113794, 3.16900829, 52.89642789, -643.59893141);\n  const vec4 kGreenVec = vec4(0.11791950, -2.96354342, 90.53068222, -358.27990197);\n  const vec4 kBlueVec = vec4(-0.00310419, 1.30977871, -19.83579702, 191.92611722);\n  const vec4 kRedVec2 = vec4(2251.02981189, -3517.73633738, 2580.28822942, -725.69853887);\n  const vec4 kGreenVec2 = vec4(370.78250135, 281.25373429, -680.93444324, 300.67763485);\n  const vec4 kBlueVec2 = vec4(-622.24890432, 921.22427328, -649.78988729, 178.38954304);\n   \n  vec3 col = GetPolynomialColor8(x, kRedVec, kGreenVec, kBlueVec, kRedVec2, kGreenVec2, kBlueVec2);\n  return pow(col, vec3(1.2));\n}\n\n\nvec3 TurboPlusLinear(in highp float x) {\n  const vec4 kRedVec = vec4(0.46173515, 9.22083635, -34.26051625, -115.58080461);\n  const vec4 kGreenVec = vec4(0.08302509, -2.32628488, 85.82655757, -369.21926583);\n  const vec4 kBlueVec = vec4(-0.02271163, 3.26319467, -62.70877922, 527.02855858);\n  const vec4 kRedVec2 = vec4(703.89772879, -1212.74587245, 896.82155017, -246.83765279);\n  const vec4 kGreenVec2 = vec4(545.79945344, -215.64444787, -141.71031824, 98.22738339);\n  const vec4 kBlueVec2 = vec4(-1812.15734679, 3002.41093024, -2395.64049052, 739.06448700);\n  return GetPolynomialColor8(x, kRedVec, kGreenVec, kBlueVec, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 TurboPlusLog2(in highp float x) {\n  const vec4 kRedVec = vec4(0.55546817, 10.32569510, -228.41083958, 3784.80747541);\nconst vec4 kGreenVec = vec4(0.02637814, 5.75343742, -148.70319297, 2946.64996453);\nconst vec4 kBlueVec = vec4(0.15058610, -21.55034214, 665.88981142, -7957.16657920);\nconst vec4 kRedVec2 = vec4(-33792.67660851, 168174.89549296, -508003.01406935, 974982.11565746);\nconst vec4 kGreenVec2 = vec4(-26187.86131447, 131067.00088319, -407238.26557028, 809987.61796453);\nconst vec4 kBlueVec2 = vec4(48137.30586023, -162178.00445973, 313108.65007430, -325416.83050805);\nconst vec4 kRedVec3 = vec4(116917.59278686, 92868.25390777, -106396.74770902, 30273.58714786);\nconst vec4 kGreenVec3 = vec4(116917.59278686, 92868.25390777, -106396.74770902, 30273.58714786);\nconst vec4 kBlueVec3 = vec4(116917.59278686, 92868.25390777, -106396.74770902, 30273.58714786);\n  return GetPolynomialColor12(x, kRedVec, kGreenVec, kBlueVec, kRedVec2, kGreenVec2, kBlueVec2,\n  kRedVec3, kGreenVec3, kBlueVec3);\n}\n\n\n\n\nfloat tri( float x ) { return 1.0 - abs( fract( x * 0.5 ) - 0.5 ) * 2.0; }\nvec3 smoothstep_unchecked( vec3 x ) { return ( x * x ) * ( 3.0 - x * 2.0 ); }\nvec3 smoothbump( vec3 a, vec3 r, vec3 x ) { return 1.0 - smoothstep_unchecked( min( abs( x - a ), r ) / r ); }\nfloat greyScale(in vec3 col) \n{\n   // return dot(col, vec3(0.3, 0.59, 0.11));\n   return dot(col, vec3(0.2126, 0.7152, 0.0722)); //sRGB\n}\n#ifdef SHADERTOY_STANDALONE\nvoid main()\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n#endif\n{\n\tfragColor.a = 1.0;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float bandWidth = 1.0 / 8.0;\n\n\tif ( uv.y > 1.0 - bandWidth ) fragColor.xyz = Turbo( uv.x );\n\telse if ( uv.y > 1.0 - bandWidth * 2.0 ) fragColor.xyz = vec3(greyScale(Turbo( uv.x )));\n\telse if ( uv.y > 1.0 - bandWidth * 3.0 ) fragColor.xyz = TurboPlus( uv.x );\n\telse if ( uv.y > 1.0 - bandWidth * 4.0 ) fragColor.xyz = vec3(greyScale(TurboPlus( uv.x )));\n\telse if ( uv.y > 1.0 - bandWidth * 5.0 ) fragColor.xyz = Magma( uv.x );\n\telse if ( uv.y > 1.0 - bandWidth * 6.0 ) fragColor.xyz = vec3(greyScale(Magma( uv.x )));\n\telse if ( uv.y > 1.0 - bandWidth * 7.0 ) fragColor.xyz = Inferno( uv.x );\n\telse if ( uv.y > 1.0 - bandWidth * 8.0 ) fragColor.xyz = vec3(greyScale(Inferno( uv.x )));\n    \n\t#ifdef BLACK_BANDS\n\tfloat r = 32.0 / iResolution.y;\n\tfragColor.xyz *= step( r, tri( uv.y / 0.125 ) );\n\t#endif\n\n\t#ifdef PLOT_CURVES\n\tfloat y = fract( uv.y / 0.25 );\n\tfloat r = 6.0 / iResolution.y;\n\tfragColor.xyz += smoothbump( vec3( 0.0 ), vec3( r ), vec3( y ) - fragColor.xyz );\n\t#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}