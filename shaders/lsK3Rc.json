{
    "Shader": {
        "info": {
            "date": "1455786216",
            "description": "Roller-coaster ride; use the mouse for a distant view",
            "flags": 0,
            "hasliked": 0,
            "id": "lsK3Rc",
            "likes": 15,
            "name": "Ride the Loop",
            "published": 3,
            "tags": [
                "rollercoaster",
                "immersive"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 834
        },
        "renderpass": [
            {
                "code": "// \"Ride the Loop\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  p.z -= h * clamp (p.z / h, -1., 1.);\n  return length (p) - r;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nmat3 AxToRMat (vec3 vz, vec3 vy)\n{\n  vec3 vx;\n  vz = normalize (vz);\n  vx = normalize (cross (vy, vz));\n  vy = cross (vz, vx);\n  return mat3 (vec3 (vx.x, vy.x, vz.x), vec3 (vx.y, vy.y, vz.y),\n     vec3 (vx.z, vy.z, vz.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\n#define NCAR 5\n#define NSEG 12\n\nmat3 carMat[NCAR];\nvec3 cPt[NSEG], carPos[NCAR], cPtOrg, cUpCirc, cDnCirc, sunDir;\nfloat tLen[NSEG + 1], tCur, dstFar, hTop, rLoop, sLoop, sHzRamp, rDnCirc,\n   rUpCirc, sDnRamp, sUpRamp, sHzStr, hTrk, wTrk, tWait, vfFast, vfLoop;\nint idObj;\nbool riding;\nconst int nCar = NCAR;\nconst int nSeg = NSEG;\nconst vec4 uVec = vec4 (1., 1., 1., 0.);\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 w;\n  float sd, f;\n  vec2 e = vec2 (0.01, 0.);\n  if (rd.y >= 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (sd, 16.) + 0.2 * pow (sd, 256.);\n    f = Fbm2 (0.02 * (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001)));\n    col = mix (col, vec3 (1.), clamp (0.2 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    w = (riding ? 5. : 0.8) * ro.xz;\n    f = Fbm2 (w);\n    vn = normalize (vec3 (f - Fbm2 (w + e.xy), 0.1, f - Fbm2 (w + e.yx)));\n    col = mix (vec3 (0.4, 0.3, 0.1), vec3 (0.4, 0.5, 0.2), f) *\n         (1. - 0.1 * Noisefv2 (w));\n    col = mix (vec3 (0.6, 0.5, 0.3) * (1. - 0.2 * Fbm2 (137.1 * w)),\n       0.8 * col, smoothstep (7., 8.,\n       0.15 * length (ro.xz * ro.xz * vec2 (2.8, 1.))));\n    col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n    col = mix (col, vec3 (0.45, 0.55, 0.7), pow (1. + rd.y, 64.));\n  }\n  return col;\n}\n\nvoid TrkSetup ()\n{\n  cPtOrg = vec3 (2., 0., -3.);\n  hTop = 1.5;\n  rLoop = 2.2;\n  sLoop = 0.3;\n  sHzRamp = 0.5;\n  rDnCirc = 2.;\n  rUpCirc = rDnCirc + sLoop;\n  sDnRamp = 1.5;\n  sUpRamp = 1.3 * sDnRamp;\n  sHzStr = sDnRamp - sUpRamp + 3. * sHzRamp;\n  wTrk = 0.015;\n  hTrk = 0.025;\n  tWait = 2.;\n  vfFast = 5.;\n  vfLoop = 0.6;\n  cDnCirc = cPtOrg + vec3 (- rDnCirc - sLoop, 0., -2. * sHzRamp);\n  cUpCirc = cPtOrg + vec3 (- rUpCirc + sLoop, 2. * hTop, 2. * sDnRamp +\n     6. * sHzRamp);\n  cPt[0] = cDnCirc + vec3 (- rDnCirc, 0., sHzStr);\n  cPt[1] = cPt[0] + sHzStr * uVec.wwz;\n  cPt[3] = cUpCirc - rUpCirc * uVec.xww;\n  cPt[4] = cUpCirc + rUpCirc * uVec.xww;\n  cPt[2] = cPt[3] - 2. * sHzRamp * uVec.wwz;\n  cPt[5] = cPt[4] - 2. * sHzRamp * uVec.wwz;\n  cPt[7] = cPtOrg + sLoop * uVec.xww;\n  cPt[8] = cPtOrg - sLoop * uVec.xww;\n  cPt[6] = cPt[7] + 4. * sHzRamp * uVec.wwz;\n  cPt[9] = cDnCirc + rDnCirc * uVec.xww;\n  cPt[10] = cDnCirc - rDnCirc * uVec.xww;\n  cPt[nSeg - 1] = cPt[0];\n  tLen[0] = 0.;\n  for (int k = 1; k < nSeg; k ++) tLen[k] = length (cPt[k] - cPt[k - 1]);\n  tLen[4] = pi * rUpCirc;\n  tLen[6] /= 0.5 * (1. + vfFast);\n  tLen[8] = length (vec2 (2. * pi * rLoop, 2. * sLoop)) * (1. + vfLoop);\n  tLen[10] = pi * rDnCirc;\n  for (int k = 7; k < nSeg - 1; k ++) tLen[k] /= vfFast;\n  for (int k = 1; k < nSeg; k ++) tLen[k] += tLen[k - 1];\n  tLen[nSeg] = tLen[nSeg - 1] + tWait;\n}\n\nvec3 TrkPath (float t, out vec3 oDir, out vec3 oNorm)\n{\n  vec3 p, p1, p2, u;\n  float w, ft, s;\n  int ik;\n  t = mod (t, tLen[nSeg]);\n  ik = -1;\n  for (int k = 1; k < nSeg; k ++) {\n    if (t < tLen[k]) {\n      t -= tLen[k - 1];\n      p1 = cPt[k - 1];\n      p2 = cPt[k];\n      w = tLen[k] - tLen[k - 1];\n      ik = k;\n      break;\n    }\n  }\n  oNorm = uVec.wyw;\n  ft = t / w;\n  if (ik < 0) {\n    p = cPt[0];\n    oDir = uVec.wwz;\n  } else if (ik == 2 || ik == 6) {\n    oDir = p2 - p1;\n    if (ik == 6) ft *= (2. + (vfFast - 1.) * ft) / (vfFast + 1.);\n    p.xz = p1.xz + oDir.xz * ft;\n    p.y = p1.y + oDir.y * smoothstep (0., 1., ft);\n    oDir.y *= 6. * ft * (1. - ft);\n    oDir = normalize (oDir);\n  } else if (ik == 4) {\n    ft *= pi;\n    p = cUpCirc;\n    u = vec3 (- cos (ft), 0., sin (ft));\n    p.xz += rUpCirc * u.xz;\n    oDir = cross (oNorm, u);\n  } else if (ik == 8) {\n    ft = (ft < 0.5) ? ft * (1. + vfLoop * (1. - 2. * ft)) :\n       ft * (1. + 2. * vfLoop * (ft - 1.5)) + vfLoop;\n    p = 0.5 * (cPt[7] + cPt[8]);\n    p.x += sLoop * (1. - 2. * ft);\n    ft *= 2. * pi;\n    u = vec3 (0., cos (ft), sin (ft));\n    p.yz += rLoop * (vec2 (1., 0.) - u.yz);\n    oNorm = u;\n    oDir = normalize (vec3 (-2. * sLoop, 2. * pi * rLoop *\n       vec2 (sin (ft), - cos (ft))));\n  } else if (ik == 10) {\n    ft *= pi;\n    p = cDnCirc;\n    u = vec3 (cos (ft), 0., - sin (ft));\n    p.xz += rDnCirc * u.xz;\n    oDir = cross (oNorm, u);\n  } else if (ik < nSeg) {\n    oDir = p2 - p1;\n    p = p1 + oDir * ft;\n    oDir = normalize (oDir);\n  }\n  return p;\n}\n\nfloat TrkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 csTrk, tr;\n  float d, f;\n  csTrk = vec2 (wTrk, hTrk);\n  q = p - cPtOrg;\n  q.y -= rLoop;\n  f = smoothstep (0., 1., atan (abs (q.z), - q.y) / pi);\n  tr = vec2 (length (q.yz) - rLoop, q.x - sign (q.z) * sLoop * f);\n  d = 0.9 * min (max (max (PrBox2Df (tr - sLoop * uVec.wy, csTrk.yx), q.z),\n     q.x - sLoop - wTrk), max (max (PrBox2Df (tr + sLoop * uVec.wy,\n     csTrk.yx), - q.z), - q.x - sLoop - wTrk));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p - 0.5 * (cPt[5] + cPt[6]);\n  f = 0.5 * clamp (q.z / sDnRamp + 1., 0., 2.);\n  q.y -= hTop * (2. * smoothstep (0., 1., f) - 1.);\n  d = max (0.6 * PrBoxDf (q, vec3 (wTrk, hTrk * (1. +\n     2. * abs (f * (1. - f))), sDnRamp)), abs (q.z) - sDnRamp);\n  q = p - 0.5 * (cPt[1] + cPt[2]);\n  f = 0.5 * clamp (q.z / sUpRamp + 1., 0., 2.);\n  q.y -= hTop * (2. * smoothstep (0., 1., f) - 1.);\n  d = min (d, max (0.6 * PrBoxDf (q, vec3 (wTrk, hTrk * (1. +\n     2. * abs (f * (1. - f))), sUpRamp)), abs (q.z) - sUpRamp));\n  d = min (d, PrBoxDf (p - 0.5 * (cPt[2] + cPt[3]), vec3 (csTrk, sHzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cPt[4] + cPt[5]), vec3 (csTrk, sHzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cPt[6] + cPt[7]), vec3 (csTrk, 2. * sHzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cPt[8] + cPt[9]), vec3 (csTrk, sHzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cPt[1] + cPt[10]), vec3 (csTrk, sHzStr)));\n  q = p - 0.5 * (cPt[9] + cPt[10]);\n  d = min (max (PrBox2Df (vec2 (length (q.xz) - rDnCirc, q.y), csTrk), q.z), d);\n  q = p - 0.5 * (cPt[3] + cPt[4]);\n  d = min (d, max (PrBox2Df (vec2 (length (q.xz) - rUpCirc, q.y), csTrk), - q.z));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, colRad, szFac;\n  dMin = dstFar;\n  dMin = TrkDf (p, dMin);\n  szFac = 1.;\n  colRad = 0.02;\n  q = p - cUpCirc - vec3 (0., - hTop, rUpCirc);\n  d = PrCylDf (q.xzy, colRad, hTop);\n  q = p - cUpCirc - vec3 (0., - hTop, - sHzRamp);\n  q.x = abs (q.x) - rUpCirc;\n  d = min (d, PrCylDf (q.xzy, colRad, hTop));\n  q = p - 0.5 * (cPt[1] + cPt[2]) + 0.5 * (hTop + colRad) * uVec.wyw;\n  d = min (d, PrCylDf (q.xzy, colRad, 0.5 * hTop + colRad));\n  q = p - 0.5 * (cPt[5] + cPt[6]) + 0.5 * hTop * uVec.wyw;\n  d = min (d, PrCylDf (q.xzy, colRad, 0.5 * hTop));\n  q = p - cPtOrg - (rLoop + 0.03) * uVec.wyw;\n  q.x = abs (q.x) - sLoop - wTrk - 0.15;\n  d = min (d, PrCylDf (q.xzy, colRad, rLoop + 0.03));\n  q = p - cPtOrg - vec3 (0., 2. * (rLoop + 0.03), 0.);\n  d = min (d, PrCylDf (q.yzx, colRad, sLoop + wTrk + 0.18));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  dMin *= szFac;\n  for (int k = 0; k < nCar; k ++) {\n    if (riding && k == nCar - 1) continue;\n    q = carMat[k] * (p - carPos[k]);\n    q.y -= hTrk + 0.04;\n    q *= szFac;\n    d = max (PrCapsDf (q, 0.085, 0.125),\n       - max (PrCapsDf (q + vec3 (0., -0.03, 0.), 0.08, 0.12), -0.015 - q.y));\n    if (d < dMin) { dMin = d;  idObj = 3; }\n  }\n  dMin /= szFac;\n  q = p - 0.5 * uVec.wyw;\n  q.xz = Rot2D (q.xz, (0.5 + floor (atan (q.z, - q.x) * (4. / pi))) * pi / 4.);\n  q.x += 10.;\n  d = PrCylDf (q.xzy, 0.05, 0.5);\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q.y -= 0.6;\n  q.xz = abs (q.xz) - 0.1;\n  d = PrSphDf (q, 0.15);\n  if (d < dMin) { dMin = d;  idObj = 5; }\n  q = p - cPt[0] - 0.5 * hTrk * uVec.wyw;\n  q.x = abs (q.x) - 0.2;\n  d = PrBoxDf (q, vec3 (0.15, 0.5 * hTrk, 0.4));\n  q = p - cDnCirc + (rDnCirc - 0.1) * uVec.wwz;\n  d = min (d, max (min (PrCylAnDf (q.yzx, 0.3, 0.015, 0.6),\n     PrBoxDf (q, vec3 (0.6, 0.005, 0.3))), - q.y));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  d = p.y;\n  if (d < dMin) { dMin = d;  idObj = 6; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.03;\n  for (int j = 0; j < 25; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 30. * h / d));\n    d += min (0.25, 2. * h);\n    if (h < 0.001) break;\n  }\n  return 0.8 + 0.2 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn;\n  float dstHit;\n  int idObjT;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = (idObj == 6) ? uVec.wyw : ObjNf (ro);\n    idObj = idObjT;\n    if (idObj != 6) {\n      if (idObj == 1) {\n        objCol = vec4 (0.9, 0.9, 1., 0.5);\n        for (int k = 0; k <= 10; k ++) {\n          if (length (ro - cPt[k]) < 0.035) { \n            objCol.rgb *= 0.7;\n            break;\n          }\n        }\n      } else if (idObj == 2)\n         objCol = vec4 (0.8, 0.5, 0.2, 0.1) * (1. - 0.2 * Fbm2 (100. * ro.xz));\n      else if (idObj == 3) objCol = vec4 (1., 0., 0., 0.5);\n      else if (idObj == 4) objCol = vec4 (0.5, 0.3, 0., 0.1);\n      else if (idObj == 5) objCol = vec4 (0., 1., 0., 0.1);\n      col = objCol.rgb * (0.3 + 0.7 * max (dot (vn, sunDir), 0.)) +\n         objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    } else col = BgCol (ro, rd);\n    if (! riding) col *= ObjSShadow (ro, sunDir);\n  } else col = BgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvec3 GlareCol (vec3 rd, vec3 sd, vec2 uv)\n{\n  vec3 col;\n  vec2 sa;\n  const vec3 e = vec3 (1., 0., -1.);\n  const vec2 hax = vec2 (0.866, 0.5);\n  uv *= 2.;\n  if (sd.z > 0.) {\n    sa = uv + 0.3 * sd.xy;\n    col = 0.05 * pow (sd.z, 8.) *\n       (e.xyy * max (dot (normalize (rd + vec3 (0., 0.3, 0.)), sunDir), 0.) +\n       e.xxy * (1. - smoothstep (0.11, 0.12, max (abs (sa.y),\n       max (abs (dot (sa, hax)), abs (dot (sa, hax * e.xz)))))) +\n       e.xyx * SmoothBump (0.32, 0.4, 0.04, length (uv - 0.7 * sd.xy)) +\n       0.8 * e.yxx * SmoothBump (0.72, 0.8, 0.04, length (uv + sd.xy)));\n  } else col = vec3 (0.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, oDir, oNorm, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float az, el, zmFac, vel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 60.;\n  TrkSetup ();\n  vel = 0.8;\n  for (int k = 0; k < nCar; k ++) {\n    carPos[k] = TrkPath (vel * tCur - tWait + tLen[nSeg] *\n       float (nCar - 1 - k) / float (nCar), oDir, oNorm);\n    carMat[k] = AxToRMat (oDir, oNorm);\n  }\n  riding = (mPtr.z <= 0.);\n  if (riding) {\n    ro = carPos[nCar - 1];\n    vuMat = carMat[nCar - 1];\n    ro += (hTrk + 0.2) * oNorm - 0.3 * oDir +\n       3. * wTrk * cross (oNorm, oDir).x * uVec.xww;\n    zmFac = 2.2;\n    rd = normalize (vec3 ((1./0.5) * sin (0.5 * uv.x), uv.y, zmFac)) * vuMat;\n  } else {\n    el = 0.05;\n    az = -0.5 * pi;\n    if (mPtr.z > 0.) {\n      el = clamp (el - 8. * mPtr.y, 0., 0.45 * pi);\n      az -= 7. * mPtr.x;\n    }\n    ori = vec2 (el, az);\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n       mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n    ro = vec3 (0., 1., -15.) * vuMat;\n    zmFac = 3.;\n    rd = normalize (vec3 (uv, 3.)) * vuMat;\n  }\n  sunDir = normalize (vec3 (cos (0.02 * tCur), 1., sin (0.02 * tCur)));\n  col = (! riding || abs (uvs.y) < 0.85) ? \n     ShowScene (ro, rd) + GlareCol (rd, vuMat * sunDir, uv) : vec3 (0.);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}