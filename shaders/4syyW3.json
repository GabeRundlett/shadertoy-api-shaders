{
    "Shader": {
        "info": {
            "date": "1523455052",
            "description": "experiment.",
            "flags": 0,
            "hasliked": 0,
            "id": "4syyW3",
            "likes": 3,
            "name": "Low-resolution effect",
            "published": 3,
            "tags": [
                "effect"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 651
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\n\n// https://docs.google.com/presentation/d/1NMhx4HWuNZsjNRRlaFOu2ysjo04NgcpFlEhzodE8Rlg/edit#slide=id.g368d0406a6_1_68\nfloat dotCircle(vec2 uv, vec2 p, float n){\n\tvec2 dividedPos = (floor(uv * n)+0.5)/n;\n\tfloat d = distance(p,dividedPos);\n\treturn (1.0 + sin(d * 3.0 -iTime * 3.0)) * 0.5;\n}\n\nfloat calculatePositionAndDraw(vec2 uv, float n, float index, float t, float deg, float height, float dist) {\n\tfloat x = cos(((index*deg)+t)*(DEG_TO_RAD))*dist;\n\tfloat y = (sin(((index*deg)+t)*(DEG_TO_RAD))*dist)/height;\n\t\n\treturn dotCircle(uv,vec2(x,y),n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord.xy * 2.0 - iResolution.xy ) / min( iResolution.x, iResolution.y );\n\n\tfloat num = 5.0;\n\tfloat index = 0.0;\n\tfloat dist = 1.3;\n\tfloat deg = (360.0/num);\n\tfloat height = 2.0+abs(sin(iTime*0.1));\n\t\n\tfloat t = (iTime*60.0);\n\t\n\tfloat n = 10.0;\n\tfloat d1 = calculatePositionAndDraw(uv,n,index,t,deg,height,dist);\n\t\n\tindex = 1.0;\n\tfloat d2 =  calculatePositionAndDraw(uv,n,index,t,deg,height,dist);\n\t\n\tindex = 2.0;\n\tfloat d3 =  calculatePositionAndDraw(uv,n,index,t,deg,height,dist);\n\t\n\tindex = 3.0;\n\tfloat d4 =  calculatePositionAndDraw(uv,n,index,t,deg,height,dist);\n\t\n\tindex = 4.0;\n\tfloat d5 =  calculatePositionAndDraw(uv,n,index,t,deg,height,dist);\n\t\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\tfragColor = vec4(\n\t\t(vec3(d1)+col)*\n\t\t(vec3(d2)+vec3(0.6,0.0,0.0))*\n\t\t(vec3(d3)+col)*\n\t\t(vec3(d4)+vec3(0.0,0.7,0.0))*\n\t\t(vec3(d5)+col)\n\t\t, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}