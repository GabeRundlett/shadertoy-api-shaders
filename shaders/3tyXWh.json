{
    "Shader": {
        "info": {
            "date": "1582571530",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "3tyXWh",
            "likes": 13,
            "name": "Day 67",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 611
        },
        "renderpass": [
            {
                "code": "\n\n// LOG SPHERICAL MAPPING FROM THIS AWESOME ARTICLE\n// https://www.osar.fr/notes/logspherical/\n// ^^ $$ ^^ $$ ^^\n\n// it's super easy to use to as a tool\n// and very interesting to read about\n\n// code and comments in map function also from the author\n\n// shadows from inigo quilez\n\n// color scheme stolen from evvvvil's https://www.shadertoy.com/view/wt33RN\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor -= fragColor; \n    // fragColor = vec4(0);\n    \n    float t = texture(iChannel0, fragCoord/R).w;\n    float st = 40.;\n    \n    vec2 uv = (fragCoord - 0.5*R)/R.y;\n    float chromAbAmt = smoothstep(0.,1., dot(uv,uv))*1.4;\n    \n    fragColor += vec4(\n        texture(iChannel0, (fragCoord + vec2(1)*chromAbAmt)/R).x,\n        texture(iChannel0, (fragCoord - vec2(1,0)*chromAbAmt)/R ).y,\n        texture(iChannel0, (fragCoord - vec2(1)*chromAbAmt)/R ).z,\n        0.\n    );\n    \n    \n    \n    vec4 bloom = texture(iChannel1, fragCoord/R, 0.);\n    //fragColor = mix(fragColor, bloom, length(bloom.xyz));\n    fragColor += bloom*0.6;\n    \n    \n    fragColor *= 1. - dot(uv,uv);\n    fragColor.r *= 1.06;\n    fragColor.b *= 1.04;\n    fragColor.b *= 0.95;\n    fragColor.xyz *= 1.9;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\nvec3 glowB = vec3(0);\n#define pi acos(-1.)\n    #define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\nfloat lpscale = 4.;\n\nfloat random(vec2 u){\n\treturn fract(sin(u.y*4125.1 + u.x *125.625)*225.5235);\n} \n\nfloat noise(vec2 p) {\n\tvec2 i = ceil(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3. - 2. * f);\n   \tfloat a = random(i);\n    float b = random(i + vec2(1., 0.));\n    float c = random(i + vec2(0., 1.));\n    float d = random(i + vec2(1., 1.));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n}\n\n#define dmin(a,b) a.x < b.x ? a : b\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n    \n    vec3 q = p;\n\tfloat r = length(p);\n\tp = vec3(log(r), acos(p.z / length(p)), atan(p.y, p.x));\n\n\t// Get a scaling factor to compensate for pinching at the poles\n\t// (there's probably a better way of doing this)\n\tfloat xshrink = 1./(abs(p.y-pi)) + 1.0/(abs(p.y)) - 1.0/pi;\n\n\t// Scale to fit in the ]-pi,pi] interval\n\tp *= lpscale;\n\t// Apply rho-translation, which yields zooming\n\tp.x -= 0. + iTime;\n\t\n    \n\t// Turn tiled coordinates into single-tile coordinates\n\tp = fract(p*0.5) * 2.0 - 1.0;\n\tp.x *= xshrink;\n    \n    \n    // \n    p = abs(p);\t\n    p.xz *= rot(0.2*pi);\n    float thickness = 0.1 ;\n    \n\n    \n\t// Get cylinder distance\n\tfloat ret = max(abs(p.x)- thickness, abs(p.z)- thickness) ;\n    \n\tret = min(ret, max(abs(p.x)- thickness, abs(p.y)- thickness) );\n    \n\td.x = ret;\n\td.y = 0.;\n    \n    vec2 dB =vec2(\n\t\tret = min(\n            max(abs(p.x)- thickness*1.3, abs(p.z)- thickness*0.3), \n            max(abs(p.x)- thickness*1.3, abs(p.y)- thickness*0.3) )\n        , 1.);\n\td = dmin(d, dB);\n    \n    \n    glowB += exp(-dB.x*100.);\n\t// Compensate for all the scaling that's been applied so far\n\tfloat mul = r/lpscale/xshrink;\n\td.x = d.x * mul ;\n    \n    \n    d.x *= 0.5;\n\treturn d;\n}\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = vec2(10e7);\n\thit = false; t = 0.; p = ro;\n    \n    for(int i = 0; i < 160; i++){\n    \td = map(p);\n        glow += exp(-d.x*900.);\n        if(d.x < 0.00001){\n        \thit = true;\n            break;\n        }\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n\treturn d;\n}\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross( dir, right));\n\treturn normalize(dir + right*uv.x + up*uv.y);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.00001,0);\n    return normalize(\n    \tvec3(\n        \tmap(p+t.xyy).x - map(p-t.xyy).x,\n        \tmap(p+t.yxy).x - map(p-t.yxy).x,\n        \tmap(p+t.yyx).x - map(p-t.yyx).x\n        )\n    );\n}\n\nvec3 getNormalO(vec3 p){\n\tvec2 t = vec2(0.00005,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p-t.xyy).x,\n    \tmap(p-t.yxy).x,\n    \tmap(p-t.yyx).x\n    ));\n}\n\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, int technique )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<52; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n\n        // traditional technique\n        if( technique==0 )\n        {\n        \tres = min( res, 10.0*h/t );\n        }\n        // improved technique\n        else\n        {\n            // use this if you are getting artifact on the first iteration, or unroll the\n            // first iteration out of the loop\n            //float y = (i==0) ? 0.0 : h*h/(2.0*ph); \n\n            float y = h*h/(2.0*ph);\n            float d = sqrt(h*h-y*y);\n            res = min( res, 10.0*d/max(0.0,t-y) );\n            ph = h;\n        }\n        \n        t += h;\n        \n        if( res<0.01 || t>tmax ) break;\n        \n    }\n    return clamp( res, 0., 1.0 );\n}\n\n#define T (iTime*0.25)\n#define mx (10.*iMouse.x/iResolution.x)\n#define my (10.*iMouse.y/iResolution.x)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. + dot(uv,uv)*(0.56); // squish coords\n    \n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    \n    ro.z -= 1.5;\n    ro.x -= sin(2.*T/pi)*(0.9);\n    ro.y -= cos(2.*T/pi)*(0.9);\n    \n    vec3 lookAt = vec3(0);\n    vec3 rd = getRd(ro, lookAt, uv);\n    rd.xz *= rot(sin(iTime*0.5)*0.1);\n    rd.xy *= rot(sin(iTime*0.5)*0.1);\n    //rd.xz *= rot(0.5);\n    vec3 p; float t; bool hit;\n    vec2 d = march(ro, rd, p, t,hit);\n    #define ao(d) clamp(map(p+n*d).x/d,0.,1.)\n\n    vec3 lightColA = vec3(0.1,0.4,0.9);\n    vec3 lightColB = vec3(0.25,0.2,0.20)*0.1;\n    if(hit){\n        // do lighting from two light sources\n        vec3 l = normalize(-p);\n        \n        l.xz *= rot(sin(iTime*0.12 + 0.2)*0.1 + 0.3);\n        l.xy *= rot(sin(iTime*0.08 + 0.4)*0.1);\n        \n        float shad = calcSoftshadow( p,l, 0.1, 100., 1 );\n        \n        shad = pow(smoothstep(0.,1.,shad*20. ), 2.);\n\n    \tvec3 n = getNormal(p);\n        vec3 h = normalize(l - rd);\n        \n        float diff = max(dot(n, l),0.);\n        float spec = pow(max(dot(n, h),0.), 20.);\n        float fres = pow(max(1. - dot(n, -rd),0.), 5.);\n\t\t\n        vec3 lightCol = lightColA;\n        vec3 albedo = vec3(0.5,0.5,0.7)*1.;\n        if(d.y == 1.){\n        \talbedo = vec3(1.5,1.,1.)*1.;\n        }\n        \n        col += albedo*diff*lightCol + spec*lightCol + fres*lightCol;\n        \n        col += albedo*0.02*lightCol;\n        \n        //l = normalize(vec3(-0.4,0.1,-1));\n        l = normalize(p);\n        h = normalize(l - rd);\n        \n        diff = max(dot(n, l),0.);\n        spec = pow(max(dot(n, h),0.), 20.);\n        fres = pow(max(1. - dot(n, -rd),0.), 5.);\n\t\t\n        lightCol = lightColB;\n        \n        col += (albedo*diff*lightCol + spec*lightCol + fres*lightCol)*0.9;\n        \n        col += albedo*0.01*lightCol;\n        \n        col = col*shad;\n    }\n    col = mix(col, col + glow*0.03*vec3(0.1,0.4,0.9),\n              pow( smoothstep(0.,1.,exp(-length(p)*1.5)), 4.)\n             ); \n    col = mix(col,lightColB, smoothstep(0.,1.,t*0.1 ));\n    \n    col = clamp(col,0., 20.);\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col,t);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MIPLVL 1.\n\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define R iResolution.xy\n#define t(uv) texture(iChannel0, (uv)/R)\n\nvec4 gaussian(sampler2D chan, vec2 uv, vec2 iResolution, float mip){\n    float st = 4.;\n    vec3 t = vec3(st, 0., -st);\n    vec4 C = vec4(0);\n\t#define TC(uv) texture(chan, (uv)/R, mip) \n    // don't do defines like this lol\n    C += 4.*TC(uv);\n    C += 2.*TC(uv - t.xy) + 2.*TC(uv + t.xy) + 2.*TC(uv - t.yx) + 2.*TC(uv - t.yx);\n    C += 1.*TC(uv - t.xx) + 1.*TC(uv + t.xx) + 2.*TC(uv - t.xz) + 2.*TC(uv - t.xz);\n\n    return C / 16.;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    C = vec4(0);\n    \n    C += gaussian(iChannel0, fragCoord,R,MIPLVL);\n    //C += T(fragCoord);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    C = vec4(0);\n    \n    C += gaussian(iChannel0, fragCoord,R,MIPLVL);\n    //C += T(fragCoord);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    C = vec4(0);\n    \n    C += gaussian(iChannel0, fragCoord,R,MIPLVL);\n    //C += T(fragCoord);\n    \n    C *= smoothstep(0.,1., pow(length(C.xyz)*1., 2.));\n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}