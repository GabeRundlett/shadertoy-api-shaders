{
    "Shader": {
        "info": {
            "date": "1702448918",
            "description": "Playing around with additive/feedback sinusoidal noise",
            "flags": 0,
            "hasliked": 0,
            "id": "mttfWH",
            "likes": 4,
            "name": "Ghost Noise",
            "published": 3,
            "tags": [
                "noise",
                "abstract",
                "sine"
            ],
            "usePreview": 0,
            "username": "Real_NC",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "// iq hash modified for vec2\nconst uint k = 1103515245U;\n\nvec2 hash( uvec2 x)\n{\n    x = ((x>>8U)^x.yx)*k;\n    x = ((x>>8U)^x.yy)*k;\n    x = ((x>>8U)^x.xx)*k;\n    \n    return vec2(x)*(1.0/float(0xffffffffU));\n    //return hash(uvec3(x, 2)).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y*8. + iTime*0.1;\n    uv -= uv.yx*0.25;\n    fragColor = vec4(0.2);\n    \n    for(int i = 0; i <= 16; i++)\n    {\n        vec2 h = hash(uvec2(i*3 + 104, 108 + i*4))*2. - 1.;\n        fragColor += cos(iTime*0.2 - dot(h,uv) * float(1+i))/float(1+i);\n        uv += fragColor.xy*0.3;\n    }\n    \n    fragColor *= 0.5;\n    fragColor *= fragColor;\n    fragColor += vec4(60,0,30,0)*pow(max(0.2-fragColor.x, 0.0), 3.);\n    //fragColor = abs(fragColor);\n    //fragColor = pow(fragColor, vec4(1./2.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}