{
    "Shader": {
        "info": {
            "date": "1531805161",
            "description": "A non-self-intersecting cylindrical sheet",
            "flags": 32,
            "hasliked": 0,
            "id": "4ltyz4",
            "likes": 24,
            "name": "Floppy Cylinder",
            "published": 3,
            "tags": [
                "hexagon",
                "dynamics",
                "physics",
                "quadtree"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 735
        },
        "renderpass": [
            {
                "code": "// \"Floppy Cylinder\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  A non-self-intersecting cylindrical sheet (adapted from \"Stonewashed Flag\");\n  mouse controls box rotation, right top/bottom corners to view balls or step count.\n\n  Set LBIG = 0,1 in all shaders for resolution level.\n  Set SCYL = 0,1 in all shaders for square or cylinder.\n*/\n\n#define SCYL   1   // sheet/cylinder (0,1)\n#define LBIG   0   // grid size (0,1)\n#define AA     0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nmat3 QtToRMat (vec4 q);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (vec2 vId);\n\n#if LBIG\nconst int nBallEy = 65;\n#else\nconst int nBallEy = 33;\n#endif\n\n#if SCYL\nconst int nBallEx = nBallEy - 1;\n#else\nconst int nBallEx = nBallEy;\n#endif\n\nconst int nBBall = 8;\nconst int nsMax = 2000;\n\nvec3 ltDir, vnBall, rdSign, vnSBall;\nvec2 qgHit;\nfloat dstFar, hbLen, bRad, spLen, vuMode, nsCount;\nint idObj;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (2 * n, nBallEy)).xyz;\n}\n\nfloat SheetRay (vec3 ro, vec3 rd)\n{\n  vec3 r, q;\n  vec2 g;\n  float d, dMin, sz, szMax, szMin, grLen;\n  bvec2 ilt;\n  bool bkTrak;\n  grLen = 0.92 * spLen;\n  dMin = dstFar / grLen;\n  rd /= grLen;\n  szMax = float (nBallEy - 1);\n  szMin = 1./32.;\n  g = vec2 (0.);\n  bkTrak = false;\n  sz = szMax;\n  nsCount = 0.;\n  for (int ns = 0; ns < nsMax; ns ++) {\n    if (sz == szMin) {\n      r = GetR (g) - ro;\n      q = cross (r, rd);\n      if (dot (q, q) < sz * sz) {\n        d = dot (rd, r);\n        if (d < dMin) {\n          dMin = d;\n          qgHit = g;\n        }\n      }\n      bkTrak = true;\n    }\n    q = cross (GetR (g + 0.5 * sz) - ro, rd);\n    bkTrak = bkTrak || (dot (q, q) > sz * sz);\n    if (bkTrak) {\n      bkTrak = false;\n      ilt = lessThan (fract (g / (2. * sz)), vec2 (0.5));\n      g.x += ilt.x ? sz : - sz;\n      if (! ilt.x) {\n        g.y += ilt.y ? sz : - sz;\n        if (! ilt.y) {\n          sz *= 2.;\n          if (sz == szMax) break;\n          bkTrak = true;\n        }\n      }\n    } else if (sz > szMin) sz *= 0.5;\n    ++ nsCount;\n  }\n  return dMin * grLen;\n}\n\nvec3 GetRC (vec2 v)\n{\n  return GetR (clamp (v, vec2 (0.), vec2 (nBallEy - 1)));\n}\n\nvec3 SheetNf () \n{\n  vec3 c;\n  vec2 gx, gy;\n  vec2 e = vec2 (1., 0.);\n  c = GetRC (qgHit);\n  gx = qgHit + e;\n#if SCYL\n  gx.x = mod (gx.x, float (nBallEx));\n#endif\n  gy = qgHit + e.yx;\n  return normalize (cross (GetRC (gy) - c, GetRC (gx) - c));\n}\n\nfloat SBallHit (vec3 ro, vec3 rd)\n{\n  vec3 u;\n  float dMin, rad, b, d, w;\n  rad = 0.5;\n  dMin = dstFar;\n  for (int iy = 0; iy < nBallEy; iy ++) {\n    for (int ix = 0; ix < nBallEx; ix ++) {\n      u = ro - GetR (vec2 (ix, iy));\n      b = dot (rd, u);\n      w = b * b - (dot (u, u) - rad * rad);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0. && d < dMin) {\n          dMin = d;\n          vnSBall = (u + d * rd) / rad;\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BBallHit (vec3 ro, vec3 rd)\n{\n  vec3 u;\n  float dMin, d, rad, b, w;\n  dMin = dstFar;\n  rad = bRad + 0.65;\n  for (int n = 0; n < nBBall; n ++) {\n    u = ro - GetRB (n);\n    b = dot (rd, u);\n    w = b * b - (dot (u, u) - rad * rad);\n    if (w > 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 fVec;\n  vec3 q, eLen, eShift;\n  float dMin, d, eWid, sLen;\n  dMin = dstFar;\n  sLen = hbLen - 0.7;\n  eWid = 0.05;\n  eShift = vec3 (0., sLen, sLen);\n  eLen = vec3 (sLen + eWid, eWid, eWid);\n  fVec = sLen * vec4 (rdSign, 0.);\n  d = min (min (PrBoxDf (p - fVec.xww, eLen.yxx),\n     PrBoxDf (p - fVec.wyw, eLen.xyx)), PrBoxDf (p - fVec.wwz, eLen.xxy));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = abs (p);\n  d = min (min (PrBoxDf (q - eShift, eLen), PrBoxDf (q - eShift.yxz, eLen.yxz)),\n     PrBoxDf (q - eShift.yzx, eLen.yzx));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 50; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat WallAO (vec3 p)\n{\n  float ao;\n  ao = 1.;\n  for (int n = 0; n < nBBall; n ++) {\n    ao = SmoothMin (ao, smoothstep (0.1, 2., length (GetRB (n) - p) - (bRad + 0.65)), 0.5);\n  }\n  for (int iy = 0; iy < nBallEy; iy ++) {\n    for (int ix = 0; ix < nBallEx; ix ++) {\n      ao = SmoothMin (ao, smoothstep (0.1, 2.5, length (GetR (vec2 (ix, iy)) - p) - 0.5), 0.5);\n    }\n  }\n  return 0.6 + 0.4 * ao;\n}\n\nfloat SheetSilHit (vec3 ro, vec3 rd)\n{\n  vec3 blkSize, pMin, pMax, v, tm, tp;\n  float dn, df;\n  pMin = Loadv4 (vec2 (2 * nBBall + 3, nBallEy)).xyz;\n  pMax = Loadv4 (vec2 (2 * nBBall + 4, nBallEy)).xyz;\n  ro -= 0.5 * (pMin + pMax);\n  blkSize = 0.5 * (pMax - pMin) + 0.5;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = blkSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, w;\n  vec2 b, ib;\n  float dstBall, dstObj, dstSheet, c, dEdge;\n  dstBall = BBallHit (ro, rd);\n  if (SheetSilHit (ro, rd) < dstFar) {\n    if (vuMode == 1.) dstSheet = SBallHit (ro, rd);\n    else dstSheet = SheetRay (ro, rd);\n  } else dstSheet = dstFar;\n  rdSign = sign (rd);\n  dstObj = ObjRay (ro, rd);\n  col = vec3 (0.);\n  if (min (min (dstBall, dstObj), 1.01 * dstSheet) < dstFar) {\n    if (dstSheet < min (dstBall, dstObj)) {\n      if (vuMode == 0.) {\n        vn = SheetNf ();\n        b = 13. * qgHit / (0.5 * vec2 (nBallEy - 1)) + vec2 (0., 0.5);\n        ib = PixToHex (b);\n        dEdge = HexEdgeDist (b - HexToPix (ib));\n        c = mod (dot (mod (2. * ib + ib.yx, 3.), vec2 (1., 2.)), 3.);\n        col4 = (c == 0.) ? vec4 (0.7, 0.6, 0.2, 0.5) : ((c == 1.) ? vec4 (0.6, 0.2, 0.2, 0.5) :\n           vec4 (0.2, 0.6, 0.2, 0.5));\n        col4 = mix (vec4 (0., 0., 0.4, 0.1), col4, smoothstep (0.08, 0.13, dEdge));\n        if (dot (rd, vn) > 0.) col4 = vec4 (0.8 * col4.rgb, 0.);\n        b = abs (qgHit - 0.5 * float (nBallEy - 1)) - 0.5 * float (nBallEy - 1) + 0.1;\n#if SCYL\n        if (b.y > 0.) col4 = vec4 (0., 1., 1., 0.1);\n#else\n        if (max (b.x, b.y) > 0.) col4 = vec4 (0., 1., 1., 0.1);\n#endif\n      } else if (vuMode == 1.) {\n        vn = vnSBall;\n        col4 = vec4 (0.7, 0.4, 0.1, 0.2);\n      } else if (vuMode == 2.) {\n        vn = SheetNf ();\n        col4 = vec4 (HsvToRgb (vec3 (max (0.7 - nsCount / float (nsMax), 0.), 1., 0.9)), 0.1);\n      }\n    } else if (dstBall < dstObj) {\n      vn = vnBall;\n      col4 = vec4 (0.2, 0.2, 0.6, 0.1);\n    } else if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        w = smoothstep (0., 0.07, abs (fract (5. * ro / hbLen + 0.5) - 0.5));\n        col = vec3 (mix (vec3 (0.4), vec3 (0.5, 0.5, 0.7),\n           dot (abs (vn) * w.yzx * w.zxy, vec3 (1.))));\n        col *= WallAO (ro);\n      } else if (idObj == 2) col = vec3 (0.45);\n      col4 = vec4 (col, 0.1);\n    }\n    col = col4.rgb * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 qtVu, stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, uvv;\n  float zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  stDat = Loadv4 (vec2 (2 * nBBall, nBallEy));\n  spLen = stDat.x;\n  hbLen = stDat.y;\n  dstFar = 11. * hbLen;\n  bRad = 0.1 * hbLen;\n  qtVu = Loadv4 (vec2 (2 * nBBall + 1, nBallEy));\n  vuMat = QtToRMat (qtVu);\n  stDat = Loadv4 (vec2 (2 * nBBall + 2, nBallEy));\n  vuMode = stDat.w;\n  zmFac = 4.2;\n  ro = vec3 (0., 0., -6. * hbLen) * vuMat;\n  ltDir = normalize (vec3 (-0.5, 1., -1.)) * vuMat;\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0., 0., 0.05);\n  for (float a = 0.; a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.), 0.5 * pi * (a + 0.5));\n    rd = normalize (vec3 (uvv, zmFac)) * vuMat;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.7)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. -\n     3.) - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Floppy Cylinder\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define SCYL   1\n#define LBIG   0\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#if LBIG\nconst int nBallEy = 65;\n#else\nconst int nBallEy = 33;\n#endif\n\n#if SCYL\nconst int nBallEx = nBallEy - 1;\n#else\nconst int nBallEx = nBallEy;\n#endif\n\nconst int nBBall = 8;\n\nvec4 qtVu;\nvec3 gravVec, pMin, pMax;\nivec2 idNeb[4], idNebD[4];\nfloat hbLen, spLen, fOvlap, bRad, ntStep;\nconst float pi = 3.14159;\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetV (vec2 v)\n{\n  return Loadv4 (vec2 (v.x + float (nBallEy), v.y)).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (2 * n, nBallEy)).xyz;\n}\n\nvec3 GetVB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 1, nBallEy)).xyz;\n}\n\nvec3 SpringForce (ivec2 iv, vec3 r, vec3 v)\n{\n  vec3 dr, f;\n  ivec2 ivn;\n  float spLenD, fSpring, fDamp;\n  fSpring = 50.;\n  fDamp = 0.5;\n  f = vec3 (0.);\n  for (int n = 0; n < 4; n ++) {\n    ivn = iv + idNeb[n];\n#if SCYL\n    if (ivn.y >= 0 && ivn.y < nBallEy) {\n      if (ivn.x < 0) ivn.x = nBallEx - 1;\n      else if (ivn.x == nBallEx) ivn.x = 0;\n#else\n    if (ivn.y >= 0 && ivn.y < nBallEy && ivn.x >= 0 && ivn.x < nBallEx) {\n#endif\n      dr = r - GetR (vec2 (ivn));\n      f += fSpring * (spLen - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  spLenD = spLen * sqrt (2.);\n  for (int n = 0; n < 4; n ++) {\n    ivn = iv + idNebD[n];\n#if SCYL\n    if (ivn.y >= 0 && ivn.y < nBallEy) {\n      if (ivn.x < 0) ivn.x = nBallEx - 1;\n      else if (ivn.x == nBallEx) ivn.x = 0;\n#else\n    if (ivn.y >= 0 && ivn.y < nBallEy && ivn.x >= 0 && ivn.x < nBallEx) {\n#endif\n      dr = r - GetR (vec2 (ivn));\n      f += 5. * fSpring * (spLenD - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  return f;\n}\n\nvec3 BendForce (ivec2 iv, vec3 r)\n{\n  vec3 dr1, dr2, rt, f;\n  ivec2 ivd, ivp, ivm;\n  float s, c11, c22, c12, cd, fBend;\n  bool doInt;\n  fBend = 500.;\n  f = vec3 (0.);\n  for (int nd = 0; nd < 2; nd ++) {\n    ivd = (nd == 0) ? ivec2 (1, 0) : ivec2 (0, 1);\n    for (int k = 0; k < 3; k ++) {\n      doInt = false;\n      if (nd == 0) {\n#if SCYL\n        if (k == 0) {\n          ivp = iv - ivd;\n          if (ivp.x < 0) ivp.x += nBallEx;\n          ivm = ivp - ivd;\n          if (ivm.x < 0) ivm.x += nBallEx;\n          doInt = true;\n        } else if (k == 2) {\n          ivm = iv + ivd;\n          if (ivm.x >= nBallEx) ivm.x -= nBallEx;\n          ivp = ivm + ivd;\n          if (ivp.x >= nBallEx) ivp.x -= nBallEx;\n          doInt = true;\n        } else if (k == 1) {\n          ivp = iv + ivd;\n          if (ivp.x >= nBallEx) ivp.x -= nBallEx;\n          ivm = iv - ivd;\n          if (ivm.x < 0) ivm.x += nBallEx;\n          doInt = true;\n        }\n#else\n        if (k == 0 && iv.x > 1) {\n          ivp = iv - ivd;\n          ivm = ivp - ivd;\n          doInt = true;\n        } else if (k == 2 && iv.x < nBallEx - 2) {\n          ivm = iv + ivd;\n          ivp = ivm + ivd;\n          doInt = true;\n        } else if (k == 1 && (iv.x > 0 && iv.x < nBallEx - 1)) {\n          ivp = iv + ivd;\n          ivm = iv - ivd;\n          doInt = true;\n        }\n#endif\n      } else {\n        if (k == 0 && iv.y > 1) {\n          ivp = iv - ivd;\n          ivm = ivp - ivd;\n          doInt = true;\n        } else if (k == 2 && iv.y < nBallEy - 2) {\n          ivm = iv + ivd;\n          ivp = ivm + ivd;\n          doInt = true;\n        } else if (k == 1 && (iv.y > 0 && iv.y < nBallEy - 1)) {\n          ivp = iv + ivd;\n          ivm = iv - ivd;\n          doInt = true;\n        }\n      }\n      if (doInt) {\n        if (k == 0) {\n          rt = GetR (vec2 (ivp));\n          dr1 = rt - GetR (vec2 (ivm));\n          dr2 = r - rt;\n          s = -1.;\n        } else if (k == 2) {\n          rt = GetR (vec2 (ivm));\n          dr1 = rt - r;\n          dr2 = GetR (vec2 (ivp)) - rt;\n          s = -1.;\n        } else {\n          dr1 = r - GetR (vec2 (ivm));\n          dr2 = GetR (vec2 (ivp)) - r;\n          s = 1.;\n        }\n        c11 = 1. / dot (dr1, dr1);\n        c12 = dot (dr1, dr2);\n        c22 = 1. / dot (dr2, dr2);\n        cd = sqrt (c11 * c22);\n        s *= fBend * cd * (c12 * cd - 1.);\n        if (k <= 1) f += s * (dr1 - c12 * c22 * dr2);\n        if (k >= 1) f += s * (c12 * c11 * dr1 - dr2);\n      }\n    }\n  }\n  return f;\n}\n\nvec3 PairForce (ivec2 iv, vec3 r)\n{\n  vec3 dr, f;\n  float rSep;\n  int nx, ny;\n  f = vec3 (0.);\n  nx = 0;\n  ny = 0;\n  for (int n = 0; n < nBallEx * nBallEy; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr);\n    if (rSep > 0.01 && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n    if (++ nx == nBallEx) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n  return f;\n}\n\nvec3 WallForce (vec3 r)\n{\n  vec3 dr;\n  dr = hbLen - abs (r);\n  return - step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvec3 WallForceB (vec3 r)\n{\n  vec3 dr;\n  dr = hbLen - 1.2 * bRad - abs (r);\n  return -50. * step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvec3 BShForce (vec3 r)\n{\n  vec3 dr, f;\n  float rSep;\n  f = vec3 (0.);\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n  return f;\n}\n\nvec3 BShForceB (vec3 r)\n{\n  vec3 dr, f;\n  float rSep;\n  int nx, ny;\n  f = vec3 (0.);\n  nx = 0;\n  ny = 0;\n  for (int n = 0; n < nBallEx * nBallEy; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n    if (++ nx == nBallEx) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n  return f;\n}\n\nvec3 BBForce (int mId, vec3 r, vec3 v)\n{\n  vec3 dr, f;\n  float rSep;\n  f = vec3 (0.);\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - 2. * bRad;\n    if (n != mId && rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n  return f;\n}\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec2 (1, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec2 (0, 1);\n  idNeb[3] = - idNeb[2];\n  idNebD[0] = ivec2 (1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec2 (1, -1);\n  idNebD[3] = - idNebD[2];\n}\n\nvoid Step (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt;\n#if SCYL\n  if (iv.x == nBallEx) iv.x = 0;\n#endif\n  IdNebs ();\n  fDamp = 0.5;\n  r = GetR (vec2 (iv));\n  v = GetV (vec2 (iv));\n  f = PairForce (iv, r) + SpringForce (iv, r, v) + BendForce (iv, r) +\n     WallForce (r) + BShForce (r) - gravVec - fDamp * v;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvoid StepB (int mId, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt, biMass;\n  fDamp = 0.5;\n  biMass = 0.02;\n  r = GetRB (mId);\n  v = GetVB (mId);\n  f = biMass * (BBForce (mId, r, v) + WallForceB (r) + BShForceB (r) -\n     2. * fDamp * v) - gravVec;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvec3 VInit (int n)\n{\n  float fn;\n  fn = float (n);\n  return 2. * normalize (vec3 (Hashff (fn), Hashff (fn + 0.3),\n     Hashff (fn + 0.6)) - 0.5);\n}\n\nvoid Init (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 vSum;\n  float a, s;\n#if SCYL\n  if (iv.x == nBallEx) iv.x = 0;\n#endif\n  for (int iy = 0; iy < nBallEy; iy ++) {\n    for (int ix = 0; ix < nBallEx; ix ++) {\n      if (iv.x == ix && iv.y == iy) {\n#if SCYL\n        a = 2. * pi * float (ix) / float (nBallEx);\n        s = float (nBallEx) / (2. * pi);\n        r = vec3 (s * cos (a), float (iy) - 0.5 * (float (nBallEy) - 1.), s * sin (a));\n#else\n        r = vec3 (ix, iy, 0.);\n        r.xy -= 0.5 * (vec2 (nBallEx, nBallEy) - 1.);\n#endif\n        r *= 0.97 * spLen;\n      }\n    }\n  }\n  vSum = vec3 (0.);\n  for (int n = 0; n < nBallEx * nBallEy; n ++) vSum += VInit (n);\n  v = VInit (iv.y * nBallEx + iv.x) - vSum / float (nBallEx * nBallEy);\n}\n\nvoid InitB (int mId, out vec3 r, out vec3 v)\n{\n  float fn;\n  fn = float (mId);\n  r = 0.4 * hbLen * (2. * vec3 (mod (fn, 2.), floor (mod (fn, 4.) / 2.),\n     floor (fn / 4.)) - 1.);\n  v = vec3 (0.);\n}\n\nvoid SheetLims ()\n{\n  vec3 p;\n  pMin = vec3 (1e6);\n  pMax = - pMin;\n  for (int iy = 0; iy < nBallEy; iy ++) {\n    for (int ix = 0; ix < nBallEx; ix ++) {\n      p = GetR (vec2 (ix, iy));\n      pMin = min (pMin, p);\n      pMax = max (pMax, p);\n    }\n  }\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 p, r, v;\n  ivec2 pxIv, iv;\n  float tCur, vuMode;\n  int mId, pxId, ms, mt;\n  pxIv = ivec2 (fragCoord);\n  pxId = pxIv.x + 2 * nBallEy * pxIv.y;\n  ms = nBallEy * nBallEy;\n  mt = ms + nBBall;\n  if (pxIv.x >= 2 * nBallEy || pxId >= 2 * mt + 5) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  qtVu = Loadv4 (vec2 (2 * nBBall + 1, nBallEy));\n  stDat = Loadv4 (vec2 (2 * nBBall + 2, nBallEy));\n  mPtrP = vec4 (stDat.xyz, 0.);\n  vuMode = stDat.w;\n  iv = pxIv;\n  if (iv.x >= nBallEy) iv.x -= nBallEy;\n  mId = iv.y * nBallEy + iv.x;\n  if (iFrame <= 5) {\n    spLen = 1.1;\n    hbLen = 0.55 * spLen * float (nBallEy - 1);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    vuMode = 0.;\n    ntStep = 0.;\n    if (mId < ms) {\n      Init (iv, r, v);\n      p = (pxIv.x >= nBallEy) ? v : r;\n    } else if (pxId >= 2 * ms && pxId < 2 * mt) {\n      mId = (pxId - 2 * ms) / 2;\n      InitB (mId, r, v);\n      p = (2 * mId == pxId - 2 * ms) ? r : v;\n    }\n  } else {\n    vuMode = 0.;\n    if (mPtr.z > 0.) {\n      if (mPtr.x > 0.45 && mPtr.y < -0.45) {\n        vuMode = 2.;\n        mPtr = mPtrP;\n      } else if (mPtr.x > 0.45 && mPtr.y > 0.45) {\n        vuMode = 1.;\n        mPtr = mPtrP;\n      }\n    }\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    stDat = Loadv4 (vec2 (2 * nBBall, nBallEy));\n    spLen = stDat.x;\n    hbLen = stDat.y;\n    bRad = 0.1 * hbLen;\n    fOvlap = 1000.;\n    gravVec = vec3 (0., 2., 0.) * QtToRMat (qtVu);\n    ntStep = stDat.w;\n    ++ ntStep;\n    if (mPtrP.z < 0.) qtVu = normalize (QtMul (EulToQt (0.004 *\n       pi * vec3 (0.27, -0.34, 0.11)), qtVu));   \n    if (mId < ms) {\n      Step (iv, r, v);\n      p = (pxIv.x >= nBallEy) ? v : r;\n    } else if (pxId >= 2 * ms && pxId < 2 * mt) {\n      mId = (pxId - 2 * ms) / 2;\n      StepB (mId, r, v);\n      p = (2 * mId == pxId - 2 * ms) ? r : v;\n    }\n  }\n  if (pxId == 2 * mt + 3 || pxId == 2 * mt + 4) SheetLims ();\n  if (pxId < 2 * ms) stDat = vec4 (p, 0.);\n  else {\n    if      (pxId < 2 * mt) stDat = vec4 (p, 0.);\n    else if (pxId == 2 * mt + 0) stDat = stDat = vec4 (spLen, hbLen, tCur, ntStep);\n    else if (pxId == 2 * mt + 1) stDat = qtVu;\n    else if (pxId == 2 * mt + 2) stDat = vec4 (mPtrP.xyz, vuMode);\n    else if (pxId == 2 * mt + 3) stDat = vec4 (pMin, 0.);\n    else if (pxId == 2 * mt + 4) stDat = vec4 (pMax, 0.);\n  }\n  Savev4 (vec2 (pxIv), stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n     q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n     q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n   - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n   - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}