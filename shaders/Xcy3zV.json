{
    "Shader": {
        "info": {
            "date": "1712955503",
            "description": "restoring \"random pixel sprites\" stb shader (was 48 likes)",
            "flags": 0,
            "hasliked": 0,
            "id": "Xcy3zV",
            "likes": 39,
            "name": "[stb] random pixel sprites",
            "published": 3,
            "tags": [
                "stb"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "/*\n    random pixel sprites\n    2021 stb\n    also posted to http://glslsandbox.com/e#71376\n    \n    Update: I hopefully fixed most of the grid artifacts.\n*/  \n\n\n// changeables\n\n// enable antialiasing (disable if shader is too slow)\n#define aa\n\nconst float zoom        = 5.;  // zoom\nconst float animSpeed   = .1;  // speed of animation\nconst float mosaic      = 24.; // mosaic (even integers only)\nconst float spriteSize  = .271; // sprite size (0. to ~.5)\nconst float offsetSize  = .094;  // size of noise for mask and pattern offsets\nconst float patternSize = .213;  // size of noise for pattern\nconst float patternOffs = 2.17; // amount pattern can be perturbed\nconst float maskOffs    = .312;  // amount mask can be perturbed\n\n// ~changeables\n\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n// Dave_Hoskins\n#define MOD3 vec3(.1031, .11369, .13787) // int range\n//#define MOD3 vec3(443.8975, 397.2973, 491.1871) // uv range\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\nvec2 hash23(vec3 p3) {\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n#define o vec3(-1., 0., 1.)\n\n// smooth hash functions\nvec2 sHash22(vec2 p) {\n    return\n        mix(\n            mix(\n                hash22(floor(p)),\n                hash22(floor(p)-o.xy),\n                smoothstep(0., 1., fract(p.x))\n            ),\n            mix(\n                hash22(floor(p)-o.yx),\n                hash22(floor(p)-o.xx),\n                smoothstep(0., 1., fract(p.x))\n            ),\n            smoothstep(0., 1., fract(p.y))\n        );\n}\nvec2 sHash23(vec3 p) {\n    return\n        mix(\n            mix(\n                hash23(floor(p)),\n                hash23(floor(p)-o.xyy),\n                smoothstep(0., 1., fract(p.x))\n            ),\n            mix(\n                hash23(floor(p)-o.yxy),\n                hash23(floor(p)-o.xxy),\n                smoothstep(0., 1., fract(p.x))\n            ),\n            smoothstep(0., 1., fract(p.y))\n        );\n}\n\n#define mask(o) step(1., 1. - (length(p-maskOffs*(.5-sHash23(vec3(p-o/mosaic, z)/offsetSize))-o/mosaic))+spriteSize)\n\n// random procedural sprites\nvec3 procSprites(in vec2 p) {\n    \n    // a different sprite for each cell\n    float z = 53.7823 * hash12(13.3901*floor(p));\n    \n    // mosaic, repeat, mirror\n    p = floor(p*mosaic) / mosaic;\n    p = fract(p) - .5;\n    p.x = abs(p.x);\n    \n    // pattern offset\n    vec2 off = (.5-sHash22(p/offsetSize)) * patternOffs;\n    \n    // pattern\n    vec3 col = hash33( vec3(floor(p/patternSize-off-z), z) );\n    col = pow(col, vec3(.75));\n    \n    // build up a nice outline from adjacent mask cells\n    float mask = mask(0.), outline = mask;\n    for(float y=-1.; y<2.; y++)\n        for(float x=-1.; x<2.; x++)\n            outline = max(outline, mask(vec2(x, y)));\n            \n    // draw black outline\n    if(mask<.5)\n        col = vec3(0.);\n    \n    // draw white background\n    if(outline<.5)\n        col = vec3(1.);\n    \n    return col;\n}\n\n// blended procSprites\nvec3 sProcSprites(in vec2 p, float pxs) {\n    vec2 p2 = floor(p*mosaic-.5*mosaic)/mosaic+.5/mosaic;\n    return\n        mix(\n            mix(\n                procSprites(p2-o.yy/mosaic),\n                procSprites(p2-o.xy/mosaic),\n                smoothstep(.5-pxs, .5+pxs, fract(p.x*mosaic))\n            ),\n            mix(\n                procSprites(p2-o.yx/mosaic),\n                procSprites(p2-o.xx/mosaic),\n                smoothstep(.5-pxs, .5+pxs, fract(p.x*mosaic))\n            ),\n            smoothstep(.5-pxs, .5+pxs, fract(p.y*mosaic))\n        );\n}\n\nvoid mainImage( out vec4 fo, in vec2 fc ) {\n\tvec2 res = iResolution.xy;\n\tvec2 p = (fc-res/2.) / res.y;\n    \n    // scrolling\n    p.y += animSpeed * iTime;\n    p -= (iMouse.xy-res/2.) / res.y;\n    \n    // zoom\n    p *= zoom;\n    \n    vec3 col = vec3(0.);\n    \n    // use antialiasing or not\n    #ifdef aa\n        col = sProcSprites(p, 1.*mosaic*zoom/res.y);\n    #else\n        col = procSprites(p);\n    #endif\n    \n    // result\n\tfo = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}