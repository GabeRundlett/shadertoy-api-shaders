{
    "Shader": {
        "info": {
            "date": "1703429206",
            "description": "Mathematical pendulum: exact solution (green) vs. small-angle approximation (gray).",
            "flags": 0,
            "hasliked": 0,
            "id": "McfGWS",
            "likes": 3,
            "name": "Mathematical pendulum",
            "published": 3,
            "tags": [
                "integral",
                "pendulum",
                "elliptic",
                "jacobi"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// See https://en.wikipedia.org/wiki/Pendulum_(mechanics)\n\nconst float pi=3.14159265358979323846;\n\n// Complete elliptic integral of the 1st kind.\n// Accuracy: error is less than 4 ulp on [0;1)\n// in float32.\n// NOTE: this produces K(1)=NaN (same as\n// std::comp_ellint_1(1.0) in C++) even though\n// K(1)=inf seems reasonable.\nfloat K(float k)\n{\n    k=abs(k);\n    if(k<0.9765625)\n    {\n        // Arithmetic-geometric mean approach.\n        float a=1.0,b=sqrt(1.0-k*k);\n        for(int i=0;i<4;++i)\n        {\n            float an=0.5*(a+b);\n            float bn=sqrt(a*b);\n            a=an;\n            b=bn;\n        }\n        return pi/(2.0*a);\n    }\n    else\n    {\n        // Series expansion at k=1.\n        // K(1-x) = -1/2 log(x/8) + 1/4 (-log(x) + log(8) - 1) x + 1/32 (-5 log(x) + 15 log(2) - 7) x^2 + 1/192 (-21 log(x) + 63 log(2) - 34) x^3 + ...\n        float x=1.0f-k,y=log(x);\n        return (1.03972077084-0.5*y)\n            +x*(0.26986038542-0.25*y\n            +x*(0.10616274088-0.15625*y\n            +x*(0.05035558528-0.109375*y)));\n    }\n}\n\n// Jacobi elliptic amplitude.\n// Assumes range-reduced argument (accuracy worsens for |u|>4*K(k)).\n// Accuracy not tested much.\nfloat am(float u,float k)\n{\n    // Arithmetic-geometric mean approach.\n    float a0=1.0,b0=sqrt(1.0-k*k)/*,c0=sqrt(1.0-b0*b0)*/;\n    float a1=0.5*(a0+b0),  b1=sqrt(a0*b0),  c1=0.5*(a0-b0);\n    float a2=0.5*(a1+b1),  b2=sqrt(a1*b1),  c2=0.5*(a1-b1);\n    float a3=0.5*(a2+b2),  b3=sqrt(a2*b2),  c3=0.5*(a2-b2);\n    float a4=0.5*(a3+b3),/*b4=sqrt(a3*b3),*/c4=0.5*(a3-b3);\n    float phi4=16.0*a4*u;\n    float phi3=0.5*(phi4+asin((c4/a4)*sin(phi4)));\n    float phi2=0.5*(phi3+asin((c3/a3)*sin(phi3)));\n    float phi1=0.5*(phi2+asin((c2/a2)*sin(phi2)));\n    float phi0=0.5*(phi1+asin((c1/a1)*sin(phi1)));\n    return phi0;\n}\n\n// Jacobi elliptic cd(u;k) function.\n// Accuracy not tested much.\nfloat cd(float u,float k)\n{\n    // Range reduction.\n    // Easy to reduce to quarter-period ([0;K]) with\n    // several cases, but let's just reduce to full period.\n    u=mod(u,4.0*K(k));\n    float a=am(u,k),sn=sin(a),cn=cos(a),dn=sqrt(1.0-k*k*sn*sn);\n    return cn/dn;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float A0=pi/2.0;\n    float w=1.0;\n    vec2 O=vec2(0.0,1.0);\n    vec3 col=vec3(0.25);\n    if(true) // Exact solution.\n    {\n        float k=sin(A0/2.0);\n        float theta=2.0*asin(k*cd(w*iTime,k));\n        vec2 P=O+vec2(sin(theta),-cos(theta));\n        float a=smoothstep(0.05,0.04,length(xy-P))+\n            smoothstep(0.01,0.00,abs(dot(P-O,vec2(xy.y-O.y,O.x-xy.x))))*smoothstep(1.01,0.99,length(xy-O));\n        col+=vec3(0.25,0.625,0.25)*clamp(a,0.0,1.0);\n    }\n    if(true) // Small-angle approximation.\n    {\n        float theta=A0*cos(w*iTime);\n        vec2 P=O+vec2(sin(theta),-cos(theta));\n        float a=smoothstep(0.05,0.04,length(xy-P))+\n            smoothstep(0.01,0.00,abs(dot(P-O,vec2(xy.y-O.y,O.x-xy.x))))*smoothstep(1.01,0.99,length(xy-O));\n        col+=vec3(0.5,0.5,0.5)*clamp(a,0.0,1.0);\n    }\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}