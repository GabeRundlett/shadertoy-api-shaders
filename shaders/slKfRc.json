{
    "Shader": {
        "info": {
            "date": "1664978943",
            "description": "Inspired by Conway's Game of Life, I found interesting mazes emerge from a 3x3 kernel.",
            "flags": 32,
            "hasliked": 0,
            "id": "slKfRc",
            "likes": 7,
            "name": "Cellular Mazes",
            "published": 3,
            "tags": [
                "noise",
                "cellular",
                "pattern",
                "cell",
                "maze",
                "gameoflife",
                "automaton",
                "pebble"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord / gridSize), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define cell(offset) texelFetch(iChannel0, ivec2(fragCoord) + offset, 0).x\nconst int resetAfter = 64;\n\nfloat rand(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Skip invisible pixels\n    if (fragCoord.x * gridSize > iResolution.x || fragCoord.y * gridSize > iResolution.y) discard;\n\n    if (iFrame % resetAfter == 0) {\n    \n        // Initialize values, random noise\n        fragColor = vec4(vec3(rand(fragCoord / iResolution.xy)), 1.0);\n        \n    } else {\n    \n        // Sample current pixel directly\n        float self = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n\n        // Sum of neighbours, 3 x 3 kernel\n        float sum = cell(ivec2(-1,  1)) + cell(ivec2(0,  1)) + cell(ivec2(1,  1))\n                  + cell(ivec2(-1,  0))                      + cell(ivec2(1,  0))\n                  + cell(ivec2(-1, -1)) + cell(ivec2(0, -1)) + cell(ivec2(1, -1));\n                 \n        // Swap pattern every 64 frames\n        float offset = sum > float((1 + iFrame / resetAfter) % 8) ? -0.1 : 0.1;\n        fragColor = vec4(vec3(clamp(self + offset, 0.0, 1.0)), 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float gridSize = 8.0;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}