{
    "Shader": {
        "info": {
            "date": "1515364847",
            "description": "Just a test",
            "flags": 0,
            "hasliked": 0,
            "id": "XljBWz",
            "likes": 2,
            "name": "Test Line",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "maniatic0",
            "viewed": 486
        },
        "renderpass": [
            {
                "code": "\nvoid testThickness (in vec2 pos, in vec2 f, in float thickness, in vec3 line, inout vec3 color) \n{\n    float realVal = length(f - pos);\n\tfloat val = step(realVal, thickness)/* * (1.0-smoothstep(0.0, thickness, realVal)) */;\n    color = val * line + (1.0 - val) * color;\n}\n\nvoid testThicknessSquare (in vec2 pos, in vec2 f, in float thickness, in vec3 line, inout vec3 color) \n{\n\tfloat realVal = abs(f.x - pos.x);\n    float realVal2 = abs(f.y - pos.y);\n\tfloat val = step(realVal, thickness) * step(realVal2, thickness);\n    color = val * line + (1.0 - val) * color;\n}\n\nvoid drawAxis(in vec2 uv, inout vec3 pixel)\n{\n    //float square_thickness = 0.004;\n    float square_thickness = 2. / iResolution.y;\n    vec3 squareColor = vec3(0.7);\n    /*\n    float test;\n    float range = iResolution.x / iResolution.y;\n    for(float i = 0.0; i <= range; i += 1.0/10.0) \n    {\n        test = step(abs(uv.x - i), square_thickness) + step(abs(uv.x + i), square_thickness)\n            + step(abs(uv.y - i), square_thickness) + step(abs(uv.y + i), square_thickness);\n        test = clamp(test, 0.0, 1.0);\n    \tpixel = test * squareColor + (1.0 - test) * pixel;\n    }\n\t*/\n    \n    float test;\n    test = step(mod(abs(uv.x),1./10.), square_thickness) + step(mod(abs(uv.y),1./10.), square_thickness);\n    test = clamp(test, 0.0, 1.0);\n    pixel = test * squareColor + (1.0 - test) * pixel;\n    \n    \n\n    float axe_thickness = 2. / iResolution.y;\n    vec3 axeColor = vec3(1.0, 0.0, 0.0);\n    vec2 x_axe = vec2(uv.x, 0.0);\n    vec2 y_axe = vec2(0.0, uv.y);\n    testThicknessSquare(uv, y_axe, axe_thickness, axeColor, pixel);\n    testThicknessSquare(uv, x_axe, axe_thickness, axeColor, pixel);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv_center = fragCoord.xy / iResolution.y; // square\n    vec2 uv = 2.0 * uv_center - iResolution.xy / iResolution.y; // Centered\n    \n    vec3 background = vec3(1.0);\n    vec3 pixel = background;\n    \n    drawAxis(uv, pixel);\n    \n    //float line_thickness = 0.04 + 0.02 * cos(iTime);\n    float line_thickness = 15./iResolution.y + 10./iResolution.y * cos(iTime);\n    vec3 line = vec3(0.5+0.5*sin(iTime), 0.5+0.5*sin(uv.y+uv.x*iTime), 0.5+0.5*sin(uv.x+uv.y*iTime));\n    vec2 f = vec2(uv.x,(1.0-line_thickness)*sin(uv.x+iTime));\n    testThickness(uv, f, line_thickness, line, pixel);\n    \n    fragColor = vec4(pixel, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}