{
    "Shader": {
        "info": {
            "date": "1592585490",
            "description": "a rhombic dodecahedral honeycomb domain repetition!",
            "flags": 0,
            "hasliked": 0,
            "id": "3djBDh",
            "likes": 42,
            "name": "Packed Spheres SDF",
            "published": 3,
            "tags": [
                "sdf",
                "packedspheres",
                "spherepacking"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 1088
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\n//the following functions assume that p is inside the cube of radius 1 centered at the origin\n//closest vertex of the cube to p\nvec3 vertex(vec3 p) {\n    return max(sign(p),vec3(0))*2.-1.;\n}\n//closest face of the cube to p\nvec3 face(vec3 p) {\n    vec3 ap = abs(p);\n    if (ap.x>=max(ap.z,ap.y)) return vec3(sign(p.x),0.,0.);\n    if (ap.y>=max(ap.z,ap.x)) return vec3(0.,sign(p.y),0.);\n    if (ap.z>=max(ap.x,ap.y)) return vec3(0.,0.,sign(p.z));\n    return vec3(0);\n}\n//closest edge of the cube to p\nvec3 edge(vec3 p) {\n    vec3 mask = vec3(1)-abs(face(p));\n    vec3 v = vertex(p);\n    vec3 a = v*mask.zxy, b = v*mask.yzx;\n    return distance(p,a)<distance(p,b)?a:b;\n}\n\nfloat hills(vec3 p) {\n    return sin(2.*dot(sin(p.xy/16.), cos(p.xy/4.)))*3.;\n}\n\nfloat super(vec3 p) {\n    return sqrt(length(p*p));\n}\n\n//rhombic dodecahedron SDF with rounded corners\nfloat rho_dod(vec3 p)\n{\n    float offset = 0.1;\n    float radius = .9;\n    p = sqrt(p*p+offset*offset/2.);\n    p = (p+p.yzx)-radius;\n    return super(max(p,0.))+min(0.,max(p.x,max(p.y,p.z)))-offset;\n}\n\nfloat spheres(vec3 p, out vec3 id, out vec3 loc, float density) {\n    vec3 op = p;\n    id = floor(p)+.5;\n    vec3 d = face(p-id);\n    vec3 m = sign(mod(id,2.)-1.);\n    if (m.x*m.y*m.z<0.) id += d;\n    if (id.z + hills(id) > -5.) { //if this ball is absent, get the distance to its neighbour\n        vec3 e = edge(p-id);\n        id += e;\n    }\n    p -= id;\n    float rad = 0.7;\n    float sph = mix(rho_dod(p), length(p)-.7, smoothstep(-.2,.2,cos(iTime)));\n    loc = p;\n    return max((op.z+3.5+hills(op))/2.,sph);\n}\n\nfloat scene(vec3 p) {\n    vec3 id,loc;\n    float s1 = spheres(p, id, loc, 0.4);\n    return s1;\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvec3 skycol(vec3 p) {\n    float dt = dot(p,normalize(vec3(1)));\n    float sun = pow(max(dt,0.),10.);\n    return vec3(sun) + .2+dt*.1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(1,uv));\n    vec3 samplepos = erot(vec3(-10,0,0), vec3(0,0,1), iTime*.2);\n    vec3 init = vec3(-20.,0,0);\n    \n    float yrot = 0.6+sin(iTime/5.)*.4;\n    float zrot = iTime/4.;\n    if (iMouse.z > 0.) {\n        yrot = clamp(1.-4.*mouse.y,-0.,3.14/2.);\n        zrot = 4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    float dist;\n    for (int i = 0; i < 250 && !hit; i++) {\n        dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n        if (distance(p,init)>50.) break;\n    }\n    float fog = smoothstep(5.,50.,distance(p,init));\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    float ao = smoothstep(-6.5,-4.8,p.z + hills(p))*smoothstep(-.3,.2,scene(p+n*.2)); //fake \"ao\" based on sphere's depth in the stack\n    float diff = length(sin(n*2.)*0.5+0.5)/sqrt(3.);\n    float spec = length(sin(r*vec3(1.,2.,2.5))*0.5+0.5)/sqrt(3.);\n    float frens = 1.-pow(dot(cam,n),2.)*0.98;\n\n    \n    vec3 col = vec3(.1)*diff*ao + pow(spec,10.)*frens*2.*ao;\n    vec3 bg = skycol(cam);\n    fragColor.xyz = (hit ? mix(col,bg,fog) : bg);\n    fragColor.xyz = smoothstep(vec3(-0.1),vec3(1),sqrt(fragColor.xyz))*smoothstep(2.,.5,length(uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}