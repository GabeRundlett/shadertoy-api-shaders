{
    "Shader": {
        "info": {
            "date": "1711222513",
            "description": "Testing gavornoi noise on a triangle",
            "flags": 0,
            "hasliked": 0,
            "id": "MXSXWd",
            "likes": 4,
            "name": "Gavornoi Pyramid",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "gavornoi"
            ],
            "usePreview": 0,
            "username": "Friend",
            "viewed": 128
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 o, in vec2 i) {\n    vec2 p = d(i, 6.);\n\n    float gavd = gavcc(vec2(p-vec2(0.,t)));\n    float gavd2 = gavcc(vec2(p*3.-vec2(t)));\n    \n    p.y += 2.86;\n    float dtr = max(abs(p.x)+p.y, abs(p.y)) - 3.;\n    float dtr2 = smoothstep(0.1, 0.01, dtr);\n    \n    float dl = abs(p.x +gavd*.1+gavd2*.05 * dtr*1.);\n    dl = smoothstep(.11, 0.01, dl);\n    \n    vec3 col = vec3(0.);\n    col += dtr2*gavd*vec3(0.455,0.957,0.043);\n    col += dtr2*gavd2*vec3(0.635,0.616,0.043);\n    col += vec3(fract(dtr2));\n    \n    if(p.y > 3.) {\n        col += dl*vec3(0.455,0.957,0.043);\n        col += .255*dl*dtr*vec3(0.894,0.043,0.957)*p.y*.15;\n    }\n    col += mix(col, vec3(0.12), hash(p));\n    o = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R       iResolution\n#define t       iTime\n#define pi_             3.14159265\n\n#define d(p,s)  (2. * p.xy - R.xy) / R.y * s\n\nfloat hash(vec2 p) {\n    return fract(sin(p.x*15.32+p.y*5.78) * 43758.236237153);\n}\n\nvec2 hash2(vec2 p) {\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\nfloat gavcc(in vec2 p) {    \n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float f = 5.*pi_;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;//frequency\n    float v = .9;//cell variability <1.\n    float va = 0.0;\n    float wt = 0.0;\n    for (int i=-1; i<=1; i++) \n\tfor (int j=-1; j<=1; j++) \n\t{\t\t\n        vec2 o = vec2(i, j)-.5;       \t\t\n        vec2 pp = fp +o  - v*hash2(ip - o);\n        float d = dot(pp, pp);\n        float w = exp(-d*4.);\n        wt +=w;\n        va +=cos(sqrt(d)*f)*w;\n\t}    \n    return va/wt;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}