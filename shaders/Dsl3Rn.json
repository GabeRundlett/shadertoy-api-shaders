{
    "Shader": {
        "info": {
            "date": "1665556959",
            "description": "I just watched this video and was inspired to create this shader.\n\n     https://www.youtube.com/watch?v=3H79ZcBuw4M\n\nI have no idea how this works, but in my defence neither does the guy who made the video (or so he says).",
            "flags": 48,
            "hasliked": 0,
            "id": "Dsl3Rn",
            "likes": 21,
            "name": "Neural Cellular Automaton Worms",
            "published": 3,
            "tags": [
                "cellular",
                "worms",
                "neural",
                "atomaton",
                "atomata"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2022\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// I just watched this video and was inspired to create this shader.\n//\n//     https://www.youtube.com/watch?v=3H79ZcBuw4M\n//\n// I have no idea how this works, but in my defence neither does the guy who made the video\n// (or so he says). Neural Cellular Atomaton is a pretty fancy name for essentially a \n// continuous (non-binary) CA. You can experiment with this automata (and others) at:\n//\n//     https://neuralpatterns.io/\n//\n// Other than porting to shadertoy, all I did was fancy up the rendering a little bit.\n//\n// Buffer A computes the neural cellular atomaton\n// Buffer B performs temporal blur of buffer A\n// Image computes gradient, applies lighting and color\n//\n// ---------------------------------------------------------------------------------------\n\nvec2 grad(vec2 fragCoord, float d)\n{\n    vec2 delta = vec2(d, 0);\n    return vec2(texture(iChannel0, fragCoord/iResolution.xy + delta.xy).x -\n        texture(iChannel0, fragCoord/iResolution.xy - delta.xy).x,\n        texture(iChannel0, fragCoord/iResolution.xy + delta.yx).x -\n        texture(iChannel0, fragCoord/iResolution.xy - delta.yx).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = grad(fragCoord, 1./iResolution.y);\n    vec3 norm = normalize(vec3(g, 1.));\n    float value = texelFetch(iChannel0, ivec2(fragCoord), 0).r;\n    vec3 color = mix(vec3(0.3,0.3,.5), vec3(1, .2, .2), smoothstep(0., 0.1, value));\n    fragColor = vec4(color * dot(norm, normalize(vec3(1,-1,1))), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 kernel[] = vec3[]( vec3( 0.68, -0.9,   0.68),\n                        vec3(-0.9,  -0.66, -0.9),\n                        vec3( 0.68, -0.9,   0.68) );\n                        \nfloat convolve(vec2 fragCoord)\n{\n    float a = 0.;\n    for (int i = 0; i < 3; ++i)\n    {\n        for (int j = 0; j < 3; ++j)\n        {\n            a += texelFetch(iChannel0, ivec2(fragCoord) + ivec2(i - 1, j - 1), 0).x * kernel[i][j];\n        }\n    }\n    return a;\n}\n\n// inverse gaussian\nfloat activation(float x)\n{\n    return -1. / pow(2., (0.6 * pow(x, 2.))) + 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 state = texelFetch(iChannel0, ivec2(0), 0);\n    \n    if (ivec2(fragCoord) == ivec2(0))\n    {\n        if (iFrame == 0 || abs(state.x) != iResolution.x * iResolution.y || keyDown(KEY_SPACE))\n        {\n            state.x = -iResolution.x * iResolution.y;\n        }\n        else\n        {\n            state.x = abs(state.x);\n        }\n        \n        fragColor = state;\n        return;\n    }\n    \n    if (iFrame == 0 || state.x < 0. ||\n        (iMouse.z > 0. && distance(iMouse.xy, fragCoord) < 0.1*iResolution.y))\n    {\n        fragColor = vec4(hash(int(fragCoord.x * fragCoord.y + iDate.x) + iFrame));\n        return;\n    }\n        \n    fragColor = vec4(activation(convolve(fragCoord)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//hashing noise by IQ\nfloat hash( int k )\n{\n    uint n = uint(k);\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\n#define keyDown(ascii)    ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\n#define KEY_SPACE 32\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0) * 0.1 + texelFetch(iChannel1, ivec2(fragCoord), 0) * 0.9;\n    \n    if (iFrame == 0) fragColor = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}