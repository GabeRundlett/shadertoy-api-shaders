{
    "Shader": {
        "info": {
            "date": "1615895926",
            "description": "as a new comer I found it extremely hard to find a way to draw a line seg. Im not good at geometry so i could not search for the right content. \n\nfinally after a bunch of crawling in internet i came to find the right terms and understand how this works.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sl3Dr",
            "likes": 3,
            "name": "Line test RaduBT 588",
            "published": 3,
            "tags": [
                "line",
                "plot",
                "vector",
                "drawing",
                "segment",
                "linesegment"
            ],
            "usePreview": 0,
            "username": "RaduBT",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "// vector projection and rejection:\n// https://en.wikipedia.org/wiki/Vector_projection\n//\n// thanks to\n// https://stackoverflow.com/a/48630348/4767498\n// ===================\n//\n// say you have two vectors \"a\" and \"b\" (in two directions).\n// you travel a distance in line \"a\".\n// what scalar projection indicates is how far you traveled in direction of \"b\".\n// vector projection is simply the vector with that scale or magnitude.\n//\n// ===================\n//\n// now say you want to draw line \"b\". \n// now you have bunch of points coming from fragments of your screen.\n// so you will get bunch of lines (call it \"a\") going throw these points.\n// not all of these points are in right direction of the line \"b\".\n//\n// so what you should look for is how far we are from the vector \"a\" to vector \"b\"\n// this is called \"vector rejection\".\n// length of vector rejection basically tells the \n// distance from any point to line \"b\" that you want to draw.\n//\n// ===================\n//\n// using the distance you can give a brightness value to each pixel. \n// the closer you are, the brighter that pixel should be.\n//\n// if you clamp scalar projection from 0 to 1 \n// you will limit this infinite line to a line segment.\n// remember that vector projection is scalar projection times \"unit\" vector of \"b\"\n// unit vector has always length of 1. thats why clamping from 0 to 1 gives you a semgent.\n// as you go further from the line segment \"b\", you get bigger distances.\n//\n// ===================\n//\n// as an optimization instead of length(recj) \n// we calculate dot(rejc,rejc) which is equal to length(rejc)^2. \n// it should not matter too much because we are already tempering the\n// distance value with thickness etc to get our desired result.\n\n\nfloat line(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 a = p-p0; // the vector that we want to project on b\n    vec2 b = p1-p0; // this line is our goal.\n    \n    vec2 proj = clamp((dot(a,b)/dot(b,b)),0.0,1.0)*b; // vector projection of a onto b\n    vec2 rejc = a-proj; // vector rejection or distance in other words\n    \n    return smoothstep(0.0,1.2,1.0-dot(rejc, rejc)*1e4);\n}\n\nvec2 uvmap(vec2 uv)\n{\n    return ( 2.*uv - iResolution.xy)* 1.5 /iResolution.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = uvmap(fragCoord.xy);\n    vec2 p0 = vec2(0.,0.);\n    vec2 p1 = uvmap(iMouse.xy);\n    vec2 p11 = vec2(0.1,0.);\n    vec2 p12 = vec2(0.2,0.);\n    vec2 p13 = vec2(0.3,0.);\n    vec2 p14 = vec2(0.4,0.);\n    vec2 p15 = vec2(0.5,0.);\n    vec2 p16 = vec2(0.6,0.);\n    vec2 p17 = vec2(0.7,0.);\n    vec2 p18 = vec2(0.8,0.);\n    vec2 p19 = vec2(0.9,0.);\n    vec2 p20 = vec2(1.0,0.);\n    vec2 p21 = vec2(1.0,0.1);\n    vec2 p22 = vec2(1.0,0.2);\n    vec2 p23 = vec2(1.0,0.3);\n    vec2 p24 = vec2(1.0,0.4);\n    vec2 p25 = vec2(1.0,0.5);\n    vec2 p26 = vec2(1.0,0.6);\n    vec2 p27 = vec2(1.0,0.7);\n    vec2 p28 = vec2(1.0,0.8);\n    vec2 p29 = vec2(1.0,0.9);\n    vec2 p30 = vec2(1.0,1.0);\n    vec2 p31 = vec2(.1,1.);\n    vec2 p32 = vec2(.2,1.);\n    vec2 p33 = vec2(.3,1.);\n    vec2 p34 = vec2(.4,1.);\n    vec2 p35 = vec2(.5,1.);\n    vec2 p36 = vec2(.6,1.);\n    vec2 p37 = vec2(.7,1.);\n    vec2 p38 = vec2(.8,1.);\n    vec2 p39 = vec2(.9,1.);\n    vec2 p40 = vec2(0.,1.);\n    vec2 p41 = vec2(0.,0.1);\n    vec2 p42 = vec2(0.,0.2);\n    vec2 p43 = vec2(0.,0.3);\n    vec2 p44 = vec2(0.,0.4);\n    vec2 p45 = vec2(0.,0.5);\n    vec2 p46 = vec2(0.,0.6);\n    vec2 p47 = vec2(0.,0.7);\n    vec2 p48 = vec2(0.,0.8);\n    vec2 p49 = vec2(0.,0.9);\n    \n\n\n    vec3 col = vec3(line(uv, p0, p1)) \n    \n    // up right margin\n    \n       // + vec3(line(uv, p0, p20))\n    //    + vec3(line(uv, p11, p21))\n   //     + vec3(line(uv, p12, p22))\n   //     + vec3(line(uv, p13, p23))\n   //     + vec3(line(uv, p14, p24))\n   //     + vec3(line(uv, p15, p25))\n   //     + vec3(line(uv, p16, p26))\n   //     + vec3(line(uv, p17, p27))\n   //     + vec3(line(uv, p18, p28))\n   //     + vec3(line(uv, p19, p29))\n   //     + vec3(line(uv, p20, p30))\n  \n        // up right \n        \n //       + vec3(line(uv, p40, p30))\n //       + vec3(line(uv, p41, p31))\n  //      + vec3(line(uv, p42, p32))\n  //      + vec3(line(uv, p43, p33))\n  //      + vec3(line(uv, p44, p34))\n  //      + vec3(line(uv, p45, p35))\n   //     + vec3(line(uv, p46, p36))\n ///       + vec3(line(uv, p47, p37))\n  //      + vec3(line(uv, p48, p38))\n //       + vec3(line(uv, p49, p39))\n //       + vec3(line(uv, p48, p38))\n        \n        \n        //down right middle\n        \n\n        + vec3(line(uv, -p41, p19))\n        + vec3(line(uv, -p42, p18))\n        + vec3(line(uv, -p43, p17))\n        + vec3(line(uv, -p44, p16))\n        + vec3(line(uv, -p45, p15))\n        + vec3(line(uv, -p46, p14))\n        + vec3(line(uv, -p47, p13))\n        + vec3(line(uv, -p48, p12))\n        + vec3(line(uv, -p49, p11))\n        + vec3(line(uv, -p0, p20))\n        \n        \n        \n       // up right middle\n       \n\n        + vec3(line(uv, p41, p19))\n        + vec3(line(uv, p42, p18))\n        + vec3(line(uv, p43, p17))\n        + vec3(line(uv, p44, p16))\n        + vec3(line(uv, p45, p15))\n        + vec3(line(uv, p46, p14))\n        + vec3(line(uv, p47, p13))\n        + vec3(line(uv, p48, p12))\n        + vec3(line(uv, p49, p11))\n        + vec3(line(uv, -p0, p20))\n\n     // middle up left\n       \n\n        + vec3(line(uv, p41, -p19))\n        + vec3(line(uv, p42, -p18))\n        + vec3(line(uv, p43, -p17))\n        + vec3(line(uv, p44, -p16))\n        + vec3(line(uv, p45, -p15))\n        + vec3(line(uv, p46, -p14))\n        + vec3(line(uv, p47, -p13))\n        + vec3(line(uv, p48, -p12))\n        + vec3(line(uv, p49, -p11))\n        + vec3(line(uv, -p0, -p40))\n        \n // down right lef\n       \n\n        + vec3(line(uv, -p41, -p19))\n        + vec3(line(uv, -p42, -p18))\n        + vec3(line(uv, -p43, -p17))\n        + vec3(line(uv, -p44, -p16))\n        + vec3(line(uv, -p45, -p15))\n        + vec3(line(uv, -p46, -p14))\n        + vec3(line(uv, -p47, -p13))\n        + vec3(line(uv, -p48, -p12))\n        + vec3(line(uv, -p49, -p11))\n        + vec3(line(uv, -p0, -p20))\n\n\n////\n        \n        \n //       + vec3(line(uv, p11, p41))\n//        + vec3(line(uv, p12, p42))\n //       + vec3(line(uv, p13, p43))\n //       + vec3(line(uv, p14, p44))\n //       + vec3(line(uv, p15, p45))\n //      + vec3(line(uv, p16, p46))\n //       + vec3(line(uv, p17, p47))\n //      + vec3(line(uv, p18, p48))\n //       + vec3(line(uv, p39, p49))\n        + vec3(line(uv, p0, p40)); \n   \n   \n   ///   down right margin\n        \n    //    + vec3(line(uv, -p21, -p41))\n    //    + vec3(line(uv, -p22, -p12))\n    //    + vec3(line(uv, -p23, -p13))\n    //    + vec3(line(uv, -p24, -p14))\n    //    + vec3(line(uv, -p25, -p15))\n    //    + vec3(line(uv, -p26, -p16))\n    //    + vec3(line(uv, -p27, -p17))\n    //    + vec3(line(uv, -p28, -p18))\n    //    + vec3(line(uv, -p29, -p19))\n        + vec3(line(uv, -p20, -p0)); \n        \n        // down left margin\n                \n   //     + vec3(line(uv, -p30, -p20))\n   //     + vec3(line(uv, -p31, -p29))\n   //     + vec3(line(uv, -p32, -p28))\n   //     + vec3(line(uv, -p33, -p27))\n  //      + vec3(line(uv, -p34, -p26))\n   //     + vec3(line(uv, -p35, -p25))\n   //     + vec3(line(uv, -p36, -p24))\n   //     + vec3(line(uv, -p37, -p23))\n   //     + vec3(line(uv, -p38, -p22))\n   //     + vec3(line(uv, -p39, -p21));\n\n        // down left margin\n                \n   //     + vec3(line(uv, -p30, -p40))\n    //    + vec3(line(uv, -p31, -p41))\n   //     + vec3(line(uv, -p32, -p42))\n    //    + vec3(line(uv, -p33, -p43))\n   //     + vec3(line(uv, -p34, -p44))\n   //     + vec3(line(uv, -p35, -p45))\n   //     + vec3(line(uv, -p36, -p46))\n   //     + vec3(line(uv, -p37, -p47))\n    //    + vec3(line(uv, -p39, -p49))\n   //     + vec3(line(uv, -p40, -p0));\n        \n\n\n\n    // Output to screen\n    fragColor = vec4(col*2.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}