{
    "Shader": {
        "info": {
            "date": "1588590636",
            "description": "fake projector look",
            "flags": 32,
            "hasliked": 0,
            "id": "Wsffz2",
            "likes": 16,
            "name": "Weird Machine on Projector",
            "published": 3,
            "tags": [
                "projector",
                "machine"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 531
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n#define FK(k) floatBitsToInt(k)^floatBitsToInt(cos(k))\nfloat hash(float a, float b) {\n    int x=FK(a);int y = FK(b);\n    return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\nfloat noise(vec2 uv) {\n    vec2 crds = smoothstep(vec2(0.),vec2(1.),fract(uv));\n    uv = floor(uv);\n    float h1 = hash(uv.x,uv.y);\n    float h2 = hash(uv.x+1.,uv.y);\n    float h3 = hash(uv.x,uv.y+1.);\n    float h4 = hash(uv.x+1.,uv.y+1.);\n    return mix(mix(h1,h2,crds.x),mix(h3,h4,crds.x),crds.y);\n}\n\nvec2 map(vec2 uv) {\n    return (uv+vec2(0.7,0.4))*vec2(1.,iResolution.x/iResolution.y)*0.7;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float rot = cos(sin(cos(iTime*0.01)*8.)*8.)*0.5;\n    uv *= mat2(cos(0.01*rot),sin(0.01*rot),-sin(0.01*rot),cos(0.01*rot));\n    \n    float ntime = floor(iTime*25.)/25.;\n    float trackingy = hash(ntime,ntime);\n    float trackingx = hash(trackingy,ntime);\n    float trackinglight = hash(trackingx,ntime)*0.05+1.;\n    uv.y += trackingy/iResolution.y*0.4;\n    uv.x += trackingx/iResolution.y*0.1;\n    \n    vec4 color = vec4(0);\n    for (int i = -2; i < 3; i++) {\n    \tfor (int j = -2; j < 3; j++) {\n            vec2 off = vec2(i,j)/iResolution.y/4.*2.2;\n            float dispersion = hash(hash(hash(uv.x,uv.y),iTime),hash(float(i),float(j)))*0.02+1.;\n            float red = texture(iChannel0,map(uv*dispersion*1.03+off)).x;\n            float green = texture(iChannel0,map(uv*dispersion*1.01+off)).y;\n            float blue = texture(iChannel0,map(uv*dispersion*1.0+off)).z;\n    \t\tcolor += pow(vec4(red, green, blue, 1.),vec4(2.));\n        }\n    }\n\t\n    vec3 satstr = vec3(0.1);\n    mat3 desaturate = mat3(1.-satstr.x*2.)+mat3(satstr,satstr,satstr);\n    \n    float bounds = smoothstep(0.02,-0.02,max(abs(uv.x)-0.7,abs(uv.y)-0.4)) * smoothstep(2.,0.,length(uv));\n    float filmgrain = (noise((uv+mod(floor(ntime*60.),100.))*iResolution.y/1.5)*0.5+0.5)*0.05;\n    float shotnoise = abs(hash(hash(uv.x,uv.y),ntime))*0.05;\n    fragColor.xyz = smoothstep(-0.4,2.,desaturate*bounds*sqrt(color.xyz/color.w))*trackinglight;\n    fragColor.xyz += pow(1./(1.+length(uv*vec2(2,1)-vec2(1.,.7))),3.)*0.25*(sign(trackingy+0.99)*0.5+0.5);\n    fragColor.xyz += pow(1./(1.+length(uv*vec2(2,1)-vec2(-1.,.7))),3.)*0.5;\n    fragColor.xyz += filmgrain*mix(0.3,1.2,bounds) + shotnoise*mix(1.5,0.5,bounds) + smoothstep(0.06,-0.06,max(abs(uv.x)-0.7,abs(uv.y)-0.4))*0.02;\n    fragColor.xyz *= smoothstep(2.,0.2,length(uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//set FOCALBLUR to 1 and SAMPS to 3 for a prettier shader, but beware, it's slow!\n#define FOCALBLUR 0\n#define SAMPS 1\n\nfloat ntime;\n\nfloat super(vec3 p) {\n    return sqrt(length(p*p));\n}\nfloat super(vec2 p) {\n    return sqrt(length(p*p));\n}\n\nfloat box(vec3 p, vec3 d) {\n    vec3 q = abs(p)-d;\n    return super(max(vec3(0),q)) + min(0., max(q.x,max(q.y,q.z)));\n}\n\nfloat fancyrings(vec3 p) {\n    p=abs(p);\n    p.xy = vec2(max(p.x,p.y),min(p.y,p.x));\n    float ring = length(vec2(super(p.xy)-1.8,p.z))-0.2;\n    float metaring = super(vec2(length(p.xz-vec2(1.8,0.))-0.5, p.y-(0.5+0.25*cos(ntime*8.))))-0.2;\n    return min(ring,metaring);\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax, p, cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat scene(vec3 p) {\n    float b = box(erot(p,vec3(0,0,1),p.z*0.5+ntime),vec3(0.25,0.25,4))-0.5;\n    float scale = 0.65;\n    p.z = (asin(sin(p.z*scale*3.14)*0.99)/3.14)/scale;\n    float ring1 = fancyrings(p+vec3(0,0,.75));\n    float ring2 = fancyrings(erot(p,vec3(0,0,1),radians(45.))-vec3(0,0,0.75));\n    return min(min(ring1,ring2),b);\n}\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a);int y = FK(b);\n    return float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nfloat noise(vec2 p) {\n    vec2 id = floor(p);\n    vec2 crds = fract(p);\n    float h1 = hash(id.x,id.y);\n    float h2 = hash(id.x+1.,id.y);\n    float h3 = hash(id.x,id.y+1.);\n    float h4 = hash(id.x+1.,id.y+1.);\n    return mix(mix(h1,h2,crds.x),mix(h3,h4,crds.x),crds.y);\n}\n\nfloat triplanar(vec3 p, vec3 n) {\n    return mix(noise(p.xy), mix(noise(p.xz), noise(p.yz), n.x*n.x), 1.-n.z*n.z);\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p) - mat3(0.01);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\nvec3 srgb(float r) {\n    return vec3(r*r);\n}\n\nfloat speed(float x) {\n    return pow(sin(fract(x)*3.14/2.),200.)+floor(x)+x*2.;\n}\n\nvec3 pixel(vec2 uv) {\n    vec3 cam = normalize(vec3(1,uv));\n    vec3 init = vec3(-6,0,0);\n    \n    float h1 = hash(hash(uv.x,uv.y),ntime*8.);\n    float h2 = hash(h1,ntime);\n    float h3 = hash(h2,ntime);\n    vec3 blur = normalize(tan(vec3(h1,h2,h3)))*float(FOCALBLUR);\n    cam+=blur*0.025;\n    init-=blur*0.1;\n    \n    float ramptime = speed(ntime*0.25);\n    float yrot = 0.2;\n    float zrot = ramptime;\n    init.x += sin(ramptime*0.5);\n    cam = erot(cam,vec3(0,1,0),yrot);\n    init = erot(init,vec3(0,1,0),yrot);\n    cam = erot(cam,vec3(0,0,1),zrot);\n    init = erot(init,vec3(0,0,1),zrot);\n    init.z += cos(ramptime);\n    \n    \n    vec3 p = init;\n    bool hit = false;\n    for (int i = 0; i < 100 && !hit; i++) {\n        float dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n    }\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    float marble = smoothstep(-0.5,0.4,triplanar(p*4., n));\n    float tex = max(triplanar(p*80., n),0.)*marble;\n    float spexex = mix(8., 6., tex);\n    float ao = smoothstep(-1.,1.,scene(p+r*0.3)/0.3/dot(r,n))*0.5+0.5;\n    float diff1 = ao*pow(length(sin(r*2.)*0.5+0.5)/sqrt(3.),2.);\n    float diff2 = ao*pow(length(sin(r*2.+3.5)*0.5+0.5)/sqrt(3.),2.);\n    float diff3 = ao*pow(length(sin(r*2.5+1.)*0.5+0.5)/sqrt(3.),2.);\n    vec3 col1 = mix(srgb(0.,.05,.1), srgb(0.4,.3,1.), diff1) + pow(diff1, spexex)*1.5;\n    vec3 col2 = mix(srgb(0.1,.0,0.5), srgb(1.,.2,0.5), diff2) + pow(diff2, spexex)*1.5;\n    vec3 col3 = mix(srgb(0.1), srgb(0.9,0.9,1.), diff3) + pow(diff3, spexex)*1.5;\n    vec3 col = mat3(col2,col1,col3)*transpose(mat3(col2,col1,col3))*vec3(mix(0.3,0.1,marble));\n    return hit ? col : mix(srgb(0.25), srgb(0.1), length(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    ntime = floor(iTime*25.)/25.;\n\n    vec4 col;\n    for (int i = 0; i<SAMPS;i++) {\n        for (int j = 0; j<SAMPS;j++) {\n            vec2 off= vec2(i,j)/iResolution.y/float(SAMPS);\n            col += vec4(pixel(uv+off), 1);\n        }\n    }\n    fragColor.xyz = col.xyz/col.w;\n    fragColor.xyz = sqrt(fragColor.xyz) + hash(hash(uv.x,uv.y),ntime)*0.02;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}