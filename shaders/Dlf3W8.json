{
    "Shader": {
        "info": {
            "date": "1671654644",
            "description": "Failed bokeh blur attempt made this",
            "flags": 32,
            "hasliked": 0,
            "id": "Dlf3W8",
            "likes": 8,
            "name": "Sketchy sphere",
            "published": 3,
            "tags": [
                "sketch"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "#define HPI 1.57079632679\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec4 stochasticBokehBlur(sampler2D tex, vec2 p, float radius, float ratio, float gamma, float samples)\n{\n    vec4 acc = vec4(0);\n    for(float i = 0.; i < samples; i++)\n    {\n        vec2 rnd = hash22(p+i+floor(iTime/0.05))*vec2(1, 1);\n        rnd.y*=rnd.y;\n        rnd = vec2(cos(rnd.x), sin(rnd.x))*rnd.y*radius;\n        rnd.x *= ratio;\n        acc += pow(texture(tex, p+rnd), vec4(gamma));\n    }\n    return pow(acc/samples, 1./vec4(gamma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = stochasticBokehBlur(iChannel0, uv, 0.1, iResolution.y/iResolution.x, 1., 16.)*(1.2-smoothstep(0.25, 0.3, length((fragCoord*2.-iResolution.xy)/iResolution.y)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(step(0.3, length((fragCoord*2.-iResolution.xy)/iResolution.y)));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}