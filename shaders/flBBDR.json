{
    "Shader": {
        "info": {
            "date": "1651980353",
            "description": "trying to emulate my view from the coffee shop. march 7 2022",
            "flags": 0,
            "hasliked": 0,
            "id": "flBBDR",
            "likes": 1,
            "name": "bricks outside the coffee shop",
            "published": 3,
            "tags": [
                "photorecreation"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n\nfloat clamp01(in float a){\n    return clamp(a,0.,1.);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst float angle1 = 1. / float(4) * PI * 2.;\nconst float angle2 = PI * 0.5 - angle1 / 2.;\n\n#define rot(a) mat2(cos(a+vec4(0,11,33,0)))\n\nfloat hexSDF(in vec2 position) {\n    position /= vec2(sqrt(3.0), 1.5); // magic numbers\n    position.y -= 0.5;\n    position.x -= fract(floor(position.y) * 0.5);\n    position = abs(fract(position) - 0.5);\n    return abs(1. - max(position.x * tan(angle2) * 1.15 + position.y, position.x)) * sqrt(3.) * 0.5; // magic numbers\n}\n\nfloat drawHex(in vec2 position, in float size) {\n    // position *= vec2(hexH,hexW)/hexH;\n    float sdf = hexSDF(position);\n    if (position.x < -0.5) sdf = 0.;\n    if (position.x > 0.5) sdf = 0.;\n    if (position.y < -0.5) sdf = 0.;\n    if (position.y > 0.5) sdf = 0.;\n    return smoothstep(size-0.002,size+0.002,sdf);\n}\n  \nfloat lineSDF( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nfloat drawLine(in vec2 p, in vec2 a, in vec2 b, in float lt) {\n    return 1.-smoothstep(0.0,lt,lineSDF(p, a, b));\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat drawSq(in vec2 uv, in float size) {\n    vec2 px = 1./iResolution.xy;\n    float sq = 0.;\n    float sqsize = size;\n    float sqedge1 = 0.5 - sqsize;\n    float sqedge2 = 0.5 + sqsize;\n    sq += smoothstep(sqedge1,sqedge1+px.x,uv.x);\n    sq -= smoothstep(sqedge2,sqedge2+px.x,uv.x);\n    sq *= smoothstep(sqedge1,sqedge1+px.x,uv.y);\n    sq -= smoothstep(sqedge2,sqedge2+px.x,uv.y);\n    \n    sq = clamp(sq,0.,1.);\n    \n    return sq;\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\nvec3 brickworkPattern(in vec2 uv, in float scale) {\n    float linew = 0.02;\n\n    vec3 col = vec3(0.);\n    \n    col.b = drawSq(uv, 0.225);\n    col.g = drawSq(uv,0.225+linew) - col.r;\n    \n    float x = 0.;\n    vec2 xuv = abs(uv-.5)-0.225;\n    x += drawLine(xuv,vec2(0.),vec2(0.275),linew);\n    x += drawLine(xuv,vec2(0.,0.275),vec2(0.275,0.),linew);\n    col.g = max(col.g,x);\n    \n    col.g += drawLine(uv,vec2(0.275,0.),vec2(1.-0.275,0.),linew ); // bot\n    col.g += drawLine(uv,vec2(0.275,1.),vec2(1.-0.275,1.),linew); // top\n    col.g += drawLine(uv,vec2(0.,0.275),vec2(0.,1.-0.275),linew); // left\n    col.g += drawLine(uv,vec2(1.,0.275),vec2(1.,1.-0.275),linew); // right\n    \n    col.r = 1. - col.b - col.g;\n    col.g = 0.;\n    \n    \n    col += col.b;\n    col += col.r;\n    col *= 0.3;\n    \n    vec3 hsv = rgb2hsv(col);\n    hsv.g *= 1.-col.b;\n    hsv.g *= 0.8;\n    // hsv.b -= 0.1;\n    col = hsv2rgb(hsv);\n    \n    return col;\n}\n\nfloat map(in vec3 p) {\n    float d;\n    float plane = dot(p,vec3(0.,1.,0.));\n    d = plane;\n    //float sphere = length(p)-0.5;\n    //d = min(d,sphere);\n    return d;\n}\n\nvec3 getNormal( in vec3 pos )\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    /*\n    uv.x *= (2.+uv.y)*0.5;\n    uv.y = uv.y;\n   \n    vec2 tuv = fract(uv*4.);\n    \n    col = brickworkPattern(tuv,1.);\n    */ \n    \n    \n    vec3 ro = vec3(0.,3.,-3.);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.));\n    \n    rd.yz *= rot(-0.9);\n    \n    vec3 p;    \n    bool hit = false;\n    float d = 0.;\n    \n    for (int i=0; i<MAX_STEPS && !hit && d < MAX_DIST; i++) {\n        p = ro + rd * d;\n        float dd = map(p);\n        if (dd < 0.001) hit=true;\n        d += dd;\n    }\n    \n    vec3 n = getNormal(p);\n    \n    col = n; \n    \n    vec2 tuv = fract(p.xz*1.);\n    vec3 pat = brickworkPattern(tuv,1.);\n    col = pat;\n    \n    col *= 0.1+texture(iChannel1,rot(0.34)*p.xz+0.4).rgb; // organic texture\n    \n    if (pat.b > 0.5) col = (col+0.2) * 0.5;\n    \n    float noise1 = texture(iChannel0,rot(0.9)*p.xz+0.1).r;\n    float noise2 = texture(iChannel0,rot(2.)*p.xz*0.9+0.1).r;\n    float noise3 = texture(iChannel0,rot(4.)*p.xz*0.8+0.1).r;\n    noise1 = smoothstep(0.94,0.95,noise1);\n    noise2 = smoothstep(0.94,0.95,noise2);\n    noise3 = smoothstep(0.85,0.9,noise3);\n    col += col*noise1*2.; // pebbles\n    col += col*noise2*2.; // more pebbles\n    col -= col*noise3*0.5; // dark pebbles\n   \n    float bignoise1 = 1.-noise(p.xz*1.);\n    bignoise1 *= bignoise1;\n    bignoise1 = clamp01(bignoise1);\n    // bignoise1 *= 0.5;\n    float bignoise2 = 1.-noise(p.xz*1. + 30.);\n    bignoise2 *= bignoise2;\n    bignoise2 = clamp01(bignoise2);\n    // bignoise2 *= 0.5;\n    // col *= 0.9+0.1*bignoise;\n    \n    // col = vec3(bignoise1);\n    \n    col -= smoothstep(0.5,0.5,pat.rrr) * bignoise1 * 0.09;\n    col -= smoothstep(0.5,0.5,pat.bbb) * bignoise2 * 0.09;\n    \n    col += (col+0.5)*smoothstep(0.,0.1,noise(p.xz)*0.5-noise(p.xz*50.))*0.2;\n    \n    // col *= 1.3-col.b;\n    \n    // return\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}