{
    "Shader": {
        "info": {
            "date": "1658176596",
            "description": "Getting a taste of the power of functional rather than procedural generation:\nWith procedural generation you can make millions of items,\nbut with functional generation you can make an infinite number of items.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdyBDW",
            "likes": 2,
            "name": "Function Layout Test p02z",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "NEAR_DREAM_UNITY",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "#define  BuildingsPerQuad  2\n#define  AA                6.\nfloat    AA_Recip          = 1. / AA;\nfloat    AA_Sq             = AA * AA;\n\n\nfloat  Building  (ivec3 id, vec2 bq) {\n    // `id.xy` is the quad's lower grid coord.\n    // `id.z` is the building n per quad.\n    // `bq` is from [0,2) from the quad's corner.\n    // So layout range is pos:[0,1),size:[0,1):\n\n    #define H4(N) hash(uvec2(N * 1000 + id.x, id.z * 1000 + id.y))\n    \n    #define I4(N) (0.75 + 0.25 * sin(6.1414 * (H4(N) + 2. * iTime)))\n    \n    //DEV Can remove later:\n    #define C4(N) clamp(mod(I4(N), 1.), 0., 1.)\n    vec2 pos = vec2(H4(1), H4(2));\n    vec2 size = vec2(I4(3), I4(4));\n    float height = 0.25 + 0.75 * H4(5);\n    bool hit = (  pos.x <= bq.x\n        &&        pos.y <= bq.y\n        &&        bq.x <= pos.x + size.x\n        &&        bq.y <= pos.y + size.y);\n    return hit ? height : 0.;\n}\n\n\nfloat  AllBuildings  (vec2 q) {\n    // q = q_ipart + q_fpart\n    ivec2  q_ipart  = ivec2(floor(q));\n    vec2   q_fpart  = q - vec2(q_ipart);\n    float  v        = 0.;  //DEV length(0.1 * q_fpart);\n   \n    for (int xi = -1; xi <= 0; ++xi)\n    for (int yi = -1; yi <= 0; ++yi) {\n        ivec2  quad_ipart  = q_ipart + ivec2(xi, yi);\n        vec2   quad_fpart  = q - vec2(quad_ipart);\n        for (int bi = 0; bi < BuildingsPerQuad; ++bi)\n            v = max(v, Building(ivec3(quad_ipart, bi), quad_fpart));\n    }\n\n    return v;\n}\n\n\nvec3  HotColour  (float value) {\n    return 0.5 + 0.5 * cos(3.141 * (\n        vec3(1.5, 1., 0.) + value\n    ));\n}\n\n\nvoid  mainImage  (out vec4 o, vec2 p) {\n    o = vec4(0.);\n    for (float aax = 0.5; aax < AA; ++aax)\n    for (float aay = 0.5; aay < AA; ++aay) {\n        vec2 aap = p + vec2(aax, aay) * AA_Recip - 0.5;\n        vec2 q = (aap * 2. - iResolution.xy) / iResolution.y; \n        q *= 502. - 500. * cos(0.5 * iTime);\n        q += 100. * iTime * normalize(iResolution.xy);\n        float v = AllBuildings(q);\n        o += vec4(HotColour(v), 1.);\n    }\n    o /= AA_Sq;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n//---- \"Integer Hash - III\" from https://www.shadertoy.com/view/4tXyWN\n// Copyright Â© 2017 Inigo Quilez\n// The MIT License: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nfloat hash( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}