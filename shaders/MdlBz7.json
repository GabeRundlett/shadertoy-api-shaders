{
    "Shader": {
        "info": {
            "date": "1495514249",
            "description": "op art tunnel",
            "flags": 64,
            "hasliked": 0,
            "id": "MdlBz7",
            "likes": 5,
            "name": "op-tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarched",
                "opart"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 996
        },
        "renderpass": [
            {
                "code": "\nfloat time = 0.1;\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length( p.xz - c.xy ) - c.z;\n}\n\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat map(vec3 p)\n{\n\n    vec3 q = p;\n\tp.z -= 0.1 * iTime + sin(iTime * 0.01)* 0.5;\n    vec3 c = vec3(0.1);\n    \n    p.z = mod(p.z,c.z)-0.5*c.z;\n\n    \n   \t// vec3 p_s;\n    \n \t//p = p * rotationMatrix(vec3(0.0, 0.0, 1.0), sin(floor(q.z) * 10.0) * 4.0 + 0.1 * (time));\n    \n    //p.z -= 0.5;\n    \n    p.x += sin (q.z * 4.4)* 0.1 + cos(q.z * 5.0) * 0.2  +  sin(q.z * sin(iTime * 0.0001)) * 0.8;\n    p.y += sin (iTime + q.z* 1.0 + q.z) * 0.3 +  sin(q.z * sin(iTime * 0.0005)) * 0.5;\n    \n  \tfloat r1 = 1.5 + 0.5 * sin(q.z+ iTime * 0.1); // + sin(p.z) * sin(iTime);\n    \n    \n    \n    float r2 = r1 * 0.99; \n        ;\n    \n    float thickness = 0.02; //  * texture(iChannel1, vec2(fract(p.z  - iGloabalTime) / 5.0, 0.0)).r;;\n    \n    float inner = sdCappedCylinder(p.xzy , vec2(r2, 0.5));\n    float outer = sdCappedCylinder(p.xzy, vec2(r1, thickness));\n        \n    float ball = length(p + 0.001 * sin(time)) - 0.003;\n    float result = opS(inner, outer);\n  //  result = min(ball, result);                  \n    return result;\n    \n}\n\n\n// See https://iquilezles.org/articles/palettes for more information\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = iTime;\n   // ro.x -= sin(iTime) *2.0;\n}\n\n vec3 gradient(vec3 p, float t) {\n\t\t\tvec2 e = vec2(0., t);\n\n\t\t\treturn normalize( \n\t\t\t\tvec3(\n\t\t\t\t\tmap(p+e.yxx) - map(p-e.yxx),\n\t\t\t\t\tmap(p+e.xyx) - map(p-e.xyx),\n\t\t\t\t\tmap(p+e.xxy) - map(p-e.xxy)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime * 0.5;\n\n    vec2 _p = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n    vec2 noise = texture(iChannel0, _p).rg;\n\n    vec3 ray = normalize(vec3(_p + noise * 0.01, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);\n    \n    float depth = 0.0, d = 0.0, iter = 0.0;\n    vec3 p;\n    \n    for( int i = 0; i < 50; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d < 0.001 ) {\n\t\t\thit = true;\n            break;\n        }\n                   \n\t\tdepth += d  * 0.4;\n\t\titer++;\n                   \n    }\n    \n    vec3 col = vec3(1.0 - iter / 50.0);\n    \n    if(hit)\n    {\n        col = vec3(1.0);\n        \n       // col = col * dot(-gradient(p, 0.001), ray);\n    }\n    else\n    {\n     \t//col = abs(ray);\n    }\n    \n    float grain = texture(iChannel0, iTime * fragCoord.xy / iResolution.xy).r;\n    col += grain * 0.1;\n    \n    fragColor = vec4(sqrt(col), hit? length(p.xy) : 0.0 );\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 9093,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/aarongraay/5-21-17a"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}