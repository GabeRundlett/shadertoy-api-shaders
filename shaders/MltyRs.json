{
    "Shader": {
        "info": {
            "date": "1533736029",
            "description": "Shaping exercise that I worked on on my 4 week work experience at NCHSR and PAULEY LTD. This was my first full shader that I wrote, and all the logic and design was done by myself.\n\nCurrent Features:\n- Water line\n- Water transparency\n- Distortion\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MltyRs",
            "likes": 3,
            "name": "Shaping Excerise",
            "published": 3,
            "tags": [
                "2d",
                "water"
            ],
            "usePreview": 0,
            "username": "RKB2000",
            "viewed": 782
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    \n    //Makes sure the wave will tile\n    float tiler = PI * 20.0 / aspectRatio;\n    \n    vec4 backTex = texture(iChannel0, uv);\n    \n    vec4 waterColour = vec4(0.0, 0.5, 0.6, 1.0);\n    vec4 foamColour = vec4(0.8, 1.0, 1.0, 1.0);\n    vec4 bubbleColour = vec4(0.0, 0.8, 1.0, 1.0);\n    \n    float transparency = 0.4;\n    float waveFrequency = 1.0; //Only whole numbers will tile\n    float waveSpeed = 1.0;\n    float waveStrength = 1.3;\n    float foamDepth = 0.06;\n    float bubbleSize = 0.05;\n    float distortion = 0.8;\n    \n    //Moves the bubbles up the screen [WIP]\n    vec2 bubbleCentre = vec2(0.5 + sin(iTime) * 0.05, iTime * 0.05);\n    \n    //Calculates the distance from the fragment to the bubble centre\n    float fragDistance = distance(bubbleCentre, uv);\n        \n    //Generates the wave and its movement\n    float waterHeight = sin((uv.x * tiler) * waveFrequency + iTime * waveSpeed);\n    waterHeight += sin((uv.x * tiler) * waveFrequency * 0.5 + iTime * waveSpeed * 1.2);\n    waterHeight += sin((-uv.x * tiler) * waveFrequency * 1.3 + iTime * waveSpeed * 0.7);\n    \n    waterHeight *= waveStrength * 0.001;\t\t//Reduces the wave strength\n    waterHeight += 0.25;\t\t\t\t\t\t//Raises the water level from the bottom\n    \n    //Calculates if the pixel is part of the water\n    float isWater = step(waterHeight, uv.y);\n        \n    //Causes the water to distort the texture behind\n    //Takes the uv.x colour based on the height of the water\n    vec4 outColour = texture(iChannel0, vec2(uv.x + (waterHeight - 0.25) * distortion, uv.y));\n\n    //Creates the bubble to a certain size\n    if (fragDistance < bubbleSize - uv.y * 0.1) {\n        //Adds transparency to the bubble\n        outColour = mix(outColour, bubbleColour, transparency);\n\n        //Adds foam to the bubble\n        outColour = mix(outColour, foamColour, clamp(0.05 + uv.y - uv.x - bubbleCentre.y + bubbleCentre.x, 0.0, 0.08) * 10.0);\n    }\n    else {  \n        //Adds transparency to the water colour\n        outColour = mix(waterColour, outColour, transparency);\n    }\n\n    //Creates the foam\n    outColour = mix(foamColour, outColour, clamp((waterHeight - uv.y) / foamDepth, 0.0, 1.0));\n    \n    //Outputs a colour depending on if it's water or not (isWater)\n    //fragColor = backTex * isWater + outColour * (1.0 - isWater);\n    fragColor = mix(outColour, backTex, isWater);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}