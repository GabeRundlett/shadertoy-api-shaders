{
    "Shader": {
        "info": {
            "date": "1654185935",
            "description": "Trying to ray march a simple terrain. Following along https://iquilezles.org/articles/terrainmarching/",
            "flags": 0,
            "hasliked": 0,
            "id": "NdtyDX",
            "likes": 0,
            "name": "Basic TerrainMarching",
            "published": 3,
            "tags": [
                "raymarching",
                "terrain",
                "learning"
            ],
            "usePreview": 0,
            "username": "droidkid",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "float terrain(vec3 pos) {\n    return clamp(sin(pos.x) * sin(2.0*pos.z), -0.5 , 1.8);\n}\n\nvec3 calcNormal(vec3 pos) {\n    vec3 e = vec3(0.0001, 0.0, 0.0);\n    return normalize(vec3(\n        terrain(pos - e.xyy) - terrain(pos + e.xyy),\n        2.0 * e.x,\n        terrain(pos - e.yyx) - terrain(pos + e.yyx)\n    ));\n}\n\nfloat castRay(in vec3 ro, in vec3 rd) {\n    float t = 0.001;\n    float del = 0.01;\n    while (t < 20.0) {\n        vec3 pos = ro + t * rd;\n        if (pos.y < terrain(pos)) {\n            // below the terrain.\n            return t;\n        }\n        t += del;\n    }\n    return -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n\n    float an = 10.0*iMouse.x/iResolution.x;\n\n    vec3 ro = vec3(8.0 * sin(an), 7.0 , 8.0 * cos(an));\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    \n    vec3 ww = normalize(ta-ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    mat3 cam = mat3(uu, vv, ww);\n    \n    vec3 rd = normalize(cam * (vec3(p, 1.5)));\n\n    vec3 col = vec3(0.5, 0.8, 0.9) - max(rd.y, 0.0) * 0.5;\n    float t = castRay(ro, rd);\n    if (t > 0.0) {\n        vec3 pos = ro + t*rd;\n        vec3 normal = calcNormal(pos);\n        \n        vec3 mate = vec3(0.2);\n         \n        vec3 sunDir = vec3(0.8, 0.4, 1.0);\n        \n        float sun_dif = clamp(dot(normal, sunDir), 0.0, 1.0);\n        float sun_sha = step(castRay(pos + 0.01*normal, sunDir), 0.0);\n        float sky_dif = clamp(0.3 + 0.5 * dot(normal, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n        float bou_dif = clamp(0.5 + 0.5*dot(normal, vec3(0.0, -1.0, 0.0)), 0.0, 1.0);\n\n        \n        col =  mate * sun_dif * sun_sha * vec3(7.0, 5.0, 3.0);\n        col += mate * sky_dif * vec3(0.2, 0.2, 0.2);\n        col += mate * vec3(0.7, 0.3, 0.2) * bou_dif;\n\n    } \n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col, 0.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}