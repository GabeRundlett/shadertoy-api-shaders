{
    "Shader": {
        "info": {
            "date": "1620596454",
            "description": "I like colors!\nVector field generated using :  https://www.shadertoy.com/view/7dBSzK (in buffer B)\nGradient / continuous particle system : buffer A",
            "flags": 32,
            "hasliked": 0,
            "id": "fdjXRV",
            "likes": 9,
            "name": "Rainbow Vector Field",
            "published": 3,
            "tags": [
                "visualization",
                "colors",
                "rainbow",
                "vectorfield"
            ],
            "usePreview": 0,
            "username": "theott",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = A(uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 U = (2.*fragCoord - iResolution.xy)/iResolution.y; // -1,1\n    vec2 V = fragCoord/iResolution.xy; // [0,1\n\n    vec2 field = B(V).xy; // get vector field \n    vec4 pre = A(V - 0.001 * field); // use vector field as gradient\n\n    vec3 col = pow3(clamp(pre.xyz,0.,.9),1.005); // color attenuation\n    \n    // Grid of poiints * Time varying pixel color * twinkle\n    float grid = smoothstep(0.01, 0., length(mod(U + 0.05, 0.1)));\n    vec3 palette = 0.5 + 0.5*cos(iTime+V.xyx+vec3(0,2,4));\n    float twinkle = map(sin(iTime/3.), -1.,1., 0.3, 1.);\n    col +=  grid * normalize(palette);// * twinkle;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//methods from https://www.shadertoy.com/view/3tBGzh\n#define A(U) texture(iChannel0, U)\n#define B(U) texture(iChannel1, U)\n#define C(U) texture(iChannel2, U)\n\n//utility functions\nmat2 rot(float a){\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat unipolar(float x){\n    return map(x,-1.,1.,0.,1.);\n}\n\nvec2 unipolar2(vec2 u){\n    return vec2(unipolar(u.x), unipolar(u.y));\n}\n\nvec3 pow3(vec3 u, float a){\n    return vec3(pow(u.x,a), pow(u.y,a), pow(u.z,a));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Copy Pasted from https://www.shadertoy.com/view/7dBSzK\n\n//----------------\n  const int ps = 0; // use values > 1..10 for oldskool\n//----------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   float x = fragCoord.x / iResolution.x * 640.;\n   float y = fragCoord.y / iResolution.y * 480.;\n   \n\tif (ps > 0)\n\t{\n\t   x = float(int(x / float(ps)) * ps);\n\t   y = float(int(y / float(ps)) * ps);\n\t}\n   \n   float t = iTime/30.;\n   \n   float mov0 = y/2.+sin(t)*10.+sin(x/90.)*70.+t*2.;\n   float mov1 = (mov0 / 5. + sin(mov0 / 30.))/ 10. + t * 3.;\n   float mov2 = mov1 + sin(mov1)*5. + t*1.0;\n   float cl1 = sin(sin(mov1/4. + t)+mov1);\n   float c1 = cl1 +mov2/2.-mov1-mov2+t;\n   float c2 = sin(c1+sin(mov0/100.+t)+sin(y/57.+t/50.)+sin((x+y)/200.)*2.);\n   float c3 = abs(sin(c2+cos((mov1+mov2+c2) / 10.)+cos((mov2) / 10.)+sin(x/80.)));\n  \n   float dc = float(16-ps);\n\t\n\tif (ps > 0)\n\t{\n   \t\tcl1 = float(int(cl1*dc))/dc;\n   \t\tc2 = float(int(c2*dc))/dc;\n   \t\tc3 = float(int(c3*dc))/dc;\n\t}\n\t\n   fragColor = vec4( cl1,c2,c3,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}