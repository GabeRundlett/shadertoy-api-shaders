{
    "Shader": {
        "info": {
            "date": "1534454132",
            "description": "the pedal curve of a parabola and the mouse point",
            "flags": 0,
            "hasliked": 0,
            "id": "4ltyWf",
            "likes": 5,
            "name": "pedal - parabola",
            "published": 3,
            "tags": [
                "math",
                "curves",
                "parabola",
                "pedal"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 596
        },
        "renderpass": [
            {
                "code": "// the Pedal of a curve C and a point Q\n// is the locus of all points P such that there is a tangent to C\n// which passes through P and which is perpendicular to PQ.\n//\n// line-plotting credits:\n// https://iquilezles.org/articles/functions\n// Reimplemented by starea @ shadertoy using Flyguy's Implicit Plotter https://www.shadertoy.com/view/4tB3WV\n//\n// todo: apply the GRAD/PLOT approach to the pedal curve itself.\n\n\n#define SHOW_MOUSE_TANGENTS 0\n#define SHOW_MOUSE          1\n\n#define LINE_SIZE           2.0\n#define DISP_SCALE          1.0\n\nconst vec2 GRAD_OFFS = vec2(0.001, 0);\n\n#define GRAD(f, p) (vec2(f(p) - f(p + GRAD_OFFS.xy), f(p) - f(p + GRAD_OFFS.yx)) / GRAD_OFFS.xx)\n\n//PLOT(Function, Color, Destination, Screen Position)\n#define PLOT(f, c, d, p) d = mix(c, d, smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), abs(f(p) / length(GRAD(f,p)))))\n\n\n#define FWIDTH2(f) (length(vec2(dFdx(f), dFdy(f))))\n\nfloat parabola_k = 1.0;\nvec2  parabola_c = vec2(0.0, 0.0);\n\nfloat parabola(vec2 p) {\n    float x = p.y * p.y * parabola_k + parabola_c.x;\n    return p.x - x;\n}\n\nbool parabolaTangents(vec2 c, float k, vec2 p, out vec2 t1, out vec2 t2) {\n    p -= c;\n    \n    // check that p is outside the parabola\n    float ppx = p.y * p.y * k;\n    if (p.x * sign(k) > ppx * sign(k)) {\n        return false;\n    }\n    \n    float A = k;\n    float B = -2.0 * k * p.y;\n    float C = p.x;\n    float D = (B * B) - (4.0 * A * C);\n    // we don't check D >= 0 because we know p is beneath the parabola\n    \n    float d = sqrt(D);\n    t1.y = (-B + d) / (2.0 * A);\n    t1.x = t1.y * t1.y * k;\n    t2.y = (-B - d) / (2.0 * A);\n    t2.x = t2.y * t2.y * k;\n    \n    t1 += c;\n    t2 += c;\n    \n    return true;\n}\n\n\nfloat oxeVec2f_distanceRight_PointLine(vec2 linePt, vec2 unitDir, vec2 pt)\n{\n   float vx = pt.x - linePt.x;\n   float vy = pt.y - linePt.y;\n   return unitDir.y * vx - unitDir.x * vy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = length(iMouse.xy) < 0.01 ? vec2(cos(iTime) * 40.0 + iResolution.x / 4.0, sin(iTime) * 20.0 + iResolution.y / 2.0) : iMouse.xy;\n    vec2 uv = ((fragCoord - iResolution.xy * 0.5)/iResolution.y);\n\tvec2 ms = ((mouse - iResolution.xy * 0.5)/iResolution.y);\n    vec2 pm = ms - uv;\n    float lpm = length(pm);\n\n    vec3 col = vec3(0.0);\n    \n    parabola_k = sin(iTime * 0.1 - 1.6) * 8.0 + 8.001;\n    parabola_c = vec2(-0.1, 0.0);\n    \n    vec2 t1;\n    vec2 t2;\n    bool hasTangents;\n    \n    PLOT(parabola, vec3(0.0, 0.7, 0.8), col, uv);\n    \n    \n\thasTangents = parabolaTangents(parabola_c, parabola_k, uv, t1, t2);\n    if (hasTangents) {\n        col += vec3(0.2);\n        \n\t    vec2 pmn = pm / lpm;\n   \t    vec2 t1n = normalize(t1 - uv);\n   \t    vec2 t2n = normalize(t2 - uv);\n        \n        float t1d = dot(pmn, t1n);\n        float t2d = dot(pmn, t2n);\n        \n        const float thresh = 0.04;\n        \n        float c1 = smoothstep(thresh, 0.0, abs(t1d) / (FWIDTH2(t1d) * 70.0));\n        float c2 = smoothstep(thresh, 0.0, abs(t2d) / (FWIDTH2(t2d) * 70.0));\n        col += vec3(c1 * 0.6);\n        col += vec3(c2 * 0.6);\n        col += vec3(0., 0., 0.3 * smoothstep(thresh, 0.0, t1d));\n        col += vec3(0.3 * smoothstep(thresh, 0.0, t2d), 0., 0.);\n    }\n    \n    #if SHOW_MOUSE\n    \tcol.g += 0.4 * smoothstep(0.02, 0.01, lpm);\n    #endif\n    \n    #if SHOW_MOUSE_TANGENTS\n    hasTangents = parabolaTangents(cen, parabola_k, ms, t1, t2);\n    if (hasTangents) {\n        float distToTangentLine;\n        distToTangentLine = oxeVec2f_distanceRight_PointLine(t1, normalize(t1 - ms), uv);\n        col *= smoothstep(0.005, 0.0, abs(distToTangentLine)) * 0.5 + 1.0;\n        distToTangentLine = oxeVec2f_distanceRight_PointLine(t2, normalize(t2 - ms), uv);\n        col *= smoothstep(0.005, 0.0, abs(distToTangentLine)) * 0.5 + 1.0;\n    }\n    #endif\n    \n    \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}