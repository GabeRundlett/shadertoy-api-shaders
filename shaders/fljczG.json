{
    "Shader": {
        "info": {
            "date": "1649871507",
            "description": "Gauss approx variant of https://shadertoy.com/view/Xty3zc\nstar = 0-size point\nstar appear on sensor as Airy disk smoothed by pixel resol. Here, (huge) approx as Gaussian for close form integrals.\ntop: lum = 10⁵ ^ x\nbottom: star dist * x for lum 10¹ & 10²",
            "flags": 0,
            "hasliked": 0,
            "id": "fljczG",
            "likes": 8,
            "name": "stars - PSF + saturation (gauss)",
            "published": 3,
            "tags": [
                "star",
                "psf",
                "sensor"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "// Fork of \"stars - PSF + saturation\" https://shadertoy.com/view/Xty3zc\n// instead of the true Bessel, here we use Gaussian for close form integration\n\n\n#define rnd(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float S = 20.;                 // cell size\n    vec2 R = iResolution.xy,\n         I = floor(u/S)*S,         // grid cell\n         U = u/R,\n         P,d;\n    float x = U.x,\n          lum =                    // apparent luminosity * exposition / saturation threshold\n                U.y>.66 ? pow(1e5, x )  // top: luminosity = 10⁵ ^x\n              : U.y>.33 ? 1e1 / (x*x)   // start dist * x for lum = 10¹\n                        : 1e2 / (x*x);  //                          10²\n                        \n    for (int k=0; k<9; k++) {\n        d = S*vec2(k%3-1,k/3-1),   // offset to neighborh cell\n        P = I+d + S* rnd(I+d);     // random point in cell\n                // starPos, sigma=1pix,  grid cell = 1 pix    \n        O += intgauss2( P,       1.,          u-.5,1.) \n            * vec4(1,.5,.2,1)* lum; //  source intensity RGB\n    }\n    \n    if ( int(u.y)%int(R.y/3.) == 0 ) O = vec4(0,1,0,1);\n// O = vec4(intgauss0( 3.2*U.x ) < P.y );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/******************************************************\\\n**                                                    **\n**      Stats.glsl           Fabrice NEYRET 30/06/11  **\n**                                                    **\n\\******************************************************/\n\n// gauss(u)     Normal(0,1)\n//                  use uniform as seed\n// intgauss(x)  cumulative distr func of Normal(0,1)\n//                  use x = (x-xm)/s for N(xm,s^2)\n\n// seq(fsolve(1/2*(1+erf(x/sqrt(2)))=i/255.,x), i = 0..255);\nfloat invgauss[256] = float[](\n  -13.50858432, -2.658748992, -2.416134297, -2.264727419,   -2.152315053, -2.061916502, -1.985770403, -1.919651290,   -1.860993476, -1.808117371, -1.759861028, -1.715385840,   -1.674065908, -1.635421185, -1.599075078, -1.564726471,   -1.532130657, -1.501085946, -1.471424060, -1.443003065,   -1.415702094, -1.389417334, -1.364058929, -1.339548561,   -1.315817530, -1.292805229, -1.270457904, -1.248727645,   -1.227571561, -1.206951090, -1.186831433, -1.167181068,   -1.147971348, -1.129176158, -1.110771617, -1.092735829,   -1.075048664, -1.057691573, -1.040647418, -1.023900333,   -1.007435601, -0.9912395403, -0.9752994069, -0.9596033111,   -0.9441401408, -0.9288994918, -0.9138716087, -0.8990473298,   -0.8844180399, -0.8699756243, -0.8557124305, -0.8416212336,   -0.8276952018, -0.8139278686, -0.8003131056, -0.7868450995,   -0.7735183280, -0.7603275409, -0.7472677410, -0.7343341688,   -0.7215222841, -0.7088277541, -0.6962464387, -0.6837743800,   -0.6714077892, -0.6591430371, -0.6469766453, -0.6349052758,   -0.6229257234, -0.6110349080, -0.5992298682, -0.5875077530,   -0.5758658170, -0.5643014135, -0.5528119909, -0.5413950853,   -0.5300483169, -0.5187693864, -0.5075560692, -0.4964062122,   -0.4853177302, -0.4742886030, -0.4633168707, -0.4524006317,   -0.4415380391, -0.4307272994, -0.4199666679, -0.4092544476,   -0.3985889860, -0.3879686745, -0.3773919440, -0.3668572645,   -0.3563631432, -0.3459081219, -0.3354907758, -0.3251097114,   -0.3147635664, -0.3044510061, -0.2941707233, -0.2839214366,   -0.2737018897, -0.2635108491, -0.2533471031, -0.2432094621,   -0.2330967553, -0.2230078312, -0.2129415555, -0.2028968119,   -0.1928724988, -0.1828675299, -0.1728808328, -0.1629113487,   -0.1529580307, -0.1430198431, -0.1330957617, -0.1231847716,   -0.1132858673, -0.1033980512, -0.09352033436, -0.08365173407,   -0.07379127404, -0.06393798335, -0.05409089672, -0.04424905235,   -0.03441149226, -0.02457726114, -0.01474540668,   -0.004914977406, 0.004914977155, 0.01474540642, 0.02457726089,   0.03441149176, 0.04424905210, 0.05409089646, 0.06393798310,   0.07379127354, 0.08365173382, 0.09352033411, 0.1033980509,   0.1132858670, 0.1231847714, 0.1330957614, 0.1430198428,   0.1529580304, 0.1629113485, 0.1728808325, 0.1828675294,   0.1928724985, 0.2028968116, 0.2129415553, 0.2230078306,   0.2330967551, 0.2432094618, 0.2533471029, 0.2635108488,   0.2737018895, 0.2839214363, 0.2941707228, 0.3044510058,   0.3147635661, 0.3251097112, 0.3354907753, 0.3459081217,   0.3563631430, 0.3668572642, 0.3773919437, 0.3879686742,   0.3985889858, 0.4092544470, 0.4199666676, 0.4307272991,   0.4415380388, 0.4524006311, 0.4633168704, 0.4742886028,   0.4853177300, 0.4964062120, 0.5075560689, 0.5187693861,   0.5300483166, 0.5413950850, 0.5528119906, 0.5643014132,   0.5758658164, 0.5875077527, 0.5992298679, 0.6110349077,   0.6229257228, 0.6349052755, 0.6469766450, 0.6591430368,   0.6714077889, 0.6837743797, 0.6962464383, 0.7088277535,   0.7215222838, 0.7343341684, 0.7472677407, 0.7603275402,   0.7735183276, 0.7868450991, 0.8003131052, 0.8139278682,   0.8276952014, 0.8416212332, 0.8557124301, 0.8699756239,   0.8844180395, 0.8990473294, 0.9138716079, 0.9288994914,   0.9441401404, 0.9596033107, 0.9752994065, 0.9912395399,   1.007435601, 1.023900332, 1.040647417, 1.057691573,   1.075048664, 1.092735828, 1.110771616, 1.129176157,   1.147971347, 1.167181067, 1.186831432, 1.206951090,   1.227571560, 1.248727645, 1.270457904, 1.292805229,   1.315817529, 1.339548560, 1.364058929, 1.389417333,   1.415702093, 1.443003064, 1.471424059, 1.501085945,   1.532130656, 1.564726471, 1.599075077, 1.635421184,   1.674065907, 1.715385839, 1.759861026, 1.808117368,   1.860993475, 1.919651288, 1.985770401, 2.061916499,   2.152315051, 2.264727416, 2.416134292, 2.658748984, 13.50858432\n);\n\n//seq(evalf(1/2*(1+erf(((2*i/255-1)*3.2)/sqrt(2)))), i = 0..255);\nfloat Intgauss[256] = float[](\n0.6871380e-3, 0.7494356e-3, 0.8169004e-3, 0.8899146e-3, 0.9688851e-3, 0.10542440e-2, 0.11464499e-2, 0.12459894e-2, 0.13533781e-2, 0.14691620e-2, 0.15939188e-2, 0.17282592e-2, 0.18728282e-2, 0.20283069e-2, 0.21954132e-2, 0.23749034e-2, 0.25675740e-2, 0.27742627e-2, 0.29958497e-2, 0.32332593e-2, 0.34874612e-2, 0.37594717e-2, 0.40503552e-2, 0.43612252e-2, 0.46932459e-2, 0.50476330e-2, 0.54256549e-2, 0.58286340e-2, 0.62579476e-2, 0.67150286e-2, 0.72013666e-2, 0.77185082e-2, 0.82680583e-2, 0.88516803e-2, 0.94710962e-2, 0.101280874e-1, 0.108244945e-1, 0.115622174e-1, 0.123432152e-1, 0.131695056e-1, 0.140431650e-1, 0.149663273e-1, 0.159411831e-1, 0.169699787e-1, 0.180550152e-1, 0.191986463e-1, 0.204032774e-1, 0.216713632e-1, 0.230054056e-1, 0.244079514e-1, 0.258815900e-1, 0.274289497e-1, 0.290526957e-1, 0.307555258e-1, 0.325401674e-1, 0.344093732e-1, 0.363659176e-1, 0.384125920e-1, 0.405521998e-1, 0.427875528e-1, 0.451214648e-1, 0.475567470e-1, 0.500962022e-1, 0.527426190e-1, 0.554987662e-1, 0.583673862e-1, 0.613511885e-1, 0.644528440e-1, 0.676749772e-1, 0.710201601e-1, 0.744909052e-1, 0.780896580e-1, 0.818187898e-1, 0.856805910e-1, 0.896772632e-1, 0.938109124e-1, 0.980835408e-1, .1024970404, .1070531852, .1117536236, .1165998722, .1215933076, .1267351604, .1320265080, .1374682681, .1430611923, .1488058602, .1547026733, .1607518498, .1669534188, .1733072163, .1798128798, .1864698448, .1932773408, .2002343882, .2073397956, .2145921572, .2219898512, .2295310383, .2372136614, .2450354446, .2529938944, .2610862998, .2693097340, .2776610567, .2861369163, .2947337533, .3034478039, .3122751044, .3212114960, .3302526301, .3393939748, .3486308209, .3579582890, .3673713374, .3768647696, .3864332432, .3960712786, .4057732686, .4155334878, .4253461032, .4352051838, .4451047123, .4550385955, .4650006759, .4749847425, .4849845435, .4949937969, .5050062031, .5150154565, .5250152575, .5349993241, .5449614045, .5548952877, .5647948162, .5746538968, .5844665122, .5942267314, .6039287214, .6135667568, .6231352304, .6326286626, .6420417110, .6513691791, .6606060252, .6697473699, .6787885040, .6877248956, .6965521961, .7052662467, .7138630837, .7223389433, .7306902660, .7389137002, .7470061056, .7549645554, .7627863386, .7704689617, .7780101488, .7854078428, .7926602044, .7997656118, .8067226592, .8135301552, .8201871202, .8266927837, .8330465812, .8392481502, .8452973267, .8511941398, .8569388077, .8625317319, .8679734920, .8732648396, .8784066924, .8834001278, .8882463764, .8929468148, .8975029596, .9019164592, .9061890876, .9103227368, .9143194090, .9181812102, .9219103420, .9255090948, .9289798399, .9323250228, .9355471560, .9386488115, .9416326138, .9445012338, .9472573810, .9499037978, .9524432530, .9548785352, .9572124472, .9594478002, .9615874080, .9636340824, .9655906268, .9674598326, .9692444742, .9709473043, .9725710503, .9741184100, .9755920486, .9769945944, .9783286368, .9795967226, .9808013537, .9819449848, .9830300213, .9840588169, .9850336727, .9859568350, .9868304944, .9876567848, .9884377826, .9891755055, .9898719126, .9905289038, .9911483197, .9917319417, .9922814918, .9927986334, .9932849714, .9937420524, .9941713660, .9945743451, .9949523670, .9953067541, .9956387748, .9959496448, .9962405283, .9965125388, .9967667407, .9970041503, .9972257373, .9974324260, .9976250966, .9978045868, .9979716931, .9981271718, .9982717408, .9984060812, .9985308380, .9986466219, .9987540106, .9988535501, .9989457560, .9990311149, .9991100854, .9991830996, .9992505644, .9993128620\n);\n\nfloat gauss(float u) { // takes u = rand_uniform()\n    // return 4*(2*u-1);\n    u*=256.;\n    if (u>=255.) return invgauss[255];\n    int iu = int(u);\n    float fu = u-float(iu);\n    return (1.-fu)*invgauss[iu]+fu*invgauss[iu+1];\n}\n\n\n// erf: approxs there https://en.wikipedia.org/wiki/Error_function\n//          and there https://github.com/libretro/glsl-shaders/blob/master/blurs/blur9fast-vertical.glsl\n//#define erf(x) tanh(1.202760580 * (x))\nfloat erf(float x) {\n   float sign_x = sign(x),\n\t    t = 1./(1. + .47047*abs(x));\n\treturn sign(x) \n          * ( 1. - t* (.3480242 + t*(-.0958798 + t*.7478556)) * exp(-x*x) );\n}\n#define intgauss(x)  ( .5 + .5*erf((x)/sqrt(2.) )  )  // use analytic version\n//#define intgauss intgauss0                          // use tabuled version\nfloat intgauss0(float x) { // use (x-xm)/s for N(m,s^2)\n    x = (x/3.2)*128.+128.;\n    if (x<0.) return Intgauss[0];\n    if (x>255.) return Intgauss[255];\n    int ix = int(x);\n    float fx = x-float(ix);\n    return (1.-fx)*Intgauss[ix]+fx*Intgauss[ix+1];\n}\n\n\n\n// spot = gauss(xP,yP,s) pixel = grid [I,I+l[\nfloat intgauss2(vec2 P, float s, vec2 I, float l) {\n    float r = l*.5, \n          d = length(I-P+r);\n    // dist > 3.2*sigma →  < 0.5% intensity\n // if (d >  3.2*s+r) return 0.; // spot \"totally\" out of pixel\n // if (d < -3.2*s+r) return 1.; // spot \"totally\" inside pixel\n // else   // spot partly covers the pixel\n      {    vec2 A = (I-P)/s, B = (I+l-P)/s;\n           return  (intgauss(B.x)-intgauss(A.x))\n                  *(intgauss(B.y)-intgauss(A.y));\n                }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}