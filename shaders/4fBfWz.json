{
    "Shader": {
        "info": {
            "date": "1724788665",
            "description": "CC0: Twitter truchet\n Saw neat multi-level truchet on twitter: https://x.com/byt3m3chanic/status/1828407895614202169\n Thought I should try to recreate it. Adding a little red to it as in the tweet would be nice\n but now I am too tired.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4fBfWz",
            "likes": 35,
            "name": "Twitter truchet",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "// CC0: Twitter truchet\n//  Saw neat multi-level truchet on twitter: https://x.com/byt3m3chanic/status/1828407895614202169\n//  Thought I should try to recreate it. Adding a little red to it as in the tweet would be nice\n//  but now I am too tired.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\nconst float blw = 0.01;\nconst float wlw = 0.125/2.;\nconst vec3 bgcol = vec3(0.7);\nconst vec3 fgcol = vec3(0.0);\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nvec4 truchet0(vec2 p) {\n  float \n    d0 = abs(length(p-0.5)-0.5)-wlw*4.\n  , d1 = abs(length(p+0.5)-0.5)-wlw*4.\n  , d2 = abs(d0)-blw*4.\n  , d3 = abs(d1)-blw*4.\n  ;\n  return vec4(d0,d1, d2,d3);\n}\n\nvoid rot4(inout vec2 p, float h) {\n  if (h < 1./4.) {\n  } else if (h < 2./4.) {\n    p = vec2(p.y, -p.x);\n  } else if (h < 3./4.) {\n    p *= -1.;\n  } else {\n    p = vec2(-p.y, p.x);\n  }\n}\n\nvec4 truchet1(vec2 p) {\n  float \n    d0 = abs(length(p-0.5)-0.5)\n  , d1 = abs(length(p+0.5)-0.5)\n  , d2 = d0-wlw*6.\n  , d3 = d1-wlw*6.\n  , d4 = abs(d0-wlw*4.)-wlw*2.\n  , d5 = abs(d1-wlw*4.)-wlw*2.\n  ;  \n  d4 = abs(d4)-blw*2.;\n  d5 = abs(d5)-blw*2.;\n  \n  \n  \n  return vec4(d2,d3, d4,d5);\n}\n\nvec4 truchet2(vec2 p) {\n  float \n    d0 = abs(length(p-0.5)-0.5)\n  , d1 = abs(length(p+0.5)-0.5)\n  , d2 = d0-wlw*7.\n  , d3 = d1-wlw*7.\n  , d4 = abs(d0-wlw*2.)-wlw\n  , d5 = abs(d1-wlw*2.)-wlw\n  , d6 = abs(d0-wlw*6.)-wlw\n  , d7 = abs(d1-wlw*6.)-wlw\n  , d8 = min(d4, d6)\n  , d9 = min(d5, d7)\n  ;  \n  d8 = abs(d8)-blw;\n  d9 = abs(d9)-blw;\n  \n  \n  \n  return vec4(d2,d3, d8,d9);\n}\n\nvec3 cell0(vec3 col, vec2 p, float aa) {\n  vec2 tp = p;\n\n  vec2 tn = floor(tp);\n  tp -= tn+0.5;\n    \n  float h0 = hash(tn+123.4);\n  rot4(tp, h0);\n\n  vec4 dt = truchet0(tp);\n\n  col = mix(col, bgcol, smoothstep(aa, -aa, dt.x));\n  col = mix(col, fgcol, smoothstep(aa, -aa, dt.z));\n\n  col = mix(col, bgcol, smoothstep(aa, -aa, dt.y));\n  col = mix(col, fgcol, smoothstep(aa, -aa, dt.w));\n  \n  return col;\n}\n\nvec3 cell1(vec3 col, vec2 p, float aa) {\n  vec2 tp = p;\n\n  vec2 tn = floor(tp);\n  tp -= tn+0.5;\n    \n  float\n    h0 = hash(tn+123.45)\n  , h1 = fract(8667.0*h0)\n  ;\n\n  if (h1 > 2./3.) {\n    return cell0(col, 2.*p, 2.*aa);\n  } else {\n    rot4(tp, h0);\n    vec4 dt = truchet1(tp);\n  \n    col = mix(col, bgcol, smoothstep(aa, -aa, dt.x));\n    col = mix(col, fgcol, smoothstep(aa, -aa, dt.z));\n  \n    col = mix(col, bgcol, smoothstep(aa, -aa, dt.y));\n    col = mix(col, fgcol, smoothstep(aa, -aa, dt.w));\n  }\n  \n  return col;\n}\n\nvec3 cell2(vec3 col, vec2 p, float aa) {\n  vec2 tp = p;\n\n  vec2 tn = floor(tp);\n  tp -= tn+0.5;\n    \n  float\n    h0 = hash(tn+123.456)\n  , h1 = fract(8667.0*h0)\n  ;\n\n  if (h1 > 1./3.) {\n    return cell1(col, 2.*p, 2.*aa);\n  } else {\n    rot4(tp, h0);\n\n    vec4 dt = truchet2(tp);\n  \n    col = mix(col, bgcol, smoothstep(aa, -aa, dt.x));\n    col = mix(col, fgcol, smoothstep(aa, -aa, dt.z));\n  \n    col = mix(col, bgcol, smoothstep(aa, -aa, dt.y));\n    col = mix(col, fgcol, smoothstep(aa, -aa, dt.w));\n  }\n  \n  return col;\n}\n\n\nvec3 effect(vec2 p) {\n  vec3 col = bgcol;\n  float aa = sqrt(2.)/RESOLUTION.y;\n\n  float iz = 2.;\n  vec2 tp = p;\n  \n  const float per = 10.;\n  float a = TIME/per+100.;\n  tp += (per*0.25)*sin(vec2(sqrt(0.5), 1.)*a);\n  \n  tp *= iz;\n  float taa = aa*iz;\n  \n  col = cell2(col, tp, taa);\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}