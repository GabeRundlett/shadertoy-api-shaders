{
    "Shader": {
        "info": {
            "date": "1692023541",
            "description": "tiny helper function to extract some small integer from a float value.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt2yRV",
            "likes": 6,
            "name": "getDigits/inRange",
            "published": 3,
            "tags": [
                "digits",
                "index",
                "id"
            ],
            "usePreview": 0,
            "username": "iY0Yi",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "// Hash without Sine\n// MIT License...\n// Copyright (c)2014 David Hoskins.\n//https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nint getDigits(float f, int digc, int index) {\n    // Note: For 32-bit floats, the precision is typically up to about 7 decimal places.\n    // Exceeding this may lead to accuracy issues.\n    // 1. Multiply the float by a power of 10 to shift the desired digits to the integer part.\n    //    This depends on both the desired number of digits (dig) and the offset (id).\n    f = f * pow(10., float(digc + index));\n    // 2. Convert the float to an integer to discard any fractional part.\n    // 3. Return the last 'dig' digits of the integer.\n    return int(f) % int(pow(10., float(digc)));\n}\n\nbool inRange(float v, float min, float max) {\n    return v > min && v < max;\n}\n\nbool inRange(int v, int min, int max) {\n    return v > min && v < max;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragCoord=floor(fragCoord/8.+(iTime*8.));\n    \n    float f = hash12(fragCoord);\n    \n    const int ans0 = 123;\n    const int ans1 = 456;\n    const int ans2 = 789;\n    \n    int digt = getDigits(f, 3, 1);\n    \n    if(ans0==digt)\n        fragColor = vec4(1,0,0,1);\n    else\n    if(ans1==digt)\n        fragColor = vec4(0,1,0,1);\n    else\n    if(ans2==digt)\n        fragColor = vec4(0,0,1,1);\n    else\n    if(inRange(digt, ans2-5, ans2+5))\n        fragColor = vec4(1,1,0,1);\n    else\n    fragColor = vec4(f*.0125);\n    \n    fragColor = pow(fragColor,vec4(.4545));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}