{
    "Shader": {
        "info": {
            "date": "1695143810",
            "description": "An arabesque knot pattern with interlaced knots.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "mddcWM",
            "likes": 6,
            "name": "Arabesque knots 11 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "knot",
                "interlace",
                "arabesque"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //max(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //vec2(1.+sign(a.x)/2.,0.5-sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.*8.*1.5;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    bool b = uv.y > uv.x;\n    bool b1 = b;\n    for(int k = 0; k < 9; k++){\n        \n\n        b1 = uv.y>uv.x || !b1;\n        //if(b)\n        uv =\n            abs(.5+uv+t2)\n            //(max(abs(uv-t2),abs(t2)*2.))\n            //min(abs(.5+uv+t2),abs(-.5+uv+t2))\n            //max(abs(.5+uv+t2),abs(-.5+uv+t2))\n            //abs(.5+uv+t2*(1.+mod(floor(uv.y),2.)/2.))\n            //abs(.5+uv+t2+pow(floor(uv.x),2.)/1.5)\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n        \n        //if((t2.x)>(t2.y) || k%2 == 0) uv /= 1.5;\n\n        //k += int(uv.x>uv.y);\n        //uv += float(int(iTime)/3);\n        \n        //uv += sign(uv-uv.yx)/2.+.5;\n        //uv += floor(uv*1.5); //another interesting pattern\n        \n        //if(t2.x<t2.y)\n        b =\n            uv.y>uv.x||t2.x>t2.y/2.\n            //uv.y>uv.x\n            //(b && uv.y<uv.x)||(!b && t2.y<t2.x)\n            //(uv.y>uv.x||t2.y<t2.x)&&!b\n            //uv.y>uv.x*float(t2.y>t2.x)\n            //uv.y>uv.x*float(t2.y>t2.x) //makes a braided pattern\n            //uv.y>uv.x+float(!b1)\n            //uv.y*float(!b1)>uv.x\n        ;\n        \n        //uv *= -sign(uv.x-.5);\n        if(b) uv = uv.yx;\n        //else {k += 1; uv *= 1.5; col=col.yzx;}\n        //uv.x += sign(t2.x-t2.y);\n        //uv.x -= sign(uv.x-uv.y);\n        \n        //uv.x -= t1_(floor(uv),floor(uv));\n        \n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv-.5)-sign(t2)\n            //-triangle_wave(uv+float(!b)-.5)\n        ;\n        //if(t2.y<t2.x) t2 = t2*1.5; else t2=t2/1.5;\n        uv =\n            t2-triangle_wave(uv.yx)\n            //t2-triangle_wave(uv.yx+float(!b))\n            //t2-triangle_wave(uv.yx+floor(uv.x*2.))\n        ;\n        //if(t2.y>t2.x)\n        \n        if(uv.y<uv.x||b)\n        //if(uv.y*float(col.x<col.y)<uv.x||b)\n        col =\n            vec3(col.zx,max(uv.x-uv.y,0.))\n            //abs(vec3(col.zx,max(uv.x-uv.y,-float(b)/2.)))\n            //vec3(col.yz,max(uv.x-uv.y,0.))\n            //vec3(col.zx,max(uv.x-uv.y,col.x))\n            //abs(sign(uv.x-uv.y)/2.-vec3(col.zx,max(uv.x-uv.y,0.)))\n        ;\n        //uv /= 1.+mod(uv.x,2.);\n        //if(t2.x>t2.y) col=col.yzx;\n\n\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    return\n        mod(floor(a),b)\n        //mod(mod(8.+floor(a/2.),8.+floor(a)),b)\n    ;\n}\nvec2 mainSound(int samp, float time){\n  \n  float s1 =\n      8.;\n  time = (time + floor(time*s1)/s1);\n  float\n  t=\n      (((time)/s1+max(fract(-time/2.),fract(time))/8.))/4./(1.+fmod(time*4.-floor(time/s1),2.)),\n  t1 = fmod(t,2.)\n  ;\n  t *=\n      (s1*s1)\n  ;\n  float a=\n      16.*pow(fract(-t),2.)\n  ,\n  nb = time*pow(2.,(1.+t1)*(2.+fmod(t/(1.+t1),s1)+1. + fmod(floor(t/s1),2.))/7.+4.5);\n  return\n      log(1.-abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a)\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}