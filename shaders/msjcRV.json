{
    "Shader": {
        "info": {
            "date": "1687942366",
            "description": "i wanna turn this into something more sometime later. move grid w/ keyboard\n\nbottom pixel row is state itself",
            "flags": 48,
            "hasliked": 0,
            "id": "msjcRV",
            "likes": 1,
            "name": "little state experiment",
            "published": 3,
            "tags": [
                "2d",
                "state"
            ],
            "usePreview": 0,
            "username": "oatmealine",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "vec2 tileToPos(int v) {\n  float vf = float(v);\n  vec2 xy = vec2(mod(vf, iChannelResolution[0].x),\n                 floor(vf / iChannelResolution[0].x));\n  xy += vec2(0.5);\n  xy /= iChannelResolution[0].xy;\n  return xy;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 p = fragCoord.xy / iResolution.xy;\n  \n  vec2 uv = p;\n\n  uv -= 0.5;\n  uv.x *= iResolution.x / iResolution.y;\n  uv *= 1.1;\n  uv += 0.5;\n  \n  vec3 col = vec3(0.15, 0.15, 0.3);\n  \n  if (uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0) {\n    float x = floor(uv.x * float(getWidth()));\n    float y = floor(uv.y * float(getHeight()));\n    \n    for (int i = 1; i <= getTileCount(); i++) {\n      vec4 tile = texture(iChannel0, tileToPos(i));\n      if (eq(tile.x, x) && eq(tile.y, y)) {\n        col = vec3(tile.b);\n      }\n    }\n  \n    //col = vec3((x / 10.0 + y / 10.0) / 2.0);\n  }\n\n  fragColor = vec4(col, 1.0) + texture(iChannel0, p / iResolution.x * float(getTileCount() + 1)) / float(max(getWidth(), getHeight()));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 tileToPos(int v) {\n  float vf = float(v);\n  vec2 xy = vec2(mod(vf, iChannelResolution[0].x),\n                 floor(vf / iChannelResolution[0].x));\n  xy += vec2(0.5);\n  xy /= iChannelResolution[0].xy;\n  return xy;\n}\n\nint posToTile(vec2 xy) {\n  xy *= iChannelResolution[0].xy;\n  xy = floor(xy);\n  return int(xy.x + xy.y * iChannelResolution[0].x);\n}\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  int tile = posToTile(uv);\n\n  // (x, y, id, moved [dir % 4 + amp * 4 || -1])\n  vec4 state = texture(iChannel0, uv);\n  // (isLoaded, ?, ?, ?)\n  vec4 boardState = texture(iChannel0, tileToPos(0));\n  \n  bool isLoaded = boardState.x == 1.0;\n  \n  if (tile == 0) {\n    // loaded = true\n    state.x = 1.0;\n\n    fragColor = state;\n  } else if (tile > 0 && tile <= getTileCount()) {\n    if (!isLoaded) {\n      state = vec4(float((tile - 1) % getWidth()), float((tile - 1) / getHeight()), hash12(fragCoord.xy), -1.0);\n    }\n    \n    bool moveLeft  = texelFetch(iChannel1, ivec2(KEY_LEFT,  1), 0).x > .5;\n    bool moveRight = texelFetch(iChannel1, ivec2(KEY_RIGHT, 1), 0).x > .5;\n    bool moveUp    = texelFetch(iChannel1, ivec2(KEY_UP,    1), 0).x > .5;\n    bool moveDown  = texelFetch(iChannel1, ivec2(KEY_DOWN,  1), 0).x > .5;\n    \n    if (moveLeft) {\n      state.x -= 1.;\n      state.x = mod(state.x, float(getWidth()));\n    }\n    if (moveRight) {\n      state.x += 1.;\n      state.x = mod(state.x, float(getWidth()));\n    }\n    if (moveUp) {\n      state.y += 1.;\n      state.y = mod(state.y, float(getHeight()));\n    }\n    if (moveDown) {\n      state.y -= 1.;\n      state.y = mod(state.y, float(getHeight()));\n    }\n    \n    fragColor = state;\n  } else {\n    discard;\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool eq(float a, float b) {\n  return abs(a - b) < 0.00001;\n}\n\nint getWidth() {\n  return 12;\n}\nint getHeight() {\n  return 12;\n}\n\nint getTileCount() {\n  return getWidth() * getHeight();\n}\n\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}