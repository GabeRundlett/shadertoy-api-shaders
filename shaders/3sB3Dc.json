{
    "Shader": {
        "info": {
            "date": "1550107368",
            "description": "testing lossy video compression left is uncompressed right is compressed, compresses 8 pixels into 3",
            "flags": 32,
            "hasliked": 0,
            "id": "3sB3Dc",
            "likes": 6,
            "name": "testing lossy video compression",
            "published": 3,
            "tags": [
                "video",
                "testing",
                "compression",
                "lossy"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 575
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u)\n{\n    vec2 cuv = (u/iResolution.xy)*min(VIDEO_SIZE,iResolution.xy);\n    float sx;\n    if (iMouse.w > 0.) sx = iMouse.x;\n    else sx = iResolution.x*.5;\n    if (sx > u.x) fragColor = texelFetch(iChannel0,ivec2(cuv),0);\n    else fragColor = texelFetch(iChannel1,ivec2(cuv),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define COMPRESSION 8\n#define QUALITY 4\n#define PRECISION .5\n\n#define KEYFRAME_INTERVAL 400\n#define KEYFRAME step(.5,float(iFrame%KEYFRAME_INTERVAL))\n\n#define PI 3.141592653\n\n#define VIDEO_WIDTH 640.\n#define VIDEO_HEIGHT 360.\n#define VIDEO_SIZE vec2(VIDEO_WIDTH,VIDEO_HEIGHT)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    fragColor = texelFetch(iChannel0,ivec2(u),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 hash(vec4 a) {\n\treturn fract(abs(sin(a.ywxz*766.345)+cos(normalize(a)*4972.92855))*2048.97435+abs(a.wxyz)*.2735);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 u)\n{\n    int cc = int(u.x)%COMPRESSION;\n    if (cc > 2) {\n     \tfragColor = vec4(0);\n        return;\n    }\n    \n    vec2 fu = vec2(floor(u.x/float(COMPRESSION))*float(COMPRESSION),u.y);\n    float samples[COMPRESSION];\n    for (int i = 0; i < COMPRESSION; i++) {\n        ivec2 suv = ivec2(fu+vec2(i,0));\n        samples[i] = texelFetch(iChannel0,suv,0)[cc]-texelFetch(iChannel2,suv,0)[cc]*KEYFRAME;\n    }\n    \n    vec4 h = hash(u.xyyx+float(iFrame)*.0927),\n        c = vec4(h.z*.2-.1,.1+h.x*15.,.5,.3+h.y*.2);\n    int order[COMPRESSION];\n\tfor (int i = 0; i < COMPRESSION; i++) order[i] = i;\n    for (int k = 0; k < QUALITY; k++) {\n        for (int i = 0; i < COMPRESSION/2; i++) {\n            int ti = order[0], ii = int(fract(h.x+float(ti)*.123+float(iFrame)*.09764)*(float(COMPRESSION)-1e-4));\n            order[0] = order[ii];\n            order[ii] = ti;\n        }\n        float ps = (1.-float(k)/float(QUALITY*3/2))*PRECISION;\n        for (int i = 0; i < COMPRESSION; i++) {\n            int oi = order[i];\n            float x = float(oi)/float(COMPRESSION-1),\n                s = samples[oi],\n                x1 = c.x+x*c.y,\n                x2 = cos(x1),\n                e = c.z+x2*c.w,\n                d2 = s-e, d2p = d2*ps,\n                d1 = d2*c.w*sign(cos(x1+PI*.5))*ps;\n            c += vec4(d1,d1*x,d2p,d2p*x2);\n        }\n    }\n    \n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u)\n{\n    if (iFrame < 10) {\n     \tfragColor = vec4(0,0,0,1);\n        return;\n    }\n    ivec2 fuv = ivec2(floor(u.x/float(COMPRESSION))*float(COMPRESSION),u.y);\n    float x = (floor(u.x)-float(fuv.x))/float(COMPRESSION-1);\n    vec4 cr = texelFetch(iChannel0,fuv,0),\n        cg = texelFetch(iChannel0,fuv+ivec2(1,0),0),\n        cb = texelFetch(iChannel0,fuv+ivec2(2,0),0);\n    fragColor = texelFetch(iChannel1,ivec2(u),0)*KEYFRAME+\n        \t\tvec4(cr.z+cos(cr.x+x*cr.y)*cr.w,\n                     cg.z+cos(cg.x+x*cg.y)*cg.w,\n                     cb.z+cos(cb.x+x*cb.y)*cb.w,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}