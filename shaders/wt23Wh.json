{
    "Shader": {
        "info": {
            "date": "1559401139",
            "description": "something for my cycling",
            "flags": 0,
            "hasliked": 0,
            "id": "wt23Wh",
            "likes": 2,
            "name": "vec2 to float to vec2",
            "published": 3,
            "tags": [
                "package"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 852
        },
        "renderpass": [
            {
                "code": "#define pre    256.0\n#define pre2   pre*pre\n#define pre3   pre*pre2\n#define pre3d2 pre3/2.\n\n/*\nvec4 decodeFloat4( float v ) {\n    //vec4 enc = vec4(1., pre, pre*pre, pre*pre*pre) * v;\n    //enc = fract(enc);\n    //enc -= enc.yzww * vec4(1.0/pre,1.0/pre,1.0/pre,0.0);\n    //return enc;\n    \n    \n    \n}\n\nfloat encodeVec4( vec4 v ) {\n    //return dot( rgba, vec4(1.0, 1./pre, 1./pre/pre, 1./pre/pre/pre) );\n    vec4 enc = v+vec4(pre)*vec4(0.,1.,2.,3.);\n    return enc;\n}*/\n\n// color2float, float2color\n// allows to convert vec3 color <0.0;1.0> with 256 shades\n// to signed number with max size 8388608 and back\n// decimal places are lost during conversion to color\n\nfloat vec3Tfloat(in vec3 c) {\n    c *= pre-1.;\n    // comment following line to see how values can be malformed\n    c = floor(c); // without this value could be shifted for some intervals\n    return c.r*pre2 + c.g*pre + c.b - pre3d2;\n}\n\n// values out of <-8388608;8388608> are stored as min/max values\nvec3 floatTvec3(in float val) {\n    val += pre3d2; // this makes values signed\n    if(val < 0.) {\n        return vec3(0.);\n    }\n    if(val > pre3) {\n        return vec3(1.);\n    }\n    vec3 c = vec3(0.);\n    c.b = mod(val, pre);\n    val = floor(val/pre);\n    c.g = mod(val, pre);\n    val = floor(val/pre);\n    c.r = mod(val, pre);\n    return c/(pre-1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    float en = vec3Tfloat( vec3(mo, 0.) );\n    vec2 dn = floatTvec3( en ).xy;\n\n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n    \n    if ( distance( uv, dn ) < 0.01 ) {\n        col = vec3( 1. );\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}