{
    "Shader": {
        "info": {
            "date": "1614030212",
            "description": "In my tooling I'm passing all of these #define declarations as uniforms and tweening between sets.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGfRw",
            "likes": 24,
            "name": "Acid Jelly",
            "published": 3,
            "tags": [
                "colorful",
                "psychedelic",
                "trippy",
                "gloop"
            ],
            "usePreview": 0,
            "username": "yozic",
            "viewed": 930
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n#define orbs 20.\n\n\n/*\n\nVariant 01 \n\n*/\n\n#define zoom 0.07\n#define contrast 0.13\n#define orbSize 6.46\n#define radius 11.\n#define colorShift 10.32\n#define sides 1.\n#define rotation 1.\n#define sinMul 0.\n#define cosMul 2.38\n#define yMul 0.\n#define xMul 0.28\n#define xSpeed 0.\n#define ySpeed 0.\n#define gloop 0.003;\n#define yDivide 4.99\n#define xDivide 6.27\n\n/*\n\nVariant 02\n\n#define zoom 0.27\n#define contrast 0.13\n#define orbSize 4.25\n#define radius 11.\n#define colorShift 10.32\n#define sides 1.\n#define rotation 1.\n#define sinMul 0.\n#define cosMul 2.38\n#define yMul 0.\n#define xMul 0.28\n#define xSpeed 0.\n#define ySpeed 0.\n#define gloop 0.003\n#define yDivide 11.\n#define xDivide 12.4\n\n*/\n\n/*\n\nVariant 03\n\n#define zoom 0.02\n#define contrast 0.13\n#define orbSize 11.\n#define radius 3.21\n#define colorShift 10.32\n#define sides 1.\n#define rotation 1.\n#define sinMul 0.\n#define cosMul 5.\n#define yMul 0.\n#define xMul 0.28\n#define xSpeed 0.\n#define ySpeed 0.\n#define gloop 0.003\n#define yDivide 10.99\n#define xDivide 12.\n\n*/\n\nvec4 orb(vec2 uv, float s, vec2 p, vec3 color, float c) {\n  return pow(vec4(s / length(uv + p) * color, 1.), vec4(c));\n}\n\nmat2 rotate(float a) {\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n  fragColor = vec4(0.);\n  uv *= zoom;\n  uv /= dot(uv, uv);\n  uv *= rotate(rotation * iTime / 10.);\n  for (float i = 0.; i < orbs; i++) {\n    uv.x += sinMul * sin(uv.y * yMul + iTime * xSpeed) + cos(uv.y / yDivide - iTime);\n    uv.y += cosMul * cos(uv.x * xMul - iTime * ySpeed) - sin(uv.x / xDivide - iTime);\n    float t = i * PI / orbs * 2.;\n    float x = radius * tan(t);\n    float y = radius * cos(t + iTime / 10.);\n    vec2 position = vec2(x, y);\n    vec3 color = cos(.02 * uv.x + .02 * uv.y * vec3(-2, 0, -1) * PI * 2. / 3. + PI * (float(i) / colorShift)) * 0.5 + 0.5;\n    fragColor += .65 - orb(uv, orbSize, position, 1. - color, contrast);\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}