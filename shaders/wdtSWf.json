{
    "Shader": {
        "info": {
            "date": "1573077555",
            "description": "Recreating the AT&T Pixel Machine mouse demo from 1987, with a Whitted feel. The ground plane back then was a Mandrill, and I believe the size was 64x64 pixels. But, it was interactive! This one should run on a cheap phone.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtSWf",
            "likes": 15,
            "name": "Pixel Machine mouse simulation",
            "published": 3,
            "tags": [
                "raytracing",
                "mouse",
                "sphere"
            ],
            "usePreview": 0,
            "username": "erich666",
            "viewed": 1177
        },
        "renderpass": [
            {
                "code": "// Simulate the AT&T Pixel Machine demo in which a mouse moved the reflective sphere.\n// by Eric Haines\n// Derived from https://www.shadertoy.com/view/4dsGRn by Matthijs De Smedt, @anji_nl\n\nconst float ZMAX = 99999.0;\nconst float EPSILON = 0.001;\n\n// model location (sphere)\nvec3 lm = vec3(0.0,0.0,0.0);\n\nvec3 backgroundColor = vec3(0.34, 0.55, 0.85);\n\nstruct Intersection\n{\n\tvec3 p;\n\tfloat dist;\n\t\n\tvec3 n;\n\tvec3 diffuse;\n\tvec3 specular;\n};\n\t\nstruct Ray\n{\n\tvec3 o;\n\tvec3 dir;\n};\n\t\nstruct Light\n{\n\tvec3 p;\n\tvec3 color;\n};\n\t\nstruct Plane\n{\n\tvec3 n;\n\tfloat d;\n};\n\t\nstruct Sphere\n{\n\tvec3 c;\n\tfloat r;\n};\n\t\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\nIntersection RaySphere(Ray ray, Sphere sphere)\n{\n\tIntersection i;\n\ti.dist = ZMAX;\n\tvec3 c = sphere.c;\n\tfloat r = sphere.r;\n\tvec3 e = c-ray.o;\n\tfloat a = dot(e, ray.dir);\n\tfloat b = r*r - dot(e,e) + a*a;\n\tif( b>0.0 )\n\t{\n\t\tfloat f = sqrt(b);\n\t\tfloat t = a - f;\n\t\tif(t > EPSILON)\n\t\t{\n\t\t\ti.p = ray.o + ray.dir*t;\n\t\t\ti.n = normalize(i.p-c);\n\t\t\ti.dist = t;\n\t\t}\n\t}\n\treturn i;\n}\n\nIntersection RayPlane(Ray ray, Plane p)\n{\n\tIntersection i;\n\tfloat num = p.d-dot(p.n, ray.o);\n\tfloat denom = dot(p.n, ray.dir);\n\tfloat t = num/denom;\n\tif(t > EPSILON)\n\t{\n\t\ti.p = ray.o + ray.dir * t;\n\t\t// hit rectangle?\n\t\tif ( i.p.x < -8.0 || i.p.x > 8.0 || i.p.z < 4.0 || i.p.z > 24.0 ) {\n\t\t\t// missed\n\t\t\ti.dist = ZMAX;\n\t\t} else {\n\t\t\ti.n = p.n;\n\t\t\ti.dist = t;\n\t\t}\n\t}\n\telse\n\t{\n\t\t// did not hit plane\n\t\ti.dist = ZMAX;\n\t}\n\treturn i;\n}\n\nIntersection MinIntersection(Intersection a, Intersection b)\n{\n\tif(a.dist < b.dist)\n\t{\n\t\treturn a;\n\t}\n\telse\n\t{\n\t\treturn b;\n\t}\n}\n\nvec3 PlaneMaterial(Intersection i)\n{\n\tfloat d = 0.0;\n\t// checkerboard function that returns 0 or 1\n\td = mod(floor(i.p.x)+floor(i.p.z),2.0);\n\t// vary between red (0) and yellow (1)\n\treturn vec3(0.8 + 0.1*d, 0.3 + 0.55*d, 0.15 - 0.1*d)*0.8;\n}\n\nIntersection SceneIntersection(Ray r)\n{\n\tIntersection iOut;\n\t\n\tPlane plane;\n\tplane.n = normalize(vec3(0,1,0));\n\tplane.d = -2.0;\n\tIntersection iPlane = RayPlane(r, plane);\n\tiPlane.diffuse = PlaneMaterial(iPlane);\n\tiPlane.specular = vec3(0.0);\n\tiOut = iPlane;\n\t\n    vec3 pos = lm;\n    Sphere sphere;\n    sphere.c = pos;\n    sphere.r = 2.0;\n    Intersection iSphere = RaySphere(r, sphere);\n    iSphere.diffuse = vec3(0.2);\n    iSphere.specular = vec3(0.7);\n    iOut = MinIntersection(iOut, iSphere);\n\n\treturn iOut;\n}\n\nvec3 CalcLighting(Light light, Intersection i, vec3 origin)\n{\n\tif ( i.dist >= ZMAX ) {\n\t\treturn backgroundColor;\n\t}\n\tvec3 n = i.n;\n\tvec3 p = i.p;\n\tvec3 l = light.p;\n\tvec3 v = normalize(origin-p);\n\tvec3 h = normalize(l+v);\n\tfloat NdotL = saturate(dot(n,l));\n\tfloat NdotH = saturate(dot(n,h));\n\tvec3 diffuse = NdotL*i.diffuse;\n\tvec3 spec = 0.18 * pow(NdotH,40.0) * i.specular;\n\tvec3 color;\n\tcolor = (diffuse+spec) * light.color;\n\n\tRay shadowRay;\n\tshadowRay.o = i.p;\n\tfloat lightDist = 100.0;\n\tshadowRay.dir = light.p;\n\tIntersection shadowI = SceneIntersection(shadowRay);\n\tif(shadowI.dist < lightDist)\n\t{\n\t\tcolor *= 0.4;\n\t}\n\t\n\treturn color;\n}\n\nvec3 GetLighting(Intersection i, vec3 origin)\n{\n\tvec3 color = vec3(0);\n\tLight light;\n\t\n    // or just set X to -2.0 to stop animation\n\tlight.p = normalize(vec3(2.0*sin(iTime*0.5),2.0,-2.0));\n\tlight.color = vec3(2.5);\n\tcolor += CalcLighting(light, i, origin);\n\n\treturn color;\n}\n\nvec3 GetColor(Ray ray, vec2 fragCoord)\n{\n\t// Branch version\n\tIntersection i = SceneIntersection(ray);\n\tvec3 color = GetLighting(i, ray.o);\n\tif(i.dist < ZMAX-EPSILON && i.specular.x > 0.0)\n\t{\n\t\tvec3 specular = i.specular;\n\t\tvec3 incident = normalize(i.p-ray.o);\n\t\tray.dir = reflect(incident,i.n);\n\t\tray.o = i.p+ray.dir*EPSILON;\n\t\t// First bounce\n\t\ti = SceneIntersection(ray);\n\t\tcolor += GetLighting(i, ray.o) * specular;\n        /* no second bounce needed, since there's just the shiny sphere.\n\t\tif(i.dist < ZMAX-EPSILON && i.specular.x > 0.0)\n\t\t{\n\t\t\tspecular *= i.specular;\n\t\t\tincident = normalize(i.p-ray.o);\n\t\t\tray.dir = reflect(incident,i.n);\n\t\t\tray.o = i.p+ray.dir*EPSILON;\n\t\t\t// Second bounce\n\t\t\ti = SceneIntersection(ray);\n\t\t\tif(i.dist < ZMAX-EPSILON && specular.x > 0.0)\n\t\t\t{\n\t\t\t\tcolor += GetLighting(i, ray.o) * specular;\n\t\t\t}\n\t\t}\n\t\t*/\n    }\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 mouse = (iMouse.xy/iResolution.xy*2.0-vec2(1.0))*vec2(iResolution.x/iResolution.y,1.0)*2.0;\n    lm = vec3(1.5*mouse.x,0.0,3.0*mouse.y+14.0);\n\n\tvec2 pos = -1.0 + 2.0 * ( fragCoord.xy / iResolution.xy );\n\tvec2 posAR;\n\tposAR.x = pos.x * (iResolution.x/iResolution.y);\n\tposAR.y = pos.y;\n    // fov knob\n    posAR *= 0.3;\n\tvec3 rayDir = normalize(vec3(posAR.x, posAR.y - 0.30, 1.0));\n\tRay ray;\n\tray.o = vec3(0,2.2,0);\n\tray.dir = rayDir;\n\t\n\tvec3 color = GetColor(ray, fragCoord);\n\tfragColor = vec4(color.x, color.y, color.z, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}