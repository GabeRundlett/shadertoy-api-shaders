{
    "Shader": {
        "info": {
            "date": "1686954953",
            "description": "Experimenting with curves",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfcR2",
            "likes": 9,
            "name": "Braids",
            "published": 3,
            "tags": [
                "raymarching",
                "curves"
            ],
            "usePreview": 0,
            "username": "AndrewB330",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "const float M_PI = 3.14159265358979323846264338327950288;\nconst float M_PI_T2 = M_PI * 2.0;\nconst float M_PI_2 = 1.57079632679489661923132169163975144;\nconst vec3 LIGHT = normalize(vec3(1.0));\n\nfloat sqr(float x) { return x * x; }\n\nvec3 point_on_curve(float t, float phase, float stretch)\n{\n    float sn = sin(t + phase);\n    float cs = cos(t + phase);\n    return vec3(cs, t * stretch, sn * cs);\n}\n\nfloat dist_to_point_on_curve(vec3 p, float t, float phase, float stretch)\n{\n    return length(point_on_curve(t, phase, stretch) - p);\n}\n\nfloat dist_to_point_on_curve_dt(vec3 p, float t, float phase, float stretch)\n{\n    float sn = sin(t + phase);\n    float cs = cos(t + phase);\n    return 2.0 * (sn * (p.x - cs) + (sqr(sn) - sqr(cs)) * (p.z - sn * cs) - stretch * (p.y - stretch * t));\n}\n\nfloat nearest_point_on_curve(vec3 p, float phase, float stretch)\n{\n    float t = p.y / stretch;\n    for (int i = 0; i < 16;i++)\n    {\n        float dt = dist_to_point_on_curve_dt(p, t, phase, stretch);\n        t -= dt * 0.1;\n    }\n    return t;\n}\n\nfloat dist_to_curve(vec3 p, float phase, float stretch)\n{\n    float t = nearest_point_on_curve(p, phase, stretch);\n    return dist_to_point_on_curve(p, t, phase, stretch);\n}\n\nfloat sd_curve(vec3 p, float phase, float stretch, float radius)\n{\n    return (dist_to_curve(p, phase, stretch) - radius) * 0.5;\n}\n\nvec4 op(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec4 map_braid(vec3 p, float phase, float stretch)\n{\n    float radius = 0.65;\n    \n    // Check if near the bounding cylinder\n    float bb = length(vec2(p.x, p.z)) - 1.0 - radius;\n    if (bb > 0.3)\n    {\n        return vec4(1.0, 1.0, 1.0, bb * 0.7);\n    }\n    \n    // Union of 3 curves with phase shift\n    // 235, 209, 138\n    vec4 res = vec4(vec3(0.9, 0.8, 0.5), sd_curve(p, M_PI * 0.0 / 3.0 + phase, stretch, radius));\n    res = op(res, vec4(vec3(0.99, 0.9, 0.7), sd_curve(p, M_PI * 2.0 / 3.0 + phase, stretch, radius)));\n    res = op(res, vec4(vec3(0.8, 0.6, 0.4), sd_curve(p, M_PI * 4.0 / 3.0 + phase, stretch, radius)));\n    return res;\n}\n\nvec3 transform(vec3 p, vec3 up, vec3 forward, vec3 center, float angle)\n{\n    p -= center;\n    up = normalize(up);\n    forward = normalize(forward);\n    vec3 right = cross(up, forward);\n    forward = cross(up, right);\n    p = vec3(dot(p, right), dot(p, up), dot(p, forward));\n    p = vec3(p.x * cos(angle) + p.z * sin(angle), p.y, p.z * cos(angle) - p.x * sin(angle));\n    return p;\n}\n\nvec4 map(vec3 p)\n{\n    float a = iTime * 0.1;\n    p = vec3(p.x * cos(a) + p.y * sin(a), p.y * cos(a) - p.x * sin(a), p.z);\n    \n    vec4 res = vec4(0.0, 0.0, 0.0, 1000.0);\n    \n    float h1 = 0.0;\n    float h2 = 0.0;\n\n    for (int i = 0; i < 14; i++)\n    {\n        // Random transform\n        h1 += 0.1523;\n        h2 += 0.1723;\n        float dx = fract(sin(h1 * 12.9898) * 43758.5453) - 0.5;\n        float dy = fract(sin(h1 * 78.233) * 43758.5453) - 0.5;\n        float x = (fract(sin(h2 * 12.9898) * 43758.5453) - 0.5) * 8.0;\n        float y = (fract(sin(h2 * 78.233) * 43758.5453) - 0.5) * 8.0;\n        vec3 pp = transform(p, vec3(dx, dy, 0.0), vec3(0.0, 0.0, 1.0), vec3(x, y, -3.0) * float(i), 3.0 * cos(iTime + h2 * 10.0));\n        res = op(res, map_braid(pp, iTime, 1.5 + sin(iTime + h1 * 15.0) * 0.5));\n    }\n    \n    return res;\n}\n\nvec4 trace(vec3 origin, vec3 dir, out float sum)\n{\n    float t = 0.0;\n    float mn = 100.0;\n    for (int i = 0; i < 128; i++)\n    {\n        vec4 h = map(origin);\n        origin += dir * h.w;\n        t += h.w;\n        if (h.w < 0.01) return vec4(h.rgb, t);\n        sum += 1.0;\n        if (origin.z < -50.0) break;\n    }\n\n    return vec4(map(origin).rgb, -mn);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.02;\n    return normalize(e.xyy*map(pos + e.xyy).w +\n\t\t\t\t\t e.yyx*map(pos + e.yyx).w +\n\t\t\t\t\t e.yxy*map(pos + e.yxy).w +\n\t\t\t\t\t e.xxx*map(pos + e.xxx).w);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ratio = iResolution.xy / iResolution.y;\n    \n    vec3 dir = normalize(vec3((uv - 0.5) * ratio, -1.0));\n    vec3 origin = vec3(0.0, 0.0 + iTime * 0.0, 15.0);\n    \n    float res_sum = 0.0;\n    vec4 res = trace(origin, dir, res_sum);\n    if (res.w > 0.0)\n    {\n        vec3 n = calcNormal(origin + res.w * dir);\n        float l = clamp(dot(LIGHT, n), 0.0, 1.0) * 0.8 + 0.2 + clamp(res_sum * 0.01, 0.0, 1.0);\n        vec4 shadow_res = trace(origin + res.w * dir + LIGHT * 0.1, LIGHT, res_sum);\n        if (shadow_res.w > 0.0)\n        {\n            //l = 0.2;\n        }\n        fragColor = vec4(res.rgb * l,1.0);\n        return;\n    }\n\n    fragColor = vec4(vec3(0.99, 0.9, 0.7) * res_sum * 0.005, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}