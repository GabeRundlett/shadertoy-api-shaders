{
    "Shader": {
        "info": {
            "date": "1622767857",
            "description": "[url=https://en.wikipedia.org/wiki/Stirling%27s_approximation]https://en.wikipedia.org/wiki/Stirling%27s_approximation[/url] (calculator suitable version)",
            "flags": 0,
            "hasliked": 0,
            "id": "stl3DS",
            "likes": 8,
            "name": "Continuous Factorial Approx. I",
            "published": 3,
            "tags": [
                "approximation",
                "gamma",
                "continuous",
                "factorial",
                "specialfunction"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\n// Autodiff utilities\nvec2 fMul(in vec2 a, in vec2 b) { return vec2(a.x * b.x, a.x * b.y + a.y * b.x); }\nvec2 fInv(in vec2 z) { float q = 1.0 / z.x; return vec2(q, -z.y * q / z.x); }\nvec2 fPow(in vec2 a, in vec2 b) { float q = pow(a.x, b.x); return vec2(q, q * (b.x * a.y / a.x + b.y * log(a.x))); }\nvec2 fIntPow(in vec2 z, in int power) { float res = 1.0; for (int n=0; n < abs(power); n++) { res *= z.x; } if (power < 0) res = 1.0 / res; return vec2(res, float(power) * res / z.x * z.y); }\nvec2 fSqrt(in vec2 z) { float q = sqrt(z.x); return vec2(q, 0.5 * z.y / q); }\nvec2 fSinh(in vec2 z) { return vec2(sinh(z.x), cosh(z.x) * z.y); }\n\n// Constants\n#define TAU 6.2831853071\n#define E_INV 0.36787944117\n\nfloat factorial(in float x) {\n    x += 1.0;\n    return sqrt(TAU / x) * pow(E_INV * x * sqrt(x * sinh(1.0 / x) + 1.0 / (810.0 * x * x * x * x * x * x)), x);\n}\n\n// Autodifferentiated version\nvec2 factorial(in vec2 x) {\n    x.x += 1.0;\n    return fMul(fSqrt(TAU * fInv(x)), fPow(fMul(E_INV * x, fSqrt(fMul(x, fSinh(fInv(x))) + fInv(810.0 * fIntPow(x, 6)))), x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Draw the function\n    vec2 y = factorial(vec2(uv.x, 1.0));\n    draw(abs(uv.y - y.x) / sqrt(1.0 + y.y * y.y) - 0.02, vec3(0.6, 0.0, 0.8));\n\n    // Draw continuous Pascal's triangle\n    //float n = uv.x + 8.0;\n    //float k = uv.y + 4.0;\n    //float binCoeff = round(gamma(n) / (gamma(k) * gamma(n - k))); // Rounding is affordable since I'm only wanting integers\n    //color = vec3(binCoeff * 0.01);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}