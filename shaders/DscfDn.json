{
    "Shader": {
        "info": {
            "date": "1697018700",
            "description": "Bulb Testing",
            "flags": 0,
            "hasliked": 0,
            "id": "DscfDn",
            "likes": 6,
            "name": "Bulb Testing",
            "published": 3,
            "tags": [
                "spheres",
                "rgb",
                "liquid",
                "smooth",
                "hypnotizing",
                "pulsating"
            ],
            "usePreview": 0,
            "username": "zhonkvision",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "\n#define time mod(iTime, 100.)\n\nmat2 rot(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat smin(float a, float b, float h)\n{\n    float k = clamp((a-b)/ h * .5 + .5, 0., 1.);\n    return mix(a,b,k) - k * (1.-k) * h;\n}\n\nvec3 smin(vec3 a, vec3 b, float h)\n{\n    vec3 k = clamp((a-b)/ h * .2 + .5, 0., 1.);\n    return mix(a,b,k) - k * (1.-k) * h;\n}\n\nvec3 kifs(vec3 p, float t)\n{\n    float s = 0.1 + sin(time * 0.3) * 0.1;\n    for(float i = 0.; i < 5.; ++i)\n    {\n        float t2 = t + i;\n        p.xz *= rot(t2);\n        p.xy *= rot(t2 * .3);\n        p = smin(p, -p, -1.);\n        p -= s;\n        //p -= s + sin(t- length(p));\n        s *= 0.7;\n    }\n\n    return p;\n}\n\nfloat map(vec3 p, inout vec3 col)\n{\n    float d;\n    \n    vec3 p1 = p;\n    p1 = kifs(p, time * 1.);\n    float d1 = length(p1) - 0.01;\n\n    p.xy *= rot(time * 0.5);\n    p.xz *= rot(time * 0.3);\n    \n    float y = sin(time)*.5+2.;\n    float x = sqrt(y*y + y*y);\n\n    float sph = length(p) - 10.;\n\n    float sph1 = length(vec3(-x,-y,0.) - p) - sin(time * 10.)*0.015-.3;\n    vec3 sph1col = vec3(1., 3., 0.) * (1. / sph1);\n    float sph2 = length(vec3(x,-y,0.) - p) - sin(time * 8.)*0.015-.3;\n    vec3 sph2col = vec3(0., 0., 1.) * (1. / sph2);\n    float sph3 = length(vec3(0.,y,0.) - p) - sin(time * 6.)*0.015-.3;\n    vec3 sph3col = vec3(1., 1., 0.) * (1. / sph3);\n\n    \n    d = smin(sph1, sph2, (sin(time*4.)*.2+ 6.2) * 0.8);\n    d = smin(d, sph3, (sin(time*4.)*.5+ 7.0) * 0.8);\n    d = smin(d, d1, 6.);\n    col = smin(sph1col, sph2col, -.5);\n    col = smin(col, sph3col, -.5);\n    \n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1.);\n\n    vec3 s = vec3(0.,0.,-10.);\n    vec3 r = normalize(vec3(uv, 1.));\n    vec3 col = vec3(0);\n    vec3 acol = vec3(0);\n    float at = 0.;\n    vec3 p = s;\n    float i = 0.;\n    for(i = 0.; i < 100.; ++i)\n    {\n        float d = abs(map(p, acol));\n        at += 0.09 / (0.015 + d);\n        d *= 0.1;\n        if(d < 0.01)\n        {\n            break;\n        }\n        col += pow(at * 0.026, 3.);\n        p += r * d;\n    }\n    col *= acol;\n    //col += pow(1.-i/101., 6.);\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}