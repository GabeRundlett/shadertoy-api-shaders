{
    "Shader": {
        "info": {
            "date": "1554743564",
            "description": "star distance, using a loop.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsjXzV",
            "likes": 5,
            "name": "star distance",
            "published": 3,
            "tags": [
                "star",
                "distance"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 491
        },
        "renderpass": [
            {
                "code": "#define PI acos(-1.0)\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n\nfloat star(vec2 p, int sides, float size) {\n    float len1 = -1000.0;\n    float len2 = -1000.0;\n    vec2 n = vec2(0,1);\n    vec2 dir1;\n    vec2 dir2;\n    \n    for (int i = 0; i < sides; i++) {\n        n *= rot(PI/float(sides)*2.0);\n        \n        float l = dot(p,n)-size;\n        \n        if (l > len2) {\n            if (l > len1) {\n                len2 = len1;\n                dir2 = dir1;\n\n                len1 = l;\n                dir1 = n;\n            } else {\n                len2 = l;\n                dir2 = n;\n            }\n        }\n    }\n    \n    vec2 n2 = n*rot(PI/float(sides)*2.0);\n    float dist = -(n2/dot(n2,n)*size).x;\n    n2 = n*rot(PI/float(sides));\n    float dist2 = -(n2/dot(n2,n)*size).x;\n    \n    float len3 = abs(dot(vec2(-dir2.y,dir2.x),p));\n    len3 = max(len3-dist,0.0)+min(len3-dist2,0.0);\n    float len4 = length(vec2(len2,len3))*sign(len2);\n    \n    return len4;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = 1.7;\n    vec2 uv = scale*(fragCoord*2.0-iResolution.xy)/iResolution.y;\n    float aa = iResolution.y/scale*0.4;\n    \n    \n\tfloat len = star(uv, int(7.0+sin(iTime)*2.0), 0.5);\n    \n\n    vec3 col = vec3(1.0) - sign(len)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-2.0*abs(len));\n    col *= 0.8 + 0.2*cos(120.0*abs(len));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,1.0/aa,abs(len)) );\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}