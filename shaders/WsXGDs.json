{
    "Shader": {
        "info": {
            "date": "1547753927",
            "description": "Shader showdown practice session 004: Making a shader in 25 minutes from memory.\nPracticing live on TWITCH every Tuesdays around 20:00 UK time.\nhttps://www.twitch.tv/evvvvil_\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXGDs",
            "likes": 17,
            "name": "[TWITCH] Ride of the snug blocks",
            "published": 3,
            "tags": [
                "noise",
                "time",
                "demoscene",
                "map",
                "specular",
                "limit",
                "live",
                "battle",
                "shadershowdown",
                "gloss",
                "coding",
                "twitch",
                "showdown",
                "perpendicular"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 914
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////\n// WHAT THE FUCK IS THE SHADER SHOWDOWN?\n\n// The \"Shader Showdown\" is a demoscene live-coding shader battle competition.\n// 2 coder battle for 25 minutes making a shader from memory on stage. \n// The audience votes for the winner by making noise or by voting on their phone.\n// Winner goes through to the next round until the final where champion is crowned.\n// Live coding shader software used is BONZOMATIC made by Gargaj from Conspiracy:\n// https://github.com/Gargaj/Bonzomatic\n\n// Every tuesdays around 20:00 UK time I practise live on TWITCH.\n// This is the result of session 004. \n\n// COME SEE LIVE CODING EVERY TUESDAYS HERE: https://www.twitch.tv/evvvvil_\n\n// evvvvil / DESiRE demogroup\n\nvec2 sc,e=vec2(.00035,-.00035);float t,tt;vec3 np;\n\n//Cheap box function bullshit, not my doings, another instance of stealing from IQ\nfloat mx(vec3 p){return max(max(p.x,p.y),p.z);}\nfloat bo(vec3 p,vec3 r){return mx(abs(p)-r);}\n\n//Simple 2d rotate function, nothing to see here, move along, find the double-ended dildo\nmat2 r2(float r) {return mat2(cos(r),sin(r),-sin(r),cos(r));}\n\n//Fucking bits function which makes the the fucking bit/piece:\n//Essentially the piece is a bunch of thin rectangles inside a bunch of cubes the total of which is much smaller than my dick\nvec2 fb( vec3 p )\n{\n    vec2 h,t=vec2(bo(abs(p)-vec3(0,3,0),vec3(1,.8,1)),5);\n    h=vec2(bo(abs(p)-vec3(0,2,0),vec3(1.2,.8,1.2)),3);\n    h.x=min(bo(abs(abs(p)-vec3(.6,0,.6))-vec3(.3,0,.3),vec3(.1,20,.1)),h.x);\n    t=(t.x<h.x)?t:h;\n    return t;\n}\n//IQ/Shane's compact 3d noise function. If i can memorise your mum's dress size then i can memorise this\nfloat noise(vec3 p){\n    vec3 ip=floor(p);p-=ip;\n    vec3 s=vec3(7,157,113);\n    vec4 h=vec4(0,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p);\n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z);\n}\n//Sky because on the 7th day god told your mum to get off her fat ass and let there be light!\nvec3 sky(vec3 rd,vec3 ld){ return vec3(1,.5,0)*pow(clamp(dot(rd,ld),0.,1.),128.)+vec3(.5,.6,.7)-rd.y*.2;}\n//Map function / scene / Where the geometry is made. This fucker is like Richard Pryor after too much freebase.(on fire)\nvec2 mp( vec3 p )\n{\n    //The technique is taking a piece of geometry modelled in fb function above and \n    //repeat, bend, twist the fuck outta it until we reach a concensus where every body is stoned and drinking tea.\n    np=p;np.z=mod(np.z+tt*6.6,40.)-20.;\n    //above line creates np=new position. Then we clone it over z axis with modulo.\n    for(int i=0;i<9;i++){\n        //enter the pseudo fractal bullshit (it's not that fancy trust me; wipe the ketchup off the chair and take a seat)\n        //first we use symetry to create more geometry\n        np=abs(np)-2.;\n\t\t//Then we rotate the fucker a bit\n        np.xy*=r2(.785*float(i)*.5);\n        //Shift the bitch again somehow it goes awol but wait for it...\n        np-=-3.;\n        //...We bring the fucker back with a twisterooney\n        np.yz*=r2(.785*float(i));\n        //Then again shift it into place with dumb as fuck pos offset\n        np-=.785;\n    }\n    //Wait, what? more twisteroo but over time, because I wanna impress those middle aged ladies across the street...\n    np.xy*=r2(.785*(3.+2.*clamp(sin(tt*.5),-.5,.5)));\n    //Puffing up my chest now, they not looking... so check this fucking geom now that it's 8 times bigger with another symetry\n    np=abs(np)-vec3(1,-1,3);\n    //It's exhausting being handsome, but I always wanna be the cover of Men's Health Magazine...\n    vec2 h,t=fb(np);\n    //THIS TRICK! Take the whole black and yellow gemoetry, scales it, cos it, and presto we got some lovely white geometry\n    //hugging it and it's all very snug without any fucking overlapping, it's a thing of fucking beauty I tell you.\n    h=vec2(1.8*bo(cos(np*.4+.5),vec3(.2,.1,1)),6);\n    //the +.5 above is nice trick to open up the geom and make sure it has hole in the middle to avoid colliding  with the camera\n    //\"Open up the geometry\", \"make a hole\", I believe this time no need for extra lewd jokes, gotta be subtle sometimes, mother fucker.\n    t=(t.x<h.x)?t:h;\n    return t;\n}\n\n//Main raymarching loop with material ID flex, because your wife's yoga class is fucking lame, bro.\nvec2 tr( vec3 ro, vec3 rd )\n{\n  vec2 h,t=vec2(.1);\n  for(int i=0;i<128;i++){\n    h=mp(ro+rd*t.x);\n    if(h.x<.0001||t.x>60.) break;\n    t.x+=h.x;\n    //This extra line passes the material id\n    t.y=h.y;\n  }\n  if(t.x>60.) t.x=0.;\n  return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5; uv /= vec2(iResolution.y / iResolution.x, 1);//Boilerplate code building uvs by default in BONZOMATIC\n    //Modulo time because everything's gotta fucking die one day, including your lazy cat (not really just stops it all getting fucking noisy)  \n    tt=mod(iTime,100.);\n    //Camera simple bullshit thing ro=ray origin, rd=ray direction, co=color, fo=fog colour, ld=light direction\n   vec3 ro=vec3(0,0,-10),\n    cw=normalize(vec3(sin(tt)*10.,cos(tt*.66)*3.,10.)-ro),\n    cu=normalize(cross(cw,vec3(0,1,0))),\n    cv=normalize(cross(cu,cw)),\n    rd=mat3(cu,cv,cw)*normalize(vec3(uv,.4)),co,fo,ld=normalize(vec3(0.3,.5,-.3));\n    //Setting up default background colour and fog colour \n    co=fo=sky(rd,ld);\n    //Grabbing the fucking scene by shooting fuckin' rays, because we all want a laser gun for christmas.\n    sc=tr(ro,rd);\n    //Stick scene geometry result in this shorter one char variable. This time it's nice to finish fast.\n    t=sc.x;  \n  if(t>0.){\n    //We hit some geometry so let's get the current position (po) and build some normals (no). Fun over, time for some fucking maths.\n    vec3 po=ro+rd*t,no=normalize(e.xyy*mp(po+e.xyy).x+e.yxy*mp(po+e.yxy).x+e.yyx*mp(po+e.yyx).x+e.xxx*mp(po+e.xxx).x),\n    \n    //LIGHTING MICRO ENGINE BROSKI \n        \n    //Default albedo is still yellow because you're still bitter and envious (al=albedo)\n    al=vec3(1,.5,0);\n\t//THIS TRICK! Adds some detail to geometry by tweaking the normals. Adds sexyness, check the legs on this one.\n\tno*=(1.+.6*ceil(sin(np*2.)));no=normalize(no);\n    //Different material id? Better get fucking painting then... Someone hold Vincent's absinth glass please (al=albedo)\n    if(sc.y<5.) al=vec3(0);\n    if(sc.y>5.) al=vec3(1);\n    //dif = diffuse because I dont have time to cook torrance\n    float dif=max(0.,dot(no,ld)),\n    //ao = ambient occlusion, aor = ambient occlusion range\n    aor=t/50.,ao=exp2(-2.*pow(max(0.,1.-mp(po+no*aor).x/aor),2.)),\n    //spo=specular power, THIS TRICK is some fucking sweet gloss map generated from recursive noise function. Fuck yeah broski!\n    spo=exp2(1.+3.*noise(np/vec3(.4,.8,.8)+noise((np+1.)/vec3(.1,.2,.2)))),\n    //Fresnel blends the geometry in the background with some sort of gradient edge reflection colouring mother fucker\n    fresnel=pow(1.+dot(no,rd),4.);\n    //Fake sub surface fucking scattering, sort of reverse ambient occlusion trick from tekf, big up tekf! https://www.shadertoy.com/view/lslXRj\n    vec3 sss=vec3(.5)*smoothstep(0.,1.,mp(po+ld*0.4).x/0.4),\n    //spec=specular with the spo gloss map above, yeah broski, it's a thing of fucking beauty.\n    spec=vec3(1)*pow(max(dot(reflect(-ld,no),-rd),0.),spo);\n    //Ultimate final lighting result\n    co=mix(spec+al*(0.8*ao+0.2)*(dif+sss),sky(rd,ld),min(fresnel,0.5));\n    //Add some fucking fog to blend it even more, get soft and comfy, ride the sofa.\n    co=mix(co,fo,1.-exp(-.00002*t*t*t));\n  }\n  //Add some sort of tone mapping... but just like vegatarian sausages: it's not the real deal.\n  fragColor = vec4(pow(co,vec3(0.45)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}