{
    "Shader": {
        "info": {
            "date": "1543334932",
            "description": "Colliding bead-spring chains with fixed obstacles; front balls are dragged (each run is different, mouseable)",
            "flags": 32,
            "hasliked": 0,
            "id": "XtGfz3",
            "likes": 18,
            "name": "Jamming Polymers",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "physics",
                "polymer"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 733
        },
        "renderpass": [
            {
                "code": "// \"Jamming Polymers\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 Rot2D (vec2 q, float a);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HsvToRgb (vec3 c);\nmat3 QtToRMat (vec4 q);\nvec4 Loadv4 (int idVar);\n\nconst int nChain = 8, lenChain = 32, nBall = nChain * lenChain;\nvec3 ltPos, ltDir, vnBall;\nfloat dstFar, radObs, gapObs;\nint idBall;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec3 u;\n  vec2 r;\n  float b, d, w, dMin, rad;\n  rad = 0.5;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    r = Loadv4 (2 * n).xy;\n    u = ro - vec3 (r.x, rad, r.y);\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  p.xz -= HexToPix (PixToHex (p.xz / gapObs) * gapObs);\n  p.y -= 0.4;\n  return PrCylDf (p.xzy, radObs - 0.05, 0.4);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallHitSh (vec3 ro, vec3 rd, float rng)\n{\n  vec3 rs, u;\n  vec2 r;\n  float b, d, w, dMin, rad;\n  rad = 0.5;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    r = Loadv4 (2 * n).xy;\n    u = ro - vec3 (r.x, rad, r.y);\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) dMin = d;\n    }\n  }\n  return 0.6 + 0.4 * smoothstep (0., rng, dMin);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  vec2 a;\n  u = QtToRMat (Loadv4 (2 * idBall + 1)) * vnBall;\n  a = mod (floor (8. * vec2 (atan (u.x, u.y), asin (u.z)) / pi), 2.) - 0.5;\n  return 0.6 + 0.4 * step (0., sign (a.x) * sign (a.y));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstBall, dstObj, dstGrnd, sh, spec, att;\n  bool isLit;\n  dstBall = BallHit (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  isLit = false;\n  if (min (dstBall, dstObj) < dstFar) {\n    if (dstBall < dstObj) {\n      ro += dstBall * rd;\n      vn = vnBall;\n      col = (HsvToRgb (vec3 (0.8 * mod (float (idBall) / float (lenChain), 1.), 0.8, 1.))) *\n         BallChqr (idBall, vn);\n      sh = 1.;\n      spec = 0.4;\n    } else {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col = vec3 (0.4, 0.4, 0.5);\n      sh = BallHitSh (ro, ltDir, 20.);\n      spec = 0.2;\n    }\n    isLit = true;\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    isLit = true;\n    vn = vec3 (0., 1., 0.);\n    col = vec3 (0.3, 0.4, 0.3);\n    sh = (dstGrnd < dstFar) ? min (ObjSShadow (ro, ltDir), BallHitSh (ro, ltDir, 20.)) : 1.;\n    spec = 0.1;\n  } else col = vec3 (0.);\n  if (isLit) {\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       spec * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    att = 1. - smoothstep (0.07, 0.25, atan (length (ltPos.xz - ro.xz), ltPos.y) / pi);\n    col *= att;\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, stDat;\n  vec3 rd, ro, u, vd;\n  vec2 canvas, uv, rLook;\n  float tCur, az, el, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  stDat = Loadv4 (2 * nBall);\n  radObs = stDat.y;\n  gapObs = stDat.z;\n  rLook = vec2 (0.);\n  for (int k = 0; k < nChain; k ++) rLook += Loadv4 (2 * k * lenChain + 8).xy;\n  rLook /= float (nChain);\n  az = pi * (1. + 0.5 * sin (0.01 * pi * tCur));\n  el = pi * (0.2 + 0.1 * sin (0.017 * pi * tCur));\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, 0.03 * pi, 0.4 * pi);\n  ro = vec3 (rLook.x, 0., rLook.y)  +\n     40. * vec3 (cos (el) * sin (az), sin (el), cos (el) * cos (az));\n  vd = normalize (vec3 (rLook.x, 0., rLook.y) - ro);\n  u = - vd.y * vd;\n  vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (u.x, 1. + u.y, u.z) / sqrt (1. - vd.y * vd.y), vd);\n  zmFac = 4. / (1. + 0.5 * el);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 150.;\n  ltPos = vec3 (rLook, 100.).xzy;\n  ltDir = normalize (ltPos - ro);\n  ltDir.xz = Rot2D (ltDir.xz, 0.7 * pi);\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Jamming Polymers\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec4 QtMul (vec4 q1, vec4 q2);\nvec4 RotToQt (vec3 v, float a);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nChain = 8, lenChain = 32, nBall = nChain * lenChain;\nfloat todCur, radObs, gapObs;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\nconst float txRow = 128.;\n\nvoid Step (int mId, vec2 rLead, vec2 vCent, out vec4 p, out vec4 qt)\n{\n  vec2 rm, vm, rmN, rmN1, rmN2, vmN, dr, dr1, dr2, am, s;\n  float fOvlap, fBend, fLead, vDamp, fricN, rSep, c11, c22, c12, cd, c, vml, dt;\n  int inChain, ic, k1, k2;\n  fOvlap = 500.;\n  fBend = 10.;\n  fricN = 1.;\n  vDamp = 0.1;\n  fLead = 0.5;\n  dt = 0.02;\n  p = Loadv4 (2 * mId);\n  rm = p.xy;\n  vm = p.zw;\n  qt = Loadv4 (2 * mId + 1);\n  inChain =  mId / lenChain;\n  am = vec2 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    if (n != mId) {\n      p = Loadv4 (2 * n);\n      rmN = p.xy;\n      vmN = p.zw;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || (n == mId + 1 || n == mId - 1) && n / lenChain == inChain) {\n        s = dr / rSep;\n        am += (fOvlap * (1. - rSep) - fricN * dot (vm - vmN, s)) * s;\n      }\n    }\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = 0; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (2 * k1).xy;\n    rmN2 = Loadv4 (2 * k2).xy;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - HexToPix (PixToHex (rm / gapObs) * gapObs);\n  rSep = length (dr);\n  if (rSep < radObs + 0.5) {\n    s = dr / rSep;\n    am += (fOvlap * (radObs + 0.5 - rSep) - fricN * dot (vm, s)) * s;\n  }\n  if (ic == 0) am += fLead * (rLead - rm) + vDamp * (vCent - vm);\n  vm += dt * am;\n  rm += dt * vm;\n  vml = length (vm);\n  if (vml > 1e-6) qt = normalize (QtMul (qt,\n     RotToQt (normalize (vec3 (- vm.y, 0., vm.x)), vml * dt / 0.5)));\n  p = vec4 (rm, vm);\n}\n\nvoid Init (int mId, out vec4 p, out vec4 qt)\n{\n  vec3 e;\n  vec2 rm, vm;\n  float a, idCh;\n  idCh = float (mId / lenChain);\n  rm.y = 1.5 * gapObs * (idCh - float (nChain / 2) + 0.5);\n  rm.x = 1. * (float (mId) - (idCh + 0.5) * float (lenChain));\n  vm = vec2 (Hashff (todCur), Hashff (todCur + 1.));\n  p = vec4 (rm, vm);\n  a = mod (todCur, 1.) + float (mId) / float (nBall);\n  e = normalize (vec3 (Hashff (mod (a, 1.)),\n     Hashff (mod (a + 0.2, 1.)), Hashff (mod (a + 0.4, 1.))));\n  qt = EulToQt (vec3 (atan (e.x, e.y), acos (e.z),\n     2. * pi * Hashff (mod (a + 0.6, 1.))));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qt;\n  vec2 iFrag, rLead, rCent, vCent;\n  float nStep;\n  int mId, pxId;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 1) discard;\n  todCur = iDate.w;\n  mId = (pxId < 2 * nBall) ? mId = pxId / 2 : -1;\n  if (iFrame <= 5) {\n    nStep = 0.;\n    radObs = 1.;\n    gapObs = 4.;\n  } else {\n    stDat = Loadv4 (2 * nBall);\n    nStep = stDat.x;\n    radObs = stDat.y;\n    gapObs = stDat.z;\n    ++ nStep;\n    vCent = vec2 (-1., 0.);\n    rCent = 0.02 * nStep * vCent;\n    rLead = rCent - 20. * vec2 (cos (0.0002 * nStep), sin (0.0002 * nStep));\n  }\n  if (mId >= 0) {\n    if (iFrame <= 5) Init (mId, p, qt);\n    else Step (mId, rLead, vCent, p, qt);\n    stDat = (pxId == 2 * mId) ? p : qt;\n  } else if (pxId == 2 * nBall) stDat = vec4 (nStep, radObs, gapObs, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nvec4 RotToQt (vec3 v, float a)\n{\n  vec4 q;\n  float c, s;\n  const float tol = 1e-6;\n  c = cos (a);  s = sin (a);\n  q.w = 0.5 * sqrt (max (1. + (1. - c) * dot (v, v) + 3. * c, 0.));\n  if (q.w > tol) q.xyz = s * v.xyz / (2. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + (1. - c) * v.x * v.x + c), 0.));\n    if (q.x > tol) q.yz = ((1. - c) * v.xz * v.yx + s * v.zy) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + (1. - c) * v.y * v.y + c), 0.));\n      q.z = (q.y > tol) ? ((1. - c) * v.y * v.z + s * v.x) / q.y : 1.;\n    }\n  }\n  return q;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Jamming Polymers\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec4 QtMul (vec4 q1, vec4 q2);\nvec4 RotToQt (vec3 v, float a);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nChain = 8, lenChain = 32, nBall = nChain * lenChain;\nfloat todCur, radObs, gapObs;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\nconst float txRow = 128.;\n\nvoid Step (int mId, vec2 rLead, vec2 vCent, out vec4 p, out vec4 qt)\n{\n  vec2 rm, vm, rmN, rmN1, rmN2, vmN, dr, dr1, dr2, am, s;\n  float fOvlap, fBend, fLead, vDamp, fricN, rSep, c11, c22, c12, cd, c, vml, dt;\n  int inChain, ic, k1, k2;\n  fOvlap = 500.;\n  fBend = 10.;\n  fricN = 1.;\n  vDamp = 0.1;\n  fLead = 0.5;\n  dt = 0.02;\n  p = Loadv4 (2 * mId);\n  rm = p.xy;\n  vm = p.zw;\n  qt = Loadv4 (2 * mId + 1);\n  inChain =  mId / lenChain;\n  am = vec2 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    if (n != mId) {\n      p = Loadv4 (2 * n);\n      rmN = p.xy;\n      vmN = p.zw;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || (n == mId + 1 || n == mId - 1) && n / lenChain == inChain) {\n        s = dr / rSep;\n        am += (fOvlap * (1. - rSep) - fricN * dot (vm - vmN, s)) * s;\n      }\n    }\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = 0; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (2 * k1).xy;\n    rmN2 = Loadv4 (2 * k2).xy;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - HexToPix (PixToHex (rm / gapObs) * gapObs);\n  rSep = length (dr);\n  if (rSep < radObs + 0.5) {\n    s = dr / rSep;\n    am += (fOvlap * (radObs + 0.5 - rSep) - fricN * dot (vm, s)) * s;\n  }\n  if (ic == 0) am += fLead * (rLead - rm) + vDamp * (vCent - vm);\n  vm += dt * am;\n  rm += dt * vm;\n  vml = length (vm);\n  if (vml > 1e-6) qt = normalize (QtMul (qt,\n     RotToQt (normalize (vec3 (- vm.y, 0., vm.x)), vml * dt / 0.5)));\n  p = vec4 (rm, vm);\n}\n\nvoid Init (int mId, out vec4 p, out vec4 qt)\n{\n  vec3 e;\n  vec2 rm, vm;\n  float a, idCh;\n  idCh = float (mId / lenChain);\n  rm.y = 1.5 * gapObs * (idCh - float (nChain / 2) + 0.5);\n  rm.x = 1. * (float (mId) - (idCh + 0.5) * float (lenChain));\n  vm = vec2 (Hashff (todCur), Hashff (todCur + 1.));\n  p = vec4 (rm, vm);\n  a = mod (todCur, 1.) + float (mId) / float (nBall);\n  e = normalize (vec3 (Hashff (mod (a, 1.)),\n     Hashff (mod (a + 0.2, 1.)), Hashff (mod (a + 0.4, 1.))));\n  qt = EulToQt (vec3 (atan (e.x, e.y), acos (e.z),\n     2. * pi * Hashff (mod (a + 0.6, 1.))));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qt;\n  vec2 iFrag, rLead, rCent, vCent;\n  float nStep;\n  int mId, pxId;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 1) discard;\n  todCur = iDate.w;\n  mId = (pxId < 2 * nBall) ? mId = pxId / 2 : -1;\n  if (iFrame <= 5) {\n    nStep = 0.;\n    radObs = 1.;\n    gapObs = 4.;\n  } else {\n    stDat = Loadv4 (2 * nBall);\n    nStep = stDat.x;\n    radObs = stDat.y;\n    gapObs = stDat.z;\n    ++ nStep;\n    vCent = vec2 (-1., 0.);\n    rCent = 0.02 * nStep * vCent;\n    rLead = rCent - 20. * vec2 (cos (0.0002 * nStep), sin (0.0002 * nStep));\n  }\n  if (mId >= 0) {\n    if (iFrame <= 5) Init (mId, p, qt);\n    else Step (mId, rLead, vCent, p, qt);\n    stDat = (pxId == 2 * mId) ? p : qt;\n  } else if (pxId == 2 * nBall) stDat = vec4 (nStep, radObs, gapObs, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nvec4 RotToQt (vec3 v, float a)\n{\n  vec4 q;\n  float c, s;\n  const float tol = 1e-6;\n  c = cos (a);  s = sin (a);\n  q.w = 0.5 * sqrt (max (1. + (1. - c) * dot (v, v) + 3. * c, 0.));\n  if (q.w > tol) q.xyz = s * v.xyz / (2. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + (1. - c) * v.x * v.x + c), 0.));\n    if (q.x > tol) q.yz = ((1. - c) * v.xz * v.yx + s * v.zy) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + (1. - c) * v.y * v.y + c), 0.));\n      q.z = (q.y > tol) ? ((1. - c) * v.y * v.z + s * v.x) / q.y : 1.;\n    }\n  }\n  return q;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}