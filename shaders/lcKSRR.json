{
    "Shader": {
        "info": {
            "date": "1714733699",
            "description": "Uses Morgan McGuire's perlin noise code",
            "flags": 0,
            "hasliked": 0,
            "id": "lcKSRR",
            "likes": 5,
            "name": "Pixelated Fire",
            "published": 3,
            "tags": [
                "fire",
                "pixel",
                "pixelated"
            ],
            "usePreview": 0,
            "username": "SonoPG",
            "viewed": 154
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926536\n\n#define NUM_NOISE_OCTAVES 5\n#define NOISE_FREQ 4.0\n#define PIXEL_QUALITY 40.0\n\n// Noise functions made by Morgan McGuire @morgan3d\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n    \n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n    \n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat pow4(float x) { return x*x*x*x; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Pixelate\n    uv = floor(uv * PIXEL_QUALITY) / PIXEL_QUALITY;\n    \n    // Get perlin noise\n    float nval = fbm(vec2(uv.x * NOISE_FREQ, iTime * 1.2));\n    nval *= -16.0 * pow4(uv.x - 0.49999) + 1.0; // Reduce noise on the sides\n\n    if (uv.y < nval)\n        fragColor = vec4(1.0, (1.0 - (nval - uv.y)) * 0.75, 0.0, 1.0);\n    else\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}