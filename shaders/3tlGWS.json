{
    "Shader": {
        "info": {
            "date": "1557475297",
            "description": "Another horizontal glitch shader that use fbm + chromab.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tlGWS",
            "likes": 8,
            "name": "[sn002] Horizontal glitch 2",
            "published": 3,
            "tags": [
                "glitch"
            ],
            "usePreview": 1,
            "username": "maeln",
            "viewed": 859
        },
        "renderpass": [
            {
                "code": "#define ITER_DIST 16\n#define saturate(x) (clamp((x), 0.0, 1.0))\n\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 st, float amp) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = amp;\n    //\n    // Loop of octaves\n    for (int i = 0; i < 4; i++) {\n        value += amplitude * noise(st);\n        st *= 4.3;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n// RGB ramp stolen from Ferris\nvec3 aberrationColor(float f)\n{\n\tf = f * 3.0 - 1.5;\n\treturn saturate(vec3(-f, 1.0 - abs(f), f));\n}\n\nvec2 distort(vec2 uv, float i) {\n    float dx = (0.1-fbm(vec2(uv.y, iTime/4.0), i))/2.0;\n    return vec2(uv.x + dx, uv.y);\n}\n\nvec3 standard_excess_like_aberation(vec2 uv) {\n    const float step_size = 1.0 / (float(ITER_DIST) - 1.0);\n    float t = step_size; //* hash2(uv + sin(iTime)); // We pseudo randomize the step to have some dithering pattern.\n\n    vec3 sum_color = vec3(0.0);\n    vec3 sum_weight = vec3(0.0);\n    for (int i = 0; i < ITER_DIST; ++i) {\n\t    vec3 weight = aberrationColor(t);\n        sum_weight += weight;\n        sum_color += weight \n            * texture(iChannel0, \n                      distort(uv, \n                              0.1+(float(i)/float(ITER_DIST))/32.0\n                             )).rgb;\n        t += step_size;\n    }\n\n    sum_color /= sum_weight;\n    return sum_color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = standard_excess_like_aberation(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}