{
    "Shader": {
        "info": {
            "date": "1434651511",
            "description": "Based on coyote's SUPER short Raymarch 199 chars: https://www.shadertoy.com/view/llfSzH\nThanks to coyote, FabriceNeyert2 and Nrx we finally got a raymarcher in less than ONE TWEET!",
            "flags": 0,
            "hasliked": 0,
            "id": "XtXXR4",
            "likes": 13,
            "name": "Raymarch 127 chars",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "2tc",
                "onetweet"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 1157
        },
        "renderpass": [
            {
                "code": "// 127 chars - replaced iDate with iTime and 'while' with 'for' - added 1 char!\nvoid mainImage(out vec4 o, vec2 u) {\no-=o;\nfor ( ++o.y; o.a++<80.;)\n    o += vec4(1, u/iResolution.x, 0) * (length( sin(o.xyz+iTime) )-.3);\no/=50.; }                       /*\n\n// 107 chars - replaced n in the loop with o.a\n\n#define mainImage(o,u)  \\\nwhile ( o.a++<80. )     \\\n    o += vec4(1, u/iResolution.x, 0) * (length( sin(o.xyz+iDate.wxz) )-.3);  \\\no/=50.\n\n\n// 111 chars - Using #define trick and a few other optimizations:\n\n#define mainImage(o,u)  \\\nfor(int n=0; n++<80;)   \\\n    o += vec4(1, u/iResolution.x,1) * (length(sin(o.xyz+iDate.wxw) )-.3); o/=50.\n        \n\n// 125 chars - Shane made this shader smaller and better. Thank you.\n// Also a big thanks to coyote for his loop optimization.\n\n\n// Initialize the shader (o is output pixel color vector (r,g,b,a) and u is xy input):\nvoid mainImage(out vec4 o,vec2 u)  \n{\n// Had to set o to zero for iOS browsers. Without it the shader is 125 chars. :(\n    o *= 0.;\n    \n// Main ray marching loop (ray will take 80 steps):\n    for (int n=0; n<80; n++)\n        \n// Give o red to yellow gradient, and o is the vector for raymarching:\n        o += vec4(1, u/iResolution.x, 1)*\n        \n// Infinite spheres grid with radius .3. Animate the camera along the xz-axis (iDate.wxw):\n        (length(cos(o.xyz + iDate.wxw)) - .3);\n    \n// Divide o by 50 for output color.\n    o /= 50.;\n}\n\n\n// 130 chars - Here's the code without comments:\n\nvoid mainImage(out vec4 o,vec2 u)  \n{\n    o-=o;\n    for (int n=0; n++<80;)\n        o += vec4(1, u/iResolution.x, 1) * (length(cos(o.xyz + iDate.wxw)) - .3);\n    o /= 50.;\n}\n\n\n\n//Once again, the brilliant Fabrice, shrunk the un-shrinkable!\n//By replacing the fract with a sin and moving the .1 multiplier this raymarcher\n//is now an ASTOUNDING 132 CHARS!!!\n\nvoid mainImage (out vec4 f, vec2 u)\n{\n    f = iDate.yyww*.1;\n    for (int n=0; n<99; n++)\n\t    f += .02*vec4(u/iResolution.y,1,1) * (length(cos(30.*f))-.2);\n}\n\n\n\n// Here's a (135 chars) version combining FabriceNeyret2 and Nrx optimizations\n// This version eliminates the conditional if statement!!\n\nvoid mainImage (out vec4 f, vec2 u)\n{\n    f = iDate.yyww;\n    for (int n=0; n<80; n++)\n\t    f += .4*vec4(u/iResolution.y-.5,1,1) * (length (fract (f)-.5)-.1);\n    f *= .1;\n}\n\n\n// Here's a 150 chars version by Nrx\n\nvoid mainImage (out vec4 f, vec2 u)\n{\n    f = iDate.yyww;\n    for (int i = 90; i > 0; --i)\n        if ((f.a = length (fract (f.rgb) - .5)) > .2)\n            f += .2 * vec4 (u / iResolution.y - .5, 1, 0) * f.a;\n    f *= .1;\n}\n\n\n/*\n// This is my original version at 157 chars\n\nvoid mainImage (out vec4 f, vec2 u)\n{\n    vec3 r = iDate.yyw;\n    for (float i = 9. ; i > 0. ; i -= .1)\n        if ((f.a = length (fract (r) - .5)) > .2)\n\t        f.rgb = i / (r += .2 * vec3 (u / iResolution.y - .5, 1) * f.a);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}