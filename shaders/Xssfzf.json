{
    "Shader": {
        "info": {
            "date": "1497308403",
            "description": "There are tons of examples of this effect, but I wanted to write one from scratch.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xssfzf",
            "likes": 2,
            "name": "Crappy edge detection",
            "published": 3,
            "tags": [
                "edgedetection"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 689
        },
        "renderpass": [
            {
                "code": "#define stepH 0.1\n#define stepV 0.1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // current location & color\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 curColor = texture(iChannel0, uv);\n    \n  \t// get samples around pixel\n\tvec4 colors[8];\n    float stepX = stepH/iResolution.x;\n    float stepY = stepV/iResolution.y;\n\tcolors[0] = texture(iChannel0, uv + vec2(-stepX, stepY));\n\tcolors[1] = texture(iChannel0, uv + vec2(0, stepY));\n\tcolors[2] = texture(iChannel0, uv + vec2(stepX, stepY));\n\tcolors[3] = texture(iChannel0, uv + vec2(-stepX, 0));\n\tcolors[4] = texture(iChannel0, uv + vec2(stepX, 0));\n\tcolors[5] = texture(iChannel0, uv + vec2(-stepX, -stepY));\n\tcolors[6] = texture(iChannel0, uv + vec2(0, -stepY));\n\tcolors[7] = texture(iChannel0, uv + vec2(stepX, -stepY));\n    \n\t// sum color distance from neighbors \n    float colorDistance = 0.;\n\tfor (int i = 0; i < 8; i++) {\n\t\tcolorDistance += distance(curColor, colors[i]);\n\t}\n    \n    // tweak lines stength\n    colorDistance *= 6.0;\n    colorDistance = smoothstep(0.02, 0.98, colorDistance);\n    \n    // draw \n\tfragColor = vec4(vec3(colorDistance), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}