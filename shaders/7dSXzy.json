{
    "Shader": {
        "info": {
            "date": "1620478247",
            "description": "experimenting with ways of generating noise",
            "flags": 32,
            "hasliked": 0,
            "id": "7dSXzy",
            "likes": 0,
            "name": "strange noise",
            "published": 3,
            "tags": [
                "noise",
                "rng"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 V, in vec2 i){\n    V = vec4(vec3(texelFetch(iChannel0, ivec2(i), 0).x/M), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define A iChannel0\n\n#define NONE  vec3(0.0)\n#define LEFT  vec3(1.0, -1.0, 0.0)\n#define UP    vec3(2.0, 0.0, 1.0)\n#define RIGHT vec3(3.0, 1.0, 0.0)\n#define BELOW vec3(4.0, 0.0, -1.0)\n\n#define CELL_RES (iResolution.xy/vec2(CELL_LAYOUT))\n\n#define XMAX float(CELL_LAYOUT.x-1)\n\nbool even(float y) {\n    return mod(y, 2.0) == 0.0;\n}\n\nvec2 get(vec2 I, vec3 dir) {\n    return texelFetch(A, ivec2((I+dir.yz)*CELL_RES + CELL_RES/2.0), 0).xy;\n}\n\nvoid mainImage(out vec4 V, in vec2 i){\n\n\n    vec2 seq;\n    vec3 y = NONE;\n    vec2 I = floor(i/CELL_RES);\n    \n    if (I.x == 0.0 && I.y == 0.0) {\n        // set x0\n        seq = vec2(S, RIGHT.x);\n        y = RIGHT;\n        \n    } else if (I.x == 0.0 && even(I.y)) {\n        // fetch below\n        seq = get(I, BELOW);\n        y = seq.y == UP.x ? RIGHT : NONE;\n        \n    } else if (I.x == 0.0 && !even(I.y)) {\n        // fetch right\n        seq = get(I, RIGHT);\n        y = seq.y == LEFT.x ? UP : NONE;\n        \n    } else if (I.x == XMAX && even(I.y)) {\n        // fetch left\n        seq = get(I, LEFT);\n        y = seq.y == RIGHT.x ? UP : NONE;\n         \n    } else if (I.x == XMAX && !even(I.y)) {\n        // fetch below\n        seq = get(I, BELOW);\n        y = seq.y == UP.x ? LEFT : NONE;\n        \n    } else if (even(I.y)) {\n        // fetch left\n        seq = get(I, LEFT);\n        y = seq.y == RIGHT.x ? RIGHT : NONE;\n        \n    } else {\n        // fetch right\n        seq = get(I, RIGHT);\n        y = seq.y == LEFT.x ? LEFT : NONE;\n    }\n    \n    if (y != NONE) {\n        V = vec4(prng(seq.x), y);\n    } else {\n        V = vec4(0.5);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// nice patterns\n// woven mat: P=239, Q=263, S=17, blumblumshug method\n// cross section worms: P=239, Q=263, S=20, blumblumshug method\n\n#define P (239.0)\n#define Q (263.0)\n#define S 21.0\n#define M (P*Q)\n\n#define CELL_LAYOUT ivec2(250, 120) \n\nfloat prng(float x) {\n    // blum blum shub\n    return mod(0.31*pow(x, 2.0), M);\n    \n    // linear congruential generator\n    //return mod(15.0*x + 17.0, M);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}