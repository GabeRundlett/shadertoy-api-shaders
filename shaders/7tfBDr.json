{
    "Shader": {
        "info": {
            "date": "1650724059",
            "description": "Practice II",
            "flags": 0,
            "hasliked": 0,
            "id": "7tfBDr",
            "likes": 0,
            "name": "Beacon in space",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "libreliu",
            "viewed": 119
        },
        "renderpass": [
            {
                "code": "#define RAYMARCH_MAX_STEPS 100\n#define RAYMARCH_MAX_DIST 100.5f\n#define RAYMARCH_SURF_DIST 1e-2\n#define GRAD_APPROX_EPS 1e-3\n#define PI 3.14159265359\n\nint grid_max = 10;\n\n// -- Perlin noise related stuff --\n// Copied from https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat fractualNoise(vec2 uv) {\n    float f;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    return f;\n}\n\n// --------------------------------\n\n\nfloat sphereSDF(vec3 p, vec3 c, float r) {\n    return sqrt((p.x - c.x) * (p.x - c.x) + (p.y - c.y) * (p.y - c.y) + (p.z - c.z) * (p.z - c.z)) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.yz)-t.x,p.x);\n  return length(q)-t.y;\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat groundSDF(vec3 p) {\n    return abs(p.y+5.);\n    //return length(p.xy) + 0.5;\n}\n\nvec3 groundDiffuse(vec3 p) {\n    //return vec3(p.z - floor(p.z));\n    return vec3(sin(10.*p.z));\n}\n\nfloat sceneSDFStart(vec3 p) {\n    //return sdTorus(p, vec2(1.5, 0.5));\n    return sdOctahedron(p, 1.5);\n}\n\nfloat sceneSDFEnd(vec3 p) {\n    return sphereSDF(p, vec3(0.0, 0.0, 0.0), 1.5);\n}\n\nfloat sceneSDF(vec3 p) {\n    //return min(sphereSDF(p, vec3(0.0, 0.0, 0.0), 1.5), groundSDF(p));\n    //return sdTorus(p, vec2(1.5, 0.5));\n    float weight = sin(iTime) * 0.5 + 0.8;\n    \n    float blend = sceneSDFStart(p) * (weight - 0.2) + (0.8 - weight) * sceneSDFEnd(p);\n    \n    return min(blend, groundSDF(p));\n}\n\nvoid sceneMaterial(vec3 p, out vec3 diffuseColor) {\n    if (groundSDF(p) <= RAYMARCH_SURF_DIST) {\n        // ground color\n        diffuseColor = groundDiffuse(p);\n    }\n}\n\nfloat rayMarch(vec3 rayO, vec3 rayD, out float dist) {\n    vec3 curIsect = rayO;\n    rayD = normalize(rayD);\n    float t = 0.0f;\n    for (int i = 0; i < RAYMARCH_MAX_STEPS; i++) {\n        dist = sceneSDF(curIsect);\n        if (dist < RAYMARCH_SURF_DIST || dist > RAYMARCH_MAX_DIST) {\n            break;\n        }\n        \n        t += dist;\n        curIsect = rayO + t * rayD;\n    }\n    return t;\n}\n\n// grad f(x,y,z) = (df/dx, df/dy, df/dz)\n// normal at (x_0, y_0, z_0) is normalized grad SDF(x,y,z)\n//     evaluated at (x_0, y_0, z_0)\nvec3 sceneNormal(vec3 p) {\n    float pSDF = sceneSDF(p);\n    vec2 eps = vec2(1e-3, 0);\n    vec3 grad = pSDF - vec3(\n        sceneSDF(p - eps.xyy),    // f(x_0 - eps.x, y_0, z_0)\n        sceneSDF(p - eps.yxy),    // f(x_0, y_0 - eps.x, z_0)\n        sceneSDF(p - eps.yyx)     // f(x_0, y_0, z_0 - eps.x)\n    );\n    \n    // normalize does the rest\n    return normalize(grad);\n}\n\nvec3 shadeScene(vec3 isect) {\n    // contrib from mainLight - point light\n    vec3 lightPos = vec3(5.0, 5.0, 5.0);\n    //vec3 lightPos = vec3(5.0f * cos(2.0 * iTime), 0.0, 5.0 * sin(2.0 *iTime));\n    \n    // test if the light can reach our ball\n    vec3 light2Isect = normalize(isect - lightPos);\n    float rayDist, lightT = rayMarch(lightPos, light2Isect, rayDist);\n    float visibility = 0.0f;\n    //float visibility = 1.0f;\n    if (length(lightPos + lightT * light2Isect - isect) < 10. * RAYMARCH_SURF_DIST) {\n        // shall contribute light\n        visibility = 1.0f;\n    }\n    \n    vec3 lightColor = vec3(0.5, 0.5, 0.5);\n    vec3 lightL = lightColor * 5.5f;\n    \n    vec3 diffuseColor = vec3(1.0f);\n    sceneMaterial(isect, diffuseColor);\n    \n    vec3 isectN = sceneNormal(isect);\n    vec3 lightContrib = \\\n        visibility * diffuseColor * clamp(dot(isectN, normalize(lightPos - isect)), 0., 1.) * lightL / length(isect - lightPos);\n    vec3 ambientContrib = diffuseColor * 0.1;\n    return lightContrib + ambientContrib;\n}\n\nvec2 toSphericalCoord(vec3 v) {\n  /* -PI ~ PI */\n  float theta = atan(v.y, v.x);\n\n  /* -PI/2 ~ PI/2 */\n  float phi = asin(clamp(v.z, -1.f, 1.f));\n  return vec2(theta, phi);\n}\n\n// TODO\nvec3 shadeSkybox(vec3 rayD) {\n    vec3 lineColor = vec3(abs(sin(iTime)), 0., 0.);\n    vec3 outColor = vec3(0.0f, 0.0f, 0.0f);\n\n    vec2 sphCoord = toSphericalCoord(rayD);\n    vec2 coordInner = sphCoord / (5. * PI / 180.);\n    coordInner.x = coordInner.x - floor(coordInner.x);\n    coordInner.y = coordInner.y - floor(coordInner.y);\n    \n    if (length(coordInner) < 0.1) {\n        outColor = lineColor;\n    } else {\n        //outColor = vec3(fractualNoise((sphCoord) * 4. + (iTime)));\n    }\n    \n    return outColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    // Compute camera properties\n    vec3 camPos = vec3(10.0, 0.0, 0.0);\n    vec3 camLookat = vec3(-1.0, -3.0 + 6.0 * mouseUV.y, -3.0 + 6.0 *mouseUV.x);\n    vec3 camUp = vec3(0.0, 0.0, 1.0);\n    vec3 camZ = normalize(camLookat - camPos);            // forward\n    vec3 camX = normalize(cross(camZ, normalize(camUp)));  // right\n    vec3 camY = cross(camX, camZ);                        // up\n    float camVertFOV = 120.0f * (PI / 180.0f) / 2.;       // 120 degree\n    vec3 camScrC = camPos + camZ;\n    vec3 camScrP = camScrC + camY * (uv.x -0.5) * tan(camVertFOV) + camX * (uv.y-0.5) * tan(camVertFOV) / aspectRatio;\n    \n    vec3 rayD = normalize(camScrP - camPos);\n    vec3 rayO = camPos;\n    float distClosest, tClosest = rayMarch(rayO, rayD, distClosest);\n    \n    \n    //vec3 outColor = vec3(distClosest );\n    //vec3 outColor = dist > 1. ? vec3(0.0) : vec3(1.0);\n    \n    vec3 outColor;\n    if (distClosest > 10.0f * RAYMARCH_SURF_DIST) {\n        outColor = shadeSkybox(rayD);\n    } else {\n        outColor = shadeScene(rayO + tClosest * rayD);\n    }\n\n    // Output to screen\n    fragColor = vec4(outColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}