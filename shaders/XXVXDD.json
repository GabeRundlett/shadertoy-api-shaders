{
    "Shader": {
        "info": {
            "date": "1719973024",
            "description": "Shows normal color blending (left) vs additive color blending (right). Additive color blending is often used to simulate bloom.\n\nCredit to AstalNeker for the original code: https://www.shadertoy.com/view/M3l3RH",
            "flags": 0,
            "hasliked": 0,
            "id": "XXVXDD",
            "likes": 1,
            "name": "Additive color blending",
            "published": 3,
            "tags": [
                "blending",
                "colorblending"
            ],
            "usePreview": 0,
            "username": "SneakySnail600",
            "viewed": 98
        },
        "renderpass": [
            {
                "code": "// Credit to AstalNeker for the original code: https://www.shadertoy.com/view/M3l3RH\n\n/*\n * \"Additive color blending\" by Josh O'Hagan aka SneakySnail600 - 2024\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: joshohagan17@outlook.co.nz\n */\n \n// Additive color blending is often used to simulate bloom: https://github.com/SaschaWillems/Vulkan/blob/master/examples/bloom/bloom.cpp\n\nvec4 blendNormal(vec4 src,vec4 dst)\n{\n    return src * src.a + dst * (1.0 - src.a);\n}\n\nvec4 blendAdditive(vec4 src, vec4 dst)\n{\n    vec3 colorBlend = src.rgb + dst.rgb;\n    float alhpaBlend = src.a + dst.a;\n    return vec4(colorBlend, alhpaBlend);\n}\n\nvec4 triangle(vec4 srcColor,vec2 uv,vec2 posA,vec2 posB,vec2 posC,vec4 dstColor, int blendType)\n{\n    // Compute vectors\n    vec2 v0 = posC - posA;\n    vec2 v1 = posB - posA;\n    vec2 v2 = uv - posA;\n\n    // Compute dot products\n    float dot00 = dot(v0, v0);\n    float dot01 = dot(v0, v1);\n    float dot02 = dot(v0, v2);\n    float dot11 = dot(v1, v1);\n    float dot12 = dot(v1, v2);\n\n    // Compute barycentric coordinates\n    float invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);\n    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n    // Check if point is in triangle\n    if((u >= 0.0) && (v >= 0.0) && (u + v <= 1.0)) {\n        if (blendType == 0)\n        {\n            return blendNormal(srcColor, dstColor);\n        }\n        else if (blendType == 1)\n        {\n            return blendAdditive(srcColor,dstColor);\n        }\n    }\n    \n    return dstColor;\n}\n\nvec4 drawTriangles(float xOffset, vec4 dstColor, vec2 uv, int blendType)\n{    \n    // draw red triangle\n    dstColor = triangle(vec4(1.0,0.0,0.0,1.0),uv,vec2(0.07 + xOffset,0.2),vec2(0.23 + xOffset,0.8),vec2(0.1 + xOffset,0.6), dstColor, blendType);\n    \n    // draw green triangle with alpha 0.4\n    dstColor = triangle(vec4(0.0,1.0,0.0,0.4),uv,vec2(0.13 + xOffset,0.2),vec2(0.2 + xOffset,0.8),vec2(0.1 + xOffset,0.6), dstColor, blendType);\n    \n    // draw blue triangle with alpha 0.8\n    dstColor = triangle(vec4(0.0,0.0,1.0,0.8),uv,vec2(0.1 + xOffset,0.1),vec2(0.2 + xOffset,0.5),vec2(0.1 + xOffset,0.6), dstColor, blendType);\n    \n    return dstColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 dstColor = vec4(0.0,0.0,0.0,0.0); // default screen color\n    \n    // Normal blending - Left\n    dstColor = drawTriangles(0.15, dstColor, uv, 0);\n    \n    // Additive blending - Right\n    dstColor = drawTriangles(0.55, dstColor, uv, 1);\n    \n    fragColor = vec4(dstColor.xyz,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}