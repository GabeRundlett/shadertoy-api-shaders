{
    "Shader": {
        "info": {
            "date": "1561599309",
            "description": "modification of https://www.shadertoy.com/view/4lffWs\nbut with reflections",
            "flags": 34,
            "hasliked": 0,
            "id": "wl2GWt",
            "likes": 4,
            "name": "shiny abstract grid",
            "published": 3,
            "tags": [
                "reflection",
                "grid",
                "feedback"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 816
        },
        "renderpass": [
            {
                "code": "#define VIEW_RAW_BUFFER 0\n\nvec3 color1 = vec3(0.7, 0.6, 0.4);\nvec3 color2 = vec3(0.1, 0.2, 0.4);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n#if VIEW_RAW_BUFFER\n    fragColor = texture(iChannel0, uv);\n#else\n    float val = step(0.1, length(texture(iChannel0, uv).rg));\n    color1 = texture(iChannel1, uv).rgb;\n    color2 = texture(iChannel1, vec2(1.0 - uv.x, uv.y)).rgb;\n\tfragColor = vec4(mix(color1, color2, val), 1.0);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 to_uv(in vec2 in_pixels) {\n    return in_pixels / iResolution.xy;\n\t// return 0.1 + mod(vec2(0.8) + in_pixels / iResolution.xy, vec2(0.9));\n}\n\nvec2 fetch_dir(in vec2 in_pixels) {\n    vec2 dir = texture(iChannel0, to_uv(in_pixels)).rg;\n    dir = step(vec2(0.5), dir) * vec2(step(dir.y, dir.x), step(dir.x, dir.y));\n    return dir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    const float refresh_period = 15.0;\n    float t = iTime - mod(iTime, refresh_period);\n    mat2 rotator = mat2(cos(t), sin(t),\n                          -sin(t), cos(t));\n    vec2 dir = step(vec2(0.95), texture(iChannel1, to_uv(rotator * p)).rg);\n    dir = vec2(step(dir.y, dir.x), step(dir.x, dir.y)) * dir;\n \n    if (mod(iTime, refresh_period) < 0.1) {\n      fragColor = vec4(dir, 0.0, 1.0);\n        return;\n    }\n   \n    if (dot(dir, dir) < 0.5) {\n\t    dir = step(vec2(0.5), texture(iChannel0, to_uv(p)).rg);\n    }\n     \n    if (dot(dir, dir) < 0.01) {\n    vec2 d = texture(iChannel1, to_uv(p)).ba;\n    vec2 dir1 = vec2(step(d.x, d.y), step(d.y, d.x));\n    vec2 dir2 = dir1.yx;\n        \n        \n    float val1 = step(0.5, \n                      abs(dot(dir1, fetch_dir(p + dir1))) +\n                      abs(dot(dir1, fetch_dir(p - dir1))));\n    \n    float val2 = step(0.5, \n                      abs(dot(dir2, fetch_dir(p + dir2))) +\n                      abs(dot(dir2, fetch_dir(p - dir2))));\n    dir = mix(dir, dir1, val1);\n    dir = mix(dir, dir2, val2);\n    }\n    \n    dir = step(vec2(0.5), dir) * vec2(step(dir.y, dir.x), step(dir.x, dir.y));\n \n    fragColor = vec4(dir,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}