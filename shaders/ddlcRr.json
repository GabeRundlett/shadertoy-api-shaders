{
    "Shader": {
        "info": {
            "date": "1686534238",
            "description": "The output of line segment SDFs get adjusted and added up. The result is fed into a palette function that determines the color.",
            "flags": 0,
            "hasliked": 0,
            "id": "ddlcRr",
            "likes": 5,
            "name": "Eye of the Shader",
            "published": 3,
            "tags": [
                "2d",
                "eye",
                "spiral",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "isaacchurchill",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n\n///////////////////////////////////////////////////\n\n// Line segment SDF by iq\n// https://iquilezles.org/articles/distfunctions2d/\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n///////////////////////////////////////////////////\n\nmat2 rotmat(float t)\n{\n    float c = cos(t);\n    float s = sin(t);\n    return mat2(c, s, -s, c);\n}\n\nvec3 palette(float x)\n{\n/*    return vec3(1.0 - 1.0 / exp(x * 1.5),\n                1.0 - 1.0 / exp(x * 0.7),\n                1.0 - 1.0 / exp(x * 0.3));*/\n      return 0.5 + 0.5 * sin(x - 2.0 + vec3(0,2,4));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n    p /= 1.3;\n    float plen = length(p);\n    float x = 1.0 / (1.2 + plen); // Slight color gradient\n    x += exp(abs(plen - mod(iTime, 2.0)) * -50.0 + 1.5); // Expanding rings\n    for (float t = 0.0; t < PI * 2.0; t += PI / 8.0) {\n        vec2 a = vec2(-0.5, 0.3);\n        vec2 b = vec2(0.5, 0.2);\n        vec2 offs = vec2(0.2, 0.0);\n        mat2 m = rotmat(iTime);\n        a = (a + offs) * m - offs;\n        b = (b + offs) * m - offs;\n        x += exp(sdSegment(p * rotmat(t), a, b) * -50.0 + 1.0); // Accumulate adjusted line SDF\n    }\n    vec3 col = palette(x) / (1.0 + pow(plen, 2.5)); // Palette color divided by gradient factor\n    col *= smoothstep(0.03, 0.06, plen); // Black dot\n    col += palette(atan(p.y,p.x) + iTime * 4.0) * smoothstep(-0.0075, 0.0, 0.0025-abs(plen - 0.045)); // Rainbow center\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}