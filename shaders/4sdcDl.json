{
    "Shader": {
        "info": {
            "date": "1520598635",
            "description": "Cutting helical slices from concentric spheres (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "4sdcDl",
            "likes": 3,
            "name": "Peeled Spheres",
            "published": 3,
            "tags": [
                "spiral",
                "sphere",
                "geometry",
                "helix"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 637
        },
        "renderpass": [
            {
                "code": "// \"Peeled Spheres\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HueToRgb (float c);\n\nfloat vRot[4], wSlc[3], dstFar, tCur, spRad, nSlc, nSeg;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dRot, az, r, s1, s2, c, dr;\n  dMin = dstFar;\n  dRot = 1.;\n  for (int k = 0; k < 3; k ++) {\n    q = p;\n    q.xz = Rot2D (q.xz, - dRot * vRot[k]);\n    az = (length (q.xz) > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n    c = cos (asin (q.y / length (q)));\n    r = spRad - 0.2 * float (k);\n    s1 = 0.2 * c;\n    s2 = 0.25 / c;\n    dr = 0.03 * max (SmoothBump (0.5 - s2, 0.5 + s2, 0.5 * s2, mod (q.y * nSlc / r +\n       dRot * az, 1.)), SmoothBump (0.5 - s1, 0.5 + s1, 0.5 * s1, mod (nSeg * az, 1.)));\n    d = abs (length (q) - r - dr) - 0.03 - dr;\n    if (wSlc[k] > 0.) d = max (d, wSlc[k] - abs (2. * mod (nSlc * q.y / r + dRot * az +\n       0.5, 1.) - 1.) / nSlc);\n    DMIN (k + 1);\n    dRot *= -1.;\n  }\n  dMin *= 0.5;\n  d = length (q) - spRad + 0.6;\n  DMIN (4);\n  return dMin;  \n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0002 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltDir, ltPos[4], sCol[4];\n  float dstObj, dRot, aRot, r, az, el, s1, s2, c, dfSum, spSum, at;\n  sCol[0] = HueToRgb (0.4);\n  sCol[1] = HueToRgb (0.6);\n  sCol[2] = HueToRgb (0.2);\n  sCol[3] = HueToRgb (0.);\n  ltPos[0] = 5. * vec3 (1., 1., 1.);\n  ltPos[1] = 5. * vec3 (-1., 1., -1.);\n  ltPos[2] = 5. * vec3 (1., -1., -1.);\n  ltPos[3] = 5. * vec3 (-1., -1., 1.);\n  spRad = 2.;\n  nSlc = 8.;\n  wSlc[0] = 0.9 * (spRad / (2. * nSlc)) * SmoothBump (0.15, 0.85, 0.05, mod (0.05 * tCur, 1.));\n  wSlc[1] = 0.9 * ((spRad - 0.2) / (2. * nSlc)) * SmoothBump (0.27, 0.73, 0.05, mod (0.05 * tCur, 1.));\n  wSlc[2] = 0.9 * ((spRad - 0.4) / (2. * nSlc)) * SmoothBump (0.39, 0.61, 0.05, mod (0.05 * tCur, 1.));\n  vRot[0] = 0.2 * tCur;\n  vRot[1] = 0.3 * tCur;\n  vRot[2] = 0.4 * tCur;\n  vRot[3] = 0.5 * tCur;\n  nSeg = 32.;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    r = spRad - 0.2 * float (idObj - 1);\n    dRot = (idObj == 1 || idObj == 3) ? 1. : -1.;\n    for (int k = 0; k < 4; k ++) {\n      if (k == idObj - 1) {\n        col = sCol[k];\n        aRot = vRot[k];\n        break;\n      }\n    }\n    if (idObj < 4 && length (ro) < r + 0.051) col *= 0.7;\n    else {\n      ro.xz = Rot2D (ro.xz, - dRot * aRot);\n      az = (length (ro.xz) > 0.) ? atan (ro.z, - ro.x) / (2. * pi) : 0.;\n      el = asin (ro.y / length (ro)) / (0.5 * pi);\n      c = cos (0.5 * pi * el);\n      s1 = 0.03 * c;\n      s2 = 0.02 / c;\n      col *= 1. - 0.2 * max (SmoothBump (0.5 - s1, 0.5 + s1, 0.5 * s1,\n         mod (ro.y * nSlc / r + dRot * az, 1.)), (1. - smoothstep (0.93, 0.98, abs (el))) *\n         SmoothBump (0.5 - s2, 0.5 + s2, 0.5 * s2, mod (nSeg * az, 1.)));\n    }\n    dfSum = 0.;\n    spSum = 0.;\n    for (int k = 0; k < 4; k ++) {\n      ltDir = normalize (ltPos[k]);\n      at = smoothstep (0.3, 0.7, dot (normalize (ltPos[k] - ro), ltDir));\n      dfSum += at * max (dot (vn, ltDir), 0.);\n      spSum += at * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    }\n    col = col * (0.05 + 0.7 * dfSum) + 0.2 * spSum;\n  } else {\n    col = vec3 (1., 0.86, 0.8) * (0.2 + 0.1 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    el -= 0.2 * pi * sin (0.03 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -15.);\n  rd = vuMat * normalize (vec3 (uv, 6.5));\n  dstFar = 30.;\n  col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col *= mix (0.8, 1., pow (1. - 0.5 * length (uvs * uvs), 4.));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HueToRgb (float c)\n{\n  return clamp (abs (fract (c + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}