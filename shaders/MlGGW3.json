{
    "Shader": {
        "info": {
            "date": "1477046852",
            "description": "Velvet Tunnel",
            "flags": 0,
            "hasliked": 0,
            "id": "MlGGW3",
            "likes": 2,
            "name": "Velvet Tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "velvet"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 649
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nmat3 getRotXMat(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 getRotYMat(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 getRotZMat(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nmat3 mat;\n\nvec2 path(float t)\n{\n\treturn vec2(cos(t*0.08), sin(t*0.08)) * 4.;\n}\n\nfloat pattern(vec3 p)\n{\n\tp = abs(fract(p*.3) - 0.5);\n\treturn length(p);\n}\n\nvec4 map(vec3 p)\n{\n\tp.xy -= path(p.z);\n    float d = min(pattern(p*mat), pattern(p*mat*mat)) / .9;\n    vec3 col = vec3(1)-clamp(d,0.,1.);\n   \tfloat dist = dot(col,vec3(1));\n\treturn vec4(5. - length(p.xy) - dist*.5, vec3(0));\n}\n\nvec3 nor( vec3 pos, float k )\n{\n\tvec3 eps = vec3( k, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 f = vec4(0);\n    \n    vec2 g = fragCoord.xy;\n    vec2 si = iResolution.xy;\n    \n    mat3 mx = getRotXMat(-7.);\n\tmat3 my = getRotYMat(-5.);\n\tmat3 mz = getRotZMat(-3.);\n    mat = mx * my * mz;\n    \n    float time = iTime * 8.;\n    \n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,time + .1); //Change camere view here\n\tcamView.xy += path(camView.z);\n    \n  \tvec2 uv = (g+g-si)/si.y;\n    \n    vec3 ro = vec3(0,0,time);\n\tro.xy += path(ro.z);\n    \n    vec3 ld = normalize(vec3(path(ro.z + 1.),ro.z + 0.) - ro);\n    \n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float s = 1.;\n    float d = 0.;\n    for(int i=0;i<60;i++)\n    {      \n        if (log(d*d/s/1e5)>0.) break;\n        d += s = map(ro+rd*d).x * 0.5;\n    }\n\t\n    vec3 p = ro+rd*d;\n    vec3 n = nor(p, 0.1);\n        \n    float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n    float dif = clamp( dot( n, ld ), 0.0, 1.0 );\n    float spe = pow(clamp( dot( n, ld ), 0.0, 1.0 ),16.0);\n    float spe2 = pow(clamp( dot( n, -ld ), 0.0, 1.0 ),16.0);\n        \n\tf = vec4(0.8,0.5,0.2,1)*(amb + spe + spe2) + dif * map(p-n*3.);\n\n    f = mix( f, vec4(0.8,0.9,1,1), 1.0-exp( -0.0005*d*d ) );\n        \n   \tfragColor = f;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}