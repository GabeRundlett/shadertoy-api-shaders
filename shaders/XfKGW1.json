{
    "Shader": {
        "info": {
            "date": "1712698429",
            "description": "here loopless means iterationless:\nI analytically solve pixel closest to Cycloid_n(t), yielding 2n solutions whatever the screen resolution.\n\nAny idea how to have less jaggies ?",
            "flags": 0,
            "hasliked": 0,
            "id": "XfKGW1",
            "likes": 10,
            "name": "loopless epicycloid",
            "published": 3,
            "tags": [
                "golf",
                "loopless",
                "epicycloid"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "#define CS(a) cos(a+vec2(0,11))\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, P,\n          U = 2.*( u+u - R ) / R.y,              // normalized coordinates\n          V = U; V.y = -V.y;\n    float n = 9., r = .2, l,                     // epicycloid parameters\n                                                 // solve | P(t) | = | U | \n          t = acos( clamp(.5*( dot(U,U) - 1. - r*r ) / r ,-1.,1.) ) / n;  // clamp to avoid NaN\n          // atan(P) = atan(U) is harder to exploit, but could at leat give a range.\n    for( O = vec4(0); t < 6.283; t += 6.283/n )  // all the cos( nt ) solutions\n       P = CS(t) + r*CS((n+1.)*t),               // epicycloid_n(t)\n       l =  min( length(P-U), length(P-V) ),     // cos(t) & cos(-t) solutions\n       O += smoothstep( 1.5, 0., l/fwidth(l) );  // draw\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}