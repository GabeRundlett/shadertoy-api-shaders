{
    "Shader": {
        "info": {
            "date": "1707691659",
            "description": "Trying out some new functions.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXX3z2",
            "likes": 4,
            "name": "xvrqt - Second Shader",
            "published": 3,
            "tags": [
                "fractal",
                "circles",
                "learning",
                "trippy",
                "concentriccircles"
            ],
            "usePreview": 0,
            "username": "xvrqt",
            "viewed": 100
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\n\nfloat sdCircle(in vec2 o, in vec2 p, in float r) {\n    return distance(o,p) - r;\n}\n\nvec2 circle(in float t, in float r) {\n    float x = r * sin((2.0*PI)*t);\n    float y = r * cos((2.0*PI)*t);\n    return vec2(x,y);\n}\n\nvec3 palette(in float t) {\n    /* Rainbow Palette (gay)\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.00,0.33,0.67);\n    */\n    \n    /*/ Lesbianish\n    vec3 a = vec3(1.258,0.498,0.268);\n    vec3 b = vec3(0.738,0.648,1.418);\n    vec3 c = vec3(0.938,1.078,0.718);\n    vec3 d = vec3(-0.422,-0.512,0.468);\n    */\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.268,0.416,0.557);\n    \n    return a + b * cos((2.0*PI)*((c*t)+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv; // Save orginal origin\n    \n    // How Fast the Circle Moves\n    float speed = .25;\n    float t = iTime * speed;\n    \n    // Final Color\n    vec3 finalColor = vec3(0.0);\n    \n    float l = sdCircle(circle(t,0.25),uv0,0.5);\n    l = 2.0 * sin(l*8. + iTime) + 2.5;\n\n    int layers = int(round(l));\n    for(int i = 0; i < layers; i++) {\n        // Circle Center Location\n        vec2 circleLoc = circle(t,0.25);\n        \n        // Repeat in a grid\n        uv *= (iResolution.x/iResolution.y) / 2.0;\n        uv = fract(uv * -1.753) - 0.5;\n        \n        float d = sdCircle(circleLoc,uv,0.5);\n        d *= exp(-sdCircle(circleLoc,uv0,0.1));\n        // Initial Color\n        vec3 col = palette(distance(circle(t,.25),uv0) + t);\n    \n        // Rings around the center, move towards center with time\n        d = (0.5*(sin(d*2.*PI/4. + iTime+float(i)))+1.);\n    \n        // Vingette around the edges\n        float v = length(uv);\n        float fade = 1.0 - smoothstep(0.25,0.4,v);\n        col = col * pow(d,1.2) * fade;\n        finalColor += col / float(layers);\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}