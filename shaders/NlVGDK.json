{
    "Shader": {
        "info": {
            "date": "1638359505",
            "description": "Simple spectrum analyzer",
            "flags": 32,
            "hasliked": 0,
            "id": "NlVGDK",
            "likes": 7,
            "name": "Simple audio visualizer test",
            "published": 3,
            "tags": [
                "audio",
                "spectrumanalyzer"
            ],
            "usePreview": 0,
            "username": "mireq",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "#define SPECTRUM_BARS 30\n\n// colormap https://www.shadertoy.com/view/WlfXRN, https://www.shadertoy.com/view/3lBXR3\n\nvec3 inferno(float t)\n{\n\tconst vec3 c0 = vec3(0.0002189403691192265, 0.001651004631001012, -0.01948089843709184);\n\tconst vec3 c1 = vec3(0.1065134194856116, 0.5639564367884091, 3.932712388889277);\n\tconst vec3 c2 = vec3(11.60249308247187, -3.972853965665698, -15.9423941062914);\n\tconst vec3 c3 = vec3(-41.70399613139459, 17.43639888205313, 44.35414519872813);\n\tconst vec3 c4 = vec3(77.162935699427, -33.40235894210092, -81.80730925738993);\n\tconst vec3 c5 = vec3(-71.31942824499214, 32.62606426397723, 73.20951985803202);\n\tconst vec3 c6 = vec3(25.13112622477341, -12.24266895238567, -23.07032500287172);\n\n\treturn c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n\nvec3 turbo(float t) {\n\tconst vec3 c0 = vec3(0.1140890109226559, 0.06288340699912215, 0.2248337216805064);\n\tconst vec3 c1 = vec3(6.716419496985708, 3.182286745507602, 7.571581586103393);\n\tconst vec3 c2 = vec3(-66.09402360453038, -4.9279827041226, -10.09439367561635);\n\tconst vec3 c3 = vec3(228.7660791526501, 25.04986699771073, -91.54105330182436);\n\tconst vec3 c4 = vec3(-334.8351565777451, -69.31749712757485, 288.5858850615712);\n\tconst vec3 c5 = vec3(218.7637218434795, 67.52150567819112, -305.2045772184957);\n\tconst vec3 c6 = vec3(-52.88903478218835, -21.54527364654712, 110.5174647748972);\n\n\treturn c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n\nvoid showWave(out vec4 fragColor, in vec2 uv, in vec2 resolution)\n{\n\t// Value\n\tfloat y = texelFetch(iChannel0, ivec2(int(uv.x * 512.0), 1), 0).x;\n\t// Derivation of value\n\tfloat dy = dFdx(y);\n\t// Average between two samples\n\tfloat center = y + dy / 2.0;\n\t// Výpočet veľkosti pixelu\n\tfloat pixelSize = 1.0 / resolution.y;\n\t// Vertial width of line\n\tfloat lineWidth = max(abs(dy), pixelSize);\n\t// White for zero distance\n\tfloat color = (lineWidth - abs(center - uv.y)) / lineWidth;\n\t// Remove negative values\n\tcolor = max(color, 0.0);\n\t// Final color\n\tfragColor = vec4(vec3(color), 1.0);\n}\n\nvoid showSpectrum(out vec4 fragColor, in vec2 uv, in vec2 resolution)\n{\n\t// Bar nuber\n\tint barNumber = int(uv.x * float(SPECTRUM_BARS));\n\t// Spectrum frequency (range [0, 1])\n\tfloat frequency = (float(barNumber)/float(SPECTRUM_BARS + 1)) + 1.0 / float(SPECTRUM_BARS);\n\t// Load frequency\n\tfloat val = texelFetch(iChannel0, ivec2(int(frequency * 512.0), 0), 0).x;\n\t// Color from palette\n\tvec3 color = turbo(min(val * 1.1, 1.0));\n\t// Display bar with selected color\n\tif (val < uv.y || fract(uv.x * float(SPECTRUM_BARS)) < 0.2) {\n\t\tfragColor = vec4(0, 0, 0, 1);\n\t}\n\telse {\n\t\tfragColor = vec4(color, 1);\n\t}\n}\n\nvoid histogramSpectrum(out vec4 fragColor, in vec2 uv, in vec2 resolution)\n{\n\n\t// Signal, x, y derivate\n\tvec3 signal = texture(iChannel1, uv).xyz;\n\t// Normal from x, y derivate\n\tvec3 normal = normalize(vec3(signal.y, signal.z, 0.1));\n\t// Bmmp mapping\n\tfloat bumpMultiplier = dot(normal, vec3(0.0, 1.0, 1.0)) * 0.5 + 0.5;\n\t// Final color\n\tfragColor = vec4(inferno(signal.x) * bumpMultiplier, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\t// Koordináty [0, 1]\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\t// Vykreslenie deliacej čiary\n\tif (uv.x > 0.7) {\n\t\tif (int(fragCoord.y) == int(iResolution.y) / 2) {\n\t\t\tfragColor = vec4(vec3(0.5), 1.0);\n\t\t\treturn;\n\t\t}\n\t}\n\tif (int(fragCoord.x) == int(float(iResolution.x) * 0.7)) {\n\t\tfragColor = vec4(vec3(0.5), 1.0);\n\t\treturn;\n\t}\n\n\tif (uv.x > 0.7) {\n\t\tuv.x = (uv.x - 0.7) / 0.3;\n\t\tif (uv.y < 0.5) {\n\t\t\tshowSpectrum(fragColor, uv * vec2(1.0, 2.0), iResolution.xy * vec2(1.0, 0.5));\n\t\t}\n\t\telse {\n\t\t\tshowWave(fragColor, (uv - vec2(0.0, 0.5)) * vec2(1.0, 2.0), iResolution.xy * vec2(1.0, 0.5));\n\t\t}\n\t}\n\telse {\n        histogramSpectrum(fragColor, uv * vec2(1.0 / 0.7, 1.0), iResolution.xy * vec2(0.7, 1.0));\n\n\t}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tint freq = int(uv.y*512.0);\n\tfloat val;\n\n\tif (int(fragCoord.x) == 0) {\n\t\tval = texelFetch(iChannel0, ivec2(freq, 0), 0).x;\n\t}\n\telse {\n\t\tval = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(-1, 0), 0).x;\n\t}\n\tfragColor = vec4(val, dFdx(val), dFdy(val), 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}