{
    "Shader": {
        "info": {
            "date": "1570797557",
            "description": "This shader demonstrates a triangle-based interpolation technique that I use to break tiling. Work area is divided in triangles and a unique seed is assigned to every vertex to generate unique tap. Works with mips.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsVGRd",
            "likes": 83,
            "name": "Fix texture tiling in 3 taps",
            "published": 3,
            "tags": [
                "tiling",
                "interpolation",
                "scrolling"
            ],
            "usePreview": 1,
            "username": "Suslik",
            "viewed": 4578
        },
        "renderpass": [
            {
                "code": "const float pi = 3.141592;\nconst vec2 hexRatio = vec2(1.0, sqrt(3.0));\n\n//credits for hex tiling goes to Shane (https://www.shadertoy.com/view/Xljczw)\n//center, index\nvec4 GetHexGridInfo(vec2 uv)\n{\n  vec4 hexIndex = round(vec4(uv, uv - vec2(0.5, 1.0)) / hexRatio.xyxy);\n  vec4 hexCenter = vec4(hexIndex.xy * hexRatio, (hexIndex.zw + 0.5) * hexRatio);\n  vec4 offset = uv.xyxy - hexCenter;\n  return dot(offset.xy, offset.xy) < dot(offset.zw, offset.zw) ? \n    vec4(hexCenter.xy, hexIndex.xy) : \n    vec4(hexCenter.zw, hexIndex.zw);\n}\n\nfloat GetHexSDF(in vec2 p)\n{\n  p = abs(p);\n  return 0.5 - max(dot(p, hexRatio * 0.5), p.x);\n}\n\n//xy: node pos, z: weight\nvec3 GetTriangleInterpNode(in vec2 pos, in float freq, in int nodeIndex)\n{\n  vec2 nodeOffsets[] = vec2[](\n    vec2(0.0, 0.0),\n    vec2(1.0, 1.0),\n    vec2(1.0,-1.0));\n\n  vec2 uv = pos * freq + nodeOffsets[nodeIndex] / hexRatio.xy * 0.5;\n  vec4 hexInfo = GetHexGridInfo(uv);\n  float dist = GetHexSDF(uv - hexInfo.xy) * 2.0;\n  return vec3(hexInfo.xy / freq, dist);\n}\n\nvec3 hash33( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\nvec4 GetTextureSample(vec2 pos, float freq, vec2 nodePoint)\n{\n    vec3 hash = hash33(vec3(nodePoint.xy, 0));\n    float ang = hash.x * 2.0 * pi;\n    mat2 rotation = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    \n    vec2 uv = rotation * pos * freq + hash.yz;\n    return texture(iChannel0, uv);\n}\n\nvec2 GetVelocity(vec2 pos)\n{\n    float aspect = iResolution.y / iResolution.x;\n    vec2 diff0 = pos - vec2(0.2, 0.5 * aspect);\n    vec2 diff1 = pos - vec2(0.8, 0.5 * aspect);\n    \n    float charge0 = -0.01;\n    float charge1 =  0.01;\n    \n    float eps = 0.1;\n    return \n        normalize(diff0) * charge0 / (dot(diff0, diff0) + eps) +\n        normalize(diff1) * charge1 / (dot(diff1, diff1) + eps);\n}\n\nvec4 GetScrollingTextureSample(vec2 pos, float freq, vec2 nodePoint, vec2 velocity)\n{\n    vec3 hash = hash33(vec3(nodePoint.xy, 0));\n    float ang = hash.x * 2.0 * pi;\n    mat2 rotation = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    \n    vec2 dir = normalize(velocity);\n    mat2 flowMatrix = mat2(dir.x, dir.y, -dir.y, dir.x);\n    mat2 flowStretch = mat2(2.0, 0.0, 0.0, 1.0);\n    vec2 flowPos = flowStretch * (inverse(flowMatrix) * pos * freq + vec2(iTime, 0.0));\n    vec2 uv = rotation * flowMatrix * flowPos + hash.yz;\n    return texture(iChannel0, uv);\n}\n\n//from Qizhi Yu, et al [2011]. Lagrangian Texture Advection: Preserving Both Spectrum and Velocity Field. \n//IEEE Transactions on Visualization and Computer Graphics 17, 11 (2011), 1612â€“1623\nvec3 PreserveVariance(vec3 linearColor, vec3 meanColor, float moment2)\n{\n    return (linearColor - meanColor) / sqrt(moment2) + meanColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 normCoord = fragCoord / iResolution.xy;\n    ivec2 quadIndex2 = ivec2(normCoord * 2.0);\n    int quadIndex = quadIndex2.x + quadIndex2.y * 2;\n    \n    vec2 quadCoord = mod(fragCoord, iResolution.xy * 0.5) / (iResolution.x * 0.5);\n    \n    float texFreq = 10.0;\n    float tileFreq = 20.0;\n    \n    vec2 centralDist = abs(fragCoord.xy - iResolution.xy * 0.5);\n    if(centralDist.x < 2.0 || centralDist.y < 2.0)\n    {\n        fragColor = vec4(1.0);\n        return;\n    }\n\n    fragColor = vec4(0.0);\n    if(quadIndex == 0)\n    {\n        fragColor = GetTextureSample(quadCoord, texFreq, vec2(0.0));\n    }\n    if(quadIndex == 1)\n    {\n        float moment1 = 0.0;\n        float moment2 = 0.0;\n        for(int i = 0; i < 3; i++)\n        {\n            vec3 interpNode = GetTriangleInterpNode(quadCoord, tileFreq, i);\n            fragColor += GetTextureSample(quadCoord, texFreq, interpNode.xy) * interpNode.z;\n            \n            moment1 += interpNode.z;\n            moment2 += interpNode.z * interpNode.z;\n        }\n        vec3 meanColor = textureLod(iChannel0, vec2(0.0), 10.0).rgb;\n        \n        float subquadDelta = fragCoord.x - iResolution.x * 3.0 / 4.0;\n        if(abs(subquadDelta) < 2.0)\n        {\n            fragColor.rgb = vec3(1.0);\n            return;\n        }\n        if(subquadDelta > 0.0) //variance-preserving blending\n            fragColor.rgb = PreserveVariance(fragColor.rgb, meanColor, moment2);\n    }\n    if(quadIndex == 2)\n    {\n        vec3 opacities = clamp((fract(0.2 * iTime) - vec3(0.0, 1.0 / 3.0, 2.0 / 3.0)) * 10.0, vec3(0.0), vec3(1.0));\n        for(int i = 0; i < 3; i++)\n        {\n            \n            vec3 interpNode = GetTriangleInterpNode(quadCoord, tileFreq, i);\n            fragColor += GetTextureSample(quadCoord, texFreq, interpNode.xy) * interpNode.z * opacities[i];\n        }\n    }\n\n    if(quadIndex == 3)\n    {\n        for(int i = 0; i < 3; i++)\n        {\n            vec3 interpNode = GetTriangleInterpNode(quadCoord, tileFreq, i);\n            vec2 velocity = GetVelocity(interpNode.xy);\n            fragColor += GetTextureSample(quadCoord + velocity * iTime, texFreq, interpNode.xy) * interpNode.z;\n            //can be used for simulating stuff that scrolls and stretches locally like water ripples, waves, etc\n            //fragColor += GetScrollingTextureSample(quadCoord, texFreq, interpNode.xy, velocity) * interpNode.z;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}