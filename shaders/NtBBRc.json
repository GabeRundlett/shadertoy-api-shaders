{
    "Shader": {
        "info": {
            "date": "1652471022",
            "description": "I started off strong, with all the measurements... Then I realized the font is unspecified and the star positions are only available on a document that was probably digitized via fax, since the DPI is lamentable. The result is \"reasonably accurate\".",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBBRc",
            "likes": 6,
            "name": "Flag of Brasil",
            "published": 3,
            "tags": [
                "sdf",
                "flag",
                "brazil",
                "brasil"
            ],
            "usePreview": 0,
            "username": "kroltan",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "// Palette\nconst vec3 BACKGROUND_COLOR = vec3(0.0000, 0.6117, 0.2157);\nconst vec3 RHOMBUS_COLOR =    vec3(0.9961, 0.8745, 0.0000);\nconst vec3 CIRCLE_COLOR =     vec3(0.0000, 0.1529, 0.4627);\nconst vec3 DETAIL_COLOR =     vec3(1.0000, 1.0000, 1.0000);\nconst vec3 TEXT_COLOR =       vec3(0.0000, 0.6078, 0.2274);\n\n// Definitions\nconst float BASIS_HALF_WIDTH = 10.0;\nconst float BASIS_HALF_HEIGHT = 7.0;\n\nconst float RHOMBUS_INSET = 1.7;\n\nconst float CIRCLE_RADIUS = 3.5;\n\nconst vec2 STRIPE_CENTER_OFFSET = vec2(-2.0, -BASIS_HALF_HEIGHT);\nconst float STRIPE_INNER_RADIUS = 8.0;\nconst float STRIPE_OUTER_RADIUS = 8.5;\n\nconst int TEXT_SMALL_INDEX = 6;\nconst int TEXT_LENGTH = 17;\nconst int[TEXT_LENGTH] TEXT_CHARS = int[TEXT_LENGTH](\n    79, 82, 68, 69, 77,\n    32,  69,  32,\n    80, 82, 79, 71, 82, 69, 83, 83, 79\n);\n\nconst int STAR_SIZES_LENGTH = 5;\nconst float[STAR_SIZES_LENGTH] STAR_SIZES = float[STAR_SIZES_LENGTH](\n    1.0 / 3.0,\n    1.0 / 4.0,\n    1.0 / 5.0,\n    1.0 / 7.0,\n    1.0 / 10.0\n);\n\nconst int STARS_LENGTH = 27;\nconst vec3[STARS_LENGTH] STARS = vec3[STARS_LENGTH](\n    // X and Y from center, Z is size\n    // Extracted from https://upload.wikimedia.org/wikipedia/commons/f/ff/Flag_of_Brazil_%28sphere%29.svg\n    // Using the snippet\n    /*\n        [...document.querySelectorAll('use[id*=_]')]\n            .map(x => {\n                const xy = x.getAttribute(\"transform\")\n                    .match(/\\((.*?)\\)/)[1]\n                    .split(\",\")\n                    .map(x => parseInt(x, 10) * 0.00548245614035087719298245614035);\n                const size = parseInt(x.getAttribute(\"xlink:href\").at(-1), 10);\n                return [...xy, size]\n            })\n            .map(([x, y, size]) => `vec3(${y}, ${x}, ${size.toFixed(1)})`)\n            .join(\",\\n\")\n     */\n    vec3(-3.289473684210526, -0.7236842105263157, 1.0),\n    vec3(-2.933114035087719, 0.9703947368421052, 1.0),\n    vec3(-3.426535087719298, 1.332236842105263, 2.0),\n    vec3(-2.538377192982456, 0.7236842105263157, 4.0),\n    vec3(-2.094298245614035, 1.3706140350877192, 2.0),\n    vec3(-2.2149122807017543, 1.7708333333333333, 3.0),\n    vec3(1.25, -1.25, 1.0),\n    vec3(2.8234649122807016, 1.4144736842105263, 1.0),\n    vec3(3.382675438596491, 1.4528508771929824, 3.0),\n    vec3(2.9879385964912277, 1.7708333333333333, 2.0),\n    vec3(2.017543859649123, 2.615131578947368, 2.0),\n    vec3(2.012061403508772, 3.020833333333333, 3.0),\n    vec3(2.4177631578947367, 2.2971491228070176, 3.0),\n    vec3(2.7412280701754383, 2.094298245614035, 2.0),\n    vec3(2.00109649122807, 2.2203947368421053, 3.0),\n    vec3(-1.5350877192982455, 0.1644736842105263, 2.0),\n    vec3(1.0964912280701753, -0.20285087719298245, 3.0),\n    vec3(0, 1.8092105263157894, 1.0),\n    vec3(0.46600877192982454, 1.0087719298245614, 2.0),\n    vec3(0, 0.6469298245614035, 2.0),\n    vec3(-0.4057017543859649, 1.0087719298245614, 3.0),\n    vec3(-0.20285087719298245, 1.2883771929824561, 4.0),\n    vec3(1.2061403508771928, 2.713815789473684, 2.0),\n    vec3(1.5515350877192982, 2.357456140350877, 3.0),\n    vec3(0.888157894736842, 2.258771929824561, 3.0),\n    vec3(-1.6173245614035088, 2.138157894736842, 1.0),\n    vec3(0, 3.1524122807017543, 5.0)\n);\n\n\n// *cracks knuckles*\n\n\nvoid paint(inout vec3 canvas, in vec3 color, in float shape, in float width) {\n    canvas = mix(canvas, color, smoothstep(width, 0.0, shape));\n}\n\n\nvec2 polarUv(in vec2 uv, in vec2 center) {\n    vec2 local = uv - center;\n    float angle = atan(local.y, local.x);\n    float radius = length(local);\n    \n    return vec2(angle, radius);\n}\n\n\nfloat textTexture(in vec2 uv, in int index) {\n    if (index < 0 || index >= TEXT_LENGTH) return 9999.0;\n    \n    if (index == TEXT_SMALL_INDEX) uv *= 1.2;\n    \n    return char(iChannel0, uv, TEXT_CHARS[index]).w;\n}\n\n\nvec3 flag(in vec2 uv) {\n    float rhombus = sdRhombus(uv, vec2(BASIS_HALF_WIDTH - RHOMBUS_INSET, BASIS_HALF_HEIGHT - RHOMBUS_INSET));\n    \n    float circle = sdCircle(uv, CIRCLE_RADIUS);\n    \n    // I don't like the magic numbers here, but my brain is too smooth to make this exact\n    vec2 stripeUv = polarUv(uv, STRIPE_CENTER_OFFSET)\n        * vec2(-float(TEXT_LENGTH) * 1.3, 1.0)\n        - vec2(float(-TEXT_LENGTH) * 2.125, STRIPE_INNER_RADIUS);\n    \n    float stripeThickness = (STRIPE_OUTER_RADIUS - STRIPE_INNER_RADIUS) / 2.0;\n    float stripe = abs(stripeUv.y - stripeThickness) - stripeThickness;\n    stripe = max(stripe, circle);\n    \n    float text = textTexture(\n        vec2(\n            (fract(stripeUv.x) - 0.5) / 2.0 + 0.5,\n            stripeUv.y / stripeThickness * 0.5\n        ),\n        int(ceil(stripeUv.x))\n    ) - 0.5;\n    \n    float stars = 9999.0;\n    for (int i = 0; i < STARS_LENGTH; ++i) {\n        vec3 star = STARS[i];\n        // Ugly vec and sizes magic numbers, too :/\n        stars = min(stars, sdStar(uv - star.xy * vec2(.9, -.9), STAR_SIZES[int(star.z) - 1] * 0.6, 5, 3.3));\n    }\n    \n    vec3 canvas = BACKGROUND_COLOR;\n    paint(canvas, RHOMBUS_COLOR, rhombus, fwidth(rhombus));\n    paint(canvas, CIRCLE_COLOR, circle, fwidth(circle));\n    paint(canvas, DETAIL_COLOR, stars, fwidth(stars));\n    paint(canvas, DETAIL_COLOR, stripe, fwidth(stripe));\n    paint(canvas, TEXT_COLOR, text, 0.02);\n    return canvas;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 flagUv = uv * BASIS_HALF_HEIGHT;\n    \n    fragColor = vec4(flag(flagUv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n * SDFs from Inigo Quilez's website: https://iquilezles.org/articles/distfunctions2d/\n */\n\n// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdStar(in vec2 p, in float r, in int n, in float m) // m=[2,n]\n{\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en));\n\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n/*\n * Font texture access pilfered from FabriceNeyret2's shader here, unknown license: https://www.shadertoy.com/view/ltcXzs\n */\n\nvec4 char(sampler2D tex, vec2 p, int C) {\n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n    return textureGrad( tex, p/16. + fract( vec2(C, 15-C/16) / 16. ) , \n                       dFdx(p/16.),dFdy(p/16.) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}