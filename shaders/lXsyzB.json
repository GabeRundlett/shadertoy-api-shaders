{
    "Shader": {
        "info": {
            "date": "1727319424",
            "description": "i was like \"hm i wonder how the minecraft fishing rod works that might be cool to do\"\ncould probably be better",
            "flags": 0,
            "hasliked": 0,
            "id": "lXsyzB",
            "likes": 0,
            "name": "mc fishing rod",
            "published": 3,
            "tags": [
                "3d",
                "line",
                "fishing",
                "rod"
            ],
            "usePreview": 0,
            "username": "derpygamer2142",
            "viewed": 52
        },
        "renderpass": [
            {
                "code": "float dot2(vec2 v) {return dot(v,v);}\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\nvec2 project(vec3 p) {return p.xy/p.z;}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = fragCoord-(iResolution.xy/2.0);\n    vec3 mPos3d = normalize(vec3(iMouse.xy-(iResolution.xy/2.0),2.5))*300.0;\n    vec3 start3d = vec3(200.0,0.0,1.0);\n    vec2 start2d = project(start3d);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 hpos = normalize((mPos3d-start3d))*0.5; // halfway between the start and the end point\n    hpos.y += (hpos.y-start3d.y)*2.5;\n    //hpos.y *= 2.5;\n    float d = sdBezier(pos, \n        //iMouse.xy-(iResolution.xy/2.0),\n        project(mPos3d),\n        project(hpos),\n        start2d\n    );\n    if (d < 0.75) col = vec3(0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}