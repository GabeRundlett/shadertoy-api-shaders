{
    "Shader": {
        "info": {
            "date": "1689877501",
            "description": "lights",
            "flags": 0,
            "hasliked": 0,
            "id": "dsSBRK",
            "likes": 7,
            "name": "lightsdlkhsldjha",
            "published": 3,
            "tags": [
                "lights"
            ],
            "usePreview": 0,
            "username": "rosienewman",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Time in seconds\n    float time = iTime;\n    \n    // Number of lights\n    const int numLights = 20;\n    \n    // Frequency of the color cycle\n    const float cycleFrequency = 0.2;\n    \n    // Light positions and sizes\n    vec2 lightPositions[numLights];\n    float lightSizes[numLights];\n    \n    for (int i = 0; i < numLights; i++)\n    {\n        float angle = float(i) * 2.0 * 3.14159 / float(numLights);\n        float radius = 0.3 + 0.2 * sin(time + angle * 3.0);\n        \n        lightPositions[i] = vec2(0.5 + radius * cos(angle), 0.5 + radius * sin(angle));\n        lightSizes[i] = 1.15 + 10.1 * sin(time + angle * 2.0);\n    }\n    \n    // Calculate distance and intensity for each light\n    vec3 finalColor = vec3(0.0);\n    \n    for (int i = 0; i < numLights; i++)\n    {\n        float dist = distance(fragCoord, iResolution.xy * lightPositions[i]);\n        \n        // Calculate time-based color values for each light\n        float red = 0.5 + 0.5 * sin(2.0 * 3.14159 * (time * cycleFrequency + float(i) / float(numLights)));\n        float green = 0.5 + 0.5 * sin(2.0 * 3.14159 * (time * cycleFrequency + (2.0 / 3.0) + float(i) / float(numLights)));\n        float blue = 0.5 + 0.5 * sin(2.0 * 3.14159 * (time * cycleFrequency + (4.0 / 3.0) + float(i) / float(numLights)));\n        \n        // Calculate light intensity based on distance (inverse square law) and light size\n        float intensity = lightSizes[i] / (0.1 + 0.1 * dist * dist);\n        \n        // Combine the colors and intensities\n        finalColor += vec3(red * intensity, green * intensity, blue * intensity);\n    }\n    \n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}