{
    "Shader": {
        "info": {
            "date": "1692991505",
            "description": "Ambient clouds",
            "flags": 0,
            "hasliked": 0,
            "id": "dlfBWM",
            "likes": 5,
            "name": "ambient clouds",
            "published": 3,
            "tags": [
                "noise",
                "clouds",
                "fbm"
            ],
            "usePreview": 0,
            "username": "niclasvoysys",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "\nfloat random(in vec2 _st) {\n    return fract(sin(dot(_st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// Based on https://thebookofshaders.com/13/\n#define NUM_OCTAVES 5\nfloat fbm(in vec2 _st, float factor) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n    for(int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5 * 12.0 * 0.1 + (0.07 * sin(10.0 * factor + 0.32));\n    }\n    return v;\n}\n\n// Based on https://thebookofshaders.com/13/\n// #define NUM_OCTAVES 5\nfloat fbm2(in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n    for(int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nfloat fbm_mod(vec2 st) {\n    vec2 q = vec2(0.);\n    q.x = fbm2(st + 0.00 * iTime);\n    q.y = fbm2(st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm2(st + 1.0 * q + vec2(1.7, 9.2) + 0.15 * iTime);\n    r.y = fbm2(st + 1.0 * q + vec2(8.3, 2.8) + 0.126 * iTime);\n\n    float f = fbm2(st + r);\n\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n\n    float x_sample = uv.x * 512.0;\n    int x = int(x_sample);\n\n    float dist = 1.0 - abs(1.0 - uv.x);\n    dist = smoothstep(0.0, 1.0, dist);\n\n    float scale = 0.1;\n    \n    const float noise_amount = 1.0;\n\n    float disturbance = abs(noise(uv.xy)) * noise_amount * 0.1;\n\n    float modifier = scale;\n    modifier = modifier * dist;\n    modifier = modifier * disturbance * 0.3;\n\n    col = mix(col, vec3(0.66667, 1.0, 1.0), modifier);\n\n    col = mix(col, vec3(0.98, 0.54, 0.09), 0.3 * modifier);\n\n    float f = fbm_mod(uv.xy);\n\n    col = mix(col, vec3(0.98, 0.54, 0.09), f * f);\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}