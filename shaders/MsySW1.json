{
    "Shader": {
        "info": {
            "date": "1464039236",
            "description": "final pass from a colab between connor bell and myself.\nfull video, lerping between passes - https://www.youtube.com/watch?v=bMonV2q6b10",
            "flags": 0,
            "hasliked": 0,
            "id": "MsySW1",
            "likes": 11,
            "name": "FRESH MINTY",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "green",
                "netgrind",
                "mint",
                "minty",
                "fresh",
                "connorbell",
                "macbooktall"
            ],
            "usePreview": 0,
            "username": "netgrind",
            "viewed": 878
        },
        "renderpass": [
            {
                "code": "// hyper tweaked copy of https://www.shadertoy.com/view/Xds3zN by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// part of a colab between connor bell and cale bradbury\n\n//increase steps for higher detail, will run slower\n#define steps 30\n\n//how foggy the zone is\n#define fog 1.1\n\nfloat size = .1;\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdPlane( vec3 p )\n{\nreturn p.y;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\nreturn (d1.x<d2.x) ? d1 : d2;\n}\nfloat opU( float d1, float d2 )\n{\nreturn (d1<d2) ? d1 : d2;\n}\n\nvec2 opS( vec2 d1, vec2 d2 )\n{\n    return ((d2.x<d1.x)) ? d2 : d1;\n}\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 rotate(vec2 v, float a){\nfloat t = atan(v.y,v.x)+a;\n    float d = length(v);\n    v.x = cos(t)*d;\n    v.y = sin(t)*d;\n    return v;\n}\nvec2 stretch(vec2 v, float s){\nfloat t = atan(v.y,v.x);\n    float d = length(v);\n    d +=d*s;\n    v.x = cos(t)*d;\n    v.y = sin(t)*d;\n    return v;  \n}\n\nvec2 gif9(in vec3 pos){\n    pos.x = abs(mod(pos.x, size*4.)-size*2.);\n    pos.y = 0.-abs(mod(abs(pos.y), size*4.)-size*2.);\n \tpos.z = abs(mod(pos.z-size, size*4.)-size*2.);\n    \n    vec2 res = vec2(sdBox(pos+vec3(0.,-size,0.), vec3(100.,.1,100.)), 1.1);\n    res = opU(res, vec2(sdBox(pos, vec3(size)), 2.));\n    res = opU(res, vec2(sdBox(pos+vec3(0., size, 0.), vec3(size*.5,size,size*.5)), 3.));\n//res = opU(res, vec2(sdBox(pos, vec3(size*1.5, size*0.5, size*1.5)), 2.5));\n\n    res = opU(res, vec2(sdBox(pos, vec3(size*2.5, size*0.5, size*1.5)), 2.5));    \n    res = opU(res, vec2(sdBox(pos, vec3(size*0.5, size*0.6, size*1.55)), 3.5));\n    res = opU(res, vec2(sdBox(pos, vec3(size*2.5, size*0.6, size*.25)), 3.5));\n    res = opU(res, vec2(sdBox(pos, vec3(size*.4, size*0.5, size*2.)), 2.5));    \nres = opU(res, vec2(sdBox(pos, vec3(size*2., size*0.25, size*1.55)), 4.5));\nres = opU(res, vec2(sdBox(pos, vec3(size*0.5, size*0.25, size*2.)), 4.5));\n\n    float s = sdBox(vec3(pos.x,mod(pos.y-.55,size*.4),pos.z), vec3(size*.7, size*0.2, size*.7));\n    s = opS(s, sdBox(vec3(pos.x,mod(pos.y-.55,size*.4),pos.z), vec3(size*.3, size*0.3, size*.3)));\n    res.x = opS(res.x,s);\n    res.x = opS(res.x,sdBox(pos+vec3(-size*1.5,size*.55,0.),vec3(size*.15,size*.3,1.)));\n    \n   \tres = opU(res,vec2(sdBox(pos+vec3(-size*1.5,size*0.35,0.),vec3(size*.15,size*.25,size*1.5)), 2.));\n\n    float box = sdBox(pos+vec3(-size*.9, size*1.2, -size*.95), vec3(size*.1,size*1.1,size*.05));\n    res = opU(res, vec2(box,2.));\n    \n    res = opU(res,vec2(sdBox(pos+vec3(-size*2.,size*.3,0.),vec3(size*.15,size*.3,size*1.55)), 3.5));\n    res = opU(res,vec2(sdBox(pos+vec3(0.,size*.3,0.),vec3(size*.1,size*.3,size*2.)), 3.5));\n    \n    //res.x = opS(res.x,sdSphere(pos+vec3(-size*2.,size*.5,0.),size*1.5));\n    s = sdSphere(pos+vec3(-size*2.,size*.5,-size*2.),size*1.);\n    \n    //res.x = opS(res.x,sdBox(pos+vec3(-size*2.,0.,-size*2.),vec3(size*1.2,size*.4,size*.3)));\n   \ts = opU(s,sdBox(vec3(pos.x-size*.9,mod(pos.y,size*.3),pos.z-size*.95),vec3(size*.11,size*.1,size*.051)));\n    s = opU(s,sdBox(vec3(pos.x,pos.y-size,mod(pos.z+size*.25,size*.2)),vec3(size*10.,size*.8,size*.1)));\n    res.x = opS(res.x,s);\n    \n   \ts = sdTriPrism(pos+vec3(-size*2.,-size*.2,-size*2.),vec2(size*2.5, size*0.1));\ns = opS(s, sdSphere(pos+vec3(-size*2.,-size*.1,-size*2.5),size*1.25));\n\n    res = opU(res, vec2(s, 2.));\n\n    res = opU(res, vec2(sdBox(pos-vec3(0.,0.,size*2.), vec3(size*0.8, size*0.8, size*.1)), 3.5));\n \n    res = opU(res, vec2(sdBox(pos-vec3(0.,0.,size*2.), vec3(size*0.05, size*2., size*.15)), 3.5));\n \tres = opU(res, vec2(sdBox(pos-vec3(size*0.75,-size*1.5,size*2.), vec3(size*0.05, size*.5, size*.1)), 1.5));\n \n    box = sdBox(pos+vec3(-size*.9, size*1.2, -size*.95), vec3(size*.05,size*1.1,size*.025));\n    res = opU(res, vec2(box,3.5));\n    \n    box = sdCylinder(pos.yxz+vec3(size*2.,0.,0.),vec2(size*.4,size*4.));\n    res.x = opS(res.x,box);\n    box = sdCylinder(pos.yxz+vec3(size*2.,0.,-size*2.),vec2(size*.09,size*4.));\n    res.x = opS(res.x,box);\n    box = sdCylinder(pos.yxz+vec3(size*1.7,0.,-size*2.),vec2(size*.06,size*4.));\n    res.x = opS(res.x,box);\n    box = sdCylinder(pos.yxz+vec3(size*1.5,0.,-size*2.),vec2(size*.03,size*4.));\n    res.x = opS(res.x,box);\n    \n    res = opU(res, vec2(box, 3.5));\n    \n    box = sdBox(pos+vec3(0.,0.,-size*1.3),vec3(size*.2,1.,size*.1));\n    res.x = opS(res.x,box);\n    \n    res = opU(res, vec2(box, 1.5));\n    res = opU(res, vec2(sdCylinder(pos, vec2(size*0.5, size*2.)), 2.));\n    \n    s = sdSphere(pos+vec3(-size*2.,-size*1.,-size*2.),size*1.);\n    s = opS(s,sdBox(vec3(pos.x,pos.y-size*2.,-mod(pos.z+size*.15,size*.2)),vec3(size*10.,size*2.8,size*.1)));\n\tvec2 ii = vec2(s, 3.5);\n    res = opU(res,ii);\n    \n    res = opU(res,vec2(sdBox(pos+vec3(-size*2.,size*.25,0.),vec3(size*.05,size*.4,size*0.6)), 2.));\n    \n    box = sdCylinder(pos.yxz+vec3(size*2.,-size*.5,0.),vec2(size*.3,size*.2));\n    box =opU(box, sdCylinder(pos.yxz+vec3(size*2.,-size*.5,0.),vec2(size*.2,size*.4)));\n    box =opU(box, sdCylinder(pos.yxz+vec3(size*2.,0.,0.),vec2(size*.1,size*4.)));\n    res.x = opS(res.x,box);\n    \n    return res;\n}\n#define loop 4.\n\nvec2 map( in vec3 pos ){\n    float t = iTime*.1;\n    \n    float s = t;\n    s = mod(s,loop)-(loop*.5);\n    s = clamp(s*.5,0.,1.);   \n    \n    t/=loop;\n    vec2 res = gif9(pos);\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.0;\n    float tmax = 100.0;\n \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<steps; i++ )\n    {\n   vec2 res = map( ro+rd*t );\n        if(  t>tmax ) break;\n        t += res.x;\n   m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 calcNormal( in vec3 pos ){\nvec3 eps = vec3( 0.0001, 0.0, 0. );\nvec3 nor = vec3(\n   map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n   map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n   map(pos+eps.yyx).x - map(pos-eps.yyx).x );\nreturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\nfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<10; i++ ) {\n        float hr = 0.01 + 0.006*float(i);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.6;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(1.0);\n    vec2 res = castRay(ro,rd);\n    vec3 pos = ro + res.x*rd;\n    vec3 nor = calcNormal(pos);\n    float ao = calcAO(pos,nor);\n    \n    const vec3 a = vec3(.5, .1, .5);\n    const vec3 b = vec3(.5, .1, .5);\n    const vec3 c = vec3(.3, 1.4, 0.);\n    const vec3 d = vec3(.5, .0, .25);\n    col = palette(res.y, a, b, c, d);\n\tcol = 1.0-(col+(1.0-ao))*(1.0-res.x*fog)*.85;\n\treturn vec3( clamp(col,0.0,1.0) );\n}\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    \n\tvec3 ro = vec3( 0.,0.,-iTime*.1 );\n\tvec3 ta = ro+vec3( 0.,0.,1. );\n    mat3 ca = setCamera( ro, ta, 0.0 );    \n    \n    float warp =.666;    \n    float fov = 70.0;\n    float rayZ = tan ((90. - 0.5 * fov) * 0.01745329252);\n\tvec3 rd = normalize( vec3(p.xy,-rayZ) )*ca;\n    rd = vec3(rd.xy,sqrt (1.0 - warp * warp) * (rd.z + warp));\n    rd = normalize(rd);\n    \n    vec3 col = render( ro, rd );\n\n    fragColor=vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}