{
    "Shader": {
        "info": {
            "date": "1565853258",
            "description": "Tryed Distance to nearest surface (src : fabrice Castel) and hur shift for rainbow (src : reedwirrax)",
            "flags": 0,
            "hasliked": 0,
            "id": "3lBXDD",
            "likes": 3,
            "name": "Wave and sun",
            "published": 3,
            "tags": [
                "raymarch",
                "rainbow",
                "repeat"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 485
        },
        "renderpass": [
            {
                "code": "// COLORS\n// src : nvidia\nfloat saturate(float x)\n{\n    return max(0.0, min(1.0, x));\n}\n\n\nvec3 saturate(vec3 v)\n{\n    return vec3(\n        max(0.0, min(1.0, v.x)),\n        max(0.0, min(1.0, v.y)),\n        max(0.0, min(1.0, v.z))\n        );\n}\n\n// src reefwirrax\nvec3 Hue(float h)\n{\n    float r = abs(h*6.0-3.0)-1.0;\n    float g = 2.0 - abs(h*6.0-2.0);\n    float b = 2.0 - abs(h*6.0-4.0);\n    return saturate(vec3(r,g,b));\n}\n\nvec3 HSVtoRGB(vec3 hsv)\n{\n    return vec3(((Hue(hsv.x) - 1.0) * hsv.y + 1.0) * hsv.z);\n}\n\n// world\n// src : Fabrice Castel\nfloat DistanceToNearestSurface(vec3 p)\n{\n    float t;\n    p.y += sin(p.z * 0.25 + iTime * 5. + sin(p.x + iTime * 10.));\n    \n    vec3 q = vec3(mod(p.x, 3.0) - 1.5, p.y, mod(p.z, 3.0) - 1.5);\n    float s = 1.0;\n    vec3 d = abs(q) - vec3(s);\n    \n    t = min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n    \n    return t;\n}\n\nfloat castRay(vec3 rayOrigin, vec3 rayDir)\n{\n    float t;\n    float anim = fract(iTime);\n    \n    for(int i=0; i<128 ; i++)\n    {\n        float res = 0.0;\n        vec3 march = rayOrigin + rayDir * t;\n        res = DistanceToNearestSurface(march);\n        \n        if(res < (0.0001*t))\n        {\n            return t;\n        }\n        t += res;\n    }\n    \n    return -1.0;\n}\n\nvec2 NormalizeScreen(vec2 st)\n{\n    vec2 uv = (2.0 * st/iResolution.xy - 1.0);\n    uv.x *= iResolution.x/iResolution.y;\n    return uv;\n}\n\nvec3 render(vec2 uv, vec3 rayOrigin, vec3 rayDir)\n{\n    vec3 col;\n    float t = castRay(rayOrigin, rayDir);\n    float ao = pow(1.-t * 0.005, 1.);\n    vec3 rainbow = vec3(HSVtoRGB(vec3(fract(ao+iTime*.5), 1.0, 1.0)));\n    \n    if(t == -1.0)\n    {\n        vec2 st = uv;\n        float angle = fract(atan(st.x, st.y)*5.);\n        float sun = smoothstep(.3, .31, length(st));\n        sun += step(.8, fract(st.y*10.-.3));\n        \n        float at = angle+iTime;\n        vec3 yolo = rainbow * (smoothstep(.1, .3, fract(at))-smoothstep(.3, .5, fract(at)));\n        \n        col = mix(\n            vec3(max(mix(vec3(.0), yolo, smoothstep(.29, .30, length(st))), mix(rainbow, vec3(.0), sun))), // \n            vec3(.0),\n            vec3(step(0.03, rayDir.y))\n            );\n    }\n    else\n    {\n        col = rainbow;\n    }\n    \n    return col;\n}\n\nvec3 CameraViewDir(vec2 uv, vec3 camPos, vec3 camTarget)\n{\n    vec3 viewDir;\n    vec3 forward = normalize(camTarget - camPos);\n    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    float fPersp = 4.0;\n    \n    viewDir = normalize(uv.x * right + uv.y * up + fPersp * forward);\n    \n    return viewDir;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = vec3(.5);\n    float offsetTime = iTime+1000.;\n    vec3 camPos = vec3(sin(offsetTime)*5., -5., offsetTime);\n    vec3 camTarget = vec3(0.0, 0.0, 0.0);\n    \n    vec2 uv = NormalizeScreen(fragCoord);\n    vec3 viewDir = CameraViewDir(uv, camPos, camTarget);\n    \n    col = vec3(length(uv)-.5);\n    \n    col = render(uv, camPos, viewDir);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}