{
    "Shader": {
        "info": {
            "date": "1710077847",
            "description": "More experiments with iridescent surface shaders.\n\nSome Koch curve extrusion from aiekick: https://www.shadertoy.com/view/lsGfWz\n\nBased on my original diffraction grating shader: https://shadertoy.com/view/Ds2XRd",
            "flags": 0,
            "hasliked": 0,
            "id": "XXlSWX",
            "likes": 7,
            "name": "[phreax] wavy surface",
            "published": 3,
            "tags": [
                "raymarching",
                "metal",
                "moebius",
                "iridescent",
                "torusknot"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2024\n   \n   Implementing physical diffraction grating by Alan Zucconi (great article):\n   \n   https://www.alanzucconi.com/2017/07/15/the-mathematics-of-diffraction-grating/\n   \n   This shader was of great help, as I was too stupid to compute the tangent vector\n   https://www.shadertoy.com/view/7dVGzz\n*/\n\n#define PI 3.141592\n#define TAU (2.*PI)\n#define SIN(x) (sin(x)*.5+.5)\n#define BUMP_EPS 0.004\n\nconst highp float NOISE_GRANULARITY = 0.5/255.0;\n\n\nfloat tt, g_mat;\n\nmat2 rot(float a) { return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\n\nfloat saturate(float x) {\n    return clamp(x, 0., 1.);\n}\n\n// zucconis spectral palette https://www.alanzucconi.com/2017/07/15/improving-the-rainbow-2/\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n    vec3 y = 1. - x * x;\n    y = clamp((y-yoffset), vec3(0), vec3(1));\n    return y;\n}\n\n//  some 2d noise for dithering\nhighp float random(highp vec2 coords) {\n   return fract(sin(dot(coords.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nfloat rect( vec2 p, vec2 b, float r ) {\n    vec2 d = abs(p) - (b - r);\n    return length(max(d, 0.)) + min(max(d.x, d.y), 0.) - r;\n}\n\n\n// ortho normal basis \nvoid pixarONB(vec3 n, out vec3 b1, out vec3 b2){\n\tfloat sign_ = sign(n.z);\n\tfloat a = -1.0 / (sign_ + n.z);\n\tfloat b = n.x * n.y * a;\n\tb1 = vec3(1.0 + sign_ * n.x * n.x * a, sign_ * b, -sign_ * n.x);\n\tb2 = vec3(b, sign_ + n.y * n.y * a, -n.y);\n}\n\nvec3 invGamma(vec3 col) {\n    return pow(col, vec3(2.2));\n}\n\nvec3 gamma(vec3 col) {\n    return pow(col, vec3(1./2.2));\n}\n\n// Zucconi's spectral palette\nvec3 spectral_zucconi6(float x) {\n    x = fract(x);\n    const vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n    const vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n    const vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n    const vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n    const vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n    const vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n    return bump3y(c1 * (x - x1), y1) + bump3y(c2 * (x - x2), y2) ;\n}\n\n\n// spectral palette by wavelength\nvec3 waveSpectrum(float w){\n\n    if(w > 700.0 || w < 400.0){\n        return vec3(0);\n    }\n    \n\tfloat x = fract((w - 400.0)/ 300.0);\n    \n\tvec3 col = spectral_zucconi6(x);\n\n    // Undo gamma\n    col = invGamma(col);\n\n    return col;\n}\n\n\n// physical based diffraction grating\nvec3 diffraction(vec3 rd, vec3 n, vec3 td, vec3 l, float d) {\n\n    vec3 col = vec3(0);\n\n    float cos_ThetaL = dot(l, td);\n    float cos_ThetaV = dot(rd, td);\n   \n    float u = abs(cos_ThetaL - cos_ThetaV);\n    \n    if(u == 0.) {\n        return vec3(0);\n    }\n    \n    for(float i=1.; i < 2.; i++) {\n        float wavelength = u * d / i;\n        col += waveSpectrum(wavelength);\n    }\n    col = clamp(col, vec3(0), vec3(1));\n    return col;\n}\n\nvec3 transform(vec3 p) {\n   p.yz *= rot(PI*.25 + tt);\n   p.yx *= rot(PI*.25 + .4*tt);\n    return p;\n}\n\n\n\nfloat box(vec3 p, vec3 r) {\n  vec3 d = abs(p) - r;\n  return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\n\nfloat smin(float a, float b, float k) {\n  float h = clamp((a-b)/k * .5 + .5, 0.0, 1.0);\n  return mix(a, b, h) - h*(1.-h)*k;\n}\n\nfloat d2hline(vec2 p)\n{\n   float t=max(-1.,min(1.,p.x));\n   p.x-=t;\n   return length(p);\n}\n\n// adapted kurve curve extrusion from aiekick\n// https://www.shadertoy.com/view/lsGfWz\nfloat DE(vec2 p, float a) \n{\n    int iter = 6;\n    float a1 = .7 - .3*SIN(.5*iTime);\n    float a2 = .2 + .0*SIN(.7*iTime);\n    a1 = a2 = .5;\n    float revs = 6.;\n    float ang=(cos(a*revs + 6.28318)*a1+a2) *3.14159/6.;\n\tfloat ca=cos(ang),sa=sin(ang);\n\tvec2 csa=vec2(ca,-sa);\n\tfloat  lambda=mix(.5, .8, SIN(.3*iTime))/(ca*ca);\n    \n    float s1 = 2.;\n\tfloat lscl=s1/lambda;\n    p.y = abs(p.y);\n    \n\tfloat d=1.5, r=dot(p,p);\n\tfor(int i=0; i<iter; i++) \n    {\n\t\tp.x=abs(p.x);\n\t\tp.x-=1.5-lambda;\n\t\tfloat t=1.8*min(0.,dot(p,csa));\n\t\tp-=csa*t;\n\t\tp.x-=lambda;\n\t\tp*=lscl; d*=lscl;\n\t\tp.x+=mix(0.2, 1.4, SIN(iTime));\n\t\tr=dot(p,p);\n\t}\n\treturn d2hline(p)/d - 0.01;\n}\n\n\nfloat fullAtan(vec2 p)\n{\n    return step(0.,p.x)*3.14159 + sign(p.x) * atan(p.x, sign(p.x) * p.y);\n}\n\nvec2 torusUV(vec3 p) {\n\n\tfloat a = fullAtan(p.xy);\n    float at = a + .3*iTime;\n    return vec2(length(p.xy), p.z) - 2.5;\n}\n\n\nfloat map(vec3 p) {   \n  \n\n     p.xy*= rot(.1*iTime);\n     p.yz*= rot(.2*SIN(.3*iTime));\n  \n   // p = kalei(p);\n\n\tfloat a = fullAtan(p.xy);\n    float at = a + .3*iTime;\n    vec2 rev = vec2(length(p.xy), p.z) - 2.5;\n    rev *= mat2(cos(a),-sin(a),sin(a),cos(a));\n    float d = DE(rev, at)*.9;\n    \n    return d;\n}\n\n\nvec3 getNormal(vec3 p) {\n\n    vec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(map(p + eps.xyy) - map(p - eps.xyy),\n                          map(p + eps.yxy) - map(p - eps.yxy),\n                          map(p + eps.yyx) - map(p - eps.yyx)\n                         )\n                     );\n}\n\nfloat gridSurf( in vec3 p){\n\n    p.z += .3*tt;\n    p = abs(mod(p*2., 1.*0.125)-0.0125);\n    \n    float x = min(p.x,min(p.z, p.y))/0.03125;\n\n    return clamp(x, 0., 1.);\n\n\n}\n\n// Standard function-based bump mapping function (from Shane)\nvec3 doBumpMap(in vec3 p, in vec3 nor, float bumpfactor){\n    \n    const float eps = BUMP_EPS;\n    float ref = gridSurf(p);                 \n    vec3 grad = vec3( gridSurf(vec3(p.x-eps, p.y, p.z))-ref,\n                      gridSurf(vec3(p.x, p.y-eps, p.z))-ref,\n                      gridSurf(vec3(p.x, p.y, p.z-eps))-ref )/eps;                     \n          \n    grad -= nor*dot(nor, grad);          \n                      \n    return normalize( nor + bumpfactor*grad );\n\t\n}\n\n// iq's shadow function\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// why not put the raymarcher in a separate function (;\nvec2 raymarch(vec3 ro, vec3 rd, float steps) {\n\n    float mat = 0.,\n          t   = 0.,\n          d   = 0.;\n    vec3 p = ro;\n    for(float i=.0; i<steps; i++) {\n    \n        d = map(p);\n        mat = g_mat;  // save global material\n        \n        if(abs(d) < 0.0001 || t > 100.) break;\n        \n        t += d;\n        p += rd*d;\n    }\n    \n    return vec2(t, mat);\n}\n\n\nfloat n21(vec2 p) {\n      return fract(sin(dot(p, vec2(524.423,123.34)))*3228324.345);\n}\n\n// smooth noise\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0., 1.0);\n    vec2 b = floor(n);\n    vec2 f = mix(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(n21(b), n21(b + d.yx), f.x), mix(n21(b + d.xy), n21(b + d.yy), f.x), f.y);\n}\n\n\n// from iq code\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<1; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0., 1. );\n}\n\nfloat calcAO(vec3 p, vec3 n)\n{\n\tfloat sca = 2.0, occ = 0.0;\n    for( int i=0; i<5; i++ ){\n    \n        float hr = 0.01 + float(i)*0.5/4.0;        \n        float dd = map(n * hr + p);\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    tt = iTime;\n    float zoom = mix(4., 9., SIN(.2*iTime));\n    vec3 ro = vec3(uv*zoom,-5.),\n          rd = vec3(0,0,1.),\n          lp = vec3(3., 0., -5),\n          lp2 = vec3(-3., 0., -5);\n\n    vec3 col;\n       \n    float mat = 0.,\n          t   = 0.,\n          d   = 0.;\n \n\n    vec2 e = vec2(0.0035, -0.0035);\n     \n    // background color\n    vec3 c1 = vec3(0.188,0.255,0.255);\n    vec3 c2 = vec3(0.192,0.122,0.278);\n    \n    // light color\n    vec3 lc1 = vec3(0.745,0.761,0.976);\n    vec3 lc2 = vec3(0.573,0.922,0.969);\n    \n    \n    // currently only one pass\n    for(float i = 0.; i < 1.; i++) {\n        float steps = i > 0. ? 50. : 200.;\n        vec2 rm = raymarch(ro, rd, steps);\n        mat = rm.y;\n        \n        \n        vec3 p = ro + rm.x*rd;\n        \n        vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                                e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n\n        vec2 tuv = torusUV(p);\n\n        n = doBumpMap(vec3(tuv.x, 0., tuv.y*2.*PI), n, .001);\n    \n     \n        if(rm.x < 50.) {\n        \n            vec3 l = normalize(lp-p);\n            vec3 l2 = normalize(lp2-p);\n            float dif = max(dot(n, l), .0);\n            float dif2 = max(dot(n, l2), .0);\n            float spe = pow(max(dot(reflect(-rd, n), -l), .0),40.);\n            \n            float shd=softshadow( p, l, 0.1, 10. );\n       \n\n            float sss = smoothstep(0., 1., map(p + l * .4)) / .4;\n\n            vec3 td = vec3(tuv.x, tuv.y, 0.).yxz;\n            vec3 tangent;\n            vec3 bitangent;\n\n            pixarONB(n, tangent, bitangent);\n            tangent = normalize(tangent);\n            bitangent = normalize(bitangent);\n\n            mat3 tbn = mat3(tangent, bitangent, n);\n            l = normalize(vec3(0., 1, 0));\n            vec3 difr = diffraction(-rd, n, normalize(tbn*td), l, 700.);\n            \n            vec3 n2 = n;\n            n2.xy += noise(p.xy) * .5 - .025;\n            n2 = normalize(n2);\n            float height = atan(n2.y, n2.x);\n\n            vec3 iri = spectral_zucconi6(height*1.11)*smoothstep(.8, .2, abs(n2.z))-.02;\n\n      \n            col += .3*(lc1*dif + lc2*dif2)+ difr + 2.*iri;\n            col *= shd;\n            float ao = calcAO(p, n);\n\n            col = mix(col, col*(1.-ao), 1.);\n      \n            if(mat == 0.) {\n               rd = reflect(rd, n);\n                \n               rd.yz *= rot(PI*.8);\n         \n               vec3 refl = texture(iChannel0, rd).rgb;\n               vec3 refl2 = texture(iChannel2, rd).rgb; // color cube map\n             \n               refl = invGamma(refl);\n               refl2 = invGamma(refl2);\n                \n               refl *= mix(vec3(1), spectral_zucconi6(n.x*n.y*3.), .4); // reflect rainbows too\n               col = mix(col, .7*refl, .5);\n               col += refl2*.25;\n              \n            } \n\n        } else {\n            col =  mix(c1+.2, c2-.2, (pow(dot(uv, uv), .8)))*.5+.1; // background\n            \n            col *= .8;\n            //col = texture(iChannel0, ro).rgb;\n            col = invGamma(col);\n\n        } \n    \n    }\n\n    col += mix(-NOISE_GRANULARITY, NOISE_GRANULARITY, random(uv));\n    col *= mix(.2, 1., (1.5-pow(dot(uv, uv), .5))); // vignette\n    \n    col = pow(col*1.8, vec3(1.2))*1.4;\n    col = gamma(col); // gamma\n    \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Ray direction as color\n    vec3 col = 0.5 + 0.5*rayDir;\n\n    // Output to cubemap\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}