{
    "Shader": {
        "info": {
            "date": "1447576863",
            "description": "first shader ! :) this was a lot of fun. \nUses an effect from an android ndk sample.\nUses an idea from https://www.shadertoy.com/view/Mds3zn\nUses noise function from https://www.shadertoy.com/view/lsf3WH",
            "flags": 0,
            "hasliked": 0,
            "id": "4d3GRr",
            "likes": 3,
            "name": "gnome lands",
            "published": 3,
            "tags": [
                "sines",
                "gnomes",
                "lands"
            ],
            "usePreview": 0,
            "username": "xdaimon",
            "viewed": 959
        },
        "renderpass": [
            {
                "code": "float hash( vec2 p )\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n\t\n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n    vec2 u = smoothstep(vec2(0), vec2(1), f); // similar to u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec4 color_at_uv(vec2 uv, vec2 p, float t)\n{    \n    vec2 rad_x = p - uv * vec2(172., 100.) * vec2(sin(t/10.),cos(t/10.)),\n         rad_y = p - uv * vec2(242., 163.);\n       \n    float ii = dot(sin(rad_x)+sin(rad_y), vec2(1));\n    // ii = abs(ii); // this is cool too.\n\n    vec4 a_col = vec4(.9, 1.,  1,1),\n         b_col = vec4(0, .75,  1,1),\n         c_col = vec4(0,  0,   1,1);\n    \n    float a_bool = step(1.,ii)    +step(.5, ii),\n          b_bool = step(2.*-abs(sin(t/5.)), ii),\n          c_bool = step(3.,                 ii);\n   \n    a_col *= a_bool;\n    b_col *= b_bool;\n    c_col *= c_bool;\n    \n    return a_col + b_col + c_col;\n}\n\n#define chromatic\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    //float t = 1.;\n    vec2 R = iResolution.xy,\n    \tuv = fragCoord.xy/R/7.,\n    \t p = t*(1.+iMouse.xy/R)/5.;\n    \n    // gnome tv\n    //float nse = 1.;\n\n    // gnome carousel\n    float nse = noise((uv+vec2(cos(t/50.), sin(t/50.)))*15.);\n    \n    // gnome family portrait\n    //float nse = noise((1. + abs(sin(t/50.)))*uv*25.);\n    \n    // gnome voyage\n    //float nse = noise((200.+t)*uv);\n    \n#ifdef chromatic\n    float shift = 1.;\n    shift = pow(shift, 3.);\n    shift *= .05;\n    \n    vec3 col;\n    col.r = color_at_uv(nse*(uv+shift), p, t).r;\n    col.g = color_at_uv(nse*(uv)      , p, t).g;\n    col.b = color_at_uv(nse*(uv-shift), p, t).b;\n    col *= (1. - shift * .5);\n\t\n    fragColor = vec4(col,1.);\n#else\n    fragColor = color_at_uv(nse*uv, p, t);\n#endif\n    \n    \n    // Look at the value noise\n    //if (iMouse.w < 0.)\n    //\treturn;\n    //fragColor = vec4(nse,nse,nse,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}