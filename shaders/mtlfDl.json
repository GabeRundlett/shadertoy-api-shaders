{
    "Shader": {
        "info": {
            "date": "1693642008",
            "description": "sweeping variant of SnoopethDuckDuck https://shadertoy.com/view/DtfBDl  and https://www.shadertoy.com/view/ctXBDl\n\nuncomment 8 and 13 to have the nice ring version of https://www.shadertoy.com/view/ctXBDl",
            "flags": 32,
            "hasliked": 0,
            "id": "mtlfDl",
            "likes": 16,
            "name": "cog motion illusion golf+sweep",
            "published": 3,
            "tags": [
                "tiling",
                "2tweets",
                "short",
                "cog"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "// sweeping variant of SnoopethDuckDuck https://shadertoy.com/view/DtfBDl\n//                                  and https://www.shadertoy.com/view/ctXBDl\n\nM;}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "    M*.99;  \n // M*exp(-iTimeDelta/2.); // if you want framerate independant tail\n    for ( int k; k<4; k++ ) {\n       vec2 R = iResolution.xy, F, // F can be replaced by R but for the commented variant\n            u = 2.*(U+U-R)/R.y, \n            I = ceil(u - vec2(k/2,k%2)  );\n       O = max(O,            \n  //              smoothstep(-24./R.y, 24./R.y, .16 - abs(\n                  1.-8.*length(  length( F = I-u )\n                                * cos( mod(atan(F.y,F.x) - (mod(I.x+I.y, 2.) - .5) * iTime  + I.y, 2.1)   + vec2(0,11) )\n                                - vec2(.25, .4)\n              )               )\n  //      ))\n          ;\n   }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define M                                    \\\nvoid mainImage( out vec4 O, vec2 U )         \\\n{ O = texelFetch(iChannel0,ivec2(U),0)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}