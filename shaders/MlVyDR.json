{
    "Shader": {
        "info": {
            "date": "1536723210",
            "description": "Bingo animation using uv offset",
            "flags": 32,
            "hasliked": 0,
            "id": "MlVyDR",
            "likes": 5,
            "name": "Bingo Animation",
            "published": 3,
            "tags": [
                "animation",
                "bingo"
            ],
            "usePreview": 0,
            "username": "pedrolb",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "//float pixelOffset = 1.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = textureLod(iChannel0, uv, 0.9);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 returnLetter(vec2 pos, vec2 uv, float heightPos)\n{\n    vec2 uvClamp = vec2(mix((pos.x + 0.05) / 16.0, (pos.x + 0.95) / 16.0, uv.x),\n                        mix((pos.y + 0.05) / 16.0, (pos.y + 0.95) / 16.0, (uv.y - heightPos/5.0)/0.2));\n    vec4 outColor = vec4(texture(iChannel0, uvClamp));\n    //outColor.a *= step(heightPos/5.0, uv.y) * step((heightPos + 1.0)/5.0, uv.y);\n    return outColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    // O\n    fragColor = returnLetter(vec2(15.0, 11.0), uv, 0.0);\n    // G\n    fragColor = mix(fragColor, returnLetter(vec2(7.0, 11.0), uv, 1.0), step(0.2, uv.y) * step(uv.y, 0.4));\n    // N\n    fragColor = mix(fragColor, returnLetter(vec2(14.0, 11.0), uv, 2.0), step(0.4, uv.y) * step(uv.y, 0.6));\n    // I\n    fragColor = mix(fragColor, returnLetter(vec2(9.0, 11.0), uv, 3.0), step(0.6, uv.y) * step(uv.y, 0.8));\n    // B\n    fragColor = mix(fragColor, returnLetter(vec2(2.0, 11.0), uv, 4.0), step(0.8, uv.y));\n    fragColor.a = step(fragColor.a, 0.51);\n    \n    //fragColor = vec4(texture(iChannel0, uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 LightContribution(\n    vec3 diffuseColor, \n    vec3 specularColor, \n    vec3 ambientColor,\n    float glossiness,\n    vec3 normal,\n    vec3 viewDir,\n    vec3 surfacePos,\n    vec3 lightColor,\n    float lightIntensity,\n    vec3 lightPos\n)\n{\n    vec3 N = normal;\n    vec3 V = -viewDir;\n    vec3 L = normalize(lightPos - surfacePos);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = max(0.0, dot(L, N));\n    float dotRV = max(0.0, dot(R, V));\n    float dotVN = 1.0 - max(0.0, dot(V, N));\n    \n    return \n        (lightIntensity * lightColor *\n            (dotLN * diffuseColor\n             + (1.0 - mix(0.1, 1.0, dotVN * dotVN)) * specularColor * pow(dotRV, glossiness)\n             + texture(iChannel1, R).rgb * dotVN * dotVN * 0.3) * ambientColor * specularColor\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texCoord = fragCoord/iResolution.xy;\n    vec2 texCoordOffset = texCoord - 0.5;\n\tvec2 texCoordAdjust = (texCoord - vec2(0.6, 0.0)) * vec2(5.3, 0.52);\n    vec2 offsetX = texCoordOffset.y * texCoordOffset.y * texCoordOffset.x * vec2(1.2, 0.0);\n    \n    float animTime = mod(iTime, 7.0)/7.0;\n    float animationBingoY = animTime * 14.63;\n    \n    float clampAnimBingoAdd = 4.17;\n    clampAnimBingoAdd += floor(texCoordAdjust.x) + 2.0;\n\n    float letterEndBouncing = 0.07 + mix(animationBingoY, clampAnimBingoAdd, clamp(animationBingoY - clampAnimBingoAdd, 0.0, 1.0));\n\n    vec2 texCoordRow0 = texCoordAdjust + vec2(0.0, (floor(texCoordAdjust.x) + 1.0) * 0.8 + letterEndBouncing);\n    vec2 bingoTextCut = texCoordRow0;\n    vec2 textCutOffset = texCoordRow0 + offsetX;\n    texCoordRow0.x = clamp(texCoordRow0.x, -3.0, 2.0);    \n    texCoordRow0 = fract(texCoordRow0);\t\t\t\t\n    texCoordRow0 += offsetX;\n\n    float pixelOffset = 1.2;\n    vec4 lettersColor = texture(iChannel0, texCoordRow0);\n    \n    float a = -atan(2.0 * abs(texCoordOffset.y) * tan(3.14 / 6.0));\n    if(texCoordOffset.y < 0.0)\n        a = atan(2.0 * abs(texCoordOffset.y) * tan(3.14 / 12.0));\n    \n    mat3 textureNormalRotator = mat3(\n    \tvec3(1.0, 0.0, 0.0),\n        vec3(0.0, cos(a), -sin(a)),\n        vec3(0.0, sin(a), cos(a))\n    );\n    ///*\n    lettersColor.xyz = LightContribution(\n    \tvec3(0.8, 0.2, 0.1), //vec3 diffuseColor, \n        vec3(0.8, 0.7, 0.4), //vec3 specularColor, \n        vec3(1.0, 1.0, 1.0), //vec3 ambientColor,\n        15.0, //float glossiness,\n        textureNormalRotator * normalize(vec3(lettersColor.y, 1.0 - lettersColor.z, -lettersColor.x)), //vec3 normal,\n        normalize(vec3(0.0, 0.0, -5.0) - vec3(texCoordOffset * 3.0 * iResolution.xy / iResolution.y, 1.0)), //vec3 viewDir,\n        vec3(texCoordOffset * 3.0 * iResolution.xy / iResolution.y, 1.0), //vec3 surfacePos,\n        vec3(1.0), //vec3 lightColor,\n        1.50, //float lightIntensity,\n        vec3(0.0, 10.0, -10.0)//vec3 lightPos\n    );\n\t//*/\n    //lettersColor.xyz = vec3(lettersColor.z);\n    lettersColor.a *= step(3.0 + floor(bingoTextCut.x), bingoTextCut.y);\n    lettersColor.xyz += \n        2.0 * \n        lettersColor.xyz * \n        step(abs(texCoordOffset.y), 0.15) * \n        (1.0 - (cos(max(animationBingoY - clampAnimBingoAdd - 1.0, 0.0) * 5.0) * 0.5 + 0.5));\n    \n    // Background\n    vec4 bgMain = vec4(0.9, 0.95, 0.85, 1.0) * step(-3.0, textCutOffset.x) * step(textCutOffset.x, 2.0);\n    float gridMark = min(step(0.01, fract(texCoordRow0.x)), step(fract(texCoordRow0.x), 0.99));\n    float gridShadow = 2.0 * abs(fract(texCoordRow0.x) - 0.5);\n    float gridShadow2 = gridShadow * gridShadow;\n    float finalGrid = gridMark * (1.0 - gridShadow2 * gridShadow2);\n    bgMain.xyz *= finalGrid;\n    \n    fragColor = mix(bgMain, lettersColor, lettersColor.a);\n    fragColor.xyz *= mix(0.3, 1.0, sqrt(1.0 - abs(texCoordOffset.y * 2.0)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}