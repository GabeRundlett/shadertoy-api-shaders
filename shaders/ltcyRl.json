{
    "Shader": {
        "info": {
            "date": "1533607226",
            "description": "Pixels in Buf A are treated as particles and simulated with Verlet integration. Buf A is then used as a LUT for distortion.\nMouse drag moves the attraction effector.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "ltcyRl",
            "likes": 14,
            "name": "Jiggle Distortion",
            "published": 3,
            "tags": [
                "distortion",
                "particles"
            ],
            "usePreview": 1,
            "username": "irwatts",
            "viewed": 946
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2018 Ian Reichert-Watts\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst vec3 COLOR_PRIMARY = vec3(0.79, 0.17, 0.32); // Red Magenta\nconst vec3 COLOR_SECONDARY = vec3(0.0, 1.0, 0.75); // Teal\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 pCoord = texture(iChannel0, uv);\n    vec2 puv = pCoord.xy/iResolution.xy;\n    fragColor = vec4(vec3(0.0),1.0);\n    \n    // Pattern\n    float dist = length(puv-uv)*10.0;\n    const float tiling = 100.0;\n    float val = clamp(abs(sin(puv.x*tiling)+sin(puv.x*tiling*0.1)+sin(puv.y*tiling))-0.5, 0.0, 1.0)+dist;\n    fragColor.rgb += COLOR_PRIMARY*(1.0-val);\n    fragColor.rgb += COLOR_SECONDARY*(val);\n    \n    // Texture Sample\n    fragColor.rgb -= texture(iChannel1, puv).rgb;\n    \n    // Cubemap\n    vec3 start = vec3(uv.x,0.0,uv.y);\n    vec3 end = vec3(puv.x,0.2,puv.y);\n    vec3 dir = normalize(end-start);\n    fragColor.rgb += texture(iChannel2, dir).rgb*(1.0-val)*0.64;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright © 2018 Ian Reichert-Watts\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst float DAMPING = 0.96;\nconst float ATTRACT_INTENSITY = 80.0;\nconst float ATTRACT_FALLOFF_DIST = 0.8;\nconst float ATTRACT_FALLOFF_EXP = 2.0;\nconst float RETURN_INTENSITY = 200.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x < 1.0 && fragCoord.y < 1.0)\n    {\n        // Use corner pixel for data\n        vec4 data = texture(iChannel0, 0.5/iResolution.xy, -100.0);\n        // Cache delta time for verlet\n        data.x = iTimeDelta;\n        // Attractor\n        if (iMouse.z > 0.0)\n        {\n            data.yz = iMouse.xy;\n        }\n        else\n        {\n            float time = sin(sin(iTime*0.1)*3.0)*80.0;\n            data.yz = vec2((cos(time)*0.42)*iResolution.y+iResolution.x*0.5, (sin(time)*0.8+1.0)*iResolution.y*0.5);\n        }\n        fragColor = data;\n        return;\n    }\n    vec4 pCoord;\n    if (iFrame == 0)\n    {\n        pCoord.xy = fragCoord;\n        pCoord.zw = pCoord.xy;\n    }\n    else\n    {\n        // Verlet\n        vec4 data = texture(iChannel0, 0.5/iResolution.xy, -100.0);\n        vec2 uv = fragCoord/iResolution.xy;\n        pCoord = texture(iChannel0, uv);\n        vec2 deltaCoord = (pCoord.xy-data.yz);\n        float falloffDist = ATTRACT_FALLOFF_DIST*iResolution.y;\n        float attractFalloff = pow(1.0 - clamp(length(deltaCoord)/falloffDist, 0.0, 1.0), ATTRACT_FALLOFF_EXP);\n        vec2 attractionAcc = deltaCoord*attractFalloff*ATTRACT_INTENSITY;\n        vec2 returnAcc = (fragCoord-pCoord.xy)*RETURN_INTENSITY;\n        vec2 acc = attractionAcc + returnAcc;\n        vec2 newCoord = pCoord.xy+(pCoord.xy-pCoord.zw)*DAMPING*(iTimeDelta/data.x)+acc*iTimeDelta*iTimeDelta;\n\t\tpCoord.zw = pCoord.xy;\n        pCoord.xy = newCoord;\n    }\n    fragColor = pCoord;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}