{
    "Shader": {
        "info": {
            "date": "1465242661",
            "description": "click with mouse for control the cam",
            "flags": 32,
            "hasliked": 0,
            "id": "4syXRK",
            "likes": 5,
            "name": "Ray Marching Experiment 50",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "50"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 925
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n/*\nshader based on https://www.shadertoy.com/view/4stXR7\nantialiased code from shane simpleAA : https://www.shadertoy.com/view/4d3SWf\n*/\n\nvec3 tex(vec2 uv, vec2 off)\n{\n    return clamp(texture(iChannel0,uv + off*0.001).rgb, 0., 1.);\n}\n\nvoid mainImage( out vec4 f, vec2 g )\n{\n    vec2 uv = g/iResolution.xy;\n    \n    vec3 col = tex(uv, vec2(0,0));\n    col += tex(uv, vec2(-1,-1));\n    col += tex(uv, vec2(-1,1));\n    col += tex(uv, vec2(1,-1));\n    col += tex(uv, vec2(1,1));   \n    col /= 5.;\n\n    f = vec4(col, 1.); \n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n    \nmat2 m;\nmat2 m2;\n\nfloat func(vec2 p)\n{\n    p = fract(p/70.) - .5;\n    return min(abs(p.x), abs(p.y)) + 0.1;\n}\n\nvec3 effect(vec2 p)\n{\n\tp *= m2*.8;\n    return vec3(min(min(func(p), func(p*m)), func(p*m2))/.6);\n}\n\nvec4 displacement(vec3 p)\n{\n    vec3 col = 1.-effect(p.xz*0.8);\n   \tcol = clamp(col, -.5, 1.);\n    float dist = dot(col,vec3(0.05));\n\tcol = step(col, vec3(0.81));\n    return vec4(dist,col);\n}\n\nvec4 map(vec3 p)\n{\n    vec4 disp = displacement(p);\n\tfloat l = length(p) - 4.;\n    return vec4(max(-l + 0.2, l) - disp.x, disp.yzw);\n}\n\n///////////////////////////////////////////\n//FROM IQ Shader https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n///////////////////////////////////////////\nfloat march(vec3 ro, vec3 rd, float rmPrec, float maxd, float mapPrec)\n{\n    float s = rmPrec;\n    float d = 0.;\n    for(int i=0;i<200;i++)\n    {      \n        if (d*d/s>1e5||s>maxd) break;\n        s = map(ro+rd*d).x;\n        d += s*0.2;\n    }\n    return d;\n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tm = mat2(7, 0, 0, 7);\n\tm2 = m*m;\n    \n    vec2 s = iResolution.xy;\n\tvec2 g = fragCoord;\n    \n\tfloat time = iTime*0.25;\n    float cam_a = time; // angle z\n    \n    float cam_e = 3.3; // elevation\n    float cam_d = 1.0; // distance to origin axis\n    \n    if (iMouse.z > 0.) \n    {\n        cam_e = 5. * iMouse.x/s.x;\n        cam_d = 10. * iMouse.y/s.y;\n    }\n    \n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); //Change camere view here\n  \tfloat li = 0.6; // light intensity\n    float prec = 0.00001; // ray marching precision\n    float maxd = 50.; // ray marching distance max\n    float refl_i = 0.45; // reflexion intensity\n    float refr_a = 0.7; // refraction angle\n    float refr_i = 0.8; // refraction intensity\n    float bii = 0.35; // bright init intensity\n    float marchPrecision = 0.5; // ray marching tolerance precision\n    \n    vec2 uv = (g+g-s)/s.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = march(ro, rd, prec, maxd, marchPrecision);\n    \n    if (d<maxd)\n    {\n        vec2 e = vec2(-1., 1.)*0.005; \n    \tvec3 p = ro+rd*d;\n        vec3 n = calcNormal(p, 0.00001);\n        \n        b=li;\n        \n        vec3 reflRay = reflect(rd, n);\n\t\tvec3 refrRay = refract(rd, n, refr_a);\n        \n        vec3 cubeRefl = texture(iChannel0, reflRay).rgb * refl_i;\n        vec3 cubeRefr = texture(iChannel0, refrRay).rgb * refr_i;\n        \n        col = cubeRefl + cubeRefr + pow(b, 15.);\n        \n       \t// lighting        \n        float occ = calcAO( p, n );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, reflRay.y );\n        float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( reflRay, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( p, lig, 0.02, 2.5 );\n       \tdom *= softshadow( p, reflRay, 0.02, 2.5 );\n\n\t\tvec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n        \n       \tcol = mix(col, map(p).yzw, 0.5);\n    }\n    else\n    {\n        b+=0.1;\n        col = texture(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col;\n\t\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}