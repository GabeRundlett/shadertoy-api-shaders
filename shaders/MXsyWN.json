{
    "Shader": {
        "info": {
            "date": "1726211729",
            "description": "Visualization of Hopf Fibration with Manifold Explorations",
            "flags": 0,
            "hasliked": 0,
            "id": "MXsyWN",
            "likes": 2,
            "name": "Visualization of Hopf Fibration ",
            "published": 3,
            "tags": [
                "paralleltransport"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 66
        },
        "renderpass": [
            {
                "code": "// Author: OpenAI Assistant\n// Title: Visualization of Hopf Fibration with Manifold Explorations\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n\n\n// Constants\nconst float PI = 3.14159265359;\n\n// Camera setup\nvec3 cameraPos = vec3(0.0, 0.0, 5.0);\nvec3 lightPos = vec3(5.0, 2.0, 5.0);\n\n// Quaternion multiplication\nvec4 quatMul(vec4 q1, vec4 q2) {\n    return vec4(\n        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,\n        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,\n        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,\n        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z\n    );\n}\n\n// Stereographic projection from S^3 to R^3\nvec3 stereographicProjection(vec4 q) {\n    return q.xyz / (1.0 - q.w);\n}\n\n// Hopf fibration mapping from S^3 to S^2\nvec3 hopfMap(vec4 q) {\n    float numerator = 2.0 * (q.x * q.z + q.w * q.y);\n    float denominator = q.w * q.w + q.x * q.x - q.y * q.y - q.z * q.z;\n    float theta = atan(numerator, denominator);\n    float phi = asin(2.0 * (q.w * q.x - q.y * q.z));\n\n    // Convert spherical coordinates to Cartesian coordinates\n    vec3 p;\n    p.x = cos(phi) * cos(theta);\n    p.y = cos(phi) * sin(theta);\n    p.z = sin(phi);\n    return p;\n}\n\n// Main rendering function\nvec3 render(vec3 ro, vec3 rd) {\n    vec3 color = vec3(0.0);\n\n    int numFibers = 100;\n    for (int i = 0; i < numFibers; i++) {\n        float t = iTime * 0.1 + float(i) * (2.0 * PI / float(numFibers));\n        // Generate a point on S^3 using quaternions\n        vec4 q = vec4(\n            sin(t),\n            cos(t),\n            sin(t * 1.7),\n            cos(t * 2.3)\n        );\n        q = normalize(q);\n\n        // Apply rotation inspired by higher-dimensional mapping\n        vec4 rotation = vec4(\n            sin(iTime * 0.5),\n            cos(iTime * 0.2),\n            sin(iTime * 0.3),\n            cos(iTime * 0.1)\n        );\n        rotation = normalize(rotation);\n        q = quatMul(q, rotation);\n\n        // Map using Hopf fibration\n        vec3 p = hopfMap(q);\n\n        // Project to 3D space\n        vec3 pos = p;\n\n        // Calculate distance from ray origin to point\n        vec3 toPoint = pos - ro;\n        float t_ray = dot(toPoint, rd);\n        if (t_ray > 0.0) {\n            vec3 closestPoint = ro + rd * t_ray;\n            float dist = length(closestPoint - pos);\n            float radius = 0.05;\n\n            // If the ray passes close to the point, add color\n            if (dist < radius) {\n                float intensity = 1.0 - dist / radius;\n                vec3 fiberColor = 0.5 + 0.5 * sin(vec3(float(i) * 0.1 + iTime, float(i) * 0.2 - iTime, float(i) * 0.3 + iTime));\n                color += fiberColor * intensity;\n            }\n        }\n    }\n\n    // Lighting and color adjustments\n    color = clamp(color, 0.0, 0.96);\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Ray origin and direction\n    vec3 ro = cameraPos;\n    vec3 rd = normalize(vec3(uv, -2.9));\n\n    // Trace ray\n    vec3 color = render(ro, rd);\n\n    // Gamma correction\n    color = pow(color, vec3(1.0 / 2.9));\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}