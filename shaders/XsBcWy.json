{
    "Shader": {
        "info": {
            "date": "1493493046",
            "description": "I've added a seed hack to the ashima's simplex noise 2d code. Check the comments in the code for some info about seeding issue.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsBcWy",
            "likes": 1,
            "name": "Seeded Ashima Simplex Noise 2D",
            "published": 3,
            "tags": [
                "noise",
                "simplex",
                "noise2d",
                "ashima",
                "seed"
            ],
            "usePreview": 0,
            "username": "aft",
            "viewed": 936
        },
        "renderpass": [
            {
                "code": "// A Note from @aft: \n// On the page linked below, you will see a discussion that reveals \n// Stefan Gustavson's opinion on adding a seed support. He himself \n// says that it has a performance cost and this shall be done by \n// offsetting coords. This code is a coordinate offset hack.\n//\n// Use seed salt to prevent artifacts. \n// \n// Remember that it's just a hack. A better version, which has a \n// built in seed support may be created. I just couldn't manage\n// to do it no matter what i tried.\n//\n// Seed hack added by @aft.\n// Original shader : https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n// Thank you Stefan Gustavson for all the work you have done.\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n  \n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ) )\n\t\t                   + i.x + vec3(0.0, i1.x, 1.0 ) );\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// Original code ends here.\n\n\n// Salt is added to limit the x,y values. No matter what you input,\n// it returns a float around ~ 0-6000.\n// I don't claim it to be undredictable, fast and uniform. \n// Feel free to adjust.\nfloat salt(float seed) {\n    float a = mod(seed, 5901.);\n    float b = mod(a,2.)==0. ? -0.01 : 0.11; \n\treturn a+4179./sqrt(a*5.)*b+1001.*a/seed;\n}\n\n\nfloat getnoise(int octaves, float persistence, float freq, vec2 coords) {\n\n    float amp= 1.; \n    float maxamp = 0.;\n    float sum = 0.;\n\n    for (int i=0; i < octaves; ++i) {\n        sum += amp * snoise(coords*freq); \n        freq *= 2.1;\n        maxamp += amp;\n        amp *= persistence;\n    }\n    \n    return (sum / maxamp) * .5 + .5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float seed = salt(11111.); // type any float here as a seed.\n    \n    \n\tvec2 p = fragCoord.xy/iResolution.x;\n    \n    float value;\n    if (p.x <= .5) {\n    \tvalue = getnoise(8, .65, 6., vec2(p)+vec2(seed));\n    } else {\n    \tvalue = getnoise(1, 1., 16., p+vec2(seed));\n    }\n    value *= smoothstep(0.0, 0.005, abs(0.5-p.x)); // hello, panda\n\t\n\tfragColor = vec4(vec3(value), 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}