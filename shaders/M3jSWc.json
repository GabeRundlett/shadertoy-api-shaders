{
    "Shader": {
        "info": {
            "date": "1711166257",
            "description": "A flute synthesizer with a rug pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "M3jSWc",
            "likes": 6,
            "name": "Red and black rug (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\n    float scale = 1.5;\n\n\nvoid transform(inout vec2 uv, inout vec2 t2, inout vec3 col,inout float c1){\n\n        \n        uv = (uv+t2)/scale;\n        uv = ((vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        \n        t2 = triangle_wave(uv+.5);\n        uv =\n            t2/2.-triangle_wave(uv.yx)\n            //1./2.-triangle_wave(uv.yx)\n        ;\n        {t2.x = (t2.x-1.); }\n        //{t2.x = (t2.x+1.*sign(uv.y)); }\n        if(uv.x>uv.y)\n        uv.y += 1./4.;\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        transform(uv,t2,col,c1);\n        c1 =\n            max(abs(t2.y-t2.x)/2.,c1)\n            //max(sign(t2.x-t2.y)/2.,c1)\n        ;\n        c1 =\n            max(1.-abs(2.*c1-1.),0.)\n        ;\n        col.x =\n            abs(c1-col.x)/2.\n        ;\n    }\n    return col*2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 6.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1,1.0);\n    //fragColor = pow(fragColor ,vec4(1./1.8)); //gamma correction\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/mtSBzV\nfloat fmod(float a, float b){\n    float\n    t1 =\n        mod(floor(b/2.),2.)    ,\n    a1 =\n        floor(a+t1),\n    a2 = floor(mod(a1-mod(floor(a1/8.+t1),3./2.),3.)),\n    a3 =\n        mod(a1,4.)\n        //mod(a1-mod(floor(a1/8.+t1),2.),4.)\n    ;\n    return\n        mod(a1-a2-a3,b)\n    ;\n}\n\nfloat prime_rhythm(float time){\n    return (1.+fmod(time/4.,2.))/(1.+fmod(time/2.,2.));\n}\n\n#define fract1(a) (1.-pow(fract(-a),2.))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 oud(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 oud1(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,float duration){\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time)\n  ,\n  tempo2 =\n      prime_rhythm(time+7.)\n  ,t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 =\n       fmod(t4,2.)\n  ,\n  t5 = t*2./tempo2,\n  t3 =\n      (1.+fmod(t5,2.))\n  ,\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6*2.,s1/2.)/2.),\n  m2 =\n      1. + fmod(t/t3/2.,s1/2.)\n      //1. + fmod(t/t3/2.+floor(time/20.),s1/2.)\n  ,note= m3+m2-t1*4.,f1=fract1(t/tempo2)\n  ;\n  vec2 a=\n      -vec2(log(1./128.*2.+f1/4./duration))\n  ,\n  nb =\n      t*vec2(pow(2.,note/7.+scale))\n  ;\n  return\n      //sitar\n      //oud(a,nb)-oud(a*a,nb)/4.\n      \n      oud(a,nb*2.)*2.-oud(a,nb/2.)/2.-oud(a,nb)\n      //oud(a,nb*2.)-oud(a/2.,nb)/2.-oud(a/4.,nb)/4.\n  ;\n}\n\nvec2 mainSound1(int samp, float time,float scale){\n    return mainSound1(samp,time,scale,1.);\n}\n\nvec2 flute(int a,float b,float c){\n    return\n        //mainSound1(a,b*2.,c,1.)\n        (mainSound1(a,b*2.,c,2.)-mainSound1(a,b*2.,c,1.))\n    ;\n}\n\nvec2 mainSound(int a,float b){\n    float scale = 5.5;\n    return\n        //flute(a,b/4.,6.)\n        flute(a,b/4.,7.)+flute(a,b/4.,6.)/2.\n    ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}