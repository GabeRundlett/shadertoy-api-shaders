{
    "Shader": {
        "info": {
            "date": "1640632601",
            "description": "CLICK AND DRAG.  Unsuccessful implementation of lattice fluid sim, still cool though.  Hue controlled by v.",
            "flags": 32,
            "hasliked": 0,
            "id": "sltGDB",
            "likes": 1,
            "name": "Interactive Weirdness",
            "published": 3,
            "tags": [
                "fluids"
            ],
            "usePreview": 0,
            "username": "kp1197",
            "viewed": 69
        },
        "renderpass": [
            {
                "code": "\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel2, fragCoord / iResolution.xy);\n }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nFlow Map\n*/\n\n\n\nconst float fade = 0.9;\nconst float eps = 1e-3;\n\n\n\nvec2 sign_preserving_max(vec2 a, vec2 b) {\n\n    float x1 = a.x;\n    float y1 = a.y;\n    float x2 = b.x;\n    float y2 = b.y;\n    \n    float x = max(abs(x1),abs(x2));\n    x *= (x == abs(x1)) ? sign(x1) : sign(x2);\n    \n    float y = max(abs(y1),abs(y2));\n    y *= (y == abs(y1)) ? sign(y1) : sign(y2);\n    \n    return vec2(x,y);\n}\n\nvec2 get_mouse_perturbation(in vec2 fragCoord) {\n    // read mouse variables\n    bool draw      = texelFetch(iChannel1, DRAW_ADDR, 0).x > 0.;\n    vec2 m2 = texelFetch(iChannel1, M2_POS_ADDR, 0).xy;\n    vec2 m1 = texelFetch(iChannel1, M1_POS_ADDR, 0).xy;\n    vec2 m0 = texelFetch(iChannel1, M0_POS_ADDR, 0).xy;\n\n    return get_mouse_perturbation_calcuation(fragCoord, draw, m2, m1, m0);\n}\n\nfloat weight_closeness(vec2 x) {\n    return (1. + eps) / (eps+ length(x) );\n}\n\nvec2 getAdvectedV(in vec2 fragCoord) {\n    \n    // sample the velocities around this point\n    vec2 va = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vb = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vc = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1, 1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vd = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 ve = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vf = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0, 1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vg = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vh = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vi = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1, 1)) % ivec2(iResolution.xy), 0).xy;\n\n    // where the neighboring grid positions end up after the timestep\n    vec2 pa = (va + vec2(-1.,-1.));\n    vec2 pb = (vb + vec2(-1,  0.));\n    vec2 pc = (vc + vec2(-1., 1.));\n    vec2 pd = (vd + vec2( 0.,-1.));\n    vec2 pe = (ve + vec2( 0., 0.));\n    vec2 pf = (vf + vec2( 0., 1.));\n    vec2 pg = (vg + vec2( 1.,-1.));\n    vec2 ph = (vh + vec2( 1., 0.));\n    vec2 pi = (vi + vec2( 1., 1.));\n    \n    /*\n    float wa = max(eps,1.-length(pa));\n    float wb = max(eps,1.-length(pb));\n    float wc = max(eps,1.-length(pc));\n    float wd = max(eps,1.-length(pd));\n    float we = max(eps,1.-length(pe));\n    float wf = max(eps,1.-length(pf));\n    float wg = max(eps,1.-length(pg));\n    float wh = max(eps,1.-length(ph));\n    float wi = max(eps,1.-length(pi));\n    */\n    float wa = weight_closeness(pa);\n    float wb = weight_closeness(pb);\n    float wc = weight_closeness(pc);\n    float wd = weight_closeness(pd);\n    float we = weight_closeness(pe);\n    float wf = weight_closeness(pf);\n    float wg = weight_closeness(pg);\n    float wh = weight_closeness(ph);\n    float wi = weight_closeness(pi);\n    \n    \n    float denom = max(eps,wa+wb+wc+wd+we+wf+wg+wh+wi);\n    return ((wa*va + wb*vb + wc*vc + wd*vd + we*ve + wf*vf + wg*vg + wh*vh + wi*vi))/ denom;\n    \n    //return (va+vb+vc+vd+ve+vf+vg+vh+vi)/9.;\n}\n\nfloat getDivergence(in vec2 fragCoord) {\n    \n    // sample the velocities around this point\n    vec2 va = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vb = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vc = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1, 1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vd = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 ve = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vf = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0, 1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vg = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vh = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vi = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1, 1)) % ivec2(iResolution.xy), 0).xy;\n\n    return divergence_calculation(va,vb,vc,vd,ve,vf,vg,vh,vi);\n    \n    //return (va+vb+vc+vd+ve+vf+vg+vh+vi)/9.;\n}\n\nvec2 bound(vec2 x) {\n    return length(x) > 1. ? normalize(x) : x;\n}\n\nvec2 get_random_v(in vec2 fragCoord) {\n    return voronoi_f1_colors( fragCoord, VORONOI_RANDOMNESS, VORONOI_EXPONENT, VORONOI_ANGLE).xy - 0.5;\n}\n\nvec2 camGradient(in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 e = vec2(0.5/iResolution.x, 0.);\n    \n    // WEBCAM\n    #if GRADIENT_SOURCE == 0\n        \n        vec2 grad = vec2(length(texture(iChannel3, SCALE * uv + e.xy + ANIMATE).xyz) - length(texture(iChannel3, SCALE * uv - e.xy + ANIMATE).xyz),\n                length(texture(iChannel3, SCALE * uv + e.yx + ANIMATE).xyz) - length(texture(iChannel3, SCALE * uv - e.yx + ANIMATE).xyz));\n    \n    // VORONOI\n    #elif GRADIENT_SOURCE == 1\n        vec2 grad = vec2(length(voronoi_f1_colors( uv + e.xy, VORONOI_RANDOMNESS, VORONOI_EXPONENT, VORONOI_ANGLE ).xyz) -\n            length(voronoi_f1_colors( uv - e.xy, VORONOI_RANDOMNESS, VORONOI_EXPONENT, VORONOI_ANGLE ).xyz),\n            length(voronoi_f1_colors( uv + e.yx, VORONOI_RANDOMNESS, VORONOI_EXPONENT, VORONOI_ANGLE ).xyz) -\n            length(voronoi_f1_colors( uv - e.yx, VORONOI_RANDOMNESS, VORONOI_EXPONENT, VORONOI_ANGLE ).xyz));\n    // IMAGE\n    #else\n        // TODO: WRAP\n        vec2 grad = vec2(length(texture(iChannel2, uv + e.xy).xyz) - length(texture(iChannel2, uv - e.xy).xyz),\n                length(texture(iChannel2, uv + e.yx).xyz) - length(texture(iChannel2, uv - e.yx).xyz));    \n    \n    #endif\n    return grad / 2.;\n}\n\nfloat camCurl(in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 e = vec2(0.5/iResolution.x, 0.);\n    \n    float dv2dx = texture(iChannel0, uv + e.xy).y - texture(iChannel0, uv - e.xy).y;\n    float dv1dy = texture(iChannel0, uv + e.yx).x - texture(iChannel0, uv - e.yx).x;\n    return dv2dx - dv1dy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    // TRAIT: -1. * \n    vec2 cam_grad = IMAGE_GRADIENT_SIGN * camGradient(fragCoord);\n    \n\n\n    // advection step\n    vec2 v = getAdvectedV(fragCoord);\n    \n    // divergence\n    float d = getDivergence(fragCoord);\n    \n    // todo: curl\n    float cam_curl = camCurl(fragCoord);\n\n    vec2 perturb = clamp(get_mouse_perturbation(fragCoord), -1.,1.);\n    \n    // TRAIT: oscillate?\n    //v = (v + perturb + clamp(sin(2.*iTime),0.,1.) * cam_grad);\n    \n    v = v + perturb - (cam_grad + 0.5*(cam_curl));\n    \n    v = bound(v);\n    \n    fragColor = vec4(v,0.,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nMouse tracking / interactivity\n*/\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec4 m2_mouse  = texelFetch(iChannel1, M2_POS_ADDR, 0);\n    vec4 m1_mouse  = texelFetch(iChannel1, M1_POS_ADDR, 0);\n    vec4 m0_mouse  = texelFetch(iChannel1, M0_POS_ADDR, 0);\n\n    \n    bool draw = (iMouse.z > 0.) && (m2_mouse.z > 0.) && (m1_mouse.z > 0.);\n\n    if (ivec2(fragCoord) == M2_POS_ADDR) {\n        //vec2 prevMouse = texelFetch(iChannel1, MOUSE_POS_ADDR, 0).xy;\n        fragColor = vec4(iMouse.xyz, 0.);\n    }\n    \n    if (ivec2(fragCoord) == M1_POS_ADDR) {\n        fragColor = m2_mouse;\n    }\n    \n    if (ivec2(fragCoord) == M0_POS_ADDR) {\n        fragColor = m1_mouse;\n    }\n\n    \n    if (ivec2(fragCoord) == DRAW_ADDR) {\n        fragColor = draw ? vec4(1.) : vec4(0.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n\nvec2 get_mouse_perturbation(in vec2 fragCoord) {\n    // read mouse variables\n    bool draw      = texelFetch(iChannel1, DRAW_ADDR, 0).x > 0.;\n    vec2 m2 = texelFetch(iChannel1, M2_POS_ADDR, 0).xy;\n    vec2 m1 = texelFetch(iChannel1, M1_POS_ADDR, 0).xy;\n    vec2 m0 = texelFetch(iChannel1, M0_POS_ADDR, 0).xy;\n\n    return get_mouse_perturbation_calcuation(fragCoord, draw, m2, m1, m0);\n}\n\nfloat getDivergence(in vec2 fragCoord) {\n    \n    // sample the velocities around this point\n    vec2 va = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vb = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vc = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2(-1, 1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vd = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 ve = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vf = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 0, 1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vg = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1,-1)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vh = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1, 0)) % ivec2(iResolution.xy), 0).xy;\n    vec2 vi = texelFetch(iChannel0, (ivec2(fragCoord) + ivec2( 1, 1)) % ivec2(iResolution.xy), 0).xy;\n\n    return divergence_calculation(va,vb,vc,vd,ve,vf,vg,vh,vi);\n    \n    //return (va+vb+vc+vd+ve+vf+vg+vh+vi)/9.;\n}\n\nvec2 get_v(in vec2 fragCoord) {\n    return texture(iChannel0, fragCoord / iResolution.xy).xy;\n}\n\nfloat shade(vec2 fragCoord) {\n    float a = length(get_v(fragCoord + vec2(1,0))); //voronoi_f1_colors( 10.* (fragCoord + vec2(0,1)) / iResolution.xy, 1.0, 2.0, 3.14159/4.).w;\n    float b = length(get_v(fragCoord + vec2(-1,0)));//voronoi_f1_colors( 10.* (fragCoord + vec2(0,-1)) / iResolution.xy, 1.0, 2.0, 3.14159/4.).w;\n    float c = length(get_v(fragCoord + vec2(0,1)));//voronoi_f1_colors( 10.* (fragCoord + vec2(1,0)) / iResolution.xy, 1.0, 2.0, 3.14159/4.).w;\n    float d = length(get_v(fragCoord + vec2(0,-1)));//voronoi_f1_colors( 10.* (fragCoord + vec2(-1,0)) / iResolution.xy, 1.0, 2.0, 3.14159/4.).w;\n    vec2 grad = normalize(vec2((a-b)/2., (c-d)/2.));\n    vec2 light = vec2(cos(iTime),sin(iTime));\n    return 0.5 + 0.5 *dot(grad,light);\n    //return 5.*a;\n}\n\n\n// from https://www.shadertoy.com/view/MsjXRt\n// todo: my own implementation\nvec3 HueShift (in vec3 Color, in float Shift)\n{\n    vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n    \n    vec3 U = Color-P;\n    \n    vec3 V = cross(vec3(0.55735),U);    \n\n    Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n    \n    return Color;\n}\n\nfloat camCurl(in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 e = vec2(0.5/iResolution.x, 0.);\n    \n    float dv2dx = texture(iChannel0, uv + e.xy).y - texture(iChannel0, uv - e.xy).y;\n    float dv1dy = texture(iChannel0, uv + e.yx).x - texture(iChannel0, uv - e.yx).x;\n    return dv2dx - dv1dy;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // sample flow map\n    vec2 flow = texture(iChannel0, (fragCoord)/iResolution.xy).xy;\n    \n    // get some vector quantities\n    float d = getDivergence(fragCoord);\n    float divergence = clamp(-d, 0.,1.);\n    float convergence = clamp(d, 0., 1.);\n\n    // use the flowmap to offset sampling into the previous frame\n    vec4 prev = texture(iChannel2, vec2(fragCoord - flow) / iResolution.xy);\n    \n    // TRAITS: 0.99, 0.999\n    prev*=0.9999;\n    \n    \n    #if IMAGE_SOURCE == 0\n    vec4 colors = texture(iChannel3, SCALE * (fragCoord / iResolution.xy) + ANIMATE);\n    #else\n    vec4 colors =  0.3*voronoi_f1_colors( VORONOI_UV_SCALE * fragCoord / iResolution.xy + iTime, VORONOI_RANDOMNESS, VORONOI_EXPONENT, VORONOI_ANGLE);    \n    #endif\n\n    // TRAIT: 1.- is a trait\n    //\n\n    vec3 result = clamp(0.15*divergence * colors.xyz + (1.-0.15*divergence) * prev.xyz, 0., 1.);\n    \n    float mouse_movement = length(get_mouse_perturbation(fragCoord));\n    \n    //result = HueShift(result, length(result)*30.);\n    \n    result = (1.+0.01*length(flow))*HueShift(clamp(result,0.,1.), 0.005*length(flow));\n\n    float cam_curl = camCurl(fragCoord);\n\n    //vec3 result = shade(fragCoord) * mix(prev.xyz, colors.xyz, divergence);\n    fragColor = vec4(result,colors.w) - 0.1 * abs(cam_curl);// vec4(divergence,divergence,divergence,1.);\n    //}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define IMAGE_SOURCE 0\n#define GRADIENT_SOURCE 0\n#define IMAGE_GRADIENT_SIGN -0.25\n#define SCALE (0.2)\n\n#define VORONOI_EXPONENT 2.0\n#define VORONOI_RANDOMNESS 1.0\n#define VORONOI_ANGLE 3.14159/4.\n#define VORONOI_UV_SCALE 10.\n\n//#define ANIMATE (0.5 * vec2(cos(0.15*iTime), sin(0.15*iTime)))\n#define ANIMATE vec2(0.,abs(0.01  * iTime))\n\n// IDEAS: feed the image gradient back into the flow map\n\nconst ivec2 MOUSE_DOWN_ADDR = ivec2(2);\nconst ivec2 DRAW_ADDR       = ivec2(3);\nconst ivec2 M2_POS_ADDR = ivec2(4);\nconst ivec2 M1_POS_ADDR = ivec2(5);\nconst ivec2 M0_POS_ADDR = ivec2(6);\n\n// per IQ: https://iquilezles.org/articles/distfunctions2d\nfloat segmentDist(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// https://thebookofshaders.com/12/\nvec2 random2f( vec2 p ) {\n    return fract(\n        sin(\n            vec2(\n                dot(p,vec2(127.1,311.7)),\n                dot(p,vec2(269.5,183.3)))\n        )*(43758.5453)\n    );\n}\n\nfloat veronoi_metric( in vec2 r, float exponent, float angle ) {\n    // manhattan\n    //return dot(abs(r), vec2(1.));\n    // euclidean\n    //return dot(r,r);\n    return dot(pow(abs(r),vec2(exponent)), 0.01+abs(vec2(cos(angle), sin(angle))));\n}\n\n\nvec4 voronoi_f1_colors( in vec2 x, float randomness, float power, float angle )\n{\n    vec2 p = floor( x );\n    vec2  f = fract( x );\n\n    float res = 8.0;\n    vec3 res_col = vec3(0.);\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 b = vec2( i, j );\n        vec2 point = random2f( vec2(p + b) );\n        vec2  r = vec2( b ) - f + randomness*point;\n        float d = veronoi_metric( r, power, angle);\n        vec3 col = vec3(point,1.);\n\n        res_col = (d < res) ? col : res_col;\n        res = min( res, d );\n    }\n    return vec4(res_col, sqrt( res ));\n}\n\nfloat divergence_calculation(vec2 va, vec2 vb, vec2 vc, vec2 vd, vec2 ve, vec2 vf, vec2 vg, vec2 vh, vec2 vi) {\n\n    float divergence = \n    dot(normalize(va), -0.707*vec2(-1,-1)) +\n    dot(normalize(vb), -vec2(-1, 0)) +\n    dot(normalize(vc), -0.707*vec2(-1, 1)) +\n    dot(normalize(vd), -vec2( 0,-1)) +\n    dot(normalize(ve), -vec2( 0, 0)) +\n    dot(normalize(vf), -vec2( 0, 1)) +\n    dot(normalize(vg), -0.707*vec2( 1,-1)) +\n    dot(normalize(vh), -vec2( 1, 0)) +\n    dot(normalize(vi), -0.707*vec2( 1, 1));\n    \n    return (divergence) / 1.;\n}\n\n\nvec2 get_mouse_perturbation_calcuation(in vec2 fragCoord, bool draw, vec2 m2, vec2 m1, vec2 m0) {\n    \n\n    // use some distance fields to calculate brush size\n    float dist1 = segmentDist(fragCoord, m2, m1);\n    float dist2 = segmentDist(fragCoord, m1, m0);\n    float dist = min(dist1,dist2);\n    vec2 mouse_v = m2-m1;\n    bool brush = dist < 15.;\n    bool moving = length(mouse_v) > 0.;\n    \n    // update the color - in the future this will be an IMPULSE\n    float strength = (1./(dist+1.));    \n    vec2 perturb = (draw && brush && moving) ? strength*mouse_v : vec2(0.);\n    \n    return perturb;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}