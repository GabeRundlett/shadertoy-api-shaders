{
    "Shader": {
        "info": {
            "date": "1655673345",
            "description": "License CC0: \"Rasterbars\" in 2022\nWas tinkering with recreating the classic raster bar effect from 1980/1990\nHaving a _bit_ more compute power I need to put a twist on it obviously\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NdyyW3",
            "likes": 36,
            "name": "\"Rasterbars\" in 2022",
            "published": 3,
            "tags": [
                "rasterbars"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 727
        },
        "renderpass": [
            {
                "code": "// License CC0: \"Rasterbars\" in 2022\n//  Was tinkering with recreating the classic raster bar effect from 1980/1990\n//  Having a _bit_ more compute power I need to put a twist on it obviously\n\n\n#define PI          3.141592654\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\n// ---==> Some parameters to play around with <==---\n// Undefine to use old specular lighting\n#define COLORBURN\n#define SKYDOME\nconst int   bars     = 7;\nconst mat2  trans    = ROT(PI/9.0);\nconst float twist    = 1.0;\nconst float dist     = 0.5;\nconst float rounding = 0.125;\n\n#define TAU         (2.0*PI)\n#define RESOLUTION  iResolution\n#define TIME        iTime\n\n#define MAX_RAY_LENGTH  15.0\n#define MAX_RAY_MARCHES 70\n#define TOLERANCE       0.00001\n#define NORM_OFF        0.005\n\nint g_hit = 0;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nvec3 band_color(float ny) {\n  vec3 hsv = vec3(0.0);\n  float ramp = 1.0/abs(ny);\n  if (abs(ny) < 4.0) {\n    hsv = vec3(0.0, 0.0, 0.);\n  } else if (ny > 0.0) {\n    hsv = vec3(0.88, 2.5*ramp,0.8);\n  } else {\n    hsv = vec3(0.53, 4.0*ramp, 0.8);\n  }\n\n  return hsv2rgb(hsv);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b, vec4 r) {\n  r.xy = (p.x>0.0)?r.xy : r.zw;\n  r.x  = (p.y>0.0)?r.x  : r.y;\n  vec2 q = abs(p)-b+r.x;\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat df_bars(vec3 p) {\n  p.xy *= trans;\n  float tm = TIME;\n  p.y += dist*sin(0.5*p.x+0.5*p.z+tm);\n  vec2 bp = p.zy;\n  \n  float d = 1E6;\n\n//  float bs = 0.25*smoothstep(-0.9, -0.25, -cos(0.1*p.x+tm));\n  const float bs = 0.25;\n  vec2 bsz = vec2(bs);\n  vec4 brd = vec4(bs*rounding);\n\n  for (int i = 0; i < bars; ++i) {\n    float ii = float(i);\n    vec2 pp = bp;\n    float a = -tm+0.5*ii;\n    float b = ii+p.x-2.0*tm;\n    pp.y += sin(a);\n    mat2 rot =  ROT(-PI/4.0*cos(a+twist*b));\n    pp.x -= bsz.x*sqrt(2.0)*ii; \n    pp *= rot;\n    float dd = box(pp, bsz, brd);\n    if (dd < d) {\n      g_hit = i;\n      d = dd;\n    }\n  }\n  \n  return d; \n}\n\nfloat df(vec3 p) {\n  return df_bars(p);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float ti, out int iter) {\n  float t = ti;\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    t += d;\n  }\n  iter = i;\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nconst vec3 lightPos = vec3(2.0, 3.0, -5.0); \nconst vec3 lightCol = vec3(HSV2RGB(vec3(0.53, 0.5, 1.0)));\nconst vec3 overCol  = vec3(HSV2RGB(vec3(0.88, 0.25, 0.8)));\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  vec3  ld    = normalize(lightPos - ro);\n  float dif   = max(dot(ld, rd), 0.0);\n\n  vec3  col   = vec3(0.0);\n\n  if ((rd.y > abs(rd.x)*1.0) && (rd.y > abs(rd.z*0.25))) { \n    col = 2.0*overCol*rd.y;\n  }\n  float rb = length(max(abs(rd.xz/max(0.0,rd.y))-vec2(0.9, 4.0),0.0))-0.1;\n\n  col += overCol*pow(clamp(1.0 - rb*0.5, 0.0, 1.0), 6.0);\n  col += lightCol*pow(dif, 8.0);\n  col += 4.0*lightCol*pow(dif, 40.0);\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  vec3 ro = vec3(0.0, 0.0, -5.0);\n  vec3 la = vec3(0.0, 0.0, 0.0);\n  vec3 ww = normalize(la-ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  const float fov = 3.0;\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww );\n\n  int iter;\n  g_hit = -1;\n  float t = rayMarch(ro, rd, 4.0, iter);\n  int hit = g_hit;\n  \n  vec3 col = vec3(1.0);\n  vec3 bcol = band_color(-4.0*float(hit-(bars-1)/2));\n  bcol *= bcol;\n  if (t < MAX_RAY_LENGTH) {\n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    vec3 ld= normalize(lightPos-p);\n  \n    float dif = max(dot(ld, n), 0.0);\n    col = bcol*mix(0.5, 1.0, dif);\n#ifdef SKYDOME    \n    vec3 rs= skyColor(p, r);\n    float fre = 1.0+dot(rd, n);\n    fre *= fre;\n    float rf  = mix(0.05, 1.0, fre);\n    col += rf*rs;\n#else   \n    float spe = pow(max(dot(ld, r), 0.0), 30.0);\n    col += spe;\n#endif    \n  }\n  \n  return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p  = -1. + 2. * q;\n  p.x     *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col  = effect(p);\n#if defined(COLORBURN)  \n  col -= vec3(0.2, 0.3, 0.2);\n#endif  \n  col += smoothstep(4.0, 0.0, TIME);\n  col = clamp(col, 0.0, 1.0);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}