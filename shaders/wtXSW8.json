{
    "Shader": {
        "info": {
            "date": "1580586701",
            "description": "a thing i made a very long while ago.\nA/D = move left/right\nW/S = move forwards/backwards\nQ/E = rotate left/right",
            "flags": 48,
            "hasliked": 0,
            "id": "wtXSW8",
            "likes": 10,
            "name": "raycaster thing",
            "published": 3,
            "tags": [
                "raycasting",
                "dda"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "vec3[3] colors = vec3[](vec3(1.), vec3(1., 0., 0.), vec3(0., 1., 0.));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec4 a = texture(iChannel0, vec2(fragCoord.x / iResolution.x, 0.));\n    float dist = a.z;\n    int id = int(a.x);\n    fragColor = mix(vec4(colors[id-1], 1.) * a.y, vec4(.25), step(.5, abs(pos.y) * dist));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.y > 4.) return;\n    vec4 prot = texelFetch(iChannel0, ivec2(0), 0);\n    vec2 rd = vec2((fragCoord.x * 2. - iResolution.x) / iResolution.y, 1.);\n    {\n        rd = vec2(rd.x*prot.w + rd.y*prot.z, rd.y*prot.w - rd.x*prot.z);\n    }\n    vec2 nrd = normalize(rd);\n    vec2 pos = prot.xy; //starting position\n    ivec2 mpos = ivec2(floor(pos)); //starting tile\n    vec2 ddxy = 1. / abs(nrd); //stuff\n    int side = 0; //even more dda stuff\n    ivec2 stxy = ivec2(rd.x > 0. ? 1 : -1, rd.y > 0. ? 1 : -1); //tile stepping direction\n    vec2 sdxy = fract(pos); //more stuff\n    if(stxy.x > 0) sdxy.x = 1. - sdxy.x;\n    if(stxy.y > 0) sdxy.y = 1. - sdxy.y;\n    sdxy *= ddxy;\n    int tile_hit = 1;\n    for(int i = 0; i < 32; i++) {\n        if(sdxy.x < sdxy.y) {\n        \tsdxy.x += ddxy.x;\n            mpos.x += stxy.x;\n            side = 0;\n        } else {\n        \tsdxy.y += ddxy.y;\n            mpos.y += stxy.y;\n            side = 1;\n        }\n        if(is_solid(tile_hit = tile_at(mpos))) break;\n    }\n    float dist = float(mpos[side]) - pos[side];\n    dist += float((1 - stxy[side]) / 2);\n    dist /= rd[side];\n    //vec2 normal = vec2(0.);\n    //normal[side] = float(stxy[side]);\n    fragColor = vec4(\n        tile_hit,\n        float(stxy[side]) * .20 + .80,\n        dist,\n        0.\n    );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R_LEFT  81\n#define R_RIGHT 69\n#define LEFT    65\n#define RIGHT   68\n#define DOWN    83\n#define UP      87\n\n#define iTimeDelta (1./60.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(any(greaterThan(fragCoord, vec2(1.)))) return;\n    if(iFrame == 0) {\n        fragColor = vec4(8., 8., 1., 0.); return;\n    }\n    fragColor = texelFetch(iChannel1, ivec2(0.), 0);\n    float c = cos(2. * iTimeDelta);\n    float s = sin(2. * iTimeDelta);\n    if(texelFetch(iChannel0, ivec2(R_RIGHT, 0), 0).x > .5) fragColor.zw *= mat2(c,s,-s,c);\n    if(texelFetch(iChannel0, ivec2(R_LEFT , 0), 0).x > .5) fragColor.zw *= mat2(c,-s,s,c);\n    fragColor.xy += fragColor.zw * 5. * texelFetch(iChannel0, ivec2(UP   , 0), 0).x * iTimeDelta;\n    fragColor.xy -= fragColor.zw * 5. * texelFetch(iChannel0, ivec2(DOWN , 0), 0).x * iTimeDelta;\n    fragColor.xy += fragColor.wz * vec2(1., -1.) * 5. * texelFetch(iChannel0, ivec2(RIGHT, 0), 0).x * iTimeDelta;\n    fragColor.xy -= fragColor.wz * vec2(1., -1.) * 5. * texelFetch(iChannel0, ivec2(LEFT , 0), 0).x * iTimeDelta;\n    /*ivec2 tilepos = ivec2(floor(fragColor.xy));\n    if(is_solid(tile_at(tilepos))) {\n        vec2 pos_wtile = fract(fragColor.xy);\n        vec2 apos = abs(pos_wtile - .5);\n        int side = 0;\n        if(apos.y > apos.x) side = 1;\n        ivec2 b = ivec2(pos_wtile.x > .5 ? 1 : -1, pos_wtile.y > .5 ? 1 : -1);\n        if(is_solid(tile_at(tilepos + b))) {\n            float c = fragColor.xy[side];\n            fragColor.xy = step(.5, fragColor.xy) * 1.02 - .01;\n            fragColor.xy[side] = c;\n        } else {\n            fragColor.xy[side] += (.51 - apos[side]) * (pos_wtile[side] > .5 ? 1. : -1.);\n        }\n    }*/\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "int[256] map = int[](\n  1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,\n  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n  1,0,1,0,1,0,0,0,0,0,0,0,0,3,0,1,\n  1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,\n  1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,\n  1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,\n  0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n  1,0,3,0,0,0,0,0,0,0,0,0,0,2,0,1,\n  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n  1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1\n);\n\nint tile_at(ivec2 p) {\n    p.x = p.x % 16;\n    if(p.x < 0) p.x += 16;\n    p.y = p.y % 16;\n    if(p.y < 0) p.y += 16;\n    return map[p.y * 16 + p.x];\n}\n\nbool is_solid(int id) {\n    return id > 0;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}