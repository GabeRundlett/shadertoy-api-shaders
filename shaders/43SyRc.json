{
    "Shader": {
        "info": {
            "date": "1727471262",
            "description": "geometrical composition reminiscent of an eye",
            "flags": 0,
            "hasliked": 0,
            "id": "43SyRc",
            "likes": 5,
            "name": "Eye Focus",
            "published": 3,
            "tags": [
                "shaider"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n\nfloat hash11(float p) {\n    vec3 p3 = fract(vec3(p) * vec3(443.8975, 397.2973, 491.1871));\n    p3 += dot(p3, p3.yzx + 19.191);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat sHash11(float a) {\n    return smoothstep(0., 1., fract(a));\n}\n\nvec4 permute(vec4 x) { \n    return mod(((x * 34.0) + 1.0) * x, 289.0); \n}\n\nvec2 fade(vec2 t) { \n    return t * t * (3.0 - 2.0 * t); \n}\n\nfloat cnoise(vec2 P, float rep) {\n    P.x = mod(P.x, rep);\n\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    Pi.z = mod(Pi.z, rep);\n\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod(Pi, 289.0);\n\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n    vec4 i = permute(permute(ix) + iy);\n\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0;\n    vec4 gy = abs(gx) - 0.5;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n\n    vec2 g00 = vec2(gx.x, gy.x);\n    vec2 g10 = vec2(gx.y, gy.y);\n    vec2 g01 = vec2(gx.z, gy.z);\n    vec2 g11 = vec2(gx.w, gy.w);\n\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n\n    return 2.3 * n_xy;\n}\n\nvec2 Eye(vec2 p, float pupilSize, vec2 lightPos) {\n    pupilSize += .1 * (1.0 - length(lightPos)) - .1;\n    vec2 radial = vec2(atan(p.x, p.y) / PI / 2., clamp((length(p) - 1.0) / pupilSize + .8, 0.0, 1.0));\n    radial.y = smoothstep(0.0, 1.0, radial.y);\n    \n    vec2 freq = vec2(30.0, 1.5);\n    float noise = pow((cnoise(radial * freq, freq.x) + 1.0) / 4.0, .65);\n    noise -= 1.0 * pow((cnoise(radial * freq * vec2(2.0, 3.0) + 9.0, 2.0 * freq.x) + 1.0) / 2.0 - .5, 2.0);\n    \n    float shading = dot(p, lightPos);\n    noise -= .7 * shading;\n    noise *= pow(smoothstep(0.0, .5, radial.y), .15);\n    noise = mix(noise, .25, smoothstep(.5, 1.0, radial.y + .2));\n    noise = mix(noise, 1.0 - .2 * dot(p, p) + .75 * shading, smoothstep(.7, .85, radial.y));\n    noise = mix(1.0, noise, clamp((length(p - lightPos / 1.0) - .15) / .025, 0.0, 1.0));\n    noise = mix(noise, 0.0, clamp((length(vec2(p.x, abs(p.y)) + vec2(0.0, 1.3)) - 2.15) / .04, 0.0, 1.0));\n    \n    return vec2(noise, noise / radial.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = 3.0 * (fragCoord.xy - iResolution.xy / 2.0) / iResolution.y;\n    float timeFactor = 1.0 + .05 * sHash11(1.5 * iTime);\n\n    vec2 eye = Eye(p, timeFactor, vec2(0.5, 0.75));\n    fragColor = vec4(eye.x, eye.x, eye.x * sqrt(eye.y) * 3.0, 1.0);\n    fragColor *= 2.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}