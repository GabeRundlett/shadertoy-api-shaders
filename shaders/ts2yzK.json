{
    "Shader": {
        "info": {
            "date": "1586995596",
            "description": "people at college asked to show how ray-marching work, so i did a little animation for them.\nnot the most optimise way to do animation through.\n\nbased on the shader deconstruction from IQ youtube channel, now i know how to send ray without heavy func. \n",
            "flags": 0,
            "hasliked": 0,
            "id": "ts2yzK",
            "likes": 1,
            "name": "raymarching - step by step",
            "published": 3,
            "tags": [
                "raymarching",
                "time",
                "shadow",
                "light",
                "animation",
                "normal"
            ],
            "usePreview": 0,
            "username": "Cewein",
            "viewed": 550
        },
        "renderpass": [
            {
                "code": "float speed = 1.5;\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(in vec3 pos)\n{\n    float time = mod(iTime * speed,30.);\n    float box = sdBox(pos, vec3(0.4));\n    \n    float sphere = length(pos) - 0.5;\n    \n    float boxSphere = max(-sphere ,box);\n    \n    float flr = pos.y - (-0.30);\n    \n    if(time > 6. && time < 8.) return flr;\n    if(time > 8. && time < 10.) return min(box,flr);\n    if(time > 10.) return min(boxSphere,flr);\n    \n\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(0.0001,0.);\n    return normalize(vec3(map(pos + e.xyy)-map(pos-e.xyy),\n                          map(pos + e.yxy)-map(pos-e.yxy),\n                          map(pos + e.yyx)-map(pos-e.yyx))\n                    );\n}\n\nfloat castRay(in vec3 ro, in vec3 rd)\n{\n    float t = 0.;\n    for(int i = 0; i<120; i++)\n    {\n        vec3 pos = ro + t*rd;\n        \n        float h = map(pos);\n        \n        if(h < 0.001) break;\n        \n        t += h;\n        \n        if(t > 20.)\n        {\n            t = -1.; //set for the shadow\n            break;\n        }\n    }\n        \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float time = mod(iTime * speed,30.);\n\t\n    float angle = 10.0*iMouse.x/iResolution.x;\n    \n    vec3 ro = vec3(1.5 * sin(angle),0.,1.5 * cos(angle));\n    vec3 ta = vec3(0.);\n    \n    vec3 ww = normalize(ta-ro); //front\n    vec3 uu = normalize(cross(ww,vec3(0.,1.,0.))); //right\n    vec3 vv = normalize(cross(uu,ww)); //up\n    \n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.5*ww);\n    \n    vec3 col = vec3(0.5, 0.7, 1.) - max(rd.y,0.0)*0.5;\n    \n    float t = castRay(ro,rd);\n   \n    vec3 mate = vec3(0.2);\n    \n    if(t > 0.)\n    {\n        vec3 pos = ro + t*rd;\n        vec3 norm = calcNormal(pos);\n        \n        vec3 sunDir = normalize(vec3( 1.0,0.4,.2));\n       \tfloat sunDif = clamp( dot(norm, sunDir),0.,1.);\n        float skyDif = clamp( 0.5 + 0.5*dot(norm, vec3(0.,1.,0.)),0.,1.);\n        float sunSha = step(castRay(pos + norm * 0.001, sunDir),0.);\n        float bouceDif = clamp( 0.5 + 0.5*dot(norm, vec3(0.,-1.,0.)),0.,1.);\n        \n        if(time > 12. && time < 14.) col = vec3(t);\n        if(time > 14. && time < 16.) col = norm;\n        \n        if(time > 16. && time < 18.)\n        {\n            col =  mate*vec3(7.0,5.0,3.) * sunDif;\n        }\n        if(time > 18. && time < 20.)\n        {\n            col =  mate*vec3(7.0,5.0,3.) * sunDif * sunSha;\n        }\n        if(time > 20. && time < 22.)\n        {\n            col =  mate*vec3(7.0,5.0,3.) * sunDif * sunSha;\n            col += mate*vec3(0.5,0.8,0.9) * skyDif;        \n        }\n        if(time > 22.)\n        {\n            col =  mate*vec3(7.0,5.0,3.) * sunDif * sunSha;\n            col += mate*vec3(0.5,0.8,0.9) * skyDif;        \n            col += mate*vec3(0.7,0.5,0.3) * bouceDif;\n        }\n\n    }\n    \n    col = pow(col, vec3(0.4545)); \n    \n    if(time < 2.) col = vec3(uv,0.);\n    if(time > 2. && time < 4.) col = rd;\n    if(time > 4. && time < 12.) col = vec3(t);\n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}