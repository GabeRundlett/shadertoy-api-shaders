{
    "Shader": {
        "info": {
            "date": "1708933924",
            "description": "pi is just half-tau.\n\nreduced operations, and increased efficiency. now with more tau!\ncreating a near-perfect approximation via a new tau identity that I came up with:\ncos(x):[-𝜏/4, 𝜏/4] ≈ ((5𝜏² / 4) / (x² + (𝜏/2)²)) - 4",
            "flags": 0,
            "hasliked": 0,
            "id": "M3jGWV",
            "likes": 11,
            "name": "TAU SINE",
            "published": 3,
            "tags": [
                "example",
                "cos",
                "sine",
                "trig",
                "approx",
                "tau"
            ],
            "usePreview": 0,
            "username": "ENDESGA",
            "viewed": 989
        },
        "renderpass": [
            {
                "code": "#define tau 6.283185307179586\n#define half_tau 3.141592653589793\n#define quarter_tau 1.5707963267948966\n\n#define half_tau_sqr 9.869604401089358\n#define five_tau_sqr_div4 49.34802200544679\n\n// tau_sin( x ) follows: cos(x):[-𝜏/4, 𝜏/4] ≈ ((5𝜏² / 4) / (x² + (𝜏/2)²)) - 4\n// copyright @ENDESGA 2024\n#define tau_identity( x ) ( five_tau_sqr_div4 / ( ( x * x ) + half_tau_sqr ) - 4. )\n\n#define tau_sincos \\\n\tif( x >= quarter_tau )\\\n\t{\\\n\t\tx = half_tau - x;\\\n\t\treturn -tau_identity( x );\\\n\t}\\\n\telse\\\n\t\treturn tau_identity( x )\n\nfloat tau_sin( float x )\n{\n\tx = abs( mod( x + quarter_tau, tau ) - half_tau );\n\ttau_sincos;\n}\n\n// cos is just sin( x + quarter_tau )\n// duplicating the function saves an addition\nfloat tau_cos( float x )\n{\n\tx = abs( mod( x + half_tau, tau ) - half_tau );\n\ttau_sincos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = iResolution.xy;\n\tvec2 U = ( fragCoord / res - 0.5 ) * vec2( tau, half_tau );\n\tU.x += sin( iTime * .5 ) * half_tau_sqr;\n\n\t// real sine for comparison (red)\n\tfloat y1 = sin( U.x );\n\t// tau-sine (cyan)\n\tfloat y2 = tau_sin( U.x );\n    \n    // white implies they're very similar\n\n\tfragColor = smoothstep( 6.3 * 1.5 / res.y, 0., abs( vec4( y1, y2, y2, 0 ) - U.y ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}