{
    "Shader": {
        "info": {
            "date": "1539892963",
            "description": "This is only a superposition of little circles which move along a radius.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltdfWM",
            "likes": 9,
            "name": "Particles illusions 1",
            "published": 3,
            "tags": [
                "particules"
            ],
            "usePreview": 0,
            "username": "Thorgrimar",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "#define pi (3.14159265359)\n#define twopi (6.28318530718)\n\n\n// thank you CPU\nvec2 cartToPol(vec2 coordCart) { return vec2( length(coordCart), atan(coordCart.y,coordCart.x)); }\n\nvec3 colorCircle(vec2 center, float radius, vec3 color, vec2 pos)\n{\n    \n    float d = distance(center, pos);\n    float dmr = d - radius;\n    if (dmr < 0.) {\n        return color;\n    }\n    return vec3(0.);\n}\n\nvec3 colorEmitterCircles(vec2 center, float emittRadius, float circleRadius, vec3 color, float angleRot, float nbrPieces, vec2 pos)\n{\n    float circleSpeed = 0.8;\n    // period T between two pop must be > 2.*circleRadius/circleSpeed\n    float T = 4.*circleRadius/circleSpeed;\n\tvec2 coordPol = cartToPol(pos - center);\n    float r = coordPol.x;\n    float th = coordPol.y;\n    if (r < emittRadius + circleRadius) {\n        // on each piece : \n        float numPiece = floor((th - angleRot)/twopi*nbrPieces);\n        float anglePath = twopi*(numPiece+0.5)/nbrPieces + angleRot;\n        float nT = nbrPieces*T;\n        vec2 centerCircle = center + mod(iTime - numPiece*T, nT)/nT*emittRadius*vec2(cos(anglePath), sin(anglePath));\n        return colorCircle(centerCircle, circleRadius, color, pos);\n    } else {\n        return vec3(0.);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (uv.x from -1.0 to 1.0)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y/iResolution.x; \n\n    vec3 col = vec3(0.);\n    \n    vec2 center = vec2(-0.5, 0.);\n    float emittRadius = .5; \n    float radiusCircles = 0.01;\n    vec3 color1 = vec3(.4, .4, .6);\n    float angleRot = 0.;\n    float nbrPieces = 10.;\n    for (int i=0; i<40; i++) {\n        col += colorEmitterCircles(center, emittRadius, radiusCircles, color1, angleRot, nbrPieces, uv);\n        angleRot += 0.1*iTime/2.;\n    }\n    \n    center = vec2(0.5, 0.);\n    radiusCircles = 0.01;\n    angleRot = 0.;\n    nbrPieces = 100.;\n    for (int i=0; i<30; i++) {\n        col += colorEmitterCircles(center, emittRadius, radiusCircles, color1, angleRot, nbrPieces, uv);\n        angleRot += 0.1*iTime/2.;\n    }\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}