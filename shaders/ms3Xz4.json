{
    "Shader": {
        "info": {
            "date": "1679443507",
            "description": "from scene.org glsl",
            "flags": 0,
            "hasliked": 0,
            "id": "ms3Xz4",
            "likes": 2,
            "name": "Tokyo DemoFest 'DizzyPlace'",
            "published": 3,
            "tags": [
                "glsldemo"
            ],
            "usePreview": 0,
            "username": "ford442",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "\n#define time iTime;\n#define mouse iMouse;\n#define resolution iResolution;\n\n//Minus256\nconst float err = 0.001;\nconst float sta = 0.0;\nconst float end = 7000.0;\nconst int mxmrch = 255;\nfloat spheresdf(vec3 p,float r)\n{\n    return length(p) - r;\n}\nfloat rep(vec3 p,vec3 c)\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return spheresdf(q,max(50.0*sin(iTime*5.0),30.0));\n}\nfloat scenesdf(vec3 p)\n{\n    vec3 damn = vec3(200.0,200.0,200.0);\n    return rep(p,damn);\n}\nvec3 raydir(float fov,vec2 res,vec2 pos)\n{\n    vec2 dir = pos - res/2.0;\n    float depth = (res.y/2.0)/tan(radians(fov/2.0));\n    return normalize(vec3(dir,-depth));\n}\nmat4 viewmat(vec3 pos, vec3 centerdir, vec3 roll) {\n    vec3 f = normalize(centerdir - pos);\n    vec3 s = normalize(cross(f, roll));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\nvec3 normal(vec3 p)\n{\n    return normalize(vec3(\n        scenesdf(vec3(p.x + 1.5+sin(iTime)*0.1,p.y,p.z)) - scenesdf(vec3(p.x - 4.1,p.y,p.z)),\n        scenesdf(vec3(p.x,p.y + 4.1,p.z)) - scenesdf(vec3(p.x,p.y - 1.7+sin(iTime)*0.1,p.z)),\n        scenesdf(vec3(p.x,p.y,p.z + 9.7+sin(iTime)*0.1)) - scenesdf(vec3(p.x,p.y,p.z - 8.1))\n        ));\n}\nfloat dirlength(vec3 p,vec3 raydir)\n{\n    float depth = 2.0;\n    for(int i = 0; i < mxmrch; i++)\n    {\n        float dist = scenesdf(p + raydir * depth);\n            if(dist < err)\n            {\n                return depth;\n            }\n        depth += dist;\n        if(depth >= end)\n        {\n            return end;\n        }\n    }\n    return end;\n}\nfloat Minresetnor(vec3 lightpos,vec3 normalo,vec3 eye,vec3 rgb,float ext,float strongness)\n{\n    vec3 dir = normalo;\n    vec3 point = eye;\n    vec3 altp = dir*dirlength(eye,normalo);\n    float altl = dirlength(eye,normalo);\n    float altl2 = altl;\n    for(int i = 0;i<2;i++)\n    {\n        altp = dir*altl;\n        dir = reflect(dir,normal(altp));\n        altl = dirlength(altp,dir);\n        altl2 = altl2+altl;\n    }\n    return altl2;\n}\nvec3 Minresetnorr(vec3 lightpos,vec3 normalo,vec3 eye,vec3 rgb,float ext,float strongness)\n{\n    vec3 dir = normalo;\n    vec3 point = eye;\n    vec3 altp = dir*dirlength(eye,normalo);\n    float altl = dirlength(eye,normalo);\n    float altl2 = altl;\n    for(int i = 0;i<2;i++)\n    {\n        altp = dir*altl;\n        dir = reflect(dir,normal(altp));\n        altl = dirlength(altp,dir);\n        altl2 = altl2+altl;\n    }\n    return altp;\n}\nvec3 PCFL(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n    vec3 lightPos, vec3 lightITs,vec3 ffff) {\n    vec3 N = ffff;\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));   \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    } \n    if (dotRV < 0.0) {\n        return lightITs * (k_d * dotLN);\n    }\n    return lightITs * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\nvec3 POI(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,vec3 ffff) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1ITs = vec3(0.4, 0.4, 0.4);\n    color += PCFL(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1ITs,ffff);\n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2ITs = vec3(0.4, 0.4, 0.4);\n    color += PCFL(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2ITs,ffff);    \n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 background = vec4(0.5,0.5,0.5,1.0);\n    vec3 viewDir = raydir(90.0, iResolution.xy, fragCoord.xy);\n    vec3 pointt = vec3(700.0*sin(iTime),400.0*cos(iTime),mod(iTime*400.0,sin(iTime*400.0)));\n    mat4 viewToWorld = viewmat(pointt, vec3(0.0), normalize(vec3(sin(mod(iTime*5.0,5.0)),cos(iTime*0.5),cos(iTime))));   \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    float dist = dirlength(pointt, worldDir);\n    vec3 eye = (pointt + dist * worldDir);\n\tvec3 ambient = vec3(1.0,1.0,1.0);\n    vec3 hellr = Minresetnorr(vec3(0.0),worldDir,pointt,vec3(0.0,0.0,1.0),10.0,0.5);\n\tvec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(0.7, 0.2, 0.2);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    vec3 p = pointt + dist * worldDir;\n    vec3 normcolor = normal(hellr);\n    vec3 color = POI(K_a, K_d, K_s, shininess, p, pointt,normcolor);\n    float hell = Minresetnor(vec3(0.0),worldDir,eye,vec3(0.0,0.0,1.0),10.0,0.5);\n    float minphase = clamp(abs(1.1*sin(iTime*10.0)*sin(gl_FragCoord.y)),0.0,0.3);\n    fragColor = vec4(1.0) - vec4((hell)/(end))+vec4(vec3(color),0.0) - vec4(dist/(end-40.0*abs(sin(iTime)))) \n        - vec4(minphase) + vec4(vec3(0.2,0.2,0.5),0.0);\n}   ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}