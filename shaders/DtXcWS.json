{
    "Shader": {
        "info": {
            "date": "1691077714",
            "description": "super basic pattern with some volume responsive elements",
            "flags": 0,
            "hasliked": 0,
            "id": "DtXcWS",
            "likes": 6,
            "name": "Hypno Eye Music Visualizer",
            "published": 3,
            "tags": [
                "reactive",
                "music",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "iSandRocks",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "const float FREQ_RANGE = 64.0;\nconst float PI = 3.1415;\nconst float RADIUS = 0.6;\nconst float BRIGHTNESS = 0.2;\nconst float SPEED = 0.5;\n\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 formula(vec2 p) {\n\t\tp.xy = abs(p.xy+1.)-abs(p.xy-1.)-p.xy;\n\t\tp.y-=.25;\n\t\tp.xy*=rot(radians(35.));\n\t\tp=p*2./clamp(dot(p.xy,p.xy),.2,1.);\n\treturn p;\n}\n\nfloat getfrequency(float x) {\n    return texture(iChannel0, vec2(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE, 0.25)).x + 0.06;\n}\n\nfloat getfrequency_smooth(float x) {\n    float index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n    float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n    return mix(getfrequency(index), getfrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));\n}\n\nfloat getfrequency_blend(float x) {\n    return mix(getfrequency(x), getfrequency_smooth(x), 0.5);\n}\n\nvec3 palette(float t) {\n    float angle = atan(iResolution.x, iResolution.y);\n    float frequency = max(getfrequency_blend(abs(angle / PI)) - 0.02, 0.0);\n\n    vec3 a1 = vec3(0.21, 0.16, 0.35);\n    vec3 b2 = vec3(0.07, 0.07, 0.07);\n    vec3 c3 = vec3(1, 1, 1);\n    vec3 d4 = vec3(1, 1, 1);\n    vec3 a = a1 * (frequency + 0.1);\n    vec3 b = b2 * (frequency + 0.1);\n    vec3 c = c3 * .05;\n    vec3 d = d4 ;\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float angle = atan(iResolution.x, iResolution.y);\n    float frequency = max(getfrequency_blend(abs(angle / PI)) - 0.02, 0.0);\n    \n    vec2 uv = (gl_FragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n\n    for(float i = 0.0; i < 4.0; i ++) {\n    \n        uv = formula(uv * ( 0.13));\n     \n\n        float d = length(uv) * exp(- length(uv0));\n\n        vec3 col = palette(length(uv0) + i * .4 + iTime*2.0 );\n\n        d = sin(d * 8. + ((0.5*frequency)+iTime)) / 15.;\n        d = abs(d);\n       \n\n        d = pow((0.02 +( .01*frequency)) / d, 1.2);\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}