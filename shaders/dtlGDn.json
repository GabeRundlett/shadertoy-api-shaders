{
    "Shader": {
        "info": {
            "date": "1671632686",
            "description": "noise",
            "flags": 0,
            "hasliked": 0,
            "id": "dtlGDn",
            "likes": 2,
            "name": "interpolated layered noise tmplt",
            "published": 3,
            "tags": [
                "noise",
                "template"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "float f_n_rand(float p)\n{\n    //https://www.shadertoy.com/view/4djSRW\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec4 f_o_index2d_by_o_fc_o_ires(vec2 o_fc, vec2 o_ires){\n    float n_index_x = floor(o_fc.x) + floor(o_fc.y) * (o_ires.x);\n    float n_index_x_nor = (floor(n_index_x) / (floor(o_ires.x) * floor(o_ires.y)));\n    float n_index_y = floor(o_fc.y) + floor(o_fc.x) * (o_ires.y);\n    float n_index_y_nor = (floor(n_index_y) / (floor(o_ires.y) * floor(o_ires.x)));\n    return vec4(\n        n_index_x,//+fract(o_fc.x), \n        n_index_x_nor, \n        n_index_y,//+fract(o_fc.y), \n        n_index_y_nor\n    );\n}\nfloat f_n_rand_interpolated(vec2 o_fc, vec2 o_ires){\n\n    vec4 o_index_xp0yp0 = f_o_index2d_by_o_fc_o_ires(o_fc+vec2(0.), o_ires);\n    vec4 o_index_xp1yp0 = f_o_index2d_by_o_fc_o_ires(o_fc+vec2(+1.,+0.), o_ires);\n    vec4 o_index_xp0yp1 = f_o_index2d_by_o_fc_o_ires(o_fc+vec2(+0.,+1.), o_ires);\n    vec4 o_index_xp1yp1 = f_o_index2d_by_o_fc_o_ires(o_fc+vec2(+1,+1.), o_ires);\n    \n    float n_rand_xp0yp0 = f_n_rand(floor(o_index_xp0yp0[0]));\n    float n_rand_xp1yp0 = f_n_rand(floor(o_index_xp1yp0[0]));\n    float n_rand_xp0yp1 = f_n_rand(floor(o_index_xp0yp1[0]));\n    float n_rand_xp1yp1 = f_n_rand(floor(o_index_xp1yp1[0]));\n\n    float n = mix(n_rand_xp0yp0, n_rand_xp1yp0, fract(o_fc.x));\n    float n2 = mix(n_rand_xp0yp1, n_rand_xp1yp1, fract(o_fc.x));\n    float n3 = mix(n, n2, fract(o_fc.y));\n    \n    return (n3);\n}\nvec4 f_o_smoothnoise(\n    vec2 o_fc,\n    vec2 o_ires\n){\n    //float n_rand_interpolated = f_n_rand_interpolated(o_fc, o_ires);\n    //float n_rand_interpolated2 = f_n_rand_interpolated(o_fc*0.2+20., o_ires*0.2+20.);\n    //float n_rand_interpolated3 = f_n_rand_interpolated(o_fc*0.5+10., o_ires*0.5+10.);\n    //float n_mix = mix(n_rand_interpolated, n_rand_interpolated2, 0.5);\n    //n_mix = mix(n_mix, n_rand_interpolated3, 0.5);\n    \n    float n_product = 1.;\n    float n_sum = 0.;\n    float n_sum_noamp = 0.;\n    float n_its = 5.;\n    float n_amp = 1.;\n    float n_freq = 1.;\n    float n_min = 1.;\n    float n_max = 0.;\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        n_amp = n_amp /2.;\n        n_freq = n_freq *2.;\n        float n_rand_interpolated = f_n_rand_interpolated(o_fc*n_freq, o_ires*n_freq);//*n_amp;\n        n_sum += n_rand_interpolated * n_amp;\n        n_sum_noamp += n_rand_interpolated;\n        n_min = min(n_min, n_rand_interpolated);\n        n_max = max(n_max, n_rand_interpolated);\n    }\n    float n_sum_noamp_nor = n_sum_noamp / n_its;\n    return vec4(\n        n_sum, \n        n_sum_noamp_nor, \n        n_min, \n        n_max\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_1fc_nor = 1. / iResolution.xy;\n    vec2 o_fc_nor = o_1fc_nor * fragCoord.xy;\n    vec2 o_fc_nor_offset = o_fc_nor - 0.5;\n    float n_y = o_fc_nor_offset.y;\n    //float n_rotation = o_fc_nor_offset.x\n    float n_rand_x = f_n_rand((o_fc_nor).x);\n    float n_tau = 6.2831;\n    float n = sin(o_fc_nor.x*n_tau*sin(o_fc_nor.x * n_tau)*10.);\n    float n_amp = 0.3 + n*0.1;\n    float n_freq = o_fc_nor_offset.x * 20.;\n    n_y = n_y + sin(n_freq)*n_amp;\n    float n_dist = length(n_y);\n    n_dist = n_dist * 1./0.01;\n    \n    vec2 o_m_nor = iMouse.xy / iResolution.xy;\n    if(iMouse.z == 0.){o_m_nor = vec2((sin(iTime)*0.5+0.5),0.);}\n    float n_factor = 0.02;\n    vec4 o_smoothnoise = f_o_smoothnoise(\n        fragCoord.xy*n_factor,\n        iResolution.xy*n_factor\n    );\n    \n    float n_index = floor(o_fc_nor.y/(1./4.));\n    fragColor = vec4(o_smoothnoise[int(n_index)]);\n    \n    \n    if(o_fc_nor.x > o_m_nor.x){\n        fragColor = vec4(o_smoothnoise.g);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}