{
    "Shader": {
        "info": {
            "date": "1605545282",
            "description": "Simple pool model with displacements sampled from a soft voronoi heightmap.",
            "flags": 32,
            "hasliked": 0,
            "id": "wd3Bz2",
            "likes": 33,
            "name": "Pool in the Middle of Nowhere",
            "published": 3,
            "tags": [
                "voronoi",
                "simulation",
                "water",
                "heightmap"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 585
        },
        "renderpass": [
            {
                "code": "/*\nThis shader uses my Raymarcher Template shader (https://www.shadertoy.com/view/3styDs).\n*/\n\n// Settings:\nconst bool SHADOWS = false;\nconst int AA = 1; // Set to 2 if your computer is fast enough.\n\n// Screen variables:\nvec3 backgroundColor = vec3(0.0, 0.0, 0.0);\nvec2 antialiasing = vec2(AA);\n\n// Light variables:\nvec3 lightDirection = normalize(vec3(0.58, 1.5, -0.58));\nvec3 lightColor = vec3(1.0, 1.0, 1.0);\n\n// Camera variables:\nvec3 cameraPosition = vec3(0.0, 0.0, 1000.0);\nvec3 cameraRight = vec3(1.0, 0.0, 0.0);\nvec3 cameraUp = vec3(0.0, 1.0, 0.0);\nvec3 cameraForward = vec3(0.0, 0.0, -1.0);\nfloat cameraFocalLength = 400.0;\n\n// Ray marching constants:\nconst vec3 GRADIENT_STEP = vec3(1.0, 0.0, 0.0);\nconst float MAX_TRACE_DISTANCE = 3000.0;\nconst float MIN_HIT_DISTANCE = 0.001;\nconst float SHADOW_BIAS = MIN_HIT_DISTANCE * 2.0;\nconst int MAX_STEPS = 200;\n\n// Raymarching structures:\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Surface {\n    vec3 ambientColor;\n    vec3 diffuseColor;\n    vec3 specularColor;\n    float shininess;\n    float signedDistance;\n};\n\n// Signed Distance Functions (SDFs):\nfloat sdPlane(in vec3 p, in vec3 n) {\n    return dot(n, p);\n}\n\nfloat sdCuboid(in vec3 p, in float h, in float w, in float d) {\n    return max(abs(p.x) - 0.5 * w, max(abs(p.y) - 0.5 * h, abs(p.z) - 0.5 * d));\n}\n\n// Constructive Solid Geometry (CSG) Operators:\nSurface Union(in Surface surface1, in Surface surface2) {\n    Surface surfaceUnion = surface1;\n    if (surface2.signedDistance < surfaceUnion.signedDistance) {\n        surfaceUnion = surface2;\n    }\n    return surfaceUnion;\n}\n\n// Smooth union of surfaces with different materials from my shader \"Smooth Union Inclusive of Colors\" (https://www.shadertoy.com/view/tscBz8).\nSurface SmoothUnion(in Surface surface1, in Surface surface2, in float smoothness) {\n    float interpolation = clamp(0.5 + 0.5 * (surface2.signedDistance - surface1.signedDistance) / smoothness, 0.0, 1.0);\n    return Surface(mix(surface2.ambientColor, surface1.ambientColor, interpolation),\n                   mix(surface2.diffuseColor, surface1.diffuseColor, interpolation),\n                   mix(surface2.specularColor, surface1.specularColor, interpolation),\n                   mix(surface2.shininess, surface1.shininess, interpolation),\n                   mix(surface2.signedDistance, surface1.signedDistance, interpolation) - smoothness * interpolation * (1.0 - interpolation));\n}\n\n// Transformations:\nvec3 Translate(in vec3 p, in vec3 t) {\n    return p - t;\n}\n\nvec3 Rotate(in vec3 p, in vec3 r) {\n    vec3 rad = radians(-r);\n    vec3 cosRad = cos(rad);\n    vec3 sinRad = sin(rad);\n\n    mat3 xRotation = mat3(1.0,      0.0,       0.0,\n                          0.0, cosRad.x, -sinRad.x,\n                          0.0, sinRad.x,  cosRad.x);\n\n    mat3 yRotation = mat3( cosRad.y, 0.0, sinRad.y,\n                                0.0, 1.0,      0.0,\n                          -sinRad.y, 0.0, cosRad.y);\n\n    mat3 zRotation = mat3(cosRad.z, -sinRad.z, 0.0,\n                          sinRad.z,  cosRad.z, 0.0,\n                               0.0,       0.0, 1.0);\n\n    return zRotation * yRotation * xRotation * p;\n}\n\n// Scene mapping function:\nSurface mapScene(in vec3 p) {\n    p = Rotate(Translate(p, vec3(0.0, -100.0, 0.0)), vec3(-30.0, 0.0, 0.0));\n\n    vec2 uv = (p.xz + vec2(175.0, 100.0)) / vec2(350.0, 200.0);\n    vec3 waterTexture = texture(iChannel0, uv).rgb;\n    float displacement = waterTexture.b * 50.0;\n    Surface water = Surface(vec3(0.0, 0.0, 0.0),\n                            waterTexture,\n                            vec3(1.0, 1.0, 1.0), 32.0,\n                            max(sdPlane(Translate(p, vec3(0.0, 35.0, 0.0)), vec3(0.0, 1.0, 0.0)) - displacement,\n                                sdCuboid(Translate(p, vec3(0.0, 35.0, 0.0)), 1000.0, 350.0, 200.0)));\n\n    uv = vec2(mod(atan(p.z, p.x), 1.57), p.y + 75.0) / vec2(1.57, 150.0);\n    vec3 wallTexture = texture(iChannel1, uv).rgb;\n    Surface wall = Surface(0.3 * wallTexture,\n                           wallTexture,\n                           vec3(0.0, 0.0, 0.0), 0.0,\n                           max(sdCuboid(Translate(p, vec3(0.0, 25.0, 0.0)), 150.0, 375.0, 225.0),\n                               -sdCuboid(p, 1000.0, 350.0, 200.0)));\n\n    uv = mod(p.xz / 800.0, 1.0);\n    vec3 groundTexture = texture(iChannel2, uv).rgb;\n    Surface ground = Surface(vec3(0.0, 0.0, 0.0),\n                             groundTexture,\n                             vec3(0.0, 0.0, 0.0), 0.0,\n                             sdPlane(Translate(p, vec3(0.0, 10.0, 0.0)), vec3(0.0, 1.0, 0.0)));\n\n    return Union(water, SmoothUnion(wall, ground, 10.0));\n}\n\n// Normal calculation function (using gradient):\nvec3 calculateNormal(in vec3 p) {\n    float gradientX = mapScene(p + GRADIENT_STEP.xyy).signedDistance - mapScene(p - GRADIENT_STEP.xyy).signedDistance;\n    float gradientY = mapScene(p + GRADIENT_STEP.yxy).signedDistance - mapScene(p - GRADIENT_STEP.yxy).signedDistance;\n    float gradientZ = mapScene(p + GRADIENT_STEP.yyx).signedDistance - mapScene(p - GRADIENT_STEP.yyx).signedDistance;\n    return normalize(vec3(gradientX, gradientY, gradientZ));\n}\n\n// Shadow mapping function:\nbool visibleFromLight(in vec3 p, in vec3 normal) {\n    p += normal * SHADOW_BIAS;\n    float shadowDistance = 0.0;\n    for (int iterations=0; iterations < MAX_STEPS; iterations++) {\n        vec3 shadowTestPosition = p + lightDirection * shadowDistance;\n        Surface occluderSurface = mapScene(shadowTestPosition);\n        if (abs(occluderSurface.signedDistance) < MIN_HIT_DISTANCE) {\n            return false;\n        }\n\n        if (shadowDistance > MAX_TRACE_DISTANCE) {\n            break;\n        }\n\n        shadowDistance += occluderSurface.signedDistance;\n    }\n\n    return true;\n}\n\n// Surface shader (uses the Phong illumination model):\nvec3 shadeSurface(in Surface surface, in vec3 hitPosition, in Ray ray, in vec3 normal) {\n    vec3 illuminationAmbient = surface.ambientColor * lightColor;\n\n    float lambertian = max(0.0, dot(normal, lightDirection));\n    vec3 illuminationDiffuse = lambertian * surface.diffuseColor * lightColor;\n\n    vec3 reflection = reflect(lightDirection, normal);\n    float specularAngle = max(0.0, dot(reflection, ray.direction));\n    vec3 illuminationSpecular = clamp(pow(specularAngle, surface.shininess), 0.0, 1.0) * surface.specularColor * lightColor;\n\n    float inShadow = SHADOWS ? visibleFromLight(hitPosition, normal) ? 1.0 : 0.0 : 1.0;\n\n    return illuminationAmbient + inShadow * (illuminationDiffuse + illuminationSpecular);\n}\n\n// Raymarching loop:\nvec4 rayMarch(in Ray ray) {\n    float distanceTraveled = 0.0;\n    for (int iterations=0; iterations < MAX_STEPS; iterations++) {\n        vec3 currentPosition = ray.origin + ray.direction * distanceTraveled;\n        Surface sceneSurface = mapScene(currentPosition);\n        if (abs(sceneSurface.signedDistance) < MIN_HIT_DISTANCE) {\n            vec3 normal = calculateNormal(currentPosition);\n            vec3 color = shadeSurface(sceneSurface, currentPosition, ray, normal);\n            return vec4(color, 1.0);\n        }\n\n        if (distanceTraveled > MAX_TRACE_DISTANCE) {\n            break;\n        }\n\n        distanceTraveled += sceneSurface.signedDistance;\n    }\n\n    return vec4(backgroundColor, 1.0);\n}\n\n// Pixel shader output function:\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    for (float yOffset=0.0; yOffset < antialiasing.y; yOffset++) {\n        for (float xOffset=0.0; xOffset < antialiasing.x; xOffset++) {\n            vec2 pixel = fragCoord + vec2(xOffset, yOffset) / antialiasing - 0.5 * iResolution.xy;\n            vec3 rayOrigin = cameraPosition + cameraForward * cameraFocalLength;\n            vec3 rayDirection = normalize(rayOrigin - (cameraPosition - cameraRight * pixel.x - cameraUp * pixel.y));\n            fragColor += rayMarch(Ray(rayOrigin, rayDirection));\n        }\n    }\n\n    fragColor /= antialiasing.y * antialiasing.x;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nSoft voronoi heightmap for the surface of the pool.\nThe idea came from the soft voronoi pattern I employed in my shader \"Fake Caustic w/Voronoi\" (https://www.shadertoy.com/view/wd3fR2).\n*/\n\n#define LAYERS 2.0\n#define FREQUENCY 4.0\n#define DECAY 0.6\n#define SOFTNESS 0.5\n#define WASHOUT 0.8\n#define POWER 2.5\n\nfloat smin(in float a, in float b, in float s) {\n    float i = clamp(0.5 + 0.5 * (b - a) / s, 0.0, 1.0);\n    return mix(b, a, i) - s * i * (1.0 - i);\n}\n\nvec2 getCellPoint(in vec2 p) {\n    return 0.5 + 0.5 * vec2(sin(p.x + p.y * 2.0 + iTime), cos(p.y - p.x + 2.0 * iTime));\n}\n\nfloat voronoi(in vec2 uv, in float scale) {\n    uv *= scale;\n    vec2 cellLocation = floor(uv);\n\n    float minDist = 1000000000.0;\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            vec2 curCellLocation = cellLocation + vec2(i, j);\n            vec2 curCellPoint = curCellLocation + getCellPoint(curCellLocation);\n            minDist = smin(minDist, length(uv - curCellPoint), SOFTNESS);\n        }\n    }\n\n    return minDist;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0.0);\n    float totalScale = 0.0;\n    float scale = 1.0;\n\n    for (float layer=0.0; layer < LAYERS; layer++) {\n        float voronoiSample = pow(voronoi(uv, FREQUENCY / scale), POWER);\n        color += mix(vec3(0.0, 0.7, 0.9), vec3(1.0 + WASHOUT), voronoiSample) * scale;\n        totalScale += scale;\n        scale *= DECAY;\n    }\n\n    color /= totalScale;\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}