{
    "Shader": {
        "info": {
            "date": "1635314793",
            "description": "Applying a gaussian filter to a piecewise linear function.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdKSWV",
            "likes": 11,
            "name": "Gaussian Filtered Segments",
            "published": 3,
            "tags": [
                "filter",
                "1d",
                "linear",
                "gaussian",
                "segments",
                "weierstrass",
                "piecwise"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "// https://www.desmos.com/calculator/mfzpsbbyqn\n// Similar to the Weierstrass transform (https://en.wikipedia.org/wiki/Weierstrass_transform)\n// Piecewise linear functions can be filtered by adding up gseg() for each segment\n// Demoing a recreation of the example on the wikipedia page\n\n// Error function approximation\nfloat erf(in float x) {\n    return sign(x) * sqrt(1.0 - exp2(-1.787776 * x * x));\n}\n\n// Gaussian filtered segment\n// 1/sqrt(pi) â‰ˆ 0.5641895\nfloat gseg(in float x, in vec2 a, in vec2 b, in float w) {\n    float p = (x - a.x) / w, q = (x - b.x) / w;\n    float m = (b.y - a.y) / (b.x - a.x) * w;\n    float y = (erf(p) - erf(q)) * (m * p + a.y);\n    y += (exp(-p * p) - exp(-q * q)) * 0.5641895 * m;\n    return y / 2.0;\n}\n\nfloat f(in float x, in float w) {\n    float y = gseg(x, vec2(0.0, 4.5), vec2(5.0, 4.5), w); // Segment from (0, 4.5) to (5, 4.5)\n    y += gseg(x, vec2(5.0, 4.5), vec2(10.0, -4.5), w); // Segment from (5, 4.5) to (10, -4.5)\n    return y;\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 12.0 + vec2(5.0, 0.25);\n    float unit = 20.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Filter width\n    float w = mix(0.001, 5.0, 0.5 - 0.5 * cos(0.5 * iTime));\n\n    // Plot\n    float y = f(uv.x, w);\n    float dydx = (f(uv.x + 0.001, w) - y) / 0.001;\n    drawSDF(abs(uv.y - y) / sqrt(1.0 + dydx * dydx), vec3(1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}