{
    "Shader": {
        "info": {
            "date": "1509367581",
            "description": "I needed some color in my life",
            "flags": 0,
            "hasliked": 0,
            "id": "Xl2yzV",
            "likes": 10,
            "name": "drl0016",
            "published": 3,
            "tags": [
                "pattern",
                "tiles"
            ],
            "usePreview": 0,
            "username": "DrLuke",
            "viewed": 584
        },
        "renderpass": [
            {
                "code": "/*\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nhttps://creativecommons.org/licenses/by/4.0/\n*/\n\n// Some nice colors\n#define c1 (vec3(238,127,26)/255.)\t// Bright orange\n#define c2 (vec3(58,153,163)/255.)\t// Bright teal\n#define c3 (vec3(65,105,108)/255.)\t// Dark teal\n#define c4 (vec3(109,8,6)/255.)\t\t// Crimson?\n\n#define S(x,w) smoothstep(-w,w,x)\n\n/// Distance functions and smoothMerge from: https://www.shadertoy.com/view/4dfXDn\nfloat boxDist(vec2 p, vec2 size, float radius)\n{\n\tsize -= vec2(radius);\n\tvec2 d = abs(p) - size;\n  \treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n}\n\nvec2 rot(vec2 p, float a)\n{\n\tmat2 m = mat2(cos(a), sin(a), -sin(a), cos(a));\n\treturn p * m;\t\n}\n\nfloat smoothMerge(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0-h);\n}\n\n\n// Each pattern is a square ranging from 0,0 to 1,1.\n// The orientation vector tells how it is rotated\n\n// Pattern 1\nvec3 pat1(vec2 uv, vec2 orient)\n{\n    uv -= vec2(0.5);\n    vec3 color = c4;\n    \n    color = mix(c1, color, S(boxDist(uv, vec2(.45), 0.05), 0.01));\t// Main box\n    color = mix(c4, color, S(boxDist(rot(uv - vec2(0.2*sign(uv.x), -0.2*sign(uv.x)), 3.14159*0.25), vec2(.1), 0.02), 0.01));\n    float v = smoothMerge(boxDist(uv - vec2(0.15*sign(uv.x)), vec2(.15), 0.1),\n                          boxDist(rot(uv, 3.1415*1./4.), vec2(.15, .1), 0.0),\n                          0.05);\n    color = mix(c4, color, S(v, 0.01));\n    \n    \n    \n    return color;\n    \n    return vec3(1.-S(boxDist(uv, vec2(.45), 0.), 0.01));\n}\n\n#define smoothround(x, w) (floor(x) + smoothstep(0.5-w, 0.5+w, fract(x)))\n\n// Pattern 2\nvec3 pat2(vec2 uv, vec2 orient)\n{\n    uv -= vec2(0.5);\n    \n    if(orient.x == 0.0) {orient.x += 0.1;}\n    uv = rot(uv, smoothround(atan(orient.y, orient.x)/(3.14159*0.5), 0.0)*3.14159*0.5-3.14159*0.5);\n    \n    \n    vec3 color = c4;\n    \n    #define pupilsize (cos(iTime) * cos(iTime) * 0.05 + 0.07)\n    \n    // Left Eye\n    color = mix(c2, color, S(boxDist(uv + vec2(0.25, -0.25), vec2(.2), 0.01), 0.01));\n    color = mix(c1, color, S(boxDist(uv + vec2(0.25, -0.25), vec2(.15), 0.01), 0.01));\n    color = mix(c1*0.5, color, S(boxDist(rot(uv + vec2(0.25, -0.25), -iTime), vec2(pupilsize), 0.01), 0.01));\n    \n    // Right eye\n    color = mix(c2, color, S(boxDist(uv + vec2(-0.25, -0.25), vec2(.2), 0.01), 0.01));\n    color = mix(c1, color, S(boxDist(uv + vec2(-0.25, -0.25), vec2(.15), 0.01), 0.01));\n    color = mix(c1*0.5, color, S(boxDist(rot(uv + vec2(-0.25, -0.25), iTime), vec2(pupilsize), 0.01), 0.01));\n    \n    \n    // Mouth\n    color = mix(c2, color, S(boxDist(uv + vec2(0., 0.25), vec2(.45, 0.2), 0.01), 0.01));\n    color = mix(c4, color, S(boxDist(mod(uv,vec2(0.17, 1.)) + vec2(0. , -0.65), vec2(.05, 0.1), 0.01), 0.01));\n    \n    return color;\n}\n\n\n\n#define tilesize1 64.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2. / iResolution.xy) - vec2(1);\n    vec2 norFragCoord = fragCoord.xy - iResolution.xy * 0.5;\n    vec2 uvblocks = floor(norFragCoord.xy / tilesize1);\n\t\n    \n    vec3 color = pat2(fract(norFragCoord.xy / tilesize1), vec2(sin(uvblocks.y *10.)*0.5, sin(uvblocks.y*10.)));\n    \n    if (mod(uvblocks, 2.0) == vec2(0.0) || mod(uvblocks.x + uvblocks.y, 2.) == 0.0)\n    {\n        color = pat1(fract(norFragCoord.xy / tilesize1), vec2(0));\n    }\n    \n    \n\tfragColor = vec4(color,1.0);\n    //fragColor = vec4(uvblocks.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}