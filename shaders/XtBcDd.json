{
    "Shader": {
        "info": {
            "date": "1510530560",
            "description": "Bright according to smallest locally minimum distance along ray before termination. Could be used for AA?\nAlso have corner detection using the laplacian (black lines)",
            "flags": 0,
            "hasliked": 0,
            "id": "XtBcDd",
            "likes": 9,
            "name": "Signed Distance Edge Detection",
            "published": 3,
            "tags": [
                "effect",
                "edgedetection",
                "glow",
                "technique",
                "npr"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 1037
        },
        "renderpass": [
            {
                "code": "#define fdist 0.5\n#define iters 90\n#define tol 0.001\n#define maxdist 100.\n#define eps 0.01\n#define tmin 0.1\n#define bevel 0.1\n#define innerradius 0.2\n#define sidelength 0.3\n#define gridlength 1.0\n\n#define PI 3.1415926\n\nfloat box(vec3 ro, vec3 rd) {\n    ro = mod(ro, gridlength) - gridlength/2.;\n    vec3 t = -ro/rd + abs(gridlength/rd/2.);\n    return min(t.x, min(t.y, t.z));\n}\n\nvec2 map(vec3 ro) {\n    ro = mod(ro, gridlength) - gridlength/2.;\n    \n    //beveled cube\n    vec3 rad = clamp(ro, -sidelength, sidelength);\n    float d = length(ro-rad) - bevel;\n    \n    d = max(d, -length(ro.xy-clamp(ro.xy, -innerradius, innerradius))+bevel);\n    d = max(d, -length(ro.yz-clamp(ro.yz, -innerradius, innerradius))+bevel);\n    d = max(d, -length(ro.zx-clamp(ro.zx, -innerradius, innerradius))+bevel);\n    \n    return vec2(d, 1.0);\n}\n\nvec2 map(vec3 ro, vec3 rd) {\n    float t = box(ro, rd);\n    vec2 m = map(ro);\n    if (m.x < t) {\n        return m;\n    }\n    return vec2(t+tol, 0.0);\n}\n\nvec3 raytrace(vec3 ro, vec3 rd) {\n    float t = 0.;\n    vec2 m = map(ro, rd);\n    //fac.xyz are consecutive measurements, fac.w is the last local minimum\n    vec4 fac = vec4(maxdist);\n    float lastmat = 0.;\n    int i;\n    for (i=0; i<iters; i++) {\n        t += m.x;\n        m = map(ro + rd * t, rd);\n        fac.x = m.x;// / t;\n        //update facmin to last seen local minimum (not counting voxel borders)\n        if (lastmat > 0. && fac.y < fac.x && fac.y <= fac.z && fac.y < fac.w) {\n            fac.w = fac.y;\n        }\n        lastmat = m.y;\n        fac.zy = fac.yx;\n        if (abs(m.x) < tol) {\n            return vec3(t, m.y, fac.w);\n        } else if (m.x > maxdist) {\n            break;\n        }\n    }\n    return vec3(t, 0., fac.w);\n}\n\nvec4 getnormal(vec3 ro) {\n    vec2 d = vec2(eps, 0.0);\n    float x1 = map(ro+d.xyy).x;\n    float x2 = map(ro-d.xyy).x;\n    float y1 = map(ro+d.yxy).x;\n    float y2 = map(ro-d.yxy).x;\n    float z1 = map(ro+d.yyx).x;\n    float z2 = map(ro-d.yyx).x;\n    return vec4(normalize(vec3(\n        x1-x2,\n        y1-y2,\n        z1-z2)),\n        x1+x2+y1+y2+z1+z2-6.*map(ro).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float h = iMouse.y < 1. ? 0. : (iMouse.y-iResolution.y/2.)/200.;\n    float ww = iMouse.x < 1. ? 0. : (iMouse.x-iResolution.x/2.)/200.;\n    vec3 ro = vec3(iTime/2., 0.5 + sin(iTime/3.)/5., 0.5 + cos(iTime/3.)/5.);\n    vec3 w = vec3(cos(h)*cos(ww), sin(h)*cos(ww), sin(ww));\n    vec3 u = normalize(cross(w, vec3(0., 10.0, 0.)));\n    vec3 v = cross(u, w);\n    vec3 rd = normalize(w*fdist+(fragCoord.x/iResolution.x-0.5)*u+(fragCoord.y-iResolution.y/2.0)/iResolution.x*v);\n    vec3 d = raytrace(ro, rd);\n    vec4 n = getnormal(ro + rd*d.x);\n    fragColor = d.y < 0.5 ? vec4(1.) : vec4(vec3(smoothstep(0.01, 0.005, d.z)) + n.xyz/4.-0.5 + smoothstep(0.02, 0.01, n.w),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}