{
    "Shader": {
        "info": {
            "date": "1585518482",
            "description": "procedural",
            "flags": 0,
            "hasliked": 0,
            "id": "tsfcDB",
            "likes": 5,
            "name": "Circuit[Experiment]",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "float N21(vec2 p) {\n   \treturn fract(sin(p.x*100.+p.y*6574.)*5647.);\n}\n\nfloat getValue(vec2 id){\n   \treturn N21(id);\n}\n\nvec2 getMax(vec2 id){\n    vec2 ans = id;\n    for (float i = -1.; i < 2.; i++){\n        for (float j = -1.; j < 2.; j++){\n            ans = (getValue(id + vec2(i, j)) > getValue(ans)) ? id + vec2(i, j) : ans;\n        }\n    }\n    return ans;\n}\n\nvec2 upperbound(vec2 id){\n    vec2 ans = getMax(id);\n    for (float i = -1.; i < 2.; i++){\n        for (float j = -1.; j < 2.; j++){\n            float f = getValue(id + vec2(i, j));\n            ans = (f < getValue(ans) && f > getValue(id)) ? id + vec2(i, j) : ans;\n        }\n    }\n    return ans;\n}\n\nvec2 to(vec2 id){\n    /*if (fract(iTime) < 0.5){\n    \treturn getMax(id);\n    }*/\n    return upperbound(id);\n}\n\nfloat sdCapsule( vec2 p, vec2 a, vec2 b, float r )\n{\n  vec2 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nvec3 gradient(float t){\n   \treturn mix(vec3(255., 237., 0.) / 256., vec3(0., 168., 107.) / 256., t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy)/iResolution.y;\n    \n    uv += vec2(iTime, iTime) / 20.;\n\n    vec2 id = floor(uv * 10.);\n    vec2 lv = (fract(uv * 10.) - 0.5) * 2.; // -1 to 1\n    \n    vec3 col = vec3(getValue(id));\n    \n\tcol = vec3(((to(id) - id) + vec2(1.)) * 0.5, 0);\n    col = vec3(\n        smoothstep(\n            0.,\n            0.1,\n            sdCapsule(\n                lv, \n                vec2(0, 0), \n                to(id) - id, \n                0.1\n            )\n        )\n    );\n    \n    for (float i = -1.; i < 2.; i++){\n        for (float j = -1.; j < 2.; j++){\n            vec2 v = id + vec2(i, j);\n            if (length(to(v) - id) < 0.01){\n                col = min(\n                    col, \n                \tvec3(\n                    \tsmoothstep(\n                            0.,\n                            0.1,\n                            sdCapsule(\n                                lv, \n                                vec2(0, 0), \n                                v - id,\n                                0.1\n                            )\n                        )\n                    )\n                );\n            }\n        }\n    }\n    \n    if (max(1. - abs(lv.x), 1. - abs(lv.y)) < 0.3){\n        col = vec3(\n            smoothstep(\n                0.,\n                0.1,\n                sdCapsule(\n                    lv, \n                    vec2(0, 0), \n                    to(id) - id, \n                    0.1\n                )\n            )\n        );\n        vec2 xd = (id + floor((lv - 1.) / 2. + 0.5));\n        for (float i = 0.; i < 1.9; i++){\n        for (float j = 0.; j < 1.9; j++){\n            vec2 v = xd + vec2(i, j);\n            vec2 opsit = xd + vec2(1. - i, 1. - j);\n            if (length(to(v) - opsit) < 0.01){\n                col = \n                \tvec3(\n                    \tsmoothstep(\n                            0.,\n                            0.1,\n                            sdCapsule(\n                                lv, \n                                vec2(0, 0), \n                                v - opsit,\n                                0.1\n                            )\n                        )\n                    );\n            }\n        }\n        }\n        fragColor = vec4(xd / 5., 0., 0.);\n        //fragColor = col;\n        //col = gradient(col.x);\n        //fragColor = vec4(col,1.0);\n        //return;\n    }\n    \n    //col.xy += id / 10.;\n    //col *= vec3(82., 204., 0.) / 256.;\n    col = gradient(col.x);\n    //col *= vec3(((to(id) - id) + vec2(1.)) * 0.5, 0);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}