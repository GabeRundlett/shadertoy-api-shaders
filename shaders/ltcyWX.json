{
    "Shader": {
        "info": {
            "date": "1534304850",
            "description": "inspired by https://www.shadertoy.com/view/XlcyD8",
            "flags": 32,
            "hasliked": 0,
            "id": "ltcyWX",
            "likes": 5,
            "name": "^RON",
            "published": 3,
            "tags": [
                "pattern"
            ],
            "usePreview": 0,
            "username": "rast1234",
            "viewed": 521
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 c = texture(iChannel0, fragCoord.xy / iResolution.xy).rgb;\n\t\n    if (c.b == 0.0) {\n        const int mSize = 8;\n        const int kSize = (mSize-1)/2;\n        float kernel[mSize];\n        vec3 final_colour = vec3(0.0);\n\n        //create the 1-D kernel\n        float sigma = 8.0;\n        float Z = 0.0;\n        for (int j = 0; j <= kSize; ++j)\n        {\n            kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n        }\n\n        //get the normalization factor (as the gaussian has been clamped)\n        for (int j = 0; j < mSize; ++j)\n        {\n            Z += kernel[j];\n        }\n\n        //read out the texels\n        for (int i=-kSize; i <= kSize; ++i)\n        {\n            for (int j=-kSize; j <= kSize; ++j)\n            {\n                final_colour += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n            }\n        }\n\n\n        fragColor = vec4(final_colour/(Z*Z)*1.5, 1.0);  // with gauss blur\n        //fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    } else {\n        fragColor = vec4(c, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float is_prime(int num)\n{\n     if (num <= 1) return 0.0;\n     if (num % 2 == 0 && num > 2) return 0.0;\n\n     for(int i = 3; i < int(floor(sqrt(float(num)))); i+= 2)\n     {\n         if (num % i == 0)\n             return 0.0;\n     }\n     return 1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // (iTime * x) results in different scroll speed\n    // (iMouse * x) alters mouse scroll behavior\n    int temp = (\n        int(fragCoord.x + iTime * 100.0 + iMouse.x * -1.0)\n        ^  // try & |\n        int(fragCoord.y + iTime * 300.0 + iMouse.y * -1.0)\n    );\n\n    float p = is_prime(temp);\n\n    fragColor = vec4(0.0 , p*0.93, p*0.93, 1.0);  //rgb. alpha ignored.\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}