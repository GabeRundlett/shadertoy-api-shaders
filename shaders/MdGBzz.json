{
    "Shader": {
        "info": {
            "date": "1527431020",
            "description": "Raytracing example",
            "flags": 0,
            "hasliked": 0,
            "id": "MdGBzz",
            "likes": 1,
            "name": "Wanderlust",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Julius",
            "viewed": 477
        },
        "renderpass": [
            {
                "code": "struct ray { vec3 origin; vec3 direction; };\n  \nray cameraRay(vec2 uv, vec3 camera) {    \n    vec2 pos = uv - vec2(.5, .5);\n    \n\treturn ray(camera, vec3(pos.x, pos.y, 1));\n}\n\nvec3 intersectPlane(float planeHeight, ray r) {\n\tfloat height = planeHeight - r.origin.y;\n    \n    return r.origin + r.direction / r.direction.y * height;\n}\n\nfloat rand(vec3 v){\n    return fract(sin(dot(v ,vec3(12.9898,78.233,.0235))) * 43758.5453);\n}\n\nvec3 stars(vec3 direction) {\n\tif(rand(direction) > .0001)\n        return vec3(0,0,0);\n    else\n        return vec3(1,1,1);\n}\n\nvec3 checkered(vec2 location) {\n\tif ((mod(location.x, 2.) > 1.) != (mod(location.y, 2.) > 1.))\n        return vec3(0,0,0);\n    else\n        return vec3(1,1,1);\n}\n\nvec3 foggy(vec3 color, float d, float view) {\n    float viewFactor = max(0., view / d);\n    \n\treturn color * viewFactor + vec3(.5, .5, .5) * (1. - viewFactor);\n}\n\nvec3 traceColor(ray r) {\n    float d;\n    vec3 color;\n    \n    if(r.direction.y >= 0.) {\n    \tcolor = stars(r.direction);\n        d = 50.;   \n    } else {\n        vec3 intersect = intersectPlane(0., r);\n        d = length(r.origin - intersect);\n        color = checkered(intersect.xz);\n    }\n    \n    return foggy(color, d, r.origin.z * .1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    ray r = cameraRay(uv, vec3(0,1,iTime * iTime));\n    \n    vec3 col = traceColor(r);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}