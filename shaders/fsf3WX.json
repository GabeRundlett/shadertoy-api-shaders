{
    "Shader": {
        "info": {
            "date": "1616612094",
            "description": "3D Sierpinsky: outside if one of the ternary bits of location is 1 in at least 2 dimensions simultaneously.\nBut you can experiment other counts ;-)\n\nset OPAQUE to 0 for transparency ( costly ! )",
            "flags": 0,
            "hasliked": 0,
            "id": "fsf3WX",
            "likes": 14,
            "name": "3D Sierpinski ternary bits",
            "published": 3,
            "tags": [
                "sierpinski",
                "sierpinsky"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "// Fork of \"Sierpinsky ternary bits\" by FabriceNeyret2. https://shadertoy.com/view/NdX3WX\n\n#define OPAQUE 1\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n    vec2 R = iResolution.xy;\n    int i, z, n = int(log2(R.x));\n\n    vec2 t = .5 * vec2( cos(iTime), sin(iTime) );   // 3rd dim projection angle\n\n // z = iFrame % int(R.y); { \n    for ( z = 0; z <= int(R.y); z++ ) {             // slices along depth\n        ivec3 I =  ivec3 (U - t*float(z) , z ), F;  // I = 3D location\n        for ( i = 0; i <= n; i++, I/=3 ) {          // inspect ternary bits\n            F = 1-abs(I%3-1);                       // iseq(I,1)\n         // F = ivec3(equal( I%3, ivec3(1) ));      // iseq(I,1)\n            if ( F.x+F.y+F.z > 1 ) break;           // at least 2 bits at 1: exit\n          }\n#if OPAQUE\n        if ( i == n+1 ) {                           // in Sierpinsky\n            O += vec4( i == n+1 )*exp(-float(z)*4./R.y); // AO \n            break;\n        }\n#else\n        if ( i == n+1 )  O += vec4( i == n+1 );     // in Sierpinsky : optical depth++\n#endif\n    }\n  \n#if !OPAQUE\n    O = 1.-exp(-O/40.);                             // optical depth to opacity\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}