{
    "Shader": {
        "info": {
            "date": "1637702399",
            "description": "https://www.activision.com/cdn/research/s2017_pbs_multilayered_slides_final.pdf",
            "flags": 0,
            "hasliked": 0,
            "id": "wsdXDl",
            "likes": 5,
            "name": "test multi layered material",
            "published": 3,
            "tags": [
                "material"
            ],
            "usePreview": 0,
            "username": "mrExalight",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "struct Material{\n    vec3 _color;\n\tvec3 _absorption;\n    vec4 _kadsq;\n    float _thickness;\n    float _ior;\n};\n\n\nfloat getHeight(sampler2D sampler, vec2 uv) {\n  return texture(sampler, uv).r;\n}\n\nvec4 bumpFromDepth(sampler2D sampler, vec2 uv, vec2 resolution, float scale) {\n  vec2 step = 1. / resolution;\n    \n  float height = getHeight(sampler, uv);\n    \n  vec2 dxy = height - vec2(\n      getHeight(sampler, uv + vec2(step.x, 0.)), \n      getHeight(sampler, uv + vec2(0., step.y))\n  );\n    \n  return vec4(normalize(vec3(dxy * scale / step, 1.)), height);\n}\n\nvec3 DirectAbsorption( float NdotV, float NdotL, vec3 alpha, float d )\n{\n    vec3 color;\n    float denom = max( NdotL * NdotV, 0.001 );\n    color = exp( -alpha * ( d * ( ( NdotL + NdotV ) / denom) ) );\n    return color;\n}\n\nbool renderLayer(inout vec3 point, inout vec3 eye, inout vec3 color, inout vec2 uv, vec3 normal, vec3 lightColor, vec3 lightPos, inout vec3 absorption, sampler2D sampler, Material material )\n{\n    \n    float d = material._thickness;\n   \n    vec3 eyeDir = normalize(point - eye);\n    vec3 lightDir = normalize(point - lightPos);\n\n    float NdotV = max(dot(normal,-eyeDir), 0.);\n    float NdotL = max(dot(normal,-lightDir), 0.);\n\n    vec3 colorMaterial = vec3(0.);\n\n    colorMaterial += material._color  * material._kadsq.x;\n\n    colorMaterial += lightColor * material._color * material._kadsq.y * max(NdotL,0.);\n\n    colorMaterial += lightColor * material._kadsq.z * pow(max(dot(reflect(lightDir,normal),-eyeDir),0.),material._kadsq.w);\n    \n    color += colorMaterial * absorption;\n    \n    vec3 refractedEye = normalize(refract(eyeDir,normal,material._ior));\n        \n    float cosAlpha = dot(-normal,refractedEye);\n    \n    if(cosAlpha < 0.)\n        return false;\n    \n    float distanceToPointOnTheNextMaterial = d / cosAlpha;\n\n    absorption = DirectAbsorption( NdotV, NdotL, material._absorption, distanceToPointOnTheNextMaterial );\n\n    vec3 tmpPoint = point + refractedEye * distanceToPointOnTheNextMaterial;\n\n    uv = mod(uv + (tmpPoint - point).xy, 1.);\n\n    point = tmpPoint;\n\n    return true;\n}\n\nfloat waterMap( vec2 pos ) {\n\tvec2 posm = pos * m2;\n\t\n\treturn abs( fbm( vec3( 8.*posm, iTime ))-0.5 )* 0.1;\n}\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 dx = vec2( EPSILON, 0. );\n\tvec2 dz = vec2( 0., EPSILON );\n    \n    float refldist = 10.;\n    \n    float bumpfactor = BUMPFACTOR * (1. - smoothstep( 0., BUMPDISTANCE, refldist) );\n    \n    vec3 normal = vec3( 0., 0., 0. );\n\tnormal.x = -bumpfactor * (waterMap(uv + dx) - waterMap(uv-dx) ) / (2. * EPSILON);\n\tnormal.z = -bumpfactor * (waterMap(uv + dz) - waterMap(uv-dz) ) / (2. * EPSILON);\n\tnormal = normalize( normal );\n \n    fragColor = vec4(normal,1.0);\n \n /*\n    Material materials[2];\n    materials[0] = Material(vec3(.0), vec3(.8, .4, .0), vec4(.3, .8, .6, 100.), texture(iChannel1, uv).r * 2., 1.);\n    \n    \n    vec3 point = vec3(uv,0.);\n    vec3 eye = vec3(iMouse.xy/iResolution.xy,10.0);\n    vec3 color = vec3(0);\n    vec3 lightColor = vec3(3.);\n    vec3 lightPos = vec3(iMouse.xy/iResolution.xy,0.2);\n    vec3 absorption = vec3(1.);\n    \n    //vec3 normal = bumpFromDepth(iChannel1, uv, iResolution.xy, .1).rgb;\n    bool rc = renderLayer(point, eye, color, uv, normal, lightColor, lightPos, absorption, iChannel1, materials[0] );\n    if( rc )\n    {\n        materials[1] = Material(texture(iChannel0, uv).rgb, vec3(0.),vec4(.1, .7, .7, 1000.),.01,1.); // TODO : make an update function for material\n        normal = bumpFromDepth(iChannel0, uv, iResolution.xy, .01).rgb;\n        renderLayer(point, eye, color, uv, normal, lightColor, lightPos, absorption, iChannel0, materials[1] );\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n    */\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}