{
    "Shader": {
        "info": {
            "date": "1685540808",
            "description": "some line pattern changing over time. first frag shader idea that i did finish. looks cool but not as mezmorising as i hoped.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtdSzB",
            "likes": 5,
            "name": "wavy lines turn thing",
            "published": 3,
            "tags": [
                "line"
            ],
            "usePreview": 0,
            "username": "Georg",
            "viewed": 165
        },
        "renderpass": [
            {
                "code": "// Author:\n// Title:\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define P 0.003 * GRID\n#define GRID 16.0\n#define PI 3.14159265359 \n#define u_time iTime\n#define u_resolution iResolution\n\nvec2 rotate(vec2 v, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 rotationMatrix = mat2(c, -s, s, c);\n    return rotationMatrix * v;\n}\n\nvec2 gridi(vec2 st){\n    return floor(st * GRID);\n}\n\nvec2 gridf(vec2 st){\n    return fract(st * GRID);\n}\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat random(float x) {\n    return fract(sin(x) * 43758.5453);\n}\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n\n    float a = random(i);\n    float b = random(i + 1.0);\n\n    // Smooth interpolation\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u);\n}\n\nfloat f2(float x){\n    return noise(x/32.)*2.+noise(x/16.)+ x/128.;\n}\n\nfloat f3(float x){\n    return floor(f2(floor(x)));\n}\n\nfloat f4(float x){\n    return smoothstep(0.,1.,fract(x));\n}\n\nfloat f5(float x){\n    return f3(x)*(1.-f4(x))+f3(x+1.)*f4(x);\n}\n\nfloat circle(vec2 st, float r, float t){\n    float d = length(st);\n    d = smoothstep(r - t - P, r - t, d) - smoothstep(r + t, r + t + P, d) ;\n    \n    return d;\n}\n\nfloat rotate_noise(float x){\n    return f5(x) * PI/2.0;\n}\n\nfloat pattern(vec2 st, float t){\n    st -= vec2(0.5, 0.5);\n    st = rotate(st, rotate_noise(t));\n    st += vec2(0.5, 0.5);\n    float c = (circle(1.0 - st, 0.5, 0.062) + circle(st, 0.5, 0.062)) * circle(st-0.5, 0.25, 0.25);\n    float r = 1. - c;\n    \n    c = 1.0 - circle(st-0.5, 0.25, 0.25);\n    //r -= c * 0.75;\n    \n    \n    \n    return r;\n}\n\nfloat pattern(vec2 st){\n    vec2 gdi = gridi(st);\n    vec2 gdf = gridf(st);\n    \n    return pattern(gdf, (random(gdi) + 1.0) * 128.0 * 128.0 + u_time * 1.2 + random(gdi));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    vec3 color = vec3(0.);\n    \n    color = vec3(pattern(st));\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}