{
    "Shader": {
        "info": {
            "date": "1688264247",
            "description": "see you",
            "flags": 0,
            "hasliked": 0,
            "id": "cdjyD3",
            "likes": 3,
            "name": "TomYum sea food",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 1422
        },
        "renderpass": [
            {
                "code": "float e(float a) { return fract(iTime * a) * 3.141593 * 4.; } \nint t = 0; \nfloat n(float a, float b, float c) { float d = clamp(.5 + .5 * (b - a) / c, 0., 1.); return mix(b, a, d) - c * d * (1. - d); } \nmat2 k(float a) { float b = sin(a), c = cos(a); return mat2(c, b, -b, c); } \nfloat z(in vec2 a, in float c) { const vec3 b = vec3(-.92388, .382683, .414214); a = abs(a), a -= 2. * min(dot(vec2(b.x, b.y), a), 0.) * vec2(b.x, b.y), a -= 2. * min(dot(vec2(-b.x, b.y), a), 0.) * vec2(-b.x, b.y), a -= vec2(clamp(a.x, -b.z * c, b.z * c), c); return length(a) * sign(a.y); } \nfloat A(vec3 a, float c) { vec2 b = a.xy; b *= k(e(.25)), b.x += cos(a.z + e(.25) * c) * .3, b.y += sin(a.z + e(.25) * c) * .3; \nreturn max(z(b, .05), abs(a.z) - 20.); } vec2 B(in vec2 a, float c) { float b = 6.283185 / c, d = (atan(a.y, a.x) + b * .5) / b, f = floor(d), g = b * f; a *= k(g); return a; } float o(vec3 a, float d, float b) { float c = 0.; a.yz *= k(.502655), a.xy *= k(-e(.025) + b * 3.141593), a.xy = B(a.xy, 10.), c = A(a - vec3(d, 0, 0), b); return c; } vec4 l = vec4(0), h = vec4(0); float i(vec3 b) { float a = 5.; a = n(a, o(b, 1.2, 0.), .1), a = n(a, o(b, 1.5, 1.5), .1), a = n(a, o(b, 2.5, 2.), .1), t == 1 ? l.a = a : h.a = a; return a; } vec3 p(in vec3 b) { vec2 a = vec2(1, -1) * .5773; return normalize(a.xyy * i(b + a.xyy * 5e-4) + a.yyx * i(b + a.yyx * 5e-4) + a.yxy * i(b + a.yxy * 5e-4) + a.xxx * i(b + a.xxx * 5e-4)); } vec3 q(vec2 a) { vec2 b = a.xy - .5, c = b.xy * b.xy + sin(a.x * 18.) / 25. * sin(a.y * 7. + 1.5) + a.x * sin(0.) / 16. + a.y * sin(1.2) / 16. + a * fract(iTime - .5); float d = sqrt(abs(c.x + c.y * .5) * 25.) * 5.; return vec3(sin(d * 1.25 + 2.), abs(sin(d * 1. - 1.) - sin(d)), abs(sin(d) * 1.)); } float u(inout vec3 b, inout float c, inout float a, vec3 d, vec3 f, int m) { if (m == 1000) for (int g = 0; g < 256; g++) { b = d + f * a, c = i(b); if (a > 1000.) break; a += c * .111112; } else for (int j = 0; j < 32; j++) { b = d + f * a, c = i(b); if (a > 1000.) break; a += c * .333332; } return 1.; } void v(vec3 w, vec3 b) { t++; float x = 0., y = 0., j = 0.; vec3 m = normalize(vec3(.57703)); m.xy *= k(e(.5)); vec3 r = normalize(m - b), c = vec3(0); y = u(c, j, x, w, b, 1000); if (j < 1e-3) { vec3 a = p(c); float E = dot(a, vec3(0, -.3, 0)), d = clamp(dot(a, vec3(.5, .5, -.3)), 0., 1.), s = clamp(dot(a, vec3(0, -.5, .3)), 0., 1.), C = clamp(dot(a, vec3(.5, -1.1, -5.1)), 0., 1.), f = pow(clamp(dot(a, r), .52, 2.), 10.); f *= d + s; vec3 g = reflect(a, b * .2); h.rgb = d * q(g.xy) + s * q(g.xy) + C * q(g.xy) * .15, h.rgb += sign(h.rgb) * .6, b = reflect(b, a), y = u(c, j, x, w, b * .04, 128), a = p(c), d = clamp(dot(a, vec3(.5, .5, -.3)), 0., 1.), f = pow(clamp(dot(a, r), .52, 2.), 10.), f *= d + s, g = reflect(a, b * .3), h.rgb += vec3(f * vec3(.5)) + (.5 + .35 * cos(d + e(.25) + b.xyx * 2. + vec3(0, 2, 4))) * .2; } } \n\nfloat D(vec2 a) { \n\n    a.x += cos( e( .125 ) ) * .3;\n    a.y += sin( e( .125 ) ) * .3;\n    \n    a = mod( a, 1. ) - .5;\n\n    float d =  length( a ) - .5;\n    \n    d = max(\n        d,\n        -( length( a ) - .1 )\n    );\n\n    return d;\n\n} \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){ \n    vec2 b = fragCoord.xy / iResolution.xy; b = (b - .5) * 2., b.x *= iResolution.x / iResolution.y; vec3 a = vec3(.1), d = vec3(0, 0, -5), c = vec3(b, 2); \n    c.x += cos(e(.25)) * .1, c.z += sin(e(.25)) * .12; \n    vec3 col = vec3( .1 );\n    v(d, c); // raymarching outline\n    c.xy *= 1.03; // outline width\n    v(d, c); // raymarching inline\n    \n    // draw outline\n    l.a = mix(\n      l.a,\n      1.,\n      h.a\n    );\n    \n    // normalized pixel depth\n    l.a = clamp( l.a, 0., 1. ),h.a = clamp( h.a, 0., 1. );\n    \n    // mix background through path\n    col = mix(\n        vec3( 0.00, 0.99, 1.00 ),\n        vec3(1.),\n        step( D( b ), 0. )\n    );\n    \n    // draw outline to pixel\n    col = mix(\n        col,\n        vec3( 0. ),\n        l.a\n    );\n    \n    // put rshape pixel\n    col = mix(\n        col,\n        h.rgb,\n        1. - h.a\n    );\n    \n    fragColor = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}