{
    "Shader": {
        "info": {
            "date": "1674810715",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "mlsXDN",
            "likes": 17,
            "name": "Shortest Truchet circle (145 ch)",
            "published": 3,
            "tags": [
                "2d",
                "tiling",
                "2tweets",
                "short",
                "golf"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "// see more readable version below\n\n\n// --- -16 by Xor\n\nvoid mainImage( out vec4 O, vec2 U ){\n    \n    O = iResolution.xxxx/18.;\n    U *= sign( cos(ceil(U /= O.x) * ceil(U.y)) );   // random flip of tile coords  \n    O *= .06 - abs( length(min( U = fract(U), 1.-U.yx)) - .5 ) *.6;\n}\n\n\n\n\n\n\n/** // --- 161 chars\n// new version adapted from Shane https://www.shadertoy.com/view/ls33DN\nvoid mainImage( out vec4 O, vec2 U ){\n    \n    vec3 R = iResolution;\n    U.x *= sign( cos(length(ceil(U *= 18./R.x ))*99.) );   // random flip of tile coords  \n    O = ( .1 - abs( min(length(U = fract(U)), length(--U)) - .5 )  ) *R.xxxx/25.; // draw 2 arcs in tile\n}\n\n\n\n\n\n\n/** // 183 chars \n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, \n          U = 18. * u / R.x,                               // normalized coordinates\n          F = fract(                                       // local tile coords\n                 fract(1e4*sin(dot(ceil(U),R-17.))) > .5   // random PI/2 rotation per tile   \n                     ? vec2(-U.y,U) : U );\n    O = ( .1 - abs( length(  F.x+F.y > 1. ? 1.-F : F ) -.5 )  ) * R.xxxx/25.; // draw arcs\n // O.b = mod(ceil(U).x+ceil(U).y,2.);                     // show tiling\n}\n\n\n\n\n\n\n/** // 196 chars \n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, \n          U = 9. * ( u+u - R ) / R.x,                      // normalized coordinates\n          F = fract(U) -.5;                                // local tile coords\n    fract(1e4*sin(dot(ceil(U),R-17.))) > .5                // random PI/2 rotation     \n          ? F = vec2(-F.y,F) : F;\n    O = ( .1 - abs( length(  F.y > -F.x ? .5-F : .5+F ) -.5 )  ) * R.xxxx/25.; // draw arcs\n // O.b = mod(ceil(U).x+ceil(U).y,2.);                     // show tiling\n}\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}