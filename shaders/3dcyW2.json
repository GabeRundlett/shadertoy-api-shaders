{
    "Shader": {
        "info": {
            "date": "1601963351",
            "description": "click somewhere in the middle of the screen, it takes about 30 sec to start finishing to fill the belt",
            "flags": 48,
            "hasliked": 0,
            "id": "3dcyW2",
            "likes": 5,
            "name": "automata_8",
            "published": 3,
            "tags": [
                "mouse",
                "automata",
                "gol"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "// Fork of \"automata_6\" by balkhan. https://shadertoy.com/view/3dBcWG\n// 2020-10-03 02:43:27\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n\to = B(f/R);\n\to.xyz = sin(o.x+ vec3(0.0, 1.04, 2.08) );\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nfloat d(vec2 f, float s) // game of life modified, s is neighbors sampling scale\n{\n    vec2 i;\n\n    float r = B(f).x;\n    float m = .0;\n    for (int k = 0; i = vec2(k%3, k/3)-1., k < 9; k++)\n        if (k != 4)  m += B((f+i*s/R) ).x;\n    if (\n        (\n       r > .0 && m >= 2. && m <= 3.\n        )\n       ||\n        (\n       r <= 0. && m >= 8.\n            )\n       )\n        r = 1.;\n    else\n        r = 0.;\n    return r;\n}\n\nfloat aliased_circle(vec2 f) \n    // this used to be \"length(f)-smallradius\" and then I noticed sometimes it gave constructing arms\n    // and so the quest to find the exact shape began\n    // and then it ended\n{\n    float r = .0;\n    f = abs(f); // symmetries are cool\n    if (\n        (f.x >= .0 && f.x < 2.\n         &&\n         f.y <= 8. && f.y > 7.\n        )\n        ||\n        (f.x >= .0 && f.x < 4.\n         &&\n         f.y <= 7. && f.y > 6.\n        )\n        ||\n        (f.x >= .0 && f.x < 6.\n         &&\n         f.y <= 6. && f.y > 4.\n        )\n        ||\n        (f.x >= .0 && f.x < 7.\n         &&\n         f.y <= 4. && f.y > 2.\n        )\n        ||\n        (f.x >= .0 && f.x < 8.\n         &&\n         f.y <= 2. && f.y > 0.\n        )\n        )\n\tr = 1.;\n    \n    return r;\n}\n\nfloat experiment(vec2 f)\n{\n    float r;\n    \n    if (\n        (\n        f.x > -2. && f.x <= 1.\n       &&\n        f.y > -4. && f.y <= 8.\n        )\n        ||\n        (\n        f.x > -4. && f.x <= 4.\n            &&\n        f.y > -0.0 && f.y <= 2.\n        )\n       )\n        r = 1.;\n    \n    return r;\n}\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    vec2 u = f / R, m = iMouse.x <= 1. ? R*.5 : iMouse.xy;\n    o = texture(iChannel1, u);\n    if(iChannelResolution[1].x < 1.)\n    {\n        o = vec4(0.);\n        return;\n    }\n\tfloat kb = texture(iChannel2, vec2(32.5/256., 0.25)).x; // keyboard\n        if (iFrame < 1 || kb > .5 || iMouse.z > .0)\n    {\n        o = o - o;\n        o.x = step(.0*aliased_circle(f-m.xy+vec2(300., 550.0)*1.0)*1.0+experiment(abs(f-m.xy)-vec2(100., 100.)*(R.y>200. ? 1.:.25)), .0)*.5+.0;\n        return ;\n    }\n    #ifdef SLOW_MO\n\tif (iFrame % 5 > 1) return;\n    #endif\n\n    \n    o += 2.*d(u, .5);\n    o -= 1.5*d(u, 1.5);\n    o += d(u, .25);\n    //o += d(u, .75)*-.03;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n#define SLOW_MO\n\n#define R iResolution.xy\n#define B(u) texture(iChannel1, u)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}