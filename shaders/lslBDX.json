{
    "Shader": {
        "info": {
            "date": "1498617544",
            "description": "A simple 2D rocket with smoke made out of sin waves. (Sorry I have no windows computers currently available to test for windows bugs)",
            "flags": 0,
            "hasliked": 0,
            "id": "lslBDX",
            "likes": 11,
            "name": "2D Rocket",
            "published": 3,
            "tags": [
                "2d",
                "glsl",
                "rocket"
            ],
            "usePreview": 0,
            "username": "antoineMoPa",
            "viewed": 1095
        },
        "renderpass": [
            {
                "code": "                \n#define PI 3.14159265359\n#define PI2 6.28318530718\n\n#define shadertoy 1\n\n#ifdef shadertoy\n// time is iTime in shadertoy\n#define time iTime\n#endif\n#ifndef shadertoy\n// Define some uniforms\n// (which shadertoy already defines for us, but not shadergif)\nprecision highp float;\nuniform float time;\nuniform float iTime;\nvarying vec2 UV;\nuniform vec3 iResolution;\n#endif\n\n\nvec4 rocket(vec2 pos){\n    vec4 col = vec4(0.0);\n    \n    // Clip (because otherwise a sine is repeated)\n    if(pos.x < -0.5 || pos.x > 0.5){\n        return col;\n    }\n    \n    if(\n      // Base parabolic shape\n      pos.y + 0.02 * cos(12.0 * pos.y + 0.1) * pos.y < 0.5 - pow(3.88 * pos.x, 2.0) && pos.y > -0.1 \n      ||\n        // Lower rectangle\n       ( pos.y < 0.0 && pos.y > -0.2 \n            && \n                // Lower left arc\n                (pos.x > -0.1 || distance(pos, vec2(-0.1,-0.1)) < 0.10) \n                // Lower right arc\n            &&     (pos.x < 0.1  || distance(pos, vec2(0.1,-0.1)) < 0.10)\n       )\n      )\n    {\n        // Window\n        if (\n            distance(pos, vec2(0.0,0.2)) < 0.05\n        )\n        {\n            col.rgb += vec3(0.1,0.1,0.1);\n            col.a = 1.0;\n        }\n        // Rest\n        else\n        {\n            col.rgb += vec3(1.0,1.0,1.0);\n            col.a = 1.0;\n        }\n    }\n    \n    else if (\n        pos.y < -0.4 + 0.5 * cos(4.5 * pos.x)\n        &&\n        pos.y > -0.5 + 0.3 * cos(3.0 * pos.x)\n    )\n    {\n        col.rgb += vec3(1.0,0.1,0.2);\n        col.a = 1.0;\n    }\n    \n    // Propeller\n    else if (pos.x < 0.1 && pos.y < 0.0 && pos.x > -0.1 && pos.y > -0.3)\n    {\n        col.rgb += vec3(0.3,0.3,0.3) + 0.3 * cos(pos.x * 10.0 + 1.0);\n        col.a = 1.0;\n    }\n       \n    \n    return col;\n}\n\nmat2 rotation(float angle){\n    mat2 r = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return r;\n}\n\nvec4 smoke(vec2 pos){\n    vec4 col = vec4(0.0);\n    \n    // Density\n    float d = 0.0;\n    \n    pos.y += 0.08;\n    \n    if(pos.y > 0.0){\n    \treturn col;\n    }\n    \n    pos.x += 0.003 * cos(20.0 * pos.y + 4.0 * time * PI2);\n    float dd = distance(pos,vec2(0.0,0.0));\n    if(dd > 1.0){\n    \tpos *= 2.2 * pow(1.0 - dd, 2.0);\n    }\n    \n    pos *= 1.9;\n    \n    d += cos(pos.x * 10.0);\n\td += cos(pos.x * 20.0);\n\td += cos(pos.x * 40.0);\n\t\n    d += 0.3 * cos(pos.y * 6.0 + 8.0 * time * PI2) - 1.4;\n\td += 0.3 * cos(pos.y * 50.0 + 4.0 * time * PI2) ;\n\td += 0.3 * cos(pos.y * 10.0 + 2.0 * time * PI2);\n    \n    if(distance(pos.x, 0.0) < 0.05){\n    \td *= 0.2 - distance(pos.x, 0.0);\t\n    } else {\n    \td *= 0.0;\n    }\n    if( d < 0.0){\n    \td = 0.0;\n    }\n    \n    float dy = distance(pos.y, 0.0);\n    \n    if(dy < 0.3){\n        float fac = 1.0 / 0.3 * dy;\n    \tcol.r += 50.0 * pow(1.0 - fac,2.0) * d;\n        col.g += 10.0 * pow(1.0 - fac,4.0) * d;\n        col.a += 20.0 * (1.0 - fac) * d;\n    }\n    \n    col.rgb += d * 10.0;\n    col.a += d;\n    \n    return col;\n}\n\n\nvec4 alpha_over(vec4 a, vec4 b){\n\treturn a * a.a + (1.0 - a.a) * b; \n}\n\nvoid mainImage(out vec4 col, in vec2 UV){\n    vec2 pos = UV / iResolution.xy;\n    pos -= vec2(0.5);\n    pos.x *= iResolution.x / iResolution.y;\n    \n    col = 0.4 * vec4(0.3, 0.5, 0.7, 0.0) - 0.2 * cos(time * 0.3 + pos.y + 0.35 * pos.x);\n    \n   \t\n    vec2 rocket_pos = pos * rotation(0.5 + 0.02 * cos(time * PI2) + 0.02 * cos(2.0 * time * PI2));\n    rocket_pos *= 3.9;\n    col = alpha_over(rocket(rocket_pos),col);\n    \n    vec2 smoke_pos = pos * rotation(0.5);\n    col = alpha_over(smoke(smoke_pos),col);\n\n    col.a = 1.0;\n}\n\n\n#ifndef shadertoy\nvoid main(){\n    vec2 uv = UV.xy * iResolution.xy;\n    vec4 col = vec4(0.0);\n\n    mainImage(col, uv);\n\n    gl_FragColor = col;\n}\n#endif",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}