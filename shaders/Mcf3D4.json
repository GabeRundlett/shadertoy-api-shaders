{
    "Shader": {
        "info": {
            "date": "1703064969",
            "description": "How many coronas can you do with one given tile ?\nCould you place one more ? (answer: no. For this tile, Heesch number = 1 crown ).\nTry by yourself here ! :-p → https://www.shadertoy.com/view/4clGW4\nref: https://en.wikipedia.org/wiki/Heesch%27s_problem\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Mcf3D4",
            "likes": 27,
            "name": "corona tilings / Heesch problem",
            "published": 3,
            "tags": [
                "tiling",
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "// try the interactive version here: https://www.shadertoy.com/view/4clGW4\n\n#define S(v) smoothstep(20./R.y,0., v)     // AA draw\n \nvec2 D = vec2(1.732,1);\n\nfloat T(vec2 U, float a) {                 // --- tear-shape tile SDF\n    U *= mat2(cos( a - vec4(0,33,11,0)));  // local frame → to peak direction\n    U.y = abs(U.y);                        // tear symmetry\n    float l = length(U);\n // return atan(U.y,U.x) > 3.14/6. || dot(U,U) > 3. \n    return U.x/l < .867 || l*l > 3. \n      ? l  - 1.                            // circle part\n      : 1. - length( U - D );              // peak part\n}\n// note: we could either avoid the rotation by adjusting peak angle + D offset\n// or avoid the atan by just considering cos = U.x/length < sqrt(3)/2\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 4.* ( u+u - R ) / R.y,\n         E = vec2(-D.x,D.y), J = vec2(0,2);\n    \n    float d = min( min( min( T(U  ,0.)  , T(U-D-D+J,3.14) ),   // center & E\n                        min( T(U+D,0.)  , T(U-D,3.14 ) )  ),   // SW & NE\n                   min( min( T(U+E,0.)  , T(U-E,-1.05) ),      // SE & NW\n                        min( T(U+J,1.05), T(U-J,-2.1 ) ) ));   //  S & N                   \n                   \n    O = vec4( max( S( abs(d) ) ,           // outline\n                   .5 * S(d) ) );          // fill\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}