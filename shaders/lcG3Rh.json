{
    "Shader": {
        "info": {
            "date": "1712377063",
            "description": "an attempt at analytic depth of field for infinitesimal line segments",
            "flags": 0,
            "hasliked": 0,
            "id": "lcG3Rh",
            "likes": 13,
            "name": "DOF cube",
            "published": 3,
            "tags": [
                "dof",
                "bokeh",
                "depthoffield"
            ],
            "usePreview": 0,
            "username": "panic",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "// intensity of infinitesimal line\n#define K 0.0015\n// aperture size\n#define A 0.04\n// distance of camera from center of object\n#define D 4.\n// focused distance\n#define F (D-1.75)\n// zoom\n#define Z 1.\n\nfloat dof(vec2 uv, vec3 start, vec3 end)\n{\n    // add camera distance and perform perspective division.\n    start.z += D;\n    end.z += D;\n    start.xy /= start.z;\n    end.xy /= end.z;\n    // convert z coordinate to circle of confusion radius using the aperture A and focused distance F.\n    start.z = A * (start.z - F) / start.z;\n    end.z = A * (end.z - F) / end.z;\n    // find the interval of the line that contributes to the pixel at uv.\n    vec3 off = end - start;\n    float a = abs(off.x * off.x + off.y * off.y - off.z * off.z);\n    float b = -2. * (start.z * off.z + uv.x * off.x - start.x * off.x + uv.y * off.y - start.y * off.y);\n    float c = uv.x * uv.x - 2. * start.x * uv.x + start.x * start.x + uv.y * uv.y - 2. * start.y * uv.y + start.y * start.y - start.z * start.z;\n    float discrim = b * b - 4. * a * c;\n    if (discrim < 0.)\n        return 0.;\n    float d = sqrt(discrim);\n    float t0 = clamp((-b + d) / (2. * a), 0., 1.);\n    float t1 = clamp((-b - d) / (2. * a), 0., 1.);\n    if (t0 == t1)\n        return 0.;\n    // a circle of confusion of radius r contributes 1/r^2 intensity -- integrate this quantity over the interval.\n    vec3 p0 = start + off * t0;\n    vec3 p1 = start + off * t1;\n    float len = length(p1.xy - p0.xy);\n    return K * len / (p1.z * p0.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = Z*(fragCoord - iResolution.xy * 0.5)/iResolution.yy;\n    float t = iTime;\n    mat3x3 rot = mat3x3(\n        1, 0, 0,\n        0, cos(t), -sin(t),\n        0, sin(t), cos(t)\n    );\n    rot *= mat3x3(\n        cos(t * 0.37), -sin(t * 0.37), 0,\n        sin(t * 0.37), cos(t * 0.37), 0,\n        0, 0, 1\n    );\n    float color = 0.;\n    color += dof(uv,\n        rot * vec3(1, 1, 1),\n        rot * vec3(-1, 1, 1)\n    );\n    color += dof(uv,\n        rot * vec3(-1, 1, 1),\n        rot * vec3(-1, -1, 1)\n    );\n    color += dof(uv,\n        rot * vec3(-1, -1, 1),\n        rot * vec3(1, -1, 1)\n    );\n    color += dof(uv,\n        rot * vec3(1, -1, 1),\n        rot * vec3(1, 1, 1)\n    );\n    color += dof(uv,\n        rot * vec3(1, 1, -1),\n        rot * vec3(-1, 1, -1)\n    );\n    color += dof(uv,\n        rot * vec3(-1, 1, -1),\n        rot * vec3(-1, -1, -1)\n    );\n    color += dof(uv,\n        rot * vec3(-1, -1, -1),\n        rot * vec3(1, -1, -1)\n    );\n    color += dof(uv,\n        rot * vec3(1, -1, -1),\n        rot * vec3(1, 1, -1)\n    );\n    color += dof(uv,\n        rot * vec3(1, 1, 1),\n        rot * vec3(1, 1, -1)\n    );\n    color += dof(uv,\n        rot * vec3(-1, 1, 1),\n        rot * vec3(-1, 1, -1)\n    );\n    color += dof(uv,\n        rot * vec3(-1, -1, 1),\n        rot * vec3(-1, -1, -1)\n    );\n    color += dof(uv,\n        rot * vec3(1, -1, 1),\n        rot * vec3(1, -1, -1)\n    );\n    fragColor = vec4(vec3(sqrt(1. - color)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}