{
    "Shader": {
        "info": {
            "date": "1648831962",
            "description": "I made this a while ago but never uploaded it. Most of it's stolen from Shane's code (can't remember the link), very messily rewritten by me",
            "flags": 0,
            "hasliked": 0,
            "id": "7lscWX",
            "likes": 12,
            "name": "Wang Tiling 2930842",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "float h21 (vec2 uv, float sc) {\n    uv = mod(uv, sc);\n    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat sBox(vec2 p, vec2 b, float r){\n  vec2 d = abs(p) - b + r;\n  return min(max(d.x, d.y), 0.) + length(max(d, 0.)) - r;\n}\n\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n#define ss(a, b) 1. - smoothstep(0., a, b)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{            \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ouv = uv;\n\n    const float sc = 8.;\n    \n    uv *= sc;\n    uv -= vec2(1, 0.125) * iTime;\n    \n    vec2 ipos = floor(uv);\n    vec2 fpos = uv - ipos - 0.5;\n\n    // cp = edges we use, eps = all edges   \n    vec2[4] eps = vec2[4](vec2(-.5, .5), vec2(.5, .5), vec2(.5, -.5), vec2(-.5, -.5));\n    vec2[4] cp = eps; \n    \n    float h = h21(ipos, 301.);\n    \n    // Threshold + edge bits\n    float thr = 0.7;\n    vec4 bits;\n    for(int i = 0; i < 4; i++) \n        bits[i] = h21(ipos + eps[i], 301.) > thr ? 1. : 0.;\n      \n    // Number of edges used\n    int iNum = 0;\n    \n    // Count iNum + replace 0-iNum entries of cp with edges used\n    for(int i = 0; i < 4; i++) \n        if(bits[i] == 1.) cp[iNum++] = eps[i];       \n    \n    // Pipes\n    float ln = 1e5;\n    \n    // Width of stuff\n    float lw = 0.15;\n    \n    // Flag tiles with two end points on diagonals as curved\n    int bend = (iNum==2 && length(cp[0] - cp[1]) < sqrt(2.)) ? 1 : 0;\n        \n    // Non-diagonal neighbours (check all 4 sides)\n    for(int i = 0; i < 4; i++){\n        if(bits[i] > 0.5 && bend == 0) {\n            if (h > 0.125)\n                ln = min(ln, sdSegment(fpos, vec2(0), eps[i]) - lw);\n            else\n                ln = min(ln, sdSegment(fpos, 0.5 * eps[i], eps[i]) - lw);\n        }\n    } \n    \n    // Only 2 diagonal neighbours - 2 variations\n    if(bend==1) {\n        if (h > 0.125) {\n            vec2 pnt = 0.5 * (cp[0] + cp[1]);\n            vec2 dif = (fpos - pnt) * Rot(pi/4.);\n            ln = min(ln, abs(sBox(dif, sqrt(2.) * vec2(.25), .125)) - lw);  \n        } else {\n            ln = min(ln, sdSegment(fpos, 0.5 * cp[0], cp[0]) - lw);\n            ln = min(ln, sdSegment(fpos, 0.5 * cp[1], cp[1]) - lw);\n        }         \n    }\n\n    // Overlaps (I think)\n    float ln2 = 1e5;\n    if (bits[2] == 1.) {\n        ln2 = min(ln2, sdSegment(fpos, vec2(1,0), vec2(0,-1)) - lw);\n    }\n    \n    if (bits[0] == 1.) {\n        ln2 = min(ln2, sdSegment(fpos, vec2(-1,0), vec2(0,1)) - lw);\n    }\n\n    vec3 col = vec3(0,0,0.05);\n    \n    float k = sc / iResolution.y;\n    \n    vec3 dcol = vec3(1);\n    vec3 lcol = vec3(0,0,0.1);\n    \n    // The pipes.\n    col = mix(col, dcol, (ss(k, ln - 0.04)));\n    col = mix(col, lcol, ss(k, ln));\n    col = mix(col, dcol, ss(k, ln + .04));\n\n    // Overlapping outlines\n    col = mix(col, lcol, ss(k, ln2));\n    col = mix(col, dcol, ss(k, ln2 + .04));\n   \n    // i dont know\n    vec3 col2 = mix(col, vec3(0.1), ss(k,ln + 0.));\n    col = mix(col, col2, 0.5);\n   \n    // Yellow from the edges\n    float s = exp(-40. * (0.5 - mlength(ouv * vec2(iResolution.y/iResolution.x,1))));\n    vec3 e = vec3(0.5);\n    col *= pal(s + 1.65, e, e, e, 0.4 * vec3(0,1,2)/3.);\n\n    // Subtle vignette.\n    uv = fragCoord/iResolution.xy;\n    col *= pow(16.*(1. - uv.x)*(1. - uv.y)*uv.x*uv.y, 1./16.)*1.05;\n\n    // Rough gamma correction before presenting to the screen.\n    fragColor = vec4(sqrt(max(col, 0.)), 1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+0.0001)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.03;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}