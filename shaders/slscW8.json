{
    "Shader": {
        "info": {
            "date": "1647958032",
            "description": "Draw ~constant size dashed polyline \nmouse controls P1\n\n#def PHASES 1.:  the dash phase is constrained at vertices \n#def PHASES 0.: dashes corners at vertices",
            "flags": 0,
            "hasliked": 0,
            "id": "slscW8",
            "likes": 18,
            "name": "adaptive dashes",
            "published": 3,
            "tags": [
                "line",
                "drawing",
                "adaptive",
                "dashes"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "#define PHASES 0. // 1.: constrained random phases at vertices. 0. : all phases = 0. \n\n// utils from https://www.shadertoy.com/view/llySRh\n\n#define hash(p)  fract(sin( (.1+p) *  78.233 ) * 43758.5453 - PHASES*iTime )\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    return length(p - b * h);                         // dist to segment\n}\n#define S(v) smoothstep( 1.5/R.y,0., v )              // AA\n\n// modifies period T so as the extremities P1,P2 fit the phases a1, a2\n// then draw AA dashes  ( use S(line(U,P1,P2)) * L(P1,P2,a1,a2) )\n#define L(P1,P2,a1,a2) (                                        \\\n        l  = length(P2-P1),                                     \\\n        Ta =  l / ( floor(l/T) -PHASES*(fract(a1-a2+.5)-.5) ),  \\\n        l  = cos( 6.283*( length(U-P1)/Ta +PHASES*a1 ) ),       \\\n        clamp( .5 + .5*l/fwidth(l) , 0., 1. )                   \\\n    )       // or - if you don't like corners for PHASES = 0.\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          U = u / R.y,\n         P0 = vec2(.1),                               // 4Â points\n         P1 = iMouse.z > 0. ? iMouse.xy / R.y : vec2(.5),\n         P2 = .9*R/R.y,\n         P3 = vec2(.7*R.x/R.y,.3) + .2*cos( iTime + vec2(0,11) );\n         \n    float Ta, l, T = 20./R.y,                         // T: target dash period (pixels)\n         a0 = hash(0.), a1 = hash(1.), a2 = hash(2.), a3 = hash(3.),\n        d01 = line(U,P0,P1),                          // 4 random phases at points\n        d12 = line(U,P1,P2),\n        d23 = line(U,P2,P3),\n        d30 = line(U,P3,P0),\n        m = min( min(d01,d12), min(d23,d30) );\n\n    O = vec4(   m == d01 ? S(d01) * L(P0,P1,a0,a1)    // draw rectified dashes\n              : m == d12 ? S(d12) * L(P1,P2,a1,a2) \n              : m == d23 ? S(d23) * L(P2,P3,a2,a3) \n              :            S(d30) * L(P3,P0,a3,a0) \n            );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}