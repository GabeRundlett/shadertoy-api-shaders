{
    "Shader": {
        "info": {
            "date": "1586566028",
            "description": "an impromptu shader live coded in 30 minutes in front of my roommate. I was inspired by shader showdown and wanted to try it out. programmed on my phone with a bluetooth keyboard which was immensely frustrating",
            "flags": 0,
            "hasliked": 0,
            "id": "td2yWh",
            "likes": 16,
            "name": "Sonic Salad",
            "published": 3,
            "tags": [
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 681
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n#define time iTime\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n\treturn mix(dot(p,ax)*ax,p,cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p, mix(a, b, clamp(k,0.,1.) ));\n}\n\nfloat hash(float a, float b) {\n\treturn -1.+2.*fract(sin(dot(vec2(a,b), vec2(12.4348,74.38483)))*48573.2394);\n}\n\nfloat scene(vec3 p ) {\n\tfloat scale  = 0.2;\n\tvec3 id = floor(p*scale);\n    float idhash = hash(hash(id.y, id.x), id.z);\n\tfloat hash1 = hash(idhash, id.y)*6.28;\n\tfloat hash2 = hash(id.x, idhash)*6.28;\n\tvec3 ax = normalize(vec3(cos(hash1), sin(hash1)*cos(hash2), sin(hash1)*sin(hash2)));\n\tfloat ro = hash(hash1+id.y, idhash)*6.28;\n\tp = (fract(p*scale)-0.5)/scale;\n\tp = erot(p, ax, ro+time*0.7);\n\tp += vec3(hash(hash1,hash2+6.), hash(hash1+5.,hash2), hash(hash2,hash1+3.))*1.;\n\tfloat sphere = length(p)-1.;\n\treturn min(.5,linedist(vec2(p.z, sphere), vec2(-0.1,0.), vec2(0.1,0.))-0.1);\n}\n\nvec3 norm(vec3 p) {\n\tmat3 k = mat3(p,p,p) - mat3(0.01);\n\treturn normalize(scene(p) - vec3(scene(k[0]), scene(k[1]), scene(k[2])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n  uv = erot(vec3(uv,0.), vec3(0,0,1), cos(time*0.5)*0.5).xy;\n  vec3 cam = normalize(vec3(1,uv));\n  vec3 init = vec3(time,0,cos(time*0.4)*2.);\n  cam=erot(cam,vec3(0,1,0),cos(time/8.)*0.3);\n  cam=erot(cam,vec3(0,0,1),time/4.);\n  vec3 p = init;\n  bool hit = false;\n  for (int i = 0; i< 100; i++) {\n  \tfloat dist = scene(p);\n  \tif (dist*dist < 0.00001) { hit = true; break; }\n  \tif (distance(p,init)>30.) break;\n  \tp+=cam*dist;\n  }\n\n  uv *=32.;\n  uv += vec2(sin(time*1.), cos(time*1.5))*2.;\n  //uv = erot(vec3(uv,0.), vec3(0,0,1), cos(time*0.5)*0.5).xy;\n\n  fragColor = cos(uv.y)*cos(uv.x) < 0. ? vec4(0.2,0.5,0.9,1.) : vec4(0.);\n  if (hit) {\n  \tvec3 n = norm(p);\n  \tvec3 rf = reflect(cam, n);\n    float shadow = scene(p+rf) + .5;\n  \tfloat factor = shadow*length(sin(rf*3.)*0.5+0.5)/sqrt(2.);\n  \tvec3 col = mix(vec3(0.3,0.25,0.1), vec3(0.8,0.6,0.2), factor) + pow(factor*0.8, 6.);\n    fragColor.xyz = mix(col, fragColor.xyz, pow(distance(p, init)/30., 50.));\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}