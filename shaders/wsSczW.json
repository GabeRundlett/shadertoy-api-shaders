{
    "Shader": {
        "info": {
            "date": "1586183305",
            "description": "Compliments the great Voronoise/noise combo algorithm by Inigo Quilez.\n\nClick on four qudrants to adjust u/v as in http://iquilezles.org/articles/voronoise/voronoise.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "wsSczW",
            "likes": 4,
            "name": "Rotating Voronoise",
            "published": 3,
            "tags": [
                "noise",
                "voronoise"
            ],
            "usePreview": 0,
            "username": "nickcody",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "float u_rotated_scale        = 0.05;\nfloat u_primary_scale        = 0.01;\nfloat u_rot_left_timescale   = 0.1;\nfloat u_rot_right_timescale  = 0.2;\nfloat u_timescale            = 0.1;\nint   u_showComponents       = 0;\n\n// Voronoise\n// https://iquilezles.org/articles/voronoise\n// by inigo quilez\n//\nvec3 hash3( vec2 p ){\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)),\n    dot(p,vec2(269.5,183.3)),\n    dot(p,vec2(419.2,371.9)) );\n    return fract(sin(q)*43758.5453);\n}\n\nfloat iqnoise( in vec2 x, float u, float v ){\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    float k = 1.0+63.0*pow(1.0-v,4.0);\n\n    float va = 0.0;\n    float wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n        vec3 o = hash3( p + g )*vec3(u,u,1.0);\n        vec2 r = g - f + o.xy;\n        float d = dot(r,r);\n        float ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n        va += o.z*ww;\n        wt += ww;\n    }\n\n    return va/wt;\n}\n\nvec2 rotate(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nvec2 rotateOrigin(vec2 v, vec2 center, float a) {\n    vec2 t = v - center;\n    vec2 r = rotate(t, a);\n    return r + center;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 black = vec3(0.0, 0.0, 0.0);\n\n    vec2 rotated_resolution = iResolution.xy * u_rotated_scale;\n    vec2 primary_resolution = iResolution.xy * u_primary_scale;\n\n    vec2 rotated_fragCoord = fragCoord.xy * u_rotated_scale;\n    vec2 primary_fragCoord = fragCoord.xy * u_primary_scale;\n\n    vec2 left_rotated_center = rotated_resolution.xy/4.0;\n    vec2 right_rotated_center = 3.0 * rotated_resolution.xy/4.0;\n    vec2 primary_center = primary_resolution.xy/2.0;\n\n    float time3d     = iTime * u_timescale;\n    float timeLeft   = iTime * u_rot_left_timescale;\n    float timeRight  = iTime * u_rot_right_timescale;\n\n    vec2 coord0 = vec2( rotateOrigin(primary_fragCoord, primary_center,time3d));\n    vec2 coord1 = vec2( rotateOrigin(rotated_fragCoord, left_rotated_center, timeLeft));\n    vec2 coord2 = vec2( rotateOrigin(rotated_fragCoord, right_rotated_center, timeRight));\n\n    vec2 uv = iMouse.xy/iResolution.xy;\n    float n0 = iqnoise(coord0, uv.x, uv.y);\n    float n1 = iqnoise(coord1, uv.x, uv.y);\n    float n2 = iqnoise(coord2, uv.x, uv.y);\n\n    vec3 color;\n\n    if (u_showComponents == 0) {\n        float brighten = 1.5;\n        float c = (n1+n2)/2.0;\n        float n = iqnoise(coord0 * c, 0.0, 1.0);\n\n        vec3 col = 0.5 + 0.5*cos(iTime+coord0.xyx+vec3(0,2,4));\n\n        color = mix(vec3(n, n, n), col, c);\n    } else {\n        color = vec3(n0, n1, n2);\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}