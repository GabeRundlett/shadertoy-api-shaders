{
    "Shader": {
        "info": {
            "date": "1474455285",
            "description": "smooth evolution of section of shader [url=https://www.shadertoy.com/view/XdG3zm]2D Radial Repeat : Hex RadClick[/url]\n\nclick with mouse and move to see the smooth variations in fullscreen",
            "flags": 0,
            "hasliked": 0,
            "id": "XlK3W1",
            "likes": 16,
            "name": "2D Hex Smooth RadClick",
            "published": 3,
            "tags": [
                "2d",
                "hex",
                "smooth",
                "repeat",
                "rad"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1099
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n// based on https://www.shadertoy.com/view/XdKGRD\n\nconst float sections = 9.; // count radial section\nconst vec3 startColor = vec3(1,0.26,0);\nconst vec3 endColor = vec3(0.33,0.2,0.49);\nconst float zoom = 1.6; // screen coord zoom\nconst float neutralSection = 5.; // if of central section\nconst float neutralZone = 0.5; // radius of neutral zone (in center) wich show the neutralSection id\n\n// uv:screenCoord \n// v:vec3(hex width, hex height, hex height limit, hex scale)  \n// k:vec3(Alternance, Density, Glow)\nvec3 GetHexPattern(vec2 uv, vec4 v, vec3 k) \n{\n    // transfrom cartesian to polar\n\tfloat a = atan(uv.x, uv.y)/3.14159*floor(k.y); \n\tfloat r = length(uv)*4.; \n\tuv = vec2(a,r);// polar uv\n    \n    // homogeneise cells\n\tuv.x *= floor(uv.y)-k.x; //along r with alternance\n\tuv.x += iDate.w ; // rotate each radius offset with constant speed\n    \n    // apply 4 gradiant color along radius offset\n\tvec3 color = mix(startColor, endColor, vec3(floor(uv.y)/4.));\n    \n    // repeat without dommain break (mod)\n\tuv = abs(fract(uv)-0.5);\n    \n    // apply pattern\n\tfloat x = uv.x*v.x;\n\tfloat y = uv.y*v.y;\n\tfloat z = uv.y*v.z;\n\treturn color / (abs(max(x + y,z) - v.w)*k.z);\n}\n\n// return central uv from h / h can be mouse or gl_FragCoord\n// s:screenSize / h:pixelCoord / z:zoom\nvec2 GetUV(vec2 s, vec2 h, float z) \n{\n\treturn z * (h+h-s)/s.y; // central uv\n}\n\nfloat cAtan(vec2 uv)\n{\n\tfloat a = 0.;\n\tif (uv.x >= 0.) a = atan(uv.x, uv.y);\n    if (uv.x < 0.) a = 3.14159 - atan(uv.x, -uv.y);\n    return a;\n}\n\n// return id of region pointed by h / h can be mouse or gl_FragCoord\n// s:screenSize / h:pixelCoord\nfloat GetID(vec2 s, vec2 h) \n{\n\tvec2 uv = GetUV(s, h, zoom);\n\t\n\tfloat a = cAtan(uv) * floor(sections)*.5/3.14159;\n\tfloat r = length(uv);\n    return ( r < neutralZone ? neutralSection : a);\n}\n\nvec4 Params(float id)\n{\n\tvec4 p = vec4(0);\n\tif (id > 0.) {p = vec4(1.2,0.92,1.88,0.8);}\n\tif (id > 1.) {p = vec4(2.2,0,1.88,0.8);}\n\tif (id > 2.) {p = vec4(2.2,0,4,0.8);}\n\tif (id > 3.) {p = vec4(1,0,4,0.8);}\n\tif (id > 4.) {p = vec4(1.2,0,2.12,0.64);}\n\tif (id > 5.) {p = vec4(4,4,1,0.8);}\n\tif (id > 6.) {p = vec4(1,2.96,4,0.8);}\n\tif (id > 7.) {p = vec4(1.5,0.96,1.8,0.4);}\n\tif (id > 8.) {p = vec4(1.2,2.24,0,0.68);}\n\treturn p;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 pos = g;\n    \n\tvec2 uv = GetUV(iResolution.xy, pos, zoom);\n\t\n\tif(iMouse.z>0.) pos = iMouse.xy;\n    \n\tfloat id = GetID(iResolution.xy, pos);\n\n\tvec4 p = vec4(0); // hex width, hex height, hex height limit, hex scale  \n\tvec3 k = vec3(-.3, 5, 4); // Alternance, Density, Glow\n\n    // circular sections id \n    float cid = id; \t\t\t\t// current section id\n\tfloat lid = cid - 1.; \t\t\t// last section id\n\tif (lid < 0.) lid = id + 8.;\t// circular becasue 8 section\n\tp = mix(Params(lid), Params(cid), fract(cid)); // id range [0-1]\n\n\tvec3 hexPattern = GetHexPattern(uv, p, k);\n\t\n\tvec3 col = clamp(hexPattern, 0., 1.); // intensity limit for glow\n    \n\tf = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}