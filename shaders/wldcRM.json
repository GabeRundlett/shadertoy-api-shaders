{
    "Shader": {
        "info": {
            "date": "1608729170",
            "description": "Based on Klems' Chrome Metaballs - https://www.shadertoy.com/view/4dj3zV\nTweetable version (uses twigl's simplex noise): https://twitter.com/zozuar/status/1341446417739624451",
            "flags": 0,
            "hasliked": 0,
            "id": "wldcRM",
            "likes": 15,
            "name": "Reflective metaballs",
            "published": 3,
            "tags": [
                "reflection",
                "metaballs"
            ],
            "usePreview": 0,
            "username": "yonatan",
            "viewed": 906
        },
        "renderpass": [
            {
                "code": "// 3D gradient noise from iq's https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n// Metaballs and analytic normals from Klems' https://www.shadertoy.com/view/4dj3zV\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 a, q, p, gradient, dir;\n    float b, dist;\n    dir = normalize(vec3((2.*fragCoord.xy-iResolution.xy)/min(iResolution.x,iResolution.y), 1.7));\n    p = vec3(0, 0, -7);\n    for(int i = 0; i < 100; i++) {\n        q = p; // save current position\n        p += dir * dist; // step\n        gradient = vec3(0);\n        dist = 0.;\n        for(float j = 0.; j < 8.; j++) {\n            vec3 ballp = sin(vec3(1,2,4) * j + iTime * .3) * 3.; // ball position\n            b = dot(a = p - ballp, a);\n            gradient += a / (b * b);\n            dist += 1. / b;\n        }\n        dist = 1. - dist;\n        if(dist < .001) { // if we've hit the metaballs\n            dir = reflect(dir, normalize(gradient)); // set new reflected marching direction\n            p = q; // restore previous position\n            dist = 0.; // and don't step in this iteration\n        }\n     }\n    vec3 col = dir + 1.;\n    fragColor.rgb = noise(col * 2. + iTime * .3) * col * 2.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}