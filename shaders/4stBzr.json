{
    "Shader": {
        "info": {
            "date": "1523964082",
            "description": "Playing around with ideas from Kali's \"Generators\" shader resulted in this... ",
            "flags": 0,
            "hasliked": 0,
            "id": "4stBzr",
            "likes": 55,
            "name": "Light and Motion",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "light"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 11997
        },
        "renderpass": [
            {
                "code": "// \"Light and Motion\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Playing around with ideas from Kali's \"Generators\" shader resulted in this...  \n\n#define AA  0    // optional antialiasing\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ballPos, ltDir;\nfloat tCur, dstFar, frctAng;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p) \n{\n  float dMin, d, s, f;\n  dMin = dstFar;\n  d = 0.47 - abs (p.y - 3.5);\n  DMIN (1);\n  p.xz = abs (0.5 - mod ((2./3.) * p.xz, 1.));\n  s = 1.;\n  for (int j = 0; j < 9; j ++) {\n    p = abs (p) - vec3 (-0.02, 1.98, -0.02);\n    f = 2. / clamp (dot (p, p), 0.4, 1.);\n    p = f * p - vec3 (0.5, 1., 0.4);\n    s *= f;\n    p.xz = Rot2D (p.xz, frctAng);\n  }\n  d = PrRoundBoxDf (p, vec3 (0.1, 5., 0.1), 0.1) / s;\n  DMIN (2);\n  return dMin;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (float j = 1.; j < 5.; j ++) {\n    d = 0.002 * j * j;\n    ao += max (0., d - ObjDf (ro + rd * d));\n  }\n  return 0.2 + 0.8 * clamp (1. - 20. * ao, 0., 1.);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  float bRad, b, d;\n  bRad = 0.025;\n  b = dot (rd, ro);\n  d = b * b + bRad * bRad - dot (ro, ro);\n  if (d > 0.) {\n    d = - b - sqrt (d);\n    if (d < 0.) d = dstFar;\n  } else d = dstFar;\n  return d;\n}\n\nfloat TxPattern (vec3 p)\n{\n  float t, tt, c;\n  p = abs (0.5 - fract (4. * p));\n  c = 0.;\n  t = 0.;\n  for (float j = 0.; j < 6.; j ++) {\n    p = abs (p + 3.) - abs (p - 3.) - p;\n    p /= clamp (dot (p, p), 0., 1.);\n    p = 3. - 1.5 * p;\n    if (mod (j, 2.) == 0.) {\n      tt = t;\n      t = length (p);\n      c += exp (-1. / abs (t - tt));\n    }\n  }\n  return c;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, rg, col, bgCol, amb;\n  float dstBall, dstObj, dstGlow, d, eGap, bGlow, eGlow, eFlash, eMid, eVib, rnd;\n  int idObjT;\n  bool isRefl;\n  frctAng = 0.18172 + pi * (2. * SmoothBump (0.25, 0.75, 0.25, mod (0.01 * tCur, 1.)) - 1.);\n  dstBall = BallHit (ro - ballPos, rd);\n  isRefl = false;\n  if (dstBall < dstFar) {\n    isRefl = true;\n    ro += dstBall * rd;\n    rd = reflect (rd, normalize (ro - ballPos));\n  }\n  dstObj = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dstObj * rd);\n    dstObj += d;\n    if (d > 0.03) dstGlow = dstObj;\n    if (d < 0.001 || dstObj > dstFar) break;\n  }\n  bgCol = vec3 (0.9, 0.9, 1.) * (0.1 + 0.1 * max (0., dot (rd, normalize (vec3 (0.5, 0.2, 1.)))));\n  if (dstObj < dstFar) {\n    if (idObj == 2) {\n      rnd = Hashfv2 (11. + 77. * floor ((ro + dstObj * rd).xz / 1.5));\n      bGlow = 0.;\n      eGlow = 0.;\n      eGap = mod (0.0625 * (tCur + 7. * rnd), 1.);\n      eMid = 3.35;\n      eVib = eMid + 0.005 * rnd * sin ((64. + rnd) * tCur); \n      for (int j = 0; j < 30; j ++) {\n        rg = ro + dstGlow * rd;\n        d = ObjDf (rg);\n        dstGlow += d;\n        bGlow += max (0., 0.02 - d) * exp (- 0.5 * dstGlow);\n        eGlow += max (0., 0.03 - d) * (pow (max (0., 1. - 7. * abs (eVib - rg.y)), 8.) +\n           pow (max (0., 1. - 20. * min (abs (eMid - rg.y - eGap), abs (eMid - rg.y + eGap))), 4.));\n        if (d < 0.001 || dstGlow > dstFar) break;\n      }\n      eFlash = 0.6 + 0.4 * sin (8. * (tCur + 7. * rnd + rg.z));\n    }\n    ro += dstObj * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    amb = vec3 (0.2);\n    if (idObjT == 1) {\n      col = vec3 (0.1) * (1. + TxPattern ((ro.y < 3.5) ? ro : 2. * ro));\n      if (ro.y < 3.2) col *= vec3 (0.9, 1., 0.9);\n      vn = VaryNf (128. * ro, vn, 0.2);\n    } else if (idObjT == 2) {\n      col = vec3 (0.7, 0.7, 0.6);\n      amb += 1.5 * eFlash * vec3 (1., 0.2, 0.1) * pow (max (0., 1. - 2.5 * abs (eMid - ro.y)), 2.) *\n         max (0.5, sign (eMid - ro.y) * vn.y);\n    }\n    col = ObjAO (ro, vn) * col * (amb + max (0., dot (ltDir, vn)) +\n       pow (max (dot (normalize (ltDir - rd), vn), 0.), 8.));\n    col = mix (col, bgCol, 1. - exp (- dstObj));\n    if (idObjT == 2) col += mix (vec3 (0., 0.3, 1.), vec3 (0., 1., 0.3), rnd) *\n       (bGlow + 20. * eGlow * eGlow * eFlash) * (1. - smoothstep (0.4, 1., dstObj / dstFar));\n  } else col = bgCol;\n  if (isRefl) col = mix (mix (0.9 * col, vec3 (0.7, 0.7, 0.8), 0.2), bgCol, 1. - exp (- dstBall));\n  return col;\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (0.75 * sin (t), 3.35 + 0.15 * sin (0.8 * t), 0.75 * cos (0.5 * t));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur + 30., 36000.) + floor (dateCur.w / 7200.);\n  az = 0.;\n  el = 0.02 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  }\n  t = 0.1 * tCur;\n  ballPos = TrackPath (t + 0.4);\n  ro = TrackPath (t);\n  vd = normalize (ballPos - ro);\n  az += 1.1 * (0.5 * pi + atan (- vd.z, vd.x));\n  el += 0.8 * asin (vd.y);\n  el = clamp (el, -0.25 * pi, 0.25 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  dstFar = 5.;\n  ltDir = normalize (vec3 (1., 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), 1.2));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (clamp (col, 0., 1.), vec3 (0.9)), 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}