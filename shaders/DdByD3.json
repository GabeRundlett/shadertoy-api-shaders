{
    "Shader": {
        "info": {
            "date": "1688228805",
            "description": "Rotating Color Wheel, a easy test code.",
            "flags": 0,
            "hasliked": 0,
            "id": "DdByD3",
            "likes": 2,
            "name": "Rotating Colour Wheel ",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "o0CHT0o",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "// thx some advice from Envy24\n\n//#define rotate(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nconst float r=.95,\n            R=1.,\n            pi = 4.*atan(1.);\n//const mat2 r_3 = rotate(pi*2./3.), r_3_ = rotate(pi*4./3.);\n\nvec3 trans(float th){\n    vec3 t=vec3(th,th-pi/3.*2.,th+pi/3.*2.);\n    return abs(fract((t+iTime)/pi/2.)-0.5)*6.-1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy/2.)/min(iResolution.x, iResolution.y)*2.;\n    float l = length(uv);\n    //vec2 sc = uv/l*rotate(iTime);\n    float th = atan(uv.x,uv.y);\n\n    // Time varying pixel color\n    /*\n    vec3 col = max(0., 1.-l/r) +\n               clamp((R-l)/(R-r),0.,1.) * clamp(l/r,0.,1.) *\n               vec3(sc.y+0.5,(sc*r_3).y+0.5,(sc*r_3_).y+0.5);*/\n    vec3 col = smoothstep(R,r,l) * mix(vec3(1), trans(th), l/r);\n\n    // Output to screen\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}