{
    "Shader": {
        "info": {
            "date": "1633361628",
            "description": "♥♣l",
            "flags": 0,
            "hasliked": 0,
            "id": "fddXW7",
            "likes": 5,
            "name": "inktober 02 - suit",
            "published": 3,
            "tags": [
                "sdf",
                "heart",
                "cards",
                "suits"
            ],
            "usePreview": 0,
            "username": "pali6",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "// Inktober 2021 - 02 - suit\n// by pali\n\n#define PI 3.141592\n#define A 0.4\n#define DEPTH 5\n#define XREP 8.\n\n#define ndot(x, y) normalize(dot(x, y))\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat triangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat rhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\n\nfloat heart(vec2 pos)\n{\n    pos -= vec2(0.1, 0.);\n    pos.x /= 0.9;\n    pos.y *= 0.9;\n    float r = 1e10;\n    r = min(r, distance(pos, vec2(0.25, 0.6)) - 0.2);\n    r = opSmoothUnion(r, distance(pos, vec2(0.75, 0.6)) - 0.2, 0.05);\n    r = opSmoothUnion(r, triangleIsosceles(pos - vec2(0.5, 0.), vec2(0.4, 0.65)), 0.4);\n    return r;\n}\n\nfloat spade(vec2 pos)\n{\n    float r = heart(vec2(pos.x, 1.1 - pos.y / 0.9));\n    pos -= vec2(0.1, 0.);\n    pos.x /= 0.9;\n    pos.y *= 0.9;\n    r = opSmoothUnion(r, triangleIsosceles(pos + vec2(-0.5, -0.25), vec2(0.2, -0.25)), 0.02);\n    return r;\n}\n\nfloat diamond(vec2 pos)\n{\n    return rhombus(pos - vec2(0.5, 0.5), vec2(0.4, 0.5));\n}\n\nfloat club(vec2 pos)\n{\n    float r = 1e10;\n    r = opSmoothUnion(r, distance(pos, vec2(0.5, 0.75)) - 0.22, 0.1);\n    r = opSmoothUnion(r, distance(pos, vec2(0.21, 0.38)) - 0.22, 0.05);\n    r = opSmoothUnion(r, distance(pos, vec2(0.79, 0.38)) - 0.22, 0.05);\n    r = opSmoothUnion(r, distance(pos, vec2(0.5, 0.5)) - 0.15, 0.05);\n    r = opSmoothUnion(r, triangleIsosceles(pos + vec2(-0.5, -0.4), vec2(0.15, -0.4)), 0.05);\n    return r;\n}\n\nvec2 nHeart(vec2 pos)\n{\n    float base = heart(pos);\n    float d = 0.001;\n    return normalize(vec2(\n        heart(pos + vec2(d, 0)) - base,\n        heart(pos + vec2(0, d)) - base\n    ));\n}\n\nvec2 nSpade(vec2 pos)\n{\n    float base = spade(pos);\n    float d = 0.001;\n    return normalize(vec2(\n        spade(pos + vec2(d, 0)) - base,\n        spade(pos + vec2(0, d)) - base\n    ));\n}\n\nvec2 nDiamond(vec2 pos)\n{\n    float base = diamond(pos);\n    float d = 0.001;\n    return normalize(vec2(\n        diamond(pos + vec2(d, 0)) - base,\n        diamond(pos + vec2(0, d)) - base\n    ));\n}\n\nvec2 nClub(vec2 pos)\n{\n    float base = club(pos);\n    float d = 0.001;\n    return normalize(vec2(\n        club(pos + vec2(d, 0)) - base,\n        club(pos + vec2(0, d)) - base\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = 2. * (uv - vec2(0.5));\n    pos.x /= iResolution.y / iResolution.x;\n    pos.x += 0.1;\n    pos /= 0.9;\n    pos = pos / 2. + vec2(0.5);\n    \n    float v = heart(pos);\n    vec2 norm = nHeart(pos);\n    bool col = false;\n    \n    for(int i = 0; i < DEPTH; i++)\n    {\n        if(v < 0.)\n        {\n            if(col)\n                fragColor = vec4(0, 0, 0, 1);\n            else\n                fragColor = vec4(1, 0, 0, 1);\n            return;\n        }\n        if(v > 2. * A)\n            break;\n        float y = v / A;\n        float ang = atan(norm.y, norm.x) + iTime * 0.1;\n        float bigx = XREP * ang / (2. * PI);\n        float x = fract(bigx);\n        x = x / 0.5 - 0.25;\n        int xPart = int(bigx);\n        if(xPart % 2 == 0)\n            col = !col;\n        int asd = (xPart / 2) % 2;\n        pos = vec2(x, y);\n        pos = vec2(0.5, 0.5) + (pos - vec2(0.5, 0.5));\n        if(col)\n        {\n            if(asd == 0)\n            {\n            v = spade(pos);\n            norm = nSpade(pos);\n            }\n            else\n            {\n                v = club(pos);\n                norm = nClub(pos);\n            }\n        }\n        else\n        {\n            if(asd == 0)\n            {\n                v = heart(pos);\n                norm = nHeart(pos);\n            }\n            else\n            {\n                v = diamond(pos);\n                norm = nDiamond(pos);\n            }\n        }\n    }\n    \n    fragColor = vec4(1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}