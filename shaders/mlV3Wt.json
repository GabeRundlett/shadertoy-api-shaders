{
    "Shader": {
        "info": {
            "date": "1684940029",
            "description": "fork of @jcponcemath and just vary d with some time and mouse factors to explore his pattern.\nadditionally variably invert color [code]abs(cos(iTime/2.0)-finalColor)[/code]",
            "flags": 0,
            "hasliked": 0,
            "id": "mlV3Wt",
            "likes": 1,
            "name": "Periodic Fractal circles",
            "published": 3,
            "tags": [
                "space",
                "points"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "// Fork of \"Fractal circles\" by jcponcemath. https://shadertoy.com/view/dtKGWt\n// 2023-05-24 02:06:30\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.198, 0.438, 0.698);\n    vec3 b = vec3(-0.262, 0.208, 0.238);\n    vec3 c = vec3(2.238, 2.168, 1.000);\n    vec3 d = vec3(-0.052, 0.333, 0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0) : (2.0*(iMouse.xy-iResolution.xy))/iResolution.xy;\n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =(fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    \n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 3.0; i ++){\n        uv = fract(uv * 2.0)-0.5;\n    \n        float d = length(uv);\n        \n        vec3 col = palette(length(uv0) - iTime * 0.35);\n    \n        d -= 0.35+(sin(fract(iTime)/10.0*mouse.x)-(cos(iTime/20.0/mouse.y+i))+sin(fract(-iTime)/10.0*mouse.y)-(cos((i+3.0)*iTime/43.0)));\n        //d = abs(d);\n    \n        d = 0.03/d;\n    \n        finalColor += col * d;\n    }\n\n    // Output to screen\n    fragColor = vec4(abs(cos(iTime/2.0)-finalColor), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}