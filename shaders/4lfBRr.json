{
    "Shader": {
        "info": {
            "date": "1510719396",
            "description": "2D warpy lattice thing make with rotating crosses and repeated space.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lfBRr",
            "likes": 4,
            "name": "Warpy Lattice",
            "published": 3,
            "tags": [
                "2d",
                "repetition",
                "pattern"
            ],
            "usePreview": 0,
            "username": "0x4d4147",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "// THE PIECES\n\n// Rotate the space around (0, 0) by angle.\nvec2 rotate(vec2 uv, float angle)\n{\n\treturn vec2(\n\t\tuv.x*cos(angle) - uv.y*sin(angle),\n\t\tuv.x*sin(angle) + uv.y*cos(angle)\n\t);\n}\n\n// Return 1 if even, 0 if odd.\nfloat is_even(float n)\n{\n    return 1.0 - step(1.0, mod(n, 2.0));\n}\n\n// Tile space, repeats 0->1 for number of times (per square unit space).\nvec4 tile_space(vec2 uv, float times)\n{\n    vec2 scaledUV = uv * times;\n    return vec4(fract(scaledUV), floor(scaledUV));\n}\n\n// Values from Wikipedia page on YUV colorspace.\nvec3 yuv_to_rgb(vec3 yuvCol)\n{\n    return vec3(\n        yuvCol.x +                    1.13983*yuvCol.z,\n\t\tyuvCol.x - 0.39465*yuvCol.y - 0.58060*yuvCol.z,\n\t\tyuvCol.x + 2.03211*yuvCol.y\n    );\n}\n\n// From pixel spirit deck.\nfloat rectSDF(vec2 uv, vec2 size)\n{\n\tuv = uv * 2. - 1.;\n\treturn max(\n\t\tabs(uv.x/size.x),\n\t\tabs(uv.y/size.y)\n\t);\n}\n\n// Adapted from pixel spirit deck.\nfloat crossSDF(vec2 uv, float s, float thick)\n{\n\treturn min(\n\t\trectSDF(uv, vec2(s, thick)),\n\t\trectSDF(uv, vec2(thick, s))\n\t);\n}\n\n// From pixel spirit deck.\nfloat fill(float x, float size)\n{\n\treturn 1.0 - step(size, x);\n}\n\n\n// THE CONSTRUCTION\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize UVs.\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Background color parameter.\n    vec4 bgCol = mix(vec4(.05, .05, .05, 1), vec4(.25, .25, .25, 1.), distance(uv, vec2(.5))*1.4);\n    \n    // Correct UV aspect ratio.\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // More parameters.\n    vec4 strokeCol = vec4(yuv_to_rgb(vec3(.5, uv.x, uv.y-.1)), 1.);\n    const float tileAmt = 4.0;\n    const float crossSize = 4.;\n    float crossThickness = .9;\n    \n    // Build on these.\n    float sdf = 0.;\n    vec4 col;\n    \n    // Tile the space.\n    vec4 tiledSpace = tile_space(uv, tileAmt);\n    uv = tiledSpace.xy;\n    \n    // Make checkerboard mask to flip rotations for the effect.\n    float xor = is_even(tiledSpace.w) + is_even(tiledSpace.z);\n    xor = (1.0 - step(1.5, xor)) * xor;\n    \n    // Rotate the space (works per tile).\n    uv -= vec2(.5);\n    uv = rotate(uv, mix(1., -1., xor)*iTime*0.5f);\n    uv += vec2(.5);\n    \n    // Shape the SDF with a cross.\n    sdf = crossSDF(uv, crossSize, crossThickness);\n    \n    // Mix the colors for the final result.\n    col = mix(bgCol, strokeCol, fill(sdf, 0.5));\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}