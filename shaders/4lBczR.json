{
    "Shader": {
        "info": {
            "date": "1507098095",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "4lBczR",
            "likes": 7,
            "name": "raymarching cube",
            "published": 3,
            "tags": [
                "raymarching",
                "cube",
                "tuto",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 934
        },
        "renderpass": [
            {
                "code": "// base ray-tracing from https://www.shadertoy.com/view/lsSBWh\n\nvoid mainImage(out vec4 O, vec2 U) {                     // === render cube\n    float t = iTime, s =  10.; \n    vec3  q = iResolution, \n          D = normalize( vec3( (U+U-q.xy)/q.y, -6) ),    // ray direction (normalized)\n          p = 1.5*s/q, a, N, H,                          // p: ray origin\n          L = vec3(0,0,1);                               // light direction (normalized)\n    mat2  R = mat2( sin(t+1.57*vec4(1,2,0,1)) );         // animation\n    L.xz *= R; L.yz *= R;                                // to object frame\n    p.xz *= R; p.yz *= R;                                //   ( turntable: can factor rot out of ray loop )\n    D.xz *= R; D.yz *= R;\n\n    for (int i=0; i<50; i++) {                           // --- ray march\n         a = abs(p)-1.;\n        t = max( a.x, max(a.y,a.z));                     // distance to cube\n        if (t < .01) { s=0.; break; }                    // hit\n        p += t*D;                                        // step forward by dist\n    }\n\n    O -= O;\n    if (s==0.) {                                         // --- if hit\n        int i =  t==a.x ? 0 : t==a.y ? 1 : 2,            // id = abs(hit face) * sign(q[i])\n            j = (i+1)%3, k = (i+2)%3;\n        O-=O; if (p[i] > 0.) O[i]=1.; else O[j]=O[k]=.7; // face color\n        N-=N; if (p[i] > 0.) N[i]=1.; else N[i]=-1.;     // face normal\n        U.x = p[j]/p[i];                                 // face parameterization [-1,1]^2\n        U.y = p[k]/abs(p[i]);                            // reproject on cube (improve hit)\n        \n        U = .5+.5*U;                                     // normalized parameterization\n        O *= texture( iChannel0, U, 0.);                 // face texture\n        O *= .3 + .7 * max( 0., dot(N,L) );              // ambiant + diffuse\n        H = normalize(L-D); \n        O += pow( max( 0., dot(N,H) ), 200.);            // specular\n    }\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}