{
    "Shader": {
        "info": {
            "date": "1570952709",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "3dG3WV",
            "likes": 5,
            "name": "shadetober #12 (dragon)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "float map(in vec3 p, in float rad) {\n    p.y += sin(p.x * p.z * .2);\n    vec2 t = vec2(10.,1.);\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nvec3 grad(in vec3 p, in float rad) {\n    vec2 ep = vec2(0.00001, 0.);\n    return normalize(vec3(map(p + ep.xyy, rad) - map(p - ep.xyy, rad),\n                map(p + ep.yxy, rad) - map(p - ep.yxy, rad),\n                map(p + ep.yyx, rad) - map(p - ep.yyx, rad)));\n}\n\nmat3 roty(in float rad) {\n    return mat3(\n    cos(rad), 0., sin(rad),\n        0., 1., 0.,\n        -sin(rad), 0., cos(rad)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 eye = vec3(0., 0., 0.);\n    vec3 ray = normalize(vec3(uv, -1.0));\n    \n    // is this math right? seems right.\n    mat3 wibble = roty(iTime * .2);\n    ray = wibble * ray;\n    eye = wibble * eye;\n\n    vec3 col = texture(iChannel0, ray).rgb;\n    col *= .5 - abs(uv.y);\n    col *= pow(1.5 + length(uv * 2.), 2.);\n    \n    float t = 0.;\n    for (int i = 0; i < 100; i++){\n        vec3 point = eye + ray * (t);\n        float depth = map(point, .5);\n        if (depth < .0001) {\n            vec3 norm = grad(point, .5);\n            norm *= wibble; // some shennanigans\n            vec3 dif = texture(iChannel0, norm).rgb;\n            col = dif;\n            break;\n        }\n        t += depth;\n        if (t > 20.) {\n            break;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}