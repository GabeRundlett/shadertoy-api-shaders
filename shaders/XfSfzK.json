{
    "Shader": {
        "info": {
            "date": "1725164803",
            "description": "lego",
            "flags": 0,
            "hasliked": 0,
            "id": "XfSfzK",
            "likes": 0,
            "name": "aug312024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 40
        },
        "renderpass": [
            {
                "code": "// Reaction-Diffusion parameters\n#define F 0.01\n#define K 0.049\n// Diffusion rates\n#define Du 1111.9\n#define Dv 11111.4\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec2 reaction_diffusion(vec2 uv, vec2 texel) {\n    vec2 sum = vec2(0.0);\n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec2 offset = vec2(float(i), float(j)) * texel;\n            sum += texture(iChannel0, uv + offset).rg;\n        }\n    }\n    \n    vec2 center = texture(iChannel0, uv).rg;\n    vec2 laplacian = sum - 9.0 * center;\n    \n    float u = center.r;\n    float v = center.g;\n    \n    float du = Du * laplacian.r - u * v * v + F * (1.0 - u);\n    float dv = Dv * laplacian.g + u * v * v - (F + K) * v;\n    \n    return center + vec2(du, dv) * 1111.9;\n}\n\nfloat vignette(vec2 uv, float strength) {\n    uv *= 1.0 - uv.xy;\n    float vig = uv.x * uv.y * 125.0;\n    return pow(vig, strength);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Zoom factor (adjust this value to change zoom level)\n    float zoomFactor = 100.0 ; // Gradually zooms in over time\n    \n    // Calculate zoomed UV coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 zoomedUV = (uv - 0.5) / zoomFactor + 0.5;\n    \n    vec2 texel = 1.0 / iResolution.xy;\n    \n    // Reaction-diffusion\n    vec2 rd = reaction_diffusion(zoomedUV, texel);\n    \n    // Time variable for animation\n    float t = iTime / 4.0;\n    \n    // Create a warped grid for droplet placement\n    vec2 warpedUV = zoomedUV + 0.1 * vec2(sin(zoomedUV.y * 10.0 + t), cos(zoomedUV.x * 10.0 + t));\n    vec2 grid = fract(warpedUV * 5.0) - 0.5;\n    \n    // Calculate distance from center of each grid cell\n    float d = length(grid);\n    \n    // Create droplet shape with sharper edges\n    float droplet = smoothstep(0.05, 0.95, d);\n    \n    // Add extreme wbble to the droplets\n    droplet += sin(d * 100.0 + t) * 0.3;\n    \n    // Create more intense caustics effect\n    float caustic = sin(d * 80.0 - t * .0) * 0.5 + 0.5;\n    caustic = pow(caustic, 5.0);  // Increased power for higher contrast\n    caustic *= droplet;\n    \n    // Combine droplet, caustics, and reaction-diffusion\n    vec3 col = vec3(0.000,0.000,0.000); // Base water color\n    col += vec3(1.000,1.000,1.000) * caustic; // Add white caustics\n    col = pow(col, vec3(1.5)); // Increase overall contrast\n    col *= droplet; // Apply droplet shape\n    \n    // Apply soft vignette\n    float vig = vignette(uv, 0.9);  // Increased vignette strength\n    col *= vig;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}