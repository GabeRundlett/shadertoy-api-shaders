{
    "Shader": {
        "info": {
            "date": "1548361803",
            "description": "a piece of a circle. use mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsjGzD",
            "likes": 18,
            "name": "pizza slice distance",
            "published": 3,
            "tags": [
                "2d",
                "circle",
                "distance",
                "keyhole"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 905
        },
        "renderpass": [
            {
                "code": "\n#define pi acos(-1.0)\n\nfloat oldpizza( vec2 p, vec2 c, float rad1, float rad2)\n{\n    p.x = abs(p.x);\n    \n    float len2 = dot(vec2(c.y,-c.x),p.xy);\n    float len = dot(c,p);\n    \n    vec2 lens = vec2(abs(len-(rad1+rad2)*0.5)-(rad2-rad1)*0.5,len2);\n    \n    len = min(max(lens.x,lens.y),0.0)+length(max(lens,0.0));\n    \n    return len;\n}\n\nfloat pizza( vec2 p, vec2 c, float rad1, float rad2)\n{\n    p.x = abs(p.x);\n    \n    vec2 c2 = vec2(c.y,-c.x);\n    \n    float l = -dot(c,p.xy);\n    float q = p.x+c.x*l;\n    float l2;\n    \n    if (max(q,-sign(p.y*c.y)) < 0.0) {\n        l = -length(p.xy);\n    }\n    \n    if (l < 0.0) {\n        l2 = length(p.xy);\n    } else {\n        l2 = dot(c2,p.xy)*sign(c.y);\n    }\n    \n    \n    \n    vec2 a = vec2(max(l2-rad2,rad1-l2),l);\n    \n    return length(max(a,0.0))+min(0.0,max(a.x,a.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    vec2 muv = iMouse.xy/iResolution.xy;\n    \n    if (iMouse.x <= 0.0) \n        muv = vec2(0.4+sin(iTime)*0.1,0.85+cos(iTime)*0.1);\n    \n    float t = muv.y*pi*2.0;\n    float r = muv.x*0.5;\n    \n    float len = pizza(uv,vec2(-cos(t),sin(t)), r,0.5);\n    \n    //distance field coloring by iq https://www.shadertoy.com/view/4lcBWn\n    vec3 col = vec3(1.0) - sign(len)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(len));\n\tcol *= 0.8 + 0.2*cos(120.0*abs(len));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(len)) );\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}