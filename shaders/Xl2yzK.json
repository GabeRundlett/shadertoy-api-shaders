{
    "Shader": {
        "info": {
            "date": "1509291016",
            "description": "Motivated by the palace in Dubrovnik (simplified, symmetrized and wall-free); instructions in source.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xl2yzK",
            "likes": 15,
            "name": "Rector's Palace",
            "published": 3,
            "tags": [
                "symmetry",
                "architecture",
                "stairs",
                "duck"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 640
        },
        "renderpass": [
            {
                "code": "// \"Rector's Palace\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Motivated by the palace in Dubrovnik (simplified, symmetrized and wall-free)\n\n/*\n  Control panel appears when ring (or a hidden control) clicked; panel fades\n  automatically; look around using mouse.\n\n  Sliders control speed (red) and zoom (green).\n  Buttons switch viewer moving/stationary (blue) and duck on/off (yellow).\n*/\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrEllCylDf (vec3 p, vec2 r, float h);\nvec3 HexGrid (vec2 p);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec4 Loadv4 (int idVar);\n\nvec3 qHit, sunDir, vuPos, dkPos, vnBall;\nvec2 stCent;\nfloat dstFar, tCur, outWd, corWd, flrHt, trkLen, vuAz, vuEl, dkAz, dkEl, extVu, dkVu;\nint idObj;\nconst int idGrndf = 1, idCorf = 2, idRf = 3, idStr = 4, idBls = 5, idWl = 6, idPil = 7,\n   idSph = 8, idCen = 9, idDk = 10;\nconst float pi = 3.14159;\n\nvoid SetConsts ()\n{\n  outWd = 20.;\n  corWd = 2.;\n  flrHt = 3.;\n  stCent = vec2 (-16., 2.);\n}\n\nfloat DukDf (vec3 p)\n{\n  vec3 q;\n  vec2 r, cs;\n  float dMin, d, h, s;\n  dMin = dstFar;\n  p /= 2.;\n  p.z = - p.z;\n  q = p;\n  r = vec2 (0.04, 0.06 + 0.01 * clamp (q.z, -0.4, 0.4));\n  h = 0.1;\n  s = (length (q.xz / r) - 1.) * min (r.x, r.y);\n  d = min (max (s, abs (q.y) - h), length (vec2 (s, q.y)) - h);\n  dMin = min (dMin, d);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.1, 0.06, 0.12);\n  cs = vec2 (cos (0.3), sin (0.3));\n  q.yz = Rot2Cs (q.yz, cs);\n  cs.y = - cs.y;\n  q.xy = Rot2Cs (q.xy, cs);\n  q.xz = Rot2Cs (q.xz, cs);\n  q = q.yxz;\n  r = vec2 (0.06, 0.1 + 0.016 * clamp (q.z, -0.4, 0.4));\n  h = 0.014;\n  s = (length (q.xz / r) - 1.) * min (r.x, r.y);\n  d = min (max (s, abs (q.y) - h), length (vec2 (s, q.y)) - h);\n  d = SmoothMin (d, dMin, 0.01);\n  dMin = min (dMin, d);\n  q = p;\n  q.yz -= vec2 (0.15, -0.08);\n  d = PrEllipsDf (q, vec3 (0.08, 0.07, 0.1));\n  d = SmoothMin (d, dMin, 0.02);\n  dMin = min (dMin, d);\n  q = p;\n  q.yz -= vec2 (0.14, -0.19);\n  r = vec2 (0.03, 0.008);\n  h = 0.02;\n  d = max (PrEllCylDf (q, r, h), - PrEllCylDf (q - vec3 (0., 0., h),\n     r - 0.004, 2. * h));\n  dMin = min (dMin, d);\n  q = p;\n  q.x = abs (q.x);\n  d = PrSphDf (q - vec3 (0.049, 0.165, -0.12), 0.025);\n  dMin = min (dMin, d);\n  return 0.9 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float d, dMin, a, s, winWd;\n  dMin = dstFar;\n  q = p;\n  d = PrBoxDf (q, vec3 (outWd + 1., 0.2, outWd + 1.));\n  if (d < dMin) { dMin = d;  idObj = idGrndf; }\n  q = p;\n  a = (length (q.xz) > 0.) ? atan (q.z, - q.x) : 0.;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * a / (2. * pi) + 0.5) / 4.));\n  qq = q;  qq.x = abs (qq.x) - outWd + corWd;  qq.y -= 2. * flrHt + 0.15;\n  d = PrBoxDf (qq, vec3 (corWd + 0.2, 0.2, outWd + 0.2));\n  if (d < dMin) { dMin = d;  idObj = idCorf; }\n  d = 0.7 * max (max (q.y - 4. * flrHt + 0.03 * sin (4. * pi * q.z) - 0.75 +\n     0.5 * (abs (abs (q.x) - outWd + 2.) - 2.), abs (q.x + outWd - 2.) - 3.),\n     4. * flrHt + 0.1 - q.y);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idRf; }\n  qq = q;  qq.x = abs (abs (qq.x) - outWd + corWd) - corWd;  qq.y -= 2. * flrHt + 0.1;\n  d = PrBoxDf (qq, vec3 (0.1, 2. * flrHt, outWd));\n  qq.yz = mod (qq.yz, vec2 (2. * flrHt + 0.2, 2. * corWd)) - vec2 (flrHt + 0.5, corWd);\n  winWd = 1.7;\n  d = max (d, - min (min (length (qq.yz) - winWd,\n     PrBox2Df (vec2 (qq.z, qq.y + 1.3), vec2 (winWd, 1.3))),\n     min (PrBoxDf (vec3 (q.x + outWd, q.y - 0.5, abs (q.z) - 2.), vec3 (0.2, 0.35, winWd)),\n     PrBoxDf (vec3 (q.x + outWd - 2. * corWd, qq.y + flrHt - 0.1, q.z + 6.),\n     vec3 (0.2, 0.35, winWd)))));\n  if (d < dMin) { dMin = d;  idObj = idWl; }\n  qq = q;  qq.x = abs (qq.x + 8.) - 1.6;  qq.yz -= vec2 (0.9, 2.);\n  d = PrSphDf (qq, 0.15);\n  qq = q;  qq.xy -= vec2 (-16., 7.3);  qq.z = abs (qq.z + 6.) - 1.6;\n  d = min (d, PrSphDf (qq, 0.15));\n  if (d < dMin) { dMin = d;  idObj = idSph; }\n  q.xz -= stCent;  q.y -= 3.3;\n  qq = q;  qq.xz = Rot2D (qq.xz, -0.73 * pi);\n  a = (length (qq.xz) > 0.) ? atan (qq.z, - qq.x) : 0.;\n  qq.xz = vec2 (26. * a / (2. * pi), length (qq.xz) - 8.);\n  qq.xy = Rot2D (qq.xy, -0.25 * pi);\n  s = mod (qq.x, 0.5 * sqrt (2.));\n  d = max (0.3 * max (qq.y - min (s, 0.5 * sqrt (2.) - s),\n     max (-0.1 - qq.y, abs (qq.z) - 1.5)), abs (p.y - flrHt - 0.1) - flrHt - 0.2);\n  if (d < dMin) { dMin = d;  qHit = qq;  idObj = idStr; }\n  d = max (max (0.3 * max (abs (qq.y - 0.3) - 0.4, abs (abs (qq.z) - 1.6) - 0.1),\n     max (- q.x, q.z)), 0.1 - p.y);\n  if (d < dMin) { dMin = d;  qHit = vec3 (a, qq.yz);  idObj = idBls; }\n  q = p;  q.xz = abs (mod (q.xz + corWd, 2. * corWd) - corWd) - 0.1;  q.y -= 2. * flrHt + 0.1;\n  d = max (PrCylDf (q.xzy, 0.07, 2. * flrHt), PrBoxAn2Df (p.xz, vec2 (outWd - 2.), 3.));\n  if (d < dMin) { dMin = d;  idObj = idPil; }\n  q = p;  q.xz = abs (q.xz) - (outWd - corWd);  q.y -= 4. * flrHt + 1.8;\n  d = PrSphDf (q, 0.2);\n  if (d < dMin) { dMin = d;  idObj = idSph; }\n  q = p;  q.y -= 0.8;  d = PrCylAnDf (q.xzy, 2.4, 0.15, 0.7);\n  if (d < dMin) { dMin = d;  idObj = idCen; }\n  if (dkVu > 0.) {\n    q = p - dkPos;\n    if (PrSphDf (q, 0.5) < dMin) {\n      q.xz = Rot2D (q.xz, - dkAz);\n      q.yz = Rot2D (q.yz, - dkEl);\n      d = DukDf (q);\n      if (d < dMin) { dMin = d;  idObj = idDk; }\n    }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nvec3 ShGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec3 p, u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  rad = 2.;\n  p = vec3 (0., 2., 0.);\n  u = ro - p;\n  b = dot (rd, u);\n  w = b * b - dot (u, u) + rad * rad;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    if (d > 0. && d < dMin) {\n      dMin = d;\n      vnBall = (u + d * rd) / rad;\n    }\n  }\n  return dMin;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, qh, vn;\n  float f, dstGrnd;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    col = vec3 (0.1, 0.2, 0.6) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (max (dot (rd, sunDir), 0.), 16.);\n    f = Fbm2 (0.02 * (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.01)));\n    col = mix (col, vec3 (1.), clamp (0.2 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    col = vec3 (0.5, 0.5, 0.55);\n    vn = vec3 (0., 1., 0.);\n    if (dstGrnd < dstFar) {\n      qh = HexGrid (1.5 * ro.xz);\n      f = max (length (qh.xy) - 0.3, 0.) *\n         (1. - max (smoothstep (-0.1, -0.05, rd.y), smoothstep (0.7, 0.9, dstGrnd / dstFar)));\n      vn.yz = Rot2D (vn.yz, 0.5 * f);\n      vn.zx = vn.z * vec2 (qh.x, - qh.y) / length (qh.xy);\n      col *= 0.9 + 0.1 * ObjSShadow (ro, sunDir);\n    } else col *= 0.95;\n    col *= (0.2 + 0.8 * max (0., max (dot (vn, sunDir), 0.)));\n  }\n  return col;\n}\n\nfloat Truch (vec2 p)\n{\n  vec2 ip;\n  ip = floor (p);\n  p -= ip + 0.5;\n  if (Hashfv2 (ip) < 0.5) p = vec2 (- p.y, p.x);\n  return min (length (0.5 + p), length (0.5 - p));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, rg;\n  float dstObj, dstBall, sh, s;\n  bool fxz;\n  dstObj = ObjRay (ro, rd);\n  dstBall = BallHit (ro, rd);\n  if (dstBall < min (dstObj, dstFar)) {\n    ro += dstBall * rd;\n    rd = reflect (rd, vnBall);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idStr) {\n      col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.6 + 0.4 *\n         smoothstep (0.03, 0.05, abs (fract (2. * qHit.z + 0.5) - 0.5)));\n    } else if (idObj == idBls) {\n      qHit.y -= 0.1;\n      rg = ShStagGrid (qHit.xy, vec2 (20., 5.));\n      col4 = vec4 (0.9, 0.9, 1., 0.2) * rg.y;\n      if (abs (vn.y) < 0.01) {\n        if (rg.x == 0.) {\n          vn.y = rg.z;\n          vn.xz *= sqrt (1. - vn.y * vn.y);\n        } else vn.xz = Rot2D (vn.xz, - rg.x);\n      }\n    } else if (idObj == idGrndf) {\n      rg = ShGrid (ro.xz);\n      col4 = vec4 (0.9, 0.85, 0.8, 0.1);\n      if (vn.y > 0.99) {\n        if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n        else vn.yx = Rot2D (vn.yx, rg.x);\n      }\n      if (length (ro.xz) < 2.5) col4.rgb *= vec3 (0., 0.3, 0.5);\n      s = max (abs (ro.x), abs (ro.z));\n      if (s < outWd - 2. * corWd)\n         col4.rg *= 0.8 + 0.1 * smoothstep (0.3, 0.4, length (fract (ro.xz) - 0.5));\n      else if (s > outWd) col4.rg *= 0.95;\n      else col4.rgb = mix (col4.rgb, vec3 (0.5, 0.5, 0.8),\n         SmoothBump (0.45, 0.55, 0.02, Truch (ro.xz)));\n      col4.rgb *= rg.y;\n   } else if (idObj == idCorf) {\n      rg = ShGrid (2. * ro.xz);\n      col4 = vec4 (0.8, 0.7, 0.75, 0.1);\n      if (vn.y > 0.99) {\n        if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n        else vn.yx = Rot2D (vn.yx, rg.x);\n        if (abs (max (abs (ro.x), abs (ro.z)) - outWd + corWd) < corWd)\n           col4.rgb = mix (col4.rgb, vec3 (0.3, 0.7, 0.3),\n           SmoothBump (0.45, 0.55, 0.02, Truch (2. * ro.xz)));\n      }\n      col4.rgb *= rg.y;\n    } else if (idObj == idWl) {\n      col4 = vec4 (0.9, 0.8, 0.7, 0.1);\n      if (abs (vn.y) < 0.01) {\n        rg = ro;\n        rg.y = mod (rg.y, 2. * flrHt + 0.2);\n        fxz = (abs (vn.x) > 0.99);\n        rg = ShStagGrid ((fxz ? rg.zy : rg.xy), vec2 (2., 4.));\n        col4 *= rg.y;\n        rg.xz *= sign (fxz ? vn.x : vn.z);\n        if (fxz) {\n          if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n          else vn.xz = Rot2D (vn.xz, rg.x);\n        } else {\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n        }\n      }\n    } else if (idObj == idRf) {\n      col4 = (vn.y > 0.) ? vec4 (0.8, 0.3, 0., 0.1) : vec4 (0.8, 0.5, 0.4, 0.1);\n      col4 *= 0.6 + 0.4 * smoothstep (0.03, 0.05, abs (fract (2. * qHit.x + 0.5) - 0.5));\n    } else if (idObj == idPil) {\n      s = fract (4. * (mod (ro.y, 2. * flrHt + 0.2) - 0.4) + 0.5) - 0.5;\n      col4 = vec4 (0.8, 0.8, 0.9, 0.1) * (0.8 + 0.2 * smoothstep (0.01, 0.03, abs (s)));\n      vn.y = -0.3 * (1. - smoothstep (0., 0.1, abs (s))) * sign (s);\n      vn.xz *= sqrt (1. - vn.y * vn.y);\n    } else if (idObj == idSph) {\n      col4 = vec4 (1., 1., 0.1, 0.3);\n    } else if (idObj == idCen) {\n      rg = ShStagGrid (vec2 (atan (ro.z, - ro.x) / pi, ro.y + 0.05), vec2 (16., 4.));\n      col4 = vec4 (0.8, 0.9, 0.7, 0.1) * rg.y;\n      if (vn.y < 0.01) {\n        if (rg.x == 0.) {\n          vn.y = rg.z;\n          vn.xz *= sqrt (1. - vn.y * vn.y);\n        } else vn.xz = Rot2D (vn.xz, - rg.x);\n      }\n    } else if (idObj == idDk) {\n      s = max (dot (vn, - rd), 0.);\n      col = 0.9 * vec3 (1., 0.9, 0.3) * (0.55 + 0.45 * s) + 0.1 * pow (s, 4.) +\n         100. * pow (max (dot (VaryNf (1000. * ro, vn, 5.), - rd), 0.), 128.);\n    }\n    if (idObj != idDk) {\n      if (idObj != idRf && idObj != idSph) vn = VaryNf (50. * ro, vn, 1.);\n      sh = 0.7 + 0.3 * ObjSShadow (ro, sunDir);\n      col = mix (col4.rgb * (0.3 + 0.7 * sh * max (0., max (dot (vn, sunDir), 0.))), \n          vec3 (1.) * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.), col4.a);\n    }\n  } else col = BgCol (ro, rd);\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvec4 ShowWg (vec2 uv, vec2 canvas, vec4 parmV)\n{\n  vec4 wgBx[4];\n  vec3 cc[4], col;\n  vec2 ut, ust;\n  float vW[2], asp;\n  cc[0] = vec3 (1., 0.5, 0.5);\n  cc[1] = vec3 (0.5, 1., 0.5);\n  cc[2] = vec3 (0.5, 0.5, 1.);\n  cc[3] = vec3 (1., 1., 0.5);\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k < 2; k ++)\n     wgBx[k] = vec4 ((0.41 + 0.05 * float (k)) * asp, -0.15, 0.014 * asp, 0.18);\n  for (int k = 2; k < 4; k ++)\n     wgBx[k] = vec4 ((0.41 + 0.05 * float (k - 2)) * asp, -0.4, 0.02, 0.02);\n  vW[0] = parmV.x;  vW[1] = parmV.y;\n  col = vec3 (0.);\n  for (int k = 0; k < 2; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = 0.3 * cc[k];\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? 0.3 * cc[k] : 0.6 * cc[k];\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 1.5);\n    if (max (abs (ut.x), abs (ut.y)) < 0.025 && max (ut.x, ut.y) > 0.02) col = cc[k];\n  }\n  for (int k = 2; k < 4; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw;\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = cc[k];\n      else col = 0.6 * cc[k];\n    }\n  }\n  return vec4 (col, step (0.001, length (col)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, mPtr, wgBxC, parmV, c4;\n  vec3 ro, rd, col, cw;\n  vec2 canvas, uv;\n  float el, az, zmFac, asp, a, tCurM, cm;\n  int wgSel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  dstFar = 120.;\n  SetConsts ();\n  parmV = Loadv4 (0);\n  zmFac = 1. + 4. * parmV.y;\n  extVu = parmV.z;\n  dkVu = parmV.w;\n  stDat = Loadv4 (1);\n  mPtr = vec4 (stDat.xyz, 0.);\n  wgSel = int (stDat.w);\n  stDat = Loadv4 (2);\n  el = - stDat.x;\n  az = - stDat.y;\n  tCur = stDat.z;\n  tCurM = stDat.w;\n  stDat = Loadv4 (3);\n  vuPos = stDat.xyz;\n  stDat = Loadv4 (4);\n  vuAz = stDat.x;\n  vuEl = stDat.y;\n  stDat = Loadv4 (5);\n  dkPos = stDat.xyz;\n  dkPos.y += 1.2;\n  stDat = Loadv4 (6);\n  dkAz = stDat.x;\n  dkEl = stDat.y;\n  asp = canvas.x / canvas.y;\n  wgBxC = vec4 (0.48 * asp, -0.46, 0.022, 0.);\n  a = atan (uv.x / (asp * zmFac));\n  rd = normalize (vec3 ((2. * sin (a) / (1. + cos (a))) * asp, uv.y / zmFac, 1.));\n  sunDir = normalize (vec3 (1., 2.5, -1.));\n  if (extVu == 1.) {\n    if (mPtr.z <= 0. || wgSel >= 0) {\n      az -= 0.1 * tCur;\n      el -= 0.1 * pi * (1. + sin (0.1 * pi * tCur));\n    }\n    el = clamp (el, 0.02 * pi, 0.49 * pi);\n    ro = vec3 (0., 3., -50.);\n    ro.yz = Rot2D (ro.yz, el);\n    ro.xz = Rot2D (ro.xz, az);\n    rd.yz = Rot2D (rd.yz, el);\n    rd.xz = Rot2D (rd.xz, az);\n    sunDir.yz = Rot2D (sunDir.yz, el);\n    sunDir.xz = Rot2D (sunDir.xz, az);\n  } else {\n    az += vuAz;\n    el += vuEl + 0.1;\n    ro = vuPos;\n    ro.y += flrHt + 0.5;\n    rd.yz = Rot2D (rd.yz, el);\n    rd.xz = Rot2D (rd.xz, az);\n  }\n  col = ShowScene (ro, rd);\n  if (canvas.y < 256. || tCur - tCurM < 5.) {\n    c4 = ShowWg (uv, canvas, parmV);\n    cw = mix (col, c4.rgb, c4.a);\n    cm = (canvas.y < 256.) ? 0.3 : 0.2 + 0.8 * smoothstep (4., 5., tCur - tCurM);\n  } else {\n    cw = vec3 (0., 0.7, 0.7);\n    cm = 0.3 + 0.7 * step (2., abs (length (0.5 * uv - wgBxC.xy) -\n       wgBxC.z) * canvas.y);\n  }\n  col = mix (cw, col, cm);\n  if (mPtr.z > 0. && wgSel < 0) {\n    if (max (abs (uv.x), abs (uv.y)) < 0.05 &&\n       min (abs (uv.x), abs (uv.y)) < 0.005) col = mix (col, vec3 (0.1, 1., 0.1), 0.3);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w)\n{\n  return max (PrBox2Df (p, vec2 (b + w)), - PrBox2Df (p, vec2 (b - w)));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrEllCylDf (vec3 p, vec2 r, float h)\n{\n  return max ((length (p.xy / r) - 1.) * min (r.x, r.y), abs (p.z) - h);\n}\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, (SQRT3/2.) - q.x + 0.5 * min (q.x - SQRT3 * q.y, 0.));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);  \n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;  \n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Rector's Palace\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define NPOS 30\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 bPos[NPOS + 1];\nvec2 stCent;\nfloat outWd, corWd, flrHt, trkLen, vuAz, vuEl;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid SetConsts ()\n{\n  outWd = 20.;\n  corWd = 2.;\n  flrHt = 3.;\n  stCent = vec2 (-16., 2.);\n}\n\nvoid TrackInit ()\n{\n  float h, b, bo, s1, s2, dc;\n  h = 0.;\n  b = outWd - corWd;\n  bo = outWd - 2. * corWd;\n  s1 = 2.;\n  s2 = 6.;\n  bPos[0] = vec3 (s1, h, - outWd - 8.);\n  bPos[1] = vec3 (s1, h, - b);\n  bPos[2] = vec3 (b, h, - b);\n  bPos[3] = vec3 (b, h, b);\n  bPos[4] = vec3 (- s2, h, b);\n  bPos[5] = vec3 (- s2 - 2., h, s1);\n  h += 2. * flrHt;\n  bPos[6] = vec3 (- bo, h, - s2);\n  bPos[7] = vec3 (- b, h, - s2);\n  bPos[8] = vec3 (- b, h, - b);\n  bPos[9] = vec3 (b, h, - b);\n  bPos[10] = vec3 (b, h, s2);\n  bPos[11] = vec3 (bo, h, s2);\n  h -= 2. * flrHt;\n  bPos[12] = vec3 (s2 + 2., h, - s1);\n  bPos[13] = vec3 (s2, h, - bo + 2.);\n  bPos[14] = vec3 (-7., h, - bo + 2.);\n  bPos[15] = vec3 (-7., h, - s2 - 2.);\n  bPos[16] = vec3 (- s1, h, - s2 - 2.);\n  h += 2. * flrHt;\n  bPos[17] = vec3 (s2, h, - bo);\n  bPos[18] = vec3 (s2, h, - b);\n  bPos[19] = vec3 (- b, h, - b);\n  bPos[20] = vec3 (- b, h, b);\n  bPos[21] = vec3 (- s2, h, b);\n  bPos[22] = vec3 (- s2, h, bo);\n  h -= 2. * flrHt;\n  bPos[23] = vec3 (s1, h, s2 + 2.);\n  bPos[24] = vec3 (b, h, s2);\n  bPos[25] = vec3 (b, h, b);\n  bPos[26] = vec3 (- b, h, b);\n  bPos[27] = vec3 (- b, h, - b);\n  bPos[28] = vec3 (- s1, h, - b);\n  bPos[29] = vec3 (- s1, h, - outWd - 8.);\n  bPos[NPOS] = bPos[0];\n  dc = length (vec2 (0.5 * pi * 8., 2. * flrHt));\n  trkLen = 0.;\n  for (int k = 0; k < NPOS; k ++)\n     trkLen += ((k == 5 || k == 11 || k == 16 || k == 22) ? dc : length (bPos[k + 1] - bPos[k]));\n}\n\nvec3 TrackPos (float tp)\n{\n  vec3 bTrk, p1, p2;\n  float h, dTot, d, dCur, dc, a, t;\n  dc = length (vec2 (0.5 * pi * 8., 2. * flrHt));\n  dCur = mod (tp, trkLen);\n  dTot = 0.;\n  for (int k = 0; k < NPOS; k ++) {\n    d = ((k == 5 || k == 11 || k == 16 || k == 22) ? dc : length (bPos[k + 1] - bPos[k]));\n    if (dCur >=  dTot + d) dTot += d;\n    else {\n      t = (dCur - dTot) / d;\n      if (d == dc) {\n        if (k == 5) {\n          bTrk.xz = stCent;\n          a = -0.5 * t;\n        }\n        if (k == 11) {\n          bTrk.xz = - stCent;\n          a = 0.5 + 0.5 * t;\n        }\n        if (k == 16) {\n          bTrk.xz = stCent.yx * vec2 (-1., 1.);\n          a = 0.5 - 0.5 * t;\n        }\n        if (k == 22) {\n          bTrk.xz = stCent.yx * vec2 (1., -1.);\n          a = 1. + 0.5 * t;\n        }\n        bTrk.y = 2. * flrHt * ((k == 5 || k == 16) ? t : 1. - t);\n        bTrk.xz += 8. * vec2 (cos (pi * a), sin (pi * a));\n      } else bTrk = mix (bPos[k], bPos[k + 1], t);\n      break;\n    }\n  }\n  return bTrk;\n}                                     \n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[5], mPtr, mPtrP, stDat, parmV;\n  vec3 p1, p2, vd, vuPos, dkPos;\n  vec2 iFrag, canvas, ust;\n  float tCur, tCurM, tCurP, vW, asp, el, az, spd, vuTr, vuAz, vuEl, dkAz, dkEl;\n  int pxId, wgSel, wgReg, kSel;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 7) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  if (iFrame <= 5) {\n    parmV = vec4 (0.15, 0.3, 0., 0.);\n    mPtrP = mPtr;\n    el = 0.;\n    az = 0.;\n    tCurM = tCur;\n    tCurP = tCur;\n    vuTr = 0.;\n  } else {\n    parmV = Loadv4 (0);\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (2);\n    el = stDat.x;\n    az = stDat.y;\n    tCurP = stDat.z;\n    tCurM = stDat.w;\n    stDat = Loadv4 (3);\n    vuTr = stDat.w;\n  }\n  SetConsts ();\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 2; k ++)\n       wgBx[k] = vec4 ((0.41 + 0.05 * float (k)) * asp, -0.15, 0.014 * asp, 0.18);\n    for (int k = 2; k < 4; k ++)\n       wgBx[k] = vec4 ((0.41 + 0.05 * float (k - 2)) * asp, -0.4, 0.02, 0.02);\n    wgBx[4] = vec4 (0.48 * asp, -0.46, 0.022, 0.);\n    for (int k = 0; k < 4; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    ust = mPtr.xy * vec2 (asp, 1.) - wgBx[4].xy;\n    if (length (ust) < wgBx[4].z) wgReg = 4;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n    if (wgSel >= 0) tCurM = tCur;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az = 2. * pi * mPtr.x;\n      el = 0.5 * pi * mPtr.y;\n    }\n  } else {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.99);\n          break;\n        }\n      }\n      if      (kSel == 0) parmV.x = vW;\n      else if (kSel == 1) parmV.y = vW;\n    } else if (mPtrP.z <= 0.) {\n      if      (wgSel == 2) parmV.z = mod (++ parmV.z, 2.);\n      else if (wgSel == 3) parmV.w = mod (++ parmV.w, 2.);\n    }\n  }\n  spd = 20. * parmV.x;\n  vuTr += spd * (tCur - tCurP);\n  TrackInit ();\n  if (pxId == 3 || pxId == 4) {\n    p1 = TrackPos (vuTr + 2.);\n    p2 = TrackPos (vuTr - 2.);\n    vuPos = 0.5 * (p1 + p2);\n    vd = normalize (p1 - p2);\n    vuAz = atan (- vd.x, vd.z);\n    vuEl = - asin (vd.y);\n  }\n  if (pxId == 5 || pxId == 6) {\n    p1 = TrackPos (vuTr + 2. + 10.);\n    p2 = TrackPos (vuTr - 2. + 10.);\n    dkPos = 0.5 * (p1 + p2);\n    vd = normalize (p1 - p2);\n    dkAz = atan (- vd.x, vd.z) + 0.2 * sin (0.5 * pi * tCur);\n    dkEl = - asin (vd.y);\n  }\n  if      (pxId == 0) stDat = parmV;\n  else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 2) stDat = vec4 (el, az, tCur, tCurM);\n  else if (pxId == 3) stDat = vec4 (vuPos, vuTr);\n  else if (pxId == 4) stDat = vec4 (vuAz, vuEl, 0., 0.);\n  else if (pxId == 5) stDat = vec4 (dkPos, 0.);\n  else if (pxId == 6) stDat = vec4 (dkAz, dkEl, 0., 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}