{
    "Shader": {
        "info": {
            "date": "1628945701",
            "description": "Checkerpattern in hyperbolic space",
            "flags": 0,
            "hasliked": 0,
            "id": "Nsc3Rn",
            "likes": 4,
            "name": "Hyperbolic checkerboard",
            "published": 3,
            "tags": [
                "hyperbolicgeometry"
            ],
            "usePreview": 0,
            "username": "kaihagseth",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "float checker(in vec2 st)\n{\n  const float checkSize = 3.0;\n  vec2 tile = abs( mod(checkSize * st, 2.) - 1.);\n  tile = smoothstep( checkSize*length(fwidth(st)),0.,tile-.5);\n  tile = tile*2.-1.;\n  return tile.x*tile.y *.5 + .5;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set coordinate system from -1.5 to 1.5 on y-axis\n    // dist 1.0 is where distance will go to infinite in hyperbolic space.\n    vec2 uv = 1. * ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    uv = rotate2d(iTime/5.) * uv;\n    \n    //Transfrom to hyperbolic space.\n    if (length(uv) > .5) {\n        fragColor = vec4(vec3(1),1.);\n        return;\n    }\n    uv /=  (1. / (length(uv) + .5) ) - 1.;\n    uv += vec2(iTime, 2.*sin(iTime/3.));\n    fragColor = vec4(vec3(checker(uv)),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}