{
    "Shader": {
        "info": {
            "date": "1701719962",
            "description": "My first attempt at a path tracer. enjoyed creating this and Learned a lot",
            "flags": 32,
            "hasliked": 0,
            "id": "dttfDB",
            "likes": 0,
            "name": "Djanco's path tracer",
            "published": 3,
            "tags": [
                "raytracer",
                "pathtracer"
            ],
            "usePreview": 0,
            "username": "djancool",
            "viewed": 72
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 tex = texture(iChannel1, uv);\n    tex.rgb /= tex.a;\n    \n    // reinhard tonemapping \n    tex /= tex + vec4(1.0);\n \n    fragColor = tex;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159263535\n\n#define NUM_SPHERES 1\n#define NUM_BOXES 6\n#define NUM_PLANES 2\n\n//#define RENDER_PLANES\n//#define PHONE\n\n\nstruct Ray\n{\n    vec3 pos;\n    vec3 dir;    \n};\n\nstruct Material\n{\n    vec3 col;\n    float roughness;\n    vec3 emission;\n    bool metallic;\n};\n\nstruct HitInfo\n{\n    bool hit;\n    vec3 normal;\n    vec3 pos;\n    float dist;\n    Material mat;\n};\n\n\nstruct Sphere\n{\n    vec3 pos;\n    float radius;\n    Material mat;\n};\n\nstruct Box\n{\n    vec3 pos;\n    vec3 size;\n    Material mat;\n};\n\nstruct Plane\n{\n    vec3 pos;\n    vec3 normal;\n    vec2 size;\n    Material mat;\n};\n\nHitInfo testSphere(Ray ray, Sphere sphere)\n{\n    float t = max(dot(sphere.pos - ray.pos, ray.dir), 0.001);     // Length along RD that is closest to sphere centre/origin\n    vec3 tpos = ray.pos + ray.dir * t;                            // pos along RD that is closest to sphere centre/origin\n    float tdis = distance(tpos, sphere.pos);                      // Distance from tpos to sphere centre/origin\n    float x1 = sqrt(sphere.radius * sphere.radius - tdis * tdis); // Get length of sphere surface to tpos\n    float tx1 = t - x1;                                           // Distance along RD to sphere surface\n    float tx2 = t + x1;                                           // Distance along RD to sphere backface\n    vec3 tx1Pos = ray.pos + ray.dir * tx1;                        // pos of sphere surface\n    vec3 tx2Pos = ray.pos + ray.dir * tx2;                        // pos of sphere backface\n    \n    // Calculate normal\n    vec3 normal = normalize(sphere.pos - tx1Pos);\n    \n    HitInfo hitInfo;\n    \n    hitInfo.hit = tdis < sphere.radius;\n    hitInfo.pos = tx1Pos;\n    hitInfo.dist = tx1;\n    hitInfo.normal = normal;\n    hitInfo.mat = sphere.mat;\n    \n    return hitInfo;\n}\n\n\nHitInfo testBox(Ray ray, Box box)\n{\n    vec3 roo = ray.pos - box.pos;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/ray.dir;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*box.size;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x,t1.y),t1.z);\n    float tF = min(min(t2.x,t2.y),t2.z);\n    \n    HitInfo hitInfo;\n    hitInfo.dist = 10000.0;\n    hitInfo.hit = false;\n    hitInfo.mat = box.mat;\n    \n    // no intersection\n\tif( tN>tF || tF<0.0 ) return hitInfo;\n\n    #if 1\n    // this works as long as the ray origin is not inside the box\n    vec4 res = vec4(tN, step(tN,t1) );\n    #else\n    // use this instead if your rays origin can be inside the box\n    vec4 res = (tN>0.0) ? vec4( tN, step(vec3(tN),t1)) :\n                          vec4( tF, step(t2,vec3(tF)));\n    #endif\n    \n    // add sign to normal and convert to ray space\n\tres.yzw = (vec4(sign(ray.dir)*res.yzw,0.0)).xyz;\n    \n    hitInfo.normal = res.yzw;\n    hitInfo.dist = res.x;\n    hitInfo.pos = ray.dir * (res.x - 0.00001) + ray.pos;\n    hitInfo.hit = true;\n\n\treturn hitInfo;\n}\n\n\nHitInfo testPlane(Ray ray, Plane plane)\n{\n    HitInfo hitInfo;\n    hitInfo.dist = 100000.0;\n    hitInfo.mat = plane.mat;\n    hitInfo.hit = false;\n    \n    if(dot(ray.dir, plane.normal) > 0.0) return hitInfo;\n    float t = dot(plane.pos - ray.pos, plane.normal) / dot(ray.dir, plane.normal);\n    if(t > 0.001)\n    {\n        hitInfo.pos = ray.dir * t + ray.pos;\n        \n        vec3 planeTangent = normalize(cross(plane.normal, vec3(0.0, 1.0, 0.0)));\n        vec3 planeBiTangent = cross(plane.normal, planeTangent);\n        mat3 TBN = mat3(planeTangent, planeBiTangent, plane.normal);\n        vec3 localPoint = (hitInfo.pos - plane.pos) * TBN;\n        \n        if(abs(localPoint.x) < plane.size.x && abs(localPoint.y) < plane.size.y)\n        {\n            hitInfo.dist = length(ray.dir * t);\n            hitInfo.hit = true;\n            hitInfo.normal = -plane.normal;\n        }\n    }\n    \n    return hitInfo;\n}\n\n\nHitInfo testScene(Ray ray, Sphere sphere[NUM_SPHERES], Box box[NUM_BOXES], Plane plane[NUM_PLANES])\n{\n    HitInfo hitInfo;\n    hitInfo.dist = 100000.0;\n    \n    // Loop over spheres\n    for(int i = 0; i < sphere.length(); i++)\n    {\n        HitInfo tempHitInfo;\n        tempHitInfo = testSphere(ray, sphere[i]);\n        \n        if(tempHitInfo.dist < hitInfo.dist) hitInfo = tempHitInfo;\n    }\n    // Loop over boxes\n    for(int i = 0; i < box.length(); i++)\n    {\n        HitInfo tempHitInfo;\n        tempHitInfo = testBox(ray, box[i]);\n        \n        if(tempHitInfo.dist < hitInfo.dist) hitInfo = tempHitInfo;\n    }\n    // Loop over planes\n    #ifdef RENDER_PLANES\n    for(int i = 0; i < plane.length(); i++)\n    {\n        HitInfo tempHitInfo;\n        tempHitInfo = testPlane(ray, plane[i]);\n        \n        if(tempHitInfo.dist < hitInfo.dist) hitInfo = tempHitInfo;\n    }\n    #endif\n\n\n    return hitInfo;\n}\n\n\nvec3 hash3( uvec3 x )\n{\n    const uint k = 1103515245U;\n\n    x = ((x >> 8U) ^ x.yzx) * k;\n    x = ((x >> 8U) ^ x.yzx) * k;\n    x = ((x >> 8U) ^ x.yzx) * k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n\nvec3 randDir(vec3 dir, uvec3 index)\n{\n    vec3 rnd = 2.0 * (0.5 - hash3(index));\n    rnd = tan(rnd);\n    rnd = normalize(rnd);\n    \n    // Uniform distribution\n    //return rnd * sign(dot(dir, rnd));\n    \n    // Cosine weighted distribution // We will have les samples on angles, wich makes them darker, wich simulates lambertian\n    return normalize(dir + rnd);\n}\n\nvec3 randDirSpec(vec3 dir, uvec3 index, float roughness)\n{\n    vec3 rnd = 2.0 * (0.5 - hash3(index));\n    rnd = tan(rnd);\n    rnd = normalize(rnd);\n    \n    // Uniform distribution\n    return normalize(dir + roughness * rnd * sign(dot(dir, rnd)));\n}\n\nvec2 uniformDiscSample(float radius, vec2 randomSeed)\n{\n    // Convert polar coordinates to Cartesian coordinates\n    float theta = 2.0 * 3.1415926535897932384626433832795 * randomSeed.x;\n    float r = radius * sqrt(randomSeed.y);\n\n    // Cartesian coordinates\n    float x = r * cos(theta);\n    float y = r * sin(theta);\n\n    return vec2(x, y);\n}\n\n\n//// ROTATION AMTRIX ////\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n            vec3(1, 0, 0),\n            vec3(0, c, -s),\n            vec3(0, s, c));\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n            vec3(c, 0, s),\n            vec3(0, 1, 0),\n            vec3(-s, 0, c));\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n            vec3(c, -s, 0),\n            vec3(s, c, 0),\n            vec3(0, 0, 1));\n}\n\n\nvoid rotateCamera(inout Ray ray, vec2 rot)\n{\n    ray.pos *= rotateX(rot.x);\n    ray.pos *= rotateY(rot.y);\n    \n    ray.dir *= rotateX(rot.x);\n    ray.dir *= rotateY(rot.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define SPP 15\n#define Bounces 8\n\nvec3 getEnv(vec3 dir)\n{\n    vec3 sunDir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 sunCol = vec3(1.0, 0.8, 0.6) * 300.0;\n    vec3 sun = pow(max(dot(dir, sunDir), 0.0), 100.0) * sunCol;\n    \n    vec3 tex = texture(iChannel0, dir).rgb * 1.0;\n    return max(tex + sun, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n// Resets render based on mouse movement\n    bool reset = iFrame == 0;\n    \n    // Check for mouse movement\n    reset = iMouse.z > 0.0;\n\n\n\n// ALL SPHERES IN SCENE //\n    Sphere sphere1;\n    sphere1.pos = vec3(-0.7, -1.9, -1.3);\n    sphere1.radius = 1.0;\n    sphere1.mat.col = vec3(0.96);\n    sphere1.mat.roughness = 0.0;\n    sphere1.mat.metallic = false;\n    \n    Sphere sphere2;\n    sphere2.pos = vec3(-15.0, 0.0, 0.0);\n    sphere2.radius = 1.0;\n    sphere2.mat.col = vec3(0.96);\n    sphere2.mat.roughness = 0.4;\n    sphere2.mat.metallic = false;\n    \n    Sphere sphereCollection[NUM_SPHERES];\n    sphereCollection[0] = sphere1;\n    //sphereCollection[1] = sphere2;\n    \n// ALL BOXES IN SCENE //\n    // Floor\n    Box box1;\n    box1.pos = vec3(0.0, -3.0, 0.0);\n    box1.size = vec3(3.0, 0.1, 3.1);\n    box1.mat.col = vec3(1.0);\n    box1.mat.roughness = 1.0;\n    box1.mat.metallic = false;\n    // Left\n    Box box2;\n    box2.pos = vec3(0.0, 0.0, -3.0);\n    box2.size = vec3(3.0, 2.9, 0.1);\n    box2.mat.col = vec3(1.0, 0.0, 0.0);\n    box2.mat.roughness = 0.02;\n    box2.mat.metallic = false;\n    // Right\n    Box box3;\n    box3.pos = vec3(0.0, 0.0, 3.0);\n    box3.size = vec3(3.0, 2.9, 0.1);\n    box3.mat.col = vec3(0.0, 1.0, 0.0);\n    box3.mat.roughness = 0.02;\n    box3.mat.metallic = false;\n    // Back\n    Box box4;\n    box4.pos = vec3(-3.0, 0.0, 0.0);\n    box4.size = vec3(0.1, 3.0, 3.0);\n    box4.mat.col = vec3(0.9, 0.96, 0.925) * 0.9;\n    box4.mat.roughness = 0.02;\n    box4.mat.metallic = false;\n    // Top\n    Box box5;\n    box5.pos = vec3(0.0, 3.0, 0.0);\n    box5.size = vec3(3.0, 0.1, 3.1);\n    box5.mat.col = vec3(1.0);\n    box5.mat.roughness = 1.0;\n    box5.mat.metallic = false;\n    \n    Box box6;\n    box6.pos = vec3(0.7, -1.9, 1.3);\n    box6.size = vec3(1.0);\n    box6.mat.col = vec3(0.96);\n    box6.mat.roughness = 0.8;\n    box6.mat.metallic = false;\n\n    Box boxCollection[NUM_BOXES];\n    boxCollection[0] = box1;\n    boxCollection[1] = box2;\n    boxCollection[2] = box3;\n    boxCollection[3] = box4;\n    boxCollection[4] = box5;\n    boxCollection[5] = box6;\n    \n// ALL PLANES IN SCENE //\n    Plane plane1;\n    plane1.pos = vec3(2.9, 0.0, 0.0);\n    plane1.size = vec2(3.0);\n    plane1.normal = normalize(vec3(-1.0, 0.0, 0.00));\n    plane1.mat = box4.mat;\n    \n    Plane plane2;\n    plane2.pos = vec3(0.0, 2.88, 0.0);\n    plane2.size = vec2(1.0);\n    plane2.normal = normalize(vec3(-0.001, -10.0, 0.0));\n    plane2.mat.col = vec3(0.9);\n    plane2.mat.emission = vec3(1.0, 0.86666666666, 0.74509803921) * 20.0;\n    plane2.mat.emission = vec3(20.0);\n\n    Plane planeCollection[NUM_PLANES];\n    planeCollection[0] = plane1;\n    planeCollection[1] = plane2;\n\n    \n\n// Camera\n    Ray ray;\n    HitInfo hitInfo;\n\n    // ViewDir and fov\n    float a = 0.5/max(iResolution.x, iResolution.y);\n    ray.dir = normalize(vec3((fragCoord - iResolution.xy * 0.5) * a, 0.5));\n    // Translate camera position and direction\n    vec2 mouseRotation = vec2( iMouse.y / iResolution.y * -PI * 0.35 + PI * 0.175,\n                              -iMouse.x / iResolution.x * PI * -0.5 - 0.75 * PI);\n    #ifdef PHONE\n        mouseRotation = vec2(0.01, 1.50) * PI;\n    #endif\n    ray.pos = vec3(0.0, 0.0, -15.0);\n    rotateCamera(ray, mouseRotation);\n\n\n    // Calculate camera forward, up and right vector // This is used for DOF\n    Ray forwardRay;\n    forwardRay.dir = vec3(0.0, 0.0, 1.0);\n    rotateCamera(forwardRay, mouseRotation);\n    vec3 cam_forward = forwardRay.dir;\n    vec3 cam_right = normalize(cross(cam_forward, vec3(0.0, 1.0, 0.0)));\n    vec3 cam_up = cross(cam_forward, cam_right);\n\n\n// START OF RT //\n    vec3 totalIncomingLight = vec3(0.0);\n\n    for(int i = 0; i < SPP; i++)\n    {\n \n\n\n    // DOF //\n        // Uniform disc sampling aligned with camera forward vector\n        vec2 rnd = hash3(uvec3(i + iFrame * int(!reset)) * uvec3(1, 5712, 91120891)).rg;\n        vec2 discSample = uniformDiscSample(0.1, rnd);\n        vec3 offset = discSample.x * cam_right + discSample.y * cam_up;\n        \n        // Focus distance\n        float focusDist = 14.0;\n        // Calculate focus point position\n        vec3 focusPoint = ray.pos + ray.dir * focusDist;\n        // Offset ray start pos\n        ray.pos += offset;\n        // recalculate ray direction taking in account DOF\n        ray.dir = normalize(focusPoint - ray.pos);\n\n    // AA\n        vec2 supPixelSize = 2.0 / iResolution.xy;\n        ray.pos += supPixelSize.x * (rnd.x - 0.5) * cam_right + supPixelSize.y * (rnd.y - 0.5) * cam_up;\n        \n\n        Ray sampleRay;\n        sampleRay = ray;\n\n\n        vec3 diffuseIncomingLight = vec3(0.0);\n        vec3 rayColor = vec3(1.0);\n\n        for(int j = -1; j <= Bounces; j++)\n        {\n        \n            hitInfo = testScene(sampleRay, sphereCollection, boxCollection, planeCollection);\n            \n            // Fresnel calculations\n            float fresnel = 0.04 + 0.96 * pow(1.0 - dot(sampleRay.dir, hitInfo.normal), 5.0);\n            if(hitInfo.mat.metallic) fresnel = 1.0;\n            \n            // Objects become less rough on angles\n            hitInfo.mat.roughness *= dot(sampleRay.dir, hitInfo.normal) * 0.75 + 0.25;\n            \n            // Select random ray to sample specular reflection instead of diffusion\n            float randomSpec = hash3(uvec3(fragCoord.xy + 1000.0, i + j * 20 + iFrame * 200)).x;\n            float specProbability = float(randomSpec < fresnel);\n            \n            if(hitInfo.hit)\n            {\n\n                // If hit something emissive, add it to total light multiplied by diffuse color\n                diffuseIncomingLight += hitInfo.mat.emission * rayColor;\n                \n                if(hitInfo.mat.metallic == false) rayColor *= mix(hitInfo.mat.col, vec3(1.0), specProbability);\n                else rayColor *= hitInfo.mat.col;\n                \n                \n                // Set the new start sample pos \n                sampleRay.pos = hitInfo.pos;\n                // Get random directions\n                uvec3 index = uvec3(fragCoord.xy, i + j * 10 + iFrame * 100);\n                \n                vec3 diffuseDir = randDir(-hitInfo.normal, index);\n                vec3 specularDir = reflect(sampleRay.dir, hitInfo.normal);\n                sampleRay.dir = mix(diffuseDir, specularDir, specProbability * (1.0 - hitInfo.mat.roughness));\n            }\n            else // if we didnt hit anything, we hit the void aka skybox\n            {\n                // Get environment lighting\n                uvec3 index = uvec3(fragCoord.xy, i + j * 30 + iFrame * 300);\n                vec3 diffuseDir = randDir(-hitInfo.normal, index);\n                vec3 specularDir = reflect(sampleRay.dir, hitInfo.normal);\n                sampleRay.dir = mix(diffuseDir, specularDir, specProbability);\n                \n                diffuseIncomingLight += getEnv(sampleRay.dir) * rayColor;\n                break;\n            }   \n        }\n        totalIncomingLight += diffuseIncomingLight;\n    }\n    \n    totalIncomingLight /= float(SPP);\n    \n    \n// The alpha channel is the amount of frames that have passed, when it gets reset it is set back to 1\n    // Get current calculated frame\n    vec4 currentRender = vec4(totalIncomingLight, 1.0);\n    // Get previous frame from buffer\n    vec4 prevRender = texture(iChannel1, fragCoord.xy / iResolution.xy).rgba;\n    // Add them toghetter to get avarage\n    vec4 accumulateRender = prevRender + currentRender;\n    \n    // if you need to reset set buffer to current frame\n    if(reset) accumulateRender = currentRender;\n    \n    fragColor = vec4(accumulateRender);\n    //fragColor = vec4(vec3(hitInfo.dist / 10.0), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}