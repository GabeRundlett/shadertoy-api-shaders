{
    "Shader": {
        "info": {
            "date": "1524930900",
            "description": "Recently fell in love with kaleidoscopes. Decided to make a very basic one with nice colors",
            "flags": 0,
            "hasliked": 0,
            "id": "XdtBWH",
            "likes": 22,
            "name": "Mild Kaleidoscope",
            "published": 3,
            "tags": [
                "2d",
                "illusion",
                "kaleidoscope",
                "mirror",
                "rotation",
                "reflect",
                "symmetry",
                "mild"
            ],
            "usePreview": 1,
            "username": "Gaktan",
            "viewed": 1308
        },
        "renderpass": [
            {
                "code": "//#define USE_TEXTURE\n\n#define COLOR_TRANSITION_SIZE 0.04\n//#define COLOR_TRANSITION_DEBUG\n\n// Whether wrapping transition is linear or squared\n//#define LINEAR\n\n// Gives good results if LINEAR is ON\n//#define FIX_X\n\n#define KALEIDOSCOPE_SPEED_X    9.0\n#define KALEIDOSCOPE_SPEED_Y  -20.0\n#define KALEIDOSCOPE_SPLITS     6.0\n\n//#define MOUSE\n\n#define GAMMA_CORRECT\n\n\n#define PI 3.14159265359\n\nvec2 kaleidoscope(vec2 uv, vec2 offset, float splits)\n{\n    // XY coord to angle\n    float angle = atan(uv.y, uv.x);\n    // Normalize angle (0 - 1)\n    angle = ((angle / PI) + 1.0) * 0.5;\n    // Rotate by 90Â°\n    angle = angle + 0.25;\n    // Split angle \n    angle = mod(angle, 1.0 / splits) * splits;\n    \n    // Warp angle\n#ifndef LINEAR\n    float a = (2.0*angle - 1.0);\n    angle = -a*a + 1.0;\n    \n    //angle = -pow(a, 0.4) + 1.0;\n#else\n    angle = -abs(2.0*angle - 1.0) + 1.0;\n#endif\n    \n    angle = angle*0.1;\n    \n    // y is just dist from center\n    float y = length(uv);\n    //y = (y*30.0);\n    \n#ifdef FIX_X\n    angle = angle * (y*3.0);\n#endif\n    \n    return vec2(angle, y) + offset;\n}\n\nvec3 heatmapGradient(float t)\n{\n\treturn clamp((pow(t, 1.5) * 0.8 + 0.2) * vec3(smoothstep(0.0, 0.35, t) + t*0.5, smoothstep(0.5, 1.0, t), max(1.0 - t*1.7, t*7.0 - 6.0)), 0.0, 1.0);\n}\n\nvec3 customGradient(float t)\n{\n    t = mod(t*-0.9, 42.0);\n\treturn 0.5 + 0.5*cos( 3.0 + t*0.075*t + vec3(0.0,0.6,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Mobile friendly UVs\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float time = iTime;\n    \n    // Start with a good color\n    time += 1207.0;\n\n#ifdef MOUSE\n\ttime += 0.25 * iMouse.x;\n#endif\n    \n    vec2 A = vec2(time * KALEIDOSCOPE_SPEED_X * 0.005, \n                  time * KALEIDOSCOPE_SPEED_Y * 0.005);\n    \n\tuv = kaleidoscope(uv, A, KALEIDOSCOPE_SPLITS);\n    \n#ifdef USE_TEXTURE\n    uv = uv * 0.7;\n    vec4 tex = texture(iChannel0, uv);\n    fragColor = vec4(tex.rgb, 1.0);\n#else\n    float tex = texture(iChannel1, uv).r;\n\n    // frequency and shape of the transition\n    float d = (cos(uv.y+1.2*cos(uv.x)*tex) * 0.5) + 0.5;\n    d = smoothstep(0.5 - COLOR_TRANSITION_SIZE, 0.5 + COLOR_TRANSITION_SIZE, d);\n\n#ifdef COLOR_TRANSITION_DEBUG\n    fragColor = vec4(d,d,d, 1.0);\n    return;\n#endif\n    \n    vec3 a = customGradient(tex);\n    vec3 b = heatmapGradient(tex);\n\n#ifdef GAMMA_CORRECT\n    a = pow(a, vec3(2.2));\n    b = pow(b, vec3(2.2));\n#endif\n    \n    vec3 color = mix(a, b, d);\n    \n#ifdef GAMMA_CORRECT\n    color = pow(color, vec3(1.0 / 2.2));\n#endif\n    \n\tfragColor = vec4(color.rgb, 1.0);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}