{
    "Shader": {
        "info": {
            "date": "1652283468",
            "description": "Makes a good random number generator too! ... If you're the government.",
            "flags": 8,
            "hasliked": 0,
            "id": "7lBfWm",
            "likes": 15,
            "name": "more (i*i)/j",
            "published": 3,
            "tags": [
                "iij"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "//even more (i*i)%j\nvec3 cmap(float a){return abs(sin(vec3(a,a*.4,a*4.)));}\nvoid map(inout vec4 c, vec3 p){\n  ivec3 ip=ivec3(floor(p));ip*=ip;int j=int((iTime-30.)*3.);\n  float a=float((ip.x%j)*(ip.y%j)*(ip.z%j));\n  vec3 col=cmap(a);\n  p=fract(p)-vec3(.5);\n  float d=length(p*(.1+.9*col));\n  c+=vec4(col*exp(-d*50.),d);\n}\nvec3 scene(vec3 ro,vec3 rd){\n  vec4 c=vec4(0);\n  for(int i=0;i<100;i++){\n    map(c,ro+rd*c.a);\n  }\n  return c.rgb;\n}\nvoid mainImage(out vec4 O, in vec2 U){\n  float tim=mod(iTime,75.);\n  if(tim<30. || tim>60.){\n    vec2 m=mod(U,vec2(4));\n    int t=int(floor(tim*3.))%256;\n    ivec2 v=ivec2((floor(U/4.)-iResolution.xy/8.)*(iTime>15.?cos(sin(iTime*iTime*.001)):1.));\n    v+=ivec2(t/2);v*=v;v.x=v.x%t;v.y=v.y%t;v+=ivec2(1);\n    float a=float(v.x*v.y);\n    O=vec4(sin(a+5.),sin(a),sin(a+.4),1.)*((m.x<1. || m.y<1.)?0.4:(m.y>3.)?1.:.75);\n  }else{\n    float t=iTime-30.;\n    U+=sin(t*t*.001)*U.yx;\n    vec3 rd=normalize(vec3((U-.5*iResolution.xy)/iResolution.x,1.)),ro=vec3(13.3,13.7,t*10.);\n    O=vec4(scene(ro,rd),1.);\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Euler Beats (i*i*n)%d, d gives a cycle, n a pattern, i the note # 1,2,3...\n#define d 512\n#define pi 3.141592653\n#define bps 6.\nint scale(int note){int n2=note % 12;//shifts dissonant tones into scale\n if((n2==1)||(n2==3)||(n2==6)||(n2==8)||(n2==11))note=note-1;\n return note;\n}// mod of note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(int n){n=scale(n);return (n>0)?440.0 * pow(2.0, (float(n) - 67.0) / 12.0):0.0;}\nfloat spow(float n, float p){return sign(n)*pow(abs(n),p);}\nvec2 Sound(int n, float time, float p, int o){//(i*i*n)%d as a MIDI note shifted into a minor scale\n  int i=int(floor(time*bps))%d;//sin^p, o=MIDI note offset\n  i=(((i*((n*i)%d)))%d)/12;//being far too specific with the parens\n  return vec2(1.,1.+sin(time)*0.005)*spow(sin(ntof(i+o)*mod(time*pi,pi*2.)),p*fract(time*bps));\n}\nvec2 mainSound(int samp, float time){\n  return (Sound(7,time,4.,36)-Sound(9,time+bps/3.,2.,36).yx+fract(Sound(63,time+bps/2.,1.,48)*1.25)/3.)*.25;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}