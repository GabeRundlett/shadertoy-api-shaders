{
    "Shader": {
        "info": {
            "date": "1592920216",
            "description": "Mellow riff on ZnW's Voronoi Wave, [url]https://www.shadertoy.com/view/3lfyDB[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wlXcDS",
            "likes": 18,
            "name": "Mellow Voronoi",
            "published": 3,
            "tags": [
                "voronoi",
                "wave",
                "gradient",
                "motion",
                "pattern",
                "wallpaper"
            ],
            "usePreview": 0,
            "username": "Mipmap",
            "viewed": 1064
        },
        "renderpass": [
            {
                "code": "// Mellow riff on ZnW's Voronoi Wave, https://www.shadertoy.com/view/3lfyDB\n//\nconst int POINTS = 16; // Point rows are determined like N / 10, from bottom to up\nconst float WAVE_OFFSET = 12000.0;\nconst float SPEED = 1.0 / 12.0;\nconst float COLOR_SPEED = 1.0 / 4.0;\nconst float BRIGHTNESS = 1.2;\n\nvoid voronoi(vec2 uv, inout vec3 col)\n{\n    vec3 voronoi = vec3(0.0);\n    float time = (iTime + WAVE_OFFSET)*SPEED; // Vary time offset to affect wave pattern\n    float bestDistance = 999.0;\t\t\n    float lastBestDistance = bestDistance;\t// Used for Bloom & Outline\n    for (int i = 0; i < POINTS; i++)\t\t// Is there a proper GPU implementation of voronoi out somewhere?\n    {\n        float fi = float(i);\n        vec2 p = vec2(mod(fi, 1.0) * 0.1 + sin(fi),\n                      -0.05 + 0.15 * float(i / 10) + cos(fi + time * cos(uv.x * 0.025)));\n        float d = distance(uv, p);\n        if (d < bestDistance)\n        {\n            lastBestDistance = bestDistance;\n            bestDistance = d;\n            \n            // Two colored gradients for voronoi color variation\n            voronoi.x = p.x;\n            voronoi.yz = vec2(p.x * 0.4 + p.y, p.y) * vec2(0.9, 0.87);\n        }\n    }\n    col *= 0.68 + 0.19 * voronoi;\t// Mix voronoi effect and default shadertoy gradient\n    col += smoothstep(0.99, 1.05, 1.0 - abs(bestDistance - lastBestDistance)) * 0.9;\t\t\t// Outline\n    col += smoothstep(0.95, 1.01, 1.0 - abs(bestDistance - lastBestDistance)) * 0.1 * col;\t\t// Outline fade border\n    col += (voronoi) * 0.1 * smoothstep(0.5, 1.0, 1.0 - abs(bestDistance - lastBestDistance));\t// Bloom\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime*COLOR_SPEED+uv.xyx+vec3(0,2,4));\n    \n    // Effect looks nice on this uv scaling\n    voronoi(uv * 4.0 - 1.0, col); \n\n    // Output to screen\n    fragColor = vec4(col,1.0)*BRIGHTNESS;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}