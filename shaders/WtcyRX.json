{
    "Shader": {
        "info": {
            "date": "1609553981",
            "description": "Attempts to extract 3D stereoscopic image from a video, in Amber/Blue or Red/Green, easily adapted for other color combinations.\nThe idea is to extract images when the video's camera is panning left/right, or subject is moving left/right or rotating.",
            "flags": 32,
            "hasliked": 0,
            "id": "WtcyRX",
            "likes": 3,
            "name": "Stereoscopic 3D image extraction",
            "published": 3,
            "tags": [
                "stereo3dstereoscopic"
            ],
            "usePreview": 0,
            "username": "xavierseb",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "//\n// Stereoscopic 3D Amber/Blue image extracted from video\n// this extracts Left and Right eye image from a video in which either the subject\n// or the camera is panning Left/Right, \n// or the subject is rotating\n// \n// Needs Amber/Blue or Red/Green glasses to view in stereo 3D\n//\n// Please set parameters in Common Section\n// \n// frame grabbing technique from: www.shadertoy.com/view/MtsfW2\n\n// Might need to REWIND / RESTART the shader a few times to get a good result.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n        O = texture(iChannel0, U/iResolution.xy)     *2.8\n              + texture(iChannel1, U/iResolution.xy) *3.9;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// specify the distance between Left and Right images, \n// higher refresh rate might need higher offset value ? \n// try values :\n//     25 FPS->.08 , 60 FPS->.16 (estimated)\n//const float LR_Offset = .16;    // if you have a fast graphics card, try .16 or higher\nconst float LR_Offset = .08;      // seems to work well at 25fps\n\n// specify suitable Left/Right frame grab location in the movie\n//const float Frame_Pos = 1.7;\nconst float Frame_Pos = 3.35;\n\n#define AMBER vec4(.33,.33,0,1)\n#define BLUE  vec4(0,0,.67,1)\n\n#define RED   vec4(.25,0,0,1)\n#define GREEN vec4(0,.25,0,1)\n\n\n//Set the Color mode red/green or amber/blue\n\n#define LEFT AMBER\n#define RIGHT BLUE\n\n//#define LEFT RED\n//#define RIGHT GREEN",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// RIGHT eye's image\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( iChannelTime[1] < Frame_Pos ) {\n        O = texture( iChannel1, U/iResolution.xy);\n        if( distance(O, vec4(0,1,0,1))<.67 ) O=vec4(0);\n        else O *= RIGHT;\n    }\n    else O = texture( iChannel0, U/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// LEFT eye's image\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( iChannelTime[1] < Frame_Pos + LR_Offset ) {\n        O = texture( iChannel1, U/iResolution.xy);\n        if( distance(O, vec4(0,1,0,1))<.67 ) O=vec4(0);\n        else O *= LEFT; \n    }\n    else O = texture( iChannel0, U/iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}