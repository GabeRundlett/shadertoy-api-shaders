{
    "Shader": {
        "info": {
            "date": "1557500580",
            "description": "reference:\nhttps://someuser-321.github.io/TreeGenerator/index.html\nhttps://www.shadertoy.com/view/Xds3zM",
            "flags": 0,
            "hasliked": 0,
            "id": "wtf3DB",
            "likes": 23,
            "name": "Fractal Tree - 2D",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "tree",
                "recursion"
            ],
            "usePreview": 0,
            "username": "ikuto",
            "viewed": 1501
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n\n#define SIZE \t\t\t\t0.2\n#define MAX_DEPTH \t\t\t7\n#define SPLIT_ANGLE \t\tPI / 6.0\n#define LENGTH_VARIATOPN\t0.5\n#define FLOWER_PROBABILITY\t0.7\n\nstruct Branch\n{\n\tvec2  pos;\n    float len;\n    float angle;\n    float width;\n    int   depth;\n};\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 19.19;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat udLine(in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\n#define V2(len, angle) vec2(len*sin(angle), len*cos(angle))\nfloat udFlower(in vec2 p, float id)\n{\n    float sz = 0.003*(1.0+0.5*hash11(1436.986*id));\n    float angle = PI * hash11(7491.143*id);\n    float d = udLine(p, -V2(sz, angle), V2(sz, angle));\n    d = min(d, udLine(p, -V2(sz, angle+PI*0.25), V2(sz, angle+PI*0.25)));\n    d = min(d, udLine(p, -V2(sz, angle+PI*0.5), V2(sz, angle+PI*0.5)));\n    d = min(d, udLine(p, -V2(sz, angle+PI*0.75), V2(sz, angle+PI*0.75)));\n    return d;\n}\n\nvec3 render(in vec2 uv)\n{\n    vec3 color = vec3(0.0);\n    \n    Branch stack[MAX_DEPTH + 1];\n    stack[0] = Branch(vec2(0.5, 0.0), SIZE, 0.0, 0.01, 0); //push\n\tfloat branchID = 0.0;\n    \n    for (int stackPos = 0; stackPos >= 0; branchID += 1.0) //execute loop until the stack is empty\n    {\n        Branch branch = stack[stackPos--]; //pop\n        float prob = hash11(9375.264*branchID);\n        branch.angle += 0.05*(sin(iTime)*prob);\n        \n        float len = branch.len * (1.0 + LENGTH_VARIATOPN * (prob-0.5));\n        vec2 start = branch.pos;\n        vec2 end = start + vec2(len*sin(branch.angle), len*cos(branch.angle));\n        float ud =  udLine(uv, start, end);\n        \n        color += vec3(1.0 - smoothstep(0.0, branch.width, ud));\n        \n        if (branch.depth < MAX_DEPTH)\n        {\n            float len = branch.len * (0.67);\n        \tfloat width = max(0.001, branch.width * 0.7);\n        \tstack[++stackPos] = Branch(end, len, branch.angle+SPLIT_ANGLE, width, branch.depth+1); //push\n        \tstack[++stackPos] = Branch(end, len, branch.angle-SPLIT_ANGLE, width, branch.depth+1); //push\n        }\n        \n        if (branch.depth == MAX_DEPTH)\n        {\n            float ud = udFlower(uv - end, branchID);\n            if (ud < 0.001 && prob < FLOWER_PROBABILITY)\n        \t\tcolor = vec3(1.0, 0.7, 0.8) * (1.0 - smoothstep(0.0, 0.001, ud));\n        }\n    }\n \t\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(render(fragCoord/iResolution.x), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}