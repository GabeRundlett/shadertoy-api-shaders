{
    "Shader": {
        "info": {
            "date": "1711890544",
            "description": "made at 2024-03-30 live at Revision.\nColors looked completely different on the big screen, so I tried weird adjustements to compensate, and now it looks awful here.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Mcc3zj",
            "likes": 1,
            "name": "rdpjam2024",
            "published": 3,
            "tags": [
                "jam",
                "extrusion"
            ],
            "usePreview": 0,
            "username": "rubix",
            "viewed": 128
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159526535\n#define TAU 6.283185307179586\n#define t iTime\nmat2 r2d(float a) { float c=cos(a), s=sin(a); return mat2(c, -s, s, c); }\nfloat sphere(vec3 p, float r) { return length(p) - r; }\nfloat extrude(float d, float d2) { return max(d, -d2); }\nvec3 gay(float t) { return 0.5 + 0.5 * cos(TAU * (t + vec3(0.33, 0.66, 1.))); }\n\n\nfloat face(vec3 p, vec3 off) {\n  return sphere(p - off, .8+sin(t*3.+(off.x+off.y+off.z)*1.5)*.1);\n}\n\nfloat thing(vec3 p) {\n  float s = sphere(p, 1.);\n  vec2 off = vec2(1., 0.);\n  s = extrude(s, face(p, off.xyy));\n  s = extrude(s, face(p, off.yxy));\n  s = extrude(s, face(p, off.yyx));\n  s = extrude(s, face(p, -off.xyy));\n  s = extrude(s, face(p, -off.yxy));\n  s = extrude(s, face(p, -off.yyx));\n  return s;\n}\nfloat map(vec3 p) {\n  \n  p.xy *= r2d(t*1.8);\n  p.zy *= r2d(t*1.7);\n  p.xz *= r2d(t*1.5);\n  vec2 o = vec2(1.+sin(t*2.73)*.9, 0.);\n\n  float s = 10000.;//thing(p);\n  s = min(s, thing(p + o.xyy));\n  s = min(s, thing(p + o.yxy));\n  s = min(s, thing(p + o.yyx));\n  s = min(s, thing(p - o.xyy));\n  s = min(s, thing(p - o.yxy));\n  s = min(s, thing(p - o.yyx));\n  return s;\n}\n\nvec3 normal(vec3 p) {\n  vec2 e = vec2(0.001, 0.);\n  return normalize(vec3(\n    map(p+e.xyy)-map(p-e.xyy),\n    map(p+e.yxy)-map(p-e.yxy),\n    map(p+e.yyx)-map(p-e.yyx)));\n}\n\nvec4 plas( vec2 v, float time )\n{\n\tfloat c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n\treturn vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\nvec4 main2(vec2 uv)\n{\n    float a = atan(uv.x / uv.y) / 3.14;\n  \n  vec3 ro=vec3(0., 0., -4.);\n  vec3 rd=vec3(uv, 1.);\n  vec3 ld=normalize(vec3(sin(t), cos(t), 3.));\n  vec3 p=ro;\n  \n  float tt = t;\n  if (abs(uv.y) + mod(t*.2, .5) > .5) tt += 3.;\n  float k = (1.5+sin(tt)*sin(tt)*sin(tt)*2.);\n  k = pow(k, 3.);\n  vec2 uv2 = r2d(length(uv)*k) * uv;\n  vec3 bgcol = vec3(0., tan(uv.y), .5-abs(uv2.x));\n  bgcol += .01/(uv2.y+.001);\n  bgcol.r = pow(bgcol.r, 2.);\n  \n  vec3 col = vec3(0.);\n  for (int i = 0; i < 50; i++) {\n    float d = map(p);\n    if (d > 500.) break;\n    if (d < 0.001) {\n      vec3 n = normal(p);\n      float diff = dot(-ld, n);\n      float spec = pow(clamp(0., 1., dot(-ld, n)), 200.);\n      col = n * diff + vec3(1.) * spec;\n   /*   col.r = pow(col.r, 1.5);\n      col.g = pow(col.g, 1.5);\n      col.b = pow(col.b, 1.5);\n  */    break;\n    }\n    p += rd * d;\n    bgcol += 0.009 * gay(a);\n  }\n  bgcol = sqrt(bgcol);\n  vec4 out_color = vec4((col.x == 0. ? bgcol : col), 1.);\n  return sqrt(out_color);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    fragColor = main2(uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}