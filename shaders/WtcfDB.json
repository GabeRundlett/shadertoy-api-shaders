{
    "Shader": {
        "info": {
            "date": "1613337483",
            "description": "License CC0: Menger sponge space base\n Tweaking menger sponges revealed a space based hidden inside\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WtcfDB",
            "likes": 12,
            "name": "Menger sponge space base",
            "published": 3,
            "tags": [
                "sponge"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "// License CC0: Menger sponge space base\n//  Tweaking menger sponges revealed a space based hidden inside\n\n#define TIME            iTime\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  9.0\n#define HIT_SKY         1E6\n#define MAX_RAY_MARCHES 100\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define PSIN(x)         (0.5+0.5*sin(x))\n#define PERIOD          20.0\n#define PERIODTIME      mod(TIME,PERIOD)\n#define PERIODN         int(mod(floor(TIME/PERIOD), 3.0))\n#define FADE            1.0\n\nconst vec3  sunDirection        = normalize(vec3(-2.5, 3.5, -10.0));\nconst vec3  sunColor1           = vec3(1.0, 0.8, 0.8);\nconst vec3  sunColor2           = vec3(1.0, 0.8, 0.9);\nconst vec3  smallSunDirection   = normalize(vec3(0.5, 0, -10.0));\nconst vec3  smallSunColor1      = vec3(1.0, 0.6, 0.6);\nconst vec3  smallSunColor2      = vec3(1.0, 0.3, 0.6);\nconst vec3  ringColor           = sqrt(vec3(0.95, 0.65, 0.45));\nconst vec4  planet              = vec4(150.0, 0.0, 180.0, 50.0)*1000.0;\nconst vec3  planetCol           = sqrt(vec3(0.3, 0.5, 0.9))*1.5;\nconst vec3  ringsNormal         = normalize(vec3(1.0, 02.25, 0.0));\nconst vec4  rings               = vec4(ringsNormal, -dot(ringsNormal, planet.xyz));\nconst mat2  rot45               = ROT(PI/4.0);\nconst mat2  rot1                = ROT(1.0);\nconst mat2  rot2                = ROT(2.0);\nconst vec3  center              = vec3(0.0, 0.0, 0.0);\nconst vec4  glowSphere          = vec4(center, 1.2);\nconst vec3  glowCol             = vec3(3.0, 2.0, 1.);\nconst vec3  baseCol             = vec3(0.45, 0.45, 0.5)*0.5;\n\nfloat sphered(vec3 ro, vec3 rd, vec4 sph, float dbuffer) {\n    float ndbuffer = dbuffer/sph.w;\n    vec3  rc = (ro - sph.xyz)/sph.w;\n  \n    float b = dot(rd,rc);\n    float c = dot(rc,rc) - 1.0;\n    float h = b*b - c;\n    if( h<0.0 ) return 0.0;\n    h = sqrt( h );\n    float t1 = -b - h;\n    float t2 = -b + h;\n\n    if( t2<0.0 || t1>ndbuffer ) return 0.0;\n    t1 = max( t1, 0.0 );\n    t2 = min( t2, ndbuffer );\n\n    float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);\n    float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);\n    return (i2-i1)*(3.0/4.0);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat sphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat box(vec4 p, vec4 b) {\n  vec4 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(max(q.x, q.w),max(q.y,q.z)),0.0);\n}\n\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nvec2 raySphere(vec3 ro, vec3 rd, vec3 ce, float ra) {\n  vec3 oc = ro - ce;\n  float b = dot(oc, rd);\n  float c = dot(oc, oc) - ra*ra;\n  float h = b*b - c;\n  if (h<0.0) return vec2(-1.0); // no intersection\n  h = sqrt(h);\n  return vec2( -b-h, -b+h );\n}\n\nvec3 gasGiant(vec3 ro, vec3 rd, vec3 sunDir) {\n  vec2 si = raySphere(ro, rd, planet.xyz, planet.w);\n  float pi = rayPlane(ro, rd, rings);\n  \n  vec3 planetSurface = ro + si.x*rd;\n  vec3 planetNormal = normalize(planetSurface - planet.xyz);\n  float planetDiff = max(dot(planetNormal, sunDir), 0.0);\n  float planetBorder = max(dot(planetNormal, -rd), 0.0);\n  float planetLat = (planetSurface.x+planetSurface.y)*0.0005;\n  vec3 planetCol = mix(1.3*planetCol, 0.3*planetCol, pow(PSIN(planetLat+1.0)*PSIN(sqrt(2.0)*planetLat+2.0)*PSIN(sqrt(3.5)*planetLat+3.0), 0.5));\n\n  vec3 ringsSurface = ro + pi*rd;\n\n  float borderTransparency = smoothstep(0.0, 0.1, planetBorder);\n  \n  float ringsDist = length(ringsSurface - planet.xyz)*1.0;\n  float ringsPeriod = ringsDist*0.001;\n  const float ringsMax = 150000.0*0.655;\n  const float ringsMin = 100000.0*0.666;\n  float ringsMul = pow(PSIN(ringsPeriod+1.0)*PSIN(sqrt(0.5)*ringsPeriod+2.0)*PSIN(sqrt(0.45)*ringsPeriod+4.0)*PSIN(sqrt(0.35)*ringsPeriod+5.0), 0.25);\n  float ringsMix = PSIN(ringsPeriod*10.0)*PSIN(ringsPeriod*10.0*sqrt(2.0))*(1.0 - smoothstep(50000.0, 200000.0, pi));\n\n  vec3 ringsCol = mix(vec3(0.125), 0.75*ringColor, ringsMix)*step(-pi, 0.0)*step(ringsDist, ringsMax)*step(-ringsDist, -ringsMin)*ringsMul;\n  \n  vec3 final = vec3(0.0);\n    \n  final += ringsCol*(step(pi, si.x) + step(si.x, 0.0));\n  \n  final += step(0.0, si.x)*pow(planetDiff, 0.75)*mix(planetCol, ringsCol, 0.0)*borderTransparency + ringsCol*(1.0 - borderTransparency);\n\n  return final;\n}\n\nvec3 sunColor(vec3 ro, vec3 rd) {\n  float diff = max(dot(rd, sunDirection), 0.0);\n  float smallDiff = max(dot(rd, smallSunDirection), 0.0);\n  vec3 col = vec3(0.0);\n\n  col += pow(diff, 800.0)*sunColor1*8.0;\n  col += pow(diff, 150.0)*sunColor2;\n\n  col += pow(smallDiff, 8000.0)*smallSunColor1*1.0;\n  col += pow(smallDiff, 400.0)*smallSunColor2*0.5;\n  col += pow(smallDiff, 150.0)*smallSunColor2*0.5;\n\n  return col;\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  vec3 scol = sunColor(ro, rd);\n  vec3 gcol = gasGiant(ro+vec3(0.0, 0.0, 200000.0), rd, sunDirection);\n  \n  return scol+gcol;\n}\n\nfloat minda = 1E6;\n\nfloat mengerSponge(vec4 p) {\n  float db = box(p, vec4(1.175, 1.-0.1, 1.05, 1.0));\n  if(db > .125) return db;\n    \n  float res = db;\n\n  float s = 1.0;\n  const int mc = 4;\n  for(int m = 0; m < mc; ++m) {\n\n    vec4 a = mod(p*s, 2.0)-1.0;\n    s *= 3.0;\n    vec4 r = abs(1.0 - 3.0*abs(a));\n\n    r -= vec4(2.0, 2.0, 2.0, 2.0)+vec4(0.1, 0.1, 0.1, 0)*-2.;\n    float da = sphere(r.xyz, 1.0); // w\n    float db = box(r.yzw, vec3(1)); // x\n    float dc = box(r.xzw, vec3(1)); // y\n    float dd = box(r.xyw, vec3(1.2)); // z\n\n    minda = min(minda, max(da, da));\n\n    float du = da;\n    du = min(du, db);\n    du = min(du, dc);\n    du = min(du, dd);\n    float lw = mix(0.215, 0.05, float(m)/float(mc-1));\n    du = abs(du)-lw;\n    du /= s;\n\n    res = max(res, -du);\n  }\n  \n  return (res);\n}\n\nfloat df(vec3 p) {\n  p -= center;\n  vec4 pp = vec4(p, 0.);\n  pp.xz *= rot1;\n  pp.yz *= rot2;\n  pp.zw *= rot45;\n  pp.yw *= rot45;\n  pp.xw *= rot45;\n  float dm = mengerSponge(pp);\n  return dm;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out int iter) {\n  float it = df(ro);\n  float t = it;\n  int i = 0;\n  float mrl = MAX_RAY_LENGTH + it;\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE || t > mrl) break;\n    t += d;\n  }\n  iter = i;\n  return t > mrl ? HIT_SKY : t;\n}\n\nvec3 normal(vec3 pos, float e) {\n  vec2  eps = vec2(e,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat softShadow(vec3 pos, vec3 ld, float ll, float mint, float k) {\n  const float minShadow = 0.25;\n  float res = 1.0;\n  float t = mint;\n  for (int i=0; i<24; i++) {\n    float distance = df(pos + ld*t);\n    res = min(res, k*distance/t);\n    if (ll <= t) break;\n    if(res <= minShadow) break;\n    t += max(mint*0.2, distance);\n  }\n  return clamp(res,minShadow,1.0);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(1.0/2.2)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  vec3 skyCol = skyColor(ro, rd);\n\n  int iter = 0;\n  float id = df(ro);\n  float t = rayMarch(ro, rd, iter);\n\n  float ifade = 1.0-tanh_approx(3.0*float(iter)/float(MAX_RAY_MARCHES));\n\n  vec3 pos = ro + t*rd;    \n\n  minda = 1E6;\n  vec3 nor = normal(pos,0.00001+t*0.00075);\n  float mind = 1.0;\n\n  vec3 color = vec3(0.0);\n  \n  float sd = sphered(ro, rd, glowSphere, t);\n\n  if (t < HIT_SKY) {\n    // Ray intersected object\n    color = baseCol*tanh_approx(2.5*max(minda*minda, 0.0));\n  } else {\n    // Ray intersected sky\n    return mix(skyCol*sqrt(ifade), glowCol, sd);\n  }\n\n  vec3 ld1   = sunDirection;\n  vec3 ld2   = smallSunDirection;\n\n  float sha = softShadow(pos, ld1, 4.0, 0.01, 64.0);\n\n  float dif1 = max(dot(nor,ld1),0.0);\n  float spe1 = pow(max(dot(reflect(rd, nor), ld1), 0.), 10.);\n  float lin1 = mix(0.2, 1.0, dif1*sha);\n\n  float dif2 = max(dot(nor,ld2),0.0);\n  float spe2 = pow(max(dot(reflect(rd, nor), ld2), 0.), 10.);\n  float lin2 = mix(0.1, 1.0, dif1*sha);\n\n  vec3 col = vec3(0.0);\n  col += sunColor1*lin1*color;\n  col += sunColor2*lin2*color;\n  col *= 0.5;\n  col += sunColor1*spe1*sha;\n  col += sunColor2*spe2*sha;\n  \n  const float minds = 2.0;\n  col = mix(mix(0.1*col, col, 1.0-mind), col, tanh_approx(minds*abs(minda*minds))/minds);\n\n  col = col*ifade;\n  \n  col = mix(col, glowCol, sd);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q=fragCoord.xy/iResolution.xy; \n  vec2 p = -1.0 + 2.0*q;\n  p.x *= iResolution.x/iResolution.y;\n\n  vec3 ro = vec3(3, 3.0, -9.0);\n  vec3 la = center;\n  vec3 up = vec3(0.0, 1.0, 0.0);\n  \n  switch(PERIODN) {\n  case 0:\n    ro *= 0.25+0.05*PERIODTIME/PERIOD;\n    ro.xz *= ROT(PERIODTIME/PERIOD);\n    break;\n  case 1:\n    ro *= 1.0-0.6*PERIODTIME/PERIOD;\n    ro.xz *= ROT(1.0+PERIODTIME/PERIOD);\n    ro.xy *= ROT(-0.5*PERIODTIME/PERIOD);\n    break;\n  case 2:\n    ro = vec3(5.0-15.0*PERIODTIME/PERIOD, -3.0+6.0*PERIODTIME/PERIOD, 30.0-40.0*PERIODTIME/PERIOD);\n    break;\n  default:\n    break;\n  }\n  \n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.5*ww );\n\n  vec3 col = render(ro, rd);\n  \n  col *= smoothstep(0.0, FADE, PERIODTIME);\n  col *= 1.0-smoothstep(PERIOD-FADE, PERIOD, PERIODTIME);\n\n  fragColor = vec4(postProcess(col, q),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}