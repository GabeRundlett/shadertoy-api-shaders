{
    "Shader": {
        "info": {
            "date": "1595701779",
            "description": "Experimenting with cellular noise resulted with this smoke-like shader. I'm quite happy with the result, as it is just 2 layers of modified Worley noise.\n\nUse mouse to adjust cartoon effect :)\n\nLicense: CC BY 3.0\nAuthor: Jan Mróz (jaszunio15)",
            "flags": 0,
            "hasliked": 0,
            "id": "wlSyDd",
            "likes": 23,
            "name": "Colorful smoke noise",
            "published": 3,
            "tags": [
                "noise",
                "smoke",
                "domainwarp"
            ],
            "usePreview": 0,
            "username": "jaszunio15",
            "viewed": 1574
        },
        "renderpass": [
            {
                "code": "//License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n/*\n\tOriginally I wanted to make noise based on Voronoise by Inigo Quilez, \n\tbut without reading his code. \n\t(reference shader: https://www.shadertoy.com/view/Xd23Dh)\n\t\n\tMy shader quicky became something different. My concept wasn't\n\tnearly close to what Inigo did. Maybe next time :)\n*/\n\n#define TIME (iTime * 5.0)\n\nvec2 hash22(vec2 x)\n{\n \treturn fract(sin(x * mat2(43.37862, 24.58974, 32.37621, 53.32761)) * 4534.3897);\n}\n\nfloat hash12(vec2 x)\n{\n \treturn fract(sin(dot(x, vec2(43.37861, 34.58761))) * 342.538772);\n}\n\nvec2 getCellPoint(vec2 cell)\n{\n    float time = TIME * (hash12(cell + 0.123) - 0.5) * 0.5;\n    float c = cos(time), s = sin(time);\n    vec2 hash = (hash22(cell) - 0.5) * mat2(c, s, -s, c) + 0.5;;\n \treturn hash + cell;\n}\n\nfloat getCellValue(vec2 cell)\n{\n \treturn hash12(cell);\n}\n\nfloat makeSmooth(float x)\n{\n    float mouse = (iMouse.x / iResolution.x);\n    if (mouse == 0.0) mouse = 1.0 - (cos(iTime * 0.5) * 0.5 + 0.5);\n  \treturn mix(x * x * (3.0 - 2.0 * x), sqrt(x), mouse);\n}\n\nfloat modifiedVoronoiNoise12(vec2 uv)\n{\n \tvec2 rootCell = floor(uv);\n\n    float value = 0.0;\n\n    for (float x = -1.0; x <= 1.0; x++)\n    {\n     \tfor(float y = -1.0; y <= 1.0; y++)\n        {\n         \tvec2 cell = rootCell + vec2(x, y);\n            vec2 cellPoint = getCellPoint(cell);\n            float cellValue = getCellValue(cell);\n            float cellDist = distance(uv, cellPoint);\n            value += makeSmooth(clamp(1.0 - cellDist, 0.0, 1.0)) * cellValue;\n        }\n    }\n\n    return value * 0.5;\n}\n\nfloat layeredNoise12(vec2 x)\n{\n \tfloat sum = 0.0;\n    float maxValue = 0.0;\n\n    for (float i = 1.0; i <= 2.0; i *= 2.0)\n    {\n        float noise = modifiedVoronoiNoise12(x * i) / i;\n     \tsum += noise;\n        maxValue += 1.0 / i;\n    }\n\n    return sum / maxValue;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 stretchedUV = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.xy;\n\tfloat vignette = smoothstep(0.55, 0.0, length(stretchedUV));\n\tuv.y -= TIME * 0.05;\n    \n\tuv *= 6.0;\n    \n  \t//just simplified hue shifting stuff with uv based offset\n  \tvec4 col = sin(TIME * 0.1 + uv.y * 0.2 + vec4(0,2,4,6)) * 0.5 + 0.5;\n  \tvec4 col2 = sin(TIME * 0.1 + 0.6 + uv.y * 0.2 + vec4(0,2,4,6)) * 0.5 + 0.5;\n\n    uv += layeredNoise12(uv);\n    //uv -= layeredNoise12(uv + 43.0) * 0.5;\n  \tfloat noise = layeredNoise12(uv);\n  \tnoise *= vignette;\n  \tfragColor = mix(col, col2 * 0.2, 1.0 - noise * 2.0);\n    fragColor = smoothstep(-0.14, 1.1, fragColor);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}