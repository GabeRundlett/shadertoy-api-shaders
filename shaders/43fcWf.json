{
    "Shader": {
        "info": {
            "date": "1726701336",
            "description": "I found that 4 layer FBM looks good to me and then figured it could be vectorized to control performance more.  But then this opens it up to 8 layers easily etc. Made by Rik Riesmeijer, 2024 - CC0: Copyright free. Enjoy!",
            "flags": 0,
            "hasliked": 0,
            "id": "43fcWf",
            "likes": 2,
            "name": "Vectorized FBM By RikR",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "fbm",
                "domain",
                "four",
                "cc0",
                "layer",
                "public",
                "free",
                "vectorization",
                "copyrightfree",
                "vectorized",
                "vfbm"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 54
        },
        "renderpass": [
            {
                "code": "vec4 vfbm(vec2 v) {                                     // Vectorized FBM (CC0: Copyright-Free)\n    mat4 r = mat4(  1.6   , -1.2   , 1.2   ,   1.6  ,   // Rotation and scale pythagorean matrix.\n                    1.12  , -3.84  , 3.84  ,   1.12 ,   // Double rotation and scaling.\n                  - 2.816 , -7.488 , 7.488 , - 2.816,   // Triple rotation and scaling.\n                  -13.4912, -8.6016, 8.6016, -13.4912); // Quadruple rotation and scaling.\n    vec4 x = vec4(v, 0, 0) * r, y = vec4(0, 0, v) * r,         // Vectorized fbm x and y.\n         a = floor(x), b = floor(y), c = ceil(x), d = ceil(y), // Adjacent xy locations.\n         e = smoothstep(0.0, 1.0, fract(x)),                   // Smoothed x mix factor.\n         f = smoothstep(0.0, 1.0, fract(y));                   // Smoothed y mix factor.\n    return vec4(dot(mix(mix(fract(sin(mod(a + 0.1 * b, 2e3)) * 4e4),         // Interpolation:\n                            fract(sin(mod(c + 0.1 * b, 2e3)) * 4e4), e),     // 1. big sine hash;\n                        mix(fract(sin(mod(a + 0.1 * d, 2e3)) * 4e4),         // 2. mix neighbors;\n                            fract(sin(mod(c + 0.1 * d, 2e3)) * 4e4), e), f), // 3. scale term size;\n                    vec4(0.5, 0.25, 0.125, 0.0625)));                        // 4. sum scaled terms.\n}                                                                            // By Rik Riesmeijer.\nvec4 fbm(vec2 v) {                                 // FBM with 8 layers.\n    vec2 w = vec2(-13.4912 * v.x -  8.6016 * v.y,  // Get vfbm rotate and scale.\n                    8.6016 * v.x - 13.4912 * v.y); // Make it vec2 to separate input.\n    return vfbm(v) + 0.625 * vfbm(w * 0.25);       // Scale second term and fix scaling.\n}\n\nvoid mainImage(out vec4 c, vec2 v) {                     // Demo.\n    bool b = v.x / iResolution.x > 0.5;                  // Split screen:\n    v = 1000.0 * (v - 0.5 * iResolution.xy) / iResolution.y;\n    vec4 d;                                              // Second color var.\n    //for(int i = 0; i < 1000000; i++)                   // For speed test.\n        //d = vec4(N(v * 0.1 + iTime));\n    d = fbm(v / 999.0 + 0.1 * iTime);\n    d = smoothstep(0.4, 0.5, 1.0 - d);\n    d = mix(vec4(0.5, 0.7, 0.9, 0), vec4(1), d);\n    v = 2.0 * v / iResolution.xy;                        // Rescale for 1D.\n    c = vec4(fbm(vec2(v.x + iTime * 0.3, 0.0)).x > v.y); // 1D Demo.\n    c = b? c : d;                                        // 2D Demo.\n}\n\n// Core ideas:\n//  + Use pythagorean matrix to get easy to compute rotation.\n//  + Improve pythagorean matrix by combining the UV layer scale.\n//  + Use full 16 register by figuring out how to put four 2x2 matrices as one 4x4 matrix.\n//  + Use 4 layers to vectorize all hashing and further mixing into one vector.\n//  + Use dot product to vectorize geometric summation.\n//  + Group each step of parameter computation into four parallelizable 4D vectors.\n//  + Write it out mostly in core functions for compiler optimization.\n//  + Combine two four layer vectorized ones into one eight layer one.\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}