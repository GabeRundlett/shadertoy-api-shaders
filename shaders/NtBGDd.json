{
    "Shader": {
        "info": {
            "date": "1624934459",
            "description": "Experimenting more, this time with texture mapping and visualizing UV grid lines.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBGDd",
            "likes": 18,
            "name": "Polygon Interpolation II",
            "published": 3,
            "tags": [
                "test",
                "texture",
                "barycentric",
                "uvs",
                "polygon",
                "interpolation",
                "meanvaluecoordinates"
            ],
            "usePreview": 1,
            "username": "oneshade",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) (0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0)))\n\n// Number of vertices\n#define N 6\n\nvoid polyLerpWeights(in vec2 p, in vec2[N] poly, out float[N] weights) {\n    float norm = 0.0;\n    for(int n = 0; n < N; n++) {\n        vec2 a = poly[(n - 1 + N) % N] - p;\n        vec2 b = poly[n] - p;\n        vec2 c = poly[(n + 1) % N] - p;\n\n        float d = length(b);\n        float ab = dot(a, b), bc = dot(b, c), ad = length(a) * d, dc = d * length(c);\n        float u = sqrt(max(0.0, (ad - ab) / (ad + ab))) * sign(a.x * b.y - a.y * b.x);\n        float v = sqrt(max(0.0, (dc - bc) / (dc + bc))) * sign(b.x * c.y - b.y * c.x);\n\n        weights[n] = (u + v) / d;\n        norm += weights[n];\n    }\n\n    for(int n = 0; n < N; n++) weights[n] /= norm;\n}\n\n// Simple point in polygon test extracted from @iq's polygon\n// distance shader: https://www.shadertoy.com/view/wdBXRW\nbool pointInPolygon(in vec2 p, in vec2[N] v) {\n    bool res = false;\n    for (int i=0, j=N - 1; i < N; j = i, i++) {\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n\n        // Winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 c = bvec3(p.y >= v[i].y, p.y < v[j].y, e.x * w.y > e.y * w.x);\n        if (all(c) || all(not(c))) res = !res;  \n    }\n    \n    return res;\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    float time = 0.5 * iTime;\n    vec3 color = vec3(0.0);\n\n    // Create polygon\n    float t1 = 0.5 * time, t2 = 1.25 * time, t3 = 1.5 * time;\n    float c1 = 0.4 * cos(t1), s1 = 0.4 * sin(t1);\n    float c2 = 0.4 * cos(t2), s2 = 0.4 * sin(t2);\n    float c3 = 0.4 * cos(t3), s3 = 0.4 * sin(t3);\n\n    vec2[N] poly;\n    poly[0] = vec2(1.0, 0.0);\n    poly[1] = vec2(0.5, sqrt(0.75));\n    poly[2] = vec2(-poly[1].x, poly[1].y);\n    poly[3] = vec2(-1.0, 0.0);\n    poly[4] = -poly[1];\n    poly[5] = vec2(poly[1].x, -poly[1].y);\n    vec2[N] anim = poly; // Copy original positions for animating\n\n    // Distort the vertices\n    for (int n=0; n < N; n++) {\n        float id = float(n + 3);\n        float freq = Hash11(id * 393.84) * 2.0 - 1.0;\n        float phase = Hash11(id * 183.37);\n        float amp = Hash11(id * 275.35) * 1.25;\n        float ang = iTime * freq + phase;\n        anim[n] += vec2(cos(ang), sin(ang)) * amp;\n        anim[n] *= 0.25;\n    }\n\n    // Compute interpolation weights\n    float[N] weights;\n    polyLerpWeights(uv, anim, weights);\n\n    // Interpolate texture coordinates from vertices\n    vec2 texUv = vec2(0.0);\n    for (int n=0; n < N; n++) texUv += poly[n] * weights[n];\n    color = texture(iChannel0, texUv).rgb;\n    color -= smoothstep(1.25 * fwidth(texUv.x), 0.0, abs(mod(texUv.x, 0.2) - 0.1));\n    color -= smoothstep(1.25 * fwidth(texUv.y), 0.0, abs(mod(texUv.y, 0.2) - 0.1));\n\n    // Get distance to edges\n    float d = 1000000.0;\n    for (int n=0; n < N; n++) d = min(d, sdLine(uv, anim[n], anim[(n + 1) % N]));\n\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, d));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}