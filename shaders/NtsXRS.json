{
    "Shader": {
        "info": {
            "date": "1625960961",
            "description": "Trying to make a mandelbrot set in GLSL. X movement with mouse will pan over the fractal in the X axis, and Y movement with mouse will zoom in/out.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtsXRS",
            "likes": 2,
            "name": "MandelbrotBlue",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "ZenithGD",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "vec2 sqrcomp(vec2 v)\n{\n    return vec2(v.x * v.x - v.y * v.y, 2.* v.x * v.y); \n}\n\nvec3 mandelbrot(vec2 v, int max_iter)\n{\n    vec2 z = vec2(0.);\n    vec2 c = v / (0.1 + iMouse.y / iResolution.y * 15.) ;\n    c += vec2(-1.5+(iMouse.x / iResolution.x),.25);\n    int i;\n    float min_dist = 10000.;\n    for ( i = 0; i < max_iter; i++ )\n    {\n        if ( length(z) > 2. ) break;\n        z = sqrcomp(z) + c;\n        \n        float nm = length(z);\n        if ( nm < min_dist ) min_dist = nm;\n    }\n    \n    \n    return mix(vec3(2./255., 0., 36./255.), vec3(0., 212./255., 1.), 1. - min_dist * 2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) from center\n    vec2 uv = (fragCoord.xy - .5*iResolution.xy) / iResolution.y;\n    int max_iter = 50;\n    \n    // Output to screen\n    fragColor = vec4(mandelbrot(uv, max_iter),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}