{
    "Shader": {
        "info": {
            "date": "1378947554",
            "description": "Again, some moving 3d noise + cosines.  ",
            "flags": 0,
            "hasliked": 0,
            "id": "Xsl3Rl",
            "likes": 46,
            "name": "Jelly thing",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 6943
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// set this to 2 for higher image quality\n#define AA 1\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nvec3 texturize( sampler2D sa, in vec3 p, in vec3 n )\n{\n\tvec3 x = texture( sa, p.yz ).xyz;\n\tvec3 y = texture( sa, p.zx ).xyz;\n\tvec3 z = texture( sa, p.xy ).xyz;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nvec4 disp( vec3 p )\n{\n\tp.z -= 4.0*(-1.0+2.0*noise( 0.05*p - 0.25*iTime)) * cos(2.0*iTime);\n\t\n\tfloat off = iTime*0.5 + 0.4*sin(iTime*2.0);\n\t\n\tvec3 q = p*0.15*vec3(1.0,0.4,1.0);\n    float f = 0.0;\t\n\tf += 0.500*noise( q ); q *= 2.1; q.y += off;\n\tf += 0.250*noise( q ); q *= 2.0; q.y += off;\n\tf += 0.125*noise( q );\n\t\n\treturn vec4( f, q );\n}\n\nvec3 map( in vec3 p )\n{\n\tvec4 dd = disp( p );\n\t\n\tfloat f = dd.x;\n\n\tdd.yzw *= 4.0;\n\tfloat g = sin(dd.y)*sin(dd.z)*sin(dd.w) * (1.0-smoothstep( -5.0, 20.0, p.y ));\n\tf += f*0.2*g;\n\t\n\tfloat d = p.x - 20.0*f;\n\n\td *= 0.2;\n\n\treturn vec3( d, f, g );\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n\tvec3 res = vec3(1e10,-1.0, -1.0);\n\n\tfloat maxd = 200.0;\n\tfloat precis = 0.002;\n    float h = 1.0;\n    float t = 0.0;\n    float m = -1.0;\n    float g = -1.0;\n    for( int i=0; i<128; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n\t    vec3 res = map( ro+rd*t );\n        h = res.x;\n\t\tm = res.y;\n\t\tg = res.z;\n        t += h;\n    }\n\tif( t<maxd ) res=vec3(t,m,g);\n\n\treturn res;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.01;\n\tfloat h = 1.0;\n    for( int i=0; i<64; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, max(k*h/t,0.0) );\n\t\tt += clamp( h, 0.02, 0.1 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec3 shade( vec3 pos, vec3 nor, vec3 rd, float occ, float di, float t )\n{\n    // materual\n\tvec3  ref = reflect(rd,nor);\n\tvec4  rr  = 16.0*disp( pos );\n    float f   = smoothstep( -5.0, 20.0, pos.y );\n\tfloat cm = smoothstep(-0.5,1.0,di+f);\n\tvec3 col = mix( vec3(1.0,0.95,0.65), 0.9*vec3(1.0,0.6,0.2 ), cm );\n\tcol *= mix( vec3(1.0), 0.2+1.0*texturize( iChannel1, 0.001*rr.yzw, nor ), 0.25+0.75*f );\n\t\n\t// lighting\n\tocc *= pos.x/10.0;\n\tfloat sss = clamp(1.5*(occ*occ*0.5+0.5*occ), 0.0, 1.0 );\n\tfloat rha = softshadow( pos+0.1*nor, ref, 4.0 );\n    vec3  lin =  0.3*pow(texture( iChannel3, nor ).xyz,vec3(2.0))*occ;\t\n          lin += 1.0*sss*vec3(1.1,0.90,0.7);\n\n    // combine\t\n\tcol = lin*col;\n    col += (0.2+0.8*cm)*0.15*rha*pow(texture( iChannel2, reflect(rd,nor)).xyz,vec3(2.0));\n\t\n\treturn col * exp(-0.0001*t*t);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.1,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nvec3 render( in vec2 p, in mat4 cam )\n{\n\tvec2 q = p / iResolution.xy;\n\n    // create view ray\n    const float fle = 2.0;\n\n    vec2  sp = (-iResolution.xy + 2.0*p) / iResolution.y;\n    vec3  ro = vec3( cam[0].w, cam[1].w, cam[2].w );\n\tvec3  rd = normalize( (cam*vec4(sp,fle,0.0)).xyz );\n\n    \n//    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    //-----------------------------------------------------\n    // render\n    //-----------------------------------------------------\n    vec3 res = \tintersect(ro,rd);\n    float t = res.x;\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 col = shade( pos, nor, rd, res.y, res.z, t );\n\n    // to screen\t \n    col = max( col, 0.0 );\n    col = pow( col, vec3(0.45) ); \n\n    //-----------------------------------------------------\n    // post\n    //-----------------------------------------------------\n    col = col*col*(3.0-2.0*col);\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\tfloat an = 1.0;\n\tvec3 ro = 40.0*vec3(sin(an),0.0,cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    mat4 cam = mat4( uu, ro.x, vv, ro.y, ww, ro.z, 0.0, 0.0, 0.0, 1.0 );\n\n    // render\n    #if AA<2\n\tvec3 col = render(  fragCoord, cam );\n    #else\n    vec3 col = vec3(0.0);\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n\t    col += render( fragCoord + (vec2(i,j)/float(AA)), cam );\n    }\n\tcol /= float(AA*AA);\n    #endif\n\n\n\tfragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}