{
    "Shader": {
        "info": {
            "date": "1581250352",
            "description": "1) A Sobel filter is apllied to get edges\n2) A normal map is computed from edges",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldXzB",
            "likes": 8,
            "name": "Lit bricks",
            "published": 3,
            "tags": [
                "sobel",
                "light",
                "normal"
            ],
            "usePreview": 1,
            "username": "Ref",
            "viewed": 616
        },
        "renderpass": [
            {
                "code": "//#define EDGES\n//#define NORMALS\n\nfloat luminance(vec3 color)\n{\n\treturn dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 texel(sampler2D sampler, vec2 pos, vec2 resolution)\n{\n    return texture(sampler, pos / resolution).rgb;\n}\n\nfloat sobel(sampler2D sampler, vec2 pos, vec2 resolution)\n{\n    float gx = luminance\n        (\n            -1.0 * texel(sampler, pos + vec2(-1.0, -1.0), resolution) +\n            -2.0 * texel(sampler, pos + vec2(-1.0,  0.0), resolution) +\n            -1.0 * texel(sampler, pos + vec2(-1.0,  1.0), resolution) +\n             1.0 * texel(sampler, pos + vec2( 1.0, -1.0), resolution) +\n             2.0 * texel(sampler, pos + vec2( 1.0,  0.0), resolution) +\n             1.0 * texel(sampler, pos + vec2( 1.0,  1.0), resolution)\n        );\n    float gy = luminance\n        (\n            -1.0 * texel(sampler, pos + vec2(-1.0, -1.0), resolution) +\n            -2.0 * texel(sampler, pos + vec2( 0.0, -1.0), resolution) +\n            -1.0 * texel(sampler, pos + vec2( 1.0, -1.0), resolution) +\n             1.0 * texel(sampler, pos + vec2(-1.0,  1.0), resolution) +\n             2.0 * texel(sampler, pos + vec2( 0.0,  1.0), resolution) +\n             1.0 * texel(sampler, pos + vec2( 1.0,  1.0), resolution)\n        );\n    return sqrt(gx * gx + gy * gy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 resolution = iResolution.xy;\n    \n    vec2 eps = vec2(1.0, 0.0);\n    float dx = sobel(iChannel0, fragCoord + eps.xy, resolution) - sobel(iChannel0, fragCoord - eps.xy, resolution);\n    float dy = sobel(iChannel0, fragCoord + eps.yx, resolution) - sobel(iChannel0, fragCoord - eps.yx, resolution);\n\tvec3 norm = normalize(vec3(dx, dy, 1.0));\n        \n    float angle = iTime * 3.1415 * 0.5;\n    vec2 lightPos = vec2(cos(angle), sin(angle)) * 0.5 + 0.5;\n    vec3 lightDir = normalize(vec3(lightPos - fragCoord / resolution, 0.5));\n    \n    float diffuse = max(dot(lightDir, norm), 0.0);\n    vec3 albedo = texel(iChannel0, fragCoord, resolution) * 1.5;\n                          \n    #if defined EDGES\n    fragColor = vec4(vec3(sobel(iChannel0, fragCoord + eps.xy, resolution)), 1.0);\n    #elif defined NORMALS\n    fragColor = vec4(norm * 0.5 + 0.5, 1.0);\n    #else\n    fragColor = vec4(albedo * diffuse, 1.0);\n    #endif\n\t//fragColor = vec4(mix(albedo * 1.2, albedo * diffuse, smoothstep(0.001, 0.5, length(fragCoord / resolution - lightPos))), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}