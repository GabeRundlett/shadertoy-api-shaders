{
    "Shader": {
        "info": {
            "date": "1661829001",
            "description": "A simple 4-stroke combustion engine. Set MAX_STROKES in common to 1 to see the cycle.",
            "flags": 8,
            "hasliked": 0,
            "id": "7lyczV",
            "likes": 25,
            "name": "Simple Combustion Engine",
            "published": 3,
            "tags": [
                "simple",
                "engine",
                "combustion",
                "4stroke"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "// Utilities\nvec2 solveJoint(in vec2 a, in vec2 b, in float ra, in float rb, in float config) {\n    vec2 ba = b - a;\n    float d2 = dot(ba, ba), d = sqrt(d2);\n    float offs = (d2 + ra * ra - rb * rb) / (2.0 * ra * d);\n    return a + (ba * offs + vec2(-ba.y, ba.x) * sqrt(max(0.0, 1.0 - offs * offs)) * config) * ra / d;\n}\n\nvec3 heatPalette(in float h) {\n    return pow(vec3(0.98, 0.93, 0.1), vec3(h));\n}\n\n// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n     vec2 pa = p - a, ba = b - a;\n     return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(max(p.x, p.y), 0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdTrapezoid(in vec2 p, in float r1, in float r2, in float he) {\n    vec2 k1 = vec2(r2, he);\n    vec2 k2 = vec2(r2 - r1, 2.0 * he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x - min(p.x,p.y < 0.0 ? r1 : r2), abs(p.y) - he);\n    vec2 cb = p - k1 + k2 * clamp(dot(k1 - p, k2) / dot(k2, k2), 0.0, 1.0);\n    float s = cb.x < 0.0 && ca.y < 0.0 ? -1.0 : 1.0;\n    return s * sqrt(min(dot(ca, ca), dot(cb, cb)));\n}\n\n#define drawSDF(dist, col) color = mix(color, col.rgb, smoothstep(unit, 0.0, dist) * col.a)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Setup\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(0.3, 0.3, 0.5);\n\n    // Timing\n    float speed = (1.0 - exp(-20.0 * iTime / MAX_STROKES)) * MAX_STROKES;\n    float time = iTime * speed;\n    float stroke = floor(mod(time, 4.0));\n    float strokeTime = fract(time);\n\n    // Cylinder\n    vec2 cylUv = uv - vec2(0.0, 1.5);\n    float cylDist = sdBox(cylUv - vec2(0.0, 1.6), vec2(0.25, 0.01));\n    cylDist = min(cylDist, sdBox(vec2(abs(cylUv.x) - 1.0, cylUv.y - 1.6), vec2(0.25, 0.01)));\n    cylDist = min(cylDist, sdBox(vec2(abs(cylUv.x) - 1.25, cylUv.y), vec2(0.01, 1.6)));\n    cylDist = min(cylDist, sdBox(vec2(abs(abs(cylUv.x) - 0.5) - 0.25, cylUv.y - 2.1), vec2(0.01, 0.5)));\n\n    // Random pattern to show where the cutaway is\n    float inside = sdBox(cylUv + vec2(0.0, 0.02), vec2(1.23, 1.58));\n    float stripes = mod(floor(uv.x + uv.y), 2.0);\n    drawSDF(inside, vec4(vec3(0.15 * stripes), 1.0));\n\n    // Gas flow in the engine\n    if (mod(stroke, 2.0) == 0.0) strokeTime = 1.0 - strokeTime; // Reverse\n    float squeeze = strokeTime * 0.925;\n    float gas = sdBox(cylUv - vec2(0.0, 0.28 + squeeze), vec2(1.23, 1.28 - squeeze));\n    float gasDensity = stroke == 0.0 ? mix(0.0, 0.5, strokeTime) : stroke == 3.0 ? 0.5 : mix(0.5, 1.0, strokeTime);\n    drawSDF(max(gas, inside), vec4(0.6, 0.6, 1.0, gasDensity));\n    if (mod(stroke, 2.0) == 0.0) strokeTime = 1.0 - strokeTime; // Revert\n\n    // Gas intake\n    if (stroke == 0.0) {\n        float gas = length(uv - vec2(-0.5, 3.2)) - strokeTime * 3.6;\n        float dropoff = 0.5 * smoothstep(0.0, -0.5, gas);\n        drawSDF(max(gas, inside), vec4(0.6, 0.6, 1.0, dropoff));\n    }\n\n    // Explosion\n    if (stroke == 2.0) {\n        vec3 explosionColor = heatPalette(strokeTime * 50.0);\n        float explosionStrength = 1.0 - strokeTime;\n        drawSDF(max(length(uv - vec2(0.0, 2.9775)) - strokeTime * 2.75, inside), vec4(explosionColor, explosionStrength));\n    }\n\n    // Finally draw the cylinder\n    drawSDF(cylDist, vec4(1.0));\n\n    // Camshaft\n    drawSDF(length(uv + vec2(0.0, 2.0)) - 1.25, vec4(0.05, 0.05, 0.05, 1.0));\n    drawSDF(length(uv + vec2(0.0, 2.0)) - 0.15, vec4(0.2, 0.2, 0.2, 1.0));\n\n    // Piston\n    vec2 pistonPos = vec2(0.0, 2.0 - abs(mod(stroke, 2.0) - strokeTime) * 1.85);\n    vec2 joint = solveJoint(pistonPos, vec2(0.0, -2.0), 3.075, 0.925, 2.0 * mod(stroke, 2.0) - 1.0);\n    drawSDF(sdLine(uv, pistonPos, joint) - 0.1, vec4(0.25, 0.25, 0.25, 1.0));\n    drawSDF(sdBox(uv - pistonPos, vec2(1.23, 0.3)), vec4(0.4, 0.4, 0.4, 1.0));\n\n    // Intake valve\n    float inState = stroke < 1.0 ? 1.0 - abs(1.0 - 2.0 * strokeTime) : 0.0;\n    drawSDF(sdTrapezoid(uv - vec2(-0.5, 3.08 - 0.3 * inState), 0.3, 0.15, 0.075), vec4(0.0, 1.0, 0.0, 1.0));\n\n    // Exhaust valve\n    float outState = stroke > 2.0 ? 1.0 - abs(1.0 - 2.0 * strokeTime) : 0.0;\n    drawSDF(sdTrapezoid(uv - vec2(0.5, 3.08 - 0.3 * outState), 0.3, 0.15, 0.075), vec4(1.0, 0.0, 0.0, 1.0));\n\n    // Spark plug\n    float sparkState = stroke == 2.0 ? strokeTime * 100.0 : 1000.0;\n    drawSDF(sdBox(uv - vec2(0.0, 2.9775), vec2(0.03, 0.075)), vec4(0.5, 0.25, 0.0, 1.0));\n    color += heatPalette(sparkState) * smoothstep(0.1, 0.0, length(uv - vec2(0.0, 2.9025)) - 0.02);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time) {\n    float speed = (1.0 - exp(-20.0 * time / MAX_STROKES)) * MAX_STROKES;\n    float realTime = time * speed;\n\n    // Spark plug firing\n    float sound = Hash11(time * 1000.0) * exp(-5.0 * mod(realTime - 2.0, 4.0));\n\n    // Intake and exhaust\n    float strokeTime = fract(realTime);\n    float cycleTime = mod(realTime, 4.0);\n    if (cycleTime < 1.0) sound += 0.1 * Hash11(time * 1000.0) * 6.75 * (1.0 - strokeTime) * pow(strokeTime, 2.0);\n    if (cycleTime > 3.0) sound += 0.1 * Hash11(time * 1000.0) * 6.75 * strokeTime * pow(1.0 - strokeTime, 2.0);\n\n    return vec2(sound);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define MAX_STROKES 200.0 // 6000RPM\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}