{
    "Shader": {
        "info": {
            "date": "1537914348",
            "description": "base shader for testing texturing of spheres, suggestions for making it simpler are welcome.\nQuestion: is it possible to use \"Cube A\" to refer to itself for simulations like it is possible with \"Buffer A-D\"?",
            "flags": 0,
            "hasliked": 0,
            "id": "ltGyW3",
            "likes": 7,
            "name": "Question: Sphere Base",
            "published": 3,
            "tags": [
                "sphere"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 620
        },
        "renderpass": [
            {
                "code": "vec4 Q(vec3 v)\n{\n    float a = length(v) + 1e-3;\n    return vec4(v / a * sin(a * .5), cos(a * .5));\n}\n\nvec3 R(vec4 q, vec3 v)\n{\n    vec3 t = 2. * cross(q.xyz, v);\n    return v + q.w * t + cross(q.xyz, t);\n}\n\nvec3 view(vec3 v)\n{\n    v = R(Q(vec3(sin(iTime * 1.) * .5, 0, 0)), v);\n    v = R(Q(vec3(0, iTime * .1, 0)), v);\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / iResolution.y;\n\t\n    vec3 p = view(vec3(0, 0, -3));\n    vec3 v = view(normalize(vec3(uv, 1)));\n\n    for (int i=0 ; i<60 ; i++)\n        p += v * length(p) - v;\n    p = normalize(p);\n    \n    vec3 col = vec3(0);\n    p = cos(p * 3.14e1 + iTime);\n    col = vec3(p.x*p.y*p.z);\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}