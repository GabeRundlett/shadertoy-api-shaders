{
    "Shader": {
        "info": {
            "date": "1611101760",
            "description": "A raymarcher template with a camera, lambertian diffuse, GGX specular, and gamma correction.\n\nThis can be used to quickly create a new raymarching shader :)",
            "flags": 0,
            "hasliked": 0,
            "id": "3tyyWm",
            "likes": 4,
            "name": "Raymarch template GGX",
            "published": 3,
            "tags": [
                "raymarch",
                "camera",
                "fog",
                "ggx",
                "lambertian"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k) {\n    float h = max(k-abs(a-b), 0.0)/k;\n    return min(a, b) - h*h*h*k*(1.0/6.0);\n}\n\nfloat sdSphere(in vec3 p, float r) {\n    return length(p) - r;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat map(in vec3 p) {\n    \n    // Add your SDF's here: also remove line 87.\n\n    p = mod(p, 2.0) - 1.0; // Domain repetition    \n    \n    float sphere = sdSphere(p, 0.4);\n    float ears = sdSphere(abs(p) - vec3(.25, .25, 0), 0.25);\n    return smin(sphere, ears, 0.08);\n}\n\n#define MIN_MARCH_DIST 0.001\n#define MAX_MARCH_DIST 60.\n#define MAX_MARCH_STEPS 100.\nfloat march(in vec3 ro, in vec3 rd) {\n    float t = 0., \n          i = 0.;\n    for(i=0.; i < MAX_MARCH_STEPS; i++) {\n        vec3 p = ro + t*rd;\n        float d = map(p);\n        if(d < MIN_MARCH_DIST)\n            break;\n        t += d;\n        if(t > MAX_MARCH_DIST)\n            break;\n    }\n    if(i >= MAX_MARCH_STEPS) {\n        t = MAX_MARCH_DIST;\n    }\n    return t;\n}\n\nvec3 normal(in vec3 p) {\n    float eps = MIN_MARCH_DIST;\n    vec2 h = vec2(eps, 0);\n    return normalize(vec3(map(p+h.xyy) - map(p-h.xyy),\n                          map(p+h.yxy) - map(p-h.yxy),\n                          map(p+h.yyx) - map(p-h.yyx)));\n}\n\nfloat G1V(float dotNV, float k) {\n    return 1.0 / (dotNV * (1.0 - k) + k);\n}\n\n// http://filmicworlds.com/blog/optimizing-ggx-shaders-with-dotlh/\nfloat brdf_ggx(vec3 N, vec3 V, vec3 L, float roughness, float F0) {\n    float alpha = roughness * roughness;\n    vec3 H = normalize(V+L);\n    float dotNL = clamp(dot(N,L), 0., 1.);\n    float dotNV = clamp(dot(N,V), 0., 1.);\n    float dotNH = clamp(dot(N,H), 0., 1.);\n    float dotLH = clamp(dot(L,H), 0., 1.);\n    float alphaSqr = alpha*alpha;\n    float pi = 3.14159;\n    float denom = dotNH * dotNH * (alphaSqr - 1.0) + 1.0;\n    float D = alphaSqr / (pi * denom * denom);\n    float dotLH5 = pow(1.0 - dotLH, 5.0);\n    float F = F0 + (1.0 - F0) * dotLH5;\n    float k = alpha / 2.0;\n    float vis = G1V(dotNL, k) * G1V(dotNV, k);\n    return dotNL * D * F * vis;\n}\n\nvec3 shade(vec3 N, vec3 L, vec3 V, vec3 diffuse, vec3 specular) {\n    return diffuse * clamp(dot(L, N), 0., 1.)       // Lambertian Diffuse\n         + specular * brdf_ggx(N, V, L, 0.55, 0.1); // GGX Specular\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    // Camera\n    \n    \n    \n    \n    vec3 ro = vec3(0,0,-1.);\n    vec3 ta = vec3(0,0,0);\n    vec3 ww = normalize(ta-ro);\n    vec3 uu = normalize(cross(ww, vec3(0,1,0)));\n    vec3 vv = normalize(cross(uu,ww));\n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.0*ww);\n    ro.z += iTime;\n    \n    // March\n    float t = march(ro, rd);\n    \n    // Shade\n    vec3 col = vec3(0);\n    if(t < MAX_MARCH_DIST) {\n        vec3 P = ro + t*rd;                 // Intersection point P.\n        vec3 N = normal(P);                 // Normal to the surface.\n        vec3 L = normalize(vec3(0, 0, -1)); // Vector from P to light source.\n        vec3 V = normalize(ro - P);         // View vector, from P to camera.\n        vec3 ambient = vec3(0.00);\n        vec3 diffuse = vec3(64./255., 64./255., 4.0);\n        vec3 specular = vec3(.8, .8, 1.0);\n        col = shade(N, normalize(vec3(1, 0, -1)), V, diffuse, specular)  // Light 1\n            + shade(N, normalize(vec3(-5, 2, 1)), V, diffuse, specular)  // Light 2\n            + ambient;                                                   // Ambient light\n        col *= clamp(exp(-0.20*t + 0.4), 0., 1.);                        // Fog\n    }\n    \n    fragColor = vec4(pow(col, 1.0/vec3(2.2)),1.0); // Gamma correction\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}