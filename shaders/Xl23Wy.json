{
    "Shader": {
        "info": {
            "date": "1432063291",
            "description": "Directional Derivatives for lighting. Much faster than gradients, see [url]https://www.shadertoy.com/view/XslGRr[/url] or [url]https://www.shadertoy.com/view/Xd23zh[/url]. More info: [url]http://iquilezles.org/articles/derivative/derivative.htm[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Xl23Wy",
            "likes": 16,
            "name": "Directional Derivative",
            "published": 3,
            "tags": [
                "3d",
                "gradient",
                "derivative"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2728
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Lighting without normals: using directional derivatives allows\n// us to compute lighting from a light source without computing \n// SDF gradients. Naturally, this is mostly useful if the number\n// of lights is less than two or three without specular.\n//\n// In the left haf of the screen, directional derivatives. On\n// the right, the traditional gradient-based lighting. Move \n// the mouse to compare. used.\n//\n// Some shader using this technique:\n//\n// https://www.shadertoy.com/view/XslGRr\n// https://www.shadertoy.com/view/Xd23zh\n// https://www.shadertoy.com/view/MsfGzM\n//\n// More info\n//\n// https://iquilezles.org/articles/derivative\n\n\nfloat map( vec3 p )\n{\n\tfloat d1 = p.y - 0.0;\n    float d2 = length(p-vec3(0.0,0.0,0.0)) - 1.0;\n    float d3 = length(p.xz-vec2(-3.0,0.0)) - 0.5;\n    float d4 = length(p-vec3(1.0,1.0,1.0)) - 0.3;\n    return min( min(d1,d2), min(d3,d4) );\n}\n\nfloat intersect( in vec3 ro, in vec3 rd, const float maxdist )\n{\n    float res = -1.0;\n    float t = 0.1;\n    for( int i=0; i<128; i++ )\n    {\n\t    float h = map(ro + t*rd);\n        res = t;\n        if( h<(0.0001*t) || t>maxdist ) break;\n        t += h;\n    }\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos, in float eps )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in float doAB )\n{\n    vec3 col = vec3(0.0);\n    \n    const float maxdist = 32.0;\n    float t = intersect( ro, rd, maxdist );\n    if( t < maxdist )\n    {\n        float eps = 0.001;\n        vec3  pos = ro + t*rd;\n\n        vec3 lig = normalize( vec3(2.0,1.0,0.2) );\n        float dif = 0.0;\n\n        // directional derivative\n        if( doAB>0.0 )\n        {\n            dif = (map(pos+lig*eps) - map(pos)) / eps;\n        }\n        // gradient based lighting\n\t\telse\n        {\n            vec3 nor = calcNormal( pos, eps );\n            dif = dot(nor,lig);\n        }\n        dif = clamp( dif, 0.0, 1.0 );\n        \n        col = vec3(1.0,0.9,0.8)*dif + vec3(0.1,0.15,0.2);\n        \n        col *= exp( -0.1*t );\n    }\n    \n    return pow( col, vec3(0.45) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n    \n\tvec3  ro = vec3(0.0,1.0,7.0);\n\tvec3  ta = vec3(0.0,1.0,0.0);\n    vec3  ww = normalize( ta - ro);\n    vec3  uu = normalize( cross( vec3(0.0,1.0,0.0), ww ) );\n    vec3  vv = normalize( cross(ww,uu) );\n    vec3  rd = normalize( p.x*uu + p.y*vv + 3.0*ww );\n\n    float im = iMouse.x; if( iMouse.z<=0.001 ) im = iResolution.x/2.0;\n    float dm = im - fragCoord.x;\n\n    vec3 col = render( ro, rd, dm );\n    \n\tcol = mix( vec3(0.0), col, smoothstep( 1.0, 2.0, abs(dm) ) );\n    \n\tfragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}