{
    "Shader": {
        "info": {
            "date": "1642291794",
            "description": "sandpiles attempt",
            "flags": 32,
            "hasliked": 0,
            "id": "sdXyRB",
            "likes": 5,
            "name": "genuary2022 15: sandpiles",
            "published": 3,
            "tags": [
                "genuary",
                "genuary2022"
            ],
            "usePreview": 0,
            "username": "ml",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "//const vec3 palette [5] = vec3[5](vec3(0.995, 0.485, 0.415), vec3(0.945, 0.235, 0.415), vec3(0.545, 0.365, 0.345), vec3(0.655, 0.935, 0.815), vec3(0.995, 0.965, 0.965));\n\n//const vec3 palette [5] = vec3[5](vec3(0.185, 0.075, 0.065), vec3(0.415, 0.145, 0.095), vec3(0.895, 0.835, 0.765), vec3(0.155, 0.415, 0.495), vec3(0.775, 0.775, 0.035));\n//const vec3 palette[5] = vec3[5](vec3(0.185, 0.075, 0.065), vec3(0.415, 0.145, 0.095), vec3(0.665, 0.545, 0.465), vec3(0.895, 0.835, 0.765), vec3(0.155, 0.415, 0.495));\n\n//const vec3 palette[4] = vec3[4](  vec3(0.995, 0.965, 0.875), vec3(0.985, 0.595, 0.535), vec3(0.925, 0.425, 0.355), vec3(0.565, 0.585, 0.255));\n\nconst vec3 palette[4] = vec3[4] (vec3(0.995, 0.815, 0.035), vec3(0.805, 0.365, 0.465), vec3(0.865, 0.245, -0.005), vec3(0.445, 0.005, -0.005));\n\n//const vec3 palette[2] = vec3[2](vec3(0.), vec3(1.));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragCoord = floor(floor(fragCoord)/8.)+fract(fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n        \n\n    float v = N1(0, 0);//(texture(iChannel1, uv).r)/3.;\n\n\n    //if(v <= 3.) v = 0.;\n\n    vec3 rgb = palette[int(mod(v+3., float(palette.length())))];\n        \n    // Output to screen\n    fragColor = vec4(rgb, 1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float neighboursTotal =       N1(-1, 0) \n                      + N1( 0,-1)            + N1( 0, 1)\n                                  N1( 1, 0) ;\n    \n    bool topple = N1(0, 0) >= 4.;\n    \n    \n    fragColor = vec4(float(topple), 0., 0., 0.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SEED 27.\n\n#define T0(i,j) texture(iChannel0, (uv + vec2(i,j)*vec2(1./iResolution.xy) )).r \n#define N0(i,j) +floor( T0(i,j) + 0.5)\n\n#define T1(i,j) texture(iChannel1, (uv + vec2(i,j)*vec2(1./iResolution.xy) )).r \n#define N1(i,j) +floor( T1(i,j) + 0.5)\n\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n    //p3.x = abs(p3.x);\n    //p3.y = abs(p3.y);\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//#define randb() hash13(vec3(fragCoord.xy, iTime+SEED+234.))\n//#define rand() hash13(vec3(floor(vec2((fragCoord.x-400.)/(15.)+randb()*0.1, (fragCoord.y-225.)/(15.)+randb()*0.1)), SEED)) \n\n\nfloat rand(vec2 fragCoord){\n    vec2 coord = vec2(\n        fragCoord.x/15.,\n        fragCoord.y/15.\n    );\n    \n    coord = floor(coord);\n    \n    float randVal = hash13(vec3(coord, SEED));\n    \n    float r = hash13(vec3(coord, SEED*10.+123.));\n    \n    if(r < 0.5 && mod(floor(fragCoord.x), 2.) == 0.){\n        randVal = mod(randVal+0.5, 1.);\n    }else if(r >= 0.5 && mod(floor(fragCoord.y), 2.) == 0.){\n        randVal = mod(randVal+0.5, 1.);\n    }\n    \n    return randVal; \n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if(iFrame == 0){\n        //float val = floor(rand()*2.)*4.;//2.;//floor(rand()*5.);\n        float val = rand(fragCoord)*2.0 + 1.6;//floor(rand()*2.)*1.+2.;\n        \n        \n        //if(int(fragCoord.x) == 80 && int(fragCoord.y) == 80) val = 3000.;\n        \n        fragColor = vec4(val, 0., 0., 0.);\n\n        return;\n    }\n    \n    \n    float sandGainFromNeighbours =  N0(-1, 0)\n                      + N0( 0,-1)              + N0( 0, 1)\n                                    N0( 1, 0);\n    \n    float currentValue = N1(0, 0);\n    \n    \n    float newValue = sandGainFromNeighbours + currentValue;\n\n     \n    if(N0(0, 0) > 0.) newValue -= 4.;\n    //if(int(fragCoord.x) == 400 && int(fragCoord.y) == 225) newValue = 0.;//10000.;\n    \n    fragColor = vec4(newValue, 0., 0., 0.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}