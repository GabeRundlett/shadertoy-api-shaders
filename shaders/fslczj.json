{
    "Shader": {
        "info": {
            "date": "1642377897",
            "description": "part of the MACHINEPAINTING series - // updated with the help of @FabriceNeyret2",
            "flags": 0,
            "hasliked": 0,
            "id": "fslczj",
            "likes": 6,
            "name": "[ the floating ring creature ]",
            "published": 3,
            "tags": [
                "ring",
                "loop",
                "oscillation",
                "slow",
                "float",
                "creature"
            ],
            "usePreview": 0,
            "username": "SimonOakey",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// random function\n#define rand(n) fract(cos(n*89.42)*343.42)\n\n//draw a even nicer ring\n#define nice_ring(U,P,r,w)   w / abs(length(P - U) - r)\n\n// generic rotation by angle\n#define rot(a) mat2( cos(a), -sin(a), sin(a), cos(a) )\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 R = iResolution.xy;\n   \tvec2 uv = ( 2.* fragCoord.xy - R.xy  ) / R.y;\n \n\tfloat t = iTime*.3 + 123. , s = 0., r = 0.1, w = .22;\n\t\n\t// make the creature rotate at all\n\tuv *= rot(sin(t*1.3)*.3);\n    \n    // make it move over the screen\n     uv.x += sin(t*.6)*.3;\n     uv.y += sin(t*.3)*.2;\n\t\n\t// sinus mirror\n\t uv.x *= sin((uv.x)*1.);\n\tuv.x *=1.25; // against the x stretching a bit\n\t\n\t// rotate within axis\n\tuv *= rot(t*.2);\n\t\t\n\tfloat deform_amplitude = sin(t*.9)*.8+.2;\n\tfloat deform_freq = sin(t*.6)*.8+.2;\n    \n    \n    for(float i=0.;i<16.;i++){\n\t\t\n\t\tvec2 posi = vec2(sin(t*i*.156 + i*12.2423)*.3 , sin(i*12.45313 + t*.132*i)*.3 );\n\t\t\n\t\t uv.x += sin(uv.y*6.*deform_freq + t*.6)*.01*deform_amplitude;\n\t\t uv.y += sin(uv.x*6.*deform_freq + t*.3)*.01*deform_amplitude;\n\t\t\n\t\ts += nice_ring( uv, posi, r,w*.01 );\n\t\t\n\t\t// shrink stuff\n\t\t r +=.025 ;\n\t\t w +=.05 - i*.002;\n\t\t\n\t}\n\t\n\ts = smoothstep(1.,.3,s)*.8-.2;\n    \n \t// lowkey dithering - very light for nice fullscreen grain\n\ts -= rand(uv.x)*.02; \n\t\n\t// tweaky vignette whatever  \n\tfloat vig = uv.x*uv.y * 10.0; \n\ts += vig*.01;\n       \t\t\n\tfragColor = vec4( vec3(s), 1.0 );\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}