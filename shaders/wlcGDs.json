{
    "Shader": {
        "info": {
            "date": "1577946112",
            "description": "これいいな",
            "flags": 0,
            "hasliked": 0,
            "id": "wlcGDs",
            "likes": 3,
            "name": "グシグシ",
            "published": 3,
            "tags": [
                "oscillation"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "// Cubic interpolation\nfloat cubemix(float a, float b, float t) {\n    float c = t*t*(3.-2.*t);\n    return mix(a, b, c);\n}\n\nfloat rand( vec2 p ) {\n\tvec2 f = fract(p);\n\tp = floor(p);\n\tfloat v = p.x+p.y*1000.0;\n\tvec4 r = vec4(v, v+1.0, v+1000.0, v+1001.0);\n\tr = fract(10000.0*sin(r*.001));\n\tf = f*f*(3.0-2.0*f);\n\treturn 2.0*(mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y))-1.0;\n}\n\nfloat valuenoise(vec2 uv) {\n    vec2 iuv = floor(uv);\n    vec2 offset = vec2(0.,1.);\n    float v00 = rand(iuv);\n    float v01 = rand(iuv+offset.xy);\n    float v10 = rand(iuv+offset.yx);\n    float v11 = rand(iuv+offset.yy);\n    vec2 disp = fract(uv);\n    float v0 = cubemix(v00, v01, disp.y);\n    float v1 = cubemix(v10, v11, disp.y);\n    return cubemix(v0, v1, disp.x)*.5+.5;\n}\n\nfloat fractalnoise(vec2 uv, float mag) {\n    float d = valuenoise(uv);\n    int i;\n    float fac = 1.;\n    vec2 disp = vec2(0., 1.);\n    for (i=0; i<3; i++) {\n        uv -= mag * iTime * disp * fac;\n        fac *= 0.5;\n        d += valuenoise(uv/fac)*fac;\n    }\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x*20.;\n\tuv.y -= iTime*10.;\n    float val = fractalnoise(uv, 5.);\n    vec3 col = mix(vec3(1., 0.2, 0.), vec3(1., 1., 0.5), smoothstep(0.5, 1., val));\n    float phase1 = iTime * 20.5;\n    float offset = smoothstep(-0.5, 0.5, sin(iTime*20.))*40.;\n    float offset2 = sin(iTime*15.25) * 40.;\n\tfloat left = iResolution.x*(0.5 + 0.1*(sin(phase1) - 1.)) + offset + offset2;\n    float right = iResolution.x*(0.5 - 0.1*(cos(phase1) - 1.)) + offset + offset2;\n    float bottom = iResolution.y*0.2 + offset * 0.5;\n    float top = iResolution.y*0.55 + offset*0.5;\n    if (fragCoord.x < left || fragCoord.x > right || (fragCoord.y < top && fragCoord.y > bottom)) {\n    \tcol = vec3(0.);   \n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}