{
    "Shader": {
        "info": {
            "date": "1657027908",
            "description": "infinity ladder",
            "flags": 0,
            "hasliked": 0,
            "id": "NddfRl",
            "likes": 14,
            "name": "infinity ladder",
            "published": 3,
            "tags": [
                "infinityladder"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 110.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n//infinity ladder\n//referencia\n///https://iquilezles.org/\n\n//operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\nfloat Intersect(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Union(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Difference(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n    \nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdStairs( in vec2 p, in vec2 wh, in float n )\n{\n    // base\n    vec2 ba = wh*n;\n    float d = min(dot2(p-vec2(clamp(p.x,0.0,ba.x),0.0)), \n                  dot2(p-vec2(ba.x,clamp(p.y,0.0,ba.y))) );\n    float s = sign(max(-p.y,p.x-ba.x) );\n\n    // steps repetition\n#if 1\n    float dia = length(wh);\n    p = mat2(wh.x,-wh.y, wh.y,wh.x)*p/dia;\n    float lid = clamp(round(p.x/dia),0.0,n-1.0);\n    p.x = p.x - lid*dia;\n    p = mat2(wh.x, wh.y,-wh.y,wh.x)*p/dia;\n#else\n    float dia2 = dot(wh,wh);\n    p = mat2(wh.x,-wh.y,wh.y,wh.x)*p;\n    float lid = clamp(round(p.x/dia2),0.0,n-1.0);\n    p.x = p.x - lid*dia2;\n    p = mat2(wh.x,wh.y,-wh.y,wh.x)*p/dia2;\n#endif    \n\n    // single step\n    float hh = wh.y/2.0;\n    p.y -= hh;\n    \n    if( p.y>hh*sign(p.x) ) s=1.0;\n    p = (lid<0.5 || p.x>0.0) ? p : -p;\n\n    d = min( d, dot2(p-vec2(0.0,clamp(p.y,-hh,hh))) );\n    d = min( d, dot2(p-vec2(clamp(p.x,0.0,wh.x),hh)) );\n    \n    return sqrt(d)*s;\n}\n\nfloat opScaleEscalera( in vec3 p )\n{   float s=0.125;\n    return sdStairs(p.xy/s, vec2(10.0,10.0), 10.0 )*s;\n}\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  \n    p= rotate_x(p, radians(90.0));\n    p.y=p.y+15.0;  //si\n    \n    vec3 p0=p;\n\tfloat planeDist1 = p.y-1.0;  //piso inf\n    \n    p.y= opRep1D( p.y, 20.0);\n    //cuadro\n    float d01= sdBox(p-vec3(1.0,30.0,-9.0), vec3(14.5,40.0,14.0) );\n    float d02= sdBox(p-vec3(1.0,30.0,-9.0), vec3(13.5,41.0,13.0) );\n    float d03= sdBox(p-vec3(0.0,-12.0,-8.0), vec3(16.0,1.0,16.0) );\n    d01= Difference(d01, d02);\n    res =opU2(res, vec2(d01,1.0));\n    //res =opU2(res, vec2(d03,8.0));\n    \n    float aEs=3.0;\n    float mvx=1.0;\n    float ctx=2.0; //100.0;\n    \n    vec3 p1=vec3(p0.x,p0.y,p0.z);\n    //primer escalon\n    p1.y= opRep1D( p1.y, 54.0);\n\tfloat d1a=opScaleEscalera( p1-vec3(-6.0,5.0,0.0));\n    float d2a= sdBox(p1-vec3(0.0,15.0,0.0), vec3(10.0,10.0,aEs) );\n    float d3a= sdBox(p1-vec3(8.5+mvx,18.0,0.0), vec3(aEs,0.5,aEs) );\n    d1a= Intersect(d1a, d2a);\n    d1a= Union(d1a, d3a);\n    res =opU2(res, vec2(d1a,ctx));\n    \n    \n    //2do escalon\n    p.xyz=vec3(-p0.z,p0.y,p0.x);\n    p.y-=13.5;\n    p.x-=8.0+mvx;\n    p.z-=8.5+mvx;\n    p.y= opRep1D( p.y, 54.0);\n    \n    float d1b=opScaleEscalera( p-vec3(-6.0,5.0,0.0));\n    float d2b= sdBox(p-vec3(0.0,15.0,0.0), vec3(10.0,10.0,aEs) );\n    float d3b= sdBox(p-vec3(8.5+mvx,18.0,0.0), vec3(aEs,0.5,aEs) );\n    d1b= Intersect(d1b, d2b);\n    d1b= Union(d1b, d3b);\n    res =opU2(res, vec2(d1b,ctx));\n    \n    \n    //tercero escalon\n    //p.xyz=vec3(-p0.z,p0.y,p0.x);\n    p.xyz=vec3(-p0.x,p0.y,p0.z);\n    p.y-=27.0;\n    p.x+=0.5;\n    p.z+=17.0+mvx+mvx/2.0;\n    p.y= opRep1D( p.y, 54.0);\n    float d1c=opScaleEscalera( p-vec3(-6.0,5.0,0.0));\n    float d2c= sdBox(p-vec3(0.0,15.0,0.0), vec3(10.0,10.0,aEs) );\n    float d3c= sdBox(p-vec3(8.5+mvx,18.0,0.0), vec3(aEs,0.5,aEs) );\n    d1c= Intersect(d1c, d2c);\n    d1c= Union(d1c, d3c);\n    res =opU2(res, vec2(d1c,ctx));\n    \n    \n    //4to ultimo\n    p.xyz=vec3(p0.z,p0.y,p0.x);\n    p.y-=40.5;\n    p.x+=9.0+mvx/2.0;\n    p.z+=8.0+mvx;\n    p.y= opRep1D( p.y, 54.0);\n    float d1d=opScaleEscalera( p-vec3(-6.0,5.0,0.0));\n    float d2d= sdBox(p-vec3(0.0,15.0,0.0), vec3(10.0,10.0,aEs) );\n    float d3d= sdBox(p-vec3(8.5+mvx,18.0,0.0), vec3(aEs,0.5,aEs) );\n    d1d= Intersect(d1d, d2d);\n    d1d= Union(d1d, d3d);\n    res =opU2(res, vec2(d1d,ctx));\n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 pallete(float t) {\n    vec3 a = vec3(0.2);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b * cos(6.28318 * (c*t + d));\n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n\n    float shadow = getSoftShadow(worldPos, L);// shadows\n    //float shadow =0.5;// shadows\n\n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;\n    return colOut;\n}\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{ if (i==100 ){ vec3 col=tex3D(iChannel0, p/32., nor); return col*2.0;} }\n\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{   if(id_color==0)  { return vec3(0.,0.,0.);}\n    if(id_color==1)  { return  vec3(1.,1.,1.);}\n    if(id_color==2)  { return  vec3(1.,0.5,0.2);}\n    if(id_color==8)  { return  vec3(0.7529,0.7529,0.7529);}\n    if(id_color>=100){ return  getColorTextura( p, nor,id_color); }\n    \n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       { vec3  p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        //col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n        col= ACESFilm(col) ;\n    }\n    \n    return col;\n}\n\n\n#define pi 3.14159\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t;\n    t=mod(iTime*5.0,500.0);\n \tlight_pos1= vec3(0.0,  50.0, -20.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(0.0, -50.0, -30.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n    vec3  R = iResolution;\n    \n   vec3 ro=vec3(0.0,-7.0,-70.0+t);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   \n   float rx = (iMouse.z >= 0.5 ? iMouse.x/iResolution.x*2.0*pi-pi\n                : 0.25*sin(0.2*iTime));\n    float ry = (iMouse.z >= 0.5 ? iMouse.y/iResolution.y*pi-pi/2.0\n                : sin(0.3*iTime)*smoothstep(-1.0, 1.0, sin(0.6*iTime)));\n                \n    rd.yz *= rot(ry);\n    rd.xz *= rot(rx);\n    rd.xy *= rot(pi/2.0);\n    \n   \n   light_pos1+=ro;\n   light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\n#define PI 3.14159265\n\n///Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}