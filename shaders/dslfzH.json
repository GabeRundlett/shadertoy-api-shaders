{
    "Shader": {
        "info": {
            "date": "1688478495",
            "description": "This shader shows how the usual union SDF operator implemented with min() produces the incorrect SDF in the interior of the shapes or exterior (if doing exterior modeling), but never produces correct distances everywhere.",
            "flags": 0,
            "hasliked": 0,
            "id": "dslfzH",
            "likes": 4,
            "name": "opOnion with bound SDF artifacts",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "stroke",
                "distance",
                "min",
                "union",
                "onion"
            ],
            "usePreview": 0,
            "username": "Frizi",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// This shader shows how the usual union SDF operator implemented\n// with min() produces the incorrect SDF in the interior of the shapes.\n// If the modeling is reversed and the exterior of the negative\n// space of the shape is modeled, then the exterior distance is wrong.\n//\n// While this is not an issue in most cases in practice, it can be\n// a problem in shaders that need to raymarch or do some other\n// distance based volumetric operations in the interior of the\n// shapes.\n//\n// This shader implements both correct interior and exterior distances\n// by modeling the boundary of the shape instead. Alternativelly, the\n// appropriate interior or exterior correct SDF could be chosen as\n// needed, but then there is double modeling work.\n//\n// More info here:\n// https://iquilezles.org/articles/interiordistance\n\n// This fork additionally contains:\n// - comparison of all three shapes side to side.\n// - visualization of \"onion\" (stroke) operator in combination, to show how it behaves with imprecise SDFs.\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat msign( in float x ) { return (x>0.0)?1.0:-1.0; }\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdCircle( in vec2 p, in vec2 c, in float r )\n{\n    return length(p-c) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 p, in vec2 c, in vec2 b ) \n{\n    vec2 q = abs(p-c) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nvec2 sdSqLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( dot2(pa-ba*h), ba.x*pa.y-ba.y*pa.x );\n}\n\nfloat sdCrescent(vec2 p, float r0, float r1, float d, float sign0, float sign1)\n{\n    float a = (r0*r0 - r1*r1 + d*d) / (2.0 * d);\n    \n    if( a < r0)\n    {\n        p.y = abs(p.y);\n        float b = sqrt(r0*r0-a*a);\n        float k = p.y*a - p.x*b;\n        float h = min(d*sign0*(d*(p.y-b)-k ),\n                      d*sign1*k);\n        if (h>0.0)\n        {\n            return length(p-vec2(a,b));\n        }\n    }\n    \n    return max(sign0*(length(p          )-r0),\n               sign1*(length(p-vec2(d,0))-r1));\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nvec2 sdSqArc( in vec2 p, in vec2 a, in vec2 b, in float h, float d2min )\n{\n    vec2  ba  = b-a;\n    float l   = length(ba);\n    float ra2 = h*h + l*l*0.25;\n\n    // recenter\n    p -= (a+b)/2.0 + vec2(-ba.y,ba.x)*h/l;\n    \n    float m = ba.y*p.x-ba.x*p.y;\n    float n = dot(p,p);\n    \n    if( abs(h)*abs(ba.x*p.x+ba.y*p.y) < msign(h)*l*0.5*m )\n    {\n        d2min = min( d2min, n + ra2 - 2.0*sqrt(n*ra2) );\n    }\n\n    return vec2(d2min, -max(m,ra2-n) );\n}\n\n\n//------------------------------------------------------------\n\n\n\n// SDF of a shape made of a set line and arc segments\nfloat sdShape( in vec2 p, int kType[7], float kPath[17] )\n{\n    vec2 vb = vec2(kPath[0],kPath[1]);\n    \n    float d = dot2(p-vb);\n    int off = 0;\n    float s = 1.0;\n    for( int i=0; i<kType.length(); i++ )\n    {\n        vec2 va = vb;\n        vec2 ds;\n        \n        if( kType[i]==0) // line (x,y)\n        {\n            vb = vec2(kPath[off+2],kPath[off+3]);\n            ds = sdSqLine( p, va, vb );\n            off += 2;\n        }\n        else if( kType[i]==1) // arc (x,y,r)\n        {\n            vb = vec2(kPath[off+3],kPath[off+4]);\n            ds = sdSqArc(p, va, vb, kPath[off+2], d );\n        \toff += 3;\n\n        }\n        \n        // in/out test\n        bvec3 cond = bvec3( p.y>=va.y, p.y<vb.y, ds.y>0.0 );\n        if( all(cond) || all(not(cond)) ) s*=-1.0;  \n\n        d = min( d, ds.x );\n    }\n\treturn s*sqrt(d);\n}\n              \n// correct outside, incorrect inside\nfloat sdA( in vec2 p )\n{\n    float d = sdCircle( p, vec2(-0.4, 0.3), 0.5);\n    d = min(d,sdBox( p, vec2( 0.4,-0.4), vec2(0.4,0.4) ));\n    d = min(d,sdBox( p, vec2( 0.0, 0.0), vec2(0.4,0.8) ));\n    return d;\n}\n\n// correct inside, incorrect outside\nfloat sdB( in vec2 p )\n{\n   float d =     sdBox( p, vec2( 0.0, 2.0), vec2(5.0,1.2) );\n       d = min(d,sdBox( p, vec2( 1.2, 1.0), vec2(0.8,1.0) ));\n       d = min(d,sdBox( p, vec2( 1.4,-0.3), vec2(0.6,5.0) ));\n       d = min(d,sdBox( p, vec2( 0.0,-2.0), vec2(2.0,1.2) ));\n       d = min(d,sdBox( p, vec2(-1.2,-0.8), vec2(0.8,0.6) ));\n       d = min(d,sdBox( p, vec2(-1.5, 0.3), vec2(0.6,0.7) ));\n       d = min(d,sdCrescent( p-vec2(-0.4-1.0, 0.3), 1.1, 0.5, 1.0, 1.0, -1.0 ));\n    return -d;\n}\n\n// correct both in side and outside\nfloat sdC( in vec2 p )\n{\n\tint kType[] = int[](0,0,0,0,0,0,1);\n\tfloat kPath[] = float[](-0.4, 0.8,\n                             0.4, 0.8,\n                             0.4,-0.0,\n                             0.8,-0.0,\n                             0.8,-0.8,\n                            -0.4,-0.8,\n                            -0.4,-0.2, 0.0,\n                            -0.4, 0.8 );\n    return sdShape(p,kType,kPath );\n}\n\nfloat opOnion( in float d, in float r )\n{\n  return abs(d) - r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // split screen horizontally into 3 parts.\n    int numSplitScreens = 3;\n    vec2 splitRes = vec2(iResolution.x / float(numSplitScreens), iResolution.y);\n    int splitScreenIdx = int(floor(fragCoord.x / splitRes.x));\n    vec2 splitCoord = vec2(fragCoord.x - float(splitScreenIdx) * splitRes.x, fragCoord.y);\n    vec2 splitMouseCoord = vec2(iMouse.x - float(splitScreenIdx) * splitRes.x, iMouse.y);\n    fragColor = vec4(splitCoord/splitRes.x, 0.0, 1.0);\n    \n    // normalized pixel coordinates within given split screen\n    vec2 p = (splitCoord*2.0-splitRes.xy)/min(splitRes.y, splitRes.x);\n    vec2 m = (splitMouseCoord*2.0-splitRes.xy)/min(splitRes.y, splitRes.x);\n\n    p *= 1.3; // zoom out\n    m *= 1.3;\n    \n    // distance computations:\n    // render each distance at different part of the screen.\n    float d;\n    switch (splitScreenIdx) {\n        case 0: d = sdA(p); break; // interior modeling (exact only inside)\n        case 1: d = sdC(p); break; // boundary modeling (exact everywhere)\n        case 2: d = sdB(p); break; // exterior modeling (exact only outside)\n    }\n\n    float onionMix = smoothstep(0.0, 1.0, clamp(0.5 + sin(iTime * 0.5 - 0.4) * 3.0, 0.0, 1.0));\n    float onionMixSdf = float(onionMix > 0.0);\n    \n    float strokeWidth = 0.15 + 0.05 * sin(iTime);\n    strokeWidth *= onionMix;\n    d = mix(d, opOnion(d, strokeWidth), onionMixSdf);\n    \n    \n    // coloring\n    vec3 col = (d<0.0) ? vec3(0.6,0.2,1.0) : vec3(0.9,0.1,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n\tcol *= 1.0 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    \n    int mouseScreenIdx = int(floor(iMouse.x / splitRes.x));\n    if( iMouse.z>0.001 && mouseScreenIdx == splitScreenIdx)\n    {\n        switch (splitScreenIdx) {\n            case 0: d = sdA(m); break;\n            case 1: d = sdC(m); break;\n            case 2: d = sdB(m); break;\n        }\n        d = mix(d, opOnion(d, strokeWidth), onionMixSdf);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n    float divLine = pow(abs(fract(fragCoord.x / splitRes.x) * 2.0 - 1.0), 300.0);\n    divLine *= 1.0 - clamp(abs(fragCoord.x - iResolution.x * 0.5) - iResolution.x * 0.5 + 10.0, 0.0, 1.0);\n    \n    col = mix(col, vec3(1.0,1.0,1.0), divLine);\n\n    // output\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}