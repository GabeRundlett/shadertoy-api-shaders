{
    "Shader": {
        "info": {
            "date": "1506008788",
            "description": "mouse twiddles some values of: cosine gradients are best gradients:\nhttps://iquilezles.org/articles/palettes/palettes.htm\nlacks a good \"what you see is what you get\" editor with alpha composition\nhttps://www.shadertoy.com/view/4tscRf",
            "flags": 0,
            "hasliked": 0,
            "id": "XtscRl",
            "likes": 7,
            "name": "Cosine Gradients fm-Vis ",
            "published": 3,
            "tags": [
                "gradient",
                "cosine",
                "alpha",
                "editor",
                "fwidth",
                "modulation",
                "compositioning",
                "duff",
                "wysisygfm",
                "modulate",
                "poeter"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 957
        },
        "renderpass": [
            {
                "code": "#define lineThick .75\n\n/*\n//self   ; cosine gradientsDx: https://www.shadertoy.com/view/XtscRl\n//sibling; Cosine Pallettes  : https://www.shadertoy.com/view/MtfcRs\n//parent ; iq cosine palette : https://www.shadertoy.com/view/ll2GD3\n//parent ; ollj alpha compose: https://www.shadertoy.com/view/4tscRf\n\nmouse twiddles some values:\nIntpout is a vec3 tripplet for each .rgb, setting wavelength,phase,amplitude\n https://en.wikipedia.org/wiki/Wavelength\n https://en.wikipedia.org/wiki/Phase_(waves)\n https://en.wikipedia.org/wiki/Amplitude\nWith like 3 recursive iteratios, that modify these vectors, you enter the basics of \n https://en.wikipedia.org/wiki/Frequency_modulation_synthesis\nExcept here it is visible on a .rgb spectrum and as wave form.\n\nDo not crross the streams!\n When the 3 lines overlap they turn transparent, bug deal eh?\n This was rushed a bit lazily.\n*/\n\n//static.lbrary:\n#define pi acos(-1.)\n#define dd(a) dot(a,a)\n#define u5(a) ((a)*.5+.5)\n#define u2(a) ((a)*2.-1.)\n#define ss(a,u) smoothstep(a,-a,u)\n#define v0 float\n#define v1 vec2\n#define v2 vec3\n#define v3 vec4\nv0 suv(v3 a){return dot(v3(1),a);}v0 suv(v2 a){return dot(v2(1),a);}\nv0 suv(v1 a){return a.x+a.y;}//sum of vector\nv0 mav(v1 a){return max(a.y,a.x);}\nv0 mav(v2 a){return max(a.z,mav(a.xy));}\nv0 mav(v3 a){return max(mav(a.zw),mav(a.xy));}\n#define miv(a) -mav(-a)\nfloat checkerBool2(vec2 h){h=fract(h);\n bvec2 b=greaterThan(h,vec2(.5));return float(b.x==b.y);}\n//https://www.shadertoy.com/view/Mty3z1\n\n//general [Poeter-Duff] \"Compositing Digital Images\" siggraph 1984;\n// https://en.wikipedia.org/wiki/Alpha_compositing\n// https://doc.qt.io/archives/qq/qq17-compositionmodes.html    \n\n//#define pdC(a,b,c,d,m,f) mix(a,b,m.w)*c*d*f+pdCx(a,b,c,d,m)\nvec3 pdC(vec3 a, vec3 b, float c, float d,vec4 m,float f){\n return mix(a,b,m.w)*f*c*d\n  +b*m.z*(1.-c)\n  +a*m.y*(1.-d);}//many contextual simplifications possible.\n#define pdA(c,d,m) suv(m*vec3(c*d,c*(1.-d),d*(1.-c)))\n//#define pdA(c,d,m) m.x*c*d+m.y*c*(1.-d)+m.z*d*(1.-c)\nvec4 pd(vec4 a,vec4 b,vec4 m,float f){\n vec4 r=vec4(pdC(a.rgb,b.rgb,a.w,b.w,m,f),1);//ceneral case color\n r.w   =pdA(a.w,b.w,m.rgb);//general case alpha is sometimes neglible.\n return r;}\n//pd() above is a  generalized function that contains\n//   sOver(vec4 a,vec4 b){return a*a.w+b*b.w*(1.-a.w);}\n//                                      with the parameters;\n//                                  ...,vec4(1,1,1,0),1.);}\nvec4 sOver(vec4 a,vec4 b){return pd(a,b,vec4(1,1,1,0),1.);}\nvec4 sAtop(vec4 a,vec4 b){return pd(a,b,vec4(1,0,1,0),1.);}\nvec4 sIn  (vec4 a,vec4 b){return pd(a,b,vec4(1,0,0,1),1.);}\nvec4 sXor (vec4 a,vec4 b){return pd(a,b,vec4(0,1,1,1),0.);}\nvec4 sOut (vec4 a,vec4 b){return pd(a,b,vec4(0,0,1,0),0.);}\nvec4 sCut (vec4 a,vec4 b){return pd(a,b,vec4(0,0,1,1),0.);}\n//see: https://www.shadertoy.com/view/4tscRf\n\n//option to cheaply add yellow as 4th color and mix that into red and green:\n//vec2 collapseYellow(vec4 c){return mix(c.rg,c.aa,.5);}\n//c.rg=collapseYellow(c);\n\nvoid mainImage(out vec4 o,vec2 u)\n{u=u.xy/iResolution.xy;vec2 m=iMouse.xy/iResolution.xy//lady 2d frame\n;m=1.-m;//invert mouse, for a better default\n;vec3 w=u.x*vec3(3.*m.x,1,u.x);              //vec3 sets wavelength, reciprocal frequency\n;        w+=vec3(.1,.1,1);                   //vec3 sets phase, offset\n;vec3 c=u5( vec3(cos(pi*w))*vec3(.5,m.y,1))  //vec3 sets amplitude, height\n;o=vec4(c,1)//background image = c\n;c=c*.5+.25//make graph.y=f(x) smaller along .y; this messes a bit with fwidth()\n;vec3 a=abs(c-u.y)\n;a=a*.01/lineThick/fwidth(a)//Is likely not the best order of operations for fwidth()\n;a=smoothstep(-.02,.02,a-.1*lineThick)\n;a=a.zxy-a//cheap color fix of graphs has side effect of making a \"z-buffer loop\"\n//;o=vec4(a,1)\n;o=sOver(vec4(a,mav(a)),o);}//pverlay grahs.rgb",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}