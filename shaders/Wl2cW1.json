{
    "Shader": {
        "info": {
            "date": "1594411138",
            "description": "Demo of using Curl Noise generated from a tiling input of simplex noise to create an effect similar to the \"Shadow Move\" effect from Killer Instinct (2013). This was created as an example to accompany this blog post: \nhttps://www.jonmanatee.com/blog/2020/",
            "flags": 32,
            "hasliked": 0,
            "id": "Wl2cW1",
            "likes": 9,
            "name": "Curl Noise Animation",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "JonManatee",
            "viewed": 1211
        },
        "renderpass": [
            {
                "code": "// Demo of using Curl Noise generated from a tiling input of simplex noise to create\n// an effect similar to the \"Shadow Move\" effect from Killer Instinct (2013)\n// this was created as an example to accompany this blog post:\n// https://www.jonmanatee.com/blog/2020/7/3/shadow-move-rendering-in-killer-instinct-season-3html\n\n// most of the interesting bits are in other files\n// Buffer A: noise + curl calculation\n// Buffer B: video input + green screen removal\n// Buffer C: effect simulation + feedback\n\n// for more information about curl noise, this paper is a great resource:\n// https://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph2007-curlnoise.pdf\n\n// set this to 1 to see a side by side visualization\n#define DISPLAY_NOISE_PREVIEW 0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 UV = fragCoord.xy/iResolution.xy;\n\tvec3 color = vec3(0.0);\n    \n#if DISPLAY_NOISE_PREVIEW\n    // noise value on left, curl on right\n    vec4 bufferA = texture(iChannel2, UV);\n    if (UV.x <= 0.5) \n    {\n        color.rgb = vec3(bufferA.b);\n    }\n    else\n    {\n        vec2 flowVector = bufferA.rg * 2.0 - 1.0;\n        // multiply by a large number so that vectors are easier to see\n        float visualizationMultiplier = 25.0; \n        color.rg = (flowVector * visualizationMultiplier) * 0.5 + 0.5; \n    }\n    \n\t\n\tcolor *= smoothstep(0.0, 0.005, abs(0.5-UV.x)); // draw divider line\n\t\n#else    \n    // composite shadow effect\n    {\n        vec4 bufferC = texture(iChannel0, UV);\n        color = mix(color, bufferC.rgb, bufferC.a);\n    }\n    \n    // composite raw video on top\n    {\n        vec4 bufferB = texture(iChannel1, UV);\n        color = mix(color, bufferB.rgb, bufferB.a);\n    }\n#endif\n    \n\tfragColor = vec4(color, 1.0);\n\n    return;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffer A: holds 256x256 tiled curl flow map in RG, source data in B for visualization purposes\n// this could be replaced with other vector fields\n// for example: instead of mapping to a tiling texture, \n// sample 3D noise directly with screenXY in two dimensions and time in the third\n// analytic gradients could be used to avoid finite differences, \n// see: https://www.shadertoy.com/view/4dffRH\n\n\n// A 2D tiling field can be created by mapping UV to a torus in 3D noise\n// 3D simplex noise code here cribbed from \"Improved 3D Simplex Noise\" \n// https://www.shadertoy.com/view/lt3SRX\n// Any 2D tiling input works for this example\n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 random3(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n// map U + V to Torus and sample noise\nfloat TiledNoise( in vec2 Coord )\n{\n    float U = Coord.x * 2.0 * 3.14159;\n    float V = Coord.y * 2.0 * 3.14159;\n    float A = 0.5;\n    float C = 1.20;\n    \n\tfloat X = (C + A * cos(V)) * cos(U);\n    float Y = (C + A * cos(V)) * sin(U);\n    float Z = A * sin(V);\n    \n    return simplex3d(vec3(X, Y, Z));\n}\n\n// interpolate between two noise samples offset by 0.5 in each dimension\nfloat InterpolatedNoise( in vec2 Coord, in float tValue )\n{\n\tfloat NoiseSampleA = TiledNoise(Coord);\n    float NoiseSampleB = TiledNoise(Coord + vec2(0.5,0.5));\n\treturn mix(NoiseSampleA, NoiseSampleB, tValue);\n}\n\n// calculate the Curl using finite differences with 4 samples in each direction\nvec2 ComputeCurl( in vec2 Coord, in float tValue, in vec2 StepSize, in float FlowMultiplier )\n{\n    // integration using 5 points\n    // ( n1 - 8n2 + 8n3 - n4 ) / (12 * t)\n    // where n1 is f(x - 2t), n2 is f(x - t), n3 is f(x + t), and n4 is f(x + 2t)\n    \n    // vertical direction\n    float n1 = InterpolatedNoise(Coord - vec2(0.0, 2.0 * StepSize.y), tValue) * FlowMultiplier;\n    float n2 = InterpolatedNoise(Coord - vec2(0.0, 1.0 * StepSize.y), tValue) * FlowMultiplier;\n    float n3 = InterpolatedNoise(Coord + vec2(0.0, 1.0 * StepSize.y), tValue) * FlowMultiplier;\n    float n4 = InterpolatedNoise(Coord + vec2(0.0, 2.0 * StepSize.y), tValue) * FlowMultiplier;\n    \n    float a = (n1 - 8.0 * n2 + 8.0 * n3 - n4) * (1.0 / 12.0);\n    \n    // horizontal direction\n   \tn1 = InterpolatedNoise(Coord - vec2(2.0 * StepSize.x, 0.0), tValue) * FlowMultiplier;\n    n2 = InterpolatedNoise(Coord - vec2(1.0 * StepSize.x, 0.0), tValue) * FlowMultiplier;\n    n3 = InterpolatedNoise(Coord + vec2(1.0 * StepSize.x, 0.0), tValue) * FlowMultiplier;\n    n4 = InterpolatedNoise(Coord + vec2(2.0 * StepSize.x, 0.0), tValue) * FlowMultiplier;\n    \n    float b = (n1 - 8.0 * n2 + 8.0 * n3 - n4) * (1.0 / 12.0);\n                 \n    return vec2(a, -b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cNoiseAnimationSpeed = 0.5;\n    float cNoiseMultipler = 0.1;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // interpolate t value back in forth in [0,1] range\n    float ip;\n\tfloat tValue = modf(iTime * cNoiseAnimationSpeed, ip);\n\ttValue = mod(ip, 2.0) > 0.0 ? tValue : 1.0 - tValue;\n    tValue = smoothstep(0.0, 1.0, tValue);\n    \n    vec4 color = vec4(0.0);\n    \n    // tile 256x256 noise across screenspace buffer and get curl\n    {\n    \tvec2 UV = fragCoord.xy / 256.0;\n        vec2 StepSize = vec2(1.0/256.0);\n\t\tvec2 curl = ComputeCurl(UV, tValue, StepSize, cNoiseMultipler);\n        color.rg = vec2(0.5 + 0.5*curl);\n        float noiseValue = InterpolatedNoise(UV, tValue);\n        color.b = 0.5 + 0.5*noiseValue;\n    }\n    \n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Buffer B: video input for alpha compositing in other passes\n// this is similar to how character color was injected into the effect for KI Seasons 1+2\n// as detailed in my blog, this could be expanded upon for other arbitrary data beyond color\n\n// matte composite from green screen input\n// credit to iq: https://www.shadertoy.com/view/XsfGzn\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 q = fragCoord.xy / iResolution.xy;\n    \n\tvec3 fg = texture( iChannel0, q ).xyz;\t\n    \n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*5.0, 0.0, 1.0 );   \n\n    float dg = fg.g; \n    fg.g = min( fg.g, maxrb*0.8 ); \n    fg += dg - fg.g;\n\n    fragColor = vec4( fg, 1.0 - k );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Buffer C: feedback simulation\n// reads history buffer with a distorted vector from the flow map, decreases opacity of each pixel over time\n// does not inject with new data every frame to allow the effect to breathe a little more\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float decayRate = 0.25; // rate effect fades out\n    float flowSpeed = 0.25; // multiplier on offset to slow down flow\n    int injectEveryNFrames = 6; // inject image into feedback every N frames\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // sample video input\n    vec4 color = texture(iChannel1, uv);\n\t\n    // sample flow vector and sample history\n    vec2 flowVector = texture(iChannel0, uv).xy * 2.0 - vec2(1.0);\n    flowVector *= flowSpeed;\n    vec4 historyColor = texture(iChannel2, uv - flowVector);\n    \n    // inject if needed\n    if (iFrame % injectEveryNFrames == 0)\n    {\n    \tcolor = historyColor * (1.0 - color.a) + color * color.a;\n    }\n    else\n    {\n     \tcolor = historyColor;   \n    }\n    \n    // decay\n    color.a = clamp(color.a - decayRate * iTimeDelta, 0., 1.);\n        \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}