{
    "Shader": {
        "info": {
            "date": "1591854355",
            "description": "just for fun, displaying the derivative of Mandelbrot (yes :-p ).\nleft: hardware derivative after loop. Right: during loop. ( look different in OpenGL, not sure for windows/Angle. see capture below).\n\nInterior looks better with less iterations.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttsyWn",
            "likes": 5,
            "name": "Mandelbrot derivative",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "fwidth",
                "short",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 424
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/MllXWM\n\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    O-=O;\n    float k=0., v, l=k, t = mod(iTime,88.); t = min(t,88.-t);\n    vec2  R = iResolution.xy,\n          z = (U-.5*R)/R.y / pow(t,t/20.) - vec2(1.001105,0.300717),\n          c = z;\n    \n    for (; k++ <40. && l<4.; )         // Mandelbrot iterations\n         l = dot( z = mat2(z,-z.y,z.x) *z + c, z ), // z = z*z + c\n         v = fwidth(l);\n    \n    if ( U.x < .5*R.x ) v = fwidth(l); // left: post derivative. right: inloop\n    O +=  pow(v,.2); \n  //O -= .1*log(v);\n    \n  //if (O.x==0.) O++;   // test: difference is just fwidth undefined (thus 0)  at divergences\n    if (int(U)==int(.5*R)) O.r ++;     // red separator\n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}