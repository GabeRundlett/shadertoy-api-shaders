{
    "Shader": {
        "info": {
            "date": "1494135463",
            "description": "Trying to simulate how Enchroma glasses filter out some wavelengths, to focus the remaining wavelengths, to better differentiate between some wavelength-compositions. \nThis can aid medical diagnosis and enables colorblind people pass colorblind tests.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsjyWc",
            "likes": 2,
            "name": "UnColorblind Enchroma Sim",
            "published": 3,
            "tags": [
                "filter",
                "rainbow",
                "hsv",
                "colorblind",
                "protan",
                "protans",
                "protoss",
                "rdb",
                "enchroma"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1245
        },
        "renderpass": [
            {
                "code": "//seeing small differences between colors of wounds/infections can be significant for a diagnosis\n//even for non-colorblind people\n\n/*\nthe brain does differential calculus (DFT) of wavelength-overlapping trichromatic input \n(or of (nearly) bichromatic for colorblindness)\n, which can be amplified, by filtering some wavelengths (with expensive sunglasses)\n, by mostly filtering \"pure rgb colors\" and non-yellow\n\nthe trick to counter colorblindness is to filfer out pure RGB colors\nso that only CMY remains unfiltered\n\nthe interpolation between that increases a derivative\n- most Types of colorblind people can barely differentiate purple/cyan/pink from other colors\nunless you filter out \"near purple/cyan\" wavelengths\n, with sunglasses that only remove (near pure) geen blue (and near infraRed, but not pure 400nM red)\n*/\n\n/*\nTrying to simulate how Enchroma glasses filter out some wavelengths, \nto help differenciating between the remaining (unfiltered) wavelengths.\n\nthis translates rather poorly to an hsv rgb color space, \nfor VacuumTube, LCD or OLED displays, but it sill works, kinda.\n\n\"Protan\" is \"red-green colorblindness\"\nwhere cells that should measure red do only measure green instead.\nOwr where the loval maximum of red and green are significantly closer together.\nThis is not binary,\nbut a gradient with percentage of lacking the ability to distinguish red.\n\nall vision comes down to a gradient of wavelengths, on a linear hue-gradient\nbut wavelengths get mixed (the brain does Fourier-Transform the input from the eyes).\nall colorblindness boils down to a limitation of one domains of a 3d color space.\nIf the hue of 2 mixed colors is (nearly) the same,\nthe differentiation of mixed wavelengths gets tricky, or impossible.\nthe dotproduct is a bitch like that!\nbasically, color blindness applies a 3d to 2d matrix transform with no inverse:\n https://www.shadertoy.com/view/MdSGRW\n\nHuman cells are not too good in distinguishing wavelengths.\nbecause there is a lot of frequency overlap between cells \n,that peak in measuring green, and cells that peak in measuring red.\n\nHuman vision does automatic diferentiation and Fourier Analysis from input of the eyes.\n  https://www.shadertoy.com/results?query=derivative+arithmetic\nbetween the input from 1, 2 or 3 cell types to estimate hue and brightness.\nThe differenciation between red and green \nis more prone to rounding errors due to a lot of overlapping.\n\nthis sloppy simulations visualizes how the filter increases contrast\nbetween purple and blue\nand between \"shades of green\".\n\nWe want to enghance an inverse, therefore we filter out the RGB main colors\n, to nehanche the remaining  mixed CMY coplors\n\nEnChroma glasses filter out wavelengths that are \nfurther AROUND the local maximum that human cells measure.\nThe (mlocal maximum) peak wavelengths of the primal colors are unfiltered, \nbut wavelengths a bit above and below become invisible (or diminished to 10%).\ntherefore you see sharper hues, that are easier to differenciate.\n\nIn hue, this filters out the colors around red, green and blue. \nIt reduces ALMOST PURE red and green down to 10% \nIt reduces ALMOST PURE red and violet     to  0% (for color balance)\nwhile PURE red, green violet are still at 100%\n\nThen the brain can easier differenciate between the filtered input\nand more easily distinguish colors between the peaks.\nBetter distinguishing colors between the main-color-peaks \nenables red-green colorblind people to distinguish orange from green.\nBetter distinguishing colors between the main-color-peaks \nenables red-green colorblind people to distinguish blue   from purple.\n*/\n\n#define phi (sqrt(5.)*.5+.5)\n\n\n//hard c0 discontinuious step() filter:\n#define EnHsv\n#define EnHsvIntensity (sin(iTime*phi)*.5+.5)\n//#define EnHsvIntensity 1.\n\n\n//softer c1 dicsontinous piecewise filter: \n#define EnRgb\n#define EnRgbIntensity (sin(iTime*5.)*.5+.5)\n\n/*\nEnRgb does\ncolor.rgb=EnChromaRgb(color.rgb);\nTo kind of simulate how that same filter \nenables to focus on certain color frequencies \nby by diminishing the 3 main colors.\n\nPurple|magenta, yellow and cyan \"shine\" a lot more \nby diminishing all other colors.\n\nThis can help dorctors to make better diagnoses\n\nRedGreen colorblind people \ncan only differenciate between 2 cell inputs.\nand this color filter enables SOME them to pass SOME colorblind-tests \nas if they are not (as much) colorblind.\n\nBecause natural light is a mix of colors, the amount unfiltered colors\nthat still pass trough these glasses\nhelps them differenciate the color of orange carrots from green apples.\n*/\n\n/*\n\nNatural (outdoor) light is more mixed in wavelengths \nthan (indoor) lcd or led display light.\nsince this is 100% lcd/led, sorted by hue, this looks very silly:\n\nA way to aid colorblind people to better distinguish more hues is\nto block out the wavelengths that are in between the peaks \nof SML (short, medium,long wavelength)-receptor wavesforms.\n\n*/\n\nconst float eps = 0.0000001;\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + eps)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              // H\n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + eps),  // S\n                 (minc+maxc)*0.5 );                           // L\n}\n\n//reduce s and v of some hue ranges\nvec3 EnChromaHsv(vec3 c){\n\n if (c.x> 80./255.&&c.x<100./255.)c.yz*=.1;//hues from  80/255 to 100/255 filtered\n if (c.x>150./255.&&c.x<190./255.)c.yz*=.1;//hues from 150/255 to 190/255 filtered\n if (c.x>217./255.)c.yz*=.0;       //remove ultraviolet for color balance\n if (c.x< 12./255.)c.yz*=.0;       //remove infrared    for color balance\n return c;\n}\n\n//reduce rgb values of some ranges, similar to EnChromaHsv(), but\n//not quite how human vision works, still helps \"visualizing\"\n//how this apparently enhanches yellow, and mostly filters out green.\nvec3 EnChromaRgb(vec3 c){//this is not too pretty\n if(c.b<.6)c.b*=.1;\n if(c.r<.3)c.r*=.1;\n if(c.r+c.g<.7){c.r*=.1;c.g*=.1;}\n return c;\n}\n\n//========================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 hsv = vec3( uv.x, 0.5+0.5*sin(iTime), uv.y );\n\t#ifdef EnHsv\n    hsv=mix(hsv,EnChromaHsv(hsv),EnHsvIntensity);\n    #endif\n\tvec3 rgb=hsv2rgb(hsv);\n\t//vec3 rgb = hsl2rgb(hsl);\n    #ifdef EnRgb\n\trgb=mix(rgb,EnChromaRgb(rgb),EnRgbIntensity);;\n    #endif\n    \n\tfragColor = vec4( rgb, 1.0 );\n}\n\n// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Somehow optimized HSV and HSL to RGB conversion functions. \n\n//========================================================================\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}