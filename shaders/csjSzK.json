{
    "Shader": {
        "info": {
            "date": "1670538892",
            "description": "Explanation: \nMap 3D noise to [0,1]. \nEvery step move an amount in the ray direction proportional to the noise value at the current point. \nIf mapped value is less than a threshold, stop.\n\nOverstepping + performance cost are issues. Try nearest filter!",
            "flags": 0,
            "hasliked": 0,
            "id": "csjSzK",
            "likes": 7,
            "name": "Crude 3D Noise Visual",
            "published": 3,
            "tags": [
                "h"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 500\n\nvec3 ori() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(1);\n    ro += 0.1 * iTime * vec3(1, 0.9, 0.95);\n    //vec3 ro = vec3(0,1,-1);\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\n// Map noise values [0,1]^3->[0,1]\nfloat map(vec3 p) {\n    float sc = 0.3;//2. - 1.7 * tanh(0.2 * iTime);\n    vec3 q = texture(iChannel0, sc * p).rgb;\n    float d = dot(q,q);\n    return d * d;\n}\n\n// Map noise values [0,1]^3->[0,1]^3 (unused)\nvec3 map2(vec3 p) {\n    vec3 q = texture(iChannel0, 0.3 * p).rgb;\n    return pow(q, vec3(4));\n}\n\n// (not traditional raymarching)\nvec2 march(vec3 ro, vec3 rd) {\t\n    float d = 0.;\n    int steps = 0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n       vec3 p = ro + rd * d;\n            \n       // dd reads noise from 3D texture, value in [0,1]\n       float dd = map(p);\n\n       // hide overstepping with noise (slow)\n       // dd *= 0.9 + 0.1 * hash(p.x, hash(p.y, p.z));\n      \n       // smaller increments -> less overstepping      \n       d += 0.01 * dd;\n            \n       // maybe replace c with function based on distance from ro?\n       // if p is close to ro, set threshold to 0. idk\n       float c = .5 + .5 * thc(4., 10. * d + p.y - iTime);\n       \n       // threshold for where to draw noise\n       // (dd > 1.5), (abs(dd - 0.5)< 0.004) look cool\n       if (dd < mix(0.1, 0.18, c)) {\n           steps = i;\n           break;\n       }\n    }\n    \n    return vec2(d, steps);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = ori();    \n    vec3 rd = dir(uv, ro, vec3(0), 1.5);\n      \n    // m.x = distance\n    // m.y = number of steps\n    vec2 m = march(ro, rd);\n    \n    vec3 p = ro + m.x * rd;\n    \n    vec3 col = vec3(.9,.1,.1);\n    \n    //float y = exp(-20.*(.5+.5*cos(80. * p.x + iTime)));    \n    vec3 col1 = vec3(1,.5,.2);\n    //vec3 col2 = clamp(col1 + y, 0., 1.);\n    //col = mix(col, col2, 1.-exp(-0.01 * m.y));\n    \n    // surface colors\n    col *= pal(map(p + 0.02) - 0.2 * iTime, 0.5 * vec3(0,1,2)/3.);\n    \n    // fog\n    col = mix(col, col1, 1.-clamp(exp(1.-1.4*m.x), 0., 1.));\n    \n    // gamma correction\n    col = pow(col, vec3(1./2.2));\t\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Thanks to (everyone I've copied code + ideas from):\n// TheArtOfCode - raymarching\n//  BlackleMori - hash, erot\n//      Sizertz - AO, shadow\n//        NuSan - materials\n//         Leon - raymarching hash trick\n//           iq - pal, smin, most things!\n\n#define tau 6.2831853071\n#define pi 3.1415926535\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define pal(a,b) .5+.5*cos(2.*pi*(a+b))\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat h21(vec2 a) { return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123); }\nfloat mlength(vec2 uv) { return max(abs(uv.x), abs(uv.y)); }\nfloat mlength(vec3 uv) { return max(max(abs(uv.x), abs(uv.y)), abs(uv.z)); }\n\n// Maybe remove this\nfloat sfloor(float a, float b) { return floor(b-.5)+.5+.5*tanh(a*(fract(b-.5)-.5))/tanh(.5*a); }\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}