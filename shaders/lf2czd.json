{
    "Shader": {
        "info": {
            "date": "1722878301",
            "description": "//4.5\n//Formas\n//Circulo inicial - Shaping function.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2czd",
            "likes": 0,
            "name": "Formas 4.5 - Estrella ",
            "published": 3,
            "tags": [
                "mix",
                "tutorial",
                "sin",
                "color",
                "cos",
                "shaders",
                "shaders",
                "livecoding",
                "functions",
                "shape",
                "shaping",
                "taller",
                "formas",
                "tutoriales",
                "osciladores"
            ],
            "usePreview": 0,
            "username": "jpupper",
            "viewed": 53
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define time iTime\n#define resolution iResolution\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv = gl_FragCoord.xy / resolution.xy; // De esta manera obtenemos las coordenadas cartesianas\n    \n    //ESTO ES PARA ARREGLAR EL ASPECT RADIO. \n    //Es decir para que no importa la resolución que tenga, el circulo siempre sea un circulo perfecto.\n    float fix = resolution.x/resolution.y; //Creo la variable que me permite arreglar esto.\n    uv.x*=fix;\n    \n    \n    //EN EL P también lo tengo que multiplicar por el fix.\n    vec2 p = vec2(0.5*fix,0.5) - uv; //Genero un punto en el espacio(en este caso en el medio.\n    float r = length(p);  //Obtengo el radio\n    float a = atan(p.x,p.y);//obtengo el angulo. \n    \n    \n    //Puedo utilizar una variable para modificar a mi circulo ahora.\n    \n    \n    \n    float mof = sin(a*5.+time)*0.02 ;\n          //mof = sin(a*10.+time+sin(r*100+time*10))*0.02;\n          //mof = sin(a*50.+time)*0.08*sin(r*100+time);\n          //mof = sin(a*10.+time)*0.08*sin(r*100+time);\n          //mof = sin(uv.x*200.+time)*0.08*sin(uv.y*200+time);\n          //mof = sin(uv.x*100.+time)*0.08*sin(uv.y*50000000+time);\n    float e = smoothstep(0.88,0.9,(1.-r)+mof); \n\n          \n    fragColor = vec4(vec3(e),1.0); \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}