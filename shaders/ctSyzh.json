{
    "Shader": {
        "info": {
            "date": "1691436886",
            "description": "A playful glowing sphere animated with physics-based bouncing, edge detected impacts, and timed glow bursts for visual flair.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctSyzh",
            "likes": 5,
            "name": "Bouncy glowing circle",
            "published": 3,
            "tags": [
                "glow",
                "distance"
            ],
            "usePreview": 0,
            "username": "Unesty",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "// Glowing Sphere Shader\n\n#define PI 3.14159265359\n\n//rotation matrix\nmat2 rot(float a) {    \n  return mat2(cos(a), sin(a), \n              -sin(a), cos(a));\n}\n\nfloat sawtooth(float x) {\n  return x - floor(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  float aspect = iResolution.x/iResolution.y;\n  vec2 uv = fragCoord/iResolution.xy*2.0 - 1.0;\n  \n  float time = iTime*0.5;\n  \n  //// Swirling distortion\n  //uv += vec2(sin(time), cos(time)) * 0.1;\n  //uv *= rot(sin(time*0.5)*0.3 + 0.7);\n  \n  //// Complex distortion\n  // Slow wave distortion\n  //vec2 wave1 = uv * vec2(0.2, 1.0) + vec2(sin(iTime), cos(iTime)) * 0.1;\n  \n  // Faster swirl  \n  //float swirl = iTime * 2.1;\n  //mat2 rotMat = mat2(cos(swirl), sin(swirl), \n  //                   -sin(swirl), cos(swirl));\n  //vec2 wave2 = rotMat * uv;\n\n  // Blend waves                \n  //uv = mix(uv, wave1, 0.5);\n  //uv = mix(uv, wave2, 0.75);\n  \n  \n  \n  //// Move up-down\n  // Gently float sphere vertically  \n  //float boy = sin(iTime) * 0.1;\n  //uv.y += boy;\n  \n  // Pulsing growth\n  //float pulse = (sin(iTime) + 1.0) * 0.5;\n  //float radius = mix(0.1, 0.5, pulse); // Unused lol\n\n  //// Ball\n  // Bouncing ball height \n \n  // Playful bounces\n  float bounces = sin(iTime * 2.0)*.5;//.9-.2; \n  bounces = abs(bounces);\n  \n  // Parabolic jump shape\n  float height = -32.0 * bounces * (1.0 - bounces);\n  uv.y += height * 0.1;\n  \n  // Triangle wave x position\n  #define roomsz 3.6\n  // Triangle wave x motion\n  float triWave = abs(2.0 * (mod(iTime/roomsz, 1.0)) - 1.0);\n  uv.x += (triWave-0.5) * (roomsz/2.0);\n  // Map to -1 to 1 range\n  //triWave = triWave*2.0 - 1.0;\n\n\n  // Solid sphere \n  float sphereDist = length(uv/vec2(1,aspect));\n  float sphere = smoothstep(0.1, 0.09, sphereDist);\n  \n  // Large glow\n  float glowDist = length(uv/vec2(1,aspect));\n  glowDist = sqrt(1.0 - glowDist*glowDist); \n  // Calculate distance from center\n  float dist = length(uv/vec2(1,aspect));\n    \n  // Map distance to glow\n  float glow = pow(1.0-dist, 4.0);\n  float largeGlow = glowDist*0.01 ;\n\n  \n  // Subtract sphere from glow\n  glow = max(glow - sphere, 0.0);\n  \n  // Sine blink\n  //largeGlow *= sin(time) * 5. + 0.5;\n  //glow *= sin(time) * 0.5 + 0.5;\n\n  // Use exponential pulses for glow\n  //float pulse = exp(abs(sin(time*3.0)));\n  //largeGlow *= pulse*2.;\n  //glow *= pulse*.5;\n\n  // Burst glow on impact\n  float floorImpact = smoothstep(0.075, 0.0, bounces)*.4;\n  // Side impacts\n  float sideImpact1 = smoothstep(0.075/roomsz, 0., triWave)*.4;\n  float sideImpact2 = smoothstep(1.-(0.075/roomsz), 1., triWave)*.4;\n\n  // Burst glow\n  glow *= 1.0 + floorImpact + sideImpact1 + sideImpact2;\n\n  // Combine\n  vec3 col = vec3(sphere) + glow + largeGlow;\n  \n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}