{
    "Shader": {
        "info": {
            "date": "1641433568",
            "description": "Genuary 2022 | Day 5 - Destroy a Box\nMy weapon of Choice is noise. https://genuary.art/\nChanges each day based on Date uniform.",
            "flags": 0,
            "hasliked": 0,
            "id": "slyXWc",
            "likes": 26,
            "name": "Destroy Box | Genuary #5",
            "published": 3,
            "tags": [
                "genuary5"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Genuary 2022 | Day 5 - Destroy a Box\n    Changes each day based on Date uniform.\n    \n    My weapon of Choice is noise. https://genuary.art/\n    in this b&w dither mode recently - its been fun.\n        \n    01/05/22 @byt3_m3chanic \n    \n    Thank you @Fabrice for text functions / @Shane for very compact noise and @iq for \n    shapes & FBM.\n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\n\n#define MAX_DIST \t85.\n#define MIN_DIST\t.0001\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 a){ return fract(sin(dot(a, vec2(27.609, 57.583)))*43758.5453); }\n\n////////////////////////////////////////////////////////\n// Fabrice Neyret https://www.shadertoy.com/view/llySRh\nint CAPS=0;\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.44;\n#define C(c) spc O+= char(U,64+CAPS+c);\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n// webGL2 variant with dynamic size\nvec4 pInt(vec2 p, float n) {\n    vec4 v = vec4(0);\n    for (int i = int(n); i>0; i/=10, p.x += .5 )\n        v += char(p, 48+ i%10 );\n    return v;\n}\n\n// @Shane - a very tightly compacted, self-contained version \n// of IQ's 3D value noise function.\n//---------------------------------------------------------------\nfloat n3D(vec3 p){\n    const vec3 s = vec3(113, 57, 27);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n//---------------------------------------------------------------\n// @iq fbm generator\nfloat fbm( in vec3 x, float oct ) {\n    const float scale  = .8;\n    float a = 0.,b = .5,f = 2.;\n    vec3  d = vec3(0.);\n    for( float i=0.; i<oct; i++ ) {      \n        float n = n3D(f*x*scale);\n        a += b*n;\n        b *= 0.5;\n        f *= 1.8;\n    }\n\treturn a;\n}\n//---------------------------------------------------------------\n// @iq SDF boxes\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdBox( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec3 hp,hit;\nmat2 turn,hurn;\n\nvec2 map (vec3 p) {\n\n\tvec2 res = vec2(100.,-1.);\n    vec3 q = p;\n    q.yz*=turn;\n    q.xz*=hurn;\n    vec3 nv = q;\n    nv+=vec3(0,-7.4-iDate.z,0);\n\n    float b = sdBox(q,vec3(1));\n\n    if(b<res.x) {\n        float d = fbm(nv*.45,7.);\n        d -= .45;\n        b = max(b,-d/1.15);\n        hit=q;\n        res = vec2(b,2.);\n    }\n\n    return res;\n}\n\nvec2 refmap (vec3 p) {\n\tvec2 res = vec2(100.,-1.);\n    p.yz*=turn;\n    p.xz*=hurn;\n  \tfloat d = sdBox(p,vec3(1));\n    if(d<res.x) res = vec2(d,2.);\n    return res;\n}\n\nvec2 marcher(vec3 ro, vec3 rd, int maxsteps) {\n    float depth = 0.;\n    float m = -1.;\n    for (int i = 0; i<maxsteps;i++) {\n     \tvec3 pos = ro + depth * rd;\n        vec2 dist = map(pos);\n        m = dist.y;\n        // get ref map\n        if(m==2.){\n            float ref = refmap(pos).x;\n            if(ref<dist.x*.999) m = 5.;\n        }\n        if(dist.x<depth*MIN_DIST)break;\n        depth += dist.x*.75; \n        if(depth>50.) break;\n    }\n    return vec2(depth,m);\n}\n\n// Tetrahedron technique @iq\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t) {\n    float e = .0001*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\nint face =0;\nvec3 material(float m, vec3 p, vec3 n) {\n    vec3 h=vec3(.05);\n    vec3 tn = n;\n    tn.yz*=turn;\n    tn.xz*=hurn;\n    vec3 aN = abs(tn);\n    ivec3 idF = ivec3(tn.x<-.25? 0 : 5, tn.y<-.25? 1 : 4, tn.z<-.25? 2 : 3);\n    face = aN.x>.5? idF.x : aN.y>.5? idF.y : idF.z;\n    \n    vec3 cuv=vec3(0);\n    // set coords\n    if(face==0) cuv = hp.zxy*vec3(1,1,-1);\n    if(face==1) cuv = hp.xyz*vec3(1,1,-1);\n    \n    if(face==2) cuv = hp.yzx*vec3(1,1,-1);\n    if(face==3) cuv = hp.yzx;\n    if(face==4) cuv = hp.xyz;\n    if(face==5) cuv = hp.yxz*vec3(1,1,-1);\n\n    if(m==2.) {\n        vec2 tv = cuv.xz*2.;\n\n        vec4 O = vec4(0);\n        vec2 U = (tv+vec2(1.25))/2.5;\n        O+=pInt(U,5.);\n        U = (tv+vec2(1.65,1.5))/.75;\n        low C(7);C(5);C(14);C(21);C(1);C(18);C(25);\n        O.x=smoothstep(.7,.85,O.x);\n        h = mix(h,vec3(1),O.x);\n    \n    }\n    \n    if(m==3.) h = vec3(.9);\n    if(m==5.) {\n        float d = fbm(hp*2.,5.);\n        d=floor(fract(d)*15.3)*2.5;\n        d=mod(d,2.);\n        float dt =abs(d)-.001;\n        d=smoothstep(.03,.9,d);\n        \n        dt=smoothstep(.02,.1,dt);\n        h = mix(vec3(.1),vec3(.2,.0,.0),d);\n        h = mix(vec3(.9,.4,.1),h,dt);\n    }\n    return h;    \n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n\n    vec3 C = vec3(0.);\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    \n    float pxg = 156.;\n    uv = floor(uv*(pxg*R.x/R.y))/(pxg*R.x/R.y);pxg*=1.5;\n    \n    \n    float zoom = 4.5;\n    vec3 ro = vec3(uv*zoom,-zoom-5.5);\n    vec3 rd = vec3(0,0,1.);\n\n    mat2 rx,ry;\n    rx = rot(-.68);\n    ry = rot(.78);\n    turn = rot(T*35.*PI/180.);\n    hurn = rot(T*25.*PI/180.);\n    \n    ro.yz *= rx;ro.xz *= ry;\n    rd.yz *= rx;rd.xz *= ry;\n    vec2 t = marcher(ro,rd, 256);\n    \n    hp=hit;\n    if(t.x<50.){\n\t\tvec3 p = ro + rd * t.x;\n      \tvec3 nor = normal(p, t.x);\n        vec3 lpos = vec3(-5.,10.,5.5);\n        vec3 l = normalize(lpos-p);\n        float diff = clamp(dot(nor,l),.03,1.);\n\n        vec3 h = material(t.y,p,nor);\n \t\tC = diff * h ; \n  \n    } else {\n        C = vec3(0.200);\n    }\n\n    float CR = C.x;\n    vec3 KR = vec3(1.);\n    if(CR<.500&&(mod(   F.x,4.)==mod(F.y,4.))) KR=KR*.4;\n    if(CR<.250&&(mod(1.-F.y,4.)==mod(F.x,4.))) KR=KR*.35;\n    if(CR<.125&&(mod(   F.x,1.)==mod(F.y,2.))) KR=KR*.3;\n    if(CR<.065&&(mod(1.-F.x,2.)==mod(F.y,2.))) KR=KR*.1;\n    if(CR<.025&&(mod(   F.x,1.)==mod(F.y,1.))) KR=KR*.6;\n    if(CR<.015&&(mod(1.-F.x,1.)==mod(F.y,1.))) KR=KR*.8;\n\n    if(CR>.800&&(mod(   F.x,4.)==mod(F.y,4.))) KR+=.15;\n    if(CR>.900&&(mod(1.-F.x,2.)==mod(F.y,2.))) KR+=.15;\n    \n    KR=clamp(KR,vec3(0),vec3(1));\n    vec3 DR=KR;\n\n    KR=mix(KR,DR*C,.75);\n    KR=mix(vec3(.7),C,1.-KR);\n    \n    float d = fbm(vec3(0,0,T)+vec3(uv*5.,1.),6.)*.22;\n    float sq = sdBox(uv,vec2(.55,.55))+d;\n    float bk = abs(sq)-.015;\n    float tk = abs(sq)-.005;\n    sq=smoothstep(.01,.011,sq);\n    bk=smoothstep(.01,.011,bk);\n    tk=smoothstep(.01,.011,tk);\n    float mask=mix(0.,1.,sq);\n    KR=mix(KR,vec3(.1),mask);\n    KR=mix(vec3(.2),KR,bk); \n    KR=mix(vec3(.6),KR,tk);    \n    \n        \n    float hs = hash21(uv);\n    if(fract(hs*5.)>.65) KR=mix(KR,clamp(KR-.02,vec3(0),vec3(1)),mask);\n    if(hs>.75) KR=mix(KR,clamp(KR+.015,vec3(0),vec3(1)),1.);\n\n\n    O = vec4(pow(KR, vec3(0.4545)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}