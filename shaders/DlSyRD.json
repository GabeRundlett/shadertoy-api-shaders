{
    "Shader": {
        "info": {
            "date": "1691507230",
            "description": "cuz why not? Replicated from https://www.youtube.com/watch?v=p8u_k2LIZyo",
            "flags": 0,
            "hasliked": 0,
            "id": "DlSyRD",
            "likes": 6,
            "name": "Fast Inverse Square Root",
            "published": 3,
            "tags": [
                "math",
                "fast",
                "utility",
                "optimization",
                "sqrt",
                "tool"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "float fisqrt(float x)\n{\n    uint i;\n    float x2, y;\n    \n    x2 = x*.5;\n    y = x;\n    i = floatBitsToUint(x);       // evil floating point bit hack\n    i = 0x5f3759dfu - ( i >> 1);  // wut\n    y = uintBitsToFloat(i);\n    y = y*(1.5 - (x2 * y * y));   // 1st iteration\n//  y = y*(1.5 - (x2 * y * y));   // 2nd iteration, can be removed\n    \n    return y;\n}\n\n// https://youtu.be/p8u_k2LIZyo\n// Highly recommend watching this video explaining how it works in detail\n\nconst float pi = 3.14159;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * vec2(5, 2);\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,pi*2./3.,pi*4./3.));\n    \n    float a = 1./fisqrt(uv.x);   \n    //Proper usage is to use this for normalizing vectors by multiplying\n    // for example, where vec3 a = something, instead of a = a / âˆš(a.x * a.x + a.y * a.y + a.z * a.z)\n    // fast inverse square root lets you do a = a * fisqrt(a.x * a.x + a.y * a.y + a.z * a.z) allowing \n    // the entire operation to be completed without a single square root or division call. \n    // I tested this function in a real application and I found that it was exactly the same performance as normalize().\n    // It seems the compiler uses this trick internally!\n    float b = sqrt(uv.x);\n\n\n    float d = smoothstep(uv.y, uv.y + 8./iResolution.y, a*.7 +.3)*.5+.5;\n    d *= smoothstep(uv.y, uv.y + 8./iResolution.y, b*.7 +.3)*.5+.5;\n    \n    if (uv.y < .3) col = vec3(log((a-b)*200.+1.));\n    // Error between sqrt() and 1./fisqrt()\n    // Now... which one is closer to ground truth? I'll implement that later\n    // Interesting to note, sqrt() is always smaller, making abs(a-b) unnecessary.\n\n    // Output to screen\n    fragColor = vec4(col*d,1.0);\n}\n\n\n\n\n\n/* //Minified\n\nfloat fisqrt(float x)\n{\n    uint i;\n    float a = x,y;\n    a*=.5;\n    i=floatBitsToUint(x);\n    i=uint(0x5f3759df) - ( i >> 1);\n    y=uintBitsToFloat(i);\n    y=y*(1.5-(a*y*y));\n    return y;\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}