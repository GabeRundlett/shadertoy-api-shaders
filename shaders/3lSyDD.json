{
    "Shader": {
        "info": {
            "date": "1594320395",
            "description": "ball with dynamic lighting",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSyDD",
            "likes": 1,
            "name": "ball lighting",
            "published": 3,
            "tags": [
                "dynamiclight"
            ],
            "usePreview": 0,
            "username": "VechirkoIgor",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "\nvec3 getLightDirection()\n{\n    vec3 direction;\n    direction.x = sin(iTime ) / 2.0f;\n    direction.y = direction.x;\n    direction.z = ( cos(iTime ) );\n    \n    return normalize(direction);\n}\n\nvec3 getViewDirection()\n{\n    return vec3( 0.0f, 0.0f, 1.0f );\n}\nvec3 getBallPointNormal( in vec2 vecFromBallCenter, in float ballRadius )\n{\n    vec3 result = vec3( 0.0f );\n    result.xy = vecFromBallCenter;\n    result.z = -sqrt( pow( ballRadius, 2.0f ) - ( pow(result.x, 2.0f ) + pow(result.y, 2.0f ) ) );\n    \n    return normalize(result);\n}\nvec4 calcAmbienComponent( in vec4 ambLight, in vec4 ambMat )\n{\n    return ambLight * ambMat;\n}\nvec4 calcDiffuseComponent( in vec4 diffuseLight, in vec4 diffMat, in vec3 pointNormal )\n{\n    float intesity = dot( -normalize(pointNormal), getLightDirection() );\n    \n    if ( intesity < 0.0f )\n    {\n        intesity = 0.0f;\n    }\n    \n    return diffuseLight * diffMat * intesity;\n}\nvec4 calcSpecularComponent( in vec4 specularLight, in vec4 specMat, in float shine, in vec3 pointNormal )\n{\n    vec3 reflectVec = reflect( -getLightDirection(), pointNormal );\n    float intensity = pow( max( 0.0f, dot( reflectVec, getViewDirection() ) ), 64.0f );\n    vec4 specLight = specularLight * specMat * intensity;\n    \n    return specLight;\n}\nvec4 getPointColor( in vec3 pointNormal, in vec4 matAmbient, vec4 matDiffuse, vec4 matSpecular, in float shine )\n{   \n    vec4 lightColor = vec4( 1.0f, 1.0f, 1.0f, 1.0f );\n    \n    vec4 result = calcAmbienComponent(lightColor, matAmbient);\n    result = result + calcDiffuseComponent( lightColor, matDiffuse, pointNormal );\n    result = result + calcSpecularComponent( lightColor, matSpecular, shine, pointNormal );\n    \n    return result;\n}\nvec4 getBackColor()\n{\n    return vec4( 0.2f, 0.2f, 0.2f, 1.0f );\n}\n\nstruct sBall\n{\n    vec3 pos;\n    float radius;\n    \n    vec4 matAbient;\n    vec4 matDiffuse;\n    vec4 matSpecular;\n    float shine;\n};\n\n\nsBall[] balls = sBall[]( sBall(vec3(0.5f, 0.5f, 0.0f), 0.1f * 800.0f, vec4( 0.329412f, 0.223529f, 0.027451f, 1.0f ), vec4( 0.780392f, 0.568627f, 0.113725f, 1.0f ) , vec4( 0.992157f, 0.941176f, 0.807843f, 1.0f ), 27.8974f ),\n                       \t sBall(vec3(0.8f, 0.3f, 0.0f), 0.09f * 800.0f, vec4( 0.329412f, 0.223529f, 0.027451f, 1.0f ), vec4( 0.780392f, 0.568627f, 0.113725f, 1.0f ) , vec4( 0.992157f, 0.941176f, 0.807843f, 1.0f ), 27.8974f ) \n                       );\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 resultColor;\n    \n    for( int ballIndx = 0; ballIndx < 1; ballIndx++ )\n    {\n        vec2 offsetFromBallCenter = fragCoord - vec2(balls[ballIndx].pos.xy) * iResolution.xy;\n        float distToBallCenter = length( offsetFromBallCenter );\n\n        if ( distToBallCenter <= balls[ballIndx].radius )\n        {\n            vec3 normalToBallPoint = getBallPointNormal( offsetFromBallCenter, balls[ballIndx].radius );\n            resultColor = getPointColor( normalToBallPoint, balls[ballIndx].matAbient, balls[ballIndx].matDiffuse, balls[ballIndx].matSpecular, balls[ballIndx].shine );\n            break;\n        }\n        else\n        {\n            resultColor = getBackColor();\n        }\n    }\n    \n    fragColor = resultColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}