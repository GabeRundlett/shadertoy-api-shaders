{
    "Shader": {
        "info": {
            "date": "1520503222",
            "description": "Triangulate random points.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdcyDl",
            "likes": 12,
            "name": "Triangules",
            "published": 3,
            "tags": [
                "2d",
                "triangles"
            ],
            "usePreview": 0,
            "username": "space928",
            "viewed": 875
        },
        "renderpass": [
            {
                "code": "vec2[16] points;\n\nvec2 fractalNoise(vec2 p)  // replace this by something better\n{\n    vec2 n = texture(iChannel0, p).rg;\n    /*for(int i = 0; i<6; i++)\n    \tn+=texture(iChannel0, p/(float(i)/float(6))).rg;\n    n /= 6.;*/\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    for(int i = 0; i<points.length(); i++)\n    {\n        points[i] = fractalNoise(vec2(float(i)/float(points.length())+iTime*.001, iTime*.01));\n    }\n    \n    float lines = 0.;\n    \n    for(int x = 0; x < points.length(); x++)\n    {\n        //lines += smoothstep(0.8, 1., 1.-length(uv-points[x]))*.8;\n        for(int y = x+1; y < points.length(); y++)\n        {\n            //float grad = (points[y].y-points[x].y)/(points[y].x-points[x].x);\n            vec2 lineDelta = points[y]-points[x];\n            vec2 lDist = uv - points[x];\n            vec2 pq0 = lDist - lineDelta*clamp( dot(lDist,lineDelta)/dot(lineDelta,lineDelta), 0.0, 1.0 );\n            vec2 d = vec2( dot( pq0, pq0 ), (lDist.x*lineDelta.y-lDist.y*lineDelta.x));\n\n            float len = 1.-(length(uv-points[x])*length(uv-points[y]))*10.;\n            len*=len*len;\n            lines += abs( smoothstep(0.998, 1.,1.-sqrt(d.x))*len);//*sign(d.y);\n\n            //float l = (uv.y - (grad*uv.x+points[x].y));\n            //lines += (l>1.?0.:l)*length(points[y]-points[x])*.5;\n        }\n    }\n    \n    // Time varying pixel color\n    lines *= max(abs(sin(uv.y+iTime*500.)), .2);\n    lines *= max(abs(sin(uv.y*iResolution.y*2.)), .2);\n    vec3 col = vec3(lines)* vec3(.6,.7,1.)+vec3((1.-length(uv-.5))*.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}