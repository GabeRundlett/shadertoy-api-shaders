{
    "Shader": {
        "info": {
            "date": "1542812834",
            "description": " Shane gave us flowing arrows on a square lattice truchet, and flow without  arrows on a hexagonal truchet. Here are the arrows on the latter using the  hexagon labeling method from (e.g.) \"Line of Sight 2\".\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ltVBDw",
            "likes": 10,
            "name": "Hexagonal Truchet Flow",
            "published": 3,
            "tags": [
                "hexagon",
                "truchet",
                "flow",
                "arrow"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 702
        },
        "renderpass": [
            {
                "code": "// \"Hexagonal Truchet Flow\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\n\nfloat tCur;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\nvec3 ShowScene (vec2 p)\n{\n  vec3 col, w;\n  vec2 cId, pc;\n  vec2 q;\n  float dir, a, d;\n  cId = PixToHex (p);\n  pc = HexToPix (cId);\n  dir = 2. * step (Hashfv2 (cId), 0.5) - 1.;\n  w.xy = pc + vec2 (0., - dir);\n  w.z = dot (w.xy - p, w.xy - p);\n  q = pc + vec2 (sqrt3/2., 0.5 * dir);\n  d = dot (q - p, q - p);\n  if (d < w.z) w = vec3 (q, d);\n  q = pc + vec2 (- sqrt3/2., 0.5 * dir);\n  d = dot (q - p, q - p);\n  if (d < w.z) w = vec3 (q, d);\n  w.z = abs (sqrt (w.z) - 0.5);\n  d = HexEdgeDist (p - pc);\n  col = vec3 (0.5, 0.5, 1.) * mix (1., 0.7 + 0.3 * smoothstep (0.2, 0.8, d),\n     smoothstep (0.02, 0.03, d));\n  if (w.z < 0.25) {\n    col = vec3 (1., 1., 0.) * (1. - 0.5 * smoothstep (0.1, 0.25, w.z));\n    w.xy = Rot2D (w.xy - p, 0.5 * dir * tCur);\n    a = mod (3. * atan (dir * w.y, - w.x) / pi, 1.) - 0.5;\n    for (float s = 0.01; s >= 0.; s -= 0.01) {\n      d = 1.;\n      if (abs (a) - 0.15 < s) d = min (d, smoothstep (0., 0.005,\n         w.z - 0.045 * (1. - a / 0.15) - 0.5 * s));\n      if (abs (a + 0.3) - 0.15 < s) d = min (d, smoothstep (0., 0.005, w.z - 0.02 - s));\n      if (abs (mod (2. * a + 0.5, 1.) - 0.5) - 0.4 < s)\n         d = min (d, smoothstep (0., 0.005, abs (w.z - 0.135) - 0.01 - s));\n      col = mix (vec3 (1. - 70. * s, 0., 0.), col, d);\n    }\n  }\n  return col;\n}\n\n#define AA  1\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec3 col;\n  vec2 canvas, uv;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  uv += 6. * vec2 (cos (0.01 * tCur), sin (0.01 * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) col += (1. / naa) * ShowScene (8. * (uv + step (1.5, naa) *\n     Rot2D (vec2 (0.71 / canvas.y, 0.), 0.5 * pi * (a + 0.5))));\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), 1.5 * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}