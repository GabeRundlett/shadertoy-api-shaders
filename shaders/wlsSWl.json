{
    "Shader": {
        "info": {
            "date": "1564671986",
            "description": "Slightly stiff bead-necklace polymers; based on previous \"Polymer Chains\" but polymers are now rendered as \"tubes\".",
            "flags": 32,
            "hasliked": 0,
            "id": "wlsSWl",
            "likes": 9,
            "name": "Polymer Chains 2",
            "published": 3,
            "tags": [
                "dynamics",
                "physics",
                "polymer",
                "sausage"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 486
        },
        "renderpass": [
            {
                "code": "// \"Polymer Chains 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nmat3 DirToRMatT (vec3 vd, vec3 vu);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\n\nconst int nChain = 12, lenChain = 30, nBall = nChain * lenChain;\nvec3 vnObj, vnSph, ltDir;\nvec2 qBlk;\nfloat dstFar, tCur, spRad;\nint idBall, idChain;\nconst float pi = 3.14159;\n\n#define TUBE 1    // = 0/1, show polymer balls/tubes\n\n#if TUBE\n\nfloat CapsHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  vec3 s;\n  float dMin, d, a, b, w;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - rad * rad);\n  if (w > 0. && a > 0.) {\n    d = - b - sqrt (w);\n    d /= a;\n    s = ro + d * rd;\n    if (d > 0. && abs (s.z) < len) {\n      dMin = d;\n      vnObj = vec3 (s.xy, 0.);\n    } else {\n      ro.z -= len * sign (s.z);\n      b = dot (rd, ro);\n      w = b * b - (dot (ro, ro) - rad * rad);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0.) {\n          dMin = d;\n          vnObj = ro + d * rd;\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat PolyHit (vec3 ro, vec3 rd)\n{\n  mat3 rMat, rMatS;\n  vec3 r, rp, vnObjS;\n  float dMin, d, sz;\n  sz = 0.4;\n  dMin = dstFar;\n  idChain = -1;\n  for (int n = 0; n < nBall; n ++) {\n    if (mod (float (n), float (lenChain)) == 0.) r = Loadv4 (2 * n).xyz;\n    else {\n      rp = r;\n      r = Loadv4 (2 * n).xyz;\n      rMat = DirToRMatT (normalize (r - rp), vec3 (0., 0., 1.));\n      d = CapsHit ((ro - 0.5 * (r + rp)) * rMat, rd * rMat, sz, 0.5 * length (r - rp));\n      if (d < dMin) {\n        dMin = d;\n        rMatS = rMat;\n        vnObjS = vnObj;\n        idChain = n / lenChain;\n      }\n    }\n  }\n  if (idChain >= 0) vnObj = rMatS * normalize (vnObjS);\n  return dMin;\n}\n\n#else\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec3 v;\n  float b, d, w, dMin, sz;\n  dMin = dstFar;\n  sz = 0.55;\n  idBall = -1;\n  for (int n = 0; n < nBall; n ++) {\n    v = ro - Loadv4 (2 * n).xyz;\n    b = dot (rd, v);\n    w = b * b + sz * sz - dot (v, v);\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        idBall = n;\n      }\n    }\n  }\n  if (idBall >= 0) vnObj = (ro - Loadv4 (2 * idBall).xyz + dMin * rd) / sz;\n  return dMin;\n}\n\n#endif\n\nfloat SphHit (vec3 ro, vec3 rd)\n{\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + spRad * spRad - dot (ro, ro);\n  d = dstFar;\n  if (w >= 0.) {\n    d = - b - sqrt (w);\n    vnSph = (ro + d * rd) / spRad;\n  }\n  return d;\n}\n\nvoid BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, qnBlk;\n  float dn, df, bSize;\n  bSize = 10. * dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk)) / bSize;\n  }\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  return vec3 (0.5, 0.5, 0.7) * (0.3 + 0.1 * rd.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float dstObj, dstExtSph, h;\n  dstExtSph = SphHit (ro, rd);\n  col = BgCol (ro, rd);\n  if (dstExtSph < dstFar) {\n#if TUBE\n    dstObj = PolyHit (ro, rd);\n#else   \n    dstObj = BallHit (ro, rd);\n#endif\n    if (dstObj < dstFar) {\n#if TUBE\n      h = float (idChain) / float (nChain);\n#else   \n      h = mod (float (idBall / lenChain) / float (nChain), 1.);\n#endif\n      col = HsvToRgb (vec3 (h, 1., 0.8)) * (0.3 + 0.7 * max (dot (vnObj, ltDir), 0.)) +\n         0.2 * pow (max (dot (normalize (ltDir - rd), vnObj), 0.), 16.);\n    }\n    col += 0.05 + 0.05 * max (dot (vnSph, ltDir), 0.) +\n       0.2 * pow (max (dot (normalize (ltDir - rd), vnSph), 0.), 32.);\n    rd = reflect (rd, vnSph);\n    ro += dstExtSph * rd;\n    BlkHit (ro, rd);\n    qBlk = step (0.1, mod (8. * qBlk + 0.1/2., 1.));\n    col = mix (col, BgCol (ro, rd) * (0.7 + 0.3 * qBlk.x * qBlk.y), pow (1. - abs (dot (rd, vnSph)), 3.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 rd, ro;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 200.;\n  spRad = Loadv4 (2 * nBall).y;\n  az = 0.25 * pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 4.5));\n  ro = vuMat * vec3 (0., 0., -5. * spRad);\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nmat3 DirToRMatT (vec3 vd, vec3 vu)\n{\n  vec3 vc;\n  vc = normalize (cross (vu, vd));\n  return mat3 (vc, cross (vd, vc), vd);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) *\n     6. - 3.) - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Polymer Chains 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\n\nconst int nChain = 12, lenChain = 30, nBall = nChain * lenChain;\nfloat spRad;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 rmN, rmN1, rmN2, dr, dr1, dr2, am;\n  float fOvlap, fBend, rSep, c11, c22, c12, cd, c, dt;\n  int inChain, ic, k1, k2;\n  fOvlap = 50.;\n  fBend = 100.;\n  rm = Loadv4 (2 * mId).xyz;\n  vm = Loadv4 (2 * mId + 1).xyz;\n  am = vec3 (0.);\n  inChain =  mId / lenChain;\n  for (int n = 0; n < nBall; n ++) {\n    if (n != mId) {\n      rmN = Loadv4 (2 * n).xyz;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || (n == mId + 1 || n == mId - 1) && n / lenChain == inChain)\n         am += fOvlap * (1. - rSep) * normalize (dr);\n    }\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = 0; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (2 * k1).xyz;\n    rmN2 = Loadv4 (2 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 e;\n  float mIdf, r, a, h;\n  mIdf = float (mId);\n  r = 0.7 * spRad;\n  h = -0.95 * (mIdf - 0.5 * float (nBall)) / (2. * pi * r);\n  a = 2. * pi * mod (0.9 * mIdf / (2. * pi * r), 1.);\n  rm = vec3 (r * cos (a), h, r * sin (a));\n  vm = 0.5 * normalize (vec3 (Hashff (mIdf), Hashff (mIdf), Hashff (mIdf)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 rm, vm;\n  vec2 iFrag;\n  float nbEdge, nStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 1) discard;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.001);\n  if (iFrame <= 5) {\n    doInit = true;\n    nStep = 0.;\n    spRad = 1.3 * nbEdge + 1.;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (2 * nBall);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n  }\n  if (pxId < 2 * nBall) {\n    mId = pxId / 2;\n    if (doInit) Init (mId, rm, vm);\n    else Step (mId, rm, vm);\n    if      (pxId == 2 * mId) stDat = vec4 (rm, 0.);\n    else if (pxId == 2 * mId + 1) stDat = vec4 (vm, 0.);\n  } else stDat = vec4 (nStep, spRad, 0., 0.);\n  fragColor = stDat;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Polymer Chains 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\n\nconst int nChain = 12, lenChain = 30, nBall = nChain * lenChain;\nfloat spRad;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 rmN, rmN1, rmN2, dr, dr1, dr2, am;\n  float fOvlap, fBend, rSep, c11, c22, c12, cd, c, dt;\n  int inChain, ic, k1, k2;\n  fOvlap = 50.;\n  fBend = 100.;\n  rm = Loadv4 (2 * mId).xyz;\n  vm = Loadv4 (2 * mId + 1).xyz;\n  am = vec3 (0.);\n  inChain =  mId / lenChain;\n  for (int n = 0; n < nBall; n ++) {\n    if (n != mId) {\n      rmN = Loadv4 (2 * n).xyz;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || (n == mId + 1 || n == mId - 1) && n / lenChain == inChain)\n         am += fOvlap * (1. - rSep) * normalize (dr);\n    }\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = 0; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (2 * k1).xyz;\n    rmN2 = Loadv4 (2 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 e;\n  float mIdf, r, a, h;\n  mIdf = float (mId);\n  r = 0.7 * spRad;\n  h = -0.95 * (mIdf - 0.5 * float (nBall)) / (2. * pi * r);\n  a = 2. * pi * mod (0.9 * mIdf / (2. * pi * r), 1.);\n  rm = vec3 (r * cos (a), h, r * sin (a));\n  vm = 0.5 * normalize (vec3 (Hashff (mIdf), Hashff (mIdf), Hashff (mIdf)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 rm, vm;\n  vec2 iFrag;\n  float nbEdge, nStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 1) discard;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.001);\n  if (iFrame <= 5) {\n    doInit = true;\n    nStep = 0.;\n    spRad = 1.3 * nbEdge + 1.;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (2 * nBall);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n  }\n  if (pxId < 2 * nBall) {\n    mId = pxId / 2;\n    if (doInit) Init (mId, rm, vm);\n    else Step (mId, rm, vm);\n    if      (pxId == 2 * mId) stDat = vec4 (rm, 0.);\n    else if (pxId == 2 * mId + 1) stDat = vec4 (vm, 0.);\n  } else stDat = vec4 (nStep, spRad, 0., 0.);\n  fragColor = stDat;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Polymer Chains 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\n\nconst int nChain = 12, lenChain = 30, nBall = nChain * lenChain;\nfloat spRad;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 rmN, rmN1, rmN2, dr, dr1, dr2, am;\n  float fOvlap, fBend, rSep, c11, c22, c12, cd, c, dt;\n  int inChain, ic, k1, k2;\n  fOvlap = 50.;\n  fBend = 100.;\n  rm = Loadv4 (2 * mId).xyz;\n  vm = Loadv4 (2 * mId + 1).xyz;\n  am = vec3 (0.);\n  inChain =  mId / lenChain;\n  for (int n = 0; n < nBall; n ++) {\n    if (n != mId) {\n      rmN = Loadv4 (2 * n).xyz;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || (n == mId + 1 || n == mId - 1) && n / lenChain == inChain)\n         am += fOvlap * (1. - rSep) * normalize (dr);\n    }\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = 0; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (2 * k1).xyz;\n    rmN2 = Loadv4 (2 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 e;\n  float mIdf, r, a, h;\n  mIdf = float (mId);\n  r = 0.7 * spRad;\n  h = -0.95 * (mIdf - 0.5 * float (nBall)) / (2. * pi * r);\n  a = 2. * pi * mod (0.9 * mIdf / (2. * pi * r), 1.);\n  rm = vec3 (r * cos (a), h, r * sin (a));\n  vm = 0.5 * normalize (vec3 (Hashff (mIdf), Hashff (mIdf), Hashff (mIdf)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 rm, vm;\n  vec2 iFrag;\n  float nbEdge, nStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + 1) discard;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.001);\n  if (iFrame <= 5) {\n    doInit = true;\n    nStep = 0.;\n    spRad = 1.3 * nbEdge + 1.;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (2 * nBall);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    ++ nStep;\n  }\n  if (pxId < 2 * nBall) {\n    mId = pxId / 2;\n    if (doInit) Init (mId, rm, vm);\n    else Step (mId, rm, vm);\n    if      (pxId == 2 * mId) stDat = vec4 (rm, 0.);\n    else if (pxId == 2 * mId + 1) stDat = vec4 (vm, 0.);\n  } else stDat = vec4 (nStep, spRad, 0., 0.);\n  fragColor = stDat;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}