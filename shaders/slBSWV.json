{
    "Shader": {
        "info": {
            "date": "1628622832",
            "description": "Shows one possible way to blend materials when using exponential-smooth-blend to merge SDF primitives together.",
            "flags": 0,
            "hasliked": 0,
            "id": "slBSWV",
            "likes": 65,
            "name": "Color blending exp-smooth-min",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "smooth",
                "smin",
                "smoothmin",
                "exponential"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1945
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Shows one possible way to blend materials when using\n// exponential-smooth-blend to merge SDF primitives together.\n\n\n// https://iquilezles.org/articles/smin\nvec2 smin( in float a, in float b, in float k )\n{\n    float f1 = exp2( -k*a );\n    float f2 = exp2( -k*b );\n    return vec2(-log2(f1+f2)/k,f2);\n}\n\n// iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p)-b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    // background color\n    vec3 col = vec3( 0.1+0.05*mod(floor(p.x*4.0)+floor(p.y*4.0),2.0) );\n\n    // compute SDF and its color\n    float dmin = 1e20;\n    vec4  dcol = vec4(0.0,0.0,0.0,0.0);\n    for( int i=0; i<10; i++ ) // 10 boxes\n    {\n        float h = float(i);\n        \n        // new box position and color\n        vec2 ce = vec2(1.5,1.0)*cos(0.1*iTime*vec2(1.3+0.1*h,1.7+(7.0-h)*h*0.3)+h*vec2(11.1,28.7)+vec2(0.0,2.0));\n        vec3 co = 0.5 + 0.5*cos(h*1.0+vec3(0.0,2.0,4.0)); co = co*co;\n        \n        // distance to box\n        float dis = sdBox(p-ce,vec2(0.4,0.2));\n\n        // smoothly blend SDFs\n        vec2 db = smin( dmin, dis, 10.0 );\n        dmin = db.x;\n\n        // smoothly blend colors\n        float w = db.y;\n        dcol += vec4(co*w,w);\n    }\n    // resolve color\n    dcol.xyz /= dcol.w;\n    \n    // draw SDF on top\n    col = mix( col, dcol.xyz, 1.0-smoothstep(0.0,0.01,dmin) );\n    \n    // gamma\n    col = sqrt(col);\n    \n    // output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}