{
    "Shader": {
        "info": {
            "date": "1610370007",
            "description": "simple AI that upscale images",
            "flags": 0,
            "hasliked": 0,
            "id": "tdGBWD",
            "likes": 7,
            "name": "texture upscaler",
            "published": 3,
            "tags": [
                "upscale"
            ],
            "usePreview": 1,
            "username": "Ric3cir121",
            "viewed": 545
        },
        "renderpass": [
            {
                "code": "#define smoothstep(a,b,c) mix(a,b,((sin(clamp(c,0.,1.)*2.-1.)+1.)/2.))\n\nvec4 rog(vec2 u){\n    vec4 _00 = texture(iChannel0,((floor(u+vec2(-1,-1))+0.5)/iChannelResolution[0].xy));\n    vec4 _01 = texture(iChannel0,((floor(u+vec2(-1, 0))+0.5)/iChannelResolution[0].xy));\n    vec4 _02 = texture(iChannel0,((floor(u+vec2(-1, 1))+0.5)/iChannelResolution[0].xy));\n    vec4 _10 = texture(iChannel0,((floor(u+vec2( 0,-1))+0.5)/iChannelResolution[0].xy));\n    vec4 _11 = texture(iChannel0,((floor(u+vec2( 0, 0))+0.5)/iChannelResolution[0].xy));\n    vec4 _12 = texture(iChannel0,((floor(u+vec2( 0, 1))+0.5)/iChannelResolution[0].xy));\n    vec4 _20 = texture(iChannel0,((floor(u+vec2( 1,-1))+0.5)/iChannelResolution[0].xy));\n    vec4 _21 = texture(iChannel0,((floor(u+vec2( 1, 0))+0.5)/iChannelResolution[0].xy));\n    vec4 _22 = texture(iChannel0,((floor(u+vec2( 1, 1))+0.5)/iChannelResolution[0].xy));\n    \n    vec2 fr = fract(u);\n    \n    vec4 real = texture(iChannel0,(u/iChannelResolution[0].xy));\n    \n    vec4 l00 = abs(real-_00);float d00 = (l00.x+l00.y+l00.z)/3.;\n    vec4 l01 = abs(real-_01);float d01 = (l01.x+l01.y+l01.z)/3.;\n    vec4 l02 = abs(real-_02);float d02 = (l02.x+l02.y+l02.z)/3.;\n    vec4 l10 = abs(real-_10);float d10 = (l10.x+l10.y+l10.z)/3.;\n    vec4 l11 = abs(real-_11);float d11 = (l11.x+l11.y+l11.z)/3.;\n    vec4 l12 = abs(real-_12);float d12 = (l12.x+l12.y+l12.z)/3.;\n    vec4 l20 = abs(real-_20);float d20 = (l20.x+l20.y+l20.z)/3.;\n    vec4 l21 = abs(real-_21);float d21 = (l21.x+l21.y+l21.z)/3.;\n    vec4 l22 = abs(real-_22);float d22 = (l22.x+l22.y+l22.z)/3.;\n\n    float fmin = min(d00,min(d01,min(d02,min(d10,min(d11,min(d12,min(d20,min(d21,d22))))))));\n    \n    vec4 color = d00==fmin?_00:(d01==fmin?_01:(d02==fmin?_02:(\n    \t\t\td10==fmin?_10:(d11==fmin?_11:(d12==fmin?_12:(\n                d20==fmin?_20:(d21==fmin?_21:_22)))))));\n    \n    return color;\n}\n\nvec4 lins(sampler2D h,vec2 c){\n    return texelFetch(h,ivec2(c),0);\n}\n\nvec4 linr(sampler2D h,vec2 c){\n    c-=.5;\n    vec4 _0 = smoothstep(texelFetch(iChannel0,ivec2(c),0),texelFetch(iChannel0,ivec2(c)+ivec2(1,0),0),fract(c.x));\n    vec4 _1 = smoothstep(texelFetch(iChannel0,ivec2(c)+ivec2(0,1),0),texelFetch(iChannel0,ivec2(c)+ivec2(1,1),0),fract(c.x));\n    \n    return smoothstep(_0,_1,fract(c.y));\n}\n\nvec4 neural(vec2 u){\n    float s = 5.;\n    vec2 c = u/s;\n    vec4 _n = texelFetch(iChannel0,ivec2(c),0);\n    vec4 _c = linr(iChannel0,c);\n    vec4 _u = lins(iChannel0,c+vec2(0,1));\n    vec4 _d = lins(iChannel0,c+vec2(0,-1));\n    vec4 _l = lins(iChannel0,c+vec2(-1,0));\n    vec4 _r = lins(iChannel0,c+vec2(1,0));\n    \n    vec4 _o = (_u+_d+_l+_r)/4.;\n    vec4 dif = abs(_n-_o);\n    //return dif;\n    \n    float mn = .1;\n    return mix(_c,rog(c),clamp(( dif-mn)*10000.,0.,1.));\n}\n\nvoid mn(out vec4 o,vec2 u){\n    vec2 uv = u/iResolution.xy;\n\n\n    o = neural(u);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = vec4(0.);\n    vec4 Fr = vec4(0.);\n\tint a = 1;\n    for(int i1 = 0;i1<a;i1++){\n    \tfor(int i2 = 0;i2<a;i2++){\n    \t\tmn(Fr,fragCoord+(vec2(float(i1),float(i2))/(float(a))));\n            fragColor += Fr;\n    \t}\n    }\n    fragColor /= float(a*a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}