{
    "Shader": {
        "info": {
            "date": "1627577453",
            "description": "digital number grid",
            "flags": 0,
            "hasliked": 0,
            "id": "NtjXW1",
            "likes": 2,
            "name": "digital number grid",
            "published": 3,
            "tags": [
                "distance2d"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Slice(p,a) dot(p,vec2(sin(a),cos(a)))\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n// distance 2d digital alarm font\nconst float cDefault[7] = float[](0.,0.,0.,0.,0.,0.,0.);\nconst float c1[7] = float[](10.,0.,0.,10.,10.,10.,10.);\nconst float c2[7] = float[](0.,0.,10.,0.,0.,10.,0.);\nconst float c3[7] = float[](0.,0.,0.,0.,10.,10.,0.);\nconst float c4[7] = float[](10.,0.,0.,10.,10.,0.,0.);\nconst float c5[7] = float[](0.,10.,0.,0.,10.,0.,0.);\nconst float c6[7] = float[](0.,10.,0.,0.,0.,0.,0.);\nconst float c7[7] = float[](0.,0.,0.,10.,10.,10.,10.);\nconst float c8[7] = float[](0.,0.,0.,0.,0.,0.,0.);\nconst float c9[7] = float[](0.,0.,0.,0.,10.,0.,0.);\nconst float c0[7] = float[](0.,0.,0.,0.,0.,0.,10.);\nconst float cTBase[7] = float[](0.,10.,10.,10.,10.,10.,10.);\nconst float cKBase[7] = float[](10.,10.,0.,10.,0.,0.,0.);\nconst float cYBase[7] = float[](10.,0.,0.,0.,10.,0.,0.);\n\nconst vec2 digitVPos = vec2(0.08,0.073);\nconst vec2 digitHPos = vec2(0.0,0.15);\n\nfloat dDigitV(vec2 p){\n    float d = B(p,vec2(0.02,0.1));\n    p = abs(p);\n    p-=vec2(0.02,0.05);\n    d = max(Slice(p,44.775),d);\n    return d;\n}\n\nfloat dDigitH(vec2 p){\n    p*=Rot(radians(90.0));\n    float d = dDigitV(p);\n    return d;\n}\n\nfloat dDigitBase(vec2 p, float[7] char){\n    vec2 prevP = p;\n    float d = 10.0;\n    float d2 = 10.0;\n    // 1\n    d = (char[0])+dDigitH(p-digitHPos);\n    // 2\n    d2 = (char[1])+dDigitV(p-digitVPos);\n    d = min(d,d2);\n    // 3\n    d2 = (char[2])+dDigitV(p+vec2(-digitVPos.x,digitVPos.y));\n    d = min(d,d2);\n    // 4\n    d2 = (char[3])+dDigitH(p+digitHPos);\n    d = min(d,d2);\n    // 5\n    d2 = (char[4])+dDigitV(p+digitVPos);\n    d = min(d,d2);\n    // 6\n    d2 = (char[5])+dDigitV(p+vec2(digitVPos.x,-digitVPos.y));\n    d = min(d,d2);\n    // 7\n    d2 = (char[6])+dDigitH(p);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat dDot(vec2 p){\n    p.y = abs(p.y);\n    p.y-=0.073;\n    float d = B(p,vec2(0.02));\n    return d;\n}\n\nfloat dDigitNumber(vec2 p, int num){\n    float d = 100.0;\n    if(num == 0){\n        d = dDigitBase(p,c0);\n    } else if(num == 1){\n        d = dDigitBase(p,c1);\n    } else if(num == 2){\n        d = dDigitBase(p,c2);\n    } else if(num == 3){\n        d = dDigitBase(p,c3);\n    } else if(num == 4){\n        d = dDigitBase(p,c4);\n    } else if(num == 5){\n        d = dDigitBase(p,c5);\n    } else if(num == 6){\n        d = dDigitBase(p,c6);\n    } else if(num == 7){\n        d = dDigitBase(p,c7);\n    } else if(num == 8){\n        d = dDigitBase(p,c8);\n    } else if(num == 9){\n        d = dDigitBase(p,c9);\n    }\n    \n    return d;\n}\n\nfloat dDrawNumbersBg(vec2 p){\n    float d = dDigitBase(p+vec2(0.375,0.0),cDefault);\n    float d2 = dDigitBase(p+vec2(0.15,0.0),cDefault);\n    d = min(d,d2);\n    d2 = dDigitBase(p+vec2(-0.15,0.0),cDefault);\n    d = min(d,d2);\n    d2 = dDigitBase(p+vec2(-0.375,0.0),cDefault);\n    d = min(d,d2);\n    return d;\n}\n\nfloat dDrawNumbers(vec2 p){\n    float t = iTime;\n    float d = dDot(p+vec2(0.0,0.0));\n    \n    float d2 = dDigitNumber(p+vec2(0.375,0.0),0);\n    d = min(d,d2);\n    d2 = dDigitNumber(p+vec2(0.15,0.0),int(mod(t*0.5,10.0)));\n    d = min(d,d2);\n    d2 = dDigitNumber(p+vec2(-0.15,0.0),int(mod(t,10.0)));\n    d = min(d,d2);\n    d2 = dDigitNumber(p+vec2(-0.375,0.0),int(mod(t*5.0,10.0)));\n    d = min(d,d2);\n    return d;\n}\n\nvec3 scene(vec2 p, vec3 col){\n    p*=2.5;\n    p.x+=iTime*0.5;\n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n\n    float n = Hash21(id);\n    float d = 100.0;\n    if(n<0.6){\n        d = B(gv,vec2(0.48));\n    }\n    \n    col = mix(col,0.5 + 0.5*cos(p.xyx-n+vec3(0,2.+n,3.-n)),S(d,0.0));\n    \n    if(d != 100.0){\n        gv*=1.5;\n        float n2 = (n+n+n+n+n+n)*3.0;\n        if(n<0.3){\n            gv.x+=((n>=0.1)?1.:-1.0)*iTime*0.3+n2;\n            gv.x = mod(gv.x,1.1)-0.55;\n            float y = (n>=0.1)?0.5:-0.5;\n            float d2 = dDrawNumbersBg(gv-vec2(0.0,y));\n            col = mix(col,vec3(0.3),S(max(d,d2),0.0));\n            d2 = dDrawNumbers(gv-vec2(0.0,y));\n            col = mix(col,vec3(1.0),S(max(d,d2),0.0));\n        }\n        \n        if(n>=0.3){\n            float y = (n<=0.4)?-0.5:0.5;\n            gv*=Rot(radians(90.0));\n            gv.x+=((n<=0.4)?1.:-1.0)*iTime*0.4+n2;\n            gv.x = mod(gv.x,1.1)-0.55;\n            float d2 = dDrawNumbersBg(gv-vec2(0.0,y));\n            col = mix(col,vec3(0.3),S(max(d,d2),0.0));\n            d2 = dDrawNumbers(gv-vec2(0.0,y));\n            col = mix(col,vec3(1.0),S(max(d,d2),0.0));\n        }\n    }\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    uv*=1.8;\n    \n    vec3 col = vec3(0.0);\n    \n    col = scene(uv,col);\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}