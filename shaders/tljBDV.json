{
    "Shader": {
        "info": {
            "date": "1599929967",
            "description": "Very simple shader I wrote for my game \"CHOCH\" for js13k game jam, used there as background",
            "flags": 0,
            "hasliked": 0,
            "id": "tljBDV",
            "likes": 5,
            "name": "Flowing triangles",
            "published": 3,
            "tags": [
                "grid",
                "triangle"
            ],
            "usePreview": 0,
            "username": "kostik1337",
            "viewed": 422
        },
        "renderpass": [
            {
                "code": "#define t iTime\n\nfloat hash(float x) {return fract(sin(x)*31345.23);}\n\nfloat smoothNoise(float x) {\n  return mix(hash(floor(x)), hash(floor(x)+1.), smoothstep(0.,1.,fract(x)));\n}\n\nfloat render(vec2 uv, vec2 offset) {\n    uv *= mat2(sqrt(3.)/2.,-.5,0.,1.);\n    float c = 0.;\n    const float I = 3.;\n    for(float i=0.;i<I;++i) {\n        float f = 20. + 17.*i;\n        // sort of triangle grid\n        vec2 uv1 = uv*f + (t*2. + offset) / f;\n        vec2 cuv = floor(uv1);\n        vec2 luv = fract(uv1);\n        if(luv.x+luv.y > 1.) {\n            luv = 1.-luv;\n            cuv += .5;\n        }\n\n        // colorize triangle at bounds based on cell position\n        float bound = .05;\n        c += max(\n            step(luv.x, bound),\n            max(\n                step(luv.y, bound),\n                step(1.-luv.x-luv.y, bound)\n            ))\n            * smoothstep(.4, .95, smoothNoise(dot(cuv, vec2(.6,.5)) + .4*t + 3.*i)) * mix(1., .3, i/(I-1.));\n    }\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 offset = iMouse.xy/2.;\n\n    float aberr = 0.003;\n\tvec3 col = vec3(\n    \trender(uv-vec2(aberr, 0.), offset),\n        render(uv, offset),\n        render(uv+vec2(aberr, 0.), offset)\n    )*.3;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}