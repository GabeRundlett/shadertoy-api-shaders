{
    "Shader": {
        "info": {
            "date": "1726027249",
            "description": "Polished up an interesting effect I stumbled upon and which has been sitting around for much too long.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntd3Dl",
            "likes": 12,
            "name": "Zippy Virtual Particles",
            "published": 3,
            "tags": [
                "particles",
                "optimization",
                "quantum",
                "accident"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "float f(in vec2 p) {\n    return snoise(vec3(p * 6.0, iTime));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 1.0 / iResolution.y;\n    fragColor = vec4(0.0);\n\n    vec2 p0 = uv;\n    vec2 p = p0;\n    float h = unit;\n    for (int i = 0; i < 10; i++) {\n        float rt = f(p + vec2(h, 0.0));\n        float up = f(p + vec2(0.0, h));\n        vec2 df = vec2(rt, up) - f(p);\n\n        float dxx = f(p + vec2(2.0 * h, 0.0)) - rt - df.x;\n        float dyy = f(p + vec2(0.0, 2.0 * h)) - up - df.y;\n        float dxy = f(p + h) - rt - df.y;\n\n        //p -= inverse(mat2(dxx, dxy, dxy, dyy)) * df * h;\n        p -= mat2(dyy, -dxy, -dxy, dxx) * df / (dxx * dyy - dxy * dxy) * h;\n    }\n\n    float field = f(uv);\n    fragColor.rgb += mix(vec3(0.0, 0.0, 0.25), vec3(1.5, 0.0, 1.0), field * field) * 0.25;\n\n    vec3 particleColor = mix(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.5, 0.0), smoothstep(0.35, 0.65, 1.0 - f(p)));\n    float particleRadius = mix(0.006, 0.01, 0.5 + 0.5 * sin(f(p) * 10.0));\n    fragColor.rgb = mix(fragColor.rgb, particleColor, smoothstep(unit, 0.0, length(uv - p) - particleRadius));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nfloat Hash31(in vec3 p) {\n\tp = fract(p * 0.1031);\n    p += dot(p, p.zyx + 31.32);\n    return fract((p.x + p.y) * p.z);\n}\n\n#define S(x) (3.0 - 2.0 * x) * x * x\nfloat snoise(in vec3 p) {\n    // This thing really is magic\n    // It basically maps 3D block noise to 2D gradient noise :D\n    mat3 magic = mat3(\n        -0.9681345173, -0.8471475146,  0.7656788891,\n        -0.8750307932,  0.9372844435, -0.8471475146,\n         0.0000000000, -0.8750307932, -0.9681345173\n    );\n\n    float value = 0.0;\n    float noiseScale = 1.0;\n    float totalScale = 0.0;\n    mat3 transform = mat3(1.0);\n\n    for (int octave=0; octave < 3; octave++) {\n        vec3 tp = transform * p;\n        vec3 cell = floor(tp);\n        vec3 local = fract(tp);\n        local = S(local);\n\n        float ldb = Hash31(cell);                       // Left, Down, Back\n        float rdb = Hash31(cell + vec3(1.0, 0.0, 0.0)); // Right, Down, Back\n        float ldf = Hash31(cell + vec3(0.0, 0.0, 1.0)); // Left, Down, Front\n        float rdf = Hash31(cell + vec3(1.0, 0.0, 1.0)); // Right, Down, Front\n        float lub = Hash31(cell + vec3(0.0, 1.0, 0.0)); // Left, Up, Back\n        float rub = Hash31(cell + vec3(1.0, 1.0, 0.0)); // Right, Up, Back\n        float luf = Hash31(cell + vec3(0.0, 1.0, 1.0)); // Left, Up, Front\n        float ruf = Hash31(cell + 1.0);                 // Right, Up, Front\n\n        value += mix(mix(mix(ldb, rdb, local.x),\n                         mix(ldf, rdf, local.x),\n                         local.z),\n\n                     mix(mix(lub, rub, local.x),\n                         mix(luf, ruf, local.x),\n                         local.z),\n\n                     local.y) * noiseScale;\n\n        totalScale += noiseScale;\n        transform = magic * transform;\n        noiseScale *= 0.5;\n    }\n\n    return value / totalScale;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}