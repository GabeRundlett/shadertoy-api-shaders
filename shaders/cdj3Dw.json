{
    "Shader": {
        "info": {
            "date": "1667755785",
            "description": "Trying to figure out how people do that jitter effect that gives a kind of a DOF . Picking apart @leon's shader from the Inercia Shader Royal",
            "flags": 0,
            "hasliked": 0,
            "id": "cdj3Dw",
            "likes": 16,
            "name": "Whats Up Jitter?",
            "published": 3,
            "tags": [
                "raymarching",
                "domain",
                "jitter"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n        \n    Whats Up Jitter?\n    Trying to figure out how people do that jitter effect that gives a kind of \n    a DOF effect. Picking apart @leon's shader from the Inercia Shader Royal \n    https://www.shadertoy.com/view/md2GDD\n    \n    11/6/22 | byt3_m3chanic\n\n*/\n\n\n#define R     iResolution\n#define T     iTime\n#define M     iMouse\n#define PI    3.14159265358\n#define PI2   6.28318530718\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a){ return fract(sin(dot(a,vec2(22.34,35.34)))*483434.);}\n\n//@iq\nfloat opx(in float d, in float z, in float h){\n    vec2 w = vec2( d, abs(z) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\nfloat glow=0.,t12=0.;\n\nconst float size = 5.25;\nconst float hlf =size/2.;\n\nvoid sep(inout vec3 p){\n\tif (p.x + p.y<0.) p.xy = -p.yx;\n\tif (p.x + p.z<0.) p.xz = -p.zx;\n\tif (p.y + p.z<0.) p.zy = -p.yz;\n}\n\nvec2 map(vec3 p, float sq) {\n    vec2 res = vec2(1e5,0.);\n    p.y+=3.;\n    p.z-=t12;\n    vec3 o=p;\n    o.y+= .5*sin(T*.21+o.z*.15)+.7*cos(T*.12+o.x*.3);\n    \n    vec2 id = floor((p.xz+hlf)/size);\n    p.xz=mod(p.xz+hlf,size)-hlf;\n\n    float hs = 2.50*sin(id.x+id.y*2.+T*.3);\n    float ht = 2.25*sin(id.x*2.+id.y*1.3+T*1.3);\n    \n    float ss = hash21(id);\n    p.y+= ht;\n    vec3 q=p;\n    \n    float pis=hs*PI2;\n    p.zy*=rot(pis+(T*.04));\n    p.xy*=rot(pis-(T*.05));\n    \n    if(ss>.25) sep(p);\n    \n    float fs = hash21(id+vec2(22.));\n    if(fs>.5) { p=abs(p.zyx); } else if(fs>.75) p=abs(p.yzx);\n    \n    float r = length(p.xy)-1.45;\n    float d = opx(abs(r)-.1,abs(p.z)-.25,.05)/1.25;\n    \n    if(d<res.x) res=vec2(d,1.);\n\n    float d2 = length(q)-(1.15-ss);  \n    \n    if(d2<res.x) res=vec2(d2,2.);\n    \n    float ms=hash21(id+floor(T*1.5));\n    if(sq==1.&&ms>.825) glow+=.002/(.0025+d2*d2);\n\n    return res;\n}\n\nvec3 normal(vec3 p, float t){\n    vec2 e=vec2(t*1e-3,0.);\n    float d = map(p,0.).x;\n    vec3 n = d-vec3(\n        map(p-e.xyy,0.).x,\n        map(p-e.yxy,0.).x,\n        map(p-e.yyx,0.).x\n    );\n    return normalize(n);\n}\n\nvec3 shade(vec3 p, vec3 n, vec3 ro, float m) {\n    vec3 l = normalize(vec3(-2,15,-10)-p);\n    float diff = clamp(dot(n,l),.1,1.);\n\n    float shdw = 1.;\n    for( float t=.01;t<18.; ) {\n        float h = map(p + l*t,0.).x;\n        if( h<1e-4 ) { shdw = 0.; break; }\n        shdw = min(shdw, 18.*h/t);\n        t += h;\n        if( shdw<1e-4 || t>18. ) break;\n    }\n    diff = mix(diff,diff*shdw,.85);\n\n    float spec = .15 * pow(max(dot(normalize(p-ro),reflect(l,n)),0.),24.);\n        \n    vec3 h = vec3(0);\n    if(m==1.) h = vec3(.05);\n    if(m==2.) h = vec3(.75);\n        \n    return h * diff+spec;   \n}\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n\n    t12=(T*14.);\n\tvec2 uv = (2.*F.xy - R.xy)/max(R.x,R.y);\n    vec2 vv=uv;\n\n\tvec3 C = vec3(0);\n\n    vec3 ro = vec3(0,-1.,12),rd = normalize(vec3(uv, -1.0));\n\n    const float dof = 0.001;\n    const float dofdist = 1.0/10.;\n    \n    vec2 off=vec2(-.05,.05);\n    ro.xy+=off*dof*smoothstep(0.,1.,length(uv))*.01;\n    \n    mat2 rx =rot(-.60-.46*sin(T*.4));\n    mat2 ry =rot(-.178*sin(T*.2)+pow(1.95,cos(T*.2)*PI));\n    \n    ro.zy*=rx;ro.xz*=ry;\n    rd.zy*=rx;rd.xz*=ry;\n   \n    float fa=0.,sglow=0.;\n    for(int k=0;k<2;k++){\n    \n        vec3 p = ro;\n        float d = 0., m = 0.;\n        vec3 RC = vec3(0);\n        \n        for(int i=0;i<80;i++){\n            \n            //modified jitter/dof \n            //inspiration @Nusan https://www.shadertoy.com/view/3sXyRN\n            if(mod(float(i),2.)<1.){\n                off= texture(iChannel1,F.xy/1024.).rg*2.-1.;\n                vec2 focus = off*dof;\n                ro.xy+= focus*(d)*.01;\n                rd.xy+= focus*(d*d)*dofdist*.012;\n            }\n            \n            p=ro+d*rd;\n\n            vec2 ray = map(p,1.);\n            m=ray.y;\n            d+= ray.x*.55;\n            if(ray.x<d*1e-4||d>50.)break;\n        }\n\n        if(k==0) {fa=d;sglow=glow;}\n        \n        if(d<40.) {\n            vec3 n = normal(p,d);\n            RC += shade(p, n, ro, m);\n            ro = p+n*.001;\n            rd = reflect(rd,n);\n        }\n\n        if(k>0) RC *=.3;\n        C += RC;\n\n    }\n    \n    C=mix(C,vec3(.1),1.-exp(-.00003*fa*fa*fa));\n    C=mix(C,vec3(sglow,sglow*.5,sglow*.1),clamp(sglow,0.,.9));\n    C=clamp(C,vec3(0),vec3(1));\n\tfragColor = vec4(pow(C,vec3(.4545)),1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}