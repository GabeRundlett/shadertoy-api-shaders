{
    "Shader": {
        "info": {
            "date": "1524729370",
            "description": "Inside a changing fractal (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "4stfWr",
            "likes": 12,
            "name": "Fractal Ring",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 563
        },
        "renderpass": [
            {
                "code": "// \"Fractal Ring\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Inside a changing fractal (similar to \"Light and Motion\", mouseable)\n\n#define AA  0   // optional antialiasing\n\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv3 (vec3 p);\n\nvec3 ltPos[2], ltAx;\nfloat tCur, dstFar, rRad, frctAng;\nconst float pi = 3.14159;\nconst float itMax = 18.;\n\nfloat ObjDf (vec3 p) \n{\n  vec4 p4;\n  float s, r;\n  p.xy = Rot2D (p.xy, 0.5 * pi);\n  r = length (p.yz);\n  p.yz = vec2 (2. * pi * rRad * ((r > 0.) ? atan (p.z, - p.y) / (2. * pi) : 0.), r - rRad);\n  p4 = vec4 (p, 1.);\n  for (float j = 0.; j < itMax; j ++) {\n    p4.xyz = abs (p4.xyz) - vec3 (-0.02, 1.98, -0.02);\n    p4 = (2. / clamp (dot (p4.xyz, p4.xyz), 0.4, 1.)) * p4 - vec4 (0.5, 1., 0.4, 0.);\n    p4.xz = Rot2D (p4.xz, frctAng);\n  }\n  return max ((length (p4.xyz) - 0.02) / p4.w, 0.01 - length (p.xz));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, h, s, sLo, sHi, eps;\n  eps = 0.0003;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 120; j ++) {\n    h = ObjDf (ro + s * rd);\n    if (h < eps || s > dstFar) {\n      sHi = s;\n      break;\n    }\n    sLo = s;\n    s += h;\n  }\n  if (h < eps) {\n    for (int j = 0; j < 4; j ++) {\n      s = 0.5 * (sLo + sHi);\n      h = step (eps, ObjDf (ro + s * rd));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.05, 3. * h);\n    if (sh < 0.05 || d > dMax) break;\n  }\n  return 0.2 + 0.8 * sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (float j = 1.; j < 4.; j ++) {\n    d = 0.03 * j;\n    ao += max (0., d - ObjDf (ro + d * rd));\n  }\n  return clamp (1. - 5. * ao, 0., 1.);\n}\n\nvec4 ObjCol (vec3 p)\n{\n  float pp, ppMin, cn, s, r;\n  p.xy = Rot2D (p.xy, 0.5 * pi);\n  r = length (p.yz);\n  p.yz = vec2 (2. * pi * rRad * ((r > 0.) ? atan (p.z, - p.y) / (2. * pi) : 0.), r - rRad);\n  cn = 0.;\n  ppMin = 1.;\n  for (float j = 0.; j < itMax; j ++) {\n    p = abs (p) - vec3 (-0.02, 1.98, -0.02);\n    pp = clamp (dot (p, p), 0.4, 1.);\n    if (pp < ppMin) {\n      cn = j;\n      ppMin = pp;\n    }\n    p = (2. / pp) * p - vec3 (0.5, 1., 0.4);\n    p.xz = Rot2D (p.xz, frctAng);\n  }\n  return vec4 (HsvToRgb (vec3 (mod (0.6 + 1.7 * cn / itMax, 1.), 0.8, 1.)), 0.5);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{ \n  vec4 col4;\n  vec3 col, vn, ltDir, rds;\n  float dstObj, atten, ao, sh, dfSum, spSum;\n  frctAng = 0.5 * pi + 2. * pi * mod (0.005 * tCur, 1.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    dfSum = 0.;\n    spSum = 0.;\n    for (int k = 0; k < 2; k ++) {\n      ltDir = ltPos[k] - ro;\n      atten = 1. / (1. + 0.3 * dot (ltDir, ltDir));\n      ltDir = normalize (ltDir);\n      atten *= smoothstep (0.3, 0.4, dot (ltAx, - ltDir));\n      dfSum += atten * max (dot (vn, ltDir), 0.);\n      spSum += atten * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n    }\n    ltDir = normalize (0.5 * (ltPos[0] + ltPos[1]) - ro);\n    sh = ObjSShadow (ro, ltDir, max (dstObj - 0.2, 0.));\n    ao = ObjAO (ro, vn);\n    col4 = ObjCol (ro);\n    col = (0.1 + 0.4 * sh * dfSum) * col4.rgb + col4.a * sh * spSum * vec3 (1.);\n    col *= 0.2 + 0.8 * ObjAO (ro, vn);\n    col += vec3 (0.2) * max (dot (- rd, vn), 0.) *\n       (1. - smoothstep (0., 0.02, abs (dstObj - mod (0.1 * tCur, 2.))));\n  } else {\n    if (rd.y < 0.) {\n      rd.y = - rd.y;\n      rd.xz = vec2 (- rd.z, rd.x);\n    }\n    rds = floor (2000. * rd);\n    rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n    for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n    col = vec3 (0.02, 0.02, 0.05) + 0.8 * vec3 (1., 1., 0.7) * min (1., 0.5e-3 *\n       pow (min (6., length (rds)), 5.));\n  }\n  return clamp (pow (col, vec3 (0.8)), 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col, vd, ori, ca, sa;\n  vec2 canvas, uv;\n  float el, az, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  }\n  rRad = 9.9 / (2. * pi);\n  a = 0.01 * 2. * pi * tCur;\n  ro = rRad * vec3 (cos (a), 0., sin (a));\n  ori = vec3 (el, az - a, 0.2 * pi * sin (3. * a));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.);\n  ltPos[0] = ro + vuMat * vec3 (-0.3, 0.3, -0.2);\n  ltPos[1] = ro + vuMat * vec3 (0.3, 0.3, -0.2);\n  ltAx = vuMat * vec3 (0., 0., 1.);\n  dstFar = 10.;\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), 3.));\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}