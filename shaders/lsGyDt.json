{
    "Shader": {
        "info": {
            "date": "1523699190",
            "description": "Alcatraz / The explorer 4k Intro\nby Jochen \"Virgill\" Feldkötter\n4kb executable: http://www.pouet.net/prod.php?which=75741",
            "flags": 96,
            "hasliked": 0,
            "id": "lsGyDt",
            "likes": 73,
            "name": "The explorer",
            "published": 3,
            "tags": [
                "4k",
                "volumetric",
                "fractals",
                "raymarchin",
                "4kintro",
                "conelight"
            ],
            "usePreview": 1,
            "username": "Virgill",
            "viewed": 4080
        },
        "renderpass": [
            {
                "code": "// ***********************************************************\n// Alcatraz / The explorer 4k Intro\n// by Jochen \"Virgill\" Feldkötter\n//\n// 4kb executable: http://www.pouet.net/prod.php?which=75741\n//\n// ***********************************************************\n\nconst float GA =2.399; \n\nmat2 rot = mat2(cos(GA),sin(GA),-sin(GA),cos(GA));\n\n\n// \tsimplyfied version of Dave Hoskins blur\nvec3 dof(sampler2D tex,vec2 uv,float rad)\n{\n\tvec3 acc=vec3(0);\n    vec2 pixel=vec2(.002*iResolution.y/iResolution.x,.002),angle=vec2(0,rad);;\n    rad=1.;\n\tfor (int j=0;j<80;j++)\n    {  \n        rad += 1./rad;\n\t    angle*=rot;\n        vec4 col=texture(tex,uv+pixel*(rad-1.)*angle);\n\t\tacc+=col.xyz;\n\t}\n\treturn acc/80.;\n}\n\n//-------------------------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n\n\n    \n\tfragColor=vec4(dof(iChannel0,uv,texture(iChannel0,uv).w),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 14409,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/4klang-the-explorer"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ***********************************************************\n// Alcatraz / The explorer 4k Intro\n// by Jochen \"Virgill\" Feldkötter\n//\n// 4kb executable: http://www.pouet.net/prod.php?which=75741\n//\n// ***********************************************************\n\n\n// use mouse for light direction\n//#define mouse    \n\n\nint scene = 0;\n// 0 = empty\t\t\t\tcolor:\t\t\tparticles: off \n// 1 = falling objects\t\tcolor:red\t\tparticles: off \n// 2 = wobble floor\t\t\tcolor:red\t\tparticles: on\n// 3 = room with stone\t\tcolor:blue\t\tparticles: on\n// 4 = kleinian fractal\t\tcolor:red\t\tparticles: on\t\n// 5 = wtf scene\t\t \tcolor:blue\t\tparticles: off\n\nint scene_idx,lightscene_idx;\t// init   // empty                   // falling objects        // wobble floor           // room with stone        // kleinian fractal       // wtf scene \nfloat lightscenesx[37] = float[37] (2.3,  2.3,0.0,0.0,6.9,4.6,2.3,   0.0,3.0,0.0,4.0,7.5,3.4,  8.0,8.5,5.0,5.0,5.0,5.0,  0.0,8.5,5.0,5.0,8.0,8.5,  8.5,8.5,4.2,5.0,4.0,4.3,  6.9,8.0,2.0,2.5,3.6,4.6);\nfloat lightscenesy[37] = float[37] (0.0,  0.0,2.3,0.0,0.0,2.3,0.0,   2.0,1.0,1.0,3.0,0.0,0.5,  0.0,0.0,3.0,3.0,4.0,3.0,  0.8,1.0,5.0,3.5,0.0,1.0,  8.0,7.5,1.5,3.5,1.5,2.5,  0.0,0.0,0.0,0.0,0.0,0.0);\nfloat lightduration = 4.; \nfloat sceneduration = 24.; \nvec2  lightscene,lightscene_old,lightscene_interpolated;\n\n\n\n\nvec3 lightpos;\nvec3 lightdir = vec3(0,0,1);\nfloat scatter,test;\n\n\n\n// noise\nfloat rnd(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.98,78.23))) * 43758.54);\n}\n\n// box sdf\nfloat sdBox(vec3 p,vec3 b)\n{\n  vec3 d = abs(p)-b;\n  return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\n// 3D noise function (shane)\nfloat noise(vec3 p)\n{\n\tvec3 ip = floor(p);\n    p -= ip; \n    vec3 s = vec3(7,157,113);\n    vec4 h = vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p = p*p*(3.-2.*p); \n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\n// cone sdf\nfloat sdCone( vec3 p, vec2 c )\n{\n    return dot(c,vec2(length(p.xy),p.z));\n}\n\n\n// rotation\nvoid pR(inout vec2 p,float a) \n{\n\tp = cos(a)*p+sin(a)*vec2(p.y,-p.x);\n}\n\n\n// wtf fractal (shane)\nconst float md = .6;\nconst float fl = 1.;\nfloat mapy(vec3 p) \n{\n\tp.x = mod(p.x+1.,2.) - 1.0;\n\tvec4 q = vec4(p,1.);\n\tvec4 o = q;\n\t\nfor(int i = 0; i < 10; i++) {\n\t\tpR(q.yz,1.55);\n\t\tq.xyz = clamp(q.xyz, -fl, fl)*2. - q.xyz;\n\t\tfloat r = dot(q.xyz, q.xyz);\n\t\tq *= clamp(max(md/r, .6), 0.0, 1.);\n\t\tq = (3./md)*q-o;\n\n\t}\n\n\treturn (length(q.xyz))/q.w-0.005;\n}\n///////////////////////////////////////////////////////////////////////////////////////\n\nfloat map(vec3 p, int vol) \n{\n    float d = 1.;\n\tvec3 r = p;\n \n// sphere ship\n    float ship = length(r-lightpos)-0.1; \n\n// cone light\n\tvec3 schein=(r-lightpos);\n#ifdef mouse\n    pR(schein.zx,iMouse.x*-0.03);\n    pR(schein.yz,iMouse.y*0.03);\n#else\n    pR(schein.zx,-lightscene_interpolated.y);\n    pR(schein.yz,lightscene_interpolated.x); \n#endif    \n\tfloat s= sdCone(schein,normalize(vec2(1,1)))/length(schein*schein)+0.2*noise(10.*p+2.*sin(.2*iTime))+0.1*noise(p*23.+sin(0.3*iTime))+0.2*rnd(p.xy);\n\tscatter += max(-s,0.)*0.07;\n     \n\n// scene: falling objects\n\tif (scene==1)\n\t{\n        vec3 c= vec3(1.5);\n        p.y+=.4*iTime;\n        vec3 q = mod(p,c)-.5*c;\n\n        d=max(length(q)-0.1,p.z-3.);\n        d-=.2*noise(6.*p)+0.005*noise(80.*p);\n        d=min(d,p.z+4.);\n    } \n    \n// scene: wobble floor\n    if (scene==2)\n    {\n    \td=p.y-0.01*noise(50.*p)+0.4*noise(2.*p+0.2*iTime)+0.09*noise(7.*p);\n    }\n   \n// scene: room with stone\n\tif (scene==3)\n    {\n\t\td = p.y-log(1.*pow(length(p.xz),1.)+0.2);\n\t\td = min(d,length(p)-0.4-0.04*noise(p*70.)-0.5*noise(p*4.+iTime)-0.02*noise(p*114.+iTime));\n\t\td +=0.05*noise(p*10.)-0.009*noise(p*-40.)+noise(p*2.);;\n\t}    \n    \n// scene: kleinian fractal\n    if (scene==4)\n    {\n\t\tvec4 q = vec4(p,1.);\n\t\tq*=.5;\n        q.x +=.5;\n\t\tq.z+=1.;\n\t\tfor(int i=0;i<8;i++) \n    \t{\n\t\t\tq.xyz=-1.+2.*fract(.5+.5*q.xyz);\n\t\t\tq=1.3*q/max(dot(q.xyz,q.xyz),.1);\n\t\t}\n\t\td=max(0.9*abs(q.y)/q.w,length(p)-3.5)-0.002*noise(50.*p); // with bounding circle\n \t\ttest =1.-1./(q.w);//\thighlight fractal area\n    }\n    \n     \n// scene: wtf\n\tif (scene==5)\n\t{\n        p.z+=3.5;\n        p.y-=0.1*(iTime-120.);\n        p.z-=0.1*(iTime-120.);\n            d = .5*mapy(p);\n    }   \n\n    return min(ship,d);\n}\n\n\n\n//***************************************************************************************************\n// normal calculation\n//***************************************************************************************************\n\nvec3 calcNormal(vec3 pos)\n{\n    float eps = 0.002, d = map(pos,0);\n    if (scene==4) eps = 0.2;\n    if (scene==5) eps = 0.02;\n\treturn normalize(vec3(map(pos+vec3(eps,0,0),0)-d,map(pos+vec3(0,eps,0),0)-d,map(pos+vec3(0,0,eps),0)-d));\n}\n\n\n\n// ray marching loop (added noise to make it noisy)\nfloat castRay(in vec3 ro, in vec3 rd, in float maxt, in vec2 co) {\n    float precis = 0.001;\n    float h = precis * 2.0;\n    float t = -3.5+rnd(co+0.01*iTime)*7.;\n    for(int i = 0; i < 200; i++) \n    {\n    \tif(abs(h) < precis || t > maxt) continue;\n        h = map(ro+rd*t,1);\n        t += 0.25*h;\n    }\n    return t;\n    \n\n}\n\n\n\n//***************************************************************************************************\n// Main\n//***************************************************************************************************\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\n// scene handling   \n   \tlightscene_idx \t= int(floor((iTime+.8)/lightduration));\n    scene \t\t\t= int(floor(iTime/sceneduration));\n   \tlightscene \t\t= vec2(lightscenesx[lightscene_idx+1],lightscenesy[lightscene_idx+1]);     \n   \tlightscene_old\t= vec2(lightscenesx[lightscene_idx],lightscenesy[lightscene_idx]);     \n\tlightscene_interpolated = mix(lightscene,lightscene_old, exp(-64.*pow(fract((iTime+.8)/lightduration),4.)))*0.7;\n\n\t// camera setup (iq)   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    float theta = iTime * 3.141592 * 0.20;\n    float x = 5.0 * cos(theta*0.5);\n    float z = 5.0 * sin(theta*0.5);\n    \n    vec3 ro = vec3(0.5*x, 4.0, 5.3);\n    if (scene==5||scene==0) ro = vec3(0.0, 8.0, -0.0001);  \n    \n\n    \n    \n    vec3 ta = vec3(0.0, 0.25, 0.0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(0.0, 1.0, 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    vec3 rd = normalize(p.x * cu + p.y * cv + 7.5 * cw);\n\n    float ypos=0.8;\n    if (scene==1||scene==3||scene==5) ypos=0.;\n    \n    lightpos = vec3(ypos,0.7 + 0.2 * sin(theta*2.0),1.-0.2*sin(0.2*iTime)); \n    if (scene==5||scene==0) lightpos = vec3(0,2,0); \n    \n    \n#ifdef mouse\n    pR(lightdir.yz,iMouse.y*-0.03);\n    pR(lightdir.zx,iMouse.x*0.03);\n#else\n    pR(lightdir.yz,-lightscene_interpolated.x);\n    pR(lightdir.zx,lightscene_interpolated.y);\n#endif    \n    \n// feedbak noise (with buffer a)\n   \tuv.x-=0.005*noise(uv.yxx*32.-iTime)-0.0025;\n   \tuv.y+=0.005*noise(uv.yxx*32.+iTime)-0.0025; \n    vec3 bufa= texture(iChannel0,uv).xyz;\n    \n\n // render\n    vec3 col = vec3(0);\n   \tfloat t= castRay(ro, rd, 15.0,uv);    \n\tfloat depth = clamp(t/5.-1.3,0.,1.);\n\tif (t>15.) t=-1000000.;\n    vec3 pos = ro + rd * t;\n    vec3 nor = calcNormal(pos);\n    \n    \n// colors    \n    vec3 basecol = vec3(2./1., 1./4., 1./16.);\n    if (scene==3||scene==5) basecol = vec3(1./16., 1./4., 2./1.);\n    \n    \n// treat light as conelight\n    float ncol=0.;\n    float cone=1.;\n    vec3 L = normalize(lightpos - pos);\t\t\t\t// vector to light position (from surcface)\n    float NdotL = dot(nor,L);\n    float conedot = dot(lightdir, normalize(L));\n    float conecos = 0.7071;\n    float cold = NdotL; \t\t\t\t\t\t\t\t\t// diffuse\n    float cols = pow(clamp(dot(nor,normalize(L+normalize(ro - pos))), 0.0, 1.0), 60.0);\t// specular  \n\n    if (NdotL > 0.0 && conedot > conecos)  \t\t\t// 45 degrees, corresponding to cone param (1,1)\n    {        \n         cone =  pow((conedot-conecos)/(1.-conecos),4.);// pow for cone light distribution\n         ncol = (cold + cols) * cone;\t\t\t\t\t// combine  \n\t\t col+=clamp((test),0.,1.)*scatter*cone*vec3(0.2,0.05,0.);\n    }    \n  \n\n\n    \n\n// particles   \n    float d;\n    for (int i; i<36; i++)\n    {\n    \tfloat fi =float(i);\n    \tvec2 pos = vec2(.5+.2*sin(fi+.5*iTime+ cos(.01*iTime*fi))+ .2*sin(-fi),  \n                        .5+.2*cos(fi+.2*iTime+ sin(.02*iTime*fi)))+.2*cos( fi);\n    \td += clamp(1.-(length(350.*(.8+.5*sin(fi*iTime))*(pos - uv))),0.,1.);\n   \t}\n    if (scene==2||scene==3||scene==4) col+=d*ncol*(basecol+vec3(0,.5,0))*2.;\n\n    \n    \n// color for light (+ feedback noise)\n\tcol+=0.3*scatter*vec3(1.,0.8,.6)+0.6*bufa;\n// color for material\n    col+= 0.6*basecol*exp(6.*(-1.+ncol)); \n\t\n\n    \n  float fade =min (3.*abs(sin((3.1415*iTime/sceneduration))),1.); \n if (iTime>140.) fade=0.;\n\tfragColor = vec4(col*fade,depth);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}