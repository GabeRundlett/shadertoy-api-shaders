{
    "Shader": {
        "info": {
            "date": "1467729801",
            "description": "this is a translated version of vgs's \"[Tutorial] Blobby\".",
            "flags": 0,
            "hasliked": 0,
            "id": "lldGzn",
            "likes": 2,
            "name": "[Tutorial & Trans] Blobby",
            "published": 3,
            "tags": [
                "raymarching",
                "constantic",
                "translated"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 631
        },
        "renderpass": [
            {
                "code": "// http://demosceneacademy.wordpress.com/\n// live coding: https://www.youtube.com/watch?v=RGmgHfbU0hU\n\n// Tutorial bÃ¡sico sobre raymarching.\n// por Vinicius Graciano Santos (vgs).\n\n// Constants.\n#define STEPS 64\n#define EPS 0.01\n#define FAR 10.0\n#define PI 3.14159265359\n\n// Distance Function.\nfloat map(vec3 p) {\n    float v = 2.5*iTime;\n    float r = 1.35 + 0.15*cos(10.0*p.y + v) + 0.15*cos(10.0*p.x + v);\n    return length(p) - r;\n}\n\n// The Gradient (number) in the distance function.\nvec3 grad(vec3 p) {\n    vec2 q = vec2(0.0, EPS);\n    return vec3(map(p + q.yxx) - map(p - q.yxx),\n                map(p + q.xyx) - map(p - q.xyx),\n                map(p + q.xxy) - map(p - q.xxy));\n}\n\nvec3 shade(vec3 ro, vec3 rd, float t) {\n\tvec3 n = normalize(grad(ro + t*rd));\n    return vec3(0.3, 0.5, 0.7)*pow(1.0-dot(-rd, n), 1.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Prepare the ratio.\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 2.5); // something? of the radius.\n    vec3 rd = normalize(vec3(uv, -1.0)); // direction of the radius.\n    \n    // Loop of the raymarcher.\n    float t = 0.0, d = EPS;\n    for (int i = 0; i < STEPS; ++i) {\n        d = map(ro + t*rd);\n        if (d < EPS || t > FAR) break;\n        t += d;\n    }\n\n    // Shading.\n    vec3 col = d < EPS ? shade(ro, rd, t) : mix(vec3(0.0), vec3(0.3, 0.5, 0.7), 2.0-length(uv)) ;\n    \n    // proccessor. \n    col = smoothstep(0.0, 1.0, col);\n    col = pow(col, vec3(0.45));\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}