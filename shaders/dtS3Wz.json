{
    "Shader": {
        "info": {
            "date": "1673122219",
            "description": "Just some swirling electric charges and the resulting potential field on a logarithmic-ish scale. Now with mouse controls randomizing everything - hold left and move around until you find something you like.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtS3Wz",
            "likes": 3,
            "name": "Potentially random",
            "published": 3,
            "tags": [
                "potential",
                "electric",
                "charge"
            ],
            "usePreview": 0,
            "username": "zommuter",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "// CC-BY-NC-SA\n//#define N_CHARGES (1.+(iMouse.x/iResolution.x-0.5))*137.\n#define SEED -3.14159 - (2.3+iMouse.x*iMouse.y) / iResolution.x / iResolution.y\n#define SPEED 0.75\n\nfloat N21(vec2 p, float offset) {  // shamelessly taken from https://www.shadertoy.com/view/lscczl, CC-BY-NC-SA\n\tvec3 a = fract(vec3(p.xyx) * (vec3(213.897, 653.453, 253.098) + offset));\n    a += dot(a, a.yzx + 79.76);\n    return fract((a.x + a.y) * a.z);\n}\n\n\nvec2 N22(vec2 p) {  // forgot the definition in the video, but I guess this one's okay\n    return vec2(N21(p, 32.), N21(p, -314.159));\n}\n\nvec2 N12(float seed) {\n    return N22(vec2(seed));\n}\n\nfloat N11(float seed) {  // yes, yes, I know, horribly inefficient, sue me\n    return N21(vec2(seed, 1./seed), seed);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float N_CHARGES = 5.+N21(vec2(iMouse.x+1., iMouse.y+1.), SEED-1251.23)*137.;\n    vec2 uv_ar = fragCoord/iResolution.y;  // aspect ratio 1:1, but x > 1 possible\n    float aspect = iResolution.x/iResolution.y;\n    \n    float potential = 0.;    \n    for(float n_charge=0.; n_charge < N_CHARGES; n_charge++) {\n        float x_omega_charge = N11(n_charge + SEED + N_CHARGES + 1./137.);\n        float y_omega_charge = N11(n_charge - SEED + N_CHARGES - 1./137.);\n        float t = SPEED * iTime + N11(SEED-1.);\n        vec2 uv_charge = 0.5*vec2(sin(x_omega_charge*t), cos(y_omega_charge*t))+.5;\n        float charge = (N11(n_charge + SEED - N_CHARGES)-.5)*1e2;\n        float r = max(.0005 * abs(charge), length(uv_ar - uv_charge*vec2(aspect, 1.)));\n        potential += charge/r;\n    }\n\n    // TODO tidy up this mess...\n    float l2 = log(1. + abs(potential)/100.)/4.;\n    float l1 = -sign(potential) * l2;\n    float l3 = sign(potential) * l2;\n    float l4 = length(uv_ar-.5)/2.;\n    float r1 = N11(SEED-272154.);\n    float r2 = N11(SEED-1231.);\n    float r3 = N11(SEED+12454.);\n    float r4 = N11(SEED+r3-r1*r2);\n    float r = (r1*l1 + r2*l2 + r3*l3 + r4*l4)/(r1+r2+r3+r4);\n    float g1 = N11(SEED-r1);\n    float g2 = N11(SEED-r2);\n    float g3 = N11(SEED+r3);\n    float g4 = N11(SEED+g3-g1*g2);\n    float g = (g1*l1 + g2*l2 + g3*l3 + g4*l4)/(g1+g2+g3+g4);\n    float b1 = N11(SEED-g1);\n    float b2 = N11(SEED-g3);\n    float b3 = N11(SEED+g2);\n    float b4 = N11(SEED+b3-b1*b2);\n    float b = (b1*l1 + b2*l2 + b3*l3 + b4*l4)/(b1+b2+b3+b4);\n    vec3 col = vec3(r, g, b)*2.;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}