{
    "Shader": {
        "info": {
            "date": "1606164801",
            "description": "Generalization of my shader \"Distance to Triangle\" to handle arbitrary polygons.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtBDX",
            "likes": 4,
            "name": "Distance to Polygon",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "polygon"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "/*\nMy shader \"Distance to Triangle\" (https://www.shadertoy.com/view/wdtfWX)\ngeneralized to handle arbitrary polygons.\n\nIn case you are interested, the tutorial about raycasting that I followed\nis here: http://philliplemons.com/posts/ray-casting-algorithm\n*/\n\nconst vec3 outsideColor = vec3(1.0, 0.0, 0.0);\nconst vec3 insideColor = vec3(0.0, 0.0, 1.0);\nconst vec3 boundColor = vec3(0.0, 1.0, 0.0);\n\nconst int POLY_VERTS = 6;\n\nfloat sdPolygon(in vec2 p, in vec2[POLY_VERTS] poly) {\n    float d = 1000000.0;\n    float s = 1.0;\n\n    for (int v=1; v < poly.length() + 1; v++) {\n        vec2 a = poly[v - 1], b = poly[int(mod(float(v), float(poly.length())))];\n\n        vec2 pa = p - a, ba = b - a;\n        vec2 e = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n        d = min(d, dot(e, e));\n\n        if (a.y > b.y) {\n            vec2 tmp = a;\n            a = b; b = tmp;\n        }\n\n        if (p.y == a.y || p.y == b.y) {\n            p.y += 0.001;\n        }\n\n        if (p.y >= b.y || p.y <= a.y || p.x >= max(a.x, b.x)) {\n            continue;\n        }\n\n        if (p.x < min(a.x, b.x)) {\n            s = -s;\n            continue;\n        }\n\n        float em = 1000000.0;\n        float edx = b.x - a.x;\n        if (!(edx == 0.0)) {\n            em = (b.y - a.y) / edx;\n        }\n\n        float pm = 1000000.0;\n        float pdx = p.x - a.x;\n        if (!(pdx == 0.0)) {\n            pm = (p.y - a.y) / pdx;\n        }\n\n        if (pm >= em) {\n            s = -s;\n        }\n    }\n\n    return sqrt(d) * s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float t1 = 0.5 * iTime, t2 = 1.25 * iTime, t3 = 1.5 * iTime;\n    float c1 = 0.4 * cos(t1), s1 = 0.4 * sin(t1);\n    float c2 = 0.4 * cos(t2), s2 = 0.4 * sin(t2);\n    float c3 = 0.4 * cos(t3), s3 = 0.4 * sin(t3);\n\n    vec2[] polygon = vec2[POLY_VERTS](vec2(c1, s2),\n                                      vec2(-s3, c1),\n                                      vec2(c2, s3),\n                                      vec2(s3, -c3),\n                                      vec2(c3, -c2),\n                                      vec2(s1, c2));\n\n    float d = sdPolygon(uv, polygon);\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}