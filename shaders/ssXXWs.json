{
    "Shader": {
        "info": {
            "date": "1619451127",
            "description": "Testing glow.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssXXWs",
            "likes": 3,
            "name": "大龙猫 - Test Glow",
            "published": 3,
            "tags": [
                "glow"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\nfloat g=0.;\nfloat box(vec3 p,vec3 b){\n  vec3 q = abs(p)-b;\n  return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);\n}\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat octa(vec3 p,float s){\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.577;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n  }\nfloat sdf(vec3 p){\n      \n       p.xz *=rot(fGlobalTime*.2);\n       p.xy *=rot(fGlobalTime*.2);\n   vec3 pp=p;\n       float d = octa(p,3.5);\n \n   \n      p = abs(p)-1.5;\n      for(float i=0.;i<=4.;i++){\n          p= abs(p)-.9;\n          p.xy*=1.2;\n      }\n      p.xz*=rot(-.785);\n      p.xy*=rot(-.785);\n      float e = octa(p,1.5+sin(fGlobalTime+length(pp.y)*2.)*.5+.5)/1.5;\n      d = max(-e,d);\n      p = abs(p)-0.95;\n      p.xz*=rot(-.785);\n      p.xy*=rot(-.785);\n      e = .5*octa(p,1.25);\n      d = max(-e,d);\n       \n      g += .7*(.02/(.3+sqrt(d)*d+sin(p.z*10.+fGlobalTime*10.)*.2));\n     \n    return d/3.5 ;\n}\nvec2 nv=vec2(-.0001,.0001);\n#define q(s) s*sdf(p+s)\nvec3 norm(vec3 p){\n  return normalize(\n      q(nv.xyy) + \n      q(nv.yxy) + \n      q(nv.yyx) + \n      q(nv.xxx) \n  );\n}\nvec3 pal(float t){\n  return .5+.5*cos(6.28*(1.*t+vec3(0.,.4,.6)));\n  }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n\n\tvec3 col = vec3(.1);\n  vec3 ro=vec3(0.,0.,-10.),rd=normalize(vec3(uv,1.)),rp=ro;\n  vec3 light=vec3(1.,2.,-3.);\n  for(float i=0.;i<=69.;i++){\n         float d = sdf(rp);\n         \n         if(d<=0.01) {\n            vec3 n = norm(rp);\n            col=vec3(1.)*max(0.,dot(normalize(light),n));\n            break;\n           \n         }\n         rp+=rd*d;\n \n  }\n  col += g*.5*vec3(.5,.1,.7);     \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}