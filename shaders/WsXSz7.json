{
    "Shader": {
        "info": {
            "date": "1550803148",
            "description": "points and transformation",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXSz7",
            "likes": 2,
            "name": "UTS BOS",
            "published": 3,
            "tags": [
                "triangle"
            ],
            "usePreview": 0,
            "username": "winstonrenatan",
            "viewed": 453
        },
        "renderpass": [
            {
                "code": "// Return distance to line segment\nfloat seg_dist(vec2 ba, vec2 pa) {\n    float u = clamp(dot(ba,pa)/dot(ba,ba), 0.0, 1.0);\n    return length(pa-u*ba);\n}\n\n\n// Return distances to points in polygonal\nfloat poly_dist(vec2 uv, vec2 p[5], float scl, int shape) {    \n    float d_quad = 1e5;    \n    for (int i=0; i<shape; ++i) {\n        d_quad = min(d_quad, length(uv-p[i])/scl-3.0);\n        d_quad = min(d_quad, seg_dist(p[i+1]-p[i], uv-p[i])/scl-0.5);\n    }\n    \n    return d_quad;\n}\n\n// Return grid distances\nvec2 grid_fract(vec2 x, vec2 i) {\n    return (fract(x/i+0.5)-0.5)*i;\n}\n\n// For mixing colors\nvec3 color_dist_mix(vec3 bg, vec3 fg, float dist, float alpha) {\n    float d = smoothstep(0.0, 0.75, dist); \n    return mix(bg, fg, alpha*(1.0-d));\n}\n\n// sample of Construction a 3x3 matrix for a 2D axis-aligned scale\nmat3 scale(vec2 s) {\n    return mat3(s.x, 0.0, 0.0,\n                0.0, s.y, 0.0,\n                0.0, 0.0, 1.0);\n}\n\n// Move the position adding according to trans value\nvec2 translate(vec2 pos, vec2 trans) {\n    return pos + trans;\n}\n\n// Rotate function according to degree given\nmat2 rotate(float deg) {\n    return mat2(sin(deg), -cos(deg),\n                cos(deg), sin(deg));\n}\n\n// Reflect to y=0 or in x-axis\nvec2 reflectY(vec2 s) {\n    mat2 refY = mat2(1.0, 0.0,\n         \t\t\t 0.0, -1.0);\n    return refY*s;\n}\n\n\n// Do the things now.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Set up coordinate frame (4 units tall window, square pixels).\n\tvec2 uv = (fragCoord.xy + 0.5 - 0.5*iResolution.xy);\n    float scl = 12.0 / iResolution.y;\n    uv *= scl;\n    \n    \n    // Construct a points for shaping\n    vec2 p[5], Hp[5];\n\n    p[0] = vec2(-0.0, -6.0);\n    p[1] = vec2(0.0, 6.0);\n    p[2] = p[0];    \n    \n    float x_line = poly_dist(uv, p, scl, 2);\n\n    p[0] = vec2(-10.0, 0.);\n    p[1] = vec2(10.0, 0.);\n    p[2] = p[0];    \n    \n    float y_line = poly_dist(uv, p, scl, 2);\n    \n    \n    /* START DRAWING HERE  */\n        \n    // Problem          \n    p[0] = vec2(1.0, 2.0);\n    p[1] = vec2(1.0, 5.0);\n    p[2] = vec2(4.0, 5.0);\n    p[3] = p[0];\n    \n    float d_triangle = poly_dist(uv, p, scl, 3);\n    \n    //No.1: Process Translate to (0, 0)\n    vec2 trans = vec2(-1.0, -2.0);\n    p[0]=translate(p[0], trans);\n    p[1]=translate(p[1], trans);\n    p[2]=translate(p[2], trans);\n    p[3]=p[0];\n    d_triangle = poly_dist(uv, p, scl, 3);\n    \n    //No.2: Process Rotate (-90)\n    p[0]=rotate(-90.0)*p[0];\n    p[1]=rotate(-90.0)*p[1];\n    p[2]=rotate(-90.0)*p[2];\n    p[3]=p[0];\n    d_triangle = poly_dist(uv, p, scl, 3);    \n    \n\t//No.3: Process Reflect by y=0\n    p[0]=reflectY(p[0]);\n    p[1]=reflectY(p[1]);\n    p[2]=reflectY(p[2]);\n    p[3]=p[0];\n    d_triangle = poly_dist(uv, p, scl, 3);\n    \n    //No.4: Process Return to original\n    trans = vec2(1.0, 2.0);\n    p[0]=translate(p[0], trans);\n    p[1]=translate(p[1], trans);\n    p[2]=translate(p[2], trans);\n    p[3]=p[0];\n    d_triangle = poly_dist(uv, p, scl, 3);\n    \n    \n    /* ENDING  */\n    \n    \n    // Grid\n    vec2 grid = abs(grid_fract(uv, vec2(1.0)))/scl;\n    float d_grid = min(grid.x, grid.y);\n\n    vec3 color = vec3(1.0);\n    color = color_dist_mix(color, vec3(0.8), d_grid, 1.0);\n    color = color_dist_mix(color, vec3(1.0, 0.0, 0.0), d_triangle, 1.0);\n\n    // cartesian coordinate\n    color = color_dist_mix(color, vec3(0.0, 0.0, 0.0), x_line, 2.0);\n    color = color_dist_mix(color, vec3(0.0, 0.0, 0.0), y_line, 2.0);\n    \n\n    \n    fragColor = vec4(color, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}