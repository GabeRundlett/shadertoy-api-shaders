{
    "Shader": {
        "info": {
            "date": "1515661494",
            "description": "reflections",
            "flags": 32,
            "hasliked": 0,
            "id": "Xt2BRw",
            "likes": 8,
            "name": "reflections",
            "published": 3,
            "tags": [
                "reflections"
            ],
            "usePreview": 0,
            "username": "saidwho12",
            "viewed": 825
        },
        "renderpass": [
            {
                "code": "#define MAX_ITERATIONS 128\n#define RAY_T_MIN .01\n#define RAY_T_MAX 1.e30\n#define EPSILON .01\n#define DEPTH_MAX 3\n\n#define SPEED 1.\n#define TIME SPEED*iTime\n\nconst float PI = 3.1415927;\nconst float FOV = PI/4.;\n\n// Polynomial smooth minimum by iq\nfloat smin(in float a, in float b, in float k) \n{\n  float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n  return mix(a, b, h) - k*h*(1.0-h);\n}\n\nmat4 rotateX(in float theta) \n{\n\tfloat c = cos(theta);\n    float s = sin(theta);\n    \n    return mat4(\n    \tvec4(1, 0, 0, 0),\n        vec4(0, c, s, 0),\n        vec4(0, -s, c, 0),\n        vec4(0, 0, 0, 1)\n    );\n}\n\nmat4 rotateY(in float theta) \n{\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat4(\n        vec4(c, 0, s, 0),\n        vec4(0, 1, 0, 0),\n        vec4(-s, 0, c, 0),\n        vec4(0, 0, 0, 1)\n    );\n}\n\nfloat sdSphere(in vec3 p, in float r) \n{\n\treturn length(p)-r;\n}\n\nvec2 uvSphere(in vec3 p)\n{\n    vec2 c = p.xy/length(p);\n    return vec2(acos(c.x), acos(c.y))/PI;\n}\n\nfloat sdEllipsoid(in vec3 p, in vec3 r)\n{\n    return (length(p/r) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox(in vec3 p, in vec3 b, in float r)\n{\n  return length(max(abs(p)-b,0.))-r;\n}\n\nvec2 uvBox(in vec3 p, in vec3 b)\n{\n    return p.xz;\t\n}\n\nfloat sdCappedCylinder(in vec3 p, in vec2 h)\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-.5*c;\n    return q;\n}\n\nstruct material\n{\n\tvec3 ambiant, diffuse, specular;\n    float shininess, reflectance;\n};\n\nstruct light\n{\n\tvec3 o;\n    float power;\n};\n    \nmaterial mix_material(in material m1, in material m2, in float k)\n{\n\tmaterial m;\n    m.ambiant = mix(m1.ambiant, m2.ambiant, k);\n    m.diffuse = mix(m1.diffuse, m2.diffuse, k);\n    m.specular = mix(m1.specular, m2.specular, k);\n    m.shininess = mix(m1.shininess, m2.shininess, k);\n    m.reflectance = mix(m1.reflectance, m2.reflectance, k);\n    return m;\n}\n\nvec3 blinn_phong (vec3 L, vec3 N, vec3 V, light l, float dist, material m)\n{\n\tvec3 ambiant = m.ambiant;\n    vec3 diffuse = m.diffuse*dot(L, N);\n    vec3 H = normalize(L + V);\n    float specAngle = max(dot(N, H), 0.);\n    vec3 specular = m.specular*pow(specAngle, m.shininess);\n    float power = l.power/dist;\n    return ambiant*power + diffuse*power + specular*power;\n    \n}    \n    \nstruct point\n{\n    material m;\n    float d;\n};\n    \npoint sceneSDF(in vec3 p) \n{   \n    vec3 c = vec3(5,0,5);\n    // ellipse\n\tvec3 r1 = vec3(1,1,.75);\n    mat4 rot1 = rotateY(TIME);\n    vec3 p1 = vec3(rot1*vec4(opRep(p-vec3(0,.5,0), c),1));\n    vec2 uv1 = uvSphere(p1);\n    \n    float t1 = 7.;\n    float dir1 = .5;\n    float pos1 = mix(uv1.x, uv1.y, dir1)*t1;\n    float d1 = sdEllipsoid(p1,r1);\n    \n    // checker\n    vec3 b2 = vec3(2,.05,2);\n    float r2 = .05;\n    vec3 p2 = opRep(p-vec3(0,-1,0), c);\n    vec2 uv2 = uvBox(p2, b2);\n    float d2 = udRoundBox(p2, b2, r2);\n\n    //float d = smin(d0, sdCappedCylinder(p-vec3(0,-1,0),vec2(1.5,.15))-.05, 1.);\n    \n    float d = min(d1, d2);\n    material m;\n    if (d == d1)\n    {\n    \tvec2 uv = uv1;\n        m = mix_material(material(vec3(.4,0,0),vec3(.7,0,.1),vec3(1,0,0), 5.,.7),\n                         material(vec3(.1),vec3(.85),vec3(1), 1., .2),\n                         texture(iChannel0, uv).z);\n    }\n    else if (d == d2)\n    {\n    \tvec2 uv = uv2;\n        m = mix_material(material(vec3(0),vec3(.2),vec3(.2), 5.,.7),\n                         material(vec3(.3),vec3(.7),vec3(1), 5.,.5),\n                         texture(iChannel0, uv).w);\n    }\n    \n    /*\n    vec2 uv = mix(uv0/PI, uv1, d0);\n    vec3 col0 = mix(vec3(0), mix(col00, col01, texture(iChannel0, uv).z), d0);\n    vec3 col1 = mix(vec3(0), mix(col10, col11, texture(iChannel0, uv).w), d1);\n    \n    vec3 col = mix(col0, col1, 1.);\n    */\n    return point(m, d);\n}\n\nvec3 estimateNormal(in vec3 p)\n{\n\treturn normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)).d - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)).d,\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)).d - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)).d,\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)).d - sceneSDF(vec3(p.x, p.y, p.z - EPSILON)).d\n    ));\n}\n\nfloat trace(in vec3 o, in vec3 d)\n{\t\n    int i=0;\n    float t=RAY_T_MIN;\n    while( i<MAX_ITERATIONS && t<RAY_T_MAX ) \n    {\n        float r = sceneSDF(o+(d*t)).d;\n        if(r<RAY_T_MIN) break;\n        \n        t+=r;\n    \ti++;\n    }\n    if( i==MAX_ITERATIONS || t>RAY_T_MAX ) return RAY_T_MAX;\n    return t;\n}\n\nvec3 shade(in vec3 o, in vec3 d, in light l)\n{\n    float t = trace(o,d);\n    vec3 c = vec3(0);  \n \tif (t!=RAY_T_MAX)\n    {\n    \tvec3 col[DEPTH_MAX+1];\n    \tfloat refl[DEPTH_MAX+1];\n        \n        int depth = 1;\n    \tfor(int depth=0; depth<DEPTH_MAX+1; depth++)\n        {   \n            vec3 P = o+d*t;\n            vec3 N = estimateNormal(P);\n            vec3 L = l.o-P;\n            \n            col[depth] = vec3(0);\n            refl[depth] = 0.;\n            \n            if(t!=RAY_T_MAX)\n            {\n                material m = sceneSDF(P).m;\n                col[depth] = blinn_phong(normalize(L),N,-d,l,length(L),m);\n                refl[depth] = m.reflectance;\n            \n            \to = P+EPSILON*N;\n                d = reflect(d,N);\n                t = trace(o,d);\n            }\n        }\n        \n        for(int i=DEPTH_MAX; i>0; i--)\n        {\n        \tcol[i-1] = mix(col[i-1], col[i], refl[i-1]);\n            //col[i-1] += col[i]*refl[i-1];\n        }\n        c = col[0];\n    }\n    return c;\n}\n    \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 p = uv*2.-1.;\n\tfloat aspect = iResolution.y/iResolution.x;\n\tvec3 o = vec3(2.*sin(.5*TIME), 1.5*sin(TIME)+2., 2.*sin(1.5*TIME));\n    float w=tan(FOV);\n    float h=w*aspect;\n    \n    vec3 forward = vec3(0,0,-1);\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(forward, up));\n    \n    vec3 d = normalize(forward+p.x*w * right+p.y*h*up);\n    d = vec3(vec4(d,1)*rotateX(PI/6.));\n    \n    light l = light(vec3(0,3,0),5.);\n    \n    vec3 col = shade(o,d,l);\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float stripes(in vec2 uv, in float d, in float t)\n{\n\tfloat pos = mix(uv.x, uv.y, d)*t;\n    return floor(fract(pos)+.5);\n}\n\nfloat checker(in vec2 uv, in float d, in float t)\n{\n    float total = floor(uv.x*t*2.) + floor(uv.y*t*2.);\n    bool isEven = mod(total,2.)==0.0;\n    return (isEven)? 1.:0.;\n}\n\nfloat repeat(in vec2 uv, in float d, in float t)\n{\n\tfloat pos = mix(uv.x, uv.y, d)*t;\n    return fract(pos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 p = uv*2.-1.;\n    \n    fragColor.y = repeat(uv,.5, 7.);\n    fragColor.z = stripes(uv,.5,7.);\n    fragColor.w = checker(uv,0.,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}