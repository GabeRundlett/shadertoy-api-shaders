{
    "Shader": {
        "info": {
            "date": "1647204963",
            "description": "i really like setting color = 1, then darkening with exp(-length). super simple + looks really nice",
            "flags": 0,
            "hasliked": 0,
            "id": "NsSfWc",
            "likes": 22,
            "name": "Little Light Test",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0.1 * cos(iTime), 0.1 * sin(iTime), 2. + iTime);\n    //ro.yz *= Rot(-m.y*3.14+1.);\n   // ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nvec3 getRo2() {\n    vec3 ro = getRo();\n    \n    return ro + vec3(1.4 * thc(2.01, iTime), 0.3 * sin(0.2 * iTime),-4);//4. * vec3(cos(iTime), 0., sin(iTime));\n}\n\n\n// this is a mess but im too lazy to change it\nvec2 GetDist(vec3 p) {\n    vec3 op = p;\n    float d0 = p.y + 0.1 * cos(1.5 * p.x + iTime) + 0.6;//length(p - getRo2()) + 0.;\n    \n    op -= getRo2();\n    \n    op.xy *= Rot(2. * iTime);\n    op.zy *= Rot(1.8 * iTime);\n    op.y = abs(op.y) - 0.1;\n    float r1 = 0.1;\n    float r2 = 0.04;\n    float da = length(op.xz) - r1;\n    float db = length(vec2(da, op.y)) - r2;\n    \n    p.xz = fract(0.5 * p.xz) - 0.5;\n    p.xz *= 1. + cos(3. * p.y) + 0. * cc(2., 10. * length(p.y) - iTime);\n    float d = length(p.xz) - 0.1;\n    d *= 0.2;\n    if (d0 < d)\n        return vec2(d0, 0.);\n        \n    d = min(d0, d);\n    if (db < d)\n        return vec2(db, 1.);\n    \n    \n    return vec2(d, 2.);\n    \n   // return min(d0, d);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    vec2 dS = vec2(0, 1);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        dS = GetDist(p);\n        if (s != sign(dS.x)) { z *= 0.5; s = sign(dS.x); }\n        if(abs(dS.x)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS.x*z; \n    }\n    \n    return vec2(min(dO, MAX_DIST), dS.y);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat GetLight(vec3 p, vec3 rd) {\n    vec3 lightPos = getRo2();\n    //lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n   // float dif = clamp(dot(n, l), 0., 1.);\n    float dif = 1.;\n    float d = RayMarch(p+n*SURF_DIST*2., l, 1.).x;\n    if(d<length(lightPos-p)) dif *= 0.92;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n \n    float d = RayMarch(ro, rd, 1.).x;\n    vec3 p = ro + rd * d;\n    \n    vec3 ro2 = getRo2();\n    \n    vec3 col = vec3(GetLight(p, rd));\n    col *= exp(-1.2 * length(ro2 - p));\n      \n    vec3 e = vec3(1);\n    col *= pal(2. * exp(-0.08 * length(ro2-p)),e,e,e,0.55 * vec3(0,1,2)/3.);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}