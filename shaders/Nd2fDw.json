{
    "Shader": {
        "info": {
            "date": "1646428203",
            "description": "sonriendo",
            "flags": 0,
            "hasliked": 0,
            "id": "Nd2fDw",
            "likes": 4,
            "name": "sonriendo",
            "published": 3,
            "tags": [
                "sonriendo"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(20.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nvec3 Dibuja(vec3 colorIn, vec3 colorOut, float dist)\n{   float unit = 2.0 / iResolution.y;\n    return  mix(colorOut, colorIn, smoothstep(unit, 0.0, dist));  \n}\n \n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj , S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\nvec3 DrawFigRB(vec3 pColObj, vec3 colOut, float distObj, float r )\n{  colOut = mix(colOut,pColObj ,S2( distObj-r,0.0)); return colOut; }\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\nfloat FigAlas(vec2 p)\n{   vec2 a;\n    vec2 b;\n    float dfin=999.9;\n    for(int i=0; i<5;i++)\n    {\n        a=vec2(0.0,0.5+float(i)*0.5); b=vec2(0.5+0.5*float(i),0.5+float(i)*0.5);\n        float d1a= sdSegment(p,a,b);\n        dfin=min(dfin, d1a);\n    }    \n   return dfin;\n}\n\n\nfloat HacerSonrisa(vec2 p)\n{vec2 p0=p;\n    vec2 pc13p1=vec2(.247,.540);\n    vec2 pc13p2=vec2(.272,.499);\n    vec2 pc13p3=vec2(.310,.497);\n\n    vec2 pc14p1=vec2(.314,.494);\n    vec2 pc14p2=vec2(.372,.510);\n    vec2 pc14p3=vec2(.378,.537);\n    \n    float d13= sdBezier(p,pc13p1,pc13p2,pc13p3);\n    float d14= sdBezier(p,pc14p1,pc14p2,pc14p3);\n    return min(d13,d14);\n}\n\nvec3 Fig001(vec2 p, vec3 col)\n{   \n    vec2 p0=rotatev2(p-vec2(0.0,0.2),radians(10.0));\n    float d1a= FigAlas(p0 );\n    float d1b= FigAlas(p0-vec2(1.0,1.0));\n    \n    \n    vec2 a , b;\n    a=vec2(0.0,-0.5); b=vec2(0.0,2.5);\n    float d3a= sdSegment(p0-vec2(0.0,0.2),a,b);\n    \n    a=vec2(1.0,-0.5); b=vec2(1.0,2.5+1.0);\n    float d3b= sdSegment(p0-vec2(0.0,0.2),a,b);\n    \n    float d2= sdCircle( p-vec2(-1.5,-1.0), 2.5 );\n    float d2a= sdCircle( p-vec2(-1.5,-1.0), 2.5 );\n    float d2b= sdOrientedBox(p-vec2(-2.0,0.5), vec2(1.0,-0.1), vec2(2.0,3.5), 5.5 );\n    \n    d2b=intersectSDF(d2b,d2a);\n    float d4a= sdCircle(p-vec2(-1.,-1.), 0.5 );\n    float d4b= sdCircle(p-vec2(-2.5,-0.5), 0.5 );\n    \n    a=vec2(-2.8,0.15); b=vec2(-0.2,-0.7);\n    float d5= sdSegment(p,a,b); //lentes\n    \n    float d6=HacerSonrisa(p*vec2(0.105,0.125)-vec2(-0.5,-0.8));\n    \n    col= DrawFigRB(vec3(0.35), col, d1b, 0.22 );\n    \n    col= DrawFigRB(vec3(0.0), col, d3b, 0.22 );\n    col= DrawFigBordeR(vec3(1.0), col, d2,0.1);\n    col= DrawFigRB(vec3(0.25), col, d2b, 0.22 ); //pelo\n    col= DrawFigRB(vec3(0.5), col, d1a, 0.22 );\n    \n    col= DrawFigRB(vec3(0.0), col, d3a, 0.22 );\n    col= DrawFigRB(vec3(0.0), col, d4a, 0.22 );\n    col= DrawFigRB(vec3(0.0), col, d4b, 0.22 );\n    col= DrawFigRB(vec3(0.0), col, d5, 0.22 );\n    col= Dibuja(vec3(0.0),col,d6 );\n    return col;\n    \n}\n\n////https://www.glslsandbox.com/e#79644.0   //Sinus fire\nvec3 sinusFire(  in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord.xy -.2*iResolution.xy )/iResolution.y;\n    float x = uv.x*5.;\n\tfloat y = uv.y*12.;\n\tfloat m = 1.-(y*9.)*(13.+sin(-iTime/4.)*.6)*.7+cos(y*1.+x*2.-iTime*9.)*cos(y*1.2-x*6.-iTime+sin(x*5.-y*.4-iTime*2.)+sin(iTime/15.-y*6.+x*6.)/3.)*98.;\n\treturn  vec3( m*.016,m*.005,m*.0012);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=7.0;\n    uv*=esc;\n   \n    vec3 col= sinusFire(fragCoord.xy );\n    \n    float t=iTime;\n    float t1=mod(t, 1.);\n    float t2=mod(t, 2.);\n    if(t1<t2)\n    col=Fig001(vec2(uv.x, uv.y)-vec2(0.0,2.0),col);\n    else\n    col=Fig001(vec2(-uv.x, uv.y)-vec2(0.0,2.0),col);\n        \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}