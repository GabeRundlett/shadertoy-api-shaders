{
    "Shader": {
        "info": {
            "date": "1648609907",
            "description": "ola -Melisa-00-2",
            "flags": 0,
            "hasliked": 0,
            "id": "flXcDB",
            "likes": 6,
            "name": "ola -Melisa-00-2",
            "published": 3,
            "tags": [
                "olamelisa002"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n// referencia\n//https://www.shadertoy.com/view/flfczs....Created by MelisaHot in 2022-03-28\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nconst mat2 m2 = mat2(1.6,-1.2,1.2, 1.6);\n\nfloat cosNoise( in vec2 p )\n{ return 0.4*( sin(p.x) + sin(p.y) );}\n\nfloat mapMar( in vec3 pos )\n{  float h = 0.0;\n    vec2 q = pos.xz*0.5;    \n    float s = 0.5;\n    for( int i=0; i<6; i++ )\n    {   h += s*cosNoise( q ); \n        q = m2*q*0.9-iTime; \n        q += vec2(2.,5.);\n        s *= 0.5 + 0.2*h;\n    }\n h *= 2.0;\n return pos.y - h;\n}\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  vec3 p0=p;\n\tp.y=p.y-5.0;\n    float m1= mapMar(p);\n    return opU2(res, vec2(m1,9.0));\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   float t = 0.1, tmax = 40.0;\n    vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n   for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }\n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 1.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = ro + rd * t;\n    vec3 V = -rd;\n    vec3 N = GetNormal(worldPos);    \n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    \n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n\n    float shadow = getSoftShadow(worldPos, normalize(lightPos));// shadows\n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient= 0.5*lightColor*clamp(0.5 + 0.5*N.y, 0.0, 1.0)*N.y;\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff       = clamp(dot(N, L), 0.0, 1.0);\n    \n    diff = pow(diff, 4.) * 2.;\n    vec3 diffuse =  lightColor * diff;\n    float shininess=4.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n  \n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.35 +back) + vec3(.7,.9,1)*specular*specular;       \n    return colOut;\n}\n\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos, float tdist)\n{  float intensity=1.0;\n     vec3 result;\n    result = lightingv3( nor, p, plight_pos,  rd,ro, colobj, tdist);\n    return result;\n}\n\nvec3 getColor(float c){\n   float r = cos((c-0.75)*PI);\n   float g = cos((c-0.55)*PI);\n   float b = cos((c-0.25)*PI);\n   return vec3(r,g,b);\n}\n\nvec3 render_sky_color(vec3 rd, vec2 frag)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    return  mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n       if (id_color<50)\n\t\t{ colobj=getColor(int( id_color));  return colobj; }\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 frag)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST) \n       {   p = (ro + rd * hit.x );  \n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result=  Getluz( p,ro,rd, nor, colobj ,light_pos1,hit.x)*light_color1;\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n    }\n    else if(hit.x>MAX_DIST)\n    col= render_sky_color(rd,frag);\n   return col;\n}\n\n//https://www.shadertoy.com/view/flfczs\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n\tvec3 cu = normalize(cross(cd, cr)); // camera up\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t=mod(iTime*2.0,360.0);\n   \n    float r = 0.25; \n   //vec2 uv=frag;\n   float v = r/(length(uv));\n   vec3 luna= getColor(0.916)*v; \n    \n    float pysol=uv.y+1.0*sin(t*0.5);\n    light_pos1= vec3(-10.0, 15.0-pysol*20.0, -25.); light_color1=luna;\n \tlight_pos2= vec3(-10.0, 20.0-pysol*10.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n   vec3 ro=vec3(0.0,2.0,-25.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   vec3 lp = vec3(0., -0.2, 4); // lookat point (aka camera target\n    rd=camera(ro, lp)*rd;\n   float py= mapMar(ro+rd*1.0);\n   ro.y+=py+2.5;\n    light_pos1+=ro;\n    light_pos2+=ro;\n    vec3 col= Render( ro,  rd,vec2(uv.x, uv.y+0.5*sin(t*0.5)));\n   luna= getColor(0.916)*v; \n   \n\tcol*=luna;\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\n#define PI 3.14159265\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(.395, .95, 1.), //8\nvec3(0.425, 0.56, 0.9), //9\nvec3(0.2, 0.5, 0.8)  //10\n);\n\nvec3 getColor(int i)\n{ if (i>-1 )  return Arrcolores[i];}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}