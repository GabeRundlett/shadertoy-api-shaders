{
    "Shader": {
        "info": {
            "date": "1584293445",
            "description": "Having 8 closest particles stored in the buffer at each point you can analytically compute a more or less accurate bokeh with any aperture without convolution. WIP",
            "flags": 32,
            "hasliked": 0,
            "id": "3dsczN",
            "likes": 15,
            "name": "Bokeh particles - 8x voronoi",
            "published": 3,
            "tags": [
                "bokeh",
                "particles"
            ],
            "usePreview": 1,
            "username": "michael0884",
            "viewed": 980
        },
        "renderpass": [
            {
                "code": "// Fork of \"Pilot wave system II\" by michael0884. https://shadertoy.com/view/3sXyz4\n// 2020-03-15 15:39:20\n\n// Fork of \"Quadruple voronoi diagram\" by michael0884. https://shadertoy.com/view/tdscRr\n// 2020-03-14 14:30:34\n\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 HDRmapping(vec3 color, float exposure)\n{\n\t// Exposure tone mapping\n    vec3 mapped = ACESFilm(color * exposure);\n    // Gamma correction \n    return pow(mapped, vec3(1.0 / 2.2));\n}\n\n\nmat3 gaussianFilter = mat3(41, 26, 7,\n                           26, 16, 4,\n                           7,  4,  1) / 273.;\n\nvec3 bloom(float scale, vec2 fragCoord){\n    float logScale = log2(scale);\n    vec3 bloom = vec3(0);\n    for(int y = -2; y <= 2; y++)\n        for(int x = -2; x <= 2; x++)\n            bloom += gaussianFilter[abs(x)][abs(y)] * textureLod(iChannel0, (fragCoord+vec2(x, y)*scale)/iResolution.xy, logScale).rgb;\n   \n    return bloom;\n}\n\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{\n    col = vec4(0.0);\n    ivec2 p = ivec2(pos);\n\tcol.xyz += pixel(ch0, pos).xyz;  \n    col.xyz += bloom(size.y*0.05, pos)*0.2; \n    col.xyz += bloom(size.y*0.01, pos)*0.2; \n    col.xyz = HDRmapping(col.xyz, 1.); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//particle buffer\n//particle buffer\n\nfloat gauss(float x, float r)\n{\n    x/=r;\n    return exp(-x*x);\n}\n\n//force scalar\nfloat F(float d)\n{\n    d /= 2.*prad;\n    return 0.;\n}\n\n//force vector\nvec2 Fv(vec2 p0, vec2 p1)\n{\n    if(!all(equal(p0,p1)))\n   \t return normalize(p1-p0)*F(distance(p1,p0));\n    else\n     return vec2(0.);\n}\n\n//get particle from array\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    if(p.x < N.x && p.y < N.y)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch1, pos);\n   \t\t\n        float id = pos.x + float(N.x)*pos.y;\n        //neighbors\n   \t\tget(ivec2(U.xy));\n      \n        vec2 F = vec2(0.,0.);\n        \n        vec4 p0 = getParticle(ids[0]);\n        for(int i = 1; i < CN; i++)\n        {\n            vec4 pi = getParticle(ids[i]);\n        \tF += Fv(U.xy, pi.xy);    \n        }\n        \n        if(iMouse.z > 0.) \n        {\n            float d = distance(iMouse.xy, U.xy);\n            F += 3.*normalize(iMouse.xy - U.xy)/(sqrt(d)+2.);\n        }\n        \n        F += 0.05*(hash21(id+3.2533*iTime) - 0.5)*length(U.zw);\n        \n        U.zw += dt*F;\n        \n        U.xy += U.zw*dt*(pow(hash11(float(ids[0])),2.));\n        \n        //border conditions\n        U.xy = modc(U.xy, size);\n \n        //this pixel value\n        if(iFrame<3)\n        {\n            U.xy = size*hash22(pos)+1.;\n\t\t\tU.zw = 12.*hash22(5.14159*pos)*(hash22(3.14159*pos) - vec2(0.5, 0.7));\n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//definitions\n#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n#define N ivec2(14,14)\n#define dt 0.2\n#define prad 1.\n#define k 0.3\n#define ff 4.\n\nint tot_n = N.x*N.y;\n\n//hash functions\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)/(b-a),0.,1.) - 1.);\n}\n\nuniform sampler2D fake;\n\n//closest particle ids\n#define CN 8\nint ids[CN];\n//particle distances\nfloat ds[CN];\n\nivec2 one2two(int a)\n{\n    return ivec2(a%tot_n, a/tot_n);\n}\n\nint two2one(ivec2 a)\n{\n    return a.x + tot_n*a.y;\n}\n\nvoid toarr(inout int b[CN], ivec2 a, int i)\n{\n    b[i] = a.x;\n    b[i+1] = a.y;\n}\n\nvoid init()\n{\n    for(int i = 0; i<CN; i++)\n    {\n        ids[i] = -1;\n        ds[i] = 1e10;\n    }\n}\n\nvoid getA(inout int b[CN], ivec2 p)\n{ \n    ivec4 a = floatBitsToInt(texel(fake, p/2));\n    toarr(b, one2two(a.x), 0);\n    toarr(b, one2two(a.y), 2);\n    toarr(b, one2two(a.z), 4);\n    toarr(b, one2two(a.w), 6);\n}\n\nvoid get(ivec2 p)\n{\n    getA(ids, p);\n}\n\nvec4 save()\n{\n    ivec4 v = ivec4(two2one(ivec2(ids[0],ids[1])),\n                    two2one(ivec2(ids[2],ids[3])),\n                    two2one(ivec2(ids[4],ids[5])),\n                    two2one(ivec2(ids[6],ids[7])));\n    return intBitsToFloat(v);\n}\n\nivec2 i2xy(int id)\n{\n    return ivec2(id%N.x, id/N.x);\n}\n\nint xy2i(ivec2 p)\n{\n    return p.x + p.y*N.x;\n}\n\nvoid swap(inout int x, inout int y)\n{\n    int b = x;\n    x = y;\n    y = b;\n}\n\nvoid swap(inout float x, inout float y)\n{\n    float b = x;\n    x = y;\n    y = b;\n}\n\nvec2 modc(vec2 x, vec2 y)\n{\n    return x - y*floor(x/y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nfloat repD(vec2 p0, vec2 p)\n{\n    return length(modc(p - p0 + size*0.5, size) - size*0.5);\n}\n\nfloat particleDistance(int id, vec2 p)\n{\n    return repD(getParticle(id).xy, p);\n}\n\nvoid insert(int id, float d, int i)\n{\n    //shift all by 1\n    for(int j = CN-1; j > i; j--)\n    {\n        ids[j] = ids[j-1];\n        ds[j] = ds[j-1];\n    }\n    \n    //insert\n    ids[i] = id; \n    ds[i] = d;\n}\n\nvoid sort(int utemp, ivec2 p)\n{\n    vec2 pos = vec2(p)+1.;\n    float dtemp = particleDistance(utemp, pos);  \n    //sorting\n    for(int i = 0; i < CN; i++)\n    {\n        if(ids[i] == utemp) return;\n        \n        if(ids[i] < 0 || ds[i] >= dtemp)\n        {\n            insert(utemp, dtemp, i);\n            return;\n        }\n    }\n}\n\nvoid upd(ivec2 p, ivec2 dx)\n{\n    int t[CN];\n    getA(t, (p + dx)%ivec2(iResolution.xy));\n    \n\tfor(int i = 0; i < CN; i++)\n    {\n   \t\tif(t[i]>=0)\n        \tsort(t[i], p);\n    }\n}\n\nvoid randupd(ivec2 p )\n{\n    for(int i = 0; i < 6; i++)\n    {\n        //go through the entire array sudorandomly\n        sort(((iFrame + p.x + p.y*int(iResolution.x))^(1<<i))%tot_n, p);\n    }\n}\n\nvoid updrad(ivec2 p, int R)\n{\n    int r = 1<<R;\n    upd(p, ivec2(r, 0));\n    upd(p, ivec2(-r, 0));\n    upd(p, ivec2(0, r));\n    upd(p, ivec2(0, -r));\n}\n\nvoid update(ivec2 p)\n{\n    randupd(p);\n    upd(p, ivec2(0));\n    updrad(p, 0);\n    updrad(p, 2);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    pos *= 2.;\n    if(pos.x < iResolution.x && pos.y < iResolution.y) //8x voronoi particle tracking but in 2x lower res\n    {\n        ivec2 p = 2*ivec2(pos/2.);\n\n        init();\n\n        update(p);\n\n        U = save();\n    } else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nfloat repD(vec2 p0, vec2 p)\n{\n    return length(modc(p - p0 + size*0.5, size) - size*0.5);\n}\n\nfloat aperture(vec2 x0, vec2 x, float r)\n{\n    float d = repD(x0, x)/r;\n    return 1.-tanh(15.*(d-1.));//+0.5*exp(-pow(abs(6.*(d-0.8)),2.));\n}\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    get(p);\n   \tvec3 x = vec3(0.);\n    for(int i = 0; i < CN; i++)\n    {\n        vec4 pd = getParticle(ids[i]); \n        float ha = hash11(float(ids[i]));\n        float z = abs(45.0*sin(0.2*iTime + 2.0*3.14*ha));\n        x += 30.*(0.5*sin(3.*vec3(3,1,0.7)*ha) + 0.5)*aperture(pd.xy, pos, z)/(z*z);\n    }\n    col.xyz = x; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}