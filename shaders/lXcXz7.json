{
    "Shader": {
        "info": {
            "date": "1720339825",
            "description": "Just a wee playground sampling 3D voronoi noise on the surface of a sphere using polar coordinates. This can be UV-wrapped around a sphere as a texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXcXz7",
            "likes": 4,
            "name": "3D voronoi noise playground",
            "published": 3,
            "tags": [
                "voronoi",
                "noise"
            ],
            "usePreview": 0,
            "username": "toninoni",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "vec3 rand(vec3 p) {\n  return fract(43758.5453 * sin(p * mat3( 1,57,113, 57,113,1, 113,1,57)));\n}\n\nfloat luma(vec3 color){\n  return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nfloat voronoi(in vec3 point) {\n  point *= 5.0;\n  vec3 p = floor(point);\n  vec3 f = fract(point);\n\n  float id = 0.0;\n  vec2 res = vec2(100.0);\n  for (int k = -1; k <= 1; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 1; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + rand(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n\n  return luma(clamp(vec3(sqrt(res), abs(id)), 0.0, 1.0));\n}\n\n#define PI 3.14159\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n     // Sample point.\n    vec2 xy = fragCoord;\n    // Sample on the surface of a sphere.\n    float phiStep = PI / (iResolution.y - 1.0);\n    float phi = (-PI / 2.0) + xy.y * phiStep;\n    float thetaStep = PI * 2.0 / iResolution.x;\n    float theta = xy.x * thetaStep;\n    float cosPhi = cos(phi);\n    // P is a point in the sphere.\n    vec3 p = vec3(\n            cosPhi * cos(theta),\n            cosPhi * sin(theta),\n            sin(phi)\n    );\n\n    // Time varying pixel color\n    vec3 col = vec3(pow(voronoi(p), 2.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}