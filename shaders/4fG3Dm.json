{
    "Shader": {
        "info": {
            "date": "1712848721",
            "description": "ref : https://iii-initiative.com/",
            "flags": 0,
            "hasliked": 0,
            "id": "4fG3Dm",
            "likes": 1,
            "name": "The triple I initiative",
            "published": 3,
            "tags": [
                "logo"
            ],
            "usePreview": 0,
            "username": "Karp",
            "viewed": 82
        },
        "renderpass": [
            {
                "code": "float Rect(vec2 uv, vec2 center, vec2 size, float rounding, float blur) \n{\n    float sdf = sdBox(uv-center, size - rounding) - rounding;\n\treturn clamp01(sdf * (10.0/blur));\n}\n\n//https://easings.net/fr#easeOutQuart\nfloat EaseInOutQuad(float x) \n{\n    if(x < 0.5){\n    return 2. * x * x;\n    }else{\n    return 1. - pow(-2. * x + 2., 2.) / 2.;\n    }\n    //return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;\n}\n\n// https://en.wikipedia.org/wiki/Triangle_wave\nfloat triangleWave(float time, float period) {\n    return 2. * abs(time/period - floor(time/period + .5));\n}\n\nfloat I(vec2 uv, vec2 center, vec2 size, float blur, float height) \n{\n    float dist = 0.1;\n    vec2 shapeFloor = center - vec2(0.,size.y);\n    vec2 blocHeight = size.y * (vec2(height, 2.*height + (1.- height)));\n    vec2 blocSize = size.y * (vec2(height, 1.- height) - vec2(.5 * dist));\n    \n    float shape = 1.-Rect(uv, shapeFloor + vec2( 0., blocHeight.x), \n                vec2(size.x, blocSize.x), .025, blur);\n          shape += 1.-Rect(uv, shapeFloor + vec2( 0., blocHeight.y), \n                vec2(size.x, blocSize.y), .025, blur);\n    \n    //shape = 1.-Rect(uv, center, size, .05, blur);\n\treturn shape;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV manipulation\n    vec2 uv = AspectRatioUV(fragCoord.xy, iResolution.xy);\n    //uv *= .5;\n    vec2 sideUV = uv - vec2(uv.y * .2,0);\n    vec2 modUV = mod(sideUV + vec2(.5),1.);\n    \n    //Parameter\n    float time = iTime * 2.;// * PI;\n    float AA = 0.05;\n    \n    vec2 size =  vec2(0.12,.47);\n    vec2[] pos =  vec2[] ( \n        vec2(.50,.50),\n        vec2(.83,.50),\n        vec2(.17,.50)\n        );\n        \n    vec3 mainColor = vec3(.0);\n    vec3 bgColor = vec3(1., 0.72, 0.02);\n    \n    //Visu\n    vec3 pix = vec3(uv,0);\n    pix = vec3(sideUV,0);\n    pix = vec3(modUV,0);\n    pix = bgColor;\n    \n    float sdf = sdCircle(uv-vec2(0), .5);\n    float mask = max(0., 1.-sdf) * .33;\n    \n    vec3 iFilter = mix(pix, vec3(1.), mask);\n    float centerBlockMask = 1.- Rect(sideUV, vec2(.0), vec2(.5), 0., AA);\n    iFilter = mix(iFilter, mainColor, centerBlockMask);\n    \n    float iii = 0.;\n    for(int i = 0; i < 3; i++)\n    {\n        float height = triangleWave(time, 8.);\n        height = EaseInOutQuad(1.-height);\n        height = .3 + (clamp01(-2. + (height * 5.)) *.4);\n        \n        height = mix(height, .2,1.-centerBlockMask);\n        if(i==0) height = 1. - height;\n        iii += I(modUV, pos[i], size, AA, height);\n    }\n    pix = mix(pix, iFilter, iii);\n            \n\tfragColor = vec4(pix, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Constant\n#define PI  3.14159265359\n#define TAU 6.28318530717\n\n//Color\n#define black   vec3(0.0)\n#define grey    vec3(0.5)\n#define white   vec3(1.0)\n//\n#define red     vec3(1.0,0.0,0.0)\n#define green   vec3(0.0,1.0,0.0)\n#define blue    vec3(0.0,0.0,1.0)\n//\n#define cyan    vec3(0.0,1.0,1.0)\n#define yellow  vec3(1.0,1.0,0.0)\n#define magenta vec3(1.0,0.0,1.0)\n\n///Inigo Quilez Signed Distance Field\n//https://iquilezles.org/articles/distfunctions2d\n///Playlist shadertoy SDF : \n//https://www.shadertoy.com/playlist/MXdSRf&from=36&num=12\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n///UV (TextCoord)\nvec2 CenterUV(vec2 fragCoord, vec2 resolution)\n{\n    ///Centering Operation\n\tvec2 uv = vec2( fragCoord.xy - 0.5 * resolution.xy );\n\t// [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n    return uv;\n}\nvec2 FullScreenUV(vec2 fragCoord, vec2 resolution)\n{\t\n    vec2 uv = CenterUV(fragCoord.xy, resolution);\n    uv = 2.0 * uv.xy / resolution.xy;\n\t// [-iResolution.x/2, iResolution.x/2] -> [-1.0, 1.0]\n    // [-iResolution.y/2, iResolution.y/2] -> [-1.0, 1.0]\n    \n    return uv;\n}\nvec2 AspectRatioUV(vec2 fragCoord, vec2 resolution)\n{\t\n    vec2 uv = CenterUV(fragCoord.xy, resolution);\n\tuv = 2.0 * uv.xy / resolution.y;\n    // AspectRatio = 1920/1080 = 1.778\n    // [-iResolution.x/2, iResolution.x/2] ->[-1.778, 1.778]\n\t// [-iResolution.y/2, iResolution.y/2] ->[-1, 1]\n    return uv;\n}\nvec2 RotateUV(vec2 uv, float angle)\n{\t\n    //angle in degree (TAU = 2PI = 360 degrees)\n\tangle = angle * PI / 180.0;\n    return uv * mat2( cos(angle), sin(angle),\n                     -sin(angle), cos(angle));\n}\n\n///COLOR\nvec3 Color255(int R, int G, int B)\n{\n    float rat = 1.0/255.0;\n    return vec3(float(R)*rat, float(G)*rat, float(B)*rat);\n}\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 HSV2RGB(vec3 c){\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n//Source: https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 RGB2HSV(vec3 c){\n\tvec4 K=vec4(0.,-1./3.,2./3.,-1.),\n\t     p=mix(vec4(c.bg ,K.wz),vec4(c.gb,K.xy ),step(c.b,c.g)),\n\t     q=mix(vec4(p.xyw,c.r ),vec4(c.r ,p.yzx),step(p.x,c.r));\n\tfloat d=q.x-min(q.w,q.y),\n\t      e=1e-10;\n\treturn vec3(abs(q.z+(q.w-q.y)/(6.*d+e)),d/(q.x+e),q.x);\n}\nvec3 HueShiftcolor(vec3 c, float shift)\n{\n    c = RGB2HSV(c);\n    c = vec3(mod(c.x + shift,1.), c.yz);\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Maths\nfloat clamp01(float value) {return clamp(value,0.0,1.0);}\nfloat saturate(float value) {return clamp(value,0.0,1.0);}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}