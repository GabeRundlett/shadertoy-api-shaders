{
    "Shader": {
        "info": {
            "date": "1518947858",
            "description": "Lots of strange critters",
            "flags": 0,
            "hasliked": 0,
            "id": "4sdcWN",
            "likes": 12,
            "name": "Blob Zoo",
            "published": 3,
            "tags": [
                "metaballs",
                "cells",
                "architecture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 714
        },
        "renderpass": [
            {
                "code": "// \"Blob Zoo\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HexGrid (vec2 p);\n\nvec3 sunDir;\nvec2 gId;\nfloat tCur, dstFar, gcRnd, bHt;\nint idObj;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvec3 SMap (vec3 p, float t)\n{\n  float f;\n  f = 2.;\n  for (int k = 0; k < 5; k ++) {\n    p += 0.4 * sin (1.7 * p.yzx / f + f * t);\n    f *= 0.8;\n  }\n  return p;\n}\n\nfloat BlobDf (vec3 p)\n{\n  float t;\n  t = tCur + 25. * gcRnd;\n  p *= 2.;\n  p.xz = Rot2D (p.xz, 0.2 * t);\n  return max (0.1 * SmoothMin (PrSphDf (SMap (p - vec3 (0.7, 1.8, 0.), t + 2.), 1.1 + 0.31 * sin (t)),\n     PrSphDf (SMap (p + vec3 (0.7, -1.8, 0.), 1.3 * t), 1. + 0.41 * sin (1.7 * t)), 0.5), - p.y);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, szFac, w, s;\n  szFac = 0.1;\n  dMin = dstFar / szFac;\n  p.xz -= HexToPix (gId);\n  p /= szFac;\n  w = 0.05;\n  q = p;\n  d = max (min (max (PrBoxAn2Df (q.xz, vec2 (2., 7.5), w), - PrBox2Df (q.xz, vec2 (2.1 + w, 2. - w))),\n     max (PrBoxAn2Df (q.xz, vec2 (7.5, 2.), w), - PrBox2Df (q.xz, vec2 (2. - w, 2.1 + w)))), abs (q.y - bHt) - bHt);\n  qq = q;\n  qq.xz = mod (qq.xz, 0.5) - 0.25;\n  s = 1. - sqrt (1. - smoothstep (1.3, 1.7, qq.y));\n  qq.y -= 0.82;\n  d = max (d, - min (PrBox2Df (qq.xy, vec2 (0.2 - 0.2 * s, 0.9)),\n     PrBox2Df (qq.zy, vec2 (0.2 - 0.2 * s, 0.9))));\n  DMIN (1);\n  q.xz = Rot2D (q.xz, pi / 6.);\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (6. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 6.));\n  q.xy -= vec2 (-10., 1.6);\n  d = PrCylAnDf (q.xzy, 1.15, 0.08, 0.015);\n  DMIN (2);\n  q.xz = Rot2D (vec2 (q.x - 0.65, abs (q.z)), - pi / 3.);\n  q.x = abs (q.x);\n  q.xy -= vec2 (0.7, -0.8);\n  d = PrCylDf (q.xzy, 0.03, 0.8);\n  DMIN (3);\n  q = p;\n  q.y -= 0.05;\n  d = PrCylAnDf (q.xzy, 1.7, 0.07, 0.05);\n  DMIN (2);\n  q = p;\n  d = length (q.xz) - 1.7;\n  if (d < 0.1) {\n    d = BlobDf (q);\n    DMIN (4);\n  } else dMin = min (dMin, d);\n  return dMin * szFac;\n}\n\nvoid SetGrdConf ()\n{\n  gcRnd = Hashfv2 (17.3 * gId);\n  bHt =  (1./24.) * floor (22. + 5. * gcRnd);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = 1. / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2]));\n  pM = HexToPix (PixToHex (ro.xz));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = min (hv.x, min (hv.y, hv.z));\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = 0; j < 220; j ++) {\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetGrdConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) dHit += d;\n    else {\n      dHit = s + 0.001;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = min (hv.x, min (hv.y, hv.z));\n    }\n    if (d < 0.0002 || dHit > dstFar || p.y < 0. || p.y > 2.) break;\n  }\n  if (d >= 0.0002) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.00002, -0.00002);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec2 TrackPath (float t)\n{\n  vec2 r;\n  float tt;\n  tt = mod (t, 4.);\n  if (tt < 1.) r = mix (vec2 (sqrt3 * 0.5, -0.5), vec2 (sqrt3 * 0.5, 0.5), tt);\n  else if (tt < 2.) r = mix (vec2 (sqrt3 * 0.5, 0.5), vec2 (0., 1.), tt - 1.);\n  else if (tt < 3.) r = mix (vec2 (0., 1.), vec2 (0., 2.), tt - 2.);\n  else r = mix (vec2 (0., 2.), vec2 (sqrt3 * 0.5, 2.5), tt - 3.);\n  r += vec2 (0.005, 3. * floor (t / 4.));\n  return r;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.001;\n  for (int j = 0; j < 40; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetGrdConf ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += min (0.005, 3. * h);\n    if (h < 0.001) break;\n  }\n  return 0.8 + 0.2 * sh;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  return mix (vec3 (0.2, 0.3, 0.5) + 0.3 * pow (max (dot (rd, sunDir), 0.), 8.), vec3 (1.),\n     0.2 + 0.8 * rd.y * Fbm2 (2. * rd.xz / rd.y));\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.03, 0.07, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.35, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.9 + 0.1 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, qh, rg;\n  vec2 g, vf;\n  float dstObj, dstGrnd, spec, sh, f;\n  bool fxz;\n  dstGrnd = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  dstObj = ObjRay (ro, rd);\n  if (min (dstObj, dstGrnd) < dstFar) {\n    sh = 1.;\n    vf = vec2 (0.);\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      gId = PixToHex (ro.xz);\n      SetGrdConf ();\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        col = HsvToRgb (vec3 (0.04 + 0.12 * gcRnd, 0.7, 0.7));\n        spec = 0.05;\n        if (ro.y > 0.2 * bHt - 0.0005) col*= 0.7;\n        if (abs (vn.y) < 0.01) {\n          rg = 10. * ro;\n          fxz = (abs (vn.x) > 0.99);\n          rg = ShStagGrid ((fxz ? rg.zy : rg.xy), 6. * vec2 (1., 2.));\n          col *= rg.y;\n          rg.xz *= sign (fxz ? vn.x : vn.z);\n          if (fxz) {\n            if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n            else vn.xz = Rot2D (vn.xz, rg.x);\n          } else {\n            if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n            else vn.zx = Rot2D (vn.zx, rg.x);\n          }\n        }\n      } else if (idObj == 2) {\n        col = vec3 (0.6, 0.6, 0.7);\n        spec = 0.1;\n        vf = vec2 (1024., 0.5);\n      } else if (idObj == 3) {\n        f = mod (256. * ro.y + atan (vn.z, vn.x) / (2. * pi), 1.);\n        if (abs (f - 0.5) < 0.4) {\n          col = vec3 (0.6, 0.6, 0.7);\n          spec = 0.1;\n          vf = vec2 (1024., 0.5);\n        } else {\n          col = vec3 (0.5, 0.7, 0.2);\n          vn.y = sin (2. * pi * (abs (f - 0.5) - 0.4) * sign (f));\n          vn.xz *= sqrt (1. - vn.y * vn.y);\n          spec = 0.3;\n        }\n      } else if (idObj == 4) {\n        col = HsvToRgb (vec3 (mod (13. * gcRnd, 1.), 1., 0.9));\n        spec = 0.3;\n        vf = vec2 (256., 0.5);\n      }\n      if (idObj != 3) sh = ObjSShadow (ro, sunDir);\n    } else {\n      ro += dstGrnd * rd;\n      gId = PixToHex (ro.xz);\n      SetGrdConf ();\n      vn = vec3 (0., 1., 0.);\n      g = ro.xz - HexToPix (gId);\n      if (length (g) < 0.17) {\n        col = vec3 (0.4, 0.4, 0.5);\n        vf = vec2 (256., 0.2);\n      } else if (abs (g.x) < 0.2 && abs (g.y) < 0.75 || abs (g.x) < 0.75 && abs (g.y) < 0.2) {\n        col = HsvToRgb (vec3 (0.3 + 0.15 * gcRnd, 1., 0.5));\n        vf = vec2 (256., 2.);\n      } else {\n        qh = HexGrid (32. * sqrt3 * ro.zx);\n        f = max (length (qh.xy) - 0.5, 0.);\n        vn = vec3 (0., Rot2D (vec2 (1., 0.), 4. * f * f));\n        vn.zx = vn.z * normalize (qh.xy);\n        col = vec3 (0.5, 0.45, 0.45);\n        col = mix (vec3 (0.5, 0.5, 0.3), col, smoothstep (0.036, 0.038, HexGrid (ro.xz).z));\n        col *= 0.8 + 0.2 * smoothstep (0.03, 0.06, qh.z);\n        g = Rot2D (g, pi / 6.);\n        g = Rot2D (g, 2. * pi * ((floor (6. * atan (g.y, - g.x) / (2. * pi) + 0.5)) / 6.));\n        g = Rot2D (vec2 (g.x + 0.935, abs (g.y)), - pi / 3.);\n        col *= 0.8 + 0.2 * smoothstep (0.003, 0.006, length (vec2 (abs (g.x) - 0.07, g.y)));\n      }\n      spec = 0.1;\n      sh = ObjSShadow (ro, sunDir);\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    col = col * (0.2 + 0.2 * max (dot (normalize (- sunDir.xz), vn.xz), 0.) +\n       0.7 * sh * max (dot (vn, sunDir), 0.)) +\n       spec * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else {\n    col = (rd.y > 0.) ? SkyCol (rd) : vec3 (0.5, 0.45, 0.45);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa, vd, p1, p2;\n  float el, az, asp, vel, tCyc, tt, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  vel = 0.12;\n  tCyc = 4. / vel;\n  tCur = mod (tCur, 36000.) + floor (2. + floor (dateCur.w / 600.) / tCyc) * tCyc;\n  p1 = TrackPath (vel * tCur + 0.11);\n  p2 = TrackPath (vel * tCur - 0.11);\n  ro.xz = 0.5 * (p1 + p2);\n  ro.y = 0.09;\n  vd = p1 - p2;\n  az = atan (vd.x, vd.y);\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.2 * pi * mPtr.y;\n  } else {\n    a = 0.45 * pi * SmoothBump (0.25, 0.75, 0.12, mod (tCur / (0.25 * tCyc), 1.));\n    tt = mod (tCur / tCyc, 1.) - 0.375;\n    az += a * (step (abs (tt + 0.25), 0.125) - step (abs (tt - 0.25), 0.125));\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  asp = canvas.x / canvas.y;\n  uv.xy /= 2.5;\n  rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uv.x / asp)) * asp, uv.y, 1.));\n  dstFar = 50.;\n  sunDir = normalize (vec3 (0.5, 3., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w)\n{\n  return max (PrBox2Df (p, vec2 (b + w)), - PrBox2Df (p, vec2 (b - w)));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, 0.5 * sqrt3 - q.x + 0.5 * min (q.x - sqrt3 * q.y, 0.));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}