{
    "Shader": {
        "info": {
            "date": "1494962363",
            "description": "Semi-monocoque duck",
            "flags": 0,
            "hasliked": 0,
            "id": "4dXBRN",
            "likes": 12,
            "name": "Framed Duck",
            "published": 3,
            "tags": [
                "raymarch",
                "shadow",
                "structure"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 926
        },
        "renderpass": [
            {
                "code": "// \"Framed Duck\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrEllips2Df (vec2 p, vec2 r);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrEllCylDf (vec3 p, vec2 r, float h);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2Cs (vec2 q, vec2 cs);\n\nvec3 ltDir, lbPos;\nfloat dstFar, tCur;\nbool doSh;\nint idObj;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, r3;\n  vec2 r2;\n  const vec2 cs = vec2 (cos (0.3), sin (0.3));\n  float dMin, dMinO, dMinI, d, h, ws, wf;\n  dMinO = dstFar;\n  dMinI = dstFar;\n  wf = 0.98;\n  h = 0.5;\n  r2 = vec2 (0.2, 0.3 + 0.05 * clamp (p.z, -2., 2.));\n  d = PrEllips2Df (p.xz, r2);\n  d = min (max (d, abs (p.y) - h), length (vec2 (d, p.y)) - h);\n  dMinO = min (d, dMinO);\n  d = PrEllips2Df (p.xz, wf * r2);\n  d = min (max (d, abs (p.y) - wf * h), length (vec2 (d, p.y)) - wf * h);\n  dMinI = min (d, dMinI);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, 0.3, 0.6);\n  q.yz = Rot2Cs (q.yz, cs);\n  q.xy = Rot2Cs (q.xy, vec2 (cs.x, - cs.y));\n  q.xz = Rot2Cs (q.xz, vec2 (cs.x, - cs.y));\n  h = 0.07;\n  r2 = vec2 (0.3, 0.5 + 0.08 * clamp (q.z, -2., 2.));\n  d = PrEllips2Df (q.yz, r2);\n  d = min (max (d, abs (q.x) - h), length (vec2 (d, q.x)) - h);\n  dMinO = SmoothMin (d, dMinO, 0.05);\n  d = PrEllips2Df (q.yz, wf * r2);\n  d = min (max (d, abs (q.x) - wf * h), length (vec2 (d, q.x)) - wf * h);\n  dMinI = SmoothMin (d, dMinI, 0.05);\n  r3 = vec3 (0.4, 0.35, 0.5);\n  q = p - vec3 (0., 0.75, -0.4);\n  dMinO = SmoothMin (PrEllipsDf (q, r3), dMinO, 0.1);\n  dMinI = SmoothMin (PrEllipsDf (q, wf * r3), dMinI, 0.1);\n  q = p - vec3 (0., 0.65, -0.9);\n  q.zy = Rot2Cs (q.zy, vec2 (cs.x, - cs.y));\n  h = 0.15;\n  r2 = vec2 (0.15, 0.04) * (1. - 0.1 * min (2., max (0., 1. - q.z / h)));\n  dMinO = SmoothMin (max (PrEllCylDf (q, r2, h),\n     - PrEllCylDf (q - vec3 (0., 0., 0.9 * h), r2 - 0.02, 2. * h)), dMinO, 0.01);\n  ws = 0.02;\n  q = abs (mod (p + ws, 2. * ws) - ws) - 0.15 * ws;\n  dMin = 0.9 * max (max (dMinO, - dMinI), min (min (q.x, q.z), q.y));\n  idObj = 1;\n  if (! doSh) {\n    d = PrSphDf (p - lbPos, 0.04);\n    if (d < dMin) { dMin = d;  idObj = 2; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float lbDist)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.002;\n  for (int j = 0; j < 100; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += 0.01 * (1. + d);\n    if (sh < 0.02 || d > lbDist) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nfloat GlowCol (vec3 ro, vec3 rd, float dstHit)\n{\n  vec3 ld;\n  float d, wGlow;\n  wGlow = 0.;\n  ld = lbPos - ro;\n  d = length (ld);\n  ld /= d;\n  if (d < dstHit) wGlow += pow (max (dot (rd, ld), 0.), 1024.);\n  return clamp (0.7 * wGlow, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 roo, vn, col, lbDir;\n  float dstObj, sh, att, lbDist;\n  dstFar = 20.;\n  doSh = false;\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    lbDir = normalize (lbPos - ro);\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      doSh = true;\n      sh = ObjSShadow (ro, ltDir, dstFar);\n      col = vec3 (0.2, 0.5, 0.8);\n      col = 0.1 * col + sh * (0.6 * col * max (0., dot (vn, ltDir)) +\n         0.5  * vec3 (1.) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 256.));\n    } else {\n      col = max (0.6 + 0.4 * dot (rd, - vn), 0.) * vec3 (1., 1., 0.5);\n    }\n  } else {\n    col = vec3 (0.1, 0.15, 0.1) * (0.5 + 1.5 * rd.y);\n    if (rd.y < 0.) {\n      ro -= ((ro.y + 0.51) / rd.y) * rd;\n      lbDir = lbPos - ro;\n      lbDist = length (lbDir);\n      att = 1. / (1. + dot (lbDir, lbDir));\n      lbDir /= lbDist;\n      doSh = true;\n      col = mix (col, att * vec3 (1., 1., 0.5) * ObjSShadow (ro, lbDir, lbDist),\n         smoothstep (0.1, 0.2, att));\n    }\n  }\n  col = mix (col, vec3 (0.7, 0.7, 0.4), GlowCol (roo, rd, dstObj));\n  col = pow (clamp (col, 0., 1.), vec3 (0.9));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2.5 * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n    el = clamp (el, -0.27 * pi, -0.01 * pi);\n  } else {\n    az -= 3.5 * pi * sin (0.014 * pi * tCur);\n    el -= 0.12 * pi * sin (0.2 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 4.5));\n  ro = vuMat * vec3 (0., 0., -5.);\n  ro.y += 0.25;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  lbPos = vec3 (0., 0.1, 0.);\n  fragColor = vec4 (ShowScene (ro, rd), 1);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrEllips2Df (vec2 p, vec2 r)\n{\n  return (length (p / r) - 1.) * min (r.x, r.y);\n}\n\nfloat PrEllCylDf (vec3 p, vec2 r, float h)\n{\n  return max ((length (p.xy / r) - 1.) * min (r.x, r.y), abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}