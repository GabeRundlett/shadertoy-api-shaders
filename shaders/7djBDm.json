{
    "Shader": {
        "info": {
            "date": "1646458912",
            "description": "Some morphing tree-like patterns.",
            "flags": 8,
            "hasliked": 0,
            "id": "7djBDm",
            "likes": 9,
            "name": "Morphing fractal trees",
            "published": 3,
            "tags": [
                "fractal",
                "tree"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "//change these constants to get different patterns!\n#define c1 vec3(1.,0.5,1.5)\n\nfloat triangle_wave(float a){\n    return abs(fract(a)-.5);\n    //return abs(fract((a+c1.xy)*scale+iTime/500.)-.5); //morphing\n}\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n    //return abs(fract((a+c1.xy)*scale+iTime/500.)-.5); //morphing\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    float scale = c1.z;\n    float offset = 0.;\n    //float offset1 = iTime/1000.;\n    vec2 t2 = vec2(0.);\n        vec2 t3 = vec2(0.);   \n        for(int k = 0; k < 60; k++){\n        //float scale = scale + col.x/8.;\n        //float scale = scale-col.x/16.;\n            //float scale = scale + col.x/16.;\n\n            //uv /= -scale-col.x;\n            \n            //uv -= offset + (t2.yx)/(1.+(col.x+col.y+col.z)/3.);\n            uv -= offset - (t2.yx);\n\n            //uv += iTime/1000.-(t2.yx)/(scale);\n\n            \n            //uv -= (t2.yx)/(scale+t3);\n            //uv -= (t2.yx)/(scale+col.x);\n            t2 = triangle_wave(uv.yx+.5,scale);\n            //t2 = triangle_wave(uv.yx+.5+float(i),scale);\n            \n            t3 = triangle_wave(uv,scale);\n            \n            uv.yx = (t3-t2);\n            //offset += offset1;\n            //offset += iTime/400.+ col.x/(scale-col.x);\n        col.x = 1.-abs(uv.y+uv.x+col.x);\n        col = col.yzx;\n        \n        \n        uv /= 4.5-(triangle_wave(uv.x+uv.y+iTime/4.));\n        //uv /= (t2.y-t2.x+1.);\n      }\n    fragColor = vec4(col,1.0);   \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// http://countercomplex.blogspot.jp/2011/10/algorithmic-symphonies-from-one-line-of.html\n// http://wurstcaptures.untergrund.net/music/\n\nvec2 sound1(int t)\n{\n    //t = (t*(t>>12)|(t>>6)|t/4|t/1024);\n    //t = t*(((t)>>(12))|(t>>(4))|t/(4)|t/1024);\n    //t = (t*(t>>(12+t>>12))|(t>>(6))|t/(4+t>>4)|t/(6+t>>6)|t/1024);\n    t = (t*(t>>(12+t/12>>(12)))|(t>>(5))|t>>6|t/(4-t>>4)|t/(6+t>>(6))|t/1024);\n\n\n    return vec2(float(t & 0xff - 128) / 128.);\n}\n\n\nvec2 mainSound( in int samp,float time){\n    time *= 5000.0/8.;\n    float factor = 1.0;\n    vec2 result = vec2(0.0);\n    for(int i = 0; i < 4; i++){\n    \tresult += sound1(int(time*factor))*factor;\n        factor *= 2.0;\n    }\n    return result/25.;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}