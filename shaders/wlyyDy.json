{
    "Shader": {
        "info": {
            "date": "1611672921",
            "description": "Attempt to create ripple effects using simple noise. ",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyyDy",
            "likes": 6,
            "name": "ripple_",
            "published": 3,
            "tags": [
                "noise",
                "circles",
                "lines",
                "perlin",
                "mod",
                "ripple",
                "simplenoise",
                "permute"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 2.374 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(0.0);\n    vec2 pos = vec2(st*3.);\n\n    float DF = 0.0;\n\n    // Add a random position\n    float a = 0.0;\n    vec2 vel = vec2(iTime*0.532);\n    DF += snoise(pos+vel*random(st-vel-pos)/1e6)*atan(sin(iTime)-0.0005,0.00005+cos(iTime))+sin(iTime*0.01);\n    DF += snoise(pos+vel/random(st-vel+pos)/1e4)*atan(cos(iTime)+0.0005,0.960+cos(iTime))+sin(iTime*0.001);\n\n    // Add a random position\n    a = snoise(pos*vec2(cos(iTime*0.726),sin(iTime*1.004))*1.268)*3.1415;\n    vel = vec2(cos(a),sin(a));\n    DF += snoise(pos+vel-st)*abs(sin(iTime/1e3))+-2.206;\n\n    color = vec3( smoothstep(1.004,0.950,fract(DF+atan(pos.y,pos.x))));\n\n    fragColor = vec4(1.0-color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}