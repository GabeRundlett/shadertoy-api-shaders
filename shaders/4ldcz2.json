{
    "Shader": {
        "info": {
            "date": "1533256750",
            "description": "Originally titled \"noise from nimitz's hashes\".\n\nplanning on using this as a basis for other work elsewhere.  Thanks, nimitz!",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldcz2",
            "likes": 6,
            "name": "camo melt",
            "published": 3,
            "tags": [
                "noise",
                "hash",
                "nimitz"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 665
        },
        "renderpass": [
            {
                "code": "//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 col1 = vec3( 52.31940174,  57.13993023,  25.14114425);\nfloat cdf1 = 0.356611508274;\nvec3 col2 = vec3( 90.01018469,  92.45607704,  48.6809284 );\nfloat cdf2 = 0.567189921512;\nvec3 col3 = vec3( 24.30486255,  28.39621824,   9.87158792);\nfloat cdf3 = 0.85288706694;\nvec3 col4 = vec3( 7.20113504 , 9.30435668  ,2.79459992);\nfloat cdf4 = 0.982995050742;\nvec3 col5 = vec3( 151.77977687,  144.51838133,   78.88918287);\nfloat cdf5 = 1.0;\n\nvec3 color_of(in float val) {\n    float v = mod(2.0 *val, 1.0);\n    vec3 result = col1;\n    result = mix(result, col5, step(v, cdf5));\n    result = mix(result, col4, step(v, cdf4));\n    result = mix(result, col3, step(v, cdf3));\n    result = mix(result, col2, step(v, cdf2));\n    result = mix(result, col1, step(v, cdf1));\n    \n    return result / 256.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float v = 0.5 * noise(uv * 10.0, 5.0, 0.75, 0.75, 2.0 * iTime);\n\n    // Time varying pixel color\n    vec3 col = vec3(color_of(v));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// All hash functions copied from https://www.shadertoy.com/view/Xt3cDn\n// Thanks, nimitz!\n\n//Modified from: iq's \"Integer Hash - III\" (https://www.shadertoy.com/view/4tXyWN)\n//Faster than \"full\" xxHash and good quality\nuint baseHash(uvec2 p)\n{\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\n//---------------------2D input---------------------\n\nfloat hash12(uvec2 x)\n{\n    uint n = baseHash(x);\n    return float(n)*(1.0/float(0xffffffffU));\n}\n\nvec2 hash22(uvec2 x)\n{\n    uint n = baseHash(x);\n    uvec2 rz = uvec2(n, n*48271U);\n    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash32(uvec2 x)\n{\n    uint n = baseHash(x);\n    uvec3 rz = uvec3(n, n*16807U, n*48271U);\n    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec4 hash42(uvec2 x)\n{\n    uint n = baseHash(x);\n    uvec4 rz = uvec4(n, n*16807U, n*48271U, n*69621U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec4(rz & uvec4(0x7fffffffU))/float(0x7fffffff);\n}\n\n//--------------------------------------------------\n\nfloat hash12(vec2 x)\n{\n    uint n = baseHash(floatBitsToUint(x));\n    \n    return float(n & 0x7fffffffU)/float(0x7fffffff);\n}\n\nvec2 hash22(vec2 x)\n{\n    uint n = baseHash(floatBitsToUint(x));\n    uvec2 rz = uvec2(n, n*16807U);\n    return vec2(rz & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash32(vec2 x)\n{\n    uint n = baseHash(floatBitsToUint(x));\n    uvec3 rz = uvec3(n, n*16807U, n*48271U);\n    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nvec4 hash42(vec2 x)\n{\n    uint n = baseHash(floatBitsToUint(x));\n    uvec4 rz = uvec4(n, n*16807U, n*48271U, n*69621U);\n    return vec4(rz & uvec4(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nfloat noise_term(in vec2 x, in float scale_val) {\n    vec2 s = vec2(scale_val);\n    vec2 x00 = x - mod(x, s);\n    vec2 x01 = x + vec2(0.0, scale_val);\n    x01 = x01 - mod(x01, s);\n    vec2 x10 = x + vec2(scale_val, 0.0);\n    x10 = x10 - mod(x10, s);\n    vec2 x11 = x + s;\n    x11 = x11 - mod(x11, s);\n    \n    float v00 = hash12(x00);\n    float v01 = hash12(x01);\n    float v10 = hash12(x10);\n    float v11 = hash12(x11);\n    \n    vec2 uv = mod(x, s) / s;\n    \n    float yweight = smoothstep(0.0, 1.0, uv.y);\n    float v1 = mix(v10, v11, yweight);\n    float v0 = mix(v00, v01, yweight);\n    \n    float xweight = smoothstep(0.0, 1.0, uv.x);\n    \n    return mix(v0, v1, xweight);\n}\n\nfloat noise(in vec2 x, in float base_scale, in float space_decay, in float height_decay,\n           in float shift_by) {\n\tfloat h = 1.0;\n    float s = base_scale;\n\n    float summation = 0.0;\n    \n    for (int i = 0; i < 5; ++i) {\n    \tsummation = summation + h * noise_term(x + vec2(0.0, s * shift_by), s);\n        s *= space_decay;\n        h *= height_decay;\n    }\n    return summation;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}