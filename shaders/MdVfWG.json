{
    "Shader": {
        "info": {
            "date": "1530321885",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "MdVfWG",
            "likes": 13,
            "name": "glow waves",
            "published": 3,
            "tags": [
                "raymarch",
                "sound",
                "glow"
            ],
            "usePreview": 0,
            "username": "xdaimon",
            "viewed": 603
        },
        "renderpass": [
            {
                "code": "float dtl(vec3 p, vec3 lo, vec3 ld, float l) {\n    vec3 x = p - lo; // x's origin is now at lo\n    float t = clamp(dot(ld, x), 0., l);\n    return length(x - ld * t);\n}\n\nfloat get_bit_freq(float x) {\n    float grid = floor(x * 32.)/32.;\n    return .015 + 3./15.*(texture(iChannel0, vec2(grid, .25)).r*2.-1.);\n}\n\nfloat get_wave_sound(float x) {\n    return texture(iChannel0, vec2(x, .75)).r*2.-1.;\n}\n\nfloat plane(vec3 p, vec3 pb1, vec3 pb2, vec3 pn, vec2 bound) {\n    mat3 r3_to_plane_basis = transpose(mat3(pb1, pn, pb2));\n    vec3 x = r3_to_plane_basis * p;\n    x.y = abs(x.y);\n    x.z -= get_bit_freq(x.x / bound.x*.5+.5);\n    //x.z -= .1 + 4./15.*get_wave_sound(x.x / bound.x * .5 + .5);\n    x.xz = max(abs(x.xz) - bound, vec2(0));\n    return length(x);\n}\n\nfloat map(vec3 p) {\n    //float d = plane(p, vec3(0,0,1), vec3(0,1,0), vec3(1,0,0), vec2(.5,.01));\n    //*\n\t//or\n\tfloat d = length(vec2(p.y+.2*get_wave_sound(p.z+.5), p.x));\n    if (abs(p.z)>.49)\n        d = 1.;//*/\n\n    p = abs(p);\n    d = min(d, 1.3*dtl(p, vec3(.2,.2,.5), vec3(0,-1,0), .2));\n    d = min(d, 1.3*dtl(p, vec3(.2,.2,.5), vec3(-1,0,0), .2));\n    d = min(d, 1.3*dtl(p, vec3(.2,.2,.5), vec3(0,0,-1), .5));\n    return d;\n}\n\nvec2 sphere(vec3 p, vec3 ro, vec3 rd, float r) {\n    float a = dot(rd, rd);\n    float b = 2.0 * dot(ro - p, rd);\n    float c = dot(ro - p, ro - p) - r*r;\n    float h = b*b - 4.0*a*c;\n    if (h < 0.)\n        discard;\n    h = sqrt(h);\n    return vec2(-b - h, -b + h);\n}\n\n#define iRes iResolution\nvoid mainImage( out vec4 C, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iRes.xy * 2. - 1.;\n    uv.x *= iRes.x / iRes.y;\n    uv /= 2.;\n\n    C = vec4(0);\n\n    float away = 3.141592;\n    float th = -iTime / 10. -iMouse.x/80.; float cs = cos(th); float sn = sin(th);\n    vec3 ro = away*vec3(cs, .2, sn);\n    vec3 ta = vec3(0);\n    vec3 forward = normalize(ta - ro);\n    vec3 up = vec3(0,1,0);\n    vec3 right = vec3(-sn, 0., cs); // deriv of ro, which also is (-z,0,x)\n    //vec3 right = normalize(cross(forward,up));\n    vec3 rd = normalize(vec3(mat3(right, up, forward) * vec3(uv.x, uv.y, away)));\n\n    vec2 bound = sphere(vec3(0), ro, rd, 3.);\n    float t = bound.x;\n    float dist;\n    float csum = 0.;\n    for (int i = 0; i < 128; ++i) {\n        dist = map(ro+rd*t);\n        csum += 1. / (dist*dist);\n        t += dist*.2;\n        if (t > bound.y)\n            break;\n    }\n    C = vec4(.00001*csum);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}