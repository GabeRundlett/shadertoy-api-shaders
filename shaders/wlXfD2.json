{
    "Shader": {
        "info": {
            "date": "1597751873",
            "description": "PB",
            "flags": 96,
            "hasliked": 0,
            "id": "wlXfD2",
            "likes": 3,
            "name": "PB",
            "published": 3,
            "tags": [
                "b",
                "p"
            ],
            "usePreview": 0,
            "username": "kloumpt",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    col*= mix(1.1, 0.975, step(2.0, mod(fragCoord.y, 4.0)));\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 23749,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/kabanrecords/depardaus-rends-largent-bootlik"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float in_box(vec2 p) {\n    return (smoothstep(-0.04, 0.0, p.x) * (1.0 - smoothstep(1.0, 1.04, p.x))) * (smoothstep(-0.04, 0.0, p.y) * (1.0 - smoothstep(1.0, 1.04, p.y))); \n}\n\n\nfloat scene (vec3 p, float t) {\n    float d = 10000.0;\n    \n    d = min(d, 1.0 - length(p.xy) - (0.01 - 0.2 * max(0.0, .95 + cos(1.0 / 4.0 * t * 3.141592))) * texture(iChannel3, vec2(8.0 * atan(p.y, p.x) / 3.141592, p.z / 4.0)).r);\n    \n    \n    return d;\n}\n\n\nvec3 trace(vec2 p, float t) {\n    vec3 o = vec3(p.x, p.y, t / 4.0);\n    vec3 d = normalize(vec3(p, 4.0));\n    \n    \n    for (int i = 0; i < 32; i++) {\n     \to += d * scene(o, t);\n    }\n    \n    \n    vec3 col = texture(iChannel3, vec2(8.0 * atan(o.y, o.x) / 3.141592, o.z / 4.0)).rgb;\n    col *= max(0.0, 8.0 - (o.z - t / 4.0)) / 8.0;\n    \n \treturn col;   \n    \n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    float t = iTime * 127.0 / 60.0;\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 tv_center = 1.0 * vec2(cos(1.0 / 19.11 * t * 3.141592), sin(1.0 / 13.12 * t * 3.141592));\n    \n    vec2 size = vec2(0.2, 0.2) * 1.0;\n    vec2 uv_tv = (uv - 0.5) / size;\n    uv_tv += 0.5;\n    \n        \n\n    float k = 1.0;\n    for (int i=0; i<2; i++) {\n\n        uv_tv -= 0.5;\n        uv_tv *= mix(vec2(1.0), 0.5 + 1.50 * length(uv_tv) * (1.0 - abs(uv_tv)), 0.0 + 0.9 * sin(k * t / 16.0 * 3.141592) / k);\n        uv_tv += 0.5;\n        \n        k*= 2.0;\n    }\n        \n    uv_tv -= tv_center;\n    \n    vec3 col_bg = trace(2.0 * (uv - 0.5) * iResolution.xy / iResolution.yy, t);\n    \n    vec3 col_top = fract(texture(iChannel3, uv_tv).rgb + texture(iChannel3, -2.0 * uv_tv).rgb);\n    col_top = mix(col_top, vec3(1.0), 0.5)  * vec3(1.4, 1.0, 0.0);\n        \n    vec2 uv_tv_geom = uv_tv;\n    \n    vec3 col_bot = texture(iChannel2, uv_tv_geom).rgb;\n    vec3 col_border = fract(texture(iChannel0, abs(fract(uv_tv + 0.3 * t / iChannelResolution[1].xy - 0.95) * 2.0 - 1.0)).rrr + texture(iChannel0, uv_tv).rrr);\n    vec3 col_tv = texture(iChannel0, abs(fract(uv_tv_geom - vec2(0.0, t / 16.0)) * 2.0 - 1.0)).rgb;\n\t\n    uv_tv_geom -= 0.5;\n    \n    vec3 col = col_bg;\n    col = mix(col, col_top, in_box(uv_tv_geom * 0.65 + 0.5) * smoothstep(-0.25, 0.0, 1.8 - length(uv_tv_geom * iResolution.yy / iResolution.yy)) * smoothstep(0.9 - 0.1 - 0.1 * abs(fract(t/8.0) * 2.0 - 1.0), 0.9 - 0.1 * abs(fract(t/4.0) * 2.0 - 1.0), abs(fract(-uv_tv_geom.x + uv_tv_geom.y) * 2.0 - 1.0)  ));\n    col = mix(col, col_bot, smoothstep(-0.04, 0.0,  0.75 - length(uv_tv_geom)));\n    col = mix(col, col_border, smoothstep(-0.04, 0.0,  0.7 - length(uv_tv_geom)));    \n    col = mix(col, col_tv, in_box(uv_tv));\n    \n    \n    col =  mix(col, uv_tv.xyy, in_box(uv_tv));\n    \n    col = max(vec3(0.0), min(vec3(1.0), col));\n    \n\n    fragColor = vec4(col, in_box(uv_tv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 cola = texture(iChannel0, uv).rgba;\n    vec3 col = cola.rgb;\n    \n    vec2 uv_tv = cola.xy;\n    \n    vec3 col_bg = texture(iChannel1, uv_tv).rgb;\n    vec3 col_bg_dist = texture(iChannel3, uv + 4.0 * normalize(uv - 0.5) / iResolution.xy).rgb;\n    vec3 col_tv = texture(iChannel2, vec2(1.0 - uv_tv.x, uv_tv.y)).rgb;\n    col_tv = mix(col_tv, col_bg, step(0.5, col_tv.g / (0.001 + col_tv.r + col_tv.b)));\n    \n    \n    col = mix(col, col_bg_dist, 1.0 - step(0.2, length(cola.rgb)));\n    \n    col = mix(col, col_tv, cola.a);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}