{
    "Shader": {
        "info": {
            "date": "1562387768",
            "description": "I don't like how you can't make much of a persistent coherent shape, but you can affect it, and maybe it can be fun/soothing to play around with.\n\nZebraPaint 1 here: https://www.shadertoy.com/view/3llSzN",
            "flags": 32,
            "hasliked": 0,
            "id": "wtXXzM",
            "likes": 1,
            "name": "ZebraPaint 2",
            "published": 3,
            "tags": [
                "2d",
                "hair",
                "fur",
                "fade",
                "paint",
                "draw",
                "stripes",
                "pattern",
                "zebra",
                "brush"
            ],
            "usePreview": 0,
            "username": "1j01",
            "viewed": 617
        },
        "renderpass": [
            {
                "code": "// Fork of \"FadePaint\" by smkgames. https://shadertoy.com/view/Xd3fDr\n// 2019-07-04\n\n// ZebraPaint 1 here: https://www.shadertoy.com/view/3llSzN\n\n\n// see Buffer A tab for painting logic; this just applies a \"hair\" effect\n// which you can disable here by changing this to a 0\n#define HAIRY 1\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if HAIRY\n    \n        // some sort of hair effect\n        /*vec4 noiseVal = texture(iChannel1, fragCoord / iResolution.xy);\n        vec2 xyFromCenter = fragCoord.xy / iResolution.xy - 0.5;\n        vec2 p = xyFromCenter * (1.0 + ((noiseVal.x - 1.0) / 2.0) * 0.06) + 0.5;\n        fragColor = texture(iChannel0, p);*/\n\n        // some sort of hair effect\n        vec2 hairCenter = vec2(0.5, 0.5);\n        vec2 xyFromCenter = fragCoord.xy / iResolution.xy - hairCenter;\n        float angle = atan2(xyFromCenter.y, xyFromCenter.x);\n        float dist = length(xyFromCenter);\n        vec4 noiseVal = texture(iChannel1, vec2(angle / PI * 5.0, floor(dist)));\n        vec2 p = xyFromCenter * (1.0 + ((noiseVal.x - 1.0) / 2.0) * 0.06) + hairCenter;\n        fragColor = texture(iChannel0, p);\n    \n        // some sort of hair effect\n        /*vec2 hairCenter = vec2(0.5, 0.5);\n        vec2 xyFromCenter = fragCoord.xy / iResolution.xy - hairCenter;\n        float angle = atan2(xyFromCenter.y, xyFromCenter.x);\n        float dist = length(xyFromCenter);\n    \t//float hairLength = 0.1 * dist;\n    \tfloat hairDivisions = 100.0 / pow(dist, 10.9);\n        vec4 noiseVal = texture(iChannel1, vec2(angle / PI * 5.0, floor(dist))); // dont' thinhfkgnldfkgndfg\n    \tvec2 hairRootPos =\n            vec2(cos(angle), sin(angle)) *\n            floor(length(xyFromCenter) * hairDivisions) / hairDivisions * \n            (1.0 + noiseVal.x / 10.0)\n            //(1.0+ vec2(noiseVal.x > fract(dist * 27.9)))\n            //(1.0+ vec2(noiseVal.x > fract(dist * 27.9)))\n            +\n            hairCenter;\n        vec2 p = hairRootPos;//xyFromCenter * (1.0 + ((noiseVal.x - 1.0) / 2.0) * 0.06) + hairCenter;\n        fragColor = texture(iChannel0, p);*/\n    \n        // some sort of hair effect\n        /*vec2 hairCenter = vec2(0.5, 0.5);\n        vec2 xyFromCenter = fragCoord.xy / iResolution.xy - hairCenter;\n        float angle = atan2(xyFromCenter.y, xyFromCenter.x);\n        float dist = length(xyFromCenter);\n    \t//float hairLength = 0.1 * dist;\n    \t//float hairDivisions = 100.0;// / pow(dist, 10.9);\n    \tfloat hairDivisions = 200.0 / pow(dist, 00.9);\n        //vec4 noiseVal = texture(iChannel1, vec2(angle / PI * 5.0, floor(dist * 50.0))); // dont' thinhfkgnldfkgndfg\n        vec4 noiseVal = texture(iChannel1, vec2(angle / PI * 5.0, fract(dist / hairDivisions)));\n    \tvec2 hairRootPos =\n            vec2(cos(angle), sin(angle)) *\n            floor(length(xyFromCenter) * hairDivisions) / hairDivisions * \n            (1.0 + noiseVal.x / 10.0)\n            //(1.0+ vec2(noiseVal.x > fract(dist * 27.9)))\n            //(0.0 + vec2(noiseVal.x > fract(dist * 27.9)))\n            +\n            hairCenter;\n        vec2 p = hairRootPos;//xyFromCenter * (1.0 + ((noiseVal.x - 1.0) / 2.0) * 0.06) + hairCenter;\n        fragColor = texture(iChannel0, p);*/\n    \n    #else\n    \tfragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    #endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fadeTime 50.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(distance(iMouse.xy, fragCoord) < 10.0 && iMouse.z > 0.0) * 1.4;\n    fragColor = vec4(\n        distance(iMouse.xy, fragCoord) < 100.0 + 10.0 * sin(iTime) &&\n        iMouse.z > 0.0\n    ) * 100.4;\n    fragColor += texture(iChannel0, fragCoord.xy / iResolution.xy) * 1.;\n    fragColor -= texture(iChannel0, fragCoord.xy / iResolution.xy * 0.9) / fadeTime;\n    /*fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) * 0.5) + 0.5)\n    )*(1.0/fadeTime);*/\n    fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) * 0.9) + 0.5)\n    )*(1.0/fadeTime);\n    fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) / 0.9) + 0.5)\n    )*(1.0/fadeTime);\n    /*fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) * 1.9) + 0.5)\n    )*(1.0/fadeTime);*/\n    /*vec2 xyFromCenter = fragCoord.xy / iResolution.xy - 0.5;\n    float angle = atan2(xyFromCenter.y, xyFromCenter.x);\n    angle += 0.1 * iTime;// * sign(xyFromCenter.x);\n    vec2 rotatedFromCenter = vec2(sin(angle), cos(angle)) * length(xyFromCenter);\n    fragColor -= texture(iChannel0,\n    \t((rotatedFromCenter) + 0.5)\n    ) / 20.0;*/\n    //fragColor = clamp(fragColor, 0.0, 1.0);\n    //fragColor = clamp(fragColor, -0.3, 1.0);\n    fragColor = clamp(fragColor, -0.1, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nconst float PI = 3.1415;\n\nfloat atan2(in float y, in float x)\n{\n    return x == 0.0 ? sign(y)*PI/2.0 : atan(y, x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}