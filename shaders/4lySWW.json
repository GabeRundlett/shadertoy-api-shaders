{
    "Shader": {
        "info": {
            "date": "1484264169",
            "description": "Made with help from [url=https://www.shadertoy.com/view/4lSXW1]this[/url] and [url=http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/]this[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4lySWW",
            "likes": 0,
            "name": "tetrahedron fractal test",
            "published": 3,
            "tags": [
                "tetrahedron"
            ],
            "usePreview": 0,
            "username": "Jespertheend",
            "viewed": 628
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS 4\n\nfloat DE(vec3 p){\n\tfloat r;\n    for(int i=0; i<ITERATIONS; i++){\n        if(p.x+p.y < 0.) p.xy = -p.yx;\n        if(p.x+p.z < 0.) p.xz = -p.zx;\n        if(p.y+p.z < 0.) p.zy = -p.yz;\n        p = p * 2.0 - 1.0;\n    }\n    float l = (length(p) - 1.) * pow(2., float(-ITERATIONS)); ;\n    return l * 1.;\n}\n\n\nfloat map(vec3 p){\n    return DE(p);\n    \n}\n\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n\t));\n}\n\nfloat raymarch(in vec3 ro, in vec3 rd){\n    float t = 0.;\n    for(int i=0; i<50; i++){\n        vec3 p = ro + t * rd;\n        float res = map(p);\n        if(res<(0.001*t) || t > 100.) break;\n        t += res;\n    }\n    return t;\n}\n\nvec3 render(in vec3 ro, in vec3 rd){\n    float z = raymarch(ro,rd);\n    vec3 pos = ro + rd * z;\n    vec3 nor = getNormal(pos);\n    vec3 col = vec3(z);\n    col = nor*10.;\n    vec3 l = vec3(1.);\n    float b = dot(l, nor);\n    col = vec3(b*3.);\n    \n    return col/10.;\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float camDist = 2.;\n    float m = iMouse.x * 0.05;\n    if(iMouse.x <= 0. && iMouse.y <= 0.){\n        m = iTime;\n    }\n    vec3 camPos = vec3(cos(m)*camDist,0.,sin(m)*camDist);\n    \n    mat3 camMat = calcLookAtMatrix(camPos, vec3(0.), 0.);\n    \n    vec3 ro = camPos;\n    vec3 rd = normalize(camMat * vec3(uv, 1.5));\n    \n    vec3 col = render(ro, rd);\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}