{
    "Shader": {
        "info": {
            "date": "1473739163",
            "description": "This shader can be used to render animated \"loading icon\".",
            "flags": 0,
            "hasliked": 0,
            "id": "XtG3Rm",
            "likes": 11,
            "name": "Animated \"loading icon\"",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "loading",
                "icon"
            ],
            "usePreview": 0,
            "username": "Pidhorskyi",
            "viewed": 961
        },
        "renderpass": [
            {
                "code": "/* \"Animated loading icon\" by Stanislav Pidhorskyi - 2014\n * License Creative Commons Attribution 4.0 International License.\n * Contact: stanislav@podgorskiy.com\n */\n\nfloat smoothing = 1.0 / 256.0;\nvec4 color = vec4(1.0);\n\nfloat Union(float a, float b)\n{\n\treturn min(a, b);\n}\n\nfloat Substraction(float a, float b)\n{\n    return max(a,-b);\n}\n\nfloat Intersection(float a, float b)\n{\n    return max(a,b);\n}\n\nfloat Circle(vec2 p, float r)\n{\n\treturn length(p) - r;\n}\n\nfloat SDF(vec2 p)\n{\n    float t = 4.0 * (5.0 * iTime + 1.0 * sin(5.0 * iTime));\n    float dt = 1.0 + 1.0 * cos(5.0 * iTime);\n    \n    float sm = clamp(1.5 * cos(2.5 * iTime), -1.0, 1.0);\n    \n    float a = atan(p.y, p.x);\n    float segmentA =  sin(a * 12.0 + t) * 0.1 + 0.07;\n    float segmentB = -sin(a * 12.0 - t) * 0.1 + 0.07;\n    \n    float ringASize = 0.4 + sm * 0.1;\n    float ringBSize = 0.4 - sm * 0.1;\n    float width = 0.5;\n    \n    float bigCircleA = Circle(p, ringASize + ringASize * width);\n    \n    float smallCircleA = Circle(p, ringASize);\n    \n    float bigCircleB = Circle(p, ringBSize + ringBSize * width);\n    \n    float smallCircleB = Circle(p, ringBSize);\n    \n    float ringA = Substraction(bigCircleA, smallCircleA);\n    float ringB = Substraction(bigCircleB, smallCircleB);\n    \n    return Union(Intersection(ringA, segmentA), Intersection(ringB, segmentB));\n}\n\nfloat Render(vec2 p)\n{\n    float dist = SDF(p);\n    return smoothstep(0.0, smoothing, -dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv.xy * vec2(2.0) - vec2(1.0);\n    float aspect = iResolution.x / iResolution.y;\n    p.x *= aspect;\n    \n#if 1\n    vec3 color = vec3(0.1, 0.4, 0.1);\n    float alphaBackground = Render(p * 0.3 + vec2(0.6, 0.5));\n    color = mix(color, vec3(0.1, 0.45, 0.1), alphaBackground);\n    float alphaBackground2 = Render(p * 0.3 - vec2(0.7, 0.6));\n    color = mix(color, vec3(0.25, 0.4, 0.1), alphaBackground2);\n    float alpha = Render(p);\n    color = mix(color, vec3(0.6, 0.8, 0.6), alpha);\n\tfragColor = vec4(color, 1.0);\n\n#else\n    float alpha = Render(p);\n\tfragColor = color * alpha;\n#endif\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}