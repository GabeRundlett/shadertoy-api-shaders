{
    "Shader": {
        "info": {
            "date": "1549359228",
            "description": "sacred shrubs",
            "flags": 0,
            "hasliked": 0,
            "id": "tdB3zV",
            "likes": 8,
            "name": "sacred shrubs",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "ukeyshima",
            "viewed": 17003
        },
        "renderpass": [
            {
                "code": "precision mediump float;\n\nvec3 cPos = vec3(0.0, 0.0, -10.0);\nconst vec3 cDir = vec3(0.0, 0.0, 1.0);\nconst vec3 cUp = vec3(0.0, 1.0, 0.0);\nconst float depth = 1.0;\nconst vec3 lPos = vec3(10.0, 10.0, -10.0);\nconst float ambientColor = 0.5;\n\nvec3 rotate(vec3 p, float angle, vec3 axis) {\n  vec3 a = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float r = 1.0 - c;\n  mat3 m =\n      mat3(a.x * a.x * r + c, a.y * a.x * r + a.z * s, a.z * a.x * r - a.y * s,\n           a.x * a.y * r - a.z * s, a.y * a.y * r + c, a.z * a.y * r + a.x * s,\n           a.x * a.z * r + a.y * s, a.y * a.z * r - a.x * s, a.z * a.z * r + c);\n  return m * p;\n}\n\nfloat fractalDistFunc(vec3 p) {\n  p = rotate(p, 0.3 - 0.015 * iTime, vec3(0.0, 0.0, 1.0));\n  float r = 1.9;\n  p.y = mod(p.y, 6.0) - 3.0;\n  p.xz = mod(p.xz, 3.0) - 1.5;\n  for (float i = 0.0; i < 8.0; i++) {\n    p = abs(p) - vec3(1.1 * mix(2.0, 0.6,\n                                smoothstep(abs(mod(iTime * 10.0, 100.0) - 50.0),\n                                           0.0, 1.0)),\n                      0.5, 2.7);\n    float s = clamp(length(p), 0.17, 0.91);\n    p = p / s;\n    p -= vec3(0.5, 1.8, 0.2) * exp(-i);\n    r /= s;\n  }\n  return length(p / r);\n}\n\nfloat distFunc(vec3 p) { return fractalDistFunc(p); }\n\nvec3 getNormal(vec3 p) {\n  float d = 0.001;\n  return normalize(\n      vec3(distFunc(p + vec3(d, 0.0, 0.0)) - distFunc(p + vec3(-d, 0.0, 0.0)),\n           distFunc(p + vec3(0.0, d, 0.0)) - distFunc(p + vec3(0.0, -d, 0.0)),\n           distFunc(p + vec3(0.0, 0.0, d)) - distFunc(p + vec3(0.0, 0.0, -d))));\n}\n\nvec4 rayMarching(vec3 color, vec2 p) {\n  cPos.z += iTime / 3.0;\n  vec3 cSide = cross(cDir, cUp);\n  vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * depth);\n  vec3 rPos = cPos;\n  float rLen = 0.0;\n  for (float i = 0.0; i < 100.0; i++) {\n    float distance = distFunc(rPos);\n    if (abs(distance) < 0.01) {\n      vec3 normal = getNormal(rPos);\n      vec3 halfLE = normalize(lPos + rPos);\n      float specular = pow(clamp(dot(normal, halfLE), 0.0, 0.1), 20.0);\n      float diffuse = clamp(dot(normal, lPos), 0.0, 1.0) + 0.2;\n      color = (vec3(0.8 * sin(rPos.z + iTime / 50.0 - 5.0),\n                    0.2 * cos(rPos.y + iTime / 70.0 - 2.0),\n                    0.3 * cos(rPos.z * iTime / 80.0)) *\n                   diffuse +\n               specular + ambientColor);\n      break;\n    }\n    rLen += distance * 1.2;\n    rPos = cPos + rLen * ray;\n  }\n  return vec4(color,1.0-clamp(rLen,0.0,1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 p =\n      (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n  vec4 color = rayMarching(vec3(0.1), p);\n  fragColor = color;\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"sacred shrubs\",\n\t\"description\": \"Lorem ipsum dolor\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}