{
    "Shader": {
        "info": {
            "date": "1653602303",
            "description": "Calculates the transform between a camera and a line segment with midpoint, such that the rays through the 3 image points intersect 3 points of that segment.\n\nMouse: manually move image points / directions.",
            "flags": 32,
            "hasliked": 0,
            "id": "7s3yRS",
            "likes": 2,
            "name": "2D Transform from Line+Midpoint",
            "published": 3,
            "tags": [
                "geometry",
                "transform",
                "projective"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "// The interesting bits:\n//   void Common::recover_transform(inout State z);\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    C = image(O, iResolution, iMouse, iFrame, iTime, iChannel0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct View\n{\n    float f;\n    vec2 uv;\n    vec2 mouse;\n    vec2 click;\n    bool down;\n    bool clicked;\n};\n\nvoid init(inout View v, vec2 O, vec3 R, vec4 mouse)\n{\n    v.f = R.x / 10.;\n    vec2 o = vec2(0, R.y) / 2.;\n    v.uv = (O - o) / v.f;\n    v.mouse = (abs(mouse.xy) - o) / v.f;\n    v.click = (abs(mouse.zw) - o) / v.f;\n    v.down = mouse.z > 0.;\n    v.clicked = mouse.w > 0.;\n}\n\nconst int N = 3;\nstruct State\n{\n    float screen[N];\n\n    int selected_point;\n    \n    mat2x3 T;\n};\n\nvoid recover_transform(inout State z)\n{\n    float i, j, k, i0, i1, j0, j1, k0, k1, c, s, r;\n\n    i = z.screen[0];\n    j = z.screen[1];\n    k = z.screen[2];\n\n    i0 = k - j;\n    i1 = i * i0;\n\n    j0 = -2. * (i - k);\n    j1 = j * j0;\n\n    k0 =  2. * (i - j);\n    k1 = k * k0;\n\n    c = k0 - j0;\n    s = k1 - j1;\n    r = length(vec2(c, s));\n    r *= i0 < 0. ? -1. : 1.;\n    \n    z.T = mat2x3(\n        i0, c, -s,\n        i1, s,  c\n    ) / r;\n}\n\nvoid load(inout State z, sampler2D A)\n{\n    vec4 t;\n    t = texelFetch(A, ivec2(0, 0), 0);\n    z.selected_point = int(t.y);\n\n    for (int i=0 ; i<N ; ++i)\n    {\n        t = texelFetch(A, ivec2(1, i), 0);\n        z.screen[i] = t.x;\n    }\n    \n    recover_transform(z);\n}\n\nvec4 save(State z, ivec2 O)\n{\n    vec4 t = vec4(0);\n    if (O == ivec2(0, 0))\n    {\n        t.y = float(z.selected_point);\n    }\n    \n    for (int i=0 ; i<N ; ++i)\n        if (O == ivec2(1, i))\n            t.x = z.screen[i];\n    \n    return t;\n}\n\nvoid demo(inout State z, vec4 M, int iFrame, float iTime)\n{\n    if (iFrame == 0)\n    {\n        z.screen[0] = -0.05;\n        z.screen[1] = 0.3;\n        z.screen[2] = -0.2;\n    }\n    if (M == vec4(0))\n    {\n        float t = (iTime - 17.6) / 5.;\n        float x = cos(t * 1.3481) * 2. + cos(t * 5.1439) + 4.;\n        float y = sin(t * 3.2419);\n        float a = t * 3. + cos(t) * 5.;\n        float c = cos(a) / 2.;\n        float s = sin(a) / 2.;\n        z.screen[0] = y / x;\n        z.screen[1] = (y - s) / (x - c);\n        z.screen[2] = (y + s) / (x + c);\n    }\n}\n\nfloat ray(vec2 x, vec2 t)\n{\n    return abs(dot(x, normalize(t).yx * vec2(-1, 1)));\n}\n\nfloat ray(vec2 x, State z, int i)\n{\n    return ray(x, vec2(1, z.screen[i]));\n}\n\nvec4 bufferA(vec2 O, vec3 R, vec4 M, int iFrame, float iTime, sampler2D A)\n{\n    View v; init(v, O, R, M);\n    State z; load(z, A); demo(z, M, iFrame, iTime);\n    if (!v.down)\n        z.selected_point = -1;\n    if (v.clicked)\n    {\n        int closest = 0;\n        for (int i=1 ; i<N ; ++i)\n            if (ray(v.mouse, z, i) < ray(v.mouse, z, closest))\n                closest = i;\n        float r = ray(v.mouse, z, closest);\n        z.selected_point = r < 20. / v.f ? closest : -1;\n    }\n    for (int i=0 ; i<N ; ++i)\n        if (v.down && z.selected_point >= 0 && i==z.selected_point)\n            z.screen[i] = v.mouse.y / v.mouse.x;\n    return save(z, ivec2(O));\n}\n\nvoid blend(inout vec4 C, vec3 c, float r)\n{\n    C = mix(C, vec4(c, 1), clamp(r, 0., 1.));\n}\n\nvoid blend(inout vec4 C, vec4 c)\n{\n    blend(C, c.xyz, c.w);\n}\n\nvoid circle(inout vec4 C, View v, vec3 c, vec2 center, float r)\n{\n    float l = r - length(v.uv - center) * v.f;\n    blend(C, vec3(1), l + 1.);\n    blend(C, c, l);\n}\n\nView transform(View v, mat2x3 T)\n{\n    mat3x3 M = inverse(mat3x3(1, 0, 0, T[0], T[1]));\n    T = mat2x3(M[1], M[2]);\n    v.uv = vec3(1, v.uv) * T;\n    v.mouse = vec3(1, v.mouse) * T;\n    return v;\n}\n\nconst vec3 colors[] = vec3[](\n    vec3(0),\n    vec3(1, 0.3, 0),\n    vec3(0,   0, 1),\n    vec3(1,   0, 0)\n);\n\nvoid object(inout vec4 C, View v, float iTime)\n{\n    vec2 x = vec2(abs(v.uv.x), v.uv.y);\n    float y = sin(v.uv.x*6.28) * sin(iTime * 5.) * 0.05;\n    float l = 2. - length(x - vec2(min(.5, x.x), y)) * v.f;\n    vec3 c;\n    c = mix(colors[0], v.uv.x < 0. ? colors[1] : colors[2], abs(v.uv.x * 2.));\n    blend(C, c, l);\n\n    circle(C, v, colors[1], vec2(-0.5, 0), 3.);\n    circle(C, v, colors[0], vec2( 0.0, 0), 3.);\n    circle(C, v, colors[2], vec2( 0.5, 0), 3.);\n}\n\nvec4 image(vec2 O, vec3 R, vec4 M, int iFrame, float iTime, sampler2D A)\n{\n    View v; init(v, O, R, M);\n    State z; load(z, A);\n    vec4 C = vec4(1, 1, 1, 0);\n    \n    // object\n    object(C, transform(v, z.T), iTime);\n\n    // image plane\n    blend(C, vec3(0), 1. - abs(v.uv.x - 1.) * v.f);\n\n    for (int i=0 ; i<N ; ++i)\n    {\n        float r = 3., l = 1.;\n        if (z.selected_point == i)\n        {\n            r = 5.;\n            l = 1.5;\n        }\n        vec2 image_point = vec2(1, z.screen[i]);\n        \n        // ray\n        blend(C, colors[i], l - ray(v.uv, image_point) * v.f);\n        \n        // image point\n        circle(C, v, colors[i], image_point, r);\n    }\n    C = sqrt(C);\n    return C;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 C, vec2 O)\n{\n    C = bufferA(O, iResolution, iMouse, iFrame, iTime, iChannel0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}