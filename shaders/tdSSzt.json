{
    "Shader": {
        "info": {
            "date": "1554745436",
            "description": "Linux mint logo done entirely with distance functions",
            "flags": 0,
            "hasliked": 0,
            "id": "tdSSzt",
            "likes": 4,
            "name": "Linux Mint logo",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mat44",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "const float SIZE = 0.5;\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdRounded( in float p, float r )\n{\n  return p - r;\n}\n\nfloat sdOutline( in float p, in float r )\n{\n  return abs(p) - r;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r ) {\n  return length(p) - r;\n}\n\nfloat weirdShape(vec2 uv) {\n    // Convert 0-1 to -1 to 1\n    uv = uv * 2.0 - 1.0;\n    \n    float sradius = SIZE;\n    float scornerRad = sradius * 0.67;\n    float cornerRad = sradius * 0.73;\n    float sphere1 = sdCircle(uv - vec2(sradius-scornerRad), scornerRad);\n    float sphere2 = sdCircle(uv + vec2(sradius-scornerRad), scornerRad);\n    \n    float off = 0.0;\n    \n    float box1 = sdBox(uv - vec2(sradius-cornerRad, -sradius+cornerRad), vec2(cornerRad));\n    float box2 = sdBox(uv - vec2(-sradius+cornerRad, sradius-cornerRad), vec2(cornerRad));\n    float w = sradius / 4.0 + sradius * 0.1;\n    float box3 = sdBox(uv - vec2(-sradius+w/2.0, sradius*2.0/3.0), vec2(w, sradius / 3.0));\n    return min(min(sphere1, sphere2), min(box1, min(box2, box3)));\n\t//return min(box1, sphere2);\n}\n\nfloat lmLetter(vec2 uv) {\n    // Convert 0-1 to -1 to 1\n    uv = uv * 2.0 - 1.0;\n    \n    float r = SIZE;\n    float thick = r * 0.16;\n    \n    float l1 = sdBox(uv - vec2(-thick*3.0, r/8.0), vec2(thick/2.0, r/2.0));\n    float extra = thick;\n    float l2 = sdBox(uv - vec2(thick/2.0-extra/4.0, -r/2.0), vec2(thick*3.0/2.0+extra, thick/2.0));\n    \n    float center = (-thick*3.0) + (thick*3.5);\n    center /= 2.0;\n    vec2 mirrorUv = vec2(abs(uv.x-center)*-1.0+center, uv.y);\n    float corner = sdOutline(sdRounded(sdBox(mirrorUv, vec2(thick*2.0, r/2.0-thick)), thick), thick/2.0);\n    float cornerCover = sdBox(mirrorUv, vec2(thick*1.7, r));\n    cornerCover = min(cornerCover, sdBox(mirrorUv, vec2(r, r/2.0-thick)));\n    cornerCover = min(cornerCover, sdBox(mirrorUv - vec2(0.0, r/2.0), vec2(r, thick)));\n    \n    corner = max(corner, -cornerCover);\n    \n    float l = min(l1, min(l2, corner));\n    \n    float m1 = sdBox(uv - vec2( thick*3.5, thick*0.5+(r/4.0-r/3.0)), vec2(thick/2.0, r/3.0));\n    float m2 = sdBox(uv - vec2( thick*1.5, thick*0.5), vec2(thick/2.0, r/4.0));\n    float m3 = sdBox(uv - vec2(-thick*0.5, thick*0.5), vec2(thick/2.0, r/4.0));\n    \n    \n    center = (thick*0.5) + (thick*2.5);\n    center /= 2.0;\n    mirrorUv = vec2(abs(uv.x-center)*-1.0+center, uv.y);\n    float mtop = sdCircle(mirrorUv - vec2(thick*0.5, r/4.0), thick*1.5); \n    \n    float mcover = sdCircle(mirrorUv - vec2(thick*0.5, r/4.0), thick*0.5);\n    mcover = min(mcover, sdBox(mirrorUv - vec2(thick*0.5, -thick*3.0/2.0), vec2(thick*3.0)));\n        \n    mtop = max(mtop, -mcover);\n    \n    return min(l, min(mtop, min(m1, min(m2, m3))));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv.x -= 0.4;\n    \n    float border = weirdShape(uv);\n    float lm = lmLetter(uv);\n    vec3 green = vec3(0.0, 0.7, 0.0);\n    if (lm < 0.0) {\n        if (sdBox(uv - vec2(0.5+SIZE/4.0, SIZE-SIZE/4.0+(SIZE*0.16)*0.25), vec2(SIZE/4.0, SIZE/8.0)) < 0.0) {\n            fragColor = vec4(vec3(0.8), 1.0);\n        }else fragColor = vec4(1.0);\n    } else if (border < -0.1) {\n        fragColor = vec4(green, 1.0);\n    } else if (border < 0.0) {\n        fragColor = vec4(1.0);\n    } else {\n        float d = border;\n        vec3 col = vec3(1.0) - sign(d)*(1.0-green-0.5);\n        col *= 1.0 - exp(-2.0*abs(d));\n        col *= 0.8 + 0.2*cos(140.0*d);\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)));\n     \tfragColor = vec4(col, 1.0);   \n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}