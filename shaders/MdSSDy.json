{
    "Shader": {
        "info": {
            "date": "1415617779",
            "description": "Another LED watch.\n\nNote: Yellow LEDs represent seconds, red ones minutes, and green ones hours; all numbers are shown in their binary format (LEDs values from right to left: 1, 2, 4, 8, 16 and 32).",
            "flags": 0,
            "hasliked": 0,
            "id": "MdSSDy",
            "likes": 3,
            "name": "LED Watch [Binary]",
            "published": 3,
            "tags": [
                "led",
                "watch"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 553
        },
        "renderpass": [
            {
                "code": "// Yellow LEDs represent seconds, red ones minutes, and green ones\n// hours; all numbers are shown in their binary format (LEDs values\n// from right to left: 1, 2, 4, 8, 16 and 32).\n\n#define M_PI 3.14159265359\n#define HSV2RGB_FAST\n\nvec3 hsv2rgb (in vec3 hsv) {\n\t#ifdef HSV2RGB_SAFE\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\t#endif\n\t#ifdef HSV2RGB_FAST\n\treturn hsv.z * (1.0 + 0.5 * hsv.y * (cos (2.0 * M_PI * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n\t#else\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n\t#endif\n}\n\nfloat segDist (in vec2 p, in vec4 ab, in float cut) {\n\tp -= ab.xy;\n\tab.zw -= ab.xy;\n\tfloat l = dot (ab.zw, ab.zw);\n\tcut *= sqrt (l);\n\treturn length (p - ab.zw * clamp (dot (p, ab.zw), cut, l - cut) / l);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Get the fragment's position\n\tvec2 frag = 7.0 * (2.0 * fragCoord.xy - iResolution.xy) / iResolution.x;\n\n\t// Define the background lights\n\tvec3 lightColor = vec3(0.0, 0.0, 0.2);\n\tconst float lightCount = 5.0;\n\tfor(float lightId = 0.0; lightId < 1.0; lightId += 1.0 / lightCount) {\n\t\tfloat lightAngle = 2.0 * M_PI * lightId + iTime;\n\t\tlightColor += hsv2rgb (vec3 (lightId + iTime * 0.1, 1.0, 1.0)) / length (frag - 2.0 * vec2 (cos (lightAngle), sin (lightAngle))) * (3.0 + 2.0 * cos (iTime * (1.0 + lightId))) ;\n\t}\n\tlightColor /= lightCount;\n\n\t// Define the casing color\n\tfloat casingColor = 0.3 + 0.2 * cos (frag.x + frag.y + iTime);\n\n\t// Rotate the watch every 5s\n\tfloat fragAngle = 0.1 * sin (iTime * 2.0 * M_PI) * step (4.0, mod (iTime, 5.0));\n\tvec2 fragRotate = vec2 (cos (fragAngle), sin (fragAngle));\n\tfrag = mat2 (fragRotate.x, fragRotate.y, -fragRotate.y, fragRotate.x) * frag;\n\n\t// Define the panel and the border\n\tfloat panelDist = length (frag) - 3.5;\n\tfloat borderDist = panelDist - 0.05;\n\n\t// Define the LEDs\n\tfloat ledThresholdBar2 = step (-0.5, frag.y);\n\tfloat ledThresholdBar3 = step (0.5, frag.y);\n\tvec2 ledPosition = frag + vec2 (0.5 * ledThresholdBar3, 0.5);\n\tfloat ledDist = length (fract (ledPosition) - 0.5);\n\tfloat ledDisplay = step (ledThresholdBar3 * 0.5 - 3.0, -abs (frag.x)) * step (-1.5, -abs (frag.y));\n\n\tfloat ledTime = mod (iDate.w / (1.0 + 59.0 * ledThresholdBar2 + 3540.0 * ledThresholdBar3), 60.0 - 36.0 * ledThresholdBar3);\n\tvec3 ledColor = vec3 (1.0 - ledThresholdBar3, ledThresholdBar3 - ledThresholdBar2 + 1.0, 0.0);\n\tledColor *= step (0.5, fract (ledTime / exp2 (3.0 - floor (ledPosition.x))));\n\n\t// Define the indicators\n\tfloat indicatorDist = min (abs (length (frag - vec2 (-1.0, 1.7)) - 0.08), abs (length (frag - vec2 (-1.0, 1.84)) - 0.06));\n\tindicatorDist = min (indicatorDist, segDist (frag, vec4 (-1.0, 1.8, -1.0, 1.0), 0.3));\n\tindicatorDist = min (indicatorDist, segDist (frag, vec4 (-1.0, 1.0, -0.5, 0.0), 0.3));\n\tindicatorDist = min (indicatorDist, segDist (frag, vec4 (-0.5, 0.0, -0.5, -1.0), 0.3));\n\n\t// Create everything (lights, panel, casing, LEDs, indicators)\n\tvec3 color = lightColor * smoothstep (0.0, 0.2, borderDist);\n\tcolor += vec3 (0.1, 0.1, 0.3) * (0.7 + 0.3 * cos (frag.y * M_PI / 3.5)) * smoothstep (0.0, -0.1, panelDist) * (1.0 - smoothstep (0.15, 0.1, ledDist) * ledDisplay);\n\tcolor += casingColor * smoothstep (0.05, 0.0, max (borderDist, -panelDist));\n\tcolor += ledColor * smoothstep (0.25, 0.1, ledDist) * ledDisplay;\n\tcolor += 0.1 * smoothstep (0.05, 0.0, indicatorDist);\n\n\t// Set the fragment color\n\tfragColor = vec4 (color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}