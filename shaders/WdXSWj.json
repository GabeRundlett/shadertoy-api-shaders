{
    "Shader": {
        "info": {
            "date": "1552115210",
            "description": "tilemap generator (referencing https://simblob.blogspot.com/2010/01/simple-map-generation.html)",
            "flags": 0,
            "hasliked": 0,
            "id": "WdXSWj",
            "likes": 2,
            "name": "Blob Map",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "parameterized",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n        -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n        dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat noiseAlt(vec2 uv)\n{\n    vec2 _uv = uv;\n    uv /= 512.0;\n    uv += vec2(500.0);\n    float v = snoise(uv)*0.5+0.5;\n    v += snoise(uv*2.0)*0.4;\n    v += snoise(uv*4.0)*0.2;\n    v += snoise(uv*8.0)*0.1;\n    v += snoise(uv*16.0)*0.05;\n    v += snoise(uv*32.0)*0.02;\n    v -= 0.2;\n    v = max(v, 0.0);\n    v = pow(v, 2.0);\n    float d = length(_uv);\n    v -= pow(d/256.0, 2.0);\n    v += snoise(_uv/128.0 - vec2(500.0))*0.15 + 0.7;\n    //v = max(v, 0.0);\n    return v;\n}\n\nfloat noiseMoist(vec2 uv)\n{\n    uv /= 512.0;\n    float v = snoise(uv)*0.5+0.5;\n    v += snoise(uv*2.0)*0.4;\n    v += snoise(uv*4.0)*0.2;\n    v += snoise(uv*8.0)*0.1;\n    v += snoise(uv*16.0)*0.05;\n    v += snoise(uv*32.0)*0.02;\n    v += 0.1;\n    v = max(v, 0.0);\n    v = pow(v, 2.0);\n    return v;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord - iResolution.xy*0.5;\n    float scale = sin(iTime*0.5)*0.5 + 0.75;\n    //scale = 1.0;\n    uv += (iMouse.xy - iResolution.xy*0.5)/scale*(1.25 - scale);\n    uv.y = -uv.y;\n    uv *= scale;\n    vec2 p = floor(uv);\n    \n    float alt = noiseAlt(p);\n    float moist = noiseMoist(p);\n    \n    vec3 c = vec3(0.0, 0.0, 152.0); // ocean\n    if (alt > 0.01) {\n        c = vec3(173.0, 139.0, 75.0); // sand\n    }\n    if (alt > 0.1) {\n        c = vec3(195.0, 190.0, 142.0); // sand2\n        if (moist > 0.1) {\n            c = vec3(150.0, 152.0, 44.0); // grass1\n        }\n        if (moist > 0.2) {\n            c = vec3(48.0, 60.0, 31.0); // grass2\n        }\n        if (moist > 0.4) {\n            c = vec3(80.0, 96.0, 57.0); // grass3\n        }\n        if (moist > 0.6) {\n            c = vec3(72.0, 147.0, 79.0); // grass4\n        }\n        if (moist > 0.8) {\n            c = vec3(95.0, 137.0, 40.0); // grass5\n        }\n    }\n    if (alt > 0.8) {\n        if (moist < 0.6) {\n            c = vec3(254.0, 254.0, 254.0); // snow\n        } else {\n            c = vec3(181.0, 214.0, 223.0); // ice\n        }\n    }\n    \n    float adx = alt - noiseAlt(p - vec2(1.0, 0.0));\n    float ady = alt - noiseAlt(p - vec2(0.0, 1.0));\n    vec3 normal = normalize(vec3(adx, ady, 0.1));\n    vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n    float light_val = max(dot(normal, light), 0.0) + 0.4;\n    \n    fragColor = vec4(c/255.0*light_val, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}