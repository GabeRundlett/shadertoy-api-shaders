{
    "Shader": {
        "info": {
            "date": "1592398511",
            "description": "Trying out persistence \nThanks to pato and his shader https://www.shadertoy.com/view/XllBRj for the tips :)",
            "flags": 32,
            "hasliked": 0,
            "id": "WlsyzB",
            "likes": 2,
            "name": "Very simple buffer",
            "published": 3,
            "tags": [
                "buffer"
            ],
            "usePreview": 0,
            "username": "Oggbog",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 F, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x += .5;\n    \n\tF *= 0.;\n    float d= 0.;\n    for (int y = 0; y < balls; y++) {\n    \tvec4 c = texelFetch(iChannel0, ivec2(0, y), 0);\n    \td += smoothstep(radius,radius-0.001,length(uv-c.xy));\n        //F = mix(F,vec4(vec3(d),1.0),d/2.)*vec4(1.,0.,0.,1.);\n    } \n    F = vec4(vec3(d),0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash12(vec2 p) {\n\tfloat h = dot(p , vec2(120.1,311.7));\t\n    return fract(abs(sin(h)*43758.5453123))*(1.-2.*radius)+radius*2.;\n}\n\nvoid mainImage(out vec4 C, in vec2 fragCoord)\n{\n    C = vec4(-.5);\n    \n    if (int(fragCoord.x) == 0 && int(fragCoord.y) < balls) {        \n\t\tfloat w = iResolution.x/iResolution.y/2.;\n        \n        // First frame - randomize \n        if (iFrame == 0) {            \n            \n            // initial position\n            C.x = 0.5;\n            C.y = 0.5;\n            //C.y = hash12(fragCoord.xy)-radius;\n            \n            // initial speed vector\n            C.z = hash12(fragCoord.xy * C.xy);          \n            C.w = hash12(fragCoord.yx * C.xy);            \n            \n        \n        // after first frame - move\n        } else {\n            C = texelFetch(iChannel0, ivec2(fragCoord.xy), 0) -.5;  \n\t\t\t\n            if (C.x > w-radius){\n                C.x = w-radius;\n                C.z = -C.z;\n            }\n            if (C.x < -w+radius){\n                C.x = -w+radius;\n                C.z = -C.z;\n            }\n            C.x += C.z*iTimeDelta;\n            \n            if (C.y > 0.5-radius){\n                C.y = 0.5-radius;\n               C.w = - C.w; \n            }\n            if (C.y < -0.5+radius){\n                C.y = -0.5+radius;\n               C.w = - C.w; \n            }\n            C.y += C.w*iTimeDelta;\n            \n            C += 0.5;\n    \t\t        \n        }\n\t\t\n    }\t\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define balls 200\n#define radius 0.01",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}