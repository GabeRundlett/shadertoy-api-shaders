{
    "Shader": {
        "info": {
            "date": "1590537246",
            "description": "coded on evvvvil's stream",
            "flags": 0,
            "hasliked": 0,
            "id": "td2BR3",
            "likes": 7,
            "name": "Day 159 [twitch]",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "vec3 glow = vec3(0);\n\nvec3 glowb = vec3(0);\n\nvec3 att = vec3(1);\n\nfloat sdBox(vec3 p, vec3 s){\n  p = abs(p) - s;\n  return max(p.y,max(p.z,p.x));\n\n}\n\n#define dmin(a,b) a.x < b.x ? a :b\n  \n#define T iTime\n  \n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n\nvec2 map(vec3 p){\n  vec2 d = vec2(10e6);\n  \n  vec4 q = vec4(p,1);\n  \n  \n  float dpp = dot(q.xyz,q.xyz);\n  q /= dpp;  \n  \n  q.xy += sin(T)/5.;\n  \n  \n  for(int i = 0; i <13; i++){\n    float dpp = dot(q.xyz,q.xyz);\n    q = abs(q)/dpp - vec4(0.22,0.2,0.1,0);\n    \n    q.xy *= rot(0.4+sin(T)/2000.);    \n    \n  }\n  float b = sdBox(q.xyz,vec3(1.4,3.4,1.1)*q.w/4.);\n  float bb = sdBox(q.xyz-vec3(-.2,0.,0.5),vec3(1.9,3.4,1.1)*q.w/2.);\n  \n  float bc = sdBox(q.xyz-vec3(0.04,0.2,0.5),vec3(1.9,1.4,3.1));\n  \n  \n  //glowb += exp(-abs(bc)*20.);\n  \n  \n  d = dmin(d, vec2(b, 2.));\n  d = dmin(d, vec2(bb, 1.));\n  \n  glow += 0.02/(0.2+d.x*d.x*4.);\n  \n  d.x *= 0.2/q.w;\n  \n  return d;\n}\n\nvec3 getNormal(vec3 p){\n  vec2 t = vec2(0.001,0.);\n  return normalize(map(p).x - vec3(\n    map(p-t.xyy).x,\n    map(p-t.yxy).x,\n    map(p-t.yyx).x\n  ));\n}\n\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  vec3 col = vec3(0);\n  \n  vec3 ro = vec3(0,1.5,4.)*4.;\n  \n  vec3 lookAt = vec3(0);\n  \n  vec3 dir = normalize(lookAt - ro);\n  vec3 right = normalize(cross(vec3(0,1,0),dir));\n  vec3 up= normalize(cross(dir, right));\n  \n  vec3 rd = normalize(dir + right*uv.x+ up*uv.y);\n  \n  \n  \n  \n  vec3 p = ro; float t =0.; bool hit = false;\n  vec2 d;\n  for(int j = 0; j <1;j ++){\n  \n    for(int i = 0; i <290;i ++){\n      d = map(p);\n      if(d.x < 0.001){\n        hit = true;\n        break;\n      }\n      t += d.x;\n      p += rd*d.x;\n    }\n  }\n  \n   \n    #define AO(j) smoothstep(0.,1.,map(p+n*j).x/j)\n  vec3 l = normalize(vec3(1,-1,1));\n  if(hit ){\n    vec3 n = getNormal(p);\n    float fres = pow(1.- max(dot(n,-rd),0.),5.);\n    float antifres = smoothstep(0.,1.,(1.-fres)*0.4);\n    float diff = max(dot(n,l),0.);\n    if(d.y == 1.){\n      col +=  AO(0.3)*AO(0.04)*antifres*306.* ( 0.4*(diff+0.4)*fres)*glow*pal(0.5,0.5,vec3(1,0.2,0.1),1., length(p) + T);\n    }\n    if(d.y == 2.){\n      col += 0.1*diff*glow*pal(0.5,0.5,vec3(1,0.2,0.1),1., length(p) + T+4.);\n    }\n  \n  } else {\n  \t//col += glow*1000.2001;\n    col += 0.2*pal(0.5,0.5,vec3(1.,0.4,0.1),1.,length(uv)+T);\n    //col += glow*0.004*att;\n  }\n    //col += glow;\n  \n  col *= 1. - dot(uv,uv)*0.7;\n  //col += glowb;\n  \n  col = max(col,0.);\n  col = pow(col,vec3(0.45454));\n  fragColor = vec4(col,1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}