{
    "Shader": {
        "info": {
            "date": "1550187136",
            "description": "inspired by skaplun's [url]https://www.shadertoy.com/view/3s2GW3[/url], \nbut with analytical ray-intersection instead of marching, which allows free antialiasing using hardware derivatives.",
            "flags": 0,
            "hasliked": 0,
            "id": "ws23D3",
            "likes": 42,
            "name": "drain vortex marching-less",
            "published": 3,
            "tags": [
                "cubic",
                "polynomial",
                "tuto",
                "solve",
                "degree3"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1056
        },
        "renderpass": [
            {
                "code": "// inspired by skaplun's https://www.shadertoy.com/view/3s2GW3 , \n// but with analytical ray-intersection instead of marching.\n    \n#define AA          ( 10./iResolution.y )\n#define rMat(x)      mat2( cos(x), -sin(x), sin(x), cos(x) )\n#define cart2pol(U)  vec2( length(U), atan((U).y,(U).x) )\n\nfloat noise( vec3 x ){\n    vec3 p = floor(x),\n         f = fract(x);\n\tf = f*f*(3.-2.*f);                       // smoothstep\n\tvec2 uv = (p.xy+vec2(37,17)*p.z) + f.xy, // emulates 3D noise\n\t     rg = texture( iChannel0, (uv+.5)/256., -100. ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\nvec3 twist(vec3 p, float twistAmount){\n    float t = (length(p.xz) + p.y) * twistAmount;\n    p.xz *= rMat(-t);\n    return p; \n}\n\n// --- render scene\n// sink shape: P.z = -1/|P.xy|²  ; solve with ray P = P0+lD\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n    vec3 P = .8*vec3(0., 7.5, 4),\n      look = normalize( vec3(0,1,0) - P ),\n     right = normalize(cross(look, vec3(0,0,1))),\n        up = cross( right, look ),\n         D = normalize( look*3.5 + U.x*right + U.y*up );\n\n    // --- Solving a*x³ +b*x³ +c*x +d = 0. -> l = min(3 solutions)\n    // using \"solving cubic polynomial\"  https://shadertoy.com/view/3d23Dc\n    // here: (P² +2lP.D + l²D²)xy * (P  + lD)z = -1\n    float a =   dot(D.xy,D.xy)*D.z,\n          b = ( dot(D.xy,D.xy)*P.z +2.*dot(P.xy,D.xy)*D.z ) /a, \n          c = ( dot(P.xy,P.xy)*D.z +2.*dot(P.xy,D.xy)*P.z ) /a, \n          d = ( dot(P.xy,P.xy)*P.z + 1. ) /a,\n        p = ( 3.*c - b*b ) / 3.,\n        q = ( 9.*b*c - 27.*d - 2.*b*b*b) / 27., // -\n        Q = p/3., r = q/2., \n        v,z, l, A, k = -1.;\n    \n    if ( Q*Q*Q + r*r < 0.) {                    // --- if 3 sol\n        A = acos(r/sqrt(-Q*Q*Q)), \n        k = round(1.5-A/6.283); // k = 0,1,2 ; we want min l\n#define sol(k) ( 2.*sqrt(-Q)* cos((A+(k)*6.283)/3.) - b/3. )\n        l = sol(k);\n    }\n    else                                        // --- if 1 sol\n        if (p>0.) v = -2.*sqrt(p/3.), \n#define asinh(z) ( sign(z)*asinh(abs(z)) )      // fix asinh() symetry error \n                  l = -v* sinh(asinh(3.*-q/p/v)/3.) -b/3.; \n        else      v = -2.*sqrt(-p/3.), \n                  l = sign(-q)*v* cosh(acosh(3.*abs(q)/p/v)/3.) -b/3.;\n\n          // --- display\n\n    if (l<0.) { O-=O; return; }\n    P += l*D;\n#if 0                                           // debug\n    O = texture(iChannel0,.3*P.xy+.2*iTime) * exp(-.1*l);\n  //O = vec4( exp(-.1*l));\n  //O = vec4(.5+.5*sign(P)*fract(10.*P),0);\n#else    \n    P = 2.*P.xzy;\n    P.xz *= rMat( -iTime * .5);\n    P = twist(P, -.25);\n\n    vec2 pol = cart2pol(P.xz);\n    float clr = noise( vec3( (pol.x + iTime) * 2. , pol.y * 25., iTime * .05));\n  //O = vec4( smoothstep(.3 + AA, .3, clr) );\n    O = vec4( smoothstep(.75, -.75, (clr-.3)/fwidth(clr) ) );\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}