{
    "Shader": {
        "info": {
            "date": "1563341019",
            "description": "Visualize the relative difference between 1/x and a fast approximation of 1/x-- rather strange bicylinder shape going on here\n\nfloat rcp_approx(float inX){\n\tint x = asint(inX);\n\tx = 0x7EF311C2- x;\n\treturn asfloat(x);\n}",
            "flags": 0,
            "hasliked": 0,
            "id": "ttXSzS",
            "likes": 1,
            "name": "Visualize Fast RCP Error",
            "published": 3,
            "tags": [
                "fast",
                "approximate",
                "rcp"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "//Fast rcp from https://github.com/michaldrobot/ShaderFastLibs\n\n// Derived from batch testing\n// TODO : Should be improved\n#define IEEE_INT_RCP_CONST_NR0              0x7EF311C2  \n#define IEEE_INT_RCP_CONST_NR1              0x7EF311C3 \n#define IEEE_INT_RCP_CONST_NR2              0x7EF312AC  \n\n// Derived from batch testing\n#define IEEE_INT_SQRT_CONST_NR0             0x1FBD1DF5   \n\n// Biases for global ranges\n// 0-1 or 1-2 specific ranges might improve from different bias\n// Derived from batch testing\n// TODO : Should be improved\n#define IEEE_INT_RCP_SQRT_CONST_NR0         0x5f3759df\n#define IEEE_INT_RCP_SQRT_CONST_NR1         0x5F375A86 \n#define IEEE_INT_RCP_SQRT_CONST_NR2         0x5F375A86  \n\n//\n// Normalized range [0,1] Constants\n//\n#define IEEE_INT_RCP_CONST_NR0_SNORM_01        0x7EEF370B\n#define IEEE_INT_SQRT_CONST_NR0_SNORM_01      0x1FBD1DF5\n#define IEEE_INT_RCP_SQRT_CONST_NR0_SNORM_01   0x5F341A43\nint asint(float a){\n return floatBitsToInt(a);   \n}\nfloat asfloat(int a){\n return intBitsToFloat(a);   \n}\n\nfloat rcpIEEEIntApproximation(float inX, const int inRcpConst)\n{\n\tint x = asint(inX);\n\tx = inRcpConst - x;\n\treturn asfloat(x);\n}\nfloat fastRcpNR0(float inX)\n{\n\tfloat  xRcp = rcpIEEEIntApproximation(inX, IEEE_INT_RCP_CONST_NR0);\n\treturn xRcp;\n}\nfloat fastRcpNR0_01(float inX)\n{\n\tfloat  xRcp = rcpIEEEIntApproximation(inX, IEEE_INT_RCP_CONST_NR0_SNORM_01);\n\treturn xRcp;\n}\nfloat rcpNewtonRaphson(float inX, float inRcpX)\n{\n\treturn inRcpX * (-inRcpX * inX + 2.0f);\n}\nfloat fastRcpNR1(float inX)\n{\n\tfloat  xRcp = rcpIEEEIntApproximation(inX, IEEE_INT_RCP_CONST_NR1);\n\txRcp = rcpNewtonRaphson(inX, xRcp);\n\treturn xRcp;\n}\n//The reference\nfloat get_rcp(float a){\n    return 1.0/a;\n}\n//The approximation\nfloat get_rcp_approx(float a){\n    return fastRcpNR0(a);\n}\nvec2 get_rcp(vec2 a){\n return vec2(get_rcp(a.x), get_rcp(a.y));   \n}\nvec2 get_rcp_approx(vec2 a){\n return vec2(get_rcp_approx(a.x), get_rcp_approx(a.y));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord*sin(iTime*0.02);///iResolution.xy;\n\n   \tvec2 reference = get_rcp(uv);\n    vec2 approx = get_rcp_approx(uv);\n    \n    vec2 dif = reference-approx;\n    \n    //vec2 relative_error = 1.0 - abs(reference/approx);\n    vec2 relative_error = abs(approx-reference)/reference;\n    \n    vec3 col;\n    col.xy = abs(relative_error)*15.0;\n    col.x = max(col.x,col.y);//make some sweet bicylinders\n\n    col.y = 0.0;\n    col.z = 0.0;\n\n    fragColor = vec4((col),1.0);\n}\n\n/*\nvec3 ColorIt(float e){\n    e = e*200.0;\n float dx = dFdx(e); \n float dy = dFdy(e);\n float dz = sqrt(1.0 - dx*dx - dy*dy);\n\n return dz*vec3(1.0,0.0,0.0);\n}*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}