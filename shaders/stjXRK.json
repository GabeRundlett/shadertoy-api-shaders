{
    "Shader": {
        "info": {
            "date": "1628123102",
            "description": "Twisted tourii",
            "flags": 0,
            "hasliked": 0,
            "id": "stjXRK",
            "likes": 1,
            "name": "Looping Rings",
            "published": 3,
            "tags": [
                "torus",
                "twisted"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "// Author: Nicholas Bardy\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This shader is forked from:\n// \"Torus Knot Tutorial\" \n// Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// https://youtu.be/2dzJZx0yngg\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox2d(vec2 p, vec2 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, p.y), 0.);\n}\n\nfloat GetDist(vec3 p) {\n    float r1 = 2.9, r2=.4;\n    vec2 cp = vec2(length(p.xz)-r1, p.y);\n    float a = atan(p.x, p.z); // polar angle between -pi and pi\n    cp *= Rot(a*0.5 + iTime*0.5);\n    cp = abs(cp.xy)-.8;\n    \n    float d = length(cp)-r2;\n    \n    cp *= Rot(a*1.25-iTime*1.0);\n    cp.xy = abs(cp.xy)-.235;\n\n    \n    float d2 = length(cp)-0.17;\n    d = min(d,d2);\n    \n    //cp = abs(cp.xy)-.1;\n    \n    //float d = length(cp)-r2;\n    \n    return d*0.6;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvec3 Bg(vec3 rd) {\n\tfloat k = rd.y*.5+.5;\n    \n    vec3 col = mix(vec3(.2, .1, .1), vec3(.2, .5, 1), k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0.01, 10, 0);\n    //ro.yz *= Rot(sin(iTime*.1)*3.1415/2.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n\t\n    col += Bg(rd);\n    \n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float spec = pow(max(0., r.y), 30.);\n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \tcol = mix(Bg(r), vec3(dif), .5)+spec;\n        //col = vec3(spec);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}