{
    "Shader": {
        "info": {
            "date": "1569581742",
            "description": "Right in time for spooktober.\n(My first shader derived from a beginner tutorial.)",
            "flags": 0,
            "hasliked": 0,
            "id": "wdyGRz",
            "likes": 5,
            "name": "Spoooky",
            "published": 3,
            "tags": [
                "simple",
                "ghost",
                "spooky"
            ],
            "usePreview": 0,
            "username": "klemek",
            "viewed": 750
        },
        "renderpass": [
            {
                "code": "#define debug false\n#define eps 1.5 / iResolution.y\n#define pi4 .785\n#define is2 .0707\n\n#define ratio iResolution.x/iResolution.y\n\nfloat seed = 195845.184613;\n\nfloat rand(float max)\n{\n    seed = fract(100000.0*sin(seed));\n    return seed * max;\n}\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 place(vec2 uv, vec2 pos, float size, float a)\n{\n     return (uv-pos)*size * rot(a);\n}\n\nfloat norm(float i) {\n    return min(max(i, 0.), 1.);\n}\n\nfloat circle(vec2 uv, vec2 p, float r) {\n    float d = length(uv - p);\n    return smoothstep(r, r - eps, d);\n}\n\nfloat rect(vec2 uv, vec2 p, vec2 d, float a) {\n    uv *= rot(a);\n    p *= rot(a);\n    return smoothstep(0., eps, uv.x - p.x) *\n        smoothstep(0., -eps, uv.x - p.x - d.x) *\n        smoothstep(0., eps, uv.y - p.y) *\n        smoothstep(0., -eps, uv.y - p.y - d.y);\n}\n\nvec4 ghost(vec2 uv, float time) {\n    float a = .4 * cos(time * 1.1 + rand(10.));\n    float speed = 5. * cos(time + rand(10.));\n    float radius = .3 * cos(time * .8 + rand(10.));\n    float size = 1. + .1 * cos(time * 1.2 + rand(10.));\n    float eye = cos(time * .75 + rand(10.));\n    vec3 col = 0.5 + 0.5 * cos(time + vec3(0, 2, 4));\n    if (debug)\n    {\n        radius = 0.;\n        a = 0.;\n        size = 1.;\n        eye = 1.;\n    }\n    vec2 p = vec2(\n        cos(time * .9 + speed + rand(10.)) * ratio, \n        sin(time * .9 + speed + rand(10.))\n    ) * radius;\n    uv = place(uv, p + vec2(0., .05), size, a);\n    \n    vec2 assp = vec2(is2, is2);\n\n    float ass = rect(uv, vec2(.15, -.2), assp, pi4) +\n        rect(uv, vec2(.05, -.2), assp, pi4) +\n        rect(uv, vec2(-.05, -.2), assp, pi4) +\n        rect(uv, vec2(-.15, -.2), assp, pi4) +\n        rect(uv, vec2(-.25, -.2), assp, pi4);\n\n    float body = circle(uv, vec2(0.), .2) +\n        rect(uv, vec2(-.2, -.2), vec2(.4, .2), 0.) +\n        rect(uv, vec2(-.2, -.25), vec2(.4, .06), 0.) * ass;\n\n    float eyes =\n        circle(uv, vec2(.08 + .05 * eye, 0.), .05) +\n        circle(uv, vec2(-.08 + .05 * eye, 0.), .05) -\n        circle(uv, vec2(.08 + .08 * eye, 0.), .02) -\n        circle(uv, vec2(-.08 + .08 * eye, 0.), .02);\n\n    float mask = norm(body) - eyes;\n\n    return vec4(vec3(norm(mask)) * col, .5);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    fragColor = ghost(uv, iTime) +\n        ghost(uv, iTime + rand(1000.)) +\n        ghost(uv, iTime + rand(1000.)) +\n        ghost(uv, iTime + rand(1000.));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}