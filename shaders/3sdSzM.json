{
    "Shader": {
        "info": {
            "date": "1572248365",
            "description": "Inktober, but with shaders\n\nWEW not my best thanks for bearing with me through this dark time",
            "flags": 0,
            "hasliked": 0,
            "id": "3sdSzM",
            "likes": 2,
            "name": "shadetober #19 (sling)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "#define TINY .0001\nmat3 roty(float a) { \n    return mat3(\n        cos(a), 0., -sin(a),\n        0., 1., 0.,\n        sin(a), 0., cos(a)\n        );\n}\n\n//---- http://www.flong.com/texts/code/shapers_circ/\nfloat doubleEllipticSigmoid (float x, float a, float b){\n\n  float epsilon = 0.00001;\n  float min_param_a = 0.0 + epsilon;\n  float max_param_a = 1.0 - epsilon;\n  float min_param_b = 0.0;\n  float max_param_b = 1.0;\n  a = max(min_param_a, min(max_param_a, a)); \n  b = max(min_param_b, min(max_param_b, b));\n \n  float y = 0.;\n  if (x<=a){\n    y = b * (1. - (sqrt(a*a - x*x)/a));\n  } else {\n    y = b + ((1.-b)/(1.-a))*sqrt(pow(1.-a,2.) - pow(x-1.,2.));\n  }\n  return y;\n}\n\n// https://iquilezles.org/articles/distfunctions of course\nvec3 opCheapBend( in vec3 p, in float k)\n{\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\n// this doesn't render correctly on my laptop and I have no idea why,\n// looks fine on desktop\n// float sdBox( vec3 p, vec3 b )\n// {\n//   vec3 q = abs(p) - b;\n//   return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n// }\n\nfloat otherSDBox (vec3 p, vec3 c, vec3 s)\n{\n    float x = max\n    (   p.x - c.x - s.x / 2.,\n        c.x - p.x - s.x / 2.\n    );\n \n    float y = max\n    (   p.y - c.y - s.y / 2.,\n        c.y - p.y - s.y / 2.\n    );\n    \n    float z = max\n    (   p.z - c.z - s.z / 2.,\n        c.z - p.z - s.z / 2.\n    );\n \n    float d = x;\n    d = max(d,y);\n    d = max(d,z);\n    return d;\n}\n\nfloat sdSphere(vec3 p) {\n    return length(p) - 1.;\n    //return length(p + vec3(0.,-clamp(sin(iTime)*10.,0.,10.),0.)) - 1.;\n}\n\nfloat sdGround(vec3 p, float k) {\n    return p.y - k;\n}\n\nfloat map(vec3 p) {\n    float fr = fract(iTime);\n    float sigx = (fr > .5 ? 1. - fr : fr) * 2.;\n    float jumpster = doubleEllipticSigmoid(sigx, .2, .51);\n    float sph = sdSphere(p + vec3(0.,-jumpster -.8,0.));\n    float wiggliwoo = (sin(iTime) + 1.) * .3 + .1;\n    float bx = otherSDBox(opCheapBend(p, -sin((4.*iTime + 2.1)) * wiggliwoo), vec3(0.,sin(iTime)*-.2,0.), vec3(5.,.1,3.));\n    //float bx = otherSDBox(opCheapBend(p, .4), vec3(0.), vec3(3.,.1,3.));\n    float d = min(bx, sph);\n    \n    return min(d, sdGround(p, -1.4));\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow(vec3 ro, vec3 rd, float k) {\n    // start the ray a little bit away from\n    // the surface to avoid self intersection\n    float t = .2;\n    float result = 1.;\n    for (int i = 0; i < 10; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        result = min(result, k * d / t);\n        if (result < 0.0001) {\n            return 0.0;\n        }\n        t += d;\n    }\n    return result;\n}\n\nvec3 grad(vec3 p) {\n    vec2 eps = vec2(TINY, 0.);\n    return normalize(map(p) - vec3(map(p - eps.xyy), map(p - eps.yxy), map(p - eps.yyx)));\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float t = 0.;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        if (d < TINY) { return t; }\n        t += d;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    uv += texture(iChannel1, uv + iTime).rg * .04; // a touch of distortion\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).rgb * (1. - length(uv) * .5);//vec3(length(uv)*vec3(sin(iTime),1.-length(uv),.8));\n    \n    vec3 ro = vec3(0., 1., 3.);\n    // old style look straight ahead\n    // vec3 rd = normalize(vec3(uv.xy, -1.));\n    \n    // --- camera look-at ---\n    \n    // bad code ignore sleepy copied from other thing for lookat\n    float fr = fract(iTime);\n    float sigx = (fr > .5 ? 1. - fr : fr) * 2.;\n    float jumpster = doubleEllipticSigmoid(sigx, .2, .51);\n    vec3 sphc = vec3(0.,jumpster -.6 * 2.,-2.);\n    \n    vec3 look = normalize(vec3(.0,-.1,-1.));//normalize(sphc);\n    vec3 right = cross(vec3(0., 1., 0.), look);\n    vec3 up = cross(look, right);\n    vec3 rd = normalize(uv.x * right + uv.y * up + look);\n    \n    float dist = march(ro, rd);\n    if (dist < 10.) { \n        vec3 p = ro + rd * dist;\n        vec3 norm = grad(p);\n        vec3 ld = vec3(0.,1.,0.);\n        vec3 lc = vec3(1.,.97,.92);\n        float incd = dot(norm, ld);\n        float shad = shadow(p, ld, 12.);\n        col = incd * lc * shad;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}