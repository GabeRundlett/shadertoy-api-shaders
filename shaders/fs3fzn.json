{
    "Shader": {
        "info": {
            "date": "1655882533",
            "description": "A dodecagonal library",
            "flags": 0,
            "hasliked": 0,
            "id": "fs3fzn",
            "likes": 17,
            "name": "Reading Room",
            "published": 3,
            "tags": [
                "symmetry",
                "library",
                "book",
                "building"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "// \"Reading Room\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// A dodecagonal library\n\n// (Book titles hidden because of #cancelliterature)\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#if 1\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nvec2 Hashv2v2 (vec2 p);\nfloat IFbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, ltPos, qHit;\nvec2 xzBk, csRf;\nfloat tCur, dstFar, rOcc, rDom, rEx, hDom, hWal, nSecW, nSecD, aHitW, aHitD, bWid,\n   rfAng, rfEx, tnSecW, refSphHt, refSphRad;\nint idObj;\nbool isSh, extVu;\nconst int idDom = 1, idWsup = 2, idRf = 3, idWal = 4, idEntr = 5, idLtop = 6, idLsup = 7,\n   idLmp = 8, idPil = 9, idTab = 10, idChr = 11, idLeg = 12, idBcaseH = 13, idBcaseL = 14,\n   idBk = 15, idCen = 16, idPlat = 17, idRail = 18, idDor = 19, idFlr = 20, idSphr = 21;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qqW, qqD;\n  float dMin, d, a, r, dOcc, dBk, ddz, hd;\n  dMin = dstFar;\n  a = atan (p.z, - p.x) / (2. * pi);\n  aHitW = (floor (nSecW * a) + 0.5) / nSecW;\n  aHitD = (floor (nSecD * a) + 0.5) / nSecD;\n  hd = 2. * hWal + 2. * rfEx + hDom + rDom;\n  r = length (p.xz);\n  dOcc = rOcc - r;\n  qqW = vec3 (Rot2D (p.xz, 2. * pi * aHitW), p.y).xzy;\n  qqD = vec3 (Rot2D (p.xz, 2. * pi * aHitD), p.y).xzy;\n  ddz = 1. - abs (qqD.z);\n  q = qqW;\n  q.xy -= vec2 (- rOcc, 2. * hWal + 2. * rfEx);\n  d = max (max (abs (length (vec2 (q.x, max (q.y - hDom, 0.))) - rDom) - 0.05, dOcc), - q.y);\n  d = max (d, - PrBox2Df (vec2 (abs (q.z) - 0.5, q.y - 1.5), vec2 (0.25, 0.8)));\n  DMINQ (idDom);\n  q = qqD;\n  q.xy -= vec2 (-0.5 * rOcc, hd);\n  d = PrCylDf (q.yzx, 0.05, 0.5 * rOcc);\n  DMINQ (idLtop);\n  q = qqW;\n  q.xy = Rot2Cs (q.xy - vec2 (- rDom - rEx - rOcc, 2. * hWal + 0.05), csRf) - vec2 (0.1, rfEx);\n  d = PrBox2Df (q.xy, vec2 (rEx + 0.3, 0.06));\n  q.x = qqW.x;\n  DMINQ (idRf);\n  q = qqW;\n  q.xy -= vec2 (- rDom - 2. * rEx - rOcc + 0.05, hWal + 0.05);\n  d = PrBox2Df (q.xy, vec2 (0.05, hWal + 0.05));\n  d = SmoothMax (d, - PrBox2Df (vec2 (fract (0.8 * q.z + 0.5) - 0.5, q.y - 1.75),\n     vec2 (0.25, 0.25)), 0.02);\n  q = qqD;\n  q.y -= hWal - 1.3;\n  d = max (d, - PrBox2Df (q.yz, vec2 (1.25, 0.7)));\n  DMINQ (idWal);\n  q.x -= - rDom - 2. * rEx - 1.2;\n  d = max (PrBoxDf (q, vec3 (0.7, 1.35, 0.8)), - PrBox2Df (q.yz, vec2 (1.25, 0.7)));\n  DMINQ (idEntr);\n  q.y -= 0.05;\n  d = max (PrBoxDf (q, vec3 (0.04, 1.25, 0.7)), - PrBox2Df (abs (q.yz) - vec2 (0.52, 0.3),\n     vec2 (0.47, 0.25)));\n  DMINQ (idDor);\n  q = qqW;\n  q.xz = Rot2D (vec2 (q.x, abs (q.z)) - vec2 (- rOcc, rOcc * tnSecW), pi / nSecW);\n  q.y -= 2. * hWal + 2. * rfEx;\n  d = max (max (PrRoundBox2Df (vec2 (length (vec2 (q.x + 0.1, max (q.y - hDom, 0.))) -\n     rDom, q.z), vec2 (0.1, 0.08), 0.02), dOcc), - q.y);\n  DMINQ (idWsup);\n  q.xy -= vec2 (- rDom - 0.05, - hWal - rfEx);\n  d = min (PrCylDf (q.xzy, 0.1, hWal + rfEx), PrCylDf (vec3 (q.xz, abs (q.y) - hWal -\n     rfEx + 0.04), 0.12, 0.04));\n  DMINQ (idPil);\n  q.xy -= vec2 (-2. * rEx - 0.25, - rfEx);\n  d = PrRoundBoxDf (q, vec3 (0.13, hWal + 0.05, 0.1), 0.02);\n  DMINQ (idWsup);\n  q = p;\n  q.y -= hd;\n  d = PrCylDf (q.xzy, 0.5 * rOcc, 0.05);\n  DMINQ (idLtop);\n  q.y -= -0.5 * rDom;\n  d = PrCylDf (q.xzy, 0.1 * rOcc, 0.5 * rDom + 0.05);\n  q = qqW;\n  q.xy -= vec2 (- rOcc, hd - rDom);\n  d = min (d, PrCylDf (q.yzx, 0.02, rOcc));\n  DMINQ (idLsup);\n  q = qqW;\n  q.xy -= vec2 (-2. * rOcc, hd - rDom);\n  d = PrSphDf (q, 0.1);\n  DMINQ (idLmp);\n  q = qqW;\n  q.xy -= vec2 (- rDom - rEx, 2. * hWal + rfEx - 0.2);\n  d = PrCylDf (q.xzy, 0.03, 0.25);\n  DMINQ (idLsup);\n  q.y -= -0.3;\n  d = PrSphDf (q, 0.15);\n  DMINQ (idLmp);\n  q = qqW;\n  q.x = abs (q.x + rDom + rEx + 0.4);\n  q.xy -= vec2 (1.3, 0.9);\n  d = PrRoundBoxDf (q, vec3 (1., 0.03, 0.5), 0.01);\n  DMINQ (idTab);\n  d = PrCylDf ((q - vec3 (0., 0.25, 0.)).xzy, 0.015, 0.2);\n  DMINQ (idLsup);\n  d = PrSphDf (q - vec3 (0., 0.5, 0.), 0.07);\n  DMINQ (idLmp);\n  q.xz = abs (q.xz);\n  q -= vec3 (0.9, -0.45, 0.4);\n  d = PrCylDf (q.xzy, 0.05, 0.45);\n  DMINQ (idLeg);\n  q = qqW;\n  q.x = abs (q.x + rDom + rEx + 0.4);\n  q.xy -= vec2 (1.3, 0.5);\n  q.xz = abs (q.xz) - vec2 (0.5, 0.7);\n  d = PrRoundBoxDf (q, vec3 (0.3, 0.03, 0.25), 0.01);\n  DMINQ (idChr);\n  q.xz = abs (q.xz);\n  q -= vec3 (0.2, -0.25, 0.15);\n  d = PrCylDf (q.xzy, 0.03, 0.25);\n  DMINQ (idLeg);\n  q = qqW;\n  q.z = 2.1 * fract (q.z / 2.1 + 0.5);\n  xzBk.y = floor ((qqW.z + 1.05) / 2.1);\n  q -= vec3 (- rDom - 2. * rEx - 0.2, 1.7, 1.05);\n  d = PrRoundBoxDf (q, vec3 (0.2, 1.7, 0.9), 0.01);\n  dBk = d;\n  q.y -= -0.15;\n  d = max (d, - max (PrBox2Df (vec2 (0.4 * (fract (q.y / 0.4 + 0.5) - 0.5), q.z),\n     vec2 (0.18, 17. * bWid)), abs (q.y - 0.2) - 1.6));\n  d = max (d, ddz);\n  DMINQ (idBcaseH);\n  d = max (q.x - 0.17, max (dBk, ddz));\n  DMINQ (idBk);\n  q = qqW;\n  q.xy -= vec2 (- rDom - 0.5, 0.66);\n  xzBk.x = sign (q.x);\n  q.x = abs (q.x) - 0.7;\n  d = PrRoundBoxDf (q, vec3 (0.22, 0.66, 0.42), 0.01);\n  dBk = d;\n  q.y -= 0.05;\n  d = max (d, - max (PrBox2Df (vec2 (0.4 * (fract (q.y / 0.4 + 0.5) - 0.5), q.z),\n     vec2 (0.18, 8. * bWid)), abs (q.y) - 0.6));\n  d = max (d, ddz);\n  DMINQ (idBcaseL);\n  d = max (abs (q.x) - 0.17, max (dBk, ddz));\n  DMINQ (idBk);\n  q = p;\n  d = PrRoundBox2Df (vec2 (r - (rDom - 1.7), q.y - 0.5), vec2 (0.15, 0.5) - 0.02, 0.01);\n  d = SmoothMax (d, ddz - 0.5, 0.02);\n  DMINQ (idCen);\n  q = p;\n  d = length (vec2 (r - (rDom - 1.7), q.y - 0.98)) - 0.03;\n  d = SmoothMax (d, ddz - 0.45, 0.02);\n  DMINQ (idRail);\n  q = p;\n  d = max (r - (rDom - 1.6), abs (q.y - 0.05) - 0.05);\n  DMINQ (idPlat);\n  q = qqW;\n  d = max (r - (2. * rEx + rDom + 2.), q.y - 0.02);\n  DMINQ (idFlr);\n  if (isSh) {\n    q = p;\n    q.y -= refSphHt;\n    d = PrSphDf (q, refSphRad);\n    DMINQ (idSphr);\n  }\n  q = p;\n  q.y -= 0.5 * (hd - 0.8 * rDom + refSphHt);\n  d = PrCylDf (q.xzy, 0.02, 0.5 * (hd - 0.8 * rDom - refSphHt));\n  DMINQ (idLsup);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float ltDist)\n{\n  float sh, d, h;\n  isSh = true;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = SmoothMin (sh, smoothstep (0., 0.015 * d, h), 0.1);\n    d += h;\n    if (sh < 0.05 || d > ltDist) break;\n  }\n  isSh = false;\n  return 0.8 + 0.2 * sh;\n}\n\nvec3 ShGrid (vec2 p, vec2 g, int stag)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (stag > 0 && 2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.02, 0.03, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.07 * pi * smoothstep (0.4, 0.47, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nfloat FloorAO (vec3 ro)\n{\n  vec3 q;\n  float d, ddz;\n  ddz = abs (Rot2D (ro.xz, 2. * pi * (floor (nSecD * atan (ro.z, - ro.x) / \n     (2. * pi)) + 0.5) / nSecD).y);\n  q = qHit;\n  q.xz = Rot2D (vec2 (q.x, abs (q.z)) - vec2 (- rOcc, rOcc * tnSecW), pi / nSecW);\n  q.x -= - rDom - 0.05;\n  d = length (q.xz) - 0.12;\n  q = qHit;\n  q.x = abs (q.x + rDom + rEx + 0.4) - 1.3;\n  q.xz = abs (q.xz) - vec2 (0.9, 0.4);\n  d = min (d, length (q.xz) - 0.05);\n  q = qHit;\n  q.x = abs (q.x + rDom + rEx + 0.4) - 1.3;\n  q.xz = abs (abs (q.xz) - vec2 (0.5, 0.7)) - vec2 (0.2, 0.15);\n  d = min (d, length (q.xz) - 0.03);\n  q = qHit;\n  q.x = abs (q.x + rDom + 0.5) - 0.7;\n  if (ddz > 1.) d = min (d, PrRoundBox2Df (q.xz, vec2 (0.22, 0.42), 0.01));\n  q = qHit;\n  q.z = 2.1 * fract (q.z / 2.1 + 0.5);\n  q.xz -= vec2 (- rDom - 2. * rEx - 0.2, 1.05);\n  if (ddz > 1.) d = min (d, PrRoundBox2Df (q.xz, vec2 (0.22, 0.9), 0.01));\n  if (ddz > 0.45) d = min (d, abs (length (ro.xz) - (rDom - 1.7)) - 0.14);\n  d = min (d, length (ro.xz) - (rDom - 1.6));\n  return 0.8 + 0.2 * smoothstep (0., 0.03, d);\n}\n\nvec4 ObjCol (vec3 ro, vec3 rd, inout vec3 vn, out vec2 vf)\n{\n  vec4 col4;\n  vec3 rg;\n  vec2 q, s, b;\n  float r, a, h;\n  r = length (ro.xz);\n  a = atan (ro.z, - ro.x);\n  q = vec2 (0.);\n  vf = vec2 (0.);\n  if (idObj <= idEntr) {\n    if (idObj == idDom) {\n      col4 = (length (vec2 (qHit.x, max (qHit.y - hDom, 0.))) > rDom) ?\n         vec4 (1., 0.8, 0., 0.3) : vec4 (0.8, 0.6, 0.4, 0.2);\n      vf = vec2 (64., 0.2);\n    } else if (idObj == idWsup) {\n      col4 = vec4 (0.8, 0.5, 0.4, 0.2);\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idRf) {\n      col4 = (qHit.y > 0.) ? vec4 (1., 0.4, 0.3, 0.2) : vec4 (0.7, 0.3, 0., 0.);\n      col4 *= 0.8 + 0.2 * smoothstep (0., 0.02, min (abs (dot (vec2 (abs (qHit.z), qHit.x),\n         sin (pi / nSecW + vec2 (0.5 * pi, 0.)))), abs (fract (((qHit.y > 0.) ? 1. : 4.) *\n         qHit.x + 0.5) - 0.5)));\n      vf = vec2 (64., 0.2);\n    } else if (idObj == idWal) {\n      col4 = vec4 (0.8, 0.6, 0.4, 0.2);\n      rg = ShGrid (qHit.zy, vec2 (3., 4.), 1);\n      col4 *= rg.y;\n      vn.xz = Rot2D (vn.xz, 2. * pi * aHitW);\n      rg.xz *= sign (vn.x);\n      if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n      else vn.xz = Rot2D (vn.xz, rg.x);\n      vn.xz = Rot2D (vn.xz, -2. * pi * aHitW);\n      vf = vec2 (64., 1.);\n    } else if (idObj == idEntr) {\n      if (abs (vn.y) > 0.9) {\n        col4 = (qHit.y < 0.) ? vec4 (0.5, 0.6, 0.5, 0.2) : vec4 (1., 0.4, 0.3, 0.2);\n      } else {\n        col4 = vec4 (0.8, 0.6, 0.4, 0.2);\n        if (- qHit.x < 0.69) {\n          rg = ShGrid (qHit.xy, vec2 (3., 4.), 1);\n          col4 *= rg.y;\n          vn.xz = Rot2D (vn.xz, 2. * pi * aHitD);\n          rg.xz *= sign (vn.z);\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n          vn.xz = Rot2D (vn.xz, -2. * pi * aHitD);\n        }\n      }\n      vf = vec2 (64., 1.);\n    }\n  } else if (idObj <= idTab) {\n    if (idObj == idLtop) {\n      col4 = vec4 (1., 0.8, 0., 0.3);\n    } else if (idObj == idLsup) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.2);\n    } else if (idObj == idLmp) {\n      col4 = vec4 (1., 1., 0.9, -1.);\n    } else if (idObj == idPil) {\n      col4 = vec4 (1., 0.2, 0.2, 0.2);\n      vf = vec2 (128., 0.5);\n    } else if (idObj == idTab) {\n      col4 = vec4 (0.8, 0.4, 0.2, 0.2);\n      if (PrBox2Df (qHit.xz, vec2 (1., 0.5)) < 0.) q = qHit.zx;\n    }\n  } else if (idObj <= idBk) {\n    if (idObj == idChr) {\n      col4 = vec4 (0.5, 0.3, 0.2, 0.2) * (0.8 + 0.2 * smoothstep (0., 0.01,\n         abs (abs (qHit.x) - 0.25)));\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idLeg) {\n      col4 = vec4 (0.5, 0.5, 0.5, 0.2) * (0.8 + 0.2 * smoothstep (0., 0.02,\n         abs (fract (16. * qHit.y + 0.5) - 0.5) - 0.05));\n      vf = vec2 (64., 0.2);\n    } else if (idObj == idBcaseH) {\n      col4 = vec4 (0.9, 0.4, 0.2, 0.2);\n      if (qHit.y > 1.7) q = qHit.xz;\n      else if (abs (qHit.z) > 0.9) q = qHit.xy;\n      else q = qHit.yz;\n    } else if (idObj == idBcaseL) {\n      col4 = vec4 (0.9, 0.4, 0.2, 0.2);\n      if (qHit.y > 0.61) q = qHit.xz;\n      else if (abs (qHit.z) > 0.4) q = qHit.xy;\n      else q = qHit.yz;\n    } else if (idObj == idBk) {\n      b = vec2 ((qHit.y + 0.2) / 0.4, qHit.z / bWid);\n      s = Hashv2v2 (floor (b.yx) + ((r > rDom + 2. * rEx - 1.) ? nSecW * aHitW + 1.3 * xzBk.y :\n         nSecD * aHitD + 1.3 * xzBk.x));\n      b = fract (b);\n      b.x *= 0.4;\n      b.y -= 0.5;\n      h = 0.32 + 0.06 * s.x - b.x;\n      if (h > 0.) {\n        col4 = vec4 (HsvToRgb (vec3 (s.y, 0.8, 1.)), 0.2) * (1.2 - 0.2 * smoothstep (0., 0.02, h)) *\n           (0.5 + 0.5 * smoothstep (0., 0.04, b.x - 0.002 - 0.03 * b.y * b.y));\n        col4 = mix (vec4 (0.8, 0.8, 0.3, 0.), col4, smoothstep (0., 0.01, min (abs (b.x -\n           0.02 * s.x - 0.07) - 0.012, PrBox2Df (vec2 (b.x - 0.02 * s.x - 0.2, b.y),\n           vec2 (0.07, 0.2)))));\n        vn.xz = Rot2D (vn.xz, 0.35 * pi * b.y);\n        vf = vec2 (64., 0.2);\n      } else col4 = vec4 (0.2, 0.2, 0.2, 0.);\n    }\n  } else if (idObj <= idFlr) {\n    if (idObj == idCen) {\n      col4 = vec4 (0.9, 0.4, 0.2, 0.2);\n      if (ro.y > 0.98) q = vec2 (r, a);\n      else q = vec2 (0.5 * ro.y, a);\n    } else if (idObj == idPlat) {\n      col4 = vec4 (0.6, 0.3, 0.1, 0.2) * (0.8 + 0.2 * smoothstep (0., 0.01,\n         abs (fract (4. * r + 0.5) - 0.5) - 0.02));\n    } else if (idObj == idRail) {\n      col4 = vec4 (0.9, 0.7, 0.2, 0.3);\n    } else if (idObj == idDor) {\n      col4 = vec4 (0.8, 0.4, 0.2, 0.2);\n      q = qHit.zy;\n    } else if (idObj == idFlr) {\n      b = Rot2D (ro.xz, 2. * pi * aHitD);\n      if (- qHit.x < 2. * rEx + rDom + rOcc + 0.05 || - b.x < rDom + 2. * rEx + 1.9 &&\n         abs (b.y) < 0.7) {\n        col4 = vec4 (0.5, 0.6, 0.5, 0.2) * (0.85 + 0.15 * smoothstep (0., 0.01,\n           min (abs (dot (vec2 (abs (qHit.z), qHit.x), sin (pi / nSecW + vec2 (0.5 * pi, 0.)))),\n           abs (fract (qHit.x + 0.5) - 0.5))));\n        q = qHit.xz;\n        col4.rgb *= FloorAO (ro);\n      } else col4 = vec4 (0.5, 0.5, 0.5, 0.1);\n    }\n  }\n  if (q != vec2 (0.)) col4 *= 0.6 + 0.4 * Fbm2 (vec2 (12., 3.) * q);\n  return col4;\n}\n\nvec3 GrndNf (vec2 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return vec3 (normalize (vec3 (Fbm2 (p) - vec2 (Fbm2 (p + e.xy),\n     Fbm2 (p + e.yx)), 4. * e.x)).xzy);\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.02 * (0.1 + 0.9 * IFbm1 (32. * atan (rd.x, rd.z) / pi))) {\n    col = 0.8 * vec3 (0.35, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 5. * tCur + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    col = mix (vec3 (0.3, 0.4, 0.8), clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec4 SphHit (vec3 ro, vec3 rd, float rad)\n{\n  vec3 vn;\n  float b, d, w, dMin;\n  dMin = dstFar;\n  b = dot (rd, ro);\n  w = b * b - dot (ro, ro) + rad * rad;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    if (d > 0.) {\n      dMin = d;\n      vn = (ro + d * rd) / rad;\n    }\n  }\n  return vec4 (dMin, vn);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, ds4;\n  vec3 col, vn, ltDir;\n  vec2 vf;\n  float dstObj, dstSph, ltDist, sh;\n  rOcc = 0.5;\n  rDom = 4.;\n  rEx = 4.;\n  hDom = 2.;\n  hWal = 2.5;\n  nSecW = 12.;\n  nSecD = 4.;\n  tnSecW = tan (pi / nSecW);\n  bWid = 0.05;\n  rfAng = 0.05 * pi;\n  csRf = sin (- rfAng + vec2 (0.5 * pi, 0.));\n  rfEx = - (rEx + 0.2) * csRf.y / csRf.x;\n  refSphRad = 0.4;\n  refSphHt = 4. - cos (0.03 * pi * tCur);\n  isSh = false;\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    dstObj = ObjRay (ro, rd);\n    if (k == 0) {\n      ds4 = SphHit (ro - vec3 (0., refSphHt, 0.), rd, refSphRad);\n      dstSph = ds4.x;\n      if (dstSph < min (dstObj, dstFar)) {\n        ro += dstSph * rd;\n        rd = reflect (rd, ds4.yzw);\n        ro += 0.01 * rd;\n      } else break;\n    }\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = ObjCol (ro, rd, vn, vf);\n    if (! extVu) {\n      ltDist = length (ltPos - ro);\n      ltDir = normalize (ltPos - ro);\n    } else {\n      ltDir = sunDir;\n      ltDist = dstFar;\n    }\n    sh = (idObj != idBk) ? ObjSShadow (ro + 0.01 * vn, ltDir, ltDist) : 1.;\n    if (vf.y != 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    else col = col4.rgb * (0.5 + 0.5 * max (- dot (rd, vn), 0.));\n  } else if (rd.y < 0.) {\n    ro += (- ro.y / rd.y) * rd;\n    vn = GrndNf (0.5 * ro.xz);\n    col = (0.4 * mix (vec3 (0.8, 1., 0.5), vec3 (0.7, 0.9, 0.5), 0.2 +\n       0.8 * smoothstep (0.3, 0.7, Fbm2 (4. * ro.xz)))) * (0.2 + 0.8 * max (dot (vn, sunDir), 0.));\n    col = mix (col, 0.8 * vec3 (0.35, 0.4, 0.5), pow (1. + rd.y, 16.));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, mMid[2], ut[2], mSize, msw;\n  float el, az, zmFac, asp, sr;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./6.) * vec2 (asp, 1.);\n  mMid[0] = (1. - mSize.y) * vec2 (asp, -1.);\n  mMid[1] = (1. - mSize.y) * vec2 (- asp, -1.);\n  for (int k = 0; k < 2; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    for (int k = 0; k < 2; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = k + 1;\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = k + 1;\n      break;\n    }\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  az = 0.;\n  if (vuId == 0) el = -0.02 * pi;\n  else if (vuId == 1) el = -0.07 * pi;\n  else if (vuId == 2) el = 0.;\n  if (mPtr.z > 0. && vuId == regId) {\n    az += 2. * pi * msw.x;\n    el += pi * msw.y;\n  }\n  if (vuId == 0) {\n    el = clamp (el, -0.3 * pi, 0.3 * pi);\n  } else if (vuId == 1) {\n    az = clamp (mod (az + pi, 2. * pi) - pi, -0.8 * pi, 0.8 * pi);\n    el = clamp (el, -0.3 * pi, -0.02 * pi);\n  } else if (vuId == 2) {\n    el = 0.;\n  }\n  vuMat = StdVuMat (el, az);\n  extVu = false;\n  if (vuId == 0) {\n    ro = vec3 (1., 2. , -6.);\n    zmFac = 3.;\n  } else if (vuId == 1) {\n    ro = vuMat * vec3 (0., 3., -50.);\n    zmFac = 4.;\n    extVu = true;\n  } else if (vuId == 2) {\n    ro = vec3 (0., 2. , -6.);\n    zmFac = 0.3;\n  }\n  ltPos = ro + vec3 (2., 2., -4.);\n  dstFar = 150.;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  if (extVu) sunDir = vuMat * sunDir;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize ((vuId == 2) ? vec3 (2. * sin (uvv.x / asp + vec2 (0., 0.5 * pi)), uvv.y).xzy : \n       vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.3, 0.3, 0.7);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. -\n     3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat IFbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 10.;\n  for (int j = 0; j < 3; j ++) {\n    f += floor (a * Noiseff (p));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / (1.75 * a));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}