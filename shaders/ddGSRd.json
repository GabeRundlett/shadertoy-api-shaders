{
    "Shader": {
        "info": {
            "date": "1681440269",
            "description": "It's a fractal tunnel, by way of a Julia-type set and some conformal maps.\n\n Best viewed in full screen",
            "flags": 4,
            "hasliked": 0,
            "id": "ddGSRd",
            "likes": 1,
            "name": "JuliaEllo",
            "published": 3,
            "tags": [
                "fractal",
                "zoom",
                "mobius"
            ],
            "usePreview": 0,
            "username": "elloskelling",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "//from https://www.shadertoy.com/view/4lcGWf\n\n#define AUDIO\n\nconst float PI = 3.14159265359;\nconst vec2 CA = vec2(-0.200,-0.380);\nconst vec2 CB = vec2(-0.610,0.635);\nvec2 CC = vec2(-0.440,0.170);\nconst vec2 CD = vec2(0.170,-0.10); \nconst float C=1.5; \nconst float C2=23.7; \nconst vec3 Color = vec3(0.450,0.513,1.000);\nconst float Speed = 2.;\n#ifdef AUDIO\nfloat iAudio = 0.;\n#else\nconst float iAudio = .15;\n#endif\n\n// Complex functions\nvec2 cis(in float a){ return vec2(cos(a), sin(a));}\nvec2 cMul(in vec2 a, in vec2 b) { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y * b.x);}\nvec2 cDiv(in vec2 a, in vec2 b) { return vec2(a.x*b.x + a.y*b.y, a.y*b.x - a.x*b.y) / (b.x*b.x+b.y*b.y); }\nvec2 cLog(in vec2 a){ return vec2(log(length(a)),atan(a.y,a.x)); }\nvoid fill(inout float[9] k){for( int i=0;i<8;i++) { k[i] = 0.;} }\n// Elliptic J function calculation ported from d3\n// https://github.com/d3/d3-geo-projection/blob/master/src/elliptic.js\nvec4 ellipticJ(float u, float m){\n    float ai, b=sqrt(1.-m), phi, t, twon=1.;\n    float a[9],c[9];\n    fill(a); fill(c);\n\ta[0] = 1.; c[0] = sqrt(m);\n    int i=0;\n    for (int j=1;j<8;j++){\n        if ((c[j-1] / a[j-1]) > 0.1) {\n            i++;\n            ai = a[j-1];\n            c[j] = (ai - b) * .5;\n            a[j] = (ai + b) * .5;\n            b = sqrt(ai * b);\n            twon *= 2.;\n        }\n    }\n    for (int j=8;j>0;j--){\n        if (j == i) phi = twon * a[j] * u;\n        if (j <= i){\n            t = c[j] * sin(b = phi) / a[j];\n            phi = (asin(t) + phi) / 2.;\n        }\n    }\n    return vec4(sin(phi), t = cos(phi), t / cos(phi - b), phi);\n}\n// Jacobi's cn tiles the plane with a sphere \nvec2 cn(vec2 z, float m) {\n    vec4 a = ellipticJ(z.x, m), b = ellipticJ(z.y, 1. - m);\n    return vec2(a[1] * b[1] , -a[0] * a[2] * b[0] * b[2] )/ (b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0]);\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 domain(vec2 z){\n    return vec3(hsv2rgb(vec3(atan(z.y,z.x)/PI*8.+1.224,1.,1.)));\n}\n// A Julia fractal, but with a Mobius transformation instead of a translation\nvec3 M(vec2 z,vec2 c){\n    vec3 mean;\n    float ci;\n    int k=0;\n\tvec3 color;\n    for ( int i=0; i<50;i++){\n        z = cMul(z,z);\n        z = cDiv(cMul(CA,z)+CB+cis(iTime)*iAudio,cMul(z,CC)+CD);          \n        if (i < 3) continue;\n\t \tmean += length(z);\n        float amount = pow(7./float(i),2.608);\n        color = (1.-amount)*color+amount*length(z)*domain(z);\n        k++;\n    }\n\tmean /= float(k-3);\n    // Hacky color time!\n\tci =  log2(C2*log2(length(mean/C)));\n\tci = max(0.,ci);\n    vec3 color2 = .5+.5*cos(ci + Color)+.3;\n\tcolor = color2*(color);\n    \n    return color;\n}\nvec3 color(vec2 z){\n    z = cLog(z) * 1.179;\n    z.x -= mod(iTime/float(Speed),1.)*3.7;\n    z *= mat2(1,-1,1,1);\n    z = cn(z,0.5);\n    return M(z,z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef AUDIO\n    iAudio = texture(iChannel0, vec2(0.1, 0.)).r;\n    iAudio = pow(iAudio,4.);\n\t#endif\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy) / iResolution.y;\n\tfragColor = vec4(color(uv),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}