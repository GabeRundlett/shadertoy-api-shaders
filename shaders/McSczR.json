{
    "Shader": {
        "info": {
            "date": "1721843043",
            "description": "I / O: zoom\narrows: move\nK / L: brightness (upper end)\nM / N: brightness (lower end)",
            "flags": 48,
            "hasliked": 0,
            "id": "McSczR",
            "likes": 0,
            "name": "Keyboard controlled Mandelbrot",
            "published": 3,
            "tags": [
                "2d",
                "mandelbrot",
                "interactive"
            ],
            "usePreview": 0,
            "username": "draradech",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "#define ITER 4000.\n#define ESCA 1000.\n\nvoid mandelbrot(out vec4 fragColor, in vec2 fragCoord)\n{\n    // small side is -1.5 to 1.5\n    vec2 uv = 1.5 * (2. * fragCoord - iResolution.xy) / min(iResolution.yy, iResolution.xx);\n    \n    vec4 data = texelFetch(iChannel0, ivec2(0), 0);\n    vec2 pos = data.xy;\n    float scale = data.z;\n    vec4 data2 = texelFetch(iChannel0, ivec2(1, 0), 0);\n    float bright = data2.x;\n    float start = data2.y;\n    \n    vec2 c = uv * scale + pos;\n    \n    // skip M1 and M2 bulb\n    float c2 = dot(c, c);\n    if (  (256. * c2 * c2 - 96. * c2 + 32. * c.x - 3. < 0.)\n       || (16. * c2 + 32. * c.x + 15. < 0.)\n       )\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    // main loop\n    vec2 z = c;\n    vec2 zz;\n    float n;\n    for(n = 0.; n < ITER; n++)\n    {\n        zz = vec2(z.x * z.x, z.y * z.y);\n        if(zz.x + zz.y > ESCA) break;\n        z = vec2(zz.x - zz.y, 2. * z.x * z.y) + c;\n    }\n    \n    // coloration\n    if(n >= ITER || n == 0.)\n    {\n        fragColor = vec4(0);\n    }\n    else\n    {\n        float lzn = log(zz.x + zz.y) / 2.;\n        n -= log(lzn / log(2.)) / log(2.);\n        n -= start;\n        n = max(n, 0.1);\n        n *= bright * pow(scale, .2);\n        fragColor = min(vec4(pow(n, 1.5), pow(n, .4), pow(n, .2), 1.), 1.);\n    }\n}\n\n#define AA 2.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0);\n    for (float dx = 0.; dx < AA; dx++)\n    {\n        for (float dy = 0.; dy < AA; dy++)\n        {\n            vec2 p = fragCoord + vec2(dx, dy) / AA;\n            vec4 col;\n            mandelbrot(col, p);\n            fragColor += col / AA / AA;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEY_R 82\n\n#define KEY_I 73\n#define KEY_O 79\n\n#define KEY_K 75\n#define KEY_L 76\n#define KEY_M 77\n#define KEY_N 78\n\n#define KEY_LEFT 37\n#define KEY_UP 38\n#define KEY_RIGHT 39\n#define KEY_DOWN 40\n\nbool pressed(int code)\n{\n    return bool(texelFetch(iChannel1, ivec2(code, 0), 0).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x >= 2. || fragCoord.y >= 1.) { discard; return; }\n    \n    vec4 data = texelFetch(iChannel0, ivec2(0), 0);\n    vec2 pos = data.xy;\n    float scale = data.z;\n    vec4 data2 = texelFetch(iChannel0, ivec2(1, 0), 0);\n    float bright = data2.x;\n    float start = data2.y;\n    \n    if (iFrame == 0 || pressed(KEY_R))\n    {\n        scale = 1.0;\n        pos = vec2(-.5, 0);\n        bright = .01;\n        start = -1.;\n    }\n    \n    if (pressed(KEY_UP))  pos.y += scale * 0.01;\n    if (pressed(KEY_LEFT))  pos.x -= scale * 0.01;\n    if (pressed(KEY_DOWN))  pos.y -= scale * 0.01;\n    if (pressed(KEY_RIGHT))  pos.x += scale * 0.01;\n    if (pressed(KEY_I)) scale *= .995;\n    if (pressed(KEY_O)) scale /= .995;\n    if (pressed(KEY_K)) bright *= .98;\n    if (pressed(KEY_L)) bright /= .98;\n    if (pressed(KEY_M)) start += .2;\n    if (pressed(KEY_N)) start -= .2;\n\n    if(floor(fragCoord.x) == 0.) fragColor = vec4(pos, scale, 0);\n    if(floor(fragCoord.x) == 1.) fragColor = vec4(bright, start, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}