{
    "Shader": {
        "info": {
            "date": "1700688349",
            "description": "solar system in nutshell",
            "flags": 0,
            "hasliked": 0,
            "id": "clKcDK",
            "likes": 1,
            "name": "Sun, earth and moon",
            "published": 3,
            "tags": [
                "light",
                "ball",
                "orbit",
                "smooth",
                "movement",
                "solarsystem"
            ],
            "usePreview": 0,
            "username": "vortmax",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "struct ellipse\n{\n    vec2 position;\n    vec2 semi_axis;\n};\n\nstruct polar\n{\n    float fi;\n    float dist;\n};\n\nvec2 screen2uv(vec2 glCoord, vec2 glRes);\nvec2 getAbsPosition(ellipse e, vec2 norm, float dist);\nvec2 getAbsPosition(ellipse e, polar point);\nvec2 getMovement(float fi);\nbool contains(ellipse e, vec2 point);\nbool contains(ellipse e, vec2 point, float scale);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord );\n\n\nvec2 screen2uv(vec2 glCoord, vec2 glRes)\n{\n    return 2.0 * (glCoord.xy - 0.5 * glRes.xy) / glRes.y; \n}\n\nvec2 getAbsPosition(ellipse e, vec2 norm, float dist)\n{\n    return norm \n        * dist \n        * e.semi_axis\n        + e.position;\n}\n\nvec2 getAbsPosition(ellipse e, polar point)\n{\n    return getAbsPosition(e, vec2(cos(point.fi), sin(point.fi)), point.dist);\n}\n\nvec2 getMovement(float fi)\n{\n    return vec2(cos(fi), sin(fi));\n}\n\n\nfloat getIntensity(ellipse e, vec2 point)\n{   \n    vec2 pos = point - e.position;\n    vec2 norm = normalize(pos);\n    \n    return length(pos) / length(norm * e.semi_axis);\n}\n\nbool contains(ellipse e, vec2 point)\n{\n    return contains(e, point, 1.0);\n}\n\nbool contains(ellipse e, vec2 point, float scale)\n{\n    vec2 res = (point - e.position) / e.semi_axis;\n    return pow(res.x, 2.0) + pow(res.y, 2.0) <= pow(scale, 2.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvFrag = screen2uv(fragCoord.xy, iResolution.xy);\n    vec2 uvMouse = screen2uv(iMouse.xy, iResolution.xy);\n    vec2 uvBounds = screen2uv(iResolution.xy, iResolution.xy);\n    \n    float currTime = iTime * 0.2;\n\n   \n    ellipse sun = ellipse(uvMouse, vec2(0.3));\n\n    ellipse earth = ellipse(sun.position, vec2(0.1));\n    earth.position += getMovement(currTime) * (uvBounds);\n            \n        \n    ellipse moon = ellipse(earth.position, vec2(0.06));\n    moon.position += getMovement(currTime * 6.0) * (vec2(0.6, 0.4)) ;\n    \n    \n    vec3 earthColor = vec3(74, 111, 228) / 255.0;\n    vec3 sunColor = vec3(255, 217, 46) / 255.0;\n    vec3 moonColor = vec3(192, 183, 167) / 255.0;\n    vec3 backgroundColor = vec3(40, 39, 39) / 255.0;\n    \n    \n    fragColor.rgb = backgroundColor;\n    fragColor.a = 1.0;\n\n    if(contains(earth, uvFrag))\n    {\n        float intensity = getIntensity(earth, uvFrag); \n        fragColor.rgb = mix(earthColor, backgroundColor, pow(intensity, 8.0));\n        fragColor.g = tanh(1.0 - intensity);\n    }\n    \n    if(contains(moon, uvFrag))\n    {\n        float intensity = getIntensity(moon, uvFrag); \n        fragColor.rgb = mix(sinh(moonColor), backgroundColor, pow(intensity, 8.0));\n    }\n    \n    if(contains(sun, uvFrag))\n    {\n        float intensity = getIntensity(sun, uvFrag); \n        fragColor.rgb = mix(sunColor, backgroundColor, pow(intensity, 4.0));\n        fragColor.g = sinh(1.0 - intensity);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}