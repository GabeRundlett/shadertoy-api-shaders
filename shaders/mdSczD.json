{
    "Shader": {
        "info": {
            "date": "1687472040",
            "description": "2d braids pattern :)",
            "flags": 0,
            "hasliked": 0,
            "id": "mdSczD",
            "likes": 13,
            "name": "Braids pattern",
            "published": 3,
            "tags": [
                "2d",
                "pattern"
            ],
            "usePreview": 0,
            "username": "AndrewB330",
            "viewed": 175
        },
        "renderpass": [
            {
                "code": "#define s(p) max( d(p) - .4, .5 - d(p + f) )              //\n#define d(p) length( p - vec2( h(p), sin(h(p))) )          //\n#define h(p) ( p + cos(p) * ( (p).y - sin(p) )/2. ).x\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n    p *= mat2(29, -29, 29, 29)/iResolution.x;\n    vec2 f = vec2(2.1, 0);\n    p.x += iTime * sign( sin(p.y * .79) );\n    p.y = mod(p.y, 4.) - 2.;\n    o = o*0. - min(min(s(p), s(p + f)), s(p + f + f)) /.1;\n}\n\n/*\n// Original 395\nfloat d(vec2 p)\n{\n    // distance to sin curve, one step Newton method\n    float x = p.x + (p.x + cos(p.x)*(p.y - sin(p.x)) - p.x) * 0.5;\n    return length(p - vec2(x, sin(x)));\n}\nfloat s(vec2 p)\n{\n    // sbtract(sin curve sdf, other thicker sin curve sdf)\n    return max(d(p) - 0.45, -d(p + vec2(2.1, 0)) + 0.5);\n}\n\nvoid mainImage( out vec4 o, in vec2 u )\n{\n    vec2 R = iResolution.xy, p = (u - R * .5)/R.x * mat2(29, -29, 29, 29);\n    p.x += iTime * (1. - 2. * mod(floor(p.y * 0.25), 2.0));\n    p.y = mod(p.y, 4.) - 2.;\n    o = smoothstep(.0, .1, -min(min(s(p), s(p + vec2(2.1, 0))), s(p + vec2(4.2, 0)))) * vec4(1);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}