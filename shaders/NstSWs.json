{
    "Shader": {
        "info": {
            "date": "1634167785",
            "description": "Small test to experiment with ray marching",
            "flags": 0,
            "hasliked": 0,
            "id": "NstSWs",
            "likes": 2,
            "name": "Foggy Mandelbulb",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "color",
                "fog"
            ],
            "usePreview": 0,
            "username": "ThomasVallentin",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAX_STEPS 100\n#define HIT_DISTANCE 0.0001\n#define MAX_DIST 100.\n\n\nfloat distToMandelbub(vec3 pos, int iterations, float bailout, float power) {\n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r;\n    \n\tfor (int i = 0; i < iterations ; i++) {\n\t\tr = length(z);\n\t\tif (r > bailout) break;\n\t\t\n\t\t// convert to polar coordinates\n\t\tfloat theta = acos(z.z/r) * power;\n\t\tfloat phi = atan(z.y,z.x) * power;\n\t\tdr =  pow( r, power - 1.0) * power * dr + 1.0;\n\t\t\n\t\t// scale and rotate the point\n\t\tfloat zr = pow(r, power);\n\t\t\n\t\t// convert back to cartesian coordinates\n\t\tz = zr * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));\n\t\tz += pos;\n\t}\n\treturn 0.5 * log(r) * r / dr;\n}\n\n\nfloat signedDistToPlane(vec3 origin) {\n    return origin.y;\n}\n\n\nfloat signedDistToSphere(vec4 sphere, vec3 origin) {\n    return length(sphere.xyz - origin) - sphere.w;\n}\n\n\nvec2 smoothMin(float dstA, float dstB, float k, float power) {\n    float h = max(k - abs(dstA - dstB), 0.0) /k;\n    float m = pow(h, power) * 0.5;\n    float s = m * k / power;\n    \n    return (dstA < dstB) ? vec2(dstA - s, m) : vec2(dstB - s, 1.0 - m);\n}\n\n\nvec4 marchOnce(vec3 pos) {\n\n    vec3 mdbColor = vec3(1., 0, .15);\n    vec3 sphColor = vec3(0, 0.1, 1);\n\n    float mdbDist = distToMandelbub(pos, 15, 2.0, (cos(iTime  / 25. - PI) * 0.5 + 0.5) * 15. + 1.);\n    float sphDist = signedDistToSphere(vec4(0, 0, sin(iTime / 3.5) * 2., 0.2), pos);\n    \n    vec2 smin = smoothMin(mdbDist, sphDist, 0.3, 3.);\n\n    return vec4(mix(mdbColor, sphColor, smin.y), smin.x);\n}\n\n\nvec4 rayMarch(vec3 origin, vec3 direction) {\n    vec4 result = vec4(0);\n    for (int i=0 ; i < MAX_STEPS ; i++ ) {\n        vec3 p = origin + direction * result.w;\n        vec4 tempResult = marchOnce(p);\n    \n        result.w += tempResult.w;\n        result.xyz = tempResult.xyz;\n        if (result.w > MAX_DIST)\n            return vec4(0, 0, 0, 100000);\n            \n        if (tempResult.w < HIT_DISTANCE)\n            break;\n    }\n    \n    return result;\n}\n\n\nvec3 applyFog(vec3 rgb, float dist) {\n    vec3 fogColor = vec3(0.05, 0.1, 0.2);\n    float fogDensity = 1.;\n    float fogStartDist = 1.2;\n    \n    dist = dist - fogStartDist;\n\n    float fogAmount = 1.0 - exp( -dist * fogDensity);\n    return mix(rgb, fogColor, fogAmount);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    float time = iTime / 5.0; \n    float rotationRadius = 2.5;\n    \n\n    vec3 origin = vec3(sin(time) * rotationRadius, 0, -cos(time) * rotationRadius);\n    vec3 direction = normalize(vec3(uv.x, uv.y, 1));\n    mat3 spin = mat3(cos(time), 0,  sin(time),\n                    0, 1, 0,\n                    -sin(time), 0, cos(time));\n    direction = spin * direction;\n    \n    vec4 result = rayMarch(origin, direction);\n    \n    vec3 col = vec3(result.xyz);\n    col = applyFog(col, result.w);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}