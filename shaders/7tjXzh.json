{
    "Shader": {
        "info": {
            "date": "1627112423",
            "description": "thanks to IDGAMER89 for the roblox character.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tjXzh",
            "likes": 2,
            "name": "Roblox sdf with color",
            "published": 3,
            "tags": [
                "raymarcher",
                "roblox"
            ],
            "usePreview": 0,
            "username": "bulieme",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "#define deg2rad (3.141/360.)\n#define MAX_STEPS 1024\n#define MAX_DIST 1e5\n#define SURF_DIST 1e-4\n\nfloat roundedCubeSDF(vec3 p, vec3 s, float r) {\n    vec3 q = abs(p) - s;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0)-r;\n}\n\nfloat roundedCylinderSDF( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nvec2 characterSDF(vec3 p){\n    int mat;\n    p.y -= 3.9;\n\tfloat head = roundedCylinderSDF(p, 0.3, 0.3, .3);//Head\n\tfloat body = roundedCubeSDF(p-vec3(0,-1.6,0), vec3(1,1,.5), .05);//Body\n    \n\tfloat l_arm = roundedCubeSDF(p-vec3(1.6,-1.6,0), vec3(0.5,1,.5), .05);//left arm\n\tfloat r_arm = roundedCubeSDF(p-vec3(-1.6,-1.6,0), vec3(0.5,1,.5), .05);//right arm\n    float arm = min(l_arm, r_arm);\n\n    float l_leg = roundedCubeSDF(p-vec3(0.51,-3.7,0), vec3(0.46,1,.5), .05);//left leg\n\tfloat r_leg = roundedCubeSDF(p-vec3(-0.51,-3.7,0), vec3(0.46,1,.5), .05);//right leg\n    float leg = min(l_leg, r_leg);\n    \n    body = min(body, arm);\n    body = min(body, leg);\n    \n    float d = min(head, body);\n    \n    if(d == head){\n        mat = 1;\n    }if(d == body){\n        mat = 2;\n    }if(body == arm){\n        mat = 1;\n    }if( d == leg){\n        mat = 3;\n    }\n    \n    \n\treturn vec2(d, mat);\n}\n\nvec2 scene(vec3 p){\n    int mat;\n    float ground = p.y+1.0;\n\tfloat d = ground;\n    vec2 character = characterSDF(p);\n    d = min(d, character.x);\n    if(d == character.x){\n        mat = int(character.y);\n    }if(d == ground){\n        mat = 4;\n    }\n\t\n\treturn vec2(d, mat);\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(SURF_DIST, 0.0);\n\n    return normalize(\n        scene(p).x - vec3(\n            scene(p - e.xyy).x,\n            scene(p - e.yxy).x,\n            scene(p - e.yyx).x\n        )\n    );\n}\n\nfloat AO(vec3 p) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    vec3 nor = GetNormal(p);\n    for(int i = 0; i < 5; i++) {\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = scene(p + h*nor).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        float dS = scene(ro + rd * dO).x;\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nmat3 rot(vec3 ang) {\n    vec3 s = sin(ang);\n    vec3 c = cos(ang);\n    mat3 x = mat3(\n        vec3(1, 0, 0),\n        vec3(0, c.x,-s.x),\n        vec3(0, s.x, c.x)\n    );\n    mat3 y = mat3(\n        vec3(c.y, 0, s.y),\n        vec3(0, 1, 0),\n        vec3(-s.y, 0, c.y)\n    );\n    mat3 z = mat3(\n        vec3(c.z, s.z, 0),\n        vec3(-s.z, c.z, 0),\n        vec3(0, 0, 1)\n    );\n    return x*y*z;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (fragCoord.xy-0.5*iResolution.xy)/max(iResolution.x, iResolution.y)*2.;\n\tvec3 ro = vec3(0, 2, -6);\n    vec3 rd = normalize(vec3(uv, 75.*deg2rad));\n\n    vec2 t = (iMouse.xy-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);\n    t *= 4.0;\n    vec2 mouse_rotation = t*2.;\n    if(length(iMouse.xy) < 1e-3) mouse_rotation = vec2(0);\n\n    vec2 yawpitch = vec2(mouse_rotation.x, -mouse_rotation.y);\n    mat3 viewmat = rot(vec3(yawpitch.y, yawpitch.x, 0));\n\n    ro *= viewmat;\n    rd *= viewmat;\n    \n    vec3 skin = vec3(0.945,0.914,0.686);\n    vec3 tshirt = vec3(0.753,0.000,0.000);\n    vec3 pant = vec3(0.149,0.149,0.149);\n\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 col = vec3(0);\n\n    if(d < MAX_DIST){\n        int mat = int(scene(p).y);\n    \tvec3 lp = normalize(vec3(0,10,-3));\n    \tvec3 n = GetNormal(p);\n\t\tcol = vec3(smoothstep(-0.2,1.,dot(n, lp)));\n        float s = RayMarch(p+n*SURF_DIST*2.0, lp);\n        col *= AO(p); \n\t\tif(s < 5.) col *= vec3(.5);\n        if(mat == 1){\n            col *= skin;\n        }if(mat == 2){\n            col *= tshirt;\n        }if(mat == 3){\n            col *= pant;\n        }if(mat == 4){\n            col *= vec3(0.580,1.000,0.608);;\n        }\n        col += vec3(0.110,0.596,0.898)*.1;\n    }else{\n        col = vec3(0.110,0.596,0.898);\n    }\n    \n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}