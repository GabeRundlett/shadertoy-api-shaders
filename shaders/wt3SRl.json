{
    "Shader": {
        "info": {
            "date": "1581513207",
            "description": "Progressing with 2D & motion.\nCritique & Comments are welcome.",
            "flags": 0,
            "hasliked": 0,
            "id": "wt3SRl",
            "likes": 7,
            "name": "Motion Loop #002",
            "published": 3,
            "tags": [
                "2d",
                "loop",
                "motion",
                "ease"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nMotion Loop #002\n\nCheckout the ISF port: https://github.com/theotime/isf_shaders/blob/master/shaders/motiongraphics_002.fs\n\nWith the help of https://thebookofshaders.com/examples/?chapter=motionToolKit\nInspired by: https://thebookofshaders.com/edit.php?log=160909064609\n\n*/\n\n#define bpm 120.\n#define speed .5\n#define blink_factor (0.*.125)\n\n#define AA 3.\n\n#define pi 3.141592\n#define time (speed*(bpm/60.)*iTime)\n\n// https://lospec.com/palette-list/1bit-monitor-glow\nvec3 col1 = vec3(.133, .137, .137);\nvec3 col2 = vec3(.941, .965, .941);\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat fill(float d) {\n    return 1. - smoothstep(0., AA / iResolution.x, d);\n}\n\n// inspired by Pixel Spirit Deck: https://patriciogonzalezvivo.github.io/PixelSpiritDeck/\n// + https://www.shadertoy.com/view/tsSXRz\nfloat stroke(float d, float width) {\n\treturn 1. - smoothstep(0., AA / iResolution.x, abs(d) - width * .5);\n}\n\nfloat circle(vec2 p, float radius) {\n  return length(p) - radius;\n}\n\nfloat pulse(float begin, float end, float t) {\n  return step(begin, t) - step(end, t);\n}\n\nfloat easeInOutExpo(float t) {\n    if (t == 0. || t == 1.) {\n        return t;\n    }\n    if ((t *= 2.) < 1.) {\n        return .5 * exp2(10. * (t - 1.));\n    } else {\n        return .5 * (-exp2(-10. * (t - 1.)) + 2.);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float mask;\n    \n    float t1 = fract(.125 + time * .25); // for blinking rings\n    float t2 = easeInOutExpo(fract(time));// for easing ring\n    \n    // blinking rings\n    if (uv.x < 0.) {\n        if (uv.y < 0. && pulse(0., .25 - blink_factor, t1) == 1.) {\n            mask = fill(circle(uv, .35));\n            mask += stroke(circle(uv, .3725), .005);\n        } else if(uv.y > 0. && pulse(.25, .5 - blink_factor, t1) == 1.) {\n            mask = fill(circle(uv, .35));\n            mask += stroke(circle(uv, .3725), .005);\n        }\n    } else {\n        if (uv.y > 0. && pulse(.5, .75 - blink_factor, t1) == 1.) {\n            mask = fill(circle(uv, .35));\n            mask += stroke(circle(uv, .3725), .005);\n        } else if (uv.y < 0. && pulse(.75, 1. - blink_factor, t1) == 1.) {\n            mask = fill(circle(uv, .35));\n            mask += stroke(circle(uv, .3725), .005);\n        }\n    }\n    \n    // opposite blinking rings\n    if (uv.x < 0.) {\n        if (uv.y < 0. && pulse(.5, .75 - blink_factor, t1) == 1.) {\n            mask = stroke(circle(uv, .25), .05);\n            mask += stroke(circle(uv, .2), .005);\n        } else if(uv.y > 0. && pulse(.75, 1. - blink_factor, t1) == 1.) {\n            mask = stroke(circle(uv, .25), .05);\n            mask += stroke(circle(uv, .2), .005);\n        }\n    } else {\n        if (uv.y > 0. && pulse(0., .25 - blink_factor, t1) == 1.) {\n            mask = stroke(circle(uv, .25), .05);\n            mask += stroke(circle(uv, .2), .005);\n        } else if (uv.y < 0. && pulse(.25, .5 - blink_factor, t1) == 1.) {\n            mask = stroke(circle(uv, .25), .05);\n            mask += stroke(circle(uv, .2), .005);\n        }\n    }\n    \n    \n    // easing ring\n    vec2 uv2 = uv * r2d(-pi / 2. * (floor(time) + t2));\n    if(uv2.x < 0. && uv2.y < 0.)\n        mask -= 2. * stroke(circle(uv2, .15), .05);\n    mask += stroke(circle(uv, .15), .05);\n    \n    \n    // outer rings + central circle\n    mask -= fill(circle(uv, .09));\n    mask += stroke(circle(uv, .4), .01);\n    mask += stroke(circle(uv, .43), .01);\n    \n    mask = clamp(mask, 0., 1.);\n    vec3 col = mix(col1, col2, mask);\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}