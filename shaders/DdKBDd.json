{
    "Shader": {
        "info": {
            "date": "1699069662",
            "description": "https://www.shadertoy.com/view/7ltyDN",
            "flags": 0,
            "hasliked": 0,
            "id": "DdKBDd",
            "likes": 0,
            "name": "Dark Matter II",
            "published": 3,
            "tags": [
                "simple",
                "parallax",
                "fun",
                "polyrefraction",
                "biconvex",
                "biconcave"
            ],
            "usePreview": 0,
            "username": "ElSolem",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "//Adopted from https://www.shadertoy.com/view/tsXBzS Fractal Pyramid, by bradjamesgrant\n\nvec3 palette(float d){\n    float mx = iMouse.x/iResolution.x;\n    float my = iMouse.y/iResolution.y;\n\treturn mix(vec3(mx,my,0.9),vec3(1.,0.,1.),d); //color of the stars\n}\n\nvec2 rotate(vec2 p,float a){\n\tfloat c = cos(a);\n    float s = sin(a)*0.9;\n    return p*mat2(c,s,-s,c);\n}\n\nfloat map(vec3 p){\n    for( int i = 0; i<8; ++i){\n        float t = float(iFrame)*0.002;\n        p.yz =rotate(p.yz,t);//rotation speed\n        p.xz =rotate(p.xz,t*1.6); //Rotation speed\n        p.xz = abs(p.xz);\n        p.xz-=.3; //Size???\n\t}\n\treturn dot(sign(p),p)/5.;\n}\n\nvec4 rm (vec3 ro, vec3 rd){\n    float t = 0.;\n    vec3 col = vec3(0.);\n    float d;\n    for(float i =0.; i<64.; i++){\n\t\tvec3 p = ro + rd*t;\n        d = map(p)*2.5;\n        if(d<0.02){\n            break;\n        }\n        if(d>100.){\n        \tbreak;\n        }\n        //col+=vec3(0.6,0.8,0.8)/(400.*(d));\n        col+=palette(length(p)*0.03)/(3000.*(d));//v1: pink, v2:brightness\n        t+=d;\n    }\n    return vec4(col,60./(d*10.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert pixel coordinates to a normalized range (-1 to 1)\n    vec2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);\n\n    // Calculate the value of xy using your equation\n    float xy = p.x / p.y;\n\n    // Define a threshold for plotting the point\n    float threshold = 2.; // Adjust this value as needed // air: 1.0, water: 1.33, glass: 1.5, diamond: 2.4\n\n    // Check if xy is within the threshold to plot the point\n    if (abs(xy) < abs(threshold))\n    {\n    vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.x;\n\tvec3 ro = vec3(41.,41.,-0.);\n    ro.xz = rotate(ro.xz,iTime);\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf,vec3(55,3.,57.)));\n    vec3 cu = normalize(cross(cf,cs));\n    \n    vec3 uuv = ro+cf*3. + uv.x*cs + uv.y*cu;\n    \n    vec3 rd = normalize(uuv-ro);\n    \n    vec4 col = rm(ro,rd);\n    \n    \n    fragColor = col;\n    }\n    else\n    {\n    vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.x;\n\tvec3 ro = vec3(0.,0.,-50.);\n    ro.xz = rotate(ro.xz,iTime);\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf,vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cf,cs));\n    \n    vec3 uuv = ro+cf*3. + uv.x*cs + uv.y*cu;\n    \n    vec3 rd = normalize(uuv-ro);\n    \n    vec4 col = rm(ro,rd);\n    \n    \n    fragColor = col;\n}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}