{
    "Shader": {
        "info": {
            "date": "1523080513",
            "description": "Rings with Rings attached to them... and some trails on it all, because why not.",
            "flags": 32,
            "hasliked": 0,
            "id": "4dyyDy",
            "likes": 2,
            "name": "Rings On Rings",
            "published": 3,
            "tags": [
                "2d",
                "circles",
                "rings"
            ],
            "usePreview": 0,
            "username": "cwrawls",
            "viewed": 494
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TWOPI\t6.28318530718\n//change me to run faster or slower (keep it < 1.)\n#define SPEED \t0.1\n//uncomment for different effect\n//#define BIGCIRCLES\n\n//constant for determining the center of each subring\nconst float distribute = TWOPI / 9.0;\n\n//function for checking if the pixel is within a ring\nvec3 checkRing(vec2 uv, float radius, float width, vec3 col) {\n\tfloat dR = length(uv);\n    \n    float m = abs(radius - dR);\n    \n    float o = 0.0;\n    \n    if(m < width) o = 1.0;\n\n    return col * vec3(o);\n}\n\n\nvec3 checkSubRing(vec2 uv, vec2 center, float radius, float width, vec3 col) {\n\n    //only difference, check current radius against provided center point\n    float dR = length(center - uv);\n    \n    float m = abs(radius - dR);\n    \n    float o = 0.0;\n    \n    if(m < width) o = 1.0;\n\n    return col * vec3(o);\n}\n\nvec3 mapRing(vec2 uv, vec3 col, float offset, float subOffset) {\n \n    float radius = 2.2 * fract(SPEED * iTime - offset);\n    \n    vec3 ringCol = checkRing(uv, radius, 0.01, col);\n    \n    float subRad = 0.0;\n    float centerRad = 0.0;\n    \n#ifdef BIGCIRCLES\n    //radius of smaller rings\n    subRad = (radius + (2.2 * fract(SPEED * iTime - (offset + 0.1)))) / 2.0;\n    \n    //distance from the center of the image to the center of the smaller rings\n    centerRad = subRad + radius + clamp(0.05 * (radius / 1.5), 0., 0.05);\n#else\n    subRad = clamp(0.05 * (radius / 1.5), 0., 0.05);\n    \n    centerRad = radius + 0.1; //(radius + (2.2 * fract(SPEED * iTime - (offset + 0.1)))) / 2.0;\n#endif\n    \n    \n    \n    //calculate sub-rings here\n    vec2 c1 = vec2(centerRad * cos(mod((0. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((0. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c1, subRad, 0.005, vec3(1., 0., 0.));\n    vec2 c2 = vec2(centerRad * cos(mod((1. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((1. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c2, subRad, 0.005, vec3(0., 1., 0.));\n    vec2 c3 = vec2(centerRad * cos(mod((2. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((2. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c3, subRad, 0.005, vec3(0., 0., 1.));\n    vec2 c4 = vec2(centerRad * cos(mod((3. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((3. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c4, subRad, 0.005, vec3(1., 0., 0.));\n    vec2 c5 = vec2(centerRad * cos(mod((4. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((4. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c5, subRad, 0.005, vec3(0., 1., 0.));\n    vec2 c6 = vec2(centerRad * cos(mod((5. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((5. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c6, subRad, 0.005, vec3(0., 0., 1.));\n    vec2 c7 = vec2(centerRad * cos(mod((6. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((6. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c7, subRad, 0.005, vec3(1., 0., 0.));\n    vec2 c8 = vec2(centerRad * cos(mod((7. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((7. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c8, subRad, 0.005, vec3(0., 1., 0.));\n    vec2 c9 = vec2(centerRad * cos(mod((8. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)),\n                   centerRad * sin(mod((8. * distribute) + (fract(SPEED * iTime) * TWOPI) + subOffset, TWOPI)));\n    ringCol += checkSubRing(uv, c9, subRad, 0.005, vec3(0., 0., 1.));\n    \n    return ringCol;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //make signed normalized\n    uv *= 2.0;\n    uv -= 1.0;\n    \n    //scale for aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    //uv += vec2(0.2 * sin(iTime * (SPEED * 2.0)), 0.2 * cos(iTime * (SPEED * 2.0)));\n\n    \n    // Init to background color\n    vec3 col = vec3(0.);\n    \n    //check for positioning on rings\n    col += mapRing(uv, vec3(0.,\t\t0.75, \t0.75), \t0.0, 0.0 * distribute);\n    col += mapRing(uv, vec3(0.75, \t0.75, \t0.), \t0.1, 1.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0.75, \t0., \t0.75), \t0.2, 2.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0., \t0.75, \t0.75), \t0.3, 3.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0.75, \t0.75, \t0.), \t0.4, 4.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0.75, \t0., \t0.75), \t0.5, 5.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0., \t0.75, \t0.75), \t0.6, 6.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0.75, \t0.75, \t0.), \t0.7, 7.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0.75, \t0., \t0.75), \t0.8, 8.0 * (distribute / 2.0));\n    col += mapRing(uv, vec3(0., \t0.75, \t0.75), \t0.9, 9.0 * (distribute / 2.0));\n    /*col += checkRing(uv, (2.0 * fract(SPEED * iTime - 0.2)), 0.005, vec3(1., 0., 0.));\n    col += checkRing(uv, (2.0 * fract(SPEED * iTime - 0.4)), 0.005, vec3(0., 1., 0.));\n    col += checkRing(uv, (2.0 * fract(SPEED * iTime - 0.6)), 0.005, vec3(0., 0., 1.));\n    col += checkRing(uv, (2.0 * fract(SPEED * iTime - 0.8)), 0.005, vec3(1., 0., 1.));\n\t\t*/\n    clamp(col, 0., 1.);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//modify to change length of trails\n#define DECAY 0.95;\n\nvec3 fold(vec3 col){\n\tvec3 foldDir = mod(floor(col), 2.0);\n    \n    vec3 foldUp = (vec3(0.0) + fract(col)) * (1.0 - foldDir);\n    vec3 foldDown = (vec3(1.0) - fract(col)) * foldDir;\n    \n    return foldUp + foldDown;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    vec3 dCol = texture(iChannel1, uv).xyz;\n    \n    dCol *= DECAY;\n    \n    col += dCol;\n    \n    col = fold(col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}