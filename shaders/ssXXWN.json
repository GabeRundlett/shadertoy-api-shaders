{
    "Shader": {
        "info": {
            "date": "1618653536",
            "description": "mouse.y controls parameter                    SPACE toggles noise / turbulence\n\nleft:  most transition between plates \nright: most transition near peaks",
            "flags": 16,
            "hasliked": 0,
            "id": "ssXXWN",
            "likes": 13,
            "name": "Noise balance",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "perlin",
                "isolines"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 488
        },
        "renderpass": [
            {
                "code": "#define hash(p ) ( 2.* fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) - 1. )\n#define grad(x,y)  dot( hash( i+vec2(x,y) ), f-vec2(x,y) )\n#define Ierf(x) ( atanh(x) / 1.2 )          // not so bad reciprocal\n#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\nfloat noise( vec2 p )\n{\n    vec2 i = floor(p), f = fract(p), u = f*f*(3.-2.*f); // smoothstep\n    return mix( mix( grad(0,0), grad(1,0), u.x),\n                mix( grad(0,1), grad(1,1), u.x), u.y);\n}\n\nfloat perlin( vec2 U ) { // inspired from https://www.shadertoy.com/view/XdXGW8\n    float v = 0., s = .5;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    for( int i=0; i<4; i++, s/=2., U*=m )\n        v  += s * noise( U ); \n    return v;\n}\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = u / R.y,\n         P = 8.*U - vec2(0.,.5*iTime);\n      // P = 8.*U - vec2(iTime,0);         // also interesting to see pattern morphing\n\t\n\tfloat f = keyToggle(32) ? perlin( P ) : noise( P );\n    float m = iMouse.z > 0. ? 2.*iMouse.x/R.x :  2.*u.x/R.x;\n    \n    f = sign(f)*pow(abs(f),exp2(m)-1.) *exp2(m);\n    \n    if (U.y > .5) \n        f *= 8.,                                            // plot isolines\n        O = vec4(1. - abs(fract(f)-.5)/fwidth(f));\n    else\n        O = vec4( .5+.5*f );\n    O = sqrt(O);                                            // to sRGB\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}