{
    "Shader": {
        "info": {
            "date": "1607782337",
            "description": "paisaje-casita-2d",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVBRd",
            "likes": 1,
            "name": "paisaje casita 2d",
            "published": 3,
            "tags": [
                "paisajecasita2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-----12-dic-2020 \n//recursos\n//https://iquilezles.org/articles/distfunctions2d\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\nconst float largoX=20.0;\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{\n    //return  min(d1.x,d2.x); \n    if (d1.x<d2.x)\n       return d1; \t\n    else\n       return d2;\n}\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{\n    //return max(-d1.x,d2.x); \n    if  (-d1.x<d2.x)\n        return d1;\n    else\n        return d2;\n}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{\n    //return max(d1,d2);\n    if (d1.x>d2.x)\n       \treturn d1;\n    else\n        return d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2) {\n\treturn vec2(max(-d2.x, d1.x), 2.0);\n}\n\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{\n    vec2 q = mod(p+0.5*c,c)-0.5*c;\n    return  q;\n}\n\nfloat sdCirc(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\t\n    \nfloat MarOnda(vec2 uv,float  t)\n{\n    uv.y += sin(uv.x*5.+t)*0.1;\n    return uv.y;\n}\n\n\nvec2 Cielo(vec2 p)\n{\n    float db1= sdBox(p, vec2(largoX,0.5) );\n    return vec2(db1,4.0);\n}\n\nvec2 MedioCirculo(vec2 pp)\n{\n    vec2 c=vec2(3.2,5.);\n    vec2 p= opRep2D( pp, c );\n    \n    float ds1= sdCirc( p, 0.04);\n    float ds2= sdCirc( p-vec2(0.0,-0.03), 0.05);\n    float db1= sdBox(p-vec2(0.0,0.0), vec2(0.02,0.02) );\n    float db2= sdBox(p-vec2(0.5,-0.2), vec2(0.01,0.01) );\n    \n    ds1=opS(ds2, ds1);\n    vec2 resp=vec2(9999.0,-1.0);\n    resp= opU2(resp, vec2(ds1,35.0));\n    resp= opU2(resp, vec2(ds2,16.0));\n    resp= opU2(resp, vec2(db1,1.0));\n    resp= opU2(resp, vec2(db2,11.0));\n    \n    return resp;\n}\n\n\nvec2 Casita(vec2 pp)\n{\n    vec2 c=vec2(3.2,5.);\n    vec2 p= opRep2D( pp, c );\n    \n    float db2= sdBox(p-vec2(0.5,-0.1), vec2(0.18,0.15) ); \n    float db3= sdBox(p-vec2(0.45,-0.08), vec2(0.05,0.05) );  //ventana\n    float db4= sdBox(p-vec2(0.6,-0.16), vec2(0.06,0.09) );  //puerta\n    \n    float dt1= sdTriangleIsosceles( -p-vec2(-0.5,-0.19), vec2(0.22,0.12) );\n    \n    db2=opS(db3,db2);\n    db2=opS(db4,db2);\n    \n    vec2 resp=vec2(9999.0,-1.0);\n    resp= opU2(resp, vec2(db2,14.0));\n    resp= opU2(resp, vec2(dt1,15.0));\n    resp= opU2(resp, vec2(db3,17.0));\n    resp= opU2(resp, vec2(db4,17.0));\n    return resp;\n}\n\n\nvec2 BloqueG1(vec2 p)\n{\n    float db1= sdBox(p, vec2(largoX,0.5) );\n    float ds1= sdCirc( p, 0.04);\n    float ds2= sdCirc( p-vec2(0.0,-0.03), 0.05);\n    \n    vec2 resp=vec2(9999.0,-1.0);\n    resp= opU2(resp, vec2(db1,16.0));\n    return resp;\n}\n\nfloat PisoOnda(vec2 uv)\n{\n    uv.y +=0.25* sin(uv.x*50.)*0.1;\n    return uv.y;\n}\n\n\nvec2 MontanaOnda(vec2 uv)\n{\n    float db1= sdBox(uv-vec2(0.0,0.0), vec2(largoX,0.3) );\n    float pasto=uv.y-0.1 +1.0* sin(uv.x*3.+sin(uv.x*2.0)  )*0.1;\n    vec2 resp=vec2(9999.0,-1.0);\n    db1=opS(-pasto, db1);\n    resp= opU2(resp, vec2(db1,5.0));\n    return resp;\n}\n\nvec2 PastoOnda(vec2 uv)\n{\n    float db1= sdBox(uv-vec2(0.0,0.08), vec2(largoX,0.05) );\n    float pasto=uv.y-0.1 +0.25* sin(uv.x*50.)*0.1;\n    \n    vec2 resp=vec2(9999.0,-1.0);\n    \n    db1=opS(-pasto, db1);\n    resp= opU2(resp, vec2(db1,36.0));\n    return resp;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n     vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n     float t0=mod(iTime,36.0);\n     \n     p.x+=t0*0.5;\n     vec3 col = vec3(1.0);\n\n    vec2 b0=Cielo(p-vec2(0.0,0.49));\n    vec2 b1= BloqueG1(p-vec2(0.0,-0.49));\n    vec2 b2= MedioCirculo(p-vec2(0.4,-0.39));\n    vec2 b3= MedioCirculo(p-vec2(-0.4,-0.29));\n    vec2 b4= MedioCirculo(p-vec2(-1.0,-0.19));\n    vec2 b5= MedioCirculo(p-vec2(-1.5,-0.6));\n    \n    vec2 dpasto1= PastoOnda(p);\n    vec2 dmontana= MontanaOnda(p-vec2(0.0,0.33));\n    vec2 dcasa1= Casita(p-vec2(1.5,-0.6) );\n    vec2 dcasa2= Casita(p-vec2(0.1,-0.3) );\n    \n    \n    vec3 colb0= getColorf(b0.y);\n    vec3 colb1= getColorf(b1.y);\n    vec3 colb2= getColorf(b2.y);\n    vec3 colb3= getColorf(b3.y);\n    vec3 colb4= getColorf(b4.y);\n    vec3 colb5= getColorf(b5.y);\n    vec3 colb6= getColorf(b5.y);\n    \n    vec3 colPasto= getColorf(dpasto1.y);\n    vec3 colMontana= getColorf(dmontana.y);\n    vec3 colCasa1= getColorf(dcasa1.y);\n    vec3 colCasa2= getColorf(dcasa2.y);\n    \n    \n    col= DibujoSinBorde(p, b0.x,colb0,  col);\n    col= DibujoSinBorde(p, b1.x,colb1,  col);\n    col= DibujoSinBorde(p, b2.x,colb2,  col);\n    col= DibujoSinBorde(p, b3.x,colb3,  col);\n    col= DibujoSinBorde(p, b4.x,colb4,  col);\n    col= DibujoSinBorde(p, b5.x,colb5,  col);\n    col= DibujoConBorde(p, dmontana.x, colMontana,  col);  \n    col= DibujoConBorde(p, dpasto1.x, colPasto,  col);\n    col= DibujoSinBorde(p, dcasa1.x, colCasa1,  col);\n    col= DibujoSinBorde(p, dcasa2.x, colCasa2,  col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    vec3 color;\n   \n};\n\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.6),  //31\nvec3(0.7),  //32\nvec3(0.8),  //33\nvec3(0.6,0.0,0.0),  //34\nvec3(1.0, 0.6, 0.637),  //35 crema\nvec3(0.05, 0.8, 0.1)  //36 pasto\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\nvec3 getColorf(float ii)\n{    \n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n\n\n\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    \n    float uWotM8 = 0.009;\n    \n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    \n    return mix(colOut,colIn, flm );\n}\n\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    \n    float uWotM8 = 0.009;\n    \n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    \n    return mix(colOut,colIn, flm );\n}\n\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n///-------------------------------\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}