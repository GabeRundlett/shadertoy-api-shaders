{
    "Shader": {
        "info": {
            "date": "1723497443",
            "description": "cosmos  https://glslsandbox.com/e#57376.1 https://glslsandbox.com/e#58026.0",
            "flags": 0,
            "hasliked": 0,
            "id": "lfXfRM",
            "likes": 1,
            "name": "cosmic pictures",
            "published": 3,
            "tags": [
                "fractal",
                "universe"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "\n#define time iTime\n#define resolution iResolution.xy\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\n// Perlin simplex noise\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n\t\t\t-0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.wxw) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yx * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n#define iterations 12\n#define formuparam2 0.679\n \n#define volsteps 8\n#define stepsize 0.190\n \n#define zoom 0.900\n#define tile   0.850\n#define speed2  0.10\n \n#define brightness 0.006\n#define darkmatter 0.14000\n#define distfading 0.60\n#define saturation 0.800\n\n\n#define transverseSpeed zoom*2.0\n#define cloud (0.11*sin(time))\n\n #define time iTime\n #define resolution iResolution.xy\nfloat triangle(float x, float a)\n{\n \n \nfloat output2 = 2.0*abs(  2.0*  ( (x/a) - floor( (x/a) + 0.5) ) ) - 1.0;\nreturn output2;\n}\n \n\nfloat field(in vec3 p) {\n\t\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\n\tfloat accum = 0.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\n\t\n\n\tfor (int i = 0; i < 6; ++i) {\n\t\tfloat mag = 1.-dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.8 + 0.1*sin(time*0.7 + 2.0), -1.1+0.3*cos(time*0.3));\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n\t\ttw += w;\n\t\tprev = mag;\n\t\t//if ( fract(time*100.0*sin(time*0.1)) > 0.499 ) break;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 position = abs(( fragCoord.xy / resolution.xy ) * 2.0 - 1.0);\n    vec2 uv = fragCoord/iResolution.xy-0.5;\n    \n     \tvec2 uv2 = uv*1.0;//2. * gl_FragCoord.xy / resolution.xy - 1.;\n\tvec2 uvs = uv2;// * resolution.xy / max(resolution.x, resolution.y);\n\tuv *= 50.0/1.1;\n\n\t\n\tfloat time2 = time;\n               \n        float speed = speed2;\n        speed = 0.005 * (time2*0.02 + 3.1415926/4.0);\n          \n\t//speed = 0.0;\n\n\t\n    \tfloat formuparam = formuparam2;\n\n\t\n  \n\t\n\tfor ( float j = 0.0; j < 1.0; j += 1.0 ) {\n\t\tuv /= (j-dot(uv,uv))*sin(time*0.1+0.5*sin((time+j)*0.05));\n\t\tuv *= 1.0-length(uv)*0.3*tan(j+1.0);\n\t\tif ( sin(time*0.001)*(j+1.0) < 0.5 ) break;\n\t}\n\t\n\tuv *= 1.0 - dot( gl_FragCoord.xy / resolution.xy , gl_FragCoord.xy / resolution.xy  )*0.3;\n\tuv /= 1.0 - length(uv);\n\t\t\n\t//mouse rotation\n\tfloat a_xz = iTime*0.01;\n\tfloat a_yz = -iTime*0.01;\n\tfloat a_xy = 0.9 + time*0.1;\n\t\n\t\n\tmat2 rot_xz = mat2(cos(a_xz),sin(a_xz),-sin(a_xz),cos(a_xz));\n\t\n\tmat2 rot_yz = mat2(cos(a_yz),sin(a_yz),-sin(a_yz),cos(a_yz));\n\t\t\n\tmat2 rot_xy = mat2(cos(a_xy),sin(a_xy),-sin(a_xy),cos(a_xy));\n\t\n\nfloat t = time * 1.1;\n        vec2 m = (position) + vec2(t, t);\n\tfloat size = 10.0;\n\tfloat b = max(m.x, m.y) * size;\n\tfloat n = floor(b) / (size * 0.5);\n\tvec3 c = vec3(snoise(vec2(n, 0.5)),\n\t              snoise(vec2(n, 0.0)),\n\t              snoise(vec2(n, 1.0))) * 0.5 + 0.5;\n\n\n\tfloat a = step(mod(b, 1.0), 0.80);\n\tc = c * a;\n\tfloat v2 =1.0;\n\t\n\tvec3 dir=vec3(uv*zoom,1.);\n \n\tvec3 from=vec3(0.0, 0.0,0.0)*c;\n \n                               \n        from.x -= 5.0*(0.5);\n        from.y -= 5.0*(0.5);\n               \n               \n\tvec3 forward = vec3(0.,0.,1.);\n               \n\t\n\tfrom.x += transverseSpeed*(1.0)*cos(0.01*time) + 0.001*time;\n\t\tfrom.y += transverseSpeed*(1.0)*sin(0.01*time) +0.001*time;\n\t\n\tfrom.z += 0.003*time;\n\t\n\t\n\tdir.xy*=rot_xy;\n\tforward.xy *= rot_xy;\n\n\tdir.xz*=rot_xz;\n\tforward.xz *= rot_xz;\n\t\t\n\t\n\tdir.yz*= rot_yz;\n\tforward.yz *= rot_yz;\n\t \n\n\t\n\tfrom.xy*=-rot_xy*c.xy;\n\tfrom.xz*=rot_xz;\n\tfrom.yz*= rot_yz;\n\t \n\t\n\t//zoom\n\tfloat zooom = (time2-3311.)*speed;\n\tfrom += forward* zooom;\n\tfloat sampleShift = mod( zooom, stepsize );\n\t \n\tfloat zoffset = -sampleShift;\n\tsampleShift /= stepsize; // make from 0 to 1\n\n\n\t\n\t//volumetric rendering\n\tfloat s=0.24;\n\tfloat s3 = s + stepsize/2.0;\n\tvec3 v=vec3(0.);\n\tfloat t3 = 0.0;\n\t\n\t\n\tvec3 backCol2 = vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p2=from+(s+zoffset)*dir;// + vec3(0.,0.,zoffset);\n\t\tvec3 p3=from+(s3+zoffset)*dir;// + vec3(0.,0.,zoffset);\n\t\t\n\t\tp2 = abs(vec3(tile)-mod(p2,vec3(tile*2.))); // tiling fold\n\t\tp3 = abs(vec3(tile)-mod(p3,vec3(tile*2.))); // tiling fold\n\t\t\n\t\t#ifdef cloud\n\t\tt3 = field(p3);\n\t\t#endif\n\t\t\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) {\n\t\t\tp2=abs(p2)/dot(p2,p2)-formuparam; // the magic formula\n\t\t\t//p=abs(p)/max(dot(p,p),0.005)-formuparam; // another interesting way to reduce noise\n\t\t\tfloat D = abs(length(p2)-pa); // absolute sum of average change\n\t\t\ta += i > 7 ? min( 12., D) : D;\n\t\t\tpa=length(p2);\n\t\t}\n\t\t\n\t\t\n\t\t//float dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\t//if (r>3) fade*=1.-dm; // dark matter, don't render near\n\t\t// brightens stuff up a bit\n\t\tfloat s1 = s+zoffset;\n\t\t// need closed form expression for this, now that we shift samples\n\t\tfloat fade = pow(distfading,max(0.,float(r)-sampleShift));\n\t\t\n\t\t\n\t\t//t3 += fade;\n\t\t\n\t\tv+=fade;\n\t       \t\t//backCol2 -= fade;\n\n\t\t// fade out samples as they approach the camera\n\t\tif( r == 0 )\n\t\t\tfade *= (1.2 - (sampleShift));\n\t\t// fade in samples as they approach from the distance\n\t\tif( r == volsteps-1 )\n\t\t\tfade *= sampleShift;\n\t\tv+=vec3(s1,s1*s1,s1*s1*s1*s1)*a*brightness*fade*0.3; // coloring based on distance\n\t\t\n\t\tbackCol2 += mix(1.4, 0.5, v2) * vec3(1.8 * t3 * t3 * t3, 5.4 * t3 * t3, t3) * fade*0.2;\n\n\t\t\n\t\ts+=stepsize;\n\t\ts3 += stepsize;\n\t\t\n\t\t\n\t\t\n\t\t}\n\t\t       \n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\t \n\t\n\t\n\n\tvec4 forCol2 = vec4(v*.03,1.);\n\t\n\t#ifdef cloud\n\tbackCol2 *= cloud;\n\t#endif\n\t\n\tbackCol2.b *= 1.8;\n\n\tbackCol2.r *= 0.05;\n\t\n\tbackCol2.b = 0.5*mix(backCol2.g, backCol2.b, 0.8);\n\tbackCol2.g = 0.0;\n\n\tbackCol2.bg = mix(backCol2.gb, backCol2.bg, 0.5*(cos(time*0.01) + 1.0));\n\t\n\tfragColor = clamp(forCol2 + vec4(backCol2, 1.0), 0.0, 0.5 ) * 2.0;\n\t\n\tfragColor = vec4(v*0.03, 1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}