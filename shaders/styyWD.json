{
    "Shader": {
        "info": {
            "date": "1661525448",
            "description": "- put your Red/Cyan-glasses on\n- play some techno or your favorit music (bpm - see line 18)\n- drag mouse to rotate view\n\nlove to BigWings - \" RayMarching starting point\"\nmusic: der Schamane - Aerosoul",
            "flags": 64,
            "hasliked": 0,
            "id": "styyWD",
            "likes": 10,
            "name": "Anaglyph Neural Core",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "music",
                "anaglyph",
                "neuron"
            ],
            "usePreview": 0,
            "username": "derSchamane",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "//                   = Anaglyph Neural Core =         \n//                by Maximilian Knape ·∑>|  2022            \n// -----------------------------------------------------------\n// This work is licensed under a Creative Commons Attribution-\n//        NonCommercial-ShareAlike 3.0 Unported License\n\n\n#define GAMMA vec3(.4545)\n\n#define MAX_STEPS 120\n#define MAX_DIST 80.\n#define SURF_DIST .00001\n#define SURF_MUL 13000.\n\n#define EYE_DIS 0.75\n#define FIL_COR 1.2\n\n#define BPM 127. //Set your own speed\n#define iTime iTime * BPM / 124.141\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 p) {\n\n    p *= 1. + smoothstep(-1., 0.5,sin(iTime*6.5))*0.01;\n    vec3 r = p ;\n    float l = length(p);\n    r.xz *= Rot(sin(iTime/19.)*6.28*smoothstep(10., MAX_DIST, l));\n    r.zy *= Rot(sin(iTime/14.)*6.28*smoothstep(5., MAX_DIST, l));\n    r.yx *= Rot(sin(iTime/11.)*6.28*smoothstep(3., MAX_DIST, l));\n    \n    float web = length(cross(sin(r/ (1.0 + smoothstep(5., 10., l))), normalize(r)))-(sin(iTime*1.75+r.y-r.z)*0.02+0.03);\n    \n    float dp = 1. - smoothstep(0., 1., dot(sin(p/10.), cos(p/10.))+sin(iTime/3.25));\n    web -= smoothstep(0.98, 1., sin(pow(length(p), 1.7)/50. - (iTime*3.25)))*0.08*dp;\n    \n    p *= 1. + smoothstep(-0.5,1.0,sin(iTime*3.25))*0.1;\n\n    float wire = abs(dot(sin(p+vec3(0.,0.,0.)), cos(p+(3.14/2.))))-(smoothstep(-0.5, 1., sin(iTime/17.))*3.);\n                         \n    p *= 1. + smoothstep(-0.3,1.0,sin(iTime*6.5))*(0.1+sin(iTime*3.25)*0.05);\n    \n    float sphere = abs(length(p)-5.+(sin(iTime/7.)*2.))-(sin(iTime/21.)*.5+1.);\n\n    float d = mix(sphere, wire, 0.5+(sin(iTime/11.)*0.2));\n    \n    \n    d = mix(d, web, sin(iTime/12.)*0.25+0.3);\n    \n    \n    d = min(d, pow(web, 1.2));\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=17.0;\n    int steps = 0;\n    for(int i=0; i<MAX_STEPS; i++) {\n        steps = i;\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<(SURF_DIST * (pow(dO/ MAX_DIST,1.5)*SURF_MUL+1.))) break;\n    }\n    \n    return vec3(dO, steps, 0.);\n}\n\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(cos(iTime / 12.)*30., 20., sin(iTime / 12.)*30.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    \n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 p1 = vec3(0), p2 = vec3(0);\n    vec3 ro = vec3(0, 4.+(sin(iTime/13.)*5.), -30.+(sin(iTime/7.)*5.));\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.+sin(iTime/3.)*.1);\n    \n    float bg = smoothstep(0.6+sin(iTime/2.7)*.2, 1.0, dot(abs(rd), (normalize(vec3(sin(iTime/1.6), sin(iTime/1.2), sin(iTime/0.5))))));\n    float fac = smoothstep(0.0, 1., sin(iTime/1.3))*clamp(sin(iTime*3.25),0.,1.)*0.3*abs(sin(iTime/2.8));\n    float colL = bg * fac;\n\n    vec3 rmd = RayMarch(ro, rd);\n    float depth = pow(1. - rmd.x / MAX_DIST, 1.0);\n\n    if(rmd.x<MAX_DIST && rmd.x < (1.-colL)*MAX_DIST) \n    {\n        p1 = ro + rd * rmd.x;\n        colL = GetLight(p1) * depth * depth;\n        colL += rmd.y / float(MAX_STEPS) * depth * (1.5-smoothstep(10., 20., length(p1)));\n    }\n    \n    float eyedis = EYE_DIS; //smoothstep(-0.1, 0., sin(iTime/2.))*0.2;\n    ro += cross(rd, vec3(0.,-1.,0.)) * eyedis;\n    rd = R(uv, ro, vec3(0,1,0), 1.+sin(iTime/3.)*.1);\n    \n    bg = smoothstep(0.6+sin(iTime/2.7)*.2, 1.0, dot(abs(rd), (normalize(vec3(sin(iTime/1.6), sin(iTime/1.2), sin(iTime/0.5))))));\n    float colR = bg * fac;\n\n    rmd = RayMarch(ro, rd);\n    depth = pow(1. - rmd.x / MAX_DIST, 1.0);\n\n    if(rmd.x<MAX_DIST && rmd.x < (1.-colR)*MAX_DIST) \n    {\n        p2 = ro + rd * rmd.x;\n        colR = GetLight(p2) * depth * depth;\n        colR += rmd.y / float(MAX_STEPS) * depth * (1.5-smoothstep(10., 20., length(p2)));\n    }\n    \n    //filter correction\n    colL *= FIL_COR; \n    colR /= FIL_COR;\n    \n    //neural flash\n    float dp = 1. - smoothstep(0., 1., dot(sin(p1/10.), cos(p1/10.))+sin(iTime/3.25));\n    float nfL = 1. - smoothstep(0.98, 1., sin(pow(length(p1), 1.7)/50. - (iTime*3.25))) * dp; \n    float nfR = 1. - smoothstep(0.98, 1., sin(pow(length(p2), 1.7)/50. - (iTime*3.25))) * dp;\n    \n    colL *= (1.5 - smoothstep(10., 15., length(p1)) * nfL);\n    colR *= (1.5 - smoothstep(10., 15., length(p2)) * nfR);\n\n    vec3 colS = smoothstep(vec3(0.), vec3(1.), vec3(colL, colR, colR)); //contrast\n    \n    colS = pow(colS, GAMMA);\t//gamma correction\n    \n    fragColor = vec4(colS,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 31962,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/derschamane/aerosoul"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}