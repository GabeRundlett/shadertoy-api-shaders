{
    "Shader": {
        "info": {
            "date": "1604826529",
            "description": "With even better physics (sensor PSF) en deep sky.\n#if 0 line 29 to hide stars cross.\nmouse control.\nuse texture RGB as local coordinate of sphere in each voxel (I should either visit neighbor voxels or avoid voxel margin to not have truncated spheres).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WstBWn",
            "likes": 50,
            "name": "starfield + dark dust 3",
            "published": 3,
            "tags": [
                "raymarching",
                "volume",
                "spectrum",
                "galaxy",
                "nebula",
                "starfield",
                "astrophysics",
                "dust",
                "astronomy",
                "psf",
                "bokglobules"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1725
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/wscfDr\n// #if 0/1 line 29 to hide/see stars cross.\n\n#define rot(a)    mat2( cos(a+vec4(0,11,33,0)) )                              // rotation                  \n\nvoid mainImage(out vec4 O, vec2 U) {    \n    float d,l, I;\n    vec3  R = iResolution, \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(8,4,0)/1e2*cos(iTime+vec3(0,11,0)),\n          D = normalize(vec3( U+U, -3.5*R.y ) - R ),                          // ray direction\n          p = 2./R, L; \n    vec4  r, T = vec4(1), \n          C = exp(-.5*vec4(1,2,4,0)),                                         // dark dust unit transparency\n          S = vec4(.4,.6,1,0);                                                // star color\n    O-=O;\n    p.xy *= rot( .5+6.*M.y), D.xy *= rot( .5+6.*M.y);                         // camera move \n    p.xz *= rot( 2.-6.*M.x), D.xz *= rot( 2.-6.*M.x);\n    p.xy += cos( iTime + vec2(0,11)) - 2.*iTime;\n    \n    for ( float i=1.; i < 150.; i++,  p += D ) {                              // volume ray-casting\n        r = texture( iChannel0, (floor(p)+.5)/32. );                          // per voxel 4 random floats\n        // NB: we should either visit neighbor cells or avoid cell margins, but cut spheres are rare\n        L = fract(p) - r.rgb ;                                                // distance to sphere in voxel\n        d = -dot(L,D);            // distance ray-sphere: d/dl ( || P+l.D - C ||² )  = 2l + 2 (CP.D)\n        if (// r.a > .9 &&        // less blue-noise more white noise. but strange artifact\n            i>0. || d > 0.)                                                   // for not seeing in our back ;-)\n#define PSF(L) ( l = i/length(L) ,  min( 1e9, l*l*l ) ) // light on sensor = Istar * 1/d² * 1/pixeldist³ = Istar * d/dist³, cf https://www.shadertoy.com/results?query=star+psf\n            I = PSF( L += d*D ),                                              // L= point on the ray that is closest to sphere\n#if 1                             // 1 to see star cross\n            L.xz *= rot( -(2.-6.*M.x) ), L.xy *= rot( -(.5+6.*M.y) );         // back to screen-space\n            I +=  .3* PSF( L.xy * vec2(10,.2) ),\n            I +=  .3* PSF( L.xy * vec2(.2,10) ),\n#endif\n            O += T *   S * I/(i*i);                                           // blend to final color                     \n\n        l = max(0., 3.*texture( iChannel0, p/128. ).a -2.);                   // random density dark dust transparency\n        T *= pow(C, vec4(l));                                                 // cumul opacity\n    }\n    O = pow(  9e-7* O, vec4(1./2.2) );                                        // exposure + to sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}