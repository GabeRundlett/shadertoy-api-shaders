{
    "Shader": {
        "info": {
            "date": "1625702757",
            "description": "Full Screen shows way more!\nComments on the process are in the image tab\nReminds me of shooting stars and nursery rhymes.",
            "flags": 48,
            "hasliked": 0,
            "id": "stfXDN",
            "likes": 9,
            "name": "Conway at Night[Full Screen]",
            "published": 3,
            "tags": [
                "coloring",
                "conway",
                "gameoflife",
                "gol"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "/*\n\nI added a hack to get more action.\nIn Buffer A when a cell dies there is now\na 0.002 percent chance that it will be reborn as a glowing orb.\nAll the other things (fire flies, clowns, and brass knuckels)\nlike to crowd around and sometimes hang out or something.\n\nI mean that is, at least to me, an apt description of what's\nbeen happening so far.\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates 0 (from to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 tex = texture(iChannel0,uv);\n\n    fragColor = vec4(tex.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n\nfloat count(vec2 p, vec2 off){\n\n    float cnt = 0.;\n    \n    cnt += texture(iChannel0, p + vec2(off.x,off.y)).y;\n    cnt += texture(iChannel0, p + vec2(off.x,0.0)).y;\n    cnt += texture(iChannel0, p + vec2(off.x,-off.y)).y;\n    cnt += texture(iChannel0, p + vec2(0.,off.y)).y;\n    cnt += texture(iChannel0, p + vec2(0.,-off.y)).y;\n    cnt += texture(iChannel0, p + vec2(-off.x,off.y)).y;\n    cnt += texture(iChannel0, p + vec2(-off.x,0.0)).y;\n    cnt += texture(iChannel0, p + vec2(-off.x,-off.y)).y;\n    \n    return cnt;\n    \n}\n\nvoid mainImage( out vec4 data, in vec2 fragCoord )\n{\n\n   //fragCoord -= mod(fragCoord, float(S));\n    vec2 off = S/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;//  + (off * .5);\n    vec2 st = fract(uv*skale);\n    vec2 id = floor(uv*skale);\n    vec3 mouse = iMouse.xyz;\n    \n    float c;\n    \n    float state,val,speed,resx;\n    \n    \n    //set up / spacebar reset\n    if(iFrame == 0 || texture(iChannel1,  vec2(0.126953125, .25)).x > 0.){\n    \n        uv = fragCoord/iResolution.xy;\n        \n        //st = fract(uv*skale);        \n        id = floor(uv*skale);\n\n        \n        //val = rnd(id);\n        state = step(0.65,rnd(uv));\n        val = 0.;\n        //speed = rnd(id+vec2(1.))*0.002+0.99;\n        //resx = iResolution.x;\n        \n    }\n    else{\n        //get own texture\n        vec4 tex = texture(iChannel0, uv);\n        \n        float c = count(uv,off);\n        \n        state = tex.y;\n        \n            if((c == 2. && state == 1.) || c == 3.){\n            \n            //this variation is like a tiling\n            //if((c == 2. && state == 1.) || c == 1.){\n            \n                state = 1.;\n            }\n            \n            //if cell dies, increment val, the death counter\n            //\"Death Counting\"\n            else{\n            \n            \n                state = step(0.998,rnd(uv));//0.;\n                val += 1.;\n            }    \n    \n    }\n\n\n    data = vec4(val, state, speed, rnd(vec2(uv.x*uv.y)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n//scaling and aspect ration have to happen for st and not the orig uv\n#define S 1.\n#define skale vec2(S,S)\n//*(iResolution.y/iResolution.x))\n//#define off vec2(iResolution.x/skale.x,iResolution.y/skale.y)\n\nfloat rnd(vec2 id){\n    return fract(sin(id.x*12.99+id.y*800.+40.)*51343.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates 0 (from to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //for color\n    \n    //the 256 effects the highlights. lower for more highlights.\n    vec2 st = uv;// fract(uv*iResolution.xy/256.);\n\n    vec4 tex = texture(iChannel0,uv/8.);\n    \n    vec3 col;// = vec3(step(0.5,tex.y));// * (1.0-length(st-vec2(0.5))-0.3);\n\n       //glow \n    col = 0.5+0.5*cos(vec3(tex.y*tex.x*tex.y*1.)+vec3(0,2,4)/4.+tex.y*tex.x*3. +3.);\n       \n\n    \n    col = pow(col,vec3(2.))*5.;\n    col = mix(col, texture(iChannel1,uv).rgb, .9);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}