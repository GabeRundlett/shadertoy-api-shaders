{
    "Shader": {
        "info": {
            "date": "1640019316",
            "description": "infinite traditional hallway",
            "flags": 0,
            "hasliked": 0,
            "id": "7ldXDl",
            "likes": 19,
            "name": "infinite traditional hallway",
            "published": 3,
            "tags": [
                "hallway"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 64\n#define MAX_DIST 64.\n#define SURF_DIST .0001\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p.x)-s.x,abs(p.y)-s.y)\n#define ZERO (min(iFrame,0))\n#define TRADITIONAL_ASSET0_MAT 0\n#define FRAME_MAT0 4\n#define FRAME_MAT1 5\n#define FRAME_MAT2 6\n#define FRAME_MAT3 7\n#define FRAME_MAT4 8\n\n// by Dave_Hoskins\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat doorFrame(vec3 p){\n    vec3 prevP = p;\n    \n    p.x = abs(p.x)-0.5;\n    float d = B3D(p,vec3(0.02,0.8,0.02));\n    p = prevP;\n    \n    p.y = abs(p.y)-0.78;\n    float d2 = B3D(p,vec3(0.5,0.02,0.02));\n    \n    d = min(d,d2);\n    return d;\n}\n\nfloat doorFrameWire(vec3 p){\n    p.y-=0.27;\n    vec3 prevP = p;\n    \n    p.y = mod(p.y,0.2)-0.1;\n    float d = B3D(p,vec3(0.5,0.01,0.01));\n    p = prevP;\n    \n    p.x = mod(p.x,0.2)-0.1;\n    float d2 = B3D(p,vec3(0.01,0.6,0.01));\n    d = min(d,d2);\n    p = prevP;\n    return max(B3D(p,vec3(0.5,0.51,0.03)),d);\n}\n\nvec2 doorModel1(vec3 p){\n    vec3 prevP = p;\n    \n    float d = doorFrame(p);\n    float d2 = doorFrameWire(p);\n    d = min(d,d2);\n    \n    vec2 model = vec2(d,FRAME_MAT0);\n    \n    d = B3D(p-vec3(0.0,0.275,0.0),vec3(0.5,0.5,0.001));\n    vec2 model2 = vec2(d,FRAME_MAT1);\n    \n    d = B3D(p-vec3(0.0,-0.5,0.0),vec3(0.5,0.28,0.001));\n    vec2 model3 = vec2(d,FRAME_MAT2);\n    \n    return combine(model,combine(model2,model3));\n}\n\nvec2 doorModel2(vec3 p){\n    vec3 prevP = p;\n    \n    float d = doorFrame(p);\n    float d2 = doorFrameWire(p);\n    \n    p.y-=0.27;\n    d2 = max((length(abs(p.xy))-0.4),d2);\n    d = min(d,d2);\n    \n    vec2 model = vec2(d,FRAME_MAT0);\n    \n    p = prevP;\n    d = B3D(p-vec3(0.0,0.275,0.0),vec3(0.5,0.5,0.001));\n    p.y-=0.27;\n    d = max((length(abs(p.xy))-0.4),d);\n    \n    vec2 model2 = vec2(d,FRAME_MAT1);\n    \n    p = prevP;\n    d = B3D(p-vec3(0.0,-0.5,0.0),vec3(0.5,0.28,0.001));\n    vec2 model3 = vec2(d,FRAME_MAT2);\n    \n    p = prevP;\n    d = B3D(p-vec3(0.0,0.275,0.0),vec3(0.5,0.5,0.001));\n    p.y-=0.27;\n    d = max(-(length(abs(p.xy))-0.4),d);\n    \n    vec2 model4 = vec2(d,FRAME_MAT3);    \n    \n    return combine(model,combine(model2,combine(model3,model4)));\n}\n\nvec2 doorModel3(vec3 p){\n    vec3 prevP = p;\n    \n    float d = doorFrame(p);\n    p.y-=0.1;\n    p.y = mod(p.y,0.2)-0.1;\n    float d2 = B3D(p,vec3(0.5,0.01,0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = mod(p.x,0.2)-0.1;\n    d2 = B3D(p,vec3(0.01,0.8,0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    d = max(B3D(p,vec3(0.5,0.78,0.03)),d);\n    \n    vec2 model = vec2(d,FRAME_MAT0);\n\n    d = B3D(p,vec3(0.48,0.76,0.001));\n    vec2 model2 = vec2(d,FRAME_MAT1);\n    \n    return combine(model,model2);\n}\n\nvec2 openDoorModel(vec3 p){\n    vec3 prevP = p;\n    \n    float d = doorFrame(p);\n    p.x+=0.4;\n    float d2 = length(p.xy)-0.035;\n    d2 = max(abs(p.z)-0.011,d2);\n    d = min(d,d2);\n    vec2 model = vec2(d,FRAME_MAT0);\n    p = prevP;\n    d = B3D(p,vec3(0.48,0.76,0.001));\n    vec2 model2 = vec2(d,FRAME_MAT4);\n    \n    return combine(model,model2);\n}\n\nvec2 tatamiFloor(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(1.0,0.1,5.0));\n    vec2 model = vec2(d,-1);\n    return model;\n}\n\nvec2 doorBlock(vec3 p){\n    vec3 prevP = p;\n    p.y-=0.1;\n    p.x = abs(p.x)-1.0;\n    p.xz*=Rot(radians(90.0));\n    vec2 model1 = doorModel1(p);\n    vec2 model2 = doorModel2(p-vec3(1.0,0.0,0.0));\n    vec2 model3 = doorModel3(p-vec3(-1.0,0.0,0.0));\n    \n    return combine(model1,combine(model2,model3));\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    p.y+=0.8;\n    vec2 model = tatamiFloor(p);\n    \n    p = prevP;\n    p.z-=iTime;\n    p.z=mod(p.z,3.0)-1.5;\n    vec2 model2 = doorBlock(p);\n    \n    p = prevP;\n    p.y-=0.1;\n    p.x = abs(p.x)-(0.75-(sin(iTime*2.0)*0.2));\n    p.z-=iTime;\n    p.z=mod(p.z,4.0)-2.;\n    vec2 model3 = openDoorModel(p);\n    \n    p = prevP;\n    p.z-=iTime;\n    p.z=mod(p.z,4.0)-2.;\n    float d = B3D(p-vec3(0.0,-0.7,0.0),vec3(1.0,0.03,0.03));\n    p.x = abs(p.x)-1.0;\n    float d2 = B3D(p,vec3(0.03,1.0,0.03));\n    vec2 model4 = vec2(min(d,d2),FRAME_MAT0);\n    \n    return combine(model, combine(model2,combine(model3,model4)));\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    //float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,2,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    //float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.); // spec\n        \n    return diffCol;\n}\n\nvec3 reflectMaterial(vec3 p, vec3 rd, vec3 n) {\n    vec3 r = reflect(p+rd*1.6,n);\n    vec3 col = r;\n    \n    return col;\n}\n\nfloat tatami(vec2 p){\n    p*=2.0;\n    vec2 uv = fract(p)-0.5;\n    vec2 prevUV = uv;\n    vec2 id = floor(p);\n    float n = hash12(id);\n    \n    float d = 100.0;\n    if(n<0.5){\n        uv.x-=0.45;\n        d = B(uv,vec2(0.05,0.5));\n    }\n    uv = prevUV;\n    uv.y-=0.45;\n    float d2 = B(uv,vec2(0.5,0.05));\n    return min(d,d2);\n}\n\nvec3 tatamiMat(vec2 p, vec3 col){\n    float d = tatami(p);\n    p.x*=0.1;\n    vec2 id = floor(p*500.0);\n    float n = hash12(id);\n    col = mix(vec3(0.6,0.7,0.6)-(n*n*0.1),vec3(0.15,0.3,0.25)*n,S(d,0.0));\n    return col;\n}\n\nfloat texNoise(vec2 p){\n    vec2 id = floor(p*500.0);\n    float n = hash12(id);\n    return n;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    vec3 np = p;\n    np.z-=iTime;\n    float nn = texNoise(np.xz);\n    if(mat == FRAME_MAT0){\n        return diffuseMaterial(n,rd,p,vec3(0.4,0.2,0.1)-(nn*nn*0.1));\n    }\n    \n    if(mat == FRAME_MAT1){\n        return diffuseMaterial(n,rd,p,vec3(1.0)-(nn*nn*0.1));\n    }\n    if(mat == FRAME_MAT2){\n        return diffuseMaterial(n,rd,p,vec3(0.8,0.7,0.5)-(nn*nn*0.1));\n    }\n    if(mat == FRAME_MAT3){\n        return diffuseMaterial(n,rd,p,vec3(0.7,0.6,0.4)-(nn*nn*0.1));\n    }\n    if(mat == FRAME_MAT4){\n        np.x = abs(np.x)-(0.75-(sin(iTime*2.0)*0.2));\n        nn = texNoise(np.xz);\n        return diffuseMaterial(n,rd,p,vec3(1.2)-(nn*0.05));\n    }\n    p.z-=iTime;\n    return diffuseMaterial(n,rd,p,tatamiMat(p.xz,col));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy -.3;\n    \n    float t = iTime;\n\n    vec3 ro = vec3(0, 0.0, 1.0);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    //ro.yz *= Rot(radians(10.0));\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0.0), 0.5);\n    rd*=matRotateZ(radians(sin(t*0.5)*15.0));\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        col *= exp( -0.038*d.x*d.x*d.x );//fog\n    } else {\n        col = mix(vec3(0.0),vec3(0.2,0.1,0.3),uv.y);\n    }\n    \n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}