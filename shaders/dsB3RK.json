{
    "Shader": {
        "info": {
            "date": "1667955849",
            "description": "An assortment of tricks picked up from @Nusan via twitter/shadertoy - mult-tap map @Shane\n\nleft = bayer | right = blue noise\nfilter = linear",
            "flags": 0,
            "hasliked": 0,
            "id": "dsB3RK",
            "likes": 20,
            "name": "Cube Field / DOF experiment",
            "published": 3,
            "tags": [
                "raymarching",
                "time",
                "cubes",
                "states"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 395
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n   \n    Cube Field / DOF experiment\n    11/08/22 | byt3_m3chanic\n\n    Trying to use a bayer texture and some tricks picked up from @Nusan to\n    do this DOF thing..more experiment than accuracy\n\n    left = bayer | right = blue noise\n    @Xor suggestion for blue noise..\n*/\n\n\n#define R     iResolution\n#define T     iTime\n#define M     iMouse\n#define PI    3.14159265358\n#define PI2   6.28318530718\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a){ return fract(sin(dot(a,vec2(22.34,35.34)))*483434.);}\nvec2 hash22(vec2 uv) {return fract(sin(uv*425.215+uv.yx*714.388)*vec2(522.877));}\n\nfloat box(vec3 p, vec3 a){\n    vec3 q = abs(p)-a;\n    return length(max(q,0.))-min(max(q.x,max(q.z,q.y)),0.);\n}\n\nconst float scale = 2.;\nconst vec2 s = vec2(scale*2.);\n\nfloat pf=0.,spf=0.,gpf=0.,hsh=0.,gsh=0.,glow=0.,sglow=0.;\nvec3 hit=vec3(0),hp=vec3(0);\n\nvec2 map(vec3 q3) {\n    vec2 res=vec2(1e5,0.);\n\n    float yd=floor((q3.y+3.)/6.);\n    q3.y=mod(q3.y+3.,6.)-3.;\n    q3.z+=T*1.5;\n    \n    // Multi Tap loop @Shane https://www.shadertoy.com/view/WtffDS\n    vec2 p,ip,ct = vec2(0);\n    const vec2[4] ps4 = vec2[4](vec2(-.5,.5),vec2(.5),vec2(.5,-.5),vec2(-.5));\n    float d1=1e5;\n    \n    for(int i = 0; i<4; i++) {\n    \n        ct = ps4[i]/2. -  ps4[0]/2.;\n        p = q3.xz - ct*s;\n        ip = floor(p/s) + .5;\n        p -= (ip)*s;\t   \n        vec2 idi = (ip + ct)*s;\n\n        vec3 q = vec3(p.x,q3.y,p.y);\n    \n        float hs=hash21(idi+yd);\n        float gs=hash21(idi+yd+floor(T*2.));\n        \n        //@Nusan - mixing states from twitter..\n        pf = mix(hash21(vec2(floor(T)+hs)), hash21(vec2(floor(T)+1.+hs)), pow(smoothstep(0.,1.,fract(T)), 8.));\n        pf = clamp(pf*.45,.15,1.);\n\n        float d = box(q,vec3(scale*pf))-.075;\n        d=max(d,-(box(q,vec3(scale*pf*.8))-.075));\n        \n        float thk = (scale*.7*pf),thx = (scale*.03);\n        float pipe = min(min(length(q.xz)-thk,length(q.yz)-thk),length(q.yx)-thk);\n        float xipe = min(length(q.yx)-thx,length(q.yz)-thx);\n\n        if(xipe<res.x) {\n            res=vec2(xipe,2.);\n            gsh=hs;\n            hit=q;\n            gpf=pf;\n        }\n        \n        if(hs<.9) d=max(d,-pipe);\n        \n        if(d<res.x) {\n            res=vec2(d,1.);\n            hit=q;\n            gsh=hs;\n            gpf=pf;\n        }\n        \n        float d4 = length(q)-(scale*.35*pf);\n        if(gs>.68&&hs<.9) glow+=.004/(.0025+d4*d4);\n        if(d4<res.x&&gs>.68) {\n            res=vec2(d4,2.);\n            gsh=hs;\n        }\n    }\n    return res;\n}\n\nvec3 normal(vec3 p, float t){\n    vec2 e=vec2(t*1e-3,0.);\n    float d = map(p).x;\n    vec3 n = d-vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x\n    );\n    return normalize(n);\n}\n\n// Tri-Planar blending function. Ryan Geiss: \n// https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html\nvec3 tex3D(sampler2D t, in vec3 p, in vec3 n ){\n    p*=.175;\n    p+=hsh*5.;\n    p.xz*=rot(hsh*PI2+.38);\n    n = max(abs(n), 1e-3);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(t, p.yz).xyz;\n    vec3 ty = texture(t, p.zx).xyz;\n    vec3 tz = texture(t, p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n;\n}\n\nvec3 hue(float a){return .33+.66*sin(PI2*a*vec3(.95,.48,.08)*vec3(1,.98,.95));}\n\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n\tvec2 uv = (2.*F.xy - R.xy)/max(R.x,R.y);\n    vec2 vv=uv;\n    uv*=rot(-.38*sin(T*.1));\n\tvec3 C = vec3(0);\n    \n    vec3 ro = vec3(0,0,6), rd=normalize(vec3(uv,-1.));\n\n    float dof = 0.001;\n    float dofdist = 1.0/6.;\n    vec2 off=vec2(.05);\n\n    float y = M.xy == vec2(0) ? 0. : (M.x/R.x * 2. - 1.) * PI;     \n    mat2 rx = rot(-.72),ry = rot(T*.05+y);\n    ro.zy*=rx;ro.xz*=ry;\n    rd.zy*=rx;rd.xz*=ry;\n   \n    float fa=0.;\n    for(int k=0;k<2;k++){\n    \n        vec3 p = ro;\n        float d = 0., m = 0.;\n\n\n        vec3 RC = vec3(0);\n        for(int i=0;i<86;i++){\n\n            //modified jitter/dof \n            //inspiration @Nusan https://www.shadertoy.com/view/3sXyRN\n            if(mod(float(i),2.)<1.){\n                off= vv.x>.0? texture(iChannel1,F.xy/1024.).rg*2.-1.: texture(iChannel2,F.xy/8.).rg*2.-1.;\n                vec2 fp = off*dof;\n                ro.xz+= vv.x>.0? fp*(d)*.002: fp*(d)*.02;\n                rd.xy+= vv.x>.0? fp*(d*d)*dofdist*.02: fp*(d*d)*dofdist*.04;\n            }\n            \n            p=ro+d*rd;\n\n            vec2 ray = map(p);\n            m=ray.y;\n            d+=i<20?ray.x*.5:ray.x*.9;\n            if(ray.x<d*1e-4||d>30.)break;\n        }\n\n        hsh=gsh;\n        spf=gpf;\n        hp=hit;\n        \n        if(k==0) {fa=d;sglow=glow;}\n        \n        if(d<30.) {\n            vec3 n = normal(p,d);\n            vec3 l = normalize(vec3(1,14,-5));\n            float diff = clamp(dot(n,l),0.1,1.);\n       \n            vec3 h = hue(73.+hsh);\n            h=mix(tex3D(iChannel0,hp/spf,n).rgb,h,.05);\n            if(m==2.) h = vec3(.1);\n            RC=diff*h;\n\n            ro = p+n*.001;\n            rd = reflect(rd,n);\n\n        }\n\n        if(k>0) RC *=.125;\n\n        C = clamp(C+RC,vec3(0),vec3(1));\n\n    }\n    \n    C=mix(C,vec3(sglow,sglow*.5,sglow*.15),clamp(sglow,0.,.2));\n    C=mix(C,mix(vec3(.12,.08,.06),vec3(.9,.69,.39),clamp((uv.y+.5)*.5,0.,1.)),1.-exp(-.0003*fa*fa*fa));\n    if(vv.x>-.002&&vv.x<.002)C=vec3(1);\n    C=pow(C,vec3(.4545));\n\tfragColor = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}