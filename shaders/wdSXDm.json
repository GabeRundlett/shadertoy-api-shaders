{
    "Shader": {
        "info": {
            "date": "1554019922",
            "description": "Try to make it look like Audio Architecture...\nhttps://www.youtube.com/watch?v=RvNpY-gF_LE",
            "flags": 0,
            "hasliked": 0,
            "id": "wdSXDm",
            "likes": 3,
            "name": "Audio Architecture",
            "published": 3,
            "tags": [
                "audioarchitecture"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 401
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nvec4 map(vec3 p){\n    vec3 pref = p;\n    \n    float speed = 5.0;\n    pref.y += sin((iTime*speed)+pref.x*10.0)*0.2;\n    \n    float d = sdBox((pref+vec3(0.0,0.0,-1.2)),vec3(0.5,0.02,0.05));\n    float d2 = sdBox((pref+vec3(0.0,0.0,-1.0)),vec3(0.5,0.02,0.05));\n    float d3 = sdBox((pref+vec3(0.0,0.0,-1.4)),vec3(0.5,0.02,0.05));\n    float d4 = sdBox((pref+vec3(0.0,0.0,-1.6)),vec3(0.5,0.02,0.05));\n    pref = p;\n    \n    float resD = min(min(min(d,d2),d3),d4);\n    \n    float size = 0.7;\n    float thickness = 0.005;\n    float barD = sdBox((pref+vec3(0.0,-size,-0.8)),vec3(size,thickness,thickness));\n    float barD2 = sdBox((pref+vec3(0.0,size,-0.8)),vec3(size,thickness,thickness));\n    float barD3 = sdBox((pref+vec3(size,0.0,-0.8)),vec3(thickness,size,thickness));\n    float barD4 = sdBox((pref+vec3(-size,0.0,-0.8)),vec3(thickness,size,thickness));\n    \n    float barD5 = sdBox((pref+vec3(0.0,-size,-0.8-size)),vec3(size,thickness,thickness));\n    float barD6 = sdBox((pref+vec3(0.0,size,-0.8-size)),vec3(size,thickness,thickness));\n    float barD7 = sdBox((pref+vec3(size,0.0,-0.8-size)),vec3(thickness,size,thickness));\n    float barD8 = sdBox((pref+vec3(-size,0.0,-0.8-size)),vec3(thickness,size,thickness));\n    \n    float barD9 = sdBox((pref+vec3(-size,-size,-0.8-(size*0.5))),vec3(thickness,thickness,size*0.5));\n    float barD10 = sdBox((pref+vec3(-size,size,-0.8-(size*0.5))),vec3(thickness,thickness,size*0.5));\n    float barD11 = sdBox((pref+vec3(size,-size,-0.8-(size*0.5))),vec3(thickness,thickness,size*0.5));\n    float barD12 = sdBox((pref+vec3(size,size,-0.8-(size*0.5))),vec3(thickness,thickness,size*0.5));\n    \n    float resBarD = min(min(min(min(min(min(min(barD,barD2),barD3),barD4),barD5),barD6),barD7),barD8);\n    float resBarD2 = min(min(min(min(resBarD,barD9),barD10),barD11),barD12);\n    \n    return vec4(vec3(0.5),min(resD,resBarD2));\n}\n\nvec3 normalMap(vec3 p){\n\tfloat d = 0.0001;\n\treturn normalize(vec3(\n\t\tmap(p + vec3(  d, 0.0, 0.0)).w - map(p + vec3( -d, 0.0, 0.0)).w,\n\t\tmap(p + vec3(0.0,   d, 0.0)).w - map(p + vec3(0.0,  -d, 0.0)).w,\n\t\tmap(p + vec3(0.0, 0.0,   d)).w - map(p + vec3(0.0, 0.0,  -d)).w\n\t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    mat3 camRotY = matRotateY(radians(sin(iTime)*3.0));\n    \n\tvec3 ro=vec3(0.,0.0,0.0);\n    vec3 rd=normalize(vec3(p,1.0));\n\t\n    float t, dist;\n\tt = 0.0;\n\tvec3 distPos = vec3(0.0);\n\tvec4 distCl = vec4(0.0);\n\tfor(int i = 0; i < 30; i++){\n\t\tdistCl = map(distPos);\n\t\tdist = distCl.w;\n\t\tif(dist < 1e-4){break;}\n        if(t>13.)break;\n\t\tt += dist;\n\t\tdistPos = (ro+rd*t)*camRotY;\n\t}\n\n\tvec3 color;\n\tfloat shadow = 1.0;\n\t\n\tif(t < 13.){\n\t\t// lighting\n\t\tvec3 lightDir = vec3(1.0, 10.0, 1.0);\n\t\tvec3 light = normalize(lightDir);\n\t\tvec3 normal = normalMap(distPos);\n\n        vec3 V = distPos;\n        vec3 L = normalize(lightDir-V);\n        \n        vec3 E = normalize(-V);\n        vec3 R = normalize(-reflect(L, normal));\n        \n\t\t// difuse color\n        float diffuseVal = 2.7;\n        float diffuse = diffuseVal * max(dot(normal, L), 0.0);\n        diffuse = clamp(diffuse, 0.0, 1.0);\n        \n\t\tfloat specVal = 0.9;\n\t\tfloat shininess = 10.0;\n\t\tfloat spec = specVal * pow(max(dot(R, E), 0.0), 0.3*shininess);\n        spec = clamp(spec, 0.0, 1.0);\n\t\t\t\t\n        float AmbientVal = 1.5;\n        vec3 AmbientColor = vec3(0.5);\n        vec3 DiffuseColor = vec3(0.3,0.3,0.3);\n        vec3 SpecularColor = vec3(0.9);\n\t\tvec3 ambient = AmbientVal * AmbientColor;        \n        \n\t\tfloat lambert = max(.0, dot( normal, light));\n\n\t\t// result\n\t\tcolor = (distCl.xyz+(.1-length(p.xy)/3.))*vec3(1.0, 1.0, 1.0);\n        color *= ambient +(DiffuseColor * diffuse)+ (SpecularColor*spec);\n\t}else{\n        color =.84*max(mix(vec3(1.5,1.51,1.55)+(.1-length(p.xy)/3.),vec3(1),.1),0.);\n\t}\n    \n\t// rendering result\n\tfloat brightness = 1.0;\n\tvec3 dst = color*brightness;\n\tfragColor = vec4(dst, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}