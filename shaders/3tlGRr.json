{
    "Shader": {
        "info": {
            "date": "1555510422",
            "description": "Classical rotation demo which may cause a headpain ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "3tlGRr",
            "likes": 11,
            "name": "Rotation headpain",
            "published": 3,
            "tags": [
                "grid",
                "rotation",
                "headpain"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "#define SIZE 15.0 \n#define HPI 1.5707963 \n#define COL1 vec3(32, 43, 51) / 255.0 \n#define COL2 vec3(235, 241, 245) / 255.0 \n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n { \n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x;\n    float hsm = 1.5 / iResolution.y * SIZE * 0.5; // Half-Smooth factor\n        \n    uv *= SIZE; // Make grid\n    vec2 id = floor(uv);\n    uv = fract(uv) - 0.5;\n    \n    float angle = iTime; // Prepare rotation matrix    \n    \n    float phase = mod(floor(angle / HPI), 2.0); // Determine what phase is right now\n    \n    float mask = 0.0;\n    for(float y =- 1.0; y <= 1.0; y++ ) { // Loop to draw neighbour cells\n        for(float x =- 1.0; x <= 1.0; x++ ) {\n            vec2 ruv = uv + vec2(x, y);\n            vec2 rid = id + vec2(x, y);\n                        \n            // Golfed Rotation https://www.shadertoy.com/view/XlsyWX\n            ruv *= mat2(cos( angle + vec4(0,33,11,0)));\n            \n            vec2 maskXY = smoothstep(0.5 + hsm, 0.5 - hsm, abs(ruv));            \n            float maskI = maskXY.x*maskXY.y;  \n            \n            vec2 idm = mod(rid, 2.0);\n            float draw = abs(idm.x*idm.y + (1.-idm.x)*(1.-idm.y) - phase); // Flip depending on phase            \n            \n            mask += maskI * draw;\n        }\n    }\n    \n    vec3 col = vec3(1.0);\n    col = mix(COL1, COL2, abs(mask - phase)); // Color flip depending on phase\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}