{
    "Shader": {
        "info": {
            "date": "1699490810",
            "description": "mat4x3 create life thing ig\n\nterritorial simulator with the current neural network it's using. going from normal size to fullscreen is kinda fun.",
            "flags": 32,
            "hasliked": 0,
            "id": "cttyRf",
            "likes": 1,
            "name": "4x3 Neural Cellular Automata",
            "published": 3,
            "tags": [
                "cellularautomata",
                "neuralnetwork"
            ],
            "usePreview": 0,
            "username": "ThePlaneGuy45",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iMouse.xy != vec2(0)){\n        fragCoord*=iMouse.x/iResolution.x;\n    }\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0)*.5+.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n#define v(x, y) ivec2(mod(c+vec2(x, y), iResolution.xy))\n\nvoid mainImage( out vec4 t, in vec2 c )\n{\n    if(iFrame==0){\n        t=vec4(hash33(vec3(c, SEED))*2.-1.,1.0); \n        return;\n    }\n    \n    if(!(mod(float(iFrame), 1.0)==0.0)){\n        t=texelFetch(iChannel0, ivec2(c), 0);\n        return;\n    }\n    \n    float rng = hash33(vec3(c, iFrame)).r*2.-1.;\n    \n    vec3 u = texelFetch(iChannel0, v( 0, 1), 0).rgb;\n    vec3 d = texelFetch(iChannel0, v( 0,-1), 0).rgb;\n    vec3 l = texelFetch(iChannel0, v( 1, 0), 0).rgb;\n    vec3 r = texelFetch(iChannel0, v(-1, 0), 0).rgb;\n    \n    u =    up*vec4(u, rng);\n    d =  down*vec4(d, rng);\n    l =  left*vec4(l, rng);\n    r = right*vec4(r, rng);\n    \n    vec4 b = normalize(vec4(upBias,downBias,leftBias,rightBias));\n    \n    vec3 f = clamp(b.x*u+b.y*d+b.z*l+b.w*r, -1.0, 1.0);\n\n    t = vec4(f,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SEED 0\n\nconst float SPR = 1.0;\n\nconst float  upBias = 1.0;\nconst mat4x3 up = mat4x3(\n    1.0,-1.0,-1.0,\n   -1.0, 1.0,-1.0,\n   -1.0,-1.0, 1.0,\n    SPR, SPR, SPR\n);\n\nconst float  downBias = 1.0;\nconst mat4x3 down = mat4x3(\n    1.0,-1.0,-1.0,\n   -1.0, 1.0,-1.0,\n   -1.0,-1.0, 1.0,\n    SPR, SPR, SPR\n);\n\nconst float  leftBias = 1.0;\nconst mat4x3 left = mat4x3(\n    1.0,-1.0,-1.0,\n   -1.0, 1.0,-1.0,\n   -1.0,-1.0, 1.0,\n    SPR, SPR, SPR\n);\n\nconst float  rightBias = 1.0;\nconst mat4x3 right = mat4x3(\n    1.0,-1.0,-1.0,\n   -1.0, 1.0,-1.0,\n   -1.0,-1.0, 1.0,\n    SPR, SPR, SPR\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 a = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 b = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    fragColor = mix(a, b, iMouse.y/iResolution.y);\n    if(iFrame<=1){fragColor=a;}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}