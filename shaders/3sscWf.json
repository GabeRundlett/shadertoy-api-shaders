{
    "Shader": {
        "info": {
            "date": "1585749667",
            "description": " Spiders on a double helix ramp - from Leonardo's Chateau de Chambord staircase;\n normal and panoramic views - mouseable.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3sscWf",
            "likes": 15,
            "name": "Helical Ramps with Spiders",
            "published": 3,
            "tags": [
                "helix",
                "spider",
                "symmetry",
                "walk"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "// \"Helical Ramps with Spiders\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define N_SPD  5  // Number of spiders per turn (1-20, roughly)\n\n#define AA  0   // optional antialiasing\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrEETapCylDf (vec3 p, vec3 v1, vec3 v2, float r, float rf);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\n\nvec3 footPos[8], kneePos[8], hipPos[8], ltDir, qHit;\nfloat tCur, dstFar, legLenU, legLenD, bdyHt, spdVel, nSpd, vGap, radExt, radRmp;\nint idObj;\nconst int idRmp = 1, idCol = 2, idWalI = 3, idWalM = 4, idWalO = 5, idBm = 6,\n   idBdy = 11, idHead = 12, idEye = 13, idAnt = 14, idLegU = 15, idLegD = 16;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat SpdDf (vec3 p, float dMin, int tpId)\n{\n  vec3 q;\n  float d, s, len, szFac;\n  szFac = 0.22;\n  p /= szFac;\n  dMin /= szFac; \n  p.y -= bdyHt + 0.8;\n  q = p - vec3 (0., -0.15, 0.2);\n  d = PrEllipsDf (q, vec3 (0.7, 0.5, 1.3));\n  DMINQ (idBdy + tpId);\n  q = p - vec3 (0., 0.1, 1.1);\n  d = PrEllipsDf (q, vec3 (0.2, 0.4, 0.5));\n  DMINQ (idHead + tpId);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.15, 0.25, 1.5);\n  d = PrSphDf (q, 0.13);\n  DMINQ (idEye + tpId);\n  q -= vec3 (0., 0.15, -0.3);\n  d = PrEETapCylDf (q, 1.3 * vec3 (0.3, 1.1, 0.4), vec3 (0.), 0.07, 0.7);\n  DMINQ (idAnt + tpId);\n  p.y += bdyHt;\n  for (int j = VAR_ZERO; j < 8; j ++) {\n    q = p - hipPos[j];\n    d = 0.6 * PrEETapCylDf (q, kneePos[j], hipPos[j], 0.25, 0.3);\n    DMINQ (idLegU + tpId);\n    q = p - kneePos[j];\n    d = 0.6 * PrEETapCylDf (q, footPos[j] - vec3 (0.3), kneePos[j] - vec3 (0.3), 0.2, 1.2);\n    DMINQ (idLegD + tpId);\n  }\n  return dMin * szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, widRmp, aRot, r, a, ai, s;\n  dMin = dstFar;\n  widRmp = 1.2;\n  r = length (p.xz);\n  a = (r > 0.) ? atan (p.z, - p.x) / (2. * pi) + 0.5 : 0.;\n  q = p;\n  q.y = mod (q.y + (0.5 - 2. * a) * vGap, vGap) - 0.5 * vGap;\n  d = PrBox2Df (vec2 (r - radRmp, q.y), vec2 (widRmp, 0.1));\n  DMIN (idRmp);\n  d = max (PrBox2Df (vec2 (r - 0.5 * radRmp, q.y + 0.2), vec2 (0.1, 0.5)),\n     - PrBox2Df (vec2 (abs (mod (7. * a, 1.) - 0.5), q.y + 0.2), vec2 (0.3, 0.2)));\n  DMIN (idWalI);\n  d = PrBox2Df (vec2 (abs (r - radRmp) - widRmp, q.y - 0.2), vec2 (0.07, 0.3));\n  DMIN (idWalM);\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (7. * a + 0.5) / 7. - 0.5));\n  q.x += 0.5 * radRmp;\n  d = length (q.xz) - 0.2;\n  DMIN (idCol);\n  q.x += 0.25 * radRmp + 0.5 * widRmp;\n  s = -0.03 * q.x;\n  q.y = mod (q.y + 0.15 + (0.5 - 2. * a) * vGap, vGap) - 0.5 * vGap - s;\n  d = PrBoxDf (q, vec3 (0.25 * radRmp + 0.5 * widRmp, 0.15 - s, 0.1));\n  DMIN (idBm);\n  q = p;\n  d = max (abs (length (q.xz) - radExt - 0.2) - 0.2,\n     - PrBox2Df (mod (vec2 (21. * (0.5 + a), 0.125 * q.y) + 0.5, 1.) - 0.5, vec2 (0.2, 0.3)));\n  DMIN (idWalO);\n  aRot = atan (vGap / (2. * pi * radRmp));\n  for (float k = float (VAR_ZERO); k <= 1.; k ++) {\n    s = sign (1. - 2. * k);\n    q = p;\n    a = s * spdVel * tCur / (2. * pi * radRmp);\n    q.xz = Rot2D (q.xz, a);\n    ai = 2. * pi * floor (nSpd * ((r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.) + 0.5) / nSpd;\n    q.xz = Rot2D (q.xz, ai);\n    q.y = mod (q.y + 0.2 + k * vGap + (1. - (ai + a) / pi) * vGap, 2. * vGap) - vGap;\n    q.yz = Rot2D (q.yz, aRot);\n    q.x += radRmp;\n    q.xz *= s;\n    if (PrCylDf (q.xzy, 1., 0.7) < dMin) dMin = SpdDf (q, dMin, int (10. * k));\n  }\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.002, -0.002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dstLim)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += clamp (2. * h, 0.05, 0.3);\n    if (sh < 0.05 || d > dstLim) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 SpdCol ()\n{\n  vec3 col, c[2];\n  vec2 cc;\n  cc = vec2 (1., 0.2);\n  if (idObj >= idBdy + 10) {\n    idObj -= 10;\n    c[0] = cc.xxy;\n    c[1] = cc.xyy;\n  } else {\n    c[0] = cc.yyx;\n    c[1] = cc.yxy;\n  }\n  if (idObj == idBdy) {\n    col = mix (c[0], c[1], SmoothBump (0.2, 0.7, 0.05, mod (4. * qHit.z, 1.)));\n  } else if (idObj == idHead) {\n    col = c[1];\n    if (qHit.z > 0.4) col *= 0.2 + 0.8 * smoothstep (0.02, 0.04, abs (qHit.x));\n  } else if (idObj == idEye) {\n    col = cc.xxx;\n  } else if (idObj == idLegU || idObj == idLegD) {\n    col = mix (c[1], c[0],  SmoothBump (0.4, 1., 0.2, fract (3.5 * length (qHit))));\n  } else if (idObj == idAnt) {\n    col = cc.xyx;\n  }\n  return col;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 16. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ShStagGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.25 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, rg;\n  float dstObj, vDotL, sh, atten, a, s, sa, saa;\n  bgCol = StarPat (rd, 12.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    a = atan (ro.z, - ro.x) / (2. * pi);\n    vn = ObjNf (ro);\n    if (idObj == idRmp) {\n      col4 = vec4 (0.4, 0.4, 0.45, 0.1) * (0.7 + 0.3 * Fbm2 (64. * ro.xz));\n    } else if (idObj == idWalI) {\n      col4 = vec4 (0.7, 0.7, 0.2, 0.2);\n    } else if (idObj == idCol) {\n      col4 = vec4 (0.7, 0.7, 0.2, 0.2) * (0.7 + 0.3 * smoothstep (0.05, 0.1, mod (4. * ro.y, 1.)));\n    } else if (idObj == idWalM) {\n      col4 = (vn.y < 0.9) ? vec4 (0.8, 0.75, 0.75, 0.1) : vec4 (0.7, 0.7, 0.2, 0.2);\n      col4.rgb *= (0.7 + 0.3 * smoothstep (0.05, 0.1, 0.5 * (1. + sin (256. * pi * a))));\n    } else if (idObj == idBm) {\n      col4 = vec4 (0.8, 0.75, 0.75, 0.);\n    } else if (idObj == idWalO) {\n      col4 = vec4 (0.7, 0.7, 0.6, 0.) * (0.7 + 0.3 * step (length (ro.xz), radExt + 0.01)); \n      s = mod (21. * (0.5 + a) + 0.5, 1.) - 0.5;\n      if (abs (s) < 0.08) {\n        sa = mod (1.5 * ro.y + 0.5, 1.) - 0.5;\n        saa = smoothstep (0., 0.1, abs (sa));\n        col4 *= 0.8 + 0.2 * saa;\n        vn.y = -0.3 * (1. - saa) * sign (sa);\n        vn.xz *= sqrt (1. - vn.y * vn.y);\n        vn.xz = Rot2D (vn.xz, asin (pi * clamp (4. * s, -0.5, 0.5)));\n      } else {\n        rg = ShStagGrid (3. * vec2 (42. * a, ro.y));\n        col4 *= rg.y;\n        rg.xz *= sign ((abs (vn.x) > 0.5) ? vn.x : vn.z);\n        if (abs (vn.x) > 0.5) {\n          if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n          else vn.xz = Rot2D (vn.xz, rg.x);\n        } else {\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n        }\n      }\n    } else {\n      col4 = vec4 (SpdCol (), 0.3);\n    } \n    vDotL = max (dot (vn, ltDir), 0.);\n    if (idObj >= idBdy) vDotL *= vDotL;\n    atten = min (1., 1.2 / (1. + 0.2 * dstObj * dstObj / (radExt * radExt)));\n    sh = 1.;\n    if (idObj != idWalO) sh = ObjSShadow (ro, ltDir, dstObj);\n    if (col4.a >= 0.) col = atten * (col4.rgb * (0.2 + 0.8 * sh * vDotL) +\n       step (0.95, sh) * col4.a * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.));\n    else col = atten * col4.rgb;\n    col = mix (col, bgCol, smoothstep (0.8, 1., abs (ro.y) / (2. * radExt)));\n  } else {\n    col = bgCol;\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid SpdSetup (float gDisp)\n{\n  vec3 v;\n  float a, az, fz, d, ll;\n  nSpd = float (N_SPD);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    a = 0.2 * (1. + float (j)) * pi;\n    hipPos[j] = 0.5 * vec3 (- sin (a), 0., 1.5 * cos (a));\n    hipPos[j + 4] = hipPos[j];\n    hipPos[j + 4].x *= -1.;\n  }\n  bdyHt = 1.5;\n  legLenU = 2.2;\n  legLenD = 3.;\n  ll = legLenD * legLenD - legLenU * legLenU;\n  for (int j = VAR_ZERO; j < 8; j ++) {\n    fz = fract ((gDisp + 0.93 + ((j < 4) ? -1. : 1.) + mod (7. - float (j), 4.)) / 3.);\n    az = smoothstep (0.7, 1., fz);\n    footPos[j] = 5. * hipPos[j];\n    footPos[j].x *= 1.7;\n    footPos[j].y += 0.7 * sin (pi * clamp (1.4 * az - 0.4, 0., 1.));\n    footPos[j].z += ((j < 3) ? 0.5 : 1.) - 3. * (fz - az);\n    hipPos[j] += vec3 (0., bdyHt - 0.3, 0.2);\n    v = footPos[j] - hipPos[j];\n    d = length (v);\n    a = asin ((hipPos[j].y - footPos[j].y) / d);\n    kneePos[j].y = footPos[j].y + legLenD *\n       sin (acos ((d * d + ll) / (2. * d *  legLenD)) + a);\n    kneePos[j].xz = hipPos[j].xz + legLenU * sin (acos ((d * d - ll) /\n       (2. * d *  legLenU)) + 0.5 * pi - a) * normalize (v.xz);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, ut, mSize, mMid, msw;\n  float el, az, zmFac, asp, sr, regId;\n  int vuMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./6.) * vec2 (asp, 1.);\n  mMid = vec2 (asp * (1. - mSize.y), - 1. + mSize.y);\n  ut = abs (uv - mMid) - mSize;\n  vuMode = 0;\n  if (max (ut.x, ut.y) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    vuMode = 1;\n  }\n  az = 0.05 * pi * (floor (0.2 * tCur) + smoothstep (0.9, 1., mod (0.2 * tCur, 1.)));\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    regId = 0.;\n    msw = (mPtr.xy * vec2 (asp, 1.) - 0.5 * mMid) / mSize;\n    if (max (abs (msw.x), abs (msw.y)) < 0.5) regId = 1.;\n    else msw = mPtr.xy;\n    if (vuMode == 0) {\n      az += 2. * pi * msw.x;\n      el += pi * msw.y;\n    }\n    if (regId == 1.) vuMode = 1 - vuMode;\n  }\n  if (length (uv * vec2 (1. / asp, 1.)) < 1.5 * SmoothBump (0.25, 0.75, 0.1,\n     mod (0.03 * tCur, 1.))) vuMode = 1 - vuMode;\n  if (vuMode == 0) el = clamp (el, -0.25 * pi, 0.25 * pi);\n  vuMat = StdVuMat (el, az);\n  spdVel = 2.5;\n  SpdSetup (spdVel * tCur);\n  radExt = 15.;\n  radRmp = 6.;\n  vGap = 3.;\n  if (vuMode == 0) {\n    ro = vuMat * vec3 (0., 0., - (radExt - 0.2));\n    zmFac = 2.2;\n  } else if (vuMode == 1) {\n    ro = vec3 (0.);\n    zmFac = 0.5;\n  }\n  dstFar = 4. * radExt;\n  ltDir = vuMat * normalize (vec3 (0.5, 0.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    if (vuMode == 0) rd = normalize (vec3 (uvv, 1.));\n    else rd = normalize (vec3 (sin (uvv.x + vec2 (0., 0.5 * pi)), uvv.y).xzy);\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (vuMode == 1) col = pow (col, vec3 (0.9));\n  if (max (ut.x, ut.y) < 0. && min (abs (ut.x), abs (ut.y)) * canvas.y < 2.) col = vec3 (0.2, 0.5, 0.2);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrEETapCylDf (vec3 p, vec3 v1, vec3 v2, float r, float rf)\n{\n  vec3 v;\n  float s;\n  v = v1 - v2;\n  s = clamp (dot (p, v) / dot (v, v), 0., 1.);\n  return length (p - s * v) - r * (1. - rf * s * s);\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}