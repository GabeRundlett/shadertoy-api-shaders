{
    "Shader": {
        "info": {
            "date": "1695120319",
            "description": "demo for a presentation I gave. Blog post here: https://shahriyarshahrabi.medium.com/painting-with-code-a42263b578cb",
            "flags": 0,
            "hasliked": 0,
            "id": "dtSfzR",
            "likes": 171,
            "name": "Painting with Code Demo",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "painting",
                "sunflowers"
            ],
            "usePreview": 1,
            "username": "ircss",
            "viewed": 7129
        },
        "renderpass": [
            {
                "code": "#define smoothing      0.006\n#define TWO_PI 6.28318530718\n#define lineSize       0.01\n#define skyColor  vec3(101., 164., 208.)/255.\n#define skyButton vec3(178., 208., 232.)/255.\n#define MountainsLayerOneCol vec3(50., 118., 165.)/255.\n#define MountainsLayerTwoCol vec3(46., 94., 130.)/255.\n#define MountainLayerThreecol vec3(26., 65., 74.)/255.\n#define MountainLayerFourCol vec3(14., 49., 55.)/255.\n#define SunflowerInsideOne    vec3(203., 77., 23.)/255.\n#define SunflowerInsideTwo    vec3(134., 71., 48.)/255.\n#define SunflowerInsideThree  vec3(158., 159., 33.)/255.\n#define SunflowerLeavesOne    vec3(247., 214., 0.)/255.\n#define SunflowerHighlight    vec3(247., 218., 63.)/255.\n#define SunflowerLeavesTwo    vec3(236., 168., 3.)/255.\n#define SunflowerStem         vec3(97., 128., 52.)/255.\n#define SunflowerStemBright   vec3(176., 186., 53.)/255.\n#define FieldDark             vec3(44., 62., 40.)/255.\n#define FieldMid              vec3(94., 121., 62.)/255.\n#define Clouddark             vec3(177., 203., 229.)/255.\n#define CloudLight            vec3(250., 251., 253.)/255.\nfloat TriangularWave(float x)\n{\n return abs(fract(x) - 0.5) * 4. - 1.;\n}\n\n\nfloat randOneD(float x){\nreturn fract(sin(x *52.163)*268.2156);}\n\n\nfloat ConcateClouds(float amplitude, float period, float translateX, float translateY, float Seed, float x)\n{\n\n  Seed = randOneD(Seed);\n  float toReturn = 0.;\n  for(int i = 0; i< 6; i++){\n     toReturn += sin( (x + Seed *6. + translateX  + float(i) *(0.125+  Seed *6.)) * period * TWO_PI) *  amplitude;\n     amplitude *= 0.5;\n     period *= 2.;\n  }\n  return toReturn + translateY ;\n}\n\n\nfloat ConcateTriangularWaves(float amplitude, float period, float translateX, float translateY, float Seed, float x)\n{\n\n  Seed = randOneD(Seed);\n  float toReturn = 0.;\n  for(int i = 0; i< 5; i++){\n     toReturn += TriangularWave( (x + Seed *6. + translateX  + float(i) *(0.125+  Seed *6.)) * period) *  amplitude + translateY ;\n     amplitude *= 0.85;\n     period *= 1.25;\n  }\n  return toReturn;\n}\n\nvoid DrawLine(float m, float c, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n\n    vec2  xy   = vec2(uv.x, uv.x * m + c); \n    float d    = distance(xy, uv);\n    sceneColor = mix(lineColor, sceneColor, smoothstep(size, size + smoothing, d));\n    \n}\nvoid DrawHalfVectorWithLength(vec2 origin, vec2 vector, float len, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    float m    = 1. - step(0.,vUv/v2);\n          m   += step(len, vUv/v2);\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.01, d)+ m, 0. ,1.)); \n}\n\nvoid DrawStemLeave(vec2 origin, vec2 vector, float len, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    uv.y += pow(vUv/len, 2.)*4.;\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    float m    = 1. - step(0.,vUv/v2);\n          m   += step(len, vUv/v2);\n          \n          size *= smoothstep(0.5, 0.0, abs(vUv - 0.5)/len) *0.5;\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.01, d)+ m, 0. ,1.)); \n}\n\n\nvoid DrawPetals(vec2 uv, inout vec3 col, float seed, float offset, vec3 petalColor)\n{\n     float leavesSpread = 0.35;\n     vec2  petalSpace = vec2(fract((offset+ uv.x)* 6.28318530718 *leavesSpread), uv.y);\n     float petalSpaceID = floor((uv.x+offset)* 6.28318530718 * leavesSpread);\n     float petalLength = 1.;\n     float petalThickness = smoothstep(-0.01, 1., pow( (1.-(petalSpace.y / petalLength)), 0.85)) *0.9\n                          - smoothstep(0.7,0., petalSpace.y / petalLength);\n     petalSpace.x += sin((petalSpace.y + randOneD(petalSpaceID + seed) * TWO_PI )*4. )*0.3 * smoothstep(0.5, 1., (petalSpace.y / petalLength));                  \n     \n     vec3 drawnLeaves = col;\n     DrawHalfVectorWithLength(vec2(0.5, 0.), vec2(0.,1.), 1., petalSpace, petalThickness,  petalColor, col);\n     \n}\n\n\nvoid DrawSunFlower(vec2 uv, float seed, inout vec3 col, float mask)\n{\n\n    float noisetexture =  pow((texture(iChannel0,uv*0.8)).x ,   2.)*0.1;\n    \n    DrawHalfVectorWithLength(vec2(0.), vec2(0.,-1.), 7., uv, 0.15, SunflowerStem + noisetexture, col);\n    \n    DrawStemLeave(vec2(0.,-2.+ randOneD(seed+5.125) *-2.),\n    normalize(vec2(max(0.2,randOneD(seed+712.125)),(randOneD(seed+81.215) -0.3) * 0.3)), 5., uv, 0.3 +randOneD(seed+12.125) *0.4 , SunflowerStemBright + noisetexture, col);\n    \n        DrawStemLeave(vec2(0.,-3.+ randOneD(seed+61.125) *-2.),\n    normalize(vec2(-1.0 * max(0.2,randOneD(seed+4.25)),(randOneD(seed+73.25) -0.3) * 0.3)), 5., uv, 0.3 + randOneD(seed+0.125) * 0.4, SunflowerStem + noisetexture, col);\n    \n    uv = vec2(atan(uv.y,uv.x), length(uv) * 0.55);\n     vec3 DrawnFlower= col;\n    vec2 fUV = fract(uv* 4.);\n    vec2 iUV = floor(uv* 4.);\n    \n    \n     vec2 disToCenter = abs( fUV - vec2(0.5));\n     \n     DrawPetals(uv, DrawnFlower, 53.126 + seed, +0.4 + randOneD(seed), SunflowerLeavesTwo + noisetexture);\n     DrawPetals(uv, DrawnFlower, 0. + seed, randOneD(seed+7.125)*-0.5, SunflowerLeavesOne + noisetexture);\n\n     \n     DrawnFlower = mix(DrawnFlower, SunflowerInsideOne    + noisetexture *1.4,smoothstep(lineSize, lineSize + smoothing, 0.45 - uv.y));\n     DrawnFlower = mix(DrawnFlower, \n     mix(SunflowerInsideTwo, SunflowerInsideThree, noisetexture*5. * smoothstep(lineSize, lineSize + smoothing, 0.16 - uv.y)),\n     smoothstep(lineSize, lineSize + smoothing, 0.20 - uv.y));\n     DrawnFlower = mix(DrawnFlower, SunflowerInsideThree  + noisetexture,smoothstep(lineSize, lineSize + smoothing, 0.075 - uv.y));\n     \n     col = mix(col, DrawnFlower, mask);\n     \n\n}\n\n\nvoid DrawSunFlowerField(vec2 OG_UV, float seed, vec2 offset, float fieldMask, float totalMovementSpeed, inout vec3 col,float tiling)\n{\n\n     \n     OG_UV += offset;\n     OG_UV.x += iTime *totalMovementSpeed;\n     vec2  flowerRepeatedSpace = vec2(fract(OG_UV.x*tiling), OG_UV.y*tiling);\n     vec2  idFlowerCoord = vec2(floor(OG_UV.x*tiling), seed*21.215);\n     flowerRepeatedSpace -= vec2(0.5) + vec2(0.15,0.5) *(randOneD (dot(idFlowerCoord , vec2(1.126, 26.6))) - 0.5) ;\n     flowerRepeatedSpace *= 4. + 0.2 *(randOneD (dot(idFlowerCoord , vec2(8.136, 5.316))) - 0.5);\n     \n     DrawSunFlower(flowerRepeatedSpace, randOneD (dot(idFlowerCoord , vec2(21.126, 8.3216))), col,fieldMask );\n    \n}\n\nfloat mapLinear(float a, float b, float x){ return (b-x)/(b-a);}\n\n\nvoid DrawMountain(float movementSpeed, vec2 uv, inout vec3 col, float amplitude, float period, float translateY, float funcOffset, float translateX , float Seed\n, vec3 mountainColor){\n    \n    float movement = iTime  * movementSpeed;\n    \n    mountainColor +=(1.-texture(iChannel0,(uv + vec2(movement, 0.))*1.5)).x*0.1;\n    \n    float mountainOne = ConcateTriangularWaves(amplitude, period, translateX + movement , translateY, Seed, uv.x); \n    col = mix(col, mountainColor ,smoothstep(lineSize, lineSize + smoothing, mountainOne +funcOffset - uv.y));\n    \n\n}\n\nvoid DrawCloudLayer(inout vec3 col, float seed, vec2 uv, float tilingCloud, float amplitude, float period, float offsetY, float offsetX ){\n    \n    uv.x += offsetX;\n    \n    float noise = pow((texture(iChannel0,uv*1.1)).x ,   2.)*0.1;\n    \n    seed+=floor(uv.x *tilingCloud);\n    \n    vec2 cloudsCoord = vec2(fract(uv.x*tilingCloud), uv.y);\n    cloudsCoord.x -= 0.5;\n    cloudsCoord.y += -0.8 + (randOneD(floor(uv.x *tilingCloud)) - 0.5)* 0.25;\n    \n    float Contcatedcloud = ConcateClouds(amplitude, period, offsetX*0.1, offsetY, seed, cloudsCoord.x);\n    \n    \n    Contcatedcloud *= smoothstep(0.5, 0.4, abs(cloudsCoord.x));\n    vec3 cloudColor = mix(Clouddark, CloudLight, smoothstep(0.3,0.9, cloudsCoord.y/ Contcatedcloud));\n    cloudColor += noise;\n    col = mix( col, cloudColor, smoothstep(0., smoothing, Contcatedcloud - cloudsCoord.y) \n    * smoothstep(0.0,smoothing*5., cloudsCoord.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5,0.5);\n    \n    uv.x *=iResolution.x/iResolution.y;\n    uv *= 5.;\n   \n    \n\n    \n    vec3 col = mix(skyButton, skyColor, smoothstep(0., 1.5, uv.y)) ;\n    \n \n    \n    col += pow((texture(iChannel0,uv*1.2)).x ,   2.)*0.05;\n\n    \n    \n    \n    \n    float totalMovementSpeed = 0.15;\n    \n    float movement =  iTime  * totalMovementSpeed;\n    \n      DrawCloudLayer(col, 12.21, uv,  0.015, 0.5, 5., +0.0 ,movement * 0.1 );\n     DrawCloudLayer(col, 0.,     uv,  0.015, 0.7, 8.76, -0.05 ,movement * 0.16 );\n     \n     \n    DrawMountain(totalMovementSpeed * 0.2, uv, col, 0.2, 0.12, -0.11, 1.25, 1.216, 1.,MountainsLayerOneCol);\n    DrawMountain(totalMovementSpeed * 0.5, uv, col, 0.16, 0.16, -0.12, 0.85, 0., 2.125, MountainsLayerTwoCol);\n    DrawMountain(totalMovementSpeed * 1., uv, col, 0.5, 0.08, -0.135, 0.4, -0.612, 52.125, MountainLayerThreecol);\n    DrawMountain(totalMovementSpeed * 1., uv, col, 0.5, 0.08, -0.135, 0.4, 0., 2.723, MountainLayerFourCol);\n    \n  \n     \n     \n     float fieldMask = smoothstep(lineSize, lineSize + smoothing*4., 0.1 - uv.y);\n     \n     vec3 fieldBaseColor = col;\n     fieldBaseColor = mix(FieldMid + pow((texture(iChannel0,(uv + vec2(movement * 4.7,0.))*1.2)).x ,   2.)*0.05   ,\n              SunflowerLeavesOne + pow((texture(iChannel0,(uv + vec2(movement*1.,0.))*1.2)).x ,   2.)*0.05\n              , smoothstep(-0.2, 0.0, uv.y));\n     fieldBaseColor = mix(fieldBaseColor,\n     FieldDark + pow((texture(iChannel0,(uv + vec2(movement*6.2,0.))*1.2)).x ,   2.)*0.05\n     , smoothstep(-0.6, -1.4, uv.y));\n     \n    \n     \n     col = mix(col,  fieldBaseColor ,fieldMask);\n     \n     \n     \n     \n\n vec2 OG_UV = fragCoord/iResolution.xy;\n      OG_UV.x *=iResolution.x/iResolution.y;\n    \n      \n      DrawSunFlowerField(OG_UV, 0., vec2(0.51,-0.48),    fieldMask,  totalMovementSpeed, col, 90.);\n      totalMovementSpeed *= 1.1;\n      DrawSunFlowerField(OG_UV, 6.621, vec2(0.51,-0.46), fieldMask,  totalMovementSpeed, col, 50.);\n      totalMovementSpeed *= 1.1;\n      DrawSunFlowerField(OG_UV, 7.23, vec2(0.51,-0.43),  fieldMask,  totalMovementSpeed, col, 29.);\n      totalMovementSpeed *= 1.1;\n      DrawSunFlowerField(OG_UV, 12.6, vec2(0.51,-0.4),   fieldMask,  totalMovementSpeed, col, 22.);\n      totalMovementSpeed *= 1.1;\n      DrawSunFlowerField(OG_UV, -7.21, vec2(0.51,-0.35), fieldMask,  totalMovementSpeed, col, 15.);\n      totalMovementSpeed *= 1.1;\n      DrawSunFlowerField(OG_UV, 2.125, vec2(0.51,-0.3),  fieldMask,  totalMovementSpeed, col, 12.);\n      totalMovementSpeed *= 1.2;\n      DrawSunFlowerField(OG_UV, 1., vec2(1.126,-0.2),    fieldMask,  totalMovementSpeed, col, 8.);\n      totalMovementSpeed *= 1.2;\n      DrawSunFlowerField(OG_UV, 5., vec2(0.,-0.05),      fieldMask,  totalMovementSpeed, col, 4.);\n      totalMovementSpeed *= 1.3;\n      DrawSunFlowerField(OG_UV, 71.612, vec2(0.,0.1),    fieldMask,  totalMovementSpeed, col, 3.);\n     \n    \n     \n     \n    // Output to screen\n    fragColor = vec4(col,1.0); \n    \n    /*\n//--------------------------------------------------    \n// SLIDE Three Domain Repition \n  vec2 uv = fragCoord/iResolution.xy;\n   float y = uv.y;\n    uv -= vec2(0.5,0.5);\n    \n    uv.x *=iResolution.x/iResolution.y;\n    uv *= 5.;\n   \n    \n    \n    \n    vec3 col = vec3( 0.0);\n    \n    vec2 fUV = fract(uv* 4.);\n    vec2 iUV = floor(uv* 4.);\n    \n    \n   vec2 disToCenter = abs( fUV - vec2(0.5));\n    \n  \n    \n    if(max(disToCenter.x, disToCenter.y)> 0.45) col = vec3(0.1);\n    \n\n     \n    col = vec3(fract(uv.x), fract(uv.y), 0. ) ;\n\n\n     \n    // Output to screen\n    fragColor = vec4(col,1.0); */\n    \n    \n//--------------------------------------------------    \n// SLIDE TWO SUPER IMPOSITION WAVES\n /* vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5,0.5);\n    \n    uv.x *=iResolution.x/iResolution.y;\n    uv *= 5.;\n   \n    \n    \n    \n    vec3 col = vec3( 0.0);\n    \n    vec2 fUV = fract(uv* 4.);\n    vec2 iUV = floor(uv* 4.);\n    \n    \n   vec2 disToCenter = abs( fUV - vec2(0.5));\n    \n  \n    \n    if(max(disToCenter.x, disToCenter.y)> 0.45) col = vec3(0.1);\n    \n     \n    float curveOne =  sin((uv.x+ iTime) *0.75 )* 0.7 ;\n    col = mix(vec3(0.1,0.9,0.), col,smoothstep(lineSize, lineSize + smoothing, abs(curveOne + 1.5 - uv.y)));\n     \n    float curveTwo =  sin((uv.x+ iTime) *3.)* 0.25 ;\n    col = mix(vec3(0.9,0.3,0.), col,smoothstep(lineSize, lineSize + smoothing, abs(curveTwo + 0.1 - uv.y)));\n     \n     \n    col = mix(vec3(1.,0.86,0.), col,smoothstep(lineSize, lineSize + smoothing, abs(curveTwo + curveOne -1.5 - uv.y)));\n     \n    // Output to screen\n    fragColor = vec4(col,1.0); */\n    \n//--------------------------------------------------\n/*\n\n// SLIDE ONE\n// DRAWING THE FILLING GRID\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *=iResolution.x/iResolution.y;\n    \n    uv -= vec2(0.8,0.45);\n    \n    uv *= 1.2;\n    vec2 fUV = fract(uv* 16.);\n    vec2 iUV = floor(uv* 16.);\n    \n    vec3 col = vec3( 0.5);\n     col = mix(col, vec3( iUV.xy/16.,0.), (((iUV.x+8.) + (iUV.y + 7.)*16.)< mod(iTime * 60., 296.)) ? 1.: 0.  );\n\n    vec2 disToCenter = abs( fUV - vec2(0.5));\n    \n    if(max(disToCenter.x, disToCenter.y)> 0.45) col = vec3(1.);\n    if(iUV.x >= 9. || iUV.y >= 9. || iUV.x <= -8. || iUV.y <= -8.) col = vec3(0.);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}