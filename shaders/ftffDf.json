{
    "Shader": {
        "info": {
            "date": "1651548638",
            "description": "based on Diana from a-soul",
            "flags": 0,
            "hasliked": 0,
            "id": "ftffDf",
            "likes": 2,
            "name": "会不会秃头啊",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 1,
            "username": "shimakz",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "#define TMIN 0.1\n#define TMAX 100.\n#define RAYMARCH_TIME 128\n#define PRESICION .001\n#define PI 3.14159265\nvec2 fixUV(in vec2 c){\n    return .7*((2.*c-iResolution.xy)/min(iResolution.y,iResolution.y)+vec2(0.,.6));\n}\nfloat sdfSphere(in vec3 p,in float r){\n    return length(p)-r;\n}\n\nfloat sin_noise( in vec2 x ) { return sin(x.x+sin(x.y)); }\nfloat fbm( vec2 p ){\n    const mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n    float f = 0.0;\n    f += 0.5000*sin_noise( p ); p = m2*p*2.02;\n    f += 0.2500*sin_noise( p ); p = m2*p*2.03;\n    f += 0.1250*sin_noise( p ); p = m2*p*2.01;\n    f += 0.0625*sin_noise( p );\n    return f;\n}\nfloat sdBox( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdParabola( in vec2 pos, in float wi, in float he ){\n    pos.x = abs(pos.x);\n    float ik = wi*wi/he;\n    float p = ik*(he-pos.y-0.5*ik)/3.0;\n    float q = pos.x*ik*ik*0.25;\n    float h = q*q - p*p*p;\n    float r = sqrt(abs(h));\n    float x = (h>0.0) ? \n        pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :\n        2.0*cos(atan(r/q)/3.0)*sqrt(p);\n    x = min(x,wi);\n    return length(pos-vec2(x,he-x*x/ik)) * \n           sign(ik*(pos.y-he)+pos.x*pos.x);\n}\nfloat sdArc( in vec2 p, in vec2 scb, in float ra ){\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k );\n}\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat sdfrec(in vec3 p,vec3 b){\n    vec3 d=abs(p)-b;\n    return length(max(d,0.))+min(max(d.z,max(d.x,d.y)),0.);\n}\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\nvec2 opU(vec2 a,vec2 b){\n    return a.x<b.x?a:b;\n}\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t ){\n  // sampling independent computations (only depend on shape)\n  float w = sqrt(r*r-h*h);\n  \n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n}\nfloat sdbEllipsoidV2( in vec3 p, in vec3 r ){\n    float k1 = length(p/r);\n    float k2 = length(p/(r*r));\n    return k1*(k1-1.0)/k2;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ){\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\nfloat smin( float a, float b, float k ){\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\nfloat smax( float a, float b, float k ){\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return max( a, b ) + h*h*h*k*(1.0/6.0);\n}\nvec2 opUS(vec2 a,vec2 b){\n    return vec2(smin(a.x,b.x,0.09),a.x<b.x?a.y:b.y);\n}\nvec2 opUS2(vec2 a,vec2 b){\n    return vec2(smin(a.x,b.x,0.16),a.x<b.x?a.y:b.y);\n}\n\nvec2 opMS(in vec2 a,in vec2 b){\n    return vec2(smax(a.x,b.x,0.1),a.x>b.x?a.y:b.y);\n}\nvec2 opM(in vec2 a,in vec2 b){\n    return a.x>b.x?a:b;\n}\nvec2 opMS2(in vec2 a,in vec2 b){\n    return vec2(smax(a.x,b.x,0.03),a.x>b.x?a.y:b.y);\n}\nvec2 opMS3(in vec2 a,in vec2 b){\n    return vec2(smax(a.x,b.x,0.15),a.x>b.x?a.y:b.y);\n}\nmat3 rotate_yz(float theta){\n    return mat3(vec3(1.,0.,0.),vec3(0.,cos(theta),sin(theta)),vec3(0.,-sin(theta),cos(theta)));\n}\nmat3 rotate_xz(float theta){\n    return mat3(vec3(cos(theta),0.,-sin(theta)),vec3(0.,1.,0.),vec3(sin(theta),0.,cos(theta)));\n}\nmat3 rotate_xy(float theta){\n    return mat3(vec3(cos(theta),sin(theta),0.),vec3(-sin(theta),cos(theta),0.),vec3(0.,0.,1.));\n}\nmat2 rot2(float theta){\n    float s=sin(theta),c=cos(theta);\n\n    return mat2(c,-s,s,c);\n}\n\nvec2 sdSegment(vec3 p, vec3 a, vec3 b){\n    vec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\nfloat sdTriPrism( vec3 p, vec2 h ,float theta){\n  vec3 q = abs(p);\n  float d=max(q.z-h.y,max(q.x*cos(theta)+p.y*sin(theta),-p.y)-h.x*sin(PI/4.));\n  return d;\n}\n// float sdTriPlane(vec3,vec2 h){\n//     vec3 q = abs(p);\n//     return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n// }\nfloat sdCone( vec3 p, vec2 c, float h ,float rad){\n    vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s)-rad;\n}\nvec3 xabs(vec3 p){\n    return vec3(sqrt(p.x*p.x+3.0e-3),p.y,p.z);\n}\n// float Bend_Tri(vec3 p,vec2 h){\n//     const float k = -1.2; // or some other amount\n//     float c = cos(k*p.x);\n//     float s = sin(k*p.x);\n//     mat2  m = mat2(c,-s,s,c);\n//     vec3  q = vec3(m*p.xy,p.z);\n//     return sdTriPrism(q,h);\n// }\nfloat Bend_cone(vec3 p,vec2 co,float h,float k,float rad){\n     // or some other amount\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(p.x,m*p.yz);\n    return sdCone(q,co,h,rad);\n}\nfloat Bend_Elli(vec3 p,vec3 r,float k1,float k2){\n    float c = cos(k1*p.x);\n    float s = sin(k1*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 pp=m*p.xy;\n    c = cos(k2*p.x);\n    s = sin(k2*p.x);\n    vec2 pz=m*p.xz;\n    vec3  q = vec3(pp.x,pp.y,pz.y);\n    return sdbEllipsoidV2(q,r);\n}\nfloat Bend_Elli2(vec3 p,vec3 r,float k1,float k2){\n    p.y*=-1.;\n    float c = cos(k1*p.x);\n    float s = sin(k2*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 pp=m*p.xy;\n    c = cos(k2*p.x);\n    s = sin(k2*p.x);\n    m = -mat2(c,-s,s,c);\n    vec2 pz=m*p.xz;\n    vec3  q = vec3(pp.x,pp.y,pz.y);\n    return sdbEllipsoidV2(q,r);\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 ){\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\nfloat Bend_Triangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 ,in float k){\n    \n    float c = cos(k*(p.y-3.67));\n    float s = sin(k*(p.y-3.67));\n    mat2  m = mat2(c,-s,s,c);\n    vec2 q=m*p;\n    return sdTriangle(q,p0,p1,p2);\n}\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus(vec3 p, float la, float lb, float h){\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y), p.y-h);\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\nfloat sdcloth(in vec3 p){\n    const float k = .6; // or some other amount\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 pp=m*p.yz;\n    vec3  q = vec3(p.x,pp);\n    return sdTriPrism(q,vec2(.45,.06),.1*PI);\n}\nfloat sdfrontcloth(in vec3 p){\n    float k=-.2;\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 pp=m*p.yz;\n    vec3  q = vec3(p.x,pp);\n    return sdTriPrism(q,vec2(.5,.04),.15*PI);\n}\nfloat sdshoulder(in vec3 p){\n    vec3 sos = vec3( abs(p.x), p.yz );    \n    vec2 se = sdSegment(sos, vec3(0.18,-1.6,-0.3), vec3(.83,-1.85,0.0) );\n    float d = se.x-mix(0.25,0.43,se.y);\n    // d = smin(d,sdfSphere(sos-vec3(0.3,-2.2,0.4), 0.5 ),0.2);\n    return d;\n}\nfloat ahoge(in vec3 p){\n    float k=-2.5;\n    float c = cos(k*p.z);\n    float s = sin(k*p.z);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 pp=m*p.zy;\n    vec3  q = vec3(p.x,pp.yx);\n    return sdRhombus(q,.08,.4,.0005);\n}\nvec2 shapehead(in vec3 p){\n    vec2 d=vec2(Bend_cone(rotate_yz(-PI/80.)*(vec3(p.x,-p.y,p.z)-vec3(0.,-.93,.67)),vec2(sin(PI/3.5),cos(PI/3.5)),.41,-1.95,.03),2.);//下巴颏 弯曲圆锥\n    // vec2(Bend_Tri(rotate_yz(PI/19.)*(p.xzy-vec3(0.,.58,.1)),vec2(.31,1.31)),2.);\n    // d=opMS(d,vec2(sdbEllipsoidV2(rotate_yz(PI/2.9)*(p-vec3(0.,1.6,0.1)),1.5*vec3(0.0196, 0.0196, 0.0196)),2.));\n    // d=opUS(d,vec2(sdbEllipsoidV2(rotate_yz(-PI/11.)*(p-vec3(0.,1.61,.52)),1.*vec3(0.6,0.1,0.5)),.2));\n    d=opUS(d,vec2(sdfSphere(p-vec3(0.,1.87,-0.1),1.),2.));//大球\n    // opU(d,vec2(sdfrec(p-vec3(1.,1.,0.),vec3(1.,1.,1.)),3.))\n    float ani_time=min(1.,mod(iTime,6.1));\n    ani_time=smoothstep(0.,0.1,ani_time)-smoothstep(0.18,0.4,ani_time);\n    float tt = mod(1.0+iTime,3.0);\n    ani_time = max(ani_time,smoothstep(0.0,0.07,tt)-smoothstep(0.1,0.35,tt));\n    ani_time=1.-ani_time;\n    // ani_time=0.;\n    d=opUS2(d,vec2(sdbEllipsoidV2(rotate_yz(PI/4.1)*(p-vec3(0.,1.63,0.17)),1.49*vec3(0.49,0.58,0.40)),2.));//下巴部分椭圆\n    d=opMS3(d,vec2(-1.*sdbEllipsoidV2(xabs(p)-vec3(.59,1.81,1.02),rotate_xz(PI/6.)*.63*vec3(0.58,0.45+.01*(1.-ani_time),0.9)),2.));\n    d=opMS3(d,vec2(-1.*sdbEllipsoidV2(xabs(p)-vec3(.41,1.76,0.8),.35*vec3(0.5,0.53,0.50)),2.));//眼眶，去掉一个椭圆\n\n    d=opUS2(d,vec2(Bend_cone(rotate_yz(PI/30.)*(vec3(1.2*p.x,p.y,0.98*p.z)-vec3(0.,1.84,.75)),vec2(sin(PI/10.),cos(PI/10.)),.32,.95,.0),2.));//nose\n    d=opUS2(d,vec2(Bend_cone(rotate_yz(PI/9.)*(vec3(p.x,-p.y,p.z)-vec3(0.,-1.47,.86)),vec2(sin(PI/9.),cos(PI/9.)),.09,-.07,.02),2.));\n    d=opUS(d,vec2(Bend_Elli(rotate_xy(PI/20.)*rotate_xz(-PI/9.)*(xabs(p)-vec3(.36,1.98-.05*(1.-ani_time),.78)),.18*vec3(0.9,0.4,0.1),-1.3,-1.3),2.));//上眼皮\n    d=opUS2(d,vec2(Bend_Elli2(rotate_xy(-PI/9.)*rotate_xz(-PI/9.)*(xabs(p)-vec3(.35,1.57+.05*(1.-ani_time),.76)),.18*vec3(0.9,0.3,0.1),-1.4,-1.4),2.));//下眼皮\n    d=opUS2(d,vec2(sdCutHollowSphere(rotate_yz((1.5-.45*(1.-ani_time))*PI)*(xabs(p)-vec3(.28,1.78,.58)),.25,.1,.0001),2.));//1.5,1.05\n    d=opUS2(d,vec2(sdCutHollowSphere(rotate_yz((-.3+.15*(1.-ani_time))*PI)*(xabs(p)-vec3(.28,1.78,.58)),.25,.05,.0001),2.));//-.3 -.15\n    d=opMS2(d,vec2(-1.*sdbEllipsoidV2(xabs(p)-vec3(.0,1.32,.88),.8*vec3(0.13,0.08,0.1)),2.));//嘴巴\n    // d=opUS2(d,vec2(sdbEllipsoidV2(rotate_yz(-.1*PI)*rotate_xz(-.2*PI)*rotate_xy(.05*PI)*(xabs(p)-vec3(.85,1.58,.4)),.3*vec3(.45*(1.+1.2*(p.y-1.)),.9,.1)),2.));\n    return d;\n}\nvec2 map(in vec3 p){\n    vec2 d=vec2(sdfSphere(xabs(p)-vec3(.28,3.78,.58),.25),3.);\n    vec3 q=p;\n    d=opUS(d,vec2(sdCapsule(q,vec3(0.,2.,-0.2),vec3(0.,3.5,-0.2),.35),4.));\n    d=opUS(d,vec2(sdCapsule(xabs(q),vec3(0.2,1.9,-0.2),vec3(0.55,1.88,-0.),.35),4.));\n    d=opU(d,shapehead(p-vec3(0.,2.,0.)));\n    d=opU(d,vec2(sdcloth(rotate_xy(.17*PI)*rotate_xz(-.05*PI)*rotate_yz(-PI/1.9)*(vec3(-abs(q.x),q.yz)-vec3(-.59,2.3,-.1))),5.));\n    d=opUS(d,vec2(sdshoulder(q-vec3(0.,3.7,0.1)),6.));\n    d=opUS(d,vec2(sdfrontcloth(rotate_yz(-.15*PI)*(vec3(q.x,-q.y,q.z)-vec3(-.0,-1.8,.53))),5.));\n    d=opU(d,vec2(ahoge(rotate_xy(-PI/3.3)*rotate_xz(-PI/20.)*rotate_yz(-PI/2.)*(p-vec3(-.18,5.,.3))),7.));\n    // d=opU(d,vec2(sdHoodie(.95*rotate_xz(-PI/15.)*(p-vec3(0.,4.1,0.))),5.));\n    return d;\n}\nvec2 tri( in vec2 x ){\n    vec2 h = fract(x*.5)-.5;\n    return 1.-2.*abs(h);\n}\nfloat checkersGrad( in vec2 uv, in vec2 ddx, in vec2 ddy ){\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;    // filter kernel\n    vec2 i = (tri(uv+0.5*w)-tri(uv-0.5*w))/w;   // analytical integral (box filter)\n    return 0.5 - 0.5*i.x*i.y;                   // xor pattern\n}\n\nvec3 calcNormal( in vec3 p ){\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ).x+ \n                      k.yyx*map( p + k.yyx*h ).x + \n                      k.yxy*map( p + k.yxy*h ).x + \n                      k.xxx*map( p + k.xxx*h ).x );\n}\nvec2 Ray_march(in vec3 ro,in vec3 rd){\n    float t=0.1;\n    vec2 res=vec2(-1.);\n    float tmax=40.;\n    if(rd.y<0.){\n        float tp=-ro.y/rd.y;\n        tmax=min(tmax,-ro.y/rd.y);\n        res=vec2(tp,1.);\n    }\n    for(int i=0;i<RAYMARCH_TIME&&t<tmax;i++){\n        vec3 p=ro+t*rd;\n        vec2 d=map(p);\n        if(d.x<PRESICION){\n            res=vec2(t,d.y);\n            break;\n        }\n        t+=d.x;\n    }\n    return res;\n}\nmat3 setCamera(vec3 ta,vec3 ro,float cr){\n    vec3 z=normalize(ta-ro);\n    vec3 cp=vec3(sin(cr),cos(cr),0.);\n    vec3 x=normalize(cross(z,cp));\n    vec3 y=cross(x,z);\n    return mat3(x,y,z);\n}\nfloat soft_shadow(in vec3 ro, vec3 rd,float k){\n    float res = 1.0;\n    float ph = 1e20;\n    float tmin=.1,tmax=10.;\n    for( float t=tmin; t<tmax; ){\n        float h = map(ro + rd*t).x;\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return clamp(res,0.0,1.0);\n}\nvec3 render(vec2 uv,vec2 px,vec2 py){\n    vec3 ro=vec3(3.*cos(PI/2.1),4.3,3.*sin(PI/2.1));\n    \n    vec3 ta=vec3(0.,3.,0.);\n    mat3 cam=setCamera(ta,ro,0.);\n    float fl=1.;\n    vec3 rd=normalize(cam*vec3(uv,fl)); \n    vec2 t=Ray_march(ro,rd);\n    vec3 bg=vec3(0.4,0.7,1.0)*0.7;\n    \n    vec3 rd2=normalize(cam*vec3(px,fl));\n    vec3 rd3=normalize(cam*vec3(px,fl));\n    vec2 t2=Ray_march(ro,rd2);\n    vec2 t3=Ray_march(ro,rd3);\n    float gra = smoothstep(-0.3,.6,rd.y);                    \n    vec3  sky = vec3(0.4,0.7,1.0);\n    float h = (1000.0-ro.y)/rd.y;\n    if( h>0.0 )\n    {\n        vec2 uv = ro.xz + rd.xz*h;\n        float cl = smoothstep( 0.0, 0.8, fbm( 0.002*uv ) );\n        cl = clamp( floor(cl*3.0)/(3.0-1.0), 0.0, 1.0 );\n        sky = mix( sky, vec3(0.9,0.6,0.3), 0.4*cl*gra );\n    }\n    vec3 col = vec3(.1)+mix( vec3(0.6,0.9,1.0), sky, gra );\n    if(t.y>0.){\n        vec3 p=ro+t.x*rd;\n        vec3 nor = calcNormal(p);\n\t\tvec3 ref = reflect( rd, nor );\n        vec3 n=(t.y<1.1)?vec3(0.,1.,0.):calcNormal(p);\n        vec3 light=normalize(vec3(0.8,0.6,0.3));\n        float dif=clamp(dot(normalize(light),n),0.,1.);\n        p+=PRESICION*n;\n        float st=soft_shadow(p,normalize(light),10.);\n        dif*=st;\n        float amb=0.5+0.5*dot(n,vec3(0.,1.,0.));\n        // vec3 c=vec3(242.,96.,31)/256.;\n        vec3 c=vec3(0.);\n        if(t.y>1.9&&t.y<2.1){\n            c=vec3(239,177.,151.)/256.;\n            c/=1.8;\n            if(p.z>-0.00001){\n                \n                p.y+=.02;\n                float ani_time=min(1.,mod(iTime,6.1));\n                ani_time=smoothstep(0.,0.1,ani_time)-smoothstep(0.18,0.4,ani_time);\n                float tt = mod(1.0+iTime,3.0);\n                ani_time = max(ani_time,smoothstep(0.0,0.07,tt)-smoothstep(0.1,0.35,tt));\n                // ani_time=1.;\n                vec3 cb=vec3(98.,82.,72.)/256./2.9;\n                vec3 ca=vec3(52.,16.,15.)/256./2.5;\n                vec3 q=vec3(p.x,p.y+.1*ani_time,p.z);\n                float lam1=smoothstep(0.009,0.0055,abs(sdParabola(mat2\n                (vec2(cos(PI/18.),sin(PI/18.)),\n                vec2(-sin(PI/18.),cos(PI/18.)))\n                *(vec2(abs(p.x),p.y)-vec2(.38,4.15)),.24,-.02)));\n                c=(1.-lam1)*c+lam1*cb;//眉毛\n                float theta1=(1.-1.2*ani_time)*PI/15.;\n                float lam2=smoothstep(0.033,0.025,abs(sdParabola(mat2\n                (vec2(cos(theta1),sin(theta1)),\n                vec2(-sin(theta1),cos(theta1)))\n                *(vec2(abs(q.x),q.y)-vec2(.39,3.84)),.20,.1-.13*ani_time)));\n                c=(1.-lam2)*c+lam2*ca;//睫毛\n                \n                float lam3=smoothstep(0.021,0.015,Bend_Triangle(vec2(abs(q.x),q.y),\n                vec2(.61,3.8),rot2(ani_time*.2*PI)*(vec2(.41,3.7)-vec2(.61,3.8))+vec2(.61,3.8),vec2(.52,3.88),-0.0));\n                c=(1.-lam3)*c+lam3*ca;//下睫毛\n                \n                float lam4=smoothstep(0.01,0.001,Bend_Triangle(vec2(abs(q.x)-.01,q.y),\n                vec2(.61,3.9),vec2(.52,3.89),rot2(-.2*ani_time*PI)*(vec2(.40,3.94)-vec2(.52,3.89))+vec2(.52,3.89),-0.0));\n                c=(1.-lam4)*c+lam4*ca;//尖睫毛\n                \n                float lam5=smoothstep(0.01,0.001,Bend_Triangle(vec2(abs(q.x)+.06,q.y-.04+.06*ani_time),\n                vec2(.61,3.92),vec2(.52,3.89),rot2(-.2*ani_time*PI)*(vec2(.40,3.91)-vec2(.52,3.89))+vec2(.52,3.89),-0.0));\n                c=(1.-lam5)*c+lam5*ca;//尖睫毛\n                float lam6=smoothstep(0.3,0.,min(length(p.xy-vec2(.4,3.5)),length(p.xy-vec2(-.6,3.5))));\n                c=(1.-lam6)*c+lam6*vec3(251,177,151)/256./2.;//腮红\n                if(abs(p.x+.13)<0.005&&abs(p.y-3.61)<.005)c=vec3(0.);\n            }\n            \n        }else if(t.y>0.9&&t.y<1.1){\n            vec2 grid=floor(p.xz);\n            vec3 rdx=normalize(cam*vec3(px,fl));\n            vec3 rdy=normalize(cam*vec3(py,fl));\n            vec3 ddx=ro.y*(rd/rd.y-rdx/rdx.y);\n            vec3 ddy=ro.y*(rd/rd.y-rdy/rdy.y);\n            c=vec3(.3,.2,.2)+col*checkersGrad(p.xz,ddx.xz,ddy.xz);\n        }else if(t.y>2.9&&t.y<3.1){\n            \n            p.x+=sign(p.x)*.01;\n                p.y+=.02;\n            vec2 cen=vec2(.29,3.83);\n            float prx=p.x-.02;\n            float lam1=smoothstep(0.145,0.135,length(vec2(abs(prx),p.y)-cen));\n            float lam2=smoothstep(0.135,0.129,length(vec2(abs(prx),p.y)-cen));\n            float lam3=smoothstep(0.105,0.100,length(vec2(abs(prx),p.y)-cen));\n            float lam4=smoothstep(0.098,0.075,length(vec2(abs(prx),p.y)-cen));\n            float lam5=smoothstep(0.050,0.045,length(vec2(abs(prx),p.y)-cen));\n            float lam7=smoothstep(0.140,0.190,length(vec2(abs(prx),p.y)-cen));\n            //瞳仁\n            float lam6=smoothstep(0.060,0.045,length(vec2(abs(p.x*0.7),p.y)-vec2(.30*0.75,3.698)));\n            //下高光\n            c=(1.-lam1)*vec3(1.,1.,1.)+lam1*vec3(0.1,0.1,.1)/1.5;\n            c=(1.-lam2)*c+lam2*vec3(0.488,0.758,1.)/1.5;\n            c=(1.-lam3)*c+lam3*vec3(33,83,130)/256./1.5;\n            c=(1.-lam4)*c+lam4*vec3(0.488,0.758,1.)/1.5;\n            c=(1.-lam5)*c+lam5*vec3(33,83,130)/300./1.5;;\n            float lamhr=smoothstep(0.035,0.015,length(vec2(p.x,p.y)-vec2(.24,3.89)));\n            float lamhl=smoothstep(0.035,0.015,length(vec2(p.x,p.y)-vec2(-.395,3.89)));\n            //高光\n            c=c+lamhr*vec3(1.,1.,1.);\n            c=c+lamhl*vec3(1.,1.,1.);\n            c=c+lam6*vec3(1.,1.,1.);\n            c=(1.-lam7*vec3(206.,214.,221.)/256.)*c;\n        }else if(t.y>3.9&&t.y<4.1){\n            c=vec3(239,177.,151.)/256.;\n            c/=1.8;\n        }else if(t.y>4.9&&t.y<5.1){\n            c=vec3(255.,241.,255.)/256.;\n            c/=1.5;\n        }else if(t.y>5.9&&t.y<6.1){\n            c=vec3(228.,143.,147.)/256.;\n            c/=1.5;\n        }else if (t.y>6.9&&t.y<7.1){\n            c=vec3(122.,90.,78.)/256.;\n            c/=1.5;\n        }\n\t\tfloat fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 8.0 );\n        vec3 brdf = vec3(0.0);\n        brdf += 1.5*st;\n\t\tbrdf += 0.75;\n        brdf += 0.7*smoothstep(0.1,0.15,fre*st);\n        col=c*brdf;\n        // col=amb*c+dif*vec3(.7,.5,.44)+.1*(1.-abs(dot(n,rd)))*(1.-abs(dot(n,rd)))*vec3(239,233,198)/256.;\n        \n        if(t.y>1.1)col *= clamp( 1.0 - 10.*max(abs(t.x-t2.x),abs(t.x-t3.x)), 0.0,.95 );\n    }\n    col = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n    return col;\n}\nfloat sdgEllipse( vec2 p, in vec2 ab ){\n    vec2 sp = sign(p); p = abs( p );\n    \n    bool s = dot(p/ab,p/ab)>1.0;\n    float w = atan(p.y*ab.x, p.x*ab.y);\n    if(!s) w=(ab.x*(p.x-ab.x)<ab.y*(p.y-ab.y))? 1.570796327 : 0.0;\n    \n    for( int i=0; i<4; i++ )\n    {\n        vec2 cs = vec2(cos(w),sin(w));\n        vec2 u = ab*vec2( cs.x,cs.y);\n        vec2 v = ab*vec2(-cs.y,cs.x);\n        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));\n    }\n    vec2  q = ab*vec2(cos(w),sin(w));\n\n    float d = length(p-q);\n    return d*(s?1.0:-1.0);\n}\n#define M 4\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec3 col=vec3(0.);\n    vec2 px=(2.*fragCoord-iResolution.xy)/iResolution.y;\n    float len=iResolution.x/iResolution.y;\n    float v=.7,w=5.1;\n    if(iMouse.z>0.01){\n        float mx=length(vec2(len,1.));\n        vec2 uvMouse=(2.*iMouse.xy-iResolution.xy)/iResolution.xy;\n        v=mix(.5,2.,abs(uvMouse.y));\n        w=mix(5.1,7.1,abs(uvMouse.x)/len);\n    }\n    float ani_time=min(1.,mod(v*iTime,w));\n    ani_time=smoothstep(0.,0.1,ani_time)-smoothstep(0.18,0.4,ani_time);\n    float tt = mod(1.0+iTime,3.0);\n    ani_time = max(ani_time,smoothstep(0.0,0.07,tt)-smoothstep(0.1,0.35,tt));\n    for(int m=0;m<M;m++){\n        for(int n=0;n<M;n++){\n            vec2 offset=2.*(vec2(float(m),float(n))/float(M)-0.5);\n            vec2 uv=fixUV(fragCoord+offset);\n            vec2 px=fixUV(fragCoord+vec2(1.,0.)+offset);\n            vec2 py=fixUV(fragCoord+vec2(0.,1.)+offset);\n            col+=render(uv,px,py);\n        }\n    }\n    vec2 uv=fragCoord / iResolution.xy;\n    col *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n    float d=sdgEllipse(px,vec2(len+.2,2.-2.*ani_time));\n    col=col*smoothstep(.5,0.,d);\n    fragColor=vec4(col/16.,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}