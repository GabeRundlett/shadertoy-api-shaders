{
    "Shader": {
        "info": {
            "date": "1500489840",
            "description": "Uses neighboring posterized pixels to use the most common color in the kernel. This has a de-noising effect on the posterized output. My intended purpose was to remove antialiasing from a posterized image.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsjBWW",
            "likes": 2,
            "name": "Posterize w/noise cleanup",
            "published": 3,
            "tags": [
                "noise",
                "posterize",
                "cleanup"
            ],
            "usePreview": 1,
            "username": "cacheflowe",
            "viewed": 953
        },
        "renderpass": [
            {
                "code": "#define stepH 1.\n#define stepV 1.\n\nfloat rgbToGray(vec4 rgba) {\n\tconst vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    return dot(rgba.xyz, W);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float posterSteps = 8.;\n    \n    // current location & color\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 curColor = texture(iChannel0, uv);\n    \n  \t// get samples around pixel\n\tfloat colors[9];\n    float stepX = stepH/iResolution.x;\n    float stepY = stepV/iResolution.y;\n    colors[0] = rgbToGray(texture(iChannel0, uv + vec2(-stepX, stepY)));\n\tcolors[1] = rgbToGray(texture(iChannel0, uv + vec2(0, stepY)));\n\tcolors[2] = rgbToGray(texture(iChannel0, uv + vec2(stepX, stepY)));\n\tcolors[3] = rgbToGray(texture(iChannel0, uv + vec2(-stepX, 0)));\n\tcolors[4] = rgbToGray(texture(iChannel0, uv));\n\tcolors[5] = rgbToGray(texture(iChannel0, uv + vec2(stepX, 0)));\n\tcolors[6] = rgbToGray(texture(iChannel0, uv + vec2(-stepX, -stepY)));\n\tcolors[7] = rgbToGray(texture(iChannel0, uv + vec2(0, -stepY)));\n\tcolors[8] = rgbToGray(texture(iChannel0, uv + vec2(stepX, -stepY)));\n    \n    // apply color steps to original color\n    for(int i=0; i < 9; i++) {\n    \tcolors[i] = floor(colors[i] * posterSteps) / posterSteps;\n    }\n    \n    // count up colors in totals count array\n\tint colorsCount[9];\n    for(int i=0; i < 9; i++) {\n        colorsCount[i] = 0;\n        for(int j=0; j < 9; j++) {\n            if(colors[i] == colors[j]) colorsCount[i] += 1;\n        }\n    }\n    \n    // find most common color in kernel\n    int maxColors = 0;\n    int maxIndex = 0;\n    for(int i=0; i < 9; i++) {\n        if(colorsCount[i] > maxColors) {\n            maxColors = colorsCount[i];\n        \tmaxIndex = i;\n        }\n    }\n            \n    // draw most common color in kernel (or original)\n    if(mod(iTime, 1.) > 0.5) {\n    \tfragColor = vec4(vec3(colors[4]), 1.0);\n    } else {\n    \tfragColor = vec4(vec3(colors[maxIndex]), 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}