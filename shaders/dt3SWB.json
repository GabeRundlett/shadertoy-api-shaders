{
    "Shader": {
        "info": {
            "date": "1685759953",
            "description": "experiment with hsv/rgb and palette functions from Inigo Quilez's website. \nhttps://iquilezles.org/articles/palettes/\ninspiration from this video:\nhttps://www.youtube.com/watch?v=f4s1h2YETNY",
            "flags": 2,
            "hasliked": 0,
            "id": "dt3SWB",
            "likes": 4,
            "name": "palette experiment",
            "published": 3,
            "tags": [
                "effect",
                "hsv",
                "experimental",
                "palettes"
            ],
            "usePreview": 0,
            "username": "playersteve19",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "//all credit for the following three functions goes to Inigo Quilez\n//massive thanks for all your work in the shader community! \n//the application of his functions is my own mess of a code and my own idea\n//As far as I can tell nobody's done something like this before, but I haven't checked.\nvec3 rgb2hsv( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                 d / (q.x + e),\n                q.x);\n}\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n//helpful site for previewing: http://dev.thi.ng/gradients/\n#define palettea vec3(0.409,0.614,0.575)\n#define paletteb vec3(0.833,0.696,0.478)\n#define palettec vec3(0.249,1.388,0.884)\n#define paletted vec3(4.608,3.265,1.026)\n/*feel free to drop some cool combos you've found in the shader comments!*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy)/iResolution.xy;\n    vec2 mous = iMouse.xy/iResolution.xy;\n    vec3 col;\n    col=texture(iChannel0,uv).rgb;\n    //col=vec3(uv,fract(iTime/10.));//disable d offset and uncomment this line to debug\n    /*alternatively, set iChannel0 to one of the rgb noise textures.*/ \n    vec3 hsv=rgb2hsv(col);\n    vec3 c=palettec;\n    vec3 d=paletted;\n    //d+=iTime/21.;//phase offset over time. \n    vec3 pal=palette(hsv.x,palettea,paletteb,c,d);//maps palette to hue\n    col=pal;//replace inputted hue with palette  \n    col=mix(col,mix(vec3(1.),col,hsv.y),mous.x);//saturation mask by mouse x amount\n    col*=mix(1.,hsv.z,mous.y);//brightness mask by mouse y amount\n    //I usually like the top left corner and right middle. Bottom left corner is the most extreme. \n    //col=vec3(uv,fract(iTime/10.));//show uv\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}