{
    "Shader": {
        "info": {
            "date": "1714927481",
            "description": "I stumbled upon an image of the the coffer illusion and wanted to make my own version as a shader. Try to find the 16 circles.",
            "flags": 0,
            "hasliked": 0,
            "id": "XfGSRm",
            "likes": 2,
            "name": "Coffer Illusion",
            "published": 3,
            "tags": [
                "circles",
                "lines",
                "illusion",
                "coffer"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2024 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nI came across an image of the Coffer Illusion and found it neat. \nSo, I decided to create a shader version of it. \n\nSee if you can spot the 16 circles.\n*/\n\n// This function generates a bone colormap using a 6th degree polynomial\nvec3 generateBoneColormap(float t) {\n    const vec3 c0 = vec3(-0.005007,-0.003054,0.004092);\n    const vec3 c1 = vec3(1.098251,0.964561,0.971829);\n    const vec3 c2 = vec3(-2.688698,-0.537516,2.444353);\n    const vec3 c3 = vec3(12.667310,-0.657473,-8.158684);\n    const vec3 c4 = vec3(-27.183124,8.398806,10.182004);\n    const vec3 c5 = vec3(26.505377,-12.576925,-5.329155);\n    const vec3 c6 = vec3(-9.395265,5.416416,0.883918);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// This is a modified version of Dave_Hoskins' hash function: https://www.shadertoy.com/view/XdGfRR\n#define FPRIME 1317666547U\n#define VPRIME uvec2(3480082861U, 2420690917U)\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\nfloat hash11(float p) {\n\tuvec2 q = uvec2(int(p)) * VPRIME;\n\tuint n = (q.x & q.y) * FPRIME;\n\treturn float(n) * SMALLESTFLOAT;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n        \n    // Pixelize the coordinates for chunkier stripes\n    float quantizeFactor = min(iResolution.y, iResolution.x) / 128.;\n    vec2 pixelizedCoords = floor(fragCoord / quantizeFactor) * quantizeFactor;\n\n    // Calculate centered UV coordinates\n    vec2 uv = (pixelizedCoords - iResolution.xy * 0.5) / min(iResolution.y, iResolution.x);\n\n    // Calculate a circle grid mask\n    float numRows = 4.;\n    float circleDiameter = 0.35;\n    vec2 cellCoords = fract(clamp(uv * numRows, numRows*-0.5, numRows*0.5)) - 0.5;\n    float circleMask = length(cellCoords); \n\n    // Calculate the stripes\n    float seed = 691.;\n    float noiseValue = hash11((circleMask < circleDiameter ? pixelizedCoords.x : \n                                                             pixelizedCoords.y + iResolution.x)\n                              + seed);\n\n    // Apply a subtle cosmetic colormap for beautification\n    vec3 color = generateBoneColormap(noiseValue);   \n    \n    // Output to screen\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}