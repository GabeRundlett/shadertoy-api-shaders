{
    "Shader": {
        "info": {
            "date": "1544964496",
            "description": "Working on a little experiment this came out. It reminds me of the current in a river.",
            "flags": 32,
            "hasliked": 0,
            "id": "Wsf3RH",
            "likes": 18,
            "name": "Current",
            "published": 3,
            "tags": [
                "3d",
                "simple",
                "raymarch",
                "experiment",
                "sin",
                "minimalist",
                "current"
            ],
            "usePreview": 0,
            "username": "josemorval",
            "viewed": 711
        },
        "renderpass": [
            {
                "code": "float time;\n\nvec2 scene(vec3 p){\n\t\n    vec2 pt = p.xz;\n    pt.x*=iResolution.y/iResolution.x;\n    pt*=0.05;\n    pt+=0.5;\n    vec4 h = texture(iChannel0,pt);\n    h*=smoothstep(0.5,0.4,abs(pt.x-0.5));\n    h*=smoothstep(0.5,0.4,abs(pt.y-0.5));\n    \n    vec2 res = vec2(p.y-h.x,1.);  \n    \n    return res;\n}\n\n//Ray to the world\nvec2 raycast(vec3 p,vec3 d){\t\n    vec2 res = vec2(0.,-1.);\n    float tmin = 0.1;\n    float tmax = 1000.;\n    res.x = tmin;\n    for(int i=0;i<128;i++){\n    \tvec2 f = scene(p+res.x*d);\n        if(f.x<0.001*res.x ){\n            res.y = f.y;\n        \tbreak;   \n        }\n        res.x += f.x;\n    }   \n    \n    return res;   \n}\n\nvec3 normal(vec3 p) \n{\n    const float eps = 0.01;\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(scene(p+h.xyy).x - scene(p-h.xyy).x,\n                           scene(p+h.yxy).x - scene(p-h.yxy).x,\n                           scene(p+h.yyx).x - scene(p-h.yyx).x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = 2.*iTime;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv-0.5;\n    p.x*=iResolution.x/iResolution.y;\n\tvec3 col = vec3(0.);\n    \n    //Camera\n    //---------//\n   \tvec3 po = vec3(20.,15.,30.);\n    vec3 ta = vec3(0.,0.,0.);\n    \n    vec3 di = normalize(ta-po);\n    vec3 up = vec3(0.,1.,0.);\n    vec3 ri = -cross(di,up);\n    up = -cross(ri,di);\n    \n    float fov = 3.;\n    di = normalize(p.x*ri+p.y*up+fov*di);\n\tpo += p.x*ri+p.y*up;\n    //---------//\n    \n    //Throw a ray to the world (direction depends on the pixel of the camera)\n    vec2 res = raycast(po,di);\n \n    if(res.y>0.){\n        vec3 lightdir = vec3(cos(time),0.1,sin(time));\n    \tlightdir = normalize(lightdir);    \n        po += di*res.x;\n        vec3 no = normal(po);\n\n        col=mix(vec3(0.3,0.2,0.5),vec3(0.3,0.4,0.5),smoothstep(30.,50.,res.x));\n        col+=2.*vec3(0.6,0.2,0.2)*(1.+2.*no)*clamp(dot(lightdir,no),0.,1.);\n        //Posterize\n        //col=floor(2.*col)/2.;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//This buffer is for another shader\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 p = uv-0.5;\n    p.x *= iResolution.x/iResolution.y;\n\t\n    float f = 3.*exp(-20.*dot(p,p))*(1.-0.1*cos(10.*iTime+2.*sin(23.*p.x-5.*iTime)*sin(12.*p.y+5.*iTime)));\n    f*=smoothstep(0.5,0.3,abs(p.x));\n    f*=smoothstep(0.5,0.3,abs(p.y));\n    vec3 col = vec3(f,0.,0.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}