{
    "Shader": {
        "info": {
            "date": "1562245866",
            "description": "nprism",
            "flags": 0,
            "hasliked": 0,
            "id": "ttXXzN",
            "likes": 3,
            "name": "nPrism",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "\n\nconst float PI = 3.1415926;\n\nfloat nPrism(vec3 p,vec2 h,float n,float s){\n  float np = 2.0*PI/n;\n  float r =  atan(p.x,p.y)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  float ln = length(p.xy);\n  vec2 kp = ln*vec2(cos(r),sin(r));\n  vec3 kv = vec3(kp.x-h.x,abs(kp.y)-s*h.x*tan(np*0.5),abs(p.z)-h.y);\n  float d = length(vec2(max(kv.x,0.0),max(kv.y,0.0)));\n  d = length(vec2(max(kv.z,0.0),max(d,0.0)))-min(min(max(-kv.x,0.0),max(-kv.y,0.0)),max(-kv.z,0.0));\n  return d;\n}\nfloat cube(vec3 p,vec3 s){\n  vec3 q =abs(p);\n  return length(max(q-s,0.0));\n}\n\nfloat crsp(vec3 p){\n  float d =1.;\n  return d;\n}\nfloat dist(vec3 p){\n  float d = cube(p,vec3(0.6));\n  float nd = nPrism(p,vec2(0.3,0.7),8.0+4.0*sin(iTime*1.3),0.7+0.3*(sin(iTime)));\n  \n  d = max(d,-nd);\n  if(fract(iTime*0.4)>0.5)d =nd;\n  return d;\n}\nvec3 getnormal(vec3 p){\n  vec2 e = vec2(0.01,0.0);\n  return normalize(vec3(\n  dist(p + e.xyy)-dist(p - e.xyy),\n  dist(p + e.yxy)-dist(p - e.yxy),\n  dist(p + e.yyx)-dist(p - e.yyx)));\n}\nvec3 lighting(vec3 p){\n  vec3 n = getnormal(p);\n  vec3 ld =normalize( vec3(0.5,1,3));\n  float ndl = dot(n,ld);\n  vec3 col = vec3(ndl);\n  return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.yy;\n    vec3 tn = iTime*vec3(0.0,0.0,0.0);\n    float tk = iTime;\n    vec3 ro = vec3(5.*cos(tk),2.0,5.*sin(tk))+tn;\n    vec3 ta = vec3(0.0,0.0,0.0)+tn;\n    vec3 cdir = normalize(ta-ro);\n    vec3 up =vec3(0.,1.,0.);\n    vec3 side = cross(cdir,up);\n    up = cross(side,cdir);\n    float fov = 3.2;\n    vec3 rd = normalize(p.x*side+p.y*up+cdir*fov);\n    float t =0.0001;\n    float d;\n    vec3 ac=vec3(0.0);\n    for(int i =0;i<100;i++){\n      d = dist(ro+rd*t);\n      t += d;\n    }\n\n    vec4 col = vec4(0.,0.,0.,1.);\n    if(d<0.001){\n    col.xyz = lighting(ro+rd*t);\n    }\n    fragColor = col;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}