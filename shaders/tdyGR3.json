{
    "Shader": {
        "info": {
            "date": "1570626414",
            "description": "Droplet-like solitonic waves are solutions to the complex valued sine-Gordon equation. Click mouse to create droplets",
            "flags": 32,
            "hasliked": 0,
            "id": "tdyGR3",
            "likes": 10,
            "name": "Droplets in weightlessness",
            "published": 3,
            "tags": [
                "waves",
                "simulation",
                "particles",
                "physics",
                "droplets",
                "nonlinear",
                "classicalfieldtheory",
                "hydrodynamics"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 555
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 pos )\n{\n    vec4  field = SAMPLR(F1, pos);\n  \n    float A = 2.*PI*length(field.xy); //the complex field module\n   \n    float charge = 50.*(field.x*field.w - field.y*field.z); //charge in this frame of reference\n    float isdroplet = max(A*0.5,0.2) - 0.2;\n    fragColor.xyz = 0.06*vec3(0.1,0.45,0.8)*isdroplet;\n    \n    //normalized position\n    vec2 npos = (pos - size*0.5)/size;\n    npos += 0.05*A*A*vec2(0.02,0.03); //an imitation of refraction;\n    npos *= 1. - 0.1*A*A*vec2(0.02,0.03);\n    //sample the skybox\n    vec3 dir = normalize(2.*(npos.x*vec3(0,0,1) + npos.y*vec3(0,1,0)) + vec3(1,0,0)); \n    fragColor.xyz += texture(iChannel2, dir).xyz;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define size iResolution.xy\n#define SAMPLR(a, pos) texture((a), (pos)/size)\n#define SAMPLRs(a, pos,sz) texture((a), (pos)/sz)\n#define F1 iChannel0\n\n//scales\n#define dt 0.25\n#define dx 0.5\n#define border 0.01\n\n//nonlinearity, the higher, the smaller the minimal size of the droplet will be\n#define K 0.3\n\n#define PI 3.14159265\n\n///DON'T CHANGE THESE CONSTANTS \n//the frequency of the soliton\n#define freq sqrt(K)*0.15\n//the radius of the soliton in pixels\n#define rad 1.5/(sqrt(K)*dx)\n\n//2d positive spinner(droplet/soliton, I call it spinner because the field spins in the complex space) approximate solution, exact solution unknown, probably doesn't exist\nvec4 spinner(vec2 pos, float t, float R)\n{\n    pos /= rad;\n    float r = length(pos);\n    float amplitude = (0.5 - 0.5*tanh(5.*(r - R)));\n    float FREQ = 5.3*freq/sqrt(R); // the frequency of the spinner is inversly proportonal to its radius\n\tfloat u1 = sin(FREQ*t)*amplitude;\n    float u2 = cos(FREQ*t)*amplitude;\n    //time derivative is perpendicular in complex space to the amplitude - aka rotation\n\tfloat du1_dt = FREQ*u2;\n    float du2_dt = -FREQ*u1;\n    return vec4(u1, u2, du1_dt, du2_dt);\n}\n//you can get a negatively charged spinner by flipping the sign of the time derivative, i.e. flipping time backwards\n\n\n//more that 0.3c is unstable with this numerical scheme and approximate solution\n//using the lorentz transformation of a stationary soliton to get a moving one, |speed| < 1\nvec4 moving_spinner(vec2 pos, vec2 speed, float R)\n{\n    float v2 = dot(speed, speed);\n    float ps = dot(pos,speed);\n    //lorentz factor\n    float gamma = sqrt(1./(1.-v2));\n    vec2 pos_new = pos + (gamma - 1.)*ps*speed/(v2+0.0001);\n    float time_new = -gamma*ps;\n    return spinner(pos_new, time_new, R);\n}\n\nvec4 Laplacian(sampler2D F, vec2 pos, vec2 sz)\n{\n    vec4 a = SAMPLRs(F, pos,sz);\n\tvec4 x0 = SAMPLRs(F, pos + vec2(-1,0),sz);\n    vec4 x1 = SAMPLRs(F, pos + vec2(1,0),sz);\n    vec4 y0 = SAMPLRs(F, pos + vec2(0,1),sz);\n    vec4 y1 = SAMPLRs(F, pos + vec2(0,-1),sz);\n \n\treturn (x0+x1+y0+y1-4.f*a)/(dx*dx);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        field += 0.2*spinner(pos-iMouse.xy, 0., 1.2);\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( Laplacian(F1, pos,size).xy - K*field.xy*sin(2.*PI*length(field.xy))/(length(field.xy)+0.001) );\n    //field value\n    field.xy += dt*field.zw;\n    \n    //initial conditions\n    if(iFrame <1) {\n    \tfield = moving_spinner(pos - vec2(0.35,0.5)*size, vec2(0.2, -0.02), 4.)\n        \t  + moving_spinner(pos - vec2(0.65,0.5)*size, vec2(-0.2, 0.01), 5.)\n              + moving_spinner(pos - vec2(0.5,0.8)*size, vec2(0., -0.2), 3.)\n       \t\t  + moving_spinner(pos - vec2(0.1,0.1)*size, vec2(0.2, 0.13), 4.)\n              + moving_spinner(pos - vec2(0.85,0.2)*size, vec2(-0.1, 0.05), 5.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        field += 0.2*spinner(pos-iMouse.xy, 0., 1.2);\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( Laplacian(F1, pos,size).xy - K*field.xy*sin(2.*PI*length(field.xy))/(length(field.xy)+0.001) );\n    //field value\n    field.xy += dt*field.zw;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        field += 0.2*spinner(pos-iMouse.xy, 0., 1.2);\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( Laplacian(F1, pos,size).xy - K*field.xy*sin(2.*PI*length(field.xy))/(length(field.xy)+0.001) );\n    //field value\n    field.xy += dt*field.zw;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 field, in vec2 pos)\n{   \n    field = SAMPLR(F1, pos);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        field += 0.2*spinner(pos-iMouse.xy, 0., 1.2);\n    \n    ///Verlet integration\n    //time derivatives\n    field.zw += dt*( Laplacian(F1, pos,size).xy - K*field.xy*sin(2.*PI*length(field.xy))/(length(field.xy)+0.001) );\n    //field value\n    field.xy += dt*field.zw;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}