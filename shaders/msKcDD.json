{
    "Shader": {
        "info": {
            "date": "1696176350",
            "description": "far-eye autostereogram image create by using raymarching technique.\nInspired by this video [url]https://www.youtube.com/watch?v=-okxLz1UauA[/url]\nclick to view old version.",
            "flags": 32,
            "hasliked": 0,
            "id": "msKcDD",
            "likes": 2,
            "name": "autostereogram",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "illusion",
                "autostereogram"
            ],
            "usePreview": 0,
            "username": "silica163",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    m*=.1;\n    \n    vec3 ca = vec3(PI/2.+m.y*PI/2.,PI/2.+m.x*PI/1.,0);\n\t\n\tmat3 rotX = mat3(\n\t\t1,         0,        0,\n\t\t0, sin(ca.x),cos(ca.x),\n\t\t0,-cos(ca.x),sin(ca.x)\n\t);\n\t\n\tmat3 rotY = mat3(\n\t\t sin(ca.y),0, cos(ca.y),\n\t\t0,         1,         0,\n\t\t-cos(ca.y),0, sin(ca.y)\n\t);\n    \n    vec3 c = vec3(0);\n    vec3 ro = rotY*rotX*vec3(0,0,4);\n    vec3 rd = normalize(rotY*rotX*vec3(uv*2.,0)-ro);\n    vec3 rp = ro+rd;\n    \n    \n    /*vec4 hit = march(ro,rp,rd);\n    c += surfNormal(hit.rgb)*.5+.5;\n    c += texture(iChannel0,(fragCoord - vec2(LR-(1./hit.a)*LR,0))/iResolution.y*10.).r;*/\n    \n    vec2 dispUv = uv + texture(iChannel0,uv).rg/vec2(LR,1.);\n    \n    if(iMouse.z < 0.01){\n        c = texture(iChannel1,dispUv*(iResolution.xy)/LR).rgb;\n    } else {\n        c = texture(iChannel2,uv).rgb;\n    }\n    \n    uv = uv*2.-1. ;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x = abs(uv.x);\n    c += step(length(uv-vec2((LR*1.)/iResolution.y,.7)),20./iResolution.y);\n    \n    fragColor = vec4(c,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//depthmap\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    m*=.1;\n    m = vec2(.2,.1);\n    \n    vec3 ca = vec3(PI/2.+m.y*PI/2.,PI/2.+m.x*PI/1.,0);\n\t\n\tmat3 rotX = mat3(\n\t\t1,         0,        0,\n\t\t0, sin(ca.x),cos(ca.x),\n\t\t0,-cos(ca.x),sin(ca.x)\n\t);\n\t\n\tmat3 rotY = mat3(\n\t\t sin(ca.y),0, cos(ca.y),\n\t\t0,         1,         0,\n\t\t-cos(ca.y),0, sin(ca.y)\n\t);\n    \n    vec3 c = vec3(0);\n    vec3 ro = rotY*rotX*vec3(0,0,5);\n    vec3 rd = normalize(rotY*rotX*vec3(uv*2.5,0)-ro);\n    vec3 rp = ro;\n    \n    vec4 hit = march(ro,rp,rd);\n    c += 2./(hit.a);\n    \n    if(hit.a > 10.)c = vec3(0);\n    \n    fragColor = vec4(c,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAX 5.\n#define MIN 0.007\n#define STEP 64\n#define PI 3.14159265\n#define LR 100.\n\nfloat dist(vec3 p);\n\n\nvec3 surfNormal(vec3 p){\n    vec2 t = vec2(MIN,0);\n\tfloat d = dist(p);\n\t\n\treturn normalize(d - vec3(\n\t\tdist(p-t.xyy),\n\t\tdist(p-t.yxy),\n\t\tdist(p-t.yyx)\n\t));\n}\n\nfloat cubeSDF(vec3 p,vec3 pos,vec3 size){\n    vec3 c = abs(p-pos)-size;\n    return length(max(c,0.)) + min(0.,max(c.x,max(c.y,c.z)));\n}\n\nfloat dist(vec3 p){\n    float d = MAX;\n    d = min(d,length(p-vec3(0,-.3,-1))-.6);\n    d = min(d,length(p-vec3(.4,-.5,1.7))-.2);\n    d = min(d,cubeSDF(p,vec3(0,-.7,0),vec3(1.1,.05,2)));\n    d = min(d,cubeSDF(p,vec3(-.7,-.1,1.5),vec3(.1,.7,.4)));\n    d = min(d,cubeSDF(p,vec3(.5,-.5,.5),vec3(.3,.2,.05)));\n    d = min(d,cubeSDF(p,vec3(-.6,-.5,-.5),vec3(.5,.3,.5)));\n    return d;\n}\n\nvec4 march(vec3 ro,vec3 rp, vec3 rd){\n    float travel = length(rp-ro);\n    for(int i = 0;i<STEP;i++){\n        rp = ro + travel*rd;\n        float d = dist(rp);\n        travel += d;\n        if(d <= MIN)break;\n        if(d >= MAX){\n            break;\n        }\n    }\n    return vec4(rp,travel);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c = vec3(0);\n    \n    float depthmap = texture(iChannel0,uv).x*2.;\n    c = texture(iChannel1,uv - vec2((LR/iResolution.x) - depthmap/LR,0.)).rgb;\n    if(fragCoord.x < LR) c = texture(iChannel2,((fragCoord-LR)/iResolution.xy)*iResolution.y*.01).rgb;\n    \n    fragColor = vec4(c,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c = vec3(0);\n    float depthmap = texture(iChannel0,uv).x;\n    c = vec3(depthmap,0,0)*2.;\n    c += texture(iChannel1,uv - vec2(LR/iResolution.x - c.x/LR,0.)).rgb;\n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}