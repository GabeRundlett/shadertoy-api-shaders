{
    "Shader": {
        "info": {
            "date": "1602086176",
            "description": "Left: multiplicative noise.   Right: additive noise without 1/2^i scaling.\nCould get ~= look, but multiplicative ~guaranties > 0 and average=1\n\nAbout multiplicative noise: [url]/view/Xs23D3[/url]  , [url]/view/XssBWj[/url] , [url]/view/Ms2GDc[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wdyyRR",
            "likes": 4,
            "name": "multiplicative vs additive noise",
            "published": 3,
            "tags": [
                "procedural",
                "noise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "\n#define hash(p)  fract(sin(dot(p, vec3(12.9898, 78.233, 311.7))) * 43758.5453) // https://www.shadertoy.com/view/llySRh\n#define hash3(p) fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)\n\n//#define T(d)   texture(iChannel0, (i+d+.5)/32. ).x       // noise texture\n//#define T(d)   hash(i+d)                                 // value noise\n  #define T(d) ( .5+ .7*dot( d-F ,  2.*hash3(i+d)-1. ) )   // gradient noise\n\nfloat noise(vec3 x) {  \n    vec3 i = floor(x), \n         F = fract(x), e = vec3(1,0,0),\n         f = smoothstep(0.,1.,F );\n    vec4 T = mix ( vec4(T(e.zzz),T(e.zxz), T(e.zzx), T(e.zxx) ),\n                   vec4(T(e.xzz),T(e.xxz), T(e.xzx), T(e.xxx) ),\n                   f.x );\n    vec2 v = mix( T.xz, T.yw, f.y);\n    return mix(v.x,v.y,f.z);\n        }\n\nfloat add_noise(vec3 x) {  // --- regular Perlin noise\n    float n = noise(x)/2.;  x *= 2.1; // return n*2.;\n         n += noise(x)/4.;  x *= 1.9;\n         n += noise(x)/8.;  x *= 2.3;\n         n += noise(x)/16.; x *= 1.9;\n         n += noise(x)/32.; x *= 2.1;\n         n += noise(x)/64.;\n    return n; \n}\n\nfloat add_noise0(vec3 x) {  // --- cascade raw sum noise\n    float i=0.,\n         n =  noise(x)-.5; i++; x *= 2.1;  // return n*2.;\n         n += noise(x)-.5; i++; x *= 1.9;\n         n += noise(x)-.5; i++; x *= 2.3;\n         n += noise(x)-.5; i++; x *= 1.9;\n         n += noise(x)-.5; i++; x *= 2.1;\n         n += noise(x)-.5; i++;\n    return n/sqrt(i); \n}\n\nfloat mul_noise(vec3 x) {   // --- multiplicative noise \n    float n = 2.*noise(x);  x *= 2.1;  // return n/2.;\n         n *= 2.*noise(x);  x *= 1.9;\n         n *= 2.*noise(x);  x *= 2.3;\n         n *= 2.*noise(x);  x *= 1.9;\n         n *= 2.*noise(x);  x *= 2.1;\n         n *= 2.*noise(x);\n    return n/2.; \n}\n\n//#define draw(v) clamp(1.5 - R.y/8.* abs( v - 4.*U.y), 0.,1.)\n  #define draw(v) clamp(1.5 - abs( v - 4.*U.y) / fwidth( v ), 0.,1.)\n\n#define map(P) ( U.x < 0. ? mul_noise(P) : .5 + 3.*add_noise0(P) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n\n    vec3 P = vec3( 4.*U-.2*iTime, .5 );                // draw 2D noise\n    O = vec4(  map(P) );       \n // if (abs(O.x-.5)<.1) { O = vec4(0,1,0,0); return; } // check isovalue\n    O *= vec4(1,.7,.5,0);\n    \n    P = vec3( 4.*U.x-.0*iTime, .5, .5 );               // draw curve\n    O.g += draw( map(P) ) + max(0.,1. - R.y/2.*abs(U.y));\n        \n    if ( int(u.x)==int(R/2.) ) O = vec4(1,0,0,0);      // red separator\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}