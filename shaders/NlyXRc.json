{
    "Shader": {
        "info": {
            "date": "1641161713",
            "description": "Wait a second or so, then watch the primary color regions expand and reshape themselves",
            "flags": 32,
            "hasliked": 0,
            "id": "NlyXRc",
            "likes": 3,
            "name": "Primary Color Competition",
            "published": 3,
            "tags": [
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SpinningCube",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = 2.*texture(iChannel0, uv); // Brightened for a cleaner look\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Experiments with Cellular Automata\n\nfloat rv, gv, bv;\n\nvec3 primaryColor(in vec3 c) { // Finds the most dominant color channel or else returns grey if no color channel is dominant\n    \n    float f = 0.25; // grey threshold\n    \n    if (c.r - c.g > f && c.r - c.b > f) {\n        return rv * vec3(c.r, 0., 0.);\n    }\n    if (c.g - c.r > f && c.g - c.b > f) {\n        return gv * vec3(0., c.g, 0.);\n    }\n    if (c.b - c.r > f && c.b - c.g > f) {\n        return bv * vec3(0., 0., c.b);\n    }\n    //return vec3((c.r + c.g + c.b)/3.);\n    return vec3(0.555);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy; // Normalized pixel coordinates (from 0 to 1)\n    vec2 pv = 1./iResolution.xy; // Space between pixels in uv coordinates; numerator controls resolution\n    \n    vec3 col;\n    \n    float Time = float(iFrame)/60.;\n    \n    if (Time > 1.5) {\n    \n        vec3 m = texture(iChannel0, uv).rgb;\n    \n        // Controls how much strengths fluctuate\n        float variance = 0.35;\n        \n        // Controls the strength of each primary color and thus its ability to spread\n        rv = variance * (sin(Time) + 1.) + 1.;\n        gv = variance * (sin(Time + 2.0943951) + 1.) + 1.;\n        bv = variance * (sin(Time + 4.18879) + 1.) + 1.;\n        //rv = 1.;\n        //gv = 1.;\n        //bv = 1.;\n        \n        vec3 r = primaryColor(texture(iChannel0, uv + vec2(pv.x, 0.)).rgb);\n        vec3 l = primaryColor(texture(iChannel0, uv + vec2(-pv.x, 0.)).rgb);\n        vec3 u = primaryColor(texture(iChannel0, uv + vec2(0., pv.y)).rgb);\n        vec3 d = primaryColor(texture(iChannel0, uv + vec2(0., -pv.y)).rgb);\n        \n        vec3 s = (r + l + u + d)/3.95; // imperfect average of surrounding colors\n        col = 1.2*mix(m, s, 0.7);\n        col = vec3(tanh(col.r), tanh(col.g), tanh(col.b)); // Sigmoid to prevent overexposure, also mixes with previous color\n    }\n    else { // Initial Conditions\n        col = texture(iChannel1, 1.*uv).rgb * 9. * vec3(1.01, 1., 1.15); // Abstract 1\n    }\n\n    // Output to screen\n    fragColor = 1.*vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}