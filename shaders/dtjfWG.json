{
    "Shader": {
        "info": {
            "date": "1694463857",
            "description": "A simple swirly portal effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtjfWG",
            "likes": 3,
            "name": "Swirly Portal",
            "published": 3,
            "tags": [
                "swirl",
                "vortex",
                "portal"
            ],
            "usePreview": 0,
            "username": "m039",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "void Unity_Twirl(vec2 UV, vec2 Center, float Strength, vec2 Offset, out vec2 Out)\n{\n    vec2 delta = UV - Center;\n    float angle = Strength * length(delta);\n    float x = cos(angle) * delta.x - sin(angle) * delta.y;\n    float y = sin(angle) * delta.x + cos(angle) * delta.y;\n    Out = vec2(x + Center.x + Offset.x, y + Center.y + Offset.y);\n}\n\nvec2 unity_voronoi_noise_randomVector(vec2 UV, float offset)\n{\n    mat2 m = mat2(15.27, 47.63, 99.41, 89.98);\n    UV = fract(sin(UV * m) * 46839.32);\n    return vec2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);\n}\n\nvoid Unity_Voronoi(vec2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)\n{\n    vec2 g = floor(UV * CellDensity);\n    vec2 f = fract(UV * CellDensity);\n    float t = 8.0;\n    vec3 res = vec3(8.0, 0.0, 0.0);\n\n    for(int y=-1; y<=1; y++)\n    {\n        for(int x=-1; x<=1; x++)\n        {\n            vec2 lattice = vec2(x,y);\n            vec2 offset = unity_voronoi_noise_randomVector(lattice + g, AngleOffset);\n            float d = distance(lattice + offset, f);\n            if(d < res.x)\n            {\n                res = vec3(d, offset.x, offset.y);\n                Out = res.x;\n                Cells = res.y;\n            }\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Parameters.\n\n    vec3 color = vec3(195.0 / 255.0, 84.0 / 255.0, 205.0 / 255.0) * 3.0;\n    float strength = 10.0;\n    float speed = 0.2;\n    float brightness = 1.5;\n    float cellDensity = 6.0;\n    \n    // Shader.\n    \n    vec2 twirlResult;\n    float voronoiResult;\n    float voronoiCells;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float offset = iTime * speed;\n \n    Unity_Twirl(uv, vec2(0.5, 0.5), strength, vec2(offset), twirlResult);\n    Unity_Voronoi(twirlResult, 2.0, cellDensity, voronoiResult, voronoiCells);\n    \n    voronoiResult = pow(voronoiResult, brightness);\n    \n    // Output to screen\n    fragColor = vec4(voronoiResult * color, voronoiResult);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}