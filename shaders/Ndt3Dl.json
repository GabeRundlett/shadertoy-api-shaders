{
    "Shader": {
        "info": {
            "date": "1631409530",
            "description": "Truchet tiling with a simple pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndt3Dl",
            "likes": 6,
            "name": "simple truchet pattern #1",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "tiles"
            ],
            "usePreview": 0,
            "username": "pugbyte",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n#define TAU (2.*PI)\n\nvec3 blue = vec3(0.000,0.631,0.616);\nvec3 white = vec3(1.000,0.973,0.898);\nvec3 yellow = vec3(1.000,0.702,0.267);\nvec3 red = vec3(0.878,0.365,0.365);\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat circle(vec2 st, vec2 center, float radius) {\n    return 1.0 - step(radius, length(st - center));\n}\n\nfloat circleOutline(vec2 st, vec2 center, float radius, float thickness) {\n    float distToEdge = abs(radius - length(st - center));\n    return 1.0 - step(thickness, distToEdge);\n}\n\nfloat cornerCircle(vec2 st, float radius) {\n    float corner = 0.;\n    corner += circle(st, vec2(-.5,.5), radius);\n    corner += circle(st, vec2(.5,.5), radius);\n    corner += circle(st, vec2(-.5,-.5), radius);\n    corner += circle(st, vec2(.5,-.5), radius);\n    return corner;\n}\n\nfloat line(float p, float mi, float mx) {\n    return step(mi, p) * (1.0-step(mx, p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xx;\n    \n    // rotate\n    //uv *= rot(-iTime*0.05);\n    uv *= rot(PI*0.12);\n    // zoom\n    //uv *= mix(0.7, 1.3, 0.5 * 0.5 * sin((iTime+PI)*5.));\n    uv *= 1.4;\n    // pan\n    uv += vec2(iTime*0.07);\n    \n    // Repitition\n    uv *= 5.0;\n    vec2 id = floor(uv);\n    vec2 gv = fract(uv);\n    \n    \n    vec3 col = red;\n    \n    float stripe_str = 0.8;\n    float stripes = ceil(sin(gv.x*PI*60.));\n    col = mix(col, stripe_str*red, stripes);\n    \n    // Randomly rotate by some multiple of PI/2\n    //float n = hash12(id+iTime*0.00001);\n    float n = hash12(id);\n    \n    n *= TAU;\n    n = floor(n / (PI/2.)) * (PI/2.);\n    \n    gv -= 0.5;\n    gv *= rot(n);\n    \n    float off = 0.5 - 0.5 * sin(iTime);\n    off *= 0.4;\n    off = 0.287;\n    \n    col = mix(col, white, line(gv.x - gv.y, off + -1., off + -.9));\n    col = mix(col, yellow, line(gv.x - gv.y, off + -.87, off + -.7));\n    col = mix(col, blue, line(gv.x - gv.y, off + -.67, off + -.6));\n    \n    col = mix(col, blue, line(gv.x - gv.y, .9 - off, 1. - off));\n    col = mix(col, white, line(gv.x - gv.y, .7 - off, .87 - off));\n    col = mix(col, blue, line(gv.x - gv.y, .6 - off, .67 - off));\n    \n    float osc = 0.5 + 0.5 * sin(iTime*5.0);\n    \n    // center circle\n    col = mix(col, white, circle(gv, vec2(0), osc*0.1));\n    vec3 yellowstripes = mix(yellow, stripe_str*yellow, stripes);\n    col = mix(col, yellowstripes, circle(gv, vec2(0), osc*0.05));\n    \n    // corner circles\n    col = mix(col, white, cornerCircle(gv, (1.-osc)*0.1));\n    vec3 bluestripes = mix(blue, stripe_str*blue, stripes);\n    col = mix(col, bluestripes, cornerCircle(gv, (1.-osc)*0.05));\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}