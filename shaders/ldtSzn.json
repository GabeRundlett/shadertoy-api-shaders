{
    "Shader": {
        "info": {
            "date": "1457434834",
            "description": "flow by stream function. see [url]https://hal.inria.fr/inria-00345903/[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ldtSzn",
            "likes": 48,
            "name": "flow by stream function",
            "published": 3,
            "tags": [
                "fluid",
                "flow",
                "short",
                "stream",
                "streamfunction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 3350
        },
        "renderpass": [
            {
                "code": "// see \"Scalable Real-Time Animation of Rivers\" https://hal.inria.fr/inria-00345903/\n\n// noise-based variant: https://www.shadertoy.com/view/Xl3Gzj\n\n#define r 1.5 // test distance      for efficiency, as small as it keep covering influencials river sides \n#define c 1.5 // boundary condition   < 1: slip condition   > 1 : no-slip condition\n\n#define L(a,b) O+= 1e-3/length( clamp( dot(U-(a),v=b-(a))/dot(v,v), 0.,1.) *v - U+a ) // segments\n    \nfloat f(float d) { // interpolation function\n    float t = 1.-d/r;\n    return t<0. ? 0. :pow(d,-c)*(6.*t*t-15.*t+10.)*t*t*t;\n}\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tU /= iResolution.y;\n    \n    // --- interpolate stream function : add(distance to border, stream at border)\n    float t = iTime,wf=0.,wT=0., w; \n#define add(d,phi)  w = f(d),  wf += w*phi,  wT += w;\n    // river bed and obstacle geometry, + flux (diff of stream between river sides)\n    add( length( U-vec2(.0+.2*sin(t) , .8)    ) -.3, 0.);   // rock1 stream=0.\n    add( length( U-vec2(.3+.2*sin(t) , .5)    ) -.3, 0.);\n    add( length( U-vec2(1.3, .8+.2*cos(2.*t)) ) -.5, .5);   // rock2 stream=.5\n    add( length( U-vec2(.8+.2*cos(.5*t), -.2) ) -.4, 1.);   // rock3 stream=1.\n    add( length( U-vec2(1.7, .15)             ) -.1,  .75); // rock4 stream=.75\n    w = wf / wT;                               // stream field\n    vec2 V = vec2(-dFdy(w), dFdx(w));          // velocity field\n    \n    // --- display\n    if (w!=w) { O =  vec4(.5,0,0,0); return; } // in rocks   ( w!=w = NaN )\n   \tO = vec4(0,50.*length(V),sin(100.*w),0);   // draw |V| and iso-streams\n\n    vec2 p = floor(U*30.+.5)/30., v;           // draw velocity vectors\n    L ( p-V*2., p+V*2.);                               // L(vec2(.5,.5),p);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}