{
    "Shader": {
        "info": {
            "date": "1556423979",
            "description": "yep. branchless except mouse logic.\nmouse from far left to reset,\nmouse anywhere else to draw.",
            "flags": 32,
            "hasliked": 0,
            "id": "ttfGDN",
            "likes": 5,
            "name": "gol",
            "published": 3,
            "tags": [
                "automata",
                "life",
                "conway",
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// orion elenzil 2019.\n// the four buffers are all the same,\n// just there to get 4 passes per frame.\n// the main logic is branchless.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 XY )\n{\n    ivec2 RS = ivec2(iResolution.xy);\n\tivec2 IJ = ivec2(XY);\n    \n    if (iFrame == 0 || iMouse.z > 0.0) {\n        if (iMouse.z < 150.0) {\n            vec2 uv = XY / iResolution.xy - 0.5;\n            uv.y += sin(uv.x * iMouse.y / iResolution.y * 35.0) * 0.1;\n            float r = length(iMouse.x / iResolution.x - 0.5);\n            float f = float(int(sin(length(uv) * 400.0 * r) * 0.99 + 1.0));\n            fragColor = vec4(f * 0.5, 0.0, f * 0.2, f);\n        }\n        else {\n            float lm = length(iMouse.xy-XY);\n            if (lm < 8.0 && cos(lm / 0.7) > 0.0) {\n\t            fragColor = vec4(0.7, 0.0, 0.4, 1.0);\n            }\n            else {\n\t\t\t    fragColor = texelFetch(iChannel0, IJ, 0);\n            }\n        }\n        return;\n    }\n    \n    float living = 0.0;\n    vec4 me;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 0, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1,  0)) % RS, 0).a;\n    me      = texelFetch(iChannel0, (IJ +      ivec2( 0,  0))     , 0).rgba;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1,  0)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1,  1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 0,  1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1,  1)) % RS, 0).a;\n    \n    float newLife = me.a;\n    \n    const float[] LUT = float[] (\n        0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\n        0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0\n    );\n    \n    int index = int(me.a) * 8 + int(living);\n    me.a = LUT[index];\n    \n    newLife = clamp(me.a - newLife, staticIntensity, 1.0);\n    \n    \n    me.r = me.r * 0.99  + newLife * 0.4 * living / 8.0;\n    me.g = me.g * 0.97  + newLife * 0.7 * living / 8.0;\n    me.b = me.b * 0.985 + newLife * 0.5 * living / 8.0;\n    \n    fragColor = me;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 XY )\n{\n    ivec2 RS = ivec2(iResolution.xy);\n\tivec2 IJ = ivec2(XY);\n    \n    if (iFrame == 0 || iMouse.z > 0.0) {\n        if (iMouse.z < 150.0) {\n            vec2 uv = XY / iResolution.xy - 0.5;\n            uv.y += sin(uv.x * iMouse.y / iResolution.y * 35.0) * 0.1;\n            float r = length(iMouse.x / iResolution.x - 0.5);\n            float f = float(int(sin(length(uv) * 400.0 * r) * 0.99 + 1.0));\n            fragColor = vec4(f * 0.5, 0.0, f * 0.2, f);\n        }\n        else {\n            float lm = length(iMouse.xy-XY);\n            if (lm < 8.0 && cos(lm / 0.7) > 0.0) {\n\t            fragColor = vec4(0.7, 0.0, 0.4, 1.0);\n            }\n            else {\n\t\t\t    fragColor = texelFetch(iChannel0, IJ, 0);\n            }\n        }\n        return;\n    }\n    \n    float living = 0.0;\n    vec4 me;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 0, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1,  0)) % RS, 0).a;\n    me      = texelFetch(iChannel0, (IJ +      ivec2( 0,  0))     , 0).rgba;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1,  0)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1,  1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 0,  1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1,  1)) % RS, 0).a;\n    \n    float newLife = me.a;\n    \n    const float[] LUT = float[] (\n        0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\n        0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0\n    );\n    \n    int index = int(me.a) * 8 + int(living);\n    me.a = LUT[index];\n    \n    newLife = clamp(me.a - newLife, staticIntensity, 1.0);\n    \n    \n    me.r = me.r * 0.99  + newLife * 0.4 * living / 8.0;\n    me.g = me.g * 0.97  + newLife * 0.7 * living / 8.0;\n    me.b = me.b * 0.985 + newLife * 0.5 * living / 8.0;\n    \n    fragColor = me;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 XY )\n{\n    ivec2 RS = ivec2(iResolution.xy);\n\tivec2 IJ = ivec2(XY);\n    \n    if (iFrame == 0 || iMouse.z > 0.0) {\n        if (iMouse.z < 150.0) {\n            vec2 uv = XY / iResolution.xy - 0.5;\n            uv.y += sin(uv.x * iMouse.y / iResolution.y * 35.0) * 0.1;\n            float r = length(iMouse.x / iResolution.x - 0.5);\n            float f = float(int(sin(length(uv) * 400.0 * r) * 0.99 + 1.0));\n            fragColor = vec4(f * 0.5, 0.0, f * 0.2, f);\n        }\n        else {\n            float lm = length(iMouse.xy-XY);\n            if (lm < 8.0 && cos(lm / 0.7) > 0.0) {\n\t            fragColor = vec4(0.7, 0.0, 0.4, 1.0);\n            }\n            else {\n\t\t\t    fragColor = texelFetch(iChannel0, IJ, 0);\n            }\n        }\n        return;\n    }\n    \n    float living = 0.0;\n    vec4 me;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 0, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1, -1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1,  0)) % RS, 0).a;\n    me      = texelFetch(iChannel0, (IJ +      ivec2( 0,  0))     , 0).rgba;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1,  0)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2(-1,  1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 0,  1)) % RS, 0).a;\n    living += texelFetch(iChannel0, (IJ + RS + ivec2( 1,  1)) % RS, 0).a;\n    \n    float newLife = me.a;\n    \n    const float[] LUT = float[] (\n        0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\n        0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0\n    );\n    \n    int index = int(me.a) * 8 + int(living);\n    me.a = LUT[index];\n    \n    newLife = clamp(me.a - newLife, staticIntensity, 1.0);\n    \n    \n    me.r = me.r * 0.99  + newLife * 0.4 * living / 8.0;\n    me.g = me.g * 0.97  + newLife * 0.7 * living / 8.0;\n    me.b = me.b * 0.985 + newLife * 0.5 * living / 8.0;\n    \n    fragColor = me;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float staticIntensity = 0.02;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}