{
    "Shader": {
        "info": {
            "date": "1643642807",
            "description": "This is done with a tip of the hat to kali who was first to do it.",
            "flags": 8,
            "hasliked": 0,
            "id": "sdjyDw",
            "likes": 15,
            "name": "Million Cube Solver",
            "published": 3,
            "tags": [
                "rubiks"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 471
        },
        "renderpass": [
            {
                "code": "//million cube solver by eiffie\n//kali was the fist to do this in a shader. I just humbly\n//added the part that makes it A MILLION TIMES BETTER! :)\n\n#define rez iResolution\n#define pi 3.14159\nfloat nrnd(float r, float t){return fract((r+1.6713274)*(1.+floor(t)));}\nmat2 rmat(float a){float ca=cos(a),sa=sin(a);return mat2(ca,sa,-sa,ca);}\nfloat row(vec3 p,float x){p.x+=x;p=abs(p);return max(p.x-.05,max(p.y,p.z)-.15);}\nfloat time;\nfloat DE(in vec3 p){\n  vec3 s=sin(floor(p)+.1);\n  float rnd=fract(s.x+s.y+s.z);\n  p=fract(p)-.5;\n  float tim=time*(.5+.5*rnd);\n  rnd=nrnd(rnd,tim);\n  if(rnd<.66){p=p.yzx;if(rnd<.33)p=p.yzx;}\n  rnd=nrnd(rnd,tim);\n  s=p;s.yz=rmat(pi/2.*fract(tim))*s.yz;\n  return min(row(rnd<.33?s:p,0.),min(row(rnd>=.33 && rnd<.66?s:p,-.1),row(rnd>=.66?s:p,.1)));\n}\nvec3 color(in vec3 p,in float eps){\n  vec3 s=sin(floor(p)+.1),mcol=vec3(0);eps+=0.001;\n  float rnd=fract(s.x+s.y+s.z);\n  p=fract(p)-.5;\n  float tim=time*(.5+.5*rnd);\n  int n=int(floor(tim));\n  for(int i=n;i>=0;i--){\n    float r1=nrnd(rnd,float(i));\n    if(r1<.66){p=p.yzx;if(r1<.33)p=p.yzx;}\n    float r2=nrnd(r1,float(i)), x=p.x;//rotate middle\n    if(r2>=.66)x+=.1;//rotate neg side\n    else if(r2>=.33)x-=.1;//rotate pos side\n    if(abs(x)-.05<=eps)p.yz=(i==n?rmat(pi/2.*fract(tim)):mat2(0,1,-1,0))*p.yz;//rotate\n    if(r1<.66){p=p.zxy;if(r1<.33)p=p.zxy;}//unroll\n  }\n  s=abs(p);\n  float d0=max(s.x,max(s.y,s.z));\n  vec2 b=s.xy;\n  if(s.x==d0){mcol=vec3(1,1,p.x<0.?1:0);b=s.yz;}\n  else if(s.y==d0){mcol=vec3(1.,p.y<0.?.25:0.,0.);b=s.xz;}\n  else {mcol=vec3(0,1,0);if(p.z<0.)mcol=mcol.zxy;}\n  b=0.05-abs(mod(b-0.05,0.1)-0.05);\n  rnd=min(b.x,b.y);\n  rnd=smoothstep(0.,eps*2.,rnd);\n  return mcol*rnd;\n}\nvec3 normal(vec3 p, float d){//from dr2\n  vec2 e=vec2(d,-d);vec4 v=vec4(DE(p+e.xxx),DE(p+e.xyy),DE(p+e.yxy),DE(p+e.yyx));\n  return normalize(2.*v.yzw+vec3(v.x-v.y-v.z-v.w));\n}\nfloat rnd;\nvoid randomize(in vec2 p){rnd=fract(iTime+sin(dot(p,vec2(13.3145,117.7391)))*42317.7654321);}\nvec3 scene(vec3 ro, vec3 rd){\n  float t=DE(ro)*rnd,d,px=1./rez.y;\n  vec3 L=normalize(vec3(0.4,0.5,-0.5)),C=vec3(0);\n  for(int i=0;i<99;i++){\n    t+=d=DE(ro+rd*t);\n    if(t>70.0 || d<px*t)break;\n  }\n  if(d<px*t*5. && t<70.){\n    vec3 so=ro+rd*t;\n    C=color(so,DE(so));\n    vec3 N=normal(so,d);\n    float dif=0.5+0.5*dot(N,L);\n    float vis=clamp(dot(N,-rd),0.05,1.0);\n    float fr=pow(1.-vis,5.0);\n    C=(C*dif+fr*max(0.,dot(L,reflect(rd,N))))*exp(-t*.15);\n  }\n  return C/max(1.,iTime-60.);\n}\nvec3 path(float tm,float t){float a=tm*pi*0.1;return vec3(cos(a),sin(a),t);}\nmat3 lookat(vec3 fw){vec3 up=vec3(0.0,1.0,0.0),rt=-normalize(cross(fw,up));return mat3(rt,normalize(cross(rt,fw)),fw);}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n randomize(fragCoord);time=max(0.,60.-iTime);float t=pow(time,1.3);\n vec3 ro=path(time,t),fw=normalize(path(time,t+1.)-ro);\n vec3 rd=lookat(fw)*normalize(vec3((iResolution.xy-2.0*fragCoord)/iResolution.y,3.0));\n fragColor=vec4(scene(ro,rd),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int N[8]=int[8](0,7,-5,5,-3,3,-1,0);\nfloat freq(int n){\n  int m=n%12; \n  if(m!=7 && m%2>0)return 0.;\n  if(m==6 || m==8)m-=1;\n  return pow(2.,float(n)/12.);\n}\nvec2 mainSound(int samp, float time){\n  float t=time*16.,a=0.;t*=1.+pow(fract(t/8.)*fract(t/2.),15.+20.*fract(t/256.));\n  int bt=int(floor(t)),n=0,d=32;\n  for(int i=0;i<3;i++){\n    n+=N[int(bt/d)%8];\n    float f=float(i+1);\n    a+=fract(f*.3+freq(n)*t*f*6.6)-.5;\n    d/=4;\n  }  \n  vec2 v=vec2(a,(fract(a*(2.+floor(t/256.)/3.))-.5)*.75);\n  return clamp(v*.001*time,0.,.1)/max(1.,time-60.);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}