{
    "Shader": {
        "info": {
            "date": "1704850972",
            "description": "Made for [url=https://arugl.medium.com/hash-noise-in-gpu-shaders-210188ac3a3e]Hash Noise in GPU Shaders[/url] blog post.",
            "flags": 32,
            "hasliked": 0,
            "id": "4fsSRn",
            "likes": 37,
            "name": "Hash-Noise stability CPU-GPU-GPU",
            "published": 3,
            "tags": [
                "noise",
                "hash"
            ],
            "usePreview": 0,
            "username": "morimea",
            "viewed": 996
        },
        "renderpass": [
            {
                "code": "\n// Created by Danil (2023+) https://github.com/danilw\n// License - CC0 or use as you wish\n\n// self https://www.shadertoy.com/view/4fsSRn\n\n/*\n\n blog post:\n https://arugl.medium.com/hash-noise-in-gpu-shaders-210188ac3a3e\n \n mirror:\n https://danilw.github.io/blog/Hash_Noise_in_GPU_Shaders/\n \n*/\n\n\nfloat print_g1(vec2 Uv, float scale);\nfloat print_g2(vec2 Uv, float scale);\nfloat print_g3(vec2 Uv, float scale);\nvec3 print_l(vec2 uv, vec3 col, float px, vec2 im);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float px = 1./iResolution.y;\n    vec2 uv;vec2 im;\n    if(iResolution.x/iResolution.y>16./9.){\n    vec2 res = iResolution.xy/iResolution.y;\n        uv = fragCoord/iResolution.y-0.5*res;\n        im = iMouse.xy/iResolution.y-0.5*res;\n    }\n    else{\n        uv = fragCoord/iResolution.xy*vec2(16./9.,1.)-0.5*vec2(16./9.,1.);\n        im = iMouse.xy/iResolution.xy*vec2(16./9.,1.)-0.5*vec2(16./9.,1.);\n    }\n    \n    float sc = 0.04;\n    \n    vec3 col = white*0.95;\n    float d = 0.;\n\n    if(iMouse.z>0.){\n        d = lines1d(uv+vec2(0.,-0.47), vec2(1.7,0.032), px, 0.01, 0.002);\n        col = mix(col, blue, d*0.125);\n    }\n    \n    if(uv.y>0.415){\n        d = lines1d(uv+vec2(0.65,-0.47), vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, red, d);\n        d = lines(uv+vec2(0.65,-0.47), vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, dark, d);\n        d = print_g1(((uv+vec2(0.66,-0.47))/sc)+0.5, sc);\n        if(uv.y>0.43)col = mix(col, dark, d);\n\n        d = lines1d(uv+vec2(0.65-0.35,-0.47), vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, yellowl, d);\n        d = lines(uv+vec2(0.65-0.35,-0.47), vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, dark, d);\n        d = print_g2(((uv+vec2(0.66-0.35,-0.47))/sc)+0.5, sc);\n        if(uv.y>0.43)col = mix(col, dark, d);\n\n        d = lines1d(uv+vec2(0.65-1.05,-0.47), vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, green, d);\n        d = lines(uv+vec2(0.65-1.05,-0.47), vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, dark, d);\n        d = print_g3(((uv+vec2(0.66-1.05,-0.47))/sc)+0.5, sc);\n        if(uv.y>0.43)col = mix(col, dark, d);\n    }\n    \n    col = print_l(uv, col, px, im);\n\n    float vignetteAmt = 1. - dot(uv * 0.65, uv * 0.65);\n    col *= clamp(vignetteAmt, 0.5, 1.);\n    col = col / 1.5 + col*col;\n    col += (hash12(fragCoord.xy) - .5)*.07;\n    col = clamp(col, vec3(0.), vec3(1.));\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\nfloat print_g1(vec2 Uv, float scale){\n    float t = 0.;\n    vec2 oU = Uv;\n    t+=print_text(iChannel3, Uv, oU, scale, get_tg(0,0,iChannel0, iResolution.xy), iResolution.xy);\n    return clamp(t,0.,1.);\n}\n\nfloat print_g2(vec2 Uv, float scale){\n    float t = 0.;\n    vec2 oU = Uv;\n    t+=print_text(iChannel3, Uv, oU, scale, get_tg(1,0,iChannel0, iResolution.xy), iResolution.xy);\n    t+=print_text(iChannel3, Uv, oU, scale, get_tg(1,1,iChannel0, iResolution.xy), iResolution.xy);\n    return clamp(t,0.,1.);\n}\n\nfloat print_g3(vec2 Uv, float scale){\n    float t = 0.;\n    vec2 oU = Uv;\n    t+=print_text(iChannel3, Uv, oU, scale, get_tg(2,0,iChannel0, iResolution.xy), iResolution.xy);\n    return clamp(t,0.,1.);\n}\n\nvec3 print_l(vec2 uv, vec3 col, float px, vec2 im){\n    float d = 0.;\n    vec2 ouv = uv;\n    float sc = 0.04;\n    d = lines(uv +vec2(0.,0.017), vec2(1.7,0.9), px, 0.01, 0.002);\n    col = mix(col, darkb, d);\n    \n    float od = lines1d(uv +vec2(0.,0.017), vec2(1.7,0.9), px, 0.01, 0.002);\n    \n    if(iMouse.z>0.){uv*=0.68;uv+=-im*0.68;}\n\n    float odm = lines1d(uv +vec2(0.,0.017), vec2(1.77,0.97), px, 0.0005, 0.002);\n    col = mix(col, dark, odm*od);\n    \n    \n    vec3 tcol = textureLod(iChannel1,(uv/vec2(16./9.,1.))+0.5,0.).rgb;\n    col = mix(col, tcol, od*odm);\n    \n    if(iMouse.z>0.)\n    {\n        d = max(1.-smoothstep(px, px*1.5, abs(uv.x)),1.-smoothstep(px, px*1.5, abs(uv.y)));\n        d*= lines1d(uv, vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, bluel, d*0.725*od);\n        d = max(1.-smoothstep(px, px*1.5, abs(ouv.x)),1.-smoothstep(px, px*1.5, abs(ouv.y)));\n        d*= lines1d(ouv, vec2(0.02), px, 0.01, 0.002);\n        col = mix(col, bluel, d*0.5*od);\n    }\n    \n    \n    \n    return col;\n    \n}\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nconst vec3 white = vec3(0xa4, 0xc4, 0xd8) / float(0xff);\nconst vec3 whitel = vec3(0xef, 0xfa, 0xed) / float(0xff);\nconst vec3 dark = vec3(0x1d, 0x1d, 0x2b) / float(0xff);\nconst vec3 darkb = vec3(0x20, 0x40, 0x89) / float(0xff);\n\nconst vec3 red = vec3(0xdc, 0x10, 0x00) / float(0xff);\nconst vec3 yellow = vec3(0xdd, 0xb2, 0xff) / float(0xff);\nconst vec3 yellowl = vec3(0xed, 0xcb, 0x59) / float(0xff);\nconst vec3 green = vec3(0x14, 0xb0, 0x00) / float(0xff);\nconst vec3 bluel = vec3(0x00, 0xdd, 0xff) / float(0xff);\nconst vec3 blue = vec3(0x00, 0x00, 0xff) / float(0xff);\n\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat lines(vec2 p, vec2 bsz, float px, float a, float b) {\n    return smoothstep(px, -px, abs(sdBox(p, bsz / 2.) - a) - b);\n}\n\nfloat lines3(vec2 p, vec2 bsz, float px, float a, float b, out vec2 td) {\n    float d1 = smoothstep(px, -px, abs(sdBox(p, bsz / 2.) - a) - b);\n    b = 0.0035;\n    float d2 = smoothstep(px, -px, (sdBox(p, bsz / 2.) - a) - b);\n    float d3 = smoothstep(px, -px, (sdBox(p, bsz / 2.) - a) - b+b*1.95);\n    td=vec2(d2,d3);\n    return d1;\n}\n\nfloat lines1d(vec2 p, vec2 bsz, float px, float a, float b) {\n    return smoothstep(px, -px, (sdBox(p, bsz / 2.) - a) - b+b*1.95);\n}\n\n\nuint get_text(int idx, uvec4 t){\n    ivec2 tdx = ivec2(idx/4,idx%4);\n    if(tdx.x==0)return t[tdx.y];\n    return 0u;\n}\n\n//using https://www.shadertoy.com/view/llyXRW\nvoid C(sampler2D tex, inout vec2 Uv, vec2 oU, inout vec4 T, in int c, bool dir, float loc_scale, vec2 ires){\n    loc_scale = clamp(loc_scale*2.,0.05*1024./ires.y,1.);\n    if(c==0x0){return;}\n    if(c==0x0A){Uv.x=oU.x;Uv.y+=1.;return;}\n    else Uv.x+=dir?.5:-.5;\n    vec2 tu=Uv/16. + fract( vec2(float(c), float(15-c/16)) / 16.);\n    tu.y=1.-tu.y;\n    vec4 tr = textureGrad(tex, tu, dFdx(tu/(16.*loc_scale)),dFdy(tu/(16.*loc_scale)));\n    if(Uv.x<.0||Uv.x>1.||Uv.y<0.||Uv.y>1. ){\n        tr*=0.;\n    }\n    T+=tr;\n}\n\nuvec4 decodeval32(uint varz) {\n    return uvec4(varz>>24,(varz>>16)&0xffu,(varz>>8)&0xffu,(varz>>0)&0xffu);\n}\n\nfloat print_text(sampler2D ich,inout vec2 Uv, vec2 oU, float scale, uvec4 t, vec2 ires){\n    vec4 T=vec4(0.);\n    for(int i=0;i<4;i++){\n        ivec4 a = ivec4(decodeval32(get_text(i,t)));\n        for(int j=0;j<4;j++){\n            C(ich,Uv,oU,T,a[j],false,scale, ires);\n        }\n    }\n    if(length(T.yz)==0.)\n        return 0.;\n    return T.x;\n}\n\nuvec4 get_tg(int a, int b, sampler2D ich, vec2 ires){\n    const int gs = 5;\n    const int gr = 42;\n    int ix = a*gs+b;\n    return floatBitsToUint(texelFetch(ich,ivec2(ix%int(ires.x),ix/int(ires.x)),0));\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// text\n\n\nuvec4[] tg1= uvec4[](uvec4(0x2020646Fu, 0x206E6F74u, 0x20757365u, 0u));\n\nuvec4[] tg2= uvec4[](uvec4(0x20207573u, 0x6520616Eu, 0x64207265u, 0x6D656D62u),\n             uvec4(0x65722061u, 0x626F7574u, 0x20656467u, 0x65730000u));\n\nuvec4[] tg3= uvec4[](uvec4(0x20206D6Fu, 0x73742073u, 0x7461626Cu, 0x65000000u));\n\nuvec4[] tg4= uvec4[](uvec4(0x20686173u, 0x68000000u, 0u, 0u));\nuvec4[] tg5= uvec4[](uvec4(0x206E6F69u, 0x73650000u, 0u, 0u));\n\n\nuvec4[] tg6= uvec4[](uvec4(0x436F6E73u, 0x69737465u, 0x6E74206Fu, 0x6E204750u),\n             uvec4(0x55000000u, 0u, 0u, 0u));\n\nuvec4[] tg7= uvec4[](uvec4(0x436F6E73u, 0x69737465u, 0x6E74206Fu, 0x6E204350u),\n             uvec4(0x552D4750u, 0x55000000u, 0u, 0u));\n\nuvec4[] tg8= uvec4[](uvec4(0x436F6E73u, 0x69737465u, 0x6E74206Fu, 0x6E206469u),\n             uvec4(0x66666572u, 0x656E7420u, 0x0A475055u, 0x73000000u));\n\nuvec4[] tg9= uvec4[](uvec4(0x47656E65u, 0x72617465u, 0x73207361u, 0x6D652076u),\n             uvec4(0x616C7565u, 0x20617320u, 0x696E206Eu, 0x65696768u),\n             uvec4(0x626F720Au, 0x61646469u, 0x6E67206Eu, 0x65696768u),\n             uvec4(0x626F722Du, 0x73686966u, 0x7420746Fu, 0x20706F73u),\n             uvec4(0x6974696Fu, 0x6E2E0000u, 0u, 0u));\n\n\nuvec4[] tg10= uvec4[](uvec4(0x47656E65u, 0x72617465u, 0x73207361u, 0x6D652076u),\n              uvec4(0x616C7565u, 0x206F6E20u, 0x43505520u, 0x616E6420u),\n              uvec4(0x47505500u, 0u, 0u, 0u));\n\n\nuvec4[] tg11= uvec4[](uvec4(0x47656E65u, 0x72617465u, 0x73207361u, 0x6D652076u),\n              uvec4(0x616C0000u, 0x206F6E20u, 0x64696666u, 0x6572656Eu),\n              uvec4(0x74204750u, 0x55000000u, 0u, 0u));\n\n\nuvec4[] tg12= uvec4[](uvec4(0x73696E2Du, 0x68617368u, 0x0A73696Eu, 0x2D6E6F69u),\n              uvec4(0x73650000u, 0u, 0u, 0u));\n\nuvec4[] tg13= uvec4[](uvec4(0x4E6F2E00u, 0u, 0u, 0u));\n\nuvec4[] tg14= uvec4[](uvec4(0x44657065u, 0x6E647320u, 0x6F6E2047u, 0x50552061u),\n              uvec4(0x6E642066u, 0x6C6F6174u, 0x2D72616Eu, 0x67650A69u),\n              uvec4(0x6E206D6Fu, 0x73742063u, 0x61736573u, 0x20697420u),\n              uvec4(0x62726F6Bu, 0x656E2E20u, 0u, 0u));\n\n\nuvec4[] tg15= uvec4[](uvec4(0x4E6F2C20u, 0x69742063u, 0x6F6D706Cu, 0x6574656Cu),\n              uvec4(0x79206272u, 0x6F6B656Eu, 0u, 0u));\n\nuvec4[] tg16= uvec4[](uvec4(0x66726163u, 0x742D6861u, 0x73680A66u, 0x72616374u),\n              uvec4(0x2D6E6F69u, 0x73650000u, 0u, 0u));\n\n\nuvec4[] tg17= uvec4[](uvec4(0x59657320u, 0x2D20696Eu, 0x206D6F73u, 0x74206361u),\n              uvec4(0x7365732Eu, 0u, 0u, 0u));\n\n\nuvec4[] tg18= uvec4[](uvec4(0x53706563u, 0x69616C20u, 0x63617365u, 0x73206361u),\n              uvec4(0x6E206265u, 0x20666978u, 0x65642062u, 0x79200A6Cu),\n              uvec4(0x696D6974u, 0x696E6720u, 0x666C6F61u, 0x74207661u),\n              uvec4(0x6C756520u, 0x746F2072u, 0x6567696Fu, 0x6E2E0000u));\n\n\nuvec4[] tg19= uvec4[](uvec4(0x4974206Du, 0x61792022u, 0x6C6F6F6Bu, 0x2220636Fu),\n              uvec4(0x6E736973u, 0x74656E74u, 0x2C206275u, 0x74202D20u),\n              uvec4(0x0A746865u, 0x7265206Du, 0x616E7920u, 0x65786365u),\n              uvec4(0x7074696Fu, 0x6E732F65u, 0x64676573u, 0x2E000000u));\n\n\nuvec4[] tg20= uvec4[](uvec4(0x49742077u, 0x696C6C20u, 0x62652064u, 0x69666665u),\n              uvec4(0x72656E74u, 0x20696E20u, 0x6D616E79u, 0x20636173u),\n              uvec4(0x65732E00u, 0u, 0u, 0u));\n\n\nuvec4[] tg21= uvec4[](uvec4(0x74657874u, 0x7572650Au, 0x68617368u, 0x2F6E6F69u),\n              uvec4(0x73650000u, 0u, 0u, 0u));\n\n\nuvec4[] tg22= uvec4[](uvec4(0x59657320u, 0x69662072u, 0x65616420u, 0x77697468u),\n              uvec4(0x20746578u, 0x656C4665u, 0x7463682Eu, 0u));\n\nuvec4[] tg23= uvec4[](uvec4(0x696E742Du ,0x68617368u, 0u, 0u));\n\nuvec4[] tg24= uvec4[](uvec4(0x49742061u, 0x63742065u, 0x78616374u, 0x2073616Du),\n              uvec4(0x65206173u, 0x20667261u, 0x63742D68u, 0x6173682Eu));\n\nuvec4[] tg25= uvec4[](uvec4(0x42656361u, 0x75736520u, 0x736F7572u, 0x6365206Fu),\n              uvec4(0x66207261u, 0x6E646F6Du, 0x20697320u, 0x666C6F61u),\n              uvec4(0x74207661u, 0x6C75652Eu, 0u, 0u));\n\n\nuvec4[] tg26= uvec4[](uvec4(0x696E742Du, 0x68617368u, 0x206D6179u, 0x20626520u),\n              uvec4(0x6D6F7265u, 0x20737461u, 0x626C6520u, 0x696E2073u),\n              uvec4(0x6F6D6520u, 0x63617365u, 0x732E2000u, 0u));\n\nuvec4[] tg27= uvec4[](uvec4(0x57697468u, 0x6F757420u, 0x226C696Du, 0x6974696Eu),\n              uvec4(0x6720666Cu, 0x6F617420u, 0x72616E67u, 0x65220A69u),\n              uvec4(0x74206361u, 0x6E206765u, 0x6E657261u, 0x74652062u),\n              uvec4(0x726F6B65u, 0x6E2D6861u, 0x73682C20u, 0x73616D65u),\n              uvec4(0x20617320u, 0x66726163u, 0x742D6861u, 0x73682E00u));\n\n\nuvec4[] tg28= uvec4[](uvec4(0x696E742Du, 0x73656564u, 0x2D0A6861u, 0x73680000u));\n\n\nuvec4[] tg29= uvec4[](uvec4(0x53746162u, 0x6C652065u, 0x76657279u, 0x77686572u),\n              uvec4(0x652C2062u, 0x7574206Eu, 0x756D6265u, 0x72206F66u),\n              uvec4(0x20736565u, 0x642B2B20u, 0x616C736Fu, 0x206D7573u),\n              uvec4(0x74206265u, 0x2073616Du, 0x65206576u, 0x65727977u),\n              uvec4(0x68657265u, 0x2E000000u, 0u, 0u));\n\n\nuvec4[] tg30= uvec4[](uvec4(0x54686174u, 0x20697320u, 0x6E6F7420u, 0x706F7373u),\n              uvec4(0x69626C65u, 0x20666F72u, 0x20736F6Du, 0x65746869u),\n              uvec4(0x6E67206Cu, 0x696B6520u, 0x70617468u, 0x74726163u),\n              uvec4(0x696E6720u, 0x6F722073u, 0x696D696Cu, 0x61722063u),\n              uvec4(0x61736573u, 0x2E000000u, 0u, 0u));\n\nuvec4[] tg31= uvec4[](uvec4(0x42656361u, 0x75736520u, 0x6E756D62u, 0x6572206Fu),\n              uvec4(0x66207365u, 0x65642B2Bu, 0x20706572u, 0x20706978u),\n              uvec4(0x656C2069u, 0x73207261u, 0x6E646F6Du, 0x2E000000u));\n\nuvec4[] tg32= uvec4[](uvec4(0x4E6F6973u, 0x65206974u, 0x73656C66u, 0x20686176u),\n              uvec4(0x65206272u, 0x6F6B656Eu, 0x20766973u, 0x75616C20u),\n              uvec4(0x6C6F6F6Bu, 0x2E000000u, 0u, 0u));\n\nuvec4[] tg33= uvec4[](uvec4(0x4E6F6973u, 0x65206272u, 0x6F6B656Eu, 0x20646966u),\n              uvec4(0x66657265u, 0x6E746C79u, 0x2C0A6465u, 0x70656E64u),\n              uvec4(0x73206F66u, 0x20475055u, 0x2E000000u, 0u));\n              \nuvec4[] tg34= uvec4[](uvec4(0x43616E20u, 0x62652063u, 0x6F6E7369u, 0x64657265u),\n              uvec4(0x64206173u, 0x20596573u, 0u, 0u));\n\n\nuvec4[] tg35= uvec4[](uvec4(0x52656D65u, 0x6D626572u, 0x202D2074u, 0x65787475u),\n              uvec4(0x72652072u, 0x65616469u, 0x6E672069u, 0x73206D6Fu),\n              uvec4(0x73742065u, 0x7870656Eu, 0x73697665u, 0x206F7065u),\n              uvec4(0x72617469u, 0x6F6E206Fu, 0x6E204750u, 0x552E0000u));\n\nuvec4[] tg36= uvec4[](uvec4(0x66726163u, 0x742D6861u, 0x73682069u, 0x73207570u),\n              uvec4(0x20746F20u, 0x31307820u, 0x66617374u, 0x65722074u),\n              uvec4(0x68616E20u, 0x73696E67u, 0x6C652074u, 0x65787475u),\n              uvec4(0x72652072u, 0x6561642Eu, 0u, 0u));\n\n\nuvec4[] tg37= uvec4[](uvec4(0x416E6420u, 0x73706565u, 0x64206F66u, 0x20726561u),\n              uvec4(0x64696E67u, 0x20646570u, 0x656E6473u, 0x206F6E20u),\n              uvec4(0x74657874u, 0x75726520u, 0x73697A65u, 0x20696E20u),\n              uvec4(0x6D656D6Fu, 0x72792E00u, 0u, 0u));\n\nuvec4[] tg38= uvec4[](uvec4(0x416E6420u, 0x72656D65u, 0x6D626572u, 0x20746861u),\n              uvec4(0x7420696Eu, 0x742D6861u, 0x7368206Du, 0x756C7469u),\n              uvec4(0x706C6520u, 0x74696D65u, 0x7320736Cu, 0x6F776572u),\n              uvec4(0x20746861u, 0x6E206672u, 0x6163742Du, 0x68617368u),\n              uvec4(0x2E000000u, 0u, 0u, 0u));\n\n\nuvec4[] tg39= uvec4[](uvec4(0x54686973u, 0x206E6F69u, 0x7365206Eu, 0x6F742062u),\n              uvec4(0x726F6B65u, 0x6E207669u, 0x7375616Cu, 0x6C792066u),\n              uvec4(0x6F722076u, 0x69737561u, 0x6C2D6361u, 0x73657320u),\n              uvec4(0x77696C6Cu, 0x206C6F6Fu, 0x6B207361u, 0x6D652065u),\n              uvec4(0x76657279u, 0x77686572u, 0x652E0000u, 0u));\n\nuvec4[] tg40= uvec4[](uvec4(0x42656361u, 0x75736520u, 0x74657874u, 0x75726520u),\n              uvec4(0x696E7465u, 0x72706F6Cu, 0x6174696Fu, 0x6E20616Eu),\n              uvec4(0x64206D69u, 0x706D6170u, 0x73206F6Eu, 0x20475055u),\n              uvec4(0x202D0000u, 0u, 0u, 0u));\n              \nuvec4[] tg41= uvec4[](uvec4(0x796F7520u, 0x63616E20u, 0x6E6F7420u, 0x72656164u),\n              uvec4(0x20226578u, 0x61637422u, 0x2073616Du, 0x65207661u),\n              uvec4(0x6C756573u, 0x206F6E20u, 0x4350553Cu, 0x2D3E4750u),\n              uvec4(0x553C2D3Eu, 0x47505500u, 0u, 0u));\n\nconst int gs = 5;\nconst int gr = 42;\n\nvec4 ec(uvec4 v){return uintBitsToFloat(v);}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,0.0);\n    ivec2 ipx = ivec2(fragCoord);\n    float ov = texelFetch(iChannel0,ivec2(iResolution.xy-1.),0).w;\n    \n    if(ipx==ivec2(iResolution.xy-1.)){\n        fragColor = vec4(0.0,0.0,0.0,min(ov+1.,5.));\n        return;\n    }\n    \n    if(texelFetch(iChannel0,ivec2(iResolution.xy-1.),0).w>2.5)discard;\n    \n    int ipxl = ipx.x+ipx.y*int(iResolution.x);\n    \n    if(ov<1.5){\n        if(ipxl<gs*gr){\n            ivec2 ti = ivec2(ipxl/gs,ipxl%gs);\n            if(ti.x==0){if(ti.y<tg1.length())fragColor = ec(tg1[ti.y]);} else\n            if(ti.x==1){if(ti.y<tg2.length())fragColor = ec(tg2[ti.y]);} else\n            if(ti.x==2){if(ti.y<tg3.length())fragColor = ec(tg3[ti.y]);} else\n            if(ti.x==3){if(ti.y<tg4.length())fragColor = ec(tg4[ti.y]);} else\n            if(ti.x==4){if(ti.y<tg5.length())fragColor = ec(tg5[ti.y]);} else\n            if(ti.x==5){if(ti.y<tg6.length())fragColor = ec(tg6[ti.y]);} else\n            if(ti.x==6){if(ti.y<tg7.length())fragColor = ec(tg7[ti.y]);} else\n            if(ti.x==7){if(ti.y<tg8.length())fragColor = ec(tg8[ti.y]);} else\n            if(ti.x==8){if(ti.y<tg9.length())fragColor = ec(tg9[ti.y]);} else\n            if(ti.x==9){if(ti.y<tg10.length())fragColor = ec(tg10[ti.y]);} else\n            if(ti.x==10){if(ti.y<tg11.length())fragColor = ec(tg11[ti.y]);} else\n            if(ti.x==11){if(ti.y<tg12.length())fragColor = ec(tg12[ti.y]);} else\n            if(ti.x==12){if(ti.y<tg13.length())fragColor = ec(tg13[ti.y]);} else\n            if(ti.x==13){if(ti.y<tg14.length())fragColor = ec(tg14[ti.y]);} else\n            if(ti.x==14){if(ti.y<tg15.length())fragColor = ec(tg15[ti.y]);} else\n            if(ti.x==15){if(ti.y<tg16.length())fragColor = ec(tg16[ti.y]);} else\n            if(ti.x==16){if(ti.y<tg17.length())fragColor = ec(tg17[ti.y]);} else\n            if(ti.x==17){if(ti.y<tg18.length())fragColor = ec(tg18[ti.y]);} else\n            if(ti.x==18){if(ti.y<tg19.length())fragColor = ec(tg19[ti.y]);} else\n            if(ti.x==19){if(ti.y<tg20.length())fragColor = ec(tg20[ti.y]);} else\n            if(ti.x==20){if(ti.y<tg21.length())fragColor = ec(tg21[ti.y]);} else\n            if(ti.x==21){if(ti.y<tg22.length())fragColor = ec(tg22[ti.y]);} else\n            if(ti.x==22){if(ti.y<tg23.length())fragColor = ec(tg23[ti.y]);} else\n            if(ti.x==23){if(ti.y<tg24.length())fragColor = ec(tg24[ti.y]);} else\n            if(ti.x==24){if(ti.y<tg25.length())fragColor = ec(tg25[ti.y]);} else\n            if(ti.x==25){if(ti.y<tg26.length())fragColor = ec(tg26[ti.y]);} else\n            if(ti.x==26){if(ti.y<tg27.length())fragColor = ec(tg27[ti.y]);} else\n            if(ti.x==27){if(ti.y<tg28.length())fragColor = ec(tg28[ti.y]);} else\n            if(ti.x==28){if(ti.y<tg29.length())fragColor = ec(tg29[ti.y]);} else\n            if(ti.x==29){if(ti.y<tg30.length())fragColor = ec(tg30[ti.y]);} else\n            if(ti.x==30){if(ti.y<tg31.length())fragColor = ec(tg31[ti.y]);} else\n            if(ti.x==31){if(ti.y<tg32.length())fragColor = ec(tg32[ti.y]);} else\n            if(ti.x==32){if(ti.y<tg33.length())fragColor = ec(tg33[ti.y]);} else\n            if(ti.x==33){if(ti.y<tg34.length())fragColor = ec(tg34[ti.y]);} else\n            if(ti.x==34){if(ti.y<tg35.length())fragColor = ec(tg35[ti.y]);} else\n            if(ti.x==35){if(ti.y<tg36.length())fragColor = ec(tg36[ti.y]);} else\n            if(ti.x==36){if(ti.y<tg37.length())fragColor = ec(tg37[ti.y]);} else\n            if(ti.x==37){if(ti.y<tg38.length())fragColor = ec(tg38[ti.y]);} else\n            if(ti.x==38){if(ti.y<tg39.length())fragColor = ec(tg39[ti.y]);} else\n            if(ti.x==39){if(ti.y<tg40.length())fragColor = ec(tg40[ti.y]);} else\n            if(ti.x==40){if(ti.y<tg41.length())fragColor = ec(tg41[ti.y]);}\n        }\n    }else{\n        if(ov<2.5)\n        fragColor = texelFetch(iChannel0,ipx,0);\n    }\n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// print text once\n\nvec3 print_l(vec2 uv, vec3 col, float px, int lr);\n#define FIX_branch\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float px = 1./iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy*vec2(16./9.,1.)-0.5*vec2(16./9.,1.);\n    ivec2 ipx = ivec2(fragCoord);\n    const int gr = 42;\n    \n    fragColor = vec4(0.0,0.0,0.0,0.0);\n    \n    int lr = int(texelFetch(iChannel1,ivec2(iResolution.xy-1.),0).w);\n    \n    if(ipx==ivec2(iResolution.xy-1.)){\n        if(textureSize(iChannel3,0)==ivec2(1024))lr += 1;\n        if(lr>=gr+2)lr=gr;\n        fragColor.a=float(lr);\n        return;\n    }\n\n// while I made FIX_branch to fix Windows angle-dx11 bug, on new mesa 23.3.6\n// this \"fix\" conflict with AMD openGL https://www.shadertoy.com/view/MX2Xzh\n// to fix - repllacing discard with texture read+return.\n#ifdef FIX_branch\n    // can be replaced with texture read+return, same\n    //if(lr>=gr)discard; //AMD branching bug https://www.shadertoy.com/view/4f23D3\n    if(lr>=gr){fragColor=texelFetch(iChannel1,ipx,0);return;}\n    //if(textureSize(iChannel3,0)!=ivec2(1024))discard;\n    if(textureSize(iChannel3,0)!=ivec2(1024)){fragColor=texelFetch(iChannel1,ipx,0);return;}\n    // to see fix works - see line 142, search FIX_branch\n    // or go fullscreen and see how slow everything stay after 40-init frames without FIX_branch\n#endif\n    float d = 0.;\n    if(textureSize(iChannel3,0)==ivec2(1024)){\n        if(lr<gr-1){\n            vec3 col = dark;\n            col = print_l(uv, col, px, lr);\n            fragColor.rgb = texelFetch(iChannel1,ipx,0).rgb;\n            if(lr==0)fragColor.rgb*=0.;\n            fragColor = vec4(max(col,fragColor.rgb),0.0);\n        }else{\n            fragColor.rgb = texelFetch(iChannel1,ipx,0).rgb;\n            fragColor.a = 0.0;\n        }\n    }\n\n}\n\n\n\n// make everythign slower here so 0\n#define ANGLE_loops 0\n//#define ANGLE_loops min(iFrame,0)\n\n\nfloat print_gt(vec2 Uv, float scale, vec2 td, int a){\n    float t = 0.;\n    vec2 oU = Uv;\n    \n    if(td.x>0.001){ // this should work fine with dfd bugs because if(td.y<0.5) below\n        for(int i=0;i<5+ANGLE_loops;i++){\n            uvec4 ta = get_tg(a,i, iChannel0, iResolution.xy);\n            if(ta.x==0u)break;\n            t+=print_text(iChannel3, Uv, oU, scale, ta, iResolution.xy);\n            if(ta.w==0u)break;\n        }\n    }\n    if(td.y<0.5)t=clamp(t,0.,1.)*0.;\n    return clamp(t,0.,1.);\n}\n\n\nvec3 print_l(vec2 uv, vec3 col, float px, int ran){\n    float d = 0.;\n    vec2 ouv = uv;\n    float sc = 0.04;\n    \n    vec2 mtd[20];\n    \n    vec4 lp = vec4(0.76,0.405,-0.105,-0.61);\n    vec4 rp = vec4(-0.383,-0.237,-0.068,0.1025);\n    vec4 dp= vec4(.2,.51,.51,.5);\n    \n    for(int i=0;i<5*4+ANGLE_loops;i++)\n    {\n        float a = 0.;\n        float b = 0.;\n        vec2 c = vec2(0.);\n        int ad = 0;\n        float mc = 1.;\n        if(i>12){if(((i%4)%2)==1){a=-0.86;c=vec2(1.52,0.17-0.05*float(i>18));mc=0.;}else{ad=(i%4)%2;}}else{ad=i%4;}\n        a += lp[ad];\n        c += mc*vec2(dp[ad],0.12+0.05*float(i>3&&i<18));\n        if(i>15){b=0.272+0.145*float(i/18);}else b=rp[i/4];\n        if(i!=14&&i!=15){\n            float td = lines3(uv +vec2(a,b), c, px, 0.0075001, 0.0012, mtd[i]);\n            d = max(d,td);\n        }\n    }\n    mtd[14]=vec2(0.);mtd[15]=vec2(0.);\n    \n    col = mix(col, red, 0.65*mtd[4].x*(1.-mtd[5].x)*(1.-mtd[8].x)*(1.-mtd[0].x));\n    col = mix(col, red, 0.75*mtd[4].y*(mtd[5].y)*(1.-mtd[0].x)*(1.-mtd[8].x));\n    col = mix(col, red, 0.75*mtd[5].y*(mtd[6].y)*(1.-mtd[1].x)*(1.-mtd[9].x));\n    col = mix(col, red, 0.75*mtd[6].y*(mtd[7].y)*(1.-mtd[2].x)*(1.-mtd[10].x));\n    \n    col = mix(col, yellowl, 0.65*mtd[8].x*(1.-mtd[9].x)*(1.-mtd[4].x)*(1.-mtd[12].x));\n    col = mix(col, yellowl, 0.75*mtd[8].y*(mtd[9].y)*(1.-mtd[4].x)*(1.-mtd[12].x));\n    col = mix(col, yellowl, 0.75*mtd[9].y*(mtd[10].y)*(1.-mtd[5].x)*(1.-mtd[13].x));\n    col = mix(col, yellowl, 0.75*mtd[10].y*(mtd[11].y)*(1.-mtd[6].x)*(1.-mtd[13].x));\n    \n    col = mix(col, green, 0.65*mtd[12].x*(1.-mtd[13].x)*(1.-mtd[8].x)*(1.-mtd[16].x));\n    col = mix(col, green, mtd[12].y*(mtd[13].y)*(1.-mtd[8].x)*(1.-mtd[16].x));\n    col = mix(col, whitel, d*0.78);\n    \n\n    vec3 dwby = vec3(0.);\n\n    vec4 ml = vec4(0.77,0.415,-0.090,-0.60);\n    mat4 ma = mat4(vec4(0.095,0.2,0.23,-0.28),vec4(-0.455,-0.43,-0.53,0.22),vec4(-0.47,-0.35,0.242,0.238),vec4(0.));\n    ivec2[] mm = ivec2[](ivec2(0,7),ivec2(7,8),ivec2(8,16),ivec2(16,17),ivec2(17,18),ivec2(18,19),ivec2(19,20),\n                         ivec2(25,26),ivec2(26,28),ivec2(28,29),ivec2(29,30),ivec2(30,41));\n    \n    mat4 mr1 = mat4(vec4(-0.383-0.025,-0.383+0.025,-0.237-0.025,-0.068-0.025),vec4(0.1025-0.025,0.272,0.417-0.01,-0.383-0.035),\n    vec4(-0.237-0.05,-0.068-0.035,0.1025-0.05,0.1025+0.02),vec4(0.272-0.025,-0.237+0.045,0.1025+0.055,0.1025-0.015));\n    mat4 mr2 = mat4(vec4(0.1025+0.02,0.1025+0.055,0.1025-0.05,0.1025-0.015),vec4(0.417-0.025,0.417+0.01,0.417+0.045,-0.237-0.015),\n    vec4(-0.068+0.005,0.272+0.015,0.272-0.05,0.272-0.015),vec4(0.272+0.045,-0.383+0.005,-0.383-0.035,-0.068-0.035));\n    mat4 mr3 = mat4(vec4(-0.237-0.015,-0.068+0.005,-0.383+0.015,-0.068-0.035),vec4(-0.383-0.035,-0.237-0.015,-0.237+0.025,-0.383+0.035),\n    vec4(-0.068+0.005,0.,0.,0.),vec4(0.));\n    \n    float[] sca = float[](0.046,0.046,0.04,0.034,0.034,0.034,0.034,0.046,0.046,0.046,0.042,0.042,0.042,0.026,0.027,0.027,0.027,0.027,\n    0.027,0.027,0.028,0.028,0.028,0.028,0.028,0.028,0.028,0.028,0.028,0.028,0.046,0.046,0.04,0.028,0.028,0.046,0.042,0.04,0.028,0.028,0.028);\n    \n    ivec2[] rg = ivec2[](ivec2(0,3),ivec2(0,4),ivec2(4,11),ivec2(8,15),ivec2(12,20),ivec2(16,22),ivec2(18,27),\n            ivec2(1,5),ivec2(5,12),ivec2(9,16),ivec2(13,21),ivec2(13,33),ivec2(17,23),ivec2(5,31),\n            ivec2(13,39),ivec2(13,35),ivec2(13,38),ivec2(13,40),ivec2(13,34),ivec2(13,36),\n            ivec2(19,28),ivec2(19,29),ivec2(19,30),ivec2(5,13),ivec2(9,17),ivec2(17,24),\n            ivec2(17,25),ivec2(17,26),ivec2(17,37),ivec2(1,8),ivec2(2,6),ivec2(10,12),\n            ivec2(6,14),ivec2(10,18),ivec2(2,9),ivec2(11,12),ivec2(3,7),ivec2(7,14),ivec2(7,32),ivec2(3,10),ivec2(11,19));\n    \n    \n    const int gr = 42-1;\n    //for(int i=0;i<clamp(gr+ANGLE_loops,0,gr);i++)\n    //for(int i=ran.x;i<clamp(ran.y+ANGLE_loops,0,gr);i++)\n    int i=clamp(ran,0,gr);\n    // to see FIX_branch works - comment above and\n    // for(int i=0;i<clamp(gr+ANGLE_loops,0,gr);i++)\n    // on ANGLE it will always drop fps even after 40-init frames when it should stop \n    {\n        sc = sca[i];\n        vec2 to = vec2(0.);\n        if(i<7)to.x=ml.x;else if(i<30)to.x=ml.y;else if(i<35)to.x=ml.z;else to.x=ml.w;\n        if(i>=20&&i<25){to.x+=ma[0][2];}\n        else{ int fj = -1;\n            for(int j=0;j<mm.length()+ANGLE_loops;j++){if(fj<0&&i>=mm[j][0]&&i<mm[j][1])fj=j;}\n            if(fj>=0){to.x+=ma[fj/4][fj%4];}\n        }\n        if(i<16)to.y=mr1[(i%16)/4][(i%16)%4];else if(i<16*2)to.y=mr2[(i%16)/4][(i%16)%4];else if(i<16*3)to.y=mr3[(i%16)/4][(i%16)%4];\n        d = print_gt(((uv+to)/sc)+0.5, sc*(1.+4.*float(sc<0.38)), mtd[rg[i].x],rg[i].y);\n        if(i==0||i==15||i==18||i==19||i==28)dwby.y = max(dwby.y,d);\n        else if(i==1||i==11||i==13||i==38)dwby.z = max(dwby.z,d); else dwby.x = max(dwby.x,d);\n        \n    }\n    \n    col = mix(col, yellow, dwby.z);\n    col = mix(col, bluel, dwby.y);\n    col = mix(col, whitel, dwby.x*(0.95+0.05*mtd[4].x));\n    \n    return col;\n    \n}\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}