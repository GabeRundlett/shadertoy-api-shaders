{
    "Shader": {
        "info": {
            "date": "1463145446",
            "description": "music: [url=https://www.youtube.com/watch?v=JyBgQjiPlMw]danaga - cafea alba[/url]\n\neffect inspired by the album art. work in progress?",
            "flags": 64,
            "hasliked": 0,
            "id": "MdtXDf",
            "likes": 12,
            "name": "danaga's wingman",
            "published": 3,
            "tags": [
                "visualization",
                "danaga"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 740
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718\n#define saturate(x) clamp(x, 0., 1.)\n\nfloat hash(vec2 uv) {\n    float f = fract(cos(sin(dot(uv, vec2(.009123898, .00231233))) * 48.512353) * 1111.5452313);\n    return f;\n}\n\nfloat noise(vec2 uv) {\n    vec2 fuv = floor(uv);\n    vec4 cell = vec4(\n        hash(fuv + vec2(0, 0)),\n        hash(fuv + vec2(0, 1)),\n        hash(fuv + vec2(1, 0)),\n        hash(fuv + vec2(1, 1))\n    );\n    vec2 axis = mix(cell.xz, cell.yw, fract(uv.y));\n    return mix(axis.x, axis.y, fract(uv.x));\n}\n\nfloat fbm(vec2 uv) {\n    float f = 0.;\n    float r = 1.;\n    for (int i = 0; i < 8; ++i) {\n        f += noise((uv += .25) * r) / (r *= 2.);\n    }\n    return f / (1. - 1. / r);\n}\n\nvec4 blend(vec4 c1, vec4 c2)\n{\n    return vec4(mix(c1.rgb, c2.rgb, c2.a), max(c1.a, c2.a)); \n}\n\nfloat mask(vec2 uv) {\n    uv *= .9 - fbm(-uv * 2. + vec2(0, -iTime)) * (texture(iChannel0, vec2(.25, .25)).x) * .5;\n    return length(uv) - .55;\n}\n\nvec4 spiral(vec2 uv) {\n    if (mask(uv) > 0.) return vec4(0);\n    float angel = atan(uv.x, uv.y) / TAU + .5 - iTime / 10. - texture(iChannel0, vec2(.1, .25)).x * .1;\n    angel -= (uv.y + uv.x) / 20.;\n    float dist = length(uv);\n    float _smooth = dist * 15.;\n    float alpha = saturate(sin(angel * 17. * TAU + sin(dist * 6. + 2.) * 2.) * _smooth);\n    float base = .64 - texture(iChannel0, vec2(.9, .25)).x / 5.;\n    float scratch = smoothstep(base, base + .01, fbm((uv - vec2(0, -iTime * .2)) * vec2(30., 2.)));\n    alpha = saturate(alpha - scratch);\n    alpha = saturate(alpha - smoothstep(-.1, .0, -dist));\n    vec3 color = vec3(.04, .27, .86) + noise(uv * 4.) * .3;\n\treturn vec4(color, alpha);\n}\n\nvec4 circle(vec2 uv) {\n    float width = .05;\n    float m = mask(uv);\n    float alpha = smoothstep(-width, -width + .005, m)* smoothstep(-width - .005, -width, -m);\n    vec3 color = vec3(.16, .21, .5) + (noise(uv * 03.) - .65) * .1;\n    return vec4(color, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\tfragColor = blend(vec4(.86, .86, .79, 1.), spiral(uv));\n    fragColor = blend(fragColor, circle(uv));\n    uv *= 1000.;\n    float amount = .1;\n    fragColor.r += (hash(uv) - .5) * amount;\n    uv += 100.;\n    fragColor.g += (hash(uv) - .5) * amount;\n    uv += 100.;\n    fragColor.b += (hash(uv) - .5) * amount;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 24444,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/danaga/08-danaga-cafea-alba"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}