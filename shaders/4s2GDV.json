{
    "Shader": {
        "info": {
            "date": "1393716600",
            "description": "Testing some glass material rendering. You can rotate the object with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "4s2GDV",
            "likes": 96,
            "name": "Empty Glass",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "refraction",
                "glass",
                "transparent"
            ],
            "usePreview": 0,
            "username": "mu6k",
            "viewed": 7946
        },
        "renderpass": [
            {
                "code": "/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\tTesting some glass material rendering.\n\tYou can rotate the object with the mouse.\n\n*/\n\n//functions that build rotation matrixes\nmat2 rotate_2D(float a){float sa = sin(a); float ca = cos(a); return mat2(ca,sa,-sa,ca);}\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\n\n\n//2D texture based 3 component 1D, 2D, 3D noise\nvec3 noise(float p){return texture(iChannel0,vec2(p/iChannelResolution[0].x,.0)).xyz;}\nvec3 noise(vec2 p){return texture(iChannel0,p/iChannelResolution[0].xy).xyz;}\nvec3 noise(vec3 p){float m = mod(p.z,1.0);float s = p.z-m; float sprev = s-1.0;if (mod(s,2.0)==1.0) { s--; sprev++; m = 1.0-m; };return mix(texture(iChannel0,p.xy/iChannelResolution[0].xy+noise(sprev).yz).xyz,texture(iChannel0,p.xy/iChannelResolution[0].xy+noise(s).yz).xyz,m);}\n\nvec3 noise(float p, float lod){return texture(iChannel0,vec2(p/iChannelResolution[0].x,.0),lod).xyz;}\nvec3 noise(vec2 p, float lod){return texture(iChannel0,p/iChannelResolution[0].xy,lod).xyz;}\nvec3 noise(vec3 p, float lod){float m = mod(p.z,1.0);float s = p.z-m; float sprev = s-1.0;if (mod(s,2.0)==1.0) { s--; sprev++; m = 1.0-m; };return mix(texture(iChannel0,p.xy/iChannelResolution[0].xy+noise(sprev,lod).yz,lod).xyz,texture(iChannel0,p.xy/iChannelResolution[0].xy+noise(s,lod).yz,lod).xyz,m);}\n\n\n#define t iTime\n\nfloat df_obj(vec3 p)\n{\n\t\n\tfloat a = (length(p.xz)-1.0-p.y*.15)*.85;\n\ta = max(abs(p.y)-1.0,a);\n\tfloat a2 = (length(p.xz)-0.9-p.y*.15)*.85;\n\ta = max(a,-max(-.8-p.y,a2));\n\ta = max(a,-length(p+vec3(.0,4.0,.0))+3.09);\n\ta = a;\n\t\n\tvec3 p2 = p; p2.xz*=(1.0-p.y*.15);\n\tfloat angle = atan(p2.x,p2.z);\n\tfloat mag = length(p2.xz);\n\tangle = mod(angle,3.14159*.125)-3.14159*.125*.5;\n\tp2.xz = vec2(cos(angle),sin(angle))*mag;\n\ta = max(a,(-length(p2+vec3(-7.0,0.0,0.0))+6.05)*.85);\n\t\n\treturn a;\n}\n\n\nfloat df(vec3 p)\n{\n\treturn df_obj(p);\n}\n\nvec3 nf(vec3 p)\n{\n\tfloat e = .02;\n\tfloat dfp = df(p);\n\treturn vec3(\n\t\t(dfp+df(p+vec3(e,.0,.0)))/e,\n\t\t(dfp+df(p+vec3(.0,e,.0)))/e,\n\t\t(dfp+df(p+vec3(.0,.0,e)))/e);\n}\n\nvec3 tex(vec3 d)\n{\n\treturn pow(texture(iChannel1,d).xyz*1.4,vec3(1.4));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tvec2 mouse = iMouse.xy/ iResolution.xy*2.0-1.0;\n\tmouse.x *= iResolution.x/iResolution.y*4.0;\n\t\n\tmat3 rotmat = rotate_x(mouse.y*4.0+sin(t*.1)*.3+4.2)*rotate_y(mouse.x+t*.125-1.0/t+sin(t*.35));\n\t\n\tvec3 pos = vec3(.0,.0,-5.0)*rotmat ;\n\tvec3 dir = normalize(vec3(uv,2.5))*rotmat;\n\t\n\tvec3 light_dir = normalize(vec3(.4,.5,.6));\n\tvec3 light_color = vec3(.6,.5,.4);\n\t\n\tfloat dist;\n\t\n\tfor (int i=0; i<80; i++)\n\t{\n\t\tdist = df(pos);\n\t\tpos+=dir*dist;\n\t\tif (dist<.00001) break;\n\t}\n\n\tvec3 color = vec3(1.0);\n\tvec3 n = nf(pos);\n\t\n\tvec3 dfdxn = dFdx(n);\n\tvec3 dfdyn = dFdy(n);\n\t\n\tfloat lines = length((abs(dfdxn)+abs(dfdyn))*3.0);\n\tlines = lines*3.75;\n\tlines = lines-1.0;\n\tlines = clamp(lines,.0,1.0);\n\tif (lines>1.0)lines = 1.0;\n\t\n\tcolor = tex(dir).xyz;\n\t\n\tif (length(pos)>5.0)\n\t{\n\t\t//color = vec3(1.0);\n\t}\n\telse\n\t{\n\t\tfloat oa = 0.5;//df(pos+n)*.5+.5;\n\t\tfloat od = 1.0;\n\n\t\tfloat ior = .8;\n\t\t\n\t\t//oa -= mod(oa,.33);\n\t\t\n\t\tvec3 drefl = reflect(dir,n);\n\t\tvec3 drefr = refract(dir,n,ior);\n\t\t\n\t\tfloat diffuse = max(.0,dot(n,light_dir)*.8+.2)*od*oa*1.5;\n\t\tfloat fresnel1 = dot(-dir,n);\n\t\t\n\t\t\n\t\tvec3 pos2 = pos+drefr*.05;\n\t\tfor (int i=0; i<40; i++)\n\t\t{\n\t\t\tfloat dist = df(pos2);\n\t\t\tpos2+=drefr*-dist;\n\t\t\tif (dist>-.0001) break;\n\t\t}\n\t\tvec3 n2 = nf(pos2);\n\t\tvec3 drefl2 = reflect(drefr,-n2);\n\t\tvec3 drefr2 = refract(drefr,-n2,ior);\n\t\tfloat fresnel2 = dot(-drefr,n2);\n\t\t\n\t\tvec3 pos3 = pos2+drefr2*.02;\n\t\tfor (int i=0; i<70; i++)\n\t\t{\n\t\t\tfloat dist = df(pos3);\n\t\t\tpos3+=drefr * dist;\n\t\t\tif (dist<.0001) break;\n\t\t}\n\t\tvec3 n3 = nf(pos3);\n\t\tvec3 drefl3 = reflect(drefr2,n3);\n\t\tvec3 drefr3 = refract(drefr2,n3,ior);\n\t\tfloat fresnel3 = dot(-drefr2,n3);\n\t\t\n\t\tvec3 pos4 = pos3+drefr3*.02;\n\t\tfor (int i=0; i<40; i++)\n\t\t{\n\t\t\tfloat dist = df(pos4);\n\t\t\tpos4+=drefr*-dist;\n\t\t\tif (dist>-.0001) break;\n\t\t}\n\t\tvec3 n4 = nf(pos4);\n\t\tvec3 drefl4 = normalize(reflect(drefr3,-n4));\n\t\tvec3 drefr4 = normalize(refract(drefr3,-n4,ior));\n\t\tfloat fresnel4 = dot(-drefr3,n4);\n\t\t\n\t\t\n\t\tif (df(pos4)<0.1)\n\t\t{\n\t\t\tcolor.r = tex(normalize(refract(drefr3,-n4,ior*.99))).r*.7;\n\t\t\tcolor.g = tex(normalize(refract(drefr3,-n4,ior*1.0))).g*.7;\n\t\t\tcolor.b = tex(normalize(refract(drefr3,-n4,ior*1.01))).b*.7;\n\t\t\t//color = mix(color,texture(iChannel1,drefl3).xyz,1.0-fresnel3);\n\t\t\tcolor += vec3(.01);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcolor.r = tex(normalize(refract(drefr,-n2,ior*.99))).r;\n\t\t\tcolor.g = tex(normalize(refract(drefr,-n2,ior*1.0))).g;\n\t\t\tcolor.b = tex(normalize(refract(drefr,-n2,ior*1.01))).b;\n\t\t}\n\t\t\n\t\tcolor = mix(texture(iChannel1,drefl2).xyz,color,pow(-fresnel2,.2));\n\t\tcolor = mix(tex(drefl).xyz,color*.7,pow(fresnel1,.5));\n\t\tcolor += vec3(.01);\n\t\t//color = n2;\n\t}\n\t\n\tvec3 color0 = mix(color,vec3(.0),lines);\n\tvec3 color1 = n*.4+.4;\n\tvec3 color2 = dfdxn+dfdyn;\n\tvec3 color3 = vec3(lines);\n\t\n\tfloat mt = mod(t,32.0);\n\tfloat mti = mod(t,1.0);\n\t\n\tcolor += noise(vec3(fragCoord.xy,t*60.0))*0.01;\n\t\n\tfragColor = vec4(pow(color,vec3(.5)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}