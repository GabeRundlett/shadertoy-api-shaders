{
    "Shader": {
        "info": {
            "date": "1635530597",
            "description": "This is a learnning of raymarching support by:\nhttps://www.youtube.com/watch?v=Vmb7VGBVZJA\nhttps://www.shadertoy.com/view/Xds3zN",
            "flags": 0,
            "hasliked": 0,
            "id": "ssKXWt",
            "likes": 1,
            "name": "Raymarching_Trainning",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "AYAYA2",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat dot2( in vec2 v ) { return dot(v,v); }// 自点乘\nfloat dot2( in vec3 v ) { return dot(v,v); }// 三维\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdPlane(vec3 p){\n    return p.y;\n}\n\nfloat dSphere(vec3 p,vec3 o,float radius){\n    return length(p-o.xyz)-radius;\n}\n\nfloat dBox(vec3 p,vec3 s){\n    return length(max(abs(p)-s,0.));\n}\n\nfloat sdCapsule(vec3 p,vec3 a,vec3 b,float radius){\n    vec3 ap=p-a;\n    vec3 ab=b-a;\n    \n    float t=dot(ap,ab)/dot(ab,ab);\n    t=clamp(t,0.,1.);\n    \n    vec3 c=a+t*ab;\n    return length(p-c)-radius;\n}\n\n// 方框盒子 b-方框三维、e-方框粗细\nfloat sdBoundingBox(vec3 p,vec3 b,float e){\n    p=abs(p)-b;\n    vec3 q = abs(p+e)-e;\n    \n    return min(min(\n        length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n        length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n        length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n// 椭球体\nfloat sdEllipsoid(vec3 p,vec3 radius){\n    float k0=length(p/radius);\n    float k1=length(p/(radius*radius));\n    return k0*(k0-1.)/k1;\n}\n\n\n// 圆柱体，只能渲染竖着的，弃用\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// 圆柱体\nfloat sdCylinder(vec3 p,vec3 a,vec3 b,float radius){\n    vec3 ap=p-a;\n    vec3 ab=b-a;\n    \n    float t=dot(ap,ab)/dot(ab,ab);\n    \n    vec3 c=a+t*ab;\n    \n    float x= length(p-c)-radius;\n    float y=(abs(t-.5)-.5)*length(ab);\n    float e=length(max(vec2(x,y),0.));\n    float i=min(max(x,y),0.);// 消除步进过多光线进入柱体内的错误\n    \n    return e+i;\n}\n\n// 甜甜圈\nfloat sdTours(vec3 p,vec2 radius){\n    float x=length(p.xz)-radius.x;\n    return length(vec2(x,p.y))-radius.y;\n}\n\n// 缺口甜甜圈 sc-缺口弧度,缺口半径 ra-外圈半径 rb-体半径（粗细）\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n// 六边形？ h-半径,厚度\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// 八边形 r-半径 h-厚度\nfloat sdOctogonPrism( in vec3 p, in float r, float h )\n{\n  const vec3 k = vec3(-0.9238795325,   // sqrt(2+sqrt(2))/2 \n                       0.3826834323,   // sqrt(2-sqrt(2))/2\n                       0.4142135623 ); // sqrt(2)-1 \n  // reflections\n  p = abs(p);\n  p.xy -= 2.0*min(dot(vec2( k.x,k.y),p.xy),0.0)*vec2( k.x,k.y);\n  p.xy -= 2.0*min(dot(vec2(-k.x,k.y),p.xy),0.0)*vec2(-k.x,k.y);\n  // polygon side\n  p.xy -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  vec2 d = vec2( length(p.xy)*sign(p.y), p.z-h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// 三角椭锥体 r1-下盘半径 r2-上盘半径 h-高度,弃用\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\n// 椭锥体 a,b-分别为上下球心坐标（可以控制偏斜和高度h） r1-下盘半径 r2-上盘半径\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\n// 三角柱体 h-大小，高度\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    const float k = sqrt(3.0);\n    h.x *= 0.5*k;\n    p.xy /= h.x;\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p.xy=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    float d1 = length(p.xy)*sign(-p.y)*h.x;\n    float d2 = abs(p.z)-h.y;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// 三角锥 c-半径？ h-高度\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n    vec2 q = h*vec2(c.x,-c.y)/c.y;\n    vec2 w = vec2( length(p.xz), p.y );\n    \n\tvec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\n// 圆柱锥体 无控制点版本，弃用\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n// 圆柱锥体 a,b-控制点\nfloat sdCappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\n// 球底圆锥体 ra-底部曲面半径\n// c is the sin/cos of the desired cone angle\nfloat sdSolidAngle(vec3 pos, vec2 c, float ra)\n{\n    vec2 p = vec2( length(pos.xz), pos.y );\n    float l = length(p) - ra;\n\tfloat m = length(p - c*clamp(dot(p,c),0.0,ra) );\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\n// 八面体 s-边长\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n\n    // exact distance\n    #if 0\n    vec3 o = min(3.0*p - m, 0.0);\n    o = max(6.0*p - m*2.0 - o*3.0 + (o.x+o.y+o.z), 0.0);\n    return length(p - s*o/(o.x+o.y+o.z));\n    #endif\n    \n    // exact distance\n    #if 1\n \tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n    #endif\n    \n    // bound, not exact\n    #if 0\n\treturn m*0.57735027;\n    #endif\n}\n\n// 四棱锥金字塔\nfloat sdPyramid( in vec3 p, in float h )\n{\n    float m2 = h*h + 0.25;\n    \n    // symmetry\n    p.xz = abs(p.xz);\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n\t\n    // project into face plane (2D)\n    vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n    float s = max(-q.x,0.0);\n    float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n    float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n\tfloat b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n    float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n    // recover 3D and scale, and add sign\n    return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));;\n}\n\n// \n// la,lb=semi axis, h=height, ra=corner\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// 距离长遍历\nfloat GetDist(vec3 p)\n{\n    vec4 s=vec4(0,1,6,1);// A sphere's pos.xyzr\n    \n    float planeDist=sdPlane(p);// ground\n    \n    // 遍历形式所有物体 物体摆放 从远至近-行\n    float bd=dBox(p-vec3(-6,.75,6),vec3(.6));\n    float td=sdTours(p-vec3(-3,.75,6),vec2(.75,0.3));\n    float cd=sdCapsule(p,vec3(0,.75,6),vec3(1,2,6),.4);\n    float sd=dSphere(p,vec3(3,.75,6),.75);\n    float bbd=sdBoundingBox(p-vec3(6,.75,6),vec3(0.6,0.6,0.6),0.05);  \n    \n    float cyld=sdCylinder(p-vec3(-1,.75,0),vec3(0,.3,4),vec3(2,.3,5),.2);\n    float ed=sdEllipsoid(p-vec3(-5.5,.75,4),vec3(0.2,0.15,0.25));\n    float ctd=sdCappedTorus(p-vec3(-3,.75,4),vec2(0.866025,-0.5),0.5, 0.1);\n    float hpd=sdHexPrism(p-vec3(3,0.75,4.4),vec2(0.6,0.1));\n    float opd=sdOctogonPrism(p-vec3(6,0.75,4.3),0.6,0.1);\n    \n    //float rcd0=sdRoundCone(p-vec3(-6,0.75,3.5),0.2,0.1,0.5);\n    float rcd=sdRoundCone(p-vec3(-6,0.75,3.5), vec3(0.1,0.0,0.0), vec3(-0.3,0.4,0.1), 0.15, 0.05);\n    float tpd=sdTriPrism(p-vec3(-3.3,0.75,3.4),vec2(0.5,0.05));\n    float coned=sdCone(p-vec3(5.3,1.1,3.4),vec2(0.3,0.8),0.85);\n    float ccd=sdCappedCone(p-vec3(0.0,0.75,3.5),vec3(0.1,0.0,0.0),vec3(-0.3,0.40,0.1),0.3,0.15);\n    float sad=sdSolidAngle(p-vec3(3,0.05,3.5), vec2(1.5,2)/2.5, 1.);\n    \n    float odd=sdOctahedron(p-vec3(-3.0,0.5,2),0.45);// 四棱锥因为正交投影的问题很难看\n    float pd=sdPyramid(p-vec3(2,0.5,2.0), 0.9);\n    float rbd= sdRhombus(p-vec3(-0.2,0.34,2.0),0.15,0.25,0.04,0.08);\n    \n    float d=min(cd,planeDist);\n    d=min(d,sd);\n    d=min(d,td);\n    d=min(d,bd);\n    d=min(d,cyld);\n    d=min(d,bbd);\n    d=min(d,ed);\n    d=min(d,ctd);\n    d=min(d,hpd);\n    d=min(d,opd);\n    d=min(d,rcd);\n    d=min(d,tpd);\n    d=min(d,coned);\n    d=min(d,ccd);\n    d=min(d,sad);\n    d=min(d,odd);\n    d=min(d,pd);\n    d=min(d,rbd);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro,vec3 rd)\n{\n    float dO=0.;\n    \n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p=ro+rd*dO;\n        float dS=GetDist(p);\n        dO+=dS;\n        if(dO>MAX_DIST||dS<SURF_DIST)break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d=GetDist(p);\n    vec2 e=vec2(.01,0);\n    \n    vec3 n=d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos=vec3(0,5,6);// a light's pos.xyz\n    lightPos.xz+=vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l =normalize(lightPos-p);\n    vec3 n=GetNormal(p);\n    \n    float dif=clamp(dot(n,l),0.,1.);\n    float d=RayMarch(p+n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p)) dif*=.1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    vec3 ro=vec3(0,3,0);// cameraPos\n    vec3 rd=normalize(vec3(uv.x,uv.y-.3,.35));// cameraDir\n    \n    float d=RayMarch(ro,rd);\n    \n    vec3 p=ro+rd*d;\n    float dif=GetLight(p);\n    col=vec3(dif);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}