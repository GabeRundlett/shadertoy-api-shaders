{
    "Shader": {
        "info": {
            "date": "1581373785",
            "description": "It's a tunnel of a couch",
            "flags": 0,
            "hasliked": 0,
            "id": "ttdXzj",
            "likes": 19,
            "name": "Day 53 - Couch Tunnel",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "#define mx (iTime*1.4 + 200.*iMouse.x/iResolution.x)\n\n#define dmin(a, b) a.x < b.x ? a : b\n\n\n// PBR Equation from https://learnopengl.com/PBR/Theory\n\nvec3 path(float z){\n    z *= 0.4;\n\treturn vec3(\n    \tsin(z),\n    \tcos(z),\n    \t0.\n    );\n}\n\nfloat random(vec2 u){\n\treturn fract(sin(u.y*4125.1 + u.x *125.625)*225.5235);\n} \n\nfloat noise(vec2 p) {\n\tvec2 i = ceil(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3. - 2. * f);\n   \tfloat a = random(i);\n    float b = random(i + vec2(1., 0.));\n    float c = random(i + vec2(0., 1.));\n    float d = random(i + vec2(1., 1.));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n}\n\nfloat r31(vec3 u){\n\treturn fract(sin(u.y*25.1 + u.x *125.125 + u.z*525.5215)*115.125235);\n} \nfloat valueNoise(vec3 uv){\n    vec3 id = floor(uv);\n    vec3 fd = fract(uv);\n    fd = smoothstep(0.,1., fd);\n    \n    float ibl = r31(id + vec3(0,-1,0));\n    float ibr = r31(id + vec3(1,-1,0));\n    float itl = r31(id + vec3(0));\n    float itr = r31(id + vec3(1,0,0));\n    \n    \n    float jbl = r31(id + vec3(0,-1,1));\n    float jbr = r31(id + vec3(1,-1,1));\n    float jtl = r31(id + vec3(0,0, 1));\n    float jtr = r31(id + vec3(1,0, 1));\n    \n    \n    float ibot = mix(ibl, ibr, fd.x); \n    float iup = mix(itl, itr, fd.x);\n    float jbot = mix(jbl, jbr, fd.x);\n    float jup = mix(jtl, jtr, fd.x);\n    \n    float i = mix(ibot, iup, fd.y);\n    float j = mix(jbot, jup, fd.y);\n    \n    return mix(i, j, fd.z); \n}\n\nfloat fbm(vec3 p){\n\n    float n = 0.;\n    \n    float f = valueNoise(p); \n    \n    float q = valueNoise(p*1.4);\n    float i = valueNoise(p*5.4 + q*2.);\n    float z = valueNoise(p*f*1.4);\n    \n    n += f*1.8 + q*0.5;\n    //n += f*1.8 + q*0.5 + z*0.5 + i*0.3;\n    \n\treturn n;\n}\n\nfloat bumps;\n#define tunnW 1.2\n#define pmod(p, z) mod(p,z) - 0.5*z\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\t\n    p -= path(p.z);\n    \n    vec3 pC = vec3(atan(p.y, p.x),length(p.xy),p.z);\n    \n    #define modDist vec2(1.,3.14/3.)\n    \n    vec3 pCO = pC;\n    vec2 id = floor(pC.zx/modDist);\n    pC.z = pmod(pC.z, modDist.x);\n    pC.x = pmod(pC.x, modDist.y);\n    pC.y -= tunnW;\n    \n    float dTunn = -length(p.xy)+tunnW;\n    \n    vec2 lCoords = vec2(atan(pC.z, pC.x), length(pC.zx));\n    float lA =  exp(-length(pC.zx)*10.);\n    \n    \n    dTunn += smoothstep(0.09,1.,exp(-length(pC.zx)*5.))*0.1;\n    //dTunn += exp(-length(pC.zx)*5.)*0.1;\n\n    \n    //dTunn += exp(-length(pC.x)*10.)*0.1*exp(-length(pC.z)*1.);\n    dTunn += exp(-length(pC.x)*10.)*0.1*smoothstep(0.0,0.6,exp(-length(pC.z)*1.));\n    \n    dTunn += exp(-length(pC.z)*10.)*0.1*exp(-length(pC.x)*6.);\n    \n    dTunn += sin(lCoords.x*10.)*0.01*smoothstep(0.1,1.,exp(-length(pC.xz)*6.));\n    \n    \n    dTunn -= bumps = fbm(pCO.xyz*80.)*0.0006;\n    d = dmin(d, vec2(dTunn,1.));\n    \n    pC.y -= 0.24;\n    d = dmin(d, vec2(length(pC.xyz)- 0.05,2.));\n    \n    //p.z -= 1.;\n    //d = dmin(d, vec2(length(p)-0.5,1.));\n    \n    //d = dmin(d, vec2(length(p)-1.,1.));\n    d.x *= 0.8;\n    return d;\n}\n\nvec3 glow = vec3(0);\nvec2 march(vec3 ro,vec3 rd,inout vec3 p,inout float t,inout bool hit){\n\tvec2 d = vec2(10e6);\n\tp = ro;\n    hit = false;\n    t = 0.;\n    for(int i = 0; i < 140; i++){\n    \td = map(p);\n    \tglow += exp(-d.x*2.);\n        if(d.x < 0.001){\n            hit = true;\n            break;\n        }\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    return d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross(dir, right));\n\treturn normalize(dir + right*uv.x + up*uv.y);\n}\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.0001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. + dot(uv, uv)*0.8;\n    \n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    ro.z += mx;\n    ro += path(ro.z);\n    vec3 lookAt = vec3(0); \n    lookAt.z = ro.z + 2.;\n    lookAt += path(lookAt.z);\n    \n    vec3 rd = getRd(ro, lookAt, uv);\n    vec3 p; float t; bool hit;\n    \n    vec2 d = march(ro, rd, p, t, hit);\n    \n    if (hit) {\n    \tvec3 n = getNormal(p);\n        vec3 l = normalize(vec3(1));\n    \tvec3 h = normalize(l - rd);\n        \n        float diff = max(dot(n, l),0.);\n        float spec = pow(max(dot(n, h),0.), 20.);\n        float fres = pow(1. - max(dot(n,-rd),0.), 5.);\n        \n\t\t//vec3 lightPos = ro.z +\n        float ppp = sin(iTime)*1.;\n        vec3 lightPos = vec3(0,0,ro.z + 4. + ppp) + path(ro.z + 4. + ppp) + vec3(0. + sin(iTime)*0.1,0,0.);\n        //lightPos = vec3(0,0,0);\n        vec3 lightCol = vec3(1.,0.9,0.9);\n        //vec3 lightCol = vec3(0.5);\n\n        vec3 L = normalize(lightPos - p);\n        vec3 H = normalize(L - rd);\n\n\n        int id = int(d.y);\n        float METALNESS = 0.31;\n        float ROUGHNESS = 0.34;\n        \n        ROUGHNESS += bumps*50.;\n        //vec3 albedo = vec3(0.95,0.001,0.06)*0.4;\n        //vec3 albedo = vec3(0.5,0.001,0.01)*2.;\n        vec3 albedo = vec3(0.06,0.11,0.8)*0.;\n        if(d.y == 2.){\n        \talbedo = vec3(0.02);\n        }\n        //albedo = vec3(1);\n        vec3 N = getNormal(p);\n        vec3 V = normalize(ro - p);\n        //vec3 V = -rd;\n\n        vec3 F0 = vec3(0.43); \n        F0 = mix(F0, albedo, METALNESS);\n\n\n        // calculate per-light radiance\n        float distL    = length(lightPos - p)*1.;\n        float attenuation = 1. / (distL * distL);\n        //float attenuation = dist*0.02;\n        //attenuation = 1.;\n        vec3 radiance     = lightCol * attenuation;        \n\n        // cook-torrance brdf\n        float NDF = DistributionGGX(N, H, ROUGHNESS);   \n        float G   = GeometrySmith(N, V, L, ROUGHNESS);      \n        vec3 F    = fresnelSchlick(clamp(dot(N, V), 0.0, 1.0), F0);     \n\n        vec3 kS = F;\n        vec3 kD = vec3(1.0) - kS;\n        kD *= 1.0 - METALNESS;\t  \n\n        vec3 numerator    = NDF * G * F;\n        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = numerator / max(denominator, 0.001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0); \n        \n\n        col += (kD * albedo / PI + specular) * radiance * NdotL * attenuation; \n//\t\tcol += fres* radiance * NdotL * attenuation*0.1;\n        //col += diff*fres;\n        //col += n*0.1;\n        \n    } else {\n    \t\n    \n    }\n    col *= 5.9;\n    col = pow(col, vec3(0.4545));\n    //col *= 2.4;\n    //col *= 2.;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI acos(-1.)\n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness*roughness;\n    float a2 = a*a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\n    float nom   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / max(denom, 0.001); // prevent divide by zero for roughness=0.0 and NdotH=1.0\n}\n\n\nfloat distributionTerm(float roughness, float ndoth) {\n\tfloat r2 = roughness * roughness;\n\tfloat d\t = (ndoth * r2 - ndoth) * ndoth + 1.0;\n\treturn r2 / (d * d * PI);\n}\n\nfloat D_GGX(float NoH, float roughness)\n{\n\tfloat a = roughness * roughness;\n    float a2 = a * a;\n    float nom = a2;\n    float denom = (NoH * NoH * (a2 - 1.0) + 1.0);\n\tdenom = PI * denom * denom;\n    \n    return nom / denom;\n}\n\n\n// ----------------------------------------------------------------------------\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n// ----------------------------------------------------------------------------\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}