{
    "Shader": {
        "info": {
            "date": "1615831324",
            "description": "I'm not really sure why I made this but here it is.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdsGWn",
            "likes": 13,
            "name": "The Nostalgia Artifact",
            "published": 3,
            "tags": [
                "nostalgia"
            ],
            "usePreview": 0,
            "username": "P_Malin",
            "viewed": 809
        },
        "renderpass": [
            {
                "code": "// The Nostalgia Artifact\n// @P_Malin\n//\n// https://www.shadertoy.com/view/sdsGWn\n//\n// I'm not really sure why I made this but here it is.\n//\n// Based on this article https://intarch.ac.uk/journal/issue45/2/1.html\n\n#define AA 3\n\nint[] lut = int[] (\n0x2b, 0x4b, 0x0d, 0x78, 0xca, 0x60, 0x1d, 0xcd, 0x5b, 0x1e, 0xfe, 0x2c, 0xc0, 0x18, 0xf3, 0x11,\n0xf2, 0x40, 0x1a, 0xb7, 0xca, 0xa0, 0x19, 0x3c, 0x32, 0x9a, 0x40, 0x12, 0x7e, 0xfe, 0x87, 0x28,\n0x0c, 0xcd, 0x5a, 0x1e, 0xc0, 0x7a, 0xb3, 0xc2, 0xc5, 0x1e, 0x3c, 0x18, 0x02, 0xd7, 0xc0, 0x2a,\n0xee, 0x40, 0xeb, 0x2a, 0xea, 0x40, 0x22, 0xa2, 0x40, 0xeb, 0xc0, 0x7e, 0xb7, 0x20, 0x04, 0x23,\n0x23, 0x23, 0x23, 0x23, 0x7a, 0xa3, 0x3c, 0xc2, 0x05, 0x1f, 0x3a, 0xdd, 0x40, 0x3d, 0xca, 0xbe,\n0x1d, 0xc3, 0x05, 0x1f, 0xcd, 0x1c, 0x2b, 0xc0, 0xb7, 0xca, 0x4a, 0x1e, 0x3d, 0x87, 0x5f, 0xfe,\n0x2d, 0x38, 0x02, 0x1e, 0x26, 0xc3, 0xa2, 0x19, 0x11, 0x0a, 0x00, 0xd5, 0x28, 0x17, 0xcd, 0x4f,\n0x1e, 0xeb, 0xe3, 0x28, 0x11, 0xeb, 0xcf, 0x2c, 0xeb, 0x2a, 0xe4, 0x40, 0xeb, 0x28, 0x06, 0xcd,\n0x5a, 0x1e, 0xc2, 0x97, 0x19, 0xeb, 0x7c, 0xb5, 0xca, 0x4a, 0x1e, 0x22, 0xe4, 0x40, 0x32, 0xe1,\n0x40, 0xe1, 0x22, 0xe2, 0x40, 0xc1, 0xc3, 0x33, 0x1a, 0xcd, 0x37, 0x23, 0x7e, 0xfe, 0x2c, 0xcc,\n0x78, 0x1d, 0xfe, 0xca, 0xcc, 0x78, 0x1d, 0x2b, 0xe5, 0xcd, 0x94, 0x09, 0xe1, 0x28, 0x07, 0xd7,\n0xda, 0xc2, 0x1e, 0xc3, 0x5f, 0x1d, 0x16, 0x01, 0xcd, 0x05, 0x1f, 0xb7, 0xc8, 0xd7, 0xfe, 0x95,\n0x20, 0xf6, 0x15, 0x20, 0xf3, 0x18, 0xe8, 0x3e, 0x01, 0x32, 0x9c, 0x40, 0xc3, 0x7c, 0x20, 0xcd,\n0xca, 0x41, 0xfe, 0x23, 0x20, 0x06, 0xcd, 0x84, 0x02, 0x32, 0x9c, 0x40, 0x2b, 0xd7, 0xcc, 0xfe,\n0x20, 0xca, 0x69, 0x21, 0xf6, 0x20, 0xfe, 0x60, 0x20, 0x1b, 0xcd, 0x01, 0x2b, 0xfe, 0x04, 0xd2,\n0x4a, 0x1e, 0xe5, 0x21, 0x00, 0x3c, 0x19, 0x22, 0x20, 0x40, 0x7b, 0xe6, 0x3f, 0x32, 0xa6, 0x40 );\n\nvec2 dimension = vec2(10.0f, 18.0f);\n\n\nvec3 GetColor( int digit, int character, int place )\n{\n    int index = digit * int(dimension.y) + character;\n\n    int code = lut[index] + index;\n        \n    int bit = (3-place) * 2;\n    \n    int colIndex = (code >> bit) & 3;\n        \n    vec3 col = vec3(0);\n    \n    if (colIndex == 0)\n    {\n        col = vec3(9,122,164)/255.0f;\n    }\n    else\n    if (colIndex == 1)\n    {\n        col = vec3(252,68,80)/255.0f;\n    }\n    else\n    if (colIndex == 2)\n    {\n        col = vec3(223,43,142)/255.0f;\n    }\n    else\n    {\n        col = vec3(170,185,6)/255.0f;\n    }\n    \n    return col * col;\n}\n\nfloat GetVignetting( vec2 vUV, float fScale, float fPower, float fStrength )\n{\n\tvec2 vOffset = (vUV - 0.5) * sqrt(2.0) * fScale;\n\t\n\tfloat fDist = max( 0.0, 1.0 - length( vOffset ) );\n    \n\tfloat fShade = 1.0 - pow( fDist, fPower );\n    \n    fShade = 1.0 - fShade * fStrength;\n\n\treturn fShade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = sin(iTime * 0.1) * 0.1;\n    float s = sin(r);\n    float c = cos(r);\n\n    mat2 m = mat2(c,s,-s,c);\n\n    vec3 tot = vec3(0);\n    float count = 0.0f;\n    for( int i=0; i<AA*AA; i++ )\n    {\n        vec2 uv = fragCoord;\n        \n        /*\n        if ( iMouse.z > 0.0f )\n        {\n            uv -= iMouse.xy;\n            uv *= 0.25f;\n            uv += iMouse.xy;\n        }\n        */\n\n        uv.x += float(i / AA) / float(AA+1);\n        uv.y += float(i % AA) / float(AA+1);\n        \n        uv = uv/iResolution.xy;\n\n        float blackShade = 0.05f;\n        vec3 whiteShade = vec3(255,254,233) / 255.0f;\n\n        uv.y = 1.0f - uv.y;\n\n        uv -= 0.5;\n\n        vec2 sheetUV = uv;\n        sheetUV *= 1.2f;\n        sheetUV.x *= iResolution.x / iResolution.y;\n        sheetUV *= m;\n        sheetUV.x *= 4.0f / 2.56;\n        sheetUV += 0.5f;\n\n        sheetUV += texture(iChannel1, sheetUV).r * 0.0005;\n        sheetUV += texture(iChannel1, sheetUV.yx).r * 0.0005;\n\n        sheetUV.x += sheetUV.y * 0.01;\n        sheetUV.y -= sheetUV.x * 0.005;\n\n        vec2 gridUV = sheetUV * vec2(1.25f, 1.18f) - vec2(0.17f, 0.1f);\n\n        vec2 pos = gridUV * dimension; \n\n        ivec2 cellPos = ivec2( floor(pos) );\n\n        int place = int( fract(pos.x) * 4.0 );\n\n        vec3 col = GetColor( cellPos.x, cellPos.y, place );\n        float grain2 = texture( iChannel3, sheetUV * 3.0f ).r;        \n\n        if (fract(pos.x * 4.0f + 0.1f/2.0f)< 0.1f)\n        {\n            col = vec3(0.0f);\n        }\n\n        if ( gridUV.x < 0.0f || gridUV.y < 0.0f || gridUV.x >= 1.0f || gridUV.y >= 1.0f )\n        {\n            col = whiteShade;\n            col = col * col;\n        }\n        \n        vec2 digitUV = pos - vec2(0,-0.22);\n        if (floor(digitUV.y) == -1.0 )\n        {\n            int digit = int(floor(digitUV.x));\n            if ( digit >= 0 && digit < int(floor(dimension.x)) )\n            {\n\n                vec2 charUV = fract( digitUV );\n                charUV = charUV * 1.2f;\n                charUV.x += 0.1 + sin(float(digit)* 10.0f) * 0.05f - float(digit) * 0.04f;\n                charUV.y += -0.02 + sin(float(digit)* 12.0f) * 0.01f;\n\n                int charIndex = digit + 48;\n                charUV.x += float( charIndex % 16 );\n                charUV.y += float( charIndex / 16 );\n\n                charUV = charUV / 16.0f;\n                charUV.y = 1.0f - charUV.y;\n                float d = texture(iChannel0, charUV).w;\n                float t = clamp( (0.5f - d) * 50.0f, 0.0f, 1.0f);\n\n                col = mix( col, vec3(blackShade), t);\n            }\n        }\n\n        vec2 letterUV = pos - vec2(-0.2,0);\n        if (floor(letterUV.x) == -1.0 )\n        {\n            int letter = int(floor(letterUV.y));\n            if ( letter >= 0 && letter < int(floor(dimension.y)) )\n            {\n\n                vec2 charUV = fract( letterUV );\n                charUV = charUV * 1.2f;\n                charUV = charUV - 0.1f;\n                charUV.x += 0.1 + sin(float(letter)* 10.0f) * 0.01f;\n                charUV.y += sin(float(letter)* 12.0f) * 0.05f;\n\n                int charIndex = letter + 65;\n                charUV.x += float( charIndex % 16 );\n                charUV.y += float( charIndex / 16 );\n\n                charUV = charUV / 16.0f;\n                charUV.y = 1.0f - charUV.y;\n                float d = texture(iChannel0, charUV).w;\n                float t = clamp( (0.5f - d) * 50.0f, 0.0f, 1.0f);\n\n                col = mix( col, vec3(blackShade), t);\n            }\n        }\n\n        vec2 linePos = pos + .1 /2.0;\n        vec2 lineIndex = floor(linePos);\n\n        vec2 border = vec2(0.03, 0.02);\n        if ( lineIndex.x == 0.0 || lineIndex.x == dimension.x )\n        {\n            border.y = (.1 /4.0) * 0.1f;\n        }\n        if ( lineIndex.y == 0.0 || lineIndex.y == dimension.y )\n        {\n            border.x = (.1 /4.0) * 0.1f;\n        }\n\n        if ( lineIndex.y >= 0.0 && lineIndex.y <= dimension.y )\n        {\n            if ( gridUV.x >= -border.x && gridUV.x - 1.0 < border.x )\n            {\n                if (fract(linePos.y)< 0.1f)\n                {\n                    col = vec3(blackShade);\n                }\n            }\n        }\n\n        if ( lineIndex.x >= 0.0 && lineIndex.x <= dimension.x )\n        {\n            if ( gridUV.y - 1.0 < border.y && gridUV.y >= -border.y )\n            {\n                if (fract(linePos.x)< 0.1f)\n                {\n                    col = vec3(blackShade);\n                }    \n            }\n        }\n\n        if( grain2 <0.08 )\n        {\n            col = whiteShade;\n            col = col * col;\n        }\n\n\n        col += (grain2 - 0.5) * 0.1;\n\n        float grain = texture( iChannel1, sheetUV * 10.0 ).r;\n        float amount = 0.3f;\n        amount = 0.1 + pow(sheetUV.x, 80.0f) * 0.9f;\n        col *= 1.0f - grain * amount;\n\n        vec3 bgCol = texture( iChannel2, sheetUV * 0.5f ).rgb;\n        bgCol = bgCol * bgCol;\n\n        vec2 shadowUV = sheetUV - vec2(2, 1)/200.0;\n        if ( shadowUV.x >= 0.0f && shadowUV.y >= 0.0f && shadowUV.x - 1.0f < -grain*.01 && shadowUV.y - 1.0f < 0.0f )\n        {\n            bgCol *= 0.4f;\n        }\n\n        if ( sheetUV.x < 0.0f || sheetUV.y < 0.0f || sheetUV.x - 1.0f >= -grain*.015 || sheetUV.y - 1.0f >= 0.0f )\n        {\n            col = bgCol;\n        }\n\n        col *= 1.0 - sheetUV.y * 0.2 - sheetUV.x * 0.1;\n        \n        tot += col;\n        count += 1.0f;\n    }\n\n    vec3 result = tot / count;\n        \n    result *= GetVignetting( fragCoord/iResolution.xy, 1.0f, 0.7f, 1.0f );\n        \n    result *= 1.5f;\n        \n    result = sqrt(result);\n        \n    fragColor = vec4(result,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}