{
    "Shader": {
        "info": {
            "date": "1523107532",
            "description": "Simple 3d noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsyyWG",
            "likes": 50,
            "name": "MeltingTunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "sss",
                "noise3d"
            ],
            "usePreview": 0,
            "username": "EvilRyu",
            "viewed": 2570
        },
        "renderpass": [
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n#define PI 3.14159265\n\nfloat smin(float a, float b, float k)\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\n\nvec3 path(float p)\n{\n    //return vec3(0);\n\treturn vec3(sin(p*0.15)*cos(p*0.2)*2., 0.,0.);\n}\n\n\n// From Shane: https://www.shadertoy.com/view/lstGRB\nfloat noise(vec3 p)\n{\n\tconst vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p);\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; \n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\nfloat fbm(vec3 p)\n{\n    return noise(p*4.)+noise(p*8.)*0.5;\n}\n\nfloat map(vec3 p)\n{    \n    p-=path(p.z);\n    float d0=noise(p*1.2+vec3(0,iTime,0))-0.6;\n    d0=smax(d0,1.2+sin(p.z*0.1)*0.2-noise(p*3.)*0.3-length(p.xy),1.);\n    d0=smin(d0,abs(p.y+1.1),.3);    \n    return d0;\n}\n\nvec3 get_normal(in vec3 p) \n{\n\tconst vec2 e = vec2(0.005, 0);\n\treturn normalize(vec3(map(p + e.xyy) - map(p - e.xyy), map(p + e.yxy) - map(p - e.yxy),\tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat intersect(vec3 ro, vec3 rd)\n{\n    float t=0.01;\n    float d=map(ro+t*rd);\n    for(int i=0;i<96;++i)\n    {\n        if(abs(d)<0.005||t>100.)\n            continue;\n        t+=step(d,1.)*d*0.2+d*0.5;\n        d=map(ro+t*rd);\n    }\n    if(t>100.)t=-1.;\n    return t;\n}\n\nfloat shadow(vec3 ro, vec3 rd, float dist)\n{\n    float res=1.0;\n    float t=0.05;\n    float h;\n    \n    for(int i=0;i<12;i++)\n    {\n        if(t>dist*0.9) continue;\n        h=map(ro+rd*t);\n        res = min(6.0*h/t, res);\n        t+=h;\n    }\n    return max(res, 0.0);\n}                                                           \n\n// density from aiekick: https://www.shadertoy.com/view/lljyWm\nfloat density(vec3 p, float ms) \n{\n\tvec3 n = get_normal(p); \n\treturn map(p-n*ms)/ms;\n}\n\nvec3 tonemap(vec3 x) \n{\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q=fragCoord.xy/iResolution.xy;\n    vec2 p=q*2.-1.;\n    p.x*=iResolution.x/iResolution.y;\n    vec3 ro=vec3(0.,0.,-iTime*2.);\n    vec3 ta=ro+vec3(0,0,-1.);\n    \n    vec3 lp0=ro+vec3(0,-0.4,-1.5);\n    \n    ro+=path(ro.z);\n    ta+=path(ta.z);\n\tlp0+=path(lp0.z);\n    \n    vec3 f=normalize(ta-ro);\n    vec3 r=normalize(cross(f,vec3(0,1,0)));\n    vec3 u=normalize(cross(r,f));\n    \n    vec3 rd=normalize(mat3(r,u,f)*vec3(p.xy,PI/2.));\n    vec3 col=vec3(0.6,0.8,1.1);\n\n    float t=intersect(ro,rd);\n    if(t>-0.5)\n    {\n        vec3 pos=ro+t*rd;\n        vec3 n=get_normal(pos);\n        \n        vec3 mate=2.*vec3(.9,0.3,.9);\n                \n        vec3 ld0=lp0-pos;\n        float ldist=length(ld0);\n        ld0/=ldist;\n        vec3 lc0=vec3(1.2,0.8,0.5);\n        \n        float sha=shadow(pos+0.01*n, ld0, ldist);\n        float dif=max(0.,dot(n,ld0))*sha*sha;\n        float bac=max(0.,dot(n,-ld0));\n        float amb=max(0.,dot(n,vec3(0,1,0)));\n        float spe=pow(clamp(dot(ld0, reflect(rd, n)), 0.0, 1.0), 32.0);\n        float fre=clamp(1.0+dot(rd,n), .0, 1.); \n        float sca=1.-density(pos,.5);\n        \n        vec3 Lo=(2.5*dif*lc0+\n                 5.*spe*vec3(1.)*sha+\n                 pow(fre,8.)*vec3(1.1,0.4,0.2))/(ldist);\n        Lo+=.3*amb*vec3(0.5,0.8,1.);    \n        Lo+=.3*bac*lc0;\n        \n       \tLo+=vec3(1.2,.2,0.)*sca;\n        Lo+=vec3(0.,1.0,1.)*(1.-pow(fbm(pos*0.4+vec3(0,iTime*.5,0)),0.5));//*smoothstep(-1.5,1.,pos.y);\n        Lo*=Lo;\n        col=mate*Lo*0.2;\n    }\n    col=mix(col, .6*vec3(2.3,0.6,1.1), 1.0-exp(-0.0034*t*t) );\n    col=tonemap(col);\n    col=pow(clamp(col,0.0,1.0),vec3(0.45));    \n    col=pow(col,vec3(0.95,.9,0.85));\n    col*=pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1);\n    fragColor.xyz=col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}