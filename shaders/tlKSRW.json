{
    "Shader": {
        "info": {
            "date": "1582390313",
            "description": "code is messy. ",
            "flags": 32,
            "hasliked": 0,
            "id": "tlKSRW",
            "likes": 7,
            "name": "Day 65",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "// a 2d apollonian-ish fractal used as displacement\n// PBR from learnopengl.com\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor -= fragColor; // Wondering if this will glitch out for anyone. if it does, please leave a comment.\n    // fragColor = vec4(0);\n    \n    float t = texture(iChannel0, fragCoord/R).w;\n    float st = 20.;\n    \n    vec2 uv = (fragCoord - 0.5*R)/R.y;\n    float chromAbAmt = smoothstep(0.,1., dot(uv,uv))*0.5;\n    // DOF and chromatic abberation\n    for(float i = 0.; i < st; i++){\n        float sz = 0.00;\n        sz += smoothstep(0.,1.,abs(t)*0.02 - 0.01);\n        \n        //sz += 0.1;\n        vec2 c = vec2(\n        \tsin(tau*i/st)*sz,\n        \tcos(tau*i/st)*sz\n        );\n        \n        c *= 1. + texture(iChannel2, (fragCoord + i )/R).x*sz*100.;\n        \n        \n    \tfragColor += vec4(\n            texture(iChannel0, (fragCoord + vec2(1)*chromAbAmt)/R + c).x,\n            texture(iChannel0, (fragCoord - vec2(1,0)*chromAbAmt)/R + c).y,\n            texture(iChannel0, (fragCoord - vec2(1)*chromAbAmt)/R + c).z,\n            0.\n        );\n    }\n    fragColor /= st;\n    \n    vec4 bloom = texture(iChannel1, fragCoord/R, 0.);\n    //fragColor = mix(fragColor, bloom, length(bloom.xyz));\n    fragColor += bloom*0.5;\n    \n    fragColor.r *= 1.06;\n    fragColor.b *= 1.04;\n    fragColor.b *= 0.95;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define MIPLVL 1.\n\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define R iResolution.xy\n#define T(uv) texture(iChannel0, (uv)/R)\n\nvec4 gaussian(sampler2D chan, vec2 uv, vec2 iResolution, float mip){\n    float st = 4.;\n    vec3 t = vec3(st, 0., -st);\n    vec4 C = vec4(0);\n\t#define TC(uv) texture(chan, (uv)/R, mip) \n    // don't do defines like this lol\n    C += 4.*TC(uv);\n    C += 2.*TC(uv - t.xy) + 2.*TC(uv + t.xy) + 2.*TC(uv - t.yx) + 2.*TC(uv - t.yx);\n    C += 1.*TC(uv - t.xx) + 1.*TC(uv + t.xx) + 2.*TC(uv - t.xz) + 2.*TC(uv - t.xz);\n\n    return C / 16.;\n}\n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness*roughness;\n    float a2 = a*a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\n    float nom   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / max(denom, 0.001); // prevent divide by zero for roughness=0.0 and NdotH=1.0\n}\n\n\nfloat distributionTerm(float roughness, float ndoth) {\n\tfloat r2 = roughness * roughness;\n\tfloat d\t = (ndoth * r2 - ndoth) * ndoth + 1.0;\n\treturn r2 / (d * d * PI);\n}\n\nfloat D_GGX(float NoH, float roughness)\n{\n\tfloat a = roughness * roughness;\n    float a2 = a * a;\n    float nom = a2;\n    float denom = (NoH * NoH * (a2 - 1.0) + 1.0);\n\tdenom = PI * denom * denom;\n    \n    return nom / denom;\n}\n\n\n// ----------------------------------------------------------------------------\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\n// ----------------------------------------------------------------------------\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n// ----------------------------------------------------------------------------\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\n\nfloat random(vec2 u){\n\treturn fract(sin(u.y*4125.1 + u.x *125.625)*225.5235);\n} \n\nfloat noise(vec2 p) {\n\tvec2 i = ceil(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3. - 2. * f);\n   \tfloat a = random(i);\n    float b = random(i + vec2(1., 0.));\n    float c = random(i + vec2(0., 1.));\n    float d = random(i + vec2(1., 1.));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n}\n\nfloat r31(vec3 u){\n\treturn fract(sin(u.y*125.1 + u.x *125.125 + u.z*525.5215)*115.125235);\n} \nfloat valueNoise(vec3 uv){\n    vec3 id = floor(uv);\n    vec3 fd = fract(uv);\n    fd = smoothstep(0.,1., fd);\n    \n    float ibl = r31(id + vec3(0,-1,0));\n    float ibr = r31(id + vec3(1,-1,0));\n    float itl = r31(id + vec3(0));\n    float itr = r31(id + vec3(1,0,0));\n    \n    \n    float jbl = r31(id + vec3(0,-1,1));\n    float jbr = r31(id + vec3(1,-1,1));\n    float jtl = r31(id + vec3(0,0, 1));\n    float jtr = r31(id + vec3(1,0, 1));\n    \n    \n    float ibot = mix(ibl, ibr, fd.x); \n    float iup = mix(itl, itr, fd.x);\n    float jbot = mix(jbl, jbr, fd.x);\n    float jup = mix(jtl, jtr, fd.x);\n    \n    float i = mix(ibot, iup, fd.y);\n    float j = mix(jbot, jup, fd.y);\n    \n    return mix(i, j, fd.z); \n}\n\nfloat fbm(vec2 p) { \n\tfloat s = .0;\n\tfloat m = .0;\n\tfloat a = .5;\t\n\tfor(int i = 0; i < 6; i++) {\n\t\ts += a * noise(p);\n\t\tm += a;\n\t\ta *= .5;\n\t\tp *= 2.;\n\t}\n\treturn s / m;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define mx (20.*iMouse.x/iResolution.x)\n#define iTime (iTime + mx)\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define mx (20.*iMouse.x/iResolution.x)\n\n#define dmin(a,b) a.x < b.x ? a : b \n#define pmod(p, x) mod(p,x) - 0.5*x\n\nvec3 getWallpaper( vec2 fragCoord )\n{\n    vec2 p = mod(fragCoord,1.) - 0.5;\n\tp *= 1.4;\n    vec3 col = vec3(0);\n\n\tfloat d = 10e6;\n    \n    float s = 1.;\n    float scale = 1.;\n    \n    for(int i = 0; i < 5; i++){\n        p = -1.0 + 2.0*fract(0.5*p+0.5);\n        float dpp = dot(p,p);\n\n        p = abs(p);\n        p += vec2(0.06,0.02);\n        dpp = clamp(dpp,0.3,0.45);\n    \t//p /= dpp; \n    \t//p = sin(p + t);\n    \n        float k = s/dpp;\n        k = clamp(k,0.,4.);\n        \n        \n\t\tp     *= k;\n\t\tscale *= k;\n        \n    }\n    p = abs(p) - 0.1;\n    p = abs(p);\n   \td = min(p.x, p.y)/scale; \n    \n    col += smoothstep(0.01,0.,d);\n    \n    col = pow(col, vec3(4.));\n    \n    return col;\n}\n\n#define wallW 0.2\n#define wallH 0.5\n\n\nfloat wp = 0.;\nfloat fw = 0.;\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6, 1.);\n    \n    \n    //p.x -= mix(0.,exp(abs(p.y)),smoothstep(0.,1.,abs(p.y)*4.))*0.1;\n    float lWall = p.x + wallW;\n    \n    wp = getWallpaper(p.yz*0.25).x;\n    \n    wp = clamp(wp, 0., 1.);\n    \n    lWall += wp*0.01;\n    \n    fw = fbm(p.yz*7.);\n    \n    lWall += fw *0.01*(1. - pow(wp,40.));\n    d.x = min(d.x, lWall);\n\n    lWall = -p.x + wallW;\n    \n    \n    lWall += fw *0.01*(1. - pow(wp,40.));\n    lWall += wp*0.01;\n\n    \n    d.x = min(d.x,lWall );\n    //d.x = min(d.x, -p.y - 0.4);\n    \n    p = pmod(p,2.);\n    \n    //d = dmin(d, vec2(length(p.yz) - 0.02,2.));\n    \n    //d.x = min(d.x, -p.y + wallW);\n    d.x *= 0.5;\n\treturn d;\n}\n\nvec3 glow = vec3(0);\n\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = vec2(10e6);\n\tp = ro;\n    hit = false; t = 0.;\n    \n    for(int i = 0; i < 150 ; i++){\n    \td = map(p);\n        glow += exp(-d.x*100.);\n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    return d;\n}\n\nvec3 getNormal(vec3 p,float sens){\n\tvec2 t = vec2(sens,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\t\n}\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    uv *= 0.8;\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + right*uv.x + up*uv.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. + dot(uv,uv)*0.3;\n    vec3 col = vec3(0);\n\t\n    vec3 ro = vec3(0);\n    ro.y -= 0. + sin(iTime*0.10)*0.9;\n    ro.x += 0.14;\n    //ro.z += sin(mx)*4.;\n    ro.z += iTime*0.2;\n    vec3 lookAt = vec3(0,0,ro.z + 9.);\n    \n    vec3 rd = getRd(ro, lookAt, uv);\n    rd.xy*= rot(-0.9 + sin(iTime*0.24)*0.5);\n    rd.xz *= rot(0.5 + sin(iTime*0.3)*0.25);\n    \n    \n    \n    float t; bool hit; vec3 p;\n    \n    vec2 d = march(ro, rd, p, t, hit);\n    \n    if (hit){\n        \n        float wpsc = smoothstep(0.,1.,wp*1.);\n        wpsc = smoothstep(0.,1.,wp*1. + 0.83);\n        wpsc = pow(wpsc, 95.);\n        \n        vec3 albedo = mix(vec3(0.3,0.0 ,0.+ pow(fw,4.)*0.4), vec3(0.99,0.9,0.2), wpsc);\n        \n        \n        vec3 lightCol = vec3(1.2,1.,1.);\n\n        //vec3 L = normalize(l - p);\n        vec3 L= normalize(vec3(0.01,0.2,0.7)); vec3 l = L;\n        \n        vec3 n = getNormal(p, clamp(0.001 + wp*0.008, 0., 1.));\n        vec3 H = normalize(L - rd);\n\n\n        int id = int(d.y);\n        float METALNESS = 0.0;\n        METALNESS += wp*0.9 + wpsc*0.2;\n        float ROUGHNESS = 0.4 + clamp((1. - wpsc)*0.4*fw*2., 0., 0.6);\n        \n        \n        vec3 F0 = vec3(0.03);\n        vec3 N = n;\n        vec3 V = normalize(ro - p);\n\n        F0 = mix(F0, albedo, METALNESS);\n\n        // calculate per-light radiance\n        float distL    = length(l - p)*1.;\n        float attenuation = 1. / (distL * distL);\n        \n        //attenuation = clamp(attenuation, 0., 1.);\n        attenuation = 1.;\n        vec3 radiance     = lightCol * attenuation;        \n\n        // cook-torrance brdf\n        float NDF = DistributionGGX(N, H, ROUGHNESS);   \n        float G   = GeometrySmith(N, V, L, ROUGHNESS);      \n        vec3 F    = fresnelSchlick(clamp(dot(N, V), 0.0, 1.0), F0);     \n\n        vec3 kS = F;\n        vec3 kD = vec3(1.0) - kS;\n        kD *= 1.0 - METALNESS;\t  \n\n        vec3 numerator    = NDF * G * F;\n        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = numerator / max(denominator, 0.001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0); \n        \n        col += (kD * albedo / PI + specular) * radiance * NdotL * attenuation; \n        \n    }\n    \n    col = mix(col, vec3(0.3,0.14,0.1)*2., smoothstep(0.,1.,t*0.01));\n    \n    \n    uv.y *= 1.5;\n    col *= 1. - (1. - vec3(0.1,0.6,0.1))*smoothstep(0.,1.,dot(uv,uv)*0.9)*0.4;\n\n    col = max(col, 0.);\n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col,t);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    C = vec4(0);\n    \n    C += gaussian(iChannel0, fragCoord,R,MIPLVL);\n    //C += T(fragCoord);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    C = vec4(0);\n    \n    C += gaussian(iChannel0, fragCoord,R,MIPLVL);\n    //C += T(fragCoord);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    C = vec4(0);\n    \n    C += gaussian(iChannel0, fragCoord,R,MIPLVL);\n    //C += T(fragCoord);\n    \n    C *= smoothstep(0.,1., pow(length(C.xyz)*3.4, 2.));\n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}