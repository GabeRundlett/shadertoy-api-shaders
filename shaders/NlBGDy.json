{
    "Shader": {
        "info": {
            "date": "1624572053",
            "description": "epic",
            "flags": 0,
            "hasliked": 0,
            "id": "NlBGDy",
            "likes": 0,
            "name": "click on the screen",
            "published": 3,
            "tags": [
                "stuff"
            ],
            "usePreview": 0,
            "username": "pema99",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "// sdf for a box\nfloat sdBox(vec2 p, vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\n// sdf for sphere\nfloat sdSphere(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n// main sdf\nfloat map(vec2 p)\n{\n    return sdBox(p, vec2(0.4, 0.3));\n}\n\n// get normal/gradient of sdf\nvec2 normal(vec2 p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec2(map(p+h.xy) - map(p-h.xy),\n                           map(p+h.yx) - map(p-h.yx) ) );\n}\n\n// line distance function\nfloat sdLine( vec2 p, vec2 a, vec2 b )\n{\n    vec2 v = a, w = b;\n    float l2 = pow(distance(w, v), 2.);\n    if(l2 == 0.0) return distance(p, v);\n    float t = clamp(dot(p - v, w - v) / l2, 0., 1.);\n    vec2 j = v + t * (w - v);\n    return distance(p, j);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get uv, mouse pos\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    // visualize box sdf and isolines\n\tfloat d = map(p);\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    \n    // get gradient (normal) at mouse position\n    vec2 norm = normal(mouse);\n    \n    // find circle centroid, show sphere\n    float radius = 0.1;\n    vec2 center = mouse - norm * (map(mouse) - radius);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02, abs(sdSphere(p - center, radius))) );\n    \n    // visualize gradient as line\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02, sdLine(p, mouse, mouse + norm*0.5)) );\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}