{
    "Shader": {
        "info": {
            "date": "1690805466",
            "description": "random shader (i was bored)",
            "flags": 0,
            "hasliked": 0,
            "id": "ctfcD7",
            "likes": 2,
            "name": "colorful thing",
            "published": 3,
            "tags": [
                "colors",
                "color",
                "idk",
                "nice"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "/* -----------------------------------------------\n  Shadertoy Unit: Image\n  Description: None\n  iChannel0: None\n  iChannel1: None\n  iChannel2: None\n  iChannel3: None\n----------------------------------------------- */\n\nvec2 screen_to_uv(vec2 coord)\n{\n    return (2.0 * coord - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nvec3 view_transform(vec3 col)\n{\n\t// OETF (Gamma)\n    return pow(col, vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    float t = 0.9 * floor(iTime * 30.0) / 30.0;\n    vec2 c = floor(frag_coord / 2.0) * 2.0 + 0.5;\n    \n    // Initialize PRNG\n    prng_init(vec3(c / iResolution.y, t));\n    \n    // UV\n    vec2 uv = screen_to_uv(c);\n    \n    // Render\n    uv += vec2(0.5, 0.0);\n    float r = length(uv) + random() * 0.05;\n    float a = (0.55 * get_angle(uv) / TAU) + t * 0.1 + random() * 0.01;\n    vec3 col = rgb_sweep(a);\n    col = mix(col, col * dot(col, vec3(0.5, 0.3, 0.2)) * 1.1, 0.25);\n    col = mix(col, vec3(1.02), pow(map_range_clamp(r, 2.5, 0.0, 0.0, 1.0), 6.0));\n    float ring = 0.6 + cos(t * TAU * 0.5) * 0.04 + cos(t * TAU * 0.3) * 0.02 + cos(t * TAU * 1.5) * 0.005;\n    float ring_width = 0.04 + cos(t * TAU * 0.4) * 0.015;\n    if (r > ring && r < (ring + ring_width))\n    {\n        float fac = 1.0 - 2.0 * abs((get_angle(uv) / TAU) - 0.5);\n        fac *= fac;\n        col = pow(col, vec3(map_range(fac, 0.0, 1.0, 1.0, 2.5)));\n        col *= map_range(fac, 0.0, 1.0, 1.0, 1.2);\n    }\n    col = pow(col, vec3(map_range_clamp(r, 0.5, 5.0, 0.9, 5.0)));\n    \n    // Output\n    col = view_transform(col);\n    frag_col = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* -----------------------------------------------\n  Shadertoy Unit: Common\n----------------------------------------------- */\n\n\n\n// -----------------------------------------------\n// What to define\n// -----------------------------------------------\n\n/* Math Utils */\n#define MATH_UTILS 1\n\n/* Pseudo-Random Number Generator */\n#define PRNG 1\n\n// -----------------------------------------------\n// End\n// -----------------------------------------------\n\n\n\n// -----------------------------------------------\n// Math Utils\n// -----------------------------------------------\n\n#if MATH_UTILS\n\n#define PI 3.1415926535897932384626433832\n#define TAU 6.283185307179586476925286766\n#define PI_OVER_2 1.57079632679489661923132169163\n#define DEG_TO_RAD 0.01745329251994329576923690768\n#define RAD_TO_DEG 57.2957795130823208767981548141\n\n#define FUNC_LERP(T) \\\nT lerp(T a, T b, float t) \\\n{ \\\n    return a + t*(b-a); \\\n}\n\n#define FUNC_WRAP(T) \\\nT wrap(T inp, float start, float end) \\\n{ \\\n    return start + mod(inp - start, end - start); \\\n}\n\n#define FUNC_MAP_RANGE(T) \\\nT map_range(T inp, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    return out_start + ((out_end - out_start) / (inp_end - inp_start)) * (inp - inp_start); \\\n}\n\n#define FUNC_MAP_RANGE_CLAMP(T) \\\nT map_range_clamp(T inp, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    T t = clamp((inp - inp_start) / (inp_end - inp_start), 0.0, 1.0); \\\n    return out_start + t * (out_end - out_start); \\\n}\n\nFUNC_LERP(float)\nFUNC_LERP(vec2)\nFUNC_LERP(vec3)\nFUNC_LERP(vec4)\n\nFUNC_WRAP(float)\nFUNC_WRAP(vec2)\nFUNC_WRAP(vec3)\nFUNC_WRAP(vec4)\n\nFUNC_MAP_RANGE(float)\nFUNC_MAP_RANGE(vec2)\nFUNC_MAP_RANGE(vec3)\nFUNC_MAP_RANGE(vec4)\n\nFUNC_MAP_RANGE_CLAMP(float)\nFUNC_MAP_RANGE_CLAMP(vec2)\nFUNC_MAP_RANGE_CLAMP(vec3)\nFUNC_MAP_RANGE_CLAMP(vec4)\n\n#endif\n\n// -----------------------------------------------\n// End\n// -----------------------------------------------\n\n\n\n// -----------------------------------------------\n// Pseudo-Random Number Generator\n// Source: https://www.shadertoy.com/view/WdSSRt\n// -----------------------------------------------\n\n/* Usage Example:\n    void mainImage(out vec4 frag_col, in vec2 frag_coord)\n    {\n        // Initialize PRNG\n        prng_init(vec3(frag_coord / iResolution.y, iTime));\n    \n        // Using the function\n        float a = random();\n        vec3 b = vec3(random(), random(), random());\n        \n        ...\n    }\n*/\n\n#if PRNG\n\nuint prng_state[2];\n\nuint prng_rot(uint x, int k)\n{\n    return (x << k) | (x >> (32 - k));\n}\n\nfloat random()\n{\n    uint s0 = prng_state[0];\n    uint s1 = prng_state[1];\n    uint result = prng_rot(s0 * 0x9e3779bbu, 5) * 5u;\n    s1 ^= s0;\n    prng_state[0] = prng_rot(s0, 26) ^ s1 ^ (s1 << 9);\n    prng_state[1] = prng_rot(s1, 13);\n    return float(result) / float(0xffffffffu);\n}\n\nvoid prng_init(vec3 seed)\n{\n    seed.xy *= (seed.z + 10.258);\n    seed += 3.49276101561702;\n    prng_state[0] = floatBitsToUint(seed.x);\n    prng_state[1] = floatBitsToUint(seed.y);\n    random();\n}\n\n#endif\n\n// -----------------------------------------------\n// End\n// -----------------------------------------------\n\n\n\nfloat get_angle(vec2 v)\n{\n    v /= length(v);\n    return atan(-v.y, -v.x) + PI;\n}\n\nvec3 rgb_sweep(float hue)\n{\n    hue = wrap(hue * 360.0, 0.0, 360.0);\n\n    vec3 col = vec3(1, 0, 0);\n    col = mix(col, vec3(1, 1, 0), smoothstep(0.0, 60.0, hue));\n    col = mix(col, vec3(0, 1, 0), smoothstep(60.0, 120.0, hue));\n    col = mix(col, vec3(0, 1, 1), smoothstep(120.0, 180.0, hue));\n    col = mix(col, vec3(0, 0, 1), smoothstep(180.0, 240.0, hue));\n    col = mix(col, vec3(1, 0, 1), smoothstep(240.0, 300.0, hue));\n    col = mix(col, vec3(1, 0, 0), smoothstep(300.0, 360.0, hue));\n    \n    return col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}