{
    "Shader": {
        "info": {
            "date": "1722016588",
            "description": "from  https://www.shadertoy.com/view/fstGRX",
            "flags": 0,
            "hasliked": 0,
            "id": "XcByzw",
            "likes": 9,
            "name": "crystalized light",
            "published": 3,
            "tags": [
                "crystalized"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat t; //time\nvec3 glw = vec3(0); //glow\n\nfloat bx(vec3 p, vec3 s) //box sdf\n{\n  vec3 q=abs(p)-s*1.;\n  return min(max(q.x,max(q.x,q.z)), 0.) + length(max(q,0.));\n}\n\n\n\nvec2 mp(vec3 p) //map/scene\n{\n  vec3 pp = p; //temp position\n\n \n  float fb = atan(t)*0.75+0.5;\n  float tt = t + fb*0.2; \n  float g = length(pp) - fb*2.;\n  glw +=0.421/(0.01+g*g)*vec3(00.2,0.5,0.9); \n   pp.yz*=rot(iTime);\n        pp.xz*=rot(iTime);\n  for(float i=0.;i<5.;i++) \n  {\n     pp.xy=abs(pp.xy)-1.2 - fb*0.5;\n     pp.yz*=rot(iTime);\n        pp.xz*=rot(iTime);\n     \n\n  }\n  vec2 b = vec2(bx(pp, vec3(1.)) - 0.1, 1.); //create centre crystal\n  pp=p; //reset temp position\n  \n\n \n  vec2 c = vec2((pp,1.),2.); //outer cylinders\n\n \n  glw += 0.201/(0.01+g*g)*mix(vec3(0.1,0.0,0.9), vec3(0.9,0.0,0.1), (pp.y+10.)/20.); //add glow with y based colour\n \n  \n  return b.x < c.x ? b : c;\n} \n\n\nvec2 tr(vec3 ro,vec3 rd,float x) //raymarcher\n{\n  vec2 d = vec2(0);\n  for(int i = 0; i < 256; i++)\n  {\n    vec3 p=ro+rd*d.x;\n    vec2 s=mp(p);s.x*=x;\n    d.x+=s.x;d.y=s.y;\n    if(d.x>64.||s.x<0.001)break;\n  }\n  if(d.x>64.)d.y=0.;return d;\n}\n\nvec3 nm(vec3 p) //normal calc\n{\n  vec2 e = vec2(0.001,0); return normalize(mp(p).x-vec3(mp(p-e.xyy).x,mp(p-e.yxy).x,mp(p-e.yyx).x));\n}\n\nvec4 px(vec4 h, vec3 rd, vec3 n) //hit \"shader\" - calculates the colour from position + object + ray + normal data\n{\n  vec4 b=vec4(0,0,0,1); //background\n  if(h.a==0.)return vec4(b.rgb,1.); //return background for object id 0\n  vec4 a=h.a == 1. ? vec4(cos(t)*0.5+0.5,0.1,0.3, 0.2) : vec4(0.,0.,0.,0.8); //base colour\n  float d=dot(n,-rd); //unclamped diffuse\n  float dd=max(d,0.); //diffuse proper\n  float f=pow(1.-d,4.); //easy fres by using inverse of unclamped diffuse\n  float s=pow(abs(dot(reflect(rd,n),-rd)),40.); //specular\n  return vec4(a.rgb*(dd+f)+s,a.a); //mix together\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n  t=iTime; //assign time global\n  vec2 uv = vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y); //uv\n  uv-=0.5;uv/=vec2(iResolution.y/iResolution.x,1); //uv normalise\n  vec3 ro = vec3(0, 0, -30),rd=normalize(vec3(uv + vec2(0, 0),1.)), //ray origin and direction\n  oro=ro,ord=rd,cn,cp,cc;float ts=1.; //lots of variables to track transparency loop\n  for(int i=0;i<10;i++) //transparency loop\n  {\n    vec2 f=tr(oro,ord,1.); //march to front object\n    cp=oro+ord*f.x;cn=nm(cp); //update current position and normal\n    vec4 c=px(vec4(cp,f.y),ord,cn); //colour for front object\n    if(f.y==0.||c.a==1.){cc=mix(cc,c.rgb,ts);break;}; //mix colour and break if object is solid or there was no object\n    ro=cp-cn*0.01;rd=refract(ord,cn,1./1.3); //refract and update ray\n    vec2 z=tr(ro,rd,-1.); //march through object\n    cp=ro+rd*z.x;cn=nm(cp); //update current position and normal\n    oro=cp+cn*0.01;ord=refract(rd,-cn,1.3); //refract and update the original ray variables\n    if(dot(ord,ord)==0.)ord=reflect(rd,-cn); //reflect if refraction failed\n    cc=mix(cc,c.rgb,ts);ts-=c.a; //mix colour\n    if(ts<=0.)break; //break if we reached 0 transmission\n  }\n  fragColor=vec4(cc + glw,1); //write output\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}