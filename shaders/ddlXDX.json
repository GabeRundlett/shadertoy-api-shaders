{
    "Shader": {
        "info": {
            "date": "1669668230",
            "description": "Morse Audio",
            "flags": 8,
            "hasliked": 0,
            "id": "ddlXDX",
            "likes": 5,
            "name": "Morse Audio",
            "published": 3,
            "tags": [
                "audio",
                "code",
                "morse"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = vec3(1.0 - step(abs(mainSound(0, iTime).x), 0.0));\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// See Common",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define PI 3.14159\n#define TWO_PI 6.28318530718\n// Morse code audio frequency\n#define FREQ 800.0\n\nconst float DL = 0.05; // Dot (dit) length\nconst float SL = DL; // Space length\nconst float LS = DL * 3.0; // Letter space length\nconst float WS = DL * 7.0; // Word space length\nconst float _L = DL * 3.0; // Dash (dah) length\n\nfloat ct = 0.0; // Current time\nfloat st = 0.0; // Start time used for note timings\nstruct Wave {\n    float frequency;\n    float amplitude;\n    float phase;\n};\n\n// Pause for duration 'd'\nfloat p(float d) {\n    st += d;\n    return 0.0;\n}\n\n// Play frequency 'freq' for duration 'd'\nfloat f(float freq, float d) {\n    float fq = (ct >= st && ct < (st + d)) ? freq : 0.0;\n    p(d);\n    return fq;\n}\n\n// Makes a wave from frequency, amplitude and time\nfloat w(Wave w) {\n    return w.amplitude * sin(w.phase * w.frequency * TWO_PI);\n}\n\nfloat dit() {\n    return f(FREQ, DL) + p(SL);\n}\n\nfloat dah() {\n    return f(FREQ, _L) + p(SL);\n}\n\nfloat ls() {\n    return p(LS - SL);\n}\n\nfloat ws() {\n    return p(WS - SL);\n}\n\nfloat A() {\n    return dit() + dah() + ls();\n}\n\nfloat B() {\n    return dah() + dit() + dit() + dit() + ls();\n}\n\nfloat C() {\n    return dah() + dit() + dah() + dit() + ls();\n}\n\nfloat D() {\n    return dah() + dit() + dit() + ls();\n}\n\nfloat E() {\n    return dit();\n}\n\nfloat F() {\n    return dit() + dit() + dah() + dit() + ls();\n}\n\nfloat G() {\n    return dah() + dah() + dit() + ls();\n}\n\nfloat H() {\n    return dit() + dit() + dit() + dit() + ls();\n}\n\nfloat I() {\n    return dit() + dit() + ls();\n}\n\nfloat J() {\n    return dit() + dah() + dah() + dah() + ls();\n}\n\nfloat K() {\n    return dah() + dit() + dah() + ls();\n}\n\nfloat L() {\n    return dit() + dah() + dit() + dit() + ls();\n}\n\nfloat M() {\n    return dah() + dah() + ls();\n}\n\nfloat N() {\n    return dah() + dit() + ls();\n}\n\nfloat O() {\n    return dah() + dah() + dah() + ls();\n}\n\nfloat P() {\n    return dit() + dah() + dah() + dit() + ls();\n}\n\nfloat Q() {\n    return dah() + dah() + dit() + dah() + ls();\n}\n\nfloat R() {\n    return dit() + dah() + dit() + ls();\n}\n\nfloat S() {\n    return dit() + dit() + dit() + ls();\n}\n\nfloat T() {\n    return dah() + ls();\n}\n\nfloat U() {\n    return dit() + dit() + dah() + ls();\n}\n\nfloat V() {\n    return dit() + dit() + dit() + dah() + ls();\n}\n\nfloat W() {\n    return dit() + dah() + dah() + ls();\n}\n\nfloat X() {\n    return dah() + dit() + dit() + dah() + ls();\n}\n\nfloat Y() {\n    return dah() + dit() + dah() + dah() + ls();\n}\n\nfloat Z() {\n    return dah() + dah() + dit() + dit() + ls();\n}\n\nfloat w(float freq) {\n    return freq + ws();\n}\n\nvec2 mainSound(int samp, float time) {\n    ct = time;\n    float amplitude = 0.1;\n    float frequency = ws() + w(W() + H() + A() + T()) + w(A() + R() + E()) + w(Y() + O() + U()) + w(D() + O() + I() + N() + G());\n    \n    Wave w1 = Wave(frequency, amplitude, time);\n    \n    vec2 r = vec2(w(w1));\n    \n    return r * 0.2;\n}                            ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}