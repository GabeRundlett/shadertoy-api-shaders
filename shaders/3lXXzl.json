{
    "Shader": {
        "info": {
            "date": "1563843022",
            "description": "a simple metaball shader with shaddow",
            "flags": 0,
            "hasliked": 0,
            "id": "3lXXzl",
            "likes": 0,
            "name": "my first shader(mrlegoboy)",
            "published": 3,
            "tags": [
                "raymarch",
                "sphere",
                "metaball"
            ],
            "usePreview": 0,
            "username": "mrlegoboy",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "#define maxsteps 100\n#define maxdist 100.\n#define surfdist 0.1\n#define balls 5\nvec3 meta[balls];\nfloat metastr[balls];\nint ranfact;\nfloat ran(){\nranfact =ranfact * 1664525 +1013904223;\nreturn float(ranfact);\n}\n    \n    \n    \nvec3 metasp[balls];\n\nvoid initballs(){\n    \n    \n    \n}\n\n\n\n    \n\n\nfloat GetDist(vec3 p){\n          float metadif=0.;\n    for(int i=0; i<balls; i++) {\n \t\tmetadif +=metastr[i]/length(p-meta[i]);\n        \n    }\n    float metadist = 1.-metadif;\n    vec4 s = vec4(0.,1.,6.,1.);\n    float spheredist = length(p-s.xyz)-s.w;\n    float planedist=p.y+2.;\n    float d= min(metadist,spheredist);\n    d= min(planedist,d);\n    return d;\n}\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    vec3 n=d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n         \n    return normalize(n);\n    \n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n    float d0=0.;\n        \n    for(int i=0; i<maxsteps; i++) {\n        vec3 p = ro + rd*d0;\n        float ds = GetDist(p);\n        d0 += ds;\n        if (d0>maxdist||ds<surfdist) break;\n    }\n\treturn d0;\n}\n\nfloat getlight(vec3 p) {\n    vec3 lightpos = vec3(0,    5 , 6);\n    lightpos.xz += vec2(sin(iTime),cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    vec3 n= GetNormal(p);\n    float dif = dot(n, l);\n    float d = raymarch(p+n*surfdist, l);\n    if(d<length(lightpos-p)) dif *=.1;\n    return ((dif ));\n}\n\n\n\n\t\t\t\t\t\t\t\t\t\t\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    for(int i=0; i<(balls); i+=1) {\n meta[i]=meta[i]+vec3(sin(float(i)*iTime),sin(float(i)*iTime*float(balls/5)),sin(float(i)*iTime*float(balls/2)));   \n    metastr[i]=0.1;\n}\n \tvec2 uv=(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0,sin(iTime),-5);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    float d = raymarch(ro,rd);\n    vec3 p = ro+rd *d;\n    float dif = getlight(p);\n    col= vec3(dif);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}