{
    "Shader": {
        "info": {
            "date": "1531209858",
            "description": "I was always going to do this",
            "flags": 32,
            "hasliked": 0,
            "id": "lsKBDd",
            "likes": 3,
            "name": "Benoit",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.xy);\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ITERS 6000.0\n#define INFINITY 2500000000.0\n\n#define R(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1 for y)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 c = uv;\n    // uv2 = -= vec2(0.5, 0.0);\n    c *= 1.0 - 0.99 * cos(iTime * 0.661);\n    c += 0.7 * vec2( cos(iTime * 0.8),  sin(iTime * 0.8));\n    c *= R(iTime * 0.3);\n    \n    float i;\n    vec2 z = c;\n    for (i = 0.0; i < ITERS; ++i) {\n        if (dot(z,z) >= INFINITY)\n            break;\n        z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c; \n    }\n    \n    // Output to screen\n    if (i >= ITERS)\n    \tfragColor = texture(iChannel0,\n               (fragCoord / iResolution.xy - 0.5) * R(0.01) * 1.05 + 0.5) * 0.9;\n    else {\n        float ii = (i / ITERS);\n    \tfragColor = vec4(\n            pow(ii, .3), \n            pow(ii, .25),\n            pow(ii, .1),\n            1.) * 2.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}