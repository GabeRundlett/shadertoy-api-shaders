{
    "Shader": {
        "info": {
            "date": "1460981135",
            "description": "Fur Space",
            "flags": 0,
            "hasliked": 0,
            "id": "MddSRl",
            "likes": 6,
            "name": "Fur Space",
            "published": 3,
            "tags": [
                "space",
                "fur"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 730
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nconst vec3 ld = vec3(0.,1., .5);\n\nfloat t = 0., ts = 0.;\n\nmat3 getRotZMat(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nfloat df(vec3 p)\n{\n\tp.xy = vec2(atan(p.x, p.y) / 3.14159 * 5., length(p));\n\tp.x += floor(p.y) + t*0.5;\n\tp *= getRotZMat(p.z*0.02);\n\tp.xy = mod(p.xy, 1.) - 0.5;\n\treturn length(p.xy) - 0.;\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy) - df(p-e.xyy),\n\t\tdf(p+e.yxy) - df(p-e.yxy),\n\t\tdf(p+e.yyx) - df(p-e.yyx) );\n    return normalize(n);\n}\n\n\n// from iq code\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<18; i++ )\n    {\n\t\tfloat h = df( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0., 1. );\n}\n\n// from iq code\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<10; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = df( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 lighting(vec3 p, vec3 lp, vec3 rd, float prec) \n{\n    vec3 l = lp - p;\n    float d = max(length(l), 0.01);\n    float atten = 1.0-exp( -0.01*d*d );\n    if (iMouse.z> 0.) atten = exp( -0.001*d*d )-0.5;\n    l /= d;\n    \n    vec3 n = nor(p, prec);\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    dif *= softshadow(p, rd, 0.1, 1.);\n    \n    vec3 lin = vec3(0.08,0.32,0.47);\n    lin += 1.0*dif*vec3(1,1,0.84);\n    lin += 2.5*spe*dif*vec3(1,1,0.84);\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    return lin * atten * calcAO(p, n);\n}\n\n//--------------------------------------------------------------------------\n// Grab all sky information for a given ray from camera\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = vec3(0.5,0.49,0.72);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (2.*fragCoord.xy-si)/min(si.x, si.y);\n\t\n\tt = iTime + 70.;\n\tts = sin(t)*.5+.5;\n    \n    vec3 ro = vec3(2.2*vec2(cos(t*.1),sin(t*.1)),t);\n\n    vec3 cu = vec3(0,1,0);\n    vec3 co = ro + vec3(0.,0,1);\n\t\n\tfloat fov = .5;\n\tvec3 z = normalize(co - ro);\n\tvec3 x = normalize(cross(cu, z));\n\tvec3 y = normalize(cross(z, x));\n\tvec3 rd = normalize(z + fov * uv.x * x + fov * uv.y * y);\n\t\n\tfloat s = 0.01;\n\tfloat d = 0.;\n\tvec3 p = ro + rd * d;\n\tfloat dMax = 20.;\n\tfor (float i=0.; i<250.; i++)\n\t{\n\t\tif (s<0.01*log(d*d/s/1000.) || d>dMax) break;\n\t\ts = df(p);\n        d += s * 0.2;\n        p = ro + rd * d;\t\n\t}\n\t\n    vec3 sky = GetSky(rd, ld, vec3(1.5));\n    \n\tif (d<dMax)\n\t{\n        vec3 p =ro+rd*d;\n\t\tfragColor.rgb = vec3(0.47,0.6,0.76) * lighting(p, ro, rd, .000001);\n\t\tfragColor.rgb = mix( fragColor.rgb, sky, 1.0-exp( -0.03*d*d ) ); \n\t}\n\telse\n\t{\n\t\tfragColor.rgb = sky;\n\t}\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}