{
    "Shader": {
        "info": {
            "date": "1710370555",
            "description": "Modified version of an older shader of mine that used Euler's wave equation. This version now includes damping and a background that is distorted by refraction.",
            "flags": 32,
            "hasliked": 0,
            "id": "l3SXzw",
            "likes": 2,
            "name": "Ripples in water",
            "published": 3,
            "tags": [
                "ripples",
                "refraction",
                "water"
            ],
            "usePreview": 0,
            "username": "Dev1ati0n",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "float depthMultiplier = 2.0;\nfloat baseDepth = 100.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = texelFetch(iChannel0,ivec2(fragCoord),0).r;\n    float b = texelFetch(iChannel0,ivec2(fragCoord)+ivec2(1,0),0).r;\n    float c = texelFetch(iChannel0,ivec2(fragCoord)+ivec2(0,1),0).r;\n    vec3 nrm = normalize(cross( vec3(1,0,depthMultiplier*(b-a)),vec3(0,1,depthMultiplier*(c-a)) ));\n    vec3 ref = refract(vec3(0,0,-1),nrm,1.33);\n    fragColor = texture(iChannel2,(fragCoord+ref.xy*baseDepth)/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Speed of simulation. Higher values are faster, but less accurate and more buggy. \nfloat timescale = 0.5;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// The derivative (rate of change) of the wave amplitude\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = 1./iResolution.xy;\n    vec2 uv = fragCoord*pixel;\n    // Fetch values of neighboring pixels\n    float values[5];\n    values[0] = texture(iChannel1,uv).r;\n    values[1] = texture(iChannel1,uv+vec2(0.0, 1.0)*pixel).r;\n    values[2] = texture(iChannel1,uv+vec2(0.0,-1.0)*pixel).r;\n    values[3] = texture(iChannel1,uv+vec2(1.0, 0.0)*pixel).r;\n    values[4] = texture(iChannel1,uv+vec2(-1.0,0.0)*pixel).r;\n    // Wave Equation: d²u/dt²=c²(d²u/dx²+d²u/dy²)\n    float deriv = values[1]+values[2]+values[3]+values[4]-4.*values[0]; // Calculates d²u/dx²+d²u/dy²\n    fragColor = vec4(texture(iChannel0,uv).r+timescale*deriv); // Add c²(d²u/dx²+d²u/dy²) to the previous value\n    fragColor *= 0.999; // Damping\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(timescale*texture(iChannel0,uv)+texture(iChannel1,uv)); // Add the derivative to the previous value\n    // Add disturbance\n    if(iFrame == 0) fragColor += 3.*texture(iChannel3,uv*0.05).r;\n    if(iMouse.z>0.){\n        vec2 diff = fragCoord-iMouse.xy;\n        diff /= iResolution.y;\n        fragColor += exp(-8000.*dot(diff,diff));\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}