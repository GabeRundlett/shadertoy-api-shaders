{
    "Shader": {
        "info": {
            "date": "1424080701",
            "description": "fiddling with envelopes and such",
            "flags": 8,
            "hasliked": 0,
            "id": "llsGzf",
            "likes": 6,
            "name": "Chords",
            "published": 3,
            "tags": [
                "audio"
            ],
            "usePreview": 0,
            "username": "andremichelle",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "const float bpm = 123.0;\nconst float pi = 3.1415926536;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(0.5,0.5);\n    float t=fract(iTime*bpm/60.0);\n    float x = uv.x*sin(t*2.0*pi+t*4.)-uv.y*cos(64.*t*pi);\n    float y = uv.y*sin(t*pi)+uv.x*cos(t*2.0*pi);\n    float c=smoothstep(t,t+0.1,fract(y*64.0));\n    float d=smoothstep(t,t+0.1,fract(x*16.0));\n    float e=smoothstep(t,t+0.1,fract(y*4.0));\n    float a=c*d*e;\n    \n\tfragColor = vec4(a,a,a,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "const float bpm = 123.0;\n\nfloat pulse( float morph, float pulse, float phase )\n{\n\tfloat a, b;\n    if( pulse < 0.5 )\n        a = morph * pulse * 0.5;\n    else\n        a = morph * ( 1.0 - pulse ) / 2.0;\n    if( phase < pulse )\n    {\n        if( phase < a )\n        {\n            b = phase / a - 1.0;\n            return 1.0 - b * b;\n        }\n        if( phase < pulse - a )\n            return 1.0;\n        b = ( phase - pulse + a ) / a;\n        return 1.0 - b * b;\n    }\n    if( phase < pulse + a )\n    {\n        b = ( phase - pulse ) / a - 1.0;\n        return b * b - 1.0;\n    }\n    if( phase <= 1.0 - a )\n        return -1.0;\n    b = ( phase - 1.0 + a ) / a;\n    return b * b - 1.0;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float y=time*bpm/240.0;\n    float a=16.0;\n    float s=1.0;\n    float b=16.0;\n    float bi=floor(b*y);\n    float w=b*y-bi;\n    float sqe=pow(min(1.0,min(s-s*w,a*w)),2.0)*(3.0-mod(bi,3.0));\n    float x=time*220.0;\n    \n    float kick=sin(18.0*pow(1.0-fract(y*4.0),27.0))*0.7;\n\n    float wave=\n        pulse(0.75, 0.75, fract(x))+\n        pulse(0.9+sin(y*2.0/16.0)*0.1-sqe*0.1, 0.5+0.45*sin(y*16.0), fract(x))+\n        pulse(0.9+sin(y*3.0/16.0)*0.1-sqe*0.1, 0.5+0.45*sin(y*16.0), fract(x*pow(2.0,(2.0+1.0*mod(floor(y),4.0))/12.0)))+\n        pulse(0.9+sin(y*5.0/16.0)*0.1-sqe*0.1, 0.5+0.45*sin(y*16.0), fract(x*pow(2.0,(5.0+2.0*mod(floor(y),2.0))/12.0)));\n    \n    return vec2(kick+wave*sqe*0.07);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}