{
    "Shader": {
        "info": {
            "date": "1627911351",
            "description": "neon",
            "flags": 0,
            "hasliked": 0,
            "id": "7lSXRG",
            "likes": 3,
            "name": "neon",
            "published": 3,
            "tags": [
                "neon"
            ],
            "usePreview": 0,
            "username": "calimops",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "const float top = 388.0;\nconst float left = 412.0;\nconst float right = 612.0;\nconst float bottom = 188.0;\n\nconst float tanEps = 0.0001;\n\nconst float lightFactor = 5.0;\n\nconst float delta = -1000.0;\n\nfloat scaledAtan (float d, float a, float b) {\n\n    d = abs(d);\n\n        if (d*d - a*b < tanEps) {\n    \n            return 3.141 / (2.0 * d);\n       \n        } else if (d < tanEps) {\n    \n            return -1.0 / a - 1.0 / b;\n    \n        } else {\n\n            return atan((d*(a+b)) / (d*d-a*b)) / d; \n    \n        }\n   \n\n}\n\nfloat squareStrength(vec4 size, vec2 point) {\n\n    float factor = 0.0;\n    \n    factor += scaledAtan(size.w - point.y, point.x - size.y, size.z - point.x);\n    factor += scaledAtan(point.y - size.x, point.x - size.y, size.z - point.x);\n    factor += scaledAtan(point.x - size.y, point.y - size.x, size.w - point.y);\n    factor += scaledAtan(size.z - point.x, point.y - size.x, size.w - point.y);\n    \n    return factor;\n\n}\n\nbool inSquare(vec4 size, vec2 point, float delta) {\n\n    if ((size.w-delta > point.y) && (point.y > size.x+delta) && (size.z-delta > point.x) && (point.x > size.y+delta)) {\n    \n        return true;\n    \n    }\n    \n    return false;\n\n}\n\nfloat circleStrength(float r, vec2 center, vec2 point) {\n\n    float r0 = distance(center, point);\n\n    return 6.283*r / abs(r*r - r0*r0);\n\n}\n\nbool inCircle(float r, vec2 center, vec2 point, float delta) {\n\n    if (distance(point, center) < r-delta) {\n    \n        return true;\n    \n    }\n    \n    return false;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n    \n    float factor1 = 0.0;\n    \n    vec4 rect1 = vec4(188.0, 412.0, 612.0, 388.0);\n    \n    vec3 col1 = 0.5 + 0.5*cos(iTime+vec3(0,2,4));\n    \n    if (inSquare(rect1, uv, delta)) {\n    \n        factor1 = squareStrength(rect1, uv);\n    \n    }\n    \n    float factor2 = 0.0;\n    \n    vec3 col2 = 0.5 + 0.5*cos(iTime+vec3(2, 4, 0));\n    \n    if (inCircle(100.0, iMouse.xy, uv, delta)) {\n    \n        factor2 = circleStrength(100.0, iMouse.xy, uv);\n    \n    }\n    \n    float factor3 = 0.0;\n    \n    vec4 rect3 = vec4(88.0+70.0*cos(iTime), 312.0+70.0*sin(iTime), 512.0+70.0*sin(iTime), 288.0+ 70.0 * cos(iTime));\n    \n    vec3 col3 = 0.5 + 0.5*cos(iTime+vec3(4,0,2));\n    \n    if (inSquare(rect3, uv, delta)) {\n    \n        factor3 = squareStrength(rect3, uv);\n    \n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col1*factor1*lightFactor+vec3(0.5)*(1.0-factor1),1.0);\n    fragColor += vec4(col2*factor2*lightFactor+vec3(0.5)*(1.0-factor2),1.0);\n    fragColor += vec4(col3*factor3*lightFactor+vec3(0.5)*(1.0-factor3),1.0);\n    fragColor *= 0.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}