{
    "Shader": {
        "info": {
            "date": "1613058766",
            "description": "reupload - Clooooouds!",
            "flags": 0,
            "hasliked": 0,
            "id": "tt3Bz2",
            "likes": 38,
            "name": "Clooud City",
            "published": 3,
            "tags": [
                "clooouds"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 2292
        },
        "renderpass": [
            {
                "code": "//cloud city by eiffie\n#define size iResolution \n#define time iTime \n \nfloat focalDistance=1.0,aperture=0.01,shadowCone=0.3; \n \nfloat Rect(in vec3 z, vec3 r){return max(abs(z.x)-r.x,max(abs(z.y)-r.y,abs(z.z)-r.z));} \n#define TAO 6.283 \nvoid Kaleido(inout vec2 v,float power){float a=floor(.5+atan(v.x,-v.y)*power/TAO)*TAO/power;v=cos(a)*v+sin(a)*vec2(v.y,-v.x);} \n \n// See https://iquilezles.org/articles/morenoise \nfloat hash(float n) {return fract(sin(n) * 4378.54533);} \nfloat noyz(vec3 x) { \n vec3 p=floor(x),j=fract(x); \n const float tw=7.0,tx=13.0; \n float n=p.x+p.y*tw+p.z*tx; \n float a=hash(n),b=hash(n+1.0),c=hash(n+tw),d=hash(n+tw+1.0); \n float e=hash(n+tx),f=hash(n+1.0+tx),g=hash(n+tw+tx),h=hash(n+1.0+tw+tx); \n vec3 u=j*j*(3.0-2.0*j); \n return mix(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,e+(f-e)*u.x+(g-e)*u.y+(e-f-g+h)*u.x*u.y,u.z); \n} \n \nfloat fbm(vec3 p) { \n float h=noyz(p); \n h+=0.5*noyz(p*=2.3); \n return h+0.25*noyz(p*2.3);\n} \n \nvec4 mcol=vec4(0.0); \nconst float scl=0.08; \n \nfloat DE(vec3 z0){ \n float dW=100.0,dD=100.0; \n float dC=fbm(z0*0.25+vec3(100.0))*0.5+sin(z0.y)*0.1+sin(z0.z*0.4)*0.1+min(z0.y*0.04+0.1,0.1); \n vec2 v=floor(vec2(z0.x,abs(z0.z))*0.5+0.5); \n z0.xz=clamp(z0.xz,-2.0,2.0)*2.0-z0.xz; \n float r=length(z0.xz); \n float dS=r-0.6; \n if(r<1.0){ \n  float shape=0.285-v.x*0.02;//0.21-0.36 \n  z0.y+=v.y*0.2; \n  vec3 z=z0*10.0; \n  dS=max(z0.y-2.5,r-max(0.11-z0.y*0.1,0.01)); \n  float y2=max(abs(abs(mod(z.y+0.5,2.0)-1.0)-0.5)-0.05,abs(z.y-7.1)-8.3); \n  float y=sin(clamp(floor(z.y)*shape,-0.4,3.4))*40.0; \n  Kaleido(z.xz,8.0+floor(y));\n  dW=Rect(z,vec3(0.9+y*0.1,22.0,0.9+y*0.1))*scl; \n  dD=max(z0.y-1.37,max(y2,r*10.0-1.75-sin(clamp((z.y-0.5)*shape,-0.05,3.49))*4.0))*scl; \n  dS=min(dS,min(dW,dD)); \n } \n dS=min(dS,dC); \n if(dS==dW)mcol+=vec4(0.8,0.9,0.9,1.0);//+a for reflection \n else if(dS==dD)mcol+=vec4(0.6,0.4,0.3,0.0); \n else if(dS==dC)mcol+=vec4(1.0,1.0,1.0,-1.0);//-a for clouds \n else mcol+=vec4(0.7+sin(z0.y*100.0)*0.3,1.0,0.8,0.0); \n return dS; \n} \n \nfloat pixelSize; \nfloat CircleOfConfusion(float t){//calculates the radius of the circle of confusion at length t \n return max(abs(focalDistance-t)*aperture,pixelSize*(1.0+t)); \n} \nmat3 lookat(vec3 fw,vec3 up){ \n fw=normalize(fw);vec3 rt=normalize(cross(fw,normalize(up)));return mat3(rt,cross(rt,fw),fw); \n} \nfloat linstep(float a, float b, float t){return clamp((t-a)/(b-a),0.,1.);}// i got this from knighty and/or darkbeam \n//random seed and generator \nfloat randSeed;\nfloat randStep(){//a simple pseudo random number generator based on iq's hash \n return  (0.8+0.2*fract(sin(++randSeed)*4375.54531)); \n} \n \nfloat FuzzyShadow(vec3 ro, vec3 rd, float coneGrad, float rCoC){ \n float t=rCoC*2.0,d=1.0,s=1.0; \n for(int i=0;i<6;i++){ \n  if(s<0.1)continue; \n  float r=rCoC+t*coneGrad;//radius of cone \n  d=DE(ro+rd*t)+r*0.4; \n  s*=linstep(-r,r,d); \n  t+=abs(d)*randStep(); \n } \n return clamp(s*0.75+0.25,0.0,1.0); \n} \n \nvoid mainImage(out vec4 O, in vec2 U) {\n randSeed=fract(sin(time+dot(U,vec2(9.123,13.431)))*473.719245);\n pixelSize=2.0/size.y; \n float tim=time*0.25; \n vec3 ro=vec3(cos(tim),sin(tim*0.7)*0.5+0.3,sin(tim))*(1.8+.5*sin(tim*.41)); \n vec3 rd=lookat(vec3(0.0,0.6,sin(tim*2.3))-ro,vec3(0.1,1.0,0.0))*normalize(vec3((2.0*U.xy-size.xy)/size.y,2.0)); \n vec3 L=normalize(vec3(0.5,0.75,-0.5)); \n vec4 col=vec4(0.0);//color accumulator \n float t=DE(ro)*randSeed*.8;//tep();//distance traveled \n ro+=rd*t; \n for(int i=0;i<72+min(iFrame,0);i++){//march loop \n  if(col.w>0.9 || t>20.0)continue;//bail if we hit a surface or go out of bounds \n  float rCoC=CircleOfConfusion(t);//calc the radius of CoC \n  float d=DE(ro); \n  float fClouds=max(0.0,-mcol.a); \n  if(d<max(rCoC,fClouds*0.5)){//if we are inside add its contribution \n   vec3 p=ro; \n   if(fClouds<0.1)p-=rd*abs(d-rCoC);//back up to border of CoC \n   vec2 v=vec2(rCoC*0.333,0.0);//use normal deltas based on CoC radius \n   vec3 N=normalize(vec3(-DE(p-v.xyy)+DE(p+v.xyy),-DE(p-v.yxy)+DE(p+v.yxy),-DE(p-v.yyx)+DE(p+v.yyx))); \n   if(N!=N)N=-rd; \n   mcol*=0.143; \n   vec3 scol; \n   float alpha; \n   if(fClouds>0.1){//clouds \n    float dn=clamp(0.5-d,0.0,1.0);dn=dn*2.0;dn*=dn;//density \n    alpha=(1.0-col.w)*dn; \n    scol=vec3(1.0)*(0.6+dn*dot(N,L)*0.4); \n    scol+=dn*max(0.0,dot(reflect(rd,N),L))*vec3(1.0,0.5,0.0); \n     \n   }else{ \n    scol=mcol.rgb*(0.2+0.4*(1.0+dot(N,L))); \n    scol+=0.5*pow(max(0.0,dot(reflect(rd,N),L)),32.0)*vec3(1.0,0.5,0.0); \n    if(d<rCoC*0.25 && mcol.a>0.9){//reflect the ray if we hit a bulb \"directly enough\" \n     rd=reflect(rd,N);d=-rCoC*0.25;ro=p;t+=1.0; \n    } \n    scol*=FuzzyShadow(p,L,shadowCone,rCoC); \n    alpha=(1.0-col.w)*linstep(-rCoC,rCoC,-d-0.5*rCoC);//calculate the mix like cloud density \n   } \n   col+=vec4(scol*alpha,alpha);//blend in the new color \n  } \n  mcol=vec4(0.0);//clear the color trap \n  d=abs(d+0.33*rCoC)*randStep();//add in noise to reduce banding and create fuzz \n  ro+=d*rd;//march \n  t+=d; \n }//mix in background color \n vec3 scol=vec3(0.4,0.5,0.6)+rd*0.05+pow(max(0.0,dot(rd,L)),100.0)*vec3(1.0,0.75,0.5); \n col.rgb+=scol*(1.0-clamp(col.w,0.0,1.0)); \n \n O = vec4(clamp(col.rgb,0.0,1.0),1.0); \n} ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}