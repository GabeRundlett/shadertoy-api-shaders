{
    "Shader": {
        "info": {
            "date": "1545382087",
            "description": "xxxx",
            "flags": 0,
            "hasliked": 0,
            "id": "wdfGRM",
            "likes": 6,
            "name": "box-opRep-learn",
            "published": 3,
            "tags": [
                "learn"
            ],
            "usePreview": 0,
            "username": "takahiroando",
            "viewed": 604
        },
        "renderpass": [
            {
                "code": "// Original author is 我無\n// https://glslfan.com/?channel=-LScsXd7TDC0zkZ9cpzP\n\nprecision mediump float;\n\nconst float PI = 3.1415926;\n#define EPS 1e-4\n#define PI2 (PI * 2.0)\n// #define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat dSphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nvec3 opRep(vec3 p, vec3 c) {\n  return mod(p, c);// - 0.5 * c;\n}\n\nvec3 hsv(float h, float s, float v){\n  vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n  return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\nfloat dMenger(vec3 z0, vec3 offset, float scale) {\n  vec4 z = vec4(z0, 1.0);\n  for (int i = 0; i < 5; i++) {\n    z = abs(z);\n    if (z.x < z.y) z.xy = z.yx;\n    if (z.x < z.z) z.xz = z.zx;\n    if (z.y < z.z) z.yz = z.zy;\n    \n    z *= scale;\n    z.xyz -= offset * (scale - 1.0);\n    \n    if (z.z < -0.5 * offset.z * (scale - 1.0)) {\n      z.z += offset.z * (scale - 1.0);\n    }\n  }\n  return length(max(abs(z.xyz) - vec3(1.0), 0.0)) / z.w;\n}\n\nmat2 rotate(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat dScene(vec3 p) {\n  // p -= vec3(0.5);\n  p = opRep(p, vec3(3.0));\n  //p.xy *= rotate(3.0 * cos(time) * p.z);\n  float t = 1.0 + sin(iTime);\n  t *= 3.0;\n  // float d = dMenger(p, vec3(0.6, 0.9, abs(sin(iTime))), 2.46);\n  // float d = dSphere(p, 0.5);\n  float d = sdBox(p, vec3(.5));\n  return d;\n}\n\nfloat dBox(vec2 p, vec2 b) {\n\tvec2 d = abs(p) - b;\n\treturn max(d.x, d.y);\n}\n\nfloat dTriangle(vec2 p, vec2 s) {\n  return dBox(p, vec2(s.x - p.y * s.x / s.y, s.y));\n}\n\nfloat dTDFA(vec2 p) {\n  vec2 s = vec2(0.1, 0.1);\n  float d = dTriangle(p, s);\n  d = min(d, dTriangle((p - vec2(0.25, 0.0)) * vec2(1.0, -1.0), s));\n  d = min(d, dTriangle((p - vec2(-0.25, 0.0)) * vec2(1.0, -1.0), s));\n  return d;\n}\n\nfloat dTDFB(vec2 p) {\n  vec2 s = vec2(0.1, 0.1) * 0.4;\n  float d = dTriangle((p - vec2(-0.07, 0.0)), s);\n  d = min(d, dTriangle((p - vec2(0.3, -0.03)) * vec2(0.8, -0.8), s));\n  return d;\n}\n\nvoid mainImage(out vec4 outColor, in vec2 fragCoord) {\n  vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n  float duration = 4.0;\n  float t = fract(iTime / duration) * duration;\n  // ro=ray origin \n  // Y-up right-handedness coordinate\n  vec3 ro = vec3(1.0, 1.0, t - 1.0);\n  vec3 ta = vec3(0.0, 0.0, 0.0); // target\n\t\n  vec3 fwd = normalize(ta - ro);\n  vec3 right = cross(fwd, vec3(0, 1, 0));\n  vec3 up = cross(right, fwd);\n  vec3 rd = normalize(fwd + uv.x * right + uv.y * up);\n    \n  float distance = 0.0;\n  vec3 p = ro;\n  int step = 0;\n  for(int i = 0; i < 100; i++) {\n    step = i;\n    float d = dScene(p);\n    distance += d;\n    p = ro + distance * rd;\n    if (abs(d) < EPS) break;\n  }\n  \n  vec3 c = vec3(float(step) * 0.01);\n  // c += hsv(beat * 0.25 + 0.5 * p.z, 1.0, 1.0) * exp(-1.0 * fract(beat));\n  // float fog = 1.0 - exp(-0.05 * pow(distance, 2.0));\n  // c += vec3(0.2, 0.2, 1.0) * fog;\n  \n  // c = mix(c, vec3(0.0), 0.8 * saturate(-1000.0 * dTDFA(uv)));\n  // c += vec3(1.0, 0.1, 0.1) * saturate(0.01 / saturate(dTDFB(uv)));\n  \n  outColor = vec4(c, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}