{
    "Shader": {
        "info": {
            "date": "1619238844",
            "description": "Ray intersection with a bump.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssXSD2",
            "likes": 12,
            "name": "Bump Intersection",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "ray",
                "raycasting",
                "intersection",
                "bump",
                "cubic"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "const vec2 eta = vec2(-0.5, sqrt(0.75));\nint solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {\n    float h = 18.0 * a * b * c * d - 4.0 * b * b * b * d + b * b * c * c - 4.0 * a * c * c * c - 27.0 * a * a * d * d;\n\n    b /= a, c /= a, d /= a;\n    float d0 = b * b - 3.0 * c;\n    float d1 = (2.0 * b * b - 9.0 * c) * b + 27.0 * d;\n    float q = d1 * d1 - 4.0 * d0 * d0 * d0, j = sqrt(abs(q));\n\n    vec2 C = q < 0.0 ? vec2(d1, j) : vec2(d1 + j, 0.0);\n    if (abs(C.x) + abs(C.y) < 1e-3) C = vec2(d1 - j, 0.0);\n    float t = atan(C.y, C.x) / 3.0, r = pow(0.25 * dot(C, C), 1.0 / 6.0);\n    C = vec2(cos(t), sin(t));\n\n    float w = -d0 / r - r;\n    roots.x = (C.x * w - b) / 3.0;\n    roots.y = (dot(vec2(C.x, -C.y), eta) * w - b) / 3.0;\n    if (h > 0.0) roots.z = (dot(C, eta) * w - b) / 3.0;\n    else if (abs(dot(C.yx, eta)) < abs(C.y)) roots.x = roots.y;\n\n    return h < 0.0 ? 1 : 3;\n}\n\n// Implicit equation: y = 1 / (1 + sqrt(x^2 + y^2)^2)\n// ---> y = 1 / (1 + x^2 + y^2)\n// ---> x^2y + yz^2 + y - 1 = 0\nvec4 iBump(in vec3 ro, in vec3 rd, in float h) {\n    float xxzz = dot(ro.xz, ro.xz) + 1.0;\n    float xzuw = dot(ro.xz, rd.xz) * 2.0;\n    float uuww = dot(rd.xz, rd.xz);\n\n    float coeff1 = uuww * rd.y;\n    float coeff2 = rd.y * xzuw + uuww * ro.y;\n    float coeff3 = ro.y * xzuw + xxzz * rd.y;\n    float coeff4 = xxzz * ro.y - h;\n\n    vec3 roots;\n    int nroots = solveCubic(coeff1, coeff2, coeff3, coeff4, roots);\n    return vec4(roots, nroots);\n}\n\nvec3 nBump(in vec3 p, in float h) {\n    return normalize(vec3(p.x * p.y, 0.5 * dot(p.xz, p.xz) + 0.5, p.y * p.z));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = iMouse.z > 0.0 ? (iMouse.xy - center) / iResolution.y * 3.14 : vec2(-0.85, -0.5);\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 8.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Height\n    float h = 1.251 + 1.25 * sin(iTime);\n    vec2 offs = 2.0 * sin(2.0 * iTime + vec2(1.57, 0.0));\n    ro.xz -= offs;\n\n    vec4 hits = iBump(ro, rd, h);\n    int nHits = int(hits[3]);\n\n    // Find closest valid intersection\n    vec3 hitPos;\n    float tMin = 1000000.0;\n    bool flagHit = false;\n    for (int n=0; n < nHits; n++) {\n        vec3 hitCandid = ro + rd * hits[n];\n        if (hits[n] > 0.0 && hits[n] < tMin) {\n            hitPos = hitCandid;\n            tMin = hits[n];\n            flagHit = true;\n        }\n    }\n\n    if (flagHit) {\n        vec3 n = nBump(hitPos, h);\n\n        hitPos.xz += offs;\n        float diff = abs(dot(n, -rd));\n        float checkers = mod(dot(floor(hitPos.xz), vec2(1.0)), 2.0);\n\n        fragColor = mix(vec4(0.5 + 0.5 * checkers, 0.0, 0.0, 1.0), texture(iChannel0, reflect(-rd, n)), 0.25) * diff;\n    }\n\n    else {\n        fragColor = texture(iChannel0, rd);\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}