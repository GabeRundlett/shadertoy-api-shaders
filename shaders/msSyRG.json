{
    "Shader": {
        "info": {
            "date": "1687902533",
            "description": "fun and games!!!!",
            "flags": 0,
            "hasliked": 0,
            "id": "msSyRG",
            "likes": 16,
            "name": "goobabs",
            "published": 3,
            "tags": [
                "2d",
                "metaball",
                "glaggle"
            ],
            "usePreview": 0,
            "username": "oatmealine",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define RADIUS 0.11\n#define PI 3.14159\n\n// polynomial smooth min\nvec2 smin(float a, float b, float k) {\n    float h =  max( k-abs(a-b), 0.0 )/k;\n    float m = h*h*0.5;\n    float s = m*k*(1.0/2.0);\n    return (a<b) ? vec2(a-s,m) : vec2(b-s,1.0-m);\n}\n\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 sineLayer(float i, float seed, float time) {\n    vec2 mag = hash22(vec2(i, seed)) * 0.5;\n    vec2 speed = hash22(vec2(i, seed + 1.0));\n    vec2 offset = hash22(vec2(i, seed + 2.0));\n\n    return vec2(\n      sin(iTime * speed.x + offset.x * PI),\n      cos(iTime * speed.y + offset.y * PI)\n    ) * mag;\n}\n\nvec2 goobabPos(vec2 uv) {\n    float m = 9999.9;\n    float angle = 0.0;\n    \n    for (float i = 0.0; i < 10.0; i++) {\n        float var = 0.1;\n        vec2 pos = hash22(vec2(i, 0.0)) * var + (0.5 - var * 0.5);\n        \n        vec2 p = pos + sineLayer(i, 1.0, iTime) + sineLayer(i, 1.5, iTime) * 0.75 + sineLayer(i, 1.75, iTime) * 0.5 + sineLayer(i, 1.25, iTime) * 0.5;\n        \n        float dist = length(p - uv);\n        vec2 norm = normalize(p - uv);\n        float dotp = dot(norm, normalize(vec2(-1.0, -1.0)));\n        float ang = acos(dotp) / PI;\n        vec2 minres = smin(m, dist, 0.09);\n        m = minres.x;\n        angle = mix(angle, ang, minres.y);\n    }\n    \n    return vec2(m, angle);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float pix = 80.0;\n\n    uv.x -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv = floor(uv * pix) / pix;\n    uv.x += 0.5;\n    \n    vec2 uvP = uv;\n    \n    uv += vec2(sin(iTime + uv.y * 3.0), sin(iTime + uv.x * 2.0)) * 0.02;\n    \n    vec2 goo = goobabPos((uv - 0.5) * 1.1 + 0.5);\n    float dist = goo.x;\n    float angle = goo.y;\n    \n    float width = 1. / pix * 0.5;\n    \n    float outline = abs(dist - RADIUS) <= width ? 1.0 : 0.0;\n    float shine = max(1.0 - length(vec2(0.0, 0.5) - vec2(angle, dist / RADIUS)), 0.0) > 0.8 ? 1.0 : 0.0;\n    float shade = angle < 0.4 ? 1.0 : 0.0;\n    float ray = 0.0;\n    \n    for (float i = 0.0; i < 15.0; i++) {\n        vec2 poses = hash22(vec2(i, 0.0));\n        vec2 speedOffset = hash22(vec2(i, 1.0));\n        vec2 scaleBri = hash22(vec2(i, 2.0));\n        \n        float a = fract((iTime) / (10.0 + speedOffset.x * 10.0) + speedOffset.y);\n        float mn = min(poses.x, poses.y);\n        float mx = max(poses.x, poses.y);\n        float x = mix(mn - 0.5, mx + 0.5, a) + sin(uv.y * 10.0 + iTime * 0.2 + scaleBri.y * 50.0) * 0.01;\n        float bri = (abs(uv.x - (x - (1.0 - uv.y) * 0.6)) < 0.05 ? 1.0 : 0.0) * (1.0 - (1.0 - uv.y) * (1.2 + scaleBri.x * 1.5));\n        ray += max(0.0, bri) * (1.0 - abs(2.0 * a - 1.0)) * (0.5 + scaleBri.y * 0.5);\n    }\n    \n    vec3 col = mix(vec3(0.1, 0.1, 0.2), outline * vec3(1.0, 1.0, 1.0) + (\n        vec3(0.2, 0.6, 0.2) +\n        shine * vec3(1.0) +\n        shade * vec3(0.3, 0.8, 0.3)\n    ) * (dist < RADIUS ? 1.0 : 0.0), dist <= (RADIUS + width) ? 1.0 : 0.0)\n      + ray * vec3(0.4, 0.6, 1.0);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}