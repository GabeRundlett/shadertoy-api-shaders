{
    "Shader": {
        "info": {
            "date": "1600115815",
            "description": "pacman-caminando",
            "flags": 0,
            "hasliked": 0,
            "id": "ttSBWt",
            "likes": 3,
            "name": "pacman-caminando-v1",
            "published": 3,
            "tags": [
                "pacmancaminando"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 ) \n\n\nfloat sdSphere( vec3 p, float s )\n\t{    return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b ) \n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\nfloat sdTorus( vec3 p, vec2 t )     \n\t{ vec2 q = vec2(length(p.xz)-t.x,p.y);  return length(q)-t.y; }\nfloat sdCylinder( vec3 p, vec2 h )  \n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderYZ( vec3 p, vec2 h )  \n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )  \n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )   \n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdEllipsoid( vec3 p, vec3 r )\n\t{ float k0 = length(p/r);   float k1 = length(p/(r*r));  return k0*(k0-1.0)/k1; }\n\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB) \n{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB) \n{ return max(distA, -distB);}\n//-------------------------------------------\n\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi){\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n\nvec3 rotate_y(vec3 p, float phi) {\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi){\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\nvec2 rotatev2(vec2 p, float ang){\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nvec3 BocaSonrisa(vec3 p){\n \tvec3 res = vec3(9999.0, -1.0,-1.0);\n    float sdcy1= sdCylinderXY(p-vec3(-0.7,-1.5,0.0), vec2(3.0,3.0) );\n    float sdcy2= sdCylinderXY(p-vec3(-0.7,-1.5,0.0), vec2(2.0,3.5) );\n    float sdb1= sdBox(p-vec3(0.0,1.0,0.0), vec3(4.2,3.0,3.6));   \n    float dif; \n    dif= differenceSDF(sdcy1, sdcy2); \n    dif= differenceSDF(dif, sdb1); \n    res =opU3(res, vec3(dif,3.0,MATERIAL_NO));        \n    return res;\n}\n\nvec3 CabezaVersionIII(vec3 p){   \n\tvec3 res = vec3(9999.0, -1.0,-1.0);\n    \n    float CorneaDer= sdCylinderXY(p-vec3(2.5+sin(iTime),3.0,-3.0), vec2(0.5,5.3));\n    float CorneaIzq=sdCylinderXY(p-vec3(-2.5+sin(iTime),3.0,-3.0), vec2(0.5,5.3));\n    float OjoDer= sdCylinderXY(p-vec3(2.5,2.0,-3.0), vec2(2.0,5.0));\n    float OjoIzq= sdCylinderXY(p-vec3(-2.5,2.0,-3.0), vec2(2.0,5.0));\n    float sdCabeza= sdSphere(p-vec3(0.0,0.0,0.0), 6.5 );\n    //------------rotar piernas y pies\n    float posx=2.5; //es el centro del objeto\n    vec3 pp1=p;\n     pp1.x=pp1.x-posx;\n     pp1.yz = rotatev2(pp1.yz, -sin(iTime*2.0)*0.5 );\n     pp1.x=pp1.x+posx;\n     vec3 pp2=p;\n     pp2.x=pp2.x-posx;\n     pp2.yz = rotatev2(pp2.yz, -sin(iTime*2.0+PI)*0.5 );\n     pp2.x=pp2.x+posx;\n    //------------rotar piernas y pies\n    float sdt1=sdCylinderXZ(pp2-vec3(-6.2,-3.0,0.0), vec2(1.0,4.0) );\n    float sdt2= sdCylinderXZ(pp1-vec3(6.2,-3.0,0.0), vec2(1.0,4.0) );\n    float sdt3=sdCylinderXZ(pp1-vec3(-2.0,-6.0,0.0), vec2(1.0,4.0) ); //piernas\n    float sdt4= sdCylinderXZ(pp2-vec3(2.0,-6.0,0.0), vec2(1.0,4.0) ); //piernas\n    float sdt5=sdEllipsoid(pp1-vec3(-2.0,-10.0,0.0), vec3(1.0,1.0,2.0));  //pies\n    float sdt6=sdEllipsoid(pp2-vec3(2.0,-10.0,0.0), vec3(1.0,1.0,2.0)); //pies\n    \n    sdCabeza= unionSDF(sdCabeza, sdt1); \n    sdCabeza= unionSDF(sdCabeza, sdt2); \n    sdCabeza= unionSDF(sdCabeza, sdt3); \n    sdCabeza= unionSDF(sdCabeza, sdt4); \n    \n    sdCabeza= unionSDF(sdCabeza, sdt5); \n    sdCabeza= unionSDF(sdCabeza, sdt6); \n    \n    float sdCabezaOriginal=sdCabeza;\n    //diferencia ojo-cornea Izq y Der\n    //------------oooooooo--------------\n    float difOjoCorneaDer= differenceSDF(OjoDer, CorneaDer);   \n    float difOjoCorneaIzq= differenceSDF(OjoIzq, CorneaIzq);   \n    \n    \n    float intersecionOjoCorneaDer= intersectSDF(OjoDer,CorneaDer);\n    float intersecionOjoCorneaIzq= intersectSDF(OjoIzq,CorneaIzq);\n    //------------oooooooo--------------\n    //diferencia cabeza-ojo Der\n    float difCabezaOjoDer= differenceSDF(sdCabeza, OjoDer);   \n    float intersecionCabezaOjoDer= intersectSDF(sdCabeza,OjoDer);\n    float intersecionCabezaCorneaDer= intersectSDF(intersecionCabezaOjoDer,intersecionOjoCorneaDer);\n    //------------oooooooo--------------\n    //diferencia cabeza-ojo IZQ\n    sdCabeza=difCabezaOjoDer;\n    float difCabezaOjoIzq= differenceSDF(sdCabeza, OjoIzq); \n    float intersecionCabezaOjoIzq= intersectSDF(sdCabeza,OjoIzq);\n    float intersecionCabezaCorneaIzq= intersectSDF(intersecionCabezaOjoIzq,intersecionOjoCorneaIzq);\n    //------------oooooooo--------------\n    res =opU3(res, vec3(difCabezaOjoDer,24.0,MATERIAL_NO)); \n   res =opU3(res, vec3(intersecionCabezaOjoDer,1.0,MATERIAL_NO)); \n   res =opU3(res, vec3(intersecionCabezaCorneaDer,0.0,MATERIAL_NO));  \n    \n   res =opU3(res, vec3(difCabezaOjoIzq,24.0,MATERIAL_NO)); \n   res =opU3(res, vec3(intersecionCabezaOjoIzq,1.0,MATERIAL_NO)); \n   res =opU3(res, vec3(intersecionCabezaCorneaIzq,0.0,MATERIAL_NO));   \n   \n    ///------------Boca\n    sdCabeza=sdCabezaOriginal;\n    vec3 rBoca= BocaSonrisa(p-vec3(0.5,1.0,-7.5));\n    float boca=rBoca.x;\n    float difCabezaboca= differenceSDF(sdCabeza, boca);   \n    float intersecionCabezaBoca= intersectSDF(sdCabeza,boca);\n    res =opU3(res, vec3(intersecionCabezaBoca,2.0,MATERIAL_NO)); \n    return res;\n}   \n\n\n\n\n\nvec3 ArbolcaseroFruta(vec3 p){ \n   vec3 res = vec3(9999.0, -1.0,-1.0);\n   float sdcy1= sdCylinderXY(p-vec3(-0.5,1.0,0.0), vec2(1.5,0.5) );\n   float sdcy2= sdCylinderXY(p-vec3(0.0,0.5,-0.5), vec2(1.5,0.5) );\n   float sdcy3= sdCylinderXY(p-vec3(0.5,-0.5,0.25), vec2(1.5,0.5) );\n   float sdcy4= sdCylinderXY(  p-vec3(-1.5,-0.5,-0.25), vec2(1.5,0.5) );\n   float sdbor1=sdRoundBox(  p-vec3(-0.25,-3.0,0.0),  vec3(0.5,1.2,0.5), 0.25 );\n    //frutas\n   float sdcy5= sdCylinderXY(  p-vec3(0.0,0.5,-0.5), vec2(0.15,0.5) );\n   float sdcy6= sdCylinderXY(  p-vec3(0.8,0.75,-0.5), vec2(0.15,0.5) );\n   float sdcy7= sdCylinderXY(  p-vec3(0.5,-0.5,0.25), vec2(0.15,0.5) );\n   float sdcy8= sdCylinderXY(  p-vec3(0.5,0.5,0.25), vec2(0.15,0.5) );\n   float sdcy9= sdCylinderXY(  p-vec3(-1.5,-0.5,-0.25), vec2(0.15,0.5) );\n   \tres =opU3(res, vec3(sdcy1,31.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy2,32.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy3,33.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy4,31.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdbor1,11.0,MATERIAL_NO));\n    \n    res =opU3(res, vec3(sdcy5,2.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy6,2.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy7,2.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy8,2.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy9,2.0,MATERIAL_NO)); \n    \n   return res; \n}   \n\n\nvec3 CerroCasero(vec3 p){\n  vec3 res = vec3(9999.0, -1.0,-1.0);\n   float sdcy1= sdCylinderXY(  p-vec3(-3.5,3.0,0.0), vec2(3.5,0.5) );\n   float sdcy2= sdCylinderXY(  p-vec3(0.3,2.5,-0.5), vec2(4.5,0.5) );\n   float sdcy3= sdCylinderXY(  p-vec3(4.5,-3.5,0.25), vec2(4.5,0.5) );\n   float sdcy4= sdCylinderXY(  p-vec3(-4.5,-5.5,-0.25), vec2(6.5,0.5) );\n   \n    res =opU3(res, vec3(sdcy1,36.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy2,37.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy3,36.0,MATERIAL_NO)); \n    res =opU3(res, vec3(sdcy4,37.0,MATERIAL_NO));  \n    \n  return res; \n}   \n\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ){\t\n\tvec3 res;\n    vec3 pp, po;\n    po=p;\n    po.y=po.y-5.0;\n    \n    res = vec3(9999.0, -1.0,-1.0);\n    float planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared frente\n    float planeDist6 = p.z+40.0;  //pared atras\n    p.x=p.x-itime;\n    \n    res =opU3(res, vec3(planeDist1,104.0,MATERIAL_NO)); //inf\n   \tp.y=p.y-11.0;\n    p= rotate_y(p, radians(30.0+90.0*sin(iTime+PI)*0.5));\n    \n    vec3 q1=po;\n    q1.z=q1.z-11.0;\n    q1.y+=1.0;\n    float cx1=30.0;\n    q1.x = mod(q1.x+0.5*cx1,cx1)-0.5*cx1;\n    \n    vec3 sarbol2= ArbolcaseroFruta(q1-vec3(5.0,0.0,0.0));\n    res =opU3(res, sarbol2); \n    vec3 sarbol3= ArbolcaseroFruta(q1-vec3(-5.0,0.0,3.0));\n    res =opU3(res, sarbol3); \n    vec3 scerro1= CerroCasero(q1-vec3(0.0,0.0,5.0));\n    res =opU3(res, scerro1); \n\n    vec3 rescabeza= CabezaVersionIII(p);\n    res =opU3(res, rescabeza); \n    //return (dist, id_color, id_material)\n    \n    return res;\n}\n\n\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n  \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\n//----------------------------------------------------\n\n//-------------------------------\nvec3 getColorTextura( vec3 p, vec3 nor,  int i){\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n    if (i==104 ) { return tex3D(iChannel0, p/32., nor)*vec3(0.23,1.2,0.31); }\n    \n}\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos){   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {       \n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n     }\n    else\n    { return result; }\n   \t\n}\n\n//-------------------------------------------------\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material){\n   \tvec3 colobj;\n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));  colobj=coltex;\t}\n    return colobj;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    \n    float t; t=mod(iTime*4.0,360.0); itime=t; \n\tmObj.blnShadow=false;\n \tlight_pos1   = vec3(10.0, 6.0, 10.0 );  light_color1 = vec3( 1.0 );\n\tlight_pos2   = vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n\n    vec3 ro=vec3(t,3.0,-30.0);\n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    light_pos1+=ro;  light_pos2+=ro;\n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd; mObj.ro=ro;\n\n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n\n  \tfloat dif1=1.0;\n   \tvec3 col2,col3;\n    \n    vec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col3=result;\n    col= col3*dif1;\n    \n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n\nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat saturate(float f)\n{ return clamp(f,0.0,1.0);}\n\n\nvec3 hsv(vec3 c){\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n//por shane\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n; \n\n}\n\n//----------------------------------------------------\nvec3 getColor(int i){\n    float m;\nif (i==-2 ) { return mObj.color; }       \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\n   \n    if(i== 19 ) {return vec3(1, 0.5, 0);    } \n    if(i== 20 ) {return vec3(1.0, 1.0, 1.0); } \n    if(i== 21 ) {return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 22 ) {return vec3(0, 1, 1);} \n    if(i== 23 ) {return vec3(85./255., 205./255., 252./255.); } \n     if(i== 24 ){return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );;  } \n    if(i== 25 ) {return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \n    if(i== 26 ) {return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \n    if(i== 27 ){ \n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c; \n    } \n    if(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \n    if(i== 31 ) { return vec3(0.0, 0.6, 0.0);}\n  \tif(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \n    if(i== 31 ) { return vec3(0.0, 0.6, 0.0);}\n    if(i== 32 ) { return vec3(0.0, 1.0, 0.0);}\n    if(i== 33 ) { return  vec3(0.1, 1.0, 0.2);}\n      //--------tono cafe\n    if(i== 34 ) { return hsv(vec3(0.2, 1.0, 0.25));}   \n    if(i== 35 ) { return hsv(vec3(0.2, 1.0, 0.3));}\n    if(i== 36 ) { return hsv(vec3(0.1, 1.0, 0.3));}\n    if(i== 37 ){ return  hsv( vec3(0.1, 1.0, 0.2));}\n    \n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}