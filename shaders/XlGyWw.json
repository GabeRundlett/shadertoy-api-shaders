{
    "Shader": {
        "info": {
            "date": "1536633254",
            "description": "ray test 1",
            "flags": 0,
            "hasliked": 0,
            "id": "XlGyWw",
            "likes": 2,
            "name": "ray test 1",
            "published": 3,
            "tags": [
                "raytest"
            ],
            "usePreview": 0,
            "username": "teebnike",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "float sdSphere( vec3 p, float s )\n{\n    float x = cos(p.x)*1.5;\n    float y = sin(p.y)*1.5;\n    float z = cos(p.z)*1.5;\n    return length(vec3(x,y,z))-s;\n}\n\nfloat udBox(vec3 p, vec3 b )\n{\n  float x = cos(p.x)*1.5;\n  float y = sin(p.y)*1.5;\n  float z = sin(p.z)*1.5;\n  return length(max(abs(vec3(x,y,z))-b,0.));\n}\n\t\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  float x = cos(p.x)*1.5;\n  float y = sin(p.y)*1.5;\n  \n  return length(max(abs(vec3(x,y,p.z))-b,0.0))-r;\n}\n\t\n\t\n\n\n\nfloat map(vec3 p){\n    \n    vec3 p2 =vec3(0.,0.,-4.) - p;\n    p2.z += iTime*4.5;\n    \n    \n    //float angle = iTime*0.01;\n   // float x = sin(angle)*p2.x - cos(angle) * p2.z;\n   // float y = cos(angle)*p2.x + sin(angle) * p2.z;\n  //  p2.x = x;\n   // p2.z = y;\n    float d = sdSphere(p2,1.);\n    \n    vec3 p3 =vec3(0.,0.,-4.) - p;\n    p3.z += iTime*4.5;\n   /// d = min(d,udBox(p3,vec3(.5,.5,.5)));\n    \n    //vec3 p4 =vec3(-3,sin(iTime),-4.) - p;\n    //d = min(d,sdSphere(p4,1.));\n\t//d = min(d,udRoundBox(vec3(1.,-1.,-20.)-p,vec3(1.,1.,1.),0.1));\n    return d;\n}\n\nvec3 calcNormal(in vec3 p){\n\tvec2 e = vec2(1.0 , -1.0) *0.0005;\n    return normalize(\n    \te.xyy * map(p + e.xyy) +\n        e.yyx * map(p + e.yyx) +\n        e.yxy * map(p + e.yxy) +\n        e.xxx * map(p + e.xxx)\n    );\n}\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float precis = 0.0001;\n\tconst float maxt = 10.0;\n\n    float t = 0.0;\n    for( int i=0; i<200; i++ )\n    {\n\t    float h = map( ro+rd*t );\n        if( h<precis || t>maxt ) break;\n        t += h;\n    }\n\n    if( t>maxt ) t=-1.0;\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n\t\n    \n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    \n    vec3 ro = vec3(0,0,1);\n    \n   \tvec3 rd = normalize(vec3(q,0.) - ro);\n    \n    float t,h = 1.;\n    \n    for(int i = 0; i<256; i++){\n\t\th = map(ro + rd * t);\n        t += h;\n        if (h<0.01) break;\n    }\n    \n    if(h<0.01){\n    \tvec3 p = ro +rd *t;\n        vec3 normal = calcNormal(p);\n        vec3 light = normalize(vec3(0,2,1));\n        \n        float col = dot(light,normal);\n       \n        \n        rd = reflect(rd,normal);\n        ro = p + normal*0.001;\n        \n      \n        float t2 = intersect(ro,rd);\n        fragColor = vec4(1.);\n       \n       \t\n        \n        fragColor *= vec4(vec3(col),1.);\n        \n         if(t2 < 0.0){\n        \n            fragColor *= vec4(0.8);\n        }\n        \n    }else{\n    \n    \tfragColor = vec4(0.4,0.5,0.8,1.0);\n    }\n    \n        \n    \n  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}