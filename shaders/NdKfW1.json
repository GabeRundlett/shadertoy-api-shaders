{
    "Shader": {
        "info": {
            "date": "1658103545",
            "description": "simple -crux-2d-",
            "flags": 0,
            "hasliked": 0,
            "id": "NdKfW1",
            "likes": 6,
            "name": "simple -crux-2d-",
            "published": 3,
            "tags": [
                "simplecrux2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//simple -crux-2d---17-jul/2022\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\nvec3 cruzdos(vec2 p, vec3 colOut)\n{   vec2 p0=p;\n    vec2 pr= Rotate(p,vec2(0.0),0.79) ;\n    float  d1a=sdBox(pr,vec2(3.0));\n    float  d1b=sdBox(pr,vec2(2.5));\n    float dif= differenceSDF(d1a, d1b);\n    \n    p.x=abs(p.x)-5.0;\n    p.y=abs(p.y)-0.1;\n    float d2a= sdTriangleIsosceles( p,vec2(2.0) );\n    \n    p=p0.yx;\n    p.x=abs(p.x)-5.0;\n    p.y=abs(p.y)-0.1;\n    float d2b= sdTriangleIsosceles( p,vec2(2.0) );\n    vec3 colbg= vec3(0.0);\n    colOut= DrawFigBorde(colbg, colOut, dif);\n    colOut= DrawFigBorde(colbg, colOut,d2a);\n    colOut= DrawFigBorde(colbg, colOut,d2b);\n    return colOut;        \n}\n\n\nvec3 triangulosdiv(vec2 p, vec3 colOut)\n{   vec2 pr= Rotate(p,vec2(0.0),0.79) ;\n    float  d1a=sdBox(pr,vec2(7.0));\n    float  d1b=sdBox(pr,vec2(6.5));\n    \n    float  d2a=sdBox(p,vec2(0.5,15.0));  //linea vertical\n    float  d2b=sdBox(p,vec2(15.0,0.5));  //linea hor\n    \n    float dif1= differenceSDF(d1a, d1b);\n    dif1= differenceSDF(dif1, d2a);\n    dif1= differenceSDF(dif1, d2b);\n    \n    colOut= DrawFigBorde(vec3(0.0), colOut, dif1);\n    return colOut;        \n}\n\nvec3 triangulosdivMed(vec2 p, vec2 med ,vec3 colOut)\n{   vec2 pr= Rotate(p,vec2(0.0),0.79) ;\n    float  d1a=sdBox(pr,med);\n    float  d1b=sdBox(pr,med-vec2(0.5));\n    \n    float  d2a=sdBox(p,vec2(0.5,20.0));  //linea vertical\n    float  d2b=sdBox(p,vec2(20.0,0.5));  //linea hor\n    \n    float dif1= differenceSDF(d1a, d1b);\n    dif1= differenceSDF(dif1, d2a);\n    dif1= differenceSDF(dif1, d2b);\n    \n    colOut= DrawFigBorde(vec3(0.0), colOut, dif1);\n    return colOut;        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,0.0);\n    float esc=12.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0);\n    \n    float t=iTime;\n    uv= Rotate(uv,vec2(0.0),sin(2.01+t-2.0*cos(t+ 3.0*sin(t)))) ;\n     \n    col= cruzdos(uv, col);\n    col= triangulosdivMed(uv, vec2(7.0),col);\n    col= triangulosdivMed(uv, vec2(9.0),col);\n    col= triangulosdivMed(uv, vec2(11.0),col);\n    col= triangulosdivMed(uv, vec2(13.0),col);\n    col= triangulosdivMed(uv, vec2(15.0),col);\n    \n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}