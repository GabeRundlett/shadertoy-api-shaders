{
    "Shader": {
        "info": {
            "date": "1591806240",
            "description": "LED clock",
            "flags": 0,
            "hasliked": 0,
            "id": "tllyz7",
            "likes": 6,
            "name": "LED Clock",
            "published": 3,
            "tags": [
                "clock",
                "led",
                "digits"
            ],
            "usePreview": 0,
            "username": "Oggbog",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "//   Segment numbers\n//   ===============\n//\n//\t\t 0\n//\t\t###\n//\t   #   #\n//\t  1#   #2\n//\t   # 3 #\n//\t\t###\n//\t   #   #\n//\t  4#   #5\n//\t   #   #\n//\t\t###\n//\t\t 6\n\n\n\n\nfloat segment(vec2 uv,int o){\n    \n    \n    float d = o==1 ? abs(uv.x):abs(uv.y);\n   \n    d = smoothstep(0.11,0.101,d);\n    d *= smoothstep(0.49,0.488,abs(uv.x+uv.y));\n    d *= smoothstep(0.49,0.488,abs(uv.x-uv.y));\n    \n    return d;\n}\n\nfloat digit(vec2 uv,int n){\n    float d = 0.0;\n    float b = 0.2; // brightness\n    uv *= 2.4;\n    // segment 0\n    if(n!=1 && n!=4){\n    \td += segment(uv-vec2(0.0,1.0),0);\n    } else {\n        d += segment(uv-vec2(0.0,1.0),0)*b;\n    }\n    // segment 1\n    if (n!=1 && n!=2 && n!=3 && n!=7){\n    \td += segment(uv-vec2(-0.5,0.5),1);\n    } else {\n        d += segment(uv-vec2(-0.5,0.5),1)*b;\n    }\n    // segment 2\n    if (n!=5 && n!=6){ \n    \td += segment(uv-vec2(0.5),1);\n    } else {\n        d += segment(uv-vec2(0.5),1)*b;\n    }\n    // segment 3\n    if (n!=0 && n!=1 && n!=7){\n    \td += segment(uv,0);\n    } else {\n        d += segment(uv,0)*b;\n    }\n    // segment 4\n    if(n==0 || n==2 || n==6 || n==8){\n    \td += segment(uv-vec2(-0.5),1);\n    } else {\n        d += segment(uv-vec2(-0.5),1)*b;\n    }\n    // segment 5\n    if(n!=2){\n    \td += segment(uv-vec2(0.5,-0.5),1);\n    } else {\n        d += segment(uv-vec2(0.5,-0.5),1)*b;\n    }\n    // segment 6\n    if(n!=1 && n!=4 && n!=7){\n    \td += segment(uv-vec2(0.0,-1.0),0);\n    } else {\n        d += segment(uv-vec2(0.0,-1.0),0)*b;\n    }\n    return d;\n}\n\nfloat box(vec2 uv){\n    float d = abs(uv.x);\n    \n    d = smoothstep(0.05,0.045,d) * smoothstep(0.05,0.045,abs(uv.y));\n    \n    return d;\n}\n\nfloat colon(vec2 uv){\n    \n    float d = box(uv-vec2(0.0,0.13));\n    \n    d += box(uv-vec2(0.0,-0.13));\n    \n    return d;\n    \n}\n\nfloat clock(vec2 uv){\n    float d = 0.0;\n    float time = iDate.w;\n    \n    float hour = floor(time/3600.0);\n    float minute = floor((time - hour*3600.0)/60.0);\n    float second = time - hour*3600.0 - minute*60.0;\n        \n    d += digit(uv-vec2(-1.55,0.0),int(floor(hour/10.0)));\n    d += digit(uv-vec2(-1.0,0.0),int(floor(mod(hour,10.0))));\n    \n    d += colon(uv-vec2(-0.65,0.0));\n    \n    d += digit(uv-vec2(-0.3,0.0),int(floor(minute/10.0)));\n    d += digit(uv-vec2(0.25,0.0),int(floor(mod(minute,10.0))));\n    \n    d+= colon(uv-vec2(0.6,0.0));\n    \n    d += digit(uv-vec2(0.95,0.0),int(floor(second/10.0)));\n    d += digit(uv-vec2(1.5,0),int(floor(mod(second,10.0))));    \n    \n    return d;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates and adjust aspect ratio\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    uv *= 2.5; \n    \n    float d = clock(uv);\n    \n    vec3 col = vec3(0.0,d,0.0);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}