{
    "Shader": {
        "info": {
            "date": "1685415630",
            "description": "combining waves of increasing frequency",
            "flags": 32,
            "hasliked": 0,
            "id": "cltXzM",
            "likes": 1,
            "name": "fractal pools",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "metal",
                "liquid"
            ],
            "usePreview": 0,
            "username": "flylo",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "const int[18] ns = int[](-1, -1, 0, -1, 1, -1, -1, 0, 1, 0, 0, 0, -1, 1, 0, 1, 1, 1);\n\nvec4 texel(in ivec2 x) {\n    return texelFetch( iChannel0, x, 0 );\n}\n\nvec4 avg( in ivec2 px )\n{\n \n    vec4 sum = vec4(0.);\n        \n    for (int i = 0; i < 18; i += 2) {\n       vec4 n = texel(px+ivec2(ns[i%18],ns[(i%18)+1]));\n       sum += n;\n    }\n \n   return sum/9.;\n   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 iv = ivec2(fragCoord);\n    fragColor = avg(iv);\n    fragColor = texel(iv);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 pools(in vec2 uv)\n{\n    float dt  = .5+.5*sin(.16*iTime);\n    float dt2 = .5+.5*sin(.48*iTime);\n    float mdt = dt;\n    float mdt2 = .7+.3*dt2;\n    \n    float dt3 = .5+.5*sin(.14*iTime);\n    float dt4 = .5+.5*sin(.53*iTime);\n    float mdt3 = dt3;\n    float mdt4 = .7+.3*dt4;\n\n    float dt5  = .5+.5*sin(.15*iTime);\n    float dt6 = .5+.5*sin(1.5+.49*iTime);\n    float mdt5 = dt5;\n    float mdt6 = .7+.3*dt6;\n\n    float dt7  = .5+.5*sin(.3*iTime);\n    float mdt7 = .1+.9*dt7;\n\n    float dt8  = .5+.5*sin(1.5+.2*iTime);\n    float mdt8 = .9+.1*dt8;\n\n\n    //uv = vec2(sin(25.*uv));\n\n    float r2 = length(uv)*length(uv);\n\n    vec3 c = vec3(0.);\n    float a = 1.;\n    float f = 12.;\n    float as = 0.;\n    for (int i = 0; i < 3; i++) {\n        c.r += a*(mdt)*(.5+.5*sin(15.*mdt2+f*mdt2*2.2*uv.x));\n        c.g += a*(mdt3)*(.5+.5*sin(11.*mdt4+f*mdt4*2.1*uv.y));\n        c.b += a*(mdt5)*.7*length(sin(22.*mdt6+f*mdt6*1.4*uv));\n        as += a;\n        f *= 1.3+length(c);\n        //f *= 1.33;\n        a *= 1.2; \n    }\n    c /= as;\n   \n    //c = vec3(uv.x, uv.y, uv.x/uv.y);  \n    //c = vec3(1.+sin(21.*uv), 0.);\n  \n    for(int i = 0; i < 0; i++) {\n        //uv = vec2(sin(uv.x), sin(uv.y));\n        float r3 = length(c)*length(c)*length(c);\n        //c = c*(1./(vec3(.4*mdt7+r3)));\n       \n        float k = 1.;\n        float k2 = 1.1;\n        //c = clamp(c, -1., 1.);        \n        c = vec3((1./(k+k2*c.r*r3)), ( 1./(k+k2*c.g*r3)), ( 1./(k+k2*c.b*r3)));\n        c = tan(c);\n        \n        //uv = vec2(mdt5*sin(tan(.005*mdt3*uv.x)), mdt6*sin(tan(.2 + .5*mdt4*uv.y)));\n        //uv = vec2(115.*mdt5*tan(.3*uv.x), 1.); // 1.*mdt6*tan(.004*mdt4*uv.y));\n        //c = vec2(tan(1.*sin(1.2*mdt5*uv.x)), tan(1.*sin(1.2*mdt6*uv.y)));\n        //uv = vec2(uv.x*sin(r2)-uv.y*cos(r2), uv.x*cos(r2)+uv.y*sin(r2));\n        //uv = vec2(cos(.2*(uv.x-uv.y)), sin(.3*(uv.x-uv.y)));\n   \n    }\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(uv.xyx+vec3(0,2,4));\n    return c;\n    \n}\n\n\nvec3 warp(in vec2 uv) {\n    vec3 c = pools(uv);\n    \n    int iter = 0;\n    float amp = 334.9;\n    float f = .00112;\n\n    float a = 1.; \n    for (int i = 0; i < iter; i++) {\n       a *= amp;\n    }\n       \n    for (int i = 0; i < iter; i++) {\n        a /= amp;\n        f *= 1.2;\n        c = a*pools(uv + f*vec2(c.r-c.g, c.g - c.b)) ;\n    }\n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 px = ivec2( fragCoord );\n\n    vec2 uv = fragCoord/iResolution.xy;\n // vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    //rstate = dot(uv, vec2(711.9898,1123.233));\n \n    //cur = texelFetch(iChannel0, px, 0 );\n\n    fragColor = vec4(warp(uv), 1.);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}