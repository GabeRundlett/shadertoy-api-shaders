{
    "Shader": {
        "info": {
            "date": "1598936116",
            "description": "I finally learned how to use buffers, yay! This works by repeatedly averaging what would be the next frame with the previous frame, to make the next frame.",
            "flags": 32,
            "hasliked": 0,
            "id": "wtSfWD",
            "likes": 7,
            "name": "Single-Buffer Motion Blur",
            "published": 3,
            "tags": [
                "motionblur",
                "demo",
                "buffer"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 775
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    fragColor = texture(iChannel0,fragCoord/iResolution.xy).rgba;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define s1 sin(iTime*5.0)\n#define c1 cos(iTime*5.0)\n#define s2 sin((iTime+(iTime/float(iFrame))/4.0)*5.0)\n#define c2 cos((iTime+(iTime/float(iFrame))/4.0)*5.0)\n#define s3 sin((iTime+2.0*(iTime/float(iFrame))/4.0)*5.0)\n#define c3 cos((iTime+2.0*(iTime/float(iFrame))/4.0)*5.0)\n#define s4 sin((iTime+3.0*(iTime/float(iFrame))/4.0)*5.0)\n#define c4 cos((iTime+3.0*(iTime/float(iFrame))/4.0)*5.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float col = 0.0;\n    vec2 uv = (fragCoord-(iResolution.xy/2.0))/iResolution.y;\n    vec2 off1 = uv - vec2(s1, c1)/vec2(2.0,5.0);\n    vec2 off2 = uv - vec2(s2, c2)/vec2(2.0,5.0);\n    vec2 off3 = uv - vec2(s3, c3)/vec2(2.0,5.0);\n    vec2 off4 = uv - vec2(s4, c4)/vec2(2.0,5.0);\n    if(dot(off1, off1)<0.1){\n        col += 0.25;\n    }\n    if(dot(off2, off2)<0.1){\n        col += 0.25;\n    }\n    if(dot(off3, off3)<0.1){\n        col += 0.25;\n    }\n    if(dot(off4, off4)<0.1){\n        col += 0.25;\n    }\n    col = (col+texture(iChannel0,fragCoord/iResolution.xy).r)/2.0;\n    fragColor = vec4(col,col,col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}