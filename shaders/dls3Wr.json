{
    "Shader": {
        "info": {
            "date": "1671642272",
            "description": "We can combine the quadratic SDF from [1] with the winding rule trick from [2] and render fonts directly from their Bézier control points!\n\n[1] https://www.shadertoy.com/view/MlKcDD\n[2] https://www.shadertoy.com/view/Nt2yzd",
            "flags": 0,
            "hasliked": 0,
            "id": "dls3Wr",
            "likes": 34,
            "name": "Direct font → SDF rendering",
            "published": 3,
            "tags": [
                "sdf",
                "bezier",
                "font",
                "quadratic",
                "windingrule"
            ],
            "usePreview": 0,
            "username": "mkeeter",
            "viewed": 2158
        },
        "renderpass": [
            {
                "code": "// Using distance-to-quadratic and winding number to generate a closed-form\n// distance field of a font outline, which is specified as lines + quadratic\n// Bézier curves.\n//\n// Quadratic solver is based on https://www.shadertoy.com/view/MlKcDD, which\n// includes the following copyright notice:\n//\n//      Copyright © 2018 Inigo Quilez\n//      Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Curves are baked by an external tool\n#define QUAD_COUNT 38\nconst vec2 QUADS[QUAD_COUNT * 3] = vec2[QUAD_COUNT * 3](\n    vec2(0.5758487, -4.5724106), vec2(0.5758487, -4.9204984), vec2(0.7176622, -5.221315),\n    vec2(0.7176622, -5.221315), vec2(0.8594757, -5.5221314), vec2(1.1216158, -5.758487),\n    vec2(0.7520412, -2.0842285), vec2(0.8594757, -1.6974645), vec2(1.0034379, -1.3859046),\n    vec2(0.86162436, -3.5904598), vec2(0.5758487, -3.9664803), vec2(0.5758487, -4.5724106),\n    vec2(1.0034379, -1.3859046), vec2(1.1474, -1.0743446), vec2(1.3837559, -0.8036098),\n    vec2(1.1216158, -5.758487), vec2(1.3708637, -5.9819508), vec2(1.7103566, -6.1087236),\n    vec2(1.3794585, -4.9591746), vec2(1.3794585, -4.563816), vec2(1.5642458, -4.3038244),\n    vec2(1.3837559, -0.8036098), vec2(1.6072196, -0.55006444), vec2(1.9058874, -0.3996562),\n    vec2(1.5642458, -4.3038244), vec2(1.7490331, -4.0438333), vec2(2.101418, -3.8762355),\n    vec2(1.6630855, -2.9823806), vec2(1.1474, -3.2144392), vec2(0.86162436, -3.5904598),\n    vec2(1.6673828, -5.599484), vec2(1.3794585, -5.337344), vec2(1.3794585, -4.9591746),\n    vec2(1.6974645, -0.0021486892), vec2(1.2892135, -0.12892136), vec2(0.99269444, -0.30941126),\n    vec2(1.7103566, -6.1087236), vec2(2.0498495, -6.235496), vec2(2.419424, -6.235496),\n    vec2(1.9058874, -0.3996562), vec2(2.2045553, -0.24924795), vec2(2.599914, -0.24924795),\n    vec2(2.101418, -3.8762355), vec2(2.4151268, -3.7258272), vec2(2.718092, -3.616244),\n    vec2(2.2862053, -2.7266867), vec2(1.9252255, -2.862054), vec2(1.6630855, -2.9823806),\n    vec2(2.363558, -5.8616242), vec2(1.9553072, -5.8616242), vec2(1.6673828, -5.599484),\n    vec2(2.419424, -6.235496), vec2(2.840567, -6.235496), vec2(3.173614, -6.106575),\n    vec2(2.5139663, 0.12462398), vec2(2.1057155, 0.12462398), vec2(1.6974645, -0.0021486892),\n    vec2(2.599914, -0.24924795), vec2(2.896433, -0.24924795), vec2(3.117748, -0.32660076),\n    vec2(2.718092, -3.616244), vec2(3.0210571, -3.506661), vec2(3.3046842, -3.382037),\n    vec2(2.9265146, -2.4795873), vec2(2.647185, -2.5913193), vec2(2.2862053, -2.7266867),\n    vec2(3.0167596, -5.7133646), vec2(2.7503223, -5.8616242), vec2(2.363558, -5.8616242),\n    vec2(3.117748, -0.32660076), vec2(3.3390632, -0.40395358), vec2(3.4765792, -0.54576707),\n    vec2(3.173614, -6.106575), vec2(3.506661, -5.9776535), vec2(3.781693, -5.8057585),\n    vec2(3.3046842, -3.382037), vec2(3.5625267, -3.270305), vec2(3.8010314, -3.1284916),\n    vec2(3.4679844, -5.315857), vec2(3.2831972, -5.565105), vec2(3.0167596, -5.7133646),\n    vec2(3.4765792, -0.54576707), vec2(3.6140952, -0.6875806), vec2(3.6807046, -0.8788139),\n    vec2(3.54104, -2.0004296), vec2(3.3347657, -2.316287), vec2(2.9265146, -2.4795873),\n    vec2(3.6807046, -0.8788139), vec2(3.747314, -1.0700473), vec2(3.747314, -1.3192952),\n    vec2(3.747314, -1.3192952), vec2(3.747314, -1.6845723), vec2(3.54104, -2.0004296),\n    vec2(3.775247, -4.7400084), vec2(3.657069, -5.0580144), vec2(3.4679844, -5.315857),\n    vec2(3.8010314, -3.1284916), vec2(4.039536, -2.9866781), vec2(4.2157283, -2.7975934),\n    vec2(3.9879673, -4.073915), vec2(3.893425, -4.4220023), vec2(3.775247, -4.7400084),\n    vec2(3.996562, -0.3996562), vec2(3.3992264, 0.12462398), vec2(2.5139663, 0.12462398),\n    vec2(4.2157283, -2.7975934), vec2(4.4091105, -2.5827246), vec2(4.501504, -2.3270304),\n    vec2(4.501504, -2.3270304), vec2(4.593898, -2.0713365), vec2(4.593898, -1.7318435),\n    vec2(4.593898, -1.7318435), vec2(4.593898, -0.92393637), vec2(3.996562, -0.3996562)\n);\n\n#define LINE_COUNT 8\nconst vec2 LINES[LINE_COUNT * 2] = vec2[LINE_COUNT * 2](\n    vec2(0.40395358, -2.0842285), vec2(0.7520412, -2.0842285),\n    vec2(0.46411687, 0.0042973785), vec2(0.40395358, -2.0842285),\n    vec2(0.80790716, 0.0042973785), vec2(0.46411687, 0.0042973785),\n    vec2(0.99269444, -0.30941126), vec2(0.80790716, 0.0042973785),\n    vec2(3.781693, -5.8057585), vec2(3.9578855, -6.09798),\n    vec2(3.9578855, -6.09798), vec2(4.301676, -6.09798),\n    vec2(4.301676, -6.09798), vec2(4.336055, -4.073915),\n    vec2(4.336055, -4.073915), vec2(3.9879673, -4.073915)\n);\n\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat cro(in vec2 a, in vec2 b) { return a.x * b.y - a.y * b.x; }\n\n// signed distance to a quadratic bezier\nfloat sdBezier(in vec2 pos, in vec2 A, in vec2 B, in vec2 C) {\n    vec2 a = B - A;\n    vec2 b = A - 2.0 * B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b, b);\n    float kx = kk * dot(a, b);\n    float ky = kk * (2.0 * dot(a, a) + dot(d, b)) / 3.0;\n    float kz = kk * dot(d, a);\n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx * kx;\n    float q  = kx * (2.0 * kx * kx - 3.0 * ky) + kz;\n    float p3 = p * p * p;\n    float q2 = q * q;\n    float h  = q2 + 4.0 * p3;\n\n    if(h >= 0.0) { // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n\n        // When p≈0 and p<0, h - q has catastrophic cancelation. So, we do\n        // h=√(q² + 4p³)=q·√(1 + 4p³/q²)=q·√(1 + w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1 + ½w) so that the q's\n        // cancel each other in h - q. Expanding and simplifying further we\n        // get x=vec2(p³/q, -p³/q - q). And using a second degree Taylor\n        // expansion instead: x=vec2(k, -k - q) with k=(1 - p³/q²)·p³/q\n        if(abs(abs(h/q) - 1.0) < 0.0001) {\n            float k = (1.0 - p3 / q2) * p3 / q;  // quadratic approx\n            x = vec2(k, -k - q);\n        }\n\n        vec2 uv = sign(x) * pow(abs(x), vec2(1.0/3.0));\n        float t = clamp(uv.x + uv.y - kx, 0.0, 1.0);\n        vec2  q = d + (c + b * t) * t;\n        res = dot2(q);\n        sgn = cro(c + 2.0 * b * t, q);\n    } else { // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q / (p * z * 2.0)) / 3.0;\n        float m = cos(v);\n        float n = sin(v) * 1.732050808;\n        vec3  t = clamp(vec3(m + m, -n - m, n - m) * z - kx, 0.0, 1.0);\n        vec2  qx=d + (c + b * t.x) * t.x;\n        float dx = dot2(qx), sx = cro(c + 2.0 * b * t.x, qx);\n        vec2  qy=d + (c + b * t.y) * t.y;\n        float dy = dot2(qy);\n        float sy = cro(c + 2.0 * b * t.y, qy);\n        if (dx<dy) {\n            res=dx;\n            sgn=sx;\n        } else {\n            res=dy;\n            sgn=sy;\n        }\n    }\n\n    return sqrt(res) * sign(sgn);\n}\n\n// Source: https://www.shadertoy.com/view/wdBXRW\nfloat winding_sign(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 e = b - a;\n    vec2 w = p - a;\n\n    // winding number from http://geomalgorithms.com/a03-_inclusion.html\n    bvec3 cond = bvec3(p.y >= a.y, \n                       p.y < b.y, \n                       e.x*w.y > e.y*w.x);\n    if( all(cond) || all(not(cond))) {\n        return -1.0;\n    } else {\n        return 1.0;\n    }\n}\n\nfloat winding_angle(in vec2 p, in vec2 a, in vec2 b) {\n    float pa = dot2(a - p);\n    float pb = dot2(b - p);\n    float ab = dot2(a - b);\n    float ang = acos((pa + pb - ab) / (2.0 * sqrt(pa * pb)));\n    return sign(cro(a - p, b - p)) * ang;\n}\n\nfloat udSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    p = (p + vec2(0.5, 0.75)) * vec2(4.0, -4.0);\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    m = (m + vec2(0.5, 0.75)) * vec2(4.0, -4.0);\n\n    float d = 1e10;\n    float winding = 1.0;\n    for (int i=0; i < QUAD_COUNT; i++) {\n        vec2 v0 = QUADS[i * 3];\n        vec2 v1 = QUADS[i * 3 + 1];\n        vec2 v2 = QUADS[i * 3 + 2];\n\n        float sd = sdBezier(p, v0, v1, v2);\n        d = min(d, abs(sd));\n\n        if (sd > 0.0 == cro(v1 - v2, v1 - v0) < 0.0) {\n            winding *= winding_sign(p, v0, v1);\n            winding *= winding_sign(p, v1, v2);\n        } else {\n            winding *= winding_sign(p, v0, v2);\n        }\n    }\n    for (int i=0; i < LINE_COUNT; i++) {\n        vec2 v0 = LINES[i * 2];\n        vec2 v1 = LINES[i * 2 + 1];\n        d = min(d, udSegment(p, v0, v1));\n        winding *= winding_sign(p, v0, v1);\n    }\n\n    d *= winding;\n\n    // Apply a color based on signed distance\n    vec3 col = vec3(1.0) - vec3(0.1, 0.4, 0.7) * sign(d);\n    col *= 1.0 - exp(-4.0 * abs(d));\n    col *= 0.8 + 0.2 * cos(60.0 * d);\n    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    // Draw the mouse stuff\n    if(iMouse.z > 0.001) {\n        float d = 1e10;\n        for (int i=0; i < QUAD_COUNT; i++) {\n            vec2 v0 = QUADS[i * 3];\n            vec2 v1 = QUADS[i * 3 + 1];\n            vec2 v2 = QUADS[i * 3 + 2];\n            d = min(d, abs(sdBezier(m, v0, v1, v2)));\n        }\n        for (int i=0; i < LINE_COUNT; i++) {\n            vec2 v0 = LINES[i * 2];\n            vec2 v1 = LINES[i * 2 + 1];\n            d = min(d, udSegment(m, v0, v1));\n        }\n        col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.01));\n        col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.05));\n    }\n\n    { // Draw the skeleton of the Bezier curves\n        float d = 1e10;\n        for (int i=0; i < QUAD_COUNT; i++) {\n            vec2 v0 = QUADS[i * 3];\n            vec2 v1 = QUADS[i * 3 + 1];\n            vec2 v2 = QUADS[i * 3 + 2];\n            d = min(d, min(udSegment(p, v0, v1), udSegment(p, v1, v2)));\n            d = min(d, length(p - v0) - 0.05);\n            d = min(d, length(p - v1) - 0.05);\n            d = min(d, length(p - v2) - 0.05);\n        }\n        for (int i=0; i < LINE_COUNT; i++) {\n            vec2 v0 = LINES[i * 2];\n            vec2 v1 = LINES[i * 2 + 1];\n            d = min(d, udSegment(p, v0, v1));\n            d = min(d, length(p - v0) - 0.05);\n            d = min(d, length(p - v1) - 0.05);\n        }\n        col = mix(col, vec3(1, 0, 0), 1.0 - smoothstep(0.0, 0.014, d));\n    }\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}