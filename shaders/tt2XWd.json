{
    "Shader": {
        "info": {
            "date": "1567558112",
            "description": "hexagons",
            "flags": 0,
            "hasliked": 0,
            "id": "tt2XWd",
            "likes": 2,
            "name": "Slither.io Hexagons",
            "published": 3,
            "tags": [
                "hexagons"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "\n\n#define BASE_LAYER_COLOR (vec3(16,25,38) / 255.)\n#define TOP_LAYER_COLOR  (0.2*vec3(28,42,59) / 255.)\n\n\nfloat random(vec2 co)\n{\n    return fract(sin(dot(co,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n// ===== Grain ============================\n\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(random(ip),random(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(random(ip+vec2(0.0,1.0)),random(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\nfloat getGrainAmount(vec2 uv)\n{\n    return noise(uv*5000.0);\n}\n\n\n// ===== Hexagon ============================\n\n\nconst vec2 s = vec2(1, 1.7320508); // 1.7320508 = sqrt(3)\nconst float borderThickness = .02;\n\nfloat calcHexDistance(vec2 p)\n{\n    p = abs(p);\n    return max(dot(p, s * .5), p.x);\n}\n\nvec4 calcHexInfo(vec2 uv)\n{\n    vec4 hexCenter = round(vec4(uv, uv - vec2(.5, 1.)) / s.xyxy);\n    vec4 offset = vec4(uv - hexCenter.xy * s, uv - (hexCenter.zw + .5) * s);\n    return dot(offset.xy, offset.xy) < dot(offset.zw, offset.zw) ? vec4(offset.xy, hexCenter.xy) : vec4(offset.zw, hexCenter.zw);\n}\n\nfloat getHexDistanceField(vec2 uv)\n{\n    vec4 hexInfo = calcHexInfo(uv);\n    float totalDist = clamp((calcHexDistance(hexInfo.xy) + borderThickness) / 0.52, 0.0, 1.0);\n    return totalDist;\n}\n\nvec2 getHexCoordinates(vec2 uv)\n{\n    vec4 hexInfo = calcHexInfo(uv);\n    return hexInfo.xy;\n}\n\nvec2 getHexIndex(vec2 uv)\n{\n    vec4 hexInfo = calcHexInfo(uv);\n    return hexInfo.zw;\n}\n\n\n// ===== Coordinates ==============================\n\n\n\nvec2 getUV(vec2 fragCoord)\n{\n    float th = -0.15;\n    fragCoord = mat2(cos(th), sin(th), -sin(th), cos(th)) * fragCoord;\n    return 3. * (2. * fragCoord - iResolution.xy) / iResolution.y;\n}\n\n\n// ===== Main ==============================\n\nfloat getPointSeven(vec2 uv)\n{\n    vec2 index = getHexIndex(uv);\n    return 0.7+0.1*sin(2.*iTime + .5*(index.x-index.y));\n}\n\n\nvec3 getBaseLayer(vec2 uv)\n{\n    return BASE_LAYER_COLOR + (0.05*getGrainAmount(uv)-0.05);\n}\n\nvec3 getShadowLayer(vec2 uv)\n{\n    uv.x += 0.02;\n    uv.y += 0.07;\n    float dist = getHexDistanceField(uv) - getPointSeven(uv);\n    dist = clamp(dist, -0.1, 0.1);\n    \n    return vec3(-0.25*(0.1-dist));\n}\n\nvec3 getTopHexagonLayer(vec2 uv)\n{\n    if (getHexDistanceField(uv) > getPointSeven(uv)) \n        return getShadowLayer(uv);\n    \n    float th = 0.35;\n    \n    vec2 hexCoords = mat2(cos(th), sin(th), -sin(th), cos(th)) \n        * getHexCoordinates(uv);\n    \n    return TOP_LAYER_COLOR + mix(-0.15, 0.15, 0.5*(hexCoords.y+1.0));\n}\n\nfloat getBorderAmount(vec2 uv)\n{\n    float dist = getHexDistanceField(uv);\n    return clamp(20.0*abs(dist - getPointSeven(uv)), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = getUV(fragCoord);\n        \n    vec3 baseLayer = getBaseLayer(uv);\n    vec3 topHexagonLayer = getTopHexagonLayer(uv);\n    float borderAmount = getBorderAmount(uv);\n    \n    vec3 color = borderAmount * (baseLayer + topHexagonLayer);\n    \n    fragColor = vec4(color,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}