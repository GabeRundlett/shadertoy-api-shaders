{
    "Shader": {
        "info": {
            "date": "1573515126",
            "description": "made during a twitch livestream: https://www.twitch.tv/videos/504928985",
            "flags": 0,
            "hasliked": 0,
            "id": "tsyXRW",
            "likes": 13,
            "name": "Twitch: Trans Clouds",
            "published": 3,
            "tags": [
                "clouds",
                "twitch",
                "liveshader"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 528
        },
        "renderpass": [
            {
                "code": "#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(vec2 p) {\n  int x = FK(p.x); int y = FK(p.y);\n  return float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nfloat hash2(float a, float b) {\n  return hash(vec2(a, b));\n}\n\nfloat hash3(float a, float b, float c) {\n  return hash(vec2(hash(vec2(a,b)),c));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax, p, cos(ro)) + sin(ro)*cross(p,ax);\n}\n\nfloat rep(vec3 p, vec3 sc, vec3 off, float ro) {\n  p = erot(p, vec3(0,1,0), ro);\n  p = erot(p, vec3(0,0,1), 3.1415*hash2(ro, ro));\n  p = erot(p, vec3(1,0,0), 3.1415*hash3(ro, ro, ro));\n  p -= off*sc;\n  p = (fract(p/sc)-0.5)*sc;\n  return length(p);\n}\n\nfloat scene(vec3 p) {\n  float dist = 0.;\n  float cum = 0.;\n  for (int i = 0; i < 10; i ++) {\n    float ro = hash2(float(i+1), 2.3238) * 3.14159;\n    vec3 off = vec3(hash2(float(i+1), 384.12), hash2(float(i+1), 6969.0), hash2(float(i+1), 420.348));\n    float sc = 1./float(i+1);\n    dist += rep(p, vec3(sc), off, ro);\n    cum += 1.;\n  }\n  return (dist - 1.2)/sqrt(cum);\n}\n\nvec3 shadeDistance(float d) {\n    float dist = d*200.0;\n    float banding = max(sin(dist), 0.0);\n    float strength = sqrt(clamp(log(abs(d)+1.0)*1.5, 0.0, 1.0));\n    float pattern = mix(strength, banding, (0.6-abs(strength-0.5))*0.3);\n    \n    vec3 color = vec3(pattern);\n    \n    if (d > 0.0) {\n        //red tint\n        color *= vec3(1.0,0.56,0.4);\n    } else {\n        //blue tint\n        color *= vec3(0.4,0.9,1.0);\n        \n    }\n    return color;\n}\n\nvec3 planeinterp(vec3 a, vec3 b, vec3 c, vec3 d, vec2 k) {\n  a = a*a;\n  b = b*b;\n  c = c*c;\n  d = d*d;\n  return mix(mix(a,b,k.x),mix(c,d,k.x),k.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  uv *=3.;\n  \n  vec3 cam = normalize(vec3(1, uv));\n  float ro = iTime/12.;\n  float str = 2.;\n  vec3 init = vec3(-4.+iTime/5., cos(ro)*str, sin(ro)*str);\n  vec3 p = init;\n  float k = 1.;\n  float iter = 20. + cos(iTime/2.)*10.;\n  for( int i = 0; i < int(iter); i++) {\n    float dst = scene(p);\n    if (i == 0) k = sign(dst);\n    dst*=k;\n    if (abs(dst) < 0.001) { break; }\n    \n    if (distance(p, init) > 100.) break;\n    p += cam*dst;\n  }\n  \n  float hs1 =  hash(uv*iTime)*0.05;\n  float hs2 =  hash(uv*iTime*43.43)*0.05;\n  float c = length(sin(p)*0.5+0.5)/sqrt(3.) + hs1;\n  float d = 1.-exp(-distance(init,p))/exp(0.) + hs2;\n  fragColor.xyz = sqrt(planeinterp(\n    vec3(78./255., 58./255., 88./255.), vec3(54./255., 193./255., 251./255.),\n    vec3(192./255., 69./255., 124./255.), vec3(241./255., 255./255., 194./255.),\n    vec2(c, d)\n  ));\n  //fragColor.xyz = shadeDistance(scene(vec3(uv, iTime*0.1)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}