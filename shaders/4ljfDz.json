{
    "Shader": {
        "info": {
            "date": "1515398802",
            "description": "A really basic Mandelbrot set visualization.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ljfDz",
            "likes": 0,
            "name": "[2] Mandelbrot Whatnot",
            "published": 3,
            "tags": [
                "2d",
                "basic",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "emr4378",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "#define MAX_VALUE 4.0\n#define MAX_ITERATIONS 150\n\nvec2 complex_add(vec2 left, vec2 right)\n{\n    return left + right;\n}\n\nvec2 complex_mult(vec2 left, vec2 right)\n{\n    return vec2(\n        left.x * right.x - left.y * right.y,\n        left.x * right.y + left.y * right.x);\n}\n\nfloat complex_norm(vec2 number)\n{\n    return dot(number, number);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int num_iterations= min(int(iTime * 20.0), MAX_ITERATIONS);\n    float zoom = 1.0;\n    \n    // X:[-2.5, 1.0]\n    // Y:[-1.0, 1.0]\n    vec2 uv = vec2(\n        fragCoord.x / iResolution.x * (3.5 * zoom) - (2.5 * zoom),\n        fragCoord.y / iResolution.y * (2.0 * zoom) - (1.0 * zoom));\n\n    vec2 c = uv;\n    vec2 z;\n    int iteration = 0;\n\n    while (iteration < num_iterations && complex_norm(z) < MAX_VALUE)\n    {\n        z = complex_add(complex_mult(z, z), c);\n        \n        iteration++;\n    }\n\n    fragColor = vec4(float(iteration) / float(MAX_ITERATIONS));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}