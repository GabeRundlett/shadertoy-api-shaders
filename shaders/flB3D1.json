{
    "Shader": {
        "info": {
            "date": "1624049494",
            "description": "Made for audiovisual piece: https://youtu.be/pDuluYkmgU4\nRays are made with rope function I created. Fire, reflection and particles. Thanks to NR4 for the help with the analytical sphere: transparency without too much ray marching :). ",
            "flags": 32,
            "hasliked": 0,
            "id": "flB3D1",
            "likes": 6,
            "name": "Sunnish",
            "published": 3,
            "tags": [
                "reflection",
                "sun",
                "fire",
                "particles",
                "spline",
                "rope",
                "tansparency"
            ],
            "usePreview": 0,
            "username": "miczac",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "float particles;\nfloat glow;\n\n\nfloat noise(vec3 x) // iq's 3D noise\n{\n    vec3 f = fract(x);\n    vec3 p = x - f;\n    f = f*f*(3.0 - 2.0*f);\n    vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n    vec2 rg = texture(iChannel1, (uv + 0.5)/256.0, -100.0).rg;\n    return mix(rg.y, rg.x, f.z);\n}\n\nfloat fbm(vec3 x)\n{\n    float r = 0.0;\n    float w = 1.0, s = 1.0;\n    for (int i=0; i<5; i++)\n    {\n        w *= 0.5;\n        s *= 2.0;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\n\nvec2 mapRope(vec3 p, bool reflection)\n{\n    vec2 res = vec2(1000.,-1.);\n    \n    for(int id = 0; id < NUM_OBJECTS;id++)\n    {\n        vec4 rope_data = texelFetch(POSITION_TRAIL,ivec2(1,id),0);\n        vec3 rope_head = rope_data.xyz;\n        float dist_head = clamp(0.,1.,length(rope_head-p));\n        vec4  rope = Rope(p,id,POSITION_TRAIL);\n        vec3  motion_dir = rope.xyz;\n        vec3  position_front =  vec3(0);\t\n        float envelope = rope_data.w;\n        vec3  position_back = normalize(-motion_dir)*ROPE_LENGTH*(.2*tri(envelope*envelope)+0.8);\n        float capsule = sdCapsule(p-rope_head, position_back,position_front, CAP_RADIUS);\n        res.y = res.x < capsule ? res.y :  float(id);\n        res.x = min(res.x, capsule);\n        vec4 rope_tail = texelFetch(POSITION_TRAIL,ivec2(ROPE_POINTS,id),0);\n\n        if(reflection)\n        {\n            //add glowinbg particles\n            float b=cos(p.z*.5); \n            vec3 pp = p;\n            pp += texture(iChannel0,abs(p.xz*0.01)).xyz*0.5;\n            float particle =max(length(cos(pp*1.75+vec3(b,b*.5,cos(pp.x)))),abs(pp.x+pp.y+pp.z)-10.1); //make particles as 0 radius spheres, using cos of original op position and animated up  wish dance bop offset\n            particles+=0.4/(0.1+particle*particle*particle*100.);\n        }\n        glow += 0.1/(0.1+capsule*capsule*10.);\n    }\n    return vec2(res.x*RAY_MARCH_CORRECTION,res.y);\n}\n\n\nvec4 fire(vec3 p, float id)\n{    \n    vec4 data = texelFetch(POSITION_TRAIL,ivec2(1,id),0);\n    vec3 pos = data.xyz;\n    float env = data.w;\n    float density = fbm(5.0*(env*1.5)*(p-pos));\n    float rad = pow(length(p-pos),.5);\n    density -= 0.1 + rad* (0.5 - 0.5 *0.2) ;\n    density = clamp(density, 0.0, 1.0);\n    density *= (1.1 - smoothstep(0.2, 1., rad));\n    vec3 col = getColor(rad,density);\n    density *= smoothstep(0.1,0.4,dot(col,col));\n    return vec4(col, density);\n}\n\nvec4 fill_fire(vec3 ro, vec3 rd, vec2 obj)\n{\n    vec4 data = texelFetch(POSITION_TRAIL,ivec2(1,obj.y),0);\n    vec3 pos = data.xyz;\n    float env = tri(data.w*data.w);\n    vec3 p = ro + rd * obj.x; \n    vec4 color = vec4(0);\n    vec3 position_rope = vec3(0);\n    for (int i=0; i<NUM_SMOKE_STEPS; i++)\n    {\n        if (color.a > 0.99 || color.a > 0.) continue;\n        //if (length(p) > 1.1) continue;\n        vec4 d = fire(p, obj.y);\n        //float dist_from_head = clamp(length(p-pos),0.,1.);\n        d.rgb *= d.a;\n        color += d * (10. - color.a);\n        p += rd * MIN_DIST;\n    }\n\n    float d = length(p-pos);\n    color *= 1.1/(0.1+d*d*d*10.);\n    return color;\n}\n\n\nvec2 intersectRope(vec3 ro, vec3 rd, bool reflection)\n{\n    float dist = 0.01;\n    float id = -1.;\n    for(int i = 0; i < 128; i++)\n    {\n        vec3 p = ro + rd*dist;\n        vec2 hit = mapRope(p,reflection);\n        id = hit.y;\n        if( dist > 20. || abs(hit.x) < 0.01) break;\n        dist += hit.x;\n    }\n    return vec2(dist, id);\n}\n\n\nvec3 normalRope(vec3 p)\n{\n    vec2 e = vec2(1.0,-1.0)*0.00025773;\n    return normalize( e.xyy*mapRope( p + e.xyy, false).x + \n\t\t\t\t\t  e.yyx*mapRope( p + e.yyx, false).x + \n\t\t\t\t\t  e.yxy*mapRope( p + e.yxy, false).x + \n\t\t\t\t\t  e.xxx*mapRope( p + e.xxx, false).x );\n}\n\n\n\nvec3 normal_fire(vec3 p, float id)\n{\n    vec2 e = vec2(1.0,-1.0)*0.0025773;\n    return normalize( e.xyy*fire( p + e.xyy, id).w + \n\t\t\t\t\t  e.yyx*fire (p + e.yyx, id).w + \n\t\t\t\t\t  e.yxy*fire( p + e.yxy, id).w + \n\t\t\t\t\t  e.xxx*fire( p + e.xxx, id).w );\n}\n\nvec3 normalSphere(vec3 x)\n{\n    float s = length(x)-CENTER_SPH_RAD,\n        dx = 5.e-4;\n    return normalize(vec3(\n        length(x+dx*c.xyy)-CENTER_SPH_RAD, \n        length(x+dx*c.yxy)-CENTER_SPH_RAD, \n        length(x+dx*c.yyx)-CENTER_SPH_RAD\n    )-s);\n}\n\nmat3 camera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 f = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 r = normalize( cross(f,cp) );\n\tvec3 u =          ( cross(r,f) );\n    return mat3( r, u, f );\n}\n\nvec3 renderCol(vec2 hit, vec3 ro, vec3 rd, bool reflection)\n{\n    vec3 lig_pos = vec3(0,1,0);\n    vec3 col = vec3(0);\n    vec3 p = ro +rd*hit.x;\n\n    vec4 smoke = fill_fire(ro,rd,hit);\n    col = max(smoke.xyz,vec3(0));\n    if(dot(col,col) < 0.001) return vec3(0);\n    float id =  hit.y;\n    vec3 norm_fire = normal_fire(p, id);\n    float diff = dot(norm_fire, -lig_pos)*0.5+0.5;\n    col *= diff;\n    col = max(col*1.,vec3(0));\n    return col;\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    vec3 col =vec3(0);\n    bool reflection = false;\n    vec2 sph = asphere(ro, rd, CENTER_SPH_RAD);\n    vec2 rope = intersectRope(ro,rd,reflection);\n    float dist_front = sph.x;\n    float dist_back = sph.y;\n    vec2 front, back;\n    vec3 ro_front, ro_back, rd_front, rd_back, norm_front, norm_back;\n    if(sph.x < 15. && sph.y < 30.)\n    {\n        vec3 p_front = ro+rd*dist_front;\n        norm_front = normalSphere(p_front);\n        ro_front = p_front;\n        vec3 ref_front = reflect(rd,norm_front);\n        rd_front = ref_front;\n        reflection = true;\n        front = intersectRope(ro_front,rd_front,reflection);\n        col +=texture(iChannel2,rd_front).xyz*0.045;\n        col += max(vec3(0),renderCol(front, ro_front, rd_front, reflection)*0.5);\n\n        vec3 p_back = ro+rd*dist_back;\n        norm_back = normalSphere(p_back);\n        ro_back = p_back;\n        vec3 ref_back = reflect(rd,norm_back);\n        rd_back = ref_back;\n        back = intersectRope(ro_back,rd_front,reflection);\n        vec3 col_back = max(vec3(0),renderCol(back, ro_back, rd_back, reflection))*0.3;\n        col_back +=texture(iChannel2,rd_back).xyz*0.025;\n        col_back = mix(vec3(0),col_back,0.4);\n        col += col_back;\n    }else\n    {\n        col =texture(iChannel2,rd).xyz*0.14;   \n    }\n    float dist_min = min(dist_front,dist_back);\n    float atten = reflection ? 0.5  : 1.;\n    vec3 col_rope = rope.y < fNUM_OBJECTS ? renderCol(rope, ro, rd, reflection)*atten : vec3(0);\n    col = mix(col,col_rope,0.1);    \n    vec3 cubem = texture(iChannel2,rd).xyz;\n    if(reflection) col += cubem*0.4;\n    float pglow = pow(glow,.5);\n    col += vec3(particles*pglow*.31/(fNUM_OBJECTS*0.3))*vec3(0.5, 0.4, 0.1);\n    return max(col,vec3(0));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y*2.;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n    float an = 0.5*iTime - TAU*(m.x-0.5);\n\tvec3 ro = vec3(2.0*sin(an),2.5*cos(0.4*an),2.0*cos(an));\n    vec3 lookat = vec3(0.0,0.0,0.0);\n    mat3 cam = camera(ro, lookat,0.);\n    vec3 rd = cam*vec3(uv,1. );\n    vec3 col = vec3(0);\n    col = render(ro,rd);\n    col = pow(clamp(col,0.,1.), vec3(0.45));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//flames are distributed on a sphere in a grid\n//#define LO_PERF\n#ifdef LO_PERF\n#define SPHERE_GRID vec2(1,2)\n#else\n#define SPHERE_GRID vec2(3,3)\n#endif\nconst int NUM_OBJECTS =  int(SPHERE_GRID.x*SPHERE_GRID.y);\nconst float fNUM_OBJECTS = float(NUM_OBJECTS);\n#define PI 3.14159\n#define TAU 6.28359\n#define MIN_DIST 0.001\n#define MAX_DIST 10.\n#define NUM_SMOKE_STEPS 10\n#define ROPE_POINTS 32\n#define ROPE_LENGTH 0.6\nconst float fROPE_POINTS = float(ROPE_POINTS);\n#define POSITION_TRAIL iChannel0\n#define CAP_RADIUS 0.08\n#define RAY_MARCH_CORRECTION 0.7\n#define FLAMES_DIST 1.\n#define CENTER_SPH_RAD 0.8\n\n\nfloat hash( float n )\n{\n    return fract(sin(n+2910.)*43758.5453123);\n}\n\n//Blackle's erot function\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(ax,p)*ax, p, cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat envelope(int obj, float time)\n{\n   float  freq = hash(float(obj)*20.);\n   \n   return 1.-fract(freq*time);   \n}\n\nfloat slide(float cur, float tar, float slu, float sld)\n{\n    //slide up or slide down\n    float del = (tar>cur) ?  slu : sld;\n \tcur += (tar - cur) * del;\n    return    cur;\n}\n\nvec3 pos_on_sphere(float phi, float theta, float radius)\n{\n//assumes both phi and theta are 0<>1\n        phi *= 2.;\n        phi -= 1.;\n        phi *= 3.14159;\n        theta *= 6.28359; \n        float coth = cos(theta), \n              sith = sin(theta), \n              coph = cos(phi),\n              siph = sin(phi);\n        float x = radius*coph*coth,\n              y = radius*coph*sith,\n              z = radius*siph;\n       \n       return vec3(x,y,z);\n}\n\n\nfloat tri(float x)\n{\n    return min(fract(x) * 2., 2. - 2. * fract(x));\n}\n\nvec3 getColor(float r, float d)\n{\n    vec3 c = mix(vec3(0.9), vec3(0.5, 0.4, 0.1), d);\n    \n\tc *= mix(vec3(1.0, 0.4, 0.0), vec3(0.5), r );\n    \n\treturn c * 4.0;\n}\n\n//IQ \nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n \n  return length( pa - ba*h ) - r*sqrt(h);\n}\n// Analytical sphere distance.\n// Thanks Nr4 for this!\n//https://shadertoy.com/view/Wlj3z1\nconst vec3 c = vec3(1.,0.,-1.);\nconst float f = 1.e4;\nvec2 asphere(vec3 x, vec3 dir, float R)\n{\n    float a = dot(dir,dir),\n        b = 2.*dot(x,dir),\n        cc = dot(x,x)-R*R,\n        dis = b*b-4.*a*cc;\n    if(dis<0.) return vec2(f);\n    vec2 dd = (c.xz*sqrt(dis)-b)/2./a;\n    return vec2(min(dd.x, dd.y), max(dd.x, dd.y));\n}\n\n\n\n//spline interpolation function to connect points across tentacle \n//from : http://sol.gfxile.net/interpolation/\nvec3 catmullrom(float t, vec3 p0, vec3 p1, vec3 p2, vec3 p3)\n{\n\treturn 0.5 * (\n\t\t\t\t(2. * p1) +\n\t\t\t\t(-p0 + p2) * t +\n\t\t\t\t(2. * p0 - 5. * p1 + 4. * p2 - p3) * t * t +\n\t\t\t\t(-p0 + 3. * p1 - 3. * p2 + p3) * t * t * t\n\t\t\t\t);\n}\n\n//this is probably the most relevant function in this shader: it allows for smooth interpolation\n//between points in a sdf (e.g. capsule), it gets its points from a row of pixels stored and \n//continuisly updating in buffer B. For this  to work the object needs to be moving, if slightly, at all times\nvec4 Rope(vec3 p, int id, in sampler2D text)\n{\n    vec3  rope_head   = texelFetch(text, ivec2(1, id ), 0).xyz;//position data is stored starting from pix(1,id)\n    vec3  rope_tail   = texelFetch(text, ivec2(ROPE_POINTS-1, id ), 0).xyz;\n    float speed       = 1.+(length(rope_head - rope_tail))*.3;//TWEAK\n\n    //since the distance from the beginning of the rope changes based on object speed\n    //attentuate this undesired effect\n    float center_dist = clamp(length(p-rope_head),0.,1.)/speed;\n\n    //pick previous position based on how distant p is from the current position\n    int   point_coo    = int(floor(center_dist*(fROPE_POINTS-3.)));\n    float interp_index = fract(center_dist*(fROPE_POINTS-3.));\n    vec3  rope_point_0 = texelFetch(text, ivec2(point_coo+0, id ), 0).xyz;\n    vec3  rope_point_1 = texelFetch(text, ivec2(point_coo+1, id ), 0).xyz;\n    vec3  rope_point_2 = texelFetch(text, ivec2(point_coo+2, id ), 0).xyz;\n    vec3  rope_point_3 = texelFetch(text, ivec2(point_coo+3, id ), 0).xyz;\n    vec3  point_ahead  = catmullrom(interp_index, rope_point_0, rope_point_1, rope_point_2, rope_point_3);\n    vec3  point_behind = catmullrom(interp_index-0.051, rope_point_0, rope_point_1, rope_point_2, rope_point_3);\n    vec3  motion_dir    = point_behind -point_ahead  ;\t\n\n    return vec4(motion_dir, center_dist);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 iCoo = ivec2(fragCoord);\n    if(any(greaterThan(iCoo,ivec2(ROPE_POINTS,NUM_OBJECTS)))) discard;\n    if(iCoo.x == 0)\n    {\n        float new_ramp     = envelope(iCoo.y, iTime);\n        vec4  prev_data    = iFrame < 1 ? vec4(0,0.5, 0.6, 1.) : texelFetch(iChannel0,iCoo,0);\n        float prev_env     = prev_data.x, \n              prev_ramp    = prev_data.y;\n        bool trigger = new_ramp > prev_ramp;\n        float env = prev_env;\n        if(trigger) env = 1.; \n        else {env = slide(env, 0., 1.,1./20.);}\n        fragColor = vec4(env, new_ramp, 0,0);\n     }else if (iCoo.x == 1)\n     {\n         vec2 id = vec2(mod(fragCoord.y,SPHERE_GRID.x)/SPHERE_GRID.x,\n                        floor(fragCoord.y/SPHERE_GRID.x));\n         vec2 sect = vec2(1)/SPHERE_GRID;\n         float off = iCoo.y == 0 || iCoo.y == NUM_OBJECTS-1 ? 0. : sect.y*0.25;\n         float phi = off+sect.y*id.y;\n         float theta =id.x;\n         vec3 pos = pos_on_sphere(phi,theta,FLAMES_DIST);\n         float env = texelFetch(iChannel0,ivec2(0,iCoo.y),0).x;\n         pos *= (1.01-tri(env)*0.04);//add motion toward sphere\n         vec3 pt = cross(pos,vec3(0,1,0)*0.05)+pos;\n         vec3 pt_rot = erot(pt,pos,env*TAU);\n         fragColor = vec4(pt_rot,env);\n     }else\n     {\n         fragColor.xyz = texelFetch(iChannel0,iCoo-ivec2(1,0),0).xyz+texelFetch(iChannel0,ivec2(1,iCoo.y),0).xyz*(float(ROPE_POINTS-iCoo.x)/fROPE_POINTS*0.1);\n     }\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}