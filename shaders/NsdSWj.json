{
    "Shader": {
        "info": {
            "date": "1633972261",
            "description": "Peque√±o shader alocado, jugando con funciones de distancia y un poco de noise para darle movimiento",
            "flags": 0,
            "hasliked": 0,
            "id": "NsdSWj",
            "likes": 5,
            "name": "Sombras",
            "published": 3,
            "tags": [
                "noise",
                "shadows",
                "soft",
                "move",
                "sombras"
            ],
            "usePreview": 0,
            "username": "nictemeral",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "//Author: nictemeral\n//Title: sombras\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n     st.x *=iResolution.x/iResolution.y;\n     st*=1.1;\n     st.x-=0.34;\n     // st.y+=0.1;\n\n    float e=  distance(st,vec2(0.260,0.740));\n\tfloat a=  distance(vec2(e),vec2(0.510,0.360));\n    float b=  distance(vec2(e),vec2(a));\n    float r=  distance(st,vec2(0.460,0.400));\n\tfloat f=  distance(st,vec2(0.990,0.220));\n    float j=  distance(vec2(r),vec2(f));    \n    float q=  distance(st,vec2(0.440,-0.130));\n    float z=  distance(vec2(q),vec2(j));\n\n\n    vec2 toCenter = st-vec2(noise(st-iTime) ,noise(st+iTime));\n    float pct = length(toCenter);\n  \ttoCenter = st-vec2(noise(st-iTime*0.25) ,noise(st+iTime*0.25));\n    pct *= length(toCenter)*3.;\n    \n    vec3 color = .7212-vec3(j*pct*b*z)*50.000;\n\n\n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}