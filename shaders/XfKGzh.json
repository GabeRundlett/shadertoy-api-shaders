{
    "Shader": {
        "info": {
            "date": "1712407992",
            "description": "Volumetric God Rays",
            "flags": 0,
            "hasliked": 0,
            "id": "XfKGzh",
            "likes": 4,
            "name": "Volumetric God Rays - starielsl",
            "published": 3,
            "tags": [
                "raymarching",
                "godrays",
                "antialias"
            ],
            "usePreview": 0,
            "username": "starielsl",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "#define FAR 100.\n#define STEPS 256\nfloat NEAR = .001;\n\nstruct DirectionalLight\n{\n    vec3 position;\n    float intensity;\n    vec3 color;\n};\n\nDirectionalLight light = DirectionalLight(\n    vec3(0, 0, -15),\n    1.,\n    vec3(1)\n);\n\nfloat Sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat Scene(vec3 p, bool isLight)\n{\n     float s = Sphere(p - vec3(0, 0, -10), 1.);\n     return s;\n}\n\nbool hit = false;\nbool lightHit = false;\n\nfloat RayMarch(vec3 ro, vec3 rd, bool isLight)\n{\n    if (!isLight) hit = false;\n    else lightHit = false;\n    float ad = 0.;\n    for (int i = 0; i < STEPS; i++)\n    {\n        vec3 p = ro + rd * ad;\n        float d = Scene(p, isLight);\n        ad += d;\n        if (d < NEAR && !isLight) hit = true;\n        if (d < NEAR && isLight) lightHit = true;\n        if (ad > FAR || d < NEAR) break;\n    }\n    return ad;\n}\n\nvec3 GetNormal(vec3 p)\n{ \n    float d = Scene(p, true);\n    vec2 e = vec2(NEAR / 2., 0);\n    vec3 n = d - vec3(\n        Scene(p - e.xyy, true),\n        Scene(p - e.yxy, true),\n        Scene(p - e.yyx, true)\n    );\n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p, vec3 ro, vec3 rd)\n{\n    vec3 color = vec3(.05);\n    DirectionalLight l = light;\n    vec3 ld = normalize(l.position - p); \n    vec3 n = GetNormal(p);\n    float dif = dot(n, ld);\n    dif = clamp(dif, 0., 1.) * l.intensity;\n        \n    float d = RayMarch(p + n * NEAR * 2., ld, true); \n    if (d < length(l.position - p)) dif *= .1;\n\n    color = mix(color, l.color, dif);\n        \n    vec3 np = normalize(p);\n    vec3 nl = normalize(l.position);\n    float dpl = .01 / length(nl - np);\n    if (!hit || length(l.position - ro) < length(p - ro)) color += dpl * l.color;\n    else color += .04;\n    \n    vec3 nld = normalize(l.position - normalize(p));\n    if (!hit)\n    { // God Rays by andrew741\n        float total_density = 0.;\n        float maxDistance = 10.;\n        int steps = 256;\n        float step_size_f = maxDistance / float(steps);\n        vec3 step_size = rd * step_size_f;\n        vec3 dp = ro;\n        for (int s = 0; s < steps; s++)\n        {\n            vec3 srp = dp;\n            float slrd = 0.;\n            for (int sr = 0; sr < 10; sr++)\n            {\n                float dst = Scene(srp, true);\n                srp += nld * dst;\n                slrd += dst;\n                \n                if (dst < NEAR)\n                {\n                    total_density += 0.15 * step_size_f;\n                    break;\n                }\n                else if (slrd > maxDistance) break;\n            }\n            dp += step_size;\n        }\n        \n        color += rd.y;\n        color *= exp(-total_density);\n    }\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = vec3(0);\n    vec2 uv = (fragCoord -.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0);\n    vec2 mo = vec2(iMouse.xy / iResolution.xy - .5);\n    if (iMouse.z < 1.) mo = vec2(.25, 0);\n    mo.x *= (iResolution.x / iResolution.y);\n    light.position += vec3(mo * abs(light.position.z), 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, -1));\n    for (int i = 0; i < 4; i++)\n    {\n        float d = RayMarch(ro, rd, false);\n        vec3 p = ro + rd * d;\n        vec3 light = GetLight(p, ro, rd);\n        if (i > 0 && hit) color = mix(color, light, .5); // Antialias\n        else color = light;\n        NEAR *= 2.; // Not sure if this is the best way to do it\n    }\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}