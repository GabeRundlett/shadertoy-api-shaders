{
    "Shader": {
        "info": {
            "date": "1557836927",
            "description": "IF THERE'S NO AUDIO, CLICK THE REWIND BUTTON. \n\nMy \"lo-fi\" take on the classic demoscene tunnel effect. Procedural drone audio included!\nSpent a couple days tweaking the hell out of this, and I think it turned out pretty well.\n",
            "flags": 8,
            "hasliked": 0,
            "id": "ttX3W2",
            "likes": 21,
            "name": "System Sweep",
            "published": 3,
            "tags": [
                "tunnel",
                "sound",
                "demoscene",
                "motionblur",
                "demoeffect",
                "fake3d",
                "drone"
            ],
            "usePreview": 0,
            "username": "Blokatt",
            "viewed": 1877
        },
        "renderpass": [
            {
                "code": "/*\n... System Sweep 1.0.1 ...\n\nWritten by @blokatt\nblokatt.net\n\nIf you wish to find out what\nlies at the end of this tunnel,\nplease refer to IEEE 754.\n\nIt's not light.\n\nChangelog:\n16/05/19 - Tweaked camera shake\n\n... 14/05/19 ...\n*/\n\n#define MOTION_BLUR_LENGTH 0.01 * SPEED\n#define MOTION_BLUR_SAMPLES 8.0\n#define MOTION_BLUR_NOISE 0.0018\n#define NOISE_FILTERING 1\n\nconst float MOTION_BLUR_FALOFF = 1.0 - (1.0 / (1. + MOTION_BLUR_SAMPLES * 0.3));\nconst float MOTION_BLUR_LENGTH_OFFSET = MOTION_BLUR_LENGTH / MOTION_BLUR_SAMPLES;\n\n#define CHECKERBOARD_SIZE 16.0\n#define CRT_PIXEL_SIZE 6.0\n#define FOG_END 0.3\n#define FOG_START 1.5\n#define DITHERING 0.5\n\n#define COLOUR_A vec3(4.8, 1.8, 1.2)\n#define COLOUR_B vec3(1.2, 3.8, 5.2)\n#define COLOUR_C vec3(3.8, 1.8, 4.2)\n#define COLOUR_D vec3(2.8, 3.8, 1.2)\n\n#define TEXTURE_A texture(iChannel0, uv)\n#define TEXTURE_B texture(iChannel1, uv)\n#define TEXTURE_C texture(iChannel2, uv)\n\n// Bayer \nvec3 dither(vec3 col, vec2 coord, int depth){        \t\n    float cols = float(depth);    \n    float val = texture(iChannel3, coord / 8.).r;\n    return (floor((col + val * (1. / cols)) * cols) / cols);\n}\n\nfloat rand(vec2 uv){\n\treturn fract(sin(dot(vec2(12.9898,78.233), uv)) * 43758.5453123);\n}\n\n// Luminance \nfloat luma(vec3 c){\n\treturn 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;\n}\n\n// Smoothly-quantised ascending funtion\nfloat continuousSmoothstep(float x, float w){\n    float v = x - w * .5;\n    float b = floor(v);\n\treturn b + smoothstep(b + 1. - w, b + 1., v);\n}\n\n// Tunnel texture\nvec3 tex(vec2 uv){        \n    \n    float r = rand(fract(uv));    \n    \n    // Minimising moire in the distance\n    #if (NOISE_FILTERING == 1)\n    \tfloat blur = min(0.04, fwidth(uv).x);\n        uv.x += (r - .5) * blur;\n        uv.y += (fract(r * 10. + .5) - .5) * blur;\n    #endif\n            \t\n    // Base texture\n    float mixFactor = mod(continuousSmoothstep(uv.x / 32., .03), 3.0); \n    vec3 baseTex = mix(\n                   mix(\n                   mix(TEXTURE_A,\n                       TEXTURE_B, clamp(0., mixFactor, 1.)),\n                       TEXTURE_C, clamp(0., mixFactor - 1., 1.)), \n                       TEXTURE_A, clamp(0., mixFactor - 2., 1.)).rgb;\n    \n    vec3 col = baseTex * vec3(sin(TWO_PI * uv.x * 10.) * .5 + .5, sin(TWO_PI * uv.y) * .5 + .5, 1.0);\n    \n    // Checkerboard\n    vec3 block = vec3(.4 + .6 * float(bool(floor(.5 + fract(uv.x * CHECKERBOARD_SIZE))) ^^ bool(floor(.5 + fract(uv.y * CHECKERBOARD_SIZE - SPEED * iTime * 1.5)))));\n    col *= block;\n    \n    // Tinting\n    mixFactor = mod(continuousSmoothstep(uv.x / 16. - .05, .03), 4.0); \n    vec3 tint = mix(\n        \t\tmix(\n                mix(\n                mix(COLOUR_A,\n                   \tCOLOUR_B, clamp(0., mixFactor, 1.)),\n                   \tCOLOUR_C, clamp(0., mixFactor - 1., 1.)), \n                   \tCOLOUR_D, clamp(0., mixFactor - 2., 1.)),\n        \t\t\tCOLOUR_A, clamp(0., mixFactor - 3., 1.));   \n    \n    return (tint * ((vec3(luma(col)) - .5) * 1.12 + .5));\n}\n\nvec3 tunnel(vec2 uv, float time){    \n\tfloat travelDist = time * SPEED;    \n    float sectionOsc = -sectionChange(travelDist, .15, 16.);               \n    float l = length(uv) * .75;\n    \n    // Tiny camera wiggle\n    float wiggleTime = length(travelDist + uv);\n    float wiggleAngle = wiggleTime * .2;\n    float wiggleOffset = (sin(wiggleTime * 1.) + sin(wiggleTime * .25 + 1.25) + sin(wiggleTime * 2. + 1.8)) * .02;\n   \n    // Screen-space edge warp\n    uv *= 1.5 * (1. - abs(sectionOsc) * pow(length(uv), 2.0 + 1.5 * sectionOsc));\n    \n    // Aspect ratio correction\n    uv.x *= (iResolution.x / iResolution.y);\n          \n    // Space warping\n    l *= 1. + sectionOsc;\n    float _l2 = length(travelDist * .75 + uv);\n    uv += vec2(sin(_l2), sin(.5 * _l2)) * l;\n    \n    // Camera wiggle    \n    uv += vec2( sin(wiggleAngle) * wiggleOffset,\n    \t\t\t-cos(wiggleAngle) * wiggleOffset);\n    \n    l = length(uv);   \n\n    // Section transition warp\n   \tuv *= 3. - sectionChange(travelDist + .5 / l, .15, 16.) * 2.5;    \n       \n    // Perspective\n    float perceivedDist = 1. / length(uv);\n    \n    // Tunnel texture coordinates\n    vec2 texCoords = vec2(1. * (perceivedDist + travelDist), (perceivedDist * .5 + travelDist) * .25 + atan((uv.x), (uv.y)) * 0.15915494309);    \n    \n    vec3 col = tex(texCoords);\n    \n    // Fog\n    col *= smoothstep(FOG_END, FOG_START, inversesqrt(perceivedDist));\n    \n    // Clipping + brightness boost during transitions\n    col = max(vec3(0), col) * (1. - sectionOsc * 5.); \n    return col;\n}\n\n// Motion blur with \"temporal noise displacement\" (no idea what to call this)\nvec3 trail(in vec2 uv, in float t){    \n\tvec3 col = tunnel(uv, t + rand(fract(uv + t)) * MOTION_BLUR_NOISE);\n    float factor = .5;\n    for (float i = 1.; i < MOTION_BLUR_SAMPLES; i += 1.){\n    \tcol = mix(col, tunnel(uv, t - i * MOTION_BLUR_LENGTH_OFFSET + ((rand(fract(uv + t + i * .01)) ) * MOTION_BLUR_NOISE)), 1. * factor);\n        factor *= MOTION_BLUR_FALOFF;\n    }\n    return col;\n}\n\n// Basic CRT grid effect\nvec3 crt(in vec2 uv, float t){ \n    float crtMix = sectionChange(t * SPEED + .4, .1, 16.) * .5;      \n\n    vec2 grid = iResolution.xy / CRT_PIXEL_SIZE;    \n    vec2 blockPos = uv * grid;    \n    float yOff = floor(mod(blockPos.x, 2.));\n    blockPos.y += .5 * yOff;    \n    \n    // Downsampling\n    vec2 blockUV = floor(blockPos) / grid + (.5 / grid) * (1. - yOff);     \n    \n    vec3 texOrig = trail(uv, t); // Original colour\n    vec3 texCRT = tunnel(blockUV, t) * .5; // No motion blur in CRT'd version to save time\n    \n    // \"Phosphors\"\n    vec3 crtOut;\n    crtOut.r = max(0., -pow((mod(blockPos.x * 6., 6.) - 1.), 2.) + 1.);\n    crtOut.b = max(0., -pow((mod(blockPos.x * 6. + 2., 6.) - 1.), 2.) + 1.);\n    crtOut.g = max(0., -pow((mod(blockPos.x * 6. + 4., 6.) - 1.), 2.) + 1.);    \n    crtOut *= texCRT.rgb * (-pow(mod(blockPos.y * 2., 2.) - 1., 6.) + 1.) * 2.5;\n    //\n    \n\treturn mix(texOrig, crtOut, min(1., crtMix * 1.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float t = iTime + TIME_OFFSET;\n    vec2 uv = fragCoord/iResolution.xy - .5;    \n    vec3 outCol = crt(uv, t);     \t\n    fragColor = vec4(mix(outCol, dither(outCol, fragCoord, 4), DITHERING), 1.0);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Noisy, downsampled, ping-pong panned F(B)M drones! \\o/\n\n#define MASTER_VOLUME 1.0\n#define SAMPLE_RATE 12000.0\n#define SMOOTH_QUANTISE_UNIT(s, w)  float c = mod(x - w * .5, s); float v = 0.0; for (float i = 1.0; i < s; i += 1.0) v += smoothstep(i - w, i, c); v *= smoothstep(s, s - w, c); return v / (s - 1.0);\n\nfloat rand(float p){  \n    float f  = sin(p * .5) * .5  + .5;\n    p *= cos(p * 250. * f);\n    p = mod(p, .1 + abs(cos(p * .25)) * 100.);\n    p *= 20000.;\n\treturn fract(sin(dot(vec2(12.9898,78.233), vec2(p))) * 43758.5453123);\n}\n\nfloat sectionSoundOsc(float p, float w) {\n\treturn sectionChange(p * SPEED + .8, w, 16.);    \n}\n\n\nfloat smoothstepOsc(float x, float w){    \n    SMOOTH_QUANTISE_UNIT(16., w)\n}\n\nfloat valueNoise(float t){       \n    float i = fract(t);\n    float f = floor(t);\n\tfloat a = rand(f);\n    float b = rand(f + 1.);\n    return mix(a, b, i);\n}\n\nfloat fbm(float p, float gain, float lac, float res) {\n    float v = .0;\n    float amp = .75;\n    float z = 2500. + sin(p * .1) * .005 * sin(p * 5000.1) + 100. * smoothstepOsc(p / 16., .1);\n    for (int i = 0; i < 10; ++i) {\n        if (i > int(res)) continue;\n        v += valueNoise(p + z * p * .05) * amp;\n    \tp *= lac;\n        \n        amp *= gain;\n    }\n    return v;    \n}\n\nfloat bass(float t, float p) {\n    float freq = 50. + sin(t * .15) * 15. + cos(1.5 + t * .5) * 2.5;\n    return sin(6.2831 * freq * t * (p * 5.)) * sin(6.2831 * t * 200. * p);\t    \n}\n\nfloat noise(float t, float hiRes) {\n\treturn bass(t, 1. - .35 * sectionSoundOsc(t, .05)) * .25 + fbm(t, .5 + .2 * sectionSoundOsc(t, .05), 7.25 + .5 * sectionSoundOsc(t, .025), (mix(1., 10. - 9. * sectionSoundOsc(t, .05), hiRes)));\n}\n\nvec2 ambience(float t, float hiRes) {\n    float mixA = (.5 + 1.5 * sin(t + 5. * sectionSoundOsc(t, .05)) * (.1 + .1 * sectionSoundOsc(t, .025)));\n    float mixB = 1. - mixA;\n    float delay = .05;\n    return vec2(noise(t - delay, hiRes) * mixA, noise(t + delay, hiRes) * mixB);\n}\n\nvec2 ambienceComb (float t) {\n\tvec2 o = ambience(t, 1.) * .1;\n    for (float i = .5; i > 0.0; i -= .1) {\n    \to += ambience(t + (.5 - i) * .5, 1.) * i * .75;\n   \t}\n    return (o * .45 + ambience(t * .5, .5) * .25 + ambience(t * .25 + 49., 0.) * .3) * 2.0;\n}\n\nvec2 mainSound( in int samp, float time )\n{          \n    return ambienceComb(floor((time + TIME_OFFSET) * SAMPLE_RATE) / SAMPLE_RATE) * smoothstep(0., 3., time) * MASTER_VOLUME;               \n} ",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define SPEED 2.0\n#define TIME_OFFSET 3.0\n\nfloat sectionChange(float x, float w, float c){    \n    float divCycle = fract(x / c);\n    return smoothstep(w, 0.0, divCycle) + smoothstep(1. - w, 1., divCycle);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}