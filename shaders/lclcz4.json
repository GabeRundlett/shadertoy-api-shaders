{
    "Shader": {
        "info": {
            "date": "1720893847",
            "description": "three jointed pendulum",
            "flags": 48,
            "hasliked": 0,
            "id": "lclcz4",
            "likes": 3,
            "name": "TriplePendulum",
            "published": 3,
            "tags": [
                "pendulummotiondemonstration"
            ],
            "usePreview": 0,
            "username": "kosalos",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "// -------------------------------------------------------------------------------------------------\n// Three segmented Pendulum\n// \n// Controls:\n// <Q>,<W> Length #1;   <E>,<R>  Mass #1\n// <A>,<S> Length #2;   <D>,<F>  Mass #2\n// <Z>,<X> Length #3;   <C>,<V>  Mass #3\n//\n// <T>,<Y> Gravity\n// <G>,<H> Speed\n//\n// <Spc>   Reset\n//\n// algorithm: https://github.com/micaeloliveira/physics-sandbox/blob/feature/new-styling/assets/javascripts/pendulum.js\n// -------------------------------------------------------------------------------------------------\n\nfloat ptLineDistance(vec2 pt,vec2 lineP1,vec2 lineP2) {\n    vec2 ab = lineP2-lineP1;\n    vec2 be = pt-lineP2;     \n    if(dot(ab,be) > 0.) return length(be);\n\n    vec2 ae = pt-lineP1;\n    if(dot(ab,ae) < 0.) return length(ae); \n    return abs(ab.x * ae.y - ab.y * ae.x) / length(ab);\n}\n\nvoid drawLine(vec2 p1,vec2 p2, float width, vec3 color,inout vec4 fragColor,vec2 fragCoord) {\n    float d = ptLineDistance(fragCoord,p1,p2);\n    if(d < width) {\n        float d2 = ptLineDistance(fragCoord - vec2(-width * 0.5,width * 0.5),p1,p2);\n        fragColor.xyz = color - vec3(d2 / (width * 2.5));\n    }\n\n    if(abs(d - width)< 1.) fragColor.xyz = vec3(0.);\n}\n\nvoid xorRings(vec2 pos, float width,vec3 color, inout vec4 fragColor, in vec2 fragCoord) {\n    float w1,w2,dist = length(fragCoord - pos);     \n    for(int i=2;i<100;i+=2) {\n        w1 = width * float(i);\n        w2 = width * float(i+1);        \n        if(dist >= w1 && dist <= w2) fragColor.xyz = abs(fragColor.xyz - color / (dist * 0.005));\n    }\n}\n\nvoid drawCircle(vec2 pt, float radius, vec3 color,inout vec4 fragColor,vec2 fragCoord) {\n    float d = length(fragCoord-pt);\n    \n    if(d < 90.) fragColor.xyz += 1./(d * 0.2); // glow\n    \n    if(d < radius) {\n        float d2 = length(fragCoord - vec2(-radius * 0.5,radius * 0.5) - pt);\n        fragColor.xyz = color - vec3(d2 / (radius * 3.5));\n    }\n    if(abs(d - radius)< 1.) fragColor.xyz = vec3(0.);\n}\n\n// ----------------------------------------------------------\n\nvec3 jetColorMap(float t) { // 0 ... 1\n    return clamp(vec3(1.5) - abs(4.0 * vec3(t) + vec3(-3., -2., -1.)), vec3(0.), vec3(1.));\n}\n\n// -------------------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor.xyz = vec3(0.);\n    getSettings(iChannel0); \n\n    const float C1 = 0.7;\n    const float C2 = 0.65;\n    const float C3 = 0.63;\n    xorRings(qPos1,1.0 + qMass1 * 0.3,vec3(C1,C2,C3),fragColor,fragCoord);\n    xorRings(qPos2,1.0 + qMass2 * 0.3,vec3(C2,C3,C1),fragColor,fragCoord);\n    xorRings(qPos3,1.0 + qMass3 * 0.3,vec3(C3,C1,C2),fragColor,fragCoord);\n\n    vec2 center = iResolution.xy * 0.5;\n    const vec3 pColor = vec3(1.,1.,0.8);\n    drawLine(center,qPos1,4.,pColor,fragColor,fragCoord);\n    drawLine(qPos1,qPos2,4.,pColor,fragColor,fragCoord);\n    drawLine(qPos2,qPos3,4.,pColor,fragColor,fragCoord);\n\n    drawCircle(center,15.,pColor,fragColor,fragCoord);\n    drawCircle(qPos1,1.0 + qMass1 * 0.3,pColor,fragColor,fragCoord);\n    drawCircle(qPos2,1.0 + qMass2 * 0.3,pColor,fragColor,fragCoord);\n    drawCircle(qPos3,1.0 + qMass3 * 0.3,pColor,fragColor,fragCoord);\n    \n    fragColor.xyz = jetColorMap(fract(length(fragColor)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void saveSettings(inout vec4 fragColor,vec2 fragCoord) {\n    for(int i=0;i<ADDR_COUNT;++i)\n        if(storeDataAddr(fragCoord, addrList[i])) {\n            fragColor = q[i];\n            return;\n        }\n}\n\n\n// ----------------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if(iFrame < 2 || keyClick(32,iChannel3)) {\n        qGravity = 60.;\n        qTime = 0.03;\n        qLength1 = 200.;\n        qLength2 = 200.;\n        qLength3 = 200.;\n        qMass1 = 50.;\n        qMass2 = 50.;\n        qMass3 = 50.;\n        qAccel1 = 0.;\n        qAccel2 = 0.;\n        qAccel3 = 0.;\n        qSpeed1 = 0.;\n        qSpeed2 = 0.;\n        qSpeed3 = 0.;\n        qAngle1 = 0.;\n        qAngle2 = 3.;\n        qAngle3 = 3.;\n        saveSettings(fragColor,fragCoord); \n        return;\n    }\n    \t\n    fragColor = fetchData(iChannel0, ivec2(fragCoord));\n    getSettings(iChannel0); \n    \n    // -----------------------------------------------------------------------------------\n    // necessary? Want all segments to be workinng with the same data.\n    \n    if((iFrame & 1) == 1) {\n        nAccel1 = qAccel1;\n        nSpeed1 = qSpeed1;\n        nAngle1 = qAngle1;\n        nAccel2 = qAccel2;\n        nSpeed2 = qSpeed2;\n        nAngle2 = qAngle2;\n        nAccel3 = qAccel3;\n        nSpeed3 = qSpeed3;\n        nAngle3 = qAngle3;\n        saveSettings(fragColor,fragCoord); \n        return;\n    }\n \n    // -----------------------------------------------------------------------------------\n    if(getKeyState(81,iChannel3)) qLength1 = clamp(qLength1 - 2.,5.,250.); // Q\n    if(getKeyState(87,iChannel3)) qLength1 = clamp(qLength1 + 2.,5.,250.); // W\n    if(getKeyState(65,iChannel3)) qLength2 = clamp(qLength2 - 2.,5.,250.); // A\n    if(getKeyState(83,iChannel3)) qLength2 = clamp(qLength2 + 2.,5.,250.); // S\n    if(getKeyState(90,iChannel3)) qLength3 = clamp(qLength3 - 2.,5.,250.); // Z\n    if(getKeyState(88,iChannel3)) qLength3 = clamp(qLength3 + 2.,5.,250.); // X\n    if(getKeyState(69,iChannel3)) qMass1 = clamp(qMass1 - 2.,5.,250.); // E\n    if(getKeyState(82,iChannel3)) qMass1 = clamp(qMass1 + 2.,5.,250.); // R\n    if(getKeyState(68,iChannel3)) qMass2 = clamp(qMass2 - 2.,5.,250.); // D\n    if(getKeyState(70,iChannel3)) qMass2 = clamp(qMass2 + 2.,5.,250.); // F\n    if(getKeyState(67,iChannel3)) qMass3 = clamp(qMass3 - 2.,5.,250.); // C\n    if(getKeyState(86,iChannel3)) qMass3 = clamp(qMass3 + 2.,5.,250.); // V\n    if(getKeyState(84,iChannel3)) qGravity = clamp(qGravity - 2.,1.,50.); // T\n    if(getKeyState(89,iChannel3)) qGravity = clamp(qGravity + 2.,1.,50.); // Y\n    if(getKeyState(71,iChannel3)) qTime = clamp(qTime - 0.001, 0.001,1.); // G\n    if(getKeyState(72,iChannel3)) qTime = clamp(qTime + 0.001, 0.001,1.); // H\n    // -----------------------------------------------------------------------------------\n\n    float mu = 1. + qMass1 / (qMass2 + qMass3);\n\tfloat mu2 = 1. + qMass2 / qMass3;\n\tfloat dAngle = nAngle1 - nAngle2;\n\tfloat dAngle2 = nAngle2 - nAngle3;\n\tfloat s1Sqr = nSpeed1 * nSpeed1;\n\tfloat s2Sqr = nSpeed2 * nSpeed2;\n\tfloat s3Sqr = nSpeed3 * nSpeed3;\n\tfloat s1 = sin(nAngle1);\n\tfloat s2 = sin(nAngle2);\n\tfloat s3 = sin(nAngle3);\n\tfloat cd = cos(dAngle);\n\tfloat sd = sin(dAngle);\n\tfloat cd2 = cos(dAngle2);\n\tfloat sd2 = sin(dAngle2);\n\t\n\tqAccel1 = (qGravity * (s2 * cd - mu * s1) - (qLength2 * s2Sqr + qLength1 * s1Sqr * cd) * sd) / (qLength1 * (mu - cd * cd));\n\tqAccel2 = (mu  * qGravity * (s1 * cd - s2) + (mu * qLength1 * s1Sqr + qLength2 * s2Sqr * cd) * sd) / (qLength2 * (mu - cd * cd));\n\tqAccel3 = (mu2 * qGravity * (s2 * cd2 - s3) + (mu2 * qLength2 * s2Sqr + qLength3 * s3Sqr * cd2) * sd2) / (qLength3 * (mu2 - cd2 * cd2));\n\n\tqSpeed1 += nAccel1 * qTime;\n\tqSpeed2 += nAccel2 * qTime;\n\tqSpeed3 += nAccel3 * qTime;\n\tqAngle1 += nSpeed1 * qTime;\n\tqAngle2 += nSpeed2 * qTime;\n\tqAngle3 += nSpeed3 * qTime;\n    \n\tvec2 a1 = vec2(sin(nAngle1),-cos(nAngle1));\n\tvec2 a2 = vec2(sin(nAngle2),-cos(nAngle2));\n\tvec2 a3 = vec2(sin(nAngle3),-cos(nAngle3));\n    vec2 anchor = iResolution.xy * 0.5;    \n    vec2 delta = a1 * qLength1;\n\tqPos1 = anchor + delta;\n    delta += a2 * qLength2;\n    qPos2 = anchor + delta;\n    delta += a3 * qLength3;\n\tqPos3 = anchor + delta;\n\n    saveSettings(fragColor,fragCoord); \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define GRIDX 100  // terrain size\n#define GRIDY  60\n#define START      ivec2(1,GRIDY-2) // path start/end coordinates\n#define END        ivec2(GRIDX-2 ,2)\n#define UNASSIGNED -2.\n#define WALL       -1.\n\n#define STATE_RESET          1.\n#define STATE_ASSIGN_WEIGHTS 2.\n#define STATE_MARK_PATH      3.\n\n#define qGravity  q[0].x\n#define qTime     q[0].y\n\n#define qLength1  q[1].x \n#define qMass1    q[1].y   \n#define qAccel1   q[1].z\n#define qSpeed1   q[2].x\n#define qAngle1   q[2].y\n#define qPos1     q[2].zw\n\n#define qLength2  q[3].x \n#define qMass2    q[3].y   \n#define qAccel2   q[3].z\n#define qSpeed2   q[4].x\n#define qAngle2   q[4].y\n#define qPos2     q[4].zw\n\n#define qLength3  q[5].x \n#define qMass3    q[5].y   \n#define qAccel3   q[5].z\n#define qSpeed3   q[6].x\n#define qAngle3   q[6].y\n#define qPos3     q[6].zw\n\n#define nAccel1   q[7].x\n#define nSpeed1   q[7].y\n#define nAngle1   q[7].z\n#define nAccel2   q[8].x\n#define nSpeed2   q[8].y\n#define nAngle2   q[8].z\n#define nAccel3   q[9].x\n#define nSpeed3   q[9].y\n#define nAngle3   q[9].z\n\n#define ADDR_COUNT  10\nvec4[ADDR_COUNT] q;\n\nconst ivec2 Q0 = ivec2( 0,GRIDY+1);\nconst ivec2 Q1 = ivec2( 1,GRIDY+1);\nconst ivec2 Q2 = ivec2( 2,GRIDY+1);\nconst ivec2 Q3 = ivec2( 3,GRIDY+1);\nconst ivec2 Q4 = ivec2( 4,GRIDY+1);\nconst ivec2 Q5 = ivec2( 5,GRIDY+1);\nconst ivec2 Q6 = ivec2( 6,GRIDY+1);\nconst ivec2 Q7 = ivec2( 7,GRIDY+1);\nconst ivec2 Q8 = ivec2( 8,GRIDY+1);\nconst ivec2 Q9 = ivec2( 9,GRIDY+1);\nconst ivec2[ADDR_COUNT] addrList = ivec2[](Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9);\n\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\n#define storeDataAddr(buf_pos, addr) ivec2(buf_pos) == addr\n\nvoid getSettings(sampler2D channel) { \n    for(int i=0;i<ADDR_COUNT;++i) \n        q[i] = texelFetch(channel, addrList[i],0);\n}\n\n// ----------------------------------------------------------\n\nbool keyClick(int ascii,sampler2D channel) {\n\treturn (texture(channel,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nbool getKeyState(int keyCode,sampler2D channel) {\n    return bool(texelFetch(channel, ivec2(keyCode,0), 0).x != 0.);\n}\n\nbool getKeyClick(int keyCode,sampler2D channel) {\n    return bool(texelFetch(channel, ivec2(keyCode,1), 0).x != 0.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}