{
    "Shader": {
        "info": {
            "date": "1630464649",
            "description": "gets very dramatic at the end, or at least I sure think so :P",
            "flags": 0,
            "hasliked": 0,
            "id": "7s33Rs",
            "likes": 9,
            "name": "sexy sci-fi health bar",
            "published": 3,
            "tags": [
                "hexagon",
                "scifi",
                "hexagonal",
                "glowing",
                "sexy",
                "energy",
                "healthbar"
            ],
            "usePreview": 0,
            "username": "cedric_h",
            "viewed": 715
        },
        "renderpass": [
            {
                "code": "/* source: https://iquilezles.org/articles/distfunctions2d */\nfloat sdPolygon(in vec2 p, in vec2[6] v) {\n  const int num = v.length();\n  float d = dot(p-v[0],p-v[0]);\n  float s = 1.0;\n  for( int i=0, j=num-1; i<num; j=i, i++ ) {\n    // distance\n    vec2 e = v[j] - v[i];\n    vec2 w =    p - v[i];\n    vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n    d = min( d, dot(b,b) );\n\n    // winding number from http://geomalgorithms.com/a03-_inclusion.html\n    bvec3 cond = bvec3( p.y>=v[i].y, \n        p.y <v[j].y, \n        e.x*w.y>e.y*w.x );\n    if( all(cond) || all(not(cond)) ) s=-s;  \n  }\n\n  return s*sqrt(d);\n}\n\nfloat hex(vec2 p, float s) {\n  p.x *= 0.57735*2.0;\n  p.y += mod(floor(p.x), 2.0)*0.5;\n  p = abs((mod(p, 1.0) - 0.5));\n  return smoothstep(1.0, 0.1, abs(max(p.x*1.5 + p.y, p.y*2.0) - 1.0) / (0.38 + s));\n}\n\nfloat inv_lerp(float from, float to, float value){\n  return max(0.0, min(1.0, (value - from) / (to - from)));\n}\n\n/* source: https://easings.net */\nfloat easeOutCirc(float x) {\n  return sqrt(1.0 - pow(x - 1.0, 2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord/iResolution.xy;\n  float hp = 1.0 - easeOutCirc(mod(iTime, 50.0) / 50.0);\n\n  vec2[] polygon = vec2[](\n    vec2(0.97, 0.97),\n    vec2(0.13, 0.97),\n    vec2(0.03, 0.32),\n    vec2(0.73, 0.32),\n    vec2(0.77, 0.03),\n    vec2(0.97, 0.03)\n  );\n  for (int i = 0; i < polygon.length(); i++)\n    polygon[i] = (polygon[i] + vec2(0, 3)) / vec2(1, 5);\n\n  float d = sdPolygon(uv, polygon);\n\n  float cd = 0.7*(1.0-smoothstep(0.01,0.02, abs(d))) + (1.0-smoothstep(-0.03,0.03, abs(0.02 - d)));\n  // cd = step(0.4, cd)*cd;\n  vec3 c = vec3(cd) * vec3(0.575, 0.5, 0.7);\n  float lowhp = inv_lerp(0.3, 0.27, hp);\n  float h = hex(fragCoord * 0.04, lowhp * 0.2 * abs(sin(7.0*iTime)));\n  float hpx = (1.15 * (1.0 - uv.x)) - 0.08;\n  vec3 cbase = mix(vec3(1.0, 0.0, 1.0-0.8*lowhp), vec3(0.4, 0.2, 0.4), inv_lerp(hp-0.03, hp, hpx));\n  c += float(!(c.x > 0.0)) * max(0.0, -d)/0.06 * cbase * h;\n\n  fragColor = vec4(vec3(c*0.7), 1.0-sign(d));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}