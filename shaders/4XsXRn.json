{
    "Shader": {
        "info": {
            "date": "1709085239",
            "description": "A public domain implementation of the approximation for the Mie scattering phase function from [url]https://research.nvidia.com/labs/rtr/approximate-mie/publications/approximate-mie.pdf[/url].\nPlot is ~logscale.",
            "flags": 0,
            "hasliked": 0,
            "id": "4XsXRn",
            "likes": 3,
            "name": "Jendersie-d'Eon phase function",
            "published": 3,
            "tags": [
                "scattering",
                "function",
                "mie",
                "phase"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// A public domain implementation of the approximation for the Mie scattering\n// phase function from\n//     Johannes Jendersie and Eugene d'Eon. 2023. An Approximate Mie Scattering Function for Fog and Cloud Rendering. In ACM SIGGRAPH 2023 Talks (SIGGRAPH '23). Association for Computing Machinery, New York, NY, USA, Article 47, 1–2. https://doi.org/10.1145/3587421.3595409\n//     https://research.nvidia.com/labs/rtr/approximate-mie/publications/approximate-mie.pdf\n// Fully-analytic approximation, that allows both simple (just by the droplet size),\n// and more complex parametrization. Claimed to \"accurately match 95% of the Mie phase\n// function over a wide range of droplet sizes\".\n// Felt like this deserves more recognition, hence this shader.\n\n// Plot is ~logscale (not quite).\n\n// In all phase functions below, x=cos(theta).\n\nconst float pi=3.14159265358979;\n\n// Draine phase function.\n//     B.T. Draine. 2003. Scattering by interstellar dust grains. I. Optical and ultraviolet. The Astrophysical Journal 598, 2 (2003), 1017. https://doi.org/10.1086/379118\n// NOTE: this reduces to Henyey-Greenstein for a=0,\n// to Rayleigh for g=0, a=1 and to Cornette-Shanks for a=1.\nfloat phase_draine(float a,float g,float x)\n{\n    float d=1.0+g*g-2.0*g*x;\n    return 1.0/(4.0*pi)*(1.0-g*g)/(1.0+a*(1.0+2.0*g*g)/3.0)* // <-- constant factor.\n        (1.0+a*x*x)/(d*sqrt(d));\n}\n\nfloat phase_rayleigh(float x)\n{\n    return phase_draine(1.0,0.0,x);\n}\n\n// Parametrization by droplet size.\n// Input: droplet size, in micrometres.\n// Valid range: 5<d<50.\nvec4 phase_params_mie(float d)\n{\n    return vec4(\n        exp(-0.0990567/(d-1.67154)),          // gHG\n        exp(-2.20679/(d+3.91029)-0.428934),   // gD\n        exp(3.62489-8.29288/(d+5.52825)),     // alpha\n        exp(-0.599085/(d-0.641583)-0.665888)  // wD\n    );\n}\n\n// Proposed approximation (\"Jendersie-d'Eon phase function\"?).\n// NOTE: this reduces to pure Henyey-Greenstein for phase_mie(vec4(g,0,0,0),c).\nfloat phase_mie(vec4 M,float x)\n{\n    return mix(phase_draine(0.0,M.x,x),phase_draine(M.z,M.y,x),M.w);\n}\n\n// NOTE: unlike Henyey-Greenstein, the asymmetry parameter (defined\n// as <cos(θ)> = 2*π * ∫ p(θ)*cos(θ)*sin(θ) dθ on [0;π]) for Draine\n// phase function is not simply g, but g*(1+a*(3+2*g^2)/5)/(1+a*(1+2*g^2)/3).\nfloat asymmetry_draine(float a,float g)\n{\n    return g*(1.0+a*(3.0+2.0*g*g)/5.0)/(1.0+a*(1.0+2.0*g*g)/3.0);\n}\n\nfloat asymmetry_mie(vec4 M)\n{\n    return mix(M.x,asymmetry_draine(M.z,M.y),M.w);\n}\n\n// Expressions for <cos^2(θ)>.\n// NOTE: second moment of Legendre expansion is (3*<cos^2(θ)>-1)/2\n// (e.g. g^2 for Henyey-Greenstein).\nfloat cos2_draine(float a,float g)\n{\n    float g2=g*g,g4=g2*g2;\n    return (1.0+2.0*g2+(3.0*a/35.0)*(7.0+20.0*g2+8.0*g4))/(3.0+a*(1.0+2.0*g2));\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col=vec3(0.25);\n    float r=length(xy),c=xy.x/r;\n    float d=exp2(mix(2.0,6.0,0.5+0.5*sin(iTime))); // [4;64] range, slightly outside recommended [5;50].\n    float f=phase_mie(phase_params_mie(d),c);\n    col+=0.5*smoothstep(fwidth(xy.x),0.0,abs(xy.x));\n    col+=0.5*smoothstep(fwidth(xy.y),0.0,abs(xy.y));\n    float A=256.0,B=8.0;\n    float t=log((exp(B*r)-1.0)/A)/log(10.0);\n    col+=0.75*smoothstep(1.5*fwidth(t),0.0,abs(t));\n    t=abs(round(t)-t);\n    t*=1.0-0.25*t;\n    col+=0.25*smoothstep(1.5*fwidth(t),0.0,abs(t));\n    t=log(1.0+A*f)/B-r;\n    col+=vec3(0.25,0.5,0.25)*smoothstep(0.0,1.5*fwidth(t),t);\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}