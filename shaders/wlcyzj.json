{
    "Shader": {
        "info": {
            "date": "1612558183",
            "description": "Anamorphic looking lens flare effect\nI used it in https://github.com/TheNosiriN/BabylonJS-Planets",
            "flags": 0,
            "hasliked": 0,
            "id": "wlcyzj",
            "likes": 46,
            "name": "Anamorphic Lens flare 1",
            "published": 3,
            "tags": [
                "flare",
                "lensflare",
                "purple",
                "anamorphic",
                "lenseffects"
            ],
            "usePreview": 0,
            "username": "TheNosiriN",
            "viewed": 2313
        },
        "renderpass": [
            {
                "code": "\n\nconst vec3 suncolor = vec3(0.643,0.494,0.867);\n\n//#define CHEAP_FLARE //faster but cheap looking\n\n\n\n\nfloat getSun(vec2 uv){\n    return length(uv) < 0.009 ? 1.0 : 0.0;\n}\n\n\n\n//from: https://www.shadertoy.com/view/XdfXRX\nvec3 lensflares(vec2 uv, vec2 pos, out vec3 sunflare, out vec3 lensflare)\n{\n\tvec2 main = uv-pos;\n\tvec2 uvd = uv*(length(uv));\n\n\tfloat ang = atan(main.y, main.x);\n\tfloat dist = length(main);\n    dist = pow(dist, 0.1);\n\n\tfloat f0 = 1.0/(length(uv-pos)*25.0+1.0);\n\tf0 = pow(f0, 2.0);\n\n\tf0 = f0+f0*(sin((ang+1.0/18.0)*12.0)*.1+dist*.1+.8);\n\n\tfloat f2 = max(1.0/(1.0+32.0*pow(length(uvd+0.8*pos),2.0)),.0)*00.25;\n\tfloat f22 = max(1.0/(1.0+32.0*pow(length(uvd+0.85*pos),2.0)),.0)*00.23;\n\tfloat f23 = max(1.0/(1.0+32.0*pow(length(uvd+0.9*pos),2.0)),.0)*00.21;\n\n\tvec2 uvx = mix(uv,uvd,-0.5);\n\n\tfloat f4 = max(0.01-pow(length(uvx+0.4*pos),2.4),.0)*6.0;\n\tfloat f42 = max(0.01-pow(length(uvx+0.45*pos),2.4),.0)*5.0;\n\tfloat f43 = max(0.01-pow(length(uvx+0.5*pos),2.4),.0)*3.0;\n\n\tuvx = mix(uv,uvd,-.4);\n\n\tfloat f5 = max(0.01-pow(length(uvx+0.2*pos),5.5),.0)*2.0;\n\tfloat f52 = max(0.01-pow(length(uvx+0.4*pos),5.5),.0)*2.0;\n\tfloat f53 = max(0.01-pow(length(uvx+0.6*pos),5.5),.0)*2.0;\n\n\tuvx = mix(uv,uvd,-0.5);\n\n\tfloat f6 = max(0.01-pow(length(uvx-0.3*pos),1.6),.0)*6.0;\n\tfloat f62 = max(0.01-pow(length(uvx-0.325*pos),1.6),.0)*3.0;\n\tfloat f63 = max(0.01-pow(length(uvx-0.35*pos),1.6),.0)*5.0;\n\n    sunflare = vec3(f0);\n    lensflare = vec3(f2+f4+f5+f6, f22+f42+f52+f62, f23+f43+f53+f63);\n\n\treturn sunflare+lensflare;\n}\n//\n\n\n\nvec3 anflares(vec2 uv, float threshold, float intensity, float stretch, float brightness)\n{\n    threshold = 1.0 - threshold;\n\n    vec3 hdr = vec3(getSun(uv));\n    hdr = vec3(floor(threshold+pow(hdr.r, 1.0)));\n\n    float d = intensity;\n    float c = intensity*stretch;\n\n    for (float i=c; i>-1.0; i--){\n        float texL = getSun(uv+vec2(i/d, 0.0));\n        float texR = getSun(uv-vec2(i/d, 0.0));\n        \n        hdr += floor(threshold+pow(max(texL,texR), 4.0))*(1.0-i/c);\n    }\n    \n    return hdr*brightness;\n}\n\n\n\n\n\nvec3 anflares(vec2 uv, float intensity, float stretch, float brightness)\n{\n    uv.x *= 1.0/(intensity*stretch);\n    uv.y *= 0.5;\n    return vec3(smoothstep(0.009, 0.0, length(uv)))*brightness;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    vec2 mouse = iMouse.xy/iResolution.xy - 0.5;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    mouse.x *= iResolution.x/iResolution.y;\n\n    \n    vec3 col;\n    \n    vec3 sun, sunflare, lensflare;\n    vec3 flare = lensflares(uv*1.5, mouse*1.5, sunflare, lensflare);\n    \n    #ifdef CHEAP_FLARE\n    vec3 anflare = pow(anflares(uv-mouse, 400.0, 0.5, 0.6), vec3(4.0));\n    anflare += smoothstep(0.0025, 1.0, anflare)*10.0;\n    anflare *= smoothstep(0.0, 1.0, anflare);\n    #else\n    vec3 anflare = pow(anflares(uv-mouse, 0.5, 400.0, 0.9, 0.1), vec3(4.0));\n    #endif\n    \n    \n    sun += getSun(uv-mouse) + (flare + anflare)*suncolor*2.0;\n    col += sun;\n    \n    \n    //col = 1.0 - exp(-1.0 * col);\n\tcol = pow(col, vec3(1.0/2.2));\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}