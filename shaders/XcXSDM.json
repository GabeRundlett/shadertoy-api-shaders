{
    "Shader": {
        "info": {
            "date": "1705313776",
            "description": "A simple tool to visualize the mip level based on texture coordinate density. It also has a function to find the max mip level for a given texture resolution. It's a pretty useful debugging texture mappings and check for mip errors. ",
            "flags": 0,
            "hasliked": 0,
            "id": "XcXSDM",
            "likes": 3,
            "name": "Mip Level Calculator",
            "published": 3,
            "tags": [
                "visualizer",
                "mip",
                "debug",
                "levelofdetail"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2024 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nThis shader calculates the mip level of a texture using UV coordinates. On\nthe top is the mip level ratio visualized as a color map. It is useful for \ndebugging texture mappings and check for errors in the mip levels, as they\nare often pretty hard to spot.\n\nThis also has mouse controls to adjust the scale of the texture coordinates, \ninfluencing the mip level.\n*/\n\n// makes rainbow colormap with polynimal 6\nvec3 rainbow(float t) {\n    const vec3 c0 = vec3(0.503560,-0.002932,1.000009);\n    const vec3 c1 = vec3(-1.294985,3.144463,0.001872);\n    const vec3 c2 = vec3(-16.971202,0.031355,-1.232219);\n    const vec3 c3 = vec3(97.134102,-5.180126,-0.029721);\n    const vec3 c4 = vec3(-172.585487,-0.338714,0.316782);\n    const vec3 c5 = vec3(131.971426,3.514534,-0.061568);\n    const vec3 c6 = vec3(-37.784412,-1.171512,0.003376);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// Function to calculate the highest mip level based on texture size\nfloat getHighestMipLevel (vec2 texSize) {\n    // Find the maximum dimension of the texture\n    float maxDimension = max(texSize.x, texSize.y);\n    \n    // Calculate the highest mip level using the logarithm base 2\n    float highestMipLevel = log2(maxDimension) + 1.;\n\n    // Return the highest mip level\n    return highestMipLevel;\n}\n\n// Function to calculate the mip level and the maximum mip level for a texture\n// Based on Unreal Engines ComputeMipLevel Material Function \nvec2 getMipLevel(sampler2D sam, vec2 uv, vec2 duvdx, vec2 duvdy) {\n    // Adjust mip level based on your texture size\n    vec2 texSize = vec2(textureSize(sam, 0));\n\n    // Scale the partial derivatives by the texture size\n    vec2 scaledDDX = duvdx * texSize;\n    vec2 scaledDDY = duvdy * texSize;\n\n    // Find the largest rate of change\n    float maxDDLength = max(dot(scaledDDX, scaledDDX), dot(scaledDDY, scaledDDY));\n\n    // Calculate the mip level based on the rate of change\n    float mipLevel = log2(sqrt(maxDDLength));\n\n    // Calculate the highest possible mip level for the texture\n    float maxMipLevel = getHighestMipLevel(texSize);\n\n    // Return both the mip level and the maximum mip level\n    return vec2(mipLevel, maxMipLevel);\n}\n\n// Function to calculate the mip level and the maximum mip level for a texture\nvec2 getMipLevel(sampler2D sam, vec2 uv) {\n    // Mip calculation for testing\n    vec2 duvdx = dFdx(uv);\n    vec2 duvdy = dFdy(uv);\n    \n    // Caculate Mip level\n    return getMipLevel(sam, uv, duvdx, duvdy);\n}\n\n// Visualizes Mip level based on UV coordinates and texture size\nvec3 visualizeMips(sampler2D sam, vec2 uv) {\n    // Caculate Mip level\n    vec2 mipLevel = getMipLevel(sam, uv);\n\n    // Caculate the mip level precentage and clamp it to 0-1 range\n    float mipRatio = clamp(mipLevel.x / mipLevel.y, 0.,1.);\n    \n    // colorize Mip level with colormap\n    return rainbow(mipRatio);\n}\n\n// Visualizes Mip level based on UV coordinates, texture size, and DDX/DDY\nvec3 visualizeMips(sampler2D sam, vec2 uv, vec2 duvdx, vec2 duvdy) {\n    // Caculate Mip level\n    vec2 mipLevel = getMipLevel(sam, uv, duvdx, duvdy);\n    \n    // Caculate the mip level precentage and clamp it to 0-1 range\n    float mipRatio = clamp(mipLevel.x / mipLevel.y, 0.,1.);\n    \n    // colorize Mip level with colormap\n    return rainbow(mipRatio);\n}\n\n// Visualizes Mip level based on miplevel and texture size\nvec3 visualizeMips(sampler2D sam, vec2 uv, float mipLevel) {\n    // Adjust mip level based on your texture size\n    vec2 texSize = vec2(textureSize(sam, 0));\n    \n    // Caculate the mip level precentage and clamp it to 0-1 range\n    float mipRatio = clamp(mipLevel / getHighestMipLevel(texSize), 0.,1.);\n    \n    // colorize Mip level with colormap, optional but pretty\n    return rainbow(mipRatio);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // normalized UV, Alpha.y for splitting up and Alpha.x for interpolation\n    vec2 alpha = fragCoord / iResolution.xy;\n\n    // If mouse was not clicked use animation otherwise mouse controls \n    float maxScale;\n    if (iMouse.x > 0.0) {\n        // Mouse controls\n        vec2 mouse = iMouse.xy / iResolution.xy;\n\n        // Interpolate between min and max scale values        \n        maxScale = mix(1., 1000., pow(mouse.x, 4.));\n    } else {\n        // Interpolate between min and max scale values        \n        maxScale = mix(2., 100., pow(sin(iTime * 0.3) * 0.5 + 0.5, 4.));\n    }\n\n    // Ensure the edges do not scale and have softer transitions\n    alpha.x = smoothstep(0.1, 0.9, alpha.x);\n\n    // Scaling of UV coordinates\n    uv *= pow(maxScale, alpha.x);\n\n    // Sample texture\n    vec3 color = texture(iChannel0, uv).xyz;\n    \n    // Border postion between texture and debug mip level view\n    float border = 0.9;\n    \n    // Apply mip level debug color on the top\n    if (border < alpha.y) {    \n        // Calculate the mip level for the scaled UV coordinates\n        color = visualizeMips(iChannel0, uv);\n    } \n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}