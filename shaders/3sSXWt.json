{
    "Shader": {
        "info": {
            "date": "1555226331",
            "description": "Hope someone like this shit!",
            "flags": 0,
            "hasliked": 0,
            "id": "3sSXWt",
            "likes": 6,
            "name": "Katamari Damacy",
            "published": 3,
            "tags": [
                "raymerching"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 480
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat dBox2d(vec2 p, vec2 b) {\n\treturn max(abs(p.x) - b.x, abs(p.y) - b.y);\n}\n\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    if ( val1.w < val2.w ) {\n        return val1;\n    }\n    return val2;\n}\n\nvec3 faceTex(vec2 uv) {\n    float eyeL = length(uv+vec2(0.07,-0.35))-0.005;\n    float eyeL2 = length(uv+vec2(0.08,-0.36))-0.005;\n    float eyeR = length(uv+vec2(-0.07,-0.35))-0.005;\n    float eyeR2 = length(uv+vec2(-0.08,-0.36))-0.005;\n    vec3 col = vec3(0.0,0.7,0.0);\n    float f = dBox2d(uv+vec2(0.0,-0.3),vec2(0.15,0.15));\n    float mouth = dBox2d(uv+vec2(0.0,-0.2),vec2(0.03,0.03+sin(iTime*10.0)*0.01));\n    \n    float nose = sdTriangle(vec2(0.0,0.02),vec2(0.02,-0.02),vec2(-0.02,-0.02),uv+vec2(0.0,-0.3));\n    \n    col = mix( col, vec3(0.9,0.8,0.1), 1.0-smoothstep(0.01,0.02,f) );\n    col = mix( col, vec3(0.6,0.0,0.0), 1.0-smoothstep(0.01,0.02,eyeL) );\n    col = mix( col, vec3(0.6,0.0,0.0), 1.0-smoothstep(0.01,0.02,eyeR) );\n    col = mix( col, vec3(0.6,0.0,0.0), 1.0-smoothstep(0.01,0.02,eyeL2) );\n    col = mix( col, vec3(0.6,0.0,0.0), 1.0-smoothstep(0.01,0.02,eyeR2) );\n    col = mix( col, vec3(0.7,0.0,0.0), 1.0-smoothstep(0.01,0.02,mouth) );\n    col = mix( col, vec3(0.8,0.6,0.0), 1.0-smoothstep(0.01,0.02,nose) );\n    \n    col = (uv.x<-0.35)? vec3(0.95):col;\n    col = (uv.x>0.35)? vec3(0.95):col;\n    \n    col = (uv.x< -0.25 && uv.x>-0.3)? vec3(0.0,0.9,0.0):col;\n    col = (uv.x> 0.25 && uv.x<0.3)? vec3(0.0,0.9,0.0):col;\n    \n    return col;\n}\n\nvec3 ranbowTex(vec2 uv) {\n    vec3 col = vec3(1.0);\n    uv.y = cos(uv.x)*0.5+sin(uv.y)*0.5;\n    col = (uv.y<-0.35)? vec3(1.0,0.0,0.0):col;\n    col = (uv.y>=-0.35 && uv.y< -0.15)? vec3(1.0,0.6,0.0):col;\n    col = (uv.y>=-0.15 && uv.y< 0.05)? vec3(1.0,1.0,0.0):col;\n    col = (uv.y>=0.05 && uv.y< 0.25)? vec3(0.0,1.0,0.0):col;\n    col = (uv.y>=0.25 && uv.y< 0.55)? vec3(0.3,0.3,0.8):col;\n    col = (uv.y>=0.55 && uv.y< 0.85)? vec3(0.7,0.7,1.0):col;\n    col = (uv.y>=0.85)? vec3(0.8,0.0,1.0):col;\n\n    return col;   \n}\n\nvec3 floorTex(vec2 uv) {\n    vec3 col = vec3(0.6,0.9,0.6);\n    col = (uv.x>=-1.2 && uv.x< 1.2)? vec3(0.8):col;\n    return col;\n}\n\nvec3 bodyTex(vec2 uv) {\n    vec3 col = vec3(0.0,0.7,0.0);\n    col = (uv.y<-0.38)? vec3(0.0,0.3,0.0):col;\n    return col;\n}\n\nvec4 Chara(vec3 p) {\n    vec4 head0 = vec4(1.0,0.0,0.0,length(p+vec3(0.0,-0.72,0.0))-0.05);\n    vec4 head1 = vec4(1.0,1.0,0.0,sdCappedCone((p+vec3(0.0,-0.5,0.0)),0.2,0.1,0.005));\n    vec4 head2 = vec4(faceTex(p.xy),sdRoundedCylinder((p+vec3(0.0,-0.3,0.0))*matRotateZ(radians(90.0)),0.11,0.32,0.22));\n    vec4 body = vec4(bodyTex(p.xy),sdCappedCone((p+vec3(0.0,0.17,0.0)),0.25,0.3,0.22));\n    vec4 armL = vec4(0.0,0.7,0.0,sdCapsule((p+vec3(0.33,0.2,0.0)),vec3(-0.2,-0.2,sin(iTime*10.0)*0.1),vec3(0.1,0.25,0.0),0.02));\n    vec4 armR = vec4(0.0,0.7,0.0,sdCapsule((p+vec3(-0.33,0.2,0.0)),vec3(0.2,-0.2,sin(iTime*10.0)*-0.1),vec3(-0.1,0.25,0.0),0.02));\n    vec4 legL0 = vec4(0.5,0.1,0.3,sdCapsule((p+vec3(0.15,0.7,0.0)),vec3(0.0,0.0,sin(iTime*10.0)*-0.05),vec3(0.0,0.25,0.0),0.04));\n    vec4 legL1 = vec4(0.5,0.1,0.3,sdCapsule((p+vec3(0.15,0.95,0.0)),vec3(0.0,0.0,sin(iTime*10.0)*-0.15),vec3(0.0,0.25,sin(iTime*10.0)*-0.05),0.04));\n    vec4 legL = combine(legL0,legL1);\n    vec4 legR0 = vec4(0.5,0.1,0.3,sdCapsule((p+vec3(-0.15,0.7,0.0)),vec3(0.0,0.0,sin(iTime*10.0)*0.05),vec3(0.0,0.25,0.0),0.04));\n    vec4 legR1 = vec4(0.5,0.1,0.3,sdCapsule((p+vec3(-0.15,0.95,0.0)),vec3(0.0,0.0,sin(iTime*10.0)*0.15),vec3(0.0,0.25,sin(iTime*10.0)*0.05),0.04));\n    vec4 legR = combine(legR0,legR1);\n    return combine(combine(combine(combine(combine(combine(head0,combine(head1,head2)),body),armL),armR),legL),legR);\n}\n\nvec4 map(vec3 p){    \n    vec3 pref = p;\n    vec2 uv = p.xy;\n    vec4 f = vec4(floorTex(uv),p.y+1.0);\n    vec4 c = Chara(p);\n    p.z += iTime*3.0;\n    p.z = mod(p.z,6.0)-3.0;\n    p.x = abs(p.x);\n    vec4 sphere = vec4(ranbowTex(uv),length((p+vec3(-5.0,-0.1,2.0)))-1.3);\n    \n    return combine(combine(f,c),sphere);\n}\n\nvec3 normalMap(vec3 p){\n\tfloat d = 0.0001;\n\treturn normalize(vec3(\n\t\tmap(p + vec3(  d, 0.0, 0.0)).w - map(p + vec3( -d, 0.0, 0.0)).w,\n\t\tmap(p + vec3(0.0,   d, 0.0)).w - map(p + vec3(0.0,  -d, 0.0)).w,\n\t\tmap(p + vec3(0.0, 0.0,   d)).w - map(p + vec3(0.0, 0.0,  -d)).w\n\t));\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n\tfloat h = 0.0;\n\tfloat c = 0.001;\n\tfloat r = 1.0;\n\tfloat shadow = 0.5;\n\tfor(float t = 0.0; t < 30.0; t++){\n\t\th = map(ro + rd * c).w;\n\t\tif(h < 0.001){\n\t\t\treturn shadow;\n\t\t}\n\t\tr = min(r, h * 16.0 / c);\n\t\tc += h;\n\t}\n\treturn 1.0 - shadow + r * shadow;\n}\n\n// from simon green and others\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - map(p + n*d).w);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\t\n\tvec3 camPos = vec3(0.0, 0.0, 1.3);\n\tvec3 Fwd = vec3(0.0, 0.0, -1.0);\n\tvec3 Up  = vec3(0.0,  1., 0.0);\n\t\n\tvec3 left = cross(Fwd, Up);\n\tfloat depth = 0.7;\n\tvec3 ray = normalize(left * p.x + Up * p.y + Fwd * depth);\n\n\tmat3 camRot = matRotateY(radians(sin(iTime*2.0)*10.0));\n\n\tfloat t, dist;\n\tt = 0.0;\n\tvec3 distPos = camPos;\n\tvec4 distCl = vec4(0.0);\n\tfor(int i = 0; i < 64; i++){\n\t\tdistCl = map(distPos);\n\t\tdist = distCl.w;\n\t\tt += dist;\n\t\tdistPos = (camPos + t * ray)*camRot;\n        if(dist < 0.01 || dist > 30.0) break;\n\t}\n\n\tvec3 color;\n\tfloat shadow = 1.0;\n\tif(dist < 0.1){\n\t\t// lighting\n\t\tvec3 lightDir = vec3(0.0, 1.0, 0.0);\n\t\tvec3 light = normalize(lightDir + vec3(0.5, 0.0, 0.9));\n\t\tvec3 normal = normalMap(distPos);\n\n\t\t// difuse color\n\t\tfloat diffuse = clamp(dot(light, normal), 0.1, 1.0);\n\t\tfloat lambert = max(.0, dot( normal, light));\n\t\t\n        // ambient occlusion\n        float ao = ambientOcclusion(distPos,normal);\n        \n\t\t// shadow\n\t\tshadow = shadowMap(distPos + normal * 0.001, light);\n\n\t\t// result\n\t\tcolor += vec3(lambert);\n\t\tcolor = ao*diffuse*(distCl.xyz+(.1-length(p.xy)/3.))*vec3(1.0, 1.0, 1.0);\n        \n\t}else{\n\t\tcolor =.84*max(mix(vec3(0.0,0.81,0.85)+(.1-length(p.xy)/3.),vec3(1),.1),0.);\n\t}\n\n\t// rendering result\n\tfloat brightness = 1.5;\n\tvec3 dst = (color * max(0.5, shadow))*brightness;\n\tfragColor = vec4(dst, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}