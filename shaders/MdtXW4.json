{
    "Shader": {
        "info": {
            "date": "1459535839",
            "description": "implement basic raytracer with iq's tutorial on youtube.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdtXW4",
            "likes": 7,
            "name": "basic raytracer learning",
            "published": 3,
            "tags": [
                "raytracer"
            ],
            "usePreview": 0,
            "username": "ProgC",
            "viewed": 938
        },
        "renderpass": [
            {
                "code": "\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    // sphere expression\n    //|xyz|^2 - r^2 = 0\n    // xyz = ro + t * rd;\n    // let's find out the t with quadratic equation.\n    // rd's length is 1 so skip it.\n    \n    vec3 oc = ro - sph.xyz;\n    float a = 1.0;\n    float b = 2.0 * dot( oc, rd );\n    float c = dot(oc, oc) - sph.w*sph.w;\n    float h = b * b - 4.0 * a * c;\n    if ( h < 0.0 ) return -1.0;\n    float t = (-b - sqrt(h)) / 2.0;\n    return t;    \n}\n\nvec3 nSphere( in vec3 pos, in vec4 sph )\n{\n    return (pos-sph.xyz ) / sph.w;\n}\n\nvec3 nPlane( in vec3 pos)\n{\n    return vec3(0.0, 1.0, 0.0);\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    // plane equation for y = 0\n    // ro.y + r * rd.y = 0 and solve for t\n    return -ro.y / rd.y;\n}\n\nvec4 sph = vec4(0.0, 1.0, 0.0, 1.0);\n\nfloat intersect( in vec3 ro, in vec3 rd, out float resT )\n{\n    resT = 1000.0;\n    float id = -1.0;\n    float tSphere = iSphere( ro, rd, sph );\n    float tPlane = iPlane( ro, rd );\n    \n    if ( tSphere > 0.0 ) \n    {\n        id = 1.0;\n        resT = tSphere;\n    }\n    if ( tPlane > 0.0 && tPlane < resT ) \n    {\n        id = 2.0;\n        resT = tPlane;\n    }\n    return id;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize( vec3( 0.5 ) );\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    sph.x = 0.5 * cos(iTime);\n    sph.z = 0.5 * sin(iTime);\n    \n    // generate a ray with origin ro and direction rd\n    vec3 ro = vec3(0.0, 1, 3.0);\n    vec3 rd = normalize( vec3(  -1.0 + 2.0 * uv, -1.0 ) );\n    \n    // intersect the ray with the 3d scene.\n    float t;\n    float id = intersect( ro, rd, t );\n        \n    // draw black by default.\n    vec3 col = vec3(0.0);\n    \n    if ( id > 0.0 && id <= 1.0 )\n    {\n        // hit something\n        vec3 pos = ro + t * rd;\n        vec3 nor = nSphere( pos, sph );\n        float dif = clamp(dot(nor, light ), 0.0, 1.0);\n        float amb = 0.2 + 0.1 * nor.y;\n        col = vec3( 0.2, 0.8, 0.2 ) * dif + amb + vec3(0.5, 0.6, 0.7) * amb;\n    }\n    else if ( id >= 1.4 )\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = nPlane( pos );\n        float dif = clamp( dot (nor, light), 0.0, 1.0 );\n        float amb = smoothstep( 0.0, sph.w, length(pos.xz-sph.xz) );\n        col = vec3(amb * 0.7);\n    }\n    col = sqrt(col);\n    \n    \n    fragColor = vec4(col, 1.0);           \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}