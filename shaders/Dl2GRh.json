{
    "Shader": {
        "info": {
            "date": "1672865307",
            "description": "Fills triangles with textures. Depth corrected.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dl2GRh",
            "likes": 0,
            "name": "Triangle filler 3D v0.1.1",
            "published": 3,
            "tags": [
                "triangles"
            ],
            "usePreview": 0,
            "username": "raymarchingenthusiast",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "#define TriCount 2\n\nstruct Triangle {\n    vec3 a;\n    vec3 b;\n    vec3 c;\n};\n\nvoid RecalibTris(inout Triangle tso[TriCount]) {\n    for(int i = 0; i < TriCount; i++) {\n        vec3 a = vec3(tso[i].a.xy-.5,tso[i].a.z);\n        vec3 b = vec3(tso[i].b.xy-.5,tso[i].b.z);\n        vec3 c = vec3(tso[i].c.xy-.5,tso[i].c.z);\n        tso[i] = Triangle(a,b,c);\n    }\n}\n\nvec3 CalcNorm(Triangle t) {\n    return normalize(cross(t.b-t.a,t.c-t.a));\n}\n\nvec3 CalcUv(vec2 p, Triangle tp, Triangle tuv) {\n    float w1p1 = (tp.b.y-tp.c.y)*(p.x-tp.c.x)+(tp.c.x-tp.b.x)*(p.y-tp.c.y);\n    float w1p2 = (tp.b.y-tp.c.y)*(tp.a.x-tp.c.x)+(tp.c.x-tp.b.x)*(tp.a.y-tp.c.y);\n    float w1 = w1p1/w1p2;\n    \n    float w2p1 = (tp.c.y-tp.a.y)*(p.x-tp.c.x)+(tp.a.x-tp.c.x)*(p.y-tp.c.y);\n    float w2p2 = (tp.b.y-tp.c.y)*(tp.a.x-tp.c.x)+(tp.c.x-tp.b.x)*(tp.a.y-tp.c.y);\n    float w2 = w2p1/w2p2;\n    \n    float w3 = 1. - w1 - w2;\n    \n    vec3 perspUv = w1*tuv.a/tp.a.z + w2*tuv.b/tp.b.z + w3*tuv.c/tp.c.z;\n    float pz = (w1*tp.a.z + w2*tp.b.z + w3*tp.c.z);\n    return perspUv * pz;\n}\n\nbool isInside(vec2 p, Triangle tri) {\n    float s = (tri.a.x-tri.c.x)*(p.y-tri.c.y)-(tri.a.y-tri.c.y)*(p.x-tri.c.x);\n    float t = (tri.b.x-tri.a.x)*(p.y-tri.a.y)-(tri.b.y-tri.a.y)*(p.x-tri.a.x);\n    \n    if((s<0.) != (t<0.) && s != 0. && t  != 0.) return false;\n    \n    float d = (tri.c.x-tri.b.x) * (p.y - tri.b.y) - (tri.c.y - tri.b.y) * (p.x - tri.b.x);\n    return d == 0. || (d<0.) == (s+t <= 0.);\n}\n\nTriangle Project(Triangle to) {\n    return Triangle(to.a/to.a.z,to.b/to.b.z,to.c/to.c.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord + (iMouse.xy-iResolution.xy/2.)) / iResolution.xy;\n    if(iMouse.xy == vec2(0.)) uv = fragCoord / iResolution.xy;\n    uv.xy -= .5;\n    \n    Triangle tos[TriCount];\n    Triangle uvs[TriCount];\n    \n    tos[0] = Triangle(vec3(0.,0.,.5),vec3(0.,1.,2.),vec3(1.,0.,2.));\n    uvs[0] = Triangle(vec3(0.,0.,1.),vec3(0.,1.,1.),vec3(1.,0.,1.));\n    tos[1] = Triangle(vec3(1.,.4+.4*cos(iTime*.3),1.+.5*sin(iTime)),vec3(1.),vec3(0.,1.,1.));\n    uvs[1] = Triangle(vec3(1.,0.,1.),vec3(1.),vec3(0.,1.,1.));\n    \n    RecalibTris(tos);\n    \n    fragColor = vec4(0.,0.,.3,1.);\n    for(int i = 0; i < TriCount; i++) {\n        Triangle ts = Project(tos[i]);\n        if(isInside(uv,ts)) {\n            vec3 textureUv = CalcUv(uv,ts,uvs[i]);\n            \n            vec3 col = texture(iChannel0,textureUv.xy).xyz;\n            \n            vec3 n = CalcNorm(tos[i]);\n            col *= clamp(dot(n,vec3(0.,1.,0.))*.5+.5,0.,1.);\n            \n            fragColor = vec4(col,1.);\n            if(textureUv.x>1.||textureUv.x<0.||textureUv.y>1.||textureUv.y<0.) fragColor = vec4(.15,.15,3.,1.);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}