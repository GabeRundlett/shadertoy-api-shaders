{
    "Shader": {
        "info": {
            "date": "1617884629",
            "description": "License CC0: The Monolith, take II\nResult of messing around with refractions and gas giants when needing a break\n",
            "flags": 64,
            "hasliked": 0,
            "id": "7sS3Dy",
            "likes": 10,
            "name": "The Monolith, take II",
            "published": 3,
            "tags": [
                "3d",
                "scifi"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "// License CC0: The Monolith, take II\n//  Result of messing around with refractions and gas giants when needing a break\n\n#define PI                3.141592654\n#define TAU               (2.0*PI)\n#define TIME              iTime\n#define RESOLUTION        iResolution\n#define ROT(a)            mat2(cos(a), sin(a), -sin(a), cos(a))\n#define L2(x)             dot(x, x)\n#define PSIN(x)           (0.5 + 0.5*sin(x))\n#define PCOS(x)           (0.5 + 0.5*cos(x))\n#define TTIME             (TAU*TIME)\n\nconst float miss          = 1E6;\nconst float refrIndex     = 0.8;\nconst vec3  lightPos      = 200.0*vec3(1.5, 2.0, 1.0);\n\nconst vec3 skyCol1        = vec3(0.2, 0.4, 0.6);\nconst vec3 skyCol2        = vec3(0.4, 0.7, 1.0);\nconst vec3 sunCol         =  vec3(8.0,7.0,6.0)/8.0;\n\nconst vec3 boxDim         = vec3(1.0, 9.0, 4.0)/18.0;\nconst vec4 plane          = vec4(vec3(0.0, 1.0, 0.0), 0.5);\n\nconst vec4  s_giant     = vec4(vec3(-100.0, -45.0, -50.0), 40.0);\nconst vec4  s_miniGiant = vec4(vec3(0.0), 0.4);\nconst vec4  s_planet    = vec4(0.6*vec3(1.0, 0., 0.0), 0.05);\nconst vec3  p_normal    = normalize(vec3(0.4, 1.0, 0.0));\nconst vec4  p_rings     = vec4(p_normal, 0.0);\nconst vec3  innerSunDir = normalize(vec3(-0.0, 0.25, 0.5));\n\nconst mat2  rot0        = ROT(0.0);\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  \n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\nvec4 alphaBlend(vec4 a, float adist, vec4 b, float bdist, out float dist) {\n  bool t = adist < bdist;\n  vec4 c = alphaBlend(t ? b : a, t ? a : b);\n  dist = min(adist, bdist);\n  return c;\n}\n\n// http://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat hash1(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898,58.233))) * 13758.5453);\n}\n\nvec2 hash2(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\n// https://iquilezles.org/articles/intersectors\nvec2 raySphere(vec3 ro, vec3 rd, vec4 s) {\n    vec3 ce = s.xyz;\n    float ra = s.w;\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(miss); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\n// https://iquilezles.org/articles/intersectors\nvec2 rayBox(vec3 ro, vec3 rd, vec3 boxSize, out vec3 outNormal )  {\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(miss); // no intersection\n    outNormal = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    return vec2( tN, tF );\n}\n\n// https://iquilezles.org/articles/intersectors\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p ) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nfloat noise(vec2 p) {\n  float a = sin(p.x);\n  float b = sin(p.y);\n  float c = 0.5 + 0.5*cos(p.x + p.y);\n  float d = mix(a, b, c);\n  return d;\n}\n\n// https://iquilezles.org/articles/fbm\nfloat fbm(vec2 p) {    \n  const mat2 frot = mat2(0.80, 0.60, -0.60, 0.80);\n \n  float f = 0.0;\n  float a = 1.0;\n  float s = 0.0;\n  float m = 2.0;\n  for (int x = 0; x < 2; ++x) {\n    f += a*noise(p); \n    p = frot*p*m;\n    m += 0.01;\n    s += a;\n    a *= 0.5;\n  }\n\n  return f/s;\n}\n\nvec3 normal(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(0.0001, 0);\n  \n  vec3 n;\n  n.x = fbm(p + e.xy) - fbm(p - e.xy);\n  n.y = 2.0*e.x;\n  n.z = fbm(p + e.yx) - fbm(p - e.yx);\n  \n  return normalize(n);\n}\n\n// https://iquilezles.org/articles/warp\nfloat warp(vec2 p, float e, float ttime, out vec2 v, out vec2 w) {\n  vec2 vx = vec2(0.0, 0.5)*e;\n  vec2 vy = vec2(3.2, 1.3)*e;\n\n  vec2 wx = vec2(1.7, 9.2)*e;\n  vec2 wy = vec2(8.3, 2.8)*e;\n\n  vx *= ROT(ttime/1000.0);\n  vy *= ROT(ttime/900.0);\n\n  wx *= ROT(ttime/800.0);\n  wy *= ROT(ttime/700.0);\n\n  v = vec2(fbm(p + vx), fbm(p + vy));\n  w = vec2(fbm(p + -3.0*v + wx), fbm(p + 3.0*v + wy));\n  return fbm(p + vec2(2.25, 1.25)*w);\n}\n\nvec4 planetDim(float ttime) {\n  vec4 s_p = s_planet;\n  s_p.xz *= ROT(-(ttime-26.0*TAU)*0.01);\n  return s_p;\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(1.0/2.2)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvec4 stars(vec3 ro, vec3 rd, vec3 nrd) {\n  vec3 col = vec3(0.0);\n  vec3 srd = toSpherical(rd.xzy);\n  \n  const float m = 3.0;\n  float a = 0.0;\n  \n  for (float i = 0.0; i < m; ++i) {\n    vec2 pp = srd.yz+0.5*i;\n    float s = i/(m-1.0);\n    vec2 dim  = vec2(mix(0.05, 0.003, s)*PI);\n    vec2 np = mod2(pp, dim);\n    vec2 o  = hash2(np+127.0+i);\n    float y = sin(srd.y);\n    pp += o*dim*0.5;\n    pp.y *= y;\n    float l = length(pp);\n    float l2 = L2(pp);\n  \n    float h1 = hash1(np+127.0+i);\n    float h2 = fract(h1*113.0);\n    float h3 = fract(h1*127.0);\n\n    vec3 hsv = vec3(fract(0.025-0.4*h1*h1), mix(0.5, 0.125, s), 1.0);\n    vec3 scol = mix(8.0*h2, 0.25*h2*h2, s)*hsv2rgb(hsv);\n  \n    if (h3 < y) {  \n      col += exp(-(4000.0/mix(1.0, 0.2, s))*max(l-0.001, 0.0))*scol;\n    }\n  }\n  \n  return vec4(col, 1.0);\n}\n\nfloat gasGiantShade(vec4 gasGiant, vec3 p) {\n  vec2 rsi = raySphere(p, innerSunDir, gasGiant);\n\n  // Fake, fake softshadows\n  return rsi.x >= 0.0 && rsi.x < miss ? exp(-3.0*(rsi.y - rsi.x)/(rsi.x+0.1)) : 1.0;\n}\n\nfloat planetShade(vec3 p, float ttime) {\n  vec4 s_p = planetDim(ttime);\n  vec2 rsi = raySphere(p, innerSunDir, s_p);\n\n  // Fake, fake softshadows\n  return rsi.x >= 0.0 && rsi.x < miss ? exp(-3.0*(rsi.y - rsi.x)/(rsi.x+0.1)) : 1.0;\n}\n\nvec4 gasGiant(vec4 gasGiant, vec3 ro, vec3 rd, vec3 nrd, vec3 pmod, float ttime, out float dist) {\n  vec2 rsi = raySphere(ro, rd, gasGiant);\n  \n  dist = rsi.x;\n\n  if (rsi.x == miss || rsi.x <= 0.0) {\n    return vec4(0.0);\n  }\n  \n  vec3 pi = (ro + rd*rsi.x)-gasGiant.xyz;\n  vec3 ni = normalize(pi);\n  vec3 ppi = toSpherical(pi.xzy*pmod);\n\n  float rings = 1.0;\n  for (int i = 0; i < 4; ++i) {\n    rings *= sin(-ppi.z*0.825+3.*pi.y/gasGiant.w*sqrt(float(i+3)));\n  }\n\n  rings = tanh_approx((rings)*1.5);\n  float yf = smoothstep(.6, 1.0, abs(pi.y)/gasGiant.w);\n  yf *= yf;\n\n  vec2 v;\n  vec2 w;\n  float h = warp((ppi.zy+vec2(-0.005*ttime, 0.1))*2.0*vec2(1.0, 6.0), rings, ttime, v, w);\n  rings *= rings;\n\n  float ps = planetShade(pi, ttime);\n\n  vec3 col1 = mix(vec3(0.5, 0.25, 0.2), vec3(0.5, 0.15, 0.2), rings);\n  vec3 col2 = mix(vec3(0.3, 0.3, 0.15), vec3(0.3, 0.3, 0.25), rings);\n  \n  float diff = max(dot(ni, innerSunDir), 0.0);\n  vec3 ccol = pow(diff, 0.75)*tanh_approx(pow(abs(h + 0.5), 1.5)) + (length(v)*col1 + length(w)*col2);\n\n  vec3 col = vec3(0.0);\n  col += ccol;\n  col += vec3(0.7, 0.9, 0.8)*0.8*rings;\n  col = max(col, 0.0);\n  col = mix(col, vec3(0.85), yf);\n\n  col *= ps;\n  col *= mix(0.000, 1.0, diff);\n  \n  return vec4(col, smoothstep(0.0, 0.25, (rsi.y - rsi.x)/gasGiant.w));\n}\n\nvec4 planet(vec3 ro, vec3 rd, vec3 nrd, vec3 pmod, float ttime, out float dist) {\n  vec4 s_p = planetDim(ttime);\n  vec2 rsi = raySphere(ro, rd, s_p);\n  \n  dist = rsi.x;\n\n  if (rsi.x == miss || rsi.x <= 0.0) {\n    return vec4(0.0);\n  }\n  \n  vec3 pi = ro + rd*rsi.x;\n  vec3 ni = normalize(pi - s_p.xyz);\n  vec3 ppi = toSpherical((pi-s_p.xyz).zxy*pmod);\n  float h = fbm(ppi.yz*5.0);\n\n  float yf = smoothstep(.6, 1.0, abs(pi.y)/s_planet.w);\n  yf *= yf;\n\n  float gs = gasGiantShade(s_miniGiant, pi);\n\n  float diff = (pow(max(dot(ni, innerSunDir), 0.0), 1.0));\n  vec3 col = mix(0.9*vec3(0.5, 0.5, 0.45), 0.1*vec3(0.5, 0.5, 0.8), pow(h*h, 2.0)*(1.0-yf));\n  col *= mix(0.0125, 1.5, diff);\n  col *= gs;\n  \n  return vec4(col, smoothstep(0.0, 0.5, (rsi.y - rsi.x)/s_planet.w));\n}\n\n\nvec4 rings(vec3 ro, vec3 rd, vec3 nrd, float ttime, out float dist) {\n  float rpi = rayPlane(ro, rd, p_rings);\n\n  dist = rpi;\n  \n  vec3 col = vec3(0.0);\n\n  vec3 pi = ro + rd*rpi;\n  vec3 npi = ro + nrd*rpi;\n  float aa = length(npi-pi);\n\n  vec2 pp = pi.xz;\n  float r = length(pp);\n\n  vec2 npp = npi.xz;\n  float nr = length(npp);\n\n  float d = circle(pp, 0.65);\n  d = abs(d) - 0.06;\n\n  float rings = 1.0;\n  float nrings = 1.0;\n  for (int i = 0; i < 5; ++i) {\n    rings *= sin(100.0*r*sqrt(float(i+3)));\n    nrings *= sin(100.0*nr*sqrt(float(i+3)));\n  }\n\n  float diff = max(dot(p_rings.xyz, innerSunDir), 0.0);\n\n  rings = (max((rings + nrings), 0.0))/2.0;\n\n  float gs = gasGiantShade(s_miniGiant, pi);\n  float ps = planetShade(pi, ttime);\n\n  float i = mix(0.0, 1.0, smoothstep(-aa, aa, -d))*rings;\n\n  vec3 hsv = vec3(0.15+0.1*sin(-50.0*(r+nr)), 0.3*PSIN(200.0*(r+nr)), gs*ps*diff);\n  col += hsv2rgb(hsv);\n  \n  return vec4(col, tanh_approx(i));\n}\n\nvec3 innerRender(vec3 ro, vec3 rd, vec3 nrd, vec3 enor, vec2 bd) {\n  float ttime = TTIME;\n\n  vec3 pmod = mix(vec3(-1.0), vec3(1.0), step(vec3(0.0), enor));\n  ro += mix(0.2, 0.7, fract(enor.x*sqrt(3.0)+enor.y*sqrt(5.0)+enor.z*sqrt(7.0)))*enor/bd.x;\n  float gdist;  \n  vec4 gcol = gasGiant(s_miniGiant, ro, rd, nrd, pmod, ttime, gdist);\n  \n  float pdist;\n  vec4 pcol = planet(ro, rd, nrd, pmod, ttime, pdist);\n\n  float rdist;\n  vec4 rcol = rings(ro, rd, nrd, ttime, rdist);\n\n  float dist = gdist;  \n  vec4 col = gcol;\n\n  col = alphaBlend(col, dist, pcol, pdist, dist);\n  col = alphaBlend(col, dist, rcol, rdist, dist);\n  \n  return col.xyz*col.w;\n}\n\nvec3 skyColor(vec3 ro, vec3 rd, vec3 nrd) {\n  vec3 lightDir = normalize(lightPos - ro);\n  vec3 back = vec3(0.0);\n\n  float gdist;\n  vec3 grd = rd;\n  vec3 gnrd = nrd;\n  grd.y = -grd.y;\n  gnrd.y = -gnrd.y;\n  if (rd.y > 0.0) {\n    vec4 scol = stars(ro, grd, gnrd);\n    vec4 gcol = gasGiant(s_giant, ro, grd, gnrd, vec3(1.0), 2000.0, gdist);\n    vec4 col = alphaBlend(scol, gcol);\n    return col.xyz*col.w;\n  }\n  \n  float tp  = rayPlane(ro, rd, plane);\n\n    vec3 pos  = ro + tp*rd;\n    vec3 ld   = normalize(lightPos - pos);\n    vec3 snor;\n    vec2 rb   = rayBox(pos, ld, boxDim, snor);\n    vec3 spos = pos + ld*rb.x;\n    float it  = rb.y - rb.x;\n    float sha = rb.x == miss ? 1.0 : (1.0-tanh_approx(it*6.0/(0.1+rb.x)));\n    vec3 nor  = vec3(0.0, 1.0, 0.0);\n    vec2 pos2 = pos.xz;\n    float h   = fbm(pos2)+1.0;\n    vec3 n    = normal(pos2);\n    float diff= pow(max(dot(n, ld), 0.0), 1.0);\n    vec3 icol = mix(0.5, 1.0, diff*h)*4.0*vec3(0.5, 0.5, 0.45)*sunCol*sha*dot(-rd, nor);\n\n    vec3  pcol= vec3(0.5);\n\n    vec3 col  = icol*pcol;\n    col = clamp(col, 0.0, 1.0);\n    float f   = exp(-0.05*(max(tp, 0.0)));\n    return mix(back, col , f);\n}\n\n\nvec3 render(vec3 ro, vec3 rd, vec3 nrd) {\n  vec3 skyCol = skyColor(ro, rd, nrd);\n  vec3 col = vec3(0.0);\n\n  float t   = 1E6;\n  vec3 nor;\n  vec2 rb = rayBox(ro, rd, boxDim, nor);  \n\n  if (rb.x < miss) {\n    t = rb.x;\n    float itd = rb.y - rb.x;\n    vec3 pos  = ro + t*rd;\n    vec3 anor = abs(nor);\n    vec2 tp   = anor.x == 1.0 ? pos.yz : (anor.y == 1.0 ? pos.xz : pos.xy);\n    vec2 bd   = anor.x == 1.0 ? boxDim.yz : (anor.y == 1.0 ? boxDim.xz : boxDim.xy);\n    vec3 refr = refract(rd, nor, refrIndex);\n    vec3 nrefr= refract(nrd, nor, refrIndex);\n    vec3 refl = reflect(rd, nor);\n    vec3 nrefl= reflect(nrd, nor);\n    vec3 rcol = skyColor(pos, refl, nrefl);\n    float fre = mix(0.0, 1.0, pow(1.0-dot(-rd, nor), 3.0));\n    vec3 ld   = normalize(lightPos - pos);\n    float dif = pow(max(dot(nor,ld),0.0), 3.0);\n    float spe = pow(max(dot(reflect(-ld, nor), -rd), 0.), 50.);\n    float lin = mix(0.0, 1.0, dif);\n    vec3 lcol = 2.0*sqrt(sunCol);\n\n    col = innerRender(pos, refr, nrefr, nor, bd);\n\n    vec2 btp = (1.0*bd - abs(tp));\n    float bdd = pmin(btp.x, btp.y, 0.0125);    \n    float bddd = exp(-10000.0*bdd*bdd);\n    col *= 1.0 - bddd;\n\n    vec3 diff = hsv2rgb(vec3(0.7, fre, 0.075*lin))*lcol;\n    col += fre*rcol+diff+spe*lcol;\n    if (refr == vec3(0.0)) {\n      // Not expected to happen as the refraction index < 1.0\n      col = vec3(1.0, 0.0, 0.0);\n    }\n    \n    col = mix(col, skyCol, tanh_approx(1E-5/(itd*itd)));\n  } else {\n    // Ray intersected sky\n    return skyCol;\n  }\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord.xy/RESOLUTION.xy; \n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec2 np = p + 4.0/RESOLUTION.yy;\n\n  vec3 ro = mix(0.5, 0.25, PCOS(TTIME/120.0*sqrt(3.0)))*vec3(2.0, 0, 0.2)+vec3(0.0, -0.125, 0.0);\n  ro.yx *= ROT(-sin(TTIME/120.0*sqrt(0.5))*0.25);\n  ro.xz *= ROT((TAU*(TIME-14.0)/120.0));\n  vec3 la = vec3(0.0, 0.0, 0.0);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww,uu));\n  float rdd = 2.0;\n\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  vec3 col = render(ro, rd, nrd);\n  col = mix(vec3(0.0), clamp(col, 0.0, 1.0), smoothstep(5.0, 12.0, TIME));\n  fragColor = vec4(postProcess(col, q),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26517,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/fantasia-official-music/2001-a-space-odyssey-also"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}