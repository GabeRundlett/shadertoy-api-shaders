{
    "Shader": {
        "info": {
            "date": "1556386417",
            "description": "A shader implementation of OneLoneCoder's excellent \"Code-It-Yourself!\" episode ( https://www.youtube.com/watch?v=KkMZI5Jbf18 )\n\nUse the arrow keys to control the race car:\nUp - accelerate\nLeft - turn left\nRight - turn right\n",
            "flags": 48,
            "hasliked": 0,
            "id": "wtl3W4",
            "likes": 12,
            "name": "Retro Arcade Racer",
            "published": 3,
            "tags": [
                "game",
                "retro",
                "multipass",
                "racer",
                "arcade"
            ],
            "usePreview": 0,
            "username": "VerticalPink",
            "viewed": 1102
        },
        "renderpass": [
            {
                "code": "// colours\nconst vec4 GRASS_LIGHT=vec4(0.02,0.9,0.08,1.0);\nconst vec4 GRASS_DARK=vec4(0.04,0.7,0.08,1.0);\nconst vec4 CLIPPING1=vec4(0.85,0.1,0.05,1.0);\nconst vec4 CLIPPING2=vec4(0.9,0.9,0.9,1.0);\nconst vec4 ROAD=vec4(0.6,0.6,0.6,1.0);\nconst vec4 SKY_LIGHT=vec4(0.5,0.75,0.95,1.0);\nconst vec4 SKY_DARK=vec4(0.4,0.6,0.8,1.0);\nconst vec4 SILVER_SAND=vec4(0.74902, 0.752941, 0.760784, 1.0);\n\nconst vec4 TYRE_COLOUR=vec4(0,0,0,1);\nconst vec4 SPOILER_COLOUR=vec4(1);\nconst vec4 REAR_COLOUR=vec4(0.007843, 0.0, 0.839216, 1.0);\nconst vec4 CHASSIS_COLOUR=vec4(0.513426, 0.0, 0.183922, 1.0);\n\n    \n// object ids\nconst int TYRES = 1;\nconst int BODY = 2;\nconst int SPOILER = 4;\nconst int BACK = 3;\n\n// sizes\nconst float HORIZON_LEVEL = 0.5;\nconst float HEIGHT_RANGE = 0.25;\nconst float MID_POINT = 0.5;\nconst float ROAD_WIDTH_MIN = 0.086;\nconst float ROAD_WIDTH = 0.8;\nconst float CLIPPING_WIDTH = 0.1;\nconst float CLIPPING_DIVISION = 0.1;\nconst float MIN_WIDTH = 0.05;\n\nconst float VIGNETTE_RADIUS = 0.68;\nconst float VIGNETTE_SOFTNESS = 0.36;\nconst float PAL_LINES = 288.;//576.;\nconst float PAL_WIDTH = 702.;//720.;\n\nfloat sdUnion(float a, float b)\n{\n    return min(a, b);\n}\n\nvec2 sdTranslate(vec2 pos, vec2 ofs)\n{\n    return pos - ofs;\n}\n\nvec2 sdRotate(vec2 pos, float amount)\n{\n    const float PI=3.14159625;\n    float angle = amount * -2.0 * PI;\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(c*pos.x+s*pos.y, c*pos.y-s*pos.x);\n}\n\nfloat sdBox(vec2 p, vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2, he);\n    vec2 k2 = vec2(r2-r1, 2.0*he);\n\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x - min(p.x, (p.y < 0.0)? r1: r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p, k2) / dot(k2, k2), 0.0, 1.0 );\n    \n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0; \n    return s*sqrt( min(dot(ca, ca), dot(cb, cb)) );\n}\n\nfloat sdRounded(float p, float r)\n{\n\treturn p - r;\n}\n\nfloat sdRearSpoiler(in vec2 p)\n{\n    vec2 q = sdTranslate(p, vec2(0.0, 0.116));\n    float spoiler = sdBox(q, vec2(0.04, 0.008));\n    \n    q = sdTranslate(p, vec2(-0.02, 0.1));\n    float left_mount = sdBox(q, vec2(0.002, 0.016));\n\n    q = sdTranslate(p, vec2(+0.02, 0.1));\n    float right_mount = sdBox(q, vec2(0.002, 0.016));\n\n    return sdUnion(spoiler, sdUnion(left_mount, right_mount));\n}\n\nfloat sdFrontSpoiler(in vec2 p)\n{\n    vec2 q = sdTranslate(p, vec2(0.0, 0.16));\n    return sdTrapezoid(q, 0.03, 0.02, 0.004);\n}\n\n\nint raceCar(in vec2 p, in float angle)\n{\n    vec2 pr = sdRotate(p, angle);\n    vec2 q = sdTranslate(pr, vec2(-0.05, 0.08));\n    if (sdRounded(sdBox(q, vec2(0.003, 0.02)), 0.01) < 0.0)\n        return TYRES;\n    q = sdTranslate(pr, vec2(+0.05, 0.08));\n    if (sdRounded(sdBox(q, vec2(0.003, 0.02)), 0.01) < 0.0)\n        return TYRES;\n\n    q = sdTranslate(pr, vec2(0., 0.));\n    if (sdRearSpoiler(q) < 0.0)\n        return SPOILER;\n    \n    q = sdTranslate(pr, vec2(0., 0.118));\n    if(sdTrapezoid(q, 0.04, 0.01, 0.04) < 0.0)\n        return BODY;\n\n    q = sdTranslate(pr, vec2(+0.03, 0.14));\n    if (sdRounded(sdBox(q, vec2(0.004, 0.016)), 0.006) < 0.0)\n        return TYRES;\n    q = sdTranslate(pr, vec2(-0.03, 0.14));\n    if (sdRounded(sdBox(q, vec2(0.004, 0.016)), 0.006) < 0.0)\n        return TYRES;\n\n    q = sdTranslate(pr, vec2(0., 0.));\n    if (sdFrontSpoiler(q) < 0.0)\n        return SPOILER;\n    \n    q = sdTranslate(pr, vec2(0., 0.07));\n    if (sdBox(q, vec2(0.04, 0.008)) < 0.0)\n        return BACK;\n    \n    return 0;\n}\n\n\nvec4 clipping(in float y, in float d, in float best)\n{\n    float a = sin(500.0 * pow(y, 2.0) + d*0.8);\n    float b = step(a, 0.);\n    float c = best == 0.? 0.: 1.;\n    float e = sin(iTime*16.);\n\n    // c and e are non-zero if the new-fasted-lap-counter is non-zero\n    return (1.-c)*(b * CLIPPING1 + (1.-b)*CLIPPING2) + c*vec4(0.3,0.3,1.0,1.0)*e+c*vec4(1,1,0,1)*(1.-e);\n}\n\nvec4 grass(float y, float d) {\n    float a = sin(100.0 * pow(y, 2.0) + d*0.2);\n    float b = step(a, 0.);\n    return b * GRASS_LIGHT + (1.-b)*GRASS_DARK;\n}\n\nvec4 road(in vec2 pos, in float dist, in float sector)\n{\n    if (sector == 0.)\n    {\n        float a = sin(400.*pow(pos.y, 2.0) + dist*0.1);\n        float b = step(a, 0.);\n        return b*SILVER_SAND + (1.-b)*vec4(0.2,0.2,0.34, 1.);\n    }\n    else\n    \treturn ROAD;\n}\n\nvec4 vignette(in vec2 pos, in vec4 col)\n{\n    float len = length(pos - vec2(.5));\n    float v = smoothstep(VIGNETTE_RADIUS, VIGNETTE_RADIUS - VIGNETTE_SOFTNESS, len);\n    v = clamp(pow(2. * v, .3), 0., 1.);\n    return vec4(col.rgb * v, 1.);\n}\n\nvec4 scanlines(in vec2 pos, in vec4 col)\n{\n    float scanline = clamp(0.94 + 0.08 * cos(3.141593 * (pos.y + 0.0034 * iTime) * PAL_LINES), 0., 1.);\n\tfloat grid = 0.8 + clamp(1.5 * cos(3.141593 * pos.x * PAL_WIDTH), 0., 1.);\n    return vec4(col.rgb * scanline * grid *1.2, 1.);\n}\n\nvec4 loadValue(in ivec2 index)\n{\n    return texelFetch(iChannel0, index, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // normalise pixel coordinates [0..1]\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0);\n\n    // load game state\n    vec4 curvatures = loadValue(CURVATURE);\n    float curvature = curvatures.x;\n    float track_curvature = curvatures.z;\n\tfloat dist = loadValue(DISTANCE).x;\n    float direction = loadValue(DIRECTION).x;\n    float segment = loadValue(SEGMENT).x;\n    float best = loadValue(NEW_BEST).x;\n\tfloat height = curvatures.w;\n    \n    float horizon = HORIZON_LEVEL + height*HEIGHT_RANGE;\n    float perspective = 1.0 - uv.y / horizon;\n    float road_width = 0.5 * (ROAD_WIDTH_MIN + perspective*ROAD_WIDTH);\n    float clipping_width = road_width * CLIPPING_WIDTH;\n\n    float middle = MID_POINT + curvature*pow(1.0-perspective, 3.0);\n\n\t// limits\n\tfloat left_grass = middle - road_width - clipping_width;\n\tfloat left_clipping = middle - road_width;\n\tfloat right_grass = middle + road_width + clipping_width;\n\tfloat right_clipping = middle + road_width;\n    \n    // draw track\n    if (uv.y < horizon && (uv.x <= left_grass) || (uv.x >= right_grass))\n        col = grass(uv.y, dist);\n    if (uv.y < horizon && uv.x > left_grass && uv.x <= left_clipping)\n        col = clipping(uv.y, dist, best);\n    if (uv.y < horizon && uv.x >= right_clipping && uv.x < right_grass)\n        col = clipping(uv.y, dist, best);\n    if (uv.y < horizon && uv.x > left_clipping && uv.x < right_clipping)\n        col = road(uv, dist, segment);\n\n    // draw sky\n    if (uv.y >= horizon)\n    {\n        float a = step((1.-horizon)/2., uv.y-horizon); \n        col = a*SKY_DARK + (1.-a)*SKY_LIGHT;\n    }\n\n    float car_pos = MID_POINT + (curvatures.y - curvatures.z) * 0.5;\n    car_pos= clamp(car_pos, 0., 1.);\n    \n    // draw race car\n    vec2 p = sdTranslate(uv, vec2(car_pos, 0.));\n    int m = raceCar(p, direction * 0.02);\n    if (m == TYRES)\n        col = TYRE_COLOUR;\n    if (m == BODY)\n        col = CHASSIS_COLOUR;\n    if (m == BACK)\n        col = REAR_COLOUR;\n    if (m == SPOILER)\n        col = SPOILER_COLOUR;\n    \n    fragColor = scanlines(uv, vignette(uv, col));;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n * Local state: \n *\n * SPEED:      \t.x [0..1]\n * DIRECTION:  \t.x [-1,0,+1]\n * CURVATURE:\t\n *              .x current curvature\n *              .y player curvature\n *              .z track curvature\n *              .w track height\n * SEGMENT:     .x current track segment\n * DISTANCE:    .x current track distance\n * LAP_TIME:    .x (seconds)\n * BEST_LAP:    .x (seconds)\n * NEW_BEST:    .x (indicator: time left in seconds)\n */\nconst ivec2 SPEED = ivec2(1, 0);\nconst ivec2 DIRECTION = ivec2(1, 1);\nconst ivec2 CURVATURE = ivec2(2, 0);\nconst ivec2 SEGMENT = ivec2(2, 1);\nconst ivec2 DISTANCE = ivec2(3, 0);\nconst ivec2 LAP_TIME = ivec2(3, 1);\nconst ivec2 BEST_LAP = ivec2(4, 0);\nconst ivec2 NEW_BEST = ivec2(4, 1);\n\n// limits of the state space\nconst int STATE_COUNT_X = 4;\nconst int STATE_COUNT_Y = 1;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/**\n * Update the game state\n * ---------------------\n *\n * The race track is a list of segments that consist of length, curvature, and height.  \n * The shader updates the current lap time and reads the keyboard to accelerate and \n * steer the player car.\n *\n * From these inputs, the distance travelled is updated. From the travelled distance,\n * the current track segment is calculated.\n *\n * The current curvature is then interpolated towards the curvature of the track segment\n * and all updated state values (curvature, speed, distance, lap time, etc.) written to\n * output buffer.\n *\n * For details, see https://www.youtube.com/watch?v=KkMZI5Jbf18\n *\n * Writing a state is done by checking whether the currently shaded pixel matches the\n * position of the value in the buffer. So if a value sits at (1,0) it is only written\n * if pixel (1,0) is currently being calculated.\n *\n */\nconst vec2 ACCELERATION = vec2(2.0f, 1.0f); // acceleration and breaking in units per second\nconst float STEERING = 0.7;                 // steering difficulty (\"drift factor\")\nconst float OFFTRACK_LIMIT = 0.8;           // off-track (percentage of screen)\nconst float OFFTRACK_SLOWDOWN = 5.0;        // slow-down factor when off-track\nconst float SPEED_FACTOR = 120.;            // max speed in units per seconds\n\nconst int KEY_LEFT  = 37;\t\t\t\t\t// key code: left arrow\nconst int KEY_UP    = 38;\t\t\t\t\t// key code: up arrow\nconst int KEY_RIGHT = 39;\t\t\t\t\t// key code: right arrow\nconst int KEY_DOWN  = 40;\t\t\t\t\t// key code: down arrow\n\n// Track segment\nstruct Segment {\n    float curvature;\t\t\t\t\t\t// curvature (-1..+1)\n    float len;\t\t\t\t\t\t\t\t// length in units\n    float height;\t\t\t\t\t\t\t// horizon level\n};\n\n// Race track: List of segments\nconst Segment TRACK[] = Segment[](\n    Segment(0.0, 5.0, 0.0),\n    Segment(0.0, 245.0, 0.0),\n    Segment(1.0, 150.0, 0.5),\n    Segment(0.0, 100.0, -0.2),\n    Segment(-1.0, 80.0,-0.3),\n    Segment(1.0, 120.0,-0.2),\n    Segment(-0.6, 100.0, 0.2),\n    Segment(0.0, 100.0, 0.0)\n);\n\n// Total track length in units (sum of TRACK[].len)\nconst float TRACK_DISTANCE = 900.;\n\n// Check key down\n#define keyClick(code) ( texelFetch(iChannel1, ivec2(code, 0), 0).x > 0. )\n\n// Load value from current state (stored in Buffer A at iChannel0)\nvec4 loadValue(in ivec2 index)\n{\n    return texelFetch(iChannel0, index, 0);\n}\n\n// Store vector to current state (stored in Buffer A at iChannel0)\nvoid storeValue(in ivec2 index, in vec4 value, inout vec4 fragColor, in ivec2 pos)\n{\n    fragColor = (index==pos)? value: fragColor;\n}\n\n// Store scalar to current state (stored in Buffer A at iChannel0)\nvoid storeValue(in ivec2 index, in float value, inout vec4 fragColor, in ivec2 pos)\n{\n    fragColor = (index==pos)? vec4(value): fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipos = ivec2(fragCoord-0.5);\n\n    // don't compute if outside of state space\n    if (ipos.x > STATE_COUNT_X || ipos.y > STATE_COUNT_Y) discard;\n    \n    // load current state\n    float speed = loadValue(SPEED).x;\n    vec4 curvatures = loadValue(CURVATURE);\n    float curvature = curvatures.x;\n    float player_curvature = curvatures.y;\n    float track_curvature = curvatures.z;\n    float height = curvatures.w;\n    float dist = loadValue(DISTANCE).x;\n    float lap_time = loadValue(LAP_TIME).x;\n    float best_lap = loadValue(BEST_LAP).x;\n    float new_best = loadValue(NEW_BEST).x;\n    // done loading\n    \n    // initialise lap times\n    if (iFrame == 0)\n    {\n        lap_time = 0.;\n        new_best = 0.;\n        best_lap = 120.;\n    }\n\n    // update lap time and new-best-lap-indicator \n    lap_time += iTimeDelta;\n\tnew_best -= iTimeDelta;\n    if (new_best < 0.) new_best = 0.;\n    \n    // accelerate or slow down\n    if (keyClick(KEY_UP))\n    \tspeed += ACCELERATION.x * iTimeDelta;\n    else\n    \tspeed -= ACCELERATION.y * iTimeDelta;\n\n    // update player direction\n    float direction = 0.;\n    \n    // steering strength is inversely proportional to speed:\n    // the faster you go, the harder it is to turn\n    if (keyClick(KEY_LEFT))\n    {\n        player_curvature -= STEERING * iTimeDelta * (1.0 - speed * 0.5);\n        direction = -1.;\n    }\n\n    if (keyClick(KEY_RIGHT))\n    {\n        player_curvature += STEERING * iTimeDelta * (1.0 - speed * 0.5);\n        direction = +1.;    \n    }\n\n    // slow down if the player is off-track\n    if (abs(player_curvature - track_curvature) >= OFFTRACK_LIMIT)\n        speed -= OFFTRACK_SLOWDOWN * iTimeDelta;\n\n    // clamp speed\n    speed = clamp(speed, 0., 1.);\n\n    // increase distance travelled\n    dist += SPEED_FACTOR * speed * iTimeDelta;\n\n    float new_time = 0.;\n    // complete lap\n    if (dist >= TRACK_DISTANCE)\n    {\n        dist -= TRACK_DISTANCE;\n        new_time = step(lap_time, best_lap);\n        new_best = new_time * 5.;\n        best_lap = new_time * lap_time + (1.-new_time)*best_lap;\n        lap_time = 0.;\n    }\n\n    // find current track segment\n    int sector = 0;\n    float ofs = 0.;\n    while (sector < TRACK.length() && ofs <= dist)\n    {\n        ofs += TRACK[sector++].len;\n    }\n\n    // interpolate curvature towards traget \n    float target_curvature = TRACK[sector-1].curvature;\n    float diff = (target_curvature - curvature) * iTimeDelta * speed;\n    \n    curvature += diff;\n    track_curvature += curvature * iTimeDelta * speed;\n\n    float target_height = TRACK[sector-1].height;\n    diff = (target_height - height) * iTimeDelta * speed;\n    height += diff;\n    \n\tcurvatures = vec4(curvature, player_curvature, track_curvature, height);\n\n    storeValue(SPEED, speed, fragColor, ipos);\n    storeValue(CURVATURE, curvatures, fragColor, ipos);\n    storeValue(DISTANCE, dist, fragColor, ipos);\n    storeValue(LAP_TIME, lap_time, fragColor, ipos);\n    storeValue(BEST_LAP, best_lap, fragColor, ipos);\n    storeValue(NEW_BEST, new_best, fragColor, ipos);\n    storeValue(DIRECTION, direction, fragColor, ipos);\n    storeValue(SEGMENT, vec4(sector-1), fragColor, ipos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}