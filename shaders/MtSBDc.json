{
    "Shader": {
        "info": {
            "date": "1517363601",
            "description": "I'm trying to get nimitz's amazing Ether down to two tweets:\n[url]https://www.shadertoy.com/view/MsjSW3[/url]\nPlease help me reduce this shader. Thank you.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtSBDc",
            "likes": 87,
            "name": "Golfing Ether - 362 chars",
            "published": 3,
            "tags": [
                "raymarch",
                "small",
                "golf",
                "ether"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 13522
        },
        "renderpass": [
            {
                "code": "// 362 chars - Thanks to timestamp and Fabrice, this is 7 chars lighter!\n#define m  *= mat2( cos( vec4(0,33,55,0) + t*//\n#define M  ( s.xz m.4)), s.xy m.3)) ,                        \\\n               length(s + sin(t*.7))                         \\\n             * log( length(s) + 1. )                         \\\n             + sin( sin(sin(s+=s+t).y+s).z + s ).x * .5 - 1. \\\n           )\n\nvoid mainImage(out vec4 o, vec2 u){\n    vec3 p,s,O,R = iResolution;\n    for( float t = iTime, d = 2.5, r;\n         R.z++ < 7.;\n         o.xyz = O = max(O+.7-r*.28,O)\n                   * ( vec3(.1,.3,.4) - vec3(10,5,6)*(M-r)/4. )\n       )\n        s = p = vec3( (u - .5*R.xy ) / R.y * d, 5.-d ),\n        d += min( r = M, 1. ),\n        s = p + .1;\n}\n\n\n// 369 chars - coyote uses some Sith magic to battle Jedi Fabrice!! \n/**\n#define m *= mat2( cos( vec4(0,33,55,0) + t*\n\n#define M \\\n  ( s.xz m.4)), s.xy m.3)),        \\\n    length(s+sin(t*.7))*log(length(s)+1.) + sin(q+sin(q+sin( q= s+s+t ).y).z).x*.5 - 1. )\n\nvoid mainImage(out vec4 o, vec2 u) {\n    o*=0.;\n    vec3 q,p,s, R=iResolution;\n    for( float t=iTime, d=2.5, r; R.z++<7.; \n          o *= vec4(.1,.3,.4,0) - vec4(10, 5, 6,0) * (M-r) /4. )\n        s = p = vec3( ( u - .5*R.xy ) /R.y * d , 5.-d ),\n        d += min( r = M, 1.),\n        s = p + .1,\n        o += max( .7-r*.28 ,0.);\n}        \n/*\n\n\n// 354 chars - Just when I think it can't get any smaller, Fabrice pulls a MIRACLE!!\n\n#define m *= mat2( cos( vec4(0,33,55,0) + t*\n\n#define M                          \\\n  ( s=p,                           \\\n    s.xz m.4)), s.xy m.3)),        \\\n    q = s+s+t,                     \\\n    length(s+sin(t*.7))*log(length(s)+1.) + sin(q.x+sin(q.z+sin(q.y)))*.5 - 1. )\n\n\n#define mainImage(o,u)\t           \\\n   vec3 q,p,s, R=iResolution;      \\\n    for( float t=iTime, d=2.5, r; R.z++<7.; d += min(r,1.)) \\\n\t\tp = vec3( ( u - .5*R.xy ) /R.y * d , 5.-d ),        \\\n        r = M,                     \\\n        o += max( .7-r*.28 ,0.),   \\\n        p += .1,                   \\\n        o *= vec4(.1,.3,.4,0) - vec4(10, 5, 6,0) * (M-r) /4.\n\n\n        \n// 387 chars - Once again, Fabrice reduces what CAN'T be reduced. ;-)\n\n#define m(a) mat2(cos(t*a+vec4(0,33,55,0)))\n\n#define M(p)                       \\\n  ( s=p, t=iTime,                  \\\n    s.xz*= m(.4), s.xy*= m(.3),    \\\n    q = s+s+t,                     \\\n    length(s+sin(t*.7))*log(length(s)+1.) + sin(q.x+sin(q.z+sin(q.y)))*.5 - 1. )\n\n\n#define mainImage(o,u)\t           \\\n   vec3 q,p,s, R=iResolution;        \\\n    for( float t, d=2.5, r, i=0.; i++<6.; d += min(r,1.)) \\\n\t\tp.xy = ( u - .5*R.xy ) /R.y * d,                  \\\n        p.z = 5.-d,                                       \\\n        o += smoothstep(2.5, 0., r = M(p) ) *.7,          \\\n        o *= vec4(.1,.3,.4,0) + vec4(5, 2.5, 3,0)*max(( r-M(p+.1) )*.5, -.1) \n\n\n        \n// 401 chars - Golfing legend Fabrice did it again!!\n\n#define m(a) mat2(cos(a+vec4(0,33,55,0)))\nvec3 q,p;\nfloat t, d=2.5, r;\n\nfloat M(vec3 p){\n    t=iTime;\n    p.xz*= m(t*.4);p.xy*= m(t*.3);\n    q = p+p+t;\n    return length(p+sin(t*.7))*log(length(p)+1.) + sin(q.x+sin(q.z+sin(q.y)))*.5 - 1.;\n}\n\n#define mainImage(o,u)\t\t\\\nfor(int i=0; i++<6;)\t\\\n\t\tp.xy = (u/iResolution.y - vec2(.9,.5))*d,\t\\\n        p.z = 5.-d,\t\\\n        o += smoothstep(2.5, 0., r = M(p))*.7,\t\\\n        o *= vec4(.1,.3,.4,0) + vec4(5, 2.5, 3,0)*clamp((r - M(p+.1))*.5, -.1, 1.),\t\\\n        d += min(r, 1.)\n\n\n        \n// Thanks to BigWings I made a few chars disappear:\n\n#define m(a) mat2(cos(a+.8*vec4(6,0,0,2)))\nvec3 q,p;\nfloat t, d=2.5, r, i=0.;\n\nfloat M(vec3 p){\n    t=iTime;\n    p.xz*= m(t*.4);p.xy*= m(t*.3);\n    q = p+p+t;\n    return length(p+sin(t*.7))*log(length(p)+1.) + sin(q.x+sin(q.z+sin(q.y)))*.5 - 1.;\n}\n\n#define mainImage(o,u)\t\t\\\nwhile(i++<6.){\t\\\n\t\tp = vec3(u/iResolution.y - vec2(.9,.5), -1)*d;\t\\\n        p.z += 5.;\t\\\n        o += smoothstep(2.5, 0., r = M(p))*.7;\t\\\n        o *= vec4(.1,.3,.4,0) + vec4(5, 2.5, 3,0)*clamp((r - M(p+.1))*.5, -.1, 1.);\t\\\n        d += min(r, 1.);}\n\n\n\n// 600 chars - Original shader by nimitz:\n\n#define t iTime\nmat2 m(float a){float c=cos(a), s=sin(a);return mat2(c,-s,s,c);}\nfloat map(vec3 p){\n    p.xz*= m(t*0.4);p.xy*= m(t*0.3);\n    vec3 q = p*2.+t;\n    return length(p+vec3(sin(t*0.7)))*log(length(p)+1.) + sin(q.x+sin(q.z+sin(q.y)))*0.5 - 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\t\n\tvec2 p = fragCoord.xy/iResolution.y - vec2(.9,.5);\n    vec3 cl = vec3(0.);\n    float d = 2.5;\n    for(int i=0; i<=5; i++)\t{\n\t\tvec3 p = vec3(0,0,5.) + normalize(vec3(p, -1.))*d;\n        float rz = map(p);\n\t\tfloat f =  clamp((rz - map(p+.1))*0.5, -.1, 1. );\n        vec3 l = vec3(0.1,0.3,.4) + vec3(5., 2.5, 3.)*f;\n        cl = cl*l + (1.-smoothstep(0., 2.5, rz))*.7*l;\n\t\td += min(rz, 1.);\n\t}\n    fragColor = vec4(cl, 1.);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}