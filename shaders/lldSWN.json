{
    "Shader": {
        "info": {
            "date": "1479759723",
            "description": "Scherk towers. DE stuff by DarkBeam (fractalforums.com)",
            "flags": 0,
            "hasliked": 0,
            "id": "lldSWN",
            "likes": 15,
            "name": "K-Tower",
            "published": 3,
            "tags": [
                "scherk",
                "minimalsurfaces"
            ],
            "usePreview": 0,
            "username": "woronoi",
            "viewed": 799
        },
        "renderpass": [
            {
                "code": "float kTower(vec3 p)\n{\n    float z = p.z;\n    float t=1.5*atan(p.y,p.x);\n    float u=sqrt(p.x*p.x+p.y*p.y);\n    float x=sin(t)*u;\n    float y=cos(t)*u;\n    float ex=exp(x);\n    float ey=exp(y);\n    float zz=ex*ey;\n    float n=ex*ex+ey*ey;\n    float d=1.0+zz*zz;\n    zz=4.0*sin(p.z)*zz;\n    if (zz>0.0) n=n+zz; else d=d-zz;\n    return abs(log(n/d))-0.05;\n}\n\nvec2 map( in vec3 p )\n{\n    float s = 0.4;\n    float d2= cos(s*p.x)*sin(0.5*s*p.y)*cos(s*p.z);\n    float d1 = kTower(p);\n    return vec2(d1+d2,length(p));\n}\n\n\nvec2 castRay(in vec3 ro, in vec3 rd)\n{\n\tconst float MAX_DIST = 60.0;\n\tconst float MIN_DIST = 0.0002;\n\tconst float NONE = -1.0;\n\n\tfloat t = 0.0;\n\tvec2 res = vec2(-1.0);\n\tvec2 h = vec2(1.0);\n\tfloat overstep = 0.0;\n\tfloat phx = MAX_DIST;\n\n\tfor (int i = 0; i < 100; i++)\n\t{\n\t\tif (h.x < MIN_DIST || t > MAX_DIST)\n\t\t\tbreak;\n\n\t\th = map(ro + rd * t);\n\n\t\tif (h.x > overstep)\n\t\t{\n\t\t\toverstep = h.x * min(1.0, 0.5 * h.x / phx);\n\t\t\tt += h.x * 0.3 + overstep;\n\t\t\tphx = h.x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt -= overstep;\n\t\t\tphx = MAX_DIST;\n\t\t\th.x = 1.0;\n\t\t\toverstep = 0.0;\n\t\t}\n\n\t\tres = vec2(t, h.y);\n\t}\n\n\tif (t > MAX_DIST)\n\t\tres = vec2(NONE);\n\n\treturn res;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) + rd.y * 0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3(4.0*cos(time), -1.0, 8.0*time + 8.0 );\n    vec3 ta = vec3( 0.0, 0.0, 0.5 * ro.z ) + ro;\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, time*0.2 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}