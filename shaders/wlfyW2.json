{
    "Shader": {
        "info": {
            "date": "1593080781",
            "description": "Compare built in cos & sine with an accurate Taylor expansion - horizontal scale is ±pi/2, vertical is ±1e-4 or ±1e-6 depending on platform. For cos, errors peak around zero where linear approximation is hardest.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlfyW2",
            "likes": 3,
            "name": "Cos Accuracy",
            "published": 3,
            "tags": [
                "cos",
                "accuracy"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "// Trig function errors. This is mainly intended to show what happens on Intel\n// where cos and sine are computing with a simple piecewise linear\n// approximation. There is a check for GPUs with better trig functions, eg. Nvidia,\n// and zooms in vertically if so (it's just checking a single value so might\n// give false positives though).\n\n// Red channel: error in cos(x)\n// Green channel: error in sin(x)\n// Blue channel: ulps error in cos(x)\n\nfloat PI = 3.141592654;\nfloat mycos(float x) {\n  int N = 12;\n  float x2 = x*x, y = 1.0;\n  for (int n = N; n > 0; n-=2) {\n    y = 1.0-x2*y/float(n*(n-1));\n  }\n  return y;\n}\n\n\nfloat mysin(float x) {\n  int N = 10;\n  float x2 = x*x, y = 1.0;\n  for (int n = N; n > 0; n-=2) {\n    y = 1.0-x2*y/float(n*(n+1));\n  }\n  return x*y;\n}\n\nbool comp(float y, float r) { return (0.0 < y) == (y < r); }\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  float scale = 1e-4;\n  float check = max(0.1,-iTime);\n  if (abs(cos(check)-mycos(check)) < 1e-6) scale = 1e-6;\n  float x = 0.5*PI*(2.0*fragCoord.x-iResolution.x)/iResolution.x;\n  float y = scale * (2.0*fragCoord.y-iResolution.y)/iResolution.y;\n  float r = cos(x) - mycos(x);\n  float s = sin(x) - mysin(x);\n  // The ulps check assumes both values have the same sign.\n  int ulps = floatBitsToInt(cos(x))-floatBitsToInt(mycos(x));\n  //fragColor = vec4(comp(y,r),comp(y,s),comp(y,float(ulps)/float(1<<23)),1);\n  fragColor = vec4(comp(y,r));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}