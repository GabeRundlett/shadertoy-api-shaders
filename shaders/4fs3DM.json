{
    "Shader": {
        "info": {
            "date": "1703140947",
            "description": "What you get when you screw with hexagons for too long. Scrub time with the mouse. Watch fullscreen!",
            "flags": 64,
            "hasliked": 0,
            "id": "4fs3DM",
            "likes": 8,
            "name": "POSTHELIOS - Akkma - Osinni",
            "published": 3,
            "tags": [
                "psychedelic",
                "hexagon",
                "trippy",
                "dmt"
            ],
            "usePreview": 0,
            "username": "POSTHELIOS",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "// Hexagone by Martijn Steinrucken aka BigWings - 2019\n// countfrolic@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This started as an idea to do the effect below, but with hexagons:\n// https://www.shadertoy.com/view/wdlGRM\n//\n// Turns out that really doesn't look very nice so I just made it\n// into a dance party instead ;)\n//\n// Music: https://soundcloud.com/buku/front-to-back\n\n\n#define R3 1.732051\n\nvec4 HexCoords(vec2 uv) {\n    vec2 s = vec2(1, R3);\n    vec2 h = .5*s;\n\n    vec2 gv = s*uv;\n    \n    vec2 a = mod(gv, s)-h;\n    vec2 b = mod(gv+h, s)-h;\n    \n    vec2 ab = dot(a,a)<dot(b,b) ? a : b;\n    vec2 st = ab;\n    vec2 id = gv-ab;\n    \n   // ab = abs(ab);\n    //st.x = .5-max(dot(ab, normalize(s)), ab.x);\n\tst = ab;\n    return vec4(st, id);\n}\n\nfloat GetSize(vec2 id, float seed) {\n    float d = length(id);\n    float t = iTime*.5;\n    float a = sin(d*seed+t)+sin(d*seed*seed*10.+t*2.);\n    return a/2. +.5;\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    \n    //float s = tan(a);\n    //float c = atan(a);\n    \n  //  s = tan(a);\n  //  c = tan(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hexagon(vec2 uv, float r, vec2 offs) {\n    \n    uv *= Rot(mix(0., 3.1415, r));\n    \n    r /= 1./sqrt(2.);\n    uv = vec2(-uv.y, uv.x);\n    uv.x *= R3;\n    uv = abs(uv);\n    \n    vec2 n = normalize(vec2(1,1));\n    float d = dot(uv, n)-r;\n    d = max(d, uv.y-r*.707);\n    \n    d = smoothstep(.06, .02, abs(d));\n    \n    d += smoothstep(.1, .09, abs(r-.5))*sin(iTime);\n    return d;\n}\n\nfloat Xor(float a, float b) {\n\t//return a+b;\n    return a*(1.-b) + b*(1.-a);\n}\n\nfloat Layer(vec2 uv, float s) {\n    vec4 hu = HexCoords(uv*2.);\n\n    float d = Hexagon(hu.xy, GetSize(hu.zw, s), vec2(0));\n    vec2 offs = vec2(1,0);\n    d = Xor(d, Hexagon(hu.xy-offs, GetSize(hu.zw+offs, s), offs));\n    d = Xor(d, Hexagon(hu.xy+offs, GetSize(hu.zw-offs, s), -offs));\n    \n    offs = vec2(.5,.8725);\n    d = Xor(d, Hexagon(hu.xy-offs, GetSize(hu.zw+offs, s), offs));\n    d = Xor(d, Hexagon(hu.xy+offs, GetSize(hu.zw-offs, s), -offs));\n    \n    offs = vec2(-.5,.8725);\n    d = Xor(d, Hexagon(hu.xy-offs, GetSize(hu.zw+offs, s), offs));\n    d = Xor(d, Hexagon(hu.xy+offs, GetSize(hu.zw-offs, s), -offs));\n    \n    return d;\n}\n\nfloat N(float p) {\n    return fract(sin(p*123.34)*cos(345.456));\n}\n\nvec3 Col(float p, float offs) {\n    float n = N(cos(p))*1.34;\n    \n //   return sin(p*vec3(123.11,173.23,75.2)+offs*3.)*1.2;\n    \n    return cos(n*vec3(12.23,45.23,56.2)+offs*3.)*.5+.5;\n    \n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 lookat, float zoom) {\n    vec3 f = normalize(lookat-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = p+f*zoom,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 UV = fragCoord.xy/iResolution.xy-.5;\n    float duv= dot(UV, UV);\n    vec2 m = iMouse.xy/iResolution.xy-.5;\n    \n    float t = iTime*.2+m.x*10.+5.;\n    \n    float y = sin(t*.5);//+sin(1.5*t)/3.;\n    vec3 ro = vec3(0, 20.*y, -5);\n    vec3 lookat = vec3(0,0,-10);\n    vec3 rd = GetRayDir(uv, ro, lookat, 1.);\n    \n    vec3 col = vec3(0.5);\n    \n    vec3 p = ro+rd*(ro.y/rd.y);\n    float dp = length(p.xz);\n    \n    if((ro.y/rd.y)>0.)\n    \tcol *= 0.05;\n    else {\n        uv = p.xz*.1;\n\n        uv *= mix(1., 5., sin(t*.5)*.5+.5);\n\n        uv *= Rot(t);\n        m *= Rot(t);\n\n        uv.x *= R3;\n        \n\n        for(float i=0.; i<1.; i+=1./3.) {\n            float id = floor(i+t);\n            float t = fract(i+t);\n            float z = mix(5., .1, t);\n            float fade = smoothstep(0., .3, t)*smoothstep(1., .7, t);\n\n            col += fade*t*Layer(uv*z, N(i+id))/Col(id,duv);\n        }\n    }\n    col *= 2.;\n    \n    if(ro.y<0.) col = 1.- cos(col);\n    \n    col *= smoothstep(18., 5., dp);\n    col *= 1.-duv*2.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35563,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/akkma/osinni-sutinky-va-blackout-moon-koradji-records"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}