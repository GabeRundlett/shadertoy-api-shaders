{
    "Shader": {
        "info": {
            "date": "1471463862",
            "description": "#shaderadaty #6",
            "flags": 0,
            "hasliked": 0,
            "id": "MldGzX",
            "likes": 19,
            "name": "Alien egg",
            "published": 3,
            "tags": [
                "shaderaday"
            ],
            "usePreview": 0,
            "username": "ivansafrin",
            "viewed": 803
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nconst float EPSILON = 0.001;\n\nvec2 sphere_map(vec3 n) {\n\treturn vec2((atan(n.z,n.x)/(2.0 * PI)) + iTime * 0.05, acos(n.y) / (PI));\n}\n\nvec3 scene2(vec3 position) {\n    vec2 uv = sphere_map(normalize(position));\n    float beat = 0.2+ (sin(iTime*20.0) * 0.05);\n    float height = 0.3 + texture(iChannel0, uv).x * beat * (0.5-distance(uv.y, 0.5));\n    return vec3(length(position)-height, 1.0, 0.0);\n}\n\nvec3 scene1(vec3 position) {\n    vec2 uv = sphere_map(normalize(position));\n    float height = 0.35;\n    return vec3(length(position)-height, 0.0, 1.0);\n}\n\nvec3 scene(vec3 position) {\n    vec2 uv = sphere_map(normalize(position));\n    float mixAmt = texture(iChannel0, uv).x*1.1;\n    mixAmt = max(mixAmt, 0.2) - 0.2;\n    return mix(scene1(position), scene2(position), mixAmt);\n}\n\nvec3 raymarch(vec3 position, vec3 direction) {\n    float total_distance = 0.0;\n    for(int i = 0 ; i < 32 ; ++i) {\n        vec3 result = scene(position + direction * total_distance);\n        if(result.x < EPSILON) {\n            return vec3(total_distance, result.y, result.z);\n        }\n        total_distance += result.x;\n    }\n    return vec3(-1.0, 0.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv -= vec2(0.5*iResolution.x/iResolution.y, 0.5);\n    vec3 direction = normalize(vec3(uv, 2.5));\n    vec3 origin = vec3(0.0, 0.0, -2.5);\n    vec3 result = raymarch(origin, direction);\n      if(result.x < 0.0) {\n\t\tfragColor = vec4(0.2, 0.2+sin(uv.y+1.0)*0.2, sin(uv.y+1.0)*0.5, 1.0) * 0.5;\n    } else{\n        vec3 pos = origin+direction*result.x;\n        const vec2 eps = vec2(0.0, EPSILON*2.0);\n        vec3 N = normalize(vec3(\n\t\t\tscene(pos + eps.yxx).x - scene(pos - eps.yxx).x,\n\t\t\tscene(pos + eps.xyx).x - scene(pos - eps.xyx).x,\n\t\t\tscene(pos + eps.xxy).x - scene(pos - eps.xxy).x));  \n          \n        vec3 lightPos = vec3(1.0, 0.0, -1.0);\n \t\tfloat diffuse = dot(normalize(lightPos), N);\n\t\tdiffuse = 0.2 + max(0.0, diffuse); \n        vec2 auv = sphere_map(normalize(pos));\n        \n          float beat = max(0.0, sin(iTime));\n              \n         vec3 ref = -reflect(direction, N);\n        vec4 pulseColor = vec4(0.0, 0.3, 0.1, 1.0);\n       vec4 membraneColor = vec4(0.756, 0.627 ,0.172, 1.0) ;\n        fragColor = (pulseColor*diffuse*result.y)+ result.y * texture(iChannel0, auv).x * beat * vec4(1.0, 1.0, 0.0, 1.0) * 2.5 +\n            (membraneColor*diffuse*result.z)+\n            pow(max(0.0,dot(normalize(-reflect(pos-lightPos, N)),normalize(-pos))), 80.0)\n            + texture(iChannel1, ref) * max(0.0, result.y) * 0.3;\n      \n      \tfragColor.xyz *= 0.8;\n      }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}