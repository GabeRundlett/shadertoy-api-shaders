{
    "Shader": {
        "info": {
            "date": "1684166872",
            "description": "onnooo !!!",
            "flags": 64,
            "hasliked": 0,
            "id": "mtG3zm",
            "likes": 28,
            "name": "Dunnos hell",
            "published": 3,
            "tags": [
                "raymarching",
                "hell",
                "dunnos"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a,0.,1.)\n#define PI acos(-1.)\nmat2 r2d(float a)\n{\n  float c = cos(a), s= sin(a);\n   return mat2(c,-s,s,c);\n}\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd, r));\n  return normalize(rd+(r*uv.x+u*uv.y)*.6);\n\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if(a.x<b.x)\n  return a;\n  return b;\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\nvec2 map(vec3 p)\n{\n  vec2 acc = vec2(1000.,-1.);\n  float repx = .5;\n  float idx = floor((p.x+repx*.5)/repx);\n  p.x = mod(p.x+repx*.5,repx)-repx*.5;\n  float repy =5.;\n  p.y= mod(p.y+repy*.5,repy)-repy*.5;\n\n  p.yz*=r2d(length(p.yz)*.5-iTime*.1+idx*5.-.4*iTime*abs(sin(idx+.5)));\n\n  float an = atan(p.y,p.z);\n  float rep = PI*2./12.;\n  float id = floor((an+rep*.5)/rep);\n  p.x+= sin(p.y*20.-iTime*4.)*.02*sat(length(p.yz));\n  float sector = mod(an+rep*.5,rep)-rep*.5;\n  p.yz = vec2(sin(sector),cos(sector))*length(p.yz);\n\n  float blob = sdCapsule(p,vec3(0.,0.,-0.5),\n    vec3(0.,0.,1.5),.12);\n    //blob = length(p.xy)-.1;\n  p.z-=1.5;\n  vec3 pm= p-vec3(0.,0.,-.1);\n  vec3 p2 = p;\n  p2.x=abs(p2.x);\n  p2.xz*= r2d(.5);\n  //p2.x=abs(p2.x);\n  blob = min(blob, length(p2.xy)-.002);\n  blob = max(blob,p.z-.2);\n  vec3 p3 =p;\n  p3.x= abs(p3.x);\n  blob = min(blob,length(p3-vec3(0.1,0.,.2))-.02);\n  p.x= abs(p.x);\n  float eyes = length(p.xz-vec2(.03,0.))-.02;\n\n  float mat = sat(eyes*400.);\n\n  float mouth = length(pm.xz)-.05;\n  mouth = max(mouth, -pm.z);\n  mat = mix(mat, 2., 1.-sat(mouth*400.));\n\npm.x+= sin(pm.z*150.-7.*iTime)*.01;\n  float tongue = sdSegment(pm.xz,\n    vec2(0.,0.),vec2(0.,.025))-.01;\n    tongue = max(tongue, mouth);\n  mat = mix(mat, 3., 1.-sat(tongue*4000.));\n  acc= _min(acc, vec2(blob,mat));\n\n  return acc;// length(p-vec3(0.,.0,1.))-.1;\n}\n\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd)\n{\n    accCol = vec3(0.);\n  vec3 p= ro;\n  for(int i= 0;i<128 && distance(p,ro)<10.;++i)\n  {\n    vec2 res = map(p);\n    if(res.x<0.01)\n      return vec3(res.x,distance(p,ro),res.y);\n    p+=rd*res.x*.3;\n    vec3 rgb = mix(vec3(0.996,0.290,0.165), \n    vec3(0.996,0.651,0.165), sin(iTime+10.*p.x+p.y)*.5+.5);\n    accCol += rgb*(1.-sat(res.x/.2))*.025\n    *(1.+texture(iChannel0, vec2(0.1,0.)).x);//*sat(p.y*3.+4.5);\n  }\n  return vec3(-1.);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col = vec3(0.);\n  uv.x+=.3;\n  vec3 ro = vec3(.5,0.5,-2.);\n  vec3 ta = vec3(0.,-3.2,0.);\n  vec3 rd = normalize(ta-ro);\n  rd = getCam(rd,uv);\n  vec3 res = trace(ro,rd);\n  if(res.y>0.)\n  {\n    vec3 p = ro+rd*res.y;\n    vec3 n = getNorm(p,res.x);\n    col = n*.5+.5;\n    col = vec3(.1);\n    if(res.z==0.)\n    col = vec3(1.);\n    if (res.z==2.)\n    col = vec3(.7,0.1,0.);\n    if (res.z==3.)\n    col= vec3(1.,0.3,0.3);\n  }\n  col += accCol;\n  float beat = 1./2.2;\n  //col = mix(col, 1.-col, pow(mod(iTime,beat)/beat,2.));\n  return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord.xy-.5*iResolution.xy)/\n    iResolution.xx;\n\n  vec3 col = rdr(uv);\n  col *= 1.-sat((length(uv)-.2)*2.);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 33310,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/vincentimes/jeff-mills-the-bells?si=8d0c9c6d67434e0ab56e3e6bd69e9824&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}