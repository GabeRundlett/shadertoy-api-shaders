{
    "Shader": {
        "info": {
            "date": "1554444469",
            "description": "shadertoys which let you mouse around (say a camera, an image, etc) usually reset whatever parameter is being moused when the mouse is pressed. ie you can't click-drag, release, click-drag-even-further.\nthis is an awkward approach for doing that.",
            "flags": 32,
            "hasliked": 0,
            "id": "3dBXRc",
            "likes": 1,
            "name": "util: drag-release-drag",
            "published": 3,
            "tags": [
                "mouse",
                "ui",
                "dragging"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 574
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fc, in vec2 XY )\n{\n    // BufferA is tracking mouse movement.\n    // Here in Image we're just offsetting a picture.\n    vec2 drag = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    drag += iResolution.xy * 0.5;\n    \n    vec2 xy = XY;\n    \n    xy -= drag;\n    float th = sin(iTime * 0.01 + length(xy * 6.0) * 0.001) * 0.1;\n    xy *= mat2(cos(th), sin(th), -sin(th), cos(th));\n    xy += drag;    \n    \n    \n    vec2 uv = (xy - drag)/iResolution.xy;\n    \n       \n    fc = texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// orion elenzil 2019\n// \n// using the mouse to drag around a value\n// without having it reset every time you mouse-up-then-down.\n//\n// (0, 0).xy = the output.\n// \n// (0, 0).zw = the value of the output when the mouse became pressed.\n// (1, 0).zw = the value of mouse.zw from the previous frame.\n\n\nvoid mainImage(out vec4 fc, in vec2 XY) {\n    if (iFrame == 0) {\n        fc -= fc;\n        return;\n    }    \n    \n    ivec2 IJ = ivec2(XY);\n    \n    if (IJ.xy == ivec2(0, 0)) {\n        vec4 v4 = texelFetch(iChannel0, ivec2(0, 0), 0);\n        if (iMouse.z > 0.0 || iMouse.w > 0.0) {\n            // the mouse is currently pressed.\n            \n\t        vec4 oldMouse = texelFetch(iChannel0, ivec2(1, 0), 0);\n            if (oldMouse.z < 1.0 && oldMouse.w < 1.0) {\n                // .. but it wasd not pressed in the previous frame.\n                // copy the current output value (0, 0).xy into (0, 0).zw.\n                \n                // if ShaderToy guaranteed that iMouse.xy == iMouse.zw\n                // when the mouse first becomes pressed,\n                // this determination could be made w/o storing the previous zw\n                // in pixel (1, 0).\n                // however if the cursor is in motion when the mouse is pressed,\n                // xy != zw.\n                //\n                v4.zw = v4.xy;\n            }\n            \n            // set the current output to the output from when the mouse became pressed\n            // plus the difference between where the mouse is now and where it was then.\n            v4.xy = v4.zw + iMouse.xy - iMouse.zw;\n        }\n\t    fc = v4;\n    }\n    else if (IJ == ivec2(1, 0)) {\n        // store the current mouse-down position.\n\t    fc.zw = iMouse.zw;\n    }\n    else {\n\t    discard;\n    }\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}