{
    "Shader": {
        "info": {
            "date": "1680787934",
            "description": "Shader using ray-marching to display a simplex only with the linear equations of the 3D simplex.",
            "flags": 0,
            "hasliked": 0,
            "id": "csySzh",
            "likes": 1,
            "name": "3D Simplex",
            "published": 3,
            "tags": [
                "raymarchingsimplex"
            ],
            "usePreview": 0,
            "username": "polaroid",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "#define LIGHT_BLUE (vec3(172., 216., 230.) / 255.)\n\nmat2 rot(float a){\n float c = cos(a);\n float s = sin(a);\n return mat2(c, s, -s, c);\n}\n\n// Half Space with this equation\n// a0*x + a1*y + a2*z <= a3\nfloat sdPlane (vec3 p, float a0, float a1, float a2, float a3) {\n    vec3 normal = normalize(vec3(a0,a1,a2));\n    float d = dot(normal,p) - a3;\n    return d;\n}\n\nfloat sdf(vec3 p){\n float d1 = sdPlane(p, -1., 0., 0., 0.);\n float d2 = sdPlane(p, 0., -1., 0., 0.);\n float d3 = sdPlane(p, 0., 0., -1., 0.);\n float d4 = sdPlane(p, 1., 0., 0., 200.);\n float d5 = sdPlane(p, 0., 1., 0., 300.);\n float d6 = sdPlane(p, 1., 1., 1., 400.);\n float d7 = sdPlane(p, 0., 1., 3., 600.);\n return max(max(max(max(max(max(d1,d2),d3),d4),d5),d6),d7);\n}\n\nvec2 raymarch(vec3 ro, vec3 rd){\n float eps = 0.0001;\n float maxSteps = 32.;\n\n float t = 0.;\n for(float i = 0.; i < maxSteps; i++){\n float d = sdf(ro + rd * t);\n if(d < eps) {\n float f = i/(maxSteps-1.);\n return vec2(t, f);\n }\n t += d;\n }\n return vec2(-1.);\n}\n\nvoid mainImage(\nout vec4 fragColor,\nin vec2 fragCoord\n) {\n vec2 uv = fragCoord.xy/iResolution.xy;\n uv -= 0.5;\n uv.x *= iResolution.x/iResolution.y;\n\n // Define camera position (eye) and target position\n vec3 ro = vec3(700., 1000., 600.);\n ro.xz *= rot(iTime * 0.3);\n vec3 targetPos = vec3(0., 0., 0.);\n    \n // Calculate forward, up, and right vectors\n vec3 forward = normalize(ro - targetPos);\n vec3 up = vec3(0.0, 1.0, 0.0);\n vec3 right = normalize(cross(forward, up));\n up = cross(right, forward);\n \n vec3 rd = normalize(uv.x * right + uv.y * up - forward);\n vec3 col = vec3(0., 0., 0.);\n \n vec2 hit = raymarch(ro, rd);\n float t = hit.x;\n float f = hit.y;\n if(t > 0.){\n  // grayscale: darker if more iterations\n  col = vec3(1., 0., 0.) * (1. - f);\n } else {\n  col = vec3(0., 0., 0.);\n }\n \n fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}