{
    "Shader": {
        "info": {
            "date": "1681098959",
            "description": "shifting, turning. it perplexed them both",
            "flags": 32,
            "hasliked": 0,
            "id": "dsGSWW",
            "likes": 6,
            "name": "...sitting at the end of the way",
            "published": 3,
            "tags": [
                "3d",
                "experimental",
                "messy",
                "glitchybutinafunway"
            ],
            "usePreview": 0,
            "username": "oatmealine",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// largely adapted from https://www.shadertoy.com/view/ld23DV\n\n// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// https://iquilezles.org/articles/boxfunctions\nvec4 iBox( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    #if 1\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\t#else\n    // more robust\n    vec3 k = vec3(rdd.x>=0.0?rad.x:-rad.x, rdd.y>=0.0?rad.y:-rad.y, rdd.z>=0.0?rad.z:-rad.z);\n    vec3 t1 = (-roo - k)*m;\n    vec3 t2 = (-roo + k)*m;\n    #endif\n    float tN = max(max(t1.x,t1.y),t1.z);\n    float tF = min(min(t2.x,t2.y),t2.z);\n    \n    // no intersection\n\tif( tN>tF || tF<0.0 ) return vec4(-1.0);\n\n    #if 1\n    // this works as long as the ray origin is not inside the box\n    vec4 res = vec4(tN, step(tN,t1) );\n    #else\n    // use this instead if your rays origin can be inside the box\n    vec4 res = (tN>0.0) ? vec4( tN, step(vec3(tN),t1)) :\n                          vec4( tF, step(t2,vec3(tF)));\n    #endif\n    \n    // add sign to normal and convert to ray space\n\tres.yzw = (txi * vec4(-sign(rdd)*res.yzw,0.0)).xyz;\n\n\treturn res;\n}\n\n\n// https://iquilezles.org/articles/boxfunctions\nfloat sBox( in vec3 ro, in vec3 rd, in mat4 txx, in vec3 rad ) \n{\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return -1.0;\n\t\n\treturn tN;\n}\n\n\n//-----------------------------------------------------------------------------------------\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n/*\nmat4 inverse( in mat4 m )\n{\n\treturn mat4(\n        m[0][0], m[1][0], m[2][0], 0.0,\n        m[0][1], m[1][1], m[2][1], 0.0,\n        m[0][2], m[1][2], m[2][2], 0.0,\n        -dot(m[0].xyz,m[3].xyz),\n        -dot(m[1].xyz,m[3].xyz),\n        -dot(m[2].xyz,m[3].xyz),\n        1.0 );\n}*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n    \n    vec4 behind = texture(iChannel1, fragCoord/iResolution.xy);\n\n     // camera movement\t\n\tvec3 ro = vec3( 2.5 * mix(behind.r, 1.0, 0.4), 1.0 * mix(behind.g, 1.0, 0.4), 2.5 + sin(behind.b * 6.0) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    // rotate and translate box\t\n\tmat4 rot = rotationAxisAngle( normalize(vec3(1.0,1.0,0.0)), iTime );\n\tmat4 tra = translate( 0.0, 1.0, 0.0 );\n\tmat4 txi = tra * rot; \n\tmat4 txx = inverse( txi );\n\n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tvec3  pos = vec3(0.0);\n\n\t// raytrace box\n\tvec3 box = vec3(0.8,0.8,0.8) ;\n\tvec4 res = iBox( ro, rd, txx, txi, box);\n\tif( res.x>0.0 && res.x<tmin )\n\t{\n\t\ttmin = res.x - tan(dot(res.yzw, vec3(0.0, 1.0, 0.0)) * 1.7) * 0.4;\n\t\tnor = res.yzw;\n\t}\n\n    // shading/lighting\t\n\tvec3 col = vec3(0.0, 1.0, 0.0);\n    \n\tif( tmin<100.0 )\n\t{\n\t\tpos = ro + tmin*rd;\n\t\t\n        // material\n\t\tfloat occ = 1.0;\n\t\tvec3  mate = vec3(1.0);\n        // recover box space data (we want to do shading in object space)\t\t\t\n        vec3 opos = (txx*vec4(pos,1.0)).xyz;\n        vec3 onor = (txx*vec4(nor,0.0)).xyz;\n        mate = abs(onor.x)*texture( iChannel0, 0.2*opos.yz ).xyz + \n               abs(onor.y)*texture( iChannel0, 0.2*opos.zx ).xyz + \n               abs(onor.z)*texture( iChannel0, 0.2*opos.xy ).xyz;\n        mate *= 0.35;\n        occ = 0.6 + 0.4*nor.y;\t\n\t\t\n        // lighting\n        vec3  lig = normalize(vec3(0.8,0.4,-0.6));\n        float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n        vec3  hal = normalize(lig-rd);\n        float amb = 0.6 + 0.4*nor.y;\n        float bou = clamp(0.3-0.7*nor.y,0.0,1.0);\n        float spe = clamp(dot(nor,hal),0.0,1.0);\n        col  = 4.0*vec3(1.00,0.80,0.60)*dif;\n        col += 2.0*vec3(0.20,0.30,0.40)*amb;\n        col += 2.0*vec3(0.30,0.20,0.10)*bou;\n        col *= mate;            \n        col += 0.3*pow(spe,8.0)*dif*(0.04+0.96*pow(clamp(dot(lig,hal),0.0,1.0),5.0));\n        col = mix( col, vec3(0.6,0.7,0.8), 1.0-exp(-0.001*tmin*tmin) );           \n\t}\n\n    // gamma\n    col = pow( col, vec3(0.45) );\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926538\n\n#define RGB(r,g,b) (vec3(r,g,b) / 255.0)\n\n#define PALETTE_SIZE 4\nvec3 colors[PALETTE_SIZE] = vec3[](\n  RGB(0,   0,   0  ),\n  RGB(128, 0,   128),\n  RGB(255, 0,   255),\n  RGB(255, 255, 0  )\n);\n\nfloat gray(vec3 color) {\n  return (min(color.r, min(color.g, color.b)) + max(color.r, max(color.g, color.b))) * 0.5;\n}\n\nvec3 getPalette(vec3 col) {\n  float g = clamp(gray(col), 0.0, 0.99);\n  return colors[int(floor(g * float(PALETTE_SIZE)))];\n}\nvec3 getPaletteComplex(vec3 col) {\n  // comparasion\n  float minDist = 9e9;\n  int newCol;\n\n  for (int i = 0; i < PALETTE_SIZE; i++) {\n    vec3 compareCol = colors[i];\n\n    vec3 distVec = abs(col - compareCol);\n    float dist = (distVec.r + distVec.g + distVec.b) / 3.0;\n\n    if (dist < minDist) {\n      newCol = i;\n      minDist = dist;\n    }\n  }\n\n  return colors[newCol];\n}\n\n// adapted from https://www.shadertoy.com/view/ldBGRR\nvec3 plasma( vec2 p )\n{\n// main code, *original shader by: 'Plasma' by Viktor Korsun (2011)\nfloat x = p.x;\nfloat y = p.y;\nfloat mov0 = x+y+cos(sin(iTime)*2.0)*100.+sin(x/100.)*1000.;\nfloat mov1 = y / 0.9 +  iTime;\nfloat mov2 = x / 0.2;\nfloat c1 = abs(sin(mov1+iTime)/2.+mov2/2.-mov1-mov2+iTime);\nfloat c2 = abs(sin(c1+sin(mov0/1000.+iTime)+sin(y/40.+iTime)+sin((x+y)/100.)*3.));\nfloat c3 = abs(sin(c2+cos(mov1+mov2+c2)+cos(mov2)+sin(x/1000.)));\nreturn vec3(c1,c2,c3);\n}\n\nfloat green(vec3 tex) {\n    return (1.0 - tex.r) * tex.g * (1.0 - tex.b);\n}\n\nconst int lookupSize = 64;\nconst float errorCarry = 0.8;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 tex = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    if (green(tex.rgb) > 0.95) {\n        vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n        float ratio = iResolution.y / iResolution.x;\n        uv.y *= ratio;\n        uv = round(uv * 32.0) / 32.0;\n        vec2 normalized = normalize(uv);\n        float uvDot = dot(normalized, vec2(1.0, 0.0));\n        uv *= 0.75 + min(tan(uvDot * 2.14 + iTime * 0.2) * 0.1, 0.0);\n        uv.y /= ratio;\n        vec4 rTex = texture(iChannel0, uv + 0.5);\n        if (green(rTex.rgb) > 0.95) {\n            vec2 base = (fragCoord.xy / iResolution.xy - 0.5) * 0.99 + 0.5;\n            float thisTexR = texture(iChannel1, fract(base + vec2(sin(iTime * 0.55 + uv.y) * 0.2, cos(iTime * 0.4 + uv.x) * 0.2))).r;\n            float thisTexG = texture(iChannel1, fract(base + vec2(sin(iTime * 0.55 - uv.y) * 0.2, cos(iTime * -0.4 - uv.x) * 0.2))).g;\n            float thisTexB = texture(iChannel1, fract(vec2(1.0 - base.x, base.y) + vec2(sin(iTime * -0.55 + uv.y) * 0.2, cos(iTime * -0.4 + uv.x) * 0.2))).b;\n            vec3 thisTex = vec3(thisTexR, thisTexG, thisTexB);\n            float luma = (1.0 - thisTex.r) * (1.0 - thisTex.g) * (1.0 - thisTex.b);\n            \n            fragColor = vec4(getPaletteComplex(plasma((fragCoord.xy / iResolution.xy - 0.5) * 2.0) * luma * 0.3) - thisTex * 0.3, 1.0);\n        } else {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    } else {\n        // adapted from https://www.shadertoy.com/view/4sjGRD\n        int topGapY = int(iResolution.y - fragCoord.y);\n\n        int cornerGapX = int((fragCoord.x < 10.0) ? fragCoord.x : iResolution.x - fragCoord.x);\n        int cornerGapY = int((fragCoord.y < 10.0) ? fragCoord.y : iResolution.y - fragCoord.y);\n        int cornerThreshhold = ((cornerGapX == 0) || (topGapY == 0)) ? 5 : 4;\n\n        vec3 xError = vec3(0.0);\n        for(int xLook=0; xLook<lookupSize; xLook++){\n            vec2 uv = (fragCoord.xy + vec2(-lookupSize+xLook,0)) / iResolution.xy;\n            vec3 sourcePixel = texture(iChannel0, uv).rgb;\n            vec3 col = getPalette(sourcePixel) + xError;\n            xError = (sourcePixel - col) * errorCarry;\n        }\n\n        vec3 yError = vec3(0.0);\n        for(int yLook=0; yLook<lookupSize; yLook++){\n            vec2 uv = (fragCoord.xy + vec2(0,-lookupSize+yLook)) / iResolution.xy;\n            vec3 sourcePixel = texture(iChannel0, uv).rgb;\n            vec3 col = getPalette(sourcePixel) + yError;\n            yError = (sourcePixel - col) * errorCarry;\n        }\n\n        vec3 final = getPalette(texture(iChannel0, fragCoord.xy / iResolution.xy).rgb + xError * 0.5 + yError * 0.5);\n\n        fragColor = vec4(final, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}