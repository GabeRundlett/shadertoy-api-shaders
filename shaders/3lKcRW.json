{
    "Shader": {
        "info": {
            "date": "1610578506",
            "description": "this shader gives some sort of halftone look to the rendered values ",
            "flags": 0,
            "hasliked": 0,
            "id": "3lKcRW",
            "likes": 14,
            "name": "halftone effect",
            "published": 3,
            "tags": [
                "halftone",
                "distance",
                "dot",
                "dist",
                "manhattandistance"
            ],
            "usePreview": 0,
            "username": "manu210404",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "#define d(p) length(p-.5)\n#define R iResolution.xy\nfloat halftone(in vec2 p, in float val, in float scale) {\n    p = fract(p);\n    vec2 o = vec2(-.5,.5);\n    vec2 t = p+o.xx;\n    float eps = 1./iResolution.y*scale;\n    return smoothstep(val + eps, \n                      val - eps, \n                      mix(d(p),                                                         // distance from center of cell\n                          1.-min(min(d(p+o.xx), d(p+o.xy)), min(d(p+o.yy), d(p+o.yx))), // negative distance from the corners of cell plus one\n                          smoothstep(0.,1.,abs(t.x) + abs(t.y))                         // manhattan distance from center of cell with smoothstep\n                                                                                        // the smoothstep is to make it look round faster\n                        //abs(t.x) + abs(t.y)                                           // here would be the normal manhattan distance\n                          )\n                      );\n}\n\nfloat s(in vec2 p) {\n    return fract(d(p)-iTime-atan(p.x-.5, p.y-.5)/3.1415*.5);\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    float scale = 16.;\n    vec2 uv = u/R.y-vec2(R.x/R.y-1.,0)*.5,\n          p = uv*scale,\n        pfr = smoothstep(0.,1.,fract(p));\n    vec4 pf = vec4(floor(p)/scale,ceil(p)/scale);\n    \n    float val = mix(mix(s(pf.xy), s(pf.zy), pfr.x), mix(s(pf.xw), s(pf.zw), pfr.x), pfr.y);\n    val = halftone(p, val, scale);\n    \n    O = vec4(vec3(val),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}