{
    "Shader": {
        "info": {
            "date": "1699560055",
            "description": "Click at the bottom to select a function (leftmost=time-reel).\n\nOne might hope that e.g. sin(x)/x->1 as x->0. GLSL implementation might have other ideas.\n\nPlot is log-scale in x, [1e-8;1], linear in y [-4;+4].",
            "flags": 0,
            "hasliked": 0,
            "id": "dttczs",
            "likes": 6,
            "name": "GLSL functions for x->0",
            "published": 3,
            "tags": [
                "glsl",
                "ieee754"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Illustration/survey of behaviour of various GLSL functions as x->0.\n//\n// E.g. sin(x)/x->1 as x->0, but does that hold numerically for\n// your GLSL implementation?\n\nfloat f(int id,float x)\n{\n    switch(id)\n    {\n        case  0: return 0.0;\n        case  1: return sin(x)/x;\n        case  2: return asin(x)/x;\n        case  3: return (exp(x)-1.0)/x;\n        case  4: return log(1.0+x)/x;\n        case  5: return tan(x)/x;\n        case  6: return atan(x)/x;\n        case  7: return sinh(x)/x;\n        case  8: return asinh(x)/x;\n        case  9: return tanh(x)/x;\n        case 10: return atanh(x)/x;\n        case 11: return sqrt(x)*sqrt(x)/x;\n        case 12: return inversesqrt(x)*inversesqrt(x)*x;\n        case 13: return sqrt(x)*inversesqrt(x);\n        case 14: return (1.0/log(2.0))*(exp2(x)-1.0)/x;\n        case 15: return log(2.0)*log2(1.0+x)/x;\n        case 16: return (1.0/3.0)*smoothstep(0.0,1.0,x)/(x*x);\n#define N 17\n    }\n    return 0.0;\n}\n\nvec3 palette(int id) {return 0.5+0.5*cos(float(id)+vec3(0,2,4));}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    int id=int(abs(iMouse.z/iResolution.x)*float(N));\n    if(id==0) id=int(iTime)%(N-1)+1;\n    vec2 xy=fragCoord/iResolution.xy;\n    float lx=mix(-8.0,0.0,xy.x),x=pow(10.0,lx);\n    float y=mix(-4.0,+4.0,xy.y);\n    float d=f(id,x)-y;\n    vec3 col=vec3(0.125)+0.5*palette(id)*exp(-1e3*d*d);\n    if(xy.y<0.125) col=mix(col,palette(int(xy.x*float(N))),0.5);\n    float s,t=fract(y);\n    col+=0.5*exp(-128.0*t*(1.0-t));\n    t=fract(lx);\n    col+=0.5*exp(-256.0*t*(1.0-t));\n    s=t;t=fract(pow(10.0,s));\n    col+=0.25*exp(-16.0*t*(1.0-t));\n    col+=0.25*exp(-512.0*y*y);\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}