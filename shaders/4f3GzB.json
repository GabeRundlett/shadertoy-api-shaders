{
    "Shader": {
        "info": {
            "date": "1711810959",
            "description": "CC0: Easter hack #2\n  More easter hacking. I tinkered with sliced apollionians again\n",
            "flags": 64,
            "hasliked": 0,
            "id": "4f3GzB",
            "likes": 18,
            "name": "Easter hack #2",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "// CC0: Easter hack #2\n//  More easter hacking. I tinkered with sliced apollionians again\n\n\n// Try the variant\n//#define VARIANT\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nfloat g_anim;\nmat2 g_rot0;\nmat2 g_rot1;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nfloat apollonian(vec3 p, float s) {\n  float scale = 1.0;\n  for(int i=0; i < 5; ++i) {\n    p = -1.0 + 2.0*fract(0.5*p+0.5);\n    const float sc = sqrt(0.5);\n    p = sin(p/sc)*sc;\n    float r2 = dot(p,p);\n    float k  = s/r2;\n    p       *= k;\n    scale   *= k;\n  }\n  \n  vec3 ap = abs(p/scale);  \n  float d = length(ap.xy);\n  d = min(d, ap.z);\n\n  return d;\n}\n\nvec3 napollonian(vec3 pos, float s, float aa) {\n  vec2  eps = vec2(aa, 0.0);\n  vec3 nor;\n  nor.x = apollonian(pos+eps.xyy, s) - apollonian(pos-eps.xyy, s);\n  nor.y = apollonian(pos+eps.yxy, s) - apollonian(pos-eps.yxy, s);\n  nor.z = apollonian(pos+eps.yyx, s) - apollonian(pos-eps.yyx, s);\n  return normalize(nor);\n}\n\nfloat df(vec2 p, float aa, out vec3 n) {\n  float fz = mix(0.8, 1., g_anim);\n  float z = 2.*fz;\n  p /= z;\n  vec3 p3 = vec3(p, .09);\n  p3.xz*=g_rot0;\n  p3.yz*=g_rot1;\n  float ifz = 1.0/fz;\n  float d = apollonian(p3, ifz);\n  n = napollonian(p3, ifz, aa);\n  d *= z;\n  return d-5E-4;\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float a = TIME*0.05;\n  g_rot0 = ROT(a); \n  g_rot1 = ROT(1.23*a);\n\n  g_anim = smoothstep(-sqrt(0.5), sqrt(0.5), cos(TAU*TIME/60.0));\n\n  float aa = sqrt(2.)/RESOLUTION.y;\n  vec3 n = vec3(0.);\n  float d = df(p, aa, n);\n#ifndef VARIANT\n  n.z=abs(n.z);\n#endif\n  vec3 p3 = vec3(p, 0.0);\n  vec3 ro = vec3(0., 0., 10.);\n  vec3 rd = normalize(p3-ro);\n\n  const vec3 l0   = 1.*vec3(1., 1., 1.);\n  const vec3 col0 = HSV2RGB(vec3(0.4, 0.5, 0.125));\n  const vec3 l1   = 1.1*vec3(-1., 1., 1.);\n  const vec3 col1 = HSV2RGB(vec3(0.3, 0.5, 0.125));\n  const vec3 glowCol = HSV2RGB(vec3(0.35, 0.9, 4E-4));\n  vec3 r = reflect(rd, n);\n\n  vec3 d0  = l0-p3;\n  vec3 d1  = l1-p3;\n  float d20= dot(d0, d0);\n  float d21= dot(d1, d1);\n\n  float li0 = 2./max(d20, 1E-4);\n  float li1 = 2./max(d21, 1E-4);\n\n  vec3 ld0 = normalize(d0);\n  vec3 ld1 = normalize(d1);\n  \n  float dif0 = li0*pow(max(dot(n, ld0), 0.), 2.);\n  float dif1 = li1*pow(max(dot(n, ld1), 0.), 2.);\n\n  float spe0 = pow(max(dot(r, ld0), 0.), 90.)*4.;\n  float spe1 = pow(max(dot(r, ld1), 0.), 90.)*4.;\n  \n  vec3 col = vec3(0.);\n  col += dif0*col0+spe0*sqrt(col0);\n  col += dif1*col1+spe1*sqrt(col1);\n  col += glowCol/max(d, 4E-5);\n  col = aces_approx(col);  \n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = sqrt(col);\n  return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 pp = -1.+2.*q;\n  pp = asin(0.99*pp);\n  vec2 p = pp;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  \n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 37022,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/devolverdigital/perturbator-electricdreams?in=marten-range-59281907/sets/christmas-2023&si=a91a5fce3e4e491ba6ab8914d6156807&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}