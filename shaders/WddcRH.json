{
    "Shader": {
        "info": {
            "date": "1600392906",
            "description": "varios-tunels",
            "flags": 0,
            "hasliked": 0,
            "id": "WddcRH",
            "likes": 4,
            "name": "varios-tunels",
            "published": 3,
            "tags": [
                "variostunels"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\nfloat sdTorus( vec3 p, vec2 t )\n\t{ vec2 q = vec2(length(p.xz)-t.x,p.y);  return length(q)-t.y; }\nfloat sdCylinder( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderYZ( vec3 p, vec2 h )  \n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h ) \n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h ) \n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nmat2 genRotMat(float val){\n\treturn mat2(cos(val),-sin(val),sin(val),cos(val));\n}\n\nvec3 opAngRep( vec3 p, float a )\n{\n\tvec2 polar = vec2(atan(p.y, p.x), length(p.xy));\n    polar.x = mod(polar.x + a / 2.0, a) - a / 2.0;\n    \n    return vec3(polar.y * vec2(cos(polar.x),sin(polar.x)), p.z);\n}\n\n//polynomial smooth minimum\nfloat opSU( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n//----------oPeraciones de Repeticion\nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3 opRep3D( in vec3 p, in vec3 c )\n\t{ vec3 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n///------------------------------------\n\nfloat CilindroConAlas(vec3 p, float numItem)\n{\n    float tau = atan(1.0) * 8.0;\n    vec3 pp;\n    pp=p;\n    p.xy *= genRotMat(iTime);/// genera la rotacion del engrane\n    \n    \n    \n    vec3 rep2 = opAngRep(p, tau / numItem);\n    float sdsp1= sdCylinderXY(p, vec2(2.0,6.0) );\n    float sdb1= sdBox(rep2, vec3(6.5,0.2,5.5));\n    \n    float h=2.0;\n    float r1=2.0;\n    float r2=0.25;\n    \n    pp= rotate_x(pp, radians(90.0));\n    float sdcc1= sdCappedCone(pp-vec3(0.0,7.0,0.0), h, r1, r2 );\n        \n    \n    float res = opSU(sdsp1, sdb1,0.1);\n     res = opSU(res, sdcc1,0.1);\n  \treturn  res;\n}\n\n\n\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp;\n    res = vec3(9999.0, -1.0,-1.0);\n    //p.y=p.y-5.0;\n    \n    p=p-0.4*vec3(sin(iTime)*sin(iTime),sin(iTime)*cos(iTime),0.5);\n    \n    pp=p;\n\tvec3 q=p;\n    float cx=47.0;\n    float cy=11.0;\n    float cz=30.00;\n    \n    q.z = mod(q.z+0.5*cz,cz)-0.5*cz;\n    p=q;\n\t\n    float sdc1= sdCylinderXY(p-vec3(0.0,0.0,0.0), vec2(20.0,15.0));\n    float sdc2= sdCylinderXY(p-vec3(0.0,0.0,0.0), vec2(18.0,17.0));\n\tfloat dif= differenceSDF(sdc1, sdc2);\n    float cl=mod(floor( iTime), 5.0);\n    res =opU3(res, vec3(dif,-1.0, cl)); \n\t\n    \n    float sf1= CilindroConAlas( pp-vec3(-5.0,-4.0,itime), 6.0);\n    res =opU3(res, vec3(sf1,30.0,MATERIAL_NO)); \n    \n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n        //vec3 psh= p_shadingv3(p,  nor,  ro,  rd,  plight_pos,   colobj );\n    \t//return result* psh;\n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\n\nvec3 colorplaneta( vec2 puv )\n{\n    vec2 uv;\n    uv=puv;\n    \n    //Zoom out\n    uv *= 5.0;\n    \n    //Add distortion\n    for(float i = 1.0; i < 4.0; i+=1.0){ \n    \tuv.x += sin(iTime + uv.y * i);\n    \tuv.y += cos(iTime + uv.x * i);\n    }\n\n    //Time varying pixel colour\n    vec3 col = 0.5 + 0.5*cos(4.0*iTime + uv.xyx + vec3(0,2,4));\n\treturn col;\n}\n\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n\n    \n    if (id_material==0.0)\n    {\n        vec3 col;\n        vec3 rp=pp;\n     \trp.x += iTime * -2.0;\n        // rp=mObj.p;\n    \tvec2 m = mod(rp.xz, 4.0) - 2.0;\n    \t\n        if (m.x * m.y > 0.0) \n            col= vec3(0.0);\n   \t\telse\n    \t\tcol= vec3(1.0) ;\n        \n    \treturn col;\n \t}   \n    \n    if (id_material==1.0)\n    {\n        //#define PI 3.14159\n\t\t#define TWO_PI (PI*2.0)\n        #define N 6.0\n    \t\n        vec2 v = pp.xz*0.5;\n\t\tv.x=v.x-10.0;\n\t\tv.y=v.y-200.0;\n\t\tfloat col = 0.0;\n\n\t\tfor(float i = 0.0; i < N; i++) \n\t\t{\n\t  \t\tfloat a = i * (TWO_PI/N) * 61.95;\n\t\t\tcol += cos(TWO_PI*(v.y * cos(a) + v.x * sin(a) /*+ mouse.y +i*mouse.x*/ + sin(iTime*0.001)*10.0 ));\n\t\t}\n\t\n\t\tcol /= 3.0;\n\n\t\tvec3 color = vec3(col*1.0, -col*1.0,-col*4.0);\n    \treturn color;\n    }\n    \n    if (id_material==2.0)\n    {\n    \t\n\t\tconst float pi= 3.14159265359;\n\t\tconst float spinspeed=0.2;\n\t\tconst float movespeed=-1.;\n\t\tconst float spirals=1.5;\n\t\tconst float twist = 3.3;\n        \n       \n        vec2 uv = mObj.uv;\n        \n\t\tfloat l = length(uv);\n\t\tfloat pos = atan(uv.x, uv.y) + fract(spinspeed/iTime) * pi;\n        float distortion = iTime*movespeed + twist / sqrt(l);\n        vec2 s = 2.0*abs(fract(vec2(pos + distortion, 2.0*(pos - distortion + spirals))/pi*twist) - vec2(0.5));\n\t\tfloat d = dot(s,s);\n\t\tfloat f = smoothstep(0.0, 0.1, 1.0-d);\n\t\tvec3 color = vec3(f*l);\n\t\treturn color;\n\t\t\n      }\n   \n    \n     if (id_material==3.0)\n    { return colorplaneta(mObj.p.xz*0.064);  }\n    \n    \n    \n     if (id_material==4.0)\n    {\n        vec3 color;\n        vec2 pos1=mObj.uv;\n        pos1=pos1-0.4*vec2(sin(iTime)*sin(iTime),sin(iTime)*cos(iTime));\n\t\tfloat l1=length(pos1);\n\t\tfloat l2=step(0.1,fract(1.0/l1+iTime/1.0));\n\t\tfloat a=step(0.1,fract(atan(pos1.x,pos1.y)*5.0));\n        color=vec3(0.0,0.0,0.0);\n\t\tif(a!=l2)\n    \t\tcolor=vec3(l1,l1,l1);\n\t\t\n        return color;\n    } \n    \n    \n    \n    \n    \n    \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n   \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n\n\n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    mObj.uv=uv;\n    \n    float t;\n    t=mod(iTime*5.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(0.0, 10.0, 20.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -2.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n    vec3 ro=vec3(4.0,0.0,-25.0+t);\n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\nfloat m;\nif (i==-2 ) {return mObj.color; }       \n\nif(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \nif(i== 31 ){ return vec3(0.0, 0.6, 0.0);}\n\n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}