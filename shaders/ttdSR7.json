{
    "Shader": {
        "info": {
            "date": "1581350884",
            "description": "Another zoom into an Apollonian gasket. This one shows inverted images of the inversion circles themselves.\n\nmouse: extra mobius transform.\na: disable transform\nz: disable zooming (use <up> and <down> to zoom manually)",
            "flags": 48,
            "hasliked": 0,
            "id": "ttdSR7",
            "likes": 11,
            "name": "Apollonian Zoom II",
            "published": 3,
            "tags": [
                "zoom",
                "inversion",
                "apollonian"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 461
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Apollonian circles. Iterated inversion in a ring of circles.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int maxsteps = 20;\nconst float AA = 2.0;\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nbool keypress(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_D = 68;\nconst int CHAR_H = 72;\nconst int CHAR_J = 74;\nconst int CHAR_M = 77;\nconst int CHAR_V = 86;\nconst int CHAR_Z = 90;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst float sqrt2 = 1.414214;\n\nconst float r = 1.0/(sqrt2+1.0);\nconst float r0 = r*(sqrt2-1.0);\nconst vec4 circles[] =\n  vec4[](vec4(0,0,r0*r0,1.0),\n         vec4(r,r,r*r,1.0),\n         vec4(r,-r,r*r,1.0),\n         vec4(-r,r,r*r,1.0),\n         vec4(-r,-r,r*r,1.0),\n         vec4(0,0,1,-1.0)\n     );\nconst int N = circles.length();\n\nfloat length2(vec2 p) {\n  return dot(p,p);\n}\n\nbool inside(vec2 p, vec4 c) {\n  float r = length2(p-c.xy);\n  if (c.w < 0.0) return r > c.z;\n  else return r <= c.z;\n}\n\nvec2 invert(vec2 p, vec4 c) {\n  p -= c.xy;\n  p *= c.z/dot(p,p);\n  p += c.xy;\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  fragColor = vec4(0);\n  vec2 z0 = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n  bool dozoom = !keypress(CHAR_Z);\n  float zoom = !dozoom ? exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))) \n      : exp(40.0-mod(iTime,60.0));\n  // Transform to put centre at m\n  vec2 m = (iMouse.x > 0.0) ? (2.0*iMouse.xy - iResolution.xy)/iResolution.y\n    : 0.8*vec2(cos(0.1*iTime),sin(0.1*iTime));\n  m *= zoom;\n  m /= dot(m,m); // m inverted in unit circle\n\n  vec4 tcircle = vec4(m,dot(m,m)-1.0,0);\n  float aadelta = 1.0/(AA*iResolution.y);\n  for (float p = 0.0; p < AA; p++) {\n    for (float q = 0.0; q < AA; q++) {\n      vec2 z = zoom*(z0 + aadelta*vec2(p,q));\n      if (!keypress(CHAR_A)) {\n        z = invert(z,tcircle);\n      }\n      for (int step = 0; step < maxsteps; step++) {\n        bool found = false;\n        for (int i = 0; i < N; i++) {\n          if (inside(z,circles[i])) {\n            z = invert(z,circles[i]);\n            found = true;\n            break;\n          }\n        }\n        if (!found) break;\n      }\n      float dmin = 1e10;\n      int imin = 0;\n      for (int i = 0; i < N; i++) {\n        vec4 c = circles[i];\n        float d = abs(length(z-c.xy) - sqrt(c.z));\n        if (d < dmin) {\n          dmin = d;\n          imin = i;\n        }\n      }\n      vec3 col = hsv2rgb(vec3(float(imin)/float(6),0.8,0.8));\n      fragColor.xyz += col*(1.0-smoothstep(0.0,0.05,dmin));\n    }\n  }\n  fragColor.xyz /= AA*AA;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}