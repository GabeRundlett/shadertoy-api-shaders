{
    "Shader": {
        "info": {
            "date": "1517303451",
            "description": "left to right: porosity from 0% to 150%       Percolation is threshold phenomena: proba 0 if holes dens < and 1 if  >\ntop to bottom: increasing porosity radius   Note that in 3D, percolation is a lot more important.\nBufA:   #define source: source or layer",
            "flags": 32,
            "hasliked": 0,
            "id": "ll2fWV",
            "likes": 12,
            "name": "percolation in porous material",
            "published": 3,
            "tags": [
                "simulation",
                "short",
                "fluids",
                "porosity"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 932
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O,  vec2 U )\n{\n\tO = texelFetch(iChannel0,ivec2(U),0); // r = rock, b = water\n    O.r *= .5;\n    O.g += .5*(O.r+O.b);\n    if ( O.rgb == vec3(0) ) O++;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define source a  // ab for pre-filled water layer, a for source\n#define SIZE  10. // indeed, thinness ( 1/size ) compare to layer size\n#define depth .2  // layer size\n\n#define dens(p) 1.5*(4./3.1416)*p.x/L.x\n#define rand2(p) fract(43758.5453123*sin((p)*mat2(127.1,311.7, 269.5,183.3)))\n#define T(i,j) texelFetch(iChannel0, ivec2(u)+ivec2(i,j), 0 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy;\n    \n    if ( texelFetch(iChannel0,ivec2(0),0).zw != R ) {     // must rebuilt setup\n        if (u==vec2(.5)) O.zw = R;                        // to detect resol change\n        vec2 U = u/R.y, L = R/R.y, p; \n        float N = SIZE * ceil(U.y*3.);                    // granularity in 3 regions\n        U.y = fract(U.y*3.)/3. - .06;                     // current region\n        U /= depth; L /= depth;                           // normalized thickness\n        \n        if ( 0. <= U.y && U.y <= 1. ) {                   // rock layer\n            U *= N; L *= N;\n            float v = 0.;\n            for (int k = 0; k < 9; k++) {                 // seek in neighboors\n                p = floor( mod( U+vec2(k%3-1,k/3-1), N*L) );\n                for (float i = 0.; i<3.; i++)             // for proba > 1 ;-)\n                    if ( rand2(p+.2*i+.1).x < dens(p)-i ) // if proba, hole\n                        if ( length( U - p-rand2(p+.2*i) ) < .5) v = 1.; \n            }\n            O.r = 1.-v; \n            O.a = 1.;                                     // diffusive region\n        }             \n        else if ( U.y> 1. && U.y < 1.1 ) O.source++;      // top water zone\n        return;\n    }\n    \n\tO = texelFetch(iChannel0,ivec2(u),0);\n    if ( u == vec2(.5) ) return;\n    if ( u.y+.5 == R.y && u.x > R.x*.3 && u.x < R.x*.31) \n       { O.b = 1.; return; }                                     // source\n    \n    if ( T(0,0).rb == vec2(0) )                                  // if not rock pixel\n        O.b = O.a == 0.\n            ? T(0,1).b                                           // free air: fall\n            : float( 0. < ( T(-1,0)+T(1,0)+T(0,1)+T(0,-1) ).b)   // holes: diffuse\n              * (1.+.2*sin(20./R.y*float(iFrame))+.1*sin(float(iFrame)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}