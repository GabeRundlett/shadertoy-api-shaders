{
    "Shader": {
        "info": {
            "date": "1452303295",
            "description": "Enjoy the trip.",
            "flags": 96,
            "hasliked": 0,
            "id": "Mst3RX",
            "likes": 13,
            "name": "â™« sA.3 - Down to the Core",
            "published": 3,
            "tags": [
                "raymarching",
                "demoscene",
                "sdfhg"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 920
        },
        "renderpass": [
            {
                "code": "\n#define falloff 0.1\n#define amountV 0.8\n\nconst float amount = 48.0;\nconst vec2 start_pos = vec2(0); \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 position = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ouv = uv;\n    vec2 current_step = position;\n    \n    vec2 dir = ( start_pos - position ) / amount; \n    \n    vec3 total = vec3(0.);\n    for( int i = 0; i < int(amount); i++ )\n    {\n        total += smoothstep( 0.0, 1.0, pow(texture(iChannel0, vec2(sin( 0.0 + 1.0 ) + current_step.x, sin( 0.0 + 1.0 ) + current_step.y) * 0.5 ).xyz, vec3(4.)) * 2.4);\n        current_step += dir;\n    }\n    \n    total /= amount * 2.;\n    total += total * vec3(.8, 0., 3.5);\n    \n    total = pow(total, vec3(1.2)) ;\n    total = clamp(total, 0., 1.);\n    \n\n    vec4 c = texture(iChannel0, position / 2. + .5);\n\tfloat dist = distance(uv, vec2(.5));\n    float vin = smoothstep(0.8, falloff * 0.799, dist * (amountV + falloff));\n\t\n    fragColor = mix((vec4(total, 1.3)), clamp(c * vin, 0., 1.),  clamp(0., 1., .75 * vin + .2));\n    \n    vec2 mfc = mod(fragCoord, 5.);//+ sin(iTime);\n    if (mfc.y <= 1. || mfc.x <= 1.) {\n        uv += vec2(sin(iTime / 4.), iTime);\n    \tfragColor /= 1. + clamp(vec4(0.), vec4(1.), pow(texture(iChannel1, uv / 4.).rgba, vec4(3.))); \n    }\n    \n    fragColor *= 1.4;    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n#define max_distance 140.\n#define max_steps 148\n\n#define K .03\n#define shininess 4.\n#define specular_koef 1.5\n#define diffuse_koef .1\n#define FOV 40.\n\n#define epsilon .001\t\n#define PI 3.14159265\n#define TAU (2*PI)\n#define PHI (1.618033988749895)\n#define t iTime\n#define mt iChannelTime[1]\n#define loader true \n\nfloat lp = 0.;\nfloat speed = 0.;\n\nmat3 zrotate(float a) {\n    return mat3(\n        cos(a), -sin(a), 0.,\n        sin(a), cos(a), 0.,\n        0., 0., 1.\n    );\n}\n\nvec4 getFreq(float f) {    \n\tfloat fft  = texture( iChannel1, vec2(f, .25) ).x;     \n\tvec3 col = vec3( fft, 4. * fft * (1. - fft), 1. - fft ) * fft;\n    return vec4(col + .05, 1.);\n}\n\nvec3 opRep( vec3 p, vec3 c ) {\n    return mod(p,c)-.5*c;\n}\n\nfloat opS( float d1, float d2 ) {\n    return max(-d2,d1);\n}\n\nfloat opU( float d1, float d2 ) {\n    return min(d1,d2);\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)), .0) +\n         length(max(d, .0));\n}\n\nfloat pMP(inout vec2 p, float r) {\n\tfloat \n        angle = 2.*PI/r, \n        a2 = angle / 2.,\n\t \ta = atan(p.y, p.x) + a2,\n\t\tr2 = length(p),\n\t\tc = floor(a/angle);\n    \n\ta = mod(a,angle) - a2;\n\tp = vec2(cos(a), sin(a)) * r2;\n\t\n\treturn (abs(c) >= (r/2.)) ? abs(c) : c;\n}\n\nfloat get_distance(vec3 point) {\n    float \n        part = pMP(point.yx, 7. ),    \t\n        eq;\n    \n    point.z += part * .25;    \n    point *= zrotate(sin(mt / 10. - point.z / 4.));\n    \n    vec3 oopoint = point;\n    \n    point.x += sin((oopoint.y + oopoint.z - mt / 4.) / 4.);\n    point.y += cos((oopoint.x * 4. + oopoint.z) / 8.) * 2.;\n        \n    point = mod(point, 2.) - 1.;\n    \n    eq = sdBox(point, vec3(.5, .5, .5));\n    eq = opS(eq, sdBox(oopoint + vec3(0., 0., mt), vec3(0.22 + vec2(abs(sin(point.z / 2.))), 1e32)));\n    \n    return eq;\n}\n\nfloat raymarch(vec3 ray_origin, vec3 ray_direction) {\n    float d = 0.0, s;\n    vec3 new_point;\n\t\n\tfor (int i = 0; i < max_steps; i++) {\n\t\tnew_point = ray_origin + ray_direction * d;\t\t\n        s = get_distance(new_point) ;        \n\t\tif (s  < epsilon) return d;\n\t\td += s;\n\t\tif (d > max_distance) return max_distance;\n\t}\n\treturn d;\n}\n\nvec3 get_normal(vec3 point) {\n\tfloat d0 = get_distance(point);\n\tfloat dX = get_distance(point-vec3(epsilon, 0., 0.));\n\tfloat dY = get_distance(point-vec3(0., epsilon, 0.));\n\tfloat dZ = get_distance(point-vec3(0., 0., epsilon));\t\t\n\treturn normalize(vec3(dX-d0, dY-d0, dZ-d0));\n}\n\nfloat shadow_sample (vec3 org, vec3 dir) {\n    float \n        res = 0.,\n        e = epsilon * 100.0,\n        h;\n    \n    for (int i = 0; i < 16; ++i){\n        h = get_distance (org + dir * e);\n\t\tif (h <= epsilon) return 0.;\n        res = min(res, 32.0 * h / e);\n        e += h;\n\t\tif (e >= max_distance) return res;\t\t\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n\tvec2 \n        vPos = fragCoord.xy / iResolution.xy - .5,\n        ovPos;\n\t\n    float \n        \n    \tspeed = sin(0. - mt / 32.) * 32. + 150.,\n    \tsk = sin(mt / 4.), \n        ck = cos(mt / 4.),\n        d;\n    \n    vPos *= tan(radians (FOV) / 2.);\n    ovPos = vPos;\n    \n    vec3 \n        vuv = vec3(0, 1, 0.) / 2., // up\n    \tprp = vec3(0., 0. , mt + speed), // pos\n    \tvrp = prp + vec3(0., 0., +3.), // lookat    \n\t\tlight = prp - vec3(0., 0., 1.),    \n    \tvpn = normalize(vrp - prp),\n    \tu = normalize(cross(vuv, vpn)),\n    \tv = cross(vpn, u),\n    \tvcv = (prp + vpn),\n    \tscrCoord = (vcv + vPos.x * u * iResolution.x/iResolution.y + vPos.y * v),\n    \tscp = normalize(scrCoord - prp),\n        point;        \n    \n\td = raymarch(prp, scp);\n    point = (prp + scp * d);\t\t\t\n\t\n    if (d < max_distance) {\t\n        vec3 \n            point_normal = get_normal(point),\n\t\t\tlight_dir = -normalize(light-point),\n\t\t\treflected_light_dir = reflect(-light_dir, point_normal);\n\t\t\n        float \n            attenuation = 1. / (1. + K * pow( length(light - point), 2.)),\n\t\t\tdotp_diffuse = max(0., dot(light_dir, point_normal)),\n\t\t\tdotp_specular = pow(max(0., dot(scp, reflected_light_dir)), shininess);\n\n        lp = pow(length(point.yx - prp.xy), 2.0);\n\n\t\tfragColor =   \n            (1. + ( \n                dotp_diffuse * diffuse_koef + \n                dotp_specular*specular_koef\n            ) * shadow_sample(point, -light_dir) \n             * attenuation )  \n            * (\n                .7 * getFreq(lp).r + .5 * ((texture(iChannel2, point_normal - reflected_light_dir).r))\n            ) \n            * vec4(.8, .3, .40 * lp, 1.) * .3\n            + d / 48. * vec4(1., .5, .2, 1.);\n         \n        fragColor.a = lp;\n        \n        \n\t} else fragColor = vec4(1., .5, .0, 0.);\n   \n\t\n    fragColor = clamp(fragColor, 0., 1.);\n    fragColor.rgb = pow(fragColor.rgb * 3., vec3(1.15)) / 2.4;\n\n    #ifdef loader \n    //loading\n    if (mt == 0. && t >= 0.) {\n    \t//fragColor = vec4(0);   \n    }    \n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 609,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/goa-spirit/goa-spirit-psychedelic-goa"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}