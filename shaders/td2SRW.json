{
    "Shader": {
        "info": {
            "date": "1553122975",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/398555459[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "td2SRW",
            "likes": 4,
            "name": "[twitch] Diamond Pulse",
            "published": 3,
            "tags": [
                "pulse",
                "diamond",
                "livecoding",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 677
        },
        "renderpass": [
            {
                "code": "/*\n    This shader was created live on stream!\n    You can watch the VOD here: https://www.twitch.tv/videos/398555459\n\n    I use the Bonzomatic tool by Gargaj/Conspiracy:\n    https://github.com/Gargaj/Bonzomatic\n\n    Wednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\n    Come and watch a show!\n\n    ~yx\n*/\n\n//#define pi uintBitsToFloat(0x40490FDBu)\n#define pi acos(-1.)\n\nconst float BPM = 128./2.;\n\nvec2 rotate(vec2 a, float b)\n{\n\tfloat c=cos(b);\n\tfloat s=sin(b);\n\treturn vec2(\n\t\ta.x*c-a.y*s,\n\t\ta.x*s+a.y*c\n\t);\n}\n\nfloat sdBox(vec3 p, vec3 r)\n{\n\tp=abs(p)-r;\n\treturn max(max(p.x,p.y),p.z);\n}\n\nvec3 p2;\n\nfloat sdOctahedron(vec3 p, float r)\n{\n\tp=abs(p);\n\treturn (p.x+p.y+p.z-r)/sqrt(3.);\n}\n\n\nfloat shape(vec3 p)\n{\n\tp=abs(p);\n\t\n\tp.xz=vec2(max(p.x,p.z),min(p.x,p.z));\n\tp.yx=vec2(max(p.x,p.y),min(p.x,p.y));\n\t\n\tfloat r = 1. + pow(cos(iTime*(BPM/60.)*pi*2.)*.5+.5,6.)*.2;\n\treturn min(\n\t\tmax(\n\t\t\tsdOctahedron(p,2.),\n\t\t\t-min(\n\t\t\t\tsdBox(p,vec3(r)),\n\t\t\t\tsdBox(p-vec3(0,1,0),vec3(r/2.))\n\t\t\t)\n\t\t),\n\t\tlength(p)-.5+(r-1.)*.5\n\t);\n}\n\nfloat tick(float t)\n{\n\tfloat a=floor(t);\n\tfloat b=fract(t);\n\tb=smoothstep(0.,1.,b);\n\tb=smoothstep(0.,1.,b);\n\treturn a+b;\n}\n\nfloat tick2(float t)\n{\n\tfloat a=floor(t);\n\tfloat b=fract(t);\n\tb=smoothstep(0.,1.,b);\n\tb=smoothstep(0.,1.,b);\n\tb=smoothstep(0.,1.,b);\n\tb=smoothstep(0.,1.,b);\n\tb=smoothstep(0.,1.,b);\n\tb=smoothstep(0.,1.,b);\n\treturn a+b;\n}\n\nfloat scene(vec3 p)\n{\n\tfloat outershape = -sdOctahedron(p,20.);\n\t\n\tp=-p;\n\t\n\tfloat mode = clamp(sin(iTime*.3)*6.,0.,1.);\n\t\n\tfloat radial=-atan(p.x,p.z);\n\t\n\tp.xz = rotate(p.xz, radial * mode * 2.);\n\t\n\tfor(float i=0.;i<mod(iTime*BPM/60.,3.);++i)\n\t\tp=p.yzx;\n\t\n\tp.xy = rotate(p.xy, tick(iTime*BPM/60.)*pi*.5);\n\t\n\tp2=p;\n\t\n\treturn min(outershape, shape(p));\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n\tvec3 accum = vec3(1);\n\tfor(int bounce=0;bounce<3;++bounce)\n\t{\n\t\tfloat t=0.;\n\t\tfloat k=0.;\n\t\tfor(int i=0;i<250;++i){\n\t\t\tk=scene(cam+dir*t)*.4;\n\t\t\tt+=k;\n\t\t\tif(abs(k)<.001||k>10.)\n\t\t\t\tbreak;\n\t\t}\n\t\tif(abs(k)<.001)\n\t\t{\n\t\t\tvec3 h=cam+dir*t;\n\t\t\tvec2 o=vec2(.001,0);\n\t\t\tvec3 n=normalize(vec3(\n\t\t\t\tscene(h+o.xyy)-scene(h-o.xyy),\n\t\t\t\tscene(h+o.yxy)-scene(h-o.yxy),\n\t\t\t\tscene(h+o.yyx)-scene(h-o.yyx)\n\t\t\t));\n\t\t\t\n\t\t\tif (length(h) < 1.)\n\t\t\t{\n\t\t\t\t//return vec3(pow(n.y*.5+.5, 5.))+.25;\n\t\t\t\tfloat fresnel = pow(1.-dot(-dir,n),5.);\n\t\t\t\t//fresnel=mix(.002,1.,fresnel);\n\t\t\t\taccum *= fresnel;\n\t\t\t\tcam=h+n*.01;\n\t\t\t\tdir=reflect(dir,n);\n\t\t\t}\n\t\t\telse if (length(h) > 2.)\n\t\t\t{\n\t\t\t\th = mod(abs(h)-vec3(0,0,.5+tick2(iTime*BPM/120.)),2.)-1.;\n\t\t\t\taccum *= (step(0.,h.x*h.y*h.z))*.2+.4;\n\t\t\t\treturn accum;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfloat fresnel = pow(1.-dot(-dir,n),5.);\n\t\t\t\tvec3 color = sin(iTime+vec3(0,1,2)+h)*.5+.5;\n\t\t\t\t//accum *= mix(color,vec3(1),fresnel);\n\t\t\t\taccum *= mix(vec3(.1,.3,1).brg,vec3(0),(1.-fresnel)*.5);\n\t\t\t\tcam=h+n*.01;\n\t\t\t\tdir=reflect(dir,n);\n\t\t\t}\n\t\t}\n\t}\n\treturn accum;\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n\tvec3 cam=vec3(0,0,-5);\n\tvec3 dir=normalize(vec3(uv,1));\n\t\n\tcam.xz = rotate(cam.xz, iTime*.3);\n\tdir.xz = rotate(dir.xz, iTime*.3);\n\t\n\tcam.yz = rotate(cam.yz, iTime*.3);\n\tdir.yz = rotate(dir.yz, iTime*.3);\n\t\n\tout_color.rgb = trace(cam,dir);\n\tout_color.rgb = pow(out_color.rgb, vec3(.45));\n\tout_color.rgb *= 1.-dot(uv,uv)*.4;\n\tout_color.rgb = pow(out_color.rgb, vec3(1,1.3,1.1));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}