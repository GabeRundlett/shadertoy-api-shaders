{
    "Shader": {
        "info": {
            "date": "1635362659",
            "description": "Ray marching an hyperbolic paraboloid  y = x² - z²\nWhen Euclidian distance is too hard to compute, ray-marching can simply use L∞ norm as well for the SDF.\n\nblack hole let for demo. Fix: uncomment #22 ( thanks mla ! )",
            "flags": 0,
            "hasliked": 0,
            "id": "NdySD3",
            "likes": 13,
            "name": "hyperbolic paraboloid SDF∞",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 473
        },
        "renderpass": [
            {
                "code": "#define rot(a)       mat2(cos(a+vec4(0,11,33,0)))         // rotation\n//#define sqrt(v)  ( v < 0. ? 1e5 : sqrt(v) )\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., x,y,z,a=.4; \n    vec3  R = iResolution, d,\n          D = normalize(vec3((U+U-R.xy)/R.y, -2.)),   // ray direction\n          p = vec3(0,0,3), q,                         // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(10,12,0)/1e2*cos(iTime+vec3(0,11,0))+vec3(0,.12,0); \n\n    for ( O=vec4(1); O.x > 0. && t > .005; O-=.005 )  \n        q = p,\n        q.yz *= rot(.5-6.3*M.y),                      // rotations\n        q.xz *= rot(-6.3*M.x),\n        x=q.x, y=q.y, z=q.z,\n        d = vec3(  sqrt(y/a +z*z) , a*(x*x -z*z), sqrt(x*x -y/a) ), // X and Z just re-express Y(X,Z)\n        d = abs( d - q ),                             // distance in each separated axes\n     // t = max( abs( a*(x*x -z*z) - y ) -.01,        // indeed, even d.y could be enough in some uses\n        t = max( min(d.x, min(d.y,d.z) ) -.01 ,       // SDF\n                 length(q.xz)-1. ),                   // clamp to disk\n     // t = min(t,100.), // [ uncomment to avoid the black hole :-) ]\n        p += .25*t*D;                                 // step forward = dist to obj\n        \n    if (O.a<0.) O  = texture(iChannel1, q );          // background\n    else        q  = sin(30.*q),\n                O *=  vec4( min( abs(q)/fwidth(q) , 1.), 0); // texture\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}