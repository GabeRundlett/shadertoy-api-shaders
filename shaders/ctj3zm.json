{
    "Shader": {
        "info": {
            "date": "1673048323",
            "description": "Another irregular rectangular tiling, this one is based on squares and golden rectangles.",
            "flags": 16,
            "hasliked": 0,
            "id": "ctj3zm",
            "likes": 25,
            "name": "Irregular Golden Tiling",
            "published": 3,
            "tags": [
                "rectangle",
                "tiling",
                "golden"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////////////////\n//\n// Irregular Golden Tiling, mla, 2023\n//\n// A square can be dissected into a smaller square and two\n// golden rectangles (of different sizes). A golden rectangle\n// can be dissected into a square and a (smaller) golden\n// rectangle. Repeat as required.\n//\n// 'x': show tile distance field\n// 'y': iterate to fixed tile size\n// 'z': progressive\n//\n//////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  const float phi = 0.5*(sqrt(5.0)-1.0); // 0.618..\n  float lwidth = 0.001;\n  vec2 p = 1.1*(2.0*fragCoord - iResolution.xy)/iResolution.y;\n  float px = fwidth(p.x);\n  vec3 col = vec3(1,1,0.5);\n  vec2 a = vec2(-1.0-phi,-1);\n  vec2 b = vec2(1.0+phi,1);\n  int type = 1;\n  float d = rectdist(p,a,b);\n  if (d < 0.0) {\n    uint h = uint(iTime);\n    int N = 11;\n    if (key(CHAR_Z)) { N = int(iTime)%14; h = uint(iTime)/14u; }\n    // Could also iterate eg. until length(a-b) < 0.1\n    // Or don't count thin rectangles\n    // Or randomly terminate loop early.\n    for (int i = 0; \n         key(CHAR_Y) ? length(a-b) > 0.1 : i < N || type == 2; \n         i++, h = ihash(h^uint(type))) {\n      if (type == 0) {\n        bool flip = bool(h&1u);\n        if (flip) { p = p.yx; a = a.yx; b = b.yx; }\n        bool reverse = bool(h&2u);\n        if (reverse) {\n          float x1 = phi*a.x + (1.0-phi)*b.x;\n          if (p.x < x1) { b = vec2(x1,b.y); type = 2; }\n          else { a = vec2(x1,a.y); type = 1; }\n        } else {\n          float x1 = (1.0-phi)*a.x + phi*b.x;\n          if (p.x < x1) { b = vec2(x1,b.y); type = 1; }\n          else { a = vec2(x1,a.y); type = 2; }\n        }\n        if (flip) { p = p.yx; a = a.yx; b = b.yx; }\n      } else { // type == 1 || type == 2 ie. golden or thin rectangle\n        bool flip = b.y-a.y > b.x-a.x;\n        if (flip) { p = p.yx; a = a.yx; b = b.yx; }\n        bool reverse = bool(h&1u);\n        if (reverse) {\n          float x1 = b.x-(b.y-a.y);\n          if (p.x < x1) { b = vec2(x1,b.y); type = 1; }\n          else { a = vec2(x1,a.y); type = 0; }\n        } else {\n          float x1 = a.x+b.y-a.y;\n          if (p.x < x1) { b = vec2(x1,b.y); type = 0; }\n          else { a = vec2(x1,a.y); type = 1; }\n        }\n        if (flip) { p = p.yx; a = a.yx; b = b.yx; }\n      }\n    }\n    col = 0.25+0.75*h2rgb(float(h)/exp2(32.0));\n    d = min(min(p.x-a.x,b.x-p.x),\n            min(p.y-a.y,b.y-p.y));\n    if (key(CHAR_X)) col *= 0.75-0.25*cos(PI*d/px);\n  }\n  col *= smoothstep(0.0,px,d-lwidth);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\nconst float PI = 3.4159;\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n  x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n// External distance to rectangle.\nfloat rectdist(vec2 p, vec2 a, vec2 b) {\n  return max(max(a.x-p.x,p.x-b.x),\n             max(a.y-p.y,p.y-b.y));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}