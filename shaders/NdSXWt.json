{
    "Shader": {
        "info": {
            "date": "1621303820",
            "description": "I saw this tower in a twitter pic and thought it was cool - old IBM thing. So I wanted to make it - my modeling skills suck, but not bad for being very primary. I was listening to this while making it - so added the audio visualizer into it!",
            "flags": 64,
            "hasliked": 0,
            "id": "NdSXWt",
            "likes": 23,
            "name": "Reggae Computer",
            "published": 3,
            "tags": [
                "raymarching",
                "retro",
                "computer",
                "ibm",
                "reproduction",
                "reggae"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 588
        },
        "renderpass": [
            {
                "code": "// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// IBM from way back - or something like that\n// was just trying to model something I saw on\n// twitter - though my modeling skills blow, I'm\n// trying to practice. \n\n// Audio - it's what I was listening to at the time\n// and worked well with the lights! :-)\n\n// soundcloud broken - https://soundcloud.com/alexvanderschoor/bob-marley-exodus-full-album\n// using system music till fixed - saving link in comments\n\n#define R   iResolution\n#define M   iMouse\n#define T   iTime\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MIN_DIST .0001\n#define MAX_DIST 90.\n\nfloat sampleFreq(float freq) \n{\n    return texture(iChannel0, vec2(freq, 0.25)).x;\n}\nfloat hash21(vec2 p)\n{\n    return fract(sin(dot(p,vec2(23.86,48.32)))*4374.432);\n}\nmat2 rot(float a)\n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat tmod = 0.;\nvoid getMouse(inout vec3 ro, inout vec3 rd)\n{\n    float x = M.xy == vec2(0) ? 0. : -(M.y/R.y * 2. - 1.) * PI;\n    float y = M.xy == vec2(0) ? 0. : -(M.x/R.x * 2. - 1.) * PI;\n \n    if(M.z<1.){\n        y = .52*sin(T*.15);\n        x = tmod<4.? .6: .22*sin(T*.075);\n    }\n\n    if(x<-.25)x=-.25;\n    mat2 rx = rot(x);\n    mat2 ry = rot(y);\n    \n    ro.yz *= rx;\n    rd.yz *= rx;\n    ro.xz *= ry;\n    rd.xz *= ry;\n}\n\n//@iq thanks for the sdf's!\nfloat cap( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdbox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdbox( vec2 p, vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdframe( vec3 p, vec3 b, float e )\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\nfloat smin( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\nfloat modPolar(inout vec2 p, float rep) {\n    float angle = 2.*PI/rep;\n    float a = atan(p.y, p.x) + angle/2.;\n    float c = floor(a/angle);\n    a = mod(a,angle) - angle/2.;\n    p = vec2(cos(a), sin(a))*length(p);\n    return (abs(c) >= (rep/2.)) ? abs(c) : c;\n} \n//globals\nmat2 tprot = mat2(0);\nfloat glow1 = 0.,glow2 = 0.,glow3 = 0.,glow4 = 0.,glow5 = 0.,glow6 = 0.;\nvec3 hit=vec3(0);vec3 hitPoint=vec3(0);\n\nvec2 map(vec3 p, float sg)\n{\n    vec2 res =vec2(1e5,0.);\n    vec3 q = p;\n    \n    float mainbox = sdbox(q-vec3(0,1.1,0),vec3(1.5,3,.75));\n    float cutbox =  sdbox(q-vec3(0,2.50,.775),vec3(1.425,1.,.25));\n    cutbox =   min( sdbox(q-vec3(0,-.1 ,.775),vec3(.75,1.55,.1 )), cutbox);\n    cutbox =   min( sdbox(vec3(abs(q.x),q.yz)-vec3(.65,-.1 ,.775),vec3(.2,1.55,.25 )), cutbox);\n    mainbox = max(  mainbox, -cutbox);\n    if(mainbox<res.x) {\n        res = vec2(mainbox,2.);\n        hit = q-vec3(0,1,0);\n    }\n    \n    float dsp = sdbox(q-vec3(0,2.05,.55),vec3(.325,.155,.005));\n    if(dsp<res.x) {\n        res = vec2(dsp,8.);\n        hit = q-vec3(0,2.05,.55);\n    }\n    \n    float frame = sdframe(q-vec3(0,1.1,0),vec3(1.525,3.025,.775),.025);\n    frame = min(  sdframe(q-vec3(0,2.8,.775),vec3(1.525,1.33,.005),.025),frame);\n    frame = min(  sdframe(q-vec3(0,2.05,.55),vec3(.35,.175,.005),.015),frame);\n    frame = min(  torus(vec3(q.y,abs(q.x),q.z)-vec3(2.8,.65,.625),vec2(.225,.025)),frame);\n    frame = min(  torus(vec3(q.y,abs(q.x),q.z)-vec3(1.95,.65,.555),vec2(.125,.025)),frame);\n    frame = min(  sdbox(vec3(q.y,abs(q.x)-.835,q.z)-vec3(.120,0,.625),vec3(1.70,.03,.15)),frame);\n    frame = min(  sdbox(vec3(q.y,abs(q.x)-.425,q.z)-vec3(.025,0,.6),vec3(1.65,.03,.15)),frame);\n    frame = min(  cap(vec3(q.y,q.z,abs(q.x))-vec3(2.05,.475,1.05),.075,.1),frame);\n    \n    frame = min(sdbox(q-vec3(0,1.4,.55),vec3(.445,.225,.15)),frame);\n    if(frame<res.x) {\n        res = vec2(frame,3.);\n        hit = q;\n    }\n \n    float tapeB = cap(vec3(q.y,q.z,abs(q.x))-vec3(2.8,.55,.65),.225,.1);\n    tapeB = min(  cap(vec3(q.y,q.z,abs(q.x))-vec3(1.95,.5,.65),.100,.1),tapeB);\n    if(tapeB<res.x) {\n        res = vec2(tapeB,5.);\n        hit = q;\n    }\n    \n    vec3 tq1 = q.yzx-vec3(2.8,.55,.65);\n    vec3 pq1 = tq1;\n    pq1.xz*=tprot;\n    modPolar(pq1.xz,3.);\n    float tcbx = sdbox(pq1-vec3(.4,0,0),vec3(.09));\n    float tape1 = cap(tq1,.575,.05);\n    tape1=max(tape1,-tcbx);\n    \n    if(tape1<res.x) {\n        res = vec2(tape1,6.);\n        hit = pq1;\n    }   \n    \n    vec3 tq2 = q.yzx-vec3(2.8,.55,-.65);\n    vec3 pq2 = tq2;\n    pq2.xz*=tprot;\n    modPolar(pq2.xz,3.);\n    float tcby = sdbox(pq2-vec3(.4,0,0),vec3(.09));\n    float tape2 = cap(tq2,.575,.05);\n    tape2=max(tape2,-tcby);\n    if(tape2<res.x) {\n        res = vec2(tape2,7.);\n        hit = pq2;\n    }    \n    \n    float btn1 = sdbox(q-vec3(.25,3.75,.625),vec3(.125,.035,.15));\n    float btn2 = sdbox(q-vec3(.25,3.85,.625),vec3(.125,.035,.15));\n    float btn3 = sdbox(q-vec3(.55,3.75,.625),vec3(.125,.035,.15));\n    float btn4 = sdbox(q-vec3(.55,3.85,.625),vec3(.125,.035,.15));\n    float btn5 = sdbox(q-vec3(-.05,3.75,.625),vec3(.125,.035,.15));\n    float btn6 = sdbox(q-vec3(-.05,3.85,.625),vec3(.125,.035,.15));\n    \n    if (sg==1.&& hash21(vec2(floor(T),1.))>.8) glow1 += .00075/(.0025+btn1*btn1);\n    if (sg==1.&& hash21(vec2(floor(T),2.))>.8) glow2 += .00075/(.0025+btn2*btn2);\n    if (sg==1.&& hash21(vec2(floor(T),4.))>.8) glow1 += .00075/(.0025+btn4*btn4);\n    if (sg==1.&& hash21(vec2(floor(T),3.))>.8) glow2 += .00075/(.0025+btn3*btn3);\n    if (sg==1.&& hash21(vec2(floor(T),6.))>.8) glow2 += .00075/(.0025+btn5*btn5);\n    if (sg==1.&& hash21(vec2(floor(T),7.))>.8) glow2 += .00075/(.0025+btn6*btn6);\n    \n    btn1=min(btn2,btn1);\n    btn3=min(btn4,btn3);\n    btn5=min(btn6,btn5);\n    btn1=min(btn3,btn1);\n    btn1=min(btn5,btn1);\n    \n    if(btn1<res.x) {\n        res = vec2(btn1,1.);\n        hit = q;\n    }\n    \n    float gnd = p.y+2.;\n    if(gnd<res.x) {\n        res = vec2(gnd,4.);\n        hit = p;\n    }\n    \n    return res;\n}\n\nvec2 marcher(vec3 ro, vec3 rd, int steps, float sg)\n{\n    float d = 0.;\n    float m = 0.;\n    vec3 p;\n    for(int i=0;i<steps;i++)\n    {\n        p = ro + rd * d;\n        vec2 ray = map(p,sg);\n        if(abs(ray.x)<MIN_DIST*d||d>MAX_DIST)break;\n        d += ray.x*.8;\n        m  = ray.y;\n    } \n    hit = p;\n    return vec2(d,m);\n}\n\nvec3 normal(vec3 p, float t)\n{\n    t*=MIN_DIST;\n    float d = map(p,0.).x;\n    \n    vec2 e = vec2(t,0);\n    vec3 n = d - vec3(\n        map(p-e.xyy,0.).x,\n        map(p-e.yxy,0.).x,\n        map(p-e.yyx,0.).x\n        );\n    return normalize(n);\n}\n\nvec3 machineTone = vec3(.9,.01,.001);\nvec3 checkColor = vec3(0.729,0.031,0.031);\nvec4 FC= vec4(0.145,0.055,0.055,0.);\nvec3 lpos =  vec3(3,7,5);\n\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last, inout float d) {\n\n    vec3 C = vec3(0);\n    vec2 ray = marcher(ro,rd,164,1.);\n    \n    hitPoint = hit;\n    d = ray.x;\n    float m = ray.y;\n    float alpha = 0.;\n    if(d<MAX_DIST)\n    {\n        vec3 p = ro + rd * d;\n        vec3 n = normal(p,d);\n\n        vec3 l = normalize(lpos-p);\n        \n        vec3 h = vec3(.5);\n\n        float diff = clamp(dot(n,l),0.,1.)*.75;\n        float fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 5.);\n        fresnel = mix(.01, .7, fresnel);\n\n        float shdw = 1.0;\n        vec3 light = normalize(lpos-p);\n        for( float t=.01; t < 18.; )\n        {\n            float h = map(p + light*t,0.).x;\n\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n\n            shdw = min(shdw, 11.*h/t);\n            t += h * .95;\n\n            if( shdw<MIN_DIST || t>62. ) break;\n        }\n        diff *= shdw;\n        \n        vec3 view = normalize(p - ro);\n        vec3 ret = reflect(normalize(lpos), n);\n        float spec =  0.5 * pow(max(dot(view, ret), 0.), (m==2.||m==4.)?24.:64.);\n \n        if(m==1.) {\n            C+=diff*.4;\n            ref = vec3(1)*fresnel;\n        }\n        hitPoint=p;\n        if(m==2.) {\n            //black decals\n            if(\n            (hitPoint.y>3.65&&hitPoint.y<3.95&&hitPoint.z>.75&&\n             hitPoint.x>-.75&&hitPoint.x<.75)||\n            (hitPoint.y>1.5&&hitPoint.y<3.5&&hitPoint.z>.15&&\n             hitPoint.x>-1.45&&hitPoint.x<1.45)||\n            \n            (hitPoint.y>-1.65&&hitPoint.y<1.5&&hitPoint.z>.15&&\n             hitPoint.x>-.85&&hitPoint.x<.85)||\n            \n            (hitPoint.y<-1.75)\n            ){  //red stripe\n                h=(hitPoint.y>-1.75&&hitPoint.y<1.5&&hitPoint.z>.5&&\n                   hitPoint.x>-.45&&hitPoint.x<.45)?\n                   machineTone:vec3(.01);\n                ref = vec3(1)*(.05-fresnel);\n            }else{\n               h= vec3(.95);\n               ref = vec3(0);\n            }\n            \n            if( hitPoint.y>1.0&&hitPoint.y<3.5&&hitPoint.z>.15&&\n             hitPoint.x>-1.4 &&hitPoint.x<1.4 ) {\n                //big back visualizer\n                vec2 uv = hitPoint.xy-vec2(0,2.05);\n                uv*=8.;\n                vec2 f = fract(uv)-.5;\n                vec2 fid = floor(uv)+.5;\n                fid.x=abs(fid.x);\n                fid.y*=-1.;\n                float ht = sampleFreq(fid.x*.0465);\n               \n                ht=smoothstep(.001,1.,ht)*1.5;\n\n                float ff = sdbox(f,vec2(.25))-.05;\n                //ff=abs(ff)-.01;\n                ff=smoothstep(.11,.1,ff);\n                \n                if(\n                (hitPoint.y>1.52 &&hitPoint.y<3.5) &&\n                ht>.5 && (fid.y-1.)>-(ht*1.75)\n                ) {\n                h=mix(h,ff*mix(vec3(.0,.6,1.),vec3(.0,.3,.6),fid.y-2.),.2);\n                ref = vec3(1)*(.35-fresnel);\n                }\n                \n             }\n             \n            C+=spec+(h*diff);\n        }\n        \n        if(m==3.) {\n            C+=vec3(.25)*diff;\n            ref = vec3(1)*(.25-fresnel);\n        }\n        \n        if(m==4.) {\n            vec2 f = fract(hitPoint.xz*.25)-.5;\n            if(f.x*f.y>0.) \n            {\n                h = vec3(.01);\n                ref = vec3(1)*(.35-fresnel);\n            } else {\n                ref = vec3(1)*(.01+fresnel);\n                h = checkColor;\n            }\n            C+=spec+h*diff;\n        }\n     \n        if(m==5.) {\n            h = vec3(.001);\n            C+=spec+h*diff;\n        }\n        if(m==6.) {\n            h = machineTone;\n            C+=spec+h*diff;\n        }\n        if(m==7.) {\n            h = vec3(1.);\n            C+=spec+h*diff;\n        }\n        if(m==8.) {\n            h = vec3(.01);\n            //mini visualizer\n            vec2 uv = hitPoint.xy-vec2(0,2.05);\n            uv*=15.;\n            vec2 f = fract(uv)-.5;\n            vec2 fid = floor(uv)+.5;\n            fid.x=abs(fid.x);\n            fid.y*=-1.;\n            float ht = sampleFreq(fid.x*.0465);\n            ht=smoothstep(.001,1.,ht)*1.5;\n    \n            float ff = sdbox(f,vec2(.25))-.05;\n            ff=smoothstep(.11,.1,ff);\n            if(\n            (hitPoint.y>1.92 &&hitPoint.y<2.19) &&\n            ht>.5 && (fid.y-1.)>-(ht*1.75)\n            ){\n                h+=ff*mix(vec3(.9,.5,0),vec3(.6,.2,0),fid.y+.5);\n                ref = vec3(1)*(.65-fresnel);\n            }\n            ref = vec3(1)*(.05-fresnel);\n            C+=spec+h*diff;\n        }\n        \n        ro = p+n*MIN_DIST;\n        rd = reflect(rd,n);\n    } else {\n        C = FC.rgb;\n    }\n    C = mix(FC.rgb,C,  exp(-.000035*d*d*d)); \n    \n    float glowMask1 = clamp(glow1,.0,.8);\n    C = mix(C,glow1*machineTone,glowMask1);\n    \n    float glowMask2 = clamp(glow2,.0,.7);\n    C = mix(C,glow2*vec3(.9),glowMask2);\n    \n    return vec4(C,alpha);\n}\n   \nvoid mainImage( out vec4 O, in vec2 F )\n{\n    tprot = rot(T*.5);\n    tmod = mod(T*.25,15.);\n    \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,1.25,M.z>0.||tmod<4.?6.5:8.);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    getMouse(ro,rd);\n    vec3 C = vec3(0);\n    vec3 ref=vec3(0), fil=vec3(1);\n    float d =0.;\n    float numBounces = 2.;//@BigWings reflection\n    for(float i=0.; i<numBounces; i++) {\n        vec4 pass = render(ro, rd, ref, i==numBounces-1., d);\n        C += pass.rgb*fil;\n        fil*=ref;\n        // first bounce - get fog layer\n        if(i==0.) FC = vec4(FC.rgb,exp(-.00035*d*d*d));\n    }\n    //layer fog in\n    C = mix(C,FC.rgb,1.-FC.w);\n\n    C = pow(C, vec3(.4545));\t// gamma correction\n    \n    O = vec4(C,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28729,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/alexvanderschoor/bob-marley-exodus-full-album"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}