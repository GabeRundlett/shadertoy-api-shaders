{
    "Shader": {
        "info": {
            "date": "1492698563",
            "description": "Inspired by the comments in Shane's Hexagonal blocks: https://www.shadertoy.com/view/XdjyWD",
            "flags": 0,
            "hasliked": 0,
            "id": "XdSyzK",
            "likes": 68,
            "name": "Hex grid traversal",
            "published": 3,
            "tags": [
                "raytracing",
                "grid",
                "hexagon",
                "hex",
                "traversal"
            ],
            "usePreview": 0,
            "username": "mattz",
            "viewed": 3077
        },
        "renderpass": [
            {
                "code": "/* Hex grid marching, by mattz\n   License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n   Click and drag to set ray direction.\n\n*/\n\n// square root of 3 over 2\nconst float hex_factor = 0.8660254037844386;\n\n#define HEX_FROM_CART(p) vec2(p.x / hex_factor, p.y)\n#define CART_FROM_HEX(g) vec2(g.x * hex_factor, g.y)\n\n//////////////////////////////////////////////////////////////////////\n// Given a 2D position, find integer coordinates of center of nearest\n// hexagon in plane.\n\nvec2 nearestHexCell(in vec2 pos) {\n    \n    // integer coords in hex center grid -- will need to be adjusted\n    vec2 gpos = HEX_FROM_CART(pos);\n    vec2 hex_int = floor(gpos);\n\n    // adjust integer coords\n    float sy = step(2.0, mod(hex_int.x+1.0, 4.0));\n    hex_int += mod(vec2(hex_int.x, hex_int.y + sy), 2.0);\n\n    // difference vector\n    vec2 gdiff = gpos - hex_int;\n\n    // figure out which side of line we are on and modify\n    // hex center if necessary\n    if (dot(abs(gdiff), vec2(hex_factor*hex_factor, 0.5)) > 1.0) {\n        vec2 delta = sign(gdiff) * vec2(2.0, 1.0);\n        hex_int += delta;\n    }\n\n    return hex_int;\n    \n}\n\n//////////////////////////////////////////////////////////////////////\n// Flip normal if necessary to have positive dot product with d\n\nvec2 alignNormal(vec2 h, vec2 d) {\n    return h*sign(dot(h, CART_FROM_HEX(d)));\n}\n\n//////////////////////////////////////////////////////////////////////\n// Intersect a ray with a hexagon wall with normal n\n\nvec3 rayHexIntersect(vec2 ro, vec2 rd, vec2 h) {\n\n    vec2 n = CART_FROM_HEX(h);\n\n    // solve for u such that dot(n, ro+u*rd) = 1.0\n    float u = (1.0 - dot(n, ro)) / dot(n, rd);\n\n    // return the \n    return vec3(h, u);\n\n}\n\n//////////////////////////////////////////////////////////////////////\n// Choose the vector whose z coordinate is minimal\n\nvec3 rayMin(vec3 a, vec3 b) {\n    return a.z < b.z ? a : b;\n}\n\n//////////////////////////////////////////////////////////////////////\n// Triangle wave - used only for visualization\n\nfloat tri(float x) {\n    return abs(0.5*x-floor(0.5*x)-0.5)*2.0;\n}\n\n//////////////////////////////////////////////////////////////////////\n// Used only for visualization\n\nfloat hexDist(vec2 p) {\n    p = abs(p);\n    return max(dot(p, vec2(hex_factor, 0.5)), p.y) - 1.0;\n}\n\n//////////////////////////////////////////////////////////////////////\n// From Dave Hoskins' https://www.shadertoy.com/view/4djSRW\n\n#define HASHSCALE1 .1031\n\nfloat hash12(vec2 p) {\n    vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//////////////////////////////////////////////////////////////////////\n// Main function\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float scl = 10.5 / iResolution.y;\n\n    float ray_width = max(0.04, 0.5*scl);\n    float dot_size = max(0.125, 4.0*scl);\n    float gridline_width = max(0.01, 0.125*scl);\n    float outline_dist = max(0.15, 3.0*scl);\n\n    //////////////////////////////////////////////////\n    // get fragment position\n    vec2 pos = (fragCoord.xy + 0.5 - .5*iResolution.xy) * scl;\n\n    //////////////////////////////////////////////////\n    // get ray origin and direction\n    \n    float t = 0.2*iTime;\n    vec2 ro = vec2(2.5*sin(1.732*t), -2.5*sin(1.0532*t));\n\n    vec2 mouse = iMouse.xy;\n    if (iMouse.x == 0.0) {\n        mouse = 0.5*iResolution.xy;\n    }\n\n    vec2 rd = (mouse - 0.5*iResolution.xy) * scl - ro;\n\n    //////////////////////////////////////////////////\n    // start visualizing ray\n\n    float u_vis = max(0.0, dot(pos-ro, rd) / dot(rd, rd));\n\n    float ray_line_dist = length(pos - ro - u_vis*rd);\n    float ray_dot_dist = length(pos - ro);\n    \n    //////////////////////////////////////////////////\n    // set up ray hex grid traversal\n\n    // find nearest hex center to ray origin\n    vec2 ro_cell = nearestHexCell(ro);\n\n    // get the three candidate wall directions for this ray.\n    // (each one is related to a normal by scaling by\n    // hex_factor in the x direction).\n    vec2 h0 = alignNormal(vec2(0.0, 1.0), rd);\n    vec2 h1 = alignNormal(vec2(1.0, 0.5), rd);\n    vec2 h2 = alignNormal(vec2(1.0, -0.5), rd);\n\n    // instead of moving the hexagon center as we traverse the hex\n    // grid, we will translate the ray origin in the opposite\n    // direction\n    vec2 cur_cell = ro_cell;\n\n    // march along ray, one iteration per cell\n    for (int i=0; i<20; ++i) {\n\n        // after three tests, nt.xy holds the normal, nt.z holds the\n        // ray distance parameter\n        vec2 rdelta = ro - CART_FROM_HEX(cur_cell);\n        vec3 ht = rayHexIntersect(rdelta, rd, h0);\n        ht = rayMin(ht, rayHexIntersect(rdelta, rd, h1));\n        ht = rayMin(ht, rayHexIntersect(rdelta, rd, h2));\n\n        // we will always move by twice the unit normal of the\n        // intersection\n        cur_cell += 2.0 * ht.xy;\n\n        // get the ray intersection point for visualization\n        vec2 p_intersect = ro + rd*ht.z;\n        \n        // visualization\n        ray_dot_dist = min(ray_dot_dist, length(pos - p_intersect));\n\n    }\n\n    //////////////////////////////////////////////////\n    // visualization\n\n    vec2 pos_cell = nearestHexCell(pos);\n    \n    float d = abs(hexDist(pos - CART_FROM_HEX(pos_cell)));\n\n    vec3 c;\n\n    // hex color\n    if (pos_cell == ro_cell) {\n        float k = tri(7.0*d  - 2.0*iTime);\n        c = mix(vec3(0.7, 0.2, 0.5), vec3(0.2), 0.3*k);\n    } else {\n        float k = tri(7.0*d + 1.0);\n        c = mix(vec3(0.45, 0.55, 0.6), vec3(0.6), hash12(pos_cell + 14.0));\n        c = mix(c, vec3(0.8), k*0.25);\n    }\n\n    // grid lines\n    c *= smoothstep(0.0, scl, d-gridline_width);\n\n    const vec3 ray_color = vec3(1.0, 0.85, 0);\n\n    // line shadow\n    c = mix(c, vec3(0),\n            0.5*smoothstep(outline_dist, 0.0, ray_line_dist-ray_width));\n\n    // line \n    c = mix(c, ray_color,\n            smoothstep(scl, 0.0, ray_line_dist-ray_width));\n    \n    // dot shadow\n    c = mix(c, vec3(0),\n            0.5*smoothstep(outline_dist, 0.0, ray_dot_dist-dot_size));\n\n    // dot\n    c = mix(ray_color, c, smoothstep(0.0, scl, ray_dot_dist-dot_size));\n    \n    fragColor = vec4(c, 1.0);\n            \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}