{
    "Shader": {
        "info": {
            "date": "1494445982",
            "description": "Based on https://www.shadertoy.com/view/4s2cWV\nLeft side: https://twitter.com/Nosferalatu/status/862369897044516864\nRight side: Circle Intersection\nMouse drag changes the columns size!",
            "flags": 0,
            "hasliked": 0,
            "id": "ls2yWd",
            "likes": 4,
            "name": "SDF Setup 2",
            "published": 3,
            "tags": [
                "signeddistancefields"
            ],
            "usePreview": 0,
            "username": "kosmonaut",
            "viewed": 1003
        },
        "renderpass": [
            {
                "code": "//#define SD_POINT\n//else we have a box\n\n#define SHOW_ERROR\n\nvec2 point = vec2(0.5, 0.7);\n\n/*\n\nInterpolating outside of a distance field, basic 2d setup.\n\n*/\n\nfloat sdFunc(vec2 fragPos)\n{\n\n    #ifdef SD_POINT\n    \n    return length(point * iResolution.xy - fragPos) - (80. + 40.*sin(iTime*0.5));\n    \n    #endif\n    \n    float sdf_angle = 1. + iTime / 10.;\n    \n    fragPos -= point * iResolution.xy;\n    fragPos *= mat2(cos(sdf_angle),-sin(sdf_angle),sin(sdf_angle),cos(sdf_angle)); \n    vec2 d = abs(fragPos) - vec2(110.,20.);\n \treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sd = sdFunc(fragCoord);\n    \n    if(sd < 0.) \n    {\n     \tfragColor = vec4(0., 1., 1., 1.);\n        return;\n    }\n    \n    float sd_groundtruth = sd;\n    \n    float thrshld = /*iMouse.z > 0. ? iMouse.y :*/ 0.4 * iResolution.y;\n    \n    float slider = (iMouse.z > 0. ? iMouse.x : 0.5 * iResolution.x) ;\n    \n    if((fragCoord.y < thrshld && fragCoord.x > slider && fragCoord.x < slider+1.) || (fragCoord.y > thrshld && fragCoord.y < thrshld + 1.))\n    {\n         fragColor = vec4(1.,0.,0.,1.);\n           return;\n    }\n    \n    if(fragCoord.x < slider)\n    {\n    \tif(fragCoord.y < thrshld) \n    \t{\n            //Idea from David Farrell https://twitter.com/Nosferalatu/status/862369897044516864\n            \n            //x outside = fragCoord\n            \n            vec2 sampleBorder = vec2(fragCoord.x, thrshld); //x on volume\n            \n            float phi = sdFunc(sampleBorder);\n            \n            float d = 1.;\n            float grad_x = sdFunc(sampleBorder + vec2(d, 0)) - phi;\n            float grad_y = sdFunc(sampleBorder + vec2(0, d)) - phi; //in OpenGL positive Y points upwards\n            \n            vec2 grad = vec2(grad_x, grad_y);\n            \n            vec2 endpoint = sampleBorder - normalize(grad) * phi;\n            \n        \tsd = distance(endpoint, fragCoord);\n    \t}\n    }\n    else\n    {\n        if(fragCoord.y < thrshld) \n    \t{\n            \n            //Circle Intersection\n            \n            vec2 vec_to_limit = vec2(0, thrshld - fragCoord.y);\n            \n            float d = 1.;\n            vec2 p0 = vec2(fragCoord.x, thrshld);\n            vec2 p1 = vec2(fragCoord.x, thrshld + d);\n            float r0 = sdFunc(p0);\n            float r1 = sdFunc(p1);\n            \n            float h = 0.5 + (r0*r0 - r1*r1) / (2. *d*d);\n            \n            float r_i = sqrt(abs(r0*r0 - h*h*d*d));\n            \n            vec2 p2 = p0 + (p1-p0)*h;\n            \n            vec2 p3 = p2 + vec2(p1.y-p0.y, p1.x-p0.x) * r_i;\n            \n            sd = length(fragCoord - p3);\n    \t}\n    }\n    \n    #ifdef SHOW_ERROR\n    \n    //Absolute error\n    float error = abs(sd - sd_groundtruth);\n    \n    //Relative error\n    //float error = abs(1. - sd / sd_groundtruth) * 100.;\n    \n    vec4 errorvisual = vec4( error, error/10., error/40., 1.);\n    \n    fragColor = mix(errorvisual, vec4( fract(sd / max(iResolution.x, iResolution.y) * 20.)), 0.5);\n    \n    #else\n    \n    fragColor = vec4( fract(sd / max(iResolution.x, iResolution.y) * 20.) );\n    \n    #endif\n    \n    return;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}