{
    "Shader": {
        "info": {
            "date": "1568558556",
            "description": "Play with some simple kifs in the weekend.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wsc3W4",
            "likes": 55,
            "name": "CoreEngine",
            "published": 3,
            "tags": [
                "glow",
                "kifs",
                "sierpinski"
            ],
            "usePreview": 0,
            "username": "EvilRyu",
            "viewed": 1371
        },
        "renderpass": [
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.14159265359\n#define AA 2\n#define FAR 100.\n\nfloat rnd=0.;\n\nfloat hash12(vec2 p)\n{\n    p=fract(p*vec2(5.3983, 5.4427));\n    p+=dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4337);\n}\n\nmat2 rot(float t)\n{\n    float c=cos(t), s=sin(t);\n    return mat2(c,-s,s,c);\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 d=abs(p)-b;\n    return length(max(d,0.0))+min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat infi_box(vec2 p, vec2 b)\n{\n    vec2 d=abs(p)-b;\n    return length(max(d,0.0))+min(max(d.x,d.y),0.0); \n}\n\nfloat oct(vec3 p, float s)\n{\n    p=abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nvec3 kifs(vec3 p)\n{\n    float s=1.;\n    float scale=3.5;\n    for(int i=0;i<4;++i)\n    {\n        p=scale*abs(p)-(scale-1.);\n        p.xy*=rot(-0.4);\n        p.yz*=rot(0.23);   \n        s*=scale;\n     }\n    p/=s;\n    return p;\n}\n\nvec3 kifs2(vec3 p)\n{\n    float s=.7;\n    for(int i=0;i<5;++i)\n    {\n        if(p.x+p.y<0.){p.xy = -p.yx;}\n      \tif(p.x+p.z<0.){p.xz = -p.zx;}\n      \tif(p.y+p.z<0.){p.yz = -p.zy;}\n\t\tp = p*2.-1.+0.3*sin(iTime);\n        p.xy*=rot(iTime);\n       \tp.yz*=rot(iTime);\n\n    }\n    p*=pow(2.,-5.);\n    return p;\n}\n\nint obj=0;\n\nvec3 tri(vec3 p){ return abs(fract(p)-0.5);}\nfloat tri_surf(vec3 p)\n{\n    return dot(tri(p*0.5+tri(p.yxz*0.25+tri(p.xzy*0.125))), vec3(0.6666));\n}\n\n\nfloat acc0=0., acc1=0.;\n\nfloat core(vec3 p)\n{\n    vec3 q=p;\n   \tp=kifs2(p*0.5);\n    float d0=infi_box(q.xy,vec2(0.1));\n    float d1=box(p,vec3(0.05));\n    float d=d1*2.;\n    \n    q=q+vec3(0.,3.,0.);\n    float d2=infi_box(abs(q.xz)-4.,vec2(0.3));\n    \n    d=min(d,d2);\n    \n    acc0+=0.2/(0.15+abs(d));\n    acc1+=0.2/(0.15+abs(d));\n    return d;\n}\n\nfloat map(vec3 p)\n{\n    vec3 q=p;\n    p=kifs(p);\n    float d1=abs(p.y+1.5);\n    \n    obj=1;\n    \n    float d=d1;\n    d-=tri_surf(p)*0.2;\n    \n    vec3 r=q;\n    r.xz=abs(r.xz*rot(2.*iTime))-1.9;    \n    r.yz=abs(r.yz*rot(2.*iTime))-1.9;\n\n    float d3=oct(r,0.5);\n    d=min(d,d3);\n    \n    float d0=core(q);\n    if(d0<d){obj=0;d=d0;}\n\n    return d*0.8;\n}\n\nvec3 get_normal(vec3 p)\n{\n    vec2 eps=vec2(0.001,0.);\n    return normalize(vec3(map(p+eps.xyy)-map(p-eps.xyy),\n                    map(p+eps.yxy)-map(p-eps.yxy),\n                    map(p+eps.yyx)-map(p-eps.yyx)));\n}\n\n    \nfloat intersect(vec3 ro, vec3 rd)\n{\n    float t=0.1;\n    for(int i=0;i<128;++i)\n    {\n        float d=map(ro+t*rd);\n        if(obj==0)d*=rnd;\n        t+=d;\n        if(d<0.005 || t>=FAR)\n            break;\n    }\n    \n    return t;\n}\n\nvec3 firecolor(float f)\n{\n    f=f*f*(3.0-2.0*f);\n    return  min(vec3(f+.8, f*f*1.4+.1, f*f*f*.7)*f, 1.0);\n}\n\nvec3 lightcolor(float t)\n{\n    return mix(firecolor(0.4), vec3(0.,1.0,0.5)*0.5, pow(abs(t),8.));\n}\n\nfloat get_ao(vec3 p, vec3 n)\n{\n    float r=0.0, w=1.0, d;\n    for(float i=1.; i<5.0+1.1; i++)\n    {\n        d=i/5.0;\n        r+=w*(d-map(p+n*d));\n        w*=0.5;\n    }\n    return 1.0-clamp(r,0.0,1.0);\n}\n\nvec3 lighting(vec3 ro, vec3 rd, vec3 n, vec3 p)\n{\n    vec3 l1d=normalize(-p);\n    vec3 l1c=lightcolor(rd.x)*10.;\n        \n    float ao=get_ao(p,n);\n    \n    float dif=max(dot(n,l1d),0.)*ao;\n    float bac=max(dot(n,-l1d),0.)*ao;\n    float amb=clamp(0.3+0.7*n.y,0.0,1.0);\n    float spe=pow(max(dot(reflect(-l1d,n),normalize(-l1d-rd)),0.), 32.);\n   \n    map(p);\n\n    vec3 mate;\n    if(obj==0)mate=lightcolor(rd.x);\n    else mate=vec3(0.1,0.2,0.3)*0.5;\n    \n   \tvec3 lin=(l1c*(4.*dif+1.*bac)+amb*vec3(1.))*mate.xyz+4.*spe*vec3(1.);\n    \n    return lin*0.2;\n}\n\nvec3 tonemap(vec3 x) \n{\n    const float a=2.51, b=0.03, c=2.43, d=0.59, e=0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nmat3 cam(vec3 ro, vec3 ta)\n{\n    vec3 f=normalize(ta-ro);\n    vec3 r=normalize(cross(f,vec3(0.,1.,0.)));\n    vec3 u=normalize(cross(r,f));\n    return mat3(r,u,f);\n}\n\nvec3 get_reflection(vec3 ro, vec3 rd, vec3 n)\n{\n    vec3 new_rd=reflect(rd,n);\n    ro+=0.1*n;\n    \n    acc1=0.;\n    float t=0.1;\n    for(int i=0;i<20;++i)\n    {\n        float d=core(ro+t*new_rd);\n        d*=rnd; t+=d;\n        if(d<0.1 || t>=FAR)\n            break;\n    }\n    vec3 col=vec3(0);\n    if(t<FAR)\n        col=acc1*0.1*lightcolor(rd.x);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q=fragCoord/iResolution.xy;\n    vec2 p=q*2.-1.;\n    p.x*=iResolution.x/iResolution.y;\n\n    rnd=hash12(fragCoord)*0.1+0.9;\n    \n    vec3 ro=vec3(0.,-1.,10.+cos(iTime));\n    vec3 ta=vec3(0.,1.,0.);\n    \n    ro.xz*=rot(.5*iTime); \n     // debugging camera\n    float x_rot=-iMouse.x/iResolution.x*PI*2.0;\n    float y_rot=iMouse.y/iResolution.y*3.14*0.5 + PI/2.0;\n    if(iMouse.z>0.||iMouse.w>0.)\n        ro=vec3(0.,0,-3)+vec3(cos(y_rot)*cos(x_rot),cos(y_rot)*cos(x_rot),cos(y_rot)*sin(x_rot))*12.;\n    \n    vec3 tot=vec3(0.0);\n    \n    vec3 rd;\n\n#if AA>1\n    for(int m=0; m<AA; m++)\n    for(int n=0; n<AA; n++)\n    {\n\t\tvec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        p=(-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        p=(-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n        rd = cam(ro,ta)*normalize(vec3(p.xy,1.8));\n        vec3 col=vec3(0.);\n\n        float t=intersect(ro,rd);\n        if(t<FAR)\n        {\n            vec3 pos=ro+t*rd;\n            vec3 n=get_normal(pos);\n            col=lighting(ro,rd,n,pos);\n\t\t\t\n            if(obj>0)\n            {\n            float fre=0.04+(1.-0.04)*pow(1.-max(dot(n,-rd),0.),3.);\n            col+=fre*get_reflection(pos,rd,n);\n            }\n        }\n        \n      \tcol=mix(col,vec3(0.), 1.0-exp(-0.005*t*t)); \n\n        tot+=col;\n#if AA>1\n    }\n    tot/=float(AA*AA);\n    acc0/=float(AA*AA);\n#endif\n    \n    tot+=acc0*0.1*lightcolor(rd.x);\n    tot=tonemap(tot);\n    tot=pow(clamp(tot,0.,1.0),vec3(0.45));\n    tot=clamp(tot*0.5+0.5*tot*tot*1.3,0.0,1.0);\n    tot*=0.5+0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n    fragColor = vec4(tot,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}