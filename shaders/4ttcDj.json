{
    "Shader": {
        "info": {
            "date": "1702386689",
            "description": "kinda like portal from incredibles 2",
            "flags": 0,
            "hasliked": 0,
            "id": "4ttcDj",
            "likes": 9,
            "name": "incredibles 2 portal ...kinda",
            "published": 3,
            "tags": [
                "incrediblesportal"
            ],
            "usePreview": 0,
            "username": "skaven",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float freq ){\n\tfloat unit = 4.0/freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat pNoise(vec2 p, int res){\n\tfloat persistance = .5;\n\tfloat n = 0.;\n\tfloat normK = 0.;\n\tfloat f = 4.;\n\tfloat amp = 1.;\n\tint iCount = 0;\n\tfor (int i = 0; i<50; i++){\n\t\tn+=amp*noise(p, f);\n\t\tf*=2.;\n\t\tnormK+=amp;\n\t\tamp*=persistance;\n\t\tif (iCount == res) break;\n\t\tiCount++;\n\t}\n\tfloat nf = n/normK;\n\treturn nf*nf*nf*nf;\n}\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\t\n\nfloat distToCircle(vec2 uv, float radius, float phase, float ffly)\n{\n    float ng = atan(uv.y, uv.x) + phase + iTime*(0.1 + ffly);\n    float distDist = sin(ng*2.0) * cos(4.0*ng + sin(ng) - sin(ng*12.0)*0.1);// * (sin(ng*8.0))*1.5;\n\n    return abs(length(uv) - radius + distDist * 0.01) + abs(tan(ng + phase * 1.4))*0.004 * ffly;\n}\n\nfloat dToC(vec2 ngDist, float dradius)\n{\n    float ng = ngDist.x + iTime*10.0;\n    float noise = pNoise(vec2(cos(ng), sin(ng)) + vec2(0.5), 2);\n    ngDist.y += noise * 0.2 + dradius + (sin(iTime*5.171) * sin(ngDist.x*2.0)) * dradius - 0.1;\n    \n    float thick1 = 0.004;\n    float thick2 = 0.008;\n    return smoothstep(0.0, thick1, ngDist.y) - smoothstep(thick1, thick2, ngDist.y);\n}\n\n\nvec2 distoAngleDist(vec3 dir)\n{\n    vec2 dp = dir.xy/dir.z;\n    \n    float ng = atan(dp.y, dp.x);\n    float r = pNoise(vec2(cos(ng), sin(ng))+ vec2(iTime * 0.5), 1);\n    r = 0.5 + r*0.1;\n    \n    return vec2(ng, length(dp) - r); \n}\n\nfloat distToPortal(vec2 ngDist)\n{\n    return smoothstep(0.0,0.01, ngDist.y);\n}\n\nfloat aero(vec2 ngDist)\n{\n    ngDist.x += iTime*0.01;\n    float baseMask = min(1.0-max(ngDist.y*1.5,0.0),1.0) * smoothstep(0.0,0.01,ngDist.y);\n    \n    float bore = (sin(ngDist.x*4.0));\n    bore += (sin(ngDist.x*6.0+iTime*1.374));\n    bore += (sin(-ngDist.x*8.0+iTime*0.51)) * 0.1;\n    \n    //bore += sin(-ngDist.x * 3.0);\n    baseMask *= clamp(bore  *0.3 + 0.5, 0.3, 1.0);\n    //baseMask *= clamp((sin(-ngDist.x*4.0) + sin(-ngDist.x * 3.0) +sin(ngDist.x *12.0))  *0.3 + 0.5, 0.3, 1.0);\n\n    \n    return clamp(baseMask,0.0,1.0);\n}\n\nfloat lightning(vec2 ngDist, float time)\n{\n    float growth = fract(time*2.0) * 0.1;\n    \n    float ng = ngDist.x;\n    float noise = pNoise(vec2(cos(ng), sin(ng))*(6.0-growth*6.0)+ vec2(time * 0.5), 2);\n    noise += pNoise(vec2(cos(ng), sin(ng))*(4.0-growth * 4.0)+ vec2(time * 0.1), 2)*0.2;\n    \n    \n    float adist = abs(ngDist.y-noise * 0.2 - growth);\n    float diflum = min(sin(ng * 4.0 + time*1.1)+0.8, 1.0);\n    return clamp((1.0-smoothstep(0.0,0.01, adist)) * growth*10.0 * diflum,0.0,1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.y *= iResolution.y/iResolution.x;\n    \n\n    float col = 20.0;\n    for (float i = 0.0;i<1.0;i+=0.1)\n    {\n    \tcol -= smoothstep(0.0,0.002,distToCircle(uv, 0.17+i*0.01, i, 0.0));\n        col -= smoothstep(0.0,0.002,distToCircle(uv, 0.18+i*0.03, i, 1.0));\n    }\n\n    vec3 eyeSrc = normalize(vec3(uv*4.0, 1.0));\n    vec2 mouse = (iMouse.xy /iResolution.xy) * 0.8-0.4;\n    vec3 eye = rotateY(mouse.x) * rotateX(mouse.y) * eyeSrc;\n   \n    \n    vec2 ngDist = distoAngleDist(eye);\n    // Output to screen\n    fragColor = vec4(vec3(col) * vec3(0.4,0.8,1.0)*3.0, 1.0);\n    fragColor = mix(texture(iChannel1, eye), texture(iChannel0, eye), distToPortal(ngDist));\n    \n    //fragColor += vec4(lum);\n    fragColor += vec4(lightning(ngDist, iTime) + lightning(ngDist, iTime+12.37981));\n    \n    vec4 auraCol = mix(vec4(0.12,0.745,0.364,1.0), vec4(0.15,0.474,0.891,1.0), sin(iTime) *0.5+0.5);\n    fragColor += auraCol * aero(ngDist);\n    \n    float r1 = 0.0;\n     for (float i = 0.0;i<1.0;i+=0.1)\n    {\n        r1 += dToC(ngDist, i * 0.08);\n    }\n    fragColor += r1 * auraCol * 2.0;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}