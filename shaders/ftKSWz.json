{
    "Shader": {
        "info": {
            "date": "1640513411",
            "description": "A  simple demo of magnify.\nthanks IQ",
            "flags": 2,
            "hasliked": 0,
            "id": "ftKSWz",
            "likes": 2,
            "name": "A  demo of magnify",
            "published": 3,
            "tags": [
                "camera",
                "magnify",
                "whitening"
            ],
            "usePreview": 0,
            "username": "ololeecn",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Ololee\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define SCALE 1.9  // magnification times,it must greater than 1.0\n#define BETA 7.0  // whiteing fractor. it's suit for me.\n#define MAGNIFY_SIZE 1.0\n#define MIRROR_SWITCH //Mirror switch\n\n\n/*\nwhiteing the image. \nbeta must not be 1.0 or a negative number\n*/\nvoid whitening(inout vec3 col,float beta){\n   col = log(col*(beta-1.0)+1.0)/log(beta);\n}\n\n\n/*\nthanks iq for his method\nlink:  https://www.shadertoy.com/view/3ltSW2\n*/\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // range from [0,1]\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ms = iMouse.xy/iResolution.xy;  \n    // range from [-1,1]\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y; \n    float scale = 1.0/SCALE;\n   \n   // mirror   \n    #ifdef MIRROR_SWITCH\n        vec2 one_zero = vec2(1.0,0.0);\n        vec2 minusOne_zero = vec2(-1.0,1.0);\n        uv = one_zero + uv*minusOne_zero;\n        ms = one_zero + ms*minusOne_zero;\n        \n    #endif    \n    ms *=(1.0-scale);\n   vec3 col =texture(iChannel0,uv).xyz;\n   whitening(col,BETA);\n   if( iMouse.z>0.001 )\n   {\n       vec3 colScale = texture(iChannel0,scale*uv+ms).xyz;\n       whitening(colScale,BETA);\n       col = mix(colScale,col, smoothstep(0.0, 0.01, length(p-m)-MAGNIFY_SIZE));\n   }\n   \n   fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}