{
    "Shader": {
        "info": {
            "date": "1701351018",
            "description": "nimitz's fast gyroid fBm, as an alternative to Perlin noise ( I'm not really sure it is faster or easier to control ).\nBasically, replaces Perlin noise base function with gyroid + cumulated domain distortion (top).\nTurbulence: right: abs   left: 1-abs",
            "flags": 0,
            "hasliked": 0,
            "id": "dtcBRB",
            "likes": 30,
            "name": "nimitz's fast gyroid fBm",
            "published": 3,
            "tags": [
                "noise",
                "perlinnoise",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "// fast gyroid fBm from nimitz's Protean clouds: https://www.shadertoy.com/view/3l23Rh\n// ( extracted from \"Volumetric Fire\" by myth0genesis. https://shadertoy.com/view/NttBWj )\n\nbool disto;\n\nmat3 m3 = mat3( .3338,  .56034, -.71817,\n               -.87887, .32651, -.15323,\n                .15162, .69596,  .61339) * 1.93;\n\nfloat gyroidFBM3D(vec3 p) { // adapted from nimitz's fast gyroid fBm\n                            // replaces Perlin noise base function with gyroid + cumulated domain distortion\n    float d, z = 1., trk = 1.5;\n  \n    for(int i; i < 5; i++, z *= .7, trk *= 1.4, p *= m3  ) // --- fractal loop, like Perlin noise\n        disto ? p += sin( p.yzx * trk ) * .1 : p,          // scale p ~ 2^i , + *.1 distortion at scale 1.4^i\n        d += abs( dot(cos(p), sin(p.zxy)) ) * z ;          // abs(gyroÃ¯d) / 1.43^i , instead of base Perlin noise function\n                                                           // abs() = Perlin turbulence. try without.\n    return d/3.;                                           // 3 = max of dot(cos,sin)\n}\n\nvoid mainImage( out vec4 O, vec2 u ) {\n    vec2 R = iResolution.xy,\n         U = ( u+u - R ) / R.y;                            // normalized coordinates\n    \n    disto = U.y>0.;                                        // applies nimitz noise distortion only on top\n    float n = gyroidFBM3D( vec3( 2.*U, .1*iTime ) );\n\n    O = pow( vec4(max(n,0.)) , vec4(1.1,1,.9,1) );         // right: abs() cloud-like turbulence\n    if ( U.x < 0. ) O = 1.-O;                              // left: 1-abs() fire-like turbulence\n // O = abs(O);\n // O /= fwidth(O);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}