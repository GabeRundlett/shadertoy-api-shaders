{
    "Shader": {
        "info": {
            "date": "1616847095",
            "description": "Description of the problem: There's a slight vertical seam on the sphere when I'm using mipmap filtering, not present when I'm using linear filtering.\nAs per mla's comment: \"mipmap level selection using a screenspace derivative with a discontinuity\"",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndj3zR",
            "likes": 3,
            "name": "Sphere UV seam with mipmap filte",
            "published": 3,
            "tags": [
                "raycasting"
            ],
            "usePreview": 0,
            "username": "soadzoor",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define SOLVE_PROBLEM false\n\nfloat intersectSphere(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n\tvec3 rc = ray-center;\n\tfloat c = dot(rc, rc) - (radius*radius);\n\tfloat b = dot(dir, rc);\n\tfloat d = b*b - c;\n\tfloat t = -b - sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n\treturn mix(-1.0, t, st);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n    vec3 ro = vec3(-2.0, 0.0, 0.5);\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    mat3 cam = setCamera(ro, rt, 0.35);\n    vec3 rd = normalize(cam * vec3(p, -1.0));\n    \n    vec3 col = vec3(0.0);\n    \n    float fragCoordToMouse = iMouse.x - fragCoord.x;\n    bool solveProblem = fragCoordToMouse > 0.0;\n    \n    if (abs(fragCoordToMouse) < 1.0)\n    {\n        col = vec3(1.0);\n    }\n    else\n    {\n        float t = intersectSphere(ro, rd, vec3(0.0), 1.0);\n\n        vec3 hitPoint = ro + rd * t;\n\n\n        if (t > 0.0)\n        {\n            vec2 sphereUV = vec2(\n                0.5 + atan(hitPoint.z, hitPoint.x) / (2.0 * PI),\n                0.5 - asin(hitPoint.y) / PI\n            );\n\n            // Solution found here, thanks!: https://www.shadertoy.com/view/3dVSzm\n            if (solveProblem)\n            {\n                // trick from Fabrice to avoid the discontinuity at Greenwich.\n                vec2 df = fwidth(sphereUV);\n                if(df.x > 0.5)\n                {\n                    df.x = 0.0;\n                }\n\n                col = textureLod(iChannel0, sphereUV, log2(max(df.x, df.y)*1024.)).xyz;\n            }\n            else\n            {\n                col = texture(iChannel0, sphereUV).rgb;\n            }\n        }\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}