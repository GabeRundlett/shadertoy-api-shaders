{
    "Shader": {
        "info": {
            "date": "1505243956",
            "description": "Example how to efficiently render large blocks of text.\nEncoder is available on GitHub: https://github.com/knarkowicz/ShadertoyText",
            "flags": 0,
            "hasliked": 0,
            "id": "XtfyRS",
            "likes": 118,
            "name": "\"Sprite Sheet\" Text Rendering",
            "published": 3,
            "tags": [
                "example",
                "tutorial",
                "text",
                "sprite",
                "block",
                "tile",
                "encoding",
                "sheet"
            ],
            "usePreview": 1,
            "username": "knarkowicz",
            "viewed": 6283
        },
        "renderpass": [
            {
                "code": "float GlyphSDF(vec2 p, float char)\n{\n    // Convert glyph to appropriate char index in the char texture and compute distance to it\n\tp = abs(p.x - .5) > .5 || abs(p.y - .5) > .5 ? vec2(0.) : p;\n\treturn 2. * (texture(iChannel0, p / 16. + fract(vec2(char, 15. - floor(char / 16.)) / 16.)).w - 127. / 255.);\n}\n\nvoid Text(inout vec3 color, vec2 p)\n{\n\tfloat glyphRatio = 2.0;\n\tvec2 glyphScale = 6. * vec2(1., glyphRatio);\n    \n    // Compute integer cell index of the text\n\tvec2 t = floor(p / glyphScale + 1e-6);\n\n    // First we will pick v which contains 4 characters in the text based on the cell index\n    // We do it using series of if statements which return ASCII codes for a given cell index\n    // Alternatively this could be written as v = TextChars[t.x][t.y]\n\tuint v = 0u;\n\tv = t.y == 12. ? (t.x < 4. ? 1936287828u : (t.x < 8. ? 544434464u : (t.x < 12. ? 1696624225u : (t.x < 16. ? 1886216568u : (t.x < 20. ? 1746953580u : (t.x < 24. ? 1948284783u : (t.x < 28. ? 1717903471u : (t.x < 32. ? 1768122726u : (t.x < 36. ? 1819569765u : (t.x < 40. ? 1701978233u : (t.x < 44. ? 1919247470u : 0u))))))))))) : v;\n\tv = t.y == 11. ? (t.x < 4. ? 1735549292u : (t.x < 8. ? 1818370149u : (t.x < 12. ? 1936417647u : (t.x < 16. ? 543584032u : (t.x < 20. ? 1954047348u : (t.x < 24. ? 1700012078u : (t.x < 28. ? 1763734648u : (t.x < 32. ? 1852121203u : (t.x < 36. ? 1701080931u : (t.x < 40. ? 1935745124u : (t.x < 44. ? 1931501856u : 29797u))))))))))) : v;\n\tv = t.y == 10. ? (t.x < 4. ? 1965057647u : (t.x < 8. ? 1937010281u : (t.x < 12. ? 540092448u : (t.x < 16. ? 1918986339u : (t.x < 20. ? 1954112047u : (t.x < 24. ? 539828325u : (t.x < 28. ? 1751326772u : (t.x < 32. ? 796095073u : (t.x < 36. ? 1953393013u : (t.x < 40. ? 1310731817u : (t.x < 44. ? 544503909u : 0u))))))))))) : v;\n\tv = t.y == 9. ? (t.x < 4. ? 1701995379u : (t.x < 8. ? 1663069797u : (t.x < 12. ? 1685221231u : (t.x < 16. ? 1918967923u : (t.x < 20. ? 1868767333u : (t.x < 24. ? 1919252078u : (t.x < 28. ? 543450484u : (t.x < 32. ? 1948282740u : (t.x < 36. ? 543517801u : (t.x < 40. ? 1629512809u : (t.x < 44. ? 2122862u : 0u))))))))))) : v;\n\tv = t.y == 8. ? (t.x < 4. ? 1918986339u : (t.x < 8. ? 544434464u : (t.x < 12. ? 1868784996u : (t.x < 16. ? 778331492u : 0u)))) : v;\n\tv = t.y == 7. ? 0u : v;\n\tv = t.y == 6. ? (t.x < 4. ? 1853321028u : (t.x < 8. ? 1701079411u : (t.x < 12. ? 544434464u : (t.x < 16. ? 1952540788u : (t.x < 20. ? 1702257952u : (t.x < 24. ? 1730181490u : (t.x < 28. ? 1752201580u : (t.x < 32. ? 1937075488u : (t.x < 36. ? 1700929652u : (t.x < 40. ? 1701344288u : (t.x < 44. ? 1835103008u : 101u))))))))))) : v;\n\tv = t.y == 5. ? (t.x < 4. ? 1702521203u : (t.x < 8. ? 1969365036u : (t.x < 12. ? 1852776564u : (t.x < 16. ? 1701344288u : (t.x < 20. ? 1752461088u : (t.x < 24. ? 1746956901u : (t.x < 28. ? 543452769u : (t.x < 32. ? 1730176375u : (t.x < 36. ? 1713402981u : (t.x < 40. ? 544502625u : 0u)))))))))) : v;\n\tv = t.y == 4. ? (t.x < 4. ? 1886220131u : (t.x < 8. ? 1952541801u : (t.x < 12. ? 544108393u : (t.x < 16. ? 1701669236u : (t.x < 20. ? 1851859059u : (t.x < 24. ? 1919361124u : (t.x < 28. ? 544498021u : (t.x < 32. ? 1953396082u : (t.x < 36. ? 6647145u : 0u))))))))) : v;\n\tv = t.y == 3. ? (t.x < 4. ? 1718773104u : (t.x < 8. ? 1634562671u : (t.x < 12. ? 543515502u : (t.x < 16. ? 1852404520u : (t.x < 20. ? 543517799u : (t.x < 24. ? 544761204u : (t.x < 28. ? 1668572518u : (t.x < 32. ? 1768959848u : (t.x < 36. ? 694969720u : (t.x < 40. ? 46u : 0u)))))))))) : v;\n\tv = t.y == 2. ? 0u : v;\n\tv = t.y == 1. ? (t.x < 4. ? 1868787269u : (t.x < 8. ? 544367972u : (t.x < 12. ? 1629516649u : (t.x < 16. ? 1818845558u : (t.x < 20. ? 1701601889u : (t.x < 24. ? 544108320u : (t.x < 28. ? 1215588679u : (t.x < 32. ? 3826293u : 0u)))))))) : v;\n\tv = t.y == 0. ? (t.x < 4. ? 1886680168u : (t.x < 8. ? 791624307u : (t.x < 12. ? 1752459623u : (t.x < 16. ? 1663984245u : (t.x < 20. ? 1798270319u : (t.x < 24. ? 1802658158u : (t.x < 28. ? 1667856239u : (t.x < 32. ? 1750282106u : (t.x < 36. ? 1919247457u : (t.x < 40. ? 1417244532u : (t.x < 44. ? 7632997u : 0u))))))))))) : v;\n\tv = t.x >= 0. && t.x < 48. ? v : 0u;\n\n    // Next we pick one of those 4 characters in the selected uint\n\tfloat char = float((v >> uint(8. * t.x)) & 255u);\n\n    // Compute [0;1] position in the current cell\n\tvec2 posInCell = (p - t * glyphScale) / glyphScale;\n\tposInCell.x = (posInCell.x - .5) / glyphRatio + .5;\n\n\tfloat sdf = GlyphSDF(posInCell, char);\n\tif (char != 0.)\n\t{\n\t\tcolor = mix(vec3(.2), color, smoothstep(-.04, +.04, sdf));\n\t}\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 p = 2. * uv - 1.;\n\tp.x *= iResolution.x / iResolution.y;\n\tp = p * 100. - vec2(-150, -78);\n\n\tvec3 color = vec3(mix(1., .5, smoothstep(0., 1., abs(.5 - uv.y))));\n\tText(color, p);\n\tfragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}