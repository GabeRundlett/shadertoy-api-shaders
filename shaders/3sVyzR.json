{
    "Shader": {
        "info": {
            "date": "1602123951",
            "description": "cielo estrellado",
            "flags": 0,
            "hasliked": 0,
            "id": "3sVyzR",
            "likes": 0,
            "name": "cielo estrellado",
            "published": 3,
            "tags": [
                "cieloestrellado"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 150.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp;\n    res = vec3(9999.0, -1.0,-1.0);\n\n\t\n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 30.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared frente\n    float planeDist6 = p.z+40.0;  //pared atras\n    \n\n    res =opU3(res, vec3(planeDist1,0.0,MATERIAL_NO)); //inf\n    res =opU3(res, vec3(planeDist2,-1.0,7.0)); \n    \n    \n    p.y=p.y-5.0;\n\n    \n\t    \n    vec3 q1=p-vec3(0.0,0.0,12.0);\n    float cx1=40.0;\n    float cy1=11.0;\n    float cz1=40.00;\n    q1.z = mod(q1.z+0.5*cz1,cz1)-0.5*cz1;\n    q1.x = mod(q1.x+0.5*cx1,cx1)-0.5*cx1;\n    \n    \n    //columnas\n    float sdb3= sdBox(q1-vec3(0.0,-3.0,0.0), vec3(5.0,2.0,5.0));\n    float sdb4= sdBox(q1-vec3(0.0,10.0,0.0), vec3(2.0,15.0,2.0));\n    res =opU3(res, vec3(sdb3,100.0,-1.0));\n    res =opU3(res, vec3(sdb4,100.0,-1.0));\n    \n    \n\tvec3 q=p;\n    float cx=20.0;\n    float cy=11.0;\n    float cz=35.00;\n    q.z = mod(q.z+0.5*cz,cz)-0.5*cz;\n    q.x = mod(q.x+0.5*cx,cx)-0.5*cx;\n    p=q;\n\t\n    \n    //suelo\n    p= rotate_x(p-vec3(0.0,-7.95,0.0), radians(90.0));\n    float sdh1G= sdHexPrism(p- vec3(0.0,0.0,0.0), vec2(6.0,3.0) );\n    float sdh2G= sdHexPrism(p- vec3(0.0,12.0,0.0), vec2(6.0,3.0) );\n    float sdb1G= sdBox(p-vec3(0.0,6.0,0.0), vec3(7.0,6.0,3.0) );\n    \n    float sdh1C= sdHexPrism(p- vec3(0.0,0.0,0.0), vec2(5.2,3.00) );\n    float sdh2C= sdHexPrism(p- vec3(0.0,12.0,0.0), vec2(5.2,3.00) );\n    float sdb1C= sdBox(p-vec3(0.0,6.0,0.0), vec3(6.0,6.0,3.00) );\n\t\n    float sdcy1= sdCylinderXY(p-vec3(-3.0,10.0,0.0), vec2(1.0,3.00)  );\n    float sdcy2= sdCylinderXY(p-vec3( 3.0,10.0,0.0), vec2(1.0,3.00)  );\n    float sdcy3= sdCylinderXY(p-vec3(-3.0,3.0,0.0), vec2(1.0,3.00)  );\n    float sdcy4= sdCylinderXY(p-vec3( 3.0,3.0,0.0), vec2(1.0,3.00)  );\n    \n        \n        \n\tres =opU3(res, vec3(sdh1G,1.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdh2G,1.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdb1G,1.0,MATERIAL_NO));\n    \n    res =opU3(res, vec3(sdh1C,2.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdh2C,2.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdb1C,2.0,MATERIAL_NO));\n    \n    res =opU3(res, vec3(sdcy1,0.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdcy2,0.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdcy3,0.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdcy4,0.0,MATERIAL_NO));\n    \n    \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n       \n        \n        if(dO>MAX_DIST )\n        {\t\n            mObj.dist = -1.0;\n    \t\tmObj.id_color = -1.0;\n    \t\tmObj.marchCount=marchCount;\n    \t\tmObj.id_material=-1.0;\n            return -1.0;\n        }\n        \n        if (abs(dS.x)<MIN_DIST) \n        { break;  }\n            \n            \n        dO += dS.x;\n        marchCount++;\n        \n        \n        \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//-------------------------------\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n}\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 64.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    \n    vec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\n\n///---------------------------------------\nfloat starPattern(vec2 p)\n{\n\treturn 0.1 / (abs(cos(p.x)) + 0.01) * 0.1 / (abs(sin(p.y)) + 0.01) * abs(sin(p.x)) * abs(cos(p.y));\n}\n\nvec3 stars(vec2 p)\n{\n\tp -= 0.5;\n\n\tfloat a = starPattern(rotatev2(p * 26.0, 0.1)) * max(0.0, 1.3 + cos(p.x + iTime)) +\n\t\tstarPattern(rotatev2(p * 50.0, 0.2)) * max(0.0, 1.2 + cos(p.x * 0.4 + iTime * 2.0));\n\n\treturn vec3(a * 0.1 * (1.0 + (2.0 + sin(iTime * 30.0)) * 0.2));\n}\n\n\nvec3 starsv2(vec2 p)\n{\n\tp -= 0.5;\n\n\tfloat a = starPattern(rotatev2(p * 26.0, 0.1)) * max(0.0, 1.3 + cos(p.x )) +\n\t\tstarPattern(rotatev2(p * 50.0, 0.2)) * max(0.0, 1.2 + cos(p.x * 0.4 +  2.0));\n\n\treturn vec3(a * 0.10 );\n}\n\n\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if (id_material==7.0)\n    { \n        \n     vec2 uv=p.xz;\n     uv*=10.5;\n     vec3 st1= starsv2(uv)*vec3(0.5,0.5,1.5);\n     return st1+vec3(0.5,0.5,1.5);\n    }   \n    \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));\n        colobj=coltex;\n\t}\n\n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t;\n    //t=mod(iTime*1.0,360.0);\n    //itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(0.0, 15.0, 0.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n     mObj.uv=uv;\n    float th = iTime * 0.2;\n    \n    vec3 ro = vec3(2.5*cos(th),  6.0,t*0.5+ 2.5*sin(th));\n    vec3 camFwd = normalize(vec3(0,5.0,0.0)+ro);\n    camFwd= rotate_z(camFwd, radians(iTime*12.0));\n    \n    vec3 camRight = normalize(cross(camFwd, vec3(0,1,0)));\n    vec3 camUp = cross(camRight, camFwd);\n    float fov = 0.5;\n    vec3 rd = (camFwd + fov * (uv.x * camRight + uv.y * camUp));\n    \n    rd = normalize(rd);\n    \n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\n\n///Gracias a SHane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\nfloat m;\nif (i==-2 ) {return mObj.color; }       \nif (i==0 ) {return vec3(0,0,0)/255.0; }\nif (i==1 ) {return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) {return vec3(255,0,0)/255.0; }\n\n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}