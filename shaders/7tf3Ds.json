{
    "Shader": {
        "info": {
            "date": "1697556625",
            "description": "Overlay a complex one-dimensional and real two-dimensional projective map where the two maps agree on the unit circle in the complex plane. Use keys 1 and 2 to see the maps separately.",
            "flags": 16,
            "hasliked": 0,
            "id": "7tf3Ds",
            "likes": 11,
            "name": "Real and Complex Projective Maps",
            "published": 3,
            "tags": [
                "complex",
                "projective",
                "homography",
                "real",
                "collineation"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "// Real and Complex Projective Maps, mla, 2023\n//\n// Overlay a complex one-dimensional and real two-dimensional projective map\n// where the two maps agree on the unit circle in the complex plane. The maps\n// are generated from the red, blue and green points on the circle and their\n// projections to the real line.\n//\n// Controls:\n//\n// <mouse>: move blue and green points on the circle\n// '1': hide real map\n// '2': hide complex map\n// 'd': don't highlight unit disc\n//\n// A one dimensional (real or complex) projective map can be defined by \n// giving three pairs of corresponding points (see rproject2()), \n// and a two dimensional (real) map by giving four pairs.\n//\n// Take three points on the unit circle (in the complex plane) \n// and stereographically map them to the real line, where they\n// can be paired with the points 0,1,∞ to define a map on the real\n// line. This map can then be extended to a Mobius transformation \n// of the whole complex plane, that leaves the real line\n// invariant, and so also leaves the unit circle invariant under inverse\n// stereographic projection.\n//\n// Alternatively, -1 on the real line can be mapped back to the circle\n// and used with the original three points to define a 2-dimensional (real) \n// projective map that also leaves the unit circle invariant (and in fact\n// is the same map as the first when restricted to the unit circle).\n//\n// Anyway, the result is that we have two projective maps, a one-dimensional\n// complex map, and a two-dimensional real map, that agree on the unit\n// circle, and here they are shown overlaid, together with the generating\n// circle points and their projections (the yellow point is the one mapped\n// to -1).\n\n// Project from (0,1) to y = 0 plane\n// We could just use an inversion (for both ways)\n// Return homogeneous coordinates\nvec2 stereographic(vec2 z) {\n  return vec2(z.x,1.0-z.y);\n}\n\n// Inverse projection from y = 0 (as a homogeneous coordinate) to unit sphere\n// with (0,1) as projection point.\nvec2 istereographic(vec2 z) {\n  if (z.y == 0.0) return vec2(0,1);\n  // |k(x,0)+(1-k)(0,1)| = |kx,1-k| = 1 => k²x²+1-2k+k² = 1 => k(x²+1) = 2\n  float x = z.x/z.y;\n  float k = 2.0/(x*x+1.0);\n  return vec2(k*x,1.0-k);\n}\n\n// Find a projective mapping taking p0,p1,p2,p4 to\n// triangle of reference and unit point, ie:\n// p0 -> (1,0,0), p1 -> (0,1,0), p2 -> (0,0,1), p3 -> (1,1,1)\n// No three points collinear.\nmat3 rproject(vec3 p0, vec3 p1, vec3 p2, vec3 p3) {\n  // Just an inverse for the first three points\n  // (the triangle of reference). No inverse if collinear.\n  mat3 m = inverse(mat3(p0,p1,p2)); // column major!\n  vec3 p3a = m*p3;\n  // Then scale each row so the unit point (1,1,1) is correct\n  m = transpose(m);\n  // zero components here only if collinear\n  m[0] /= p3a[0];\n  m[1] /= p3a[1];\n  m[2] /= p3a[2];\n  m = transpose(m);\n  return m;\n}\n\n// Return 2x2 matrix that maps p0,p1,p2 to (1,0),(0,1) and (1,1)\nmat2 rproject2(vec2 p0, vec2 p1, vec2 p2) {\n  mat2 m = inverse(mat2(p0,p1)); // column major!\n  vec2 p2a = m*p2;\n  // Then scale each row so the unit point (1,1) is correct\n  m = transpose(m);\n  // zero components here only if not collinear\n  m[0] /= p2a[0];\n  m[1] /= p2a[1];\n  m = transpose(m);\n  return m;\n}\n\nvec2 circle(float t) {\n  // Origin at north pole is convenient\n  return vec2(sin(t),cos(t));\n}\n\n// Screen coords to P2 coords\nvec2 map(vec2 p) {\n  return (2.0*p - iResolution.xy) / iResolution.y;\n}\n\n// Invert unit circle to upper half plane\n// Centre of inversion (0,-1), r² = 2\nvec2 cayley(vec2 z) {\n  z -= vec2(0,1);\n  z *= 2.0/dot(z,z);\n  z += vec2(0,1);\n  return z;\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n  if (a == b) return 1e8;\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  return length(p-b*h);\n}\n\n// color = point(color,z,p,vec3(1,0,0));\nvec3 point(vec3 color, vec2 z, vec2 p, vec3 pcolor, float px) {\n  z -= p;\n  color *= 0.4+0.6*smoothstep(0.0,px,length(z)-0.03);\n  color = mix(pcolor,color,0.4+0.6*smoothstep(0.0,px,length(z)-0.02));\n  return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 z = 1.1*map(fragCoord.xy);\n  vec2 mouse = vec2(1,0.5); // Identity\n  if (iMouse.x > 0.0) mouse = map(iMouse.xy);\n  float a = 0.0;\n  a = 0.2*iTime;\n  float b = PI*mouse.x;\n  float c = PI*mouse.y;\n  vec2 p = circle(a);\n  vec2 q = circle(b);\n  vec2 r = circle(c);\n  // p1 etc. are 1d homogeneous\n  vec2 p1 = stereographic(p);\n  vec2 q1 = stereographic(q);\n  vec2 r1 = stereographic(r);\n  // h is homography on (real) line: p1,q1,r1,=> (1,0),(0,1),(1,1)\n  // and extends to the complex plane, with the real axis preserved\n  mat2 h = rproject2(p1,q1,r1);\n  // The fourth point, parameter -1\n  vec2 s1 = inverse(h)*vec2(1,-1); // On the line\n  vec2 s = istereographic(s1);     // On the circle\n  // Now p,q,r,s are base points for collineation\n  // m takes p,q,r,s to points (1,0,0),(0,1,0),(0,0,1),(1,1,1)\n  mat3 m = rproject(vec3(p,1),vec3(q,1),vec3(r,1),vec3(s,1));\n\n  // n takes compass points to unit points\n  vec3 p0 = vec3(0,1,1);  // = istereographic(vec2(1,0));\n  vec3 q0 = vec3(0,-1,1); // = istereographic(vec2(0,1));\n  vec3 r0 = vec3(1,0,1);  // = istereographic(vec2(1,1));\n  vec3 s0 = vec3(-1,0,1); // = istereographic(vec2(1,-1));\n  mat3 n = rproject(p0,q0,r0,s0); // n is a constant transformation\n\n  // combine, since the four point pairs are those of a homography on the circle,\n  // this results in a transformation that leaves the unit circle invariant.\n  m = inverse(n)*m;\n\n  vec3 color = vec3(0);\n  int k = 0;\n  if (!key(CHAR_0+1)) {\n    vec3 p = m*vec3(z,1);\n    vec2 w = p.xy/p.z;;\n    color += texture(iChannel0,0.5*w+0.5).xyz;\n    k++;\n  }\n  if (!key(CHAR_0+2)) {\n    // Map to half plane & apply a real parameter Mobius transformation\n    // (so preserving the real axis).\n    vec2 w = cayley(z);\n    {\n      float a = h[0][0];\n      float b = h[1][0];\n      float c = h[0][1];\n      float d = h[1][1];\n      // Negative discriminant means inside/outside are flipped.\n      //assert(a*d-b*c > 0.0);\n      w = cdiv(a*w+vec2(b,0),c*w+vec2(d,0));\n    }\n    // Back to unit circle\n    w = cayley(w);\n    color += texture(iChannel0,0.5*w+0.5).xyz;\n    k++;\n  }\n  if (k == 0) color = vec3(1,1,0.5);\n  else if (k > 1) color /= float(k);\n  if (!key(CHAR_D) && length(z) > 1.0) color *= 0.5;\n\n  float px = 1.2*fwidth(z.x);\n  float d = 1e8;\n  d = min(d,abs(length(z)-1.0));\n  d = min(d,line(z,vec2(0,1),p));\n  d = min(d,line(z,vec2(0,1),q));\n  d = min(d,line(z,vec2(0,1),r));\n  d = min(d,line(z,vec2(0,1),s));\n  d = min(d,abs(z.y));\n  color *= 0.4+0.6*smoothstep(0.0,px,d-0.005);\n\n  color = point(color,z,vec2(0,1),vec3(1),px);\n  color = point(color,z,p,vec3(1,0,0),px);\n  color = point(color,z,vec2(p1.x/p1.y,0),vec3(1,0,0),px);\n  color = point(color,z,q,vec3(0,1,0),px);\n  color = point(color,z,vec2(q1.x/q1.y,0),vec3(0,1,0),px);\n  color = point(color,z,r,vec3(0,0,1),px);\n  color = point(color,z,vec2(r1.x/r1.y,0),vec3(0,0,1),px);\n  color = point(color,z,s,vec3(1,1,0),px);\n  color = point(color,z,vec2(s1.x/s1.y,0),vec3(1,1,0),px);\n\n  color = pow(color,vec3(0.4545));\n  if (alert) color.r = 1.0;\n  fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.14159265359;\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nvec2 cmul(vec2 z1, vec2 z2) {\n  return mat2(z1.x,z1.y,-z1.y,z1.x)*z2;\n}\n\nvec2 cinv(vec2 z) {\n  return vec2(z.x,-z.y)/dot(z,z);\n}\n\nvec2 cdiv(vec2 z1, vec2 z2) {\n  return cmul(z1,cinv(z2));\n}\n\nconst int CHAR_0 = 48;\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\nconst int CHAR_D = 68;\n\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}