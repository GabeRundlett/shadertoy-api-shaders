{
    "Shader": {
        "info": {
            "date": "1702078431",
            "description": "This has a life algorithm but is tainted by also allowing it to migrate to \"greener\" pixel pastures.",
            "flags": 32,
            "hasliked": 0,
            "id": "mslyzj",
            "likes": 3,
            "name": "Blue Lichen 4",
            "published": 3,
            "tags": [
                "2d",
                "colors",
                "automata",
                "life",
                "cellular",
                "screensaver",
                "colours",
                "lichen",
                "amoeba"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "/* IMAGE */\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n#define tex3(pos) texture(iChannel3, pos).x\n\n#define amoeba(pos)  texture(iChannel0, pos)\n#define habitat(pos) texture(iChannel1, pos)\n#define bufferC(pos) texture(iChannel2, pos)\n#define therain(pos) texture(iChannel3, pos)\n/*\nchannels:\nBuffer A - Cells states\nBuffer B - background trails\nBuffer C - density mask ( used to fill blanks mid-game)\n*/\nvec4 sand(in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec4 part = texture(iChannel3,uv);\n\tfloat c = step(0.1,part.x);\n\tvec3 col=vec3(1.,.9,.8)*c*(1.-abs(uv.x-.5));\n    vec4 fragColor = vec4(col,1.);\n    return fragColor;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float rain = therain(uv).x*0.001575;\n    float bugpiss = amoeba(uv).y * 1.5;\n    float bug = amoeba(uv).x*1.;\n    float vege = habitat(uv).x;\n    float red =   rain + bug*1.95  + vege*0.002 + bugpiss *0.125;\n    float green = rain + vege* 0.91 + bug*0.1  + bugpiss*0.0625;\n    float blue = rain*1.3 + vege*0.13 + rain  - bugpiss  *0.0625 + bug*0.02;\n\n  \n    fragColor = vec4(red,green,blue,1.);// + therain(uv)*0.75;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* AMOEBA/LIFE */\n#define tex(pos) texture(iChannel0, pos).x\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n#define tex3(pos) texture(iChannel3, pos).z\n#define R iResolution.xy\n\n#define webcam(pos) texture(iChannel3, pos)\n\n#define amoeba(pos)  texture(iChannel0, pos)\n#define habitat(pos) texture(iChannel1, pos)\n#define bufferC(pos) texture(iChannel2, pos)\n#define therain(pos) texture(iChannel3, pos)\n/*float checkPixel(float col, float value) // mapping function\n{\n    if (value >= 0.90001) {\n        return col + value;\n    } else {\n        return 0.;\n    }\n}*/\nbool isHerbivore(vec2 uv) {\n    if (habitat(uv).x > 0.151) { return true; } else { return false; }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 muv = iMouse.xy/iResolution.xy;\n    vec3 p = vec3(vec2(1.)/iResolution.xy, 0.);\n    vec4 cam = webcam(uv);\n    float brightest = 0.;\n    float veges = tex1(uv);\n    float col = tex0(uv);\n    float D = tex3(uv);\n    vec4 colour = vec4(webcam(uv).r*1.1, 0.1, webcam(uv).r, 0.);\n\n    if(iFrame < 2 && length(vec2(0.5,0.5) - uv.xy) < 0.093) {\n        if (rand(uv) > 0.959) {\n            fragColor = vec4(1.0, 0.,0.,0.);\n            return;\n        } \n    } else {\n        colour = amoeba(uv);\n    }\n   // if (cam.x > 0.015) { fragColor = vec4(0.); return; }\n\n    int n = 0; // game of life logics\n    float amoeba = 0.; // amoeba logic\n    float onepix = p.x;\n    float twopix = onepix * 2.;\n\n    vec2 lup   = vec2(uv.x-p.x, uv.y-p.y);\n    vec2 ldown = vec2(uv.x-p.x, uv.y+p.y);\n    vec2 rup   = vec2(uv.x+p.x, uv.y-p.y);\n    vec2 rdown = vec2(uv.x+p.x, uv.y+p.y);\n\n    vec2 left = vec2(uv.x+p.x, uv.y);\n    vec2 right= vec2(uv.x-p.x, uv.y);\n    vec2 up   = vec2(uv.x, uv.y-p.y);\n    vec2 down = vec2(uv.x, uv.y+p.y);\n\n    // count neighbours\n    n += int(tex(lup));\n    n += int(tex(ldown));\n    n += int(tex(rup));\n    n += int(tex(rdown));\n\n    n += int(tex(left));\n    n += int(tex(right));\n    n += int(tex(up));\n    n += int(tex(down));\n    \n    if (habitat(uv).x > 0.1) colour.y -= 0.0625; // if the forest grows, it consumes the excrement\n\n    //if(col > 0.1 && colour.y == 0.){\n    if(col > 0.1 ){\n       if( n == 3) col += 1.; // rebirth\n    }\n    else if(col > .0991 && n > 5) { // death \n      // col = 0.; // overcrowd death\n       colour.y *= 1.1;// add to the cemetry\n     } \n   //  if (abs(col)>100.65)  { col = 0.; } \n       \n    // if the cell at 180 degrees around from herbi is not better move here\n    // if to the left, theh check 2 pixels to the left\n\n    if (isHerbivore(lup)) { // diagonal down\n      if(veges > tex1(vec2(uv.x - twopix, uv.y - twopix))) {\n          col -= tex1(vec2(uv.x - twopix, uv.y - twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(ldown)) { // diagonal down\n      if(veges > tex1(vec2(uv.x - twopix, uv.y + twopix))) {\n          col -= tex1(vec2(uv.x - twopix, uv.y + twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(rup)) { // diagonal up \n      if(veges > tex1(vec2(uv.x + twopix, uv.y - twopix))) {\n          col += tex1(vec2(uv.x + twopix, uv.y - twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(rdown)) { // diagonal up \n      if(veges > tex1(vec2(uv.x + twopix, uv.y - twopix))) {\n          col += tex1(vec2(uv.x + twopix, uv.y - twopix));\n      } else { col = 0.; }\n    }\n\n    if (isHerbivore(left)) { // left\n      if(veges > tex1(vec2(uv.x - twopix, uv.y))) {\n         col += tex1(vec2(uv.x - twopix, uv.y));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(right)) { // right\n      if(veges > tex1(vec2(uv.x + twopix, uv.y))) {\n          col += tex1(vec2(uv.x + twopix, uv.y));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(up)) { // up\n      if(veges > tex1(vec2(uv.x, uv.y - twopix))) {\n          col += tex1(vec2(uv.x, uv.y - twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(down)) { // down\n      if(veges > tex1(vec2(uv.x, uv.y + twopix))) {\n          col += tex1(vec2(uv.x, uv.y + twopix));\n      } else { col = 0.; }\n    }\n    \n    fragColor = vec4(col, amoeba(uv).y, 0., 0.);\n  \n    if ((iMouse.z > 0. && length(iMouse.xy - fragCoord.xy) < 64.) ) {\n        float r = rand(uv);\n        if (r < 0.1) {\n         \tfragColor = vec4(rand(uv),0.,0,0.);\n        } else {\n          \tfragColor = vec4(1.,0.,0,0.);\n        }\n        fragColor.w = .1*(fragColor.x + R.x * fragColor.y + dot(iDate,vec4(1)));\n        return;\n    }\n\n    fragColor = colour;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n/* HABITAT */\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos)\n#define tex3(pos) texture(iChannel3, pos).z\n\n#define amoeba(pos)  texture(iChannel0, pos)\n#define habitat(pos) texture(iChannel1, pos)\n#define bufferC(pos) texture(iChannel2, pos)\n#define therain(pos) texture(iChannel3, pos)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float A = tex0(uv);\n    vec4  B = tex1(uv);\n    float D = tex3(uv);\n\n    vec4 veges = vec4(0.);\n    vec4 herbivore = vec4(0.);\n    vec4 colour = habitat(uv);// + vec4(0., amoeba(uv).r*1.1, 0., 0.);\n    vec3 p = vec3(vec2(1.)/iResolution.xy, 0.);\n\n    if (A > 0.) {\n        colour = vec4(0.);\n        return;\n    }\n    if(iFrame < 2 ) {\n        if (rand(uv) + uv.y*0.5 > 0.1) {\n           // fragColor = vec4(rand(uv) * uv.y*0.79, 0.,0.,0.);\n            fragColor = vec4(uv.y*0.5, 0.,0.,0.);\n            return;\n        }\n    }\n    \n    //B-=A*1.8; // herb gets eaten by herivore\n    \n    if ((iMouse.z > 0. && length(iMouse.xy - fragCoord.xy) < 128.)) {\n        if (length(iMouse.xy - uv.xy) < 0.1) {    \n           fragColor += vec4(1., 0., 0., 0.) ; ///,0.1,uv);\n        } else {\n            fragColor += vec4(0.005,0.,0.,0.) ; \n        }\n       return;\n    }\n    \n  /*  if(iFrame < 5 && length(vec2(0.5,0.5) - uv.xy) < 0.081) // fill blank space with cells\n    {\n        if (rand(uv) > 0.9) {\n            fragColor = vec4(rand(uv)*uv.y);\n            return;\n        } \n    }*/\n\n   /* veges += amoeba(vec2(uv.x-p.x, uv.y-p.y)); // left up\n    veges += habitat(vec2(uv.x-p.x, uv.y+p.y)); // left down\n    veges += habitat(vec2(uv.x+p.x, uv.y-p.y)); // right up \n    veges += habitat(vec2(uv.x+p.x, uv.y+p.y)); // rigth down\n    veges += amoeba(vec2(uv.x+p.x, uv.y)); // right\n    veges += habitat(vec2(uv.x-p.x, uv.y)); // left \n    veges += habitat(vec2(uv.x, uv.y-p.y)); // up\n    veges += habitat(vec2(uv.x, uv.y+p.y)); // down   */\n\n    \n    // if i recall correct i was trying to make analog / floating point life\n    herbivore += amoeba(vec2(uv.x-p.x, uv.y-p.y)); // left up\n    herbivore += amoeba(vec2(uv.x-p.x, uv.y+p.y)); // left down\n    herbivore += amoeba(vec2(uv.x+p.x, uv.y-p.y)); // right up \n    herbivore += amoeba(vec2(uv.x+p.x, uv.y+p.y)); // rigth down\n    herbivore += amoeba(vec2(uv.x+p.x, uv.y)); // right\n    herbivore += amoeba(vec2(uv.x-p.x, uv.y)); // left \n    herbivore += amoeba(vec2(uv.x, uv.y-p.y)); // up\n    herbivore += amoeba(vec2(uv.x, uv.y+p.y)); // down\n   \n    veges += amoeba(vec2(uv.x-p.x, uv.y-p.y)); // left up\n    veges += habitat(vec2(uv.x-p.x, uv.y+p.y)); // left down\n    veges += habitat(vec2(uv.x+p.x, uv.y-p.y)); // right up \n    veges += habitat(vec2(uv.x+p.x, uv.y+p.y)); // rigth down\n    veges += habitat(vec2(uv.x+p.x, uv.y)); // right\n    veges += amoeba(vec2(uv.x-p.x, uv.y)); // left \n    veges += habitat(vec2(uv.x, uv.y-p.y)); // up\n    veges += habitat(vec2(uv.x, uv.y+p.y)); // down\n   \n    \n    float e = veges.x; // convenience\n    float h = herbivore.x; // convenience\n    if (h > 0.1) { fragColor = vec4(0.); return;}\n    \n    colour += abs(veges.x)*0.000951951 * D; // absorb the rain?\n    // growth function is clamped at 5\n    if (e > .999999998751001 && e < 5.) { colour += vec4(e*0.051, 0., 0., 0.); }\n    else { colour = vec4(0.); } \n    colour = abs(colour);\n  //  B = clamp(B, 0., 10.);\n    \n    if (e > 3.9905 || h > 120.91) colour = vec4(0.);\n    \n\n\n    fragColor = abs(colour);\n   // fragColor = colour;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\nfloat rand(vec2 p)\n{\n   return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\nfloat map(float v, float a1, float a2, float b1, float b2) // mapping function\n{\n    return (v-a1)/(a2-a1)*(b2-b1)+b1;\n}\nuint Hash(uint s)\n{\n    s ^= 2747636419u;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    return s;\n}\nuint seed2 = uint(0);\nfloat r(uint s)  // random float\n{\n    return float(Hash(s)) / 4294967295.0;\n}\nfloat r2(vec2 p) // random float for vec2\n{\n    if(p == vec2(0.)) return r(uint(p.x*100.));\n    else return fract(sin(dot(p, vec2(12.9898, 78.233))) * (43758.5453+float(seed2)));\n}\nfloat pixelNoise(vec2 uv) // uper left quadrant\n{\n    return r2(round(uv));\n}\n\nfloat smoothNoise(vec2 uv)\n{\n    float BL = pixelNoise(floor(uv)); // take samples of four surrounding squares\n    float TR = pixelNoise(ceil(uv));\n    float BR = pixelNoise(vec2(ceil(uv.x), floor(uv.y)));\n    float TL = pixelNoise(vec2(floor(uv.x), ceil(uv.y)));\n    \n    uv = fract(uv); // make uv fit in 0-1 to use it in interpolation\n    uv = smoothstep(0., 1., uv); // make interpolation smooth (try commenting it out, it will be uglier)\n    \n    return mix(mix(BL, BR, uv.x), mix(TL, TR, uv.x), uv.y); // interpolate between surrounding colors\n}\nfloat roughNoise1(vec2 uv, int depth, float roughness, uint s)\n{\n    float col = smoothNoise(uv);\n    float basis = 1./(roughness);\n    \n    for(int i = 1; i < depth; i++) //tweaking initial color by multiplying it by smaller scale noise\n    {\n        uv += vec2(4.3487*r(s), 5.754*r(s)); //move uv to avoid radial repetition effect\n        col *= map(smoothNoise(uv*pow(2., float(i))), 0., 1., 1.-1./pow(basis, float(i)), 1.+1./pow(basis, float(i)));\n    }\n\n    return col;\n}\n\nfloat roughNoise2(vec2 uv, int depth, float roughness, uint s)\n{\n    uv += vec2(27.238*r(s), 16.162*r(s+uint(1)));\n\n    float col = smoothNoise(uv);\n    float normalizer = 0.;\n    float basis = 1./(roughness);\n    \n    for(int i = 1; i < depth; i++) //tweaking initial color by adding it to smaller scale noise\n    {\n        uv += vec2(4.3487*r(s+uint(2)), 5.754*r(s+uint(3))); //move uv to avoid radial repetition effect\n        col += map(smoothNoise(uv*pow(2., float(i))), 0., 1., -1./pow(basis, float(i)), 1./pow(basis, float(i)));\n        normalizer += 1./pow(basis, float(i));\n    }\n\n    return smoothstep(0., 1., map(col, -normalizer, 1.+normalizer, 0., 1.)); // normalize the value\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define tex(pos) texture(iChannel0, pos).x\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame <3 ) {\n        fragColor = vec4(0.75) -  vec4(fragCoord,fragCoord.x,fragCoord.y);\n        return;\n     }\n\n    fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/* THE RAIN */\n#define A 4\n\n#define rainSpeed 3. // float of A\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n#define tex3(pos) texture(iChannel3, pos).x\n#define amoeba(pos)  texture(iChannel0, pos)\n#define habitat(pos) texture(iChannel1, pos)\n#define bufferC(pos) texture(iChannel2, pos)\n#define therain(pos) texture(iChannel3, pos)\n\nfloat hash(vec2 p)\n{\n   return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// check if there is an arriving particle at this pixel in next frame\nfloat arrivingParticle(vec2 coord, out vec4 partData) {\n\t// scan area from -D to D\n\tvec2 uv = coord / iResolution.xy;\n    vec4 veges = habitat(uv);\n    partData = veges;\n    float returnval = 0.;\n\t// scan area from -D to D\n    for (int i=-A; i<A; i++) {\n        for (int j=-A; j<A; j++) {\n            // position to check\n            vec2 arrCoord = coord + vec2(i,j);\n            vec4 data = texture(iChannel3, arrCoord/iResolution.xy);\n            vec4 amoeba = texture(iChannel0, arrCoord/iResolution.xy);\n            \n            // no particles here\n            if (dot(data,data)<1.9991 ) {\n              //  continue;\n            }\n            if (amoeba.x > 0.) {\n                partData = vec4(uv, 0., 0.);\n               // partData = 0.;\n                return 1.;\n            }\n            // get next position of particle\n            vec2 nextCoord = data.xy + data.zw;\n\n            // distance between next position and current pixel\n            vec2 offset = abs(coord - nextCoord);\n            // if the distance is within half a pixel pick this particle\n            // (other arriving particles are dismissed)\n            if (offset.x<.5 && offset.y<.5) {\n                partData += data;\n                returnval++;\n                return returnval;\n            }\n        }\n    }\n    \n    // no particles arriving here\n\treturn returnval;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n    \n    if ((iMouse.z > 0. && length(iMouse.xy - fragCoord.xy) < 256.)) {\n       fragColor = vec4(0., 0., 0., 0.);\n       return;\n    }\n    \n \t// random particles at the top, xy is position, zw velocity\n    if (fragCoord.y > iResolution.y - float(A) || fragCoord.x > iResolution.x - float(A)) {\n        fragColor = vec4(fragCoord.xy, hash(vec2(uv.x , iTime)) * -rainSpeed, hash(vec2(uv.y , iTime)) * -rainSpeed); \n        return;\n    }\n   \n    // get the data of a particle arriving at this pixel \n    vec4 partData;\n    float p = arrivingParticle(fragCoord, partData);\n\n    // no particles, empty pixel\n    if (p < 1.) {\n    \tfragColor = vec4(p);\n        return;\n    }\n    \n    // update position with current velocity altered by channels r & b in the video\n    float vel = max(0.,1.-length(texture(iChannel0,fragCoord/iResolution.xy).rb));\n    partData.xy += partData.zw*vel;\n\n    //set particle data\n    fragColor = partData;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}