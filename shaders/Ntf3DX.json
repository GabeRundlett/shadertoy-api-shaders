{
    "Shader": {
        "info": {
            "date": "1622941412",
            "description": "Wanted to do my own derivation of analytic motion blur for a disk.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntf3DX",
            "likes": 9,
            "name": "Motion Blurred Disk",
            "published": 3,
            "tags": [
                "motionblur",
                "analytic",
                "disk"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "/*\nThis is not totally correct since it is not moving perfecty linearly\nbut its good enough.\n\nIt does becomes obvious with with high velocity (or low framerate) and nonlinear\nturns though.\n\nThe problem consists of finding how much of the frame duration the\nsample point was over the disk which involves computing the intersection\nof the relative path of the sample point with the disk and computing the gap\nbetween the two intersections.\n*/\n\n// I'm getting lazy on my derivatives :P\nvec2 var2dual(in float x) { return vec2(x, 1.0); }\nvec2 fMul(in vec2 a, in vec2 b) { return vec2(a.x * b.x, a.x * b.y + a.y * b.x); }\nvec2 fDiv(in vec2 a, in vec2 b) { return vec2(a.x / b.x, (b.x * a.y - a.x * b.y) / (b.x * b.x)); }\nvec2 fPow(in vec2 a, in vec2 b) { float q = pow(a.x, b.x); return vec2(q, q * (b.x * a.y / a.x + b.y * log(a.x))); }\nvec2 fSquare(in vec2 z) { return vec2(z.x * z.x, 2.0 * z.x * z.y); }\nvec2 fExp(in vec2 z, in float base) { float q = pow(base, z.x); return vec2(q, q * z.y); }\nvec2 fSin(in vec2 z) { return vec2(sin(z.x), cos(z.x) * z.y); }\nvec2 fCos(in vec2 z) { return vec2(cos(z.x), -sin(z.x) * z.y); }\nvec2 fMin(in vec2 a, in vec2 b) { return a.x < b.x ? a : b; }\nvec2 fMax(in vec2 a, in vec2 b) { return a.x > b.x ? a : b; }\nvec2 fClamp(in vec2 z, in vec2 edge0, in vec2 edge1) { return fMax(edge0, fMin(edge1, z)); }\nvec2 fSmoothstep(in vec2 edge0, in vec2 edge1, in vec2 z) { z = fClamp(fDiv(z - edge0, edge1 - edge0), vec2(0.0), vec2(1.0, 0.0)); vec2 sq = fSquare(z); return 3.0 * sq - 2.0 * fMul(sq, z);}\nvec2 fMix(in vec2 a, in vec2 b, in vec2 t) { return a + fMul(b - a, t); }\n\n// p: sample point\n// o: disk origin\n// r: disk radius\n// v: disk velocity\n// dt: frame duration\nfloat movingDisk(in vec2 p, in vec2 o, in float r, in vec2 v, in float dt) {\n    vec2 p0 = p - o, p1 = v * dt;\n\n    float a = dot(p1, p1);\n    float b = dot(p0, p1);\n    float c = dot(p0, p0) - r * r;\n\n    float h = b * b - a * c;\n    if (h > 0.0) {\n        vec2 t = clamp((vec2(-1.0, 1.0) * sqrt(h) - b) / a, 0.0, 1.0);\n        return t.y - t.x;\n    }\n\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 diskX = 0.5 * fCos(6.0 * var2dual(iTime));\n    vec2 diskY = 0.5 * fMul(fCos(6.0 * var2dual(iTime)), fSin(6.0 * var2dual(iTime)));\n    color += movingDisk(uv, vec2(diskX.x, diskY.x), 0.1, vec2(diskX.y, diskY.y), iTimeDelta);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}