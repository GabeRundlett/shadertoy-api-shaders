{
    "Shader": {
        "info": {
            "date": "1701968054",
            "description": "comment line 27 to really notice the artifacting I was going for",
            "flags": 0,
            "hasliked": 0,
            "id": "clGBDz",
            "likes": 5,
            "name": "Earthbound type shader",
            "published": 3,
            "tags": [
                "earthbound"
            ],
            "usePreview": 0,
            "username": "Trixelized",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "#define pixel_scale 5.0\n#define pi 3.141592\n#define tau 6.283185\n\n// Rounded sin\nfloat rsin(float val, float scale) {\n    return round(sin(tau * val) * scale);\n}\n\n// Rounded cos\nfloat rcos(float val, float scale) {\n    return round(cos(tau * val) * scale);\n}\n\n// Scanline function\nfloat scanline(float val) {\n    return floor(mod(val, 2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Resize the fragment coordinate and round it down\n    // This artificially downscales all coordinates\n    vec2 uv = floor(fragCoord / pixel_scale);\n    \n    // Distort the UV using even patterns\n    uv.x += rsin(uv.y / 128.0 + iTime / 6.0, mix(-16.0, 16.0, scanline(uv.y)));\n    uv.y += rsin(uv.y / 48.0 + iTime / 8.0, 8.0);\n    \n    // Pattern (would be a custom texture)\n    vec3 col = step(length(uv / 32.0 - round(uv / 32.0)), 0.46) * vec3(0.3, 0.1, 0.1);\n    col += scanline(uv.x / 32.0) * vec3(0.2, 0.0, 0.0);\n    col += vec3(0.3, 0.05, 0.2);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}