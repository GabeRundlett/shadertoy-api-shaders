{
    "Shader": {
        "info": {
            "date": "1455212172",
            "description": "click on cells to see pattern fullscreen",
            "flags": 0,
            "hasliked": 0,
            "id": "MsK3Ry",
            "likes": 19,
            "name": "Weird Fractal 7",
            "published": 3,
            "tags": [
                "fractal",
                "weird"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 856
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n//another variation of my Weird Fractal 0 : https://www.shadertoy.com/view/Xts3RB\n\nconst vec2 gridSize = vec2(2.,2.);//grid size (columns, rows)\n    \n// encode id from coord // s:screenSize / h:pixelCoord / sz=gridSize\nfloat EncID(vec2 s, vec2 h, vec2 sz) \n{\n    float cx = floor(h.x/(s.x/sz.x));\n    float cy = floor(h.y/(s.y/sz.y));\n    return cy*sz.x+cx;\n}\n\n// return id / uv\nvec3 getcell(vec2 s, vec2 h, vec2 sz) \n{\n    float cx = floor(h.x/(s.x/sz.x));\n    float cy = floor(h.y/(s.y/sz.y));\n    \n    float id = EncID(s,h,sz);\n    \n    vec2 size = s/sz;\n    float ratio = size.x/size.y;\n    vec2 uv = (2.*(h)-size)/size.y - vec2(cx*ratio,cy)*2.;\n    \n    return vec3(id, uv);\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tf.xyz = iResolution;\n    \n    vec4 p = vec4((g+g-f.xy)/f.y,0,1), r = p-p, q = r, m = iMouse, c;\n\n    if(m.z>0.) \n    {\n        c.x = EncID(f.xy,m.xy,gridSize);\n        c.yz = p.xy;\n    }\n    else\n    {\n        c.xyz = getcell(f.xy,g,gridSize);\n        p.xy = c.yz;\n    }\n    \n\tfloat k = 0.;\n\tif (c.x == 0.) k = .258;\n\tif (c.x == 1.) k = .276;\n\tif (c.x == 2.) k = .282;\n\tif (c.x == 3.) k = .3;\n\t\n    q.w += iTime * 0.3 + 1.;\n\t\n    // i is the color of pixel while hit 0. => 1.\n\tfor (float i=1.; i>0.; i-=.01) \n\t{\n        float d=0.,s=1.;\n\n        for (int j = 0; j <3; j++)\n\t\t{\n\t\t\tr = abs( mod(q * s + 1.,2.) - 1. );\n            d = max(d, (k - length( sqrt(r * .6) ) * .3) / s );\n\t\t\ts *= 3.;\n\t\t}\n\t\t\n        q += p * d;\n        \n        f = f - f + i;\n\t\t\t\n        if(d < 1e-5) break;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}