{
    "Shader": {
        "info": {
            "date": "1457015928",
            "description": "I think the tiling is incorrect....",
            "flags": 0,
            "hasliked": 0,
            "id": "Msy3Dt",
            "likes": 6,
            "name": "rotating kaleidoscope",
            "published": 3,
            "tags": [
                "2d",
                "kaleidoscope"
            ],
            "usePreview": 1,
            "username": "randomekek",
            "viewed": 892
        },
        "renderpass": [
            {
                "code": "float noise(in vec2 x)\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\treturn texture( iChannel0, (p + f + 0.5)/256.0, -100.0 ).x;\n}\n\nfloat fbm(vec2 p){\n    return (\n          0.50*noise(p) \n        + 0.25*noise(p*2.01) \n        + 0.12*noise(p*4.01)\n        + 0.10*noise(p*8.01)\n        + 0.08*noise(p*16.01)\n        + 0.07*noise(p*32.01)\n        + 0.06*noise(p*64.01));\n}\n\n// base image is some random colors\nvec3 baseImage(in vec2 uv) {\n    uv *= 4.0;\n\treturn vec3(fbm(uv+3.4), fbm(uv+12.1), fbm(uv+33.3));   \n}\n\n// maps points onto unit square.\nconst vec2 tile = vec2(1.0, sqrt(3.0)*0.5);\nconst float pi = 3.1415926;\nconst float sixty = pi / 3.0;\nvec2 kaleidoscope(in vec2 uv) {\n    float row = floor(uv.x / tile.x);\n    vec2 local = (fract(uv + mod(row,2.0)*vec2(-2.0*uv.x,0.0)/ tile) - 0.5) * tile;\n    float theta = atan(local.y, local.x);\n    float triangle = floor(theta / sixty);\n    float rotated = mod(theta + mod(triangle,2.0)*(sixty - 2.0*theta), sixty);\n    return length(local) * vec2(cos(rotated), sin(rotated));\n}\n\nvec2 rotate(in vec2 uv, in float theta) {\n    mat2 rotate = mat2(cos(theta), sin(theta), -sin(theta), cos(theta));\n    return rotate*uv;\n}\n\nvec2 slide(in vec2 uv, in float theta) {\n    float zoom = 0.2 + 0.2 * (1.0 - sin(theta));\n    vec2 translate = theta*vec2(1.0, 1.0);\n    return rotate(uv + translate, theta)*zoom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime + 9.15;\n\tvec2 uv = (fragCoord.xy / iResolution.xx - 0.5) * 7.0;\n\tfragColor = vec4(baseImage(rotate(kaleidoscope(slide(uv, t*0.048)), t*0.12)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}