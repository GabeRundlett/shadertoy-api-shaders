{
    "Shader": {
        "info": {
            "date": "1630208830",
            "description": "I guess JCVD finds a glitch in the matrix",
            "flags": 0,
            "hasliked": 0,
            "id": "NsdGRj",
            "likes": 3,
            "name": "video test 01",
            "published": 3,
            "tags": [
                "hmm"
            ],
            "usePreview": 0,
            "username": "J450N",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "float threshold = 0.55;\nfloat padding = 0.05;\n\n\n\n\n\n\nvec4 background (vec2 uv)\n{\n    vec4 color = vec4(1.0,1.0,1.0,1.0);\n    \n    color.r = uv.x;\n    color.g = uv.y;\n    \n    float t1 = sin( iTime * 10.20 ) * 0.05;\n    \n    float scale = 1.50;\n    \n    int maxIter = 8;\n\n    for (int i = 0; i < maxIter; i++)\n    {\n        float t = (float(i) / float(maxIter));\n        \n    \n        color.r *= 1.0 + (sin (uv.x * iTime * scale) + (0.15 * t));\n        color.g *= 1.0 + (sin (uv.y * iTime * scale) + (0.15 * t));\n        color.b *= 1.0 + (sin ( sin(uv.x + uv.y) * iTime * scale) + 0.05);\n        \n        color.r += atan (color.g) * t * t1;\n        color.g += atan (color.b) * t * t1;\n        color.b += atan (color.r) * t * t1;\n        \n        color.r -= sin (color.b) * 100.25 * t1 * t;\n        color.g -= sin (color.r) * 50.25 * t1 * t;\n        color.b -= sin (color.g) * 10.25 * t1 * t;\n        \n        \n        uv.x += 10.1 * t;\n        uv.y += 10.1 * t;\n        \n        float r = sqrt(pow(uv.x, 2.0) + pow(uv.y, 2.0)) * (1.0 + t);\n        float theta = atan(uv.y/ uv.x);\n        vec2 uv3 = vec2( r * sin(theta), r * cos(theta));\n        \n        color.r *= 1.0 + (sin (uv3.x * iTime * 0.05) + t1);\n        color.g *= 1.0 + (sin (uv3.y * iTime * 0.05) + t1);\n        color.b *= 1.0 + (sin (sin(uv3.x + uv3.y) * iTime * 0.05) + 0.05);\n        \n    }\n    \n\n    \n    \n    return color;\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvOrig = uv;\n    \n\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\nfloat t1 = sin( iTime * 1.0 ) * 5.1;\nfloat t2 = sin( iTime * 10.0 ) * 8.1;\n\nint maxIter = 5;\n\n\n//---- loop through \nfor (int i = 0; i < maxIter; i++)\n{\n    float t = (float(i) / float(maxIter));\n    float uvScale = 1.0 + (t * 001.50) * t2;\n\n\n    vec2 uv2 = uv;\n    \n    vec4 tex = texture(iChannel0, uv2);\n    \n    uv2.x -= 0.5;\n    uv2.y -= 0.5;\n\n    uv2.x *= 1.0 + ((1.0 - tex.r) * 0.03 * uvScale);\n    uv2.y *= 1.0 + ((1.0 - tex.r) * 0.03 * uvScale);\n    \n    uv2.x *= 1.0 - ((1.0 - tex.r) * 0.01 * uvScale);\n    uv2.y *= 1.0 - ((1.0 - tex.r) * 0.01 * uvScale);\n\n\n    uv2.x += 0.5;\n    uv2.y += 0.5;\n\n    uv = uv2;\n}\n\n\n\n\nvec2 finalUV = mix(uv, uvOrig, clamp(t2,0.0,0.5));\n\n\n\nvec4 color = texture(iChannel0, finalUV);\n\nvec4 greenScreen = vec4(0.0,1.0,0.0,1.0);\nvec4 black = vec4(0.0,0.0,0.0,1.0);\n\n\n\n\nvec3 diff = color.xyz - greenScreen.xyz;\nfloat fac = smoothstep(threshold-padding,threshold+padding, dot(diff,diff));\n\n\nfinalUV = mix(finalUV, uvOrig,  (1.0 - fac) + (finalUV) );\n\ncolor = mix(color, background(finalUV), 1.0 - fac);\n//color = mix(color, black, 1.0 - fac);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//fragColor = vec4(col * tex.xyz ,1.0);\nfragColor = vec4( color.xyz ,1.0);\n\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}