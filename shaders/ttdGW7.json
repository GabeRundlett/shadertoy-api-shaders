{
    "Shader": {
        "info": {
            "date": "1576592908",
            "description": "The background interaction shader for my portfolio website.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttdGW7",
            "likes": 3,
            "name": "Website Background",
            "published": 3,
            "tags": [
                "backgroundwebsite"
            ],
            "usePreview": 0,
            "username": "JasperMeiners",
            "viewed": 755
        },
        "renderpass": [
            {
                "code": "vec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat simplex( vec2 uv)\n{\n\tuv *= 5.0;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tfloat f  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.2500*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n\t\tf += 0.0625*noise( uv ); uv = m*uv;\n    return f;\n}\n\nfloat lerp(float a, float b, float t)\n{\n    if(t < 0.0) t = 0.0;\n    else if (t > 1.0) t = 1.0;\n    return (a * (1.0-t)) + (b * t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 dir = vec2(iTime * .2, 0.0);\n    vec2 dir2 = vec2(iTime * -.05, iTime * 0.1);\n    \n    float f = simplex(fragCoord / 100.0 + dir);\n    float f2 = simplex(fragCoord / 200.0 + dir2);\n    f = (f * f2);\n\n    // Time varying pixel color\n    vec3 col = vec3(1,1,pow(f,2.0) - 0.5) / 1.0;\n    \n    //col -= pow(distance(iMouse.xy, fragCoord.xy),1.3) / 2000.0 * (sin(  iTime*1.0)*0.3+1.5);\n    \n    float wave = distance(uv, vec2(0.5, 0.5));\n    float sine = sin(iTime * 0.5) * 2.0;\n    float waveSmooth = 1.0-distance(wave, sine);\n    \n    col = vec3(1.0, 1.0, 1.0) * lerp(0.5, 1.0, waveSmooth) * lerp(0.0, 1.0, f);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}