{
    "Shader": {
        "info": {
            "date": "1645450142",
            "description": "Tidied up version of Fabrice's shader. Mouse sets parameters.\n\nA little slow, a loopless version would be a nice exercise for someone.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dsfDj",
            "likes": 21,
            "name": "Mutant Zebra Valley",
            "published": 3,
            "tags": [
                "zebra",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 449
        },
        "renderpass": [
            {
                "code": "// Variant of Fabrice's https://www.shadertoy.com/view/sslBDj\n// Tidied up so I could understand what was going on.\n// Also colours, variable wave heights, better AA (takes into\n// account slope of graph) and added some more movement.\nvoid mainImage( out vec4 O, vec2 p ){\n  float scale = 3.0;\n  float H = 2.0; // Wave height\n  float K = 6.0; // Band density\n  if (iMouse.z > 0.0) {\n    H = 6.0*iMouse.x/iResolution.x;\n    K = 10.0*iMouse.y/iResolution.y;\n  }\n  p = scale*(2.0*p-iResolution.xy)/iResolution.y;\n  //p *= 2.0; // Uncomment to see what is going on\n  O = vec4(0);\n  int N = int(1.2*K*(H+scale));\n  float px = fwidth(p.y);\n  float A = 1.0;\n  float t = 0.618*iTime+p.x;\n  float z = A*sin(t); // Vertical displacement\n  for( int i = -N; i <= N; i++) {\n    int ix = i;\n    ix -= int(0.5*K*iTime);\n    float offset = float(ix)/K;\n    float a = p.x + sin(offset + iTime);\n    float d = H*cos(a) - offset - p.y - 0.5*iTime + z;\n    // Insert favourite approximate to sqrt here.\n    float k = sqrt(1.0+sqr(H*sin(a)-A*cos(t)));\n    //float k = 1.0+0.5*abs(H*sin(a)-A*cos(t)); // Not a bad one\n    if (abs(d) > 3.0*k/K) continue;\n    vec4 col = vec4(ix&1); // ix can be negative!\n    col *= vec4(0.5+0.5*h2rgb(fhash(ix)),1);\n    col *= 0.6 - 0.4*sin(a); // Shading\n    O = mix(O,col,smoothstep(-px*k,px*k,d));\n  }\n  O = pow(O,vec4(0.4545));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat fhash(int n) {\n  return float(ihash(uint(n)))/pow(2.0,32.0);\n}\n\nfloat sqr(float x) { return x*x; }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}