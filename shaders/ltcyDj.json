{
    "Shader": {
        "info": {
            "date": "1534055663",
            "description": "Lots of wrinkly blocky blobs of color, adjusted in YCbCr color space. Useful for making your brain try to form visual patterns from random noise, like for inspiration.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltcyDj",
            "likes": 9,
            "name": "Crumpled Noise",
            "published": 3,
            "tags": [
                "noise",
                "hash",
                "ycbcr"
            ],
            "usePreview": 0,
            "username": "TEttinger",
            "viewed": 845
        },
        "renderpass": [
            {
                "code": "\n// CC0 license, do what thou wilt\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // single float input, we get a varied value for it from screen position and time\n\n\n    float rate = 20.0; //fps\n    float size = 7.3;\n    float jitter = 6.87; // when larger, distorts squares more\n    float gamma = 1.1; // not sRGB gamma; arbitrary\n    \n    float time = floor(iTime * rate) / 60.0;\n    float dx = jitter * fract(exp(fract(time * 53.678921) + 0.234567));\n    float dy = jitter * fract(exp(fract(time * 31.456789) + 0.345672));\t\n    \n    \n    vec2 xy = floor((fragCoord) / size);\n\tvec3 uv = mod((vec3((xy / iResolution.xy), time) * 11035.15245)\n                  // these are based off a number I had good results with as an increment with\n                  // 64-bit integer CPU hashing, 0x369DEA0F31A53F85, and its powers modulo 64 bits\n                  + vec3(393555.9000370003845, -55865.4634555294951, 782941.5577042901757),\n                  96.9875);\n    uv = mod((vec3((floor(vec2(fragCoord.x + fract(dot(uv.zyx + uv.zxx + uv.yzy, fract(uv * uv)))\n                           * jitter - jitter,\n                               fragCoord.y + fract(dot(uv + uv.yyx + uv.zxz, fract(uv.zxy * uv.zxy)))\n                              * jitter - jitter) / size) / iResolution.xy), time) * 11035.15245)\n             + vec3(393555.9000370003845, -55865.4634555294951, 782941.5577042901757),\n             96.9875);\n    float h = fract(dot(uv + uv.yzx + uv.zxy, fract(uv.zyx * uv.zyx)));\n    float Y = h;\n    float Cr = fract(h * 78294.15577042901757) - .5;\n    float Cb = fract(h * 258.654634555294951) - .5;\n    \n    float R = Y + 1.402 * Cr;\n\tfloat G = Y - 0.344136 * Cb - 0.714136 * Cr;\n\tfloat B = Y + 1.772 * Cb;\n    \n    vec3 RGB = pow(vec3(R,G,B), vec3(gamma));\n    \n    fragColor = vec4(RGB, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}