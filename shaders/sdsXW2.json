{
    "Shader": {
        "info": {
            "date": "1619289798",
            "description": "The inverse of an orthonormal basis is alsoits tranpose which is much cheaper because it is just all the elements flipped diagonally.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdsXW2",
            "likes": 7,
            "name": "Orthonormal Basis - Aáµ€ = A^-1",
            "published": 3,
            "tags": [
                "inverse",
                "orthonormal",
                "basis",
                "transpose"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "// Drawing utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// SDFs\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat sdVerticalLine(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\n\nfloat sdInfLine(in vec2 p, in vec2 a, in vec2 b) {\n    return abs(dot(p - a, normalize(b - a).yx * vec2(-1.0, 1.0)));\n}\n\nfloat sdVectorArrow(in vec2 p, in vec2 v) {\n    float m = length(v); vec2 n = v / m;\n    p = vec2(dot(p, n.yx * vec2(1.0, -1.0)), dot(p, n));\n    return min(sdVerticalLine(p, m) - 0.025, sdIsosceles(p - vec2(0.0, m), 0.1, 0.15));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 4.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec3 color = vec3(0.0);\n    float unit = 8.0 / iResolution.y;\n\n    vec2 right = vec2(cos(iTime), sin(iTime));\n    mat2 mat = mat2(right, -right.y, right.x);\n    drawSDF(sdVectorArrow(uv, mat[0]), vec3(1.0, 0.0, 0.0));\n    drawSDF(sdVectorArrow(uv, mat[1]), vec3(0.0, 1.0, 0.0));\n\n    mat2 inv = inverse(mat);\n    drawSDF(sdVectorArrow(uv, inv[0]), vec3(1.0, 1.0, 0.0));\n    drawSDF(sdVectorArrow(uv, inv[1]), vec3(0.0, 1.0, 1.0));\n\n    inv = transpose(mat);\n    drawSDF(sdVectorArrow(uv, inv[0]), vec3(1.0, 1.0, 0.0));\n    drawSDF(sdVectorArrow(uv, inv[1]), vec3(0.0, 1.0, 1.0));\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}