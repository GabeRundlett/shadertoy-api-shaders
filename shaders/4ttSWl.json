{
    "Shader": {
        "info": {
            "date": "1482165995",
            "description": "  Building model based on imaginative \"Industrial Complex\" by Shane; use\n  mouse to look around.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4ttSWl",
            "likes": 19,
            "name": "Factory Flythrough",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "architecture",
                "flight"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1105
        },
        "renderpass": [
            {
                "code": "// \"Factory Flythrough\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Building model based on imaginative \"Industrial Complex\" by Shane; use\n  mouse to look around.\n*/\n\nconst float pi = 3.14159;\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRCylDf (vec3 p, float r, float rt, float h);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm1 (float p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 dronePos, ltPos, ltAx;\nvec2 aTilt;\nfloat tCur, dstFar, bumpShd;\nint idObj;\nconst int idBase = 1, idWall = 2, idFlCl = 3, idCyl = 4, idCol = 5, idRail = 6,\n   idWire = 7, idLt = 8, idDrBod = 11, idDrLamp = 12, idDrCam = 13;\n\nvec3 TrackPath (float t)\n{\n   return vec3 (cos (2. * t * pi / 64.) * 5.5, cos (0.5 * 2. * t * pi / 64.), t);\n}\n\nfloat DroneDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d;\n  const float dSzFac = 6.;\n  dMin *= dSzFac;\n  qq = dSzFac * (p - dronePos);\n  qq.yz = Rot2D (qq.yz, - aTilt.y);\n  qq.yx = Rot2D (qq.yx, - aTilt.x);\n  q = qq;\n  q.y -= 0.05;\n  d = PrRCylDf (q.xzy, 0.2, 0.03, 0.07);\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  q.y -= 0.07;\n  d = PrRoundBoxDf (q, vec3 (0.06, 0.02, 0.12), 0.04);\n  if (d < dMin) { dMin = d;  idObj = idDrLamp; }\n  q = qq;\n  q.y -= -0.05;\n  d = PrSphDf (q, 0.17);\n  if (d < dMin) { dMin = d;  idObj = idDrCam; }\n  q = qq;\n  q.xz = abs (q.xz) - 0.7;\n  d = min (PrCylAnDf (q.xzy, 0.5, 0.05, 0.05), PrCylDf (q.xzy, 0.1, 0.03));\n  q -= vec3 (-0.4, -0.15, -0.4);\n  d = min (d, PrRCylDf (q.xzy, 0.05, 0.03, 0.2));\n  q -= vec3 (-0.3, 0.2, -0.3);\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = min (d, min (PrRCylDf (q, 0.05, 0.02, 1.), PrRCylDf (q.zyx, 0.05, 0.02, 1.)));\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  return dMin / dSzFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 w, q, qq;\n  float dMin, d, dm, dc;\n  dMin = dstFar;\n  w = vec3 (16., 8., 16.);\n  q = abs (mod (p + vec3 (4., 0., 0.), 2. * w) - w);\n  w = vec3 (16., 1., 8.);\n  qq = abs (mod (p, 2. * w) - w);\n  d = max (p.y + 3.5, 8. - max (qq.x + 0.35, q.z));\n  if (d < dMin) { dMin = d;  idObj = idBase; }\n  d = max (max (qq.x - 8., qq.z - 2.15),\n     min (1.75 - abs (abs (qq.x - 8.) - 4.), 0.5 - abs (q.y - 8.)));\n  if (d < dMin) { dMin = d;  idObj = idWall; }\n  dm = 2.85 - min (max (2.1 - p.y, q.z - 2.), abs (mod (p.z + 16., 32.) - 16.));\n  qq.x = abs (qq.x - 8.);\n  d = max (dm, min (max (qq.x, qq.y), max (qq.x, abs (mod (qq.z, 2.) - 1.))) - 0.15);\n  if (d < dMin) { dMin = d;  idObj = idRail; }\n  qq.y = abs (mod (qq.y + 0.1667, 0.333) - 0.1667);\n  d = max (dm, max (length (qq.xy) - 0.025, - p.y - 3.));\n  if (d < dMin) { dMin = d;  idObj = idWire; }\n  q.xz = abs (q.xz - vec2 (8.));\n  q.x = abs (q.x - 4.);\n  qq = abs (mod (q, 2.) - 1.);\n  dm = min (qq.x, min (qq.y, qq.z));\n  dc = max (max (q.x, q.y) - 3., - p.y);\n  d = max (dm, min (dc, max (q.y, q.z) * 0.55 + length (q.yz) * 0.45 - 5.1)) - 0.15;\n  if (d < dMin) { dMin = d;  idObj = idFlCl; }\n  d = max (dm, min (dc, max (q.x, q.z) - 2.)) - 0.15;\n  if (d < dMin)  { dMin = d;  idObj = idCol; }\n  d = length (vec2 (q.xz) * vec2 (0.7, 0.4)) - 1.;\n  if (d < dMin) { dMin = d;  idObj = idCyl; }\n  w = vec3 (16., 8., 8.);\n  qq = mod (p + vec3 (16., 0., 0.), 2. * w) - w;\n  qq.xz = abs (qq.xz);\n  qq.x = abs (qq.x - 4.);\n  qq.y += 5.2;\n  d = PrCylDf (qq.xzy, 0.3, 0.1);\n  if (d < dMin) { dMin = d;  idObj = idLt; }\n  dMin = DroneDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat MengFun (vec3 p)\n{\n  vec3 q, qm;\n  float s, d, dd;\n  s = 16.;\n  p *= 4.;\n  q = abs (mod (p, s) - 0.5 * s);\n  qm = max (q.yzx, q.zxy);\n  d = max (0., min (qm.x, min (qm.y, qm.z)) - s / 3. + 1.);\n  s /= 3.;\n  q = abs (mod (p, s) - 0.5 * s);\n  qm = max (q.yzx, q.zxy);\n  d = max (d, min (qm.x, min (qm.y, qm.z)) - s / 3.);\n  s /= 3.;\n  q = abs (mod (p, s) - 0.5 * s);\n  qm = max (q.yzx, q.zxy);\n  dd = min (qm.x, min (qm.y, qm.z)) - s / 3.;\n  bumpShd = step (d, dd);\n  d = min (abs (max (d, dd)) * 1.6, 1.);\n  return d;\n}\n\nvec3 MengSurf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.001, 0);\n  g = vec3 (MengFun (p + e.xyy), MengFun (p + e.yxy), MengFun (p + e.yyx)) -\n     MengFun (p);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat TileFun (vec2 p)\n{\n  p = abs (fract (4. * p) - 0.5);\n  return smoothstep (0., 0.3, max (p.x, p.y));\n}\n\nvec3 TileFloor (vec3 p, float f)\n{\n  vec2 g;\n  vec2 e = vec2 (0.001, 0);\n  g = f * (vec2 (TileFun (p.xz + e.xy), TileFun (p.xz + e.yx)) - TileFun (p.xz));\n  return normalize (vec3 (g.x, 1., g.y));\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 DroneCol ()\n{\n  vec4 objCol;\n  if (idObj == idDrBod) objCol = vec4 (0.2, 0.9, 0.2, 1.);\n  else if (idObj == idDrLamp) objCol = mix (vec4 (0.3, 0.3, 1., -2.),\n     vec4 (2., 0., 0., 0.2), step (0., sin (10. * tCur)));\n  else if (idObj == idDrCam) objCol = vec4 (0.1, 0.1, 0.1, 1.);\n  return objCol;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ltDir;\n  vec2 pb;\n  float dHit, f, ltDist, atten, brt;\n  int idObjT;\n  dHit = ObjRay (ro, rd);\n  if (dHit < dstFar) {\n    ro += rd * dHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    ltDir = ltPos - ro;\n    ltDist = length (ltDir);\n    ltDir /= ltDist;\n    atten = 1.2 * smoothstep (0.55, 0.65, dot (ltAx, - ltDir)) /\n       pow (max (ltDist, 1.), 1.2);\n    pb = abs (mod (ro.xz + vec2 (16., 0.), 2. * vec2 (16., 8.)) - vec2 (16., 8.));\n    pb.x = abs (pb.x - 4.);\n    brt = (ro.y < 2. && length (pb) < 0.7) ? 0.2 : 0.;\n    if (idObj == idLt) {\n      col = vec3 (1., 1., 0.3) * (0.9 - 0.1 * vn.y);\n    } else if (idObj >= idDrBod) {\n      col4 = DroneCol ();\n      col = col4.xyz;\n      if (col4.a >= 0.)\n        col = col * (0.2 + 0.8 * atten * max (dot (ltDir, vn), 0.)) +\n           atten * pow (max (dot (reflect (rd, vn), ltDir), 0.), 64.);\n    } else {\n      if (idObj == idBase) vn = TileFloor (ro, 150.);\n      else if (idObj != idRail && idObj != idWire)\n         vn = MengSurf (ro, vn, 150.);\n      if (idObj != idWire) {\n        vn = VaryNf (32. * ro, vn, 3.);\n        col = 1.5 * mix (vec3 (0.1, 0.2, 0.25), vec3 (0.2, 0.1, 0.05),\n           Fbm3 (3. * ro));\n      } else col = vec3 (0.5, 0.5, 0.6);\n      if (idObj == idBase) col *= TileFun (ro.xz);\n      else if (bumpShd > 0.) col *= 0.7;\n      col = col * (0.2 + 10. * atten * max (dot (ltDir, vn), 0.)) +\n         2. * atten * pow (max (dot (reflect (rd, vn), ltDir), 0.), 32.);\n      col = mix (col, vec3 (1., 1., 0.5), brt);\n      col = mix (col, vec3 (0.6, 0., 0.) * (0.3 + 0.7 * Fbm1 (5. * tCur)),\n         1. - smoothstep (-10., -4.2, ro.y));\n    }\n  } else col = vec3 (0.);\n  f = dHit / dstFar;\n  col = mix (col, 0.3 * vec3 (0.7, 0.9, 1.), smoothstep (0.4, 1., f * f));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd;\n  vec2 canvas, uv, ori, ca, sa, aa;\n  float el, az, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  t = 4. * tCur;\n  ro = TrackPath (t);\n  ltPos = ro;\n  ltPos.y += 0.1;\n  dronePos = TrackPath (t + 1.);\n  aTilt = vec2 (6. * (TrackPath (t + 1.1).x - dronePos.x), 0.2);\n  vd = normalize (TrackPath (t + 0.1) - ro);\n  az = 1.2 * (0.5 * pi + atan (- vd.z, vd.x));\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2.1 * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  aa = atan (uv / 1.2);\n  rd = vuMat * normalize (vec3 (1.5 * sin (aa) / (0.5 + cos (aa)), 1.));\n  ltAx = vuMat * vec3 (0., 0., 1.);\n  dstFar = 80.;\n  fragColor = vec4 (pow (clamp (ShowScene (ro, rd), 0., 1.), vec3 (0.8)), 1.0);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}