{
    "Shader": {
        "info": {
            "date": "1538501174",
            "description": "Brightness variation for random colors with an Manhattan distance effect for colors with the same M.distance.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldfRr",
            "likes": 0,
            "name": "Manhattan Brightness",
            "published": 3,
            "tags": [
                "brightness",
                "mahattan"
            ],
            "usePreview": 0,
            "username": "Ion824",
            "viewed": 534
        },
        "renderpass": [
            {
                "code": "const int k_gridW = 15;\nconst int k_gridH = 11;\nconst int k_phase = 8;\nconst float k_variationSpeed = 1.314f;\n\nfloat rand2(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 ApplyBrightness(vec3 color, float brightness)\n{\n    vec3 result;\n    vec3 Value = color * color;\n\tfloat luma =  dot(Value, vec3( 0.299, 0.587, 0.114))+0.001;\t\n\tfloat expLuma = exp2(4.0*luma) - 1.0;\n\tValue *= expLuma/luma;\n\tresult = Value * brightness;\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    float xx = uv.x * float(k_gridW);\n    float yy = uv.y * float(k_gridH);\n    // Time varying pixel color\n    int xi = int(xx);\n    int yi = int(yy);\n    \n    int gridCenterW = k_gridW / 2;\n    int gridCenterH = k_gridH / 2;\n    \n    int manhattanDistance = abs(xi - gridCenterW) + abs(yi - gridCenterH);\n    int k = manhattanDistance % k_phase;\n    float kf = float(k);\n\n    float r = rand2(vec2(xi,xi));\n    float g = rand2(vec2(xi,yi));\n    float b = rand2(vec2(yi,xi));\n\n    vec3 col = ApplyBrightness(vec3(r, g, b), \n                               smoothstep(1.0f, 0.0f, abs(sin((kf + iTime)))));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}