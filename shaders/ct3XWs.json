{
    "Shader": {
        "info": {
            "date": "1685847657",
            "description": "Feeling the buzz for the upcoming WWDC 2023, I created this!\nUse your mouse to experience the animation and share in the excitement.\n\nApple logo SDF from:\nhttps://www.shadertoy.com/view/ftXSzX",
            "flags": 32,
            "hasliked": 0,
            "id": "ct3XWs",
            "likes": 14,
            "name": "WWDC 2023",
            "published": 3,
            "tags": [
                "collision",
                "simulation",
                "particles",
                "apple",
                "jelly",
                "sand",
                "wwdc",
                "voronoitracking",
                "pbd",
                "selfcollision"
            ],
            "usePreview": 0,
            "username": "luckyballa",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const uint PARTICLE_COUNT = 25000u;\nconst float MAX_VEL = 8.0;\nconst float MOUSE_BRUSH_RADIUS = 96.0;\nconst float DAMPING = 0.75;\nconst float RADIUS = 2.75;\n\n#define FLOAT_INF uintBitsToFloat(0x7f800000u)\n#define PI 3.14159265\n#define MAX_VELOCITY (MAX_VEL - MAX_VEL * smoothstep(1.0, 5.0, iTime) * 0.75 + MAX_VEL * (iMouse.z > 0.0 ? 0.25 : 0.0))\n\nstruct Entity {\n    vec2 position;\n    vec2 oldPosition;\n};\n\nconst Entity INVALID_ENTITY = Entity(vec2(-FLOAT_INF), vec2(0));\n\n\nuint wrap1d(uint flatId) {\n    return flatId % PARTICLE_COUNT;\n}\n\nvec2 wrap2d(vec2 id, vec2 resolution) {\n    return fract(id / resolution) * resolution;\n}\n\nuint to1d(vec2 id, vec2 resolution) {\n    return uint(id.x + id.y * resolution.x);\n}\n\nivec2 to2d(uint flatId, ivec2 resolution) {\n    return ivec2(flatId, flatId / uint(resolution.x)) % resolution;\n}\n\nEntity decodeEntity(sampler2D sampler, ivec2 id) {\n    vec4 raw = texelFetch(sampler, id, 0);\n    Entity entity;\n    entity.position = raw.rg;\n    entity.oldPosition = raw.ba;\n    return entity;\n}\n\nEntity decodeEntity(sampler2D sampler, uint flatId) {\n    return decodeEntity(sampler, to2d(flatId, textureSize(sampler, 0)));\n}\n\nvec4 encodeEntity(Entity entity) {\n    return vec4(entity.position, entity.oldPosition);\n}\n\nuvec4 fetchClosest(vec2 position, sampler2D voroBuffer) {\n    return floatBitsToUint(texelFetch(voroBuffer, ivec2(wrap2d(position, vec2(textureSize(voroBuffer, 0)))), 0));\n}\n\nuint murmur3( in uint u )\n{\n  u ^= ( u >> 16 ); u *= 0x85EBCA6Bu;\n  u ^= ( u >> 13 ); u *= 0xC2B2AE35u;\n  u ^= ( u >> 16 );\n\n  return u;\n}\n\nuint rngSeed = 314159265u;\n\nuint xorshift(in uint value) {\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nuint nextUint() {\n    rngSeed = xorshift(rngSeed);\n    return rngSeed;\n}\n\nfloat nextFloat() {\n    return float(nextUint()) / float(uint(-1));\n}\n\nfloat sdCircle( vec2 p, float r ) { return length(p) - r; }\n\nfloat smax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\n\nfloat smin( float a, float b, float k ) {\n    float h = max(k-abs(a-b), 0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://www.shadertoy.com/view/ftXSzX\nfloat sdf(vec2 coord) {\n    float ra = 0.5;\n    float leaf1 = sdCircle(coord - vec2(-0.0161, 0.9858) * ra, 0.4447 * ra);\n    float leaf2 = sdCircle(coord - vec2(0.4628, 0.5673) * ra, 0.4567 * ra);\n\n    float shoulderLeft = sdCircle(coord - vec2(-0.3340, 0.0644) * ra, 0.4608 * ra);\n    float shoulderRight = sdCircle(coord - vec2(0.3964, 0.0382) * ra, 0.4909 * ra);\n\n    float bodyLeft = sdCircle(coord - vec2(-0.1227, -0.1831) * ra, 1.006 * ra);\n    float bodyCenter = sdCircle(coord - vec2(0.0141, -0.4889) * ra, 0.9256 * ra);\n    float bodyRight = sdCircle(coord - vec2(0.3662, -0.0483) * ra, 1.2052 * ra);\n    float bodyShoulderLeft = sdCircle(coord - vec2(-0.1791, -0.0624) * ra, 0.6640 * ra);\n\n    float bite = sdCircle(coord - vec2(1.0080, -0.0543) * ra, 0.4427 * ra);\n    float bottom = sdCircle(coord - vec2(0.0382, -1.4145) * ra, 0.4950 * ra);\n\n    float delimiterLeft = sdCircle(coord - vec2(-0.6398390342052314, 0.0201) * ra, 0.3320 * ra);\n\n    float leaf = max(leaf1, leaf2);\n    float tinyPieceLeft = max(delimiterLeft, bodyShoulderLeft) + 0.002 * ra; \n    float lowerPart = max(bodyLeft, max(bodyCenter, bodyRight));\n    float body;\n    body = min(shoulderLeft, shoulderRight);\n    body = smin(body, lowerPart, 0.121 * ra);\n    body = min(body, tinyPieceLeft);\n    body = min(body, leaf);\n    body = max(-bite, body);\n    body = smax(bottom, body, 0.189 * ra);\n\n    return body;\n}\n\n\nvec4 gsdf(vec2 uv) {\n  vec2 st = vec2(0.0001);\n  float height = sdf(uv);\n\n  vec2 dxy = height - vec2(sdf(uv + vec2(st.x, 0.)),  sdf(uv + vec2(0., st.y)));\n    \n  return vec4(normalize(vec3(dxy * 2. / st, 1.)), height);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    uint flatID = to1d(floor(fragCoord), vec2(textureSize(iChannel0, 0)));\n    fragColor = encodeEntity(INVALID_ENTITY);\n    if (flatID >= PARTICLE_COUNT)\n        return;\n\n    uint flatSeed = murmur3(flatID); \n    rngSeed = flatSeed;\n\n    Entity current;\n    if (iFrame <= 8) {\n        float count = float(PARTICLE_COUNT);\n        current.position += vec2(nextFloat(), nextFloat()) * iResolution.xy;\n        current.oldPosition = current.position + vec2(nextFloat(), nextFloat()) * ((current.position / iResolution.xy) - 0.5) * iResolution.xy * 0.1;\n    } else {\n        current = decodeEntity(iChannel0, flatID);\n    }\n\n    vec2 p = current.position / iResolution.xy;\n    p -= 0.5;\n    p = (2. * current.position - iResolution.xy) / iResolution.y;\n\n\n    float RADIUS = RADIUS * 0.6;\n    RADIUS *= mix(1.0, 0.85, step(0., iMouse.z));\n    \n    vec2 force = gsdf(p).xy  * 125.0 * step(0., sdf(p)) * (iMouse.z > 0.0 ?  0.4 : 1.0);\n\n\n    if (sign(iMouse.z) > 0.) {\n        vec2 diff = iMouse.xy - current.position;\n        float strength = 1.0 - length(diff) / MOUSE_BRUSH_RADIUS;\n        if (strength > 0.0) {\n            force += vec2(diff.y, -diff.x) * smoothstep(0., 1., strength) * 4.0;\n        }\n    }\n\n    vec2 velocity = current.position - current.oldPosition;\n    float v = length(velocity);\n    vec2 normalizedVelocity = velocity / max(v, 0.00001);\n    float dv = -v * DAMPING * iTimeDelta;\n    velocity += normalizedVelocity * dv;\n    velocity = clamp(velocity, -MAX_VELOCITY, MAX_VELOCITY);\n    \n    vec2 oldPosition = current.position;\n    \n    current.position += velocity + 0.5 * force * iTimeDelta;\n\n    uvec4 closest = fetchClosest(current.position, iChannel1);\n    \n    for (int i = 0; i < 4; i++) {\n        if (closest[i] == flatID || closest[i] == -1u) {\n            continue;\n        }\n\n        Entity other = decodeEntity(iChannel0, closest[i]);\n\n        float r2 = RADIUS * 2.0;\n        vec2 delta = current.position - other.position;\n        float dist = length(delta);\n\n        if (dist < r2) {\n            float cost = (r2 - dist);\n            float lambda = -cost / 2.0;\n            vec2 grad = delta / dist;\n            vec2 correction = grad * lambda;\n            \n            current.position -= correction;\n        }\n    }\n\n    current.oldPosition = oldPosition;\n\n    fragColor = encodeEntity(current);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void sortClosest(\n        inout vec4 distances,\n        inout uvec4 indices, \n        uint index,\n        vec2 center\n        ) {\n    if (index == uint(-1) || any(equal(indices, uvec4(index)))) {\n        return;\n    } \n\n    Entity e = decodeEntity(iChannel0, index);\n    float dist = length(center - e.position);\n    \n    if (dist < distances[0]) {\n        distances = vec4(dist, distances.xyz);\n        indices = uvec4(index, indices.xyz);\n    } else if (dist < distances[1]) {\n        distances = vec4(distances.x, dist, distances.yz); \n        indices = uvec4(indices.x, index, indices.yz);\n    } else if (dist < distances[2]) {\n        distances = vec4(distances.xy, dist, distances.z); \n        indices = uvec4(indices.xy, index, indices.z);\n    } else if (dist < distances[3]) {\n        distances = vec4(distances.xyz, dist);             \n        indices = uvec4(indices.xyz, index);\n    }\n}\n\nvoid fetchAndSortClosest( inout vec4 distances, inout uvec4 idList, in vec2 samplePoint, in vec2 cellCenter ) {\n    uvec4 ids = fetchClosest(samplePoint, iChannel1);\n    for (int i = 0; i < 4; i++) {\n        sortClosest(distances, idList, ids[i], cellCenter);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec4 closestIndices = uvec4(-1);\n    vec4 bestDistances = vec4(FLOAT_INF);\n    \n    fetchAndSortClosest(bestDistances, closestIndices, fragCoord, fragCoord);\n    fetchAndSortClosest(bestDistances, closestIndices, fragCoord + vec2( 0, -1), fragCoord);\n    fetchAndSortClosest(bestDistances, closestIndices, fragCoord + vec2( 0,  1), fragCoord);\n    fetchAndSortClosest(bestDistances, closestIndices, fragCoord + vec2(-1,  0), fragCoord);\n    fetchAndSortClosest(bestDistances, closestIndices, fragCoord + vec2( 1,  0), fragCoord);\n    \n    rngSeed = murmur3(floatBitsToUint(fragCoord.x)) ^ murmur3(floatBitsToUint(fragCoord.y)) ^ murmur3(floatBitsToUint(iTime));\n\n    for (int i = 0; i < 16; i++) {\n        sortClosest(bestDistances, closestIndices, wrap1d(nextUint()), fragCoord);\n    }\n\n    fragColor = uintBitsToFloat(closestIndices);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec4 closestIndices = floatBitsToUint(texelFetch(iChannel1, ivec2(fragCoord), 0));\n   \n    float d = FLOAT_INF;\n    float d2 = FLOAT_INF;\n    \n    Entity closest = decodeEntity(iChannel0, closestIndices[0]);\n    vec2 p = (2. * closest.position - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.725, 0.75, 0.975) * 1.1;\n\n    for (int i = 3; i >= 0; i--) {\n        uint id =  closestIndices[i];\n        if (id == -1u) { break; }\n            \n            \n        Entity entity = decodeEntity(iChannel0, id);\n        float newDist = length(entity.position - fragCoord);\n\n        d = smin(d, newDist, RADIUS * (1.5 + 16.0 * smoothstep(0., 0.25, -sdf(p)) + 1.0 * smoothstep(0.0, 0.25, sdf(p))));\n        d2 = smin(d2, newDist, RADIUS * (8.0 + 8.0 * max(-sdf(p), 0.0)));        \n   }\n   \n\n    float dx = dFdx(d2);\n    float dy = dFdy(d2);\n    vec3 normal = normalize(vec3((dx), (dy), 1.25));\n\n    vec3 lightDir = normalize(vec3(0.75, 0.75, 1.5));\n    vec3 viewDir = vec3(0.0, 0.0, 1.0);\n\n    float diff = pow(max(dot(lightDir, abs(normal)), 0.0), 6.0);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0); \n\n\n    col = col * 0.1 + (diff * col) + (spec * mix(vec3(1.0), col, 0.5));\n    col *= smoothstep(RADIUS, RADIUS * 0.75, d);\n\n    vec2 aberration = vec2(7.0, 4.0) * 0.5 * max(smoothstep(0.0, 0.1, sdf(p)), 0.5);\n    vec3 colorR = texelFetch(iChannel2, ivec2(fragCoord + aberration.xy * normal.x), 0).xyz;\n    vec3 colorG = texelFetch(iChannel2, ivec2(fragCoord + aberration.yx * normal.y), 0).xyz;\n    vec3 colorB = texelFetch(iChannel2, ivec2(fragCoord + aberration.yy * normal.z), 0).xyz;\n\n    col = mix(col, vec3(colorR.r, colorG.g, colorB.b), 0.75);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}