{
    "Shader": {
        "info": {
            "date": "1554268077",
            "description": "This reaction diffusion : https://www.shadertoy.com/view/wdfXWf\nBut in 3D!",
            "flags": 32,
            "hasliked": 0,
            "id": "td2SRy",
            "likes": 29,
            "name": "Wall Reaction 3D",
            "published": 3,
            "tags": [
                "3d",
                "diffusion",
                "reaction"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 600
        },
        "renderpass": [
            {
                "code": "//Rendering\nmat2 ro (float a) {\n\tfloat s = sin(a),c = cos(a);\n    return mat2(c,-s,s,c);\n}\nfloat ln (vec2 p, vec2 a, vec2 b) {return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{ R = iResolution.xy;\n    \n \n   \tvec3 p = vec3(0,0,-0.2*R.y);\n \tvec3 d = normalize(vec3(2.*(U-0.5*R)/R.y,2));\n \tif (iMouse.z>0.&&iMouse.x<0.9*R.x) {\n \t\tp.xz *= ro(6.2*iMouse.x/R.x);\n\t\td.xz *= ro(6.2*iMouse.x/R.x);\n        p.yz *= ro(6.2*iMouse.y/R.y);\n\t\td.yz *= ro(6.2*iMouse.y/R.y);\n    } else {\n\t\tp.xz *= ro(.1*iTime);\n\t\td.xz *= ro(.1*iTime);\n\t}\n\tQ = vec4(0);\n \tfor (int i = 0; i < 4; i++) {\n        vec3 o = abs(p)-0.5*vec3(R/N,N*N);\n \t\tp+= d*max(o.x,max(o.y,o.z));\n \t}\n \tp += 2.*d*fract(iTime*sin(dot(U,U)));\n \tfor (int i = 0; i < 70; i++) {\n        vec4 a = s3d(iChannel1,p+0.5*vec3(R/N,N*N));\n        p += d*max(.07,2.*exp(-100.*a.y));\n        Q += .2*a.y*abs(sin(a*vec4(10,1,10,1)));\n \t}\n \tQ = atan(Q)*.7;\n \tQ += exp(-10.*length(Q.xyz))*texture(iChannel1,U/R).xxxx;\n \t//Q = texture(iChannel1,U/R);\n \tvec4 b = texture(iChannel3,vec2(.5));\n \tQ = mix(Q,vec4(0),smoothstep (0.007*R.x,0.004*R.x, ln(U,vec2(0.975,0.05)*R,vec2(0.975,0.95)*R)));\n    Q = mix(Q,vec4(1,0.3,.5,1),smoothstep (0.004*R.x,0.003*R.x, ln(U,vec2(0.975,0.05)*R,vec2(0.975,0.95)*R)));\n\tQ = mix(Q,vec4(0),smoothstep (0.019*R.x,0.015*R.x, length(U-vec2(0.975,b.w)*R)));\n\tQ = mix(Q,vec4(1),smoothstep (0.016*R.x,0.01*R.x, length(U-vec2(0.975,b.w)*R)));\n\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fluid Color\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \tvec3 o = d3(U);\n \tQ = s3d(iChannel1,o);\n \n \tvec4 dx = -Q;\n \tfor (int x = -1; x <= 1; x++)\n \tfor (int y = -1; y <= 1; y++)\n \tfor (int z = -1; z <= 1; z++)\n        dx += s3d(iChannel1,o+vec3(x,y,z));\n    dx = dx/27.-Q;\n \n    Q += dx*vec4(1.,.3,1.,1);\n    \n    float x = (.3+texture(iChannel3,vec2(0)).x)*Q.x*Q.y*(1.-Q.y);\n    \n    Q.y = Q.y+x-0.01-.2*Q.z;\n    Q.x = Q.x+0.1*Q.x*(1.-Q.x)-x;\n    Q.z = Q.z*0.9 + .5*dx.y+.01*Q.y;\n    \n    Q = max(Q,0.);\n \t\n \t\n if (iFrame < 1) {\n \tQ = vec4(1,0,0,0);\n    if (length(o-0.5*vec3(R/N,N*N))<3.) Q.y += 1.;\n }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 3D utilities \n#define N 7.\nvec2 R;\n//  [ [0,R/N]; [0,N*N]  ] < -- > [0,R]\nvec2 d2 (vec3 U) {\n    U = clamp(U,vec3(1),vec3(R/N,N*N));\n\treturn U.xy+vec2(mod(U.z,N),floor(U.z/N))*R/N;\n}\nvec3 d3 (vec2 u) {\n    vec2 o = floor(u/R*N);\n\treturn vec3(mod(u,R/N),o.x+o.y*N);\n}\nvec4 s3d (sampler2D T,vec3 U) {\n    vec3 U0 = vec3 (U.xy,floor(U.z)),\n         U1 = vec3 (U.xy, ceil(U.z));\n    vec4 o = mix(\n        texture(T,d2(U0)/R),\n        texture(T,d2(U1)/R),\n        fract(U.z)\n    );\n    if (U.x < 1. || R.x/N-U.x < 1. ||\n        U.y < 1. || R.y/N-U.y < 1. ||\n       \tU.z < 0. || U.z > N*N) o.xyz*=0.;\n    return o;\n}\nvec4 s3d1 (sampler2D T, vec3 U) {\n    U=U-s3d(T,U).xyz;\n    vec4 s = s3d(T,U);\n    return s;\n}\nfloat dist (vec3 U, vec4 A) {\n\treturn length(U-A.xyz)-A.w;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n    Q = texture(iChannel0, U/R);\n    if (iMouse.z > 0.&&iMouse.x>0.9*R.x) Q = vec4(clamp(iMouse.y/R.y,.1,.9));\n    if (iFrame < 1) Q = vec4(.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}