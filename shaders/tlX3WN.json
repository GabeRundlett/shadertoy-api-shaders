{
    "Shader": {
        "info": {
            "date": "1558166875",
            "description": "Plot the density functions ([url=https://en.wikipedia.org/wiki/Atomic_orbital]orbitals[/url]) of the [url=https://en.wikipedia.org/wiki/Hydrogen_atom#Schr%C3%B6dinger_equation]hydrogen atom[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "tlX3WN",
            "likes": 8,
            "name": "Orbitals of the Hydrogen Atom",
            "published": 3,
            "tags": [
                "2d",
                "physics",
                "quantummechanics",
                "chemistry"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 823
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Plotting the density functions (orbitals, Schrödinger equation solutions) for the hydrogen atom, cf. https://en.wikipedia.org/wiki/Atomic_orbital\n\n// some constants\n#define PI 3.14159265359\n\n// dark and light colors from Solarized (https://ethanschoonover.com/solarized/)\n#define DARK vec3(0., 0.169, 0.212)\n#define LIGHT vec3(0.992, 0.965, 0.89)\n#define GRAY vec3(0.576, 0.631, 0.631)\n\n// XY range of the display.\n#define DISP_SCALE 130.0 \n\n// Clip areas outside DISP_SCALE\n#define CLIP_SQUARE\n\n// maximum supported polynomial order\n#define MAX_POLYNOMIAL_ORDER 9\n\n// Kronecker delta\n#define kd(n, k) ((n == k) ? 1.0 : 0.0)\n\n// Clenshaw's algorithm for the Laguerre polynomial\nfloat laguerre(int n, int aa, float x)\n{\n\tfloat a = float(aa);\n    float u = 0.0, v = 0.0, w = 0.0;\n    \n    for (int k = MAX_POLYNOMIAL_ORDER; k > 0; k--)\n    {\n        float kk = float(k);\n        w = v; v = u;\n        u = kd(n, k) + (2.0 * kk + a + 1.0 - x)/(kk + 1.0) * v - (kk + a + 1.0) * w/(kk + 2.0);\n    }\n    \n    return kd(n, 0) + (a - x + 1.0) * u - 0.5 * (a + 1.0) * v;\n}\n\n// Clenshaw's algorithm for the normalized associated Legendre polynomial (spherical harmonics)\nfloat alegp(int n, int m, float x)\n{\n    int am = abs(m);\n    float u = 0.0, v = 0.0, w = 0.0;\n    \n    for (int k = MAX_POLYNOMIAL_ORDER; k >= 0; k--)\n    {\n        float kp = float(k + 1);\n        float mk1 = float(2 * am) + kp, mk2 = float(2 * (am + k) + 1);\n        w = v; v = u;\n        u = kd(n, am + k) + sqrt((mk2 * (mk2 + 2.0))/(kp * mk1)) * x * v - sqrt((kp * mk1 * (mk2 + 4.0))/((kp + 1.0) * (mk1 + 1.0) * mk2)) * w;\n    }\n\n    for (int k = 1; k <= am; k++)\n    {\n        u *= sqrt((1.0 - 0.5/float(k)) * (1.0 - x) * (1.0 + x));\n    }\n    \n    return (((m > 0) && ((am & 1) == 1)) ? -1.0 : 1.0) * u * sqrt((0.5 * float(am) + 0.25)/PI);\n}\n\n// custom colormap\n\nvec3 gvb( float t )\n{\n\t return vec3(min(0.16 + 0.845 * t, 0.47 + 0.072 * t), min(0.14 + 2.15 * t, 1.55 - 1.386 * t), max(0.13 - 0.325 * t, 1.47 * t - 0.591));\n}\n\n // density function\n\nfloat hdensity(int n, int l, int m, vec2 p)\n{\n      float r = length(p);\n\n      float rho = 2.0 * r/float(n);\n      float tmp = laguerre(n - l - 1, 2 * l + 1, rho) * alegp(l, m, p.y/r);\n\n      return exp(2.0 * float(l + 1) * log(0.5 * rho) - rho) * tmp * tmp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n        uv *= DISP_SCALE;\n\n        // principal quantum number (cf. https://en.wikipedia.org/wiki/Quantum_number)\n        int n = 5;\n            \n        // use a modified Szudzik pairing function (http://szudzik.com/ElegantPairing.pdf)\n        // to generate the corresponding valid azimuthal and magnetic quantum numbers\n        float k = mod(floor(0.2 * iTime), float(n * n));\n        int q = int(floor(sqrt(k)));\n        int l = q, m = int(k) - q * (1 + q);\n            \n        // rescale density function with hyperbolic tangent\n        vec3 col = gvb(tanh(1.5 * hdensity(n, l, m, uv)));\n\n        #ifdef CLIP_SQUARE\n        col = mix(DARK, col, 1.0 - step(0.5 * DISP_SCALE, abs(uv.x)));\n        #endif\n\n        fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}