{
    "Shader": {
        "info": {
            "date": "1696958452",
            "description": "Ambient occlusion of circles",
            "flags": 0,
            "hasliked": 0,
            "id": "cd3Bz7",
            "likes": 1,
            "name": "Analytic 2D Circle Occlusion",
            "published": 3,
            "tags": [
                "2d",
                "2d",
                "circle",
                "occlusion",
                "analytic",
                "exact"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define PI2 6.28318531\nvec2 getAO(in vec2 p, in float r) {\n    float disc = dot(p, p)-r*r;\n    if (disc < 0.0) return vec2(0, 2.0*PI);\n    float a = atan(r/sqrt(disc));\n    float b = atan(p.x, p.y)+PI;\n    return vec2(b-a, b+a);\n}\nconst int count = 50;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 1.5*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 t = getAO(uv, 0.5);\n    vec2 x[count*4];\n    int n = 0;\n    fragColor = vec4(0);\n    for (int i = 0; i < count; i += 1) {\n        float theta = 2.0*PI*(float(i)/float(count));\n        vec3 pos = vec3(vec2(sin(theta), cos(theta*1.5))*0.5, 0.04);\n        //if (i == 0) pos = vec3(2.0*(iMouse.xy-iResolution.xy*0.5)/iResolution.y, 0.4);\n        vec2 ao = getAO(uv-pos.xy, pos.z);\n        x[n++] = vec2(max(ao.x, 0.0), 1); //start\n        x[n++] = vec2(min(ao.y, PI2), -1); //end\n        if (ao.x < 0.0) {\n            x[n++] = vec2(ao.x+PI2, 1) ;\n            x[n++] = vec2(PI2, -1);\n        }\n        if (ao.y > PI2) {\n            x[n++] = vec2(0, 1);\n            x[n++] = vec2(ao.y-PI2, -1);\n        }\n    }\n    vec2 tmp;\n    for (int r = 0; r < n; r += 1) {\n        bool swaped = false;\n        for (int m = 0; m < n-1; m += 1) {\n            if (x[m].x > x[m+1].x) {\n                tmp = x[m];\n                x[m] = x[m+1];\n                x[m+1] = tmp;\n                swaped = true;\n            }\n        }\n        if (!swaped) break;\n    }\n    int state = 0;\n    float k = 0.0;\n    float occ = 0.0;\n    bool set = true;\n    for (int i = 0; i < n; i += 1) {\n        state += int(x[i].y);\n        if (state == 1 && set) {\n            k = x[i].x;\n            set = false;\n        }\n        if (state == 0) {\n            occ += x[i].x-k;\n            set = true;\n        }\n    }\n    vec3 col = 1.-vec3(occ)/PI2;\n    fragColor += vec4(sqrt(col), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}