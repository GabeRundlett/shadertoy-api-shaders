{
    "Shader": {
        "info": {
            "date": "1563437941",
            "description": "Put fullscreen and watch a while! See comments for details.",
            "flags": 64,
            "hasliked": 0,
            "id": "WtfXzB",
            "likes": 57,
            "name": "Aya Tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "BigWIngs",
            "viewed": 2529
        },
        "renderpass": [
            {
                "code": "// Aya Tunnel by Martijn Steinrucken aka BigWings - 2019\n// countfrolic@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n//\n// Inspired by a vision I had during an ayahuasca ceremony.\n// This is a 'sweetend up' version of the tunnel I felt I was flying through.\n//\n// This is just 3 octaves of gyroids\n// First two layers are intersected, next two are mixed.\n//\n\n// Music: Asura - Crossroads Limiter\n// https://soundcloud.com/licoknigi-1/asura-crossroads-limiter\n\n\n#define SURF_DIST .0001\n#define MAX_DIST 100.\n#define MAX_STEPS 400\n\n// use these to tweak the effect\n//#define KALEIDOSCOPE\n#define PERLESCENCE\n//#define SHADOW\n\nvec3 lightPos;\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat GetHeight(float depth) {\n\treturn 1.5-sin(depth*.5);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 ro, vec3 lookat, vec3 up, float zoom) {\n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(up, f)),\n        u = cross(f, r),\n        c = ro + f*zoom,\n        i = c + uv.x*r + uv.y*u,\n        rd = normalize(i-ro);\n    return rd;\n}\n\nfloat LineDist(vec3 p, vec3 a, vec3 b) {\n\tvec3 ba = a-b,\n        pa = a-p;\n    \n    return length(cross(ba, pa))/length(ba);\n}\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 p) {\n\tvec2 m = iMouse.xy/iResolution.xy - .5;\n\n   float lightDist = length(p-lightPos);\n    \n    p.z += iTime;\n    float z = p.z*.5;\n     \n    p.y += sin(z);\n    \n    \n    float a = smoothstep(0.,3., lightDist);\n    float w = mix(-1., 1., sqrt(a));\n    float d = (abs(dot(sin(p), cos(p.zxy)))-.1*w);\n    \n    float s = 5.;\n    p.x += iTime*.2;\n    \n    float second = (abs(dot(sin(p*s), cos(p.zxy*s)))-w)/s;\n    \n    s = 8.;\n    float second2 = (abs(dot(sin(p*s), cos(p.zxy*s)))-w)/s;\n    \n    second = mix(second, second2, sin(z*.2)*.5+.5);\n    \n    d = smin(d, second,-.1);\n    \n    \n    m.y=sin(p.z*.345)*.5-.2;\n    s = 26.2;\n    float third = (abs(dot(sin(p*s), cos(p.zxy*s)))-.1)/s;\n    d = mix(d, third, m.y);\n    \n    return d*.25;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.01, 0);\n    vec3 n = GetDist(p) - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nvec4 CastRay(vec3 ro, vec3 rd) {\n    float dS, dO;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tp = ro + dO * rd;\n        dS = GetDist(p);\n        dO += dS;\n        \n        if(dS<SURF_DIST || dO>MAX_DIST) break;\n    }\n    \n    return vec4(p, dS);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 UV = uv;\n    vec3 col = vec3(0);\n\t\n    float t = iTime;\n    float pulse = sin(t*.2)<-0.5?1.:0.;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    #ifdef KALEIDOSCOPE\n    uv /= dot(uv,uv)*2.;\n    uv = abs(uv);\n    float kaleidoscope = smoothstep(.4, .6, sin(-t*.2));\n    //uv = mix(UV, uv, kaleidoscope);\n    #endif\n    \n    float z = t*.5;\n    \n    float zoom = 1.;\n    vec3 up = vec3(sin(t*.2),cos(t*.2),0);\n    vec3 ro = vec3(0, GetHeight(t), 0);\n    vec3 lookat = vec3(0,GetHeight(t+.5),1);\n    vec3 rd = GetRayDir(uv, ro, lookat, up, zoom);\n    float lightDepth = 7.+sin(t*.162-2.)*3.;\n    lightPos = vec3(0,GetHeight(t+lightDepth),lightDepth);\n\n    \n    vec4 hit = CastRay(ro, rd);\n    vec3 p = hit.xyz;\n    float dS = hit.w;\n    float dO = length(ro-p);\n    \n    \n    vec3 glowCol = sin(vec3(.123, .234, .345)*t)*.5+.85;\n    col = glowCol;\n    \n    vec3 L = lightPos-p;\t// vec from surface to light\n    float ld = length(L);\t// distance from surface to light\n\n\n    vec3 n = GetNormal(p);\n\n    vec3 l = L/ld;\n\n    float dif = clamp(dot(n,l), 0., 1.);\n    float att = 1./ld;\n\n    float trust = smoothstep(.8, 1., sin(t))*.6+.4;\n    //trust = 1.;\n\n    col = dif*att*trust*glowCol*40.;\n    col *= dif*att*trust;\n\n    float spec = clamp(dot(reflect(rd, n), l),0.,1.);\n    spec = pow(spec, 20.);\n    col += spec*trust*att;\n\n    /*col=1.-col;\ncol *= .23;\ncol *= vec3(.8,.7,.9);*/\n\n    if(length(lightPos-ro)<dO) {\n        float minLd = LineDist(lightPos, ro, ro+rd); \n        vec3 light = glowCol*trust*.25/minLd;\n        col += light;\n    }\n    col *= smoothstep(5., 6.5, t);\n\n    #ifdef SHADOW\n    vec4 shadow = CastRay(lightPos, -l);\n    if(abs(length(shadow.xyz-lightPos)-ld) > SURF_DIST) {\n        col *= .05;\n    }\n    #endif\n\n    float fogPhase = sin(t*.1);\n    fogPhase *= fogPhase*fogPhase;\n\n    col = mix(col, glowCol, fogPhase*length(hit.xyz-ro)/20.);\n\n    #ifdef PERLESCENCE\n    vec3 perl = n*.5+.5;\n    perl*=perl;\n    pulse = pow(sin(-ld*.4+t)*.5+.5,106.);\n\n    perl = sin(perl*t*.005)*.5+.5;\n    vec3 perlCol = pulse*perl*mix(glowCol,vec3(1), 2.75);\n\n    pulse = sin(t*-.12)*.5+.5;\n    pulse = pulse*pulse;\n    //col = mix(col, perlCol, pulse);\n\n    col += perlCol*pulse;\n    #endif\n\n\n   \n  // if(UV.x>m.x*1.77-.5)col = 1.-col;\n   \n    #ifdef KALEIDOSCOPE\n    col *= 1.+kaleidoscope;\n    \n    #endif\n    col = pow(col, vec3(sin(t*.123)*.5+1.5));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19064,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/licoknigi-1/asura-crossroads-limiter"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}