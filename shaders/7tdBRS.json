{
    "Shader": {
        "info": {
            "date": "1663286707",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "7tdBRS",
            "likes": 4,
            "name": "Fractal mosaic 18 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(1.5,0.5)\n        //vec2(-2.,.5+mod(floor(a.x),2.))\n\n        ///vec2(1.,.5+floor(a.y-.5)/2.)\n        //vec2(2.,0.)\n        //vec2(1.5,0.)\n        //vec2(1.25,1.75)\n        //vec2(abs(mod(a.x-.5,2.)-1.),abs(mod(a.y-.5,2.)-1.))\n    ,\n    \n    a1 = a+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += iTime/t1/24.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    for(int k = 0; k < 9; k++){\n        //uv += floor(uv*2.)/2.;\n        uv = (uv+t2)/scale;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n        t2 = triangle_wave(uv+.5);\n        uv = t2-triangle_wave(uv.yx);\n        col.x =\n            //max(max(length(uv-t2),abs(uv.y-uv.x))/3.,col.x);\n            //max(max(length(abs(uv)-abs(t2)),abs(abs(uv.y)-abs(uv.x))),col.x);\n            max(max(length(uv-t2.yx),abs(uv.y-uv.x))/3.,col.x);\n            //max(max(min(length(uv-t2),length(uv-t2.yx)),abs(uv.y-uv.x))/3.,col.x);\n        col =\n            //abs(col-(1.-col.x));\n            abs(abs(abs(col-1.))-col);\n        col1 =\n            abs(col1-col-1.).yzx;\n            //abs(abs(col1.yzx*col1-col-1.)-col1);\n            //abs(col1-col*col1.yzx-1.).yzx;\n            ////abs(abs(col1.yzx-col-1.)-col1);\n            //if(uv.y>uv.x) {uv=uv.yx;t2=t2.yx;}\n    }\n    fragColor = vec4(col1/2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 mainSound(int samp, float t){\n  float tempo = 1.;\n  t /= tempo;\n  float s1 = 5.,\n  m4 = fmod(t/s1,s1),\n  m2 = floor(s1/2.+abs(s1/2. - m4)),\n  m1 =\n      floor(abs(s1/2.-m2)),\n  m3 =\n      fmod(t*(s1)/abs(s1/2.+(m1-m2)),s1),\n  a = 64.*sqrt((1.-sqrt(fract(t/s1))))*.2,\n  \n  nb = t*tempo*pow(2.,m1/s1+m3/s1+7.);\n\n  return abs(.5-vec2(fract(nb*.998)\n   ,fract(nb)))*a;\n\n}\n\n/*\n#define fmod(x,y) mod(floor(x),y)\n\nvec2 mainSound(int samp, float t){\n  \n  float s1 = 5.,\n  m4 = fmod(t*s1,s1),\n  m2 = floor(s1/2.+abs(s1/2. - m4)),\n  m1 =\n      floor(abs(s1/2.-m2)),\n  m3 =\n      fmod(t/(s1)/abs(s1/2.+floor(m1-m2)),s1-m4),\n  a=sqrt((1.-sqrt(fract(t*s1))))*.2,\n  \n  nb = pow(2.,m1/s1+m3/s1+7.);\n\n  return vec2(fract(t*nb*.998)*a\n   ,fract(t*nb)*a);\n\n}\n*/\n\n/*\nvec2 mainSound(int samp, float t){\n  \n  float s1 = 5.,\n  m4 = fmod(t*s1,s1),\n  m2 = floor(s1/2.+abs(s1/2. - m4)),\n  m1 =\n      floor(abs(s1/2.-m2-m4)),\n  m3 =\n      fmod(t*(s1)/abs(s1/2.+floor(m1-m2)),s1),\n  a=sqrt((1.-sqrt(fract(t*s1+m4))))*.2,\n  \n  nb = pow(2.,m1/s1+m3/s1+7.);\n\n  return vec2(fract(t*nb*.998)*a\n   ,fract(t*nb)*a);\n\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n//#define fmod(a,b) mod(mod(floor((a)/2.),floor(1.+(a)/8.)),b)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}