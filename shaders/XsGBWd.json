{
    "Shader": {
        "info": {
            "date": "1530958170",
            "description": "sinus-stars + smoothing top. twisted along axis. \nSee comments for more accuracy ( gradient normalization + opt )\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XsGBWd",
            "likes": 2,
            "name": "columns 7: twisted sinus-stars",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/4dGBWd\n// smooth op from https://iquilezles.org/articles/smin\n\n#define K 4.\n#define exp(x) exp(min(30.,x))\n#define smin(a,b) -log( exp( -K*(a) ) + exp( -K*(b) ) ) / K\n#define smax(a,b) -(smin(-(a),-(b))) \n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t = iTime, z,l,g=1.,i,a, r0=1.,r, h=6.;// r: radius h: height/2.\n    mat2  R = mat2( sin(t+vec4(0,33,11,0)) );\n    vec3  q = iResolution,\n          D = normalize(vec3(.3*(U+U-q.xy)/q.y, -1)),// ray direction\n          p = 30./q, q0;                         // marching point along ray\n\n    O-=O;\n    for ( O++; O.x > 0. && t > .01 ; O-=.015 ) {\n        q = p,\n        q.xz *= R, q.yz *= R,                    // rotation\n        i = 3. + floor(abs(q.x/6.))*2. + float(q.y>0.); // column id\n        q0 = q; z = q.z;\n        q.x = mod(q.x,6.)-3.,                    // repeat in x\n        q.y = abs(q.y)-5.;                       // 2 rows\n        q.z = mod(q.z,3.) - 1.5,                 // vertical blocks\n        l = length(q.xy);\n        r = r0;\n      //if (l<1.5*r) {\n        a = atan(q.y,q.x) + z;                   // twist\n        r = 1.+.2*sin(i*a);                      // radius\n        //g = 1.+.2*r0*i*1.41;                   // grad(dist) <= 1.+|dr/dzt|\n      //} else g=1.;\n            \n         \n        t = (l -r) / g;             // smooth square column radius decreasing with z\n        if (q0.y>0.) t = smax(t,abs(q.z)-1.5);   // blocks top\n        t = max(t,abs(z) -h),                    // inter range of Z\n\n        p += t*D;                                // step forward = dist to obj\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}