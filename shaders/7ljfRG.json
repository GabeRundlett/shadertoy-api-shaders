{
    "Shader": {
        "info": {
            "date": "1652384472",
            "description": "voronoi noise with an explanation",
            "flags": 0,
            "hasliked": 0,
            "id": "7ljfRG",
            "likes": 0,
            "name": "easy 2d voronoi",
            "published": 3,
            "tags": [
                "voronoi",
                "noise"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y*cells; //screen coordinate normalized from 0 to the number of cells\n    vec2 cellCoord = floor(uv); //the corner of the cell this pixel is in\n    float n = 999.0; //the value of the noise at this point\n\n    //sample all cells in 3x3 cell area\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            if (!do_smoothing){\n                //normal distance function\n                n = min(n,distance(cellCoord + vec2(x,y) + hash22(cellCoord + vec2(x,y)),uv));\n            } else {\n                //rounds edges and points\n                n = smin(n,distance(cellCoord + vec2(x,y) + hash22(cellCoord + vec2(x,y)),uv), 8.0);\n            }\n        }\n    }\n\n    //set color\n    vec3 col = vec3(n);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//how many cells are along the vertical edge\nfloat cells = 4.0;\n//should the noise be smoothed\nbool do_smoothing = true;\n\n//https://iquilezles.org/articles/smin/\n// power smooth min (k=8)\nfloat smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\n//given a point, output a random point with values from 0 to 1\nvec2 hash22(vec2 p) //https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}