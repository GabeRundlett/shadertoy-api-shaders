{
    "Shader": {
        "info": {
            "date": "1719187111",
            "description": "blackhole raymarching test 1",
            "flags": 0,
            "hasliked": 0,
            "id": "X3cXzS",
            "likes": 2,
            "name": "raymarching black hole",
            "published": 3,
            "tags": [
                "raymarching",
                "light",
                "blackhole",
                "gravity"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "#define CONSTANT_C 1.\n#define CONSTANT_G 0.1\n\n#define BLACKHOLE_MASS 3.\n#define BLACKHOLE_POS vec3(cos(iTime+sin(iTime)+2.)*7.,cos(sin(iTime)+cos(iTime)*2.)*4.+cos(iTime+1.)*3.,sin(iTime+sin(iTime))*7.)\n\n#define RAYMARCH_MIN_DIST 0.01\n\n#define SUN_DIR normalize(vec3(3.,5.,2.))\n\nmarchObj scene(vec3 ro) {\n    marchObj scene;\n    \n    vec3 ro2 = ro-vec3(0.,-2.,0.);\n    ro2.xz = mod(ro2.xz,4.)-2.;\n    \n    marchObj spheres;\n    spheres.dist = sphereSDF(ro2, 1.);\n    spheres.col = vec3(1.,0.,0.);\n    \n    scene = spheres;\n    \n    return scene;\n}\nvec3 normalSDF(vec3 ro) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*scene( ro + k.xyy*h ).dist + \n                      k.yyx*scene( ro + k.yyx*h ).dist + \n                      k.yxy*scene( ro + k.yxy*h ).dist + \n                      k.xxx*scene( ro + k.xxx*h ).dist );\n}\n\nvec3 render(inout vec3 ro, inout vec3 rd, float mass, float c, float G, float cutoff_radius, int iterations) {\n    vec3 col = vec3(0.);\n    for (int i=0; i<iterations; i++) {\n        vec3 dir = BLACKHOLE_POS-ro;\n        float r = length(dir);\n        dir /= r;\n        \n        float acceleration = (G*mass)/(r*r);\n        \n        float minDist = r*.05;\n        marchObj marchDat = scene(ro);\n        minDist = min(minDist,marchDat.dist);\n        \n        vec3 velocity = acceleration*dir*minDist;\n        \n        rd = normalize(rd+velocity);\n        \n        ro += rd*c*minDist;\n        \n        float schwarzschild = 2.*(G*mass)/(c*c);\n        if ((r <= cutoff_radius && cutoff_radius > 0.0) || (r >= cutoff_radius && cutoff_radius < 0.0)) {\n            return vec3(0.);\n        }\n        if (length(ro) >= 10000.) {\n            return texture(iChannel0,rd).rgb;\n        }\n        if (marchDat.dist <= RAYMARCH_MIN_DIST) {\n            vec3 normal = normalSDF(ro);\n            float light = max(dot(normal,SUN_DIR),0.1);\n            vec3 diffuse = marchDat.col*light;\n            return diffuse;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec2 m = (iMouse.xy-iResolution.xy/2.)/iResolution.y;\n\n    vec3 camPos = vec3(0,0,15);\n    \n    vec3 ro = camPos;\n    vec3 rd = getRayDir(vec3(0.,0.,1.),vec3(0),uv,45.);\n    rd = rot3D(rd,-m.y*4.,-m.x*4.);\n    \n    vec3 col = vec3(0.);\n    \n    float schwarzschild = 2.*(CONSTANT_G*BLACKHOLE_MASS)/(CONSTANT_C*CONSTANT_C);\n    col = render(ro, rd, BLACKHOLE_MASS, CONSTANT_C, CONSTANT_G, schwarzschild*.5, 10000);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 getRayDir(vec3 ro, vec3 wo, vec2 uv, float FOV) {\n    float t = tan(FOV*3.14159/180.);\n    vec3 f = normalize(wo-ro),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        rd = f+r*uv.x*t+u*uv.y*t;\n    return normalize(rd);\n}\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(\n        c,-s,\n        s,c\n    );\n}\nvec3 rot3D(vec3 p, float pitch, float yaw) {\n    p.zy *= rot2D(pitch);\n    p.xz *= rot2D(yaw);\n    return p;\n}\n\n//SDF tools\nstruct marchObj {\n    float dist;\n    vec3 col;\n};\nmarchObj smin(marchObj A, marchObj B, float k) {\n    float h = clamp(0.5+0.5*(B.dist - A.dist)/k, 0.0, 1.0);\n    float q = k*h*(1.0-h);\n    \n    marchObj C;\n    C.dist = mix(B.dist, A.dist, h) - q;\n    C.col = mix(B.col, A.col, h);\n    \n    return C;\n}\n\n//SDF's\nfloat sphereSDF(vec3 ro, float r) {\n    return length(ro)-r;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}