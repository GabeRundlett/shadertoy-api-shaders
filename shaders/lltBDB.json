{
    "Shader": {
        "info": {
            "date": "1541384364",
            "description": "Rational functions are wild.\n\nNote that you can make the image much more tame by lowering the degrees of the numerator and denominator.",
            "flags": 0,
            "hasliked": 0,
            "id": "lltBDB",
            "likes": 6,
            "name": "Crazy Complex Map",
            "published": 3,
            "tags": [
                "2d",
                "complex",
                "meromorphic"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "#define numeratorDegree 20\n#define denominatorDegree 20\n\n//thanks Fabrice\n#define shove(x) x + .2*sign(x)*step(abs(x), vec4(.2))\n\nvec4 pi = vec4(0,2,4,8)*atan(1.0);\n\nvec2 cmul (vec2 a, vec2 b){return mat2(a, -a.y, a.x)*b;}\nvec2 cinv(vec2 z){return vec2(z.x, -z.y)/dot(z, z);}\nvec2 cdiv (vec2 a, vec2 b){return cmul(a, cinv(b));}\n\n//bad random function that does what i want\nvec4 rand(int n){\n    vec4 r = sin(fract(vec4(762.314, 257.831, 856.374, 983.219)*float(n))\n               + vec4(345.6, 508.3, 448.9, 633.5)*float(n));\n    return shove(r);\n    \n}\n\nvec3 color(vec2 p){\n    return sqrt(sqrt(length(p)))*(0.5 + 0.5*sin(atan(p.y, p.x) + vec3(0, 0.333, 0.666)*pi.w));\n}\n\nvec2 f(vec2 z){\n    vec2 result = vec2(1, 0);\n    \n    for(int i = 1; i <= numeratorDegree; i++){\n        vec4 r = rand(i);\n        vec2 p = r.xy + r.z*sin(r.w*iTime + pi.xy);\n        result = cmul(result, z - p);\n    }\n    for(int i = 1; i <= denominatorDegree; i++){\n        vec4 r = rand(-i);\n        vec2 p = r.xy + r.z*sin(r.w*iTime + pi.xy);\n        result = cdiv(result, z - p);\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    fragColor.rgb = color(f(p));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}