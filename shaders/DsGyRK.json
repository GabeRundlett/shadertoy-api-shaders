{
    "Shader": {
        "info": {
            "date": "1697970911",
            "description": "Very simple 2D plasma effect. The shades give it a slight 3D look.\n\nhttps://cineshader.com/view/DsGyRK\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DsGyRK",
            "likes": 3,
            "name": "Blob vs Blob",
            "published": 3,
            "tags": [
                "2d",
                "plasma",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "ruudhelderman",
            "viewed": 955
        },
        "renderpass": [
            {
                "code": "// Blob vs Blob\n// by Ruud Helderman, October 2023 - MIT License\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalize screen coordinates\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / (iResolution.x + iResolution.y);\n    \n    // scale; center bulge\n    uv *= 24.0 - 6.0 / (0.4 + dot(uv, uv));    // alt: uv *= 12.0 * inversesqrt(1.0 - dot(uv, uv));\n    \n    // horizontal drift\n    uv.x += iTime;\n    \n    // squirming shapes\n    uv = sin(uv + sin(1.4 * uv.yx + 0.6 * sin(1.9 * uv + iTime)));\n    \n    // color cycling\n    vec3 color = sin(vec3(0, 2.1, 4.2) - 0.2 * iTime);\n    \n    // shades\n    color *= 1.0 - dot(uv, uv);    // alt: color *= 1.0 - length(uv);\n    \n    // depth for cineshader.com\n    float alpha = 0.25 * length(color);\n    \n    // output\n    fragColor = vec4(color, alpha);    // alt: fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}