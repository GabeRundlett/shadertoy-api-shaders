{
    "Shader": {
        "info": {
            "date": "1713735080",
            "description": "drag the dots to reposition!\n\nCheck out the other rendering modes in the Common tab!",
            "flags": 32,
            "hasliked": 0,
            "id": "4ftXzM",
            "likes": 2,
            "name": "cubic bezier segment",
            "published": 3,
            "tags": [
                "math",
                "bezier",
                "quadratic",
                "tool"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    float t = mod(float(iFrame)/pieces, 1. + .5/pieces);\n\n    O = vec4(0);\n    vec2 A = texelFetch(iChannel0, ivec2(0,0), 0).xy;\n    vec2 B = texelFetch(iChannel0, ivec2(0,1), 0).xy;\n    vec2 C = texelFetch(iChannel0, ivec2(0,2), 0).xy;\n    vec2 D = texelFetch(iChannel0, ivec2(0,3), 0).xy;\n    \n    float x = 0.;\n    x += .5/r.y/pow(length(A - cuv), 2.);\n    x += .5/r.y/pow(length(B - cuv), 2.);\n    x += .5/r.y/pow(length(C - cuv), 2.);\n    x += .5/r.y/pow(length(D - cuv), 2.);\n\n    O += vec4(x);\n    \n    x = texture(iChannel1, uv).w * sqrt(pieces);\n    O += vec4(x*x, x, sqrt(x), 1);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n    \n    if (U.x < 1. && U.y < 4.){\n\n        vec2 uv = (2.*U-r)/r.y;\n        vec2 muv = (2.*iMouse.xy-r)/r.y;\n        \n        // w = following mouse? \n        // z = previous frame was mouse down?\n        // prevent other dots from locking on when you drag over them\n        // and allows dragging without losing track if you go too fast\n\n        if (iFrame < 10){\n            if (U == vec2(.5)){\n                O = vec4(-.9 * r.x/r.y, 0, 0, 0);\n                return;\n            }\n\n            if (U == vec2(.5, 1.5)){\n                O = vec4(0, .9, 0, 0);\n                return;\n            }\n\n            if (U == vec2(.5, 2.5)){\n                O = vec4(0, -.9, .0, .0);\n                return;\n            }\n\n            if (U == vec2(.5, 3.5)){\n                O = vec4(.9 * r.x/r.y, 0, 0, 0);\n                return;\n            }\n        }\n        \n        O = texelFetch(iChannel0, ivec2(U), 0);\n\n        if (length(O.xy - muv) < .1){\n            if (iMouse.z > .5 && O.z < .5 && length(O.xy - muv) < .1){\n                O.w = 1.;\n            } \n            \n            \n            \n            if (iMouse.z < .5 && O.z > .5){\n                O.w = 0.;\n            }\n\n        }\n        O.z = iMouse.z;\n\n        if (O.w > .5){\n            O.xy = muv;\n        }\n\n    } else {\n        O = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define thing(x) min(1., max(2./r.y - x, 0.)*r.y)\n\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n} // By Inigo Quilez cuz I was too lazy to derive my own for this project\n // I already spent hours trying to derive a cubic bezier distance function ðŸ’€\n\nvoid mainImage( out vec4 O, vec2 U ){\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    float old, x = 0., t = mod(float(iFrame)\n    #ifdef smooth\n        *11.234\n    #endif\n    /pieces, 1. + 1./pieces) - 1./pieces;\n    old = iFrame < 20?0.:texture(iChannel1, uv).w;\n    \n    O = vec4(0);\n    vec2 A = texelFetch(iChannel0, ivec2(0,0), 0).xy;\n    vec2 B = texelFetch(iChannel0, ivec2(0,1), 0).xy;\n    vec2 C = texelFetch(iChannel0, ivec2(0,2), 0).xy;\n    vec2 D = texelFetch(iChannel0, ivec2(0,3), 0).xy;    \n    \n    vec2 E = mix(A, B, t);\n    vec2 F = mix(B, C, t);\n    vec2 G = mix(C, D, t);\n    vec2 H = mix(E, F, t);\n    vec2 I = mix(F, G, t);\n    \n    vec2 P = A*pow(1.-t, 3.) + 3.*B*(t - 2.*t*t + t*t*t) + 3. * C * (t*t - t*t*t) + D * t*t*t;\n    vec2 dPdt = -3.*A*pow(1.-t, 2.) + 3.*B*(1.-4.*t+3.*t*t) + 3. * C * (2.*t - 3.*t*t) + 3. * D * t * t;\n    \n    \n    #ifdef accurate\n        x += thing(line(cuv, P-dPdt, P + dPdt));\n    #else\n        #ifndef minimal\n            x += thing(line(cuv, E, F));\n            x += thing(line(cuv, F, G));\n        #endif\n        x += thing(line(cuv, H, I));\n        #ifndef smooth\n            x += .5/r.y/pow(length(cuv - mix(H, I, t)), 2.);\n        #endif\n    #endif\n    \n\n    float f = (.1 + exp(-iTime)) / pieces;\n    O.w = min(1., old * (1.-f) / exp(old*.1) + x * f);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float pieces = 50.;\n#define r iResolution.xy\n\n//#define minimal\n//#define smooth\n//#define accurate",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}