{
    "Shader": {
        "info": {
            "date": "1717495538",
            "description": "Made from Art of Code tutorial on starfields: https://www.youtube.com/watch?v=rvDo9LvfoVE",
            "flags": 0,
            "hasliked": 0,
            "id": "MXy3WR",
            "likes": 1,
            "name": "Another starfield",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "stars"
            ],
            "usePreview": 0,
            "username": "refler",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "#define LAYER 3.\nvec3 palette (float t){\n    vec3 a = vec3 ( 0.698,0.500,0.500 );\n    vec3 b = vec3 ( 0.358,0.222,0.300 );\n    vec3 c = vec3 ( 0.308,0.028,0.528 );\n    vec3 d = vec3 ( -0.112,0.333,0.998 );\n\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\nmat2 rot(in float t)\n{\n    return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nvec3 Star(in vec2 uv, in float n)\n{\n    vec2 uv0 = uv;\n\n    vec3 color = vec3(0.0);\n    vec3 finalcolor = vec3(0.0);\n    for (float i = 0.0; i < 3.0; i++) {\n        float rand_time = iTime*n;\n        uv = rot(0.5*rand_time)*uv;\n        \n        float d = smoothstep(-1.0,1.0,abs(sdStar5(uv,0.4,0.4)-0.2)-0.1);\n        float d1 = fract(5.0*(sdStar5(uv,0.4,0.4)-0.3));\n        vec3 col = palette(length(uv) + 0.8*i+ rand_time*0.4 + n );\n        \n        d = sin(d*8.0 + rand_time + 0.2*i)/8.0;\n        d = abs(d);\n\n        d = 0.01/d;\n        color += 0.5*col*d;\n        color += 0.1*col*d1;      \n    }\n    float rays = max(0.0,1.0 - abs(uv0.x*uv0.y*2000.0));\n    finalcolor = color*rays*3.0;\n    uv0 = uv0 * rot(3.1415/4.0);\n    rays = max(0.0,1.0 - abs(uv0.x*uv0.y*1000.0));\n    finalcolor += color*rays*0.5;\n    finalcolor *= smoothstep(0.2,0.02,length(uv0));\n    return finalcolor;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 starlayer(in vec2 uv)\n{\n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    vec3 col = vec3 (0.0);\n    for (int y = -1; y <= 1; y++){\n        for (int x = -1; x <= 1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            col += Star(gv-vec2(n-0.5,fract(n*34.0)-0.5)-offs,n);\n            col *= sin(iTime*2.0+n*6.28)*0.5+1.0;\n        }\n    }\n    // if (gv.x>0.48 || gv.y>0.48) col.r = 1.0;\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy-iResolution.xy*0.5)/iResolution.y;\n    uv += M*4.0;\n    uv = uv*5.0;\n    float t = 0.02*iTime;\n    vec3 col = vec3(0.0);\n    \n    for (float i = 0.0; i < LAYER; i+=1./LAYER) {\n        float deapth = fract(i+t);\n        float fade = deapth*smoothstep(1.0,0.9,deapth);\n        float sacle = mix (3.0,0.5,deapth);\n        \n        col += starlayer(uv*sacle*rot(t)+i*456.0-M)*fade;\n    }\n\n    \n    fragColor = vec4 (col, 1 );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}