{
    "Shader": {
        "info": {
            "date": "1717829351",
            "description": "creation and combination",
            "flags": 1,
            "hasliked": 0,
            "id": "X3K3zy",
            "likes": 4,
            "name": "star and fbm",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nnew",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "/*thanks for originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/4tyfWy*/\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nuniform float time;\nuniform vec2 resolution;\n#define time iTime\n#define resolution iResolution.xy\nmat3 roty(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(\n        1, 0, 0,\n        0, c, -s,\n        0, s, c\n    );\n}\n\nmat3 rotY(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(\n        c, 0, -s,\n        0, 1, 0,\n        s, 0, c\n    );\n}\nfloat rand2(vec2 n) {\n    return fract(cos(dot(n, vec2(2.9898, 20.1414))) * 5.5453);\n}\n\nfloat noise2(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.000002), fract(n));\n    return mix(mix(rand2(b), rand2(b + d.yx), f.x), mix(rand2(b + d.xy), rand2(b + d.yy), f.x), f.y);\n}\n\nfloat fbm2(vec2 n){\n    float total=0., amplitude=2.5;\n    for (int i=0;i<18;i++){\n        total+=noise2(n)*amplitude;\n        n+=n;\n        float t = sin(time) * .07 + .49;\n        amplitude*=t;\n    }\n    return total;\n}\n\nfloat random(vec2 pos) {\n    return fract(sin(dot(pos.xy, vec2(13969.96898, 78.233))) * 436758.5453123);\n}\n#define NUM_OCTAVES 8\nfloat noise(vec2 pos) {\n    vec2 i = floor(pos);\n    vec2 f = fract(pos);\n    float a = random(i + vec2(0.0, 0.0));\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 pos) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n    for (int i = 0; i < NUM_OCTAVES; i++) {\n        v += a * noise(pos);\n        pos = rot * pos * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.05),sin(iTime*0.05),-sin(iTime*0.05) ,cos(iTime*0.05));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\t\n\n\tvec2 p = (gl_FragCoord.xy * 3.0 - resolution.xy) / min(resolution.x, resolution.y);\n const vec3 c1=vec3(0.502, 0.1059, 0.1059);\n    const vec3 c2=vec3(167./255., 93./255., 110./255.);\n    const vec3 c3=vec3(0.4902, 0.5333, 0.4902);\n    const vec3 c4=vec3(0.2118, 0.3451, 0.2706);\n    const vec3 c5=vec3(0.3176, 0.2549, 0.4);\n    const vec3 c6=vec3(0.8, 0.3569, 0.3569);\n\n    vec2 p3=gl_FragCoord.xy*10./resolution.xx;\n    float q2=fbm2(p3-time*.07);\n    vec2 r2=vec2(fbm2(p3+q2+time*-0.4-p3.x-p3.y), fbm2(p3+q2-time*0.3));\n    vec3 c=mix(c1, c2, fbm2(p+r2))+mix(c3, c4, r2.x)-mix(c5, c6, r2.y);\n    float grad=gl_FragCoord.y/resolution.y;\n    float t = 0.0, d;\n\n    float time2 = 1.0 * time / 2.0;\n\n    vec2 q = vec2(0.0);\n    q.x = fbm(p + 0.00 * time2);\n    q.y = fbm(p + vec2(1.0));\n    vec2 r = vec2(0.0);\n    r.x = fbm(p + 1.0 * q + vec2(1.7, 9.2) + 0.15 * time2);\n    r.y = fbm(p + 1.0 * q + vec2(8.3, 2.8) + 0.126 * time2);\n    float f = fbm(p + r);\n    \n    // Schwarz dominanter machen\n    vec3 color = mix(\n        vec3(0.0),\n        vec3(0.6, 0, 1),\n        clamp((f * f) * 4.0, 0.0, 10.0)\n    );\n\n    color = mix(\n        color,\n        vec3(0.0),\n        clamp(length(q), 0.0, 10.0)\n    );\n\n    color = mix(\n        color,\n        vec3(0, .3, .5),\n        clamp(length(r.x), 0.0, 10.0)\n    );\n\n    color = (f * f * f + 1.8 * f * f + 0.9 * f) * color;\n\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from*color, dir);\n    fragColor+=vec4(c*vec3(1.0,0.1,0.5),1.);\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor+= vec4(happy_star(uv, anim) * vec3(0.5,0.5,0.55)*0.2, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}