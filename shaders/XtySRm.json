{
    "Shader": {
        "info": {
            "date": "1483552833",
            "description": "Playing with texture as noise and color, as well as basic multisampling / smoothing and a fade in/out effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtySRm",
            "likes": 4,
            "name": "Nighttime Sand Dunes",
            "published": 3,
            "tags": [
                "noise",
                "terrain",
                "texture",
                "parallax",
                "fade"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 963
        },
        "renderpass": [
            {
                "code": "// #define FADES 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float time = iTime * 1.;\t\t\t\t\t\t\t\t\t// adjust time\n    vec2 uv = fragCoord.xy / iResolution.y;\t\t\t\t\t\t\t// fix aspect ratio\n    vec2 sampleBgPos = (uv * 0.05) + vec2(time * 0.001, 0);\t\t\t\t// sky texture sampling position\n    vec3 sampleBgColor = texture(iChannel2, sampleBgPos).rgb * 0.5; \t// night sky\n    vec3 col = sampleBgColor;\t\t\t\t\t\t\t\t\t\t// default background color\n    vec2 moonPos = vec2(0.2, 0.8 + 0.01 * sin(time * 3.));\t\t\t// moon position\n    float moonRadius = 0.08 + 0.01 * sin(time);\t\t\t\t\t\t// moon size\n    float moonGlowRadius = moonRadius * 3.;\t\t\t\t\t\t\t// moon glow size\n    if(distance(uv, moonPos) < moonRadius) {\t\t\t\t\t\t// moon distance check\n        col = vec3(0.65);\t\t\t\t\t\t\t\t\t\t\t// moon color\n    } else if(distance(uv, moonPos) < moonGlowRadius) {\t\t\t\t// moon glow distance check\n        float interp = distance(uv, moonPos) / moonGlowRadius;\t\t// check distance to mix glow with background color\n        col = mix(vec3(0.65), col, interp);\t\t\t\t\t\t\t// moon glow color\n    }\n    const int mountainLayers = 5;\t\t\t\t\t\t\t\t\t// mountains\n    for(int i=0; i < mountainLayers; i++) {\t\t\t\t\t\t\t// sample texture, moving down per layer\n        float horizSpeed = time / (1000. - 200. * float(i));\t\t// parallax speed per layer\n        float horizFreq = uv.x / (100. - 10. * float(i));\t\t\t// spread out the peaks & valleys\n        float ySamplePos = 0.1 + float(i) * 0.1;\t\t\t\t\t// sample further down the texture for each layer\n        vec2 samplePos = vec2(horizSpeed + horizFreq, ySamplePos);\t// texture sampling position\n        vec3 sampledColor = texture(iChannel0, samplePos).rgb;\t// get texture color\n        float noise = sampledColor.r;\t\t\t\t\t\t\t\t// use red for noise; 0-1\n        // smoothing: average the nearest horizontal samples\n        float smoothDistStep = 0.02;\n        const int smoothSteps = 20;\n        float smoothStepsF = float(smoothSteps);\n        for(int j=0; j < smoothSteps; j++) {\n            float sampleX = (horizSpeed + horizFreq) - (smoothDistStep * smoothStepsF/2.) + float(j) * smoothDistStep;\n            vec2 smoothSamplePos = vec2(sampleX, ySamplePos);\n            noise += texture(iChannel0, smoothSamplePos).r;\n        }\n        noise /= (smoothStepsF * 0.7);\n        // end smoothing\n        noise *= 0.7;\t\t\t\t\t\t\t\t\t\t\t\t// shrink overall mountain size a bit\n        noise *= 1. - float(i) * 0.1; \t\t\t\t\t\t\t\t// shrink mountains moving forward through layers\n        if(uv.y < noise) {\t\t\t\t\t\t\t\t\t\t\t// are we below current mountain layer?\n            float colorAdjust = 0.3 + float(i) * 0.15;\t\t\t\t// adjust 2nd smapled color\n            vec3 mtnColor = texture(iChannel1, samplePos * vec2(0.3, 1.)).rgb;\t// get color from 2nd texture\n            col = mtnColor * colorAdjust;\t\t\t\t\t\t\t// lighter colors moving forward\n        }\n    }\n    col = smoothstep(0.05, 0.9, col); \t// adds contrast/saturation\n    #ifdef FADES\n        float loopSecs = 10.;\n        float fadeTime = 1.;\n        if(abs(mod(time, loopSecs)) < fadeTime * 2.) {\t\t// fade in/out for looping purposes\n            col = mix(vec3(0.), col, abs(-fadeTime + mod(time, loopSecs)));\t\n        }\n    #endif\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}