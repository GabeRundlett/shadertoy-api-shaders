{
    "Shader": {
        "info": {
            "date": "1528408519",
            "description": "Playing with the mouse gives new patterns",
            "flags": 64,
            "hasliked": 0,
            "id": "MdVfDR",
            "likes": 5,
            "name": "Alien Epitaph",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "kifs"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 605
        },
        "renderpass": [
            {
                "code": "#define EPS 0.002\n#define STEPS  64\n#define FAR   10.\n#define KIFS   30\n// Uncomment for a different pattern\n#define BOX\n\nmat2 rot( float a )\n{\n\n\treturn mat2( cos( a ), -sin( a ),\n\t\t         sin( a ),  cos( a )\n\t\t   );\n\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat map( vec3 p, out vec3 tra )\n{\n\n\tmat3 rota = mat3( 1.0 );\n    \n    float wav = texture( iChannel0, vec2( 0.0, 0.10 ) ).x * 0.05;\n    float fre = texture( iChannel0, vec2( 0.1, 0.20 ) ).x * 0.05;\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n\t\n\tfor( int i = 0; i < KIFS; ++i )\n\t{\n        \n        if( mou.x == 0.0 ) mou.x = sin( iTime * 0.1 + wav ); // max( cos( iTime * 0.15 + wav ), 1e-5 );\n        if( iMouse.z < 0.0 ) mou.x = sin( iTime * 0.1 + wav );\n        \n\t\tp = abs( p * rota - vec3( 0.1, 0.0, 0.0 ) );\n\t\tp.xy = p.yx;        \n\t\tp.xz *= rot( 1.8 + mou.x + fre );\n\t\tp.yx *= rot( 1.8 + mou.y + wav );\n        \n        if( p.z < 0.1 )\n        {\n        \n            tra = vec3( 2, 0, 0 ) * p.z * 2.0;\n            \n        }\n        else if( p.z < 0.2 )\n        {\n        \n            tra = mix( tra, vec3( 0.1, 0.6, 0.2 ) * p.z * 2.0, p.z );\n            \n        }\n        else if( p.z < 0.3 )\n        {\n        \n            tra = mix( tra, vec3( 0.1, 0.0, 0.2 ) * p.z * 2.0, p.z );\n            \n        }\n         \n\t}\n\t\n    #ifdef BOX\n    \n\treturn 1.0 - sdBox( p, vec3( 1.0 ) );\n    \n    #else\n    \n    return 1.0 - length( p );\n\n    #endif\n    \n}\n\nvec3 norm( vec3 p )\n{\n\n    vec3 tra = vec3( 0.0 );\n\tvec2 e = vec2( EPS, 0.0 );\n\treturn normalize( vec3( map( p + e.xyy, tra ) - map( p - e.xyy, tra ),\n\t\t\t                map( p + e.yxy, tra ) - map( p - e.yxy, tra ),\n\t\t\t                map( p + e.yyx, tra ) - map( p - e.yyx, tra )\n\t\t\t              )\n\t\t\t         );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n\tfloat t = 0.0; vec3 tra = vec3( 0.0 ); d = 0.0;\n\t\n\tfor( int i = 0; i < STEPS; ++i )\n\t{\n\t\n\t\td = 0.5 * map( ro + rd * t, tra );\n\t\tif( d < EPS || t > FAR ) break;\n\t\t\n\t\tt += d;\n\t\n\t}\n\t\n\treturn t;\n\n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0; vec3 tra = vec3( 0.0 );\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n        \n        float h = map( ro + rd * t, tra );\n        \n        if( h < 0.001 ) return 0.0;\n        res = min( res, 14.0 * h / t );\n        t += h;\n    \n    }\n    \n    return res;\n    \n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n\tfloat d = 0.0, t = ray( ro, rd, d );\n\tvec3 p = ro + rd * t;\n    vec3 tra = vec3( 0.0 );\n    float ma = map( p, tra );\n\tvec3 n = norm( p );\n\tvec3 lig = normalize( vec3( sin( iTime * 0.2 ), cos( iTime * 0.2 ), 0.1 ) );\n    vec3 blig = vec3( -lig );\n\tvec3 ref = reflect( rd, n );\n\tvec3 col = vec3( 0 );\n    \n\tfloat amb = 0.5 + 0.5 * n.y;\n\tfloat dif = max( 0.0,  dot( lig, n ) );\n    float bac = max( 0.0, 0.2 + 0.5 * dot( blig, n ) );\n\tfloat spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    float speO = pow( clamp( dot( ref, blig ), 0.0, 1.0 ), 16.0 );\n\tfloat sha = softShadows( p, lig );\n    float shaO = softShadows( p, blig );\n\t\n    col = tra;\n\tcol += 0.8 * amb;\n\tcol += 0.2 * dif * bac * sha * shaO;\n\tcol += 0.4 * spe;\n    col += 0.4 * speO;\n    \n    col *= sqrt( col );\n\t\n\treturn col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n\n    float wav = texture( iChannel0, vec2( 0.0, 0.10 ) ).x * 0.2;\n    \n\tvec2 uv = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n\n\t//vec3 ro = vec3( 0.0, 0.0, 3.0 * sin( iTime + wav ) );\n    //vec3 ro = vec3( 0.0, 0.0, 2.6 );\n\tvec3 ro = vec3( sin( iTime * 0.2 ), -wav, cos( iTime * 0.2 ) );\n    vec3 ww = normalize( vec3( 0 ) - ro );\n\tvec3 uu = normalize( cross( vec3( 0, 1, 0 ), ww ) );\n\tvec3 vv = normalize( cross( ww, uu ) );\n\tvec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n\t\n\t//vec3 rd = normalize( vec3( uv, -1.0 ) );\n\t\n\tfloat d = 0.0, t = ray( ro, rd, d );\n\t\n\tvec3 col = d < EPS ? shad( ro, rd ) : vec3( 0.0 );\n\n\tfragColor = vec4( vec3( col ), 1.0 );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 14862,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/kpedro/bassnectar-falling-ft-paper"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}