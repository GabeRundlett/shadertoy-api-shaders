{
    "Shader": {
        "info": {
            "date": "1629012218",
            "description": "Even more logarithmic spiraling",
            "flags": 0,
            "hasliked": 0,
            "id": "fdt3Rn",
            "likes": 13,
            "name": "Double Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "logarithm",
                "project"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "// \"Double Spiraling\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// (see \"Spiraling Out\" and \"Spiraling In and Out\")\n\n#define AA  1   // =0/1 - optional antialiasing\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvec3 ltDir;\nfloat tCur, dstFar, wSep;\nint idObj;\nconst float pi = 3.1415927;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, a, dc;\n  dMin = dstFar;\n  for (float k = -1.; k <= 1.; k += 2.) {\n    q = p;\n    q.x -= k * wSep;\n    r = length (q.xz);\n    if (r > 0.01) {\n      q.xz *= k;\n      dc = max (r - wSep - 0.45, min (r - wSep + 0.55, - q.z));\n      a = atan (q.z, q.x) / pi;\n      q.xz = fract (vec2 (pi * log (r) - 0.5 * a, -5. * a) + 0.5) - 0.5;\n      if (r < 1.) q.y /= sqrt (r);\n      d = max (r * PrRoundBox2Df (vec2 (q.x, q.y - 0.12), vec2 (0.18, 0.1), 0.02), dc);\n      DMIN (1);\n      d = max (r * PrRoundCylDf (vec3 (q.x, q.y - 0.44, fract (2. * q.z - 0.7 * k * tCur +\n         0.5) - 0.5).xzy, 0.13, 0.04, 0.2), dc);\n      DMIN (2);\n    }\n  }\n  return 0.1 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 300; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, nDotL;\n  wSep = 5.77;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj >= dstFar && rd.y < 0.) {\n    dstObj = - ro.y / rd.y;\n    idObj = 3;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = (idObj != 3) ? ObjNf (ro) : vec3 (0., 1., 0.);\n    if (idObj == 1) col4 = vec4 (0.1, 0.3, 0.8, 0.1);\n    else if (idObj == 2) col4 = vec4 (0.9, 0.8, 0.8, 0.3);\n    else if (idObj == 3) col4 = vec4 (0.2, 0.5, 0.2, 0.05);\n    if (idObj <= 2) col4 = mix (vec4 (0.2, 0.5, 0.2, 0.05), col4,\n       smoothstep (0.05, 0.1, length (vec2 (abs (ro.x) - wSep, ro.z))));\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj == 2) nDotL *= nDotL;\n    col = col4.rgb * (0.2 + 0.8 * nDotL) + col4.a * pow (max (dot (ltDir,\n       reflect (rd, vn)), 0.), 32.);\n  } else {\n    col = vec3 (0.5);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.25 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.35 * pi, -0.15 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -30.);\n  zmFac = 4.;\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}