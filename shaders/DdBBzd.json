{
    "Shader": {
        "info": {
            "date": "1689998156",
            "description": "A simple outrun-inspired scene with 3D terrain.",
            "flags": 32,
            "hasliked": 0,
            "id": "DdBBzd",
            "likes": 5,
            "name": "Fork Outrun Sce Sandoriel 039",
            "published": 3,
            "tags": [
                "3d",
                "retro",
                "outrun",
                "vaporwave"
            ],
            "usePreview": 0,
            "username": "Sandoriel",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "// A loose adaptation of noobdawn's \"Vaporwave Outrun\"\n// https://www.shadertoy.com/view/sscSWn\n\nconst float warp = 0.0;\nconst float scan = 0.2;\nconst float aberration = 8.0;\n\nvec4 crt(in vec2 fragCoord, in vec3 color, in vec2 uv) {\n    \n    vec2 dc = abs(0.5 - uv);\n    dc *= dc;\n    \n    uv.x -= 0.5; \n    uv.x *= 1.0 + (dc.y * (0.3 * warp));\n    uv.x += 0.5;\n    \n    uv.y -= 0.5; \n    uv.y *= 1.0 + (dc.x * (0.4 * warp));\n    uv.y += 0.5;\n\n    if (uv.y > 1.0 || uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0) return vec4(0.0, 0.0, 0.0, 1.0);\n    else return vec4(mix(color, vec3(0.0), abs(sin(fragCoord.y) * 0.5 * scan)), 1.0);\n    \n}\n\n// https://www.shadertoy.com/view/4dXXDl\nvec4 chromoAberration(in vec2 uv) {\n\n    vec2 texel = 1.0 / iResolution.xy;\n    \n    vec2 coords = (uv - 0.5) * 2.0;\n    float coordDot = dot(coords, coords);\n    \n    vec2 uvOffset = aberration * coordDot * coords;\n    vec2 uvR = uv - texel.xy * uvOffset;\n    vec2 uvB = uv + texel.xy * uvOffset;\n    \n    vec4 newColor = vec4(0.0, 0.0, 0.0, 1.0);\n    newColor.r = texture(iChannel0, uvR).r;\n    newColor.g = texture(iChannel0, uv).g;\n    newColor.b = texture(iChannel0, uvB).b;\n    return newColor;\n    \n}\nvec4 gradient(in vec2 uv,in vec4 image){\n\n    vec2 center = (uv - 0.5);\n    center = center * 2.0;\n    float d = length(center);\n    \n    \n    d = -d + 1.1;\n    image = image * d;\n    return image;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 image = chromoAberration(uv);\n    image = crt(fragCoord, image.rgb, uv);\n    image = gradient(uv, image);\n    \n    fragColor = image;\n    //fragColor = texture(iChannel0,uv);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float lerp(in float a, in float b, in float t) {\n    return (1.0 - t) * a + t * b;\n}\n\nvec2 lerp(in vec2 a, in vec2 b, in float t) {\n    return (1.0 - t) * a + t * b;\n}\n\nvec3 lerp(in vec3 a, in vec3 b, in float t) {\n    return (1.0 - t) * a + t * b;\n}\n\nvec4 lerp(in vec4 a, in vec4 b, in float t) {\n    return (1.0 - t) * a + t * b;\n}\n\nfloat scale(in float n, in float imin, in float imax, in float omin, in float omax) {\n    return (n - imin) * (omax - omin) / (imax - imin) + omin;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define PI 3.14159265358979\n#define ANIM_SPEED 0.5\n#define GRID 32.0\n#define RAY_STEP 0.005\n#define NEAR_PLANE 1.0\n#define FAR_PLANE 512.0 \n#define TERRAIN_HEIGHT 0.33\n\nstruct Raycast {\n    bool hit;\n    vec3 position;\n};\n\nvec3 background(in vec3 direction, in float mouse) {\n    return lerp(vec3(0.8, 0.45, 0.8), vec3(0.2, 0.1, 0.6), abs(direction.y)) * ((mouse + 0.5) * 0.75 + 0.25);\n}\n\nRaycast raycastTerrain(in vec3 origin, in vec3 direction) {\n    \n    // init raycast result\n    Raycast raycast = Raycast(\n        false,\n        vec3(0.0, 0.0, 0.0)\n    );\n    \n    // the height of the terrain at the previous ray step\n    float prevHeight = 0.0;\n    \n    // cast ray\n    for (float i = NEAR_PLANE; i <= FAR_PLANE; i++) {\n    \n         // get current position along ray\n        raycast.position = origin + direction * RAY_STEP * i;\n        \n        // sample terrain height from texture\n        float height = texture(iChannel0, raycast.position.xz / 16.0).x * TERRAIN_HEIGHT;\n        \n        // make valley along x axis flat\n        height *= clamp(pow(abs(raycast.position.x - origin.x) * 1.66, 1.5), 0.0, 1.0);\n        \n        // if ray is clipping terrain\n        if (raycast.position.y < height) {\n        \n            // move back along ray one step\n            vec3 prevPos = raycast.position - direction * RAY_STEP; \n            \n            // find y offset from the terrain of both points along ray\n            float prevOffset = prevPos.y - prevHeight;\n            float currOffset = height - raycast.position.y;\n            \n            // interpolate between offsets to find terrain surface intersection\n            float t = prevOffset / (prevOffset + currOffset);\n            raycast.position = prevPos + direction * RAY_STEP * t;\n            \n            // mark as hit\n            raycast.hit = true;\n            return raycast;\n            \n        }\n        \n        // cache current terrain height\n        prevHeight = height;\n        \n    }\n    \n    return raycast;\n    \n}\n\nvec3 terrainColor(in vec3 cameraPosition, in vec3 rayPosition, in vec3 backgroundColor, in float mouse) {\n    \n    // grid lines\n    float fx = abs(fract(rayPosition.x * GRID + 0.5) - 0.5);\n    float fz = abs(fract(rayPosition.z * GRID + 0.5) - 0.5);\n\n    // grid line color\n    vec3 gridLineColor = vec3(0.3, 0.2, 0.6);\n    // current background color\n    vec3 bg = pow(backgroundColor, vec3(3.0, 3.0, 2.0));\n    \n    // the distance along the current ray as a 0 -> 1 mask \n    float dist = length(rayPosition.xz - cameraPosition.xz) * 0.125;\n    dist = clamp(dist, 0.0, 1.0);\n    \n    // the current color\n    vec3 color = bg * dist + gridLineColor * (1.0 - dist);\n    \n    // basic post-processing\n    float sweepingLight = texture(iChannel0, rayPosition.xz / 64.0 + vec2(0.0, -iTime * 0.01)).x * 0.5 + 0.5;\n    float lineGlow = abs(rayPosition.z - cameraPosition.z) + 0.25;\n    color /= min(sweepingLight, lineGlow);\n    \n    // apply grid\n    dist = min(fx, fz);\n    \n    // reduce line spread\n    dist = smoothstep(dist, 0., 0.02);\n    \n    // apply grid mask to background\n    vec3 result = bg * dist;\n    \n    // add grid color with grid mask\n    result += color * (1.0 - dist);\n    \n    return result;\n}\n\nconst vec3 SUN_DIR = normalize(vec3(0.0, 0.1, 1.0));\nconst vec4 SUN_COLOR_TOP = vec4(1.0, 0.0, 0.5, 1.0);\nconst vec4 SUN_COLOR_BOTTOM = vec4(2.0, 2.0, 0.0, 1.0);\n\nvec4 sun(in vec3 direction, in float animSpeed, in float mouse) {\n\n    mouse = clamp(mouse, -0.5, 0.125);\n\n    vec3 sunDir = SUN_DIR;\n    sunDir.y += mouse - 0.1;\n    \n    float sunMask = pow(smoothstep(0.95, 0.9, dot(direction, sunDir)), 0.125);\n\n    // generate horizontal cuts\n    float cut = 3.0 * sin((direction.y + iTime * animSpeed * 0.125) * 75.0) * (1.0 - sunMask);\n    cut += clamp((direction.y - mouse + 0.1) * 14.0 + 1.5, -7.0, 7.0);\n        \n    cut = clamp(cut, 0.0, 1.0);\n\n    // interpolate between top and bottom colors and masking cut lines\n    float a = abs(direction.y) + mouse;\n    vec4 color = lerp(SUN_COLOR_TOP, SUN_COLOR_BOTTOM, a);\n    color.a = lerp(color.a * cut, 0.0, sunMask);\n    return color * (mouse + 1.0);\n    \n}\n\n// generates ray direction at clipspace coordinate with camera settings\nvec3 perspective(in vec2 clip, in vec3 target, in vec3 position, in float fov, in vec3 up) {\n    vec3 w = normalize(target - position);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = normalize(cross(u, w));\n    return vec3(normalize(clip.x * u + clip.y * v + fov * w));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 clip = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // mouse input is inverted to ensure that the sun is above the horizon on shader load\n    float mouse = clamp((1.0 - (iMouse.y / iResolution.y)) - 0.5, -0.5, 0.5);\n    float animSpeed = ANIM_SPEED * mouse;\n    \n    float deltaZ = iTime * ANIM_SPEED;\n    vec3 cameraPosition = vec3(0.0, 0.1, deltaZ - 1.0);\n    vec3 cameraTarget = vec3(0.0, 0.1, deltaZ);\n    \n    vec3 raydir = perspective(clip, cameraTarget, cameraPosition, 1.25, vec3(0.0, 1.0, 0.0));\n    \n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    vec3 background = background(raydir, mouse);\n    Raycast raycast = raycastTerrain(cameraPosition, raydir);\n    vec3 terrain = terrainColor(cameraPosition, raycast.position, background, mouse);\n    if (raycast.hit) color = vec4(terrain, 1.0);\n    else {\n        vec4 sun = sun(raydir, animSpeed, mouse);\n        color = vec4(background * (1.0 - sun.w) + sun.xyz * sun.w, 1.0);\n    }\n    \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}