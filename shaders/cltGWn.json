{
    "Shader": {
        "info": {
            "date": "1682234501",
            "description": "A zellij tile pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "cltGWn",
            "likes": 2,
            "name": "Zellij pattern 8 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "zellige"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //max(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n        //fract(a+fract(a*2.+.5))\n        //fract(a+fract(a*2.+.5)/2.)\n        //fract(a+fract(a*2.)/2.)\n        //fract(a-fract(a*4.)/2.)\n        //fract(a+fract(a))\n        //fract(a+fract(a/4.))\n        //abs(fract(a)+fract(a/16.)/16.)/(1.+1./16.)\n        //mod(a*sign(1.-2.*mod(floor(a/2.),2.)),4.)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //-vec2(1.,0.5)\n        //vec2(1.+sign(a.x)/2.,0.5-sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\n\nfloat binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = .5;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.y += (iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    bool b = true;\n    uv = mod(uv,1.);\n    for(int k = 0; k < 6; k++){\n        uv =\n            abs(.5-uv-t2*sign(uv.y-uv.x))/1.5\n            //abs(.5*sign(t2.y-t2.x)-uv-t2*sign(uv.y-uv.x))/1.5\n        ;\n        \n        //WOW!\n        //uv = (fract(vec2(uv+vec2(.5,1.5))*2.)-.5)/2.;\n        \n        b =\n            uv.y<uv.x\n            //uv.y<uv.x && t2.y<t2.x\n        ;\n        //uv += binary_digit(k,2)/2.;\n        if(b)\n            uv = uv.yx\n            //uv.x -= .5\n            //uv.y += .5\n        ;\n        t2 =\n            triangle_wave(uv-.5*sign(uv.x-uv.y)).yx\n        ;\n        uv =\n            t2-triangle_wave(uv.yx).yx\n        ;\n        col.x =\n            max(sign(uv.x),col.x)\n            //max(sign(uv.x),1.-col.x)\n            //abs(sign(uv.x)-col.x)/2.\n        ;\n        //col = vec3(col.zx,abs(uv.x*sign(t2.x-t2.y)-uv.y));\n        \n        //awesome kaleidoscope effect!\n        //if(t2.y>t2.x) {t2 = t2.yx; uv=uv.yx-iTime/8.;}\n        \n        //if(t2.x>t2.y)\n        col.xyz =\n            abs(col.yzx-float(b)/2.)\n        ;\n        //if(uv.x<uv.y) uv.x += .5;\n    }\n    if (!b) col = abs(1.-col);\n    fragColor = vec4(min(col,vec3(1.)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod2(float a, float b){\n    return b*mod(floor(a),b);\n}\n\nfloat sqmod(float a, float b){\n    float m1 = mod(floor(a),b);\n    return floor(m1*m1/b);\n}\n\nfloat mod1(float a, float b){\n    return\n        mod(a,b)\n        //mod(a+mod(a/2.,3.)*2.-mod(a/2.,5.)*2.,b)\n        //floor(mod(floor(a+floor(a)/8.),b))\n    ;\n}\n\n\nfloat fmod(float a, float b){\n    //a += (mod(floor(a)/2.,5.)-mod(floor(a)/2.,3.))*2.;\n    \n    //a += mod(-a/2.,2.)*mod(b/2.,2.);\n    //a -= fmod2(a/6.,6.);\n    //a += fmod2(a*b/8.,8.)/8.;\n    \n    //a += floor(a/2.);\n\n    /*\n    for(int i = 0; i < 3; i++){\n        a += floor(a/4.);\n    }\n    */\n    //a = a/2. + floor(a/b)/b*8.;\n    /*\n    for(float a2 = 64.*2.; a2 < 128.*2.; a2 *= 2.){\n        a += mod(floor(a/a2),2.)+mod(floor(a/a2/2.),3.)+mod(floor(a/a2/4.),4.);\n        a /= 1. + mod(floor(a),2.);\n    }\n    */\n    //a -= floor(a*pow(2.,b)/2./128.);\n    //a += pow(2.,mod(floor(a/8.),8.));\n    //a = (a/2. + pow(2.,mod(floor(a/2.),3.)))/2.;\n    return\n        mod1(floor(a),b)\n        //mod(floor(a/2.)+2.,b)\n        //mod(floor(mod(floor(a/8.)+floor(a/4.),b)),4.)\n        //floor(abs(mod(floor(a),b*b))/b)\n        //mod(floor(a/pow(2.,mod(floor(a/b),2.))),b)\n        //mod(floor(floor(floor(a)*b)/4.),b)\n        //abs(b-mod(floor(a/b),b*2.))\n        //floor(mod(floor(a),b)*mod(floor(a+b),b*2.)/b)\n        \n        //mod(mod(floor(a)*floor(a)+floor(a)*2.,(b)*2.+floor(a)*b),b)\n        //mod(mod(floor(-a/4.),b*2.),8.)\n        //mod(mod(floor(a),floor(a/b)+b),b)\n        //mod(mod(floor(a/2.+4.),floor(a/8.+4.)),b)\n        //floor(mod(floor(a),b)-mod(floor(a),b/2.))\n        //mod(floor(a+mod(floor(a/8.*b),b)),b)\n        //min(mod(floor(a*b/4.),b),mod(floor(a/b*2.),b))\n        //mod(floor(a+floor(pow((1.5),b))),b)\n        //mod(mod(floor(a),b)*(mod(floor(a/b),b)),b)\n        //mod(floor(a/pow(floor(1.+mod(a/2.,2.)),mod(floor(a/4.),2.))),b)\n        //mod(mod(floor(a),b)*(mod(floor(a/b),b)),b)\n        //floor(sqrt(mod(floor(a*2./b)*floor(a*8./b/b),b*b)))\n        //mod(floor(a*sign(1.-2.*mod(floor(a/8.),2.))),b)\n    ;\n}\n\nfloat prime_rhythm(float time){\n    return (1.+fmod(time/2.,2.))*(1.+fmod(time/3.,2.))*(1.+fmod(time/5.,2.))*(1.+fmod(time/7.,2.));\n}\n\nfloat fract1(float a){\n    return\n        //sqrt(fract(a))\n        //fract(a)*fract(a)\n        abs(fract(a)+.25)/1.25\n        //fract(a/(1.+fmod(a*8.,2.))/2.)\n        //fract(a+fract(a*2.)/2.)\n    ;\n}\n\nvec2 mainSound(int samp, float time){\n  float s1 =\n      4.*pow(2.,fmod(1.+time/2./8.,2.)),\n  s2 = 8.,\n  m0 = pow(2.,fmod(time/s1,2.)),\n  t = time/m0/2.,\n  m1 = fmod(t,s1);\n  t =\n      s1*pow(2.,fmod(t*4.+m1,2.))*t/(1.+fmod(m1+floor(t*2.)+floor(t/2.),2.))\n      //s1*pow(2.,fmod(t*4.,2.))*t/(1.+fmod(floor(t),2.))\n  ;\n  \n  /*\n  for(int i = 0; i < 3; i++){\n      t += mod(floor(t),2.)/2.;\n  }\n  */\n  //t += floor(t/m0/2.);\n  float\n  m3 =\n      floor(fmod(time*m0*s1,s1)/2.)\n      //floor(fmod(time*m0*s1,s1)/(2.+m0))\n  ;\n  float m2 =\n      1. + fmod(t,s1/2.);\n  ;\n  float a=\n      128.*pow((1.-sqrt(fract1(t)/2.))/2.,2.)\n      //pow(2.,2.-log(fract(t)))\n  ;\n  float nb =\n      time*pow(2.,(m3+m2-m1)/5.+8.)\n      //pow(2.,mod(floor(t/8.),1.+m3+m2+m1)/5.+8.)\n  ;\n  return\n      abs(.5-1.*vec2(fract1(nb*.998),fract1(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}