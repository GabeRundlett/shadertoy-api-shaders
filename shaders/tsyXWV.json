{
    "Shader": {
        "info": {
            "date": "1574994239",
            "description": "just a harmless propellor SDF\n[url]https://twitter.com/c010011012/status/1075614344363175936[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tsyXWV",
            "likes": 8,
            "name": "rolling shutter isosurfaces",
            "published": 3,
            "tags": [
                "4d",
                "rollingshutter"
            ],
            "usePreview": 0,
            "username": "cmarangu",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": "// i know more\nconst float PI = 3.141592653589793;\n\nvec3 sund () {\n    // return normalize(\n    //     vec3(\n    //         cos(iTime*1.+PI*.5),\n    //         1.,\n    //         sin(iTime*1.+PI*.5)\n    //     )\n    // );\n    return normalize(\n        vec3(\n            -3.,\n            3.,\n            2.\n        )\n    );\n}\n\nvec3 skycol (vec3 d) {\n    return vec3(.5, .8, .9)+pow(clamp(dot(sund(), d), 0., 1.), 300.)*2.;\n}\n\nfloat SDFobj (vec3 p) {\n    float arg = mod(iTime*2., 2.)/2.;\n    float arg2 = mod(iTime, 10.)/10.;\n    float par = arg2 < .5 ? arg2*2. : 1.-(arg2-.5)*2.;\n    par = clamp((par-.5)*3.+.5, 0., 1.);\n    par = smoothstep(0., 1., par)*.7;\n    float SDFobjp = 1e4;\n    // center\n    SDFobjp = min(SDFobjp, length(p-vec3(0., 3., 0.))-.5 );\n    // petal\n    float p_yx = atan(p.y-3., p.x);\n    float p_yxr = length(vec2(p.y-3., p.x));\n    p_yx = mod(p_yx+arg*PI*2./6.-(p.y-3.)*par, PI*2./6.)-PI/6.;\n    vec3 q = vec3(p_yxr*cos(p_yx), p_yxr*sin(p_yx), p.z);\n    SDFobjp = min(SDFobjp, length(vec3(q.x/4.-.56, q.y*2., q.z*1.)-vec3(0., 0., 0.))-.5 );\n    return SDFobjp;\n}\n\nfloat SDFfloor (vec3 p) {\n    return p.y+sin(p.x*20.+sin(p.z*10.))*.02*0.;\n}\n\nfloat SDF (vec3 p) {\n    float SDFp = 1e40;\n    SDFp = min(SDFp, SDFobj(p));\n    SDFp = min(SDFp, SDFfloor(p));\n    return SDFp;\n}\n\nvec3 dSDF (vec3 p) {\n    float SDFp = SDF(p);\n    return normalize(\n        vec3(\n            SDF(vec3(p.x+1e-4, p.y, p.z))-SDFp,\n            SDF(vec3(p.x, p.y+1e-4, p.z))-SDFp,\n            SDF(vec3(p.x, p.y, p.z+1e-4))-SDFp\n        )\n    );\n}\n\nint idSDF (vec3 p) {\n    if (SDFobj(p) < SDFfloor(p)) {\n        return 1;\n    }\n    return 0;\n}\n\nfloat SHADOW_MARCH (vec3 p) {\n    p = p+sund()*.1;\n    float closestDE = 1e3;\n    for (float i=0.; i<35.; ++i) {\n        float SDFp = SDF(p);\n        if (SDFp < 1e-2) {\n            return .8;\n        }\n        p = p+sund()*SDFp*.99;\n        closestDE = min(closestDE, SDFp);\n        if (SDFp > 7.) {\n            break;\n        }\n    }\n    return 1.;\n}\n\nvec3 TEX (vec3 p, vec3 d) {\n    int idSDFp = idSDF(p);\n    vec3 dSDFp = dSDF(p);\n    vec3 r = reflect(d, dSDFp);\n    vec3 TEXp = vec3(1.)*(.8+.2*sin(p.x*16.+sin(p.z)*6.));\n    if (idSDFp == 1) {\n        TEXp = vec3(0., .7, .7);\n    }\n    // just some pureley artistic-based lighting\n    // becasue i cant figure out this BRDF thinh\n    float lighting = 0.;\n    lighting += clamp(dot(sund(), dSDFp), 0., 1.)*.3;\n    lighting += clamp(dot(sund(), dSDFp)*.2+.4, 0., 1.);\n    // lighting += clamp(1.-dot(r, dSDFp), 0., 1.)*.3;\n\tlighting = clamp(lighting, 0., 1.);\n    float spec = pow(clamp(dot(sund(), r), 0., 1.), 2.)*.25;\n    if (idSDFp == 1) {\n        spec = pow(clamp(dot(sund(), r), 0., 1.), 3.)*.75;\n    }\n    if (idSDFp == 0) {\n        lighting *= SHADOW_MARCH(p);\n        spec *= SHADOW_MARCH(p);\n    }\n\treturn vec3(\n        clamp(TEXp.r*lighting+spec, 0., 1.),\n        clamp(TEXp.g*lighting+spec, 0., 1.),\n        clamp(TEXp.b*lighting+spec, 0., 1.)\n    );\n}\n\nvec3 march (vec3 p, vec3 d) {\n    float compoundedD = 0.;\n    float rxcount = 0.;\n    float rxindex = .3;\n    vec3 finalcol = vec3(0.);\n    for (float i=0.; i<60.; ++i) {\n        float SDFp = SDF(p);\n        float DE = SDFp;\n        DE *= .9;\n        if (SDFp < 1e-2) {\n            p = p+d*SDFp*.999;\n            int idSDFp = idSDF(p);\n            vec3 TEXpd = TEX(p, d);\n            if (idSDFp == 0) {\n                finalcol = TEX(p, d);\n                d = reflect(d, dSDF(p));\n                p = p+d*.1;\n                ++rxcount;\n                continue;\n            }\n            if (rxcount == 0.) {\n                return TEX(p, d);\n            }\n            return finalcol*(1.-rxindex)+rxindex*TEX(p, d);\n        }\n        p = p+d*DE;\n        compoundedD += DE;\n        if (compoundedD > 20. || SDFp > 7.) {\n            break;\n        }\n    }\n    if (rxcount > 0.) {\n        finalcol = (1.-rxindex)*finalcol+rxindex*skycol(d);\n        return finalcol;\n    }\n    return skycol(d);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 maus = iMouse.xy;\n    if (maus.x == 0.) { maus.x = iResolution.x/2.+iResolution.x*.04; }\n    if (maus.y == 0.) { maus.y = iResolution.y/2.+iResolution.y*.07; }\n    vec2 screen = (fragCoord*2.-iResolution.xy)/iResolution.x;\n    vec3 dir1 = vec3(screen.x, screen.y, 1.);\n    dir1 = normalize(dir1);\n\tfloat dir1zytheta = atan(dir1.z, dir1.y);\n    float dir1zyr = sqrt(dir1.z*dir1.z+dir1.y*dir1.y);\n    float dir2phi = dir1zytheta+clamp((maus.y-iResolution.y/2.)/iResolution.x*10.+0., -PI/4., PI/2.);\n    dir1.y = dir1zyr*cos(dir2phi);\n    dir1.z = dir1zyr*sin(dir2phi);\n    float dir1zxtheta = atan(dir1.z, dir1.x);\n    float dir1zxr = sqrt(dir1.z*dir1.z+dir1.x*dir1.x);\n    float dir2theta = dir1zxtheta+(maus.x-iResolution.x/2.)/iResolution.x*10./2.*2.;\n    dir1.x = dir1zxr*cos(dir2theta);\n    dir1.z = dir1zxr*sin(dir2theta);\n    // dir1 = normalize(dir1);\n    vec3 retina = march(vec3(4., 4., -8.), dir1);\n    fragColor = vec4(retina, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}