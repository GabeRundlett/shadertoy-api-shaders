{
    "Shader": {
        "info": {
            "date": "1707494958",
            "description": "My smoothwaifu.. Inspired by https://www.shadertoy.com/view/XtVXzV#",
            "flags": 32,
            "hasliked": 0,
            "id": "X3s3DN",
            "likes": 2,
            "name": "smoothwaifu",
            "published": 3,
            "tags": [
                "blur",
                "optimization",
                "gaussian",
                "smoothlife"
            ],
            "usePreview": 0,
            "username": "little_ork",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture( iChannel0, uv );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI   = 3.1415;\nconst float PI05 = sqrt(PI*2.);\n\n// in theory if sum up [-s;s]*ks ~= 1.\nfloat gaussian( float x, float s ) {\n    return exp( -x*x / ( 2.*s*s )) / ( PI05 * s );\n}\n\n// ks >= 3\nconst float ks = 2.;\n\nconst float rl = 7.;\nconst float ro = 5.  + rl;\nconst float rh = 10. + ro;\nconst vec3 rad = vec3(rl, ro, rh);\n\nvec3 gaussian( float x, vec3 s ) {\n    return exp( -x*x / ( 2.*s*s )) / ( PI05 * s );\n}\n\nvec4 blur( sampler2D tx, vec2 uv, vec2 dir ) {\n    \n    vec4 bc = texture( tx, uv );\n    vec3 s = gaussian( 0., rad );\n    vec3 c = bc.xyz*s;\n    vec3 n = vec3( 0. );\n    \n    float i = 1.;\n    \n    for( ; i < rh*ks; ++ i ) {\n    \n        vec3 h = gaussian( i, rad );\n    \n        c += h *( texture( tx, uv + dir*i ).xyz +\n                  texture( tx, uv - dir*i ).xyz );\n        n += h;\n    }\n    \n    c /= 2.*n + s;\n    \n    //c = clamp( c, vec3(0.), vec3(1.) );\n    \n    return vec4( c, bc.w );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// h\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dir = vec2( 1., 0 ) / iResolution.xy;\n    fragColor = blur( iChannel0, uv, dir );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// v\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dir = vec2( 0., 1. ) / iResolution.xy;\n    vec4 bc = blur( iChannel0, uv, dir );\n    \n    bc.z = ( bc.z*rh - bc.y*ro ) / ( rh - ro );\n\n    fragColor = bc;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float s_a( float x, float a, float b ) {\n    return 1.0 / ( 1.0 + exp( ( a - x ) * 4.0 / b ));\n}\n\nfloat s_b( float x, float a, float b ) {\n    return 1. - s_a( x, a, b );\n}\n\nfloat s_ab( float x, float a, float b, float ea, float eb ) {\n    return s_a( x, a, ea ) * s_b( x, b, eb );\n}\n\nfloat s_mix( float x, float y, float m, float em ) {\n    return mix( x, y, s_a( m, 0.5, em ) );\n}\n\nfloat s( vec2 n ) {\n    // magic constants\n    const float b1 = 0.257;\n    const float b2 = 0.336;\n    const float d1 = 0.365;\n    const float d2 = 0.549;\n    const float an = 0.028;\n    const float am = 0.047;\n\n    // const float b1 = 0.278;\n    // const float b2 = 0.365;\n    // const float d1 = 0.267;\n    // const float d2 = 0.445;\n    // const float an = 0.008;\n    // const float am = 0.047;\n\n    //const float b1 = 0.187;\n    //const float b2 = 0.036;\n    //const float d1 = 0.465;\n    //const float d2 = 0.649;\n    //const float an = 0.028;\n    //const float am = 0.047;\n\n     //const float b1 = 0.19;\n     //const float b2 = 0.212;\n     //const float d1 = 0.267;\n     //const float d2 = 0.445;\n     //const float an = 0.017;\n     //const float am = 0.112;\n     \n     //const float b1 = 0.19;         // birth1\n     //const float b2 = 0.212;        // birth2\n     //const float d1 = 0.267;        // survival1\n     //const float d2 = 0.445;        // survival2\n     //const float an = 0.017;   // sigmoid width for outer fullness\n     //const float am = 0.012;\n\n    return s_mix(\n        s_ab( n.x, b1, b2, an, an ),\n        s_ab( n.x, d1, d2, an, an ),\n        n.y,\n        am\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    if( iTime < 1. ) {\n        fragColor = texture( iChannel2, uv );\n        return;\n    }\n\n    vec4 bc  = texture( iChannel0, uv );\n    vec4 bc1 = texture( iChannel1, uv );\n\n    float dt = 0.25;\n         \n    float q = s( bc.xz )*2. - 1.;\n    //float v = mix( q, bc1.x, 1. - dt );\n    float v = q*dt + bc1.x;\n    \n    v = clamp( v, 0., 1. );\n    \n    fragColor = vec4( vec3(v), bc.w );   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 bc  = texture( iChannel0, uv );\n    \n    // controls\n    float l = length( iMouse.xy - fragCoord );\n    if( l < rh*ks && l > 0. ) {\n        bc = vec4( 1. );\n    }\n    \n    \n    fragColor = bc;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}