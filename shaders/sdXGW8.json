{
    "Shader": {
        "info": {
            "date": "1615860559",
            "description": "Barycentric coordinates taking strange slices of a box gradient.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdXGW8",
            "likes": 4,
            "name": "Barycentric Space",
            "published": 3,
            "tags": [
                "3d",
                "space",
                "barycentric",
                "thoughtexperiment"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "vec3 barycoords(in vec2 p, in vec2 a, in vec2 b, in vec2 c) {\n    vec2 pa = p - a, pb = p - b, pc = p - c;\n    vec2 ba = b - a, cb = c - b, ac = a - c;\n\n    float abc = abs(ba.y * ac.x - ba.x * ac.y);\n    float abp = abs(ba.x * pa.y - ba.y * pa.x);\n    float bcp = abs(cb.x * pb.y - cb.y * pb.x);\n    float cap = abs(ac.x * pc.y - ac.y * pc.x);\n\n    return vec3(bcp, cap, abp) / abc;\n}\n\nfloat map(in vec3 p) {\n    float c = cos(iTime), s = sin(iTime);\n    mat2 rot = mat2(c, -s, s, c);\n\n    p.xy *= rot;\n    p.xz *= rot;\n\n    //return length(vec2(length(p.xz) - 0.5, p.y)) - 0.25;\n\n    //return length(p) - 0.75;\n\n    vec3 q = abs(p) - 0.5;\n    //return max(q.x, max(q.y, q.z));\n    return length(max(q, 0.0)) + min(0.0, max(q.x, max(q.y, q.z)));\n}\n\nvec3 grad(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                          map(p + e.yxy) - map(p - e.yxy),\n                          map(p + e.yyx) - map(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    vec2 a = vec2(-0.5, -0.5);\n    vec2 b = vec2( 0.5, -0.5);\n    vec2 c = vec2( 0.0,  1.0);\n\n    vec3 uvw = barycoords(uv, a, b, c);\n    fragColor = vec4(grad(uvw), 1.0);\n    //fragColor = vec4(smoothstep(unit, 0.0, map(uvw)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}