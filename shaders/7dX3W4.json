{
    "Shader": {
        "info": {
            "date": "1615933627",
            "description": "Simple string simulation using Hooke's law. Tug it with the mouse.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dX3W4",
            "likes": 18,
            "name": "String Simulation",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "string",
                "physics",
                "spring",
                "softbody"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 575
        },
        "renderpass": [
            {
                "code": "// The result of watching this tutorial by Dan Shiffman (@The Coding Train):\n// https://www.youtube.com/watch?v=Rr-5HiXquhw&list=PLRqwX-V7Uu6ZV4yEcW3uDwOgGXKUUsPOM&index=32\n// Ported from p5.js: https://editor.p5js.org/pythontales/present/XpFqejZ8z\n\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat sdPolyspline(in vec2 p, in vec2[JOINTS] cp) {\n    vec2 v1 = cp[0], v2 = vec2(0.0), v3 = 0.5 * (cp[1] + v1);\n    vec2 pa = p - v1, ba = v3 - v1;\n    float d = dot2(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n    for (int n=1; n < JOINTS - 1; n++) {\n        v1 = 0.5 * (cp[n - 1] + cp[n]), v2 = cp[n], v3 = 0.5 * (cp[n] + cp[n + 1]);\n\n        vec2 c1 = p - v1;\n        vec2 c2 = 2.0 * v2 - v3 - v1;\n        vec2 c3 = v1 - v2;\n\n        float t3 = dot(c2, c2);\n        float t2 = dot(c3, c2) * 3.0;\n        float t1 = dot(c1, c2) + 2.0 * dot(c3, c3);\n        float t0 = dot(c1, c3);\n\n        t2 /= t3, t1 /= t3, t0 /= t3;\n\n        float t22 = t2 * t2;\n        vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n        float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n        float p2 = abs(pq.x);\n        float r1 = 1.5 / pq.x * pq.y;\n\n        if (qq * 0.25 + ppp / 27.0 > 0.0) {\n            float r2 = r1 * sqrt(3.0 / p2), root;\n            if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n            else root = sinh(asinh(r2) / 3.0);\n            root = clamp(-2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0, 0.0, 1.0);\n            d = min(d, dot2(p - mix(mix(v1, v2, root), mix(v2, v3, root), root)));\n        }\n\n        else {\n            float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0;\n            vec2 roots = clamp(2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0, 0.0, 1.0);\n            d = min(d, dot2(p - mix(mix(v1, v2, roots.x), mix(v2, v3, roots.x), roots.x)));\n            d = min(d, dot2(p - mix(mix(v1, v2, roots.y), mix(v2, v3, roots.y), roots.y)));\n        }\n    }\n\n    v1 = cp[JOINTS - 1], v2 = vec2(0.0), v3 = 0.5 * (cp[JOINTS - 2] + v1);\n    pa = p - v1, ba = v3 - v1;\n    d = min(d, dot2(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)));\n\n    return sqrt(d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    vec2[JOINTS] joints;\n    for (int j=0; j < JOINTS; j++) { joints[j] = getJoint(j).pos; }\n    fragColor.rgb = smoothstep(unit, 0.0, length(uv - getJoint(0).pos) - SIZE) * vec3(1.0, 0.8, 0.0);\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.8, 0.0), smoothstep(unit, 0.0, sdPolyspline(uv, joints)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct Joint {\n    vec2 pos;\n    vec2 vel;\n    float mass;\n};\n\n#define getJoint(id)                                 \\\n    Joint(texelFetch(iChannel0, ivec2(id, 0), 0).xy, \\\n          texelFetch(iChannel0, ivec2(id, 1), 0).xy, \\\n          MASS)                                      \\\n\n#define JOINTS 10\n#define SIZE 0.01\n#define MASS 5.0\n\n#define GRAVITY 0.001\n#define SPRINGINESS 0.1\n#define DAMPING 0.99\n#define LENGTH 0.05",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFragCoord.x < JOINTS) {\n        if (iFrame == 0 && iFragCoord.y == 0) {\n            fragColor.y = 0.5 - fragCoord.x * LENGTH;\n        }\n\n        if (iFrame > 0) {\n            Joint curJoint = getJoint(iFragCoord.x);\n\n            if (iFragCoord.x > 0) {\n                Joint prevJoint = getJoint(iFragCoord.x - 1);\n\n                vec2 force = normalize(prevJoint.pos - curJoint.pos);\n                float extension = LENGTH - distance(prevJoint.pos, curJoint.pos);\n                force *= -SPRINGINESS * extension;\n\n                if (iFragCoord.x < JOINTS - 1) {\n                    Joint nextJoint = getJoint(iFragCoord.x + 1);\n                    vec2 force2 = normalize(curJoint.pos - nextJoint.pos);\n                    extension = LENGTH - distance(curJoint.pos, nextJoint.pos);\n                    force2 *= -SPRINGINESS * extension;\n                    force -= force2;\n                }\n\n                force += vec2(0.0, -GRAVITY);;\n                curJoint.vel += force / curJoint.mass;\n                curJoint.vel *= DAMPING;\n\n                curJoint.pos += curJoint.vel;\n            }\n\n            // UX improvement by @elenzil\n            if (iMouse.z > 0.0 && iFragCoord.x == JOINTS - 1) {\n                vec2 targPos = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n                vec2 targVel = (targPos - curJoint.pos) * 0.1;\n                curJoint.vel = targVel;\n            }\n\n            if (iFragCoord.y == 0) fragColor.xy = curJoint.pos;\n            if (iFragCoord.y == 1) fragColor.xy = curJoint.vel;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}