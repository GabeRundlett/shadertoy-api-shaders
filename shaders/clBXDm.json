{
    "Shader": {
        "info": {
            "date": "1676145189",
            "description": "Using poisson filters to get a really high quality pressure estimate(by shadertoy standards) \n+bicubic interpolation advection + rk4",
            "flags": 48,
            "hasliked": 0,
            "id": "clBXDm",
            "likes": 31,
            "name": "Stable fluids poisson filter",
            "published": 3,
            "tags": [
                "particles",
                "ca"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 584
        },
        "renderpass": [
            {
                "code": "float getDensity(ivec2 p)\n{\n    return texelFetch(iChannel0, p, 0).z;\n}\n\nfloat getEstimatedDensity(ivec2 p)\n{\n    ivec2 resol = ivec2(iResolution.xy);\n    //the laplacian of the density field is the source term for the poisson equation\n    return \n    texelFetch(iChannel1, wrap(p + ivec2(1,0),resol), 0).x + \n    texelFetch(iChannel1, wrap(p - ivec2(1,0),resol), 0).x + \n    texelFetch(iChannel1, wrap(p + ivec2(0,1),resol), 0).x +\n    texelFetch(iChannel1, wrap(p - ivec2(0,1),resol), 0).x - \n    4.0*texelFetch(iChannel1, p, 0).x;\n}\n\nfloat getDensityError(ivec2 p)\n{\n    //find how far off the estimated density is from the actual density and use that as the source term\n    return getDensity(p) + getEstimatedDensity(p);\n}\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n\n    col.xyz = vec3(10.0)*abs(getDensityError(p));\n    \n\n    //col.xyz = vec3(0.5)*abs(getDensity(p));\n    //col.xyz = -vec3(1.0)*getEstimatedDensity(p);\n    col.xyz = vec3(0.400,1.000,0.988)*texelFetch(iChannel0, p, 0).w;\n    col.xyz *= -0.0001*texelFetch(iChannel1, p, 0).x + 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define Bf(p) mod(p,R)\n#define Bi(p) ivec2(mod(p,R))\n#define texel(a, p) texelFetch(a, Bi(p), 0)\n#define pixel(a, p) texture(a, (p)/R)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define PI 3.14159265\n\n#define HELMHOLTZ_DECOMP_FACTOR 0.45\n#define PRESSURE_REUSE_FACTOR 0.99\n\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\n\n//The first 8 columns of the U matrix: \nfloat U[1032] = float[](-4.8700E-04, -1.2393E-03, -2.1780E-03, -3.2455E-03, -4.4319E-03, -5.7229E-03, -7.0822E-03, -8.5081E-03, -9.9956E-03, -1.1524E-02, -1.3115E-02, -1.4747E-02, -1.6437E-02, -1.8165E-02, -1.9935E-02, -2.1748E-02, -2.3615E-02, -2.5521E-02, -2.7467E-02, -2.9454E-02, -3.1483E-02, -3.3552E-02, -3.5656E-02, -3.7809E-02, -4.0008E-02, -4.2253E-02, -4.4544E-02, -4.6877E-02, -4.9262E-02, -5.1697E-02, -5.4179E-02, -5.6717E-02, -5.9309E-02, -6.1955E-02, -6.4660E-02, -6.7423E-02, -7.0250E-02, -7.3139E-02, -7.6096E-02, -7.9121E-02, -8.2219E-02, -8.5393E-02, -8.8645E-02, -9.1979E-02, -9.5400E-02, -9.8911E-02, -1.0252E-01, -1.0622E-01, -1.1003E-01, -1.1395E-01, -1.1799E-01, -1.2215E-01, -1.2644E-01, -1.3087E-01, -1.3545E-01, -1.4019E-01, -1.4509E-01, -1.5019E-01, -1.5549E-01, -1.6101E-01, -1.6677E-01, -1.7282E-01, -1.7919E-01, -1.8594E-01, -1.9321E-01, -1.8594E-01, -1.7919E-01, -1.7282E-01, -1.6677E-01, -1.6101E-01, -1.5549E-01, -1.5019E-01, -1.4509E-01, -1.4019E-01, -1.3545E-01, -1.3087E-01, -1.2644E-01, -1.2215E-01, -1.1799E-01, -1.1395E-01, -1.1003E-01, -1.0622E-01, -1.0252E-01, -9.8911E-02, -9.5400E-02, -9.1979E-02, -8.8645E-02, -8.5393E-02, -8.2219E-02, -7.9121E-02, -7.6096E-02, -7.3139E-02, -7.0250E-02, -6.7423E-02, -6.4660E-02, -6.1955E-02, -5.9309E-02, -5.6717E-02, -5.4179E-02, -5.1697E-02, -4.9262E-02, -4.6877E-02, -4.4544E-02, -4.2253E-02, -4.0008E-02, -3.7809E-02, -3.5656E-02, -3.3552E-02, -3.1483E-02, -2.9454E-02, -2.7467E-02, -2.5521E-02, -2.3615E-02, -2.1748E-02, -1.9935E-02, -1.8165E-02, -1.6437E-02, -1.4747E-02, -1.3115E-02, -1.1524E-02, -9.9956E-03, -8.5081E-03, -7.0822E-03, -5.7229E-03, -4.4319E-03, -3.2455E-03, -2.1780E-03, -1.2393E-03, -4.8700E-04, 3.8441E-03, 7.0405E-03, 9.1937E-03, 1.0459E-02, 1.0810E-02, 1.0314E-02, 9.3210E-03, 7.8464E-03, 5.9459E-03, 3.8550E-03, 1.3471E-03, -1.3269E-03, -4.3436E-03, -7.4768E-03, -1.0742E-02, -1.4145E-02, -1.7780E-02, -2.1471E-02, -2.5218E-02, -2.9011E-02, -3.2834E-02, -3.6669E-02, -4.0472E-02, -4.4304E-02, -4.8134E-02, -5.1941E-02, -5.5708E-02, -5.9415E-02, -6.3064E-02, -6.6634E-02, -7.0117E-02, -7.3489E-02, -7.6735E-02, -7.9851E-02, -8.2796E-02, -8.5573E-02, -8.8129E-02, -9.0468E-02, -9.2529E-02, -9.4310E-02, -9.5762E-02, -9.6811E-02, -9.7448E-02, -9.7602E-02, -9.7180E-02, -9.6145E-02, -9.4400E-02, -9.1818E-02, -8.8317E-02, -8.3752E-02, -7.7957E-02, -7.0722E-02, -6.1851E-02, -5.1066E-02, -3.8035E-02, -2.2350E-02, -3.4984E-03, 1.9136E-02, 4.6374E-02, 7.9306E-02, 1.1943E-01, 1.6891E-01, 2.3113E-01, 3.1208E-01, 4.2455E-01, 3.1208E-01, 2.3113E-01, 1.6891E-01, 1.1943E-01, 7.9306E-02, 4.6374E-02, 1.9136E-02, -3.4984E-03, -2.2350E-02, -3.8035E-02, -5.1066E-02, -6.1851E-02, -7.0722E-02, -7.7957E-02, -8.3752E-02, -8.8317E-02, -9.1818E-02, -9.4400E-02, -9.6145E-02, -9.7180E-02, -9.7602E-02, -9.7448E-02, -9.6811E-02, -9.5762E-02, -9.4310E-02, -9.2529E-02, -9.0468E-02, -8.8129E-02, -8.5573E-02, -8.2796E-02, -7.9851E-02, -7.6735E-02, -7.3489E-02, -7.0117E-02, -6.6634E-02, -6.3064E-02, -5.9415E-02, -5.5708E-02, -5.1941E-02, -4.8134E-02, -4.4304E-02, -4.0472E-02, -3.6669E-02, -3.2834E-02, -2.9011E-02, -2.5218E-02, -2.1471E-02, -1.7780E-02, -1.4145E-02, -1.0742E-02, -7.4768E-03, -4.3436E-03, -1.3269E-03, 1.3471E-03, 3.8550E-03, 5.9459E-03, 7.8464E-03, 9.3210E-03, 1.0314E-02, 1.0810E-02, 1.0459E-02, 9.1937E-03, 7.0405E-03, 3.8441E-03, 3.8780E-03, 1.3323E-02, 2.3249E-02, 3.1961E-02, 3.8579E-02, 4.2719E-02, 4.5218E-02, 4.6011E-02, 4.5227E-02, 4.3743E-02, 4.0658E-02, 3.6968E-02, 3.1993E-02, 2.6639E-02, 2.0864E-02, 1.4672E-02, 7.8253E-03, 9.2183E-04, -5.9968E-03, -1.2866E-02, -1.9612E-02, -2.6177E-02, -3.2618E-02, -3.8747E-02, -4.4527E-02, -4.9918E-02, -5.4911E-02, -5.9772E-02, -6.3961E-02, -6.7619E-02, -7.1102E-02, -7.3763E-02, -7.5807E-02, -7.7626E-02, -7.8602E-02, -7.9264E-02, -7.8991E-02, -7.8320E-02, -7.6672E-02, -7.4539E-02, -7.1693E-02, -6.7631E-02, -6.2852E-02, -5.7139E-02, -5.0033E-02, -4.1961E-02, -3.2719E-02, -2.1960E-02, -9.9851E-03, 3.3321E-03, 1.8084E-02, 3.4415E-02, 5.2011E-02, 7.0739E-02, 9.0328E-02, 1.1027E-01, 1.2973E-01, 1.4719E-01, 1.6028E-01, 1.6515E-01, 1.5511E-01, 1.1801E-01, 2.9671E-02, -1.6494E-01, -6.1534E-01, -1.6494E-01, 2.9671E-02, 1.1801E-01, 1.5511E-01, 1.6515E-01, 1.6028E-01, 1.4719E-01, 1.2973E-01, 1.1027E-01, 9.0328E-02, 7.0739E-02, 5.2011E-02, 3.4415E-02, 1.8084E-02, 3.3321E-03, -9.9851E-03, -2.1960E-02, -3.2719E-02, -4.1961E-02, -5.0033E-02, -5.7139E-02, -6.2852E-02, -6.7631E-02, -7.1693E-02, -7.4539E-02, -7.6672E-02, -7.8320E-02, -7.8991E-02, -7.9264E-02, -7.8602E-02, -7.7626E-02, -7.5807E-02, -7.3763E-02, -7.1102E-02, -6.7619E-02, -6.3961E-02, -5.9772E-02, -5.4911E-02, -4.9918E-02, -4.4527E-02, -3.8747E-02, -3.2618E-02, -2.6177E-02, -1.9612E-02, -1.2866E-02, -5.9968E-03, 9.2183E-04, 7.8253E-03, 1.4672E-02, 2.0864E-02, 2.6639E-02, 3.1993E-02, 3.6968E-02, 4.0658E-02, 4.3743E-02, 4.5227E-02, 4.6011E-02, 4.5218E-02, 4.2719E-02, 3.8579E-02, 3.1961E-02, 2.3249E-02, 1.3323E-02, 3.8780E-03, -3.5540E-04, 2.0967E-03, 8.6209E-03, 1.8563E-02, 3.1646E-02, 4.6963E-02, 6.3099E-02, 7.9456E-02, 9.5368E-02, 1.1087E-01, 1.2472E-01, 1.3765E-01, 1.4785E-01, 1.5687E-01, 1.6430E-01, 1.6980E-01, 1.7103E-01, 1.7090E-01, 1.6914E-01, 1.6570E-01, 1.6068E-01, 1.5446E-01, 1.4901E-01, 1.4077E-01, 1.3071E-01, 1.1933E-01, 1.0723E-01, 9.6199E-02, 8.3432E-02, 7.0140E-02, 5.7980E-02, 4.4693E-02, 3.1409E-02, 1.9397E-02, 7.2246E-03, -3.7034E-03, -1.4528E-02, -2.4071E-02, -3.3149E-02, -4.0878E-02, -4.7477E-02, -5.3472E-02, -5.8147E-02, -6.1644E-02, -6.4292E-02, -6.5635E-02, -6.5764E-02, -6.4860E-02, -6.2719E-02, -5.9421E-02, -5.5069E-02, -4.9810E-02, -4.3674E-02, -3.6819E-02, -2.9452E-02, -2.1831E-02, -1.4254E-02, -7.0495E-03, -6.1328E-04, 4.5980E-03, 8.0935E-03, 9.4065E-03, 8.2309E-03, 4.7655E-03, 6.8506E-04, 4.7655E-03, 8.2309E-03, 9.4065E-03, 8.0935E-03, 4.5980E-03, -6.1328E-04, -7.0495E-03, -1.4254E-02, -2.1831E-02, -2.9452E-02, -3.6819E-02, -4.3674E-02, -4.9810E-02, -5.5069E-02, -5.9421E-02, -6.2719E-02, -6.4860E-02, -6.5764E-02, -6.5635E-02, -6.4292E-02, -6.1644E-02, -5.8147E-02, -5.3472E-02, -4.7477E-02, -4.0878E-02, -3.3149E-02, -2.4071E-02, -1.4528E-02, -3.7034E-03, 7.2246E-03, 1.9397E-02, 3.1409E-02, 4.4693E-02, 5.7980E-02, 7.0140E-02, 8.3432E-02, 9.6199E-02, 1.0723E-01, 1.1933E-01, 1.3071E-01, 1.4077E-01, 1.4901E-01, 1.5446E-01, 1.6068E-01, 1.6570E-01, 1.6914E-01, 1.7090E-01, 1.7103E-01, 1.6980E-01, 1.6430E-01, 1.5687E-01, 1.4785E-01, 1.3765E-01, 1.2472E-01, 1.1087E-01, 9.5368E-02, 7.9456E-02, 6.3099E-02, 4.6963E-02, 3.1646E-02, 1.8563E-02, 8.6209E-03, 2.0967E-03, -3.5540E-04, -1.0751E-02, -5.0997E-03, 1.1055E-02, 3.1040E-02, 5.1374E-02, 6.9059E-02, 8.3718E-02, 9.4425E-02, 1.0077E-01, 1.0489E-01, 1.0369E-01, 1.0027E-01, 9.2030E-02, 8.2261E-02, 7.0767E-02, 5.7584E-02, 4.1982E-02, 2.6253E-02, 1.0631E-02, -4.5384E-03, -1.8931E-02, -3.2333E-02, -4.5708E-02, -5.7000E-02, -6.6373E-02, -7.3788E-02, -7.9487E-02, -8.5550E-02, -8.8285E-02, -8.8960E-02, -9.0129E-02, -8.7818E-02, -8.3704E-02, -8.0207E-02, -7.4144E-02, -6.8539E-02, -6.0532E-02, -5.2927E-02, -4.3433E-02, -3.4362E-02, -2.5041E-02, -1.3821E-02, -2.8284E-03, 8.4234E-03, 2.0931E-02, 3.3216E-02, 4.5423E-02, 5.7869E-02, 6.9653E-02, 8.0558E-02, 9.0237E-02, 9.8149E-02, 1.0354E-01, 1.0546E-01, 1.0271E-01, 9.3924E-02, 7.7119E-02, 5.0622E-02, 1.2212E-02, -3.9707E-02, -1.0456E-01, -1.7460E-01, -2.1946E-01, -1.3176E-01, 4.8380E-01, -1.3176E-01, -2.1946E-01, -1.7460E-01, -1.0456E-01, -3.9707E-02, 1.2212E-02, 5.0622E-02, 7.7119E-02, 9.3924E-02, 1.0271E-01, 1.0546E-01, 1.0354E-01, 9.8149E-02, 9.0237E-02, 8.0558E-02, 6.9653E-02, 5.7869E-02, 4.5423E-02, 3.3216E-02, 2.0931E-02, 8.4234E-03, -2.8284E-03, -1.3821E-02, -2.5041E-02, -3.4362E-02, -4.3433E-02, -5.2927E-02, -6.0532E-02, -6.8539E-02, -7.4144E-02, -8.0207E-02, -8.3704E-02, -8.7818E-02, -9.0129E-02, -8.8960E-02, -8.8285E-02, -8.5550E-02, -7.9487E-02, -7.3788E-02, -6.6373E-02, -5.7000E-02, -4.5708E-02, -3.2333E-02, -1.8931E-02, -4.5384E-03, 1.0631E-02, 2.6253E-02, 4.1982E-02, 5.7584E-02, 7.0767E-02, 8.2261E-02, 9.2030E-02, 1.0027E-01, 1.0369E-01, 1.0489E-01, 1.0077E-01, 9.4425E-02, 8.3718E-02, 6.9059E-02, 5.1374E-02, 3.1040E-02, 1.1055E-02, -5.0997E-03, -1.0751E-02, -1.1608E-02, -4.1497E-02, -5.8424E-02, -5.8730E-02, -4.2288E-02, -1.3921E-02, 1.8135E-02, 5.0399E-02, 7.9162E-02, 1.0472E-01, 1.2078E-01, 1.3175E-01, 1.3044E-01, 1.2448E-01, 1.1298E-01, 9.5729E-02, 6.9944E-02, 4.3317E-02, 1.6612E-02, -9.0493E-03, -3.2492E-02, -5.3057E-02, -7.4192E-02, -8.8730E-02, -9.7519E-02, -1.0090E-01, -1.0004E-01, -1.0137E-01, -9.4199E-02, -8.3009E-02, -7.4215E-02, -5.8870E-02, -4.1686E-02, -2.6940E-02, -1.0183E-02, 4.7403E-03, 2.0031E-02, 3.3876E-02, 4.6223E-02, 5.7492E-02, 6.7493E-02, 7.4221E-02, 8.0422E-02, 8.5075E-02, 8.4909E-02, 8.4108E-02, 8.1289E-02, 7.2857E-02, 6.3279E-02, 5.1226E-02, 3.5946E-02, 1.4927E-02, -7.8408E-03, -3.2714E-02, -5.9234E-02, -8.6278E-02, -1.1213E-01, -1.3105E-01, -1.3678E-01, -1.2019E-01, -6.8706E-02, 3.0595E-02, 1.7353E-01, 2.5477E-01, -3.1741E-01, 2.5477E-01, 1.7353E-01, 3.0595E-02, -6.8706E-02, -1.2019E-01, -1.3678E-01, -1.3105E-01, -1.1213E-01, -8.6278E-02, -5.9234E-02, -3.2714E-02, -7.8408E-03, 1.4927E-02, 3.5946E-02, 5.1226E-02, 6.3279E-02, 7.2857E-02, 8.1289E-02, 8.4108E-02, 8.4909E-02, 8.5075E-02, 8.0422E-02, 7.4221E-02, 6.7493E-02, 5.7492E-02, 4.6223E-02, 3.3876E-02, 2.0031E-02, 4.7403E-03, -1.0183E-02, -2.6940E-02, -4.1686E-02, -5.8870E-02, -7.4215E-02, -8.3009E-02, -9.4199E-02, -1.0137E-01, -1.0004E-01, -1.0090E-01, -9.7519E-02, -8.8730E-02, -7.4192E-02, -5.3057E-02, -3.2492E-02, -9.0493E-03, 1.6612E-02, 4.3317E-02, 6.9944E-02, 9.5729E-02, 1.1298E-01, 1.2448E-01, 1.3044E-01, 1.3175E-01, 1.2078E-01, 1.0472E-01, 7.9162E-02, 5.0399E-02, 1.8135E-02, -1.3921E-02, -4.2288E-02, -5.8730E-02, -5.8424E-02, -4.1497E-02, -1.1608E-02, -5.2558E-03, 5.7421E-04, 2.8679E-02, 7.1520E-02, 1.2013E-01, 1.6229E-01, 1.9293E-01, 2.0637E-01, 2.0044E-01, 1.8468E-01, 1.4803E-01, 1.0465E-01, 5.1659E-02, -8.6808E-04, -5.0693E-02, -9.4777E-02, -1.2117E-01, -1.3936E-01, -1.4732E-01, -1.4474E-01, -1.3277E-01, -1.1422E-01, -9.7506E-02, -6.9057E-02, -3.5777E-02, -2.2474E-03, 2.8151E-02, 5.9320E-02, 8.1875E-02, 9.6887E-02, 1.1571E-01, 1.1865E-01, 1.1298E-01, 1.1389E-01, 1.0079E-01, 9.4466E-02, 7.5018E-02, 6.2853E-02, 4.1418E-02, 2.7969E-02, 1.7640E-02, -1.4046E-03, -1.3750E-02, -2.3031E-02, -3.7013E-02, -4.5500E-02, -5.0654E-02, -5.6221E-02, -5.7448E-02, -5.5244E-02, -5.0687E-02, -4.4902E-02, -3.7034E-02, -2.7487E-02, -1.7137E-02, -7.0352E-03, 2.1131E-03, 9.2634E-03, 1.3798E-02, 1.5012E-02, 1.2549E-02, 6.9539E-03, 3.3534E-04, -3.2169E-03, 3.8893E-05, -3.2169E-03, 3.3534E-04, 6.9539E-03, 1.2549E-02, 1.5012E-02, 1.3798E-02, 9.2634E-03, 2.1131E-03, -7.0352E-03, -1.7137E-02, -2.7487E-02, -3.7034E-02, -4.4902E-02, -5.0687E-02, -5.5244E-02, -5.7448E-02, -5.6221E-02, -5.0654E-02, -4.5500E-02, -3.7013E-02, -2.3031E-02, -1.3750E-02, -1.4046E-03, 1.7640E-02, 2.7969E-02, 4.1418E-02, 6.2853E-02, 7.5018E-02, 9.4466E-02, 1.0079E-01, 1.1389E-01, 1.1298E-01, 1.1865E-01, 1.1571E-01, 9.6887E-02, 8.1875E-02, 5.9320E-02, 2.8151E-02, -2.2474E-03, -3.5777E-02, -6.9057E-02, -9.7506E-02, -1.1422E-01, -1.3277E-01, -1.4474E-01, -1.4732E-01, -1.3936E-01, -1.2117E-01, -9.4777E-02, -5.0693E-02, -8.6808E-04, 5.1659E-02, 1.0465E-01, 1.4803E-01, 1.8468E-01, 2.0044E-01, 2.0637E-01, 1.9293E-01, 1.6229E-01, 1.2013E-01, 7.1520E-02, 2.8679E-02, 5.7421E-04, -5.2558E-03, -3.9837E-02, -3.7920E-02, 9.3629E-03, 6.9318E-02, 1.1881E-01, 1.4046E-01, 1.3889E-01, 1.1331E-01, 6.9891E-02, 2.1323E-02, -3.0613E-02, -7.8570E-02, -1.0936E-01, -1.3006E-01, -1.3699E-01, -1.2800E-01, -9.2327E-02, -5.3098E-02, -1.2135E-02, 2.7024E-02, 6.0740E-02, 8.6744E-02, 1.1452E-01, 1.2451E-01, 1.2063E-01, 1.0564E-01, 8.4358E-02, 6.7550E-02, 3.9803E-02, 1.0865E-02, -1.5696E-02, -4.0295E-02, -5.8812E-02, -7.8366E-02, -8.5841E-02, -9.6379E-02, -9.2088E-02, -9.2549E-02, -7.9259E-02, -7.2315E-02, -6.6029E-02, -4.5276E-02, -3.0431E-02, -1.6668E-02, 6.3617E-03, 2.4718E-02, 4.1191E-02, 5.8795E-02, 7.3061E-02, 8.3723E-02, 9.0979E-02, 9.1335E-02, 8.7853E-02, 7.7802E-02, 5.9924E-02, 3.3282E-02, -5.8637E-03, -4.9998E-02, -9.5989E-02, -1.3414E-01, -1.4457E-01, -9.4312E-02, 5.3627E-02, 2.4785E-01, -1.8494E-01, 2.4785E-01, 5.3627E-02, -9.4312E-02, -1.4457E-01, -1.3414E-01, -9.5989E-02, -4.9998E-02, -5.8637E-03, 3.3282E-02, 5.9924E-02, 7.7802E-02, 8.7853E-02, 9.1335E-02, 9.0979E-02, 8.3723E-02, 7.3061E-02, 5.8795E-02, 4.1191E-02, 2.4718E-02, 6.3617E-03, -1.6668E-02, -3.0431E-02, -4.5276E-02, -6.6029E-02, -7.2315E-02, -7.9259E-02, -9.2549E-02, -9.2088E-02, -9.6379E-02, -8.5841E-02, -7.8366E-02, -5.8812E-02, -4.0295E-02, -1.5696E-02, 1.0865E-02, 3.9803E-02, 6.7550E-02, 8.4358E-02, 1.0564E-01, 1.2063E-01, 1.2451E-01, 1.1452E-01, 8.6744E-02, 6.0740E-02, 2.7024E-02, -1.2135E-02, -5.3098E-02, -9.2327E-02, -1.2800E-01, -1.3699E-01, -1.3006E-01, -1.0936E-01, -7.8570E-02, -3.0613E-02, 2.1323E-02, 6.9891E-02, 1.1331E-01, 1.3889E-01, 1.4046E-01, 1.1881E-01, 6.9318E-02, 9.3629E-03, -3.7920E-02, -3.9837E-02); \n//The first 8 rows of the V matrix: \nfloat V[1032] = float[](-6.1416E-03, -1.5629E-02, -2.7467E-02, -4.0930E-02, -5.5891E-02, -7.2172E-02, -8.9315E-02, -1.0730E-01, -1.2606E-01, -1.4533E-01, -1.6540E-01, -1.8598E-01, -2.0729E-01, -2.2908E-01, -2.5140E-01, -2.7426E-01, -2.9781E-01, -3.2185E-01, -3.4639E-01, -3.7145E-01, -3.9703E-01, -4.2312E-01, -4.4967E-01, -4.7682E-01, -5.0455E-01, -5.3286E-01, -5.6175E-01, -5.9117E-01, -6.2125E-01, -6.5195E-01, -6.8326E-01, -7.1527E-01, -7.4796E-01, -7.8132E-01, -8.1544E-01, -8.5028E-01, -8.8592E-01, -9.2236E-01, -9.5965E-01, -9.9781E-01, -1.0369E+00, -1.0769E+00, -1.1179E+00, -1.1600E+00, -1.2031E+00, -1.2474E+00, -1.2929E+00, -1.3396E+00, -1.3876E+00, -1.4371E+00, -1.4880E+00, -1.5404E+00, -1.5945E+00, -1.6504E+00, -1.7081E+00, -1.7679E+00, -1.8298E+00, -1.8941E+00, -1.9609E+00, -2.0305E+00, -2.1032E+00, -2.1794E+00, -2.2597E+00, -2.3450E+00, -2.4366E+00, -2.3450E+00, -2.2597E+00, -2.1794E+00, -2.1032E+00, -2.0305E+00, -1.9609E+00, -1.8941E+00, -1.8298E+00, -1.7679E+00, -1.7081E+00, -1.6504E+00, -1.5945E+00, -1.5404E+00, -1.4880E+00, -1.4371E+00, -1.3876E+00, -1.3396E+00, -1.2929E+00, -1.2474E+00, -1.2031E+00, -1.1600E+00, -1.1179E+00, -1.0769E+00, -1.0369E+00, -9.9781E-01, -9.5965E-01, -9.2236E-01, -8.8592E-01, -8.5028E-01, -8.1544E-01, -7.8132E-01, -7.4796E-01, -7.1527E-01, -6.8326E-01, -6.5195E-01, -6.2125E-01, -5.9117E-01, -5.6175E-01, -5.3286E-01, -5.0455E-01, -4.7682E-01, -4.4967E-01, -4.2312E-01, -3.9703E-01, -3.7145E-01, -3.4639E-01, -3.2185E-01, -2.9781E-01, -2.7426E-01, -2.5140E-01, -2.2908E-01, -2.0729E-01, -1.8598E-01, -1.6540E-01, -1.4533E-01, -1.2606E-01, -1.0730E-01, -8.9315E-02, -7.2172E-02, -5.5891E-02, -4.0930E-02, -2.7467E-02, -1.5629E-02, -6.1416E-03, 5.6056E-03, 1.0267E-02, 1.3407E-02, 1.5251E-02, 1.5763E-02, 1.5040E-02, 1.3592E-02, 1.1442E-02, 8.6706E-03, 5.6215E-03, 1.9644E-03, -1.9350E-03, -6.3340E-03, -1.0903E-02, -1.5665E-02, -2.0627E-02, -2.5927E-02, -3.1310E-02, -3.6774E-02, -4.2304E-02, -4.7880E-02, -5.3472E-02, -5.9018E-02, -6.4606E-02, -7.0191E-02, -7.5743E-02, -8.1236E-02, -8.6642E-02, -9.1962E-02, -9.7169E-02, -1.0225E-01, -1.0716E-01, -1.1190E-01, -1.1644E-01, -1.2074E-01, -1.2479E-01, -1.2851E-01, -1.3192E-01, -1.3493E-01, -1.3753E-01, -1.3964E-01, -1.4117E-01, -1.4210E-01, -1.4233E-01, -1.4171E-01, -1.4020E-01, -1.3766E-01, -1.3389E-01, -1.2879E-01, -1.2213E-01, -1.1368E-01, -1.0313E-01, -9.0193E-02, -7.4466E-02, -5.5464E-02, -3.2591E-02, -5.1015E-03, 2.7904E-02, 6.7624E-02, 1.1565E-01, 1.7415E-01, 2.4630E-01, 3.3704E-01, 4.5509E-01, 6.1910E-01, 4.5509E-01, 3.3704E-01, 2.4630E-01, 1.7415E-01, 1.1565E-01, 6.7624E-02, 2.7904E-02, -5.1015E-03, -3.2591E-02, -5.5464E-02, -7.4466E-02, -9.0193E-02, -1.0313E-01, -1.1368E-01, -1.2213E-01, -1.2879E-01, -1.3389E-01, -1.3766E-01, -1.4020E-01, -1.4171E-01, -1.4233E-01, -1.4210E-01, -1.4117E-01, -1.3964E-01, -1.3753E-01, -1.3493E-01, -1.3192E-01, -1.2851E-01, -1.2479E-01, -1.2074E-01, -1.1644E-01, -1.1190E-01, -1.0716E-01, -1.0225E-01, -9.7169E-02, -9.1962E-02, -8.6642E-02, -8.1236E-02, -7.5743E-02, -7.0191E-02, -6.4606E-02, -5.9018E-02, -5.3472E-02, -4.7880E-02, -4.2304E-02, -3.6774E-02, -3.1310E-02, -2.5927E-02, -2.0627E-02, -1.5665E-02, -1.0903E-02, -6.3340E-03, -1.9350E-03, 1.9644E-03, 5.6215E-03, 8.6706E-03, 1.1442E-02, 1.3592E-02, 1.5040E-02, 1.5763E-02, 1.5251E-02, 1.3407E-02, 1.0267E-02, 5.6056E-03, 1.4468E-03, 4.9706E-03, 8.6735E-03, 1.1924E-02, 1.4393E-02, 1.5937E-02, 1.6870E-02, 1.7166E-02, 1.6873E-02, 1.6319E-02, 1.5168E-02, 1.3792E-02, 1.1936E-02, 9.9384E-03, 7.7839E-03, 5.4736E-03, 2.9194E-03, 3.4391E-04, -2.2372E-03, -4.8000E-03, -7.3168E-03, -9.7660E-03, -1.2169E-02, -1.4455E-02, -1.6612E-02, -1.8623E-02, -2.0486E-02, -2.2299E-02, -2.3862E-02, -2.5227E-02, -2.6526E-02, -2.7519E-02, -2.8281E-02, -2.8960E-02, -2.9324E-02, -2.9571E-02, -2.9470E-02, -2.9219E-02, -2.8604E-02, -2.7808E-02, -2.6747E-02, -2.5231E-02, -2.3448E-02, -2.1317E-02, -1.8666E-02, -1.5655E-02, -1.2207E-02, -8.1926E-03, -3.7252E-03, 1.2431E-03, 6.7467E-03, 1.2839E-02, 1.9404E-02, 2.6391E-02, 3.3699E-02, 4.1137E-02, 4.8400E-02, 5.4911E-02, 5.9798E-02, 6.1612E-02, 5.7865E-02, 4.4025E-02, 1.1070E-02, -6.1534E-02, -2.2957E-01, -6.1534E-02, 1.1070E-02, 4.4025E-02, 5.7865E-02, 6.1612E-02, 5.9798E-02, 5.4911E-02, 4.8400E-02, 4.1137E-02, 3.3699E-02, 2.6391E-02, 1.9404E-02, 1.2839E-02, 6.7467E-03, 1.2431E-03, -3.7252E-03, -8.1926E-03, -1.2207E-02, -1.5655E-02, -1.8666E-02, -2.1317E-02, -2.3448E-02, -2.5231E-02, -2.6747E-02, -2.7808E-02, -2.8604E-02, -2.9219E-02, -2.9470E-02, -2.9571E-02, -2.9324E-02, -2.8960E-02, -2.8281E-02, -2.7519E-02, -2.6526E-02, -2.5227E-02, -2.3862E-02, -2.2299E-02, -2.0486E-02, -1.8623E-02, -1.6612E-02, -1.4455E-02, -1.2169E-02, -9.7660E-03, -7.3168E-03, -4.8000E-03, -2.2372E-03, 3.4391E-04, 2.9194E-03, 5.4736E-03, 7.7839E-03, 9.9384E-03, 1.1936E-02, 1.3792E-02, 1.5168E-02, 1.6319E-02, 1.6873E-02, 1.7166E-02, 1.6870E-02, 1.5937E-02, 1.4393E-02, 1.1924E-02, 8.6735E-03, 4.9706E-03, 1.4468E-03, 9.9157E-05, -5.8497E-04, -2.4052E-03, -5.1791E-03, -8.8292E-03, -1.3103E-02, -1.7604E-02, -2.2168E-02, -2.6608E-02, -3.0933E-02, -3.4795E-02, -3.8404E-02, -4.1249E-02, -4.3766E-02, -4.5840E-02, -4.7373E-02, -4.7716E-02, -4.7681E-02, -4.7190E-02, -4.6230E-02, -4.4830E-02, -4.3093E-02, -4.1574E-02, -3.9273E-02, -3.6467E-02, -3.3294E-02, -2.9918E-02, -2.6839E-02, -2.3277E-02, -1.9569E-02, -1.6176E-02, -1.2469E-02, -8.7631E-03, -5.4116E-03, -2.0156E-03, 1.0332E-03, 4.0533E-03, 6.7159E-03, 9.2485E-03, 1.1405E-02, 1.3246E-02, 1.4919E-02, 1.6223E-02, 1.7199E-02, 1.7937E-02, 1.8312E-02, 1.8348E-02, 1.8096E-02, 1.7499E-02, 1.6578E-02, 1.5364E-02, 1.3897E-02, 1.2185E-02, 1.0272E-02, 8.2171E-03, 6.0908E-03, 3.9768E-03, 1.9668E-03, 1.7111E-04, -1.2828E-03, -2.2581E-03, -2.6244E-03, -2.2964E-03, -1.3296E-03, -1.9113E-04, -1.3296E-03, -2.2964E-03, -2.6244E-03, -2.2581E-03, -1.2828E-03, 1.7111E-04, 1.9668E-03, 3.9768E-03, 6.0908E-03, 8.2171E-03, 1.0272E-02, 1.2185E-02, 1.3897E-02, 1.5364E-02, 1.6578E-02, 1.7499E-02, 1.8096E-02, 1.8348E-02, 1.8312E-02, 1.7937E-02, 1.7199E-02, 1.6223E-02, 1.4919E-02, 1.3246E-02, 1.1405E-02, 9.2485E-03, 6.7159E-03, 4.0533E-03, 1.0332E-03, -2.0156E-03, -5.4116E-03, -8.7631E-03, -1.2469E-02, -1.6176E-02, -1.9569E-02, -2.3277E-02, -2.6839E-02, -2.9918E-02, -3.3294E-02, -3.6467E-02, -3.9273E-02, -4.1574E-02, -4.3093E-02, -4.4830E-02, -4.6230E-02, -4.7190E-02, -4.7681E-02, -4.7716E-02, -4.7373E-02, -4.5840E-02, -4.3766E-02, -4.1249E-02, -3.8404E-02, -3.4795E-02, -3.0933E-02, -2.6608E-02, -2.2168E-02, -1.7604E-02, -1.3103E-02, -8.8292E-03, -5.1791E-03, -2.4052E-03, -5.8497E-04, 9.9157E-05, -1.5555E-03, -7.3785E-04, 1.5995E-03, 4.4910E-03, 7.4330E-03, 9.9918E-03, 1.2113E-02, 1.3662E-02, 1.4581E-02, 1.5176E-02, 1.5002E-02, 1.4507E-02, 1.3315E-02, 1.1902E-02, 1.0239E-02, 8.3315E-03, 6.0741E-03, 3.7984E-03, 1.5382E-03, -6.5664E-04, -2.7391E-03, -4.6782E-03, -6.6133E-03, -8.2471E-03, -9.6033E-03, -1.0676E-02, -1.1501E-02, -1.2378E-02, -1.2774E-02, -1.2871E-02, -1.3040E-02, -1.2706E-02, -1.2111E-02, -1.1605E-02, -1.0728E-02, -9.9166E-03, -8.7581E-03, -7.6578E-03, -6.2841E-03, -4.9716E-03, -3.6230E-03, -1.9997E-03, -4.0923E-04, 1.2187E-03, 3.0284E-03, 4.8059E-03, 6.5721E-03, 8.3727E-03, 1.0078E-02, 1.1656E-02, 1.3056E-02, 1.4201E-02, 1.4981E-02, 1.5258E-02, 1.4861E-02, 1.3589E-02, 1.1158E-02, 7.3243E-03, 1.7669E-03, -5.7451E-03, -1.5129E-02, -2.5263E-02, -3.1753E-02, -1.9063E-02, 6.9999E-02, -1.9063E-02, -3.1753E-02, -2.5263E-02, -1.5129E-02, -5.7451E-03, 1.7669E-03, 7.3243E-03, 1.1158E-02, 1.3589E-02, 1.4861E-02, 1.5258E-02, 1.4981E-02, 1.4201E-02, 1.3056E-02, 1.1656E-02, 1.0078E-02, 8.3727E-03, 6.5721E-03, 4.8059E-03, 3.0284E-03, 1.2187E-03, -4.0923E-04, -1.9997E-03, -3.6230E-03, -4.9716E-03, -6.2841E-03, -7.6578E-03, -8.7581E-03, -9.9166E-03, -1.0728E-02, -1.1605E-02, -1.2111E-02, -1.2706E-02, -1.3040E-02, -1.2871E-02, -1.2774E-02, -1.2378E-02, -1.1501E-02, -1.0676E-02, -9.6033E-03, -8.2471E-03, -6.6133E-03, -4.6782E-03, -2.7391E-03, -6.5664E-04, 1.5382E-03, 3.7984E-03, 6.0741E-03, 8.3315E-03, 1.0239E-02, 1.1902E-02, 1.3315E-02, 1.4507E-02, 1.5002E-02, 1.5176E-02, 1.4581E-02, 1.3662E-02, 1.2113E-02, 9.9918E-03, 7.4330E-03, 4.4910E-03, 1.5995E-03, -7.3785E-04, -1.5555E-03, -7.8570E-04, -2.8087E-03, -3.9543E-03, -3.9750E-03, -2.8622E-03, -9.4219E-04, 1.2274E-03, 3.4112E-03, 5.3580E-03, 7.0877E-03, 8.1747E-03, 8.9175E-03, 8.8287E-03, 8.4249E-03, 7.6468E-03, 6.4793E-03, 4.7340E-03, 2.9318E-03, 1.1243E-03, -6.1249E-04, -2.1992E-03, -3.5911E-03, -5.0216E-03, -6.0056E-03, -6.6005E-03, -6.8294E-03, -6.7713E-03, -6.8613E-03, -6.3757E-03, -5.6183E-03, -5.0231E-03, -3.9845E-03, -2.8215E-03, -1.8234E-03, -6.8922E-04, 3.2084E-04, 1.3558E-03, 2.2928E-03, 3.1285E-03, 3.8913E-03, 4.5682E-03, 5.0235E-03, 5.4432E-03, 5.7582E-03, 5.7469E-03, 5.6927E-03, 5.5019E-03, 4.9312E-03, 4.2829E-03, 3.4672E-03, 2.4329E-03, 1.0103E-03, -5.3070E-04, -2.2142E-03, -4.0092E-03, -5.8396E-03, -7.5892E-03, -8.8696E-03, -9.2575E-03, -8.1346E-03, -4.6503E-03, 2.0708E-03, 1.1745E-02, 1.7244E-02, -2.1483E-02, 1.7244E-02, 1.1745E-02, 2.0708E-03, -4.6503E-03, -8.1346E-03, -9.2575E-03, -8.8696E-03, -7.5892E-03, -5.8396E-03, -4.0092E-03, -2.2142E-03, -5.3070E-04, 1.0103E-03, 2.4329E-03, 3.4672E-03, 4.2829E-03, 4.9312E-03, 5.5019E-03, 5.6927E-03, 5.7469E-03, 5.7582E-03, 5.4432E-03, 5.0235E-03, 4.5682E-03, 3.8913E-03, 3.1285E-03, 2.2928E-03, 1.3558E-03, 3.2084E-04, -6.8922E-04, -1.8234E-03, -2.8215E-03, -3.9845E-03, -5.0231E-03, -5.6183E-03, -6.3757E-03, -6.8613E-03, -6.7713E-03, -6.8294E-03, -6.6005E-03, -6.0056E-03, -5.0216E-03, -3.5911E-03, -2.1992E-03, -6.1249E-04, 1.1243E-03, 2.9318E-03, 4.7340E-03, 6.4793E-03, 7.6468E-03, 8.4249E-03, 8.8287E-03, 8.9175E-03, 8.1747E-03, 7.0877E-03, 5.3580E-03, 3.4112E-03, 1.2274E-03, -9.4219E-04, -2.8622E-03, -3.9750E-03, -3.9543E-03, -2.8087E-03, -7.8570E-04, 2.4269E-04, -2.6514E-05, -1.3243E-03, -3.3024E-03, -5.5470E-03, -7.4937E-03, -8.9087E-03, -9.5292E-03, -9.2554E-03, -8.5275E-03, -6.8351E-03, -4.8321E-03, -2.3854E-03, 4.0083E-05, 2.3408E-03, 4.3764E-03, 5.5948E-03, 6.4352E-03, 6.8024E-03, 6.6834E-03, 6.1306E-03, 5.2743E-03, 4.5024E-03, 3.1887E-03, 1.6520E-03, 1.0377E-04, -1.2999E-03, -2.7391E-03, -3.7806E-03, -4.4738E-03, -5.3431E-03, -5.4786E-03, -5.2170E-03, -5.2591E-03, -4.6542E-03, -4.3620E-03, -3.4640E-03, -2.9022E-03, -1.9125E-03, -1.2915E-03, -8.1451E-04, 6.4859E-05, 6.3491E-04, 1.0635E-03, 1.7091E-03, 2.1010E-03, 2.3390E-03, 2.5960E-03, 2.6527E-03, 2.5509E-03, 2.3405E-03, 2.0733E-03, 1.7100E-03, 1.2692E-03, 7.9129E-04, 3.2485E-04, -9.7573E-05, -4.2774E-04, -6.3713E-04, -6.9320E-04, -5.7947E-04, -3.2110E-04, -1.5484E-05, 1.4854E-04, -1.7959E-06, 1.4854E-04, -1.5484E-05, -3.2110E-04, -5.7947E-04, -6.9320E-04, -6.3713E-04, -4.2774E-04, -9.7573E-05, 3.2485E-04, 7.9129E-04, 1.2692E-03, 1.7100E-03, 2.0733E-03, 2.3405E-03, 2.5509E-03, 2.6527E-03, 2.5960E-03, 2.3390E-03, 2.1010E-03, 1.7091E-03, 1.0635E-03, 6.3491E-04, 6.4859E-05, -8.1451E-04, -1.2915E-03, -1.9125E-03, -2.9022E-03, -3.4640E-03, -4.3620E-03, -4.6542E-03, -5.2591E-03, -5.2170E-03, -5.4786E-03, -5.3431E-03, -4.4738E-03, -3.7806E-03, -2.7391E-03, -1.2999E-03, 1.0377E-04, 1.6520E-03, 3.1887E-03, 4.5024E-03, 5.2743E-03, 6.1306E-03, 6.6834E-03, 6.8024E-03, 6.4352E-03, 5.5948E-03, 4.3764E-03, 2.3408E-03, 4.0083E-05, -2.3854E-03, -4.8321E-03, -6.8351E-03, -8.5275E-03, -9.2554E-03, -9.5292E-03, -8.9087E-03, -7.4937E-03, -5.5470E-03, -3.3024E-03, -1.3243E-03, -2.6514E-05, 2.4269E-04, -1.3155E-03, -1.2522E-03, 3.0919E-04, 2.2891E-03, 3.9235E-03, 4.6384E-03, 4.5866E-03, 3.7419E-03, 2.3080E-03, 7.0413E-04, -1.0109E-03, -2.5946E-03, -3.6113E-03, -4.2949E-03, -4.5236E-03, -4.2269E-03, -3.0489E-03, -1.7534E-03, -4.0073E-04, 8.9239E-04, 2.0058E-03, 2.8645E-03, 3.7819E-03, 4.1118E-03, 3.9835E-03, 3.4885E-03, 2.7857E-03, 2.2307E-03, 1.3144E-03, 3.5880E-04, -5.1833E-04, -1.3306E-03, -1.9421E-03, -2.5879E-03, -2.8347E-03, -3.1827E-03, -3.0410E-03, -3.0562E-03, -2.6173E-03, -2.3880E-03, -2.1805E-03, -1.4951E-03, -1.0049E-03, -5.5042E-04, 2.1008E-04, 8.1625E-04, 1.3602E-03, 1.9416E-03, 2.4127E-03, 2.7647E-03, 3.0044E-03, 3.0161E-03, 2.9011E-03, 2.5692E-03, 1.9788E-03, 1.0991E-03, -1.9364E-04, -1.6511E-03, -3.1698E-03, -4.4296E-03, -4.7742E-03, -3.1144E-03, 1.7709E-03, 8.1848E-03, -6.1073E-03, 8.1848E-03, 1.7709E-03, -3.1144E-03, -4.7742E-03, -4.4296E-03, -3.1698E-03, -1.6511E-03, -1.9364E-04, 1.0991E-03, 1.9788E-03, 2.5692E-03, 2.9011E-03, 3.0161E-03, 3.0044E-03, 2.7647E-03, 2.4127E-03, 1.9416E-03, 1.3602E-03, 8.1625E-04, 2.1008E-04, -5.5042E-04, -1.0049E-03, -1.4951E-03, -2.1805E-03, -2.3880E-03, -2.6173E-03, -3.0562E-03, -3.0410E-03, -3.1827E-03, -2.8347E-03, -2.5879E-03, -1.9421E-03, -1.3306E-03, -5.1833E-04, 3.5880E-04, 1.3144E-03, 2.2307E-03, 2.7857E-03, 3.4885E-03, 3.9835E-03, 4.1118E-03, 3.7819E-03, 2.8645E-03, 2.0058E-03, 8.9239E-04, -4.0073E-04, -1.7534E-03, -3.0489E-03, -4.2269E-03, -4.5236E-03, -4.2949E-03, -3.6113E-03, -2.5946E-03, -1.0109E-03, 7.0413E-04, 2.3080E-03, 3.7419E-03, 4.5866E-03, 4.6384E-03, 3.9235E-03, 2.2891E-03, 3.0919E-04, -1.2522E-03, -1.3155E-03); \n//center of the convolution \nint Nc = 64; \n//number of ranks \nint Nr = 8; \n//convolution size \nint N = 129;\n\n\nfloat pack2(vec2 a)\n{\n    return uintBitsToFloat(packHalf2x16(a));\n}\n\nvec2 unpack2(float packed)\n{\n    return unpackHalf2x16(floatBitsToUint(packed));\n}\n\nivec2 wrap(ivec2 p, ivec2 res)\n{\n    return (p + res)%res;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Subtract pressure gradient to ensure zero divergence.\n\n#define PressureTexture iChannel1\n#define VelocityTexture iChannel0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 inverseResolution = vec2(1.0) / iResolution.xy;\n    vec2 uv = fragCoord.xy * inverseResolution;\n    \n    float x0 = texture(PressureTexture, uv - vec2(inverseResolution.x, 0)).x;\n    float x1 = texture(PressureTexture, uv + vec2(inverseResolution.x, 0)).x;\n    float y0 = texture(PressureTexture, uv - vec2(0, inverseResolution.y)).x;\n    float y1 = texture(PressureTexture, uv + vec2(0, inverseResolution.y)).x;\n    vec2 pressureGradient = -(vec2(x1, y1) - vec2(x0, y0)) * HELMHOLTZ_DECOMP_FACTOR;\n    vec4 oldV = texture(VelocityTexture, uv);\n    \n    fragColor = vec4(oldV.xy - pressureGradient, 0.0, oldV.w);\n    \n    ivec2 p = ivec2(fragCoord.xy);\n    ivec2 resol = ivec2(iResolution.xy);\n    //the laplacian of the density field is the source term for the poisson equation\n    fragColor.z = texelFetch(PressureTexture, wrap(p + ivec2(1,0),resol), 0).x + \n                  texelFetch(PressureTexture, wrap(p - ivec2(1,0),resol), 0).x + \n                  texelFetch(PressureTexture, wrap(p + ivec2(0,1),resol), 0).x +\n                  texelFetch(PressureTexture, wrap(p - ivec2(0,1),resol), 0).x - \n                  4.0*texelFetch(PressureTexture, p, 0).x;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//https://www.shadertoy.com/view/ldd3WS\n// Advection & force\n\n// Magic force within a rectangle.\nconst vec2 Force = vec2(3000.0, 0.0);\nconst vec2 ForceAreaMin = vec2(0.0, 0.2); \nconst vec2 ForceAreaMax = vec2(0.06, 0.8);\n\n// Circular barrier.\nconst vec2 BarrierPosition = vec2(0.2, 0.5);\nconst float BarrierRadiusSq = 0.02;\n\n#define VelocityTexture iChannel0\n\n//https://www.shadertoy.com/view/MllSzX\n//=======================================================================================\n#define c_textureSize iResolution.xy\n#define c_onePixel  (1.0 / c_textureSize)\n#define c_twoPixels  (2.0 / c_textureSize)\n\nvec4 CubicHermite (vec4 A, vec4 B, vec4 C, vec4 D, float t)\n{\n\tfloat t2 = t*t;\n    float t3 = t*t*t;\n    vec4 a = -A/2.0 + (3.0*B)/2.0 - (3.0*C)/2.0 + D/2.0;\n    vec4 b = A - (5.0*B)/2.0 + 2.0*C - D / 2.0;\n    vec4 c = -A/2.0 + C/2.0;\n   \tvec4 d = B;\n    \n    return a*t3 + b*t2 + c*t + d;\n}\n\n//=======================================================================================\nvec4 BicubicHermiteTextureSample (vec2 P)\n{\n    vec2 pixel = P * iResolution.xy + 0.5;\n    \n    vec2 frac = fract(pixel);\n    pixel = floor(pixel) / iResolution.xy - vec2(c_onePixel/2.0);\n    \n    vec4 C00 = texture(iChannel0, pixel + c_onePixel*vec2(-1.0 ,-1.0));\n    vec4 C10 = texture(iChannel0, pixel + c_onePixel*vec2( 0.0        ,-1));\n    vec4 C20 = texture(iChannel0, pixel + c_onePixel*vec2( 1 ,-1));\n    vec4 C30 = texture(iChannel0, pixel + c_onePixel*vec2( 2,-1));\n    \n    vec4 C01 = texture(iChannel0, pixel + c_onePixel*vec2(-1 , 0.0));\n    vec4 C11 = texture(iChannel0, pixel + c_onePixel*vec2( 0.0        , 0.0));\n    vec4 C21 = texture(iChannel0, pixel + c_onePixel*vec2( 1 , 0.0));\n    vec4 C31 = texture(iChannel0, pixel + c_onePixel*vec2( 2, 0.0));    \n    \n    vec4 C02 = texture(iChannel0, pixel + c_onePixel*vec2(-1 , 1));\n    vec4 C12 = texture(iChannel0, pixel + c_onePixel*vec2( 0.0        , 1));\n    vec4 C22 = texture(iChannel0, pixel + c_onePixel*vec2( 1 , 1));\n    vec4 C32 = texture(iChannel0, pixel + c_onePixel*vec2( 2, 1));    \n    \n    vec4 C03 = texture(iChannel0, pixel + c_onePixel*vec2(-1 , 2));\n    vec4 C13 = texture(iChannel0, pixel + c_onePixel*vec2( 0.0        , 2));\n    vec4 C23 = texture(iChannel0, pixel + c_onePixel*vec2( 1 , 2));\n    vec4 C33 = texture(iChannel0, pixel + c_onePixel*vec2( 2, 2));    \n    \n    vec4 CP0X = CubicHermite(C00, C10, C20, C30, frac.x);\n    vec4 CP1X = CubicHermite(C01, C11, C21, C31, frac.x);\n    vec4 CP2X = CubicHermite(C02, C12, C22, C32, frac.x);\n    vec4 CP3X = CubicHermite(C03, C13, C23, C33, frac.x);\n    \n    return CubicHermite(CP0X, CP1X, CP2X, CP3X, frac.y);\n}\n\nvec4 advectionPass(in vec2 fragCoord)\n{\n    vec4 fragColor = vec4(0.0);\n    vec2 inverseResolution = vec2(1.0) / iResolution.xy;\n    vec2 uv = fragCoord.xy * inverseResolution;\n\n    float dt = 0.01;\n    vec2 v1 = texture(VelocityTexture, uv.xy).xy;\n    vec2 v2 = texture(VelocityTexture, uv.xy - 0.5 * v1 * dt * inverseResolution).xy;\n    vec2 v3 = texture(VelocityTexture, uv.xy - 0.5 * v2 * dt * inverseResolution).xy;\n    vec2 v4 = texture(VelocityTexture, uv.xy - v3 * dt * inverseResolution).xy;\n    vec2 oldVelocity = (1.0 * v1 + 2.0 * v2 + 2.0 * v3 + 1.0 * v4) / 6.0;\n    \n    vec2 samplePos = uv - oldVelocity * dt * inverseResolution;\n    vec4 outputDataL = texture(VelocityTexture, samplePos);\n    vec4 delta =  vec4(1.5, 1.5, 0.0, 0.5)*abs(outputDataL);\n    vec4 outputData = clamp(BicubicHermiteTextureSample(samplePos), outputDataL - delta, outputDataL + delta);\n    vec2 outputVelocity = outputData.xy;\n    \n    // Add force.\n    if(uv.x > ForceAreaMin.x && uv.x < ForceAreaMax.x &&\n       uv.y > ForceAreaMin.y && uv.y < ForceAreaMax.y)\n    {\n    \toutputVelocity += Force * iTimeDelta;\n    }\n    \n   \n\n    // Circle barrier.\n    vec2 toBarrier = BarrierPosition - uv;\n    toBarrier.x *= inverseResolution.y / inverseResolution.x;\n    if(dot(toBarrier, toBarrier) < BarrierRadiusSq)\n    {\n        fragColor = vec4(0.0, 0.0, 999.0, 0.0);\n    }\n    else\n    {\n        fragColor = vec4(outputVelocity, 0.0, outputData.w)*0.999;\n        if(abs(sin(100.0*uv.y)) < 0.15 && abs(uv.x - 0.0) < 0.005)\n            fragColor.w += 1.0;\n    } \n    \n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = advectionPass(fragCoord); \n    \n    float divergence = 0.0;\n    if(fragColor.z > 0.0)\n        divergence = 0.0;\n    else\n    {\n        float x0 = advectionPass(fragCoord - vec2(1,0)).x;\n        float x1 = advectionPass(fragCoord + vec2(1,0)).x;\n        float y0 = advectionPass(fragCoord - vec2(0,1)).y;\n        float y1 = advectionPass(fragCoord + vec2(0,1)).y;\n        divergence = ((x1-x0) + (y1-y0)) * 0.5;\n    }\n    fragColor.z = divergence;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float getDensity(ivec2 p)\n{\n    return texelFetch(iChannel0, p, 0).z;\n}\n\nfloat getEstimatedDensity(ivec2 p)\n{\n    return texelFetch(iChannel2, p, 0).z;\n}\n\nfloat getDensityError(ivec2 p)\n{\n    //find how far off the estimated density is from the actual density and use that as the source term\n    return getDensity(p) + PRESSURE_REUSE_FACTOR*getEstimatedDensity(p);\n}\n\n\n//single component convolution pass x\n//first pass of separable poisson filter convolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    //do a convolution in the x direction on iChannel0\n    ivec2 resol = ivec2(iResolution.xy);\n    ivec2 coord = ivec2(fragCoord.xy);\n\n    vec4 sum0 = vec4(0.0);\n    vec4 sum1 = vec4(0.0);\n\n    for (int i = -Nc; i <= Nc; i++) \n    {\n        ivec2 pos = wrap(coord + ivec2(i, 0), resol);\n       \n        float density = getDensityError(pos);\n\n        int id = (i + Nc);\n        //loop over ranks\n        for(int j = 0; j < 4; j++)\n        {\n            sum0[j] += density * U[id + 2 * j * N];\n            sum1[j] += density * U[id + (2 * j + 1) * N];\n        }\n    }\n\n    //loop over pairs of ranks\n    for(int j = 0; j < 4; j++)\n    {\n        fragColor[j] = pack2(vec2(sum0[j], sum1[j]));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//second pass: do the convolution in the y direction\n//and write the result to the output\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //do a convolution in the y direction on iChannel0\n    ivec2 resol = ivec2(iResolution.xy);\n    ivec2 coord = ivec2(fragCoord.xy);\n\n    float sum = 0.0;\n    for (int i = -Nc; i <= Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        ivec2 pos = wrap(coord + ivec2(0, i), resol);\n        \n        //wrap around\n        pos.x = (pos.x + resol.x) % resol.x;\n        pos.y = (pos.y + resol.y) % resol.y;\n        \n        vec4 data = texelFetch(iChannel0, pos, 0);\n\n        //loop over pairs of ranks\n        for(int j = 0; j < 4; j++)\n        {\n            vec2 val = unpack2(data[j]);\n            sum += val.x * V[i + Nc + 2 * j * N];\n            sum += val.y * V[i + Nc + (2*j + 1) * N];\n        }\n    }\n\n    //get previous poisson solution\n    float prev = PRESSURE_REUSE_FACTOR*texelFetch(iChannel1, coord, 0).x;\n\n    //add the previous poisson solution to the convolution\n    sum += prev;\n\n    //return the final poisson solution\n    fragColor = vec4(sum);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}