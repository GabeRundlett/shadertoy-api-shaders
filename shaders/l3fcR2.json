{
    "Shader": {
        "info": {
            "date": "1726421561",
            "description": "original https://www.shadertoy.com/view/4ltGW4#",
            "flags": 0,
            "hasliked": 0,
            "id": "l3fcR2",
            "likes": 5,
            "name": "hole in",
            "published": 3,
            "tags": [
                "fractal",
                "cubic"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 73
        },
        "renderpass": [
            {
                "code": "#define ANTIALIAS\n\nfloat DE(vec3 p0){\n    vec2 p = vec2(length(p0.xz), -p0.y);\n    float a = .5;\n    // 2-dimentional DE for hyperbola y=a/x\n    float d = sqrt((p.x+p.y)*(p.x+p.y)-4.*(p.x*p.y-a))+.5;\n    return (-p.x-p.y+d)/2.;\n}\n\nfloat softmod(float x, float w){\n    x = mod(x, 2.);\n#ifdef ANTIALIAS\n    w /= iResolution.y;\n    return smoothstep(.5-w,.5+w,x)*(1.-smoothstep(1.5-w,1.5+w,x));\n#else\n    return floor(x);\n#endif\n}\nstruct C{\n    float d;\n    int t;\n};\n    \nfloat rand2(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(vec3 v){\n    return rand2(vec2(v.x*v.z,v.y*v.z));\n}\n\nint wait(float t){\n    float period = 10.*3.141592/1.5;\n    t = mod(t,period);\n    if(t < period/2.){\n        if(t < period/8.)return 0;\n        if(t < period/4.)return 1;\n        return int((t/period-1./4.)*40.)+2;\n    }\n    return 0;\n}\n\n\n   \n    \n\n\n\nvec3 transform(vec3 p){\n    float t = iTime+sin(iTime*1.5);\n    p -= vec3(10,0,0);\n    p *= mat3(cos(t),0,sin(t),0,1,0,-sin(t),0,cos(t));\n    t *= 1.2;\n\n    p *= mat3(cos(t),sin(t),0,-sin(t),cos(t),0,0,0,1);\n    return p;\n}\n\nfloat pattern(vec3 p){\n    p = transform(p);\n    float xtime =iTime * 0.2;\n\tmat2 rot = mat2(cos(xtime),-sin(xtime), \n\t\t\tsin(xtime), cos(xtime));\n   \n\t\n\tfloat xzoom = 1.5;\n\tfloat zoom = xzoom/(mod(iTime , xzoom)+xzoom)*3.0-1.0;\n\tp.xy *= zoom;\n    float s = 0.7 / 0.7;\n    p /= s;\n    p /= 1.3;\n    p += 0.5;\n    float d = 0.;\n    float t = iTime;\n    vec3 e = vec3(float(int(t/(4.*3.141592/1.5))));\n    for(int i=0;i<20;i++){\n     \n        float w = pow(2.,float(i));\n        float f;\n\n        f = rand(vec3(0,0,float(i))+e);\n        if(p.x < f)e.x+=w;\n        else e.x-=w;\n        if(pow(max(0.,1.-abs(p.x-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n\n        f = rand(vec3(1,0,float(i))+e);\n        if(p.y < f)e.y+=w;\n        else e.y-=w;\n        if(pow(max(0.,1.-abs(p.y-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n\n        f = rand(vec3(2,0,float(i))+e);\n        if(p.z < f)e.z+=w;\n        else e.z-=w;\n        if(pow(max(0.,1.-abs(p.z-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n    }\n    return d<1.?0.:1.;\n}\n\nC dist(vec3 p){\n    vec3 d = abs(transform(p))-1.;\n    float u = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n    return C(u-0.01,0);\n}\n\nC dist2(vec3 p){\n    if(pattern(p) > 0.5){\n        return C(1.,1);\n    }else{\n\t    return C(0.,0);\n    }\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0.001,0);\n    return normalize(vec3(\n        dist(p+e.xyy).d - dist(p-e.xyy).d,\n        dist(p+e.yxy).d - dist(p-e.yxy).d,\n        dist(p+e.yyx).d - dist(p-e.yyx).d));\n}\n\nvec3 ground(vec3 v){\n    return vec3(pow(dot(v,vec3(1,0,0)),4.)/8.);\n}\n\nvec3 object(vec3 p,vec3 v,vec3 n){\n    float fac = 0.0;\n    fac += pow(dot(reflect(v,n),vec3(-0.9,-0.5,-0.9)),1.)/8.;\n    fac += pow(dot(reflect(v,n),vec3(-0.5,0.9,1.2)),1.)/4.;\n    return vec3(fac);\n}\n\nvec3 neon(vec3 p,vec3 v,vec3 n){\n    if(n.x > -1.2)return ground(v);\n\telse return vec3(0,0.5-0.5*n.x,1)*vec3(1.,0.,5.2)*10.;\n}\n\nvec3 color(vec3 p, vec3 v){\n    float d = 0.001;\n    int maxIter = 100;\n    C c=C(0.,-1);\n    for(int i=0;i<100;i++){\n        C ci=dist(p+d*v);\n        float rd = ci.d;\n        if(abs(rd) < 0.001){\n            maxIter=i;\n            c=ci;\n            break;\n        }\n        d += rd;\n    }\n    if(c.t==-1)return ground(v);\n    c=C(0.,-1);\n    for(int i=0;i<100;i++){\n        C ci=dist2(p+d*v);\n        float rd = ci.d;\n        if(abs(rd) < 0.001){\n            maxIter=i;\n            c=ci;\n            break;\n        }\n        d += 0.000011;\n    }\n    if(c.t==-1)c.t=1;\n    vec3 pos = p+d*v;\n    vec3 n = normal(pos);\n    if(c.t==0)return object(pos,v,n);\n    else return neon(pos,v,n);\n}\n\n#define PI (atan(1.)*4.)\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\nvec4 O2=O;\n\n O2=vec4(0);\n    vec3 p3,r=iResolution,\n    d3=normalize(vec3((U-.5*r.xy)/r.y,1));  \n    for(float i=0.,s,e,g=0.;\n        ++i<90.;\n        O2.xyz+=mix(vec3(1),H(log(s)*.2),.6)*.02*exp(-.3*i*i*e)\n    )\n    {\n        p3=g*d3;\n        p3+=vec3(0,0,iTime*.5);\n        p3=R(p3,normalize(vec3(1,2,2)),.5);\n        p3=sin(p3+3.*sin(p3*.5));\n        s=2.;\n        for(int i=0;i++<5;)\n            p3=abs(p3-2.7)-1.3,\n            s*=e=2./min(dot(p3,p3),1.5),\n            p3=abs(p3)*e;\n        g+=e=length(p3)/s;\n    }\n\n\n\n\nvec2 R2 = iResolution.xy, \n\tuv2 = (2.*U.xy - R2)/R2.y;\n      float xtime =iTime * 0.2;\n\tmat2 rot = mat2(cos(xtime),-sin(xtime), \n\t\t\tsin(xtime), cos(xtime));\n   \n\t\n\tfloat xzoom = 1.5;\n\tfloat zoom = xzoom/(mod(iTime , xzoom)+xzoom)*3.0-1.0;\n\n    vec3 p2=vec3(0,5.*cos(iTime),5.*sin(iTime));\n    vec3 v=vec3(0.5,uv2.y,uv2.x);\n    v.yz/=3.;\n    v=normalize(v);\n\t;\n\n\n    float fov = 1.8, // it's not really FOV\n    \t  an = -.7 /*+ (iMouse.y / iResolution.y - .5) * 3.*/;\n    vec2 R = iResolution.xy;\n    U = (U - R/2.) / R.y;\n    vec3 p = vec3(0., -.7/* + (iMouse.x / iResolution.x - .5) * 6.*/, -1.),\n         d = vec3(U * fov, 1.),\n         p0 = p;\n    d.yz *= mat2(cos(an),sin(an),\n                -sin(an),cos(an));\n  \n    for (int i = 0; i < 64; ++i) p += d * DE(p);\n    \n    \n    float fh = 3.5, // fog options.\n          fs = 1.,\n          f0 = 1.,\n          gr = 10.0, // background color\n          l = length(p.xz*0.2) /*- 1e5 + iTime*/, // uncomment for cool animation\n          s = length(p-p0);\n    \n    \n    float c1 = softmod(atan(p.z,p.x)/3.14159*32.+iTime*10., 12.*s);\n    float c2 = softmod((l+p.y)*4., 6.*s);\n    float c = l>.95 || l > 1e4 ? 1.\n        : min(c1+c2,1.-c1-c2);\n   \n    O = vec4(color(p2*vec3(5.,0.,1.2),v)*2.,1.0);\n     O+= vec4(c*O2.x * gr * log((p.x+fh)*fs)/log((fh-f0)*fs*100.));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}