{
    "Shader": {
        "info": {
            "date": "1584675226",
            "description": ">: )",
            "flags": 0,
            "hasliked": 0,
            "id": "wsXcDH",
            "likes": 2,
            "name": "2D COVID-19",
            "published": 3,
            "tags": [
                "2d",
                "simple",
                "sdf",
                "coronavirus",
                "covid19"
            ],
            "usePreview": 0,
            "username": "charstiles",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "#define spokes 4.0\n\n\n//helper fns I got these from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\n// exponential smooth min (k = 32); from IQ\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\n\nvec2 pow2D(vec2 p,float e){\n\treturn vec2(pow(abs(p.x),e), pow(abs(p.y),e));\n\n}\n\n\n//these are the lil red nubs \n\nfloat crownBoops(vec2 pos){\n\n\tfloat sphereDiff = 0.9- (length(pos) - 0.1);\n\n\tfloat sphere = (length(pos) - 0.83);\n    \n \tfloat angle=atan(pos.y, pos.x); \n    \n    float boop = sphere- (pow( abs(sin(angle*spokes)),3.)* 0.331);\n    \n    boop += noise(angle*60.)*0.09; // make the end a lil noisy\n    \n    return  max(boop, sphereDiff); // take the difference so we only get the top part of the sin wave\n}\n\nfloat virus(vec2 pos){\n\n\tfloat sphere = (length(pos) - 0.63 );// the base\n    \n \tfloat angle=atan(pos.y, pos.x); // angle around the circle\n    float wave = (pow( abs(sin(angle*spokes)),6.)* 0.31); // goes up and down around the circle\n    return sphere- wave + (noise(sin(angle*2.)) * 0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = (fragCoord/iResolution.xy - 0.5)   *2.0; // (0,0) is in the center of the screen\n    \n    uv *=1.5; // idk make it a lil smaller\n    \n\tuv.x *= iResolution.x/iResolution.y; // sadly the screen is not square, we must fix uv ratio\n    \n    float shape1 = crownBoops(uv);\n    float shape2 = virus(uv);\n  \n    vec3 col = vec3(smin(shape1,shape2,8.0 )); // smooth min the top nubs and the rest of the virus\n    \n    col = ceil(col); // everthing is an SDF which is a gradient but we want hard lines so we ceiling the coloe \n    \n\tcol = vec3(1)-col; // make it white on black \n    \n    col.yz -= length(pow2D(uv,4.0) * vec2(0.5)); // add the red\n\n    // Output to screen\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}