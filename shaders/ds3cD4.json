{
    "Shader": {
        "info": {
            "date": "1695068666",
            "description": "a diagram demonstrating how to generate smooth noise from a high frequency function for demonstrative porpuses. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ds3cD4",
            "likes": 6,
            "name": "Smooth Noise Diagram",
            "published": 3,
            "tags": [
                "smoothnoise",
                "maths",
                "diagram"
            ],
            "usePreview": 0,
            "username": "ircss",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "#define smoothing      0.006\n#define lineSize       0.01\n#define animationTime fract(iTime * 0.025)\nvoid DrawLine(float m, float c, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n\n    vec2  xy   = vec2(uv.x, uv.x * m + c); \n    float d    = distance(xy, uv);\n    sceneColor = mix(lineColor, sceneColor, smoothstep(size, size + smoothing, d));\n    \n}\nvoid DrawHalfVectorWithLength(vec2 origin, vec2 vector, float len, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    float m    = 1. - step(0.,vUv/v2);\n          m   += step(len, vUv/v2);\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.01, d)+ m, 0. ,1.)); \n}\n\nfloat baseWaveFunc(float x)\n{\n    float t  = smoothstep(0.05, 0.15, animationTime)  ;\n    float t2 = smoothstep(0.175, 0.25, animationTime)  ;\n    float t3 = smoothstep(0.275, 0.325, animationTime)  ;\n    float t4 = smoothstep(0.35, 0.425, animationTime)  ;\n      \n    return sin(x*(mix(3., 8., t) + mix(0., 8., t2) + mix(0., 20., t3) + mix(0., 100., t4) ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5,0.5);\n    \n    uv.x *=iResolution.x/iResolution.y;\n    uv *= 5.;\n   \n    \n    \n    \n    vec3 col = vec3( 0.0);\n    \n    vec2 fUV = fract(uv* 4.);\n    vec2 iUV = floor(uv* 4.);\n    \n    \n   vec2 disToCenter = abs( fUV - vec2(0.5));\n    \n  \n    \n    if(max(disToCenter.x, disToCenter.y)> 0.45) col = vec3(0.1);\n    \n    \n    DrawHalfVectorWithLength(vec2(-5.,0.), vec2(1.,0.), 10., uv, 0.001, vec3(1.), col);\n    DrawHalfVectorWithLength(vec2(0.,-5.), vec2(0.,1.), 10., uv, 0.001, vec3(1.), col);\n    \n    \n    float drawInterpolation = smoothstep(0.455, 0.65, animationTime);\n    uv.x += smoothstep(0.55, 1.3, animationTime) * 22.5;\n    float sampleRate = 0.8;\n     uv.x*= sampleRate;\n    float sinus = baseWaveFunc(uv.x);\n    \n    float spaceFloor = floor(uv.x);\n    float spaceFrac  = fract(uv.x); \n    \n    float sampleThis  = baseWaveFunc((spaceFloor +0.5     )) ;\n    float sampleRight = baseWaveFunc((spaceFloor +0.5 + 1.)) ;\n    float sampleLeft  = baseWaveFunc((spaceFloor +0.5 - 1.)) ;\n    \n    vec2 samplePoint = vec2(spaceFloor + 0.5,      sampleThis) ;\n    \n    float line = mix(sampleLeft, sampleThis, smoothstep(-0.5, 0.5, spaceFrac));\n    line = mix(line, sampleRight, smoothstep(0.5, 1.5, spaceFrac));\n    \n    col = mix(vec3(1.,0.86,0.), col,min(1.,smoothstep(lineSize, lineSize + smoothing, \n     abs(sinus - uv.y) ) + smoothstep(0.455, 0.475, animationTime) ) );\n    \n        col = mix(col, vec3(0.,0.3,1.), \n        smoothstep(0.12, 0.1, length((samplePoint-  uv)   * vec2(1., sampleRate)) ));\n    \n    \n    \n    col = mix(vec3(0., 1., 0.), col,min(1., smoothstep(0.0, 0.1, max(0., uv.x - ( -5. + drawInterpolation* 20.)))\n    + smoothstep(0.01,0.02, abs(uv.y - line)))); \n     \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}