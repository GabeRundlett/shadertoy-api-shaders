{
    "Shader": {
        "info": {
            "date": "1532086982",
            "description": "the optical circuit shader, deconsonstructed a lot, wiiiththt a l ot oannotations\nosource shader was very crypptic, short labeels eveverywhere.",
            "flags": 0,
            "hasliked": 0,
            "id": "lltyR7",
            "likes": 17,
            "name": "optical circuit deconstruction D",
            "published": 3,
            "tags": [
                "optical",
                "circuit",
                "deconstruction"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 853
        },
        "renderpass": [
            {
                "code": "\n//parent: https://www.shadertoy.com/view/MlfczH\n//Optical-Circuit optical circuit scene 1 deconstruction a\n\n/*\nthe [optical circuit demo] video source code once appeared on glslsandbox.com\n\nwww.pouet.net/prod.php?which=65125\nhttps://www.youtube.com/watch?v=ISkIB4w6v6I\n\nIt is fractal code golf overkill in [0..6] scenes.\nThis is a deconstruction of scene 1. ,not the whole demo.\nUn-used functions(only used in other scenes)are removed;\nscene-specific branches are set to 1,or removed \n...(multiplying by *0. or adding -0 iterations)\n... all changes are annotated.\n\nThis may run slightly faster due to removing all schene-specific branching\nMost of that modifies iteration count(between scenes,which are static per shader)\nThe [smart re-use of schene specific branches and modifiers] is what makes this a 4k demo.\n... at a cost of running slightly slower,by summing up scene-modifiers.\n\nmost recent approach in summer 2018,removed globals and idenfified a lot of functions into subroutines.\nthe \"hashes\" are a bit unusual,overly specific but fine.\n//this is now very sorted and demystified.\n//it sure has an awesomely extended volume marcher for glow and accumulators for it\nand thats glow-marching\n*/\n\n#define tim (iTime+timeOffset)\n\n#define iterO 4\n#define iterVolume 32\n\n//#define scene 1\n#define timeOffset 115.984024\n\n#define dd(a)dot(a,a)\n#define v0 float\n#define v1 vec2\n#define v2 vec3\n#define v3 vec4\n#define fra(u)(u-.5*iResolution.xy)*ViewZoom/iResolution.y\nv0 mav(v1 a){return max(a.y,a.x);}\nv0 mav(v2 a){return max(a.z,mav(a.xy));}\nv0 mav(v3 a){return max(mav(a.zw),mav(a.xy));}\n#define miv(a)-mav(-a)\nfloat vsum(vec3 a){return dot(a,vec3(1));}//dot()is generally faster on a gpu than 2add()\n //return a.x+a.y+a.z;}\n\nconst float pi=acos(-1.);//3.14\nconst float t0=sqrt(.5);//0.707\n\n#define tswap h=j;j=k;k=l\n\n//return a,rotated by b,originally called F()\nvec3 rot(vec3 a,float b){float c=sin(b),d=cos(b);return mat3(d,-c,0,c,d,0,0,0,1)*a;}\n\n//fractal glowing planes\nvec3 G(vec3 a,float b\n){a=fract(a*.2)*2.-1.\n ;a.z=b\n ;float c=50.//brightness modifier\n ;for(int i=0;i<6;++i//iteration count is scene specific\n){float d=clamp(dd(a),.05,.65);\n  ;c*=d;\n  ;a=abs(a)/d-1.31;\n  ;a.xy=a.xy*mat2(1,1,-1,1)*t0\n ;}return a*c;}\n \n //i thought this id some 4d magic,but it is barely 3d. \n //its core hash is 2d,used to move planes endlessly\n //and one extension in 3d of it exists,so its barely 3d.\n\n//sub of W and I(both aren ot in scene1)\nvec3 vV(float a,vec3 b,float c,float V){a*=c;return 1./((1.+2.*b/a+b*b/(a*a))*c+.0001);}\n//only used twice in mainImage,a and b and c are the same both times.\nvec3 wW(vec3 a,float b,float c,float d,float V\n){vec3 e=(vV(.01,abs(a),d,V)*2.+vV(.05,vec3(length(a.yz),length(a.zx),length(a.xy)),d,V)*5.)\n  *(sin(tim*vec3(2.1,1.3,1.7)+b*10.)+1.)\n ;return(e*7.+e.yzx*1.5+e.zxy*1.5)*max(1.-c*200./d,0.)/d*float(100-30);}//is scene specific\n\n//L M N O define the dark fractal shape,O is a fractal,L M N are a \"strange hash\"\n//L is sub of M and N\n//faL generates \"continuously moving planes\"\nfloat faL(vec2 a){vec2 b=abs(fract(a.xy+vec2(0,.5))-.5),c=abs(fract(a.xy+.5)-.5);b.x-=.46;return .033-min(mav(b),.08-mav(c));}\n//M is sub of N\n//\nfloat faM(vec3 a){vec3 b=abs(fract(a*4.+.5)-.5)*.25;return max(mav(b)-.08,max(faL(a.xy)-.01,.012-length(fract(a*25.)-.5)*.04));}\n//M is sub of O\nfloat fa6n(vec3 a){\n ;return min(miv(vec4(faM(a),faM(a.zyx),faM(a.zxy),faL(a.xy))),miv(vec2(faL(a.zy),faL(a.zx))));}\n \n\n//o is used once by T(),o defines a black fractal as base geometry\nfloat blackFractalO(vec3 a\n){vec4 b=vec4((fract(a*.2+.5)-.5)*4.,1.)\n ;for(int i=0;i<iterO;++i\n){b.xyz=clamp(b.xyz,-1.,1.)*2.-b.xyz\n  ;b*=clamp(max(.21/dd(b.xyz),.21),.0,1.)*-15.7\n  ;}a=b.xyz/b.w*5.;return max(length(a)-1.,fa6n(a))*.25;}\n//used 5* in mainImage T is a very schene specific function;\n\nfloat spereRows(vec3 c,vec3 e){//rows of spheres to look like hovercar highways\n ;float r=max(length(c)-.006,faL(c.xy*10.)*.1-.0002)\n ;r=min(r,.04)\n ;r=max(r,mav(e.xz)-.05)\n ;return r;}\n\nfloat fractalFloor(vec3 a//a is position relative to camera,assume staric camera.\n){float r\n ;float d=mav(abs(fract(a*2.0)-.5)*.5);//for scene1,K()is 100% absorbed into T.fractalFloor into this line\n ;r=max(d-.201,blackFractalO(a))//this line is the only line that includes \"blackFractalO()\"\n ;r=min(r,.299-d)//i see no difference woithout this line\n ;r=max(r,length(a)-20.)//carÂ´rve hole aroudn camera\n ;return r;}\n\n\nfloat BlackObjectT(vec3 a//black solid object,mostly defined by endlessly moving planes(removed from something)\n){vec3 b=a*20.\n ;b.y+=tim*5.*(fract(dot(floor(b),vec3(1,0,1))*pi)-.5)\n ;vec3 c=rot((fract(b.zxy)-.5)*.05,tim*8.*(fract(dot(floor(b),vec3(pi)))-.5))\n ,e=abs(fract(a+vec3(.5,.5,0))-.5)\n ;a=rot(a,tim*.025*(fract((a.z*2.-fract(a.z*2.))*.437)-.5))\n ;float r=fractalFloor(a)\n ;r=min(r,spereRows(c,e))\n ;return r;}\n\n\nvoid shuffle(inout vec4 h,inout vec4 j,inout vec4 k,inout vec4 l,int m){\n int a=m;for(int i=0;i<4;++i)if(a<4){tswap;++a;};}\n//h,j,j,l are accumulators witthing raymarching,used for \"noisy fog\"\n\nvec3 IterVol(vec4 h,vec4 j,vec4 k,vec4 l,vec3 g,float D,int m\n){shuffle(h,j,k,l,m);\n ;float o=1.,p=.0,t=.0,q=D*.1+.9,W,V\n ,n=length(j.xyz-h.xyz)\n ;vec3 f=normalize(j.xyz-h.xyz),e=h.xyz,c=vec3(1),b=vec3(0)\n ;for(int i=0;i<iterVolume;++i\n){if(t>n\n ){if(m<3)break\n   ;tswap\n   ;e=h.xyz;f=normalize(j.xyz-h.xyz);n=length(j.xyz-h.xyz)//j and h can have changed due to tswap()\n   ;--m\n   ;t=0.\n   ;if(n<.0001)break\n   ;float r=fract(h.w)\n   ;o=h.w-r\n   ;p=(floor(j.w)-o)/n\n   ;c*=mix(vec3(.17,.15,.12),vec3(1),r);}\n  ;g=e+f*t\n  ;//next 5 lines are scene specific\n  ;float u=abs(fract(g.z)-.5)//this line 100% absorbs U(),for scene1\n  ;g-=vec3(0,0,vec2(sign(fract(g.z)-.5)))*u\n  ;float v=sin(tim*.05+g.z)*.5,w=u*q+.001\n  ;vec3 x=G(g,v)\n  ;b+=(wW(x,v,u,o+p*t,V)+wW(x,v,u,o+p*t+50.,V))*c*w\n  ;c*=pow(.7,w)\n  ;t+=w;}\n ;return b;}\n\n\nvoid rm(inout vec4 h,inout vec4 j,inout vec4 k,inout vec4 l,inout vec3 g,vec3 f,inout int m,float D){\n ;f=normalize(f)//for reflection\n ;vec3 e=g\n ;vec3 s=vec3(1,-1,-1)*.0005 //epsilon\n ;float t=0.,o=1.,p=1.,q=D*.01+.99,n\n ;//raymarching loop:\n ;for(int i=0;i<64;++i\n){g=e+f*t\n  ;float d=BlackObjectT(g)\n  ;if(d<(t*5.+1.)*.0001\n ){vec3 u=normalize(BlackObjectT(g+s)*s+BlackObjectT(g+s.yyx)*s.yyx+BlackObjectT(g+s.yxy)*s.yxy+BlackObjectT(g+s.xxx)*s.xxx)\n   ;float r=pow(abs(1.-abs(dot(u,f))),5.)*.9+.1\n   ;o+=t*p\n   ;p=p*5./r\n   ;e=g+u*.0001\n   ;f=reflect(f,u)\n   ;t=.0\n   ;float v=dd(u)\n   ;if(v<.9||1.1<v||v!=v)u=vec3(0)\n   ;if(m<4){tswap;l=vec4(g,max(floor(o),1.)+clamp(r,.001,.999))\n   ;++m\n ;}}else t=min(t+d*q,100.)\n ;}\n ;if(m<4){tswap;l=vec4(g,o+t*p);++m;}\n ;}\n\nvec3 cam(vec3 c,vec3 b,vec2 glVertex){\n ;vec3 ee=normalize(vec3(sin(vec2(.53,.47)*tim)*4.+sin(vec2(.91,1.1)*tim)*2.+sin(vec2(2.3,1.7)* tim),200))\n ;vec3 ff=normalize(cross(ee,vec3(sin(tim),50,0)))\n ;return mat3(c,cross(c,b),b)*(ff*glVertex.x*1.78+cross(ff,ee)*glVertex.y+ee*1.4);}\n\n//#define resolution iResolution\nvoid mainImage(out vec4 O,in vec2 Uuu\n){//this  seems to have been an Initiation procedure,as it sets global vars.\n ;vec3 a=normalize(sin(tim*.001*vec3(21,11,17)))*20.1//basic orbit feeds into many things\n ;vec3 b=normalize(sin(tim*.001*vec3(26,106,62))-a*.05)//feeds into looking direction\n ;vec3 c=normalize(cross(b,sin(tim*.001*vec3(31,17,29))))//feeds into looking direction\n ;c=cam(c,b,Uuu.xy/iResolution.xy*2.-1.)//looking direction\n ;float D=fract(sin(vsum(c)*99.317*pi)*85.081*pi)//camera path\n ;vec4 l=vec4(a,1),k=l*.0,j=k,h=j;int m=1//inout to shuffle to scatter glowing fog\n ;rm(h,j,k,l,a,c,m,D)//a very extended raymarching function\n ;O=vec4(pow(IterVol(h,j,k,l,a,D,m),vec3(.45)),1);}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}