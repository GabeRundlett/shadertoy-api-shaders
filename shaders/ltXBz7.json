{
    "Shader": {
        "info": {
            "date": "1511644300",
            "description": "Traversal of a 2d grid with refraction. Blueish cells have a refraction index of 1 while reddish ones have a higher index (2.7). The mouse can be used to point the ray.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltXBz7",
            "likes": 26,
            "name": "2D Grid Traversal w/ Refraction",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "refraction",
                "traversal"
            ],
            "usePreview": 0,
            "username": "glk7",
            "viewed": 1172
        },
        "renderpass": [
            {
                "code": "// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst float w = 2.;\n\nfloat grid(vec2 uv, float e) \n{\n   vec2 g = smoothstep(0.0, w*e, abs(fract(uv + 0.5) - 0.5)); \n   return g.x * g.y;\n}\n\nfloat point(vec2 uv, float e, vec2 p) \n{\n\treturn smoothstep(0.07, 0.07 + w*e, length(uv - p)); \n}\n\nfloat segment(vec2 uv, float e, vec2 d, vec2 p, float l) \n{\n    return max(1.0 - min(step(0.0, dot(d, uv - p)), \n                         step(0.0, dot(d, p + d*l - uv))),\n   \t\t       smoothstep(0.015, 0.015 + w*e, abs(dot(vec2(-d.y, d.x), p - uv))));\n}\n\nfloat refract_index(vec2 c) \n{\n    return 1.0 + step(-3.2, -length(c - vec2(7.0, 6.0)))*1.7;\n}\n\nvec2 traversal(vec2 uv, float e, vec2 ro, vec2 rd) \n{   \n    vec2 v = vec2(1.0);\n    \n    vec2 n = vec2(0.0);\n    vec2 c = floor(ro) + 0.5;\n    ro -= c;\n    \n    float refri = refract_index(c - 0.5);\n    \n    for( int s = 32; s > 0; --s ){\n        vec2 d = (sign(rd)*0.5 - ro) / rd;\n        \n        v.x = min(v.x, segment(uv, e, rd, c + ro, min(d.x, d.y))); // Draw segments.\n        \n        ro += min(d.x, d.y) * rd;\n        n = -sign(rd) * step(d.xy, d.yx);\n\n        // Refraction part.\n        #if 1\n        float nrefri = refract_index(c - 0.5 - n);\n        \n        vec2 reflrd = reflect(rd, n);\n        rd = refract(rd, n, refri/nrefri);\n        \n        float t = step(0.0, -dot(rd, rd));\n       \trefri = mix(nrefri, refri, t);\n        rd += reflrd*t;\n        n *= 1.0 - t;\n        #endif\n        \n        c -= n;\n       \tro += n;\n        \n        // Draw cells and points.\n        v = min(v, \n                vec2(point(uv, e, c + ro), \n                \t step(0.5, length(floor(uv) - c + 0.5))));\n    }\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float e = 25.0 / iResolution.x;\n    vec2 offset = vec2(5.0, 3.0);\n\tvec2 uv = fragCoord.xy*e - offset;\n    \n    vec2 ro = vec2(1.7, 1.2);\n    \n    vec2 rd = (length(iMouse.xy) < 10.0)\n        \t? normalize(vec2(1.0, sin(iTime*0.2) + 1.5))\n    \t\t: normalize(iMouse.xy*e - offset - ro);\n    \n    float ri = refract_index(floor(uv));\n    vec3 c = vec3(1.0 - step(0.0, 1.0 - ri), 0.2, \n                  step(0.0, 1.0 - ri)) + 0.3;\n   \n    vec2 t = traversal(uv, e, ro, rd);\n    c += (1.0 - t.y) * 0.2;\n    c *= t.x;\n    c *= grid(uv, e);\n    c *= point(uv, e, ro);\n    \n\tfragColor = vec4(pow(clamp(c, 0.0, 1.0), vec3(0.4545)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}