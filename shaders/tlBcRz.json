{
    "Shader": {
        "info": {
            "date": "1593563795",
            "description": "fluffy ",
            "flags": 32,
            "hasliked": 0,
            "id": "tlBcRz",
            "likes": 24,
            "name": "Pseudo3D Fur",
            "published": 3,
            "tags": [
                "hm"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 655
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define PI 3.14159265\n\n#define center R*0.5\n#define L 1.\n#define P 50.\n\n#define H 23\n\nvec4 fur(vec2 p, vec2 d)\n{\n    vec4 col = vec4(0.);\n    vec2 dx = 2.*wind(p*0.1, iTime);\n    \n    for(int i = 0; i < H; i++)\n    {\n        vec2 pos = p + (d+dx)*(float(i) - float(H)/2.);  \n        \n        float k = float(i)/float(H); //the depth\n      \n        vec3 c = texture(iChannel0, pos/R).xyz; //color\n       \n        float alpha = tanh(0.025*length(c)); //transparency\n     \n        float B = 0.3*k*k*k; //brightness\n        col = mix(col, vec4(B*c, alpha), alpha); //blend\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Output to screen\n    vec2 delta = (fragCoord - iMouse.xy)/R.x;\n    float r = length(delta);\n    delta = -3.*normalize(delta)*atan(6.*r); // point of view stuff\n    \n    \n   \t\n    fragColor = tanh(2.5*vec4(0.6, 0.44, 0.44, 1.)*fur(2.*fragCoord, delta));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//generate the fur base texture\n\n\n#define center R*0.5\n#define L 1.\n#define P 50.\nvec3 fur_level(vec2 p, vec2 s)\n{\n    vec2 dx = center - p;\n    float f = perlin(dx + s).x;\n    return vec3(f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //idk random stuff\n    vec3 f = vec3(0.);\n    vec3 d = vec3(0., 0., 1.);\n    for(int i = 0; i < 4; i++)\n    {\n        f += smoothstep(0.1, 1., fur_level(d.z*fragCoord + d.xy, vec2(i)*1e3));\n        d = vec3(d.x,d.y,0.3)*d + vec3(2.64, 1.5446, 0.);\n    }\n    \n    fragColor = vec4(f*f, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define R iResolution.xy\n#define PI 3.14159265\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 perlin(vec2 p)\n{\n   vec2 pi = floor(p);\n   vec2 pf = p - pi;\n   vec2 pfc = 0.5 - 0.5*cos(pf*PI);\n   vec2 a = vec2(0.,1.);\n   \n   vec2 a00 = hash22(pi+a.xx);\n   vec2 a01 = hash22(pi+a.xy);\n   vec2 a10 = hash22(pi+a.yx);\n   vec2 a11 = hash22(pi+a.yy);\n   \n   vec2 i1 = mix(a00, a01, pfc.y);\n   vec2 i2 = mix(a10, a11, pfc.y);\n   \n   return mix(i1, i2, pfc.x);\n}\n\nvec2 dir(float x)\n{\n    return vec2(cos(x), sin(x));\n}\n\nvec2 wind(vec2 p, float t)\n{\n    t*=15.;\n    \n    vec2 dx = 0.07*dir(dot(p, vec2(0.4, 0.7)) + t) + \n           0.04*dir(dot(p, vec2(0.8, -0.5)) + 0.625*t)+\n           0.005*dir(dot(p, vec2(-3., 0.7)) + 3.14*t)+\n           0.04*dir(dot(p, vec2(-0.6, -0.3)) + 1.133*t)+\n           0.26*dir(dot(p, vec2(0.1, 0.11)) + 0.431*t)+\n           0.35*dir(dot(p, vec2(-0.12, 0.1)) + 0.256*t);\n    return 0.6*dx;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}