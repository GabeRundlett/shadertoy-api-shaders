{
    "Shader": {
        "info": {
            "date": "1666221283",
            "description": "Racing Pixtur who's doing the same effect in Tooll3. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "msf3D7",
            "likes": 0,
            "name": "Polar illusion",
            "published": 3,
            "tags": [
                "illusion"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 37
        },
        "renderpass": [
            {
                "code": "const float pi = acos(-1.);\nconst float tau = 2. * pi;\n\nfloat hash(vec2 x)\n{\n    return fract(sin(dot(x, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 tunnel(vec2 uv)\n{\n    float r = length(uv);\n    float a = atan(uv.y, uv.x) / tau + 0.5;\n    return vec2(a, 1./tau/r);\n}\n\nvec4 UV2Grid(vec2 uv, vec2 gridSize)\n{\n    vec2 tileUV = fract(uv * gridSize);\n    vec2 index = floor(uv * gridSize);\n    return vec4(tileUV, index);\n}\n\nvec3 colorize(float x)\n{\n    vec3[] colors = vec3[](\n        vec3(0., 0., 0.),  // black\n        vec3(0.5, 0., 1.), // purple\n        vec3(1., 1., 1.),  // white\n        vec3(1., 0.4, 0.1) // red\n    );\n    int i1 = int(floor(x * float(colors.length())));\n    int i2 = (i1 + 1) % colors.length();\n    vec3 c1 = colors[i1];\n    vec3 c2 = colors[i2];\n    float w = fract(x * float(colors.length()));\n    float dw = 0.5*fwidth(w);\n    return mix(c1, c2, smoothstep(max(0., 0.5 - dw), min(1., 0.5 + dw), w));\n}\n\nfloat pattern(vec2 uv)\n{\n    vec2 gridResolution = vec2(32., 15.);\n    vec2 tunnelUV = tunnel(uv);\n    vec4 tunnelGrid = UV2Grid(tunnelUV, gridResolution);\n\n    return fract(pow(abs(sin(pi*tunnelGrid.y)), 0.8)-tunnelUV.x*20.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2[] ssaa = vec2[](\n        vec2(0.25, 0.5),\n        vec2(-0.5, 0.25),\n        vec2(0.5, -0.25),\n        vec2(-0.25, -0.5)\n    );\n\n    vec3 color = vec3(0.);\n    for (int i = 0; i < ssaa.length(); ++i)\n    {\n        vec2 uv = (fragCoord+ssaa[i])/iResolution.x * 2. - vec2(1., iResolution.y/iResolution.x);\n        color += colorize(pattern(uv));\n    }\n    color /= float(ssaa.length());\n\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}