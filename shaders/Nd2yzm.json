{
    "Shader": {
        "info": {
            "date": "1643274411",
            "description": "SPACE to draw the faults.    TAB for shrinking compensation.\n\nNote that we only manipulate the UV space. -> change the texture or video in Image buffer.\nsee opposite in https://www.shadertoy.com/view/7d2yRw",
            "flags": 48,
            "hasliked": 0,
            "id": "Nd2yzm",
            "likes": 27,
            "name": "fracturation",
            "published": 3,
            "tags": [
                "short",
                "parameterization",
                "destroy"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "// see opposite in https://www.shadertoy.com/view/7d2yRw\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);\n    O = texture(iChannel2, O.xy ) * O.a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( iFrame < 1 ) { O = vec4(U/R,1,1); return; }\n    O = fract(sin(float(iFrame/1) *vec4(127.1,311.7, 269.5,183.3)) *43758.5453123);\n    vec2 p = O.xy,                              // choose a random line\n         d = cos( 6.28*O.z + vec2(0,1.57) );\n    U /= R;\n    p -=U; p -= dot(p,d)*d;                     // vector distance to line\n    float l = length(p);\n    U += p/l / R;                               // move UVs asside the line\n    if (keyToggle(9)) \n        U = -.5/R + U*(1.+1./R);                // optionnal compensation shriking\n    O = texture(iChannel0,U);\n    if (keyToggle(32))\n        O.a *= smoothstep( 0., 1./R.y, l );     // trace fracture\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R    iResolution.xy\n#define T(U) texelFetch(iChannel0, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}