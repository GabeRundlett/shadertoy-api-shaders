{
    "Shader": {
        "info": {
            "date": "1429466739",
            "description": "it is the intersection of a thikness sphere with a repetition set of cubes ( with mod)\nuse Mouse for control the distance and the elevation of the camera",
            "flags": 0,
            "hasliked": 0,
            "id": "MlSGWm",
            "likes": 6,
            "name": "Ray Marching Experiment 20",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "20"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1458
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst int REFLEXIONS_STEP = 1; // count iteration for reflexion ( my refraction system seems to be wrong )\n\nconst vec2 RMPrec = vec2(0.5, 0.1); // ray marching tolerance precision // low, high\nconst vec2 DPrec = vec2(0.00001, 50.); // ray marching distance precision // low, high\n    \nfloat sphereThick = 0.02; // thick of sphere plates\nfloat texDisplace = 0.10; // displace factor for texture\nfloat texZoom = 10.; // zoom of texture\nfloat boxThick = 0.3; // thick of each boxs\nfloat boxCornerRadius = 0.02; // corner radius of each boxs\nfloat baseRep = 0.63; // base thick for mod repeat pattern // must be > to boxThick*2.\nfloat evoRep = 0.15; // evo thick factor mult to time and added to baseRep for animation\nfloat sphereRadius = 6.; // radius of sphere before tex displace\n\nfloat norPrec = 0.01; // normal precision \n\nconst int RMStep = 150; // Ray Marching Iterations\n\n#define mPi 3.14159\n#define m2Pi 6.28318\n\nvec2 uvMap(vec3 p)\n{\n    p = normalize(p);\n    vec2 tex2DToSphere3D;\n    tex2DToSphere3D.x = 0.5 + atan(p.z, p.x) / m2Pi;\n    tex2DToSphere3D.y = 0.5 - asin(p.y) / mPi;\n    return tex2DToSphere3D;\n}\n\nvec4 map(vec3 p)\n{\n    // time\n    float t = sin(iTime*.2)*.5+.5;\n    \n    // tex displace\n    vec3 tex = texture(iChannel1, uvMap(p*texZoom)).rgb;\n    float disp = dot(tex, vec3(texDisplace));\n    \n    //sphere\n    float sphereOut = length(p) -sphereRadius - disp;\n    float sphereIn = sphereOut + sphereThick;\n    float sphere = max(-sphereIn, sphereOut);\n    \n    // rep with mod\n    vec3 rep = vec3(baseRep + evoRep*t);\n    p = mod(p, rep) - rep/2.;\n    \n    // cube set\n    vec3 box = vec3(boxThick);\n\tfloat cubeSet = length(max(abs(p)-box,0.0))-boxCornerRadius;\n        \n    // intersection\n    float inter = max(sphere, cubeSet);\n    \n    // col\n    vec4 c = vec4(inter, tex);\n       \n    return c;\n}\n\nvec3 nor( in vec3 p, float prec)\n{\n\tvec2 e = vec2( prec, 0.);\n\tvec3 n = vec3(\n\t    map(p+e.xyy).x - map(p-e.xyy).x,\n\t    map(p+e.yxy).x - map(p-e.yxy).x,\n\t    map(p+e.yyx).x - map(p-e.yyx).x );\n\treturn normalize(n);\n}\n\n// from iq\nfloat calcAO( in vec3 pos, in vec3 nor)\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime*0.2;\n    float cam_a = t; // angle z\n    \n    float cam_e = 5.52; // elevation\n    float cam_d = 5.88; // distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); //Change camere view here\n  \tfloat li = 0.55; // light intensity\n    float refl_i = .6; // reflexion intensity\n    float refr_i = .6; // reflexion intensity\n    float refr_a = .8; // reflexion intensity\n    float bii = 0.35; // bright init intensity\n    \n    /////////////////////////////////////////////////////////\n    if ( iMouse.z>0.) cam_e = iMouse.x/iResolution.x * 10.; // mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y/iResolution.y * 50.; // mouse y axis \n    /////////////////////////////////////////////////////////\n    \n    vec2 scr = iResolution.xy;\n\tvec2 uv = (2.* fragCoord.xy - scr)/scr.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = DPrec.x;\n    \n    vec3 ray, cubeRay;\n    \n    for(int k=0;k<REFLEXIONS_STEP;k++)\n    {\n        for(int i=0;i<RMStep;i++)\n        {      \n            if(s<DPrec.x||s>DPrec.y) break;\n            s = map(p).x*(s>DPrec.x?RMPrec.x:RMPrec.y);\n            d += s;\n            p = ro+rd*d;\n        }\n\n        if (d<DPrec.y)\n        {\n            vec3 n = nor(p, norPrec);\n\n            b=li;\n\n            ray = reflect(rd, n);\n            cubeRay = texture(iChannel0, ray).rgb  * refl_i ;\n\n            ray = refract(ray, n, refr_a);\n            cubeRay += texture(iChannel0, ray).rgb  * refr_i ;\n\n            float ratio = float(k)/float(REFLEXIONS_STEP);\n            \n            if ( k == 0 ) \n                col = cubeRay+pow(b,15.); \n            else \n                col = mix(col, cubeRay+pow(b,25./ratio), ratio*0.8);  \n            \n            // lighting        \n            float occ = calcAO( p, n);\n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.0*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n            col = mix(col, map(p).yzw, 0.5);\n            \n            ro = p;\n            rd = ray;\n            s = DPrec.x;\n        }\n        else if (k == 0)\n        {\n            col = texture(iChannel0, rd).rgb;\n        }\n    }\n\tfragColor.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}