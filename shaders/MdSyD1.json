{
    "Shader": {
        "info": {
            "date": "1491901586",
            "description": "a simple example for glowing texture outline. your comments are welcome, -_^",
            "flags": 0,
            "hasliked": 0,
            "id": "MdSyD1",
            "likes": 12,
            "name": "glowing",
            "published": 3,
            "tags": [
                "effect",
                "glowing"
            ],
            "usePreview": 0,
            "username": "qu1795",
            "viewed": 1286
        },
        "renderpass": [
            {
                "code": "const float radius = 10.0;\nconst vec3 glowColor = vec3(0.9, 0.2, 0.0);\n\nfloat coefficient()\n{\n\tfloat v = mod(iTime, 3.0);\n    if(v > 1.5)\n        v = 3.0 - v;\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 unit = 1.0 / iResolution.xy;\n    vec4 texel = texture(iChannel0, uv);\n    vec4 finalColor = vec4(0.0);\n    float density = 0.0;\n\n   \tif(texel.a >= 1.0)\n    {\n        finalColor = vec4(texel.rgb, 1.0);\n    }\n    else\n    {\n        for(int i = 0; i < int(radius); ++i)\n        {\n            density += texture(iChannel0, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;\n            density += texture(iChannel0, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;\n            density += texture(iChannel0, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;\n            density += texture(iChannel0, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;\n\n            //density += texture(iChannel0, vec2(uv.x - unit.x * i, uv.y)).a;\n            //density += texture(iChannel0, vec2(uv.x + unit.x * i, uv.y)).a;\n            //density += texture(iChannel0, vec2(uv.x, uv.y - unit.y * i)).a;\n            //density += texture(iChannel0, vec2(uv.x, uv.y + unit.y * i)).a;\n\n        }\n        finalColor = vec4(glowColor * density / radius * coefficient(), 1.0);\n        finalColor += vec4(texel.rgb * texel.a, texel.a);\n    }\n\tfragColor = finalColor;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}