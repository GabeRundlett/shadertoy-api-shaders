{
    "Shader": {
        "info": {
            "date": "1602716991",
            "description": "It's a oneliner!\nHave a look at `float mp(vec3 p)`",
            "flags": 0,
            "hasliked": 0,
            "id": "tsGcD1",
            "likes": 26,
            "name": "One pass lazy motion blur",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 898
        },
        "renderpass": [
            {
                "code": "precision mediump float;\nuniform float time;\nuniform vec2 resolution;\nuniform vec2 mouse;\n\nfloat rnd(float x){return fract(sin(x * 1100.082) * 13485.8372);}\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,-s,s,c);}\nfloat sdTorus( vec3 p, vec2 t ){vec2 q = vec2(length(p.xz)-t.x,p.y);return length(q)-t.y;}\n\nvec2 Rot2D (vec2 q, float a){return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);}\nvec3 IcosSym (vec3 p)\n{\n  float dihedIcos = 0.5 * acos (sqrt (5.) / 3.);\n  float a, w;\n  w = 2. * 3.1415 / 3.;\n  p.z = abs (p.z);\n  p.yz = Rot2D (p.yz, - dihedIcos);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 4; k ++) {\n    p.zy = Rot2D (p.zy, - dihedIcos);\n    p.y = - abs (p.y);\n    p.zy = Rot2D (p.zy, dihedIcos);\n    if (k < 3) p.xy = Rot2D (p.xy, - w);\n  }\n  p.z = - p.z;\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.x -= 2. * p.x * step (0., p.x);\n  return p;\n}\n\nfloat mp(vec3 p) {\n  p.z+=1.5;\n  float scale = 1.;\n  // THE MOTION BLUR HAPPENS HERE â†“\n  float t = iTime-0.15*rnd(p.y*3.3+p.x*7.7);\n  p.xy *=rot(floor(t)+smoothstep(0.,.4,fract(t)));\n  p.xz *=rot(floor(t)+smoothstep(.5,.9,fract(t)));\n  for(int i=0; i<1; i++){\n    scale*=3.;\n    p*=3.;\n    p = IcosSym(p);\n    p.z+=3.;\n    p.y-=.7;\n  }\n  return sdTorus(p,vec2(.5,.2))/scale;\n}\n\nvec3 nor(vec3 p){\n vec2 e=vec2(0,.001);\n return normalize(vec3(\n  mp(p+e.xxy)-mp(p-e.xxy),\n  mp(p+e.xyx)-mp(p-e.xyx),\n  mp(p+e.yxx)-mp(p-e.yxx)\n  ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n  float ii, d=0.,rm,i; vec3 p,n;\n  float mx = max(resolution.x, iResolution.y);\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy) / mx;\n  for(float i=0.;i<90.;i++){\n    ii = float(i);\n    p=d*vec3(uv,.9);\n    p.z-=3.5;\n    rm=mp(p);\n    if(rm<.001)break;\n    d+=rm;\n  }\n  n=nor(p).bgr;\n  vec3 col1 = vec3(63,232,130)/255.;\n  vec3 col2 = vec3(0,71,255)/255.;\n  vec3 col = mix(col1, col2, (n.x+n.y)/2.+.5);\n  fragColor = vec4(col*10./(ii*d*d),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}