{
    "Shader": {
        "info": {
            "date": "1685475930",
            "description": "depth of field + volumetrics = a cool thing ig",
            "flags": 32,
            "hasliked": 0,
            "id": "dl3XW7",
            "likes": 15,
            "name": "Fake volumetrics",
            "published": 3,
            "tags": [
                "raytracer",
                "dof",
                "volumetrics"
            ],
            "usePreview": 0,
            "username": "ThePlaneGuy45",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "// Pixel Art Shader\n// Feel free to use, just give credit as always\n// - TPG45\n\n#define COLOR_STEP 256.0\n#define PIXEL_SIZE 1.0\n\nvec4 colorize(in vec4 color) {\n\n    // Pixel art coloring\n    vec3 nCol = normalize(color.rgb);\n    float nLen = length(color.rgb);\n    return vec4(nCol * round(nLen * COLOR_STEP) / COLOR_STEP, color.w);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Pixel Sizing\n    float ratio = iResolution.y/720.0;\n    vec2 pixel = round(fragCoord / (PIXEL_SIZE * ratio)) * PIXEL_SIZE * ratio;\n    vec2 uv = pixel/iResolution.xy;\n    fragColor = colorize(texture(iChannel0, uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void distances(inout Record rec) {\n\n    raySphere(Sphere(Material(vec3(0.0, 0.5, 1.0), true, 0, 10.0, 0.42, 0.75), vec3(200.0, 0.0, 0.0), 100.0), rec);\n    raySphere(Sphere(Material(vec3(0.0, 0.5, 1.0), true, 1, 40.0, 0.42, 0.40), vec3(0.0, 0.0, 200.0), 100.0), rec);\n    raySphere(Sphere(Material(vec3(0.0, 0.5, 1.0), true, 2, 10.0, 0.42, 0.80), vec3(-200.0, 0.0, 0.0), 100.0), rec);\n    raySphere(Sphere(Material(vec3(0.0, 0.5, 1.0), true, 3, 10.0, 0.42, 0.60), vec3(0.0, 0.0, -200.0), 100.0), rec);\n\n}\n\nvoid initRay(inout Ray ray, in vec2 fragCoord) {\n\n    ray.origin = vec3(0.0, 0.0, -500.0);\n    ray.normal = normalize(vec3(fragCoord, 500.0));\n    mat2 rot = rot2((iMouse.y / iResolution.y - 0.5) * 8.0);\n    ray.origin.yz *= rot;\n    ray.normal.yz *= rot;\n    rot = rot2((iMouse.x / iResolution.y - 0.5) * 8.0);\n    ray.origin.xz *= rot;\n    ray.normal.xz *= rot;\n\n}\n\nvoid initRecord(inout Record rec) {\n\n    rec.hit = false;\n    rec.dist = 100000.0;\n\n}\n\nvec4 triPlanar(sampler2D tex, vec3 offset, vec3 normal, float scale, vec2 imgOffset) {\n\n    vec3 blend = normalize(max(abs(normal), 0.000001));\n    float sum = blend.x + blend.y + blend.z;\n    blend /= sum;\n    vec4 x = texture(tex, offset.yz * scale + imgOffset);\n    vec4 y = texture(tex, offset.xz * scale + imgOffset);\n    vec4 z = texture(tex, offset.xy * scale + imgOffset);\n    return x * blend.x + y * blend.y + z * blend.z;\n\n}\n\nvec4 texturize(int id, vec3 offset, vec3 normal, float scale, vec2 imgOffset) {\n\n    switch(id) {\n    case 0:\n        return triPlanar(iChannel0, offset, normal, scale, imgOffset);\n    case 1:\n        return triPlanar(iChannel1, offset, normal, scale, imgOffset);\n    case 2:\n        return triPlanar(iChannel2, offset, normal, scale, imgOffset);\n    case 3:\n        return triPlanar(iChannel3, offset, normal, scale, imgOffset);\n    }\n    return vec4(0.0);\n\n}\n\nfloat getHeight(vec4 tex) {\n\n    return dot(tex.rgb, vec3(.2126, .7152, .0722));\n\n}\n\nvec3 normal(int id, vec3 offset, vec3 normal, float scale, vec2 res, float strength) {\n\n    float current = getHeight(texturize(id, offset, normal, scale, vec2(0.0)));\n    float x = (getHeight(texturize(id, offset, normal, scale, vec2(1.0 / res.x, 0.0))) - current) * strength;\n    float y = (getHeight(texturize(id, offset, normal, scale, vec2(0.0, 1.0 / res.y))) - current) * strength;\n    return normalize(vec3(x, y, 1.0));\n\n}\n\nvec3 worldSpace(vec3 map, vec3 t, vec3 b, vec3 n) {\n\n    mat3x3 tbn = mat3x3(t.x, b.x, n.x, t.y, b.y, n.y, t.z, b.z, n.z);\n    return normalize(map * tbn);\n\n}\n\nvec4 Trace(in vec2 fragCoord, vec3 iChannelResolution[4], float iTime) {\n\n    Ray ray;\n    Record rec;\n    initRay(ray, fragCoord);\n    initRecord(rec);\n    rec.ray = ray;\n    distances(rec);\n    bool hit = false;\n    float hdist = 1024.0;\n    vec3 result = vec3(0.0);\n    if(rec.hit) {\n        vec3 matColor;\n        vec3 nMap;\n        if(rec.material.useTexture) {\n            matColor = texturize(rec.material.texID, rec.offset, rec.normal, rec.material.texScale, vec2(0.0)).xyz;\n            nMap = normal(rec.material.texID, rec.offset, rec.normal, rec.material.texScale, iChannelResolution[3].xy, rec.material.bumpStrength);\n            rec.normal = worldSpace(nMap, rec.tangent, rec.bitangent, rec.normal);\n        } else {\n            matColor = rec.material.color;\n        }\n        vec2 mPos = vec2(0);\n        vec3 lightNormal = normalize((vec3(mPos.x, 400.0, mPos.y)) - rec.intersect);\n        float shade = clamp(dot(lightNormal, rec.normal), 0.0, 1.0);\n        float specang = acos(shade);\n        float specexp = specang / (1.0-rec.material.specular);\n        float spec = exp(-specexp * specexp) * rec.material.specular;\n        result = matColor * mix(vec3(0.2), vec3(1.0), shade) + vec3(spec);\n        hit = true;\n        hdist = rec.dist;\n    }\n    vec3 p = ray.origin;\n    vec3 light;\n    float dist;\n    for(float i; i < hdist; i+=STEP) {\n    \n        light = vec3(0.0, 400.0, 0.0) - p;\n        rec.ray.normal = normalize(light);\n        rec.ray.origin = p + rec.ray.normal;\n        dist = length(light);\n        initRecord(rec);\n        distances(rec);\n        if(!(rec.dist < dist)) {\n        \n            result = mix(result, vec3(1.0, 0.95, 0.8), (DENSITY * STEP/16.0) / dist);\n            \n        }\n        \n        p += ray.normal * STEP;\n    \n    }\n    \n    return vec4(result, hit ? hdist : 200.0);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.y / 720.0;\n    fragColor = Trace((fragCoord-(iResolution.xy)/2.0)/ratio, iChannelResolution, iTime);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BUMPSTRENGTH 10.0\n\n#define DENSITY 2.0\n#define DOF 5.0\n#define STEP 16.0\n\nstruct Material {\n\n    vec3 color;\n    bool useTexture;\n    int texID;\n    float bumpStrength;\n    float texScale;\n    float specular;\n\n};\n\nstruct Sphere {\n\n    Material material;\n    vec3 center;\n    float radius;\n\n};\n\nstruct Ray {\n\n    vec3 origin;\n    vec3 normal;\n\n};\n\nstruct Record {\n\n    Ray ray;\n    bool hit;\n    Material material;\n    vec3 normal;\n    vec3 intersect;\n    float dist;\n    vec3 offset;\n    vec3 tangent;\n    vec3 bitangent;\n\n};\n\nmat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) + a);\treturn mat2(v, -v.y, v.x); }\nuint raySphere(in Sphere sph, inout Record rec) {\n\n    vec3 offset = rec.ray.origin - sph.center;\n    float a = 2.0 * dot(offset, rec.ray.normal);\n    float b = dot(offset, offset) - sph.radius * sph.radius;\n    float disc = a * a - 4.0 * b;\n    \n    if (disc > 0.0) {\n    \n        float s = sqrt(disc);\n        float dstNear = max(0.0,(-a-s)/2.0);\n        float dstFar = (-a+s)/2.0;\n        \n        if(dstNear < rec.dist) {\n        \n            if(dstNear > 0.0) {\n        \n                rec.intersect = (rec.ray.normal * dstNear) + rec.ray.origin;\n                rec.normal = normalize(rec.intersect - sph.center);\n                rec.dist = dstNear;\n                rec.material = sph.material;\n                rec.hit = true;\n                rec.offset = (rec.intersect - sph.center - sph.radius) / sph.radius - 0.5;\n                rec.tangent = normalize(vec3(rec.normal.z, 0.0, -rec.normal.x));\n                rec.bitangent = normalize(cross(rec.normal, rec.tangent));\n                \n                return uint(0x1);\n        \n            }\n        \n        }\n        \n        return uint(0x0);\n    \n    }\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 tex(vec2 p,vec2 offset){return texelFetch(iChannel0,ivec2(p+offset),0);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec4 current = tex(fragCoord, vec2(0.0));\n    float depth = current.w;\n    float blur = DOF * depth / 200.0;\n    vec4 color;\n    for(float r; r < 6.28318530718; r += 0.1) {\n    \n        for(float d; d < blur; d += blur/5.0) {\n        \n            color += vec4(tex(fragCoord, vec2(cos(r), sin(r)) * d).xyz, 1.0);\n        \n        }\n    \n    }\n    \n    color.rgb /= color.a;\n    fragColor = vec4(color.rgb, 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}