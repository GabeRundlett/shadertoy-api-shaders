{
    "Shader": {
        "info": {
            "date": "1676558371",
            "description": "Scrolling houses scene with mouse interaction. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt23WV",
            "likes": 8,
            "name": "Scrolling Hills and Houses. ",
            "published": 3,
            "tags": [
                "scrolling"
            ],
            "usePreview": 0,
            "username": "dvshkbm",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "// slight variation on this tutorial https://www.youtube.com/watch?v=LLZPnh_LK8c\n\n#define S(a,b,t) smoothstep(a,b,t)\n\nfloat GetHeight(float x){\n    return sin(x * .1632) + sin(x)*.132 + sin(x)*.1;\n}\n\nfloat TaperBox(vec2 p, float wb, float wt, float yb, float yt, float blur){\n\n    //Top and Bottom. \n    float _b = S(-blur, blur, p.y - yb);\n    float _t = S(blur, -blur, p.y - yt);\n    \n    //Widths of top and bottom, with taper. \n    p.x = abs(p.x);\n    // 0 when p.y = yb and 1 when p.y = yt.\n    float _w = mix(wb, wt, (p.y - yb)/(yt - yb)); //Taper. \n    float _wmult = S(blur, -blur, p.x - _w); //Apply taper. \n    \n    float _m = _b * _t * _wmult;\n    return _m;\n}\n\nvec4 House(vec2 uv, vec3 col, float blr){\n\n    float h = TaperBox(uv, .1, .1, -.8, -.4, blr); //house base\n    float r = TaperBox(uv, .12, 0., -.4, -.06, blr); // roof\n    float w = TaperBox(uv, .025, .025, -.45, -.4, blr); // window top\n    float w1 = TaperBox(uv, .025, .025, -.55, -.5, blr); // window mid\n    float w2 = TaperBox(uv, .025, .025, -.75, -.6, blr); // window bttm\n    float s = .25* TaperBox(uv, .1, .1, -.45, -.399, 1.2*blr); //shadow\n    float _a = h + r - w - w1 - w2 - s;\n    \n    return vec4(col, _a);\n}\n\nvec4 Layer(vec2 uv, float blr){\n\n    vec4 _col = vec4(0);\n    //Making the ground y values over time. \n    float _y = GetHeight(uv.x);\n    float grnd = S(blr, -blr, _y+uv.y);\n    _col += grnd;\n    \n    //separating x values into columns\n    float id = floor(uv.x);\n    float n = fract(sin(id * 342.9) * 2343.) * 2. - 1.; //sin function to space out each house within column. \n    uv.x = fract(uv.x)-.5; //adjusting values to the center of the column\n    \n    //Initialising values for xy pos of houses. \n    float locx = n*.3; //.5 - roof width, then adjusted for uv.x multiply in lines below.\n    float locy = 0.;\n    \n    //Adjusting ground values to create 1 value for every box. \n    float _gy = GetHeight(id + .5 + locx);\n    \n    //Making the house, applying xy values translated about. \n    vec4 hs = House((uv-vec2(locx, -_gy + .6))*vec2(1.+.2*n, 1.+.3*n), vec3(1.), blr);\n    //col.rg = uv;\n    _col = mix(_col, hs, hs.a);\n    _col.a = max(grnd, hs.a);\n    return _col;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(436.3, 647.9));\n    p += dot(p,p+682.26);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec4 m = iMouse / iResolution.x;\n    vec2 _m = (iMouse.xy / iResolution.xy)*2.-3.;\n\n    float twnkl = dot(length(sin(uv*1.3 + iTime*0.5)), length(cos(uv*vec2(202.3, 32.7)-iTime)));\n    twnkl = sin(twnkl*10.)+.5;\n    float strs = pow(Hash21(uv), 100.)*twnkl; //multiply it by itself to get the values closer to either 1 or 0.\n    vec4 col = vec4(strs);\n    \n    float moon = S(.01, -.01, length(uv + vec2(-.5,-.3))-.18);\n    moon *= S(-.03, .03, length(uv + vec2(-.6,-.35))-.18);\n    col += moon;\n    \n    //Expand the canvas between 2 and 5. \n    uv*=3. + (m.x)*4.;\n    //uv.y -= m.x*-2.;\n    \n    //Scroll in the x axis.\n    uv.x += iTime;\n    \n    vec4 layer;\n    for(float i = 0.; i < 1.; i +=1./10.){\n        float scale = mix(8., 1., i);\n        float blur = mix(.1, .005, i);\n        layer = Layer(vec2(uv.x + scale*i, uv.y-.5) * scale + vec2(iTime+i*362., i)-1.-(_m.y*1.2), blur);\n        layer.rgb *= 1. - i *vec3(1., .9, .7*i);\n        col = mix(col, layer, layer.a);\n    }\n    layer = Layer(uv + vec2(iTime, -2.5) -(_m.y*1.2), .1);\n    col = mix(col, layer*.1, layer.a);\n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}