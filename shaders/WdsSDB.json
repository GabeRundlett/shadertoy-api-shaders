{
    "Shader": {
        "info": {
            "date": "1552062625",
            "description": "5x temporal supersampling on the right, click with mouse to move comparison slider",
            "flags": 32,
            "hasliked": 0,
            "id": "WdsSDB",
            "likes": 5,
            "name": "5x temporal supersample 1 buffer",
            "published": 3,
            "tags": [
                "aliasing",
                "antialiasing",
                "sampling",
                "aa",
                "super",
                "anti",
                "temporal"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "/*Image - Temporal supersampling blending.\n\nThis uses 1 buffer to store past frames at half resolution favoring memory usage over \nquality then blends them with different weights to hide it.\n*/\n\nvoid mainImage(out vec4 o, in vec2 u)\n{\n    //comparison slider\n    vec4 b = texelFetch(iChannel0,ivec2(u),0);\n    float sx = iMouse.w>0.?iMouse.x:iResolution.x*.5;\n    if (u.x <= sx) {\n        o = b;\n        if (sx-u.x < 4.) o = vec4(.3);\n    \treturn;\n    }\n\n    //blend current frame with past at different weights\n    vec2 uv = u*.5/(iResolution.xy+.5);\n    o = (b+ //current frame has higher weight to hide the fact that past frames are half resolution\n        (textureLod(iChannel1,uv,0.)+\n         textureLod(iChannel1,uv+vec2(.5,0),0.)+\n         textureLod(iChannel1,uv+vec2(0,.5),0.)+\n         textureLod(iChannel1,uv+.5,0.))*3./4.\n        )/4.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Buf A - Stores last 4 frames from Buf B at half resolution.\n\nvoid mainImage(out vec4 o, in vec2 u)\n{\n    vec2 hr = iResolution.xy*.5,\n        fuv = floor(u/hr),\n        muv = u-fuv*hr;\n    float id = dot(fuv,vec2(1,2));\n    if (id < 1.) {\n        //downscale last frame using linear filtering;\n        o = textureLod(iChannel0,(muv+.5)/hr,0.);\n    } else {\n       \t//copy last frames\n        id--;\n        o = texelFetch(iChannel1,ivec2(muv+vec2(mod(id,2.),floor(id/2.))*hr),0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Buf B - Renders spinning block and circle.\n\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nvoid mainImage(out vec4 o, in vec2 u)\n{\n    //aspect correct uv and jitter for supersampling\n    vec2 uv = u*2.-iResolution.xy;\n    float sx = iMouse.w>0.?iMouse.x:iResolution.x*.5;\n    if (u.x > sx) {\n        const vec2 jitter[5] = vec2[](vec2(0), vec2(-1),vec2(1),vec2(-1,1),vec2(1,-1));\n        uv += jitter[iFrame%5];\n    }\n    uv /= iResolution.y;\n    \n    //spinning block\n    mat2 r = rot(iTime*.3);\n    float d = length(max(abs(uv*r)-.2,0.));\n    //floating circle\n    d = min(d,length(uv+sin(iTime*vec2(1.93,.74)))-.2);\n    o = vec4(max(0.,1.-max(0.,d)*1e7));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}