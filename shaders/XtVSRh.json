{
    "Shader": {
        "info": {
            "date": "1482841151",
            "description": "Adopted POV-Ray isosurface",
            "flags": 0,
            "hasliked": 0,
            "id": "XtVSRh",
            "likes": 8,
            "name": "Isosurface Heart",
            "published": 3,
            "tags": [
                "heart",
                "isosurface"
            ],
            "usePreview": 0,
            "username": "klk",
            "viewed": 925
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535897932384626433832795\n\n#define float3 vec3\n#define float2 vec2\n#define float4 vec4\n#define float3x3 mat3\n\nconst float MAX_RAY_LENGTH=10000.0;\n\nvoid RP(float3 tp0, float3 dp1, float3 dp2, float3 rp0, float3 rd, out float t, out float3 uv, out float3 n)\n{\n\tfloat3 dp0=rp0-tp0;\n\n\tfloat3 dett =cross(dp1,dp2);\n\tfloat3 detuv=cross(dp0,rd);\n\n\tfloat det=(-1.0)/dot(dett,rd);\n\n\tfloat u=(dot(detuv,dp2))*det;\n\tfloat v=(dot(detuv,dp1))*det;\n\tt=(dot(dett ,dp0))*det;\n    if(t<0.0)\n    {\n        t=MAX_RAY_LENGTH;\n        return;\n    }\n    \n\tuv=float3(u,v,0.0);\n    n=normalize(dett);\n}\n\nfloat arws0(float2 p, float t)\n{\n    float2 p1=float2(p.x+p.y,p.x-p.y);\n    float2 f1xy=abs(fract(p1/sqrt(8.0))-0.5)-0.25;\n    f1xy=clamp(f1xy*t+0.5,0.0,1.0);\n    float f1=mix(f1xy.x,1.0-f1xy.x,f1xy.y);\n\n    float2 fxy=float2(p.x-sqrt(0.125),p.y);\n  \tfxy=abs(fract((fxy*sqrt(2.0)+0.5)/2.0)-0.5)-0.25;\n    fxy=clamp(fxy*t/sqrt(2.0)+0.5,0.0,1.0);\n    float f=mix(fxy.x,1.0-f1,fxy.y);\n\n    return f;\n}\n\nfloat chkr(float2 p, float t)\n{\n    float2 fxy=float2(p.x,p.y);\n  \tfxy=abs(fract((fxy+0.5)/2.0)-0.5)-0.25;\n    fxy=clamp(fxy*t+0.5,0.0,1.0);\n    float f=mix(fxy.x,1.0-fxy.x,fxy.y);\n\n    return f;\n}\n\nfloat plnt(float2 p, float t)\n{\n    return chkr(p,t);\n}\n\nvoid trace(float3 rp0, float3 rd, out float t, out float3 pos, out float3 n)\n{\n    float t1=MAX_RAY_LENGTH;\n    float3 col1;\n    float3 n1;\n   \tRP(float3(0.0,-5.0,0.0),float3(-1.0,0.0,0.0),float3(0.0,0,1.0),rp0, rd, t1, col1, n1);\n    pos=rp0+rd*t1;\n    t=t1;\n}\n\nfloat value(float3 p)\n{\n    p*=0.3;\n    float x=p.x;\n    float y=p.y;\n    float z=p.z;\n\n//\tx=mod(p.x,1.0)-0.5;\n//\tz=mod(p.z,2.2)-1.1;\n    \n    float v=0.0;\n    v=sqrt(\n        pow(abs(x*2.5),2.0)\n        +z*z\n        +pow(\n            abs(y*1.1-0.8*sqrt(sqrt(z*z+pow(abs(x/2.0),2.0)/(pow(abs(y+1.4),4.0)+0.001)))),2.0))-1.0;\n\n//    v=max(v,(p.x*p.x+p.z*p.z)*0.1-1.0);\n//    v+=(sin(x*30.0+iTime)+sin(y*30.0-iTime)+sin(z*30.0+2.0*iTime))*0.1;\n//    y=y-pow(abs(z)*0.1,0.5)*0.3;\n//    v=sqrt(x*x+y*y+z*z)-1.0+abs(y)*z*z*0.1;\n/*    return p.y*p.y*3.0\n        +1.0*sin(sqrt(p.x*p.x+p.z*p.z)+iTime)\n        +sin(p.x*3.0)*sin(p.z*3.0)*1.0\n        -0.5+sin(p.z*0.3+iTime)*1.5\n        ;*/\n    return v;//sign(v)*pow(abs(v),2.0);\n}\n\nbool raymarch(float3 start, float3 d, float t0, float t1,float stp, const int N, out float t)\n{\n    t=t0;\n    \n    int i=0;\n    for(int j=0;j<1;j+=0)\n    {\n\t    float3 p=start+d*t;\n        float v=value(p);\n        if(v<0.0)\n            return true;\n        i++;\n        if(i>N)\n            break;\n        t+=min(0.01+v*0.25,stp);\n    }\n    return false;\n}\n\nfloat3 calcN(float3 p)\n{\n    float3 n;\n    float d=0.001;\n    float n0=value(p);\n    n.x=value(p+float3(d,0.0,0.0))-n0;\n    n.y=value(p+float3(0.0,d,0.0))-n0;\n    n.z=value(p+float3(0.0,0.0,d))-n0;\n\n    n=normalize(n);\n    return n;\n}\n\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float3 campos=float3(-10.0,3.0,0.0);\n    float3 look_at=float3(0.0,0.5,0.0);\n    float3 up=float3(0,1,0);\n    float3 forward;\n    float3 right;\n\n    float3 light=float3(0,10,10);\n\n    float T=iTime*0.45;\n    \n    light.x=cos(T)*10.0;\n    light.z=sin(T)*10.0;\n    light.y=5.0;\n    \n    float mposx=iMouse.x;\n    float mposy=iMouse.y;\n    if(iMouse.z<0.0)mposx=-iMouse.z;\n    if(iMouse.w<0.0)mposy=-iMouse.w;\n    \n    float a1=(0.6+(mposy/iResolution.y-0.5)*0.7)*PI;\n    float a2=mposx/iResolution.x*PI*2.0-PI/3.0;\n\n    if(iMouse.y<10.0)\n    {\n        a1=PI*0.55;\n        a2=PI+0.3;\n    }\n\n    campos.y=cos(a1)*campos.x;\n    float camx=sin(a1)*campos.x;\n    campos.x=cos(a2)*camx;\n    campos.z=sin(a2)*camx;\n    light=campos*2.0;\n    light.x=10.0;\n    light.z=15.0;\n    light.y=10.0;\n//    campos+=look_at;\n    \n    forward=normalize(look_at-campos);\n    right=normalize(cross(up,forward));\n    up=normalize(cross(forward,right));\n    \n  \n\tfloat2 scr = fragCoord.xy /iResolution.xy;\n    scr=2.0*scr-1.0;\n\n    float2 scr2ray=scr;\n    scr2ray.x*=(iResolution.x/iResolution.y);\n\tfloat2 uv=scr2ray;\n    float3 ray=normalize(forward+(up*uv.y+right*uv.x)*0.5);\n\n    float3 col=float3(0.0,0.5,0.0);\n    float3 n;\n\tfloat t;\n//\tfragColor.rgb=float3(0.5,0.3,0.1);\n    float3 fogcol=mix(float3(0.87,0.8,0.83),float3(0.3,0.6,1.0),1.0-(1.0-ray.y)*(1.0-ray.y));\n   \tfragColor.rgb=fogcol;\n    float3 tpos;\n    trace(campos, ray, t, tpos, n);\n    col=mix(float3(0.97,0.95,0.83),float3(0.1,0.15,0.4),\n                smoothstep(0.0,1.0,plnt(tpos.xz*0.2,16000.0/t/t)));\n    float3 tolight=normalize(light);\n\n    if(t<MAX_RAY_LENGTH)\n\t{\n        \n        col=mix(fogcol,col,exp(-t*0.01));\n    \tfragColor.rgb=col;\n    }\n    {\n    \tfloat t1;\n\t    float3 start=campos;\n        if(raymarch(start,ray,1.0+(nrand(scr)-0.5)*0.5,11.0,0.25,300,t1))\n        {\n            if(t1<t)\n            {\n            \tfloat3 p=start+ray*t1;\n            \tfloat3 n=calcN(p);\n//                float3 tolight=normalize(light-p);\n\t\t\t    float3 halfn=normalize(tolight-ray);\n                \n                float lamb=pow(clamp(dot(n,tolight),0.0,1.0),1.0)*0.6+0.4;\n                float3 refray=reflect(ray,n);\n\n                float spec1=clamp(dot(halfn,n),0.0,1.0);\n                float spec2=clamp(dot(tolight,refray),0.0,1.0);\n\n\t\t\t    float3 reffog=mix(float3(0.87,0.8,0.83),float3(0.3,0.6,1.0),1.0-(1.0-refray.y)*(1.0-refray.y));\n\n                float3 n1;\n//                col=lamb*(0.5+0.5*float3(sin(p.x),sin(p.z),sin(length(p.xz))));\n                col=lamb*float3(1.0,0.3,0.1);\n                float3 rpos;\n                float3 rcol;\n                float tr;\n\t\t\t\ttrace(p, reflect(ray,n), tr, rpos, n1);\n                float fresn=clamp(1.0-dot(ray,-n),0.0,1.0);\n    \t\t\tif(t1<MAX_RAY_LENGTH)\n                {\n\t\t\t\t    rcol=mix(float3(0.87,0.85,0.83),float3(0.1,0.12,0.4),\n                \t\tsmoothstep(0.0,1.0,plnt(rpos.xz*0.2,2000.0/tr/tr)));\n\t\t\t        rcol=mix(reffog,rcol,exp(-tr*0.02));\n                }\n                else\n                {\n                    rcol=reffog;\n                }\n                {\n                    col=mix(col,rcol,pow(fresn,2.8)*0.95+0.05);\n                    col=mix(col,float3(1,1,1),pow(spec2,10.0)*1.0);\n//                    col*=float3(1.0,0.8,0.5);\n                    col=mix(col,float3(1,1,1),2.0*pow(spec2,180.0));\n\t\t\t        col=mix(fogcol,col,exp(-t1*0.01));\n//                    col*=float3(1.1,0.95,0.65);\n//                    col=rcol;\n                    \n//\t\t\t    \tfragColor.rgb=mix(col,fragColor.rgb,pow(dot(ray,n),15.0));\n                }\n//                fragColor.rgb=0.5+n*0.5;\n                fragColor.rgb=col;\n//                fragColor.rgb=float3(pow(spec2,10.0));\n            }\n        }\n    }\n    \n    fragColor.a=1.0;\n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}