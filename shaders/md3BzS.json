{
    "Shader": {
        "info": {
            "date": "1697541513",
            "description": "I made this tangent space matirx from scratch for triplanar mapping. ",
            "flags": 0,
            "hasliked": 0,
            "id": "md3BzS",
            "likes": 5,
            "name": "Tanget Space Matrix Triplanar",
            "published": 3,
            "tags": [
                "3d",
                "derivative",
                "mapping",
                "cubemapping",
                "matrix",
                "tangent",
                "cubesphere",
                "finitedifference",
                "tangentspace",
                "tbn"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nThis demo shows the process of translating a vector between tangent \nand world space for sphere mapping without relying on any vertices.\nThis methodology proves particularly valuable for tasks like \ntranslating wind directions between world and tangent space.\n\nTo achieve this, it is necessary to generate the normal, tangent, \nand bitangent vectors corresponding to your mapping. The normal \nvector points upwards from the surface of the mapping, while the \ntangent vector aligns with the +X direction of your UV mapping in \nworld space. Similarly, the bitangent vector corresponds to the +Y \ndirection of your UV mapping.\n\nThese vectors are combined within a 3x3 matrix. When this matrix is \nmultiplied by a vector, it effectively transforms the vector to \nworld space. Conversely, the inverse of this matrix facilitates the \ntranslation of a vector from world space back to the tangent space \nof your mapping.\n\nThe visual representation is a fusion of a flow plot, which showcases \n3D coordinates in world space on a surface by displacing flowlines. \nThe wind direction is oriented perpendicular to this surface, \nmimicking the behavior of water waves. The arrows within the plot \nare in tangent space, indicating the direction of the vector in \ntangent space.\n\nSee here how the quiverplot works:\nhttps://www.shadertoy.com/view/dssyzf\n\nSee here for an application of triplanar mapping:\nhttps://www.shadertoy.com/view/mdcBz8\n\nThis plot has mouse controls to look around. Play with the constants\nbelow to edit the visualized vectors.\n*/\n\n// Define your custom direction here\n//#define DIRECTION vec3(1.,0.,0.)\n\n// enable DIRECTION is worldspace, disable DIRECTION is tangent space\n#define DIRECTIONIWORLDSPACE\n\n// triplanar mapping without blending\nvec3 triplanar(vec3 normal, vec3 direction) {           \n    // Calculate sign for flipping sides\n    vec3 sgn = sign(normal);\n    \n    // Weights/Alpha for interpolation\n    vec3 weights = abs(normal);\n\n    // switch between sides instead of interpolating\n    vec2 uv;\n    mat3 tbn;\n    // The weights are grouped cumulatively, and if the dither value is within one \n    // cumulative section for one of the weights, that weight is selected.\n    if (weights.x > weights.y && weights.x > weights.z) {\n        // X-axis Side\n        // Coordinate projections all right side up\n        uv = vec2(normal.y * sgn.x, normal.z) + 0.5;\n        \n        // Tangent is the direction of uvX.x in world space\n        vec3 tangentX = safeNormalize(cross(normal, vec3(0,0,-1)), vec3(0,sgn.x,0));   \n        \n        // Bitangent is the direction of uvY.y in world space.\n        vec3 bitangentX = cross(normal, vec3(0,sgn.x,0));\n        \n        // Tangent Bitangent Normal matrix to translate normal textures to world space normals.\n        tbn = mat3(tangentX, \n                   bitangentX, \n                   normal); // Normal vector straight up from the surface.\n                   \n    } else if (weights.y > weights.z) { // Because sum of all weights is 1, so 1-z = sum of xy.\n        // Y-axis Side\n        uv = vec2(-normal.x * sgn.y, normal.z) + 0.5;\n       \n        // Tangent is the direction of uvY.x in world space\n        vec3 tangentY = safeNormalize(cross(normal, vec3(0,0,-1)), vec3(-sgn.y,0,0));\n        \n        // Bitangent is the direction of uvY.y in world space\n        vec3 bitangentY = cross(normal, vec3(-normal.y,0,0));\n        \n        // Join vectors into TBN matrix\n        tbn = mat3(tangentY,\n                   bitangentY,\n                   normal);\n    } else {\n        // Z-axis Side \n        uv = vec2(normal.x * sgn.z, normal.y) + 0.5;        \n        \n        // Tangent is the direction of uvZ.x in world space\n        vec3 tangentZ = safeNormalize(cross(normal, vec3(0,-1,0)), vec3(sgn.z,0,0));\n\n        // Bitangent is the direction of uvZ.y in world space\n        vec3 bitangentZ = cross(normal, vec3(sgn.z,0,0));\n        \n        // Join vectors into TBN matrix\n        tbn = mat3(tangentZ,\n                   bitangentZ,\n                   normal);\n    }\n\n    #ifdef DIRECTIONIWORLDSPACE\n        // translate world space vector to tangent space\n        vec3 directionWS = direction;\n        vec2 directionTS = vec3(inverse(tbn) * direction).xy;\n    #else\n        // translate tangent space vector to world space\n        vec3 directionWS = tbn * direction;\n        vec2 directionTS = direction.xy;\n    #endif\n        \n    // quiver plot in tangent space\n    float arrowscale = 10.;\n    float tsPlot = quiverPlot(uv, directionTS, arrowscale);   \n    \n    // World Space flow plot\n    float time = iTime * 0.25;\n    vec3 wsPlot = flowPlot(normal, directionWS, time);\n\n    return max(wsPlot, vec3(tsPlot));\n}\n\n// _____________________________3D Section_____________________________\n// https://www.shadertoy.com/view/4sjXW1 by nimitz (twitter: @stormoid)\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nfloat iSphere(in vec3 ro, in vec3 rd)\n{\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - 1.;\n    float h = b*b - c;\n    if(h <0.0) return -1.;\n    return -b - sqrt(h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 um = iMouse.xy / iResolution.xy-.5;\n\tum.x *= iResolution.x/iResolution.y;\n    p*= 1.5;\n\t\n    //camera\n\tvec3 ro = vec3(0.,0.,2.4);\n    vec3 rd = normalize(vec3(p,-1.5));\n    mat2 mx = mm2(um.x*5.);\n    mat2 my = mm2(um.y*5.);\n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    \n    float t = iSphere(ro,rd);\n    \n    // nice spinning animation while unset\n    #ifdef DIRECTION\n        vec3 direction = DIRECTION;\n    #else\n        float time = iTime * 0.5;\n        float c = cos(time);\n        float s = sin(time);\n        vec3 direction = vec3(c*s,s*s,c);\n    #endif\n    \n    vec3 col;\n    \n    if (t > 0.)\n    {\n        // Sphere mapping\n    \tvec3 pos = ro+rd*t;\n    \tcol = triplanar(pos, direction);\n    } else {\n        // Background mapping\n        vec3 pos = rd;  \n        col = direction;\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// Generic Functions _________________________________________\n\n// Safe Normalization avoiding division by zero with alternate\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\nvec3 safeNormalize(vec3 vector, vec3 alternate) {\n\n    // Calculate the square of the length of the vector\n    float lenSq = dot(vector, vector);\n    \n    // Check if the squared length is greater than a tiny threshold\n    if (lenSq > SMALLESTFLOAT) {\n        // If so, normalize the vector resuing the squared length\n        return vector / sqrt(lenSq);\n        \n    } else {\n        // Otherwise, return a alternate vector\n        return alternate;\n    }\n}\n\n//_____________________Quiver Plot______________________________\n\n// Rotate coordinates in vector direction\nvec2 rotateUV(vec2 uv, vec2 direction) {\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2( direction.y, direction.x,\n                                -direction.x, direction.y );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\n// Generates a grid of arrows that point in the direction\nfloat quiverPlot(vec2 uv, vec2 direction, float gridSize) {\n    float lineThickness = 0.03;    // Thickness of the arrow line\n    float tipSteepness = 3.0;      // Controls the angle of the arrow tip\n\n    float maxSize = 0.9;           // Maximum arrow length (1 should be the max)\n    float minSize = 0.2;           // Minimum arrow length\n\n    // Calculate the square of the length of the vector\n    float lenSq = dot(direction, direction);\n    \n    // Check if the squared length is greater than a tiny threshold\n    if (lenSq > SMALLESTFLOAT) {\n    \n        // break UV coordinates into grid sections\n        uv = fract(uv * gridSize) - 0.5;\n\n        // caculate the direction vector length    \n        float vectorLen = sqrt(lenSq); \n\n        // Scale uv by vector size\n        float size = mix(minSize, maxSize, clamp(vectorLen, 0.,1.)); \n        uv /= size;\n\n        // Rotate UV coordinates based on the normalized direction vector\n        uv = rotateUV(uv, direction / vectorLen);\n\n        // absolute position\n        float absV = abs(uv.x);\n\n        // Calculate center line of the arrow shape\n        float lineOffset = tipSteepness * lineThickness; // offset so lines doesn't go over the tip\n        float line = max(absV, abs(uv.y + lineOffset) - 0.5 + lineOffset);\n\n        // Caculation of the Arror Tip\n        float tip = max(abs((uv.y / tipSteepness) + absV - (0.5 / tipSteepness) + lineThickness), -uv.y + 0.1);\n\n        // Combine line and tip to create the arrow shape\n        float arrowDist = min(tip, line) - lineThickness;\n\n        // Create a mask based on the arrow shape\n        return step(arrowDist, 0.0); // no AA\n        //float blur = (gridSize * 1.0)/(size * 720.);\n        //return  smoothstep(blur, -blur, arrowDist) ; // cheap AA\n        \n    } else {\n        // if the direction length is 0. then no arrows\n        return 0.;\n    }    \n}\n\n//_____________________Flow Plot______________________________\n\n// 3D cube grid with lines in RGB for XYZ axes\nvec3 cubeGrid(vec3 uvw, float lineThickness) {\n    // Side distance of the cube\n    vec3 sideDistBig = abs(fract(uvw + 0.5) - 0.5);\n    \n    // Smaller scaled side distance of the cube\n    float detailScale = 4.0;\n    uvw *= detailScale;\n    vec3 sideDistDetail = abs(fract(uvw + 0.5) - 0.5);\n    \n    // Merge grids\n    vec3 joined = min(sideDistBig, sideDistDetail);\n    \n    // Create hard outlines of sides\n    return step(joined, vec3(lineThickness)); \n}\n\n// viszalizes 3D Vector\nvec3 flowPlot(vec3 uvw, vec3 direction, float time) {\n    // should probably be input paramters\n    float gridScale = 1.3;\n    float lineThickness = 0.02;\n    float vectorScale = 0.15;\n    \n    direction *= vectorScale;\n    \n    uvw *= gridScale;\n    \n    // Static grid (looks calmer)\n    vec3 grid = cubeGrid(uvw, lineThickness);\n    \n    // Animated grid\n    int count = 7;\n    for (int index = 1; index < count; index += 1) {\n        // Unique percentage of each individual grid \n        float percent = fract(float(index) / float(count - 1) + time);        \n        // Fading brightness\n        float brightness = 1.0 - percent;\n        \n        // Scale offset\n        vec3 offset = percent * direction;\n        \n        // Sample grid\n        vec3 aniGrid = cubeGrid(uvw - offset, lineThickness);\n        \n        // Apply brightness which fades with distance\n        aniGrid *= brightness;\n\n        // Add to the existing grid color output\n        grid = max(grid, aniGrid);\n    }\n    \n    return grid;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}