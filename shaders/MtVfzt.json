{
    "Shader": {
        "info": {
            "date": "1543688759",
            "description": "This is an example of a visualized project, the ray tracing method.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVfzt",
            "likes": 2,
            "name": "2d trace",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "MODer",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "//-----------Main\nfloat unlerp(float p1, float p2, float p) {return (p-p1)/(p2-p1);}//обратное лерпа\n\nfloat lerp(float p1, float p2, float p) {return p1+(p2-p1)*p;}//лерп\n\nfloat defangef(vec2 point1,vec2 point2,vec2 xy) {\nif (xy.x <= (lerp(point1.x,point2.x,unlerp(point1.y,point2.y,xy.y)))){return 1.;}return 0.;\n}\nfloat proc(vec2 point1,vec2 point2,vec2 xy) {\n    if (unlerp(point1.y,point2.y,xy.y)>=0.) {if (unlerp(point1.y,point2.y,xy.y)<=1.) {return defangef(point1,point2,xy);}}\n    return 0.;\n}\nfloat open(vec2 xy, int tip) {\n    float count;\n    for(int i=0;i<int(11);++i) {\n    vec2 point1 = cord(int(vertexLin(i).x));\n    vec2 point2 = cord(int(vertexLin(i).y));\n    count += proc(point1, point2, xy);\n    }\n    if (float(int(count/2.)) == (count/2.)){\n    return 0.;\n        }\n    return 1.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy/iResolution.xy;\n    float col;\n    col = open(xy, IdLine(0));\n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-----Info/Res\nint IdLine(int tip) {\n    if (tip == 0){return 11;}\nreturn 0;\n}\nvec2 cord(int id){\n    if (id == 0) {return vec2(0.8,0.1);}\n    if (id == 1) {return vec2(1.,0.4);}\n    if (id == 2) {return vec2(0.9,0.7);}\n    if (id == 3) {return vec2(0.7,0.9);}\n    if (id == 4) {return vec2(0.6,0.8);}\n    if (id == 5) {return vec2(0.5,0.6);}\n    if (id == 6) {return vec2(0.4,0.4);}\n    if (id == 7) {return vec2(0.2,0.5);}\n    if (id == 8) {return vec2(0.14,0.4);}\n    if (id == 9) {return vec2(0.1,0.3);}\n    if (id == 10) {return vec2(0.05,0.5);}\n    \nreturn vec2(0.,0.);\n}\nvec2 vertexLin(int id) {\n    if (id == 0) {return vec2(0,1);}\n    if (id == 1) {return vec2(1,2);}\n    if (id == 2) {return vec2(2,3);}\n    if (id == 3) {return vec2(3,4);}\n    if (id == 4) {return vec2(4,5);}\n    if (id == 5) {return vec2(5,6);}\n    if (id == 6) {return vec2(6,7);}\n    if (id == 7) {return vec2(7,8);}\n    if (id == 8) {return vec2(8,9);}\n    if (id == 9) {return vec2(9,10);}\n    if (id == 10) {return vec2(10,0);}\n\nreturn vec2(0.,0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}