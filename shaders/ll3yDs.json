{
    "Shader": {
        "info": {
            "date": "1534634108",
            "description": "Shadertoy version of our 4kb demo at Evoke 2018",
            "flags": 64,
            "hasliked": 0,
            "id": "ll3yDs",
            "likes": 20,
            "name": "Juicy",
            "published": 3,
            "tags": [
                "intro",
                "evoke",
                "froot"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 878
        },
        "renderpass": [
            {
                "code": "\n// Juicy by ponk (code) + glafouk (music)\n// 4kb PC intro released at Evoke 2018\n// most lines below are from the community\n// licensed under hippie love conspiracy\n\n// pouet: https://www.pouet.net/prod.php?which=77683\n// github: https://github.com/leon196/Smoothie\n// youtube: https://www.youtube.com/watch?v=rn01yIpgonA\n\n#define repeat(p,r) (mod(p,r)-r/2.)\n#define time mod(iTime, 122.)\n\nconst float PI = 3.14159;\nconst float TAU = 6.283;\nconst float PIHALF = 1.7079;\nconst float PIQUART = 0.785397;\nconst float epsilon = .001;\nconst float steps = 100.;\nconst float far = 40.;\nconst float timeStart = 0.;\nconst float timeBouncy = 20.5;\nconst float timeGnacing = 41.5;\nconst float timeDropping = 51.;\nconst float timeSplashing = 61.5;\nconst float timeSwimming = 82.;\nconst float timeEnd = 122.;\nconst float speed = 1.5;\nconst float count = 8.;\nconst float size = 1.;\nconst float thin = .04;\n\nvoid add (inout vec4 a, vec4 b) { a = mix(b,a,step(a.z,b.z)); }\nfloat random (vec2 p) { vec3 p3  = fract(vec3(p.xyx) * 100.1031); p3 += dot(p3, p3.yzx + 19.19); return fract((p3.x + p3.y) * p3.z); }\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nvoid toroidal (inout vec2 p, float r) { p = vec2(length(p)-r, atan(p.y,p.x)*r); }\nvoid polar (inout vec2 p, float c) {\n\tfloat an = TAU/c;\n\tfloat a = mod(atan(p.y,p.x)+an/2., an)-an/2.;\n\tp = vec2(cos(a), sin(a))*length(p);\n}\n\nvec4 geometry (vec3 pos)\n{\n\tvec4 scene;\n\tvec3 p, pp;\n\tfloat r, salt, z, angle, offset, ratio, number, anim, fall, splash, bouncy, gnac, cell, shape;\n\tscene.z = 10.;\n\tscene.xy = pos.xz;\n\tscene.w = 0.;\n\n\tratio = mod(time*speed, 1.);\n\tnumber = 1.+mod(floor(time*speed), 4.);\n\toffset = floor(time*speed);\n\n\t// bouncing\n\tif ((time < timeGnacing && time > timeBouncy) || time > timeSwimming) {\n\t\tp = pos;\n\t\tz = time*speed;\n\t\tif (time < timeSwimming) {\n\t\t\tp.z += 3.;\n\t\t\tp.yx *= rot(sin(floor(z)*1.5156));\n\t\t\tp.yz *= rot(sin(floor(z)*2.5156));\n\t\t}\n\t\tangle = z*25.;\n\t\tratio = mod(z, 1.);\n\t\tnumber = 1.+mod(floor(z), 4.);\n\t\tanim = smoothstep(.8,1.,ratio)+smoothstep(.2,.0,ratio);\n\t\tp.xy *= 1.+.4*anim*vec2(sin(angle), cos(angle));\n\n\t\t// gnacinc\n\t\tif (time > timeBouncy+10.7 && time < timeGnacing) {\n\t\t\tpp = p;\n\t\t\tcell = floor((atan(p.y,p.x)/PI*.5+.5)*5.);\n\t\t\tpolar(pp.xy, 5.);\n\t\t\tpp.x -= 1.+step(floor(ratio*8.), cell);\n\t\t\tshape = length(pp.xy)-.4;\n\t\t\tpolar(pp.xy, 16.);\n\t\t\tpp.x -= .4;\n\t\t\tshape = min(shape, length(pp.xy)-.1);\n\t\t\tadd(scene, vec4(p.xy/size, max(max(length(p)-size, abs(p.z)-thin), -shape), number));\n\n\t\t} else add(scene, vec4(p.xy/size, max(length(p)-size, abs(p.z)-thin), number));\n\t}\n\n\t// orbiting\n\tif (time < timeBouncy) {\n\t\tp = pos;\n\t\tp.y -= mix(10., 0., smoothstep(timeStart, timeBouncy/2., time));\n\t\tp.z -= mix(8., -2., smoothstep(timeBouncy/3., timeBouncy/1.5, time));\n\t\tp.xz *= rot(ratio*PI+PI/2.);\n\t\tadd(scene, vec4(p.xy/size, max(length(p)- size, abs(p.z)-thin), number));\n\n\t// swimming\n\t} else if (time < timeSwimming && time > timeSplashing) {\n\t\tpos.z += mix(4., -5., smoothstep(timeSplashing, timeSplashing + 10., time));\n\t\tpos.xz *= rot(-PI/2.);\n\t\tcell = 3.;\n\t\tz = pos.z + time;\n\t\tnumber = 1.+mod(floor(abs(z)/cell), 4.);\n\t\tr = number / 4.;\n\t\tpos.y += sin(pos.z * .2+time);\n\t\tp = pos;\n\t\tp.xy *= rot(pos.z*.1);\n\t\tp.x -= 4.;\n\t\tp.z = repeat(z, cell);\n\t\tp.y += sin(length(p.xz)*4.-time*5.+number)*.1;\n\t\tp.zx *= rot(sin(time+r*TAU+p.y)*.5);\n\t\tp.yz *= rot(sin(time*2.+r+p.x*2.)*.2);\n\t\tp.y = abs(p.y)-2.*mix(0., .5+.5*sin(number+time), smoothstep(65., 70., time));\n\t\tp.y = abs(p.y)-1.*mix(0., .5+.5*sin(number+time), smoothstep(70., 75., time));\n\t\tadd(scene, vec4(p.xz/size, max(length(p.xzy)-size, abs(p.y)-thin), number));\n\n\t// dropping\n\t} else if (time < timeDropping && time > timeGnacing) {\n\t\tpos.z -= 4.;\n\t\tpos.yz *= rot(PI/8.);\n\t\tfor (float index = count; index > 0.; --index) {\n\t\t\tr = index / count;\n\t\t\tp = pos;\n\t\t\tsalt = random(vec2(r+offset*.14598));\n\t\t\tfall = smoothstep(.0,.2,ratio);\n\t\t\tsplash = smoothstep(.2,.4,ratio);\n\t\t\tbouncy = smoothstep(.3,.2,ratio) * fall;\n\t\t\tp.y += ((fall*8.-8.+r)-(bouncy * abs(sin(time+r))*2.));\n\t\t\tangle = r*TAU+offset;\n\t\t\tp.xz += vec2(cos(angle), sin(angle)) * splash * (1.+4.*salt);\n\t\t\tp.xz *= rot(salt*TAU);\n\t\t\tp.zy *= rot(PI/2.-r*.1);\n\t\t\tadd(scene, vec4(p.xy/size, max(length(p)- size, abs(p.z)-thin), number));\n\t\t}\n\n\t// dancing\n\t} else if (time < timeEnd && time > timeSwimming) {\n\t\tp = pos;\n\t\tp.yz *= rot(PI/2.);\n\t\tp.xz *= rot(5.*smoothstep(timeSwimming+20., timeEnd, time));\n\t\ttoroidal(p.xz, 6.);\n\t\tp.z += p.y * .5;\n\t\tnumber = 1.+mod(abs(floor(p.z / PI)+floor((p.y-time*5.)/4.)), 4.);\n\t\tp.y = repeat(p.y-time*5., 4.);\n\t\tp.z = repeat(p.z, PI);\n\t\tp.xz *= rot(time+number);\n\t\tp.yz *= rot(time+number);\n\t\tadd(scene, vec4(p.xy/size, max(length(p)- size, abs(p.z)-thin), number));\n\t}\n\n\t// splashing\n\tif ((time < timeSplashing && time > timeDropping)){\n\t\tfor (float index = count; index > 0.; --index) {\n\t\t\tr = index / count;\n\t\t\tcell = time*speed/2.+r;\n\t\t\tratio = mod(cell, 1.);\n\t\t\tp = pos-vec3(0,0,5);\n\t\t\tp += vec3(sin(r*TAU*5.654+floor(cell))*7.*ratio, 5.-12.*smoothstep(.0,.7,ratio)+12.*smoothstep(.3,1.,ratio), index*.5);\n\t\t\tp.xz *= rot(ratio*8.);\n\t\t\tp.yz *= rot(r*5.456);\n\t\t\tadd(scene, vec4(p.xy/size, max(length(p)- size, abs(p.z)-thin), 1.+mod(floor(cell)+index, 4.)));\n\t\t}\n\t}\n\n\treturn scene;\n}\n\nvec4 raymarching (vec3 pos, vec3 ray, inout vec4 hit)\n{\n\tvec4 scene;\n\tfloat total = 0.;\n\tfloat dither = random(gl_FragCoord.xy/iResolution.xy);\n\tfor (float i = steps; i >= 0.; --i) {\n\t\tscene = geometry(pos);\n\t\tfloat dist = scene.z;\n\t\tif (scene.z < epsilon * total || total > far) {\n\t\t\thit.xyz = pos;\n\t\t\thit.w = i/steps;\n\t\t\tbreak;\n\t\t}\n\t\tdist *= .5 + .1 * dither;\n\t\ttotal += dist;\n\t\tpos += ray * dist;\n\t}\n\treturn scene;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 coordinate )\n{\n\tvec4 hit, scene;\n\tvec3 eye, ray, pos, color;\n\tvec2 uv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n\tfloat cell, beat;\n\teye = vec3(0,0,-5);\n\tif (time > timeSwimming) eye.z = -.5-5. * smoothstep(timeSwimming, timeSwimming + 10., time);\n\tbeat = ((sin(time*25.))*(smoothstep(2., 1., abs(time-40.))+smoothstep(1.,.5,abs(time-51.))+smoothstep(1.,.5,abs(time-61.))))*.3;\n\tray = normalize(vec3(uv,1.+beat));\n\tscene = raymarching(eye, ray, hit);\n\tpos = hit.xyz;\n\n\tif (scene.w == 1.) color = vec3(1.0, 0.66, 0.0);\n\telse if (scene.w == 2.) color = vec3(0.376, 0.819, 0.278);\n\telse if (scene.w == 3.) color = vec3(1, 0.913, 0.341);\n\telse if (scene.w == 4.) color = vec3(1.0, 0.11, 0.05);\n\n\t// background\n\tif (length(color) == 0. || pos.z > far/1.5) {\n\t\tvec2 p = (coordinate.xy-.5*iResolution.xy)/iResolution.y;\n\t\tvec2 id = floor(p/.05);\n\t\tp = repeat(p, .05);\n\t\tp *= rot(time+random(id/20.)*TAU);\n\t\tp.x -= .05/4.;\n\t\tcolor = mix(vec3(.9,.5,.5), vec3(1,1,.7), uv.y);\n\t\tfloat n = .01+.99*random(id/10.);\n\t\tcolor += smoothstep(.005*n,.004*n,length(p));\n\n\t}\n\t// slice texture\n\telse {\n\t\tuv = scene.xy*.5;\n\t\tfloat dist = length(uv);\n\t\tfloat shade = smoothstep(.45, .5, dist)*.5+smoothstep(.475,.5, dist)*.5;\n\t\tfloat angle = atan(uv.y,uv.x);\n\t\tdist -= smoothstep(.0,1.,abs(sin(angle*5.))+.4)*.1 * dist;\n\t\tfloat pulp = abs(sin(angle*60.)*sin(dist*60.+sin(angle*60.)))*.25+.5;\n\t\tcolor = mix(vec3(1), color, clamp(shade+smoothstep(1.,.0,.1/abs(sin(angle*5.))) * smoothstep(.41,.4, dist) * smoothstep(.01,.02, dist) * pulp + (random(scene.xy * .5)*2.-1.)*.1, 0., 1.));\n\t}\n\n\t// droplets\n\tif (time > timeSplashing) {\n\t\tuv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n\t\tif (time < timeSwimming) {\n\t\t\tuv.y = abs(uv.y)-.1;\n\t\t\tcell = floor((uv.x+.25)/.25)/1.5;\n\t\t\tuv.x = repeat(uv.x+.25, .25);\n\t\t} else {\n\t\t\tcell = 0.;\n\t\t\tpolar(uv.yx, 8.);\n\t\t\tuv.y -= .3;\n\t\t}\n\t\tfor (float i = 16.; i > 0.; --i) {\n\t\t\tfloat r = i / 16.;\n\t\t\tfloat salt = random(vec2(r*10.16));\n\t\t\tvec2 p = uv;\n\t\t\tfloat ratio = mod(time*speed+r*.1+cell, 1.);\n\t\t\tfloat number = 1.+mod(floor(r*.1+time*speed+cell), 4.);\n\t\t\tvec3 c;\n\t\t\tif (number == 1.) c = vec3(1.0, 0.66, 0.0);\n\t\t\telse if (number == 2.) c = vec3(0.376, 0.819, 0.278);\n\t\t\telse if (number == 3.) c = vec3(1, 0.913, 0.341);\n\t\t\telse if (number == 4.) c = vec3(1.0, 0.11, 0.05);\n\t\t\tfloat a = r*TAU*2.15498+floor(time*speed+r*.1+cell);\n\t\t\tp += vec2(cos(a),sin(a)) * ratio * (.5+.5*salt) * .25;\n\t\t\tp.y -= sin(ratio*PI) * .2;\n\t\t\tfloat size = .01;\n\t\t\tif (time < timeSwimming) size -= .005*salt*smoothstep(1.,.8,ratio);\n\t\t\telse size += .02*salt*smoothstep(1.,.8,ratio);\n\t\t\tcolor = mix(color, c, smoothstep(size,size-.002,length(p)));\n\t\t}\n\t}\n\n\tfragColor = vec4(color * clamp(abs(time), 0., 1.) * clamp(-(time-timeEnd), 0., 1.), 1);\n\n\t// heart\n\tvec2 p = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n\tp *= 1.5*smoothstep(timeEnd-15., timeEnd-5., time);\n\tp.y -= sin(sqrt(abs(p.x))) * .4;\n\tp.y *= 1.25;\n\tp.y += .1;\n\tfragColor *= smoothstep(.01, 0., length(p)-.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 15862,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/leon-denise/juicy-by-glafouk"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}