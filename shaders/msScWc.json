{
    "Shader": {
        "info": {
            "date": "1688255036",
            "description": "[url=dd2yDz]Original shader[/url] by beans_please\n\nEverything in the image tab can be deleted.  All you need to do is type flim, and pass in the colour and exposure as seen on line 16",
            "flags": 0,
            "hasliked": 0,
            "id": "msScWc",
            "likes": 6,
            "name": "minified flim",
            "published": 3,
            "tags": [
                "post",
                "tool",
                "processing"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 O, in vec2 U)\n{\n    vec2 u = U.xy / iResolution.xy;\n\n    // RGB sweep test\n    vec3 col = sw(u);\n\n    // alternate between flim and native sRGB\n    if (mod(iTime, 3.) > 1.5)\n    {\n        col = pow(col, vec3(1. / 2.2));\n    }\n    else\n    {\n        float exposure = 0.;\n        col = flim(col, exposure, true);\n           // Inputs:\n          // colour\n         // exposure\n        // convert to srgb or not. (If you did pow(O, 1./2.2), then false)\n        \n    }\n\n    // output\n    O = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*-----------------------------------------------\n\nflim - Filmic Color Transform\n\nInput Color Space:   Linear BT.709 I-D65\nOutput Color Space:  Linear BT.709 I-D65 / sRGB 2.2 (depends on arguments)\n\nDescription:\n  Experimental port of flim for GLSL/Shadertoy\n  matching flim v1.1.0.\n\nAuthor:\n  Bean (beans_please on Shadertoy)\n\nMinified by:\n  Ahsen (01000001 on shadertoy)\n\nOriginal Repo:\n  https://github.com/bean-mhm/flim\n\nOriginal Shader:\n  https://www.shadertoy.com/view/dd2yDz\n\n-----------------------------------------------*/\n\n\nconst vec3 pf=vec3(1),pb=vec3(1),pff=vec3(1);\nconst float pe=4.3,ps=0.,gr=1.05,gg=1.12,gb=1.045,rr=.5,rg=2.,br=.1,rm=1.,gm=1.,bm=1.,lm=-10.,lx=22.,tx=.44,ty=.28,sx=.591,sy=.779,fe=6.,fd=5.,pfe=6.,pfd=27.5,ffs=0.,ms=1.02;\n\nvec3 op(vec3 c,float p){return pow(c,vec3(1./p));}\nfloat fw(float v,float s,float e){return s + mod(v-s,e-s);}\nfloat fr(float v,float s,float e,float r,float f){return r + ((f-r)/(e-s))*(v-s);}\nfloat f0( float v,float s,float e){return clamp((v-s)/(e-s),0.,1.);}\nvec3 rh(vec3 r){\n    float a,i,h,s,v,d;\n    vec3 c;\n    a=max(r[0],max(r[1],r[2]));\n    i=min(r[0],min(r[1],r[2]));\n    d=a-i;\n    v=a;\n    if (a!=0.){s=d/a;}\n    else{s=0.; h=0.;}\n    if (s==0.){h=0.;}\n    else{c=(vec3(a)-r.xyz)/d;\n        if (r.x==a){h=c[2]-c[1];}\n        else if (r.y==a){h=2.+ c[0]-c[2];}\n        else{h=4.+ c[1]-c[0];}\n        h/=6.;\n        if (h < 0.){h +=1.;}\n    }\n    return vec3(h,s,v);\n}\n\nvec3 hr(vec3 w){\n    float f,p,q,t,h,s,v;\n    vec3 g;\n    h=w[0];\n    s=w[1];\n    v=w[2];\n    if (s==0.){g=vec3(v,v,v);}\n    else{\n        if (h==1.){h=0.;}\n        h*=6.;\n        int i=int(floor(h));\n        f=h-float(i);\n        g=vec3(f,f,f);\n        p=v*(1.-s);\n        q=v*(1.-(s*f));\n        t=v*(1.-(s*(1.-f)));\n        if (i==0){g=vec3(v,t,p);}\n        else if (i==1){g=vec3(q,v,p);}\n        else if (i==2){g=vec3(p,v,t);}\n        else if (i==3){g=vec3(p,q,v);}\n        else if (i==4){g=vec3(t,p,v);}\n        else{g=vec3(v,p,q);}\n    }\n    return g;\n}\n\nvec3 bs(vec3 c,float h,float s,float v)\n{\n    vec3 r=rh(c);\n    r[0]=fract(r[0] + h + .5);\n    r[1]=clamp(r[1]*s,0.,1.);\n    r[2]=r[2]*v;\n    return hr(r);\n}\n\nfloat fa(vec3 c){return (c.x + c.y + c.z)/3.;}\nfloat fs(vec3 c){return c.x + c.y + c.z;}\nfloat fr(vec3 c){return max(max(c.x,c.y),c.z);}\nvec3 uo(vec3 c,float p,float w){\n    float m=fa(c);\n    float n=f0(m,p/1000.,1.-(w/1000.));\n    return c*(n/m);\n}\n\nvec3 s(float h){\n    h=fw(h*360.,0.,360.);\n    vec3 c=vec3(1,0,0);\n    c=mix(c,vec3(1,1,0),f0(h,0.,60.));\n    c=mix(c,vec3(0,1,0),f0(h,60.,120.));\n    c=mix(c,vec3(0,1,1),f0(h,120.,180.));\n    c=mix(c,vec3(0,0,1),f0(h,180.,240.));\n    c=mix(c,vec3(1,0,1),f0(h,240.,300.));\n    c=mix(c,vec3(1,0,0),f0(h,300.,360.));\n    return c;\n}\n\nvec3 sw(vec2 u){\n    float h=1.-u.y;\n    float e=fr(u.x,0.,1.,-5.,10.);\n    return s(h)*pow(2.,e);\n}\n\nfloat ss(float v,float x,float y,float sx,float sy){\n    v=clamp(v,0.,1.);\n    x=clamp(x,0.,1.);\n    y=clamp(y,0.,1.);\n    sx=clamp(sx,0.,1.);\n    sy=clamp(sy,0.,1.);\n    float s=(sy-y)/(sx-x);\n    if (v < x){\n        float t=s*x/y;\n        return y*pow(v/x,t);\n    }\n    if (v < sx){\n        float i=y-(s*x);\n        return s*v + i;\n    }\n    float sp=-s/(((sx-1.)/pow(1.-sx,2.))*(1.-sy));\n    return (1.-pow(1.-(v-sx)/(1.-sx),sp))*(1.-sy)+sy;\n}\n\nfloat dm(float m,float d){\n    float o=pow(2.,lm);\n    float f=f0(log2(m + o),lm,lx);\n    f=ss(f,tx,ty,sx,sy);\n    f*=d;\n    f=pow(2.,-f);\n    return clamp(f,0.,1.);\n}\n\nvec3 rl(vec3 c,vec3 st,vec3 dt,float d){\n    vec3 sn=st/fs(st);\n    vec3 dn=dt/fr(dt );\n    float m=dot(c,sn);\n    float f=dm(m,d);\n    return mix(dn,vec3(1),f);\n}\n\nvec3 rd(vec3 c,float e,float d){\n    c*=pow(2.,e);\n    vec3 r=rl(c,vec3(0,0,1),vec3(1,1,0),d);\n    r*=rl(c,vec3(0,1,0),vec3(1,0,1),d);\n    r*=rl(c,vec3(1,0,0),vec3(0,1,1),d);\n    return r;\n}\n\nvec3 ge(float p,float s,float r,float m){\n    vec3 o=hr(vec3(fw(p + (r/360.),0.,1.),1./s,1.));\n    o/=fs(o);\n    o*=m;\n    return o;\n}\n\nmat3 fm(float rs,float gs,float bs,float rr,float gr,float br,float rm,float gm,float bm){\n    mat3 m;\n    m[0]=ge(0.,rs,rr,rm);\n    m[1]=ge(1./3.,gs,gr,gm);\n    m[2]=ge(2./3.,bs,br,bm);\n    return m;\n}\n\nvec3 np(vec3 c,vec3 b){\n    c=rd(c,fe,fd);\n    c*=b;\n    c=rd(c,pfe,pfd);\n    return c;\n}\n\nvec3 flim(vec3 c,float e,bool t){\n    c=max(c,0.);\n    c*=pow(2.,pe + e);\n    c=min(c,5000.);\n    mat3 x=fm(gr,gg,gb,rr,rg,br,rm,gm,bm);\n    mat3 i=inverse(x);\n    vec3 b=pb*x;\n    const float g=1e7;\n    vec3 w=np(vec3(g),b);\n    c=mix(c,c*pf,ps);\n    c*=x;\n    c=np(c,b);\n    c*=i;\n    c=max(c,0.);\n    c/=w;\n    vec3 f=np(vec3(0.),b);\n    f/=w;\n    c=uo(c,fa(f)*1000.,0.);\n    c=mix(c,c*pff,ffs);\n    c=clamp(c,0.,1.);\n    float m=fa(c);\n    float mix_fac =(m<.5)? f0(m,.05,.5):f0(m,.95,.5);\n    c=mix(c,bs(c,.5,ms,1.),mix_fac);\n    c=clamp(c,0.,1.);\n    if (t) c=op(c,2.2);\n    return c;\n}\n\n/*____________________ end ____________________*/\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}