{
    "Shader": {
        "info": {
            "date": "1717982164",
            "description": "My first character made with raymarching. Tips are welcome!",
            "flags": 0,
            "hasliked": 0,
            "id": "lXG3z3",
            "likes": 3,
            "name": "My First Character Ft. Raymarch",
            "published": 3,
            "tags": [
                "raymarching",
                "raymarch",
                "character",
                "maths"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 89
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define EPSILON 0.001\n\n\nstruct SDFResult {\n    float dist;\n    vec3 color;\n};\n\n// SDF functions\nSDFResult sphereSDF(vec3 p, float r, vec3 color) {\n    return SDFResult(length(p) - r, color);\n}\n\nSDFResult boxSDF(vec3 p, vec3 size, vec3 color) {\n    vec3 d = abs(p) - size;\n    float outsideDist = length(max(d, 0.0));\n    float insideDist = min(max(d.x, max(d.y, d.z)), 0.0);\n    return SDFResult(outsideDist + insideDist, color);\n}\n\nSDFResult sdRoundBox( vec3 p, vec3 b, float r, vec3 color)\n{\n  vec3 q = abs(p) - b + r;\n  return SDFResult(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r,color);\n}\n\nSDFResult sdCapsule( vec3 p, vec3 a, vec3 b, float r, vec3 color)\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return SDFResult(length( pa - ba*h ) - r,color);\n}\n\n// CSG operations\nSDFResult unionSDF(SDFResult a, SDFResult b) {\n    if (a.dist < b.dist) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nSDFResult intersectSDF(SDFResult a, SDFResult b) {\n    if (a.dist > b.dist) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nSDFResult differenceSDF(SDFResult a, SDFResult b) {\n    return SDFResult(max(a.dist, -b.dist), a.color);\n}\n\nSDFResult sminSDF(SDFResult a, SDFResult b, float k) {\n    float h = 1.0 - min(abs(a.dist - b.dist) / (4.0 * k), 1.0);\n    float w = h * h;\n    float m = w * 0.5;\n    float s = w * k;\n    float dist = (a.dist < b.dist) ? a.dist - s : b.dist - s;\n    vec3 color = mix(a.color, b.color, (a.dist < b.dist) ? m : 1.0 - m);\n    return SDFResult(dist, color);\n}\n\nvec3 repeat(vec3 p, vec3 c) {\n    return mod(p, c) - 0.5 * c;\n}\n\n// Map function\nSDFResult map(vec3 p) {\n    // Define the positions and sizes of the objects\n    vec3 headPos = vec3(0.0, 0.5, 0.0);\n    vec3 eyeSocketPos = vec3(0.3, 0.4, 0.6);\n    vec3 eyeSocketPos2 = vec3(-0.3, 0.4, 0.6);\n    vec3 eyePos = vec3(0.3, 0.4, 0.6);\n    vec3 eyePos2 = vec3(-0.3, 0.4, 0.6);\n    vec3 irisPos = vec3(0.3, 0.4, 0.73);\n    vec3 irisPos2 = vec3(-0.3, 0.4, 0.73);\n    vec3 mouthPos = vec3(0.0, 0.0, 0.6);\n    vec3 tonguePos = vec3(0.0, -0.1, 0.39);\n    vec3 torsoPos = vec3(0.0, -1.69, 0.0);\n    vec3 armJoint1Pos = vec3(0.0, -1.0, 0.0);\n    vec3 armJoint2Pos = vec3(0.0, -1.0, 0.0);\n    vec3 legJoint1Pos = vec3(0.0, -2.0, 0.0);\n    vec3 legJoint2Pos = vec3(0.0, -2.0, 0.0);\n\n\n\n    // Sizes\n    float headRadius = 0.8;\n    float eyeSocketRadius = 0.22;\n    float eyeRadius = 0.2;\n    float irisRadius = 0.1;\n    float mouthRadius = 0.2;\n    float tongueRadius = 0.1;\n    float torsoWidth = 1.0;\n    float torsoHeight = 1.5;\n    float torsoDepth = 0.3;\n    float torsoRoundness = 0.6;\n    float armRadius = 0.1;\n    float legRadius = 0.2;\n\n    // Colors\n    vec3 headColor = vec3(0.7255, 0.4627, 0.2824);\n    vec3 eyeSocketColor = vec3(0.6941, 0.6941, 0.8392);\n    vec3 eyeColor = vec3(0.9804, 0.9765, 0.9725);\n    vec3 irisColor = vec3(0.0, 0.0, 0.0);\n    vec3 mouthColor = vec3(0.8, 0.2, 0.2);\n    vec3 tongueColor = vec3(0.8, 0.2, 0.2);\n    vec3 torsoColor = vec3(0.7255, 0.4627, 0.2824);\n    vec3 armColor = vec3(0.7255, 0.4627, 0.2824);\n    vec3 legColor = vec3(0.7255, 0.4627, 0.2824);\n\n    // Compute the SDFs\n    SDFResult head = sphereSDF(p - headPos, headRadius, headColor);\n    SDFResult eyeSocket = sphereSDF(p - eyeSocketPos, eyeSocketRadius, eyeSocketColor);\n    SDFResult eyeSocket2 = sphereSDF(p - eyeSocketPos2, eyeSocketRadius, eyeSocketColor);\n    SDFResult eye1 = sphereSDF(p - eyePos, eyeRadius, eyeColor);\n    SDFResult eye2 = sphereSDF(p - eyePos2, eyeRadius, eyeColor);\n    SDFResult iris = sphereSDF(p - irisPos, irisRadius, irisColor);\n    SDFResult iris2 = sphereSDF(p - irisPos2, irisRadius, irisColor);\n    SDFResult mouth = sphereSDF(p - mouthPos, mouthRadius, mouthColor);\n    SDFResult tongue = sphereSDF(p - tonguePos, tongueRadius, tongueColor);\n    SDFResult torso = sdRoundBox(p - torsoPos, vec3(torsoWidth, torsoHeight, torsoDepth), torsoRoundness, torsoColor);\n    SDFResult arm1 = sdCapsule(\n        p - armJoint1Pos, \n        vec3(0.8, 0.4, 0.0), \n        vec3(1.8, -0.4, 0.0), \n        armRadius, \n        armColor);\n    SDFResult arm2 = sdCapsule(\n        p - armJoint2Pos,\n        vec3(-0.8, 0.4, 0.0),\n        vec3(-1.8, -0.4, 0.0),\n        armRadius,\n        armColor);\n    SDFResult leg1 = sdCapsule(\n        p - legJoint1Pos,\n        vec3(0.5, -1.0, 0.0),\n        vec3(0.7, -2.0, 0.0),\n        legRadius,\n        legColor);\n    SDFResult leg2 = sdCapsule(\n        p - legJoint2Pos,\n        vec3(-0.5, -1.0, 0.0),\n        vec3(-0.7, -2.0, 0.0),\n        legRadius,\n        legColor);\n\n    // Combine them using CSG operations\n    SDFResult result = head;\n    result = differenceSDF(result, eyeSocket);\n    result = differenceSDF(result, eyeSocket2);\n    result = sminSDF(result, eye1, 0.005);\n    result = sminSDF(result, eye2, 0.005);\n    result = sminSDF(result, iris, 0.001);\n    result = sminSDF(result, iris2, 0.001);\n    result = differenceSDF(result, mouth);\n    result = sminSDF(result, tongue,0.005);\n    result = unionSDF(result, torso);\n    result = unionSDF(result, arm1);\n    result = unionSDF(result, arm2);\n    result = unionSDF(result, leg1);\n    result = unionSDF(result, leg2);\n    \n    return result;\n}\n\n// Ray marching\nSDFResult shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    SDFResult res;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec3 p = eye + depth * marchingDirection;\n        res = map(p);\n        if (res.dist < EPSILON) {\n            res.dist = depth;\n            return res;\n        }\n        depth += res.dist;\n        if (depth >= end) {\n            break;\n        }\n    }\n    res.dist = end;\n    return res;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)).dist - map(vec3(p.x - EPSILON, p.y, p.z)).dist,\n        map(vec3(p.x, p.y + EPSILON, p.z)).dist - map(vec3(p.x, p.y - EPSILON, p.z)).dist,\n        map(vec3(p.x, p.y, p.z + EPSILON)).dist - map(vec3(p.x, p.y, p.z - EPSILON)).dist\n    ));\n}\n\n// Lighting\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime*0.5),\n                          2.0,\n                          4.0 * cos(iTime*0.5));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(-5.0 ,\n                          3.0,\n                          -2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n\n    vec3 light3Pos = vec3(4.0,\n                          -5.4,\n                          3.0);\n    vec3 light3Intensity = vec3(0.1412, 0.1412, 0.1412);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light3Pos,\n                                  light3Intensity);\n    \n    \n    return color;\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord.xy);\n    vec3 eye = vec3(0.0, -0.0, 25.0); // Camera position\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * viewDir;\n    \n    SDFResult res = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (res.dist > MAX_DIST - EPSILON) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    vec3 p = eye + res.dist * worldDir;\n    \n    vec3 K_a = vec3(0.1, 0.1, 0.1); // Ambient color\n    vec3 K_d = res.color; // Diffuse color\n    vec3 K_s = vec3(1.0, 1.0, 1.0); // Specular color\n    float shininess = 10.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    color = pow(color, vec3(0.54545));\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}