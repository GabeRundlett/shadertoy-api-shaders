{
    "Shader": {
        "info": {
            "date": "1568654050",
            "description": "Alpha-blending volumetric algorithm inspired from:\n\"Cloudy spikeball\" by Duke (& las): https://www.shadertoy.com/view/MljXDw\n\"Pyroclastic explosion\" by simesgreen: https://www.shadertoy.com/view/XdfGz8",
            "flags": 32,
            "hasliked": 0,
            "id": "wd3GWM",
            "likes": 65,
            "name": "Organic Dodecahedron",
            "published": 3,
            "tags": [
                "raymarching",
                "blur",
                "volumetric",
                "alpha"
            ],
            "usePreview": 1,
            "username": "lsdlive",
            "viewed": 1813
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nOrganic Dodecahedron.\n\nAlpha-blending volumetric algorithm inspired from:\n\"Cloudy spikeball\" by Duke (& las): https://www.shadertoy.com/view/MljXDw\n\"Pyroclastic explosion\" by simesgreen: https://www.shadertoy.com/view/XdfGz8\n\n\nSome notation:\np: position (usually in world space)\nrd: ray direction (eye or view vector)\n*/\n\n\n// Radial blur postfx from XT95:\n// https://github.com/XT95/VisualLiveSystem/blob/master/release/data/postFX/green-pink%20blur.glsl\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    float amt_blur = 45.;\n\tfloat amt_dist = 50.;\n    \n\tvec2 offset =  normalize(uv-.5)*pow(length(uv-.5),4.)/amt_blur;\n\tvec2 offset2 = (uv-.5)/amt_dist;\n\tvec3 col = vec3(0.);\n\tfor(int i=0; i<16; i++)\n\t{\n\t\t//RGB distortion\n\t\tcol.r += texture(iChannel0,uv+offset*float(i)+offset2).r;\n\t\tcol.g += texture(iChannel0,uv+offset*float(i)).g;\n\t\tcol.b += texture(iChannel0,uv+offset*float(i)-offset2).b;\n\t}\n\tcol /= 16.; // box blur\n    \n    // vignetting\n    col *= 0.5 + 0.5*pow(16.0*uv.x*uv.y*(1.0 - uv.x)*(1.0 - uv.y), 0.25);\n    \n    fragColor.rgb = col;\n\tfragColor.a = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nOrganic Dodecahedron.\n\nAlpha-blending volumetric algorithm inspired from:\n\"Cloudy spikeball\" by Duke (& las): https://www.shadertoy.com/view/MljXDw\n\"Pyroclastic explosion\" by simesgreen: https://www.shadertoy.com/view/XdfGz8\n\n\nSome notation:\np: position (usually in world space)\nrd: ray direction (eye or view vector)\n*/\n\n// Enable/disable decay animation\n#define DECAY\n\n#define PI 3.14159\n#define TAU 6.28318\n\nfloat pal_scale = 3.5;\nfloat pal_offset = .6;\n\n// if you disable DECAY animation, you can control the noise\nfloat noise_freq = 20.;\nfloat noise_amt = .3;\n\n#define pal(t,a,b,c,d) (a+(b)*cos(2.*PI*((c)*(t)+d)))\n#define kick(t,b) (floor(t) + fract(t) + sin(fract(t)*PI)*b)\n\n// iq's noise\nfloat noise(in vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f * f * (3. - 2. * f);\n\tvec2 uv = (p.xy + vec2(37., 17.) * p.z) + f.xy;\n\tvec2 rg = textureLod(iChannel0, (uv + .5) / 256., 0.).yx;\n\treturn -1. + 2.4 * mix(rg.x, rg.y, f.z);\n}\n\n// Fbm\nfloat fbm(vec3 p) {\n\treturn noise(p * .06125) * .5 + noise(p * .125) * .25 + noise(p * .25) * .125;\n}\n\n// Dodecahedron folding\n// checkout: https://www.shadertoy.com/view/wtsGzl\nvec3 fold(vec3 p) {\n\tvec3 nc = vec3(-.5, -.809017, .309017);\n\tfor (int i = 0; i < 5; i++) {\n\t\tp.xy = abs(p.xy);\n\t\tp -= 2.*min(0., dot(p, nc))*nc;\n\t}\n\treturn p - vec3(0, 0, 1.275);\n}\n\nfloat sdf_shell(vec3 p, float scale) {\n\tvec3 fp = fold(p * scale);\n\tfloat dist = dot(fp, normalize(sign(fp))) - .1 - sin(fp.y*.2)*2. - sin(fp.y*.7)*1.;\n\tdist += min(fp.x*1., sin(fp.y*.3));\n\n\tfp = fold(fp) - vec3(.1, 0, -.2);\n\tfp = fold(fp) - vec3(.4, 2, -2.3);\n\tfp = fold(fp) - vec3(.8, 1, .1);\n\tfp = fold(fp) - vec3(0, .3, 0);\n\tdist += sin(fp.y*.1)*.1;\n\tdist *= 1.;\n\n\treturn dist / scale;\n}\n\nfloat sdf_core(vec3 p, float scale) {\n\tvec3 fp = fold(p * scale);\n\tfloat dist = dot(fp, normalize(sign(fp))) - .4 - sin(fp.y*.8)*1.8 - sin(fp.y*.7)*1.;\n\tdist += min(fp.x*8., sin(fp.y*.1));\n\n\tfp = fold(fp) - vec3(-.45, 6.7, -.1);\n\tfp = fold(fp) - vec3(-.3, 8.7, -0.9);\n\tfp = fold(fp) - vec3(0, .02, 0);\n\tdist += sin(fp.y*.2)*8.;\n\tdist *= .4;\n\n\treturn dist / scale;\n}\n\nfloat de(vec3 p) {\n\n\tfloat s = 17.;\n\tp = mod(p - s * .5, s) - s * .5;\n\n\tfloat dist;\n\tdist = sdf_shell(p, .15 * 1.7);\n\tdist = min(dist, sdf_core(p, .4 * 1.7)) * .7;\n\n    #ifdef DECAY\n\treturn dist + fbm(p*30.) * (.6+.45*sin(4.+1.*kick(iTime*.1, .1)));\n    #else\n    return dist + fbm(p*noise_freq) * noise_amt;\n    #endif\n}\n\nvec3 camera(vec3 ro, vec3 ta, vec2 uv) {\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 left = normalize(cross(vec3(0, 1, 0), fwd));\n\tvec3 up = normalize(cross(fwd, left));\n\treturn normalize(fwd + uv.x * left + up * uv.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\t//vec3 ray_ori = vec3(-11.*cos(iTime), sin(iTime)*7., -11. * sin(iTime)); // softer cam\n    vec3 ray_ori = vec3(-10.*cos(kick(iTime*2., .1)), 16.*cos(kick(iTime*1., .1)), -10.*sin(kick(iTime, .1)));\n    vec3 target = vec3(0);\n\tvec3 ray_dir = camera(ray_ori, target, uv);\n\tvec3 pos = ray_ori;\n\n\t// local density/distance\n\tfloat ldensity = 0.;\n\n\t// accumulation color & density\n\tvec3 bg = vec3(.16, .12, .22);\n\tvec4 sum = vec4(bg, 0.);\n\n\tfloat tmax = 45.;\n\tfloat tdist = 0., dist = 0.;\n\n\tfor (float i = 0.; (i < 1.); i += 1. / 64.) {\n\n\t\tif (dist < tdist * .001 || tdist > tmax || sum.a > .95)\n\t\t\tbreak;\n\n\t\t// evaluate distance function\n\t\tdist = de(pos) * .5;\n\n\t\t// check whether we are close enough (step)\n\t\t// compute local density and weighting factor \n\t\tconst float h = .05;\n\t\tldensity = (h - dist) * step(dist, h);\n\n\t\tvec4 col;\n\t\tcol.rgb = pal(ldensity * pal_scale + pal_offset,\n\t\t\tvec3(.7, .4, .2 + sin(iTime*1.5)*.1),\n\t\t\tvec3(.9, .8, .4),\n\t\t\tvec3(.4, .5, .6),\n\t\t\tvec3(.8, .5, .3));\n        //col.rgb = clamp(col.rgb, 0., 1.);\n\t\tcol.a = ldensity;\n\n\t\t// pre-multiply alpha\n\t\t// checkout: https://www.shadertoy.com/view/XdfGz8\n\t\t// http://developer.download.nvidia.com/assets/gamedev/files/gdc12/GDC2012_Mastering_DirectX11_with_Unity.pdf\n\t\tcol.rgb *= col.a;\n\t\tsum += (1. - sum.a) * col;\n\n\t\t// from duke/las\n\t\tsum.a += .01;\n\n\t\t// enforce minimum stepsize\n\t\tdist = max(dist, .03);\n\n\t\t// step forward\n\t\tpos += dist * ray_dir; // sphere-tracing\n\t\ttdist += dist;\n\t}\n\n\t// from duke/las\n\t// simple scattering approximation\n\tsum *= 1. / exp(ldensity * .4) * 1.25;\n\n\tfragColor = vec4(sum.rgb, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}