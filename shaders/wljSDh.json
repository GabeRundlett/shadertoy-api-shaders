{
    "Shader": {
        "info": {
            "date": "1566135204",
            "description": "2d cartoon green ecology flat landscape.",
            "flags": 0,
            "hasliked": 0,
            "id": "wljSDh",
            "likes": 10,
            "name": "Cartoon Landscape",
            "published": 3,
            "tags": [
                "2d",
                "perlinnoise",
                "cartoon",
                "water",
                "tree",
                "toon",
                "hill",
                "sailingboat",
                "solarpanel"
            ],
            "usePreview": 1,
            "username": "ikuto",
            "viewed": 855
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define ALPHA(d) 1. - clamp(d*200., 0., 1.)\n\nfloat hash(float p) { vec3 p3 = fract(vec3(p) * 0.1031); p3 += dot(p3, p3.yzx + 19.19); return fract((p3.x + p3.y) * p3.z); }\n\nvec2 rotate(vec2 v, float a) { return cos(a)*v + sin(a)*vec2(v.y,-v.x); }\n\nfloat fade(float t) { return t*t*t*(t*(6.*t-15.)+10.); }\n\nfloat grad(float hash, float p) { return (int(1e4*hash) & 1) == 0 ? p : -p; }\n\nfloat perlinNoise1D(float p) {\n\tfloat pi = floor(p), pf = p - pi, w = fade(pf);\n    return mix(grad(hash(pi), pf), grad(hash(pi + 1.0), pf - 1.0), w) * 2.0;\n}\n\nfloat fbm(float pos, int octaves, float persistence)  {\n    float total = 0., frequency = 1., amplitude = 1., maxValue = 0.;\n    for(int i = 0; i < octaves; ++i) {\n        total += perlinNoise1D(pos * frequency) * amplitude;\n        maxValue += amplitude;\n        amplitude *= persistence;\n        frequency *= 2.;\n    }\n    return total / maxValue;\n}\n\n//2d distance functions from https://iquilezles.org/articles/distfunctions2d\nfloat sdTriangle(vec2 p, vec2 p0, vec2 p1, vec2 p2 ) {\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdCircle(vec2 p, float r) { return length(p) - r; }\n\nfloat sdBox(vec2 p, vec2 b) { vec2 d = abs(p)-b; return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0); }\n\nvec4 mixLayer(vec4 layer1, vec4 layer2) { return mix(layer1, layer2, layer2.a); }\n\nvec4 sky(vec2 uv) { \n    vec3 col = vec3(.3,.5,.8)-uv.y*.3;\n    col = mix(col, vec3(1.-uv.y,.6,.0), pow(1. - clamp(uv.y-.2,0.,1.), 2.));\n    return vec4(col, 1.); \n}\n\nvec4 sun(vec2 uv) {\n    vec2 d = uv - vec2(1.1, .8);\n    float t = pow(1./(1.+length(d)), 4.);\n\tvec3 col =  3. * vec3(.8, .7, .5) * t; //sun disk\n    float a = atan(d.y/d.x)+iTime;\n    col = mix(vec3(1.,1.,.5)*t*step(mod(a, PI/8.),PI/16.), col, t); //sun rays\n    return vec4(col, t);\n}\n\nvec4 hill(vec2 pos, vec2 size, vec3 col, bool snow) {\n\tfloat d = (pos.y - size.y*cos(pos.x*1./size.x));\n    if (abs(pos.x) > .5*PI*size.x || pos.y < 0.) return vec4(0.);\n    if (snow && pos.y > .7*size.y + .1*fbm(pos.x*8., 1, .5)) col = vec3(.95);\n    return vec4(col, ALPHA(d));\n}\n\nvec4 windmill(vec2 pos, float scale) {\n    pos/=scale;\n\tfloat d = sdBox(pos, vec2(.003, .15));\n    pos -= vec2(0.,.15);\n    d = min(d, sdCircle(pos, .01));\n#define WING d = min(d, sdTriangle(pos, vec2(0.), vec2(.1,-.09), vec2(.02,-.04)));\n    pos = rotate(pos, iTime); WING;\n    pos = rotate(pos, PI*2./3.); WING;\n    pos = rotate(pos, PI*2./3.); WING;\n    return vec4(vec3(1.), ALPHA(d));\n}\n\nvec4 grid(vec2 pos, vec3 v[4], vec3 col) {\n    for (int i = 0; i < 4; ++i) {\n        v[i].yz = rotate(v[i].yz, PI/4.);\n        v[i].xz = rotate(v[i].xz, .5*sin(iTime));\n        v[i]*=clamp(v[i].z+1., .2, 2.);\n    }\n    float d = sdTriangle(pos, v[0].xy, v[1].xy, v[2].xy);\n    d = min(d, sdTriangle(pos, v[0].xy, v[2].xy, v[3].xy));\n\treturn vec4(col, ALPHA(d));\n}\n\nvec4 solarPanel(vec2 pos, float scale) {\n \tpos/=scale;\n\tvec4 col = vec4(vec3(.8), ALPHA(sdBox(pos, vec2(.003, .1))));\n    pos -= vec2(0.,.1);\n    float w = .24, h = .12, dx = w / 4., dy = h / 2., k=1.;\n    for (float x = -w/2.; x < w/2.; x += dx) {\n        for (float y = -h/2.; y < h/2.; y += dy, k=-k) {\n            vec3 gridCol = k > 0. ? vec3(0.,.2,.6) : vec3(0.,.3,.5);\n        \tcol = mixLayer(col, grid(pos, vec3[](vec3(x,y,0.),vec3(x+dx,y,0.),vec3(x+dx,y+dy,0.),vec3(x,y+dy,0.)), gridCol));\n        }\n\t}\n    return col;\n}\n\nvec4 opU(vec4 c1, vec4 c2) {return c1.w < c2.w ? c1 : c2; } \n\nvec4 tree(vec2 pos, float scale) {\n \tpos/=scale;\n    vec4 col = vec4(vec3(.5), ALPHA(sdBox(pos, vec2(.008, .08))));\n    pos.x += .1*sin(2.*iTime) * pos.y;\n    col = mixLayer(col, vec4(vec3(.2, .32, .1), ALPHA(sdTriangle(pos, vec2(-.1, -.03), vec2(.1, -.03), vec2(0., .05)))));\n    col = mixLayer(col, vec4(vec3(.2, .36, .1), ALPHA(sdTriangle(pos, vec2(-.07, .02), vec2(.07, .02), vec2(0., .08)))));\n    col = mixLayer(col, vec4(vec3(.2, .34, .1), ALPHA(sdTriangle(pos, vec2(-.045, .06), vec2(.045, .06), vec2(0., .14)))));\n    return col;\n}\n\nvec4 mountain(vec2 uv) {\n\tvec4 col = mixLayer(vec4(0.), windmill(uv-vec2(.5, .2), .3));\n    col = mixLayer(col, hill(uv-vec2(-1.5, -.4), vec2(.2, .7), vec3(.2, .32, .1), true));\n    col = mixLayer(col, hill(uv-vec2(1.5, -.4), vec2(.3, 1.2), vec3(.62, .67, .68), true));\n    col = mixLayer(col, hill(uv-vec2(-.5, -.4), vec2(.5, .55), vec3(.0, .7, .2), false));\n    col = mixLayer(col, hill(uv-vec2(.5, -.4), vec2(.5, .6), vec3(.0, .7, .2), false));\n    col = mixLayer(col, hill(uv-vec2(-1., -.4), vec2(.4, .35), vec3(.2, .85, .4), false));\n\tcol = mixLayer(col, windmill(uv-vec2(-.5, .1), .45));\n\tcol = mixLayer(col, windmill(uv-vec2(1., -.05), .6));\n    col = mixLayer(col, hill(uv-vec2(1., -.4), vec2(.4, .3), vec3(.2, .85, .4), false));\n    col = mixLayer(col, hill(uv-vec2(.0, -.4), vec2(.5, .5), vec3(.2, .85, .4), false));\n    col = mixLayer(col, windmill(uv-vec2(.2, .1), .8));\n    col = mixLayer(col, windmill(uv-vec2(-.3, -.2), 1.));\n\tcol = mixLayer(col, windmill(uv-vec2(-1., .05), .7));\n   \tcol = mixLayer(col, solarPanel(uv-vec2(.3, -.2), 1.));\n    col = mixLayer(col, solarPanel(uv-vec2(-.8, -.1), .8));\n    col = mixLayer(col, tree(uv-vec2(1.2, -.2), 1.));\n    col = mixLayer(col, tree(uv-vec2(-1.1, -.1), .9));\n    col = mixLayer(col, tree(uv-vec2(-.1, -.15), .9));\n    col = mixLayer(col, tree(uv-vec2(0., .12), .6));\n    col = mixLayer(col, tree(uv-vec2(.1, .0), .6));\n    col = mixLayer(col, tree(uv-vec2(-.1, .1), .6));    \n    return col;  \n}\n\nvec4 building(vec2 uv) {\n    float d = uv.y - (.8*hash(floor(uv.x*8.))+.2);\n    vec3 col = vec3(.15, .35, .5);\n    return vec4(col, ALPHA(d));   \n}\n\nvec4 wave(vec2 uv, float height, float amplitude) {\n    float noise = amplitude * (fbm(uv.x*4., 4, .1) + fbm(uv.x*4. + iTime, 4, .1));\n    float d = uv.y - (noise + height);\n    return vec4(vec3(.0, .15, .4), 1.-clamp(d*30., 0., 1.));\n}\n\nvec4 water(vec2 uv) {\n\tvec4 col;\n    float height = -.4, amplitude = .005;\n    for (int i = 0; i < 5; ++i, uv.x+=10., height-=.13, amplitude+=.003)\n    \tcol = mixLayer(col, wave(uv, height, amplitude));\n    return col;\n}\n\nvec4 sailingBoat(vec2 uv) {\n    vec4 col = vec4(vec3(1.), ALPHA(sdBox(uv-vec2(0.,.13), vec2(.001, .1))));\n    vec2 p[4] = vec2[](vec2(-.1, .0), vec2(.1, .0), vec2(.15, .07), vec2(-.13,.05));\n    col = mixLayer(col, vec4(vec3(1.,.8,.0), ALPHA(sdTriangle(uv, p[0], p[1], p[3]))));\n    col = mixLayer(col, vec4(vec3(1.,.8,.0), ALPHA(sdTriangle(uv, p[1], p[2], p[3]))));\n    col = mixLayer(col, vec4(vec3(1.), ALPHA(sdTriangle(uv, vec2(.01,.23), vec2(.01,.08), vec2(.1,.08)))));\n    col = mixLayer(col, vec4(vec3(1.), ALPHA(sdTriangle(uv, vec2(-.01,.21), vec2(-.01,.08), vec2(-.08,.08)))));\n    return col;\n}\n\nvec4 render(vec2 uv) {\n\tvec4 col = sky(uv);\n    col = mixLayer(col, sun(uv));\n    col = mixLayer(col, building(uv));\n    col = mixLayer(col, mountain(uv));\n    col = mixLayer(col, water(uv));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.*fragCoord-iResolution.xy) / iResolution.y;\n    if (uv.y >= -.4) \n        fragColor = render(uv);\n    else //reflections\n        fragColor = mix(render(uv), render(vec2(uv.x, max(-.4, -uv.y*2.-1.2 + .04*fbm(uv.x*4.+iTime,4,.1)))), .1);\n        float w = iResolution.x / iResolution.y + .2;\n    \n    uv -= vec2(2.*w*fract(.05*iTime+.5)-w,-.7);\n    uv = rotate(uv, sin(5.*iTime) * .02);\n    fragColor = mixLayer(fragColor, sailingBoat(uv));\n    //reflection of the sailing boat\n    fragColor = mixLayer(fragColor, .3*sailingBoat(vec2(uv.x, -uv.y*2.-.05 + .04*fbm(uv.x*4.+iTime,4,.1))));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}