{
    "Shader": {
        "info": {
            "date": "1720604860",
            "description": "mouse follower\n",
            "flags": 32,
            "hasliked": 0,
            "id": "X3yXDt",
            "likes": 3,
            "name": "mouse follower 2",
            "published": 3,
            "tags": [
                "follower"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "\nvec4 f_o_hue_from_n_nor(\n    float n_nor\n){\n\n    float n_colors = 3.;\n    float n_nor2 = n_nor*n_colors;\n    vec3 o_col = vec3(0.);\n    float n_nor2_fract = fract(n_nor2);\n    o_col[int(floor(n_nor2))] = (n_nor2_fract < 0.5) ? 1. : 1.-(n_nor2_fract-.5)*2.;\n    o_col[int(mod(floor(n_nor2)+1., n_colors))] = (n_nor2_fract > 0.5) ? 1. : n_nor2_fract*2.;\n    \n    return vec4(o_col, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn_nor = (fragCoord.xy-iResolution.xy*.5)/iResolution.yy;\n    vec2 o_one_pixel_nor = 1./iResolution.xy;\n    float n_max = 100.;\n    float n_idx = floor(mod(float(iFrame)*.2, n_max));\n    float n_idx_nor = n_idx/n_max;\n\n    float n_min = 1.;\n    vec4 o_col = vec4(0.);\n    for(float n_it_nor = 0.; n_it_nor < 1.; n_it_nor+=(1./n_max)){\n        \n        float n_it = floor(n_max*n_it_nor);\n        float n_it_nor_cur = (mod(n_idx-n_it, n_max)/n_max);//(n_it == n_idx) ? 0.5 : 0.1;\n        vec4 o_hue = f_o_hue_from_n_nor(n_it_nor_cur);\n       vec4 o_mouse = texelFetch(\n           iChannel0,\n           ivec2(int(n_it),0), \n           0\n       );\n       float n_radius = ((1.-(pow(n_it_nor_cur-.5,2.)*4.+1.))+1.)*.1;\n       float n = abs(length(o_mouse.xy-o_trn_nor)-n_radius)/n_radius;\n       n = pow(n, 1./20.);\n       n = clamp(n, 0., 1.);\n       n_min = min(n,n_min);\n       o_col += vec4((1.-n)*2.)*o_hue;\n    }\n\n    // Output to screen\n    //fragColor = vec4(texture(iChannel0,vec2(0.)));\n    fragColor = vec4(1.-n_min);\n    fragColor = o_col;\n    \n    //fragColor = texture(iChannel0,o_trn_nor);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trn_nor = fragCoord.xy/iResolution.xy;\n    float n_max = 100.;\n    float n_idx = mod(float(iFrame)*.2, n_max);\n    vec4 o_col_last = texture(iChannel0, o_trn_nor);\n    vec2 o_mouse_nor = iMouse.xy;\n    fragColor = o_col_last;\n    bool b_mouse_down = (iMouse.z > 0.0);\n    if(int(fragCoord.x) == int(floor(n_idx))){\n        if(!b_mouse_down){\n            o_mouse_nor = ((vec2(\n                sin(iTime*2.),\n                cos(iTime*2.)\n            )*.5))\n            *sin(iTime*(sin(iTime*.05)*.5+.5)*10.)*1.;\n            \n        }else{\n            o_mouse_nor = (iMouse.xy-iResolution.xy*.5)/iResolution.yy;\n        }\n        fragColor = vec4(o_mouse_nor, iMouse.zw);\n    }\n    //if(iFrame == 0){fragColor = vec4(0.2, 0.3, 0.1,1.);}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}