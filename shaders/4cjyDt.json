{
    "Shader": {
        "info": {
            "date": "1723159939",
            "description": "An attempt at shell fur where the fur is rendered as multiple textured planes.The fur is quite thin and tall, so I'm using a lot of layers (and also because I can afford to, I'm not doing much with this shader)",
            "flags": 0,
            "hasliked": 0,
            "id": "4cjyDt",
            "likes": 2,
            "name": "Shell Fur Test",
            "published": 3,
            "tags": [
                "test",
                "fur"
            ],
            "usePreview": 0,
            "username": "Bingle",
            "viewed": 118
        },
        "renderpass": [
            {
                "code": "// Fork of \"Simple Raytracing Boilerplate\" by Bingle. https://shadertoy.com/view/lccXDB\n// 2024-08-08 22:11:42\n\n/* Axis orientation (from default camera view):\n\n             ^ +Y\n             |\n             |\n     +X      |\n     <-------+\n              \\\n               \\| +Z\n              ‾‾\n*/\n\n#define density 150.0\n#define layers 256\n\nvec2 roundVec(vec2 vec, float increment){\n    return round(vec/increment)*increment;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    cam camera = cam(vec3(sin(iTime)*0.5-0.25*iTime,-0.5-0.2*sin(iTime*0.781),-0.25*iTime),normalize(vec3(0.8*sin(0.239*iTime),-0.75+0.1*sin(iTime*0.781),-1)),vec3(0,1,0),0.4);\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    ray r = getCamRay(camera,uv);\n    \n    for (int i=layers;i>0;i--){\n        float height = float(i)/float(layers);\n        float dist = plane_intersect(vec4(0,1,0,height*0.2),r);\n        if (dist>0.0){\n            vec3 pos = at(r,dist);\n            vec3 norm = normalize(pos);\n            vec2 snapPos = roundVec(pos.xz,1.0/density);\n            if (hash12(snapPos*10.0)>height+length(snapPos-pos.xz)*density){\n                col = texture(iChannel0,pos.xz).rgb*height*clamp(1.5/dist-0.5,0.0,1.0);\n                break;\n            }\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct cam{\n    vec3 pos;\n    vec3 dir;\n    vec3 up;\n    float viewDist;\n};\n\nstruct ray{\n    vec3 pos;\n    vec3 dir;\n};\n\n// Takes UV coords -0.5 to 0.5 (or in whatever centered range really) and returns a ray\nray getCamRay(cam c,vec2 uv){\n    vec3 side = cross(c.dir,c.up);\n    vec3 up = cross(side,c.dir);\n    \n    return ray(c.pos,normalize(c.dir*c.viewDist + side*uv.x + up*uv.y));\n}\n\n// Returns the point at distance t along ray r\nvec3 at(ray r,float t){\n    return r.pos + r.dir*t;\n}\n\n// Taken from: https://raytracing.github.io/books/RayTracingInOneWeekend.html\n// Could be optimized more, but works well for testing\nfloat sphere_intersect(vec3 center, float radius,ray r){\n    vec3 oc = r.pos - center;\n    \n    float a = dot(r.dir,r.dir);\n    float b = 2.0 * dot(oc,r.dir);\n    float c = dot(oc,oc) - radius*radius;\n    \n    float desc = (b*b) - 4.0*a*c;\n    \n    if (desc<0.0){\n        return -1.0;\n    }else{\n        return (-b - sqrt(desc)) / (2.0*a);\n    }\n}\n\nfloat plane_intersect(vec4 plane, ray r){\n    return dot(plane,vec4(r.pos,1.0))/dot(plane.xyz,r.dir);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}