{
    "Shader": {
        "info": {
            "date": "1723228976",
            "description": "each iteration only uses addition and multiplication. works by approximating inverse square root close to 1",
            "flags": 0,
            "hasliked": 0,
            "id": "McfBRr",
            "likes": 1,
            "name": "iterative normalization",
            "published": 3,
            "tags": [
                "approximation",
                "normalize"
            ],
            "usePreview": 0,
            "username": "janpitokiala",
            "viewed": 87
        },
        "renderpass": [
            {
                "code": "#define DARK\n\n#ifdef DARK\n#define BACKGROUND vec3(.05)\n#define MAIN_COLOR vec3(1.)\n#else\n#define BACKGROUND vec3(1.)\n#define MAIN_COLOR vec3(0.)\n#endif\n#define FADED_COLOR mix(BACKGROUND,MAIN_COLOR,.3)\n\n#define CIRCLE_WIDTH .007\n#define CIRCLE_SIZE .8\n#define POINT_SIZE .04\n#define FADED_POINT_SIZE .02\n\n#define ITERATIONS 8\nfloat astepDeriv(float edge, float x, float deriv) {\n    return clamp((x-edge)/deriv+.5,0.,1.);\n}\nvec2 normalizeStep(vec2 x) {\n    return x*(1.5-.5*dot(x,x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord*2./iResolution.y+vec2(-iResolution.x/iResolution.y,-1.);\n    float uvDeriv = 2./iResolution.y;\n    vec2 m = iMouse.xy*2./iResolution.y+vec2(-iResolution.x/iResolution.y,-1.);\n    if(iMouse.x==.0&&iMouse.y==.0) { //demo\n      m=sin(iTime*vec2(1.3,1.5));\n    }\n    vec3 col = BACKGROUND;\n    col = mix(col, MAIN_COLOR, astepDeriv(0.,CIRCLE_WIDTH-abs(length(uv)-CIRCLE_SIZE),uvDeriv));\n    vec2 point = m/CIRCLE_SIZE;\n    for(int i=0;i<ITERATIONS;i++) {\n      col = mix(col, FADED_COLOR, astepDeriv(0.,FADED_POINT_SIZE-length(uv-point*CIRCLE_SIZE),uvDeriv));\n      point = normalizeStep(point);\n    }\n    col = mix(col, MAIN_COLOR, astepDeriv(0.,POINT_SIZE-length(uv-point*CIRCLE_SIZE),uvDeriv));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}