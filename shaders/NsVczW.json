{
    "Shader": {
        "info": {
            "date": "1654537273",
            "description": "a slight remix of Arc from three points (https://www.shadertoy.com/view/NdycRW) - using IQ's\nsdCutDisk (https://www.shadertoy.com/view/ftVXRc)",
            "flags": 0,
            "hasliked": 0,
            "id": "NsVczW",
            "likes": 10,
            "name": "threepointcurve",
            "published": 3,
            "tags": [
                "curve"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// a slight remix of Arc from three points (https://www.shadertoy.com/view/NdycRW)\n// using IQ's sdCutDisk (https://www.shadertoy.com/view/ftVXRc)\n\n\n// r=radius, h=height\nfloat sdCutDisk( in vec2 p, in float r, in float h )\n{\n    float w = sqrt(r*r-h*h); // constant for a given shape\n    \n    p.x = abs(p.x);\n    \n    // select circle or segment\n    float s = max( (h-r)*p.x*p.x+w*w*(h+r-2.0*p.y), h*p.x-w*p.y );\n\n    return (s<0.0) ? length(p)-r :        // circle\n           (p.x<w) ? h - p.y     :        // segment line\n                     length(p-vec2(w,h)); // segment corner\n}\n\nvec2 project(in vec2 a, in vec2 b)\n{\n    return b * (dot(a, b) / dot(b, b));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    //arc from three points\n    vec2 a = vec2(-0.4,0.0);\n    vec2 b = vec2(0.0, 0.5);\n    if (iMouse.z>0.5)\n        b = m;\n    vec2 c = (vec2(0.4, 0.2) + vec2(sin(iTime), cos(iTime)) * 0.3);\n    \n    //based on https://mathopenref.com/arcradius.html\n    vec2 dir = c - a;\n    vec2 mid = mix(a, c, 0.5);\n    float w = length(dir);\n    vec2 normal = normalize(b - (project(b - a, dir) + a));\n    float h = length(mid - b);\n    float rad = max(w*0.5, h*0.5 + (w*w) / (8.0*h));\n   \n    //re-align b to match the arc top\n    b = mid + normal * h;\n\n    // show arc distance (using IQs sdCutDisk)\n    dir/=w;\n    vec2 pp = b - (normal * (rad));\n    pp = mat2(dir.x,-dir.y,dir.y,dir.x) * (p-pp);\n    pp.y *= sign(normal.y);\n    float d = sdCutDisk(pp,rad,rad-h);\n    \n    // coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.5,0.85,1.0);\n    col *= 1.0 - exp(-7.0*abs(d));\n    col *= 0.8 + 0.2*cos(128.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    //draw points A,B,C\n    float distToPoint = min(min(length(p - a), length(p - b)), length(p - c));\n    col = mix(vec3(1.0,0.0,0.0),col,smoothstep(0.0,0.015,distToPoint-0.025));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}