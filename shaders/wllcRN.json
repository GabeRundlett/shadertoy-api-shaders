{
    "Shader": {
        "info": {
            "date": "1591598048",
            "description": "effect of bitwise operators XOR, AND, OR once divided by:\n    left:  pow of 2 (i.e. direct content)   \n    right: non-power of 2\n\ntry also: i*i , i*i*i\nStrange how Xor \"hashes\" into circuit-like patterns.\nSee also [url]https://www.shadertoy.com/view/ttscR",
            "flags": 0,
            "hasliked": 0,
            "id": "wllcRN",
            "likes": 15,
            "name": "fract ( XOR / n )",
            "published": 3,
            "tags": [
                "xor",
                "pattern",
                "hash",
                "bitwise",
                "circuits"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 462
        },
        "renderpass": [
            {
                "code": "// inspired from python273 https://shadertoy.com/view/4ldyW8\n// See also https://www.shadertoy.com/view/ttscRN\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    ivec2 I = ivec2(U+60.*iTime);\n    int t = int(iTime) % 3,\n        i =   t==1 ? I.x ^ I.y\n            : t==2 ? I.x | I.y\n            :        I.x & I.y;\n                 //  I.x * I.y;\n    \n    float v = float(i);  // try also: i*i , i*i*i\n\n    O = vec4( U.x < R.x/2. \n                 ? fract( v / 256.)\n                 : fract( v / 13. )\n            );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}