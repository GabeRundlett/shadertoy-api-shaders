{
    "Shader": {
        "info": {
            "date": "1472477671",
            "description": "Using smooth-minimum for brightness adjustment (see https://www.shadertoy.com/view/ltf3W2 )\nControls: LMB + \nmouse x: control white cutoff\nmouse y: control cutoff softness.\n\nRed is area of effect. Can be combined with blacklift / gamma-adjustment.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml3GWs",
            "likes": 31,
            "name": "post: smooth brightness",
            "published": 3,
            "tags": [
                "postfx",
                "post",
                "brightness",
                "soft",
                "smooth",
                "levels",
                "smoothmin",
                "softmin"
            ],
            "usePreview": 1,
            "username": "hornet",
            "viewed": 4168
        },
        "renderpass": [
            {
                "code": "vec3 hash32n(vec2 n)\n{\n    return fract( sin(dot(n.xy, vec2(12.9898, 78.233)))* vec3(43758.5453, 28001.8384, 50849.4141 ) );\n}\n\nvec3 remap( float a, float b, vec3 v ) {\n    //return (v-a) / (b-a);\n\treturn clamp( (v-vec3(a)) / vec3(b-a), 0.0, 1.0 );\n}\n\nvec3 remap_noclamp( float a, float b, vec3 v )\n{\n\treturn (v-vec3(a,a,a)) / (b-a);\n}\n\nvec3 lin2srgb( vec3 c )\n{\n    return pow( c, vec3(1.0/2.2) );\n}\nvec3 srgb2lin( vec3 c )\n{\n    return pow( c, vec3(2.2) );\n}\n\n\n// ============================================\n\n\n//note: smooth minium, soft-min\n//      https://www.shadertoy.com/view/ltf3W2\nfloat SAbs(float x, float k)\n{\n    return sqrt(x * x + k);\n}\n\nfloat SRamp1(float x, float k)\n{\n    return 0.5 * (x - SAbs(x, k));\n}\n\nfloat SMin1(float a, float b, float k)\n{\n    return a + SRamp1(b - a, k);\n}\n//note: smax = -smin(-a, -b, k )\nvec3 SMin1(vec3 a, vec3 b, float k)\n{\n    return vec3( SMin1( a.r, b.r, k ),\n\t\t\t     SMin1( a.g, b.g, k ),\n\t\t\t     SMin1( a.b, b.b, k ) );\n}\n\nvec3 gamma_softmin( vec3 x, float t )\n{\n    //note: sensible defaults for single-parameter control (t)\n    //note: black-cutoff, white-cutoff, power, soft-clipping\n    vec4 parms = mix( vec4( 0.0, 1.0, 0.0, 0.0 ),\n                      vec4( 0.0, 0.25, 0.25, 1.0 ), t );\n    //float blacklift = mix( 0.0, 0.0, t );\n    \n    vec2 mt = iMouse.xy / iResolution.xy;\n    if ( iMouse.z > 0.5 )\n    {\n        parms = vec4( 0.0, mt.x, 0.0, 5.0 * max(0.0, pow(mt.y,4.0)) );\n        //blacklift = 0.0;\n    }\n\n\tx = max( x, parms.xxx ); //note: clamp below min\n\tx = remap_noclamp( parms.x, parms.y, x );\n\n\t//float pexp = 1.0 / (1.0 - 0.5*parms.z);\n\t//x = pow( x, vec3(pexp, pexp, pexp) );\n\n\t//x = x * (1.0-blacklift) + blacklift;\n\n\tfloat pmin = parms.w;\n\tx = SMin1( x, vec3(1.0, 1.0, 1.0), pmin ); //upper\n\n\treturn x;\n}\n\n\n// ============================================\n\n\nvec3 gamma( vec3 x, float t )\n{\n    vec3 softmin = gamma_softmin( x, t );\n    \n    //note: renormalize (0,0) and (1,1) values\n    //note: should be done in app or vertex-shader\n    float softmin0 = gamma_softmin( vec3(0,0,0), t ).r;\n    float softmin1 = gamma_softmin( vec3(1,1,1), t ).r;\n    \n    return remap( softmin0, softmin1, softmin);\n}\n\nfloat f( float x, float t )\n{\n\treturn gamma( vec3(x), t ).r;\n}\n\nfloat calcCurve( vec2 uv, float t )\n{\n    float threshold = 7.0 / iResolution.y;\n    float fx = f( uv.x, t );\n    float dist = abs( uv.y - fx );\n    return max( 0.0, 15.0 * ( threshold - dist ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0-uv.y;\n    \n    vec3 col = srgb2lin( texture( iChannel0, uv, -10.0 ).rgb );\n\n    float t = 0.5 + 0.5 * sin( iTime );\n\n    if ( iMouse.z > 0.5 )\n    {\n        t = iMouse.x / iResolution.x;\n    }\n\n    if ( uv.y > 0.9 )\n    \tcol = vec3( fract( uv.x ) );\n\n\n    col = gamma(col, t );\n    \n    if ( uv.y < 0.9 && uv.y > 0.7 )\n    {\n        vec2 guv;\n        guv.x = uv.x;\n        guv.y = 1.0-(uv.y-0.7) / (0.9-0.7);\n\n        vec3 curveits;\n        curveits = vec3( calcCurve( guv, t ) );\n\n        vec3 curvecol = vec3(1,1,1);\n        \n        vec2 mt = iMouse.xy / iResolution.xy;\n        float f0 = f(guv.x, t);\n        float f1 = min( 1.0, 1.0/mt.x * guv.x );\n        float fdiff = f1-f0;\n        if ( iMouse.z > 0.5 )\n        {\n            col.r += step( abs(guv.x-mt.x), 1.0 / iResolution.x );\n\n            //float f0 = f(guv.x, t);\n            //float f1 = min( 1.0, 1.0/mt.x * guv.x );\n            //col.r += step( f0, guv.y) * step( guv.y, f1 );\n           \t//float fdiff = f1-f0;\n           \tcurvecol = mix(vec3(1,1,1), vec3(1,0,0), fdiff * step( 0.01, fdiff ) );\n        }\n        \n        col = mix( vec3(0.025, 0.025, 0.025), curvecol, curveits );\n        \n        //note: grid\n        col += 0.0125 * vec3( step(0.975, 1.0-2.0*abs(fract(10.0*guv.x-0.5)-0.5)) );\n        col += 0.0125 * vec3( step(0.925, 1.0-2.0*abs(fract(4.0*guv.y-0.5)-0.5)) );\n\n        if ( iMouse.z > 0.5 )\n        {\n        \tcol.r += 0.125 * step( 0.01, fdiff ); //note: mouse-extents\n        \t//col.r += step( f0, guv.y) * step( guv.y, f1 ); //note: absolute diff            \n        }\n    }\n\n    //note: show white-clipped area\n    //float lum = sqrt( 0.299*col.r*col.r + 0.587*col.g*col.g + 0.114*col.b*col.b );\n    //if ( iMouse.z > 0.5 && lum > 0.99 )\n    //    col = mix( vec3(0,0,0), col, step(fract(iTime),0.5) );\n    \n    if ( uv.y > 0.9 )\n        col = srgb2lin( col );\n    \n    vec4 outcol = vec4( lin2srgb(col), 1.0 );\n    vec3 trnd = hash32n( uv + fract(iTime) ) + hash32n( uv + 0.1337 + fract(iTime) ) - 0.5;\n    outcol.rgb += trnd / 255.0;\n\tfragColor = outcol;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}