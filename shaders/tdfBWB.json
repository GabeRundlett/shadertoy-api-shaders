{
    "Shader": {
        "info": {
            "date": "1588962708",
            "description": "see if points are aligned using hough transformation (hesse normal form)",
            "flags": 0,
            "hasliked": 0,
            "id": "tdfBWB",
            "likes": 2,
            "name": "point alignment",
            "published": 3,
            "tags": [
                "huoughtransformationhessenormalformalignpoint"
            ],
            "usePreview": 0,
            "username": "ich",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "#define pi 3.141\n#define pi2 (pi * 2.f)\n\nfloat line(vec2 uv, float a) {\n\tvec2 d = vec2(cos(a), sin(a));\n\tfloat l = dot(uv, d);\n\treturn abs(l);\n}\n\nfloat line_segment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat circle(vec2 uv) {\n\treturn length(uv);\n}\n\nfloat hesse_normal_form(vec2 p, float a) {\n    float r = dot(vec2(1), p * vec2(cos(a), sin(a)));\n    return r;\n}\n\nvec3 render_color(vec3 l, float w, float b) {\n\treturn smoothstep(w, 0.f, l) * b;\n}\n\nvoid mainImage(out vec4 color, in vec2 output_coord) {\n\tif (output_coord.x >= iResolution.x || output_coord.y >= iResolution.y) return;\n\tfloat aspect_ratio = iResolution.x / iResolution.y;\n\n\t// max distance to center in screen space\n\tfloat max_distance = length(vec2(aspect_ratio, 1));\n\n\t// coord in screen space (-.5, -.5) to (.5, .5)\n\tvec2 uv = (output_coord - iResolution.xy * .5) / iResolution.y;\n\n\t// mouse\n\tvec2 m = vec2(vec2(iMouse.xy) - iResolution.xy * .5) / iResolution.y;\n\n\t// rendering setup\n\tvec3 c = vec3(0); // output color\n\tvec3 l  = vec3(max_distance); // distance to closest rendered object\n\tfloat pixel_size = 1.f / iResolution.y; // size of a pixel in screen space\n\tfloat w = pixel_size * 2.f; // minimum width of rendered objects\n\n\t// render coordinate system\n\tl = min(l, line(uv, 0.f));\n\tl = min(l, line(uv, pi * .5));\n    // generate color from distance\n\tc += render_color(l, w, .3f);\n    // clear distance\n    l = vec3(max_distance);\n\n\t// angle of lines\n\tfloat a = iTime * .2f;\n\ta = mod(a, pi2);\n\n\t// define points\n\tvec2 ps[] = vec2[] (\n\t\tm,\n\t\tvec2(.5, .1),\n\t\tvec2(-.4, -.2)\n\t);\n\n\tfor (int i = 0; i < 3; ++i) {\n\t\t// render all points\n\t\tl[i] = min(l[i], circle(uv - ps[i]) - w * 2.f);\n\t\t// render all lines\n\t\tl[i] = min(l[i], line(uv - ps[i], a));\n\n        // hesse normal form dots\n        float r = hesse_normal_form(ps[i], a);\n\t\tvec2 pos = vec2(a / pi2 - .5f, r);\n        // normalize to screen space\n    \tpos.x *= aspect_ratio;\n        pos.y /= max_distance;\n        // render\n    \tl[i] = min(l[i], circle(uv - pos) - w * 2.f);\n    }\n    \n    // generate color from distance\n\tc += render_color(l, w, 1.f);\n    // clear distance\n    l = vec3(max_distance);\n        \n    for (int i = 0; i < 3; ++i) {\n        // hesse normal form lines\n        float resolution = 16.f;\n        vec2 prev_pos;\n        for (float j = 0.f; j < resolution; ++j) {\n            float a = j / (resolution - 1.f) * pi2;\n            float r = hesse_normal_form(ps[i], a);\n            vec2 pos = vec2(a / pi2 - .5f, r);\n            // normalize to screen space\n            pos.x *= aspect_ratio;\n            pos.y /= max_distance;\n            // render\n            if (j > 0.f) {\n    \t\t\t//l[i] = min(l[i], circle(uv - pos) - w * 2.f);\n            \tl[i] = min(l[i], line_segment(uv, pos, prev_pos));\n            }\n            prev_pos = pos;\n        }\n\t}\n    \n    // generate color from distance\n\tc += render_color(l, w, .3f);\n    // clear distance\n    l = vec3(max_distance);\n\t\n\tcolor = vec4(c, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}