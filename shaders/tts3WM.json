{
    "Shader": {
        "info": {
            "date": "1556552999",
            "description": "With a little help from Fibonacci",
            "flags": 0,
            "hasliked": 0,
            "id": "tts3WM",
            "likes": 13,
            "name": "Bush Cycle",
            "published": 3,
            "tags": [
                "tree",
                "fibonacci",
                "weave",
                "growth"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 633
        },
        "renderpass": [
            {
                "code": "// \"Bush Cycle\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0  // optional antialising\n\nfloat PrCylDf (vec3 p, float r, float h);\nvec4 SphFib (vec3 v, float n);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nfloat dstFar, tCur, nFace, fcFac, szFac, tPhs;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 f4;\n  vec3 q;\n  float dMin, d, bFac, f, rt, rc, h;\n  d = length (p - vec3 (0., 3.5, 0.)) - 4.;\n  if (d < 0.05) {\n    dMin = dstFar;\n    q = p / szFac;\n    q.y -= 4.;\n    q = q.xzy;\n    q.z *= clamp (1. - 0.1 * q.z, 0.5, 1.5);\n    q.z -= 0.05 * dot (q.xy, q.xy);\n    f4 = SphFib (normalize (q), nFace);\n    d = szFac * (RotToDir (f4.yzw, vec3 (0., 0., 1.), q - f4.yzw).z +\n       step (-0.98, f4.w) * (20. * fcFac * smoothstep (0., 5. * fcFac, f4.x) - 1.3));\n    DMINQ (1);\n    q = p / szFac;\n    q.y -= 2.;\n    d = szFac * PrCylDf (q.xzy, 0.3 * (1. - 0.1 * q.y * q.y * sign (q.y)), 2.);\n    DMINQ (2);\n    q = p;\n    q.y -= -0.03;\n    d = PrCylDf (q.xzy, 1.5, 0.05);\n    DMINQ (3);\n    bFac = 0.2;\n    p /= bFac;\n    rt = 0.1;\n    rc = 16. / pi;\n    h = 3.;\n    p.y -= h + 2. * rt;\n    p.xz *= 1.2 - 0.2 * (p.y + h) / h;\n    q = p;\n    q.xz = vec2 (rc * atan (q.z, - q.x), length (q.xz) - rc);\n    d = bFac * (length (vec2 (abs (q.y) - h, q.z)) - 2. * rt);\n    DMINQ (5);\n    q.xy = mod (q.xy + 0.5, 1.) - 0.5;\n    f = rt * cos (2. * pi * q.x);\n    d = bFac * max (min (length (vec2 ((mod ((q.x - q.y) + 0.5, 1.) - 0.5) / sqrt (2.), q.z + f)),\n       length (vec2 ((mod ((q.x + q.y) + 0.5, 1.) - 0.5) / sqrt (2.), q.z - f))) - rt,\n       abs (p.y) - h);\n    DMINQ (4);\n    dMin *= 0.5;\n  } else dMin = d;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0002 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.05;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, sh, r;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj == 1) {\n      col4 = mix (vec4 (0.2, 1., 0.2, 0.1), vec4 (1., 0.9, 0.2, 0.1),\n         smoothstep (0.55, 0.75, tPhs) * (1. - smoothstep (0.95, 0.99, tPhs))) *\n         (0.5 + 0.5 * SmoothBump (0.2, 0.8, 0.15, tPhs));\n      col4 = mix (vec4 (0.4, 0.2, 0., 0.1), col4, smoothstep (2.1, 2.3, length (qHit)));\n      vf = vec2 (32., 0.5);\n    } else if (idObj == 2) {\n      col4 = vec4 (0.6, 0.4, 0.3, 0.) * (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.03,\n         mod (16. * atan (qHit.z, - qHit.x) / pi, 1.)));\n      vf = vec2 (32., 1.);\n    } else if (idObj == 3) {\n      col4 = vec4 (0.5, 0.3, 0.1, 0.);\n      if (qHit.y > 0.) {\n        r = length (qHit.xz);\n        if (r < 0.85) {\n          col4.rgb *= 0.5;\n          vf = vec2 (16., 4.);\n        } else {\n          col4.rgb *= 0.9 + 0.1 * SmoothBump (0.2, 0.8, 0.05, mod (8. * r + 0.5, 1.));\n          vf = vec2 (32., 0.2);\n        }\n      }\n    } else if (idObj == 4 || idObj == 5) {\n      col4 = vec4 (0.7, 0.8, 0.8, 0.2);\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n    sh = ObjSShadow (ro, ltDir);\n    col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * step (0.9, sh) * vec3 (1., 1., 0.7) *\n       pow (max (dot (normalize (ltDir - rd), vn), 0.), 16.);\n  } else col = vec3 (0.3, 0.3, 0.4) * (0.6 + 0.4 * rd.y);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tPhs = mod (tCur / 30., 1.);\n  nFace = 100. + 10. * floor (800. * SmoothBump (0.25, 0.75, 0.23, tPhs));\n  szFac = 0.1 + 0.9 * sqrt (SmoothBump (0.25, 0.75, 0.23, tPhs));\n  fcFac = 1. / sqrt (nFace);\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 3.5, -16.);\n  zmFac = 3.5 + 0.5 * abs (az);\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (-1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  uvs *= uvs * uvs;\n  col = mix (col, vec3 (0.06, 0.06, 0.08), smoothstep (0.9, 1., dot (uvs, uvs)));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec4 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  float phi = 1.618034;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vec4 (sqrt (ddMin), vfMin);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}