{
    "Shader": {
        "info": {
            "date": "1708630745",
            "description": "Shader learning",
            "flags": 0,
            "hasliked": 0,
            "id": "4X23zV",
            "likes": 1,
            "name": "Raytracer_circle",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "Robin42",
            "viewed": 537
        },
        "renderpass": [
            {
                "code": "struct Circle {\n    vec2 center_pos;\n    float radius;\n};\n\nfloat circle_distance(float x, float y) {\n    return (x * x + y * y);\n}\n\nbool hit_circle(Circle circle, vec2 pos) {\n    return length(circle.center_pos - pos) < circle.radius;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0*fragCoord/iResolution.xy - 1.0;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 col = vec3(0.0);\n    Circle circle = Circle(vec2(0.0, 0.0), abs(sin(0.5 * iTime)));\n    \n    if (hit_circle(circle, vec2(uv.x, uv.y))) {\n        col = vec3(1.0);\n    } \n    \n    \n    \n    // if(circle_distance((uv.x - 0.5)*ratio, uv.y - 0.5) < 0.1) {\n    //     col = vec3(1.0);\n    // }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"Nearby Raytracing Circle\",\n\t\"description\": \"A simple Circle.\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}