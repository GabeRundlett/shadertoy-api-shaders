{
    "Shader": {
        "info": {
            "date": "1721551239",
            "description": "source https://www.shadertoy.com/view/4XySDw  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/MfsyRl",
            "flags": 0,
            "hasliked": 0,
            "id": "lclyDS",
            "likes": 2,
            "name": "key on cosmic triangle",
            "published": 3,
            "tags": [
                "triangle"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 122
        },
        "renderpass": [
            {
                "code": "\n#define iterations 12\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#ifndef PI\n#define PI 3.1415926535897932384626433832795\n#endif\n\n#define TWO_PI 6.28318530718\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n \n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nfloat shape_mask(vec2 st, float N, float extra_rot, float shape_size, float smooth_border){\n    // Angle and radius from the current pixel\n    \n    float a = atan(st.x, st.y) + PI + extra_rot;\n    float r = TWO_PI / float(N);\n\n    // Reference to\n    // http://thndl.com/square-shaped-shaders.html\n    // Shaping function that modulate the distance\n    float d = cos(floor(.5 + a / r) * r - a) * length(st);\n    float shape_mask = 1.0 - smoothstep(shape_size - smooth_border/ 2., shape_size + smooth_border / 2., d);\n    \n    return shape_mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n       vec2 uv2 = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n       uv2.y-=0.25;\nuv*=0.5;\nvec2 st_zero_one = fragCoord.xy / iResolution.xy;\n\n    // Remap the space to -1. to 1.\n    vec2 st = st_zero_one * 2. - 1.;\nst.y-=0.25;\n\n    float x_squeeze = iResolution.x / iResolution.y;\n    st.x *= x_squeeze;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    float mask = 10.;\n    float N = 3.;\n    float last_mask = 0.;\n\n    for(float layer = 0.; layer < 40.; layer++){\n      \n        float rot_speed =  + (iTime * 1.3) * .15;\n\n        float angle = PI + ceil(float(layer) * rot_speed) * .4;\n\n        angle *= pow(1.299, (float(layer)));\n        float shape_size = pow(0.94, (float(layer)));\n        \n        float shape_mask_border = shape_mask(st, N, angle, shape_size + .001, .007);\n\n        float shape_mask = shape_mask(st, N, angle, shape_size, .005);\n        shape_mask *= 1.5 + sin(float(layer) * 0.5) * .3;\n\n        mask = max(shape_mask, mask - shape_mask_border);\n        last_mask = shape_mask;\n    }\n\n    color = vec3(mask);\n   \n    color = mix(color, vec3(1.0431, 0.2, 5.0), last_mask);\n \n vec3 from=vec3(1.,.5,0.5);\n\tvec3 dir=vec3(uv*zoom,1.);\n //volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.05), sin(iTime*0.05), -sin(iTime*0.05), cos(iTime*0.05));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n    vec2 a = vec2(.7,.7);\n    vec2 b = vec2(0.0,-.35);\n    vec2 c = vec2(-.7,.7);\n\n    //p = i*a + j*b + k*c;\n    float i,j,k;\n   \n    i = (-(uv.x -b.x)*(c.y - b.y) + (uv.y - b.y)*(c.x - b.x))/\n    (-(a.x + b.x)*(c.y - b.y)+(a.y - b.y)*(c.x - b.x));\n    \n    j = (-(uv.x - c.x)*(a.y - c.y) + (uv.y - c.y)*(a.x - c.x))/\n    (-(b.x - c.x)*(a.y - c.y)+(b.y - c.y)*(a.x - c.x));;\n    \n    k = 1.0 - i - j ;\n    \n    if(i<.0 || j<.0 || k<.0){\n        i=0.0;\n        j=.0;\n        k=.0;\n    }\n    \n    vec3 col = vec3(i,j,k);\n    \n    \n    // Output to screen\n    fragColor = vec4(col*v*.01*color,1.0);\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv2, anim) * vec3(0.35,0.2,0.55)*3.3, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}