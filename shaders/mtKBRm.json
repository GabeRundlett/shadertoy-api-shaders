{
    "Shader": {
        "info": {
            "date": "1701953018",
            "description": "Simple noise script for use in horror type setting",
            "flags": 0,
            "hasliked": 0,
            "id": "mtKBRm",
            "likes": 1,
            "name": "Broken TV Noise (horror etc)",
            "published": 3,
            "tags": [
                "noise",
                "screen",
                "tv",
                "monitor",
                "static"
            ],
            "usePreview": 0,
            "username": "mazureofficial",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "// Fork of \"Visuals for VJ\" by mazureofficial. https://shadertoy.com/view/ctyfRD\n// 2023-12-06 14:39:44\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to \n    vec2 uv = ((1./fragCoord+iResolution.xx)+(1./(-fragCoord+iResolution.xy))/iTime);\n\n\n    // me varying pixel color with more complex manipulation\n    vec3 col = (uv.xyx / vec3(0,2,4));//highter iTime-X stronger effect\n    \n    // Enhanced fractal noise based on time and space\n    float noise = 0.0;\n    float scale = 1.0;\n    for (int i = 0; i < 10; i++) {\n        noise += (0.5 - 0.5 * cos(dot(uv * scale, vec2(12.9898, 78.233)) + iTime)) / scale;\n        scale *= 1.8;\n    }\n\n    // More complex transformation for evolving visuals\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    float angle = cos(iTime * 0.5) * 0.3;\n    uv = mat2(cos(angle), -sin(angle), -sin(angle), cos(angle)) * uv;\n\n    // Intricate pattern of moving shapes with fractal noise\n    float dist = distance(uv, vec2(sin(iTime * 0.1), cos(iTime * 0.1)));\n    float pattern = sin(dist * 12.0 - iTime * 3.0) + cos(dist * 12.0 - iTime * 3.0);\n    pattern *= noise;\n\n    // Advanced color manipulation\n    col = (sin(2.0001)-(0.6/(0.2-sin(col))))/(iTime * pattern);\n    // Output to screen with dynamic alpha based on pattern and noise\n    fragColor = vec4(col, col / 6.0 * pattern - noise);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}