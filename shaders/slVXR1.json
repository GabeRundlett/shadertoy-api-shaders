{
    "Shader": {
        "info": {
            "date": "1640210987",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "slVXR1",
            "likes": 6,
            "name": "twisty refract",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "pema99",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "#define PI (22.0/7.0)\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nmat2 rot(float r)\n{\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat ball(vec3 p)\n{\n    // scale\n    float scale = cos(iTime*3.)*0.2+1.0;\n    p *= scale;   \n\n    // twist\n    float twist = sin(iTime*3.);\n    p.xz *= rot(mix(0., p.y*6., twist));\n    \n    // rot cube\n    p.xz *= rot(iTime);\n    p.xy *= rot(1.);\n   \n    // bulge\n    float bulge = cos(iTime*3.);\n    p += bulge*(0.07*(sin(p.x*p.y*p.z*200.)*0.5+0.5));\n    \n    // bloat\n    float bloat = sin(iTime*6.)*0.5+0.5;\n    return mix(sdBox(p, vec3(0.4)), length(p)-0.65, bloat);\n}\n\nfloat map(vec3 p)\n{\n    vec3 c = vec3(3.);\n    vec3 q = p;\n    //vec3 q = mod(p+0.5*c,c)-0.5*c;\n    float d = ball(q);\n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    vec3 p = ro;\n    int i = 0;\n    for (; i < 100; i++)\n    {\n        float dist = map(p)*0.7;\n        if (dist < 0.001) break;\n        t += dist;\n        p = ro + t * rd;\n    }\n    return vec2(t, i);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 o = vec2(0.001, 0.);\n    return normalize(vec3(\n        map(p + o.xyy) - map(p - o.xyy),\n        map(p + o.yxy) - map(p - o.yxy),\n        map(p + o.yyx) - map(p - o.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * ((fragCoord/iResolution.xy) - 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.);\n    for (int i = 0; i < 2; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            vec3 ro = vec3(0., 0., -3.);\n            vec3 rd = normalize(vec3(uv + vec2(float(i)*0.5+0.25, float(j)*0.5+0.25)*0.006, 0.) - ro);\n            ro.xz *= rot(iTime);\n            rd.xz *= rot(iTime);\n\n            vec2 res = march(ro, rd);\n            float dist = res.x;\n            float iters = res.y;\n\n            if (dist < 10.)\n            {\n                col.r += texture(iChannel0, refract(rd, normal(ro + dist * rd), 1.0/1.07)).r*0.25;\n                //col += (normal(ro + dist * rd) * 0.5 + 0.5) * 0.25;\n            }\n            else\n            {\n                col.r += texture(iChannel0, rd).r*0.25;\n            }\n        }\n    }\n    for (int i = 0; i < 2; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            vec3 ro = vec3(0., 0., -3.);\n            vec3 rd = normalize(vec3(uv + vec2(float(i)*0.5+0.25, float(j)*0.5+0.25)*0.006, 0.) - ro);\n            ro.xz *= rot(iTime);\n            rd.xz *= rot(iTime+0.015);\n\n            vec2 res = march(ro, rd);\n            float dist = res.x;\n            float iters = res.y;\n\n            if (dist < 10.)\n            {\n                col.gb += texture(iChannel0, refract(rd, normal(ro + dist * rd), 1.0/1.07)).gb*0.25;\n                //col += (normal(ro + dist * rd) * 0.5 + 0.5) * 0.25;\n            }\n            else\n            {\n                col.gb += texture(iChannel0, rd).gb*0.25;\n            }\n        }\n    }\n    // don't do this, kids. I'm just too lazy to add the chromatic aberration as a second pass postprocess\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}