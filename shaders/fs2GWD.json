{
    "Shader": {
        "info": {
            "date": "1617731262",
            "description": "Ray intersection with Bernoulli's lemniscate (a special case of a Cassini oval).",
            "flags": 0,
            "hasliked": 0,
            "id": "fs2GWD",
            "likes": 8,
            "name": "Bernoulli Lemniscate Intersect",
            "published": 3,
            "tags": [
                "raytracing",
                "ray",
                "raycasting",
                "quartic",
                "intersect",
                "bernoulli",
                "lemniscate"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "struct Hit4 {\n    int numHits;\n    vec4 hits;\n};\n\n// Quartic solver I made here: https://www.shadertoy.com/view/fsB3Wt\nfloat cbrt(in float x) { return sign(x) * pow(abs(x), 1.0 / 3.0); }\nint solveQuartic(in float a, in float b, in float c, in float d, in float e, inout vec4 roots) {\n    b /= a; c /= a; d /= a; e /= a; // Divide by leading coefficient to make it 1\n\n    // Depress the quartic to x^4 + px^2 + qx + r by substituting x-b/4a\n    // This can be found by substituting x+u and the solving for the value\n    // of u that makes the t^3 term go away\n    float bb = b * b;\n    float p = (8.0 * c - 3.0 * bb) / 8.0;\n    float q = (8.0 * d - 4.0 * c * b + bb * b) / 8.0;\n    float r = (256.0 * e - 64.0 * d * b + 16.0 * c * bb - 3.0 * bb * bb) / 256.0;\n    int n = 0; // Root counter\n\n    // Solve for a root to (t^2)^3 + 2p(t^2)^2 + (p^2 - 4r)(t^2) - q^2 which resolves the\n    // system of equations relating the product of two quadratics to the depressed quartic\n    float ra =  2.0 * p;\n    float rb =  p * p - 4.0 * r;\n    float rc = -q * q;\n\n    // Depress using the method above\n    float ru = ra / 3.0;\n    float rp = rb - ra * ru;\n    float rq = rc - (rb - 2.0 * ra * ra / 9.0) * ru;\n\n    float lambda;\n    float rh = 0.25 * rq * rq + rp * rp * rp / 27.0;\n    if (rh > 0.0) { // Use Cardano's formula in the case of one real root\n        rh = sqrt(rh);\n        float ro = -0.5 * rq;\n        lambda = cbrt(ro - rh) + cbrt(ro + rh) - ru;\n    }\n\n    else { // Use complex arithmetic in the case of three real roots\n        float rm = sqrt(-rp / 3.0);\n        lambda = -2.0 * rm * sin(asin(1.5 * rq / (rp * rm)) / 3.0) - ru;\n    }\n\n    // Newton iteration to fix numerical problems (using Horners method)\n    // Suggested by @NinjaKoala\n    for(int i=0; i < 2; i++) {\n        float a_2 = ra + lambda;\n        float a_1 = rb + lambda * a_2;\n        float b_2 = a_2 + lambda;\n\n        float f = rc + lambda * a_1; // Evaluation of λ^3 + ra * λ^2 + rb * λ + rc\n        float f1 = a_1 + lambda * b_2; // Derivative\n\n        lambda -= f / f1; // Newton iteration step\n    }\n\n    // Solve two quadratics factored from the quartic using the cubic root\n    if (lambda < 0.0) return n;\n    float t = sqrt(lambda); // Because we solved for t^2 but want t\n    float alpha = 2.0 * q / t, beta = lambda + ra;\n\n    float u = 0.25 * b;\n    t *= 0.5;\n\n    float z = -alpha - beta;\n    if (z > 0.0) {\n        z = sqrt(z) * 0.5;\n        float h = +t - u;\n        roots.xy = vec2(h + z, h - z);\n        n += 2;\n    }\n\n    float w = +alpha - beta;\n    if (w > 0.0) {\n        w = sqrt(w) * 0.5;\n        float h = -t - u;\n        roots.zw = vec2(h + w, h - w);\n        if (n == 0) roots.xy = roots.zw;\n        n += 2;\n    }\n\n    return n;\n}\n\n// Intersection\nHit4 iBernoulliLemniscate(in vec3 ro, in vec3 rd, in float iso) {\n    vec3 oo = ro * ro;\n    vec3 dd = rd * rd;\n    vec3 od = ro * rd;\n\n    float a = dot(dd, dd) + 2.0 * ((dd.y + dd.z) * dd.x + dd.y * dd.z);\n    float b = 4.0 * (od.x + od.y + od.z) * (dd.x + dd.y + dd.z);\n\n    float c1 = 2.0 * ((oo.y + oo.z - 1.0) * dd.x + (oo.x + oo.z + 1.0) * dd.y + (oo.x + oo.y + 1.0) * dd.z);\n    float c2 = 6.0 * dot(oo, dd) + 8.0 * ((od.y + od.z) * od.x + od.y * od.z);\n    float c = c1 + c2;\n\n    float sq = oo.x + oo.y + oo.z;\n    float d = 4.0 * ((sq - 1.0) * od.x + (sq + 1.0) * (od.y + od.z));\n    float e = dot(oo, oo) + 2.0 * ((oo.y + oo.z - 1.0) * oo.x + (oo.z + 1.0) * oo.y + oo.z) - iso;\n\n    vec4 roots;\n    int numRoots = solveQuartic(a, b, c, d, e, roots);\n\n    return  Hit4(numRoots, roots);\n}\n\n// Normal\nvec3 nBernoulliLemniscate(in vec3 p, in float iso) {\n    return normalize(p * p * p + vec3(-p.x, p.yz) + p.xxx * p.yxx * p.yyz + p.xyy * p.zzy * p.zzz);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = ivec2(iMouse) == ivec2(0) ? vec2(0.0) : (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 3.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Environment map\n    fragColor = texture(iChannel0, rd);\n\n    // Animate\n    float iso = 0.0;//0.1 * sin(iTime);\n\n    // Find the closest hit in front of the camera\n    Hit4 hit = iBernoulliLemniscate(ro, rd, iso);\n    float t = 1000000000.0;\n    vec3 hitPos;\n    for (int n=0; n < int(hit.numHits); n++) {\n        vec3 hitCandid = ro + rd * hit.hits[n];\n        if (hit.hits[n] > 0.0 && hit.hits[n] < t) {\n            t = hit.hits[n];\n            hitPos = hitCandid;\n        }\n    }\n\n    // Render the shape if hitting\n    if (t < 1000000000.0) {\n        vec3 n = nBernoulliLemniscate(hitPos, iso);\n        float diff = abs(dot(n, -rd));\n        float checkers = mod(floor(atan(hitPos.y, hitPos.z) * 1.57) + floor(hitPos.x * 3.0), 2.0);\n        fragColor = mix(vec4(0.5 + 0.5 * checkers, 0.0, 0.0, 1.0), texture(iChannel0, reflect(-rd, n)), 0.25);\n        fragColor.rgb *= diff;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}