{
    "Shader": {
        "info": {
            "date": "1713294290",
            "description": "Testing some octohedral mapping bilinear interpolation",
            "flags": 0,
            "hasliked": 0,
            "id": "lcG3WK",
            "likes": 2,
            "name": "Octohedral Mapping Playgound",
            "published": 3,
            "tags": [
                "playground"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n\nvec2 toPyramid(vec3 dir)\n{\n\tdir.xy = dir.xy * 1.0/( abs( dir.x ) + abs( dir.y ) + abs( dir.z ) );\n\tvec2 uv = vec2(dir.x + dir.y, dir.y - dir.x);\n\treturn uv * 0.5f + 0.5f;\n}\n\nvec3 fromPyramid(vec2 uv)\n{\n\t//uv = uv * 2.0f - 1.0f;\n\t//float3 dir;\n\t//dir.x = (uv.x - uv.y) / 2.0f;\n\t//dir.y = (uv.x + uv.y) / 2.0f;\n\t// Simplifies to:\n\tvec3 dir;\n\tdir.x = uv.x - uv.y;\n\tdir.y = uv.x + uv.y - 1.0f;\n\n\tdir.z = 1.0f - abs(dir.x) - abs(dir.y);\n\treturn normalize(dir);\n}\n\n// TODO: Clean these up\nvec2 toRectOctahedral(vec3 dir)\n{\n\tbool isLowerHemisphere = dir.z < 0.0f;\n\tvec2 pyramid = toPyramid(dir);\n\tpyramid.x = isLowerHemisphere ? 1.0f-pyramid.x : pyramid.x; // Mirror X in the lower hemisphere\n\tfloat offset = isLowerHemisphere ? 0.5f : 0.0f;\n\tpyramid.x = pyramid.x * 0.5f + offset;\n\n\treturn pyramid;\n}\n\nvec3 fromRectOctahedral(vec2 uv)\n{\n\tbool isLowerHemisphere = uv.x >= 0.5f;\n\tuv.x *= 2.0f;\n\tuv.x -= isLowerHemisphere ? 1.0f : 0.0f;\n\tuv.x = isLowerHemisphere ? 1.0f-uv.x : uv.x;\n\tvec3 dir = fromPyramid(uv);\n\tdir.z = isLowerHemisphere ? -dir.z : dir.z;\n\treturn dir;\n}\n\nvec3 bilinear(vec3 r0, vec3 r1, vec3 r2, vec3 r3, vec2 t)\n{\n\tvec3 l0 = mix(r0, r1, t.x);\n\tvec3 l1 = mix(r2, r3, t.x);\n\treturn mix(l0, l1, t.y);\n}\n\n#define float2 vec2\n#define float3 vec3\nfloat rcp(float a) { return 1.0 / a; }\nvec2 mad(vec2 a, float b, float c) { return a * b + c; }\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\nfloat2 octahedralWrap( float2 v )\n{\n\tfloat2 result;\n\tresult.x = (1.0f - abs(v.y)) * (v.x >= 0.0f ? 1.0f : -1.0f);\n\tresult.y = (1.0f - abs(v.x)) * (v.y >= 0.0f ? 1.0f : -1.0f);\n\treturn result;\n}\n\nfloat2 toSquareOctahedral(float3 dir)\n{\n\tdir.xy = dir.xy * rcp( abs( dir.x ) + abs( dir.y ) + abs( dir.z ) );\n\tfloat2 results = dir.z >= 0.0f ? dir.xy : octahedralWrap( dir.xy );\n\tresults = mad(results, 0.5f, 0.5f);\n\treturn results;\n}\n\nfloat3 fromSquareOctahedral(float2 oct)\n{\n\toct = mad(oct, 2.0f, -1.0f);\n \n\t// https://twitter.com/Stubbesaurus/status/937994790553227264\n\tfloat3 n = float3(oct.x, oct.y, 1.0f - abs(oct.x) - abs(oct.y));\n\tfloat t = saturate( -n.z );\n\tn.x += n.x >= 0.0f ? -t : t;\n\tn.y += n.y >= 0.0f ? -t : t;\n\treturn normalize( n );\n}\n\nfloat2 texelWrap(float2 texel, float2 res)\n{\n    if(texel.y >= res.y)\n    {\n        texel.y = 2.0 * res.y - 1.0 - texel.y;\n        texel.x = res.x - 1.0 - texel.x;\n    }\n    else if(texel.y < 0.0)\n    {\n        texel.y = -1.0-texel.y;\n        texel.x = res.x - 1.0 - texel.x;\n    }\n    \n    if(texel.x >= res.x)\n    {\n        texel.x = 2.0 * res.x - 1.0 - texel.x;\n        texel.y = res.y - 1.0 - texel.y;\n    }\n    else if(texel.x < 0.0)\n    {\n        texel.x = -1.0-texel.x;\n        texel.y = res.y - 1.0 - texel.y;\n    }\n    \n    return texel;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    vec3 dir = vec3(\n        cos(uv.x * 2.0 * PI) * sin(uv.y * PI),\n        sin(uv.x * 2.0 * PI) * sin(uv.y * PI),\n        cos(uv.y * PI));\n    vec2 oct = toSquareOctahedral(dir);\n\n    vec2 res = vec2(16, 16);\n    vec2 ftexel = oct * res - 0.5f;\n    vec2 texel = floor(ftexel);\n    vec2 blend = fract(ftexel);\n    \n    vec3 s00 = fromSquareOctahedral(texelWrap(texel,res)/res);\n    vec3 s10 = fromSquareOctahedral(texelWrap(texel + vec2(1.0, 0.0), res)/res);\n    vec3 s01 = fromSquareOctahedral(texelWrap(texel + vec2(0.0, 1.0), res)/res);\n    vec3 s11 = fromSquareOctahedral(texelWrap(texel + vec2(1.0, 1.0), res)/res);\n\n    vec3 blended = bilinear(s00, s10, s01, s11, blend);\n\n    // Output to screen\n    fragColor = vec4(dir*0.5 + 0.5,1.0);\n    fragColor = vec4(blended*0.5+0.5, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}