{
    "Shader": {
        "info": {
            "date": "1605887040",
            "description": "Life experiments\nIdea is from https://michaelmoroz.github.io/Reintegration-Tracking/",
            "flags": 32,
            "hasliked": 0,
            "id": "tdtfRl",
            "likes": 0,
            "name": "Life experiments",
            "published": 3,
            "tags": [
                "cellular"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 FC )\n{\n    vec2 uv=FC/iResolution.xy;\n    vec3 px=vec3(1./iResolution.xy,0);\n    vec4 col;\n    for(float i=0.;i<R;i++){\n        for(float j=0.;j<R;j++){\n            vec2 ij = vec2(i,j);\n\t\t    col += texture(iChannel0,(floor((FC)/1.)+ij)/iResolution.xy);\n\t\t    //col = max(col,texture(iChannel0,(FC+ij)/iResolution.xy));\n        }\n    }\n    //if(length(col)>0.) fragColor = vec4(1.);\n    fragColor = col;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rnd(float x) {return fract(54321.987 * sin(987.12345 * x))*2.-1.;}\n\nvoid mainImage( out vec4 fragColor, in vec2 FC )\n{\n    vec2 uv = FC/iResolution.xy;\n    vec3 px = vec3(1./iResolution.xy,.0);\n    vec2 p,v,f=vec2(0.);\n    \n    // spawning cells\n    if(mod(float(iFrame),1000.)<=100.){\n        fragColor=vec4(0.);// `p` of 0. means empty cell\n        //if(mod(FC.x+.5,16.)==0. && mod(FC.y+.5,16.)==0.){\n        //if(rnd(uv.x*4.1+uv.y*9.01+iTime*.001)*.5+.5<.1){\n            if(length(uv-.5)<.05)\n            //fragColor=vec4(.5,.5,.5+.0*rnd(uv.x),.5+.0*rnd(uv.y));//.5 to place to the center\n            fragColor=vec4(.5,.5,.5,.5);\n        //}\n    //    return;\n    }\n    \n    // if noone enters the pixel remain empty\n    //fragColor.rgba = vec4(0.);\n    \n    // добавить тех, кто прилетит в пиксель\n    for(float i=-R;i<=R;i++){\n        for(float j=-R;j<=R;j++){\n            vec2 ij=vec2(i,j);\n            vec2 uv_n = uv+ij*px.xy; // uv of neighbour\n            if(uv_n!=fract(uv_n))continue; // on edge\n            vec4 neighbour=texture(iChannel0,uv_n);\n            if(length(neighbour)==0.)continue; // empty\n\n            p = neighbour.rg-ij; // `ij` because `p` is relative to current pixel\n            v = neighbour.ba*2.-1.;\n            \n            if(abs(i)*abs(j)>0.01) { // if not current cell\n                float dist = distance(fragColor.rg,p);\n                float target_dist = 2.;\n            \tf+=normalize(fragColor.rg-p)/dist*dist;\n            \t//f+=normalize(fragColor.rg-p)*(target_dist-dist)*.1;\n            }\n            \n            if(length(v)>max_speed)\n                v = max_speed*normalize(v);\n            p+=v;\n            \n            if(p.x<1. && p.y<1. && p.x>=0. && p.y>=0.){\n                fragColor.rg = p;\n                fragColor.ba = v*.5+.5;\n                //break;\n            }\n        }\n    }\n    \n    // косяк в том что я меняю скорость прилетевшей частицы\n    // а силу расчитываю для той, что была в текущем пикселе.\n    // Даже если её там не было.\n    \n    //Правильно так:\n    //Найти любого прилетуна. Если нет такого, стать нулём.\n    //    \n    //Вокруг прилетуна в t1 взять соседей в t1 и посмотреть, \n    //как они сейчас воздействуют на прилетуна.\n    //И юзать эту силу.\n    //    \n    //Или так ещё можно:\n    //Смотреть, куда сместятся текущие соседи с учётом их скоростей.\n    //И силу их силу воздействия на прилетуна в t2.\n    //    \n    //Но во втором варианте у нас могут прилететь новые клетки, \n    //мы не знаем, кто попадёт в клетки соседей в t2\n    //    \n    //Можно попробовать средний вариант без гарантии успеха. Но он простой)\n    //Прилетуна считаем в t2, а соседей в t1. Главное, чтобы прилетун в t1 не\n    //повлиял на прилетуна в t2. Должен ли влиять на него хозяин в t1?\n        \n    \n    \n        \n    if(length(fragColor)>0.){\n        v = fragColor.ba*2.-1.;\n        v += f/20.;\n        if(length(v)>max_speed) v = max_speed*normalize(v);\n        if(FC.x+v.x<=max_speed*10.) v.x=-abs(v.x);\n        if(FC.x+v.x>=iResolution.x-max_speed*10.) v.x=abs(v.x);\n        if(FC.y+v.y<=max_speed*10.) v.y=-abs(v.y);\n        if(FC.y+v.y>=iResolution.y-max_speed*10.) v.y=abs(v.y);\n        fragColor.ba = v*.5+.5;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R 3.\n#define max_speed 1.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}