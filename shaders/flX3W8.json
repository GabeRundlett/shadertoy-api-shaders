{
    "Shader": {
        "info": {
            "date": "1633704051",
            "description": "Hilbert Curves in 3d using the Skilling algorithm",
            "flags": 48,
            "hasliked": 0,
            "id": "flX3W8",
            "likes": 22,
            "name": "Hilbert Curves 3D",
            "published": 3,
            "tags": [
                "3d",
                "curve",
                "hilbert",
                "skilling"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////\n//\n// 3D Hilbert curves, raymarched. mla, 2021\n//\n// Uses algorithm of John Skilling, you can find his code at:\n// http://inference.org.uk/bayesys/test/hilbert.c\n// \n// The curve coordinates are computed in Buffer A, see there\n// for further details.\n//\n// Mouse/<up>/<down> moves viewpoint\n// keys 1-5 control the different recursion levels\n// 'a': turn on AA\n// 'r': autorotation\n//\n////////////////////////////////////////////////////////////////\n\nint lline;\n\nvec3 axestopoint(vec3 p, float s) {\n  p += 0.5;\n  p /= s;\n  return p;\n}\n\nfloat segment(vec3 p, vec3 a, vec3 b) {\n  vec3 pa = p - a;\n  vec3 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nivec4 getdata(int aindex) {\n  ivec2 uv = ivec2(aindex/int(iResolution.x),aindex%int(iResolution.x)).yx;\n  ivec4 data = floatBitsToInt(texelFetch(iChannel0,uv,0));\n  //ivec4 data = ivec4(texelFetch(iChannel0,uv,0));\n  return data;\n}\n\nfloat hdistance(vec3 z, int level) {\n  float lradius = 0.05*pow(0.45,float(level-1));\n  // z is in Â±1 box, so change to [0,1]\n  z = 0.5*(z+1.0);\n  float s = float (1<<level);\n  vec3 z1 = z*s-0.5;\n  z1 = clamp(z1,0.0,s-1.0);\n  // Find the nearest vertex in \"axes\" coordinates\n  vec3 axes = round(z1);\n  // Look up next and previous vertex on the curve\n  ivec4 data = getdata(fromvec(axes));\n  int line = data.y; // Segment index on curve\n  if (level == 5) lline = line;\n  int maxline = (1<<(3*level))-1;\n  // Don't need to check for line == 0, have done that in buffer.\n  // Get \"axes\" coordinates of next and previous points\n  vec3 axes1 = tovec(data.z);\n  vec3 axes2 = line == maxline ? axes : tovec(data.w);\n\n  // Convert three points to real coordinates\n  vec3 p = axestopoint(axes,s);\n  vec3 p1 = axestopoint(axes1,s);\n  vec3 p2 = axestopoint(axes2,s);\n  float d = 1e8;\n  // And check the distances to the two segments\n  d = min(d,segment(z,p,p1)-lradius);\n  d = min(d,segment(z,p,p2)-lradius);\n  return 2.0*d; // Double distance as we halved z\n}\n\nfloat de(vec3 z, out int type) {\n  float d = 1e8;\n  type = 0;\n  int maxlevel = BITS;\n  //maxlevel = min(int(ceil(mod(iTime,8.0))),maxlevel);\n#if 0\n  d = hdistance(z,maxlevel);\n  type = maxlevel-1;\n#else\n  for (int i = 1; i <= maxlevel; i++) {\n    if (key(CHAR_0+i)) continue;\n    float d1 = hdistance(z,i);\n    if (d1 < d) {\n      type = i-1;\n      d = d1;\n    }\n  }\n#endif\n  float k = max(abs(z.x),max(abs(z.y),abs(z.z)));\n  return max(d,k-1.0);\n}\n\nfloat de(vec3 z) {\n  int type;\n  return de(z,type);\n}\n\nfloat eyedist = 1.8;//1.0/(1.0+iTime);     // Distance of eye from origin\nvec3 light = vec3(0,2,1); // Light direction\nint numsteps = 200;       // Maximum raymarching steps\nfloat precis = 1e-4;      // Raymarching precision\nbool dorotate = true;\n\n\nvec3 getbackground(vec3 r) {\n  if (key(CHAR_B)) return vec3(0);\n  return pow(texture(iChannel1,r).xyz,vec3(2.2));\n  //return r; // Colourful fun\n  return vec3(0,0,0.1); // The more sober option.\n}\n\nvec3 getbasecolor(int type) {\n  if (key(CHAR_B)) {\n    //if (type == 4 && (lline-iFrame)%16 == 0) return vec3(1,0,0);\n    return vec3((float(BITS-type)-0.75)/float(3*BITS));\n  }\n  if (type == 0) return vec3(0.2);\n  if (type == 1) return vec3(1,0,0);\n  if (type == 2) return vec3(1,1,0);\n  if (type == 3) return vec3(0,1,0);\n  if (type == 4) return vec3(0.8);\n  if (type == 5) return vec3(0,0,1);\n  return vec3(1,0,1);\n}\n\nfloat march(vec3 q, vec3 r) {\n  float t = 0.01; // Total distance so far.\n  float maxdist = eyedist + 1.0;\n  for (int i = 0; i < numsteps; i++) {\n    //assert(i < 50);\n    vec3 p = q+t*r;\n    float d = de(p);\n    if (abs(d) < precis) return t;\n    // Reduce distance estimate when further away to avoid overstepping\n    t += d;\n    // We might go backwards!\n    if (t < 0.0 || t > maxdist) break;\n  }\n  return -1.0;\n}\n\n// Get the normal of the surface at point p.\nvec3 getnormal0(vec3 p, float t) {\n  float eps = 1e-4;\n  vec2 e = vec2(eps,0);\n  return normalize(vec3(de(p + e.xyy) - de(p - e.xyy),\n                        de(p + e.yxy) - de(p - e.yxy),\n                        de(p + e.yyx) - de(p - e.yyx)));\n}\n\n// Get the normal of the surface at point p.\nvec3 getnormal(vec3 p, float t) {\n  float eps = 1e-4;\n  vec2 e = vec2(eps,0);\n  float k = de(p);\n  return normalize(vec3(de(p + e.xyy) - k,\n                        de(p + e.yxy) - k,\n                        de(p + e.yyx) - k));\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\n// Rotate according to mouse position\nvec3 transformframe(vec3 p) {\n  if (iMouse.x > 0.0) {\n    // Full range of rotation across the screen.\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  // autorotation\n  if (dorotate) {\n      float t = iTime;\n      p.yz = rotate(p.yz,-t*0.05);\n      p.zx = rotate(p.zx,-t*0.05);\n  }\n  return p;\n}\n\n// Follow ray from q, direction r.\nvec3 raycolor(vec3 q, vec3 r) {\n  vec3 bg = getbackground(r);\n  float t = march(q,r);\n  if (t < 0.0) return bg;\n  vec3 p = q+t*r;\n  vec3 normal = getnormal(p,t);\n  int type = 0;\n  de(p,type);\n  vec3 color = getbasecolor(type);\n  float ambient = 0.3;\n  vec3 lightdir = normalize(light);\n  float diffuse = 0.7*clamp(dot(normal,lightdir),0.0,1.0);\n  color *= ambient+ diffuse;\n    if (!key(CHAR_S)) {\n    float specular = pow(max(0.0,dot(reflect(lightdir,normal),r)),4.0);\n    color += specular;\n  }\n  //if (key(CHAR_F)) color = mix(color,getbackground(r),clamp(t/(2.0+eyedist),0.0,1.0));\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n  int AA = key(CHAR_A) ? 2 : 1;\n  dorotate = !key(CHAR_R);\n  eyedist += (0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  vec3 eye = vec3(0,0,eyedist);\n  eye = transformframe(eye);\n  light = transformframe(light);\n  vec3 col = vec3(0);\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 z = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n      vec3 ray = vec3(z,-2);\n      ray = transformframe(ray);\n      ray = normalize(ray);\n      col += raycolor(eye,ray);\n    }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.4545)); // Gamma\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Code from John Skilling, I've left his comments in for reference.\n// http://inference.org.uk/bayesys/test/hilbert.c\n// I (mla) have changed code to use a plain integer for the \"line number\"\n// & made a few stylistic changes. Since we just use this to populate\n// BufferA, it's not especially time-critical & is fairly performant anyway.\n////////////////////////////////////////////////////////////////////////////////\n\n// Original header, copyright etc.\n//\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Filename:  hilbert.c\n// \n// Purpose:   Hilbert and Linked-list utility procedures for BayeSys3.\n// \n// History:   TreeSys.c   17 Apr 1996 - 31 Dec 2002\n//            Peano.c     10 Apr 2001 - 11 Jan 2003\n//            merged       1 Feb 2003\n//            Arith debug 28 Aug 2003\n//            Hilbert.c   14 Oct 2003\n//                         2 Dec 2003\n//-----------------------------------------------------------------------------\n/*\n    Copyright (c) 1996-2003 Maximum Entropy Data Consultants Ltd,\n                            114c Milton Road, Cambridge CB4 1XE, England\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n#include \"license.txt\"\n*/\n\nvoid   LinetoTranspose(out ivec3, int, int);\nint    TransposetoLine(const ivec3, int);\nvoid   TransposetoAxes(inout ivec3, int);\nvoid   AxestoTranspose(inout ivec3, int);\n\n//=============================================================================\n//              Hilbert-curve (a space-filling Peano curve) library\n//=============================================================================\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Functions: LinetoAxes\n//            AxestoLine\n//\n// Purpose:   Serial Hilbert length  <---->   multidimensional Axes position.\n//\n//   Space  = n-dimensional hypercube of side R = 2^b\n//            Number of cells = N = R^n = 2^(n*b)\n//\n//   Line   = serial number of cell along Hilbert curve through hypercube\n//          = extended integer of n*b bits ranging from 0 to N-1,\n//            stored as vector of n unsigned b-bit integers with [0] high.\n//\n//   Axes   = Geometrical position of cell\n//          = n b-bit integers representing coordinates.\n//\n// Example:   side R = 16, dimension n = 2, number of cells = N = 256.\n//            Line = 9, stored in base-16 words as\n//                   Line[0] = 0 (high),   Line[1] = 9 (low),\n//            corresponds to position (2,3) as in diagram, stored as\n//                   Axes[0] = 2,   Axes[1] = 3.\n// \n//        |\n//     15 |    @---@   @---@   @---@   @---@   @---@   @---@   @---@   @---@\n//        |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n//        |    @   @---@   @   @   @---@   @   @   @---@   @   @   @---@   @\n//        |    |           |   |           |   |           |   |           |\n//        |    @---@   @---@   @---@   @---@   @---@   @---@   @---@   @---@\n//        |        |   |           |   |           |   |           |   |    \n//        |    @---@   @---@---@---@   @---@   @---@   @---@---@---@   @---@\n//        |    |                           |   |                           |\n//        |    @   @---@---@   @---@---@   @   @   @---@---@   @---@---@   @\n//        |    |   |       |   |       |   |   |   |       |   |       |   |\n// Axes[1]|    @---@   @---@   @---@   @---@   @---@   @---@   @---@   @---@\n//        |            |           |                   |           |        \n//        |    @---@   @---@   @---@   @---@   @---@   @---@   @---@   @---@\n//        |    |   |       |   |       |   |   |   |       |   |       |   |\n//        |    @   @---@---@   @---@---@   @---@   @---@---@   @---@---@   @\n//        |    |                                                           |\n//        |    @---@   @---@---@   @---@---@   @---@---@   @---@---@   @---@\n//        |        |   |       |   |       |   |       |   |       |   |    \n//        |    @---@   @---@   @---@   @---@   @---@   @---@   @---@   @---@\n//        |    |           |           |           |           |           |\n//        |    @   @---@   @   @---@   @---@   @---@   @---@   @   @---@   @\n//        |    |   |   |   |   |   |       |   |       |   |   |   |   |   |\n//        |    @---@   @---@   @   @---@---@   @---@---@   @   @---@   @---@\n//        |                    |                           |                \n//      3 |    5---6   9---@   @   @---@---@   @---@---@   @   @---@   @---@\n//        |    |   |   |   |   |   |       |   |       |   |   |   |   |   |\n//      2 |    4   7---8   @   @---@   @---@   @---@   @---@   @   @---@   @\n//        |    |           |           |           |           |           |\n//      1 |    3---2   @---@   @---@   @---@   @---@   @---@   @---@   @---@\n//        |        |   |       |   |       |   |       |   |       |   |    \n//      0 |    0---1   @---@---@   @---@---@   @---@---@   @---@---@   @--255\n//        |\n//         -------------------------------------------------------------------\n//             0   1   2   3          ---> Axes[0]                         15\n//\n// Notes: (1) Unit change in Line yields single unit change in Axes position:\n//            the Hilbert curve is maximally local.\n//        (2) CPU proportional to total number of bits, = b * n.\n//\n// History:   John Skilling  20 Apr 2001, 11 Jan 2003, 3 Sep 2003\n//-----------------------------------------------------------------------------\n//\n\nivec3 LinetoAxes(int n,    // I    linear serial number, stored as     [n] \n                 int b)    // I    # bits used in each word\n{\n  ivec3 Axes;\n  LinetoTranspose(Axes, n, b);\n  TransposetoAxes(Axes,       b);\n  return Axes;\n}\n\nint AxestoLine(const ivec3 Axes,  // I    multidimensional geometrical axes   [n]\n               int b)             // I    # bits used in each word\n{\n  ivec3 tmp = Axes, Line;\n  AxestoTranspose(      tmp, b);\n  return TransposetoLine(tmp, b);\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Functions: LinetoTranspose\n//            TransposetoLine\n//\n// Purpose:   Recover Hilbert integer by bit-transposition\n//\n// Example:   b=5 bits for each of n=3 coordinates\n//               15-bit Hilbert integer = A B C D E a b c d e 1 2 3 4 5\n//                                        X[0]..... X[1]..... X[2].....\n//            transposed to\n//               X[0](high) = A D b e 3\n//               X[1]       = B E c 1 4\n//               X[2](low)  = C a d 2 5\n//                            high  low\n//\n// History:   John Skilling  20 Apr 2001, 3 Sep 2003, 14 Oct 2003\n//-----------------------------------------------------------------------------\n//\n// A B C D E\n// a b c d e\n// 1 2 3 4 5\n//\n// A D b e 3\n// B E c 1 4\n// C a d 2 5\n\nvoid LinetoTranspose(out ivec3 X,   //   O  Transpose        [n]\n                     int n,         // I    Hilbert integer  [n] \n                     int b)         // I    # bits\n{\n  X = ivec3(0);\n  int p = 1 << (b-1);\n  for(int k = b; k > 0; k--) {\n    int t = 1<<(3*k-1);\n    if( (n & t) != 0 ) X[0] |= p;\n    if( (n & (t>>1)) != 0 ) X[1] |= p;\n    if( (n & (t>>2)) != 0 ) X[2] |= p;\n    p >>= 1;\n  }\n}\n\nint TransposetoLine(const ivec3 X, // I    Transpose        [n]\n                    int b)         // I    # bits\n{\n  int p = 1 << (b-1);\n  int n = 0;\n  for(int k = b; k > 0; k--) {\n    int t = 1<<(3*k-1);\n    if( (X[0] & p) != 0 ) n |= t;\n    if( (X[1] & p) != 0 ) n |= (t>>1);\n    if( (X[2] & p) != 0 ) n |= (t>>2);\n    p >>= 1;\n  }\n  return n;\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// Functions: TransposetoAxes\n//            AxestoTranspose\n//\n// Purpose:   Transform between Hilbert transpose and geometrical axes\n//\n// Example:   b=5 bits for each of n=3 coordinates\n//            Hilbert transpose\n//             X[0] = A D b e 3                  X[1]|  \n//             X[1] = B E c 1 4    <------->         |  /X[2]\n//             X[2] = C a d 2 5                axes  | /\n//                    high  low                      |/______\n//                                                         X[0]\n//            Axes are stored conventially as b-bit integers.\n//         \n// History:   John Skilling  20 Apr 2001, 3 Sep 2003, 14 Oct 2003\n//-----------------------------------------------------------------------------\n//\n\nvoid TransposetoAxes(inout ivec3 X,        // I O  position   [n]\n                     int      b)           // I    # bits\n{\n  // Gray decode by  H ^ (H/2)\n  int t = X[N-1] >> 1;\n  for(int i = N-1; i != 0; i-- ) X[i] ^= X[i-1];\n  X[0] ^= t;\n\n  // Undo excess work\n  for (int k = 1; k < b; k++) {\n    int Q = 1 << k;\n    for(int i = N-1; i != 0; i-- ) {\n      t = Q-1;\n      if ( (X[i] & Q) == 0 ) {\n        t &= X[0] ^ X[i];\n        X[i] ^= t;\n      }\n      X[0] ^= t;\n    }\n    if( (X[0] & Q) != 0 ) X[0] ^= Q-1;                                  // invert\n  }\n} \n\nvoid AxestoTranspose(inout ivec3 X,      // I O  position   [n]\n                     int      b)         // I    # bits\n{\n  // Inverse undo\n  for(int k = b-1; k > 0; k--) {\n    int Q = 1 << k;\n    if( (X[0] & Q) != 0 ) X[0] ^= Q-1;                                  // invert\n    for( int i = 1; i < N; i++ ) {\n      int t = Q-1;\n      if ( (X[i] & Q) == 0 ) {\n        t &= X[0] ^ X[i];\n        X[i] ^= t;\n      }\n      X[0] ^= t;\n    }\n  }\n  int t;\n  // Gray encode (inverse of decode)\n  for(int i = 1; i < N; i++ ) X[i] ^= X[i-1];\n  t = X[N-1];\n  for(int i = 1; i < b; i <<= 1 ) X[N-1] ^= X[N-1] >> i;\n  t ^= X[N-1];\n  for(int i = N-2; i >= 0; i-- ) X[i] ^= t;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// End of John Skilling code\n////////////////////////////////////////////////////////////////////////////////\n\nivec4 getdata(int n) {\n  assert(n <= MAXLINE);\n  ivec3 axes = toivec(n);\n  int line = AxestoLine(axes,BITS);\n  // Get the previous and next vertices on the curve. If we are at\n  // an end of the curve, just use the vertex itself.\n  ivec3 axes1 = line == 0 ? axes : LinetoAxes(line-1,BITS);\n  ivec3 axes2 = line == MAXLINE ? axes : LinetoAxes(line+1,BITS);\n  return ivec4(n,line,fromivec(axes1),fromivec(axes2));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  // Just compute curve on first frame - doesn't speed\n  // things up much in fact, so didn't use.\n  //fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n  //if (iFrame != 0) return;\n  fragCoord = floor(fragCoord);\n  // Linear index of location\n  int n = int(fragCoord.y*iResolution.x + fragCoord.x);\n  if (n > MAXLINE) return;\n  fragColor = intBitsToFloat(getdata(n));\n  //fragColor = vec4(getdata(n));\n  }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst float PI = 3.1415927;\n\nconst int N = 3; // Number of dimensions\nconst int BITS = 5; // Max number of bits\nconst int MAXLINE = (1<<(3*BITS))-1;\n\n// Convert to and from packed representation\nivec3 toivec(int n) {\n  int b = BITS, s = 1<<b;\n  return ivec3(n>>(2*b),(n>>b)&(s-1),n&(s-1));\n}\n\nvec3 tovec(int n) {\n  int b = BITS, s = 1<<b;\n  return vec3(n>>(2*b),(n>>b)&(s-1),n&(s-1));\n}\n\nint fromivec(ivec3 line) {\n  int b = BITS;\n  return (line[0]<<(2*b))|(line[1]<<b)|line[2];\n}\n\nint fromvec(vec3 line) {\n  return fromivec(ivec3(line));\n}\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n// Macros for use in \"common\" blocks.\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  } else if (i == 1) {\n    if (j == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (j == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}