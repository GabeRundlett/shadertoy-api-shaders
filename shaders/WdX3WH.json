{
    "Shader": {
        "info": {
            "date": "1545950795",
            "description": "Use your mouse to look around .A variation of my previous \"endless chessboard\" shader.\n\nhttps://www.shadertoy.com/view/Wdf3D8",
            "flags": 0,
            "hasliked": 0,
            "id": "WdX3WH",
            "likes": 3,
            "name": "chess hydraulic press",
            "published": 3,
            "tags": [
                "mouse",
                "endless",
                "loop",
                "checker",
                "rotation",
                "perspective",
                "double",
                "chess",
                "chessboard",
                "hydraulic",
                "press"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "#define SCALE 5.0\n\n#define EDGE_SHARPNESS 20000.0\n\n#define AIR_PERSPECTIVE 2.0\n\nvec2 toCanonicalCoordinates(vec2 pixel) {\n    return (pixel -.5 * iResolution.xy) / iResolution.y;\n}\n\nmat2 rotate2d(float angle){\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n}\n\nfloat getChessboardLuminance(vec2 point) {\n    float value =\n        (1.0 - pow(sin(point.x), EDGE_SHARPNESS))\n        * sign(cos(point.x));\n    value *=\n        (1.0 - pow(sin(point.y), EDGE_SHARPNESS))\n        * sign(cos(point.y));\n    return (value + 1.0) / 2.0;    \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 point = toCanonicalCoordinates(fragCoord);\n    vec2 mouse = toCanonicalCoordinates(iMouse.xy);\n    point += vec2(0, mouse.y);\n    point *= rotate2d(sin(iTime * 0.9) * 0.2);\n    vec2 trans = vec2(point.x / point.y, 1.0 / point.y);\n    trans *= rotate2d(mouse.x);\n    // double press effect\n    trans *= SCALE + (sin(iTime) * 0.9 * SCALE);\n    \n\tfloat luminance = getChessboardLuminance(trans);\n\n    // apply air perspective\n    luminance *= pow(abs(point.y * 2.0), AIR_PERSPECTIVE);\n    fragColor = vec4(vec3(luminance),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}