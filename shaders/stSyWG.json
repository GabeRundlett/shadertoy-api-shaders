{
    "Shader": {
        "info": {
            "date": "1650198608",
            "description": "sample code\nraymarching diagram, ray direction is parametrized by the mouse position\nblue line: ray, red point: reference point, yellow circle: neighborhood",
            "flags": 0,
            "hasliked": 0,
            "id": "stSyWG",
            "likes": 2,
            "name": "8_5_raymarching",
            "published": 3,
            "tags": [
                "ch8"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "float circleSDF(vec2 p, vec2 c, float r){\n    return length(p - c) - r;\n}\nfloat contour(float v){\n    return step(abs(v), 0.002);\n}\nfloat point(vec2 p, vec2 c){\n    return step(length(p-c), 0.01);\n}\nfloat line(vec2 p, vec2 c, vec2 d){\n    return step(abs(dot(p - c, vec2(-d.y, d.x))), 0.002);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 pos = (2.0 * fragCoord.xy -iResolution.xy)/ iResolution.yy;\n    vec2 cPos = vec2(-0.5, 0.0);    //camera position\n    vec2 oPos = vec2(1.0, 0.0); //object position\n    vec2 ray = oPos - cPos;\n    ray.y +=  2.0 * iMouse.y / iResolution.y - 1.0;\n    ray = normalize(ray);\n    float rad = 0.8;\n    vec2 rPos = cPos;\n    fragColor.rgb = contour(circleSDF(pos, oPos, rad)) * vec3(1);    //draw circle of object\n    fragColor.rgb += line(pos, cPos, ray) * vec3(0,0,1);  //draw line\n    for (int i = 0; i < 50; i++){\n        fragColor.rgb += point(pos, rPos) * vec3(1.0, 0.0, 0.0);  //plot ray position\n        float dist = circleSDF(rPos, oPos, rad);\n        if (dist < 0.01){\n            break;\n        }\n        fragColor.rgb += contour(circleSDF(pos, rPos, dist)) * vec3(0.5, 0.5, 0.0);     //draw circle with radius of SDF value\n        rPos += dist * ray;\n        if (rPos.x > oPos.x + rad){\n            break;\n        }\n    }\n    fragColor.a = 1.0;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}