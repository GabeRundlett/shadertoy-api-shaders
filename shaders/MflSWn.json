{
    "Shader": {
        "info": {
            "date": "1705222352",
            "description": "Voronoi with cell centers that move across the screen",
            "flags": 0,
            "hasliked": 0,
            "id": "MflSWn",
            "likes": 3,
            "name": "Shifting voronoi",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "ikucha",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "vec2 hash22(vec2 p)\n{\n\treturn fract(235673.23456*sin(1346.23456*vec2(dot(p, vec2(1.2346, 2.)), dot(p, vec2(3.2346,4.23465537)))));\n}\nfloat hash11(float n){\n    return fract(23467.2346*sin(13456.1346*n));\n}\n\n//returns the [0,1]^2 position of the center of the voronoi cell, v must be an integer vector index\nvec2 centerPositionOffset(vec2 v){\n    return hash22(v);\n}\n\n//index is the index of the tile where the cell originally came from and cellpos is the\n//current position\nstruct cellInfo{\n    vec2 index;\n    vec2 cellPos;\n};\n/*\n    All cells are divided into staircase chains, better visible if you\n    use the debug line at the bottom. We want to animate the cells, but for \n    the voronoi algorithm we need to check a small amount of cells that are \n    close by. To do this we move the cells in a staircase pattern and what \n    we need to do it determine, for each time, which cell currently \n    corresponds to this tile (so the index) and also where that cell is \n    currently located (cellPos). The fact that the tiles are located in this way\n    guarantees that we can go through all of them with the voronoi algorithm \n    (although we need to go through a 5by5 square instead of the usual 3by3). \n    The voronoi cell that currently corresponds to the current tile is the \n    one that is currently entering in from the top/bottom/left/right and we \n    use a bit of maths to determine which tile it originally\n    came from (so where it was located at iTime==0)\n*/\ncellInfo staircase(vec2 p){\n    vec2 i = floor(p);\n    float dif = i.x-i.y;\n    float rem = mod(dif, 2.);\n    float rowi = (dif-rem)/4.;\n    float time = iTime;\n    time*=sign(2.*hash11(rowi)-1.);\n    time+=hash11(rowi);\n    //time*= (2.*hash11(rowi+0.6)-1.)*1.3;\n    float timei = floor(time);\n    float timef = fract(time);\n    float timeRem = mod(timei, 2.);\n    timef = smoothstep(1.,0.,timef);\n    \n    vec2 index = i+mix(vec2(1.,0.),vec2(0.,1.),rem)+(timei-timeRem)/2.+timeRem*mix(vec2(0.,1.),vec2(1.,0.),rem);\n    return cellInfo(index, i+centerPositionOffset(index)+mix(vec2(timef,0.),vec2(0.,timef),rem));\n    /*\n    if(rem == 1.){\n        vec2 index = i+vec2(0.,1.)+vec2((timei - timeRem)/2.)+timeRem*vec2(1.,0.);\n        return cellInfo(index, i+centerPositionOffset(index)+vec2(0., 1.-timef));\n    }\n    if(rem == 0.){\n        vec2 index = i+vec2(1.,0.)+vec2((timei - timeRem)/2.)+timeRem*vec2(0.,1.);\n        return cellInfo(index, i+centerPositionOffset(index)+vec2(1.-timef, 0.));\n    }\n    */\n}\n\n//returns the coords of the nearest cell\nvec2 voronoi(vec2 p){\n    vec2 nearestCell = vec2(0.);\n    vec2 nearestCellIndex = vec2(0.);\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    float minDist = 100.;\n    for(float x = -2.; x<=2.; x++){\n        for(float y = -2.; y<=2.; y++){\n            cellInfo currentCellInfo = staircase(i+vec2(x,y));\n            vec2 currentCell = currentCellInfo.cellPos;\n            float currentDist = length(p-currentCell);\n            if(currentDist<minDist){\n                nearestCell = currentCell;\n                minDist = currentDist;\n                nearestCellIndex = currentCellInfo.index;\n            }\n        }\n    }\n    return nearestCellIndex;\n}\n\n//debug function to see where the cell centers are\nvec2 circles(vec2 p){\n    vec2 i = floor(p);\n    for(float x = -2.; x<=2.; x++){\n        for(float y = -2.; y<=2.; y++){\n            cellInfo currentCellInfo = staircase(i+vec2(x,y));\n            if(length(p-currentCellInfo.cellPos)<0.3){\n                return vec2(0.,0.);\n            }\n        }\n    }\n    return vec2(1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    uv*=10.;\n    vec3 col;\n    col = vec3(hash22(voronoi(uv)), 0.);\n    \n    //uncomment to see where the cell centers are\n    //col = vec3(circles(uv), 0.);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}