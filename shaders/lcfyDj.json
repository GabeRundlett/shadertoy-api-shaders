{
    "Shader": {
        "info": {
            "date": "1721655692",
            "description": "Ref - https://x.com/cmzw_/status/1787147460772864188 (celestianmaze)\n\nBlack Hole",
            "flags": 0,
            "hasliked": 0,
            "id": "lcfyDj",
            "likes": 24,
            "name": "BlackHole (swirl, portal)",
            "published": 3,
            "tags": [
                "swirl",
                "blackhole",
                "portal",
                "hole"
            ],
            "usePreview": 0,
            "username": "misterprada",
            "viewed": 853
        },
        "renderpass": [
            {
                "code": "// Ref - https://x.com/cmzw_/status/1787147460772864188 (celestianmaze)\n\nvec4 permute_3d(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\nvec4 taylorInvSqrt3d(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat simplexNoise3d(vec3 v)\n{\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 );\n    vec4 p = permute_3d( permute_3d( permute_3d( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt3d(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fbm3d(vec3 x, const in int it) {\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100);\n\n    \n    for (int i = 0; i < 32; ++i) {\n        if(i<it) {\n            v += a * simplexNoise3d(x);\n            x = x * 2.0 + shift;\n            a *= 0.5;\n        }\n    }\n    return v;\n}\n\nvec3 rotateZ(vec3 v, float angle) {\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    return vec3(\n        v.x * cosAngle - v.y * sinAngle,\n        v.x * sinAngle + v.y * cosAngle,\n        v.z\n    );\n}\n\nfloat facture(vec3 vector) {\n    vec3 normalizedVector = normalize(vector);\n\n    return max(max(normalizedVector.x, normalizedVector.y), normalizedVector.z);\n}\n\nvec3 emission(vec3 color, float strength) {\n    return color * strength;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) and (from -1 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n\n    vec3 color = vec3(uv.xy, 0.0);\n    color.z += 0.5;\n    \n    color = normalize(color);\n    color -= 0.2 * vec3(0.0, 0.0, iTime);\n    \n    float angle = -log2(length(uv)); // log base 0.5\n    \n    color = rotateZ( color, angle );\n    \n    float frequency = 1.4;\n    float distortion = 0.01;\n    color.x = fbm3d(color * frequency + 0.0, 5) + distortion;\n    color.y = fbm3d(color * frequency + 1.0, 5) + distortion;\n    color.z = fbm3d(color * frequency + 2.0, 5) + distortion;\n    vec3 noiseColor = color; // save\n    \n    noiseColor *= 2.0;\n    noiseColor -= 0.1;\n    noiseColor *= 0.188;\n    noiseColor += vec3(uv.xy, 0.0);\n    \n    float noiseColorLength = length(noiseColor);\n    noiseColorLength = 0.770 - noiseColorLength;\n    noiseColorLength *= 4.2;\n    noiseColorLength = pow(noiseColorLength, 1.0);\n    \n    \n    vec3 emissionColor = emission(vec3(0.961,0.592,0.078), noiseColorLength * 0.4);\n    \n    \n    float fac = length(uv) - facture(color + 0.32);\n    fac += 0.1;\n    fac *= 3.0;\n    \n    color = mix(emissionColor, vec3(fac), fac + 1.2);\n    \n    //color = mix(color, vec3(0), fac); // black style\n\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}