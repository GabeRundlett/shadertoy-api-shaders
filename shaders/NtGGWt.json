{
    "Shader": {
        "info": {
            "date": "1638490627",
            "description": "a bit dizzying but the effects interesting",
            "flags": 0,
            "hasliked": 0,
            "id": "NtGGWt",
            "likes": 9,
            "name": "Noise Blur ",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    float sc = 32.;\n    \n    uv *= 1.5;\n    uv.x += cos(0.01 * uv.y + 0.5 * iTime) * thc(12., -0.3 * iTime + 0.1 * h21(uv));// + thc(1., 6. * length(uv) - iTime);\n    uv.y += sin(0.01 * uv.x + 0.5 * iTime) * ths(12., -0.3 * iTime + 0.1 * h21(uv));\n    \n    vec2 ipos = floor(sc * uv)/sc + 0.;\n    \n    float a = atan(ipos.y, ipos.x);\n    float r = length(ipos);\n    r = log(r) + 0.4 * thc(3.,4. * r + iTime);\n\n    float sc2 = 3. + 2. * cos(3. * a + iTime);\n    \n    \n    float val = 5. * r + a + iTime;\n    vec2 fpos = fract(vec2(thc(1., val), ths(1.,val)) + sc2 * ipos) - 0.5;\n    \n    float d = length(fract(thc(4.,a + iTime) * fpos) - 0.5);\n    float rd = 1. + thc(1., a + 4. * r - iTime);\n    float k = 0.4;\n    float s = 1.-smoothstep(-k,k,rd-d);  \n    //s -= step(d, 0.2 * rd);\n    s = clamp(4. * s * s, 0., 1.);\n    \n    fpos = fract(sc * uv) - 0.5;\n    \n    d = mlength(fpos);\n    rd = min(0.45, 0.1 * thc(40., r + 1.5 * h21(ipos) + iTime) + 0.4 * s);\n    rd *= step(0.11, rd);\n    float s2 = step(d, rd) - smoothstep(-0.5,0.5, rd -d);\n    s2 = clamp(5. * s2 * s2, 0., 1.);\n    s *= 2. * pow(1.-length(uv),4.);\n    vec3 col = s2 * pal(s +10.* h21(ipos) + iTime, vec3(1.), vec3(1.), vec3(1.), vec3(0.,0.33,0.66));\n    \n\n\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}