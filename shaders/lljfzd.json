{
    "Shader": {
        "info": {
            "date": "1516917918",
            "description": " ",
            "flags": 32,
            "hasliked": 0,
            "id": "lljfzd",
            "likes": 12,
            "name": "mrshmllwppsRbbdFrPlsre",
            "published": 3,
            "tags": [
                "feedback",
                "colorshifting",
                "shaderclub"
            ],
            "usePreview": 1,
            "username": "jrsa",
            "viewed": 787
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    if (iMouse.z > 1.0 || iFrame < 10) {\n        // draw an image to start the process\n    \tfragColor = texture(iChannel1, uv);\n    } else {\n        // use input red and blue as midpoints of scaling operation\n        vec2 center = texture(iChannel0, uv).rb; \n        uv -= center;\n        uv *= mat2(0.999, 0.0, 0.0, 1.001);\n        uv += center;\n                \n        // get another input texel, displaced by scaling above\n    \tfragColor = texture(iChannel0, uv);\n        \n        // set green channel to magnitude of red and blue (of displaced input)\n        fragColor.g = mod(3.4 * length(fragColor.rb), 0.5) + 0.5;\n        \n        // shift blue by magnitude of vector used to offset scaling matrix\n        // (actual red and blue input, before displacement)\n        fragColor.b = mod(fragColor.b + (length(center) / 1000.0), 1.0);\n        \n        // shift red by rgb magnitude of displaced input\n        fragColor.r = mod(fragColor.r + (length(fragColor.rgb) / 1000.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}