{
    "Shader": {
        "info": {
            "date": "1511108659",
            "description": " Cannot hope to compete with the Canaletto-like detail and Turner-like atmospherics of the\n much-missed \"Tower of Light\" shader, hopefully soon to return, but here is a quick mashup based\n on stuff from some earlier shaders (mouseable).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XtfBz4",
            "likes": 16,
            "name": "Lightweight Lighthouse",
            "published": 3,
            "tags": [
                "voronoi",
                "raymarch",
                "ocean",
                "rocks",
                "architecture"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 2760
        },
        "renderpass": [
            {
                "code": "// \"Lightweight Lighthouse\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nfloat dstFar, tCur, tWav, tCloud, bmAng, bmHt, twBase, twRad;\nint idObj;\nconst int idTwr = 1, idWfrm = 2, idTtop = 3, idFlr = 4, idLmp = 5, idBm = 6, idGrnd = 7;\nconst float pi = 3.14159;\n\n#define TOWER_DIAM  (twRad - (0.05 + 0.25 * (step (q.y, - twBase))) * (q.y + twBase))\n\nfloat ObjDf (vec3 p)\n{\n  vec4 vc;\n  vec3 q;\n  float dMin, d, a, r, h, db, dw, ww;\n  dMin = dstFar;\n  q = p;  q.y -= twBase + 4.;\n  r = TOWER_DIAM;\n  d = PrCylAnDf (q.xzy, r, 0.2, 8.);\n  dw = PrCylAnDf (q.xzy, r + 0.1, 0.3, 8.);\n  db = 6. - abs (q.y - 2.);\n  a = (length (q.xz) > 0.) ? atan (q.z, - q.x) : 0.;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (5. * a / (2. * pi) + 0.5) / 5.));\n  q.y = mod (q.y + 1.2, 3.) - 1.5;\n  ww = 0.5;\n  d = 0.9 * max (d, - max (min (PrBox2Df (q.zy, vec2 (ww)), length (vec2 (q.z, q.y - ww)) - ww), - db));\n  if (d < dMin) { dMin = d;  idObj = idTwr; }\n  dw = 0.9 * max (dw, max (- db, max (min (PrBox2Df (q.zy, vec2 (ww + 0.05)),\n     length (vec2 (q.z, q.y - ww - 0.05)) - ww - 0.05), - min (PrBox2Df (q.zy, vec2 (ww - 0.05)),\n     length (vec2 (q.z, q.y - ww + 0.05)) - ww + 0.05))));\n  if (dw < dMin) { dMin = dw;  idObj = idWfrm; }\n  q.y = mod (p.y - 5.5, 3.) - 1.5;\n  d = max (PrCylDf (q.xzy, twRad - 0.4, 0.05), - db);\n  if (d < dMin) { dMin = d;  idObj = idFlr; }\n  q = p;  q.y -= bmHt;\n  d = PrCylAnDf (q.xzy, twRad - 0.5, 0.2, 1.);\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (20. * a / (2. * pi) + 0.5) / 20.));\n  d = max (d, - PrBox2Df (q.zy, vec2 (0.3, 0.75)));\n  q = p;  q.y = abs (q.y - bmHt) - 1.1;\n  d = min (d, PrCylDf (q.xzy, twRad + 0.1, 0.1));\n  if (d < dMin) { dMin = d;  idObj = idTtop; }\n  q = p;  q.y -= bmHt;\n  q.xz = Rot2D (q.xz, bmAng);\n  d = PrCylAnDf (q, 0.8, 0.03, 0.21);\n  if (d < dMin) { dMin = d;  idObj = idLmp; }\n  d = PrCylDf (q, 0.77, 0.2);\n  if (d < dMin) { dMin = d;  idObj = idBm; }\n  if (PrCylDf ((p + vec3 (0., -2., 0.)).xzy, 10., 2.) < dMin) {\n    vc = HexVor (0.5 * p.xz);\n    h = 1.5 * max (SmoothMin (0.6, SmoothMax (0., vc.x, 0.6), 0.3) *\n       (1. + vc.w) * (1. - dot (vc.yz, vc.yz)), 0.) + 3.;\n    d = 0.5 * (p.y - h * (1. - 0.01 * dot (p.xz, p.xz)));\n    if (d < dMin) { dMin = d;  idObj = idGrnd; }\n  }\n  return dMin;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;  q.y -= 8.;\n  d = PrCylDf (q.xzy, TOWER_DIAM, 8.);\n  q.y -= 9.;\n  d = min (d, PrCylDf (q.xzy, twRad - 0.5, 1.));\n  dMin = min (dMin, d);\n  \n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 60; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 TransObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (TransObjDf (p + e.xxx), TransObjDf (p + e.xyy), TransObjDf (p + e.yxy), TransObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, sunCol, p;\n  float ds, fd, att, attSum, d, sd, a;\n  rd.y = abs (rd.y);\n  a = atan (rd.x, - rd.z);\n  if (rd.y < 0.02 * Fbm1 (32. * a) + 0.005) {\n     col = mix (0.5 * vec3 (0.4, 0.5, 0.7), vec3 (0.6, 0.4, 0.4),\n        0.5 + 0.5 * dot (normalize (rd.xz), - normalize (sunDir.xz))) * (1. - 0.3 * Fbm2 (128. * vec2 (a, rd.y)));\n  } else {\n    p = rd * (100. - ro.y) / rd.y;\n    p.xz += tCloud * vec2 (1.);\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;\n    p.xz += 0.1 * tCur;\n    att = Fbm2 (p.xz);\n    attSum = att;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    attSum *= 0.3;\n    att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n    sunCol = vec3 (1., 0.8, 0.7) * pow (sd, 1024.) +\n       vec3 (1., 0.4, 0.2) * pow (sd, 256.);\n    col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n       max (rd.y - 0.1, 0.))) + 0.3 * sunCol;\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  }\n  return col;\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 t;\n  float wFreq, wAmp, ht;\n  wFreq = 1.;\n  wAmp = 1.;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    p *= qRot;\n    t = tWav * vec2 (1., -1.);\n    t4 = (p.xyxy + t.xxyy) * wFreq;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    ht += wAmp * dot (pow (1. - sqrt (v4.xz * v4.yw), vec2 (8.)), vec2 (1.));\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return ht;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec3 vn;\n  vec2 e;\n  e = vec2 (max (0.01, 0.005 * d * d), 0.);\n  p *= 0.5;\n  vn.xz = 0.5 * (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy),  WaveHt (p.xz + e.yx)));\n  vn.y = e.x;\n  return normalize (vn);\n}\n\nfloat CylHit (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float bmCylRad, bmCylLen, d, a, b, w, srdz;\n  bmCylRad = 0.7;\n  bmCylLen = 50.;\n  ro.y -= bmHt;\n  ro.xz = Rot2D (ro.xz, bmAng);\n  rd.xz = Rot2D (rd.xz, bmAng);\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - bmCylRad * bmCylRad);\n  d = dstFar;\n  if (w > 0. && a > 0.) {\n    d = (- b - sqrt (w)) / a;\n    p = ro + d * rd;\n    if (abs (p.z) > bmCylLen) {\n      srdz = sign (rd.z) * ro.z + bmCylLen;\n      if (srdz < 0.) {\n        d = - srdz / abs (rd.z);\n        if (length (p.xy) > bmCylRad) d = dstFar;\n      } else d = dstFar;\n    }\n  }\n  return d;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 vn, col, roo, rdo, vno, rob, rdb, rg;\n  float dstObj, dstWat, dstTransObj, dCylIn, a;\n  bool watRefl, winRefl, isBm;\n  HexVorInit ();\n  bmHt = 17.;\n  twBase = 4.;\n  twRad = 3.;\n  tWav = 0.2 * tCur;\n  tCloud = -0.05 * tCur;\n  bmAng = -0.5 * tCur;\n  winRefl = false;\n  watRefl = false;\n  isBm = false;\n  dCylIn = CylHit (ro, rd);\n  rob = ro;\n  rdb = rd;\n  dstObj = ObjRay (ro, rd);\n  dstWat = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  dstTransObj = TransObjRay (ro, rd);\n  if (dstWat < min (dstObj, dstFar)) {\n    watRefl = true;\n    ro += dstWat * rd;\n    vn = WaveNf (ro, dstWat);\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstTransObj < min (dstFar, dstObj)) {\n    ro += rd * dstTransObj;\n    roo = ro;\n    rdo = rd;\n    vno = TransObjNf (ro);\n    winRefl = true;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == idTwr) {\n      a = atan (ro.z, - ro.x) / (2. * pi);\n      if (ro.y > twBase) {\n        if (dot (normalize (ro.xz), vn.xz) > 0.9) {\n          col = vec3 (0.9, 0.7, 0.5);\n          col *= 0.5 + 0.5 * Fbm2 (vec2 (32. * a, 4. * ro.y));\n          rg = ShStagGrid (vec2 (a, ro.y + 0.05), vec2 (40., 6.));\n          col *= rg.y;\n          if (rg.x == 0.) {\n            vn.y += rg.z;\n            vn.xz *= sqrt (1. - vn.y * vn.y);\n          } else vn.xz = Rot2D (vn.xz, - rg.x);\n        } else col = vec3 (0.4, 0.3, 0.2);\n        vn = VaryNf (50. * ro, vn, 1.);\n      } else {\n        col = vec3 (1., 0.8, 0.2);\n        col *= 0.7 * (0.5 + 0.5 * Fbm2 (vec2 (64. * a, 4. * ro.y)));\n        vn = VaryNf (10. * ro, vn, 5.);\n      }\n    } else if (idObj == idGrnd) {\n      vc = HexVor (ro.xz);\n      vn = VaryNf (2. * ro, vn, 5.);\n      col = 0.7 * mix (vec3 (1., 0.7, 0.2), vec3 (0.9, 0.8, 0.5),\n         0.5 * Noisefv3 (8. * (1. + vc.w) * ro) + 0.5 * vc.w) * (0.7 + 0.3 * smoothstep (0., 0.4, ro.y));\n    } else if (idObj == idFlr) {\n      col = vec3 (0.5, 0.6, 0.3);\n    } else if (idObj == idWfrm) {\n      col = vec3 (0.6, 0.5, 0.4);\n      vn = VaryNf (50. * ro, vn, 1.);\n    } else if (idObj == idTtop) {\n      col = vec3 (0.8, 0.7, 0.6);\n      vn = VaryNf (50. * ro, vn, 1.);\n    } else if (idObj == idLmp) {\n      col = vec3 (0.5, 0.5, 0.6);\n    } else if (idObj == idBm) {\n      isBm = true;\n      col = vec3 (1., 1., 0.8) * abs (dot (rd, vn));\n    }\n    if (! isBm) {\n      col = col * (0.2 + 0.1 * max (dot (- normalize (sunDir.xz), normalize (vn.xz)), 0.) +\n         0.8 * max (dot (sunDir, vn), 0.)) + 0.05 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n         if (winRefl) col = mix (col, 0.8 * BgCol (roo, reflect (rdo, vno)), smoothstep (0.5, 0.95,\n            1. - pow (abs (dot (- rdo, vno)), 5.)));\n    }\n  } else if (rd.y < 0.) {\n    watRefl = true;\n    dstWat = - ro.y / rd.y;\n    ro += dstWat * rd;\n    col = BgCol (ro, reflect (rd, WaveNf (ro, dstWat)));\n  } else col = BgCol (ro, rd);\n  if (watRefl) col = mix (mix (vec3 (0., 0.1, 0.), vec3 (0., 0.05, 0.05),\n     smoothstep (0.4, 0.6, Fbm2 (0.5 * ro.xz))), 0.8 * col, 1. - pow (abs (rd.y), 4.));\n  if (dCylIn < min (dstObj, dstFar)) col = mix (col, vec3 (1., 1., 0.5),\n     0.3 * (1. - smoothstep (10., 45., length (rob + rdb * dCylIn - vec3 (0., 17., 0.)))));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 100.;\n  az = 0.;\n  el = -0.03 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 1. * pi * mPtr.y;\n  } else {\n    az -= 2.5 * pi * sin (0.003 * pi * tCur);\n  }\n  el = clamp (el, -0.3 * pi, -0.01 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  zmFac = 5. - cos (2. * az);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 7., -70.);\n  sunDir = normalize (vec3 (-1., 0.15, -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nvec2 gVec[7], hVec[7];\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);  \n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;  \n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}