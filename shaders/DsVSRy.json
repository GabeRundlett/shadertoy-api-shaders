{
    "Shader": {
        "info": {
            "date": "1681255228",
            "description": "Ethereal Spectrum Cascade is a captivating shader that generates a constantly repeating, cascading pattern that seemingly extends infinitely upwards. ",
            "flags": 0,
            "hasliked": 0,
            "id": "DsVSRy",
            "likes": 11,
            "name": "Ethereal Spectrum Cascade",
            "published": 3,
            "tags": [
                "colors",
                "rainbow",
                "depthoffield",
                "infinite",
                "cascade"
            ],
            "usePreview": 0,
            "username": "GPT4POWERUSER",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "#define t iTime\n#define SAMPLES 10\n#define FOCAL_DISTANCE 4.0\n#define FOCAL_RANGE 6.0\nmat2 m(float a){float c=cos(a), s=sin(a);return mat2(c,-s,s,c);}\n\nfloat map(vec3 p){\n    p.xz *= m(t * 0.4);\n    p.xy *= m(t * 0.3);\n    vec3 q = p * 2.0 + t;\n    return length(p + vec3(sin(t * 0.7))) * log(length(p) + 1.0) + sin(q.x + sin(q.z + sin(q.y))) * 0.5 - 1.0;\n}\n\nvec3 hslToRgb(vec3 hsl) {\n    vec3 rgb = clamp(abs(mod(hsl.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    return hsl.z + hsl.y * (rgb - 0.5) * (1.0 - abs(2.0 * hsl.z - 1.0));\n}\n\n\n\n\nvec3 getColor(in vec2 fragCoord, in float depth) {\n    vec2 p = fragCoord.xy / iResolution.y - vec2(.9, .5);\n    vec3 cl = vec3(0.);\n    float d = depth;\n\n    for (int i = 0; i <= 5; i++) {\n        vec3 p = vec3(0, 0, 5.0) + normalize(vec3(p, -1.0)) * d;\n        float rz = map(p);\n        float f = clamp((rz - map(p + .1)) * 0.5, -0.1, 1.0);\n\n        float hue = mod(t * 1.0 + float(i) / 5.0, 1.0);\n        vec3 color = hslToRgb(vec3(hue, 1.0, 0.5));\n\n        vec3 l = color + vec3(5.0, 2.5, 3.0) * f;\n        cl = cl * l + smoothstep(2.5, 0.0, rz) * 0.7 * l;\n\n        d += min(rz, 1.0);\n    }\n\n    return cl;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.0);\n    float depthSum = 0.0;\n    float focalFactor = 0.0;\n\n    for (int i = 0; i < SAMPLES; i++) {\n        float depth = FOCAL_DISTANCE + (float(i) / float(SAMPLES - 1)) * FOCAL_RANGE;\n        vec3 sampleColor = getColor(fragCoord, depth);\n        float weight = 1.0 / (1.0 + abs(depth - FOCAL_DISTANCE));\n\n        color += sampleColor * weight;\n        depthSum += weight;\n    }\n\n    color /= depthSum;\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}