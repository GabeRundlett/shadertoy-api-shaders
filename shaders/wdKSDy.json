{
    "Shader": {
        "info": {
            "date": "1574926251",
            "description": "Random directed loop - see source",
            "flags": 32,
            "hasliked": 0,
            "id": "wdKSDy",
            "likes": 16,
            "name": "Long Loop",
            "published": 3,
            "tags": [
                "walk",
                "extrude",
                "selfavoiding"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 461
        },
        "renderpass": [
            {
                "code": "// \"Long Loop\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Adapted from mathmasterzach's self-avoiding loop/walk shaders (wsKSWD and wdySWm).\n  Method: Generate random spanning tree for grid, thicken the branches, then draw\n  directed loop around the perimeter; finally extrude; restart periodically or\n  when mouse near mid-edge/right.\n*/\n\nfloat PrBoxDf (vec3 p, vec3 b);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (vec2 vId);\n\nvec3 ltDir;\nfloat gSize, tCur, dstFar;\nbool showPath;\nconst float pi = 3.14159;\n\nivec4 GetBits (vec2 p)\n{\n  ivec4 b;\n  b = int (Loadv4 (floor (p)).x) / ivec4 (1, 2, 4, 8);\n  return b - 2 * (b / 2);\n}\n\nfloat WalkHt (vec2 uv)\n{\n  vec2 p, sp, q;\n  ivec4 f;\n  ivec2 s;\n  float c, e, h;\n  p = gSize * (0.5 * uv + 0.5);\n  h = 0.;\n  if (min (p.x, p.y) >= 0. && max (p.x, p.y) < gSize) {\n    if (showPath) { \n      sp = sign (0.5 - fract (p));\n      f = GetBits (p);\n      s = ivec2 ((sp.x > 0.) ? f.x : f.z, (sp.y > 0.) ? f.y : f.w);\n      q = 2. * fract (2. * p) - 1.;\n      if (s.x == s.y) {\n        e = (s.y == 0) ? -1. : 1.;\n        q += e * sp;\n        c = abs (1. - length (q));\n      } else {\n        c = abs ((s.y == 0) ? q.y : q.x);\n      }\n      h = smoothstep (0.1, 0.4, abs (0.5 - c));\n    }\n  }\n  return h;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float d, h;\n  d = PrBoxDf (p, vec3 (1.05, 0.07, 1.05));\n  if (d < 0.02) {\n    h = 0.01 * WalkHt (p.xz);\n    p.y -= - h;\n    d = 0.5 * PrBoxDf (p, vec3 (1.01, 0.03 - h, 1.01));\n  }\n  return d;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 WalkCol (vec2 uv, vec3 col)\n{\n  vec3 colW;\n  vec2 p, sp, q;\n  ivec4 f;\n  ivec2 s;\n  float c, tp, e;\n  bool inGrd;\n  p = gSize * (0.5 * uv + 0.5);\n  inGrd = (min (p.x, p.y) >= 0. && max (p.x, p.y) < gSize);\n  if (min (p.x, p.y) >= -0.08 && max (p.x, p.y) < gSize + 0.08 && ! inGrd)\n     col = vec3 (0.5, 0.5, 1.);\n  if (inGrd && showPath) {\n    sp = sign (0.5 - fract (p));\n    f = GetBits (p);\n    s = ivec2 ((sp.x > 0.) ? f.x : f.z, (sp.y > 0.) ? f.y : f.w);\n    q = 2. * fract (2. * p) - 1.;\n    tp = 0.5 * tCur;\n    if (s.x == s.y) {\n      e = (s.y == 0) ? -1. : 1.;\n      q += e * sp;\n      c = abs (1. - length (q));\n      tp += e * atan (q.y, q.x) / pi;\n    } else {\n      c = abs ((s.y == 0) ? q.y : q.x);\n      tp -= (s.y == 0) ? sp.y * p.x : - sp.x * p.y;\n    }\n    if (c < 0.2) col = vec3 (0., 0., 0.6);\n    tp = 2. * fract (2. * tp) - 1.;\n    colW = 6. * vec3 (step (0., min (((tp < 0.) ? 0.24 + 0.6 * tp : 0.08) - c,\n       0.7 - abs (tp))), step (0., 0.1 - abs (0.5 - c)), 0.);\n    if (length (colW) > 0.) col = colW;\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col = vec3 (0.7, 0.7, 0.5);\n    if (ro.y > 0.) col = WalkCol (ro.xz, col);\n    col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (dot (reflect (rd, vn), ltDir), 0.), 32.);\n  } else col = vec3 (0.1);\n  return clamp (col, 0., 1.);\n}\n\n#define AA   1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, stDat;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, nStep;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  stDat = Loadv4 (vec2 (0, 0));\n  nStep = stDat.z;\n  gSize = stDat.w;\n  showPath = (nStep > 2.5 * gSize);\n  az = 0.;\n  el = -0.4 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 1.2 * pi * mPtr.y;\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -5.2);\n  dstFar = 10.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  zmFac = 5.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Long Loop\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashfv3 (vec3 p);\nvec2 Hashv2f (float p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define RH(x,y) int (4. * Hashfv3 (vec3 (vec2 (x, y) + iFrag, 37.37 * s)))\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec4 mPtr, fVal;\n  vec2 canvas, iFrag;\n  float gSize, nStep, vC, vN, vE, vS, vW, s, tCur;\n  int r;\n  bool init;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = 10.;\n  if (max (fragCoord.x, fragCoord.y) >= gSize) discard;\n  iFrag = floor (fragCoord);\n  init = (mPtr.z > 0. && length (mPtr.xy - vec2 (0.5, 0.)) < 0.05)|| (iFrame < 5);\n  s = float (iFrame);\n  init = init || (mod (s, 2000.) == 0.);\n  if (init) {\n    vC = (iFrag == vec2 (floor (gSize * (0.25 + 0.5 * Hashv2f (tCur))))) ? 0.1 : 0.;\n    nStep = 0.;\n  } else {\n    nStep = Loadv4 (vec2 (0, 0)).z;\n    ++ nStep;\n    vC = Loadv4 (iFrag).x;\n    vN = Loadv4 (iFrag + vec2 (0, 1) ).x;\n    vE = Loadv4 (iFrag + vec2 (1, 0)).x;\n    vS = Loadv4 (iFrag + vec2 (0, -1)).x;\n    vW = Loadv4 (iFrag + vec2 (-1, 0)).x;\n    if (vC == 0.) {\n      r = RH (0, 0);\n      if (r == 0 && vW > 0.) vC = 1.;\n      if (r == 1 && vS > 0.) vC = 2.;\n      if (r == 2 && vE > 0.) vC = 4.;\n      if (r == 3 && vN > 0.) vC = 8.;\n    } else {\n      if (iFrag.x > 0. && vW == 0. && RH (-1, 0) == 2) vC += 1.;\n      if (iFrag.y > 0. && vS == 0. && RH (0, -1) == 3) vC += 2.;\n      if (iFrag.x < gSize - 1. && vE == 0. && RH (1, 0) == 0) vC += 4.;\n      if (iFrag.y < gSize - 1. && vN == 0. && RH (0, 1) == 1) vC += 8.;\n    }\n  }\n  fVal = vec4 (vC, 0., 0., 0.);\n  if (iFrag.y == 0. && iFrag.x == 0.) fVal.zw = vec2 (nStep, gSize);\n  Savev4 (iFrag, fVal, fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}