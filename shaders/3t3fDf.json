{
    "Shader": {
        "info": {
            "date": "1613559574",
            "description": "Crystall CA → readable rules",
            "flags": 32,
            "hasliked": 0,
            "id": "3t3fDf",
            "likes": 7,
            "name": "Crystall CA → readable rules",
            "published": 3,
            "tags": [
                "color",
                "cellular",
                "buildings"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 FC )\n{\n    fragColor = texelFetch(iChannel0, ivec2(FC)/1,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 o, in vec2 FC )\n{\n#define ROOF_START .002\n#define ROOF_LEFT_STOP .0002\n#define ROOF_RIGHT_STOP ROOF_LEFT_STOP\n#define ROOF_WALL_START -.00001 + .00002*uv.x\n#define COL transpose(mat3(uv.x,0,1,   .4,.92,.0,   0,.7,1))\n// #define COL mat3(1,0,0,   0,1,0,   0,0,1)\n\n#define rnd(d) fract(sin(length(FC.xy+d)*99.))\n#define T(dx,dy) (texelFetch(iChannel0,ivec2(FC.xy+vec2(dx,dy))%int(iResolution.xy),0).rgb*inverse(COL))\n#define RULE(v,c) else if(T(-2,-1)[v[0]]>.5 && T(0,-1)[v[1]]>.5 && T(2,-1)[v[2]]>.5 && c)o[v[3]]=1.;\n\nconst ivec3 v = ivec3(0,1,2);\nvec2 uv = FC.xy/iResolution.xy;\n\no=vec4(0);\nif(iTime<2.)if(int(FC.x+FC.y)%40<20)o.r+=1.;else o.b+=1.;\n//else if(int(FC.y-iTime*20.+100.)!=0){o.rgb=T(0,0)*COL;return;}\nelse if(int(FC.x)%2==0)o.rgb=T(-1,0);\n\nRULE(v.brrg,rnd(0.)<ROOF_START)\n\nRULE(v.ggrb,rnd(0.)<ROOF_RIGHT_STOP)\nRULE(v.grrb,rnd(vec2(-2,0))<ROOF_RIGHT_STOP)\n\nRULE(v.bggr,rnd(0.)<ROOF_LEFT_STOP)\nRULE(v.bbgr,rnd(vec2(2,0))<ROOF_LEFT_STOP)\n\nRULE(v.brrg,rnd(length(FC.xy))<ROOF_START)\n\nRULE(v.gggb,rnd(0.)<ROOF_WALL_START)\n\nRULE(v.bgrr,rnd(vec2(-2,-1))<ROOF_WALL_START)\nRULE(v.bggr,rnd(vec2(-2,-1))<ROOF_WALL_START)\nRULE(v.bgbr,rnd(vec2(-2,-1))<ROOF_WALL_START)\n\nRULE(v.bbbb,true)\nRULE(v.bbrb,true)\nRULE(v.rbbb,true)\nRULE(v.gbbb,true)\nRULE(v.gbrb,true)\nRULE(v.rbrb,true)\nRULE(v.gbgb,true)\nRULE(v.bbgg,true)\nRULE(v.rbgg,true)\nRULE(v.rrrr,true)\nRULE(v.rrgr,true)\nRULE(v.brrr,true)\nRULE(v.rrbr,true)\nRULE(v.brgr,true)\nRULE(v.brbr,true)\nRULE(v.grgr,true)\nRULE(v.grrg,true)\nRULE(v.grbg,true)\nRULE(v.rggr,true)\nRULE(v.rgbr,true)\nRULE(v.rgrr,true)\nRULE(v.ggbb,true)\nRULE(v.gggg,true)\nRULE(v.ggrg,true)\nRULE(v.bggg,true)\nRULE(v.bgrg,true)\nRULE(v.bgbg,true)\n\no.rgb*=COL;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}