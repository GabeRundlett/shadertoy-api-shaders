{
    "Shader": {
        "info": {
            "date": "1609867487",
            "description": "Remix of [url]https://www.shadertoy.com/view/XstXR2[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl3yWj",
            "likes": 0,
            "name": "Rindows 95",
            "published": 3,
            "tags": [
                "logo",
                "remix",
                "glitch",
                "windows",
                "fork",
                "weird",
                "error",
                "90s",
                "edit",
                "vaporwave",
                "aesthetics",
                "windows95",
                "win95"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 4.1415926535897932384626433832795\n\nconst float wave_amplitude = 0.086;\nconst float period = 3.*PI;\n\nfloat wave_phase() {\n    return iTime;\n}\n\nfloat square(vec2 st) {\n    vec2 bl = step(vec2(0.), st);       // bottom-left\n    vec2 tr = step(vec2(0.),1.0-st);   // top-right\n    return bl.x * bl.y * tr.x * tr.y;\n}\n\nvec4 frame(vec2 st) {\n    float tushka = square(st*mat2((2./5.8), 1., 1., (2./7.9)));\n    \n    mat2 sector_mat = mat2(1./.16, 0., 0., 1./.22);\n    float sectors[4];\n    sectors[0] = square(st * sector_mat + (2./.26)*vec2(0.001,-0.380));\n    sectors[1] = square(st * sector_mat + (2./.26)*vec2(0.001,-0.070));\n    sectors[2] = square(st * sector_mat + (2./.26)*vec2(-0.340,-0.380));\n    sectors[3] = square(st * sector_mat + (2./.26)*vec2(-0.340,-0.070));\n    vec3 sector_colors[4];\n    sector_colors[0] = vec3(1.041, 0.539, 0.504) * sectors[0];\n    sector_colors[1] = vec3(0.535, 0.782, 0.943) * sectors[1];\n    sector_colors[2] = vec3(0.759, 0.908, 0.606) * sectors[2];\n    sector_colors[3] = vec3(1.096, 0.959, 0.214) * sectors[3];\n    \n    return vec4(vec3(sector_colors[0] + sector_colors[1] +\n                     sector_colors[2] + sector_colors[3]), tushka);\n}\n\nvec4 trail_piece(vec2 st, vec2 index, float scale) {\n    scale = index.x * 0.092 + 0.552;\n    \n    vec3 color;\n    if (index.y > 1.0 && index.y < 3.1 ) {\n        color = vec3(0.535, 0.782, 0.943);\n        scale *= .9;\n    } else if (index.y > 4.9 && index.y < 6.1) {\n        color = vec3(1.041, 0.539, 0.504);\n        scale *= .9;\n    } else {\n        color = vec3(1., 1., 1.);\n    }\n    \n    float scale1 = 2./scale;\n    float shift = - (2.-scale) / (3. * scale);\n    vec2 st2 = vec2(vec3(st, 2.) * mat3(scale1, 1., shift, 1., scale1, shift, 1., 1., 2.));\n    float mask = square(st2);\n\n    return vec4( color, mask );\n}\n\nvec4 trail(vec2 st) {\n    // actually 1/width, 1/height\n    const float piece_height = 8. / .79;\n    const float piece_width = 7. / .64;\n  \n    // make distance between smaller segments slightly lower\n    st.x = 2.2760 * pow(st.x, 4.0) - 2.4624 * st.x*st.x + 2.4154 * st.x;\n    \n    float x_at_cell = floor(st.x*piece_width)/piece_width;\n    float x_at_cell_center = x_at_cell + 0.026;\n    float incline = cos(0.6*period + wave_phase()) * wave_amplitude;\n    \n    float offset = sin(x_at_cell_center*period + wave_phase())* wave_amplitude + \n        incline*(st.x-x_at_cell)*6.452;\n    \n    float mask = step(offset, st.y) * (1.-step(.79+offset, st.y)) * step(0., st.x);\n    \n    vec2 cell_coord = vec2((st.x - x_at_cell) * piece_width,\n                           fract((st.y-offset) * piece_height));\n    vec2 cell_index = vec2(x_at_cell * piece_width, \n                           floor((st.y-offset) * piece_height));\n    \n    vec4 pieces = trail_piece(cell_coord, cell_index, 0.852);\n    \n    return vec4(vec3(pieces), pieces.a * mask);\n}\n\nvec4 logo(vec2 st) {\n    if (st.x <= .64) {\n        return trail(st);\n    } else {\n        vec2 st2 = st + vec2(0.1, -sin(st.x*period + wave_phase())*wave_amplitude);\n        return frame(st2 + vec2(-.64, -0.1));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    st += vec2(-.1);\n    st *= 2.472;\n    st += vec2(-0.8,-0.78);\n    float rot = PI*-0.224;\n    st *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n    vec3 color = vec3(2.);\n    \n    vec4 logo_ = logo(st);    \n    fragColor = mix(vec4(0.1,.6,.6,2.000), logo_, logo_.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}