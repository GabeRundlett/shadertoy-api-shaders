{
    "Shader": {
        "info": {
            "date": "1610735693",
            "description": "ff",
            "flags": 32,
            "hasliked": 0,
            "id": "3tt3Rj",
            "likes": 6,
            "name": "global illumination",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 1,
            "username": "Angramme",
            "viewed": 549
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_D 200.\n#define denoise_amount .95\n\nvec3 R3(vec3 p, float t){\n    return textureLod(iChannel0, p*113.395 + t*vec3(38.15, 85.41, 95.), 0.).rgb*2.-1.;\n}\n\n\nfloat dist(vec3 p){\n    float sphere = distance(p, vec3(0, 0, 7)) -1.;\n    float sphere2 = distance(p, vec3(.9, .4, 6.2)) - .5;\n    float plane = p.y+1.;\n    return min(plane,min(sphere,sphere2));\n}\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.;\n    for(int i=0; i<200; i++){\n        vec3 p = ro + rd*t;\n        float d = dist(p);\n        if(d<.001 || t > MAX_D)break;\n        t += d;\n    }\n    return t;\n}\nvec3 normal(vec3 p){\n    vec2 eps = vec2(.001, 0);\n    return (vec3(\n        dist(p + eps.xyy),\n        dist(p + eps.yxy),\n        dist(p + eps.yyx))\n        - dist(p))/eps.x;\n}\n\n\n\nvec3 material(vec3 p){\n    return p.y > - .99 && p.z < 20. ? vec3(.9) : vec3(.9, .8, .8);\n}\n\nvec3 sky(vec3 d){\n    float v = 1.-d.y;\n    return vec3(v, v, 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 color = vec3(0);\n    \n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.x;\n    \n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float t = march(ro, rd);\n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    \n    if(t > MAX_D){\n        color = sky(rd);\n    }else{\n        color = material(p);\n        \n        vec3 rro = p + n*.001;\n        vec3 rrd = normalize(n + .98*R3(p, iTime));\n        vec3 prev_n = n;\n        \n        for(int i=0; i<10; i++){\n        \tfloat rt = march(rro, rrd);\n        \tvec3 rp = rro + rrd*rt;\n        \tvec3 rn = normal(rp);\n            \n            //material color\n            vec3 mcol = material(rp);\n            \n            //simple\n            color *= mcol;\n            \n            //hit the sky?\n            if(rt > MAX_D){\n                //color *= sky(rrd);\n                break;\n            }\n        \n        \t//reinit\n        \trro = rp + rn*.001;\n        \trrd = normalize(rn + .98*R3(rp, iTime));\n            prev_n = rn;\n        }\n    }\n    \n    color = (1.-denoise_amount)*color + denoise_amount*texture(iChannel1, fragCoord.xy/iResolution.xy).rgb;\n    \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}