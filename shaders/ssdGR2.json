{
    "Shader": {
        "info": {
            "date": "1630260888",
            "description": "I took the previous thing and tied parameters to music. I think it's neat. Enjoy.\nHold left mouse button to attract some of the cloud to your cursor!",
            "flags": 32,
            "hasliked": 0,
            "id": "ssdGR2",
            "likes": 2,
            "name": "a cloud of music",
            "published": 3,
            "tags": [
                "simulation",
                "music"
            ],
            "usePreview": 0,
            "username": "pali6",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    fragColor.yz = 0.2 * 0.5 * (fragColor.yz + vec2(1, 1)) * fragColor.x;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define N 4\n#define WF 0.6\n#define DISPERSION 1.6\n\nvec2 norm(vec2 v)\n{\n    if(length(v) <= 0.000001)\n        return v;\n    return normalize(v);\n}\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 mouse = iMouse / iResolution.x;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    if(iFrame <= 10)\n    {\n        fragColor = texture(iChannel1, uv) - vec4(-1., 0.5, 0.5, 0.);\n        return;\n    }\n    /*\n    if(mouse.z > 0. && distance(fragCoord, iMouse.xy) < 10.)\n    {\n        fragColor = vec4(1., rand(vec2(iTime, 42.) + mouse.xy) * 2. - 1., rand(vec2(iTime, 43.) + mouse.xy) * 2. - 1., 1.);\n        return;\n    }\n    */\n    ivec2 pos = ivec2(fragCoord);\n    \n    vec2 finalVel;\n    float finalAmount = 0.;\n    for(int dx = -1; dx <= 1; dx++)\n    {\n        for(int dy = -1; dy <= 1; dy++)\n        {\n            if(abs(dx) + abs(dy) != 1)\n                continue;\n            vec4 cur = texelFetch(iChannel0, pos + ivec2(-dx, -dy), 0);\n            vec2 cVel = cur.yz;\n            float cAmount = cur.x;\n            float mulSum = abs(cVel.x) + abs(cVel.y) + 0.000000001 + max(0., cAmount - 1.);\n            float mul = max(0., dot(vec2(dx, dy), cVel)) + max(0., cAmount - 1.) / 4.; // 4 = number of cardinal directions\n            mul /= mulSum;\n            cVel += max(0., cAmount - 1.) * vec2(dx, dy) * DISPERSION;\n            finalVel += cVel * cAmount * mul;\n            finalAmount += cAmount * mul;\n        }\n    }\n    finalVel = norm(finalVel);\n\n    vec2 alignVel;\n    vec2 cohesVel;\n    vec2 avoidVel;\n    for(int dx = -N; dx <= N; dx++)\n    {\n        for(int dy = -N; dy <= N; dy++)\n        {\n            vec4 cur = texelFetch(iChannel0, pos + ivec2(dx, dy), 0);\n            vec2 cVel = cur.yz;\n            float cAmount = cur.x;\n            alignVel += cVel * cAmount;\n            cohesVel += norm(vec2(dx, dy)) * cAmount;\n            if(abs(dx) + abs(dy) <= 3)\n                avoidVel += norm(vec2(dx, dy)) * (1. / (cAmount * cAmount * cAmount + 1.));\n        }\n    }\n    vec2 wallVel = \n        vec2(1. / (WF + uv.x), 0.) +\n        vec2(0., 1. / (WF + uv.y)) +\n        vec2(0., -1. / (1. - uv.y + WF)) +\n        vec2(-1. / (1. - uv.x + WF), 0.);\n    vec2 randVel = norm(vec2(rand(vec2(pos) + vec2(iTime, 1.)), rand(vec2(pos) + vec2(iTime, 0.))) * 2. - vec2(1, 1));\n    alignVel = norm(alignVel);\n    cohesVel = norm(cohesVel);\n    vec2 rotationVel = vec2(finalVel.y, - finalVel.x);\n    finalVel = norm(\n        4.0 * texture(iChannel2, vec2(0.1, 0.)).x * finalVel + \n        0.8 * texture(iChannel2, vec2(0.3, 0.)).x * alignVel + \n        0.6 * texture(iChannel2, vec2(0.5, 0.)).x * cohesVel + \n        0.0 * avoidVel + \n        0.1 * wallVel + \n        0.6 * texture(iChannel2, vec2(0.7, 0.)).x * randVel + \n        0.01 * texture(iChannel2, vec2(0.9, 0.)).x * rotationVel +\n        20.0 * (mouse.z > 0. ? 1. : 0.) * norm(iMouse.xy - fragCoord) / distance(fragCoord, iMouse.xy)\n    );\n    \n    fragColor = vec4(finalAmount, finalVel, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}