{
    "Shader": {
        "info": {
            "date": "1519655425",
            "description": "Theory of density wave as tilted bounding ellipses.\nclick to see embeded ellipses\n\nref: [url]https://en.wikipedia.org/wiki/Density_wave_theory[/url]\nEspecially Animation 3.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dcyzX",
            "likes": 37,
            "name": "galaxy spirals: ellipses model",
            "published": 3,
            "tags": [
                "galaxy",
                "quadratic",
                "ellipse",
                "short",
                "form"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1798
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define SQR(v) ( (v) * (v) )\n#define T(U) texture(iChannel0,U)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U =  1.2* (U+U-R)/R.y;\n    O *= 0.;\n    \n    vec2  r = vec2(.5,.3);              // base ellipse aspect ration\n    float a = -3.14/2.,                 // ellipse angle tilt per scaling length\n          va, d, l = 1.,                // scaling length\n          e = (iMouse.z<=0.) ? .3 : .1, // thickness of each ellipse\n          show = ( 15. + floor(15.*cos(.5*iTime)) ) * sign(iMouse.z);\n \n    for (float l = .1,n=1.; l<3.; l+= .1,n++) {\n     // r = .5*vec2( 1., .6+.4* (l/3.) );     // morphing to circle outside\n        vec2 V = 1./vec2(r) * ( rot(a+a*l)* U ) ;\n        d = dot (V, V ); // quadratic form of the ellipsoid U.R⁻¹.(1/d²).R.U = l²\n        va = iTime*(1.5/l-0.);                // in galaxies, tangential velocity is constant !\n        vec4 C = T( rot(va+n) * .5*V/l );     // noise in ellipse frame\n        O += smoothstep(e,0.,abs(sqrt(d)-l) ) // ellipse shape\n        //  * C*C / l;                        // noise + fading\n            * ( n==show ? vec4(1,0,0,0) : C*C ) / l;  // or show ellipse\n    }         \n    //O = vec4(1.-d);\n}\n\n\n\n\n/** // --- try loopless by inversion of U*Quad(a*l)*U = l² : not trivial !   \n\n    float A = SQR(U.x/r.x) + SQR(U.y/r.y),              // cos(a*l)^2\n          B = SQR(U.y/r.x) + SQR(U.x/r.y),              // sin(a*l)^2\n          C = 2.*U.x*U.y* (-1./SQR(r.x)+1./SQR(r.y) ),  // cos(a*l)*sin(a*l)\n          D = 0.;                                       // 1 ( indeed, l² )\n    A += -B; D += B;                                    // S² = 1-C²\n    float a = A*A+C*C;\n    // in fact invariance of a is in r⁴ but not directly length⁴\n    O = .16*vec4(a/SQR(dot(U,U)/dot(r,r))); // a = k(r⁴)*||U||⁴  .019/U⁴ .16*r⁴/U⁴\n\n/**/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}