{
    "Shader": {
        "info": {
            "date": "1581915974",
            "description": "a very poor Moai head",
            "flags": 0,
            "hasliked": 0,
            "id": "tttXWf",
            "likes": 7,
            "name": "Moai Statue",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "island",
                "poor",
                "moai",
                "easter"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "// A very badly modelled Moai statue :) - Del 16/02/2020\n\n#define AA 2\n#define PI\t\t3.1415926\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat mouth (in vec3 p)\n{\n    vec3 mouthpos = p-vec3(0.0,-0.4,0.10);\t\n    float body = length (mouthpos);\n    float size = 0.15;\n\tbody = max (body - size,  -body);\n\tfloat Angle = PI * ( 0.1 * abs(sin (iTime*3.0)));\n\tfloat mouthT = dot (mouthpos, vec3 (0.0, -cos (Angle), sin (Angle)));\n\tAngle *= 2.4;\n\tfloat mouthB = dot (mouthpos, vec3 (0.0, cos (Angle), sin (Angle)));\n    return max (body, min (mouthT, mouthB));\n}\nfloat ear (in vec3 p)\n{\n    p.y += 0.15;\n    p.z -= 0.02;\n    float d1 =  sdCone(p, vec3(0.22,-0.2,0.0), vec3(0.19,0.2,0.0), 0.02,0.01 );\n    float d2 =  sdCone(p, vec3(-0.22,-0.2,0.0), vec3(-0.19,0.2,0.0), 0.02,0.01 );\n    return min(d1,d2);\n}\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\nfloat map( in vec3 pos )\n{\n    \n\t//pos.xz *= rotate(sin(iTime+pos.y));\n    pos.x = mod(pos.x,0.6)-0.3;\n    \n    pos.y -= 0.2;\n    float d1 =  sdCone(pos, vec3(0.0,-0.5,0.0), vec3(0.0,0.2,0.0), 0.225, 0.16 );\n    float d7 = mouth(pos);\n    d1 = smin(d1,d7,0.15);\n    float d3 = sdBox(pos+vec3(0.0,0.15,-0.4),vec3(0.2,0.15,0.3));\n    d1 = opSmoothSubtraction(d3,d1,0.025);\t\t// box cutout\n    vec3 q = pos+vec3(0.0,0.0,-0.08);\t//-vec3(0.0,0.0,-0.1);\n    float d2 =  sdCone(q, vec3(0.0,0.0,0.04), vec3(0.0,-0.3,0.105), 0.1*0.4, 0.1*0.9 );\n    d1 = smin(d1,d2,0.045);\n\tfloat d4 = sdBox(pos+vec3(0.0,0.1,0.15),vec3(0.2,0.5,0.1));\n    d1 = opSmoothSubtraction(d4,d1,0.09);\t\t// box cutout\n    \n    float ep = ear(pos);\n    d1 = smin(ep,d1,0.05);\n    \n    return d1;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n//    vec\n     // camera movement\t\n    float an = sin(iTime)*0.8;\n    an+=3.14*0.5;\n    float y = 0.0;\n    \n    if (iMouse.z>0.5)\n    {\n        an=iMouse.x/iResolution.x*4.0;\n        y = (iMouse.y/iResolution.y)*2.0;\n        y-=1.0;\n    }\n    \n\tvec3 ro = vec3( 1.0*cos(an), y, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 8.0;\n        float t = 0.0;\n        for( int i=0; i<80;i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.6,0.4,0.4*abs(sin(uv.x*0.1+iTime)))*1.0-abs(uv.y*0.5);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            vec3 ambcol = vec3(0.4,0.3,0.3)*amb;\n            col = ambcol + vec3(0.6,0.55,0.85)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}