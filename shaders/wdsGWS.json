{
    "Shader": {
        "info": {
            "date": "1547469929",
            "description": "converting my 3D n-body simulation to 2D space\nbut no longer n-body forces, just local collisions\nwhich means its more GPU friendly\n\nclick to create a stream of balls in that region\nthere is camera zoom in the \"common tab\"",
            "flags": 32,
            "hasliked": 0,
            "id": "wdsGWS",
            "likes": 70,
            "name": "Fluid physics",
            "published": 3,
            "tags": [
                "water",
                "fluid",
                "liquid",
                "physics"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 2474
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = 1./iResolution.xy;\n    vec2 u = fragCoord.xy*ZOOM;\n    vec4 t = vec4(fract(u)*2.-1.,0.,0.);\n    vec4 s = step(vec4(0.),t)*vec4(1.,1.,0.,0.)-vec4(1.,1.,0.,0.);\n         u = (floor(u)+s.xy)*2.;\n         s*= 2.;\n    vec4 v = vec4(.6);\n    for(float i = .5; i < 4.; ++i)\n    {\n        for(float j = .5; j < 4.; ++j)\n    \t{\n            vec4 m = vec4(j,i,0.,0.);\n            vec4 t2 = texture(iChannel0,(u+m.xy)*r).xyzw;\n            vec4 p = t-t2-s-2.*floor(m*.5);\n            if(t2.x != EMPTY && dot(p.xy,p.xy)<1.)\n            {\n                v = t2;\n            }\n        }\n    }\n    //color the ball depending on its velocity\n    fragColor = .5+.5*cos(6.28*(.5+length(v.zw)+vec4(.0,.1,.2,.0)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 t = vec4(EMPTY);\n    if(iFrame == 0)//fill 2D space with balls or EMPTY\n    {\n        t = rand(fragCoord.xy)*vec4(2.,2.,.02,.02)-vec4(1.,1.,.01,.01);\n        if(fract(sin(dot(fragCoord.xy,vec2(12.989,78.233)))*43758.5453)<.9)\n        {t = vec4(EMPTY);}\n    }\n    vec2 r = 1./iResolution.xy;\n    vec2 a = floor(fragCoord.xy*.5)*2.-2.;\n    float id = dot(floor(fract(fragCoord.xy*.5)*2.),vec2(1.,2.))+1.;\n    float id2 = 0.;\n    for(float i = .5; i < 6.; ++i)\n    {\n        for(float j = .5; j < 6.; ++j)\n    \t{\n            vec2 m = vec2(j,i);\n            vec4 t2 = texture(iChannel0,(a+m)*r).xyzw;\n            if(t2.x == EMPTY){continue;}\n            t2.xy += 2.*(floor(m*.5)-1.);\n            if(t2.x < 1. && t2.x >=-1. &&\n               t2.y < 1. && t2.y >=-1. ){++id2;}\n            if(abs(id2-id)<.1)//this means if id2 == id break\n            {\n                fragColor = t2;\n                return;\n            }\n        }\n    }\n    fragColor = t;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = 1./iResolution.xy;\n    vec2 u = fragCoord.xy;\n    vec4 t = texture(iChannel0,u*r).xyzw;\n         u = floor(fragCoord.xy*.5)*2.-2.;\n    vec2 v = vec2(0.);\n    if(iFrame == 0)//fill 2D space with balls or EMPTY\n    {\n        t = rand(fragCoord.xy)*vec4(2.,2.,.02,.02)-vec4(1.,1.,.01,.01);\n        if(fract(sin(dot(fragCoord.xy,vec2(12.989,78.233)))*43758.5453)<.9)\n        {t = vec4(EMPTY);}\n    }\n    if(iMouse.z>0. && length(fragCoord.xy*.5-iMouse.xy*ZOOM) < 4.)//click balls\n    {\n        t = rand(fragCoord.xy)*vec4(2.,2.,.02,.02)-vec4(1.,1.,.01,.01);\n    }\n    for(float i = .5; i < 6.; ++i)\n    {\n        for(float j = .5; j < 6.; ++j)\n    \t{\n            vec4 m = vec4(j,i,0.,0.);\n            vec4 t2 = texture(iChannel0,(u+m.xy)*r).xyzw;\n            if(t2.x == EMPTY){continue;}\n            vec4 p = t-t2+vec4(2.,2.,0.,0.)-2.*floor(m*.5);\n            vec2 d = p.xy;\n            float l = length(d);\n            if(l > 2. || l < .0001){continue;}         //no collision\n            d /= l;                    //direction force of collision normalized\n            float c = (2.-l)*FRC1;     //repulsion force of collision \n            float e = dot(d,p.zw)*FRC2;//inelastic force of collision \n            v += d*(c-e);\n        }\n    }\n    t.zw += v*FTOV;\n    t.xy += t.zw*VTOP;\n    fragColor = t;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define ZOOM .25        //camera zoom, should be < .5\n#define EMPTY 1024.     //there is no ball inside this pixel\n#define FTOV .125 \t\t//force to velocity\n#define VTOP (FTOV*2.)  //velocity to position\n#define FRC1 4.         //repulsion collision force\n#define FRC2 1.         //inelastic collision force\n//\"Buf A\" and \"Buf B\" represent the same thing\n//These 2D textures can be pictured as an empty 2D space\n//divided in grids\n//a grid has side length 2\n//a grid is represented by 4 pixels\n//a grid can be filled with balls\n// a ball has a radius 1\n// a ball position is realive to the center of the local grid\n//if ball position is outside the range 1 to -1\n//it means ball has moved to the neighbour grid\n// a ball only collides with local and neighbour grids balls\n// a ball is represented by 1 pixel\n// a pixel can be empty or ball preganant\n//if pixel has ball \"xy\" = position, \"zw\" = velocity\n//if pixel is empty xyzw = 1024\n//rendering \"Buf A\" to \"Buf B\" calculates\n//collision forces then convert to velocity then convert to position\n//rendering \"Buf B\" to \"Buf A\" calculates\n//which balls are moving to neighbour grids\n//a ball souldnt have velocity > 1\n//because that means its jumping 2 grids per frame\n//which means it will not collide with some balls\n//if somehow there are more than 4 balls in a grid\n//those balls that dont fit will disapear forever\n//doesnt matter because mouse click can create more balls\nvec4 rand(vec2 u)\n{\n    return fract(sin(vec4(dot(u,vec2(23.123,87.987)),\n                          dot(u,vec2(34.234,96.876)),\n                          dot(u,vec2(45.345,15.765)),\n                          dot(u,vec2(56.456,24.654))))*45678.7654);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}