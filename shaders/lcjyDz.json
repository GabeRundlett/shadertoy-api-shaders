{
    "Shader": {
        "info": {
            "date": "1722190566",
            "description": "CC0: Distorted boxy spiral\nOk, last one! Maybe...\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lcjyDz",
            "likes": 3,
            "name": "Distorted boxy spiral",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "// CC0: Distorted boxy spiral\n//  Ok, last one! Maybe...\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float\n  pi    = acos(-1.)\n, tau   = pi*2.\n, phi   = (1.+sqrt(5.))*0.5\n, phi2  = phi*phi\n, phi4  = phi2*phi2\n, iphi4 = 1./phi4\n, br = 0.99\n, con = 0.5\n, conf = 1.3825\n;\n\nconst vec2 \n  A = vec2(con,1.)\n, B = vec2(con,-con*conf)\n, C = vec2(-1.,-con*conf)\n;\n\nconst mat2 \n  rot180 = ROT(2.*pi*0.5)\n; \n\n\nfloat circle(vec2 p, float r) {\n  return length(p)-r;\n}\n\nfloat superCircle8(vec2 p, float r) {\n  p *= p;\n  p *= p;\n  return pow(dot(p,p), 1./8.)-r;\n}\n\nvec3 palette(float a) {\n  return 0.5*(1.+sin(vec3(0.,1.,2.)+a));\n}\n\nfloat geometric(float a, float r) {\n  return a/(1.-r);\n}\n\nfloat igeometric(float a, float r, float x) {\n  return log2(1.-x*(1.-r)/a)/log2(r);\n}\n\nvec2 geometric2(float a, float r, float n) {\n  float rn = pow(r, n);\n  float rn1 = rn*r;\n  return (a/(1.-r))*(1.-vec2(rn, rn1));\n}\n\nvec4 boxySpiralCoord(vec2 p, float z, out float side) {\n  float px = p.x;\n  float ax = abs(px);\n  float sx = sign(px);\n  float a = px > 0. ? phi2 : 1.;\n  a *= z;\n  float gdx     = geometric(a, iphi4); \n  ax            -= gdx;\n  float x       = igeometric(a, iphi4, -ax);\n  float nx      = floor(x);\n  vec2  lx      = geometric2(a, iphi4, nx)-gdx;\n  float minx    = lx.x;\n  float maxx    = lx.y;\n  float radiusx = (maxx-minx)*0.5;\n  float meanx   = minx+radiusx;\n  \n  p -= vec2(-1.,1./3.)*meanx*sx;\n  side = sx;\n  return vec4(p, radiusx, 2.*nx+(sx>0.?0.:1.));\n}\n\nfloat dot2(vec2 p) {\n  return dot(p,p);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat bezier(vec2 pos, vec2 A, vec2 B, vec2 C ) {    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\n\nvec2 transform(vec2 p) {\n  \n  vec2 sp0 = toSmith(p-0.);\n  vec2 sp1 = toSmith(p+vec2(1.0)*ROT(0.12*TIME));\n  vec2 sp2 = toSmith(p-vec2(1.0)*ROT(0.23*TIME));\n  p = fromSmith(sp0+sp1-sp2);\n  p *= ROT(-TIME*0.125);\n\n  return p;\n}\n\n\n\n\nvec3 effect(vec3 col, vec2 p) {\n  vec2 np = p + 1.0/RESOLUTION.y;\n  vec2 tp = transform(p);\n  vec2 ntp = transform(np);\n  float aa = sqrt(2.0)*distance(tp, ntp);\n  p = tp;\n\n  float anim = TIME*0.5;\n\n  float pft = fract(anim*0.25);\n  float nft = floor(anim*0.25);\n  float piz = exp2(log2(phi4)*pft);\n  float sx;\n  float sy;\n  vec4 gcx = boxySpiralCoord(p, piz,sx);\n  vec4 gcy = boxySpiralCoord(vec2(p.y,-p.x), phi*piz,sy);\n\n  float dbx = superCircle8(gcx.xy, gcx.z*br);\n  float dby = superCircle8(gcy.xy, gcy.z*br);\n\n  float nx = 1.+2.*gcx.w+4.*nft;\n  float ny = 2.*gcy.w+4.*nft;\n\n  float db;\n  vec4 gc;\n  float n;\n  float s; \n  if (dbx < dby) {\n    db = dbx;\n    gc = gcx;\n    n = nx;\n    s = sx;\n  } else {\n    db = dby;\n    gc = gcy;\n    n = ny;\n    s = sy;\n  }\n  \n  if (s == -1.) {\n    gc.xy*= rot180; \n  }\n  \n  float sr = length(p)*0.025;\n  vec3 bcol = palette(n*tau/16.);\n  float dc = circle(gc.xy, gc.z*br)/gc.z;\n  float ds = bezier(gc.xy, gc.z*A, gc.z*B, gc.z*C);\n\n  db = pmax(db, -(ds-sr), 2.*sr);\n  col = mix(col, bcol-0.5*dc, smoothstep(aa, -aa, db));\n\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = vec3(0.0);\n  col = effect(col, p);\n\n  col = sqrt(col);\n  col *= smoothstep(1.8,sqrt(0.5),length(pp));\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}