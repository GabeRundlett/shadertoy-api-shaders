{
    "Shader": {
        "info": {
            "date": "1664621730",
            "description": "Sierpinski function returns 0 if inside a black domain of a Sierpinski triangle with 'steps' iterations and outputs normalized barycentric coordinates per triangle domain.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtKfWw",
            "likes": 2,
            "name": "Sierpinski triangle barycentrics",
            "published": 3,
            "tags": [
                "triangle",
                "sierpinski"
            ],
            "usePreview": 0,
            "username": "hypnothalamus",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "// Created by Lucian Stanculescu in CLAVICULA : https://clavicula.link\n// use freely\n\n#define ANIMATED\n#define STEPS 7\n\nfloat Sierpinski(inout vec2 p, int steps)\n{\n\tfor (int i = 0; i < steps; ++i)\n\t{\n\t\tp *= 2.0;\n\n\t\tbool a = p.x + p.y < 1.0;\n\t\tbool b = p.x > 1.0;\n\t\tbool c = p.y > 1.0;\n\n\t\tif (!a && !b && !c) return 0.0;\n\n\t\tp.x -= float(b);\n\t\tp.y -= float(c);\n\t}\n\treturn 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    p.x -= 0.5 * p.y; // sqew transform\n\n#ifdef ANIMATED\n    int steps = int(iTime)%STEPS;\n#else\n    int steps = STEPS;\n#endif\n\n    steps++; // start from 1 iteration\n\n    vec2 uv = p;\n    bool s = Sierpinski(uv, steps) > 0.0;\n    fragColor = vec4( p.x>0.0 && p.y>0.0 && p.x+p.y<1.0 ? (s ? uv : 1.0-uv) : vec2(0.0), 0.0, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}