{
    "Shader": {
        "info": {
            "date": "1635869486",
            "description": "Checking GGX importance sampling from \"Real Shading in Unreal Engine 4\" by Brian Karis, Epic Games.\nSee arrays in buffer A to change roughnesses :)\n",
            "flags": 32,
            "hasliked": 0,
            "id": "fdVXD3",
            "likes": 30,
            "name": "Importance sampling visualizer",
            "published": 3,
            "tags": [
                "raymarching",
                "sampling",
                "ibl",
                "ggx",
                "ggx",
                "importance",
                "vandercorput"
            ],
            "usePreview": 0,
            "username": "hamtarodeluxe",
            "viewed": 676
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(0.45)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1459f\n#define RAYMARCHSTEPS 256\n#define SAMPLECOUNT 256\n\nvec3 positions[] = vec3[](  vec3(1.5, 0.0, 1.0), \n                            vec3(0.0, 0.0, 1.0), \n                            vec3(-1.5, 0.0, 1.0), \n                            vec3(1.5, 0.0,-1.0), \n                            vec3(0.0, 0.0, -1.0), \n                            vec3(-1.5, 0.0, -1.0));\n                         \nfloat roughnesses[] = float[](1.0, 0.8, 0.5, 0.4, 0.3, 0.2);\n\nvec3 offset = vec3(0.,0.,-3.);\n\n// Van der Corput sequence\nfloat\tvdc(uint bits) \n{\n\tbits = (bits << 16u) | (bits >> 16u);\n\tbits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n\tbits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n\tbits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n\tbits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n\treturn float(bits) * 2.3283064365386963e-10;\n}\n\n// Hammersley point set\nvec2 hs(uint i, uint N) \n{\n\treturn vec2(float(i) / float(N), vdc(i));\n} \n \n// GGX importance direction sampling, based on Real Shading in Unreal Engine 4 by Brian Karis, Epic Games\nvec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness, float rot)\n{\n\tfloat a = roughness * roughness;\n\t\n\tfloat phi = 2.0 * PI * fract(Xi.x + rot);\n\tfloat cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n\tfloat sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\t\n\t// From spherical coordinates to cartesian coordinates\n\tvec3 H;\n\tH.x = cos(phi) * sinTheta;\n\tH.y = sin(phi) * sinTheta;\n\tH.z = cosTheta;\n\t\n\t// From tangent-space vector to world-space sample vector\n\tvec3 up = abs(N.z) < 0.5 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n\tvec3 tangent = normalize(cross(up, N));\n\tvec3 bitangent = cross(N, tangent);\n\t\n\tvec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n\treturn normalize(sampleVec);\n}\n\n// Caspule, from IQ's website\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba) / dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dc = uv - 0.5;\n    dc.x *= iResolution.x/iResolution.y;\n    \n    // Current sample and object indices from iFrame\n    uint objectID = uint(floor(float(iFrame) / float(SAMPLECOUNT)));\n    uint sampleI = uint(iFrame % SAMPLECOUNT);\n    float roughness = roughnesses[objectID];\n    vec3 objectPos = positions[objectID];\n    \n    // Camera\n    vec3 ro = 5.*vec3(0., 1.5, 3.);\n    vec3 lookAt = vec3(0., 0.5, 0.);\n    vec3 up = vec3 (0, 1, 0);\n    vec3 fw = normalize(lookAt-ro);\n    vec3 rd = fw;\n    vec3 right = normalize(cross(fw, up));\n    up = normalize(cross(right,fw));  \n    ro = ro + (up*dc.y + right*dc.x) * 2.5;\n    \n    // Raymarching\n    float t = 0.;\n    bool hasHit = false;\n    vec3 p; int i;\n    for (i = 0; i < RAYMARCHSTEPS; i++)\n    {\n        p = ro + rd*t;\n        \n        float dGGX;\n        float dFib;\n        \n        vec2 s = hs(sampleI, uint(SAMPLECOUNT));\n        vec3 N = vec3(0.0f, 1.0f, 0.0f);\n        vec3 H = importanceSampleGGX(s, N, roughness, 0.f);\n        vec3 L  = normalize(2.0 * dot(N, H) * H - rd);\n        float d = sdCapsule(p, objectPos, objectPos + L, 0.02f);\n                \n        if (d < 0.00001)\n        {\n            objectPos += dFib < dGGX ? offset : vec3(0.);\n            hasHit = true;\n            break; \n        }\n        t+=d;\n    }\n    \n    // Background\n    vec4 col = vec4(0.1, 0.1, 0.1, 1000.0f);\n    col.rgb *=  1./pow((pow(sqrt(dot(dc * 2., dc * 2.)*.4),2.)+1.),3.);\n    \n    if (iFrame != 0)\n        col = texture(iChannel0, uv);\n    \n    // Shading\n    if (hasHit && (iFrame < (SAMPLECOUNT * 6)) && (t < col.a))\n    {\n        col.rgb = vec3(0.8*pow(sin(float(iFrame)*3.),2.), 0.7*cos(float(iFrame)*5.5), sin(float(objectID)*2.0f));\n        col.rgb = cross(col.rgb, normalize(objectPos));\n        col.rgb = col.rgb * 0.5f + 0.5f;\n        col.rgb = col.rgb*pow(length(p.rgb-objectPos),10.)+ 0.05*col.rgb;\n        col.a = t;\n    }    \n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}