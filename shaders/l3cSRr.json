{
    "Shader": {
        "info": {
            "date": "1718959601",
            "description": "Made with ChatGPT",
            "flags": 0,
            "hasliked": 0,
            "id": "l3cSRr",
            "likes": 0,
            "name": "Bit slinger",
            "published": 3,
            "tags": [
                "waves",
                "bitwise"
            ],
            "usePreview": 0,
            "username": "multiphonic",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat getDist(vec3 p) {\n    vec3 modP = mod(p, 2.0) - 1.0; // Create repeating pattern\n    return sdBox(modP, vec3(0.5));\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(0.001, 0.0);\n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));\n    return normalize(n);\n}\n\nvec3 rotate(vec3 p, vec3 r) {\n    mat3 rx = mat3(1.0, 0.0, 0.0,\n                   0.0, cos(r.x), -sin(r.x),\n                   0.0, sin(r.x), cos(r.x));\n    mat3 ry = mat3(cos(r.y), 0.0, sin(r.y),\n                   0.0, 1.0, 0.0,\n                   -sin(r.y), 0.0, cos(r.y));\n    mat3 rz = mat3(cos(r.z), -sin(r.z), 0.0,\n                   sin(r.z), cos(r.z), 0.0,\n                   0.0, 0.0, 1.0);\n    return rz * ry * rx * p;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);  // Ray origin\n    vec3 rd = normalize(vec3(uv, -1.0));  // Ray direction\n\n    vec3 col = vec3(0.0);\n\n    vec3 rot = vec3(iTime * 0.2, iTime * 0.2, iTime * 0.2);\n    ro = rotate(ro, rot);\n    rd = rotate(rd, rot);\n\n    float d = rayMarch(ro, rd);\n    if (d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = getNormal(p);\n        float diff = clamp(dot(n, normalize(vec3(1.0, 1.0, -1.0))), 0.0, 1.0);\n        col = vec3(0.0, 1.0, 1.0) * diff;  // Cyan color\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}