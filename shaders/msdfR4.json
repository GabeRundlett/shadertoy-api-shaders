{
    "Shader": {
        "info": {
            "date": "1712499847",
            "description": "bouncing ball",
            "flags": 32,
            "hasliked": 0,
            "id": "msdfR4",
            "likes": 14,
            "name": "ball in a circle",
            "published": 3,
            "tags": [
                "circle",
                "physics"
            ],
            "usePreview": 0,
            "username": "Dolfun",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec2 uv = (frag_coord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 pos = fetch(iChannel0, STATE_ADDR).xy;\n    vec2 vel = fetch(iChannel0, STATE_ADDR).zw;\n    \n    vec3 color = vec3(0.2);\n    \n    color = mix(vec3(0.9), color, smoothstep(0.0, aa, abs(length(uv) - R) - aa));\n    color = mix(vec3(0.9), color, smoothstep(0.0, aa, length(uv - pos) - r - aa));\n    \n    vec3 trail = fetch(iChannel1, frag_coord).rgb;\n    color += trail;\n    \n    frag_color = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fetch(buf, addr) texelFetch(buf, ivec2(addr), 0)\n#define to_store(buf_pos, addr) (ivec2(buf_pos) == addr)\n\nconst ivec2 STATE_ADDR = ivec2(0, 0);\nconst ivec2 PREV_STATE_ADDR = ivec2(1, 0);\n\nconst vec4 state_0 = vec4(0.0, 0.0, 1.0, 3.0);\n\nconst float r = 0.02;\nconst float R = 0.9;\nconst float g = 9.81;\nconst float e = 0.99;\n\n// anti-aliasing\n#define aa (3./iResolution.y)\n\nfloat sdf_seg_old(vec2 p, vec2 a, vec2 b, float r) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba*h) - r;\n}\n\n// SDF recommeded by: https://www.shadertoy.com/user/FabriceNeyret2\nfloat sdf_seg(vec2 p, vec2 a,vec2 b, float r) { \n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b),\n          c = clamp(h, 0., 1.);\n    return h==c ? length(p - b * h) -r : 1e5; \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 state, in vec2 frag_coord) {\n    if (to_store(frag_coord, STATE_ADDR) || to_store(frag_coord, PREV_STATE_ADDR)) {\n        state = state_0;\n    }\n    if (iFrame > 0) {\n        if (to_store(frag_coord, STATE_ADDR)) {\n            state = fetch(iChannel0, STATE_ADDR);\n            float dt = iTimeDelta;\n            \n            vec2 pos = state.xy;\n            vec2 vel = state.zw;\n            \n            vel.y -= g * dt;\n            \n            if (length(pos + vel * dt) > R - r) {\n                vec2 n = normalize(pos);\n                vel -= (1.0 + e) * dot(vel, n) * n;\n            }\n            \n            pos += vel * dt;\n            state = vec4(pos, vel);\n        } else if (to_store(frag_coord, PREV_STATE_ADDR)) {\n            state = fetch(iChannel0, STATE_ADDR);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec2 uv = (frag_coord * 2.0 - iResolution.xy) / iResolution.y;\n    float dt = iTimeDelta;\n    vec2 curr = fetch(iChannel0, STATE_ADDR).xy;\n    vec2 prev = fetch(iChannel0, PREV_STATE_ADDR).xy;\n    \n    float d;\n    if (iMouse.z > 0.0f) d = sdf_seg_old(uv, curr, prev, 0.005);\n    else d = sdf_seg(uv, curr, prev, 0.005);\n    float t = smoothstep(0.0, aa, d);\n    \n    vec3 color = fetch(iChannel1, frag_coord).rgb;\n    if (color.x > 0.0) color -= 0.25 * dt;\n    color = mix(vec3(0.4), color, t);\n    \n    frag_color = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}