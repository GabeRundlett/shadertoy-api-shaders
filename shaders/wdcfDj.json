{
    "Shader": {
        "info": {
            "date": "1605994442",
            "description": "Curves of constant ratio of the distance to a point and a circle.\n\nInspired by [url]https://www.shadertoy.com/view/tstfWB[/url] by matthen\n\nUse the mouse to set the size of the circle and the position of the point on the x-axis.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdcfDj",
            "likes": 3,
            "name": "Circle Point Distance",
            "published": 3,
            "tags": [
                "circle",
                "quartic",
                "point",
                "conic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Circle Point Distance\n// Matthew Arcus, mla, 2020\n//\n// Inspired by https://www.shadertoy.com/view/tstfWB by matthen:\n// A curve equidistant from a point and a circle is a conic section\n//\n// Here we plot the ratios of the distances from the black point and\n// the black circle - each isoline has the same colour, with the equal\n// ratio conic coloured white (the other curves are quartic).\n//\n// Use the mouse to set the size of the circle and the position of the\n// point on the x-axis.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec3 diagram(vec2 p, float r, float x) {\n  float pwidth = 0.02;\n  float lwidth = 0.005;\n  float xwidth = fwidth(p.x);\n  vec3 col = vec3(0.1); //1.0-vec3(1,1,0.8);\n  vec3 c = vec3(r,0,abs(r));\n  vec2 q = vec2(x,0);\n  float cdistance = circle(p,c);\n  float pdistance = point(p,q);\n  float k = 6.0*log(cdistance/pdistance);\n  float min = -20.0;\n  float max = 20.0;\n  float kwidth = length(vec2(dFdx(k),dFdy(k)));\n  k = clamp(k,min-0.5,max+0.5);\n  //float kwidth = length(vec2(dFdx(k),dFdy(k));\n  float kindex = round(k);\n  vec3 lcol = hsv2rgb(vec3((kindex-min)/(max-min),1,1));\n  if (kindex == 0.0) lcol = vec3(1); // Show ratio = 1 line as white\n  col = mix(lcol,col,smoothstep(0.0,1.5*kwidth,abs(k-kindex)));\n  col = mix(vec3(0),col,smoothstep(lwidth,lwidth+xwidth,cdistance));\n  col = mix(vec3(0),col,smoothstep(pwidth,pwidth+xwidth,pdistance));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 mouse = vec2(0,0);\n  float r = tan(0.309*iTime), x = 1.5*cos(0.25*iTime);\n  if (iMouse.z > 0.0) {\n    mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    r = tan(0.5*PI*mouse.y);\n    x = mouse.x;\n  }\n  vec3 col = diagram(p,r,x);\n  fragColor = vec4(pow(col,vec3(0.4545)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159265;\n\nfloat circle(vec2 p, vec3 c) {\n  return abs(distance(p,c.xy)-c.z);\n}\n\nfloat point(vec2 p, vec2 q) {\n  return circle(p,vec3(q,0));\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}