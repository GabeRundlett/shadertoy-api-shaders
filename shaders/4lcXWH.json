{
    "Shader": {
        "info": {
            "date": "1479374324",
            "description": "Hard shadow projected on a circle.\nYou can move the light with your mouse.\nI plan to add soft shadow in the future.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lcXWH",
            "likes": 11,
            "name": "2D Hard Shadow",
            "published": 3,
            "tags": [
                "2d",
                "shadow",
                "light",
                "circle",
                "hard"
            ],
            "usePreview": 0,
            "username": "qmuntada",
            "viewed": 1020
        },
        "renderpass": [
            {
                "code": "#define\tSUNSIZE\t\t0.2\n#define SUNBRIGHTNESS 0.5\n\n#define CIRCLERADIUS 0.2\n\nfloat Circle(vec2 ro, vec2 ra, vec2 pos, float r)\n{\n\tvec2 oc = ro - pos;\n    vec2 rd = normalize(ro - ra);\n    \n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - r * r;\n    float h = b * b - c;\n    \n    float t = b + sqrt(h);\n    //float t2 = -b + sqrt(h);\n    \n    vec2 e = ro + rd * t;\n    \n    float dist = distance(ro, e) - distance(ro, ra);\n    \n    float ret = 0.0;\n\tif(h < 0.0 || b < 0.0 || dist > 0.0) \n\t\tret = 1.0;\n\treturn ret;\n}\n\nfloat LineSegment(vec2 ro, vec2 rd, vec2 p1, vec2 p2)\n{\n\tvec2 AmC = ro - p1;\n\tvec2 DmC = p2 - p1;\n\tvec2 BmA = normalize(rd - ro);\n\t\n\tfloat denom = (BmA.x*DmC.y)-(BmA.y*DmC.x);\n\t\n\tif (abs(denom) > 0.0001)\n\t{\n\t\tfloat r = ((AmC.y * DmC.x) - (AmC.x * DmC.y)) / denom;\n\t\tfloat s = ((AmC.y * BmA.x) - (AmC.x * BmA.y)) / denom;\n\t\t\n        if (r > 0.0 && s > 0.0 && s < 1.0)\n\t\t{\n            float A1 = rd.y - ro.y;\n            float B1 = ro.x - rd.x;\n            float C1 = A1 * ro.x + B1 * ro.y;\n            \n            float A2 = p2.y - p1.y;\n            float B2 = p1.x - p2.x;\n            float C2 = A2 * p1.x + B2 * p1.y;\n                       \n            float delta = A1 * B2 - A2 * B1;\n            if (abs(delta) < 0.001)\n                return 1.0;\n            \n            vec2 e = vec2((B2*C1 - B1*C2)/delta, (A1*C2 - A2*C1)/delta);\n            float dist = distance(ro, e) - distance(ro, rd);\n            \n            if (dist > 0.0)\n                return 1.0;\n\n            \n\t\t\treturn 0.0;\n\t\t}\n\t}\n\t\n\treturn 1.0;\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 DmC = b - a, AmC = p - a;\n    return length(AmC - DmC * clamp(dot(DmC, AmC) / dot(DmC, DmC), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n\tvec2 R = iResolution.xy;\n    vec2 uv = (U - .5*R) / R.y;\n    O = vec4(0.0);\n    \n    vec2 lightPos =  (iMouse.xy - .5*R) / R.y;\n    \n    vec2 circlePos = vec2(0.0, -0.1);\n    \n    vec2 p1 = vec2(-0.5, 0.25);\n    vec2 p2 = vec2(0.25, 0.40);\n    \n    // lighting\n    vec4 col = vec4(pow(length(uv - lightPos), -SUNBRIGHTNESS)) * SUNSIZE;\n    col = clamp(col, 0., 1.);\n    \n    // circle highlighting\n    if (distance(circlePos, uv) < CIRCLERADIUS)\n    \tcol += vec4(0.5);\n    \n    if (segment(uv, p1, p2) < 0.002)\n        col += vec4(0.5);\n    \n    // hard shadowing\n    float sha = 1.;\n    sha *= Circle(lightPos, uv, circlePos, CIRCLERADIUS);\n    \n    vec2 angle = normalize(lightPos - uv);\n    \n    if (length(lightPos - circlePos) < CIRCLERADIUS) // if light is inside the circle\n        sha -= 1.0;\n    \n    sha *= LineSegment(lightPos, uv, p1, p2);\n    \n    sha = clamp(sha, 0.5, 1.0);\n    col *= sha;\n    \n    O += vec4(col);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}