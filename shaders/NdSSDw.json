{
    "Shader": {
        "info": {
            "date": "1620321062",
            "description": "Alpha prototype. No win state yet but sort of playable. Left player uses WSAD keys, Right player uses Left/Right/Up/Down. Reset time or press backspace to restart map.",
            "flags": 48,
            "hasliked": 0,
            "id": "NdSSDw",
            "likes": 41,
            "name": "Taotris",
            "published": 3,
            "tags": [
                "game",
                "tetris",
                "tetromino",
                "tao"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 2068
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 scale = vec2(FIELDSIZE) / iResolution.xy;\n    \n    vec2 tx = fragCoord * max(scale.x,scale.y) - vec2(0,float(FIELDSIZE.y));\n    vec4 mem = vec4(vec3(0.5),1.0);\n    if ((min(tx.x,tx.y) >= 0.0) && (tx.x < float(FIELDSIZE.x)) && (tx.y < float(FIELDSIZE.y))) {\n        mem = texelFetch(iChannel0, ivec2(tx), 0);\n        if (mem.g > 0.5)\n            mem.r = 1.0 - mem.r;\n    }\n\n    fragColor = vec4(vec3(mem.r),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat4 stone_pattern(int s) {\n    switch(s) {\n    case STONE_NONE: return mat4(0);\n    case STONE_I: return mat4(0,1,0,0,\n                              0,1,0,0,\n                              0,1,0,0,\n                              0,1,0,0);\n    case STONE_O: return mat4(0,0,0,0,\n                              0,1,1,0,\n                              0,1,1,0,\n                              0,0,0,0);\n    case STONE_S: return mat4(0,1,0,0,\n                              0,1,1,0,\n                              0,0,1,0,\n                              0,0,0,0);\n    case STONE_Z: return mat4(0,0,1,0,\n                              0,1,1,0,\n                              0,1,0,0,\n                              0,0,0,0);\n    case STONE_T: return mat4(0,1,0,0,\n                              0,1,1,0,\n                              0,1,0,0,\n                              0,0,0,0);\n    case STONE_L: return mat4(0,1,0,0,\n                              0,1,0,0,\n                              0,1,1,0,\n                              0,0,0,0);\n    case STONE_R: return mat4(0,0,1,0,\n                              0,0,1,0,\n                              0,1,1,0,\n                              0,0,0,0);\n    default: return mat4(0,0,0,0,\n                         0,0,0,0,\n                         0,0,0,0,\n                         0,0,0,0);\n    }\n}\n\n// from https://www.shadertoy.com/view/llySRh\n\n// FYI: LEFT:37  UP:38  RIGHT:39  DOWN:40   PAGEUP:33  PAGEDOWN:34  END : 35  HOME: 36\n// Modifiers: SHIFT: 16 CTRL: 17 ALT: 18\n// Advice:  Mode: keyToggle(key)  Action: keydown(key)+keyclick(modifier)\n#define keyToggle(ascii)  ( texelFetch(iChannel1,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel1,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel1,ivec2(ascii,0),0).x > 0.)\n\n#define shift             ( texelFetch(iChannel1,ivec2(16,0),0).x  > 0.)\n#define ctrl              ( texelFetch(iChannel1,ivec2(17,0),0).x  > 0.)\n#define alt               ( texelFetch(iChannel1,ivec2(18,0),0).x  > 0.)\n#define modifier          ( int(shift) +2*int(ctrl) + 4*int(alt) )\n\n#define K_BACKSPACE 8\n\n#define K_W 87\n#define K_S 83\n#define K_A 65\n#define K_D 68\n\n#define K_LEFT 37\n#define K_UP 38\n#define K_DOWN 40\n#define K_RIGHT 39\n\nmat4 rotate(mat4 m, int r) {\n    switch(r) {\n    case 0: return m;\n    case 1: return\n        mat4(m[3][0], m[2][0], m[1][0], m[0][0],\n             m[3][1], m[2][1], m[1][1], m[0][1],\n             m[3][2], m[2][2], m[1][2], m[0][2],\n             m[3][3], m[2][3], m[1][3], m[0][3]);\n    case 2: return\n        mat4(m[3][3], m[3][2], m[3][1], m[3][0],\n             m[2][3], m[2][2], m[2][1], m[2][0],\n             m[1][3], m[1][2], m[1][1], m[1][0],\n             m[0][3], m[0][2], m[0][1], m[0][0]);\n    case 3: return\n        mat4(m[0][3], m[1][3], m[2][3], m[3][3],\n             m[0][2], m[1][2], m[2][2], m[3][2],\n             m[0][1], m[1][1], m[2][1], m[3][1],\n             m[0][0], m[1][0], m[2][0], m[3][0]);\n    default: return m;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 uv = ivec2(fragCoord);\n    vec4 bstate = texelFetch(iChannel0, BSTATE, 0);\n    int bs = int(bstate.w);\n    int br = int(bstate.z);\n    vec4 wstate = texelFetch(iChannel0, WSTATE, 0);\n    int ws = int(wstate.w);\n    int wr = int(wstate.z);\n    vec4 bwclip = texelFetch(iChannel0, BWCLIP, 0);\n    if ((iFrame == 0) || keyDown(K_BACKSPACE)) {\n        // init\n        if ((uv.x < FIELDSIZE.x) && (uv.y < FIELDSIZE.y)) {\n            fragColor = vec4((uv.x < (FIELDSIZE.x/2))?0.0:1.0, 0.0, 0.0, 1.0);\n        }\n        if (uv == BSTATE) {\n            // position x, position y, rotation, stone type\n            fragColor = vec4(0, FIELDSIZE.y / 2 - 2, 0, 1 + int(hash12(vec2(iFrame,0)) * 7.0));\n        } else if (uv == WSTATE) {\n            fragColor = vec4(FIELDSIZE.x - 4, FIELDSIZE.y / 2 - 2, 2, 1 + int(hash12(vec2(iFrame,1)) * 7.0));\n        } else if (uv == BWCLIP) {\n            // boffset, bsize, woffset, wsize\n            fragColor = vec4(0);\n        }\n    } else {\n        vec4 mem = texelFetch(iChannel0, uv, 0);\n        bool bset = false;\n        bool wset = false;\n        if ((iFrame % 30) == 0) {\n            {\n                // black: z collision check\n                mat4 bm = rotate(stone_pattern(bs), br);\n                ivec2 npos = ivec2(bstate.xy) + ivec2(1,0);\n                for (int y = 0; y < 4; ++y) {\n                    for (int x = 0; x < 4; ++x) {                \n                        if (bm[y][x] > 0.5 && texelFetch(iChannel0, npos + ivec2(x,y), 0).r > 0.5) {\n                            bset = true;\n                        }\n                    }\n                }            \n                if (uv == BSTATE) {\n                    if (!bset) {\n                        mem.xy = vec2(npos);\n                    } else {\n                        mem = vec4(0, FIELDSIZE.y / 2 - 2, 0, 1 + int(hash12(vec2(iFrame,0)) * 7.0));\n                    }\n                }\n            }\n            {\n                mat4 bm = rotate(stone_pattern(ws), wr);\n                // white: z collision check\n                ivec2 npos = ivec2(wstate.xy) - ivec2(1,0);\n                for (int y = 0; y < 4; ++y) {\n                    for (int x = 0; x < 4; ++x) {                \n                        if (bm[y][x] > 0.5 && texelFetch(iChannel0, npos + ivec2(x,y), 0).r < 0.5) {\n                            wset = true;\n                        }\n                    }\n                }            \n                if (uv == WSTATE) {\n                    if (!wset) {\n                        mem.xy = vec2(npos);\n                    } else {\n                        mem = vec4(FIELDSIZE.x - 4, FIELDSIZE.y / 2 - 2, 2, 1 + int(hash12(vec2(iFrame,1)) * 7.0));\n                    }\n                }\n            }\n        } else if (uv == BSTATE) {\n            // y collision check            \n            ivec2 npos = ivec2(bstate.xy);\n            int nr = br;\n            if (keyDown(K_A)) {\n                nr = (nr + 1) % 4;\n            }\n            if (keyDown(K_W)) {\n                npos.y += 1;\n            }\n            if (keyDown(K_S)) {\n                npos.y -= 1;\n            }\n            if ((keyClick(K_D)) && (iFrame % 4 == 0)) {\n                npos.x += 1;\n            }\n            mat4 bm = rotate(stone_pattern(bs), nr);\n            bool blocked = false;\n            for (int y = 0; y < 4; ++y) {\n                for (int x = 0; x < 4; ++x) {                \n                    ivec2 c = npos + ivec2(x,y);\n                    if ((bm[y][x] > 0.5)\n                        && ((c.y < 0)\n                        || (c.y >= FIELDSIZE.y)\n                        || (texelFetch(iChannel0, c, 0).r > 0.5))) {\n                        blocked = true;\n                    }\n                }\n            }            \n            if (!blocked) {\n                mem.xy = vec2(npos);\n                mem.z = float(nr);\n            }\n        } else if (uv == WSTATE) {\n            // y collision check            \n            ivec2 npos = ivec2(wstate.xy);\n            int nr = wr;\n            if (keyDown(K_RIGHT)) {\n                nr = (nr + 1) % 4;\n            }\n            if (keyDown(K_UP)) {\n                npos.y += 1;\n            }\n            if (keyDown(K_DOWN)) {\n                npos.y -= 1;\n            }\n            if ((keyClick(K_LEFT)) && (iFrame % 4 == 0)) {\n                npos.x -= 1;\n            }\n            mat4 bm = rotate(stone_pattern(ws), nr);\n            bool blocked = false;\n            for (int y = 0; y < 4; ++y) {\n                for (int x = 0; x < 4; ++x) {                \n                    ivec2 c = npos + ivec2(x,y);\n                    if ((bm[y][x] > 0.5)\n                        && ((c.y < 0)\n                        || (c.y >= FIELDSIZE.y)\n                        || (texelFetch(iChannel0, c, 0).r < 0.5))) {\n                        blocked = true;\n                    }\n                }\n            }            \n            if (!blocked) {\n                mem.xy = vec2(npos);\n                mem.z = float(nr);\n            }            \n        }\n        if (uv == BWCLIP) {\n            // find cleared rows\n            mem = vec4(0);\n            if (bset) {\n                mat4 bm = rotate(stone_pattern(bs), br);\n                ivec2 npos = ivec2(bstate.xy);   \n                int minrow = FIELDSIZE.x;\n                int maxrow = -1;\n                for (int x = 0; x < 4; ++x) {\n                    bool hastile = false;\n                    bool complete = true;\n                    int xrow = npos.x + x;\n                    for (int y = 0; y < FIELDSIZE.y; ++y) {\n                        ivec2 coord = ivec2(x, y - npos.y);\n                        if (coord.y >= 0 && coord.y < 4 && bm[coord.y][coord.x] > 0.5) {\n                            hastile = true;\n                            continue;\n                        } else if (texelFetch(iChannel0, ivec2(xrow, y), 0).r > 0.5) {\n                            continue;\n                        } else {\n                            complete = false;\n                            break;\n                        }\n                    }\n                    if (complete && hastile) {\n                        minrow = min(minrow, xrow);\n                        maxrow = max(maxrow, xrow);\n                    }\n                }\n                if (minrow <= maxrow) {\n                    mem.xy = vec2(maxrow, maxrow - minrow + 1);\n                }            \n            }\n            if (wset) {\n                mat4 bm = rotate(stone_pattern(ws), wr);\n                ivec2 npos = ivec2(wstate.xy);\n                int minrow = FIELDSIZE.x;\n                int maxrow = -1;\n                for (int x = 0; x < 4; ++x) {\n                    bool hastile = false;\n                    bool complete = true;\n                    int xrow = npos.x + x;\n                    for (int y = 0; y < FIELDSIZE.y; ++y) {                        \n                        ivec2 coord = ivec2(x, y - npos.y);\n                        if (coord.y >= 0 && coord.y < 4 && bm[coord.y][coord.x] > 0.5) {\n                            hastile = true;\n                            continue;\n                        } else if (texelFetch(iChannel0, ivec2(xrow, y), 0).r < 0.5) {\n                            continue;\n                        } else {\n                            complete = false;\n                            break;\n                        }\n                    }\n                    if (complete && hastile) {\n                        minrow = min(minrow, xrow);\n                        maxrow = max(maxrow, xrow);\n                    }\n                }\n                if (minrow <= maxrow) {\n                    mem.zw = vec2(minrow, maxrow - minrow + 1);\n                }            \n            }\n        }\n        if ((uv.x < FIELDSIZE.x) && (uv.y < FIELDSIZE.y)) {\n            ivec4 cl = ivec4(bwclip);\n            if ((cl.y > 0) && (uv.x <= cl.x)) {\n                if ((uv.x - cl.y) < 0)\n                    mem.r = 0.0;\n                else\n                    mem.r = texelFetch(iChannel0, ivec2(uv.x - cl.y, uv.y), 0).r;\n            }\n            if ((cl.w > 0) && (uv.x >= cl.z)) {\n                if ((uv.x + cl.w) >= FIELDSIZE.x)\n                    mem.r = 1.0;\n                else                \n                    mem.r = texelFetch(iChannel0, ivec2(uv.x + cl.w, uv.y), 0).r;\n            }\n            mem.g = 0.0;\n            if (bs != STONE_NONE) {\n                mat4 bm = rotate(stone_pattern(bs), br);\n                ivec2 coord = uv - ivec2(bstate.xy);\n                if (min(coord.x, coord.y) >= 0 && max(coord.x, coord.y) < 4 && bm[coord.y][coord.x] > 0.5) {\n                    if (bset)\n                        mem.r = 1.0;\n                    else\n                        mem.g = 1.0;\n                    \n                }\n            }\n            if (ws != STONE_NONE) {\n                mat4 bm = rotate(stone_pattern(ws), wr);\n                ivec2 coord = uv - ivec2(wstate.xy);\n                if (min(coord.x, coord.y) >= 0 && max(coord.x, coord.y) < 4 && bm[coord.y][coord.x] > 0.5) {\n                    if (wset)\n                        mem.r = 0.0;\n                    else\n                        mem.g = 1.0;\n                    \n                }\n            }\n        }\n        fragColor = mem;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 48 x 10: board\n// row 11 holds stone state\n\n#define FIELDSIZE ivec2(48, 10)\n#define BSTATE ivec2(0, 11)\n#define WSTATE ivec2(1, 11)\n#define BWCLIP ivec2(2, 11)\n\n#define STONE_NONE 0\n#define STONE_I 1\n#define STONE_O 2\n#define STONE_S 3\n#define STONE_Z 4\n#define STONE_T 5\n#define STONE_L 6\n#define STONE_R 7\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}