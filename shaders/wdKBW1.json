{
    "Shader": {
        "info": {
            "date": "1607050692",
            "description": "basic 2d city-v2",
            "flags": 0,
            "hasliked": 0,
            "id": "wdKBW1",
            "likes": 2,
            "name": "basic 2d city-v2",
            "published": 3,
            "tags": [
                "basic2dcityv2"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-----jorge flores p.  //03-dic-2020\n#define saturate(x) clamp(x, 0.0, 1.0) \nconst float LineWidth=0.01;\n\nfloat oU( float d1, float d2 ) { return  min(d1,d2); }\nfloat oS( float d1, float d2 ) { return max(-d1,d2); }\nfloat oI( float d1, float d2 ) { return max(d1,d2); }\n\n\n\nvec2 oU2( vec2 d1, vec2 d2 ) \n{\n\n    if (d1.x<d2.x)\n       return d1; \t\n    else\n       return d2;\n}\n\nvec2 oS2( vec2 d1, vec2 d2 )\n{\n\n    if  (-d1.x<d2.x)\n        return d1;\n    else\n        return d2;\n}\n\nvec2 oI2( vec2 d1, vec2 d2 ) \n{\n\n    if (d1.x>d2.x)\n       \treturn d1;\n    else\n        return d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2) {\n\treturn vec2(max(-d2.x, d1.x), 2.0);\n}\n\n\n\nvec2 opRepvec2( in vec2 p, in vec2 c )\n{\n    vec2 q = mod(p+0.5*c,c)-0.5*c;\n    return  q ;\n}\n\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\nfloat rand(float x)\n{\n\treturn fract(sin(x)*1276818.27865);\n}\n\nfloat rand2(vec2 x)\n{\n\treturn fract(sin(dot(x ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvec2 nubes(vec2 p)\n{    \n    vec2 centro=vec2(0.0,0.0);\n    \n    float c1a= circ(p-vec2(0.0,0.05), 0.105);\n    float c2a= circ(p-vec2(0.15,0.02), 0.065);\n    float c3a= circ(p-vec2(-0.15,0.02), 0.065);\n    float b1a=sdBox(p-vec2(0.0,-0.05), vec2(0.22,0.045 ) );\n    \n    \n    float c1b= circ(p-vec2(0.0,0.05), 0.108);\n    float c2b= circ(p-vec2(0.15,0.02), 0.068);\n    float c3b= circ(p-vec2(-0.15,0.02), 0.068);\n    float b1b=sdBox(p-vec2(0.0,-0.05), vec2(0.22,0.047 ) );\n    \n    \n    \n    float resa=oU(c1a, c2a);\n    resa=oU(resa, c3a);\n    \n    float resb=oU(c1b, c2b);\n    resb=oU(resb, c3b);\n\n    resa=oS(resa,resb);\n \n     resa=oS(  b1a,resa );\n     resb=oS(  b1b,resb );\n \n    vec2 res2= oU2(  vec2(resb,1.0) ,vec2(resa,0.0));\n    \n    \n\treturn res2;\n    \n}\n\nvec2 Ciudad(vec2 p)\n{\n    \n    float b1= sdBox( p-vec2(0.0),vec2(0.08,0.2) );\n    float b2= sdBox( p-vec2(0.2,0.1),vec2(0.08,0.32) );\n    float b3= sdBox( p-vec2(0.5,0.2),vec2(0.18,0.4) );\n    \n    //ventanas\n    float b4= sdBox( p-vec2(0.0,0.0),vec2(0.06,0.05) );\n    float b5= sdBox( p-vec2(0.0,-0.12),vec2(0.06,0.05) );\n    float b6= sdBox( p-vec2(0.0, 0.12),vec2(0.06,0.05) );\n    \n    b1=oS(b4, b1);\n    b1=oS(b5, b1);\n    b1=oS(b6, b1);\n    \n    vec2 res= vec2(9999.0,0.0);\n    \n    \n    res=oU2(res, vec2(b1,3.0));\n    res=oU2(res, vec2(b2,6.0));\n    res=oU2(res, vec2(b3,5.0));\n    \n    //ventana\n    res=oU2(res, vec2(b4,2.0));\n    res=oU2(res, vec2(b5,2.0));\n    res=oU2(res, vec2(b6,2.0));\n   \n    return res;\n}    \n    \n\nvec2 edificio(vec2 p)\n{\n   \tfloat b1= sdBox( p-vec2(0.0),vec2(0.18,0.3) );\n\n    vec2 pp= opRepvec2(p, vec2(0.25,0.18) );\n\n    pp.x=max(p.x,-0.5);\n\n    \n    float b4= sdBox( pp,vec2(0.08,0.05) );\n\n    b4=oS(b4,b1);\n    \n    vec2 res= vec2(9999.0,0.0);\n\n    res=oU2(res, vec2(b4,6.0));\n    \n    return res;\n    \n}   \n\nvec2 edificioMedida(vec2 p, vec2 med)\n{\n\n   \tfloat b1= sdBox( p-vec2(0.0),med );\n    \n    vec2 pp= opRepvec2(p, vec2(0.25,0.18) );\n    pp.x=max(p.x,-0.5);\n    float b4= sdBox( pp,vec2(0.08,0.05) );\n    \n    b4=oS(b4,b1);\n    \n    vec2 res= vec2(9999.0,0.0);\n\n    res=oU2(res, vec2(b4,6.0));\n    \n    return res;\n    \n}   \n\n\nvec2 vehiculo(vec2 p)\n{    \n    float b1= sdBox(p-vec2(0.0,0.0), vec2(0.22,0.08) );\n    float c1= circ(p-vec2(-0.1,-0.1), 0.05);\n    float c2= circ(p-vec2(0.1,-0.1), 0.05);\n    \n    vec2 res= vec2(9999.0,0.0);\n    b1=oS(c1,b1);\n    b1=oS(c2,b1);\n    \n    res=oU2(res, vec2(b1,1.0));\n    res=oU2(res, vec2(c1,2.0));\n    res=oU2(res, vec2(c2,2.0));\n    \n    return res;\n}    \n\n\nvec2 estrella(vec2 p)\n{\n    vec2 res= vec2(9999.0,0.0);\n    float sstar1= sdStar5( p-vec2(-0.5,0.4),0.25+0.20*sin(iTime), 0.43);\n    float sstar2= sdStar5( p-vec2(-0.5,0.4),0.25+0.20*sin(iTime), 0.3);\n    \n    sstar1=oS(sstar2,sstar1);\n\n    res=oU2(res, vec2(sstar1,0));\n    res=oU2(res, vec2(sstar2,19));\n    \n    return res;    \n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col=vec3(0.2,0.478,.13);\n   \n    \n    \n\n    vec2 p = (2.*fragCoord-R)/R.y;\n    \n    vec2 ap= abs(p);\n    p.y-=.25;\n    \n    float px=-2.0+mod(iTime*0.8, 12.0 );\n    vec2 mover=vec2(px,0.0);\n    \n    float cielo=box( p-vec2( 0.0,0.15), vec2(4.0,0.6));\n    \n  \tfloat sdb6=box( p-vec2( 0.0,-0.45), vec2(2.9,0.016));\n    \n    //nubes\n    vec2 n1= nubes(p-mover);\n    vec2 n2= nubes(p-mover+vec2(0.30,0.125));\n    vec2 n3= nubes(p-mover+vec2(1.20,-0.5));\n    vec2 n4= nubes(p-mover+vec2(2.20,-0.15));\n    vec2 n5= nubes(p-mover+vec2(3.80,-0.25));\n    vec2 n6= nubes(p-mover+vec2(4.80,-0.05));\n    vec2 n7= nubes(p-mover+vec2(6.80,0.05));\n    \n    \n    vec2 c1= Ciudad(p-vec2(0.0,-0.22));\n    \n    px=-2.0+mod(iTime*0.5, 5.0 );\n    vec2 mover2=vec2(px,0.0);\n    vec2 auto1= vehiculo(p-vec2(0.0,-0.8)+mover2);\n    \n    \n    \n    vec2 sstar1 = estrella( p);\n    \n    \n    vec2 ed1= edificio(p-vec2(-0.4,-0.120));\n    vec2 ed2= edificio(p-vec2(-0.8,-0.120));\n    vec2 ed3= edificioMedida( p-vec2(-1.5,-0.10), vec2(0.18,0.43));\n    vec2 ed4= edificioMedida( p-vec2(1.5,-0.10), vec2(0.28,0.6));\n    \n        \n    \n    cielo = SS(cielo);\n    sdb6 = SS(sdb6);\n    \n    n1.x = SS(n1.x); ///nube\n    n2.x = SS(n2.x);\n    n3.x = SS(n3.x);\n    n4.x = SS(n4.x);\n    n5.x = SS(n5.x);\n    n6.x = SS(n6.x);\n    n7.x = SS(n7.x);\n\n    \n    c1.x = SS(c1.x);\n    \n    \n    \n    sstar1.x = SS(sstar1.x);\n    ed1.x=SS(ed1.x);\n    ed2.x=SS(ed2.x);\n    ed3.x=SS(ed3.x);\n    ed4.x=SS(ed4.x);\n    \n    \n    auto1.x= SS(auto1.x);\n    vec3 colAuto=getColor(int(auto1.y));\n    vec3 colEdificio1=getColor(int(c1.y));\n    \n    \n    \n    vec3 colNube1=getColor(int(n1.y));\n    vec3 colNube2=getColor(int(n2.y));\n    vec3 colNube3=getColor(int(n3.y));\n    vec3 colNube4=getColor(int(n4.y));\n    vec3 colNube5=getColor(int(n5.y));\n    vec3 colNube6=getColor(int(n6.y));\n    vec3 colNube7=getColor(int(n7.y));\n    \n    vec3 colestrella=getColor(int(sstar1.y));\n    vec3 coled1=getColor(int(ed1.y));\n    vec3 coled2=getColor(int(ed1.y+1.0));\n    vec3 coled3=getColor(int(ed1.y+2.0));\n    vec3 coled4=getColor(int(ed1.y+4.0));\n    \n       \n    col = mix(col, vec3(0.3,0.5,1.0), cielo);\n    col = mix(col, colEdificio1, c1.x);\n    col = mix(col, colestrella, sstar1.x);\n    \n    col = mix(col, vec3(0.3), sdb6);\n    \n    col = mix(col, colNube1, n1.x);\n    col = mix(col, colNube2, n2.x);\n    col = mix(col, colNube3, n3.x);\n    col = mix(col, colNube4, n4.x);\n    col = mix(col, colNube5, n5.x);\n    col = mix(col, colNube6, n6.x);\n    col = mix(col, colNube7, n7.x);\n\t\n    \n    col = mix(col, coled1, ed1.x);\n    col = mix(col, coled2, ed2.x);\n    col = mix(col, coled3, ed3.x);\n    col = mix(col, coled4, ed4.x);\n    \n    col = mix(col, colAuto, auto1.x);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1) //30\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n   // if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n\nfloat box(vec2 p, vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat circ(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}