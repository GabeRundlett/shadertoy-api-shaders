{
    "Shader": {
        "info": {
            "date": "1697847851",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mdKfzR",
            "likes": 53,
            "name": "Year of Truchets #057",
            "published": 3,
            "tags": [
                "raymarching",
                "truchet",
                "pattern"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #057\n    10/20/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n    see all https://www.shadertoy.com/user/byt3_m3chanic/sort=newest\n*/\n\n#define R   iResolution\n#define M   iMouse\n#define T   iTime\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MAX_DIST    100.\n#define MIN_DIST    .0001\n\nfloat hash21(vec2 p){return fract(sin(dot(p,vec2(23.43,84.21)))*4832.323); }\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv),f = fract(uv);\n    float a = hash21(i),b = hash21(i+vec2(1,0)),c = hash21(i+vec2(0,1)),d = hash21(i+vec2(1,1));\n    vec2 u = f*f*(3.-2.*f);\n    return mix(a,b,u.x) + (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;\n}\n\nfloat box(vec3 p, vec3 s) {p=abs(p)-s;return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);}\n\nvec3 hit=vec3(0),hitPoint,gid,sid,speed=vec3(0);\nfloat wtime;\n\nconst float size = 1.3;\nconst float hlf = size/2.;\nconst float dbl = size*2.;\n          \nvec2 map(in vec3 p) {\n    vec2 res = vec2(1e5,0.);\n    vec3 ps = p, q;\n    \n    p += speed;\n\n    float id,nz=0.;\n    for(int i = 0; i<2; i++) {\n\n        float cnt = i<1 ? size : dbl;\n        q = vec3(p.x-cnt,p.yz);\n        id = floor(q.x/dbl) + .5;\n        q.x -= (id)*dbl;\n        float qf = (id)*dbl + cnt;\n\n        vec2 nvec = i==1 ? vec2((qf*2.35)+wtime,q.z*.145): vec2(q.z*.185,(qf*5.175)+wtime);\n        nz = noise(nvec);\n        \n        float dz = nz*1.25;\n        float tz = dz+dz*sin(q.z*.55);\n        tz += dz+dz*cos(q.x*.35);\n        q.y += tz;\n\n        float d = box(q,vec3(.52,.52,50))-.05;\n\n        if(d<res.x){\n            res = vec2(d,1.);\n            hitPoint = q;\n            gid = vec3(qf,nz,float(i));\n        }\n    }\n    return res;\n}\n\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\nvec2 marcher(vec3 ro, vec3 rd){\n\tfloat d = 0.,m = 0.;\n    for(int i=0;i<90;i++){\n    \tvec2 ray = map(ro + rd * d);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST) break;\n        d += i<30?ray.x*.4:ray.x*.8;\n        m  = ray.y;\n    }\n\treturn vec2(d,m);\n}\n\nvec3 hue(float t){ \n    t+=50.;\n    return .65+.45*cos(13.+PI2*t*(vec3(.25,.11,.99)*vec3(.95,.97,.98))); \n}\n\nvec3 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, inout float d, vec2 uv) {\n\n    vec3 C = vec3(0);\n    vec2 ray = marcher(ro,rd);\n    float m = ray.y;\n    d = ray.x;\n\n    if(d<MAX_DIST)\n    {\n        sid = gid;\n        hit = hitPoint;\n        \n        vec3 p = ro + rd * d,\n             n = normal(p,d);\n             \n        vec3 lpos =vec3(-10.,5,-12.),\n             l = normalize(lpos-p),\n             h = vec3(0), \n             h2 = vec3(0);\n        \n        float shdw = 1.,\n              diff = clamp(dot(n,l),0.,1.);\n              \n        for( float t=.1; t < 11.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 11.*h/t);\n            t += h;\n            if( shdw<MIN_DIST || t>11. ) break;\n        }\n        diff = mix(diff,diff*shdw,.75);\n\n        float bnd = hash21(sid.xx);\n        float snd = fract(bnd*321.7) *3.-1.5;\n\n        vec3 aN = abs(n);\n        ivec3 idF = ivec3(n.x<-.25? 0 : 5, n.y<-.25? 1 : 4, n.z<-.25? 2 : 3);\n        int face = aN.x>.5? idF.x : aN.y>.5? idF.y : idF.z;\n        \n        vec2 hpp;\n        if( face == 0 ){  \n            hpp = hit.zy; \n            hpp.x+=T*snd;\n        } else {\n            hpp = hit.xz; \n            hpp.y+=T*snd;\n        }\n        vec2 dv = fract(hpp*2.)-.5,\n             id = floor(hpp*2.);\n\n        float ch = mod(id.x+id.y,2.)*2.-1.;\n        float px = 12./R.x;\n\n        float rnd = hash21(id+sid.xx);\n        \n        if(rnd<.45) dv.x = -dv.x;\n\n        vec2 gx = length(dv-.5)<length(dv+.5) ? vec2(dv-.5) : vec2(dv+.5);\n        float cx = length(gx)-.5;\n        \n        if(rnd>.65 && bnd<.75) cx = min(length(dv.x)-.005,length(dv.y)-.005);\n  \n        if (bnd<.25) cx = abs(cx)-.25;\n        if (bnd>.75) {\n            cx = (ch>.5 ^^ rnd<.45) ? smoothstep(px,-px,cx):smoothstep(-px,px,cx);\n        } else {\n            cx = smoothstep(px,-px, bnd>.7 ? abs(cx)-.2 : abs(cx)-.1 );\n        }\n    \n        h2 = vec3(.5);\n        h  = hue((T*.1)+(floor(sid.z+sid.y)-(hit.z*.085)-(p.x*.1)));\n        \n        h = mix(h,h2,cx);\n        ref = mix(vec3(0),vec3(.5),cx);\n \n        C = diff * h;\n        \n        ro = p+n*.01;\n        rd = reflect(rd,n);\n    } \n    \n    return C;\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{   \n\n    wtime=T*.4;\n    speed = vec3(T*.45,0,0);\n    \n    float zoom = 11.;\n\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(uv*zoom,-(zoom+7.));\n    vec3 rd = vec3(0.,0.,1.);\n\n    //camera\n    mat2 rx = rot(-.6), ry = rot(.6);\n    \n    ro.yz *= rx, ro.xz *= ry;\n    rd.yz *= rx, rd.xz *= ry;\n\n    // reflection loop (@BigWings)\n    vec3 C = vec3(0), ref=vec3(0), fil=vec3(1);\n    vec4 FC = vec4(0);\n    \n    float d =0., a = 0., bnc = 2.;\n    for(float i=0.; i<bnc; i++) {\n        vec3 pass = render(ro, rd, ref, d, uv);\n        C += pass.rgb*fil;\n        fil*=ref;\n         if(i==0.) FC = vec4(vec3(.025),exp(-.000005*d*d*d*d));\n    }\n    \n    C = mix(C,FC.rgb,1.-FC.w);\n    C=pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}