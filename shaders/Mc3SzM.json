{
    "Shader": {
        "info": {
            "date": "1713810962",
            "description": "NZXT 3d / reflections| Was playing around to make something for wallpaper and got stuck in shader land.",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc3SzM",
            "likes": 12,
            "name": "NZXT 3D font shader",
            "published": 3,
            "tags": [
                "raymarching",
                "logo",
                "typography",
                "nzxt"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    NZXT logo with 2d SDF's extruded /\n    04/21/24 | @byt3_m3chanic\n\n    Did Soundcloud break shadertoy again?\n*/\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MIN_DIST 1e-4\n#define MAX_DIST 50.\n\nmat2 rot (float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat sampleFreq(float freq) { return texture(iChannel0, vec2(freq, .25)).x;}\nfloat hash21( vec2 p ) { return fract(sin(dot(p,vec2(23.43,84.21))) *4832.3234); }\nvec3 hit,hp;\nmat2 r56,r56n;\n//@iq box and extrude\nfloat box( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat text_(vec2 p){\n    return box(p,vec2(.275,.275));\n}\n\nfloat text_n(vec2 p){\n    float d = box(vec2(abs(p.x)-.17,p.y),vec2(.08,.275));\n    vec2 pv = p*r56;\n    float e = box(pv,vec2(.075,.325));\n\n    return max(min(d, e),text_(p));\n}\n\nfloat text_z(vec2 p){\n    float d = box(p-vec2(-.045,.25),vec2(.2,.115));\n    d = min(d,box(p+vec2(-.045,.25),vec2(.2,.115)) );\n    vec2 pv = p*r56n;\n    float e = box(pv,vec2(.075,.375));\n\n    return max(min(d, e),text_(p));\n}\n\nfloat text_x(vec2 p){\n    vec2 pv = p*r56n;\n    float d = box(pv,vec2(.08,.4));\n    \n    pv = p*r56;\n    float e = box(pv,vec2(.08,.4));\n\n    return max(min(d, e),text_(p));\n}\n\nfloat text_t(vec2 p){\n    float d = box(p,vec2(.085,.275));\n    float e = box(p-vec2(0,.25),vec2(.275,.115));\n\n    return max(min(d, e),text_(p));\n}\n\n//@iq \nfloat opx( in vec3 p, float d, in float h )\n{\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nconst vec2 size = vec2(3.,1.75);\nconst vec2 hlf = size/2.;\n\nvec2 map(vec3 p) {\n    vec2 res = vec2(1e5,0);\n\n    vec3 q = (p-vec3(0,.35,0))*(.5);\n\n    float d = text_n(q.xy+vec2(.90,0));\n    d = min(d,text_z(q.xy+vec2(.30,0)));\n    d = min(d,text_x(q.xy-vec2(.30,0)));\n    d = min(d,text_t(q.xy-vec2(.90,0)));\n    \n    d = opx(q,d,.15);\n    \n    if(d<res.x) {\n        res=vec2(d,1);\n        hit=p;\n    }\n\n    float f = p.y+1.;\n    if(f<res.x) {\n        res=vec2(f,2);\n        hit=p;\n    }\n    return res;\n}\n\nvec3 normal(vec3 p, float t)\n{\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\nvec3 FC = vec3(0.071,0.016,0.106);\n\nvec3 tile(vec3 hp){\n\n    vec2 id   = floor(hp.xz*3.);\n    vec2 grid = fract(hp.xz*3.)-.5;\n\n    float ns = hash21(id);\n    float px = fwidth(hp.x);\n    float sz = sampleFreq(ns);\n    \n    vec3 clr = .5 + .4 *sin((12.+ns)*2.75+ vec3(2.5,1.,.5));\n    float df = box(grid,vec2(sz*.45))-.075;\n    vec3 c = sz>.25 ? mix(vec3(0),clr,smoothstep(px,-px,df)) :vec3(0);\n\n    return c;\n}\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last, inout float d) {\n\n    vec3 C = vec3(0);\n    float m = 0.;\n    vec3 p = ro;\n    \n    for(int i=0;i<128;i++) {\n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST)break;\n        d += ray.x;\n        m  = ray.y;\n    } \n    hp = hit;\n    \n    float alpha = 0.;\n    if(d<MAX_DIST)\n    {\n        vec3 n = normal(p,d);\n        vec3 lpos =  vec3(12,8,3);\n        vec3 l = normalize(lpos-p);\n\n        float diff = clamp(dot(n,l),0.,1.);\n  \n        vec3 h = vec3(.05);\n\n        if(m==1.) {\n            h= .45 + .4 *sin((hp.y+48.5)*5.25+ vec3(2.5,1.,.5));\n            ref=h*.65;\n        }\n        if(m==2.) {\n            hp.z+=T*2.15;\n            h = tile(hp);\n            ref = vec3(.35);\n         }\n\n        C = h*diff;\n        C = mix(FC,C,  exp(-.00005*d*d*d));\n    \n        ro = p+n*.001;\n        rd = reflect(rd,n);\n    \n    }else{\n        C = FC;\n    } \n    return vec4(C,alpha);\n}\nfloat zoom = 6.;\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    r56 = rot(.56);\n    r56n = rot(-.56);\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    \n    FC = .5 + .4 *sin((uv.y+47.)*2.75+ vec3(2.5,1.,.5));\n    vec3 ro = vec3(0,0,4.);\n    vec3 rd = normalize(vec3(uv, -1));\n\n    float x = M.xy==vec2(0) || M.z<0. ? 0. : (M.y / R.y * .2 - .1) * PI;\n    float y = M.xy==vec2(0) || M.z<0. ? 0. : (M.x / R.x * .2 - .1) * PI2;\n    \n    mat2 rx = rot(.28+x-.2*cos(T*.12)), ry = rot(y+.3*sin(T*.25));\n    ro.yz *= rx,ro.xz *= ry;\n    rd.yz *= rx,rd.xz *= ry;\n\n    vec3 C = vec3(0),ref=vec3(0),fil=vec3(1);\n    \n    float d = 0.,a = 0.;\n    float numBounces = 3.;\n    \n    for(float i=0.; i<numBounces; i++) {\n        d = 0.;\n        vec4 pass = render(ro, rd, ref, i==numBounces-1., d);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.) a = d;\n    }\n\n    C = mix(C,clamp(C+.025,C,vec3(1)),hash21(uv));\n    C = mix(FC,C,  exp(-.0015*a*a*a));\n\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}