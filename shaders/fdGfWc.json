{
    "Shader": {
        "info": {
            "date": "1658887748",
            "description": "nave ref",
            "flags": 0,
            "hasliked": 0,
            "id": "fdGfWc",
            "likes": 4,
            "name": "nave ref",
            "published": 3,
            "tags": [
                "naveref"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n//nave reflect-----26-jul-2022\n\nfloat tg;\n//operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n///----------Operacion de Distancia--------\nfloat Intersect(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Union(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Difference(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n\n//iq\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n//https://www.shadertoy.com/view/WlsSWS\nfloat pathterrain(float x,float z)\n{   // Common height function for path and terrain\n    return  sin(x*.5 )*1.+cos(z*.3 )*0.3 +cos(x*3.+z )*0.1+sin(x-z*.2 )*0.2;\n}\n\n\n//noise\n///https://www.shadertoy.com/view/ftd3zX\nfloat random(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) +(d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 p) {\n    float v = 0.0;\n    float a = 1.;\n    mat2 rotMat = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n    for(int i = 0; i < 2; ++i) {\n        p = 1.6 * rotMat * p + 100.;\n        a *= 0.5;\n        v += a * noise(p);\n    }\n    return v;\n}\n\nvec2 nave(vec3 p)\n{\n    vec2 res= vec2(9999.0, -1.0);  \n    vec3 p0=p;\n    \n     float d1a= sdEllipsoid(p, vec3(7.0,5.0,10.0) );\n    float d1b= sdEllipsoid(p, vec3(7.0,5.0,10.0) );\n    p.z-=5.0;\n    float d2a= sdBox(p, vec3(8.0,6.0,7.0) );\n    p.z+=10.0;\n    float d2b= sdBox(p, vec3(8.0,6.0,5.0) );\n    \n    d1a=Difference(d1a, d2a);\n    d1b=Difference(d1b, d2b);\n    p=p0;\n    //cruz\n    float d3a= sdBox(p,vec3(0.5,6.0,11.0) );\n    float d3b= sdBox(p,vec3(10.0,0.5,11.0) );\n    \n    float d1aa= Intersect(d1a,d3a);\n    float d1bb= Intersect(d1a,d3b);\n    res =opU2(res, vec2(d1a,201.0));\n    res =opU2(res, vec2(d1b,2.0));\n    res =opU2(res, vec2(d1aa,0.0));\n    res =opU2(res, vec2(d1bb,0.0));\n    p.y+=1.0;\n    float d4a=sdBox(p, vec3(12.,0.5,1.0) );\n    res =opU2(res, vec2(d4a,0.0));\n    return res;\n}\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  \n     p.y=p.y+10.0;\n    vec3 p0=p;\n    float h1= pathterrain(p.x*0.5,p.z);\n\tfloat planeDist1 = p.y+10.0+h1;  //piso inf\n    \n    res =opU2(res, vec2(planeDist1,7.0));\n    float t=iTime;\n    p.y+=3.0*sin(t)-5.0;\n    p.x+=3.0*cos(t);\n    p.z-=tg;\n    p= rotate_y(p, clamp(sin(iTime*0.5),-0.25,0.25));\n    vec2 res2= nave(p-vec3(0.0,15.0,0.0));\n    res =opU2(res, res2);\n    p=p0;\n    float n1=fbm(floor(p.xz*0.35));\n        \n    if (n1>0.5)\n    {\n        p.x= opRep1D( p.x, 10.0 );\n        p.z= opRep1D( p.z, 5.0 );\n        p.y-=5.0;\n        float d4a= sdBox(p,vec3(5.0,5.0*n1,5.0)-0.01 );\n        res =opU2(res, vec2(d4a,4.0));\n    }\n    else\n    {\n        p.x= opRep1D( p.x, 5.0 );\n        p.z= opRep1D( p.z, 10.0 );\n        float d4a= sdBox(p,vec3(5.0,5.0*n1+5.0,5.0) )-0.01;\n        res =opU2(res, vec2(d4a,4.0));\n    }\n    \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 pallete(float t) {\n    vec3 a = vec3(0.2);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b * cos(6.28318 * (c*t + d));\n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n    float shadow = getSoftShadow(worldPos, L);// shadows\n        \n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;\n       return colOut;\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n   \treturn sky;\n   \n}\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n     if (id_color<40) { colobj=getColor(int( id_color));  return colobj; }\n   if (id_color==201 ) return vec3(1.0);\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd) \n{   vec3 p,colobj,col = vec3(0.0),result;\n\tvec2 t;\n    vec3 rcol=vec3(0);\n    \n    for(int i=0; i<3;i++)\n    {  vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n       if(hit.x<MAX_DIST)\n       { // geometry, hit position, normal, reflect\n\t    p =ro + rd * hit.x;\n        vec3 nor=GetNormal(p);\n\t\tvec3 ref = reflect(rd, nor);\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        \n        result= lightingv3(nor, p,light_pos1,rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd,ro,colobj,hit.x)*light_color2;\n        rcol= result/2.0;\n        rcol= (ACESFilm(rcol)+linear2srgb(rcol)+rcol+ exposureToneMapping(3.0, rcol))/4.0 ; \n             // set up the ray orgin and direction for reflection.\n\t\tro = p + nor*0.001;\n        if (int(hit.y)==201) { rd =ref; rcol-=vec3(0.15); }\n              // lighten intensity on each successive reflect.\n\t\tif(i == 0) col = rcol;\n\t\telse col = mix(rcol, col, 1.0 - exp(-0.8*float(i)));\n\t  } \n     else if(hit.x>MAX_DIST)\n    col = mix(render_sky_color(rd), col, 1.0 - exp(-0.8*float(i)));\n\t}\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouseUV = iMouse.xy/iResolution.xy; // Range: <0, 1>\n   \n    float t0=iTime;\n    tg=mod(t0*5.0,500.0);\n \tlight_pos1= vec3(-10.0, 120.0, -25.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n    \n   vec3 ro=vec3(0.0,7.0,-25.0+tg);\n    vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   \n    light_pos1+=ro;\n    light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\n#define PI 3.14159265\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),//21\nvec3(0, 1, 1), //22 \nvec3(0.333, 0.803, 0.988),//23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),//24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),//25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),//26\nvec3(0.1, 0.5, 1.0),//27   \nvec3(0.0, 0.6, 0.0),//28 \nvec3(0.1,0.1,0.7), //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9), //32\nvec3(0.7333, 0.1412, 0.1412), //33\nvec3(0.1843, 0.3333, 0.1843), //34\n vec3(0.6549, 0.6549, 0.9922), //35\n vec3(0.8549, 0.8549, 0.8549)  //36\n);\n\nvec3 getColor(int i)\n{   //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 )  return Arrcolores[i];\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}