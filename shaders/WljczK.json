{
    "Shader": {
        "info": {
            "date": "1594836666",
            "description": "color and noise and color and noise and color and noise and cells",
            "flags": 0,
            "hasliked": 0,
            "id": "WljczK",
            "likes": 3,
            "name": "Noisy Colorful Cells",
            "published": 3,
            "tags": [
                "noise",
                "color",
                "cell"
            ],
            "usePreview": 0,
            "username": "NightJolt",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "vec2 random2(vec2 p) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec2 effect(vec2 p) {\n    float ang = iTime * 0.1;\n    mat2x2 rot = mat2x2(cos(ang), -sin(ang), sin(ang), cos(ang));\n    \n    p *= rot;\n    \n    return p;\n}\n\nvec3 noise_map(vec2 p) {\n    vec2 cell = floor(p);\n    vec2 point = fract(p);\n    \n    float min_dist = 1.;\n    \n    for (int x= -1; x <= 1; x++) {\n        for (int y= -1; y <= 1; y++) {\n            vec2 new_cell = vec2(x, y);\n            vec2 new_point = random2(new_cell + cell);\n            \n            float offset = texelFetch(iChannel0, ivec2(.7, 0), 0).x;\n            \n            new_point = sin(new_point * sin(iTime * .4) * 5. + iTime + offset) * .5 + .5;\n            \n            float dist = length(new_cell + new_point - point);\n            \n            min_dist = min(min_dist, dist);\n        }\n    }\n    \n    vec3 color = vec3(min_dist);\n    color *= color;\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float screen_ratio = iResolution.x / iResolution.y;\n    //uv = fract(uv * 3.);\n    uv -= sin(iTime * .3) * .1 + .5;\n    uv.x *= screen_ratio;\n    vec3 color;\n    \n    uv *= 20.;\n    \n    uv = effect(uv);\n    \n    float offset_noise_x = noise_map(uv).x;    \n    float offset_noise_y = noise_map(uv + vec2(1., 1.)).x;\n    float offset_noise_z = noise_map(uv + vec2(2., 2.)).x;\n    \n    uv += (vec2(offset_noise_x) - .5) * .1;\n    color += vec3(offset_noise_x, offset_noise_y, offset_noise_z);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}