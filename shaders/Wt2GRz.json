{
    "Shader": {
        "info": {
            "date": "1558291943",
            "description": "Signed distance to a hexagram",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt2GRz",
            "likes": 4,
            "name": "Hexagram distance",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "hexagram"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 479
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Signed distance to a hexagram.\n// Coloring from one of IQ's 2D distance fields(https://www.shadertoy.com/view/llVyWW)\n// As I recall sdTriangle was based on Shanes comment for sdHexagon in https://www.shadertoy.com/view/llVyWW\n\n#define USE_IQ_HQ 1 //use IQ version\n\n//IQ version with correct internal distance\nfloat sdHexagramIQ( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.86602540378,0.57735026919,1.73205080757);\n\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n \tp -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n// signed distance to a hexagram(internal dist is off some)\nfloat sdHexagram( in vec2 p, in float r )\n{\n    vec2 ap = abs(p);\n    \n    //This line makes it a hexagram instead of a triangle\n    p.y = (ap.x*1.73205080757f > ap.y ? ap.y : -ap.y);\n    \n    const vec3 k = vec3(-.5f, 0.86602540378f, 1.73205080757f); // pi/3: -cos, sin, tan.\n\n    p.x = ap.x;\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    return length(p-vec2(clamp(p.x,-r*k.z,r*k.z),r))*sign(p.y-r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    #if USE_IQ_HQ == 1\n\tfloat d = sdHexagramIQ( p, 0.35 );\n\t#else\n    float d = sdHexagram( p, 0.35 );\n    #endif\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}