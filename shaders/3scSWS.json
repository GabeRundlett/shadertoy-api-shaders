{
    "Shader": {
        "info": {
            "date": "1572713326",
            "description": "Sky colors, prototyping for a game",
            "flags": 0,
            "hasliked": 0,
            "id": "3scSWS",
            "likes": 0,
            "name": "Sky colors",
            "published": 3,
            "tags": [
                "sky"
            ],
            "usePreview": 0,
            "username": "CobaltXII",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "// Times:\n//   0    Sunrise\n//   6    Afternoon\n//   12   Sunset\n//   18   Midnight\n// nightTimeOffset is a value of 1 used to make the day 14 hours and the night 10 hours\n// Sunrise is offset by -nightTimeOffset\n// Sunset is offset by +nightTimeOffset\n// twilightTimeOffset is a value of 0.25 used to make the sky purple right after sunrise and right before sunset\n// sunriseTwilightTime is sunriseTime + twilightTimeOffset\n// sunsetTwilightTime is sunsetTime - twilightTimeOffset\n// evenTimeOffset is a value of 0.15 used to make the sky blue right after sunrise twilight and right before sunset twilight\n// sunriseEvenTime is sunriseTwilightTime + evenTimeOffset\n// sunsetEvenTime is sunsetTwilightTime - evenTimeOffset\n//\n// Colors\n//\n// From sunriseTime to sunriseTwilightTime the sky color is blended between black and purple\n// From sunriseTwilightTime to sunriseEvenTime the sky color is blended between purple and blue\n// From sunriseEvenTime to sunsetEvenTime the sky color is blue\n// From sunsetEvenTime to sunsetTwilightTime the sky color is blended between blue and purple\n// From sunsetTwilightTime to sunsetTime the sky color is blended between purple and black\n// From sunsetTime to sunriseTime the sky color is black\n\n/*\n53, 43, 243\n91, 118, 247\n*/\n\nvec3 black = vec3(0.0, 0.0, 0.0);\nvec3 purple = vec3(53.0 / 255.0, 43.0 / 255.0, 243.0 / 255.0);\nvec3 blue = vec3(91.0 / 255.0, 118.0 / 255.0, 247.0 / 255.0);\n\nvec3 lerpColors(float start, float end, float intermediate, vec3 startColor, vec3 endColor) {\n    float n = (intermediate - start) / (end - start);\n    return startColor * (1.0 - n) + endColor * n;\n}\n\nvec3 colorFromTime(float time) {\n    time = mod(time, 24.0);\n    \n    float nightTimeOffset = 2.0;\n    float sunriseTime = 0.0;\n    float sunsetTime = 12.0 + nightTimeOffset;\n    float twilightTimeOffset = 1.0;\n    float sunriseTwilightTime = sunriseTime + twilightTimeOffset;\n    float sunsetTwilightTime = sunsetTime - twilightTimeOffset;\n    float evenTimeOffset = 1.0;\n    float sunriseEvenTime = sunriseTwilightTime + evenTimeOffset;\n    float sunsetEvenTime = sunsetTwilightTime - evenTimeOffset;\n    \n    vec3 color = vec3(0.0);\n    if (time >= sunriseTime && time <= sunriseTwilightTime) {\n        color = lerpColors(sunriseTime, sunriseTwilightTime, time, black, purple);\n    } else if (time >= sunriseTwilightTime && time <= sunriseEvenTime) {\n        color = lerpColors(sunriseTwilightTime, sunriseEvenTime, time, purple, blue);\n    } else if (time >= sunriseEvenTime && time <= sunsetEvenTime) {\n        color = blue;\n    } else if (time >= sunsetEvenTime && time <= sunsetTwilightTime) {\n        color = lerpColors(sunsetEvenTime, sunsetTwilightTime, time, blue, purple);\n    } else if (time >= sunsetTwilightTime && time <= sunsetTime) {\n        color = lerpColors(sunsetTwilightTime, sunsetTime, time, purple, black);\n    } else if (time >= sunsetTime && time <= sunriseTime) {\n        color = black;\n    }\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime;\n    float timeStep = 0.1;\n    \n    vec3 color = vec3(0.0);\n    for (float i = 0.0; i <= 16.0; i += 1.0) {\n\t\tfloat y = i / 12.0;\n        if (fragCoord.y / iResolution.y > y) {\n            color = colorFromTime(time + timeStep * i);\n        }\n    }\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}