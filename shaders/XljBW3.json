{
    "Shader": {
        "info": {
            "date": "1517372842",
            "description": "I was just experimenting to create clouds with some help from Voronoi. During this process, while tweaking my vorocloud function, I realized I could create this nice Matrix-terminal-like effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "XljBW3",
            "likes": 38,
            "name": "The cat is a glitch (Matrix)",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "matrix"
            ],
            "usePreview": 0,
            "username": "antoineMoPa",
            "viewed": 10399
        },
        "renderpass": [
            {
                "code": "#define time iTime\n\nuniform float ratio;\n\n#define PI2 6.28318530718\n#define PI 3.1416\n\nfloat vorocloud(vec2 p){\n\tfloat f = 0.0;\n    vec2 pp = cos(vec2(p.x * 14.0, (16.0 * p.y + cos(floor(p.x * 30.0)) + time * PI2)) );\n    p = cos(p * 12.1 + pp * 10.0 + 0.5 * cos(pp.x * 10.0));\n    \n    vec2 pts[4];\n    \n    pts[0] = vec2(0.5, 0.6);\n    pts[1] = vec2(-0.4, 0.4);\n    pts[2] = vec2(0.2, -0.7);\n    pts[3] = vec2(-0.3, -0.4);\n    \n    float d = 5.0;\n    \n    for(int i = 0; i < 4; i++){\n      \tpts[i].x += 0.03 * cos(float(i)) + p.x;\n      \tpts[i].y += 0.03 * sin(float(i)) + p.y;\n    \td = min(d, distance(pts[i], pp));\n    }\n    \n    f = 2.0 * pow(1.0 - 0.3 * d, 13.0);\n    \n    f = min(f, 1.0);\n    \n\treturn f;\n}\n\nvec4 scene(vec2 UV){\n    float x = UV.x;\n    float y = UV.y;\n    \n    vec2 p = vec2(x, y) - vec2(0.5);\n    \n    vec4 col = vec4(0.0);\n\tcol.g += 0.02;\n    \n    float v = vorocloud(p);\n    v = 0.2 * floor(v * 5.0);\n    \n    col.r += 0.1 * v;\n    col.g += 0.6 * v;\n    col.b += 0.5 * pow(v, 5.0);\n    \n    \n    v = vorocloud(p * 2.0);\n    v = 0.2 * floor(v * 5.0);\n    \n    col.r += 0.1 * v;\n    col.g += 0.2 * v;\n    col.b += 0.01 * pow(v, 5.0);\n    \n    col.a = 1.0;\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = scene(uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}