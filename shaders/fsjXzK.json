{
    "Shader": {
        "info": {
            "date": "1620586870",
            "description": "Intersection with a 3D limacon band.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsjXzK",
            "likes": 2,
            "name": "Limacon Band Intersection 3D",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "ray",
                "raycasting",
                "intersection",
                "trochoid",
                "limacon"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "// Convenience struct\nstruct Intersect {\n    float depth;\n    float param;\n    vec3 pos;\n    vec3 nor;\n};\n\n// Updates nearest intersection\nvoid update(in vec3 ro, in vec3 rd, in float dd, in float alpha, in float thickness, in float param, inout Intersect isect) {\n    float t2 = 2.0 * param;\n    float depth = dot(vec2(cos(t2) + alpha * cos(param), sin(t2) + alpha * sin(param)) - ro.xy, rd.xy) / dd;\n    if (depth > 0.0 && (isect.depth < 0.0 ? true : depth < isect.depth)) {\n        vec3 pos = ro + rd * depth;\n        if (abs(pos.z) < thickness) {\n            isect.depth = depth;\n            isect.param = param;\n            isect.pos = pos;\n        }\n    }\n}\n\n// Intersection\nIntersect iLimaconBand(in vec3 ro, in vec3 rd, in float alpha, in float thickness) {\n    Intersect isect = Intersect(-1.0, 0.0, vec3(0.0), vec3(0.0));\n    float y = dot(ro.xy, normalize(rd.yx) * vec2(1.0, -1.0));\n    float u = atan(rd.y, rd.x), dd = dot(rd.xy, rd.xy);\n    alpha = abs(alpha); // Artifacts seem to occur for negative values\n\n    float shift = 0.5 * u;\n    vec2 sc = vec2(sin(shift), 2.0 * cos(shift)) * alpha;\n\n    // Solve a quartic in tan((x+shift)/2)\n    float qa = y + sc.x, qb = sc.y - 4.0, qc = 2.0 * y, qd = sc.y + 4.0, qe = y - sc.x;\n    qb /= qa; qc /= qa; qd /= qa; qe /= qa; // Divide by leading coefficient to make it 1\n\n    float bb = qb * qb;\n    float p = qc - 0.375 * bb;\n    float q = qd - 0.5 * qb * qc + 0.125 * bb * qb;\n    float r = qe - 0.25 * qb * qd + bb * qc / 16.0 - 3.0 * bb * bb / 256.0;\n\n    // Solve for an arbitary root to x^3 + 2px^2 + (p^2 - 4r)x - q^2\n    float ra = 2.0 * p;\n    float rb = p * p - 4.0 * r;\n    float rc = -q * q;\n\n    float raa = ra * ra;\n    float inflect = ra / 3.0;\n\n    float rp = rb - raa / 3.0;\n    float rq = raa * ra / 13.5 - ra * rb / 3.0 + rc;\n    float rppp = rp * rp * rp, rqq = rq * rq;\n\n    float p2 = abs(rp);\n    float v1 = 1.5 / rp * rq;\n\n    float lambda;\n    if (rqq * 0.25 + rppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2);\n        if (rp < 0.0) lambda = sign(rq) * cosh(acosh(v2 * -sign(rq)) / 3.0);\n        else lambda = sinh(asinh(v2) / 3.0);\n        lambda = -sqrt(p2 / 3.0) * lambda;\n    }\n\n    else lambda = sqrt(-rp / 3.0) * cos(acos(v1 * sqrt(-3.0 / rp)) / 3.0);\n    lambda = 2.0 * lambda - inflect;\n\n    // Solve two quadratic equations (checking for negative sqrts which should be complex)\n    if (lambda < 0.0) return isect;\n    float sqrtLambda = sqrt(lambda);\n\n    float pLambda = p + lambda, qLambda = q / sqrtLambda;\n    float offs = 0.25 * qb;\n\n    float foo = lambda - 2.0 * (pLambda + qLambda);\n    float bar = lambda - 2.0 * (pLambda - qLambda);\n\n    if (foo >= 0.0) {\n        vec2 param = atan((vec2(1.0, -1.0) * sqrt(foo) + sqrtLambda) * 0.5 - offs) * 2.0 + shift;\n        update(ro, rd, dd, alpha, thickness, param.x, isect);\n        update(ro, rd, dd, alpha, thickness, param.y, isect);\n    }\n\n    if (bar >= 0.0) {\n        vec2 param = atan((vec2(1.0, -1.0) * sqrt(bar) - sqrtLambda) * 0.5 - offs) * 2.0 + shift;\n        update(ro, rd, dd, alpha, thickness, param.x, isect);\n        update(ro, rd, dd, alpha, thickness, param.y, isect);\n    }\n\n    if (isect.depth > 0.0) {\n        float t2 = 2.0 * isect.param; alpha *= 0.5;\n        isect.nor = vec3(normalize(vec2(cos(t2) + alpha * cos(isect.param), sin(t2) + alpha * sin(isect.param))), 0.0);\n    }\n\n    return  isect;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = ivec2(iMouse) == ivec2(0) ? vec2(0.0) : (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 10.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Environment map\n    fragColor = texture(iChannel0, rd);\n\n    // Intersect and render\n    Intersect hit = iLimaconBand(vec3(-ro.y, ro.xz), vec3(-rd.y, rd.xz), 3.0 * sin(iTime * 0.5), 0.75);\n    if (hit.depth > 0.0) {\n        hit.nor = vec3(-hit.nor.y, hit.nor.xz);\n        float diff = abs(dot(hit.nor, -rd));\n        float checkers = mod(floor(hit.param * 6.28) + floor(hit.pos.z * 2.5), 2.0);\n        fragColor = mix(vec4(0.5 + 0.5 * checkers, 0.0, 0.0, 1.0), texture(iChannel0, reflect(-rd, hit.nor)), 0.25);\n        fragColor.rgb *= diff;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}