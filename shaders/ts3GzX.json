{
    "Shader": {
        "info": {
            "date": "1568957566",
            "description": "Inspired by https://davidsiaw.github.io/blog/2014/11/21/hexlife/\nDraw with mouse\nOptions in Common tab",
            "flags": 32,
            "hasliked": 0,
            "id": "ts3GzX",
            "likes": 2,
            "name": "Game of Hexlife (Simple)",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "automata",
                "life",
                "conway",
                "gameoflife",
                "multipass"
            ],
            "usePreview": 0,
            "username": "redline2466",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "int getState(vec2 fragCoord) {\n    ivec2 pos = ivec2(fragCoord / scale);\n    if(fract(fragCoord.x / scale) > .5 && pos.y / 2 * 2 == pos.y)\n        pos.x++;\n    return int(texelFetch(iChannel0, pos, 0).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(getState(fragCoord));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define scale 20.\n#define stepsPerSecond 20.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "int get(ivec2 pos) {\n    return int(texelFetch(iChannel0, pos, 0).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(get(ivec2(fragCoord)));\n    if(iMouse.z > 0.01) {\n        vec2 distance = abs(ceil(fragCoord.xy - ceil(iMouse.xy / scale)));\n        if(distance.x == 0. && distance.y == 0.) {\n            fragColor = vec4(1.);\n        }\n    } else if(floor(iTime * stepsPerSecond) > floor((iTime - iTimeDelta) * stepsPerSecond)) {\n        int sum =\n            get(ivec2(fragCoord) + ivec2(0.,1.)) +\n            get(ivec2(fragCoord) + ivec2(-1.,0.)) +\n            get(ivec2(fragCoord) + ivec2(1.,0.)) +\n            get(ivec2(fragCoord) + ivec2(0.,-1.));\n        if(int(fragCoord.y) / 2 * 2 == int(fragCoord.y)) { // even row\n            sum +=\n                get(ivec2(fragCoord) + ivec2(-1.,1.)) +\n            \tget(ivec2(fragCoord) + ivec2(-1.,-1.));\n        } else { // odd row\n            sum +=\n            \tget(ivec2(fragCoord) + ivec2(1.,1.)) +\n                get(ivec2(fragCoord) + ivec2(1.,-1.));\n        }\n           \n        if(sum < 3 || sum > 4)\n            fragColor = vec4(0.);\n        if(sum == 2 && get(ivec2(fragCoord)) == 0)\n            fragColor = vec4(1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}