{
    "Shader": {
        "info": {
            "date": "1474711995",
            "description": "asfdasdfasdfa",
            "flags": 0,
            "hasliked": 0,
            "id": "4tV3WD",
            "likes": 0,
            "name": "Pool Like Template",
            "published": 3,
            "tags": [
                "template"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "//Random Number\nfloat rand(vec2 co){\n    return fract(sin(dot(co ,vec2(12.9898,78.233))) * 43758.5453);\n}\n//Noise\nfloat noise(float p){\n    float fl = floor(p);\n  float fc = fract(p);\n    return float(mix(rand(vec2(fl)), rand(vec2(fl + 1.0)), fc));\n}\n//Noise 2\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n//Central Development Of Shader (CDS)        -|• |\n//Shader Central Processing Function (SCPF)  -|• v\n//Xylem of Mental Target of Shader (XMTS)    -|•\n//                                            \\-/\n// /-------------------------------------------/\n// v\nfloat xmts(vec2 u, vec4 gram, float t, vec3 x, float a)\n{\n    //Increase Activity Level For Better Performance\n    a *= 3.0;\n    //Increase Limit Of Activity Steps For Bigger And Cleaner Scene\n    t += length(a);\n    //Make Rhombuses\n    //Corner 1\n    if(vec4(u, u) == vec4(gram.xz,gram.xz)){\n        gram.yw += u;}\n    //Corner 2\n    else if(vec4(u, u) == vec4(gram.yw,gram.yw)){\n        gram.xz += u;}\n    //Corner 3\n    else if(vec4(u, u) == vec4(gram.xz,gram.xz)){\n        gram.yw -= u;}\n    //Corner 4\n    else if(vec4(u, u) == vec4(gram.yw,gram.yw)){\n        gram.xz -= u;}\n    //Make Good Noise to make background realistic and rough (glass with rain)\n    float q =mix(mix(rand(u + vec2(0.0, 0.0)),\n                     rand(u + vec2(0.0, 1.0)), u.y),\n                 mix(rand(u + vec2(1.0, 0.0)),\n                     rand(u + vec2(1.0, 1.0)), u.y),u.x);\n    //Prepare for locating scene\n    x += length(q)*a+0.1;\n    //if this --------------\\ is increased, The Background Will Become Smoother, Depends On How You\n    //Increase It.          v\n    for(float i = 0.0; i < 0.1; i++)//Recommended: 40.013\n    {\n        //Prepare to Shape The Grid Using Gram\n        vec3 p = x * 0.5 + normalize(vec3(u, 1.0)) + gram.xyz;\n        //Use a raytracing technique\n        float d = length(p) - 1.0;\n        //something\n        t += d * 0.5;\n    }\n    //Add fog\n    float fog = 1.0/(1.0+t*t*0.1);\n    //Result fog\n    return fog;\n    \n}\n//Get Gram Color For Pool Effect\nvec4 getGramColor(vec2 u, float i)\n{\n    return vec4(length(u*2.0-1.0)-i);\n}\n//Get Frame \nvec3 getFrame(vec2 u, float i, vec3 rd)\n{\n    vec2 p = floor(u);\n    vec2 f = fract(u);\n    vec2 q = f*f*(-1.0+2.0*p-rd.xy);\n    return length(q) + rd * i;\n}\n//Get Limit And Activity\nvec2 getLimit_Activity(float k, float s, vec2 u)\n{\n    float x = max(k-min(u.x,u.y),s-min(u.x,u.y));\n    float ox = (u.x+u.y)-(u.y+u.x);\n    return vec2(x, ox)+vec2(k, s);\n}\n//Obvious. Just an UltraViolet Ray.\nvec2 getUv(vec2 u)\n{\n    return u+(max(u.x+u.y,u.y+u.x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0-  1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 u = getUv(uv);\n    vec2 lax = getLimit_Activity(noise(u), noise(u + u.x), u);\n    vec3 x = getFrame(u, length(sqrt(u)), normalize(vec3(u, 1.0)));\n    vec4 gram = getGramColor(u, max(lax.x,lax.y));\n    float col = xmts(u/noise(u), gram, lax.x, x, lax.y);\n\tfragColor = vec4(col+noise(lax+iTime))*length(uv)+vec4(-0.025,0.025,0.6,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}