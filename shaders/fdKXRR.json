{
    "Shader": {
        "info": {
            "date": "1634256293",
            "description": "mecha vibes",
            "flags": 0,
            "hasliked": 0,
            "id": "fdKXRR",
            "likes": 19,
            "name": "Taste of Noise 9",
            "published": 3,
            "tags": [
                "weird"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "// taste of noise 9 by leon denise 2021/10/15\n// result of experimentation with organic patterns\n// using code from Inigo Quilez, David Hoskins and NuSan\n// thanks to Fabrice Neyret for code reviews\n// licensed under hippie love conspiracy\n\n// global variable\nfloat material;\nfloat rng;\n\n// sdf\nfloat map (vec3 p)\n{\n    // time\n    float t = iTime;\n    \n    // keep original pos\n    vec3 pp = p;\n    \n    // domain repeat\n    float grid = 2.5;\n    p.z += t * 0.05;\n    vec3 cell = floor((p+grid/2.)/grid);\n    p = repeat(p+grid/2.,grid);\n    \n    // rotation parameter\n    vec3 angle = vec3(-.1,-.2,.3)+cell*78.-t*.01;\n    \n    // kif\n    const float count = 11.0;\n    float a = 1.0;\n    float scene = 1000.;\n    float shape = 1000.;\n    for (float index = 0.0; index < count; ++index)\n    {        \n        \n        // fold\n        p.xz = abs(p.xz)-0.5*a;\n        \n        // rotate\n        p.yx *= rot(angle.z/a);\n        p.xz *= rot(angle.y/a);\n        p.yz *= rot(angle.x/a);\n        \n        // sdf object\n        shape = sdBox(p, vec3(0.05,0.2,0.01)*a*2.5);\n        \n        // material\n        material = shape < scene ? index : material;\n        \n        // add\n        scene = min(scene, shape);\n        \n        // falloff\n        a /= 1.25;\n    }\n    \n    // crop tunnel\n    scene = max(scene, -sdBox(pp,vec3(0.1,0.05,.5)));\n        \n    return scene;\n}\n\n// return color from pixel coordinate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // reset color\n    fragColor = vec4(0,0,0,1);\n    material = 0.0;\n    \n    // white noise\n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    rng = hash13(seed);\n    \n    // camera coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 eye = vec3(0,0,0);\n    vec3 at = vec3(0,0,1);\n    vec2 mouse = (iMouse.xy/iResolution.xy-.5)*step(0.5,iMouse.z);\n    at.yz *= rot(-mouse.y);\n    at.xz *= rot(mouse.x);\n    vec3 z = normalize(at-eye);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = (cross(x, z));\n    vec3 ray = normalize(vec3(z * .5 + uv.x * x + uv.y * y));\n    vec3 pos = eye;\n    \n    float pixelSize = 1./iResolution.y;\n    \n    // raymarch\n    const float steps = 30.0;\n    float index;\n    for (index = steps; index > 0.0; --index)\n    {\n        // volume estimation\n        float dist = map(pos);\n        if (dist < pixelSize)\n        {            \n            break;\n        }\n        \n        // dithering\n        dist *= 0.9 + .1 * rng;\n        \n        // raymarch\n        pos += ray * dist;\n    }\n    \n    float shade = index/steps;\n\n    // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n    vec2 off=vec2(pixelSize,0);\n    vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n\n    // lighting\n    float ld = dot(reflect(ray, normal), vec3(0,1,0))*0.5+0.5;\n    vec3 light = vec3(0.914,0.569,0.086) * sqrt(ld);\n    ld = dot(reflect(ray, normal), vec3(0,1,0))*0.5+0.5;\n    light += vec3(0.576,0.898,0.941) * pow(ld, 5.);\n\n    // Inigo Quilez color palette (https://iquilezles.org/articles/palettes)\n    vec3 tint = .5+.5*cos(vec3(1,2,3)+material*2.+length(pos)*.5-2.);\n\n    // pixel color\n    fragColor.rgb = (tint + light) * shade;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n#define repeat(p,r) (mod(p,r)-r/2.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}