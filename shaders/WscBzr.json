{
    "Shader": {
        "info": {
            "date": "1604150803",
            "description": "puerta se abre",
            "flags": 0,
            "hasliked": 0,
            "id": "WscBzr",
            "likes": 1,
            "name": "puerta se abre",
            "published": 3,
            "tags": [
                "puertaseabre"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n    \n    float planeDist1 = p.y+0.0;  //piso inf\n    res =opU3(res, vec3(planeDist1,-1.0,7.0)); //inf\n   \n    p.y=p.y-5.0;\n    \n    \n\tvec3 q=p;  //repetir\n    float cz=34.0;\n    q.z = mod(q.z+0.5*cz,cz)-0.5*cz;\n    p=q;\n\t\n    float anchox=19.0;\n    float anchoz=17.0;\n    float gruesopared=0.4;\n    float sdbLatIzq= sdBox(p-vec3(-anchox,0.0,0.0), vec3(gruesopared,22.0,22.0) );\n    float sdbLatDer= sdBox(p-vec3( anchox,0.0,0.0), vec3(gruesopared,22.0,22.0) );\n    float sdbParedAtras=    sdBox(p-vec3(0.0,0.0,-anchoz), vec3(22.0,22.0,gruesopared) );\n    float sdbParedAdelante= sdBox(p-vec3(0.0,0.0, anchoz), vec3(22.0,22.0,gruesopared) );\n    \n    float sdbPuertaDif= sdBox(p-vec3(0.0,0.0, 0.0), vec3(5.0,10.0,anchoz+2.0) );\n    sdbParedAtras= differenceSDF(sdbParedAtras,sdbPuertaDif);\n    sdbParedAdelante= differenceSDF(sdbParedAdelante,sdbPuertaDif);\n\n    float posxmov;\n    //control de puerta\n    if (mod(itime, 20.0) <11.0)\n     posxmov=mod(iTime,11.0)+1.5;\n    \n    float sdbPuertaAbreA= sdBox(p-vec3(posxmov,0.0, anchoz), vec3(5.0,10.0,0.05) );\n    float sdbPuertaAbreB= sdBox(p-vec3(posxmov,0.0, -anchoz), vec3(5.0,10.0,0.05) );\n    \n    res =opU3(res, vec3( sdbLatIzq,-1.0,6.0)); \n    res =opU3(res, vec3( sdbLatDer,-1.0,6.0)); \n\tres =opU3(res, vec3( sdbParedAtras,-1.0,5.0)); \n\tres =opU3(res, vec3( sdbParedAdelante,-1.0,5.0)); \n    res =opU3(res, vec3( sdbPuertaAbreA,-1.0,9.0)); \n    res =opU3(res, vec3( sdbPuertaAbreB,-1.0,9.0)); \n   \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*color;  //corregido por shane\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n       \n        if(dO>MAX_DIST )\n        {\t\n            mObj.dist = -1.0;\n    \t\tmObj.id_color = -1.0;\n    \t\tmObj.marchCount=marchCount;\n    \t\tmObj.id_material=-1.0;\n            //return -1.0;\n            break;\n        }\n        \n        if (abs(dS.x)<MIN_DIST) \n        { break;  }\n        dO += dS.x;\n        marchCount++;       \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 64.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    \n    vec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n     }\n    else\n    {  return result; }\n}\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n        \n    if (id_material==5.0)\n    {   vec2 uv;\n\t\tuv=(p.xy)*17.0;\n     \treturn  Ladrillos(uv )*0.8;\n    }\n    \n    if (id_material==6.0)\n    { \n     vec2 uv=p.zy*17.0; return  Ladrillos(uv )*0.8;\n    }\n    \n    if (id_material==7.0)\n    { \n     vec2 uv=p.zx*20.0; return pisov2(uv );\n    }\n    \n    if (id_material==8.0)\n    { \n     vec2 uv=p.xy*10.0;\n     return colorfmb(uv);\n    }\n     \n    \n    if (id_material==9.0)\n    { \n      vec2 uv=p.xy*5.0;\n      return  mix (vec3 (0.9, 0.4, 0.2), vec3 (0.55, 0.25, 0.1),fbm2 (p.xy));\n        \n    }\n    \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n\n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(10.0, 6.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n   \tfloat  posxmov;\n     posxmov=iTime*2.0;\n    \n    vec3 ro=vec3(0.0,7.0,-40.0+posxmov);\n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1) //30\n);\n    \n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n//------------ooooooooooo-------------------\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\nconst vec2 bricksize = vec2(96., 64.);\nconst vec2 brickspace = vec2(10., 10.);\n\n\n//-Referencia Dr2\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 1; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\n//------------ooooooooooo-------------------\n\nvec4 heightmap(vec2 position)\n{\n\tfloat height = 0.0;\n\tvec3 color = vec3(0.85,0.125,0.125);\n\t\n\tfloat row = floor(position.y/bricksize.y);\n\t\n\tif (mod(row, 2.0) < 1.0)\n\t\tposition.x += bricksize.x/2.;\n\t\n\theight = min(fbm2(position*0.125)-0.45,0.0);\n\t\n\tcolor *= fbm2(position*0.0625)*0.5+0.75;\n\t\n\tif(mod(position.x,bricksize.x) < brickspace.x || mod(position.y,bricksize.y) < brickspace.y)\n\t{\n\t\theight = -2.0+fbm2(position)*0.5;\n\t\tcolor = vec3(fbm2(position)*0.75);\n\t}\n\n\treturn vec4(color,height);\n}\n\t\nfloat n1,n2,n3,n4;\nvec2 size = vec2(-0.4,0.0);\n\n\n\nvec3 thing(vec2 pos) \n{\n\tfloat row = floor((pos.y)/80.);\n\tif (mod(row, 2.0) < 1.0)\n\t\tpos.x += 40.;\n\t\n\tvec2 p = pos*0.0125;\n\tfloat n1 = fbm2(p * 4.0);\n\tp.x = fract(p.x+.5)-0.5;\n\tp.y = fract(p.y+.5)-0.5;\n\tp = abs(p);\n   \tfloat a = atan(p.y, p.x);\n\tfloat b = atan(p.x, p.y);\n\tfloat n2 = fbm2(p * 1.5) * (a * b);\n\tfloat n3 = n1 * 0.15 / n2 * .75;\n\tfloat s = min(p.x,p.y) - n3;\n\tfloat f = mix(s, 1.-n1, 0.5);\n\treturn vec3(p, f);\n}\nvec3 m1,m2,m3,m4;\nvec2 sizem = vec2(-0.2,0.0);\n\n\nvec3 pisov2( vec2 puv )\n{\n\tvec2 p = puv;\n    \n\tvec3 color = vec3(0.0);\n\tvec2 off = vec2(p.x,p.y-1.0);\n\tm1 = thing(off);\n\toff = vec2(p.x-1.0,p.y);\n\tm2 = thing(off);\n\toff = vec2(p.x+1.0,p.y);\n\tm3 = thing(off);\n\toff = vec2(p.x,p.y+1.0);\n\tm4 = thing(off);\n\t\n\tvec3 va = normalize(vec3(sizem.xy,m2.z-m3.z));\n\tvec3 vb = normalize(vec3(sizem.yx,m1.z-m4.z));\n\t\n    vec3 p2m = vec3(0.5);\t\n\tvec3 normal = vec3(cross(va,vb));\n\t\n\tcolor = vec3(dot(normal.xyz, p2m)/96.0);\n\t\n\treturn  pow( color,vec3(0.2545));\n}\n\n\n\nvec3 Ladrillos( vec2 puv )\n{\n\tvec2 pos = puv;\n\tvec2 off = vec2(pos.x,pos.y-1.0);\n\tvec3 col = heightmap(pos).xyz;\n\t\n\tn1 = heightmap(off).w;\n\toff = vec2(pos.x-1.0,pos.y);\n\tn2 = heightmap(off).w;\n\toff = vec2(pos.x+1.0,pos.y);\n\tn3 = heightmap(off).w;\n\toff = vec2(pos.x,pos.y+1.0);\n\tn4 = heightmap(off).w;\n\t\n\tvec3 va = normalize(vec3(size.xy,n2-n3));\n\tvec3 vb = normalize(vec3(size.yx,n1-n4));\n\t\n\t\n    vec3 p2m = vec3(1.0);\t\t\n\tvec3 normal = vec3(cross(va,vb));\n\t\n\tfloat color = dot(normal.xyz, normalize(p2m))*.5+.5;\n\tvec3 colorvec = vec3(pow(color,1.0),pow(color,1.0),pow(color,1.0));\n\t\n    float brightness = 1./sqrt(1.+pow(distance(puv,pos)/puv.x*4.,2.));\n\t\n\treturn  vec3( col+((colorvec*brightness)-0.5)*2.0 );\n}\n\nvec3 colorfmb(vec2 p)\n{\n    vec3 color = vec3(fbm2(p)*0.75);\n    return color;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}