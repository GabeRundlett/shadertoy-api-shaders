{
    "Shader": {
        "info": {
            "date": "1497132064",
            "description": "A humble attempt at halftone lines",
            "flags": 0,
            "hasliked": 0,
            "id": "4dXBRf",
            "likes": 18,
            "name": "Halftone Lines Filter",
            "published": 3,
            "tags": [
                "lines",
                "blackandwhite",
                "moire",
                "halftone"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 1107
        },
        "renderpass": [
            {
                "code": "// kernel sampling help from: https://www.shadertoy.com/view/ldsSWr\n// luma function from: https://www.shadertoy.com/view/XtcXR8\n\n#define sampleDistX 2.\n#define sampleDistY 2.\n#define rows 40.0\n#define rotation 0.0\n#define antialias 0.2\n#define mode 3\n\nfloat rgbToGray(vec4 rgba) {\n\tconst vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    return dot(rgba.xyz, W);\n}\n\nfloat avgerageGray(vec2 uv, float stepX, float stepY) {\n\t// get samples around pixel\n\tvec4 colors[9];\n\tcolors[0] = texture(iChannel0,uv + vec2(-stepX, stepY));\n\tcolors[1] = texture(iChannel0,uv + vec2(0, stepY));\n\tcolors[2] = texture(iChannel0,uv + vec2(stepX, stepY));\n\tcolors[3] = texture(iChannel0,uv + vec2(-stepX, 0));\n\tcolors[4] = texture(iChannel0,uv);\n\tcolors[5] = texture(iChannel0,uv + vec2(stepX, 0));\n\tcolors[6] = texture(iChannel0,uv + vec2(-stepX, -stepY));\n\tcolors[7] = texture(iChannel0,uv + vec2(0, -stepY));\n\tcolors[8] = texture(iChannel0,uv + vec2(stepX, -stepY));\n\t// sum + return averaged gray\n    vec4 result = vec4(0);\n\tfor (int i = 0; i < 9; i++) {\n\t\tresult += colors[i];\n\t}\n\treturn rgbToGray(result) / 9.0;\n}\n\nvec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // current location\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // halftone line coords\n    vec2 uvRow = fract(rotateCoord(uv, rotation) * rows);\n    vec2 uvFloorY = vec2(uv.x, floor(uv.y * rows) / rows) + vec2(0., (1.0 / rows) * 0.5); // add y offset to get center row color\n\t\n    // get averaged gray for row\n    float averagedBW = avgerageGray(uvFloorY, sampleDistX/iResolution.x, sampleDistY/iResolution.y);\n    \n    // use averaged gray to set line thickness\n    vec3 finalColor = vec3(1.);\n    if(mode == 1) {\n    \tif(uvRow.y > averagedBW) finalColor = vec3(0.0);\n    } else if(mode == 2) {\n        if(distance(uvRow.y + 0.5, averagedBW * 2.) < 0.2) finalColor = vec3(0.0);\n    } else if(mode == 3) {\n    \tfloat distFromRowCenter = 1.0 - distance(uvRow.y, 0.5) * 2.0;\n    \tfinalColor = vec3(1.0 - smoothstep(averagedBW - antialias, averagedBW + antialias, distFromRowCenter));\n    } else if(mode == 4) {\n        vec2 uvRow2 = fract(rotateCoord(uv, -rotation) * rows);\n    \tfloat distFromRowCenter1 = 1.0 - distance(uvRow.y, 0.5) * 2.0;\n    \tfloat distFromRowCenter2 = 1.0 - distance(uvRow2.y, 0.5) * 2.0;\n        float distFromRowCenter = min(distFromRowCenter1, distFromRowCenter2);\n    \tfinalColor = vec3(1.0 - smoothstep(averagedBW - antialias, averagedBW + antialias, distFromRowCenter));\n    } else if(mode == 5) {\n        vec2 uvRow2 = fract(rotateCoord(uv, -rotation) * rows);\n    \tfloat distFromRowCenter1 = 1.0 - distance(uvRow.y, 0.5) * 2.0;\n    \tfloat distFromRowCenter2 = 1.0 - distance(uvRow2.y, 0.5) * 2.0;\n        float distFromRowCenter = mix(distFromRowCenter1, distFromRowCenter2, 0.5);\n    \tfinalColor = vec3(1.0 - smoothstep(averagedBW - antialias, averagedBW + antialias, distFromRowCenter));\n    } else if(mode == 6) {\n        float rot = floor(averagedBW * 6.28) / 6.28;\n        rot = rot * 4.;\n        vec2 uvRow = fract(rotateCoord(uv, rot) * rows);\n    \tfloat distFromRowCenter = 1.0 - distance(uvRow.y, 0.5) * 2.0;\n    \tfinalColor = vec3(1.0 - smoothstep(averagedBW - antialias, averagedBW + antialias, distFromRowCenter));\n    } else if(mode == 7) {\n        vec4 originalColor = texture(iChannel0, uvFloorY);\n        float distFromRowCenter = 1.0 - distance(uvRow.y, 0.5) * 2.0;\n\t\tfloat mixValue = 1.0 - smoothstep(averagedBW - antialias, averagedBW + antialias, distFromRowCenter);\n        finalColor = mix(originalColor.rgb, vec3(1.), mixValue);\n    }\n    // draw \n\tfragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}