{
    "Shader": {
        "info": {
            "date": "1722179592",
            "description": "originals source https://www.shadertoy.com/view/stsXDl https://www.shadertoy.com/view/4cjyRD",
            "flags": 0,
            "hasliked": 0,
            "id": "lfjyWR",
            "likes": 5,
            "name": " colorful Kaleidoscope  12",
            "published": 3,
            "tags": [
                "fractal",
                "timing",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(13,30,10))*2.5+.5)\n\n\nconst float k_pi  = 3.141592653589793;\nconst float k_tau = 6.283185307179586;\n\nmat2 ab_rot2(in float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat ab_inv_lerp(in float v1, in float v2, in float v) {\n    return (v - v1) / (v2 - v1);\n}\n\nfloat ab_remap(in float v, in float min0, in float max0, in float min1, in float max1) {\n    return mix(min1, max1, ab_inv_lerp(min0, max0, v));\n}\n\nvec2 ab_cartesian_to_polar(in vec2 c) {\n    return vec2(length(c), atan(c.y, c.x));\n}\n\nvec2 ab_polar_to_cartesian(in vec2 p) {\n    return p.x * vec2(cos(p.y), sin(p.y));\n}\n\nvec3 ab_palette_chroma(in float t) {\n    const float k_delta = 0.5;\n    float freq = t * -k_pi;\n    vec3 color = vec3(sin(freq - k_delta), sin(freq), sin(freq + k_delta));\n    return pow(color, vec3(4.0));\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash(in float p) {\n    p = fract(p * 0.011);\n    p *= p + 7.5;\n    p *= p + p;\n    return fract(p);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash(in vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * 0.13);\n    p3 += dot(p3, p3.yzx + 3.333);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// https://www.shadertoy.com/view/XlGcRh\nvec2 hash2(in vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n// https://www.shadertoy.com/view/4dS3Wd\nfloat vnoise(in float p) {\n    float i = floor(p);\n    float f = fract(p);\n    float u = f*f * (3.0 - 2.0 * f);\n    return -1.0 + 2.0 * mix(hash(i), hash(i + 1.0), u);\n}\n\n// https://www.shadertoy.com/view/XdXGW8\nfloat gnoise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f * (3.0 - 2.0 * f);\n    return mix(mix(dot(-1.0 + 2.0 * hash2(i + vec2(0, 0)), f - vec2(0, 0)),\n                   dot(-1.0 + 2.0 * hash2(i + vec2(1, 0)), f - vec2(1, 0)), u.x),\n               mix(dot(-1.0 + 2.0 * hash2(i + vec2(0, 1)), f - vec2(0, 1)),\n                   dot(-1.0 + 2.0 * hash2(i + vec2(1, 1)), f - vec2(1, 1)), u.x), u.y);\n}\n\n// https://www.shadertoy.com/view/WltSDj\nvec3 sdg_circle(in vec2 p, in float r) {\n    float d = length(p);\n    return vec3(d - r, p / d);\n}\n\nvec4 circular_segments(in vec2 pc, in vec2 steps) {\n\n    vec2 idx = vec2(0.0);   // Segment index\n    vec2 sc = vec2(0.0);    // Segment coordinates\n    idx.x = floor(steps.x * pc.x);\n    sc.x = fract(steps.x * pc.x);\n    sc.y = ab_remap(pc.y, -k_pi, k_pi, 0.0, 1.0);\n    idx.y = floor(steps.y * sc.y);\n    sc.y = fract(steps.y * sc.y);\n    return vec4(idx, sc);\n}\n\nvec3 modulated_color(in vec4 q, in float t) {\n    t += 0.1 * gnoise(2.0 * q.zw);  // Watercolor-type effect\n    t += 0.5 * sin(0.25 * iTime);   // Animation\n    return ab_palette_chroma(t);    // Sample from chroma palette\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(1),H(g*.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d;\n         p.z+=iTime*10.;\n         vec2 p2 = (2.0 *C.xy - iResolution.xy) / iResolution.y;\n         \n vec2 k_steps = vec2(0.0, -0.0); // x: radial, y: angular\nk_steps*=ab_rot2(iTime);\n \n  vec2 dSteps = k_steps;\n      \n    // Convert to polar coordinates\n    vec2 pc = ab_cartesian_to_polar(p2);\n  \n    \n     \n \n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n      \n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            vec4 q2 = circular_segments(pc, dSteps);\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.4+sin(iTime*.1)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*pc.x+q2.xyz;\n         }\n         g+=e=length(p.yz)/s;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}