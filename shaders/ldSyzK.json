{
    "Shader": {
        "info": {
            "date": "1492762567",
            "description": "Adapted from my normal map shaders and my parallax shader.\nIt includes, diffuse, specular and parallax occlusion mapping.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldSyzK",
            "likes": 24,
            "name": "Parallax with lighting",
            "published": 3,
            "tags": [
                "2d",
                "normals",
                "light",
                "normalmap",
                "parallax",
                "shadows",
                "map",
                "specular",
                "reflections",
                "normal",
                "mapping",
                "realistic",
                "accurate",
                "ndotl"
            ],
            "usePreview": 1,
            "username": "robobo1221",
            "viewed": 3239
        },
        "renderpass": [
            {
                "code": "//made by robobo1221 http://www.shadertoy.com/user/robobo1221\n\nconst bool doSpecular = true; //Enable light source reflections.\n\nconst float steps = 32.0;\nconst float delta = 0.015; //The delta is the offset of the texcoord. Higher = more blurry/unaccurate normals.\nconst float sunHeight = 0.5;\nconst float bumpHeight = 0.5;\n\nconst vec3 sunlight = vec3(1.0, 0.6, 0.4) * 5.0;\nconst vec3 ambientLight = vec3(0.3, 0.5, 1.0);\n\nvec3 getLighting(vec3 color, float nDotL, vec3 lPos, vec3 rV){\n    \n    float reflection = pow(clamp(dot(lPos, rV), 0.0, 1.0), 10.0);\n    \n    return color * (sunlight * nDotL + (ambientLight + sunlight * 0.015)\n           + (doSpecular ? reflection * sunlight : vec3(0.0)));\n}\n\n#define g(a) (-4.*a.x*a.y+3.*a.x+a.y*2.)\n\nfloat bayer16x16(vec2 p){\n\t\n    vec2 m0 = vec2(mod(floor(p/8.), 2.));\n    vec2 m1 = vec2(mod(floor(p/4.), 2.));\n    vec2 m2 = vec2(mod(floor(p/2.), 2.));\n    vec2 m3 = vec2(mod(floor(p)   , 2.));\n\n    return (g(m0)+g(m1)*4.0+g(m2)*16.0+g(m3)*64.0)/255.;\n}\n#undef g\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 texcoord = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 color = vec3(0.0);\n    vec2 deltat = (texcoord - 0.5) / steps * bumpHeight;\n    vec2 uv = texcoord;\n    \n    vec2 dither = bayer16x16(fragCoord.xy) * deltat;\n    \n    float d0 = 0.0;\n    float d1 = 0.0;\n    float d2 = 0.0;\n    \n\tfor ( int i = 0; i < int(steps); i++ )\n\t{\n\t\tuv += deltat;\n        \n        d0 = texture(iChannel0, uv + dither).r;\n        d1 = texture(iChannel0, uv + vec2(delta, 0.0) + dither).r;\n        d2 = texture(iChannel0, uv + vec2(0.0, delta) + dither).r;\n\n\t\tif (1.-d0 < float(i) / steps)\n\t\t{\n\t\t\tbreak;\n        }\n\t}\n    \n    vec2 mouse = iMouse.st / iResolution.st;\n         mouse -= 0.5;\n    \n    vec3 lPos = normalize(vec3(mouse,sunHeight));\n\n    float dx = (d0 - d1) / delta;\n    float dy = (d0 - d2) / delta;\n\n    vec3 normal = normalize(vec3(dx, dy, 5.0));\n    float ndotL = max(dot(normal, lPos), 0.0);\n    \n    vec3 reflectedVector = normalize(-reflect((vec3(uv, sunHeight)), normal));\n\n    color = getLighting(vec3(d0), ndotL, lPos, reflectedVector);\n    color /= 1.0 + color;\n\n    //color = normal * 0.5 + 0.5;\n\t\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}