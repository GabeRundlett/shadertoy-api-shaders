{
    "Shader": {
        "info": {
            "date": "1704548778",
            "description": "The shape of an axisymmetric pendant drop by numerically integrating Young-Laplace equation.",
            "flags": 32,
            "hasliked": 0,
            "id": "lc23Rd",
            "likes": 10,
            "name": "Pendant drop",
            "published": 3,
            "tags": [
                "water",
                "surface",
                "rk4",
                "tension",
                "younglaplace"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// The shape of a pendant drop is described (in a simple\n// model, which ignores a bunch of things) by the hydrostatic Young-Laplace\n// equation (see https://en.wikipedia.org/wiki/Young%E2%80%93Laplace_equation)\n// which in axisymmetric non-dimensional case can be written as\n//     r''/(1+r'^2)^(3/2)-1/(r*(1+r'^2)^(1/2))=z-P\n// where r(z) is radius at height z, and P is non-dimensional\n// overpressure. Placing the bottom of the drop at z=0, we get\n//     r(0)=0, r'(0)=+inf, r''(0)=-inf\n// The 0/0 indeterminate form at z=0 can be easily sidestepped\n// using the observation that the drop is asymptotically spherical\n// at the bottom:\n//     r(z)=sqrt(2*R*z)+...\n// where R is the non-dimensional curvature radius at the bottom\n// of the drop (NOTE: at this point the principal curvatures are equal;\n// see https://en.wikipedia.org/wiki/Principal_curvature), which is\n// related to overpressure P via\n//     R*P=2\n// This makes r(R,z) a completely defined bivariate function (or\n// 1-parametric univariate function, if you prefer), same as e.g.\n// Bessel functions Jn(x).\n// The above naturally raises the question of explicitly approximating\n// this function (let's call it \"pendant drop function\"), without relying\n// on numerically integrating differential equations. Somewhat to my\n// surprise, I found no such approximations in literature (admittedly,\n// I didn't search too hard).\n\n// This shader does not attempt explicit approximations either, and\n// uses numerical integration as well (with rather poor accuracy, may I add).\n// Displayed are plots of r(z) for several values of R in [0;1] range.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    float Rmax=1.0,Hmax=8.0,Xmax=Hmax*iResolution.x/iResolution.y/2.0;\n    int N=10;\n    vec3 col=vec3(0);\n    for(int k=0;k<N;++k)\n    {\n        float R=Rmax*(float(k)+0.5)/float(N);\n        vec2 r=texelFetch(iChannel0,ivec2(R/Rmax*iResolution.x,fragCoord.y),0).xy;\n        float x=Xmax*(2.0*fragCoord.x/iResolution.x-1.0);\n        float d=abs(x)-r.x;\n        col+=(0.5+0.5*cos(vec3(2,4,6)+0.7*float(k)))*smoothstep(1.5,0.0,abs(d)/min(0.17,fwidth(d)));\n    }\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Simple RK4 integration (see https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods).\n// As usual, we convert a 2nd order differential\n// equation into 1st order differential equation\n// on a 2-vector y=(r(z),r'(z)), so y'=(r''(z),r'(z)).\n\n// Extract r'' from\n//     r''/(1+r'^2)^(3/2)-1/(r*(1+r'^2)^(1/2))=z-P\nvec2 f(vec2 y,float t,float P)\n{\n    float a=1.0+y.y*y.y;\n    return vec2(y.y,((t-P)*sqrt(a)+1.0/y.x));\n}\n\nvec2 RK4(vec2 y,float t,float dt,float R)\n{\n    float P=2.0/R;\n    vec2 k1=f(y,t,P);\n    vec2 k2=f(y+0.5*dt*k1,t+0.5*dt,P);\n    vec2 k3=f(y+0.5*dt*k2,t+0.5*dt,P);\n    vec2 k4=f(y+dt*k3,t+dt,P);\n    return y+dt*(k1+2.0*k2+2.0*k3+k4)/6.0;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    float Rmax=1.0,Hmax=8.0;\n    float dR=Rmax/iResolution.x,h=Hmax/iResolution.y;\n    ivec2 ij=ivec2(fragCoord);\n    float R=float(ij.x)*dR,z=float(ij.y)*h;\n    if(ij.y<=2)\n    {\n        // Avoid 0/0 indeterminate form (and numerically\n        // bad behaviour near 0) via explicitly\n        // approximating by a sphere.\n        float r=sqrt(2.0*R*z);\n        fragColor=vec4(r,R/r,0,0);\n    }\n    else if(ij.y==iFrame%int(iResolution.y))\n    {\n        // Process one z-line per frame.\n        vec2 y=texelFetch(iChannel0,ij-ivec2(0,1),0).xy;\n        vec2 r=RK4(y,z,h,R);\n        fragColor=vec4(r,0,0);\n    }\n    else fragColor=texelFetch(iChannel0,ij,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}