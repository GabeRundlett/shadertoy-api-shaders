{
    "Shader": {
        "info": {
            "date": "1686047648",
            "description": "A basic voronoi texture",
            "flags": 0,
            "hasliked": 0,
            "id": "dtKSDR",
            "likes": 4,
            "name": "Basic Animated Voronoi Texture",
            "published": 3,
            "tags": [
                "voronoi",
                "noise"
            ],
            "usePreview": 0,
            "username": "BaldPolnareff",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "vec2 noise2x2(vec2 p) {\n    float x = dot(p, vec2(127.1, 311.7));\n    float y = dot(p, vec2(269.5, 183.3));\n    vec2 noise = vec2(x, y);\n    noise = sin(noise);\n    noise *= 43758.5453;\n    return fract(noise);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize coordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 color = vec3(0.0);\n    //uv = mod(uv, 4.);\n    //uv = fract(uv);\n\n    //float circle = smoothstep(0.05, length(uv - 0.5), .2);\n\n    // Set the final color\n    //fragColor = vec4(uv, 0.0, 1.0);\n    //fragColor = vec4(circle, circle, circle, 1.0);\n\n    // creating repeating uv coordinates grid\n    float N = 4.;\n    vec2 currentGridId = floor(uv);\n    vec2 currentGridCoord = fract(uv);\n    color = vec3(currentGridCoord, 0.0);\n    currentGridCoord -= 0.5; // centering the coordinates for each grid\n    color = vec3(currentGridCoord, 0.0);\n    // adding a red grid \n    vec2 redGridUv = currentGridCoord;\n    redGridUv = abs(redGridUv);\n    float distToEdgeOfGridCell = 2.0 * max(redGridUv.x, redGridUv.y);\n    //color = vec3(distToEdgeOfGridCell, 0.0, 0.0);\n    //color = vec3(smoothstep(0.5, 1.0, distToEdgeOfGridCell));\n    //color = vec3(smoothstep(.95, 1.0, distToEdgeOfGridCell), 0.0, 0.0);\n    color = vec3(smoothstep(1., 1.0, distToEdgeOfGridCell)); // set the first value < 1 to get a grid\n    \n\n    // adding a point at the center of each grid cell\n    float pointsOnGrid = 0.0;\n    float minDistFromPixel = 100.0;\n\n    for (float i = -1.0; i <= 1.0; i++){\n        for (float j = -1.0; j <= 1.0; j++){\n            vec2 adjGridCoords = vec2(i, j);\n            vec2 pointOnAdjGrid = adjGridCoords;\n\n            // randomizing the points based on time and noise\n            //pointOnAdjGrid = adjGridCoords + sin(iTime) * 0.5;\n            vec2 noise = noise2x2(currentGridId + adjGridCoords);\n            pointOnAdjGrid = adjGridCoords + sin(iTime * noise) * 0.5;\n\n            float dist = length(currentGridCoord - pointOnAdjGrid);\n            minDistFromPixel = min(minDistFromPixel, dist);\n\n            pointsOnGrid += smoothstep(0.95, 0.96, 1.0 - dist);\n        }\n    }\n\n    vec3 pointsOnGridColor = vec3(pointsOnGrid);\n    //color = mix(color, pointsOnGridColor, 0.5);\n    //color += pointsOnGridColor;\n    color += minDistFromPixel;\n\n    vec3 black = vec3(0.0);\n\n    fragColor = vec4(color, 1.0);}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}