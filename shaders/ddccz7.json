{
    "Shader": {
        "info": {
            "date": "1694851607",
            "description": "An arabesque rug pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "ddccz7",
            "likes": 6,
            "name": "Arabesque rug",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "knot",
                "arabesque"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //max(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //vec2(1.+sign(a.x)/2.,0.5-sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    bool b = uv.y > uv.x;\n    bool b1 = b;\n    for(int k = 0; k < 6; k++){\n        uv =\n            abs(-.5+uv+t2)\n            //min(abs(.5+uv+t2),abs(-.5+uv+t2))\n            //max(abs(.5+uv+t2),abs(-.5+uv+t2))\n            //abs(.5+uv+t2*(1.+mod(floor(uv.y),2.)/2.))\n            //abs(.5+uv+t2+pow(floor(uv.x),2.)/1.5)\n        ;\n        //if((t2.x)>(t2.y) || k%2 == 0) uv /= 1.5;\n\n        //k += int(uv.x>uv.y);\n        //uv += float(int(iTime)/3);\n        \n        //uv += sign(uv-uv.yx)/2.+.5;\n        //uv += floor(uv*1.5); //another interesting pattern\n        b =\n            uv.y>uv.x||t2.y<t2.x\n            //uv.y>uv.x*float(t2.y>t2.x)\n            //uv.y>uv.x*float(t2.y>t2.x) //makes a braided pattern\n            //uv.y>uv.x+float(!b1)\n            //uv.y*float(!b1)>uv.x\n        ;\n        if(b) uv = uv.yx;\n        //else {k += 1; uv *= 1.5; col=col.yzx;}\n\n        t2 =\n            triangle_wave(uv-1.5)*float(b)\n        ;\n        //if(t2.y<t2.x) t2 = t2*1.5; else t2=t2/1.5;\n\n        uv =\n            t2-triangle_wave(uv.yx)\n            //t2-triangle_wave(uv.yx+floor(uv.x*2.))\n        ;\n        if(b)\n        //if(uv.y<uv.x||b)\n        col =\n            vec3(col.zx,max(col.y,max(uv.x-uv.y,0.)))\n            //vec3(col.zx,max(uv.x-uv.y,col.x))\n            //abs(sign(uv.x-uv.y)/2.-vec3(col.zx,max(uv.x-uv.y,0.)))\n        ;\n        //uv /= 1.+mod(uv.x,2.);\n        //if(t2.x>t2.y) col=col.yzx;\n\n\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/css3D8\n\nfloat fmod(float a, float b){\n    //a += fmod2(a,2.);\n    \n    //divide by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        //mod(floor(a),b)\n        mod(mod(floor(a),b+floor(b/4.)),b)\n        //mod(floor(a)*floor(-a/b),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n\n#define fmax1(x,y,z) max(fmod(x,z),fmod(y,z))\n\nvec2 mainSound(int samp, float time){\n  float tempo = 1.;\n  time /= tempo;\n  float s1 =\n      4.,\n      //5./(1.+fmod(time/2.,2.)), //varying tempo\n  s2 = 8.,\n  m4 = fmax1(time+floor(time),time,2.),\n  t= //varying tempo\n      time/(1.+m4)\n      //time/(1.+fmod(floor(time*s1),2.))\n      //time/(1.+fmod(time/s1+floor(time*s1),2.))*2.\n      //time/(1.+fmod(time*s1+floor(time),2.))\n      //time*(1.+fmod(time*s1,2.))/2.\n  ,\n  m1 =\n      fmax1(t/s1,t,s2)\n      //fmod(t/s1+floor(t*s1),s2)\n      //fmod(t*s1+floor(t/s1),s2)\n  ,\n  //m4 = fmod(t*s1,s1),\n  m3 =\n      fmax1(t/(m1+.5),t,s2);\n      //fmod(t*(s1+m4)/(m1+.5),s2);\n      //fmod((t+m1)*s1/(m4+.5),s2);\n      //fmod(t*s1/abs(2.5-m1),s2);\n  \n  //m1 = fmod(t/s1,s2),\n  \n  //t += m3/2.;\n  t /=  //varying tempo\n      (1.+fmod(t/s1+floor(t+.5),2.))\n      //(1.+fmod((floor(t/s1)+t/s1)/2.+floor(t*s1),2.))\n  ;\n  //t += s1*s1;\n  t *=\n      s1*s1*(1.+fmod(floor(t*s1*2.)/s1,2.))/(1.+fmod(floor(t*s1/2.)/s1,2.))\n      //s1*s1\n  ;\n  \n    float m2 =\n      1. + fmod((t/s1+floor(t/s1)),s1)\n      //1. + fmod(t/s1,8./(1.+fmod(t/s1,2.)))\n      //1. + fmod(t/s1,s1/2.)*fmod(t/s1/2.,s1/2.)\n      //1. + min(fmod(time,s1),t)\n  ;\n  \n  //m3 = mod(floor(t/s1),1.+s1+m3);\n  //m2 = mod(floor(t/s1*2.),s1-m2);\n  \n  //t /= max(m2,m1+m3+1.);\n  \n  float a=\n      //32.*((1.-sqrt(fract(t/s1))))\n      16.*pow((1.-(fract(t/s1)/2.)),2.)\n  ,\n  \n  nb = time*tempo*pow(2.,(m3+m2)/5.+5.5);\n\n  return log(.125+abs(.5-vec2(fract(nb*.998)\n   ,fract(nb)))*a);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}