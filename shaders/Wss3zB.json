{
    "Shader": {
        "info": {
            "date": "1547891279",
            "description": "Trigonometric iterations. Or, some abstract stuff inspired made after Pickover's popcorn formulas. Details here: [url]https://iquilezles.org/articles/popcorns/[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "Wss3zB",
            "likes": 55,
            "name": "Iterations - trigonometric II",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "trigonometric"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2969
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2019 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// Details here:\n//\n//   https://iquilezles.org/articles/popcorns/\n//\n// Other \"Iterations\" shaders:\n//\n// \"trigonometric\"   : https://www.shadertoy.com/view/Mdl3RH\n// \"trigonometric 2\" : https://www.shadertoy.com/view/Wss3zB\n// \"circles\"         : https://www.shadertoy.com/view/MdVGWR\n// \"coral\"           : https://www.shadertoy.com/view/4sXGDN\n// \"guts\"            : https://www.shadertoy.com/view/MssGW4\n// \"inversion\"       : https://www.shadertoy.com/view/XdXGDS\n// \"inversion 2\"     : https://www.shadertoy.com/view/4t3SzN\n// \"shiny\"           : https://www.shadertoy.com/view/MslXz8\n// \"worms\"           : https://www.shadertoy.com/view/ldl3W4\n// \"stripes\"         : https://www.shadertoy.com/view/wlsfRn\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by inigo quilez - iq/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Other \"Iterations\" shaders:\n//\n// \"trigonometric\"   : https://www.shadertoy.com/view/Mdl3RH\n// \"trigonometric 2\" : https://www.shadertoy.com/view/Wss3zB\n// \"circles\"         : https://www.shadertoy.com/view/MdVGWR\n// \"coral\"           : https://www.shadertoy.com/view/4sXGDN\n// \"guts\"            : https://www.shadertoy.com/view/MssGW4\n// \"inversion\"       : https://www.shadertoy.com/view/XdXGDS\n// \"inversion 2\"     : https://www.shadertoy.com/view/4t3SzN\n// \"shiny\"           : https://www.shadertoy.com/view/MslXz8\n// \"worms\"           : https://www.shadertoy.com/view/ldl3W4\n// \"stripes\"         : https://www.shadertoy.com/view/wlsfRn\n\n\n\n#define ZERO min(0,iFrame)\n\nconst uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x>>8)*(1.0/float(0x00ffffffU));\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n\nvec2 func( in vec2 z, in vec4 t )\n{\n    //z -= 0.1*cos(t.xz + z.yx + vec2(0.0,2.0) + 3.0*cos(t.yw + 1.8*z.yx+vec2(0.0,1.0)) - z.xy*z.xy*0.2);\n    \n    z += 0.1*cos(t.xz + z.x*z.y + vec2(2.0,0.0) + z.yx*4.0 + cos(t.yw + 3.1415927*z.yx) );\n    \n    z /= 1.0 + z.y*z.y*0.0018;\n    \n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ip = ivec2(floor(fragCoord));\n\n    vec2 p = (iResolution.xy-2.0*fragCoord)/iResolution.y;\n\n    float time = (iTime-10.0)*0.04;\n    \n    vec2 q = 3.2*p - vec2(0.25,0.35);\n    vec4 t = vec4( 1.0000000, -1.4142136, 1.5707963, -1.7320508 )*time;\n    \n\tvec3 col = vec3(0.0);\n\n    const int num = 40;\n    for( int n=ZERO; n<num; n++ )\n    {\n        vec3 ra = hash( uvec3(ip,iFrame*117+n) );\n        vec2 of = -1.0+2.0*ra.xy;\n        #if 0\n        vec2 zo = p + of;\n        #else\n        vec2 zo = p + 1.2*of*sqrt(ra.z/dot2(of));\n        #endif\n\n        vec2 z = zo;\n        for( int i=0; i<32; i++ ) \n        {\n            z = func( z, t );\n            vec3 tmp = 1.0 + 0.5*cos(1.0*length(z-zo)+1.0+vec3(0.0,1.0,1.5) ); \n            col += exp2(-tmp*2500.0*dot2(q-z));\n        }\n    }\n\t\n    col = clamp(1.0 - 12.0*col/float(num),0.0,1.0);\n    \n    col = col*col;\n\n    q = fragCoord/iResolution.xy;\n    col *= 0.5+0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n\n    fragColor = mix( texelFetch(iChannel0,ivec2(fragCoord),0), vec4(col,1.0), 0.02 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}