{
    "Shader": {
        "info": {
            "date": "1716822724",
            "description": "Repeated calculation of the Mandelbrot set based on the exterior coordinates.",
            "flags": 48,
            "hasliked": 0,
            "id": "4Xt3RX",
            "likes": 3,
            "name": "Mandelbrot multiverse",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "rainbow",
                "iteration",
                "density",
                "exteriorcoordinates"
            ],
            "usePreview": 0,
            "username": "Microfractal",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "// Set to true to zoom/explore the fractal using arrow keys + I O \n#define EXPLORE false\n\n// Number of fractal copies\n#define Copies 10\n\n// Escape time iterations\n#define Iterations 200\n\n\n// HSL to RGB\nvec3 HSL_to_RGB(float H, float S, float L) {\n    vec3 rgb = clamp( abs(mod(H*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return L + S * (rgb-0.5)*(1.0-abs(2.0*L-1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\n    float er = 625.0;\n    \n    float x = EXPLORE ? GETVAL(CAMERA_X) : sin(iTime / 3.0) * 2.8;\n    float y = EXPLORE ? GETVAL(CAMERA_Y) : cos(iTime / 3.0) * 2.0;\n    float mag = EXPLORE ? exp(3.0 * GETVAL(CAMERA_Z)) / 2.0 : exp(sin(0.1 * iTime)) / 2.0;\n    \n    \n    int m = 0;\n    int n = 0;\n    \n    float px = (fragCoord.x - iResolution.x * 0.5) / iResolution.y;\n    float py = (fragCoord.y - iResolution.y * 0.5) / iResolution.y;\n\n    float cx = px * 4.0 / mag + x;\n    float cy = py * 4.0 / mag + y;\n    \n    float zx = 0.0;\n    float zy = 0.0;\n    \n    while (m < Copies) {\n    \n        while (n < Iterations) {\n            \n            float t1 = zx * zx - zy * zy + cx;\n            zy = 2.0 * zx * zy + cy;\n            zx = t1;\n            \n            if (sqrt(zx * zx + zy * zy) > er) {\n                break;\n            }\n            n++;\n        }\n        if (n == Iterations) {\n        \n            px = zx;\n            py = zy;\n        \n            n = 0;\n            break;\n        }\n        \n        // https://mathr.co.uk/web/m-exterior-coordinates.html\n            \n        cx = atan(zy, zx) / 6.2831853071795864769;\n        cy = log(sqrt(zx * zx + zy * zy)) / log(er);\n                \n        cx = (cx - 0.0) * 4.0 / mag + x;\n        cy = (cy - 1.5) * 4.0 / mag + y;\n        zx = 0.0;\n        zy = 0.0;\n        \n        m++;\n    }\n   \n    float H = (sin(float(n) / 50.0 + iTime / 10.0 + px * 0.5) / 2.0 + 0.5);\n    float S = pow(sin(float(n) / 10.0 + iTime / 9.0) / 2.0 + 0.5, 0.1);\n    float L = n < Iterations ? pow(sin(float(n) / 5.0 + iTime / 8.0 + 2.0 * py) / 2.0 + 0.5, 3.0) : 0.0;\n    \n    vec3 col = HSL_to_RGB(H, S, L);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define GETVAL(INDEX) texelFetch(iChannel0,ivec2(INDEX,0),0).x\n#define GETKEY(INDEX) (texelFetch(iChannel1,ivec2(INDEX,0),0).x>0.5)\n\n#define KEY_UP\t\t38\n#define KEY_DOWN\t40\n#define KEY_LEFT\t37\n#define KEY_RIGHT\t39\n#define KEY_IN      73\n#define KEY_OUT\t    79\n\n#define KEY_A       65\n\n#define CAMERA_X\t0\n#define CAMERA_Y\t1\n#define CAMERA_Z\t2",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SETVAL(INDEX,VAL) if(int(fragCoord.x)==INDEX) fragColor=vec4(VAL)\n\n#define CAMERA_INC 0.02\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfragColor=texelFetch(iChannel0,ivec2(fragCoord),0);\n    if(iTime<0.1) {\n    \tSETVAL(CAMERA_Y,0.0);\n        SETVAL(CAMERA_X,0.0);\n        SETVAL(CAMERA_Z,0.0);\n    }\n\tif(GETKEY(KEY_UP))\n        SETVAL(CAMERA_Y,(GETVAL(CAMERA_Y)+CAMERA_INC / exp(3.0 * GETVAL(CAMERA_Z))));\n    if(GETKEY(KEY_DOWN))\n        SETVAL(CAMERA_Y,(GETVAL(CAMERA_Y)-CAMERA_INC / exp(3.0 * GETVAL(CAMERA_Z))));\n    if(GETKEY(KEY_LEFT))\n        SETVAL(CAMERA_X,(GETVAL(CAMERA_X)-CAMERA_INC / exp(3.0 * GETVAL(CAMERA_Z))));\n    if(GETKEY(KEY_RIGHT))\n        SETVAL(CAMERA_X,(GETVAL(CAMERA_X)+CAMERA_INC / exp(3.0 * GETVAL(CAMERA_Z))));\n    if(GETKEY(KEY_IN))\n        SETVAL(CAMERA_Z,(GETVAL(CAMERA_Z)+CAMERA_INC));\n    if(GETKEY(KEY_OUT))\n        SETVAL(CAMERA_Z,(GETVAL(CAMERA_Z)-CAMERA_INC));   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}