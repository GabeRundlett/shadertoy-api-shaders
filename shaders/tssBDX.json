{
    "Shader": {
        "info": {
            "date": "1589370716",
            "description": "Fire effect with curl noise.\nBy using POW to compose the buffer, I was able to get a cartoonish look.\nHowever, the adjustment of the values is very sensitive.",
            "flags": 32,
            "hasliked": 0,
            "id": "tssBDX",
            "likes": 48,
            "name": "cartoonish fire",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "cartoon",
                "fire",
                "curl"
            ],
            "usePreview": 0,
            "username": "yuntaRobo",
            "viewed": 1399
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(texture(iChannel0, fragCoord / iResolution.xy).xyz, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926;\n\n// Hash without Sine by Dave_Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat anim(float f, float speed)\n{\n    return sin(f * PI * 2.0 + iTime * speed) * 0.5 + 0.5;\n}\n\nfloat noiseValue2D(vec2 p, float s, float speed)\n{\n    p *= s;\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * f * (f * (6.0 * f - 15.0) + 10.0);\n    float r1 = anim(hash12(i + vec2(0.0, 0.0)), speed);\n    float r2 = anim(hash12(i + vec2(1.0, 0.0)), speed);\n    float r3 = anim(hash12(i + vec2(0.0, 1.0)), speed);\n    float r4 = anim(hash12(i + vec2(1.0, 1.0)), speed);\n    return mix(mix(r1, r2, f.x), mix(r3, r4, f.x), f.y);\n}\n\nfloat noiseValueFbm2D(vec2 p, float s, float speed, int octaves, float amplitude)\n{\n    float o, mx = 0.0;\n    for(int i = 0; i >= 0; i++)\n    {\n        if(i >= octaves)\tbreak;\n        float a = pow(amplitude, float(i));\n        o += a * noiseValue2D(p, s * exp2(float(i)), speed);\n        mx += a;\n    }\n    return o / mx;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 r = iResolution.xy;\n\n\tvec2 p = (fragCoord * 2.0 - r) / r.y;\n\tvec2 uv = fragCoord / r;\n\n\t// curl noise\n//\tfloat e = 10.0 / r.y;\n    float e = 0.0225; \n\tfloat s = 4.0;\n\tfloat speed = 6.0;\n\tint octaves = 5;\n    float amplitude = 0.5;\n\tfloat f1 = noiseValueFbm2D(p + vec2(e, 0.0), s, speed, octaves, amplitude);\n\tfloat f2 = noiseValueFbm2D(p + vec2(-e, 0.0), s, speed, octaves, amplitude);\n\tfloat f3 = noiseValueFbm2D(p + vec2(0.0, e), s, speed, octaves, amplitude);\n\tfloat f4 = noiseValueFbm2D(p + vec2(0.0, -e), s, speed, octaves, amplitude);\n\tvec2 v = vec2(f3 - f4, -f1 + f2) * 0.01;\n\tv.y += 0.00225;\n\tv += normalize(p) * length(p) * 0.001;\n\n    // distance field\n    vec2 center = p + vec2(sin(iTime+PI), 0.0);\n    float radius = 0.7;\n\tfloat a = atan(center.y, center.x);\n\tfloat d1 = abs(length(center) - radius / 2.0) - 0.0075;\n    float offset = smoothstep(0.5, 1.0, sin((a + sin(iTime) / radius) * 10.0)) * 0.05;\n\tfloat d2 = abs(length(center) - radius + offset) - 0.01;\n    d2 = min(d2, abs(p.y + radius) - 0.002);\n\n\t// coloring\n\tvec3 c = vec3(smoothstep(0.02, -0.02, d1)) * vec3(0.4, 0.6, 1.0);\n\tc += vec3(smoothstep(0.02, -0.02, d2)) * vec3(1.0, 0.7, 0.5);\n    \n    // buffer composition\n\tc += pow(texture(iChannel0, uv - v).xyz, vec3(1.75));\n\n\tfragColor=vec4(min(c, 1.0), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}