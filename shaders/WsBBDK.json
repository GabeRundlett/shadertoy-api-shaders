{
    "Shader": {
        "info": {
            "date": "1591012454",
            "description": "4d Perlin noise code sample.\nHope, it will be useful to smb.\n\nP.S. Noise can be changed with the mouse.\n\nUPD: Spalmer, thank you for gamma correction advice.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBBDK",
            "likes": 3,
            "name": "4d Perlin Noise",
            "published": 3,
            "tags": [
                "noise",
                "perlinnoise",
                "4d"
            ],
            "usePreview": 0,
            "username": "kotfind",
            "viewed": 1132
        },
        "renderpass": [
            {
                "code": "#define inf 1000000.0\n#define M_PI 3.1415926\n\nfloat rand(in vec4 p) {\n\treturn fract(sin(p.x*1234. + p.y*2345. + p.z*3456. + p.w*4567.) * 5678.);\n}\n\nfloat smoothnoise(in vec4 p) {\n    const vec2 e = vec2(0.0, 1.0);\n    vec4 i = floor(p);    // integer\n    vec4 f = fract(p);    // fract\n    \n    f = f*f*(3. - 2.*f);\n    \n    return mix(mix(mix(mix(rand(i + e.xxxx),\n                           rand(i + e.yxxx), f.x),\n                       mix(rand(i + e.xyxx),\n                           rand(i + e.yyxx), f.x), f.y),\n                   mix(mix(rand(i + e.xxyx),\n                           rand(i + e.yxyx), f.x),\n                       mix(rand(i + e.xyyx),\n                           rand(i + e.yyyx), f.x), f.y), f.z),\n               mix(mix(mix(rand(i + e.xxxy),\n                           rand(i + e.yxxy), f.x),\n                       mix(rand(i + e.xyxy),\n                           rand(i + e.yyxy), f.x), f.y),\n                   mix(mix(rand(i + e.xxyy),\n                           rand(i + e.yxyy), f.x),\n                       mix(rand(i + e.xyyy),\n                           rand(i + e.yyyy), f.x), f.y), f.z), f.w);\n}\n\nfloat noise(in vec4 p) {\n    float s = 0.;\n    float pow2 = 1.;\n    for (int i = 0; i < 5; ++i) {\n\t    s += smoothnoise(p * pow2) / pow2;\n        pow2 *= 2.;\n    }\n    return s / 2.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / min(iResolution.x, iResolution.y);\n\n    vec3 col = vec3(noise(vec4(uv, iMouse.xy/iResolution.xy) * 10.));\n    col = sqrt(col);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}