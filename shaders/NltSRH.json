{
    "Shader": {
        "info": {
            "date": "1639875154",
            "description": "A scene inspired by the game Journey which is wonderful =D",
            "flags": 32,
            "hasliked": 0,
            "id": "NltSRH",
            "likes": 14,
            "name": "Journey tribute",
            "published": 3,
            "tags": [
                "game",
                "ambient",
                "tribute",
                "journey"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb, vec3(1.7));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    rgb *= 1.-sat(length(cuv*2.)-.5);\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define GROUND_MAT 0.\n#define PILLAR_MAT 1.\n\nmat2 r2d(float a) {float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\nfloat fixedseed;\nfloat fixedrand()\n{\n    fixedseed++;\n    return hash11(fixedseed);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y,l.z));\n}\n\nfloat _pillar(vec3 p)\n{\n    float acc = _cube(p, vec3(.4,10.,.4));\n    acc = min(acc, _cube(p-vec3(0.,9.2,0.), vec3(.42,10.,.42)));\n    float vertholth = .1;\n    acc = max(acc, -_cube(p, vec3(1.,10.,vertholth)));\n    acc = max(acc, -_cube(p, vec3(vertholth,10.,1.)));\n    acc = min(acc, _cube(p, vec3(.1,10.,.1)));\n    \n    acc = min(acc, _cube(p-vec3(0.,9.75,0.), vec3(.44,10.,.44)));\n    \n    // Upper part\n    acc = min(acc, _cube(p+vec3(0.,12.,0.), vec3(.5,10.,.5)));\n    float w1 = .3;\n    float l1 = .55;\n    acc = min(acc, _cube(p+vec3(0.,2.5,0.), vec3(w1,w1,l1)));\n    acc = min(acc, _cube(p+vec3(0.,2.5,0.), vec3(l1,w1,w1)));\n    \n    float w2 = .2;\n    float l2 = .6;\n    acc = min(acc, _cube(p+vec3(0.,2.5,0.), vec3(w2,w2,l2)));\n    acc = min(acc, _cube(p+vec3(0.,2.5,0.), vec3(l2,w2,w2)));\n    acc = acc-.1*(texture(iChannel0, p.xy*.2).x*.01-texture(iChannel0, p.zy*.2).x*.01);\n    return acc;\n}\n\nvec2 map(vec3 p)\n{\n    vec3 op = p;\n    vec2 acc = vec2(1000.,-1.);\n    \n    float ground = -p.y\n    -sin(p.z*10.-p.x*1.)*.01*sin(p.x*.5+iTime*.5)*sat(sin(p.z*.5))\n    -sin((p.z+p.x*.2)*10.)*.01*sat(sin(p.x*1.5+p.z))\n    -.5*(sin(p.z*.75+p.x)*1.5-sin(p.x*.5+iTime*.5)*sin(p.z*5.+p.x*10.)*.05)*pow(sat(abs(p.x)/10.),1.);\n    acc = _min(acc, vec2(ground, GROUND_MAT));\n   \n   \n    p.x = abs(p.x);\n    p.x -= 2.;\n    float rep = 3.;\n    \n    p.z = mod(p.z+rep*.5, rep)-rep*.5;\n    acc = _min(acc, vec2(_pillar(p), PILLAR_MAT));\n    \n    op -= vec3(-1.,-2.5,0.);\n    vec3 p1 = op-vec3(sin(iTime*3.)+.5*sin(iTime), sin(iTime*1.7)*.5,sin(iTime*3.7));    \n    acc = _min(acc, vec2(length(p1)-.05, 2.));\n    vec3 p2 = op-vec3(sin(-iTime*3.)+.5*sin(-iTime), sin(iTime*1.7)*.5,sin(-iTime*1.7));    \n    acc = _min(acc, vec2(length(p2)-.01, 2.));\n    \n    return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 2.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+(r*uv.x+u*uv.y)*fov);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x<0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        vec3 pl = p;\n        pl.xy *= r2d(-.25);\n        if (length(pl.xz-vec2(-2.5,1.)) < 2.)\n            accCol += .015*vec3(1.000,0.733,0.361)*(1.-sat(res.x/1.51))*sat(-p.y-1.);\n        p+= rd*res.x*.25;\n    }\n    return vec3(-1.);\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = vec3(0.);\n    vec3 lpos = vec3(-2.,15.,15.);\n    vec3 ldir = p-lpos;\n    vec3 h = normalize(rd+ldir);\n    float ndoth = dot(n,h);\n    if (res.z == GROUND_MAT)\n    {\n        vec3 sandn = (vec3(fixedrand(), fixedrand(),fixedrand())-.5)*2.;\n        float ndoth2 = dot(normalize(n+sandn*.1),h);\n        col = vec3(0.118,0.322,0.243)*pow(sat(ndoth2),10.)*2.;\n        col += vec3(0.118,0.322,0.243)*pow(sat(ndoth2),2.)*.5;\n        col += vec3(0.459,0.686,0.376)*pow(sat(ndoth2),20.)*15.*(1.-sat(res.y/10.));\n        col *= 3.;\n    }\n    else if (res.z == PILLAR_MAT)\n    {\n        float pattern = texture(iChannel0, p.xy*.4).x-texture(iChannel0, p.zy*.4).x;\n        col = vec3(.1)*sat(pattern+.75)*.25;\n        col += 1.2*vec3(.1,.23,.34)*(1.-sat(abs(p.y+1.)*.5))*.5*pow(sat(ndoth),.25);\n        vec3 pl = p-vec3(-1.,0.,0.);\n        col += 1.5*vec3(1.000,0.733,0.361)*(1.-sat(length(pl.xz)-5.))*.35*sat(1.2+ndoth);\n    }\n    else\n        col = n*.5+.5;\n\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 dof = (vec3(rand(), rand(), rand())-.5)*.1*sat(length(uv)*.5);\n    vec3 ro = vec3(1.4-.1*sin(iTime*.25),-.2,-3.)+dof;\n    vec3 ta = vec3(0.,-1.5,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv)-dof;\n    vec3 res = trace(ro, rd, 1024);\n    float maxDist = 100.;\n    float dist = maxDist;\n    vec3 halolight = vec3(0.);\n    if (res.y > 0.)\n    {\n        halolight = accCol;\n        dist = res.y;\n        vec3 p = ro+rd*res.y;\n        fixedseed = texture(iChannel0,p.xz*.005).x;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(res, rd, p, n);\n        vec3 refl = normalize(reflect(rd,n)+.5*(vec3(rand(),rand(),rand())-.5));\n        vec3 resrefl = trace(p+n*0.01, refl, 128);\n        if (resrefl.y> 0.)\n        {\n            vec3 prefl = p*refl*resrefl.y;\n            vec3 nrefl = getNorm(prefl, resrefl.x);\n            col += getMat(resrefl, rd, prefl, nrefl)*(res.z == GROUND_MAT ? 2.5 : .2);\n        }\n    }\n    \n    vec3 fogcol = vec3(.1,.34,.21)*.5*sat(uv.y+.75);//mix(vec3(.1,.34,.21)*.5, vec3(0.784,0.784,0.639)*.1, sat((dist-20.)*.05));\n    col = mix(col, fogcol, pow(sat(dist/maxDist), .25));\n    col += halolight*1.2;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    seed+= texture(iChannel0, uv).x;\n    seed += iTime;\n    \n    vec3 col = rdr(uv);\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .85);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define GLOW_SAMPLES 40\n#define GLOW_DISTANCE 0.3\n#define GLOW_POW .8\n#define GLOW_OPACITY .4\n\n#define sat(a) clamp(a,0., 1.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}