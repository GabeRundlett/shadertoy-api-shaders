{
    "Shader": {
        "info": {
            "date": "1669563219",
            "description": "light ray with sdf  line, can be apply for  black and white texture(mask)",
            "flags": 0,
            "hasliked": 0,
            "id": "DsfSWj",
            "likes": 7,
            "name": "Light beam",
            "published": 3,
            "tags": [
                "beam",
                "lightrays",
                "shining"
            ],
            "usePreview": 0,
            "username": "Yahor10",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359f;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord.xy / iResolution.xy);\n    uv -= vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;            \n    // Calculate polar coordinates\n    float r = length(uv);\n    float a = atan(uv.y, uv.x);       \n    // Draw the lines\n    const float it = 5.0;\n    float c = 0.0;\n    for( float i = 0.0 ; i < it ; i += 1.0 )// line copy from here https://www.shadertoy.com/view/MtBGRt\n    {\n        float i01 = i / it;\n        float rnd = .0;\n        float react = .0;          \n        float c1 = (uv.x + 1.1 + react) * 0.004 * abs( 1.0 / sin( (uv.y +0.15) +\n                                                         sin(uv.x * .5) *\n                                                                 (0.51 + 0.35)) );\n        c = clamp(c + c1, 0.0, 1.0);\n    }    \n    vec2 origin = vec2(c);    \n    float timeValue = iTime ;\n    float angleRad = cos(timeValue);    \n    float offset = mix(.77, 0.5, angleRad); //aligned by 2    \n    vec2 e = origin;\n    \n    vec2 cylinderTexCoords = e; // coordinates for shining. Can be apply with sdf or black/white texture( mask)\n    cylinderTexCoords.x = (asin(2.0 * origin.x - 1.0)) / (PI) + (offset * origin.y) + 0.5;        \n    \n    //vec4 textureShine = texture(blackwhitemask,cylinderTexCoords);\n    vec2 inverseCylinderTexCoords = origin;\n    inverseCylinderTexCoords.x = cylinderTexCoords.x - (2.0 * offset * origin.y);\n    //vec4 textureShineInverse = texture(blackwhitemask,inverseCylinderTexCoords);\n     fragColor = vec4(c +(cylinderTexCoords.x * inverseCylinderTexCoords.x) )*vec4(240.0, 177.0, 90.0, 255.0) / 255.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}