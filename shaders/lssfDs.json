{
    "Shader": {
        "info": {
            "date": "1498971238",
            "description": "Generalized Collatz fractal for f(n) = an+b if n is odd and f(n)=n/2 is n is even. Change the constants [b]a[/b] and [b]b[/b] in line 19 and 20.",
            "flags": 0,
            "hasliked": 0,
            "id": "lssfDs",
            "likes": 9,
            "name": "Generalize Collatz: an+b",
            "published": 3,
            "tags": [
                "2d",
                "collatz"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1114
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Generalized Collatz fractal\n//\n// f(n) = a·n + b   if n even\n// f(n) = n/2       if n odd\n//\n// transforms into\n//\n// f(z) = [ ((2a+1)·z+2b) - k((2a-1)·z+2b) ]/4\n//\n// with k = exp(-nz). See https://www.youtube.com/watch?v=GJDz4kQqTV4 and https://www.shadertoy.com/view/llcGDS\n//\n// Classic Collatz: ka=3, kb=1\n\n\nconst float a = 3.0;\nconst float b = 2.0;\n\n\n//------------------------------------------------------\n// global\n//------------------------------------------------------\n\n#define AA 2   // supersampling level. Make higher for more quality.\n\nconst float pi = 3.1415926535897932384626433832795; // should be pronounced \"pee\" not \"pie\", dear english speakers!\n\n\n//------------------------------------------------------\n// complex numbers\n//------------------------------------------------------\n\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 cmulj( vec2 z ) { return vec2(-z.y,z.x); }\nvec3 cexp( vec2 z ) { return vec3( exp(z.x), vec2( cos(z.y), sin(z.y) ) ); }\nvec3 cexpj( vec2 z ) { return vec3( exp(-z.y), vec2( cos(z.x), sin(z.x) ) ); }\n\n\n//------------------------------------------------------\n// Visualization\n//------------------------------------------------------\n\nvec3 render( in vec2 fragCoord, float time )\n{\n    float sc = 4.5;\n    vec2 ce = vec2(0.0,0.0);    \n\n    vec2 p = ce + sc*(-iResolution.xy+2.0*fragCoord) / iResolution.x;\n    float e = sc*2.0/iResolution.x;\n    \n    vec2 z = p;\n    \n    const float th = 100000.0;\n    \n    \n    float d = 0.0;\n    float f = 0.0;\n    vec2 dz = vec2(1.0,0.0);\n    for( int i=0; i<64; i++ )\n    {\n        vec3 k = cexpj( pi*z );\n        \n        // f(n) = n/2 if n even\n        // f(n) = an+b if n odd\n        z = ( cadd((2.0*a+1.0)*z,2.0*b) - k.x*cmul(k.yz,cadd((2.0*a-1.0)*z,2.0*b)) )/4.0;\n        \n\n        float r = length(z);\n        if( r>th ) { d=1.0; break; }\n        f += 1.0;\n    }\n    \n    vec3 col = vec3(0.5);\n    if( d>0.5 )\n    {\n        float hmmmm = 1.05 + exp(-(a-3.0)/(1.0+a/2.0));\n        f -= clamp( hmmmm*log(length(z)/th)/log(a), 0.0, 1.0 );\n\n        col = 0.5 + 0.5*cos(f*pow(a,0.9)*0.1 + 2.5 + vec3(0.0,0.6,1.0));\n\n    }\n\n    col = clamp( col, 0.0, 1.0 );\n    \n    // axis\n    #if 1\n    float show = 1.0 - smoothstep(268.0,273.0,time );\n    float g  = smoothstep( 0.0, 1.0*e, abs( fract(p.y+0.5)-0.5 ) );\n          g *= smoothstep( 0.0, 1.0*e, abs( fract(p.x+0.5)-0.5) );\n    col = mix( col, vec3(0.0,0.0,0.0), (1.0-g)*show );\n\n    // origin axis\n          g  = smoothstep( 0.5*e, 2.0*e, abs(p.y) );\n          g *= smoothstep( 0.5*e, 2.0*e, abs(p.x) );\n    col = mix( col, vec3(0.0,0.0,0.0), (1.0-g)*show );\n   \n    #endif\n\n    \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 px = fragCoord + vec2(float(m),float(n))/float(AA);\n    \tcol += render( px, iTime );    \n    }\n    col /= float(AA*AA);\n#else\n        \n    col = render( fragCoord, iTime );\n#endif            \n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}