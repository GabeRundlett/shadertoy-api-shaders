{
    "Shader": {
        "info": {
            "date": "1598826246",
            "description": "Source : https://www.youtube.com/watch?v=3CycKKJiwis&t=247s\nMy Game :  https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect",
            "flags": 0,
            "hasliked": 0,
            "id": "wtSBRD",
            "likes": 6,
            "name": "24. The Universe 1",
            "published": 3,
            "tags": [
                "simpleonet"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 340
        },
        "renderpass": [
            {
                "code": "#define S(a, b, t) smoothstep( a, b, t )  \n\nfloat DistLine( vec2 p , vec2 a , vec2 b ) {\n\n    // Line ba에 Pa를 직교 투영한다.\n    \n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    \n    float t = clamp( dot( pa , ba ) / dot ( ba , ba ) , 0.0 , 1.0 );\n    \n    return length( pa - ba * t );\n        \n}\n\nfloat N21( vec2 p ) {\n\n    p = fract( p * vec2( 233.34 , 851.73));\n    p += dot( p, p+23.45);\n    return fract(p.x * p.y );\n}\n\nvec2 N22( vec2 p ) {\n\tfloat n = N21( p );\n    return vec2( n , N21( p + n ) );\n}\n\n\n\nvec2 GetPos( vec2 id , vec2 offset ) {\t// from id\n    \n    //vec2 n = N22( id + offset ) * iTime ;\n    vec2 n = N22( id + offset ) * iTime ;\n    \n    //float x = sin ( iTime * n.x );\n    //float y = cos ( iTime * n.y );\n    \n    return offset + sin( vec2(n) ) * 0.4;\t\t// 0.4, it is Important that balls is in grid cell.\n    \n}\n\nfloat Line( vec2 p , vec2 a , vec2 b ) {\n\tfloat d = DistLine( p , a, b );\n   \tfloat m = S( 0.03, 0.01 , d );\n    \n    m *= S( 1.2, 0.8 , length( a - b ) );\n    \n    return m;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) /iResolution.y;\n    \n    //float d = DistLine( uv , vec2(0) , vec2(1) );\n    //float m = S( 0.1, 0.05 , d );\n    float m;\n    \n    \n    //m = N22( uv ).x;\n    \n    uv *= 5.0;\n    vec2 gv = fract(uv) - 0.5f;\t// center point to ( 0 , 0 ) local uv\n    vec2 id = floor(uv);\n    \n    \n    //vec2 p = N22( id ) - 0.5;\t// Random point based on each grid center.\n    \n    //vec2 p = GetPos( id );\n    //float d = length( p - gv );\n    \n\t\n    int i = 0;\t\t// index\n    vec2 p[9];\t\t// 9 cell\n    \n    for (float y = -1.0 ; y <= 1.0 ; y++ ) {\n        for ( float x = -1.0 ; x <= 1.0 ; x++ ) {\n        \tp[i++] = GetPos( id , vec2( x , y ));\n        }\n    }\n    \n    \n    float t = iTime * 10.0;\n    for ( int i = 0 ; i < 9 ; i++ ) {\n    \tm += Line( gv, p[4] , p[i] );\t// p[4] is mine\n        \n        vec2 j = ( p[i] - gv ) * 10.0;\n        float sparkle = 1.0 / dot(j,j);\n        \n        \n        \n        m += sparkle * ( sin(t + p[i].x * 10.0 ) * 0.5 + 0.5 ) ;\n    }\n    \n    m += Line( gv, p[1] , p[3] );\t// p[4] is mine\n    m += Line( gv, p[1] , p[5] );\t// p[4] is mine\n    m += Line( gv, p[7] , p[3] );\t// p[4] is mine\n    m += Line( gv, p[7] , p[5] );\t// p[4] is mine\n    \n    \n   \n\n    vec3 col = vec3(m);\n    \n    //col.rg = gv;\n    if ( gv.x > 0.49 || gv.y > 0.49) col = vec3(1.0 , 0.0 , 0.0 );\n    fragColor = vec4(col,1.0);\n}\n\n// 1. 라인과 점과의 거리 구하기\n// 2. Noise 함수의 정의\n//\t\t* N21( vec2 p ) : Sin() 대신에 Dot() 사용하는 노이즈\n// 3. 그리드 만들기 (  id , localuv )\n// 4. 그리드 안에서 랜덤 포인트 만들기\n//\t\t* local uv 와 Random Point를 조합하여 만든다.\n//\t\t* \n// 5. 랜덤 포인트 애니메이팅 시키기.\n//\t\t* GetPos( p )\n//\t\t* 이동 시키기 위해서는 sin() cos()을 이용한다.\n// 6. 움직이는 포인트들 사이에 선 그리기\n// \t\t* for문을 돌면서 인접한 9개의 셀에 있는 포인트와 각각 비교한다.\n// 7. 라인을 그린후 9개의 셀에서 서로 연결되지 않는 대각선 셀까리의 계산을 해준다.\n//\t\t* 1번 => 3,5번, 7번 => 3,5번 셀을 직접 연결해준다.\n\n// 8. 라인의 길이에 따라서 페이드 해준다. ( 가장 가까운 것만 연결된 것처럼 보이게 )\n//\t\tm *= S( 1.2, 0.8 , length( a - b ) );\n\n// 9. 스파클 시키기\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}