{
    "Shader": {
        "info": {
            "date": "1600552958",
            "description": "simple deferred rendering example",
            "flags": 32,
            "hasliked": 0,
            "id": "ttXyDS",
            "likes": 3,
            "name": "Simple Deferred",
            "published": 3,
            "tags": [
                "deferred"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 gbuffer=texture(iChannel0,fragCoord/iResolution.xy);\n    \n    bool renderBuffer=false;\n    if(renderBuffer)\n    {\n        fragColor=gbuffer;\n    }\n    else\n    {\n        mat3 v = viewMat(iTime);\n\n        vec2 ndc = fragCoord/iResolution.xy*2.-1.;\n        vec3 view=normalize(v[2]+v[0]*ndc.x*iResolution.x/iResolution.y+v[1]*ndc.y);\n        vec3 env = texture(iChannel2,view).rgb*2.;\n\n        vec3 normal=vec3(gbuffer.rg, -sqrt(1.0-gbuffer.r*gbuffer.r+gbuffer.g*gbuffer.g));\n        normal = normal*inverse(v);\n\n        vec3 lightDir=normalize(vec3(0.707,0.707,-0.707));\n        vec3 lightCol=texture(iChannel2,lightDir).rgb*70.;\n\n        vec3 radiance=lightCol*max(dot(normal,lightDir),0.0);\n\n        vec3 ambient=texture(iChannel3,normal).rgb*10.;\n\n        // lambert\n        vec3 albedo=vec3(gbuffer.b)/vec3(3.1415);\n\n        vec3 illum=albedo*(radiance+ambient);\n        illum=illum/(illum+vec3(1.));\n        illum=pow(illum,vec3(1.0/2.2));\n\n        vec3 o=mix(env,illum,float(length(gbuffer)!=0.));\n        fragColor = vec4(o,1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 ndc = fragCoord/iResolution.xy*2.-1.;\n    float d=0.;\n    fragColor=vec4(0.);\n    for(int i = 0; i < 16; i++)\n    {\n        mat3 v = viewMat(iTime);\n        \n        vec3 f = v[2];\n        vec3 r = v[0];\n        vec3 u = v[1];\n        vec3 p = vec3(0.2*sin(iTime),0.,-0.2*cos(iTime))+normalize(f+r*ndc.x*iResolution.x/iResolution.y+u*ndc.y)*d;\n        float s=length(p)-0.1;\n        if(s<0.0001)\n        {\n            vec3 n = normalize(p);\n            vec2 uv=vec2(acos(n.y)/3.1415,atan(n.z,n.x)/(3.1415*2.));\n            \n            n=n*v; // Transform our normals to the view's basis to make our z always point to -1\n\n        \t// Normalized lambert\n        \tvec3 albedo=texture(iChannel0,uv*2.).rgb;\n            \n            fragColor=vec4(n.xy,albedo.r,1.);\n            break;\n        }\n        d+=s;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "mat3 viewMat(float time)\n{\n    vec3 f = vec3(-sin(time),0.,cos(time));\n    vec3 r = vec3(cos(time),0.,sin(time));\n    vec3 u = vec3(0.,1.,0.);\n    \n    return mat3(r,u,f);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}