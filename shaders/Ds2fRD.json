{
    "Shader": {
        "info": {
            "date": "1689504887",
            "description": "This shader simulates printing CMYK dots on white paper. This can be useful for generating dynamic newspaper/magazine effect on arbitrary texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds2fRD",
            "likes": 4,
            "name": "Halftone effect",
            "published": 3,
            "tags": [
                "postprocessing",
                "halftone",
                "cmyk",
                "analog",
                "print"
            ],
            "usePreview": 1,
            "username": "SoldatovAndrey",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "// Convert rgb color to cmyk\nvec4 cmyk(vec3 c) {\n    float k = 1.0 - max(c.r, max(c.g, c.b));\n    return vec4(\n        (1.0 - c.r - k) / (1.0 - k),\n        (1.0 - c.g - k) / (1.0 - k),\n        (1.0 - c.b - k) / (1.0 - k),\n        k\n    );\n}\n\n// Grid pattern rotated by 'a' radians with the density 'dens'\nvec2 grid(vec2 uv, float a, float dens) {\n    vec2 aspect = iResolution.xy / iResolution.y;\n    return vec2(\n        mod(((uv.x * aspect.x) * cos(a) - uv.y * sin(a)) * dens, 1.0), \n        mod(((uv.x * aspect.x) * sin(a) + uv.y * cos(a)) * dens, 1.0)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    //Color of the image, converted to cmyk\n    vec4 cmyk = cmyk(col);\n    \n    //Density of the dots\n    float dens = 100.0;\n    \n    //Rotation angles for different ink colors\n    //http://the-print-guide.blogspot.com/2009/05/halftone-screen-angles.html\n    float ca = 0.261;\n    float ma = 1.309;\n    float ya = 0.0;\n    float ka = 0.785;\n    \n    vec2 cgrid = grid(uv, ca, dens);\n    \n    float cb = cmyk.x * 0.8 / length(cgrid - vec2(0.5));\n    cb = pow(cb, 5.0);\n    cb = max(min(cb, 1.0), 0.0);\n    vec3 cv = vec3(cb, 0.0, 0.0);\n    \n    vec2 mgrid = grid(uv, ma, dens);\n    \n    float mb = cmyk.y * 0.9 / length(mgrid - vec2(0.5));\n    mb = pow(mb, 5.0);\n    mb = max(min(mb, 1.0), 0.0);\n    vec3 mv = vec3(0.0, mb, 0.0);\n    \n    vec2 ygrid = grid(uv, ya, dens);\n    \n    float yb = cmyk.z * 0.8 / length(ygrid - vec2(0.5));\n    yb = pow(yb, 5.0);\n    yb = max(min(yb, 1.0), 0.0);\n    vec3 yv = vec3(0.0, 0.0, yb);\n    \n    vec2 kgrid = grid(uv, ka, dens);\n    \n    float kb = cmyk.w * 0.6 / length(kgrid - vec2(0.5));\n    kb = pow(kb, 5.0);\n    kb = max(min(kb, 1.0), 0.0);\n    vec3 kv = vec3(kb);\n\n    // Output to screen\n    fragColor = vec4(vec3(1.0) - cv - mv - yv - kv,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}