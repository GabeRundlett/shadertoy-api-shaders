{
    "Shader": {
        "info": {
            "date": "1568058371",
            "description": "First shader created on Codebase Alpha live coding stream on Twitch https://twitch.tv/codebasealpha\nUpdated 27 Oct 2019 with simple distortion: uv *= length(uv) + 3.0*sin(iTime);",
            "flags": 0,
            "hasliked": 0,
            "id": "ts3GR7",
            "likes": 6,
            "name": "CodebaseAlpha 1",
            "published": 3,
            "tags": [
                "2d",
                "hypnotic",
                "weird"
            ],
            "usePreview": 0,
            "username": "codebasealpha",
            "viewed": 542
        },
        "renderpass": [
            {
                "code": "float dCircle(vec2 pos, float radius)\n{\n    return length(pos) - radius;\n}\n\nfloat dRoundBox(vec2 pos, float radius)\n{\n  pos = pos*pos;\n  pos = pos*pos;\n  float d8 = dot(pos, pos);\n  return pow(d8, 1.0/8.0) - radius;\n  \n}\n\nfloat dBox(vec2 pos, vec2 siz)\n{\n    pos = abs(pos);\n    float dx = pos.x - siz.x;\n    float dy = pos.y - siz.y;\n    return max(dx, dy);\n}\n\nvec2 toPolarCoords(vec2 rectCoords)\n{\n    return vec2(length(rectCoords),atan(rectCoords.y, rectCoords.x));\n}\n\nvec2 toRectCoords(vec2 polarCoords)\n{\n    return vec2(polarCoords.x * cos(polarCoords.y), polarCoords.x * sin(polarCoords.y));\n}\n\n#define PI 3.141592654\n#define TAU (2.0*PI)\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n    vec2 c = floor((p + size*0.5)/size);\n    p = mod(p + size*0.5,size) - size*0.5;\n    return c;\n}\n\nfloat dF2(vec2 pos)\n{\n vec2 pp = toPolarCoords(pos);\n  float a = TAU/30.0;\n  float np = pp.y/a;\n  pp.y = mod(pp.y, a);\n  float m2 = mod(np, 2.0);\n  if (m2 > 1.0)\n  {\n    pp.y = a - pp.y;\n  }\n\n    pp.y += iTime;\n    pos = toRectCoords(pp);\n  \n     pMod2(pos, vec2(0.5));\n\n    float d1 = dCircle(pos, 0.1);\n\n    float d3 = dBox(pos - vec2(0.1), vec2(0.1, 0.1));\n    float d = min(d1, d3);\n    return d;\n}\n\nfloat dF(vec2 pos)\n{\n    //pos = abs(pos);\n    vec2 pPos = toPolarCoords(pos);\n    pPos.y = mod(pPos.y, TAU/7.0);\n    pPos.y += iTime;\n    \n   // pPos.x *= 1.0 + pos.y;\n    pos = toRectCoords(pPos);\n    pMod2(pos, vec2(0.5));\n\n    float d1 = dCircle(pos, 0.1);\n\n    float d3 = dBox(pos - vec2(0.1), vec2(0.1, 0.1));\n    float d = min(d1, d3);\n    return d;\n}\n\nvoid rotate(inout vec2 pos, float angle)\n{\n  float c = cos(angle);\n  float s = sin(angle);\n  pos = vec2(c*pos.x + s*pos.y, -s*pos.x + c*pos.y);\n    \n}\n\nvec3 postProcess (vec3 col, vec2 pos)\n{\n    rotate(pos, iTime);\n    col = clamp(col, 0.0, 1.0);\n    return pow(col, vec3(abs(pos.x), abs(pos.y), length(pos)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    uv *= length(uv) + 3.0*sin(iTime);\n    \n    float d = dF2(uv);\n    \n    \n    vec3 col = vec3(0);\n    \n    float md = mod(d, 0.1);\n    float nd = abs(d / 0.1);\n    \n    if (abs(md) < 0.01)\n    {\n        if (d < 0.0)\n        {\n            col = vec3(1, 0.3 ,0.15)/ nd;\n        }\n        else\n        {\n            col = vec3(0.3, 1, 0.15) / nd;\n        }\n    }\n    \n    if (abs(d) < 0.02)\n    {\n        col = vec3(1);\n    }\n\n    fragColor = vec4(postProcess(col, uv),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}