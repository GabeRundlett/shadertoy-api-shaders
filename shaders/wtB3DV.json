{
    "Shader": {
        "info": {
            "date": "1561307504",
            "description": "This is an atempt to recreate an effect I achieved with javascript and canvas. Unfortunately using the fragment shader is less than ideal for this effect!",
            "flags": 0,
            "hasliked": 0,
            "id": "wtB3DV",
            "likes": 20,
            "name": "Circle Of Life  (in progress)",
            "published": 3,
            "tags": [
                "2d",
                "triangles",
                "pseudorandom"
            ],
            "usePreview": 0,
            "username": "SSHantaram",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "const int numTriangles = 500;\nconst float GRID_SIZE = 0.05;\nconst float ARBITRARY_OFFSET = 17.567;\nconst float RADIUS = 7.0;\nconst float EPSILON = 0.0001;\nconst float WORLD_SPEED = 1.0;\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n\n\n// Compound versions of the hashing algorithm I whipped together.\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\nuint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\n\n\n\n// Construct a float with half-open range [0:1] using low 23 bits.\n// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\n\n\n\n// Pseudo-random value in half-open range [0:1].\nfloat random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n\nvec2 getTriangleCenter(vec2 pos) {\n    vec2 gridPoint = vec2(floor(pos.x), floor(pos.y));\n    vec2 delta = pos - gridPoint;\n    if (delta.x + delta.y < 1.0) return vec2(gridPoint.x + 1.0/3.0, gridPoint.y + 1.0/3.0);\n    else return vec2(gridPoint.x + 2.0/3.0, gridPoint.y + 2.0/3.0);\n}\n\nfloat fastNoise(vec2 pos, float offset) {\n    return random(vec3(pos, 0.0) + vec3(ARBITRARY_OFFSET, 2.0*ARBITRARY_OFFSET, 5.0*ARBITRARY_OFFSET));\n}\n\nbool insideTriangle(vec2 P, vec2 A, vec2 B, vec2 C) {\n    vec2 v1 = B - A;\n    vec2 v2 = C - A;\n    \n    float divisor = determinant(mat2(v1, v2));\n    \n    float a = (determinant(mat2(P, v2)) - determinant(mat2(A, v2)))/divisor;\n    if (a <= -EPSILON) return false; // free anti-aliasing\n    \n    float b = -(determinant(mat2(P, v1)) - determinant(mat2(A, v1)))/divisor;\n    if (b <= -EPSILON) return false; // free anti-aliasing\n    \n    return (a + b) <= 1.0 + EPSILON; // free anti-aliasing\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 A = vec2(0.5, 0.5);\n    //vec2 B = vec2(0.0, 1.0);\n    //vec2 C = vec2(1.0, 1.0);\n    \n    float width = iResolution.x/iResolution.y;\n    \n    vec2 worldOffset = vec2(0.8*iTime, 0.2*iTime) * WORLD_SPEED;\n    //worldOffset += vec2(0.8, 0.2)*1000.0;\n    \n    // coordinates centered on screen: height = 1.0, width depends on resolution\n    vec2 pos = (fragCoord/iResolution.y + vec2(-0.5*width, -0.5))/GRID_SIZE;\n    pos += worldOffset;\n    vec2 triangleCenter = getTriangleCenter(pos);\n\n    // black background\n    float val = 0.0;\n\n    float start_x = floor(min(pos.x, worldOffset.x));\n    float start_y = floor(min(pos.y, worldOffset.y));\n    float end_x = floor(max(pos.x, worldOffset.x) + 1.0);\n    float end_y = floor(max(pos.y, worldOffset.y) + 1.0);\n\n    for (float x  = start_x; x <= end_x; x += 1.0) {\n        for (float y  = start_y; y <= end_y; y += 1.0) {\n            vec2 dir, offset, A, B, C;\n            float distFromCircle, moveSpeed, rotation, dirVariance;\n            mat2 rotMat, dirRotMat;\n            \n            // triangle 1\n            vec2 S = vec2(x + 1.0/3.0, y + 1.0/3.0);\n            dir = S - worldOffset;\n            \n           \tmoveSpeed = 0.01 * fastNoise(S, 1.0);\n            distFromCircle = max(0.0, dir.x*dir.x + dir.y*dir.y - RADIUS*RADIUS);\n            rotation = distFromCircle*(fastNoise(S, 2.0) - 0.5);\n            rotMat = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation));\n            offset = dir*distFromCircle*moveSpeed;\n            A = offset + S + rotMat*vec2(-1.0/3.0, -1.0/3.0);\n            B = offset + S + rotMat*vec2(+2.0/3.0, -1.0/3.0);\n            C = offset + S + rotMat*vec2(-1.0/3.0, +2.0/3.0);\n            if (insideTriangle(pos, A, B, C)) {\n               \tval = fastNoise(S, 0.0);\n                break;\n           \t}\n            \n            // triangle 2\n            S = vec2(x + 2.0/3.0, y + 2.0/3.0);\n            dir = S - worldOffset;\n            \n            moveSpeed = 0.01 * fastNoise(S, 1.0);\n            distFromCircle = max(0.0, dir.x*dir.x + dir.y*dir.y - RADIUS*RADIUS);\n            rotation = distFromCircle*(fastNoise(S, 2.0) - 0.5);\n            rotMat = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation));\n            offset = dir*distFromCircle*moveSpeed;\n            A = offset + S + rotMat*vec2(-2.0/3.0, +1.0/3.0);\n            B = offset + S + rotMat*vec2(+1.0/3.0, -2.0/3.0);\n           \tC = offset + S + rotMat*vec2(+1.0/3.0, +1.0/3.0);\n            if (insideTriangle(pos, A, B, C)) {\n                val = fastNoise(S, 0.0);\n                break;\n            \t\n            }\n        }\n    }\n    \n    vec3 col = vec3(val, val, val);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}