{
    "Shader": {
        "info": {
            "date": "1550180683",
            "description": "[b]control[/b]\nmove - arrows left/right/up/down\nshoot - space\n\nplayer can move and shoot orange blocks\n\ndraw almost \"loopless\"\neach tille draw \n8 tiles around+1 self=9 tiles (because I want draw full \"glow\" effect arround each tile)",
            "flags": 48,
            "hasliked": 0,
            "id": "wdS3D3",
            "likes": 25,
            "name": "mini game engine",
            "published": 3,
            "tags": [
                "2d",
                "game",
                "loopless"
            ],
            "usePreview": 0,
            "username": "morimea",
            "viewed": 1893
        },
        "renderpass": [
            {
                "code": "#define SS(x, y, z) smoothstep(x, y, z)\n#define MD(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define PI (4.0 * atan(1.0))\n#define res (iResolution.xy / iResolution.y)\n\n// Created by Danil (2019+) https://github.com/danilw\n// The MIT License or use as you wish\n\n//draw\n\n//define NO_LOOP to draw tiles without loop (glow effect arround tiles will be lost)\n//#define NO_LOOP\n\nconst vec3 bl=vec3(0x33,0x66,0xff)/float(0xff);\nconst vec3 bl2=vec3(0x16,0x14,0x32)/float(0xff);\nconst vec3 org=vec3(0xaf,0x33,0x11)/float(0xff);\nconst vec3 wh=vec3(0x2f,0x2f,0x2f)/float(0xff);\nconst vec3 gc=vec3(0x0f,0x2f,0x0f)/float(0xff);\n\nconst float board_size=0.45;\nconst float block_size=board_size/10.;\n\n#define free 0\n#define block 1\n#define block_static 2\n#define water 3\n#define base 4\n\nvec4 loadval(ivec2 ipx){\n    return texelFetch(iChannel0,ipx,0);\n}\n\nvec4 player_pos(){\n    return loadval(ivec2(27,0));\n}\n\nvec4 bull_pos(){\n    return loadval(ivec2(28,0));\n}\n\nint game_map(int idx){\n    idx+=4;\n    return int(loadval(ivec2(idx/4,0))[idx%4]);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n  \tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix( mix(hash12(b),hash12(b + d.yx), f.x),mix(hash12(b + d.xy), hash12(b + d.yy), f.x), f.y);\n}\n\nvec3 line(vec2 p, vec2 a, vec2 b,vec3 c)\n{\n     p += 0.001;\n     vec2 a2b = b - a;\n     vec2 a2p = p - a;     \n     float h = clamp( dot(a2p,a2b)/dot(a2b,a2b), 0.0, 1.0 );\n     vec2 p1 = mix( a, b, h );\n     float t = length( p - p1 );\n     return c*.01/t;\n}\n\nvec3 line(vec2 p, vec2 a, vec2 b,vec3 c, bool iv){\n    if(iv)return line(p+noise(p*40.0+iTime*2.) * 0.01-0.001, a, b,c);\n    else return line(p, a, b,c);\n}\n\nvec4 draw_block(vec2 p,vec3 ic, bool iv){\n    float d=0.;\n    vec3 col=line(vec2(abs(p).x,p.y)*2.,vec2(block_size,-block_size)*2.,vec2(block_size,block_size)*2.,ic,iv);\n    col+=line(vec2(p.x,abs(p.y))*2.,vec2(block_size,block_size)*2.,vec2(-block_size,block_size)*2.,ic,iv);\n    col+=line(vec2(p.x,abs(p.y))*2.,vec2(block_size,block_size/2.)*2.,vec2(-block_size,block_size/2.)*2.,ic,iv);\n    col+=line(vec2(p.x,p.y)*2.,vec2(block_size,0.)*2.,vec2(-block_size,0.)*2.,ic,iv);\n    col*=SS(block_size,-block_size,sdBox(p,vec2(block_size)));\n    return vec4(col,d);\n}\n\nvec4 draw_bull(vec2 p){\n    float d=0.;\n    p*=MD(iTime*10.);\n    vec3 col=line(vec2(p.x,p.y)*2.,vec2(block_size/4.,0.)*2.,vec2(-block_size/4.,0.)*2.,bl);\n    col+=line(vec2(p.y,p.x)*2.,vec2(block_size/4.,0.)*2.,vec2(-block_size/4.,0.)*2.,bl);\n    col*=SS(block_size,-block_size,sdBox(p,vec2(block_size/2.)));\n    return vec4(col,d);\n}\n\nvec4 draw_border(vec2 p){\n    float d=0.;\n    vec3 col=line(vec2(abs(p).x,p.y)*2.,vec2(board_size,-board_size)*2.,vec2(board_size,board_size)*2.,bl);\n    col+=line(vec2(p.x,abs(p.y))*2.,vec2(board_size,board_size)*2.,vec2(-board_size,board_size)*2.,bl);\n    return vec4(col,d);\n}\n\nvec4 draw_player(vec2 p, float rt){\n    float d=0.;\n    p*=MD(rt);\n    vec3 col=line(vec2(abs(p).x,p.y)*2.,vec2(block_size/1.5,-block_size/(p.x>0.?2.5:1.5))*2.,vec2(block_size/1.5,block_size/(p.x>0.?2.5:1.5))*2.,gc);\n    col+=line(vec2(p.x,abs(p.y))*2.,vec2(block_size/1.5,block_size/2.5)*2.,vec2(-block_size/1.5,block_size/1.5)*2.,gc);\n    col+=line(vec2(p.x-block_size/8.,p.y)*2.,vec2(block_size,0.)*2.,vec2(-0.,0.)*2.,gc);\n    col*=SS(block_size,-block_size,sdBox(p,vec2(block_size)));\n    return vec4(col,d);\n}\n\nint index(ivec2 p) {\n    p.y=9-p.y;\n    p = p % 10;\n    return p.y * 10 + p.x;\n}\n\nvec4 draw_map(vec2 p){\n    if((abs(p.x)>board_size)||(abs(p.y)>board_size)) return vec4(0.);\n    float d=0.;\n    vec4 col=vec4(0.);\n    vec2 op=p;\n    ivec2 oicc=ivec2((p+board_size)/(block_size*2.));\n    #ifdef NO_LOOP\n    int i=0,j=0;\n    #else\n    for(int i=-1;i<2;i++)\n    for(int j=-1;j<2;j++)\n    #endif\n    {\n    ivec2 icc=oicc+ivec2(i,j);\n    #ifndef NO_LOOP\n    if((icc.x<0)||(icc.x>9))continue;\n    if((icc.y<0)||(icc.y>9))continue;\n    #endif\n    p=op;\n    int idx=index(icc);\n    vec3 tc=vec3(0.);\n    bool iv=false;\n    bool dr=true;\n    switch (game_map(idx)) {\n        case free:dr=false;break;\n        case block:tc=org;break;\n        case block_static:tc=wh;break;\n        case water:tc=bl2;iv=true;break;\n        case base:tc.rgb+=1.;break;\n        }\n    if(dr){\n    vec2 pv=(block_size*2.)*vec2(i,j);\n    if(((idx/10)%2==1?idx+1:idx)%2==1){\n    float tpy=p.x;\n    p.x=p.y;\n    p.y=tpy;\n    tpy=pv.x;\n    pv.x=pv.y;\n    pv.y=tpy;\n    }\n    p=mod(p+board_size,block_size*2.)-block_size;\n    col+=draw_block(p-pv,tc,iv);\n    }\n    }\n    return col;\n}\n\nfloat linearstep(float begin, float end, float t) {\n    return clamp((t - begin) / (end - begin), 0.0, 1.0);\n}\n\nvec4 main_c(vec2 p){\n    vec3 col=vec3(0.);\n    float d=0.;\n    col=draw_border(p).rgb;\n    col+=draw_map(p).rgb;\n    vec2 pp=board_size+block_size-block_size*2.*player_pos().xy;\n    \n    float rtv=PI*player_pos().z;\n    pp+=vec2(block_size*2.-block_size*2.*SS(0.,.5,iTime-player_pos().w),0.)*MD(-rtv);\n    col+=draw_player(p+pp,rtv).rgb;\n    if(bull_pos().z>-5.){\n    vec2 bp=board_size+block_size-block_size*2.*bull_pos().xy;\n    rtv=PI*bull_pos().z;\n    bp+=vec2(block_size*1.-block_size*2.*linearstep(0.,.25,iTime-bull_pos().w),0.)*MD(-rtv);\n    col+=draw_bull(p+bp).rgb;\n    }\n    return vec4(col,d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord.xy) / iResolution.y - res/2.0;\n    \n    vec4 ret_col=main_c(uv);\n    ret_col.rgb=clamp(ret_col.rgb,vec3(0.),vec3(1.));\n    ret_col.a=1.;\n    \n    fragColor = ret_col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// logic\n\n\n// data in the pixels y==0 and x from 0 to 28\n\n// x==0 vec4(r,g,b,a) (r) used to init game -1 when game initialized\n// x==1 to 26 vec4(r,g,b,a) used to store 10x10 map, 25 pixels*4(r,g,b,a) values=100\n// x==27 vec4(r,g,b,a) (r,g) to store player position, (b) direction of player rotation, (a) time of start movement\n// x==28 vec4(r,g,b,a) (r,g) to store bullet position, (b) direction of player rotation when bulled launched, (a) time of bullet launch\n\n// player and bullet position is tile index where they located now\n// and by timer they move to next tile by direction\n// timer used to animate movement in the Image shader\n\n// in the tiles stored ID of the tile(water/block/free/etc), and Image shader draw graphics base on tile ID\n\n\n#define MD(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define PI (4.0 * atan(1.0))\n\nivec4 inputs1 = ivec4(38, 40, 39, 37); //ARROWS up down right left\n\nivec4 inputs2 = ivec4(87, 83, 68, 65);//WSDA\n    \nconst int KEY_SPACE  = 32;\n\n\n#define fr 0\n#define bl 1\n#define bs 2\n#define wa 3\n#define ba 4\n\nconst int [] game_map = int[](\n    bl,fr,fr,fr,bl,fr,fr,fr,fr,fr,\n    bl,fr,fr,fr,fr,fr,fr,bl,fr,bl,\n    bl,bl,bl,bl,bs,bl,fr,bl,bl,bl,\n    fr,fr,fr,bl,bs,bs,bl,fr,fr,fr,\n    fr,bl,fr,bl,bl,bl,fr,bl,bl,bl,\n    bl,bl,fr,bl,fr,bl,bl,wa,wa,wa,\n    fr,fr,bl,bl,bl,bl,fr,bl,wa,bl,\n    fr,fr,fr,fr,fr,fr,bl,bl,fr,fr,\n    bl,bl,fr,bl,bl,bl,fr,fr,bl,bl,\n    bl,fr,fr,bl,ba,bl,fr,fr,fr,fr\n);\n\n// same just make more readable\n#define free 0\n#define block 1\n#define block_static 2\n#define water 3\n#define base 4\n\nint index(ivec2 p) {\n    p.y=9-p.y;\n    p = p % 10;\n    return p.y * 10 + p.x;\n}\n\nconst vec2 player_pos=vec2(3.,2.);\nconst vec2 bullet_pos=vec2(3.,2.);\n\nvec4 loadval(ivec2 ipx){\n    return texelFetch(iChannel0,ipx,0);\n}\n\nvoid init(int ipx, inout vec4 fc){\n    if(loadval(ivec2(0,0)).x<0.){fc=loadval(ivec2(ipx,0));return;}\n    if(ipx==0){fc.x=-1.;return;}\n    if(ipx==27){fc.xy=player_pos;fc.w=-10.;return;}\n    if(ipx==28){fc.xy=bullet_pos;fc.z=-10.;fc.w=-10.;return;}\n    ipx+=-1;\n    fc=vec4(game_map[4*ipx+0],game_map[4*ipx+1],game_map[4*ipx+2],game_map[4*ipx+3]);\n    return;\n}\n\nbool key_press(int key){\n    return texelFetch( iChannel1, ivec2(key,1),0 ).x!=0.;\n}\n\nint get_game_map(int idx){\n    idx+=4;\n    return int(loadval(ivec2(idx/4,0))[idx%4]);\n}\n\nvoid move_player(int ipx, inout vec4 fc){\n    if(ipx!=27)return;\n    if(!(loadval(ivec2(0,0)).x<0.))return;\n    fc=loadval(ivec2(ipx,0));\n    if(iTime-fc.w>.5){\n    vec2 next_p=fc.xy;\n    if(key_press(inputs1.w)||key_press(inputs2.w)){fc.w=iTime;fc.z=1.;next_p.x+=-1.;}\n    if(key_press(inputs1.z)||key_press(inputs2.z)){fc.w=iTime;fc.z=0.;next_p.x+=1.;}\n    if(key_press(inputs1.x)||key_press(inputs2.x)){fc.w=iTime;fc.z=-.5;next_p.y+=1.;}\n    if(key_press(inputs1.y)||key_press(inputs2.y)){fc.w=iTime;fc.z=.5;next_p.y+=-1.;}\n    if((next_p.x<=0.)||(next_p.x>=11.)||(next_p.y<=0.)||(next_p.y>=11.))fc.w=-10.;\n    next_p.x=next_p.x>1.?(next_p.x<10.?next_p.x:10.):1.;\n    next_p.y=next_p.y>1.?(next_p.y<10.?next_p.y:10.):1.;\n    if(get_game_map(index(ivec2(next_p-1.)))==free){\n        fc.xy=next_p;\n    }\n    else fc.w=-10.;\n     \n    }\n    return;\n}\n\nvoid move_bull(int ipx, inout vec4 fc){\n    if(ipx!=28)return;\n    if(!(loadval(ivec2(0,0)).x<0.))return;\n    fc=loadval(ivec2(ipx,0));\n    if(fc.z>-5.0){\n    if(iTime-fc.w>.25){\n    vec2 next_p=fc.xy+vec2(1.,0.)*MD(-fc.z*PI);\n    if((next_p.x>1.)||(next_p.x<10.)||(next_p.y>1.)||(next_p.y<10.)){\n        int idxx=get_game_map(index(ivec2(next_p-1.)));\n        switch(idxx){\n            case(block_static):fc.z=-10.;break;\n            case(block):fc.z=-10.;break;\n            case(base):fc.z=-10.;break;\n        }\n    }\n    if((next_p.x<=0.)||(next_p.x>=11.)||(next_p.y<=0.)||(next_p.y>=11.))fc.z=-10.;\n    else{\n    fc.w=iTime;\n    fc.xy=next_p;\n    }\n    }\n    }else{\n        if((key_press(KEY_SPACE))&&(iTime-loadval(ivec2(27,0)).w>0.5)){\n            fc.w=iTime-0.25;fc.z=loadval(ivec2(27,0)).z;fc.xy=loadval(ivec2(27,0)).xy+vec2(0.,0.)*MD(-fc.z*PI);\n        }\n        return;\n    }\n    return;\n}\n\nvoid update_map(int ipx, inout vec4 fc){\n    if((ipx<1)||(ipx>=27))return;\n    if(!(loadval(ivec2(0,0)).x<0.))return;\n    ivec2 bpos=ivec2(loadval(ivec2(28,0)).xy);\n    int idxa=index(bpos-1);\n    if((idxa/4)+1==ipx){\n        int idxx=get_game_map(idxa);\n        if(idxx==block)fc[idxa%4]=float(free);\n    }\n    return;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord);\n    fragColor=vec4(0.);\n    if(ipx.y==0){\n        if(ipx.x<=28){\n            vec4 tc=vec4(0.);\n            init(ipx.x,fragColor);\n            move_player(ipx.x,fragColor);\n            move_bull(ipx.x,fragColor);\n            update_map(ipx.x,fragColor);\n            return;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}