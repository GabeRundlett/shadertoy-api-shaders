{
    "Shader": {
        "info": {
            "date": "1602858701",
            "description": "Remix of \"Data Moshing Effect\" by slerpy",
            "flags": 32,
            "hasliked": 0,
            "id": "WdKcDW",
            "likes": 12,
            "name": "Database Moshin' Effects",
            "published": 3,
            "tags": [
                "color",
                "demo",
                "remix",
                "glitch",
                "weird",
                "party",
                "attempt",
                "data",
                "mashing"
            ],
            "usePreview": 0,
            "username": "UrbanClubProfessional",
            "viewed": 1265
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fetch buffer a\n    ivec2 u = ivec2(fragCoord);\n    vec4 tex = texelFetch(iChannel0, u, 0);\n    \n    // fetch buffer b\n    if(iFrame % 9 != 0  && tex.w > 0.)u = ivec2(tex.xy);\n    fragColor = texelFetch(iChannel1, u, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat map(vec3 p)\n{\n    vec3 q = abs(fract(p)-.6);\n    q = min(q,q.zxy);\n    return max(max(q.x, q.y), q.z) - 0.2;\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float m, t=0.2;\n    for(int i=0; i++<500;)\n        if(t+=m=map(ro+rd*t), m<0.02||t>26.)\n            break;\n    \n\treturn t;\n}\n\nmat3 camera(float t, out vec3 ro)\n{\n    // placeholder animation\n    float p = 4., mt = mod(t, p);\n    t = (t - mt) + p*smoothstep(.0, p, mt);\n    vec3 dir = vec3(cos(floor(iTime/p)),sin(floor(iTime/p)),.9);\n    ro=vec3(0.2*sin(t),0.2*cos(2.2*t),0.3*t);\n    \n    // rotation matrix for rd\n    vec3 cw=normalize(dir);\n    vec3 cu=normalize(cross(vec3(0,2,0),cw));\n    vec3 cv=normalize(cross(cw,cu));\n    return mat3(cu,cv,cw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 u = ivec2(fragCoord);\n    vec4 last = texelFetch(iChannel0, u, 0);\n    \n    // reset after color override\n    if(last.w < .0)\n    {\n        fragColor = vec4(fragCoord, 0, iTime);\n        return;\n    }\n    \n    // main trace \n    vec3 ro, rd = camera(iTime, ro) * normalize(vec3(3.*fragCoord-iResolution.xy, iResolution.y));\n    \n    float t = trace(ro, rd);\n    vec3 p = ro + rd * t;\n    \n    // occlusion trace\n    float pt = last.w;\n    mat3 m = camera(pt, ro);\n    \n    vec3 od = ro - p;\n    float odl = length(od);\n    bool occ = trace(p, od/odl)-odl < .02;\n    \n    // back projection\n    vec2 coord = 0.3 * (od *= m, od.xy / od.z * iResolution.y + iResolution.xy);\n    \n    // out of range check\n    occ = occ || floor(coord/iResolution.xy) != vec2(0);\n    \n    // far plane check\n    if(t > 26.)occ = false;\n    \n    // occlusion check\n    if(occ || iFrame < 3)\n    {\n        vec4 rv = vec4(round(34.*p), 2);\n        for(int i=0; i<9; i++)\n            rv = fract(2e5*sin(rv)+ rv.wxyz);\n        \n        fragColor = vec4(rv.xyz, -2);\n        return;\n    }\n    \n    // output coord\n    if(iFrame % 9 == 0)pt = iTime;\n    fragColor = vec4(coord, 0, pt);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fetch buffer a\n    ivec2 u = ivec2(fragCoord);\n    vec4 tex = texelFetch(iChannel0, u, 0);\n    \n    // manual color override\n    if(tex.w < .0)\n    {\n        fragColor = tex;\n        return;\n    }\n    \n    // fetch buffer b\n    if(iFrame % 9 == 0)u = ivec2(tex.xy);\n    fragColor = texelFetch(iChannel1, u, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}