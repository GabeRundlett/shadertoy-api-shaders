{
    "Shader": {
        "info": {
            "date": "1571753720",
            "description": "It's electric",
            "flags": 0,
            "hasliked": 0,
            "id": "wd3XR7",
            "likes": 5,
            "name": "Shadertober 19 - Sling",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "sling",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "float wm(vec3 p)\n{\n    float th = .05;\n    float h = cos(iTime*2.-floor(p.x+.5))/2.-.45;\n    p.yz*=rot(abs(floor(p.x+.5)));\n    float c1 = capsule(p,h,th);\n    p.yz*=rot(PI/1.5);\n    c1 = min(c1,capsule(p,h,th));\n    p.yz*=rot(PI/1.5);\n    c1 = min(c1,capsule(p,h,th));\n    return c1;\n\n}\n\nfloat g;\nvec2 map(vec3 p)\n{\n    float m = 0.;\n    float ra = .3;\n    vec3 ap = p-vec3(4,-2.5,0);\n    ap.xy*=rot(-ra);\n    vec3 ap2 = p-vec3(-4,-2.5,0);\n    ap2.xy*=rot(ra);\n    float ch = 3.;\n    vec3 ap2t = ap2-vec3(0,ch,0);\n    vec3 apt = ap-vec3(0,ch,0);\n    ap2t.xy*=rot(-ra);\n    apt.xy*=rot(ra);\n    float t = iTime;\n    float ro = cos(t)*7.;\n    apt.yz*=rot(-cos(t)*2.);\n    ap2t.yz*=rot(cos(t)*2.);\n    vec3 pa = p;\n    pa.y-=.37;\n    pa.yz*=rot(pa.x*-ro*.5);\n    float o = .1;\n    float co = 3.;\n\tfloat cc = capsule(pa+vec3(0,o,o), vec3(co,0,0),vec3(-co,0,0), .05);\n\tcc=smin(cc,capsule(pa+vec3(0,-o,-o), vec3(co,0,0),vec3(-co,0,0), .05),.05);\n\tcc=smin(cc,capsule(pa+vec3(0,o,-o), vec3(co,0,0),vec3(-co,0,0), .05),.05);\n    cc=smin(cc,capsule(pa+vec3(0,-o,o), vec3(co,0,0),vec3(-co,0,0), .05),.05);\n    vec3 sl = mix(apt,ap2t,(1.+cos(t))/2.);\n    vec3 sl2 = mix(ap2t,apt,(1.+cos(t))/2.);\n    float w1 = wm(sl);\n    float w2 = wm(sl2);\n    float sp = sphere(apt,.2);\n\tsp = min(sp,sphere(ap2t,.2));\n    sp=smin(sp,cc,.1);\n    sp=min(sp,w1);\n    sp=min(sp,w2);\n    float ttt = iTime*20.*ro;\n    float b  =box(p-vec3(0,.35+sin(p.x*10.+ttt)*cos((p.x*2.+ttt))/20.-cos(p.x*10.)/50.,0),vec3(3,.01,.01));\n    g+=0.01/(0.0075+b*b);\n    g+=0.0001/(0.001+sp*sp);\n    float r = sp;\n    r=min(r,b);\n    if(r==sp)m=1.;\n    else if(r==b)m=2.;\n    return vec2(r,m);\n}\n\n\nvec2 ray(vec3 ro, vec3 rd)\n{\n    float t=0.,m=0.;\n    for(int i=0;i<128;i++)\n    {\n        vec3 p = ro+rd*t;\n        vec2 s = map(p);\n        m=s.y;\n        if(s.x<0.000001*t)break;\n        t+=s.x;\n        if(t>MAX_DIST){t=-1.;break;}\n    }\n    return vec2(t,m);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.00005,0);\n    return normalize(vec3(\n        map(p+e.xyy).x-map(p-e.xyy).x,\n        map(p+e.yxy).x-map(p-e.yxy).x,\n        map(p+e.yyx).x-map(p-e.yyx).x\n        ));\n}\n\nvec3 color(vec3 ro, vec3 rd, vec2 r)\n{\n    vec3 col = vec3(0);\n    vec3 p = ro+rd*r.x;\n    vec3 n = normal(p);\n    \n    vec3 mate = vec3(.8);\n    if(r.y>.5&&r.y<1.5)mate=vec3(1.5);\n    else if(r.y>1.5)mate=vec3(1.5,1.5,3.5);\n    vec3 sun = normalize(vec3(0));\n    float dif = clamp(dot(sun,n),0.,1.);\n    float sky = clamp(dot(n,vec3(0,1,0)),0.,1.);\n    float bou = clamp(dot(n,vec3(0,-1,0)),0.,1.);\n    col=vec3(0.5,0.4,0.4)*dif*mate;\n    col+=mate*vec3(0.3,0.3,0.4)*sky*.5;\n    col+=mate*vec3(0.3,0.3,0.6)*bou*.4;\n    if(r.y>1.5)col+=mate/5.;\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 c, in vec2 f)\n{\n    vec2 uv = (2.*f-iResolution.xy)/iResolution.y+vec2(0,.1);\n\n    vec3 ro = vec3(0,0,-5);\n    vec3 ta = vec3(0);\n    vec3 rd = cam(ro,ta, uv);\n    \n    vec2 r = ray(ro,rd);\n    \n    vec3 col = vec3(0);\n    \n    \n    if(r.x>0.)col=color(ro,rd,r)+g/50.;\n   \telse col+=vec3(1.5,1.5,3.5)*g/10.;\n    c.rgb=col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_DIST 30.0\n#define PI 3.1415927\n\nmat2 rot(float x)\n{\n    float s = sin(x);\n    float c = cos(x);\n    return mat2(c,-s,s,c);\n}\n\nfloat sphere(vec3 p, float d)\n{\n    return length(p)-d;\n}\n\n//thanks to iq for sharing this knowledge on his website\nfloat capsule(vec3 p, float h, float r)\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa-ba*h)-r;\n}\n\nfloat box(vec3 p, vec3 d)\n{\n  vec3 q = abs(p) - d;\n  return min(max(q.x,max(q.y,q.z)),0.0)+length(max(q,0.0));\n}\n\nfloat smin(float d1, float d2, float k)\n{\n    float h = clamp(0.5+0.5*(d2-d1)/k,0.0,1.0);\n    return mix(d2,d1,h)-k*h*(1.0-h);\n}\n\nvec3 cam(vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    return normalize(uv.x*cu+uv.y*cr+2.*cf);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}