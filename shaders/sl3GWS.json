{
    "Shader": {
        "info": {
            "date": "1636692993",
            "description": "An fbm noise texture. I originally made this using F.lux and had a beautiful red and green pattern but I had to adjust the lighting and I have a red and blue but it's not the same ",
            "flags": 0,
            "hasliked": 0,
            "id": "sl3GWS",
            "likes": 30,
            "name": "Fbm: Onslaught",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "fbm",
                "color",
                "calamity",
                "vibrant"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 536
        },
        "renderpass": [
            {
                "code": "\n#define pi acos(-1.)\n#define eps 1./iResolution.y\n\n\nfloat noise(vec2 st){\n    return fract(sin(dot(vec2(12.23,74.343),st))*4254.);  \n}\n\n\nfloat noise2D(vec2 st){\n  \n  //id,fract\n  vec2 id =floor(st);\n  vec2 f = fract(st);\n  \n  //nachbarn\n  float a = noise(id);\n  float b = noise(id + vec2(1.,0.));\n  float c = noise(id + vec2(0.,1.));\n  float d = noise(id + vec2(1.));\n  \n  \n  //f\n  f = smoothstep(0.,1.,f);\n  \n  //mix\n  float ab = mix(a,b,f.x);\n  float cd = mix(c,d,f.x);\n  return mix(ab,cd,f.y);\n}\n\nmat2 rot45 = mat2(0.707,-0.707,0.707,0.707);\n\nmat2 rot(float a){\n  float s = sin(a); float c = cos(a);\n  return mat2(c,-s,s,c);\n}\nfloat fbm(vec2 st, float N, float rt){\n    st*=3.;\n \n  float s = .5;\n  float ret = 0.;\n  for(float i = 0.; i < N; i++){\n     \n      ret += noise2D(st)*s; st *= 2.9; s/=2.; st *= rot((pi*(i+1.)/N)+rt*8.);\n      //st.x += iTime;\n  }\n  return ret;\n  \n}\n\nfloat voronoi(vec2 uv){\n  \n    float d = 100.;\n    vec2 uvFL = floor(uv);\n    vec2 uvFR = fract(uv);\n  \n    for(float i = -1.; i <= 1.; i++){\n      for(float j = -1.; j <= 1.; j++){\n        \n        vec2 nachbar = vec2(i,j);\n        \n        d = min(d, length( uvFR - noise(uvFL + nachbar)  - nachbar));\n      }\n    }\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n  vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n  \n  uv.x+=iTime*0.4+10.;\n  vec3 col = vec3(0.0);\n  \n  float fa1 = smoothstep(0.2, 0.9,\n              abs( fract(fbm(uv + length(uv)*0.5,5., 2.)*2.)-0.5) );\n  \n  \n  float fb1 = fbm(uv*2. + vec2(3. ,3. ) ,5., 5.);\n  \n  \n\n // float fa2 = fbm(uv*2.*rot(2.) - vec2(8. ) + fa1 ,2., 3.);\n  \n  //float fa2fr = smoothstep(0.2, 0.5,\n  //            abs( fract(fa2*10.)-0.5) );\n  \n  float fb2 = fbm(uv*3.+ fa1/5. ,4., 3.);\n  \n  //float fb2fr = smoothstep(0., 0.9,\n  //            abs( fract(fb2*2.)-0.5) );\n \n // float fa3 = fbm(uv+ fa2 ,5., 1.);\n   //float fb3 = fbm(uv*1.*rot(1.8) + vec2(1. ,47. ) + fb2 , 3., 2.);\n  \n  //softer version\n   float fb3 = fbm(uv*1.*rot(1.7) + vec2(1. ,47. ) + fb2*.5 , 3., 2.);\n   \n   \n   float fb3b = fbm(uv*2. + fb1*2. + vec2(sin(uv.x/4.),0.), 2., 2.);\n    float fb3c = fbm(uv + fb1*2. + vec2(3.), 4., 2.);\n\n    col = mix(col, vec3(0.,1.,1.),pow(fb3*1.1, 5.));\n    \n    col = mix(col, vec3(atan(vec2(uv.x,uv.y+0.4))*.8, 0.), pow(fb3,1.6));\n    //col = mix(col, vec3(0.,sin(uv.y),0.9), pow(fb2, 15.));\n    col = mix(col, vec3(0.,0.,0.),fa1*.9);    \n    col *= 1.5;\n    \n    //col = mix(col, vec3(.4,0.9,0.9),pow(fb2,9.));\n    //col = pow(col*vec3(0.9,0.99,0.9), vec3(1.));\n\n   \n   /*\n    col = mix(col, vec3(0.9,sin(vec2(uv.yy))), pow(fb3, 3.))*2.3;\n    \n    col = mix(col, vec3(0.8,sin(uv.y),.0), pow(fb2, 8.)*4.)*1.2;\n    \n    col = mix(col, vec3(0.,0.,0.),fa1*0.99);\n    //col = mix(col, vec3(1.),fa2*0.1);\n    \n    //col = mix(col, vec3(0.),voronoi(uv*2.));\n    //\n    col = mix(col, vec3(.9,0.9,0.9),pow(fb2,4.))*1.3;\n   \n   */\n   \n   \n    col = sin(vec3(1.,2.,9.)/80. + col + 6.1);\n    //col = mix(vec3(1.,0.,0.), vec3(1.), clamp(col*3.,0.,1.));\n    col = mix(col, vec3(.0,0.0,0.2),voronoi(uv*3.))*1.;\n    float dasBit = pow(dot(normalize(vec3(1.)),normalize(vec3(uv,1.))),9.);\n    col = mix(col, vec3(.9,0.9,0.9),pow(fb2,5.))*1.3 +dasBit;  \n    \n    //col = mix(col, vec3(.9, .0 ,1.), );\n    \n    col = mix(col, vec3(4.3), pow(fb3b, 4.) );\n    col = mix(col, vec3(2.,6.,9.)*.1, pow(fb3c, 4.) );\n    //col = mix(col, vec3(0.9,0.4,0.)*1., pow(fb3, 7.) );\n    \n    //when I use Flux it's this: \n    //fragColor = vec4(col*vec3(0.9,0.8,.4),1.0); //lol\n    //but that is actually only there because I forgot flux the first time lol\n    col *= 1.4;\n    //col =pow(col,vec3(1.,0.9, 1.));\n    fragColor = vec4(col*vec3(0.8,0.65,.2),1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}