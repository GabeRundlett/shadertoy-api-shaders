{
    "Shader": {
        "info": {
            "date": "1494259818",
            "description": "audio react test",
            "flags": 64,
            "hasliked": 0,
            "id": "4sBcWt",
            "likes": 17,
            "name": "grid 0.3",
            "published": 3,
            "tags": [
                "grid"
            ],
            "usePreview": 0,
            "username": "NNenov",
            "viewed": 911
        },
        "renderpass": [
            {
                "code": "#define mid (iResolution.xy / 2.0)\n\n#define scale = 1.8;\n\nconst float escape= 4.;\nconst float bAmt = 0.15; // moblur amount\nconst float speed = 1.5;\n\nconst int fSamples = 5; //quality level (fibonacci sequence index)\nconst int iters = 64;\n\nivec2 fib(const in int f)\n{\n  int n0 = 1;\n  int n1 = 1;\n  int fi = 0;\n    \n  for (int i = 0; i < f; i++) \n  {\n    fi = n0 + n1;\n    n0 = n1;\n    n1 = fi;\n  }\n    \n  return ivec2(n0, n1);\n}\n\nfloat rand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rotate(vec2 v, float t)\n{\n    float tx = cos(t)*v.x-sin(t)*v.y;\n    float ty = sin(t)*v.x+cos(t)*v.y;\n    return vec2(tx,ty);\n}\n\nfloat avgFrq(float from, float to)\n{\n    float st = (to - from) / 3.0;\n    float s = texture(iChannel0, vec2(from, 0.25)).x +\n                  texture(iChannel0, vec2(from + st, 0.25)).x +\n                  texture(iChannel0, vec2(from + st * 2.0, 0.25)).x +\n                  texture(iChannel0, vec2(from + st * 3.0, 0.25)).x;\n    return s * 0.25;\n}\n\nvec2 julia(vec2 a, float t)\n{\n    float mess = ( (cos(t) ) * 0.06);\n    float sqrz_x = a.x * a.x - a.y * a.y + 0.40 + ( (sin(t) ) * 0.01);\n    float sqrz_y = 2.0 * a.x * a.y + 0.40 + mess;\n    \n   \n \tvec2 md =  vec2(sqrz_x,sqrz_y);\n    \n    return (md);\n}\n\nfloat pxFunc(vec2 st, float t)\n{\n\n\tst = rotate(st, -t*0.1);\n    \n    vec2 z = st;\n\n\tint k = 32;\n\n  \tfor(int j = 0; j < iters; j++)\n    {\n        z = julia(z, t);\n        \n        if(z.x * z.x + z.y * z.y > escape) \n        {\n           k = j;\n           break;\n        }\n     }\n  \t\n    return (float(k)/float(iters)); \n}\n\n\nfloat grid(vec2 ipos, vec2 igS, vec2 m, float t){\n    vec2 gS = vec2(2.+sin(t*0.1),2.+ cos(t*0.1))*igS;\n    vec2 uv = ipos/iResolution.xy;\n    vec2 pos = (ipos-mid) / iResolution.xy;\n    \n    pos = rotate(pos+sin(t*0.1)*0.5, t*0.01);\n    \n    float wave = texture( iChannel0, vec2(uv.x,0.75) ).x;\n    float waveY = texture( iChannel0, vec2(uv.y,0.75) ).x;\n    \n    float bass = avgFrq(0.0,0.008);\n    float hi = avgFrq(0.7,1.);\n    \n    bool bsTrig = ( bass > 0.94);\n    bool trTrig = ( hi > 0.4);\n    \n    float jul = pxFunc(pos, t);\n    \n    float wYClmp = clamp(wave, 0., float(bsTrig));\n    \n    pos = rotate(pos, jul);\n    pos = rotate(pos, -jul*wYClmp);\n    \n    vec2 M = mod(pos,gS); \n\n    float color = 0.1;\n    float gridColor = 0.8;\n    \n\tfloat modX= mod(pos.x , gS.x);\n\tfloat modY= mod(pos.y , gS.y);\t\n\n    vec2 B = gS/50.;\n\n    vec2 space = vec2(6.);\n\n    if (bsTrig) {\n\t\tspace.x -= ((5.*abs(sin(t))*bass)/gS.x) * gS.x;\n    }\n    if (trTrig){\n\t\tspace.y -= ((12.*hi)/gS.y) * gS.y;\n    }\n\n\tspace *= 2.;\n\n    vec2 gM = vec2(ceil((M.x)/gS.x) * gS.x, ceil((M.y)/gS.y) * gS.y );\n\n    vec2 pmod = vec2(mod(pos.x, gS.x*space.x), mod(pos.y, gS.y*space.y));\n\n    if( gM.x > pmod.x && gM.x < pmod.x + gS.x && gM.y > pmod.y && gM.y < pmod.y + gS.y){\n\n    \tcolor = 1.;\n\n    } \n\n    float wXClmp = clamp(waveY/40., 0., float(trTrig));\n    \n    \n\tif( modX < B.x + wXClmp || modY < B.y ){\n        \n\t\tcolor = gridColor;\n        \n\t}\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n        \n    ivec2 fi = fib(fSamples - 2);\n    int ifN = fi.x;\n    \n    float ffN = float(fi.x);\n    float ffk = float(fi.y);\n    \n    vec3 sum = vec3(0.);\n    \n    vec2 gridSize = vec2(25.);\n    \n    vec2 rmGrid = gridSize / iResolution.xy ;\n    \n\tvec2 rmRes =  (fragCoord.xy);\n    \n    vec2 m = (iMouse.xy - mid) ;\n\n    float r = rand(gl_FragCoord.xy/ iResolution.xy);\n\n    for (int i = 0; i < ifN; i++) \n    {\n        vec2 samp = vec2(\n            float(i) / ffN,\n            fract(ffk * (float(i) / ffN))\n        );\n        \n\t\tfloat timeMap = iTime + (float(i) + r) / ffN * bAmt;\n\n        sum += vec3(grid(rmRes+samp, rmGrid, m.xy,timeMap*speed));\n        \n    }\n\n    vec3 colNorm = sum / ffN;\n\n\tfragColor = vec4(colNorm,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 8465,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/abstraktreflections/ralp-humanoid"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}