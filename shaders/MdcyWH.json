{
    "Shader": {
        "info": {
            "date": "1518636853",
            "description": "A simple deformed sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "MdcyWH",
            "likes": 0,
            "name": "Heart with normals",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefieldfunction"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 545
        },
        "renderpass": [
            {
                "code": "// Hash \n#define STEPS 64\n#define EPS 0.01\n#define FAR 10.0\n\n// Distance field function\nfloat map( vec3 p, vec2 uv )\n{\n\n    // first texture row is frequency data\n\tfloat fft  = texture( iChannel0, vec2( uv.x, 0.23 ) ).x; \n\t    \n    // second texture row is the sound wave\n\tfloat wave = texture( iChannel0, vec2( p.y, 0.75 ) ).x;\n    //float r = 1.0 + 0.15 * cos( 10.0 * p.x ) + cos( 3.0 * p.y + iTime );\n    wave *= 0.2;\n    \n    float r = 1.0;\n    p.z = p.z * ( 1.0 - ( p.y / 15.0 ) );\n    p.y -=  wave + abs( p.x ) * sqrt( 0.2 - p.x / 15.0 );\n    vec2 t = vec2( 0.3, 0.3 ) ;\n    \n    \n    //p.x -= ( wave * 0.2 ) + ( sqrt( abs( ( p.x ) / 2.0 ) ) );\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    \n    return length( p ) - r;\n    \n}\n\n// Numerical gradient\nvec3 grad( vec3 p, vec2 uv )\n{\n\n    vec2 q = vec2( 0.0, EPS );\n    \n    return vec3( map( p + q.xyy, uv ) - map( p - q.xyy, uv ),\n                 map( p + q.xyx, uv ) - map( p - q.xyx, uv ),\n                 map( p + q.yyx, uv ) - map( p - q.yyx, uv )\n    \t\t\t);\n    \n}\n\nvec3 shade( vec3 ro, vec3 rd, float t, vec2 uv )\n{\n    \n    vec3 n = normalize( grad ( ro + rd * t , uv) );\n    return vec3( 0.2, 0.0, 0.0 ) * pow( 1.0 - dot( -rd, n ), 3.0 );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (-iResolution.xy + 2.0 * fragCoord) / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 m = vec2(0.5);\n    if( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    // Ray origin and direction\n    vec3 ro = vec3( 0.0, 0.0, 2.0 );\n    \n    vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    // Loop for the raymarching\n    float t = 0.0; \n    \n    float d = EPS;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = map( ro + rd * t, uv );\n        \n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n        \n    }\n    \n    // Shading\n    vec3 col = d < EPS ? shade( ro, rd, t, uv ) : mix( vec3( 0.2, 0.3, 1.0 ), vec3( 0.2, 0.5, 0.2 ), length( uv ) );\n\n    // Post-processing\n    col = pow( col, vec3( 0.45 ) );\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}