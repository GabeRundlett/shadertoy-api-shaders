{
    "Shader": {
        "info": {
            "date": "1702070918",
            "description": "Part of shadecember project, this time featuring fbm and Perlin noise.",
            "flags": 64,
            "hasliked": 0,
            "id": "ctKBDW",
            "likes": 3,
            "name": "Chase the light",
            "published": 3,
            "tags": [
                "noiseeffectsmoke"
            ],
            "usePreview": 0,
            "username": "workingclasshacker",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535897932384626433832795\nmat2 rotate2d(float _angle) {\n  return mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\nfloat noise(vec2 st) {\n  return fract(sin(dot(st.xy, vec2(12.9898f, 78.233f))) * 43758.5453123f);\n}\n\nfloat perlinNoise(vec2 uv) {\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n  vec2 u = f * f * (3.0f - 2.0f * f);\n  return mix(mix(noise(i + vec2(0.0f, 0.0f)), noise(i + vec2(1.0f, 0.0f)), u.x), mix(noise(i + vec2(0.0f, 1.0f)), noise(i + vec2(1.0f, 1.0f)), u.x), u.y);\n}\n\nvec2 perlinNoise22(vec2 uv){\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n  vec2 u = f * f * (3.0f - 2.0f * f);\n  return mix(mix(i + vec2(0.0f, 0.0f), i + vec2(1.0f, 0.0f), u.x), mix(i + vec2(0.0f, 1.0f), i + vec2(1.0f, 1.0f), u.x), u.y);\n}\n\n\n\nfloat ffbm(vec2 uv, float scale, float offset) {\n  float n = 0.0f;\n  float amp = 1.0f;\n  for(int i = 0; i < 4; i++) {\n    n += perlinNoise(uv * scale) * amp;\n    uv *= 2.0f;\n    amp *= 0.5f;\n  }\n  return n + offset;\n}\n\nfloat circleGradient(vec2 uv, float blur) {\n  float dist = length(uv);\n  return smoothstep(0.5f + blur, 0.5f - blur, dist);\n}\n\n// Function to apply a blur to a color\nvec3 applyBlur(vec3 color, float blurAmount, vec2 uv) {\n  vec3 accumulatedColor = vec3(0.0f);\n  float totalWeight = 0.0f;\n  for(int x = -1; x <= 1; x++) {\n    for(int y = -1; y <= 1; y++) {\n      vec2 sampleUv = uv + vec2(x, y) * blurAmount;\n      accumulatedColor += texture(iChannel0, sampleUv).rgb;\n      totalWeight += 1.0f;\n    }\n  }\n  return accumulatedColor / totalWeight;\n}\n\nfloat gaussian(float x, float sigma) {\n  return exp(-(x * x) / (2.0f * sigma * sigma));\n}\n\nvec2 lissajous(float t, float a, float b, float delta) {\n  return vec2(sin(a * t + delta), sin(b * t));\n}\n\nvec3 applyGlow(vec3 color, float distance, float glowStrength, float glowRadius) {\n  float glow = gaussian(distance, glowRadius) * glowStrength;\n  return color + glow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float scale = (sin(iTime)*.5+.5)+2.;\n  vec2 uv = scale * (2.0f * gl_FragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n  float t = mod(iTime * 0.1f, PI*2.0);\n  float bass = texture(iChannel0, vec2(0.00f, 0.0f)).r;\n  float b = pow(bass, 3.0f);\n  uv += lissajous(t, 1.0f, 2.0f, PI/2.0) ;\n  uv *= rotate2d(mod(t*2., PI*2.0));\n  vec2 ouv = uv;\n\n  float ilength = 1.0f / length(uv);\n  uv = uv * ilength - vec2(ilength+t, 0.5f);\n  vec3 finalColor = vec3(0.0f);\n  float noise = 0.0f;\n  for(int i = 0; i < 5; i++) {\n    float scale = 5.5f + float(i) * 0.5f;\n    float offset = float(i) * 0.5f;\n    uv *= rotate2d(mod(t*offset*.2, PI*2.0));\n    noise = ffbm(uv-t*0.7*float(i)-vec2(float(i*i), float(i)/2.0), scale, offset*2.) * ilength * 0.2f;\n    finalColor += vec3(noise/5.0);\n\n  }\n\n  finalColor.rg *= b;\n  finalColor.b += 0.4/(ffbm(uv*sin(mod(t, 3.0)*3.0)*0.5, 5.0f, 0.0f) * 0.5f + 0.5f);\n  finalColor.r += 0.2/(ffbm(uv*cos(mod(t, 4.0)*3.0)*0.5, 5.0f, 0.0f) * 0.5f + 0.5f);\n  finalColor = applyGlow(finalColor, length(ouv-uv), .3f, 3.1f);\n\n  float grad = circleGradient(uv, 0.5f);\n  finalColor -= (0.0001/length(uv)*0.5f + 0.5f)*sin(b*4.5f)*0.1f * grad;\n  finalColor -= (length(ouv))*.1;\n  // finalColor.g -= (ffbm(uv-t*2., b*5.0, t))*0.2;\n  fragColor = vec4(finalColor, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35477,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/espen-sande-larsen-365984601/to-the-light"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}