{
    "Shader": {
        "info": {
            "date": "1724348884",
            "description": "source https://glslsandbox.com/e#59831.0",
            "flags": 0,
            "hasliked": 0,
            "id": "XfffW2",
            "likes": 2,
            "name": "mandelbrot fractal color",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 64
        },
        "renderpass": [
            {
                "code": "#define resolution iResolution.xy\n#define time iTime\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float scale = resolution.y / 50.0;\n\tfloat ring = 10.0;\n\tfloat radius = resolution.x*1.0;\n\tfloat gap = scale*.5;\n\tvec2 pos = gl_FragCoord.xy - resolution.xy*.5;\n\t\n\tfloat d = length(pos);\n\tvec2 p = -.5 + gl_FragCoord.xy / resolution.xy;\n\tp.x *= resolution.x/resolution.y;\n\t\n\tfloat color = 3.0 - (3.*length(2.*p));\n\t\n\tvec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);\n\t\n\tfor(int i = 1; i <= 1; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor += (1.5 / power) * snoise(coord + vec3(0.,-time*.05, time*.01), power*16.);\n\t}\n\t// Create the wiggle\n\td += (sin(pos.y*0.25/scale+time)*sin(pos.x*0.25/scale+time*.5))*scale*5.0;\n\t\n\t\n\tfloat v = mod(d + radius/(ring*2.0), radius/ring);\n\tv = abs(v - radius/(ring*2.0));\n\t\n\tvec2 z = 1.3*(-resolution.xy+2.0*gl_FragCoord.xy)/resolution.y;\n\t\n\tvec2 an = 0.25*cos( vec2(0.0,1.313) + 0.2*(time+100.0) ) - 0.25*sin( vec2(0.0,1.313) + 0.4*(time+100.0) );\n\n\tfloat f = 1e20;\n\tfor( int i=0; i<100; i++ ) \n\t{\n\t\tz = vec2( z.x*z.x-z.y*z.y, 2.0*z.x*z.y ) + an;\n\t\tf = min( f, dot(z,z) );\n\t}\n\t\n\tf += 1.2+log(f)/3.0;\n\n\tv = clamp(v-gap, 0.0, 1.0);\n\t\n\td /= radius;\n\tvec3 m = fract((d-1.0)*vec3(ring*-.25, -ring, ring*.5)*0.5*f);\n\t\n\tfragColor = vec4(m*color, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}