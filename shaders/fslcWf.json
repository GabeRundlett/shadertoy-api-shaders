{
    "Shader": {
        "info": {
            "date": "1642810731",
            "description": "A totally accurate simulation of the climate of an island.",
            "flags": 0,
            "hasliked": 0,
            "id": "fslcWf",
            "likes": 2,
            "name": "Climate Simulation",
            "published": 3,
            "tags": [
                "simulation",
                "world",
                "weather",
                "climate"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "vec2 random2(vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)),\n\t\tdot(st, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(st) * 43758.5453123 * 0.7897);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n\tvec2 i = floor(st);\n\tvec2 f = fract(st);\n\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\n\treturn mix(mix(dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),\n\t\tdot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n\t\tmix(dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),\n\t\t\tdot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < 10; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.xy;\n    \n    // Change these coordinates to generate a new island\n    vec2 world = vec2(853.0, 285.0);\n\n    vec3 col = vec3(0.0);\n    float n = fbm(uv*2.0+world)+0.5;\n    float islandN = fbm(uv+world+100.0);\n    float radius = length(uv);\n    float distFromEquator = distance(uv.y, sin(iTime / 6.0) / 6.0);\n    float hemisphere = 1.0;\n    if (uv.y < 0.0) {\n        hemisphere = -1.0;\n    }\n    \n    vec2 tempUv = vec2(uv.x - iTime / 24.0 * hemisphere, uv.y);\n    float temperature = noise(tempUv * 2.0) * 0.5 + 0.5 * 0.25 / distFromEquator;\n    \n    if (n < 0.25 || radius + islandN > 0.5) {\n        vec2 waterUv = vec2(uv.x - iTime / 20.0 * hemisphere, uv.y);\n        vec2 waterUv2 = vec2(uv.x + 100.0 - iTime / 10.0 * hemisphere, uv.y + 100.0);\n        \n        float waterNoise = (noise(waterUv * 50.0) * 0.25 + 0.75) + noise(waterUv2 * 50.0) * 0.25 + 0.75;\n        col = mix(vec3(0.0, 0.0, 1.0), vec3(1.0), 0.05 / max(temperature, 0.1)) * waterNoise;\n    }\n    else {\n        if (n > 0.5) {\n            col = mix(vec3(0.75, 0.75, 0.75), vec3(1.0), 0.5 / max(temperature/2.0, 0.1)) * n + 0.25;\n        }\n        else {\n            col = mix(vec3(1.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0) * n + 0.25, n*2.0 - temperature);\n            col = mix(col, vec3(0.5, 0.0, 0.0), 0.5 - temperature);\n            col = mix(col, vec3(1.0), 0.2 / max(temperature, 0.1));\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n    //fragColor = vec4(temperature);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}