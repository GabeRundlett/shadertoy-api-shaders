{
    "Shader": {
        "info": {
            "date": "1623890994",
            "description": "Distance to an capsule in the [url=https://en.wikipedia.org/wiki/Lp_space]L-infinity metric space[/url]. [b]This code is VERY innefficient[/url]. Feel free to simplifying this.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftS3DD",
            "likes": 8,
            "name": "Capsule - distance L-inf 2",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "capsule",
                "oriented",
                "linf"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 740
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a capsule in the L-infinity metric space. Compare\n// to euclidean: https://www.shadertoy.com/view/3tdSDj\n//\n// List of some other 2D distances in L-infinity:\n//\n// https://www.shadertoy.com/playlist/XXccDH\n\n// -------------------------------\n// THIS CODE IS VERY INNEFICIENT, RIGHT NOW IT'S DOING A BRUTE\n// FORCE COMPUTATION. SOME OTHER DAY I'll GIVE IT A TRY\n// -------------------------------\n\n\nfloat sdCapsule( in vec2 p, vec2 va, vec2 vb, float rb )\n{\n    // recenter primitive\n    p -= (vb+va)*0.5;\n    const float k = sqrt(0.5);\n    float l = length(vb-va);\n    vec2 u = (vb-va)/l;\n    vec2 v = vec2(-u.y,u.x);\n    l *= 0.5;\n    vec2 a = u*l;\n    vec2 w = v*rb;\n\n    // distance to body sides\n    float ss = (u.x*u.y>0.0)?1.0:-1.0;\n    float de = 1.0/(a.y+ss*a.x);\n    vec2 w1 = p-a-w;\n    vec2 w2 = p-a+w;\n    vec2 q1 = abs(w1+a*clamp(-(w1.y+ss*w1.x)*de, 0.0, 2.0));\n    vec2 q2 = abs(w2+a*clamp(-(w2.y+ss*w2.x)*de, 0.0, 2.0));\n    float d1 = max(q1.x,q1.y);\n    float d2 = max(q2.x,q2.y);\n    float d = min(d1,d2);\n\n    // inside circular caps\n    vec2 pa = p - a;\n    vec2 pb = p + a;\n    float da = dot(pa,pa);\n    float db = dot(pb,pb);\n    if( min(da,db)<rb*rb )\n    {\n        float s = 1.0; if( db<da ) {pa=pb;s=-1.0;}\n        float b1 = 0.5*(pa.x+pa.y);\n        float b2 = 0.5*(pa.x-pa.y);\n        float c = dot(pa,pa) - rb*rb;\n        vec2  t1 = vec2(-b1,b1)+sqrt(b1*b1-c*0.5);\n        vec2  t2 = vec2(-b2,b2)+sqrt(b2*b2-c*0.5);\n        // 4 solution. Up to 3 can be valid\n        if( s*dot(pa+vec2( 1, 1)*t1.x,-u)<0.0 ) d=min(d,t1.x);\n        if( s*dot(pa+vec2(-1,-1)*t1.y,-u)<0.0 ) d=min(d,t1.y);\n        if( s*dot(pa+vec2( 1,-1)*t2.x,-u)<0.0 ) d=min(d,t2.x);\n        if( s*dot(pa+vec2(-1, 1)*t2.y,-u)<0.0 ) d=min(d,t2.y);\n        d = -d;\n    }\n    // outside circular caps\n    else \n    {\n        vec2  qa = abs(mat2(u.x,-u.y,u.y,u.x)*p) - vec2(l,rb);\n        float di = max(qa.x, qa.y);\n        // outside circular caps AND outside of body\n        if( di>0.0 )\n        {\n            float dc;\n            \n            // first cap\n            pa = abs(pa);\n            if( abs(pa.y-pa.x)<rb )\n            {\n                float b = 0.5*(pa.x+pa.y);\n                float c = dot(pa,pa) - rb*rb;\n                dc = b - sqrt(b*b-c*0.5);\n            }\n            else\n            {\n                dc = max(pa.x,pa.y)-rb;\n            }\n            d = min(d,dc);\n\n            // sadly, we still need to test the second cap\n            pb = abs(pb);\n            if( abs(pb.y-pb.x)<rb )\n            {\n                float b = 0.5*(pb.x+pb.y);\n                float c = dot(pb,pb) - rb*rb;\n                dc = b - sqrt(b*b-c*0.5);\n            }\n            else\n            {\n                dc = max(pb.x,pb.y)-rb;\n            }            \n            d = min(d,dc);\n        }\n        d *= sign(di);\n    }\n    \n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy) / iResolution.y;\n    vec2 m = (2.0*iMouse.xy - iResolution.xy) / iResolution.y;\n    p *= 1.9;\n    m *= 1.9;\n\n    if( iMouse.x<0.01 ) m=sin(-0.17*iTime*vec2(1.1,1.3)+vec2(0,2));\n\n    vec2  v1 = cos( iTime*0.5 + vec2(0.0,1.00) + 0.0 );\n\tvec2  v2 = cos( iTime*0.5 + vec2(0.0,3.00) + 1.5 );\n    float ra = 0.3*(0.5+0.5*cos(iTime*1.1+1.0));\n    \n    float d = sdCapsule(p, v1, v2, ra);\n\n    vec3 col = vec3(1.0,0.9,1.0) + sign(d)*vec3(-0.3,0.4,0.3);\n\tcol *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(80.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    d = sdCapsule(m, v1, v2, ra);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.004, 0.008, abs(max(abs(p.x-m.x), abs(p.y-m.y)) - abs(d))));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.004, 0.008, length(p-m)-0.015));\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}