{
    "Shader": {
        "info": {
            "date": "1715772535",
            "description": "The squares go boop.",
            "flags": 0,
            "hasliked": 0,
            "id": "lfGXDK",
            "likes": 2,
            "name": "Fade in Bar Thing",
            "published": 3,
            "tags": [
                "bars"
            ],
            "usePreview": 0,
            "username": "MechaGecTech",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926535897932384626433832795;\n\nvec3 rgb(float red, float green, float blue)\n{\n    return vec3((red / 255.0), (green / 255.0), (blue / 255.0));\n}\n\nvec3 decolorize(vec3 colors, bool red, bool green, bool blue) {\n    if(red == true)\n    {\n        if(colors.r > 0.0)\n            colors.r = 1.0;\n    }\n    if(green == true)\n    {\n        if(colors.g > 0.0)\n            colors.g = 1.0;\n    }\n    if(blue == true)\n    {\n        if(colors.b > 0.0)\n            colors.b = 1.0;\n    }\n\n    if(red == false)\n    {\n        if(green == false)\n        {\n            colors.r = colors.b;\n        }\n        else\n        {\n            colors.r = colors.g;\n        }\n    }\n\n    if(green == false)\n    {\n        if(red == false)\n        {\n            colors.g = colors.b;\n        }\n        else\n        {\n            colors.g = colors.r;\n        }\n    }\n\n    if(blue == false)\n    {\n        if(green == false)\n        {\n            colors.b = colors.r;\n        }\n        else\n        {\n            colors.b = colors.g;\n        }\n    }\n\n    return colors;\n}\n\nfloat loop(float realiTime, float interval) {\n    float loopiTime = 0.0;\n    if(realiTime <= interval)\n        loopiTime = realiTime;\n    else if(realiTime >= interval)\n    {\n        loopiTime = (100.0 * fract(realiTime / 100.0) - interval * floor(100.0 * fract(realiTime / 100.0) / interval));\n    }\n\n    return loopiTime;\n}\n\n\nfloat circleshape(vec2 position, float radius){\n    return 1.0 - step(radius, length(position - vec2(0.5)));\n}\n\nfloat rectShape(vec2 position, vec2 scaler){\n    scaler = vec2(0.5) - scaler * 0.5;\n    vec2 shaper = vec2(step(scaler.x, position.x), step(scaler.y, position.y));\n    shaper *= vec2(step(scaler.x, 1.0 - position.x), step(scaler.y, 1.0 - position.y));\n    return shaper.x * shaper.y;\n}\n\nvec2 rotatorUV(vec2 uv, float rotation)\n{\n    float mid = 0.5;\n    return vec2(\n        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\nfloat halfSlice(vec2 uv, float angle) {\n    float circle = 1.0 - length(uv - 0.5);\n    circle = step(0.5, circle);\n    circle -= step(uv.x, 0.5);\n    circle -= step(rotatorUV(uv, PI - angle).x, 0.5);\n    circle = clamp(circle, 0.0, 1.0);\n\n    return circle;\n}\n\nfloat slice(vec2 uv, float angle)\n{\n    if (angle <= PI) return halfSlice(uv, angle);\n    float remainingAngle = angle - PI;\n    vec2 ruv = rotatorUV(uv, PI);\n    return halfSlice(ruv, remainingAngle) + halfSlice(uv, PI);\n}\n\nmat2 rotator(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nmat2 scaler(vec2 scaler) {\n    return mat2(scaler.x, 0.0, 0.0, scaler.y);\n}\n\n\nvec2 translate(vec2 coordinates, bool rotation, float angle, bool scale, float magnification)\n{\n    if(rotation == true)\n    {\n        coordinates -= vec2(0.5);\n        coordinates = vec2(rotator(angle * PI) * coordinates);\n        coordinates += vec2(0.5);\n    }\n\n    if(scale == true)\n    {\n      coordinates -= vec2(0.5);\n        coordinates = vec2(scaler(vec2(magnification) + 2.0) * coordinates);\n        coordinates += vec2(0.5);\n    }\n\n    return coordinates;\n}\n\n\nvec3 flexRectangle(vec3 color, vec2 coordinates, vec2 position, vec2 size, float rotation, float magnification, vec3 backgroundColor, float flex, vec3 flexColor) {\n     vec2 q = coordinates - position;\n\n     q = translate(q, true, rotation, true, magnification);\n\n     vec3 qcolor = color;\n\n     float rectangleBackground = rectShape(q, vec2(size.x, size.y));\n\n     float rectangle = rectShape(q, vec2(flex, size.y));\n     qcolor *= vec3((1.0 - rectangle));\n     qcolor += vec3(rectangle * flexColor);\n     qcolor *= vec3(rectangleBackground);\n\n     vec2 qb = q - vec2(-(size.x * 0.255), -0.0);\n     float rectangleCover = rectShape(qb, vec2(size.x / 2.0, size.y));\n     qcolor *= vec3(1.0 - rectangleCover);\n     qcolor += vec3(rectangleCover * backgroundColor);\n\n    color *= vec3(1.0 - rectangleBackground);\n    color = mix(color, qcolor, rectangleBackground * 1.0);\n    return color;\n}\n\nfloat iTimedFlexExp(float size, float speed, float interval, float rate, float reps) {\n    float stretch = 0.0;\n    float aiTime = loop(iTime, interval);\n    bool fill = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n    if(abiTime >= (subInterval / 2.0))\n    {\n        fill = false;\n    }\n    else\n    {\n        fill = true;\n    }\n\n    if(fill == true)\n    {\n        stretch = speed * exp(abqiTime);\n    }\n    else\n    {\n        stretch = size - speed * exp(abqiTime - ((subInterval / 2.0) * rate));\n    }\n\n    return stretch;\n}\n\nbool iTimeMark(float interval, float rate, float reps) {\n    float aiTime = loop(iTime, interval);\n    bool activated = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n    if(abqiTime >= (subInterval / 2.0))\n    {\n        activated = false;\n    }\n    else\n    {\n        activated = true;\n    }\n\n    return activated;\n}\n\nfloat iTimedFlexSin(float size, float speed, float interval, float rate, float reps, bool stacked, bool absolute, bool root, bool exponent, bool power, float amount) {\n    float stretch = 0.0;\n    float aiTime = 0.0;\n    if(stacked == true)\n        aiTime = loop(iTime, interval);\n    else\n        aiTime = iTime;\n    bool fill = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sin(abqiTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(sin(abqiTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sin(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sin(abqiTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(sin(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(sin(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(sin(abqiTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(sin(abqiTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(sin(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(sin(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(sin(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(sin(abqiTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(sin(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(sin(abqiTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(sin(abqiTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(sin(abqiTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\n\nfloat iTimedFlexCos(float size, float speed, float interval, float rate, float reps, bool stacked, bool absolute, bool root, bool exponent, bool power, float amount) {\n    float stretch = 0.0;\n    float aiTime = 0.0;\n    if(stacked == true)\n        aiTime = loop(iTime, interval);\n    else\n        aiTime = iTime;\n    bool fill = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * cos(abqiTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(cos(abqiTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(cos(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(cos(abqiTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(cos(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(cos(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(cos(abqiTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(cos(abqiTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(cos(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(cos(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(cos(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(cos(abqiTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(cos(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(cos(abqiTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(cos(abqiTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(cos(abqiTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\n\nfloat iTimedFlexTan(float size, float speed, float interval, float rate, float reps, bool stacked, bool absolute, bool root, bool exponent, bool power, float amount) {\n    float stretch = 0.0;\n    float aiTime = 0.0;\n    if(stacked == true)\n        aiTime = loop(iTime, interval);\n    else\n        aiTime = iTime;\n    bool fill = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * tan(abqiTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(tan(abqiTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(tan(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(tan(abqiTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(tan(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(tan(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(tan(abqiTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(tan(abqiTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(tan(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(tan(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(tan(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(tan(abqiTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(tan(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(tan(abqiTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(tan(abqiTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(tan(abqiTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\n\nfloat iTimedFlexASin(float size, float speed, float interval, float rate, float reps, bool stacked, bool absolute, bool root, bool exponent, bool power, float amount) {\n    float stretch = 0.0;\n    float aiTime = 0.0;\n    if(stacked == true)\n        aiTime = loop(iTime, interval);\n    else\n        aiTime = iTime;\n    bool fill = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * asin(abqiTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(asin(abqiTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(asin(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(asin(abqiTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(asin(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(asin(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(asin(abqiTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(asin(abqiTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(asin(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(asin(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(asin(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(asin(abqiTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(asin(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(asin(abqiTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(asin(abqiTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(asin(abqiTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\n\nfloat iTimedFlexACos(float size, float speed, float interval, float rate, float reps, bool stacked, bool absolute, bool root, bool exponent, bool power, float amount) {\n    float stretch = 0.0;\n    float aiTime = 0.0;\n    if(stacked == true)\n        aiTime = loop(iTime, interval);\n    else\n        aiTime = iTime;\n    bool fill = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * acos(abqiTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(acos(abqiTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(acos(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(acos(abqiTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(acos(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(acos(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(acos(abqiTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(acos(abqiTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(acos(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(acos(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(acos(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(acos(abqiTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(acos(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(acos(abqiTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(acos(abqiTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(acos(abqiTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\n\nfloat iTimedFlexATan(float size, float speed, float interval, float rate, float reps, bool stacked, bool absolute, bool root, bool exponent, bool power, float amount) {\n    float stretch = 0.0;\n    float aiTime = 0.0;\n    if(stacked == true)\n        aiTime = loop(iTime, interval);\n    else\n        aiTime = iTime;\n    bool fill = true;\n    float subInterval = interval / reps;\n    float abiTime = loop(aiTime, subInterval);\n    float abqiTime = abiTime * rate;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * atan(abqiTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(atan(abqiTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(atan(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(atan(abqiTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(atan(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(atan(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(atan(abqiTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(atan(abqiTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(atan(abqiTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(atan(abqiTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(atan(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(atan(abqiTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(atan(abqiTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(atan(abqiTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(atan(abqiTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(atan(abqiTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\nfloat customSin(float size, float speed, bool absolute, bool root, bool exponent, bool power, float amount) {\n            float stretch = 0.0;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sin(iTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(sin(iTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sin(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sin(iTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(sin(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(sin(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(sin(iTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(sin(iTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(sin(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(sin(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(sin(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(sin(iTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(sin(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(sin(iTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(sin(iTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(sin(iTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\nfloat customCos(float size, float speed, bool absolute, bool root, bool exponent, bool power, float amount) {\n            float stretch = 0.0;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * cos(iTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(cos(iTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(cos(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(cos(iTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(cos(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(cos(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(cos(iTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(cos(iTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(cos(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(cos(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(cos(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(cos(iTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(cos(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(cos(iTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(cos(iTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(cos(iTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\nfloat customTan(float size, float speed, bool absolute, bool root, bool exponent, bool power, float amount) {\n            float stretch = 0.0;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * tan(iTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(tan(iTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(tan(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(tan(iTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(tan(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(tan(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(tan(iTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(tan(iTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(tan(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(tan(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(tan(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(tan(iTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(tan(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(tan(iTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(tan(iTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(tan(iTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\nfloat customASin(float size, float speed, bool absolute, bool root, bool exponent, bool power, float amount) {\n            float stretch = 0.0;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * asin(iTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(asin(iTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(asin(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(asin(iTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(asin(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(asin(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(asin(iTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(asin(iTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(asin(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(asin(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(asin(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(asin(iTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(asin(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(asin(iTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(asin(iTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(asin(iTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\nfloat customACos(float size, float speed, bool absolute, bool root, bool exponent, bool power, float amount) {\n            float stretch = 0.0;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * acos(iTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(acos(iTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(acos(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(acos(iTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(acos(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(acos(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(acos(iTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(acos(iTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(acos(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(acos(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(acos(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(acos(iTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(acos(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(acos(iTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(acos(iTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(acos(iTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\nfloat customATan(float size, float speed, bool absolute, bool root, bool exponent, bool power, float amount) {\n            float stretch = 0.0;\n\n        if(absolute == false)\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * atan(iTime / speed);\n                    }\n                    else\n                    {\n                        stretch = size * pow(atan(iTime / speed), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(atan(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(atan(iTime / speed)), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(atan(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(atan(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                        if(power == false)\n                    {\n                            stretch = size * exp(sqrt(atan(iTime / speed)));\n                    }\n                    else\n                    {\n                            stretch = size * pow(exp(sqrt(atan(iTime / speed))), amount);\n                    }\n                }\n            }\n        }\n        else\n        {\n            if(root == false)\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * abs(atan(iTime / speed));\n                    }\n                    else\n                    {\n                        stretch = size * pow(abs(atan(iTime / speed)), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(abs(atan(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(abs(atan(iTime / speed))), amount);\n                    }\n                }\n            }\n            else\n            {\n                if(exponent == false)\n                {\n                    if(power == false)\n                    {\n                        stretch = size * sqrt(abs(atan(iTime / speed)));\n                    }\n                    else\n                    {\n                        stretch = size * pow(sqrt(abs(atan(iTime / speed))), amount);\n                    }\n                }\n                else\n                {\n                    if(power == false)\n                    {\n                        stretch = size * exp(sqrt(abs(atan(iTime / speed))));\n                    }\n                    else\n                    {\n                        stretch = size * pow(exp(sqrt(abs(atan(iTime / speed)))), amount);\n                    }\n                }\n            }\n        }\n\n    return stretch;\n}\n\nfloat quadRectShape(vec2 coordinates, vec2 size, float horizontalDistance, float verticalDistance) {\n    return rectShape(coordinates - vec2((horizontalDistance / 2.0), (verticalDistance / 2.0)), size) +\n             rectShape(coordinates - vec2((-horizontalDistance / 2.0), (verticalDistance / 2.0)), size) +\n             rectShape(coordinates - vec2((horizontalDistance / 2.0), (-verticalDistance / 2.0)), size) +\n             rectShape(coordinates - vec2((-horizontalDistance / 2.0), (-verticalDistance / 2.0)), size);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 coord = 1.0 * (fragCoord.xy - iResolution.xy / 2.0) / min(iResolution.y, iResolution.x);\n    vec2 q = coord - vec2(-0.5, -0.5);\n\n    vec3 color = vec3(0.5,0.5,0.5);\n\n    float interval = 15.0;\n\n    float minColor = 0.5;\n    float maxColor = 0.9;\n    float shade = 0.0;\n    float tint = 0.0;\n    if(iTimeMark(interval, 1.0, 1.0) == true)\n    {\n        shade = clamp(minColor + iTimedFlexSin(0.4, 5.2, interval, 1.0, 1.0, false, true, true, false, true, 0.7), minColor, maxColor);\n    }\n    else\n    {\n        tint = clamp(maxColor - iTimedFlexSin(0.4, 5.2, interval, 1.0, 2.0, false, true, true, false, true, 0.7), minColor, maxColor);\n    }\n\n    vec2 flexBoxLocation = vec2(-0.0, 0.07);\n\n    vec2 flexBoxSize = vec2(0.04, 0.4);\n\n    float rotation = 1.5;\n\n    float scaling = -1.0;\n\n    //float flex = iTimedFlexExp(0.2, 0.0001, 30.0, 2.0, 1.0);\n    float flex = iTimedFlexExp(0.2, 0.0001, interval, 1.0, 0.5);\n\n\n    vec3 backgroundColor = vec3(0.5);\n\n    vec3 flexColor = vec3(0.7);\n\n    if(iTimeMark(interval, 1.0, 1.0) == true)\n    {\n        color = flexRectangle(color, q, flexBoxLocation, flexBoxSize, rotation, scaling, backgroundColor, flex, vec3(shade));\n        color = flexRectangle(color, q, flexBoxLocation - vec2(0.0, 0.14), flexBoxSize, rotation - 1.0, scaling, backgroundColor, flex, vec3(shade));\n    }\n    else\n    {\n        color = flexRectangle(color, q, flexBoxLocation, flexBoxSize, rotation, scaling, backgroundColor, flex, vec3(tint));\n        color = flexRectangle(color, q, flexBoxLocation - vec2(0.0, 0.14), flexBoxSize, rotation - 1.0, scaling, backgroundColor, flex, vec3(tint));\n    }\n\n\n    float widthFlex = iTimedFlexSin(0.35, 90.0, 10.0, 75.0, 1.0, true, true, true, false, false, 1.0);\n    //float widthFlex = iTimedFlexSin(0.35, 90.0, interval, 75.0, 1.0, true, true, true, false, false, 1.0);\n\n\n    float limit = 0.4 - widthFlex;\n\n    if(iTimeMark(interval, 1.0, 1.0) == true)\n    {\n        if(iTimeMark(widthFlex, 1.0, 1.0) == true)\n            limit = 0.4;\n        float rectangles = quadRectShape(q, vec2(0.03, 0.03), limit, 0.12);\n        color *= vec3(1.0 - rectangles);\n        color += vec3(rectangles * shade);\n    }\n    else\n    {\n        float rectangles = quadRectShape(q, vec2(0.03, 0.03), 0.4, 0.12);\n        color *= vec3(1.0 - rectangles);\n        color += vec3(rectangles * tint);\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}