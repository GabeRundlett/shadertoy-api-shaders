{
    "Shader": {
        "info": {
            "date": "1610551996",
            "description": "Test for writing & reading uint values to & from texture - red channel shows values being passed incorrectly, green channel shows NaNs being transmitted, blue channel shows subnormal numbers.\n\nMouse button down to use \"texture()\" instead of \"texelFetch()\"",
            "flags": 48,
            "hasliked": 0,
            "id": "ttGyRW",
            "likes": 3,
            "name": "UInt Texture Test",
            "published": 3,
            "tags": [
                "test",
                "texture",
                "uint"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "// Test for round tripping uints through conversion to floats, texture write,\n// texture read, and conversion back to uints.\n// Key 'x' fixes data as at frame 0, use to see if data preserved over window\n// resize (it isn't - NaNs and subnormals get corrupted).\n\nbool subnormal(uint n) {\n  if (n == 0u) return false;\n  return ((n>>23)&0xffU) == 0U;\n}\n\nbool subnormal(uvec4 p) {\n  return subnormal(p.x) || subnormal(p.y) || subnormal(p.z) || subnormal(p.w);\n}\n\n// isnan() doesn't work on some platforms, D3D11 it seems\n// This will return true for Inf values too.\nbool nan(uint n) {\n  return ((n>>23)&0xffU) == 0xffU;\n}\n\nbool nan(uvec4 p) {\n  return nan(p.x) || nan(p.y) || nan(p.z) || nan(p.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = key(CHAR_X) ? 0 : iFrame;\n    \n    uvec4 outval = mkoutval(frame,fragCoord);\n    vec4 incol = texelFetch(iChannel0,ivec2(fragCoord),0);\n    if (iMouse.z > 0.0) incol = texture(iChannel0,fragCoord/iResolution.xy);\n\n    uvec4 inval = floatBitsToUint(incol);\n    fragColor = vec4(outval != inval,nan(inval),subnormal(inval),1);\n    //if (iMouse.z > 0.0 && inval>>16 == uvec4(0)) fragColor = vec4(1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord){\n    if (key(CHAR_X) && iFrame != 0) {\n      fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    } else {\n      uvec4 outval = mkoutval(iFrame,fragCoord);\n      fragColor = uintBitsToFloat(outval);\n    }\n    //if (any(isnan(fragColor))) fragColor = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "uint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nuvec4 mkoutval(int frame, vec2 fragcoord) {\n    uvec4 outval;\n    for (uint i = 0U; i < 4U; i++) {\n      outval[i] = ihash(uint(frame<<2) ^ i ^ ihash(uint(fragcoord.x)^ihash(uint(fragcoord.y))));\n    }\n    return outval;\n}\n\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\n// const int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}