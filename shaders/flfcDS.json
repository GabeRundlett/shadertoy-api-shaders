{
    "Shader": {
        "info": {
            "date": "1648595325",
            "description": "finally added the third point consideration",
            "flags": 0,
            "hasliked": 0,
            "id": "flfcDS",
            "likes": 2,
            "name": "Fixed my voronoi",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "\n//credit to iq for noise\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\nvec3 proj (vec3 a, vec3 b) {\n    return dot(a, b) * b / dot(b, b);\n}\nfloat comp (vec3 a, vec3 b) {\n    return dot(a, b) / length(b);\n}\nfloat comp2 (vec2 a, vec2 b) {\n    return comp(vec3(a.xy, 0.), vec3(b.xy, 0.));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    vec2 mouse = vec2(0.5);\n    uv.x*=aspect;\n    const int numPoints = 25;\n    float[numPoints] pointsx = float[numPoints](\n        0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0.);\n    float[numPoints] pointsy = pointsx;\n    float d = 100000.;\n    float ld = d;\n    float nld = d;\n    vec2 n_last_point = vec2(0.);\n    vec2 last_point = vec2(0.);\n    vec2 point = vec2(0.);\n    for(int i = 0; i<numPoints; i++){\n        float j = float(i);\n        pointsx[i] = snoise(vec2(iTime*0.01+j))+mouse.x*aspect;\n        pointsy[i] = snoise(vec2(iTime*0.01+j+1.))+mouse.y;\n        vec2 r = vec2(pointsx[i], pointsy[i]);\n        float dist = length(r-uv);\n        if(dist<d){\n            nld = ld;\n            n_last_point = last_point;\n            ld = d;\n            last_point = point;\n            d = dist;\n            point = r;\n        } else if (dist<ld){\n            nld = ld;\n            n_last_point = last_point;\n            ld = dist;\n            last_point = r;\n        } else if (dist < nld) {\n            nld = dist;\n            n_last_point = r;\n        }\n    }\n    //one thing to take advantage of is the fact that each line separating points is equal in length\n    float max_dist = length(point - last_point) / 2.;\n    float max_dist2 = length(point - n_last_point) / 2.;\n    float dist = comp2(uv - point, last_point - point); // project vector from nearest onto height-space vector\n    float dist2 = comp2(uv - point, n_last_point - point);\n    float h = abs(dist - max_dist);\n    float h2 = abs(dist2 - max_dist2);\n    float hp = h / max_dist;\n    float hp2 = h2 / max_dist2;\n    h = min(h, h2);\n    float lines = 30.;\n    vec3 mod_color = vec3(abs(mod(h, 1./lines)*lines-0.5));\n    vec3 line_color = smoothstep(0.02, 0.00, h) * vec3(0., 0., 1.);\n    vec3 col = max(mod_color, line_color); // just the line: smoothstep(0.01, 0.02, h)\n    \n    //col = mix(vec3(1.), col, smoothstep(0.01, 0.02, length(uv-point)));\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}