{
    "Shader": {
        "info": {
            "date": "1385829072",
            "description": "my first raycast demo.\nreference to iq's Rasterizer demo(it is a very good learning example.)",
            "flags": 0,
            "hasliked": 0,
            "id": "MsS3WR",
            "likes": 2,
            "name": "RayIntersect",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "jpweiyi",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "///////////////////////////////////////////////////////////\n//\n// my first raycast demo.\n// reference to iq's Rasterizer demo(it is a very good learning example.)\n//\nmat4 setRotation( float x, float y, float z )\n{\n    float a = sin(x); float b = cos(x); \n    float c = sin(y); float d = cos(y); \n    float e = sin(z); float f = cos(z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 0.0,      0.0,      0.0, 1.0 );\n}\n\nmat4 setTranslation( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n                 0.0, 1.0, 0.0, 0.0,\n                 0.0, 0.0, 1.0, 0.0,\n                 x,     y,   z, 1.0 );\n}\n\nstruct Triangle\n{\n    vec3 a; vec2 aUV;\n    vec3 b; vec2 bUV;\n    vec3 c; vec2 cUV;\n    vec3 n;\n};\n\nTriangle triangles[14];\n\nvoid createCube( void )\n{\n    vec3 verts[8];\n\n    verts[0] = vec3( -1.0, -1.0, -1.0 );\n    verts[1] = vec3( -1.0, -1.0,  1.0 );\n    verts[2] = vec3( -1.0,  1.0, -1.0 );\n    verts[3] = vec3( -1.0,  1.0,  1.0 );\n    verts[4] = vec3(  1.0, -1.0, -1.0 );\n    verts[5] = vec3(  1.0, -1.0,  1.0 );\n    verts[6] = vec3(  1.0,  1.0, -1.0 );\n    verts[7] = vec3(  1.0,  1.0,  1.0 );\n\n    triangles[0].a = verts[1]; triangles[0].aUV = vec2(0.0,0.0);\n    triangles[0].b = verts[5]; triangles[0].bUV = vec2(1.0,0.0);\n    triangles[0].c = verts[7]; triangles[0].cUV = vec2(1.0,1.0);\n    triangles[0].n = vec3( 0.0, 0.0, 1.0 );\n    triangles[1].a = verts[1]; triangles[1].aUV = vec2(0.0,0.0),\n    triangles[1].b = verts[7]; triangles[1].bUV = vec2(1.0,1.0),\n    triangles[1].c = verts[3]; triangles[1].cUV = vec2(0.0,1.0),\n    triangles[1].n = vec3( 0.0, 0.0, 1.0 );\n\n    triangles[2].a = verts[5]; triangles[2].aUV = vec2(0.0,0.0);\n    triangles[2].b = verts[4]; triangles[2].bUV = vec2(1.0,0.0);\n    triangles[2].c = verts[6]; triangles[2].cUV = vec2(1.0,1.0);\n    triangles[2].n = vec3( 1.0, 0.0, 0.0 );\n    triangles[3].a = verts[5]; triangles[3].aUV = vec2(0.0,0.0);\n    triangles[3].b = verts[6]; triangles[3].bUV = vec2(1.0,1.0);\n    triangles[3].c = verts[7]; triangles[3].cUV = vec2(0.0,1.0);\n    triangles[3].n = vec3( 1.0, 0.0, 0.0 );\n\n    triangles[4].a = verts[3]; triangles[4].aUV = vec2(0.0,0.0);\n    triangles[4].b = verts[7]; triangles[4].bUV = vec2(1.0,0.0);\n    triangles[4].c = verts[6];;triangles[4].cUV = vec2(1.0,1.0);\n    triangles[4].n = vec3( 0.0, 1.0, 0.0 );\n    triangles[5].a = verts[3]; triangles[5].aUV = vec2(0.0,0.0);\n    triangles[5].b = verts[6]; triangles[5].bUV = vec2(1.0,1.0);\n    triangles[5].c = verts[2]; triangles[5].cUV = vec2(0.0,1.0);\n    triangles[5].n = vec3( 0.0, 1.0, 0.0 );\n\n    triangles[6].a = verts[0]; triangles[6].aUV = vec2(1.0,0.0);\n    triangles[6].b = verts[6]; triangles[6].bUV = vec2(0.0,1.0);\n    triangles[6].c = verts[4]; triangles[6].cUV = vec2(0.0,0.0);\n    triangles[6].n = vec3( 0.0, 0.0, -1.0 );\n    triangles[7].a = verts[0]; triangles[7].aUV = vec2(1.0,0.0);\n    triangles[7].b = verts[2]; triangles[7].bUV = vec2(1.0,1.0);\n    triangles[7].c = verts[6]; triangles[7].cUV = vec2(0.0,1.0);\n    triangles[7].n = vec3( 0.0, 0.0, -1.0 );\n\n    triangles[8].a = verts[1]; triangles[8].aUV = vec2(1.0,0.0);\n    triangles[8].b = verts[2]; triangles[8].bUV = vec2(0.0,1.0);\n    triangles[8].c = verts[0]; triangles[8].cUV = vec2(0.0,0.0);\n    triangles[8].n = vec3( -1.0, 0.0, 0.0 );\n    triangles[9].a = verts[1]; triangles[9].aUV = vec2(1.0,0.0);\n    triangles[9].b = verts[3]; triangles[9].bUV = vec2(1.0,1.0);\n    triangles[9].c = verts[2]; triangles[9].cUV = vec2(0.0,1.0);\n    triangles[9].n = vec3( -1.0, 0.0, 0.0 );\n\n    triangles[10].a = verts[1]; triangles[10].aUV = vec2(0.0,0.0);\n    triangles[10].b = verts[0]; triangles[10].bUV = vec2(0.0,1.0);\n    triangles[10].c = verts[4]; triangles[10].cUV = vec2(1.0,1.0);\n    triangles[10].n = vec3( 0.0, -1.0, 0.0 );\n    triangles[11].a = verts[1]; triangles[11].aUV = vec2(0.0,0.0);\n    triangles[11].b = verts[4]; triangles[11].bUV = vec2(1.0,1.0);\n    triangles[11].c = verts[5]; triangles[11].cUV = vec2(1.0,0.0);\n    triangles[11].n = vec3( 0.0, -1.0, 0.0 );\n}\n\nvoid createFloor( void )\n{\n    vec3 verts[8];\n\n    verts[0] = vec3( -3.0, -1.0, -3.0 );\n    verts[1] = vec3( -3.0, -1.0,  3.0 );\n    verts[2] = vec3(  3.0, -1.0,  3.0 );\n    verts[3] = vec3(  3.0, -1.0, -3.0 );\n\n    triangles[12].a = verts[0]; triangles[12].aUV = vec2(0.0,0.0);\n    triangles[12].b = verts[1]; triangles[12].bUV = vec2(0.0,3.0);\n    triangles[12].c = verts[3]; triangles[12].cUV = vec2(3.0,0.0);\n    triangles[12].n = vec3( 0.0, 1.0, 0.0 );\n    triangles[13].a = verts[1]; triangles[13].aUV = vec2(0.0,3.0),\n    triangles[13].b = verts[2]; triangles[13].bUV = vec2(3.0,3.0),\n    triangles[13].c = verts[3]; triangles[13].cUV = vec2(3.0,0.0),\n    triangles[13].n = vec3( 0.0, 1.0, 0.0 );\n}\n\nbool RayIntersectTriangle(in vec3 ro, in vec3 rd,\n                          in vec3 v0, in vec3 v1, in vec3 v2,\n                          inout float u, inout float v, inout float t)\n{\n    vec3 E1 = v1 - v0;\n    vec3 E2 = v2 - v0;\n    \n    vec3 P = cross(rd, E2); \n    float det = dot(E1, P);\n    \n    vec3 T = vec3(0.);\n    if(det > 0.)\n      T = ro - v0;      \n    else{\n        T = v0 - ro;\n        det = -det;\n    }\n    \n    if(det < 0.001)\n        return false;\n        \n    u = dot(T, P);\n    if(u < 0. || u > det)\n        return false;\n    \n    vec3 Q = cross(T, E1);\n    v = dot(rd, Q);\n    if(v < 0. || u + v > det)\n        return false;\n        \n    t = dot(E2, Q);\n    \n    float fInvDet = 1. / det;\n    t *= fInvDet;\n    u *= fInvDet;\n    v *= fInvDet;\n    \n    return true;\n}\n\nvec3 lig = normalize( vec3( 0.3,0.7,0.5) );\n\nvec3 pixelShader( in vec3 nor, in vec2 uv, in float z, in vec3 wnor )\n{\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float brdf = 0.5 + 0.8*dif;\n    brdf *= 2.0*exp( -0.8*abs(z) );\n            \n    vec3 mate = texture( iChannel0, uv ).xyz * abs(wnor.x) + \n                texture( iChannel1, uv ).xyz * abs(wnor.y) + \n                texture( iChannel2, uv ).xyz * abs(wnor.z);\n    \n    vec3 col = brdf * mate;    \n    \n    return sqrt( col );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat4 mdv = setTranslation( 0.0, 0.5, -3.0 ) * \n               setRotation( 0.6, 0.0,  0.0 ) * \n               setRotation( 0.0, 3.1*sin(0.3*iTime), 0.0 );\n               \n    vec2 pix = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n    pix.x *= iResolution.x/iResolution.y;\n    \n    createCube();\n    createFloor();\n    \n    vec3 ro = vec3(0., 0., 2.);\n    vec3 rd = normalize(vec3(pix, 0.) - ro);\n    vec3 color = vec3(0.);\n\n    // clear zbuffer\n    float mindist = -1000000.0;\n    \n    for(int i = 0; i < 14; i++)\n    {\n        // transform to eye space\n        vec3 ep0 = (mdv * vec4(triangles[i].a,1.0)).xyz;\n        vec3 ep1 = (mdv * vec4(triangles[i].b,1.0)).xyz;\n        vec3 ep2 = (mdv * vec4(triangles[i].c,1.0)).xyz;\n        vec3 nor = (mdv * vec4(triangles[i].n,0.0)).xyz;\n        \n        float u = 0.;\n        float v = 0.;\n        float t = 0.;\n        if(RayIntersectTriangle(ro, rd, ep0, ep1, ep2, u, v, t))\n        {\n\t\t\t// do uv linear interpolation.\n            vec2 uv = (triangles[i].bUV - triangles[i].aUV) * u + \n                      (triangles[i].cUV - triangles[i].aUV) * v;\n\t\t\t\n            float z = (ro + t * rd).z;\n\t\t\t\n            if( z>mindist )\n            {\n                mindist = z;\n\n                // perform lighting/shading\n                color = pixelShader( nor, uv, z, triangles[i].n );\n            }\n        }\n    }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}