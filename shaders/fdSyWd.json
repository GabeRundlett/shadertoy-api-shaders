{
    "Shader": {
        "info": {
            "date": "1644293748",
            "description": "wanted to replace if statements with functions but couldn't think of anything concise",
            "flags": 0,
            "hasliked": 0,
            "id": "fdSyWd",
            "likes": 14,
            "name": "Square Tiling Example",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "// Fabrice's golfed version\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, I,A, o,\n          U = ( u - .5*R ) / R.y;\n    float s = 14. +  cos(3.5 * U.x + iTime)/4., \n          k = s/R.y, i,h,c;\n    U *= s;\n    I = floor(U);\n    U -= I;\n    \n    int b = int( mod( I+I - I.y, 5. ));\n    i = b != 3 ? U *= .5, 1. : 2.;  \n    o = vec2( b>0 && b<3, b==1 || b==4 );\n    A = abs( U += .5*o - .5 );\n    \n    h = 6.28 * fract(1e4*sin(dot(I-o,R-17.))); \n    O =   smoothstep(k, -k, .5 - mix( max(A.x,A.y), length(U), c = .5 + .5*cos(h + 3.14*i + iTime) ) \n                            - (.05 + .1*c) * i )\n        * ( 1. + cos(6.28*( h + .05*iTime + vec4(0,1,2,0)/3. )) ) \n        + .14;\n}\n\n\n// Original version\n/*\n#define pi 3.14159\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a+b*cos(2.*pi*(c*t+d));\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    float sc = 14. + 0.25 * cos(3.5 * uv.x + iTime);\n    vec2 ipos = floor(sc * uv) + 0.;\n    vec2 fpos = fract(sc * uv) - 0.;\n       \n    // m determines what new cell the old cell lies in\n    // 3 -> small\n    // 0 -> tl big, 2 -> tr big, 4 -> bl big, 1 -> br big\n    float m = mod(2. * ipos.x - ipos.y, 5.);\n    \n    // id = 2 if small cell, id = 1 if big cell (used to make outlines same size)\n    float id = 2.;\n    vec2 o = vec2(0);\n    \n    if (m != 3.) { fpos *= 0.5;  id = 1.; }    \n    if (m == 2.)      o = vec2(1,0); // top right\n    else if (m == 4.) o = vec2(0,1); // bottom left\n    else if (m == 1.) o = vec2(1);   // bottom right\n    \n    // if in big cell, halve fpos + translate\n    fpos += 0.5 * o - 0.5;\n    ipos -= o;\n    \n    float h = 2. * pi * h21(ipos);\n    \n    float c = cos(h + pi * id + iTime);    \n    float d = mix(mlength(fpos), length(fpos), 0.5 + 0.5 * c);\n    \n    float k = 5. / iResolution.y;\n    float s = 1. - smoothstep(-k, k, -d + 0.5 - (0.1 + 0.05 * c) * id);// - length(fpos);\n\n    vec3 e = vec3(1.);\n    vec3 col = s * pal(h + 0.05 * iTime, e, e, e, vec3(0., 0.33, 0.66));\n    col += 0.14;\n    \n    fragColor = vec4(col,1.0);\n}\n//*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}