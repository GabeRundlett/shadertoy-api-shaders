{
    "Shader": {
        "info": {
            "date": "1725345792",
            "description": "i saw a shooting star",
            "flags": 0,
            "hasliked": 0,
            "id": "MfSBzt",
            "likes": 3,
            "name": "sep22024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 94
        },
        "renderpass": [
            {
                "code": "// Corrected Shooting Stars Shader with Proper Tip Brightness\nfloat sdLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return sqrt(dot(pa - ba * h, pa - ba * h));\n}\n\nfloat hash(vec2 p) {\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nfloat smoothstep_custom(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.xy;\n    vec3 finalColor = vec3(0.0);\n    \n    const float NUM_STARS = 50.0;\n    const float SPAWN_INTERVAL = 0.2;\n    \n    for (float i = 0.0; i < NUM_STARS; i++) {\n        vec2 seed = vec2(i, fract(i * 0.1234));\n        \n        float xPos = hash(seed) * 2.0 - 1.0;\n        float speed = mix(1.5, 2.5, hash(seed + 1.0));\n        float length = mix(0.2, 0.4, hash(seed + 2.0));\n        float brightness = mix(0.8, 1.2, hash(seed + 3.0));\n        \n        float spawnTime = i * SPAWN_INTERVAL;\n        float t = fract((iTime - spawnTime) / speed);\n        \n        // Adjust star movement: start from bottom, move upwards\n        vec2 pos = vec2(xPos, -1.2 + t * 2.4); // Start below screen, move up\n        vec2 tail = pos - vec2(0.0, length);   // Tail is below the head\n        \n        float d = sdLine(uv, pos, tail);\n        \n        // Adjust gradient calculation for upward movement\n        float gradient = smoothstep_custom(0.0, 1.0, (uv.y - tail.y) / (pos.y - tail.y));\n        \n        float starBrightness = smoothstep_custom(0.002, 0.0, d);\n        starBrightness *= smoothstep_custom(0.0, 0.1, t) * smoothstep_custom(1.0, 0.7, t);\n        starBrightness *= pow(gradient, 0.6) * brightness;\n        \n        // Calculate tip brightness (now at the top of the line)\n        float tipDistance = sqrt(dot(uv - pos, uv - pos));\n        float tipBrightness = smoothstep_custom(0.005, 0.0, tipDistance) * 2.0 * brightness;\n        \n        vec3 starColor = vec3(1.0) * (starBrightness + tipBrightness);\n        finalColor += starColor;\n    }\n    \n    finalColor += vec3(0.02, 0.02, 0.04) * (1.0 - sqrt(dot(uv, uv)));\n    \n    finalColor = vec3(1.0) - exp(-finalColor * 0.7);\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}