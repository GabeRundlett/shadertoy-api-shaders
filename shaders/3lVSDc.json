{
    "Shader": {
        "info": {
            "date": "1583754723",
            "description": "I've put some love into my first shader.\n",
            "flags": 64,
            "hasliked": 0,
            "id": "3lVSDc",
            "likes": 12,
            "name": "Nexus of LOVE",
            "published": 3,
            "tags": [
                "music",
                "space",
                "stars",
                "nebula"
            ],
            "usePreview": 0,
            "username": "quizcanners",
            "viewed": 926
        },
        "renderpass": [
            {
                "code": "// Fork of \"Nexus XIII\" by quizcanners. https://shadertoy.com/view/WtyXzG\n// 2020-03-09 10:49:50\n// Thanks to BigWings for a great heart tutorial: https://www.youtube.com/watch?v=dXyPOLf2MbU\n\nfloat Kisses(float a, float b, float k)\n{\n    float h = clamp((b-a)/k + .5, 0., 1.);\n    return mix(a,b,h) + h * (1. - h)* k * .5;\n}\n\n\nvec2 Hugs(float blur, vec2 uv)\n{\n \tuv.x *= .7 + blur*.3;\n    \n    float radius = .25;\n    \n    float shape = abs(uv.x);\n    \n    uv.y -= Kisses(sqrt(shape) * .35, blur * radius, .1);\n    \n    uv.y += .1 + blur * radius * .5;\n    \n    return uv;\n}\n\nvec3 TheShapeOfMyHeart(float blur, vec2 uv)\n{\n   \n   // uv = HeartOffset(blur, uv);\n    \n    float l =  length(uv);\n    \n    vec2 light = normalize(vec2(0.5, .2));\n    \n    float blick = max(0.,  (dot(normalize(uv), light) - .7) * 2.);\n    \n    float edge = blur * .3;\n    \n    const float blickPosition = 0.21;\n    \n    blick *= smoothstep(blickPosition-edge, blickPosition, l) * smoothstep(blickPosition+edge, blickPosition, l);// * (1. - blur);\n    \n    float s = smoothstep(0.25+edge, 0.25 - edge, l);\n    \n    return vec3(s,  blick , blick);\n\n}\n\nvoid Love (out vec4 col, in vec3 uv, in float zoom)\n{\n    \n    vec2 baseUv = uv.xy;\n    \n    uv.xy *= mix(0.8, 0.01, zoom);\n    \n    float deCenter = length(uv);\n    \n    deCenter = min(1., deCenter * deCenter);\n\n    vec2 smokeDin = vec2(-iTime + sin(uv.z*23.)*12.34, iTime + cos(uv.z*11.))*0.02;\n    \n    vec2 smokeUV = uv.xy;\n \n    float texC = texture(iChannel3, smokeUV*13.+ smokeDin.yx*0.5).r\n        \t\t*texture(iChannel3, smokeUV*15.*zoom*uv.y - smokeDin.yx*1.2).r*0.015;\n      \n    \n    float texA = (1.- texture(iChannel3, smokeUV*0.6 - texC * 0.5 + smokeDin*0.2).r);\n    \n    float texB = 1.-texture(iChannel3, smokeUV *  (1.-texA*0.1 + texC * 0.4 * (.5-texA)) + smokeDin*0.1).r;\n        \n    texA *= (0.5 + texB)*0.25;\n\n    texA *= texA * 8.* zoom * zoom * (1.-col.a) * deCenter;\n    \n    vec2 grid = uv.xy*10.;\n    \n     uv.xy = mod(grid,1.0);\n\n     grid -= uv.xy;\n    \n    uv.xy-=0.5;\n     \n    \n    vec4 add = vec4(0,0,0, texA);\n    \n    float depthMod = uv.z*0.123;\n    \n    float iTimeAndZoom = iTime + zoom;\n    \n    float cutMod = col.a * (12.);\n    \n    float upscale =  (col.a * 20.);\n    \n    const float cuttingMod = 1.;\n    \n    float distMod =  (1. + texA* 50.  + cutMod)* max(0.1,  zoom - col.a*8.) ;\n    \n    float blur = smoothstep(.98, .1  ,zoom);\n    \n    for(int x=-1;x<=1;x++){\n    \tfor(int y=-1;y<=1;y++){\n        \n            vec2 dUv = uv.xy - vec2(x,y);\n            vec2 dGrid = grid + vec2(x,y);\n\n            vec3 vol = texture(iChannel2, vec3(dGrid.xy*0.123+depthMod, (dGrid.x + iTimeAndZoom)*0.006 )).rgb ;\n\n            float music = texture(iChannel0, vec2(zoom*.6 + vol.b*.4,0.05)).x;\n  \n        \tmusic = 0.4 + smoothstep(-.2,1., music) * .5;\n            \n            float big = vol.b*vol.b * music * upscale;\n            \n            dUv += (vol.xy - .5)*1.5;\n            \n          \tfloat ray = max(0., 1.-abs(dUv.x*dUv.y*300.));\n            \n            vec2 loveUv = dUv*(1.-music) * 5. *( 1. + vol.b);//* big * 8000.;// * .1 / big;\n            \n            float deBlur = max(0.15, blur - music * music* .5);\n            \n            vec2 heart = Hugs(deBlur, loveUv);\n            \n            vec3 love = TheShapeOfMyHeart(deBlur, heart);\n            \n            dUv += heart * .5  * vol.b;\n\n            dUv += -dUv * .6 * music;\n            \n            add.a += love.r * .15;\n            \n            float len = length(dUv) +0.0001;\n            \n            float dist = big /len; \n\n            float cut = smoothstep(cuttingMod,.5,len);\n            \n            dist += ray * cut * big;\n            \n            add.rgb +=  (dist* vol  + \n                         love ) * distMod * cut ;\n    \t}\n     }\n\n   col += add * zoom * (1.-zoom);\n   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n     vec3 noise =  texture(iChannel2, vec3(uv*123.123+iTime, iTime+uv.x*uv.y*543.21)).rgb;\n    \n    vec4 col = vec4(0,0,0,0);\n    \n     float topMask = texture(iChannel1, uv).x;\n    \n     uv -= 0.5;\n    \n   \n  \n    \n    float aspect = iResolution.x/iResolution.y; \n    \n    uv.x*=aspect;\n        \n    float vignette = 1. - dot(uv,uv);\n    \n      vec2 M = (iMouse.xy - iResolution.xy * .5)/iResolution.y;\n    \n    uv += M;\n    \n    const float stepCnt = 5.;\n    const int steCntInt = 5;\n    const float oneStep = 1./stepCnt;\n    const float SPEED = 0.02;\n    \n    float zoom = iTime*SPEED;\n    \n    float index = floor(mod(zoom, 1.)*stepCnt);\n    \n    zoom = mod(zoom, oneStep);\n    \n    float off = 0.;\n    \n    float music = 0.;  \n    \n    for(int i=0;i<steCntInt;i++){\n        \n        float totalZoom = zoom + off;\n        \n    \tLove(col, vec3(uv.xy,index), totalZoom);\n    \toff += oneStep;\n        index = mod(index-1., stepCnt);\n    \t\n    }    \n    \n   \n    \n    col.rgb*=vec3(1.,0.6,.6) * (//2. * topMask + \n                                5.) * oneStep;\n    \n    col.rgb *= vignette;\n    \n    vec3 mixing = col.gbr+col.brg;\n    \n    col.rgb+= mixing * mixing * 0.1;\n    \n    col.rgb += noise*col.rgb*0.02;\n \n    \n    \n    fragColor = vec4(col.rgb,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 21447,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/user-269456534/heart-shaped-box-nirvana-cover"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}