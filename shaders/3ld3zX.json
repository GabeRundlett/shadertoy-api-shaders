{
    "Shader": {
        "info": {
            "date": "1577240556",
            "description": "snow\n算法来自：https://blog.csdn.net/tjw02241035621611/article/details/80047566\nalgorithm from https://blog.csdn.net/tjw02241035621611/article/details/80047566",
            "flags": 0,
            "hasliked": 0,
            "id": "3ld3zX",
            "likes": 11,
            "name": "snow snow",
            "published": 3,
            "tags": [
                "snow"
            ],
            "usePreview": 0,
            "username": "changjiu",
            "viewed": 959
        },
        "renderpass": [
            {
                "code": "/*\n*算法来自：https://blog.csdn.net/tjw02241035621611/article/details/80047566\n*algorithm from https://blog.csdn.net/tjw02241035621611/article/details/80047566\n*/\n\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec3(.1031, .1030, .0973, .1099)\n\nfloat SIZE_RATE = 0.1;\nfloat XSPEED = 0.2;\nfloat YSPEED = 0.5;\nfloat LAYERS = 10.;\n\nfloat Hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z); \n}\n\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n\nvec2 Rand22(vec2 co)\n{\n    float x = fract(sin(dot(co.xy ,vec2(122.9898,783.233))) * 43758.5453);\n    float y = fract(sin(dot(co.xy ,vec2(457.6537,537.2793))) * 37573.5913);\n    return vec2(x,y);\n}\n\nvec3 SnowSingleLayer(vec2 uv,float layer){\n    \n    vec3 acc = vec3(0.0,0.0,0.0);//让雪花的大小变化\n                uv = uv * (2.0+layer);//透视视野变大效果\n                float xOffset = uv.y * (((Hash11(layer)*2.-1.)*0.5+1.)*XSPEED);//增加x轴移动\n                float yOffset = (YSPEED*iTime);//y轴下落过程\n                uv += vec2(xOffset,yOffset);\n                vec2 rgrid = Hash22(floor(uv)+(31.1759*layer));\n                uv = fract(uv);\n                uv -= (rgrid*2.-1.0) * 0.35;\n                uv -=0.5;\n                float r = length(uv);\n                //让大小变化点\n                float circleSize = 0.05*(1.0+0.3*sin(iTime*SIZE_RATE));\n                float val = smoothstep(circleSize,-circleSize,r);\n                vec3 col = vec3(val,val,val)* rgrid.x ;\n                return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    uv *= vec2(iResolution.x/iResolution.y,1.0);\n    \n    vec3 acc = vec3(0,0,0);\n    for (float i=0.;i<LAYERS;i++) {\n        acc += SnowSingleLayer(uv,i); \n    }\n\n    // Output to screen\n    fragColor = vec4(acc,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}