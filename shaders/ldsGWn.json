{
    "Shader": {
        "info": {
            "date": "1367751891",
            "description": "I was bored, might continue it at some point",
            "flags": 0,
            "hasliked": 0,
            "id": "ldsGWn",
            "likes": 1,
            "name": "Random raytracer (unfinished)",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "nuclear",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "#define M_PI\t3.141593\n#define FOV\t\t(M_PI / 4.0)\n#define DEG(x)\t(M_PI * (x) / 180.0)\n#define DIST_THRES 0.001\n\nstruct Ray {\n\tvec3 origin;\n\tvec3 dir;\n};\n\nfloat calc_dist(in vec3 pos);\nvec3 calc_normal(vec3 pt);\nvec3 shade(in vec3 pos, in vec3 norm);\nvec3 backdrop(in Ray ray);\nRay get_primary_ray(float theta, float phi, float dist, in vec2 fragCoord);\nvec3 vec_rotx(in vec3 v, float a);\nvec3 vec_roty(in vec3 v, float a);\nvec3 vec_rotz(in vec3 v, float a);\nfloat anim_angle(in float degps);\nvec3 srgb_to_linear(in vec3 srgb_color);\nvec3 linear_to_srgb(in vec3 lin_color);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 color;\n\tRay ray = get_primary_ray(anim_angle(8.0), DEG(20.0), 6.0, fragCoord);\n\tray.origin.y += 1.0;\n\t\n\tfloat dist = 100.0;\n\tfloat t = 0.0;\n\tfor(int i=0; i<128; i++) {\n\t\tif(dist < DIST_THRES || t > 16.0) {\n\t\t\tbreak;\n\t\t}\n\t\tdist = calc_dist(ray.origin);\n\t\t\n\t\tfloat dt = max(dist, DIST_THRES);\n\t\tray.origin = ray.origin + ray.dir * dt;\n\t\tt += dt;\n\t}\n\n\n\tif(dist < DIST_THRES) {\n\t\tcolor = shade(ray.origin, calc_normal(ray.origin));\n\t} else {\n\t\tcolor = backdrop(ray);\n\t}\n\n\n\tfragColor.xyz = linear_to_srgb(color);\n\tfragColor.w = 1.0;\n}\n\nfloat sphere(in vec3 pos, in vec3 center, float rad)\n{\n\treturn dot(pos - center, pos - center) - rad;\n}\n\nfloat calc_dist(in vec3 pos)\n{\n\tfloat res = sphere(pos, vec3(0.0, 1.0, 0.0), 1.0);\n\tres = min(res, pos.y);\n\treturn res;\n}\n\nvec3 texturef(in vec3 pos)\n{\n\tif(pos.y <= 0.01) {\n\t\tvec2 foo = floor(mod(pos.xz, 2.0));\n\t\tfloat chess = abs(foo.x - foo.y);\n\t\treturn vec3(chess, 0.4, 1.0 - chess);\n\t}\n\treturn vec3(1.0, 0.3, 0.1);\n}\n\nvec3 shade(in vec3 pos, in vec3 norm)\n{\n\tvec3 diffuse = vec3(0.0, 0.0, 0.0);\n\tvec3 specular = vec3(0.0, 0.0, 0.0);\n\n\tvec3 ldir = normalize(vec3(-1.0, 1.0, -1.0));\n\tdiffuse = max(dot(ldir, norm), 0.0) * texturef(pos);\n\n\treturn diffuse + specular;\n}\n\nvec3 backdrop(in Ray ray)\n{\n\tvec3 dir = ray.dir;\n\t\n\treturn srgb_to_linear(texture(iChannel0, dir).xyz);\n}\n\n#define OFFS 1e-4\nvec3 calc_grad(vec3 pt)\n{\n\tvec3 grad;\n\tgrad.x = calc_dist(pt + vec3(OFFS, 0.0, 0.0)) - calc_dist(pt - vec3(OFFS, 0.0, 0.0));\n\tgrad.y = calc_dist(pt + vec3(0.0, OFFS, 0.0)) - calc_dist(pt - vec3(0.0, OFFS, 0.0));\n\tgrad.z = calc_dist(pt + vec3(0.0, 0.0, OFFS)) - calc_dist(pt - vec3(0.0, 0.0, OFFS));\n\treturn grad;\n}\n\nvec3 calc_normal(vec3 pt)\n{\n\treturn normalize(calc_grad(pt));\n}\n\nvec2 calc_sample_pos(in vec2 fragCoord)\n{\n\tfloat aspect = iResolution.x / iResolution.y;\n\tvec2 p = vec2(2.0, 2.0) * fragCoord.xy / iResolution.xy - vec2(1.0, 1.0);\n\t\n\treturn p * vec2(aspect, 1.0);\n}\n\nRay get_primary_ray(float theta, float phi, float dist, in vec2 fragCoord)\n{\n\tRay ray;\n\t\n\tray.origin = vec3(0.0, 0.0, 0.0);\n\tray.dir = vec3(calc_sample_pos(fragCoord), 1.0 / tan(FOV / 2.0));\n\t\n\t// place the camera in the specified spherical coordinates looking in...\n\tray.origin.x = sin(theta) * cos(phi) * dist;\n\tray.origin.y = sin(phi) * dist;\n\tray.origin.z = cos(theta) * cos(phi) * dist;\n\n\tray.dir = vec_rotx(ray.dir, -phi);\n\tray.dir = vec_roty(ray.dir, -theta + M_PI);\n\n\tray.dir = normalize(ray.dir);\n\treturn ray;\n}\n\nvec3 vec_rotx(in vec3 v, float a)\n{\n\tvec3 row1 = vec3(0.0, cos(a), sin(a));\n\tvec3 row2 = vec3(0.0, -sin(a), cos(a));\n\treturn vec3(v.x, dot(row1, v), dot(row2, v));\n}\n\nvec3 vec_roty(in vec3 v, float a)\n{\n\tvec3 row0 = vec3(cos(a), 0.0, -sin(a));\n\tvec3 row2 = vec3(sin(a), 0.0, cos(a));\n\treturn vec3(dot(row0, v), v.y, dot(row2, v));\n}\n\nvec3 vec_rotz(in vec3 v, float a)\n{\n\tvec3 row0 = vec3(cos(a), sin(a), 0.0);\n\tvec3 row1 = vec3(-sin(a), cos(a), 0.0);\n\treturn vec3(dot(row0, v), dot(row1, v), v.z);\n}\n\nfloat anim_angle(in float degps)\n{\n\treturn mod(DEG(iTime * degps), 2.0 * M_PI);\n}\n\n\nvec3 srgb_to_linear(in vec3 srgb_color)\n{\n\treturn pow(srgb_color, vec3(2.2));\n}\n\nvec3 linear_to_srgb(in vec3 lin_color)\n{\n\treturn pow(lin_color, vec3(1.0 / 2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}