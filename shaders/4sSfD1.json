{
    "Shader": {
        "info": {
            "date": "1500197327",
            "description": "Just playin' cause its sunday :)",
            "flags": 32,
            "hasliked": 0,
            "id": "4sSfD1",
            "likes": 4,
            "name": "Sunday07",
            "published": 3,
            "tags": [
                "blur",
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "Palliaci",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    col.xy = pow(1.-col.xy, vec2(.4545));\n\tfragColor = vec4(1.0,col.xy, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FEED_DEFAULT .0367\n#define KILL_DEFAULT .0649\n\n#define FEED_MITOSIS .03\n\n#define KILL_MITOSIS .0649\n\n\n\nvec2\ttexel;\nfloat\tt;\n\nvec2\tlaplacian_convolution(vec2 uv)\n{\n\tvec2\tret = vec2(0.);\n    \n    if (uv.x == 0. || uv.y == 0. || uv.x== 1. || uv.y ==1.)\n        return (ret);\n    ret += texture(iChannel0, vec2(uv.x , uv.y) ).xy * -.05;\n    \n    ret += texture(iChannel0, vec2(uv.x -texel.x, uv.y) ).xy * .2;\n    ret += texture(iChannel0, vec2(uv.x +texel.x, uv.y) ).xy * .2;\n    if (iTime < 3.)\n    {\n        ret += texture(iChannel0, vec2(uv.x , uv.y -texel.y) ).xy * -.2;\n    \tret += texture(iChannel0, vec2(uv.x , uv.y +texel.y) ).xy * -.2;\n    }\n    else\n    {\n        ret += texture(iChannel0, vec2(uv.x , uv.y -texel.y) ).xy * .2;\n    \tret += texture(iChannel0, vec2(uv.x , uv.y +texel.y) ).xy * .2;\n    }\n    \n    ret += texture(iChannel0, vec2(uv.x -texel.x, uv.y -texel.y) ).xy * .05;\n    ret += texture(iChannel0, vec2(uv.x +texel.x, uv.y -texel.y) ).xy * .05;\n    ret += texture(iChannel0, vec2(uv.x +texel.x, uv.y +texel.y) ).xy * .05;\n    ret += texture(iChannel0, vec2(uv.x -texel.x, uv.y +texel.y) ).xy * .05;\n    return (ret);\n}\n\n#define A22 0.0030\n#define A21 0.0133\n#define A20 0.0219\n#define A11 0.0596\n#define A10 0.0983\n#define A00 0.1621\n\nvec2 gaussian_blur(vec2 uv)\n{\n    vec2\tblur;\n    \n\tblur =\tA00 *\ttexture( iChannel0, uv ).rg;\n\n\tblur +=\tA10 *\ttexture( iChannel0, uv + vec2(-texel.x, 0.) ).rg;\n\tblur +=\tA10 *\ttexture( iChannel0, uv + vec2(texel.x, 0.) ).rg;\n\tblur +=\tA10 *\ttexture( iChannel0, uv + vec2(0., -texel.y) ).rg;\n\tblur +=\tA10 *\ttexture( iChannel0, uv + vec2(0., texel.y) ).rg;\n\n\tblur +=\tA11 *\ttexture( iChannel0, uv + vec2(-texel.x, -texel.y) ).rg;\n\tblur +=\tA11 *\ttexture( iChannel0, uv + vec2(texel.x, -texel.y) ).rg;\n\tblur +=\tA11 *\ttexture( iChannel0, uv + vec2(-texel.x, texel.y) ).rg;\n\tblur +=\tA11 *\ttexture( iChannel0, uv + vec2(texel.x, texel.y) ).rg;\n\n\tblur +=\tA20 *\ttexture( iChannel0, uv + vec2(-texel.x*2., 0.) ).rg;\n\tblur +=\tA20 *\ttexture( iChannel0, uv + vec2(texel.x*2., 0.) ).rg;\n\tblur +=\tA20 *\ttexture( iChannel0, uv + vec2(0., -texel.y*2.) ).rg;\n\tblur +=\tA20 *\ttexture( iChannel0, uv + vec2(0., texel.y*2.) ).rg;\n\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(-texel.x, -texel.y*2.) ).rb;\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(texel.x, -texel.y*2.) ).rg;\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(-texel.x, texel.y*2.) ).rg;\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(texel.x, texel.y*2.) ).rg;\n\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(-texel.x*2., -texel.y) ).rg;\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(texel.x*2., -texel.y) ).rg;\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(-texel.x*2., texel.y) ).rg;\n\tblur +=\tA21 *\ttexture( iChannel0, uv + vec2(texel.x*2., texel.y) ).rg;\n\n\tblur +=\tA22 *\ttexture( iChannel0, uv + vec2(-texel.x*2., -texel.y*2.) ).rg;\n\tblur +=\tA22 *\ttexture( iChannel0, uv + vec2(texel.x*2., -texel.y*2.) ).rg;\n\tblur +=\tA22 *\ttexture( iChannel0, uv + vec2(-texel.x*2., texel.y*2.) ).rg;\n\tblur +=\tA22 *\ttexture( iChannel0, uv + vec2(texel.x*2., texel.y*2.) ).rg;\n\treturn blur;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime;\n    if (iTime < 2.)\n        texel = 1./iResolution.xy;\n\telse\n    \ttexel = (1.)/iResolution.xy;\n    vec2 uv = (fragCoord.xy) / iResolution.xy;\n    vec4\tret = texture(iChannel0, uv);\n    vec2\tab = ret.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    if (  iMouse.z > 0.0 &&\n        mouse.x <= abs(uv.x+.005) && mouse.x >= abs(uv.x-.005) &&\n        mouse.y <= abs(uv.y+.005) && mouse.y >= abs(uv.y-.005) )\n\t    ab.y = 1.;\n    if (iTime <= .25)\n    {\n        if (iTime < .1)\n\t        fragColor = vec4(0.);\n        fragColor.x = 1.+sin(uv.x*16.); uv -= .5;\n\t\tfloat d = smoothstep(.1, .2, (length(uv) - .25));\n        uv.y -= .1;\n        uv.x += .15;\n        d = min(1.-d, smoothstep(.09, .12, (length(uv) - .01)));\n        uv.x -= .3;\n        d = min(d, smoothstep(.09, .12, (length(uv) - .01)));\n        fragColor.y += d;\n        //fragColor.y = smoothstep(.8, 1., texture(iChannel1, uv).y);\n    }\n    else\n    {\n        //float FEED_DEFAULT = .0550 + .1 * sin(2.*iTime) * uv.x * uv.y;\n\t\t//float KILL_DEFAULT = .0467 + .15 * cos(2.*iTime) * uv.x * uv.y;\n//\n     fragColor.x = clamp(ab.x + (1. * (laplacian_convolution(uv).x) - ab.x * ab.y * ab.y \n                                 + FEED_DEFAULT * (1. - ab.x)) ,-1.,1.);\n     fragColor.y = clamp(ab.y + (.5 * (laplacian_convolution(uv).y*uv.y) + ab.x * ab.y * ab.y \n                                 - (FEED_DEFAULT + KILL_DEFAULT) * ab.y ),-1.,1.);\n        //if (fragCoord.x > 2. && fragCoord.x < iResolution.x - 2.)\n        if (mod(float(iFrame), 2.)==0.)\n\t     fragColor.xy += 0.01 * gaussian_blur(uv);\n//\n/*\n\t fragColor.x = clamp(ab.x + (1. * (gaussian_blur(uv).x) - ab.x * ab.y * ab.y \n                                 + FEED_DEFAULT * (1. - ab.x)) ,-1.,1.);\n     fragColor.y = clamp(ab.y + (.5 * (gaussian_blur(uv).y) + ab.x * ab.y * ab.y \n                                 - (FEED_DEFAULT + KILL_DEFAULT) * ab.y ),-1.,1.);\n\t if (mod(float(iFrame), 2.)==0.)\n\t     fragColor.y += 0.01 * gaussian_blur(uv).y;\n*/\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}