{
    "Shader": {
        "info": {
            "date": "1510364554",
            "description": "upgrade of my https://www.shadertoy.com/view/XdlfRs",
            "flags": 0,
            "hasliked": 0,
            "id": "XtjcW3",
            "likes": 50,
            "name": "Starfield DOTs II",
            "published": 3,
            "tags": [
                "2d",
                "starfield",
                "hash",
                "dot"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 7187
        },
        "renderpass": [
            {
                "code": "/* \n\n\t\n\thttp://bit.ly/shadertoy-plugin\n \n\n\n*/\n\n\n// speed\n#define t (iTime * .6) \n\n// PI value\n#define PI 3.14159265\n\n// random\n#define H(P) fract(sin(dot(P,vec2(127.1,311.7)))*43758.545)\n\n// rotate \n#define pR(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \n    vec2 uv = (fragCoord - .5 * iResolution.xy - .5) / iResolution.y;\n\n    uv *= 2.4; // FOV\n    \n    // camera\n    vec3 \n        vuv = vec3(sin(iTime * .3), 1., cos(iTime)), // up\n        ro = vec3(0., 0., 134.), // pos\n        vrp = vec3(5., sin(iTime) * 60., 20.); // look at\n    \n    vrp.xz * pR(iTime);\n    vrp.yz * pR(iTime * .2);\n    \n    vec3\n    \tvpn = normalize(vrp - ro),\n        u = normalize(cross(vuv, vpn)),\n    \trd = normalize(\n            vpn + uv.x * u  + uv.y * cross(vpn, u)\n        ); // ray direction\n    \n    vec3 sceneColor = vec3(0.0, 0., 0.3); // background color\n    \n    vec3 flareCol = vec3(0.); // flare color accumulator   \n    float flareIntensivity = 0.; // flare intensity accumulator\n\n    for (float k = 0.; k < 400.; k++) {\n        float r = H(vec2(k)) * 2. - 1.; // random\n\n        // 3d flare position, xyz\n        vec3 flarePos =  vec3(\n            H(vec2(k) * r) * 20. - 10.,\n            r * 8.,\n            (mod(sin(k / 200. * PI * 4.) * 15. - t * 13. * k * .007, 25.))\n        );\n\t\t\n        float v = max(0., abs(dot(normalize(flarePos), rd)));\n        \n        // main dot\n        flareIntensivity += pow(v, 30000.) * 4.;\n        \n        // dot glow\n        flareIntensivity += pow(v, 1e2) * .15; \n        \n        // fade far\n        flareIntensivity *= 1.- flarePos.z / 25.; \n        \n        // accumulate\n        flareCol += vec3(flareIntensivity) * (vec3(sin(r * 3.12 - k), r, cos(k) * 2.)) * .3; \n    }\n    \n    sceneColor += abs(flareCol);\n    \n    // go grayscale from screen center\n    sceneColor = mix(sceneColor, sceneColor.rrr * 1.4, length(uv) / 2.);\n    \n    // adjust contrast\n    fragColor.rgb = pow(sceneColor, vec3(1.1));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}