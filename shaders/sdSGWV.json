{
    "Shader": {
        "info": {
            "date": "1639683418",
            "description": "sdfsdf",
            "flags": 32,
            "hasliked": 0,
            "id": "sdSGWV",
            "likes": 16,
            "name": "MandelBrot Orbit trap 2",
            "published": 3,
            "tags": [
                "fssg"
            ],
            "usePreview": 0,
            "username": "MinimilisticBits",
            "viewed": 499
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    //col *= 0.8;\n    col = pow(col, vec3(1./1.6));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat rand(vec2 n) { \n\treturn fract(sin(n.x*100. + n.y*245.)*10000.);\n}\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm( in vec2 x, in float H )\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    const int numOctaves = 4;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        t += a*noise(f*x);\n        f *= 2.0;\n        a *= G;\n    }\n    return t*0.1;\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvec2 hash2(inout float seed) {\n    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n\nvec2 mulz(vec2 z){\nreturn vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y);\n} \n\nfloat box(vec2 p, vec2 s){\nvec2 a = abs(p)-s;\nreturn max(a.x,a.y);\n}\n\nfloat star( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\nfloat g1(float x){\nreturn  sin(x);\n}\n\nfloat g2(float x){\nreturn tan(x)+tanh(x);\n}\n\n\nvec3 mand(vec2 p, vec2 q){\nfloat trapdist = 0.8;\nbool trapped = false;\nvec2 trap2 = p;\nfloat timestep = 0.06;\nfloat stalksradius = 0.002;\n//float trapsize = 0.01;\nvec2 z = p;\nvec2 c = p;\n float stalksradiushigh=sqrt(c.x*c.x+c.y*c.y)+stalksradius;\n float stalksradiuslow=sqrt(c.x*c.x+c.y*c.y)-stalksradius;\n float trap3;\n float a = 0.1;\n float b = 0.4;\n float ztot = 0.;\nfloat s = 0.;\nfloat k = 999999999.;\nfor(int i = 0; i < 60; i++){\nz = mulz(z)+c;\nk = min(k, star(z-p, 0.003));\nfloat d = dot(z,z);\ns+=exp(-0.2*d);\nif(length(z) > 22.)break;\n\t//crosses orbit traps\n  trap2.x = trap2.x - timestep*sin(z.y + tan(3.*z.y*a));\n  trap2.y = trap2.y + timestep*tan(z.x + tan(3.*z.x*b));\n  \n  /*trap2.x = trap2.x - timestep*(g1(z.y+g2(a*z.y))) - timestep*(g1(z.x + g2(a*z.x)));\n  trap2.y = trap2.y - timestep*(g2(z.x+g1(a*z.x))) - timestep*(g2(z.y + g1(a*z.y)));\n  float px = trap2.x;\n\nfloat r= sqrt(trap2.x*trap2.x+trap2.y*trap2.y);\nfloat t= atan(trap2.y/(trap2.x));\ntrap2.x = r*cos(2.*t);\ntrap2.y = r*sin(2.*t);\n  */\n  \n  float ds = dot(trap2.x-p, trap2.y-p);\n  trap3 += exp(-0.2*ds);\n  float magnitude = length(z);\nif ((sqrt(magnitude)<=stalksradiushigh) && (sqrt(magnitude)>=stalksradiuslow) && (i>1)) {\n\tztot=sqrt(ztot)+(1.-abs(sqrt(magnitude)-sqrt(c.x*c.x+c.y*c.y))/stalksradius);\n    trapped=true;\n    }\n//if (trapped==true) break;\n}\n\n//return vec3(1.-trapdist/trapsize);\n//float trap = 1.-(trapdist/trapsize);\n\t\t\t\t//stalkcolor=min(1,sqrt(ztot));\n//float trap = 1.-trapdist/stalksradius;\nfloat trap = min(min(0.5,(ztot)),length(z*0.2));\n\n//return vec3(trap);\n//return vec3(fbm(q*abs(trap2)*0.01,1.));\n//fbm(trap2*0.02,3.)*2.1\n//return palette(trap+k*3.10+fbm(mulz(z)*0.00001*fbm(mulz(z)*0.001,3.),3.)*1.1, vec3(0.5), vec3(0.5), vec3(1.), vec3(0.,0.1,0.2));\nreturn palette(s*.1+trap, vec3(0.5), vec3(0.5), vec3(1.), vec3(0.,0.1,0.2))*fbm(q*abs(trap2)*0.02+fbm(q*abs(trap2)*0.02,3.),3.)*12.1;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= 1.3;\n    uv.y /= 1.3;\n    \n    float seed = uv.x + uv.y * 3.43121412313 + fract(1.12345314312*iTime);\n    uv += (hash2(seed)*2.0-1.0)*0.001;\n    //if(iFrame < 30)discard;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = mouse * 2.0 - 1.0;\n    float scale = 0.003;\n        uv *= (scale);\n    vec2 pos = vec2(208., 299.)/iResolution.xy;\n    pos = pos * 2.0 - 1.0;\n    uv = (vec2(0.31*2.-1.,0.8305555555555556*2.0-1.))-uv;\n    //uv = mouse - uv;\n    // Time varying pixel color\n    vec3 col = mand(uv, (fragCoord.xy/iResolution.xy)*10.);\n    vec3 prevcol = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    col = mix(prevcol, col, 1.0/(float(iFrame+1)));\n    // Output to screen\n    //col = vec3(fbm(.,2.));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}