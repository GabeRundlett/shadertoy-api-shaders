{
    "Shader": {
        "info": {
            "date": "1676752868",
            "description": "CC0: Atari Busy Bee\nRecreating the Atari Busy bee\nUse mouse to drag it around",
            "flags": 0,
            "hasliked": 0,
            "id": "DlBSDd",
            "likes": 5,
            "name": "Atari Busy Bee",
            "published": 3,
            "tags": [
                "atari"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "// CC0: Atari Busy Bee\n//  Recreating the Atari Busy bee\n//  Use mouse to drag it around\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec4 atariBee(vec2 p, float aa, float csz, vec3 bgCol, vec3 fgCol) {\n  const int[] rows = int[16](\n    0x00007c3e\n  , 0x282c7f7f\n  , 0x6a52ffff\n  , 0x1b22ffff\n  , 0x7b02ffff\n  , 0x0686ffff\n  , 0x3fcc7fff\n  , 0x1ab87ffe\n  , 0x07603ffc\n  , 0x2ad87ffc\n  , 0x5198ffff\n  , 0x2163ffff\n  , 0x4360fff7\n  , 0x4600fff8\n  , 0x3c10ff38\n  , 0x00107e38\n  );\n\n  vec2 cp = p;\n  float r  = 0.125*csz; \n  vec2 cn = mod2(cp, vec2(csz));\n  cn += 7.0;\n  \n  \n  if (cn.x < 0.0 || cn.x > 15.0) {\n    return vec4(0.0);\n  }\n  \n  if (cn.y < 0.0 || cn.y > 15.0) {\n    return vec4(0.0);\n  }\n\n  float d = box(cp, vec2(0.5*csz-r))-r;\n  // Praying bit tests aren't _too_ bad performance wise.\n  int row = rows[int(cn.y)];\n  bool bg = (row & (1 << int(cn.x))) != 0;\n  if (!bg) {\n    return vec4(0.0);\n  }\n  vec3 col = bgCol;\n  bool fg = (row & (1 << (int(cn.x)+16))) != 0;\n  if (fg) {\n    col = fgCol;\n  }\n  float t = smoothstep(aa, -aa, d);\n  return vec4(col, t);\n}\n\nvec4 atariBomb(vec2 p, float aa, float csz, vec3 bgCol, vec3 fgCol) {\n  const int[] rows = int[16](\n    0x03800380\n  , 0x0fe00fe0\n  , 0x1df01ff0\n  , 0x3bf83ff8\n  , 0x3bf83ff8\n  , 0x7ffc7ffc\n  , 0x7ffc7ffc\n  , 0x3fb83ff8\n  , 0x3ff83ff8\n  , 0x1ff01ff0\n  , 0x07c007c0\n  , 0x07c407c4\n  , 0x01090109\n  , 0x00800080\n  , 0x004a004a\n  , 0x00300030\n  );\n\n  vec2 cp = p;\n  float r  = 0.125*csz; \n  vec2 cn = mod2(cp, vec2(csz));\n  cn += 7.0;\n  \n  \n  if (cn.x < 0.0 || cn.x > 15.0) {\n    return vec4(0.0);\n  }\n  \n  if (cn.y < 0.0 || cn.y > 15.0) {\n    return vec4(0.0);\n  }\n\n  float d = box(cp, vec2(0.5*csz-r))-r;\n  // Praying bit tests aren't _too_ bad performance wise.\n  int row = rows[int(cn.y)];\n  bool bg = (row & (1 << int(cn.x))) != 0;\n  if (!bg) {\n    return vec4(0.0);\n  }\n  vec3 col = bgCol;\n  bool fg = (row & (1 << (int(cn.x)+16))) != 0;\n  if (fg) {\n    col = fgCol;\n  }\n  float t = smoothstep(aa, -aa, d);\n  return vec4(col, t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 m = -1. + 2. * (iMouse.xy)/RESOLUTION.xy;\n  float r = RESOLUTION.x/RESOLUTION.y;\n  p.x *= r;\n  m.x *= r;\n\n  float aa = 2.0/RESOLUTION.y;\n  float sz = 4.0*aa;\n\n  const vec3 atariBg = vec3(148.0, 236.0, 70.0)/255.0;\n  vec3 col = atariBg;\n  if (1.0-q.y < sz*8.0 ) {\n      col = vec3(0.0);\n  }\n  if (1.0-q.y < sz*7.0 ) {\n      col = vec3(1.0);\n  }\n  vec2 ap = p;\n  if (iMouse.z != 0.0) {\n    ap -= m;\n  }\n  \n  vec2 bp = p;\n  bp.x -= -1.0*r+8.0*sz;\n  float bombs = 11.0*(0.5+0.5*sin(TIME))-1.0;\n  vec2 bn = mod2(bp, vec2(16.0*sz));\n  \n  vec4 acol = atariBee(ap, aa, sz, vec3(1.0), vec3(0.0));\n  vec4 bcol = atariBomb(bp, aa, sz, vec3(1.0), vec3(0.0));\n\n  if (bn.x < bombs && bn.y == 0.0) {\n    col = vec3(1.0);\n    col = mix(col, bcol.xyz, bcol.w);\n  }\n  col = mix(col, acol.xyz, acol.w);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}