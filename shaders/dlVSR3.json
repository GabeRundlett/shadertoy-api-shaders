{
    "Shader": {
        "info": {
            "date": "1686257877",
            "description": "2D checkerboard moving on a diagonal defined by a given rotation.",
            "flags": 0,
            "hasliked": 0,
            "id": "dlVSR3",
            "likes": 2,
            "name": "Diagonal Checkerboard",
            "published": 3,
            "tags": [
                "2d",
                "checkerboard"
            ],
            "usePreview": 0,
            "username": "dchapes123",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Input parameters\n    const float boardSize = 15.0;\n    const float colorScale = 1.125;\n    const float timeScale = 0.125;\n    const float rotation = M_PI * 1.125;\n    \n    // 2D rotation matrix \n    const mat2 R = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation));\n    \n    float resScale = min(iResolution.x, iResolution.y);\n    vec2 guv = fragCoord / vec2(resScale);\n    vec2 uv = guv * R;\n    \n    float time = iTime * timeScale;\n    \n    bool f = bool(((int((uv.x - time) * boardSize) % 2) + (int(uv.y * boardSize) % 2)) % 2);\n    float d = max(0.0, distance(guv, vec2(0.5)) - 0.25) * colorScale;\n    \n    vec3 col = vec3(float(f) - d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}