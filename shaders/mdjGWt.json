{
    "Shader": {
        "info": {
            "date": "1668428155",
            "description": "Dripping and dripping, where is it coming from...",
            "flags": 0,
            "hasliked": 0,
            "id": "mdjGWt",
            "likes": 21,
            "name": "Dripping Red Wax",
            "published": 3,
            "tags": [
                "dripping"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 398
        },
        "renderpass": [
            {
                "code": "#define BACKGROUND vec3(1, 1, 1)\n\nconst float PI = 3.14159265359;\n\nfloat seed = 0.25;\n\nfloat dripDistance = 0.1;\nfloat density = 0.75;\n\nfloat bCurve = 1.5;\nfloat bFreq = 3.5;\nfloat bRange = 0.35;\n\nfloat fallSpeed = 6.0;\n\nfloat sdfWidth = 0.14;\n\nfloat scale = 0.5;\n\n\nfloat rand(float x, float y) { return fract(1e4 * sin(17.0 * x + y * 0.1) * (0.1 + abs(sin(y * 13.0 + x)))); }\n\nfloat dripSDF( vec2 uv )\n{   \n    uv.y *= -1.;\n    uv.y += 1.0;\n    float s = sdfWidth * abs((1.0-uv.y)-0.75) + 0.05;\n    float o = 1.0;\n    float drip = 9999.0;\n    \n    float x = uv.x * scale - sdfWidth;\n    x += dripDistance - mod(x, dripDistance);\n    \n    x -= dripDistance;\n    for( int i=0; i<3; i++ )\n    {\n        if( x > uv.x * scale + sdfWidth ) break;\n        \n        x += dripDistance;\n        float isLine = floor(rand(x, seed) + density);\n        if( isLine == 0.0 ) continue;\n        \n        float y = rand(seed,x) * 0.8 + 0.1;\n        float animTime = iTime+(y*10.0);\n        float bounce = 0.0 - (bCurve * mod(animTime, bFreq)) * exp(1.0-bCurve*mod(animTime, bFreq));\n        y += bounce * bRange;\n        y = min(y,uv.y);\n        \n        float t = mod(animTime, bFreq) * fallSpeed * bRange;\n        float f = y + t;\n        \n        float d = distance(vec2(x,y), uv * vec2(scale, 1));\n        \n        o *= clamp(d/s, 0.0, 1.0);\n        drip = min(drip, distance(vec2(x / scale,f), uv) * (0.5 + t * 0.45));\n    }\n    \n    o = min( o, clamp(drip/s,0.0,1.0) );\n    \n    s = sin(uv.x * 20.0 + iTime * 0.5) * 0.1 + sin(0.5 * (uv.x * 20.0 + iTime * 0.5)) * 0.2 + 0.4;\n    float sdf = o * clamp(uv.y/s,0.0,1.0);\n    return sdf;\n}\n\nvec3 getNormal(vec2 p)\n{\n    vec3 e = vec3(vec2(1.0) / iResolution.xy * 32.0 /*multiply for smooth normals*/, 0);\n    float nx = (dripSDF(p - e.xz) - dripSDF(p + e.xz)) / (2.0 * e.x);\n    float ny = (dripSDF(p - e.zy) - dripSDF(p + e.zy)) / (2.0 * e.y);\n    vec3 n = normalize(vec3(nx, ny, 1.));\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n\tvec3 col = vec3(0.0);   \n    \n    float c = 1.0 / sdfWidth * 0.025;\n    float w = 0.03;\n    \n    float d = dripSDF(uv);\n    float m = 1.0 - smoothstep( c - w, c + w, d );\n    \n \n    col.r = m;\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 ro = vec3(0, 0, 0);\n    vec3 p = ro + rd * d;\n    vec3 l[4] = vec3[](vec3(700, -500, 50.0), vec3(-700, -500, 50.0), vec3(0, -500, 200.0), vec3(100, 500, 100.0));\n    float light = 0.0;\n    for(int i = 0; i < l.length(); ++i)\n    {\n    vec3 to_l = normalize(l[i] - p);\n    vec3 to_ro = normalize(ro - p);\n    vec3 n = getNormal(uv);\n    float spec = pow(max(dot(reflect(-to_l, n), to_ro), 0.0), 8.0) * 0.75;\n    float occl = pow(max(dot(reflect(to_l, n), to_ro), 0.0), 2.0);\n    float diff = max(0.0, dot(to_l, n)) * 0.5;\n    light += max(spec + diff - occl, 0.0);\n    }\n    col.rgb *= light + 0.5;\n    col.gb += max(col.r - 1.0, 0.0);\n    col.rgb = pow(col.rgb, 1.0 / vec3(2.2));\n    col.rgb = mix(BACKGROUND, col.rgb, m);\n    //col.rgb = vec3(d);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}