{
    "Shader": {
        "info": {
            "date": "1585216716",
            "description": "A Sierpinski Sphere. See code header for various control keys.",
            "flags": 48,
            "hasliked": 0,
            "id": "3sfcRj",
            "likes": 20,
            "name": "Sierpinski Sphere",
            "published": 3,
            "tags": [
                "sphere",
                "sierpinski"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 430
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Sierpinski Gasket on a sphere, with some randomization.\n//\n// <mouse>: rotation\n// <up>/<down>: move in/out\n// <page up>/<page down>: color change probability\n// <left>/<right>: triangle division depth\n// c: color\n// g: display gasket only\n// r: autorotation\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float AA = 2.0;\nbool dorotate = true;\nbool gasketonly = false;\nbool docolor = true;\nint depth = 10; // Levels of triangle\nfloat pcolorchange = 0.25; // Probability of color change at a given level\n\nconst float PI = 3.14159265;\n\nvoid assert(bool b);\nvec3 hsv2rgb(vec3 c);\nvec3 transform(in vec3 p);\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nuint randseed = 1U;\nuint xorshift() {\n  // Xorshift*32\n  // From George Marsaglia: http://www.jstatsoft.org/v08/i14/paper\n  randseed ^= randseed << 13;\n  randseed ^= randseed >> 17;\n  randseed ^= randseed << 5;\n  return randseed;\n}\n\nfloat rand() {\n  return float(xorshift())/pow(2.0,32.0);\n}\n\nvec3 getspherecolor(vec3 p) {\n  uint index = uint(p.x<0.0)+(uint(p.y<0.0)<<1)+(uint(p.z<0.0)<<2);\n  p = abs(p);\n  p /= dot(p,vec3(1));\n  vec2 z = p.xy;\n  float E = 10.0;\n  float t = 0.5*iTime;\n  uint epoch = uint((t+0.5*E+1.0)/(E+2.0));\n  t = mod(t,E+2.0)-1.0;\n  t = max(t,0.0);\n  if (t > 0.5*E) t = max(0.5*E,t-1.0);\n  t = min(t,E-t); // t < 0.5*E\n  randseed = ihash(epoch^index+1U); // 0 hashes to 0!\n  vec3 col = hsv2rgb(vec3(rand(),0.8,1));\n  for (int i = 0; i < depth; i++) {\n    int j;\n    if  (z.x > 0.5) { j = 0; z = 2.0*vec2(z.x-0.5,z.y); }\n    else if (z.y > 0.5) { j = 1; z = 2.0*vec2(z.x,z.y-0.5); }\n    else if (z.x + z.y < 0.5) { j = 2; z = 2.0*z; }\n    else { j = 3; z = 0.5-z; }\n    if (i > 0 && j == 3 && (gasketonly || rand() < 2.0*t/E)) return vec3(0);\n    index = (index << 2) + uint(j);\n    randseed = ihash(epoch^index+1U); // 0 hashes to 0!\n    if (rand() < pcolorchange) col = hsv2rgb(vec3(rand(),0.8,1));\n  }\n  return docolor ? col : vec3(0.8);\n}\n\nstruct Ray {\n  vec3 q;               // origin\n  vec3 d;               // direction\n};\n\nstruct Hit {\n  float t;      // solution to p=q+t*d\n  vec3 n;       // normal\n};\n\nstruct Sphere {\n  vec3 p;       // centre\n  float r;      // radius\n};\n\nbool intersectSphere(Sphere s, Ray ray, out Hit hit[2]) {\n  vec3 p = s.p;\n  float r = s.r;\n  float c = length(p);\n  vec3 q = ray.q, d = ray.d;\n  // Formula for x^2 + 2Bx + C = 0\n  // |q + t*d - p|^2 = r^2\n  float B = dot(q-p,d);\n  float C = dot(q,q)-2.0*dot(q,p)+(c+r)*(c-r);\n  float D = B*B - C;\n  if (D < 0.0) return false;\n  D = sqrt(D);\n  float t0,t1;\n  if (B >= 0.0) {\n    t0 = -B-D; t1 = C/t0;\n  } else {\n    t1 = -B+D; t0 = C/t1;\n  }\n  hit[0] = Hit(t0,(q+t0*d-p)/r);\n  hit[1] = Hit(t1,-(q+t1*d-p)/r);\n  return true;\n}\n\nbool intersectScene(Ray r, out Hit hit[2]) {\n  Sphere s = Sphere(vec3(0),1.0);\n  if (intersectSphere(s,r,hit)) {\n    return true;\n  }\n  return false;\n}\n\nvec3 light;\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 solve(Ray r,vec2 uv) {\n  Hit hit[2];\n  vec3 c = vec3(0);\n  if (intersectScene(r,hit)) {\n    for (int i = 0; i < 2; i++) {\n      vec3 n = hit[i].n;\n      assert(dot(r.d,n) <= 0.0);\n      vec3 basecolor = getspherecolor(hit[i].n);\n      if (basecolor == vec3(0)) continue;\n      vec3 color = vec3(0);\n      float ambient = 0.5;\n      float diffuse = 0.5;\n      color += basecolor*ambient;\n      color += basecolor*diffuse*max(0.0,dot(light,n));\n      float specular = pow(max(0.0,dot(reflect(light,n),r.d)),5.0);\n      vec3 speccolor = basecolor; //vec3(1);\n      color += 1.0*specular*speccolor;\n      if (i == 1) color *= 0.25;\n      return color;\n    }\n  }\n  return c;\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_I = 73;\nconst int CHAR_M = 77;\nconst int CHAR_O = 79;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_V = 86;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90;\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nbool key(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nbool check = false;\nvoid assert(bool b) { if (!b) check = true; }\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  dorotate = !key(CHAR_R);\n  pcolorchange *= exp(-0.1*float(keycount(KEY_PAGE_UP)-keycount(KEY_PAGE_DOWN)));\n  depth = max(0,8+keycount(KEY_RIGHT)-keycount(KEY_LEFT));\n  gasketonly = key(CHAR_G);\n  docolor = !key(CHAR_C);\n  light = vec3(0.5,1.0,-1.0);\n  light = normalize(light);\n  light = transform(light);\n  vec3 p = vec3(0,0,-6);\n  p.z *= exp(-0.1*float(keycount(KEY_UP)-keycount(KEY_DOWN)));\n  p = transform(p);\n  vec3 col = vec3(0);\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 uv = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec3 r = vec3(uv,6);\n      r = transform(r);\n      r = normalize(r);\n      col += solve(Ray(p,r),uv);\n    }\n  }\n  fragColor = vec4(pow(col/(AA*AA),vec3(0.4545)),1);\n  if (check) fragColor = vec4(1,0,0,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}