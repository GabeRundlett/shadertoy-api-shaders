{
    "Shader": {
        "info": {
            "date": "1664443517",
            "description": "The boat is now generating a wave train, each approximated as planar,\nwith a wide distribution of wavelengths, each with their own propagation speed.\n\nWe visualise the crests of the wave trains.\nhit 'space' to show the accumulated wave.\n\n",
            "flags": 16,
            "hasliked": 0,
            "id": "stGBWh",
            "likes": 6,
            "name": "Kelvin wake visualisation",
            "published": 3,
            "tags": [
                "fluid",
                "shockwave",
                "shipwake",
                "machcone"
            ],
            "usePreview": 0,
            "username": "skal",
            "viewed": 292
        },
        "renderpass": [
            {
                "code": "// How does a ship wake form? Why are they 'universal'?\n//\n// A boat moving in deep water generates planar wave trains for\n// a distribution of wavelength, each having their own propagation\n// speed (/ Mach cone).\n// Accumulating these waves (hit 'space'!) shows the typical ship-wake,\n// called Kelvin wake.\n// It is a physical mini-wonder that this shape (basically, a caustic,\n// similar to your coffee mug's cardiod!) is relatively universal, independant\n// of shape and speed.\n// Changing the wavelength distribution (that is, taking the actual\n// shape of the boat, propeller, etc.) doesn't change the final\n// result much.\n//\n// See https://en.wikipedia.org/wiki/Wake_(physics)#Kelvin_wake_pattern\n//\n//  Some results:\n//    . wake angle is 2.asin(1/3) ~= 38.9¬∞\n//    . diverging wave angle is ~55¬∞\n//    . transverse stern waves have a maximal wavelength 2ùúã V^2 / g. \n//      This is used to evaluate the boat's speed V.\n//    \n//   Hope the vizualisation is telling!\n//   Use the 'space' key to see the full wave train accumulated, and\n//   mouse to change the scale.\n//\n//  See also: \n//    https://www.shadertoy.com/view/slKfWR <= Why do we approximate with planar waves?\n//    https://www.shadertoy.com/view/7ltfDS <= Inaccurate but fun visu\n//    https://www.youtube.com/watch?v=95sQcSulRFM  <= 5mins physics\n//    https://www.youtube.com/watch?v=0cr6vZKe6HI  <= bow waves can cancel stern waves!\n//    http://www.scullen.com.au/DSc/Publications/tuck_scullen_lazauskas_00e.pdf <= some maths\n//\n// skal/ (Pascal Massimino)\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// Some physics\nconst float V0 = 1.2;    // base boat speed [m/s]\nconst float g  = 9.81;   // gravity\nconst float k_min = g / (V0 * V0);   // the only physical constant that matters\n// Wavelength spectrum (basic)\nconst float L0 = 0.00;   // min wavelength [m]\nconst float NL = 30.;    // number of samples\n// Boat position\nconst vec2 boat = vec2(3.20, 0.00);\n// Colors\nconst vec3 ocean_col = vec3(.3, .5, .9);   // ocean background color\nconst vec3 boat_col  = vec3(.3, .7, .2);   // boat color (~green)\nconst vec3 shock_col = vec3(.6, .6, .1);   // wake-angle color (~yellow)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  bool show_waves = (texelFetch(iChannel0, ivec2(32, 0),0 ).x > 0.5);\n  vec2 uv = 2. * fragCoord / iResolution.yy - vec2(0.0, 1.0);  // y-screen = [-1, 1]\n  \n  float nL = NL;\n  if (show_waves) nL *= 100.;\n\n  float km = k_min * (1. + 3.7 * iMouse.x / iResolution.x);\n  float Lmax = 6.2831 / km;\n\n  // position relative to boat\n  vec2 r = boat - uv;\n  r = vec2(r.x, -abs(r.y));  // fold\n\n  // color mixing factors\n  float shock_mix = 0.;\n  float boat_mix = 1. - smoothstep(0.18, 0.19, length(r - vec2(0., 0.15)));  // boat\n\n  // Accumulate per-wavelength amplitude.\n  float acc = 0.5;\n  float progress = min(mod(iTime, 10.) * 0.3, 1.);\n  for (float i = 1.; i <= nL; ++i) {\n    float frac = i / nL;\n    if (frac > progress) break;\n    // sigmoid: sample more densely around 0. and 1.\n    // This sampling is really where the actual shape of the boat/propeller would matter!\n    frac = frac * (3. - 2. * frac); \n    float k0 = 6.2831 / mix(L0, Lmax, frac);\n\n    float c2_phi = km / k0;\n    float sin_th = sqrt(c2_phi);\n    float cos_th = sqrt(1. - c2_phi);\n    float phi = k0 * dot(r, vec2(sin_th, cos_th));\n    float wave = (phi >= 0.) ? cos(phi) : 0.;\n    if (show_waves) {\n      acc += 2. * wave / nL;  // accumulate wave trains\n    } else {\n      // represent wave crests with lines:\n      acc = max(acc, smoothstep(0.98, 1.0, wave));\n    }\n  }\n  \n  {  // Draw the limiting cone\n    float c_Mach = 1. / 3.;  // critical angle\n    // get the distance to the  cone\n    vec2 shock_n = vec2(c_Mach, sqrt(1. - c_Mach * c_Mach));\n    float d = abs(dot(r, shock_n));\n    shock_mix = 1. - smoothstep(0.001, .005, d);\n  }\n\n  // final mix\n  vec3 col = acc * ocean_col;\n  col = mix(col, shock_col, shock_mix);\n  col = mix(col, boat_col, boat_mix);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}