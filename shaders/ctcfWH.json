{
    "Shader": {
        "info": {
            "date": "1701172679",
            "description": "One real paradice. ;O)\nUse your mouse to rotate the dice!",
            "flags": 32,
            "hasliked": 0,
            "id": "ctcfWH",
            "likes": 1,
            "name": "PARADICE",
            "published": 3,
            "tags": [
                "raytracing",
                "dice",
                "transparancy"
            ],
            "usePreview": 0,
            "username": "samuelotherion",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "// global integer input\nI2\nI;\n\n// read vec4 from ram wia ivec2 address\nF4\nrd(I2 a) {\n\n    RE texelFetch(iChannel0, a, 0);\n}\n\n// read vec4 from ram via integer address\nF4\nrd(I1 a) {\n    \n    RE rd(I1toI2(a));\n}\n\n// some useful structurs\nstruct Cuboid {F3 pos, ext; M3 dir;};\nstruct Hit {I1 id; F1 dist; F2 uv; F3 norm;};\nstruct Camera {F3 pos, ray; M3 dir;};\n\nF3\ncol = F3(.41,.43,.41);\n\nB1\nhitCuboid(Camera cam, Cuboid cub, inout Hit f, inout Hit b) {\n    \n    \n    F3\n    ray = normalize(cam.dir * cam.ray),\n    dst = cam.pos - cub.pos;\n    \n    // check whether ray hits bounding spheroid\n    F1\n    rd = dot(ray, dst);\n\n    if(dot(cub.ext, cub.ext) - dot(dst, dst) + rd * rd < 0.) RF\n\n    Hit[2]\n    hit = Hit[2](\n        Hit(-1, 1e7, _.yy, _.yyy),\n        Hit(-1, 1e7, _.yy, _.yyy));\n\n    I1\n    i = -1;\n    \n    M3\n    xyz = M3(cub.dir[X] * cub.ext.x, cub.dir[Y] * cub.ext.y, cub.dir[Z] * cub.ext.z),\n    xyz_,\n    _zyx;\n\n    F3\n    sol;\n    \n    F2\n    sol_uv;\n    \n    for(I1 dim = 0; dim < 3; ++ dim) {\n    \n        for(F1 sol_f = -1.; sol_f < 2.; sol_f += 2.) { \n    \n            xyz_      = xyz;\n            xyz_[dim] = -ray;\n            _zyx      = inverse(xyz_);\n    \n            sol       = _zyx * (dst + sol_f * xyz[dim]);\n            sol_uv    = F2(sol[(dim + 1) % 3], sol[(dim + 2) % 3]);\n            \n            if(i < 1 && 0. < sol[dim] && all(lessThanEqual(abs(sol_uv), _.ww))) {\n\n                ++ i;\n                hit[i].id   = 2 * dim + I1(.5 + .5 * sol_f);\n                hit[i].dist = sol[dim];\n                hit[i].uv   = sol_uv;\n                hit[i].norm = -sol_f * cub.dir[dim];\n            }\n        }\n    }\n    \n    if(hit[0].dist < hit[1].dist) {\n        \n        f = hit[0];\n        b  = hit[1];\n    } else {\n        \n        f = hit[1];\n        b  = hit[0];\n    }\n    \n    RE 1 == i;\n}\n\nVO\nmainImage(out F4 o, F2 xy) {\n\n    F2\n    R  = 1. / iResolution.xy,\n    uv = 2. * (xy * R - .5) * F2(iResolution.x * R.y, 1.);\n    \n    Camera\n    //           position         ray                    coord system\n    cam = Camera(F3(0., 0., 50.), normalize(F3(uv, -3)), ID);\n    \n    // Cuboid local coordinate system rotating around a rotating vector red from Buffer A at Address DIR\n    M3\n    cs = M3(\n        rd(DIR + 0).xyz,\n        rd(DIR + 1).xyz,\n        rd(DIR + 2).xyz);\n    \n    Cuboid\n    //          position      extents             coord system    \n    c0 = Cuboid(F3(0, 0, 5), F3( +9., +9., +9.), cs);\n    \n    // background color\n    o = F4(.02, .03, .05, 1);\n    \n    Hit\n    f,\n    b;\n    \n    if(hitCuboid(cam, c0, f, b)) {\n    \n        F1\n        fac = .2;\n\n        if((\n            (f.id == 0 && \n             (.05 < dot(F2(.00) - f.uv, F2(.00) - f.uv))) ||\n            (f.id == 2 && \n             (.05 < dot(F2(.50) - f.uv, F2(.50) - f.uv) &&\n              .05 < dot(F2(-.50) - f.uv, F2(-.50) - f.uv))) ||\n            (f.id == 4 && \n             (.05 < dot(F2(-.50) - f.uv, F2(-.50) - f.uv)) &&\n              .05 < dot(F2(0.00) - f.uv, F2(0.00) - f.uv) &&\n              .05 < dot(F2(+.50) - f.uv, F2(+.50) - f.uv)) ||\n            (f.id == 5 && \n             (.05 < dot(F2(-.5,-.5) - f.uv, F2(-.5,-.5) - f.uv)) &&\n              .05 < dot(F2(-.5,+.5) - f.uv, F2(-.5,+.5) - f.uv) &&\n              .05 < dot(F2(+.5,+.5) - f.uv, F2(+.5,+.5) - f.uv) &&\n              .05 < dot(F2(+.5,-.5) - f.uv, F2(+.5,-.5) - f.uv)) ||\n            (f.id == 3 && \n             (.05 < dot(F2(-.5,-.5) - f.uv, F2(-.5,-.5) - f.uv)) &&\n              .05 < dot(F2(-.5,+.5) - f.uv, F2(-.5,+.5) - f.uv) &&\n              .05 < dot(F2(+.5,+.5) - f.uv, F2(+.5,+.5) - f.uv) &&\n              .05 < dot(F2(+.5,-.5) - f.uv, F2(+.5,-.5) - f.uv) &&\n              .05 < dot(F2(+.0,+.0) - f.uv, F2(+.0,+.0) - f.uv)) ||\n            (f.id == 1 && \n             (.05 < dot(F2(-.5,-.5) - f.uv, F2(-.5,-.5) - f.uv)) &&\n              .05 < dot(F2(-.5,+.5) - f.uv, F2(-.5,+.5) - f.uv) &&\n              .05 < dot(F2(+.5,+.5) - f.uv, F2(+.5,+.5) - f.uv) &&\n              .05 < dot(F2(+.5,-.5) - f.uv, F2(+.5,-.5) - f.uv) &&\n              .05 < dot(F2(-.5,+.0) - f.uv, F2(-.5,+.0) - f.uv) &&\n              .05 < dot(F2(+.5,+.0) - f.uv, F2(+.5,+.0) - f.uv))\n        ))\n        \n            if(!(\n                (f.id == 0 && \n                 (.05 < dot(F2(.00) - b.uv, F2(.00) - b.uv))) ||\n                (f.id == 2 && \n                 (.05 < dot(F2(.50) - b.uv, F2(.50) - b.uv) &&\n                  .05 < dot(F2(-.50) - b.uv, F2(-.50) - b.uv))) ||\n                (f.id == 4 && \n                 (.05 < dot(F2(-.50) - b.uv, F2(-.50) - b.uv)) &&\n                  .05 < dot(F2(0.00) - b.uv, F2(0.00) - b.uv) &&\n                  .05 < dot(F2(+.50) - b.uv, F2(+.50) - b.uv)) ||\n                (f.id == 5 && \n                 (.05 < dot(F2(-.5,-.5) - b.uv, F2(-.5,-.5) - b.uv)) &&\n                  .05 < dot(F2(-.5,+.5) - b.uv, F2(-.5,+.5) - b.uv) &&\n                  .05 < dot(F2(+.5,+.5) - b.uv, F2(+.5,+.5) - b.uv) &&\n                  .05 < dot(F2(+.5,-.5) - b.uv, F2(+.5,-.5) - b.uv)) ||\n                (f.id == 3 && \n                 (.05 < dot(F2(-.5,-.5) - b.uv, F2(-.5,-.5) - b.uv)) &&\n                  .05 < dot(F2(-.5,+.5) - b.uv, F2(-.5,+.5) - b.uv) &&\n                  .05 < dot(F2(+.5,+.5) - b.uv, F2(+.5,+.5) - b.uv) &&\n                  .05 < dot(F2(+.5,-.5) - b.uv, F2(+.5,-.5) - b.uv) &&\n                  .05 < dot(F2(+.0,+.0) - b.uv, F2(+.0,+.0) - b.uv)) ||\n                (f.id == 1 && \n                 (.05 < dot(F2(-.5,-.5) - b.uv, F2(-.5,-.5) - b.uv)) &&\n                  .05 < dot(F2(-.5,+.5) - b.uv, F2(-.5,+.5) - b.uv) &&\n                  .05 < dot(F2(+.5,+.5) - b.uv, F2(+.5,+.5) - b.uv) &&\n                  .05 < dot(F2(+.5,-.5) - b.uv, F2(+.5,-.5) - b.uv) &&\n                  .05 < dot(F2(-.5,+.0) - b.uv, F2(-.5,+.0) - b.uv) &&\n                  .05 < dot(F2(+.5,+.0) - b.uv, F2(+.5,+.0) - b.uv))\n            ))\n\n            o = \n                  .75 * F4(col * (fac        * clamp(dot(f.norm, F3(0, 0, +1)), 0., 1.)), 1.) + \n                  .75 * F4(col * ((1. - fac) * clamp(dot(b.norm, F3(0, 0, -1)), 0., 1.)), 1.);\n\n            else o = \n                  .75 * F4(col * (fac        * clamp(dot(f.norm, F3(0, 0, +1)), 0., 1.)), 1.) + \n                  .35 * F4(col * ((1. - fac) * clamp(dot(b.norm,  F3(0, 0, -1)), 0., 1.)), 1.);\n\n        else o = F4(col,1.)*((1. - fac) * clamp(dot(f.norm, F3(0, 0, +1)), 0., 1.)); \n    } \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define VO void\n#define B1 bool\n\n#define F1 float\n#define F2 vec2\n#define F3 vec3\n#define F4 vec4\n#define I1 int\n#define I2 ivec2\n\n#define M3 mat3x3\n\n#define X  0\n#define Y  1\n#define Z  2\n\n#define RE return\n#define RF RE false;\n#define RT RE true;\n\n#define I1toI2(S) I2(S & 0xf, (S >> 4) & 0xf)\n#define I2toI1(V) (V.x + (V.y << 4))\n\n// addresses in Buffer A accessable via rd(DIR + {0,1,2}) \n#define MOUSE 0 \n#define DIR   1 \n#define END   4 \n\nconst F4\n_ = F4(-1., 0., .5, 1.);\n\nconst M3\nID = M3(_.wyy, _.ywy, _.yyw);\n\n// rotate vector u around vector axe by angle alpha\nF3\nrot(F3 u, F1 alpha, F3 axe) {\n\n    axe = normalize(axe);\n    \n    F3\n    z = dot(u, axe) * axe,\n    x = u - z,\n    y = cross(axe, x);\n    \n    RE cos(alpha) * x + sin(alpha) * y + z;\n}\n\n// rotate coordinate system xyz around vector axe by angle alpha\nM3\nrot(M3 xyz, F1 alpha, F3 axe) {\n\n    axe = normalize(axe);\n    \n    xyz[X] = rot(xyz[X], alpha, axe);\n    xyz[Y] = rot(xyz[Y], alpha, axe);\n    xyz[Z] = rot(xyz[Z], alpha, axe);\n    \n    RE xyz;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// global Output \nF4\nO;\n\n//global Integer Input\nI2\nI;\n\n// read from ivec2 address a\nF4\nrd(I2 a) {\n\n    RE texelFetch(iChannel0, a, 0);\n}\n\n\n// read from int address a\nF4\nrd(I1 a) {\n    \n    RE rd(I1toI2(a));\n}\n\n// write to ivec2 address a the vec4 value v\nB1\nwt(I2 a, F4 v) {\n    \n    if(a.x == I.x && a.y == I.y) {\n    \n        O = v;\n        \n        RT\n    }\n    \n    RF\n}\n\n// write to int address a the vec4 value v\nB1\nwt(I1 a, F4 v) {\n    \n    RE wt(I1toI2(a), v);\n}\n\n\nVO\nmainImage(out F4 o, F2 f) {\n\n    // set globel input I\n    I = I2(f);\n    \n    // read color from Buffer A and store to globel output O\n    O = rd(I);\n    \n    // use first 16 pixel of the first row of Buffer A as RAM\n    // that means if where not inside the RAM coords, we are done here and return fragmentColor o = O.\n    if(15 < I.x || 0 < I.y) {\n    \n        o = O;\n    \n        RE;\n    }\n    \n    // if the first frame is rendered\n    // Buffer A is undefined - RAM is not set\n    // init RAM\n    if(iFrame < 1) {\n        \n        // init RAM and return o = O\n        wt(MOUSE,   F4(-1));\n        wt(DIR + 0, F4(ID[X], 0));\n        wt(DIR + 1, F4(ID[Y], 0));\n        wt(DIR + 2, F4(ID[Z], 0));\n        \n        o = O;\n        \n        RE;\n    }\n\n    // if mouse button is not pressed\n    // write -1,-1,-1,-1 to RAM at address MOUSE and return o = O\n    if(iMouse.z <= 0.) {\n    \n        wt(MOUSE, F4(-1));\n        \n        o = O;\n        \n        RE;\n    }\n    \n    // read iMouse from Buffer A at address MOUSE and store it in m\n    F4\n    m = rd(MOUSE);\n    \n    // if mouse button is pressed and one of the coords has changed\n    if(m.z == iMouse.z && (iMouse.y != m.y || iMouse.x != m.x)) {\n\n        // create from mouse coord difference a rotation axis\n        F4\n        axis = F4(normalize(F3(m.y - iMouse.y, iMouse.x - m.x, 0)),  .01 * length(iMouse.yx - m.yx));\n\n        // read the coords system of the cube\n        M3\n        dir = M3(\n            rd(DIR + X).xyz,\n            rd(DIR + Y).xyz,\n            rd(DIR + Z).xyz\n        );\n\n        // rotate the cubes coords system by angle axis.w around axis.xyz\n        dir = rot(dir, axis.w, axis.xyz);\n\n        // write new cubes 3d coords to RAM as 3 x vec4\n        wt(DIR + X, F4(dir[X], 0));\n        wt(DIR + Y, F4(dir[Y], 0));\n        wt(DIR + Z, F4(dir[Z], 0));\n    }\n    \n    // write current mouse state to RAM at address MOUSE\n    wt(MOUSE, iMouse);\n\n    // return o = O\n    o = O;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}