{
    "Shader": {
        "info": {
            "date": "1665320223",
            "description": "Todo: Better Smoke",
            "flags": 0,
            "hasliked": 0,
            "id": "NtVBWK",
            "likes": 6,
            "name": "Fire/Smoke Test ",
            "published": 3,
            "tags": [
                "test",
                "fire",
                "help"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "float fbm( in vec2 x ,int I, float v)\n{    \n    float t = 0.0;\n    float amp = 0.;\n    for( int i=1; i<I; i++ )\n    {\n        float f = pow( 2., float(i) );\n        float a = pow( f, -.75 );\n        amp = 10.*step(3., float(i));\n        t += a*noise_perso(f*x+amp + vec2(0., -iTime*v));\n    }\n    return t*1.-.4;\n}\n\n\nfloat fbm_smoke( in vec2 x)\n{    \n    float t = 0.0;\n    float amp = 0.;\n    for( int i=1; i<8; i++ )\n    {\n        float f = pow( 2., float(i) );\n        float a = pow( f, -.75 );\n        t += a*noise(f*x- vec2(0., iTime*1.));\n    }\n    return t*1.-.4;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2.*fragCoord.xy - iResolution.xy ) / iResolution.y;\n    uv.y += .7;\n\n\n    uv *= 1.;\n    \n    \n    // Rendering smoke (simple FBM)\n    vec2 st = uv/2.*(vec2(2., 1.));\n    float smoke = fbm_smoke(st);\n    vec3 a = vec3(0., 0., 0.);\n    vec3 b = vec3(.2, .2, .2);\n    vec3 c = vec3(.9, .75, .6);  \n    vec3 smoke_col =  mix3ColorGradient(smoke*2., a, b, c)*(1./uv.y);\n    \n\n    // Rendering fire (multiple FBM to create some cool aspect)        \n    st = uv*vec2(2., .2);\n    float flamme = 3.*fbm(st+ fbm(st, 4, 8.), 4, 8.);\n    st = uv*vec2(1., 1.);\n    flamme = 2.*fbm(st + fbm(st, 3, 8.), 3, 8.);\n    st = uv*vec2(.1, .25);        \n    flamme += (fbm(st+ fbm(st, 5, 2.), 5, 2.)*.7+.3)*(1.-uv.y);\n    flamme = pow(flamme, 2.*(uv.y+.05)); // pow in function of uv.y in order to cancel fire power when elevating\n    a = vec3(0., 0., 0.);\n    b = vec3(.7, .1, .1);\n    c = vec3(0.9, 0.9, .5);\n    \n    vec3 flamme_col = mix3ColorGradient(flamme*2., a, b, c); // fire color   \n    float flamme_mask = smoothstep(0., 1., flamme_col.x); // Flamme mask (complete screen with smoke or with fire)\n    \n    flamme_col = clamp(flamme_col, 0.0, 1.0);\n    smoke_col = clamp(smoke_col, 0.0, 1.0);\n    fragColor = vec4(mix(vec3(0.), flamme_col, flamme_mask),1.0);\n    //fragColor = vec4((1.-flamme_mask)*smoke_col,1.0); // only smoke  -> work as I want \n    //fragColor = vec4((flamme_mask)*flamme_col,1.0);  // only fire -> work as I want\n    //fragColor = vec4((flamme_mask)*flamme_col+(1.-flamme_mask)*smoke_col,1.0); // The sum doesn't work \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define N_tile 30.\n\nvec3 mix3ColorGradient(float ratio, vec3 a, vec3 b, vec3 c){\n    return\n        mix(\n            mix(a, b, ratio/.5), mix(b, c, (ratio - .5)/.5), \n            step(.5, ratio));\n\n}\n\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(175.1,311.7)),\n             dot(p,vec2(4260.5,7052.3)));\n    return fract(sin(p+4551.)*184.5453);\n}\n\nvec2 hash2( vec2 p ) \n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    float n = 111.0*p.x + 113.0*p.y;\n    return fract(n*fract(k*n));\n}\nfloat noise_perso(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = hash(i).x;\n    float b = hash(i + vec2(1.0, 0.0)).x;\n    float c = hash(i + vec2(0.0, 1.0)).x;\n    float d = hash(i + vec2(1.0, 1.0)).x;\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\n\nvec2 hash4( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(nrand(p), nrand(p.yx));\n    return fract(sin(p+455.)*18.5453);\n}\n\n\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = hash4(i).x;\n    float b = hash4(i + vec2(1.0, 0.0)).x;\n    float c = hash4(i + vec2(0.0, 1.0)).x;\n    float d = hash4(i + vec2(1.0, 1.0)).x;\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}