{
    "Shader": {
        "info": {
            "date": "1699878088",
            "description": "Subtle VHS scanline effect with film grain, vertical band, and some glitchiness.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtGyzR",
            "likes": 6,
            "name": "VHS Scanlines & FX",
            "published": 3,
            "tags": [
                "scanlines",
                "glitch",
                "vhs",
                "grainy"
            ],
            "usePreview": 1,
            "username": "mcstuffings",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "// VHS Scanline Effect\n// by McStuffings 2023\n// License: MIT\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Scanline settings\n    float blendFactor = 0.1; // Use lower values for subtle scanline effect.\n    float scanlineHeight = 4.0;\n    float scanlineIntensity = 0.25;\n    float scrollSpeed = 16.0; // Use +/- values for up/down movement.\n    vec3 color = vec3(1.0, 1.0, 1.0);\n    \n    // Grain settings\n    float grainIntensity = 2.0;\n    vec2 grainSeed = vec2(12.9898, 78.233) + iTime * 0.1; // Varying the seed over time\n    \n    // Glitch settings\n    // Use higher values in this section for extreme effect.\n    float glitchProbability = 0.4;\n    float glitchIntensityX = 0.001; // Intensity of the horizontal jitter\n    float glitchIntensityY = .003; // Intensity of the vertical jitter\n    \n    // Vertical Band settings\n    float bandSpeed = 0.2;\n    float bandHeight = 0.01;\n    float bandIntensity = 0.2;\n    float bandChoppiness = 0.2;\n    float staticAmount = 0.02;\n    float warpFactor = .005;\n    float chromaAmount = .2;\n    \n    // Moving VHS effect\n    float scanline = sin((uv.y * iResolution.y - iTime * scrollSpeed) * (1.0/scanlineHeight));\n    vec3 vhsColor = color * scanline * scanlineIntensity;\n\n    // Grain effect\n    float grain = fract(sin(dot(fragCoord * uv, grainSeed)) * 43758.5453);\n    vhsColor += grain * grainIntensity;\n\n    // Glitch Effect\n    if (fract(iTime) < glitchProbability) {\n        float glitchOffsetX = (fract(sin(iTime * 12.9898) * 43758.5453) - 0.5) * glitchIntensityX;\n        float glitchOffsetY = (fract(cos(iTime * 78.233) * 43758.5453) - 0.5) * glitchIntensityY;\n        uv += vec2(glitchOffsetX, glitchOffsetY);\n    }\n\n    // VHS Band\n    float bandPos = fract(iTime * bandSpeed);\n    float bandNoise = fract(sin(dot(uv * iResolution.xy, vec2(12.9898, 78.233))) * 43758.5453);\n\n    if (abs(uv.y - bandPos) < bandHeight) {\n        // Add static with choppiness\n        float randomStatic = bandNoise * bandChoppiness;\n        vhsColor += vec3(randomStatic) * staticAmount;\n\n        // Add warp effect with choppiness\n        uv.x += sin(uv.y * iResolution.y * 10.0 + randomStatic) * warpFactor;\n\n        // Chromatic aberration with choppiness\n        vec3 chromaColor = vec3(\n            texture(iChannel0, uv + vec2(chromaAmount * randomStatic, 0.0)).r,\n            texture(iChannel0, uv).g,\n            texture(iChannel0, uv - vec2(chromaAmount * randomStatic, 0.0)).b\n        );\n\n        // Mix chromatic aberration with reduced intensity\n        float adjustedIntensity = bandIntensity * (1.0 - randomStatic);\n        vhsColor = mix(vhsColor, chromaColor, adjustedIntensity);\n    }\n\n    // Original color before applying scanlines (but after the glitch, noise, and vertical band)\n    // If you have an input texture, fetch the color from the texture here\n    vec3 originalColor = texture(iChannel0, uv).rgb;\n\n    // Blend the original color with the VHS effect\n    vec3 finalColor = mix(originalColor, vhsColor, blendFactor);\n\n    fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}