{
    "Shader": {
        "info": {
            "date": "1643986527",
            "description": "Experimented with the following gradient distance functions.\nhttps://iquilezles.org/articles/distgradfunctions2d/distgradfunctions2d.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "NsSyDy",
            "likes": 15,
            "name": "distgrad test",
            "published": 3,
            "tags": [
                "gradient",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "// thx iq! https://iquilezles.org/articles/distgradfunctions2d\n\n#define R(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define a(n) n/min(iResolution.y,iResolution.x)\n#define S(p,d,b)smoothstep(a(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define BASE_COLOR vec3(0.7,0.3,0.3)\n\n// IQ's 3D noise function. It's faster than the FBM and enough for me to design.\n// The compile is also faster.\nfloat noise3d( vec3 p )\n{\n    p*=0.3;\n\tconst vec3 s = vec3(27, 111, 57);\n\tvec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); \n    h = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\nvec3 sdgMin( in vec3 a, in vec3 b )\n{\n    return (a.x<b.x)?a:b;\n}\n\nvec3 sdgSmoothMin( in vec3 a, in vec3 b, in float k )\n{\n    float h = max(k-abs(a.x-b.x),0.0);\n    float m = 0.25*h*h/k;\n    float n = 0.50*  h/k;\n    return vec3( min(a.x,  b.x) - m, \n                 mix(a.yz, b.yz, (a.x<b.x)?n:1.0-n) );\n}\n\nvec3 sdgCircle( in vec2 p, in float r ) \n{\n    float d = length(p);\n    return vec3( d-r, p/d );\n}\n\nvec3 sdgBox( in vec2 p, in vec2 b )\n{\n    vec2 w = abs(p)-b;\n    vec2 s = vec2(p.x<0.0?-1:1,p.y<0.0?-1:1);\n    \n    float g = max(w.x,w.y);\n\tvec2  q = max(w,0.0);\n    float l = length(q);\n    \n    return vec3(   (g>0.0)?l   : g,\n                s*((g>0.0)?q/l : ((w.x>w.y)?vec2(1,0):vec2(0,1))));\n}\n\nvec3 monogramShape1(vec2 p){\n    p.y*=0.8;\n    vec3 d = sdgCircle(p-vec2(0.025,0.0),0.05);\n    vec3 d2 = sdgCircle(p+vec2(0.025,0.0),0.05);\n    d.x = max(d2.x,d.x);\n    return vec3(d.x,d.yz+d2.yz);\n}\n\nfloat monogramShapeMask(vec2 p){\n    p.y*=0.8;\n    float d = length(p-vec2(0.025,0.0))-0.05;\n    float d2 = length(p+vec2(0.025,0.0))-0.05;\n    return max(d2,d);\n}\n\nvec3 monogramIcon1(vec2 p, vec3 col){\n    p*=R(radians(-iTime*12.0));\n    vec2 prevP = p;\n    p*=R(radians(45.0));\n    p = abs(p)-0.037;\n    float d = length(p)-0.04;\n    d = max(-(length(prevP)-0.025),d);\n    p = prevP;\n    vec3 mask = sdgCircle(p,0.11);\n    mask.x = max(-d,mask.x);\n    \n    col = mix(col,vec3(mask.yz,1.)*BASE_COLOR*noise3d(vec3(p,1.0)*300.0)*1.25,S(prevP,mask.x,0.0));\n    return col;\n}\n\nvec3 monogramIcon2(vec2 p, vec3 col){\n    vec2 prevP = p;\n    p.y = abs(p.y)-0.05;\n    vec3 d = monogramShape1(p);\n    d.x = max(-(length(prevP)-0.015),d.x);\n    col = mix(col,vec3(d.yz,1.)*BASE_COLOR*noise3d(vec3(p,1.0)*300.0)*1.25,S(prevP,d.x,0.0));\n    p = prevP;\n    \n    p.x = abs(p.x)-0.05;\n    p*=R(radians(90.0));\n    d = monogramShape1(p);\n    \n    d.x = max(-(length(prevP)-0.015),d.x);\n    \n    col = mix(col,vec3(d.yz,1.)*BASE_COLOR*noise3d(vec3(p,1.0)*300.0)*1.25,S(prevP,d.x,0.0));\n    return col;\n}\n\nvec3 monogramIcon3(vec2 p, vec3 col){\n    p*=R(radians(iTime*10.0));\n    vec2 prevP = p;\n    \n    p.y = abs(p.y)-0.05;\n    float maskD = monogramShapeMask(p);\n    \n    p = prevP;\n    \n    p.x = abs(p.x)-0.05;\n    p*=R(radians(90.0));\n    float d2 = monogramShapeMask(p);\n    \n    maskD = min(d2,maskD);\n    \n    p = prevP;\n    p*=R(radians(45.0));\n    vec3 d = sdgBox(p,vec2(0.1));\n    p.y=abs(p.y)-0.38;\n    float maskD2 = length(p)-0.3;\n    d.x = max(-maskD2,d.x);\n    p = prevP;\n    p*=R(radians(45.0));\n    p.x=abs(p.x)-0.38;\n    maskD2 = length(p)-0.3;\n    d.x = max(-maskD2,d.x);\n    \n    d.x = max(-maskD,d.x);\n    \n    col = mix(col,vec3(d.yz,0.5)*BASE_COLOR*noise3d(vec3(p,1.0)*300.0)*1.25,S(prevP,d.x,0.0));\n    \n    p = prevP;\n    \n    d = sdgCircle(p,0.015);\n    col = mix(col,vec3(d.yz,0.5)*BASE_COLOR*noise3d(vec3(p,1.0)*300.0)*1.25,S(prevP,d.x,0.0));\n    \n    return col;\n}\n\nvec3 lvlogo(vec2 p, vec3 col){\n    vec2 prevP = p;\n    vec3 d = sdgBox(p-vec2(0.0,0.18),vec2(0.06,0.02));\n    p*=R(radians(25.0));\n    vec3 d2 = sdgBox(p-vec2(-0.065,0.0),vec2(0.025,0.15));\n    \n    d = sdgSmoothMin(d,d2,0.03);\n    p = prevP;\n    \n    d2 = sdgBox(p-vec2(-0.02,-0.12),vec2(0.16,0.025));\n    d = sdgSmoothMin(d,d2,0.03);\n    \n    p*=R(radians(25.0));\n    d2 = sdgBox(p-vec2(0.16,-0.02),vec2(0.015,0.05));\n    d = sdgSmoothMin(d,d2,0.03);\n    p = prevP;\n    \n    p.x = abs(p.x)-0.135;\n    d2 = sdgBox(p-vec2(0.0,0.23),vec2(0.05,0.02));\n    d = sdgMin(d,d2);\n    p = prevP;\n    \n    p*=R(radians(-25.0));\n    d2 = sdgBox(p-vec2(-0.03,0.1),vec2(0.025,0.16));\n    p = prevP;\n    d = sdgSmoothMin(d,d2,0.015);\n    \n    p*=R(radians(25.0));\n    d2 = sdgBox(p-vec2(0.03,0.1),vec2(0.015,0.16));\n    d = sdgSmoothMin(d,d2,0.02);\n    p = prevP;\n    d.x = max(-B(p-vec2(0.0,-0.08),vec2(0.05,0.01)),d.x);\n    \n    col = mix(col,vec3(d.yz,0.5)*BASE_COLOR*noise3d(vec3(p,1.0)*300.0)*1.25,S(prevP,d.x,0.0));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    p.y+=iTime*0.1;\n    \n    vec2 prevP = p;\n    \n    vec3 col = vec3(0.5,0.2,0.1)*noise3d(vec3(p,p.x)*1000.0)*2.5;\n    p.y-=0.4;\n    p = mod(p,0.8)-0.4;\n    col = monogramIcon1(p,col);\n    p = prevP;\n    p = mod(p,0.4)-0.2;\n    col = monogramIcon2(p,col);\n    p = prevP;\n    p = mod(p,0.8)-0.4;\n    col = monogramIcon3(p,col);\n    p = prevP;\n    p-=0.4;\n    p = mod(p,0.8)-0.4;\n    col = monogramIcon3(p,col);\n    p = prevP;\n    \n    p-=0.8;\n    p.x-=0.4;\n    p.y+=0.04;\n    p = mod(p,0.8)-0.4;\n    p*=1.3;\n    col = lvlogo(p,col);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}