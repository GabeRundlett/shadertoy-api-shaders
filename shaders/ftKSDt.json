{
    "Shader": {
        "info": {
            "date": "1641516725",
            "description": "// Stairs using IQ's proper distance :)",
            "flags": 0,
            "hasliked": 0,
            "id": "ftKSDt",
            "likes": 4,
            "name": "stairs3D",
            "published": 3,
            "tags": [
                "sdf",
                "stairs",
                "repeat"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "// Stairs using IQ's proper distance :) - https://www.shadertoy.com/view/ftVSDd\n/*\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nfloat stairs(vec2 p1)\n{\n    p1.y += 1.5;\n    float stepheight = 0.3;\n\n    float lim = 6.f; // 6 repeats either side...\n    float d = 1000.0;\n \n     for (float xx=-1.0;xx<=1.0;xx+=1.0) // is this referred to as 3tap?\n     {\n        vec2 pp = p1;\n        float id = clamp(floor(pp.x+xx),-lim,lim);\n        pp.x -= id+0.5;\n        pp.y -= id*stepheight;\n        float d1 = sdBox(pp,vec2(0.5,2.5+(id*stepheight)));\n        d = min(d,d1);\n     }\n    return d*0.9;\n}\n*/\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdStairs( in vec2 p, in float s, in float n )\n{\n    // constant for a given shape\n    const float kS2 = sqrt(2.0);\n    float w = 2.0*n+1.0;\n    \n    // pixel dependent computations\n    p = vec2( abs(p.y+p.x), p.y-p.x ) * (0.5/s);\n\n    float x1 = p.x-w;\n    float x2 = abs(p.x-2.0*min(round(p.x/2.0),n))-1.0;\n    \n    float d1 = dot2( vec2(x1, p.y) + clamp(0.5*(-x1-p.y), 0.0, w  ) );\n    float d2 = dot2( vec2(x2,-p.y) + clamp(0.5*(-x2+p.y), 0.0, 1.0) );\n\n    return sqrt(min(d1,d2)) *\n           sign(max(x1-p.y,(x2+p.y)*kS2)) *\n           s*kS2;\n}\nfloat opExtrusion( in vec3 p, float dd, in float h )\n{\n    float d = dd;\n    vec2 w = vec2( d, abs(p.y) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n\nvec2 opRevolution( in vec3 p, float w )\n{\n    return vec2( length(p.xz) - w, p.y );\n}\n\n\nfloat map( in vec3 pos )\n{\n    float d1 = sdStairs(pos.xy+vec2(8.0,0.0),0.5,4.0);\n    d1 = opExtrusion(pos.xzy,d1,3.0);\n    \n    float d = sdStairs( opRevolution(pos-vec3(8.0,0.0,0.0),5.0)*vec2(-1.0,1.0), 0.5,4.0)    ;\n    d = min(d,d1);\n    \n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 20.0*cos(an), 8.0, 20.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 50.0;\n        float t = 0.0;\n        for( int i=0; i<128; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}