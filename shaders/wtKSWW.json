{
    "Shader": {
        "info": {
            "date": "1582755521",
            "description": "Left : computed with 32 bit fixed point arithmetic\nRight : computed with 32 bit floating point arithmetic",
            "flags": 0,
            "hasliked": 0,
            "id": "wtKSWW",
            "likes": 9,
            "name": "Mandelbrot, Fixed vs Float",
            "published": 3,
            "tags": [
                "mandelbrot",
                "fixedpoint"
            ],
            "usePreview": 0,
            "username": "ockiller",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "// Number of bits reserved for the fractional part\n#define SHIFT 28u\n\nint   initFixed(float x) {return int(x * float(1u << SHIFT));}\nivec2 initFixed(vec2  v) {return ivec2(initFixed(v.x), initFixed(v.y));}\n\n// Fixed point squaring\nint squareFixed(int a) {\n    uint ua = uint(abs(a));\n    uint ah = ua >> 16u;\n    uint al = ua & 0xFFFFu;\n    return int((ah * ah << 32u - SHIFT) + (ah * al >> SHIFT - 17u) + (al * al >> SHIFT));\n}\nivec2 squareFixed(ivec2 v) {return ivec2(squareFixed(v.x), squareFixed(v.y));}\n\nvoid mainImage(out vec4 O, in vec2 u) {\n    float whiteLine = (0.5 * sin(iTime) + 0.5) * iResolution.x;\n    vec2 U = (2.0 * u - iResolution.xy) / iResolution.y;\n    float zoom = 8e-7;\n    vec2 Coord = vec2(-0.743644, 0.1318255);\n    float maxIters = 3072.0, nbIters = 0.0;\n    \n    if (u.x < whiteLine) {\n        // Fixed point version\n\t    ivec2 C = initFixed(U * zoom) + initFixed(Coord); // more precise doing that way\n        ivec2 Z = C;\n\n        // Check divergence against a square (not circle) of size 4\n        // Numbers can be kept smaller and we can be more aggressive with SHIFT, before getting overflows\n        while (nbIters < maxIters && all(lessThan(abs(Z), initFixed(vec2(2))))) {\n            ivec2 Z2 = squareFixed(Z);\n            Z = ivec2(Z2.x, squareFixed(Z.x + Z.y) - Z2.x) - Z2.yy + C;\n            nbIters++;\n        }\n    } else {\n        // Floating point version\n\t    vec2 C = U * zoom + Coord;\n        vec2 Z = C;\n\n        while (nbIters < maxIters && all(lessThan(abs(Z), vec2(2)))) {\n            Z = vec2(Z.x * Z.x - Z.y * Z.y, 2.0 * Z.x * Z.y) + C;\n            nbIters++;\n        }\n    }\n\n    // Coloring\n    float t = nbIters / maxIters;\n    O.rgb = nbIters < maxIters ? 0.5 - 0.5 * cos(6.2831853 * (t + vec3(-0.1, 0.0, 0.1))) : vec3(0.0);\n        \n    if (abs(u.x - whiteLine) < 1.0)\n    \tO.rgb = vec3(1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}