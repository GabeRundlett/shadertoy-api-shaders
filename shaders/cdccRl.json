{
    "Shader": {
        "info": {
            "date": "1695324560",
            "description": "CC0: Oversaturated web\nBit of tinkering thursday night\nNot entirely happy with the colors but good enough for now\nThis a deriative of BigWing's: https://www.shadertoy.com/view/lscczl",
            "flags": 64,
            "hasliked": 0,
            "id": "cdccRl",
            "likes": 33,
            "name": "Oversaturated web",
            "published": 3,
            "tags": [
                "planes",
                "web"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 986
        },
        "renderpass": [
            {
                "code": "// CC0: Oversaturated web\n//  Bit of tinkering thursday night\n//  Not entirely happy with the colors but good enough for now\n//  This a deriative of BigWing's: https://www.shadertoy.com/view/lscczl\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define ROT(a)     mat2(cos(a), sin(a), -sin(a), cos(a))\n#define OFF6(n)    (vec2(1.0, 0.0)*ROT(n*tau/6.))\n\n#define BEZIER\nconst float\n  pi        = acos(-1.)\n, tau       = 2.*pi\n, planeDist = .5\n, furthest  = 6.\n, fadeFrom  = 4.\n, cutOff    = .975\n;\nconst vec3  L  = \n  vec3(0.299, 0.587, 0.114)\n;\n\nconst vec2 \n  pathA = vec2(.31, .41)\n, pathB = vec2(sqrt(2.0), 1.0)\n;\n\nconst vec4 \n  U = vec4(0, 1, 2, 3)\n  ;\n  \nconst vec2 off6[6] = vec2[6](\n    OFF6(0.)\n  , OFF6(1.)\n  , OFF6(2.)\n  , OFF6(3.)\n  , OFF6(4.)\n  , OFF6(5.)\n  ); \n\nconst vec2 noff6[6] = vec2[6](\n    vec2(-1.0, 0.0)\n  , vec2(-0.5, 0.5)\n  , vec2( 0.5, 0.5)\n  , vec2( 1.0, 0.0)\n  , vec2( 0.5,-0.5)\n  , vec2(-0.5,-0.5)\n  ); \n\nvec3 offset(float z) {\n  return vec3(pathB*sin(pathA*z), z);\n}\n\nvec3 doffset(float z) {\n  return vec3(pathA*pathB*cos(pathA*z), 1.0);\n}\n\nvec3 ddoffset(float z) {\n  return vec3(-pathA*pathA*pathB*sin(pathA*z), 0.0);\n}\n\nfloat tanh_approx(float x) {\n  float x2 = x*x;\n  return clamp(x*(27. + x2)/(27.+9.*x2), -1., 1.);\n}\n\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r) {\n  p = p.yx;\n  const vec3 k = 0.5*vec3(-sqrt(3.0), 1.0, sqrt(4.0/3.0));\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  co += 1.234;\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat dot2(vec2 p) {\n  return dot(p, p);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat segment(vec2 p, vec2 a, vec2 b ) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat bezier(vec2 pos, vec2 A, vec2 B, vec2 C) {    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\nvec2 coff(float h) {\n  float h0 = h;\n  float h1 = fract(h0*9677.0);\n  float t = 0.75*mix(0.5, 1.0, h0*h0)*(TIME+1234.5);\n  return mix(0.1, 0.2, h1*h1)*sin(t*vec2(1.0, sqrt(0.5)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 alphaBlend(vec3 back, vec4 front) {\n  // Based on: https://en.wikipedia.org/wiki/Alpha_compositing\n  return mix(back, front.xyz, front.w);\n}\n\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.-front.w))/w;\n  return w > 0. ? vec4(xyz, w) : vec4(0.);\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  vec2 p = (pp-off*U.yyx).xy;\n  vec2 p2 = p;\n  p2 *= ROT(tau*0.1*n+0.05*TIME);\n  p2 += + 0.125*(ro.z-pp.z)*vec2(1.0)*ROT(tau*hash(vec2(n)));\n  vec2 hp = p2;\n  hp += 0.5;\n  const float ga = 100.0;\n  const float z = 1.0/3.0;\n  hp /= z;\n  vec2 hn = hextile(hp);\n  \n  float h0 = hash(hn+n);\n  vec2 p0 = coff(h0);\n  \n  vec3 bcol = 0.5*(1.0+cos(vec3(0.0, 1.0, 2.0) + 2.0*(p2.x*p2.y+p2.x)-+0.33*n)); \n  vec3 col = vec3(0.0);\n  \n  for (int i = 0; i < 6; ++i) {\n    float h1 = hash(hn+noff6[i]+n);\n    vec2 p1 = off6[i]+coff(h1);\n    \n    float h2 = h0+h1;\n    float fade = smoothstep(1.05, 0.85, distance(p0, p1)); \n\n    if (fade < 0.0125) continue;\n\n#ifdef BEZIER\n    vec2 p2 = 0.5*(p1+p0)+coff(h2);\n    float dd = bezier(hp, p0, p2, p1);\n#else\n    float dd = segment(hp, p0, p1);\n#endif\n    float gd = abs(dd);\n    gd *= sqrt(gd);\n    gd = max(gd, 0.0005);\n\n    col += fade*0.002*bcol/(gd);\n  }\n\n  {  \n    float cd = length(hp-p0);\n    float gd = abs(cd);\n    gd *= (gd);\n    gd = max(gd, 0.0005);\n    col += 0.0025*sqrt(bcol)/(gd);\n  }\n  \n  {\n    float hd = hexagon(hp, 0.485);\n    float gd = abs(hd);\n    gd = max(gd, 0.005);\n    col += 0.0005*bcol*bcol/(gd);\n  }\n  \n  float l = dot(col, L);  \n\n  return vec4(col, tanh_approx(sqrt(l)+dot(p, p)));\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1./RESOLUTION.xy;\n  float rdd = 2.0;\n  \n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec4 acol = vec4(0);\n  bool cutOut = false;\n\n  vec3 skyCol = vec3(0.0);\n\n  float maxpd = 0.;\n\n  for (float i = 1.; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*i;\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0. && acol.w < cutOff) {\n      vec3 pp = ro + rd*pd;\n      maxpd = pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, off, aa, nz+i);\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*furthest, planeDist*fadeFrom, nz);\n      float fadeOut = smoothstep(0., planeDist*.1, nz);\n      pcol.w *= fadeOut*fadeIn;\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      acol.w = acol.w > cutOff ? 1. : acol.w;\n      break;\n    }\n\n  }\n\n  return alphaBlend(skyCol, acol);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 r = RESOLUTION.xy, q = fragCoord/r.xy, pp = -1.0+2.0*q, p = pp;\n  p.x *= r.x/r.y;\n\n  float tdist = length(pp);\n  float tm  = 0.2*planeDist*TIME+0.1*tdist;\n\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(U.xyx+ddro, ww));\n  vec3 vv = cross(ww, uu);\n  vec3 col = color(ww, uu, vv, ro, p);\n  col -= 0.02*U.zwx*(length(pp)+0.125);\n  col *= smoothstep(1.5, 1.0, length(pp));\n  col *= smoothstep(0.0, 10.0, TIME-2.0*(q.x-q.x*q.y));\n  col = aces_approx(col);\n  col = sqrt(col);\n  fragColor = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34748,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/dom-in-ator/carbon-based-lifeforms-7?in=dom-in-ator/sets/carbon-based-lifeforms-world-of-sleepers-2015-remastered&si=4152c69d0d2f484fbd2267c97cc26775&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}