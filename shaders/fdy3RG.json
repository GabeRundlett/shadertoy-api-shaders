{
    "Shader": {
        "info": {
            "date": "1631719749",
            "description": "Test rendering on a looking glass",
            "flags": 1,
            "hasliked": 0,
            "id": "fdy3RG",
            "likes": 3,
            "name": "LookingGlass blobs",
            "published": 3,
            "tags": [
                "blobs",
                "quilt",
                "lookingglass"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "#define sat(a) clamp(a, 0.,1.)\n#define PI 3.14159265\n#define QUILT\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n\nfloat _wirecube(vec3 p, vec3 s, vec3 s2)\n{\n    vec3 l = abs(p)-s;\n    vec3 l2 = abs(l)-s2;\n    \n    float acc = 1000.;\n    \n    acc = min(acc, max(l2.x,l2.y));\n    acc = min(acc, max(l2.x,l2.z));\n    acc = min(acc, max(l2.y,l2.z));\n    acc = max(acc, max(l.x,max(l.y,l.z)));\n    return acc;\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(1000.,-1.);\n    //p = p+vec3(1.,-1.,1.)*1.4;\n    p.xz *= r2d(iTime*.5);\n    p.yz *= r2d(PI*.25);\n    p.xy *= r2d(PI*.25);\n    vec3 cubesz = vec3(.5);\n    vec3 cubeth = vec3(.025);\n    acc = _min(acc, vec2(_wirecube(p, cubesz, cubeth), 0.));\n    \n    float box = _cube(p, cubesz-cubeth);\n    \n    \n    float accsph = 1000.;\n    for (int i = 0; i < 8; ++i)\n    {\n        float fi = float(i);\n        vec3 psph = p+.5*vec3(sin(fi), cos(fi*.5+iTime), cos(fi*10.+iTime));\n        float sph = length(psph)-.25;\n        accsph = opSmoothUnion(accsph, sph, 0.15);\n    }\n    acc = _min(acc, vec2(max(accsph, box), 1.));\n    return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 accCol;\nvec3 trace(vec3 ro,vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n        {\n            return vec3(res.x, distance(p, ro), res.y);\n        }\n        if (res.y == 0.)\n            accCol += .1*vec3(sin(p.y+iTime*3.)*.5+.5,0.45,0.337)*(1.-sat(res.x/.2));\n        p+=rd*res.x*.35;\n    }\n    return vec3(-1.);\n}\n\nvec3 Render(in vec3 ro, in vec3 rd)\n{\n    vec3 res = trace(ro, rd, 256);\n    vec3 col = vec3(0.);//texture(iChannel0, rd).xyz;\n    if (res.y > 0.)\n    {\n        vec3 p = ro +rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        vec3 refl = reflect(rd, n);\n        vec3 rgb = vec3(0.);\n        if (res.z == 1.)\n            rgb = mix(vec3(.5), vec3(0.), sat((sin((p.x+p.y)*10.)+.9)*400.));\n        col = rgb+texture(iChannel0, refl*vec3(1.,-1.,1.)).xyz*pow(sat(dot(rd, refl)+.5),.9) ;\n        //col = vec3(1.);\n    }\n    col += accCol;\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0.,0.,-7.);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 256);\n    col = texture(iChannel0, rd).xyz;\n    if (res.y > 0.)\n    {\n        vec3 p = ro +rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        vec3 refl = reflect(rd, n);\n        vec3 rgb = vec3(0.);\n        if (res.z == 1.)\n            rgb = mix(vec3(.5), vec3(0.), sat((sin((p.x+p.y)*10.)+.9)*400.));\n        col = rgb+texture(iChannel0, refl*vec3(1.,-1.,1.)).xyz*pow(sat(dot(rd, refl)+.5),.9) ;\n        //col = vec3(1.);\n    }\n    col += accCol;\n    \n    return col;\n}\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    fragColor = vec4(Render(ro + vec3(0, 0, 9), rd), 1);\n}\n\n\n#ifndef QUILT\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 tot = vec3(0.0);\n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n \n        // camera\n        float theta\t= radians(360.)*(iMouse.x/iResolution.x-0.5) + PI * 0.3;\n        float phi\t= radians(90.)*(iMouse.y/iResolution.y-0.5) - PI / 2.;\n        vec3 ro = 2. * vec3( sin(phi)*cos(theta),cos(phi),sin(phi)*sin(theta));\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        //vec3 cd = ca[2];    \n        \n        vec3 rd =  ca*normalize(vec3(p,1.5));        \n        \n        tot += Render(ro ,rd);\n            \n#ifdef AA\n    }\n    tot /= 4.;\n#endif\n\tfragColor = vec4( sqrt(tot), 1.0 );\n}\n#else // QUILT\n\n    #define QAA\t2                                     \n\nconst float\tsideAngle = radians(35.0);\nconst float\thorizontalAngle = radians(14.0);\nconst float\tcameraSize = 2.0;\nconst float\taspectRatio = 0.75;\nconst vec3  \tVROffset = vec3(0, 0, 9);\nfloat quiltColumns\t=\t8.;\nfloat quiltRows\t\t=\t6.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4\taccColor = vec4(0.);\n    for( int m = 0; m < QAA; m++ )\n    for( int n = 0; n < QAA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = (vec2(float(m), float(n)) / float(QAA) - 0.5) / iResolution.xy                                                                                 ;\n\t\t\n\t\tvec2\tcoord = (fragCoord / iResolution.xy  + o) * vec2(quiltColumns,quiltRows);\n\t\tvec2\tfract = fract(coord);\n\t\tvec2\tfloor = floor(coord);\n\t\tfloat\timageId = floor.x + floor.y * quiltColumns;\n\t\tfloat\tvalueId = imageId / (quiltColumns * quiltRows - 1.);\n\t\tfloat\tdist = (cameraSize / 2.) / tan(horizontalAngle / 2.);\n\t\tfloat\tminCam = -(cameraSize / 2.) - tan(sideAngle / 2.) * dist;\n\t\t\n\t\tvec3\tcamPos = mix(vec3(minCam,0,dist),vec3(-minCam,0,dist),valueId);\n\t\tvec3\tscreenPos = vec3((fract.x-0.5)*cameraSize,(fract.y-0.5)*cameraSize/aspectRatio,0);\n\t\t\n\t\tvec3\tdir = normalize(screenPos - camPos);\n\t\tvec4\tcolor;\n\t\tmainVR(color, fragCoord, camPos - VROffset, dir);\n\t\taccColor += clamp(color, 0.0, 1.0);\n\t}\n\tfragColor = accColor / float(QAA*QAA);\n}\n#endif\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}