{
    "Shader": {
        "info": {
            "date": "1534041114",
            "description": "this is my contribution to the 2018 Shadertoy competition\ncant do better translucidity, and little AA becasue my gpu crash :(\n",
            "flags": 32,
            "hasliked": 0,
            "id": "ltcyWj",
            "likes": 17,
            "name": "[SH18] Jade",
            "published": 3,
            "tags": [
                "human",
                "jade",
                "sh18",
                "woman",
                "statue"
            ],
            "usePreview": 1,
            "username": "aiekick",
            "viewed": 1077
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via NoodlesPlate / SdfEditor (my softs to come)\n\n// compositing\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n    \n    // vigneting from iq Shader Mike : https://www.shadertoy.com/view/MsXGWr\n    fragColor.rgb *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.55 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://iquilezles.org/articles/distfunctions\nfloat sdSphere(vec3 p, float s)\n{\n\treturn length(p) - s;\n}\n\nvec2 sdCapsule(vec3 p, vec3 a, vec3 b)\n{\n\tvec3 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\treturn vec2(length(pa - ba * h),h);\n}\n\nvec2 sdCapsuleEllipse(vec3 p, vec3 a, vec3 b, vec3 r)\n{\n\tvec3 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\treturn vec2(length((pa - ba * h)/r),h);\n}\n\nfloat sdEllipsoid(in vec3 p, vec3 a, in vec3 r)\n{\n\treturn (length((p - a) / r) - 1.0) * min(min(r.x, r.y), r.z);\n}\n\n// modified for my needs\nfloat sdEllipsoid(in vec3 p, mat4 m, in vec3 r)\n{\n\treturn (length(((p - m[3].xyz)*mat3(m))/r) - 1.0) * min(min(r.x, r.y), r.z);\n}\n\nfloat sdSphere(in vec3 p, mat4 m, float r)\n{\n\treturn length(((p - m[3].xyz)*mat3(m))) - r;\n}\n\n// https://iquilezles.org/articles/smin\n// polynomial smooth min (k = 0.1);\nfloat sminPoly( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smin( float a, float b, float k )\n{\n\treturn sminPoly(a,b,k);\n}\n\n// from Iq : Quadratic Bezier - 3D / https://www.shadertoy.com/view/ldj3Wh\nvec2 sdBezier(vec3 A, vec3 B, vec3 C, vec3 pos)\n{    \n    vec3 a = B - A;\n    vec3 b = A - 2.0*B + C;\n    vec3 c = a * 2.0;\n    vec3 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    vec2 res;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    if(h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 1 root\n        vec3 qos = d + (c + b*t)*t;\n        res = vec2( length(qos),t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 3 roots\n        vec3 qos = d + (c + b*t.x)*t.x;\n        float dis = dot(qos,qos);\n        \n        res = vec2(dis,t.x);\n\n        qos = d + (c + b*t.y)*t.y;\n        dis = dot(qos,qos);\n        if( dis<res.x ) res = vec2(dis,t.y );\n\n        qos = d + (c + b*t.z)*t.z;\n        dis = dot(qos,qos);\n        if( dis<res.x ) res = vec2(dis,t.z );\n\n        res.x = sqrt( res.x );\n    }\n    \n    return res;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// vec3 from SdfEditor\nconst vec3 uLoc1 = vec3(0,0.00203843,0.00360684);\nconst vec3 uLoc3 = vec3(0,0.306208,0.11644);\nconst vec3 uLoc4 = vec3(0,0.324002,-0.00769925);\nconst vec3 uLoc7 = vec3(0.0183471,0.287671,-0.546344);\nconst vec3 uLoc12 = vec3(0.000250067,0.241125,0.0758075);\nconst vec3 uLoc13 = vec3(0.0110198,0.241354,0.0817071);\nconst vec3 uLoc14 = vec3(0.0227902,0.251562,0.0491019);\nconst vec3 uLoc15 = vec3(0.00461896,0.248268,0.0754393);\nconst vec3 uLoc16 = vec3(0.0152348,0.246408,0.070115);\nconst vec3 uLoc17 = vec3(0.0306791,0.245639,0.0403069);\nconst vec3 uLoc18 = vec3(0.000147426,0.235244,0.0736692);\nconst vec3 uLoc19 = vec3(0.0276588,0.241318,0.0750517);\nconst vec3 uLoc20 = vec3(0.0443396,0.234284,0.0277071);\nconst vec3 uLoc21 = vec3(0,0.251592,0.0764101);\nconst vec3 uLoc22 = vec3(0.0726629,0.259075,0.0646102);\nconst vec3 uLoc23 = vec3(-0.0617832,0.229258,-0.104316);\nconst vec3 uLoc24 = vec3(0,0.318978,0.0737746);\nconst vec3 uLoc25 = vec3(0,0.293775,0.0796922);\nconst vec3 uLoc26 = vec3(-0.000892206,0.277262,0.0893624);\nconst vec3 uLoc27 = vec3(0.00638537,0.276021,0.0804291);\nconst vec3 uLoc31 = vec3(0.20228,0.348349,0.120626);\nconst vec3 uLoc32 = vec3(0,-1.16415e-10,-0.0378109);\nconst vec3 uLoc33 = vec3(0.140931,0.126447,-0.0456791);\nconst vec3 uLoc34 = vec3(0.0231488,0.109465,0.023192);\nconst vec3 uLoc36 = vec3(0,-0.0104738,-0.183424);\nconst vec3 uLoc37 = vec3(0,-0.0100463,0.0703228);\nconst vec3 uLoc38 = vec3(0,0.0259907,-0.039358);\nconst vec3 uLoc39 = vec3(0,0.0988484,-0.0512504);\nconst vec3 uLoc42 = vec3(0,0.125604,-0.0484375);\nconst vec3 uLoc43 = vec3(1.16415e-10,0.387246,0.00678631);\nconst vec3 uLoc44 = vec3(0.106815,0.452016,0.00219224);\nconst vec3 uLoc45 = vec3(0.0370535,0.174836,0.00913381);\nconst vec3 uLoc46 = vec3(0.00114844,0.402296,0.00267714);\nconst vec3 uLoc47 = vec3(0.122269,0.437704,0);\nconst vec3 uLoc48 = vec3(0.0385304,0.146079,0.00786149);\nconst vec3 uLoc49 = vec3(0,0.415296,-0.0035327);\nconst vec3 uLoc50 = vec3(0.146797,0.436727,0);\nconst vec3 uLoc51 = vec3(0.0258521,0.138664,0.00117993);\nconst vec3 uLoc52 = vec3(0,0.392706,0.0209802);\nconst vec3 uLoc53 = vec3(0.137235,0.427677,0.0180633);\nconst vec3 uLoc54 = vec3(0.0263039,0.136626,0.0155087);\nconst vec3 uLoc55 = vec3(0,0.213307,0.0548081);\nconst vec3 uLoc56 = vec3(0.140222,0.171291,0.0624294);\nconst vec3 uLoc57 = vec3(0.0429538,0.0682408,0.0372264);\n\n// matrixs from SdfEditor\nconst mat4 uLoc0 = mat4(0.774993,0,0,0,0,-1.1667,-1.14583,0,0,0.658059,-0.670043,0,-2.91038e-11,0.267095,0.0594358,1);\nconst mat4 uLoc5 = mat4(1.61052,0,0,0,0,0.804379,0.594113,0,0,-0.46788,0.633471,0,0.00135185,0.2467,0.0239092,1);\nconst mat4 uLoc6 = mat4(0.811406,0,0,0,0,0.921883,0.387467,0,0,-0.286288,0.681152,0,-0.00513797,0.243955,-0.00344948,1);\nconst mat4 uLoc8 = mat4(0.604029,0,0,0,0,1.28311,0,0,0,0,1.59333,0,0.0426618,0.303089,0.0798052,1);\nconst mat4 uLoc9 = mat4(0.730816,0,0,0,0,1,0,0,0,0,0.999989,0,0.0469761,0.186637,0,1);\nconst mat4 uLoc10 = mat4(1.58959,0,0,0,0,1.0653,0,0,0,0,1,0,0.0243361,0.271856,0.0172644,1);\nconst mat4 uLoc11 = mat4(1,0,0,0,0,0.999964,0,0,0,0,0.999964,0,0.0957007,0.243697,-0.0194892,1);\nconst mat4 uLoc28 = mat4(1.49882,0.0279406,0.0525695,0,0.000536533,0.34667,-0.199552,0,-0.0594995,0.747796,1.29895,0,0.00690892,0.269552,0.0868132,1);\nconst mat4 uLoc29 = mat4(0.985338,0,-0.170407,0,0,0.999996,0,0,0.170405,0,0.98533,0,0.0259051,0.305124,0.0514075,1);\nconst mat4 uLoc30 = mat4(1,0,0,0,0,0.825584,0,0,0,0,0.882683,0,0.00494779,0.270636,0.0179259,1);\nconst mat4 uLoc35 = mat4(0.458626,0,0,0,0,0.694593,0,0,0,0,0.724171,0,0,0.0715221,-0.0525544,1);\nconst mat4 uLoc40 = mat4(1.63833,0,0,0,0,2.3324,0.361054,0,0,-0.152977,0.988227,0,-1.16415e-10,0.244062,-0.0111016,1);\nconst mat4 uLoc41 = mat4(0.888535,0,0.458809,0,0,1,0,0,-0.103254,0,0.199963,0,0.0610963,0.304203,0.0864888,1);\n\nfloat getLibs(vec3 p)\n{\n\tvec2 i = sdBezier(uLoc12, uLoc13, uLoc14, p);\n\tfloat di = i.x - 0.008;\n\tvec2 ic = sdBezier(uLoc18, uLoc19, uLoc20, p);\n\tdi = smin(di, ic.x - 0.005, -0.001);\n\tvec2 s = sdBezier(uLoc15, uLoc16, uLoc17, p);\n\tfloat ds = s.x - 0.008;\n\tvec2 sc = sdBezier(uLoc21, uLoc22, uLoc23, p);\n\tds = smin(ds, sc.x - 0.005, -0.001);\n\treturn min(di, ds);\n}\n\nfloat getNoze(vec3 p)\n{\n\tvec2 bez = sdBezier(uLoc24, uLoc25, uLoc26, p);\n\tfloat d = bez.x  - mix(0.001, 0.01, bez.y);\n\td = smin(d, sdSphere(p-uLoc27, 0.008), 0.008);\n\td = smin(d, -sdSphere(p, uLoc28, 0.005), -0.003);\n\treturn d;\n}\n\nfloat getEyes(vec3 p)\n{\n\tfloat d = length(p) - 0.02;\n\tp.y = abs(p.y);\n\td = smin(d, -(length(p - vec3(0,-0.013,0.015)) - 0.02), -0.001);\n\td = min(d, length(p) - 0.018);\n\treturn smin(d, -(length(vec2(length(p.xy) - 0.005, p.z-0.017))-0.001), -0.001);\n}\n\nmat3 getRotXMat(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\n\n// allons y pour le mode bourrin, j'en peux plus la :)\nfloat getHairsOrHat(vec3 p)\n{\n\tvec3 q = p;\n\tvec3 q2 = p;\n\tp *= vec3(1.,1.,0.2);\n\tvec2 bez = sdBezier(uLoc43, uLoc44, uLoc45, p);\n\tfloat d = bez.x - mix(0.01,0.0001,bez.y);\n\tbez = sdBezier(uLoc46, uLoc47, uLoc48, p);\n\td = smin(d, bez.x - mix(0.01,0.0001,bez.y), 0.004);\n\tbez = sdBezier(uLoc49, uLoc50, uLoc51, p);\n\td = smin(d, bez.x - mix(0.01,0.0001,bez.y), 0.004);\n\tq *= getRotXMat(0.4);\n\tq *= vec3(1.,1.,0.2);\n\tbez = sdBezier(uLoc52, uLoc53, uLoc54, q);\n\td = smin(d, bez.x - mix(0.01,0.0001,bez.y), 0.003);\n\tq2 *= getRotXMat(1.3);\n\tq2 *= vec3(1.,1.,0.2);\n\tbez = sdBezier(uLoc55, uLoc56, uLoc57, q2);\n\treturn smin(d, bez.x - mix(0.01,0.0001,bez.y), 0.02);\n}\n\nfloat getBuste(vec3 p)\n{\n\tfloat d = sdEllipsoid(p, uLoc38, vec3(0.2,0.13,0.1));\n\td = smin(d, sdEllipsoid(p, uLoc39, vec3(0.12,0.1,0.2)), -0.001);\n\treturn smin(d, sdCapsule(p, uLoc42, uLoc42+vec3(0,0.2,0.05)).x - 0.045, 0.025);\n}\n\nfloat map(vec3 p)\n{\n\tfloat d = 1e5;\n\n\tp.x *= 0.9;\n\tp.x = abs(p.x);\n\t\n\td = smin(d, sdSphere(p, uLoc0, 0.025), 0.01);\n\td = smin(d, sdSphere(p-uLoc4, 0.1), 0.01);\n\td = smin(d, sdEllipsoid(p, uLoc5, vec3(0.05,0.025,0.05)), 0.01);\n\td = smin(d, -sdSphere(p, uLoc8, 0.025), -0.01);\n\td = smin(d, dot(p, vec3(1,0,0) * mat3(uLoc9)) - uLoc9[3].x, -0.04);\n\td = smin(d, sdEllipsoid(p, uLoc6, vec3(0.05,0.025,0.05)), 0.01);\n\td = smin(d, sdSphere(p, uLoc10, 0.05), 0.01);\n\td = smin(d, -sdSphere(p, uLoc41, 0.02), -0.01);\n\td = smin(d, getLibs(p - uLoc1.xyz), 0.01);\n\td = smin(d, -(length(p.yz - uLoc3.yz) - 0.03), -0.04);\n\td = smin(d, getNoze(p), 0.01);\n\td = smin(d, getEyes((p-uLoc29[3].xyz) * mat3(uLoc29)), 0.003);\n\td = smin(d, sdSphere(p, uLoc30, 0.05), 0.01);\n\td = smin(d, -sdSphere(p-uLoc31, 0.05), -0.1);\n\td = smin(d, sdSphere(p, uLoc40, 0.05), 0.05);\n\td = smin(d, getBuste(p), 0.025);\n\t\n\treturn smin(d, getHairsOrHat(p), 0.005);\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n        map(p+e.xyy) - map(p-e.xyy),\n        map(p+e.yxy) - map(p-e.yxy),\n        map(p+e.yyx) - map(p-e.yyx) );\n    return normalize(n);\n}\n\nvec3 shade(vec3 ro, vec3 rd, float d, vec3 lp, float li)\n{\n\tvec3 p = ro + rd * d;\n\tvec3 n = nor(p,0.001); \t\t\t\t\t\t\t// precise normale at surf point\n\tfloat sb = clamp(map(p - n * 0.2)/0.004,0.,1.);\t\n\tvec3 bb = mix(vec3(0.0, 0.4, 0.1), vec3(0.1,0.7,0.1), vec3(1.-sb));\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t// light dir\n    \n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat amb = 0.5; \t\t\t\t\t\t\t\t\t\t\t\t// ambiance factor\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\t\t// specular\n\tfloat sss = 1. - map(p - n * 4.); \t\t\t\t\t\t\t// one step sub density of df\n\tvec3 col = clamp((diff + fre + bb * sb * 0.608 + sss * 0.352) * amb * li + spe * 0.6, 0., 1.);\n\t\n\treturn mix(col, vec3(1), vec3((bb*diff + 0.1 *spe)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(0, 0, 0, 0);\n\t\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (2.*fragCoord-si)/min(si.x, si.y);\n\t\n    float maxd = 2.;\n    \n    float t = iTime * 0.3;\n    \n\tvec3 ro = vec3(cos(t),0.4,sin(t)); ro.xz *= 0.6;\n\tvec3 z = normalize(vec3(0,0.25,0) - ro);\n\tvec3 x = normalize(cross(vec3(0,1,0), z));\n\tvec3 y = normalize(cross(z, x));\n    uv *= 0.5; // fov\n\tvec3 rd = normalize(z + uv.x * x + uv.y * y);\n\t\n    float s = 1., d = 0.;;\n\tfor (int i = 0; i < 150; i++) \n\t{\n\t\tif (d*d/s>1e6 || d > maxd) break;\n\t\ts = map(ro + rd * d);\n\t\td += s * 0.5;\n\t}\n\n    if (d < maxd)\n    {\n        fragColor.rgb = shade(ro, rd, d, ro, 0.6);\n\t\tfragColor = sqrt(fragColor*fragColor*1.5);\n\t}\n\telse\n\t{\n\t\tfragColor = vec4(0.8);\n\t}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}