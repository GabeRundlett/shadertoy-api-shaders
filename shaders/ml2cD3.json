{
    "Shader": {
        "info": {
            "date": "1692381692",
            "description": "another noise designed arranged lighted grayscale",
            "flags": 0,
            "hasliked": 0,
            "id": "ml2cD3",
            "likes": 14,
            "name": "Liquid VHS",
            "published": 3,
            "tags": [
                "weird",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "\n// Liquid VHS\n// by Leon Denise\n// 2023/08/18\n\n// another noise designed arranged lighted grayscale\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n// mercury\n// https://mercury.sexy/hg_sdf/\nvec2 moda (vec2 p, float count)\n{\n    float an = 6.283/count;\n    float a = atan(p.y,p.x)+an*.5;\n    a = mod(a,an)-an*.5;\n    return vec2(cos(a),sin(a))*length(p);\n}\n\n#define R iResolution.xy\n#define ss(a,b,t) smoothstep(a,b,t)\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\n\nfloat fbm (vec3 seed)\n{\n    float result = 0., a = .5;\n    for (int i = 0; i < 4; ++i, a /= 2.) {\n        seed.z += result*2.5;\n        result += gyroid(seed/a)*a;\n    }\n    return result;\n}\n\nfloat fbm2 (vec3 seed)\n{\n    float result = 0., a = .5;\n    for (int i = 0; i < 4; ++i, a /= 2.) {\n        seed.z += result*.5;\n        result += (gyroid(seed/a)*a);\n    }\n    return result;\n}\n\n// heightmap\nfloat height (vec3 pos, float d)\n{\n    // noise\n    float f = fbm(pos)*.5+.5;\n    \n    // offset distance\n    d = max(0., d-.2); \n    \n    // layers thickness\n    float thin1 = .5+sin(d*12.-iTime)*.1;\n    float thin2 = d*.1;\n    f = abs(abs(abs(f)-thin1)-thin2)-.1;\n    \n    // border thickness\n    return ss(.01,-.1,f-d*.05);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/R;\n    vec2 p = (2.*fragCoord-R)/R.y;\n    float a = atan(p.y,p.x)+iTime*.1;\n    float d = length(p);\n    \n    // noise coordinates\n    vec3 pos = vec3(p, d*.5);\n    pos.z -= iTime*.01;\n    \n    // heightmap\n    float h = height(pos, d);\n    \n    // normal from heightmap\n    #define H(e) height(pos+vec3(e,0), d)\n    vec3 e = vec3(1./R, 0);\n    vec3 n = normalize(vec3(H(-e.xz)-H(e.xz),H(-e.zy)-H(e.zy), 0.2/max(.001,d-.2)));\n    \n    // color\n    vec3 tint = .5+.5*cos(vec3(1,2,3)*2.+a);\n    vec3 color = vec3(.05);\n    tint = mix(vec3(1), tint, ss(.0,.5,d));\n    \n    // liquid\n    float l = max(0., dot(n, -normalize(vec3(p,-1))));\n    l *= ss(-.5,.2,d);\n    color = vec3(pow(l, 1.9)*pow(1.-h, 4.))*tint;\n    color += tint*pow(l, 20.);\n    color *= ss(0.,.1,h);\n    \n    // background shape and lighting\n    e = vec3(.01,0,0);\n    pos = vec3(p, 0.);\n    pos += h*.02;\n    pos.x = abs(pos.x)-iTime*.1+0.05/max(.0,abs(p.x)+.1);\n    float x = (fbm2(pos+e.yxy)-fbm2(pos-e.yxy))/(2.*e.x);\n    float y = (fbm2(pos+e.xyy)-fbm2(pos-e.xyy))/(2.*e.x);\n    vec2 curl = vec2(-x,y);\n    p += curl*.1*ss(.9,.0,abs(p.x)-.7);\n    float shape = abs(p.y)-.2;\n    float strips = mix(.8+.2*sin(uv.y*1000.+iTime*10.+h*5.+uv.x*200.), 1., d);\n    color += strips*tint*min(1., (0.00+h*.1)/max(0.,shape));\n    color *= mix(1.,.2,h*d);\n    color = mix(color, vec3(0), ss(mix(0.01, .1,h),.0,abs(p.y)-mix(0.1, .01,h)));\n    color = mix(color, vec3(1), ss(mix(0.01, .1,h),.0,abs(p.y-.05)-mix(0.05, .01,h)));\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}