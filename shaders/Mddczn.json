{
    "Shader": {
        "info": {
            "date": "1517832200",
            "description": "Stream meandering through an endless random forest; summer/winter views; use mouse to look around",
            "flags": 0,
            "hasliked": 0,
            "id": "Mddczn",
            "likes": 32,
            "name": "Into the Woods",
            "published": 3,
            "tags": [
                "voronoi",
                "reflection",
                "landscape",
                "tree",
                "hexagon",
                "forest",
                "snow"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 2099
        },
        "renderpass": [
            {
                "code": "// \"Into the Woods\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmootherStep (float a, float b, float x);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HexGrid (vec2 p);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvec3 sunDir, vuPos;\nvec2 gId, trOff;\nfloat tCur, dstFar, szFac, trSym, grHt, trRot, snowFac;\nint idObj;\nconst int idTrnk = 1, idLv = 2, idRk = 3;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\nvec2 TrackPathS (float t)\n{\n  return vec2 (dot (vec3 (1.9, 2.9, 4.3),\n     sin (vec3 (0.23, 0.17, 0.13) * t)), t);\n}\n\nvec2 TrackPath (float t)\n{\n  return TrackPathS (t) + vec2 (dot (vec2 (0.07, 0.08), sin (vec2 (2.5, 3.3) * t)), 0.);\n}\n\nfloat GrndHt (vec2 p)\n{\n  float h, w;\n  h = 0.35 + 0.17 * (sin (dot (p, vec2 (1., 1.4))) + sin (dot (p, vec2 (-1.2, 0.8))));\n  w = abs (p.x - TrackPath (p.y).x) * (1.1 + 0.3 * sin (0.5 * p.y));\n  h = h * SmootherStep (0.75, 1.5, w) - 0.05 * (1. - w * w / 0.64) * step (w, 0.8);\n  return h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.02 * s, 0.3 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 9; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy),\n     GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, ht;\n  dMin = dstFar;\n  p.xz -= HexToPix (gId) + trOff;\n  if (szFac > 0.) {\n    dMin /= szFac;\n    p.xz = Rot2D (p.xz, trRot);\n    p.y -= grHt - 0.1;\n    p /= szFac;\n    ht = 2.2;\n    q = p;\n    q.y -= ht;\n    d = PrCylDf (q.xzy, 0.12 - 0.03 * q.y / ht, ht);\n    qq = p;\n    qq.xz = Rot2D (qq.xz, 2. * pi * (floor (trSym * atan (qq.z, - qq.x) / (2. * pi) +\n       0.5) / trSym));\n    q = qq;\n    q.xy = Rot2D (q.xy - vec2 (-0.2, 0.3), -0.3 * pi);\n    d = SmoothMin (d, PrCylDf (q.yzx, 0.09 + 0.02 * q.x / 0.6, 0.6), 0.2);\n    q = qq;\n    q.xy = Rot2D (q.xy - vec2 (-0.2, 1.2 * ht), 0.3 * pi);\n    d = SmoothMin (d, PrCylDf (q.yzx, 0.05 + 0.02 * q.x / 0.5, 0.5), 0.1);\n    DMIN (idTrnk);\n    q = p;\n    q.y -= 2. * ht;\n    d = PrSphDf (q, 1.);\n    q.y -= 1.;\n    d = SmoothMin (d, PrSphDf (q, 0.5), 0.5);\n    q.xz = qq.xz;\n    q.xy -= vec2 (-0.3, -2.);\n    d = SmoothMin (d, PrSphDf (q, 0.6), 0.3);\n    DMIN (idLv);\n    dMin *= szFac;\n  } else  if (szFac < 0.) {\n    q = p;\n    d = PrSphDf (q, - szFac * 0.15);\n    DMIN (idRk);\n  }\n  return dMin;\n}\n\nvoid SetTrParms ()\n{\n  vec2 g, w;\n  float s;\n  szFac = 0.3 + 0.4 * Hashfv2 (17. * gId + 99.);\n  trSym = floor (3. + 2.9 * Hashfv2 (19. * gId + 99.));\n  w = Hashv2v2 (33. * gId);\n  g = HexToPix (gId);\n  s = abs (g.x - TrackPath (g.y).x);\n  if (s < 0.5) {\n    trOff = 0.25 * sqrt3 * w.x * vec2 (cos (2. * pi * w.y), sin (2. * pi * w.y));\n    szFac *= -1.;\n  } else if (s < 2.) {\n    szFac = 0.;\n  } else {\n    trOff = max (0., 0.5 * sqrt3 - szFac) * w.x * vec2 (cos (2. * pi * w.y), sin (2. * pi * w.y));\n    trRot = 0.6 * pi * (Hashfv2 (23. * gId + 99.) - 0.5);\n    grHt = GrndHt (g + trOff);\n  }\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = 1. / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2]));\n  pM = HexToPix (PixToHex (ro.xz));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = min (hv.x, min (hv.y, hv.z));\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + 0.002;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < 0.0005 || dHit > dstFar || p.y < 0. || p.y > 10.) break;\n  }\n  if (d >= 0.0005) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-99.);\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    p = ro + rd * d;\n    gId = PixToHex (p.xz);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  return mix (vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - rd.y, 8.) +\n     0.35 * pow (max (dot (rd, sunDir), 0.), 6.), vec3 (1.), clamp (0.1 + 0.8 * rd.y *\n     Fbm2 (5. * rd.xz / max (rd.y, 0.001)), 0., 1.));\n}\n\nfloat WaterHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 t;\n  float wFreq, wAmp, ht, tWav;\n  tWav = 0.5 * tCur;\n  wFreq = 1.;\n  wAmp = 1.;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    p *= qRot;\n    t = tWav * vec2 (1., -1.);\n    t4 = (p.xyxy + t.xxyy) * wFreq;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    ht += wAmp * dot (pow (1. - sqrt (v4.xz * v4.yw), vec2 (8.)), vec2 (1.));\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return ht;\n}\n\nvec3 WaterNf (vec3 p)\n{\n  vec3 vn;\n  vec2 e = vec2 (0.05, 0.);\n  vn.xz = 0.002 * (WaterHt (p.xz) - vec2 (WaterHt (p.xz + e.xy), WaterHt (p.xz + e.yx)));\n  vn.y = e.x;\n  return normalize (vn);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 col, c1, c2, rbCol, fCol, wCol, snCol, vn, vnw, rog, rdo;\n  vec2 vf;\n  float dstObj, dstGrnd, dstWat, sh, spec, s, h1, h2, glit;\n  bool isRefl, isSky;\n  isRefl = false;\n  isSky = false;\n  spec = 0.;\n  HexVorInit ();\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  dstWat = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  rdo = rd;\n  rog = ro + dstGrnd * rd;\n  if (dstWat < min (min (dstGrnd, dstObj), dstFar)) {\n    ro += dstWat * rd;\n    vnw = WaterNf (8. * ro);\n    rd = reflect (rd, vnw);\n    ro += 0.01 * rd;\n    dstGrnd = GrndRay (ro, rd);\n    dstObj = ObjRay (ro, rd);\n    isRefl = true;\n  }\n  vf = vec2 (0.);\n  if (min (dstGrnd, dstObj) < dstFar) {\n    snCol = vec3 (0.9, 0.9, 0.95);\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      gId = PixToHex (ro.xz);\n      h1 = Hashfv2 (gId * vec2 (17., 27.) + 0.5);\n      h2 = Hashfv2 (gId * vec2 (19., 29.) + 0.5);\n      if (idObj == idTrnk) {\n        fCol = HsvToRgb (vec3 (0.1 * h1, 0.5, 0.4 - 0.2 * h2));\n        wCol = mix (snCol, mix (fCol, snCol, smoothstep (0.01, 0.2, vn.y)),\n           smoothstep (0.1 * szFac, 0.3 * szFac, ro.y - GrndHt (HexToPix (gId))));\n        vf = vec2 (32., 2.);\n      } else if (idObj == idLv) {\n        fCol = HsvToRgb (vec3 (0.2 + 0.2 * h1, 0.7, 0.8 - 0.4 * h2)) *\n           (1. - 0.2 * Noisefv3 (64. * ro));\n        spec = 0.1;\n        wCol = mix (0.6 * fCol, snCol, 0.2 + 0.8 * smoothstep (-0.8, -0.6, vn.y));\n        vf = vec2 (16., mix (4., 16., 1. - snowFac));\n      } else if (idObj == idRk) {\n        fCol = mix (vec3 (0.4, 0.3, 0.3), vec3 (0.3, 0.4, 0.5), Fbm2 (16. * ro.xz));\n        spec = 0.1;\n        wCol = mix (fCol, snCol, 0.2 + 0.8 * smoothstep (0.1, 0.3, vn.y));\n        vf = vec2 (8., 8.);\n      }\n    } else if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      gId = PixToHex (ro.xz);\n      SetTrParms ();\n      vn = GrndNf (ro);\n      vf = vec2 (8., 4.);\n      if (snowFac < 1.) {\n        c1 = mix (vec3 (0.1, 0.2, 0.15), vec3 (0.2, 0.4, 0.2),\n           smoothstep (0.3, 0.5, Fbm2 (8. * ro.xz)));\n        if (szFac > 0.) c1 = mix (vec3 (0.15, 0.05, 0.1), c1, 0.2 + 0.8 *\n           smoothstep (0.4 * szFac, 0.7 * szFac, length (ro.xz - HexToPix (gId) - trOff)));\n        c1 *= (1. - 0.2 * Noisefv2 (128. * ro.xz));\n        c2 = vec3 (0.3, 0.3, 0.35) * (1. - 0.2 * Noisefv2 (256. * ro.zy));\n        fCol = mix (c2, mix (c2, c1, smoothstep (0.4, 0.7, vn.y)),\n           smoothstep (0., 0.005 * Noisefv2 (128. * ro.xz), ro.y));\n      } else fCol = vec3 (0.);\n      wCol = vec3 (0.8, 0.8, 0.85);\n    }\n    col = mix (fCol, wCol, snowFac);\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    sh = ObjSShadow (ro, sunDir);\n    col = col * (0.1 + 0.1 * max (dot (normalize (- sunDir.xz), vn.xz), 0.) +\n       0.1 * max (vn.y, 0.) + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       sh * spec * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n    if (snowFac > 0. && dstGrnd < dstObj) {\n      glit = 64. * step (0.01, max (0., dot (vn, sunDir))) *\n         pow (max (0., dot (sunDir, reflect (rd, vn))), 16.) *\n         pow (1. - 0.6 * abs (dot (normalize (sunDir - rd), VaryNf (512. * ro, vn, 8.))), 8.);\n      col += vec3 (1., 1., 0.8) * smoothstep (0.6, 0.9, snowFac) * step (0.5, sh) * glit;\n    }\n  } else {\n    col = SkyCol (rd);\n    isSky = true;\n  }\n  if (isRefl) {\n    vc = HexVor (128. * rog.xz);\n    vn = normalize (vec3 (-0.7 * vc.yz, 1.).xzy);\n    s = mod (10. * vc.w, 1.);\n    sh = ObjSShadow (rog, sunDir);\n    rbCol = HsvToRgb (vec3 (0.1 + 0.3 * step (2. * s, 1.) + 0.1 * mod (5. * s, 1.),\n       0.2 + 0.2 * mod (17. * s, 1.), 0.2 + 0.2 * mod (12. * s, 1.))) *\n       (0.5 + 0.3 * smoothstep (0., 0.2, vc.x)) * (1. - 0.2 * Noisefv2 (128. * rog.xz));\n    rbCol = rbCol * (0.2 + 0.1 * max (vn.y, 0.) + 0.7 * sh * max (dot (vn, sunDir), 0.)) +\n       sh * 0.1 * pow (max (dot (normalize (sunDir - rdo), vn), 0.), 64.);\n    col = mix (rbCol, 0.95 * col, 1. - 0.9 * pow (dot (- rdo, vnw), 2.));\n    if (isSky) col = mix (col, 1.5 * vec3 (1., 1., 0.9), sh *\n       pow (max (0., dot (sunDir, reflect (rdo, vnw))), 2048.));\n  }\n  col = pow (col, vec3 (0.6));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa, vd;\n  float el, az, tCyc, tt, a, vel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCyc = 40.;\n  tCur = mod (tCur, 36000.) + floor (floor (dateCur.w / 600.) / (2. * tCyc)) * 2. * tCyc;\n  snowFac = SmoothBump (0.4, 0.9, 0.05, mod (0.5 * tCur / tCyc, 1.));\n  vel = 0.7;\n  vuPos.xz = TrackPathS (vel * tCur);\n  vuPos.y = 0.6;\n  ro = vuPos;\n  vd = TrackPathS (vel * (tCur + 0.2)) - vuPos.xz;\n  az = atan (vd.x, vd.y);\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el = 0.7 * pi * mPtr.y;\n  } else {\n    a = 0.45 * pi * SmoothBump (0.3, 0.7, 0.1, 0.1 * mod (tCur, 0.25 * tCyc));\n    tt = mod (tCur / tCyc, 1.);\n    if (tt < 0.25) az += a;\n    else if (tt < 0.5) az -= a;\n    else if (tt < 0.75) el = -0.4 * a;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 1.6));\n  dstFar = 80.;\n  sunDir = normalize (vec3 (1., 1.5, 0.3));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat SmootherStep (float a, float b, float x)\n{\n  x = clamp ((x - a) / (b - a), 0., 1.); \n  return ((6. * x - 15.) * x + 10.) * x * x * x;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, 0.5 * sqrt3 - q.x + 0.5 * min (q.x - sqrt3 * q.y, 0.));\n}\n\nvec2 gVec[7], hVec[7];\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}