{
    "Shader": {
        "info": {
            "date": "1673429367",
            "description": "Drawing as thin a spiral as possible, while minimizing aliasing artefacts. k chosen to balance out the various effects that do appear.\n\nObviously this could be made shorter, I'm not particularly interested in suggestions for doing so.",
            "flags": 16,
            "hasliked": 0,
            "id": "dlj3Dw",
            "likes": 12,
            "name": "Thin Spiral",
            "published": 3,
            "tags": [
                "spiral"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "// Thin Spiral, mla, 2023\n\nconst float PI = 3.141592654;\nfloat spiral = 1.0; // Number of arms on spiral, 0 for no spiral\nfloat scale = 1.0;  // This can be any value in fact\nfloat k = 0.6;      // Magic number - determined by experiment\n\nvoid mainImage(out vec4 o, vec2 p) {\n    if (iMouse.x > 1.0) k = iMouse.x/iResolution.x; // Set k from mouse\n    p -= 0.5*iResolution.xy;\n    p /= scale;\n    float d = length(p);\n    float px = fwidth(p.x); // Same as 1.0/scale\n    o = vec4(0.5+0.5*cos(k*PI*d/px-2.0*PI*iTime+spiral*atan(p.y,p.x)));\n    //o *= 2.0/(1.0+o); // Maybe simple tone-mapping?\n    float g = 0.4545; // 0.7 for more balanced stripes\n    //if (iMouse.y > 0.0) g = iMouse.y/iResolution.y;\n    if (!key(CHAR_X)) o = pow(o,vec4(g)); // Gamma correction always nice.\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}