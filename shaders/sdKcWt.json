{
    "Shader": {
        "info": {
            "date": "1655911236",
            "description": "An algorithm that gives you the distance to the nearest edge of an Icosahedron",
            "flags": 0,
            "hasliked": 0,
            "id": "sdKcWt",
            "likes": 0,
            "name": "Icosahedron Edge Distance",
            "published": 3,
            "tags": [
                "3d",
                "mouse",
                "triangle",
                "hexagon",
                "distance",
                "icosahedron"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nI created an algorithm, that gives you the distance to the nearest edge of an\nIcosahedron.\n\nIt has mouse controls to rotated around the center.\n\nI made this because I wanted to make a 3D tiling pattern, but I only skim\nread the Wikipedia article and chose the wrong shape. This shape cannot be \nseamlessly tiled. Lol\n*/\n\n#define pi              3.1415926536\n#define inv_sqrt3\t0.5773502693 // 1/sqrt(3)\n#define nGRa \t\t0.3568220898 // normalized Golden Ration\n#define nGRc \t\t0.9341723590 // normalized 2 Golden Ration + 1\n\nconst vec3 hrA = vec3(inv_sqrt3); //vector to Icosahedron Edge A\nconst vec3 hrB = vec3(0., nGRc, nGRa); //vector to Icosahedron Edge B\nconst vec3 hrC = vec3(nGRa, 0., nGRc); //vector to Icosahedron Edge C\nconst vec3 hrD = vec3(nGRc, nGRa, 0.); //vector to Icosahedron Edge D\n\n//Icosahedron Distance from Center\nfloat IcoDist(vec3 p) {\n    p = abs(p);\n    float pAB = max(dot(p, hrA),dot(p, hrB));\n    float pCD = max(dot(p, hrC),dot(p, hrD));\n    float dist = max(pAB,pCD);\n    \n    // optional makes it 0-1 inside, and negative outside\n    return (.5-dist)*2.; \n}\n\n// makes Cool colormap with polynimal 6\nvec3 Cool(float t) {\n    const vec3 c0 = vec3(-0.000941,1.000941,1.000000);\n    const vec3 c1 = vec3(1.001170,-1.001170,-0.000000);\n    const vec3 c2 = vec3(0.004744,-0.004748,0.000001);\n    const vec3 c3 = vec3(-0.011841,0.011841,-0.000005);\n    const vec3 c4 = vec3(0.012964,-0.012943,0.000009);\n    const vec3 c5 = vec3(-0.005110,0.005073,-0.000008);\n    const vec3 c6 = vec3(-0.000046,0.000064,0.000003);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// rotates a vetor from SirBelfer4 (https://www.shadertoy.com/view/ssc3z4)\nvec3 rotate(vec3 v, vec3 a)\n{\n    // https://math.stackexchange.com/questions/2975109/how-to-convert-euler-angles-to-quaternions-and-get-the-same-euler-angles-back-fr\n    vec4 q;\n    vec3 c = cos(a * 0.5), s = sin(a * 0.5);\n    q.x = s.x * c.y * c.z - c.x * s.y * s.z;\n    q.y = c.x * s.y * c.z + s.x * c.y * s.z;\n    q.z = c.x * c.y * s.z - s.x * s.y * c.z;\n    q.w = c.x * c.y * c.z + s.x * s.y * s.z;\n    \n    // https://blog.molecular-matters.com/2013/05/24/a-faster-quaternion-vector-multiplication/\n    vec3 qt = 2.0 * cross(q.xyz, v);\n    return v + q.w * qt + cross(q.xyz, qt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y; //centered square UVs\n    float time = fract(0.2*iTime-0.5)-0.5; // used as z dimension    \n    float size = 0.9; //size of Ico\n    \n    vec3 point = vec3(uv, time)/size; //animated uv cords    \n    \n    // controls rotates around the center\n    vec3 camRot = vec3(0.5 - iMouse.yx / iResolution.yx, 0) * 2.0 * pi;\n    camRot.y = -camRot.y;\n    point = rotate(point, camRot);\n    \n    float ico = IcoDist(point); \n    \n    ico = clamp(ico, 0.,1.); //saturate so the cmap doesn't break\n    vec3 col = Cool(ico); // applying cosmetic colormap\n    \n    fragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}