{
    "Shader": {
        "info": {
            "date": "1689176274",
            "description": "Path tracing 3d spheres ",
            "flags": 0,
            "hasliked": 0,
            "id": "cslBWj",
            "likes": 0,
            "name": "Path Traced spheres",
            "published": 3,
            "tags": [
                "3d",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "ChibiDenDen",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "struct sphere {\nvec3 center;\nfloat r;\nvec3 color;\n};\n\nvec4 bgcolor = vec4(0.53, 0.81, 0.98, 1);\n\n#define MAX_SPHERES 4\n#define PI 3.14\n\nsphere spheres[MAX_SPHERES];\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat sphereDist(vec3 pos, sphere s) {\n   return length(pos - s.center) - s.r;\n}\n\nfloat distScene(vec3 pos) {\n    float dist = sphereDist(pos, spheres[0]);\n    for (int i = 1; i < MAX_SPHERES; i++) {\n        if (spheres[i].r > 0.0) {\n          dist = smin(dist, sphereDist(pos, spheres[i]), 0.3);\n        }\n    }\n    return dist;\n}\n\n\nvec3 colorScene(vec3 pos) {\n    vec3 color = vec3(0);\n    for (int i = 0; i < MAX_SPHERES; i++) {\n        if (spheres[i].r > 0.0) {\n          float dist = sphereDist(pos, spheres[i]);\n          color += spheres[i].color * max((1.0 - dist/0.3), 0.0);\n        }\n    }\n     return color;\n}\n\n\nvec3 trace(vec3 ray, vec3 pos) {\n   ray = normalize(ray);\n   float dist = distScene(pos);\n   int steps = 128;\n   for (int i = 0; i < steps; i++) {\n      pos = pos + ray*dist;\n      dist = distScene(pos);\n   }\n   return pos;\n}\n\nvec3 getNormal(vec3 pos) {\n   float dist = distScene(pos);\n   vec2 e = vec2(0.01, 0.0);\n   vec3 n = dist - vec3(distScene(pos - e.xyy), distScene(pos - e.yxy), distScene(pos - e.yyx));\n   return normalize(n);\n}\n\nvec4 shade(vec3 pos, vec3 light, vec3 camera) {\n    vec3 sunDir = pos - light;\n    sunDir = normalize(sunDir);\n\n    vec3 normal = getNormal(pos);\n    float ambiant = 0.2;\n    float diffuse = clamp(dot(-sunDir, normal), 0.0, 1.0) * 0.5;\n    vec3 R = normalize(2.0 * dot(normal, -sunDir) * normal + (sunDir)); \n    float specular = pow(clamp(dot(R, normalize(camera - pos)), 0.0, 1.0), 8.0) * 2.0; \n\n    float val = ambiant + diffuse + specular;\n    return vec4(colorScene(pos) * val, 1.0) + ambiant * bgcolor * 0.5;\n}\n\n#define AA_SAMPLES 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 camera = vec3(5.0*sin(iTime*0.7), 0, -5.0*cos(iTime*0.7));\n    vec3 up = vec3(0, 1, 0);\n    vec3 lightPos = vec3(-2.5, 1, -1);\n   \n    spheres[0].center = vec3(0.5, 0, cos(iTime*1.2)+0.2);\n    spheres[0].r = 0.5;\n    spheres[0].color = vec3(1.0, 0.0, 0.0);\n    \n    spheres[1].center = vec3(-0.5 + sin(iTime*2.0) * 1.2, 0, 0);\n    spheres[1].r = 0.3;\n    spheres[1].color = vec3(0.0, 1.0, 0.0);\n    \n    \n    spheres[2].center = vec3(0, sin(iTime) * 0.8+0.3, 0);\n    spheres[2].r = 0.4;\n    spheres[2].color = vec3(0.0, 0.0, 1.0);\n    \n    \n    spheres[3].center = vec3(0, sin(iTime) * 0.8+0.3, sin(iTime)*0.66 + 0.2);\n    spheres[3].r = 0.1;\n    spheres[3].color = vec3(0.0, 1.0, 1.0);\n    \n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5, 0.5);\n    \n    vec4 outcolor = vec4(0.0);\n    \n    for (int i = 0; i < AA_SAMPLES; i++) {\n        vec2 jitter = vec2(sin(2.0*PI*float(i) / float(AA_SAMPLES)), cos(2.0*PI*float(i) / float(AA_SAMPLES)))*1.75;\n\n        vec2 uv = fragCoord/iResolution.xy - vec2(0.5, 0.5);\n        uv += jitter/iResolution.xx;\n\n        uv = uv * 2.0;\n        uv = uv * iResolution.xy;\n        uv = uv / iResolution.yy;\n\n        vec3 right = cross(camera, up);\n        right = normalize(right);\n\n        vec3 ray = right*uv.x + up*uv.y - camera;\n\n        vec3 tracePos = trace(ray, camera);\n        \n        \n        if (distScene(tracePos) < 0.1) {\n          outcolor += shade(tracePos, lightPos, camera) / float(AA_SAMPLES);\n        } else {\n          outcolor += bgcolor / float(AA_SAMPLES);\n        }\n    }\n    \n      fragColor = outcolor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}