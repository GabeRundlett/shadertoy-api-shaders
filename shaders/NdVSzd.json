{
    "Shader": {
        "info": {
            "date": "1635141012",
            "description": "Click with the mouse to zoom in or out, left of the screen = in, right = out.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdVSzd",
            "likes": 8,
            "name": "Neutron Star.",
            "published": 3,
            "tags": [
                "space",
                "neutronstar"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "#define NUM_OCTAVES 5\n\nvec2 random2(vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)),\n\t\tdot(st, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(st) * 43758.5453123 * 0.3897);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n\tvec2 i = floor(st);\n\tvec2 f = fract(st);\n\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\n\treturn mix(mix(dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),\n\t\tdot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n\t\tmix(dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),\n\t\t\tdot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nmat2 rotate(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 mouse = iMouse.xy/iResolution.x * 8.0;\n    \n    if (mouse.x <= 0.0) mouse.x = 4.0;\n    \n    float zoom = mouse.x;\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    vec2 gv = fract(uv+0.5) - random2(uv);\n    uv *= zoom;\n    float dist = length(uv);\n    float angle = atan(uv.y, uv.x);\n    float c = fbm(vec2(cos(angle+iTime), sin(angle+dist)) / 2.0) * 2.0;\n    float f = (1.0 - sqrt(1.0 - dist)) / dist;\n\n    vec3 col = vec3(0.0);\n\n    vec2 nuv = uv;\n    nuv *= rotate(iTime);\n\n    // Neutron star\n    col += vec3(0.7, 0.9, 1.0) * smoothstep(0.17, 0.15, dist);\n    col += max((fbm(nuv*f*250.0)*2.0+0.5) * smoothstep(0.16, 0.15, dist) * vec3(0.7, 0.9, 1.0), 0.0);\n    \n    // Flaring\n    col += vec3(smoothstep(1.0, c, dist)) * vec3(0.7, 0.9, 1.0) * smoothstep(0.15, 0.16, dist);\n    \n    // Spikes\n    col += vec3(0.1 / abs(uv.y)) * smoothstep(2.0, -5.0, dist) * vec3(0.7, 0.9, 1.0) * smoothstep(1.0, 10.0, zoom);\n    \n    // Glow\n    col += vec3(smoothstep(1.1, 0.0, dist / 4.0) / 3.0) * vec3(0.7, 0.9, 1.0) * smoothstep(0.15, 0.16, dist);\n\n    // Stars\n    col += vec3(0.01 / length(gv));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}