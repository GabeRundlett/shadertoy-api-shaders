{
    "Shader": {
        "info": {
            "date": "1606024311",
            "description": "Some experimental noise functions for a stone texture",
            "flags": 0,
            "hasliked": 0,
            "id": "WstBW2",
            "likes": 1,
            "name": "Procedural Stone Texture",
            "published": 3,
            "tags": [
                "texture"
            ],
            "usePreview": 0,
            "username": "freedmand",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "// Some experimental noise functions for a stone texture\n\n// From https://thebookofshaders.com/13/\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat nnoise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 2\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * nnoise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nfloat onoise(vec2 v) {\n    return fbm(v + fbm(v) * nnoise(v) * 1000.0);\n}\n\nconst float EPS = 100.0;\nfloat noise(vec2 v) {\n    return (\n        onoise(v - vec2(EPS, 0.0)) +\n        onoise(v + vec2(EPS, 0.0))\n    ) / 2.0;\n}\n\nconst float minV = 0.49;\nconst float maxV = 0.51;\n\nvec3 noiseCol(vec2 v) {\n    float noiseVal1 = (clamp(noise(v * 1.0), minV, maxV) - minV) * (1.0 / (maxV - minV));\n    float noiseVal = noiseVal1 / 3.0 + 0.66;\n    return mix(vec3(0.85, 0.8, 0.8), vec3(0.5, 0.5, 0.6), pow(noiseVal, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(noiseCol(uv * 5.0),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}