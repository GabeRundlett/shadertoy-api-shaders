{
    "Shader": {
        "info": {
            "date": "1668120615",
            "description": "Just another noise experiment gone off in a random direction. ðŸ™ˆ\nTurns into something entirely different yet fun with turbulence = true.",
            "flags": 0,
            "hasliked": 0,
            "id": "dsS3WK",
            "likes": 2,
            "name": "Sunset on sandy seabottom",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "simplex"
            ],
            "usePreview": 0,
            "username": "larserik",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "float speed = .3;\nfloat scale = 7.2;\nint octaves = 4;\nint repeats = 1;\nbool turbulence = false;\n\nfloat fbm (in vec3 st) {\n    float value = 0.0;\n    float amplitude = 1.;\n    float total = 0.;\n\n    for (int i = 0; i < octaves; i++) {\n        total += amplitude;\n        value += amplitude * snoise(st);\n        st *= 2.;\n        amplitude *= 0.5;\n    }\n\n    return value / total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float time = iTime * speed;\n    float dist = sqrt(uv.x*uv.x+uv.y*uv.y);\n\n    uv *= scale;\n\n    float mag = .2;\n\n    float n = fbm(vec3(uv, time*.2));\n    \n    for (int i = 0; i<repeats; i++) {\n      float ang = n * 3.141592;\n      n = fbm(vec3(uv + vec2(cos(ang), sin(ang)) * n, time*.2));\n    }\n\n    if (turbulence) {\n        n = abs(n);\n    } else {\n        n = n*.5 + .5;\n    }\n\n    vec3 color = vec3(n*.58, n*.65, n*.997);\n    \n    if (dist < (snoise(vec3(uv * vec2(1., 2.5), time*.2))+1.) * .35 && color.b > .3) {\n      color.r *= 1. + (.9 - dist);\n      color.b *= dist;\n    }\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Noise from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//\tSimplex 3D Noise by Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}