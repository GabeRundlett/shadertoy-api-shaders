{
    "Shader": {
        "info": {
            "date": "1622979830",
            "description": "Adaptation from https://www.youtube.com/watch?v=NCpaaLkmXI8 to \"custom framework\"",
            "flags": 0,
            "hasliked": 0,
            "id": "slXGWf",
            "likes": 8,
            "name": "大龙猫 - Refract Test",
            "published": 3,
            "tags": [
                "refraction"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "\nfloat box(vec3 p,vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat diam(vec3 p,float s){\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n//from Iq\nfloat checkersTextureGradBox( in vec2 p, in vec2 ddx, in vec2 ddy )\n{\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;  \n    vec2 i = 2.0*(abs(fract((p-0.5*w)/2.0)-0.5)-abs(fract((p+0.5*w)/2.0)-0.5))/w;\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nvec2 sdf(vec3 p){\n   vec3 op = p;\n   vec2 h;\n   h.x = length(p)-1.;\n   h.y = 1.;\n  \n  p.xz*=rot(.7885+iTime*.125);\n  p.xz = abs(p.xz)-2.;\n  p+=vec3(0.,.25,0.);\n  p.xz *=rot(.785);\n  p.xy *=rot(.785+iTime);\n  vec2 t;\n  t.x = mix(box(p,vec3(.7)),diam(p,.7),(sin(iTime*.66)*.5+.5)*1.2)*.7; // Very nice result mixing box and diam\n  t.y = 2.;\n  h = t.x < h.x ? t:h;\n  \n  t.x = dot(op+1.,vec3(0.,1.,0.));\n  t.y = 3.;\n \n  h = t.x < h.x ? t:h;\n   return h;\n}\n\n#define q(s) s*sdf(p+s).x\nvec2 nv=vec2(-.0001,.0001);\nvec3 norm(vec3 p){return normalize(q(nv.xyy)+q(nv.yxy)+q(nv.yyx)+q(nv.xxx));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n vec3 col=vec3(.1);\n  vec3 ro=vec3(.0,.0,-5.),rd=normalize(vec3(uv,1.)),rp=ro;\n  vec3 light=vec3(1.,2.,-3.);\n  \n  bool inside = false;\n  vec3 refAcc = vec3(.0);\n  for(float i=0.;i<=69.;i++){ // Difference from Art of Code : One big march\n    \n      vec2 d = sdf(rp); // Usual things\n\n      d.x = abs(d.x); // So, when you march \"inside\",  sdf is negative (the S of sdf)\n      //On tutorial there is a \"side\" that * by -1 so that the ray always march \"ahead\" \n      // So far, never have to use negative distance per say, so doing an abs to \n      // always have positive distance.\n            //EDIT : Looks like can  create some artifact, bref, beware, adapt improvise, overcome\n\n      rp+=rd*d.x; \n      if(d.x <=0.001){ //  If we hit a surface\n          \n        if(d.y == 1.){ // The boring sphere\n          vec3 n = norm(rp);\n           col = vec3(1.)*dot(normalize(light-rp),n);\n           break;\n        } else if (d.y == 3.){ // The Checker floor\n             vec3 n = norm(rp);\n            vec2 ddx_uvw = dFdx( rp.xz ); \n            vec2 ddy_uvw = dFdy( rp.xz ); \n           col = vec3(1.)*dot(normalize(light-rp),n)*checkersTextureGradBox(rp.xz,ddx_uvw,ddy_uvw);\n           break;\n        } else if(d.y==2.) { // the Refractive (?) surface\n              \n              float IOR = 1.45;\n            if(!inside){ // Need to track if it's inside or outside\n              refAcc += vec3(-10.2,.0,.0); // Add some \"tint\" \n              vec3 n = norm(rp);\n              rd = refract(rd,n,1.0/IOR); // Less dense to more dense => 1./IOR\n              rp-=n*.001*5.; // The almighty offset du cul, but here we need to go \"inside\" so -n\n              inside = true;\n            } else if (inside) {\n            i/=2.;\n                refAcc += vec3(.1,.2,.3); // Add some \"tint\" \n     \n               vec3 n = -norm(rp); // norm will give always the norm that \"get out\", so whe need to negate to have the norm \"inside\"\n        \n               vec3 _rd = refract(rd,n,IOR); // More dense to les dense => IOR  . Headache when multiple refract materials :D\n          \n                  if(dot(_rd,_rd)==0.) \n                    { \n                          rd=reflect(rd,n);\n                          rp+=rd*.1;\n                      } else { inside=false;\n                          rd=_rd;\n                        \n                        rp -=0.05*n;\n                 \n                      }\n              }\n        }\n       }  \n        \n  }   \n  col +=refAcc;\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}