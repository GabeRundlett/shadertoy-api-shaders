{
    "Shader": {
        "info": {
            "date": "1634483855",
            "description": "2d basic building",
            "flags": 0,
            "hasliked": 0,
            "id": "fdVSWz",
            "likes": 5,
            "name": "2d basic building",
            "published": 3,
            "tags": [
                "2dbasicbuilding"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "///2d basic building-JFP\n///por jorge2017a2...2021-oct-09\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{return length(p) - r;}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\nfloat sdParallelogram( in vec2 p, float wi, float he, float sk )\n{\n    vec2 e = vec2(sk,he);\n    p = (p.y<0.0)?-p:p;\n    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);\n    vec2  d = vec2(dot(w,w), -w.y);\n    float s = p.x*e.y - p.y*e.x;\n    p = (s<0.0)?-p:p;\n    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);\n    d = min( d, vec2(dot(v,v), wi*he-abs(s)));\n    return sqrt(d.x)*sign(-d.y);\n}\n\nfloat dot2( vec2 v ) { return dot(v,v); }\nfloat sdTunnel( in vec2 p, in vec2 wh )\n{\n    p.x = abs(p.x); p.y = -p.y;\n    vec2 q = p - wh;\n\n    float d1 = dot2(vec2(max(q.x,0.0),q.y));\n    q.x = (p.y>0.0) ? q.x : length(p)-wh.x;\n    float d2 = dot2(vec2(q.x,max(q.y,0.0)));\n    float d = sqrt( min(d1,d2) );\n    \n    return (max(q.x,q.y)<0.0) ? -d : d;\n}\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\n\nvec3 Suelo1(vec2 p, vec3 col)\n{   col=DrawFig(vec3(0.45), col, p.y-2.5 );\n return col;\n}\n\nvec3 colina(vec2 p, vec3 col)\n{   p.x=opRep1D(p.x, 8.5 );\n    float d1= sdTriangleIsosceles(vec2(p.x,-p.y+0.5), vec2(4.0,2.0) );\n    col=DrawFigBordeCol(vec3(0.0,0.95,0.2), col, d1 , vec3(0.35));\n    return col;\n}\n\nvec4 sujeto(vec2 p, vec3 col)\n{  float d1= sdCircle(p-vec2(0.0,0.0), 0.25);\n    float d2= sdBox(p-vec2(0.0,-0.8), vec2(0.1,0.6) ); //cuerpo\n    float d3=sdOrientedBox( p-vec2(0.0,-1.2), vec2(1.0,0.0), vec2(0.0,0.8), 0.2 );\n    float d4=sdOrientedBox( p-vec2(-1.0,-1.2), vec2(0.0,0.0), vec2(1.0,1.0), 0.2 );\n    float d5=sdOrientedBox( p-vec2(0.0,-2.2), vec2(1.0,0.0), vec2(0.0,0.8), 0.2 );\n    float d6=sdOrientedBox( p-vec2(-1.0,-2.2), vec2(0.0,0.0), vec2(1.0,1.0), 0.2 );\n    float d=unionSDF(d1,d2);\n    d=unionSDF(d,d3);\n    d=unionSDF(d,d4);\n    d=unionSDF(d,d5);\n    d=unionSDF(d,d6);\n    \n    return vec4(vec3(0.0),d);\n}\n\n\n\nvec3 Edificio0(vec2 p, vec3 col)\n{  \n    float d1=sdBox(p-vec2(-4.0,4.0), vec2(10.0,3.5) ); //frente\n    float d2=sdParallelogram( p.yx-vec2(5.0,7.0), 3.5, 1.0, 1.0 ); //pared derecha\n    float d3=sdParallelogram( p-vec2(-3.0,8.5), 10.0, 1.0, 1.0 );  //techo\n    \n    //ventana\n    float d4= sdTunnel(p- vec2(-10.0,2.0), vec2(1.0,1.5) );\n    float d5= sdTunnel(p- vec2(-6.0,2.0), vec2(1.0,1.5) );\n    float d6= sdTunnel(p- vec2(-2.0,2.0), vec2(1.0,1.5) );\n    float d7= sdTunnel(p- vec2(2.0,2.0), vec2(1.0,1.5) );\n    \n    vec3 coltex=texture(iChannel0, p*0.25).rgb;\n    //col= DrawFigBorde(vec3(0.2),col,d1);\n    col= DrawFigBorde(coltex,col,d1);\n    col= DrawFigBorde(vec3(0.3),col,d2);\n    col= DrawFigBorde(vec3(0.45),col,d3); //-\n    col= DrawFigBorde(vec3(0.0),col,d4);\n    col= DrawFigBorde(vec3(0.0),col,d5);\n    col= DrawFigBorde(vec3(0.0),col,d6);\n    col= DrawFigBorde(vec3(0.0),col,d7);\n    return col;\n}\n\n\nvec3 Edificio1(vec2 p, vec3 col)\n{  \n    ///suelo\n    float d1=sdParallelogram( p-vec2(-6.0,-2.5), 7.0, 2.0, 2.0 );\n    float d2=sdParallelogram( p-vec2(-5.8,-2.9), 7.0, 2.0, 2.0 );\n    float d3=sdBox(p-vec2(-8.0,-4.7), vec2(7.0,0.25) );\n    //edificio\n    float d4=sdBox(p-vec2(-6.0,1.0), vec2(4.0,4.0) ); //frente \n    float d5=sdParallelogram( p.yx-vec2(2.0,-1.0), 4.0, 1.0, 1.0 ); //pared derecha\n    float d6=sdParallelogram( p-vec2(-5.0,6.0), 4.0, 1.0, 1.0 );  //techo\n    //marco\n    float d7=sdBox(p-vec2(-6.0,1.0), vec2(0.5,4.0) );\n    float d8=sdBox(p-vec2(-6.0,1.0), vec2(4.0,0.5) );\n    //ventana\n    float d9= sdTunnel(p- vec2(-8.0,-1.0), vec2(1.0,1.5) );\n    float d10= sdTunnel(p-vec2(-4.0,-1.0), vec2(1.0,1.5) );\n    float d11= sdTunnel(p-vec2(-8.0,3.5), vec2(1.0,1.5) );\n    float d12= sdTunnel(p-vec2(-4.0,3.5), vec2(1.0,1.5) );\n    \n    col= DrawFigBorde(vec3(0.6),col, d2 );\n    col= DrawFigBorde(vec3(0.5,0.6,0.1),col, d1 );\n    col= DrawFigBorde(vec3(0.6),col, d3 );\n    //col= DrawFigBorde(vec3(0.6),col,d4);\n    vec3 coltex=texture(iChannel0, p*0.25).rgb;\n    col= DrawFigBorde(coltex,col,d4);\n    col= DrawFigBorde(vec3(0.3),col,d5);\n    col= DrawFigBorde(vec3(0.7),col,d6);\n    col= DrawFigBorde(vec3(0.8),col,d7);\n    col= DrawFigBorde(vec3(0.8),col,d8);\n    \n    col= DrawFigBorde(vec3(0.2,0.1,1.0),col,d9);\n    col= DrawFigBorde(vec3(0.2,0.1,1.0),col,d10);\n    col= DrawFigBorde(vec3(0.2,0.1,1.0),col,d11);\n    col= DrawFigBorde(vec3(0.2,0.1,1.0),col,d12);\n    return col;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.25;\n    uv*=10.0;\n    \n    uv.x+=4.0*sin(iTime*2.0);\n    col=colina(uv-vec2(0.0,4.0),col);\n    col=Suelo1(uv, col);\n    col=Edificio0(uv-vec2(-10.0,0.0),col);\n    col=Edificio0(uv-vec2(14.0,0.0),col);\n    col= Edificio1(uv-vec2(-5.0,-2.0),col);\n    col= Edificio1(uv-vec2(15.0,-2.0),col);\n    vec4 col4=sujeto(uv, col);\n    col=DrawFigBorde(col4.xyz, col, col4.w);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}