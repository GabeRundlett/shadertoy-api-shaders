{
    "Shader": {
        "info": {
            "date": "1632245310",
            "description": "Hello shadertoy community =)  I am new to shaders and shadertoy, Here is my first  and hopefully not final upload. \nCriticism is very welcome =)",
            "flags": 0,
            "hasliked": 0,
            "id": "sdVGDV",
            "likes": 6,
            "name": "Hello shadertoy. Newbie here",
            "published": 3,
            "tags": [
                "voronoi",
                "psychedelic",
                "hue",
                "psy"
            ],
            "usePreview": 0,
            "username": "fyisic123",
            "viewed": 459
        },
        "renderpass": [
            {
                "code": "#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec3(0,-2.*PI/3.,2.*PI/3.) ) )     // Credit: https: shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n#define rotate(a) mat2(cos( a + vec4(0,33,11,0)))                             // or on shadertoy: FabriceNeyret2                  \n\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\n\nvec2 hash22(vec2 p)  // Random noise. Credit: https://www.youtube.com/watch?v=l-07BXzNdPw\n{\n    vec3 a = fract(p.xyx * vec3(123.34,234.34,345.65));    \n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 UV = (2.0 * fragCoord - iResolution.xy) / iResolution.y;  // Convert coordinate to (-1,-1) -> (1.0, 1.0)                    \n    \n        \n    UV += smoothstep(0.25  ,  -0.25, length(UV)-0.6); // Distortion effect    \n    UV *= (3.0 + (3.0 * abs(sin(t * 0.05))));  // Animate camera zoom    \n    UV *= rotate(sin((t+ sin(1.2)) * 0.5)); // Animate camera rotation        \n    UV += (2.0 + (1.0 * sin(t))) * vec2(sin(t), cos(t)); // Animate camera panning;\n    \n    \n    \n    vec2 GV = fract(UV) - 0.5;    // Voronoi  Credit: https://www.youtube.com/watch?v=l-07BXzNdPw\n    float minDist = 100.0;\n    vec2 ide = floor(UV);    \n    for (float y = -1.0; y <= 1.0; y++)\n        for (float x = -1.0; x <= 1.0; x++)\n        {\n            vec2 offs = vec2(x, y);\n            vec2 n = hash22(ide + offs);\n            vec2 p = offs + sin(n * t) * 0.5;\n            float d = length(GV - p);\n            \n            if (d < minDist)\n            {\n                minDist = d;                \n                               \n            }\n            \n        }                       // end of Voronoi\n        \n        \n    \n    minDist = abs(sin(minDist * (4.0 + (3.0 * sin(t))))); // Animate mindist\n    \n    minDist -= smoothstep(0.8, 1.0, minDist); // make spaces between voronoi black\n    vec3 col = hue(fract(t * 0.1) + (0.85 *fract(minDist + (t * 0.2))));    // Apply hue color\n    fragColor = vec4(mix(vec3(0), col, minDist),1) ; // final color output\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}