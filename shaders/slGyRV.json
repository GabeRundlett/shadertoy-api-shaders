{
    "Shader": {
        "info": {
            "date": "1661807350",
            "description": "A simple Trial of how vanilla flowmap looks in a situation similar to my directional flow",
            "flags": 0,
            "hasliked": 0,
            "id": "slGyRV",
            "likes": 3,
            "name": "Temporal Flowmap",
            "published": 3,
            "tags": [
                "flow",
                "advection",
                "flowmap"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nStandart Temporal Flowmap in a similar environment to my directional flow \nimplementations. Two textures are moved by a motion vector of alternating \nstrength, so that resetting the motion back to the origin is masked by the \nalternate texture.\n\nIf you want better looking Flowmap try Directional Flow:\nhttps://www.shadertoy.com/view/7dtBWl\n\nCatlikecoding has a nice tutorial explaining how Temporal Flowmaps works:\nhttps://catlikecoding.com/unity/tutorials/flow/texture-distortion/\n*/\n\n// smooth hill like tiling\nfloat hills(vec2 uv) {\n    vec2 d = sin((uv-0.5)*3.142); //remove pi sized grid\n    return (d.x+d.y)*0.25+0.5;// add and rescale to 0-1\n}\n\n// Simplified Smoothstep https://www.desmos.com/calculator/un0o21eokv\nfloat smoothValue(float x) {\n    x = clamp(x, 0.0, 1.0); // prevents out of bounds and some float errors\n    return x * x * (3.0 - 2.0 * x); // smoothstep(0,1,x)\n}\n\n// temporal Flowmap\nvec4 flowmap(sampler2D tex, vec2 uv, vec2 direction, float time) {\n\n    // generate timers \n    float progressA = fract(time)-0.5;\n    float progressB = fract(time +0.5)-0.5;\n    \n    // Offset each new phase\n    vec2 jump = vec2(0.248, 0.201);\n    vec2 offsetA = (time - progressA) * jump;\n    vec2 offsetB = (time - progressB) * jump +0.5;\n    \n    // sample color texture using different timers to scale offset strength\n    vec4 colorA = texture(tex, uv -progressA *direction +offsetA);\n    vec4 colorB = texture(tex, uv -progressB *direction +offsetB);\n    \n    // Generate 0-1 weight for interpolation\n    float weight = abs(progressA*2.); \n    \n    // Apply a little bit of contrast for faster transitions\n    //weight = smoothValue(weight);\n    \n    // Interpolate the two offset samples\n    return mix(colorA, colorB, weight);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime* 0.5; // flow speed multiplier\n    float strength = 0.7; // flow distrotion strength\n    float scale = 8.0;  // scale of the \"wave\" texture\n    \n    //square UV coords\n    vec2 uv = fragCoord/iResolution.y; \n    \n    // Sample noise\n    vec4 noise = texture(iChannel1, uv*0.1);\n    \n    // Generate 2D Vector Field range -1 t0 1\n    vec2 direction = noise.xy *2.-1.;\n    direction *= -strength; // scale by strength\n    \n    vec3 flow = flowmap(iChannel0, uv*scale, direction, time).xyz;\n    \n    flow += vec3(0.0,0.2,0.5); //adding arbitrary watery color\n    \n    fragColor = vec4(flow,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}