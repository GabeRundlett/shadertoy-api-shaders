{
    "Shader": {
        "info": {
            "date": "1691184736",
            "description": "Inspired by Art of Code on YT, tutorial: https://www.youtube.com/watch?v=-adHIyjIYgk&list=PLGmrMu-IwbgsVjE7SAtFaWyhZXyBjJNnO&index=7",
            "flags": 0,
            "hasliked": 0,
            "id": "dlfcD2",
            "likes": 1,
            "name": "Colorful 2D Raymarching gyroid",
            "published": 3,
            "tags": [
                "raymarching",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "jackjackdev",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "// 2D Raymarching gyroid\n// Used Art of Code's gyroid tutorial on YT as a starting spot, tutorial is here: https://www.youtube.com/watch?v=-adHIyjIYgk&list=PLGmrMu-IwbgsVjE7SAtFaWyhZXyBjJNnO&index=7\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n    p *= scale;\n    return abs(dot(sin(p*2.5), cos(p.zxy*.56)) - bias) / scale - thickness;\n}\n\n\nfloat GetDist(vec3 p) {\n    float box = sdBox(p, vec3(1));\n    \n    float gyroid = sdGyroid(p, 8., .05, 1.5);\n    \n    float d = max(box, gyroid * .7);\n    \n    return d;\n}\n\n\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0.5,0.,0), 2.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n    }\n    \nd = pow(abs(d), 0.5); // Apply contrast function\n    col *= 0.;\n    d = sdGyroid(vec3(uv.x, uv.y, cos(iTime)*.1), 10., .05, 1.0);\n    col+= abs(d) * 7.;\n    //col += d*8.;\n    col.rbg = vec3(col.r * sin(iTime) + .5, col.g * cos(iTime) + .5, col.b * sin(iTime)*.5 + .5);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}