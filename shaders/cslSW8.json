{
    "Shader": {
        "info": {
            "date": "1668796090",
            "description": "looks kinda cool",
            "flags": 0,
            "hasliked": 0,
            "id": "cslSW8",
            "likes": 8,
            "name": "Basic Fractal Brownian Motion",
            "published": 3,
            "tags": [
                "basic",
                "fbm"
            ],
            "usePreview": 1,
            "username": "oseday",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n\n// rotation on all axis\nconst float matm = 0.485;\n\nconst mat3 m1 = mat3( \n 1.6, 1.2, 0.0,\n-1.2, 1.6, 0.0,\n 0.0, 0.0, 1.0\n) * matm;\n\nconst mat3 m2 = m1 + mat3(\n 1.0, 0.0, 0.0, \n 0.0, 1.6, 1.2, \n 0.0,-1.2, 1.6\n) * matm;\n\nconst mat3 m3 = m2 + mat3(\n 1.6, 0.0, 1.2,\n 0.0, 1.0, 0.0, \n-1.2, 0.0, 1.6\n) * matm;\n\n//fbm from: https://www.shadertoy.com/view/4tdSWr\nfloat fbm(vec3 n) {\n\tfloat total = 0.0, amplitude = 0.70;\n\tfor (int i = 0; i < 8; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn = m3 * n;\n\t\tamplitude *= 0.55;\n\t}\n\treturn total;\n}\n\nfloat ftmod(float x, float d) {\n    return mod(x,d)/d;\n}\nvec3 ftmod(vec3 x, float d) {\n    return mod(x,d)/d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n    \n    float ta = iTime*0.025;\n    vec2 targetuv = mat2(cos(ta), sin(ta), -sin(ta), cos(ta)) * (uv - vec2(0.5*iResolution.x/iResolution.y, 0.5));\n    \n    uv += iMouse.xy*0.01;\n    \n    float angle = iTime*0.1;\n    float q = fbm(vec3(uv,0.0) + vec3(cos(angle)*0.1, sin(angle)*0.1, iTime*0.0068));\n    \n    targetuv -= q*3.6;\n\n    vec4 tex = textureLod(iChannel0, targetuv*1.2, 1.0);\n\n    fragColor = vec4(tex.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}