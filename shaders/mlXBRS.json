{
    "Shader": {
        "info": {
            "date": "1695534183",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "mlXBRS",
            "likes": 5,
            "name": "VolumetricTest_1",
            "published": 3,
            "tags": [
                "3d",
                "volumetrics"
            ],
            "usePreview": 1,
            "username": "felipunkerito",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "#define PI acos(-1.)\n#define TWO_PI PI * 2.0\n#define QUARTER_PI PI * 0.25\n#define A1 0\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1030);\n    p3 += dot(p3, p3.zyx + 31.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rot(const in float a)\n{\n    vec2 sC = vec2(sin(a), cos(a));\n    return mat2(sC.x, -sC.y,\n                sC.y,  sC.x);\n}\n\nfloat map(vec3 p)\n{\n    vec3 oP = p;\n    //p.xy = mod(p.xy + .25, 0.5)-.25;\n    //p.z = abs(p.z-0.5)-0.2;\n    const float t = 2.;\n    float fre = t;\n    float am = 0.5;\n    for (int i = 0; i < 1; ++i)\n    {\n        vec2 pXY = p.xy;\n        //pXY *= rot(p.z*fre);\n        //p.z += am*(sin(p.z*fre) + 0.5*cos(pXY.y*fre));\n        //p.xy *= rot(exp(-p.z)*fre);\n        //p.z += am;\n        am *= 1.;\n        fre *= 2.;\n    }\n    //p.xz *= rot(p.y*20.);\n    float s = (p.z)*0.+0.;//length(p)-.8;\n    \n    float amp = 1.2, freq = 0.2, res = 0.;\n    for (int i = 0; i < 3; ++i)\n    {\n        vec3 pT = p;\n        //pT.zy *= rot(-float(3-i)*QUARTER_PI*iTime*0.012);\n        res += amp * (dot(texture(iChannel0, pT * freq + iTime*.005), vec4(0.25))*2.0-1.0);\n        amp *= .7;\n        freq *= 2.56;\n    }\n    //float c = abs(length(p.xz)-.25)-.1;\n    //s = max(s, -c);\n    float r;// = min(s -res*.05, res*.01);\n    \n    float repO = 1.;\n    float rep = 1. / repO;\n    float hRep = rep * 0.5;\n    \n    vec3 id = floor((p+hRep)*repO);\n    //if (/*hash13(id)*/id.x > 0.1)\n    {\n        //discard;\n        oP = p;//mod(p + hRep, rep) - hRep;\n    \n        //if (hash13(id) < 0.4)\n        {\n          //  r = 0.;//oP += 10000.+0.;\n        }\n        //else\n        {\n            r = oP.z-0.-rep*0.1;\n            r = r + res*rep*.3;\n        }\n    }\n    \n    \n    return r;\n}\n\nvec2 march(const in vec3 ro, const in vec3 rd, const in vec3 lDir, out vec3 res)\n{\n\n    const uint marchSteps = uint(512),\n               shadowSteps = uint(4);\n\n    float d = 0.0, t = 0.0;\n    float stepSize = 1. / float(marchSteps);\n    //float sigmaT = 1.0;\n    //float transparency = 1.0;\n    \n    float stepL = 1. / float(shadowSteps);\n    \n    vec3 lD = lDir * stepL;\n    vec3 rD = rd * stepSize;\n    \n    res = vec3(0.);\n    \n    //vec3 ligC = vec3(0.600,0.678,0.529);\n    \n    float curDensity = 0.;\n    float transmittance = 1.;\n    vec3 lightEnergy = vec3(0.);\n    \n    //float accumDist = 0.;\n    \n    vec3 bac = mix(vec3(0.996,0.867,0.584), vec3(0.408,0.596,0.973), rd.z+0.5);\n    \n    for (uint i = 0u; i < marchSteps; ++i)\n    {\n    \n        #if (A1 == 0)\n        vec3 p = ro + rd * t;\n        d = map(p);\n        \n        if (d < 0.001)\n        {\n             float sha = 0.0;\n             \n             vec3 pL = p;\n             \n             float lT = 0.;\n             \n             for (uint j = 0u; j < shadowSteps; ++j)\n             {\n                 pL = pL + lDir * lT;\n                 float lD = map(pL);\n                 sha += lD;\n                 \n                 lT += stepL;\n             }\n             \n            curDensity = (d*-1.);\n            float shadowTerm = exp(-sha * stepL);\n            float absorbedLight = clamp(shadowTerm * curDensity * 0.95, 0., 1.);\n            lightEnergy += vec3(1.000,0.678,0.655) * absorbedLight * transmittance;// * stepSize;\n            transmittance *= 1.-curDensity;\n        }\n        if (transmittance < 1e-3)\n        {\n            break;\n        }\n    \n        t += stepSize; \n    \n        #else\n        if (transparency < 1e-3)\n        {\n            break;\n        }\n        vec3 p = ro + rd * t;\n        d = map(p);\n        \n        if (d <= 0.0)\n        {\n\n            float sample_attenuation = exp(-stepSize * d * sigmaT);\n            transparency *= sample_attenuation;\n\n            float lT = 0.0;\n            float tau = 0.0;\n            float tt = 0.;\n            for (uint j = 0u; j < shadowSteps; ++j)\n            {\n                vec3 lP = p + lDir * tt;\n                tau += map(lP);\n                tt += stepL;\n            }\n            float lightRayAtt = exp(-tau * stepL);\n\n            res += lightRayAtt * transparency * stepSize;\n        \n        }\n        t += stepSize;\n        #endif\n    }\n    #if (A1 == 0)\n    res = lightEnergy;\n    #endif\n    //res = mix(res, bac*(1.-transmittance), lightEnergy);\n    res += bac * transmittance;\n    \n    //res = bac * transmittance + res;\n\n    return vec2(t, d);\n}\n\nvec3 shade(const in vec3 ro, const in vec3 rd)\n{\n    vec3 r = vec3(0);\n    vec2 mou = iMouse.xy / iResolution.xy;\n    float t = iTime*.1;\n    vec3 lDir = normalize(vec3(0.0, 0., -.0)+\n    vec3(sin(t)*2.2, 100., cos(t)*2.));\n    vec2 m = march(ro, rd, lDir, r);\n    return r;// vec3(m.x*.02);\n}\n\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (-iResolution.xy + fragCoord * 2.0) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n\n    vec3 ro = vec3(0.0, 0.1, -1.5);\n    vec3 rd = normalize(vec3(uv, 1.0));\n\n    #if 1\n\n    mat2 r = rot(mou.y*-PI*.05);\n\n    //ro.z += iTime *.2;\n    //rd.z += iTime *.2;\n\n    ro.yz *= r;\n    rd.yz *= r;\n    \n    r = rot(mou.x*TWO_PI);\n\n    ro.xy *= r;\n    rd.xy *= r;\n    \n    \n    \n    #endif\n    \n    \n\n    vec2 recRes = 1./iResolution.xy;\n    float mRecRes = max(recRes.x, recRes.y);\n    \n    float rat = iResolution.x/iResolution.y;\n    \n    float v = sdRoundedBox( uv, vec2(.87, 0.8)*vec2(rat, 1.), vec4(0.));\n\n    // Time varying pixel color\n    vec3 col0 = mix(vec3(1), vec3(0), smoothstep(0., mRecRes*150., v));\n\n    vec3 col = shade(ro, rd);\n\n    // Output to screen\n    \n    fragColor = mix(vec4(col, 1.), vec4(0.), vec4(1.-col0, 1.));\n    //fragColor = vec4(pow(col, vec3(1.)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}