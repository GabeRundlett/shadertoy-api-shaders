{
    "Shader": {
        "info": {
            "date": "1537327151",
            "description": "\nTranslucent effect from tdhooper: https://www.shadertoy.com/view/4lGyW1\nPrimitives from iq: https://iquilezles.org/articles/distfunctions/distfunctions.htm\nColors from iq: https://iquilezles.org/articles/palettes/palettes.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "llyyRd",
            "likes": 16,
            "name": "Translucent Glowing Ball",
            "published": 3,
            "tags": [
                "glow",
                "twist"
            ],
            "usePreview": 0,
            "username": "cold_code",
            "viewed": 2189
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2018 Patryk Ozga\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst vec3[4] palette = vec3[4](vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5),\n                                vec3(2.0, 1.0, 0.0), vec3(0.5, 0.20, 0.25));\n\nconst float _2PI = 6.28318;\nconst float _PI_2 = 1.570796;\n\nvec3 pal(in float t, in vec3[4] pal) {\n  return pal[0] + pal[1] * cos(_2PI * (pal[2] * t + pal[3]));\n}\n\nvec2 sdTorus(vec3 p, vec2 t) {\n  float rad = length(p.xz);\n  float dist = length(vec2(rad - t.x, p.y)) - t.y;\n  // float pos = clamp(1.*dot(p.xz, vec2(1., 0.))/rad, 0.,1.);\n  float pos = pow(1. * dot(p.xz, vec2(1., 0.)) / rad, 4.);\n  return vec2(dist, pos);\n}\n\nvec3 opTwist(vec3 p) {\n  float c = cos(10.0 * p.y + 10.0);\n  float s = sin(10.0 * p.y + 10.0);\n  mat2 m = mat2(c, -s, s, c);\n  return vec3(m * p.xz, p.y);\n}\n\nvec2 map(in vec3 pos) {\n  // vec2 res = vec2(.3 * sdTorus(opTwist(pos - vec3(0., 0., 0.)),\n  //                              vec2(0.90 * (sin(iTime) + 2.8) / 2., 0.2)),\n  // vec2 mouse = iMouse.xy / iResolution.y;\n  vec2 torus = sdTorus(opTwist(pos - vec3(0., 0., 0.)),\n                       vec2(0.90 * (1. + 2.8) / 2., 0.2));\n  vec2 res = vec2(.3 * torus.x, torus.y);\n  // clamp((pos.y+1.)/3., 0., 1.));\n\n  return res;\n}\n\nvec4 castRay(vec3 ro, vec3 rd) {\n  float tmin = 0.0;\n  float tmax = 20.0;\n\n  float t = tmin;\n  float bandGap = .25;\n  vec3 m = vec3(0.); // pow(vec3(.15,0,.2), vec3(2.2));\n\n  for (int i = 0; i < 100; i++) {\n    float precis = 0.0004 * t;\n    vec2 res = map(ro + rd * t);\n    if (t > tmax)\n      break;\n    t += max(precis, abs(res.x) * bandGap);\n    vec3 col = 10. * pal(res.y, palette);\n    // vec3 col = vec3(res.y);\n    m += col * pow(max(0., (.02 - abs(res.x))) * 19.5, 9.5) * 150.;\n    m += col * .001 * bandGap;\n  }\n  return vec4(t, m);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  vec4 res = castRay(ro, rd);\n  float t = res.x;\n  vec3 m = res.yzw;\n\n  return m;\n}\n\nmat3 setCamera(vec3 ro, vec3 ta, vec3 cr) {\n  vec3 cw = normalize(ta - ro);\n  vec3 cp = cr;\n  vec3 cu = normalize(cross(cp, cw));\n  vec3 cv = normalize(cross(cu, cw));\n  return mat3(cu, cv, cw);\n}\n\nfloat gain(float x) {\n  if (x < 0.) {\n    return 0.;\n  } else if (x < .25) {\n    return 8. * pow(2. * x, 5.);\n  } else if (x < .5) {\n    return .5 - (8. * pow(1. - 2.*x, 5.));\n  } else if (x < .75) {\n      return .5 + abs((8. * pow(1. - 2.*x, 5.)));\n  } else if (x <= 1.) {\n    return 1. - 8. * pow(2. * (1. - x), 5.);\n  }\n  return 1.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\n  vec2 mouse = iMouse.xy / iResolution.xy; // - vec2(.5);\n\n  float time = gain(fract(iTime/10.));\n  //float time = gain(mouse.x);\n  // vec3 ro = vec3(3.5 * cos(time), 1.0 + .5 * 0.*cos(time), 3.5 * sin(time));\n  // vec3 ro = vec3(3.5, 1.0 + 1.5 * sin(time), 3.5);\n  // vec3 ro = vec3(5.5*(mouse.x+.5), 6.0*(mouse.y - .5), 5.5*(mouse.x+.5));\n  // vec3 ro = vec3(6. * cos(_2PI * gain(mouse.x)), 6. * sin(_2PI *\n  // gain(mouse.x)), 0.);\n  vec3 ro = vec3(6. * cos(_2PI * time), 6. * sin(_2PI * time), 0.);\n  // float t = .2;\n  // vec3 ro = vec3(6.*cos(_2PI*t), 6.*sin(_2PI*t), 0.);\n  // vec3 ta = vec3(0., 3.*mouse.x, 0.);\n  // vec3 ro = vec3(1., 0., 0.);\n  vec3 ta = vec3(0., 0.01, 0.);\n  float cutoff = .0;\n  mat3 ca = setCamera(ro, ta, vec3(0., time < .25 || time > .75 ? -1. : 1., 0.));\n  vec3 rd = ca * normalize(vec3(uv.xy, 2.0));\n\n  fragColor = vec4(render(ro, rd), 1.);\n  // if (uv.x < -.78) {\n  //   float y = uv.y / 2. + .5;\n  //   fragColor = vec4(pal(y, palette), 1.);\n  // }\n  //fragColor += vec4(smoothstep(.02, 0., fract(-2. * uv.x)), 0., 0., 0.);\n  if (uv.x > .78 && mouse.x < cutoff) {\n    fragColor = vec4(1., 0., 0., 0.);\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}