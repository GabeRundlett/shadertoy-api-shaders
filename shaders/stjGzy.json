{
    "Shader": {
        "info": {
            "date": "1624222568",
            "description": "red: average of the x last random values. ( requires storing full historic )\ngreen:  relaxation with innovation coef 1000^-(x/R.x) ( stores only 1 value )\n\nshow also max values.",
            "flags": 32,
            "hasliked": 0,
            "id": "stjGzy",
            "likes": 7,
            "name": "average vs relaxation ",
            "published": 3,
            "tags": [
                "hash",
                "rand",
                "relaxation",
                "statistics"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/NtS3zy\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O.r = float( T(vec2(U.x, 8))*R.y > U.y ); // display curve in row  8\n    O.g = .7*float( T(vec2(U.x,16))*R.y > U.y ); // display curve in row 16\n    O.b = 0.;\n    \n    if ( abs(U.y-T(vec2(U.x,24))*R.y) <1. ) O.r += .5;  // display max\n    if ( abs(U.y-T(vec2(U.x,32))*R.y)< 1. ) O.g += .5;\n\nif ( int(U.y) == int(R.y)/2 ) O.r+O.g > 1. ? O-- : O++; // y=0 axis\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define hash(p)  fract(sin( (p)* 78.233 ) * 43758.5453 )\n\nfloat M(float l) { // average of stored random values #0..#int(l)\n    float s = 0.;\n    for( float i=0.; i < l; i++ )\n        s += T(vec2(i,0));\n    return s/ceil(l);\n}\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O.x =   U.x == .5   ? hash(iTime)       // row 0: history of random values\n          : U.y ==   .5 ? T(U-vec2(1,0))    //     compute first, then scroll\n          : U.y ==  8.5 ? M(U.x)            // row 8: average values #0..x\n       // : U.y == 16.5 ? mix(T(U-vec2(1,0)),T(U),.5 )  // row 16: relaxation with previous value\n          : U.y == 16.5 ? mix(T(U),T(0), pow(1000.,-(U/R).x ) ) \n       // : U.y == 16.5 ? mix(T(U),T(0), 1.-(U/R).x )   \n       // : U.y == 16.5 ? mix(T(U),T(0), exp(-U.x/57. ) )\n          : U.y == 24.5 ? max(T(U),T(vec2(U.x, 8)) )\n          : U.y == 32.5 ? max(T(U),T(vec2(U.x,16)) )      \n          : 0.;                            //     NB: step 8 for better parallelism\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0).x\n#define R    iResolution.xy",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}