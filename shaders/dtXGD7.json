{
    "Shader": {
        "info": {
            "date": "1671838396",
            "description": "Another random thing.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtXGD7",
            "likes": 17,
            "name": "Circular Wavefront",
            "published": 3,
            "tags": [
                "waves",
                "animation",
                "disk"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926536\n\n// Settings\n//#define BOX_BOUNDARY\n#define DISK_BOUNDARY\n#define BOUNDARY_DIMS 1.5\n#define POINT_SIZE 0.05\n#define WAVE_ORIGIN vec2(-0.6, -0.4)\n#define WAVE_SPEED 2.0\n\nmat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, si, -si, co);\n}\n\nfloat sdBall(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdVector(in vec2 p, in vec2 v) {\n    return length(p - v * clamp(dot(p, v) / dot(v, v), 0.0, 1.0));\n}\n\nvoid boxBounce(in vec2 b, in vec2 p0, in vec2 v0, in float t, out vec2 pos, out vec2 vel) {\n     vec2 q = 2.0 * b - mod(p0 + v0 * t + b, 4.0 * b);\n     pos = b - abs(q), vel = v0 * sign(q);\n}\n\nvoid diskBounce(in float r, in vec2 p0, in vec2 v0, in float t, out vec2 pos, out vec2 vel) {\n    float a = dot(v0, v0);\n    float b = dot(p0, v0);\n    float c = dot(p0, p0) - r * r;\n    float dis = b * b - a * c;\n    if (dis >= 0.0 && c <= 0.0) {\n        dis = sqrt(dis);\n        t += (dis + b) / a;\n\n        vec2 hit = p0 + v0 * (dis - b) / a;\n        float reflDelta = 2.0 * asin((p0.y * v0.x - p0.x * v0.y) / (r * sqrt(a))) - PI;\n\n        float pathLen = 2.0 * dis / a;\n        float hitIndex = floor(t / pathLen);\n\n        float angle = reflDelta * hitIndex;\n        vec2 startPos = Rotate2D(angle - reflDelta) * hit;\n        vec2 startVel = Rotate2D(angle) * v0;\n\n        t -= pathLen * hitIndex;\n        pos = startPos + startVel * t, vel = startVel;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    #ifdef BOX_BOUNDARY\n    vec2 q = abs(uv) - BOUNDARY_DIMS;\n    color = mix(color, vec3(1, 0, 0), smoothstep(unit, 0.0, abs(max(q.x, q.y))));\n    #else\n    color = mix(color, vec3(1, 0, 0), smoothstep(unit, 0.0, abs(length(uv) - BOUNDARY_DIMS)));\n    #endif\n\n    for (float a=0.0; a < 2.0 * PI; a += 2.0 * PI / 50.0) {\n        vec2 v0 = vec2(cos(a), sin(a)) * WAVE_SPEED;\n        vec2 pos, vel;\n\n        #ifdef BOX_BOUNDARY\n        boxBounce(vec2(BOUNDARY_DIMS - POINT_SIZE), WAVE_ORIGIN, v0, iTime, pos, vel);\n        #else\n        diskBounce(BOUNDARY_DIMS - POINT_SIZE, WAVE_ORIGIN, v0, iTime, pos, vel);\n        #endif\n\n        vec2 pointUv = uv - pos;\n        //color = mix(color, vec3(0, 0, 1), smoothstep(unit, 0.0, sdVector(pointUv, 0.25 * vel)));\n        color = mix(color, vec3(0, 1, 1), smoothstep(unit, 0.0, sdBall(pointUv, POINT_SIZE)));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}