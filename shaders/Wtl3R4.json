{
    "Shader": {
        "info": {
            "date": "1555761179",
            "description": "Created by gopher in 2013-02-25\n\nhttps://www.shadertoy.com/view/MslGRn\nquick glsl port of an effect used in a 4k from 2007.\nuse mouse to rotate (x) and zoom (y)",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtl3R4",
            "likes": 4,
            "name": "electron1",
            "published": 3,
            "tags": [
                "glsl",
                "electron"
            ],
            "usePreview": 0,
            "username": "RaduBT",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////////////\n// INFO:\n// - use the mouse to navigate (x is rotation, y is zoom)\n// - play with the defines below to change the visuals\n////////////////////////////////////////////////////////////////////////////////////////\n\n// the more slices the slower\n#define SLICES \t\t\t50.0\n// start amplitude for the noise\n#define START_AMPLITUDE\t0.01\n// start frequency for the noise\n#define START_FREQUENCY\t1.25\n// start density value\n#define START_DENSITY\t0.01\n// animation speed\n#define ANIMATION_SPEED 0.075\n\n////////////////////////////////////////////////////////////////////////////////////////\n// iq's 3d noise functions from the elevated shader (incl. modifications where needed)\n////////////////////////////////////////////////////////////////////////////////////////\n\n// rotation matrix for fbm octaves\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n// 3d noise function\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\n// fbm noise for 2-4 octaves including rotation per octave\nfloat fbm( vec3 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p );\n\tp = m*p*2.02;\n    f += 0.2500*noise( p ); \n// set to 1 for 2 octaves\t\n#if 0\t\n\treturn f/0.75;\n#else\t\n\tp = m*p*2.03;\n    f += 0.1250*noise( p );\n// set to 1 for 3 octaves, 0 for 4 octaves\t\n#if 1\t\n\treturn f/0.875;\n#else\t\n\tp = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n#endif\t\n#endif\t\n}\n\n////////////////////////////////////////////////////////////////////////////////////////\n\n// color gradient\nvec3 gradient(float s)\n{\n\treturn vec3(22.0, max(1.0-s*2.0, 0.0), max(s>0.5?1.0-(s-0.15)*5.0:21.0, 1.0));\n}\n\n// intersection for a sphere with a ray\n#define RADIUS 0.5\nbool intersectSphere(vec3 origin, vec3 direction, out float tmin, out float tmax)\n{\n    bool hit = false;\n\tfloat a = dot(direction, direction);\n    float b = 2.0*dot(origin, direction);\n    float c = dot(origin, origin) - 0.5*0.5;\n    float disc = b*b - 4.0*a*c;           // discriminant\n    tmin = tmax = 0.0;\n\n    if (disc > 0.0) {\n        // Real root of disc, so intersection\n        float sdisc = sqrt(disc);\n        float t0 = (-b - sdisc)/(2.0*a);          // closest intersection distance\n        float t1 = (-b + sdisc)/(2.0*a);          // furthest intersection distance\n\n\t\ttmax = t1;\n        if (t0 >= 0.0) \n            tmin = t0;\n        hit = true;\n    }\n\n    return hit;\n}\n\n// rotate around axis\nvec2 rt(vec2 x,float y)\n{\n\treturn vec2(cos(y)*x.x-sin(y)*x.y,sin(y)*x.x+cos(y)*x.y);\n}\n\n// shader main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// normalized and aspect ratio corrected pixel coordinate\n    vec2 p = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n    p.x *= iResolution.x/ iResolution.y*2.0;\n    p.y *= iResolution.x/ iResolution.y*2.0;\n\n\t// camera and user input\n\tvec3 oo = vec3(0, 0, 0.4-iMouse.y/iResolution.y);\n\tvec3 od = normalize(vec3(p.x, p.y, -2.0));\n\tvec3 o,d;\t\n\to.xz = rt(oo.xz, 6.3*iMouse.x/iResolution.x);\n\to.y = oo.y;\n\td.xz = rt(od.xz, 6.3*iMouse.x/iResolution.x);\n\td.y = od.y;\n\n\t// render\n\tvec4 col = vec4(0, 0, 0, 0);\n\tfloat tmin, tmax;\n\tif (intersectSphere(o, d, tmin, tmax))\n\t{\t\n\t\t// step thoug the sphere with max SLICES steps\n\t\tfor (float i = 0.0; i < SLICES; i+=1.0)\n\t\t{\n\t\t\t// stay within the sphere bounds\n\t\t\tfloat t = tmin+i/SLICES;\n\t\t\tif (t > tmax) \n\t\t\t\tbreak;\n\t\t\tvec3 curpos = o + d*t;\n\t\t\t\n\t\t\t// get sphere falloff in s\n\t\t\tfloat s = (0.5-length(curpos))*2.0;\n\t\t\ts*=s;\n\n\t\t\t// get turbulence in d\n\t\t\tfloat a = START_AMPLITUDE;\n\t\t\tfloat b = START_FREQUENCY;\n\t\t\tfloat d = START_DENSITY;\n\t\t\tfor (int j = 0; j < 3; j++)\t\t\t\t\t\t\t\t\t\n\t\t\t{\n\t\t\t\td += 0.5/abs((fbm(5.0*curpos*b+ANIMATION_SPEED*iTime/b)*2.0-1.0)/a);\n\t\t\t\tb *= 2.0;\n\t\t\t\ta /= 2.0;\n\t\t\t}\n\t\t\t\n\t\t\t// get gradient color depending on s\n\t\t\tcol.rgb += gradient(s)*max(d*s,0.0);\n\t\t}\t\t\n\t}\n\n\tfragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}