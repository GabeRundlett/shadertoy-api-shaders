{
    "Shader": {
        "info": {
            "date": "1642690187",
            "description": "My participation to genuary 2022\nMake a sea of shapes.",
            "flags": 32,
            "hasliked": 0,
            "id": "NsfyWj",
            "likes": 19,
            "name": "Genuary 2022 - Day20",
            "published": 3,
            "tags": [
                "text",
                "generative",
                "genuary",
                "2022",
                "seaofshapes"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    rgb = mix(rgb.xxx, rgb.xxx*vec3(1.,.1,.2)*3., (sat(length(cuv)*2.))*.75);\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.15\n#define GLOW_POW .6\n#define GLOW_OPACITY 1.2\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nfloat _cube(vec3 p, vec3 sz)\n{\n    vec3 l = abs(p)-sz;\n    return max(l.x, max(l.y, l.z));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}\n\n// Below code is taken from https://www.shadertoy.com/view/slKGzy\n//noise from iq's www.shadertoy.com/view/lsf3WH\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\nfloat noise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat fracNoise(vec2 uv){\n    uv *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tfloat fr  = 0.5000*noise( uv ); \n    uv = m*uv;\n\tfr += 0.2500*noise( uv ); uv = m*uv;\n\tfr += 0.1250*noise( uv ); uv = m*uv;\n\tfr += 0.0625*noise( uv ); uv = m*uv;\n    fr = 0.5 + 0.5*fr;\n    return fr;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    vec2 reptour = vec2(50.);\n    \n    vec3 ptour = p;\n    ptour.xz = clamp(ptour.xz, vec2(-175.), vec2(175.));\n    ptour.xz = mod(ptour.xz+reptour*.5,reptour)-reptour*.5;\n    acc = _min(acc, vec2(_cube(ptour, vec3(1.,55.,1.)), 1.));\n    \n    vec2 rep = vec2(5.);\n    vec3 sz = vec3(.2);\n    vec3 psee = p;\n    vec2 id = floor((psee.xz+rep*.5)/rep);\n    float h = sin(id.x+iTime)\n    +sin(id.x*.5+id.y*.25+iTime*.35)*2.\n    +sin(id.x+id.y+iTime*.75)*.5\n    +sin((id.x-id.y)*10.+iTime*.75)*.25;\n    psee.xz = mod(psee.xz+.5*rep, rep)-rep*.5;\n    psee.y -= h;\n    acc = _min(acc, vec2(_cube(psee, sz), 0.));\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 accLight;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accLight = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        accLight += sat(mix(vec3(0.533,0.294,0.725), vec3(0.486,0.996,0.800), p.y))\n        *(1.-sat(res.x/1.5))*.1;\n        p+=rd*res.x*.5;\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    vec2 coords = vec2(atan(rd.z, rd.x), acos(rd.y));\n    return sat(vec3(0.737,0.882,0.835)\n    *fracNoise(coords+vec2(iTime*.01, sin(iTime*.125)*.1))\n    *pow(fracNoise(coords*.1+iTime*0.01),2.)\n    *sat(pow(1.-sat(abs(dot(rd, vec3(0.,1.,0.)))),25.)+.2)*3.)*2.;\n\n    float cloud = texture(iChannel0, coords*.1).x*\n    texture(iChannel0, coords*.01+iTime*.001).x;\n    return sat(pow(cloud, 1.)-0.)*\n    vec3(1.);\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = n*.5+.5;\n    if (res.z == 1.)\n    {\n        col = vec3(.1);\n    }\n    if (res.z == 0.)\n    {\n        col = mix(vec3(0.533,0.294,0.725), vec3(0.486,0.996,0.800), p.y);\n    }\n    return sat(col);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(sin(iTime*.25)*15.,-15.+5.*sin(iTime*.25),-35.);\n    vec3 ta = vec3(cos(iTime*.15)*55.,-10.,sin(iTime*.15)*5.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n\n    vec3 glow = accLight;\n    float dist = 100.;\n    float py = 5.;\n    if (res.y > 0.)\n    {\n        dist = res.y;\n        vec3 p = ro+rd*res.y;\n        py = p.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(res, rd, p, n);\n        vec3 refl = normalize(reflect(rd, n));\n        refl = normalize(refl+(fracNoise(p.xy)-.5)*.05);\n        vec3 resrefl = trace(p+n*0.01,refl, 128);\n        vec3 reflCol = getEnv(refl);\n        if (resrefl.y > 0.)\n        {\n            vec3 prefl = p+refl*resrefl.y;\n            vec3 nrefl = getNorm(prefl, resrefl.x);\n            reflCol = getMat(resrefl, refl, prefl, nrefl);\n        }\n        col+= reflCol;\n    }\n    else\n        col = getEnv(rd);\n    col += glow;\n    col = mix(col, vec3(0.,0.,0.), sat(1.-exp(-py*0.5+1.5)));        \n    col = mix(col, vec3(0.,0.,0.), sat(1.-exp(-dist*0.01+.5)));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    col *= 1.5/(1.+col); \n    col = pow(col, vec3(1.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}