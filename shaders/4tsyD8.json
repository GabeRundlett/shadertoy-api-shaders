{
    "Shader": {
        "info": {
            "date": "1504611988",
            "description": "i went a bit overboard on a response to\nhttps://www.shadertoy.com/view/4tlyW8\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4tsyD8",
            "likes": 4,
            "name": "sinsin trip",
            "published": 3,
            "tags": [
                "intro",
                "sin",
                "derivative"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 520
        },
        "renderpass": [
            {
                "code": "/*\nIn response to\n https://www.shadertoy.com/view/4tlyW8\n\n5obvious improvements (+2 mouse inputs) are:\n- use mod() to make a grid\n- Make transcendental pi arbitiarily (more) precse; \n   const float pi=acos(-1.);//3.14...\n- Use; \n   f=f/fwidth(f); \n   to get a more even thickness of a curve \n   by normalizing abs(gradient),isoline (local steepness of the height map of a mountain <- 1.0) \n   by estimating the first derivative over 2 domains (the .xy position of a pixel)\n   as sum of 2 abs(derivative) over 2 domains (difference of pixel brightness at that moment) \n   Than dividing a value by that function(of itself)\n- Modify the smoothstep() of the curve so that its CENTER is its (isoline) border;\n   f=smoothstep(-b.,b,abbs(f)-c);\n- Scale smoothstep constants by iMouse.xy\n- Mix 2 colors by mixing 2 alpha layers via \n   https://en.wikipedia.org/wiki/Alpha_compositing\n- Set 2 colors by iMouse.xy;\n*/\n\n//max() and min() Vector COMPNENT\nfloat mav(vec2 a){return max(a.y,a.x);}\nfloat mav(vec3 a){return max(a.z,mav(a.xy));}\nfloat mav(vec4 a){return max(mav(a.zw),mav(a.xy));}\n#define miv(a) -mav(-a)\n//Way too common transformations\n#define u5(a) (a*.5+.5)\n#define u2(a) (a*2.-1.)\n//triangle wave //euclidean grid\n#define tri(a) abs(u2(fract(a)))\n//basis function to draw a carthesian grid\n#define grid(a) mav(tri(a))\n/*https://en.wikipedia.org/wiki/Alpha_compositing*/\nvec4 aOverB(vec4 a,vec4 b){a.xyz*=a.w;b.xyz*=b.w;return vec4(a+b*(1.-a));}\n/*not sure if correct, is fail-safe on arbitiary parameters.*/\nvec4 aXorB(vec4 a,vec4 b){a.xyz*=a.w;b.xyz*=b.w;return vec4(a*(1.-b)+b*(1.-a));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = u2(fragCoord.xy/iResolution.xy);\n    uv.y*=iResolution.y/iResolution.x;\n    \n //carthesian grid (gradient, contour, isoline):\n    //float fsaa=21./min(iResolution.x,iResolution.y);//double width of a \"hair line\"\n    vec4 color =(vec4(grid(uv*4.))-.5);//grid\n    vec4 cross0=vec4(1.-miv(vec3(abs(uv*20.),1.)));//cross trouch vec2(0)\n    color =mix(color,cross0,.5);\n    \n //sinusoidial (gradient, contour, isoline):\n    const float pi=acos(-1.);/*3.14 is transcendental==unitCircleRadios/unitCircleDiameter */\n    float l=9.*(1.-(iMouse.x/iResolution.x));/*line thickness*/\n    float b=9.*(1.-(iMouse.y/iResolution.y));/*blur*/\n    float f=.5*cos(pi*2.*uv.x+iTime)-uv.y;   \n    /*fwidt() uses half resolution, if(b<l) loosk BAD \n     beause we use blur to hide the low percision of fwidt() near local extrema, \n     Low precision near local extrema because there the first derivative is (close to) 0.\n     https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/fwidth.xhtml\n    */\n    f=smoothstep(2.*b,-2.*b,abs(   f/fwidth(f)   )-l); \n    /*f=smoothstep(.1*b,-.1*b,abs( f             )-.05*l); /*without fwidth()*/\n    \n //composition:    \n    vec4 c=vec4(1,b,l,f);\n    /*vec4 c=vec4(.9,.5,.2,f);/*less trippy*/\n    /*fragColor=vec4(color.x,f,f,1);/*simple special case, one float per .rgb channel*/\n    fragColor=aOverB(c,color);/*Over https://en.wikipedia.org/wiki/Alpha_compositing*/\n    //fragColor=aXorB(c,color);/*Xor https://en.wikipedia.org/wiki/Alpha_compositing*/  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}