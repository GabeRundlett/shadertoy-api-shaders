{
    "Shader": {
        "info": {
            "date": "1640549473",
            "description": "Wait for it to load all frames, then click any of the poses to start an animation.\nNo full screen\nChange number of frames by changing \"divisions\" iin common tab.",
            "flags": 32,
            "hasliked": 0,
            "id": "slGSDR",
            "likes": 4,
            "name": "JCVD Animation Explorer",
            "published": 3,
            "tags": [
                "sprite",
                "sheet"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    vec2 mousePos = floor(divisions*(vec2(iMouse.x/iResolution.x,\n                         iMouse.y/iResolution.y)));\n    \n    vec2 fragPos = floor(divisions*(vec2(fragCoord.x/iResolution.x,\n                        fragCoord.y/iResolution.y)));\n    \n    if(  (length(fragPos-mousePos) < 0.001) ){\n        col *= vec3(1.,0.7,0.7);\n        }\n    // Output to screen\n    fragColor = vec4(col,1.0)+texture(iChannel1,uv).xxxw*0.2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nbool checkBoundingBox(vec2 fragCoord, float idX, float idY){\n    \n    //float idX = mod(frame,divisions);\n    //float idY = frame/divisions;\n    \n  return (   \n            fragCoord.x >= idX*stepWidth \n            //&& fragCoord.x < (idX*stepWidth+stepWidth)\n            && fragCoord.x < (idX+1.)*stepWidth\n            \n            && fragCoord.y >= idY*stepHeight \n           // && fragCoord.y < (idY*stepHeight+stepHeight));\n           && fragCoord.y < (idY+1.)*stepHeight\n           );\n           \n   /*        \n     return (\n            (fragCoord.x/iResolution.x >= idX*(stepWidth/iResolution.x))\n         && (fragCoord.x/iResolution.x < (idX+1.)*(stepWidth/iResolution.x))\n         && (fragCoord.y/iResolution.y >= idY*(stepHeight/iResolution.y))\n         && (fragCoord.y/iResolution.y < (idY+1.)*(stepHeight/iResolution.y))\n            );\n           */\n           \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,1.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if( iFrame/int(frameStep) < int(divisions*divisions)){\n        \n        if( (mod(float(iFrame), frameStep) < 0.5) \n           ){\n            \n            float theFrame = float(iFrame) / frameStep;\n\n            float idX = mod(theFrame, divisions);\n\n            //Just needed to floor this lol\n            float idY = floor(theFrame / divisions);\n\n            if( checkBoundingBox(fragCoord, idX, idY )){\n\n                vec2 st = vec2(\n                    //(fragCoord.x-idX*stepWidth)/stepWidth,\n                    //(fragCoord.y-idY*stepHeight)/stepHeight\n\n                    (fragCoord.x/iResolution.x - idX*(stepWidth/iResolution.x)),\n                    (fragCoord.y/iResolution.y - idY*(stepHeight/iResolution.y))\n\n                    );\n\n                fragColor = texture(iChannel0,st*divisions);//vec4(vec3(st.y*divisions),1.);//\n\n\n                }\n            \n            \n            //if not in bounding box get frames we had\n            else{\n                    fragColor = texture(iChannel1,uv);\n                }\n                \n            }\n            //if not time for new frame, get frames we had\n            else{\n                    fragColor = texture(iChannel1,uv);\n                }\n    }\n    else{\n        \n        fragColor = texture(iChannel1, uv);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define divisions 10. //20.\n#define asp iResolution.y/iResolution.x\n#define stepWidth iResolution.x/divisions\n#define stepHeight (iResolution.y)/divisions\n\n#define frameStep 20. //5.\n\n//for animations we hold info in pixels of the first row\n\n#define SET_ANIMATION 1 //1-3\n\n#define CURRENT_ANIMATION_ADDRESS vec2(2.5,0.5) //will be set by SET_ANIMATION\n\n//animation 1\n#define A1_START_FRAME_ADDRESS vec2(3.5,0.5)\n#define A1_CURRENT_FRAME_ADDRESS vec2(4.5,0.5)\n#define A1_END_FRAME_ADDRESS vec2(5.5,0.5)\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvec3 getAnimationData(){\n    \n    float startFrame = \n                texture(iChannel1,\n                A1_START_FRAME_ADDRESS / iResolution.xy).x;\n    \n    float endFrame = \n                texture(iChannel1,\n                A1_END_FRAME_ADDRESS / iResolution.xy).x;\n                \n    float currentFrame = \n                texture(iChannel1,\n                A1_CURRENT_FRAME_ADDRESS / iResolution.xy).x; \n                \n                return vec3(startFrame,\n                            currentFrame,\n                            endFrame\n                            );\n}\n\n//void setAnimationData(vec2 fragCoord, vec4 fragColor, vec3 data){\n//    if(fragCoord = vec2(2.5,0.5)return;\n//}\nvec2 getFrameUV(vec2 uv, float currentFrame){\n\n    float idX = mod(currentFrame, divisions);\n    float idY = floor(currentFrame / divisions);\n    vec2 st = uv/divisions;\n    st.x += idX*(1./divisions);\n    st.y += idY*(1./divisions);\n         \n    return st;\n}\nfloat runAnimation( vec2 fragCoord, inout vec4 fragColor){\n    \n    \n        //get frame info the really greedy way\n        vec3 animationData = getAnimationData();\n        //set it here\n        float startFrame = animationData.x;\n        float currentFrame = animationData.y;\n        float endFrame = animationData.z;\n\n    if( mod(float(iFrame), frameStep/2.) < 0.5) {\n        if(currentFrame >= endFrame || currentFrame < startFrame)\n            {\n                currentFrame = startFrame;\n            }\n\n        //get the specific part of the buffer we want to render\n      //  if(fragCoord.x < stepWidth && fragCoord.y < stepHeight){\n\n            //set uv only where we want to see the animation(bottom left sqaure)\n            vec2 uv = fragCoord.xy/iResolution.xy;\n            //fragCoord.xy/vec2(stepWidth,stepHeight);\n            //set st to be the square of the current frame of the animation\n            vec2 st = getFrameUV(uv, currentFrame);\n            //set the fragColor to that animation frame color        \n            fragColor = texture(iChannel0,st);\n\n     //   }\n        //update current frame (looping)\n        currentFrame += 1.;\n    }\n    else{\n        fragColor = texture(iChannel1,fragCoord.xy/iResolution.xy);\n    }\n    return currentFrame;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,1.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if( iFrame/int(frameStep) < int(divisions*divisions)){\n        \n        \n        fragColor = texture(iChannel0, uv);\n    }\n    \n    else{\n    \n        float currentFrame = runAnimation(fragCoord, fragColor);\n        \n        vec2 animationData = texture(iChannel1, \n                             vec2(1.5,0.5)/iResolution.xy).xy;\n                             \n        float startFrame = animationData.x;\n        float endFrame = animationData.y;\n        \n        if(iMouse.z > 0.5){\n            vec2 mousePos = floor(divisions*(vec2(iMouse.x/iResolution.x,\n                         iMouse.y/iResolution.y)));\n            startFrame = mousePos.x + mousePos.y*divisions;\n            endFrame = startFrame + 10.;\n        }\n        \n        if(fragCoord.xy == vec2(1.5,0.5)){\n            fragColor.xy = vec2(startFrame,endFrame);\n        }\n        \n        if(      fragCoord.x == 3.5 && fragCoord.y == 0.5 ) {\n            fragColor.x = startFrame;\n        }\n        else if( fragCoord.xy == vec2(4.5,0.5) ) {\n            fragColor.x = currentFrame;\n        }  \n        else if( fragCoord.xy == vec2(5.5,0.5) ) {\n            fragColor.x = endFrame;\n        }  \n\n\n    }\n}    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}