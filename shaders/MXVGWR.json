{
    "Shader": {
        "info": {
            "date": "1717532138",
            "description": "Something sort of like that example I saw once which tries to pick an arbitrary number of distinct colours with stable first choices.",
            "flags": 16,
            "hasliked": 0,
            "id": "MXVGWR",
            "likes": 1,
            "name": "plastic-number-based palette gen",
            "published": 3,
            "tags": [
                "palette",
                "plasticnumber"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "// Fork of \" Ï•-based palette generator\" by sh1boot. https://shadertoy.com/view/dsB3RG\n// 2024-06-04 19:53:41\n\nconst int num_lines = 15;\n\nvec3 hsv2rgb(float h, float s, float v) {\n    vec3 h3 = mod(6.0 * h + vec3(5.0, 3.0, 1.0), 6.0);\n    h3 = min(h3, 4.0 - h3);\n    h3 = clamp(h3, 0.0, 1.0);\n    return v - v * s * h3;\n}\n\n// borrowed from: https://www.shadertoy.com/view/3lGyRy\nvec3 oklab2rgb(vec3 c) {\n    float l_ = c.x + 0.3963377774f * c.y + 0.2158037573f * c.z;\n    float m_ = c.x - 0.1055613458f * c.y - 0.0638541728f * c.z;\n    float s_ = c.x - 0.0894841775f * c.y - 1.2914855480f * c.z;\n\n    float l = l_*l_*l_;\n    float m = m_*m_*m_;\n    float s = s_*s_*s_;\n\n    vec3 rgbResult;\n    rgbResult.r = + 4.0767245293f*l - 3.3072168827f*m + 0.2307590544f*s;\n    rgbResult.g = - 1.2681437731f*l + 2.6093323231f*m - 0.3411344290f*s;\n    rgbResult.b = - 0.0041119885f*l - 0.7034763098f*m + 1.7068625689f*s;\n    return rgbResult;\n}\n\nvec3 palette(vec2 f) {\n#if 1\n#if 0\n    float theta = f.x * 2.0 * 3.14159265358979;\n    float r = sqrt(f.y);\n    f = r * sin(theta + vec2(0.5 * 3.14159265358979, 0));\n    f = (f + 1.0) * 0.5;\n#elif 1\n    vec2 v2 = f - 0.5;\n    f = vec2(v2.x + v2.y, v2.y - v2.x) * 0.5 + 0.5;\n#endif\n    f -= .5;\n    float L = 0.95;\n    float a = f.x * .8;\n    float b = f.y * .8;\n    return clamp(oklab2rgb(vec3(L, a, b)), 0.0, 1.0);\n#else\n    vec3 h = mix(mix(vec3(1,-1,-1), vec3(-1,-1,1), f.x),\n             mix(vec3(1,1,-1), vec3(-1,1,-1), f.x), f.y);\n    h = h * 0.5 + 0.5;\n    h = clamp(h, 0.0, 1.0);\n    h = pow(h, vec3(0.5));\n    return h;\n#endif\n}\n\nvec2 sequence(int i) {\n    const float p1 = 0.7548776662466927; // reciprocal of plastic number\n    const float p2 = 0.5698402909980532; // reciprocal of squared plastic number\n    const vec2 plastic = vec2(p1, p2);\n\n    vec2 v = mod(float(i + 1) * plastic, 1.0);\n    return v;\n}\n\nvec3 palette(int i) {\n    return palette(sequence(i));\n}\n\n\n// borrowed hash from https://www.shadertoy.com/view/llGSzw\nvec3 hash3( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = vec4(0);\n    float y = 0.0;\n    vec2 preview = fragCoord * 3.0 / iResolution.yy;\n    for (int i = num_lines + 8; i >= 0; --i) {\n        vec3 r = hash3(uint(i + 101));\n        float f = 12.0 * r.x + 4.0;\n        float a = (r.y * 0.25 + 0.05) * 16.0 / (f + 8.0);\n        float t = 0.5 * (r.z + 0.1) * (iTime + 2.0);\n        float w = sin(uv.x * f + t) * a;\n        y = w - y * 0.5;\n        if (i < num_lines) {\n            float cutoff = float(i) + uv.x * 0.5;\n            if (iTime < cutoff * 3.0) continue;\n            float thickness = 0.015 * length(vec2(dFdx(y), 1.0));\n            float d = thickness - abs(uv.y - 0.5 - y);\n            float aa = 0.7 * fwidth(d);\n            float alpha = smoothstep(-aa, aa, d);\n            vec4 over = vec4(palette(i), alpha);\n            col += (over - col) * over.a;\n        }\n    }\n    if (texelFetch(iChannel3, ivec2(16,0),0).x > 0.5 && preview.x < 1.0 && preview.y < 1.0) {\n        col.xyz = palette(preview);\n        for (int i = 0; i < num_lines; ++i) {\n            if (i < int(iTime / 3.0)) {\n                vec2 p = sequence(i);\n                float d = distance(p, preview);\n                col = mix(col, vec4(1), (1.0 - smoothstep(0.01, .02, d)));\n            }\n        }\n        vec2 p = sequence(int(iTime / 3.0));\n        float d = distance(p, preview);\n        float f = (1.0 + sin(iTime * 12.0));\n        col = mix(col, vec4(1), (1.0 - smoothstep(0.01, .02, d)) * f);\n    }\n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}