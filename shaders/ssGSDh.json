{
    "Shader": {
        "info": {
            "date": "1634552316",
            "description": "Principle:\nWorley-like 3D grid with 1 seed point per cell. \nproject it on sphere, and rotate 3D coordinates around it.\n\nTODO: there are discontinuities, because cells sliced by sphere can be small, plus even some internal cells are considered.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssGSDh",
            "likes": 50,
            "name": "swirls on sphere (3D swirl seed)",
            "published": 3,
            "tags": [
                "procedural",
                "swirl",
                "texture",
                "planet",
                "short",
                "loopless",
                "jupiter"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1174
        },
        "renderpass": [
            {
                "code": "// WIP. Many discontinuities to fix.   \n// See options and coefs.\n\n#define H(p)       fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)\n#define R(p,a,r) ( mix( a*dot(p,a), p, cos(r) ) + sin(r)*cross(p,a) )\n#define hue(v)   ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n\n    O-=O;\n    float r = length(U), y, l=9., s = 4.;      // s: swirls size\n    int i,k;\n    if ( r > 1. ) return;\n    \n    vec3 P0 = vec3( U, sqrt(1.-r*r) ),         // raytracing point in sphere\n         P = s*P0, I,F, H,D,A;\n         P.xz *= mat2(cos( .2*iTime + vec4(0,11,33,0) )); // planet rotation\n      // F = abs(fract(P+.5)-.5); y = min(F.x,min(F.y,F.z)); O += smoothstep(12./R.y,0.,y); // debug: grid\n         I = floor(P), F = fract(P);           // coords in 3D grid\n\n#define dist2seed  \\\n        D = vec3( k%3, (k/3)%3, k/9 ) -1.;     /* cell offset         */    \\\n        D += H(I+D)-.5;                        /* random seed point   */    \\\n     /* if( abs( length(I+D) - s ) < .5 ) */   /* only if close to surf */  \\\n            A = normalize(I+D),                                             \\\n            D = s*A - I,                       /* project it on sphere ( for even radius ) */ \\\n            r = length(F-D);                   /* distance to seed    */\n\n    for ( k = 0; k < 27; k++) {                // visit neighbor cells to find closest seed point\n        dist2seed;\n     // P = R( F-D, A, 10.*smoothstep(.5,0.,r) ) + D+I; // shouldn't we blend effects ?\n        r < l ? l = r, i = k : i;              // keep closest dot \n     }\n    k = i;\n    dist2seed;\n    y = atan(P.y,length(P.xz));                                   // latitude ( to tune swirl direction & amplitude )\n    y = 4.*cos(4.*y);\n // if ( i%2 < 1 ) y = -y;                                        // checkered rotation direction\n    P = R( F-D, A, y * smoothstep(.5,0.,r) ) + D+I;               // rotate coords around seed point\n       \n // O += vec4(smoothstep(12./R.y,0., l-.2) ); return;             // test: plot seed points\n    \n    U = vec2( atan(P.z,P.x) - .1*iTime, atan(P.y,length(P.xz)) ); // surface coordinates\n // U = vec2(acos(U.x/sqrt(1.-U.y*U.y)) , asin(U.y) );            // debug\n    O += ( iMouse.z > 0. ? vec4(.6)\n             : smoothstep(.8,.2, texture(iChannel0, U*vec2(1,3))))// swirled texture\n        * (.5+.5*hue(abs(U.y*2./3.14)))                           // color\n        * ( .3 + 1.2* max(0., dot(P0,vec3(1,0,1))));              // shading\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}