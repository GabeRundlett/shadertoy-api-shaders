{
    "Shader": {
        "info": {
            "date": "1674599418",
            "description": "Credit to https://www.shadertoy.com/view/tdG3Rd#",
            "flags": 0,
            "hasliked": 0,
            "id": "mlsXWn",
            "likes": 1,
            "name": "FBM Slow Blue Fog",
            "published": 3,
            "tags": [
                "fog",
                "blue",
                "brownianmotion"
            ],
            "usePreview": 0,
            "username": "kunshksingh",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "//Adapted from https://www.shadertoy.com/view/tdG3Rd#\n\n// Inputs\nuniform sampler2D u_velocity;\nuniform sampler2D u_density;\n\n//Other\nfloat u_dt;\nfloat u_diff;\nfloat u_visc;\nfloat prevTime;\nfloat currTime;\n\nvoid updateVars(){\n    u_dt = currTime - prevTime;\n    u_diff = sin(iTime*0.01);\n    u_visc = 1.0;\n    prevTime = currTime;\n    currTime = iTime*0.01;\n    \n}\nfloat colormap_red(float x) {\n    if (x < 0.0) {\n        return 0.0 / 255.0;\n    } else if (x < 20049.0 / 82979.0) {\n        return (95.79 * x + 54.51) / 255.0;\n    } else {\n        return 0.5;\n    }\n}\n\nfloat colormap_green(float x) {\n    if (x < 20049.0 / 82979.0) {\n        return 0.2;\n    } else if (x < 327013.0 / 810990.0) {\n        return (8546482679670.0 / 10875673217.0 * x - 2064961390770.0 / 10875673217.0) / 255.0;\n    } else if (x <= 1.0) {\n        return (1038067.0 / 483977.0 * x + 19607415.0 / 483977.0) / 255.0;\n    } else {\n        return 0.4;\n    }\n}\n\nfloat colormap_blue(float x) {\n    if (x < 0.0) {\n        return 95.0 / 255.0;\n    } else if (x < 7249.0 / 82979.0) {\n        return (8299.79 * x + 54.51) / 255.0;\n    } else if (x < 20049.0 / 82979.0) {\n        return 127.0 / 255.0;\n    } else if (x < 327013.0 / 810990.0) {\n        return (7922.02249341361393720147485376583 * x - 64.364790735602331034989206222672) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\n\nvec4 colormap(float x) {\n    return vec4(colormap_red(x), colormap_green(x), colormap_blue(x), 1.0);\n}\n\n// https://iquilezles.org/articles/warp\n/*float noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float a = textureLod(iChannel0,(p+vec2(0.5,0.5))/256.0,0.0).x;\n\tfloat b = textureLod(iChannel0,(p+vec2(1.5,0.5))/256.0,0.0).x;\n\tfloat c = textureLod(iChannel0,(p+vec2(0.5,1.5))/256.0,0.0).x;\n\tfloat d = textureLod(iChannel0,(p+vec2(1.5,1.5))/256.0,0.0).x;\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}*/\n\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(18.9898, 14.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\nconst mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.700000*noise( p + iTime *0.01  ); p = mtx*p*2.02;\n    f += 0.001250*noise( p ); p = mtx*p*2.01;\n    f += 0.250000*noise( p ); p = mtx*p*2.03;\n    f += 0.025000*noise( p ); p = mtx*p*2.01;\n    f += 0.062500*noise( p ); p = mtx*p*2.04;\n    f += 0.015625*noise( p + sin(iTime*0.01) );\n\n    return f/0.96875;\n}\n\nfloat pattern( in vec2 p )\n{\n\treturn fbm( p + fbm( p + fbm( p ) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    updateVars();\n    vec2 uv = fragCoord/iResolution.x;\n\tfloat shade = pattern(uv);\n    \n    //BREAK\n    vec2 p = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    vec2 xy = p * vec2(iResolution.x / iResolution.y, 1);\n\n    vec2 velocity = texture(u_velocity, xy).xy;\n    float density = texture(u_density, xy).x+sin(iTime*0.01);\n    \n     // Viscosity\n    vec2 viscosity = (texture(u_velocity, xy + vec2(u_visc, 0.1)).xy +\n                      texture(u_velocity, xy - vec2(u_visc, 0.1)).xy +\n                      texture(u_velocity, xy + vec2(0.1, u_visc)).xy +\n                      texture(u_velocity, xy - vec2(0.1, u_visc)).xy -\n                      4.0 * texture(u_velocity, xy).xy) / (u_visc * u_visc);\n\n\n    // Advection\n    vec2 advection = texture(u_velocity, xy - u_dt * velocity).xy;\n    \n\n    // Diffusion\n    vec2 diffusion = (texture(u_velocity, xy + vec2(u_diff, 0.1)).xy +\n                          texture(u_velocity, xy - vec2(u_diff, 0.1)).xy +\n    texture(u_velocity, xy + vec2(1.0, u_diff)).xy +\n    texture(u_velocity, xy - vec2(1.0, u_diff)).xy) / 4.0;\n\n   \n    // Update velocity and density\n    velocity = advection + diffusion;\n    density = texture(u_density, xy - u_dt * velocity).x;\n\n    fragColor = vec4(colormap(shade).rgb * (density+0.1), shade);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}