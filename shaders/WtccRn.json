{
    "Shader": {
        "info": {
            "date": "1608305174",
            "description": "People often underestimate the high probability of \"remarquable order\" in sequences of numbers.\nHere I color every regular sequence of at least 3, with higher intensity when longer.\nColor correspond to sequence direction. ",
            "flags": 0,
            "hasliked": 0,
            "id": "WtccRn",
            "likes": 10,
            "name": "coincidences detector",
            "published": 3,
            "tags": [
                "short",
                "randomness",
                "numerology",
                "chance"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 406
        },
        "renderpass": [
            {
                "code": "// utils from https://www.shadertoy.com/view/llySRh\n#define hash(p) fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define char(c) textureLod( iChannel3, fract(u)/16. + fract( vec2(c, 15-c/16) / 16. ), log2(512./R.y) ).x\n\n#define num(p) int(48.+10.*hash(p))                             // random digit\n\nint hCheck(vec2 U, vec2 D, out int count) {\n    count = 0;\n    int  d = num(U+D) - num(U);                                 // value step in dir D, use a ref for candidate series\n        \n    vec2 P = D-D;\n    for( int i=0; i<6; i++, P+=D )                              // count series  U + kD\n        if ( num(U+P+D) - num(U+P) == d ) count++; else break;\n        \n    return d;                                                   // return increment, and out: count\n}\n\nfloat check(vec2 U,vec2 D)  {\n    int c,  d  =  hCheck(U, D,c ),                              // count upstream\n        cr, dr = -hCheck(U,-D,cr),                              // and downstream\n        count = d==dr ? c + cr :  max(c,cr) ;                   // return sequence count\n\n    return count + 1 >= 3 ? float( count - 1 )/10. : 0.;         // intensity = sequence length   \n  //return count + 1 >= 3;       \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = floor( u = u * 16. / R.y + iTime );\n\n    O = vec4( check(U,vec2(1,0)) + check(U,vec2(0,1)),          // check for series in all direction ( = color )\n              check(U,vec2(1,1)) + check(U,vec2(0,1)),          // intensity = length\n              check(U,vec2(1,-1)), 0);\n    O +=  char(num(U)) * ( length(O.rgb) < .5 ? 1. : -1.);      // draw number\n    \n    O = sqrt(O);                                                // to sRGB\n              \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}