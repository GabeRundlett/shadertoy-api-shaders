{
    "Shader": {
        "info": {
            "date": "1616879644",
            "description": "This fractal pattern has many overlapping and blended colors.\nFull-screen mode recommended.",
            "flags": 0,
            "hasliked": 0,
            "id": "fds3Wl",
            "likes": 6,
            "name": "Rainbow tie-dye",
            "published": 3,
            "tags": [
                "fractal",
                "carpet",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvec3 c1 = vec3(6.2,6.4,1.1); //change this constant to get different patterns!\n//vec3 c1 = vec3(7.2,7.4,1.1);\n//vec3 c1 = vec3(8.0,8.2,1.1);\n//vec3 c1 = vec3(8.0,9.0,1.1);\n//vec3 c1 = vec3(2.0,2.7,1.07); //looks like a carpet\n//vec3 c1 = vec3(9.8,10.0,1.1);\n\n\nvec2 triangle_wave(vec2 a,float scale,vec3 h1){\n    \n    return abs(fract((a+c1.xy+h1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col;  \n    float t1 = 1.0;\n    float offset = .16;\n    float scale2 = 1.2;\n    vec3 h1 = hash31(floor(iTime/5.0))*5.0;\n    for(int c=0;c<6;c++){\n        float scale = c1.z;\n        vec2 uv = (fragCoord-iResolution.xy)/iResolution.y/t1/2.0;\n        uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n        for(int i=0;i<3;i++)\n        {          \n            uv = triangle_wave(uv+offset,scale,h1);\n            uv = triangle_wave(uv+col.xy,scale,h1);\n            //scale /= scale2+col.x;\n            offset /= scale2;\n            uv.y /= -1.0;\n            //uv *= scale+offset;\n            \n        }\n     col[c] = fract((uv.x)-(uv.y));\n     col = col.yzx;\n\t}\n    \n    fragColor = vec4(vec3(col),1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}