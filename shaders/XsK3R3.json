{
    "Shader": {
        "info": {
            "date": "1455622497",
            "description": "When the fog clears you will see a model of the latest roller-coaster; perhaps you will be able to take a ride soon.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XsK3R3",
            "likes": 22,
            "name": "Sneak Preview",
            "published": 3,
            "tags": [
                "fog",
                "rollercoaster"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 6420
        },
        "renderpass": [
            {
                "code": "// \"Sneak Preview\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\nWhen the fog clears you will see a model of the latest roller-coaster; perhaps you\nwill be able to take a ride soon.\n*/\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 ip = floor (p);\n  vec2 fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  vec4 t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRnd2BoxDf (vec3 p, vec3 b, float r)\n{\n  vec3 d = abs (p) - b;\n  return max (length (max (d.xz, 0.)) - r, d.y);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  p.z -= h * clamp (p.z / h, -1., 1.);\n  return length (p) - r;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nmat3 AxToRMat (vec3 vz, vec3 vy)\n{\n  vec3 vx;\n  vz = normalize (vz);\n  vx = normalize (cross (vy, vz));\n  vy = cross (vz, vx);\n  return mat3 (vec3 (vx.x, vy.x, vz.x), vec3 (vx.y, vy.y, vz.y),\n     vec3 (vx.z, vy.z, vz.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\n#define NCAR 5\n\nmat3 carMat[NCAR];\nvec3 cp[12], carPos[NCAR], cOrg, oPos, cUpCurve, cDnCurve, sunDir, qHit, qnHit,\n   ballPos, noiseDisp;\nfloat cLen[13], tCur, dstFar, hTop, rLoop, lenLoop, hzRamp, rDnCurve,\n   rUpCurve, rampDn, rampUp, lenStr, hTrk, wTrk, tWait, vFast, vfLoop, ballRad;\nint idObj;\nconst int nCar = NCAR;\nconst vec4 uVec = vec4 (1., 1., 1., 0.);\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  return vec3 (0.5) * max ((1. - 1.5 * abs (rd.y)), 0.);\n}\n\nvoid TrkSetup ()\n{\n  cOrg = vec3 (2., 0., -3.);\n  hTop = 1.5;\n  rLoop = 2.2;\n  lenLoop = 0.3;\n  hzRamp = 0.5;\n  rDnCurve = 2.;\n  rUpCurve = rDnCurve + lenLoop;\n  rampDn = 1.5;\n  rampUp = 1.3 * rampDn;\n  lenStr = rampDn - rampUp + 3. * hzRamp;\n  wTrk = 0.03;\n  hTrk = 0.05;\n  tWait = 2.;\n  vFast = 3.;\n  vfLoop = 0.6;\n  cDnCurve = cOrg + vec3 (- rDnCurve - lenLoop, 0., -2. * hzRamp);\n  cUpCurve = cOrg + vec3 (- rUpCurve + lenLoop, 2. * hTop, 2. * rampDn +\n     6. * hzRamp);\n  cp[0] = cDnCurve + vec3 (- rDnCurve, 0., lenStr);\n  cp[1] = cp[0] + lenStr * uVec.wwz;\n  cp[3] = cUpCurve - rUpCurve * uVec.xww;\n  cp[4] = cUpCurve + rUpCurve * uVec.xww;\n  cp[2] = cp[3] - 2. * hzRamp * uVec.wwz;\n  cp[5] = cp[4] - 2. * hzRamp * uVec.wwz;\n  cp[7] = cOrg + lenLoop * uVec.xww;\n  cp[8] = cOrg - lenLoop * uVec.xww;\n  cp[6] = cp[7] + 4. * hzRamp * uVec.wwz;\n  cp[9] = cDnCurve + rDnCurve * uVec.xww;\n  cp[10] = cDnCurve - rDnCurve * uVec.xww;\n  cp[11] = cp[0];\n  cLen[0] = 0.;\n  for (int k = 1; k <= 11; k ++) cLen[k] = length (cp[k] - cp[k - 1]);\n  cLen[4] = pi * rUpCurve;\n  cLen[8] = length (vec2 (2. * pi * rLoop, 2. * lenLoop)) * (1. + vfLoop);\n  cLen[10] = pi * rDnCurve;\n  for (int k = 6; k <= 10; k ++) cLen[k] /= vFast;\n  for (int k = 1; k <= 11; k ++) cLen[k] += cLen[k - 1];\n  cLen[12] = cLen[11] + tWait;\n}\n\nvec3 TrkPath (float t, out vec3 oDir, out vec3 oNorm)\n{\n  vec3 p, p1, p2, u;\n  float w, a, s;\n  int ik;\n  t = mod (t, cLen[12]);\n  ik = -1;\n  for (int k = 1; k <= 11; k ++) {\n    if (t < cLen[k]) {\n      t -= cLen[k - 1];\n      p1 = cp[k - 1];\n      p2 = cp[k];\n      w = cLen[k] - cLen[k - 1];\n      ik = k;\n      break;\n    }\n  }\n  oNorm = vec3 (0., 1., 0.);\n  if (ik < 0) {\n    p = cp[0];\n    oDir = vec3 (0., 0., 1.);\n  } else if (ik == 2 || ik == 6) {\n    oDir = p2 - p1;\n    p.xz = p1.xz + oDir.xz * t / w;\n    p.y = p1.y + oDir.y * smoothstep (0., 1., t / w);\n    oDir.xz /= w;\n    oDir.y *= 6. * (t  / w) * (1. - t / w) / w;\n    oDir = normalize (oDir);\n  } else if (ik == 4) {\n    a = pi * t / w;\n    p = cUpCurve;\n    u = vec3 (- cos (a), 0., sin (a));\n    p.xz += rUpCurve * u.xz;\n    oDir = cross (oNorm, u);\n  } else if (ik == 8) {\n    a = t / w;\n    a = (a < 0.5) ? a * (1. + vfLoop * (1. - 2. * a)) :\n       a * (1. + 2. * vfLoop * (a - 1.5)) + vfLoop;\n    p = 0.5 * (cp[7] + cp[8]);\n    p.x += lenLoop * (1. - 2. * a);\n    a = 2. * pi * a;\n    u = vec3 (0., cos (a), sin (a));\n    p.yz += rLoop * (vec2 (1., 0.) - u.yz);\n    oNorm = u;\n    oDir = normalize (vec3 (-2. * lenLoop,\n       2. * pi * rLoop * vec2 (sin (a), - cos (a))));\n  } else if (ik == 10) {\n    a = pi * t / w;\n    p = cDnCurve;\n    u = vec3 (cos (a), 0., - sin (a));\n    p.xz += rDnCurve * u.xz;\n    oDir = cross (oNorm, u);\n  } else if (ik <= 11) {\n    oDir = p2 - p1;\n    p = p1 + oDir * t / w;\n    oDir = normalize (oDir);\n  }\n  return p;\n}\n\nfloat TrkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 trkCs, tr;\n  float d, f;\n  trkCs = vec2 (wTrk, hTrk);\n  q = p - cOrg;\n  q.y -= rLoop;\n  f = smoothstep (0., 1., atan (abs (q.z), - q.y) / pi);\n  tr = vec2 (length (q.yz) - rLoop, q.x - sign (q.z) * lenLoop * f);\n  d = min (max (max (PrBox2Df (tr - lenLoop * uVec.wy, trkCs.yx), q.z),\n     q.x - lenLoop - wTrk), max (max (PrBox2Df (tr + lenLoop * uVec.wy,\n     trkCs.yx), - q.z), - q.x - lenLoop - wTrk));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p - 0.5 * (cp[5] + cp[6]);\n  f = clamp ((0.5 / rampDn) * q.z + 0.5, 0., 1.);\n  q.y -= hTop * (2. * smoothstep (0., 1., f) - 1.);\n  d = max (PrBoxDf (q, vec3 (wTrk, hTrk * (1. + 2. * abs (f * (1. - f))),\n     rampDn)), abs (q.z) - rampDn);\n  q = p - 0.5 * (cp[1] + cp[2]);\n  f = clamp ((0.5 / rampUp) * q.z + 0.5, 0., 1.);\n  q.y -= hTop * (2. * smoothstep (0., 1., f) - 1.);\n  d = min (d, max (PrBoxDf (q, vec3 (wTrk, hTrk * (1. + 2. * abs (f * (1. - f))),\n     rampUp)), abs (q.z) - rampUp));\n  d = min (d, PrBoxDf (p - 0.5 * (cp[2] + cp[3]), vec3 (trkCs, hzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cp[4] + cp[5]), vec3 (trkCs, hzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cp[6] + cp[7]), vec3 (trkCs, 2. * hzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cp[8] + cp[9]), vec3 (trkCs, hzRamp)));\n  d = min (d, PrBoxDf (p - 0.5 * (cp[1] + cp[10]), vec3 (trkCs, lenStr)));\n  q = p - 0.5 * (cp[9] + cp[10]);\n  d = min (max (PrBox2Df (vec2 (length (q.xz) - rDnCurve, q.y), trkCs), q.z), d);\n  q = p - 0.5 * (cp[3] + cp[4]);\n  d = min (d, max (PrBox2Df (vec2 (length (q.xz) - rUpCurve, q.y), trkCs),\n     - q.z));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return 0.7 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, f, colRad, szFac;\n  p.y -= -2.;\n  dMin = dstFar;\n  dMin = TrkDf (p, dMin);\n  q = p - cp[0] - 0.5 * hTrk * uVec.wyw;\n  q.x = abs (q.x) - 0.2;\n  d = PrBoxDf (q, vec3 (0.15, 0.5 * hTrk, 0.4));\n  q = p - cDnCurve + (rDnCurve - 0.1) * uVec.wwz;\n  d = min (d, max (min (PrCylAnDf (q.yzx, 0.3, 0.015, 0.6),\n     PrBoxDf (q, vec3 (0.6, 0.005, 0.3))), - q.y));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  colRad = 0.04;\n  q = p - cUpCurve - vec3 (0., - hTop, rUpCurve);\n  d = PrCylDf (q.xzy, colRad, hTop);\n  q = p - cUpCurve - vec3 (0., - hTop, - hzRamp);\n  q.x = abs (q.x) - rUpCurve;\n  d = min (d, PrCylDf (q.xzy, colRad, hTop));\n  q = p - 0.5 * (cp[1] + cp[2]) + 0.5 * (hTop + colRad) * uVec.wyw;\n  d = min (d, PrCylDf (q.xzy, colRad, 0.5 * hTop + colRad));\n  q = p - 0.5 * (cp[5] + cp[6]) + 0.5 * hTop * uVec.wyw;\n  d = min (d, PrCylDf (q.xzy, colRad, 0.5 * hTop));\n  q = p - cOrg - (rLoop + 0.03) * uVec.wyw;\n  q.x = abs (q.x) - lenLoop - wTrk - 0.15;\n  d = min (d, PrCylDf (q.xzy, colRad, rLoop + 0.03));\n  q = p - cOrg - vec3 (0., 2. * (rLoop + 0.03), 0.);\n  d = min (d, PrCylDf (q.yzx, colRad, lenLoop + wTrk + 0.15));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;\n  q.y -= -0.003;\n  d = PrRnd2BoxDf (q, vec3 (2.5, 0.002, 5.5), 1.);\n  if (d < dMin) { dMin = d;  idObj = 7; }\n  szFac = 0.8;\n  dMin *= szFac;\n  for (int k = 0; k < nCar; k ++) {\n    q = carMat[k] * (p - carPos[k]);\n    q.y -= hTrk + 0.04;\n    q *= szFac;\n    d = max (PrCapsDf (q, 0.085, 0.125),\n       - max (PrCapsDf (q + vec3 (0., -0.03, 0.), 0.08, 0.12), -0.015 - q.y));\n    if (d < dMin) { dMin = d;  idObj = 4; }\n  }\n  dMin /= szFac;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat BallHit (vec3 ro, vec3 rd, vec3 p, float s)\n{\n  vec3 v;\n  float h, b, d;\n  v = ro - p;\n  b = dot (rd, v);\n  d = b * b + s * s - dot (v, v);\n  h = dstFar;\n  if (d >= 0.) {\n    h = - b - sqrt (d);\n    qHit = ro + h * rd;\n    qnHit = (qHit - p) / s;\n  }\n  return h;\n}\n\nfloat FrAbsf (float p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nvec3 FrAbsv3 (vec3 p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nfloat TriNoise3d (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  p *= 0.005;\n  q = p;\n  for (int j = 0; j < 5; j ++) {\n    p += FrAbsv3 (q + FrAbsv3 (q).yzx) + noiseDisp;\n    p *= 1.2;\n    f += a * (FrAbsf (p.x + FrAbsf (p.y + FrAbsf (p.z))));\n    q *= 2. * mr;\n    q += 0.21;\n    a *= 0.9;\n  }\n  return 0.1 * clamp (2. * f - 1.5, 0., 1.);\n}\n\nvec3 FogCol (vec3 col, vec3 ro, vec3 rd, float dHit, float tRot)\n{\n  vec3 p, roo;\n  const vec3 cFog = vec3 (1.);\n  float diAx, d, b, f;\n  roo = ro;\n  ro -= ballPos;\n  ro.xz = Rot2D (ro.xz, tRot);\n  rd.xz = Rot2D (rd.xz, tRot);\n  diAx = 1. / max (0.001, length (ro - dot (rd, ro) * rd));\n  b = 0.05 * ballRad;\n  d = 0.;\n  for (int i = 0; i < 20; i ++) {\n    d += b;\n    f = smoothstep (1., 1.3, sqrt (d * (2. * ballRad - d)) * diAx);\n    p = ro + d * rd;\n    f = clamp (TriNoise3d (p) * f * f, 0., 1.);\n    col += f * (cFog - col);\n    if (length (p) > ballRad || length (roo + d * rd) > dHit) break;\n  }\n  return col;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, roo, rdo, vn;\n  float dstHit, dstBHit, s;\n  int idObjT;\n  dstFar = 100.;\n  roo = ro;\n  rdo = rd;\n  noiseDisp = 0.05 * tCur * vec3 (-1., 0., 1.);\n  dstBHit = BallHit (ro, rd, ballPos, ballRad);\n  dstHit = dstFar;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    col = vec3 (0.7, 0.7, 0.);\n    col = col * (0.5 + 0.5 * max (dot (vn, sunDir), 0.)) +\n       0.5 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n  } else col = BgCol (ro, rd);\n  if (dstBHit < dstFar) {\n    ro = roo;\n    rd = rdo;\n    ro += rd * dstBHit;\n    col = HsvToRgb (vec3 (mod (0.3 * tCur, 1.), 1., 1.)) *\n       FogCol (col, ro, rd, dstHit, 0.1 * tCur);\n    rd = reflect (rd, qnHit);\n    col = col + 0.1 + 0.2 * max (dot (qnHit, sunDir), 0.) +\n       0.2 * pow (max (0., dot (sunDir, rd)), 64.);\n  }\n  if (dstBHit < dstFar) {\n    s = 1. - abs (dot (rd, qnHit));\n    if (s > 0.) col = mix (col, BgCol (ro, rd), pow (s, 4.));\n  }\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, oDir, oNorm, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, vel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  dstFar = 100.;\n  TrkSetup ();\n  vel = 0.8;\n  for (int k = 0; k < nCar; k ++) {\n    carPos[k] = TrkPath (vel * tCur - tWait + cLen[12] *\n       float (nCar - 1 - k) / float (nCar), oDir, oNorm);\n    carMat[k] = AxToRMat (oDir, oNorm);\n  }\n  ballPos = vec3 (0.);\n  ballRad = 8.;\n  el = 0.1 * pi;\n  az = 0.1 * tCur;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = vec3 (0., 1., -15.) * vuMat;\n  sunDir = normalize (vec3 (1., 2., 1.));\n  rd = normalize (vec3 (uv, 6.)) * vuMat;\n  ro = vec3 (0., 0., -50.) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}