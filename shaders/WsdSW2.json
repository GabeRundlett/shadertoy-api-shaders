{
    "Shader": {
        "info": {
            "date": "1572912820",
            "description": "Codevember #3",
            "flags": 0,
            "hasliked": 0,
            "id": "WsdSW2",
            "likes": 2,
            "name": "Codevember #3 - Balls",
            "published": 3,
            "tags": [
                "raymarching",
                "first"
            ],
            "usePreview": 0,
            "username": "desertsky",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100\n#define SURF_DIST .01\n#define PI 3.14159\n  \nmat2 m2 = mat2(0.8,  0.6, -0.6,  0.8);\nmat2 im2 = mat2(0.8,  -0.6, 0.6,  0.8);\n\n  float smoothMin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n  \nfloat GetDist(vec3 p) {\n\n  vec4 s = vec4(0,2,4,.5);\n  vec4 s2 = vec4(0,2,4.5,.5); \n  vec4 s3 = vec4(0,2,5,.5); \n  vec4 s4 = vec4(0,2,5.5,.5); \n  vec4 s5 = vec4(0,2,6,.5); \n  vec4 s6 = vec4(0,2,6.5,.5); \n  vec4 s7 = vec4(0,2,7,.5); \n  \n  s.xy+=vec2(sin(iTime/.25), cos(iTime/.25));\n  s2.xy+=vec2(sin(iTime/.35), cos(iTime/.35));\n  s3.xy+=vec2(sin(iTime/.45), cos(iTime/.45));\n  s4.xy+=vec2(sin(iTime/.55), cos(iTime/.55));\n    s5.xy+=vec2(sin(iTime/.65), cos(iTime/.65));\n    s6.xy+=vec2(sin(iTime/.75), cos(iTime/.75));\n    s7.xy+=vec2(sin(iTime/.85), cos(iTime/.85));\n  float sphereDist = length(p-s.xyz) - s.w;\n  float sphereDist2 = length(p-s2.xyz) - s2.w;\n  float sphereDist3 = length(p-s3.xyz) - s3.w;\n    float sphereDist4 = length(p-s4.xyz) - s4.w;\n    float sphereDist5 = length(p-s5.xyz) - s5.w;\n    float sphereDist6 = length(p-s6.xyz) - s6.w;\n    float sphereDist7 = length(p-s7.xyz) - s7.w;\n  \n  float planeDist = p.y;\n  float d = smoothMin(planeDist, sphereDist, 0.4);\n    d = smoothMin(d, sphereDist2, 0.5);\n      d = smoothMin(d, sphereDist3, 0.5);\n        d = smoothMin(d, sphereDist4, 0.5);\n        d = smoothMin(d, sphereDist5, 0.5);\n        d = smoothMin(d, sphereDist6, 0.5);\n        d = smoothMin(d, sphereDist7, 0.5);\n  \n  return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n float dO = 0.; \n for (int i = 0; i < MAX_STEPS; i++) {\n   vec3 p = ro+rd * dO;\n   float dS = GetDist(p);\n   dO += dS;\n   if(int(dO) > MAX_STEPS || dS < SURF_DIST) break;\n }\n    return dO;\n}\n\nfloat noise(in vec2 p){\n\n    float res=0.;\n    float f=1.;\n\tfor( int i=0; i< 3; i++ ) \n\t{\t\t\n        p=m2*p*f+.6;     \n        f*=1.2;\n        res+=sin(p.x+sin(2.*p.y));\n\t}        \t\n\treturn res/3.;\n}\n\nfloat fbmabs( vec2 p ) {\n\t\n\tfloat f=1.;   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<8;i++){\t\n\t\tr += abs(noise( p*f )+.5)/f;       \n\t    f *=2.;\n        p=im2*p;    \n\t}\n\treturn 1.-r*.5;\n}\n\nvec3 GetNormal (vec3 p) {\n  float d = GetDist(p);\n  vec2 e = vec2(.01,0);   \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)); \n    return normalize(n);\n}\n\nfloat GetLight (vec3 p) {\n    \n    vec3 lightPos = vec3(1,5,6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l), 0.,1.);\n    float d = RayMarch(p+n*SURF_DIST,l);\n    if (d < length(lightPos-p)) {\n      dif *=.1;\n    }\n    return dif;\n}\n  \n//courtesy of https://www.shadertoy.com/view/4l23Rh\nvec3 sky(in vec2 p)\n{\t\nreturn sin(vec3(1.7,1.5,1)+ .7+ .9*fbmabs(p*4.-.02*iTime))+.25;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0);\n\n    vec3 ro = vec3(0,1,0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1)); \n  \n  float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n\n  color = vec3(dif);\n  color += sky(rd.xz*(.2+rd.y));\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}