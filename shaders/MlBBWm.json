{
    "Shader": {
        "info": {
            "date": "1515994516",
            "description": "Iterating on the hacked Road01 from yesterday.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlBBWm",
            "likes": 13,
            "name": "Road02",
            "published": 3,
            "tags": [
                "raymarching",
                "road"
            ],
            "usePreview": 0,
            "username": "nslottow",
            "viewed": 812
        },
        "renderpass": [
            {
                "code": "const float speed = 16.0;\n\n\n\n// Maps a position in the world to a position on the road\n\nvec3 pos_road_map(vec3 pos)\n{\n\tfloat z = pos.z;\n\n\tfloat x = pos.x +\n\t\t0.4 * cos(z * 0.1) +\n\t\t1.2 * cos(z * 0.01) +\n\t\t3.0 * sin((z + pos.x) * 0.01);\n\n\tfloat y =\n\t\t1.3 * cos(z * 0.007) * sin(z * 0.08) +\n\t\t0.25 * sin(z * 0.03 + 0.3) +\n\t\t0.1 * cos(x * 0.0348 + 0.24) +\n\t\t0.3 * sin(x * 0.1 + z * 0.2);\n\n\treturn vec3(x, y, z);\n}\n\nvec3 normal_road_map(vec3 pos)\n{\n\tconst float eps = 0.02;\n\n\tvec3 dir_z = pos_road_map(vec3(pos.xy, pos.z - eps)) - pos_road_map(vec3(pos.xy, pos.z + eps));\n\tvec3 dir_x = pos_road_map(vec3(pos.x - eps, pos.yz)) - pos_road_map(vec3(pos.x + eps, pos.yz));\n\tvec3 normal = cross(dir_z, dir_x);\n\n\treturn normalize(normal);\n}\n\nvec3 col_road_map(vec3 pos)\n{\n\tvec3 normal = normal_road_map(pos);\n\n\tvec3 dir_light = normalize(vec3(\n\t\t0.5,\n\t\t1.0 + sin(iTime * 0.134),\n\t\t4.0 * (1.0 + cos(iTime * 0.1))));\n\n\tfloat mix_light = clamp(dot(normal, dir_light), 0.0, 1.0);\n\tvec3 col_light = vec3(0.9, 0.75, 0.3);\n\n\tvec3 col_stripe = vec3(0.2);\n\tfloat mix_stripe = step(2.0, mod(pos.z, 4.0)) * 0.1;\n\n\tvec3 col_ground = vec3(0.135, 0.2, 0.1) +\n\t\tcol_stripe * mix_stripe +\n\t\tcol_light * mix_light;\n\n\tfloat midline = abs(pos_road_map(pos).x);\n\n\tfloat mix_road = 1.0 - smoothstep(0.0, 0.01, pow(midline, 16.0));\n\tvec3 col_road = vec3(0.2, -0.1, 0.2);\n\tcol_ground = mix(col_ground, col_road, mix_road * 0.7);\n\n\tfloat mix_line = (1.0 - smoothstep(0.0, 0.0005, pow(midline, 2.5))) * smoothstep(0.2, 0.3, abs(mod(pos.z, 1.5))-0.75);\n\tvec3 col_line = vec3(0.7, 0.7, 0.7);\n\tcol_ground = mix(col_ground, col_line, mix_line * 0.7);\n\n\treturn col_ground;\n}\n\nvec3 col_sky(vec2 dxy_frag)\n{\n    vec2 uv = dxy_frag.xy / iResolution.xy;\n    return vec3(0.4, 0.6, 0.9 * uv.y);\n}\n\nbool intersect_ray_road(vec3 pos_origin, vec3 dir, out vec3 pos_intersect)\n{\n\tconst float t_min = 0.001;\n\tconst float t_max = 100.0;\n\tconst float dt = 1.0;\n\tfloat y_road = 0.0;\n\tfloat y_ray = 0.0;\n\n\tfor (float t = t_min; t < t_max; t += dt)\n\t{\n\t\tvec3 pos_ray = pos_origin + dir * t;\n\t\tvec3 pos_road = pos_road_map(pos_ray);\n\t\tif (pos_ray.y < pos_road.y)\n\t\t{\n\t\t\t// interpolate to the value of t where the ray actually intersects\n\t\t\t// the road\n\t\t\t\n\t\t\tt = (t - dt) + dt * (y_road - y_ray) / ((pos_ray.y - y_ray) - (pos_road.y - y_road));\n\n\t\t\tpos_intersect = pos_origin + dir * t;\n\t\t\treturn true;\n\t\t}\n\t\ty_road = pos_road.y;\n\t\ty_ray = pos_ray.y;\n\t}\n\n\treturn false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tconst float fov = radians(50.0);\n\tconst float tan_hfov = tan(fov * 0.5);\n\tconst float near = 0.1;\n\tconst float far = 1.0;\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n\tvec3 pos_road_cam = pos_road_map(vec3(0, 0, speed * iTime));\n\n\tfloat len_car = 1.5;\n\tfloat h_car = 0.5;\n\n\tfloat x_next = -pos_road_map(vec3(0, 0, speed * iTime + len_car * 4.0)).x;\n\n\tvec3 pos_cam = vec3(\n\t\t0.35-pos_road_cam.x,\n\t\tpos_road_cam.y + h_car,\n\t\tpos_road_cam.z - len_car);\n\n\tfloat swivel = (x_next - pos_cam.x) * 0.07;\n\n\tvec3 dir_ray = normalize(\n\t\tvec3(\n\t\t\ttan_hfov * uv.x + swivel,\n\t\t\ttan_hfov * uv.y - 0.05,\n\t\t\t1.0)\n\t\t* (far - near));\n\t\n\n\tvec3 pos_intersect;\n\tif (intersect_ray_road(pos_cam, dir_ray, pos_intersect))\n\t{\n\t\tfragColor = vec4(col_road_map(pos_intersect), 1.0);\n\t}\n\telse\n\t{\n\t\tfragColor = vec4(col_sky(fragCoord.xy), 1.0);\n\t}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}