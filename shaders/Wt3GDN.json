{
    "Shader": {
        "info": {
            "date": "1576289725",
            "description": "experimented with the algorithm in the paper \"One-Shot Approximate Local Shading\" on stream.\n\nwatch the stream here https://www.twitch.tv/videos/521167444",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt3GDN",
            "likes": 32,
            "name": "Twitch: One-Shot Local Shading",
            "published": 3,
            "tags": [
                "arealight",
                "livecode",
                "twitchstream"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 859
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat scene(vec3 p) {\n  return length(p-vec3(0,0,1))-1.;\n}\n\nstruct Plane {\n  vec3 I;\n  vec3 N;\n};\n\nstruct PlaneHit {\n  bool hit;\n  vec3 p;\n};\n\nPlaneHit planeIntersect(vec3 init, vec3 cam, Plane pln) {\n  float t = -(dot(init, pln.N) + dot(pln.I, pln.N))/dot(cam, pln.N);\n  return PlaneHit(t > 0., cam*t+init);\n}\n\nvec3 checkerboard(vec2 uv, float d) {\n  uv += sin(iTime)*3.;\n  return pow(vec3(smoothstep(-d,d,sin(uv.x)*sin(uv.y)), smoothstep(-d,d,sin(uv.x)*sin(uv.y+0.8)), smoothstep(-d,d,sin(uv.x+0.8)*sin(uv.y))),vec3(2));\n}\n\nvec3 oneShot(vec3 p, vec3 n, Plane pln) {\n  float x = dot(n, pln.N);\n  vec3 rj = n - x*pln.N;\n  vec3 pp = (p - pln.I) - dot(p - pln.I, pln.N)*pln.N + pln.I;\n  float h = distance(pp, p);\n  float hr = h/(sqrt(3.+x*x)-2.*x);\n  vec3 pos = pp + rj*hr;\n  vec3 dir = normalize(p-pos);\n  float lod = distance(p,pos);\n  \n  return 1.5*checkerboard(pos.xy, lod)*dot(dir, pln.N)*dot(-n, dir)/pow(distance(p,pos)+1.,2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 cam = normalize(vec3(0.7,uv));\n  vec3 init = vec3(-4,0,1);\n  vec3 p = init;\n  bool hit = false;\n  for (int i = 0; i < 100; i++) {\n    float dist = scene(p);\n    if (abs(dist) < 0.001) { hit = true; break; }\n    if (distance(p, init) > 30.) { break; }\n    p += cam*dist;\n  }\n  Plane plane = Plane(vec3(0), normalize(vec3(0,0,1)));\n  PlaneHit pln = planeIntersect(init, cam, plane);\n  vec3 n = p-vec3(0,0,1);\n  vec3 color = vec3(0);\n  if (pln.hit && (!hit || distance(init, pln.p) < distance(init, p))) {\n    color = checkerboard(pln.p.xy, pow(distance(init, pln.p),2.)*0.001);\n    color *= sqrt(smoothstep(150., 0., distance(init, pln.p)));\n  }\n  if (hit) {\n    color = oneShot(p, n, plane);\n  }\n  if (color.x < 0. || color.y < 0. || color.z < 0.) {\n    color = vec3(1,0,0);\n  }\n  fragColor.xyz = sqrt(color);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}