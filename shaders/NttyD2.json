{
    "Shader": {
        "info": {
            "date": "1660594640",
            "description": "a bunch of complex functions.\nnaming convention: z and w are imaginary, n is real, k is an integer\nif there's an error, please let me know and I'll fix it.\n\nyou are completely free to use this by the way, a thanks would be nice though :^)",
            "flags": 0,
            "hasliked": 0,
            "id": "NttyD2",
            "likes": 0,
            "name": "Complex Functions Reserve",
            "published": 3,
            "tags": [
                "complex",
                "functions",
                "resource"
            ],
            "usePreview": 0,
            "username": "tungster24",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "//complex operations resource\n//basic four operators\nvec2 addc(in vec2 z, in vec2 w) {return vec2(z.x+w.x,z.y+w.y);}\nvec2 subc(in vec2 z, in vec2 w) {return vec2(z.x-w.x,z.y-w.y);}\nvec2 mulc(in vec2 z, in vec2 w) {return vec2(z.x*w.x-z.y*w.y,z.x*w.y+z.y*w.x);}\nvec2 divc(in vec2 z, in vec2 w) {return vec2((z.x*w.x+z.y*w.y)/(w.x*w.x+w.y*w.y),(z.y*w.x-z.x*w.y)/(w.x*w.x+w.y*w.y));}\n\n//conjugate\nvec2 con(in vec2 z) {return vec2(z.x,-z.y);}\n//absolute value\nfloat absc(in vec2 z) {return sqrt(z.x*z.x+z.y*z.y);}\n//argument\nfloat arg(in vec2 z) {return atan(z.y,z.x);}\n//cis\nvec2 cis(in float x) {return vec2(cos(x),sin(x));}\n\n//real exponentiation\nvec2 powc(in vec2 z,in float n) {return pow(absc(z),n)*vec2(cos(arg(z)*n),sin(arg(z)*n));}\n//natural logarithm\nvec2 lnc(in vec2 z,in int k) {return vec2(log(absc(z)),arg(z)+6.2831*float(k));}\n//complex exp\nvec2 expc(in vec2 z) {return exp(z.x)*vec2(cos(z.y),sin(z.y));}\n\n//complex sine\nvec2 sinc(in vec2 z) {return vec2(sin(z.x)*cosh(z.y),cos(z.x)*sinh(z.y));}\n//complex cosine\nvec2 cosc(in vec2 z) {return vec2(cos(z.x)*cosh(z.y),sin(z.x)*sinh(z.y));}\n//complex tangent\nvec2 tanc(in vec2 z) {return vec2(sin(2.*z.x),sinh(2.*z.y))/(cos(2.*z.x)+cosh(2.*z.y));}\n\n//complex inverse sine\nvec2 invsinc(in vec2 z,in int k) {vec2 COMM = vec2(mulc(z,z).x-1.,mulc(z,z).y);return mulc(vec2(0.,-1.),lnc(addc(mulc(z,vec2(0.,1.)),mulc(vec2(sqrt(absc(COMM)),0.),expc(mulc(vec2(0.,0.5),vec2(arg(COMM),0.))))),0))+float(k)*6.2831;}\n//complex inverse cosine\nvec2 invcosc(in vec2 z,in int k) {vec2 COMM = vec2(mulc(z,z).x-1.,mulc(z,z).y);return mulc(vec2(0.,-1.),lnc(addc(z,mulc(vec2(sqrt(absc(COMM)),0.),expc(mulc(vec2(0.,0.5),vec2(arg(COMM),0.))))),0)) + float(k)*6.2831;}\n//complex inverse tangent\nvec2 invtanc(in vec2 z,in int k) {return mulc(vec2(0.,-0.5),lnc(divc(vec2(-z.x,1.-z.y),vec2(z.x,1.+z.y)),0))+float(k)*3.1415926;}\n//complex inverse cotangent\nvec2 invcotc(in vec2 z,in int k) {return mulc(vec2(0.,-0.5),lnc(divc(vec2(z.x,1.+z.y),vec2(-z.x,1.-z.y)),0))+float(k)*3.1415926;}\n\n//full exponentiation\nvec2 powf(in vec2 z,in vec2 w) {float r = absc(z); float t = arg(z);return expc(addc(mulc(vec2(log(r),0.),w),mulc(vec2(0.,t),w)));}\n//integer tetration\nvec2 tetc(in vec2 z,in int k) {vec2 w=z; for(int i=1;i<k;i++)w = powf(w,z); return w;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(vec2(1.-sin(iTime)/2.-fragCoord.xy/300.),0.,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}