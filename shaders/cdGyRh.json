{
    "Shader": {
        "info": {
            "date": "1695748971",
            "description": "A 2D network of pseudo-random lanes with light-sparks wandering along them.\n\n(Whats eating the performance on this one? Just the presence of the nested for-loop?)",
            "flags": 0,
            "hasliked": 0,
            "id": "cdGyRh",
            "likes": 14,
            "name": "Light Lanes",
            "published": 3,
            "tags": [
                "2d",
                "simplistic",
                "lanes"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 594
        },
        "renderpass": [
            {
                "code": "// Light Lanes 0.51.230927 by QuantumSuper\n// 2d pseudo-random lanes with light-\"sparks\" wandering along them\n// \n\n\nfloat aaStep( float fun){return smoothstep( min(fwidth(fun),.001), .0, fun);} //simple antialiasing\n\nfloat hash21(vec2 p){ //pseudorandom generator, see The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio\n    float amp = 0.;\n\tfloat delY = .1;\n\tfloat r, ox, fun;\n    \n\tfor (float m=-1.;m<=1.;m+=.05){\n\t\tox = m;\n\t\tfun = uv.x-ox;\n\t\tfor (float n=0.;n<2./delY;n++){ //uv.y -1..1\n\t\t\tr = floor(hash21(vec2(n+ceil(iTime/8.),ox+max(.98,fract(iTime/8.))))*3.-1.); //r {-1,0,1}\n            fun += (r*(uv.y-(delY*n-1.))+ox+m) * step(delY*n-1.,uv.y+.001) * step(uv.y+.001,delY*(n+1.)-1.); //+.001 to avoid weird? singularities for negative uv.y\n            ox = r*(delY*(n+1.)-1.) - (r*(delY*n-1.)-ox-m) - m; //? isnt that supposed to be: ox += r*delY ?\n\t\t}\n\t\tamp += aaStep(abs(fun)-.009*iResolution.y/iResolution.x) * (.1+.9*aaStep(abs(fragCoord.y/iResolution.y-fract(iTime/4.+m))-.005*iResolution.y/iResolution.x));\n\t} \n\n    fragColor = vec4(vec3(amp),1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}