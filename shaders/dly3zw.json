{
    "Shader": {
        "info": {
            "date": "1683720845",
            "description": "this is not a voxel renderer",
            "flags": 0,
            "hasliked": 0,
            "id": "dly3zw",
            "likes": 32,
            "name": "Morphing Voxels [441 chars]",
            "published": 3,
            "tags": [
                "noise",
                "grid",
                "cube",
                "intersection",
                "4d",
                "cubic",
                "trace",
                "short",
                "golf"
            ],
            "usePreview": 1,
            "username": "kishimisu",
            "viewed": 908
        },
        "renderpass": [
            {
                "code": "/* Morphing Voxels by @kishimisu (2023) - https://www.shadertoy.com/view/dly3zw\n   [Originally 611 chars, -151 chars by @FabriceNeyret!]                           \n*/\n\n#define T texture(iChannel0, vec3( O+f + O.w++*R + .5 )/32. )     //\n#define N (                                       \\\n    O = floor(f =  vec4(d.z+iTime, iTime, d)     \\\n                 * mat4(1,0,0,2,-1,-1,-2,1,1,0,-1,-1,0,1,1,.6)/2. ), \\\n    f -= O,  f *= f * (3.-f-f),                   \\\n    mix( T, T, f ) ).w \n\nvoid mainImage(out vec4 O, vec2 F) {\n    vec4  R = iResolution.xyzz,\n          r = vec4(F+F, R.yw) - R,\n          P, d, f;\n    \n    for (; tanh( O.a = length( d = .1*floor(P) ) ) + O.a / 1e2 - .75 < N     \n         ; P += ( min(min( f = ( .5*sign(r) + .5 - P+d/.1 ) / r, f.y).x, f.z) + .01/R.y ) * r\n        ); \n          \n    r += length(P)*.2 - r; d/=.1;\n    O = (.6 + cos(r + N + vec4(0,1,2,0)) ) / exp(.06*r);\n}\n\n/*  Technical Details:\n   \n    I got inspired to create this after seeing https://www.shadertoy.com/view/mtyGzD\n    \n    I have no idea how voxels renderer work and I doubt this is the most efficient way\n    to do it.\n    My approach was to trace a ray along a cubic grid using direct box intersection.\n    The ray first starts at (0,0,0) and is inside a cube of size 1. \n    The intersection between the ray and the cube is calculated, then the ray is \n    moved to this new intersection (actually a bit further to make sur the ray is \n    on the other side).\n    Using space repetition, the ray will be translated to the origin before calculating\n    the next box intersection, this way we'll only ever have to check a unit cube \n    located at the origin for each step.\n    \n    Then I use 4d noise (3d + time) to stop the ray depending on a noise value treshold.\n    The noise function is a golfed version of @stubbe's 4D noise.\n    (https://www.shadertoy.com/view/XltSWj)\n*/\n\n/*  Original version [611 chars]:\n    \n#define T(u) texture(iChannel0, (u + p.xy + p.z*z + p.w*w + f.xy + .5)/256.).r,\nfloat n(vec3 a) {\n    a.z += iTime;\n\n    vec2 z = vec2(37, 17), w = vec2(59, 83);\n    vec4 x = vec4(a, iTime) * mat4(0,1,.6,-.4,-1,.36,-.48,-.5,-.6,-.5,.64,.2,.4,.3,.2,.4),\n         p = floor(x), \n         f = fract(x); \n         f *= f * (3.-f-f);\n\n    return mix(  mix(T()  T(z)   f.z), \n                 mix(T(w) T(z+w) f.z),  f.w);\n}\n\nvoid mainImage(out vec4 O, vec2 F) {\n    vec3 R   = iResolution,\n         r   = normalize(vec3(F+F, R.y)-R),\n         p   = R-R, q, d;\n\n    for ( float i = 0.; \n          i++ < 3e2 && \n          .15 + length(d = floor(p*.5))*.001 - smoothstep(6., 0., length(d.xy)) < n(d*.1);\n\n        q  = abs(1./r) - (mod(p, 2.) - 1.)/r,\n        p += (min(min(q.x, q.y), q.z) + .01) * r\n    ); \n\n    O = (.9 + cos(length(p)*.1 + n(d) + vec4(0,1,2,0))) / exp(.006*length(p));\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}