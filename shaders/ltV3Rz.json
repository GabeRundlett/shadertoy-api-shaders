{
    "Shader": {
        "info": {
            "date": "1472895979",
            "description": "Dusty menger scene from my 4k intro Surveillance\n\nhttps://www.youtube.com/watch?v=kiE2c06EzBQ\nhttp://www.pouet.net/prod.php?which=67120",
            "flags": 64,
            "hasliked": 0,
            "id": "ltV3Rz",
            "likes": 45,
            "name": "Surveillance",
            "published": 3,
            "tags": [
                "raymarching",
                "4k",
                "demoscene",
                "menger",
                "density",
                "coc"
            ],
            "usePreview": 0,
            "username": "Virgill",
            "viewed": 1701
        },
        "renderpass": [
            {
                "code": "//**********************************************************************************\n// dusty menger scene from my 4k intro Surveillance\n// Virgill 2016\n// https://www.youtube.com/watch?v=kiE2c06EzBQ\n// http://www.pouet.net/prod.php?which=67120\n//**********************************************************************************\n\n// circle of confusion idea by eiffie\n// more interesting menger by shane\nfloat focalDistance=20.;\nfloat aperature=.04;\nfloat fudgeFactor=.9; \nfloat shadowCone=.5;\nvec4 orbitTrap = vec4(0.);\nfloat blend =0.;\nfloat d = 0.;\nfloat m = 0.;\nvec3 pcoc = vec3(0.);\nfloat rCoC,h;\nvec4 col=vec4(0.);\t\nfloat pixelSize;\n\n// coc (eiffie)\nfloat CircleOfConfusion(float t)\n{ \nreturn max(abs(focalDistance-t)*aperature,pixelSize*(1.0+t));\n}\n\n// linestep (knighty)\nfloat linstep(float a, float b, float t)\n{\n    float v=(t-a)/(b-a);\n    return clamp(v,0.,1.);\n}\n\nvec3 rotXaxis(vec3 p, float rad)\n{\n\tfloat z2 = cos(rad) * p.z - sin(rad) * p.y;\n\tfloat y2 = sin(rad) * p.z + cos(rad) * p.y;\n\tp.z = z2;\n\tp.y = y2;\n\treturn p;\n}\n\nvec3 rotYaxis(vec3 p, float rad) \n{\n\tfloat x2 = cos(rad) * p.x - sin(rad) * p.z;\n\tfloat z2 = sin(rad) * p.x + cos(rad) * p.z;\n\tp.x = x2;\n\tp.z = z2;\n\treturn p;\n}\n\nvec3 rotZaxis(vec3 p, float rad) \n{\n\tfloat x2 = cos(rad) * p.x - sin(rad) * p.y;\n\tfloat y2 = sin(rad) * p.x + cos(rad) * p.y;\n\tp.x = x2;\n\tp.y = y2;\n\treturn p;\n}\n\nfloat rand1(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n// new and interesting menger formula (shane)\nfloat NewMenger(vec3 q)\n{\n \tvec3 p = abs(fract(q/3.)*3. - 1.5);\n \tfloat d = min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) - 1. + .05;\n    p =  abs(fract(q) - .5);\n \td = max(d, min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) - 1./3. + .05);\n    p =  abs(fract(q*2.)*.5 - .25);\n \td = max(d, min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) - .5/3. - .015); \n    p =  abs(fract(q*3./.5)*.5/3. - .5/6.);\n \treturn max(d, min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) - 1./18. - .015);\n}\n\n\n//***************************************************************************************************\n// MAP\n//***************************************************************************************************\n\nfloat map(in vec3 p)\n{\n\torbitTrap = vec4(length(p)-0.8*p.z,length(p)-0.8*p.y,length(p)-0.8*p.x,0.0)*1.0;\n\treturn NewMenger(p);\n}\n\n\n//***************************************************************************************************\n// fuzzy shadow\n//***************************************************************************************************\n\nconst float ShadowContrast = 0.99;\nfloat FuzzyShadow(vec3 ro, vec3 rd, float coneGrad, float rCoC){\n\tfloat  t=rCoC*2.0,s=1.0;\n\tfor(int i=0;i<9;i++)\n\t{\n\t\tif(s<0.1)continue;\n\t\tfloat r=rCoC+t*coneGrad+0.05;\n\t\tfloat d=map(ro+rd*t)+r*0.6;\n\t\ts*=linstep(-r,r,d);\n\t\tt+=abs(d)*(0.8+0.2*rand1(gl_FragCoord.xy*vec2(i)));\n\t}\n\treturn clamp(s*ShadowContrast+(1.0-ShadowContrast),0.0,1.0);\n}\n\n\n//***************************************************************************************************\n// Orbit color\n//***************************************************************************************************\n\nfloat Cycles = 4.0;\nvec3 cycle(vec3 c, float s) \n{\n\treturn vec3(0.5)+0.5*vec3(cos(s*Cycles+c.x),cos(s*Cycles+c.y),cos(s*Cycles+c.z));\n}\n\nvec3 BaseColor = vec3(0.2,0.2,0.2);\nvec3 OrbitStrength = vec3(0.8, 0.8, 0.8);\nvec4 X = vec4(0.6, 0.5, 0.6, 0.2);\nvec4 Y = vec4(1.0, 0.5, 0.1, 0.7);\nvec4 Z = vec4(0.7, 0.8, 1.0, 0.3);\nvec4 R = vec4(0.7, 0.7, 0.5, 0.1);\n\nvec3 getColor()\n{\n\torbitTrap.w = sqrt(orbitTrap.w);\n\tvec3 orbitColor = cycle(X.xyz,orbitTrap.x)*X.w*orbitTrap.x + cycle(Y.xyz,orbitTrap.y)*Y.w*orbitTrap.y + cycle(Z.xyz,orbitTrap.z)*Z.w*orbitTrap.z + cycle(R.xyz,orbitTrap.w)*R.w*orbitTrap.w;\n\tvec3 color = mix(BaseColor, 3.0*orbitColor,  OrbitStrength);\n\treturn color;\n}\n\n\n \n//***************************************************************************************************\n// Cast ray\n//***************************************************************************************************\n\n// coc (eiffie)\nvoid castRay(in vec3 ro, in vec3 rd) \n{\n\tvec3 lig = normalize(vec3(0.4+cos((25.+iTime)*0.33), 0.2, 0.6));\t\t\n    float t = 0.;\n    for (int i = 0; i < 70; i++) \n\t{\n\t\tif(col.w>0.999 ||t>15.0)continue;\n\t\trCoC=CircleOfConfusion(t);\n\t\th = map(ro)+0.5*rCoC;\n\t\tif(h<rCoC)\n\t\t{\n\t\t\tpcoc=ro-rd*abs(h-rCoC);\n\t\t\tvec2 v=vec2(rCoC*0.5,0.0);\n\t\t\tvec3 N=normalize(vec3(-map(pcoc-v.xyy)+map(pcoc+v.xyy),-map(pcoc-v.yxy)+map(pcoc+v.yxy),-map(pcoc-v.yyx)+map(pcoc+v.yyx)));\n\t\t\tvec3 scol=2.3*getColor();\t\n\t\t\tfloat newdiff = clamp(dot(lig, N), 0.0, 1.0);\n\t\t\tfloat newspec = pow(clamp(dot(reflect(rd, N), lig), 0.0, 1.0), 16.0);\n\t\t\tfloat newsh   = FuzzyShadow(pcoc,lig,shadowCone,rCoC+0.00);\t\t\t\n\t\t\tscol *= 0.5*newdiff+newspec;\n\t\t \tscol *= newsh;\n\t\t\tfloat alpha=(1.0-col.w)*linstep(-rCoC,rCoC,-h*1.7);\n\t\t\tcol+=vec4(scol*alpha,alpha);\n\t\t}\n\t\th=abs(fudgeFactor*h*(0.3+0.05*rand1(gl_FragCoord.xy*vec2(i))));\n\t\tro+=h*rd;\n\t\tt += h;\n\t}\n}\n\n//***************************************************************************************************\n// main\n//***************************************************************************************************\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfocalDistance=6.5+3.*cos((25.+iTime)*0.133);\n\tpixelSize=1.0/iResolution.y;\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n\tvec2 p = uv * 2.0 - 1.0;\n    vec3 rd = (vec3(2.*fragCoord - iResolution.xy, iResolution.y)); \n    rd = normalize(vec3(rd.xy, sqrt(max(rd.z*rd.z - dot(rd.xy, rd.xy)*.2, 0.))));\n    vec2 m = sin(vec2(0, 1.57079632) + (25.+iTime)/4.);\n    rd.xy = mat2(m.y, -m.x, m)*rd.xy;\n    rd.xz = mat2(m.y, -m.x, m)*rd.xz;\n    vec3 ro = vec3(0.0, 2.0, 5.+sin((25.+iTime)/2.));\n    \n\tcastRay(ro, rd);\n\n\tvec2 uv2=-0.3+2.*gl_FragCoord.xy/iResolution.xy;\n\t//anti branding noise\n    col-=0.10*rand1(uv2.xy*iTime);\t\t\t\t\t\t\t\n\n\n\tfragColor = col*0.7;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 4615,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/4klang-surveillance"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}