{
    "Shader": {
        "info": {
            "date": "1561847258",
            "description": "huehue\n",
            "flags": 32,
            "hasliked": 0,
            "id": "WtsXRr",
            "likes": 18,
            "name": "dingle dongle",
            "published": 3,
            "tags": [
                "thing",
                "desu",
                "komorebi",
                "dongle"
            ],
            "usePreview": 0,
            "username": "dubu",
            "viewed": 852
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv)*0.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define COLOR vec3(0.1, 0.2, 1.)\n//#define COLOR (sin(time*vec3(.345, .456, .657))*.4+.6)\n#define OFFSET vec2(0.5*cos(0.5*time-sin(time*0.5)), 0.5*sin(0.5*time+cos(time*0.75)))\n#define time iTime\n\nfloat saturate(float x){\n    return clamp(x,0.0,1.0);\n}\n\nvec3 CenterLight(vec2 p){\n    p -= OFFSET;\n    p *= 12.;\n \tfloat l = 1. / dot(p, p);\n    return l*l * COLOR;\n}\nvec3 Straws(vec2 p){\n    p -= OFFSET;\n\tfloat a = atan(p.y, p.x);\n    float d = dot(p,p);\n    \n    float l = saturate(1.-length(p));\n    \n    l *= 0.5 + 0.5*sin(a*50.+d*5.+sin(time*1.)*20.);\n    \n    l *= 0.5 + 0.3 * sin(d*10.+a*10.-time*5.);\n    return l*l*COLOR;\n}\nvec3 Lights(vec2 p){\n    p -= OFFSET;\n    \n    float res = 0.0;\n    \n    for(float i = 0.; i < 500.; ++i){\n        float t = time + i*i;\n        \n        vec2 q = p + vec2(cos(t), sin(t)) * sin(i*11.+time*0.5);\n        float l = 0.0003 / pow(length(q), 1.5);\n        \n        res += l;\n    }\n    \n    res = res*res;\n    \n    return res * COLOR;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvs = fragCoord.xy/iResolution.xy;\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    vec2 p = uv;\n    \n    col += CenterLight(p);\n \tcol += Straws(p);\n    col += Lights(p);\n    \n    col = max(min(vec3(1.0), col), vec3(0.0));\n    vec3 newFrame = pow(col, vec3(1./0.8));\n    vec3 oldFrame = texture(iChannel0, uvs).rgb;\n    fragColor = vec4(newFrame + oldFrame,1.0)*0.85;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}