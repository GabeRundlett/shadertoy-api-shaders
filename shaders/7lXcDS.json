{
    "Shader": {
        "info": {
            "date": "1648642404",
            "description": "GameCube Logo\n//TODO le faire de maniÃ¨re plus propre",
            "flags": 0,
            "hasliked": 0,
            "id": "7lXcDS",
            "likes": 1,
            "name": "Logo GameCube",
            "published": 3,
            "tags": [
                "logo",
                "gamecube"
            ],
            "usePreview": 0,
            "username": "Karp",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "vec3 Cube(vec2 uv,float size, vec3[3] colors, float blurLvl)\n{\n    vec3 result = vec3(0.0);\n\n    float top   = sdRhombus(RotateUV(uv, 000.0) + vec2(0.0,-.6 /1.732), vec2(.6,.6 /1.732));\n    float left  = sdRhombus(RotateUV(uv, 120.0) + vec2(0.0,-.6 /1.732), vec2(.6,.6 /1.732));\n    float right = sdRhombus(RotateUV(uv,-120.0) + vec2(0.0,-.6 /1.732), vec2(.6,.6 /1.732));\n\n    result = mix(colors[0], result, Clamp01((top)*blurLvl));\n    result = mix(colors[1], result, Clamp01((left)*blurLvl));\n    result = mix(colors[2], result, Clamp01((right)*blurLvl));\n\n    return result;\n}\nfloat CubeMask(vec2 uv,float size, float blurLvl)\n{\n    return Clamp01((sdHexagon(RotateUV(uv, 30.0), size *0.5))*blurLvl);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Parameter\n    float size = 0.6;\n    float rounding = 0.1;\n    float blurLvl = 250.0;\n\n    //Color\n    vec3 shadow = Color255(95,74,175);\n    vec3 highlight = Color255(168,139,255);\n    vec3 midtone = Color255(199,166,255);\n    vec3[] colors = vec3[](shadow,midtone,highlight);\n    \n    // UV manipulation\n    vec2 uv  = AspectRatioUV(fragCoord.xy, iResolution.xy);\n    uv = RotateUV(uv, -120.0);\n    \n    //BackGround\n    vec3 pixel = vec3(0.1);\n    \n    //Cube\n    pixel = mix(pixel, Cube(uv, 10.,colors,blurLvl), 1.-Clamp01(CubeMask(uv, 1.,blurLvl)));\n    pixel = mix(pixel, Cube(-uv, 1.,colors,blurLvl), 1.-CubeMask(uv, 0.75,blurLvl));\n    pixel = mix(pixel, vec3(0.1), 1.-CubeMask(uv, 0.72,blurLvl));\n    pixel = mix(Cube( uv, 1.,colors,blurLvl), pixel, CubeMask(uv, 0.5,blurLvl));\n    \n    float voidmask = 1.-Clamp01(CubeMask(uv + vec2(.38,-.38/1.732), 0.3,blurLvl));\n    voidmask *= 1.-Clamp01((sdBox(RotateUV(uv,-120.0)+ vec2(-.095,.825/1.732), vec2(.08,.18)))*blurLvl);\n    pixel = mix(pixel, vec3(0.1), voidmask);\n    \n    voidmask = 1.-Clamp01((sdBox(RotateUV(uv,-120.0)+ vec2(.08,.5/1.732), vec2(.091,.15)))*blurLvl);\n    pixel = mix(pixel, Cube(uv, 1.,colors,blurLvl), voidmask);\n    \n    voidmask = 1.-Clamp01(sdRhombus(RotateUV(uv,30.0) + vec2(.365,-.225), vec2(.135/1.732,.135))*blurLvl);\n    voidmask *= 1.-Clamp01(sdRhombus(RotateUV(uv,30.0) + vec2(.3,-.35), vec2(.135/1.732,.135))*blurLvl);\n    voidmask *= Clamp01(sdBox(RotateUV(uv,30.0) + vec2(.4,-.485), vec2(.135,.135))*blurLvl);\n    voidmask *= Clamp01(sdBox(RotateUV(uv,30.0) + vec2(.3,-.09), vec2(.135,.135))*blurLvl);\n    pixel = mix(pixel, shadow, voidmask);\n\t\n    vec4 result = vec4(pixel.xy, voidmask, 1.);\n    result = vec4(pixel.xyz, 1.);\n    \n\tfragColor = result;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265359\n//UV\nvec2 AspectRatioUV(vec2 fragCoord, vec2 iResolution)\n{\t\n    vec2 uv = vec2( fragCoord.xy - 0.5*iResolution.xy );\n    // [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n\tuv = 2.0 * uv.xy / iResolution.y;\n    // AspectRatio = 1920 / 1080 = 1.778\n    // [-0.5*iResolution.x, 0.5*iResolution.x] ->[-1.778, 1.778]\n\t// [-0.5*iResolution.y, 0.5*iResolution.y] ->[-1, 1]\n    \n    return uv;\n}\nvec2 RotateUV(inout vec2 uv, float angle)\n{\t\n\tangle = angle * PI / 180.0;\n    return uv * mat2(cos(angle),sin(angle),-sin(angle),cos(angle));\n}\n\n//Color \nvec3 Color255(int R, int G, int B)\n{\n    return vec3(float(R)/255.0, float(G)/255.0, float(B)/255.0);\n}\nfloat Clamp01( in float value)\n{\n    return clamp(value,0.0,1.0);\n}\n\n//Regular Hexagon - exact from https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n// Rhombus - exact from IQ (https://www.shadertoy.com/view/XdXcRB)\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\nfloat sdBox( in vec2 pos, in vec2 box )\n{\n    vec2 dist = abs(pos)-box;\n    return length(max(dist,0.0)) + min(max(dist.x,dist.y),0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}