{
    "Shader": {
        "info": {
            "date": "1722832493",
            "description": "My first terrain ... sort of. ",
            "flags": 8,
            "hasliked": 0,
            "id": "lcfcRj",
            "likes": 3,
            "name": "Running at night (sound)",
            "published": 3,
            "tags": [
                "terrain",
                "sound"
            ],
            "usePreview": 0,
            "username": "dray",
            "viewed": 87
        },
        "renderpass": [
            {
                "code": "// Last time I did something like this was when 320x200 resolution was available.\n// WOW! This is 10x slower on iPhone!\n\n// the difference between these is very small and does not improve remaining boundary artifacts\n#define ST(C) ((C)*(C)*(3.-2.*(C)))\n//#define ST(C) (.5-.5*cos((C)*PI))\n//#define ST(C) ( mod(iTime,2.)>.6? ST1(C) : ST2(C) )\n\nfloat rndd(float xx,float yy) {\n  xx+=13.43544; yy+=31.2434;\n  return fract( sin(mod(yy*xx,TAU)) *8. );\n}\n\nfloat height(float xx,float yy) { // 0-1\n    float xi=floor(xx),\n          yi=floor(yy),\n          xf=fract(xx),\n          yf=fract(yy);\n    float p1=rndd( xi    , yi    ),\n          p2=rndd( xi+1. , yi    ),\n          p3=rndd( xi    , yi+1. ),\n          p4=rndd( xi+1. , yi+1. );\n    float mx1=mix(p1,p2,ST(xf)), // mid points of x edges\n          mx2=mix(p3,p4,ST(xf));\n    return mix(mx1,mx2,ST(yf));\n}\n\nfloat water = .1;\n\nfloat height2(float xx,float yy) {\n    yy += iTime*speed;\n    float ss = 1.;\n     // rotate pattern so artifacts are not in line with viewer\n    float hi = height((xx+yy)*ss,(yy-xx)*ss) * .5\n      + height(yy*ss*3.,xx*ss*3.) * .2; // add a 2nd frequency\n      ;\n    if ( hi < water ) hi = water;\n    return hi;\n}\n\nfloat texture(float xx,float yy) {\n    // rotate pattern so artifacts are not in line with viewer\n    return .5 + height((xx+yy)*100.,(yy-xx)*100.)*.5;\n}\n\nvec2 Dist(vec3 pos) {\n    float hi = height2(pos.x,pos.z);\n    return vec2( hi, -1 );\n}\n\nvec3 Normal(vec3 pt) {\n  float dist = Dist(pt).x;\n  vec2 ee=vec2(.01,0);\n  vec3 norm = dist - vec3(\n    Dist(pt-ee.xyy).x, \n    Dist(pt-ee.yxy).x, \n    Dist(pt-ee.yyx).x );\n  return normalize( norm );\n}\n\nvec4 March(vec3 beg,vec3 dir) { // return intersection point and object of ray\n  float dist = 0., stepsz = .1;\n  vec3 pos;\n  for ( int stps = 0; stps < 1000; ++stps ) {\n    pos = beg + dir * dist;\n    vec2 tst = Dist(pos);\n    //float hi = height2(pos.x,pos.z);\n/*    \n    if ( pos.y < hi ) { // whoops, went underground\n      dist -= stepsz; // backup and try again\n      stepsz /= 2.; // go more slowly\n    } else \n*/\n    if ( pos.y - tst.x < .1 ) { // hit the ground !\n      return vec4( pos, tst.y );\n    } else {\n      //stepsz = hi / 2.;\n    }\n    dist += min( tst.x, .04 );\n    if ( pos.z > 600. ) break; // do sky\n  }\n  return vec4( pos, -2 ); // sky, probably\n}\n\nvec3 light;\nfloat light_size = .2;\n\n\nfloat sym(int xx,int yy,int nn) {\n  if ( xx < 0 || xx > 3 || yy < 0 || yy > 7 ) return 0.; \n  xx += nn * 4;\n  return float(int[](0,31,17, 23,21,29, 28,4,20, 16,1 )[int[](1,2,1,0, 0,1,0,0, 3,4,5,0, 4,4,1,0, 6,7,1,0, 5,4,3,0, 1,4,3,0, 9,9,1,0, 1,4,1,0, 6,8,1,0, 7,7,7,0, 0,10,0,0)[xx]]>>yy&1);\n}\n\nfloat num(int xx,int yy,float vv) {\n  float rr = 0.;\n  if ( vv < 0. ) { rr+=sym(xx,yy,10); xx += 4; vv = -vv; }\n  float dd = 10.;\n  while ( vv >= dd ) dd *= 10.;\n  while ( dd > 10. ) { dd *= .1; rr+=sym(xx,yy,int(vv/dd)%10); xx += 4; }\n  return rr+sym(xx,yy,int(vv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy/2.) / min(iResolution.x,iResolution.y); // -1  to 1\n\n    vec3 cam = vec3( 0, 1.9, -3. /*+iTime*10.*/ );\n    vec3 scrn = cam + vec3( 0, -.3+running(iTime)*.1, 4. );\n    vec3 camdir = normalize( scrn - cam + vec3( uv.xy, 0 ) );\n    //vec3 camdir = normalize( vec3( uv.x, uv.y, 1. ) );\n\n    vec4 hit = March( cam, camdir );\n\n    vec3 col;\n\n    if ( hit.w == -2. ) { // sky\n        //col = vec3(.5,.7,.9);\n        col = vec3(0);\n    }\n    else if ( hit.w == -1. ) { // ground\n    \n        float hi = height2(hit.x,hit.z);\n        \n        if ( hi <= water ) {\n            col = vec3(0,.3,.4)*.01;\n        }\n        else { // dirt \n    \n            col = vec3(.9,.8,.6) * texture(hit.x,hit.y) * .2;\n\n            light = cam - vec3( 0, 30, -30 );\n\n            vec3 dir = normalize(light-hit.xyz);\n            vec3 norm = Normal(hit.xyz);\n            float difu = clamp( dot(norm,dir), 0., 1. );\n            col *= difu;\n        }\n\n    }\n    else {\n        col = vec3(0);\n    }\n  fragColor = vec4( pow(col,vec3(1./2.2)), 1. );\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI (3.14159265)\n#define TAU (PI*2.)\n\n#define FS iSampleRate\n\nint inoisei(int a) {\n  a = (a * 0xAA5D7C11) ^ (a * 0xEE57C112);\n  a ^= a >> 16; // graycode\n  a ^= a >> 8;\n  a ^= a >> 4;\n  a ^= a >> 2;\n  a ^= a >> 1;\n  return a & 65535;\n}  \n\nfloat noisei(int a) {\n  return float( inoisei(a) & 65535 ) / 65536. ;\n}\n\nfloat noise(float a) { return noisei(int(a*1287387.)); }\n\nfloat linnos(float t,float f) { // linear interpolation between noise values\n    float a = t*f*2.;\n    int b = int(a);\n    return mix(noisei(b),noisei(b+1),smoothstep(0.,1.,fract(a))) - .5; // crude filter\n}\n\nfloat hplinnos(float t,float f) {\n    return linnos(t,f) - linnos(t-1./FS,f);\n}\n\n#define SQR(X) ((X)*(X))\n\nvec2 mainSound( int samp, float time )\n{\n    float run = running(time);\n    float breath = sin(time*(speed/2.-1.));\n    return vec2( hplinnos(time, breath > 0. ? 6000. : 3000.) * breath * .1 \n       +  smoothstep( .98 , 1.,  SQR(run) ) * noise(time/2.)*.1 );\n//       linnos(time/2.,200.*abs(run)/time)       );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define PI (3.14159265)\n#define TAU (PI*2.)\n\n#define SIN(X) sin(mod(X,TAU))\n#define COS(X) cos(mod(X,TAU))\n\n#define SINC(X) (SIN(X)/(X))\n#define COSC(X) (COS(X)/(X))\n\nfloat speed = 8.;\n\nfloat running(float tim) {\n  speed = 7. - COSC(tim/2.)*4.;\n  return SIN(tim*speed);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}