{
    "Shader": {
        "info": {
            "date": "1515487617",
            "description": "A dirty old 2d sphere trick. Can't withstand closer examination. So you can stop squinting now. ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml2BWR",
            "likes": 9,
            "name": "Lost marbles",
            "published": 3,
            "tags": [
                "2d",
                "sphere",
                "marble",
                "eyelord"
            ],
            "usePreview": 0,
            "username": "grinist",
            "viewed": 863
        },
        "renderpass": [
            {
                "code": "// A dirty old 2d sphere trick that just projects a texture in 2d. Obviously this can't withstand\n// closer scrutiny. Textures with distinct features give it away instantly. Also the glow can't\n// represent what's underneath the marble.\n// This is close to something we got away with in a game. Although we were targeting GLES1\n// and did this with texture coordinates and additional tricks with the geometry.\n\n#define PI 3.1415926536\n#define HPI (PI / 2.0)\n#define TAU (2.0 * PI)\n#define TSCALE 1.25\n#define MARBLES 9\n\n// returns normalized distance along sphere surface given 2d radius\nfloat surface(float d)\n{\n    return asin(clamp(d, 0.0, 1.0)) / HPI * TSCALE;\n}\n\n// returns normalized distance along sphere surface given 2d distance on background plane\nfloat glow(float d, float sr)\n{\n    return atan(d / sr) / HPI * TSCALE;\n}\n\nstruct Marble\n{\n    vec2 pos;\n    vec2 v;\n    vec2 nv;\n    float d;\n   \tfloat r;\n    vec2 tpos;\n};\n\nMarble m[MARBLES];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.28;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec2 size = vec2(iResolution.x/iResolution.y, 1.0);\n\n    // background\n    vec3 color = vec3(0.025, 0.05, 0.15);\n\n    // set up marbles and accumulate glows\n    float p = 0.0;\n    float pinc = TAU / float(MARBLES);\n    for (int i = 0; i < MARBLES; i++)\n    {\n        // position and distance vecs\n        vec2 off = vec2(cos(time + p), sin(time + p));\n        m[i].pos = 0.5 * size + 0.33 * size * off + sin((time + p) * 6.0) * off.yx * 0.12;\n\n        m[i].v = uv - m[i].pos;\n        m[i].d = length(m[i].v);\n        m[i].nv = m[i].v / m[i].d;\n\n        // marble radius and texture position\n        m[i].r = 0.1 + sin(p * 5.0) * 0.025;\n        m[i].tpos = 0.5 + 0.1 * p - m[i].pos / HPI * TSCALE;\n\n        // background glow\n        float g = glow(m[i].d, m[i].r);\n        vec2 guv = 0.5 + m[i].tpos - m[i].nv * g * m[i].r;\n        vec3 gc = texture(iChannel0, guv).rbg;\n        gc = smoothstep(0.5, 0.9, gc) * vec3(0.4, 0.3, 0.1);\n        // attenuation\n        float gd = sqrt(m[i].d * m[i].d + m[i].r * m[i].r) - m[i].r;\n        gc /= (0.5 + 1000.0 * gd * gd);\n        color += gc;\n        \n        p += pinc;\n    }\n    \n    // draw marbles on top\n    for (int i = 0; i < MARBLES; i++)\n    {\n        // marble surface\n        float md = m[i].d / m[i].r;\n        if (md > 1.0)\n            continue;\n        float ms = surface(md);\n        vec2 muv = m[i].tpos + m[i].nv * ms * m[i].r;\n        vec3 mc = texture(iChannel0, muv).rgb;\n        // glow\n        vec3 mg = smoothstep(0.55, 0.9, mc.rbg) * 0.5;\n        // base falloff\n        mc *= (1.0 - clamp(md * 1.1, 0.0, 0.8));\n        // glow with additional falloff\n        mc += mg * (1.0 - 0.5 * md);\n        // rim, hides the problem at rotational poles a bit\n        mc = mix(mc, vec3(0.15, 0.1, 0.2), smoothstep(0.25, 1.0, md * md) * 0.9);\n        // highlight\n        mc += smoothstep(0.18, 0.04, md) * vec3(0.15, 0.15, 0.2);\n        // aa\n        float alpha = 1.0 - smoothstep(m[i].r - 0.002, m[i].r, m[i].d);\n        color = mix(color, mc, alpha);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}