{
    "Shader": {
        "info": {
            "date": "1700043097",
            "description": "To save processing power, I am trying to save data in Buffer A the ball's color, base position, and velocity.\nI still need a little work but I am learning how I can save data to use in the next frame, so I potentially can make a quadtree once in a frame.",
            "flags": 32,
            "hasliked": 0,
            "id": "ctVczD",
            "likes": 2,
            "name": "Bouncy balls - buffer test",
            "published": 3,
            "tags": [
                "test",
                "balls",
                "bouncy",
                "buffer",
                "data",
                "saving"
            ],
            "usePreview": 0,
            "username": "MrNissenDK",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    pointCols = int(iResolution.x) / 2;\n    pointRows = NumberOfPoints / pointCols;\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    for(int i = 0; i < NumberOfPoints; ++i) {\n        int x = i % pointCols;\n        int y = i / pointRows;\n    \n        vec4 posvel = texture(iChannel0, vec2(x * 2 + 1, y)/iResolution.xy);\n        vec2 pos = pointPos(posvel.xy, posvel.zw, iTime) * iResolution.xy;\n        float dist = distance(pos, fragCoord);\n        if(dist < 10.0) fragColor += texture(iChannel0, vec2(x * 2, y)/iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int index = int(fragCoord.x) / 2 + int(fragCoord.y) * int(iResolution.x) / 2;\n    if(index < NumberOfPoints) {\n        bool isColorData = int(fragCoord.x) % 2 == 0;\n        vec2 colorDataPos = fragCoord;\n        if(!isColorData) colorDataPos -= vec2(-1, 0);\n        vec4 color = texture(iChannel0, colorDataPos/iResolution.xy);\n        if (color.a != 1.0) {\n            vec2 base = hash12(index);\n            if(isColorData) fragColor = vec4(hash23(base), 1.0);\n            else {\n                vec2 velocity = hash32(vec3(base, uintBitsToFloat(uSeed)));\n                fragColor = vec4(base, vec2(sin(velocity.x * 6.28), sin(velocity.x * 6.28)) * velocity.y);\n            }\n        } else {\n            fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n        }\n    } else {\n        fragColor = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "int pointCols = 0;\nint pointRows = 0;\n\nconst int NumberOfPoints = 100;\nconst uint uSeed = 18485549u;\nfloat ConvertToFloat(uint n)\n{\n    uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    uint ieeeOne = 0x3F800000u;      // 1.0 in IEEE binary32\n\n    n &= ieeeMantissa;\n    n |= ieeeOne;\n\n    float f = uintBitsToFloat(n);\n    return f - 1.0;\n}\n//pcg_hash https://stackoverflow.com/questions/70985360/how-to-create-a-3d-random-gradient-out-of-3-passed-values-in-a-fragment-shader\n//minor change to add a seed value\nfloat rand(uint i) {\n    uint state = i + (i * 747796405u + 2891336453u) ^ uSeed;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return ConvertToFloat((word >> 22u) ^ word);\n}\n\nfloat rand(float i) { return rand(floatBitsToUint(i)); }\n\nvec3 hash23(vec2 src) {\n    vec3 randV = vec3(rand(src.x), rand(src.y), rand(src.x * src.y + src.x + src.y + 8912.2793));\n    randV += dot(randV, randV+vec3(3799.6274,9567.3518,8575.2724));\n    \n    return fract(randV);\n}\nvec2 hash32(vec3 src) {\n    vec2 randV = vec2(rand(src.x), rand(src.y));\n    randV *= dot(randV, vec2(8183.0119, src.z));\n    \n    return fract(randV);\n}\nvec2 hash12(float i) {\n    vec2 randV = vec2(rand(i), rand(i + 6939.9375));\n    randV *= dot(randV, vec2(8183.0119,4912.9833));\n    \n    return fract(randV);\n}\nvec2 hash12(int i) {return hash12(intBitsToFloat(i));}\n\nvec2 pointPos(vec2 base, vec2 vel, float t) {\n    vec2 bound = vec2(\n        abs(mod(t * vel.x + base.x, 2.0) - 1.0),\n        abs(mod(t * vel.y + base.y, 2.0) - 1.0)\n    );\n    return bound;\n}\n\nfloat dist2segment(vec2 p1, vec2 p2, vec2 p) {\n    vec2 ab = p2 - p1;\n    vec2 ap = p - p1;\n\n    float t = dot(ap, ab) / dot(ab, ab);\n\n    t = clamp(t, 0.0, 1.0);\n\n    vec2 closestPoint = p1 + t * ab;\n\n    return length(p - closestPoint);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}