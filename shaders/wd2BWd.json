{
    "Shader": {
        "info": {
            "date": "1591308822",
            "description": "Farey Sequences: [url]https://en.wikipedia.org/wiki/Farey_sequence[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wd2BWd",
            "likes": 10,
            "name": "Farey Sequences",
            "published": 3,
            "tags": [
                "continued",
                "farey",
                "fractions"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Farey Sequences\n// https://en.wikipedia.org/wiki/Farey_sequence\n// Each coloured band is a Farey sequence, the black lines form the Stern-\n// Brocot tree.\n// mla, 2020\n////////////////////////////////////////////////////////////////////////////////\n\nbool incircle(vec2 z, float x1, float x2) {\n  float centre = 0.5*(x1+x2);\n  float radius = 0.5*(x1-x2);\n  z -= vec2(centre,0);\n  return dot(z,z) < radius*radius;\n}\n\n// Distance of z from circle with centre on y=0, passing\n// through x-x1,x+x2 (or x-x2,x+x1).\nfloat circledist(vec2 z, float x1, float x2) {\n  float centre = 0.5*(x1+x2);\n  float radius = 0.5*abs(x1-x2);\n  z -= vec2(centre,0);\n  return length(z)-radius;\n}\n\nfloat check(vec2 z, ivec4 a) {\n  int p = a.x, q = a.y, r = a.z, s = a.w;\n  // z is in the half disc under [p/q,r/s] (in some order),\n  // but not under either of the subsidiary discs\n  float x0 = float(p)/float(q);\n  float x1 = float(p+r)/float(q+s); // The mediant\n  float x2 = float(r)/float(s);\n  float d = 1e8;\n  d = min(d,abs(z.x-x1));\n  d = min(d,abs(circledist(z,x0,x2)));\n  d = min(d,abs(circledist(z,x1,x2)));\n  d = min(d,abs(circledist(z,x1,x0)));\n  float lwidth = 0.03*z.y;\n  //return smoothstep(0.5*lwidth,lwidth,d);\n  float pwidth = fwidth(z.x);\n  //return smoothstep(max(0.0,lwidth-pwidth),max(pwidth,lwidth),d);\n  return smoothstep(-pwidth,pwidth,d-lwidth);\n}\n\nint farey(vec2 z, out ivec4 a) {\n  z = abs(z);\n  float x = z.x;\n  int p=1,q=0,r=0,s=1;\n  int count = 0;\n  // The \"slow\" continued fraction algorithm\n  for (int i = 0; i < 20; i++) {\n    int p1=r, q1=s;\n    for( ; x >= 1.0; x -= 1.0,count++) {\n      float x1 = float(p)/float(q);\n      float x2 = float(p1+p)/float(q1+q);\n      if (!incircle(z,x1,x2)) {\n        a = ivec4(p,q,p1,q1);\n        return count;\n      }\n      p1 += p; q1 += q;\n    }\n    x = 1.0/x;\n    r=p; s=q; p=p1; q=q1;\n  }\n  return -1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec3 aacol = vec3(0);\n  int AA = 2;\n  float t = 0.5*sqrt(5.0)-0.5;\n  if (iMouse.x > 0.0) t = iMouse.x/iResolution.x;\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 z = (fragCoord.xy+vec2(i,j)/float(AA))/iResolution.x;\n      z.x -= t;\n      z *= exp(-mod(0.5*iTime,18.0));\n      z.x += t;\n      ivec4 a;\n      int k = farey(z,a);\n      vec3 col = vec3(1);\n      if (k >= 0) {\n        col = hsv2rgb(vec3(float(k)/6.0,0.8,1));\n        col *= check(z,a);\n      }\n      aacol += col;\n    }\n  }\n  aacol /= float(AA*AA);\n  aacol = pow(aacol,vec3(0.4545));\n  fragColor = vec4(aacol,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// common\n////////////////////////////////////////////////////////////////////////////////\n\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}