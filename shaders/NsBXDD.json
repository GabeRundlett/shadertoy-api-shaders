{
    "Shader": {
        "info": {
            "date": "1620210247",
            "description": "Polymer dynamics (see source)",
            "flags": 32,
            "hasliked": 0,
            "id": "NsBXDD",
            "likes": 24,
            "name": "Polymers In Spinning Drum",
            "published": 3,
            "tags": [
                "collision",
                "simulation",
                "interactive",
                "dynamics",
                "physics",
                "chain"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "// \"Polymers In Spinning Drum\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Slightly stiff bead-necklace polymers (based on \"Balls in Spinning Drum\" \n  and \"Polymer Chains 2\")\n\n  Slider controls spin rate; mouse controls both cylinder axis and view\n  orientations - click button to switch.\n\n  No. 5 in \"Chain Dynamics\" series\n    \"Snake Run\"              (ltjfR1)\n    \"Polymer Chains\"         (4dcBRs)\n    \"Jamming Polymers\"       (XtGfz3)\n    \"Polymer Chains 2\"       (wlsSWl)\n    \"Leaping Snakes\"         (ttjXW10\n    \"Leaping Snakes 2\"       (3lBXWV)\n    \"Knot Dynamics\"          (ttKXzc)\n*/\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nmat3 StdVuMat (float el, float az);\nmat3 DirToRMatT (vec3 vd, vec3 vu);\nmat3 QtToRMat (vec4 q);\nfloat Fbm2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\n\nconst int nChain = 24, lenChain = 20, nBall = nChain * lenChain;\n\nvec3 ltDir, qHit, vnObj;\nfloat dstFar, cylRad, cylLen, cylRot, cylEl, cylAz;\nint idObj, idBall, idChain;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec3 OrCyl (vec3 p)\n{\n  p.xz = Rot2D (p.xz, cylAz);\n  p.yz = Rot2D (p.yz, cylEl);\n  return p;\n}\n\nvec3 OrCylT (vec3 p)\n{\n  p.yz = Rot2D (p.yz, - cylEl);\n  p.xz = Rot2D (p.xz, - cylAz);\n  return p;\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 ss;\n  float dMin, d, tr, f;\n  dMin = dstFar;\n  tr = 0.08;\n  q = p;\n  q = OrCyl (q);\n  q.z = abs (q.z) - cylLen;\n  d = PrTorusDf (q, tr, cylRad);\n  DMINQ (1);\n  q.z -= tr;\n  d = PrCylDf (q, 0.08 * cylRad, tr);\n  DMINQ (2);\n  tr = 0.15;\n  q = p;\n  q = OrCyl (q);\n  d = min (PrRoundBoxDf (vec3 (q.xy, abs (q.z) - cylLen - 2. * tr),\n     vec3 (cylRad + 4. * tr, tr, tr) - 0.1, 0.1),\n     PrRoundBoxDf (vec3 (abs (q.x) - cylRad - 3. * tr, q.yz),\n     vec3 (tr, tr, cylLen + 3. * tr) - 0.1, 0.1));\n  DMINQ (3);\n  d = PrCylDf (vec3 (abs (q.x) - cylRad - 4.5 * tr, q.yz).yzx, 0.8 * tr, tr);\n  DMINQ (4);\n  q = p;\n  q.xz = Rot2D (q.xz, cylAz);\n  f = 0.57 * length (vec2 (cylRad, cylLen));\n  d = min (PrRoundBoxDf (vec3 (abs (q.x) - (cylRad + 6. * tr), q.y + f - tr, q.z),\n     vec3 (tr, f, tr) - 0.1, 0.1),\n     PrRoundBoxDf (vec3 (q.x, q.y + 2. * f - 2. * tr, q.z),\n     vec3 (cylRad + 6. * tr, tr, tr) - 0.1, 0.1));\n  DMINQ (3);\n  d = PrCylDf (vec3 (q.x, q.y + 2. * f - 2. * tr, q.z).xzy, 1.4 * tr, 1.4 * tr);\n  DMINQ (4);\n  q = p;\n  q.y -= - 2. * f - 0.05;\n  d = PrRoundBoxDf (q, vec3 (cylRad + 14. * tr, 0.2, cylRad + 14. * tr) - 0.05, 0.05);\n  DMINQ (5);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\n#define TUBE 1    // = 0/1, show polymer beads/tubes\n\n#if TUBE\n\nfloat CapsHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  vec3 s;\n  float dMin, d, a, b, w;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - rad * rad);\n  if (w > 0. && a > 0.) {\n    d = - b - sqrt (w);\n    d /= a;\n    s = ro + d * rd;\n    if (d > 0. && abs (s.z) < len) {\n      dMin = d;\n      vnObj = vec3 (s.xy, 0.);\n    } else {\n      ro.z -= len * sign (s.z);\n      b = dot (rd, ro);\n      w = b * b - (dot (ro, ro) - rad * rad);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0.) {\n          dMin = d;\n          vnObj = ro + d * rd;\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat PolyHit (vec3 ro, vec3 rd)\n{\n  mat3 rMat, rMatS;\n  vec3 r, rp, vnObjS;\n  float dMin, d, sz;\n  sz = 0.4;\n  dMin = dstFar;\n  idChain = -1;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    if (mod (float (n), float (lenChain)) == 0.) r = Loadv4 (4 + 4 * n).xyz;\n    else {\n      rp = r;\n      r = Loadv4 (4 + 4 * n).xyz;\n      rMat = DirToRMatT (normalize (r - rp), vec3 (0., 0., 1.));\n      d = CapsHit ((ro - 0.5 * (r + rp)) * rMat, rd * rMat, sz, 0.5 * length (r - rp));\n      if (d < dMin) {\n        dMin = d;\n        rMatS = rMat;\n        vnObjS = vnObj;\n        idChain = n / lenChain;\n      }\n    }\n  }\n  if (idChain >= 0) vnObj = rMatS * normalize (vnObjS);\n  return dMin;\n}\n\n#else\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  idBall = -1;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    u = ro - p.xyz;\n    rad = 0.5 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        idBall = n;\n      }\n    }\n  }\n  if (idBall >= 0) {\n    p = Loadv4 (4 + 4 * idBall);\n    vnObj = (ro - p.xyz + dMin * rd) / (0.5 * p.w);\n  }\n  return dMin;\n} \n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  vec2 a;\n  u = vnBall * QtToRMat (Loadv4 (4 + 4 * idBall + 2));\n  a = mod (floor (8. * vec2 (atan (u.x, u.y), asin (u.z)) / pi), 2.) - 0.5;\n  return step (0., sign (a.x) * sign (a.y));\n}\n\n#endif\n\nvec4 CylHit (vec3 ro, vec3 rd, float cylRad, float cylLen)\n{\n  vec3 s, vn;\n  float dMin, d, a, b, w, srdz;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - cylRad * cylRad);\n  if (w > 0.) {\n    srdz = sign (rd.z);\n    if (a > 0.) {\n      d = - b - sqrt (w);\n      if (d > 0.) {\n        d /= a;\n        s = ro + d * rd;\n      } else s.z = cylLen;\n    } else s.z = cylLen;\n    if (abs (s.z) < cylLen) {\n      dMin = d;\n      vn = vec3 (s.xy / cylRad, 0.);\n    } else if (srdz * ro.z < - cylLen) {\n      d = - (srdz * ro.z + cylLen) / abs (rd.z);\n      if (d > 0.) {\n        s = ro + d * rd;\n        if (length (s.xy) < cylRad) {\n          dMin = d;\n          vn = vec3 (0., 0., - srdz);\n        }\n      }\n    }\n  }\n  return vec4 (dMin, vn);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd, vec3 col)\n{\n  vec4 dc4, col4;\n  vec3 roo, rdo, vn;\n  float dstBT, dstObj, c, a, nDotL;\n  dstObj = ObjRay (ro, rd);\n  dstBT = dstFar;\n  roo = ro;\n  rdo = rd;\n  ro = OrCyl (ro);\n  rd = OrCyl (rd);\n  dc4 = CylHit (ro, rd, cylRad, cylLen);\n  if (dc4.x < dstFar) {\n#if TUBE\n    dstBT = PolyHit (ro, rd);\n#else   \n    dstBT = BallHit (ro, rd);\n#endif\n    if (dstBT < min (dstObj, dstFar)) {\n      vn = OrCylT (vnObj);\n#if TUBE\n      c = 0.9 * float (idChain) / float (nChain);\n      col4 = vec4 (HsvToRgb (vec3 (mod (c, 1.), 1., 1.)), 0.1);\n#else   \n      c = 0.7 * mod (float (idBall / lenChain) / float (nChain), 1.);\n      col4 = vec4 (mix (HsvToRgb (vec3 (mod (c, 1.), 1., 1.)),\n         HsvToRgb (vec3 (mod (mod (c + 0.25, 1.), 1.), 1., 1)), BallChqr (idBall, vnObj)), 0.1);\n#endif\n      idObj = -1;\n    }\n  }\n  if (dstObj < min (dstBT, dstFar)) {\n    ro = roo;\n    rd = rdo;\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1 || idObj == 2) {\n      qHit.xy = Rot2D (qHit.xy, cylRot);\n      a = atan (qHit.y, - qHit.x);\n      col4 = vec4 (0.9, 0.7, 0.3, 0.2);\n      if (idObj == 1) col4 *= 1. - 0.3 * step (0.5, sin (16. * a));\n      else col4 *= 1. - 0.3 * step (0.01 * cylRad, length (qHit.xy)) * step (0., sin (8. * a));\n    } else if (idObj == 3) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.2);\n    } else if (idObj == 4) {\n      col4 = vec4 (0.8, 0.7, 0.7, 0.2);\n    } else if (idObj == 5) {\n       col4 = mix (vec4 (0.7, 0.3, 0.1, 0.1), vec4 (0.4, 0.2, 0.1, 0.1),\n          Fbm2 (qHit.xz * vec2 (0.5, 4.)));\n       qHit.xz = Rot2D (qHit.xz, cylAz);\n       col4 *= 0.7 + 0.3 * smoothstep (0.1, 0.15, length (max (abs (qHit.xz) -\n          vec2 (cylRad + 1., 0.1), 0.)));\n    }\n  }\n  if (min (dstBT, dstObj) < dstFar) {\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj != 5) nDotL *= nDotL;\n    col = col4.rgb * (0.2 + 0.8 * nDotL + col4.a * pow (max (0.,\n       dot (ltDir, reflect (rd, vn))), 32.));\n  } else if (dc4.x < dstFar) col *= 0.7;\n  if (dc4.x < min (dstObj, dstFar)) {\n    vn = OrCylT (dc4.yzw);\n    col = mix (col, vec3 (0.8, 0.8, 1.), 0.1 + 0.8 * pow (1. - abs (dot (vn, rdo)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, float slVal, float msMode)\n{\n  vec4 wgBx[2];\n  vec3 c1, c2;\n  vec2 ut, ust;\n  float asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.42 * asp, 0., 0.015 * asp, 0.2);\n  wgBx[1] = vec4 (0.42 * asp, -0.44, 0.02, 0.);\n  c1 = vec3 (0.3, 0.3, 0.8);\n  c2 = vec3 (0.7, 0.7, 1.);\n  ut = 0.5 * uv - wgBx[0].xy;\n  ust = abs (ut) - wgBx[0].zw * vec2 (0.7, 1.);\n  if (max (ust.x, ust.y) < 0.) {\n    if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = c2;\n    else col = (mod (0.5 * ((0.5 * uv.y - wgBx[0].y) / wgBx[0].w - 0.99), 0.1) *\n       canvas.y < 5.) ? c2 : vec3 (0.4);\n  }\n  ut.y -= (slVal - 0.5) * 2. * wgBx[0].w;\n  ut = abs (ut) * vec2 (1., 2.);\n  if (abs (max (ut.x, ut.y) - 0.02) < 0.008) col = c1;\n  ut = 0.5 * uv - wgBx[1].xy;\n  if (length (ut) < wgBx[1].z) col = mix (((msMode > 0.) ? vec3 (1., 0.3, 0.3) : vec3 (0.3, 0.3, 1.)),\n     vec3 (0.4), smoothstep (1., 3., abs (length (ut) - 0.02) * canvas.y));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  float b, slVal, zmFac, el, az, msMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  cylRad = stDat.x - 0.4;\n  cylLen = stDat.y - 0.4;\n  cylRot = stDat.w;\n  stDat = Loadv4 (1);\n  el = stDat.x;\n  az = stDat.y;\n  cylEl = stDat.z;\n  cylAz = stDat.w;\n  vuMat = StdVuMat (el, az);\n  b = length (vec2 (cylRad, cylLen));\n  dstFar = 20. * b;\n  zmFac = 6.;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., -0.3 * b, - 8. * b);\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  col = vec3 (0.1, 0.2 + 0.1 * uv.y, 0.1);\n  col = ShowScene (ro, rd, col);\n  stDat = Loadv4 (3);\n  slVal = stDat.y;\n  msMode = stDat.w;\n  col = ShowWg (uv, canvas, col, slVal, msMode);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nmat3 DirToRMatT (vec3 vd, vec3 vu)\n{\n  vec3 vc;\n  vc = normalize (cross (vu, vd));\n  return mat3 (vc, cross (vd, vc), vd);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. -\n     3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Polymers In Spinning Drum\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nChain = 24, lenChain = 20, nBall = nChain * lenChain;\n\nvec3 gVec;\nfloat nStep, cylRad, cylLen, angV, fOvlap, fricN, fricS, fricT, fBend, delT;\nconst float txRow = 128.;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, rmN1, rmN2, vmN, wmN, dr, dr1, dr2, dv;\n  float diamN, rSep, diamAv, h, fc, ft, c11, c22, c12, cd, c;\n  int inChain, ic, k1, k2;\n  inChain = mId / lenChain;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    if ((n == mId + 1 || n == mId - 1) && n / lenChain == inChain && rSep > diamAv)\n       am += fOvlap * (1. / rSep - 1.) * dr;\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = VAR_ZERO; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (4 + 4 * k1).xyz;\n    rmN2 = Loadv4 (4 + 4 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  rSep = cylRad - length (rm.xy);\n  if (rSep < diamAv) {\n    dr = - rSep * normalize (vec3 (rm.xy, 0.));\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * cylRad * normalize (vec3 (rm.y, - rm.x, 0.));\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.z = abs (rm.z) - cylLen;\n  rSep = abs (dr.z);\n  if (rSep < diamAv) {\n    dr.z *= sign (rm.z);\n    dr.xy = vec2 (0.);\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * vec3 (- rm.y, rm.x, 0.);\n    h = dot (dr, dv) / (rSep * rSep);\n    fc -= fricN * h;\n    am += fc * dr;\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 200.;\n  fBend = 10.;\n  fricN = 5.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 2.;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec3 e;\n  float mIdf, r;\n  mIdf = float (mId);\n  r = 0.7 * cylRad;\n  rm = vec3 (r * sin (2. * pi * mod (0.9 * mIdf / (2. * pi * r), 1.) + vec2 (0.5 * pi, 0.)),\n     -0.9 * (mIdf - 0.5 * float (nBall)) / (2. * pi * cylLen));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1.;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, wgBx[2], stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, ust;\n  float el, az, asp, diam, cylRot, cylEl, cylAz, angVMax, slVal, msMode;\n  int mId, pxId, wgSel, wgReg;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  wgReg = -2;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  asp = canvas.x / canvas.y;\n  delT = 0.005;\n  angVMax = 3.;\n  if (doInit) {\n    cylRad = 0.9 * floor (pow (float (nBall), 1./3.));\n    cylLen = cylRad;\n    nStep = 0.;\n    cylRot = 0.;\n    wgSel = -1;\n    slVal = 0.3;\n    angV = slVal * angVMax;\n    el = -0.08 * pi;\n    az = 0.;\n    cylEl = 0.;\n    cylAz = 0.;\n    msMode = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    cylRad = stDat.x;\n    cylLen = stDat.y;\n    angV = stDat.z;\n    cylRot = stDat.w;\n    stDat = Loadv4 (1);\n    el = stDat.x;\n    az = stDat.y;\n    cylEl = stDat.z;\n    cylAz = stDat.w;\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    slVal = stDat.y;\n    wgSel = int (stDat.z);\n    msMode = stDat.w;\n    ++ nStep;\n    cylRot = mod (cylRot + delT * angV, 2. * pi);\n  }\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.42 * asp, 0., 0.015 * asp, 0.2);\n    wgBx[1] = vec4 (0.42 * asp, -0.44, 0.02, 0.);\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) - wgBx[0].zw;\n    if (max (ust.x, ust.y) < 0.) {\n      wgReg = 0;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[1].xy) < wgBx[1].z) {\n      if (mPtrP.z <= 0.) msMode = 1. - msMode;\n    } else if (wgSel < 0) {\n      if (msMode == 0.) {\n        cylAz = -2. * pi * mPtr.x;\n        cylEl = - 2. * pi * mPtr.y;\n      } else {\n        az = 2. * pi * mPtr.x;\n        el = clamp (-0.08 * pi + pi * mPtr.y, -0.45 * pi, 0.);\n      }\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel == 0) {\n    slVal = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n    angV = slVal * angVMax;\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), cylEl));\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam);\n    else Step (mId, rm, vm, qm, wm, diam);\n  }\n  if      (pxId == 0) stDat = vec4 (cylRad, cylLen, angV, cylRot);\n  else if (pxId == 1) stDat = vec4 (el, az, cylEl, cylAz);\n  else if (pxId == 2) stDat = mPtr;\n  else if (pxId == 3) stDat = vec4 (nStep, slVal, float (wgSel), msMode);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    stDat = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Polymers In Spinning Drum\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nChain = 24, lenChain = 20, nBall = nChain * lenChain;\n\nvec3 gVec;\nfloat nStep, cylRad, cylLen, angV, fOvlap, fricN, fricS, fricT, fBend, delT;\nconst float txRow = 128.;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, rmN1, rmN2, vmN, wmN, dr, dr1, dr2, dv;\n  float diamN, rSep, diamAv, h, fc, ft, c11, c22, c12, cd, c;\n  int inChain, ic, k1, k2;\n  inChain = mId / lenChain;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    if ((n == mId + 1 || n == mId - 1) && n / lenChain == inChain && rSep > diamAv)\n       am += fOvlap * (1. / rSep - 1.) * dr;\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = VAR_ZERO; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (4 + 4 * k1).xyz;\n    rmN2 = Loadv4 (4 + 4 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  rSep = cylRad - length (rm.xy);\n  if (rSep < diamAv) {\n    dr = - rSep * normalize (vec3 (rm.xy, 0.));\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * cylRad * normalize (vec3 (rm.y, - rm.x, 0.));\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.z = abs (rm.z) - cylLen;\n  rSep = abs (dr.z);\n  if (rSep < diamAv) {\n    dr.z *= sign (rm.z);\n    dr.xy = vec2 (0.);\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * vec3 (- rm.y, rm.x, 0.);\n    h = dot (dr, dv) / (rSep * rSep);\n    fc -= fricN * h;\n    am += fc * dr;\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 200.;\n  fBend = 10.;\n  fricN = 5.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 2.;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec3 e;\n  float mIdf, r;\n  mIdf = float (mId);\n  r = 0.7 * cylRad;\n  rm = vec3 (r * sin (2. * pi * mod (0.9 * mIdf / (2. * pi * r), 1.) + vec2 (0.5 * pi, 0.)),\n     -0.9 * (mIdf - 0.5 * float (nBall)) / (2. * pi * cylLen));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1.;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, wgBx[2], stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, ust;\n  float el, az, asp, diam, cylRot, cylEl, cylAz, angVMax, slVal, msMode;\n  int mId, pxId, wgSel, wgReg;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  wgReg = -2;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  asp = canvas.x / canvas.y;\n  delT = 0.005;\n  angVMax = 3.;\n  if (doInit) {\n    cylRad = 0.9 * floor (pow (float (nBall), 1./3.));\n    cylLen = cylRad;\n    nStep = 0.;\n    cylRot = 0.;\n    wgSel = -1;\n    slVal = 0.3;\n    angV = slVal * angVMax;\n    el = -0.08 * pi;\n    az = 0.;\n    cylEl = 0.;\n    cylAz = 0.;\n    msMode = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    cylRad = stDat.x;\n    cylLen = stDat.y;\n    angV = stDat.z;\n    cylRot = stDat.w;\n    stDat = Loadv4 (1);\n    el = stDat.x;\n    az = stDat.y;\n    cylEl = stDat.z;\n    cylAz = stDat.w;\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    slVal = stDat.y;\n    wgSel = int (stDat.z);\n    msMode = stDat.w;\n    ++ nStep;\n    cylRot = mod (cylRot + delT * angV, 2. * pi);\n  }\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.42 * asp, 0., 0.015 * asp, 0.2);\n    wgBx[1] = vec4 (0.42 * asp, -0.44, 0.02, 0.);\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) - wgBx[0].zw;\n    if (max (ust.x, ust.y) < 0.) {\n      wgReg = 0;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[1].xy) < wgBx[1].z) {\n      if (mPtrP.z <= 0.) msMode = 1. - msMode;\n    } else if (wgSel < 0) {\n      if (msMode == 0.) {\n        cylAz = -2. * pi * mPtr.x;\n        cylEl = - 2. * pi * mPtr.y;\n      } else {\n        az = 2. * pi * mPtr.x;\n        el = clamp (-0.08 * pi + pi * mPtr.y, -0.45 * pi, 0.);\n      }\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel == 0) {\n    slVal = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n    angV = slVal * angVMax;\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), cylEl));\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam);\n    else Step (mId, rm, vm, qm, wm, diam);\n  }\n  if      (pxId == 0) stDat = vec4 (cylRad, cylLen, angV, cylRot);\n  else if (pxId == 1) stDat = vec4 (el, az, cylEl, cylAz);\n  else if (pxId == 2) stDat = mPtr;\n  else if (pxId == 3) stDat = vec4 (nStep, slVal, float (wgSel), msMode);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    stDat = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Polymers In Spinning Drum\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nChain = 24, lenChain = 20, nBall = nChain * lenChain;\n\nvec3 gVec;\nfloat nStep, cylRad, cylLen, angV, fOvlap, fricN, fricS, fricT, fBend, delT;\nconst float txRow = 128.;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, rmN1, rmN2, vmN, wmN, dr, dr1, dr2, dv;\n  float diamN, rSep, diamAv, h, fc, ft, c11, c22, c12, cd, c;\n  int inChain, ic, k1, k2;\n  inChain = mId / lenChain;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    if ((n == mId + 1 || n == mId - 1) && n / lenChain == inChain && rSep > diamAv)\n       am += fOvlap * (1. / rSep - 1.) * dr;\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = VAR_ZERO; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (4 + 4 * k1).xyz;\n    rmN2 = Loadv4 (4 + 4 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  rSep = cylRad - length (rm.xy);\n  if (rSep < diamAv) {\n    dr = - rSep * normalize (vec3 (rm.xy, 0.));\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * cylRad * normalize (vec3 (rm.y, - rm.x, 0.));\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.z = abs (rm.z) - cylLen;\n  rSep = abs (dr.z);\n  if (rSep < diamAv) {\n    dr.z *= sign (rm.z);\n    dr.xy = vec2 (0.);\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * vec3 (- rm.y, rm.x, 0.);\n    h = dot (dr, dv) / (rSep * rSep);\n    fc -= fricN * h;\n    am += fc * dr;\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 200.;\n  fBend = 10.;\n  fricN = 5.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 2.;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec3 e;\n  float mIdf, r;\n  mIdf = float (mId);\n  r = 0.7 * cylRad;\n  rm = vec3 (r * sin (2. * pi * mod (0.9 * mIdf / (2. * pi * r), 1.) + vec2 (0.5 * pi, 0.)),\n     -0.9 * (mIdf - 0.5 * float (nBall)) / (2. * pi * cylLen));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1.;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, wgBx[2], stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, ust;\n  float el, az, asp, diam, cylRot, cylEl, cylAz, angVMax, slVal, msMode;\n  int mId, pxId, wgSel, wgReg;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  wgReg = -2;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  asp = canvas.x / canvas.y;\n  delT = 0.005;\n  angVMax = 3.;\n  if (doInit) {\n    cylRad = 0.9 * floor (pow (float (nBall), 1./3.));\n    cylLen = cylRad;\n    nStep = 0.;\n    cylRot = 0.;\n    wgSel = -1;\n    slVal = 0.3;\n    angV = slVal * angVMax;\n    el = -0.08 * pi;\n    az = 0.;\n    cylEl = 0.;\n    cylAz = 0.;\n    msMode = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    cylRad = stDat.x;\n    cylLen = stDat.y;\n    angV = stDat.z;\n    cylRot = stDat.w;\n    stDat = Loadv4 (1);\n    el = stDat.x;\n    az = stDat.y;\n    cylEl = stDat.z;\n    cylAz = stDat.w;\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    slVal = stDat.y;\n    wgSel = int (stDat.z);\n    msMode = stDat.w;\n    ++ nStep;\n    cylRot = mod (cylRot + delT * angV, 2. * pi);\n  }\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.42 * asp, 0., 0.015 * asp, 0.2);\n    wgBx[1] = vec4 (0.42 * asp, -0.44, 0.02, 0.);\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) - wgBx[0].zw;\n    if (max (ust.x, ust.y) < 0.) {\n      wgReg = 0;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[1].xy) < wgBx[1].z) {\n      if (mPtrP.z <= 0.) msMode = 1. - msMode;\n    } else if (wgSel < 0) {\n      if (msMode == 0.) {\n        cylAz = -2. * pi * mPtr.x;\n        cylEl = - 2. * pi * mPtr.y;\n      } else {\n        az = 2. * pi * mPtr.x;\n        el = clamp (-0.08 * pi + pi * mPtr.y, -0.45 * pi, 0.);\n      }\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel == 0) {\n    slVal = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n    angV = slVal * angVMax;\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), cylEl));\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam);\n    else Step (mId, rm, vm, qm, wm, diam);\n  }\n  if      (pxId == 0) stDat = vec4 (cylRad, cylLen, angV, cylRot);\n  else if (pxId == 1) stDat = vec4 (el, az, cylEl, cylAz);\n  else if (pxId == 2) stDat = mPtr;\n  else if (pxId == 3) stDat = vec4 (nStep, slVal, float (wgSel), msMode);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    stDat = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Polymers In Spinning Drum\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nChain = 24, lenChain = 20, nBall = nChain * lenChain;\n\nvec3 gVec;\nfloat nStep, cylRad, cylLen, angV, fOvlap, fricN, fricS, fricT, fBend, delT;\nconst float txRow = 128.;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, rmN1, rmN2, vmN, wmN, dr, dr1, dr2, dv;\n  float diamN, rSep, diamAv, h, fc, ft, c11, c22, c12, cd, c;\n  int inChain, ic, k1, k2;\n  inChain = mId / lenChain;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    if ((n == mId + 1 || n == mId - 1) && n / lenChain == inChain && rSep > diamAv)\n       am += fOvlap * (1. / rSep - 1.) * dr;\n  }\n  ic = mId - inChain * lenChain;\n  for (int m = VAR_ZERO; m < 4; m ++) {\n    if (m == 0 && ic <= 1 || (m == 1 || m == 2) && (ic == 0 || ic == lenChain - 1) ||\n       m == 3 && ic >= lenChain - 2) continue;\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      k2 -= 2;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      k2 += 1;\n    } else if (m == 3) {\n      k1 += 1;\n      k2 += 2;\n    }\n    rmN1 = Loadv4 (4 + 4 * k1).xyz;\n    rmN2 = Loadv4 (4 + 4 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  rSep = cylRad - length (rm.xy);\n  if (rSep < diamAv) {\n    dr = - rSep * normalize (vec3 (rm.xy, 0.));\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * cylRad * normalize (vec3 (rm.y, - rm.x, 0.));\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.z = abs (rm.z) - cylLen;\n  rSep = abs (dr.z);\n  if (rSep < diamAv) {\n    dr.z *= sign (rm.z);\n    dr.xy = vec2 (0.);\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm - angV * vec3 (- rm.y, rm.x, 0.);\n    h = dot (dr, dv) / (rSep * rSep);\n    fc -= fricN * h;\n    am += fc * dr;\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 200.;\n  fBend = 10.;\n  fricN = 5.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 2.;\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam)\n{\n  vec3 e;\n  float mIdf, r;\n  mIdf = float (mId);\n  r = 0.7 * cylRad;\n  rm = vec3 (r * sin (2. * pi * mod (0.9 * mIdf / (2. * pi * r), 1.) + vec2 (0.5 * pi, 0.)),\n     -0.9 * (mIdf - 0.5 * float (nBall)) / (2. * pi * cylLen));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1.;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, wgBx[2], stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, ust;\n  float el, az, asp, diam, cylRot, cylEl, cylAz, angVMax, slVal, msMode;\n  int mId, pxId, wgSel, wgReg;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  wgReg = -2;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  asp = canvas.x / canvas.y;\n  delT = 0.005;\n  angVMax = 3.;\n  if (doInit) {\n    cylRad = 0.9 * floor (pow (float (nBall), 1./3.));\n    cylLen = cylRad;\n    nStep = 0.;\n    cylRot = 0.;\n    wgSel = -1;\n    slVal = 0.3;\n    angV = slVal * angVMax;\n    el = -0.08 * pi;\n    az = 0.;\n    cylEl = 0.;\n    cylAz = 0.;\n    msMode = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    cylRad = stDat.x;\n    cylLen = stDat.y;\n    angV = stDat.z;\n    cylRot = stDat.w;\n    stDat = Loadv4 (1);\n    el = stDat.x;\n    az = stDat.y;\n    cylEl = stDat.z;\n    cylAz = stDat.w;\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    slVal = stDat.y;\n    wgSel = int (stDat.z);\n    msMode = stDat.w;\n    ++ nStep;\n    cylRot = mod (cylRot + delT * angV, 2. * pi);\n  }\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.42 * asp, 0., 0.015 * asp, 0.2);\n    wgBx[1] = vec4 (0.42 * asp, -0.44, 0.02, 0.);\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) - wgBx[0].zw;\n    if (max (ust.x, ust.y) < 0.) {\n      wgReg = 0;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[1].xy) < wgBx[1].z) {\n      if (mPtrP.z <= 0.) msMode = 1. - msMode;\n    } else if (wgSel < 0) {\n      if (msMode == 0.) {\n        cylAz = -2. * pi * mPtr.x;\n        cylEl = - 2. * pi * mPtr.y;\n      } else {\n        az = 2. * pi * mPtr.x;\n        el = clamp (-0.08 * pi + pi * mPtr.y, -0.45 * pi, 0.);\n      }\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel == 0) {\n    slVal = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n    angV = slVal * angVMax;\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), cylEl));\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam);\n    else Step (mId, rm, vm, qm, wm, diam);\n  }\n  if      (pxId == 0) stDat = vec4 (cylRad, cylLen, angV, cylRot);\n  else if (pxId == 1) stDat = vec4 (el, az, cylEl, cylAz);\n  else if (pxId == 2) stDat = mPtr;\n  else if (pxId == 3) stDat = vec4 (nStep, slVal, float (wgSel), msMode);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    stDat = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}