{
    "Shader": {
        "info": {
            "date": "1441492496",
            "description": "Trying to make a disintegrator (i.e. preserve texture fragments, but disperse them in a neat way).  First attempt.  Any suggestions / pointers to better examples would be appreciated.  Thanks!",
            "flags": 0,
            "hasliked": 0,
            "id": "ltSSz1",
            "likes": 4,
            "name": "disintegrate?",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "coding_99",
            "viewed": 1571
        },
        "renderpass": [
            {
                "code": "\nfloat time = iTime/20.0;\n\nfloat d = 15.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized coordinates (-1 to 1 vertically)\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\n    // current polar co-ordinates\n    float a = atan(p.y,p.x);\n    float r = length(p);\n    \n\n    // where p used to be earlier in time;\n    float old_r = r-time;\n    \n\n    // co-ordinates where p maps to backwards in time, assuming radial spread\n    vec2 old_xy = vec2(old_r*cos(a), old_r*sin(a));\n        \n    vec3 col = vec3(0.0,0.0,0.0);\n    \n        if (old_r >= 0.0)\n    \t{\n\n            // calculate nearest subcircle centre of back-projected r\n\t   \t\tvec2 sc_xy =  floor((old_xy * d) + 0.5)/d;\n    \n            float sc_r = length(sc_xy);\n            float sc_a = atan(sc_xy.y, sc_xy.x);\n            \n    \n    \t\t// determine if old_xy is inside a subcircle\n      \t\tfloat sc_dist = distance(old_xy, sc_xy);\n\n\n            if (sc_dist < (1.0/d)/2.0)\n   \t\t\t{\n            \n                // we are in a sub-circle\n\n\n                // determine if p is within the subcircle that moved \n                // (contents of subcircle all move with the same angle, instead of radial dispersion)\n\n                float new_sc_r = sc_r + time;\n                vec2 new_sc_xy = vec2(new_sc_r * cos(sc_a), new_sc_r * sin(sc_a));\n\n                float new_sc_rad = distance(p, new_sc_xy);\n                if (new_sc_rad < (1.0/d)/2.0)\n                {\n\n                    // p is in a subsircle that moved\n\n                    // determine the mapped pixel that corresponds to p\n                    vec2 new_uv = sc_xy + (p-new_sc_xy);\n\n                    col =  texture(iChannel0, new_uv).xyz;\n\n\n                }\n                \n\n\t    \t}\n\n\n        }\n    \n\n    \n    \n    fragColor = vec4( col, 1.0 );\n    \n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}