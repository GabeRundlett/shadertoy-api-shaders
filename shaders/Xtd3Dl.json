{
    "Shader": {
        "info": {
            "date": "1472449738",
            "description": "Lights Of Te UV Party",
            "flags": 0,
            "hasliked": 0,
            "id": "Xtd3Dl",
            "likes": 0,
            "name": "Party Template",
            "published": 3,
            "tags": [
                "lights"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 548
        },
        "renderpass": [
            {
                "code": "float time = iTime;\nmat2 rot(vec2 uv)\n{\n    mat2 sort = mat2(cos(time)+uv.x+uv.y, -sin(time)+uv.x-uv.y, sin(time)+uv.y - uv.x, cos(time) + -uv.y-uv.x);\n    mat2 re_sort = mat2(cos(time)-uv.x+uv.y, -sin(time)-uv.x-uv.y, sin(time)-uv.y - uv.x, cos(time) - -uv.y-uv.x);\n    #define sorted if(sort == re_sort) a += t / n;\n    #define unsorted if(sort != re_sort) a += t * n;\n    #define eql if(t == n) q = t * n;\n    #define uneql if(t != n) q = t / n;\n    #define geql if(t > n) q = t - n;\n    #define leql if(t < n) q = n - t;\n    float t, n, a, q = 0.0;\n    float x = uv.x;\n    float y = uv.y;\n    float sx = fract(x);\n    float sy = fract(y);\n    t += x; n += y; sorted; unsorted;\n    t += sx; n += y; sorted; unsorted;\n    t += x; n += sy; sorted; unsorted;\n    t += sx; n += sy; sorted; unsorted;\n    float b = 0.0;\n    b += sqrt(max(max(x, y),max(sx, sy)));\n    t += b; n += b; eql; uneql; geql; leql;\n    t -= b; n += b; eql; uneql; geql; leql;\n    t += b; n -= b; eql; uneql; geql; leql;\n    t -= b; n -= b; eql; uneql; geql; leql;\n    \n    vec2 i = vec2(q / a);\n    vec2 i2 = fract(i);\n    return mat2(cos(time)+i.x, -sin(time)+i.y, sin(time)+i2.x, cos(time)+i2.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0; //<------------------------•\n    uv.x *= iResolution.x / iResolution.y; //<-• much better\n    float i = length(uv) + 1.0;\n    vec3 col = vec3(vec2(i) * rot(uv), i);\n    fragColor = vec4(sin(col), 1.0) - vec4(0.1, 0.1, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}