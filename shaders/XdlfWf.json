{
    "Shader": {
        "info": {
            "date": "1498563213",
            "description": "all seeing structure, use mouse to look",
            "flags": 0,
            "hasliked": 0,
            "id": "XdlfWf",
            "likes": 1,
            "name": "all seeing structure",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "all",
                "structure",
                "seeing"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman 2017\n\n\nstruct mat {\n    vec3 diffuse, specular;\n    float metallic, roughness;\n};\n    \nmat2 rot2d(float a){\n    return mat2(sin(a),cos(a),-cos(a),sin(a));   \n}\nfloat hash(vec2 p) {\n    return fract(dot(p+vec2(.36834,.723), normalize(fract(p.yx*73.91374)+1e-4))*7.38734);\n}\nfloat voronoi_dither(vec2 u) {\n    #define l(i) length(fract(u*.7+fract(i*vec2(1,8))+cos(u.yx*.2333+i*8.))-.5)\n\treturn min(l(.1),l(.6))*2.66-1.;\n}\n\n//scene distance function\nfloat df(vec3 p) {\n    float d = length(abs(p)-2.)-2.;\n    return max(abs(length(p)-4.)-1., d);\n}\n//scene distance function used for normal calculation(put normal mapping/displacements here)\nfloat dfNormal(vec3 p) {\n    return df(p);\n}\n//returns normalized gradient at position p\nvec3 normal(vec3 p) {\n     const vec2 NE = vec2(1e-3, 0.);\n     return normalize(dfNormal(p)-vec3(dfNormal(p-NE.xyy), \n                      \t\t\tdfNormal(p-NE.yxy), \n                      \t\t\tdfNormal(p-NE.yyx)));\n}\n\n\n#define join(d,c) s.xyz = mix(s.xyz,c,clamp((s.w-d)/s.w,0.,1.)); if (d < s.w) s.w = d;\n\n//distance must be >= 0\n//scene emissive(xyz) & distance(w) function, w parameter in 'p' is the mipmap to use level\nvec4 scene(vec4 p) {\n    //structure\n    float d = max(0.,df(p.xyz));\n    vec4 s = vec4(0.014, 0.014, 0.014+mix(length(tan(p.yzx*16.))*.01,1.,min(1.,p.w))*max(0.,4.-length(p)), d);\n    \n    return s;\n}\n                  \n//scene material at position p\nmat material(vec3 p) {\n    //sphere\n    return mat(vec3(.5), vec3(1.), 0., .45);\n}\n\n//background function, returns color from direction d.xyz and mipmap/blur level d.w\nvec3 background(vec4 d) {\n    return textureLod(iChannel0, vec2(atan(d.x,d.z)/3.14+0.5, d.y*.5+.5), d.w).xxx;\n}\n\n\n//ray-trace(march) scene, returns distance to hit or -1 if nothing hit\nfloat trace(vec3 rp, vec3 rd, float epsilon) {\n    float s = 0.;\n    for (int i = 0; i < 48; i++) {        \n        float dst = df(rp+rd*s);\n        if (dst < epsilon) return s;\n        s += dst;\n        if (s > 1e4) return -1.;\n    }\n    return -1.;\n}\n\n\n//blurry trace scene, returns color\nvec3 blurTrace(vec3 pos, vec3 dir, float blur) {\n    vec4 rp = vec4(pos,1.),\n         rd = vec4(dir,blur);\n    float istep = .15+hash(dir.xy*512.+dir.zz*2048.)*.15,\n        bm = abs(dot(dir,normal(pos)));\n    \n    vec4 c = vec4(0.);\n    float d = 1e-4;\n    for (int i = 1; i < 16; i++) {\n        if (c.w >= 1.) break;\n        \n        vec4 s = scene(rp+rd*d);\n        s.w = max(s.w, blur);\n        float ba = bm*d*blur;\n        c += vec4(s.xyz,1.)*(max(0., 1.-s.w/ba)/ba);\n        d += mix(s.w, float(i)*istep, min(1.,blur));\n    }\n\t\n    \n    return mix(background(vec4(dir,blur*10.)),c.xyz/max(1e-4,c.w),min(c.w,1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //ray-march screen ray\n    vec3 rp = vec3(0.,cos(iTime*.08-2.)*6.,-4.+sin(iTime*.08-2.)*4.),\n         rd = vec3(normalize(vec3((fragCoord*2.-iResolution.xy)/iResolution.x,.5)));\n    \n    if (iMouse.w < 1.) {\n    \trd = vec3(normalize(vec3((fragCoord*2.-iResolution.xy)/iResolution.x,.5)));\n    } else {\n        vec2 lookEuAng = (iMouse.xy/iResolution.xy)*6.28;\n        rd.zy *= rot2d(lookEuAng.y);\n        rd.xz *= rot2d(-lookEuAng.x);\n    }\n  \n   \t\n    float epsilon = 2e-2+voronoi_dither(fragCoord+128.)*1e-2;//dither epsilon\n    float s = trace(rp,rd,epsilon);\n    \n    vec3 c;\n    if (s < 0.) {\n        //nothing hit, background\n        c = background(vec4(rd,0.));\n    } else {\n        //shade object\n        vec3 hp = rp+rd*s,\n            hn = normal(hp),\n            ref = reflect(rd, hn);\n        mat m = material(hp);\n\n        c = scene(vec4(hp,0.)).xyz+ //emissive\n                         m.diffuse*blurTrace(hp,hn,1.)*(.5-m.metallic*.5)+ //diffuse\n                         m.specular*blurTrace(hp,ref,m.roughness)*(1.-max(0.,dot(-rd,ref))*(1.-m.metallic))*(.5+m.metallic*.5); //specular\n    }\n\n\tfragColor = vec4(floor(c*32.99+voronoi_dither(fragCoord))/32.,1.);//dither\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}