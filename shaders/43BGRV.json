{
    "Shader": {
        "info": {
            "date": "1708716566",
            "description": "Inspired by: https://www.youtube.com/live/JU0tSeOc7_E?si=hMuDgyI4cIX2FA6U\nIf you're noticing that the audio isn't syncing up perfectly with the visuals, you might want to try restarting the shader.",
            "flags": 8,
            "hasliked": 0,
            "id": "43BGRV",
            "likes": 49,
            "name": "Lucid Polyrhythm (music)",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "audio",
                "trippy",
                "art",
                "visual",
                "polyrhythms"
            ],
            "usePreview": 0,
            "username": "Nguyen2007",
            "viewed": 763
        },
        "renderpass": [
            {
                "code": "/*\nvec3 lch2srgb(vec3 v)\n{\n    v = vec3(v.x, v.y * cos(v.z), v.y * sin(v.z)) * mat3(1,   .396338,   .215804,\n                                                         1,  -.105561, -.0638542,\n                                                         1, -.0894842, - 1.29149);\n    \n    v = v * v * v * mat3(4.07659   , -3.30717,  .230732,\n                         -1.26814  ,  2.60934, -.341134,\n                         -.00411222, -.703477,  1.70686);\n    return mix(1.055 * pow(v, vec3(1) / 2.4) - .055, v * 12.92, lessThan(v, vec3(.0031308)));\n}\n*/\n\nvec3 lch2rgb(vec3 v)\n{\n    v = vec3(v.x, v.y * cos(v.z), v.y * sin(v.z)) * mat3(1,  .396,   .216,\n                                                         1, -.106, - .064,\n                                                         1, -.09 , -1.292);\n    \n    v = v * v * v * mat3( 4.077, -3.307,   .231,\n                         -1.268,  2.609, - .341,\n                         - .004, - .704,  1.707);\n    \n    return v * v; // approximation\n}\n\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat box(vec2 p, vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.)) + min(max(d.x, d.y), 0.);\n}\n\n#define col(x) vec4(lch2rgb(vec3(.8, .1, .5 * (x) + time * .06 - glow - bass)), 0)\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    O = vec4(0);\n    \n    float time = iTime - 2.25,\n          fade = smoothstep(-2.25, 0., time),\n          bass = fract(time / 20.),\n          glow = exp(-20. * bass);\n    \n    vec2 p   = (1.2 + fade * .1) * (I + I - iResolution.xy) / iResolution.y,\n         pos = p; pos.x += 1.22;\n\n    for(float i = .8; i < 1.01; i += .1 / 7., pos.x -= .1743)\n    {\n        float T = 4. / i,\n              h = .4 / i / i,\n              t = mod(time, T),\n              d = 6. * box(pos - vec2(0, .2 * t * (T - t) - h), vec2(.06, .95 - h)),\n              g = 1. / max(d, .01);\n\n        if(abs(pos.x) < .07 && pos.y > -1.) g += .25 * exp(-6. * p.y);\n        \n        g *= min(t, .1) * exp(4. - 20. * t / T);\n\n        O += col(5. * i - 4.) * (g + .1 / (abs(d) + .002));\n    }\n    \n    float con = box(p, vec2(1.33, 1));\n    \n    for(int i = 0; con > 0. && i < 9; i++)\n    {\n        float j = float(i),\n              s = exp(mod(j, 3.)), g;\n        \n        pos = 4. * (p - vec2(sin(j *= .7), cos(j)) * (.15 * time - glow - bass)) / s;\n        \n        vec3 h = hash(floor(pos).xyx + j);\n        \n        g = sin(h.x + time + j);\n        \n        if(h.x < s * .05 && g > 0.) O += 2. * col(j / 9.) * g * (s * max(.5 - length(fract(pos) - .5), 0.) + (abs(box(fract(pos + .6 * h.yz - .3) - .5, vec2(.2))) < .01 ? 5. : 0.));\n    }\n    \n    glow += .2;\n    \n    O = sqrt(1. - exp(-(O + col(p.y * .5 + .5) * (1. / (abs(con) + .001) + max(.8 * bass - .6, 0.) / (abs(box(p, vec2(.665, .5) * (3. - bass))) + .001))) * fade * min(bass * 1e2, 1.) * glow / (1. + 3. * dot(p, p))));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 f(float a, float b, float t)\n{\n    t = a * mod(t, b);\n    return vec2(cos(t / 1e2), sin(t / 1e2)) * (cos(4. * t) + mix(sin(2. * t), sin(8. * t), .2 * t / a / b)) / 2. * min(.1 * t, 1.) * exp(-t / b / 2e2);\n}\n\nvec2 mainSound(int samp, float t)\n{\n    t -= 2.25;\n    \n    vec2 tot = vec2(0);\n    \n    vec4 C;\n    \n    for(int i = 0; i < 15; i++)\n    {\n        float T = 4. / (1. - float(i) / 70.);\n        \n        switch(int(floor(t / T) * T / 20.) % 4)\n        {\n            case 0:\n            case 2: C = vec4(2160, 2025, 1620, 1350); break;\n            case 1: C = vec4(1800, 1620, 1350, 1080); break;\n            case 3: C = vec4(1440, 1350, 1080, 900); break;\n        }\n        \n        tot += .5 * f(C[i % 4] / exp2(float(i / 4)), T, t);\n    }\n    \n    return smoothstep(-2.25, 0., t) * (tot + f(C.x / 16., 20., t) + f(C.x / 8., 20., t)) * .1;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}