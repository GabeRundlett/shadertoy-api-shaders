{
    "Shader": {
        "info": {
            "date": "1725604027",
            "description": "love,\npopart",
            "flags": 0,
            "hasliked": 0,
            "id": "Mf2BD3",
            "likes": 0,
            "name": "sep52024v2",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 53
        },
        "renderpass": [
            {
                "code": "// Simplex noise function\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 10000.0);\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m*m;\n    m = m*m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n    vec3 g;\n    g.x  = a0.x * x0.y + h.x * x0.x;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 170.0 * dot(m, g);\n}\n\n// Lens flare effect\nfloat lensFlare(vec2 uv, vec2 pos) {\n    vec2 main = uv - pos;\n    vec2 uvd = uv * (length(uv));\n    float ang = atan(main.x, main.y);\n    float dist = length(main); dist = pow(dist, 0.1);\n    float f0 = 1.0/(length(uv-pos)*16.0+1.0);\n    f0 = f0 + f0 * (snoise(vec2(ang*20.0, dist*50.0)) * 0.1 + dist * 0.1 + 0.8);\n    float f2 = max(1.0/(1.0+32.0*pow(length(uvd+0.8*pos),2.0)),.0)*00.25;\n    float f22 = max(1.0/(1.0+32.0*pow(length(uvd+0.85*pos),2.0)),.0)*00.23;\n    float f23 = max(1.0/(1.0+32.0*pow(length(uvd+0.9*pos),2.0)),.0)*00.21;\n    vec2 uvx = mix(uv, uvd, -0.5);\n    float f4 = max(0.01-pow(length(uvx+0.4*pos),2.4),.0)*6.0;\n    float f42 = max(0.01-pow(length(uvx+0.45*pos),2.4),.0)*5.0;\n    float f43 = max(0.01-pow(length(uvx+0.5*pos),2.4),.0)*3.0;\n    uvx = mix(uv, uvd, -0.4);\n    float f5 = max(0.01-pow(length(uvx+0.2*pos),5.5),.0)*2.0;\n    float f52 = max(0.01-pow(length(uvx+0.4*pos),5.5),.0)*2.0;\n    float f53 = max(0.01-pow(length(uvx+0.6*pos),5.5),.0)*2.0;\n    uvx = mix(uv, uvd, -0.5);\n    float f6 = max(0.01-pow(length(uvx-0.3*pos),1.6),.0)*6.0;\n    float f62 = max(0.01-pow(length(uvx-0.325*pos),1.6),.0)*3.0;\n    float f63 = max(0.01-pow(length(uvx-0.35*pos),1.6),.0)*5.0;\n    return f0 + f2 + f22 + f23 + f4 + f42 + f43 + f5 + f52 + f53 + f6 + f62 + f63;\n}\n\n// Distortion effect\nvec2 distort(vec2 uv) {\n    uv *= 20.0 - uv.yx;\n    float vig = uv.x * uv.y * 1338888835.0;\n    vig = pow(vig, 0.00000025);\n    uv *= pow(vig, 0.01);\n    uv += (snoise(uv / 10.0) / 0.1);\n    return uv;\n}\n\n// Color adjustment\nvec3 adjustColor(vec3 color) {\n    // Increase contrast\n    color = pow(color, vec3(10.2));\n    \n    // Increase saturation\n    float luminance = dot(color, vec3(0.059,0.059,0.059));\n    color = mix(vec3(luminance), color, 100.5);\n    \n    // Add some color aberration\n    color.r *= 10.05;\n    color.b *= .95;\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = distort(uv);  // Apply distortion\n    \n    // Create intense, noisy green background\n    float noise1 = snoise(uv * 20.0 + iTime * 1.2);\n    float noise2 = snoise(uv * 40.0 - iTime * 0.25);\n    float noise3 = snoise(uv * 60.0 + iTime * 0.3);\n    \n    float combinedNoise = (noise1 + noise2 * 0.5 + noise3 * 0.25) / 1.75;\n    \n    vec3 baseColor = vec3(0.1, 0.4, 0.1);  // Brighter base green\n    vec3 color = baseColor + vec3(combinedNoise * 0.2, combinedNoise * 0.3, combinedNoise * 0.2);\n    \n    // Add pulsing effect\n    color += vec3(0.1, 0.2, 0.1) * sin(iTime * 5.5 + uv.x * 10.0 + uv.y * 10.0);\n    \n    // Add red LED-like dot with enhanced lens flare\n    vec2 dotCenter = vec2(0.8, 0.8);\n    float dotRadius = 0.1;  // Even smaller for more intensity\n    float dotDist = length(uv - dotCenter);\n    float dotIntensity = smoothstep(dotRadius, dotRadius * .1, dotDist);\n    \n    float flare = lensFlare(uv, dotCenter);\n    \n    vec3 ledColor = vec3(100.0, 0.05, 0.05);  // More saturated red\n    vec3 ledEffect = ledColor * (dotIntensity * 0.0 + flare * 3.0);  // Increased intensity\n    \n    // Blend the LED effect with the background\n    color += ledEffect;\n    \n    // Apply color adjustments\n    color = adjustColor(color);\n    \n    // Add some grain\n    color += (snoise(uv * 1.0 + iTime / 10000.0) * 0.05);\n    \n\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}