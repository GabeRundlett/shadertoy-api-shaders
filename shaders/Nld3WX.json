{
    "Shader": {
        "info": {
            "date": "1637117804",
            "description": "Revisiting the Mandelmaze version of the Mandelbox in daylight (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "Nld3WX",
            "likes": 3,
            "name": "Fork Mandelmaze gchipunov 862",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "gchipunov",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "// \"Mandelmaze in Daylight\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return exp(mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nmat3 vuMat;\nvec3 vuPos;\nfloat tCur, dstFar, chRingO, chRingI, vuVel, bxSize, chSize, qnStep;\nint idObj;\n\nfloat MBoxDf (vec3 p)\n{\n  vec4 q, q0;\n  const float mScale = 2.62;\n  const int nIter = 12;\n  q0 = vec4 (p, 1.);\n  q = q0;\n  for (int n = 0; n < nIter; n ++) {\n    q.xyz = clamp (q.xyz, -1., 1.) * 2. - q.xyz;\n    q = q * mScale / clamp (dot (q.xyz, q.xyz), 0.5, 1.) + q0;\n  }\n  return length (q.xyz) / abs (q.w);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dm, tWid;\n  dMin = dstFar;\n  d = MBoxDf (p);\n  q = p;\n  q.y -= vuPos.y;\n  tWid = 0.7 * chSize;\n  dm = min (PrCylAnDf (q.xzy, chRingO, chSize, chSize),\n     PrCylAnDf (q.xzy, chRingI, tWid, chSize));\n  dm = min (min (dm, PrBox2Df (q.xy, vec2 (tWid, chSize))),\n     PrBox2Df (q.zy, vec2 (tWid, chSize)));\n  d = max (d, - dm);\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const int nStep = 200;\n  float dHit, d, s;\n  dHit = 0.;\n  s = 0.;\n  for (int j = 0; j < nStep; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    ++ s;\n    if (d < 0.0003 || dHit > dstFar) break;\n  }\n  qnStep = s / float (nStep);\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return sqrt(normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw))-e;\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  vec2 tr;\n  float ti[9], aDir, a, d, r, tO, tI, tR, rGap;\n  bool rotStep;\n  tO = 0.5 * pi * chRingO / vuVel;\n  tI = 0.5 * pi * chRingI / vuVel;\n  rGap = chRingO - chRingI;\n  tR = rGap / vuVel;\n  rotStep = false;\n  ti[0] = 0.;\n  ti[1] = ti[0] + tO;  ti[2] = ti[1] + tR;\n  ti[3] = ti[2] + tI;  ti[4] = ti[3] + tR;\n  ti[5] = ti[4] + tO;  ti[6] = ti[5] + tR;\n  ti[7] = ti[6] + tI;  ti[8] = ti[7] + tR;\n  aDir = 2. * mod (floor (t / ti[8]), 2.) - 1.;\n  p.y = 0.7 * bxSize * sin (2. * pi * floor (t / (2. * ti[8])) / 11.);\n  t = mod (t, ti[8]);\n  r = chRingO;\n  tr = vec2 (0.);\n  if (t < ti[4]) {\n    if (t < ti[1]) {\n      rotStep = true;\n      a = (t - ti[0]) / (ti[1] - ti[0]);\n    } else if (t < ti[2]) {\n      tr.y = chRingO - rGap * (t - ti[1]) / (ti[2] - ti[1]);\n    } else if (t < ti[3]) {\n      rotStep = true;\n      a = 1. + (t - ti[2]) / (ti[3] - ti[2]);\n      r = chRingI;\n    } else {\n      tr.x = - (chRingI + rGap * (t - ti[3]) / (ti[4] - ti[3]));\n    }\n  } else {\n    if (t < ti[5]) {\n      rotStep = true;\n      a = 2. + (t - ti[4]) / (ti[5] - ti[4]);\n    } else if (t < ti[6]) {\n      tr.y = - chRingO + rGap * (t - ti[5]) / (ti[6] - ti[5]);\n    } else if (t < ti[7]) {\n      rotStep = true;\n      a = 3. + (t - ti[6]) / (ti[7] - ti[6]);\n      r = chRingI;\n    } else {\n      tr.x = chRingI + rGap * (t - ti[7]) / (ti[8] - ti[7]);\n    }\n  }\n  if (rotStep) {\n    a *= 0.5 * pi * aDir;\n    p.xz = r * vec2 (cos (a), sin (a));\n  } else {\n    if (aDir < 0.) tr.y *= -1.;\n    p.xz = tr;\n  }\n  return p;\n}\n\nvoid VuPM (float t)\n{\n  vec3 fpF, fpB, vel;\n  float a, ca, sa, dt;\n  dt = 0.5;\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  vuPos = 0.5 * (fpF + fpB);\n  vuPos.y = fpB.y;\n  vel = (fpF - fpB) / (2. * dt);\n  a = atan (vel.z, vel.x) - 0.5 * pi;\n  ca = cos (a);  sa = sin (a);\n  vuMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 25; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 20. * h / d));\n    d += min (0.1, 3. * h);\n    if (h < 0.001) break;\n  }\n  return sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltDir[4];\n  float dstHit, sh, dfSum, spSum;\n  int idObjT;\n  ltDir[0] = normalize (vec3 (1., 1., 0.));\n  ltDir[1] = normalize (vec3 (0., 1., 1.));\n  ltDir[2] = normalize (vec3 (1., 0., 1.));\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += dstHit * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    if (idObjT == 1) {\n      col = mix (vec3 (0.6, 0.9, 0.6), vec3 (0.9, 0.9, 1.),\n         clamp (1.2 * length (ro) / bxSize, 0., 1.));\n      col = col * clamp (1. - 1.2 * qnStep * qnStep, 0.2, 1.);\n    }\n    dfSum = 0.;\n    spSum = 0.;\n    for (int j = 0; j < 3; j ++) {\n      sh = 0.1 + ObjSShadow (ro, ltDir[j]);\n      dfSum += sh * (0.2 + max (dot (vn, ltDir[j]), 0.));\n      spSum += sh * pow (max (0., dot (ltDir[j], reflect (rd, vn))), 32.);\n    }\n    col = col * dfSum + 1.3 * spSum;\n    ltDir[3] = normalize (- ro);\n    sh = ObjSShadow (ro, ltDir[3]);\n    col = mix (col, vec3 (0.9, 0., 0.),\n       0.5 * (1. + cos (20. * tCur)) * sh * max (dot (vn, ltDir[3]), 0.) /\n       dot (ro, ro));\n  } else {\n    col = mix (vec3 (0., 0., 0.8), vec3 (1.),\n       0.3 + 0.2 * (1. - smoothstep (0.8, 0.9, abs (rd.y))) *\n       Fbm2 (8. * vec2 (2. * abs (atan (rd.z, rd.x)) / pi, rd.y)));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  mat3 vuMat2;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 30.;\n  bxSize = 4.;\n  chSize = 0.08 * bxSize;\n  chRingO = 0.8 * bxSize;\n  chRingI = 0.4 * bxSize;\n  vuVel = 0.2 * bxSize;\n  el = 0.;\n  az = 0.;\n  if (mPtr.z > 0.) {\n    el = clamp (el - 1.3 * pi * mPtr.y, - 0.49 * pi, 0.49 * pi);\n    az = clamp (az - 1.8 * pi * mPtr.x, - pi, pi);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat2 = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  VuPM (tCur);\n  ro = vuPos;\n  rd = normalize (vec3 ((1./0.5) * sin (0.5 * uv.x), uv.y, 2.)) * vuMat2 * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}