{
    "Shader": {
        "info": {
            "date": "1695765218",
            "description": "From awhile ago didn't realize I never published this :P\nuse mouse to view from different angles",
            "flags": 32,
            "hasliked": 0,
            "id": "flVGR3",
            "likes": 18,
            "name": "Sierpinski Explorations",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// 2021-11-28 05:26:13\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat staircase( in float x, in float k )\n{\n    float i = floor(x);\n    float f = fract(x);\n    \n    float a = 0.5*pow(2.0*((f<0.5)?f:1.0-f), k);\n    f = (f<0.5)?a:1.0-a;\n    \n    return i+f;\n}\n\nfloat bitm(vec2 uv,int c) {\n    float h = 5.;\n    float w = 3.;\n    int p = int(pow(2.,(w)));\n    float line1 = 9591.;\n    uv = floor(vec2(uv.x*w,uv.y*h))/vec2(w,w);\n    float c1 = 0.;\n    float cc = uv.x + uv.y*w;\n    c1 = mod( floor( float(c) / exp2(ceil(cc*w-0.6))) ,2.);\n    c1 *= step(0.,uv.x)*step(0.,uv.y);\n    c1 *= step(0.,(-uv.x+0.99))*step(0.,(-uv.y+1.6));\n    return (c1);\n}\n \nvec3 slogo(vec2 uv, float ar) {\n    vec2 px = vec2(1./3.,1./5.);\n    float ls = 4.1;\n    uv.x = 0.9995-uv.x;\n    uv *= 10.*ls;\n    ls += 2.;\n    float ul = length(uv);\n    uv -= px.yx*0.5*0.5*ls;\n    ul = length(vec2(uv.x*0.5,uv.y)-0.5);\n    uv.x *= ar*1.75;\n    int s = 29671;\n    int c = 29263;\n    int r = 31469;\n    int y = 23186;\n    uv.x= 5.-uv.x;\n    float b = bitm(uv,s);\n    uv.x -= 1./3.*4.;\n    b += bitm(uv,c);\n    uv.x -= 1./3.*4.;\n    b += bitm(uv,r);\n    uv.x -= 1./3.*4.;\n    b += bitm(uv,y);\n    float rr = step(0.,uv.x+px.x*13.)*step(0.,uv.y+px.y)*step(0.,(-uv.x+px.x*4.))*step(0.,(-uv.y+px.y*6.));\n    b = clamp(b,0.,1.);\n    //b = rr*floor(b);\n    float ptime = iTime;\n    vec3 l = hsv2rgb(vec3(b+ptime,0,rr-b*1.9))*rr;\n    //l -= length(uv)*0.5;\n    //l -= ul*rr*0.6;\n    l -= 0.1-clamp(ul*0.1,rr*1.-b,0.1);\n    //l -= 3.-ul*2;\n    //l = clamp(l,-1.,1.);\n    return vec3(l);\n}\n\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat abx(float a,float b) {\n    return abs(abs(a)-b)-b;\n}\n\nvec4 fr(vec3 p) {\n    //p.z = 0.;\n    //p.xz *= r2d((3.14159/180.)*-90);\n    float st = iTime*0.2;\n    float sm = sin(st*10.)*0.5+0.5;\n    //sm = 0.;\n    //sm += sin(st*2.)*0.25;\n    //sm *= 1.;\n    float lp = length(p);\n    //sm += sin(st*1)*0.125;\n    float lr = -0.001-sin(lp*20.+iTime)*0.0015;\n    float ls = 0.5;\n    //p *= 2.;\n    lr += 0.001;\n    //lr += (sin(p.z*20+iTime)*0.5+0.5)*0.004;\n    //vec3 pc = p;\n    float d = 10000.;\n    //float u = (fract(iTime*0.02+sin(p.z*4.5)*0.5)-0.5)*2.;\n    float u = 1.;\n    //u = sin(iTime)*0.5+0.5;\n    //ls /= u;\n    float lsm = 0.495;\n    vec3 dp = p;\n    //p += 0.5;\n    //p.x += 0.1;\n    d = min(d,sdVerticalCapsule(p+vec3(0.,ls/2.,0.),ls,lr));\n    d = min(d,sdVerticalCapsule(p.yxz+vec3(0,ls/2.,0),ls,lr));\n    d = min(d,sdVerticalCapsule(p.xzy+vec3(0,ls/2.,0),ls,lr));\n    //p.x -= 0.;\n    //ls *= 0.1;\n    float pd = 0.185;\n    //float pm = 1.-(sin(iTime)*0.5+0.5);\n    float pm = 1.;\n    //p *=  2.;\n    float tm = iTime;\n    tm *= 0.1;\n    float ia = 0.;\n    float pdm = (sin(dp.x*6.+iTime)*0.5+0.5)*0.5;\n    //p += sin(p*20.+iTime)/24.;\n    float lss = 0.8;\n    st += sin(st*2.)*0.25+sin(st*3.)*0.25;\n    for (int i=0;i<9;i++) {\n    //p.x += 0.1;\n    ia += 1.;\n    //p += sin(p*300.-3)/1400.;\n    pd *= u;\n    \n    //p += ;\n    //p *= pm;\n    //p -= sin(iTime)*0.01;\n    //p.xz = abs(p.xz-vec2(0.,0.))-vec2(0.,0.);\n    //p.z = abs(p.z-0.3)-0.3;\n    p.yz *= r2d((3.14159/180.)*-45.+st*0.2);\n    p.zy = abs(p.zy);\n    //p.x = abs(p.x)-0.09;\n    //p.z -= i*0.005;\n    //p.z = abs(p.z)-0.02;\n    //p.z = (fract(p.z)-0.5);\n    //p.zy = abs(p.zy)+0.01;\n    \n    p.yz *= r2d((3.14159/180.)*+45.+st*0.1);\n    //p.yz *= r2d((3.14159/180.)*-45);\n    //p.zy *= r2d((3.14159/180.)*-35.264);\n    \n    \n    \n    p.xy *= r2d((3.14159/180.)*-45.);\n    //p.x += 0.3;\n    //p.xy = abs(p.xy)-pd-0.05*(sin(p.z*10.)*0.5+0.5);\n    p.xy = abs(p.xy)-pd;\n    //p.xy = abs(p.xy)-pd+0.003;\n    //p.z = abs(p.z)-pd;\n    pd *= 0.5;\n    //pd *= pdm;\n    //u *= 0.;\n    //p.zy *= r2d((3.14159/180.)*-iTime+p.x/ls*sm*5);\n    //p.xy *= r2d((3.14159/180.)*-(p.y*2)+iTime*0.3);\n    //p.x -= .;\n    p.xy *= r2d((3.14159/180.)*+45.);\n    \n    //p = abs(p)-0.02;\n    \n    ls *= lsm;\n    //ls *= lss;\n    //ls += 0.1;\n    //ls *= 0.7;\n    //lr += 0.0001;\n    //lr *= 0.;\n    //p.x -= 900.9;\n    //p.x -= 0.01;\n    //ls /= 1.-sm;\n    //p.x += (sin(iTime)*0.5+0.5)*0.2;\n    //p.z = 0.;\n    //lr *= 1.2;\n    //lsm *= 1.;\n    //p += iTime;\n    //p = sin(p.xzz*4)/4.;\n    //p = fract(p+0.5);\n    //p += iTime;\n    //p = abs(p)-0.01*(sin(iTime*2)*0.5+0.5);\n    //p.x += ls-sm*0.3;\n    //p = (fract(p*0.5)-0.5)/0.01;\n    //p.x += sin(p.z*20+iTime)*0.02;\n    //p.z = abs(p.z)-0.006*(sin(sm+dp.y*9+iTime));\n    \n    //p.x = abs(sm-p.x)-sm*0.5;\n    //p.y *= \n    //p.x = d;\n    //p.x = abs(\n    \n    d = min(d,sdVerticalCapsule(p+vec3(0.,ls/2.,0.),ls,lr));\n    d = min(d,sdVerticalCapsule(p.yxz+vec3(0,ls/2.,0),ls,lr));\n    d = min(d,sdVerticalCapsule(p.xzy+vec3(0,ls/2.,0),ls,lr));\n    \n    //p.x += sm*0.5;\n    //p.x += 1;\n    //d = min(d,sdVerticalCapsule(p.zyx+vec3(0.,ls/2,0.),ls,lr));\n    //d = min(d,sdVerticalCapsule(p.yzx+vec3(0,ls/2,0),ls,lr));\n    //d = min(d,sdVerticalCapsule(p.xyz+vec3(0,ls/2,0),ls,lr));\n    //p.xz = abs(p.xz)-0.01;\n    //d = min(d,sdVerticalCapsule(p+vec3(0.,ls/4,0.),ls/2,lr));\n    //d = min(d,sdVerticalCapsule(p.yxz+vec3(0,ls/4,0),ls/2,lr));\n    \n    \n    }\n    //d = min(d,sdVerticalCapsule(p+vec3(0.,ls/2,0.),ls,lr));\n    //d = min(d,sdVerticalCapsule(p.yxz+vec3(0,ls/2,0),ls,lr));\n    //d = min(d,sdVerticalCapsule(p.xzy+vec3(0,ls/2,0),ls,lr));\n    //d *= 2./pm;\n    //d = min(d,sdVerticalCapsule(p,ls,lr));\n    //d = min(d,sdVerticalCapsule(p.yxz,ls,lr));\n    return vec4(p,d);\n}\nvec4 map(vec3 p) {\n    //p += 1.;\n    //p.xy *= r2d(1.);\n    //p.xz *= r2d(1.);\n    vec3 c = p;\n    //p.xy += 2.;\n    p.z -= 0.;\n    //p.xy *= r2d(iTime*0.01+p.z*1);\n    p.z -= 0.2-(cos(iTime*0.02)*0.5+0.5)*0.8;\n    //p.xy *= r2d(iTime*0.03+sin(p.z*130+iTime*2)*0.1);\n    \n    //p.xz *= r2d(iTime*0.02+sin(p.x*60+iTime*1)*0.1);\n    //p.xz *= r2d(iTime*0.02);\n    p.yz *= r2d((iTime*0.002)*1.2+(iMouse.y/iResolution.y)*12.);\n    p.xy *= r2d((3.14159/180.)*-0.);\n    p.xz *= r2d((iTime*0.001)*1.3+(iMouse.x/iResolution.x)*12.);\n    //p.xz *= r2d(3.14);\n    //p.xy *= r2d(p.z*2+iTime*0.1);\n    \n    float d = length(p)-0.5;\n    //p.z += iTime;\n    float pz = p.z;\n    float rs = 0.07;\n    //float rs = 0.001*sin(iTime*.5+p.z*2.)*sin(iTime*0.2-p.z*1);\n    //pz = (fract(pz/rs)-0.5)*rs;\n    //pz = abs(pz)+p.z;\n    vec4 frd = fr(p);\n    d = frd.w-0.0004;\n    d = max(d, -(length(c)-0.02));\n    //p.z -= 0.98*2;\n    //p = frd.xyz;\n    //d = cthing(vec3(p.xy,p.z*0.3+iTime*0.01))+0.00075;\n    //d = max(d,pz);\n    //d = max(cthing(vec3(p.xy,p.z))-0.0001,pz);\n    //d = min(d,cthing(p));\n    //p.z -= 20.;\n    //d = min(d,length(p)-0.1);\n    //p += d;\n    return vec4(p,d);\n}\n\nvec3 calcNorm(vec3 p) {\n    //float eps = 0.01*(sin(p.z*0.1)*0.5+0.5);\n    float eps = 0.0002;\n    vec2 h = vec2(eps,0.);\n    return normalize(vec3(map(p-h.xyy).w-map(p+h.xyy).w,\n                          map(p-h.yxy).w-map(p+h.yxy).w,\n                          map(p-h.yyx).w-map(p+h.yyx).w));\n}\n\n\n#define render 0\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    float ii = 0.;\n    int steps = 320;\n    if (render == 1) {\n        steps = 1450;\n    } \n    //steps = int(noise(vec2(noise(rd.xy*3000.+iTime*20.91)*100.))*200.)+130;\n    for (int i=0;i<steps;i++) {\n        vec3 p = ro+rd*dO;\n        //ro += calcNormL(p)*0.02;\n        //ro += lens(p).xyz*0.2;\n        float dS = map(p).w;\n        dO += dS*(100./float(steps));\n        //dO += dS*(100./float(steps))*(dO+2.)*0.15;\n        ii += 8./float(steps);\n        if (dO > 1000. || dS < 0.0014) {\n            break;\n        }\n    }\n    return vec2(dO,ii);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 tv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    //uv.x *= ar;\n    \n    uv -= 0.5;\n    uv.x *= ar;\n    float c= length(uv);\n    vec3 ro = vec3(0.,0.,0.-(1./iTime+1.));\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd);\n    vec3 p = ro+rd*d.x;\n    vec4 mp = map(p);\n    vec3 n = calcNorm(p);\n    float lp = length(p);\n    vec3 col = vec3(0.);\n    //col += d.x*0.3;\n    //col = vec3(d.y-1.3);\n    //mp += iTime*0.2;\n    //col = hsv2rgb(vec3(lp*3,d.y-1.2,clamp((0.9-d.x)*1.5-d.y*0.2,0.,1.)-d.y*0.25+0.25));\n    /*col = hsv2rgb(vec3(\n    lp*3.,\n    d.y-1.2,\n    clamp(1.-d.y*0.9,0.,1.)/(10.-d.x*2.)\n    ));*/\n    col += hsv2rgb(vec3(\n    sin(lp*20.)*0.2+n.y*0.12,\n    d.y-1.2,\n    clamp(3.-d.y*0.8*d.y,0.,3.)\n    ));\n    col += hsv2rgb(vec3(1.+lp*2.+iTime*0.1,1.,d.y*1.));\n    col *= 0.2;\n    //col *= n.x;\n    //col += n*0.5;\n    //col -= clamp(d.y-2.,0.,0.1);\n    //col -= pow(d.y,30.)*0.0003;\n    //col -= clamp(pow(d.y-1.1,30.),0.,0.003)*20.;\n    //col = mix(1.-col,col,sin(iTime+lp*10)*0.5+0.5);\n    //col *= 2.;\n    //col -= 0.5;\n    //col = mix(col,1.-col,sin(iTime+lp*20)*0.5+0.5);\n    col += sin(mp.w*240.+2.9);\n    if (d.x > 1000.) {\n        col *= 0.;\n        //col += d.y*0.2-1.2;\n        //col = hsv2rgb(vec3(d.y*0.8+iTime*0.1,sin(d.y*2)*0.5+0.5,sin(d.y*2.)*0.5+0.5))*0.1;\n        //col = hsv2rgb(vec3(d.y*5,sin(d.y*20)*0.5+0.5,sin(d.y*4.)*0.5+0.5));\n    }\n    col = clamp(col,0.,1.);\n    //tv = abs(tv)+0.01;\n    //tv = abs(tv)+0.2;\n    //tv = abs(tv-0.159)+0.16;\n    //tv = abs(1.-tv)-0.2;\n    vec2 ttv = tv;\n    tv -= 0.5;\n    //tv = abs(tv)-(0.4-c*0.1);\n    \n    tv = abs(tv)-0.03;\n    tv.x *= ar;\n    \n    //tv *= r2d(-iTime*0.02);\n    //tv = 0.79-abs(1.-tv);\n    //tv *= r2d(-iTime*0.01);\n    //tv = abs(tv)-0.05;\n    //tv *= r2d(iTime*0.01);\n    tv.x /= ar;\n    \n    //tv.y *= ar;\n    tv += 0.5;\n    tv =abs(tv);\n    //tv *= r2d(-iTime*0.00);\n    //tv.y *= ar;\n    vec3 bak = texture(iChannel0,tv).rgb;\n    if (d.x > 1000.5) {\n        col = bak*0.99-d.y*d.y*0.01;\n        col = rgb2hsv(col);\n        col = hsv2rgb(vec3(col.x+0.1,col.y,col.z));\n        //col = mix(col,bak,clamp(2.-d.x,0.,.9));\n        //col = mix(col,bak,clamp(d.x,0.,0.4));\n    }\n    //col = rgb2hsv(col);\n    //col = hsv2rgb(vec3(col.x,col.y,col.z));\n    col -= slogo(ttv,ar)*0.5;\n    //tv += 0.00001;float bakr = texture(iChannel0,tv).r;tv.x += 0.0001;tv.y -= 0.0003;float bakg = texture(iChannel0,tv).g;col.r += bakg*0.5;col.b += bakr*2;\n    //col *= b;\n    \n    //col = hsv2rgb(vec3(col.r+iTime*0.04,sin(col.b*8.+iTime)*0.5+0.5,sin(col.g*6.-iTime)*0.5+0.5))*1.;\n    //uvc *= r2d((3.14159/180)*-45);\n    //col += sin(uvc.x*2)*0.2;\n    //col += sin(col+iiTime*0.1+c*3.+iiTime*0.03)+cos(col-iiTime*2+sin(c*100*sin(iiTime*0.2+cos(iiTime*1.2)*0.5)));\n    //col = sin(col*0.5);\n    //col = sqrt(col*3.)-.4;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}