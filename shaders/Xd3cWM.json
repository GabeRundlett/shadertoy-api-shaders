{
    "Shader": {
        "info": {
            "date": "1519066856",
            "description": "cosine deformations ",
            "flags": 0,
            "hasliked": 0,
            "id": "Xd3cWM",
            "likes": 1,
            "name": "SDF fun",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "signeddistancefunction"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 530
        },
        "renderpass": [
            {
                "code": "#define FAR 100.0\n#define EPS 0.000001\n#define STEPS 500\n\nfloat sdSphere( vec3 p, float c )\n{\n    float t = iTime * 0.2;\n\tfloat r = c * cos( 10.0 * p.x + sin( iTime ) ) * cos( 10.0 * p.y + sin( iTime ) );\n    \n    return length( p ) - c;\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat opRep( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return sdSphere( q, 0.1 );\n}\n\nfloat opScale( vec3 p, float s )\n{\n    return sdSphere(p/s, 1.0)*s;\n}\n\nfloat map( vec3 p )\n{\n\n    return opRep( p, vec3( .3 ) );\n   \n}\n\nvec3 grad( vec3 p )\n{\n\n    vec2 e = vec2( 0.0, EPS );\n    return vec3( map( p + e.yxx ) - map( p - e.yxx ),\n                 map( p + e.xyx ) - map( p - e.xyx ),\n                 map( p + e.xxy ) - map( p - e.xxy )\n    \t\t\t);\n    \n}\n\nvec3 shade( vec3 ro, vec3 rd, float t )\n{\n\n    vec3 n = normalize( grad( ro + rd * t ) );\n    return vec3( 0.0, 0.0, 0.0 ) + n * dot( n, vec3( 0.9 ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n    \n    vec4 mouser = iMouse / iResolution.xyxy;\n    \n    vec3 ro = vec3( mouser.x, mouser.y, 3.5 );\n    vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    float t = 0.0; float d = EPS;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = map( ro + rd * t );\n        if( d < EPS || t > FAR ) break;\n        t += d;\n        \n    }\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? shade( ro, rd, t ) : mix( vec3( .4 ), vec3( 0.1 ), uv.y );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}