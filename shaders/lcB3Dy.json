{
    "Shader": {
        "info": {
            "date": "1704569944",
            "description": "i tried to make a better raymarcher",
            "flags": 0,
            "hasliked": 0,
            "id": "lcB3Dy",
            "likes": 1,
            "name": "culegamer raymarcher v2",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "CuleGamer",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "vec3 rotate(vec3 vector,vec3 angle)\n{\n    vec3 cosA = cos(angle);\n    vec3 sinA = sin(angle);\n    return mat3(1.,0.,0.,0.,cosA.x,-sinA.x,0.,sinA.x,cosA.x) * mat3(cosA.y,0.,sinA.y,0.,1.,0.,-sinA.y,0.,cosA.y) * mat3(cosA.z,-sinA.z,0.,sinA.z,cosA.z,0.,0.,0.,1.) * vector;\n}\nfloat sdPlane(vec3 pos, float planeHeight)\n{\n    return pos.y - planeHeight + cos(pos.z);\n    \n}\nfloat sdSphere(vec3 pos, vec3 posSphere, float radius)\n{\n    return distance(pos, posSphere) - radius;\n}\nfloat signedDist(vec3 pos)\n{\n    return min(sdPlane(pos,0.0),sdSphere(pos,vec3(0.0,0.0,1.0),0.5));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 uvMouse = 4.0 * (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec3 cameraRot = vec3(0.,uvMouse.x,0.);\n    vec3 sunVec = vec3(0.0,1.0,0.0);\n    const int iterations = 100;\n    const float distThreshold = 0.01;\n    const float specularExp = 5.0;\n    vec3 cameraPos = rotate(vec3(0.,uvMouse.y,-1.0),cameraRot);\n    vec3 cameraVec = normalize(rotate(vec3(uv.x,uv.y+uvMouse.y,0.),cameraRot) - cameraPos);\n    vec3 rayPos = cameraPos;\n    vec3 col = vec3(dot(cameraVec * 0.25,sunVec));\n    for (int i = 0; i < iterations;i++)\n    {\n        rayPos += cameraVec * signedDist(rayPos);\n    }\n    vec3 terrainNormal = normalize(cross(vec3(0.0,-sin(rayPos.z),1.0), vec3(1.0,0.0,0.0)));\n    float diffuseLighting = dot(terrainNormal,sunVec);\n    float specularLighting = dot(0.5 *normalize(cameraVec + sunVec),-terrainNormal);\n    if (signedDist(rayPos) < distThreshold)\n    {\n        col = texture(iChannel0,rayPos.xz).xyz * (clamp(diffuseLighting,0.0,1.0) + clamp(pow(specularLighting,specularExp),0.0,1.0));\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}