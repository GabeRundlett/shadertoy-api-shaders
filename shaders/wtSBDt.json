{
    "Shader": {
        "info": {
            "date": "1600124634",
            "description": "CylinderDeformText test",
            "flags": 0,
            "hasliked": 0,
            "id": "wtSBDt",
            "likes": 12,
            "name": "CylinderDeformText",
            "published": 3,
            "tags": [
                "deform",
                "font",
                "cylinder"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "// cylinder deform text test - Del 14/09/2020\n\n#define AA 1\t// increase this to 2 if you are cold...\nfloat mat;\t\t// dirty material\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\n\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) { //yes, this might not be the best thing numerically.\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\n\nfloat Sampx( int iChar, vec2 vCharUV )\n{\n    vec2 iChPos = vec2( mod(float(iChar),16.0), iChar / 16 );\n    vec2 vUV = (vec2(iChPos) + vCharUV) / 16.0;\n    return textureLod( iChannel0, vUV, 0.0 ).w - 0.5 ;\n}\n\nint GetTxChar (int _nc)\n{\n    if(_nc==0) return(0x53);\n    if(_nc==1) return(0x48);\n    if(_nc==2) return(0x41);\n    if(_nc==3) return(0x44);\n    if(_nc==4) return(0x45);\n    if(_nc==5) return(0x52);\n    if(_nc==6) return(0x54);\n    if(_nc==7) return(0x4f);\n    if(_nc==8) return(0x59);\n    return 32;\n}\n\nfloat chars(vec3 p)\n{\n    float cc1 = pModInterval1(p.z,0.8,-2.0,2.0); \t\t// vertical repeat\n    p = p.xzy;\n    p.x = -p.x;\n   \tp.yz *= rot(3.141);\n        \n    float c1 = pModInterval1(p.x,0.8,-5.0,5.0);\n    float zdist = 0.25+(0.5+sin(cc1*c1+iTime*4.0)*0.5)*0.2;\n    vec3 r1 = p;\n\tint charid = GetTxChar(int(c1+4.0));\n\tfloat symbolDist = Sampx( charid, (r1.xy+vec2(0.5,0.5)) ) - 0.00001;\n\tfloat boxdist2 = sdBox(r1-vec3(0.0,0.0,-0.25), vec3(0.35 , 0.35, 0.2));\n\tfloat boxdist = sdBox(r1-vec3(0.0,0.0,zdist), vec3(0.5 , 0.5, zdist));\n    symbolDist = max(boxdist,symbolDist);\n    mat = step(symbolDist,boxdist2)*0.5 + ((mod(iTime*10.0,200.0)+c1+cc1)/25.0);\n    symbolDist = min(boxdist2,symbolDist);\n    return symbolDist;\n}\n\nfloat map( in vec3 pos )\n{\n    mat=0.0;\n\n    // Deform Space...\n    float len = 32.0+sin(iTime*1.3)*17.0;\n    float rad =  (1.0/(3.141*2.0)*len);\n    float ang = atan(pos.x, pos.y);\n    vec2 cyl = vec2(rad-length(pos.xy), pos.z);\n    vec3 dp = vec3(cyl, ang * rad);\n\n    if (iMouse.z>0.5)\n    {\n        dp=pos.zyx;//flat\n        dp.xy *= rot(4.7115);\n    }\n\tfloat dd = chars(dp.zxy);\n    return dd*0.5;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}\n\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 1.5+sin(iTime)*0.5;\n    \n\tvec3 ro = vec3( 10.0*cos(an), 10.0*sin(an),sin(iTime*1.44)*3.0);\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 50.0;\n        float t = 0.0;\n        for( int i=0; i<100; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n\t\t\tvec3 _col = hsv2rgb(vec3(mat,0.55,0.6));\n            col = _col*amb + _col*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}