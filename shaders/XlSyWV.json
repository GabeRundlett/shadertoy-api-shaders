{
    "Shader": {
        "info": {
            "date": "1510095152",
            "description": "The Earlybird filter assigns the photo with a dated appearance. It uses sepia tint and faded colors as masks to render a Polaroid feeling.  \nYou can use my ShaderToy renderer https://github.com/ruofeidu/DuEngine for batch proc.\nClick the mouse to compare.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlSyWV",
            "likes": 13,
            "name": "Earlybird Filter",
            "published": 3,
            "tags": [
                "2d",
                "filter",
                "contrast",
                "instagram",
                "image",
                "brightness",
                "levels",
                "earlybird"
            ],
            "usePreview": 1,
            "username": "starea",
            "viewed": 2509
        },
        "renderpass": [
            {
                "code": "/** \n * Earlybird Filter by Ruofei Du (DuRuofei.com)\n * Demo: https://www.shadertoy.com/view/4lSyDK\n * starea @ ShaderToy,License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * https://creativecommons.org/licenses/by-nc-sa/3.0/\n * \n * Reference: \n * [1] colorBurn function forked from ben's https://www.shadertoy.com/view/XdS3RW\n * [2] starea's Dotted Drawing / Sketch Effect: https://www.shadertoy.com/view/ldSyzV\n * [3] starea's BrightnessContrastSaturationHue: https://www.shadertoy.com/view/MdjBRy\n *\n * Series:\n * [1] Brannan Filter: https://www.shadertoy.com/view/4lSyDK\n * [2] Earlybird Filter: https://www.shadertoy.com/view/XlSyWV\n * [3] Starea Filter: https://www.shadertoy.com/view/MtjyDK\n * \n *\n * Write-ups:\n * [1] http://blog.ruofeidu.com/implementing-instagram-filters-brannan/\n **/\nfloat greyScale(in vec3 col) \n{\n    return dot(col, vec3(0.3, 0.59, 0.11));\n}\n\nmat3 saturationMatrix( float saturation ) {\n    vec3 luminance = vec3( 0.3086, 0.6094, 0.0820 );\n    float oneMinusSat = 1.0 - saturation;\n    vec3 red = vec3( luminance.x * oneMinusSat );\n    red.r += saturation;\n    \n    vec3 green = vec3( luminance.y * oneMinusSat );\n    green.g += saturation;\n    \n    vec3 blue = vec3( luminance.z * oneMinusSat );\n    blue.b += saturation;\n    \n    return mat3(red, green, blue);\n}\n\nvoid levels(inout vec3 col, in vec3 inleft, in vec3 inright, in vec3 outleft, in vec3 outright) {\n    col = clamp(col, inleft, inright);\n    col = (col - inleft) / (inright - inleft);\n    col = outleft + col * (outright - outleft);\n}\n\nvoid brightnessAdjust( inout vec3 color, in float b) {\n    color += b;\n}\n\nvoid contrastAdjust( inout vec3 color, in float c) {\n    float t = 0.5 - c * 0.5; \n    color = color * c + t;\n}\n\n\nvec3 colorBurn(in vec3 s, in vec3 d )\n{\n\treturn 1.0 - (1.0 - d) / s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb; \n    if (iMouse.z > 0.5) {\n\t\tfragColor = vec4(col, 1.0);\n        return;\n    }    \n    vec2 coord = ( fragCoord.xy + fragCoord.xy -  iResolution.xy ) / iResolution.y;\n    vec3 gradient = vec3(pow(1.0 - length(coord * 0.4), 0.6) * 1.2); \n    vec3 grey = vec3(184./255.);\n    vec3 tint = vec3(252., 243., 213.) / 255.;\n    col = saturationMatrix(0.68) * col; \n    levels(col, vec3(0.), vec3(1.0), \n                vec3(27.,0.,0.) / 255., vec3(255.) / 255.); \n    col = pow(col, vec3(1.19));\n    brightnessAdjust(col, 0.13); \n    contrastAdjust(col, 1.05); \n    col = saturationMatrix(0.85) * col; \n    levels(col, vec3(0.), vec3(235./255.), \n                vec3(0.,0.,0.) / 255., vec3(255.) / 255.); \n    \n    col = mix(tint * col, col, gradient); \n    col = colorBurn(grey, col); \n    //col *= 0.8;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}