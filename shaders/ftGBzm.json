{
    "Shader": {
        "info": {
            "date": "1664220461",
            "description": "Code ported to GLSL from: https://www.jcgt.org/published/0011/03/05/\n\nEDIT: Using fixes from mmikk; thank you!",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGBzm",
            "likes": 4,
            "name": "Morten Hex Grid Tiling",
            "published": 3,
            "tags": [
                "grid",
                "tiling",
                "hex",
                "morten"
            ],
            "usePreview": 1,
            "username": "zalo",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "// Code from https://www.jcgt.org/published/0011/03/05/\n// Also: https://80.lv/articles/implementing-morten-mikkelsen-s-method-of-working-with-hex-tiles/\n\n#define M_PI 3.14159\n\nvoid TriangleGrid(out float w1, out float w2, out float w3,\n\tout ivec2 vertex1, out ivec2 vertex2, out ivec2 vertex3,\n\tvec2 st) {\n\t// Scaling of the input\n\tst *= 2.0 * sqrt(3.0);\n\t// Skew input space into simplex triangle grid.\n\tmat2 gridToSkewedGrid =\n\t\tmat2(1.0, -0.57735027, 0.0, 1.15470054);\n\tvec2 skewedCoord = (st * gridToSkewedGrid);\n\tivec2 baseId = ivec2(floor(skewedCoord));\n\tvec3 temp = vec3(fract(skewedCoord), 0.0);\n\ttemp.z = 1.0 - temp.x - temp.y;\n\tfloat s = step(0.0, -temp.z);\n\tfloat s2 = 2.0 * s - 1.0;\n\tw1 = -temp.z * s2;\n\tw2 = s - temp.y * s2;\n\tw3 = s - temp.x * s2;\n\tvertex1 = baseId + ivec2(s, s);\n\tvertex2 = baseId + ivec2(s, 1.0 - s);\n\tvertex3 = baseId + ivec2(1.0 - s, s);\n}\n\nvec2 hash(ivec2 p) {\n\tvec2 r = vec2(p) * mat2(127.1, 311.7, 269.5, 183.3);\n\treturn fract(sin(r) * 43758.5453);\n}\n\n//vec2 sampleDeriv(sampler2D nmap, vec2 st, vec2 dSTdx, vec2 dSTdy){\n//    // Sample\n//    vec4 vM = 2.0*textureGrad(nmap, st, dSTdx, dSTdy)-1.0;\n//    return TspaceNormalToDerivative(vM);\n//}\n\n// Input: vM is the tangent-space normal in [-1, 1]\n// Output: convert vM to a derivative\nvec2 TspaceNormalToDerivative(vec3 vM) {\n\tconst float scale = 1.0 / 128.0;\n\t// Ensure vM delivers a positive third component using abs() and\n\t// constrain vM.z so the range of the derivative is [-128, 128].\n\tvec3 vMa = abs(vM);\n\tfloat z_ma = max(vMa.z, scale * max(vMa.x, vMa.y));\n\t// Set to match positive vertical texture coordinate axis.\n\tconst bool gFlipVertDeriv = false;\n\tconst float s = gFlipVertDeriv ? -1.0 : 1.0;\n\treturn -vec2(vM.x, s * vM.y) / z_ma;\n}\n\nvec3 Gain3(vec3 x, float r) {\n\t// Increase contrast when r > 0.5 and\n\t// reduce contrast if less.\n\tfloat k = log(1.0 - r) / log(0.5);\n\tvec3 s = 2.0 * step(0.5, x);\n\tvec3 m = 2.0 * (1.0 - s);\n\tvec3 res = 0.5 * s + 0.25 * m * pow(max(vec3(0.0), s + x * m), vec3(k));\n\treturn res.xyz / (res.x + res.y + res.z);\n}\n\nvec3 ProduceHexWeights(vec3 W,\n\tivec2 vertex1, ivec2 vertex2, ivec2 vertex3) {\n\tvec3 res = vec3(0.0);\n\tint v1 = (vertex1.x - vertex1.y) % 3;\n\tif (v1 < 0) v1 += 3;\n\tint vh = v1 < 2 ? (v1 + 1) : 0;\n\tint vl = v1 > 0 ? (v1 - 1) : 2;\n\tint v2 = vertex1.x < vertex3.x ? vl : vh;\n\tint v3 = vertex1.x < vertex3.x ? vh : vl;\n\tres.x = v3 == 0 ? W.z : (v2 == 0 ? W.y : W.x);\n\tres.y = v3 == 1 ? W.z : (v2 == 1 ? W.y : W.x);\n\tres.z = v3 == 2 ? W.z : (v2 == 2 ? W.y : W.x);\n\treturn res;\n}\n\nmat2 LoadRot2x2(ivec2 idx, float rotStrength) {\n\tfloat angle = float(abs(idx.x * idx.y) + abs(idx.x + idx.y)) + M_PI;\n\t// Remap to +/-pi.\n\tangle = mod(angle, 2.0 * M_PI);\n\tif (angle < 0.0) angle += 2.0 * M_PI;\n\tif (angle > M_PI) angle -= 2.0 * M_PI;\n\tangle *= rotStrength;\n\tfloat cs = cos(angle), si = sin(angle);\n\treturn mat2(cs, -si, si, cs);\n}\n\n\nvec2 MakeCenST(ivec2 Vertex) {\n\tmat2 invSkewMat = mat2(1.0, 0.5, 0.0, 1.0 / 1.15470054);\n\treturn (vec2(Vertex) * invSkewMat) / (2.0 * sqrt(3.0));\n}\n\n\n// Input: tex is a texture with color\n// Input: r increase contrast when r > 0.5\n// Output: color is the blended result\n// Output: weights shows the weight of each hex tile\nvoid hex2colTex(out vec4 color, out vec3 weights,\n\tsampler2D tex, vec2 st,\n\tfloat rotStrength, float r) { // r = 0.5 by default\n\tvec2 dSTdx = dFdx(st), dSTdy = dFdy(st);\n\t// Get triangle info.\n\tfloat w1, w2, w3;\n\tivec2 vertex1, vertex2, vertex3;\n\tTriangleGrid(w1, w2, w3, vertex1, vertex2, vertex3, st);\n\tmat2 rot1 = LoadRot2x2(vertex1, rotStrength);\n\tmat2 rot2 = LoadRot2x2(vertex2, rotStrength);\n\tmat2 rot3 = LoadRot2x2(vertex3, rotStrength);\n\tvec2 cen1 = MakeCenST(vertex1);\n\tvec2 cen2 = MakeCenST(vertex2);\n\tvec2 cen3 = MakeCenST(vertex3);\n\tvec2 st1 = rot1 * (st - cen1) + cen1 + hash(vertex1);\n\tvec2 st2 = rot2 * (st - cen2) + cen2 + hash(vertex2);\n\tvec2 st3 = rot3 * (st - cen3) + cen3 + hash(vertex3);\n\t// Fetch input.\n\tvec4 c1 = textureGrad(tex, st1,\n\t\t(rot1 * dSTdx), (rot1 * dSTdy));\n\tvec4 c2 = textureGrad(tex, st2,\n\t\t(rot2 * dSTdx), (rot2 * dSTdy));\n\tvec4 c3 = textureGrad(tex, st3,\n\t\t(rot3 * dSTdx), (rot3 * dSTdy));\n\t// Use luminance as weight.\n\tvec3 Lw = vec3(0.299, 0.587, 0.114);\n\tvec3 Dw = vec3(dot(c1.xyz, Lw), dot(c2.xyz, Lw), dot(c3.xyz, Lw));\n\tDw = mix(vec3(1.0), Dw, 0.6); // g_fallOffContrast = 0.6\n\tvec3 W = Dw * pow(vec3(w1, w2, w3), vec3(7)); // g_exp = 7\n\tW /= (W.x + W.y + W.z);\n\tif (r != 0.5) W = Gain3(W, r);\n\tcolor = W.x * c1 + W.y * c2 + W.z * c3;\n\tweights = ProduceHexWeights(W.xyz, vertex1, vertex2, vertex3);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 size = iResolution.xy;\n\tvec2 uv = (fragCoord.xy - 0.5 * size) / size.y;\n\n\t//uv *= repetitions;\n\n\tvec4 c = vec4(0.0);\n\tvec3 weights = vec3(0.0);\n\thex2colTex(c, weights, iChannel0, uv, iTime, 0.5);\n\n\t//vec3 c = texture(iChannel0, triangleSlice(hc.xy)).xyz;\n\n\tfragColor = c;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}