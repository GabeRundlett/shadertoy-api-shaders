{
    "Shader": {
        "info": {
            "date": "1650724043",
            "description": "Practice I",
            "flags": 0,
            "hasliked": 0,
            "id": "NtfBDr",
            "likes": 0,
            "name": "Flat Sphere",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "libreliu",
            "viewed": 111
        },
        "renderpass": [
            {
                "code": "#define RAYMARCH_MAX_STEPS 100\n#define RAYMARCH_MAX_DIST 100.5f\n#define RAYMARCH_SURF_DIST 1e-2\n#define GRAD_APPROX_EPS 1e-3\n#define PI 3.14159265359\n\nfloat sphereSDF(vec3 p, vec3 c, float r) {\n    return sqrt((p.x - c.x) * (p.x - c.x) + (p.y - c.y) * (p.y - c.y) + (p.z - c.z) * (p.z - c.z)) - r;\n}\n\nfloat groundSDF(vec3 p) {\n    return abs(p.y+2.5);\n}\n\nfloat sceneSDF(vec3 p) {\n    return min(sphereSDF(p, vec3(0.0, 0.0, 0.0), 1.5), groundSDF(p));\n}\n\nfloat rayMarch(vec3 rayO, vec3 rayD, out float dist) {\n    vec3 curIsect = rayO;\n    rayD = normalize(rayD);\n    float t = 0.0f;\n    for (int i = 0; i < RAYMARCH_MAX_STEPS; i++) {\n        dist = sceneSDF(curIsect);\n        if (dist < RAYMARCH_SURF_DIST || dist > RAYMARCH_MAX_DIST) {\n            break;\n        }\n        \n        t += dist;\n        curIsect = rayO + t * rayD;\n    }\n    return t;\n}\n\n// grad f(x,y,z) = (df/dx, df/dy, df/dz)\n// normal at (x_0, y_0, z_0) is normalized grad SDF(x,y,z)\n//     evaluated at (x_0, y_0, z_0)\nvec3 sceneNormal(vec3 p) {\n    float pSDF = sceneSDF(p);\n    vec2 eps = vec2(1e-3, 0);\n    vec3 grad = pSDF - vec3(\n        sceneSDF(p - eps.xyy),    // f(x_0 - eps.x, y_0, z_0)\n        sceneSDF(p - eps.yxy),    // f(x_0, y_0 - eps.x, z_0)\n        sceneSDF(p - eps.yyx)     // f(x_0, y_0, z_0 - eps.x)\n    );\n    \n    // normalize does the rest\n    return normalize(grad);\n}\n\nvec3 shadeScene(vec3 isect) {\n    // contrib from mainLight - point light\n    //vec3 lightPos = vec3(5.0, 0.0, -5.0);\n    vec3 lightPos = vec3(5.0f * cos(2.0 * iTime), 0.0, 5.0 * sin(2.0 *iTime));\n    \n    // test if the light can reach our ball\n    vec3 light2Isect = normalize(isect - lightPos);\n    float rayDist, lightT = rayMarch(lightPos, light2Isect, rayDist);\n    float visibility = 0.0f;\n    //float visibility = 1.0f;\n    if (length(lightPos + lightT * light2Isect - isect) < 10. * RAYMARCH_SURF_DIST) {\n        // shall contribute light\n        visibility = 1.0f;\n    }\n    \n    vec3 lightColor = vec3(0.5, 0.5, 0.5);\n    vec3 lightL = lightColor * 5.5f;\n    \n    vec3 isectN = sceneNormal(isect);\n    vec3 lightContrib = \\\n        visibility * clamp(dot(isectN, normalize(lightPos - isect)), 0., 1.) * lightL / length(isect - lightPos);\n    \n    return lightContrib;\n}\n\n// TODO\nvec3 shadeSkybox(vec3 rayD) {\n    return vec3(0.0f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    // Compute camera properties\n    vec3 camPos = vec3(5.0, 0.0, 0.0);\n    vec3 camLookat = vec3(-1.0, 0.0, 0.0);\n    vec3 camUp = vec3(0.0, 0.0, 1.0);\n    vec3 camZ = normalize(camLookat - camPos);            // forward\n    vec3 camX = normalize(cross(camZ, normalize(camUp)));  // right\n    vec3 camY = cross(camX, camZ);                        // up\n    float camVertFOV = 120.0f * (PI / 180.0f) / 2.;       // 120 degree\n    vec3 camScrC = camPos + camZ;\n    vec3 camScrP = camScrC + camY * (uv.x -0.5) * tan(camVertFOV) + camX * (uv.y-0.5) * tan(camVertFOV) / aspectRatio;\n    \n    vec3 rayD = normalize(camScrP - camPos);\n    vec3 rayO = camPos;\n    float distClosest, tClosest = rayMarch(rayO, rayD, distClosest);\n    \n    \n    //vec3 outColor = vec3(distClosest );\n    //vec3 outColor = dist > 1. ? vec3(0.0) : vec3(1.0);\n    \n    vec3 outColor;\n    if (distClosest > 10.0f * RAYMARCH_SURF_DIST) {\n        outColor = shadeSkybox(rayD);\n    } else {\n        outColor = shadeScene(rayO + tClosest * rayD);\n    }\n\n    // Output to screen\n    fragColor = vec4(outColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}