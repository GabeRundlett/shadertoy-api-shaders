{
    "Shader": {
        "info": {
            "date": "1491924223",
            "description": "raycasts a sierpinski carpet, use mouse",
            "flags": 0,
            "hasliked": 0,
            "id": "4d2yD1",
            "likes": 12,
            "name": "sierpinski raycasting",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "squares"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 1143
        },
        "renderpass": [
            {
                "code": "bool map(vec2 p) {\n    p = mod(p,3.0);\n    \n    //return dot(p-1.0,p-1.0) >= 1.1;\n    return dot(p-0.8,p-0.8) < 1.6;\n    //return dot(p-1.0,p-1.0) > 0.9;\n}\n#define steps 100\n#define detail 3\n\nfloat line( vec2 p, vec2 a, vec2 b ) \n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nbool isinbox(vec2 a, vec2 b, float size) {\n    return all(greaterThan(a, b))&&all(lessThan(a,b+size));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 scrpos = uv*3.0;\n    vec4 muv= (abs(iMouse) * 2.0 - iResolution.xyxy) / iResolution.y;\n    if (muv.y < -0.9) {\n        muv = vec4(sin(iTime), cos(iTime),0.0,0.0)+0.5;\n    }\n    vec2 ro = scrpos;\n    vec2 fro = floor(ro);\n    \n    \n    int c;\n    fragColor = vec4(1.0,0.0,0.0,1.0);\n    for (c = 0; c <= detail; c++) {\n        if (map(fro)) {\n\t\t\tfragColor = vec4(0.0,0.0,c,1.0)/2.0;\n            break;\n        }\n        ro = ro*3.0;\n        fro = floor(ro);\n    }\n    float white = 0.0;\n    vec2 cam = (muv.zw) * 3.0;\n    ro = cam;\n    vec2 rd = normalize(-(muv.zw)+(muv.xy));\n    float size = 1.0;\n    float count = 0.0;\n    \n    fro = floor(ro/size)*size;\n    vec2 mask = vec2(0.0);\n    \n    float dist = 0.0;\n    vec2 lro = ro;\n    vec2 lfro = fro;\n    \n    vec2 poscolor = vec2(0.0);\n    for (int i = 0; i < steps; i++) {\n        if (count > float(detail)||dist > 12.0) break;\n        bool len = map(lfro);\n        \n        if((max(lfro.x,lfro.y) > 2.5||min(lfro.x,lfro.y) < -0.5)) {\n            if (count < 0.5) {\n                lro = lro-(lfro-mod(lfro,3.0));\n                lfro = mod(lfro,3.0);\n            } else {\n                size *= 3.0;\n                count--;\n                fro -= lfro*size/3.0-mask*sign(rd)*size;\n                ro += sign(rd)*0.001*mask;\n                lro = mod(ro/size-mask*sign(rd),3.0)+mask*sign(rd);\n\n                lfro = floor(lro);\n                \n            }\n\t\t} else\n        if (!len && count <= float(detail)) {            \n            size /= 3.0;\n            count++;\n            lro = lro*3.0-lfro*3.0;\n            vec2 pos = clamp(floor(lro),0.0,2.0);\n            lfro = pos;\n            fro += lfro*size;\n            i--;\n        } else {\n        \t\n            //coloring\n            if(isinbox(scrpos,fro,size)) {\n                fragColor = 0.8-fragColor;\n                poscolor = lro;\n            }\n            \n            vec2 dists = abs((sign(rd)*0.5+0.5)-(lro-lfro))*1.0/max(abs(rd),0.001);\n\t\t\t\n            float m = min(dists.x,dists.y);\n\t\t\t\n            mask = step(dists,vec2(m));\n\t\t\t\n            dist += m*size;\n            ro += m*rd*size;\n            lro += m*rd;\n            lfro += mask*sign(rd);\n            fro += mask*sign(rd)*size;\n            \n            white = max(white, (1.0-abs(length(ro-uv*3.0)*20.0-0.5)));\n            \n            \n        }\n    }\n    \n    white = max(white, (1.0-20.0*line(uv*3.0,cam,ro)));\n    fragColor = max(fragColor,vec4(white));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}