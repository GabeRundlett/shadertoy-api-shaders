{
    "Shader": {
        "info": {
            "date": "1542131348",
            "description": "GLSL implementation of equation 11 from http://extremelearning.com.au/a-simple-method-to-construct-isotropic-quasirandom-blue-noise-point-sequences/\n\nNo attempt was made at making this efficient, instead opting for readability and simplicity.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVBRw",
            "likes": 35,
            "name": "Infinite sequence jittered R2",
            "published": 3,
            "tags": [
                "noise",
                "sequence",
                "jitter",
                "r2"
            ],
            "usePreview": 0,
            "username": "mv",
            "viewed": 1655
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2017 Morten Vassvik\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// constants \nconst float phi = 1.324717957244746;\nconst float pi = 3.14159265359;\nconst float delta0 = 0.76;\nconst float i0 = 0.700;\nconst vec2 alpha = vec2(1.0/phi, 1.0/phi/phi);\n\n// See IQ's \"Integer Hash - III\" shader: https://www.shadertoy.com/view/4tXyWN \nfloat hash( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}\n\n// Floor division modulo\nvec2 fmod(vec2 x)\n{\n \treturn x - floor(x);   \n}\n\n// Equation 11 of http://extremelearning.com.au/a-simple-method-to-construct-isotropic-quasirandom-blue-noise-point-sequences/\nvec2 get_point(int i, float lambda)\n{\n    vec2 u = vec2(hash(uvec2(i, 0)), hash(uvec2(i, 1)))-0.5;\n\treturn fmod(alpha * float(i) + lambda * delta0 * sqrt(pi) / (4.0 * sqrt(float(i) - i0)) * u);\n}\n\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\n//#define USE_RANDOM_COLORS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Split window \n    vec2 res = iResolution.xy/vec2(3.0, 2.0);\n    vec2 coord = mod(fragCoord, res);\n    uvec2 idx = uvec2(fragCoord)/uvec2(res);\n    \n    // Transform coordinates to -1.1 to +1.1, but aspect corrected in X\n    vec2 uv = (2.0*coord - res)/res.yy;\n    uv *= 1.1;\n    \n    // Loop through up to 960 (in approx 16 seconds) points and compose, waiting for 4 seconds until it repeats\n    vec3 col = vec3(1.0);\n    for (int i = 0; i < min(960, (iFrame%1120)); i++) {\n        // Different jitter strength per panel. \n        // Lower left has no jitter, while upper right has a jitter of 100%\n        vec2 q;\n             if (idx == uvec2(0, 1)) q = get_point(i+1, 0.0);\n        else if (idx == uvec2(1, 1)) q = get_point(i+1, 0.2);\n        else if (idx == uvec2(2, 1)) q = get_point(i+1, 0.4);\n        else if (idx == uvec2(0, 0)) q = get_point(i+1, 0.6);\n        else if (idx == uvec2(1, 0)) q = get_point(i+1, 0.8);\n        else if (idx == uvec2(2, 0)) q = get_point(i+1, 1.0);\n    \t\n        // Transform sampled point from unit square to -1 to +1 square\n        q = 2.0*q-1.0;\n            \n        // Grab a color\n#ifdef USE_RANDOM_COLORS\n        vec3 col2 = vec3(hash(uvec2(i+1, 2)), hash(uvec2(i+1, 3)), hash(uvec2(i+1, 4)));\n#else\n        vec3 col2 = hue(float(i)/960.0);\n#endif\n        // Compose points\n        float w = 3.0/res.y;\n        float s = smoothstep(-w/2.0, w/2.0, length(q - uv) - 0.02);\n        col = col*s + col2*(1.0 - s);\n    }\n    \n    // Add borders for each subwindow\n    if (coord.x < 1.0 || \n        coord.y < 1.0 || \n        coord.x >= res.x-2.0 || \n        coord.y >= res.y-2.0 ||\n        fragCoord.x < 3.0 || \n        fragCoord.y < 3.0 || \n        fragCoord.x >= iResolution.x-3.0 || \n        fragCoord.y >= iResolution.y-3.0) {\n    \tcol = vec3(0.0);   \n    }\n    \n    //\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}