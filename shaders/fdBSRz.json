{
    "Shader": {
        "info": {
            "date": "1619513423",
            "description": "Interactive flight on a nearby planet.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdBSRz",
            "likes": 12,
            "name": "Fly The Mars Copter",
            "published": 3,
            "tags": [
                "game",
                "interactive",
                "dynamics",
                "flight",
                "nasa"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "// \"Fly The Mars Copter\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Mouse controlled flight (drag small ring), automatic landing.\n Inset views are from forward and downward wide-angle cameras.\n Copter coordinates and altitude shown; grid and red/green spots\n are navigation aids.\n*/\n\n#define USE_BND_SPHERE 0  // (=0/1) set = 1 for slight speedup (visual promblems for some?)\n\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm2e (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\n#define VAR_ZERO min (iFrame, 0)\n\nmat3 vuMat, flMat;\nvec3 qHit, flPos, sunDir;\nvec2 hipPos;\nfloat tCur, dstFar, flDir, legLenU, legLenD, aU, aD, pPitch, pRot, heliScl, grndScl;\nint idObj, idVu;\nbool flHide, isSh;\nconst int idBase = 1, idLeg = 2, idAxl = 3, idProp = 4, idCamV = 5, idCamH = 6;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrndDf (vec3 p)\n{\n  vec3 q;\n  float d, h, a, r, s, f;\n  q = p / grndScl;\n  r = length (q.xz);\n  d = p.y;\n  if (r > 0.) {\n    a = atan (q.z, - q.x) / (2. * pi) + 0.5;\n    s = sqrt (r) / (2. * pi);\n    f = 32.;\n    h = 2.5 * s * mix (Fbm2e (f * vec2 (s, a + 1.)), Fbm2e (f * vec2 (s, a)), a);\n    d = max (r - 20., q.y - mix (s, h, smoothstep (1.4, 2.2, r)) * smoothstep (1.4, 2.6, r));\n  }\n  return grndScl * d;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + s * rd;\n    h = GrndDf (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.001, h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 10; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (GrndDf (p) > 0.) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GrndDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\n#define SQ(x) ((x) * (x))\n\n#define SQ(x) ((x) * (x))\n#define ACOS_CLAMP(c) acos (clamp ((c), -1., 1.))\n\nvoid SetConf ()\n{\n  float legHtMin, legHtMax, toePos, d, h;\n  legLenU = 2.;\n  legLenD = 3.;\n  hipPos.x = 1.5;\n  toePos = 4.;\n  legHtMin = 0.45 * (legLenU + legLenD);\n  legHtMax = sqrt (SQ (legLenU + legLenD) - SQ (toePos - hipPos.x));\n  hipPos.y = flPos.y / heliScl + legHtMin;\n  h = min (hipPos.y, legHtMax);\n  d = sqrt (SQ (h) + SQ (toePos - hipPos.x));\n  aU = ACOS_CLAMP ((SQ (legLenU) - SQ (legLenD) + SQ (d)) / (2. * legLenU * d)) + acos (h / d) - 0.5 * pi;\n  aD = aU + ACOS_CLAMP ((SQ (legLenU) + SQ (legLenD) - SQ (d)) / (2. * legLenU * legLenD)) + pi;\n  d = hipPos.y - (legLenU + legLenD);\n  if (d > 0.) {\n    d = 0.13 * pi * smoothstep (0., 5., d);\n    aU -= d;\n    aD -= d;\n  }\n}\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 fb;\n  float d;\n  p = flMat * (p - vec3 (flPos.xz, hipPos.y * heliScl).xzy);\n  dMin /= heliScl;\n  p /= heliScl;\n  p.y += hipPos.y;\n  q = p;\n  q.y -= hipPos.y;\n#if USE_BND_SPHERE > 0\n  if (! isSh) d = length (q) - 6.3;\n  if (isSh || d < 0.1) {\n#else\n  if (true) {\n#endif\n    fb = normalize (vec2 (1.2, 1.));\n    for (float k = -1. + float (VAR_ZERO); k <= 1.; k += 2.) {\n      q = p;\n      q.xz = Rot2D (q.xz, k * pRot);\n      q.y -= hipPos.y + 2.4 + 1.2 * k;\n      d = PrRoundCylDf (q.xzy, 0.2 - 0.05 * k, 0.01, 1.2);\n      DMINQ (idAxl);\n      q.y -= 1.;\n      d = min (max (PrRoundCylDf (vec3 (q.x, Rot2D (q.yz, k * pPitch)).xzy, 3., 0.02, 0.01),\n         dot (vec2 (q.x, abs (q.z)), fb)),\n         max (PrRoundCylDf (vec3 (q.x, Rot2D (q.yz, - k * pPitch)).xzy, 3., 0.02, 0.01),\n         dot (vec2 (- q.x, abs (q.z)), fb)));\n      DMINQ (idProp);\n    }\n    q = p;\n    q.y -= hipPos.y + 0.1;\n    d = PrRoundCylDf (q.xzy, hipPos.x, 0.05, 0.2);\n    q.y -= 0.4;\n    d = min (d, PrRoundCylDf (q.xzy, 0.35 * hipPos.x, 0.05, 0.15));\n    DMINQ (idBase);\n    q = p;\n    q.y -= hipPos.y - 0.2;\n    d = PrCapsDf (q.xzy, 0.35 * hipPos.x, 0.1);\n    DMINQ (idCamV);\n    q.yz -= vec2 (0.2, hipPos.x);\n    d = PrCapsDf (q, 0.15 * hipPos.x, 0.2);\n    DMINQ (idCamH);\n    q = p;\n    q.xz = Rot2D (q.xz, pi / 6.);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 6.);\n    q.xy = Rot2D (q.xy - hipPos * vec2 (-1., 1.), aU);\n    q.x += 0.5 * legLenU;\n    d = PrCapsDf (q.yzx, 0.1 * (0.8 + 0.2 * q.x / (0.5 * legLenU)) / 0.6, 0.5 * legLenU);\n    DMINQ (idLeg);\n    q.x += 0.5 * legLenU;\n    q.xy = Rot2D (q.xy, aD - aU);\n    q.x += 0.5 * legLenD;\n    d = PrCapsDf (q.yzx, 0.1 * (0.9 + 0.1 * q.x / (0.5 * legLenD)), 0.5 * legLenD);\n    DMINQ (idLeg);\n    q.x += 0.5 * legLenD;\n    q.xy = Rot2D (q.xy, 0.5 * pi - aD);\n    q.x -= -0.02;\n    d = PrRoundCylDf (q.yzx, 0.3, 0.02, 0.05);\n    DMINQ (idLeg);\n  } else dMin = min (dMin, d);\n  return heliScl * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  if (! flHide) dMin = FlyerDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 150; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 24; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 2. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 GrndCol (vec3 ro, vec3 vn, float dstGrnd)\n{\n  vec3 col;\n  col = vec3 (0.7, 0.55, 0.3);\n  if (ro.y > -0.1) {\n    col *= 1. - 0.3 * Fbm2 (4. * ro.xz);\n    col = mix (col, 0.8 * col, smoothstep (0.2, 0.7, 1. - vn.y));\n    col = mix (col, 1.1 * col, smoothstep (0.6, 0.9, ro.y / grndScl +\n       0.2 * sin (32. * atan (ro.z, - ro.x))));\n  } else {\n    col *= 1. - 0.3 * (1. - 0.7 * smoothstep (0.2, 0.4, dstGrnd / (3. * grndScl))) *\n       Fbm2 (4. * ro.xz);\n  }\n  return col;\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp, fcBlk;\n  vec2 qBlk;\n  float dMin, dn, df;\n  dMin = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    fcBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return vec4 (dMin, fcBlk);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, db4;\n  vec3 ror, col, vn, roo, rdo, g;\n  vec2 w, wd;\n  float dstObj, dstGrnd, sh, r, s, h, bsFac;\n  flHide = (idVu > 0);\n  roo = ro;\n  rdo = rd;\n  isSh = false;\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstGrnd, dstObj) < dstFar) {\n    if (dstGrnd < dstObj) {\n      ro += dstGrnd * rd;\n      vn = GrndNf (ro);\n      s = 1. - smoothstep (0.3, 0.6, dstGrnd / (3. * grndScl));\n      h = s * Fbm2 (ro.xz);\n      vn = VaryNf (2. * ro, vn, 2. * s * (1. - 0.8 * smoothstep (0.5, 0.7, h)));\n      col = GrndCol (ro, vn, dstGrnd);\n      col *= 1. + 0.2 * smoothstep (0.5, 0.7, h);\n      w = smoothstep (0.05, 0.1, mod (ro.xz, 5.));\n      r = length (ro.xz);\n      col *= 1. - 0.15 * (1. - w.x * w.y) * (1. - smoothstep (0.2, 0.3, r / (3. * grndScl)));\n      col = mix (vec3 (1., 1., 0.), col, smoothstep (0.05, 0.1, abs (r - 2.)));\n      col = mix (vec3 (1., 1., 0.), col, smoothstep (0.2, 0.3, r));\n      w = flPos.xz - ro.xz;\n      wd = (length (flPos.xz) > 0.) ? 0.5 * normalize (flPos.xz) : vec2 (0.);\n      col = mix (vec3 (1., 0.2, 0.2), col, 0.3 + 0.7 * smoothstep (0.15, 0.17, length (w + wd)));\n      col = mix (vec3 (0.2, 1., 0.2), col, 0.3 + 0.7 * smoothstep (0.15, 0.17, length (w - wd)));\n      col4 = vec4 (col, 0.05);\n    } else {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      if (idObj == idBase) {\n        col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.8 + 0.2 * smoothstep (0., 0.02,\n           abs (length (qHit.xz) - 1.1) - 0.1));\n      } else if (idObj == idLeg) {\n        col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.8 + 0.2 * sin (8. * pi * qHit.x));\n      } else if (idObj == idAxl) {\n        col4 = vec4 (0.8, 1., 0.8, 0.2) * (1. - 0.2 * sin (4. * atan (qHit.z, qHit.x)));\n      } else if (idObj == idProp) {\n        col4 = vec4 (1., 0.9, 0.8, 0.2) * (0.9 + 0.1 * sin (8. * pi * length (qHit.xz)));\n      } else if (idObj == idCamV) {\n        col4 = vec4 (0.1, 0.1, 0.1, 0.2);\n      } else if (idObj == idCamH) {\n        col4 = mix (vec4 (0.1, 0.1, 0.1, 0.2), vec4 (0.6 + 0.4 * sin (4. * pi * tCur), 0., 0., -1.),\n           step (length (qHit.xy), 0.1));\n      }\n    }\n    if (col4.a >= 0.) {\n      flHide = false;\n      isSh = true;\n      sh = ObjSShadow (ro, sunDir);\n      col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    } else col = col4.rgb * (0.5 - 0.5 * dot (vn, rd));\n  } else {\n    col = vec3 (0.3, 0.2, 0.1) + StarPat (rd, 8.) +\n       vec3 (0.1, 0.1, 1.) * step (1. - dot (rd, normalize (vec3 (0., 0.12, 1.))), 1e-5); \n  }\n  if (idVu == 0) {\n    roo -= flPos + vec3 (0., 2.8, 0.);\n    s = length (roo) / 15.;\n    bsFac = (s >= 1.) ? 1. : 0.1 + 0.9 * s;\n    roo = roo * vuMat;\n    rdo = rdo * vuMat;\n    db4 = BlkHit (roo, rdo, bsFac * vec3 (1.6, 0.25, 0.05));\n    if (db4.x < min (dstObj, dstFar) && db4.w < 0.) {\n      w = (roo + db4.x * rdo).xy / bsFac + vec2 (-0.4, 0.);\n      g = floor (vec3 (10. * flPos.xz, 10. * flPos.y) + 0.5);\n      wd = 0.9 * vec2 (1., 0.3);\n      s = ShowInt (w - vec2 (-1., -0.1), wd, 5., g.x) +\n          ShowInt (w - vec2 (0., -0.1), wd, 5., g.y) +\n          ShowInt (w - vec2 (0.9, -0.1), wd, 5., g.z);\n      col = mix (col, vec3 (0.2, 1., 1.), s);\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nmat3 FlMat (float flTilt)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (flTilt, flDir);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n         mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y , 0., ca.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat;\n  vec3 ro, rd, vd, col, wgBxC;\n  vec2 canvas, uv, us, mSize, ut[2], mMid[2], um, cnPos;\n  float zmFac, az, el, asp, aspW, flTilt, s;\n  int wgSel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  mPtr.xyz = stDat.xyz;\n  wgSel = int (stDat.w);\n  az = 0.;\n  el = 0.;\n  if (wgSel == 0 && mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = 0.5 * pi * mPtr.y;\n  }\n  stDat = Loadv4 (1);\n  flDir = stDat.x;\n  flTilt = stDat.y;\n  flMat = FlMat (flTilt);\n  cnPos = stDat.zw;\n  dstFar = 1000.;\n  stDat = Loadv4 (2);\n  flPos = stDat.xyz;\n  stDat = Loadv4 (4);\n  pRot = stDat.x;\n  pPitch = stDat.y;\n  aspW = 1.3;\n  mSize = 0.3 * vec2 (aspW, 1.);\n  mMid[0] = vec2 (- (asp - mSize.x), 1. - mSize.y);\n  mMid[1] = vec2 (asp - mSize.x, 1. - mSize.y);\n  ut[0] = abs (uv - mMid[0]) - mSize;\n  ut[1] = abs (uv - mMid[1]) - mSize;\n  idVu = 0;\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      idVu = k + 1;\n      break;\n    }\n  }\n  grndScl = 50.;\n  heliScl = 0.3;\n  SetConf ();\n  if (idVu == 0) {\n    ro = vec3 (0., 8., -15.);\n    vd = flPos - ro;\n    zmFac = 1. + 0.12 * length (vd);\n    vuMat = StdVuMat (el + asin (vd.y / length (vd)), az + atan (vd.x, vd.z));\n    rd = vuMat * normalize (vec3 (uv, zmFac)); \n  } else if (idVu == 1) {\n    ro = flPos + vec3 (0., 3., 0.);\n    zmFac = 0.6;\n    rd = normalize (vec3 (uv, zmFac)) * flMat;\n  } else if (idVu == 2) {\n    ro = flPos + vec3 (0., 1.5, 0.);\n    zmFac = 0.6;\n    rd = normalize (vec3 (uv, zmFac));\n    rd.yz = Rot2D (rd.yz, 0.5 * pi);\n    rd.xz = Rot2D (rd.xz, flDir);\n  }\n  sunDir = normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 4.)\n       col = vec3 (0.2, 0.7, 0.7);\n  }\n  if (idVu == 0) {\n    wgBxC = vec3 (0.41 * asp, -0.33, 0.13);\n    us = 0.5 * uv - wgBxC.xy;\n    s = (length (us) - wgBxC.z - 0.005) * canvas.y;\n    col = mix (vec3 (0.9, 0.9, 1.), col, smoothstep (0., 0.5, abs (s) - 1.));\n    if (s < 0.) {\n      if (Minv2 (abs (us)) * canvas.y < 1.) col = vec3 (0.9, 0.9, 1.);\n      col = mix (vec3 (0.8, 1., 0.8), col, smoothstep (0., 0.3,\n         abs (length (us - cnPos) * canvas.y - 10.) - 2.5));\n    }\n    if (wgSel == 0 && mPtr.z > 0. && Maxv2 (abs (uv)) < 0.04 && Minv2 (abs (uv)) < 0.003)\n       col = mix (col, vec3 (0.5, 1., 1.), 0.5);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat DigSeg (vec2 q)\n{\n  q = 1. - smoothstep (vec2 (0.), vec2 (0.04, 0.07), abs (q) - vec2 (0.13, 0.5));\n  return q.x * q.y;\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  vec2 vp, vm, vo;\n  float d;\n  int k, kk;\n  vp = vec2 (0.5, 0.5);\n  vm = vec2 (-0.5, 0.5);\n  vo = vp - vm;\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log2 (val) / log2 (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2e (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 6; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.96875);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Fly The Mars Copter\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float txRow = 32.;\nconst float pi = 3.14159;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 flPos, flVel, wgBxC;\n  vec2 canvas, iFrag, ud, cnPos;\n  float tCur, tCurP, tDown, flDir, flDirN, flTilt, pRot, pPitch, dt, aLim,\n     asp, s, htFly;\n  int pxId, wgSel;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 5) discard;\n  asp = canvas.x / canvas.y;\n  wgSel = 0;\n  tDown = 1.;\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    flDir = 0.5 * pi;\n    flTilt = 0.;\n    cnPos = vec2 (0.);\n    flPos = vec3 (0.);\n    flVel = vec3 (0.);\n    pRot = 0.;\n    pPitch = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    flDir = stDat.x;\n    flTilt = stDat.y;\n    cnPos = stDat.zw;\n    stDat = Loadv4 (2);\n    flPos = stDat.xyz;\n    stDat = Loadv4 (3);\n    flVel = stDat.xyz;\n    stDat = Loadv4 (4);\n    pRot = stDat.x;\n    pPitch = stDat.y;\n    tCurP = stDat.z;\n    tDown = stDat.w;\n    aLim = 0.15 * pi;\n    wgBxC = vec3 (0.41 * asp, -0.33, 0.13);\n    if (mPtr.z > 0.) {\n      ud = mPtr.xy * vec2 (asp, 1.) - wgBxC.xy;\n      if (wgSel == 1) {\n        tDown = - tCur;\n        cnPos = ud;\n        s = length (cnPos);\n        if (s > 0.) cnPos = min (s, 0.135) * cnPos / s;\n        s = length (cnPos);\n        flDirN = (s > 0.01) ? 0.5 * pi + atan (- cnPos.y, - cnPos.x) : flDir;\n        flDirN -= 2. * pi * sign (flDirN - flDir) * step (pi, abs (flDirN - flDir));\n        flTilt = (s > 0.03) ? min (4. * (s - 0.02), 1.) * aLim : 0.;\n      } else if (mPtrP.z <= 0. && length (ud) < wgBxC.z + 0.03) wgSel = 1;\n    } else {\n      flTilt *= 0.97;\n      cnPos *= 0.97;\n      wgSel = 0;\n    }\n    dt = tCur - tCurP;\n    htFly = 5.;\n    if (tDown < 0.) {\n      flPos.y = min (flPos.y + 0.02 * (1. - smoothstep (htFly - 0.3, htFly, flPos.y)), htFly);\n      if (wgSel == 1 && flPos.y > 1.) flDir = mix (flDir, flDirN, 0.03);\n      flVel.xz = 6. * flTilt * Rot2D (vec2 (0., 1.), flDir);\n      if (tCur + tDown > 4.) tDown = 1.;\n    } else {\n      flPos.y = max (flPos.y - 0.02 * smoothstep (0., 0.3, flPos.y), 0.);\n    }\n    flTilt *= smoothstep (1., 2., flPos.y);\n    flVel *= smoothstep (1., 2., flPos.y);\n    if (length (flPos.xz) < 30. || dot (flPos.xz, flVel.xz) < 0.) flPos.xz += dt * flVel.xz;\n    pRot += ((flPos.y > 0.05) ? 3. : 0.7) * pi * dt;\n    pPitch = 0.05 * pi * (0.5 + 1.5 * smoothstep (0.03, 0.05, flPos.y));\n  }\n  if      (pxId == 0) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 1) stDat = vec4 (flDir, flTilt, cnPos);\n  else if (pxId == 2) stDat = vec4 (flPos, 0.);\n  else if (pxId == 3) stDat = vec4 (flVel, 0.);\n  else if (pxId == 4) stDat = vec4 (pRot, pPitch, tCur, tDown);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}