{
    "Shader": {
        "info": {
            "date": "1511736405",
            "description": "Stitches 4 images together as if they are a single texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtXfW8",
            "likes": 4,
            "name": "image stitcher",
            "published": 3,
            "tags": [
                "image"
            ],
            "usePreview": 0,
            "username": "battlebottle",
            "viewed": 819
        },
        "renderpass": [
            {
                "code": "#define sampleImage(sampler,uv,col) uv1 = ((uv*frameRes + 0.5) - 0.5)/frameRes; col = texture(sampler, uv );\n\nconst float frameRes = 512.0;\n\nvec4 getCol(in vec2 uv) {\n    uv = vec2(mod(uv.x, 1.0), mod(uv.y, 1.0));\n    vec2 pp = uv * frameRes * 2.0;\n    float uv_x, uv_y = 0.0;\n    \n    vec4 col = vec4(0.5,0.0,0.0,1.0);\n    vec2 uv1 = vec2(0.);\n    \n    if (pp.x > 0.5 && pp.x <= (frameRes - 0.5)) {\n        uv_x = (pp.x ) / (frameRes);\n        \n        //0,0\n    \tif (pp.y > 0.5 && pp.y <= (frameRes - 0.5)) {\n        \tuv_y = (pp.y ) / (frameRes );\n            sampleImage(iChannel0, vec2(uv_x, uv_y), col)\n            //col = vec4(1.0,0.0,0.0,1.0);\n    \t}\n            \n    \telse if (pp.y > 0.5 + frameRes && pp.y <= (frameRes * 2.0 - 0.5)) {\n        \tuv_y = (pp.y - ( frameRes)) / (frameRes);\n            sampleImage(iChannel2, vec2(uv_x, uv_y), col);\n            \n    \t}\n    \t\n        //seams\n    \telse if (pp.y > frameRes * 2.0 - 0.5 || pp.y <= 0.5) {\n            float m = pp.y + 0.5;\n            if (pp.y > frameRes * 2.0 - 0.5) {\n                m = pp.y -frameRes * 2.0 + 0.5;\n            }\n            //m = smoothstep(0.0, 1.0, m);\n            vec4 col1 = vec4(0.0);\n            sampleImage(iChannel2, vec2(uv_x, 1.0), col1);\n            vec4 col2 = vec4(0.);\n            sampleImage(iChannel0, vec2(uv_x, 0.0), col2);\n            col = mix(col1, col2,m);\n            //col = vec4(1.0,0.0,0.0,1.0);\n    \t}\n        \n        \n        \n    \telse if (pp.y > frameRes - 0.5 && pp.y <= frameRes + 0.5) {\n            float m = pp.y - frameRes + 0.5;\n            //m = smoothstep(0.0, 1.0, m);\n            \n            vec4 col1 = vec4(0.);\n            sampleImage(iChannel2, vec2(uv_x, 0.0), col1);\n            vec4 col2 = vec4(0.);\n            sampleImage(iChannel0, vec2(uv_x, 1.0), col2);\n            col = mix(col2, col1, m);\n            //col = vec4(1.0,0.0,0.0,1.0);\n    \t}\n    \n    }\n    \n    \n    else if (pp.x > frameRes + 0.5 && pp.x <= (frameRes * 2.0 - 0.5)) {\n        uv_x = (pp.x - (frameRes)) / (frameRes);\n        \n        //1,0\n    \tif (pp.y > 0.5 && pp.y <= (frameRes - 0.5)) {\n        \tuv_y = (pp.y) / (frameRes);\n            sampleImage(iChannel1, vec2(uv_x, uv_y), col);\n    \t}\n        \n        //1,1\n    \telse if (pp.y > 0.5 + frameRes && pp.y <= (frameRes * 2.0 - 0.5)) {\n        \tuv_y = (pp.y - (frameRes)) / (frameRes );\n            sampleImage(iChannel3, vec2(uv_x, uv_y), col);\n    \t}\n    \n    \t//seams\n    \telse if (pp.y > frameRes * 2.0 - 0.5 || pp.y <= 0.5) {\n            float m = pp.y + 0.5;\n            if (pp.y > frameRes * 2.0 - 0.5) {\n                m = pp.y -frameRes * 2.0 + 0.5;\n            }\n            //m = smoothstep(0.0, 1.0, m);\n            \n            vec4 col1 = vec4(0.);\n            sampleImage(iChannel3, vec2(uv_x, 1.0), col1);\n            vec4 col2 = vec4(0.);\n            sampleImage(iChannel1, vec2(uv_x, 0.0), col2);\n            col = mix(col1, col2,m);\n    \t}\n        \n        \n        \n    \telse if (pp.y > frameRes - 0.5 && pp.y <= frameRes + 0.5) {\n            float m = pp.y - frameRes + 0.5;\n            //m = smoothstep(0.0, 1.0, m);\n            \n            vec4 col1  = vec4(0.);\n            sampleImage(iChannel3, vec2(uv_x, 0.0), col1);\n            vec4 col2  = vec4(0.);\n            sampleImage(iChannel1, vec2(uv_x, 1.0), col2);\n            col = mix(col2, col1, m);\n            //col = mix(col, vec4(1.0,0.0,0.0,1.0), 0.5);\n    \t}\n            \n    }\n    \n    \n    \n    //seams\n    \n    else if (pp.x > frameRes * 2.0 - 0.5 || pp.x <= 0.5) {\n    \n    \tif (pp.y > 0.5 && pp.y <= frameRes - 0.5) {\n            uv_y = (pp.y ) / (frameRes );\n    \t    float m = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            //m = smoothstep(0.0, 1.0, m);\n    \t    \n    \t    vec4 col1  = vec4(0.);\n            sampleImage(iChannel1, vec2(1.0, uv_y), col1);\n    \t    vec4 col2  = vec4(0.);\n            sampleImage(iChannel0, vec2(0.0, uv_y), col2);\n    \t    col = mix(col1, col2,m);\n    \t}\n        \n        \n    \telse if (pp.y > frameRes + 0.5 && pp.y <= frameRes * 2.0 - 0.5) {\n            uv_y = (pp.y - (frameRes)) / (frameRes );\n    \t    float m = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            //m = smoothstep(0.0, 1.0, m);\n    \t    \n    \t    vec4 col1 = vec4(0.);\n            sampleImage(iChannel3, vec2(1.0, uv_y), col1);\n    \t    vec4 col2 =  vec4(0.);\n            sampleImage(iChannel2, vec2(0.0, uv_y), col2);\n    \t    col = mix(col1, col2,m);\n    \t}\n        \n        //corner\n        \n        \n    \telse if (pp.y > frameRes * 2.0 - 0.5 || pp.y <= 0.5) {\n    \t    float m = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            //m = smoothstep(0.0, 1.0, m);\n            \n            float m_y = pp.y + 0.5;\n            if (pp.y > frameRes * 2.0 - 0.5) {\n    \t\t\tm_y = pp.y -frameRes * 2.0 + 0.5;\n            }\n    \t    float m_x = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m_x = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            //m_y = smoothstep(0.0, 1.0, m_y);\n            //m_x = smoothstep(0.0, 1.0, m_x);\n    \t    \n    \t    vec4 col1 = vec4(0.);\n            sampleImage(iChannel1, vec2(1.0, 0.0), col1);\n    \t    vec4 col2 = vec4(0.);\n            sampleImage(iChannel0, vec2(0.0, 0.0), col2);\n    \t    vec4 col3 = vec4(0.);\n            sampleImage(iChannel2, vec2(0.0, 1.0), col3);\n    \t    vec4 col4 = vec4(0.);\n            sampleImage(iChannel3, vec2(1.0, 1.0), col4);\n    \t    \n            vec4 col1x = mix(col1, col2, m_x);\n    \t    vec4 col2x = mix(col4, col3, m_x);\n            col = mix(col1x, col2x, 1.0 - m_y);\n    \t}\n        \n           \n    \telse if (pp.y > frameRes - 0.5 && pp.y <= frameRes + 0.5) {\n    \t    float m = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            \n            float m_y = pp.y - frameRes + 0.5;\n    \t    float m_x = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m_x = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            //m_y = smoothstep(0.0, 1.0, m_y);\n            //m_x = smoothstep(0.0, 1.0, m_x);\n    \t    \n    \t    vec4 col1 = vec4(0.);\n            sampleImage(iChannel3, vec2(1.0, 0.0), col1);\n    \t    vec4 col2 = vec4(0.);\n            sampleImage(iChannel2, vec2(0.0, 0.0), col2);\n    \t    vec4 col3 = vec4(0.);\n            sampleImage(iChannel0, vec2(0.0, 1.0), col3);\n    \t    vec4 col4 = vec4(0.);\n            sampleImage(iChannel1, vec2(1.0, 1.0), col4);\n    \t    \n            vec4 col1x = mix(col1, col2, m_x);\n    \t    vec4 col2x = mix(col4, col3, m_x);\n            col = mix(col1x, col2x, 1.0 - m_y);\n    \t}\n    }\n    \n    \n    \n    \n    \n    else if (pp.x > frameRes - 0.5 && pp.x <= frameRes + 0.5) {\n    \n    \tif (pp.y > 0.5 && pp.y <= frameRes - 0.5) {\n            uv_y = (pp.y ) / (frameRes );\n    \t    float m = pp.x - (frameRes + 0.5) + 1.0;\n            //m = smoothstep(0.0, 1.0, m);\n    \t    \n    \t    vec4 col1 = vec4(0.);\n            sampleImage(iChannel1, vec2(0.0, uv_y), col1);\n    \t    vec4 col2 = vec4(0.);\n            sampleImage(iChannel0, vec2(1.0, uv_y), col2);\n    \t    col = mix(col2, col1, m);\n    \t}\n        \n        \n    \telse if (pp.y > frameRes + 0.5 && pp.y <= frameRes * 2.0 - 0.5) {\n            uv_y = (pp.y - (frameRes)) / (frameRes );\n    \t    float m = pp.x - (frameRes + 0.5) + 1.0;\n            //m = smoothstep(0.0, 1.0, m);\n    \t    \n    \t    vec4 col1 = vec4(0.);\n            sampleImage(iChannel3, vec2(0.0, uv_y), col1);\n    \t    vec4 col2 = vec4(0.);\n            sampleImage(iChannel2, vec2(1.0, uv_y), col2);\n    \t    col = mix(col2, col1,m);\n    \t}\n        \n        \n        //corner\n        \n        \n    \telse if (pp.y > frameRes * 2.0 - 0.5 || pp.y <= 0.5) {\n    \t    float m = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            //m = smoothstep(0.0, 1.0, m);\n            \n            float m_y = pp.y + 0.5;\n            if (pp.y > frameRes * 2.0 - 0.5) {\n    \t\t\tm_y = pp.y -frameRes * 2.0 + 0.5;\n            }\n    \t    float m_x = pp.x - (frameRes + 0.5) + 1.0;\n            //m_x = smoothstep(0.0, 1.0, m_x);\n    \t    \n    \t    vec4 col1 = vec4(0.);\n            sampleImage(iChannel0, vec2(1.0, 0.0), col1);\n    \t    vec4 col2 = vec4(0.);\n            sampleImage(iChannel1, vec2(0.0, 0.0), col2);\n    \t    vec4 col3 = vec4(0.);\n            sampleImage(iChannel3, vec2(0.0, 1.0), col3);\n    \t    vec4 col4 = vec4(0.);\n            sampleImage(iChannel2, vec2(1.0, 1.0), col4);\n    \t    \n            vec4 col1x = mix(col1, col2, m_x);\n    \t    vec4 col2x = mix(col4, col3, m_x);\n            col = mix(col1x, col2x, 1.0 - m_y);\n    \t}\n        \n           \n    \telse if (pp.y > frameRes - 0.5 && pp.y <= frameRes + 0.5) {\n    \t    float m = pp.x + 0.5;\n    \t    if (pp.x > frameRes * 2.0 - 0.5) {\n    \t        m = pp.x -frameRes * 2.0 + 0.5;\n    \t    }\n            \n            //m = smoothstep(0.0, 1.0, m);\n            float m_y = pp.y - frameRes + 0.5;\n    \t    float m_x = pp.x - (frameRes + 0.5) + 1.0;\n            \n            //m_x = smoothstep(0.0, 1.0, m_x);\n            //m_y = smoothstep(0.0, 1.0, m_y);\n    \t    \n    \t    vec4 col1 = vec4(0.);\n            sampleImage(iChannel2, vec2(1.0, 0.0), col1);\n    \t    vec4 col2 = vec4(0.);\n            sampleImage(iChannel3, vec2(0.0, 0.0), col2);\n    \t    vec4 col3 = vec4(0.);\n            sampleImage(iChannel1, vec2(0.0, 1.0), col3);\n    \t    vec4 col4 = vec4(0.);\n            sampleImage(iChannel0, vec2(1.0, 1.0), col4);\n    \t    \n            vec4 col1x = mix(col1, col2, m_x);\n    \t    vec4 col2x = mix(col4, col3, m_x);\n            col = mix(col1x, col2x, 1.0 - m_y);\n    \t}\n    }\n    \n    \n    \n    return col;\n    \n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nconst bool fpsBar = false;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float zoom = (iTime - 12.0) /3.0 + 2.0;\n    \n    \n    \n    \n    zoom = sin(zoom) * 4.0 + 2.0;\n    \n    float rotation = iTime / 5.0;\n    vec2 origin = vec2(0.5, 0.5);\n    \n    \n    \n    if (iMouse.z > 0.0) {\n     \tzoom = iMouse.x / 100.0;   \n        rotation = iMouse.y / 100.0;\n    }\n    \n    float scale = 1.0 / pow(2.0, zoom);\n    \n    \n    \n    \tfragColor = getCol(origin + rotate((uv - 0.5) * scale * vec2(aspectRatio, 1.0), rotation));\n    \tfragColor += vec4(vec3(min(0.0, iTime / 2.0 - 1.0)), 1.0);\n        \n        if (uv.x> 0.98 && fpsBar) {\n       \t\tfragColor = vec4(1.0,1.0,0.0,1.0);\n            \n            float fps60 = iFrameRate / 60.0;\n            \n            if (uv.y < fps60) {\n             \tfragColor = vec4(1.0,0.0,0.0,1.0);   \n            }\n        }\n    \n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}