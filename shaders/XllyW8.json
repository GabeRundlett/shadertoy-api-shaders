{
    "Shader": {
        "info": {
            "date": "1504599370",
            "description": "Work in progress, quite slow atm",
            "flags": 0,
            "hasliked": 0,
            "id": "XllyW8",
            "likes": 14,
            "name": "Virtual Fire",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "fire"
            ],
            "usePreview": 0,
            "username": "Karambit",
            "viewed": 1784
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n#define Scale vec3(.8, .8, .8)\n#define K 19.19\n\nbool Postprocess = false;\n\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * Scale);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nvec3 noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(p+vec3(0,0,0)), \n                        hash(p+vec3(1,0,0)),f.x),\n                   mix( hash(p+vec3(0,1,0)), \n                        hash(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(p+vec3(0,0,1)), \n                        hash(p+vec3(1,0,1)),f.x),\n                   mix( hash(p+vec3(0,1,1)), \n                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\nvec3 fbm(in vec3 q)\n{\n            vec3 f  = 0.5000*noise( q ); q = m*q*2.01;\n            f += 0.2500*noise( q ); q = m*q*2.02;\n            f += 0.1250*noise( q ); q = m*q*2.03;\n            f += 0.0625*noise( q ); q = m*q*2.04; \n            f += 0.03125*noise( q ); q = m*q*2.05; \n            f += 0.015625*noise( q ); q = m*q*2.06; \n            f += 0.0078125*noise( q ); q = m*q*2.07; \n            f += 0.00390625*noise( q ); q = m*q*2.08;  \n    return vec3(f);\n}\n\nfloat smin( float a, float b )\n{\n\tfloat k = .1;\n    float h = clamp( .5+.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat sdSphere(in vec3 p, in float r)\n{\n    return length(p) - r;\n}\n\nvec3 Fire(in vec3 q)\n{\n    vec3 s = vec3(q) - vec3(0.0,iTime*1.8, 0.0);\n    s = fbm(s);\n    return vec3(max((s.x)*0.9, 0.5*abs(q.x)), smin(s.y, q.y), q.z);\n}\n\nfloat map(in vec3 p)\n{\n    vec3 q = Fire(p);\n    \n    float sphere = sdSphere(q, 1.0);\n    \n    return sphere;\n}\n\nfloat intersect(in vec3 ro, in vec3 rd)\n{\n    float maxD = 5.0;\n    int iterations = 4;\n    float h = 1.0;\n    float t = 0.0;\n    \n    for(int i = 0; i < iterations; i++)\n    {\n        if(h < 0.001 || t > maxD)\n            break;\n        h = map(ro+rd*t);\n        t += h;\n    }\n    if( t>maxD ) t=-1.0;\n    return t;\n    \n}\n\nvec3 PostProcess(in vec2 fc)\n{\n    vec3 oColor = vec3(0.);\n    \n    int vertical = int(mod(fc.x, 6.0));\n    if(vertical < 2) oColor.x = 1.0;\n    else if(vertical >= 2 && vertical < 4) oColor.y = 1.0;\n    else oColor.z = 1.0;\n        \n    \n    float horizontal = (mod(fc.y, 6.0));\n    oColor *= vec3(horizontal/6.0);\n    \n    return oColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //uv=floor(uv*iResolution.xy/6.0)*6.0;\n    //uv=uv/iResolution.xy;\n    \n    \n    vec3 ro = vec3(0.0, 0.85, 2.15);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    float t = 0.0;\n    \n    \n    t = intersect(ro, rd);\n    vec3 pos = ro+rd*t;\n    vec3 fire = vec3(0.0);\n    \n    if(t > 0.0)\n    {\n        vec3 pos = ro+rd*t;\n    \tfire = 1.0 - vec3(t*t-1.0);\n        fire = vec3((fire.x+1.0)*1.5-pos.y, (fire.x+0.8)*1.3-pos.y, (1.9+fire.x*2.0) * smoothstep(-0.1, 0.5, pos.y) );\n    }\n    \n    vec4 Output;\n    \n    if(Postprocess)\n       Output = vec4(PostProcess(fragCoord.xy), 1.0) * vec4(fire*2.0,1.0);\n    else\n       Output = vec4(fire,1.0);\n    \n\tfragColor = Output;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}