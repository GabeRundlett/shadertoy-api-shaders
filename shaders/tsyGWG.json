{
    "Shader": {
        "info": {
            "date": "1570826227",
            "description": "The simplest shader with nonlinear-wave based fluids.\n[url]javascript: H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<32;i++)E.P.apply(this,A);};if(!H)close();[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "tsyGWG",
            "likes": 19,
            "name": "Wave fluid dynamics",
            "published": 3,
            "tags": [
                "waves",
                "simulation",
                "fluid",
                "particles",
                "physics",
                "droplets",
                "nonlinear",
                "classicalfieldtheory",
                "hydrodynamics"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1168
        },
        "renderpass": [
            {
                "code": "#define size iResolution.xy\n#define XX(a, pos) texture((a), (pos)/size)\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    vec4 f = XX(iChannel0, pos);\n    \n    vec2 red = vec2(1,0), green = vec2(-0.5,sqrt(3.)*0.5), blue = vec2(-0.5,-sqrt(3.)*0.5);\n   \n    vec3 RGB =  vec3(dot(f.xy, red),dot(f.xy, green),dot(f.xy, blue));\n    \n    // Output to screen\n    fragColor.xyz = RGB*RGB/4.;\n    fragColor.w = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define size iResolution.xy\n#define XX(a, pos) texture((a), (pos)/size)\n#define dx 1.\n#define dt 0.35\n\nvec4 Laplacian(sampler2D textr, vec2 pos)\n{\n    vec4 a = XX(textr, pos);\n\tvec4 x0 = XX(textr, pos + vec2(-1,0));\n    vec4 x1 = XX(textr, pos + vec2(1,0));\n    vec4 y0 = XX(textr, pos + vec2(0,1));\n    vec4 y1 = XX(textr, pos + vec2(0,-1));\n \n\treturn (x0+x1+y0+y1-4.f*a)/(dx*dx);\n}\n                 \nfloat potential(vec2 f, vec2 pos)\n{\n    float F2 = dot(f,f);\n\tfloat gravity =0.4*(pos.y - 500.)/1000.;\n    float incompressib = 1.4;\n    float density = 2.;\n    return 0.9*((1.+gravity)*F2 + 0.001*F2*F2 -2.*exp(-incompressib*pow(sqrt(F2) - density,2.0)));\n}\n\n#define eps 0.005\nvec2 num_deriv(vec2 f, vec2 pos)\n{\n    return -vec2(potential(f+vec2(eps,0.), pos) - potential(f-vec2(eps,0.), pos), \n                potential(f+vec2(0.,eps), pos) - potential(f-vec2(0.,eps), pos))/(2.*eps);\n}\n\nfloat gauss(float x, float r)\n{\n    return exp(-pow(x/r,2.));\n}\n                 \nvoid mainImage( out vec4 f, in vec2 pos )\n{\n    f = XX(iChannel0, pos);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        f += 1.*gauss(length(pos-iMouse.xy),40.)*vec4(1,0,0,-1); //antifluid\n    vec4 LAP = Laplacian(iChannel0, pos);\n    \n    //diffusion pass\n    f.xy += LAP.xy*0.0005; //pretty useful, smooths the liquid and makes it more stable\n    \n    //velocity verlet integration of each point of the field \n    //a complex nonlinear wave equation\n    f.zw += dt*(LAP.xy + num_deriv(f.xy, pos));\n    f.xy += dt*f.zw;\n    \n    \n    \n    \n    //upper border - destroys noise\n    f *= vec4(clamp((1.-pos.y/size.y)/0.001, 0., 1.));\n    \n    if(iFrame < 1)\n    {\n        f = 3.*gauss(length(pos-size*0.3),70.)*vec4(1,0,0,-1.1)+\n            3.*gauss(length(pos-size*0.35),70.)*vec4(1,0,0,-1.1);;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}