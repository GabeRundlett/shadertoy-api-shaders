{
    "Shader": {
        "info": {
            "date": "1647680113",
            "description": "hhh",
            "flags": 0,
            "hasliked": 0,
            "id": "NllcRM",
            "likes": 2,
            "name": "cubemap=_=",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "fl0a1e",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.1415926\n#define AA 2\n#define INV_GAMMA 0.454545\n#define FOCAL  3.5f \n#define SENSITIVITY 5.\n\n// p is the point in 3D world\nfloat sdSphere(in vec3 p, in float r){\n    return length(p)-r;\n}\n\n\n// return minimum distance to surface\nfloat map(in vec3 pos){\n    float res = sdSphere( pos-vec3(0.0, 0.0, 0.0), 0.1);\n    return res;\n}\n\n\n\n// return distance to surface of each ray\nfloat raycast(in vec3 cameraPos, in vec3 rayDir) {\n    float res = -1.0;\n    \n    // minimum and maximum distance ray traveled\n    float minDist =1.0;\n    float maxDist = 30.0;\n    \n    // raymarching\n    float dist = minDist;\n    for(int i = 0; i < 40 && dist < maxDist; i++) {   // \"i\" means the frequency of sphere tracking.\n    \n        float temp = map(cameraPos + rayDir * dist);\n        if( abs(temp) < 0.0001 ) {    // if close enough to the surface\n            res = dist;\n            break;\n        }\n        dist += temp; // Sphere Tracking, so we need to add minimum distance to Surface for speed up function.\n    }\n    return res;\n}\n\n\n\nvec3 calcNormal(in vec3 pos){\n    vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e);\n      \n    }\n    return normalize(n);\n}\n\n\nvec3 render(in vec3 cameraPos, in vec3 rayDir, in vec2 uv, in vec3 col) {\n    // raycast scene(raymarching!)\n    float res = raycast(cameraPos, rayDir);\n    \n    // render sphere\n    if(res > 0.){\n        vec3 pos = cameraPos + rayDir * res;\n        vec3 nor = calcNormal(pos);    // normal\n        \n        {\n        // texture    \n        vec2 polarUV = vec2(atan(pos.x*800., pos.z*450.)/PI, 4.*pos.y);\n        vec3 t = texture(iChannel0, nor).rgb;\n        \n        col = t;     \n        }\n        \n    }\n    return col;\n}\n\n\nmat3 setCamera(in vec3 ro, in vec3 ta, in float cr) {\n    vec3 cw = normalize(ta - ro); // the direction our camera watched\n    // calculate the x&y-axis centered on camera.\n    vec3 cu= normalize( cross(cw,vec3(sin(cr),cos(cr),0.0) ) );\n    vec3 cv=          ( cross( cu, cw ) );  \n\n    return mat3(cu, cv, cw);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot;\n\n    // set camera\n    vec3 cameraPos = vec3(sin(SENSITIVITY * iMouse.x/iResolution.x), 4.*sin(SENSITIVITY * iMouse.y/iResolution.y) , 5.* cos(SENSITIVITY * iMouse.x/iResolution.x));\n    vec3 cameraOrit = vec3(0., 0., 0.);\n    mat3 camera = setCamera(cameraPos, cameraOrit, 0.);\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    \n    // ray direction\n    vec3 rayDir = camera * normalize( vec3(uv,FOCAL) );\n    \n    vec3 col;\n    \n    // background\n    col = texture(iChannel0, normalize(uv.x * camera[0] + uv.y * camera[1] + rayDir)).xyz;\n        \n    // render our world\n    col = render(cameraPos, rayDir, uv, col);\n\n    tot += col;\n\n    // Output to screen\n    fragColor = vec4(tot,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}