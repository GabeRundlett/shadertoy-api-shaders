{
    "Shader": {
        "info": {
            "date": "1505397201",
            "description": "Yo, another release from the Kali set universe - and a ponderous day in office.\nEnjoy ;-) ",
            "flags": 0,
            "hasliked": 0,
            "id": "XlXcRj",
            "likes": 32,
            "name": "Wilhelm Kali Röntgen",
            "published": 3,
            "tags": [
                "fractal",
                "kali",
                "xray"
            ],
            "usePreview": 0,
            "username": "bergi",
            "viewed": 3072
        },
        "renderpass": [
            {
                "code": "/** Wilhelm Kali Röntgen\n\thttps://www.shadertoy.com/view/XlXcRj\n\n\t(cc) 2017, stefan berke\n\t\n\tGreetingx to all ya shadertoya\n*/\n\nstruct Kali {\n\tvec3 col;\n    float d;\n    float fold;\n};\n\nKali kali_set(vec3 pos, vec3 param) \n{\n    float d = 10000.;\n    vec3 col = vec3(0.);\n    vec4 p = vec4(pos, 1.);\n    for (int i=0; i<17; ++i)\n    {\n        p = abs(p) / dot(p.xyz, p.xyz);\n        //p = (1.+.4*sin(iTime/53.))*abs(p.zyxw) / dot(p.xyz, p.xyz);\n        \n        d = min(d, (length(p.xy-vec2(0,.01))-.03) / p.w);\n        col = max(col, p.xyz);\n        p.xyz -= param;\n    }\n    mat3 colmat = mat3(\n        1,0.4,0.,\n        0.3,1,0.0,\n        -.1,0.03*col.y,1);\n    return Kali(colmat*col, d, p.w);\n}\n\n\nvec3 kali_param;\nvec3 render_scene(in vec3 ro, in vec3 rd)\n{  \n    vec3 col = vec3(0.);\n    float sum_samples = 0.;\n    \n    float t = 0.;\n    const float max_t = 0.03;\n    for (int i=0; i<100; ++i)\n    {\n        if (t > max_t)\n            break;\n        float nt = t / max_t;\n    \tvec3 pos = ro + t * rd;\n        Kali kali = kali_set(pos, kali_param);\n        //Kali kali2 = kali_set(kali.col, param);\n        \n        float sampling = max(0., nt*(1.-nt)-dot(col,col)*.001);\n        float surf = smoothstep(.0001, .0, kali.d);\n        \n        col += sampling * surf * (kali.col+vec3(2.))/3.;\n        sum_samples += sampling;\n        \n        float fwd = pow(kali.d, 1.1);\n        fwd = min(fwd, 0.0003);\n        fwd = min(fwd, .9/kali.fold);\n        fwd = max(fwd, 0.00001);\n        t += fwd;\n    }\n    return col / sum_samples;\n}\n\nstruct PathParam {\n\tvec3 freq, amp, offs, param;\n};\n\nconst PathParam path_f1 = PathParam(vec3(3.,  3.,  1.9),vec3(0.11,  0.04,  0.03), vec3(.0,  0.0,  .213), vec3(.706));\nconst PathParam path_f2 = PathParam(vec3(3.,  5.,  3.),\tvec3(0.13,  0.05, 0.18), vec3(.0,  0.198,  .204), vec3(.7,.7,.69));\nconst PathParam path_f3 = PathParam(vec3(3.,  5.,  3.),\tvec3(-0.13,  0.03, 0.11), vec3(.012,  0.204,  .245), vec3(.8,.6,.69));\nconst PathParam path_f4 = PathParam(vec3(3.,  4.,  5.),\tvec3(0.01,  0.06, -0.04), vec3(0.02,  0.23,  .34), vec3(.5,.7,.5));\nconst PathParam path_f5 = PathParam(vec3(4.,  5.,  4.),\tvec3(0.09,  0.019, 0.08), vec3(.021,  0.305,  .5095), vec3(.7));\n//#define FIX_SCENE 4\n\nvec3 path_f(in float t, in PathParam p) {\n    t *= 2.;\n\treturn sin(t/p.freq+vec3(0., 1.56, 1.56)) * p.amp / 10. + p.offs;\n}\n\nvec3 path(in float t, in float offs) {\n    t *= .83;\n    t += 42.; // thumbnail image\n    float \n#ifdef FIX_SCENE\n        scene_t = float(FIX_SCENE) - 1.,\n#else        \n        scene_t = t / 14.1 + offs/30.,\n#endif        \n        scene = mod(scene_t, 5.),\n        blend = mod(scene_t, 1.);\n    \n    PathParam p1, p2;\n    if (scene < 1.)\n        p1 = path_f1, p2 = path_f2;\n    else if (scene < 2.)\n        p1 = path_f2, p2 = path_f3;\n    else if (scene < 3.)\n        p1 = path_f3, p2 = path_f4;\n    else if (scene < 4.)\n        p1 = path_f4, p2 = path_f5;\n    else if (scene < 5.)\n        p1 = path_f5, p2 = path_f1;\n    \n    t += offs;\n    blend = smoothstep(0.4, 0.6, blend);\n    vec3 p = mix(path_f(t, p1), path_f(t, p2), blend);\n    kali_param = mix(p1.param, p2.param, blend);\n\treturn p;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y * 2.;\n    \n    vec3 look = path(iTime, 5.);\n    vec3 pos = path(iTime, 0.);\n    //vec3 dir = normalize(vec3(uv, -1.+.4*length(uv)));\n    \n    vec3 fwd = normalize(look-pos);\n    vec3 rgt = normalize(vec3(fwd.z, (look.y-look.z)*.5, -fwd.x));\n    vec3 up = cross(fwd, rgt);\n    \n    vec3 dir = normalize(fwd * (1.-.5*length(uv)) + (uv.x*rgt + uv.y*up));\n    \n    vec3 col = render_scene(pos, dir);\n\tvec2 suv = fragCoord / iResolution.xy * 2. - 1.;\n\t\n    col *= 1.-pow(length(suv)*.66, 1.9);\n    \n    col = pow(col, vec3(1./1.6));\n\tfragColor = vec4(col,1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd)\n{\n\tvec3 pos = path(iTime, 0.);\n\tvec3 col = render_scene(pos, rd);\n\tvec2 suv = fragCoord / iResolution.xy * 2. - 1.;\n\tcol *= 1.-pow(length(suv)*.66, 1.9);\n\tcol = pow(col, vec3(1./1.6));\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}