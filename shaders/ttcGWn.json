{
    "Shader": {
        "info": {
            "date": "1576089652",
            "description": "Mouse.y tune intensity/glow.\nbottom: a small and large ultra-bright source.\ntop: integrating the glow due to Airy pattern in the sensor.\nGaussian part separable, 1/dÂ³ part computed low res via MIPmap.\nALAS, non-power2 MIPmap are so wrong :-(",
            "flags": 32,
            "hasliked": 0,
            "id": "ttcGWn",
            "likes": 5,
            "name": "fast glow-Airy filter - WIP",
            "published": 3,
            "tags": [
                "glow",
                "airy",
                "gpmipmap",
                "glowairy"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 667
        },
        "renderpass": [
            {
                "code": "// theory: see https://www.shadertoy.com/view/tlc3zM\n// see cubemap version (to avoid non-pow2 issues) https://www.shadertoy.com/view/tlc3WH\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = U.y > R.y/2. ? texelFetch(iChannel0, ivec2(U), 0)  // glowed image\n                     : texelFetch(iChannel1, ivec2(U), 0); // raw image\n\n    if ( U.y-.5 == floor(R.y/2.) ) O.g++;\n    U = mod(U-.5, 32.); O.b += 1./(U.x*U.y);  // display 32x32 grid\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- Source image\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n#if 1\n    O = max(2.*texture(iChannel0,U/R + .2*cos(iTime+vec2(0,11)) )-1., 0.);\n#else\n    U = ( 2.*U - R ) / R.y;\n               O =  1e1 * step( length(U) , .1     ) * vec4( 1, .5, .25, 0);\n    U.x += 1.; O += 1e2 * step( length(U) , 2./R.y ) * vec4( 1, .5, .25, 0);\n    U.x += .5; O += 1e1 * step( length(U) , 2./R.y ) * vec4( 1, .5, .25, 0);\n    \n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- Separable gaussian convolution at full resolution - part 1\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= R;\n    O = vec4(0);\n    float w, s = 0.;\n    for (float x = -8.; x <= 8.; x++) \n        s += w = gauss(x/4./G),\n        O += w * texture(iChannel0, U + vec2(x/R.x,0));\n    //O /= 17.; // s;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define gain ( length(iMouse.xy) < 20. ? 1. : log(10.*iMouse.y/R.y) )\n#define G 1.4\n\n#define gauss(x)    exp(-.5*((x)*(x)) )\n#define R          (iResolution.xy)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    U /= R;\n    O = vec4(0);\n    \n// --- Separable gaussian convolution at full resolution - part 2\n    float w, s = 0.;\n    for (float y = -8.; y <= 8.; y++) \n        s += w = gauss(y/4./G),\n        O += w * texture(iChannel0, U + vec2(0,y/R.y));\n    //O /= 17.; // s;\n    \n    // return;  // stop here if you just want the Gaussian part\n     \n// ---- Non separable part of the filter at low resolution\n    vec4 F = vec4(0);\n    s = 0.;\n#define dL 1.     // LOD offset to avoid MIPmap wrongness (OpenGL bugs)\n#define LOD 4.-dL // makes central tile fit the footprint already integrated above\n    float r =  8.*exp2(dL);\n  //float r = .5*R.y/exp2(LOD); \n    for (float y = -r; y <= r; y++) \n        for (float x = -r; x <= r; x++) {\n            float d = sqrt(x*x+y*y)*exp2(LOD)/4.;\n            if ( d > 0. ) // central low res tile already computed before\n                s += w = ( gauss(d/G) + 2.7/abs(d*d*d) )/2. * exp2(2.*LOD),\n                F += w * texture(iChannel1, U + vec2(x,y)*exp2(LOD)/R, LOD );\n        }\n    //F /= 17.*17. -1. ; // s;   \n    \n    O += gain*F;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}