{
    "Shader": {
        "info": {
            "date": "1584003334",
            "description": "VOl",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXyRn",
            "likes": 4,
            "name": "Volumetric Shadow",
            "published": 3,
            "tags": [
                "volume"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "struct ray{\n    vec3 ro,rd;\n};\nstruct triangle{\n    vec3 p0,p1,p2;\n};\nfloat intersect(ray r,triangle t,out vec3 normal){\n\tvec3 e0 = t.p1 - t.p0;\n\tvec3 e1 = t.p2 - t.p0;\n\n\tvec3 n = cross(e0, e1);\n\tfloat d2 = dot(n, n);\n\tvec3 m = n * (1.0 / d2);\n\tn = m * sqrt(d2);\n\tnormal=n*sign(-dot(r.rd,n));\n    \n\tfloat dot_nd = dot(n, r.rd);\n\tfloat d = dot(t.p0 - r.ro, n) / dot_nd;\n\tvec3 p = r.ro + d * r.rd;\n            \n\tvec3 b;\n\tb.y = dot(cross(p - t.p2, e1), m);\n\tb.z = dot(cross(e0, p - t.p0), m);\n\tb.x = 1.0 - (b.y + b.z);\n    if(b.x >= 0.0 && b.y >= 0.0 && b.z >= 0.0)return max(0.,d);\n    return 0.;\n}\nfloat gamma=1.8;\nconst float pi=4.*atan(1.);\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nfloat suc(ray r,float l,vec3 center,float radius){\n    vec3 o=r.ro-center;\n    \n    float a=dot(o,o);\n    float b=dot(r.rd,o);\n    float c=dot(r.rd,r.rd);\n    \n    float k=sqrt(a*c-b*b);\n    float w=b+c*l;\n    //integral =radius*atan(w/k)/k\n    float integ=radius*(atan(w,k)-atan(b,k))/k;\n    return integ;\n}\n\n\n\n\n\n\n\ntriangle t=triangle(vec3(0,1,0),vec3(2,1,2),vec3(0,3,0));\nvec3 light=vec3(2,0,0);\n\nfloat shadow(ray r){\n\tvec3 p0_=normalize(t.p0-light)*1000.+t.p0;\n    vec3 p1_=normalize(t.p1-light)*1000.+t.p1;\n    vec3 p2_=normalize(t.p2-light)*1000.+t.p2;\n    \n    vec3 n;\n    float l=0.;\n    float u;\n    u=intersect(r,triangle(t.p0,t.p1,p0_),n);if(u!=0.){if(l==0.){l=u;}l=min(l,u);}\n    u=intersect(r,triangle(t.p1,t.p2,p1_),n);if(u!=0.){if(l==0.){l=u;}l=min(l,u);}\n    u=intersect(r,triangle(t.p2,t.p0,p2_),n);if(u!=0.){if(l==0.){l=u;}l=min(l,u);}\n    \n    u=intersect(r,triangle(t.p1,p1_,p0_),n);if(u!=0.){if(l==0.){l=u;}l=min(l,u);}\n    u=intersect(r,triangle(t.p2,p2_,p1_),n);if(u!=0.){if(l==0.){l=u;}l=min(l,u);}\n    u=intersect(r,triangle(t.p0,p0_,p2_),n);if(u!=0.){if(l==0.){l=u;}l=min(l,u);}\n    \n    return l;\n}\n\n\nvec3 render(ray r){\n    vec3 res=vec3(0.);\n    vec3 n;\n    \n    ray q=r;\n   \t\n    \n    float l=shadow(r);\n    if(l==0.)l=100.;\n    \n    \n    float n1=suc(r,l,light,0.2);\n    r.ro+=r.rd*(l+0.001);\n    \n    \n    \n    l=shadow(r);\n    if(l==0.)l=100.;\n    \n    //n1+=suc(r,l,light,0.2);\n    r.ro+=r.rd*l;\n    \n    n1+=suc(r,1000.,light,0.2);\n    \n    n1=clamp(0.,1.,n1);\n    \n    \n    \n    \n    //only need hue but does not matter, its 60+fps anyway\n\tres+=pow(n1*hsv2rgb(vec3(iTime,1,1)),vec3(gamma));\n\tl=intersect(q,t,n);\n    \n    if(l!=0.){\n        vec3 p=r.ro+r.rd*l;\n        res+=max(0.,dot(n,-normalize(p-light)));\n    }\n    return vec3(res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //ray origin and dir\n    vec3 uv = vec3((fragCoord*2.-iResolution.xy)/iResolution.y,-5);\n    \n    \n    vec2 m=(iMouse.xy*2.-iResolution.xy)/iResolution.xy;\n    m*=vec2(1,0.5)*pi;\n\n    if(iMouse.z<=0.)m=vec2(-iTime/3.,0.05);\n    #ifdef eyes\n    vec3 ro=vec3(-0.2,0,-4);\n    if(uv.x<0.)ro.x=0.2;\n    uv.xy+=ro.xy*5.;\n    #else\n    vec3 ro=vec3(0,0,-6);\n    #endif\n    \n    ro.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    ro.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    uv.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    uv.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    \n    vec3 rd=normalize(uv-ro);\n   \t\n    ray r=ray(ro,rd);\n    \n    vec3 col=render(r);\n    \n    fragColor=vec4(pow(col,vec3(1./gamma)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}