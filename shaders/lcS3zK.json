{
    "Shader": {
        "info": {
            "date": "1704729616",
            "description": "yup.\nit's just a block of cheese.\n\n\n...with reflections & soft shadows!\n\nWASD to move, mouse/arrows to turn\n\nfun fact: this cheese was originally modeled in desmos 3D\nhttps://www.desmos.com/3d/d40d99d020",
            "flags": 48,
            "hasliked": 0,
            "id": "lcS3zK",
            "likes": 1,
            "name": "Cheese 3D",
            "published": 3,
            "tags": [
                "cheese"
            ],
            "usePreview": 0,
            "username": "aerowave",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "#define SHADOWS\n#define REFLECTIONS 3\n#define MAX_STEPS 512\n#define MAX_DIST 100.0\n\n// gets color for given object\nvec3 albedo(vec3 p, vec3 n, int ID) {\n    switch (ID) {\n        case 0:\n            return vec3(mod(floor(p.x) + floor(p.y) + floor(p.z), 2.0)) * 0.5 + 0.5;\n        case 1:\n            return vec3(1,0.75,0);\n    }\n}\n\n// idk how this one works, i stole it from iq >:)\nvec3 calcNormal(in vec3 pos) {\n    int a = 0;\n    vec2 e = vec2(1.0,-1.0)*EPSILON;\n    return normalize( e.xyy*sceneSDF(pos + e.xyy, a) + \n\t\t\t\t\t  e.yyx*sceneSDF(pos + e.yyx, a) + \n\t\t\t\t\t  e.yxy*sceneSDF(pos + e.yxy, a) + \n\t\t\t\t\t  e.xxx*sceneSDF(pos + e.xxx, a));\n}\n\nvec3 sunDir = normalize(vec3(0,1,0));\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // centered screen coords\n    vec2 q = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n    \n    // camera to world transform\n    vec3 cameraPos = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n    vec3 rayDirection = normalize(vec3(q, 0.) - vec3(0,0,0.8));\n    vec3 camDir = texelFetch(iChannel0, ivec2(3,0), 0).xyz;\n    rotate(rayDirection.yz, camDir.x * PI);\n    rotate(rayDirection.xz, camDir.z * PI);\n    vec3 rayPosition = cameraPos;\n    \n    vec3 color, objectCol;   \n    int steps, ID = 0;\n    float dist, rayLength = 0.0;\n\n    for (int i = 0; i < REFLECTIONS; i++) {\n        ID = 0;\n        dist, rayLength = 0.0;\n        // raymarch from camera\n        while (steps < MAX_STEPS) {\n\n            dist = abs(sceneSDF(rayPosition + rayDirection * rayLength, ID));\n            rayLength += dist;\n\n            if (dist < EPSILON) break; // hit\n            if (rayLength > MAX_DIST) {ID = -1; break;} // render distance\n\n            steps++;\n        }\n        if (dist > EPSILON) ID = -1; // nothing hit\n        rayPosition += rayDirection * (rayLength - EPSILON * 2.0);\n        \n        // this value would probably differ depending on materials\n        float reflectivity = 0.1;\n        \n        // if sky\n        if (ID == -1) {     \n            objectCol = mix(vec3(1,1,1), vec3(0,0.5,1), dot(rayDirection, vec3(0,1,0)) * 0.5 + 0.5);\n            if (i == 0) {\n                color = objectCol;\n            } else {\n                color = mix(color, objectCol, clamp(reflectivity/float(i+1),0.0,1.0));\n            }\n            break;\n        // if not sky\n        } else {\n            // get the surface normal\n            vec3 normal = calcNormal(rayPosition);\n\n            // apply material color\n            objectCol = albedo(rayPosition, rayDirection, ID);\n\n            // normal shading\n            objectCol *= dot(normal, sunDir) * 0.25 + 0.75;\n\n            // ao\n            objectCol *= 1.0 - sqrt(float(steps) / float(MAX_STEPS)) * 0.25;\n\n            #ifdef SHADOWS\n            // raymarch shadow\n            float directLight = 1.0;\n            float rayLength = 0.0;\n            while (steps < MAX_STEPS && rayLength < MAX_DIST) {\n                float dist = sceneSDF(rayPosition + sunDir * rayLength, ID);\n                if (dist < EPSILON) {\n                    directLight = 0.0;\n                    break;\n                }\n                directLight = min( directLight, 4.0 * dist / rayLength);\n                rayLength += dist;\n                steps++;\n            }\n            // apply shadow\n            objectCol *= directLight * 0.5 + 0.5;\n            #endif\n\n            // reflection (yes cheese is very shiny)\n            rayDirection = reflect(rayDirection, normalize(normal));\n            \n            // apply color\n            if (i == 0) {\n                color = objectCol;\n            } else {\n                color = mix(color, objectCol, clamp(reflectivity / float(i+1),0.0,1.0));\n            }\n        }\n    }\n\n\n    // DEBUG: show steps (brighter = bad)\n    //color = vec3(sqrt(float(steps) / (float(MAX_STEPS))));\n\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst int KEY_W = 87;\nconst int KEY_A = 65;\nconst int KEY_S = 83;\nconst int KEY_D = 68;\n\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nint isPressed(int key) {\n    return int(texelFetch(iChannel1, ivec2(key, 0), 0).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n    \n    // ignore unused pixels\n    if (fragCoord.y > 1.0) return;\n    \n    // get data from previous frame\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    /* POSITION */\n    if (fragCoord.x == 0.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(-1.0,1.75,2.0,0);\n        \n        vec3 velocity = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n\n        fragColor.xyz += velocity * iTimeDelta;\n        return;\n    }\n    \n    /* VELOCITY */\n    if (fragCoord.x == 1.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0,0,0,0);\n        \n        vec3 rotation = texelFetch(iChannel0, ivec2(3,0), 0).xyz;\n        vec3 acceleration = vec3(\n            sin(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - cos(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D)),\n            sin(PI * rotation.x) * float(isPressed(KEY_S) - isPressed(KEY_W)),\n            cos(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - sin(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D))\n        ) * 16.0;\n\n        fragColor.xyz += acceleration * iTimeDelta;\n        \n        // friction (thanks to https://iamralpht.github.io/equations/)\n        fragColor.xyz *= pow(0.001, iTimeDelta);\n        \n        return;\n    }\n    \n    /* PREVIOUS MOUSE STATE */\n    if (fragCoord.x == 2.5) {\n        fragColor = iMouse;\n        return;\n    }\n    \n    /* DIRECTION */\n    if (fragCoord.x == 3.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0.15,0,-0.15,0);\n        \n        // arrow keys\n        fragColor.x -= float(isPressed(KEY_UP) - isPressed(KEY_DOWN)) * iTimeDelta;\n        fragColor.z -= float(isPressed(KEY_RIGHT) - isPressed(KEY_LEFT)) * iTimeDelta;\n        \n        // mouse\n        vec4 prevMouse = texelFetch(iChannel0, ivec2(2,0), 0);\n        if (prevMouse.z > 0.0) {\n            // change the \"-=\" to \"+=\" to invert axes\n            fragColor.z -= (iMouse.x - prevMouse.x) / iResolution.x;\n            fragColor.x -= (iMouse.y - prevMouse.y) / iResolution.y;\n        }\n        \n        // clamp\n        if (fragColor.x > 0.5) fragColor.x = 0.5;\n        if (fragColor.x < -0.5) fragColor.x = -0.5;\n        \n        return;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float EPSILON = .0001;\nconst float PI = asin(1.0) * 2.0;\n\nvoid rotate(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nuvec3 murmurHash33(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 3 outputs, 3 inputs\nvec3 hash33(vec3 src) {\n    uvec3 h = murmurHash33(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nfloat sceneSDF(vec3 p, out int ID) {\n    // floor\n    ID = 0;\n    float dist = p.y;\n    \n    // cheese!!\n    if (dist > EPSILON) ID = 1;\n    float cheeseDist = max(distance(p, vec3(0,1,0)) - 1.0, abs(p.y - 1.0) - 0.5);\n    \n    for (int i = 0; i < 8; i++) {\n        vec3 holeLocation = hash33(vec3(i));\n        holeLocation = vec3(cos(holeLocation.x * 2.0 * PI), holeLocation.y + 0.5, sin(holeLocation.x * 2.0 * PI));\n        cheeseDist = max(cheeseDist, -distance(p, holeLocation) + 0.3);\n    }\n    \n    dist = min(dist, cheeseDist);\n\n    \n    if (dist > EPSILON) ID = -1;\n    return dist;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}