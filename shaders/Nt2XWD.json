{
    "Shader": {
        "info": {
            "date": "1627791720",
            "description": "What a trip!\n\n4K Video https://www.youtube.com/watch?v=Wf_WThID6tc",
            "flags": 32,
            "hasliked": 0,
            "id": "Nt2XWD",
            "likes": 12,
            "name": "Joshua Tree",
            "published": 3,
            "tags": [
                "3d",
                "fractal",
                "sdf",
                "kifs",
                "trippy",
                "buffer"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 441
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 r2d(float a){\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//from iq's sdf page\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n#define yheight 50.\n#define time iTime\nvec4 map(vec3 p, float z) {\n    //p.xz *= r2d(0.005);\n    vec3 o = p;\n    //p.xz *= r2d(0.004);\n    //p.zx *= r2d(mouse.x*10.);\n    //p.xy *= r2d(mouse.y*10.);\n    o = p;\n    p.xz *= r2d(0.01);\n    //p.y /= 0.02;\n    //p.y /= sin(time*0.51)*0.5+0.5;\n    float ts = 0.01;\n    //ts -= (sin(o.z*0.0001)*0.5+0.5)*0.001;\n    vec2 pq = floor(p.xz*ts*0.06);\n    p.xz *= r2d(-rand(pq)*200.);\n    //p.xz += (hash22(floor((p.xz*ts*0.5)))-0.5)*150.;\n    vec2 pi = floor((p.xz*ts)+0.); \n    float rp = rand(pi);\n    p.y -= (rp-0.5)*60.;\n    p.xz += (hash22(floor((p.xz*ts*0.25)))-0.5)*50.;\n    //p.xz *= r2d(rand(pq)*0.1);\n    //p.xz += (hash22(pi)-0.5)*80.;\n    //p.xz *= r2d(sin(p.z*0.1)*0.0002);\n    p.xz = (fract(p.xz*ts)-0.5)/ts;\n    //p.xz += sin(pi*903.232)*5;\n    //pi *= 1.;\n    \n    //p.xz *= r2d(sin(p.z*0.4));\n    //p.xz += (hash22(pi)-0.5)*80.;\n    p.xz *= r2d(rp*5590.);\n    p.xz *= r2d(p.y*rp*0.05);\n    //p.xz *= r2d(sin(sin(pi.x*1.682)+sin(pi.y*30.148)));\n    float pa = 0.5+rp*5.;\n    int ls = 2;\n    ls += int(rp*6.)-2;\n    ls = abs(ls)+1;\n    //ls = 2;\n    //p.xz += rp*5;\n    //p.y *= 1.5;\n    //p.z -= 1.5;\n    float r = time*0.02;\n    r += rp*2000.;\n    r = sin(r)*0.5+0.5;\n    r *= 0.1;\n    r += 0.12;\n    //r *= 1.56;\n    //r = sin(r);\n    p.y -= 9.;\n    p.y = clamp(p.y,0.,p.y+1.);\n    //p.y = clamp()\n    //p.y -= 9.;\n    //p.y = abs(p.y)-1.;\n    //p.y -= 1.;\n    //p.y = abs(p.y)-1.;\n    p.x = abs(p.x);\n    p.xy *= r2d(-r);\n    p.y = abs(p.y);\n    p.xy *= r2d(-r);\n    float cl = 4.6;\n    cl -= sin(rp*10.)*4.;\n    float tl = cl;\n    //\n    //p.xz *= r2d(sin(p.y*0.1)*02.9);\n    for (int l=0;l<ls;l++) {\n        p.xz *= r2d(sin(p.y*0.3)*0.5);\n        p.zx *= r2d((3.14*0.5)+rp);\n        p.y -= tl;\n        //tl *= 1.01;\n        p.x = abs(p.x);\n        p.xy *= r2d(-r);\n        p.y = abs(p.y);\n        p.xy *= r2d(-r);\n        //p.zx *= r2d(0.);\n    }\n    //p.z = abs(p.z);\n    //float d = length(p)-0.5;\n    float w = 0.7+rp;\n    //w -= rp/w;\n    float dm = 1.;\n    if (w < 0.2 || ls < 2 || cl < 1.7) {\n        w = -20.;\n        dm = 1.4;\n        //p *= 2000000.;\n        //cl = 0.;\n    }\n    //w += sin(p.y*0.5+time)*0.1+0.1;\n    //w *= 0.5;\n    //w = 0.9;\n    //w = w*w;\n    //w = 1.;\n    float d = sdCappedCylinder(p,w,cl)*0.5;\n    //d += 0.5;\n    float pp = d;\n    float fl = 20.;\n    float el = 5.;\n    //el += (sin(o.z*0.001)*0.5+0.5)*200;\n    d = min(d,length(o.y+el+fl)-fl)*dm;\n    d = max(d,-(length(vec2(o.x,o.y-yheight))-0.5));\n    //d = max(d,-(length(vec2(o.x,o.y-20.))-020.+(o.z-z)*0.2));\n    //o.z -= z;\n    //o.yz *= r2d(-0.4);\n    //d = max(d,-(length(o.y-50.)-(1.-(1./(time*0.1))))*50.);\n    //d = max(d,-(length(o.y-50.)-36.));\n    return vec4(pi,pp,d);\n}\n//vec2 vuv = inData.v_texcoord;\n#define MAXD 1920.\nvec2 RM(vec3 ro, vec3 rd, vec2 vuv) {\n    float dO = 0.;\n    float ii = 0.;\n    float it = 1.-(1./(time*0.005+1.02));\n    //float ad = map(ro+rd*dO).w;\n    int steps = 190;\n    \n    float vm = sin(vuv.y*3.14*1.2+6.4)*0.5+0.5;\n    steps = int(float(steps)*vm*1.3);\n    //steps = int(steps*(sin(vuv.y*3.14*1.5+5.5)*0.5+0.5)*.9);\n    for (int i=0;i<steps;i++) {\n        vec3 p = ro+rd*dO;\n        //p.xz *= r2d();\n        float dS = map(p,ro.z).w;\n        dO += dS*(1.-vm*0.5)*1.2;\n        //dO += dS/(1.-vuv.y*.6);\n        //dO += dS*it*1.8;\n        ii += 0.16;\n        if (dO > MAXD) {break;} \n        if (dS < 0.01) {\n            //ii += 10.;\n            //dO += 1.02;\n            break;\n        }\n    }\n    return vec2(dO,ii);\n}\n\n//vec3 RCam(vec3 ro, float r) {\n//    ro.xy *= r2d(r);\n//    rd.xy *= r2d(r);\n//    return vec4(ro,rd);\n//}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//void main(void)\n//{\n    vec2 uv = -1. + 2. *(fragCoord/iResolution.xy);\n    //vec2 uv = -1. + 2. * inData.v_texcoord;\n    vec2 vuv = (fragCoord/iResolution.xy);\n    vec3 col = vec3(0.);\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv.x *= ar;\n    float c = length(uv);\n    //vec3 ro = vec3(0.,1.,-45.);\n    vec3 ro = vec3(0.,yheight,(time*20.)+10.);\n    vec2 dt = vec2(13.,40.);\n    //dt = mix(dt,vec2(1.),1.-(1./(time*time*0.001)));\n    vec3 rd = normalize(vec3(uv,1.));\n    //vec3 rd = normalize(vec3(uv,dt.x-c*dt.y));\n    float m = iMouse.x+iMouse.y;\n    vec2 tv = fragCoord/iResolution.xy;\n    //vec3 bak = texture(prevFrame,tv).rgb;\n    //m = 0.09;\n    //ro.yz *= r2d(m);\n    float cs = time*0.1;\n    rd.yz *= r2d(-0.4);\n    rd.xz *= r2d(-3.5);\n    ro.xz *= r2d(-3.5);\n    //rd.xz *= r2d(time*0.1);ro.xz *= r2d(2);\n    //rd.yz *= r2d(sin(cs)*0.25);\n    //ro.y += sin(cs-2.)*15.;\n    //rd.yz *= r2d((mouse.y-0.5)*2.);\n    //rd.xz *= r2d((mouse.x-0.5)*2.);\n    vec2 d = RM(ro,rd,vuv);\n    col = 1.-d.xxx*0.01;\n    vec3 p = ro+rd*d.x;\n    vec4 pp = map(p,ro.z);\n    vec3 lp = p-ro.xxz;\n    col = sin((pp).zzz*0.2+2.5);\n    col -= sin(d.y*0.8);\n    col = hsv2rgb(vec3(d.y*0.02-0.9,1.,1.-d.y*0.05));\n    //col = hsv2rgb(sin(p.xyy)*0.8);\n    if (lp.y < -1.9) {\n        \n        col -= floor((sin(p.xxx*0.1)+sin(p.zzz*0.1))+0.5)*0.06;\n        col += sin(sin(pp.z*0.31)/d.x*2000.)*0.2;\n        //col = mix(col,hsv2rgb(vec3(d.y,col.y,col.x)),0.1);\n    }\n    tv.y -= 1./R.y;\n    tv -= 0.5;\n    //tv.x *= 1.+sin(time)*0.01;\n    tv += 0.5;\n    //col += hsv2rgb(sin(p*0.1+time));\n    //tv.x += sin(uv.y*20+time*0.21+uv.x*20)*0.0001;\n    //tv -= 0.5;tv.xy *= r2d(sin(time*0.02)*0.01);tv += 0.5;\n    //tv.y -= ro.y*0.000009+tv.y*0.0002;\n    vec3 bak = texture(iChannel0,tv).rgb;\n    bak = rgb2hsv(bak);\n    bak = hsv2rgb(vec3(bak.r*1.01+0.001,bak.g*0.9999,mix(1.-d.y*0.04,bak.b,0.8)));\n    //bak = hsv2rgb(vec3(bak.r*1.02,bak.g*0.99,fract(bak.b+0.0025)));\n    if (d.x > MAXD) {\n        //col = vec3(0.2,0.35,0.6);\n        //col = bak;\n        //col = sin(col*20.9)-bak;\n        col = mix(bak,vec3(0.4,1.1,0.4),0.01);\n    }\n    //col = mix(clamp(col,0.,1.),bak,(1.-(d.x/MAXD)));\n    //col *= 0.\n    //col += d.yyy*0.1;\n    //col += sin(d.x*0.01);\n    //col.rg += sin(pp.xy*2);\n    //col = sin(d.xxx);\n    //col = (d.yyy-15.)*0.2;\n    fragColor = vec4(col,1.);\n}\n\n/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}