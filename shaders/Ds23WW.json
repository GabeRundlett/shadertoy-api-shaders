{
    "Shader": {
        "info": {
            "date": "1667899872",
            "description": "Thanks to @Envy24 for showing me the colorize field functions!",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds23WW",
            "likes": 1,
            "name": "a line and a colorized field",
            "published": 3,
            "tags": [
                "basic",
                "line"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 155
        },
        "renderpass": [
            {
                "code": "#define R (iResolution)\n//const float n_tau = 6.28318530717958647;\nfloat f_n_difference_to_line_function(\n    vec2 a_n_start, \n    vec2 a_n_end, \n    vec2 a_n_pixel_coord_normalized\n){\n    //remember that math lesson ?\n    // y = m*x+q\n    float n_delta_y = a_n_end.y - a_n_start.y; \n    float n_delta_x = a_n_end.x - a_n_start.x; \n    float n_m = n_delta_y / n_delta_x;\n    float n_q = -(n_m*a_n_start.x) - a_n_start.y;\n    \n    float n_x = a_n_pixel_coord_normalized.x;\n    \n    float n_y = n_m * n_x + n_q; \n   \n    float n_difference = a_n_pixel_coord_normalized.y - n_y;\n    return n_difference;\n\n    \n}\n\n//Or iq's scheme:\n// https://www.shadertoy.com/view/3tdSDj\nvec3 f_colorize_field_iq(float dist, vec3 color)\n{\n    // Change color if dist is negative.\n    color = 1.0 - sign(dist) * color;\n    \n    // Attenuate color around edges.\n\tcolor *= 1.0 - exp(-4.0 * abs(dist));\n    \n    // Add interleaved waves.\n\tcolor *= 0.7 + 0.2 * cos(30.0 * dist);\n    \n    // Add white edges.\n    return mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 6./R.y, abs(dist)));\n}\n\n\n// https://www.shadertoy.com/view/ddfGz2\nvec3 f_colorize_field_Envy24(float dist, vec3 color)\n{    \n    float F = 30., freq = F*dist, aa = 1./F, C = 0.7, amp = 0.2, width = 0.3,\n          waves_sdf = C + amp*smoothstep(8./R.y, 0., (width+cos(freq)) * aa),\n          exp_raise = 1. - exp(-4.*abs(dist));\n        \n    color = 1.0 - sign(dist) * color; // Change color if dist is negative. \n    color *= exp_raise;               // Attenuate color around edges.     \n    color *= waves_sdf;               // Add waves.\n    \n    return mix(color, vec3(1), smoothstep(8./R.y, 0., abs(dist)) );\n}\n\n/*\nbool f_b_inside_polygon(\n    vec2 a_n_translation, \n    float n_radius, \n    float n_corners\n){todo}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 a_n_pixel_pos_normalized = fragCoord.xy / iResolution.xy;\n    \n    vec2 a_n_start = vec2(0.001,0.0);\n    vec2 a_n_end = vec2(0.99, 0.99); \n    \n    float n_brightness = 0.0;\n    float n_difference_to_line_function = f_n_difference_to_line_function(\n        a_n_start, \n        a_n_end, \n        a_n_pixel_pos_normalized\n    );\n  \n  \n\n    \n    fragColor = vec4(abs(n_difference_to_line_function*20.00));\n    vec3 o_col = vec3(0.1, 0.5, 0.9);\n    if(a_n_pixel_pos_normalized.x > (1.0/3.0)*1.0){\n        fragColor = vec4(f_colorize_field_Envy24(n_difference_to_line_function, o_col), 1.);        \n    }\n\n    if(a_n_pixel_pos_normalized.x > (1.0/3.0)*2.0){\n        fragColor = vec4(f_colorize_field_iq(abs(n_difference_to_line_function) - 0.1, o_col), 1.);\n    }\n    \n    if(a_n_pixel_pos_normalized.y > (0.5)){\n        // gamma correction\n        fragColor = pow(max(fragColor,0.),vec4(1./2.2));\n    }\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}