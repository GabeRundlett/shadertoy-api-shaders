{
    "Shader": {
        "info": {
            "date": "1522258274",
            "description": "jah",
            "flags": 0,
            "hasliked": 0,
            "id": "lsKyWz",
            "likes": 5,
            "name": "Alien Architecture",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 620
        },
        "renderpass": [
            {
                "code": "#define EPS 0.0002\n#define STEPS 1028\n#define FAR 20.0\n\nconst float PI = acos( -1.0 );\n\nvec3 pMod3( inout vec3 p, float s ) \n{\n    \n\tvec3 a = mod( p*s, 2.0 )-1.0;\n    return a;\n\n}\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x<0.)?-1.:1.;\n}\n\nvec2 sgn(vec2 v) {\n\treturn vec2((v.x<0.)?-1.:1., (v.y<0.)?-1.:1.);\n}\n\n// Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.\nfloat pMirror (inout float p, float dist) {\n\tfloat s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\n\n// Mirror in both dimensions and at the diagonal, yielding one eighth of the space.\n// translate by dist before mirroring.\nvec2 pMirrorOctant (inout vec2 p, vec2 dist) {\n\tvec2 s = sgn(p);\n\tpMirror(p.x, dist.x);\n\tpMirror(p.y, dist.y);\n\tif (p.y > p.x)\n\t\tp.xy = p.yx;\n\treturn s;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    \n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n\n}\n\nfloat sph( vec3 p, float r )\n{\n\n    return length( p ) - r;\n\n}\n\nfloat map ( vec3 p, out vec3 tra ) \n{\n    \n    pMirrorOctant( p.xz, vec2( iTime * 0.8, 1.0 ) );\n    pMirrorOctant( p.xy, vec2( 0.2, iTime * 0.8 ) );\n    p = pMod3( p, ( 0.3 ) );\n    float box = sdBox( p, vec3( 1.0 ) );\n    float tim = sin( ( iTime ) + sin( iTime ) * 0.5 );\n    float sp = sph( p, 1.2 );\n    float s = 1.0;\n    float obj = max( -sp, box );\n   \n    float d = sdBox(p,vec3(1.0));\n    for( int m=0; m<5; m++ )\n    {\n    \tvec3 a = mod( p*s, 2.0 )-1.0;\n        s *= 4.0;\n        vec3 r = 1.0 - 3.0*abs(a);\n        float c = sph( r, 1.2 )/s;\n        d = max(d,-c);\n        if( c < d )\n        {\n\n            tra = vec3( d * float( m ) * 3000.0 * sin( iTime * 0.8 ), float( m ), 1.0 );\n\n        }\n    }\n    \n    return max( obj, d );\n    \n}\n\nvec3 norm( vec3 p )\n{\n\n    vec3 tra = vec3( 0.0 );\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy, tra ) - map( p - e.xyy, tra ),\n                            map( p + e.yxy, tra ) - map( p - e.yxy, tra ),\n                            map( p + e.yyx, tra ) - map( p - e.yyx, tra )\n                           ) \n                     );\n    \n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    vec3 tra = vec3( 0.0 );\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t, tra );\n        res = min( res, 8.0 * h / t );\n    \n    }\n    \n    return res;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd, float t )\n{\n\n    vec3 p = ro + rd * t;\n\tvec3 n = norm( p );\n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 col = vec3( 0.0 );\n    vec3 tra = vec3( 1.0 );\n    vec3 ref = reflect( rd, n );\n    \n    float ma = map( p, tra );\n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( lig, n ) );\n    float bac = max( 0.0,  0.5 * dot( blig, n ) );\n    float sha = softShadows( p, lig );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 ); \n    float speO = pow( clamp( dot( blig, ref ), 0.0, 1.0 ), 16.0 ); \n    \n    col += 0.2 * amb;\n    col += dif;\n    col += bac;\n    col += sha * spe * speO;\n    col += mix( vec3( 0.0 ), vec3( 0.0, 0.4, 0.0 ), tra.x );\n    col += mix( vec3( 1.0 ), vec3( 0.0 ), tra.y );\n    if( col.x > 0.0 ) col *= vec3( 0.8, 0.1, 0.2 );\n    col += texture( iChannel0, normalize( reflect( rd, n ) ) ).rgb * 0.5;\n    col = sqrt( col );\n    return col;\n    \n}\n\nvec3 ray( vec3 ro, vec3 rd )\n{\n\n    vec3 col = vec3( 0.0 );\n    vec3 tra = vec3( 0.0 );\n    \n    float t = 0.0, d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n    \td = 0.5 * map( ro + rd * t, tra );\n        if( d < EPS || t > FAR ) break;\n        t += d;\n        \n    }\n    \n    return col = d < EPS ? shad( ro, rd, t ) : vec3( 0.0 );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    //vec2 uv = fragCoord.xy / iResolution.y;\n    \n    float tim = iTime * 0.1;\n    \n    vec2 mou = iMouse.xy / iResolution.y;\n    \n    vec3 ro = vec3( 0.0 );\n    \n    //vec3 ro = 3.5 * vec3( 1.2 - sin( tim ), sin( tim ), cos( tim ) );\n    if( mou.x == 0.0 )\n    ro = 5.0 * vec3( sin( 5.0 + mou.x * PI ), sin( -10.0 + mou.y * PI * 2.0 ), cos( 6.0 -mou.x * PI ) );\n    else if( mou.x != 0.0 )\n    ro = 5.0 * vec3( sin( mou.x * PI ), mou.y, cos( -mou.x * PI ) );    \n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    vec3 tra = vec3( 0.0 );\n    \n    vec3 col = ray( ro, rd );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}