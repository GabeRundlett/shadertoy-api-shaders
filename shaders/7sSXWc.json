{
    "Shader": {
        "info": {
            "date": "1621150343",
            "description": "Implementing the general formula for all real and complex roots. Its a LOT simpler.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sSXWc",
            "likes": 10,
            "name": "Simpler Cubic Solver",
            "published": 3,
            "tags": [
                "simple",
                "complex",
                "solver",
                "cubic",
                "roots"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "// Implementing general formula from https://en.wikipedia.org/wiki/Cubic_equation\nconst vec2 eta = vec2(-0.5, sqrt(0.75)); // = (-1 + sqrt(-3))/2 = -cos(π/3) + sin(π/3)i\nvoid solveCubic(in float a, in float b, in float c, in float d, inout vec2[3] roots) {\n    b /= a, c /= a, d /= a;\n    float d0 = b * b - 3.0 * c;\n    float d1 = (2.0 * b * b - 9.0 * c) * b + 27.0 * d;\n    float q = d1 * d1 - 4.0 * d0 * d0 * d0, j = sqrt(abs(q));\n\n    vec2 C = q < 0.0 ? vec2(d1, j) : vec2(d1 + j, 0.0);\n    if (abs(C.x) + abs(C.y) < 1e-3) C = vec2(d1 - j, 0.0);\n    float t = atan(C.y, C.x) / 3.0, r = pow(0.25 * dot(C, C), 1.0 / 6.0);\n    C = vec2(cos(t), sin(t));\n\n    vec4 k = C.xyxy * eta.xxyy;\n    float h = d0 / r, w = -h - r, wi = h - r;\n    roots[0] = vec2(       C.x  * w - b,        C.y  * wi) / 3.0;\n    roots[1] = vec2((k.x - k.w) * w - b, (k.y + k.z) * wi) / 3.0;\n    roots[2] = vec2((k.x + k.w) * w - b, (k.y - k.z) * wi) / 3.0;\n}\n\n// Coloring code from @mla (https://www.shadertoy.com/view/tlVcD3)\n// I've fixed a minor mistake in the evaluation\nvec2 cmul(in vec2 z, in vec2 w) { return z * mat2(w.x, -w.y, w.yx); }\nvec2 cpoly3(in vec2 x, in float a, in float b, in float c, in float d) {\n    return a * cmul(x, cmul(x, x)) + b * cmul(x, x) + c * x + vec2(d, 0.0);\n}\n\nvec3 hsv2rgb(in float h, in float s, in float v) {\n    vec3 rgb = clamp(abs(mod(h * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    rgb = rgb * rgb * (3.0 - 2.0 * rgb); // cubic smoothing       \n    return v * mix(vec3(1.0), rgb, s);\n}\n\nvec3 polycolor(in vec2 z) {\n    vec2 z0 = z;\n    float h = 0.5 + 0.5 * atan(z.y, z.x) / 3.14159265;\n    vec3 col = hsv2rgb(h, 1.0, sqrt(1.0 / (1.0 + length(z))));\n    z -= floor(z);\n    z = min(z, 1.0 - z);\n    col *= mix(0.5 + 0.5 * smoothstep(0.0, 0.1, min(z.x, z.y)), 1.0, min(1.0, length(z0) / 20.0));\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n\n    // Coefficients\n    float a = sin(iTime * 0.25) * 2.0;\n    float b = sin(iTime * 0.5);\n    float c = cos(iTime * 0.75) * 2.0;\n    float d = sin(iTime);\n\n    vec3 color = polycolor(cpoly3(uv, a, b, c, d));\n\n    // Draw function\n    float f = a * uv.x * uv.x * uv.x + b * uv.x * uv.x + c * uv.x + d;\n    float g = 3.0 * a * uv.x * uv.x + 2.0 * b * uv.x + c; // Derivative for DE\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(uv.y - f) / sqrt(1.0 + g * g)));\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, abs(uv.y)));\n\n    // Draw roots\n    vec2[3] roots;\n    solveCubic(a, b, c, d, roots);\n    for (int n=0; n < 3; n++) {\n        color = mix(color, vec3(1.0), smoothstep(unit, 0.0, length(uv - roots[n]) - 0.05));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}