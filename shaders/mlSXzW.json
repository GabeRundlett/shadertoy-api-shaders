{
    "Shader": {
        "info": {
            "date": "1675730313",
            "description": "Procedural field of stars. WASD QE and mouse to move. Press R to stop movement.",
            "flags": 48,
            "hasliked": 0,
            "id": "mlSXzW",
            "likes": 2,
            "name": "3D Star Field 2",
            "published": 3,
            "tags": [
                "camera"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define exposure 1.2\n#define sqrexposure 0.6\n#define gamma 1.3\n\nvec3 expose(vec3 c)\n{\n    return 1.0 - exp(-exposure*c-sqrexposure*c*c);\n}\n\nvec3 saturate(vec3 c)\n{\n    return pow(expose(c),vec3(1.0/gamma));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 acc = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 bloom = texture(iChannel1, fragCoord/iResolution.xy);\n    \n    vec3 col = acc.xyz/acc.w + 550.0*bloom.xyz/bloom.w;\n    \n    fragColor = vec4(saturate(col), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//controller\n\n//Keyboard constants\nconst int keyLe = 37, keyUp = 38, keyRi = 39, keyDn = 40, keyA = 65, keyB = 66, keyC = 67, keyD = 68, keyE = 69, keyF = 70, keyG = 71, keyH = 72, keyI = 73, keyJ = 74, keyK = 75, keyL = 76, keyM = 77, keyN = 78, keyO = 79, keyP = 80, keyQ = 81, keyR = 82, keyS = 83, keyT = 84, keyU = 85, keyV = 86, keyW = 87, keyX = 88, keyY = 89, keyZ = 90;\n\nbool pressed(int k) \n{\n    return texelFetch(iChannel3, ivec2(k, 0), 0).x > 0.5;\n}\n\nconst float force = 32.0;\nconst float mouse_sens = 100.0;\nconst float roll_speed = 0.5;\n\nvoid mainImage( out vec4 o, in vec2 p )\n{\n    p = floor(p);\n    if(p.x > NAddr && p.y > 0.) discard;\n    \n    //get camera data\n    vec3 cp = get(CamP).xyz;\n    vec4 ca = get(CamA);\n    \n    float mode = get(CamP).w;\n    if(pressed(keyR)) mode = 1.0 - mode;\n    \n    //initialization\n    if(iFrame == 0)\n    {\n        mode = 1.0;\n        cp =  vec3(6,6,5);\n        ca = aa2q( normalize(vec3(0.0,1,0.)), -1.15);\n    }\n    vec4 oldca = ca;\n    if(p.x == PrevCamP) o = vec4(cp, 0);\n    if(p.x == PrevCamA) o = ca;\n    \n    mat3 cam = getCam(ca);\n    \n    //get velocities\n    vec3 cv = get(CamV).xyz;\n    vec4 cav = get(CamAV);\n    \n    float dt = 1./60.0;\n    //update position\n    if(pressed(keyW)) cv += force*dt*cam*vec3(0,0,1);\n    if(pressed(keyS)) cv += force*dt*cam*vec3(0,0,-1);\n    if(pressed(keyA)) cv += force*dt*cam*vec3(-1,0,0);\n    if(pressed(keyD)) cv += force*dt*cam*vec3(1,0,0);\n    \n    cp += dt*cv + 5.0*iTimeDelta*vec3(1,0,0)*mode;\n    cv += -cv*tanh(10.0*dt);\n    \n    //update camera orientation\n    vec2 dmouse = dt*mouse_sens*(iMouse.xy - get(PrevMouse).xy)/iResolution.x;\n    \n    if(length(dmouse) < 0.1)\n    {\n        //rotate around y ax\n        ca = qq2q(ca, aa2q(cam*vec3(0,1,0), -dmouse.x)); \n        //rotate around x ax\n        ca = qq2q(ca, aa2q(cam*vec3(1,0,0), dmouse.y));\n    }\n    \n    //roll camera\n    if(pressed(keyQ)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), -roll_speed*dt)); \n    if(pressed(keyE)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), roll_speed*dt)); \n    \n    if(p.x == CamP) o = vec4(cp, mode);\n    if(p.x == CamA) o = ca;\n    if(p.x == CamV) o = vec4(cv, 0.0);\n    if(p.x == CamAV) o = vec4(0.0);\n    if(p.x == PrevMouse) o = vec4(iMouse.xy, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n#define FOV 0.8\n#define MAX_STEPS 256\n#define MIN_DIST 1e-5\n#define MAX_DIST 60.0\n\n//(reused some of @ollj's code, made it more readible)\n\nfloat CAM_ANGLE = 0.003;\n\n// basic parameters\nfloat R = 2.1;\t\t\t\t\t\t\t\t// planet radius\nfloat H = 0.1;\t\t\t\t\t\t\t// density scale-height of atmosphere (not pressure scale height)\n\nvec3 light = normalize(vec3(1,0.8,-0.6));\nconst float light_bright =1.0;\nconst float light_ang = 0.1;\n\n//specific controller buffer Addresses\nconst float CamP = 0.,     //camera position \n            CamA = 1.,     //camera rotation quaternion    \n            CamV = 2.,     //camera velocity\n            CamAV = 3.,    //camera rotation velocity\n            PrevCamP = 4., //previous frame camera position\n            PrevCamA = 5., //previous frame camera rotation quaternion\n            PrevMouse = 6.,//previous mouse pos\n            NAddr = 7.;    //max address count\n            \n#define get(i) texelFetch(iChannel2,ivec2(i,0),0)\n\n\n\n//ollj quaternionRotation math\n//\n//ANY rotations in 3d are non-commutative!\n//\n//matrix rotations are just bulky, memory wasting\n//EulerRotations almost certainly fail to rotate over the SHORTEST path.\n//EulerRotations almost certainly will gimbalLock and get stuck along one axis\n//QuaternionRotations are superior here.\n//-> we only use EulerRorations for simple input devices (keyboard input)\n//-> we convert to quaternions, buffered as vec4.\n\n//quaternion Identity\nvec4 qid() \n{\n    return vec4(0, 0, 0, 1);\n}\n\n//return quaternion from axis and angle\nvec4 aa2q(vec3 axis, float ang) \n{\n    vec2 g = vec2(sin(ang), cos(ang)) * 0.5;\n    return normalize(vec4(axis * g.x, g.y));\n}\n\n//return AxisAngle of NORMALIZED quaternion input\nvec4 q2aa(vec4 q) \n{\n    return vec4(q.xyz / sqrt(1.0 - q.w * q.w), acos(q.w) * 2.);\n}\n\n//return q2, rotated by q1, order matters (is non commutative) : (aka quaternion multiplication == AxisAngleRotation)\nvec4 qq2q(vec4 q1, vec4 q2) \n{\n    return vec4(q1.xyz * q2.w + q2.xyz * q1.w + cross(q1.xyz, q2.xyz), (q1.w * q2.w) - dot(q1.xyz, q2.xyz));\n}\n\n//extension to qq2q(), scaled by sensitivity [f] (==quaternion ANGULAR equivalent to slerp() )\nvec4 qq2qLerp(vec4 a, vec4 b, float f) \n{\n    float d = dot(a, b), t = acos(abs(d)), o = (1. / sin(t));\n    return normalize(a * sin(t * (1.0 - f)) * o * sign(d) + b * sin(t * f) * o);\n}\n\n//doing qq2q() multiple times, you need to normalize() the quaternion, to fix rounding errors.\n//how often you do this is up to you.\n\n//normalize q (assuming length(q) is already close to 1, we can skip whe sqrt()\nvec4 qn(vec4 q) \n{\n    return q / dot(q,q);\n}\n\n//return quaternion, that is the shortest rotation, between looking to [a before], and looking to [b after] the rotation.\n//http://wiki.secondlife.com/wiki/LlRotBetween\nvec4 qBetween(vec3 a, vec3 b) \n{\n    float v = sqrt(dot(a,a) * dot(a,a));\n\n    if(v == 0.) return qid();\n    \n    v = dot(a, b) / v;\n    vec3 c = a.yzx * b.zxy - a.zxy * b.yzx / v;\n    float d = dot(c,c);\n    \n    if(d != 0.) \n    {\n        float s = (v > - 0.707107) ? 1. + v : d / (1. + sqrt(1. - d));\n        return vec4(c, s) / sqrt(d + s * s);\n    }\n    \n    if(v > 0.) return qid();\n    \n    float m = length(a.xy);\n    \n    return (m != 0.) ? vec4(a.y, - a.x, 0, 0) / m : vec4(1, 0, 0, 0);\n}\n\n//return inverse of quaternion\nvec4 qinv(vec4 q) \n{\n    return vec4(- q.xyz, q.w) / dot(q,q);\n}\n\n//return VECTOR p, rotated by quaterion q;\nvec3 qv2v(vec4 q, vec3 p) \n{\n    return qq2q(q, qq2q(vec4(p, .0), qinv(q))).xyz;\n}\n\n//qv2v()  with swapped inputs\n//return quaterion P (as vector), as if it is rotated by VECTOR p (as if it is a quaternion)\nvec3 vq2v(vec3 p, vec4 q) \n{\n    return qq2q(qinv(q), qq2q(vec4(p, 0.0), q)).xyz;\n}\n\nvec3 vq2v(vec4 a, vec3 b) \n{\n    return qv2v(a, b);\n}\n\n//in case of namespace confuction\nvec3 qv2v(vec3 a, vec4 b) \n{\n    return vq2v(a, b);\n}\n\n//return mat3 of quaternion (rotation matrix without translation)\n//https://www.shadertoy.com/view/WsGfWm\nmat3 q2m(vec4 q) \n{\n    vec3 a = vec3(-1, 1, 1);\n    vec3 u = q.zyz * a, v = q.xyx * a.xxy;\n    mat3 m = mat3(0.5) + mat3(0, u.x,u.y,u.z, 0, v.x,v.y,v.z, 0) * q.w + matrixCompMult(outerProduct(q.xyz, q.xyz), 1. - mat3(1));\n    q *= q; \n    m -= mat3(q.y + q.z, 0, 0, 0, q.x + q.z, 0, 0, 0, q.x + q.y);\n    return m * 2.0;\n}\n\n//return quaternion of orthogonal matrix (with determinant==1., or else quaternionm will not be normalized)\nvec4 m2q(mat3 m) \n{\n#define m2f(a,b) m[a][b]-m[b][a]\n    //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n    float q = 2. * sqrt(abs(1. + m[0][0] + m[1][1] + m[2][2]));\n    return vec4(vec3(m2f(2, 1), m2f(0, 1), m2f(1, 0)) / q / 4., q);\n#undef m2f\n}\n\nfloat at2e(vec2 a) \n{\n    a *= 2.;\n    return atan(a.x, 1. - a.y);\n}\n\n//return quaternion of Euler[yaw,pitch,roll]     \nvec4 eYPR2q(vec3 o) \n{\n    o *= .5;\n    vec3 s = sin(o);\n    //https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Source_code\n    o = cos(o);\n    vec4 a = vec4(s.xz, o.xz);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(-1, 1, -1, 1);\n}\n\nvec4 eYPR2q(vec2 o) \n{\n    o *= .5;\n    vec2 s = sin(o);\n    o = cos(o);\n    vec4 a = vec4(s.x, 0., o.x, 0.);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(- 1, 1, - 1, 1);\n}\n\nmat3 getCam(vec4 q) \n{\n    return q2m(q);\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n\n//uniformly spherically distributed\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SLICES 50.0\n\nfloat minimum_distance(vec3 v, vec3 w, vec3 p) \n{\n  vec3 dx = w - v;\n  float l2 = dot(dx, dx);  \n  if (l2 == 0.0) return distance(p, v);   \n  float t = max(0.0, min(1.0, dot(p - v, w - v) / l2));\n  vec3 projection = v + t * (w - v);\n  return distance(p, projection);\n}\n\nvec3 blackBody(float T)\n{\n    vec3 O = vec3(0.0);\n    for (float i=0.; i<3.; i++) \n    { \n        float f = 1.+.5*i; \n        O[int(i)] += 10. * (f*f*f) / (exp((19E3*f/T)) - 1.);  // Planck law\n    }\n    return O;\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat region(vec3 pos)\n{\n    return texture(iChannel1, pos/200.0).x;\n}\n\nvec3 sampleVoxel(vec3 ro, vec3 rd, vec3 pos)\n{\n    float r = region(pos);\n    if(r < 0.5) return vec3(0.0);\n    float temp = hash13(pos);\n    vec3 heat = pow(blackBody(temp*temp*temp*20000.), vec3(1.0));\n    vec3 spos = hash33(pos) + pos;\n    float mdist = minimum_distance(ro, ro + rd*100.0, spos);\n    float camdist = distance(ro, spos);\n    float mindist = CAM_ANGLE*camdist;\n    float dec = smoothstep(SLICES, SLICES*0.8, camdist);\n    return min(vec3(100.0), 20.0*heat * smoothstep(mindist, 0.0, mdist) * dec / (camdist*camdist));\n}\n\nvec3 VoxelRaycast(vec3 ro, vec3 rd, float maxt)\n{\n\tvec3 voxelPos = floor(ro);\n\t\n    vec3 rayInv = 1.0/rd;\n    vec3 rayMask = vec3(greaterThan(rd, vec3(0.0)));\n\tvec3 rayStep = rayMask * 2.0 - 1.0;          \n\tvec3 offset = (rayMask - ro) * rayInv;\n\n\tvec3 mask = vec3(0.0);\n    vec3 sideLength = vec3(0.0);\n    \n    float traveled = 0.0;\n    vec3 col = vec3(0.0);\n\tfor(int i = 0; i < MAX_STEPS; i++) \n\t{\n        col += sampleVoxel(ro, rd, voxelPos);\n        \n        sideLength = voxelPos * rayInv + offset;\n        mask = vec3(lessThanEqual(sideLength.xyz, min(sideLength.yzx, sideLength.zxy)));\n        voxelPos += mask * rayStep;\n        traveled = dot(sideLength, mask);\n        \n        if(traveled > maxt) break;\n\t}\n    \n    ro = ro + rd*traveled;\n\treturn col;\n}\n\nbool getRay(vec2 uv, out vec3 ro, out vec3 rd)\n{\n    mat3 cam = getCam(get(CamA));\n    \n    ro = get(CamP).xyz;\n   \n    rd = normalize(cam*vec3(FOV*uv, 1.0));\n    \n    return true;\n}\n\nvec4 render(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 cp, rd;\n    if(!getRay(uv, cp, rd)) return vec4(0,0,0,1);\n   \n    return vec4(VoxelRaycast(cp, rd, SLICES), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CAM_ANGLE = 1.5 * FOV / iResolution.y;\n    fragColor = vec4(0.0);   \n\n    fragColor += render(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //first pass of separable convolution\n    \n//The first 1 columns of the U matrix:\nfloat U1[257] = float[](\n    -7.557296344273823e-09,     -7.876148527818927e-08,     -2.3117979596094795e-07,     -4.6914155456992363e-07,     -7.962351863561828e-07,     -1.2158569096862385e-06,     -1.73137192423984e-06,     -2.3461842283002694e-06,     -3.063775668624977e-06,     -3.887729909453427e-06,     -4.821750977079177e-06,     -5.869676926977158e-06,     -7.0354932213690655e-06,     -8.323343642568621e-06,     -9.737541866572847e-06,     -1.1282582589143565e-05,     -1.296315283073975e-05,     -1.4784143428122506e-05,     -1.6750661194356675e-05,     -1.8868041776592815e-05,     -2.1141862578623146e-05,     -2.3577956813496412e-05,     -2.6182428763773486e-05,     -2.8961668826155482e-05,     -3.19223709448007e-05,     -3.507154991021651e-05,     -3.8416560434431325e-05,     -4.1965117712114906e-05,     -4.572531857965874e-05,     -4.970566483964957e-05,     -5.391508803223462e-05,     -5.8362975911312206e-05,     -6.305920069598252e-05,     -6.801414959265162e-05,     -7.323875747411767e-05,     -7.874454198128607e-05,     -8.454364126638481e-05,     -9.064885460837994e-05,     -9.70736861541115e-05,     -0.00010383239206403088,     -0.00011094003136964075,     -0.00011841252088117362,     -0.00012626669451910085,     -0.00013452036748220727,     -0.00014319240570872507,     -0.00015230280113599675,     -0.00016187275331635382,     -0.00017192475799399502,     -0.00018248270342032322,     -0.0001935719750563917,     -0.0002052195695767992,     -0.00021745421912632148,     -0.00023030652687740992,     -0.00024380911520966136,     -0.0002579967876345579,     -0.0002729067060756482,     -0.00028857858522984115,     -0.00030505490592909695,     -0.00032238114944675006,     -0.0003406060553522691,     -0.00035978190569166,     -0.0003799648383069163,     -0.00040121519309561015,     -0.0004235978951050413,     -0.00044718287883896613,     -0.0004720455592991103,     -0.0004982673553056492,     -0.0005259362721790776,     -0.0005551475514238436,     -0.0005860043963696145,     -0.0006186187842269617,     -0.0006531123762904234,     -0.000689617540357378,     -0.0007282785011662933,     -0.0007692526377838233,     -0.0008127119495306639,     -0.0008588447161577431,     -0.000907857382078767,     -0.0009599767000016091,     -0.0010154521755436758,     -0.0010745588620684698,     -0.001137600564372823,     -0.0012049135208846331,     -0.001276870647949287,     -0.0013538864463342782,     -0.0014364226907244365,     -0.0015249950483367013,     -0.0016201808040860533,     -0.0017226279088993234,     -0.0018330656165747136,     -0.0019523170359852465,     -0.0020813140030855235,     -0.0022211147757790982,     -0.00237292518079984,     -0.002538124003987464,     -0.002718293625332086,     -0.0029152571739400786,     -0.0031311238375717836,     -0.003368344437075814,     -0.003629780010503165,     -0.003918787005245062,     -0.004239323835275993,     -0.004596085148844993,     -0.004994672351370317,     -0.005441812007524935,     -0.005945638108146458,     -0.006516060443573302,     -0.0071652504193862685,     -0.007908289063681344,     -0.008764042068807385,     -0.00975635732456618,     -0.010915727903530209,     -0.012281638652115748,     -0.013905936175421282,     -0.015857763491345687,     -0.018230943198151384,     -0.02115529233405898,     -0.02481443415607389,     -0.029474694208065796,     -0.03553359196587875,     -0.043604367113415345,     -0.05466967458531213,     -0.07037409178092902,     -0.0936064551954588,     -0.12969481008408512,     -0.1887589793394499,     -0.28852141207015086,     -0.44002348591634544,     -0.5426946241198759,     -0.44002348591634544,     -0.28852141207015086,     -0.1887589793394499,     -0.12969481008408512,     -0.0936064551954588,     -0.07037409178092902,     -0.05466967458531213,     -0.043604367113415345,     -0.03553359196587875,     -0.029474694208065796,     -0.02481443415607389,     -0.02115529233405898,     -0.018230943198151384,     -0.015857763491345687,     -0.013905936175421282,     -0.012281638652115748,     -0.010915727903530209,     -0.00975635732456618,     -0.008764042068807385,     -0.007908289063681344,     -0.0071652504193862685,     -0.006516060443573302,     -0.005945638108146458,     -0.005441812007524935,     -0.004994672351370317,     -0.004596085148844993,     -0.004239323835275993,     -0.003918787005245062,     -0.003629780010503165,     -0.003368344437075814,     -0.0031311238375717836,     -0.0029152571739400786,     -0.002718293625332086,     -0.002538124003987464,     -0.00237292518079984,     -0.0022211147757790982,     -0.0020813140030855235,     -0.0019523170359852465,     -0.0018330656165747136,     -0.0017226279088993234,     -0.0016201808040860533,     -0.0015249950483367013,     -0.0014364226907244365,     -0.0013538864463342782,     -0.001276870647949287,     -0.0012049135208846331,     -0.001137600564372823,     -0.0010745588620684698,     -0.0010154521755436758,     -0.0009599767000016091,     -0.000907857382078767,     -0.0008588447161577431,     -0.0008127119495306639,     -0.0007692526377838233,     -0.0007282785011662933,     -0.000689617540357378,     -0.0006531123762904234,     -0.0006186187842269617,     -0.0005860043963696145,     -0.0005551475514238436,     -0.0005259362721790776,     -0.0004982673553056492,     -0.0004720455592991103,     -0.00044718287883896613,     -0.0004235978951050413,     -0.00040121519309561015,     -0.0003799648383069163,     -0.00035978190569166,     -0.0003406060553522691,     -0.00032238114944675006,     -0.00030505490592909695,     -0.00028857858522984115,     -0.0002729067060756482,     -0.0002579967876345579,     -0.00024380911520966136,     -0.00023030652687740992,     -0.00021745421912632148,     -0.0002052195695767992,     -0.0001935719750563917,     -0.00018248270342032322,     -0.00017192475799399502,     -0.00016187275331635382,     -0.00015230280113599675,     -0.00014319240570872507,     -0.00013452036748220727,     -0.00012626669451910085,     -0.00011841252088117362,     -0.00011094003136964075,     -0.00010383239206403088,     -9.70736861541115e-05,     -9.064885460837994e-05,     -8.454364126638481e-05,     -7.874454198128607e-05,     -7.323875747411767e-05,     -6.801414959265162e-05,     -6.305920069598252e-05,     -5.8362975911312206e-05,     -5.391508803223462e-05,     -4.970566483964957e-05,     -4.572531857965874e-05,     -4.1965117712114906e-05,     -3.8416560434431325e-05,     -3.507154991021651e-05,     -3.19223709448007e-05,     -2.8961668826155482e-05,     -2.6182428763773486e-05,     -2.3577956813496412e-05,     -2.1141862578623146e-05,     -1.8868041776592815e-05,     -1.6750661194356675e-05,     -1.4784143428122506e-05,     -1.296315283073975e-05,     -1.1282582589143565e-05,     -9.737541866572847e-06,     -8.323343642568621e-06,     -7.0354932213690655e-06,     -5.869676926977158e-06,     -4.821750977079177e-06,     -3.887729909453427e-06,     -3.063775668624977e-06,     -2.3461842283002694e-06,     -1.73137192423984e-06,     -1.2158569096862387e-06,     -7.962351863561829e-07,     -4.691415545699213e-07,     -2.3117979596017633e-07,     -7.8761485167858e-08,     -7.557296412354428e-09 \n);\n//The first 1 rows of the V matrix:\nfloat V1[257] = float[](\n    -7.557296412354437e-09,     -7.876148544472272e-08,     -2.3117979594533544e-07,     -4.6914155456999817e-07,     -7.962351863561862e-07,     -1.2158569096862438e-06,     -1.731371924239848e-06,     -2.3461842283002813e-06,     -3.063775668624993e-06,     -3.887729909453448e-06,     -4.8217509770792015e-06,     -5.8696769269771874e-06,     -7.035493221369101e-06,     -8.32334364256866e-06,     -9.737541866572901e-06,     -1.1282582589143624e-05,     -1.2963152830739818e-05,     -1.4784143428122583e-05,     -1.675066119435676e-05,     -1.8868041776592923e-05,     -2.1141862578623268e-05,     -2.3577956813496548e-05,     -2.6182428763773636e-05,     -2.8961668826155642e-05,     -3.192237094480087e-05,     -3.50715499102167e-05,     -3.841656043443153e-05,     -4.196511771211514e-05,     -4.5725318579659e-05,     -4.970566483964984e-05,     -5.3915088032234884e-05,     -5.836297591131254e-05,     -6.305920069598286e-05,     -6.8014149592652e-05,     -7.323875747411808e-05,     -7.874454198128653e-05,     -8.454364126638527e-05,     -9.064885460838047e-05,     -9.707368615411205e-05,     -0.00010383239206403147,     -0.00011094003136964141,     -0.00011841252088117427,     -0.0001262666945191015,     -0.00013452036748220803,     -0.00014319240570872589,     -0.00015230280113599765,     -0.00016187275331635477,     -0.00017192475799399602,     -0.00018248270342032422,     -0.00019357197505639277,     -0.00020521956957680033,     -0.00021745421912632273,     -0.00023030652687741122,     -0.00024380911520966274,     -0.00025799678763455933,     -0.0002729067060756499,     -0.00028857858522984283,     -0.0003050549059290988,     -0.00032238114944675174,     -0.0003406060553522711,     -0.00035978190569166196,     -0.0003799648383069184,     -0.00040121519309561254,     -0.00042359789510504364,     -0.0004471828788389687,     -0.000472045559299113,     -0.0004982673553056519,     -0.0005259362721790804,     -0.0005551475514238468,     -0.000586004396369618,     -0.0006186187842269654,     -0.0006531123762904271,     -0.0006896175403573818,     -0.0007282785011662974,     -0.0007692526377838273,     -0.000812711949530668,     -0.0008588447161577481,     -0.000907857382078772,     -0.0009599767000016143,     -0.0010154521755436814,     -0.0010745588620684758,     -0.0011376005643728292,     -0.00120491352088464,     -0.0012768706479492937,     -0.0013538864463342852,     -0.0014364226907244448,     -0.0015249950483367093,     -0.0016201808040860618,     -0.0017226279088993323,     -0.0018330656165747238,     -0.0019523170359852565,     -0.0020813140030855343,     -0.00222111477577911,     -0.0023729251807998526,     -0.0025381240039874767,     -0.0027182936253321,     -0.0029152571739400925,     -0.0031311238375717997,     -0.0033683444370758305,     -0.0036297800105031834,     -0.003918787005245081,     -0.004239323835276013,     -0.004596085148845014,     -0.004994672351370339,     -0.005441812007524961,     -0.0059456381081464844,     -0.006516060443573333,     -0.0071652504193863015,     -0.007908289063681377,     -0.00876404206880742,     -0.009756357324566223,     -0.010915727903530258,     -0.012281638652115795,     -0.013905936175421336,     -0.015857763491345746,     -0.01823094319815145,     -0.021155292334059047,     -0.024814434156073963,     -0.0294746942080659,     -0.035533591965878894,     -0.043604367113415525,     -0.05466967458531236,     -0.07037409178092931,     -0.09360645519545911,     -0.12969481008408545,     -0.18875897933945018,     -0.28852141207015103,     -0.44002348591634527,     -0.5426946241198755,     -0.44002348591634527,     -0.28852141207015103,     -0.18875897933945018,     -0.12969481008408545,     -0.09360645519545911,     -0.07037409178092931,     -0.05466967458531236,     -0.043604367113415525,     -0.035533591965878894,     -0.0294746942080659,     -0.024814434156073963,     -0.021155292334059047,     -0.01823094319815145,     -0.015857763491345746,     -0.013905936175421336,     -0.012281638652115795,     -0.010915727903530258,     -0.009756357324566223,     -0.00876404206880742,     -0.007908289063681377,     -0.0071652504193863015,     -0.006516060443573333,     -0.0059456381081464844,     -0.005441812007524961,     -0.004994672351370339,     -0.004596085148845014,     -0.004239323835276013,     -0.003918787005245081,     -0.0036297800105031834,     -0.0033683444370758305,     -0.0031311238375717997,     -0.0029152571739400925,     -0.0027182936253321,     -0.0025381240039874767,     -0.0023729251807998526,     -0.00222111477577911,     -0.0020813140030855343,     -0.0019523170359852565,     -0.0018330656165747238,     -0.0017226279088993323,     -0.0016201808040860618,     -0.0015249950483367093,     -0.0014364226907244448,     -0.0013538864463342852,     -0.0012768706479492937,     -0.00120491352088464,     -0.0011376005643728292,     -0.0010745588620684758,     -0.0010154521755436814,     -0.0009599767000016143,     -0.000907857382078772,     -0.0008588447161577481,     -0.000812711949530668,     -0.0007692526377838273,     -0.0007282785011662974,     -0.0006896175403573818,     -0.0006531123762904271,     -0.0006186187842269654,     -0.000586004396369618,     -0.0005551475514238468,     -0.0005259362721790804,     -0.0004982673553056519,     -0.000472045559299113,     -0.0004471828788389687,     -0.00042359789510504364,     -0.00040121519309561254,     -0.0003799648383069184,     -0.00035978190569166196,     -0.0003406060553522711,     -0.00032238114944675174,     -0.0003050549059290988,     -0.00028857858522984283,     -0.0002729067060756499,     -0.00025799678763455933,     -0.00024380911520966274,     -0.00023030652687741122,     -0.00021745421912632273,     -0.00020521956957680033,     -0.00019357197505639277,     -0.00018248270342032422,     -0.00017192475799399602,     -0.00016187275331635477,     -0.00015230280113599765,     -0.00014319240570872589,     -0.00013452036748220803,     -0.0001262666945191015,     -0.00011841252088117427,     -0.00011094003136964141,     -0.00010383239206403147,     -9.707368615411205e-05,     -9.064885460838047e-05,     -8.454364126638527e-05,     -7.874454198128653e-05,     -7.323875747411808e-05,     -6.8014149592652e-05,     -6.305920069598286e-05,     -5.836297591131254e-05,     -5.3915088032234884e-05,     -4.970566483964984e-05,     -4.5725318579659e-05,     -4.196511771211514e-05,     -3.841656043443153e-05,     -3.50715499102167e-05,     -3.192237094480087e-05,     -2.8961668826155642e-05,     -2.6182428763773636e-05,     -2.3577956813496548e-05,     -2.1141862578623268e-05,     -1.8868041776592923e-05,     -1.675066119435676e-05,     -1.4784143428122583e-05,     -1.2963152830739818e-05,     -1.1282582589143624e-05,     -9.737541866572901e-06,     -8.32334364256866e-06,     -7.035493221369101e-06,     -5.8696769269771874e-06,     -4.8217509770792015e-06,     -3.887729909453448e-06,     -3.063775668624993e-06,     -2.3461842283002813e-06,     -1.7313719242398478e-06,     -1.215856909686244e-06,     -7.962351863561862e-07,     -4.6914155456992316e-07,     -2.311797959601771e-07,     -7.876148516785817e-08,     -7.557296412354435e-09 \n);\n//The first 1 singular values:\nfloat S[1] = float[](\n    0.045983058370594285 \n);\n//center of the convolution\nint Nc = 128;\n    \n    //do a convolution in the x direction on iChannel0\n    vec3 sum = vec3(0.0);\n    ivec2 coord = ivec2(fragCoord);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        vec4 pixel = texelFetch(iChannel0, ivec2(coord.x + i, coord.y), 0);\n        //multiply the pixel by the coefficient\n        pixel.xyz *= S[0] * U1[i + Nc] / (pixel.w+1e-5);\n        //add the pixel to the sum\n        sum += pixel.xyz;\n    }\n\n    //write the sum to the output\n    fragColor = vec4(sum, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //first pass of separable convolution\n    \n//The first 1 columns of the U matrix:\nfloat U1[257] = float[](\n    -7.557296344273823e-09,     -7.876148527818927e-08,     -2.3117979596094795e-07,     -4.6914155456992363e-07,     -7.962351863561828e-07,     -1.2158569096862385e-06,     -1.73137192423984e-06,     -2.3461842283002694e-06,     -3.063775668624977e-06,     -3.887729909453427e-06,     -4.821750977079177e-06,     -5.869676926977158e-06,     -7.0354932213690655e-06,     -8.323343642568621e-06,     -9.737541866572847e-06,     -1.1282582589143565e-05,     -1.296315283073975e-05,     -1.4784143428122506e-05,     -1.6750661194356675e-05,     -1.8868041776592815e-05,     -2.1141862578623146e-05,     -2.3577956813496412e-05,     -2.6182428763773486e-05,     -2.8961668826155482e-05,     -3.19223709448007e-05,     -3.507154991021651e-05,     -3.8416560434431325e-05,     -4.1965117712114906e-05,     -4.572531857965874e-05,     -4.970566483964957e-05,     -5.391508803223462e-05,     -5.8362975911312206e-05,     -6.305920069598252e-05,     -6.801414959265162e-05,     -7.323875747411767e-05,     -7.874454198128607e-05,     -8.454364126638481e-05,     -9.064885460837994e-05,     -9.70736861541115e-05,     -0.00010383239206403088,     -0.00011094003136964075,     -0.00011841252088117362,     -0.00012626669451910085,     -0.00013452036748220727,     -0.00014319240570872507,     -0.00015230280113599675,     -0.00016187275331635382,     -0.00017192475799399502,     -0.00018248270342032322,     -0.0001935719750563917,     -0.0002052195695767992,     -0.00021745421912632148,     -0.00023030652687740992,     -0.00024380911520966136,     -0.0002579967876345579,     -0.0002729067060756482,     -0.00028857858522984115,     -0.00030505490592909695,     -0.00032238114944675006,     -0.0003406060553522691,     -0.00035978190569166,     -0.0003799648383069163,     -0.00040121519309561015,     -0.0004235978951050413,     -0.00044718287883896613,     -0.0004720455592991103,     -0.0004982673553056492,     -0.0005259362721790776,     -0.0005551475514238436,     -0.0005860043963696145,     -0.0006186187842269617,     -0.0006531123762904234,     -0.000689617540357378,     -0.0007282785011662933,     -0.0007692526377838233,     -0.0008127119495306639,     -0.0008588447161577431,     -0.000907857382078767,     -0.0009599767000016091,     -0.0010154521755436758,     -0.0010745588620684698,     -0.001137600564372823,     -0.0012049135208846331,     -0.001276870647949287,     -0.0013538864463342782,     -0.0014364226907244365,     -0.0015249950483367013,     -0.0016201808040860533,     -0.0017226279088993234,     -0.0018330656165747136,     -0.0019523170359852465,     -0.0020813140030855235,     -0.0022211147757790982,     -0.00237292518079984,     -0.002538124003987464,     -0.002718293625332086,     -0.0029152571739400786,     -0.0031311238375717836,     -0.003368344437075814,     -0.003629780010503165,     -0.003918787005245062,     -0.004239323835275993,     -0.004596085148844993,     -0.004994672351370317,     -0.005441812007524935,     -0.005945638108146458,     -0.006516060443573302,     -0.0071652504193862685,     -0.007908289063681344,     -0.008764042068807385,     -0.00975635732456618,     -0.010915727903530209,     -0.012281638652115748,     -0.013905936175421282,     -0.015857763491345687,     -0.018230943198151384,     -0.02115529233405898,     -0.02481443415607389,     -0.029474694208065796,     -0.03553359196587875,     -0.043604367113415345,     -0.05466967458531213,     -0.07037409178092902,     -0.0936064551954588,     -0.12969481008408512,     -0.1887589793394499,     -0.28852141207015086,     -0.44002348591634544,     -0.5426946241198759,     -0.44002348591634544,     -0.28852141207015086,     -0.1887589793394499,     -0.12969481008408512,     -0.0936064551954588,     -0.07037409178092902,     -0.05466967458531213,     -0.043604367113415345,     -0.03553359196587875,     -0.029474694208065796,     -0.02481443415607389,     -0.02115529233405898,     -0.018230943198151384,     -0.015857763491345687,     -0.013905936175421282,     -0.012281638652115748,     -0.010915727903530209,     -0.00975635732456618,     -0.008764042068807385,     -0.007908289063681344,     -0.0071652504193862685,     -0.006516060443573302,     -0.005945638108146458,     -0.005441812007524935,     -0.004994672351370317,     -0.004596085148844993,     -0.004239323835275993,     -0.003918787005245062,     -0.003629780010503165,     -0.003368344437075814,     -0.0031311238375717836,     -0.0029152571739400786,     -0.002718293625332086,     -0.002538124003987464,     -0.00237292518079984,     -0.0022211147757790982,     -0.0020813140030855235,     -0.0019523170359852465,     -0.0018330656165747136,     -0.0017226279088993234,     -0.0016201808040860533,     -0.0015249950483367013,     -0.0014364226907244365,     -0.0013538864463342782,     -0.001276870647949287,     -0.0012049135208846331,     -0.001137600564372823,     -0.0010745588620684698,     -0.0010154521755436758,     -0.0009599767000016091,     -0.000907857382078767,     -0.0008588447161577431,     -0.0008127119495306639,     -0.0007692526377838233,     -0.0007282785011662933,     -0.000689617540357378,     -0.0006531123762904234,     -0.0006186187842269617,     -0.0005860043963696145,     -0.0005551475514238436,     -0.0005259362721790776,     -0.0004982673553056492,     -0.0004720455592991103,     -0.00044718287883896613,     -0.0004235978951050413,     -0.00040121519309561015,     -0.0003799648383069163,     -0.00035978190569166,     -0.0003406060553522691,     -0.00032238114944675006,     -0.00030505490592909695,     -0.00028857858522984115,     -0.0002729067060756482,     -0.0002579967876345579,     -0.00024380911520966136,     -0.00023030652687740992,     -0.00021745421912632148,     -0.0002052195695767992,     -0.0001935719750563917,     -0.00018248270342032322,     -0.00017192475799399502,     -0.00016187275331635382,     -0.00015230280113599675,     -0.00014319240570872507,     -0.00013452036748220727,     -0.00012626669451910085,     -0.00011841252088117362,     -0.00011094003136964075,     -0.00010383239206403088,     -9.70736861541115e-05,     -9.064885460837994e-05,     -8.454364126638481e-05,     -7.874454198128607e-05,     -7.323875747411767e-05,     -6.801414959265162e-05,     -6.305920069598252e-05,     -5.8362975911312206e-05,     -5.391508803223462e-05,     -4.970566483964957e-05,     -4.572531857965874e-05,     -4.1965117712114906e-05,     -3.8416560434431325e-05,     -3.507154991021651e-05,     -3.19223709448007e-05,     -2.8961668826155482e-05,     -2.6182428763773486e-05,     -2.3577956813496412e-05,     -2.1141862578623146e-05,     -1.8868041776592815e-05,     -1.6750661194356675e-05,     -1.4784143428122506e-05,     -1.296315283073975e-05,     -1.1282582589143565e-05,     -9.737541866572847e-06,     -8.323343642568621e-06,     -7.0354932213690655e-06,     -5.869676926977158e-06,     -4.821750977079177e-06,     -3.887729909453427e-06,     -3.063775668624977e-06,     -2.3461842283002694e-06,     -1.73137192423984e-06,     -1.2158569096862387e-06,     -7.962351863561829e-07,     -4.691415545699213e-07,     -2.3117979596017633e-07,     -7.8761485167858e-08,     -7.557296412354428e-09 \n);\n//The first 1 rows of the V matrix:\nfloat V1[257] = float[](\n    -7.557296412354437e-09,     -7.876148544472272e-08,     -2.3117979594533544e-07,     -4.6914155456999817e-07,     -7.962351863561862e-07,     -1.2158569096862438e-06,     -1.731371924239848e-06,     -2.3461842283002813e-06,     -3.063775668624993e-06,     -3.887729909453448e-06,     -4.8217509770792015e-06,     -5.8696769269771874e-06,     -7.035493221369101e-06,     -8.32334364256866e-06,     -9.737541866572901e-06,     -1.1282582589143624e-05,     -1.2963152830739818e-05,     -1.4784143428122583e-05,     -1.675066119435676e-05,     -1.8868041776592923e-05,     -2.1141862578623268e-05,     -2.3577956813496548e-05,     -2.6182428763773636e-05,     -2.8961668826155642e-05,     -3.192237094480087e-05,     -3.50715499102167e-05,     -3.841656043443153e-05,     -4.196511771211514e-05,     -4.5725318579659e-05,     -4.970566483964984e-05,     -5.3915088032234884e-05,     -5.836297591131254e-05,     -6.305920069598286e-05,     -6.8014149592652e-05,     -7.323875747411808e-05,     -7.874454198128653e-05,     -8.454364126638527e-05,     -9.064885460838047e-05,     -9.707368615411205e-05,     -0.00010383239206403147,     -0.00011094003136964141,     -0.00011841252088117427,     -0.0001262666945191015,     -0.00013452036748220803,     -0.00014319240570872589,     -0.00015230280113599765,     -0.00016187275331635477,     -0.00017192475799399602,     -0.00018248270342032422,     -0.00019357197505639277,     -0.00020521956957680033,     -0.00021745421912632273,     -0.00023030652687741122,     -0.00024380911520966274,     -0.00025799678763455933,     -0.0002729067060756499,     -0.00028857858522984283,     -0.0003050549059290988,     -0.00032238114944675174,     -0.0003406060553522711,     -0.00035978190569166196,     -0.0003799648383069184,     -0.00040121519309561254,     -0.00042359789510504364,     -0.0004471828788389687,     -0.000472045559299113,     -0.0004982673553056519,     -0.0005259362721790804,     -0.0005551475514238468,     -0.000586004396369618,     -0.0006186187842269654,     -0.0006531123762904271,     -0.0006896175403573818,     -0.0007282785011662974,     -0.0007692526377838273,     -0.000812711949530668,     -0.0008588447161577481,     -0.000907857382078772,     -0.0009599767000016143,     -0.0010154521755436814,     -0.0010745588620684758,     -0.0011376005643728292,     -0.00120491352088464,     -0.0012768706479492937,     -0.0013538864463342852,     -0.0014364226907244448,     -0.0015249950483367093,     -0.0016201808040860618,     -0.0017226279088993323,     -0.0018330656165747238,     -0.0019523170359852565,     -0.0020813140030855343,     -0.00222111477577911,     -0.0023729251807998526,     -0.0025381240039874767,     -0.0027182936253321,     -0.0029152571739400925,     -0.0031311238375717997,     -0.0033683444370758305,     -0.0036297800105031834,     -0.003918787005245081,     -0.004239323835276013,     -0.004596085148845014,     -0.004994672351370339,     -0.005441812007524961,     -0.0059456381081464844,     -0.006516060443573333,     -0.0071652504193863015,     -0.007908289063681377,     -0.00876404206880742,     -0.009756357324566223,     -0.010915727903530258,     -0.012281638652115795,     -0.013905936175421336,     -0.015857763491345746,     -0.01823094319815145,     -0.021155292334059047,     -0.024814434156073963,     -0.0294746942080659,     -0.035533591965878894,     -0.043604367113415525,     -0.05466967458531236,     -0.07037409178092931,     -0.09360645519545911,     -0.12969481008408545,     -0.18875897933945018,     -0.28852141207015103,     -0.44002348591634527,     -0.5426946241198755,     -0.44002348591634527,     -0.28852141207015103,     -0.18875897933945018,     -0.12969481008408545,     -0.09360645519545911,     -0.07037409178092931,     -0.05466967458531236,     -0.043604367113415525,     -0.035533591965878894,     -0.0294746942080659,     -0.024814434156073963,     -0.021155292334059047,     -0.01823094319815145,     -0.015857763491345746,     -0.013905936175421336,     -0.012281638652115795,     -0.010915727903530258,     -0.009756357324566223,     -0.00876404206880742,     -0.007908289063681377,     -0.0071652504193863015,     -0.006516060443573333,     -0.0059456381081464844,     -0.005441812007524961,     -0.004994672351370339,     -0.004596085148845014,     -0.004239323835276013,     -0.003918787005245081,     -0.0036297800105031834,     -0.0033683444370758305,     -0.0031311238375717997,     -0.0029152571739400925,     -0.0027182936253321,     -0.0025381240039874767,     -0.0023729251807998526,     -0.00222111477577911,     -0.0020813140030855343,     -0.0019523170359852565,     -0.0018330656165747238,     -0.0017226279088993323,     -0.0016201808040860618,     -0.0015249950483367093,     -0.0014364226907244448,     -0.0013538864463342852,     -0.0012768706479492937,     -0.00120491352088464,     -0.0011376005643728292,     -0.0010745588620684758,     -0.0010154521755436814,     -0.0009599767000016143,     -0.000907857382078772,     -0.0008588447161577481,     -0.000812711949530668,     -0.0007692526377838273,     -0.0007282785011662974,     -0.0006896175403573818,     -0.0006531123762904271,     -0.0006186187842269654,     -0.000586004396369618,     -0.0005551475514238468,     -0.0005259362721790804,     -0.0004982673553056519,     -0.000472045559299113,     -0.0004471828788389687,     -0.00042359789510504364,     -0.00040121519309561254,     -0.0003799648383069184,     -0.00035978190569166196,     -0.0003406060553522711,     -0.00032238114944675174,     -0.0003050549059290988,     -0.00028857858522984283,     -0.0002729067060756499,     -0.00025799678763455933,     -0.00024380911520966274,     -0.00023030652687741122,     -0.00021745421912632273,     -0.00020521956957680033,     -0.00019357197505639277,     -0.00018248270342032422,     -0.00017192475799399602,     -0.00016187275331635477,     -0.00015230280113599765,     -0.00014319240570872589,     -0.00013452036748220803,     -0.0001262666945191015,     -0.00011841252088117427,     -0.00011094003136964141,     -0.00010383239206403147,     -9.707368615411205e-05,     -9.064885460838047e-05,     -8.454364126638527e-05,     -7.874454198128653e-05,     -7.323875747411808e-05,     -6.8014149592652e-05,     -6.305920069598286e-05,     -5.836297591131254e-05,     -5.3915088032234884e-05,     -4.970566483964984e-05,     -4.5725318579659e-05,     -4.196511771211514e-05,     -3.841656043443153e-05,     -3.50715499102167e-05,     -3.192237094480087e-05,     -2.8961668826155642e-05,     -2.6182428763773636e-05,     -2.3577956813496548e-05,     -2.1141862578623268e-05,     -1.8868041776592923e-05,     -1.675066119435676e-05,     -1.4784143428122583e-05,     -1.2963152830739818e-05,     -1.1282582589143624e-05,     -9.737541866572901e-06,     -8.32334364256866e-06,     -7.035493221369101e-06,     -5.8696769269771874e-06,     -4.8217509770792015e-06,     -3.887729909453448e-06,     -3.063775668624993e-06,     -2.3461842283002813e-06,     -1.7313719242398478e-06,     -1.215856909686244e-06,     -7.962351863561862e-07,     -4.6914155456992316e-07,     -2.311797959601771e-07,     -7.876148516785817e-08,     -7.557296412354435e-09 \n);\n//The first 1 singular values:\nfloat S[1] = float[](\n    0.045983058370594285 \n);\n//center of the convolution\nint Nc = 128;\n    \n    \n    //do a convolution in the x direction on iChannel0\n    vec3 sum = vec3(0.0);\n    ivec2 coord = ivec2(fragCoord);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        vec4 pixel = texelFetch(iChannel0, ivec2(coord.x, coord.y + i), 0);\n        //multiply the pixel by the coefficient\n        pixel.xyz *= S[0] * V1[i + Nc] / (pixel.w+1e-5);\n        //add the pixel to the sum\n        sum += pixel.xyz;\n    }\n\n    //write the sum to the output\n    fragColor = vec4(sum, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}