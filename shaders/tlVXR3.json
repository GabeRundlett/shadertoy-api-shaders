{
    "Shader": {
        "info": {
            "date": "1583272087",
            "description": "Another edit of my fire shader.\n\nMove the mouse to zoom in and out!",
            "flags": 0,
            "hasliked": 0,
            "id": "tlVXR3",
            "likes": 4,
            "name": "Fractal Blizzard",
            "published": 3,
            "tags": [
                "fractal",
                "snow",
                "blizzard",
                "snowstorm"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "\n//This parameter changes the magnification.\nconst float mag = 8.0;\n\nconst float GREEN = 0.0;\nconst float BLUE = 7.0;\nconst float SNOW = 2.0;\nconst float YELLOW = 9.0;\nconst float RED = 5.0;\nconst float WHITE = 6.0;\nconst float PALE_GREEN = 1.0;\nconst float BLACK = 8.0;\nconst float GRAY = 3.0;\nconst float ORANGE = 10.0;\n//this function is from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tfloat num_colors = 3.0;\n    //set the number of colors to be randomly generated\n    \n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return floor(fract((p3.x + p3.y) * p3.z)*num_colors);\n}\n\n\nfloat magnify(vec2 fragCoord,float mag){\n\treturn hash12(floor(fragCoord/pow(2.0,mag)));\n}\n\nbool is_above(vec2 fragCoord,float mag,float color){\n\treturn magnify(fragCoord,mag) == color;\n}\nbool is_surrounded_by(vec2 fragCoord,float mag,float color){\n\treturn magnify(fragCoord+vec2(0,1),mag) == color\n        && magnify(fragCoord+vec2(1,0),mag) == color\n        && magnify(fragCoord-vec2(0,1),mag) == color\n        && magnify(fragCoord-vec2(1,0),mag) == color;\n}\n\nbool is_next_to(vec2 fragCoord,float mag,float color){\n\tfloat offset = iTime*20.0;\n    return magnify(fragCoord+vec2(offset,1),mag) == color\n        || magnify(fragCoord+vec2(1,offset),mag) == color\n        || magnify(fragCoord-vec2(offset,1),mag) == color\n        || magnify(fragCoord-vec2(1,-offset*10.0),mag) == color;\n}\n\n\nvec3 get_color(float color){\n    if(color == BLUE){\n    \treturn vec3(0.149,0.141,0.912);\n   \t}\n    else if(color == GREEN){\n    \treturn vec3(0.000,0.833,0.224);\n   \t}\n    else if(color == RED){\n    \treturn vec3(1.0,0.0,0.0);\n   \t}\n    else if(color == WHITE){\n    \treturn vec3(1.0,1.0,1.0);\n   \t}\n    else if(color == SNOW){\n    \treturn vec3(255, 250, 250)/255.0;\n    }\n    else if(color == GRAY){\n    \treturn vec3(192.0,192.0,192.0)/255.0;\n    }\n    else if(color == YELLOW){\n    \treturn vec3(1.0,1.0,0.0);\n   \t}\n    else if(color == ORANGE){\n    \treturn vec3(255,127,80)/255.0;\n    }\n    else if(color == BLACK){\n    \treturn vec3(0.0,0.0,0.0);\n   \t}\n    else if(color == PALE_GREEN){\n    \treturn vec3(152,251,152)/255.0;\n    }\n}\n\nfloat iterations(float color1,in vec2 fragCoord,float mag){\n    float mag1 = 0.0;\n    while(mag1 < mag){\n    bool modified = true;\n    if(color1 == GREEN && is_next_to(fragCoord,mag1,PALE_GREEN)){\n    \tcolor1 = PALE_GREEN;\n    }\n    else if(color1 == PALE_GREEN && is_next_to(fragCoord,mag1,SNOW)){\n        if(mag1 > 5.0){\n        \tcolor1 = SNOW;\n        }\n        else{\n        \tcolor1 = SNOW;\n        }\n    }\n    else if(color1 == SNOW && is_next_to(fragCoord,mag1,GREEN)){\n        color1 = GREEN;\n    }\n    else if(color1 == SNOW && is_next_to(fragCoord,mag1,PALE_GREEN) && is_next_to(fragCoord,mag1,SNOW)){\n        color1 = WHITE;\n    }\n    \n    mag1 += 1.0;\n    }\n    return color1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = fragCoord*(((iMouse.x-iMouse.y)+iResolution.x)/iResolution.x) + iTime*2.0*vec2(50.0,0.0);\n    float color1 = magnify(fragCoord,mag);\n    //color1 = replace_pattern(mat2(1.0,1.0,1.0,1.0),mat2(0.0,2.0,2.0,0.0),fragCoord,mag);\n\n    color1 = iterations(color1,fragCoord,mag-1.0);\n\n    fragColor = vec4(get_color(color1),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}