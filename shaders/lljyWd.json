{
    "Shader": {
        "info": {
            "date": "1510738383",
            "description": "Approximation of the first quadrant of the sine function using a cubic polynomial based on Hermite basis functions. See source for more info.",
            "flags": 0,
            "hasliked": 0,
            "id": "lljyWd",
            "likes": 11,
            "name": "Sine approximation",
            "published": 3,
            "tags": [
                "sin",
                "approximation",
                "sine",
                "crossfade"
            ],
            "usePreview": 0,
            "username": "grinist",
            "viewed": 1768
        },
        "renderpass": [
            {
                "code": "// Approximation of the first quadrant of the sine function using a cubic polynomial\n// based on Hermite basis functions.\n// This is basically h01 + a * h10 expanded, where\n// h01 and h10 are two of the Hermite basis functions, and\n// a is chosen so that at x = 0.5 the function value is sqrt(0.5).\n// Thus a = (sqrt(0.5) - 0.5) / 0.125.\n// Properties:\n// Maximum absolute error: 0.007085 at x = 0.18704\n// Error is zero at x = 0, x = 0.5 and x = 1\n// C-inf continuous in domain [0, 1]\n// The error is big for most geometric applications. For interpolation and cross-fading\n// the function is useful. Full sin and cos can be constructed using symmetry.\n// A more accurate approximate can be found tweaking constants, sacrificing one or more of the\n// above properties.\n\n// Plots:\n// Blue: sin(x * 0.5 * PI)\n// Red: approximate\n// Yellow: error\n// Green: Crossfade power-preservation: f(x)^2 + f(1-x)^2 (1 is desirable)\n\n#define PI 3.1415926536\n#define C -0.3431457505\n#define B -0.31370849898\n#define A 1.65685424949\n\n// Approximate\nfloat approxSinstep(float x)\n{\n    return x * (x * (C * x + B) + A);\n}\n\n// What we're approximating\nfloat sinstep(float x)\n{\n    return sin(x * 0.5 * PI);\n}\n\n// ----- The rest is just for demo\n\nvec2 xy;\t\t// current graph coords\nvec2 dxy; \t\t// pixel size in graph units\nvec4 fColor;\t// current fragment color\n\nvoid mixColor(vec4 color, float alpha)\n{\n    fColor = vec4(mix(fColor.rgb, color.rgb, alpha * color.a), 1.0);\n}\n\nvoid drawGrid(float stepSize, vec4 gridCol)\n{\n\tfloat mul = 1.0 / stepSize;\n\tvec2 g = abs(vec2(-0.5) + fract((xy + vec2(stepSize) * 0.5) * mul)); // g passes 0 at stepSize intervals\n\tg = vec2(1.0) - smoothstep(vec2(0.0), dxy * mul * 1.5, g);\n    mixColor(gridCol, max(g.x, g.y));\n}\n\nvoid drawCurve(float value, vec4 curveCol)\n{\n\t// Using y distance to curve, modifying distance threshold with approximated slope\n    // Derivative breaks with drastic changes of value and discontinuities, but so be it\n    float yDist = abs(value - xy.y);\n    float dValue = abs(dFdx(value));\n\tfloat c = 1.0 - smoothstep(0.0, (dxy.y + dValue) * 2.0, yDist);\n\tmixColor(curveCol, c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // graph setup\n\tfloat aspect = iResolution.x / iResolution.y;\n\tvec2 graphSize = vec2(aspect * 1.2, 1.2);\n\tvec2 graphPos = 0.5 - graphSize * 0.5;\n\n\txy = graphPos + uv * graphSize;\t\t// graph coords\n\tdxy = graphSize / iResolution.xy;\t// pixel size in graph units\n\n    // background\n\tfColor = mix(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.8, 0.8, 0.8, 1.0), pow(length(0.5 - uv) * 1.414, 3.5));\n    \n\t// grid\n    drawGrid(0.1, vec4(0.0, 0.0, 0.0, 0.125));\n\tdrawGrid(0.5, vec4(0.0, 0.0, 0.0, 0.25));\n\tdrawGrid(1.0, vec4(0.0, 0.0, 0.0, 0.5));\n\n    // curves\n    float sinVal = sinstep(xy.x);\n    float approxVal = approxSinstep(xy.x);\n    float invApproxVal = approxSinstep(1.0 - xy.x);\n    float error = approxVal - sinVal;\n    float powPreservation = approxVal * approxVal + invApproxVal * invApproxVal;\n    \n    drawCurve(sinVal, vec4(0.15, 0.5, 0.9, 0.7));\n    drawCurve(approxVal, vec4(0.9, 0.15, 0.3, 0.7));\n    drawCurve(error, vec4(0.9, 0.5, 0.15, 0.7));\n    drawCurve(powPreservation, vec4(0.15, 0.9, 0.5, 0.7));\n\n\tfragColor = fColor;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}