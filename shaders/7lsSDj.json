{
    "Shader": {
        "info": {
            "date": "1626619326",
            "description": "Extended my previous shader code for waving Indian Flags to now have multiple Indian Flags: https://www.shadertoy.com/view/7tXXD2",
            "flags": 0,
            "hasliked": 0,
            "id": "7lsSDj",
            "likes": 0,
            "name": "Multiple Waving Indian Flags",
            "published": 3,
            "tags": [
                "flags",
                "india"
            ],
            "usePreview": 0,
            "username": "napsternxg",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "vec3 WHITE = vec3(1);\nvec3 BLACK = vec3(0);\nvec3 SAFFRON = vec3(255,153,51)/255.;\nvec3 GREEN = vec3(19,136,8)/255.;\nvec3 BLUE = vec3(0,0,128)/255.;\nfloat PI = radians(180.);\n\n\nfloat get_band(float x, float width,  float smoothing_d){\nreturn smoothstep(0., smoothing_d, x)*smoothstep(0., smoothing_d, -x + width);\n    \n}\n\nvec3 Flag(vec2 uv, float ratio){\n\n// Normalized pixel coordinates (from 0 to 1)\n    \n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n\n    float band = floor(uv.y*3.);\n    \n    col = BLACK;\n    \n    //float flag_region = smoothstep(0., 0.01, band+1.)*smoothstep(0., 0.01, -band + 3.);\n    float flag_region = get_band(band+1., 4., 0.001);\n    \n    float top = flag_region*smoothstep(0., 0.01, band + 3.);\n    col = mix(col, GREEN, top);\n    \n    top = top*smoothstep(0., 0.01, band);\n    col = mix(col, WHITE, top);\n    \n    top = top*smoothstep(0., 0.01, band-1.);\n    col = mix(col, SAFFRON, top);\n    \n    \n    /**\n    if(band < 3. && band > -1.){\n        if (band > 1.){\n            col = SAFFRON;\n        } else if (band > 0.) {\n            col = WHITE;\n        } else if (band > -1.){\n            col = GREEN; \n        }\n    }\n    **/\n    \n    \n    vec2 center = vec2(0.5);\n    vec2 cuv = uv - center;\n    cuv.y = cuv.y*ratio;\n    float d = length(cuv);\n    //float angle = (PI + atan(cuv.y, cuv.x))/2.*PI;\n    float angle = atan(cuv.y, cuv.x)/PI;\n    angle = 12.*angle;\n    angle = fract(angle);\n    \n    float circle_r = 0.09;\n    float circle_w = 0.01;\n    \n    //float circle_rim = smoothstep(0., 0.01, d-circle_r + circle_w)*smoothstep(0., 0.01, d-circle_r);\n    float circle_rim = get_band(d-(circle_r - circle_w), circle_w, 0.001);\n    col = mix(col, BLUE, circle_rim);\n    \n    /**\n    if(d > circle_r - circle_w && d < circle_r){\n        col = BLUE;\n    }\n    **/\n    \n    col = mix(col, BLUE, smoothstep(0., 0.001, -d+0.01));\n    /**\n    if(d < 0.01){\n        col = BLUE;\n    }\n    **/\n    \n    \n    col = mix(col, BLUE, smoothstep(0., 0.001, -d+circle_r)*get_band(angle-0.8, 0.2, 0.01));\n    \n    /**\n    if(d < circle_r && angle > 0.8){\n        col = BLUE;\n    }\n    **/\n    \n    col = mix(BLACK, col, flag_region);\n    \n    return col;\n\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x = fract(5.*uv.x);\n    uv.y = fract(5.*uv.y);\n    \n    float t = uv.x*7. - 2.*iTime + uv.y*3.;\n    \n    uv.y += sin(t)*0.03;\n    \n    \n    float ratio = iResolution.y/iResolution.x;\n    vec3 col = Flag(uv, ratio);\n    \n    col *= .9 + cos(t)*0.2;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}