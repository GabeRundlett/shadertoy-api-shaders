{
    "Shader": {
        "info": {
            "date": "1719506545",
            "description": "combination \norigianals sources https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/7dtBR7 https://www.shadertoy.com/view/Dd23DV",
            "flags": 0,
            "hasliked": 0,
            "id": "43dSDB",
            "likes": 2,
            "name": "fractalic spike",
            "published": 3,
            "tags": [
                "fractal",
                "space",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "#define R(p,a,t) mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a)\n#define H(h) (cos((h)*2.3+vec3(24,53,21))*5.5+.5)\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    \n  \n    return mat2(c, -s, s, c);\n}\n#define PI 3.14159265\n\nvec3  rot(vec3 p,vec3 a,float t)\n{\n\ta=normalize(a);\n\treturn mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a);\n}\n\n#define sabs(x) sqrt(x*x+5e-4)\n\n// https://www.shadertoy.com/view/MsKGzw\nvec3 foldVec(float t){\n    vec3 n=vec3(-.5,-cos(PI/t),0);\n    n.z=sqrt(1.-dot(n,n));         // normalize\n\treturn n;\n}\n\nvec3 fold(vec3 p, float t)\n{\n    vec3 n=foldVec(t);\n    for(float i=0.; i<t; i++){\n    \tp.xy=sabs(p.xy);\n\t\tfloat g=dot(p,n);\n\t\tp-=(g-sabs(g))*n;\n    }\n    return p;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p)\n{\n\tp=rot(p,vec3(cos(iTime*.3),sin(iTime*.5),.5*sin(iTime*.2)),iTime*.7);\n    float s=1.,e;\n    p = fold(p,5.);\n    p.z-=.3;\n    e=1.5;\n  \tp*=e;\n  \ts*=e;\n    p = fold(p,3.);\n    p.z-=1.;\n  \te=1.6;\n  \t\n    p = fold(p,4.);\n    p.z-=1.;\n    p=rot(p,vec3(1,10,2),-PI/2.*(sin(iTime)*.5+.5));\n    vec3 a=vec3(1.1,.4,.1);\n    return (sdBox(p,a)-.05)/s;\n}\n\nvec3 calcNormal(vec3 p)\n{\n  vec3 n=vec3(0);\n  for(int i=0; i<4; i++){\n    vec3 e=.001*(vec3(9>>i&1, i>>1&1, i&1)*2.-1.);\n    n+=e*map(p+e);\n  }\n  return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<70;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nvec3 doColor(vec3 p)\n{\n    return vec3(.7,.5,.3)+cos(p*2.)*.5+.5;\n}\nfloat star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\n\nvoid mainImage(out vec4 O, vec2 C)\n{\nvec2 uv2 = ( C - .5*iResolution.xy ) / iResolution.y;\n    vec3 p,r=iResolution,c=vec3(0),\n    d=normalize(vec3((C-.5*r.xy)/r.y,.7));\n     d.zy*=Rot(iTime*1.1);\n       d.xy*=Rot(iTime*1.1);\n    float i=0.,s,e,g=0.,t2=iTime;\n    \n     vec2 uv = (C.xy*2.-iResolution.xy)/iResolution.y;\n   vec3 ro = vec3(0,0,-10);\n    vec3 rd = normalize(vec3(uv,2));\n    vec3 col= vec3(0);\n\tconst float maxd=50.;\n    float t=march(ro,rd,0.,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=doColor(p); \n        vec3 n=calcNormal(p);      \n\t\tvec3 lightPos=ro+vec3(2,5,2);\n    \tvec3 li=lightPos-p;\n\t\tfloat len=length(li);\n\t\tli/=len;\n\t\tfloat dif=clamp(dot(n,li),0.1,1.);\n        col*=max(dif,0.);\n        float rimd=pow(clamp(1.-dot(reflect(-li,n),-rd),0.,1.),2.5);\n\t\tfloat frn=rimd+2.2*(1.-rimd);\n    \tcol*=frn*.8;\n        col*=max(.5+.5*n.y,.1);\n        col*=exp2(-2.*pow(max(0.,1.-map(p+n*.8)/.8),2.));\n        col+=vec3(.8,.6,.2)*pow(clamp(dot(reflect(rd,n),li),0.,1.),10.);\n    }\n    col=pow(col,vec3(1./2.2));\n\tfor(;i++<90.;){\n  \n        p=R(g*d,normalize(H(t*.1)),col.x);\n    \n       \n        s=1.5+sin(.5*t+3.*sin(t*2.))*.5;\n        for(int i=0;i++<6;p=p*e-vec3(3,2.5,3.5))\n      \n            p=abs(p+col),\n            p=p.x<p.y?p.zxy:p.zyx,\n            p=p.z<p.y?p.xzy:p.zyx,\n              \n            s*=e=2.;\n        g+=e=abs(length(p.xzy+0.3*cos(iTime))-.3)/s+2e-5;\n\t    c+=mix(vec3(1),H(p.z*col.x*.5+t*.1),.4)*.02/exp(.5*i*i*e);\n\t}\n\tc*=c;\n     uv2 *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n   \n    O=vec4(c,1.);\n     O+= vec4(star(uv2+col.xy, anim) * vec3(0.35,0.2,1.15)*0.21, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}