{
    "Shader": {
        "info": {
            "date": "1610733631",
            "description": "Heres I a little function you can use in your own project!",
            "flags": 0,
            "hasliked": 0,
            "id": "tlKcRm",
            "likes": 4,
            "name": "Cubic BÃ©zier Curve (1D)",
            "published": 3,
            "tags": [
                "math",
                "bezier",
                "curve"
            ],
            "usePreview": 0,
            "username": "Tech_",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "float CubicBezier(float x, vec4 u)\n{\n    return u.x * pow(1.0 - x, 3.0)\n         + 3.0 * u.y * pow(1.0 - x, 2.0) * x\n         + 3. * u.z * pow(1.0 - x, 2.0) * pow(x, 2.0)\n         + u.w * pow(x, 3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= 0.35;\n    uv.y *= 2.0;\n    \n    vec4 bezierU = vec4(0.0, 1.0, 0.0, 1.0);\n    \n    uv.y -= CubicBezier(clamp(uv.x, 0.0, 1.0), bezierU);\n\n    vec3 color;\n    color += smoothstep(0.03, 0.02, distance(uv.y, 0.5) * 2.0) * smoothstep(0.0, 0.1, 1. - distance(uv.x, 0.5) * 2.);\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}