{
    "Shader": {
        "info": {
            "date": "1544480166",
            "description": " just playing with raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "MtKfWy",
            "likes": 39,
            "name": "Swirly Strands",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "domain"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 2330
        },
        "renderpass": [
            {
                "code": "// PLENTO\n\n\n\n\n#define FAR 80.0\n#define DISTANCE_BIAS 0.6\n#define HASHSCALE1 .1031\n#define EPSILON 0.001\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat map(vec3 rp)\n{\n \n    float res = 0.0;\n    \n    vec3 pos = rp - vec3(1.0, -0.25, 4.0);\n  \n    vec3 b = vec3(1.0, 1.0, 1.0);\n   \n    pos.xy *= rot(pos.z*0.3);\n    pos.y += sin(pos.z + iTime + pos.x*1.0)*0.2;\n    pos.x += cos(pos.y - pos.z * 2.0 + iTime)*0.3;\n \n    pos = mod(pos, b)-0.5*b;\n    \n    //res = sdBox(pos, vec3(0.01, 0.01, 2.0));\n   res = sdBox(pos, vec3(0.033, 0.033, 2.0));\n   \n  \n    return res;\n}\n\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(0.0035, -0.0035); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n\n// swirly color thing\nvec3 oc(vec3 p)\n{\n    p.xy *= rot(p.z*0.64);\n    vec3 col = mix(vec3(0.0, 0.3, 1.3), vec3(1.2, 1.2, 0.0),  smoothstep(0.0, 1.0, p.x));\n    return col;\n}\n\nvec3 color(vec3 ro, vec3 rd, vec3 norm, vec3 lp, float t)\n{\n    \n    // Lighting\n    vec3 ld = lp-ro;\n    float lDist = max(length(ld), 0.001); // Light to surface distance.\n    float atten = 1.0 / (1.0 + lDist*0.2 + lDist*lDist*0.1); // light attenuation \n    \n    ld /= lDist;\n    \n    // Diffuse\n    float diff = max(dot(norm, ld), 0.0);\n    \n    // specular\n    float spec = pow(max( dot( reflect(-ld, norm), -rd ), 0.0 ), 12.0);\n    \n    //Colors\n    vec3 objCol = oc(ro);\n    \n    objCol = oc(ro);\n    \n    vec3 sceneCol = (objCol*(diff + 0.15) + vec3(1.0, 1.0, 1.0)*spec*1.2) * atten;\n   \n    // Get final color\n    return sceneCol;\n    \n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0, d = 0.0; \n   \n    for (int i = 0; i < 100; i++) \n    {\n        d = map(ro + rd*t);\n       \n        if(abs(d)<EPSILON || t > FAR) break;\n         \n        \n        t += d * DISTANCE_BIAS;\n    }\n    return t;\n}\nfloat traceRef(vec3 ro, vec3 rd){\n    \n    float t = 0.0, d = 0.0;\n    \n    for (int i = 0; i < 64; i++)\n    {\n        d = map(ro + rd*t);\n      \n        if(abs(d)<.0025 || t>FAR) break;\n        \n        t += d;\n    }\n    \n    return t;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y; \n \n    vec3 ro = vec3(0.0, 0.0, 0.0); \n    vec3 rd = normalize(vec3(uv,2.0));\n    ro.z -= iTime * 0.7;\n   \n    // fish eye\n     rd = normalize(vec3(uv, 1.0 - dot(uv, uv) * 0.75));\n    \n    // light position\n    vec3 lp = ro + vec3(0.0, 1.0, -0.5);\n    \n    \n    // Scene\n    float t = trace(ro, rd);\n \n    ro += rd * t;\n    vec3 rr = ro;\n    vec3 norm = getNormal(ro); \n    \n    vec3 col = color(ro, rd, norm, lp, t);\n    \n    float fog = t;\n    \n   \n    // Reflection  \n    rd = reflect(rd, norm);\n    \n    t = traceRef(ro +  rd*.01, rd);\n    \n    ro += rd*t;\n    \n    norm = getNormal(ro);\n   \n    col += color(ro, rd, norm, lp, t) * 0.25;\n    \n   \n    fog = smoothstep(0.0, 0.15, fog / 130.);\n    col = mix(col, vec3(0), fog);\n    \n   \n    col *= smoothstep(2.0, 0.29, length(uv));\n    \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}