{
    "Shader": {
        "info": {
            "date": "1721417946",
            "description": "Useful as a webcam filter to check if people are still paying attention in an online meeting. :-)",
            "flags": 0,
            "hasliked": 0,
            "id": "lclyDN",
            "likes": 4,
            "name": "Cube blends in",
            "published": 3,
            "tags": [
                "3d",
                "cube"
            ],
            "usePreview": 0,
            "username": "ruudhelderman",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "// \"Cube blends in\"\n// https://www.shadertoy.com/view/lclyDN\n// Ruud Helderman, July 2024 - MIT License\n\n#define PI 3.1415926536\n\n#define cam_zoom       0.2\n#define cam_distance   5.5   // (0.5 + 1.0/cam_zoom) to let the cube exactly fit the background at angle=0\n#define ambient_light  0.5\n\n#define rot_angle      (4.0 * PI * smoothstep(0.1, 0.8, fract(iTime / 12.0)))\n//#define rot_angle    (4.0 * PI * smoothstep(0.9, 1.0, fract(iTime / 60.0)))\n//#define rot_angle    iTime\n//#define rot_angle    (iMouse.x / iResolution.x * PI * 4.0)\n\nvoid cube_face(in vec3 cam, in vec3 ray, inout vec4 closest)\n{\n    if (abs(ray.z) > 1e-9)\n    {\n        float dist = (-0.5 * sign(ray.z) - cam.z) / ray.z;\n        if (dist < closest.z)\n        {\n            cam += dist * ray;\n            if (abs(cam.x) < 0.5 && abs(cam.y) < 0.5)\n            {\n                closest = vec4(cam.xy, dist, abs(ray.z));\n            }\n        }\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float fit = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / fit;\n\n    vec2 cossin = sin(rot_angle + vec2(0.5 * PI, 0));\n    mat2 rotate = mat2(cossin, -cossin.y, cossin.x);\n    \n    vec3 cam = vec3(0, 0, cam_distance);\n    vec3 ray = vec3(uv * cam_zoom * rotate, -1);\n    \n    cam.xz *= rotate;  ray.xz *= rotate;    // rotating not the cube but the camera\n    cam.xy *= rotate;  ray.xy *= rotate;\n    \n    vec4 closest = vec4(uv, 9e9, 1.0);      // x, y = image coordinates, z = distance, w = brightness\n\n    cube_face(cam    , ray    , closest);   // raytracing the z face\n    cube_face(cam.yzx, ray.yzx, closest);   // raytracing the x face\n    cube_face(cam.zxy, ray.zxy, closest);   // raytracing the y face\n    \n    fragColor = texture(iChannel0, closest.xy * fit / iResolution.xy + 0.5) * mix(ambient_light, 1.0, closest.w);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}