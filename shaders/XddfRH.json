{
    "Shader": {
        "info": {
            "date": "1524071628",
            "description": "transform mapping or create implicit profiles. see params in code.\ntop left: simple tiling transform.    top right:  displacement.    \nbottom: distorted profile for veins (left: circular right: linear).\nPress space to see func profile vs mapped texture.",
            "flags": 16,
            "hasliked": 0,
            "id": "XddfRH",
            "likes": 8,
            "name": "tiler/profile/warper (base brick",
            "published": 3,
            "tags": [
                "2d",
                "tool",
                "transforms",
                "mz"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 719
        },
        "renderpass": [
            {
                "code": "vec2  TILES = vec2(5,.1);\nivec2 TYPE  = ivec2(1,0);  // 0:unchanged 1:reversed 2:triangle  3:cos()\nfloat NOISE_A = .4,\n      NOISE_S = 8.,\n      PI2 = 6.28319;\n\n// --- tilers / warper / profile functions ---------------- \nvec2 tiler(vec2 U, vec2 T) {\n    return fract(U*T);\n}\nvec2 scale(vec2 U, vec2 S) {\n    return clamp( .5+(U-.5)/S, 0., 1. );\n}\nvec2 profile(vec2 U, ivec2 type) {\n    mat4x2 M = mat4x2( U, 1.-U, 2.*min(U,1.-U), .5-.5*cos(PI2*U) );\n    return vec2 ( M[type.x][0], M[type.y][1]);\n}\nvec2 polar(vec2 U) {\n    U = 2.*U-1.;\n    return vec2(atan(U.y,U.x)/PI2 + .5, length(U));\n}\nvec2 noise2(vec2 p);\nvec2 fbm2(vec2 p);\nvec2 displace(vec2 U, float amp, float scale) {\n    return  U += amp/scale* noise2(U*scale);\n}\n// --------------------------------------------------------\n\n#define hash22(p)  fract( 18.5453 * sin( (p) * mat2(127.1,311.7,269.5,183.3)) )\nvec2 noise2(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n    vec2 v= mix( mix(hash22(i+vec2(0,0)),hash22(i+vec2(1,0)),f.x),\n                  mix(hash22(i+vec2(0,1)),hash22(i+vec2(1,1)),f.x), f.y);\n    return 2.*v-1.;\n}\nvec2 fbm2(vec2 p ) { return noise2(p)/2. + noise2(2.*p)/4. + noise2(4.*p)/8.; }\n    \nbool keyToggle(int ascii) {\n\treturn (texture(iChannel3,vec2((.5+float(ascii))/256.,0.75)).x > 0.);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U *= 2./iResolution.xy;\n    if (U.x<1.) if (U.y > 1.){             // top left: simple tiling transform\n        U = tiler(U,TILES);             \n        U = profile(U,TYPE);           \n        O =  texture(iChannel0, U);\n    } else  {                              // bottom left: circular veins\n        U = displace(U,NOISE_A,NOISE_S);\n        U = polar(U);\n        U = tiler(U,vec2(1,3));\n        U = scale(U, vec2(1,.3));\n        U = profile(U,ivec2(0,3));        \n    } else if (U.y > 1.) {                 // top right: displacement\n        U = displace(U,NOISE_A,NOISE_S);\n    } else {                               // bottom right: linear veins\n        U = displace(U,NOISE_A,NOISE_S);\n        U = tiler(U,TILES);\n        U = scale(U, vec2(.3,1));\n        U = profile(U,ivec2(3,0));\n    }\n    \n    O = keyToggle(32) ? vec4(U,0,0) : texture(iChannel0, U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}