{
    "Shader": {
        "info": {
            "date": "1664228663",
            "description": "blips",
            "flags": 0,
            "hasliked": 0,
            "id": "NdKXWt",
            "likes": 0,
            "name": "blipsy",
            "published": 3,
            "tags": [
                "blips"
            ],
            "usePreview": 0,
            "username": "Wally869",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "\nvec2 gridSize = vec2(10.0, 10.0);\n\nfloat maskSize = 0.33;\n\nvec2 resolution = vec2(800.0, 800.0);\n\n\n\nfloat fullCycle = 10.0;\nfloat timeToVisible = 1.0;\nfloat timeToInvisible = 1.0;\nfloat timeVisible = 2.0;\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat getDistance(vec2 p) {\n    return sqrt((p.x - 0.5) * (p.x - 0.5) + (p.y - 0.5) * (p.y - 0.5));\n}\n\nfloat easeInOutBack(float x) {\nfloat c1 = 1.70158;\nfloat c2 = c1 * 1.525;\n\nreturn x < 0.5\n  ? (pow(2.0 * x, 2.0) * ((c2 + 1.0) * 2.0 * x - c2)) / 2.0\n  : (pow(2.0 * x - 2.0, 2.0) * ((c2 + 1.0) * (x * 2.0 - 2.0) + c2) + 2.0) / 2.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvMask = fract(fragCoord/iResolution.xy * gridSize);\n    uv += vec2(0.05, 0.05);\n    \n    vec2 uvID = round(uv * gridSize) / gridSize;\n    \n    float id = hash(uvID);\n\n    \n    float normalTime = mod(iTime + id * 10.0, fullCycle);\n    \n    float fullDuration = timeToVisible + timeToInvisible + timeVisible;\n    float timeStartToInvisible = timeToVisible + timeVisible;\n    \n    float baseMaskLevel = normalTime > fullDuration ? 0.0 : easeInOutBack(clamp(normalTime / timeToVisible, 0.0, 1.0));\n    float otherMaskLevel = normalTime < timeToVisible + timeVisible || normalTime > fullDuration ? 0.0 : easeInOutBack(clamp((normalTime - timeToVisible - timeVisible) / timeToInvisible, 0.0, 1.0));\n\n    float mask = getDistance(uvMask) < maskSize * baseMaskLevel ? 1.0 : 0.0; \n    float mask2 = getDistance(uvMask) < maskSize * otherMaskLevel ? 0.0 : 1.0;\n\n\n    \n    fragColor = vec4(mask * mask2, 0.0, 0.0, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}