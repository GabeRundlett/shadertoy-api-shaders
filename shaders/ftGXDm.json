{
    "Shader": {
        "info": {
            "date": "1640774507",
            "description": "Mandelbrot sets with different power values stacked on top of one another.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGXDm",
            "likes": 4,
            "name": "Mandelstatue Fake 3D",
            "published": 3,
            "tags": [
                "mandelbrot",
                "fake3d"
            ],
            "usePreview": 0,
            "username": "InvalidString",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "vec2 cMul(vec2 a, vec2 b){\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nvec2 cPow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\n\n\nvec2 rot(float a, vec2 p){\n    return cMul(p, vec2(cos(a),sin(a)));\n}\n\nfloat sqrl(vec2 v){return dot(v,v);}\n\n#define sw(x) (sin(x)*.5+.5)\n\nfloat mb(vec2 uv, float power){\n    vec2 x = vec2(0);\n    \n    for(int j = 0; j< MANDELBROT_ITERATIONS; j++){\n        x += uv;\n        \n        x = cPow(x,power);\n        \n        float l = sqrl(x);\n        \n        if(l > 4.){return l;}\n        \n        //x = cMul(x,x);\n        \n    }\n    \n    return sqrl(x);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    uv *= 3.;\n    \n    \n    uv *= vec2(1,2); // Squish\n    \n    \n    \n    \n    vec3 col = vec3(0);\n    \n    uv += vec2(0,1.3);\n    \n    \n    vec2 offset = vec2(0,-LAYER_OFFSET);\n    \n    for(float i = MAX_POW; i>MIN_POW; i-=LAYER_OFFSET/2.){\n    \n        vec2 ruv = rot(iTime*0.5,uv);\n        \n        float m = mb(ruv, i);\n    \n        \n        if(m < 4.){\n            col = vec3(sw(i*10.), sw(i*50.) * 0.1+0.4, sw(ruv.x * ruv.y*5.));\n        }\n        \n        uv += offset;\n    \n    }\n    \n    \n    \n    \n    \n    //col = mb(uv)<2. ? vec3(0) : vec3(1);\n    //col = mix(vec3(0),vec3(1), smoothstep(1., 3., length(x)));\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MANDELBROT_ITERATIONS 15\n#define LAYER_OFFSET 0.02\n\n#define MIN_POW 1.\n#define MAX_POW 3.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}