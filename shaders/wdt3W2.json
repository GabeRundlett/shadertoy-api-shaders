{
    "Shader": {
        "info": {
            "date": "1569335514",
            "description": "shockwave test",
            "flags": 0,
            "hasliked": 0,
            "id": "wdt3W2",
            "likes": 2,
            "name": "test shader shockwave 2",
            "published": 3,
            "tags": [
                "shockwave"
            ],
            "usePreview": 0,
            "username": "tatogame",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co){\nreturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n// Sawtooth calc of time\nfloat offset = (iTime - floor(iTime)) / iTime;\nfloat time = iTime * offset;\n\n// Wave design params\nvec3 waveParams = vec3(10.0, 0.8, 0.1 );\n\n\n// Find coordinate, flexible to different resolutions\nfloat maxSize = max(iResolution.x, iResolution.y);\nvec2 uv = fragCoord.xy / maxSize;\n\n\n// Find center, flexible to different resolutions\nvec2 center = iResolution.xy / maxSize / 2.;\n\n// Distance to the center\nfloat dist = distance(uv, center);\n\ntime = pow(time, 0.4);\n\n// Original color\nvec4 c = texture(iChannel0, uv);\n\n// Limit to waves\nif (time > 0. && dist <= time + waveParams.z && dist >= time - waveParams.z) {\n\n// The pixel offset distance based on the input parameters\nfloat diff = (dist - time);\nfloat diffPow = (1.0 - pow(abs(diff * waveParams.x), waveParams.y));\nfloat diffTime = (diff * diffPow);\n\n// The direction of the distortion\nvec2 dir = normalize(uv - center);\n\n\n\n\n\n\nuv.x += (rand(vec2(iTime,fragCoord.y))-1.0) / ((time * dist * 3000.0));\n\n// Perform the distortion and reduce the effect over time\nuv += ((dir * diffTime) / (time * dist * 20.0)) * (dist / 2.0);\n\n// Grab color for the new coord\nc = texture(iChannel0, uv);\n\n// Optionally: Blow out the color for brighter-energy origin\n//c += (c * diffPow) / (time * dist * 2000.0);\n\nvec4 col1 = vec4(1.8, 1.4, 1.1, 1);\nvec4 col2 = vec4(1, 1, 1, 1);\n\nvec4 colMix = mix(col1, col2, clamp(time * 2.0, 0.0, 1.0));\n\nvec4 red = texture(iChannel0, vec2(uv.x + (0.2 / (time* dist * 500.0)), uv.y)) * colMix;\nc += red;\nc /= 2.;\n}\n\nfragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}