{
    "Shader": {
        "info": {
            "date": "1718308764",
            "description": "Use Shadertoy extension to make more Paint calls, but watching the rings decay slowly can be pretty interesting too.",
            "flags": 32,
            "hasliked": 0,
            "id": "lXyGWc",
            "likes": 5,
            "name": "tcharge strings 2 epilespy warn",
            "published": 3,
            "tags": [
                "field"
            ],
            "usePreview": 0,
            "username": "graygoose",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "// Fork of \"triple charge strings\" by graygoose. https://shadertoy.com/view/4XGGW3\n// 2024-06-13 18:04:08\n\n// Fork of \"triple charge exchange\" by graygoose. https://shadertoy.com/view/4XG3Rt\n// 2024-06-13 13:46:31\n\n// Fork of \"SUesque Dynamics\" by graygoose. https://shadertoy.com/view/7l2BWh\n// 2024-05-27 03:24:35\n\nvoid mainImage(out vec4 O, in vec2 U)\n{O=texture(iChannel0, U.xy/iResolution.xy);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define DRAW\n\n#define MU (.05 + 0.1 * cos(iTime * .05))\n#define NU (.5 + 0.5 * sin(iTime * .1))\n#define RHO 10.0\n\n#define _OP0(a, b, c) (dot(a - sin(b) , c - cos(b)) * MU + dot(a - cos(c), b - sin(c)) * NU)\n#define _OP1(a, b, c) (pow(b+a, 2.)*dot(a - sin(b), cos(b)) * MU + c*dot(a - cos(c), b - sin(c)) * NU)\n#define _OP2(a, b, c) (sin(a + exp(-b)) * cos(c * log(1.0 + abs(a))) * MU + cos(b - tanh(c)) * sin(a * exp(-c)) * NU)\n#define _OP3(a, b, c) (sin(a * pow(b, 2.0) + tan(c)) * MU + cos(pow(a, 3.0) - sin(b) * cos(c)) * NU)\n#define _OP4(a, b, c) (sinh(a * log(1.0 + abs(b))) * cosh(c * exp(-b) * MU) + tanh(pow(b, 2.0) - log(1.0 + abs(c))) * cos(a * exp(c)) * NU)\n#define _OP5(a, b, c) (pow(exp(sin(a) * cos(b)), 2.0) * log(1.0 + abs(c)) * MU + tanh(c * pow(a - b, 3.0)) * NU)\n#define _OP6(a, b, c) (sin(a * tanh(log(1.0 + abs(b)))) * cos(pow(c, 2.0) * exp(-a)) * MU + sinh(b * log(1.0 + abs(a)) * tan(c)) * NU)\n#define _OP7(a, b, c) (cosh(a * pow(b, 2.0) + log(1.0 + abs(c))) * sinh(b - exp(c)) * MU + tanh(pow(a * exp(-b), 3.0) * c) * NU)\n\n//#define OP _OP0\n#define OP(a, b, c) (_OP0(a, b, c) * _OP7(a, b, c) - _OP1(a, b, c) * _OP5(a,b,c))\n\n\nvoid mainImage(out vec4 O, in vec2 U) {\n    vec2 uv = U / iResolution.xy;\n    vec4 col = texelFetch(iChannel0, ivec2(U.xy), 0);\n    \n    float r = col.x, g = col.y, b = col.z;\n\n    col += vec4(OP(r, g, b), OP(g, b, r), OP(b, r, g), 0.0);\n    col += lap(col, U, iChannel0, R) * RHO;\n\n    if (sign(iMouse.z) == 1.0 || iFrame == 0) {\n        #ifdef DRAW\n        col += SOURCE(uv, iMouse.xy / iResolution.xy, 0.01, .1 * vec4(abs(cos(-sin(iTime))), abs(cos(iTime)), abs(sin(iTime)), 0.0));\n        #else\n        col = vec4(.0000001);\n        vec4 I = vec4(.0001, col.xyz);\n        col += SOURCE(uv, vec2(.33, .33), SRC_SIZE, I.xyyy);\n        col += SOURCE(uv, vec2(.50, .75), SRC_SIZE, I.yxyy);\n        col += SOURCE(uv, vec2(.66, .33), SRC_SIZE, I.yyxy);\n        #endif\n    }\n\n    O = normalize(col);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//#define MU 0.00389\n//#define NU 0.09086\n//#define MU 0.00838\n//#define NU 0.12159\n//#define MU 0.2\n//#define NU 0.81\n//#define MU .15\n//#define NU .75\n\n#define R iResolution.xy\n#define SRC_SIZE .0001\n#define SOURCE(p, o, r, col) col * smoothstep(r+.1, r-.5, length(o - p))\n\n\nvec4 lap(in vec4 col, in vec2 p, in sampler2D tex, in vec2 res) {\n    vec4 sum = -4.0 * col;\n    sum += texelFetch(tex, ivec2(mod(p + vec2(1., 0.),res)), 0);\n    sum += texelFetch(tex, ivec2(mod(p - vec2(1., 0.),res)), 0);\n    sum += texelFetch(tex, ivec2(mod(p + vec2(0.0, 1.),res)), 0);\n    sum += texelFetch(tex, ivec2(mod(p - vec2(0.0, 1.), res)), 0);\n    return sum;\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}