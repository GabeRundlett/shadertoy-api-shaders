{
    "Shader": {
        "info": {
            "date": "1492185025",
            "description": "I have been inspired by https://www.youtube.com/watch?v=qhbuKbxJsk8",
            "flags": 0,
            "hasliked": 0,
            "id": "4d2cWD",
            "likes": 14,
            "name": "Modular multiplication",
            "published": 3,
            "tags": [
                "mandelbrot",
                "heart",
                "pattern",
                "multiplication",
                "modular"
            ],
            "usePreview": 0,
            "username": "Zabidon",
            "viewed": 1168
        },
        "renderpass": [
            {
                "code": "// License: Do What The F**k You Want To But It's Not My Fault Public License v1 (WTFNMFPL-1.0)\n// Created by Osipov Kirill --- zabidon\n\n#define PI 3.14159265359\n#define MULTIPLIER 100.\n#define MODULE 150.\n\nvec4 get_color(vec2 uv, float mul, vec4 color) {\n    float step_angle = 2. * PI / float(MODULE);\n\n    float start_angle = PI / 2.0;\n    float end_angle = PI / 2.0;\n\n    for (float i = 0.; i < MODULE; i++) {\n        vec2 line_start = vec2(sin(start_angle), cos(start_angle));\n        vec2 line_end = vec2(sin(end_angle), cos(end_angle));\n        vec2 line_dir = line_end - line_start;\n\n        if (distance(line_start, uv) < .01)\n            return vec4(1., .0, .0, 1.);\n\n        float distance_to_line = abs(\n                line_dir.y * uv.x -\n                line_dir.x * uv.y +\n                line_start.x * line_end.y -\n                line_start.y * line_end.x\n                ) / length(line_dir);\n\n        if (distance_to_line < 2. / iResolution.y &&\n                dot(uv - line_start, line_dir) > 0. &&\n           \t\tdot(uv - line_end, line_dir) < 0.)\n            return color;\n        \n        start_angle += step_angle;\n        end_angle += mul * step_angle;\n    }\n\n    return vec4(1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord + fragCoord - iResolution.xy) / iResolution.y;\n\n    float mul = 1.0 + MULTIPLIER * (1. - cos(.02 * iTime));\n    vec4 color = vec4(sin(.1 * iTime),\n                      cos(.2 * iTime),\n                      cos(.3 * iTime),\n                      1.);\n\n    fragColor = get_color(uv, mul, color);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}