{
    "Shader": {
        "info": {
            "date": "1722169788",
            "description": "Verlet integration\n\n-  left click + drag: move points along the mouse offset direction",
            "flags": 32,
            "hasliked": 0,
            "id": "lfsyWM",
            "likes": 3,
            "name": "Verlet Integration - Cloth",
            "published": 3,
            "tags": [
                "2d",
                "physics",
                "verlet",
                "cloth"
            ],
            "usePreview": 0,
            "username": "anujv",
            "viewed": 114
        },
        "renderpass": [
            {
                "code": "\n// in pixels\n#define POINT_SIZE_SQ 5.0f\n\n#define POINT_COLOR   vec4(0.0f, 0.8f, 0.1f, 1.0f)\n\nfloat draw_point(in vec2 pos, in vec2 frag_coord) {\n    vec2 diff = frag_coord - pos;\n    float dist = dot(diff, diff);\n    if (dist <= POINT_SIZE_SQ) {\n        return smoothstep(POINT_SIZE_SQ, 0.0f, dist);\n    }\n\n    return 0.0f;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec4 color = vec4(0.0f);\n    \n    for (int i = 0; i < GRID_ROWS; i++) {\n        for (int j = 0; j < GRID_COLS; j++) {\n            vec4 pos = texelFetch(iChannel0, ivec2(i, j), 0);\n            color += POINT_COLOR * draw_point(pos.xy, frag_coord);\n        }\n    }\n    \n    frag_color = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 anchor_constraint(in vec2 pos) {\n    return pos;\n}\n\nvec2 length_constraint(in vec2 a, in vec2 b, float l) {\n    vec2 v = b - a;\n    float diff = length(v);\n    \n    if (diff > l) {\n        vec2 n = v / diff;\n        diff -= l;\n        return diff * n;\n    }\n    \n    return vec2(0.0f);\n}\n\nvec4 solve(in vec4 data, in ivec2 index) {\n    vec2 prev_pos = data.xy;\n    \n    // gravity\n    vec2 p = data.xy;\n    vec2 vel = p - data.zw;\n    p += vel + vec2(0.0f, 0.5f * iTimeDelta * iTimeDelta * GRAVITY);\n    \n    // links\n    vec3 l = vec3(0.0f);\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            ivec2 o = index + ivec2(i, j);\n            if (o.x < 0 || o.x >= GRID_COLS || o.y < 0 || o.y >= GRID_ROWS || (i == 0 && j == 0)) continue;\n            \n            float len = sqrt(float(abs(i) * GRID_SIZE * GRID_SIZE) + float(abs(j) * GRID_SIZE * GRID_SIZE));\n            l += vec3(length_constraint(p, texelFetch(iChannel0, o, 0).xy, len), 1.0f);\n        }\n    }\n    p += l.xy / l.z;\n\n    // anchor\n    if ((index.x == 0 || index.x == GRID_COLS - 1) && index.y == GRID_ROWS - 1) {\n        p = anchor_constraint(prev_pos);\n    }\n\n    return vec4(p, prev_pos);\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n\n    ivec2 grid_size = ivec2(GRID_COLS, GRID_ROWS);\n    if (ivec2(frag_coord) == grid_size + 1) {\n        frag_color = vec4(iMouse.xyz, 0.0f);\n        return;\n    }\n    if (any(greaterThan(ivec2(frag_coord), grid_size))) return;\n\n    if (iFrame == 0) {\n        vec2 pos = vec2(frag_coord.x * float(GRID_SIZE), frag_coord.y * float(GRID_SIZE));\n        // center the grid\n        pos.x += (iResolution.x - float(GRID_SIZE * GRID_ROWS)) / 2.0f;\n        pos.y += (iResolution.y - float(GRID_SIZE * GRID_COLS)) / 2.0f;\n        frag_color = vec4(pos, pos);\n    } else {\n        // simulate\n        vec4 pos = solve(texelFetch(iChannel0, ivec2(frag_coord), 0), ivec2(frag_coord));\n        \n        vec3 prev_mouse_pos = texelFetch(iChannel0, grid_size + 1, 0).xyz;\n        vec2 mouse_offset = iMouse.xy - prev_mouse_pos.xy;\n        \n        if (iMouse.z > 0.0f && prev_mouse_pos.z > 0.0f) {\n            vec2 m = vec2(iMouse.xy - pos.xy);\n            if (dot(m, m) < 1000.0f) {\n                pos.xy += mouse_offset;\n            }\n        }\n        \n        frag_color = pos;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// in pixels\n#define GRID_SIZE 10\n#define GRID_ROWS 40\n#define GRID_COLS 40\n\n#define GRAVITY -10.0f\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}