{
    "Shader": {
        "info": {
            "date": "1608349301",
            "description": "Mouse Usar",
            "flags": 0,
            "hasliked": 0,
            "id": "WldcRn",
            "likes": 3,
            "name": "fork- quick julia",
            "published": 3,
            "tags": [
                "forkquickjulia"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy)/iResolution.y;\n    vec2 mm = (2. * iMouse.xy - iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(1.);\n    vec2 Z =vec2(0.0,0.0) +uv*((sin(iTime*0.25)-0.5));\n    vec2 C = 2. * mm;\n    \n    \n    float i;\n    for (i = 0.; i < 128.; i += 1.0) {\n        Z = vec2(Z.x * Z.x - Z.y * Z.y, 2. * Z.x * Z.y);\n        Z += C;\n        if (dot(Z, Z) > 4.0) break;\n    }\n    \n    float a = .02 * (i + 4.);\n    float aa = .5 * (i + 0.5);\n    \n    col.gb -= max(0., Z.x) * a;\n    col.rg -= max(0., Z.y) * a;\n    col.rbg -= max(0., Z.y-Z.x)*aa*a*a;\n    vec3 col2=sin(vec3(0.1, 0.2, 0.5) *float( i)) ;\n    col=(col+col2)/2.0;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}