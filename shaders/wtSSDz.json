{
    "Shader": {
        "info": {
            "date": "1565573163",
            "description": "Morph a string into another\nThe same idea could be extended to morph an entire page of text.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtSSDz",
            "likes": 13,
            "name": "Text Morph",
            "published": 3,
            "tags": [
                "text",
                "font",
                "morph",
                "hardwriting"
            ],
            "usePreview": 0,
            "username": "xavierseb",
            "viewed": 680
        },
        "renderpass": [
            {
                "code": "// handwriting morphing, Xavierseb 2019\n\n// bezier control points coordinates (x0,x1,x2,x3) and (y0,y1,y2,y3)\n// font char is drawn by bezier spline with control points at (x0,y0),(x1,y1),(x2,y2),(x3,y3)\n// todo: add flip/rotate/mirror/skewitalic\n// vec4( start_point, control_point_1, control_point_2, end_point)\n#define a0_x vec4(.75,-1.32,-1.44,.75)\n#define a0_y vec4(.77,1.95,-2.28,-.59)\n#define a1_x vec4(.75,1.05,.32,1.)\n#define a1_y vec4(-.59,1.82,.78,-1.)\n#define b0_x vec4(-1.,.3,-1.66,-.8)\n#define b0_y vec4(.2,3.3,5.,-1.)\n#define b1_x vec4(-1.,.6,2.,-.8)\n#define b1_y vec4(.2,2.6,-1.6,-1.)\n#define c0_x vec4(.8,-.5,-2.1,.94)\n#define c0_y vec4(.8,1.8,-1.8,-.8)\n#define c1_x vec4(.7,-.5,-2.1,.94)\n#define c1_y vec4(.8,1.8,-1.8,-.8)\n#define d0_x vec4(.64,-.8,-1.8,.74)\n#define d0_y vec4(.78,1.9,-1.7,-.86)\n#define d1_x vec4(.74,1.3,-.63,1.)\n#define d1_y vec4(-.43,4.8,3.8,0.)\n#define e0_x vec4(-.8,2.8,-.65,-.8)\n#define e0_y vec4(0.,-.27,2.3,-.1)\n#define e1_x vec4(-.8,-.82,-.92,1.)\n#define e1_y vec4(-.1,-.32,-1.2,-1.)\n#define f0_x vec4(-.44,2.1,-1.,0.)\n#define f0_y vec4(.44,4.4,4.,-2.4)\n#define f1_x vec4(0.,.6,-1.24,.62)\n#define f1_y vec4(-2.4,1.28,.56,.6)\n#define g0_x vec4(.9,-.4,-2.3,.84)\n#define g0_y vec4(.34,2.4,-1.8,-.99)\n#define g1_x vec4(.9,1.,-1.,-.9)\n#define g1_y vec4(0.,-4.7,-3.5,-2.9)\n#define h0_x vec4(-1.,.9,-1.1,-.75)\n#define h0_y vec4(.43,4.5,3.4,-.5)\n#define h1_x vec4(-.75,-.24,.78,.94)\n#define h1_y vec4(-1.,3.7,-1.35,-1.)\n#define i0_x vec4(0.,-.14,-1.19,.64)\n#define i0_y vec4(.8,-.48,-1.07,-1.)\n#define i1_x vec4(-.05,.43,-.34,.07)\n#define i1_y vec4(2.88,2.71,2.67,2.86)\n#define j0_x vec4(0.,-.3,-1.,-.8)\n#define j0_y vec4(.5,-5.19,-1.7,-2.5)\n#define j1_x vec4(-.05,.43,-.34,.03)\n#define j1_y vec4(2.88,2.71,2.67,2.96)\n#define k0_x vec4(-.94,.58,-1.1,-.94)\n#define k0_y vec4(.6,4.35,3.6,-.7)\n#define k1_x vec4(.4,-2.4,.3,.8)\n#define k1_y vec4(.8,0.,0.,-1.)\n#define l0_x vec4(-.4,1.,.3,-.17)\n#define l0_y vec4(-.5,1.2,3.8,2.8)\n#define l1_x vec4(-.17,-.8,.38,.84)\n#define l1_y vec4(2.8,1.8,-1.,-.5)\n#define m0_x vec4(-.9,-.9,-.33,0.)\n#define m0_y vec4(-1.,.912,1.6,-.7)\n#define m1_x vec4(0.,.33,.9,.9)\n#define m1_y vec4(-.7,1.6,.912,-1.)\n#define n0_x vec4(-1.07,-.64,-.9,-.76)\n#define n0_y vec4(.35,.93,.85,-1.)\n#define n1_x vec4(-.75,-.9,.7,.94)\n#define n1_y vec4(-1.,.85,1.9,-1.)\n#define o0_x vec4(0.,-1.1,-1.1,0.)\n#define o0_y vec4(1.,.82,-.8,-1.)\n#define o1_x vec4(0.,1.1,1.1,0.)\n#define o1_y vec4(-1.,-.8,.82,1.)\n#define p0_x vec4(-1,-.43,-.58,-.73)\n#define p0_y vec4(.43,1.5,-1.9,-3.)\n#define p1_x vec4(-.7,.83,1.75,-.7)\n#define p1_y vec4(.8,1.9,-1.75,-.8)\n#define q0_x vec4(.7,-.83,-1.75,0.)\n#define q0_y vec4(.8,1.9,-1.75,-.8)\n#define q1_x vec4(.7,-.5,-.54,.93)\n#define q1_y vec4(.26,-2.7,-4.76,-2.5)\n#define r0_x vec4(-.88,-.28,-.43,-.5)\n#define r0_y vec4(.86,1.5,-.67,-1.)\n#define r1_x vec4(-.5,-.54,.22,.9)\n#define r1_y vec4(-1.,1.,1.,.8)\n#define s0_x vec4(.78,-.7,-1.5,0.)\n#define s0_y vec4(.88,1.34,.55,0.)\n#define s1_x vec4(0.,1.5,.67,-.9)\n#define s1_y vec4(0.,-.55,-1.35,-.8)\n#define t0_x vec4(-.55,.35,-1.37,.76)\n#define t0_y vec4(3.,1.16,-1.1,-1.)\n#define t1_x vec4(-1.,-.7,-1.4,.9)\n#define t1_y vec4(1.64,1.54,1.7,1.7)\n#define u0_x vec4(-.9,-1.1,1.,.72)\n#define u0_y vec4(.9,-1.6,-1.7,.9)\n#define u1_x vec4(.72,.7,1.,1.4)\n#define u1_y vec4(.9,-1.6,-1.,-.77)\n#define v0_x vec4(-1.,-.83,-.236,0.)\n#define v0_y vec4(.88,1.5,-.73,-1.)\n#define v1_x vec4(0.,1.55,-.25,1.)\n#define v1_y vec4(-1.,1.8,.9,.65)\n#define w0_x vec4(-.9,-1.2,-.33,0.)\n#define w0_y vec4(1.,-.912,-1.6,.7)\n#define w1_x vec4(0.,.33,.9,.9)\n#define w1_y vec4(.7,-1.6,-.912,1.)\n#define x0_x vec4(.83,.25,-.3,-1.)\n#define x0_y vec4(.95,.6,-.5,-1.)\n#define x1_x vec4(-.9,.48,-.43,1.)\n#define x1_y vec4(.87,.35,-.5,-1.)\n#define y0_x vec4(-.9,-.2,.9,.9)\n#define y0_y vec4(.9,-2.9,0.,.9)\n#define y1_x vec4(.9,-.37,-1.,-.9)\n#define y1_y vec4(.2,-4.7,-3.5,-2.9)\n#define z0_x vec4(-.9,1.1,1.3,0.)\n#define z0_y vec4(.9,.9,1.5,0.)\n#define z1_x vec4(0.,-1.3,-1.1,.9)\n#define z1_y vec4(0.,-1.5,-.9,-.9)\n\n#define love0_x vec4(0.,-.45,-2.,0.)*1.2\n#define love0_y vec4(.58,1.4,1.,-1.)*1.2\n#define love1_x vec4(0.,2.,.45,0.)*1.2\n#define love1_y vec4(-1.,1.,1.4,.58)*1.2\n#define qu0_x vec4(-.66,2.74,-.3,-.05)\n#define qu0_y vec4(2.9,3.35,1.6,.58)\n#define qu1_x vec4(-.05,.43,-.34,.03)\n#define qu1_y vec4(-.42,-.59,-.63,-.44)\n\n// include scale and translate of raw chars which are by default \n#define draw(a,b,c,d) a,b,c,d\n\n// combine x and y coordinates of 1st and 2nd curves needed to draw the char\n#define A draw(a0_x,a0_y,a1_x,a1_y),\n#define B draw(b0_x,b0_y,b1_x,b1_y),\n#define C draw(c0_x,c0_y,c1_x,c1_y),\n#define D draw(d0_x,d0_y,d1_x,d1_y),\n#define E draw(e0_x,e0_y,e1_x,e1_y),\n#define F draw(f0_x,f0_y,f1_x,f1_y),\n#define G draw(g0_x,g0_y,g1_x,g1_y),\n#define H draw(h0_x,h0_y,h1_x,h1_y),\n#define I draw(i0_x,i0_y,i1_x,i1_y),\n#define J draw(j0_x,j0_y,j1_x,j1_y),\n#define K draw(k0_x,k0_y,k1_x,k1_y),\n#define L draw(l0_x,l0_y,l1_x,l1_y),\n#define M draw(m0_x,m0_y,m1_x,m1_y),\n#define N draw(n0_x,n0_y,n1_x,n1_y),\n#define O draw(o0_x,o0_y,o1_x,o1_y),\n#define P draw(p0_x,p0_y,p1_x,p1_y),\n#define Q draw(q0_x,q0_y,q1_x,q1_y),\n#define R draw(r0_x,r0_y,r1_x,r1_y),\n#define S draw(s0_x,s0_y,s1_x,s1_y),\n#define T draw(t0_x,t0_y,t1_x,t1_y),\n#define U draw(u0_x,u0_y,u1_x,u1_y),\n#define V draw(v0_x,v0_y,v1_x,v1_y),\n#define W draw(w0_x,w0_y,w1_x,w1_y),\n#define X draw(x0_x,x0_y,x1_x,x1_y),\n#define Y draw(y0_x,y0_y,y1_x,y1_y),\n#define Z draw(z0_x,z0_y,z1_x,z1_y),\n#define _ draw(vec4(0),vec4(0),vec4(0),vec4(0)),\n#define QU draw(qu0_x,qu0_y,qu1_x,qu1_y),\n#define S_ draw(s0_x,s0_y*3.,s1_x,s1_y*3.),\n#define LL draw(love0_x,love0_y,love1_x,love1_y),\n#define SP draw(vec4(0.),vec4(10.),vec4(0.),vec4(10.)),\n#define F_ draw(vec4(-1.,-.75,-.5,0.),vec4(-3.,-2.8,-2.8,-3.),vec4(0.,.25,.75,1.),vec4(-3.,-3.1,-3.2,-3.)),\n#define G_ draw(vec4(-1.,-.75,-.5,0.),vec4(-3.,-3.,-3.,-3.),vec4(0.,.25,.75,1.),vec4(-3.,-3.,-3.,-3.)),\n#define XX draw(vec4(-1.4,-1.4,1.4,1.4),vec4(5.,6.,6.,5.),vec4(-1.4,-1.4,1.4,1.4),vec4(-5.,-6.,-6.,-5.)),\n#define END draw(vec4(0.),vec4(10.),vec4(0.),vec4(10.))\n\n// randomizing to emulate messy handwriting\n#define rnd(p) vec4(.22*fract(sin(p/1.1)*100000.0),.582*fract(sin(p/1.2)*100000.0),.582*fract(sin(p/1.3)*100000.0),.2*fract(sin(p/1.4)*100000.0))\n#define rnd1(p) vec4(.2*fract(sin(p/1.5)*100000.0),.5842*fract(sin(p/1.6)*100000.0),.5842*fract(sin(p/1.7)*100000.0),.2*fract(sin(p/1.8)*100000.0))\n\n// 2 bezier curves for each character, \n// e.g. for the letter a, \n// x coords of control points are vec4(.75,-1.32,-1.44,.75) = x-coords of curve first part of 'a', vec4(.77,1.95,-2.28,-.59) = x-coords of second curve to draw 'a'\n// y coords are vec4(.75,1.05,.32,1.), vec4(-.59,1.82,.78,-1.), ditto\n// note: combining mismatched letters can make other interesting shapes.\n// number of chars\n\n#define mat(t) mat4(cos(t),sin(t),0.,0.,-sin(t),cos(t),0.,0.,0.,0.,cos(t),sin(t),0.,0.,-sin(t),cos(t))\n\n#define LINES\n//#define DOTS\n\n#define speed 30\n// STEP .05 - .1\n#define STEP .07\n//#define widthInChars 10\n//#define iNumLines 5\n#define widthInChars 8\n#define iNumLines 7\nvec4 chars[] = vec4[ widthInChars * iNumLines *4 +4 ] ( \n    \n//  SP SP SP SP SP SP SP SP SP SP\n//  SP M O R P H SP SP SP SP\n//  SP M O R P H I N G SP \n//  SP T H E S E LL LL LL SP\n//  SP W O R D S SP LL SP SP\n    \n    M  O  R  P  H  I  N  G\n    M  E  L  T  I  N  G  LL\n    G_ G_ G_ G_ G_ G_ G_ LL\n    F_ F_ F_ F_ F_ F_ F_ SP\n    E  X  P  L  O  D  E  SP\n    XX XX XX XX XX XX XX SP\n    XX XX XX XX XX XX XX SP\n   \n    END\t\t\n);\n\nvec4 getPos(float t)\n{    \n    float t1 = 1.-t;   \n    return vec4(t1*t1*t1, 3.*t1*t1*t, 3.*t1*t*t, t*t*t);\n}\n\n#define THI .079\n\n#ifdef LINES\nfloat doSomething(int icharPos, int nextLine, vec2 p, float m) {\n    if( icharPos >=32*4 && icharPos<40*4) m =pow(m,.4);\n    mat4 My =         \n        transpose( mat4(\n        mix(chars[icharPos  ],chars[nextLine  ],m),\n        mix(chars[icharPos+1],chars[nextLine+1],m),\n   \t\tmix(chars[icharPos+2],chars[nextLine+2],m),\n        mix(chars[icharPos+3],chars[nextLine+3],m) ));\n    if( icharPos ==60||icharPos ==92) My *= (1.+.25*sin(6.28*sin(clamp(5.*m,0.,1.57))));\n    if( icharPos==4) My = mat(12.56*m)*My;\n    float d=10.;\n    for(float i1=0.; i1<1.-STEP; i1+=STEP) {\n        vec4 h0 = My*getPos(i1    );\n        vec4 h1 = My*getPos(i1+STEP);\n        float h = distance(h0.xy,h1.xy);\n        d = min(d,distance(p, h0.xy ));   \n        d = min(d,distance(p, h1.xy ));   \n        if(distance(p,h0.xy)<h+THI && distance(p,h1.xy)<h+THI) {\n            if(h1.x==h0.x) d=abs(p.y-h0.y);\n            else {\n            \tfloat f=(h1.y-h0.y)/(h1.x-h0.x);\n            \td = min(d, abs((p.y-h0.y-f*(p.x-h0.x))) / sqrt(1.+f*f));\n            }\n        }\n        h = distance(h0.zw,h1.zw);\n        d = min(d,distance(p, h0.zw ));   \n        d = min(d,distance(p, h1.zw ));   \n        if(distance(p,h0.zw)<h+THI && distance(p,h1.zw)<h+THI) {\n            if(h1.z==h0.z) d=abs(p.y-h0.w);\n            else {\n            \tfloat f=(h1.w-h0.w)/(h1.z-h0.z);\n            \td = min(d, abs((p.y-h0.w-f*(p.x-h0.z))) / sqrt(1.+f*f));\n            }\n        }        \n    }\n    return d;\n}  \n\n#else\n//DOTS\nfloat doSomething(int icharPos, int nextLine, vec2 p, float m) {\n    if( icharPos >=32*4 && icharPos<40*4) m =pow(m,.4);\n    mat4 My =         \n        transpose( mat4(\n        mix(chars[icharPos  ],chars[nextLine  ],m),\n        mix(chars[icharPos+1],chars[nextLine+1],m),\n   \t\tmix(chars[icharPos+2],chars[nextLine+2],m),\n        mix(chars[icharPos+3],chars[nextLine+3],m) ));\n    if( icharPos ==60||icharPos ==92) My *= (1.+.25*sin(6.28*sin(clamp(5.*m,0.,1.57))));\n    if( icharPos==4) My = mat(12.56*m)*My;\n    float d=10.;\n    for(float i1=0.0; i1<1.0; i1+=0.1) {\n        vec4 h0 = My*getPos(i1   );//,p.x);\n        vec4 h1 = My*getPos(i1+.1);\n        \n        d = min(d,distance(p, h0.xy ));   \n        // try to spread out dots\n        vec2 yd = h1.xy - h0.xy;\n        float y = length(yd)*10.;\n        yd /= y;        //yd = normalize(yd)/10.;\n        for(; y>0.; y--,h0.xy+=yd) \n            //if (d>.01) // uncomment when using thicker text\n                d=min(d,distance(p, h0.xy));\n        \n        d = min(d,distance(p, h0.zw ));   \n        yd = h1.zw - h0.zw;\n        y = length(yd)*10.;\n        yd /= y;\n       \tfor(; y>0.; y--, h0.zw+=yd)\n    \t    //if (d>.01) \n                d=min(d,distance(p, h0.zw));\n    }\n    return d;\n}  \n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   // if(iFrameRate<30.) discard;\n\n    const int numCharsX4 = chars.length() -4;\n    float fr = float((iFrame*speed)/10)/200.;\n    float m = fract(fr);\n   \n    int curLine = int(fr) % iNumLines;//(numCharsX4/(4*widthInChars));// (fr/A)%numLines;\n    vec2 p=((2.*fragCoord.xy-iResolution.xy)/iResolution.x +vec2(1.,0.))*float(widthInChars);\n    int xsav = int(p.x/2.);\n    p.x = mod(p.x,2.)-1.;\n    \n    int icharPos = ( xsav + curLine*widthInChars )*4;\n    int nextLine = icharPos+widthInChars*4;\n    if(nextLine>=numCharsX4) nextLine-=numCharsX4;\n    \n    float d = min(10., doSomething(icharPos,nextLine, p, m));\n         \n#define IMPROVED_DRAWING\n#ifdef IMPROVED_DRAWING\n\t#define ADJ_CHAR vec2(2.,0.)\n    if(xsav<widthInChars-1) \n        d = min(d, doSomething(icharPos+4, nextLine+4, p -ADJ_CHAR, m));\n       \n    if(xsav>0) \n        d = min(d, doSomething(icharPos-4, nextLine-4, p +ADJ_CHAR, m));\n#endif\n   \n\t//vec3 col = vec3(smoothstep(d,.1,.18));\n\tvec3 col = vec3((smoothstep(d,.06,.165)) + (1. - (smoothstep(d,.04,.06))));\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}