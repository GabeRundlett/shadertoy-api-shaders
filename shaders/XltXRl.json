{
    "Shader": {
        "info": {
            "date": "1481169892",
            "description": "I mixed 2 of my prior shader codes to create this.",
            "flags": 0,
            "hasliked": 0,
            "id": "XltXRl",
            "likes": 4,
            "name": "Mandelbrot + Glitch Ball",
            "published": 3,
            "tags": [
                "fractal",
                "glitch"
            ],
            "usePreview": 0,
            "username": "antoineMoPa",
            "viewed": 825
        },
        "renderpass": [
            {
                "code": "#define PI 3.1416\n#define PI2 (2.0 * PI)\n\n/*\n  Complex square\n */\nhighp vec2 to_the_2(highp vec2 z){\n    highp vec2 old_z;\n    // Keep the current (old) value\n    old_z = z;\n    \n    // Set new values according to math\n    z.x = pow(z.x,2.0) - pow(z.y,2.0);\n    z.y = 2.0 * old_z.x * old_z.y;\n\n    return z;\n}\n\n\nvec4 mandelbrot(vec2 UV){\n    float x = UV.x / (iResolution.y / iResolution.x);\n    float y = UV.y;\n    \n    vec4 col = vec4(0.0);\n    \n    vec2 c = vec2( -y + 0.5, x - 0.5);\n    vec2 z = vec2(0.0, 0.0);\n\tc *= 4.0;\n    c.x -= 0.5;\n    float maxit = 0.0;\n    \n    bool in_set = true;\n    \n   \tfor(int i = 0; i < 50; i++){\n       \tz = to_the_2(z) + c;\n        \n        if(length(z) > 2.0){\n        \tmaxit = float(i);\n            in_set = false;\n        \tbreak;\n        }\n    }\n    \n    if(!in_set){\n    \tcol.g = maxit/50.0;\n    } else {\n        col.g = maxit/50.0;\n        col.r = length(z);\n    }\n    col.b = maxit/50.0;\n\n    col.a = 1.0;\n    \n    return col;\n}\n\nvec4 glitch_ball(vec2 pos){\n    float x = pos.x;\n    float y = pos.y;\n    vec4 col = vec4(0.0);\n    float time = iTime;\n    x = x - floor(x * 260.0) + time/100.0;\n    y = y - floor(y * 30.0) + time/100.0;\n    \n    col.r = sin(13.0 * x + y + PI2 * time + 0.3);\n    col.g = sin((13.0 + 0.006 * cos(time*PI2 + 30.0 * pos.x)) * x + y + PI2 * time + 0.3);\n    col.b = sin((13.0) * x + y + PI2 * time + 0.3);\n    \n    col = abs(col);\n    \n    if(distance(pos, vec2(0.5,0.5)) > 0.4){\n    \tcol *= 0.0;\n    }\n    \n    col.a = 1.0;\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = mandelbrot(uv) * glitch_ball(uv);\n    \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}