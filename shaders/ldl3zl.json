{
    "Shader": {
        "info": {
            "date": "1377469447",
            "description": "This is the distance field source code for the  procedural image I made a year ago or so. I had to simplify the shaders and lighting a lot in order to get this to compile in WebGLSL.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldl3zl",
            "likes": 90,
            "name": "Fruxis (made in 2012)",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefields"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 11277
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define USE_REFLECTIONS\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\nfloat fbm4( vec3 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = p*2.02;\n    f += 0.2500*noise( p ); p = p*2.03;\n    f += 0.1250*noise( p ); ;\n\n    return f/0.9375;\n}\n\n\n#define ZERO (min(iFrame,0))\n\nfloat sdBox( in vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25/k;\n}\n\n//===========================================================================================\n//===========================================================================================\n\nfloat suelo( in vec3 pos, out vec3 uvw )\n{\n    uvw = pos;\n    return pos.y;\n}\n\nfloat pared( in vec3 pos, out vec3 uvw )\n{\n    uvw = 4.0*pos;\n\n    float d1 = 0.6 + pos.z;\n    float d2 = 0.6 + pos.x;\n    d1 = min(d1,d2);\n\n    d1 = min( d1, sdBox( pos-vec3(0.0,2.0,0.0), vec3(1.5,0.05,1.5) ) );\n\n    return d1;\n}\n\n\nfloat melon( in vec3 p, out vec3 uvw )\n{\n    vec3 c = p - vec3(0.0,0.215,0.0);\n\n    vec3 q = 3.0*c*vec3(1.0,1.5,1.5);\n    uvw = 3.0*c;\n\n    float r = 1.0 - 0.007*sin(30.0*(-c.x+c.y-c.z));\n    return 0.65*(length(q) - r)/3.0;\n}\n\nfloat manzana( in vec3 p, out vec3 uvw )\n{\n    vec3 q = p - vec3(0.5,0.1,0.5);\n    float r = length(q.xz);\n    q.y += 0.05*(1.0-clamp(r/0.1,0.0,1.0));\n    q.y -= 0.03*(1.0-smoothstep(0.004,0.005,r));\n    uvw = 10.0*q;\n    return 0.4*(length(10.0*q) - 1.0)/10.0;\n}\n\n\nfloat uvas( in vec3 p, out vec3 uvw )\n{\n    vec3 q = p - vec3(-0.1,0.1,0.6);\n    uvw = 10.0*q;\n  \n    float d1 = length(q-vec3(-0.09,0.10,-0.07)) - 0.12;\n    float d2 = length(q-vec3( 0.11,0.05, 0.00)) - 0.09;\n    float d3 = length(q-vec3(-0.07,0.03, 0.10)) - 0.10;\n  \n    return min(d1,min(d2,d3));\n}\n\n\n\nfloat lemon( in vec3 p, out vec3 uvw )\n{\n    vec3 q = p - vec3(0.7,0.06,0.2);\n    uvw = 10.0*q;\n    float s = 1.35;\n    float r = clamp( (abs(q.x)-0.00)/(0.077-0.00), 0.0, 1.0 );\n    s += 2.5* pow(r,24.0);\n    q *= vec3(1.0,s,s);\n    return 0.5*(length(12.0*q) - 1.0)/(12.0*s);\n}\n\nfloat jarron( in vec3 p, out vec3 uvw )\n{\n    vec3 q = p - vec3(-0.1,0.28,0.6);\n    uvw = q;\n\n    float d1 = length(q)-1.00/3.5;\n    d1 = abs(d1+0.025/3.5)-0.025/3.5;\n    \n    float d2 = q.y + 0.1;\n\n    //return max(  d1, d2 );\n    return smax( d1, d2, 0.005 );\n}\n\n\nfloat mantelito( in vec3 p, out vec3 uvw )\n{\n    vec3 q = p - vec3(-0.1,0.001,0.65);\n\n    q.xz += 0.1*vec2( 0.7*sin(6.0*q.z+2.0)+0.3*sin(12.0*q.x+5.0),\n                      0.7*sin(6.0*q.x+0.7)+0.3*sin(12.0*q.z+3.0) );\n\n    q.xz = m2*q.xz;\n    uvw = q;\n\n    q.y -= 0.008*(0.5-0.5*sin( 40.0*q.x )*sin( 5.0*q.z ));\n\n    return length(max(abs(q)-vec3(0.3,0.001,0.3),0.0))-0.0005;\n}\n\n\nfloat botella( in vec3 p, out vec3 uvw )\n{\n    vec3 q = p - vec3(-0.35,0.0,0.3);\n\n    vec2 w = vec2( length(q.xz), q.y );\n  \n    float d1 = length( q - vec3(0.0, 0.8,0.0) );\n    float d2 = length( q - vec3(0.0,-0.1,0.0) );\n\n    uvw = q;\n  \n    float r = 1.0 - 0.8*pow(smoothstep( 0.5, 0.6, q.y ),4.0);\n    r += 0.1 * smoothstep( 0.650, 0.66, q.y );\n    r *= 1.0 - smoothstep( 0.675, 0.68, q.y );\n  \n    return min( min( d1, d2),(w.x - 0.11*r)*0.5 );\n}\n\n//======================\n\nvec4 manzanaColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n    float spe = 1.0;\n    bnor = vec3( 0.0 );\n\n    float a = atan(pos.x,pos.z);\n    float r = length(pos.xz);\n\n    // red\n    vec3 col = vec3(1.0,0.05,0.0);\n\n    // green\n    float f = smoothstep( 0.2, 0.9, fbm4(pos.xzy*0.8) );\n    col = mix( col, vec3(1.0,0.6,0.1), f );\n\n    // dirty\n    col *= 0.75+0.25*fbm4(pos*4.0);\n\n    // frekles\n    f = smoothstep( 0.6, 1.0, fbm4(pos*48.0) );\n    col = mix( col, vec3(0.9,0.9,0.6), f*0.5 );\n\n    // stripes\n    f = smoothstep( -0.6,1.0, noise( vec3(a*7.0 + pos.z,0.5*pos.y,pos.x)*2.0));\n    f *= smoothstep(-0.5,1.0,pos.y + 0.75*(noise(4.0*pos.zyx)-0.5) );\n    col = mix( col, vec3(0.4,0.2,0.0), 0.75*f );\n    spe *= 1.0-f;\n\n    // top\n    f = 1.0-smoothstep( 0.14, 0.2, r );\n    col = mix( col, vec3(0.2,0.18,0.15)*0.5, f );\n\n\treturn vec4(0.5*col,spe);\n\n}\n\nfloat orangesBump( in vec3 pos )\n{\n    float f = fbm4( pos*16.0 );\n    return f*f;\n}\nvec4 orangesColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n    bnor = vec3( 0.0 );\n\n    vec2 e = vec2( 0.001, 0.0 );\n    float re = orangesBump( pos );\n    bnor = 0.07*normalize( vec3(orangesBump( pos+e.xyy ) - re,\n                                orangesBump( pos+e.yxy ) - re,\n                                orangesBump( pos+e.yyx ) - re ) );\n\t\n    vec3 col = vec3(0.7,0.2,0.0);\n\n    col = mix( col, vec3(0.7,0.35,0.05), fbm4( pos ) );\n\n    return vec4( 0.6*col, 1.0 );\n}\n\nvec4 mantelitoColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n     bnor = vec3( 0.0 );\n\n\n    vec3 col = vec3(1.0,0.9,0.8);\n    float f = smoothstep( 0.0, 0.7, sin(180.0*pos.x) );\n    col = mix( col, vec3(0.7,0.4,0.0), f );\n\n    f = smoothstep( 0.0, 0.7, sin(180.0*pos.z)*sign(sin(180.0*pos.x)) );\n    col = mix( col, vec3(0.0,0.2,0.6), f );\n\n    return vec4( 0.3*col, 0.0 );\n}\n\nfloat lemonBump( in vec3 pos )\n{\n     return fbm4( pos*24.0 );\n}\n\nvec4 lemonColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n    bnor = vec3( 0.0 );\n\n    vec2 e = vec2( 0.001, 0.0 );\n    float re = lemonBump( pos );\n    bnor = 0.07*normalize( vec3(lemonBump( pos+e.xyy ) - re,\n                               lemonBump( pos+e.yxy ) - re,\n                               lemonBump( pos+e.yyx ) - re ) );\n\n\tvec3 col = vec3(1.0,0.8,0.0);\n\n    col = mix( col, vec3(0.3,0.3,0.02), smoothstep( 0.75, 0.82, abs(pos.x) ) );\n\n    return vec4( 0.3*col, 1.0 );\n}\n\nvec4 botleColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n\tfloat spe = 1.0;\n    bnor = vec3( 0.0 );\n\n    vec3 col = 0.2*vec3(0.6,0.3,0.3);\n\n    float f = smoothstep( 0.2, 0.21, pos.y ) - smoothstep( 0.39, 0.40, pos.y );\n    f *= smoothstep( 0.0, 0.01, pos.z );\n\tcol = mix( col, vec3(0.13,0.12,0.10), f );\n    spe *= 1.0-f;\n    \n    float g = (smoothstep( 0.220, 0.225, pos.y ) - smoothstep( 0.375, 0.38, pos.y ))*smoothstep( 0.010, 0.02, pos.z );\n    float h = (smoothstep( 0.230, 0.235, pos.y ) - smoothstep( 0.365, 0.37, pos.y ))*smoothstep( 0.025, 0.03, pos.z );\n    col *= 1.0-0.7*(g-h);\n\n    return vec4( col*0.6, spe );\n}\n\n\nvec4 melonColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n    bnor = vec3( 0.0 );\n\n    float a = atan(pos.y,pos.z);\n    float r = length(pos.xz);\n\n    // lightGreenBase\n    vec3 col = vec3(0.4,.8,0.1);\n\n    // darkGreenBase\n    float f = smoothstep( -0.7, 0.6, fbm4(pos*4.0) );\n    col = mix( col, vec3(0.01,.3,0.05), f );\n\n    // dirty\n    col *= 0.8+0.2*smoothstep( -1.0, 1.0, fbm4(pos*4.0) );\n\n    // dirty\n    col *= 0.5+0.5*smoothstep( -0.44, -0.3, fbm4(pos*64.0) );\n\n    // frekles\n    f = smoothstep( 0.3, 0.6, fbm4(pos*60.0) );\n    col = mix( col, vec3(0.71,0.85,0.4), f*0.4 );\n\n    // stripes\n    float q = 0.5 + 0.5*fbm4(30.0*pos);\n    f = fbm4( vec3(a*10.0 + pos.z + 1.4*q,1.5*pos.y,3.5*pos.x)*1.5);\n    f = smoothstep( -0.5,0.7,f);\n    col = mix( col, vec3(0.01,0.1,0.01), f );\n\n    return vec4( 1.2*col, 1.0 );\n}\n\n\nfloat floorBump( in vec2 pos, out vec2 id )\n{\n    float w  = 0.015;\n    float y  = mod( pos.x*8.0, 1.0 );\n    float iy = floor( pos.x*8.0 );\n    float x  = mod( pos.y*1.0 + sin(iy)*8.0, 1.0 );\n    float f  = smoothstep( 0.0, w,     y ) - smoothstep( 1.0-w,     1.0, y );\n          f *= smoothstep( 0.0, w/8.0, x ) - smoothstep( 1.0-w/8.0, 1.0, x );\n    id = vec2( iy, floor(pos.y*1.0 + sin(iy)*8.0) );\n    return f;\n}\n\nvec4 floorColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n    bnor = vec3( 0.0 );\n\n    vec2 id;\n    vec2 tmp;\n    float er = floorBump( pos.xz, id );\n\n\t\n    vec2 e = vec2( 0.005, 0.0 );\n    bnor = vec3( -(floorBump( pos.xz+e.xy, tmp ) - er), 150.0*e.x,\n                 -(floorBump( pos.xz+e.yx, tmp ) - er) );\n    bnor = normalize(bnor);\n\n\n    vec3 col = vec3(0.6,0.4,0.3)*0.6;\n\n\tfloat f = 0.5+0.5*fbm4( 16.0*pos*vec3(6.0,0.0,0.5)+vec3(id,0.0) );\n    col = mix( col, vec3(0.4,0.2,0.1)*0.56, f );\n\n    col *= 0.85 + 0.15*fbm4( 8.0*pos );\n    col *= 0.50 + 0.50*er;\n\n    col *= 1.0 + 0.2*sin(32.0*(id.x-id.y));\n    col += 0.01*sin( vec3(0.0,1.0,2.0)+32.0*(id.x+id.y) );\n\n    return vec4( col, 2.0 );\n}\n\n\nfloat paredBump( in vec2 pos )\n{\n    float y = mod( pos.y*1.0, 1.0 );\n    float f = smoothstep( 0.0, 0.025, y ) - smoothstep( 0.975, 1.0, y );\n    float ox = 0.5*mod(floor(pos.y*1.0),2.0);\n    float x = mod( pos.x*1.0 + ox, 1.0 );\n    f *= smoothstep( 0.0, 0.025, x ) - smoothstep( 0.975, 1.0, x );\n\n    return f;\n}\n\nvec4 paredColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n\tfloat spe = 1.0;\n    bnor = vec3( 0.0 );\n\n    vec2 qpos = pos.xy;\n    if( abs(nor.x)>0.5 ) qpos = pos.zy;\n\n\t\n    vec2 e = vec2( 0.01, 0.0 );\n    float er = paredBump( qpos );\n    bnor = vec3(-(paredBump( qpos+e.xy ) - er),\n                -(paredBump( qpos+e.yx ) - er),\n                1.0*e.x );\n    if( abs(nor.x)>0.5 ) bnor=bnor.zyx;\n    bnor = 1.0*normalize( bnor );\n\n\t\n\t\n    vec3 col = vec3(1.0,0.8,0.7);\n\t\n\tcol *= 0.9+0.1*fbm4( pos*vec3(20.0,0.0,20.0) );\n\n    float y = mod( pos.y*1.0, 1.0 );\n    float f = smoothstep( 0.5, 0.9, y );\n\n    f *= fbm4(pos*2.0);\n    spe *= 1.0-f;\n    vec3 dirt = col*0.05;\n    col = mix( col, dirt, f );\n\n    return vec4( 0.6*col, spe );\n}\n\nfloat jarronBump( in vec3 pos )\n{\n     return 0.9*fbm4( pos*vec3( 0.0,48.0, 0.0) ) +\n            0.1*fbm4( pos*128.0 );\n}\n\n\n\nvec4 jarronColor( in vec3 pos, in vec3 nor, out vec3 bnor )\n{\n    bnor = vec3( 0.0 );\n/*\n    vec2 e = vec2( 0.001, 0.0 );\n\n    float re = jarronBump( pos );\n    bnor = 0.2*normalize( vec3(jarronBump( pos+e.xyy ) - re,\n                               jarronBump( pos+e.yxy ) - re,\n                               jarronBump( pos+e.yyx ) - re ) );\n*/\n    vec3 col = vec3(0.5,0.3,0.1);\n\t\n    col *= 0.2 + 0.8*smoothstep(0.0,1.0,fbm4( pos*vec3(0.0,24.0,0.0) ));\n\n    return vec4( 0.4*col, 0.5 );\n}\n\nfloat map( in vec3 p, out vec4 muvw )\n{\n    float resT = 1000.0;\n    vec4  resM = vec4(-1.0);\n\n    vec3 mati = vec3(0.0);\n\n\tfloat dis = suelo( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(1.0,mati); }\n\n\tdis = pared( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(5.0,mati); }\n\n\tdis = jarron( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(4.0,mati); }\n\n\tdis = mantelito( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(9.0,mati); }\n\n\tdis = melon( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(2.0,mati); }\n\n\tdis = manzana( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(3.0,mati); }\n\n\tdis = lemon( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(6.0,mati); }\n\n\tdis = botella( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(7.0,mati); }\n\n\tdis = uvas( p, mati );\n\tif( dis<resT ) { resT=dis; resM=vec4(8.0,mati); }\n\n    muvw = resM;\n    return resT;\n}\n\nvec4 calcColor( in vec4 muvw, in vec3 nor, out vec3 bnor )\n{\n    vec4 surfaceColor = vec4(0.0);\n         if( muvw.x < 1.5 ) surfaceColor = floorColor(     muvw.yzw, nor, bnor );\n    else if( muvw.x < 2.5 ) surfaceColor = melonColor(     muvw.yzw, nor, bnor );\n    else if( muvw.x < 3.5 ) surfaceColor = manzanaColor(   muvw.yzw, nor, bnor );\n    else if( muvw.x < 4.5 ) surfaceColor = jarronColor(    muvw.yzw, nor, bnor );\n    else if( muvw.x < 5.5 ) surfaceColor = paredColor(     muvw.yzw, nor, bnor );\n    else if( muvw.x < 6.5 ) surfaceColor = lemonColor(     muvw.yzw, nor, bnor );\n    else if( muvw.x < 7.5 ) surfaceColor = botleColor(     muvw.yzw, nor, bnor );\n    else if( muvw.x < 8.5 ) surfaceColor = orangesColor(   muvw.yzw, nor, bnor );\n    else                    surfaceColor = mantelitoColor( muvw.yzw, nor, bnor );\n    return surfaceColor;\n}\n\n//===================================================================\n\nfloat intersect( in vec3 ro, in vec3 rd, out vec4 info )\n{\n    float t = 0.0;\n    for( int i=0; i<128; i++ )\n    {\n\t    float h = map( ro+rd*t, info );\n        if( (h)<0.001 ) break;\n        t += h*0.9;\n    }\n\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec4 kk;\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy, kk ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx, kk ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy, kk ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx, kk ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.001;\n\tfloat h = 1.0;\n\tvec4 kk;\n    for( int i=0; i<64; i++ )\n    {\n        h = map(ro + rd*t,kk);\n        res = min( res, smoothstep(0.0,1.0,k*h/t) );\n        if( res<0.001 ) break;\n\t\tt += clamp( h, 0.01, 1.0 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, in vec2 px )\n{\n\tfloat off = 0.1*dot( px, vec2(1.2,5.3) );\n\tfloat totao = 0.0;\n    for( int i=ZERO; i<20; i++ )\n    {\n\t\tvec4 kk;\n\t\tvec3 aopos = -1.0+2.0*hash3(float(i)*213.47 + off);\n\t\taopos = aopos*aopos*aopos;\n\t\taopos *= sign( dot(aopos,nor) );\n        totao += clamp( map( pos + nor*0.015 + 0.15*aopos, kk )*48.0, 0.0, 1.0 );\n    }\n\ttotao /= 20.0;\n\t\n    return clamp( totao*totao*1.0, 0.0, 1.0 );\n}\n\n\nconst vec3 rlight = vec3(3.62, 2.99, 0.71 );\nvec3 lig = normalize(rlight);\n\nfloat directLighting( in vec3 pos, in vec3 nor )\n{\n\n    vec3 ww = lig;\n    vec3 uu = normalize( cross(ww, vec3(0.0,1.0,0.0)) );\n    vec3 vv =          ( cross(uu,ww) );\n\n\n    float shadowIntensity = softshadow( pos+0.001*nor, lig, 10.0 );\n\n    vec3 toLight = rlight - pos;\n    float att = smoothstep( 0.985, 0.997, dot(normalize(toLight),lig) );\n\n    vec3 pp = pos - ww*dot(pos,ww);\n    vec2 uv = vec2( dot(pp,uu), dot(pp,vv) );\n    float pat = smoothstep( -0.5, 0.5, sin(10.0*uv.y) );\n\n    return pat * att * shadowIntensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n    // position camera\n\tfloat an = 2.0*sin(0.7+0.5*iTime);// + step(0.0,iMouse.z)*10.0*iMouse.x/iResolution.x;\n\tvec3 ro = vec3(0.8 + 0.2*sin(2.0+an),0.4,1.1 + 0.25*sin(an));\n    vec3 ta = vec3(-0.2,0.1,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 px = fragCoord+o;\n        #else    \n        vec2 px = fragCoord;\n        #endif\n        vec2 p = (2.0*px-iResolution.xy)/iResolution.y;\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\t\tvec3 rq = ro;\n        vec3 col = vec3(0.0);\n        vec3 fac = vec3(1.0);\n        #ifdef USE_REFLECTIONS\n        for( int j=ZERO; j<2; j++ )\n        #endif\n        {\n            // raymarch\n            vec4 info;\n            float t = intersect(rq,rd,info);\n            #ifdef USE_REFLECTIONS\n            if( info.x<-0.5 )\n                break;\n            #endif\t\t\n\n            // geometry\n            vec3 pos = rq + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 ref = reflect( rd, nor );\n            vec3 hal = normalize(lig-rd);\n\n            vec3 bno = vec3(0.0);\n            vec4 maa = calcColor( info, nor, bno );\n            nor = normalize( nor + bno );\n\n            // lighting\n            float occ = calcAO(pos,nor,px);\n            float bfl = clamp(-nor.y*0.8+0.2,0.0,1.0) * pow(clamp(1.0-pos.y/1.0,0.0,1.0),2.0);\n            float amb = 1.0;\n            float bce = clamp( nor.y*0.8+0.2,0.0,1.0);\n            float dif = max(dot(nor,lig),0.0);\n            float bac = max(dot(nor,normalize(vec3(-lig.x,0.0,-lig.z))),0.0);\n            float sha = directLighting( pos, nor )*(0.5+0.5*occ);\n            float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 3.0 );\n            float spe = pow(clamp(dot(nor,hal),0.0,1.0),8.0);\n\t\t\tspe *= 0.04+0.96*pow( clamp( dot(lig,hal), 0.0, 1.0), 5.0 );\n            float att = 0.1 + 0.9*smoothstep( 0.975, 0.997, dot(normalize(rlight - pos),lig) );\n\n            // lights\n            vec3 lin = vec3(0.0);\n            lin += 2.30*dif*vec3(2.50,1.80,1.30)*pow(vec3(sha),vec3(1.0,1.3,1.6));\n            lin += 1.00*bac*vec3(0.40,0.35,0.30)*occ*att;\n            lin += 1.00*bfl*vec3(0.50+att*0.5,0.30,0.10)*occ*att;\n            lin += 1.00*bce*vec3(0.30,0.20,0.20)*occ*att;\n            lin += 1.00*amb*vec3(0.08,0.10,0.12)*occ*att;\n            lin += 1.00*fre*vec3(3.00,3.00,3.00)*occ*att*(0.25+0.75*dif*sha);\n            lin += 1.00*spe*vec3(3.00,3.00,3.00)*occ*att*dif*sha*maa.w;\n\n            // surface-light interacion\n            col += fac * (maa.xyz*lin + spe*maa.w*occ*sha*dif*0.25);\n\n            #ifdef USE_REFLECTIONS\n            fac *= maa.xyz*maa.w*spe;\n            rq = pos + nor*0.01;\n            rd = normalize(ref + 0.02*(2.0*hash3(p.x*11.0+p.y*7.0)-1.0));\n            #endif\t\n        }\n\n        // gamma\n\t    col = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n\n\t// contrast\n    tot = tot*0.6 + 0.4*tot*tot*(3.0-2.0*tot);\n\t\n\t// saturation\n    tot = mix( tot, vec3(dot(tot,vec3(0.33))), 0.2 );\n\t\n    // curves\n    tot = pow(tot,vec3(0.85,0.95,1.0));\n\n\t// vigneting\t\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    tot *= 0.7 + 0.3*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    fragColor = vec4( tot, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}