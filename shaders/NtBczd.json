{
    "Shader": {
        "info": {
            "date": "1650071549",
            "description": "Can't be bothered to figure out the fft right now, I will add it later. ",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBczd",
            "likes": 13,
            "name": "Tater @Revision Shader Jam",
            "published": 3,
            "tags": [
                "raymarching",
                "revision",
                "jam",
                "shaderjam"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "#define STEPS 64.0\n#define MDIST 1500.0\n#define pi 3.14159265\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n#define time mod(iTime,300.)\nfloat h21(vec2 a){\n  return fract(sin(dot(a,vec2(12.9898,78.233)))*43644.45345);\n  \n}\nfloat dibox(vec3 p, vec3 b, vec3 rd){\n  vec3 dir = sign(rd)*b*0.5;\n  vec3 rc = (dir-p)/rd;\n  return min(rc.x,rc.z)+0.1;\n}\nfloat dibox2(vec3 p, vec3 b, vec3 rd){\n  vec3 dir = sign(rd)*b*0.5;\n  vec3 rc = (dir-p)/rd;\n  return (rc.z)+0.1;\n}\nfloat box(vec3 p, vec3 b){\n  vec3 q = abs(p)-b;\n  return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);\n}\nfloat lim(float p, float s, float lima, float limb){\n  return p-s*clamp(round(p/s),lima,limb);\n  \n}\nvec3 spiral(vec3 p, float R){\n  p.xz*=rot(p.y/R);\n  vec2 s = sign(p.xz);\n  p.xz=abs(p.xz)-R*0.5;\n  p.xz*=rot(time*pi/3.);\n  float poy = p.y;\n  p.y=0.;\n  p.yz*=rot(mix(0.,pi/4.,1./(R*0.5+1.5)))*-sign(s.x*s.y);\n  p.y=poy;\n  return p;\n}\nfloat torus(vec3 p, vec2 q){\n  return length(vec2(length(p.xz)-q.x,p.y))-q.y;\n  \n}\nfloat anim = 0.;\nvec3 rdo = vec3(0);\nvec3 glow = vec3(0);\nvec2 map(vec3 p){\n  vec3 rd2 = rdo;\n\n  float speed = 70.;\n  \n  float rotation = tanh(sin(time*2.)*2.)*0.002;\n   if(anim>0.5){\n  p.xy*=rot(p.z*rotation);\n  rd2.xy*=rot(p.z*rotation);\n  }\n  float rotation2 = tanh(cos(time*2.)*5.)*0.001;\n  if(anim>0.5)\n    rotation2 =0.0005;\n    p.zy*=rot(p.z*rotation2);\n    rd2.zy*=rot(p.z*rotation2);\n    vec3 po2 = p;\n\n  vec2 a = vec2(0);\n  p.z+=speed*time;\n    vec3 po = p;\n\n  float m2 =100.;\n  p.y+=m2/2.;\n  p.y = pmod(p.y,m2);\n  float bsize = 16.;\n  float m = 20.+anim*4.;\n  \n  vec2 id = floor(p.xz/m);\n  \n  p.xz = pmod(p.xz,m);\n  float sideBox = 12.;\n  //p.x = lim(p.x-m/2,m,-sideBox/2,sideBox/2);\n  \n  p.y+=tanh(sin(time+floor(h21(id)*pi*(8.-anim*4.)))*8.)*(40.+anim*30.);\n  a.x = box(p,vec3(bsize*0.5,4.+anim*8.,bsize*0.5))-0.3;\n  vec3 glowCol = vec3(0.8,0.7,0.2)*(64./STEPS)*0.8;\n  glowCol.xy*=rot(sin(time)*0.5+0.5+h21(id)*2.-1.);\n  glow+=exp(-a.x)*glowCol*0.1;\n  \n // if(abs(id.x)<sideBox/2+1) \n  a.x = min(a.x,dibox(p,vec3(m),rd2));\n // else\n  //a.x = min(a.x,dibox2(p,vec3(m),rd2));\n  \n  p = po2;\n  p.zy*=rot(pi/2.);\n  vec2 b = vec2(1);\n  //p.xy = abs(p.xy)-20;\n  //p.x = abs(p.x)-40;\n  p = spiral(p,110. /*+ texture(texFFTSmoothed,0.1).x*900*/);\n  p = spiral(p,10.);\n // p = spiral(p,15);\n  //p = spiral(p,8);\n\n  //p = spiral(p,10);\n  //p = spiral(p,5);\n\n  b.x = length(p.xz)-2.;\n  b.x*=0.7;\n  glow+=exp(-b.x)*vec3(0.8,0.7,0.2)*0.1;\n\n  a.x = min(a.x,b.x);\n  p = po;\n  float m3 = 40.;\n  float id3 = floor(p.z/m3);\n  p.z = pmod(p.z,m3);\n  b.x = torus(p.xzy,vec2(134./*+texture(texFFTSmoothed,mod(id3,3.)*0.1).x*1000.*/,5.));\n  \n  glow+=exp(-b.x)*glowCol*0.1;\n  \n\n  a.x = min(a.x,b.x);\n\n  return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1.);\n  \n  anim = sin(time*0.4)*0.5+0.5;\n  if(anim>0.7)\n    anim = 1.;\n    else anim = 0.;\n  \n  vec3 col = vec3(0);\n  vec3 ro = vec3(0,0,-10)*3.;\n  if(anim>0.9){\n    ro = vec3(0,40,-50)*8.;\n  }\n  vec3 lk = vec3(0,0,0);\n  vec3 f = normalize(lk-ro);\n  vec3 r = normalize(cross(vec3(0,1,0),f));\n  vec3 rd = normalize(f*(0.7)+uv.x*r+uv.y*cross(f,r));\n  rdo = rd;\n  vec3 p = ro;\n  vec2 d = vec2(0);\n  float rl = 0.;\n  float shad = 0.;\n  \n  for(float i = 0.; i <STEPS; i++){\n    p = ro+rd*rl;\n    d = map(p);\n    rl+=d.x;\n    if(rl>MDIST){\n      break;\n    }\n  }\n\n  //col = vec3(shad);\n  col+=glow*0.25;\n  \n  col = pow(col,vec3(0.45));\n    fragColor = vec4(col,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}