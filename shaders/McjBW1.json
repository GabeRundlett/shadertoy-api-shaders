{
    "Shader": {
        "info": {
            "date": "1724891646",
            "description": "Inspired by @Shanes' recent shaders, just trying to figure the hexagon/cube thing. Tweaked some things / did that inversion thing - thanks @mla for the looping tricks with IQ's/Shane's noise function - see common tab",
            "flags": 0,
            "hasliked": 0,
            "id": "McjBW1",
            "likes": 33,
            "name": "Byt3-daily-013",
            "published": 3,
            "tags": [
                "2d",
                "cube",
                "hexagon",
                "warp",
                "polar",
                "tile"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Inspired by @Shanes' recent shaders, just trying to figure the hexagon/cube thing. \n    Tweaked some things / did that inversion thing - thanks @mla for the looping tricks\n    with IQ's/Shane's noise function - see common tab\n\n    Byt3-daily-013\n    08/28/2024  @byt3_m3chanic\n    \n*/\n\n#define R     iResolution\n#define T     iTime\n#define M     iMouse\n\n#define PI    3.141592653\n#define PI2   6.283185307\n\n// Hexagon grid system, can be simplified but\n// written out long-form for readability. \n// return vec2 uv and vec2 id\nvec4 hexgrid(vec2 uv) {\n    vec2 p1 = floor(uv/vec2(1.732,1))+.5;\n    vec2 p2 = floor((uv-vec2(1,.5))/vec2(1.732,1))+.5;\n    \n    vec2 h1 = uv-p1*vec2(1.732,1);\n    vec2 h2 = uv-(p2+.5)*vec2(1.732,1);\n    return dot(h1,h1) < dot(h2,h2) ? vec4(h1,p1) : vec4(h2,p2+.5);\n}\n\nvec3 hue(vec3 a) { \n    float t = a.x+T*.1;\n    vec3 d = vec3(0.929,0.690,0.027);\n    return .45 +.45*cos( PI2*t*vec3(.984,.914,.914)+d ); \n}\nfloat truch(vec2 uv, vec2 id) {\n    float ln = .125;\n    vec2 vv = uv;\n    vec2 vd = floor(vv*10.);\n    vv = fract(vv*10.)-.5;\n    float rnd = hash21(vd+id+iDate.z);\n    if(rnd>.5) vv.x = -vv.x;\n    \n    float t = abs(max(abs(vv.x),abs(vv.y))-.5)-.02;\n    vec2 q = length(vv-.5) < length(vv+.5) ? vv-.5 : vv+.5;\n    float d = abs(length(q)-.5)-ln;\n    if(fract(rnd*43.57)>.8) d = min(length(vv.x)-ln,length(vv.y)-ln);\n    float ck = mod(vd.x+vd.y,2.)*2.-1.;\n    return min(t,d);\n}\n\nvoid cube(inout vec3 C, vec2 uv, vec2 id, float px, float rnd, float lvl) {\n\n    float ln = .005, hn = ln/2.;\n    float hs = 1.;\n    \n    float d = max(abs(uv.x)*.866025 + abs(uv.y)/2., abs(uv.y))-(hs*.497);\n    C = mix(C,vec3(0),smoothstep(px,-px,abs(d)-ln));\n    \n    uv.x -= (hs*.5);\n    float tbase =length( abs(uv.x)*.866025 + abs(uv.y)/2.)- (hs*.433);\n    float e = min(tbase, length(uv.y));\n    \n    rnd = fbm3(vec3(id*5.,1.));\n    lvl = (lvl*1.35)+fract(rnd*31.37);\n    \n    // color sides\n    C = mix(C,hue(vec3(lvl,.5,.8)),smoothstep(px,-px,max(tbase,d)) );\n    C = mix(C,hue(vec3(lvl+.15,1,.4)),smoothstep(px,-px,max(max(uv.y,-tbase),d)) );\n    C = mix(C,hue(vec3(lvl+.75,1,.2)),smoothstep(px,-px,max(max(max(-uv.y,uv.x),-tbase),d)) );\n\n    if(lvl>1.) C = mix(C,rnd>.5? C+.25: C*.25,smoothstep(px,-px,length(uv+vec2(.52,0)*hs)-(hs*.35)));\n    \n    // truchet patterns\n    id+=floor(rnd*15.);\n    float uvx = uv.x*.86602;\n    float uvy = uv.y/1.33;\n    vec2 vv = vec2(uvx,uv.y/2.);\n\n    vv *= rot(.78);\n    vv *= 1.12;\n    vv += vec2(.05,-.05);\n    float t = truch(vv, id);\n    C = mix(C,clamp(C+.25,C,vec3(1)),smoothstep(px,-px,max(max(tbase,d),t)) );\n    \n    vv = vec2(uvx,uvy)+vec2(uv.y*.5,0);\n    vv *= 1.02;\n    vv -= vec2(.055,.01);\n    t = truch(vv, id);\n    C = mix(C,clamp(C+.2,C,vec3(1)),smoothstep(px,-px,max(max(uv.y,max(d,-tbase)),t) ) );\n    \n    vv = vec2(uvx,uvy)-vec2(uv.y*.5,0);\n    vv *= 1.02;\n    vv -= vec2(.055,-.01);\n    t = truch(vv, id);\n    C = mix(C,clamp(C-.15,vec3(0),C),smoothstep(px,-px,max(max(max(-uv.y,uv.x),-tbase),t)) );\n \n    C = mix(C,vec3(0),smoothstep(px,-px,max(abs(e)-hn,d)));\n}\n\nconst float mx = 4.;\nconst float mz = mx-1.;\n    \nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n\n    vec3 C = vec3(.004);\n    uv *= rot(T*.05);\n    uv = vec2(log(length(uv)),atan(uv.y,uv.x))-((2.*M.xy-R.xy)/R.xy);\n    uv /= 3.627;\n    uv *= N;\n    uv.x += T*.05;\n  \n    float px = fwidth(uv.x);\n\n    vec4 H;\n    vec2 p, id;\n    float rnd;\n    \n    \n    for(float i=0.;i<mx;i++) {\n        float sc = mx-i;\n        sc*=2.;\n        H = hexgrid(uv.yx*sc);\n        p = H.xy, id = H.zw;\n        rnd = fbm3(vec3((id*sc)+i,1.));\n        if(rnd>.55) cube(C,p,id*sc,px,rnd,i+.5);\n        if(i<mz) C *= (i+.5)*.3;\n        uv.x += T*.05;\n    }\n    \n    fragColor = vec4(pow(C,vec3(.4545)),1);\n}\n\n\n\n\n\n\n\n\n\n\n// end\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Inspired by @Shanes' recent shaders, just trying to figure the hexagon/cube thing.\n\n    Byt3-daily-013\n    08/28/2024  @byt3_m3chanic\n    \n*/\n\nmat2 rot(float g) {\n return mat2(cos(g), sin(g),-sin(g), cos(g));\n}\n\nfloat hash21( vec2 p ) {\n    return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);\n}\n\nconst float N = 3.;\n// @Shane - a very tightly compacted, self-contained version \n// of IQ's 3D value noise function.\n//---------------------------------------------------------------\nfloat n3D(vec3 p){\n    const vec3 s = vec3(113, 57, 27);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n//---------------------------------------------------------------\n// @iq fbm generator\nfloat fbm3( in vec3 x) {\n\n    //@mla : shifting the xy value from the range [-PI,+PI] to [0,2N]\n    x.x = mod(x.x,4.*N);\n    x.y = mod(x.y,4.*N);\n    \n    x*=.085;\n    float a = 0.1,b = .5,f = 2.;\n    vec3  d = vec3(0.);\n    for (int i = 0; i < 4; ++i) {      \n        float n = n3D(f*x);\n        a += b*n;\n        b *= 0.5;\n        f *= 1.8;\n    }\n\treturn a;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}