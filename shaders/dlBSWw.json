{
    "Shader": {
        "info": {
            "date": "1676220180",
            "description": "U can insert any shader in buffer A ! \nPress space to reset (when you change resolution)\nIn Common, u can change number of tiles and swap frequency with SPEED\n\n\n//TODO interactive swap",
            "flags": 48,
            "hasliked": 0,
            "id": "dlBSWw",
            "likes": 8,
            "name": "Taquin",
            "published": 3,
            "tags": [
                "taquin"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "vec3 TileColoring(vec2 idx, vec2 pos){\n    vec2 uv = (idx + pos)/TILE;\n    return texture(iChannel0, uv).rgb;\n}\n\nvec2 getTile(vec2 uv){\n    vec2 st = texture(iChannel1, uv).xy;\n    return st;\n}\n\n\nfloat getHeight(vec2 uv){\n    float L = length_(uv-.5, 14.);\n    float H = pow(L*2., 8.);\n    return (H);\n}\n\nvec3 calcNormal(vec2 uv){\n    vec2 eps = vec2(1.,-1.)*.01;\n    return normalize(\n            eps.yxx*getHeight(uv+eps.yx)+\n            eps.xyx*getHeight(uv+eps.xy)+\n            eps.xxx*getHeight(uv)\n            );\n}\n\nvec3 getLight(vec2 uv, vec3 col, vec2 globalUV){\n    \n    vec3 sp = vec3(globalUV, 0.);\n   \n    // FROM https://www.shadertoy.com/view/DtfSRB\n    vec2 eps = vec2(1.,0.)*.001;\n    float h = getHeight(uv);\n    vec3 bumpMap = vec3(  (getHeight(uv+eps.xy)-h), (getHeight(uv+eps.yx)-h), 0.)/eps.x*.2;\n    \n    vec3 rd = normalize(vec3(uv, 1.));\n    vec3 lp = vec3(iMouse.xy/iResolution.xy, -0.45); // Light position\n    vec3 sn = vec3(0., 0., -1);\n    \n    sn = normalize( sn + bumpMap);           \n\n    \n    vec3 ld = lp-sp;\n\tfloat lDist = max(length(ld), 0.001);\n\tld /= lDist;  \n        \n\tfloat diff = max(dot(sn, ld), 0.);  \n    float spec = pow(max(dot( reflect(-ld, sn), -rd), 0.), 62.);\n    \n    return (diff*col*.9 + spec*vec3(.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 SLOT = floor(uv*TILE);\n\n    vec2 idx = getTile(uv);\n    vec2 coord = fract(uv*TILE);\n    vec2 free = texture(iChannel1, uv).zw;\n    \n        \n    float L = length_(coord-.5, 10.);\n    float border = S(.5, .48, L);\n\n    \n    vec3 col = getLight(coord,  TileColoring(idx, coord)*border, uv);\n    col = (SLOT == free) ? vec3(0.) : col;\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\n// Value noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( random( i + vec2(0.0,0.0) ),\n                     random( i + vec2(1.0,0.0) ), u.x),\n                mix( random( i + vec2(0.0,1.0) ),\n                     random( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nfloat lines(in vec2 pos){\n    float scale = 10.0;\n    pos *= scale;\n    float v = sin(pos.x*3.1415);\n    \n    return smoothstep(-1., 1., v/fwidth(v));\n}\n\n\n// https://thebookofshaders.com/edit.php#11/circleWave-noise.frag\nfloat shape(vec2 st, float radius) {\n    float r = length(st)*2.0;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*2.,3.14*2.)-3.14)/3.6;\n    float f = radius ;\n    m += noise(st+iTime*0.1)*.5;\n    // a *= 1.+abs(atan(u_time*0.2))*.1;\n    // a *= 1.+noise(st+u_time*0.1)*0.1;\n    f += sin(a*10.)*noise(st+iTime*.2)*.1;\n    f += (sin(a*20.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.1,r);\n}\n\nfloat shapeBorder(vec2 st, float radius, float width) {\n    return shape(st,radius)-shape(st,radius-width);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy-.5;\n\n    vec2 pos = uv.yx*vec2(2.,4.);\n\n    float circle = 1. - step(shapeBorder(uv,0.6+ abs(cos(iTime))*.2, 10.), length(uv));\n\n\n    float pattern_ext = 0.;\n    float pattern_int = 0.;\n\n    pos += abs(cos(.5*iTime*vec2(0.1+sin(iTime/1600.), cos(iTime)/1600.+.2)*.2+ .1*length(pos)*vec2(1.,.1)));\n\n    // Add noise\n    pos = rotate2d(noise(pos) ) * pos;\n    // Draw lines\n    pattern_ext = 2.*lines(pos*(1.-circle));\n    \n    pattern_int = 2.*lines(pos*circle);\n    \n    vec3 pattern_color = (1.-circle)*pattern_ext*vec3(.6, .2, .1);\n    pattern_color += (circle)*(1.-pattern_int)*vec3(.2, .4, .3);\n    \n    \n\n    // Output to screen\n    fragColor = vec4(pattern_color+.05,1.0);\n    \n }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Usless for the moment, i will update this to swap the tiles smoothly\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 displacement = vec2(0.);\n    vec2 toMove = vec2(0.);\n    if (iFrame == 0){\n        fragColor.xy = displacement;\n        fragColor.zw = toMove;\n        return;\n    }\n    \n    if (mod(float(iFrame), 100.) == 0.){\n        vec2 free = texture(iChannel1, uv).zw;\n        vec2 toMove = ChooseNeighbour(free, iFrame);\n        fragColor.zw = toMove;\n        return;\n    }\n    else{\n        toMove = texture(iChannel0, uv).zw;\n        float tmp = mod(float(iFrame), 100.);\n        displacement = clamp(toMove*tmp/40., vec2(-1,-1), vec2(1., 1.));\n        fragColor.xy = displacement;\n        fragColor.zw = toMove;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TILE 9.\n#define SPEED 10.\n#define S(a,b,c) smoothstep(a,b,c)\n\n\nfloat hash11(float p){\n    return fract(sin(p*4573.2345)*143.1234);\n}\n\nfloat hash21(vec2 p){\n    return fract(sin(dot(p, vec2(134.25463, 289.3458))*4573.2345)*143.1234);\n}\n\nfloat length_(vec2 uv, float P){\n    float x = pow(abs(uv.x), P);\n    float y = pow(abs(uv.y), P);\n    return pow(x+y, 1./P);\n}\n\nvec2 ChooseNeighbour(vec2 free, int iFrame){\n   // Very ugly\n   float r = hash11(float(iFrame)/743.);\n   if (free == vec2(0.)){\n       return (r>.5) ? vec2(0,1) : vec2(1,0);\n   }\n   if (free.x == 0.){\n       if (free.y == TILE-1.){\n           return (r>.5) ? vec2(1,0) : vec2(0,-1);\n       }\n       return (r<.33) ? vec2(1,0) : (r<.66) ? vec2(0,1) : vec2(0,-1);\n   }\n   if (free.y == 0.){\n       if (free.x == TILE-1.){\n           return (r>.5) ? vec2(-1,0) : vec2(0,1);\n       }\n       return (r<.33) ? vec2(0,1) : (r<.66) ? vec2(1,0) : vec2(-1,0);\n   }\n   if (free.y == TILE-1.){\n       if (free.x == TILE-1.){\n           return (r>.5) ? vec2(-1,0) : vec2(0,-1);\n       }\n       return (r<.33) ? vec2(1,0) : (r<.66) ? vec2(-1,0) : vec2(0,-1);\n   }\n   \n   if (free.x == TILE-1.){\n       return (r<.33) ? vec2(-1,0) : (r<.66) ? vec2(0,-1) : vec2(0,1);\n   }\n   return (r<.25) ? vec2(-1,0) : (r<.5) ? vec2(0,-1) : (r<.75) ? vec2(1, 0) : vec2(0, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 SLOT = floor(uv*TILE);\n\n    if (iFrame == 0 || texelFetch(iChannel3,ivec2(32,0),0).x > 0.){\n        fragColor.xy = floor(uv*TILE);\n        fragColor.zw = vec2(2,2);\n    }\n    else{\n        vec4 state = texture(iChannel0, uv).xyzw;\n\n        if (mod(float(iFrame), float(int(SPEED))) == 0.){\n        \n            vec2 st = state.xy;\n            vec2 free = state.zw;\n\n            vec2 tile_idx = floor(st);\n\n            vec2 toMove = ChooseNeighbour(free, iFrame);\n\n            if(toMove != vec2(0,0)){\n\n                if (SLOT == toMove+free)\n                    tile_idx = floor(texture(iChannel0, (SLOT-toMove+.1)/TILE).xy);\n                else if (SLOT == free) \n                    tile_idx = floor(texture(iChannel0, (SLOT+toMove+.1)/TILE).xy);\n            }\n            fragColor.xy = vec2(tile_idx);\n            fragColor.zw = free+toMove;\n\n        }\n        else fragColor = state;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}