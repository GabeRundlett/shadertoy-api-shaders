{
    "Shader": {
        "info": {
            "date": "1612846241",
            "description": "fract() is used on a distance field's space to chop it in equal lengths\nbut what if you want a chop that varies in length across space",
            "flags": 48,
            "hasliked": 0,
            "id": "ttcfW7",
            "likes": 6,
            "name": "space chop that varies in length",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "wasd"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "float objec(vec3 p)\n{\n    float a = 999999.;\n    vec3 q = vec3(0);\n\n    //constant size increase cubes\n    //1,2,2,3,3,3,4,4,4,4, 5, 5, 5, 5, 5    https://oeis.org/search?q=1%2C2%2C2%2C3%2C3%2C3%2C4%2C4%2C4%2C4%2C5%2C5%2C5%2C5%2C5&sort=&language=english&go=Search\n    //0,1,2,3,4,5,6,7,8,9,10,11,12,13,14\n    //| |-- |---- |------ |-------------\n    //0,1,1,3,3,3,6,6,6,6,10,10,10,10,10    https://oeis.org/search?q=0%2C1%2C1%2C3%2C3%2C3%2C6%2C6%2C6%2C6%2C10%2C10%2C10%2C10%2C10&sort=&language=english&go=Search\n    q = p;\n    q.x = abs(q.x);\n    float n = floor(q.x);\n    float s = sqrt(1.+8.*n);\n    float t = floor((s-1.)*.5)*floor((s+1.)*.5)*.5;\n    float r = round(sqrt(2.*(n+1.)));\n    q.x = q.x-t-r*.5;\n    a = min(a,length(max(abs(q)-r*.25,vec3(0)))-.5);\n    \n    //exponiential size increase cubes\n    //1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5        https://oeis.org/search?q=1%2C2%2C2%2C3%2C3%2C3%2C3%2C4%2C4%2C4%2C4%2C4%2C4%2C4%2C4&sort=&language=english&go=Search\n    q = p;\n    q.z = abs(q.z);\n    n = floor(q.z);\n    r = floor(log2(n));\n    t = pow(2.,r)-0.;\n    r = pow(2.,r);\n    \n    q.z = q.z-t-r*.5;\n    a = min(a,length(max(abs(q)-r*.25,vec3(0)))-.5);\n        \n    return a;\n}\nvoid march(vec3 look, inout vec3 p, inout float d)\n{\n    for (int i = 0; i < 32; ++i)\n    {\n        d = objec(p);\n        p += d*look;\n    }\n}\n#define D .001\nvec3 normal(vec3 p){\n    return normalize(vec3(\n        objec(p+vec3(D,0.,0.)) - objec(p-vec3(D,0.,0.)),\n        objec(p+vec3(0.,D,0.)) - objec(p-vec3(0.,D,0.)),\n        objec(p+vec3(0.,0.,D)) - objec(p-vec3(0.,0.,D))\n    ));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 look   = texture( iChannel0, (vec2(1.,0.)+.5)/iResolution.xy).xyz;\n    vec3 camPos = texture( iChannel0, (vec2(2.,0.)+.5)/iResolution.xy).xyz;\n         camPos+= vec3(32.,32.,-32.);\n    \n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    mat3 mtx;\n    mtx[0] = normalize(vec3(look.z,0.,-look.x));\n    mtx[1] = cross(look,mtx[0]);\n    mtx[2] = look;\n    look = mtx*normalize(vec3(uv,1.));\n \n    vec3 p = camPos;\n    float d = 0.;\n    march(look, p, d);\n    vec3 n = look;\n    if(d<.1){ n = normal(p); }\n\tfragColor = vec4(n,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void rotVec(inout vec4 v, float x, float y)\n{\n    y = asin(v.y) - y;\n    if(-1.56 > y){y =-1.56;};\n    if( 1.56 < y){y = 1.56;};\n    float l = cos(y);\n    x = -x;\n    v.xz = vec2(v.x*cos(x) - v.z*sin(x),\n                v.x*sin(x) + v.z*cos(x));\n    v.xz*= l/length(v.xz);\n    v.y  = sin(y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float keyW  = texture( iChannel1, vec2(87.5/256.,.25) ).x;\n    float keyS  = texture( iChannel1, vec2(83.5/256.,.25) ).x;\n    float keyA  = texture( iChannel1, vec2(65.5/256.,.25) ).x;\n    float keyD  = texture( iChannel1, vec2(68.5/256.,.25) ).x;\n    vec4 mouse  = texture( iChannel0, vec2(0.5,.5)/iResolution.xy);\n    vec4 look   = texture( iChannel0, vec2(1.5,.5)/iResolution.xy);\n    vec4 camPos = texture( iChannel0, vec2(2.5,.5)/iResolution.xy);\n    vec4 final = vec4(0.);\n    \n    //make sure \"look\" always is a normalized vector\n    if(dot(look,look)==0.){look = normalize(vec4(-1.,-1.,1.,0.));}\n    \n    if(fragCoord.x == 0.5)//mod mouse texel\n    {\n        if(iMouse.z>0.){ mouse = iMouse; }\n        else           { mouse.z = 0.;   }\n\t\tfinal = mouse;\n    }\n    if(fragCoord.x == 1.5)//mod look texel\n    {\n        if(iMouse.z>0. && mouse.z>0.)\n        {\n            mouse = (iMouse-mouse)*4./iResolution.y;\n            rotVec(look, mouse.x, -mouse.y); \n        }\n        final = look;\n    }\n    if(fragCoord.x == 2.5)//mod camPos texel\n    {\n        final = camPos + look*(keyW-keyS)*1.1 +\n                normalize(vec4(look.z,0.,-look.x,0.))*(keyD-keyA)*1.1;\n    }\n    fragColor = final;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}