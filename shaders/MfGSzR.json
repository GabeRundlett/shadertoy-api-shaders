{
    "Shader": {
        "info": {
            "date": "1714687047",
            "description": "It's supposed to be \"recursive\", and it should keep adding circles inside the circles.\n[url]https://thecodingtrain.com/challenges/182-apollonian-gasket[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MfGSzR",
            "likes": 1,
            "name": "Apollonian Gasket (Help needed)",
            "published": 3,
            "tags": [
                "apollonian"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "/*\n* Wanted to try this:\n  https://thecodingtrain.com/challenges/182-apollonian-gasket\n\n  but I only figured out how to get one generation of triplets.\n  \n  Any help would be appreciated :D\n*/\n\n#define R iResolution.xy\n#define EPSILON 0.1\n\nvec2 cmplx_mul(vec2 t, vec2 o) {\n    float a = t.x * o.x - t.y * o.y;\n    float b = t.x * o.y + o.x * t.y;\n    return vec2(a, b);\n}\n\nvec2 cmplx_sqrt(vec2 t) {\n    float m = sqrt(t.x * t.x + t.y * t.y);\n    float angle = atan(t.y, t.x);\n    m = sqrt(m);\n    angle = angle / 2.0;\n    return vec2(m * cos(angle), m * sin(angle));\n}\n\nstruct Circle {\n    float bend;\n    vec2 center;\n    int id;\n};\n\nstruct CircleTriplet {\n    Circle c1;\n    Circle c2;\n    Circle c3;\n};\n\nfloat getCircleRadius(Circle c) { return 1.0 / abs(c.bend); }\n\nvec2 descartes(Circle c1, Circle c2, Circle c3) {\n  float k1 = c1.bend;\n  float k2 = c2.bend;\n  float k3 = c3.bend;\n  float sum = k1 + k2 + k3;\n  float product = abs(k1 * k2 + k2 * k3 + k1 * k3);\n  float root = 2.0 * sqrt(product);\n  return vec2(sum + root, sum - root);\n}\n\nvoid cmplx_descartes(Circle c1, Circle c2, Circle c3, vec2 k4, inout Circle circles[4]) {\n  // Curvature and center calculations for new circles\n  float k1 = c1.bend;\n  float k2 = c2.bend;\n  float k3 = c3.bend;\n  vec2 z1 = c1.center;\n  vec2 z2 = c2.center;\n  vec2 z3 = c3.center;\n\n  vec2 zk1 = z1 * k1;\n  vec2 zk2 = z2 * k2;\n  vec2 zk3 = z3 * k3;\n  vec2 sum = zk1 + zk2 + zk3;\n\n  vec2 root = cmplx_mul(zk1, zk2) + cmplx_mul(zk2, zk3) + cmplx_mul(zk1, zk3);\n  root = cmplx_sqrt(root) * 2.0;\n  vec2 center1 = (sum + (root)) * (1.0 / k4[0]);\n  vec2 center2 = (sum - (root)) * (1.0 / k4[0]);\n  vec2 center3 = (sum + (root)) * (1.0 / k4[1]);\n  vec2 center4 = (sum - (root)) * (1.0 / k4[1]);\n\n  \n  circles[0] = Circle(k4[0], center1, c3.id + 1);\n  circles[1] = Circle(k4[0], center2, c3.id + 2);\n  circles[2] = Circle(k4[1], center3, c3.id + 3);\n  circles[3] = Circle(k4[1], center4, c3.id + 4);\n}\n\nfloat drawCircle(vec2 p, Circle circle) {\n    float radi = getCircleRadius(circle);\n    float fe = radi*0.01;\n    float c = smoothstep(radi+fe, radi-fe, distance(p, circle.center));\n    \n    radi -= 0.01;\n    fe = radi*0.01;\n    float ci = smoothstep(radi+fe, radi-fe, distance(p, circle.center));\n    \n    return max(0.0, c-ci);\n}\n\nbool isTangent(Circle c1, Circle c2) {\n  float d = distance(c1.center, c2.center);\n  float r1 = getCircleRadius(c1);\n  float r2 = getCircleRadius(c2);\n  bool a = abs(d - (r1 + r2)) < EPSILON;\n  bool b = abs(d - abs(r2 - r1)) < EPSILON;\n  return a || b;\n}\n\nbool validate(Circle c, Circle c1, Circle c2, Circle c3) {\n  if (getCircleRadius(c) < 0.0) return false;\n  if (!isTangent(c, c3)) return false;\n  if (!isTangent(c, c2)) return false;\n  if (!isTangent(c, c3)) return false;\n  return true;\n}\n\nvoid nextTriplet(Circle prev[3], inout Circle next[4], inout CircleTriplet triplets[16], inout int tripletCount) {\n    Circle c1 = prev[0];\n    Circle c2 = prev[1];\n    Circle c3 = prev[2];\n    vec2 k4 = descartes(c1, c2, c3);    \n    Circle tmp[4];\n    \n    cmplx_descartes(c1, c2, c3, k4, tmp);\n    \n    int cursor = 0;\n    tripletCount = 0;\n    for (int i = 0; i < 4; i++) {\n        Circle newCircle = tmp[i];\n        next[cursor++] = newCircle;\n        if (validate(newCircle, c1, c2, c3)) {\n            CircleTriplet t1 = CircleTriplet(c1, c2, newCircle);\n            CircleTriplet t2 = CircleTriplet(c1, c3, newCircle);\n            CircleTriplet t3 = CircleTriplet(c2, c3, newCircle);\n            triplets[tripletCount++] = t1;\n            triplets[tripletCount++] = t2;\n            triplets[tripletCount++] = t3;\n        }\n    }\n}\n\nvec3 drawTriplet(vec2 p, Circle circles[3]) {\n    vec3 col = vec3(0.0);\n    for (int i = 0; i < 3; i++) {\n        col += drawCircle(p, circles[i]);\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 o, in vec2 fc )\n{\n    vec2 uv = (fc.xy - 0.5 * R.xy)/R.y;\n    vec3 col = vec3(0.0);\n    vec2 texel = R.xy / R.y;\n    \n    \n    float y = 0.009*sin(iTime);\n    float rB = 2.0;\n    float rS = rB*2.0;\n\n    Circle c1 = Circle(-rB, vec2(0.0, 0.0), 0);\n    Circle c2 = Circle(rS, vec2(0.5-(1.0/rS), y), 1);\n    Circle c3 = Circle(rS, vec2((1.0/rS)-0.5, y), 2);\n    \n    Circle prev[3] = Circle[](c1, c2, c3);\n    Circle next[4];\n    col += drawTriplet(uv, prev);\n    \n    int tripletCount = 0;\n    CircleTriplet triplets[16];\n   \n    nextTriplet(prev, next, triplets, tripletCount);\n    prev = Circle[3](next[0], next[1], next[2]);\n    col += drawCircle(uv, triplets[1].c3);\n    col += drawCircle(uv, next[1]);\n    \n   \n\n    o = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}