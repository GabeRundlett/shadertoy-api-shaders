{
    "Shader": {
        "info": {
            "date": "1564381749",
            "description": "Use the mouse to set your \"c\" value!",
            "flags": 0,
            "hasliked": 0,
            "id": "tlsSWj",
            "likes": 5,
            "name": "Interactive Smooth Julia Set",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "interactive"
            ],
            "usePreview": 0,
            "username": "snerp",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "vec2 complexMult(vec2 a, vec2 b) {\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nfloat testJulia(vec2 coord) {\n    vec2 mouse = 2.0*iMouse.xy/iResolution.xy -1.0;\n    const int iterations = 100;\n\tvec2 testPoint = coord;\n\tfor (int i = 0; i < iterations; i++){\n\t\ttestPoint = complexMult(testPoint,testPoint) + mouse;\n        float ndot = dot(testPoint,testPoint);\n\t\tif (ndot > 45678.0) {\n            float sl = float(i) - log2(log2(ndot))+4.0;\n\t\t\treturn sl/float(iterations);\n\t\t}\n\t}\n\treturn 0.0;\n}\n\nvec4 mapColor(float mcol) {\n    return vec4(0.5 + 0.5*cos(2.7+mcol*30.0 + vec3(0.0,.6,1.0)),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 aspect = vec2(1,iResolution.y/iResolution.x);\n    vec2 fragment = fragCoord/iResolution.xy - vec2(0.5);\n\tvec2 uv = 5.0 * aspect * fragment;\n\n\tfragColor = mapColor(testJulia(uv));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}