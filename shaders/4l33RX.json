{
    "Shader": {
        "info": {
            "date": "1470405734",
            "description": "A template for raytracing / pathtracing / raymarching including some useful methods and wasd as well as mouse controls\n- Good random algorithm\n- Random and semirandom ray generation\n- View maker\n- WASD controls and mouse look\n",
            "flags": 48,
            "hasliked": 0,
            "id": "4l33RX",
            "likes": 7,
            "name": "Raytracer boilerplate",
            "published": 3,
            "tags": [
                "raytracerboilerplatetemplate"
            ],
            "usePreview": 0,
            "username": "pixartist",
            "viewed": 1221
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Created by pixartist (pixartist dot de at gmail dot com)\n//Feel free to use this as long as you credit me\n\n\n//seed for random algorithm\nfloat seed = 0.0;\n//global uv coordinate\nvec2 uv;\n//helper for RNG\n#define uv2 uv+vec2(72.12, -12.423457)*mod(iTime, 23.12639)\n\n//mmmhh PIE\nconst float PI = 3.14159265359;\n\n\n//ray struct\nstruct Ray\n{\n    vec3 o;\n    vec3 d;\n};\n\n//reads data from input buffer (for controls)\nvec4 readData(int x, int y)\n{\n    return texture(iChannel1, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\n\n\n//custom random function\nfloat rand() \n{ \n    vec2 s = uv2;\n    float n = fract(sin(seed+=1.0)*43758.5453123);\n    return fract(n + fract(sin(dot(vec2(n * s.y, s.x)*0.123,vec2(12.9898,78.233))) * 43758.5453));\n}\n//returns a random direction vector inside the hemisphere of the given normal\nvec3 rndDirHemisphere(vec3 n)\n{\n    float r2 = rand();\n    float phi = 2.0*PI*rand();\n    float sina = sqrt(r2);\n    float cosa = sqrt(1. - r2);\n    vec3 w = normalize(n), u = normalize(cross(w.yzx, w)), v = cross(w, u);\n\treturn (u*cos(phi) + v*sin(phi)) * sina + w * cosa;\n}\n//returns a random direction vector inside the hemisphere of the given normal mixed with the given normal by a factor\nvec3 weightedRndDirHemisphere(vec3 n, float randomness)\n{\n    return mix(n, rndDirHemisphere(n), randomness);\n}\n//creates a view\nRay makeView(vec3 p, vec3 up, vec3 tgt)\n{\n    float f = iResolution.x / iResolution.y;\n    vec3 dir = normalize(tgt - p);\n    up = normalize(up);\n    vec3 right = cross(dir, up);\n    Ray res;\n    vec3 uv3 = right * (uv.x - 0.5) * f + up * (uv.y - 0.5);\n    res.o = (p + uv3) * 0.01;\n    res.d = dir + uv3 * 2.0;\n    res.d = normalize(weightedRndDirHemisphere(res.d, 0.0015));\n    return res;\n}\n//init is called at the start (after uv was set)\nvoid init()\n{\n    seed = (uv.y + iTime * 0.523413187) * sqrt(uv.x * 0.77777777 * iTime);\n}\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy / iResolution.xy;\n\tinit();\n    vec4 pos = readData(0,0);\n    vec4 fw = readData(0,1);\n    \n    vec3 up = cross(fw.xyz, -cross(fw.xyz, vec3(0.0, 1.0, 0.0)));\n    Ray v = makeView(\n        pos.xyz,\n        up,\n        pos.xyz + fw.xyz\n    );\n    \n    //RAYTRACE HERE\n    fragColor = vec4(v.d, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//This program is for controls / keyboard and mouse input\nconst float PI = 3.14159265359;\n//movement speed\nconst float speed = 1.0;\n\nint kA=65,kB=66,kC=67,kD=68,kE=69,kF=70,kG=71,kH=72,kI=73,kJ=74,kK=75,kL=76,kM=77,kN=78,kO=79,kP=80,kQ=81,kR=82,kS=83,kT=84,kU=85,kV=86,kW=87,kX=88,kY=89,kZ=90;\nint k0=48,k1=49,k2=50,k3=51,k4=52,k5=53,k6=54,k7=55,k8=56,k9=57;\nint kSpace=32,kLeft=37,kUp=38,kRight=39,kDown=40,kCtrl=17;\nfloat ReadKeyFloat(int key)\n{\n\tfloat keyVal = texture( iChannel0, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn keyVal;\n}\nvec4 readData(int x, int y)\n{\n    return texture(iChannel1, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\nbool checkPos(int x, int y, vec2 fc)\n{\n    return int(fc.x) == x && int(fc.y) == y;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 self = texture(iChannel1, uv);\n    self.a = 0.0;\n\tif(iFrame < 5)\n    {\n        if(checkPos(0,0,fragCoord))\n    \t{\n            //set your initial position\n        \tself = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n        else\n        {\n            //and direction here\n            self = vec4(0.0, 0.0 ,1.0, 1.0);\n        }\n    }\n\n    //Position with WASD, space and ctrl\n    if(checkPos(0,0,fragCoord))\n    {\n        vec3 fw = readData(0, 1).rgb;\n        if(ReadKeyFloat(kW) > 0.0)\n        {\n            self += vec4(fw * speed, 1.0);\n        }\n        if(ReadKeyFloat(kS) > 0.0)\n        {\n            self -= vec4(fw * speed, -1.0);\n        }\n        if(ReadKeyFloat(kA) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            self -= vec4(right * speed, -1.0);\n        }\n        if(ReadKeyFloat(kD) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            self += vec4(right * speed, 1.0);\n        }\n        if(ReadKeyFloat(kSpace) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            vec3 up = cross(fw, -right);\n            self += vec4(up * speed, 1.0);\n        }\n        if(ReadKeyFloat(kCtrl) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            vec3 up = cross(fw, -right);\n            self -= vec4(up * speed, -1.0);\n        }\n    }\n    //Direction by mouse\n    else if(checkPos(0,1,fragCoord))\n    {\n        vec3 lmp = readData(0, 2).xyw;\n        if(lmp.z > 0.0)\n        {\n            \n            float x = (lmp.x / iResolution.x) * PI * 2.0 * 2.0;\n            float y = (lmp.y / iResolution.y) * PI;\n            float upDown = -cos(y);\n            vec3 d = vec3(cos(x), upDown * 2.0, sin(x));\n            self = vec4(normalize(d), 1.0);\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    } \n    //mouse loca\n    else if(checkPos(0,2,fragCoord))\n    {\n        vec3 lmp = readData(0, 3).xyw;\n        if(lmp.z > 0.0)\n        {\n            \n            self.xy += vec2(iMouse.x - lmp.x ,iMouse.y - lmp.y);\n            self.y = clamp(self.y, 0.0, iResolution.y);\n            self.a = 1.0;\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    //last mouse pos\n    else if(checkPos(0,3,fragCoord))\n    {\n        if(iMouse.z > 0.0)\n        {\n            self = vec4(iMouse.x,iMouse.y,0, 1.0);\n            self.a = 1.0;\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    fragColor = self;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}