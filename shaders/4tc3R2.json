{
    "Shader": {
        "info": {
            "date": "1470171459",
            "description": "a simple 2D function plotter for testing wave functions",
            "flags": 0,
            "hasliked": 0,
            "id": "4tc3R2",
            "likes": 5,
            "name": "waves plotter",
            "published": 3,
            "tags": [
                "2d",
                "waves",
                "plot"
            ],
            "usePreview": 0,
            "username": "miloszmaki",
            "viewed": 812
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141592;\n\nconst vec2 range = vec2(60, 10);\nconst float lineThickness = 3.;\nconst float gridThickness = 1.;\n\nconst float speed = 2. * PI / 5.;\n\nvec3 plot(float fy, vec2 uv, vec3 color)\n{\n    return color * step(abs(fy - uv.y) * iResolution.y, lineThickness * range.y);\n}\n\nfloat f1(float x)\n{\n    x -= iTime * speed;\n    return sin(x);\n}\n\nfloat f2(float x)\n{\n    return sin(x * 1.2);\n}\n\nfloat rand(float x) { return fract(sin(4798.103853 * x)); }\n\n\nfloat noise(float x)\n{\n    float i = floor(x);\n    float f = fract(x);\t\n\tfloat u = f*f*(3.0-2.0*f);\n    return mix(rand(i), rand(i+1.), u);\n}\n\nvec3 plotFunctions(vec2 uv)\n{\n    vec3 c = vec3(0,0,0);\n    \n    c += plot(f1(uv.x), uv, vec3(0,0.5,0.8));\n    c += plot(f2(uv.x), uv, vec3(0.7,0.5,0));\n    c += plot(f1(uv.x) + f2(uv.x), uv, vec3(0,1,0));\n    c += plot(f1(uv.x) * f2(uv.x), uv, vec3(0.5,0,0.8));\n    \n    float y=0.;\n    for (float i=0.; i<6.; i++)\n    {\n        float offset = iTime * speed / (i+1.);\n        offset *= fract(i * 0.5)*4. - 1.;\n        float freq = 0.5*i+1.;\n        float amp = 1. / (i+1.);\n        y += sin((uv.x + offset)*freq) * amp;\n    }\n    c += plot(y * 0.4 + 3., uv, vec3(1,1,1));\n    \n    c += plot(0.5 * noise(2.*uv.x + iTime * speed) - 3., uv, vec3(1,1,1));\n        \n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    \n    // grid\n    fragColor.r = step(abs(uv.x) * iResolution.x, gridThickness) +\n        step(abs(uv.y) * iResolution.y, gridThickness);\n    \n    // plotFunctions\n    fragColor.rgb += plotFunctions(uv * range);\n    fragColor.a = 1.;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}