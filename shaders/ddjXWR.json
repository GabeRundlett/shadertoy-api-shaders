{
    "Shader": {
        "info": {
            "date": "1670169420",
            "description": "Two scenes overlapping, i forget how it works",
            "flags": 0,
            "hasliked": 0,
            "id": "ddjXWR",
            "likes": 7,
            "name": "Gold and White Grids",
            "published": 3,
            "tags": [
                "scene",
                "idk",
                "grids"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 200\n#define MAX_DIST 15.\n#define SURF_DIST .02\n\n#define oriRadius 0.8\n\nvec3 rayOri() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = 0.5 * iTime;\n    vec3 ro = vec3(4. * cos(t),\n                   4. * cos(0.8 * t),\n                   4. * sin(t));\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat dist(vec3 p, float o) {\n    float sd = length(p - rayOri()) - oriRadius;\n    p += cos(vec3(0.25 * p.zxy + iTime));\n    p += o;\n    p.z -= 1.5 * iTime;\n    vec3 fpos  = mod(p, 4.) - 2.;\n    vec3 fpos2 = mod(p + 2., 4.) - 2.;\n    float o2 = .2 + .05 * thc(2., 10. * p.y - 0.5 * iTime);\n    float d1 = sdBoxFrame(fpos, vec3(2), 0.05) - o2 + 0.1 * o;\n    float d2 = sdBoxFrame(fpos2, vec3(2), 0.05) - o2 + 0.1 * o;\n    return -min(sd, -min(d1,d2));\n}\n\nfloat march(vec3 ro, vec3 rd, float z, float o) {\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = dist(p, o);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 normal(vec3 p, float o) {\n\tfloat d = dist(p, o);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        dist(p-e.xyy, o),\n        dist(p-e.yxy, o),\n        dist(p-e.yyx, o));\n    \n    return normalize(n);\n}\n\nvec3 rayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = rayOri();\n    \n    vec3 rd = rayDir(uv, ro, vec3(0), 0.6);\n    vec3 col = vec3(0);\n   \n    float d1 = march(ro, rd, 1., 1.);\n    float d2 = march(ro, rd, 1., 0.);\n    vec3 p1 = ro + rd * d1;\n    vec3 p2 = ro + rd * d2;\n    vec3 n1 = normal(p1, 1.);\n    vec3 n2 = normal(p2, 0.);\n    vec3 r1 = reflect(rd, n1);\n    vec3 r2 = reflect(rd, n2);\n    vec3 ld = normalize(vec3(1,2,3));\n    float dif1 = .5+.5*dot(abs(n1),ld);\n    float dif2 = .5+.5*dot(abs(n2),ld);\n    float spec1 = pow(dif1, 256.);\n    float spec2 = pow(dif2, 256.);\n    float sp = -0.1 * (spec1 + spec2);\n    vec3 pl1 = pal(sp + -0.2 * length(p1) + 0.1 * d1, 0.5 * vec3(.5,1,2)/3.);   \n    vec3 pl2 = pal(sp + 0.5 + 0.1 * d2, 0.5 * vec3(.5,1,2)/3.);   \n    col = clamp(col, 0., 1.);\n    col = mix(vec3(1.-1./cosh(-.2*d1)),\n              vec3(1.-1./cosh(-.2*d2)*pl2),\n              clamp(d1/d2,0.,1.5));\n    col *= pl1;\n    col *= .96 \n         + .02 * step(mod(fragCoord.x + fragCoord.y + iTime, 14.), 7.)\n         + .02 * step(mod(fragCoord.x - fragCoord.y + iTime, 14.), 7.);   \n    col *= 1. - 0.2 * abs(dif1-dif2);  \n    col *= 1. + 0.4 * vec3(spec1 + spec2);\n    \n    vec3 tx = texture(iChannel0, (r1+r2)).rgb;\n    vec3 tx2 = texture(iChannel1, (r1+r2)).rgb;\n    tx  = mix(tx,  vec3(1), 1.- 1./cosh(-0.1 * (d1+d2)));\n    tx2 = mix(tx2, vec3(1), 1.- 1./cosh(-0.1 * (d1+d2)));\n    col *= 1.4 * tx2;\n    col = mix(col, tx, .5+.5*thc(4., 0.25 * iTime + 0.1 * p1.y));\n    col = pow(col, vec3(1./2.4));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}