{
    "Shader": {
        "info": {
            "date": "1532101916",
            "description": "Just some simple 2D messing around.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xt3yWn",
            "likes": 1,
            "name": "Violetta",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "emh",
            "viewed": 444
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define M_PI 3.1415926\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat getDegree(vec2 position, float offset, float om, float time) {\n\tfloat degree = atan(position.y, position.x) + offset;\n\tdegree = (degree + M_PI) / M_PI;\n\tdegree = fract(time / 5.0 + degree / 2.0 + om);\n\tdegree = degree > 0.5 ? 1.0 - (degree - 0.5) * 2.0: degree * 2.0;\n\treturn degree;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 position = ( fragCoord.xy / iResolution.xy );\n\t\n\tvec2 uv = (position - 0.5) * 2.0;\n\t\n\tfloat mul = 15.0;\n\t\n\tposition = fract(position * mul); // + fract(-position * mul)) / 2.0;\n\tposition -= 0.5;\n\tposition *= 2.0;\n\t\n\tposition.x = position.x > 0.5 ? 1.0 - position.x : position.x;\n\tposition.y = position.y > 0.5 ? 1.0 - position.y : position.y;\n\t\n\tposition.x *= iResolution.x / iResolution.y;\n\t\n\tfloat om = getDegree(uv, 0.2 * pow(length(uv), 1.0) * 50.0, 0.0, 0.0);\n\tfloat v = 0.0;\n\tvec3 color = vec3(0.0);\n    int xx = 3;\n    int yy = 3;\n    float c = float(xx * yy);\n    for (int x = 0; x < xx; x++) {\n        for (int y = 0; y < yy; y++) {\n            float th = 1.5 * M_PI * float(x * yy + y) / c;\n            vec2 p = position * mat2(cos(th), -sin(th), sin(th), cos(th));\n            p += vec2(float(x), float(y)) / vec2(float(xx), float(yy));\n            v = getDegree(p, 0.0, om, iTime);\n\n            vec2 co = floor(uv * mul) * float(x * yy + y) / c;\n            float r = rand(co * 13.342354);\n            float g = rand(co * 4324.23423432);\n            float b = rand(co * 14.314);\n\n            color += vec3(r, g, b) / (v * c * 10.0);\n        }\n    }\n\t\n\tfragColor = vec4(color, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}