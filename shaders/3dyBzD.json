{
    "Shader": {
        "info": {
            "date": "1606684005",
            "description": "27 perfectly reflecting cubes have mysteriously appeared in a forest...\n\nMouse for orientation, <up>, <down> for camera distance.",
            "flags": 48,
            "hasliked": 0,
            "id": "3dyBzD",
            "likes": 8,
            "name": "Mirror Cubes",
            "published": 3,
            "tags": [
                "cube",
                "raytrace",
                "mirror",
                "parallelogram"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Mirror Cubes\n// Matthew Arcus, mla, 2020\n//\n// A grid of reflecting cubes, raytraced, using bounding spheres to\n// speed up finding intersections.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nint N = 1; // (2N+1)^3 cubes altogether\n\n// Select a cubemap to use with these #define's\n//#define CUBEMAP iChannel0 // Uffizi - interesting effect\n//#define CUBEMAP iChannel1 // St. Peter's\n#define CUBEMAP iChannel3 // Forest\n\n// Intersection with triangle (or parallelogram):\n// Find a,b such that:\n// p + kr = av0 + bv1 + (1-a-b)v2 = a(v0-v2)+b(v1-v2)+v2\n// ie. -kr + a(v0-v2) + b(v1-v2) = p-v2\n// return vec3(k,a,b)\n\n// Standard algorithm by Tomas MÃ¶ller and Ben Trumbore.\n// Uses Cramer's rule with some simplifications to solve linear system as above.\n// http://webserver2.tecgraf.puc-rio.br/~mgattass/cg/trbRR/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf\nvec3 triangle(vec3 o, vec3 d, vec3 v0, vec3 v1, vec3 v2) {\n  // find a,b such that:\n  // p + kr = av1 + bv2 + (1-a-b)v0 = a(v1-v0)+b(v2-v0)+v0\n  // ie. -kr + a(v1-v0) + b(v2-v0) = p-v0\n  vec3 e1 = v1 - v0;\n  vec3 e2 = v2 - v0;\n  vec3 t = o - v0;\n  vec3 p = cross(d,e2);\n  vec3 q = cross(t,e1);\n  vec3 a = vec3(dot(q,e2),dot(p,t),dot(q,d))/dot(p,e1);\n  return a;\n}\n\nbool checksphere (vec3 p, vec3 r, vec3 c, float R2) {\n  p -= c; //centre on sphere\n  float pr = dot(p,r);\n  if (pr > 0.0) return false; // Centre is behind viewpoint\n  float pp = dot(p,p);\n  return pr*pr >= pp-R2;\n}\n\nvec3 hitnormal;\n\nbool checkquad(vec3 p, vec3 r, vec3 c0, vec3 c1, vec3 c2, inout vec3 amin) {\n  vec3 a = triangle(p,r,c0,c1,c2);\n  bool hit = all(bvec2(all(greaterThanEqual(a,vec3(0))),\n                       all(lessThanEqual(a,vec3(amin.x,1,1)))));\n  if (!hit) return false;\n  vec3 normal = cross(c2-c0,c1-c0);\n  if (dot(normal,r) > 0.0) return false; // Back face\n  hitnormal = normal;\n  amin = a;\n  return true;\n}\n\nvoid cube(vec3 p, vec3 r, vec3 q, inout vec3 amin) {\n  p -= q;\n  if (!checksphere(p,r,vec3(0),3.0)) return;\n  vec3 c0 = vec3(1,1,1);\n  vec3 c1 = vec3(1,-1,1);\n  vec3 c2 = vec3(-1,-1,1);\n  vec3 c3 = vec3(-1,1,1);\n\n  vec3 c4 = vec3(1,1,-1);\n  vec3 c5 = vec3(1,-1,-1);\n  vec3 c6 = vec3(-1,-1,-1);\n  vec3 c7 = vec3(-1,1,-1);\n  \n  checkquad(p,r,c0,c1,c3,amin);\n  checkquad(p,r,c0,c3,c4,amin);\n  checkquad(p,r,c0,c4,c1,amin);\n\n  checkquad(p,r,c6,c2,c5,amin);\n  checkquad(p,r,c6,c5,c7,amin);\n  checkquad(p,r,c6,c7,c2,amin);\n}\n\nvec3 getcolor(vec3 p, vec3 r) {\n    float atten = 1.0;\n    for (int bounce = 0; bounce < 50; bounce++) {\n      vec3 amin = vec3(1e8,0,0);\n      for (int i = -N; i <= N; i++) {\n        for (int j = -N; j <= N; j++) {\n          for (int k = -N; k <= max(N,int(-iTime)); k++) {\n            cube(p,r,4.0*vec3(i,j,k),amin);\n          }\n        }\n      }\n\n      if (amin.x >= 1e8) {\n          break;\n      } else {\n          atten *= 0.95;\n          p += amin.x*r;\n          r = reflect(r,normalize(hitnormal));\n          r = normalize(r);\n      }\n  \t}\n    return atten*pow(texture(CUBEMAP,r).xyz,vec3(2.2));\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  p.zx = rotate(p.zx,iTime * 0.2);\n  return p;\n}\n\nvoid mainImage(out vec4 outColor, vec2 fragCoord) {\n  vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n  float camera = -2.0;\n  camera += 0.5*float(keycount(KEY_UP)-keycount(KEY_DOWN));\n  vec3 p = vec3(0,0,camera);\n  vec3 r = vec3(uv,2);\n  p = transform(p);\n  r = transform(r);\n  r = normalize(r);\n  vec3 color = getcolor(p,r);\n  color = pow(color,vec3(0.4545));\n  outColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = 3.14159;\n\n// Macros for use in \"common\" blocks.\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}