{
    "Shader": {
        "info": {
            "date": "1687885121",
            "description": "I saw spiderman this week end :)",
            "flags": 96,
            "hasliked": 0,
            "id": "DdScRV",
            "likes": 47,
            "name": "Across the Spider-Verse",
            "published": 3,
            "tags": [
                "2d",
                "tunnel",
                "warp",
                "spiderman",
                "spiderverse"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 1053
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define N 96\n// Thanks IQ :)\n// Polygon - exact   (https://www.shadertoy.com/view/wdBXRW)\nfloat sdPolygon( in vec2[N] v, in vec2 p )\n{\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=N-1; i<N; j=i, i++ )\n    {\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n        bvec3 c = bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);\n        if( all(c) || all(not(c)) ) s*=-1.0;  \n    }\n    return s*sqrt(d);\n}\nvec3 flare(vec2 uv)\n{\n    return vec3(0.424,0.596,0.996)*(1.-sat(lenny(uv*vec2(1.,4.))))*2.;\n}\nvec3 chromaflare(vec2 uv)\n{\n    vec2 off = vec2(0.05);\n    \n    vec3 col = vec3(0.);\n    col.x += flare(uv+off).x;\n    col.y += flare(uv).y;\n    col.z += flare(uv-off).z;\n    return col;\n}\nvec3 rdr(vec2 uv)\n{\n    vec2 ouv = uv;\n    vec3 col = vec3(0.);\n    float basean = atan(uv.y, uv.x);\n    float cnt = 6.;\n    for (float i = 0.; i < cnt; ++i)\n    {\n        float sides = PI*2./cnt;\n        float an = basean+i*2.+iTime*.05*mix(1.,1.5,i/cnt);\n        float sectors = mod(an+sides*.5,sides)-sides*.5;\n        vec2 newuv = vec2(sin(sectors), cos(sectors))*length(uv);\n    \n        vec2 curuv = newuv+sin(i+iTime*.2)*.05;\n        float sz = mix(0.05,0.4, pow(i/cnt,2.)+sin(i+iTime)*.04);\n        float shape = abs(curuv.y-sz)-mix(0.01, 0.03, i/cnt);\n        vec3 rgb = texture(iChannel0, curuv*7.).xyz*mix(0.2, 1.,pow(i/cnt, .5));\n        vec3 outrgb = rgb *(1.-sat(shape*500.));\n        outrgb += rgb *(1.-sat(shape*20.))*.35;\n        outrgb = mix(outrgb*vec3(1.,.3,.3)*.5, outrgb, pow(i/cnt,2.));\n        col += outrgb;\n        \n        float shape2 = abs(curuv.y-sz-.1)-mix(0.01, 0.03, i/cnt)*.1;\n        col += vec3(1.000,0.000,0.349)*(1.-sat(shape2*100.))*sat(sin(curuv.x*100.)*.5+.5);\n    }\n    \n    col += chromaflare(uv)*.8;\n    col += pow(texture(iChannel1, vec2(basean, +iTime*.03+1./length(uv)*.02)).x, 5.)\n    *vec3(1.000,0.533,0.220)*sat(length(uv)*2.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.xx;\n    uv *= r2d(sin(iTime*.2)*.2);\n    uv *= mix(1.2,1., sin(iTime)*.5+.5);\n    uv += vec2(sin(iTime*.33), cos(iTime*.14))*.05;\n    vec3 col = rdr(uv);\n    col += sat(sin(uv.y*800.)*.5+.5)*vec3(0.,0.,1.)\n    *texture(iChannel1, uv*.1).x;\n\n// This was generated with a homemade unity solution\nvec2 points[96];\npoints[0] = vec2(0.07991514, 0.6348686);\npoints[1] = vec2(0.09641513, 0.6812686);\npoints[2] = vec2(0.1307151, 0.6464686);\npoints[3] = vec2(0.1583152, 0.5911686);\npoints[4] = vec2(0.1826151, 0.5790686);\npoints[5] = vec2(0.3704152, 0.7149686);\npoints[6] = vec2(0.4047152, 0.6834686);\npoints[7] = vec2(0.4323151, 0.6630686);\npoints[8] = vec2(0.4787152, 0.6155686);\npoints[9] = vec2(0.4980151, 0.6072686);\npoints[10] = vec2(0.5272151, 0.6442686);\npoints[11] = vec2(0.5205151, 0.6559686);\npoints[12] = vec2(0.5032151, 0.6677686);\npoints[13] = vec2(0.4838151, 0.6904686);\npoints[14] = vec2(0.4563152, 0.7153686);\npoints[15] = vec2(0.4331152, 0.7304686);\npoints[16] = vec2(0.4336151, 0.7369686);\npoints[17] = vec2(0.4428152, 0.7374686);\npoints[18] = vec2(0.4341151, 0.7477686);\npoints[19] = vec2(0.4422151, 0.7499686);\npoints[20] = vec2(0.4568152, 0.7289686);\npoints[21] = vec2(0.5232152, 0.6819686);\npoints[22] = vec2(0.5581151, 0.6800686);\npoints[23] = vec2(0.6139151, 0.6791686);\npoints[24] = vec2(0.6362152, 0.6824686);\npoints[25] = vec2(0.6400151, 0.7090686);\npoints[26] = vec2(0.6488152, 0.7315686);\npoints[27] = vec2(0.6641151, 0.7491686);\npoints[28] = vec2(0.6927152, 0.7535686);\npoints[29] = vec2(0.7133151, 0.7368686);\npoints[30] = vec2(0.7185152, 0.7181686);\npoints[31] = vec2(0.7108151, 0.7005686);\npoints[32] = vec2(0.7003151, 0.6865686);\npoints[33] = vec2(0.6956152, 0.6818686);\npoints[34] = vec2(0.7272152, 0.6703686);\npoints[35] = vec2(0.7440152, 0.6698686);\npoints[36] = vec2(0.7586151, 0.6709686);\npoints[37] = vec2(0.7721151, 0.6867686);\npoints[38] = vec2(0.8005152, 0.7258686);\npoints[39] = vec2(0.8090152, 0.7407686);\npoints[40] = vec2(0.8056152, 0.7637686);\npoints[41] = vec2(0.8037151, 0.7737686);\npoints[42] = vec2(0.7913151, 0.7873686);\npoints[43] = vec2(0.8020152, 0.7975686);\npoints[44] = vec2(0.8092152, 0.7928686);\npoints[45] = vec2(0.8239151, 0.7834686);\npoints[46] = vec2(0.8337151, 0.7851686);\npoints[47] = vec2(0.8539152, 0.8061686);\npoints[48] = vec2(0.8656151, 0.8275687);\npoints[49] = vec2(0.8872151, 0.8470686);\npoints[50] = vec2(0.9019151, 0.8530686);\npoints[51] = vec2(0.9071151, 0.8455686);\npoints[52] = vec2(0.9032152, 0.8399686);\npoints[53] = vec2(0.8850151, 0.8208686);\npoints[54] = vec2(0.8781152, 0.7945686);\npoints[55] = vec2(0.8781152, 0.7945686);\npoints[56] = vec2(0.9031152, 0.8075686);\npoints[57] = vec2(0.9369152, 0.8220686);\npoints[58] = vec2(0.9477152, 0.8270686);\npoints[59] = vec2(0.9574151, 0.8159686);\npoints[60] = vec2(0.9347152, 0.8032686);\npoints[61] = vec2(0.9051151, 0.7872686);\npoints[62] = vec2(0.9123151, 0.7730686);\npoints[63] = vec2(0.9657152, 0.7579686);\npoints[64] = vec2(0.9621152, 0.7407686);\npoints[65] = vec2(0.9004152, 0.7545686);\npoints[66] = vec2(0.9154152, 0.7294686);\npoints[67] = vec2(0.9296151, 0.7120686);\npoints[68] = vec2(0.9118152, 0.7103686);\npoints[69] = vec2(0.8928151, 0.7309686);\npoints[70] = vec2(0.8560151, 0.7143686);\npoints[71] = vec2(0.8241152, 0.6755686);\npoints[72] = vec2(0.7808151, 0.6225686);\npoints[73] = vec2(0.7658151, 0.6148686);\npoints[74] = vec2(0.7096151, 0.6286686);\npoints[75] = vec2(0.6771151, 0.6168686);\npoints[76] = vec2(0.6319152, 0.5926686);\npoints[77] = vec2(0.5773152, 0.5832686);\npoints[78] = vec2(0.5221152, 0.5104686);\npoints[79] = vec2(0.4818152, 0.4475686);\npoints[80] = vec2(0.4365152, 0.3935686);\npoints[81] = vec2(0.3971151, 0.3436686);\npoints[82] = vec2(0.3534151, 0.3056686);\npoints[83] = vec2(0.3452151, 0.2660686);\npoints[84] = vec2(0.3241152, 0.2577686);\npoints[85] = vec2(0.3195151, 0.2767686);\npoints[86] = vec2(0.3452151, 0.3132686);\npoints[87] = vec2(0.3786151, 0.3605686);\npoints[88] = vec2(0.4115151, 0.4078686);\npoints[89] = vec2(0.4125152, 0.4381686);\npoints[90] = vec2(0.4658151, 0.5361686);\npoints[91] = vec2(0.3673151, 0.6462686);\npoints[92] = vec2(0.2527151, 0.5852686);\npoints[93] = vec2(0.1579151, 0.5152686);\npoints[94] = vec2(0.1217152, 0.5070686);\npoints[95] = vec2(0.1044151, 0.5581686);\n\n    float spider = sdPolygon(points, (uv+.4)*1.5);\n    vec3 rgbspider = mix(vec3(0.), \n    sat(sin(uv.y*1200.)*.3+.7)*vec3(1.000,0.580,0.333), sat((length(uv)-.2)*15.));\n    float eyes = length((uv-vec2(0.07,.08))*r2d(.5)*vec2(.8,.6))-.01;\n    eyes = min(eyes, length((uv-vec2(0.04,.09))*r2d(.5)*vec2(.8,.6))-.01);\n    rgbspider = mix(rgbspider, vec3(1.,0.,0.)*length((uv-vec2(0.04,.09))*30.), 1.-sat((abs(eyes)-0.005)*500.));\n    rgbspider = mix(rgbspider, vec3(1.), 1.-sat(eyes*500.));\n    col = mix(col, rgbspider, (1.-sat(spider*500.))*.75);\n    col += vec3(1.000,0.580,0.333)*(1.-sat((abs(spider-0.01)-0.001)*200.));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 33830,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/500bricksging/calling?si=59f517c076bd4bc7a03adb8202d80320&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 rdrCirc(vec2 uv, float t)\n{\n    vec3 col = vec3(0.275,0.145,0.027)*1.5;\n    vec2 ouv = uv;\n    float rep = .03;\n    float id = floor((uv.y+rep*.5)/rep);\n    uv.y = mod(uv.y+rep*.5,rep)-rep*.5;\n    uv.x += id;\n    float cl = .1;\n    float h = clamp(asin(sin(uv.x*5.)), -cl, cl)/cl;\n    float line = abs(uv.y-h*0.01)-.001;\n    vec3 rgb = mix(vec3(1.000,0.533,0.220), vec3(0.902,0.667,0.396), sat(sin(id)));\n    rgb *= 1.-sat((abs(ouv.x+(fract(id*.1)-.5)+mod(t*.75+.5*id,4.)-2.)-.2)*4.);\n    col += .8*rgb*(1.-sat(line*80.));\n    return col;\n}\nvec3 rdrCircuit(vec2 uv)\n{\n    vec3 col = rdrCirc(uv, iTime);\n    col += rdrCirc(uv+vec2(0.,.2), iTime*.7);\n    col += .5*rdrCirc(2.*uv+vec2(0.,.1), iTime*.5);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    vec3 col = rdrCircuit(uv);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI acos(-1.)\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a); return mat2(c, -s, s, c);\n}\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}