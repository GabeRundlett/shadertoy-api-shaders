{
    "Shader": {
        "info": {
            "date": "1545923460",
            "description": "flickering, bubbles",
            "flags": 0,
            "hasliked": 0,
            "id": "XtyfRd",
            "likes": 12,
            "name": "Cylinders",
            "published": 3,
            "tags": [
                "loop"
            ],
            "usePreview": 0,
            "username": "nabehide",
            "viewed": 917
        },
        "renderpass": [
            {
                "code": "const int NBubbles = 30;\nconst float period = 3.0;\nconst float MAX_SIZE_BUBBLE = 0.05;\nconst float MIN_SIZE_BUBBLE = 0.01;\n\nfloat rand(vec2 co){                                             \n  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat noise(float s, float o){\n    float i = floor(s);\n    float f = fract(s);\n    float u = f * f * (3. - 2. * f);\n    \n    float s1 = rand(vec2(i/100., i*o/100.));\n    float s2 = rand(vec2((i+1.)/100., (i+1.)*o/100.));\n    \n    return mix(s1, s2, u);\n}\n\nfloat loopNoise(float s, float o, float period){\n    float i = floor(s);\n    float f = fract(s);\n    float u = f * f * (3. - 2. * f);\n    \n    float s1 = rand(vec2(i/100., i*o/100.));\n    float s2;\n    if(s < period - 1.){\n        s2 = rand(vec2((i+1.)/100., (i+1.)*o/100.));\n    } else {\n        s2 = rand(vec2(0.,0.));\n    }\n    \n    return mix(s1, s2, u);\n}\n\nfloat circle(vec2 p){\n    return max(0.0, 0.01 / (0.5-length(p)));\n}\n\nfloat bubble(vec2 p, int i){\n    return circle(p);\n}\n\nfloat bubbles(vec2 p, float centerX){\n    float draw = 0.0;\n\n    for (int i=0; i<NBubbles; i++) {\n        vec2 r = vec2(rand(vec2(float(i), centerX)), rand(vec2(float(i), centerX+0.1)));\n\n        float size = r.y * (MAX_SIZE_BUBBLE-MIN_SIZE_BUBBLE)+MIN_SIZE_BUBBLE;\n        \n        // float x = centerX;\n        float x = centerX + loopNoise(mod(iTime+r.y,period),float(i)*0.1,period)*0.1-0.05;\n        float y = mod(iTime + r.x*2.5, period) - 1.0;\n\t    vec2 pos = p - vec2(x, y);\n        pos.y = pos.y / (loopNoise(mod(iTime+r.y,period), float(i)*0.1, period)+0.2);\n\n        draw += bubble(pos/size, i);\n    }\n    \n    return draw;\n}\n\nvec3 cylinder(vec2 p, float center){\n    vec3 draw = vec3(0.0);\n    \n    // flickering\n    if (noise(iTime*10., center) < 0.02) {\n        return draw;\n    }\n    \n    // shape\n    float width = 0.15;\n    draw += 0.01 / pow(length(p.x-center-width), 0.7);\n    draw += 0.01 / pow(length(p.x-center+width), 0.7);\n    \n    // content\n    draw += max(min(1.0 - length(p.x-center)*5.0, 0.2), 0.0);\n    \n    draw += bubbles(p, center);\n    \n    return draw;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 p = (fragCoord.xy*2.0-iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 draw = vec3(0.0);\n    \n    draw += cylinder(p, -0.9) * vec3(0.01, 0.2, 1.0);\n    draw += cylinder(p,  0.0) * vec3(0.01, 0.8, 1.0);\n    draw += cylinder(p, +0.9) * vec3(1.00, 1.0, 0.1);\n    \n    // Output to screen\n    fragColor = vec4(draw, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}