{
    "Shader": {
        "info": {
            "date": "1480725194",
            "description": "Visualization of the border, inner and outer radius of the convergent areas of the generalized Mandelbrot, for this article: [url]http://iquilezles.org/articles/mset_1bulb[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MltXz2",
            "likes": 63,
            "name": "Mandelbrot - convergence",
            "published": 3,
            "tags": [
                "fractal",
                "analytic",
                "complexdynamics"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 32953
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2016\n//   https://www.youtube.com/c/InigoQuilez\n//   https://iquilezles.org/\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n\n// Visualizing the analytical solution for the bounds of the plane for\n// which the dynamics of the iteration under the complex monic polynomial\n// converges.\n//\n// The derivation of the formulas are here: \n//\n// https://iquilezles.org/articles/mset1bulb\n//\n// Border:    c(w) = k^1/(1-k)·e^iw - k^k/(1-k)·e^ikw\n// Inner rad: r = k^1/(1-k) - k^k/(1-k)\n// Outer rad: R = 2^1/(k-1)\n//\n// Also, see here for the smooth iteration count formula: https://iquilezles.org/articles/msetsmooth\n\n#define AA 2\n\n//----------------------------------------------------------------\n// complex numbers\n\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\nvec2 csqrt( vec2 z )         { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 cconj( vec2 z )         { return vec2(z.x,-z.y); }\n\n//----------------------------------------------------------------\n// distance evaluators\n\nfloat lengthSquared( in vec2 v ) { return dot(v,v); }\nfloat sdSegmentSquared( vec2 p, vec2 a, vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn lengthSquared( pa - ba*h );\n}\n\n//----------------------------------------------------------------\n// generalized mandelbrot set, with smooth iteration count\n\nvec3 drawFractal( in float k, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n        vec2 c = p * 1.25;\n\n        #if 0\n        if( k==2.0 )\n        {\n        float c2 = dot(c, c);\n        // skip computation inside M1 - https://iquilezles.org/articles/mset1bulb\n    \tif( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) continue;\n    \t// skip computation inside M2 - https://iquilezles.org/articles/mset2bulb\n    \tif( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) continue;\n        }\n        #endif\n        \n        const float threshold = 64.0;\n        vec2 z = vec2( 0.0 );\n        float it = 0.0;\n        for( int i=0; i<100; i++ )\n        {\n            z = cpow(z, k) + c;\n            if( dot(z,z)>threshold ) break;\n            it++;\n        }\n\n        vec3 tmp = vec3(0.0);\n        if( it<99.5 )\n        {\n            float sit = it - log2(log2(dot(z,z))/(log2(threshold)))/log2(k); // https://iquilezles.org/articles/msetsmooth\n            tmp = 0.5 + 0.5*cos( 3.0 + sit*0.075*k + vec3(0.0,0.6,1.0));\n        }\n        \n        col += tmp;\n#if AA>1\n    }\n    col /= float(AA*AA);\n#endif\n\n\treturn col;\n}\n\n//----------------------------------------------------------------\n// render\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float eps = 1.25/iResolution.y;\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    float time = iTime*0.25;\n    \n\n    vec2 c = p * 1.25;\n    //float k = 2.0 + mod(floor(time), 10.0 );\n    float k = 2.0 + floor(time) + smoothstep(0.8,1.0,fract(time));\n\n    float m = pow( k, (1.0/(1.0-k)) );\n    float n = pow( k, (k/(1.0-k)) );\n\n    // draw fractal\n    vec3 col = drawFractal( k, fragCoord );\n\n    vec3 dcol = col;\n\n    // draw convergence area\n    {\n        float d = 10.0;\n        vec2 ow = vec2( m-n, 0.0 );\n\t\tfor( int i=1; i<101; i++ )\n        {\n            float a = 6.283185*float(i)/200.0;\n            vec2 w = m*vec2( cos(a), sin(a) ) - n*vec2( cos(k*a), sin(k*a) );\n\n            d = min( d, sdSegmentSquared( vec2(c.x,abs(c.y)), ow, w ) );\n            ow = w;\n        }\n        d = sqrt(d);\n        dcol = mix( dcol, vec3(1.5,0.7,0.1), 1.0-smoothstep( 1.0*eps,6.0*eps,d) );\n    }\n    \n    // draw inner radius\n    {\n        float r = m - n;\n        float d = abs( length(c)-r );\n        dcol = mix( dcol, vec3(1.0,1.0,1.0), 1.0-smoothstep( 1.0*eps,4.0*eps,d) );\n    }\n    \n    // draw outer radius\n    {\n        float r = pow( 2.0, 1.0/(k-1.0) );\n        float d = abs( length(c)-r );\n        dcol = mix( dcol, vec3(1.0,1.0,1.0), 1.0-smoothstep( 0.0*eps,4.0*eps,d) );\n    }\n    \n    float f = smoothstep( 0.2, 0.8, 1.0 - abs(2.0*fract(time)-1.0) );\n    col = mix( col, dcol, f );\n    \n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}