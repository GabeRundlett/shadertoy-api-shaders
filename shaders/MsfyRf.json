{
    "Shader": {
        "info": {
            "date": "1489086678",
            "description": "raymarching with constant step size.\nusing [url=https://www.shadertoy.com/view/Xd3GRf]ashima simplex noise[/url] by [url=https://www.shadertoy.com/user/Makio64]Makio64[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MsfyRf",
            "likes": 10,
            "name": "layers of simplexnoise",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 822
        },
        "renderpass": [
            {
                "code": "#define sqr(x) (x*x)\n\n//3d simplex noise by makio64\n//https://www.shadertoy.com/view/Xd3GRf\nvec4 permute(in vec4 x){return mod(x*x*34.+x,289.);}\nfloat snoise(in vec3 v){\n  const vec2 C = vec2(1.0/6.0,1.0/3.0);\n  const vec4 D = vec4(0,.5,1,2);\n  vec3 i  = floor(C.y*(v.x+v.y+v.z) + v);\n  vec3 x0 = C.x*(i.x+i.y+i.z) + (v - i);\n  vec3 g = step(x0.yzx, x0);\n  if(all(greaterThan(vec3(0.5),g))) return 1.0;\n  vec3 l = (1. - g).zxy;\n  vec3 i1 = min( g, l );\n  vec3 i2 = max( g, l );\n  vec3 x1 = x0 - i1 + C.x;\n  vec3 x2 = x0 - i2 + C.y;\n  vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  vec3 ns = .142857142857 * D.wyz - D.xzx;\n  vec4 j = -49. * floor(p * ns.z * ns.z) + p;\n  vec4 x_ = floor(j * ns.z);\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = floor(j - 7. * x_ ) * ns.x + ns.yyyy;\n  vec4 h = 1. - abs(x) - abs(y);\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  vec4 sh = -step(h, vec4(0));\n  vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy;\n  vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww;\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat map(vec3 p) {\n    return snoise(p*0.1)-sin(iTime)*0.1-0.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy*2.0-iResolution.xy) / iResolution.y;\n    \n    vec3 p = vec3(iTime);\n    float c = 0.0;\n    p += vec3(uv,1.0)*(1.0-fract(p.z));\n    \n    bool fade = map(p) < 0.0;\n    vec4 col;\n    if (fade) {\n        float value = map(p+vec3(0.0,0.0,-1.0));\n        col = clamp(value*10.0+0.5,0.1,1.0)*sqr(texture(iChannel0,p.xy));\n    }\n    \n    c = 0.0;\n    p += vec3(uv,1.0);\n    while (c++ < 50.0 && map(p) > 0.0) {\n        p += vec3(uv,1.0);\n    }\n    \n    float value = map(p+vec3(0.0,0.0,-1.0));\n    fragColor = clamp(value*10.0+0.5,0.1,1.0)*sqr(texture(iChannel0,p.xy));\n    \n    if (fade) {\n        fragColor = mix(col,fragColor,min(fract(iTime)*1.5,1.0));\n    }\n    \n    fragColor = sqrt(fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}