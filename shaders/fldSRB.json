{
    "Shader": {
        "info": {
            "date": "1639355776",
            "description": "A lot based on my previous shader, but some new tricks here :\n- Rock based on triangles\n- Foams\n- More temporal accumulations on the out of focus part!\n- PBR Sky\n",
            "flags": 32,
            "hasliked": 0,
            "id": "fldSRB",
            "likes": 146,
            "name": "Malmousque",
            "published": 3,
            "tags": [
                "water",
                "dof",
                "rock",
                "foam"
            ],
            "usePreview": 1,
            "username": "XT95",
            "viewed": 11283
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------\n// Compositing pass\n// ---------------------------------------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    vec2 uv = fragCoord * invRes;\n\n    // Chromatic aberration\n    vec2 offset = (uv*2.-1.)/iResolution.xy*.75;\n    vec4 col = vec4(0.);\n    col.r = texture(iChannel0, uv+offset).r;\n    col.g = texture(iChannel0, uv-offset).g;\n    col.b = texture(iChannel0, uv+offset).b;\n\n    // Vignetting & color grading\n    col *= pow( uv.x * uv.y * (1.-uv.x) * (1.-uv.y)*100., .15 );\n    col = pow(col, vec4(1.0,1.05,1.1, 1.));\n    \n    // Gamma correction\n    fragColor = pow(col*3., vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ---------------------------------------------------------------------------------\n// Sky\n// https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/simulating-sky/simulating-colors-of-the-sky\n// ---------------------------------------------------------------------------------\nfloat iSphere(vec3 ro, vec3 rd, float radius) {\n    float b = 2.0 * dot(rd, ro);\n    float c = dot( ro, ro ) - radius * radius;\n    float disc = b * b - 4.0 * c;\n    if (disc < 0.0)\n        return (-1.0);\n    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\n    float t0 = q;\n    float t1 = c / q;\n    return max(t0,t1);//vec2(t0,t1);\n}\n\nvec3 skyColor( in vec3 rd )\n{\n    const int nbSamples = 64;\n    const int nbSamplesLight = 32;\n    \n    vec3 absR = vec3(3.8e-6f, 13.5e-6f, 33.1e-6f);\n    vec3 absM = vec3(21e-6f);\n    \n    \n    vec3 accR = vec3(0.);\n    vec3 accM = vec3(0.);\n    \n    float mu = dot(rd, sundir);\n    float g = 0.76f; \n    vec2 phase = vec2(3.f / (16.f * PI) * (1. + mu * mu), 3.f / (8.f * PI) * ((1.f - g * g) * (1.f + mu * mu)) / ((2.f + g * g) * pow(1.f + g * g - 2.f * g * mu, 1.5f)));\n\n    float radA = 6420e3;\n    float radE = 6360e3;\n    vec3 ro = vec3(0., radE+1., 0.);\n    float t = iSphere(ro, rd, radA);\n    float stepSize = t / float(nbSamples);\n    \n    vec2 opticalDepth = vec2(0.);\n    \n    for(int i=ZERO; i<nbSamples; i++) {\n     \tvec3 p = ro + rd * (float(i)+.5) * stepSize;\n        \n        float h = length(p) - radE;\n        vec2 thickness = vec2(exp(-h/7994.), exp(-h/1200.)) * stepSize;\n        opticalDepth += thickness;\n        \n        float tl = iSphere(p, sundir, radA);\n        float stepSizeLight = tl / float(nbSamplesLight);\n        vec2 opticalDepthLight = vec2(0.);\n        int j;\n        for(j=ZERO; j<nbSamplesLight; j++) {\n            vec3 pl = p + sundir * (float(j)+.5) * stepSizeLight;\n            float hl = length(pl) - radE;\n            if (hl < 0.) break;\n        \topticalDepthLight += vec2(exp(-hl/7994.), exp(-hl/1200.)) * stepSizeLight;\n        }\n        if (j == nbSamplesLight) {\n            vec3 tau = absR * (opticalDepth.x + opticalDepthLight.x) + absM * 1.1 * (opticalDepth.y + opticalDepthLight.y);\n            vec3 att = exp(-tau);\n            accR += att * thickness.x ;\n            accM += att * thickness.y;\n        }\n    }\n    \n    return (accR * absR * phase.x + accM * absM * phase.y)*1.5;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy*4.;\n    \n    if (uv.x>1. || uv.y>1.) return;\n    \n    vec3 rd = equi2cube(uv);\n    \n    // compute only on the first frame!\n    //if (iFrame < 4) {\n        fragColor = vec4(skyColor(rd), 1.);\n    //} else {\n    //    fragColor = texture(iChannel0, uv*.25);\n    //}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define ZERO (min(iFrame,0)) // skip unroll loop\n#define saturate(x) clamp(x,0.,1.)\n#define PI 3.141592653589\n#define PI_2 1.5707963267948966192313216916398\n#define PI_X_2 6.283185307179586476925286766559\n#define GOLDEN_RATIO 0.61803398875\n#define time iTime\n#define frame iFrame\n\nvec3 sundir = normalize( vec3(1.5,.8,2.) );\n\n\n\n// ---------------------------------------------------------------------------------\n// Maths toolbox\n// ---------------------------------------------------------------------------------\nfloat seed = 0.;\nfloat rand() { return fract(sin(seed++)*43758.5453123); }\nvec3 tri(vec3 x) {\n    return abs(x-floor(x)-.5);\n}\nvec3 hash3(vec3 p) {\n    uvec3 x = uvec3(p*100000.+1000.);\n    const uint k = 1103515245U; \n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n\nfloat hash( vec2 p )\n{\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\n}\nfloat hash( float p )\n{\n    vec3 p3  = fract(vec3(p) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd)\n{\n    float s = rnd.x*PI*2.;\n    float t = rnd.y*2.-1.;\n    return vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i)\n{\n    vec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n    return v * sign(dot(v, dir));\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat noise( vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n    \n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm( vec2 p) {\n    float d = noise(p) * .5;\n    d += noise(p*2.) * .25;\n    d += noise(p*4.) * .125;\n    \n    return d;\n}\nfloat capsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\nvec3 equi2cube (vec2 uv) {\n    vec2 thetaphi = (uv*2.-1.) * vec2(PI, PI_2); \n    return vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n}\n\nvec2 cube2equi (vec3 p) {\n    return vec2((atan(p.z, p.x) / PI_X_2) + 0.5, acos(-p.y) / PI);    \n}\n\n// ---------------------------------------------------------------------------------\n// Triplanar mapping + bump mapping! \n// clever code taken from Shane\n// https://www.shadertoy.com/view/MscSDB\n// ---------------------------------------------------------------------------------\nvec3 tex3D( sampler2D tex, vec3 p, vec3 n )\n{\n    n = abs(n);\n    vec4 col = texture(tex, p.yz)*n.x + texture(tex, p.xz)*n.y + texture(tex, p.xy)*n.z;\n    return pow(col.rgb,vec3(2.2));\n}\n\nvec3 bumpMapping( sampler2D tex, vec3 p, vec3 n, float bf )\n{\n    const vec2 e = vec2(0.001, 0);\n    \n    mat3 m = mat3( tex3D(tex, p - e.xyy, n).rgb,\n                   tex3D(tex, p - e.yxy, n).rgb,\n                   tex3D(tex, p - e.yyx, n).rgb);\n    \n    vec3 g = vec3(0.299, 0.587, 0.114) * m;\n    g = (g - dot( tex3D(tex,  p , n).rgb, vec3(0.299, 0.587, 0.114)) )/e.x;\n    g -= n * dot(n, g);\n                      \n    return normalize( n + g*bf );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// ---------------------------------------------------------------------------------\n// Raytracing pass\n// ---------------------------------------------------------------------------------\n\nconst mat3 mt = mat3(0.33338, 0.56034, -0.71817, -0.87887, 0.32651, -0.15323, 0.15162, 0.69596, 0.61339)*1.93;\nconst mat2 mw = mat2(1.6,1.2,-1.2,1.6);\n\n\n\n// ---------------------------------------------------------------------------------\n// Signed Distance Field\n// ---------------------------------------------------------------------------------\nfloat terrain(vec3 p) {\n    \n    float d = length(p.xy-vec2(-4.,0.))-2.;\n    d = smin(d, capsule(p, vec3(-5.,0.,7.), vec3(0.,2.,7.), 1.), 1.7);\n    d = smin(d, p.y-.1+smoothstep(-3.1,5.,p.x)*2., 0.1);\n    \n    // Add detail only if we are closed of the surface\n    if (d < 1.) {\n        // Inspired by many shaders of Shane, the master of the rock.\n        float z = 1.;\n        for(int i = 0; i < 6; i++)\n        {\n            d -= dot(tri(p*.5 + tri(p.yzx*.375)), vec3(.4*z));\n            z *= -0.55;\n            p = p*mt;\n        }\n    }\n    \n    return d;\n}\nfloat water(vec3 p) {\n    float d = p.y;\n    \n    float amp = .1;\n    p.xz *= mw;\n    float t = time*.3;\n    \n    // Add detail only if we are closed of the surface\n    if (d < .2) {\n        for(int i=0; i<6; i++)\n        {\n            d -= (1.-abs(sin(noise(p.xz-t)))) * amp;\n            amp *= .5;\n            p.xz *= mw;\n        }\n    }\n    \n    return d;\n}\n\nfloat map(vec3 p) {\n    float d1 = terrain(p);\n    float d2 = water(p);\n    float d = min(d1,d2);\n    return d;\n    \n}\n\n\n// ---------------------------------------------------------------------------------\n// Raytracing toolbox\n// ---------------------------------------------------------------------------------\nvec3 raymarch(vec3 ro, vec3 rd, const vec2 nf) {\n    vec3 p = ro + rd * nf.x;\n    float l = 0.;\n    for(int i=ZERO; i<70; i++) {\n        float d = map(p);\n        l += d;\n        p += rd * d;\n        \n        if(abs(d)<.01 || l > nf.y)\n            break;\n    }\n    \n    return p;\n}\n\nvec3 normal( vec3 p )\n{\n    const float h = 0.005;\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*h);\n    }\n    return normalize(n);\n}\n\n\nvec3 raymarchUnderwater(vec3 ro, vec3 rd, const vec2 nf) {\n    vec3 p = ro + rd * nf.x;\n    float l = 0.;\n    for(int i=ZERO; i<32; i++) {\n        float d = terrain(p);\n        l += d;\n        p += rd * d;\n        \n        if(abs(d)<.05 || l > nf.y)\n            break;\n    }\n    \n    return p;\n}\n// Simplified version of https://www.shadertoy.com/view/4sdGWN - http://www.aduprat.com/portfolio/?page=articles/hemisphericalSDFAO\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )\n{\n\tconst int nbIte = 6;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv;\n    \n\tfloat ao = 0.0;\n    \n    for( int i=ZERO; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l;\n        \n        ao += (l - max(terrain( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n// iq Soft Shadow - https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = terrain(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\n// ---------------------------------------------------------------------------------\n// Shading\n// ---------------------------------------------------------------------------------\nvec3 skyColor(vec3 rd) {\n    return texture(iChannel3, cube2equi(rd)*.25).rgb;\n}\nvec3 shade(vec3 ro, vec3 rd, vec3 p, vec3 n) {\n    vec3 sky = skyColor(rd);\n    if (map(p) > .3) return sky;\n    \n    float wet = smoothstep(.15+fbm(p.xz*30.)*.15,0.15,p.y) * step(0.,water(p));\n    \n    vec3 albedo = tex3D(iChannel1,p*1.,n)*vec3(.3,.275,.25)* (smoothstep(.1,0.4,p.y)+.1);\n    albedo = mix(albedo, vec3(0.09,0.15,0.03)*0.5, saturate(fbm(p.xz*20.2)*2.-.3)*wet*.075);\n    albedo = mix(albedo, vec3(0.1,0.03,0.2)*0.5, saturate(fbm(p.xz*20.2+1.)*2.-.6)*wet*.075);\n    n = bumpMapping(iChannel1,p*1.,n,.005);\n\n    float shad = shadow(p,sundir, .5,10., 10.);\n    float ao = ambientOcclusion(p,n, 5.5,1.7);\n    ao *= smoothstep(0.5,5., length(p-vec3(-1.,0.5,4.5)));\n    \n    vec3 diff = vec3(1.,.5,.3) * saturate(dot(n,sundir)+.1) * pow(vec3(shad),vec3(1.0,1.3,1.8));\n    vec3 skyl = vec3(0.2,0.25,0.35) * (n.y*.25+.75) * ao;\n    vec3 bounce = vec3(1.,.5,.3) * max(dot( n, normalize(sundir*vec3(-1.0,0.0,-1.0))), 0.0) * ao;\n    vec3 spe = vec3(1.,.8,.5) * pow(max(dot(reflect(rd,n),sundir),0.), 80.) * shad * wet;\n    \n    vec3 col = albedo * ( diff*3.+ skyl*1.3 + bounce*.2 + spe*50. );\n    \n    return col;\n}\n\nvec3 calcPixel(vec3 ro, vec3 rd, float seed, inout vec3 firstP) {\n    \n    // Raytracing primary ray\n    vec3 p = raymarch(ro,rd, vec2(1.,60.));\n    firstP = p;\n    vec3 n = normal(p);\n    float d = map(p);\n    vec3 sky = skyColor(rd);\n    if (d > .3) return sky;\n    \n    \n    vec3 col;\n    \n    // Fake foam\n    float foam = saturate((fbm(p.xz*70.-time*0.25)+fbm(p.xz*50.+time*0.25))*.5-.34);\n    \n    if (terrain(p) == d) {\n        col = shade(ro,rd, p, n);\n        col = mix(col, vec3(.1), smoothstep(.025,.0,water(p))*foam);\n    } else {\n        \n        // Reflection\n        vec3 rro = p;\n        vec3 rrd = reflect(rd,n);\n        rrd = normalize(hash3(p+rand())*2.-1.+reflect(rd,n)*3000.);\n        \n        vec3 rp = raymarch(rro,rrd, vec2(.1,10.));\n        vec3 rn = normal(p);\n\n        vec3 reflectedCol = shade(rro,rrd, rp, rn);\n        // hackish sun specular \n        reflectedCol += vec3(1.,.7,.5)*30. * pow(max(dot(reflect(rd,n), sundir), 0.), 1024.);\n        \n        // Refraction\n        rro = p;\n        rrd = refract(rd,n, 1./1.33);\n        \n        rp = raymarchUnderwater(rro,rrd, vec2(.1,10.));\n        rn = normal(p);\n        vec3 refractedCol = shade(rro,rrd, rp, rn);\n        refractedCol *= exp( -vec3(1.,.4,.2) * length(rp-p)*50.2); // Beer law for absorption! great blog post -> https://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/\n        \n        // Mix it with fresnel\n        float fre = pow( saturate( 1.0 + dot(n,rd)), 16.0 );\n        col = mix(refractedCol, reflectedCol , fre);\n        \n        col = mix(col, vec3(.1), smoothstep(.075,.0,terrain(p))*foam);\n    }\n    col = mix(col, sky, smoothstep(10.,60., length(ro-p)));\n    \n    return col;\n}\n\n// ---------------------------------------------------------------------------------\n// Entrypoint\n// ---------------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    vec2 uv = fragCoord * invRes;\n    seed = iTime + iResolution.y * fragCoord.x / iResolution.x + fragCoord.y / iResolution.y;\n    vec2 v = -1.0+2.0*(uv);\n    v.x *= iResolution.x/iResolution.y;\n    \n    // Camera ray\n    vec3 ro = vec3(-1.,.5,0.);\n    vec3 rd = normalize( vec3(v.x, v.y, 5.) );\n    \n    // Depth of field\n    float focusDistance = 1.5;\n    float blurAmount = max(0., 0.02*uv.x);\n    vec3 go = blurAmount*vec3( normalize(vec2(rand(),rand())*2.-1.)*sqrt(rand()), 0.0 );\n    vec3 gd = normalize( rd*focusDistance - go );\n    vec3 uu = vec3(1.,0.,0.);\n    vec3 vv = vec3(0.,1.,0.);\n    ro += go.x*uu + go.y*vv;\n    rd += gd.x*uu + gd.y*vv;\n    rd = normalize(rd);\n    \n    \n    // Compute color\n    vec3 p;\n    vec3 col = calcPixel(ro, rd, seed, p);\n    \n    \n    // Output with temporal accumulation\n    vec4 lastCol = texture(iChannel0,uv);\n    \n    // Nice tricks here : more temporal accumulation when we are out of focus :)\n    float taaFactor = (1.05-saturate(abs(focusDistance-length(p-ro))/1.)) *0.75;\n    if (iFrame == 0) taaFactor = 1.;\n    //taaFactor = 1.;\n    fragColor = mix(lastCol, vec4(saturate(col), length(ro-p)), taaFactor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}