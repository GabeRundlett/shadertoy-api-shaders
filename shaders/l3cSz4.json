{
    "Shader": {
        "info": {
            "date": "1718686990",
            "description": "caleidoskope",
            "flags": 0,
            "hasliked": 0,
            "id": "l3cSz4",
            "likes": 3,
            "name": "hexagon color rotator",
            "published": 3,
            "tags": [
                "color",
                "rotate",
                "hex",
                "neon",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "/*originals  https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/DtGyWh https://www.shadertoy.com/view/XX3SzN*/\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*2.3+vec3(20,23,11))*1.5+.5)\n\n#define PI  3.141592\n#define TAU 6.2831853071\n\nfloat hash(vec2 p)\n{\n    p = fract(p * vec2(123.345, 734.6897));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\n\nfloat sdHex(vec2 p)\n{\n    p = abs(p);\n    \n    float d = dot(p, normalize(vec2(1., 1.73)));\n    d = max(d, p.x);\n    \n    return d;\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat2 rot2D(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nvec4 hexMap(vec2 uv, float rot)\n{\n    vec2 r = vec2(1., 1.73);\n    vec2 h = r * .5;\n    \n    vec2 gv1 = mod(uv, r) - h;\n    vec2 gv2 = mod(uv - h, r) - h;\n    \n    vec2 gv;\n    if (length(gv1) < length(gv2))\n        gv = gv1;\n    else\n        gv = gv2;\n    gv *= rot2D(iTime);\n    vec2 id = uv - gv;\n    gv *= rot2D(rot);\n    \n    float x = fract(atan(gv.x, gv.y) / TAU * 6.);\n    float y = sdHex(gv) * 2. + sign(rot) * (sin(rot) * .5 + .5) * .3;\n    \n    x = abs(x * - .5);\n    \n    return vec4(x, y, id);\n}\n\nvec2 drawTile(vec2 uv, float fudge)\n{\n    vec2 id = floor(uv);\n    id.y -= 3.;\n    vec2 gv = fract(uv) - .5;\n    gv.y *= -1.;\n    \n    vec2 cUv = gv - .5 * sign(gv.x + gv.y + .001);\n    float angle = atan(cUv.y, cUv.x);\n    \n    vec2 tUv = vec2(mod((angle + PI) / 1.57079, 1.), 0.);\n    tUv.x = abs(mod(id.x + id.y, 2.) - tUv.x);\n    \n    return tUv;\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n vec2 uv = (C * 2. - iResolution.xy) / iResolution.y;\n   uv *= rot2D(iTime*1.00505);\n   \n    vec3 n1,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        n1=g*d;\n    \n    vec4 hexMask = hexMap(uv*1.5, 0.);\n    \n            float c23 = sdHex(n1.xy);\n        a=20.*hexMask.x;\n        n1=mod(n1-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            n1=.3-abs(n1);\n         float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    n1.xy*=ma;\n     n1.xy *= rot2D(iTime*0.05 );\n            n1.x<n1.z?n1=n1.zyx:n1;\n            n1.z<n1.y?n1=n1.xzy:n1;\n            n1.z<n1.y?n1=n1.zyx:n1;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            n1=abs(n1)*e-\n                vec3(\n                    5.+cos(iTime*.0+.5*cos(iTime*.0))*3.,\n                    120,\n                    8.+cos(iTime*.0)*5.\n                 )*hexMask.x;;\n         }\n     \n         g+=e=length(n1.yx)/s;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}