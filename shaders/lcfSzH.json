{
    "Shader": {
        "info": {
            "date": "1704919224",
            "description": "Super Hexagon Tribute",
            "flags": 0,
            "hasliked": 0,
            "id": "lcfSzH",
            "likes": 6,
            "name": "Super Hexagon - Colored",
            "published": 3,
            "tags": [
                "tributegamehexagonindie"
            ],
            "usePreview": 0,
            "username": "insurgentes300",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "#define SHAPE(N) cos(round(a / (pi * 2. / float(N))) * (pi * 2. / float(N)) - a) * dist\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float pi = 3.1415926535;\n\n    float rot = mod(iTime, 5.) > 4.5 ? (pi * 4. * (mod(iTime, 5.) - 4.5)) : 0.;\n\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 coord = 3. * 2. * (uv - vec2(.5, .5));\n    coord.x *= iResolution.x / iResolution.y;\n    float a = mod(atan(coord.y, coord.x) + rot, pi * 2.);\n    float dist = length(coord);\n    float r = pi * 2. / float(6);\n\n    vec3 col = vec3(0.);\n\n    float ma = mod(atan(iMouse.y - iResolution.y / 2.,\n                        (iMouse.x - iResolution.x / 2.)), pi * 2.);\n    float pw = 0.1 - (dist - 1.5) * 0.75;\n    if (dist > 1.5 && dist < 1.65 && ma > a - pw / 2. && ma < a + pw / 2.)\n    {\n        // Color modulation based on time for each channel\n        float redFactor = 0.5 + 0.5 * cos(iTime);\n        float greenFactor = 0.5 + 0.5 * cos(iTime + 1.0);\n        float blueFactor = 0.5 + 0.5 * cos(iTime + 2.0);\n        col = vec3(redFactor, greenFactor, blueFactor);\n    }\n\n    float cOff = 0.1 * sin(iTime * pi * 2.);\n\n    for (int i = 0; i < 5; i++)\n    {\n        float spd = 3.;\n        float spawn_spd = .6;\n        if (SHAPE(6) > .8 + spd - spd / spawn_spd * mod(iTime, spawn_spd) + float(i) * spd &&\n            SHAPE(6) < 1. + spd - spd / spawn_spd * mod(iTime, spawn_spd) + float(i) * spd)\n        {\n            int num = i + int(floor(iTime / spawn_spd));\n            for (int j = 1; j <= 6; j++)\n            {\n                float sine = sin(float(num) * float(j) * 100.);\n\n                int all_white = 1;\n                for (int s = 1; s <= 6; s++)\n                {\n                    if (sine < .5)\n                    {\n                        all_white = 0;\n                    }\n                }\n\n                int seg = int(floor((a + r * 0.5) / r));\n                if (a < r / 2.)\n                    seg = 6;\n                int clear_seg = 1 + int(round(2.5 + 2.5 * sin(float(num) * 100.)));\n                if (seg == j && sine < .5)\n                {\n                    if (j != clear_seg && all_white == 0)\n                    {\n                        // Color modulation based on time for each channel\n                        float redFactor = 0.5 + 0.5 * cos(iTime);\n                        float greenFactor = 0.5 + 0.5 * cos(iTime + 1.0);\n                        float blueFactor = 0.5 + 0.5 * cos(iTime + 2.0);\n                        col = vec3(redFactor, greenFactor, blueFactor);\n                    }\n                }\n            }\n        }\n    }\n    if (SHAPE(6) > .8 + cOff && SHAPE(6) < 1. + cOff)\n    {\n        // Color modulation based on time for each channel\n        float redFactor = 0.5 + 0.5 * cos(iTime);\n        float greenFactor = 0.5 + 0.5 * cos(iTime + 1.0);\n        float blueFactor = 0.5 + 0.5 * cos(iTime + 2.0);\n        col = vec3(redFactor, greenFactor, blueFactor);\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}