{
    "Shader": {
        "info": {
            "date": "1607585999",
            "description": "Basic bezier curve in glsl",
            "flags": 0,
            "hasliked": 0,
            "id": "WdGfz3",
            "likes": 0,
            "name": "Bezier Curve Implementation",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "brickmaker",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "// reference paper: http://hhoppe.com/ravg.pdf\n// distance vector to origin(0, 0)\nfloat det(vec2 a, vec2 b) { return a.x * b.y - b.x * a.y; }\n\nvec2 get_distance_vector(vec2 b0, vec2 b1, vec2 b2) {\n  float a = det(b0, b2), b = 2.0 * det(b1, b0), d = 2.0 * det(b2, b1);\n  float f = b * d - a * a;\n  vec2 d21 = b2 - b1, d10 = b1 - b0, d20 = b2 - b0;\n  vec2 gf = 2.0 * (b * d21 + d * d10 + a * d20);\n  gf = vec2(gf.y, -gf.x);\n  vec2 pp = -f * gf / dot(gf, gf);\n  vec2 d0p = b0 - pp;\n  float ap = det(d0p, d20), bp = 2.0 * det(d10, d0p);\n  float t = clamp((ap + bp) / (2.0 * a + b + d), 0.0, 1.0);\n  return mix(mix(b0, b1, t), mix(b1, b2, t), t);\n}\n\nfloat distToQuadraticBezierCurve(vec2 p, vec2 b0, vec2 b1, vec2 b2) {\n  return length(get_distance_vector(b0 - p, b1 - p, b2 - p));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 A = vec2(100., 500.);\n  vec2 B = vec2(300., 100.);\n  // vec2 B = iMouse.xy;\n  vec2 C = vec2(800., 300.);\n  vec2 pos = fragCoord.xy;\n  \n  vec4 edgeColor = vec4(1., 0., 0., 1.);\n  vec4 backgroundColor = vec4(1., 1., 1., 1.);\n  float strokeWidth = 20.;\n  \n  vec2 vAB = normalize(B - A);\n  vec2 vCB = normalize(C - B);\n  if (dot((pos - A), vAB) < 0. || dot(pos - C, vCB) < 0.) {\n     fragColor = backgroundColor;\n  }\n\n\n  float dist = distToQuadraticBezierCurve(pos, A, B, C);\n  float epsilon = fwidth(dist);\n  if (dist < strokeWidth + epsilon) {\n    float inCurve =\n        1. - smoothstep(strokeWidth - epsilon, strokeWidth + epsilon, dist);\n    fragColor = mix(backgroundColor, edgeColor, inCurve);\n  } else {\n    // discard;\n    fragColor = backgroundColor;\n  }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}