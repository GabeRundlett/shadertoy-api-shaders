{
    "Shader": {
        "info": {
            "date": "1661666430",
            "description": "A demonstration of what not to optimize: repeated small expressions.\n\nAt default res this shader runs for me at 30fps.  Uncommenting MONSTER does not change this.  But that is >12000 transcendental functions!  The compiler merges common expressions.",
            "flags": 0,
            "hasliked": 0,
            "id": "flyczG",
            "likes": 2,
            "name": "Common subexpression elimination",
            "published": 3,
            "tags": [
                "optimization",
                "compiler"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "/*\nA demonstration of what not to optimize: repeated small expressions.\n\nAt default res this shader runs for me at 30fps.\nUncommenting MONSTER does not change this.\nBut that is >12000 transcendental functions, per loop iteration!\nThe compiler merges common expressions.\n\nIf crash: sorry, your system shader compiler lacks this optimization!\nIf \"out of memory\" error or strange error: try changing RESULT to lower level.\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  float total=0.;\n  for (int i=0;i<400;i++) {\n    uv.x+=.0001;\n\n#define STEP(a,b) (2.1*cos((a)-exp(-sin(b))))\n\n//#define MONSTER\n\n#ifndef MONSTER\n    float x0 = STEP(uv.x,uv.y);\n    float x1 = STEP(x0,x0);\n    float x2 = STEP(x1,x1);\n    float x3 = STEP(x2,x2);\n    float x4 = STEP(x3,x3);\n    float x5 = STEP(x4,x4);\n    float x6 = STEP(x5,x5);\n    float x7 = STEP(x6,x6);\n    float x8 = STEP(x7,x7);\n    float x9 = STEP(x8,x8);\n    float x10 = STEP(x9,x9);\n    float x11 = STEP(x10,x10);\n    float x12 = STEP(x11,x11);\n#else // defined MONSTER\n    #define x0 STEP(uv.x,uv.y) //     33-char expression with    1 sin,cos,exp\n    #define x1 STEP(x0,x0)     //     91-char expression with    3 sin,cos,exp\n    #define x2 STEP(x1,x1)     //    207-char expression with    7 sin,cos,exp\n    #define x3 STEP(x2,x2)     //    439-char expression with   15 sin,cos,exp\n    #define x4 STEP(x3,x3)     //    903-char expression with   31 sin,cos,exp\n    #define x5 STEP(x4,x4)     //   1831-char expression with   63 sin,cos,exp\n    #define x6 STEP(x5,x5)     //   3687-char expression with  127 sin,cos,exp\n    #define x7 STEP(x6,x6)     //   7399-char expression with  255 sin,cos,exp\n    #define x8 STEP(x7,x7)     //  14823-char expression with  511 sin,cos,exp\n    #define x9 STEP(x8,x8)     //  29671-char expression with 1023 sin,cos,exp\n    #define x10 STEP(x9,x9)    //  59367-char expression with 2047 sin,cos,exp\n    #define x11 STEP(x10,x10)  // 118759-char expression with 4095 sin,cos,exp\n    #define x12 STEP(x11,x11)  // 237543-char expression with 8191 sin,cos,exp\n#endif\n    #define RESULT x7\n    //#define RESULT x8    // MONSTER: Nvidia: \"')' : out of memory\" \n    total+=RESULT/400.;\n  }\n  fragColor = vec4(total)/3.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}