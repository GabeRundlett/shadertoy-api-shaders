{
    "Shader": {
        "info": {
            "date": "1634480000",
            "description": "shooter demo WIP",
            "flags": 0,
            "hasliked": 0,
            "id": "NsKXDR",
            "likes": 5,
            "name": "shooter demo WIP",
            "published": 3,
            "tags": [
                "shooter"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define MAX_STEPS 80\n#define MAX_DIST 32.\n#define SURF_DIST .001\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define MATERIAL0 0\n#define MATERIAL1 1\n#define MATERIAL2 2\n#define SPEED 2.0\n#define ZERO (min(iFrame,0))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\nvec3 tex(vec2 p, vec3 col, vec3 col2){\n    p*=3.0;\n    vec2 uv = fract(p)-0.5;\n    vec2 id = floor(p);\n    \n    vec2 randP = fract(sin(id*123.456)*567.89);\n    randP += dot(randP,randP*34.56);\n    float rand = fract(randP.x*randP.y);\n    \n    float speed = 0.8;\n    if(rand<0.5){\n        uv*=Rot(radians(90.0));\n        speed = 0.6;\n        uv.x+=0.4;\n    } else {\n        uv.x-=0.4;\n    }\n    \n    float dd = S(B(uv,vec2(0.04,0.5)),-0.05);\n    speed*=1.8;\n    uv.y*=0.5;\n    uv.y+=sin(iTime*speed)*0.4;\n    col=mix(col,col2,dd+S(length(uv)-0.18,-0.2));\n    return col;\n}\n\n// IQ's 3D noise function. It's faster than the FBM and enough for me to design.\n// The compile is also faster.\nfloat noise3d( vec3 p )\n{\n\tconst vec3 s = vec3(27, 111, 57);\n\tvec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); \n    //p *= p*p*(p*(p*6. - 15.) + 10.); // option\n    h = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat ship(vec3 p){\n    p*=0.6;\n    vec3 prevP = p;\n    p.z*=0.8;\n    float d = sdOctahedron(p,0.3);\n    float d2 = sdOctahedron(p-vec3(0.0,0.0,-0.25),0.2);\n    d = min(d,d2);\n    d2 = sdOctahedron(p-vec3(0.0,0.0,-0.5),0.1);\n    d = min(d,d2);\n    \n    p.xy*=Rot(radians(iTime*-100.0));\n    p.z*=0.3;\n    p.x = abs(p.x);\n    p.x-=0.45;\n    d2 = sdOctahedron(p-vec3(0.0,0.0,-0.1),0.1);\n    d = min(d,d2);\n    return d;\n}\n\nfloat sdBase( in vec3 p)\n{\n    p = mod(p,4.2)-2.1;\n    float d = B3D(p, vec3(0.3));\n    for(float i = 1.; i<=2.; i++){\n        p = abs(p);\n        p -= 1.5*i;\n        p.xz *= Rot(radians(i*45.0));\n        p.yz *= Rot(radians(i*-30.0));\n        d = min(d,B3D(p+vec3(cos(i)*0.3,sin(i)*0.5,0.0), vec3(sin(i)*0.8)));\n    }\n    return d;\n}\n\nvec3 path(float z)\n{\n    vec3 p = vec3(sin(z) * 0.7, cos(z * .8), z);\n    return p;\n}\n\nvec2 GetDist(vec3 p) {\n    p+=noise3d(p*1000.0)*0.1;\n    \n    vec3 q = p+1.5;\n    q.z -= iTime*SPEED;\n    if(mod(iTime,20.0)<15.0){\n        q.z +=2.0;\n    } else {\n        q.z -=6.0;\n    }\n    \n    q.x-=1.5;\n    q.y-=1.5;\n    float sp = ship(q);\n    \n    vec3 prevP = p;\n    p.xy -= path(p.z).xy;\n    \n    p.z = 0.;\n    float d = B3D(p,vec3(3.0,2.5,2.5));\n    \n    p = prevP;\n    p.z += iTime*SPEED;\n    float d2 = sdBase(p);\n    \n    p.z += iTime*SPEED*1.05;\n    p.z = mod(p.z,2.0)-1.0;\n    p.x = abs(p.x);\n    p.x-=2.3;\n    p.xy*=Rot(radians(45.0));\n    float d3 = sdOctahedron(p,0.4);\n    \n    vec2 res = combine(vec2(max(-d,d2),MATERIAL0),vec2(d3,MATERIAL1));\n    res = combine(res,vec2(sp,MATERIAL2));\n    return res;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n\n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n                \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(p.x,p.y,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(0.8,0.7,-1.5)*diff*occ;\n    diffCol += col*vec3(0.8,0.5,1.9)*skyDiff*occ;\n    diffCol += col*vec3(1.3,1.3,1.7)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == MATERIAL0){\n        vec3 np = p;\n        np.z+=iTime*SPEED;\n        float nn = noise3d(np*5.0)*0.15;\n        col = diffuseMaterial(n,rd,p,tex(p.xy,vec3(0.2,0.3,0.9)*nn+0.3,vec3(0.9,0.3,0.3)));\n    } else if(mat == MATERIAL1){\n        col = diffuseMaterial(n,rd,p,vec3(0.6,0.3,0.7));\n    } else if(mat == MATERIAL2){\n        col = diffuseMaterial(n,rd,p,vec3(0.2,0.1,1.5)+tex(p.xy,vec3(0.2,0.3,1.5),vec3(0.9,0.9,1.2)));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float t = iTime*SPEED;\n    vec3 ro = path(t+1.5);\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    \n    if(mod(iTime,20.0)<15.0){\n        rd*=matRotateZ(radians(iTime*15.0));\n    } else {\n        rd*=matRotateZ(radians(iTime*15.0))*matRotateX(radians(180.0));\n    }\n    \n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        col *= exp( -0.0001*d.x*d.x*d.x*d.x );//fog\n    } else {\n        col = vec3(0.0);   \n    }\n    \n    // POST EFFECTS    \n    rd.z+=iTime*2.0;\n    \n    // dust effect\n    float c = noise3d(rd) * 0.5 + noise3d(rd * 5.0) * 0.25 + noise3d(rd * 10.0) * 0.1;    \n    col+=vec3(0.7,0.1,0.9)*c*0.3;    \n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}