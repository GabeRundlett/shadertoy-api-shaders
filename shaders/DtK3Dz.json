{
    "Shader": {
        "info": {
            "date": "1683820534",
            "description": "Ray traced terrain using bilinear segments and 2d dda width volumetric lakes",
            "flags": 32,
            "hasliked": 0,
            "id": "DtK3Dz",
            "likes": 18,
            "name": "Gas Lakes",
            "published": 3,
            "tags": [
                "heightfield",
                "realtime",
                "analytical",
                "bilinear"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "#define inf 1000.\nvec3 pos, o, n, rdi;\nvec3 getColor() {\n    vec2 cell = floor(o.xy), oldCell = cell;\n    float oldDist = 0.0, boxDist = 0.0, d;\n    vec4 k;\n    vec3 sky = vec3(vec3(2.5, 1.0, 0.5)/(n.z+0.2))*0.05;\n    for (int i = 0; i < 1000; i += 1) {\n        k = texelFetch(iChannel0, ivec2(oldCell+iResolution.xy*0.5), 0);\n        if (o.z+n.z*boxDist > 20. || k == vec4(0)) return sky;\n        if (o.z+n.z*boxDist < max(max(k.x, k.y), max(k.z, k.w))) {\n            vec3 v = o-vec3(oldCell, 0)+n*oldDist;\n            vec2 r = vec2(0.005+n.y*n.x*(k.w-k.z+k.x-k.y), n.y*(v.x*k.w+k.z+k.x*v.x-k.x-k.y*v.x-v.x*k.z)-n.z+k.x*v.y*n.x-n.x*k.x-k.y*v.y*n.x+n.x*k.y+v.y*n.x*k.w-v.y*n.x*k.z);\n            float dk = r.y*r.y-4.*r.x*(v.x*(v.y*(k.x-k.y)+k.y-k.x+v.y*(k.w-k.z))+v.y*(k.z-k.x)+k.x-v.z),dd;\n            dd = (dd=(sqrt(dk)-r.y)/r.x)>0.0?dd*0.5:inf;\n            if (dd < boxDist-oldDist) {\n                d = dd+oldDist;\n                vec2 p = pos.xy+n.xy*d;\n                float gp = get(p, 10);\n                vec3 normall = normalize(vec3((gp-get(vec2(p.x-0.01, p.y), 10))*100.,(gp-get(vec2(p.x, p.y-0.01), 10))*100.,1.0));\n                vec4 l = vec4(k.x,-k.y,-k.z,k.w);\n                vec3 nn = normalize(vec3(k.y-k.x+dot(fract(p.yyyy),l),k.z-k.x+dot(fract(p.xxxx),l),1));\n                float fog = 1.-exp(0.1*pow(4.0, -o.z-5.0-n.z*d)/(n.z*log(4.0)+pow(4.0,-o.z-5.0)/(n.z*log(4.0))));\n                vec3 c0 = mix(vec3(0.3*exp(2.0*dot(-mix(normall, nn, 0.7), normalize(vec3(5, -5, 3))))), 0.7*vec3(10, 1, 0.3)*2.0, fog);\n                return 1.-exp(-mix(c0, vec3(0.7, 0.2, 0.0), 1.-exp(-0.015*d)));\n            }\n        }\n        oldCell = cell, oldDist = boxDist;\n        vec2 plain = -(o.xy-cell-0.5-0.5*sign(n.xy))/n.xy;\n        cell += vec2(equal(plain, vec2(boxDist = min(plain.x, plain.y))))*sign(n.xy);\n    }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y,\n    m = ((iMouse.xy)/iResolution.xy) * vec2(6.28, 3.14159263);\n    o = vec3(vec2(iTime, iTime)*10.0, 0);\n    o.z = get(o.xy, 1)+20.0, pos = o;\n    o.xy = fract(o.xy); \n    n = normalize(vec3(1, 1, -1));\n    vec3 px = vec3(normalize(vec2(n.y, -n.x)), 0),\n    py = cross(px, n);\n    n = normalize(n + px*uv.x + py*uv.y);\n    rdi = 1./n;\n    fragColor = vec4(getColor(), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy-iResolution.xy*0.5);\n    p += floor(vec2(iTime, iTime)*10.0);\n    fragColor = vec4(get(p, 6), get(p+vec2(1, 0), 6), get(p+vec2(0, 1), 6), get(p+vec2(1, 1), 6));//vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    float v = fract((p3.x + p3.y) * p3.z);\n    return v;\n}\nfloat noise(in vec2 p) {\n    vec2 k = fract(p);\n    vec2 f = floor(p);\n    k = k*k*(3.0-2.0*k);\n    return mix(mix(hash12(f), hash12(f+vec2(1, 0)), k.x),\n               mix(hash12(f+vec2(0, 1)), hash12(f+vec2(1, 1)), k.x), k.y);\n}\nfloat fbm(in vec2 p, in int n) {\n    float v = 0.0;\n    vec2 k = vec2(0.5, 2.0);\n    for (float i = 0.; i < float(n); i += 1.) {\n        v -= pow(noise(p*(k.x*=2.0)+i), 1.5)*(k.y*=0.5);\n    }\n    return v*0.5;\n}\nfloat get(in vec2 p, in int detail) {\n    return pow(fbm(p*0.03, detail), 2.0)*50.-12.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}