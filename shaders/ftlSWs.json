{
    "Shader": {
        "info": {
            "date": "1626820278",
            "description": "just wanted to render https://en.wikipedia.org/wiki/Discrete_cosine_transform",
            "flags": 0,
            "hasliked": 0,
            "id": "ftlSWs",
            "likes": 4,
            "name": "DCT basis functions",
            "published": 3,
            "tags": [
                "cosine",
                "discrete",
                "transform",
                "basis"
            ],
            "usePreview": 0,
            "username": "KylBlz",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "const float pi  = 3.1416;\nconst float eps = 0.0001;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // make it look like the wiki page\n    vec2 kl = fragCoord / iResolution.yy;\n    // vertical flip\n    kl.y = 1.0 - kl.y;\n    // 8x8\n    float MN = 8.0;\n    kl *= MN;\n\n    // lower case m,n vars\n    vec2 mn = floor(kl);\n    // JPEG flips every other?\n    float sgn = mod(mn.x + mn.y, 2.0) * -2.0 + 1.0;\n\n    // MD-DCT-IV, slightly vectorized\n    vec2 dct = cos(mn*kl*pi);\n    float col = dct.x * dct.y * sgn * 0.5 + 0.5;\n\n    // red grid\n    float w = 1.0 - eps - MN / iResolution.y;\n    float g = step(w, fract(kl.x)) + step(w, fract(kl.y));\n    // black out past MN (range)\n    float r = step(kl.x, MN);\n    \n    // output to screen\n    fragColor = vec4(mix(vec3(col), vec3(1.0, 0.0, 0.0), g) * r, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}