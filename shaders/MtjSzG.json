{
    "Shader": {
        "info": {
            "date": "1444723738",
            "description": "Quite the same as [url=https://www.shadertoy.com/view/XljXRG]this[/url] (= study of how to render cloudy stuff), but using [url=https://www.shadertoy.com/view/MlfGR4]this model[/url] instead.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtjSzG",
            "likes": 20,
            "name": "Cotton candy Pac-Man",
            "published": 3,
            "tags": [
                "noise",
                "pacman"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 966
        },
        "renderpass": [
            {
                "code": "// From https://www.shadertoy.com/view/MlfGR4\n// From https://www.shadertoy.com/view/MljXDw (from Duke)\n\n// Rendering parameters\n#define GROUND\n#define GHOST\n\n#define CAMERA_FOCAL_LENGTH\t3.0\n#define RAY_STEP_MAX\t\t100\n#define RAY_LENGTH_MAX\t\t500.0\n#define DIST_CORRECTION\t\t0.8\n#define DIST_MIN\t\t\t1.5\n\n// Math constants\n#define PI\t3.14159265359\n\n// Noise (from iq)\nfloat noise (in vec3 p) {\n\tvec3 f = fract (p);\n\tp = floor (p);\n\tf = f * f * (3.0 - 2.0 * f);\n\tf.xy += p.xy + p.z * vec2 (37.0, 17.0);\n\tf.xy = texture (iChannel0, (f.xy + 0.5) / 256.0, -256.0).yx;\n\treturn mix (f.x, f.y, f.z);\n}\n\n// FBM\nfloat fbm (in vec3 p) {\n\treturn noise (p) + noise (p * 2.0) / 2.0 + noise (p * 4.0) / 4.0;\n}\n\n// Distance to the scene and color of the closest point\nvec2 distScene (in vec3 p, in float noiseFactor) {\n\n\t// Velocity, period of the waves, spacing of the gums\n\tfloat v = iTime * 100.0;\n\tconst float k1 = 0.05;\n\tconst float k2 = 60.0;\n\n\t// Pac-Man\n\tfloat body = length (p);\n\tbody = max (body - 32.0, 27.0 - body);\n\tfloat eyes = 10.0 - length (vec3 (abs (p.x) - 15.0, p.y - 20.0, p.z - 20.0));\n\tfloat mouthAngle = PI * (0.07 + 0.07 * cos (2.0 * v * PI / k2));\n\tfloat mouthTop = dot (p, vec3 (0.0, -cos (mouthAngle), sin (mouthAngle))) - 2.0;\n\tmouthAngle *= 2.5;\n\tfloat mouthBottom = dot (p, vec3 (0.0, cos (mouthAngle), sin (mouthAngle)));\n\tfloat pacMan = max (max (body, eyes), min (mouthTop, mouthBottom));\n\tvec2 d = vec2 (pacMan, 0.13);\n\tvec3 P = p;\n\n\t// Gums\n\tvec3 q = vec3 (p.xy, mod (p.z + v, k2) - k2 * 0.5);\n\tfloat gum = max (length (q) - 6.0 * min (p.z / 20.0, 1.0), -p.z);\n\tif (gum < d.x) {\n\t\td = vec2 (gum, 0.35);\n\t\tP = q;\n\t}\n\n\t// Ground\n\t#ifdef GROUND\n\tq = vec3 (p.xy, p.z + v);\n\tfloat ground = q.y + 50.0 + 14.0 * cos (q.x * k1) * cos (q.z * k1);\n\tground = max (ground, -6.0 - ground) * 0.7;\n\tif (ground < d.x) {\n\t\td = vec2 (ground, 0.55);\n\t\tP = q;\n\t}\n\t#endif\n\n\t// Ghost\n\t#ifdef GHOST\n\tv = 130.0 + 60.0 * cos (iTime * 3.0);\n\tq = vec3 (p.xy, p.z + v);\n\tbody = length (vec3 (q.x, max (q.y - 4.0, 0.0), q.z));\n\tbody = max (body - 28.0, 22.0 - body);\n\teyes = 10.0 - length (vec3 (abs (q.x) - 14.0, q.y - 10.0, q.z - 22.0));\n\tfloat bottom = (q.y + 28.0 + 4.0 * cos (p.x * 0.4) * cos (p.z * 0.4)) * 0.7;\n\tfloat ghost = max (max (body, eyes), -bottom);\n\tif (ghost < d.x) {\n\t\td = vec2 (ghost, 0.76);\n\t\tP = q;\n\t}\n\t#endif\n\n\t// FBM\n\td.x += noiseFactor * (fbm (P * 0.5) - 1.4);\n\td.y += 0.3 * noise (P * 0.5) - 0.15;\n\treturn d;\n}\n\n// HSV to RGB\nvec3 hsv2rgb (in vec3 hsv) {\n\t#ifdef HSV2RGB_SAFE\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\t#endif\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n}\n\n// Main function\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the position of the camera\n\tfloat cameraDist = 125.0 + 60.0 * cos (iTime * 0.8);\n\tvec3 rayOrigin;\n\tif (iMouse.z < 0.5) {\n\t\trayOrigin = vec3 (cameraDist * cos (iTime), 5.0 + 70.0 * sin (iTime * 0.5), cameraDist * sin (iTime));\n\t} else {\n\t\tfloat cameraAngle = 4.0 * PI * iMouse.x / iResolution.x;\n\t\trayOrigin = vec3 (cameraDist * sin (cameraAngle), 5.0 + 70.0 * (1.0 - 2.0 * iMouse.y / iResolution.y), cameraDist * cos (cameraAngle));\n\t}\n\n\t// Define the orientation of the camera\n\tvec3 cameraLookAt = vec3 (10.0 * cos (iTime * 0.8), 10.0 + 10.0 * sin (iTime * 0.2), 20.0 * sin (iTime * 0.5) - 10.0);\n\tvec3 cameraForward = cameraLookAt - rayOrigin;\n\tvec3 cameraUp = vec3 (0.2 * cos (iTime * 0.1), 1.0, 0.2 * sin (iTime * 0.1));\n\tmat3 cameraOrientation;\n\tcameraOrientation [2] = normalize (cameraForward);\n\tcameraOrientation [0] = normalize (cross (cameraUp, cameraForward));\n\tcameraOrientation [1] = cross (cameraOrientation [2], cameraOrientation [0]);\n\tvec3 rayDirection = cameraOrientation * normalize (vec3 ((2.0 * fragCoord.xy - iResolution.xy) / iResolution.y, CAMERA_FOCAL_LENGTH));\n\n\t// Define the sun direction\n\tfloat sunYawAngle = PI * 0.25;\n\tfloat sunPitchAngle = iTime * 0.1;\n\tvec3 sunDirection = vec3 (sin (sunYawAngle) * sin (sunPitchAngle), cos (sunPitchAngle), cos (sunYawAngle) * sin (sunPitchAngle));\n\n\t// Set the sky color\n\tvec3 skyColor = mix (vec3 (0.8, 0.4, 0.4), vec3 (0.4, 0.4, 0.6), smoothstep (0.0, 0.5, sunDirection.y));\n\tskyColor += vec3 (0.8, 0.6, 0.4) * pow (max (0.0, dot (rayDirection, sunDirection)), 12.0);\n\tskyColor = mix (vec3 (0.15, 0.15, 0.24), skyColor, min (1.0, 1.0 + sunDirection.y));\n\n\t// Set the noise and density factors\n\tfloat candyControl = smoothstep (0.4, 0.6, sin (iTime * 0.7));\n\tfloat noiseFactor = mix (4.0, 8.0, candyControl);\n\tfloat densityFactor = mix (0.1, 0.5, candyControl);\n\n\t// Ray marching\n\tfloat densityTotal = 0.0;\n\tvec3 colorTotal = vec3 (0.0);\n\tfloat rayLength = 0.0;\n\tfor (int rayStep = 0; rayStep < RAY_STEP_MAX; ++rayStep) {\n\n\t\t// Compute the maximum density\n\t\tfloat densityMax = 1.0 - rayLength / RAY_LENGTH_MAX;\n\t\tif (densityTotal > densityMax) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Get the scene information\n\t\tvec3 p = rayOrigin + rayDirection * rayLength;\n\t\tvec2 data = distScene (p, noiseFactor);\n\t\tfloat dist = data.x * DIST_CORRECTION;\n\t\tif (dist < 0.0) {\n\n\t\t\t// Compute the local density\n\t\t\tfloat densityLocal = (densityTotal - densityMax) * dist * densityFactor;\n\t\t\tdensityTotal += densityLocal;\n\n\t\t\t// Update the color\n\t\t\tvec3 colorLocal = hsv2rgb (vec3 (data.y, 0.2, 1.0));\n\t\t\tcolorTotal += colorLocal * densityLocal;\n\t\t}\n\n\t\t// Go ahead\n\t\trayLength += max (dist, DIST_MIN);\n\t}\n\tcolorTotal += skyColor * (1.0 - densityTotal);\n\n\t// Set the fragment color\n\tfragColor = vec4 (colorTotal, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}