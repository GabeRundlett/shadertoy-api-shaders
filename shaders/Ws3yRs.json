{
    "Shader": {
        "info": {
            "date": "1601475599",
            "description": "columnas otro abc",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3yRs",
            "likes": 2,
            "name": "columnas otro abc",
            "published": 3,
            "tags": [
                "columnasotroabc"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\nfloat sdTorus( vec3 p, vec2 t )\n\t{ vec2 q = vec2(length(p.xz)-t.x,p.y);  return length(q)-t.y; }\nfloat sdCylinder( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nvec3 columna(vec3 p)\n{   \n    vec3 res;\n    \n    res = vec3(9999.0, -1.0,-1.0);\n    \n     float scy1= sdCylinderXZ( p- vec3(0.0,0.0,0.0), vec2(3.5,15.0)  );\n    \n    float srb1I= sdRoundBox(p-vec3(0.0,-7.5,0.0), vec3(4.5,0.5,4.5), 0.5 );\n    float srb2I= sdRoundBox(p-vec3(0.0,-9.5,0.0), vec3(5.0,0.5,5.0), 0.5 );\n    float  st1I= sdTorus(p-vec3(0.0,-5.5,0.0), vec2(4.0,0.5) );\n    float  st2I= sdTorus(p-vec3(0.0,-6.2,0.0), vec2(4.5,0.5) );\n   \n    \n    float srb1S= sdRoundBox(p-vec3(0.0,15.0,0.0), vec3(5.0,0.5,5.0), 0.5 );\n    float srb2S= sdRoundBox(p-vec3(0.0,13.0,0.0), vec3(4.5,0.5,4.5), 0.5 );\n    float  st1S= sdTorus(p-vec3(0.0,11.5,0.0), vec2(4.5,0.5) );\n    float  st2S= sdTorus(p-vec3(0.0,10.7,0.0), vec2(4.0,0.5) );\n    \n    //res =opU3(res, vec3(scy1,11.0,MATERIAL_NO)); \n    res =opU3(res, vec3(scy1,-1.0,4.0)); \n    res =opU3(res, vec3(srb1I,12.0,MATERIAL_NO)); \n    res =opU3(res, vec3(srb2I,12.0,MATERIAL_NO)); \n    res =opU3(res, vec3(st1I,13.0,MATERIAL_NO)); \n    res =opU3(res, vec3(st2I,11.0,MATERIAL_NO)); \n    \n    res =opU3(res, vec3(srb1S,12.0,MATERIAL_NO)); \n    res =opU3(res, vec3(srb2S,12.0,MATERIAL_NO)); \n    res =opU3(res, vec3(st1S,13.0,MATERIAL_NO)); \n    res =opU3(res, vec3(st2S,11.0,MATERIAL_NO)); \n \treturn res;   \n}\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp;\n    res = vec3(9999.0, -1.0,-1.0);\n    //p= rotate_y(p-vec3(0.0,0.0,0.0), radians(45.0));\n\t\n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    res =opU3(res, vec3(planeDist1,-1.0,5.0)); //inf\n    p.y=p.y-10.0;\n    p.z = abs(mod(p.z, 30.0) - 2.0);\n    //p.z=p.z+12.0;\n\n    vec3 q1=p;\n    float cx=30.0;\n    float cy=11.0;\n    float cz=30.0;\n   \n    q1.x = mod(q1.x+0.5*cx,cx)-0.5*cx;\n   \tp=q1;\n   \n    vec3 sc1= columna( p-vec3(0.0,0.0,0.0));\n    vec3 sc2= columna( p-vec3(0.0,0.0,30.0));\n    \n    float srbB1= sdRoundBox(p-vec3(0.0,22.0,15.0), vec3(4.0,6.0,14.5), 0.5 );\n    float sdcyB1= sdCylinderYZ(p-vec3(0.0,15.0,15.0), vec2(10.0,5.0 ));\n\tfloat dif1= differenceSDF(srbB1, sdcyB1);\n  \n   \n    res =opU3(res, vec3(dif1,3.0,MATERIAL_NO)); \n   \n    res =opU3(res, sc1);\n    res =opU3(res, sc2);\n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 64.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    \n    float occ = 0.5 + 0.5 * nor.y;\n    float amb = clamp(0.5 + 0.5 * nor.y, 0.0, 1.0);\n    float dif = clamp(dot(l, nor), 0.0, 1.0);\n    float spec = pow(clamp(dot(h, nor), 0.0, 1.0), shininess);\n    vec3 color = amb * vec3(1.0) * occ;\n    color += dif * vec3(1.0) * occ;\n    color += dif * spec * vec3(1.0) * occ;\n    color=pow( color, vec3(0.1545));\n    vec3 result =( LightShading(nor,l,v, colobj))*intensity*color;\n    \n    \n    //vec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n        //vec3 psh= p_shadingv3(p,  nor,  ro,  rd,  plight_pos,   colobj );\n    \t//return result* psh;\n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\nmat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat hash( float n )\n{\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec2 x )\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n    \tf = f*f*(3.0-2.0*f);\n    \tfloat n = p.x + p.y*57.0;\n    \tfloat res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n    \treturn res;\n}\n\nfloat fbm( vec2 p )\n{\n    \tfloat f = 0.0;\n    \tf += 0.50000*noise( p ); p = m*p*2.02;\n    \tf += 0.25000*noise( p ); p = m*p*2.03;\n    \tf += 0.12500*noise( p ); p = m*p*2.01;\n    \tf += 0.06250*noise( p ); p = m*p*2.04;\n    \tf += 0.03125*noise( p );\n    \treturn f/0.984375;\n}\n\nfloat thing(vec2 pos) \n{\n\tvec2 p = pos;\n\tvec2 offset = vec2(0.0, 1.0);\n\tfloat rowX = floor((pos.y)/1.0);\n\tif (mod(rowX, 2.0) < 1.0)\n\t\toffset.x = 0.5 + fbm(p*0.3);\n\t\n\tfloat rowY = floor((pos.y)/1.0);\n\tif (mod(rowY, 2.0) < 1.0) {\n\t\toffset.y = 2.0;\n\t\toffset.x = 0.75 * fbm(p*0.5);\n\t\trowX = floor((pos.y)/0.5);\n\t\tif (mod(rowX, 2.0) < 1.0)\n\t\t\toffset.x += 0.25 + fbm(p*0.3);\n\t}\n\t\n\tp.x += offset.x;\n\tfloat n1 = fbm(pos * 5.0);\n\tpos.x=fract(pos.x + offset.x * fbm(p*0.9) +.5)-0.5;\n\tpos.y=fract(pos.y * offset.y +.5)-0.5;\n\tpos = abs(pos);\n   \tfloat a = atan(pos.y, pos.x);\n\tfloat b = atan(pos.x, pos.y);\n\tfloat n2 = fbm(pos) * (a*b);\n\tfloat n3 = n1 * 0.15 / n2 * .75;\n\tfloat s = min(pos.x,pos.y) - n3;\n\treturn mix(s, 1.-n1, 0.5);\n}\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if (id_material==3.0)\n    { \n     vec2 uv =p.xy*0.25;   \n     return  thing(uv)*vec3(0.5,1.2,0.5)  ;\n    }    \n    \n    \n    if (id_material==4.0)\n    { \n     vec2 uv =p.xy*0.25;   \n     return  thing(uv)*vec3(1.2,0.2,0.3)  ;\n    }    \n    \n    \n    if (id_material==5.0)\n    { \n     vec2 uv =p.xz*0.25; //piso   \n     return  thing(uv)*vec3(1.0)  ;\n    }    \n    \n    \n}\n//------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    \n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    \n    return colobj;\n}\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*3.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(10.0, 6.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n   \n    vec3 ro=vec3(15.0,7.0,-25.0+t);\n         \n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.0);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\nfloat m;\nif (i==-2 ) {return mObj.color; }       \nif (i==0 ) {return vec3(0,0,0)/255.0; }\nif (i==1 ) {return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) {return vec3(255,0,0)/255.0; }\nif (i==3 ) {return vec3(0,255,0)/255.0; }\nif (i==4 ) {return vec3(0,0,255)/255.0; }\nif (i==5 ) {return vec3(255,255,0)/255.0; }\nif (i==6 ) {return vec3(0,255,255)/255.0; }\nif (i==7 ) {return vec3(255,0,255)/255.0; }\nif (i==8 ) {return vec3(192,192,192)/255.0; }\nif (i==9 ) {return vec3(128,128,128)/255.0; }\nif (i==10 ) {return vec3(128,0,0)/255.0; }\nif (i==11 ) {return vec3(128,128,0)/255.0; }\nif (i==12 ) {return vec3(0,128,0)/255.0; }\nif (i==13 ) {return vec3(128,0,128)/255.0; }\nif (i==14 ) {return vec3(0,128,128)/255.0; }\nif (i==15 ) {return vec3(0,0,128)/255.0; }    \nif (i==16 ) {return vec3(255, 204, 188)/255.0; }\nif (i==17 ) {return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) {return vec3(0.5, 0.5, 0.8); }\nif(i== 19 ) {return vec3(1, 0.5, 0);} \nif(i== 20 ) {return vec3(1.0, 1.0, 1.0);} \nif(i== 21 ) {return vec3(247./255., 168./255.,  184./255.);} \nif(i== 22 ) {return vec3(0, 1, 1);} \nif(i== 23 ) {return vec3(85./255., 205./255., 252./255.);} \nif(i== 24 ) {return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );} \nif(i== 25 ) {return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 26 ){ return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \nif(i== 31 ){ return vec3(0.0, 0.6, 0.0);}\n\n    \n\n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}