{
    "Shader": {
        "info": {
            "date": "1616424037",
            "description": "polygon",
            "flags": 0,
            "hasliked": 0,
            "id": "sds3zl",
            "likes": 2,
            "name": "polygon n",
            "published": 3,
            "tags": [
                "polygon"
            ],
            "usePreview": 0,
            "username": "jezersek",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "float mind = 1.;\nvec4 color(float v, vec3 col){\n    vec3 c = vec3(v*.1,v*.1,v*.1);\n    c += mix(vec3(0,0,0), col, 0.1/(v*pow(sin(v*100.),2.)));\n    return vec4(c, 1);\n}\n\nvec2 point(int i){\n    float j = float(i);\n    float fx = (2.+sin(iTime/10.+j))*10.;\n    vec2 p = vec2(\n        mix(0.2,iResolution.x/mind-0.2, 0.5+0.5*sin(iTime*0.17+fx)), \n        mix(0.2,iResolution.y/mind-0.2, 0.5+0.5*cos(iTime*0.19+fx))\n    );\n    \n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    mind = min(iResolution.y, iResolution.x);\n    vec2 uv = fragCoord/mind;\n    \n    // distortion\n    float rotationSpeed = 0.1;\n    float amplitude = 0.05;\n    float rotation = (uv.x*sin(iTime*rotationSpeed)+uv.y*cos(iTime*rotationSpeed))*10.;\n    uv.x += sin(rotation+iTime)*amplitude;\n    uv.y += cos(rotation+iTime)*amplitude;\n   \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float v = 1./0.; // neskončno\n    \n    int n = 5; // stevilo ogljišč\n    \n    for(int i=0; i<n; i++){\n        int j = (i+1)%n;\n        \n        float s = 0.;\n        \n        vec2 p1 = point(i);\n        vec2 p2 = point(j);\n        \n        vec2 pMid = (p1+p2)/2.;\n        \n        float dp = distance(p1, pMid); // razdalja od sredine daljice do oglijšča\n    \n        // izračunaj razdaljo od premice (med p1 in p2)\n        vec2 r = normalize(p1 - p2); // smerni vektor\n        float d = length(uv-p1-dot(r, uv-p1)*r); // razdalja trenutne točke od premice\n        \n        // izračunaj razdaljo pravokotne projekcije uv na daljico do središča daljice med p1 in p2\n        float dMid = length(dot(r,uv-pMid));\n        \n        // če je razdalja od središča daljice prevelika, vzemi razdaljo do enega ogljišča (p1/p2)\n        if(dMid > dp) d = distance(uv, p1); \n        \n        if(d < v)v = d;\n    }\n    \n    fragColor = color(v, col);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}