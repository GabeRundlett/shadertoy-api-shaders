{
    "Shader": {
        "info": {
            "date": "1556877877",
            "description": "An fbm domain warp I made in 2017 when I was first learning shaders! Code is kind of terrible but I still think it's beautiful ❤️\n\n\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3lf3z2",
            "likes": 64,
            "name": "Paint Archipelago",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "oil",
                "paint"
            ],
            "usePreview": 0,
            "username": "samlo",
            "viewed": 2187
        },
        "renderpass": [
            {
                "code": "float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nfloat noise(vec2 x) {\n\tvec2 i = floor(x);\n\tvec2 f = fract(x);\n\tfloat a = hash(i);\n\tfloat b = hash(i + vec2(1.0, 0.0));\n\tfloat c = hash(i + vec2(0.0, 1.0));\n\tfloat d = hash(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n#define octaves 14\nfloat fbm (in vec2 p) {\n\n    float value = 0.0;\n    float freq = 1.0;\n    float amp = 0.5;    \n\n    for (int i = 0; i < octaves; i++) {\n        value += amp * (noise((p - vec2(1.0)) * freq));\n        freq *= 1.9;\n        amp *= 0.6;\n    }\n    return value;\n}\n\nfloat pattern(in vec2 p) {\n    vec2 offset = vec2(-0.5);\n\n    vec2 aPos = vec2(sin(iTime * 0.005), sin(iTime * 0.01)) * 6.;\n    vec2 aScale = vec2(3.0);\n    float a = fbm(p * aScale + aPos);\n\n    vec2 bPos = vec2(sin(iTime * 0.01), sin(iTime * 0.01)) * 1.;\n    vec2 bScale = vec2(0.6);\n    float b = fbm((p + a) * bScale + bPos);\n\n    vec2 cPos = vec2(-0.6, -0.5) + vec2(sin(-iTime * 0.001), sin(iTime * 0.01)) * 2.;\n    vec2 cScale = vec2(2.6);\n    float c = fbm((p + b) * cScale + cPos);\n    return c;\n}\n\nvec3 palette(in float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.45, 0.25, 0.14);\n    vec3 c = vec3(1.0 ,1.0, 1.0);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x / iResolution.y;\n    float value = pow(pattern(p), 2.); // more \"islands\"\n    vec3 color = palette(value);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}