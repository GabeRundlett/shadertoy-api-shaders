{
    "Shader": {
        "info": {
            "date": "1691861751",
            "description": "my another raymarch playground",
            "flags": 0,
            "hasliked": 0,
            "id": "mt2yWw",
            "likes": 2,
            "name": "sphere tracing experiment",
            "published": 3,
            "tags": [
                "raymarch",
                "spheretrace"
            ],
            "usePreview": 0,
            "username": "silica163",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAX 100.\n#define MIN .001\n#define STEP 128\n\nvec3 l = vec3(5,10,0);\n\n#define rotX(a) mat3(      1,      0,      0,      0, cos(a),-sin(a),      0, sin(a), cos(a))\n#define rotY(a) mat3( cos(a),      0, sin(a),      0,      1,      0,-sin(a),      0, cos(a))\n#define rotZ(a) mat3( cos(a),-sin(a),       0,sin(a), cos(a),      0,      0,      0,      1)\n#define rot2D(a) mat2(cos(a), sin(a), -sin(a),cos(a))\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat xzPlane( vec3 p)\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(1,.01);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nmat3 yToNormal(vec3 N){\n    const int S = 3;\n    vec3 s[S];\n    \n    s[0] = N;\n    s[1] = normalize(cross(normalize(s[0]+vec3(.1,0,0)),s[0]));\n    s[2] = normalize(cross(s[0],s[1]));\n    \n    return mat3(s[1],s[0],s[2]);\n}\n\n\n// transform matrix that rotate normal vector to Y \nmat3 normalToY(vec3 N){\n    return inverse(yToNormal(N));\n}\n\nfloat dist(vec3 p){\n    float d = MAX;\n    //d = min(d,length(p - vec3(0,1,0))-1.);\n    //d = min(d,length(p - vec3(.5,0,1))-1.);\n    \n    //d = min(abs(p.y)-.001,d);\n\n\n    d = min(length(p - vec3(1,0,0))-.05,d);\n    d = min(length(p - vec3(0,1,0))-.05,d);\n    d = min(length(p - vec3(0,0,1))-.05,d);\n    \n    d = min(sdCapsule(p,vec3(-1,0,0),vec3(1,0,0),.02),d);\n    d = min(sdCapsule(p,vec3(0,-1.5,0),vec3(0,1.5,0),.02),d);\n    d = min(sdCapsule(p,vec3(0,0,-2),vec3(0,0,2),.02),d);\n    \n    const int S = 3;\n    vec3 s[S];\n    \n    s[0] = normalize(vec3(1));\n    s[1] = normalize(cross(normalize(s[0]+vec3(.1,0,0)),s[0]));\n    s[2] = normalize(cross(s[0],s[1]));\n    \n    /*d = min(length(p - s[0])-.1,d);\n    d = min(length(p - s[1])-.1,d);\n    d = min(length(p - s[2])-.1,d);\n    d = min(sdCapsule(p,vec3(0),s[0],.02),d);*/\n    \n    p = inverse(mat3(s[1],s[0],s[2]))*p;\n    \n    d = min(d,xzPlane(p));\n    //d = min(length(p - vec3(1,0,0))-.05,d);\n    d = min(length(p - vec3(0,1,0))-.05,d);\n    //d = min(length(p - vec3(0,0,1))-.05,d);\n    \n    return d;\n}\n\nvec3 sNormal(vec3 p){\n\tvec2 t = vec2(MIN,0);\n\tfloat d = dist(p);\n\t\n\treturn normalize(d - vec3(\n\t\tdist(p-t.xyy),\n\t\tdist(p-t.yxy),\n\t\tdist(p-t.yyx)\n\t));\n}\n\nfloat SSAO(vec3 p, vec3 N){\n    float sum = 0.;\n    mat3 toY = normalToY(N);\n    mat3 fromY = yToNormal(N);\n    \n    //if(dist(p+N*toY) < 0.)sum --;\n    \n    sum += max(dist(p+N*.01),0.);\n    \n    for(float i = 0.;i<2.;i++){\n        for(float j = 0.;j<8.;j++){\n        \n            mat3 sampleRot = rotY((PI/4.)*j)*rotX((PI/4.)*i);\n            vec3 dp = sampleRot*(vec3(0,1,0)*.01);\n            float d = max(dist(p+dp*toY),0.);\n            \n            sum+=d;\n            /*if(d < 0.){\n                sum--;\n            }*/\n        }\n    }\n    \n    return clamp(sum+.7,0.,1.);\n}\n\nvec4 march(vec3 ro,vec3 rp,vec3 rd){\n    float rl = 0.;\n    for(int s = 0;s < STEP;s ++){\n        rp = ro + rd * rl;\n        float d = dist(rp);\n        if(d >= MAX){\n            rl = MAX;\n            break;\n        }\n        if(d <= MIN)break;\n        rl += d;\n    }\n    return vec4(rp,rl);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy)*2.-1.;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 2.5;\n    vec3 c = vec3(0);\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    //m.x = iTime*.1;\n    vec3 ca = vec3(PI/2.+m.y*PI/2.,PI/2.+m.x*PI/1.,0);\n\t\n\tmat3 rotX = mat3(\n\t\t1,         0,        0,\n\t\t0, sin(ca.x),cos(ca.x),\n\t\t0,-cos(ca.x),sin(ca.x)\n\t);\n\t\n\tmat3 rotY = mat3(\n\t\t sin(ca.y),0, cos(ca.y),\n\t\t0,         1,         0,\n\t\t-cos(ca.y),0, sin(ca.y)\n\t);\n    \n    vec3 ro = rotY*rotX*vec3(0,0,4);\n    vec3 rd = normalize(rotY*rotX*vec3(uv*.5,0)-ro);\n    float rl = 0.;\n    vec3 rp = ro + rl * rd;\n    vec4 hit = march(ro,rp,rd);\n    rp = hit.rgb;\n    \n    vec3 V = -rd;\n    vec3 N = sNormal(rp);\n    vec3 L = normalize(l-rp);\n    vec3 R = reflect(rd,N);\n    float AO = SSAO(rp,N);\n    \n    c = vec3(clamp(dot(L,N),0.,1.))+.1;\n    if(hit.w >= MAX)c = vec3(0.);\n    //c *= vec3(AO);\n    //c *= exp(-rl)+.1;\n    \n    //c = N*.5+.5;\n    //c = fract(rd*2.);\n    //c = rp;\n    \n    //c = vec3(dist(rp+rotX(PI/2.)*N*.1));\n    \n    fragColor = vec4(c,1.0);\n    //fragColor = vec4(sin(rp+cos(rp.zxy)*.5+sin(rp.yzx)*2.),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}