{
    "Shader": {
        "info": {
            "date": "1563563895",
            "description": "My first path tracer, used to render a gaussian density distribution illuminated by environment light. Several things about the resulting image are very misleading.",
            "flags": 32,
            "hasliked": 0,
            "id": "ttsXRS",
            "likes": 1,
            "name": "volume path tracing test",
            "published": 3,
            "tags": [
                "volumetric",
                "tracing",
                "path"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 530
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 intensity = texture(iChannel0, uv).xyz;\n    intensity = pow(intensity, vec3(1./2.2));\n    fragColor = vec4(vec3(intensity), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define STEP 0.1\n#define ITERS 50\n#define INIT_ITERS 3\n//#define LIGHT_DIR vec3(1., -1., 0.5)\n//#define THRESHOLD 0.5\n#define fdist 0.5\n\nfloat noise(in vec2 uv)\n{\n    vec2 v = vec2(1484.41456, 189159.141);\n    mat2 m = mat2(1949.1905, -49181.415689, 5556.895, 1149.8885);\n\treturn fract(dot(v, sin(m * uv)));   \n}\n\nvec2 noise2D(in vec2 uv)\n{\n    mat2 m = mat2(1949.1905, -49181.415689, 5556.895, 1149.8885);\n\treturn fract(m*sin(m*uv));\n}\n\nfloat map(in vec3 pos)\n{\n\treturn length(pos)-1.;   \n}\n\nfloat density(in vec3 pos)\n{\n\treturn exp(-dot(pos, pos));   \n}\nvec3 normal(in vec3 pos)\n{\n\treturn normalize(pos);   \n}\n\n\nvec3 raymarch(in vec3 ro, in vec3 rd, in vec2 seed)\n{\n    float t = 0.;\n    for (int i=0; i<INIT_ITERS; i++)\n    {\n    \tfloat dist = map(ro + t*rd);\n        t += dist;\n    }\n    float transmission = 1.0;\n    float threshold = noise(seed)*0.7 + 0.2;\n    for (int i=0; i<ITERS; i++)\n    {\n        float st = STEP * (1.+(noise(seed)-0.5)*0.8);\n    \ttransmission *= (1.0 - density(ro + t*rd));\n        if (transmission < threshold)\n        {\n            break;\n        }\n        seed = noise2D(seed);\n        t += st;\n    }\n    \n    //secondary ray\n    ro = ro + t*rd;\n    vec3 reflectance = vec3(step(ro.y, 0.), step(ro.x, 0.), step(-ro.y, 0.))*smoothstep(length(ro),5., 6.);\n    t = 0.;\n    vec3 light_dir = normalize(vec3(noise2D(seed), noise(seed)) - 0.5);\n    float intensity = pow(light_dir.y + 1., 2.);\n    for (int i=0; i<ITERS; i++)\n    {\n        t += STEP;\n    \ttransmission *= (1.0 - density(ro + t*light_dir));\n    }\n    \n    vec3 n = normal(ro);\n    vec3 h = normalize(light_dir - rd);\n    float spec = pow(max(0., dot(h, n)), 10.);\n    float diffuse = max(0., dot(n, light_dir));\n    return reflectance*(spec + diffuse)*intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float c = cos(iTime);\n    //float s = sin(iTime);\n    //mat3 rot = mat3(c, -s, 0, s, c, 0, 0, 0, 1);\n    \n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;\n    float mx = iMouse.x/iResolution.x*2.*3.1415926;\n    vec3 ro = vec3(cos(mx),sin(mx),0.)*((1.-iMouse.y/iResolution.y)*6.+1.);\n    vec3 nw = -normalize(ro);\n    vec3 up = vec3(0.,0.,1.);\n    vec3 nu = cross(nw, up);\n    vec3 nv = cross(nu, nw);\n   \tvec3 rd = normalize(nw*fdist + uv.x*nu + uv.y*nv);\n    vec3 d = raymarch(ro, rd, uv+iTime);\n    \n    vec4 oldcolor = texture(iChannel0, fragCoord/iResolution.xy);\n    if (iFrame == 0 || iMouse.z > 1.)\n    {\n        oldcolor.xyz = vec3(0);\n        oldcolor.w = 0.0;\n    }\n    \n    fragColor = vec4(mix(d, oldcolor.xyz, oldcolor.w/(oldcolor.w+1.)),oldcolor.w + 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}