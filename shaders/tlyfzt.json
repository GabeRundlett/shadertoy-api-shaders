{
    "Shader": {
        "info": {
            "date": "1614864051",
            "description": "\"un-obfuscated\" version of https://twitter.com/zozuar/status/1367243732764876800",
            "flags": 0,
            "hasliked": 0,
            "id": "tlyfzt",
            "likes": 22,
            "name": "yonatan fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "drayde",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "// \"un-obfuscated\" version of \n// https://twitter.com/zozuar/status/1367243732764876800\n\nmat2 rotate2D(float r){\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\nvec3 hsv(float h, float s, float v){\n    vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n    return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    o = vec4(0.);\n    vec2 r = iResolution.xy;\n    float g = 0.;\n    float k = iTime * .1; \n    for (float i = 0.; i < 99.; ++i)\n    {\n        vec3 p = vec3 (g * (fragCoord.xy - .5 * r) / r.y + .5, g - 1.);\n        p.xz *= rotate2D (k);\n        float s = 3.;\n        // fractal levels\n        for (int i=0; i < 9;i++)\n        {\n            float e = max (1., (8. - 8. * cos (k)) / dot (p, p));\n            s *= e;\n            p = vec3 (2, 4, 2) - abs (abs (p) * e - vec3 (4, 4, 2));\n        }\n        g += min (length (p.xz), p.y) / s;\n        s = log (s);\n        o.rgb += hsv (s / 15. + .5, .3, s / 1000.);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}