{
    "Shader": {
        "info": {
            "date": "1494526688",
            "description": "Drag to explore!\n\nSmooth (continuous) colors by \"normalized iteration count\", see: \nhttps://linas.org/art-gallery/escape/smooth.html \nand\nhttps://en.wikipedia.org/wiki/Mandelbrot_set#Continuous_.28smooth.29_coloring",
            "flags": 0,
            "hasliked": 0,
            "id": "4sfBzr",
            "likes": 2,
            "name": "Julia Fractal Explorer",
            "published": 3,
            "tags": [
                "fractal",
                "julia"
            ],
            "usePreview": 0,
            "username": "DonKarlssonSan",
            "viewed": 840
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n\nconst float a = 5.0;\nconst float b = 4.0;\nconst float w = PI / 2.0;\n\n// From Stackoveflow\n// http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float xmin = -2.0;\n    float ymin = -1.4;\n    float xmax = 2.0;\n    float ymax = 1.4;\n    float xDelta;\n    float yDelta;\n    xDelta = (xmax - xmin) / iResolution.x;\n    yDelta = (ymax - ymin) / iResolution.y;\n    int iteration = 0;\n    const int max_iteration = 100;\n    vec2 l = (iMouse.xy / iResolution.xy - 0.5) * 4.0;\n    float x = xmin + fragCoord.x * xDelta;\n    float y = ymin + fragCoord.y * yDelta;\n    // while loop not supported on iPhone !!\n    // Using a for loop with break condition instead.\n    for (int i = 0; i < max_iteration; i++) {\n        // Multiplication of complex numbers:\n        // (a+bi) (c+di) = (ac-bd) + (bc+ad)i\n        // c^2 = (x+yi) (x+yi) = (xx-yy) + (yx+yx)i = (xx-yy) + (2xy)i\n        float xtemp = x * x - y * y + l.x;\n        y = 2.0 * x * y + l.y;\n        x = xtemp;\n        iteration = i;\n        if(x*x + y*y > 16.0) break;\n    }\n \n    float log_zn;\n    float nu;\n    float sm = float(iteration);\n    float s = 0.0;\n    float v = 0.0;\n    if (iteration < max_iteration ) {\n        // sqrt of inner term removed using log simplification rules.\n        log_zn = log( x*x + y*y ) / 2.0;\n        nu = log( log_zn / log(2.0) ) / log(2.0);\n        // Rearranging the potential function.\n        // Dividing log_zn by log(2) instead of log(N = 1<<8)\n        // because we want the entire palette to range from the\n        // center to radius 2, NOT our bailout radius.\n        sm=float(iteration) + 1.0 - nu;\n        s = 1.0;\n        v = 0.5;\n    }\n    \n    float c = sm / float(max_iteration)*2.0 + iTime/20.0;\n    vec3 hsv = hsv2rgb(vec3(c, s, v));\n    fragColor = vec4(hsv, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}