{
    "Shader": {
        "info": {
            "date": "1382770837",
            "description": "Sierpinski fractal",
            "flags": 1,
            "hasliked": 0,
            "id": "4dl3Wl",
            "likes": 70,
            "name": "Sierpinski - 3D",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "distancefield",
                "distance",
                "sierpinski",
                "gtc2015"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 6877
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// return distance and address\nvec2 map( vec3 p )\n{\n    const vec3 va = vec3(  0.0,  0.57735,  0.0 );\n    const vec3 vb = vec3(  0.0, -1.0,  1.15470 );\n    const vec3 vc = vec3(  1.0, -1.0, -0.57735 );\n    const vec3 vd = vec3( -1.0, -1.0, -0.57735 );\n    \n\tfloat a = 0.0;\n    float s = 1.0;\n    float r = 1.0;\n    float dm;\n    for( int i=0; i<9; i++ )\n\t{\n        vec3 v;\n\t    float d, t;\n\t\td = dot(p-va,p-va);            { v=va; dm=d; t=0.0; }\n        d = dot(p-vb,p-vb); if( d<dm ) { v=vb; dm=d; t=1.0; }\n        d = dot(p-vc,p-vc); if( d<dm ) { v=vc; dm=d; t=2.0; }\n        d = dot(p-vd,p-vd); if( d<dm ) { v=vd; dm=d; t=3.0; }\n\t\tp = v + 2.0*(p - v); r*= 2.0;\n\t\ta = t + 4.0*a; s*= 4.0;\n\t}\n\treturn vec2( (sqrt(dm)-1.0)/r, a/s );\n}\n\nconst float precis = 0.0002;\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 5.0;\n\tvec3 res = vec3( 1e20, 0.0, 0.0 );\n    float t = 0.5;\n\tfloat m = 0.0;\n    vec2 r;\n\tfor( int i=0; i<100; i++ )\n    {\n\t    r = map( ro+rd*t );\n        if( r.x<precis || t>maxd ) break;\n\t\tm = r.y;\n        t += r.x;\n    }\n\n    if( t<maxd && r.x<precis )\n\t\tres = vec3( t, 2.0, m );\n\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(precis,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.001 + 0.5*pow(float(i)/7.0,1.5);\n        float d = map( pos + h*nor ).x;\n        ao += -(d-h)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 0.8*ao, 0.0, 1.0 );\n}\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.0);\n\n\t// raymarch\n    vec3 tm = intersect(ro,rd);\n    if( tm.y>0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tm.x*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\tvec3 maa = vec3( 0.0 );\n\t\t\n        maa = 0.5 + 0.5*cos( 6.2831*tm.z + vec3(0.0,1.0,2.0) );\n\n\t\tfloat occ = calcOcclusion( pos, nor );\n\n\t\t// lighting\n        const vec3 lig = normalize(vec3(1.0,0.7,0.9));\n\t\tfloat amb = (0.5 + 0.5*nor.y);\n\t\tfloat dif = max(dot(nor,lig),0.0);\n\n        // lights\n\t\tvec3 lin = amb*vec3(3.0) * occ;\n\n\t\t// surface-light interacion\n\t\tcol = maa * lin;\n\t}\n\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    // camera\n\tfloat an = 3.2 + 0.5*iTime - 6.2831*(m.x-0.5);\n\tvec3 ro = vec3(2.5*sin(an),0.0,2.5*cos(an));\n    vec3 ta = vec3(0.0,-0.5,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 5.0*ww*m.y );\n\n    // render\n    vec3 col = render( ro, rd );\n    \n    fragColor = vec4( col, 1.0 );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 col = render( fragRayOri + vec3(0.0,-0.1,2.0), fragRayDir );\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}