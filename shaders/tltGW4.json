{
    "Shader": {
        "info": {
            "date": "1576420755",
            "description": "Simple mixing of tiled squares with rotation. (0,0) in the center",
            "flags": 0,
            "hasliked": 0,
            "id": "tltGW4",
            "likes": 2,
            "name": "Distorted Tiles Rotating",
            "published": 3,
            "tags": [
                "simple",
                "glow",
                "learning",
                "tiles"
            ],
            "usePreview": 0,
            "username": "tombla",
            "viewed": 450
        },
        "renderpass": [
            {
                "code": "// Mode 0 -- mix colors using colors as thresholds\n// Mode 1 -- classic border / inside \n#define MODE          1\n// Distort factor, recommended 0.001...0.05\n#define DISTORT\t\t  0.01\n\n#define BORDER        0.1\n#define BORDER_START  0.05\n\n// N tiles vertically\n#define BASE_N        3.\n#define ZOOM_FACTOR   0.4\n\n#define ANGULAR_SPEED 0.2\n#define ANGULAR_ADD   0.25\n\nfloat distToBorder(in vec2 cell) {\n    float x1 = cell.x;\n    float y1 = cell.y;\n    float x2 = 1.-cell.x;\n    float y2 = 1.-cell.y;\n    return min(min(min(x1, y1), x2), y2);\n}\n\nvec2 rot(in vec2 p, in float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * p;\n}\n\nvec2 distort(in vec2 p) {\n    float density = 15.;\n\treturn vec2(\n        p.x + DISTORT * sin(p.y * density),\n        p.y + DISTORT * sin(p.x * density));\n}\n\nvec2 rescale(in vec2 p) {\n    vec2 ires = iResolution.xy;\n    // Scale to -0.5...0.5\n    vec2 n = p / ires - 0.5;\n    // Scale x to keep proportions, y stays -0.5...0.5\n    n.x *= ires.x / ires.y;\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = rescale(fragCoord);\n    uv = distort(uv);\n    uv = rot(uv, iTime * ANGULAR_SPEED + sin(iTime * ANGULAR_ADD));\n    \n    vec2 cell = fract((uv + iTime/240.) * (BASE_N + ZOOM_FACTOR*sin(iTime)));\n\n    vec3 inside = 0.5 + 0.5 * cos(iTime+cell.xyx + vec3(0., 2., 4.));\n    vec3 border = vec3(0.15, 0.25, 0.56);\n    // border = 0.5 + 0.5*sin(iTime+cell.yxy+vec3(1,2,0));\n    float dist = distToBorder(cell);\n    \n    vec3 col;\n    if (MODE == 0) {\n        col = smoothstep(border, inside, vec3(dist));\n    }\n    else if (MODE == 1) {\n        col = border * smoothstep(BORDER, BORDER_START, dist) +\n              inside * smoothstep(BORDER_START, BORDER, dist);\n    }\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}