{
    "Shader": {
        "info": {
            "date": "1586879430",
            "description": "shows 5 different code methods\nin Buf A uncomment //if(iFrame) to initialze with different type of waves",
            "flags": 32,
            "hasliked": 0,
            "id": "Ws2czy",
            "likes": 3,
            "name": "fdtd but with cos sin",
            "published": 3,
            "tags": [
                "waves",
                "sound",
                "simulation",
                "light",
                "1d"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 426
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u = fragCoord/iResolution.xy;\n         u.x*= 128./iResolution.x;\n    \n    vec4 C = texture(iChannel0, u);\n           C.z = length(C.xy);\n           C.w = atan(C.y,C.x)/3.14;\n\n    vec4 b = u.y*vec4(8.)-vec4(1.,3.,5.,7.);\n    \n    float c = +float(b.x<C.x && b.x>0.)\n              +float(b.x>C.x && b.x<0.)\n              +float(b.y<C.y && b.y>0.)\n              +float(b.y>C.y && b.y<0.)\n              +float(b.z<C.z && b.z>0.)\n              +float(b.z>C.z && b.z<0.)\n              +float(b.w<C.w && b.w>0.)\n              +float(b.w>C.w && b.w<0.);\n\n    fragColor = vec4(c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec2 m = vec2(128.,iResolution.y);\n    vec4 C = texture(iChannel0, mod(u+vec2(0,0),m)/iResolution.xy);\n    vec4 R = texture(iChannel0, mod(u+vec2(1,0),m)/iResolution.xy);\n    vec4 L = texture(iChannel0, mod(u-vec2(1,0),m)/iResolution.xy);\n    \n    float pi = 3.14159265359;\n    \n    //method1 https://www.eecs.wsu.edu/~schneidj/ufdtd/\n    //if((iFrame&1) == 0) C.x += L.y* .1 + C.y*-.1;\n    //if((iFrame&1) != 0) C.y += R.x*-.1 + C.x* .1;\n    \n    //method2 similar to https://www.shadertoy.com/view/wllXWs\n    //if((iFrame&1) == 0) C.x += L.y* .05 + R.y*-.05;\n    //if((iFrame&1) != 0) C.y += L.x* .05 + R.x*-.05;\n    \n    //method3 chained rotating circles\n    C.x  = cos(atan(C.x,L.y)+.05-vec2(0.,pi*.5)).y*length(vec2(L.y,C.x));\n    C.y  = cos(atan(R.x,C.y)+.05-vec2(0.,pi*.5)).x*length(vec2(C.y,R.x));\n    C.xy = cos(atan(C.y,C.x)+.05-vec2(0.,pi*.5))  *length(C.xy);\n    \n    //method4 position in .x velocity in .y\n    //C.y += (L.x-C.x) + (R.x-C.x);\n    //C.x += C.y*.125;\n    \n    //method5 position in .x saving previous position in .y and use it to extract velocity\n    //float x = C.x;\n    //C.x = C.x*.6 + L.x*.2 + R.x*.2 + C.x-C.y;\n    //C.y = x;\n    \n    float uf = u.x-64.;\n    float fr = float(iFrame)- 100.;\n    if(iFrame == 0) C = exp(-uf*uf /32.)*vec4(1.,.0,.0,.0)+.5;\n    //if(iFrame == 0) C = exp(-uf*uf /64.)*cos((u.x-64.)*.5)+vec4(.5);\n    //if(iFrame == 0) C.x = (sin(u.x/128.5*pi*8.))+.5;\n    //if(iFrame == 0) C.x = fract(sin(u.x)*59233.83635962)+.5;\n    //if(iFrame == 0) C = vec4(u.x==64.5,0.,.0,.0)+.5;\n    //if(iFrame < 600 && u.x==60.5) C.x = exp(-fr*fr / 1000.);\n    \n    fragColor = C;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}