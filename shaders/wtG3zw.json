{
    "Shader": {
        "info": {
            "date": "1578531137",
            "description": "By Dana Muise. Inspired by Joseph Albers' Book \"The interaction of Color:  color intervals and transformation interaction of color figure xiv-2\"\nCredit to FabriceNeyret2 for rotation snippet, Beefburrito and CGK_4 v1.1 for polygon functions",
            "flags": 0,
            "hasliked": 0,
            "id": "wtG3zw",
            "likes": 2,
            "name": "Joseph Albers, Squares 2",
            "published": 3,
            "tags": [
                "colortheory",
                "josephalbers",
                "interactionofcolor"
            ],
            "usePreview": 0,
            "username": "danamuise",
            "viewed": 2708
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define rotate(a)  mat2(cos(a), -sin(a), sin(a), cos(a))\n\n//Draw background\nvec3 DrawBox(vec2 uv, float L, float R, float B, float T, vec3 col){\n\tvec3 colorBox = vec3(0.0);\n    \n    if (uv.x>L && uv.x<R && uv.y>B && uv.y<T) {\n       colorBox = vec3(col.r/255.0,col.g/255.0,col.z/255.0);\n    }\n    return colorBox; \n}\n\n//POLYGON FUNCTION\nfloat polygon(vec2 uv, vec2 pos, float size, float blur, int sides){\n    uv = uv-pos;\n    //Angle and radius of polygon\n    float angle = atan(uv.x,uv.y)+PI;\n    float rad = TWO_PI/float(sides);\n    float dist = cos(floor(0.5+angle/rad)*rad-angle)*length(uv);\n    float poly = smoothstep(size, size-blur, dist);\n    \n    return poly;\n}\n\n//spinning function\nmat2 spinspin(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n//Draw box\nvec4 DrawRectangle(vec4 try,vec2 uv){\n\n    vec2 translate = vec2(cos(iTime));\n    //uv += translate*0.15;\n    uv = spinspin(sin(iTime))*uv;\n    float rectangle = polygon(uv, vec2(0.0,0.0), 0.45, 0.009, 4);\n    \n    float pct = abs(sin(iTime*.25));\n    \n    vec3 colorA = vec3(0.149,0.141,0.912);\n\tvec3 colorB = vec3(1.000,0.833,0.224);\n    \n    vec3 rColor = mix(colorA, vec3(0.0,0.5,0.0), pct) * rectangle;\n    try = vec4(rColor,1.0);\n    \n    return try;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 colorA = vec3(168.0, 48.0, 41.0);\n\tvec3 colorB = vec3(221.0, 64.0, 54.0);\n    vec3 colorC = vec3(221.0, 130.0, 125.0);\n\tvec3 colorD = vec3(221.0, 91.0, 82.0);\n    vec3 colorA1 = vec3(0.0, 110.0, 222.0);\n\tvec3 colorB1 = vec3(0.0, 126.0, 255.0);\n    vec3 colorC1 = vec3(63.0, 158.0, 255.0);\n\tvec3 colorD1 = vec3(107.0, 180.0, 255.0);\n    float pct = abs(sin(iTime*.25));\n    \n    // fill top left\n   vec3 color = DrawBox(uv, 0.0, 0.5, 0.5, 1.0, mix(colorA, colorA1, pct));\n    \n    // fill bottom left\n    color += DrawBox(uv, 0.0, 0.5, 0.0, 0.5, mix(colorB, colorB1, pct));\n\n    // fill top right\n    color += DrawBox(uv, 0.5, 1.0, 0.5, 1.0, mix(colorC, colorC1, pct));\n    \n    // fill bottom right\n    color += DrawBox(uv, 0.5, 1.0, 0.0, 0.5, mix(colorD, colorD1, pct));\n    \n    if (uv.x>0.30 && uv.x<0.7 && uv.y>0.20 && uv.y<0.80) {\n       //color /= rectColor;\n    }\n    \n    uv -= 0.5; // move center\n    uv.x *= iResolution.x/iResolution.y;\n  \n\tfragColor+= DrawRectangle(fragColor, uv);\n    fragColor += vec4(color, 0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}