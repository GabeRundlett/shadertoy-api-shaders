{
    "Shader": {
        "info": {
            "date": "1546748274",
            "description": "spiral fx",
            "flags": 0,
            "hasliked": 0,
            "id": "wssGRS",
            "likes": 9,
            "name": "Spiral Flash",
            "published": 3,
            "tags": [
                "2d",
                "spiral",
                "flash"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "vec2 rot(vec2 v, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c)*v;\n}\nfloat cro(in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nfloat sdUnevenCapsule( in vec2 p, in vec2 pa, in vec2 pb, in float ra, in float rb )\n{\n    p  -= pa;\n    pb -= pa;\n    float h = dot(pb,pb);\n    vec2  q = vec2( dot(p,vec2(pb.y,-pb.x)), dot(p,pb) )/h;\n    \n    //-----------\n    \n    q.x = abs(q.x);\n    \n    float b = ra-rb;\n    vec2  c = vec2(sqrt(h-b*b),b);\n    \n    float k = cro(c,q);\n    float m = dot(c,q);\n    float n = dot(q,q);\n    \n         if( k < 0.0 ) return sqrt(h*(n            )) - ra;\n    else if( k > c.x ) return sqrt(h*(n+1.0-2.0*q.y)) - rb;\n                       return m                       - ra;\n}\n\n\nvec2 spiral(vec2 uv,float zoom, float len)\n{\n    float d = length(uv) * zoom;\n    d=log(d);\n    uv = rot(uv,d*5.0);\n\tfloat v = 1.0-sdUnevenCapsule(uv,vec2(0.0,0.0),vec2(0.4*len,0.0),0.0,0.4*len)*14.0;\n    float l = d;   \n    return vec2(v,l);\t// distx , disty\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n    float t = fract(iTime*0.4)*6.0;\n    \n\tvec2 dist = spiral(uv,1.0,t);\n    float v = dist.x;\n    float l = dist.y;\n    \n\tv = smoothstep(0.5-0.1,0.5+0.1,v);\n    //vec3 col = vec3(v*1.0-l/t);\n    \n    vec3 col = mix(vec3(0.0,0.0,0.2),vec3(1.0,0.6,0.5),v*1.0-l/t);\n    \n \tvec2 q = fragCoord/iResolution.xy;\n    col *= 0.3 + 0.7*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.25);    \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}