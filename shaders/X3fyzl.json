{
    "Shader": {
        "info": {
            "date": "1726532578",
            "description": "Sphere some lighting and some rotating cubes.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3fyzl",
            "likes": 0,
            "name": "9-16-2024 (2)",
            "published": 3,
            "tags": [
                "circle"
            ],
            "usePreview": 0,
            "username": "8coolguy",
            "viewed": 40
        },
        "renderpass": [
            {
                "code": "#define pi 3.14\n#define X iResolution.x\n#define Y iResolution.y\n#define BACKGROUND vec3(0.835, 1, 1)\n#define GROUND vec3(1, .835, 1)\n#define STEPS 8\n#define LAYERS 3\n\n/*\n*Data Structures\n*\n*/\nstruct Material {\n    vec3 ambientColor;\n    vec3 diffColor;\n    vec3 specColor;\n    float alpha;\n\n};\nstruct Surface {\n    float signedDistance;\n    Material material;\n};\n/*\n*Rotations\n*\n*/\nmat2 rotate2d(float theta){\n    float s = sin(theta);\n    float c = cos(theta);\n    return mat2(c, -s, s, c);\n}\nmat3 rotateY(float theta){\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(vec3(c,0,s),vec3(0,1,0),vec3(-s,0,c));\n}\n\nmat3 rotateX(float theta){\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(vec3(1,0,0),vec3(0,c,-s),vec3(0,s,c));\n}\n\nmat3 rotateZ(float theta){\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(vec3(c,-s,0),vec3(s,c,0),vec3(0,0,1));\n}\n\n/*\n*Camera Functions\n*\n*/\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint){\n    vec3 cd = normalize(lookAtPoint - cameraPos);\n    vec3 cr = normalize(cross(vec3(0, 1, 0),cd));\n    vec3 cu = normalize(cross(cd, cr));\n    \n    return mat3(-cr,cu,-cd);\n\n}\n\n/*\n*Materials\n*\n*/\nMaterial gold() {\n  vec3 aCol = 0.5 * vec3(0.7, 0.5, 0);\n  vec3 dCol = 0.6 * vec3(0.7, 0.7, 0);\n  vec3 sCol = 0.6 * vec3(1, 1, 1);\n  float a = 5.;\n\n  return Material(aCol, dCol, sCol, a);\n}\n\nMaterial silver() {\n  vec3 aCol = 0.4 * vec3(0.8);\n  vec3 dCol = 0.5 * vec3(0.7);\n  vec3 sCol = 0.6 * vec3(1, 1, 1);\n  float a = 5.;\n\n  return Material(aCol, dCol, sCol, a);\n}\n/*\n*Shapes\n*\n*/\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col){\n    return Surface(length(p - offset) - r,gold());\n}\nSurface sdBox(vec3 p, vec3 b, vec3 offset, vec3 col, mat3 rot, vec3 pivot){\n    p = ((p - offset) * rot) - pivot;\n    vec3 q = abs(p) - b;\n    return Surface(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),Material(.6*col,.5*col,.4*col,1.0));\n}\nSurface sdFloor(vec3 p, vec3 col){\n    return Surface(p.y + 1., Material(.3*col,.5*col,.4*col,1.0));\n}\nSurface minWithColor(Surface obj1, Surface obj2) {\n    if (obj2.signedDistance < obj1.signedDistance) return obj2; // The sd component of the struct holds the \"signed distance\" value\n    return obj1;\n}\n/*\n*Main Sceene\n*\n*/\nSurface sdScene(vec3 p){\n    Surface sphere = sdSphere(p, .4, vec3(0), vec3(1.0,.65, .81));\n    vec3 path = vec3(0);\n    Surface s1 = sdBox(p,vec3(.2,.2,.2), path, vec3(1, 0, 0), rotateX(iTime) *rotateY(pi/8.), vec3(0,1,1));\n    Surface s2 = sdBox(p,vec3(.2,.2,.2), path, vec3(0, 1, 0), rotateY(iTime), vec3(1, 0, 1));\n    Surface s3 = sdBox(p,vec3(.2,.2,.2), path, vec3(0, 0, 1), rotateZ(iTime), vec3(1, 1, 0));\n    //vec3 floorColor = vec3(1. + 0.7*mod(floor(p.x) + floor(p.z), 2.0));// checkered floors\n    Surface flr = sdFloor(p, GROUND);\n    Surface minS = minWithColor(minWithColor(s3,minWithColor(minWithColor(s1,sphere),s2)),flr);\n    for(int layer = 0; layer < LAYERS; layer++){\n        vec3 pivot = vec3(0, float(layer*2), 0);\n        for(int steps = 0; steps < STEPS; steps++){\n            Surface s = sdBox(p,vec3(.2,.2,.2), path, vec3(.7, .7, .7), rotateX(iTime), pivot);\n            minS = minWithColor(minS,s);\n        }\n    }\n\n    return minS;\n}\n/*\n*Ray March Scene\n*\n*/\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end){\n    float depth = start;\n    Surface d;\n    for (int i = 0; i < 255; i++) {\n        vec3 p = ro + depth * rd;\n        d = sdScene(p);\n        depth += d.signedDistance;\n        if (d.signedDistance < 0.001 || depth > end) break;\n    }\n    d.signedDistance = depth;\n    return d;\n}\n\nvec3 phong(vec3 L, vec3 N, vec3 rd, Material mat){\n    // ambient\n    vec3 ambient = mat.ambientColor;\n\n    // diffuse\n    float dotLN = clamp(dot(L, N), 0., 1.);\n    vec3 diffuse = dotLN * mat.diffColor;\n\n    // specular\n    float dotRV = clamp(dot(reflect(L, N), -rd), 0., 1.);\n \n    vec3 specular = mat.specColor * pow(dotRV, mat.alpha);\n\n    return ambient + diffuse + specular;\n\n\n}\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    float r = 1.; // radius of sphere\n    return normalize(\n        e.xyy * sdScene(p + e.xyy).signedDistance +\n        e.yyx * sdScene(p + e.yyx).signedDistance +\n        e.yxy * sdScene(p + e.yxy).signedDistance +\n        e.xxx * sdScene(p + e.xxx).signedDistance);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 col = vec3(0);\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   \n   vec3 lightPosition = vec3(0, 0, 0);;\n   vec3 ro = vec3(0, 0, 3);\n   vec2 mouseUV = iMouse.xy/iResolution.xy;\n   //ro.x = cameraRadius * cos(iTime) + lightPosition.x; // convert x-component to polar and add offset\n   //ro.z = cameraRadius * sin(iTime) + lightPosition.z; \n   \n   vec3 rd = camera(ro , lightPosition) * normalize(vec3(uv, -1));\n   \n   \n   rd *= rotateY(sin(pi*(mouseUV.x)-pi/2.));\n   rd *= rotateX(sin(pi*(mouseUV.y)-pi/2.));\n   Surface d = rayMarch(ro, rd, 0., 100.);\n   \n   \n   if (d.signedDistance > 100.0){\n       col = BACKGROUND; // ray didn't hit anything\n   } else {\n       vec3 p = ro + rd * d.signedDistance;\n       vec3 normal = calcNormal(p);\n       vec3 lightDirection = normalize(lightPosition - p);\n       \n       // light #1\n       vec3 lightPosition1 = vec3(-8, -6, -5);\n       vec3 lightDirection1 = normalize(lightPosition1 - p);\n       float lightIntensity1 = 0.6;\n\n       // light #2\n       vec3 lightPosition2 = vec3(1, 1, 1);\n       vec3 lightDirection2 = normalize(lightPosition2 - p);\n       float lightIntensity2 = 0.7;\n\n       // final sphere color\n       col = lightIntensity1 * phong(lightDirection1, normal, rd, d.material);\n       col += lightIntensity2 * phong(lightDirection2, normal , rd, d.material);\n       \n       \n   }\n   \n   fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}