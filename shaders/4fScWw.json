{
    "Shader": {
        "info": {
            "date": "1722382328",
            "description": "description",
            "flags": 0,
            "hasliked": 0,
            "id": "4fScWw",
            "likes": 5,
            "name": "Infinite pipes",
            "published": 3,
            "tags": [
                "tag"
            ],
            "usePreview": 0,
            "username": "klemek",
            "viewed": 91
        },
        "renderpass": [
            {
                "code": "#define iTempo 60.0\n#define PI 3.1415927\n#define E .001\n#define SQRT2 1.4142136\n\nmat2 rot(float angle){\n    return mat2(\n        cos(angle*2.*PI),-sin(angle*2.*PI),\n        sin(angle*2.*PI),cos(angle*2.*PI)\n    );\n}\n\nfloat ease(float x) {\n    return smoothstep(0.0, 1.0, x);\n}\n\nfloat ease_step(float x, float k) {\n    return floor(x) + (mod(x, 1.0) < k ? smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, (x - floor(x)) / k)) : 1.0);\n}\n\nfloat rand(float seed){\n    float v=pow(abs(seed),6.0/7.0);\n    v*=sin(v)+1.0;\n    return fract(v);\n}\n\nfloat kp2(float k)\n{\n    return k * 3.0 < 1.0 ? 0.0 : pow(2.0, floor(k * 3.0) - 2.0);\n}\n\nfloat modTime(float k)\n{\n    return mod(kp2(k) * iTime * iTempo / 120., 1.0);\n}\n\nfloat sinTime(float k)\n{\n    return sin(modTime(k) * 2.0 * PI);\n}\n\n// https://iquilezles.org/articles/distfunctions/\n\nfloat box(in vec3 p, vec3 b){\n    return length(max(abs(p) - b, 0.0));\n}\n\n# define MIN_DIST 0.0001\n# define MAX_DIST 40.0\n\n# define MIN_LIGHT 0.6\n# define FOG_SPEED 1.0\n# define LIGHT_FORCE 0.5\n\n# define BOX_SIZE 2.0\n\nfloat world_map(in vec3 p0)\n{\n    const float inv_box_size = 1.0 / BOX_SIZE;\n    vec3 p = p0 - BOX_SIZE * round(p0 * inv_box_size);\n\n    float box_id = rand(floor(p - p0).x * 12. + floor(p - p0).y * 34. + floor(p - p0).z * 56. + 78.);\n    \n    float v1 = sin((iTime * 0.125 + rand(box_id + 827.0)) * 2. * PI);\n    float v2 = sin((iTime * 0.125 + rand(box_id + 123.0)) * 2. * PI);\n    float v3 = sin((iTime * 0.125 + rand(box_id + 312.0)) * 2. * PI);\n\n    float d = MAX_DIST;\n    \n    d = min(d, box(p, vec3(0.4, 0.4, 0.4)));\n    \n    d = min(d, box(p, vec3(0.4 + v1 * 0.1, 0.3, 0.3)));\n    d = min(d, box(p, vec3(0.3, 0.4 + v2 * 0.1, 0.3)));\n    d = min(d, box(p, vec3(0.3, 0.3, 0.4 + v3 * 0.1)));\n\n    d = min(d, box(p, vec3(0.4 + v1 * 0.2, 0.2, 0.2)));\n    d = min(d, box(p, vec3(0.2, 0.4 + v2 * 0.2, 0.2)));\n    d = min(d, box(p, vec3(0.2, 0.2, 0.4 + v3 * 0.2)));\n\n    d = min(d, box(p, vec3(max(0., v1 * BOX_SIZE), 0.1, 0.1)));\n    d = min(d, box(p, vec3(0.1, max(0., v2 * BOX_SIZE), 0.1)));\n    d = min(d, box(p, vec3(0.1, 0.1, max(0., v3 * BOX_SIZE))));\n\n    return d;\n}\n\nvec3 normal(in vec3 p)\n{\n    const vec3 small_step = vec3(MIN_DIST, 0.0, 0.0);\n\n    return normalize(vec3(\n        world_map(p + small_step.xyy) - world_map(p - small_step.xyy),\n        world_map(p + small_step.yxy) - world_map(p - small_step.yxy),\n        world_map(p + small_step.yyx) - world_map(p - small_step.yyx)\n    ));\n}\n\nvec3 ray_march(in vec3 ro, in vec3 rd, in vec3 light)\n{\n    float dist = 0.0;\n    float closest = 0.0;\n    const float inv_max_dist = 1.0 / MAX_DIST;\n    while (dist < MAX_DIST) {\n        closest = world_map(ro + dist * rd);\n        if (closest < MIN_DIST * dist) {\n            vec3 p = ro + dist * rd;\n            vec3 n = normal(p);\n            vec3 rl = normalize(p - light);\n            float diff = max(-0.5, dot(n, rl));\n            float k = dist * inv_max_dist;\n            return vec3(MIN_LIGHT + log(k + 1.0) * FOG_SPEED + diff * LIGHT_FORCE);\n        }\n        dist += closest;\n    }\n    return vec3(1.0);\n}\n\nvec3 image(vec2 uv)\n{\n    vec3 ro = vec3(\n        BOX_SIZE * 0.5,\n        BOX_SIZE * 0.5,\n        BOX_SIZE * 0.5 + iTime * 2.0\n    );\n    \n    vec3 rd = vec3(uv.x, uv.y, 1.0);\n    \n    rd.xz *= rot(ease_step(iTime * 0.25, 0.25) * 0.25);\n    rd.xy *= rot(ease_step(iTime * 0.25 + 0.5, 0.25) * 0.25);\n    \n    vec3 light = vec3(0.0, 1.0, 0.0);\n    \n    light.xz *= rot(ease_step(iTime * 0.25, 0.25) * 0.25);\n    light.xy *= rot(ease_step(iTime * 0.25 + 0.5, 0.25) * 0.25);\n    \n    return ray_march(ro, rd, ro - light);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    fragColor = vec4(image(uv), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}