{
    "Shader": {
        "info": {
            "date": "1717221545",
            "description": "Yellow: Linear interpolation\nMagenta: Bicubic interpolation\nCyan: Biquadratic\nWhite: Gaussian interpolation",
            "flags": 0,
            "hasliked": 0,
            "id": "X3K3RR",
            "likes": 4,
            "name": "SDF font scaling comparison",
            "published": 3,
            "tags": [
                "sdf",
                "bicubic",
                "gaussian"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "vec4 letter(int c, vec2 uv, int mode) {\n    uv += 0.5 + vec2(c % 16, 15 - c / 16);\n    switch (mode) {\n    default: return texture(iChannel0, uv / 16.0);\n    case 1: return texture_bicubic(iChannel0, uv / 16.0);\n    case 2: return texture_biquadratic(iChannel0, uv / 16.0);\n    case 3: return texture_gaussian(iChannel0, uv / 16.0);\n    }\n    return vec4(0);\n}\n\nvec4 drawtext(vec4 colour, vec2 uv, int mode) {\n    const float letterwidth = 0.5;\n    const int textlen = 8;\n    int text[textlen] = int[]( 129, 203, 192, _D _s _R _t 240);\n\n    uv += vec2(float(textlen) * letterwidth, 1.0) * .5;\n    if (!(0.008 <= uv.y && uv.y < 1.0)) return vec4(0);\n\n    int c = int(floor(uv.x / letterwidth));\n    uv.x = uv.x - float(c) * letterwidth;\n    if (!(0 <= c && c < textlen)) return vec4(0);\n\n    float a = letter(text[c], uv - vec2(letterwidth, 1.0) * .5, mode).a;\n    float g = min(0.01, fwidth(a) * 0.7);\n    a = smoothstep(-g, g, 0.5 - a);\n\n    return colour * a;\n}\n\nvec2 rot(vec2 uv, vec2 centre, float t) {\n    uv -= centre;\n    float s = sin(t), c = cos(t);\n    mat2x2 m = mat2x2(c, s, -s, c);\n    return uv * m + centre;\n}\n\nvec4 drawtext_ex(\n        vec4 colour,\n        vec2 pos,\n        vec2 uv,\n        float time,\n        int mode) {\n    float t = sin(time * 0.2) * .4;\n    pos += cos(time * vec2(0.11, 0.13)) * vec2(-1.8, 0.4);\n    vec2 c = sin(time * 0.07 + vec2(0.0, 0.5) * 6.283184);\n    uv = rot(uv * 2.0, c * .2, t) - pos;\n    return drawtext(colour, uv, mode);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.xx;\n    vec4 op = vec4(0.125 + 0.125*cos(iTime+uv.xyx+vec3(0,2,4)), 0.0);\n\n    float size = 2.0;\n    vec4 txt = drawtext_ex(vec4(1,1,0,1),\n                      vec2(0,-3)*.08, uv, iTime + 0.0, 0);\n    op = op * (1.0 - txt.a) + txt;\n\n    txt = drawtext_ex(vec4(1,0,1,1),\n                      vec2(0,-1)*.08, uv, iTime + 1.0, 1);\n    op = op * (1.0 - txt.a) + txt;\n\n    txt = drawtext_ex(vec4(0,1,1,1),\n                      vec2(0,1)*.08, uv, iTime + 2.0, 2);\n    op = op * (1.0 - txt.a) + txt;\n \n    txt = drawtext_ex(vec4(1,1,1,1),\n                      vec2(0,3)*.08, uv, iTime + 3.0, 3);\n    op = op * (1.0 - txt.a) + txt;\n\n    fragColor = op;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 w0(vec2 a) { return (a * (a * (-a + 3.0) - 3.0) + 1.0) / 6.0; }\nvec2 w1(vec2 a) { return (a * a * (3.0 * a - 6.0) + 4.0) / 6.0; }\nvec2 w2(vec2 a) { return (a * (a * (-3.0 * a + 3.0) + 3.0) + 1.0) / 6.0; }\nvec2 w3(vec2 a) { return (a * a * a) / 6.0; }\nvec4 texture_bicubic(sampler2D tex, vec2 uv) {\n    vec2 dims = vec2(textureSize(tex, 0));\n\tuv = uv * dims + 0.5;\n\tvec2 fuv = fract(uv);\n    uv = floor(uv) - 0.5;\n\n    vec2 g0 = w0(fuv) + w1(fuv);\n    vec2 g1 = w2(fuv) + w3(fuv);\n    vec2 h00 = w1(fuv) / g0 - 1.0;\n    vec2 h11 = w3(fuv) / g1 + 1.0;\n    vec2 h10 = vec2(h11.x, h00.y);\n    vec2 h01 = vec2(h00.x, h11.y);\n\n    vec2 s = 1.0 / dims;\n    return ((texture(tex, (uv + h00) * s) * g0.x\n           + texture(tex, (uv + h10) * s) * g1.x) * g0.y\n          + (texture(tex, (uv + h01) * s) * g0.x\n           + texture(tex, (uv + h11) * s) * g1.x) * g1.y);\n}\n\n\nvec4 texture_biquadratic(sampler2D ch, vec2 q) {\n    ivec2 r = textureSize(ch, 0);\n    q *= vec2(r);\n    vec2 p = floor(q),\n        f = q - p,\n        e = 1. - f;\n    ivec2 j = ivec2(p);\n    vec4 d;\n    for (int c = 0; c < 9; ++c) {\n        ivec2 k = ivec2(c % 3, c / 3) - 1;\n        float m = .25;\n        switch (k.x) {\n            case -1: m *=    e.x*e.x;      break;\n            case  0: m *= 2.*e.x*f.x + 1.; break;\n            case  1: m *=    f.x*f.x;      break;\n        }\n        switch (k.y) {\n            case -1: m *=    e.y*e.y;      break;\n            case  0: m *= 2.*e.y*f.y + 1.; break;\n            case  1: m *=    f.y*f.y;      break;\n        }\n        d += m * texelFetch(ch, j + k, 0);\n    }\n    return d;\n}\n\nfloat gaussian(vec2 uv) {\n    float r = dot(uv, uv);\n    return exp(-r*.8);\n}\n\nvec4 texture_gaussian(sampler2D tex, vec2 uv) {\n    const int radius = 3;\n    uv = uv * vec2(textureSize(tex, 0)) - .5;\n    ivec2 iuv = ivec2(round(uv));\n    uv -= vec2(iuv);\n    vec4 sum = vec4(0);\n    float div = 0.0;\n    for (int y = -radius; y <= radius; ++y) {\n        for (int x = -radius; x <= radius; ++x) {\n            ivec2 o = ivec2(x, y);\n            float w = gaussian(vec2(o) - uv);\n            sum += w * texelFetch(tex, o + iuv, 0);\n            div += w;\n        }\n    }\n    return sum / div;\n}\n\n\n#define _space 32,\n#define _bang 33,\n#define _quote 34,\n#define _hash 35,\n#define _dollar 36,\n#define _percent 37,\n#define _ampersand 38,\n#define _apostrophe 39,\n#define _lround 40,\n#define _rround 41,\n#define _asterisk 42,\n#define _plus 43,\n#define _comma 44,\n#define _minus 45,\n#define _period 46,\n#define _slash 47,\n#define _0 48,\n#define _1 49,\n#define _2 50,\n#define _3 51,\n#define _4 52,\n#define _5 53,\n#define _6 54,\n#define _7 55,\n#define _8 56,\n#define _9 57,\n#define _colon 58,\n#define _semicolon 59,\n#define _less 60,\n#define _equal 61,\n#define _greater 62,\n#define _question 63,\n#define _at 64,\n#define _A 65,\n#define _B 66,\n#define _C 67,\n#define _D 68,\n#define _E 69,\n#define _F 70,\n#define _G 71,\n#define _H 72,\n#define _I 73,\n#define _J 74,\n#define _K 75,\n#define _L 76,\n#define _M 77,\n#define _N 78,\n#define _O 79,\n#define _P 80,\n#define _Q 81,\n#define _R 82,\n#define _S 83,\n#define _T 84,\n#define _U 85,\n#define _V 86,\n#define _W 87,\n#define _X 88,\n#define _Y 89,\n#define _Z 90,\n#define _lsquare 91,\n#define _backslash 92,\n#define _rsquare 93,\n#define _carat 94,\n#define _underscore 95,\n#define _grave 96,\n#define _a 97,\n#define _b 98,\n#define _c 99,\n#define _d 100,\n#define _e 101,\n#define _f 102,\n#define _g 103,\n#define _h 104,\n#define _i 105,\n#define _j 106,\n#define _k 107,\n#define _l 108,\n#define _m 109,\n#define _n 110,\n#define _o 111,\n#define _p 112,\n#define _q 113,\n#define _r 114,\n#define _s 115,\n#define _t 116,\n#define _u 117,\n#define _v 118,\n#define _w 119,\n#define _x 120,\n#define _y 121,\n#define _z 122,\n#define _lcurly 123,\n#define _pipe 124,\n#define _rcurly 125,\n#define _tilde 126,\n\n\n#define STRING(x) int[]x\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}