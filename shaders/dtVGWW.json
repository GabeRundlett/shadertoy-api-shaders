{
    "Shader": {
        "info": {
            "date": "1684076557",
            "description": "Generates Voronoi noise for a game project. Will probably be used for games.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtVGWW",
            "likes": 1,
            "name": "Personal Voronoi Generator",
            "published": 3,
            "tags": [
                "voronoi",
                "noise",
                "cells",
                "generator"
            ],
            "usePreview": 0,
            "username": "RoboticWater",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(.0);\n\n    float scale = 10.;\n\n    // Scale\n    st *= scale;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 1.;  // minimum distance\n    vec2 m_neighbor = vec2(0,0);\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 test = vec2(mod(i_st.x + neighbor.x, scale), mod(i_st.y + neighbor.y, scale));\n            vec2 point = random2(test);\n\n\t\t\t// Animate the point\n            // point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            m_neighbor = m_dist <= dist ? m_neighbor : point;\n            m_dist = min(m_dist, dist);\n        }\n    }\n\n    // Draw the min distance (distance field)\n    //color += m_dist;\n\n    // Draw cell center\n    // color += 1.-step(.02, m_dist);\n\n    // Draw grid\n    //color.r += step(.98, f_st.x) + step(.98, f_st.y);\n\n    // Show isolines\n    // color -= step(.7,abs(sin(27.0*m_dist)))*.5;\n    //float c = random2( m_neighbor ).x;\n    float c = m_dist;\n\n    fragColor = vec4(c, c, c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}