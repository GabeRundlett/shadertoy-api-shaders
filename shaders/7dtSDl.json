{
    "Shader": {
        "info": {
            "date": "1634281726",
            "description": "Arbitrarily big box blur kernels in O(1) by precomputing a summed-area table",
            "flags": 32,
            "hasliked": 0,
            "id": "7dtSDl",
            "likes": 10,
            "name": "SAT + giant box blur kernels",
            "published": 3,
            "tags": [
                "blur",
                "kernel",
                "sat"
            ],
            "usePreview": 1,
            "username": "paniq",
            "viewed": 614
        },
        "renderpass": [
            {
                "code": "\nconst float tau = 6.283185;\n\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    vec2 pw = 1.0 / iChannelResolution[0].xy;\n    vec2 uv = fragCoord * pw;\n    vec2 rb = (uv * 2.0 - 1.0) * vec2(iResolution.x / iResolution.y, 1.0);    \n    float R = mix(1.0,24.0,cos(length(rb) * tau - iTime)*0.5+0.5);\n    pw *= R;\n    float v = 4.0*R*R;\n#if 1\n    vec4 p00 = texture(iChannel0, uv + vec2(-pw.x,-pw.y));\n    vec4 p10 = texture(iChannel0, uv + vec2( pw.x,-pw.y));\n    vec4 p01 = texture(iChannel0, uv + vec2(-pw.x, pw.y));\n    vec4 p11 = texture(iChannel0, uv + vec2( pw.x, pw.y));\n    \n    fragColor = (p11 - p10 - p01 + p00) / v;\n    fragColor = fragColor * dc_scale + dc_offset;\n#else    \n    float r = texture(iChannel0, uv).r;\n    fragColor = vec4(hue(r) * mix(0.5, 1.0, 0.5 + 0.5*sign(r)),1.0);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = iFrame;\n    if (frame < 60) { // input; we give it a second so the viewer has a chance to change to fullscreen ;)\n        vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n        uv.x *= iResolution.x / iResolution.y;\n        fragColor = texture(iChannel1, (uv*0.5*vec2(1.0, 16.0 / 9.0))*0.5 + 0.5);\n        // box bokeh demo\n        fragColor += 10.0*max(1.0 - length(uv - vec2(0.55, 0.0))*50.0, 0.0);\n        // DC offset correction, causing integral to become non-monotonic\n        fragColor = (fragColor - dc_offset) / dc_scale;\n    } else {\n        frame -= 60;\n        ivec2 fc = ivec2(fragCoord);\n        vec4 d = texelFetch(iChannel0, fc + ivec2( 0, 0), 0);\n        fragColor = d; // as-is\n        if (frame < 12) {\n            // sum horizontally via jump flooding\n            int S = 1 << frame;\n            int x = fc.x - S;\n            if (x >= 0) {\n                vec4 b = texelFetch(iChannel0, ivec2(x, fc.y), 0);\n                fragColor += b;\n            }\n        } else if (frame < 24) {\n            // sum vertically via jump flooding\n            int S = 1 << (frame - 12);\n            int y = fc.y - S;\n            if (y >= 0) {\n                vec4 b = texelFetch(iChannel0, ivec2(fc.x, y), 0);\n                fragColor += b;\n            }            \n        }\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float dc_offset = 0.6;\n\nconst float dc_scale = 100000.0;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}