{
    "Shader": {
        "info": {
            "date": "1474715515",
            "description": "sadas",
            "flags": 0,
            "hasliked": 0,
            "id": "4tKGDD",
            "likes": 2,
            "name": "Crystal Form",
            "published": 3,
            "tags": [
                "fasdf"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 596
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co ,vec2(12.9898,78.233))) * 43758.5453);\n}\n//float time = iTime;\n#define time iTime\n//Noise\nfloat noise(float p){\n    float fl = floor(p);\n  float fc = fract(p);\n    return float(mix(rand(vec2(fl)), rand(vec2(fl + 1.0)), fc));\n}\n//Noise 2\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nvec4 box(vec3 p, float w){\n    p = abs(p);\n    float dx = p.x-w;\n    float dy = p.y-w;\n    float dz = p.z-w;\n    float m = max(p.x-w, max(p.y-w, p.z-w));\n    return vec4(m,dx,dy,dz);\n}\nmat3 rotateX(float a){\n    return mat3(1.,0.,0.,\n                0.,cos(a), -sin(a),\n                0.,sin(a), cos(a));\n}\n\nmat3 rotateY(float a){\n    return mat3(cos(a), 0., -sin(a),\n                0.,1.,0.,\n                sin(a), 0., cos(a));\n}\n\nmat3 doRot()\n{\n    return rotateX((time)*1.9)*rotateY((time)*1.4);\n}\nvec4 map(vec3 p){\n    for (int i = 0; i < 5; i++){\n        p = abs(p*doRot() + vec3(0.1, .0, .0));\n        p.y -= .8;\n        p.x -= .06;\n        p.z -= sin(time*80.)*.1*pow((1.-fract(time)),4.);\n        p.xy = p.yx;\n    }\n    return box(p, .7);\n}\nvec3 normal(vec3 pos)\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 t = normal(rd);\n    vec3 fog = 1.0/(1.0+t*t*noise(t.xy));\n    vec3 fc = vec3(fog);\n\tfragColor = vec4(fc*noise(fc.xy), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}