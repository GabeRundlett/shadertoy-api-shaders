{
    "Shader": {
        "info": {
            "date": "1618904757",
            "description": "Wanted to make something with reflections, I think it turned out ok.",
            "flags": 0,
            "hasliked": 0,
            "id": "fssXzj",
            "likes": 19,
            "name": "Molten Neon",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "glow",
                "vaporwave",
                "relfections"
            ],
            "usePreview": 1,
            "username": "Tater",
            "viewed": 624
        },
        "renderpass": [
            {
                "code": "#define MDIST 120.0\n#define STEPS 164.0\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define sat(a) clamp(a,0.0,1.0)\n#define pi 3.141592\nvec3 col3 (vec3 col,float index){\n    if(index==1.0)col.rg=1.0-col.rg;\n    if(index==2.0)col.gb=1.0-col.gb;\n    return col;\n}\nfloat timeRemap2 (float t, float s1, float s2, float c){\n    return 0.5*((s1-s2)*sqrt(c*c+1.0)*asin((c*cos(pi*t))/ sqrt(c*c+1.0))+(s1+s2)*c*t*pi)/(c*pi);\n}\nfloat SU( float d1, float d2, float k ) {\n    float h = sat( 0.5 + 0.5*(d2-d1)/k);    \n    return mix( d2, d1, h ) - k*h*(1.0-h);   \n} \nfloat box( vec3 p, vec3 b ){\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) -0.3;\n}\nvec3 glw = vec3(0);\nfloat map2(vec3 p){\n    float a = length(p-vec3(0,sin(iTime)*4.0,0))-1.5;\n    glw +=(0.01/(0.01+a*a))*vec3(0.867,0.000,0.259);\n    float b = box(p,vec3(0.6,15.5,0.5))*0.9;\n    a = min(a,b);\n    return a;\n}\nfloat map(vec3 p){\n    vec3 np = p;\n    float t = mod(iTime+7.2,200.0);\n    float anim = smoothstep(-.2,.2,sin(t*0.5));\n    \n    \n    float s1 = 8.5;\n    float s2 = 1.0;\n    t = timeRemap2(t/(2.0*pi),s1,s2,10.0);//amazing\n    \n    np.xy*=rot(mod(t,2.0*pi+pi)*anim*0.2);\n    \n    float modd = 55.0+anim*400.0;//Banish the extra versions when it expands\n    \n    //vec2 id = abs(floor((p.xz+modd/2.0)/modd));\n    \n    np.xz = mod(np.xz+0.5*modd,modd)-0.5*modd;\n    np = abs(np)-vec3(0,0,anim*30.0);\n    np.x = abs(np.x)-(20.0*anim);\n    \n    np*=1.0-anim*0.3;\n    \n    t = floor(t)+pow(fract(t),2.0-anim*1.0);\n    for(int i = 0; i< 5; i++){\n        np = abs(np)-vec3(1.5+4.5*anim);\n        np.xy*=rot(0.3+t*0.7*1.1);\n        np.zy*=rot(0.5+t*0.7*1.1);\n    }\n    \n    float a = map2(np);\n    float b = p.y+3.0;\n    a = SU(a,b,1.0);\n    \n    b = length(p-vec3(0,-4.5+anim*10.0,0))-9.0;\n    glw +=0.01/(0.01+b*b)*vec3(0.035,0.690,0.000);\n    \n    a = SU(a,b,1.0);\n    float cir = 35.0;\n    t=0.5*iTime;\n    \n    vec3 ro = vec3(cir*sin(t),4.0+sin(t),cir*cos(t));\n    float camHole = length(p-ro)-5.0;\n    a = max(-camHole*0.8,a);\n    \n    return a;\n}\n\nvec3 norm(vec3 p) {\n    vec2 off=vec2(0.01,0);\n    return normalize(map(p)-vec3(map(p-off.xyy),map(p-off.yxy),map(p-off.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    float t = iTime*0.5;\n    float cir = 35.0;\n    vec3 ro = vec3(cir*sin(t),4.0+sin(t),cir*cos(t));\n    vec3 ro2 = ro;\n    vec3 look = vec3(0,0,0); float z = 0.7;\n    vec3 f = normalize(look-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = f*z+uv.x*r+uv.y*cross(f,r);\n        \n    float dO = 0.0;\n    float shad = 1.0;\n    float bnc = 0.0;\n    float dist = 0.0;\n    float dO2 = 0.;\n    vec3 p = vec3(0);\n    for(float i = 0.0; i<STEPS; i++){\n        p = ro + rd * dO;\n        float d = map(p)*0.9;\n        dO += d;\n        dO2 +=d;\n        if(dO2>MDIST || d < 0.01) {\n            shad = float(i)/(STEPS);\n            if(bnc == 0.0)dist=dO;\n            if(bnc == 1.0)break;\n            ro += rd*dO;\n            vec3 sn = norm(ro);\n            rd = reflect(rd,sn);\n            ro +=  sn*0.1;\n            dO = 0.0;\n            i=0.0;\n            bnc++;\n        }\n    }\n    col = vec3(shad)*mix(vec3(0.082,0.941,0.902),vec3(0.557,0.067,1.000),sin(dO*0.01))*4.0;\n    \n    col = mix(col,\n    mix(vec3(0.000,0.318,0.910),vec3(0.141,0.114,0.514),clamp(uv.y*2.0,0.,1.))\n    ,sat(dist/MDIST)*sat(dist/MDIST));\n    col+=glw*0.11*(1.0-sat(dist/(MDIST)));\n    col=pow(col,vec3(0.75));\n    float index = floor(mod(t*0.7,3.0));\n    //col = col3(col,index); //Uncomment for color swaps\n    //col.rb*=rot(sin(t*0.25+pi)*0.5+0.4); //actually this one is better :)\n    fragColor = vec4(col,0.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}