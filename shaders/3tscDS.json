{
    "Shader": {
        "info": {
            "date": "1594930002",
            "description": "Dipping my toes in fluid simulation.\nPress space to view velocity and pressure\n\nThis is a deconstruction of a deconstruction by spalmer of a shader by wyatt\nspalmer: https://www.shadertoy.com/view/wtlcWr\nwyatt: https://www.shadertoy.com/view/ws2fDc",
            "flags": 48,
            "hasliked": 0,
            "id": "3tscDS",
            "likes": 22,
            "name": "2D Fluid Movement",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 1169
        },
        "renderpass": [
            {
                "code": "// Buffers A B and C make up our fluid feedback loop\n// Buffer D mimics colors leaking through the fluid using the velocity and pressure data calculated in our fluid simulation\n\nvoid mainImage(out vec4 c,vec2 f) {c=texelFetch( iChannel2, ivec2(32,0),0).x>0.?.25+T1(f).xywz:T0(f);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//deconstructing a deconstruction by spalmer of a shader by wyatt\n//https://www.shadertoy.com/view/wtlcWr\n//https://www.shadertoy.com/view/ws2fDc\n\n//access to ires in common buffer\n#define R iResolution.xy\n\n#define decay .999\n\n//easily access the textures\n#define T0(U) texture(iChannel0, U/R)\n#define T1(U) texture(iChannel1, U/R)\n\n#define Sampler0 vec4 S0(vec2 U) { return T0(U); }\n#define Sampler1 vec4 S1(vec2 U) { return T1(U); }\n\n//wrap the space (useful when sampling)\n#define A(U) T0(mod(U,R))\n\n\n//define jet movement, velocity and positions\n#define Jet0Pos(U) vec2(i*-2.0,-.4+abs(i)*2.0)\n\n#define Jet1Pos(U) vec2(sin(U)/1.5,cos(U)/1.5)\n\n#define Jet0Fwd (vec2(-2.5*i,.5-abs(i)))\n#define Jet1Fwd vec2(0,-.25)\n\n#define isJet0 length(uv-Jet0Pos(0.)) < .01\n\n#define isJet1 length(uv-Jet1Pos(0.)) < .025\n\n#define jetFor for(float i=-.20;i<.25;i+=.1)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//defines a sampler function that returns a value from the texture easily\nSampler0\n\nvoid Fluid(vec2 coordinates, vec2 offset, vec4 values, inout vec2 velocity, inout float pressure, inout float divergence, inout float neighbors)\n{\n    // Sample buffer C, which samples B, which samples A, making our feedback loop\n    vec4 s = S0(coordinates+offset);\n    offset = normalize(offset);\n    \n    // gradient of pressure from the neighboring cell to ours\n    float sampledPressure = s.w;\n    float currentPressure = values.w;\n    \n    //add the velocity scaled by the pressure that its exerting\n    velocity += offset*(sampledPressure-currentPressure);\n    \n    // add pressure\n    pressure += sampledPressure;\n    \n    // divergence of velocity\n    divergence += dot(offset,s.xy);\n    \n    //increase number of neighbors sampled\n    neighbors++;\n}\n\nvoid mainImage(out vec4 values, vec2 coordinates)\n{    \n    //sample from the previous state\n    values = S0(coordinates-A(coordinates).xy);\n    \n    vec2 velocity = vec2(0);\n    float divergence = 0.;\n    float pressure = 0., neighbors = 0.;\n\n    Fluid(coordinates, vec2(0, 1), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2(0,-1), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2( 1,0), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2(-1,0), values, velocity, pressure, divergence, neighbors);\n\n    //average the samples\n    velocity /= neighbors;\n    divergence /= neighbors;\n    pressure /= neighbors;\n\n    //output pressure in w, velocity in xy\n    values.w = pressure - divergence;\n    values.xy -= velocity;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Sampler0\n    \nvoid Fluid(vec2 coordinates, vec2 offset, vec4 values, inout vec2 velocity, inout float pressure, inout float divergence, inout float neighbors)\n{\n    // Sample buffer\n    vec4 s = S0(coordinates+offset-A(coordinates+offset).xy);\n    offset = normalize(offset);\n    \n    // gradient of pressure from the neighboring cell to ours\n    float sampledPressure = s.w;\n    float currentPressure = values.w;\n    \n    //add the velocity scaled by the pressure that its exerting\n    velocity += offset*(sampledPressure-currentPressure);\n    \n    // add pressure\n    pressure += sampledPressure;\n    \n    // divergence of velocity\n    divergence += dot(offset,s.xy);\n    \n    //increase number of neighbors sampled\n    neighbors++;\n}\n\nvoid mainImage(out vec4 values, vec2 coordinates)\n{    \n    //sample from the previous state\n    values = S0(coordinates-A(coordinates).xy);\n    \n    vec2 velocity = vec2(0);\n    float divergence = 0.;\n    float pressure = 0., neighbors = 0.;\n\n    Fluid(coordinates, vec2(0, 1), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2(0,-1), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2( 1,0), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2(-1,0), values, velocity, pressure, divergence, neighbors);\n\n    //average the samples\n    velocity /= neighbors;\n    divergence /= neighbors;\n    pressure /= neighbors;\n\n    //output pressure in w, velocity in xy\n    values.w = pressure - divergence;\n    values.xy -= velocity;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Sampler0\n\nvoid Fluid(vec2 coordinates, vec2 offset, vec4 values, inout vec2 velocity, inout float pressure, inout float divergence, inout float neighbors)\n{\n    // Sample buffer\n    vec4 s = S0(coordinates+offset-A(coordinates+offset).xy);\n    offset = normalize(offset);\n    \n    // gradient of pressure from the neighboring cell to ours\n    float sampledPressure = s.w;\n    float currentPressure = values.w;\n    \n    //add the velocity scaled by the pressure that its exerting\n    velocity += offset*(sampledPressure-currentPressure);\n    \n    // add pressure\n    pressure += sampledPressure;\n    \n    // divergence of velocity\n    divergence += dot(offset,s.xy);\n    \n    //increase number of neighbors sampled\n    neighbors++;\n}\n\nvoid mainImage(out vec4 values, vec2 coordinates)\n{\n    \n\tvec2 uv = (2.*coordinates-R)/iResolution.y;;\n    \n    //sample from the previous state\n    values = S0(coordinates-A(coordinates).xy);\n    \n    vec2 velocity = vec2(0);\n    float divergence = 0.;\n    float pressure = 0., neighbors = 0.;\n\n    Fluid(coordinates, vec2(0, 1), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2(0,-1), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2( 1,0), values, velocity, pressure, divergence, neighbors);\n    Fluid(coordinates, vec2(-1,0), values, velocity, pressure, divergence, neighbors);\n\n    //average the samples\n    velocity /= neighbors;\n    divergence /= neighbors;\n    pressure /= neighbors;\n\n    //output pressure in w, velocity in xy\n    values.w = pressure - divergence;\n    values.xy -= velocity;\n    \n    //set the velocity of certain areas to positive    \n    jetFor\n    if (isJet0)  {\n        values.xy = Jet0Fwd;\n    }\n    \n    if (isJet1) {\n        values.xy = Jet1Fwd*2.0;\n    }\n    \n    values*=decay;\n\n    if (coordinates.x<1.||coordinates.y<1.||R.x-coordinates.x<1.||R.y-coordinates.y<1.) values.xy *= 0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Sampler0\nSampler1\n    \nvoid mainImage(out vec4 values, vec2 coord)\n{\n\tvec2 p = (coord), uv = (2.*coord-R)/R.y;\n    \n    //p is the coordinate we are currently on\n\t//move the opposite direction of it's velocity\n    //sample the pixel at that position, meaning it moves towards us by our velocity\n    //the more we do it the faster our fluid will spread\n    //mimicing viscosity or something\n    \n    for(int i=0;i<4;i++)\n    p -= S1(p).xy;\n \n    values = S0(p);\n\n\tjetFor\n    if (isJet0) {\n    \tvalues = .5+.5*sin(.1*iTime+vec4(4,3,2,1))*sin(i*2.0)*vec4(4,2,3,4);\n    }\n    \n    \n    if (isJet1) {\n    \tvalues = .5+.5*sin(iTime*.5+vec4(2.,3,1,1));\n    }\n    \n    values*=decay;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}