{
    "Shader": {
        "info": {
            "date": "1457533772",
            "description": "Fairly simple pattern generator using overlaid checkers/diagonal checkers.",
            "flags": 8,
            "hasliked": 0,
            "id": "4scXz8",
            "likes": 42,
            "name": "Navajo",
            "published": 3,
            "tags": [
                "pattern",
                "navajo"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 1910
        },
        "renderpass": [
            {
                "code": "// Simple 2d noise algorithm contributed by Trisomie21 (Thanks!)\nfloat noise2D( vec2 p ) {\n\tvec2 f = fract(p);\n\tp = floor(p);\n\tfloat v = p.x+p.y*1000.0;\n\tvec4 r = vec4(v, v+1.0, v+1000.0, v+1001.0);\n\tr = fract(100000.0*sin(r*.001));\n\tf = f*f*(3.0-2.0*f);\n\treturn 2.0*(mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y))-1.0;\n}\n\nfloat Pattern(vec2 p, vec4 s, float b){//s=scale and b=offset\n\tp=abs(p);//typical rug reflection\n\tp.y+=floor(2.0*fract(p.x))*b; //brick offset\n\tvec2 c=fract(vec2(p.x+p.y,p.x-p.y)*s.zw)-0.5; //diamond repeat\n\tp=fract(p*s.xy)-0.5; //square repeat\n\treturn step(p.x*p.y,0.0)+step(c.x*c.y,0.0); //overlaid checkers\n}\n\nfloat rnd=0.0;\nfloat rand(){return fract(sin(rnd+=2.0)*324.234);}\nfloat irnd(int i){return floor(rand()*float(i));}\nvoid mainImage(out vec4 O, in vec2 U) {\n\tvec2 uv=U/iResolution.xy-0.5;\n\tuv*=3.0;\n\trnd=floor(iTime);\n\tvec4 s=vec4(irnd(3),irnd(3),irnd(3),irnd(3))/(vec4(irnd(4),irnd(4),irnd(4),irnd(4))+1.0);\n\tfloat b=irnd(3)/(1.0+irnd(4));\n\tfloat d=(Pattern(uv,s,b)+Pattern(uv*3.0,s,b))*0.4;\n\tvec2 g=vec2(370.0,8.8);\n\tfloat n=noise2D(uv*g)+noise2D(uv*g.yx);\n\tvec3 col=max(cos(vec3(d,d+1.0,d+2.0)),0.1)*(1.0+0.3*n);\n\tO=vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\nfloat Saw(float t,float s){s*=0.5;return smoothstep(0.0,s,fract(t))*smoothstep(1.0,s,fract(t))*2.0-1.0;}\nfloat Sin(float t){return sin(t*PI);}\nfloat Square(float t,float s){s*=0.25;return smoothstep(0.25-s,0.25+s,fract(t))*smoothstep(0.75+s,0.75-s,fract(t))*2.0-1.0;}\nfloat Env(float t,float s){s*=0.5;return smoothstep(0.0,s,t)*smoothstep(1.0,s,t);}\nfloat rand(float t){return fract(sin(mod(t,4321.123)*4321.123)*4321.123);}\nfloat noise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f);}\nfloat snoise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f*f*(3.0-2.0*f));}\n\nfloat tamb(float t, float o, float n){\n\tfloat bt=fract(fract(t-o)*1.5);\n\tfloat f=t*3500.0+bt*75.0*n-noise(bt*75.0*(1.0-0.9*bt))*7.0;\n\tfloat a2=Square(f,bt);\n\treturn a2*Env(bt*(2.0+2.0*n),0.01)*Sin(1.0/(0.02+2.0*bt*bt));\n}\nvec2 mainSound( in int samp,float time){\n\tfloat bt=fract(time*2.0);\n\tfloat f=time*60.0+snoise(floor(time)+bt*40.0*(1.0-0.2*bt))*0.5;\n\tfloat a=Saw(f,Env(bt,1.0)*(0.66+sin(time*0.7)*0.33))+Square(f,Env(bt,1.0)*(0.66+sin(time*0.3)*0.33));\n\ta*=Env(bt,0.3);\n\tfloat n=rand(floor(time)*0.1);\n\tfloat a2=tamb(time,0.1,n)*0.08+tamb(time,0.025+n*0.075,1.0-n)*0.03;\n\ta+=a2;\n\t\n\ta=clamp(a*0.25,-1.0,1.0);\n\treturn vec2(a);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}