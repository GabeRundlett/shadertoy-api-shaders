{
    "Shader": {
        "info": {
            "date": "1517768643",
            "description": "This is the snub tessellation that [url]https://www.shadertoy.com/view/XlBBWG[/url] is the dual of.\n\nMouse selects region point, drag to left and release to restart animation.\n \n'd': show edges of dual\n'r': show fundamental region\n'u': show uniform tiling",
            "flags": 16,
            "hasliked": 0,
            "id": "XdtyRn",
            "likes": 17,
            "name": "Snub Quadrille",
            "published": 3,
            "tags": [
                "tessellation",
                "wythoff",
                "snub",
                "quadrille"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 902
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Created by Matthew Arcus, 2018\n// Wythoff construction for snub quadrille tessellation.\n// This is what https://www.shadertoy.com/view/XlBBWG is dual of\n//\n// Fold down to square fundamental region. Draw lines to \"Wythoff point\".\n//\n// 'f' removes tile frame\n// 'd' shows dual tessellation edges\n// 'r' shows square fundamental region\n// 'u' show uniform tiling\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.141592654;\nconst float TWOPI = 2.0*PI;\n\nvec2 perp(vec2 r) {\n  return vec2(-r.y,r.x);\n}\n\nint imod(int n, int m) {\n  int k = n - n/m*m;\n  if (k < 0) return k+m;\n  else return k;\n}\n\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_R = 82;\nconst int CHAR_U = 85;\n\nbool keypress(int key) {\n    return texelFetch(iChannel0, ivec2(key,2),0).x != 0.0;\n}\n\nvec3 getcol0(int i) {\n  if (i == 0) return vec3(1,0,0);\n  if (i == 1) return vec3(0,0,1);\n  if (i == 2) return vec3(0,1,0);\n  if (i == 3) return vec3(1,1,0);\n  if (i == 4) return vec3(1,0,1);\n  if (i == 5) return vec3(0,1,1);\n  if (i == 6) return vec3(1,1,1);\n  return vec3(1,1,1);\n}\n\nvec3 getcol(int i) {\n  return 0.25+0.75*getcol0(i);\n}\n\n// segment function by FabriceNeyret2\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float scale = 2.3;\n  float lwidth = 0.015;\n  // Half the width of the AA line edge\n  float awidth = 1.5*scale/iResolution.y;\n  vec2 q,p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n  p *= scale;\n  // q is the \"Wythoff point\", ie. the position of the\n  // vertex in the fundamental region (only even regions\n  // contain a point).\n  if (keypress(CHAR_U)) {\n    q = vec2(0.64,0.36); // For a uniform tiling\n    float t = 0.5+0.5*cos(iTime);\n    q = vec2(t,1.0-t);\n  } else if (iMouse.x > 5.0) {\n    q = (iMouse.xy-25.0)/(iResolution.xy-50.0);\n    q = clamp(q,0.0,1.0);\n  } else {\n    float r = cos(0.1*iTime);\n    float t = iTime;\n    q = r*vec2(sin(t),cos(t));\n    q *= min(1.0/abs(sin(t)),1.0/abs(cos(t)));\n    q = 0.5*(q+1.0);\n  }\n\n  // Symmetry operations\n  p = mod(p,2.0)-1.0; // Fold down to Â±1 square\n  bool parity = (p.y < 0.0) != (p.x < 0.0); // Need reflection?\n  int quad = 2*int(p.x < 0.0) + int(parity); // Quadrant\n  p = abs(p);\n  if (parity) p.xy = p.yx;\n\n  // q0,q1,q2 are reflections of q in sides of fundamental region\n  // ie. the vertices of the snub triangle.\n  vec2 q0 = q.yx;\n  vec2 q1 = vec2(2.0-q.x,q.y);\n  vec2 q2 = vec2(q.x,-q.y);\n  \n  // q3,q4,q5 are further reflections\n  vec2 q3 = vec2(-q.x,q.y);\n  vec2 q4 = vec2(-q.y,2.0-q.x);\n  vec2 q5 = vec2(q.x,2.0-q.y);\n\n  // Work out what color the point should be\n  bool l1 = dot(p-q0,perp(q1-q0)) <= 0.0;\n  bool l2 = dot(p-q0,perp(q2-q0)) <= 0.0;\n  bool l3 = dot(p-q0,perp(q3-q0)) <= 0.0;\n  bool l4 = dot(p-q0,perp(q4-q0)) <= 0.0;\n  bool l5 = dot(p-q0,perp(q5-q0)) <= 0.0;\n\n  int colindex = 0;\n  vec3 col = vec3(1);\n\n  //if (l2 && !l3) colindex = 0;\n  if (l3 && !l4) colindex = imod(quad-1,4)/2+2;\n  if (l4 && !l5) colindex = imod(quad+1,4)/2+2;\n  if (l5 && !l1) colindex = 1;\n  if (l1 && !l2) colindex = quad/2+2;\n  col = getcol(colindex);\n\n  if (!keypress(CHAR_F)) {\n    float d = 1e8;\n    d = min(segment(p,q0,q1),segment(p,q0,q2));\n    d = min(d,segment(p,q0,q3));\n    d = min(d,segment(p,q0,q4));\n    d = min(d,segment(p,q0,q5));\n    d = min(d,segment(p,q1,q2));\n    col = mix(vec3(0),col,smoothstep(lwidth-awidth,lwidth+awidth,d));\n  }\n\n  if (!keypress(CHAR_D)) {\n    // Lines from square centre to triangle (bary)centre.\n    vec2 c = (q0+q1+q2)/3.0;\n    float d = 1e8;\n    d = min(d,segment(p,vec2(0,0),c));\n    d = min(d,segment(p,vec2(1,0),c));\n    d = min(d,segment(p,vec2(1,1),c));\n    d = min(d,segment(p,vec2(-c.y,c.x),vec2(c.y,-c.x)));\n    d = min(d,segment(p,vec2(-c.y,c.x),vec2(c.y,2.0-c.x)));\n    d = min(d,segment(p,vec2(2.0-c.y,c.x),vec2(c.y,2.0-c.x)));\n    col = mix(vec3(0.3),col,smoothstep(0.5*lwidth-awidth,0.5*lwidth+awidth,d));\n  }\n\n  if (keypress(CHAR_R)) {\n    // Show the square regions\n    vec2 p1 = min(p,1.0-p);\n    float d = min(p1.x,p1.y);\n    col = mix(vec3(0.8),col,smoothstep(0.5*lwidth-awidth,0.5*lwidth+awidth,d));\n  }\n  fragColor = vec4(sqrt(col),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}