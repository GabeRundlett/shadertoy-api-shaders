{
    "Shader": {
        "info": {
            "date": "1511200189",
            "description": "See https://twitter.com/inversed_ru/status/932630822494130176",
            "flags": 32,
            "hasliked": 0,
            "id": "4tlfzN",
            "likes": 1,
            "name": "Arnold's cat map",
            "published": 3,
            "tags": [
                "arnoldcatmap"
            ],
            "usePreview": 0,
            "username": "Kchplr",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "// see Buf A for relevant code\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 reso = iResolution.yy; // need square size\n    \n    if (iFrame < 32) {\n        // initial frames display the original texture\n    \tvec2 uv = fragCoord.xy / reso;\n    \tfragColor = texture(iChannel1, uv);\n    } else if (mod(float(iFrame), 16.) > 0.) {\n        // repeat the same frame 15 times (for humans)\n    \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \tfragColor = texture(iChannel0, uv);\n    } else {\n        // apply Arnold's cat map (see https://twitter.com/inversed_ru/status/932630822494130176 )\n    \tvec2 uv = mod(vec2(fragCoord.x * 2. + fragCoord.y, fragCoord.x + fragCoord.y), reso); \n    \tfragColor = texelFetch(iChannel0, ivec2(uv), 0);\n        // texelFetch is used to get the exact pixel without any risk of bilinear interpolation\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}