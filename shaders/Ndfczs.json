{
    "Shader": {
        "info": {
            "date": "1728024334",
            "description": "1st Pass (Buffer A): Draw: 2D geometry\n2nd Pass (Buffer B): PostFx: Dot Matrix (Display)\n3rd Pass (Buffer C): PostFx: Chromatic Aberration / Vignette / etc...\nBy setting the video to iChannel0 of Buffer B, you can Apply Dot Matrix effects to the video :)",
            "flags": 32,
            "hasliked": 0,
            "id": "Ndfczs",
            "likes": 6,
            "name": "DottaMatrixa",
            "published": 3,
            "tags": [
                "2d",
                "postprocessing",
                "ifs",
                "fold"
            ],
            "usePreview": 0,
            "username": "rogo1965",
            "viewed": 65
        },
        "renderpass": [
            {
                "code": "//#define DEBUG_NO_POSTEFFECT\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = vec3(0.0);\n    \n#ifdef DEBUG_NO_POSTEFFECT\n    col = texture(iChannel0, uv).rgb;\n#else\n    // Zoom\n    uv = uv * 2.0 - 1.0;\n    uv *= 0.9;\n    uv = (uv + 1.0) * 0.5;\n    \n    // Camera shake\n    uv += 0.02 * sin(PI2 * beat / 32. * 10.0) + 0.01 * sin(PI2 * beat / 32. * 20.0);\n    \n    // Lens distortion\n    vec2 dir = uv - vec2(0.5);\n    uv += dir * dot(dir, dir) * 0.2;\n    \n    // Chromatic aberration\n    vec2 offset = vec2(1.0, 1.0) * 0.005;\n    col.r = texture(iChannel1, uv - offset).r;\n    col.g = texture(iChannel1, uv).g;\n    col.b = texture(iChannel1, uv + offset).b;\n    \n    // Vignette\n    vec2 d = abs(uv - vec2(0.5)) * 1.6;\n    d = pow(d, vec2(2.0));\n    col.rgb *= pow(saturate(1.0 - dot(d, d)), 3.0);\n#endif\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Draw 2D geometry\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0.0);\n\n    if (between(beat, 0.0, 8.0)) {\n        int n = 1;\n        if (beat > 4.0) n += 1;\n        for(int i = 0; i < n; i++) {\n            float shift = float(i) * 0.5;\n            vec2 center = vec2(0.0);\n            float r = ease_out_quad(fract(beat + shift));\n            float d1 = sdCircle(p - center, 2.0 * r);\n            float d2 = sdCircle(p - center, 1.7 * r);\n            float d = opSubtraction(d2, d1);\n            float s = remap(beat, 4.0, 8.0, 0.2, 1.0);\n            col += hsv2rgb(vec3(0.3 * (beat + shift), s, 1.0)) * saturate(-100.0 * d);\n        }\n    }\n\n    if (between(beat, 8.0, 16.0)) {\n    \tint n = 1;\n        n += int(clamp(beat - 10.0, 0.0, 8.0));\n        for(int i = 0; i < n; i++) {\n            float shift = float(i) * 0.25;\n            vec2 center = vec2(0.0, -0.2);\n            float r = ease_out_quad(fract(beat + shift));\n            float d1 = sdTriangle(p - center, 1.8 * r);\n            float d2 = sdTriangle(p - center, 1.4 * r);\n            float d = opSubtraction(d2, d1);\n            col += hsv2rgb(vec3(0.2 * (beat + shift * (beat - 8.0)), 0.9, 1.0)) * saturate(-100.0 * d);\n        }\n    }\n    \n    if (!true) {\n        float dir = p.y > 0.0 ? 1.0 : -1.0;\n        vec2 q = opRep(p + vec2(0.3 * dir * beat, 0.0), vec2(0.25, 1.5));\n        q.x -= 0.4 *dir * abs(q.y);\n        float d = sdRect(q, vec2(0.05, 0.2));\n        float s = 1.0;\n        col += vec3(1.0) * saturate(-100.0 * d);\n    }\n    \n    if (!true) {\n        int n =  8;\n        for(int i = 0; i < n; i++) {\n            float shift = float(i) * 0.25;\n            vec2 center = hash22(vec2(floor(beat) * 14.0, shift * 123.0)) * 2.0 - 1.0;\n            float r = ease_out_quad(fract(beat + shift));\n            float d = sdRect(p - center, 0.2 * vec2(2.0, 1.0) * hash22(vec2(floor(beat) * 143.0, shift * 13.0)));\n            float s = remap(beat, 8.0, 12.0, 0.2, 1.0);\n            col += hsv2rgb(vec3(0.1 * (beat + shift), s, 1.0)) * saturate(-100.0 * d);\n        }\n    }\n    \n    if (between(beat, 16.0, 32.0)) {\n        // https://www.shadertoy.com/view/MdKfWR\n        vec2 q = (fract(p) - 0.5) * 5.0;\n        float d = 9999.0;\n        float z = PI * (beat - 16.0) / 12.0;\n        for (int i = 0; i < 5; ++i) {\n            q = abs(q) - 0.5;\n            q *= rot(0.785398);\n            q = abs(q) - 0.5;\n            q *= rot(z);\n            float k = sdRect(q, vec2(0.6, 0.1 + q.x));\n            d = min(d, k);\n        }\n        float s = remap(beat, 24.0, 32.0, 0.1, 0.8);\n        col += hsv2rgb(vec3(q.x * 4.0, s, 1.0)) * saturate(-2.0 * d);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define saturate(x) clamp(x, 0.0, 1.0)\n#define BPM 120.0\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define EPS 0.0001\n#define _beat (iTime * BPM / 60.0)\n#define beat (mod(_beat, 32.0))\n\nbool between(float x, float from, float to) {\n    return from <= x && x < to;\n}\n\n// primitives\nfloat sdCircle(vec2 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat sdRect(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return max(d.x, d.y) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdTriangle(vec2 p, float size) {\n    vec2 s = size * vec2(0.25, 0.43301270189);\n    p.y -= size * 0.14433756729;// sqrt(3) / 12\n\treturn sdRect(p, vec2(s.x - p.y * s.x / s.y, s.y));\n}\n\n// operations\nfloat opSubtraction(float d1, float d2) {\n    return max(-d1,d2);\n}\n\nvec2 opRep(vec2 p, vec2 c) {\n\treturn mod(p, c) - 0.5 * c;\n}\n\nfloat opRep(float p, float c) {\n\treturn mod(p, c) - 0.5 * c;\n}\n\nmat2 rot(float x)\n{\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\n// color\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, saturate(p - K.xxx), c.y);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// https://www.shadertoy.com/view/3tX3R4\nfloat remap(float val, float im, float ix, float om, float ox)\n{\n    return clamp(om + (val - im) * (ox - om) / (ix - im), om, ox);\n}\n\n// https://gist.github.com/mattatz/d7b8decb481947d2e37eab98aff2d0ad\n// https://neort.io/art/bj2225k3p9f9psc9ovf0?index=0&origin=my_profile\nfloat ease_in_quad(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\treturn c*(t/=d)*t + b;\n}\n\nfloat ease_out_quad(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\treturn -c *(t/=d)*(t-2.) + b;\n}\n\nfloat ease_in_out_quad(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\tif ((t/=d/2.)<1.) return c/2.*t*t + b;\n\treturn -c/2. * ((--t)*(t-2.) - 1.) + b;\n}\n\nfloat ease_in_cubic(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\treturn c*(t/=d)*t*t + b;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float roller_coaster(float x, float peak) {\n    if (x < peak) {\n        return ease_in_quad(x / peak);\n    } else {\n        return ease_in_quad(1.0 - (x - peak) / (1.0 - peak));\n    }\n}\n\n// Dot Matrix\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy) * 2.0 - 1.0;\n    \n    float ny = 1.0 + 40.0 * roller_coaster(fract(beat / 8.0), 0.8);\n    float nx = ny * iResolution.x / iResolution.y;\n    vec2 num = vec2(nx, ny);\n    \n    vec3 col;\n    vec2 uvDot = (((floor(uv * num) + 0.5) / num) + 1.0) * 0.5;\n   \tvec3 lum = texture(iChannel0, uvDot).rgb;\n    \n    vec2 uvGrid = fract(uv * num);\n    vec2 pGrid = uvGrid - 0.5;\n    col = (lum + 0.05) * 5.0 * saturate(-sdCircle(pGrid, 0.5));\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}