{
    "Shader": {
        "info": {
            "date": "1566840456",
            "description": "video filter experiment",
            "flags": 32,
            "hasliked": 0,
            "id": "tljXzt",
            "likes": 18,
            "name": "Contour Van Damme",
            "published": 3,
            "tags": [
                "videofilter"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 800
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define GR vec3(11,163,37)/255.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;        \n        \n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    vec3 s = col - GR;\n    \n    if(abs(s.r)<.1 && abs(s.g)<.1 && abs(s.b)<.1){\n    \tcol = vec3(1.);\n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define RED vec3(245,73,139)/255.\n//#define RED vec3(245,86,85)/255.\n#define BLACK vec3(32,43,51)/255.\n#define WHITE vec3(234,241,245)/255.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n            \n    vec3 col = texture(iChannel0, uv).rgb;          \n    vec3 bcol = texture(iChannel1, uv).rgb;          \n               \n    int result = 0;    \n    for(int y = -2; y<=2; y+=1){\n        for(int x = -2; x<=2; x+=1){\n            \n            vec2 c = fragCoord + vec2(x, y);            \n            vec2 ruv = c/iResolution.xy;\n            \n            vec3 pcol = texture(iChannel0, ruv).rgb;\n            if(pcol.r == 1.){\n            \tresult += 1;\n            }\n            \n        }    \n    }\n    \n    if(result >0 && result <16){\n    \tcol = WHITE;\n    } else if (result == 0) {\n        col = RED;\n    } else {        \n        col = mix(BLACK, bcol, .95);\n    }        \n    \n    fragColor = vec4(col,1.0);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}