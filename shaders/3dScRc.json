{
    "Shader": {
        "info": {
            "date": "1587033515",
            "description": "Simple raymarching scene featuring a cube, sofshadows and some nice ligthning. My very first attempt in raymarching.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dScRc",
            "likes": 12,
            "name": "Slime Cube",
            "published": 3,
            "tags": [
                "raymarching",
                "cube",
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "donnerbrenn",
            "viewed": 507
        },
        "renderpass": [
            {
                "code": "//rotate a vector... Not very happy with this huge function...\nmat3 rotateXYZ(vec3 t)\n{\n      float cx = cos(t.x);\n      float sx = sin(t.x);\n      float cy = cos(t.y);\n      float sy = sin(t.y);\n      float cz = cos(t.z);\n      float sz = sin(t.z);\n      mat3 m=mat3(\n        vec3(1, 0, 0),\n        vec3(0, cx, -sx),\n        vec3(0, sx, cx));\n\n      m*=mat3(\n        vec3(cy, 0, sy),\n        vec3(0, 1, 0),\n        vec3(-sy, 0, cy));\n\n      return m*mat3(\n        vec3(cz, -sz, 0),\n        vec3(sz, cz, 0),\n        vec3(0, 0, 1));\n}\n\n//SDF-Functions\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat softmin(float f1, float f2, float val)\n{\n      float e = max(val - abs(f1 - f2), 0.0);\n      return min(f1, f2) - e*e*0.25 / val;     \n}\n\nfloat map(vec3 p)\n{\n      vec3 rotPlane=(rotateXYZ(vec3(1.5,.0,.0))*p);\n      vec3 rotCube=(rotateXYZ(vec3(1,iTime,sin(iTime*.5)*.5))*p);\n      float myplane=sdRoundBox(rotPlane-vec3(.0,.0,1.5),vec3(20.,20,.01),.1);\n      float mycube=sdRoundBox(rotCube+vec3(0.,.5,0.),vec3(.75/2.),.1);\n      return(softmin(myplane,mycube,1.));\n}\n\n\nvec3 normal(vec3 p)\n{\n      vec2 eps=vec2(.005,0);\n      return normalize(vec3(map(p+eps.xyy)-map(p-eps.xyy),\n                            map(p+eps.yxy)-map(p-eps.yxy),\n                            map(p+eps.yyx)-map(p-eps.yyx)));\n}\n\n// LIGHT\nfloat diffuse_directional(vec3 n,vec3 l, float strength)\n{\n      return (dot(n,normalize(l))*.5+.5)*strength;\n}\n\nfloat specular_directional(vec3 n, vec3 l, vec3 v, float strength)\n{\n      vec3 r=reflect(normalize(l),n);\n      return pow(max(dot(v,r),.0),128.)*strength;\n}\n\nfloat ambient_omni(vec3 p, vec3 l)\n{\n      float d=1.-abs(length(p-l))/100.;\n      return pow(d,32.)*1.5;\n}\n\n\n\n//SHADOW\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.0001 )\n            return .0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// MAINLOOP\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv= fragCoord.xy/iResolution.xy-.5;\n    uv.x/=iResolution.y/iResolution.x;\n    vec3 ro=vec3(.0,.0,-3.5); \n    vec3 p=ro;\n    vec3 rd=normalize(vec3(uv,1.));\n    float shading=.0;\n    bool hit=false;\n\n    vec3 color;\n    while(p.z<20.)\n    {\n        float d=map(p);\n        if(d<.0001)\n        {\n            hit=true;\n            break;\n        }\n        p += rd*d;\n    }\n\n    float t=length(ro-p);\n    if (hit)\n    {\n        shading=length(p*10.);\n        vec3 n=normal(p);\n        vec3 l1=vec3(1,.5,-.25);\n        float rl=ambient_omni(p,l1)*diffuse_directional(n,l1,.5)+specular_directional(n,l1,rd,.9);\n        color=vec3(rl)+vec3(.1,.4,.1);\n        color*=color;\n        vec3 pos = ro + t*rd;\n        color=mix(vec3(.0),color,softshadow(pos,normalize(l1),.01,10.0,20.)*.25+.75);\n    }\n    color*=mix(color,vec3(1.,1.,1.),1.-exp(-.1*pow(t,128.)));\n    color-=t*.05;\n    color=sqrt(color);\n\n    fragColor=vec4(color,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}