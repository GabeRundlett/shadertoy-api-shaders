{
    "Shader": {
        "info": {
            "date": "1668210387",
            "description": "Gaussian blur implemented by randomly sampling from a gaussian distribution, instead of using a fixed width kernel.",
            "flags": 0,
            "hasliked": 0,
            "id": "dsSGD3",
            "likes": 6,
            "name": "Monte Carlo Gaussian Blur",
            "published": 3,
            "tags": [
                "blur",
                "gaussian",
                "monte",
                "carlo"
            ],
            "usePreview": 0,
            "username": "Hatchling",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "const int Quality = 16;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float blurPower = blurMask(fragCoord, iTime) * 5.0;\n    \n    uint rngState = uint\n    (\n        uint(iFrame) * uint(1973)\n    ) | uint(1);\n    \n    fragColor = vec4(0);\n    \n    for(int i = 0; i < Quality; i++)\n    {\n        fragColor += gaussianBlurSample\n        (\n            iChannel0,\n            iChannel1,\n            fragCoord,\n            blurPower-2.0,\n            max(0.0, pow(2., blurPower)-1.0),\n            rngState\n        );\n    }\n    \n    fragColor *= 1.0 / float(Quality);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// RNG\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\nvec2 uniform01ToGauss(vec2 value)\n{\n    float magnitude = sqrt(-2.0 * log(value.x));\n    \n    value.y *= 6.28318530718;\n    vec2 direction = vec2(cos(value.y),sin(value.y));\n    return magnitude * direction;\n}\n\nvec4 sampleRandom(sampler2D tex, vec2 fragCoord, inout uint rngState)\n{\n    fragCoord /= vec2(textureSize(tex, 0));\n    fragCoord += vec2\n    (\n        RandomFloat01(rngState),\n        RandomFloat01(rngState)\n    );\n    \n    return textureLod(tex, fragCoord, 0.0);\n}\n\nvec4 sampleBlueNoise(sampler2D blueNoiseTex, vec2 fragCoord, inout uint rngState)\n{\n    vec4 value = sampleRandom(blueNoiseTex, fragCoord, rngState);\n    \n    // The blue noise texture is limited to integer steps between\n    // 0 and 255 (inclusive).\n    // We need to add randomization to fill in the missing\n    // intermediate values.\n    value = mix(vec4(0.5 / 255.0), vec4(254.5 / 255.0), value);\n    value += \n    (\n        vec4\n        (\n            RandomFloat01(rngState), RandomFloat01(rngState),\n            RandomFloat01(rngState), RandomFloat01(rngState)\n        ) - 0.5\n    ) * (1.0 / 255.0);\n    \n    return value;\n}\n\nvec4 gaussianBlurSample\n(\n    sampler2D texture,\n    sampler2D blueNoise,\n    vec2 fragCoord, \n    float lod, \n    float blurSize, \n    inout uint rngState\n)\n{\n    fragCoord += uniform01ToGauss\n    (\n        sampleBlueNoise(blueNoise, fragCoord, rngState).xy\n    ) * blurSize;\n\n    vec2 uv = fragCoord/vec2(textureSize(texture, 0));\n    \n    return textureLod(texture, uv, lod);    \n}\n\nfloat blurMask(vec2 fragCoord, float iTime)\n{\n    return cos(iTime + fragCoord.x / 100.) *\n    sin(iTime + fragCoord.y / 100.) * 0.5 + 0.5;    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}