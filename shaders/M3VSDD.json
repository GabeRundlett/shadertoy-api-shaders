{
    "Shader": {
        "info": {
            "date": "1719986995",
            "description": "simple mix of noise and texture combined with some color manipulation.\nOn this shader i used \tClassic Perlin 3D Noise by Stefan Gustavson and Smooth Mod by @charstiles",
            "flags": 0,
            "hasliked": 0,
            "id": "M3VSDD",
            "likes": 2,
            "name": "Rainbow Fire :)",
            "published": 3,
            "tags": [
                "noise",
                "fire",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "dorplaut",
            "viewed": 112
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat noise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n/* SMOOTH MOD\n* - authored by @charstiles -\n* based on https://math.stackexchange.com/questions/2491494/does-there-exist-a-smooth-approximation-of-x-bmod-y\n* (axis) input axis to modify\n* (amp) amplitude of each edge/tip\n* (rad) radius of each edge/tip\n* returns => smooth edges\n*/\n\nfloat smoothMod(float axis, float amp, float rad){\n    float top = cos(PI * (axis / amp)) * sin(PI * (axis / amp));\n    float bottom = pow(sin(PI * (axis / amp)), 2.0) + pow(rad, 2.0);\n    float at = atan(top / bottom);\n    return amp * (1.0 / 2.0) - (1.0 / PI) * at;\n}\n\nfloat fit(float unscaled, float originalMin, float originalMax, float minAllowed, float maxAllowed) {\n  return (maxAllowed - minAllowed) * (unscaled - originalMin) / (originalMax - originalMin) + minAllowed;\n}\n\nfloat wave(vec3 position) {\n  return fit(smoothMod(position.y * 6.0, 1.0, 1.5), 0.35, 0.6, 0.0, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 fixedUv = fragCoord/iResolution.xy;\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uvA = fragCoord / iChannelResolution[0].xy;\n    vec2 uvB = fragCoord / iChannelResolution[1].xy;\n    \n    // Create movment on the position on the x axis\n    uvA.y -= iTime * 0.1;\n    uvA.x -= sin(iTime) *  0.01;\n    uv.x -= -iTime * 0.05;\n\n\n    // Create noisey lines using perlin noise and mesh position\n    vec3 noisyLines = vec3(fit(smoothMod(noise(vec3(uv.xyx) ) * 4. + sin(iTime), 1.0,1.5),0.4,0.6, 0.,1.)); \n\n    // Define the texture\n    vec4 textureColor = texture(iChannel0, uvA) + texture(iChannel1, uvB);\n    \n    // Mix the noise into the texture\n    textureColor.rgb += noisyLines * 0.5;\n    \n    // Adjust colors using animated colors\n    vec3 color = vec3(\n        0.5 + 0.5 * sin(fixedUv.y + iTime),\n        0.5 + 0.5 * sin(fixedUv.x + iTime * 1.2),\n        0.5 + 0.5 * sin(fixedUv.y + iTime * 1.4)\n    );\n    \n    // Apply color only to bright areas using smoothstep for transition\n    float blendStart = 0.7;\n    float blendEnd = 0.9; \n    float blendFactor = smoothstep(blendStart, blendEnd, textureColor.r) *\n                        smoothstep(blendStart, blendEnd, textureColor.g) *\n                        smoothstep(blendStart, blendEnd, textureColor.b);\n    vec3 coloredTexture = textureColor.rgb + color * blendFactor;\n    textureColor.rgb = coloredTexture;\n    \n    // Burn effect: Create sharp transitions to black and white\n    float threshold = 0.8; \n    textureColor.rgb = mix(vec3(0.0), vec3(1.0), smoothstep(threshold, 1.0, textureColor.rgb));\n\n\n    // Output to screen\n    fragColor = vec4(textureColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}