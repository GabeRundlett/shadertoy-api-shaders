{
    "Shader": {
        "info": {
            "date": "1635668648",
            "description": "Forked from 2d version\nGenerates random graphs and runs a physics simulation!\nUse mouse to drag vertex\nArrow keys to rotate graph\nR to toggle auto-rotate\nL to toggle drawing edges (faster off)\nGo to Common for params to change!",
            "flags": 48,
            "hasliked": 0,
            "id": "7ld3zr",
            "likes": 10,
            "name": "3D Erdős–Rényi Random Graphs",
            "published": 3,
            "tags": [
                "simulation",
                "physics",
                "graphs"
            ],
            "usePreview": 0,
            "username": "gauravity",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "\nvec3 light = normalize(vec3(1, -1, 1));\n//assumes you want first sphere intersection \n\n\nvoid circle(inout vec4 fragColor, in vec2 x, vec3 c, float r, vec3 color) {\n\n\n    vec4 i = sphereIntersect(c, r, vec3(dims/2., 0), vec3(x, 1)-vec3(dims/2.,0));\n    if (i == vec4(0)){\n        return;\n    }\n    vec3 normal = normalize(i.xyz-c);\n    float diff = clamp(dot(-light, normal), 0., 1.);\n    if (i.w < fragColor.w) {\n        fragColor = vec4(color * (diff + .3), i.w);\n    }\n    \n}\n\nvoid line(inout vec4 fragColor, in vec2 x, vec3 pp1, vec3 pp2, float thicc, vec3 color) {\n    vec2 p1 = (pp1.xy - dims/2.)/pp1.z + dims/2.;\n    vec2 p2 = (pp2.xy - dims/2.)/pp2.z + dims/2.;\n    vec2 relx = x - p1;\n    vec2 dir = p2 - p1;\n    float projFactor = dot(relx, dir)/dot(dir, dir);\n    vec2 proj = projFactor*dir;\n    vec2 diff = proj - relx;\n    float z = pp1.z  + projFactor*(pp2.z - pp1.z);\n    if (dot(diff, diff) < thicc*thicc/z/z && projFactor > 0. && projFactor < 1. && z < fragColor.a) {\n        fragColor = vec4(color, z);\n        \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    fragColor = vec4(209.,205., 219., 255.)/255.;\n    vec2 uv = fragCoord / iResolution.x;\n    vec4 blu =  vec4(.3, .8, 1, 1);\n    fragColor.a = 3.;\n\n\n    if (texelFetch(iChannel1, ivec2(KEY_L, 2), 0).x < 0.5) {\n\n        for(int i =0; i < n; i++){\n            vec3 c = hsv2rgb(vec3(rand(vec2(i, i)),0.5, 1.));\n        \n            for(int j=0; j < n; j++){\n                if(j <= i){\n                    continue;\n                }\n                if (getEdge(i, j)) {\n                    line(fragColor, uv, getVertex(i).xyz, getVertex(j).xyz,lineThickness, vec3(1));\n                }\n            }\n        }\n    }\n    for(int i =0; i < n; i++){\n        vec3 c = hsv2rgb(vec3(rand(vec2(i, i)),0.5, 1.));\n        circle(fragColor, uv, getVertex(i).xyz, radius, c);\n    }\n    fragColor.a = 1.;\n     \n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Comment out the following line to disable drawing the lines between vertices\n// Drawing lines is the most expensive operation, without it you can simulate\n// Hundreds of vertices (even while simulating the springs)\n#define drawLines \n//change seed for different random graph\n#define seed vec2(420., 69.)\n//number of vertices (up to min(iResolution.x, iResolution.y)\n#define n 30\n//probability that any two vertices have a edge between them. \n// p*n is the average degree of a vertex (best results around p*n = 3)\n#define p 0.1\n// radius of each vertex\n#define radius 0.015\n// attracting force between vertices with spring (hooks law)\n#define k 7.\n// repellant force between vertices (q/r^2)\n#define q .01\n// velocity wil *= drag once per second, lower = more drag\n#define drag 0.01\n// strength of edge connected to the center (as a fraction of k)\n#define centerRatio 5.\n// thickness of line\n#define lineThickness 0.0015\n#define dims (iResolution.xy/iResolution.x)\n#define rayOrigin vec3(dims/2., 0)\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_R = 82;\nconst int KEY_L = 76;\n\n\n\n\nfloat quadSolveMin(float a, float b, float c) {\n    return (-b-sqrt(b*b - 4.*a*c))/(2.*a);\n}\n\nfloat disc(float a, float b, float c) {\n    return b*b - 4.*a*c;\n}\nvec4 sphereIntersect(vec3 c0, float r, vec3 ray0, vec3 rayDir) {\n    vec3 relc = c0-ray0;\n    float a = dot(rayDir, rayDir);\n    float b = -2.*dot(rayDir, relc);\n    float c = dot(relc, relc) - r*r;\n    if (disc(a, b, c) < 0.) {\n        return vec4(0.);\n    }\n    float solve = quadSolveMin(a, b, c);\n    return vec4(ray0 + solve*rayDir, solve);\n}\nvec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}\n\n// Official HSV to RGB conversion \n//https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\nfloat rand(vec2 co){ return fract(sin(dot(co.xy + seed,vec2(12.9898,78.233))) * 43758.5453); }\n\n\nvoid line(inout vec4 fragColor, in vec2 x, vec2 p1, vec2 p2, float thicc, vec4 color) {\n    vec2 relx = x - p1;\n    vec2 dir = p2 - p1;\n    float projFactor = dot(relx, dir)/dot(dir, dir);\n    vec2 proj = projFactor*dir;\n    vec2 diff = proj - relx;\n    if (dot(diff, diff) < thicc*thicc && projFactor > 0. && projFactor < 1.) {\n        fragColor = color;\n    }\n}\n// https://www.shadertoy.com/view/tdGBDG\n// Addresses:\n// These should be ivec2s containing the pixel coordinates of where certain data\n// should go. The coordinates are not normalize but can range from (0, 0) to\n// (iResolution.x, iResolution.y).\n\n// Unfortunately, the only way to define functions that sample iChannels in Common\n// is with #define :(\n\n// buf - iChannel to read from\n// addr - the data address in the form of an ivec2 (vector containing two integers)\n\n#define fetchData(addr) texelFetch(iChannel0, addr, 0)\n#define getPos(i) fetchData(ivec2(i, i))\n#define getVelocity(i) fetchData(ivec2(i+n, i+n))\n\n\n#define getVertex(i) fetchData(ivec2(i, i))\n\n\n#define getEdge(i, j) (fetchData(ivec2(i, j)).x>0.5)\n\n\n// buf_pos - fragment position (fragCoord)\n// addr - the data address in the form of an ivec2\n// storeData() just evaluates if the data address matches the fragment position\n// in which case the data should be stored in fragColor.\n#define storeData(buf_pos, addr) ivec2(buf_pos) == addr\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\n#define PI 3.14159265\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    ivec2 index = ivec2(fragCoord);\n    if(index.x >= 2*n || index.y >= 2*n || index.x > index.y) {\n        return;\n    }\n    if(index.x != index.y && (index.x >= n || index.y >= n )) {\n        return;\n    }\n    // edge, initialize once\n    if (index.x != index.y) {\n        fragColor = vec4(0., 0., 0., 0.);\n        if(rand(fragCoord) < p) {\n            fragColor += 1.;\n        }\n        return;\n    }\n    \n    float theta = 2.*PI*float(index.x)/float(n);\n    if(index.x < n) {\n        fragColor.xyz = vec3(dims/2., 1.5) + vec3(cos(theta),sin(theta),cos(2.*theta))*.1;\n    } else {\n        fragColor.zw = vec2(0,0);\n    }\n    if (iFrame < 1) {\n        return;\n    }\n    \n    fragColor = fetchData(index);\n    if(index.x < n) {\n        if (texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).x > 0.5) {\n            fragColor = rotationMatrix(vec3(-1,0,0), iTimeDelta) * (fragColor - vec4(dims/2., 1.5, 0))+vec4(dims/2., 1.5, 0);\n        }\n        if (texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x > 0.5) {\n            fragColor = rotationMatrix(vec3(1,0,0), iTimeDelta) * (fragColor - vec4(dims/2., 1.5, 0))+vec4(dims/2., 1.5, 0);\n        }\n        if (texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x > 0.5) {\n            fragColor = rotationMatrix(vec3(0,-1,0), iTimeDelta) * (fragColor - vec4(dims/2., 1.5, 0))+vec4(dims/2., 1.5, 0);\n        }\n        if (texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x > 0.5) {\n            fragColor = rotationMatrix(vec3(0,1,0), iTimeDelta) * (fragColor - vec4(dims/2., 1.5, 0))+vec4(dims/2., 1.5, 0);\n        }\n        if (texelFetch(iChannel1, ivec2(KEY_R, 2), 0).x < 0.5) {\n            fragColor = rotationMatrix(vec3(0,1,0), iTimeDelta) * (fragColor - vec4(dims/2., 1.5, 0))+vec4(dims/2., 1.5, 0);\n        }\n        vec4 mouse = iMouse;\n        if(sign(mouse.z) == 1.) {\n            vec2 screenUV = mouse.xy /iResolution.x;\n            vec3 dir = vec3(screenUV, 1)-vec3(dims/2.,0);\n            vec4 i = sphereIntersect(fragColor.xyz, radius, vec3(dims/2., 0), dir);\n            if (i != vec4(0)) {\n                fragColor = vec4(rayOrigin + dir*fragColor.z, 1);\n                return;\n            }\n            \n        }\n\n        fragColor = vec4(iTimeDelta * getVelocity(index.x).xyz + fragColor.xyz, 1.);\n        fragColor.xyz = clamp(fragColor.xyz, vec3(0,0, 1), vec3(dims, 2));\n        return;\n\n    }\n    if (texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).x > 0.5) {\n        fragColor = rotationMatrix(vec3(-1,0,0), iTimeDelta) * fragColor;\n    }\n    if (texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x > 0.5) {\n        fragColor = rotationMatrix(vec3(1,0,0), iTimeDelta) * fragColor;\n    }\n    if (texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x > 0.5) {\n        fragColor = rotationMatrix(vec3(0,-1,0), iTimeDelta) * fragColor;\n    }\n    if (texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x > 0.5) {\n        fragColor = rotationMatrix(vec3(0,1,0), iTimeDelta) * fragColor;\n    }\n    if (texelFetch(iChannel1, ivec2(KEY_R, 2), 0).x < 0.5) {\n            fragColor = rotationMatrix(vec3(0,1,0), iTimeDelta) * fragColor;\n        }\n    vec3 pos = getPos(index.x - n).xyz;\n    for(int i =0; i < n; i++) {\n        if (i == index.x - n) {\n            continue;\n        }\n        if (length(pos-getVertex(i).xyz) == 0.) {\n            fragColor.xy += fragCoord.xy*.00001;\n        }\n        float chargeForce = q/pow(length(pos - getVertex(i).xyz), 2.);\n        vec3 direction = normalize(pos - getVertex(i).xyz);\n        fragColor.xyz += direction*chargeForce*iTimeDelta;\n        if (getEdge(i, index.x -n) || getEdge(index.x-n, i)) {\n            fragColor.xyz += k*(getVertex(i).xyz - pos)*iTimeDelta;\n        }\n        \n    }\n    vec3 relpos = pos - vec3(0, 0, 1);\n    \n    fragColor.xyz += iTimeDelta * centerRatio *(vec3(dims/2., 1.5) - pos);\n    fragColor.xyz *= pow(drag, iTimeDelta);\n    fragColor.xyz = clamp(fragColor.xyz, -1., 1.);\n    vec2 mouseProj = iMouse.xy/iResolution.x;\n    /*if (length(mouseProj-fragColor.xy) < radius) {\n        fragColor = vec4(mouseProj, 0, 0);\n    }*/\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}