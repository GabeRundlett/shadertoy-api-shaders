{
    "Shader": {
        "info": {
            "date": "1713125486",
            "description": "Running DBSCAN in parallel on a texture using the Euclidean distance of position and HSV color to cluster the texture. It’s pretty darn fast and fun to try out different values and see results instantly.",
            "flags": 32,
            "hasliked": 0,
            "id": "MfV3zV",
            "likes": 3,
            "name": "DBSCAN Clustering",
            "published": 3,
            "tags": [
                "distance",
                "analysis",
                "density",
                "cluster",
                "euclid",
                "custering",
                "dbscan",
                "grouping"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2024 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nThis shader is my implementation of the clustering algorithm DBSCAN (Density-Based \nSpatial Clustering of Applications With Noise). I use Euclidean distance for the \ncoordinates and the colors in HSV space. I had to modify some things to make it work. \nThe result should be pretty much exactly what DBSCAN would output if used in Python, \nbut I haven't checked.\n\nI remember waiting minutes to hours for the results on some of the larger datasets.\nThis implementation should be a lot faster. However, someone else might have already\nmade a proper CUDA implementation that should be even faster.\n\nThe three columns from left to right show the core-points in yellow, the border-points \nin green and the noise in blue. In the center, the cluster ID coordinates are shown as \ncolors from the texture. The right column just shows the original texture. You can \nclick and use the mouse X axis to enlarge any column. Additionally, you can find the \nDBSCAN parameters in the Common section at the top to experiment with the result.\n\nIf you find any errors, which is likely, feel free to comment so I can fix them.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // CENTERING AND SAMPLING THE BUFFER USING DBSCAN _______________________\n    \n    // Size of the texture to search        \n    ivec2 texSize = ivec2(textureSize(iChannel1, 0));\n    \n    // Size of the storage to search        \n    ivec2 storageSize = ivec2(textureSize(iChannel0, 0));   \n    \n    // We can't change the resolution of the buffer in Shadertoy, so I use a lower Mip level that fits\n    texSize = calculateMipLevel(texSize, storageSize).xy;\n    \n    // Coordinates of the buffer centered\n    ivec2 coords = ivec2(fragCoord - 0.5 * iResolution.xy + 0.5 * vec2(texSize));\n    //coords = ivec2(fragCoord);\n        \n    // Sample the DBSCAN buffer\n    vec3 scan = texelFetch(iChannel0, modIvec2(coords, texSize), 0).xyz;\n    \n    // Get the parameters from the DBSCAN\n    vec2 id = scan.xy; // Which cluster has the same ID coordinates\n    float label = scan.z; // Says if a point is noise, border, or core\n    \n    if (label <= NOISE) {\n        // Reset IDs for noise points to the same for visual clarity\n        id = vec2(0);\n    }\n    \n    // MOVEABLE THREE SEGMENTS ________________________________________________\n    \n    // Calculate UVs for the x-axis of the window\n    vec2 uv = fragCoord / iResolution.x;\n    \n    // Create a float to divide into sections for comparisons\n    float comparisonX = uv.x * 3.0;\n\n    // Enable mouse controls when clicked\n    float pointer = 0.;\n    if (iMouse.x > 0.0) {\n        // Mouse controls\n        vec2 mouse = iMouse.xy / iResolution.xy;\n        pointer = mouse.x * 3.0;\n    }\n    \n    // Create zigzag weights\n    float weight = abs(fract(pointer - 0.5) * 2.0 - 1.0);\n    \n    // Make transitions dead zones for easier use\n    weight = straightContrast(weight, 2.);\n            \n    // Define default edge locations for the columns\n    vec2 columnEdges = vec2(1.0, 2.0); \n    \n    // Mouse-controlled animations to zoom into the columns    \n    vec2 zoomColumnEdges = columnEdges;\n    if (pointer <= 1.0) {\n        // Zoom into the left side        \n        zoomColumnEdges = vec2(2.8, 2.9);\n    } else if (pointer <= 2.0) {\n        // Zoom into the center column\n        zoomColumnEdges = vec2(0.1, 2.9);\n    } else {\n        // Zoom into the right column\n        zoomColumnEdges = vec2(0.1, 0.2);\n    }\n\n    // Interpolate between default column edge positions and zoom\n    columnEdges = mix(columnEdges, zoomColumnEdges, weight);    \n    \n    // Segment the view into three\n    vec3 color; \n    if (comparisonX <= columnEdges.x) {\n        // Left side\n        // Show the ID in Red Green and the label in Blue\n        color = viridis(label);\n        \n    } else if (comparisonX <= columnEdges.y) {\n        // Center section\n        // Show the clusters with the colors of their ID\n        color = textureLod(iChannel1, id, 0.).xyz;  \n        //color = vec3(id, label);\n        \n    } else {\n        // Right side     \n        // Show the original texture\n        color = texture(iChannel1, vec2(coords) / vec2(texSize)).xyz;\n    }\n    \n    // Add lines between columns\n    float BorderThickness = 0.004;    \n    color += step(abs(comparisonX - columnEdges.x), BorderThickness);\n    color += step(abs(comparisonX - columnEdges.y), BorderThickness);\n    \n    // Add arrows pointing at the center of columns\n    color += step(uv.y + abs(fract(comparisonX)-0.5), BorderThickness*5.);\n    \n    // Output to screen\n    fragColor = vec4(color ,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Euclidean distance for coordinates\nfloat distanceFunctionSpace (ivec2 coords) {\n    return length(vec2(coords));\n}\n\n// Euclidean distance for HSV colors, with correction for cyclic Hue\nfloat distanceFunctionColor (vec3 colorA, vec3 colorB) {\n    // Calculate the difference in hue\n    float hueDiff = colorA.x - colorB.x;\n    \n    // Adjust the hue difference to account for the cyclical nature of hue\n    hueDiff = abs(hueDiff - round(hueDiff));  // The round function rounds to the nearest integer\n    \n    // Calculate the differences in saturation and value\n    vec2 svDiff = colorA.yz - colorB.yz;\n    \n    // Calculate the Euclidean distance\n    return sqrt(hueDiff*hueDiff + dot(svDiff, svDiff));\n}\n\n// Image clustering using DBSCAN\nvec3 DBSCAN (sampler2D storage, sampler2D sam, ivec2 coords, float minDistSpace, float minDistColor, int minPts) {\n\n    // Sample previous information\n    vec4 info = texelFetch(storage, coords, 0);\n    float label = info.z;\n    vec2 id = info.xy;\n            \n    // Small optimization for the Demo. Since noise doesn't change after frame 2\n    int frame = iFrame % RESET_FRAME;\n    if (frame > 2 && label == NOISE) {\n    \n        // we don't need to sample anything so skip the rest\n        return vec3(id, label);\n    }\n    \n    // Counter for the number of neighbors\n    int neighbors = 1; // Start with 1 since this point is also a neighbor\n    \n    // Size of the texture to search        \n    ivec2 texSize = ivec2(textureSize(sam, 0));\n    \n    // Size of the storage to search        \n    ivec2 storageSize = ivec2(textureSize(storage, 0));   \n    \n    // We can't change the resolution of the buffer in Shadertoy, so I use a lower Mip level that fits\n    // Obviously, this is not needed outside of Shadertoy, so remove this. \n    ivec3 limitation = calculateMipLevel(texSize, storageSize);\n    texSize = limitation.xy;\n    int mipLevel = limitation.z;\n    \n    // Check if we have previous results\n    vec3 color;\n    if ( label == UNVISITED) {    \n\n        #ifdef TILING\n            // Wrap the noise to create a tiling effect\n            coords = modIvec2(coords, texSize);\n        #endif\n        \n        // Save the current coordinates normalized in center\n        id = vec2(coords) / vec2(texSize);\n        \n        // Color of this pixel which we will compare to its neighbors\n        color = RGBtoHSV(texelFetch(sam, coords, 0).xyz);  \n    }\n    \n    bool shouldBreak = false; // Add a flag to break second loop\n    \n    // Loop over the grid of cells around the current cell\n    for (int offsetX = -int(minDistSpace); offsetX <= int(minDistSpace); offsetX++) {\n        for (int offsetY = -int(minDistSpace); offsetY <= int(minDistSpace); offsetY++) {\n\n            if(offsetX == 0 && offsetY == 0) {\n                // If we sample ourselfes continue to next\n                continue;\n            }\n\n            // Calculate the offset vector\n            ivec2 offset = ivec2(offsetX, offsetY);\n\n            // Coordinates of the current neighboring cell\n            ivec2 neighborCoords = coords + offset;\n\n            #ifndef TILING\n                // If we don't tile, there's no point in sampling out of bounds\n                if (any(lessThan(neighborCoords, ivec2(0))) ||\n                    any(greaterThanEqual(neighborCoords, texSize)) ||\n                    any(greaterThanEqual(neighborCoords, storageSize))) {\n                    // The coordinates are either negative or larger than the texture size or storage size\n                    continue;\n                }\n            #endif\n\n            // Calculate the distance of the offset\n            // Using the squared distance and squaring the searchRadius would be a faster method to \n            // find which Euclidean is larger\n            float distSpace = distanceFunctionSpace(offset);\n\n            // Skip samples if the distance of the offset is larger than the allowed max distance\n            if (distSpace > minDistSpace) {                \n                continue;\n            }\n\n            #ifdef TILING\n                // Wrap the noise to create a tiling effect\n                neighborCoords = modIvec2(neighborCoords, texSize);            \n                neighborCoords = modIvec2(neighborCoords, storageSize);\n            #endif\n\n            // If the type is unvisited, compare colors\n            if ( label == UNVISITED ) {  \n\n                // Sample neighboring pixel\n                vec3 neighborColor = RGBtoHSV(texelFetch(sam, neighborCoords, 0).xyz);\n\n                // Check the distance between the current point and the neighbor\n                float dist = distanceFunctionColor(color, neighborColor);\n\n                // If we are close enough, we are a true neighbor\n                if (minDistColor > dist) {\n                    neighbors += 1;\n                }\n\n                // Skip the rest of the search if we already know we are a core point\n                if (neighbors >= minPts){\n                    label = CORE; // Designate as core point\n                    \n                    // we are done for now and don't to sample anything anymore this frame\n                    shouldBreak = true;\n                    break;\n                }\n\n            } else {\n                // If we already know our label, merge our centers to show joined clusters\n                vec3 neighborInfo = texelFetch(storage, neighborCoords, 0).xyz;\n                vec2 neighborID = neighborInfo.xy;\n                float neighborLabel = neighborInfo.z;\n\n                // If a neighbor is a core           \n                if (neighborLabel == CORE) {            \n                    if (label == NOISE || label == BORDER) {\n                        // if we are a noise point next to a Core point we become a Border\n                        label = BORDER;\n                        \n                        // copy ID of first sampled Core if you are a border point\n                        id = neighborID;\n                        \n                        // we are done for now and don't to sample anything anymore this frame\n                        shouldBreak = true;\n                        break;\n                        \n                    }else if (label == CORE && dot(id, id) >= dot(neighborID, neighborID)) {\n                        // select the id closest to the origin\n                        id = neighborID;\n                    }\n\n                }\n            }\n        }\n        if (shouldBreak) {\n            break; // Check the flag after the inner loop\n        }\n    \n    }\n    \n    // If we aren't a core point, but still marked as unvisited\n    if ( label == UNVISITED) {  \n        label = NOISE; // Designate this pixel as noise\n    } \n    \n    return vec3(id, label);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Reset the DBSCAN to see the joining of the clusters\n    int frame = iFrame % RESET_FRAME;\n    if (frame == 0) {\n        // Reset everything\n        fragColor = vec4(0.0); \n        \n    } else {\n        // Sample DBSCAN\n        vec3 scan = DBSCAN(iChannel0, iChannel1, ivec2(fragCoord), MINDIST_SPACIAL, MINDIST_COLOR, MINPTS);\n        fragColor = vec4(scan,1);        \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Enable repeating Tiling which makes clusters continue on the other texture side\n#define TILING\n\n// Epsilon distance for DBSCAN. Spacial is in texel coords. and mindist is in HSV\n#define MINDIST_SPACIAL 5.0\n#define MINDIST_COLOR 0.1\n\n// This is the minimum number of neighbors within range a sample must have to be a core point\n#define MINPTS 50\n\n// When to reset the DBSCAN to see the pretty animation again \n#define RESET_FRAME 500\n\n// Constants for the labels for DBSCAN. Just have to be increasing, but best not to touch this\n#define UNVISITED 0.0\n#define NOISE     0.3\n#define BORDER    0.6\n#define CORE      1.0\n\n// GENERIC FUNCTIONS ____________________________________________________\n\n//HSV (hue, saturation, value) to RGB.\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 HSVtoRGB(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,clamp(abs(fract(c.x+K.xyz)*6.-K.w)-K.x,0.,1.),c.y);\n}\n\n//Source: https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 RGBtoHSV(vec3 c){\n\tvec4 K=vec4(0.,-1./3.,2./3.,-1.),\n\t     p=mix(vec4(c.bg ,K.wz),vec4(c.gb,K.xy ),step(c.b,c.g)),\n\t     q=mix(vec4(p.xyw,c.r ),vec4(c.r ,p.yzx),step(p.x,c.r));\n\tfloat d=q.x-min(q.w,q.y),\n\t      e=1e-10;\n\treturn vec3(abs(q.z+(q.w-q.y)/(6.*d+e)),d/(q.x+e),q.x);\n}\n\n// Makes viridis colormap with polynomial 6\nvec3 viridis(float t) {\n    const vec3 c0 = vec3(0.274344,0.004462,0.331359);\n    const vec3 c1 = vec3(0.108915,1.397291,1.388110);\n    const vec3 c2 = vec3(-0.319631,0.243490,0.156419);\n    const vec3 c3 = vec3(-4.629188,-5.882803,-19.646115);\n    const vec3 c4 = vec3(6.181719,14.388598,57.442181);\n    const vec3 c5 = vec3(4.876952,-13.955112,-66.125783);\n    const vec3 c6 = vec3(-5.513165,4.709245,26.582180);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// Finds the MIP level so the texture fits within the buffer storage\nivec3 calculateMipLevel(ivec2 texSize, ivec2 storageSize) {\n    int mipLevel = 0;\n    while (texSize.x > storageSize.x || texSize.y > storageSize.y) {\n        texSize /= 2;\n        mipLevel++;\n    }\n    return ivec3(texSize, mipLevel);\n}\n\n// Because % doesn't do its job properly on negative numbers, this will have to do it\nivec2 modIvec2(ivec2 x, ivec2 y) {\n    return ivec2(mod(float(x.x), float(y.x)), mod(float(x.y), float(y.y)));\n}\n\n// Linearly increases contrast of Alpha\n// See: https://www.desmos.com/calculator/k1g3naqoue\nfloat straightContrast(float alpha, float contrast) {\n    return clamp(contrast * (alpha - 0.5) + 0.5, 0., 1.);\n} \n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}