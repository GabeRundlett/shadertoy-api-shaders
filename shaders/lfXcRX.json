{
    "Shader": {
        "info": {
            "date": "1721390189",
            "description": "Buffer A: Scene Pass\nBuffer B: Velocity and Depth\nBuffer C: Dialtion\nBuffer D: Accmulation\nImage : Present\n",
            "flags": 32,
            "hasliked": 0,
            "id": "lfXcRX",
            "likes": 0,
            "name": "Temporal AA Variance Clamp(Test)",
            "published": 3,
            "tags": [
                "temporalaa"
            ],
            "usePreview": 0,
            "username": "MacLin",
            "viewed": 93
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 fragUV = fragCoord / iResolution.xy;\n    fragColor.rgb = texture(iChannel0, fragUV).rgb;\n    fragColor.a = 1.0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SCENE1 1\n#define SCENE2 0\n\n#if SCENE2\n// Copyright Inigo Quilez, 2015 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n//-------------------------------------------------------------------------------------------\n// sphere related functions\n//-------------------------------------------------------------------------------------------\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\n// https://iquilezles.org/articles/sphereshadow\nfloat sphShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    return step( min( -b, min( c, b*b - c ) ), 0.0 );\n}\n            \nvec2 sphDistances( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    float d = sqrt( max(0.0,sph.w*sph.w-h)) - sph.w;\n    return vec2( d, -b-sqrt(max(h,0.0)) );\n}\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    float s = 1.0;\n    vec2 r = sphDistances( ro, rd, sph );\n    if( r.y>0.0 )\n        s = max(r.x,0.0)/r.y;\n    return s;\n}    \n            \nfloat sphOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )\n{\n    vec3  r = sph.xyz - pos;\n    float l = length(r);\n    float d = dot(nor,r);\n    float res = d;\n\n    if( d<sph.w ) res = pow(clamp((d+sph.w)/(2.0*sph.w),0.0,1.0),1.5)*sph.w;\n    \n    return clamp( res*(sph.w*sph.w)/(l*l*l), 0.0, 1.0 );\n}\n\n//-------------------------------------------------------------------------------------------\n// rendering functions\n//-------------------------------------------------------------------------------------------\n\n#define NUMSPHEREES 20\n\nvec4 sphere[NUMSPHEREES];\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n        res = min( res, 8.0*sphSoftShadow(ro,rd,sphere[i]) );\n    return res;\t\t\t\t\t  \n}\n\nfloat occlusion( in vec3 pos, in vec3 nor )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t    res *= 1.0 - sphOcclusion( pos, nor, sphere[i] ); \n    return res;\t\t\t\t\t  \n}\n\n//-------------------------------------------------------------------------------------------\n// utlity functions\n//-------------------------------------------------------------------------------------------\n\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\nvec3 textureBox( sampler2D sam, in vec3 pos, in vec3 nor )\n{\n    vec3 w = abs(nor);\n    return (w.x*texture( sam, pos.yz ).xyz + \n            w.y*texture( sam, pos.zx ).xyz + \n            w.z*texture( sam, pos.xy ).xyz ) / (w.x+w.y+w.z);\n}\n\n//-------------------------------------------------------------------------------------------\n// SCENE\n//-------------------------------------------------------------------------------------------\n\nvec3 lig = normalize( vec3( -0.8, 0.3, -0.5 ) );\n\nvec3 shade( in vec3 rd, in vec3 pos, in vec3 nor, in float id, in vec3 uvw, in float dis )\n{\n    vec3 ref = reflect(rd,nor);\n    float occ = occlusion( pos, nor );\n    float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n    \n    occ = occ*0.5 + 0.5*occ*occ;\n    \n    float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n    float sha = 1.0;\n    if( dif>0.001 ) sha = shadow( pos, lig );\n    \n    vec3 shac = vec3(sha,sha*0.5+0.5*sha*sha,sha*sha); // colored shadow penumbras\n    \n    float bac = clamp( dot(nor,normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 );\n    \n    vec3 lin = vec3(0.0);\n    lin += 1.5*vec3(1.0,0.9,0.7)*dif*shac;\n    lin += 1.0*vec3(1.0,0.9,0.7)*pow( clamp(dot(ref,lig),0.0,1.0), 4.0 )*dif*shac;\n    lin += 0.3*vec3(1.0,0.9,0.8)*bac*occ;\n    lin += 0.3*vec3(0.3,0.5,0.9)*occ;\n    lin += 0.1*vec3(0.1,0.2,0.3)*(0.3+0.7*occ);\n    lin += 0.1*vec3(0.5,0.4,0.3)*pow( fre, 2.0 )*occ;\n\n    vec3 mate = 0.5 + 0.5*cos( 19.4*id + vec3(0.0,0.5,0.7) + 6.0 );\n    vec3 te = textureBox( iChannel0, 0.25*uvw, nor );\n    vec3 qe = te;\n    mate *= te;\n    \n    vec2 uv = vec2( 0.5+0.5*atan(nor.x,nor.z)/3.1416, acos(nor.y)/3.1416 );\n    uv.x = 0.1*abs(uv.x - 0.5)/0.5;\n    uv.y *= 4.0;\n    te = texture( iChannel1, uv ).zyx;\n    mate = sqrt(te*mate)*4.0;\n    \n\n    vec3 col = mate*lin;\n    float r = clamp(qe.x,0.0,1.0);\n    col *= 0.7;\n    col += r*1.5*vec3(0.85,0.9,1.0)*smoothstep(-0.1-0.4*pow(fre,5.0),0.0,ref.y )*occ*(0.03+0.97*pow(fre,4.0))*shadow( pos, ref );\n    col += r*0.5*vec3(1.0,0.9,0.7)*pow( clamp(dot(ref,lig),0.0,1.0), 12.0 )*dif;\n\n    return col;\n}    \n\n\nvec3 trace( in vec3 ro, in vec3 rd, vec3 col, in float px, in float tmin, out float t)\n{\n\tt = tmin;\n\tfloat id  = -1.0;\n    vec4  obj = vec4(0.0);\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n\t    float h = sphIntersect( ro, rd, sph ); \n\t\tif( h>0.0 && h<t ) \n\t\t{\n\t\t\tt = h;\n            obj = sph;\n\t\t\tid = float(i);\n\t\t}\n\t}\n\t\t\t\t\t\t  \n    if( id>-0.5 )\n    {\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = sphNormal( pos, obj );\n        col = shade( rd, pos, nor, id, pos-obj.xyz, t );\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // use fragcoord (0, 0), for Time and Previous Time for \n    if (fragCoord.y < 1.0 && fragCoord.x < 1.0) \n    {\n        float prevTime = (iFrame > 0) ? texture(iChannel2, vec2(0.0)).x : 0.0;\n        fragColor = vec4(iTime, prevTime, 0.0, 0.0);\n        return;\n    }\n    \n    \n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\t\n    //-----------------------------------------------------\n    // animate\n    //-----------------------------------------------------\n\tfloat time = iTime*0.5;\n\t\n\tfloat an = 0.3*time - 7.0*m.x;\n\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tfloat id  = float(i);\n        float ra = pow(id/float(NUMSPHEREES-1),4.0);\n\t    vec3  pos = 2.5*cos( 6.2831*hash3(id*137.17) + 1.5*(1.0-0.7*ra)*hash3(id*431.3+4.7)*time );\n        pos.xz *= 1.0 - 0.2*ra;\n        //ra = 0.3 + 0.7*ra;\n        ra = 0.2 + 0.8*ra;\n        pos.y = -1.0+ra;\n\t\tsphere[i] = vec4( pos, ra );\n    }\n\t\t\t\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    float le = 2.0;\n\tvec3 ro = vec3(4.0*sin(an),1.5,4.0*cos(an));\n    vec3 ta = vec3(0.0,-1.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + le*ww );\n\n    float px = 1.0*(2.0/iResolution.y)*(1.0/le);\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\tvec3 col = vec3(0.3) + 0.3*smoothstep(-0.5,0.5,rd.y);\n\n    float tmin = 1e20;\n    float t = (-1.0-ro.y)/rd.y;\n    if( t>0.0 )\n    {\n        tmin = t;\n        vec3 pos = ro + t*rd;\n        vec3 nor = vec3(0.0,1.0,0.0);\n        col = shade( rd, pos, nor, 0.0, pos*0.5, t );\n    }\n    \n    col = trace( ro, rd, col, px, tmin, t);\n    \n\n    col = pow( col, vec3(0.4545) );\n\t\n    col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.15);\n\n\tfragColor = vec4( col, t );\n}\n\n#endif\n\n#if SCENE1\n//////////////////////////////////////////////////////////////////////\n// GetScene1Colour\nmat4 GetBoxTransform(float time)\n{\n    float x = 0.0;\n    float y = 0.0;\n    float z = 0.0;\n    float radx = 0.0;\n    float rady = time * 0.1;\n    float radz = 0.0;\n    \n    return translateRotate(x, y, z, radx, rady, radz);\n}\n\nmat4 GetSphereTransform(float time)\n{\n    float x = 0.0;\n    float y = 0.0;\n    float z = 0.0;\n    float radx = 0.0;\n    float rady = 0.0;\n    float radz = 0.0;\n    \n    return translateRotate(x, y, z, radx, rady, radz);\n}\n\nfloat HitBox(mat4 transform, vec3 ro, vec3 rd, vec3 s, out vec3 N)\n{\n    ro = transformPosition(inverse(transform), ro);\n    rd = transformDirection(inverse(transform), rd);\n    \n    vec3 tLo = (-s - ro) / rd;\n    vec3 tHi = (+s - ro) / rd;\n    vec3 tNear = min(tLo, tHi);\n    vec3 tFar = max(tLo, tHi);\n    \n    float t0 = max(tNear.x, max(tNear.y, tNear.z));\n    float t1 = min(tFar.x, min(tFar.y, tFar.z));\n    if (t0 > t1) {\n        N = rd;\n        return 1e20;\n    }\n    float t = (t0 >= 0.0) ? t0 : t1;\n    \n    vec3 n = ro + rd * t;\n    float maxN = max(abs(n.x), max(abs(n.y), abs(n.z)));\n    if (abs(n.x) < maxN) n.x = 0.0;\n    if (abs(n.y) < maxN) n.y = 0.0;\n    if (abs(n.z) < maxN) n.z = 0.0;\n\n\tN = normalize(n);\n    N = transformPosition(transform, N);\n    \n    return t;\n}\n\nfloat HitSphere(mat4 transform, in vec3 ro, in vec3 rd, in float r, out vec3 N)\n{\n    ro = transformPosition(inverse(transform), ro);\n    rd = transformDirection(inverse(transform), rd);\n    \n    vec3 op = -ro;\n    float eps = 1e-4;\n    float b = dot(op, rd);\n    float det = b * b - dot(op, op) + r * r;\n    float t = 1e20;\n    if (det >= 0.0)\n    {\n        det = sqrt(det);\n        t = b - det;\n        if (t <= eps)\n            t = b + det;\n        if (t <= eps)\n            t = 0.0;\n        N = normalize(ro + rd * t);\n        N = transformPosition(transform, N);        \n    }\n    return t;\n}\n\nfloat HitScene(in vec3 ro, in vec3 rd, out vec3 N)\n{\n    vec3 boxPos = vec3(0.0);\n    vec3 boxHalfWidth = vec3(1.0);\n    vec3 spherePos = vec3(0.0);\n    float sphereRadius = 1.2;\n   \n    vec3 n;\n    \n    mat4 boxTrans = GetBoxTransform(iTime);\n    float t = HitBox(boxTrans, ro, rd, boxHalfWidth, n);    \n    if (t >= backgroundT) {\n        N = n;\n        return t;\n    }\n    \n    // If the point where we hit the box is inside the sphere, \n    // find where we exit the sphere.\n    vec3 hit = ro + rd * t;\n    if (distance(hit, spherePos) <= sphereRadius) \n    {\n        mat4 sphereTrans = GetSphereTransform(iTime);\n        t += HitSphere(sphereTrans, hit, rd, sphereRadius, n);\n        hit = ro + rd * t;\n        // If the point where we exit the sphere is inside the box, \n        // that's our intersection point.\n        vec3 test = abs(hit - boxPos);\n        if (test.x <= boxHalfWidth.x && test.y <= boxHalfWidth.y && test.z <= boxHalfWidth.z) \n        {\n            N = -n;\n            return t;\n        }\n        \n        // If we get here, we've exited the sphere outside the box\n        N = rd;\n        return backgroundT;\n    }\n    \n    N = n;\n    return t;\n}\n\nvec3 Background(in vec3 dir)\n{\n    return texture(iChannel3, dir).rgb;\n}\n\nvec4 GetScene1Colour(vec3 pos, vec3 dir)\n{\n    vec3 n = dir;\n    float t = HitScene(pos, dir, n);\n    if (t < backgroundT) \n    {\n        vec3 r = reflect(dir, n);\n        float NdotR = max(0.0, dot(-dir, r));\n        vec3 ambient = Background(reflect(dir, n)) * NdotR * 0.3;\n        \n        vec3 p = pos + dir * t;\n        vec3 l = normalize(GetLight() - p);\n        float NdotL = max(0.0, dot(n, l));\n        vec3 direct = vec3(1.0, 0.5, 0.5) * NdotL;\n        \n        return vec4(ambient + direct, t);\n    }\n    else\n    {\n        return vec4(Background(dir), backgroundT);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // use fragcoord (0, 0), for Time and Previous Time for \n    if (fragCoord.y < 1.0 && fragCoord.x < 1.0) \n    {\n        float prevTime = (iFrame > 0) ? texture(iChannel2, vec2(0.0)).x : 0.0;\n        fragColor = vec4(iTime, prevTime, 0.0, 0.0);\n        return;\n    }\n    \n    vec3 vRayOrigin, vRayDir;\n    GetRayForFragcoord(fragCoord, iTime, vec2(iResolution.xy), vRayOrigin, vRayDir);    \n    \n    fragColor = GetScene1Colour(vRayOrigin, vRayDir);\n}\n#endif",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/////////////////////////////\nfloat curr_time = 0.0;\nfloat prev_time = 0.0;\n\nbool GetTimes(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Find out where the current pixel was in the previous frame and\n    // get the colour at that location.\n    vec2 times = texture(iChannel0, vec2(0.0)).xy; // curr time = x, prev time = y.\n    curr_time = times.x;\n    prev_time = times.y;\n    \n    return false;\n}\n\nvec3 GetCurrentFrameWorldPos(in vec2 fragCoord, float depth)\n{\n    vec3 currRO, currRD;\n    GetRayForFragcoord(fragCoord, curr_time, vec2(iResolution.xy), currRO, currRD);\n    vec3 worldPos = currRO + depth * currRD;\n    \n    return worldPos;\n}\n\nvec2 GetPrevFrameUV(in vec3 worldPos)\n{\n    return GetFragcoordForWorldPosition(worldPos, vec2(iResolution.xy), prev_time);\n}\n\nfloat ComputeDepth(in vec2 fragCoord)\n{\n    return texture(iChannel0, fragCoord / iResolution.xy).w;\n}\n\nvec2 ComputeVelocity(in vec2 fragCoord)\n{\n    float depth = ComputeDepth(fragCoord);\n    \n    vec3 worldPos = GetCurrentFrameWorldPos(fragCoord, depth);\n    \n    vec2 fragCoordOld = GetPrevFrameUV(worldPos);\n    \n    return fragCoord - fragCoordOld;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    GetTimes(fragColor, fragCoord);\n\n    float depth = ComputeDepth(fragCoord);\n    \n    vec2 velocity = ComputeVelocity(fragCoord);\n    \n    fragColor = vec4(depth, velocity.x, velocity.y, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// TODO\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define USE_TAA 1\n#define USE_VELOCITY_BUFFER 1\n#define USE_CLIPPING 1\n#define CLIP_BY_VARIANCE 1\n#define CLIP_BY_AABB 0\n\nbool handlePixel00(out vec4 fragColor, in vec2 fragCoord)\n{\n    // steal texture(0,0) for vec4(time, prevtime, 0.0, 0.0)\n    if (iFrame == 0 || all(lessThanEqual(fragCoord, vec2(1.0)))) \n    {\n        vec4 val = texture(iChannel0, fragCoord / iResolution.xy);\n        fragColor = vec4(val.rgb, 1.0);\n        return true;\n    }\n    \n    return false;\n}\n\nvec3 rgb2ycocg(in vec3 rgb)\n{\n    float co = rgb.r - rgb.b;\n    float t = rgb.b + co / 2.0;\n    float cg = rgb.g - t;\n    float y = t + cg / 2.0;\n    return vec3(y, co, cg);\n}\n\n\nvec3 ycocg2rgb(in vec3 ycocg)\n{\n    float t = ycocg.r - ycocg.b / 2.0;\n    float g = ycocg.b + t;\n    float b = t - ycocg.g / 2.0;\n    float r = ycocg.g + b;\n    return vec3(r, g, b);\n}\n\nvec3 clipToAABB(in vec3 cOld, in vec3 cNew, in vec3 centre, in vec3 halfSize)\n{\n    if (all(lessThanEqual(abs(cOld - centre), halfSize))) {\n        return cOld;\n    }\n    \n    vec3 dir = (cNew - cOld);\n    vec3 near = centre - sign(dir) * halfSize;\n    vec3 tAll = (near - cOld) / dir;\n    float t = 1e20;\n    for (int i = 0; i < 3; i++) \n    {\n        if (tAll[i] >= 0.0 && tAll[i] < t) \n        {\n            t = tAll[i];\n        }\n    }\n    \n    if (t >= 1e20) \n    {\n\t\treturn cOld;\n    }\n    return cOld + dir * t;\n}\n\nfloat GetDepth(in vec2 fragCoord)\n{\n    return texture(iChannel1, fragCoord / iResolution.xy).x;\n}\n\nvec2 GetVelocity(in vec2 fragCoord)\n{\n    return texture(iChannel1, fragCoord / iResolution.xy).yz;\n}\n\nvec4 GetSample(in vec2 fragCoord)\n{\n    return texture(iChannel0, fragCoord / iResolution.xy);\n}\n\nvec4 GetHistory(in vec2 fragCoord)\n{\n    return texture(iChannel2, fragCoord / iResolution.xy);\n}\n\nvec4 VarianceClipping(in vec2 fragCoord, in vec4 S, in vec4 H)\n{\n    // Look up colours for the immediate neighbourhood of the pixel in\n    // this frame. Calculate the first two moments of their distribution\n    // (i.e. mean and standard deviation).\n \tvec2 fcOffsets[4];\n    fcOffsets[0] = vec2(-1.0,  0.0);\n    fcOffsets[1] = vec2( 1.0,  0.0);\n    fcOffsets[2] = vec2( 0.0, -1.0);\n    fcOffsets[3] = vec2( 0.0,  1.0);\n    \n    vec3 m = rgb2ycocg(S.rgb);\n    vec3 m2 = m * m;\n    for (int i = 0; i < 4; i++) {\n        vec3 c = rgb2ycocg(texture(iChannel0, (fragCoord + fcOffsets[i]) / iResolution.xy).rgb);\n        m += c;\n        m2 += c * c;\n    }\n    m = m / 5.0;\n    m2 = m2 / 5.0;\n    \n    vec3 mean = m;\n    vec3 stddev = sqrt(m2 - m * m);\n    \n    vec3 center = mean;\n    vec3 halfSize = stddev;    \n\n    H = vec4(ycocg2rgb(clipToAABB(rgb2ycocg(H.rgb), rgb2ycocg(S.rgb), center, halfSize)), 1.0);\n    \n    return H;\n}\n\nvec4 AABBClipping(in vec2 fragCoord, in vec4 S, in vec4 H)\n{\n    // Look up colours for the immediate neighbourhood of the pixel in\n    // this frame. Calculate the first two moments of their distribution\n    // (i.e. mean and standard deviation).\n \tvec2 fcOffsets[4];\n    fcOffsets[0] = vec2(-1.0,  0.0);\n    fcOffsets[1] = vec2( 1.0,  0.0);\n    fcOffsets[2] = vec2( 0.0, -1.0);\n    fcOffsets[3] = vec2( 0.0,  1.0);\n    \n    vec3 minColor = rgb2ycocg(S.rgb);\n    vec3 maxColor = rgb2ycocg(S.rgb);\n    for (int i = 0; i < 4; i++) \n    {\n        vec3 c = rgb2ycocg(texture(iChannel0, (fragCoord + fcOffsets[i]) / iResolution.xy).rgb);\n        minColor = min(minColor, c);\n        maxColor = max(maxColor, c);\n    }\n    \n    vec3 center = (maxColor + minColor) * 0.5;\n    vec3 halfSize = abs(maxColor - minColor) * 0.5;\n\n    H = vec4(ycocg2rgb(clipToAABB(rgb2ycocg(H.rgb), rgb2ycocg(S.rgb), center, halfSize)), 1.0);\n    \n    return H;\n}\n\nvec4 Clipping(in vec2 fragCoord, in vec4 S, in vec4 H)\n{\n#if CLIP_BY_VARIANCE\n    return VarianceClipping(fragCoord, S, H);\n#endif\n#if CLIP_BY_AABB\n    return AABBClipping(fragCoord, S, H);\n#endif    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(handlePixel00(fragColor, fragCoord))\n        return;\n\n    // 1) Motion Vector\n#if USE_VELOCITY_BUFFER\n    vec2 velocity = GetVelocity(fragCoord);\n#else\n    vec2 velocity = vec2(0.0, 0.0);\n#endif\n\n    // 2) S\n    vec4 S = GetSample(fragCoord);\n    \n    // 2.5) to LR->HR\n\n    // 3) fragCoordOld\n    vec2 fragCoordOld = fragCoord - velocity;    \n    \n    // 4) H\n    vec4 H = GetHistory(fragCoordOld);\n\n#if USE_CLIPPING\n    H = Clipping(fragCoord, S, H);\n#endif\n\n    float alpha = 0.1;\n    if(iMouse.z>0.0)\n        alpha = 1.0;\n\n#if USE_TAA    \n    fragColor.rgb = mix(H.rgb, S.rgb, alpha);\n    fragColor.a = 1.0;\n#else\n    fragColor.rgb = S.rgb;\n    fragColor.a = 1.0;\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nconst float DEG_TO_RAD = 3.141592653589793 / 180.0;\n\nmat4 rotateX(float rad) \n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat4(\n        1.0, 0.0, 0.0, 0.0, \n        0.0,   c,   s, 0.0,\n        0.0,  -s,   c, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 rotateY(float rad) \n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat4\n    (\n          c, 0.0,  -s, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n          s, 0.0,   c, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 rotateZ(float rad) \n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat4\n    (\n          c,   s, 0.0, 0.0,\n         -s,   c, 0.0, 0.0,\n        0.0, 0.0, 1.0, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 translate(float x, float y, float z) \n{\n    return mat4\n    (\n        1.0, 0.0, 0.0,   0.0,\n        0.0, 1.0, 0.0,   0.0,\n        0.0, 0.0, 1.0,   0.0,\n        x, y, z, 1.0\n    );\n}\n\nmat4 translateRotate(float x, float y, float z, float radx, float rady, float radz)\n{\n    return translate(x, y, z) * rotateZ(radz) * rotateY(rady) * rotateX(radx);\n}\n\nvec3 transformPosition(mat4 transform, vec3 v)\n{\n    return (transform * vec4(v, 1.0)).xyz;\n}\n\nvec3 transformDirection(mat4 transform, vec3 v)\n{\n    return (transform * vec4(v, 0.0)).xyz;\n}\n\n\n// Render the current frame\nconst vec3 target = vec3(0.0, 0.5, 0.0);\nconst float epsilon = 1e-5;\nconst float backgroundT = 100.0;\n\nvec3 GetCameraPosition(float time)\n{\n    return vec3(cos(time) * 2.0, 1.2 + sin(time) * 0.5, 3.0);\n}\n\nvec3 GetLight()\n{\n    return vec3(10.0, 10.0, 10.0);\n}\n\nvoid GetRayForFragcoord(in vec2 fragCoord, in float time, in vec2 resolution, out vec3 ro, out vec3 rd)\n{\n    vec3 pos = GetCameraPosition(time);\n\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 dir = normalize(target - pos);\n    vec3 right = normalize(cross(dir, up));\n    up = normalize(cross(right, dir));\n    \n    float fov = radians(50.0);    \n\n    float imgU = tan(fov) * distance(pos, target);\n    float imgV = imgU * resolution.y / resolution.x;\n\n    vec2 uv = fragCoord / resolution.xy * 2.0 - 1.0;\n    \n    dir = normalize(target + uv.x * imgU * right + uv.y * imgV * up - pos);\n    \n    ro = pos;\n    rd = dir;\n}\n\nvec2 GetFragcoordForWorldPosition(in vec3 worldPos, in vec2 resolution, in float time)\n{\n    vec3 pos = GetCameraPosition(time);\n    \n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 dir = normalize(target - pos);\n    vec3 right = normalize(cross(dir, up));\n    up = normalize(cross(right, dir));\n    float fov = radians(50.0);\n\n    float imgU = tan(fov) * distance(pos, target);\n    float imgV = imgU * resolution.y / resolution.x;\n\n    float dWorld = dot(worldPos - pos, dir);\n    float dProj = distance(pos, target);\n    vec3 projPos = (worldPos - pos) * (dProj / dWorld) + pos - target;\n    \n    vec2 uv = vec2(dot(projPos, right) / imgU,\n                   dot(projPos, up)    / imgV) * 0.5 + 0.5;\n    return uv * resolution.xy;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}