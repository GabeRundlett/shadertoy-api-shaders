{
    "Shader": {
        "info": {
            "date": "1583932187",
            "description": "A variation of [url]https://www.shadertoy.com/view/WlVXWt[/url]\n\nMore bit twiddling: [url]https://graphics.stanford.edu/~seander/bithacks.html[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wlVXDd",
            "likes": 10,
            "name": "Counting Bits in Colour",
            "published": 3,
            "tags": [
                "xor",
                "colour",
                "bitwise",
                "counting"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "// Original by FabriceNeyret2:\n// https://www.shadertoy.com/view/WlVXWt\n//\n// Modified by Matthew Arcus, mla, 11/3/2020.\n\n#if 0\n// Brian Kernighanâ€™s Algorithm  cost = NB bits at 1 \n// https://www.geeksforgeeks.org/count-set-bits-in-an-integer/\n\nint nbBits(int n)  { \n    int c;\n    for( c = 0; n > 0; c++ )\n        n &= n - 1;\n    return c; \n} \n\n#else\n// mla pointed a more efficient one : \n// https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\nint nbBits(int v)  { \n    v -= v >> 1   & 0x55555555;                    \n    v = (v & 0x33333333) + (v >> 2   & 0x33333333);     \n    return ( v + (v >> 4) & 0xF0F0F0F ) * 0x1010101 >> 24;\n}\n#endif\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return v * mix( vec3(1.0), rgb, s);\n}\n\nint op(int x, int y) {\n    int a = int(0.1*iTime)%3;\n    if (a == 0) return x & y;\n    if (a == 1) return x | y;\n    if (a == 2) return x ^ y;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 I = ivec2(U);\n    O = vec4( hsv2rgb(0.1*iTime+float(nbBits(op(I.x,I.y)))/ 6.,1.0,1.0),1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}