{
    "Shader": {
        "info": {
            "date": "1685135344",
            "description": "Integrating velocity and acceleration, with gravity\nNow with two moving gravity sources!",
            "flags": 32,
            "hasliked": 0,
            "id": "cl3SzM",
            "likes": 11,
            "name": "Rainbow Orbits 2",
            "published": 3,
            "tags": [
                "rainbow",
                "orbit",
                "gravity",
                "integration",
                "spirograph"
            ],
            "usePreview": 0,
            "username": "isaacchurchill",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    vec2 lastPenPos = texelFetch(iChannel1, ivec2(1,0), 0).xy;\n    float circleSDF = abs(length(p - lastPenPos) - 0.05) - 0.003;\n    float circleStrength = smoothstep(-0.005, 0.005, -circleSDF);\n    vec3 penCol = 0.5 + 0.5 * sin(float(iFrame) * 0.1 + vec3(0,2,4));\n    \n    float gravSDF = min(length(p - grav1), length(p - grav2));\n    float gravCircleStrength = min(2.0 / pow(1.0 + gravSDF * 3.0, 20.0), 1.0);\n    vec3 gravCircleCol = vec3(1.0);\n    \n    float innerCirc = smoothstep(-0.01, 0.0, -abs(1.2 - length(p)));\n    float outerCirc = smoothstep(-0.01, 0.0, -abs(1.25 - length(p)));\n    float gradient = 1.0 / (1.0 + pow(length(p), 10.0));\n    vec3 stars = texture(iChannel2, p / 2.0).rgb;\n    vec3 background = stars * (0.075 + 0.2 * smoothstep(0.0, 0.01, length(p) - 1.25));\n    background += vec3(1.0,1.0,0.9) * ((innerCirc + outerCirc) * 0.7 + gradient * 0.15);\n    float visibility = smoothstep(-1.2,-1.0,-length(p));\n    vec4 col = texture(iChannel0, uv);\n    col.rgb = mix(background, col.rgb, col.a * visibility);\n    col.a = 1.0;\n    col.rgb = mix(col.rgb, gravCircleCol, gravCircleStrength);\n    col.rgb = mix(col.rgb, penCol, circleStrength);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n\n#define PEN_THICKNESS 0.005\n#define FADE_RATE 0.002\n\n\n// Line segment SDF by iq\n// https://iquilezles.org/articles/distfunctions2d/\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n///////////////////////////////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n            \n    vec2 penPos = texelFetch(iChannel1, ivec2(0), 0).xy;\n    vec2 lastPenPos = penPos;\n    if (iFrame > 1) {\n        lastPenPos = texelFetch(iChannel1, ivec2(1,0), 0).xy;\n    }\n    float penSDF = sdSegment(p, lastPenPos, penPos) - PEN_THICKNESS;\n    float penStrength = smoothstep(-0.005, 0.005, -penSDF);\n    vec3 penCol = 0.5 + 0.5 * sin(float(iFrame) * 0.1 + vec3(0,2,4));\n    \n    vec4 col = texture(iChannel0, uv);\n    col.a *= 1.0 - FADE_RATE;\n    col.rgb = mix(col.rgb, penCol, penStrength);\n    col.a = max(col.a, penStrength);\n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 path(vec4 p)\n{\n    float dt = 0.001;\n    vec2 grav1Pos = grav1;\n    vec2 grav2Pos = grav2;\n    \n    for (int i = 0; i < 50; i++) {\n        p.xy += p.zw * dt;\n        p.zw -= normalize(p.xy - grav1Pos) / max(length(p.xy - grav1Pos), 0.01) * dt;\n        p.zw -= normalize(p.xy - grav2Pos) / max(length(p.xy - grav2Pos), 0.01) * dt;\n    }\n    \n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 lastState = vec4(1.0, 0.0, -0.5, 0.5); // xy = position, zw = velocity\n    if (iFrame > 0) {\n        lastState = texelFetch(iChannel0, ivec2(0), 0);\n    }\n    if (fragCoord.y < 1.0 && fragCoord.x > 1.0 && fragCoord.x < 2.0) {\n        fragColor = lastState;\n    } else if (fragCoord.x < 1.0 && fragCoord.y < 1.0) {\n        fragColor = path(lastState);\n    } else {\n        discard;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define grav1 (0.5 * vec2(cos(iTime), sin(iTime)))\n#define grav2 (-grav1)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}