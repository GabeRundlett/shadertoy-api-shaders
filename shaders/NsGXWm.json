{
    "Shader": {
        "info": {
            "date": "1634717743",
            "description": "demonstrating the well known effect of recursively box filtering a single impulse. each shape has the same volume and produces a B-spline window of increasing order",
            "flags": 32,
            "hasliked": 0,
            "id": "NsGXWm",
            "likes": 7,
            "name": "Recursive Box Filtering",
            "published": 3,
            "tags": [
                "filter",
                "recursive",
                "box",
                "gaussian"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "const float R = 32.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float t = iTime;\n\n    vec2 p = ((fragCoord / iResolution.xy) * 2.0 - 1.0) * vec2(iResolution.x/iResolution.y, 1.0);\n    float m = iResolution.x / R;\n    int x = int(iResolution.x + p.x * R * 2.0) / 2;\n    float h = float((x + 1000) % 2);\n    float y = texelFetch(iChannel0, ivec2(x, 0), 0).r;\n    \n    fragColor.rgb = vec3(mix(0.25, 0.75, step(y, p.y + 0.618*0.5)) - h * 0.1); \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "float triangular(int n, int N, int L) {\n    // triangular window\n    // 0 <= n <= N\n    // L can be N,N+1 or N+2\n    return 1.0 - abs(float(n - N/2) / float(L/2));    \n}\n\nfloat wendland(float x) {\n    // approximates the right half of a truncated gaussian\n    // x must be in the range 0..1\n    // first derivative is zero at x = 0\n    // first three derivatives are zero at x = 1\n    // the integral of the interval 0..1 is 1/3\n    float h = (1.0 - x);\n    h = h * h;\n    return h * h * (4.0 * x + 1.0);\n}\n\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);    \n    const int steps = 10;\n    int speed = 30;\n    int frame = (iFrame / speed) % steps;\n    int frame1 = ((iFrame - 1) / speed) % steps;\n    \n    if (frame == 0) {\n        if (fc.x == int(iResolution.x) / 2) {\n            fragColor = vec4(1.0);\n        } else {\n            fragColor = vec4(0.0);\n        }\n    } else if (frame1 == frame) {\n        fragColor = texelFetch(iChannel0, fc, 0);\n    } else {        \n     #if 1\n        const int R = 2;\n        float w = 0.0;\n        vec4 c = vec4(0.0);\n        for (int i = -R; i <= R; ++i) {\n            c += texelFetch(iChannel0, fc + ivec2(i, 0), 0);\n            w += 1.0;\n        }\n        fragColor = c / w;\n    #elif 1\n        const int R = 4;\n        const int N = R*2+1;\n        const int L = N+1;\n        float w = 0.0;\n        vec4 c = vec4(0.0);\n        for (int i = -R; i <= R; ++i) {\n            float a = triangular(i+R, N, L);\n            c += a*texelFetch(iChannel0, fc + ivec2(i, 0), 0);\n            w += a;\n        }\n        fragColor = c / w;\n    #else\n        // wendland filter kernel\n        const int R = 9;\n        float w = 0.0;\n        vec4 c = vec4(0.0);\n        for (int i = -R; i <= R; ++i) {\n            float a = wendland(float(abs(i)) / float(R+1));\n            c += a*texelFetch(iChannel0, fc + ivec2(i, 0), 0);\n            w += a;\n        }\n        fragColor = c / w;\n    #endif\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}