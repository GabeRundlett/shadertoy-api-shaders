{
    "Shader": {
        "info": {
            "date": "1650198827",
            "description": "sample code\n(left) intersection (center) union (right) complement",
            "flags": 0,
            "hasliked": 0,
            "id": "7tScWG",
            "likes": 1,
            "name": "9_0_boolOp3d",
            "published": 3,
            "tags": [
                "ch9"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "float sphereSDF(vec3 p, vec3 c, float r){\n    return length(p - c) - r;\n}\nfloat sceneSDF(vec3 p){\n    float[3] smallS, bigS;\n    for (int i = 0; i < 3; i++){\n        smallS[i] = sphereSDF(p, vec3(float(i - 1), sin(iTime), 0.0), 0.3);\n        bigS[i] = sphereSDF(p, vec3(float(i - 1), 0.0, 0.0), 0.5);\n    }\n    float cap = max(smallS[0], bigS[0]);\n    float cup = min(smallS[1], bigS[1]);\n    float minus = max(smallS[2], -bigS[2]);\n    return min(min(cap, cup), minus);\n}\nvec3 gradSDF(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        sceneSDF(p + vec3(d, 0.0, 0.0)) - sceneSDF(p + vec3(-d, 0.0, 0.0)),\n        sceneSDF(p + vec3(0.0, d, 0.0)) - sceneSDF(p + vec3(0.0, - d, 0.0)),\n        sceneSDF(p + vec3(0.0, 0.0, d)) - sceneSDF(p + vec3(0.0, 0.0, - d))\n    ));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 cDir = vec3(0.0, 0.0, -1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    vec3 lDir = vec3(0.0, 0.0, 1.0);\n\n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n    \n    vec3 rPos = cPos + ray;\n    ray = normalize(ray);\n    fragColor.rgb = vec3(0.0);\n    for(int i = 0; i < 50; i ++ ){\n        if (sceneSDF(rPos) > 0.001){\n            rPos += sceneSDF(rPos) * ray;\n        } else {\n            float amb = 0.1;\n            float diff = 0.9 * max(dot(normalize(lDir), gradSDF(rPos)), 0.0);\n            vec3 col = vec3(1.0);\n            fragColor.rgb = col * (diff + amb);\n            break;\n        }\n    }\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}