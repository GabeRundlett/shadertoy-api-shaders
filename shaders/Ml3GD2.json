{
    "Shader": {
        "info": {
            "date": "1471626384",
            "description": "colored shifting gradients",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml3GD2",
            "likes": 6,
            "name": "fun shader",
            "published": 3,
            "tags": [
                "gradient"
            ],
            "usePreview": 0,
            "username": "rsofchrs",
            "viewed": 1344
        },
        "renderpass": [
            {
                "code": "vec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 baseColorFor(float time) {\n    float i = mod(floor(time / 10.0), 2.0);\n    float progress = mod(time, 10.0);\n    \n    vec3 one = vec3(0.0 / 255.0, 209.0 / 255.0, 193.0 / 255.0);\n    vec3 two = vec3(123.0 / 255.0, 222.0 / 255.0, 90.0 / 255.0);\n\n    \n    if (i == 0.0) {\n        if (progress > 8.0) {\n          return mix(one, two, (progress - 8.0) / 2.0);\n        } else {\n          return one;\n        }\n    }\n    \n    //if (i == 1.0) {\n        if (progress > 8.0) {\n          return mix(two, one, (progress - 8.0) / 2.0);\n        } else {\n          return two;\n        }\n    //}\n}\n\nvec3 adjustSV(vec3 rgb, float s, float v) {\n    vec3 hsv = rgb2hsv(rgb);\n    hsv.y = s;\n    hsv.z = v;\n    return hsv2rgb(hsv);\n}\n\nvec3 colorFor(vec3 base, float uv) {\n    vec3 first = base;\n    \n    vec3 second = adjustSV(base, .5, .9);\n    vec3 third = adjustSV(base, .82, .56);\n    vec3 fourth = adjustSV(base, .2, .96);\n\n    //vec3 first = vec3(0.0 / 255.0, 209.0 / 255.0, 193.0 / 255.0);\n    //vec3 second = vec3(110.0 / 255.0, 230.0 / 255.0, 217.0 / 255.0);\n    //vec3 third = vec3(26.0 / 255.0, 143.0 / 255.0, 124.0 / 255.0);\n    //vec3 fourth = vec3(193.0 / 255.0, 245.0 / 255.0, 240.0 / 255.0);\n    // vec3 babu1 = vec3(0.0 / 255.0, 209.0 / 255.0, 193.0 / 255.0);\n    \n    float x4 = ((uv + 1.0) / 2.0) * 4.0;\n    \n    if (x4 <= 1.0) {\n        return mix(first, second, mod(x4, 1.0));\n    }\n    \n    if (x4 > 1.0 && x4 <= 2.0) {\n        return mix(second, third, mod(x4, 1.0));\n    }\n\n    if (x4 > 2.0 && x4 <= 3.0) {\n        return mix(third, fourth, mod(x4, 1.0));\n    }\n\n    //if (x4 > 3.0 && x4 <= 4.0) {\n        return mix(fourth, first, mod(x4, 1.0));\n    //}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = 1.3;\n    float offset = 0.5;\n    \n    vec3 top_left = colorFor(baseColorFor(0.99 * iTime + sin(0.06 * iTime)), sin(speed * 0.06 * iTime + 1.0 + offset));\n    vec3 top_right = colorFor(baseColorFor(0.98 * iTime + sin(0.16 * iTime)), sin(speed * 0.1 * iTime + 2.0 + offset));\n        \n    vec3 bottom_left = colorFor(baseColorFor(0.97 * iTime + sin(0.9 * iTime)), sin(speed * 0.12 * iTime + 5.0 + offset));\n    vec3 bottom_right = colorFor(baseColorFor(0.96 * iTime + sin(0.5 * iTime)), sin(speed * 0.09 * iTime + 6.0 + offset));\n    \n    \n    //vec3 top_left = mix(babu2, kazan3, 0.8 * sin(iTime));\n    //vec3 top_right = mix(kazan1, babu2, 0.9 * sin(iTime));\n        \n    //vec3 bottom_left = mix(kazan2, babu1, 0.7 * sin(iTime));\n    //vec3 bottom_right = mix(babu3, kazan2, 1.2 * sin(iTime));\n    \n\tfloat ymix = fragCoord.y / iResolution.y;\n    vec3 left = mix(top_left, bottom_left, ymix);\n    vec3 right = mix(top_right, bottom_right, ymix);\n    \n    float xmix = fragCoord.x / iResolution.x;\n    \n    fragColor = vec4(mix(left, right, xmix), 1.0);\n    \n\t// fragColor = vec4(uv,0.5+1.5*sin(iTime),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}