{
    "Shader": {
        "info": {
            "date": "1716459771",
            "description": "Click with mouse to see how mandelbrot and julia correspond",
            "flags": 0,
            "hasliked": 0,
            "id": "4X33W4",
            "likes": 0,
            "name": "my Mandelbrot and Julia",
            "published": 3,
            "tags": [
                "fractal",
                "mouse"
            ],
            "usePreview": 0,
            "username": "ShadeWhizz",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "#define NITER 800\n\n// can also be written mat2(a, -a.y,a.x) *b  , by demoivre formula\nvec2 cmul(vec2 a, vec2 b) {\n        return vec2(a.x*b.x - a.y*b.y, a.y*b.x + a.x*b.y);\n}\n\nvec2 f(vec2 z, vec2 c) {\n    return cmul(z,z) + c;\n}\n\nvec2 getz_mandelbrot(vec2 fragCoord) {\n    vec2 half_stretch_ndc = (fragCoord - .5*iResolution.xy) / iResolution.yy;\n    vec2 uv = half_stretch_ndc + vec2(-0.75, 0.5);\n    return uv * 3.0;\n}\n\nvec2 getz_julia(vec2 fragCoord) {\n    vec2 half_stretch_ndc = (fragCoord - .5*iResolution.xy) / iResolution.yy;\n    //vec2 uv = half_stretch_ndc + vec2(-0.5, 0.5);\n    return half_stretch_ndc * 3.0;\n}\n\n// n iters\nint mandelbrot(vec2 z) {\n    vec2 acc = z;\n    const int niter = 150;\n    for (int i = 0; i < NITER; i++) {\n        acc = f(acc, z);\n        if (dot(acc,acc) >= 4.0) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n\n// n iters\nint julia(vec2 z) {\n    vec2 acc = z;\n    const int niter = 150;\n    for (int i = 0; i < NITER; i++) {\n        acc = f(acc, getz_mandelbrot(iMouse.xy));\n        if (dot(acc,acc) >= 4.0) {\n            return i;\n        }\n    }\n    return 0;\n}\n\nfloat channel(int  steps) {\n    float t = float(steps) / float(NITER);\n    t = sqrt(t);\n    t = pow(t, 1.0/3.0);\n    return t;\n}\n\nvec4 colour(int steps) {\n    float t = float(steps) / float(NITER);\n    t = pow(t, 1.0/5.0);\n    return vec4(t);\n}\n\n// what if we blend colour channels offset by aa, would we get truetype\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float r = channel(julia(getz_julia(fragCoord)));\n    float g = channel(julia(getz_julia(fragCoord + vec2(0.5, 0.0))));\n    float b = channel(julia(getz_julia(fragCoord + vec2(0.0, 0.5))));\n    vec4 cj = vec4(r, g, b, 1.0);\n    \n    //float rm = colour(mandelbrot(getz_mandelbrot(fragCoord))));\n    //float gm = colour(mandelbrot(getz_mandelbrot(fragCoord))));\n    vec4 cm = colour(mandelbrot(getz_mandelbrot(fragCoord)));\n    fragColor = cm * 0.5;\n    fragColor += cj;\n    //fragColor = vec4(cm.x, 0.0, cj.x, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}