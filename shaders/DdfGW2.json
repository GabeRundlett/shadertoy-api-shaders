{
    "Shader": {
        "info": {
            "date": "1666889072",
            "description": "a bit of color in this world of hell",
            "flags": 0,
            "hasliked": 0,
            "id": "DdfGW2",
            "likes": 40,
            "name": "Acidulate Hellscape",
            "published": 3,
            "tags": [
                "noise",
                "terrain",
                "abstract",
                "gyroid"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 758
        },
        "renderpass": [
            {
                "code": "\n// Acidulate Hellscape\n// who said hell didn't taste sweet and sour?\n\n#define R iResolution.xy\n#define N(a,b,c) normalize(vec3(a,b,c))\n\nfloat noise;\n\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\n\n// sinful math\nfloat gyroid (vec3 seed)\n{\n    return dot(sin(seed),cos(seed.yzx));\n}\n\n// spicy noise\nfloat fbm (vec3 seed)\n{\n    float result = 0., a = .5;\n    for (int i = 0; i < 8; ++i, a/=2.)\n    {\n        seed.y += result*.2;\n        result += abs(gyroid(seed/a))*a;\n    }\n    return result;\n}\n\n// signed distance function\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    \n    // travel\n    p.z -= iTime*.2;\n    \n    // displace\n    noise = fbm(p*.4);\n    noise = sin(noise*6.+p.z*.2-iTime*.5);\n    dist = p.y - noise*.5;\n    \n    return dist * .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 color = vec3(0);\n    \n    // layers\n    const float frames = 3.;\n    for (float f = 0.; f < frames; ++f)\n    {\n        // blue noise scroll by iq https://www.shadertoy.com/view/tlySzR\n        ivec2 p = ivec2(fragCoord);\n        p = (p+(iFrame*int(frames)+int(f))*ivec2(113,127)) & 1023;\n        vec3 blu = texelFetch(iChannel0,p,0).xyz;\n\n        // coordinates\n        vec3 pos = vec3(0,4,3);\n        vec3 at = vec3(0,0,0);\n        vec3 ray = lookAt(pos, at, uv, 1.);\n\n        // raymarch\n        const float count = 20.;\n        float maxDist = 10.;\n        float steps = 0.;\n        float total = 0.;\n        for (steps = count; steps > 0.; --steps) {\n            float dist = map(pos);\n            if (dist < 2.*total/iResolution.y || total > maxDist) break;\n            dist *= 0.9+0.1*blu.z;\n            pos += ray * dist;\n            total += dist;\n        }\n        \n        // shading\n        float shade = steps/count;\n        if (shade > .1 && total < maxDist) {\n\n            // NuSan https://www.shadertoy.com/view/3sBGzV\n            vec2 noff = vec2(.01,0);\n            vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n\n            // Inigo Quilez color palette https://iquilezles.org/www/articles/palettes/palettes.htm\n            vec3 tint = .6+.4*cos(vec3(1,2,3)*5. + pos.z + pos.y*2.);\n\n            // lighting\n            if (noise > 0.5) {\n                tint *= pow(dot(normal, N(0,-1,2))*.5+.5, 2.);\n                tint += .3*dot(normal, N(1,1,-2))*.5+.5;\n            } else {\n                tint *= dot(normal, N(0,-1,1))*.5+.5;\n                tint += .8*pow(dot(normal, N(0,1,-2))*.5+.5, 2.);\n            }\n            \n            tint *= smoothstep(5.,0.,pos.z);\n            tint *= pow(shade,3.)*3.;\n            tint *= .5+.5*blu.x;\n            color += tint / frames;\n        }\n    }\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}