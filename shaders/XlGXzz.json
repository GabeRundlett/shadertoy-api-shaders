{
    "Shader": {
        "info": {
            "date": "1482399395",
            "description": "Elastic balls connected by springs. Updated to use raytracing (mainly) instead of raymarching - much faster for\nsimple objects. Use the mouse to control the box.",
            "flags": 32,
            "hasliked": 0,
            "id": "XlGXzz",
            "likes": 22,
            "name": "Balls and Springs 2",
            "published": 3,
            "tags": [
                "raytracing",
                "dynamics",
                "spring"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 884
        },
        "renderpass": [
            {
                "code": "// \"Balls and Springs 2\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\nUpdated to use raytracing (mainly) instead of raymarching - much faster for\nsimple objects.\n\nElastic balls connected by springs (body-diagonal springs are not shown);\nthere are also damping forces and gravity (downwards). The front-facing walls\nare transparent. Use the mouse to control the box.\n*/\n\nfloat PrBoxDf (vec3 p, vec3 b);\nmat3 QtToRMat (vec4 q);\nmat3 DirToRMatT (vec3 vd, vec3 vu);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\n\nconst float pi = 3.14159;\nconst int nBall = 27, nBallE = 3;\nvec3 ltDir, vnBall, vnCyl, rdSign;\nfloat dstFar, hbLen;\nint idBall, idObj;\n\nconst int nNeb = 6;\nivec3 idNeb[nNeb];\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec3 (1, 0, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec3 (0, 1, 0);\n  idNeb[3] = - idNeb[2];\n  idNeb[4] = ivec3 (0, 0, 1);\n  idNeb[5] = - idNeb[4];\n}\n\nfloat BallHit (vec3 ro, vec3 rd, float dMin)\n{\n  vec3 u;\n  float rad, b, d, w;\n  rad = 0.45;\n  for (int n = 0; n < nBall; n ++) {\n    u = ro - Loadv4 (2 * n).xyz;\n    b = dot (rd, u);\n    w = b * b - (dot (u, u) - rad * rad);\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nfloat CylHit (vec3 ro, vec3 rd, float dMin)\n{\n  mat3 rMat;\n  vec3 rdp, u, c1, c2, c;\n  ivec3 iv, ivN;\n  float fmId, fm, rad, b, d, w, a, h;\n  int j2;\n  rad = 0.1;\n  fm = float (nBallE);\n  for (int j1 = 0; j1 < nBall; j1 ++) {\n    c1 = Loadv4 (2 * j1).xyz;\n    fmId = float (j1);\n    iv = ivec3 (mod (fmId, fm), mod (floor (fmId / fm), fm),\n       floor (fmId / (fm * fm)));\n    for (int n = 0; n < nNeb; n ++) {\n      ivN = iv + idNeb[n];\n      if (InLatt (ivN.x) && InLatt (ivN.y) && InLatt (ivN.z)) {\n        j2 = (ivN.z * nBallE + ivN.y) * nBallE + ivN.x;\n        if (j2 > j1) {\n          c2 = Loadv4 (2 * j2).xyz;\n          c = c2 - c1;\n          h = length (c);\n          u = ro - 0.5 * (c1 + c2);\n          b = dot (rd, u);\n          if (b * b >= dot (u, u) - (0.25 * h * h + rad * rad)) {\n            rMat = DirToRMatT (c / h, vec3 (0., 0., 1.));\n            u = u * rMat;\n            rdp = rd * rMat;\n            a = dot (rdp.xy, rdp.xy);\n            b = dot (rdp.xy, u.xy);\n            w = b * b - a * (dot (u.xy, u.xy) - rad * rad);\n            if (w >= 0.) {\n              d = - (b + sqrt (w)) / a;\n              if (d > 0. && d < dMin) {\n                if (abs (u.z + d * rdp.z) < 0.5 * h) {\n                  dMin = d;\n                  vnCyl.xy = (u.xy + d * rdp.xy) / rad;\n                  vnCyl.z = 0.;\n                  vnCyl = rMat * vnCyl;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 fVec;\n  vec3 q, eLen, eShift;\n  float dMin, d, eWid, sLen;\n  dMin = dstFar;\n  sLen = hbLen - 0.5;\n  eWid = 0.04;\n  eShift = vec3 (0., sLen, sLen);\n  eLen = vec3 (sLen + eWid, eWid, eWid);\n  fVec = sLen * vec4 (rdSign, 0.);\n  d = min (min (PrBoxDf (p - fVec.xww, eLen.yxx),\n     PrBoxDf (p - fVec.wyw, eLen.xyx)), PrBoxDf (p - fVec.wwz, eLen.xxy));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = abs (p);\n  d = min (min (PrBoxDf (q - eShift, eLen), PrBoxDf (q - eShift.yxz, eLen.yxz)),\n     PrBoxDf (q - eShift.yzx, eLen.yzx));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, w;\n  float dstBall, dstCyl, dstHit;\n  dstBall = BallHit (ro, rd, dstFar);\n  dstCyl = CylHit (ro, rd, dstBall);\n  rdSign = sign (rd);\n  dstHit = ObjRay (ro, rd);\n  if (min (dstBall, dstCyl) < min (dstHit, dstFar)) {\n    if (dstCyl < dstBall) {\n      col = vec3 (0.5, 0.5, 0.6);\n      vn = vnCyl;\n    } else {\n      col = vec3 (HsvToRgb (vec3 (mod (float (5 * idBall) / float (nBall), 1.),\n         1., 1.)));\n      vn = vnBall;\n    }\n    col = col * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +\n       0.5 * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n  } else if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      w = smoothstep (0., 0.1, abs (fract (1.95 * ro + 0.5) - 0.5));\n      objCol = vec4 (mix (vec3 (0.4, 0.4, 1.), vec3 (0.5, 0.5, 0.2),\n         dot (abs (vn) * w.yzx * w.zxy, vec3 (1.))), 0.4);\n    } else if (idObj == 2) objCol = vec4 (0.4, 0.4, 1., 0.4);\n    col = objCol.rgb * (0.4 + 0.6 * max (dot (vn, ltDir), 0.)) +\n       objCol.a * pow (max (0., dot (ltDir, reflect (rd, vn))), 128.);\n  } else col = vec3 (0., 0.1, 0.);\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 qtVu;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ut;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  ut = abs (uv) - vec2 (1.);\n  if (max (ut.x, ut.y) > 0.003) col = vec3 (0.82);\n  else {\n    dstFar = 60.;\n    qtVu = Loadv4 (2 * nBall + 1);\n    vuMat = QtToRMat (qtVu);\n    rd = normalize (vec3 (uv, 7.)) * vuMat;\n    ro = vec3 (0., 0., -40.) * vuMat;\n    ltDir = normalize (vec3 (1., 1.5, -1.2)) * vuMat;\n    IdNebs ();\n    hbLen = Loadv4 (2 * nBall).y;\n    col = ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nmat3 DirToRMatT (vec3 vd, vec3 vu)\n{\n  vec3 vc;\n  vc = normalize (cross (vu, vd));\n  return mat3 (vc, cross (vd, vc), vd);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Balls and Springs 2\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.14159;\nconst float txRow = 64.;\n\nconst int nBall = 27, nBallE = 3;\nvec4 qtVu;\nfloat hbLen, spLen;\n\nconst int nNeb = 6, nNebD = 8;\nivec3 idNeb[nNeb], idNebD[nNebD];\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec3 (1, 0, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec3 (0, 1, 0);\n  idNeb[3] = - idNeb[2];\n  idNeb[4] = ivec3 (0, 0, 1);\n  idNeb[5] = - idNeb[4];\n  idNebD[0] = ivec3 (1, 1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec3 (1, 1, -1);\n  idNebD[3] = - idNebD[2];\n  idNebD[4] = ivec3 (1, -1, 1);\n  idNebD[5] = - idNebD[4];\n  idNebD[6] = ivec3 (-1, 1, 1);\n  idNebD[7] = - idNebD[6];\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nvoid Step (int mId, out vec3 r, out vec3 v)\n{\n  vec3 rn, vn, dr, f;\n  ivec3 iv, ivN;\n  float fOvlap, fSpring, fDamp, grav, rSep, spLenD, dt, fm, fmId;\n  int nbId;\n  IdNebs ();\n  fOvlap = 1000.;\n  fSpring = 50.;\n  fDamp = 0.2;\n  grav = 3.;\n  r = Loadv4 (2 * mId).xyz;\n  v = Loadv4 (2 * mId + 1).xyz;\n  f = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    rn = Loadv4 (2 * n).xyz;\n    dr = r - rn;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n  }\n  fm = float (nBallE);\n  fmId = float (mId);\n  iv = ivec3 (mod (fmId, fm), mod (floor (fmId / fm), fm),\n     floor (fmId / (fm * fm)));\n  for (int n = 0; n < nNeb; n ++) {\n    ivN = iv + idNeb[n];\n    if (InLatt (ivN.x) && InLatt (ivN.y) && InLatt (ivN.z)) {\n      nbId = (ivN.z * nBallE + ivN.y) * nBallE + ivN.x;\n      rn = Loadv4 (2 * nbId).xyz;\n      vn = Loadv4 (2 * nbId + 1).xyz;\n      dr = r - rn;\n      rSep = length (dr);\n      f += fSpring * (spLen - rSep) * normalize (dr) - fDamp * (v - vn);\n    }\n  }\n  spLenD = spLen * sqrt (3.);\n  for (int n = 0; n < nNebD; n ++) {\n    ivN = iv + idNebD[n];\n    if (InLatt (ivN.x) && InLatt (ivN.y) && InLatt (ivN.z)) {\n      nbId = (ivN.z * nBallE + ivN.y) * nBallE + ivN.x;\n      rn = Loadv4 (2 * nbId).xyz;\n      vn = Loadv4 (2 * nbId + 1).xyz;\n      dr = r - rn;\n      rSep = length (dr);\n      f += fSpring * (spLenD - rSep) * normalize (dr) - fDamp * (v - vn);\n    }\n  }\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr +\n      vec3 (0., grav, 0.) * QtToRMat (qtVu) + fDamp * v;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvec3 VInit (int n)\n{\n  float fn;\n  fn = float (n);\n  return 2. * normalize (vec3 (Hashff (fn), Hashff (fn + 0.3),\n     Hashff (fn + 0.6)) - 0.5);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (int mId, out vec3 r, out vec3 v)\n{\n  vec3 vSum;\n  for (int iz = 0; iz < nBallE; iz ++) {\n    for (int iy = 0; iy < nBallE; iy ++) {\n      for (int ix = 0; ix < nBallE; ix ++) {\n        if (mId == (iz * nBallE + iy) * nBallE + ix) {\n          r = spLen * vec3 (ix, iy, iz) - 0.5 * (float (nBallE) - 1.);\n        }\n      }\n    }\n  }   \n  v = VInit (mId);\n  vSum = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) vSum += VInit (n);\n  v -= vSum / float (nBall);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 p, r, v;\n  vec2 iFrag;\n  float tCur;\n  int mId, pxId;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId > 2 * nBall + 2) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  qtVu = Loadv4 (2 * nBall + 1);\n  mPtrP = Loadv4 (2 * nBall + 2);\n  mId = pxId / 2;\n  spLen = 1.5;\n  if (iFrame <= 5) {\n    hbLen = 4.;\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    stDat = vec4 (0., hbLen, tCur, 0.);\n    if (mId < nBall) {\n      Init (mId, r, v);\n      p = (2 * mId == pxId) ? r : v;\n    }\n  } else {\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    stDat = Loadv4 (2 * nBall);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    if (mPtrP.z < 0.) qtVu = normalize (QtMul (EulToQt (0.2 * (tCur - stDat.z) *\n       pi * vec3 (0.27, 0.34, -0.11)), qtVu));\n    stDat.z = tCur;\n    if (mId < nBall) {\n      Step (mId, r, v);\n      p = (2 * mId == pxId) ? r : v;\n    }\n  }\n  if (pxId == 2 * nBall + 1) stDat = qtVu;\n  else if (pxId == 2 * nBall + 2) stDat = mPtrP;\n  Savev4 (pxId, ((pxId < 2 * nBall) ? vec4 (p, 0.) : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n     q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n     q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n   - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n   - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}