{
    "Shader": {
        "info": {
            "date": "1581153705",
            "description": "Mesh AABB raytracer with multiple refractions. This version has vertex attributes (here smooth normals).\nSlower than 'flat shading' version (https://www.shadertoy.com/view/3ltSzM) because of dependent texture reads.\nComing next: mesh bunny meets SDF.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "WlcXRS",
            "likes": 38,
            "name": "Smooth Crystal Bunny",
            "published": 3,
            "tags": [
                "raytracing",
                "aabb",
                "mesh"
            ],
            "usePreview": 1,
            "username": "BrunoLevy",
            "viewed": 1796
        },
        "renderpass": [
            {
                "code": "// Default settings\n#if 1\nconst float refract_index = 1.3;  // 1.0: no refraction   1.3: water\nconst float extinction = 0.3;     // the higher, the darker (in function of thicness) \nconst float reflect_coeff = 0.75; // 0.0: no reflection   1.0: shiny reflections\nconst vec3  core_color = vec3(0,0.5,0.5); \n#endif \n\n// Show mesh thickness\n#if 0\nconst float refract_index = 1.0;  \nconst float extinction = 0.3;     \nconst float reflect_coeff = 0.0; \nconst vec3  core_color = vec3(0,0,0); \n#define WHITE_BACKGROUND\n#endif \n\n// Smooth normals or per-facet normals.\nconst bool smooth_shading = true;\n\n// Gets x,y,z, coordinates packed in a single 32 bits int (10 bits per coordinate)\nint get_compressed_point(in int v) {\n    return get_data(points_offset, v);\n}\n\n// Converts a single-int 10 bits per components packed point into a standard vec3.\nvec3 uncompress_point(in int xyz) {\n   ivec3 XYZ = (ivec3(xyz) >> ivec3(0,10,20)) & ivec3(1023); \n   return bbox_min + (bbox_max - bbox_min) * vec3(XYZ) / 1023.0;\n}\n\n// Gets a point from a vertex index\nvec3 get_point(int v) {\n   return uncompress_point(get_compressed_point(v));\n}\n\n// Gets a normal from a vertex index\nvec3 get_normal(int v) {\n   int xyz = get_data(normals_offset, v);\n   ivec3 XYZ = (ivec3(xyz) >> ivec3(0,10,20)) & ivec3(1023); \n   return vec3(-1) + vec3(XYZ) / 512.0;    \n}\n\n// Gets an AABB node from a node index.\n// An AABB node can be either an internal node (bbox + axis + number of subnodes \n//  in left subtree) or a leaf node (single triangle, with indives of its tree vertices)\nivec3 get_AABB_node(in int n) {\n    return ivec3(\n        get_data(AABB_offset,3*n),\n        get_data(AABB_offset,3*n+1),\n        get_data(AABB_offset,3*n+2)\n    );\n}\n\nconst float FARAWAY=1e30;\n\nstruct Camera {\n    vec3 Obs;\n    vec3 View;\n    vec3 Up;\n    vec3 Horiz;\n    float H;\n    float W;\n    float z;\n};\n\nstruct Ray {\n    vec3 Origin;\n    vec3 Dir;\n};\n\nCamera camera(in vec3 Obs, in vec3 LookAt, in float aperture) {\n   Camera C;\n   C.Obs = Obs;\n   C.View = normalize(LookAt - Obs);\n   C.Horiz = normalize(cross(vec3(0.0, 0.0, 1.0), C.View));\n   C.Up = cross(C.View, C.Horiz);\n   C.W = float(iResolution.x);\n   C.H = float(iResolution.y);\n   C.z = (C.H/2.0) / tan((aperture * 3.1415 / 180.0) / 2.0);\n   return C;\n}\n\nRay launch(in Camera C, in vec2 XY) {\n   return Ray(\n      C.Obs,\n      C.Obs+C.z*C.View+(XY.x-C.W/2.0)*C.Horiz+(XY.y-C.H/2.0)*C.Up \n   );\n}\n\nstruct Intersection {\n   float t;\n   vec3 P;\n   vec3 N;\n   int id; // index of latest intersected triangle, used to avoid finding the point\n           //  where you started from when computing multiple bounces.\n};\n \nIntersection intersection() {\n   Intersection I;\n   I.t = FARAWAY;\n   I.id = -1; \n   return I;\n}\n\nRay reflect_ray(in Ray R, in Intersection I) {\n    return Ray(I.P, reflect(R.Dir, I.N));\n}\n\nRay refract_ray(in Ray R, in Intersection I, in float n1, in float n2) {\n    return Ray(I.P, refract(normalize(R.Dir), I.N, n1/n2));\n}\n\n// Branchless ray-triangle intersection that gives, for free, as by-products:\n//   Normal N\n//   Barycentric coordinates (1-u-v, u, v)\n// (slightly modified Moller-Trumbore algorithm)\n// References and explanations here:\n// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d/42752998#42752998\nbool intersect_triangle(\n    in Ray R, in vec3 A, in vec3 B, in vec3 C, out float t, \n    out float u, out float v, out vec3 N\n) { \n   vec3 E1 = B-A;\n   vec3 E2 = C-A;\n         N = cross(E1,E2);\n   float det = -dot(R.Dir, N);\n   float invdet = 1.0/det;\n   vec3 AO  = R.Origin - A;\n   vec3 DAO = cross(AO, R.Dir);\n   u =  dot(E2,DAO) * invdet;\n   v = -dot(E1,DAO) * invdet;\n   t =  dot(AO,N)   * invdet;\n   return (abs(det) >= 1e-6 && t >= 0.0 && u >= 0.0 && v >= 0.0 && (u+v) <= 1.0);\n}\n\n// Computes ray-triangle intersection from node index (i)\n// Returns true if there was an intersection.\n// Note: normal is not normalized\nbool triangle(in Ray R, in int i, inout Intersection I) {\n   ivec3 T = get_AABB_node(i);\n   vec3 A = get_point(T.x);\n   vec3 B = get_point(T.y);\n   vec3 C = get_point(T.z);    \n   float t,u,v;\n   vec3 N;\n   if(intersect_triangle(R, A,B,C, t, u, v, N) && t < I.t) {\n      I.t = t;\n      I.P = R.Origin + t*R.Dir;\n      I.id = i;\n      if(smooth_shading) {\n         vec3 N1 = get_normal(T.x);\n         vec3 N2 = get_normal(T.y);\n         vec3 N3 = get_normal(T.z);       \n         I.N = (1.0-u-v)*N1 + u*N2 + v*N3;\n      } else {\n         I.N = N;\n      }\n      return true;\n   }\n   return false;\n}\n \n// Good explanations here:\n// https://tavianator.com/fast-branchless-raybounding-box-intersections/\nbool segment_box_intersection(\n  in vec3 q1,\n  in vec3 dirinv,\n  in vec3 boxmin,\n  in vec3 boxmax,\n  in float t \n) {  \n   vec3 T1 = dirinv*(boxmin - q1);\n   vec3 T2 = dirinv*(boxmax - q1);\n   vec3 Tmin = min(T1,T2);\n   vec3 Tmax = max(T1,T2);\n   float tmin = max(max(Tmin.x, Tmin.y),Tmin.z);\n   float tmax = min(min(Tmax.x, Tmax.y),Tmax.z);    \n   return (tmax >= 0.0) && (tmin <= tmax) && (tmin <= t);\n}\n\n// The stack used for recursive traversal of the AABB\n// Traversal context is just the bounds b,e of the [b,e[ \n// sequence of AABB nodes that correspond to a subtree.\n\nint stack_top = -1;\nint stack_b[10];\nint stack_e[10];\n\nbool stack_empty() {\n  return (stack_top < 0);\n}\n\nvoid stack_push(in int b, in int e) {\n  stack_top++;\n  stack_b[stack_top] = b;\n  stack_e[stack_top] = e;  \n}\n\nvoid stack_pop(out int b, out int e) {\n  b = stack_b[stack_top];\n  e = stack_e[stack_top];\n  --stack_top;\n}\n\n// AABB walkthrough\n// (C++ code to convert .obj file into AABB at the end\n//  of Buffer A, in a big comment)\n// Some inspiration taken from Terdiman's OpCode:\n//   http://www.codercorner.com/Opcode.htm\nbool mesh_AABB(in Ray R, inout Intersection I) {\n    int prev_id = I.id; // index of latest intersected triangle\n    bool result = false;\n    vec3 invDir = vec3(1.0/R.Dir.x, 1.0/R.Dir.y, 1.0/R.Dir.z);\n    stack_push(0, AABB_data_size/3);\n    while(!stack_empty()) {\n        int b,e;\n        stack_pop(b,e);\n        ivec3 node = get_AABB_node(b);\n        vec3 bbox_min = uncompress_point(node.x);\n        vec3 bbox_max = uncompress_point(node.y);\n        if(!segment_box_intersection(R.Origin, invDir, bbox_min, bbox_max, I.t)) {\n            continue;\n        }\n        b++;\n        if(node.z == -1) {   // Node is a leaf, intersect full sequence of triangles\n           for(int i=b; i<e; ++i) {\n              if(i == prev_id) { continue; } // skip latest triangle\n              bool t_isect = triangle(R, i, I);\n              result = result || t_isect;\n          }\n        } else { // Node is internal, decode splitting coord and nb in left child\n          int coord = node.z & 3;\n          int nb    = node.z >> 2; \n          int m     = b + nb;  \n          // Traverse nearest first (so that pruning can occur, thanks @iq for the tips)  \n          if(R.Dir[coord] < 0.0) {\n             stack_push(b,m);\n             stack_push(m,e);                  \n          } else {\n             stack_push(m,e);\n             stack_push(b,m); // positive -> process this child first                                    \n          } \n        }\n    }\n    if(result) { I.N = normalize(I.N); }\n    return result;\n}  \n\n// Modifies ray and intersection, returns total length of traversed matter.\nfloat multi_refract(inout Ray R, inout Intersection I) {\n    float result = 0.0;\n    for(int i=0; i<10; ++i) {\n        if(dot(R.Dir,I.N) > 0.0) { // Exiting matter\n            result += I.t;\n            vec3 old_dir = R.Dir;\n            I.N = -I.N;\n            R = refract_ray(R, I, refract_index, 1.0);\n            if(R.Dir == vec3(0)) { \n               //R.Dir = reflect(old_dir, I.N); // total reflection (what I should do I think) \n               R.Dir = old_dir; // I do that instead (not correct but looks better).\n            }\n        } else { // Entering matter\n            R = refract_ray(R, I, 1.0, refract_index);\n            R.Dir = normalize(R.Dir); // Needs to be unit, so that on exit, I.t is distance\n        }\n        I.t = FARAWAY;\n        if(!mesh_AABB(R, I)) { break; }  \n    }\n    return result;\n}\n\nvec3 sky(in Ray R) {\n#ifdef WHITE_BACKGROUND\n   return vec3(1);\n#else\n   return vec3(textureLod(iChannel1, R.Dir, 0.0));\n#endif    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n#ifdef DEBUG_DATA    \n   fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n   return; \n#endif    \n   float alpha = iTime;\n   float c = cos(alpha);\n   float s = sin(alpha);\n   Camera C = camera(\n       vec3(20.0*c, 20.0*s, 1.5),\n       vec3(0.0, 0.0, 0.0),\n       30.0       \n   );\n   Ray R = launch(C, fragCoord);\n   Intersection I = intersection();\n   mesh_AABB(R, I);\n \n   if(I.t == FARAWAY) {\n      fragColor.xyz = sky(R); \n    } else {        \n      float fresnel = 1.0 + dot(R.Dir,I.N) / length(R.Dir);\n      fresnel = clamp(fresnel, 0.0, 1.0); \n      fragColor.xyz = reflect_coeff * fresnel * sky(reflect_ray(R,I)); \n       \n      float l = multi_refract(R,I);\n      float d = exp(-l * extinction);\n      fragColor.xyz += mix(core_color, sky(R), d);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//  A version of https://www.shadertoy.com/view/3ltSzM (Crystal Bunny)\n// with smooth normals.\n//  \n//  Sources of the \"mesh compiler\" as a big comment in the end of Buffer A\n// (used to generate the AABB and encode it as GLSL sources).\n\n// Mesh data description: bbox and number of AABB nodes, points and normals\nconst vec3 bbox_min = 10.0*vec3(-0.253035,-0.340497,-0.346693);\nconst vec3 bbox_max = 10.0*vec3(0.252403,0.340004,0.345965);\nconst int AABB_data_size = 6399;\nconst int points_data_size = 1024;\nconst int normals_data_size = 1024;\n\n \n// Reads a 32 bits integer encoded in a pixel of BufferA\n// (implementation of get_data(), do not call directly)\nint get_data_raw(in sampler2D channel, in int width, in int index) {\n   vec4 col = 255.0*vec4(texelFetch(channel, ivec2(index%width,index/width), 0));\n   return (int(col.r)      ) | \n          (int(col.g) << 8 ) |\n          (int(col.b) << 16) |\n          (int(col.a) << 24) ;\n}\n\n\n// Reads a 32 bits integer encoded in a pixel of BufferA\n//  offset: one of RESOLUTION_OFFSET, MESH_DATA_OFFSET\n//  index: the index of the data to be read\n#define get_data(offset, index) \\\n    get_data_raw(iChannel0, int(iChannelResolution[0].x), (offset)+(index))\n\n// In BufferA, data is organized in four sections\n// - resolution: stores width and height of window, to detect resize/fullscreen\n// - AABB: the mixed AABB-nodes + mesh triangles structure\n// - points: compressed vertices coordinates  (xyz quantized in 10 bits packed in an int)\n// - normals: compressed per-vertices normals (xyz quantized in 10 bits packed in an int)\nconst int resolution_offset=0;\nconst int resolution_data_size=2;\nconst int AABB_offset =resolution_offset+resolution_data_size;\nconst int points_offset = AABB_offset+AABB_data_size;\nconst int normals_offset = points_offset+points_data_size;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#pragma optimize(off) // this pragma is unfortunately ignored by most WebGL implementations\n\n// mesh data in big arrays encoded in huge switch statements, send to Buffer A on the\n// first frame.\n// Sounds stupid, but I did not find a better way of sending a large array to ShaderToy\n// (some WebGL implementations, like Angle, do not like big static arrays).\n// This data is generated by the C++ code included as comments at the end of this file.\n\nivec4 AABB_data(in int i) {\n#  ifdef R\n#    undef R\n#  endif\n#  define R(i,a,b,c,d) case i: r=ivec4(a,b,c,d); break;\n  ivec4 r;\n  switch(i) {\nR(0x0000,0x00000000,0x3fffffff,0x00001565,0x00000000)R(0x0001,0x3ff837ff,0x000009ca,0x00009c3b,0x20682b85)R(0x0002,0x000005b6,0x00024c5e,0x0e182b80,0x00000258)R(0x0003,0x0002585e,0x0db81207,0x0000014c,0x00744c5e)R(0x0004,0x0d38117d,0x000000ee,0x00744c8a,0x0708117d)R(0x0005,0xffffffff,0x000003d9,0x000003f5,0x000003f4)R(0x0006,0x000003b2,0x000003da,0x000003d9,0x000003da)R(0x0007,0x000003db,0x000003d9,0x000003b3,0x000003da)R(0x0008,0x000003b2,0x000003db,0x000003f5,0x000003d9)R(0x0009,0x000003f5,0x000003f8,0x000003f4,0x000003b5)R(0x000a,0x000003db,0x000003da,0x000003b4,0x000003da)R(0x000b,0x000003b3,0x000003db,0x000003f6,0x000003f5)R(0x000c,0x000003b5,0x000003da,0x000003b4,0x000003f7)R(0x000d,0x000003f8,0x000003f5,0x00000380,0x000003b3)R(0x000e,0x0000037f,0x000003f6,0x000003f7,0x000003f5)R(0x000f,0x000003b5,0x000003dc,0x000003db,0x00000380)\nR(0x0010,0x000003b4,0x000003b3,0x000003dc,0x000003f6)R(0x0011,0x000003db,0x000003e0,0x000003f8,0x000003f7)R(0x0012,0x00000383,0x000003b5,0x000003b4,0x000003b6)R(0x0013,0x000003dc,0x000003b5,0x00000383,0x000003b6)R(0x0014,0x000003b5,0x00000382,0x000003b4,0x00000380)R(0x0015,0x000003de,0x000003f7,0x000003f6,0x000003e0)R(0x0016,0x000003f7,0x000003df,0x000003dd,0x000003f6)R(0x0017,0x000003dc,0x00000383,0x000003b4,0x00000382)R(0x0018,0x000003df,0x000003f7,0x000003de,0x000003b7)R(0x0019,0x000003dc,0x000003b6,0x000003de,0x000003f6)R(0x001a,0x000003dd,0x000003b7,0x000003dd,0x000003dc)R(0x001b,0x00000384,0x000003b6,0x00000383,0x000003ba)R(0x001c,0x000003e0,0x000003df,0x00000346,0x00000383)R(0x001d,0x00000382,0x00000384,0x000003b7,0x000003b6)R(0x001e,0x00000346,0x00000384,0x00000383,0x000003b9)R(0x001f,0x000003df,0x000003de,0x000003ba,0x000003df)\nR(0x0020,0x000003b9,0x000003bf,0x000003de,0x000003dd)R(0x0021,0x000003b8,0x000003dd,0x000003b7,0x00000347)R(0x0022,0x00000384,0x00000346,0x000003b9,0x000003de)R(0x0023,0x000003bb,0x00000385,0x000003b7,0x00000384)R(0x0024,0x000003bb,0x000003de,0x000003bf,0x000003bf)R(0x0025,0x000003dd,0x000003b8,0x00000347,0x00000385)R(0x0026,0x00000384,0x00000387,0x000003ba,0x000003b9)R(0x0027,0x00000385,0x000003b8,0x000003b7,0x000003b9)R(0x0028,0x000003bb,0x00000388,0x00000353,0x00000385)R(0x0029,0x00000347,0x00000387,0x000003b9,0x00000388)R(0x002a,0x000003bb,0x000003bf,0x0000038d,0x00000390)R(0x002b,0x000003b8,0x00000385,0x00000391,0x000003bf)R(0x002c,0x000003b8,0x00000388,0x000003bb,0x0000038d)R(0x002d,0x00000353,0x00000390,0x00000385,0x0000038d)R(0x002e,0x000003bf,0x00000391,0x00000391,0x000003b8)R(0x002f,0x00000390,0x00000387,0x00000388,0x0000034b)\nR(0x0030,0x0000034c,0x00000387,0x0000034b,0x0645285e)R(0x0031,0x0d381161,0xffffffff,0x00000309,0x00000348)R(0x0032,0x000002fe,0x00000309,0x00000354,0x00000353)R(0x0033,0x00000309,0x00000353,0x00000348,0x000002fe)R(0x0034,0x00000348,0x000002fd,0x00000348,0x00000353)R(0x0035,0x00000347,0x000002fd,0x00000348,0x00000347)R(0x0036,0x000002fd,0x00000347,0x000002fc,0x00000297)R(0x0037,0x000002fd,0x000002fc,0x000002fc,0x00000347)R(0x0038,0x00000346,0x00000297,0x000002fc,0x000002fb)R(0x0039,0x000002fc,0x00000346,0x00000345,0x000002fc)R(0x003a,0x00000345,0x000002fb,0x00000346,0x00000382)R(0x003b,0x00000345,0x000002fb,0x00000345,0x00000344)R(0x003c,0x00000345,0x00000382,0x00000381,0x000002fb)R(0x003d,0x00000344,0x000002fa,0x00000345,0x00000381)R(0x003e,0x00000344,0x00000381,0x00000382,0x00000380)R(0x003f,0x000002fa,0x00000344,0x00000343,0x00000344)\nR(0x0040,0x00000381,0x00000343,0x00000342,0x00000381)R(0x0041,0x00000380,0x000002fa,0x00000343,0x000002f9)R(0x0042,0x00025930,0x0db7a207,0xffffffff,0x000003fb)R(0x0043,0x000003fc,0x000003fa,0x000003e6,0x000003fc)R(0x0044,0x000003fb,0x000003fa,0x000003fc,0x000003f9)R(0x0045,0x000003e2,0x000003fa,0x000003e1,0x000003e1)R(0x0046,0x000003fa,0x000003f9,0x000003e7,0x000003fc)R(0x0047,0x000003e6,0x000003f9,0x000003fc,0x000003f3)R(0x0048,0x000003bd,0x000003e2,0x000003e1,0x000003e1)R(0x0049,0x000003f9,0x000003f8,0x000003f3,0x000003fc)R(0x004a,0x000003e7,0x000003f8,0x000003f9,0x000003f4)R(0x004b,0x000003f4,0x000003f9,0x000003f3,0x000003c6)R(0x004c,0x000003e7,0x000003e6,0x000003d8,0x000003f4)R(0x004d,0x000003f3,0x000003d7,0x000003f3,0x000003e7)R(0x004e,0x000003d8,0x000003f3,0x000003d7,0x000003e1)R(0x004f,0x000003f8,0x000003e0,0x000003d9,0x000003f4)\nR(0x0050,0x000003d8,0x000003bd,0x000003e1,0x000003bc)R(0x0051,0x000003c7,0x000003e7,0x000003c6,0x000003d7)R(0x0052,0x000003e7,0x000003c7,0x000003bc,0x000003e1)R(0x0053,0x000003e0,0x0000038a,0x000003bd,0x000003bc)R(0x0054,0x000003b2,0x000003d9,0x000003d8,0x000003b1)R(0x0055,0x000003d8,0x000003d7,0x00000399,0x000003c7)R(0x0056,0x000003c6,0x000003b0,0x000003d7,0x000003c7)R(0x0057,0x000003b2,0x000003d8,0x000003b1,0x0000038a)R(0x0058,0x000003bc,0x00000389,0x000003bc,0x000003e0)R(0x0059,0x000003ba,0x000003b1,0x000003d7,0x000003b0)R(0x005a,0x0000034d,0x0000038a,0x00000389,0x00000389)R(0x005b,0x000003bc,0x000003ba,0x0000034d,0x00000389)R(0x005c,0x0000034c,0x00000389,0x000003ba,0x00000387)R(0x005d,0x0000034c,0x00000389,0x00000387,0x0000039a)R(0x005e,0x000003c7,0x00000399,0x000003b0,0x000003c7)R(0x005f,0x0000039a,0x0000037f,0x000003b2,0x000003b1)\nR(0x0060,0x0000037e,0x000003b1,0x000003b0,0x0000037f)R(0x0061,0x000003b3,0x000003b2,0x00000361,0x0000039a)R(0x0062,0x00000399,0x0000037e,0x000003b0,0x0000039a)R(0x0063,0x0000037f,0x000003b1,0x0000037e,0x00000362)R(0x0064,0x0000039a,0x00000361,0x0000037e,0x0000039a)R(0x0065,0x00000362,0x00000341,0x0000037f,0x0000037e)R(0x0066,0x00000342,0x00000380,0x0000037f,0x00000342)R(0x0067,0x0000037f,0x00000341,0x00000340,0x0000037e)R(0x0068,0x00000362,0x00000341,0x0000037e,0x00000340)R(0x0069,0x00000340,0x00000362,0x0000031c,0x000002f8)R(0x006a,0x00000342,0x00000341,0x00000343,0x00000381)R(0x006b,0x00000342,0x000002f8,0x00000343,0x00000342)R(0x006c,0x000002f7,0x00000341,0x00000340,0x000002f8)R(0x006d,0x00000341,0x000002f7,0x000002f6,0x00000340)R(0x006e,0x0000031c,0x000002f7,0x00000340,0x000002f6)R(0x006f,0x000002f6,0x0000031c,0x000002bd,0x000002f9)\nR(0x0070,0x00000343,0x000002f8,0x00000294,0x000002f8)R(0x0071,0x000002f7,0x000002c9,0x000002f6,0x000002bd)R(0x0072,0x00000294,0x000002f9,0x000002f8,0x00000293)R(0x0073,0x000002f7,0x000002f6,0x00024dcd,0x0e182b80)R(0x0074,0x000001b0,0x00024dcd,0x0d381af2,0x000000ee)R(0x0075,0x000255d6,0x03681af0,0xffffffff,0x000003c6)R(0x0076,0x000003e5,0x000003c5,0x000003c6,0x000003e6)R(0x0077,0x000003e5,0x00000399,0x000003c6,0x000003c5)R(0x0078,0x000003c5,0x000003e5,0x000003c4,0x00000399)R(0x0079,0x000003c5,0x00000398,0x00000398,0x000003c5)R(0x007a,0x000003c4,0x000003e5,0x000003e6,0x000003e4)R(0x007b,0x000003c4,0x000003e5,0x000003c3,0x000003c3)R(0x007c,0x000003e5,0x000003e4,0x00000398,0x000003c4)R(0x007d,0x00000397,0x000003e6,0x000003fb,0x000003e4)R(0x007e,0x00000396,0x000003c4,0x000003c3,0x00000397)R(0x007f,0x000003c4,0x00000396,0x000003c3,0x000003e4)\nR(0x0080,0x000003c2,0x000003e4,0x000003fb,0x000003e3)R(0x0081,0x00000396,0x000003c3,0x00000395,0x000003c2)R(0x0082,0x000003e4,0x000003e3,0x00000395,0x000003c3)R(0x0083,0x000003c2,0x0000035f,0x00000397,0x00000396)R(0x0084,0x000003e3,0x000003fb,0x000003fa,0x0000035d)R(0x0085,0x00000396,0x00000395,0x0000035f,0x00000396)R(0x0086,0x0000035d,0x00000395,0x000003c2,0x00000394)R(0x0087,0x000003c2,0x000003e3,0x000003c1,0x0000035e)R(0x0088,0x00000395,0x00000394,0x0000035e,0x00000394)R(0x0089,0x0000035c,0x0000035d,0x00000395,0x0000035e)R(0x008a,0x00000317,0x0000035e,0x0000035c,0x00000394)R(0x008b,0x000003c2,0x000003c1,0x0000035d,0x0000035e)R(0x008c,0x00000317,0x00000318,0x0000035f,0x0000035d)R(0x008d,0x00000318,0x0000035d,0x00000317,0x000003e3)R(0x008e,0x000003fa,0x000003e2,0x00000394,0x000003c1)R(0x008f,0x00000392,0x000003c1,0x000003e3,0x000003c0)\nR(0x0090,0x000003c0,0x000003e3,0x000003e2,0x00000392)R(0x0091,0x000003c1,0x0000038f,0x0000038f,0x000003c1)R(0x0092,0x000003c0,0x000003c0,0x000003e2,0x000003be)R(0x0093,0x0000038f,0x000003c0,0x0000038e,0x000003be)R(0x0094,0x000003e2,0x000003bd,0x0000038e,0x000003c0)R(0x0095,0x000003be,0x00000352,0x0000038f,0x0000038e)R(0x0096,0x0000038e,0x000003be,0x0000038b,0x0000038b)R(0x0097,0x000003be,0x000003bd,0x00000352,0x0000038e)R(0x0098,0x00000351,0x0000038b,0x000003bd,0x0000038a)R(0x0099,0x00000351,0x0000038e,0x0000038b,0x00000308)R(0x009a,0x00000352,0x00000351,0x0000034e,0x0000038b)R(0x009b,0x0000038a,0x00000351,0x0000038b,0x0000034e)R(0x009c,0x0000034e,0x0000038a,0x0000034d,0x00000308)R(0x009d,0x00000351,0x00000307,0x00000307,0x00000351)R(0x009e,0x0000034e,0x00000305,0x0000034e,0x0000034d)R(0x009f,0x00000307,0x0000034e,0x00000305,0x000002a7)\nR(0x00a0,0x00000308,0x00000307,0x000002ff,0x00000308)R(0x00a1,0x000002a7,0x02124dcd,0x0d34e2f2,0xffffffff)R(0x00a2,0x00000265,0x000002ca,0x00000264,0x00000361)R(0x00a3,0x00000399,0x00000398,0x00000264,0x000002ca)R(0x00a4,0x000002c9,0x00000360,0x00000398,0x00000397)R(0x00a5,0x00000361,0x00000398,0x00000360,0x000001fc)R(0x00a6,0x00000265,0x000001fb,0x000001fb,0x00000265)R(0x00a7,0x00000264,0x000001a0,0x000001fc,0x0000019f)R(0x00a8,0x00000360,0x00000397,0x0000035f,0x00000264)R(0x00a9,0x000002c9,0x000002bd,0x0000031b,0x00000361)R(0x00aa,0x00000360,0x0000019f,0x000001fc,0x000001fb)R(0x00ab,0x0000031b,0x00000362,0x00000361,0x000001fb)R(0x00ac,0x00000264,0x00000257,0x00000264,0x000002bd)R(0x00ad,0x00000257,0x0000031b,0x00000360,0x0000031a)R(0x00ae,0x0000031a,0x00000360,0x0000035f,0x0000031c)R(0x00af,0x00000362,0x0000031b,0x000002bd,0x0000031c)\nR(0x00b0,0x000002bc,0x000002bc,0x0000031c,0x0000031b)R(0x00b1,0x00000257,0x000002bd,0x000002bc,0x0000019f)R(0x00b2,0x000001fb,0x000001ed,0x000002bc,0x0000031b)R(0x00b3,0x000002bb,0x000001fb,0x00000257,0x000001ed)R(0x00b4,0x000002bb,0x0000031b,0x0000031a,0x000002b8)R(0x00b5,0x00000318,0x00000317,0x00000257,0x000002bc)R(0x00b6,0x00000256,0x0000031a,0x0000035f,0x00000319)R(0x00b7,0x00000319,0x0000035f,0x00000318,0x00000256)R(0x00b8,0x000002bc,0x000002bb,0x000001ed,0x00000257)R(0x00b9,0x00000256,0x000002bb,0x0000031a,0x00000319)R(0x00ba,0x0000019f,0x000001ed,0x00000193,0x000002b9)R(0x00bb,0x00000318,0x000002b8,0x000002b9,0x00000319)R(0x00bc,0x00000318,0x00000256,0x000002bb,0x000002ba)R(0x00bd,0x000002bb,0x00000319,0x000002ba,0x000001ed)R(0x00be,0x00000256,0x00000255,0x00000253,0x000002b9)R(0x00bf,0x000002b8,0x00000193,0x000001ed,0x000001ec)\nR(0x00c0,0x00000256,0x000002ba,0x00000255,0x000001ed)R(0x00c1,0x00000255,0x000001ec,0x000002ba,0x00000319)R(0x00c2,0x000002b9,0x00000254,0x000002ba,0x000002b9)R(0x00c3,0x00000255,0x000002ba,0x00000254,0x00000254)R(0x00c4,0x000002b9,0x00000253,0x000001ec,0x00000255)R(0x00c5,0x00000254,0x00139eb4,0x0e182b80,0x00000132)R(0x00c6,0x00139eb6,0x07082b80,0xffffffff,0x00000316)R(0x00c7,0x0000035c,0x0000035b,0x00000317,0x0000035c)R(0x00c8,0x00000316,0x0000035c,0x00000393,0x0000035b)R(0x00c9,0x0000035c,0x00000394,0x00000393,0x00000316)R(0x00ca,0x0000035b,0x00000315,0x000002b7,0x00000317)R(0x00cb,0x00000316,0x000002b7,0x00000316,0x00000315)R(0x00cc,0x0000035b,0x00000393,0x0000035a,0x00000393)R(0x00cd,0x00000394,0x00000392,0x00000315,0x0000035b)R(0x00ce,0x0000035a,0x000002b8,0x00000317,0x000002b7)R(0x00cf,0x0000035a,0x00000393,0x00000359,0x00000359)\nR(0x00d0,0x00000393,0x00000392,0x000002b7,0x00000315)R(0x00d1,0x000002b6,0x00000315,0x0000035a,0x00000314)R(0x00d2,0x000002b6,0x00000315,0x00000314,0x00000252)R(0x00d3,0x000002b8,0x000002b7,0x00000252,0x000002b7)R(0x00d4,0x000002b6,0x00000313,0x0000035a,0x00000359)R(0x00d5,0x00000314,0x0000035a,0x00000313,0x00000359)R(0x00d6,0x00000392,0x00000358,0x000002b6,0x00000314)R(0x00d7,0x000002b5,0x00000253,0x000002b8,0x00000252)R(0x00d8,0x00000252,0x000002b6,0x00000251,0x00000251)R(0x00d9,0x000002b6,0x000002b5,0x00000358,0x00000392)R(0x00da,0x0000038f,0x00000313,0x00000359,0x00000312)R(0x00db,0x000002b4,0x00000314,0x00000313,0x000002b5)R(0x00dc,0x00000314,0x000002b4,0x00000312,0x00000359)R(0x00dd,0x00000358,0x000001ea,0x00000253,0x00000252)R(0x00de,0x000001ea,0x00000252,0x00000251,0x00000251)R(0x00df,0x000002b5,0x0000024f,0x0000024f,0x000002b5)\nR(0x00e0,0x000002b4,0x000002b4,0x00000313,0x000002b3)R(0x00e1,0x000002b3,0x00000313,0x00000312,0x000001ea)R(0x00e2,0x00000251,0x000001e9,0x00000358,0x0000038f)R(0x00e3,0x00000352,0x00000312,0x00000358,0x00000311)R(0x00e4,0x000001e9,0x00000251,0x0000024f,0x0000024f)R(0x00e5,0x000002b4,0x0000024e,0x0000024e,0x000002b4)R(0x00e6,0x000002b3,0x000002b3,0x00000312,0x00000311)R(0x00e7,0x00000311,0x00000358,0x00000352,0x000001e9)R(0x00e8,0x0000024f,0x000001e7,0x000001e7,0x0000024f)R(0x00e9,0x0000024e,0x0000024e,0x000002b3,0x0000024d)R(0x00ea,0x000002b3,0x00000311,0x000002b2,0x00000190)R(0x00eb,0x000001e9,0x000001e7,0x000001e7,0x0000024e)R(0x00ec,0x0000024d,0x00000311,0x00000352,0x00000310)R(0x00ed,0x0000024d,0x000002b3,0x000002b2,0x000002b2)R(0x00ee,0x00000311,0x00000310,0x000001e7,0x0000024d)R(0x00ef,0x000001e8,0x00000190,0x000001e7,0x0000018f)\nR(0x00f0,0x00000310,0x00000352,0x00000308,0x0000024d)R(0x00f1,0x000002b2,0x00000250,0x000001e7,0x000001e8)R(0x00f2,0x0000018f,0x0000024d,0x00000250,0x000001e8)R(0x00f3,0x000002b2,0x00000310,0x000002b0,0x00000250)R(0x00f4,0x000002b2,0x000002b0,0x0000018f,0x000001e8)R(0x00f5,0x000001e6,0x000001e8,0x00000250,0x0000024c)R(0x00f6,0x000001e8,0x0000024c,0x000001e6,0x000002ff)R(0x00f7,0x00000310,0x00000308,0x000002b0,0x00000310)R(0x00f8,0x000002af,0x000002b0,0x000002b1,0x00000250)R(0x00f9,0x00000250,0x000002b1,0x0000024c,0x000002af)R(0x00fa,0x00000310,0x000002ff,0x0000018f,0x000001e6)R(0x00fb,0x0000018e,0x000001e6,0x0000024c,0x000001e5)R(0x00fc,0x0000024c,0x000002b1,0x0000024b,0x0000018e)R(0x00fd,0x000001e6,0x000001e5,0x0000024a,0x000002b1)R(0x00fe,0x000002b0,0x00000249,0x000002b0,0x000002af)R(0x00ff,0x05e3cab4,0x0e17df39,0xffffffff,0x00000151)\nR(0x0100,0x0000019f,0x00000193,0x00000151,0x00000193)R(0x0101,0x00000146,0x00000193,0x000001ec,0x00000192)R(0x0102,0x00000146,0x00000193,0x00000192,0x000001ec)R(0x0103,0x00000254,0x000001eb,0x000001eb,0x00000254)R(0x0104,0x00000253,0x00000192,0x000001ec,0x000001eb)R(0x0105,0x000001eb,0x00000253,0x000001ea,0x00000146)R(0x0106,0x00000192,0x00000145,0x00000192,0x000001eb)R(0x0107,0x00000191,0x00000191,0x000001eb,0x000001ea)R(0x0108,0x00000191,0x000001ea,0x000001e9,0x00000145)R(0x0109,0x00000192,0x00000191,0x00000191,0x000001e9)R(0x010a,0x00000190,0x00000145,0x00000191,0x00000144)R(0x010b,0x00000144,0x00000191,0x00000190,0x00000107)R(0x010c,0x00000145,0x00000144,0x00000144,0x00000190)R(0x010d,0x00000143,0x00000107,0x00000144,0x00000106)R(0x010e,0x00000143,0x00000190,0x0000018f,0x00000106)R(0x010f,0x00000144,0x00000143,0x00000143,0x0000018f)\nR(0x0110,0x00000142,0x00000106,0x00000143,0x00000105)R(0x0111,0x00000142,0x0000018f,0x0000018e,0x00000105)R(0x0112,0x00000143,0x00000142,0x000000d1,0x00000106)R(0x0113,0x00000105,0x000000d1,0x00000105,0x00000104)R(0x0114,0x0a709c3b,0x20681b85,0x00000211,0x0b009d26)R(0x0115,0x1fc49385,0x000000e8,0x0b109d26,0x1f74927a)R(0x0116,0xffffffff,0x000002be,0x000002ce,0x0000026a)R(0x0117,0x0000026a,0x000002cd,0x00000269,0x0000026a)R(0x0118,0x000002ce,0x000002cd,0x0000028d,0x000002ce)R(0x0119,0x000002be,0x0000028c,0x000002be,0x00000259)R(0x011a,0x00000269,0x000002cd,0x00000268,0x000002ce)R(0x011b,0x000002f3,0x000002cd,0x0000028d,0x000002be)R(0x011c,0x0000028c,0x0000028e,0x000002ce,0x0000028d)R(0x011d,0x0000028e,0x000002f3,0x000002ce,0x000002cd)R(0x011e,0x000002f3,0x000002cc,0x00000268,0x000002cd)R(0x011f,0x000002cc,0x0000021d,0x0000028d,0x0000028c)\nR(0x0120,0x0000021e,0x0000028e,0x0000028d,0x0000028f)R(0x0121,0x000002f3,0x0000028e,0x000002f3,0x000002f4)R(0x0122,0x000002cc,0x0000021e,0x0000028d,0x0000021d)R(0x0123,0x0000028f,0x000002f4,0x000002f3,0x00000268)R(0x0124,0x000002cc,0x000002cb,0x0000021f,0x0000028f)R(0x0125,0x0000028e,0x0000021f,0x0000028e,0x0000021e)R(0x0126,0x000002f4,0x000002f5,0x000002cc,0x000001b9)R(0x0127,0x0000021e,0x0000021d,0x00000291,0x000002f4)R(0x0128,0x0000028f,0x000002cb,0x000002cc,0x000002ca)R(0x0129,0x00000221,0x0000028f,0x0000021f,0x000001ba)R(0x012a,0x0000021f,0x0000021e,0x000002cc,0x000002f5)R(0x012b,0x000002ca,0x00000291,0x000002f5,0x000002f4)R(0x012c,0x00000221,0x00000291,0x0000028f,0x000001ba)R(0x012d,0x0000021e,0x000001b9,0x00000265,0x000002cb)R(0x012e,0x000002ca,0x000001bc,0x00000221,0x0000021f)R(0x012f,0x000001bc,0x0000021f,0x000001ba,0x00000292)\nR(0x0130,0x000002f5,0x00000291,0x00000222,0x00000291)R(0x0131,0x00000221,0x00000165,0x000001ba,0x000001b9)R(0x0132,0x000002ca,0x000002f5,0x000002c9,0x00000222)R(0x0133,0x00000292,0x00000291,0x000001bd,0x00000221)R(0x0134,0x000001bc,0x000002c9,0x000002f5,0x00000292)R(0x0135,0x000001bd,0x00000222,0x00000221,0x00000167)R(0x0136,0x000001bc,0x000001ba,0x00000167,0x000001ba)R(0x0137,0x00000165,0x00000168,0x000001bd,0x000001bc)R(0x0138,0x00000223,0x00000292,0x00000222,0x00000168)R(0x0139,0x000001bc,0x00000167,0x00000293,0x000002c9)R(0x013a,0x00000292,0x000001be,0x00000222,0x000001bd)R(0x013b,0x00000120,0x00000167,0x00000165,0x00000223)R(0x013c,0x00000293,0x00000292,0x00000293,0x000002f6)R(0x013d,0x000002c9,0x000001be,0x00000223,0x00000222)R(0x013e,0x00000168,0x000001be,0x000001bd,0x00000121)R(0x013f,0x00000168,0x00000167,0x00000121,0x00000167)\nR(0x0140,0x00000120,0x00000223,0x00000294,0x00000293)R(0x0141,0x0b009e3d,0x1fc48b85,0xffffffff,0x00000266)R(0x0142,0x000002cb,0x00000265,0x00000258,0x000002be)R(0x0143,0x0000026a,0x00000268,0x000002cb,0x00000267)R(0x0144,0x00000259,0x000002be,0x00000258,0x00000267)R(0x0145,0x000002cb,0x00000266,0x000001fc,0x00000266)R(0x0146,0x00000265,0x000001ff,0x00000269,0x00000268)R(0x0147,0x00000200,0x0000026a,0x00000269,0x000001ff)R(0x0148,0x00000268,0x00000267,0x00000258,0x0000026a)R(0x0149,0x00000200,0x000001ef,0x00000259,0x00000258)R(0x014a,0x00000200,0x00000269,0x000001ff,0x000001fd)R(0x014b,0x00000267,0x00000266,0x000001fd,0x00000266)R(0x014c,0x000001fc,0x000001ef,0x00000258,0x000001ee)R(0x014d,0x000001ee,0x00000258,0x00000200,0x000001ff)R(0x014e,0x00000267,0x000001fe,0x000001fe,0x00000267)R(0x014f,0x000001fd,0x000001a0,0x000001fd,0x000001fc)\nR(0x0150,0x000001a3,0x00000200,0x000001ff,0x00000195)R(0x0151,0x000001ef,0x000001ee,0x00000195,0x000001f0)R(0x0152,0x000001ef,0x000001ee,0x00000200,0x000001a4)R(0x0153,0x000001a3,0x000001ff,0x000001fe,0x00000151)R(0x0154,0x000001a0,0x0000019f,0x000001a4,0x00000200)R(0x0155,0x000001a3,0x000001a1,0x000001fe,0x000001fd)R(0x0156,0x000001a1,0x000001fd,0x000001a0,0x00000195)R(0x0157,0x000001ee,0x00000194,0x00000194,0x000001ee)R(0x0158,0x000001a4,0x000001a3,0x000001fe,0x000001a2)R(0x0159,0x00000152,0x000001a0,0x00000151,0x000001a2)R(0x015a,0x000001fe,0x000001a1,0x00000155,0x000001a4)R(0x015b,0x000001a3,0x00000148,0x00000195,0x00000194)R(0x015c,0x00000152,0x000001a1,0x000001a0,0x00000148)R(0x015d,0x00000196,0x00000195,0x00000194,0x000001a4)R(0x015e,0x00000155,0x00000155,0x000001a3,0x000001a2)R(0x015f,0x00000110,0x00000152,0x00000151,0x00000148)\nR(0x0160,0x00000194,0x00000147,0x00000153,0x000001a2)R(0x0161,0x000001a1,0x00000149,0x00000196,0x00000148)R(0x0162,0x00000147,0x00000194,0x00000155,0x00000153)R(0x0163,0x000001a1,0x00000152,0x00000155,0x000001a2)R(0x0164,0x00000154,0x0000010a,0x00000149,0x00000148)R(0x0165,0x0000010a,0x00000148,0x00000147,0x00000154)R(0x0166,0x000001a2,0x00000153,0x00000111,0x00000152)R(0x0167,0x00000110,0x00000111,0x00000153,0x00000152)R(0x0168,0x00000147,0x00000155,0x00000113,0x00000113)R(0x0169,0x00000155,0x00000154,0x0000010a,0x00000147)R(0x016a,0x00000109,0x0000010a,0x0000014a,0x00000149)R(0x016b,0x000000d5,0x0000010b,0x0000010a,0x000000a9)R(0x016c,0x000000d5,0x000000d4,0x00000109,0x00000147)R(0x016d,0x00000113,0x0000014a,0x00000197,0x00000149)R(0x016e,0x000000d5,0x0000010a,0x00000109,0x00000112)R(0x016f,0x00000154,0x00000153,0x0000010b,0x0000014a)\nR(0x0170,0x0000010a,0x00000112,0x00000153,0x00000111)R(0x0171,0x000000d5,0x00000109,0x000000d4,0x00000113)R(0x0172,0x00000154,0x00000112,0x00000109,0x00000113)R(0x0173,0x000000db,0x000000d4,0x00000109,0x000000db)R(0x0174,0x000000da,0x00000112,0x00000111,0x000000db)R(0x0175,0x00000113,0x00000112,0x000000d4,0x000000db)R(0x0176,0x000000ad,0x000000db,0x00000112,0x000000da)R(0x0177,0x000000ad,0x000000db,0x000000da,0x0a73c03b)R(0x0178,0x20681b85,0x00000130,0x0a73c03b,0x20681989)R(0x0179,0x000000b8,0x0a75403b,0x20681902,0xffffffff)R(0x017a,0x000002a8,0x00000309,0x000002fe,0x000002a9)R(0x017b,0x00000309,0x000002a8,0x00000297,0x000002fb)R(0x017c,0x00000296,0x00000298,0x000002fe,0x000002fd)R(0x017d,0x00000298,0x000002fd,0x00000297,0x000002a8)R(0x017e,0x000002fe,0x00000299,0x00000227,0x00000297)R(0x017f,0x00000296,0x00000299,0x000002fe,0x00000298)\nR(0x0180,0x00000227,0x00000298,0x00000297,0x00000227)R(0x0181,0x00000296,0x00000226,0x00000290,0x000002a8)R(0x0182,0x00000299,0x00000228,0x00000298,0x00000227)R(0x0183,0x00000228,0x00000299,0x00000298,0x00000240)R(0x0184,0x000002a8,0x00000290,0x000001c1,0x00000227)R(0x0185,0x00000226,0x000001c1,0x00000228,0x00000227)R(0x0186,0x00000229,0x00000299,0x00000228,0x00000290)R(0x0187,0x00000299,0x00000229,0x00000240,0x00000290)R(0x0188,0x0000022a,0x000001c1,0x00000226,0x000001c0)R(0x0189,0x000001c2,0x00000228,0x000001c1,0x000001c2)R(0x018a,0x00000229,0x00000228,0x00000220,0x00000290)R(0x018b,0x00000229,0x0000022a,0x00000290,0x00000220)R(0x018c,0x0000016b,0x000001c1,0x000001c0,0x0000016b)R(0x018d,0x000001c2,0x000001c1,0x000001c3,0x00000229)R(0x018e,0x000001c2,0x00000220,0x00000229,0x000001c3)R(0x018f,0x0000016b,0x000001c0,0x0000016a,0x0000016c)\nR(0x0190,0x000001c2,0x0000016b,0x0000016c,0x000001c3)R(0x0191,0x000001c2,0x000001bb,0x00000220,0x000001c3)R(0x0192,0x000001c4,0x00000220,0x000001bb,0x00000123)R(0x0193,0x0000016b,0x0000016a,0x00000123,0x0000016c)R(0x0194,0x0000016b,0x0000016d,0x000001c3,0x0000016c)R(0x0195,0x000001bb,0x000001c3,0x0000016d,0x00000124)R(0x0196,0x0000016d,0x0000016c,0x00000124,0x0000016c)R(0x0197,0x00000123,0x00000166,0x000001bb,0x0000016d)R(0x0198,0x00000166,0x0000016d,0x00000124,0x000000e7)R(0x0199,0x00000124,0x00000123,0x0000011f,0x00000166)R(0x019a,0x00000124,0x0000011f,0x00000124,0x000000e7)R(0x019b,0x000000e4,0x0000011f,0x000000e7,0x0aa3c0e3)R(0x019c,0x20066589,0xffffffff,0x00000294,0x000002f7)R(0x019d,0x00000293,0x00000296,0x000002fb,0x000002fa)R(0x019e,0x00000295,0x000002fa,0x000002f9,0x00000295)R(0x019f,0x000002f9,0x00000294,0x00000296,0x000002fa)\nR(0x01a0,0x00000295,0x00000224,0x00000295,0x00000294)R(0x01a1,0x00000224,0x00000294,0x00000223,0x00000225)R(0x01a2,0x00000296,0x00000295,0x00000225,0x00000295)R(0x01a3,0x00000224,0x00000226,0x00000296,0x00000225)R(0x01a4,0x000001be,0x00000224,0x00000223,0x000001bf)R(0x01a5,0x00000225,0x00000224,0x000001c0,0x00000226)R(0x01a6,0x00000225,0x000001bf,0x00000224,0x000001be)R(0x01a7,0x000001c0,0x00000225,0x000001bf,0x00000168)R(0x01a8,0x000001bf,0x000001be,0x0000016a,0x000001c0)R(0x01a9,0x000001bf,0x0000016a,0x000001bf,0x00000169)R(0x01aa,0x00000169,0x000001bf,0x00000168,0x00000122)R(0x01ab,0x0000016a,0x00000169,0x00000121,0x00000169)R(0x01ac,0x00000168,0x00000123,0x0000016a,0x00000122)R(0x01ad,0x00000122,0x00000169,0x00000121,0x000000e7)R(0x01ae,0x00000123,0x00000122,0x000000e5,0x00000122)R(0x01af,0x00000121,0x000000e7,0x00000122,0x000000e6)\nR(0x01b0,0x000000e6,0x00000122,0x000000e5,0x000000e5)R(0x01b1,0x00000121,0x00000120,0x0bd3db03,0x2007db85)R(0x01b2,0xffffffff,0x000000a9,0x000000d4,0x000000a8)R(0x01b3,0x000000da,0x00000111,0x000000d9,0x000000a8)R(0x01b4,0x000000d4,0x000000ad,0x000000d9,0x00000111)R(0x01b5,0x00000110,0x00000110,0x00000151,0x00000146)R(0x01b6,0x000000ad,0x000000da,0x000000ac,0x00000083)R(0x01b7,0x000000a9,0x000000a8,0x000000ac,0x000000da)R(0x01b8,0x000000d9,0x000000d9,0x00000110,0x00000108)R(0x01b9,0x00000110,0x00000146,0x00000108,0x000000a8)R(0x01ba,0x000000ad,0x00000085,0x00000085,0x000000ad)R(0x01bb,0x000000ac,0x00000083,0x000000a8,0x00000082)R(0x01bc,0x00000082,0x000000a8,0x00000085,0x000000ac)R(0x01bd,0x000000d9,0x000000d3,0x00000108,0x00000146)R(0x01be,0x00000145,0x000000d9,0x00000108,0x000000d3)R(0x01bf,0x00000085,0x000000ac,0x000000a7,0x0000005f)\nR(0x01c0,0x00000083,0x00000082,0x000000ac,0x000000d3)R(0x01c1,0x000000a7,0x00000082,0x00000085,0x00000061)R(0x01c2,0x00000108,0x00000145,0x00000107,0x000000d3)R(0x01c3,0x00000108,0x00000107,0x00000085,0x000000a7)R(0x01c4,0x00000081,0x0000005f,0x00000082,0x00000061)R(0x01c5,0x00000061,0x00000085,0x00000081,0x000000a7)R(0x01c6,0x000000d3,0x000000a6,0x00000081,0x000000a7)R(0x01c7,0x000000a6,0x000000d3,0x00000107,0x000000d2)R(0x01c8,0x0000005f,0x00000061,0x00000043,0x000000a6)R(0x01c9,0x000000d3,0x000000d2,0x00000061,0x00000081)R(0x01ca,0x0000005e,0x00000042,0x0000005f,0x00000043)R(0x01cb,0x000000d2,0x00000107,0x00000106,0x00000043)R(0x01cc,0x00000061,0x0000005e,0x00000081,0x000000a6)R(0x01cd,0x00000080,0x0000005e,0x00000081,0x00000080)R(0x01ce,0x000000a6,0x000000d2,0x000000a5,0x00000080)R(0x01cf,0x000000a6,0x000000a5,0x000000d2,0x00000106)\nR(0x01d0,0x000000d1,0x00000042,0x00000043,0x0000002b)R(0x01d1,0x000000a5,0x000000d2,0x000000d1,0x00000043)R(0x01d2,0x0000005e,0x00000041,0x0000005e,0x00000080)R(0x01d3,0x0000005d,0x00000080,0x000000a5,0x0000007f)R(0x01d4,0x000000a5,0x000000d1,0x000000d0,0x0000002b)R(0x01d5,0x00000043,0x00000041,0x0000005d,0x00000080)R(0x01d6,0x0000007f,0x00000041,0x0000005e,0x0000005d)R(0x01d7,0x1d100000,0x3ff837ff,0x0000058e,0x1d102cc2)R(0x01d8,0x313837ff,0x00000278,0x1d105cc2,0x31383672)R(0x01d9,0x0000011a,0x1d105cc6,0x2888366c,0x00000081)R(0x01da,0x1e205d36,0x2884c66c,0xffffffff,0x000002bf)R(0x01db,0x000002f2,0x0000028a,0x0000028a,0x000002f2)R(0x01dc,0x00000289,0x0000028b,0x000002bf,0x0000028a)R(0x01dd,0x00000259,0x000002bf,0x0000028c,0x0000021b)R(0x01de,0x0000028a,0x00000289,0x0000028c,0x000002bf)R(0x01df,0x0000028b,0x0000021c,0x0000028b,0x0000028a)\nR(0x01e0,0x0000021c,0x0000028a,0x0000021b,0x0000021d)R(0x01e1,0x0000028c,0x0000028b,0x0000021d,0x0000028b)R(0x01e2,0x0000021c,0x000001b7,0x0000021c,0x0000021b)R(0x01e3,0x000001b8,0x0000021d,0x0000021c,0x000001b8)R(0x01e4,0x0000021c,0x000001b7,0x000001b9,0x0000021d)R(0x01e5,0x000001b8,0x00000163,0x000001b8,0x000001b7)R(0x01e6,0x00000164,0x000001b9,0x000001b8,0x00000163)R(0x01e7,0x000001b7,0x00000162,0x00000164,0x000001b8)R(0x01e8,0x00000163,0x00000165,0x000001b9,0x00000164)R(0x01e9,0x0000011c,0x00000163,0x00000162,0x0000011d)R(0x01ea,0x00000164,0x00000163,0x0000011e,0x00000165)R(0x01eb,0x00000164,0x0000011d,0x00000163,0x0000011c)R(0x01ec,0x0000011e,0x00000164,0x0000011d,0x00000120)R(0x01ed,0x00000165,0x0000011e,0x000000e1,0x0000011d)R(0x01ee,0x0000011c,0x000000e2,0x0000011e,0x0000011d)R(0x01ef,0x000000e5,0x00000120,0x0000011e,0x000000e2)\nR(0x01f0,0x0000011d,0x000000e1,0x000000e3,0x0000011e)R(0x01f1,0x000000e2,0x000000e5,0x0000011e,0x000000e3)R(0x01f2,0x1d144cc6,0x2798366c,0xffffffff,0x000000e8)R(0x01f3,0x0000011f,0x000000e4,0x000000b6,0x000000e7)R(0x01f4,0x000000e6,0x000000e4,0x000000e7,0x000000b6)R(0x01f5,0x000000b5,0x000000e6,0x000000e5,0x000000b6)R(0x01f6,0x000000e6,0x000000b5,0x000000b4,0x000000e4)R(0x01f7,0x000000b6,0x000000b5,0x000000e5,0x000000e3)R(0x01f8,0x000000b7,0x000000e4,0x000000b4,0x0000008c)R(0x01f9,0x000000b6,0x000000b5,0x000000b4,0x000000b6)R(0x01fa,0x0000008c,0x000000b5,0x000000e3,0x000000b3)R(0x01fb,0x0000008c,0x000000b5,0x000000b3,0x0000008b)R(0x01fc,0x000000b4,0x0000008c,0x000000b3,0x000000e3)R(0x01fd,0x000000e2,0x0000008c,0x000000b3,0x0000008a)R(0x01fe,0x00000068,0x0000008c,0x0000008a,0x0000008b)R(0x01ff,0x0000008c,0x00000068,0x0000008a,0x000000b3)\nR(0x0200,0x000000b2,0x000000b3,0x000000e2,0x000000b2)R(0x0201,0x00000068,0x0000008a,0x00000066,0x00000066)R(0x0202,0x0000008a,0x00000089,0x0000008a,0x000000b2)R(0x0203,0x00000089,0x00000046,0x00000065,0x00000064)R(0x0204,0x00000046,0x00000066,0x00000065,0x000000b2)R(0x0205,0x000000e2,0x000000e1,0x00000067,0x0000008b)R(0x0206,0x00000068,0x00000066,0x00000089,0x00000065)R(0x0207,0x00000048,0x00000068,0x00000066,0x00000048)R(0x0208,0x00000066,0x00000046,0x00000065,0x00000088)R(0x0209,0x00000064,0x00000065,0x00000089,0x00000088)R(0x020a,0x00000067,0x00000068,0x00000048,0x00000089)R(0x020b,0x000000b2,0x000000b1,0x0000002f,0x00000048)R(0x020c,0x00000046,0x000000b2,0x000000e1,0x000000b1)R(0x020d,0x00000089,0x000000b1,0x00000088,0x25c0a0c2)R(0x020e,0x31356672,0x000000a9,0x25c0a0c2,0x3132b272)R(0x020f,0xffffffff,0x000002e4,0x00000338,0x00000334)\nR(0x0210,0x00000335,0x00000338,0x000002e4,0x000002e2)R(0x0211,0x00000334,0x00000333,0x000002e4,0x00000334)R(0x0212,0x000002e2,0x000002e2,0x00000333,0x000002e1)R(0x0213,0x000002e3,0x00000335,0x000002e4,0x000002e3)R(0x0214,0x00000336,0x00000335,0x0000027f,0x000002e4)R(0x0215,0x000002e2,0x000002e3,0x000002e4,0x0000027f)R(0x0216,0x0000027e,0x000002e2,0x000002e1,0x0000027f)R(0x0217,0x000002e2,0x0000027e,0x0000027e,0x000002e1)R(0x0218,0x0000027d,0x0000027f,0x000002e5,0x000002e3)R(0x0219,0x000002e5,0x00000337,0x000002e3,0x00000210)R(0x021a,0x0000027f,0x0000027e,0x0000020f,0x0000027e)R(0x021b,0x0000027d,0x00000280,0x000002e5,0x0000027f)R(0x021c,0x00000210,0x00000280,0x0000027f,0x00000210)R(0x021d,0x0000027e,0x0000020f,0x000002e6,0x00000337)R(0x021e,0x000002e5,0x0000020f,0x0000027d,0x0000020e)R(0x021f,0x000001b0,0x00000210,0x0000020f,0x00000281)\nR(0x0220,0x000002e5,0x00000280,0x00000211,0x00000280)R(0x0221,0x00000210,0x000001b0,0x00000211,0x00000210)R(0x0222,0x00000281,0x000002e6,0x000002e5,0x00000162)R(0x0223,0x000001b7,0x000001b6,0x00000162,0x000001b6)R(0x0224,0x000001b0,0x000001b6,0x00000211,0x000001b0)R(0x0225,0x00000211,0x00000281,0x00000280,0x000001b7)R(0x0226,0x0000021b,0x000001b6,0x000001b6,0x0000021a)R(0x0227,0x00000211,0x0000021a,0x00000281,0x00000211)R(0x0228,0x000001b6,0x0000021b,0x0000021a,0x00000281)R(0x0229,0x000002e7,0x000002e6,0x0000021a,0x00000288)R(0x022a,0x00000281,0x0000021b,0x00000289,0x0000021a)R(0x022b,0x00000288,0x000002e7,0x00000281,0x0000021a)R(0x022c,0x00000289,0x00000288,0x00000288,0x000002ee)R(0x022d,0x000002e7,0x00000289,0x000002f0,0x00000288)R(0x022e,0x273269ad,0x31356669,0xffffffff,0x000001b0)R(0x022f,0x0000020f,0x000001af,0x000001af,0x0000020f)\nR(0x0230,0x0000020e,0x0000020e,0x00000219,0x000001b5)R(0x0231,0x00000162,0x000001b0,0x0000015e,0x000001af)R(0x0232,0x0000020e,0x000001b5,0x0000015e,0x000001b0)R(0x0233,0x000001af,0x000001af,0x000001b5,0x00000161)R(0x0234,0x0000011c,0x00000162,0x0000015e,0x0000015e)R(0x0235,0x000001af,0x00000161,0x00000161,0x000001b5)R(0x0236,0x000001b4,0x00000161,0x000001b4,0x000001b3)R(0x0237,0x0000015e,0x00000161,0x0000011b,0x0000011c)R(0x0238,0x0000015e,0x00000119,0x00000161,0x000001b3)R(0x0239,0x00000160,0x00000119,0x0000015e,0x0000011b)R(0x023a,0x0000011b,0x00000161,0x00000160,0x000000e1)R(0x023b,0x0000011c,0x00000119,0x00000160,0x000001b3)R(0x023c,0x000001b2,0x0000011b,0x00000160,0x0000011a)R(0x023d,0x00000119,0x0000011b,0x000000e0,0x000000e0)R(0x023e,0x0000011b,0x0000011a,0x000000e1,0x00000119)R(0x023f,0x000000df,0x0000011a,0x00000160,0x0000015f)\nR(0x0240,0x000000df,0x00000119,0x000000e0,0x00000160)R(0x0241,0x000001b2,0x0000015f,0x000000e0,0x0000011a)R(0x0242,0x00000117,0x000000e0,0x00000117,0x000000de)R(0x0243,0x0000011a,0x0000015b,0x00000117,0x00000117)R(0x0244,0x0000015a,0x00000118,0x0000011a,0x0000015f)R(0x0245,0x0000015b,0x000000b1,0x000000e1,0x000000df)R(0x0246,0x000000df,0x000000e0,0x000000b0,0x000000b0)R(0x0247,0x000000e0,0x000000de,0x00000117,0x0000015b)R(0x0248,0x0000015a,0x0000015a,0x0000015d,0x00000118)R(0x0249,0x0000015f,0x000001b2,0x000001b1,0x000000b1)R(0x024a,0x000000df,0x000000b0,0x0000015f,0x000001aa)R(0x024b,0x0000015b,0x0000015b,0x000001a9,0x0000015a)R(0x024c,0x0000015a,0x000001a9,0x0000015d,0x0000015f)R(0x024d,0x000001b1,0x000001aa,0x00000088,0x000000b1)R(0x024e,0x000000b0,0x0000015b,0x000001aa,0x000001a9)R(0x024f,0x1e002e30,0x3107f3ff,0x00000184,0x1e002e30)\nR(0x0250,0x3107f35a,0x000000a5,0x1e002e30,0x3101ab4f)R(0x0251,0xffffffff,0x000001ef,0x0000025a,0x00000259)R(0x0252,0x00000196,0x000001f0,0x00000195,0x000001f0)R(0x0253,0x0000025a,0x000001ef,0x0000025a,0x000002bf)R(0x0254,0x00000259,0x00000196,0x000001f2,0x000001f0)R(0x0255,0x000001f0,0x0000025b,0x0000025a,0x0000025a)R(0x0256,0x000002c0,0x000002bf,0x000001f2,0x0000025b)R(0x0257,0x000001f0,0x0000025b,0x000002c0,0x0000025a)R(0x0258,0x000002c0,0x000002f2,0x000002bf,0x000001f2)R(0x0259,0x0000025d,0x0000025b,0x0000025b,0x000002c2)R(0x025a,0x000002c0,0x0000025d,0x000002c1,0x0000025b)R(0x025b,0x000002c2,0x000002f2,0x000002c0,0x000002c1)R(0x025c,0x000002c2,0x0000025b,0x0000025d,0x000002c4)R(0x025d,0x000002c1,0x000002f1,0x000002f2,0x000002c2)R(0x025e,0x000002c1,0x0000031d,0x000002c2,0x00000289)R(0x025f,0x000002f2,0x000002f1,0x000002c2,0x0000031d)\nR(0x0260,0x000002f1,0x000002c4,0x0000031d,0x000002c1)R(0x0261,0x00000289,0x000002f1,0x000002f0,0x000002f1)R(0x0262,0x0000031d,0x000002f0,0x000002c4,0x0000031e)R(0x0263,0x0000031d,0x000002c4,0x0000031f,0x0000031e)R(0x0264,0x0000031d,0x0000033f,0x000002f0,0x0000031e)R(0x0265,0x0000033f,0x0000031d,0x0000031f,0x00000320)R(0x0266,0x0000031e,0x000002f0,0x0000033f,0x000002ef)R(0x0267,0x00000288,0x000002f0,0x000002ef,0x00000322)R(0x0268,0x0000033f,0x0000031e,0x00000320,0x00000322)R(0x0269,0x0000031e,0x000002ef,0x0000033f,0x00000322)R(0x026a,0x00000288,0x000002ef,0x000002ee,0x000002d0)R(0x026b,0x00000322,0x00000320,0x000002d0,0x00000320)R(0x026c,0x000002c8,0x000002ef,0x00000322,0x00000321)R(0x026d,0x000002ef,0x00000321,0x000002ee,0x00000321)R(0x026e,0x00000322,0x000002d0,0x0000026b,0x000002d0)R(0x026f,0x000002c8,0x1e23de36,0x30e7f35a,0xffffffff)\nR(0x0270,0x00000060,0x00000083,0x0000005f,0x00000042)R(0x0271,0x00000060,0x0000005f,0x00000083,0x000000aa)R(0x0272,0x000000a9,0x0000002a,0x00000042,0x0000002b)R(0x0273,0x00000060,0x00000084,0x00000083,0x00000084)R(0x0274,0x000000aa,0x00000083,0x00000044,0x00000060)R(0x0275,0x00000042,0x0000002c,0x00000042,0x0000002a)R(0x0276,0x0000002c,0x00000044,0x00000042,0x00000062)R(0x0277,0x00000084,0x00000060,0x00000084,0x000000ab)R(0x0278,0x000000aa,0x00000044,0x00000062,0x00000060)R(0x0279,0x000000ab,0x000000d7,0x000000aa,0x00000062)R(0x027a,0x00000086,0x00000084,0x00000086,0x000000ab)R(0x027b,0x00000084,0x0000002c,0x00000045,0x00000044)R(0x027c,0x00000044,0x00000063,0x00000062,0x000000ab)R(0x027d,0x000000d8,0x000000d7,0x00000045,0x00000063)R(0x027e,0x00000044,0x0000002d,0x00000045,0x0000002c)R(0x027f,0x00000062,0x00000087,0x00000086,0x00000063)\nR(0x0280,0x00000087,0x00000062,0x00000086,0x000000ae)R(0x0281,0x000000ab,0x00000045,0x00000064,0x00000063)R(0x0282,0x000000ae,0x000000d8,0x000000ab,0x0000002d)R(0x0283,0x00000046,0x00000045,0x00000064,0x00000087)R(0x0284,0x00000063,0x00000046,0x00000064,0x00000045)R(0x0285,0x00000087,0x000000af,0x00000086,0x00000086)R(0x0286,0x000000af,0x000000ae,0x00000064,0x00000088)R(0x0287,0x00000087,0x00000088,0x000000af,0x00000087)R(0x0288,0x000000ae,0x000000dc,0x000000d8,0x00000088)R(0x0289,0x000000b0,0x000000af,0x000000dc,0x0000010f)R(0x028a,0x000000d8,0x000000af,0x000000dd,0x000000ae)R(0x028b,0x000000b0,0x000000dd,0x000000af,0x000000ae)R(0x028c,0x000000dd,0x000000dc,0x000000dc,0x00000114)R(0x028d,0x0000010f,0x000000b0,0x000000de,0x000000dd)R(0x028e,0x000000dd,0x00000115,0x000000dc,0x000000dc)R(0x028f,0x00000115,0x00000114,0x000000de,0x00000116)\nR(0x0290,0x000000dd,0x000000dd,0x00000116,0x00000115)R(0x0291,0x00000115,0x00000157,0x00000114,0x00000117)R(0x0292,0x00000118,0x000000de,0x000000de,0x00000118)R(0x0293,0x00000116,0x00000114,0x00000157,0x00000156)R(0x0294,0x00000116,0x00000158,0x00000115,0x00000115)R(0x0295,0x00000158,0x00000157,0x00000118,0x00000159)R(0x0296,0x00000116,0x00000157,0x000001a6,0x00000156)R(0x0297,0x00000116,0x00000159,0x00000158,0x00000158)R(0x0298,0x000001a6,0x00000157,0x1e008f16,0x3104abff)R(0x0299,0x000000f6,0x1e008f16,0x28c4abff,0xffffffff)R(0x029a,0x0000025d,0x000002c5,0x000002c4,0x0000025c)R(0x029b,0x0000025d,0x000001f2,0x000002c3,0x000002c5)R(0x029c,0x0000025d,0x0000025c,0x000002c3,0x0000025d)R(0x029d,0x000001f1,0x0000025c,0x000001f2,0x0000025e)R(0x029e,0x000002c3,0x0000025c,0x000002c3,0x000002c6)R(0x029f,0x000002c5,0x000001f1,0x000001f2,0x00000196)\nR(0x02a0,0x0000025f,0x000002c3,0x0000025e,0x000001f3)R(0x02a1,0x0000025e,0x0000025c,0x000001f3,0x0000025c)R(0x02a2,0x000001f1,0x0000025f,0x000002c6,0x000002c3)R(0x02a3,0x000001f5,0x0000025f,0x0000025e,0x000001f5)R(0x02a4,0x0000025e,0x000001f3,0x00000197,0x000001f1)R(0x02a5,0x00000196,0x00000260,0x000002c6,0x0000025f)R(0x02a6,0x00000197,0x000001f3,0x000001f1,0x000001f6)R(0x02a7,0x0000025f,0x000001f5,0x000001f4,0x000001f5)R(0x02a8,0x000001f3,0x000001f6,0x00000260,0x0000025f)R(0x02a9,0x00000149,0x00000197,0x00000196,0x00000198)R(0x02aa,0x000001f3,0x00000197,0x00000198,0x000001f4)R(0x02ab,0x000001f3,0x0000019a,0x000001f6,0x000001f5)R(0x02ac,0x000001f7,0x00000260,0x000001f6,0x0000019a)R(0x02ad,0x000001f5,0x000001f4,0x0000014a,0x00000198)R(0x02ae,0x00000197,0x0000019a,0x000001f7,0x000001f6)R(0x02af,0x00000199,0x000001f4,0x00000198,0x0000019a)\nR(0x02b0,0x000001f4,0x00000199,0x0000014b,0x00000198)R(0x02b1,0x0000014a,0x0000014b,0x00000199,0x00000198)R(0x02b2,0x0000019b,0x000001f7,0x0000019a,0x0000010b)R(0x02b3,0x0000014b,0x0000014a,0x0000019c,0x000001f7)R(0x02b4,0x0000019b,0x0000014d,0x0000019a,0x00000199)R(0x02b5,0x0000014d,0x0000019b,0x0000019a,0x0000014c)R(0x02b6,0x00000199,0x0000014b,0x0000010c,0x0000014b)R(0x02b7,0x0000010b,0x0000014e,0x0000019c,0x0000019b)R(0x02b8,0x0000014d,0x00000199,0x0000014c,0x000000d6)R(0x02b9,0x0000010b,0x000000d5,0x0000010c,0x0000014c)R(0x02ba,0x0000014b,0x0000014f,0x0000019c,0x0000014e)R(0x02bb,0x0000014e,0x0000019b,0x0000014d,0x000000d6)R(0x02bc,0x0000010c,0x0000010b,0x0000010d,0x0000014d)R(0x02bd,0x0000014c,0x0000010d,0x0000014e,0x0000014d)R(0x02be,0x0000010d,0x0000014c,0x0000010c,0x000000a9)R(0x02bf,0x000000d6,0x000000d5,0x0000010e,0x0000014f)\nR(0x02c0,0x0000014e,0x0000010e,0x0000014e,0x0000010d)R(0x02c1,0x0000010f,0x0000014f,0x0000010e,0x000000d7)R(0x02c2,0x0000010c,0x000000d6,0x000000d7,0x0000010d)R(0x02c3,0x0000010c,0x000000d7,0x0000010e,0x0000010d)R(0x02c4,0x000000aa,0x000000d6,0x000000a9,0x000000d8)R(0x02c5,0x0000010f,0x0000010e,0x000000aa,0x000000d7)R(0x02c6,0x000000d6,0x000000d8,0x0000010e,0x000000d7)R(0x02c7,0x26b09316,0x310417ff,0xffffffff,0x00000156)R(0x02c8,0x000001a6,0x000001a5,0x000002c5,0x0000031f)R(0x02c9,0x000002c4,0x0000026b,0x000002c8,0x00000263)R(0x02ca,0x00000201,0x0000026b,0x00000263,0x000002c8)R(0x02cb,0x00000320,0x000002c7,0x000002c7,0x00000320)R(0x02cc,0x0000031f,0x00000114,0x00000156,0x00000150)R(0x02cd,0x00000114,0x00000150,0x0000010f,0x000001a5)R(0x02ce,0x00000201,0x000001fa,0x00000263,0x000002c8)R(0x02cf,0x000002c7,0x00000156,0x000001a5,0x0000019e)\nR(0x02d0,0x00000201,0x00000263,0x000001fa,0x000002c6)R(0x02d1,0x0000031f,0x000002c5,0x00000156,0x0000019e)R(0x02d2,0x00000150,0x000001a5,0x000001fa,0x0000019e)R(0x02d3,0x000002c7,0x0000031f,0x000002c6,0x0000010f)R(0x02d4,0x00000150,0x0000014f,0x00000263,0x000002c7)R(0x02d5,0x00000261,0x000001fa,0x00000263,0x00000262)R(0x02d6,0x00000150,0x0000019e,0x0000019d,0x00000261)R(0x02d7,0x000002c7,0x000002c6,0x0000019e,0x000001fa)R(0x02d8,0x000001f9,0x00000262,0x00000263,0x00000261)R(0x02d9,0x00000150,0x0000019d,0x0000014f,0x000001fa)R(0x02da,0x00000262,0x000001f9,0x0000019e,0x000001f9)R(0x02db,0x0000019d,0x00000261,0x000002c6,0x00000260)R(0x02dc,0x0000014f,0x0000019d,0x0000019c,0x000001f8)R(0x02dd,0x00000262,0x00000261,0x000001f9,0x00000262)R(0x02de,0x000001f8,0x0000019d,0x000001f9,0x0000019c)R(0x02df,0x000001f8,0x00000261,0x00000260,0x0000019c)\nR(0x02e0,0x000001f9,0x000001f8,0x000001f8,0x00000260)R(0x02e1,0x000001f7,0x0000019c,0x000001f8,0x000001f7)R(0x02e2,0x2f400000,0x3ff7af50,0x00000379,0x2f400000)R(0x02e3,0x3d149f50,0x000001e8,0x2fc00000,0x3d12656d)R(0x02e4,0x00000134,0x2fe00000,0x3d11d8db,0xffffffff)R(0x02e5,0x00000338,0x00000373,0x00000334,0x00000334)R(0x02e6,0x00000373,0x00000372,0x00000374,0x00000379)R(0x02e7,0x00000338,0x00000338,0x00000379,0x00000373)R(0x02e8,0x00000373,0x000003a7,0x00000372,0x00000379)R(0x02e9,0x000003a8,0x00000373,0x00000374,0x000003a9)R(0x02ea,0x00000379,0x00000373,0x000003a8,0x000003a7)R(0x02eb,0x00000372,0x000003a7,0x000003a6,0x00000374)R(0x02ec,0x000003aa,0x000003a9,0x00000372,0x000003a6)R(0x02ed,0x00000371,0x00000379,0x000003ad,0x000003a8)R(0x02ee,0x000003a9,0x000003ad,0x00000379,0x000003a8)R(0x02ef,0x000003d0,0x000003a7,0x000003a7,0x000003d0)\nR(0x02f0,0x000003a6,0x00000371,0x000003a6,0x000003a5)R(0x02f1,0x000003ad,0x000003d1,0x000003a8,0x000003aa)R(0x02f2,0x000003d3,0x000003a9,0x000003a8,0x000003d1)R(0x02f3,0x000003d0,0x000003a6,0x000003d0,0x000003cf)R(0x02f4,0x000003a9,0x000003d2,0x000003ad,0x00000371)R(0x02f5,0x000003a5,0x00000370,0x000003a6,0x000003cf)R(0x02f6,0x000003a5,0x000003ab,0x000003d3,0x000003aa)R(0x02f7,0x000003a9,0x000003d3,0x000003d2,0x000003d1)R(0x02f8,0x000003ee,0x000003d0,0x000003ad,0x000003d6)R(0x02f9,0x000003d1,0x000003d0,0x000003ee,0x000003cf)R(0x02fa,0x000003d2,0x000003d6,0x000003ad,0x00000370)R(0x02fb,0x000003a5,0x000003a4,0x000003a5,0x000003cf)R(0x02fc,0x000003ce,0x000003ab,0x000003d4,0x000003d3)R(0x02fd,0x00000370,0x000003a4,0x0000036f,0x000003cf)R(0x02fe,0x000003ee,0x000003ed,0x000003d1,0x000003ef)R(0x02ff,0x000003ee,0x000003d6,0x000003ef,0x000003d1)\nR(0x0300,0x000003a5,0x000003ce,0x000003a4,0x000003d3)R(0x0301,0x000003f1,0x000003d2,0x000003cf,0x000003ed)R(0x0302,0x000003ce,0x000003d2,0x000003f0,0x000003d6)R(0x0303,0x000003d4,0x000003f1,0x000003d3,0x000003ee)R(0x0304,0x000003ff,0x000003ed,0x0000036f,0x000003a4)R(0x0305,0x000003a3,0x000003ef,0x000003ff,0x000003ee)R(0x0306,0x000003d2,0x000003f1,0x000003f0,0x000003d5)R(0x0307,0x000003e8,0x000003d4,0x000003a4,0x000003ce)R(0x0308,0x000003cd,0x000003d6,0x000003f2,0x000003ef)R(0x0309,0x000003ca,0x000003e8,0x000003d5,0x000003ce)R(0x030a,0x000003ed,0x000003ec,0x000003e8,0x000003f1)R(0x030b,0x000003d4,0x000003f0,0x000003f2,0x000003d6)R(0x030c,0x000003a4,0x000003cd,0x000003a3,0x000003ed)R(0x030d,0x000003ff,0x000003ec,0x000003ce,0x000003ec)R(0x030e,0x000003cd,0x000003fe,0x000003ff,0x000003ef)R(0x030f,0x000003cb,0x000003e9,0x000003ca,0x000003ca)\nR(0x0310,0x000003e9,0x000003e8,0x000003f1,0x000003fd)R(0x0311,0x000003f0,0x000003f2,0x000003fe,0x000003ef)R(0x0312,0x000003a3,0x000003cc,0x000003cb,0x000003e8)R(0x0313,0x000003fd,0x000003f1,0x000003ec,0x000003ff)R(0x0314,0x000003fe,0x000003a3,0x000003cd,0x000003cc)R(0x0315,0x000003f0,0x000003fd,0x000003f2,0x000003cc)R(0x0316,0x000003e9,0x000003cb,0x000003e9,0x000003fd)R(0x0317,0x000003e8,0x000003cd,0x000003ec,0x000003ea)R(0x0318,0x000003ec,0x000003fe,0x000003ea,0x000003cd)R(0x0319,0x000003ea,0x000003cc,0x000003eb,0x000003fe)R(0x031a,0x000003f2,0x000003f2,0x000003fd,0x000003eb)R(0x031b,0x000003eb,0x000003fd,0x000003e9,0x000003cc)R(0x031c,0x000003eb,0x000003e9,0x000003ea,0x000003fe)R(0x031d,0x000003eb,0x000003ea,0x000003eb,0x000003cc)R(0x031e,0x2fc0089f,0x3b22656d,0xffffffff,0x00000335)R(0x031f,0x00000374,0x00000338,0x00000334,0x00000372)\nR(0x0320,0x00000333,0x00000336,0x00000375,0x00000335)R(0x0321,0x00000335,0x00000375,0x00000374,0x000002e1)R(0x0322,0x00000333,0x00000332,0x000002e1,0x00000332)R(0x0323,0x000002e0,0x00000333,0x00000372,0x00000371)R(0x0324,0x00000333,0x00000371,0x00000332,0x00000375)R(0x0325,0x000003aa,0x00000374,0x00000336,0x00000377)R(0x0326,0x00000375,0x000002e0,0x00000332,0x00000331)R(0x0327,0x00000376,0x00000377,0x00000336,0x00000332)R(0x0328,0x00000371,0x00000331,0x00000377,0x000003aa)R(0x0329,0x00000375,0x000002e0,0x00000331,0x000002df)R(0x032a,0x00000376,0x000003a2,0x00000377,0x00000331)R(0x032b,0x00000371,0x00000370,0x00000377,0x000003ab)R(0x032c,0x000003aa,0x000002df,0x00000331,0x00000330)R(0x032d,0x000003a2,0x000003ac,0x00000377,0x00000331)R(0x032e,0x00000370,0x00000330,0x000002df,0x00000330)R(0x032f,0x0000032e,0x00000377,0x000003ac,0x000003ab)\nR(0x0330,0x000003a2,0x000003c9,0x000003ac,0x0000039f)R(0x0331,0x000003c9,0x000003a2,0x00000330,0x0000036d)R(0x0332,0x0000032e,0x00000330,0x00000370,0x0000036f)R(0x0333,0x0000032e,0x0000036d,0x0000036c,0x000003ac)R(0x0334,0x000003d5,0x000003ab,0x00000330,0x0000036f)R(0x0335,0x0000036d,0x0000036c,0x000003a0,0x0000039f)R(0x0336,0x000003c9,0x000003d5,0x000003ac,0x000003a0)R(0x0337,0x000003c9,0x0000039f,0x000003ab,0x000003d5)R(0x0338,0x000003d4,0x0000036d,0x000003a1,0x0000036c)R(0x0339,0x0000036c,0x000003a1,0x000003a0,0x0000036f)R(0x033a,0x000003a1,0x0000036d,0x000003a0,0x000003ca)R(0x033b,0x000003c9,0x000003ca,0x000003d5,0x000003c9)R(0x033c,0x0000036f,0x000003a3,0x000003a1,0x000003a1)R(0x033d,0x000003cb,0x000003a0,0x000003a0,0x000003cb)R(0x033e,0x000003ca,0x000003a3,0x000003cb,0x000003a1)R(0x033f,0x2f40853d,0x38c49f50,0x000000e4,0x2f40853d)\nR(0x0340,0x38c49e38,0xffffffff,0x0000039f,0x000003a2)R(0x0341,0x0000036e,0x00000378,0x000003a2,0x00000376)R(0x0342,0x0000036e,0x000003a2,0x00000378,0x0000036c)R(0x0343,0x0000039f,0x0000036e,0x00000337,0x00000378)R(0x0344,0x00000376,0x00000337,0x00000376,0x00000336)R(0x0345,0x00000339,0x00000378,0x00000337,0x0000036e)R(0x0346,0x00000378,0x0000033e,0x000002e3,0x00000337)R(0x0347,0x00000336,0x0000033e,0x00000378,0x00000339)R(0x0348,0x000002e6,0x00000339,0x00000337,0x0000036c)R(0x0349,0x0000036e,0x0000032f,0x000002e7,0x00000339)R(0x034a,0x000002e6,0x0000032f,0x0000036e,0x0000033e)R(0x034b,0x000002ec,0x00000339,0x000002e7,0x000002ec)R(0x034c,0x0000033e,0x00000339,0x0000032e,0x0000036c)R(0x034d,0x0000032f,0x0000032f,0x0000033e,0x000002ed)R(0x034e,0x000002ed,0x0000033e,0x000002ec,0x0000032e)R(0x034f,0x0000032f,0x000002de,0x000002de,0x0000032f)\nR(0x0350,0x000002ed,0x00000286,0x000002ed,0x000002ec)R(0x0351,0x000002df,0x0000032e,0x000002de,0x000002de)R(0x0352,0x000002ed,0x00000287,0x00000287,0x000002ed)R(0x0353,0x00000286,0x0000027c,0x000002de,0x00000287)R(0x0354,0x0000027c,0x000002df,0x000002de,0x00000218)R(0x0355,0x00000287,0x00000286,0x0000027c,0x000002e0)R(0x0356,0x000002df,0x0000027d,0x000002e1,0x000002e0)R(0x0357,0x0000027c,0x00000287,0x00000219,0x0000027d)R(0x0358,0x000002e0,0x0000027c,0x00000219,0x00000287)R(0x0359,0x00000218,0x0000020e,0x0000027d,0x0000027c)R(0x035a,0x0000020e,0x0000027c,0x00000219,0x000001b5)R(0x035b,0x00000219,0x00000218,0x000001b5,0x00000218)R(0x035c,0x00000217,0x000001b5,0x00000217,0x000001b4)R(0x035d,0x000001b4,0x00000217,0x00000216,0x00000217)R(0x035e,0x0000026f,0x00000216,0x000001b4,0x00000216)R(0x035f,0x00000215,0x000001b4,0x00000215,0x000001b3)\nR(0x0360,0x0000026f,0x00000272,0x00000216,0x00000216)R(0x0361,0x00000285,0x00000215,0x00000207,0x00000272)R(0x0362,0x0000026f,0x00000272,0x00000285,0x00000216)R(0x0363,0x000001b3,0x00000215,0x00000214,0x00000215)R(0x0364,0x00000285,0x00000214,0x00000272,0x000002d4)R(0x0365,0x00000285,0x00000207,0x00000273,0x00000272)R(0x0366,0x000001b3,0x00000214,0x000001b2,0x00000214)R(0x0367,0x00000285,0x00000284,0x00000208,0x00000273)R(0x0368,0x00000207,0x00000272,0x000002d5,0x000002d4)R(0x0369,0x00000285,0x000002d4,0x00000284,0x00000273)R(0x036a,0x000002d5,0x00000272,0x2f40ca15,0x36548b50)R(0x036b,0xffffffff,0x000002cf,0x00000321,0x000002d0)R(0x036c,0x000002ee,0x00000321,0x000002d1,0x000002d1)R(0x036d,0x00000321,0x000002cf,0x000002e7,0x000002ee)R(0x036e,0x000002ec,0x000002cf,0x000002d0,0x0000026b)R(0x036f,0x000002ec,0x000002ee,0x000002d1,0x00000286)\nR(0x0370,0x000002ec,0x000002d1,0x0000026e,0x000002d1)R(0x0371,0x000002cf,0x0000026c,0x000002cf,0x0000026b)R(0x0372,0x00000286,0x000002d1,0x0000026e,0x0000026e)R(0x0373,0x000002cf,0x0000026c,0x00000201,0x0000026c)R(0x0374,0x0000026b,0x0000026d,0x00000286,0x0000026e)R(0x0375,0x00000218,0x00000286,0x0000026d,0x00000203)R(0x0376,0x0000026e,0x0000026c,0x0000026d,0x0000026e)R(0x0377,0x00000203,0x00000202,0x0000026c,0x00000201)R(0x0378,0x00000218,0x0000026d,0x00000217,0x00000203)R(0x0379,0x0000026c,0x00000202,0x0000026d,0x0000026f)R(0x037a,0x00000217,0x000001a5,0x00000202,0x00000201)R(0x037b,0x00000204,0x0000026d,0x00000203,0x00000204)R(0x037c,0x0000026f,0x0000026d,0x000001a7,0x00000203)R(0x037d,0x00000202,0x000001a8,0x00000204,0x00000203)R(0x037e,0x00000207,0x0000026f,0x00000204,0x000001a6)R(0x037f,0x00000202,0x000001a5,0x000001a8,0x00000203)\nR(0x0380,0x000001a7,0x000001a7,0x00000202,0x000001a6)R(0x0381,0x000001ab,0x00000207,0x00000204,0x000001ab)R(0x0382,0x00000204,0x000001a8,0x00000159,0x000001a8)R(0x0383,0x000001a7,0x0000015c,0x000001ab,0x000001a8)R(0x0384,0x00000158,0x000001a7,0x000001a6,0x000001ab)R(0x0385,0x00000208,0x00000207,0x0000015c,0x000001a8)R(0x0386,0x00000159,0x00000159,0x000001a7,0x00000158)R(0x0387,0x0000015c,0x000001ac,0x000001ab,0x00000118)R(0x0388,0x0000015c,0x00000159,0x000001ac,0x00000208)R(0x0389,0x000001ab,0x2f4430a6,0x3ff7ae63,0x00000158)R(0x038a,0x334540a6,0x3ff7ad87,0x000000a0,0x366638a6)R(0x038b,0x3ff7ad20,0xffffffff,0x00000323,0x0000032d)R(0x038c,0x000002dd,0x000002dd,0x0000032d,0x0000032c)R(0x038d,0x00000324,0x00000363,0x00000323,0x00000323)R(0x038e,0x00000363,0x0000032d,0x000002e8,0x0000033a)R(0x038f,0x00000324,0x0000033a,0x00000363,0x00000324)\nR(0x0390,0x0000032d,0x0000036a,0x0000032c,0x0000032c)R(0x0391,0x00000369,0x0000032b,0x00000363,0x0000036b)R(0x0392,0x0000032d,0x000002e8,0x0000033b,0x0000033a)R(0x0393,0x0000032c,0x0000036a,0x00000369,0x0000032d)R(0x0394,0x0000036b,0x0000036a,0x0000033a,0x0000037a)R(0x0395,0x00000363,0x00000363,0x0000037a,0x0000036b)R(0x0396,0x0000032b,0x00000369,0x00000368,0x0000033b)R(0x0397,0x0000037b,0x0000033a,0x0000033a,0x0000037b)R(0x0398,0x0000037a,0x0000036b,0x0000039e,0x0000036a)R(0x0399,0x0000037a,0x0000039e,0x0000036b,0x0000036a)R(0x039a,0x0000039d,0x00000369,0x0000033d,0x0000037c)R(0x039b,0x0000033b,0x00000369,0x0000039d,0x00000368)R(0x039c,0x0000033b,0x0000037c,0x0000037b,0x0000036a)R(0x039d,0x0000039e,0x0000039d,0x0000037b,0x000003ae)R(0x039e,0x0000037a,0x0000037a,0x000003ae,0x0000039e)R(0x039f,0x0000037c,0x000003ae,0x0000037b,0x0000033d)\nR(0x03a0,0x0000037d,0x0000037c,0x000003ae,0x000003c8)R(0x03a1,0x0000039e,0x0000039e,0x000003c8,0x0000039d)R(0x03a2,0x00000368,0x0000039d,0x00000367,0x0000037c)R(0x03a3,0x000003af,0x000003ae,0x000003af,0x000003c8)R(0x03a4,0x000003ae,0x0000037d,0x000003af,0x0000037c)R(0x03a5,0x0000039d,0x000003c8,0x0000039c,0x00000367)R(0x03a6,0x0000039d,0x0000039c,0x0000039b,0x000003af)R(0x03a7,0x0000037d,0x0000039b,0x000003c8,0x000003af)R(0x03a8,0x0000039c,0x000003c8,0x0000039b,0x334540ea)R(0x03a9,0x3ff7ad87,0xffffffff,0x00000212,0x00000282)R(0x03aa,0x00000271,0x00000212,0x00000283,0x00000282)R(0x03ab,0x00000271,0x000002d3,0x000002d2,0x00000282)R(0x03ac,0x000002d3,0x00000271,0x000002d2,0x000002dd)R(0x03ad,0x0000027b,0x0000027b,0x000002dc,0x0000027a)R(0x03ae,0x0000027b,0x000002dd,0x000002dc,0x000002d3)R(0x03af,0x00000323,0x000002d2,0x000002d2,0x00000323)\nR(0x03b0,0x000002dd,0x0000027a,0x000002dc,0x000002db)R(0x03b1,0x00000282,0x000002e8,0x000002d3,0x00000283)R(0x03b2,0x000002e9,0x00000282,0x000002d3,0x00000324)R(0x03b3,0x00000323,0x000002dd,0x0000032c,0x000002dc)R(0x03b4,0x000002e8,0x00000324,0x000002d3,0x00000283)R(0x03b5,0x000002ea,0x000002e9,0x000002dc,0x0000032b)R(0x03b6,0x000002db,0x00000282,0x000002e9,0x000002e8)R(0x03b7,0x000002dc,0x0000032c,0x0000032b,0x000002db)R(0x03b8,0x0000032a,0x000002da,0x000002db,0x0000032b)R(0x03b9,0x0000032a,0x000002ea,0x0000033c,0x000002e9)R(0x03ba,0x000002e9,0x0000033b,0x000002e8,0x000002da)R(0x03bb,0x0000032a,0x000002d9,0x0000033c,0x0000033d)R(0x03bc,0x000002e9,0x0000032b,0x00000368,0x0000032a)R(0x03bd,0x000002e9,0x0000033d,0x0000033b,0x00000325)R(0x03be,0x00000364,0x0000033c,0x000002d9,0x0000032a)R(0x03bf,0x00000329,0x0000033c,0x00000364,0x0000033d)\nR(0x03c0,0x0000032a,0x00000368,0x00000329,0x000002d9)R(0x03c1,0x00000329,0x00000328,0x00000364,0x0000037d)R(0x03c2,0x0000033d,0x00000326,0x00000365,0x00000364)R(0x03c3,0x00000329,0x00000368,0x00000367,0x00000329)R(0x03c4,0x00000367,0x00000328,0x00000365,0x0000037d)R(0x03c5,0x00000364,0x00000328,0x00000366,0x00000327)R(0x03c6,0x00000327,0x00000366,0x00000365,0x00000328)R(0x03c7,0x00000367,0x00000366,0x00000365,0x0000039b)R(0x03c8,0x0000037d,0x00000366,0x0000039b,0x00000365)R(0x03c9,0x00000367,0x0000039c,0x00000366,0x00000366)R(0x03ca,0x0000039c,0x0000039b,0x2f44314a,0x3ee74263)R(0x03cb,0x000000b5,0x2f44314e,0x3d360663,0xffffffff)R(0x03cc,0x00000118,0x0000015d,0x0000015c,0x000001aa)R(0x03cd,0x00000205,0x000001a9,0x000001b1,0x00000206)R(0x03ce,0x000001aa,0x000001b2,0x00000213,0x000001b1)R(0x03cf,0x000001aa,0x00000206,0x00000205,0x000001a9)\nR(0x03d0,0x000001ae,0x0000015d,0x000001b2,0x00000214)R(0x03d1,0x00000213,0x000001a9,0x00000205,0x000001ae)R(0x03d2,0x000001b1,0x00000212,0x00000206,0x0000015d)R(0x03d3,0x000001ad,0x0000015c,0x000001b1,0x00000213)R(0x03d4,0x00000212,0x0000015d,0x000001ae,0x000001ad)R(0x03d5,0x0000015c,0x000001ad,0x000001ac,0x00000214)R(0x03d6,0x00000284,0x00000213,0x000001ae,0x0000020b)R(0x03d7,0x000001ad,0x00000213,0x00000283,0x00000212)R(0x03d8,0x00000213,0x00000284,0x00000283,0x000001ad)R(0x03d9,0x0000020b,0x0000020a,0x000001ad,0x00000209)R(0x03da,0x000001ac,0x000001ad,0x0000020a,0x00000209)R(0x03db,0x0000020b,0x00000277,0x0000020a,0x000001ac)R(0x03dc,0x00000209,0x00000208,0x00000284,0x000002ea)R(0x03dd,0x00000283,0x000002d4,0x000002eb,0x00000284)R(0x03de,0x00000284,0x000002eb,0x000002ea,0x00000209)R(0x03df,0x00000274,0x00000208,0x0000020a,0x00000277)\nR(0x03e0,0x00000276,0x00000208,0x00000274,0x00000273)R(0x03e1,0x0000020a,0x00000275,0x00000209,0x000002d5)R(0x03e2,0x000002eb,0x000002d4,0x0000020a,0x00000276)R(0x03e3,0x00000275,0x00000209,0x00000275,0x00000274)R(0x03e4,0x00000273,0x000002d6,0x000002d5,0x00000274)R(0x03e5,0x000002d6,0x00000273,0x000002eb,0x0000033c)R(0x03e6,0x000002ea,0x000002d5,0x00000325,0x000002eb)R(0x03e7,0x00000275,0x000002d7,0x00000274,0x000002d6)R(0x03e8,0x00000325,0x000002d5,0x00000325,0x0000033c)R(0x03e9,0x000002eb,0x00000274,0x000002d7,0x000002d6)R(0x03ea,0x00000275,0x000002d8,0x000002d7,0x000002d6)R(0x03eb,0x00000326,0x00000325,0x000002d7,0x00000326)R(0x03ec,0x000002d6,0x00000326,0x00000364,0x00000325)R(0x03ed,0x32158d4a,0x3ee741f0,0xffffffff,0x00000206)R(0x03ee,0x00000270,0x00000205,0x00000205,0x0000020d)R(0x03ef,0x000001ae,0x00000212,0x00000271,0x00000206)\nR(0x03f0,0x00000205,0x00000270,0x0000020d,0x00000206)R(0x03f1,0x00000271,0x00000270,0x000001ae,0x0000020d)R(0x03f2,0x0000020c,0x000001ae,0x0000020c,0x0000020b)R(0x03f3,0x00000270,0x0000027b,0x0000020d,0x00000271)R(0x03f4,0x000002d2,0x00000270,0x0000020d,0x0000027a)R(0x03f5,0x0000020c,0x00000270,0x000002d2,0x0000027b)R(0x03f6,0x0000020c,0x00000278,0x0000020b,0x0000020d)R(0x03f7,0x0000027b,0x0000027a,0x0000020c,0x00000279)R(0x03f8,0x00000278,0x0000020c,0x0000027a,0x00000279)R(0x03f9,0x0000020b,0x00000278,0x00000277,0x00000278)R(0x03fa,0x00000279,0x00000277,0x0000027a,0x000002db)R(0x03fb,0x00000279,0x00000279,0x000002da,0x00000277)R(0x03fc,0x00000279,0x000002db,0x000002da,0x00000277)R(0x03fd,0x000002da,0x00000276,0x00000276,0x000002da)R(0x03fe,0x000002d9,0x00000276,0x000002d8,0x00000275)R(0x03ff,0x00000276,0x000002d9,0x000002d8,0x000002d8)\nR(0x0400,0x00000327,0x000002d7,0x000002d7,0x00000327)R(0x0401,0x00000326,0x000002d9,0x00000328,0x000002d8)R(0x0402,0x000002d8,0x00000328,0x00000327,0x00000327)R(0x0403,0x00000365,0x00000326,0x00970c3b,0x290fff8e)R(0x0404,0x000006f2,0x00972c3e,0x13dfff88,0x0000040d)R(0x0405,0x00972c3e,0x13ac8f88,0x000001d8,0x01172c3e)R(0x0406,0x13ac7e2d,0x0000011a,0x01174487,0x057c5a2d)R(0x0407,0x00000090,0x01174c87,0x057c3d2d,0xffffffff)R(0x0408,0x00000388,0x0000038d,0x00000350,0x0000034b)R(0x0409,0x00000388,0x00000350,0x0000038d,0x00000391)R(0x040a,0x0000038c,0x00000355,0x00000391,0x00000390)R(0x040b,0x00000350,0x0000038d,0x0000038c,0x0000038c)R(0x040c,0x00000391,0x00000357,0x00000357,0x00000391)R(0x040d,0x00000355,0x0000034b,0x00000350,0x00000306)R(0x040e,0x00000350,0x0000038c,0x0000034f,0x00000306)R(0x040f,0x00000350,0x0000034f,0x00000386,0x0000038c)\nR(0x0410,0x00000357,0x0000030d,0x00000357,0x00000355)R(0x0411,0x0000034f,0x0000038c,0x00000386,0x00000356)R(0x0412,0x00000357,0x0000030d,0x00000356,0x00000386)R(0x0413,0x00000357,0x00000306,0x0000034f,0x0000034a)R(0x0414,0x0000034f,0x00000386,0x0000034a,0x00000306)R(0x0415,0x0000034a,0x00000302,0x0000030e,0x00000356)R(0x0416,0x0000030d,0x00000349,0x00000386,0x00000356)R(0x0417,0x0000034a,0x00000386,0x00000349,0x00000302)R(0x0418,0x0000034a,0x00000301,0x0000030f,0x00000356)R(0x0419,0x0000030e,0x00000349,0x00000356,0x0000030f)R(0x041a,0x00000301,0x0000034a,0x00000349,0x000002ad)R(0x041b,0x0000030f,0x0000030e,0x00000301,0x00000349)R(0x041c,0x00000300,0x00000300,0x00000349,0x0000030f)R(0x041d,0x000002ae,0x0000030f,0x000002ad,0x00000300)R(0x041e,0x0000030f,0x000002ae,0x0000029f,0x00000301)R(0x041f,0x00000300,0x000002a0,0x00000300,0x000002ae)\nR(0x0420,0x0000029f,0x00000300,0x000002a0,0x0000029f)R(0x0421,0x000002a0,0x00000236,0x00000236,0x000002a0)R(0x0422,0x00000248,0x01374507,0x033c5a2d,0xffffffff)R(0x0423,0x00000304,0x0000034d,0x0000034c,0x00000305)R(0x0424,0x0000034d,0x00000304,0x00000303,0x0000034c)R(0x0425,0x0000034b,0x00000304,0x0000034c,0x00000303)R(0x0426,0x000002a4,0x00000305,0x00000304,0x00000303)R(0x0427,0x0000034b,0x00000306,0x000002a3,0x00000304)R(0x0428,0x00000303,0x000002a4,0x00000304,0x000002a3)R(0x0429,0x00000303,0x00000306,0x000002a5,0x000002a3)R(0x042a,0x00000303,0x000002a5,0x0000023b,0x000002a4)R(0x042b,0x000002a3,0x000002a3,0x000002a5,0x0000023c)R(0x042c,0x000002a5,0x00000306,0x00000302,0x0000023b)R(0x042d,0x000002a3,0x0000023c,0x0000023c,0x000002a5)R(0x042e,0x000002a1,0x000002a5,0x00000302,0x000002a1)R(0x042f,0x0000023b,0x0000023c,0x000001d5,0x0000023c)\nR(0x0430,0x000002a1,0x00000239,0x000002a1,0x00000302)R(0x0431,0x00000301,0x000001d5,0x0000023c,0x00000239)R(0x0432,0x00000239,0x000002a1,0x00000238,0x000002a1)R(0x0433,0x00000301,0x0000029f,0x000001d5,0x00000239)R(0x0434,0x000001d4,0x00000238,0x000002a1,0x0000029f)R(0x0435,0x000001d4,0x00000239,0x00000238,0x00000180)R(0x0436,0x000001d5,0x000001d4,0x00000238,0x0000029f)R(0x0437,0x00000237,0x000001d4,0x00000238,0x000001d3)R(0x0438,0x000001d3,0x00000238,0x00000237,0x00000237)R(0x0439,0x0000029f,0x00000236,0x00000180,0x000001d4)R(0x043a,0x0000017f,0x0000017f,0x000001d4,0x000001d3)R(0x043b,0x03772c3e,0x13ac7d00,0xffffffff,0x00000354)R(0x043c,0x00000390,0x00000353,0x00000240,0x000002a9)R(0x043d,0x000002a8,0x0000030a,0x00000354,0x00000309)R(0x043e,0x000002a9,0x0000030a,0x00000309,0x00000355)R(0x043f,0x00000390,0x00000354,0x00000241,0x000002a9)\nR(0x0440,0x00000240,0x0000030c,0x00000354,0x0000030a)R(0x0441,0x0000030c,0x00000355,0x00000354,0x000001db)R(0x0442,0x00000241,0x00000240,0x000002aa,0x0000030a)R(0x0443,0x000002a9,0x00000241,0x000002aa,0x000002a9)R(0x0444,0x0000030b,0x0000030c,0x0000030a,0x0000030d)R(0x0445,0x00000355,0x0000030c,0x000002aa,0x0000030b)R(0x0446,0x0000030a,0x000001db,0x00000242,0x00000241)R(0x0447,0x00000242,0x000002aa,0x00000241,0x000002ac)R(0x0448,0x0000030c,0x0000030b,0x000002ac,0x0000030d)R(0x0449,0x0000030c,0x000002ab,0x0000030b,0x000002aa)R(0x044a,0x00000243,0x000002aa,0x00000242,0x000002ac)R(0x044b,0x0000030e,0x0000030d,0x000002ac,0x0000030b)R(0x044c,0x000002ab,0x00000243,0x000002ab,0x000002aa)R(0x044d,0x000001dc,0x00000243,0x00000242,0x000002ad)R(0x044e,0x0000030e,0x000002ac,0x00000245,0x000002ac)R(0x044f,0x000002ab,0x000001dd,0x00000243,0x000001dc)\nR(0x0450,0x00000244,0x000002ab,0x00000243,0x00000245)R(0x0451,0x000002ad,0x000002ac,0x00000245,0x000002ab)R(0x0452,0x00000244,0x000001dd,0x00000244,0x00000243)R(0x0453,0x00000246,0x000002ad,0x00000245,0x000001df)R(0x0454,0x00000245,0x00000244,0x00000246,0x000002ae)R(0x0455,0x000002ad,0x000001de,0x00000244,0x000001dd)R(0x0456,0x000001df,0x00000246,0x00000245,0x000001df)R(0x0457,0x00000244,0x000001de,0x00000247,0x000002ae)R(0x0458,0x00000246,0x000002a0,0x000002ae,0x00000247)R(0x0459,0x00000187,0x000001de,0x000001dd,0x000001e0)R(0x045a,0x00000246,0x000001df,0x000001e0,0x00000247)R(0x045b,0x00000246,0x00000248,0x000002a0,0x00000247)R(0x045c,0x00000188,0x000001df,0x000001de,0x00000188)R(0x045d,0x000001de,0x00000187,0x00000188,0x000001e0)R(0x045e,0x000001df,0x009731f8,0x13ac8f88,0x0000013a)R(0x045f,0x009731f8,0x05bc8f7a,0x00000070,0x01174df8)\nR(0x0460,0x02ec8eca,0xffffffff,0x000002a6,0x00000307)R(0x0461,0x00000305,0x000002a7,0x00000307,0x000002a6)R(0x0462,0x000002a6,0x00000305,0x000002a4,0x0000023e)R(0x0463,0x000002a7,0x000002a6,0x000002a2,0x000002a6)R(0x0464,0x000002a4,0x0000023e,0x000002a6,0x000002a2)R(0x0465,0x000002a2,0x000002a4,0x0000023b,0x0000023e)R(0x0466,0x000002a2,0x0000023d,0x0000023a,0x000002a2)R(0x0467,0x0000023b,0x000001d9,0x0000023e,0x0000023d)R(0x0468,0x0000023d,0x000002a2,0x0000023a,0x0000023a)R(0x0469,0x0000023b,0x000001d5,0x000001d6,0x0000023d)R(0x046a,0x0000023a,0x000001d9,0x0000023d,0x000001d7)R(0x046b,0x000001d6,0x0000023a,0x000001d5,0x000001d7)R(0x046c,0x0000023d,0x000001d6,0x000001d8,0x000001d9)R(0x046d,0x000001d7,0x00000180,0x000001d6,0x000001d5)R(0x046e,0x00000181,0x000001d7,0x000001d6,0x00000181)R(0x046f,0x000001d8,0x000001d7,0x00000182,0x000001d8)\nR(0x0470,0x00000181,0x00000181,0x000001d6,0x00000180)R(0x0471,0x0000017d,0x00000182,0x00000181,0x00000136)R(0x0472,0x00000182,0x0000017d,0x00000135,0x00000181)R(0x0473,0x00000180,0x00000135,0x00000180,0x0000017f)R(0x0474,0x0000017d,0x00000181,0x00000135,0x009732a4)R(0x0475,0x05bc5f7a,0xffffffff,0x000001e5,0x0000024c)R(0x0476,0x0000024b,0x000002af,0x000002ff,0x0000029a)R(0x0477,0x0000024a,0x000002b0,0x00000249,0x0000024b)R(0x0478,0x000002b1,0x0000024a,0x0000029a,0x000002ff)R(0x0479,0x000002a7,0x00000249,0x000002af,0x0000029a)R(0x047a,0x000001e5,0x0000024b,0x000001e4,0x000001e3)R(0x047b,0x0000024b,0x0000024a,0x000001e4,0x0000024b)R(0x047c,0x000001e3,0x000001e2,0x0000024a,0x00000249)R(0x047d,0x0000029a,0x000002a7,0x0000023f,0x00000249)R(0x047e,0x0000029a,0x0000022b,0x000001e3,0x0000024a)R(0x047f,0x000001e2,0x000001e2,0x00000249,0x0000022b)\nR(0x0480,0x0000022b,0x0000029a,0x0000023f,0x0000018b)R(0x0481,0x000001e4,0x000001e3,0x0000023f,0x000002a7)R(0x0482,0x0000023e,0x0000018c,0x000001e4,0x0000018b)R(0x0483,0x0000018a,0x000001e3,0x000001e2,0x0000018b)R(0x0484,0x000001e3,0x0000018a,0x000001e2,0x0000022b)R(0x0485,0x000001c6,0x0000022b,0x0000023f,0x000001da)R(0x0486,0x0000013f,0x0000018c,0x0000018b,0x000001da)R(0x0487,0x0000023f,0x0000023e,0x0000018a,0x000001e2)R(0x0488,0x000001c6,0x000001c6,0x0000022b,0x000001da)R(0x0489,0x0000013e,0x0000018b,0x0000018a,0x0000013f)R(0x048a,0x0000018b,0x0000013e,0x000001da,0x0000023e)R(0x048b,0x000001d9,0x0000018a,0x000001c6,0x00000170)R(0x048c,0x0000013e,0x0000018a,0x00000170,0x00000100)R(0x048d,0x0000013f,0x0000013e,0x000001c6,0x000001da)R(0x048e,0x00000183,0x00000170,0x000001c6,0x00000183)R(0x048f,0x00000183,0x000001da,0x000001d9,0x00000100)\nR(0x0490,0x0000013e,0x00000127,0x0000013e,0x00000170)R(0x0491,0x00000127,0x00000183,0x000001d9,0x000001d8)R(0x0492,0x00000170,0x00000183,0x00000137,0x00000100)R(0x0493,0x00000127,0x000000eb,0x00000127,0x00000170)R(0x0494,0x00000137,0x00000183,0x000001d8,0x00000182)R(0x0495,0x00000137,0x00000183,0x00000182,0x000000eb)R(0x0496,0x00000127,0x000000f9,0x00000127,0x00000137)R(0x0497,0x000000f9,0x00000137,0x00000182,0x00000136)R(0x0498,0x000000f9,0x00000137,0x00000136,0x000000f9)R(0x0499,0x00000136,0x000000f8,0x03b762c1,0x13ac8788)R(0x049a,0xffffffff,0x000000a5,0x000000d0,0x000000a4)R(0x049b,0x00000105,0x00000142,0x00000103,0x000000d1)R(0x049c,0x00000104,0x000000d0,0x00000104,0x00000105)R(0x049d,0x00000103,0x00000142,0x0000018e,0x00000141)R(0x049e,0x00000103,0x00000142,0x00000141,0x000000a4)R(0x049f,0x000000d0,0x000000cf,0x000000d0,0x00000104)\nR(0x04a0,0x000000cf,0x0000018e,0x000001e5,0x0000018d)R(0x04a1,0x00000141,0x0000018e,0x0000018d,0x000000ce)R(0x04a2,0x00000104,0x00000103,0x000000a4,0x000000cf)R(0x04a3,0x000000a3,0x0000018d,0x000001e5,0x000001e4)R(0x04a4,0x000000cf,0x00000104,0x000000ce,0x00000103)R(0x04a5,0x00000141,0x00000102,0x000000ce,0x00000103)R(0x04a6,0x00000102,0x00000141,0x0000018d,0x00000140)R(0x04a7,0x000000a3,0x000000cf,0x000000a2,0x0000018d)R(0x04a8,0x000001e4,0x0000018c,0x000000a2,0x000000cf)R(0x04a9,0x000000ce,0x00000102,0x00000141,0x00000140)R(0x04aa,0x00000140,0x0000018d,0x0000018c,0x0000007d)R(0x04ab,0x000000a3,0x000000a2,0x000000ce,0x00000102)R(0x04ac,0x000000cd,0x000000a2,0x000000ce,0x000000cd)R(0x04ad,0x00000102,0x00000140,0x00000101,0x000000cd)R(0x04ae,0x00000102,0x00000101,0x00000140,0x0000018c)R(0x04af,0x0000013f,0x0000007d,0x000000a2,0x0000007c)\nR(0x04b0,0x000000a2,0x000000cd,0x000000a1,0x00000101)R(0x04b1,0x00000140,0x0000013f,0x0000007c,0x000000a2)R(0x04b2,0x000000a1,0x000000cd,0x00000101,0x000000cc)R(0x04b3,0x000000a1,0x000000cd,0x000000cc,0x00000101)R(0x04b4,0x0000013f,0x00000100,0x000000cc,0x00000101)R(0x04b5,0x000000cb,0x000000cb,0x00000101,0x00000100)R(0x04b6,0x0000007c,0x000000a1,0x0000007b,0x000000a1)R(0x04b7,0x000000cc,0x000000a0,0x00000059,0x0000007c)R(0x04b8,0x0000007b,0x000000a0,0x000000cc,0x000000cb)R(0x04b9,0x0000007b,0x000000a1,0x000000a0,0x000000cb)R(0x04ba,0x00000100,0x000000eb,0x000000a0,0x000000cb)R(0x04bb,0x000000ba,0x00000059,0x0000007b,0x0000006e)R(0x04bc,0x000000cb,0x000000eb,0x000000ba,0x0000007b)R(0x04bd,0x000000a0,0x00000091,0x0000007b,0x00000091)R(0x04be,0x0000006e,0x000000a0,0x000000ba,0x00000091)R(0x04bf,0x000000ba,0x000000eb,0x000000c5,0x000000eb)\nR(0x04c0,0x000000f9,0x000000c5,0x00000091,0x000000ba)R(0x04c1,0x0000009a,0x0000006e,0x00000091,0x0000006d)R(0x04c2,0x000000ba,0x000000c5,0x0000009a,0x0000004d)R(0x04c3,0x0000006e,0x0000006d,0x00000091,0x0000009a)R(0x04c4,0x00000076,0x0000006d,0x00000091,0x00000076)R(0x04c5,0x000000c5,0x000000f9,0x000000f8,0x0000009a)R(0x04c6,0x000000c5,0x000000c4,0x000000c5,0x000000f8)R(0x04c7,0x000000c4,0x01abf482,0x13dfff33,0x00000135)R(0x04c8,0x01abf482,0x13de2333,0x000000a8,0x01bbf482)R(0x04c9,0x129e2213,0xffffffff,0x0000013c,0x00000188)R(0x04ca,0x00000187,0x00000189,0x000001e0,0x00000188)R(0x04cb,0x0000013d,0x00000188,0x0000013c,0x0000013d)R(0x04cc,0x00000189,0x00000188,0x000001e1,0x00000247)R(0x04cd,0x000001e0,0x00000189,0x000001e1,0x000001e0)R(0x04ce,0x000000fe,0x0000013d,0x0000013c,0x000001cb)R(0x04cf,0x000001e1,0x00000189,0x00000175,0x00000189)\nR(0x04d0,0x0000013d,0x000001cc,0x00000230,0x000001cb)R(0x04d1,0x00000175,0x000001cb,0x00000189,0x000001cb)R(0x04d2,0x00000230,0x0000022f,0x000001e1,0x00000248)R(0x04d3,0x00000247,0x00000175,0x000001cc,0x000001cb)R(0x04d4,0x000001cb,0x0000022f,0x000001e1,0x00000230)R(0x04d5,0x0000029e,0x0000022f,0x0000012c,0x0000013d)R(0x04d6,0x000000fe,0x00000176,0x000001cc,0x00000175)R(0x04d7,0x0000022f,0x00000248,0x000001e1,0x0000012c)R(0x04d8,0x00000175,0x0000013d,0x0000022f,0x0000029e)R(0x04d9,0x0000029d,0x0000012c,0x00000176,0x00000175)R(0x04da,0x0000022f,0x0000029c,0x00000248,0x0000022f)R(0x04db,0x0000029d,0x0000029c,0x000000ef,0x0000012c)R(0x04dc,0x000000fe,0x00000248,0x0000029c,0x00000236)R(0x04dd,0x0000029c,0x0000029d,0x00000235,0x00000236)R(0x04de,0x0000029c,0x00000235,0x00000235,0x0000029d)R(0x04df,0x00000234,0x000001d2,0x00000236,0x00000235)\nR(0x04e0,0x000001d2,0x00000237,0x00000236,0x000001d1)R(0x04e1,0x00000235,0x00000234,0x000001d2,0x00000235)R(0x04e2,0x000001d1,0x000001d3,0x00000237,0x000001d2)R(0x04e3,0x0000017e,0x000001d2,0x000001d1,0x0000017e)R(0x04e4,0x000001d3,0x000001d2,0x0000017e,0x000001d1)R(0x04e5,0x0000017c,0x0000017f,0x000001d3,0x0000017e)R(0x04e6,0x00000134,0x0000017e,0x0000017c,0x00000134)R(0x04e7,0x0000017f,0x0000017e,0x00000134,0x0000017c)R(0x04e8,0x00000132,0x01ac05fc,0x13de2333,0xffffffff)R(0x04e9,0x00000135,0x0000017f,0x00000134,0x00000133)R(0x04ea,0x0000017d,0x00000135,0x00000136,0x0000017d)R(0x04eb,0x00000133,0x000000f7,0x00000135,0x00000134)R(0x04ec,0x00000133,0x00000135,0x000000f7,0x000000f8)R(0x04ed,0x00000136,0x00000133,0x000000f7,0x00000134)R(0x04ee,0x00000132,0x000000f6,0x00000133,0x000000f7)R(0x04ef,0x000000f8,0x00000133,0x000000f6,0x000000f7)\nR(0x04f0,0x00000132,0x000000f5,0x000000c4,0x000000f8)R(0x04f1,0x000000f6,0x000000f6,0x000000f7,0x000000c3)R(0x04f2,0x000000c3,0x000000f7,0x000000f5,0x000000c4)R(0x04f3,0x000000f6,0x000000c2,0x000000c2,0x000000f6)R(0x04f4,0x000000c3,0x000000c3,0x000000f5,0x000000c1)R(0x04f5,0x00000099,0x000000c4,0x000000c2,0x0000009a)R(0x04f6,0x000000c4,0x00000099,0x000000c2,0x000000c3)R(0x04f7,0x00000097,0x00000097,0x000000c3,0x000000c1)R(0x04f8,0x00000099,0x000000c2,0x00000098,0x00000076)R(0x04f9,0x0000009a,0x00000099,0x00000098,0x000000c2)R(0x04fa,0x00000097,0x00000075,0x00000099,0x00000098)R(0x04fb,0x00000076,0x00000099,0x00000075,0x00000074)R(0x04fc,0x00000098,0x00000097,0x00000075,0x00000098)R(0x04fd,0x00000074,0x00000074,0x00000097,0x00000093)R(0x04fe,0x00000054,0x00000076,0x00000075,0x0000006d)R(0x04ff,0x00000076,0x00000054,0x00000053,0x00000075)\nR(0x0500,0x00000074,0x00000074,0x00000093,0x00000070)R(0x0501,0x00000054,0x00000075,0x00000053,0x02dd9cd8)R(0x0502,0x12cffe78,0x000000ae,0x02dd9cd8,0x0c5ffa37)R(0x0503,0xffffffff,0x000001cd,0x00000230,0x000001cc)R(0x0504,0x000001cd,0x00000231,0x00000230,0x00000231)R(0x0505,0x0000029e,0x00000230,0x000001cd,0x00000232)R(0x0506,0x00000231,0x0000029b,0x0000029e,0x00000231)R(0x0507,0x0000029d,0x0000029e,0x0000029b,0x00000232)R(0x0508,0x00000233,0x00000231,0x00000233,0x0000029b)R(0x0509,0x00000231,0x000001cf,0x00000233,0x00000232)R(0x050a,0x00000234,0x0000029d,0x0000029b,0x0000022e)R(0x050b,0x0000029b,0x00000233,0x00000234,0x0000029b)R(0x050c,0x0000022e,0x0000022c,0x00000233,0x000001cf)R(0x050d,0x0000022e,0x00000233,0x0000022d,0x0000022d)R(0x050e,0x00000233,0x0000022c,0x000001d0,0x00000234)R(0x050f,0x0000022e,0x000001d1,0x00000234,0x000001d0)\nR(0x0510,0x000001ca,0x0000022e,0x0000022d,0x000001c9)R(0x0511,0x0000022d,0x0000022c,0x000001d0,0x0000022e)R(0x0512,0x000001ca,0x000001c9,0x0000022c,0x000001c8)R(0x0513,0x000001ca,0x0000022d,0x000001c9,0x0000017c)R(0x0514,0x000001d1,0x000001d0,0x0000017b,0x000001d0)R(0x0515,0x000001ca,0x00000173,0x000001c9,0x000001c8)R(0x0516,0x00000174,0x000001ca,0x000001c9,0x0000017c)R(0x0517,0x000001d0,0x0000017b,0x00000174,0x000001c9)R(0x0518,0x00000173,0x0000017b,0x000001ca,0x00000174)R(0x0519,0x00000132,0x0000017c,0x0000017b,0x0000012b)R(0x051a,0x00000174,0x00000173,0x00000131,0x0000017b)R(0x051b,0x00000174,0x0000012b,0x00000173,0x0000012a)R(0x051c,0x00000132,0x0000017b,0x00000131,0x00000131)R(0x051d,0x00000174,0x0000012b,0x000000ee,0x0000012b)R(0x051e,0x0000012a,0x000000f4,0x00000131,0x0000012b)R(0x051f,0x000000f5,0x00000132,0x00000131,0x000000f4)\nR(0x0520,0x0000012b,0x000000ee,0x000000f5,0x00000131)R(0x0521,0x000000f4,0x000000c1,0x000000f4,0x000000ee)R(0x0522,0x000000c1,0x000000f5,0x000000f4,0x0a8dd0dd)R(0x0523,0x12cffe78,0xffffffff,0x00000177,0x000001cd)R(0x0524,0x000001cc,0x00000177,0x000001cc,0x00000176)R(0x0525,0x00000177,0x000001ce,0x000001cd,0x000001ce)R(0x0526,0x00000232,0x000001cd,0x0000012d,0x00000177)R(0x0527,0x00000176,0x00000178,0x000001ce,0x00000177)R(0x0528,0x0000012d,0x00000178,0x00000177,0x0000012d)R(0x0529,0x00000176,0x0000012c,0x0000017a,0x000001ce)R(0x052a,0x00000178,0x000001cf,0x00000232,0x000001ce)R(0x052b,0x000000f0,0x0000012d,0x0000012c,0x0000012e)R(0x052c,0x00000178,0x0000012d,0x0000017a,0x000001cf)R(0x052d,0x000001ce,0x000000f0,0x0000012c,0x000000ef)R(0x052e,0x00000130,0x0000017a,0x00000178,0x000000f0)R(0x052f,0x0000012e,0x0000012d,0x00000130,0x00000178)\nR(0x0530,0x0000012e,0x000001c7,0x000001cf,0x0000017a)R(0x0531,0x00000179,0x0000017a,0x00000130,0x000000f1)R(0x0532,0x0000012e,0x000000f0,0x000000f3,0x00000130)R(0x0533,0x0000012e,0x00000179,0x000001c7,0x0000017a)R(0x0534,0x000000bf,0x000000f1,0x000000f0,0x000000f3)R(0x0535,0x0000012e,0x000000f1,0x000001c7,0x0000022c)R(0x0536,0x000001cf,0x0000012f,0x00000179,0x00000130)R(0x0537,0x0000012f,0x00000130,0x000000f3,0x00000171)R(0x0538,0x000001c7,0x00000179,0x000000c0,0x000000f3)R(0x0539,0x000000f1,0x00000171,0x00000179,0x0000012f)R(0x053a,0x000001c8,0x0000022c,0x000001c7,0x000000f2)R(0x053b,0x0000012f,0x000000f3,0x000000f2,0x000000f3)R(0x053c,0x000000c0,0x00000171,0x000001c8,0x000001c7)R(0x053d,0x00000128,0x00000171,0x0000012f,0x00000128)R(0x053e,0x0000012f,0x000000f2,0x000000ec,0x000000f2)R(0x053f,0x000000c0,0x00000172,0x000001c8,0x00000171)\nR(0x0540,0x00000128,0x00000172,0x00000171,0x000000ec)R(0x0541,0x00000128,0x000000f2,0x000000bb,0x000000c0)R(0x0542,0x00000096,0x000000bb,0x000000ec,0x000000c0)R(0x0543,0x00000173,0x000001c8,0x00000172,0x000000ec)R(0x0544,0x00000129,0x00000128,0x00000129,0x00000172)R(0x0545,0x00000128,0x00000092,0x000000bb,0x00000096)R(0x0546,0x000000bb,0x000000ed,0x000000ec,0x000000ed)R(0x0547,0x00000129,0x000000ec,0x0000012a,0x00000173)R(0x0548,0x00000172,0x0000012a,0x00000172,0x00000129)R(0x0549,0x000000bd,0x000000ed,0x000000bb,0x000000ed)R(0x054a,0x0000012a,0x00000129,0x00000092,0x000000bd)R(0x054b,0x000000bb,0x000000ee,0x0000012a,0x000000ed)R(0x054c,0x000000bd,0x000000ee,0x000000ed,0x000000bc)R(0x054d,0x000000bd,0x00000092,0x000000c1,0x000000ee)R(0x054e,0x000000bd,0x000000bc,0x000000c1,0x000000bd)R(0x054f,0x00000093,0x000000bc,0x00000092,0x00000097)\nR(0x0550,0x000000c1,0x000000bc,0x00000097,0x000000bc)R(0x0551,0x00000093,0x10370c3b,0x290ea38e,0x00000298)R(0x0552,0x10470c3b,0x290ea22a,0x0000011e,0x10470c3b)R(0x0553,0x1ccea21b,0x0000009c,0x10470c3b,0x1ccd20c7)R(0x0554,0xffffffff,0x0000016e,0x000001bb,0x00000166)R(0x0555,0x000001c4,0x0000022a,0x00000220,0x0000016e)R(0x0556,0x000001c4,0x000001bb,0x00000125,0x0000016e)R(0x0557,0x00000166,0x000001c5,0x0000022a,0x000001c4)R(0x0558,0x000001db,0x00000240,0x0000022a,0x0000016f)R(0x0559,0x000001c4,0x0000016e,0x00000126,0x0000016e)R(0x055a,0x00000125,0x000001db,0x0000022a,0x000001c5)R(0x055b,0x0000016f,0x000001c5,0x000001c4,0x00000126)R(0x055c,0x0000016f,0x0000016e,0x00000184,0x000001c5)R(0x055d,0x0000016f,0x00000184,0x000001db,0x000001c5)R(0x055e,0x00000138,0x0000016f,0x00000126,0x000001dc)R(0x055f,0x00000242,0x000001db,0x00000138,0x00000184)\nR(0x0560,0x0000016f,0x00000184,0x000001dc,0x000001db)R(0x0561,0x000000ff,0x00000138,0x00000126,0x00000139)R(0x0562,0x00000184,0x00000138,0x00000185,0x000001dc)R(0x0563,0x00000184,0x000000fa,0x00000138,0x000000ff)R(0x0564,0x00000139,0x00000185,0x00000184,0x000000fa)R(0x0565,0x00000139,0x00000138,0x00000185,0x000001dd)R(0x0566,0x000001dc,0x0000013a,0x00000185,0x00000139)R(0x0567,0x00000186,0x000001dd,0x00000185,0x000000fb)R(0x0568,0x00000139,0x000000fa,0x0000013a,0x00000186)R(0x0569,0x00000185,0x000000fb,0x0000013a,0x00000139)R(0x056a,0x00000187,0x000001dd,0x00000186,0x0000013b)R(0x056b,0x00000186,0x0000013a,0x0000013b,0x00000187)R(0x056c,0x00000186,0x000000fc,0x0000013a,0x000000fb)R(0x056d,0x000000fc,0x0000013b,0x0000013a,0x000000c7)R(0x056e,0x000000fc,0x000000fb,0x0000013c,0x00000187)R(0x056f,0x0000013b,0x000000fd,0x0000013b,0x000000fc)\nR(0x0570,0x000000fd,0x0000013c,0x0000013b,0x10ec9ca2)R(0x0571,0x1c8ea21b,0xffffffff,0x000000c8,0x000000fd)R(0x0572,0x000000fc,0x000000c8,0x000000fc,0x000000c7)R(0x0573,0x000000fe,0x0000013c,0x000000fd,0x000000c9)R(0x0574,0x000000fd,0x000000c8,0x000000c9,0x000000fe)R(0x0575,0x000000fd,0x0000009d,0x000000c8,0x000000c7)R(0x0576,0x0000009e,0x000000c9,0x000000c8,0x0000009e)R(0x0577,0x000000c8,0x0000009d,0x000000ef,0x000000fe)R(0x0578,0x000000c9,0x000000be,0x000000c9,0x0000009e)R(0x0579,0x000000be,0x000000ef,0x000000c9,0x00000079)R(0x057a,0x0000009e,0x0000009d,0x000000bf,0x000000f0)R(0x057b,0x000000ef,0x000000bf,0x000000ef,0x000000be)R(0x057c,0x00000094,0x000000be,0x0000009e,0x00000094)R(0x057d,0x0000009e,0x00000079,0x00000095,0x000000bf)R(0x057e,0x000000be,0x00000095,0x000000be,0x00000094)R(0x057f,0x00000071,0x00000094,0x00000079,0x000000c0)\nR(0x0580,0x000000f1,0x000000bf,0x00000096,0x000000bf)R(0x0581,0x00000095,0x00000096,0x000000c0,0x000000bf)R(0x0582,0x00000072,0x00000095,0x00000094,0x00000072)R(0x0583,0x00000094,0x00000071,0x00000073,0x00000096)R(0x0584,0x00000095,0x00000073,0x00000095,0x00000072)R(0x0585,0x00000051,0x00000072,0x00000071,0x00000092)R(0x0586,0x00000096,0x00000073,0x00000052,0x00000073)R(0x0587,0x00000072,0x00000052,0x00000072,0x00000051)R(0x0588,0x1b17508e,0x290e362a,0x000000c1,0x1b67508e)R(0x0589,0x290b5a11,0xffffffff,0x00000125,0x00000166)R(0x058a,0x0000011f,0x000000ea,0x00000126,0x00000125)R(0x058b,0x000000ff,0x00000126,0x000000ea,0x000000fa)R(0x058c,0x000000ff,0x000000ca,0x000000e8,0x00000125)R(0x058d,0x0000011f,0x000000ea,0x00000125,0x000000e8)R(0x058e,0x000000e9,0x000000ff,0x000000ea,0x000000ca)R(0x058f,0x000000ff,0x000000e9,0x000000b9,0x000000ea)\nR(0x0590,0x000000e8,0x000000e9,0x000000ea,0x000000b9)R(0x0591,0x000000b7,0x000000e8,0x000000e4,0x000000ca)R(0x0592,0x000000e9,0x000000b8,0x000000b9,0x000000e8)R(0x0593,0x000000b7,0x0000009f,0x000000ca,0x000000b8)R(0x0594,0x000000b8,0x000000e9,0x000000b9,0x0000008f)R(0x0595,0x000000b9,0x000000b7,0x000000b8,0x000000b9)R(0x0596,0x0000008f,0x0000009f,0x000000b8,0x0000008e)R(0x0597,0x0000008d,0x000000b7,0x000000b4,0x0000008f)R(0x0598,0x000000b7,0x0000008d,0x00000090,0x000000b8)R(0x0599,0x0000008f,0x0000008e,0x000000b8,0x00000090)R(0x059a,0x0000008d,0x000000b4,0x0000008b,0x0000006b)R(0x059b,0x0000008f,0x0000008d,0x0000006b,0x00000090)R(0x059c,0x0000008f,0x0000008e,0x00000090,0x0000006c)R(0x059d,0x0000006a,0x0000008e,0x0000006c,0x00000069)R(0x059e,0x0000008d,0x0000008b,0x0000006c,0x00000090)R(0x059f,0x0000006b,0x0000006b,0x0000008d,0x00000069)\nR(0x05a0,0x00000069,0x0000008b,0x00000067,0x0000006a)R(0x05a1,0x0000006c,0x0000004c,0x0000004b,0x0000006c)R(0x05a2,0x0000006b,0x0000004b,0x0000006b,0x00000069)R(0x05a3,0x00000047,0x00000067,0x00000048,0x0000004c)R(0x05a4,0x0000006c,0x0000004b,0x00000049,0x00000069)R(0x05a5,0x00000067,0x0000004b,0x00000069,0x00000049)R(0x05a6,0x00000049,0x00000067,0x00000047,0x0000001e)R(0x05a7,0x00000033,0x0000001d,0x00000033,0x0000004c)R(0x05a8,0x00000032,0x00000032,0x0000004c,0x0000004b)R(0x05a9,0x00000030,0x00000049,0x00000047,0x00000032)R(0x05aa,0x0000004b,0x00000049,0x0000001d,0x00000033)R(0x05ab,0x00000032,0x00000032,0x00000049,0x00000030)R(0x05ac,0x0000001d,0x00000032,0x00000030,0x1b1ac08f)R(0x05ad,0x284e362a,0xffffffff,0x000000c6,0x000000fa)R(0x05ae,0x000000ca,0x0000004a,0x0000004c,0x00000033)R(0x05af,0x000000c6,0x000000ca,0x0000009f,0x0000004a)\nR(0x05b0,0x0000006a,0x0000004c,0x0000007a,0x0000009f)R(0x05b1,0x0000008e,0x0000007a,0x0000008e,0x0000006a)R(0x05b2,0x000000c6,0x000000fb,0x000000fa,0x00000031)R(0x05b3,0x00000033,0x0000001e,0x00000031,0x0000004a)R(0x05b4,0x00000033,0x0000009b,0x000000c6,0x0000009f)R(0x05b5,0x0000009b,0x0000009f,0x0000007a,0x00000058)R(0x05b6,0x0000006a,0x0000004a,0x0000001c,0x00000031)R(0x05b7,0x0000001e,0x00000058,0x0000007a,0x0000006a)R(0x05b8,0x000000c7,0x000000fb,0x000000c6,0x0000003c)R(0x05b9,0x0000004a,0x00000031,0x0000009b,0x000000c7)R(0x05ba,0x000000c6,0x0000003c,0x00000058,0x0000004a)R(0x05bb,0x00000077,0x0000009b,0x0000007a,0x00000024)R(0x05bc,0x00000031,0x0000001c,0x00000077,0x0000007a)R(0x05bd,0x00000058,0x00000024,0x0000003c,0x00000031)R(0x05be,0x0000009c,0x000000c7,0x0000009b,0x00000077)R(0x05bf,0x0000009c,0x0000009b,0x00000055,0x00000058)\nR(0x05c0,0x0000003c,0x00000055,0x00000077,0x00000058)R(0x05c1,0x0000003a,0x0000003c,0x00000024,0x0000009d)R(0x05c2,0x000000c7,0x0000009c,0x00000078,0x0000009c)R(0x05c3,0x00000077,0x0000003a,0x00000055,0x0000003c)R(0x05c4,0x00000055,0x00000078,0x00000077,0x00000023)R(0x05c5,0x0000003a,0x00000024,0x00000078,0x0000009d)R(0x05c6,0x0000009c,0x0000003a,0x00000057,0x00000055)R(0x05c7,0x00000057,0x00000078,0x00000055,0x00000023)R(0x05c8,0x0000003b,0x0000003a,0x00000079,0x0000009d)R(0x05c9,0x00000078,0x00000056,0x00000057,0x0000003a)R(0x05ca,0x00000057,0x00000079,0x00000078,0x0000003b)R(0x05cb,0x00000056,0x0000003a,0x00000056,0x00000071)R(0x05cc,0x00000057,0x00000071,0x00000079,0x00000057)R(0x05cd,0x00000051,0x00000056,0x0000003b,0x00000051)R(0x05ce,0x00000071,0x00000056,0x103721ef,0x28fe878e)R(0x05cf,0x0000013a,0x103761ef,0x1e4e878e,0x000000c5)\nR(0x05d0,0x105762ea,0x1e4c6b8e,0xffffffff,0x0000007f)R(0x05d1,0x000000a5,0x000000a4,0x0000005d,0x0000007f)R(0x05d2,0x0000005c,0x0000007f,0x000000a4,0x0000007e)R(0x05d3,0x00000041,0x0000005d,0x00000040,0x0000002b)R(0x05d4,0x00000041,0x00000029,0x0000005c,0x0000007f)R(0x05d5,0x0000007e,0x00000040,0x0000005d,0x0000005c)R(0x05d6,0x0000007e,0x000000a4,0x000000a3,0x00000029)R(0x05d7,0x00000041,0x00000040,0x0000005c,0x0000007e)R(0x05d8,0x0000005b,0x00000040,0x0000005c,0x0000003f)R(0x05d9,0x0000007e,0x000000a3,0x0000007d,0x00000029)R(0x05da,0x00000040,0x00000028,0x0000003f,0x0000005c)R(0x05db,0x0000005b,0x0000005b,0x0000007e,0x0000007d)R(0x05dc,0x00000028,0x00000040,0x0000003f,0x00000015)R(0x05dd,0x00000029,0x00000028,0x0000005b,0x0000007d)R(0x05de,0x0000005a,0x0000003f,0x0000005b,0x0000003e)R(0x05df,0x00000028,0x0000003f,0x00000027,0x0000003e)\nR(0x05e0,0x0000005b,0x0000005a,0x00000015,0x00000028)R(0x05e1,0x00000014,0x00000027,0x0000003f,0x0000003e)R(0x05e2,0x0000005a,0x0000007d,0x0000007c,0x00000014)R(0x05e3,0x00000028,0x00000027,0x00000007,0x00000015)R(0x05e4,0x00000014,0x0000003e,0x0000005a,0x0000003d)R(0x05e5,0x0000005a,0x0000007c,0x00000059,0x00000027)R(0x05e6,0x0000003e,0x00000026,0x00000014,0x00000027)R(0x05e7,0x00000026,0x0000003d,0x0000005a,0x00000059)R(0x05e8,0x00000026,0x0000003e,0x0000003d,0x00000007)R(0x05e9,0x00000014,0x00000013,0x00000014,0x00000026)R(0x05ea,0x00000013,0x00000026,0x0000003d,0x00000035)R(0x05eb,0x0000003d,0x00000059,0x0000004e,0x00000013)R(0x05ec,0x00000026,0x0000001f,0x0000003d,0x0000004e)R(0x05ed,0x00000035,0x00000059,0x0000006e,0x0000004e)R(0x05ee,0x00000026,0x00000035,0x0000001f,0x00000013)R(0x05ef,0x0000001f,0x0000000e,0x00000035,0x0000004e)\nR(0x05f0,0x00000034,0x0000004e,0x0000006e,0x0000004d)R(0x05f1,0x0000001f,0x00000035,0x00000034,0x0000000e)R(0x05f2,0x0000001f,0x00000010,0x00000034,0x0000004e)R(0x05f3,0x0000004d,0x0000001f,0x00000034,0x00000022)R(0x05f4,0x0000001f,0x00000022,0x00000010,0x103c09ef)R(0x05f5,0x1d5e8733,0xffffffff,0x0000006f,0x00000092)R(0x05f6,0x00000073,0x0000006f,0x00000073,0x00000052)R(0x05f7,0x00000038,0x00000052,0x00000051,0x0000006f)R(0x05f8,0x00000093,0x00000092,0x0000004f,0x0000006f)R(0x05f9,0x00000052,0x0000004f,0x00000052,0x00000038)R(0x05fa,0x00000070,0x00000093,0x0000006f,0x0000004f)R(0x05fb,0x00000070,0x0000006f,0x00000036,0x0000004f)R(0x05fc,0x00000038,0x00000036,0x00000038,0x00000021)R(0x05fd,0x00000050,0x00000070,0x0000004f,0x00000036)R(0x05fe,0x00000050,0x0000004f,0x00000020,0x00000036)R(0x05ff,0x00000021,0x00000053,0x00000074,0x00000070)\nR(0x0600,0x00000053,0x00000070,0x00000050,0x00000037)R(0x0601,0x00000050,0x00000036,0x00000020,0x00000037)R(0x0602,0x00000036,0x00000039,0x00000053,0x00000050)R(0x0603,0x00000039,0x00000050,0x00000037,0x00000022)R(0x0604,0x00000037,0x00000020,0x00000010,0x00000022)R(0x0605,0x00000020,0x00000022,0x00000039,0x00000037)R(0x0606,0x00000039,0x00000054,0x00000053,0x00000034)R(0x0607,0x00000039,0x00000022,0x0000004d,0x00000054)R(0x0608,0x00000039,0x00000034,0x0000004d,0x00000039)R(0x0609,0x0000004d,0x0000006d,0x00000054,0x1b8721f5)R(0x060a,0x28fe3726,0xffffffff,0x0000002f,0x00000046)R(0x060b,0x0000002d,0x00000018,0x0000002d,0x0000002c)R(0x060c,0x00000018,0x0000002c,0x0000002a,0x00000047)R(0x060d,0x00000048,0x0000002f,0x0000002a,0x0000002b)R(0x060e,0x00000016,0x0000001a,0x0000002f,0x0000002d)R(0x060f,0x0000001a,0x0000002d,0x00000018,0x00000018)\nR(0x0610,0x0000002a,0x00000017,0x00000016,0x0000002b)R(0x0611,0x00000029,0x00000017,0x0000002a,0x00000016)R(0x0612,0x0000002e,0x00000047,0x0000002f,0x0000002e)R(0x0613,0x0000002f,0x0000001a,0x0000000a,0x0000001a)R(0x0614,0x00000018,0x0000000a,0x00000018,0x00000017)R(0x0615,0x00000016,0x00000029,0x00000015,0x00000030)R(0x0616,0x00000047,0x0000002e,0x00000008,0x00000017)R(0x0617,0x00000016,0x00000019,0x0000002e,0x0000001a)R(0x0618,0x00000019,0x0000001a,0x0000000a,0x00000009)R(0x0619,0x00000016,0x00000015,0x0000000a,0x00000017)R(0x061a,0x00000008,0x00000008,0x00000016,0x00000009)R(0x061b,0x0000001b,0x00000030,0x0000002e,0x0000001b)R(0x061c,0x0000002e,0x00000019,0x00000009,0x00000015)R(0x061d,0x00000007,0x00000002,0x0000000a,0x00000008)R(0x061e,0x0000000b,0x00000019,0x0000000a,0x00000008)R(0x061f,0x00000009,0x00000001,0x0000001d,0x00000030)\nR(0x0620,0x0000001b,0x0000000b,0x0000001b,0x00000019)R(0x0621,0x00000002,0x0000000b,0x0000000a,0x00000002)R(0x0622,0x00000008,0x00000001,0x00000001,0x00000009)R(0x0623,0x00000007,0x0000000d,0x0000001b,0x0000000b)R(0x0624,0x0000000d,0x0000001d,0x0000001b,0x00000001)R(0x0625,0x00000007,0x00000004,0x00000003,0x0000000b)R(0x0626,0x00000002,0x00000000,0x00000002,0x00000001)R(0x0627,0x00000007,0x00000013,0x0000000e,0x00000003)R(0x0628,0x0000000d,0x0000000b,0x00000001,0x00000004)R(0x0629,0x00000000,0x00000000,0x00000003,0x00000002)R(0x062a,0x0000000d,0x0000001e,0x0000001d,0x00000007)R(0x062b,0x0000000e,0x00000004,0x0000000c,0x0000000d)R(0x062c,0x00000003,0x00000004,0x00000005,0x00000000)R(0x062d,0x0000001c,0x0000001e,0x0000000d,0x00000004)R(0x062e,0x0000000e,0x00000005,0x00000000,0x00000006)R(0x062f,0x00000003,0x0000000c,0x0000001c,0x0000000d)\nR(0x0630,0x00000006,0x0000000c,0x00000003,0x00000005)R(0x0631,0x00000006,0x00000000,0x0000000e,0x00000010)R(0x0632,0x00000005,0x00000011,0x0000001c,0x0000000c)R(0x0633,0x00000006,0x00000011,0x0000000c,0x00000005)R(0x0634,0x0000000f,0x00000006,0x00000005,0x00000010)R(0x0635,0x0000000f,0x00000011,0x00000024,0x0000001c)R(0x0636,0x00000006,0x00000012,0x00000011,0x0000000f)R(0x0637,0x00000012,0x00000006,0x00000010,0x00000020)R(0x0638,0x0000000f,0x00000023,0x00000024,0x00000011)R(0x0639,0x00000012,0x00000023,0x00000011,0x0000000f)R(0x063a,0x00000021,0x00000012,0x00000020,0x00000021)R(0x063b,0x0000000f,0x00000012,0x00000025,0x00000023)R(0x063c,0x00000021,0x00000025,0x00000012,0x00000025)R(0x063d,0x0000003b,0x00000023,0x00000021,0x00000038)R(0x063e,0x00000025,0x00000038,0x0000003b,0x00000025)R(0x063f,0x00000038,0x00000051,0x0000003b,0x00000000)\n  }\n  return r;\n}\nivec4 points_data(in int i) {\n#  ifdef R\n#    undef R\n#  endif\n#  define R(i,a,b,c,d) case i: r=ivec4(a,b,c,d); break;\n  ivec4 r;\n  switch(i) {\nR(0x0000,0x219b3ec1,0x203a82ec,0x23ba66ca,0x24bb3a9d)R(0x0001,0x1e7b1add,0x1f3beac5,0x228c1e91,0x1cda5eff)R(0x0002,0x21e9b2ef,0x1e79bf09,0x25197ebf,0x266a7a90)R(0x0003,0x25abbe6b,0x279b0656,0x1cab7afb,0x1efcaaa5)R(0x0004,0x1c5c42ea,0x242c9251,0x213cfa6e,0x1b8acf1f)R(0x0005,0x1bb9f728,0x1c596314,0x1f68d30c,0x22b8dae8)R(0x0006,0x24a86abf,0x2749a283,0x26c8ba87,0x286a1e48)R(0x0007,0x265c122a,0x28ea8605,0x27eb5a11,0x19fb9b25)R(0x0008,0x1bccfec1,0x1d5d6680,0x192c6afb,0x227d3e22)R(0x0009,0x24bcc1fd,0x1f5d8a46,0x199a9b59,0x19e9c364)R(0x000a,0x1ac9173f,0x1be88f26,0x2167f2f1,0x1e47db1b)R(0x000b,0x23777ac4,0x25b7c683,0x28491e43,0x27781e41)R(0x000c,0x28f995fc,0x26bc05da,0x290a25b6,0x284b19c4)R(0x000d,0x16fc0b2d,0x179b4753,0x1a0db292,0x18ad26d3)R(0x000e,0x1b8dfe47,0x159cd2fa,0x220d59ce,0x1f5dce0a)R(0x000f,0x24bca1a8,0x162a8771,0x1799bf7e,0x1868fb79)\nR(0x0010,0x19685f4a,0x1a57d737,0x20070303,0x1c670730)R(0x0011,0x22e6aad9,0x24e6fe8f,0x26672241,0x285895f8)R(0x0012,0x274799f5,0x28a919ae,0x26cbbd8b,0x2859b971)R(0x0013,0x282ac57b,0x13ac1b31,0x144b575a,0x17ae1667)R(0x0014,0x168d9aae,0x1bce35f8,0x183e5a1b,0x132d52ce)R(0x0015,0x122cb70b,0x225d1174,0x1eade5c8,0x1f6dad85)R(0x0016,0x249c4956,0x121a9378,0x1429b386,0x1598eb8e)R(0x0017,0x16d83f6e,0x17c7c342,0x19073345,0x1e26372c)R(0x0018,0x2115f309,0x1a765345,0x23d5a6d6,0x25163eae)R(0x0019,0x2646466c,0x2696462c,0x2656b9ee,0x279815aa)R(0x001a,0x262719a3,0x2788a568,0x263b5943,0x26995534)R(0x001b,0x270a593b,0x103c0b33,0x107b4f57,0x144e523c)R(0x001c,0x13ddee86,0x1bbe2da0,0x187e6dc8,0x14ee85ef)R(0x001d,0x104d9a9b,0x0f8ceee1,0x0d7c4714,0x21fcb125)R(0x001e,0x1f5d653c,0x1c4de94f,0x23abdd11,0x0e2aaf66)R(0x001f,0x1059d378,0x12790388,0x14285380,0x1507b348)\nR(0x0020,0x15f74b37,0x17067749,0x1c458f51,0x1f752336)R(0x0021,0x22453303,0x18a58f66,0x24c54ecc,0x26058694)R(0x0022,0x2745664e,0x26c5c5f2,0x25962dab,0x25d7ad64)R(0x0023,0x24469160,0x25385d2a,0x24cae103,0x23f928f3)R(0x0024,0x2549f900,0x0c7b8745,0x10ee760c,0x107e2260)R(0x0025,0x18ce416e,0x152e7999,0x123e95c0,0x0c3dde78)R(0x0026,0x0d1d52b2,0x0b5cc2e3,0x09cc0712,0x20ac30e3)R(0x0027,0x1efce4f8,0x1c3d7105,0x192de91d,0x220b40db)R(0x0028,0x0a5ac351,0x0cd9db69,0x0e59076a,0x11487f70)R(0x0029,0x1237db44,0x12676323,0x13a6d33b,0x1515e75c)R(0x002a,0x1bb4bf69,0x1ec43751,0x2134a72d,0x23d50710)R(0x002b,0x15351b77,0x18348b83,0x270516eb,0x27653695)R(0x002c,0x2904e657,0x2794f60b,0x26a521be,0x24c58180)R(0x002d,0x23776126,0x2265b145,0x21668518,0x223834f1)R(0x002e,0x22ca2cd6,0x217910cc,0x086b4f32,0x104e9dda)R(0x002f,0x0d9e423b,0x0dce6e0d,0x15be3143,0x12ce6967)\nR(0x0030,0x11cea19b,0x0a9e1637,0x09ad32a1,0x083d925f)R(0x0031,0x080c86cd,0x069bd2f6,0x1e7bb4b7,0x1c8c9cc7)R(0x0032,0x192d4cd4,0x160db8f7,0x1f5ac0b8,0x06ea7332)R(0x0033,0x097a0753,0x0a793b55,0x0b588f39,0x0e984f41)R(0x0034,0x0f97b719,0x0df77f07,0x10070329,0x11b5f34f)R(0x0035,0x1b83db75,0x1e035f60,0x2013ef50,0x22e47355)R(0x0036,0x2604ab43,0x11e4e76a,0x14e42b85,0x17d39385)R(0x0037,0x29849315,0x2a44c6ba,0x2bd49669,0x28d48e11)R(0x0038,0x2b545e22,0x27344dd7,0x25a47d96,0x2334c562)R(0x0039,0x206750ee,0x2004bd36,0x1f75ad16,0x1dc664e7)R(0x003a,0x1f282cc6,0x1ff9d4bc,0x1dd910b6,0x05bb170a)R(0x003b,0x106ef9d1,0x0e1ed9ff,0x0b6e9e1f,0x129e1122)R(0x003c,0x110e4132,0x11de8163,0x119f05a0,0x11df016a)R(0x003d,0x08ce5a2c,0x06edd62f,0x05ecee92,0x04bd2e4e)R(0x003e,0x04ec5ec1,0x03bba6df,0x1c1ae88f,0x1b1bd09a)R(0x003f,0x18bc9ca2,0x158d20ba,0x121d8ce5,0x1cca009e)\nR(0x0040,0x054a3315,0x06e98336,0x0818c333,0x09380308)R(0x0041,0x0c37df08,0x0a478af3,0x0bd70717,0x0e165339)R(0x0042,0x0f456b40,0x1b22fb6e,0x1d72a760,0x1eb33b64)R(0x0043,0x2083cf71,0x228403a7,0x24f42789,0x2884175a)R(0x0044,0x0ef46b46,0x11a3db6b,0x14b33f7c,0x17c29f70)R(0x0045,0x2c140f3b,0x2ca476f2,0x2e246eaa,0x2d547236)R(0x0046,0x2f447663,0x297405eb,0x2d444e0e,0x2c43f5fd)R(0x0047,0x27538dcc,0x2523a9ad,0x22b3d970,0x1d175cca)R(0x0048,0x1f73c94c,0x1c743d26,0x1c653d08,0x1a75e0e3)R(0x0049,0x1b26a8cc,0x1c6848b0,0x1b99288e,0x034ad6fe)R(0x004a,0x107fa5b5,0x0eff7de5,0x0c5f6204,0x098f1615)R(0x004b,0x0f5dd50c,0x0f9e6d10,0x112ec934,0x114fa17f)R(0x004c,0x10ff753e,0x06be9219,0x04adbe13,0x032cc291)R(0x004d,0x02ed0a11,0x022c8e50,0x023c2ac4,0x018b32eb)R(0x004e,0x1a09f470,0x18bac871,0x17cbb87f,0x153c7090)R(0x004f,0x119cd8af,0x0e9d48d4,0x029a0b27,0x05099b31)\nR(0x0050,0x06b8ff30,0x07984f1b,0x08077af7,0x0886ff07)R(0x0051,0x0a26572a,0x0c45c328,0x0cc4ff16,0x1b02234f)R(0x0052,0x1db1d731,0x1e422b4d,0x1e52a770,0x1f232b91)R(0x0053,0x20a3a7bb,0x22239be3,0x2483cbd6,0x2783b7ab)R(0x0054,0x2b33b37e,0x0ca41308,0x0ee36f39,0x11c2df56)R(0x0055,0x14b25b5d,0x1741b33b,0x2ee3df56,0x2f443f1f)R(0x0056,0x306456e2,0x30d43e93,0x2f14ba2f,0x2e94be0b)R(0x0057,0x31b45a5d,0x3134ea2f,0x2b0331db,0x2ec499e7)R(0x0058,0x2df409f5,0x2e1361f6,0x2882a5cb,0x24e2ddbe)R(0x0059,0x2242f995,0x1ef2f968,0x1b67789f,0x1b93513e)R(0x005a,0x1823c128,0x19549d0f,0x182548f0,0x176590c8)R(0x005b,0x1935fcad,0x1a36a893,0x1ae83c74,0x19a90458)R(0x005c,0x016a5712,0x0f3ff199,0x0ddfd1d2,0x0aefa9e5)R(0x005d,0x07ef35ec,0x0c8d70f0,0x0dbdf8f9,0x0d3ea4e6)R(0x005e,0x0f9f2d0d,0x0fffd95f,0x0eefa52a,0x055e89e8)R(0x005f,0x036dc5d7,0x01ac4a99,0x020cfdc1,0x01bc59fc)\nR(0x0060,0x016bba2d,0x015bd27d,0x014b96ca,0x010a8ef0)R(0x0061,0x16f9d04f,0x156ac05d,0x143b946f,0x116c1482)R(0x0062,0x0dac7c9d,0x0b6cf4d2,0x01697342,0x02f92359)R(0x0063,0x0568f74f,0x06686b46,0x06e7ab22,0x0606df18)R(0x0064,0x07063f23,0x0895af1c,0x0ae53701,0x0b24a2d5)R(0x0065,0x1b415f1e,0x1e113af6,0x1f716726,0x1ef1df71)R(0x0066,0x1f125fa8,0x206317d6,0x22c2cfef,0x24734ff3)R(0x0067,0x27e327e7,0x2a935fba,0x2dd35b8d,0x0b03cab8)R(0x0068,0x0d131ef2,0x0fd27f1d,0x1311e730,0x15013f00)R(0x0069,0x18310304,0x30636f50,0x30e40f1c,0x31a3fed0)R(0x006a,0x31f3ea7e,0x30b551fa,0x305555d3,0x33740a4e)R(0x006b,0x34348a37,0x33951217,0x3305c9f0,0x2da2d5e2)R(0x006c,0x2bf269d3,0x30e529ad,0x30046dca,0x2f73bdeb)R(0x006d,0x30533606,0x2ff2ea02,0x29c1e5dc,0x25c1fdd1)R(0x006e,0x223231c7,0x1f2239a0,0x1bc26974,0x19873c62)R(0x006f,0x1872c550,0x15531d3c,0x1403e92f,0x15b4b514)\nR(0x0070,0x157540f1,0x148568af,0x1675bc7e,0x18165868)R(0x0071,0x1898004d,0x16e8d046,0x00f9b71f,0x0daffd68)R(0x0072,0x0c3ff9a8,0x092fb9b2,0x066f25b0,0x097d2ce1)R(0x0073,0x0b3dd0dd,0x0aeea0df,0x0d2f3cfd,0x0c2fb932)R(0x0074,0x047e6d9e,0x02dd9d88,0x01ecc972,0x01ec25a9)R(0x0075,0x01bb71d7,0x013ab9ff,0x022b1a4f,0x023b1686)R(0x0076,0x011b22bd,0x020a56b6,0x0179bee7,0x13a9083e)R(0x0077,0x130a144c,0x112b0c5a,0x0e5ba876,0x0aabac7e)R(0x0078,0x09bc44ae,0x084c94e3,0x00e8df56,0x01989b72)R(0x0079,0x03b87774,0x0457db66,0x04b71f3b,0x03d6433d)R(0x007a,0x02d6af35,0x05e5a72f,0x06d54312,0x087522f3)R(0x007b,0x09e4daca,0x09b46e81,0x1b40dadd,0x1e00e2b4)R(0x007c,0x1fc0c2e3,0x20312b69,0x21b0af2a,0x202177b1)R(0x007d,0x20a22bd2,0x2261b3df,0x25321bf3,0x26b2a7ff)R(0x007e,0x29a27be7,0x2bd2e7c4,0x2f02c386,0x0a538667)R(0x007f,0x0ba2e2a3,0x0e4246d3,0x1151b2ed,0x134112b9)\nR(0x0080,0x1730b6be,0x30f28f42,0x31c35f09,0x32333ead)R(0x0081,0x3293865b,0x322605c4,0x3215f59c,0x34e3e627)R(0x0082,0x36547e19,0x36f50a09,0x36955de8,0x34258df0)R(0x0083,0x344671c6,0x33d6a1ae,0x2f72b1d1,0x2d8285c0)R(0x0084,0x2cf225bd,0x2c11d9de,0x3345b174,0x32c4e190)R(0x0085,0x324431bb,0x31739ded,0x3293660d,0x3172fe23)R(0x0086,0x3182921f,0x30e29df2,0x2b114e01,0x271139f7)R(0x0087,0x22f179ec,0x1f5185e3,0x1bc19dae,0x1831e185)R(0x0088,0x16c70c47,0x14c24d67,0x1202fd55,0x1053c958)R(0x0089,0x1184a933,0x12953117,0x126558e9,0x10f58ca7)R(0x008a,0x1305bc74,0x14e64055,0x1537f43b,0x00c90326)R(0x008b,0x0a8fd96e,0x07ef8579,0x05feed63,0x069d1cec)R(0x008c,0x08fdf4d8,0x089ec4f8,0x0acf4507,0x089f6134)R(0x008d,0x044e2150,0x030d3d3f,0x02ac392d,0x01bbf55d)R(0x008e,0x01eb4178,0x016a91b0,0x024a5230,0x0219c5f8)R(0x008f,0x0189ddb2,0x02ea3677,0x02a93ea4,0x0238eeeb)\nR(0x0090,0x1197e840,0x1028b043,0x10499045,0x0eca584d)R(0x0091,0x0c5b005b,0x08eae066,0x077b8490,0x06abf4cd)R(0x0092,0x053c3cfc,0x00a82b50,0x00f80f71,0x0227f77a)R(0x0093,0x02973757,0x01766344,0x01f5b368,0x03e56764)R(0x0094,0x0136c73c,0x0574f745,0x05a4931b,0x0694e2e7)R(0x0095,0x07c4dab4,0x08d4c686,0x08d46a4f,0x09d3ea36)R(0x0096,0x1aa0a294,0x1e20d26c,0x1fd09a9f,0x227042e4)R(0x0097,0x21f0db80,0x24208f3f,0x22211fbd,0x25115bd0)R(0x0098,0x2811dfe3,0x2b41b7b6,0x2cd24bb3,0x2f01df74)R(0x0099,0x0b033214,0x0ba29a50,0x0d622687,0x1001869c)R(0x009a,0x11612259,0x14b0c27a,0x17709e5f,0x3101ab1f)R(0x009b,0x32026aee,0x3202d25a,0x32122e98,0x32f35e31)R(0x009c,0x3376b58b,0x33e68d65,0x35a3e9f7,0x37b475f0)R(0x009d,0x38e519e8,0x398591d8,0x3925c9b2,0x36a5d1a9)R(0x009e,0x34e61dc3,0x35c6b18a,0x35071d82,0x34d73969)R(0x009f,0x324271b2,0x2fa27d93,0x2e222984,0x2e11a578)\nR(0x00a0,0x2d31adc2,0x2d9169f0,0x35f6313d,0x3565615d)R(0x00a1,0x35549d8e,0x3433edd4,0x3241f638,0x32c229f9)R(0x00a2,0x2d510633,0x2870b630,0x2460ba1d,0x20f11a1a)R(0x00a3,0x1e710624,0x1b6109ee,0x180135be,0x14c19197)R(0x00a4,0x13270443,0x11923581,0x0f02f586,0x0d73c589)R(0x00a5,0x0db49156,0x0f255133,0x0f059102,0x0d35d0bc)R(0x00a6,0x0f260079,0x11065852,0x0178330b,0x066ea521)R(0x00a7,0x041cf50e,0x04fdc513,0x071e08ee,0x01bb4d29)R(0x00a8,0x038b9900,0x015a755f,0x02a96a4c,0x02b921bb)R(0x00a9,0x0298d20e,0x0279a16e,0x02686268,0x02681ab8)R(0x00aa,0x0ee72c49,0x0d38184b,0x0cc9304d,0x0b0a3054)R(0x00ab,0x070a086e,0x057ad487,0x045b38bb,0x00977f28)R(0x00ac,0x00b73344,0x01476b60,0x00b6673b,0x00c59f68)R(0x00ad,0x01b50b80,0x0364c374,0x04344f53,0x03e3eb1c)R(0x00ae,0x04843eda,0x0594baa1,0x0704ce6f,0x07444245)R(0x00af,0x08c3de1b,0x0a53a9f8,0x1b00b63d,0x2100a255)\nR(0x00b0,0x22703e93,0x25703efa,0x25502eb0,0x2490e79a)R(0x00b1,0x28509316,0x2740db62,0x28c13fa5,0x2cc1437a)R(0x00b2,0x2f412b41,0x0c6321cd,0x0d324e07,0x0e81c645)R(0x00b3,0x10816a04,0x1420da28,0x17a0c60b,0x31816acc)R(0x00b4,0x3030d2f9,0x3171766d,0x34f7414a,0x35c70d2c)R(0x00b5,0x36c451b9,0x38c49dbd,0x3a6529ba,0x3b55b9b4)R(0x00b6,0x3c1605a0,0x3b763d79,0x3866516b,0x36f7294d)R(0x00b7,0x3657853a,0x36679520,0x34a1f1b6,0x34c2296b)R(0x00b8,0x32526564,0x2ff22d49,0x2f01c132,0x2f412158)R(0x00b9,0x2f21351c,0x2e8155a8,0x2ff139d6,0x30214215)R(0x00ba,0x3856b907,0x3905f927,0x37b5415a,0x38b4e585)R(0x00bb,0x32017e1f,0x33c1b5f2,0x30411a53,0x2ea0ae89)R(0x00bc,0x2b20a272,0x27e05679,0x24d05e54,0x14611ddf)R(0x00bd,0x11c19dbd,0x0f2239c3,0x0b13b9b9,0x0aa43d7f)R(0x00be,0x09750169,0x0be55d55,0x0c05b93b,0x0b15dcfc)R(0x00bf,0x08e618c7,0x0b563893,0x0d16a85e,0x018772eb)\nR(0x00c0,0x020afcde,0x018a9907,0x0279fd2a,0x02f8b171)R(0x00c1,0x029835c6,0x0257d221,0x03391d25,0x01c74e72)R(0x00c2,0x0106eeb8,0x0a77705e,0x09986c5d,0x0959605a)R(0x00c3,0x06790076,0x0399648d,0x038a2c88,0x027a9ca1)R(0x00c4,0x0076a30b,0x0055d333,0x00451b60,0x0094bf78)R(0x00c5,0x01846f73,0x0213f74e,0x01d3ab12,0x0213cacd)R(0x00c6,0x0304269f,0x04f48a76,0x0593fa4c,0x06d3ba13)R(0x00c7,0x0893bde6,0x29006ac6,0x2bd08700,0x2af0ef4f)R(0x00c8,0x2e20ab26,0x3060caaa,0x2ef072dd,0x36e79101)R(0x00c9,0x37c75cec,0x3b054d86,0x3cb5dd87,0x3db63d7b)R(0x00ca,0x3e467963,0x3d66a541,0x3a46cd30,0x38d7750e)R(0x00cb,0x3837acf3,0x3897a4d7,0x36a1a16d,0x35d16da2)R(0x00cc,0x36d1cd21,0x34a22117,0x32422513,0x30c1ccf5)R(0x00cd,0x2fe148db,0x2fc0e501,0x3100f541,0x31310593)R(0x00ce,0x3020ecc2,0x32512de1,0x3a373cc1,0x3b56a4ea)R(0x00cf,0x3ab5994e,0x3c863917,0x340149d3,0x2ca07ebe)\nR(0x00d0,0x0833edae,0x07447d81,0x07655161,0x0935c15a)R(0x00d1,0x0935e938,0x07f5f0ff,0x06c60cce,0x07067cab)R(0x00d2,0x0976c07f,0x019a4cbe,0x0239dcec,0x0308112b)R(0x00d3,0x02b7a17d,0x026745d6,0x0146f227,0x023910e5)R(0x00d4,0x021834ec,0x00a67a74,0x0055eecd,0x06c73c8a)R(0x00d5,0x0688107d,0x03788496,0x01d9c099,0x01a8d09e)R(0x00d6,0x00350311,0x00244b48,0x00841b5b,0x00c3bb32)R(0x00d7,0x00c39eec,0x0143caa0,0x00b3c2b0,0x0323be7f)R(0x00d8,0x05234a37,0x05132207,0x0653a5dc,0x396788c1)R(0x00d9,0x3d35fd51,0x3ee6714a,0x3f86a539,0x3f76d51a)R(0x00da,0x3d2714f9,0x3ae780d7,0x3b2788b8,0x3af77cae)R(0x00db,0x37c1094e,0x38414926,0x35d0f586,0x38c154d9)R(0x00dc,0x36a1c8cd,0x33f1d8c3,0x31916ca8,0x31310c8b)R(0x00dd,0x3120d0aa,0x31c0e0f5,0x3390c95f,0x34f0a519)R(0x00de,0x33f0d998,0x3210e46f,0x3bf758a6,0x3cc718b3)R(0x00df,0x3e56c8d8,0x3f168514,0x0553e1a3,0x04f49d6c)\nR(0x00e0,0x0645293d,0x07b5d141,0x069590fa,0x05256cc4)R(0x00e1,0x05061cad,0x0466c8a2,0x016964b7,0x02c70138)R(0x00e2,0x02074cf4,0x02869d92,0x015669e1,0x00c62e2a)R(0x00e3,0x014878bc,0x011790c3,0x00b58e72,0x0014f2b6)R(0x00e4,0x0387a49f,0x0177cca9,0x001422f0,0x0043c317)R(0x00e5,0x0043c6bc,0x00839a97,0x01533e81,0x0332ee5a)R(0x00e6,0x03629630,0x02a281f7,0x042315d0,0x3ff6c907)R(0x00e7,0x3fd6e8f4,0x3e3734c5,0x3d4750ab,0x3730993d)R(0x00e8,0x390074fa,0x3990c8eb,0x35a0854b,0x3af0c09f)R(0x00e9,0x39315c8d,0x36c1a07d,0x3431786d,0x32a1305f)R(0x00ea,0x33910c40,0x33e0d464,0x3430d4b8,0x370068d9)R(0x00eb,0x36f03d07,0x34e0f42d,0x3e1728b1,0x3f86e8d9)R(0x00ec,0x02b345a5,0x02540978,0x02145d54,0x04349d33)R(0x00ed,0x0474dcee,0x0254c4cc,0x02e558ae,0x0215f0a5)R(0x00ee,0x01c6d0a4,0x01f65d02,0x02961150,0x00e6a4d2)R(0x00ef,0x01b5b1a0,0x006591e2,0x00e5561e,0x0116bcb3)\nR(0x00f0,0x00549e59,0x00141296,0x00336a7d,0x0092ce67)R(0x00f1,0x01828252,0x01725627,0x00b259f3,0x0182a1c6)R(0x00f2,0x3f2710c8,0x381038fa,0x3a700cb4,0x3b2044ac)R(0x00f3,0x3cc07c68,0x3be10054,0x39a16840,0x36e1702b)R(0x00f4,0x35314825,0x3691380f,0x3790dc37,0x3730b484)R(0x00f5,0x3950349f,0x393008c2,0x3891180a,0x00e34d96)R(0x00f6,0x00c42168,0x01045d30,0x02247105,0x011490df)R(0x00f7,0x01451cb3,0x0105c8ac,0x00b5b8ce,0x01659919)R(0x00f8,0x0155455f,0x0054c9ab,0x00348604,0x00039e40)R(0x00f9,0x0022b243,0x00925e33,0x00326df8,0x0072b5be)R(0x00fa,0x3b500087,0x3c402476,0x3d00d830,0x3d10903c)R(0x00fb,0x3bf13419,0x39a1640a,0x38315c03,0x3a113c00)R(0x00fc,0x3b30bc29,0x3af05065,0x3c40e017,0x00738d8a)R(0x00fd,0x00844d5c,0x00a4810f,0x00c4f4ca,0x0094f505)R(0x00fe,0x0074a554,0x0043f192,0x0013bddd,0x0002e604)R(0x00ff,0x002305bc,0x3ca0584f,0x3c810015,0x3af14803)\nR(0x0100,0x00000000,0x00000000,0x00000000,0x00000000)  }\n  return r;\n}\nivec4 normals_data(in int i) {\n#  ifdef R\n#    undef R\n#  endif\n#  define R(i,a,b,c,d) case i: r=ivec4(a,b,c,d); break;\n  ivec4 r;\n  switch(i) {\nR(0x0000,0x2cfaf3aa,0x29fa97c8,0x316a0798,0x336ad76a)R(0x0001,0x2d4a0fbd,0x307a8397,0x308bb36f,0x303987ac)R(0x0002,0x2e690bc3,0x27a97be6,0x36483f6d,0x38997337)R(0x0003,0x36ab9b14,0x3bca4ecc,0x34295782,0x2fbc3761)R(0x0004,0x2f3b7f85,0x357ccadd,0x302d371f,0x3779734d)R(0x0005,0x39e87729,0x2f38ebbd,0x2bb87fda,0x3197bbaa)R(0x0006,0x3736bf55,0x3ba7fefe,0x3b56a2f8,0x3e386ea1)R(0x0007,0x3a8c0676,0x3f693232,0x3d8aee36,0x2ffb4f84)R(0x0008,0x2c5cf35c,0x2d4dcf16,0x29cc8786,0x332e1e76)R(0x0009,0x37ed421d,0x2dfe6ecc,0x31da2b90,0x3668336b)R(0x000a,0x38072b4b,0x2db873cc,0x32276fa2,0x2d2853d1)R(0x000b,0x37975755,0x3b5636ed,0x3ea6ee7e,0x3df6067c)R(0x000c,0x3fc76223,0x3b8c05ea,0x3fb869ca,0x3e2a85d5)R(0x000d,0x274c9392,0x28bb77b6,0x289e5715,0x26ed5b6a)R(0x000e,0x2a1f0eae,0x240d6772,0x339e45da,0x2eaefe4b)R(0x000f,0x381d15ae,0x24ba67e1,0x28795fe4,0x31d6739c)\nR(0x0010,0x3205b78b,0x2a2847e3,0x31d8b3a4,0x2bd8cfd7)R(0x0011,0x36893b60,0x3c089af2,0x3f07266c,0x3f263e13)R(0x0012,0x3ea5c601,0x3f46adc2,0x3b7ba58a,0x3de79d4e)R(0x0013,0x3da9cd68,0x20ec7ba6,0x219ba7c5,0x23cf36d1)R(0x0014,0x223e5335,0x29df8e2f,0x252fb26d,0x1dbe3f3c)R(0x0015,0x1d4d936b,0x348dc57e,0x2e7f19e1,0x301eb59c)R(0x0016,0x383c5d4b,0x1e3a37ea,0x1f6943f8,0x24373ff8)R(0x0017,0x2a93e794,0x260553d7,0x22a8b3fb,0x2e29c7bb)R(0x0018,0x33398b8b,0x2709cbe4,0x37194f56,0x3a79730e)R(0x0019,0x3e095e95,0x3fa91205,0x3fb765d0,0x3e05a5a7)R(0x001a,0x3dc5e181,0x3c660d38,0x3a4ab916,0x3a26d8e2)R(0x001b,0x3b58c0fb,0x1cdc8ba0,0x1dab9bc6,0x207f92a0)R(0x001c,0x1eded707,0x2a9f75be,0x25bfd9ef,0x220fea36)R(0x001d,0x1c9e4f34,0x1b4e0747,0x1a6d5b70,0x341cdd09)R(0x001e,0x304e1935,0x2b5f055d,0x363b20cc,0x1a39efe7)R(0x001f,0x19987ff3,0x18e75bf0,0x1c53a7a8,0x1e82cb82)\nR(0x0020,0x1b081bf8,0x1f9a1bec,0x2b0a37ca,0x2fe9e3a9)R(0x0021,0x313b4378,0x245a9fdd,0x2d6e5edc,0x3b2a56df)R(0x0022,0x3dbaea19,0x3f1945af,0x3e180153,0x3af57920)R(0x0023,0x3a364cf0,0x37d5d0c8,0x36c9aca9,0x35367c8d)R(0x0024,0x37a7dca8,0x19fbdfb4,0x1fbfb683,0x1e1f1ee4)R(0x0025,0x25df9d86,0x234fd9b2,0x234ff207,0x197e8315)R(0x0026,0x1b5e1343,0x189db352,0x15fcfb6d,0x314b588a)R(0x0027,0x2f0d0cc5,0x2bbde8df,0x262ef116,0x3189a861)R(0x0028,0x1669bbda,0x186833f0,0x1655a7cf,0x1493e38e)R(0x0029,0x1602b35b,0x17673fe9,0x1c1a97df,0x1e3adfdb)R(0x002a,0x2b19abd2,0x2ca96fcc,0x23cc73a3,0x213eeafd)R(0x002b,0x1cea43e7,0x24694bf3,0x2a4f2a98,0x30ceb246)R(0x002c,0x324e69ac,0x3d2a897d,0x3d68cd3e,0x39d7ccd2)R(0x002d,0x3685a8b5,0x34d67488,0x3405c88b,0x3335c880)R(0x002e,0x30b8444b,0x2e16d83a,0x121b379b,0x2ebdcf03)R(0x002f,0x1c5f62b8,0x25ee0f3e,0x22ef6545,0x256f8d71)\nR(0x0030,0x3beb965e,0x1a7e0345,0x160deb2f,0x145e3b04)R(0x0031,0x150d634d,0x128c4f74,0x2e69f448,0x2c3c0874)R(0x0032,0x272da0a7,0x21ae8cdc,0x2e686c37,0x0ea937a6)R(0x0033,0x13d83bd8,0x15c607d3,0x18a35f90,0x15730b6b)R(0x0034,0x15735f7d,0x18a9d7e3,0x1b1b1bd0,0x193a33df)R(0x0035,0x298837e7,0x28184bed,0x170c4397,0x16fe86ff)R(0x0036,0x26ce970a,0x13a92bd1,0x1a584bf6,0x22a713f9)R(0x0037,0x2b4eb2d4,0x2cef462e,0x28cfa1d0,0x31ad50ff)R(0x0038,0x27eec912,0x395910cf,0x3866e4bd,0x33c6cc75)R(0x0039,0x30d5c464,0x2e35e849,0x2f75845c,0x2ce57049)R(0x003a,0x2cc64038,0x2b978c23,0x2cd7082f,0x101a879c)R(0x003b,0x39094332,0x30b9afa5,0x278a9bd3,0x212eccf4)R(0x003c,0x336b94b0,0x3dba0d7a,0x3df98294,0x3f691dc9)R(0x003d,0x1c6ab7dd,0x140c737b,0x162e3319,0x0e6de2c8)R(0x003e,0x184d2373,0x179b97b4,0x2e68d03a,0x2b1a6039)R(0x003f,0x276bdc50,0x208d5c84,0x1e9df8ad,0x30677c4a)\nR(0x0040,0x181a97d2,0x1317dfd3,0x18349bbd,0x1e238ba7)R(0x0041,0x18e35f91,0x1bb8fbf6,0x1a5b93bf,0x19796feb)R(0x0042,0x11183fc4,0x25d62be8,0x1f454be0,0x089b5f12)R(0x0043,0x09cd6280,0x166f0aba,0x262ee6ed,0x29de6f01)R(0x0044,0x0b97ef89,0x113737c2,0x18b613e2,0x20f4bbd2)R(0x0045,0x24aeeaf4,0x26af8e7c,0x280fb612,0x185fbde0)R(0x0046,0x22afb280,0x2bbbd869,0x0dcd20f9,0x243bb840)R(0x0047,0x2af8cc21,0x3495e490,0x31655875,0x2ee5d850)R(0x0048,0x2be54845,0x27b56c2a,0x29152038,0x2d340479)R(0x0049,0x3504f0b3,0x34f6ec83,0x3717d09e,0x1b9b4bcc)R(0x004a,0x372c3adf,0x317b3776,0x262c2ba7,0x1a3c9b97)R(0x004b,0x23dcf473,0x34c7a07b,0x3bd86907,0x3b5c1e10)R(0x004c,0x39ab712f,0x0edbe75f,0x091bd703,0x10ae52c2)R(0x004d,0x04bbae7e,0x03abaa1f,0x132c8f6d,0x12ab5b9b)R(0x004e,0x30d8c44f,0x2a19b026,0x26ba7025,0x210bdc40)R(0x004f,0x1e1ce46d,0x1bdd8494,0x21bc2bb3,0x271b9fb9)\nR(0x0050,0x2da897cc,0x3205cb8c,0x2eb70bc1,0x1e6b5fce)R(0x0051,0x1ae937f2,0x16b5bfd3,0x0a26ab6b,0x2393d7b0)R(0x0052,0x1fe2db87,0x071452da,0x0207aab2,0x032a8a95)R(0x0053,0x08dcd6a7,0x14fc238f,0x265e6321,0x29ae9eef)R(0x0054,0x26cecaf5,0x05a6df18,0x0a06135e,0x10651795)R(0x0055,0x18a413ad,0x1db2df86,0x299df72e,0x247f46c4)R(0x0056,0x2b9f6a2a,0x2fdee62e,0x126e86c7,0x07bd31fe)R(0x0057,0x2c2d4f48,0x1e6de757,0x27c9fc20,0x0549c8fd)R(0x0058,0x0f480c4b,0x26290c0e,0x24478805,0x29861826)R(0x0059,0x2f943488,0x2be3fc6f,0x3a4624f5,0x2664883d)R(0x005a,0x2035441e,0x22350825,0x24c3a059,0x2c214939)R(0x005b,0x35a32d28,0x3a051918,0x390768c3,0x3118ac51)R(0x005c,0x10cba77f,0x294f923f,0x252ee6f2,0x188ebef5)R(0x005d,0x0e2dc2d1,0x235af427,0x2fc70847,0x2d08742d)R(0x005e,0x32ca307a,0x2d0f0987,0x26ce78e9,0x06dc4e9a)R(0x005f,0x03db7266,0x031b4a3b,0x0119f622,0x00796603)\nR(0x0060,0x00084a0a,0x0017cddf,0x0149aa5d,0x0017d5dd)R(0x0061,0x27296c15,0x24d9f415,0x225ad022,0x1eabc43d)R(0x0062,0x1b2c9864,0x170cbc7d,0x134bf78a,0x23ec1bb1)R(0x0063,0x2fdaef91,0x3757ab5b,0x3785df3c,0x2ec863c4)R(0x0064,0x253987ee,0x2194cfd3,0x1652fb6e,0x0565caf5)R(0x0065,0x24926b66,0x1da1631c,0x08034a9a,0x02455654)R(0x0066,0x02b76acb,0x0848e352,0x1627a3e5,0x20baafe1)R(0x0067,0x2afc3b8b,0x2aadbf36,0x307c3359,0x02e65eb8)R(0x0068,0x062542f5,0x0b03f71f,0x12a2df49,0x1511a700)R(0x0069,0x1df1671f,0x3a19bb11,0x393be6bc,0x3dbad22f)R(0x006a,0x3d7a667b,0x0e5dcad2,0x046be1b8,0x3668736a)R(0x006b,0x2c8b4fa3,0x276d0f79,0x1a6d6b6c,0x25dc2054)R(0x006c,0x1dc86c01,0x07383cbc,0x0dd5e070,0x17f47c45)R(0x006d,0x28543451,0x320bcca7,0x2244e029,0x21d51423)R(0x006e,0x2763d45b,0x2b73009c,0x27434873,0x35b65498)R(0x006f,0x22c3e44a,0x1ce4d42c,0x1725f425,0x19e4e032)\nR(0x0070,0x1ea10107,0x21a06165,0x2ac1d0ed,0x31246892)R(0x0071,0x2cf7a82c,0x2688900c,0x0028ba1b,0x1fefd199)R(0x0072,0x1bbfd648,0x111eea5b,0x083d463b,0x1e581800)R(0x0073,0x28572c14,0x1d7ac021,0x222cfc71,0x1aaee90f)R(0x0074,0x047c0e06,0x028b0ddf,0x00c961be,0x00083dfa)R(0x0075,0x002895d8,0x00475a36,0x00f6724c,0x01961999)R(0x0076,0x0156b188,0x01d6e562,0x01b70166,0x20989c01)R(0x0077,0x21c96408,0x209a7819,0x1deb9438,0x195c0452)R(0x0078,0x138cf0a3,0x128af457,0x01f9569a,0x181acbce)R(0x0079,0x2bf963d1,0x31d59f8b,0x31347f6f,0x2bcad7b6)R(0x007a,0x2a069bdc,0x32789b9e,0x36846f19,0x2351631a)R(0x007b,0x13915acc,0x03553e90,0x2490b2c2,0x1df03a72)R(0x007c,0x0cb21a9c,0x0683423f,0x0d41d27d,0x071456dc)R(0x007d,0x0c36d38a,0x166557c9,0x1e0593e5,0x2327ebfc)R(0x007e,0x2eb743c2,0x31da0393,0x38584b49,0x0195aa33)R(0x007f,0x0454a68e,0x09034ec0,0x0dd252d5,0x11613e8e)\nR(0x0080,0x1ad05a7d,0x3cf77ed5,0x3ef8ba73,0x3fd83a1c)R(0x0081,0x3e069293,0x087cf68a,0x039a3944,0x385452e8)R(0x0082,0x35d73370,0x2a2c039a,0x234e5b30,0x2f0c775b)R(0x0083,0x2eec336a,0x0dcd72ea,0x24ff795e,0x11eddcf7)R(0x0084,0x03b84d10,0x14a42065,0x0a373c8b,0x1124e867)R(0x0085,0x19332477,0x21225896,0x2ca1a514,0x38e4f101)R(0x0086,0x3d1b01ab,0x32ee65d4,0x22d2489b,0x2213146c)R(0x0087,0x1ea31c6a,0x279208c0,0x285260ad,0x2392f076)R(0x0088,0x27e67c19,0x1d039058,0x13951c4d,0x10d59058)R(0x0089,0x15159038,0x15e248bf,0x19c049a1,0x17f09570)R(0x008a,0x1d61d0bd,0x23b49834,0x2287d001,0x01079582)R(0x008b,0x156f69a6,0x0c3e35c0,0x071cc59d,0x12484c31)R(0x008c,0x1928b80d,0x111c2090,0x179d84a6,0x0f3df12c)R(0x008d,0x04ab997e,0x036a414c,0x05297cfa,0x002885d8)R(0x008e,0x001885ff,0x001891eb,0x00e70a69,0x00b68234)R(0x008f,0x00f605f7,0x001765f4,0x0037e5c4,0x01778969)\nR(0x0090,0x1d37c802,0x1ca81002,0x1df89402,0x1e690804)R(0x0091,0x1cfa881d,0x167a2c2b,0x117c6c9a,0x0dccb4db)R(0x0092,0x0db9a469,0x00082deb,0x0567af1b,0x21b62ff0)R(0x0093,0x26c3efaa,0x212ba7c6,0x25eb9fbd,0x318a2b93)R(0x0094,0x1ca52fdb,0x3a171f20,0x3b440a4f,0x34b1fa38)R(0x0095,0x22702255,0x12811a8f,0x12c23318,0x04044a49)R(0x0096,0x23501225,0x1f5009cf,0x10b0f9fd,0x1560965c)R(0x0097,0x13c0ee8b,0x1fc072a9,0x1881e332,0x23a2ab77)R(0x0098,0x2873f7a3,0x2f23f770,0x34868b7c,0x37858732)R(0x0099,0x039491a6,0x0493ddf5,0x0822da57,0x0b821a70)R(0x009a,0x0ed13e0d,0x15a07223,0x1d9009e4,0x3cd5eaad)R(0x009b,0x3f77624a,0x3fc765e4,0x3fc73609,0x38c2f20f)R(0x009c,0x03bbb5e7,0x05e850d7,0x32c191cd,0x38f412c3)R(0x009d,0x37a6df4e,0x25cd576f,0x1d2ed305,0x2c9d5343)R(0x009e,0x369af332,0x352b8336,0x2ded4f36,0x0c8e1a6b)R(0x009f,0x2dbf360d,0x1b9f916e,0x079c012f,0x0176618e)\nR(0x00a0,0x04f4417b,0x1790bd56,0x0e25ec6c,0x14c48057)R(0x00a1,0x1ef26492,0x256188de,0x3fa80640,0x389cda63)R(0x00a2,0x25c0d131,0x25e13104,0x1cb1d0bf,0x1bd1a8ce)R(0x00a3,0x23b0b138,0x2711111a,0x21d168de,0x1ae214b0)R(0x00a4,0x1f46d005,0x11435ca7,0x0b14ccb6,0x0ed40ca1)R(0x00a5,0x14750849,0x1363ac82,0x1610899f,0x1670a976)R(0x00a6,0x162204d1,0x1b74b432,0x01788d6a,0x091c210f)R(0x00a7,0x09990898,0x082a74d0,0x0d3a407b,0x011999a9)R(0x00a8,0x0a6c08ed,0x003739e2,0x00180220,0x0066c1e9)R(0x00a9,0x0007e9f5,0x0145f1c3,0x0018b1fd,0x00792dd1)R(0x00aa,0x1ac6f40b,0x1a57bc08,0x1b381005,0x1a089c0a)R(0x00ab,0x1518541f,0x123ae858,0x0dcd04f0,0x00c8f19f)R(0x00ac,0x01375685,0x13c48fa2,0x0288febb,0x095a7344)R(0x00ad,0x229927f7,0x3106d3a9,0x34a3c317,0x3471e227)R(0x00ae,0x36d289b1,0x31b159ee,0x24a0cacf,0x2972a75b)R(0x00af,0x1d3102f3,0x0ad20dcb,0x24b0399f,0x16d0e943)\nR(0x00b0,0x178061b0,0x24104a76,0x224005ed,0x23a0bacd)R(0x00b1,0x24e08aa6,0x26009eaa,0x27c17309,0x2c32532d)R(0x00b2,0x35f3fb0b,0x07d4151f,0x07635d73,0x095259f2)R(0x00b3,0x0d91cd77,0x160085a5,0x1f306561,0x3e95c225)R(0x00b4,0x39c3c282,0x3d94fa02,0x037a2d47,0x08a66caf)R(0x00b5,0x2a916515,0x354211cf,0x3a644aa3,0x39169f2f)R(0x00b6,0x20ee8327,0x1e2ed308,0x296d8f4d,0x320c633a)R(0x00b7,0x2b4e6ef2,0x0f7ed1db,0x37ecca8f,0x31fe9229)R(0x00b8,0x22cfd9ad,0x125e9d46,0x045ad54a,0x0c91a61d)R(0x00b9,0x00f699a7,0x0d3181f6,0x18404227,0x238015d2)R(0x00ba,0x0fe43c8c,0x1ab3406b,0x21529087,0x2ad1bcf4)R(0x00bb,0x3692d692,0x3c183af1,0x3011558c,0x27609d63)R(0x00bc,0x26706d7e,0x2710599c,0x1f307d4e,0x17b0f931)R(0x00bd,0x10b2150d,0x0a336118,0x1301a11a,0x17b3287e)R(0x00be,0x19b57c23,0x1515583c,0x14d11147,0x18d041c0)R(0x00bf,0x1970b944,0x156214d2,0x15d47851,0x0149a19c)\nR(0x00c0,0x05dbd95f,0x002741f1,0x0165a1ef,0x0017e5de)R(0x00c1,0x001851e4,0x005919df,0x00378630,0x00f9f1f0)R(0x00c2,0x0109f1e1,0x15468826,0x16778818,0x16e7dc14)R(0x00c3,0x13c77c27,0x14f77420,0x13d8d029,0x0b6b94c2)R(0x00c4,0x0048ede9,0x00288a20,0x0048763a,0x07b77f4b)R(0x00c5,0x249417b7,0x2931af14,0x2ab08638,0x303145a2)R(0x00c6,0x36023a11,0x34335b06,0x35a4a734,0x32820aa7)R(0x00c7,0x1f9005df,0x25e02615,0x20403a7a,0x2310bace)R(0x00c8,0x27f126e6,0x38a2f9cc,0x28c05211,0x0588e8e5)R(0x00c9,0x0a6510b7,0x3562419e,0x3a13a664,0x3ab69709)R(0x00ca,0x210ef6f8,0x20cf06f1,0x280df33b,0x2dddc712)R(0x00cb,0x280f8671,0x178f455d,0x3a8be687,0x3be7caf7)R(0x00cc,0x359dde19,0x28ef8daa,0x1a6f6555,0x0eedd527)R(0x00cd,0x043ac148,0x13f09a1c,0x17b04a24,0x16a06a42)R(0x00ce,0x02d59171,0x21d05e96,0x11b350a5,0x1a4248a4)R(0x00cf,0x2a11f0da,0x26b18ce4,0x3353330b,0x21d011c3)\nR(0x00d0,0x1f1140ed,0x20d3a452,0x2c040070,0x1d138459)R(0x00d1,0x1cf021ae,0x2720599d,0x3002dcd6,0x1a535869)R(0x00d2,0x13744868,0x002899da,0x0116e26f,0x00387632)R(0x00d3,0x001855e1,0x00a931bd,0x013a05cd,0x02182eb4)R(0x00d4,0x021882b2,0x006931ea,0x001895ed,0x1475b439)R(0x00d5,0x1346f42e,0x14f72c22,0x08f8889e,0x0ba7a075)R(0x00d6,0x00084a06,0x0017ba25,0x0ce39b2b,0x1ae0a6b9)R(0x00d7,0x1c700de2,0x30f23ee3,0x26602ddd,0x3514ef49)R(0x00d8,0x39049ae7,0x3892edd7,0x30617975,0x0b66b480)R(0x00d9,0x3311e184,0x38e3021f,0x3b8a42d6,0x25cf46bb)R(0x00da,0x281ebeef,0x2bcefaa1,0x28cfae06,0x1e6e64ce)R(0x00db,0x3c16dee7,0x3c3b4e70,0x32e31309,0x38bcf63f)R(0x00dc,0x2d7f2dc8,0x1b5f694f,0x0ecdf135,0x04aa0117)R(0x00dd,0x1d0009f9,0x1b701606,0x15807623,0x1330ade6)R(0x00de,0x20507aac,0x0f31f137,0x1774e43c,0x1b9220aa)R(0x00df,0x24f174e3,0x30118962,0x2bd2e4a6,0x2e6288d9)\nR(0x00e0,0x38f34d94,0x3592916e,0x3973a17c,0x33b410c4)R(0x00e1,0x29b5dc2b,0x1e26b407,0x0038363b,0x00288229)R(0x00e2,0x0218aab1,0x0088e9b8,0x01a9d591,0x0018a1ec)R(0x00e3,0x00786a51,0x00c89a67,0x00286dd8,0x001875ee)R(0x00e4,0x16e72417,0x0d17c063,0x0007c606,0x01958a23)R(0x00e5,0x01d55a16,0x1dc29375,0x2b23fb93,0x3334474a)R(0x00e6,0x35c2565d,0x3251b987,0x3412dd1e,0x3b9415c3)R(0x00e7,0x32ae5259,0x2b1f4274,0x2d4ec558,0x32c2fb04)R(0x00e8,0x38b4ff04,0x3d596eb3,0x1d806298,0x39fbd2a8)R(0x00e9,0x32ce623d,0x23afd1aa,0x166f315e,0x0ced6522)R(0x00ea,0x08f79c9c,0x1d2015c7,0x191035d9,0x0f117589)R(0x00eb,0x0f9121e7,0x19111d12,0x28234c76,0x30e2610b)R(0x00ec,0x2d23848f,0x2b037082,0x2b50d574,0x31e179b3)R(0x00ed,0x35128163,0x2b6260c4,0x28454431,0x20472c02)R(0x00ee,0x1837f00f,0x01c9129a,0x00c9b613,0x01989299)R(0x00ef,0x01ea1591,0x007939d7,0x0018a212,0x01c84959)\nR(0x00f0,0x0038d9eb,0x0007edff,0x00a6da46,0x0e93833e)R(0x00f1,0x28a2173b,0x29605e20,0x2050417c,0x2b8240cf)R(0x00f2,0x398c5178,0x2d31caf2,0x3382eaf0,0x3bf7aaf5)R(0x00f3,0x3c5a12c3,0x354d7e90,0x2a3f8e0f,0x1d4fc998)R(0x00f4,0x119e1512,0x13960039,0x19509d59,0x14e0b58d)R(0x00f5,0x0e61f546,0x1310c1b7,0x1be1c4c4,0x25838061)R(0x00f6,0x24624c9e,0x1d803592,0x2a80a98c,0x16614119)R(0x00f7,0x1924c837,0x05f7d0d5,0x0058ca34,0x01da3a5e)R(0x00f8,0x01eab601,0x007935d4,0x0018aa0a,0x00082a05)R(0x00f9,0x0076e632,0x0d31d27d,0x0175a5e3,0x0ee300db)R(0x00fa,0x1890b551,0x3b145686,0x3b2be263,0x3c64d987)R(0x00fb,0x308eca2a,0x249fd9c5,0x199dfcbd,0x2004d429)R(0x00fc,0x1a3164ec,0x13d15d2d,0x21d2748f,0x04b5c11c)R(0x00fd,0x01d5e596,0x012609c6,0x00c7259e,0x0079421b)R(0x00fe,0x005919ef,0x001805da,0x00083df0,0x0007c1f9)R(0x00ff,0x00377dcb,0x1e5158e3,0x36580091,0x2b8d3cac)\nR(0x0100,0x00000000,0x00000000,0x00000000,0x00000000)  }\n  return r;\n} \n \nivec4 resolution_data(in int i) {\n  return ivec4(int(iResolution.x), int(iResolution.y), 0, 0);\n}\n\nvec4 encode_int(in int x) {\n    ivec4 col = (ivec4(x)>>ivec4(0,8,16,24))&255;\n    return vec4(col)/255.0;\n}\n\n#define lookup(offset, size, FUNC)                      \\\n    if(index >= offset && index < offset + size) {      \\\n        fragColor = encode_int(FUNC((index-offset)/4)[(index-offset)%4]); \\\n    }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Test whether data should be sent. Data is sent if:\n    //  this is the first frame or\n    //  rendering area was resized (previous width/height stored in first pixel)\n    bool reset = (iFrame < 10);\n    reset = reset || (get_data(resolution_offset,0) != int(iChannelResolution[0].x));\n    reset = reset || (get_data(resolution_offset,1) != int(iChannelResolution[0].y));\n    if(reset) {  \n       ivec2 uv = ivec2(fragCoord); \n       int index = uv.x + uv.y * int(iResolution.x); \n       fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n       lookup(resolution_offset, resolution_data_size, resolution_data);\n       lookup(AABB_offset,       AABB_data_size,       AABB_data);\n       lookup(points_offset,     points_data_size,     points_data);\n       lookup(normals_offset,    normals_data_size,    normals_data);\n    } else {\n        fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    }\n}\n\n\n/*\n\n// MeshCompiler [Bruno Levy Jan 2020]\n// Converts a .obj (Alias|Wavefront) tri mesh into an AABB, encoded in GLSL, for ShaderToy.\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n\n// -------- GLSL-compatible types (in 20 lines) -----------------------------------------------------------------------------------------------\n\ntemplate <class T> class gvec3 {\npublic:\n    gvec3() {  }\n    gvec3(T x_in, T y_in, T z_in) : x(x_in), y(y_in), z(z_in) {  }\n    T& operator[](int i)             { return (&x)[i]; }\n    const T& operator[](int i) const { return (&x)[i]; }\n    T x,y,z;\n};\ntypedef gvec3<double> vec3; typedef gvec3<int> ivec3;\ntemplate <class T> inline gvec3<T> operator+(gvec3<T> u, gvec3<T> v) { return gvec3<T>(u.x+v.x,u.y+v.y,u.z+v.z); }\ntemplate <class T> inline gvec3<T> operator-(gvec3<T> u, gvec3<T> v) { return gvec3<T>(u.x-v.x,u.y-v.y,u.z-v.z); }\ntemplate <class T> inline gvec3<T> operator*(T s, gvec3<T> u) { return gvec3<T>(s*u.x, s*u.y, s*u.z); }\ntemplate <class T> inline gvec3<T> min(gvec3<T> u, gvec3<T> v) { return gvec3<T>(std::min(u.x,v.x),std::min(u.y,v.y),std::min(u.z,v.z)); }\ntemplate <class T> inline gvec3<T> max(gvec3<T> u, gvec3<T> v) { return gvec3<T>(std::max(u.x,v.x),std::max(u.y,v.y),std::max(u.z,v.z)); }\ninline double dot(vec3 u, vec3 v) { return u.x*v.x + u.y*v.y + u.z*v.z; }\ninline vec3 cross(vec3 u, vec3 v) { return vec3(u.y*v.z-u.z*v.y, u.z*v.x-u.x*v.z, u.x*v.y-u.y*v.x); }\ninline double length(vec3 u)      { return ::sqrt(dot(u,u)); }\ninline vec3 normalize(vec3 u)     { return (1.0 / length(u)) * u; }\n\n// -------- Encode/Decode ------------------------------------------------------------------------------------------------------------------\n\n  int encode_vertex(ivec3 p) { return p.x | (p.y << 10) | (p.z << 20); }\nivec3 decode_vertex(int xyz) { return ivec3(xyz & 1023, (xyz >> 10) & 1023, (xyz >> 20) & 1023); }\n\nint encode_vertex(vec3 p, vec3 bbox_min, vec3 bbox_max) {\n    double x = (p.x - bbox_min.x) / (bbox_max.x - bbox_min.x);\n    double y = (p.y - bbox_min.y) / (bbox_max.y - bbox_min.y);\n    double z = (p.z - bbox_min.z) / (bbox_max.z - bbox_min.z);\n    int ix = int(x * 1023.0); int iy = int(y * 1023.0); int iz = int(z * 1023.0);\n    return ix | (iy << 10) | (iz << 20);\n}\n\nivec3 encode_facet(vec3 p1, vec3 p2, vec3 p3, vec3 bbox_min, vec3 bbox_max) {\n    return ivec3(\n\tencode_vertex(p1, bbox_min, bbox_max),\n\tencode_vertex(p2, bbox_min, bbox_max),\n\tencode_vertex(p3, bbox_min, bbox_max)\t    \n    );\n}\n\n// -------- Mesh geometry //----------------------------------------------------------------------------------------------------------\n\nivec3 facet_center(ivec3 f) { return decode_vertex(f.x) + decode_vertex(f.y) + decode_vertex(f.z); }\n\n// Computes the (floating-point) bbox of a pointset\nvoid get_bbox(const std::vector<vec3>& pts, vec3& bbox_min, vec3& bbox_max) { \n    bbox_min = pts[0]; bbox_max = pts[0]; \n    for(int i=1; i<pts.size(); ++i) {\n\tbbox_min = min(bbox_min, pts[i]); bbox_max = max(bbox_max, pts[i]);\t\n    }\n}\n\n// Computes the (integer) bbox of a triangle\nvoid get_facet_bbox(ivec3 f, ivec3& bbox_min, ivec3& bbox_max) {\n    bbox_min = decode_vertex(f.x); bbox_max = decode_vertex(f.x);\n     ivec3 p = decode_vertex(f.y); bbox_min = min(bbox_min, p); bbox_max = max(bbox_max, p);\n           p = decode_vertex(f.z); bbox_min = min(bbox_min, p); bbox_max = max(bbox_max, p);\n}\n\n// -------- I/O //-------------------------------------------------------------------------------------------------------------------\n\nstd::string format(double x) { static char buff[300]; sprintf(buff,\"%-6.6f\",x); return std::string(buff); } // 6.6 digits\nstd::string format_int(int x) { static char buff[300]; sprintf(buff,\"0x%08x\",x); return buff; }             // hexa, 8 digits\nstd::string format_small_int(int x) { static char buff[300]; sprintf(buff,\"0x%04x\",x); return buff; }       // hexa, 4 digits\n\n// Generates a GLSL function that encodes an array of ivec3, as a (huge) switch statement\n// (It is stupid, I know, but this is the only way I found to send a big array to ShaderToy).\nvoid gen_ivec4_func(std::ostream& out, int* data, int nb, std::string name) {\n    out << \"const int \" << name << \"_size = \" << nb << \";\" << std::endl;\n    out << \"ivec4 \" << name << \"(in int i) {\" << std::endl;\n    out << \"#  ifdef R\"   << std::endl;\n    out << \"#    undef R\" << std::endl;\n    out << \"#  endif\"     << std::endl;\n    out << \"#  define R(i,a,b,c,d) case i: r=ivec4(a,b,c,d); break;\" << std::endl;\n    out << \"  ivec4 r;\" << std::endl;\n    out << \"  switch(i) {\" << std::endl;\n    for(int i=0; i<=nb/4; ++i) {\n\tint a = ((i*4)   < nb) ? data[i*4  ] : 0 ;\n\tint b = ((i*4+1) < nb) ? data[i*4+1] : 0 ;\n\tint c = ((i*4+2) < nb) ? data[i*4+2] : 0 ;\n\tint d = ((i*4+3) < nb) ? data[i*4+3] : 0 ;\n\tout << \"R(\" << format_small_int(i) << \",\"\n\t    << format_int(a) << \",\" << format_int(b) << \",\" << format_int(c) << \",\" << format_int(d) << \")\";\n       if(!((i+1)%16)) { out << std::endl; }\n    }\n    out << \"  }\" << std::endl;\n    out << \"  return r;\" << std::endl;\n    out << \"}\" << std::endl;\n}\n\n// Loads a mesh from a .obj (Alias|Wavefront) file. Gets the point coordinates and triangle vertex indices.\nbool load_mesh(const std::string& filename, std::vector<vec3>& points, std::vector<ivec3>& triangles) {\n    points.clear();\n    triangles.clear();\n    FILE* F = fopen(filename.c_str(),\"r\");\n    if(!F) { return false;  }\n    char* line=nullptr;\n    size_t linelen=0;\n    int lineno = 0;\n    while(getline(&line,&linelen,F) >= 0) {\n\t++lineno;\n\tswitch(line[0]) {\n\t    case 'v': {\n\t\tfloat x,y,z;\n\t\tbool ok = (sscanf(line+1, \"%f %f %f\", &x, &y, &z) == 3);\n\t\tif(!ok) {\n\t\t    std::cerr << lineno << \": malformed vertex\" << std::endl;\n\t\t    std::cerr << line << std::endl;\n\t\t    return false;\n\t\t}\n\t\tpoints.push_back(vec3(double(x),double(y),double(z)));\n\t    } break;\n\t    case 'f': {\n\t\tint v1 =-1,v2 =-1,v3 =-1;\n\t\tint vt1=-1,vt2=-1,vt3=-1;\n\t\tint vn1=-1,vn2=-1,vn3=-1;\n\t\tbool ok = false;\n\t\tok = ok || (sscanf(line+1,\"%d %d %d\",                   &v1,&v2,&v3                              ) == 3);\n\t\tok = ok || (sscanf(line+1,\"%d/%d %d/%d %d/%d\",          &v1,&vn1,&v2,&vn2,&v3,&vn3               ) == 6);\n\t\tok = ok || (sscanf(line+1,\"%d/%d/%d %d/%d/%d %d/%d/%d\", &v1,&vn1,&vt1,&v2,&vn2,&vt2,&v3,&vn3,&vt3) == 9);\n\t\tok = ok || (sscanf(line+1,\"%d//%d %d//%d %d//%d\",       &v1,&vt1,&v2,&vt2,&v3,&vt3               ) == 6);\n\t\tif(!ok || v1<1 || v2<1 || v3<1) {\n\t\t    std::cerr << lineno << \": malformed facet\" << std::endl;\n\t\t    std::cerr << line << std::endl;\n\t\t    return false;\n\t\t}\n\t\ttriangles.push_back(ivec3(v1-1,v2-1,v3-1));\n\t    } break;\n\t}\n    }\n    free(line);\n    fclose(F);\n    return true;\n}\n\n// -----------------------------------------------------------------------------------------------------------------------\n\nclass Mesh {\npublic:\n    // indirect=false, triangle contain encoded vertex geometries\n    // indirect=true,  triangle contain vertices indices   \n    bool load(const std::string& filename, bool indirect_in) {\n\tindirect = indirect_in; \n\tstd::vector<vec3> fpoints;\n\tif(!load_mesh(filename, fpoints, triangles)) { return false; }\n\t::get_bbox(fpoints, fbbox_min, fbbox_max);\n\tif(indirect) {\n\t    points.resize(fpoints.size());\n\t    for(int v=0; v<points.size(); ++v) {\n\t\tpoints[v] = encode_vertex(fpoints[v], fbbox_min, fbbox_max);\n\t    }\n\t    std::vector<vec3> fnormals(points.size(), vec3(0.0, 0.0, 0.0));\n\t    for(int t=0; t<triangles.size(); ++t) {\n\t\tivec3 T = triangles[t];\n\t\tvec3 p1 = fpoints[T.x];\n\t\tvec3 p2 = fpoints[T.y];\n\t\tvec3 p3 = fpoints[T.z];\n\t\tvec3 N = cross(p2-p1, p3-p1);\n\t    fnormals[T.x] = fnormals[T.x]+N;\n\t\tfnormals[T.y] = fnormals[T.y]+N;\n\t\tfnormals[T.z] = fnormals[T.z]+N;\t\n\t    }\n\t    normals.resize(fnormals.size());\n\t    for(int v=0; v<points.size(); ++v) {\n\t\tvec3 N = normalize(fnormals[v]);\n\t\tnormals[v] = encode_vertex(N, vec3(-1.0, -1.0, -1.0), vec3(1.0, 1.0, 1.0));\n\t    }\n\t} else {\n\t    for(int t=0; t<triangles.size(); ++t) {\n\t\tivec3 T = triangles[t];\n\t\ttriangles[t] = ivec3(\n\t\t    encode_vertex(fpoints[T.x], fbbox_min, fbbox_max),\n\t\t    encode_vertex(fpoints[T.y], fbbox_min, fbbox_max),\n\t\t    encode_vertex(fpoints[T.z], fbbox_min, fbbox_max)\n\t\t);\n\t    }\n\t}\n\tinit_AABB(0, triangles.size()); \t\n\treturn true;\n    }\n\n    void show_AABB() { show_AABB(0, AABB.size(), 0); }\n\n    void generate_GLSL(std::ostream& out) {\n       out << \"const vec3 bbox_min = vec3(\" << fbbox_min.x << \",\" << fbbox_min.y << \",\" << fbbox_min.z << \");\" << std::endl;\n       out << \"const vec3 bbox_max = vec3(\" << fbbox_max.x << \",\" << fbbox_max.y << \",\" << fbbox_max.z << \");\" << std::endl;\n\n       gen_ivec4_func(out, &AABB[0].x, AABB.size()*3, \"AABB_data\");\n       //gen_ivec3_func(out, AABB, \"AABB_data\");\t\n       if(indirect) {\n\t   gen_ivec4_func(out, points.data(), points.size(), \"points_data\");\n\t   gen_ivec4_func(out, normals.data(), normals.size(), \"normals_data\");\n       }\n    }\n   \nprotected:\n\n    void show_AABB(int b, int e, int level) {\n\tfor(int i=0; i<3*level; ++i) {\n\t    std::cerr << ' ';\n\t}\n\tivec3 node = AABB[b];\n\tif(node.z == -1) {\n\t    std::cerr << b << \"-\" << e << \" :leaf size=\" << (e-b-1) << std::endl;\n\t} else {\n\t    int coord = node.z & 3;\n\t    int nb = node.z >> 2;\n\t    std::cerr << b << \"-\" << e << \" : \" << coord << \" \" << nb << std::endl;\n\t    b++;\n\t    int m = b + nb;\n\t    show_AABB(b,m,level+1);\n\t    show_AABB(m,e,level+1);\n\t}\n    }\n    \n    void init_AABB(int b, int e) {\n\tivec3 bbox_min, bbox_max;\n\tget_bbox(b, e, bbox_min, bbox_max);\n\tint nb,coord;\n\tif(sort_SAH(b, e, nb, coord)) {\n\t    int m = b + nb;\n\t    int node = AABB.size();\n\t    AABB.push_back(ivec3());\n\t    init_AABB(b, m);\n\t    int new_m = AABB.size();\n\t    init_AABB(m, e);\n\t    AABB[node] = ivec3(encode_vertex(bbox_min), encode_vertex(bbox_max), coord | ((new_m-node-1) << 2));\n\t} else {\n\t    AABB.push_back(ivec3(encode_vertex(bbox_min), encode_vertex(bbox_max), -1));\n\t    for(int i=b; i<e; ++i) {\n\t\tAABB.push_back(triangles[i]);\n\t    }\n\t}\n    }\n    \n    \n    ivec3 triangle(ivec3 F) const { return indirect ? ivec3(points[F.x],points[F.y],points[F.z]) : F; }\n    ivec3 triangle(int f) const { return triangle(triangles[f]); }\n    \n    void sort(int b, int e, int coord) {\n\tstd::sort(\n\t    triangles.begin() + b, triangles.begin() + e,\n\t    [coord,this](ivec3 F1, ivec3 F2) {\n\t\treturn (facet_center(triangle(F1))[coord] < facet_center(triangle(F2))[coord]);\n\t    }\n\t);\n    }\n\n    void get_bbox(int b, int e, ivec3& bbox_min, ivec3& bbox_max) const {\n\tget_facet_bbox(triangle(b), bbox_min, bbox_max);\n\tfor(int i=b+1; i<e; ++i) {\n\t    ivec3 cur_bbox_min, cur_bbox_max;\n\t    get_facet_bbox(triangle(i), cur_bbox_min, cur_bbox_max);\n\t    bbox_min = min(bbox_min, cur_bbox_min); bbox_max = max(bbox_max, cur_bbox_max);\n\t}\n    }\n\n    double bbox_area(ivec3 bbox_min, ivec3 bbox_max) {\n\tdouble l1 = (double(bbox_max.x) - double(bbox_min.x)) * (fbbox_max.x - fbbox_min.x) / 1023.0;\n\tdouble l2 = (double(bbox_max.y) - double(bbox_min.y)) * (fbbox_max.y - fbbox_min.y) / 1023.0;\n\tdouble l3 = (double(bbox_max.z) - double(bbox_min.z)) * (fbbox_max.z - fbbox_min.z) / 1023.0;\n\treturn l1*l2 + l2*l3 + l3*l1;\n    }\n\n    // Returns true if node should be split\n    // split_nb: number of facets in left subtree\n    // split_coord: coordinate along which bbox is split\n    bool sort_SAH(int b, int e, int& split_nb, int& split_coord) {\n\tconst double c_t = 30.0; // Cost of traversing a node\n\tconst double c_i = 1.0;  // Cost of computing an intersection\n\n\t// bbox of sequence [b..i-b[\n\tstd::vector<ivec3> bbox_min_1(e-b);\n\tstd::vector<ivec3> bbox_max_1(e-b);\n\n\t// bbox of sequence [i..e[\n\tstd::vector<ivec3> bbox_min_2(e-b);\n\tstd::vector<ivec3> bbox_max_2(e-b);\n    \n\tdouble best_c = 1e30;\n\tint best_coord = -1;\n\tint best_m = -1;\n\tfor(int coord=0; coord<3; ++coord) {\n\t    sort(b, e, coord);\n\t    get_facet_bbox(triangle(b), bbox_min_1[0], bbox_max_1[0]);\n\t    for(int i=b+1; i<e; ++i) {\n\t\tivec3 cur_bbox_min, cur_bbox_max;\n\t\tget_facet_bbox(triangle(i), cur_bbox_min, cur_bbox_max);\n\t\tbbox_min_1[i-b] = min(bbox_min_1[i-1-b], cur_bbox_min);\n\t\tbbox_max_1[i-b] = max(bbox_max_1[i-1-b], cur_bbox_max);\t\n\t    }\n\t    get_facet_bbox(triangle(e-1), bbox_min_2[e-1-b], bbox_max_2[e-1-b]);\n\t    for(int i=e-2; i>=b; --i) {\n\t\tivec3 cur_bbox_min, cur_bbox_max;\n\t\tget_facet_bbox(triangle(i), cur_bbox_min, cur_bbox_max);\n\t\tbbox_min_2[i-b] = min(bbox_min_2[i+1-b], cur_bbox_min);\n\t\tbbox_max_2[i-b] = max(bbox_max_2[i+1-b], cur_bbox_max);\t\n\t    }\n\t    double Sparent = bbox_area(bbox_min_1[e-b-1], bbox_max_1[e-b-1]);\n\t    for(int i=b+1; i<e-1; ++i) {\n\t\tdouble Sleft  = bbox_area(bbox_min_1[i-1-b], bbox_max_1[i-1-b]);\n\t\tdouble Sright = bbox_area(bbox_min_2[i-b],   bbox_max_2[i-b]  );\n\t\tdouble c = c_t + (Sleft  / Sparent) * double(i-b)*c_i + (Sright / Sparent) * double(e-i)*c_i ;\n\t\tif(c < best_c) { best_c = c; best_coord = coord; best_m = i; }\n\t    }\n\t}\n\tif(best_coord != 2) { sort(b, e, best_coord); }\n\tsplit_coord = best_coord; split_nb = best_m - b;\n\treturn (best_c < double(e-b)*c_i);\n    }\n\n    \n    vec3 fbbox_min;\n    vec3 fbbox_max;\n    std::vector<ivec3> triangles;\n    bool indirect;\n    std::vector<int> points;\n    std::vector<int> normals;\n    std::vector<ivec3> AABB;\n};\n\nint main(int argc, char** argv) {\n    std::string filename;\n    bool indirect = false;\n    bool show = false;\n    for(int i=1; i<argc; ++i) {\n       if(argv[i][0] == '-') {\n\t   if(!strcmp(argv[i],\"-indirect\")) {\n\t       indirect = true;\n\t   } else if(!strcmp(argv[i],\"-show\")) {\n\t       show = true;\n\t   } else {\n\t     std::cerr << argv[0] << \" \" \n\t               << argv[i] \n\t               << \": invalid option\" \n\t               << std::endl;\n\t     return -1;\n\t  }\n       } else {\n\t  filename = argv[i];\n       }\n    }\n   \n    if(filename == \"\") {\n\tstd::cerr << \"Usage: \" << argv[0] << \" <filename>\" << std::endl;\n\treturn -1;\n    }\n\n    Mesh M;\n    if(!M.load(filename,indirect)) {\n\treturn -1;\n    }\n\n    if(show) { M.show_AABB(); }\n\n    M.generate_GLSL(std::cout);\n \n    return 0;\n}\n\n*/\n\n ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}