{
    "Shader": {
        "info": {
            "date": "1660690883",
            "description": "Using math from the cherno raytracing series I decided to translate the code to gpu code, use your mouse along the X axis to control the camera",
            "flags": 0,
            "hasliked": 0,
            "id": "7ldcWX",
            "likes": 0,
            "name": "Raytracing Shader Test",
            "published": 3,
            "tags": [
                "raytracing",
                "interactive",
                "shading"
            ],
            "usePreview": 0,
            "username": "Sturdyfool10",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "struct ray {\n    vec3 origin;\n    vec3 rotation;\n};\nstruct camera {\n    vec3 position;\n    vec3 rotation;\n    float FOV;\n};\n\n//begin random def\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n\n\n// Compound versions of the hashing algorithm I whipped together.\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\nuint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\n\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\n\nfloat random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n//end random def\n\nvec3 randomUnit(vec2 uv) {\n    float r1 = random(iTime * uv);\n    float r2 = random(r1 * 0.32874 * uv);\n    float r3 = random(r2 * r1 * .39482387 * uv);\n    return normalize(vec3(r1, r2, r3));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float rayRandomness = 0.0;\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 coord = (uv * 2.0) - 1.0;\n    coord.x *= aspect;\n    float noiseAmp = 0.005; //camera noise used to eliminate color banding\n    vec3 noise = randomUnit(uv * 2.0) * noiseAmp - (noiseAmp * 0.5);\n    // Time varying pixel color\n    vec3 col = vec3(1, 1, 0);\n    \n    float sR = 0.5;\n    vec3 origin = vec3(0, 0, (iMouse.x / iResolution.x) * 5.0);\n    vec3 direction = vec3(coord.x, coord.y, -1) + (randomUnit(uv) * rayRandomness - (rayRandomness * 0.5));\n    vec3 lightDirection = normalize((vec3(cos(iTime), sin(iTime), 0)));\n    \n    \n    \n    float a = dot(direction, direction);\n    float b = 2.0 * dot(origin, direction);\n    float c = dot(origin, origin) - sR * sR;\n    \n    float desc = (b * b) - (4.0 * a * c);\n    if (desc < 0.0) col = vec3(0, 0, 0);\n    float sDesc = sqrt(desc); //half the sqrt count\n    \n    float rSol0 = (-b + sDesc) / (2.0 * a);\n    float rSol1 = (-b - sDesc) / (2.0 * a);\n    \n    vec3 hitPos = origin + direction * rSol1;\n    vec3 normal = normalize(hitPos * 0.5 + 0.5);\n    \n    float d = max(dot(normal, -lightDirection), 0.0);\n    \n    col = vec3(1, 1, 0) * d + noise;\n\n    // Output to screen\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}