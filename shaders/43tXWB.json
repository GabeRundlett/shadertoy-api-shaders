{
    "Shader": {
        "info": {
            "date": "1719502189",
            "description": "an experiment with grids",
            "flags": 0,
            "hasliked": 0,
            "id": "43tXWB",
            "likes": 4,
            "name": "gridexp",
            "published": 3,
            "tags": [
                "grids"
            ],
            "usePreview": 0,
            "username": "tetrismegistus",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size, _size + aa, _st);\n    uv *= smoothstep(_size, _size + aa, vec2(1.0) - _st);\n    return uv.x * uv.y;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 getGridColor(vec2 uv, vec2 translate, float timeOffset, vec2 size, float smoothEdges) {\n    uv += translate * 0.9;\n    vec2 localUV = fract(uv); // Get local UV within the grid cell\n    localUV -= vec2(0.5);     // Move to center\n    localUV = rotate2d(sin(iTime + timeOffset) * PI) * localUV; // Rotate locally\n    localUV += vec2(0.5);     // Move back to original position\n    \n    vec3 blue = vec3(0.455,0.537,0.753);\n    vec3 orange = vec3(0.961,0.318,0.035);\n    vec3 offWhite = vec3(0.941,0.918,0.776);\n    \n    vec3 verGrad = mix(orange, blue, uv.y);\n    vec3 horGrad = mix(offWhite, blue, uv.x);\n    vec3 mixGrad = mix(mix(offWhite,blue, .1 + localUV.x * sin(iTime) + localUV.y * cos(iTime)), mix(verGrad, horGrad, -abs(sin(iTime + localUV.x) * .5)), localUV.x * localUV.y);    \n\n    \n    \n    return (mixGrad * box(localUV, size, smoothEdges));\n}\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0);\n    vec2 translate1 = vec2(cos(iTime), sin(iTime));\n    vec2 translate2 = vec2(sin(iTime), cos(iTime));\n    vec2 translate3 = vec2(cos(iTime), cos(iTime));\n        \n    vec2 uv1 = uv * 10.0 + 0.5;\n    col += getGridColor(uv1, translate1, 0.0, vec2(0.25, 0.25), 0.01);\n\n    vec2 uv2 = uv * 10.0 + 0.8;  // Adjusted initial UV for the second grid\n    col += getGridColor(uv2, translate2, 10.0, vec2(0.5, 0.5), 0.01);\n    \n    vec2 uv3 = uv * 10.0 - 0.3;  // Adjusted initial UV for the third grid\n    col += getGridColor(uv3, translate3, 15.0, vec2(0.75, 0.75), 0.01);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}