{
    "Shader": {
        "info": {
            "date": "1714133441",
            "description": "This rendering uses the idea of infinitesimal accumulation. ",
            "flags": 0,
            "hasliked": 0,
            "id": "4f3XR2",
            "likes": 5,
            "name": "Magnetic field_horseshoe magnet",
            "published": 3,
            "tags": [
                "2d",
                "physics"
            ],
            "usePreview": 0,
            "username": "A_bar_magnet",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi=3.1415926535;\n    vec2 uv = fragCoord/iResolution.xy-0.5;     \n    uv.x*=iResolution.x/iResolution.y;\n    float B= 0.;\n    vec3 col=vec3(1.);\n\n\tfor(float x = -0.05; x >= -0.1; x -= 0.001)\n\t{\n\t\tfor(float y = 0.; y <= 0.2;  y += 0.005)\n\t\t{\n\t\t\tB += (uv.x - x) / pow(pow(uv.x - x, 2.) + pow(uv.y - y, 2.), 1.5);\n\t\t}\n\t}\n\tfor (float x = 0.05; x <= 0.1; x += 0.001)\n\t{\n\t\tfor (float y = 0.; y <= 0.2; y += 0.005)\n\t\t{\n\t\t\tB += (x - uv.x) / pow(pow(uv.x - x, 2.) + pow(uv.y - y, 2.), 1.5);\n\t\t}\n\t}\n\n\tfor (float angle = 0.; angle < Pi / 2.; angle = angle + 0.075)\n\t{\n\t\tfor (float r = 0.05; r <= 0.1; r += 0.001) \n\t\t{\n\t\t\tB += (uv.y * sin(angle) + uv.x * cos(angle) + r) / pow(uv.x * uv.x + uv.y * uv.y + 2. * uv.x * r * cos(angle) + 2. * uv.y * r * sin(angle) + r * r, 1.5);\n\t\t}\n\t}\n\tfor (float angle = Pi; angle > Pi / 2.; angle = angle - 0.075)\n\t{\n\t\tfor (float r = 0.05; r <= 0.1; r += 0.001)\n\t\t{\n\t\t\tB += (uv.y * sin(angle) + uv.x * cos(angle) + r) / pow(uv.x * uv.x + uv.y * uv.y + 2. * uv.x * r * cos(angle) + 2. * uv.y * r * sin(angle) + r * r, 1.5);\n\t\t}\n\t}\n\n    B=pow(pow(B,2.),0.5);\n    for(float i=0.;i<=10.;i++)\n    {\n        if(B > 10000.*i && B < 10000.*i+1000.){\n            col=vec3(0.);            \n            break;\n        }\n    }\n    for(float i=5.;i<=20.;i++)\n    {\n        if(B > 20000.*i && B < 20000.*i+3000.){\n            col=vec3(0.);            \n            break;\n        }\n    }\n     for(float i=2.;i<=10.;i++)\n    {\n        if(B > 200000.*i && B < 200000.*i+20000.){\n            col=vec3(0.);            \n            break;\n        }\n    }\n \n    if((step(uv.x,0.1)*step(0.05,uv.x)*step(uv.y,0.2)*step(0.,uv.y))==1.)\n    {\n        col=vec3(0.);\n    }\n     if((step(uv.x,-0.05)*step(-0.1,uv.x)*step(uv.y,0.2)*step(0.,uv.y))==1.)\n    {\n        col=vec3(0.);\n    }\n     if(step(0.05*0.05,uv.x*uv.x+uv.y*uv.y)*step(uv.x*uv.x+uv.y*uv.y,0.01)*step(uv.y,0.)==1.)\n    {\n        col=vec3(0.);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}