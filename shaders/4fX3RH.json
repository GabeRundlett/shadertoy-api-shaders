{
    "Shader": {
        "info": {
            "date": "1717328160",
            "description": "Terrian Practice",
            "flags": 0,
            "hasliked": 0,
            "id": "4fX3RH",
            "likes": 1,
            "name": "Practice - Terrian",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "INCHMAN1900",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define STEPS 100\n#define R iResolution.xy\n\nfloat random(vec3 st) {\n    return fract(sin(dot(st,vec3(397.523,591.5939,69.437)))*53426.79);\n}\n\nfloat noise(vec3 st) {\n    vec3 ip = floor(st);\n    vec3 fp = fract(st);\n    \n    float a = random(ip);\n    float b = random(ip + vec3(1., 0., 0.));\n    float c = random(ip + vec3(0., 1., 0.));\n    float d = random(ip + vec3(1., 1., 0.));\n    float e = random(ip + vec3(0., 0., 1.));\n    float f = random(ip + vec3(1., 0., 1.));\n    float g = random(ip + vec3(0., 1., 1.));\n    float h = random(ip + vec3(1., 1., 1.));\n    \n    vec3 u = fp * fp * (3.0 - 2.0 * fp);\n    float n = mix(\n        mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n        mix(mix(e, f, u.x), mix(g, h, u.x), u.y),\n        u.z\n    );\n    return n * 1.5 - .5;\n}\n\nfloat sphereSDF(vec3 pos, float size) {\n    return length(pos)-size-(noise(pos+iTime)-.5)/size*4.;\n}\n\nvec3 rayMarching(vec2 uv) {\n    vec3 cameraPos = vec3(0.,10., -10.);\n    vec3 f = normalize(-cameraPos);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = normalize(cross(f, r));\n    vec3 rayDir = normalize(r * uv.x + u * uv.y + f);\n    vec3 cubePos = vec3(0., 1., 0.);\n    float traveled = 0.;\n    for(int i = 0; i < STEPS; i++) {\n        float dist = sphereSDF(cameraPos + traveled * rayDir - cubePos, 8.);\n        if(dist < 0.0001) {\n            return vec3(1.,dist*10000., .8);\n        }\n        traveled += dist;\n        if (traveled > 1000.) {\n            break;\n        }\n    }\n    return vec3(0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 u) {\n    vec2 uv = (u + u - R) / R.y;\n    fragColor = vec4(rayMarching(uv), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}