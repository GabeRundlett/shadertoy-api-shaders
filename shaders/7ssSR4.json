{
    "Shader": {
        "info": {
            "date": "1618349598",
            "description": "Minimal clock face.",
            "flags": 0,
            "hasliked": 0,
            "id": "7ssSR4",
            "likes": 3,
            "name": "MinimalClock",
            "published": 3,
            "tags": [
                "clock",
                "animation"
            ],
            "usePreview": 0,
            "username": "kaihagseth",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n\nvec3 arm(in vec2 st, float period, float radius, float thickness, vec3 color1, vec3 color2)\n{\n  float line = (1.0 - smoothstep(radius + .0001, radius - .0001,  st.y)) * (smoothstep(radius + thickness + .0001, radius + thickness - .0001,  st.y));\n  float phase = step(.5, fract(iDate.w/period / 2.0)) - .5;\n  float p1 = step(sign(phase), 0.0); \n  float p2 = step(-sign(phase), 0.0); \n  \n  float x = (fract(iDate.w/period) + st.x + .5) - 1.0;\n  float x2 = (-fract(iDate.w/period) - st.x + .5);\n  float c = clamp(sign(x), 0.0, 1.0);\n  float c2 = clamp(sign(x2), 0.0, 1.0);\n  \n  vec3 col1 = (p1*color1) + (p2*color2);\n  vec3 col2 = (p2*color1) + (p1*color2);\n  \n  vec3 out1 = (line * c * col1);\n  vec3 out2 = (line * c2 * col2);\n  return vec3(out2 + out1);\n}\n\n// Rotates cartesian coordinate system\nvec2 rotate2d(in vec2 st, in float angle)\n{\n    return st * mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n// Maps a cartesian coordinate system to a polar one\nvec2 map2Circle(in vec2 st)\n{\n    return vec2(atan(st.y, st.x), length(st)) / (2. * PI);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to .5)\n    vec2 st = ( fragCoord - .5* iResolution.xy) / min(iResolution.x, iResolution.y);\n    st = rotate2d(st, PI/2.0);      // Rotate 90 degrees to make clock start at top\n    st = map2Circle(st);            // Change coordinate system to polar coordinates\n    \n    vec3 color1 = vec3(1.0, 0.0, 0.0);\n    vec3 color2 = vec3(.4, 0.0, 0.0);\n    vec3 img = arm(st, 60.0, .0465, .0056, color1, color2); // seconds\n    \n    color1 = vec3(1.0, 0.7, 0.0);\n    color2 = vec3(.8, 0.4, 0.0);\n    img += arm(st, 60.0 * 60.0, .04, .005, color1, color2); // minutes\n    \n    color1 = vec3(0.8, 0.0, 1.0);\n    color2 = vec3(0.4, 0.0, 0.6);\n    img += arm(st, 60.0 * 60.0 * 12.0, .034, .0045, color1, color2); // hours\n    \n    img = max(vec3(0.0, 0.0, 0.1), img); // Add background\n   \n    // Output to screen\n    fragColor = vec4(img, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}