{
    "Shader": {
        "info": {
            "date": "1573509947",
            "description": "Based orignally upon: https://www.shadertoy.com/view/XdlSD4\nI always liked mandelbox_ryu made by EvilRyu\n\nThis is a derivate of that shader that added camera path derived from: https://www.shadertoy.com/view/XdcfR8",
            "flags": 0,
            "hasliked": 0,
            "id": "3sGXzD",
            "likes": 27,
            "name": "boney tunnel",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 850
        },
        "renderpass": [
            {
                "code": "// Based orignally upon: https://www.shadertoy.com/view/XdlSD4\n\n// I always liked mandelbox_ryu made by EvilRyu\n// Was tinkering a bit with the code and came up with this which at least I liked.\n// https://www.shadertoy.com/view/3ddSDs\n\n// Uses very simple occlusion based lighting which made it look more like a structure\n// of bones than my other futile lighting attemps.\n\n// Continued tinkering and applied camera path and domain repetition\n\nconst float fixed_radius2 = 4.5;\nconst float min_radius2   = 0.5;\nconst float folding_limit = 2.3;\nconst float scale         = -3.0;\nconst int   max_iter      = 120;\nconst vec3  bone          = vec3(0.89, 0.855, 0.788);\nconst vec3  rep           = vec3(10.0);\n\n#define PATHA 0.4*vec2(0.11, 0.21)\n#define PATHB 0.7*vec2(13.0, 3.0)\n\n// Derived from https://www.shadertoy.com/view/XdcfR8\n//  Another shade I really like\n\nvec3 camPath(float z)  {\n  return vec3(sin(z*PATHA)*PATHB, z);\n}\n\nvec3 camPathDeriv(float z)  {\n  return vec3(PATHA*PATHB*cos(PATHA*z), 1.0);\n}\n\nvec3 camPathDeriv2(float z)  {\n  return vec3(-PATHA*PATHA*PATHB*sin(PATHA*z), .0);\n}\n\nvec3 mod3(inout vec3 p, vec3 size) {\n  vec3 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5, size) - size*0.5;\n  return c;\n}\n\nvoid sphere_fold(float fr, inout vec3 z, inout float dz) {\n  float r2 = dot(z, z);\n  if(r2 < min_radius2) {\n    float temp = (fr / min_radius2);\n    z *= temp;\n    dz *= temp;\n  } else if(r2 < fr) {\n    float temp = (fr / r2);\n    z *= temp;\n    dz *= temp;\n  }\n}\n\nvoid box_fold(float fl, inout vec3 z, inout float dz) {\n  z = clamp(z, -fl, fl) * 2.0 - z;\n}\n\nfloat sphere(vec3 p, float t) {\n  return length(p)-t;\n}\n\nfloat torus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat mb(float fl, float fr, vec3 z) {\n  vec3 offset = z;\n  float dr = 1.0;\n  float fd = 0.0;\n  for(int n = 0; n < 5; ++n) {\n    box_fold(fl, z, dr);\n    sphere_fold(fr, z, dr);\n    z = scale * z + offset;\n    dr = dr * abs(scale) + 1.0;        \n    float r1 = sphere(z, 5.0);\n    float r2 = torus(z, vec2(8.0, 1));        \n    float r = n < 4 ? r2 : r1;        \n    float dd = r / abs(dr);\n    if (n < 3 || dd < fd) {\n      fd = dd;\n    }\n  }\n  return fd;\n}\n\nfloat df(vec3 p) { \n  float tm = p.z;\n  vec3 wrap = camPath(tm);\n  vec3 wrapDeriv = normalize(camPathDeriv(tm));\n  p.xy -= wrap.xy;\n  p -= wrapDeriv*dot(vec3(p.xy, 0), wrapDeriv)*0.5*vec3(1,1,-1);\n\n  p -= rep*vec3(0.5, 0.0, 0.0);\n  p.y *= (1.0 + 0.1*abs(p.y));\n  vec3 i = mod3(p, rep);\n  \n  float fl = folding_limit + 0.3*sin(0.025*iTime+1.0)- 0.3; \n  float fr = fixed_radius2 - 3.0*cos(0.025*sqrt(0.5)*iTime-1.0);\n\n  float d1 = mb(fl, fr, p);\n  \n  return d1; \n} \n\n\nfloat hash(vec2 p)  {\n  float h = dot(p,vec2(127.1,311.7));   \n  return fract(sin(h)*43758.5453123);\n}\n\nfloat intersect(vec3 ro, vec3 rd, out int iter) {\n  float res;\n  float r = hash(ro.xy + ro.xz + ro.yz);\n  float t = 10.0*mix(0.01, 0.02, r);\n  iter = max_iter;\n    \n  for(int i = 0; i < max_iter; ++i) {\n    vec3 p = ro + rd * t;\n    res = df(p);\n    if(res < 0.001 * t || res > 20.) {\n      iter = i;\n      break;\n    }\n    t += res;\n  }\n    \n  if(res > 20.) t = -1.;\n  return t;\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n) {\n  float stepSize = 0.012;\n  float t = stepSize;\n\n  float oc = 0.0;\n\n  for(int i = 0; i < 12; i++) {\n    float d = df(p + n * t);\n    oc += t - d;\n    t += stepSize;\n  }\n\n  return clamp(oc, 0.0, 1.0);\n}\n\nvec3 normal(in vec3 pos) {\n  vec3  eps = vec3(.001,0.0,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 lighting(vec3 p, vec3 rd, int iter) {\n  vec3 n = normal(p);\n  float fake = float(iter)/float(max_iter);\n  float fakeAmb = exp(-fake*fake*9.0);\n  float amb = ambientOcclusion(p, n);\n\n  vec3 col = vec3(mix(1.0, 0.125, pow(amb, 3.0)))*vec3(fakeAmb)*bone;\n  return col;\n}\n\nvec3 post(vec3 col, vec2 q) {\n  col=pow(clamp(col,0.0,1.0),vec3(0.65)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.5);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )  { \n  vec2 q=fragCoord.xy/iResolution.xy; \n  vec2 uv = -1.0 + 2.0*q; \n  uv.x*=iResolution.x/iResolution.y; \n    \n  float tm = 2.0*iTime;\n\n  vec3 up = vec3(0.0, 1.0, 0.0) + 2.0*camPathDeriv2(tm);\n    \n  vec3 ro = camPath(tm);\n  vec3 cf = normalize(camPathDeriv(tm));\n  vec3 cs = normalize(cross(cf, up)); \n  vec3 cu = normalize(cross(cs,cf)); \n  vec3 rd = normalize(uv.x*cs + uv.y*cu + (3.0 - 1.0*length(uv))*cf);  // transform from view to world\n\n  vec3 bg = mix(bone*0.5, bone, smoothstep(-1.0, 1.0, uv.y));\n  vec3 col = bg;\n\n  vec3 p=ro; \n\n  int iter = 0;\n  \n  float t = intersect(ro, rd, iter);\n    \n  if(t > -0.5) {\n    p = ro + t * rd;\n    col = lighting(p, rd, iter);\n    col = mix(col, bg, 1.0-exp(-0.001*t*t)); \n  } \n    \n\n  col=post(col, q);\n  fragColor=vec4(col.x,col.y,col.z,1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}