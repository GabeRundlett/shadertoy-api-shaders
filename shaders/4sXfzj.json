{
    "Shader": {
        "info": {
            "date": "1496901035",
            "description": "A quasicrystal colored audioreactively. This was really fun to write",
            "flags": 96,
            "hasliked": 0,
            "id": "4sXfzj",
            "likes": 22,
            "name": "Quasicrystal Visualizer",
            "published": 3,
            "tags": [
                "2d",
                "quasicrystal",
                "music",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 1506
        },
        "renderpass": [
            {
                "code": "const int numWaves = 6;\nconst float numStripes = 1.0;\nconst float numFreqs = 8.0;\nconst float meanFreq = 4.0;\nconst float stdDev = 2.0;\nconst float period = 3.0;\nconst float pi = 4.0 * atan(1.0);\nconst float pi2 = 2.0 * pi;\nconst float ln2 = log(2.0);\nconst float mean = meanFreq * .69314718;\n\nfloat wavething(int n, float x){\n    float l = ln2 * float(n) + log(x);\n    l -= mean;\n    return exp(-l * l / stdDev) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float scale = exp2(-fract(iTime / period));\n    float sum1 = 0.0;\n    for(int n = 0; n < int(numFreqs); n++){\n        sum1 += wavething(n, scale + 0.5*float(n));\n    }\n    vec2 xy = pi2 * numStripes\n        * ((2.0 * fragCoord - iResolution.xy) / iResolution.y);\n    \n    float sum2 = 0.0;\n    for(int n = 0; n < numWaves; n++){\n        float theta = pi * float(n) / float(numWaves);\n        vec2 waveVec = vec2(cos(theta), sin(theta));\n        float phase = dot(xy, waveVec);\n        for(int k = 0; k < int(numFreqs); k++){\n            sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale + 0.5*float(n));\n        }\n    }\n    fragColor += vec4(1.0 - sum2 / sum1);\n    xy /= pi2 * numStripes;\n    float r = length(xy);\n    fragColor.x *= texture(iChannel0, vec2(.161616 * r, .2)).x;\n    fragColor.y *= texture(iChannel0, vec2(.161616 * r + .161616, .2)).x;\n    fragColor.z *= texture(iChannel0, vec2(.161616 * r + .333333, .2)).x;\n    fragColor = 1.0 - fragColor;\n    fragColor = 1.0 - (r + 1.0) * fragColor;\n    if(length(fragColor) > 3.0) fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    if(iFrame == 0) fragColor -= fragColor;\n    fragColor = texture(iChannel0, uv);\n    fragColor = abs(fragColor - texture(iChannel1, uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 11448,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/waveshaper-2/robert-parker-waveshaper"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}