{
    "Shader": {
        "info": {
            "date": "1718131135",
            "description": "stars and cosmos",
            "flags": 0,
            "hasliked": 0,
            "id": "XXGGDy",
            "likes": 8,
            "name": "starfield new ",
            "published": 3,
            "tags": [
                "starfield"
            ],
            "usePreview": 1,
            "username": "nayk",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "/* sources https://www.shadertoy.com/view/lfVXRc https://www.shadertoy.com/view/XlfGRj https://www.shadertoy.com/view/mtyGWy and other*/\n\n\n/*at least something or someone is in the positive, \njust like I am always in the positive.\nThe sacrifices are not in vain, itâ€™s not my fault*/\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define time iTime\n#define resolution iResolution.xy\n\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat ridgednoise(vec3 d, int octaves)\n{\n    float outsum = 0.0;\n    float div = 0.5;\n    float divsum = 0.0;\n    \n    for(int i = 0; i != octaves; i++)\n    {\n        outsum += noise(d / div) * div;\n        divsum += div;\n        div *= 0.5;\n    };\n    \n    return 2.0 * (0.5 - abs(0.5 - (outsum / divsum)));\n}\n\nfloat iqnoise(vec3 d, int octaves, int steps)\n{\n    float _out = 0.0;\n    float sign_ = 1.0;\n    for(int i = 0; i != steps; i++)\n    {\n        _out = ridgednoise(d - float(i) / float(steps), octaves);\n        d += _out * sign_;\n        sign_ *= -1.0;\n    }\n#ifdef FRACT_RIDGES\n    return fract(_out * 3.14159265);\n#endif\n    return 2.0 * (0.5 - abs(0.5 - _out));\n}\n\nvec3 coloriqnoise(vec3 d, int octaves, int steps)\n{\n    return normalize(vec3(\n        iqnoise(d, octaves, steps),\n        iqnoise(d - vec3(0.0, 0.0, 0.05), octaves, steps),\n        iqnoise(d - vec3(0.0, 0.0, 0.1), octaves, steps)\n    ));\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\n vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\n       // Adjust UV coordinates back to a range of 0 to 1 for texture sampling\n    vec2 uvTex = uv * 0.5 + 0.5;\n   \n    // Get the color from the distortion texture, adding time to make it move\n    vec4 dist = texture(iChannel1, uvTex + (iTime * 0.02));\n\n    // Use the red channel of the distortion texture to create a small offset\n    vec2 distortionOffset = dist.rr * vec2(0.0155, 0.0155);\n    \n     vec2 C =fragCoord;\n     \nvec2 pos=(gl_FragCoord.xy/resolution.xy)*2.0-1.0;\n\tuv+=distortionOffset;\n\t\n  float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    \n\t\n\n\nvec3 directory=vec3(uv,(iTime*0.0001));\nvec3 from=vec3(1.,.5,0.5);\n vec2 uv0 = uv;\n\n\n      vec3 finalColor = vec3(0.0);\n  \n   vec3 col = palette(length(uv*cos(iTime)));\n\nfloat s=0.5,fade=1.;\nvec3 output2=vec3(0.);\nfor (int r=0; r<10; r++) {\n\nvec3 p=s+from*directory*.5;\np = abs(vec3(0.8)-mod(p,vec3(0.8*2.)));\nfloat pa,a;\nfor (int i=0; i<15; i++) {\np=abs(p)/dot(p,p)-0.73;\n            p.xy*=mat2(cos(iTime*0.05),sin(iTime*0.05),-sin(iTime*0.05), cos(iTime*0.05));// the magic formula\na+=abs(length(p));\n}\ns+=0.1;\na*=a*a;\n\noutput2+=vec3(0.1,0.1,0.7)*0.0015*a;\n\n\n}\noutput2=mix(vec3(length(output2)),output2,0.7);\n\n\n\n\nfragColor = vec4(output2*.013+col,1.);\n\n    fragColor*= vec4(iqnoise(vec3(uv, iTime / 10.0), 23, 3));\n    fragColor.a*= iqnoise(vec3(uv, iTime / 10.0), 23, 3);\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n   \n    fragColor+= vec4(happy_star(uv, anim)* vec3(0.05,0.1,1.55)*0.1, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}