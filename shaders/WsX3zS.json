{
    "Shader": {
        "info": {
            "date": "1546584829",
            "description": "Voronoi Pattern with Shading. Really inneficient",
            "flags": 0,
            "hasliked": 0,
            "id": "WsX3zS",
            "likes": 2,
            "name": "Wierd Moving Voronoi Thing",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "ritobanrc",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "// I need to have 10 random points, which move around predicatably, \n// which can be calculated repeatedly, using nothing but iTime\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float min_dist = max(iResolution.x, iResolution.y); // Technically not, but basically max distance\n\t// Let the N points be (noise(n, iTime), noise(iTime, n))\n    for (float n = 0.0; n < 10.0; n++) {\n        vec2 point = vec2(noise(vec2(n, sin(iTime))),\n                          noise(vec2(cos(iTime), n)));\n        vec2 diff = uv - point;\n        min_dist = min(length(diff), min_dist);\n    }\n    \n    min_dist = 1.0-min_dist;\n    min_dist = min_dist * min_dist;\n    vec3 col = vec3(min_dist, min_dist, min_dist);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}