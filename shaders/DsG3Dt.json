{
    "Shader": {
        "info": {
            "date": "1679161980",
            "description": "Stylized lava shader ported from my game engine",
            "flags": 0,
            "hasliked": 0,
            "id": "DsG3Dt",
            "likes": 6,
            "name": "Stylized Lava",
            "published": 3,
            "tags": [
                "voronoi",
                "noise",
                "fbm",
                "lava"
            ],
            "usePreview": 0,
            "username": "uada",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(16.9898,98.233)))\n                 * 43758.5453123);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat o_noise(in vec2 st, in int octave, in float s) {\n    float r = 0.0;\n    while (octave > 0) {\n        r += noise(st) * s;\n        s *= 0.5;\n        octave -= 1;\n    }\n    return r;\n}\nfloat so_noise(in vec2 st, in int octave, in float s) {\n    float r = 0.0;\n    while (octave > 0) {\n        r += noise(st*s) * s;\n        s *= 0.5;\n        octave -= 1;\n    }\n    return r;\n}\n\nfloat cell(in vec2 p, in float time) {\n    float min_dist = 1000.0;\n    vec2 i_st = floor(p);\n    vec2 f_st = fract(p);\n\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 n = vec2(float(x), float(y));\n\n            vec2 point = random2(i_st + n);\n\n            point = 0.5 + 0.5 * sin(time + 6.285*point);\n\n            float dist = length(n+point-f_st);\n\n            min_dist = min(min_dist, dist);\n        }\n    }\n\n    return min_dist;\n}\n\nvec2 voronoi( in vec2 x , in float time) {\n    ivec2 p = ivec2(floor( x ));\n    vec2  f = fract( x );\n\n    vec2 res = vec2( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        ivec2 b = ivec2(i, j);\n        vec2 point = random2(vec2(p + b));\n        point = 0.5 + 0.5 * sin(time + 6.285*point);\n        vec2  r = vec2(b) - f + point;\n        //r += 0.5 + 0.5 * sin(time+r*6.3);\n        float d = dot(r, r);\n\n        if( d < res.x )\n        {\n            res.y = res.x;\n            res.x = d;\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return sqrt( res );\n}\n\n\nvec2 voronoi( in vec2 x, in float time, out vec2 oA, out vec2 oB )\n{\n    ivec2 p = ivec2(floor( x ));\n    vec2  f = fract( x );\n\n    vec2 res = vec2( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        ivec2 b = ivec2(i, j);\n        vec2 point = random2(vec2(p + b));\n        point = 0.5 + 0.5 * sin(time + 6.285*point);\n        vec2  r = vec2(b) - f + point;\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n            res.y = res.x;\n            res.x = d;\n            oA = r;\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n            oB = r;\n        }\n    }\n\n    return sqrt( res );\n}\n\n\nfloat voronoi2_edge( in vec2 p, in float time, in float edge)\n{\n    vec2 a, b;\n    vec2 c = voronoi( p, time, a, b );\n\n    float d = dot(0.5*(a+b),normalize(b-a));\n\n    return 1.0 - smoothstep(0.0,edge,d);\n}\n\nfloat voronoi_edge( in vec2 p, in float time, in float edge) {\n    vec2 c = voronoi( p , time);\n\n    float dis = c.y - c.x;\n\n    return 1.0 - smoothstep(0.0,edge,dis);\n}\n\nfloat fbm( in vec2 x, in float H )\n{    \n    float t = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        t += a*noise(f*x);\n    }\n    return t;\n}\n\nfloat saturate(float a) {\n    return clamp(a, 0.0, 1.0);\n}\n\nvec3 saturate(vec3 a) {\n    return clamp(a, vec3(0.0), vec3(1.0));\n}\n\n\nfloat lava_shape(in vec3 pos, in vec2 uv, in float time) {\n    float d = distance(uv, vec2(0.5));\n    \n    float edge = 10000.0;\n    float falloff = 0.0125; \n    float s_d = 1.0-smoothstep(edge-falloff, edge+falloff, d);\n\n    vec2 w_p = pos.xz / 60.0;\n    w_p += o_noise(w_p * 10.0, 3, 0.995) *0.1;\n    \n    vec2 v = voronoi(w_p, time);\n    float rocks = v.y; \n    rocks *= voronoi_edge(w_p, time, 0.532);\n\n    float rock_slope = 0.125;\n    float rock_edge = 0.49;\n    rocks = smoothstep(rock_edge - rock_slope, rock_edge + rock_slope, 1.0-rocks);\n    rocks += so_noise(pos.xz/2.0 + vec2(so_noise(pos.xz/4.0, 3, 1.40)), 8, 0.50) * 0.84 * rocks;\n    \n    \n    s_d = s_d * rocks;\n\n    return s_d;\n}\n\nfloat cracked_lava_shape(in vec3 pos, in float time) {\n    vec2 ep = vec2(.8);\n    vec2 xep = vec2(-ep.y, ep.x);\n    vec2 cell_p = pos.xz/90.0;\n\n    time *= 0.2;\n\n    //cell_p += so_noise(cell_p / 10.0, 9 ,40.0)*0.3;        \n    cell_p += o_noise(cell_p / 1.0,3 ,4.0)*0.01;        \n    cell_p += fbm(cell_p / 10.0, 0.5);\n\n    float rocks = voronoi(cell_p, time).y;\n    \n    rocks = 1.0 - voronoi_edge(cell_p, time, 0.28);\n    rocks =  rocks * 2.50;\n    \n    \n    float rock_slope = .9125;\n    float rock_edge = 0.5;\n    rocks = saturate(smoothstep(rock_edge - rock_slope, rock_edge + rock_slope, rocks));\n    \n    rocks += o_noise(cell_p *5.0 + vec2(o_noise(cell_p * 4.0, 3, 1.40)), 3, 0.50) * 0.84 * rocks;\n    // rocks += o_noise(cell_p * 10.0, 13, 1.0) * 0.5 * rocks;\n    // rocks += o_noise(cell_p * 59.0 + vec2(o_noise(cell_p * 10.0, 3, .40)) * 20., 8, 0.150) * 0.4 * rocks;\n    rocks += fbm(cell_p / 3.0, 0.75) * rocks;\n\n    return rocks;\n}\n\n\nfloat shape(in vec3 pos, in float time) {\n    return cracked_lava_shape(pos, time);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 pos = vec3(uv.x, 0.0, uv.y) * 500.0;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n\n    float s = shape(pos, iTime) / 1.0;\n\n    s = clamp(s, 0.0, 1.0);\n    \n    vec4 lava_color = vec4(0.9059, 0.9333, 0.0667, 1.0);\n    vec4 lava_mix = vec4(0.788, 0.055, 0.055, 1.0);\n    vec4 dirt_color = vec4(0.094, 0.067, 0.067, 1.0);\n        \n    lava_color = 6.0 * mix(lava_color, lava_mix, \n        saturate(o_noise(pos.xz/14.0 + o_noise(pos.xz/40.0 + vec2(iTime), 3, 1.0), 2, 1.0)));\n\n    col = mix(lava_color.rgb, dirt_color.rgb, s);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}