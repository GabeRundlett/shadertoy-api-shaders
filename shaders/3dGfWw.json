{
    "Shader": {
        "info": {
            "date": "1607213262",
            "description": "*work in progress*\nhttps://patterninislamicart.com/archive/museums/2/louvre/lou080\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3dGfWw",
            "likes": 5,
            "name": "Girih pattern taken from door",
            "published": 3,
            "tags": [
                "2d",
                "pattern",
                "door",
                "girih"
            ],
            "usePreview": 0,
            "username": "lousisx",
            "viewed": 399
        },
        "renderpass": [
            {
                "code": "\nfloat sdLine (in vec2 p, in vec2 a, in vec2 b){//line sdf\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n\treturn length (pa-ba*h);\n}\nvec2 pcart (in float r, in float a){          //polar to cartesian \n\treturn vec2(r*cos(a),r*sin(a));\n}\nvec2 cpol (in float x, in float y){           //cartesian to polar\n\treturn vec2(sqrt(pow(x,2.)+pow(y,2.)),atan(y/x));\n}\n//--------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = ( 2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tuv *= 1.; //zoom\n    \n    //create and offset tiles\n\tfloat hh = 0.895;\n\tuv.x += step(1.,mod(uv.y,2.)) *(hh/2.);\n\tuv.x  = mod(uv.x,hh);\n\tuv.y  = mod(uv.y,1.)-0.05;\n\n\tfloat ofs = 0.12;                //center offset\n\tfloat len = hh * 0.516 - ofs;    //length size\n    float div = 12.;                 //division\n    float lnw = 0.0051;              //line weight\n\tfloat ang;\n\tfloat sec;\n\tvec3  lin;\n    vec3  col;\n\tfloat mi = 1.; \n    \n    for(float m = 0.; m < 2.; m++){        //mirror x coordinate\n        if(m == 1.){uv.x = hh - uv.x;}\n        for(float i = 0.; i < div; i++){   //radial array\n            sec = 6.28318/div;\n            ang = sec*i+sec/2.;\n    \n            vec2 a = pcart(ofs,ang); a += vec2(hh/2.,0.5);\n            \n            vec2 b = a + pcart(len*1.000,ang + sec*1.50);\n            vec2 c = b + pcart(len*0.505,ang + sec*4.05);\n            vec2 d = c + pcart(len*0.500,ang + sec*1.10);\n            \n            //deform d\n            if (i==7.) {d = c + pcart(len/2.,ang + sec*2.15);}\n            if (i==6.) {d = c + pcart(len/2.,ang + sec*0.86);}\n            \n            vec2 e = d + pcart(len*0.500,ang + sec*2.90);\n            vec2 f = a + pcart(len+0.050,ang);\n            vec2 g = f + pcart(len*0.518,ang + sec*2.14);\n            \n            //deform g\n            if (i==1.||i==7.0){g = f + pcart(len*0.51,ang + sec*2.1);}\n            if (i==2.||i==8.0){g = f + pcart(len*0.50,ang + sec*1.1);}\n            \n            // minimum sdf\n            mi = min(mi, sdLine(uv,a,b));\n            mi = min(mi, sdLine(uv,b,c));\n            mi = min(mi, sdLine(uv,c,d));\n            mi = min(mi, sdLine(uv,d,e));\n            mi = min(mi, sdLine(uv,f,g));\n        }\n    }\n    \n    col  = vec3(1.0) ;\n    col *= 0.3 + 0.4*smoothstep(mi,0.02,0.00);\n    col *= 1.0 + 0.2*smoothstep(mi,0.03,0.00);\n    col  = mix(col,vec3(1.0),1.0-smoothstep(0.0,lnw,abs(mi)));\n    \n\tfragColor = vec4(col, 1.0);\n}\n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}