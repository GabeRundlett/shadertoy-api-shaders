{
    "Shader": {
        "info": {
            "date": "1671826561",
            "description": "Based on [url=https://www.shadertoy.com/view/MlBSWt]https://www.shadertoy.com/view/MlBSWt[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "dtXGWM",
            "likes": 21,
            "name": "Bouncy Lines in a Disk",
            "published": 3,
            "tags": [
                "lines",
                "circle",
                "bouncing"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 180
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926536\n\nmat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, si, -si, co);\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0.0, 1.0));\n}\n\nvoid diskBounce(in float r, in vec2 p0, in vec2 v0, in float t, out vec2 pos, out vec2 vel) {\n    float a = dot(v0, v0);\n    float b = dot(p0, v0);\n    float c = dot(p0, p0) - r * r;\n    float dis = b * b - a * c;\n    if (dis >= 0.0 && c <= 0.0) {\n        dis = sqrt(dis);\n        t += (dis + b) / a;\n\n        vec2 hit = p0 + v0 * (dis - b) / a;\n        float reflDelta = 2.0 * asin((p0.y * v0.x - p0.x * v0.y) / (r * sqrt(a))) - PI;\n\n        float pathLen = 2.0 * dis / a;\n        float hitIndex = floor(t / pathLen);\n\n        float angle = reflDelta * hitIndex;\n        vec2 startPos = Rotate2D(angle - reflDelta) * hit;\n        vec2 startVel = Rotate2D(angle) * v0;\n\n        t -= pathLen * hitIndex;\n        pos = startPos + startVel * t, vel = startVel;\n    }\n}\n\nvoid bouncyLine(inout vec3 pixel, in vec2 uv, in float unit, in vec3 color, float diskSize, in vec2 vel, in int idx, in vec2 a0, in vec2 b0) {\n    vec2 offs = vel / 20.0 * float(idx);\n\n    vec2 aPos0 = a0 + offs, aPos;\n    vec2 aVel0 = vel, aVel;\n    diskBounce(diskSize, aPos0, aVel0, iTime, aPos, aVel);\n\n    vec2 bPos0 = b0 + offs, bPos;\n    vec2 bVel0 = vel, bVel;\n    diskBounce(diskSize, bPos0, bVel0, iTime, bPos, bVel);\n\n    pixel += color * smoothstep(unit, 0.0, sdLine(uv, aPos, bPos));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float diskSize = 1.5;\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(length(uv) - diskSize)));\n\n    for (int i=0; i < 10; i++) {\n        bouncyLine(color, uv, unit, vec3(1, 0, 0), diskSize, vec2(2.0, 0.25), i, vec2(-0.6, 0.4), vec2(0.2, -0.8));\n        bouncyLine(color, uv, unit, vec3(0, 1, 0), diskSize, vec2(-1.0, 2.0), i, vec2(-0.2, -0.8), vec2(1.0, 0.2));\n        bouncyLine(color, uv, unit, vec3(0, 0, 1), diskSize, vec2(-3.0, 0.0), i, vec2(0.1, -0.8), vec2(1.0, 0.2));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}