{
    "Shader": {
        "info": {
            "date": "1718038229",
            "description": "Check BufferA for settings. \n",
            "flags": 32,
            "hasliked": 0,
            "id": "4XG3Rt",
            "likes": 2,
            "name": "triple charge exchange",
            "published": 3,
            "tags": [
                "field"
            ],
            "usePreview": 0,
            "username": "graygoose",
            "viewed": 90
        },
        "renderpass": [
            {
                "code": "// Fork of \"SUesque Dynamics\" by graygoose. https://shadertoy.com/view/7l2BWh\n// 2024-05-27 03:24:35\n\nvoid mainImage(out vec4 O, in vec2 U)\n{O=texture(iChannel0, U.xy/iResolution.xy);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define DRAW\n\n#define MU .5\n#define RHO .5\n\n\n#define OP(a, b, c)    ((a * sin(b)) + (a * cos(c)))\n#define BR OP(b, r, g)\n#define RG OP(r, g, b)\n#define GB OP(g, b, r)\n#define P1 (RG - GB * MU)\n#define P2 (GB - BR * MU)\n#define P3 (BR - RG * MU)\n#define CHG vec4(P1,P2,P3,0)\n\nvoid mainImage( out vec4 O, in vec2 U ) {\n    vec2 uv = U/iResolution.xy;\n    vec4 col = texelFetch(iChannel0, ivec2(U.xy), 0);\n    \n    float r = col.x, g = col.y, b = col.z;\n    col += CHG;\n    col += lap(col, U, iChannel0, R) * RHO;\n     \n    if (sign(iMouse.z) == 1. || iFrame == 0) {\n        #ifdef DRAW\n        col += SOURCE(uv, iMouse.xy/iResolution.xy, 0.01, .1*vec4(abs(cos(-sin(iTime))), abs(cos(iTime)), abs(sin(iTime)), 0.));\n        #else\n        col = vec4(.0001);\n        vec4 I = vec4(.01,.0,.0,.0);\n        col += SOURCE(uv, vec2(.33, .33), SRC_SIZE,I.xyyy);\n        col += SOURCE(uv, vec2(.50, .75), SRC_SIZE,I.yxyy);\n        col += SOURCE(uv, vec2(.66, .33), SRC_SIZE,I.yyxy);\n        #endif\n    }   \n    \n    O = normalize(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SRC_SIZE .0001\n\n#define SOURCE(p, o, r, col) col * smoothstep(r+.1, r-.5, length(o - p))\n\n// Math\n#define GAUSSIAN kfilter(p, tex, res, vec3(.204, .124, .075))\n#define LAP(p, tex, res) kfilter(p, tex, res, vec3(-1., .2, 0.05))\nvec4 kfilter(in vec2 pos, in sampler2D channel, in vec2 reso, in vec3 kernel) {\n    vec4 sum = vec4(0.);\n    \n    for(int i=-1; i<=1; i++) {\n        for(int j=-1; j<=1; j++) {\n            float weight = (i==0 && j==0) ? kernel[0] : (abs(i-j) == 1 ? kernel[1] : kernel[2]);\n            sum += weight * texelFetch(channel, ivec2(mod(pos + vec2(i, j), reso)), 0);\n        }\n    }\n    \n    return sum;\n}\n\n\nvec4 lap(in vec4 col, in vec2 p, in sampler2D tex, in vec2 res) {\n    vec4 sum = -4.0 * col;\n    sum += texelFetch(tex, ivec2(mod(p + vec2(1., 0.),res)), 0);\n    sum += texelFetch(tex, ivec2(mod(p - vec2(1., 0.),res)), 0);\n    sum += texelFetch(tex, ivec2(mod(p + vec2(0.0, 1.),res)), 0);\n    sum += texelFetch(tex, ivec2(mod(p - vec2(0.0, 1.), res)), 0);\n    return sum;\n}\n\n\n#define R iResolution.xy",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}