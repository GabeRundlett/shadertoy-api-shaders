{
    "Shader": {
        "info": {
            "date": "1587133589",
            "description": "Raymarched torus, transformed projectively. Uses analytic DE & gradient,\n\nMouse moves viewpoint, <up>, <down> steps in and out.\nSet torus type on lines 13-15.",
            "flags": 48,
            "hasliked": 0,
            "id": "3dByRd",
            "likes": 9,
            "name": "Projective Torus",
            "published": 3,
            "tags": [
                "torus",
                "analytic",
                "projective"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Projective Torus\n//\n// Matthew Arcus, mla, 2020.\n//\n// Regular, spindle and horn toruses (uncomment appropriate line down below),\n// raymarched with projective transformation and analytic DE and gradient.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Torus params - uncomment line for selected type\n//const float R = 1.0, r = 0.5; // Regular torus\nconst float R = 0.5, r = 1.0; // Spindle torus\n//const float R = 0.75, r = 0.75; // Horn torus\nconst float R2 = R*R, r2 = r*r;\nconst vec4 X = vec4(1,1,1,R2-r2);\n\nint AA = 2; // Set to 1 for more speed\n\nfloat PI = 3.14159265;\nbool dorotate = true;\n\nvec3 lightdir = vec3(0,2,1);\n\nmat4 A = mat4(1); // Projective transformation\nfloat eyesign = 1.0; // Sign of distance field at eye.\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nfloat de(vec4 p) {\n  float len = length(p.xyz);\n  // This gets rid of \"plane at infinity\", which otherwise shrinks\n  // all distances to 0.\n  if (len > 100.0) p.xyz *= 100.0/len;\n  float t = dot(p*X,p);\n  float x = p.x, y = p.y, w = p.w;\n  float x2 = x*x, y2 = y*y, w2 = w*w;\n  return t*t - 4.0*R2*w2*(x2+y2);\n}\n\nvec4 grad(vec4 p) {\n  float t = dot(p*X,p);\n  float x = p.x, y = p.y, w = p.w;\n  float x2 = x*x, y2 = y*y;\n  return 4.0*t*X*p - 8.0*R2*w*vec4(x*w,y*w,0,x2+y2);\n}\n\nfloat eval(vec3 p3) {\n  vec4 p = vec4(p3,1);\n  p = A*p;\n  float d = de(p);\n  vec3 g = transpose(mat3x4(A))*grad(p);\n  d /= length(g); // Maybe use max here?\n  return eyesign*d;\n}\n\nvec3 getnormal(vec3 p) {\n  vec4 p4 = A*vec4(p,1);\n  return normalize(eyesign*transpose(mat3x4(A))*grad(p4));\n}\n  \nfloat maxdist = 10.0;\nfloat fogdist = 4.0;\nfloat march(vec3 q, vec3 r) {\n  float t = 0.1;\n  int numsteps = 200;\n  float precis = 1e-3;\n  for (int i = 0; i < numsteps; i++) {\n    //assert(i < 20);\n    vec3 p = q+t*r;\n    float d = eval(p);\n    //assert(d >= 0.0);\n    if (abs(d) < precis) return t;\n    d = min(0.5,d);\n    t += d;\n    if (t < 0.0 || t > maxdist) break;\n  }\n  return -1.0;\n}\n\n// 2d stuff for torus surface\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nvec3 regioncolor(int region) {\n#if 1\n  vec3 a = vec3(0.4);\n  vec3 b = vec3(0.6);\n  vec3 c = vec3(1);\n  vec3 d = vec3(0,0.4,0.5);\n  float t = float(region)/6.0;\n  // iq's most excellent palette technique\n  return a+b*cos(2.0*PI*(c*t+d));\n#else\n  vec3 col;\n  if (region == 0) col = vec3(0,1,0);\n  if (region == 1) col = vec3(0,1,1);\n  if (region == 2) col = vec3(1,1,0);\n  if (region == 3) col = vec3(1,0,0);\n  if (region == 4) col = vec3(0,0,1);\n  return col;\n#endif\n}\n\n// Which side of qr is p?\nbool g(vec2 p, vec2 q, vec2 r) {\n  vec2 n = (r-q).yx*vec2(-1,1);\n  return dot(p-q,n) < 0.0;\n}\n\nvec3 pattern(vec2 p) {\n  vec2 px = p;\n  p = mod(p,2.0);\n  p = min(p,2.0-p);\n  if (p.x+p.y > 1.0) p = 1.0-p.yx; // Reflect in x+y=1\n  bool fundamental = p == px;\n  p *= 5.878;\n  // p0a etc. are reflections in the walls of p0 etc.\n  vec2 p0 = vec2(1,0);\n  vec2 p0a = vec2(-1,0);\n  vec2 p1 = vec2(2,1.73);\n  vec2 p2 = vec2(1,3.46);\n  vec2 p2a = vec2(-1,3.46);\n  vec2 p2b = 5.878-p2.yx;\n  vec2 p3 = vec2(5.078,0.8);\n  vec2 p3a = vec2(5.078,-0.8);\n  vec2 p4 = vec2(3.878,2);\n  float d = 1e8;\n\n  int region = 0;\n  if (g(p,p3a,p3)) region = 1;\n  else if (g(p,p0,p1) && g(p,p1,p4)) region = 2;\n  else if (g(p,p1,p2) && g(p,p2,p2b)) region = 3;\n  else if (g(p,p2,p2a)) region = 4;  \n\n  vec3 col = regioncolor(region);\n  col = mix(vec3(1),col,0.5);\n  \n  //if (!fundamental) col *= 0.5;\n  d = min(d,segment(p,p0,p1));\n  d = min(d,segment(p,p1,p2));\n  d = min(d,segment(p,p2,p2a));\n  d = min(d,segment(p,p2,p2b));\n  d = min(d,segment(p,p0,p0a));\n  d = min(d,segment(p,p3,p3a));\n  d = min(d,segment(p,p3,p4));\n  d = min(d,segment(p,p1,p4));\n  col *= vec3(smoothstep(0.05,0.1,d));\n  return col;\n}\n\nvec3 getcolor(vec3 p) {\n  // Projectivize, transform and unprojectivize\n  vec4 p4 = A*vec4(p,1);\n  p = p4.xyz/p4.w;\n  // Coordinates on torus\n  float phi = atan(p.x,p.y);\n  float a = length(p.xy);\n  float z = p.z;\n  // There is some ambiguity about mapping x,y,z to torus\n  // coordinates for spindle toruses.\n  // z,a-> atan(z,a-R) or atan(z,a+R), since\n  // z^2 + (a-R)^2 = r^2 or z^2 + (a+R)^2 = r^2 ie.\n  // z^2 + a^2 - 2aR + R^2 - r^2 = 0 or\n  // z^2 + a^2 + 2aR + R^2 - r^2 = 0\n  float t = z*z + a*a + R2 - r2 > 0.0 ? a-R : a+R;\n  float rho = atan(z,t);\n  vec2 uv = 2.0*vec2(phi,rho)/PI; \n  uv *= 2.0*vec2(R+r,r); // (3,1)\n  return pattern(uv);\n}\n\nvoid init() {\n  float time = 0.4*iTime;\n  A = mat4(1);\n  A *= mat4(cos(time),0,0,sin(time),\n            0,1,0,0,\n            0,0,1,0,\n            -sin(time),0,0,cos(time));\n  A *= mat4(1,0,0,0,\n            0,cos(time),sin(time),0,\n            0,-sin(time),cos(time),0,\n            0,0,0,1);\n}\n\nvec3 raycolor(vec3 q, vec3 r) {\n  vec3 background = 0.1*regioncolor(5); //vec3(0.05,0,0);\n  float t = march(q,r);\n  if (t < 0.0) return background;\n  vec3 p = q+t*r;\n  vec3 normal = getnormal(p);\n  vec3 color = getcolor(p);\n  vec3 speccolor = color;\n  float ambient = 0.5;\n  float diffuse = 0.3*clamp(dot(normal,lightdir),0.0,1.0);\n  color *= ambient+diffuse;\n  float specular = pow(max(0.0,dot(reflect(lightdir,normal),r)),10.0);\n  color += 0.8*specular*speccolor;\n  color = mix(color,background,clamp((t-fogdist)/(maxdist-fogdist),0.0,1.0));\n  return color;\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 rotateframe(vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (dorotate) {\n    float t = iTime;\n    //p.yz = rotate(p.yz,t*0.125);\n    p.zx = rotate(p.zx,0.5*PI-t*0.02);\n  }\n  return p;\n}\n\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nbool key(int key) {\n   return texelFetch(iChannel2, ivec2(key,2),0).x != 0.0;\n}\nvec4 store(int i,int j) {\n  return texelFetch(iChannel3, ivec2(i,j),0);\n}\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n  init();\n  float eyedist = 4.0;\n  eyedist *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  fogdist = eyedist;\n  maxdist = 2.0*eyedist;\n  vec3 eye = vec3(0,0,eyedist);\n  eye = rotateframe(eye);\n  eyesign = sign(eval(eye));\n  lightdir = rotateframe(lightdir);\n  lightdir = normalize(lightdir);\n  vec3 col = vec3(0);\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 z = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n      vec3 ray = vec3(z,-2);\n      ray = rotateframe(ray);\n      ray = normalize(ray);\n      col += raycolor(eye,ray);\n    }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel2,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel3,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}