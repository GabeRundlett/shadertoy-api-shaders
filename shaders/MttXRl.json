{
    "Shader": {
        "info": {
            "date": "1481281126",
            "description": "Test math flag",
            "flags": 0,
            "hasliked": 0,
            "id": "MttXRl",
            "likes": 0,
            "name": "Math_Flags",
            "published": 3,
            "tags": [
                "math",
                "flag"
            ],
            "usePreview": 0,
            "username": "PlauM",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 color, in vec2 pixCoords )\n{\n    /*// DRAPEAU FRANCE\n    float tier = float(iResolution.x)/3.0;\n    \n    if (pixCoords.x < tier)\n    {\n        color = vec4(0.0, 0.0, 1.0, 1.0);\n    }\n    else if (pixCoords.x < tier*2.0)\n    {\n        color = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n    else\n    {\n        color = vec4(1.0, 0.0, 0.0, 1.0);\n    }*/\n    \n    \n    /*// DRAPEAU JAPON\n    float centerX = float(iResolution.x)/2.0;\n    float centerY = float(iResolution.y)/2.0;\n    float rayon = 120.0;\n    float distance = sqrt(pow(pixCoords.x-centerX,2.0)+pow(pixCoords.y-centerY,2.0));\n    \n    color = vec4(1.0, 1.0, 1.0, 1.0);\n    if (distance < rayon)\n    {\n        color = vec4(1.0, 0.0, 0.0, 1.0);\n    }*/\n    \n    \n    /*// DRAPEAU JAPON QUI BOUGE\n    \n    float centerX = float(iResolution.x)/4.0;\n    float centerY = float(iResolution.y)/4.0;\n    \n    float amplitude = 20.0;\n    float frequence = 5.0;\n    float sinusoide = sin(iTime*frequence)*amplitude; // de base sinusoide varie entre -1 et 1\n    float rayon = 100.0 + sinusoide;\n    \n    float distancePix = sqrt(pow(pixCoords.x-centerX,2.0) + pow(pixCoords.y-centerY,2.0));\n    \n    color = vec4(1.0, 1.0, 1.0, 1.0);\n    if (distancePix < rayon)\n    {\n        color = vec4(1.0, 0.0, 0.0, 1.0);\n    }*/\n    \n    \n    // DRAPEAU JAPON QUI BOUGE ET QUI TOURNE\n    vec2 coords = pixCoords/iResolution.xy; // permet d'avoir un repÃ¨re de notre choix (ici entre 0 et 1)\n    // mais ici perte du ratio, et donc choisir que x ou que y\n    \n    float centerRotatX = float(iResolution.x)/2.0;\n    float centerRotatY = float(iResolution.y)/2.0;\n    float rayonRotat = 200.0;\n    \n    float centerX = centerRotatX + rayonRotat*cos(iTime);\n    float centerY = centerRotatY + rayonRotat*sin(iTime);\n    \n    float amplitude = 20.0;\n    float frequence = 5.0;\n    float sinusoide = sin(iTime*frequence)*amplitude; // de base sinusoide varie entre -1 et 1\n    float rayon = 100.0 + sinusoide;\n    \n    float distanceCenterPix = sqrt(pow(pixCoords.x-centerX,2.0) + pow(pixCoords.y-centerY,2.0));\n    //float distanceCenterPix = length(pixCoords-center); //pour center : point (xy)\n    \n    color = vec4(1.0, 1.0, 1.0, 1.0);\n    if (distanceCenterPix < rayon)\n    {\n        color = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}