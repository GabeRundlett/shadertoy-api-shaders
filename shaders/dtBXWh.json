{
    "Shader": {
        "info": {
            "date": "1675977859",
            "description": "CC0: Sphere recursion\n Once again inspired by some art seen on twitter can't find it again\n Not real refraction going on, just repeating spheres\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dtBXWh",
            "likes": 50,
            "name": "Sphere recursion",
            "published": 3,
            "tags": [
                "sphere",
                "recursion"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "// CC0: Sphere recursion\n//  Once again inspired by some art seen on twitter can't find it again\n//  Not real refraction going on, just repeating spheres\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define PI_2            (0.5*PI)\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff      = 0.0;\nconst vec3 skyCol     = HSV2RGB(vec3(hoff+0.57, 0.70, 0.25));\nconst vec3 glowCol    = HSV2RGB(vec3(hoff+0.025, 0.85, 0.5));\nconst vec3 diffCol    = HSV2RGB(vec3(hoff+0.75, 0.85, 1.0));\nconst vec3 sunCol1    = HSV2RGB(vec3(hoff+0.60, 0.50, 0.5));\nconst vec3 sunCol2    = HSV2RGB(vec3(hoff+0.05, 0.75, 25.0));\nconst vec3 sunDir1    = normalize(vec3(3., 3.0, -7.0));\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sph) {\n  vec3 ce = sph.xyz;\n  float ra= sph.w;\n  vec3 oc = ro - ce;\n  float b = dot( oc, rd );\n  float c = dot( oc, oc ) - ra*ra;\n  float h = b*b - c;\n  if( h<0.0 ) return vec2(-1.0); // no intersection\n  h = sqrt( h );\n  return vec2( -b-h, -b+h );\n}\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  float sd = max(dot(sunDir1, rd), 0.0);\n  float sf = 1.0001-sd;\n  col += clamp(vec3(0.0025/abs(rd.y))*glowCol, 0.0, 1.0);\n  col += 0.75*skyCol*pow((1.0-abs(rd.y)), 8.0);\n  col += 2.0*sunCol1*pow(sd, 100.0);\n  col += sunCol2*pow(sd, 800.0);\n\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n    col += 0.25*sqrt(skyCol)*max(-db, 0.0);\n  }\n\n  return clamp(col, 0.0, 10.0);;\n}\n\nfloat split(vec3 sp, vec4 sph, float h) {\n  const float aa = 0.04;\n  float angle = atan_approx(sp.x, sp.z)+h*TAU;\n  float d = sph.w*(0.5*sin(4.0*angle)+0.15)/2.5-sp.y;\n  return smoothstep(-aa, aa, d);\n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  vec3 ld = normalize(vec3(0.0) - ro);\n\n  vec3 bcol = vec3(0.0);\n  vec3 fcol = vec3(0.0);\n  \n  const vec3 beerf = -0.1*vec3(1.0, 2.0, 3.0);\n  float tm = TIME*0.25;\n  float ff = fract(tm);\n  float fo = smoothstep(0.9, 0.0, ff);\n\n  vec3 light = vec3(.01)/(0.0001+ 1.0-max(dot(ld, rd), 0.0));\n\n  const float MaxIter = 12.0;\n  for (float i = 0.0; i <  MaxIter; ++i) {\n    float j = i+floor(tm);\n    float h = hash(j+123.4);\n    vec4 sph = vec4(vec3(0.0) , 4.5*exp2(-(i-ff)*0.5));\n\n    vec2 s2 = raySphere(ro, rd, sph);\n\n    float sd = s2.y - s2.x;\n    if (sd == 0.0) {\n      break;\n    }\n    \n    float fo = i == 0.0 ? fo : 1.0;\n    \n    vec3 beer0 = exp(beerf*(s2.x));\n    vec3 p0 = ro+rd*s2.x;\n    vec3 sp0 = p0 - sph.xyz;\n    vec3 n0 = normalize(sp0);\n    vec3 r0 = reflect(rd, n0);\n    float fre0 = 1.0+dot(rd, n0);\n    fre0 *= fre0;\n    float dif0 = mix(0.25, 1.0, max(dot(sunDir1, n0), 0.0)); \n    float s0 = split(sp0, sph, h);\n    vec3 rcol0 = mix(0.1, 1.0, fre0)*render0(p0, r0);\n    vec3 dcol0 = sunCol1*dif0*dif0*diffCol;\n    rcol0 += 0.125*dcol0;\n    dcol0 += 0.125*rcol0;\n    rcol0 *= beer0;\n    dcol0 *= beer0;\n    rcol0 *= fo;\n\n    if (s0 > 0.9) {\n      bcol = mix(bcol, mix(dcol0, bcol, 1.0-tanh_approx(0.18*s2.x)), s0*fo);\n      break;\n    }\n    \n    fcol += rcol0*(1.0-s0);\n\n    vec3 beer1 = exp(beerf*(s2.y));\n    vec3 p1 = ro+rd*s2.y;\n    vec3 sp1 = p1 - sph.xyz;\n    vec3 n1 = -normalize(sp1);\n    float dif1 = mix(0.25, 1.0, max(dot(sunDir1, n1), 0.0)); \n    float s1 = split(sp1, sph, h);\n    vec3 dcol1 = sunCol1*dif1*dif1*diffCol;\n    dcol1 *= beer1;\n    s1 *= fo;\n    bcol = mix(bcol, dcol1, s1);\n    bcol += light*beer1*fo;\n  }\n\n\n  vec3 col = bcol;\n  col += fcol;\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float tm  = TIME*0.5;\n  \n  vec3 ro = vec3(5.0, 3.0, 0.);\n  ro.xz *= ROT(-0.1*tm+3.0);\n  const vec3 la = vec3(0.0, 0.5, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render1(ro, rd);\n  float ll = length(pp);\n  col *= smoothstep(1.5, 0.5, ll);\n  col -= 0.033*vec3(3.0, 2.0, 1.0)*(ll+0.25);\n  col = aces_approx(col); \n  col = sRGB(col);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}