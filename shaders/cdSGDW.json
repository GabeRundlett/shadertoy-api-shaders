{
    "Shader": {
        "info": {
            "date": "1667576378",
            "description": "个人练习",
            "flags": 0,
            "hasliked": 0,
            "id": "cdSGDW",
            "likes": 0,
            "name": "SoomthstepAndLength",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "CodeJUN",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\nvec2 fixUV(in vec2 c)\n{\n    return 3.*(2.*c-iResolution.xy)/min(iResolution.x,iResolution.y);\n}//uv变换\n\nvec3 Grid(in vec2 uv)\n{\n    vec3 color=vec3(0.);\n    vec2 fraction=1.-2.*abs(fract(uv)-0.5);\n\n    /*if(abs(uv.x)<=2.*fwidth(uv.x))\n    {\n        color.g=1.;\n    }\n    else if (abs(uv.y)<=2.*fwidth(uv.y))\n    {\n        color.r=1.;\n    }\n    else if (fraction.x<2.*fwidth(uv.x)||fraction.y<2.*fwidth(uv.y))\n    {\n        color=vec3(1.);\n\n    }*/\n    color=vec3(smoothstep(4.*fwidth(uv.x),3.9*fwidth(uv.x),fraction.x));\n     color+=vec3(smoothstep(4.*fwidth(uv.y),3.9*fwidth(uv.y),fraction.y));\n     color.rb *= smoothstep(1.9*fwidth(uv.x),2.0*fwidth(uv.x),abs(uv.x));\n      color.gb *= smoothstep(1.9*fwidth(uv.y),2.0*fwidth(uv.y),abs(uv.y));\n\n    return color;\n     \n}//横纵坐标和白色格子\n\nfloat segment(in vec2 p,in vec2 a,in vec2 b,in float w)\n{\n    float f=0.;\n    vec2 ba=b-a;\n    vec2 pa=p-a;\n    float proj=clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    float d=length(proj*ba-pa);\n    /*if(d<=w)\n    {\n        f=1.; \n    }*/\n    f = smoothstep(w,0.95*w,d);\n    return f;\n}//画一条线段\n\nfloat func(in float x)\n{\n    \n   // return sin(x);\n   //return cos(x);\n\n   /*float T=3.+sin(iTime);\n   return sin(2.*PI/T*x);*/\n   return smoothstep(-1.,1.,x);\n\n}//函数\n\nfloat funcPlot(in vec2 uv )\n{\n    float f=0.;\n    for(float x=0.;x<=iResolution.x;x+=1.)\n    {\n        float fx=fixUV(vec2(x,0.)).x;\n        float nfx=fixUV(vec2(x+1.,0.)).x;\n        f+=segment (uv,vec2(fx,func(fx)),vec2(nfx,func(nfx)),fwidth(uv.x));\n    }\n    return clamp(f,0.,1.);\n}//通过等线距去点连接\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n   // vec3 color = vec3(0.);\n    vec2 uv=fixUV(fragCoord); \n    /*vec3 color = Grid(uv) ;\n   //color =mix(color,vec3(1.,1.,0.),segment(uv,vec2(1.,2.),vec2(2.,0.),fwidth(uv.x)));\n    color =mix(color,vec3(1.,1.,0.),funcPlot(uv));*/\n    vec3 color = vec3(0.);\n    /*if(length(uv)<1.)\n    {\n        color=vec3(1.);\n\n    }*/\n    color = vec3(smoothstep(1.,.99,length(uv)));\n    fragColor=vec4(color,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}