{
    "Shader": {
        "info": {
            "date": "1575369200",
            "description": "rounded box",
            "flags": 0,
            "hasliked": 0,
            "id": "tdVSWd",
            "likes": 2,
            "name": "rounded box",
            "published": 3,
            "tags": [
                "box",
                "rounded"
            ],
            "usePreview": 0,
            "username": "debris",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "    float sdBox( in vec2 p, in vec2 b )\n    {\n        vec2 d = abs(p)-b;\n        return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n    }\n\n    float sdRoundedBox(in vec2 p, in vec2 b, in float r)\n    {\n        return sdBox(p, b - r) - r;\n    }\n\n    float sdAnnularRoundedBox(in vec2 p, in vec2 b, in float r, in float w)\n    {\n        return abs(sdRoundedBox(p, b - w, r - w)) - w;\n    }\n\n    float drawRoundedBox(in vec2 coord, in vec2 pos, in vec2 size, in float r, in float w)\n    {\n        vec2 p = pos + w;\n        vec2 s = size - 2.0 * w;\n        return 1.0 - smoothstep(0.0, 1.0, sdRoundedBox(coord - s / 2.0 - p, s/ 2.0, r - w));\n    }\n\n    float drawRoundedFrame(in vec2 coord, in vec2 pos, in vec2 size, in float r, in float w)\n    {\n        return min(w, 1.0 - smoothstep(0.0, 1.0, sdAnnularRoundedBox(coord - size / 2.0 - pos, size / 2.0, r, w / 2.0)));\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec4 contentColor = vec4(1, 0, 0, 1);\n    const vec4 frameColor = vec4(0, 0, 1, 1);\n    const vec2 pos = vec2(50, 50);\n    const vec2 size = vec2(100, 100);\n    const float radius = 15.0;\n    const float width = 15.0;\n\t\n    vec4 color = vec4(1, 1, 1, 1);\n    \n    float frame = drawRoundedFrame(fragCoord, pos, size, radius, width);\n    color = mix(color, frameColor, frame);\n    \n    float content = drawRoundedBox(fragCoord, pos, size, radius, width);\n    color = mix(color, contentColor, content);\n \n    fragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}