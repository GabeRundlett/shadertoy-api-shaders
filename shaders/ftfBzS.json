{
    "Shader": {
        "info": {
            "date": "1651007335",
            "description": "seed = hash(seed) get stuck with float hash !\nselect a #define",
            "flags": 0,
            "hasliked": 0,
            "id": "ftfBzS",
            "likes": 7,
            "name": "one more wrongness of float hash",
            "published": 3,
            "tags": [
                "hash"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "  #define hash(p)   fract(sin( (p) * 12.9898 +1. ) * 43758.5453)  // get stuck soon !\n//#define hash(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) // get stuck later !\n//#define hash(p)   vec2( hash(vec3(p.x)).x, hash(vec3(p.y)).x ) \n\nfloat line(vec2 p, vec2 a,vec2 b) {                    // line SDF\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return length(p - b * h);                      \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, U = u/R,\n          P = vec2(1,2), P0;\n    float d = 9., l, i,n;\n    \n    for( i=0.; i< float(min(1000,iFrame/5)); i++ ) {  // ---polyline loop\n        P0 = P, P = hash(P),                          // next point = hash(prev)\n        l = line(U, P0,P);\n        if (l<d) d=l, n=i;                            // keep closest to pixel\n      }\n   \n    O = vec4( smoothstep( 1.5/R.y, 0., d ) * (1.-exp2(-2.*n/i)) ); // display\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "  const uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 20170906U;    // Today's date (use three days ago's dateif you want a prime)\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 uhash3( uvec3 x )         // iq version\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)/float(0xffffffffU);\n}\n\nvec3 hash( vec3 f )            // vec3 to vec3. any scaling. f.z=0 seed is ok.\n{ \n    return uhash3( uvec3( floatBitsToUint(f.x),\n                          floatBitsToUint(f.y),\n                          floatBitsToUint(f.z) ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}