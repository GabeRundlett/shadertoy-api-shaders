{
    "Shader": {
        "info": {
            "date": "1629018745",
            "description": "BoxLine3D test",
            "flags": 0,
            "hasliked": 0,
            "id": "fddGzn",
            "likes": 2,
            "name": "BoxLine3D test",
            "published": 3,
            "tags": [
                "line"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 80.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 combine(vec4 val1, vec4 val2){\n    vec4 res1 = val1;\n    vec4 res2 = val2;\n    res1.w = min(val2.w,val1.w);\n    res2.w = min(val1.w,val2.w);\n    return (val1.w < val2.w)?res1:res2;\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\n// TODO:ATM, we can not make the slope of line based on x rotation.\n// The following set up won't work:\n// A = vec3(0.7,0.0,1.15); B = vec3(-0.1,0.5,-0.6);\n// For now, B of the Y value should be as same as the A of the Y value.\nfloat dBoxLine(vec3 p, vec3 a, vec3 b, vec2 size){\n    vec3 v = normalize(b-a);\n    vec3 up = vec3(0.0,1.0,0.0);\n    vec3 right = normalize(cross(v,up));\n    vec3 newRightVec = right*(size.x*0.5);\n    vec3 newUpVec = up*(size.y*0.5); \n\n    // left, right\n    vec3 a1 = a+newRightVec, a2 = a-newRightVec, b1 = b+newRightVec, b2 = b-newRightVec;\n    vec3 mida = vec3((a1.x + b1.x) * 0.5, (a1.y + b1.y) * 0.5, (a1.z + b1.z) * 0.5);\n    vec3 midb = vec3((a2.x + b2.x) * 0.5, (a2.y + b2.y) * 0.5, (a2.z + b2.z) * 0.5);\n\n    // up, bottom\n    vec3 c1 = a+newUpVec, c2 = a-newUpVec, d1 = b+newUpVec, d2 = b-newUpVec;\n    vec3 midc = vec3((c1.x + d1.x) * 0.5, (c1.y + d1.y) * 0.5, (c1.z + d1.z) * 0.5);\n    vec3 midd = vec3((c2.x + d2.x) * 0.5, (c2.y + d2.y) * 0.5, (c2.z + d2.z) * 0.5);\n\n    float rad1 = -atan(b1.x-a1.x,b1.z-a1.z);\n    //float rad2 = -atan(d1.y-c1.y,d1.z-c1.z);\n    float rad3 = -atan(a2.x-a1.x,a2.z-a1.z);\n\n    float mad = dot(p-mida,vec3(cos(rad1),0.0,sin(rad1)));// side\n    float mbd = dot(p-midb,vec3(cos(rad1),0.0,sin(rad1)));// side\n    \n    float mcd = (p-midc).y;// top\n    float mdd = (p-midd).y;// bottom\n    \n    float ad = dot(p-a,vec3(cos(rad3),0.0,sin(rad3)));\n    float bd = dot(p-b,vec3(cos(rad3),0.0,sin(rad3)));\n    \n    float d = max(max(max(-mad,mbd),max(mcd,-mdd)),max(ad,-bd));\n    return d;\n}\n\nfloat dBoxAnimatedLine(vec3 p, vec3 a, vec3 b, vec2 size, float t){\n    t*=2.0;\n    size.x=0.1+sin(t)*0.05;\n    size.y=0.2+sin(t)*0.1;\n    return dBoxLine(p,a,b,size);\n}\n\nvec4 GetDist(vec3 p) {\n    p*=matRotateX(radians(90.0));\n    float scale = 5.0;\n    vec3 p0 = vec3(-0.285,0.0,-0.075)*scale;\n    vec3 p1 = vec3(-0.2541,0.0,-0.0185)*scale;\n    vec3 p2 = vec3(0.0797,0.0,0.1185)*scale;\n    vec3 p3 = vec3(0.199,0.0,0.0492)*scale;\n    vec3 p4 = vec3(0.2826,0.0,0.0492)*scale;\n    vec3 p5 = vec3(0.3609,0.0,0.1101)*scale;\n    vec3 p6 = vec3(0.395,0.0,0.006)*scale;\n    vec3 p7 = vec3(0.393,0.0,-0.081)*scale;\n    \n    vec3 p8 = vec3(-0.3868,0.0,-0.0452)*scale;\n    vec3 p9 = vec3(-0.322,0.0,0.01)*scale;\n    vec3 p10 = vec3(0.1159,0.0,0.183)*scale;\n    vec3 p11 = vec3(0.1717,0.0,0.108)*scale;\n    vec3 p12 = vec3(0.1559,0.0,0.0739)*scale;\n\n    vec3 p13 = vec3(-0.1,0.0,-0.081)*scale;\n    vec3 p14 = vec3(-0.043,0.0,-0.025)*scale;\n    vec3 p15 = vec3(0.038,0.0,0.005)*scale;\n    vec3 p16 = vec3(0.189,0.0,0.005)*scale;\n    vec3 p17 = vec3(0.357,0.0,0.032)*scale;\n    vec3 p18 = vec3(0.369,0.0,0.001)*scale;\n    vec3 p19 = vec3(0.143,0.0,-0.044)*scale;\n    vec3 p20 = vec3(0.063,0.0,-0.081)*scale;\n    \n    vec3 p21 = vec3(0.38,0.0,-0.162)*scale;\n    vec3 p22 = vec3(-0.159,0.0,-0.159)*scale;\n    vec3 p23 = vec3(-0.387,0.0,-0.103)*scale;\n    \n    vec3 p24 = vec3(-0.1904,0.0,-0.012)*scale;\n    vec3 p25 = vec3(-0.22,0.0,0.062)*scale;\n\n    vec3 p26 = vec3(-0.125,0.0,0.013)*scale;\n    vec3 p27 = vec3(-0.168,0.0,0.088)*scale;\n    \n    vec3 p28 = vec3(-0.065,0.0,0.039)*scale;\n    vec3 p29 = vec3(-0.108,0.0,0.114)*scale;\n    \n    vec3 p30 = vec3(-0.002,0.0,0.065)*scale;\n    vec3 p31 = vec3(-0.045,0.0,0.135)*scale;\n\n    float t = iTime;\n    float d = dBoxAnimatedLine(p,p0,p1,vec2(0.05,0.3),t*2.0);\n    float d2 = dBoxAnimatedLine(p,p1,p2,vec2(0.05,0.3),t*1.2);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p2,p3,vec2(0.05,0.3),t*1.1);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p3,p4,vec2(0.05,0.3),t*0.8);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p4,p5,vec2(0.05,0.3),t*1.3);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p5,p6,vec2(0.05,0.3),t*2.0);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p6,p7,vec2(0.05,0.3),t*1.7);\n    d = min(d,d2);\n  \n    d2 = dBoxAnimatedLine(p,p8,p9,vec2(0.05,0.3),t*1.5);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p9,p10,vec2(0.05,0.3),t*0.9);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p10,p11,vec2(0.05,0.3),t*0.96);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p11,p12,vec2(0.05,0.3),t*1.4);\n    d = min(d,d2);\n    \n    d2 = dBoxAnimatedLine(p,p0,p8,vec2(0.05,0.3),t*1.6);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p0,p7,vec2(0.05,0.3),t*1.5);\n    d = min(d,d2);\n    \n    d2 = dBoxAnimatedLine(p,p13,p14,vec2(0.05,0.3),t*1.7);\n    d = min(d,d2);    \n    d2 = dBoxAnimatedLine(p,p14,p15,vec2(0.05,0.3),t*1.9);\n    d = min(d,d2);  \n    d2 = dBoxAnimatedLine(p,p15,p16,vec2(0.05,0.3),t*2.5);\n    d = min(d,d2);  \n    d2 = dBoxAnimatedLine(p,p16,p17,vec2(0.05,0.3),t*1.2);\n    d = min(d,d2);  \n    d2 = dBoxAnimatedLine(p,p17,p18,vec2(0.05,0.3),t*1.3);\n    d = min(d,d2);  \n    d2 = dBoxAnimatedLine(p,p18,p19,vec2(0.05,0.3),t*1.5);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p19,p20,vec2(0.05,0.3),t*1.9);\n    d = min(d,d2);\n    \n    d2 = dBoxAnimatedLine(p,p21,p22,vec2(0.05,0.3),t*1.8);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p22,p23,vec2(0.05,0.3),t*1.7);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p7,p21,vec2(0.05,0.3),t*1.1);\n    d = min(d,d2);\n    d2 = dBoxAnimatedLine(p,p8,p23,vec2(0.05,0.3),t*2.1);\n    d = min(d,d2);\n    \n    d2 = dBoxAnimatedLine(p,p24,p25,vec2(0.05,0.3),t*1.5);\n    d = min(d,d2);    \n    \n    d2 = dBoxAnimatedLine(p,p26,p27,vec2(0.05,0.3),t*1.8);\n    d = min(d,d2);    \n    \n    d2 = dBoxAnimatedLine(p,p28,p29,vec2(0.05,0.3),t*1.3);\n    d = min(d,d2);    \n    \n    d2 = dBoxAnimatedLine(p,p30,p31,vec2(0.05,0.3),t*1.6);\n    d = min(d,d2);    \n    \n    vec4 model = vec4(vec3(1.0,0.0,0.0),d);\n    \n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 r = vec4(0.0,0.0,0.0,1.0);\n    \n    float dist;\n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*r.w;\n        vec4 dS = GetDist(p);\n        dist =  dS.w;\n        r.w += dS.w;\n        r.rgb = dS.xyz;\n        \n        if(r.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return r;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(3,5,0);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n    \n    float lambert = max(.0, dot( n, l))*0.2;\n    \n\n    \n    return vec2((lambert+dif),0.9) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = mod(iTime,8000.0);\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 0.0, -3.1);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(15.0));\n    ro.xz *= Rot(radians(t*20.0));\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 0.6);\n\tvec4 r = RayMarch(ro, rd);\n    \n    if(r.w<MAX_DIST) {\n        vec3 p = ro + rd * r.w;\n        vec3 n = GetNormal(p);\n        vec2 dif = GetLight(p);\n        //col = vec3(dif.x)*r.rgb;\n        //col *= dif.y;\n        \n        float IOR = 1.5; //IOR:index of reflection\n        vec3 rdIn = refract(rd,n,1.0/IOR); \n        vec3 refTex = texture(iChannel0,rdIn).rgb;      \n        col=refTex;\n        \n    } else {\n        // background\n        col =.3*max(mix(vec3(0.3)-(.1-length(uv.xy)/3.),vec3(0.2),.1),0.);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}