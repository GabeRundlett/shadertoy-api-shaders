{
    "Shader": {
        "info": {
            "date": "1596970757",
            "description": "Deep in the Gibson O.o ...\nThis one is experimenting with self directing agents... had been dying to do something like this.\nStart with resolutions higher than or equal to 800x450. Otherwise, will bug out at full screen.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tfBRS",
            "likes": 4,
            "name": "Deep in the Gibson",
            "published": 3,
            "tags": [
                "sdf",
                "sphere",
                "marching",
                "blending",
                "alpha",
                "gibson",
                "hacker"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 556
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   Deep in the Gibson O.o ...\n   This one is experimenting with self directing agents... had been dying to do something like this.\n   White noise is modified iq noise : https://www.shadertoy.com/view/Msf3WH\n   All your sdf are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Covered under the MIT license:\n\n   Copyright (c) 2020 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n\nfloat hash3(vec3 p)\n{\n    p *= 60.0;\n    p = 50.0*fract( p*0.3183099 + vec3(0.71,0.113, 0.563));\n    return fract(p.x*p.y*(p.x+p.y) + p.x*p.z*(p.x+p.z) + p.y*p.z*(p.y+p.z));\n}\n\nfloat sdBox( vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat opRep( in vec3 p, in vec3 c, in vec3 d)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return sdBox( q, d );\n}\n\nfloat scene(vec3 p)\n{\n    float retVal =  opRep (p, vec3 (2.0), vec3 (1.0));\n    float retVal1 = max (retVal, -p.x + 1.0);\n    float retVal2 = max (retVal, p.x + 1.0);\n    float retVal3 = max (retVal, -p.y + 1.0);\n    float retVal4 = max (retVal, p.y + 1.0);\n    return min (min (retVal3, retVal4), min (retVal1, retVal2));\n}\n\nvec3 sceneNorm (vec3 p)\n{\n    float gradD = 0.01;\n    float gradX = scene (p + vec3 ( gradD, 0.0, 0.0)) - scene (p - vec3 ( gradD, 0.0, 0.0));\n    float gradY = scene (p + vec3 ( 0.0, gradD, 0.0)) - scene (p - vec3 ( 0.0, gradD, 0.0));\n    float gradZ = scene (p + vec3 ( 0.0, 0.0, gradD)) - scene (p - vec3 ( 0.0, 0.0, gradD));\n\n    return normalize (vec3 (gradX, gradY, gradZ));\n}\n\nvec4 fetchTexture (vec2 uvCoord, vec2 textureRes)\n{\n    vec2 fetchCoord = uvCoord * textureRes;\n    vec2 fetchFract = fract (fetchCoord);\n    vec4 fetch00 = texelFetch (iChannel0, ivec2 (fetchCoord.xy), 0);\n    vec4 fetch10 = texelFetch (iChannel0, ivec2 (fetchCoord.xy) + ivec2 (1, 0), 0);\n    vec4 fetch01 = texelFetch (iChannel0, ivec2 (fetchCoord.xy) + ivec2 (0, 1), 0);\n    vec4 fetch11 = texelFetch (iChannel0, ivec2 (fetchCoord.xy) + ivec2 (1, 1), 0);\n    \n    return mix (mix (fetch00, fetch10, fetchFract.x), mix (fetch01, fetch11, fetchFract.x), fetchFract.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    vec2 textureRes = min (vec2 (800.0, 450.0), iChannelResolution[0].xy);\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec3 eye = vec3 (0.0, 0.0, -iTime);\n    vec3 look = normalize (vec3 (0.0, 0.0, -1.0));\n    \n    vec3 side = normalize (cross (vec3 (cos(iTime * 0.1), sin(iTime * 0.1), 0.0), look));\n    vec3 up = cross (side, look);\n    if ( dot (up, vec3 (cos(iTime * 0.1), sin(iTime * 0.1), 0.0)) < 0.0 ) up = -up;\n    \n    vec3 sampleDir = normalize (look + side * uv.x + up * uv.y);\n    vec3 samplePt = eye + sampleDir;\n    vec3 colorAccum = vec3 (0.0);\n\n    samplePt = eye + sampleDir;\n    \n    const float drawDistSq = 10000.0;\n\n    for (float jj = 0.0; jj != 60.0; jj += 1.0)\n    {\n        vec3 samplePtToEye = samplePt - eye;\n        float curDist = scene (samplePt);\n        if (abs(curDist) < 0.01 )\n        {\n\t        vec3 sceneNorm = abs (sceneNorm (samplePt));\n            vec3 colorFetch = vec3 (0.0);\n            if ( sceneNorm.x > 0.75 )\n            \tcolorFetch = fetchTexture (fract (samplePt.yz * 0.15), textureRes).rgb;\n            else if ( sceneNorm.y > 0.75 )\n            \tcolorFetch = fetchTexture (fract (samplePt.xz * 0.15), textureRes).rgb;\n            else\n            \tcolorFetch = fetchTexture (fract (samplePt.xy * 0.15), textureRes).rgb;\n            colorFetch /= max (length (samplePtToEye) * 0.1, 1.0);\n            colorAccum += colorFetch;\n            samplePt += sampleDir * 5.0;\n        }\n        samplePt += curDist*sampleDir;\n        if ( dot (samplePtToEye,samplePtToEye) > drawDistSq )\n            break ;\n    }\n\n    fragColor.rgb = colorAccum;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/***********************************************************\n\n   Deep in the Gibson O.o ...\n   This one is experimenting with self directing agents... had been dying to do something like this.\n   White noise is modified iq noise : https://www.shadertoy.com/view/Msf3WH\n   All your sdf are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Covered under the MIT license:\n\n   Copyright (c) 2020 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvec2 hash(float p)\n{\n    p *= 60.0;\n    vec2 p1 = 50.0*fract( vec2 (p)*0.3183099 + vec2(0.71,0.113));\n    vec2 p2 = 60.0*fract( vec2 (p)*0.4140551 + vec2(-0.45,0.51));\n    return vec2 (fract(p1.x*p1.y*(p1.x+p1.y)), fract(p2.x*p2.y*(p2.x+p2.y)));\n}\n\nvec2 hash2(vec2 p)\n{\n    p *= 60.0;\n    vec2 p1 = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    vec2 p2 = 60.0*fract( p*0.4140551 + vec2(-0.45,0.51));\n    return vec2 (fract(p1.x*p1.y*(p1.x+p1.y)), fract(p2.x*p2.y*(p2.x+p2.y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool timeToTurn = (iFrame % 40 == 0);\n    vec2 iRes = min (vec2 (800.0, 450.0), iChannelResolution[0].xy);\n    if ( fragCoord.x >= iRes.x || fragCoord.y >= iRes.y ) discard;\n    vec2 uv = fragCoord/iRes.xy;\n    vec2 pixelSize = 1.0/iRes.xy;\n    if ( iFrame == 0 )\n    {\n        float pixelRad = length (pixelSize) * 0.5;\n        fragColor = vec4 (0.0);\n        for (int i = 0; i != 600; i++)\n        {\n            vec2 pixelRand = hash (float(i));\n\t    \tif ( length ( uv - pixelRand ) < pixelRad )\n            {\n                fragColor = vec4 (hash2( pixelRand ), 1.0, 0.0);\n            }\n\t\t}\n    }\n    else\n    {\n        vec4 neighFetch;\n        vec2 uv_minus_x = fragCoord.xy - vec2 (1.0, 0.0);\n        if ( uv_minus_x.x < 0.0 ) uv_minus_x.x = iRes.x - 1.0;\n        neighFetch = texelFetch (iChannel0, ivec2 (uv_minus_x), 0);\n        if ( neighFetch.b == 0.95 && neighFetch.g < 0.25 )\n        {\n            if ( timeToTurn )\n            {\n                float changeOfDir = hash2 (uv + vec2 (iTime * 5.0)).x;\n                neighFetch.g = 0.5 + changeOfDir * 0.5;\n            }            \n            fragColor = vec4 (neighFetch.rg, 1.0, 0.0);\n            return ;\n        }\n        vec2 uv_plus_x = fragCoord.xy + vec2 (1.0, 0.0);\n        if ( uv_plus_x.x > iRes.x - 1.0 ) uv_plus_x.x = 0.0;\n        neighFetch = texelFetch (iChannel0, ivec2 (uv_plus_x), 0);\n        if ( neighFetch.b == 0.95 && neighFetch.g >= 0.25 && neighFetch.g < 0.5 )\n        {\n            if ( timeToTurn )\n            {\n                float changeOfDir = hash2 (uv + vec2 (iTime * 5.0)).x;\n                neighFetch.g = 0.5 + changeOfDir * 0.5;\n            }\n            fragColor = vec4 (neighFetch.rg, 1.0, 0.0);\n            return ;\n        }\n        vec2 uv_minus_y = fragCoord.xy - vec2 (0.0, 1.0);\n        if ( uv_minus_y.y < 0.0 ) uv_minus_y.y = iRes.y - 1.0;\n        neighFetch = texelFetch (iChannel0, ivec2 (uv_minus_y), 0);\n        if ( neighFetch.b == 0.95 && neighFetch.g >= 0.5 && neighFetch.g < 0.75 )\n        {\n            if ( timeToTurn )\n            {\n                float changeOfDir = hash2 (uv + vec2 (iTime * 5.0)).x;\n                neighFetch.g = changeOfDir * 0.5;\n            }\n            fragColor = vec4 (neighFetch.rg, 1.0, 0.0);\n            return ;\n        }\n        vec2 uv_plus_y = fragCoord.xy + vec2 (0.0, 1.0);\n        if ( uv_plus_y.y > iRes.y - 1.0 ) uv_plus_y.y = 0.0;\n        neighFetch = texelFetch (iChannel0, ivec2 (uv_plus_y), 0);\n        if ( neighFetch.b == 0.95 && neighFetch.g >= 0.75 )\n        {\n            if ( timeToTurn )\n            {\n                float changeOfDir = hash2 (uv + vec2 (iTime * 5.0)).x;\n                neighFetch.g = changeOfDir * 0.5;\n            }\n            fragColor = vec4 (neighFetch.rg, 1.0, 0.0);\n            return ;\n        }\n\n        vec4 prevFetch = texelFetch (iChannel0, ivec2 (fragCoord.xy), 0);\n        prevFetch.b *= 0.95;\n        if ( prevFetch.b < 0.05 ) prevFetch = vec4 (0.0);\n        fragColor = prevFetch;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/***********************************************************\n\n   Deep in the Gibson O.o ...\n   This one is experimenting with self directing agents... had been dying to do something like this.\n   White noise is modified iq noise : https://www.shadertoy.com/view/Msf3WH\n   All your sdf are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Covered under the MIT license:\n\n   Copyright (c) 2020 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n\nvec4 readImage(ivec2 uv, ivec2 screenRes)\n{\n    if ( uv.x < 0 ) uv.x = screenRes.x - 1;\n    else if ( uv.x > screenRes.x - 1) uv.x = 0;\n\n    if ( uv.y < 0 ) uv.y = screenRes.y - 1;\n    else if ( uv.y > screenRes.y - 1) uv.y = 0;\n\n    vec4 mapRead = texelFetch (iChannel0, uv, 0);\n    \n    if ( mapRead.x < 0.5 )\n    {\n        return vec4 (0.0, mapRead.b * 0.5, mapRead.b, 1.0);\n    }\n    else\n    {\n        return vec4 (mapRead.b, mapRead.b * 0.5, mapRead.b, 1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iRes = min (ivec2 (800, 450), ivec2 (iChannelResolution[0].xy));\n    if ( int(fragCoord.x) >= iRes.x || int(fragCoord.y) >= iRes.y ) discard;\n    vec4 centRead = readImage (ivec2 (fragCoord), iRes);\n    vec4 totalRead = vec4 (0.0);\n    for (int i = -2; i != 3; i++)\n        for (int j = -2; j != 3; j++)\n            totalRead += readImage (ivec2 (fragCoord) + ivec2 (i, j), iRes);\n    fragColor = centRead + totalRead * 0.13;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}