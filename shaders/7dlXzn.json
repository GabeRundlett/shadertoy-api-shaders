{
    "Shader": {
        "info": {
            "date": "1618235398",
            "description": "precomputed BVH for 2D pixel mask",
            "flags": 0,
            "hasliked": 0,
            "id": "7dlXzn",
            "likes": 11,
            "name": "Pixel BVH",
            "published": 3,
            "tags": [
                "pixel",
                "bvh"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 569
        },
        "renderpass": [
            {
                "code": "#define LEVELS 9\n#define NUMRECTS 510 //(1 << LEVELS)\n#define MAXSIZE 128.0\n\nconst uint rect[NUMRECTS] = uint[](\n0x0u, 0x7373050du, 0x73733e0du, 0x3e73050du, 0x73403e0du, 0x73733e40u, 0x3e40050du, 0x3e730540u, \n0x54403e0du, 0x73405412u, 0x54733e40u, 0x736e5440u, 0x22400520u, 0x3e40220du, 0x22600540u, 0x3e732240u, \n0x47403e0du, 0x542b470eu, 0x69235412u, 0x73405423u, 0x47733e40u, 0x54724755u, 0x696e545du, 0x735d5440u, \n0x222f0b20u, 0x1c40052fu, 0x3e402229u, 0x3e29220du, 0x1c510540u, 0x22600b51u, 0x3e572240u, 0x3e732257u, \n0x471a3e0du, 0x45403e2du, 0x541f470eu, 0x542b4c1fu, 0x61235412u, 0x6923611au, 0x73406b26u, 0x6b405423u, \n0x45533e40u, 0x47733e66u, 0x54614c55u, 0x54724761u, 0x616e545du, 0x6966615du, 0x735a6b40u, 0x6b5d5440u, \n0x142f0b26u, 0x222f1420u, 0x1340052fu, 0x1c39132fu, 0x34342229u, 0x3e403429u, 0x3a292221u, 0x3e21220du, \n0x13510540u, 0x1c511347u, 0x145a0b51u, 0x22601451u, 0x3457224cu, 0x3e573440u, 0x3a5f2257u, 0x3e73225fu, \n0x47163e0du, 0x471a4216u, 0x42343e2du, 0x45403e34u, 0x541b470eu, 0x541f481bu, 0x54244c1fu, 0x542b5024u, \n0x5c165412u, 0x61235416u, 0x651e611au, 0x6923611eu, 0x6f2e6b26u, 0x73406b2eu, 0x6b325423u, 0x6b405632u, \n0x454c3e40u, 0x42533e4cu, 0x476a4266u, 0x47733e6au, 0x545c5055u, 0x54614c5cu, 0x54654861u, 0x54724765u, \n0x616a545du, 0x5c6e546au, 0x6962615du, 0x65666162u, 0x73526b40u, 0x6f5a6b52u, 0x6b5d544fu, 0x6b4f5640u, \n0x142a0f26u, 0x142f0b2au, 0x22241720u, 0x222f1424u, 0x1337072fu, 0x13400537u, 0x1c33132fu, 0x17391333u, \n0x30302229u, 0x34343029u, 0x3e353429u, 0x3e403535u, 0x35292221u, 0x3a293525u, 0x3721220eu, 0x3e13370du, \n0x13490540u, 0x13510749u, 0x174d1347u, 0x1c51134du, 0x14560b51u, 0x145a0f56u, 0x225c1451u, 0x2260175cu, \n0x30572250u, 0x3457304cu, 0x3e4b3540u, 0x3e57344bu, 0x355f2257u, 0x3a5b3557u, 0x3772225fu, 0x3e73376du, \n0x41153e0du, 0x4716410du, 0x45184216u, 0x471a4516u, 0x40303e2du, 0x42343e30u, 0x443a3e34u, 0x45403e3au, \n0x4f1b470eu, 0x541b4f10u, 0x4a1d481bu, 0x541f4a1bu, 0x4e214c1fu, 0x54244e1fu, 0x54275024u, 0x542b5227u, \n0x59165412u, 0x5c165914u, 0x5f235416u, 0x61235f18u, 0x631e611au, 0x651e631cu, 0x6723611eu, 0x69236720u, \n0x6d296b26u, 0x6f2e6b29u, 0x71356b2eu, 0x73406b35u, 0x56315423u, 0x6b325623u, 0x583a5632u, 0x6b405832u, \n0x45463e40u, 0x444c3e46u, 0x42503e4cu, 0x40533e50u, 0x456a4268u, 0x476a4566u, 0x41733e6bu, 0x4773416au, \n0x54595255u, 0x545c5059u, 0x4e614c5fu, 0x54614e5cu, 0x4a654863u, 0x54654a61u, 0x4f724765u, 0x54704f65u, \n0x5f6a545du, 0x61685f5du, 0x596e546au, 0x5c6c596au, 0x6762615du, 0x6960675du, 0x63666162u, 0x65646362u, \n0x734b6b40u, 0x71526b4bu, 0x6f576b52u, 0x6d5a6b57u, 0x605d544fu, 0x6b5d604fu, 0x584f5646u, 0x6b4f5840u, \n0x112a0f28u, 0x142a1126u, 0xd2f0b2cu, 0x142f0d2au, 0x1c241722u, 0x22241c20u, 0x1e2f1424u, 0x222e1e24u, \n0x9370732u, 0x1337092fu, 0xc400537u, 0x13400c37u, 0x1933132fu, 0x1c31192fu, 0x17351333u, 0x15391335u, \n0x2d2e2229u, 0x30302d29u, 0x34323029u, 0x34343232u, 0x3c2b3429u, 0x3e35342bu, 0x3e383535u, 0x3e403738u, \n0x31292221u, 0x35293123u, 0x38293525u, 0x3a293827u, 0x3710340eu, 0x29212220u, 0x3e133a0du, 0x3a11370eu, \n0xc490540u, 0x13490c40u, 0x94e0749u, 0x13510949u, 0x154b1347u, 0x174d134bu, 0x1951134du, 0x1c51194fu, \n0xd540b51u, 0x14560d51u, 0x11580f56u, 0x145a1156u, 0x1e5c1451u, 0x225c1e52u, 0x1c5e175cu, 0x22601c5cu, \n0x2d572252u, 0x30572d50u, 0x344e324cu, 0x3457304eu, 0x3e483740u, 0x3e4b3548u, 0x3e55344bu, 0x3c573455u, \n0x315f2257u, 0x355d3157u, 0x385b3557u, 0x3a593857u, 0x37723470u, 0x2960225fu, 0x3e733a6du, 0x3a72376fu, \n0x41143e0du, 0x41153f14u, 0x460e410du, 0x4716410eu, 0x44174216u, 0x45184416u, 0x47194516u, 0x471a4619u, \n0x3f2e3e2du, 0x40303e2eu, 0x41323e30u, 0x42343e32u, 0x43373e34u, 0x443a3e37u, 0x44403e3au, 0x4540443cu, \n0x4b0f470eu, 0x4f1b470fu, 0x52114f10u, 0x541b4f11u, 0x4a1c481bu, 0x4a1d491cu, 0x4b1e4a1bu, 0x541f4b1bu, \n0x4e204c1fu, 0x4e214d20u, 0x4f234e1fu, 0x54244f1fu, 0x51265024u, 0x54275124u, 0x54295227u, 0x542b5329u, \n0x57165412u, 0x59165713u, 0x5a165914u, 0x5c165a15u, 0x5d175416u, 0x5f235417u, 0x60195f18u, 0x61235f19u, \n0x621b611au, 0x631e611bu, 0x641d631cu, 0x651e631du, 0x6623611eu, 0x6723661fu, 0x68216720u, 0x69236721u, \n0x6c276b26u, 0x6d296b27u, 0x6e2c6b29u, 0x6f2e6b2cu, 0x70316b2eu, 0x71356b31u, 0x723a6b35u, 0x73406b3au, \n0x562e5423u, 0x5631552eu, 0x6a325623u, 0x6b326a24u, 0x58345632u, 0x583a5734u, 0x0u, 0x0u, \n0x44463e40u, 0x45444440u, 0x44493e46u, 0x434c3e49u, 0x424e3e4cu, 0x41503e4eu, 0x40523e50u, 0x3f533e52u, \n0x446a4269u, 0x456a4468u, 0x47674666u, 0x476a4567u, 0x416c3f6bu, 0x41733e6cu, 0x4772416au, 0x46734172u, \n0x54575355u, 0x54595257u, 0x515c505au, 0x545c5159u, 0x4e604d5fu, 0x4e614c60u, 0x4f614e5du, 0x54614f5cu, \n0x4a644963u, 0x4a654864u, 0x4b654a62u, 0x54654b61u, 0x4f714765u, 0x4b724771u, 0x546f4f65u, 0x52704f6fu, \n0x5f69545du, 0x5d6a5469u, 0x61675f5du, 0x60685f67u, 0x576e546au, 0x596d576au, 0x5a6c596au, 0x5c6b5a6au, \n0x6662615du, 0x6761665du, 0x695f675du, 0x6860675fu, 0x63656162u, 0x62666165u, 0x65636362u, 0x64646363u, \n0x73466b40u, 0x724b6b46u, 0x714f6b4bu, 0x70526b4fu, 0x6f546b52u, 0x6e576b54u, 0x6d596b57u, 0x6c5a6b59u, \n0x6052554fu, 0x605d5452u, 0x6b5c604fu, 0x6a5d605cu, 0x584c5746u, 0x584f564cu, 0x0u, 0x0u, \n0x11291028u, 0x112a0f29u, 0x14271226u, 0x142a1127u, 0xd2d0c2cu, 0xd2f0b2du, 0xe2f0d2bu, 0x142f0e2au, \n0x19241723u, 0x1c241922u, 0x21241c21u, 0x22242120u, 0x1e251524u, 0x1e2f1425u, 0x222d1e24u, 0x212e1e2du, \n0x9340832u, 0x9370734u, 0xa370930u, 0x13370a2fu, 0xc3d0637u, 0xc40053du, 0x133c0c37u, 0x12400c3cu, \n0x1833132fu, 0x1932182fu, 0x1a31192fu, 0x1c301a2fu, 0x16351333u, 0x17341633u, 0x15371335u, 0x14391337u, \n0x2a2d2229u, 0x2d2e2a29u, 0x302f2d29u, 0x30302f2fu, 0x34313029u, 0x34323131u, 0x34333232u, 0x34343333u, \n0x3b2b3429u, 0x3c2b3b2au, 0x3d2c342bu, 0x3e35342cu, 0x36363535u, 0x3e383635u, 0x3e3b3738u, 0x3e40383bu, \n0x2e292221u, 0x31292e22u, 0x33243123u, 0x35293124u, 0x37263525u, 0x38293526u, 0x39283827u, 0x3a293828u, \n0x3510340fu, 0x3710350eu, 0x0u, 0x0u, 0x3e123a0du, 0x3e133c12u, 0x0u, 0x0u, \n0xc430540u, 0xc490643u, 0x12440c40u, 0x13490c44u, 0x94c0749u, 0x94e084cu, 0xa500949u, 0x13510a49u, \n0x14491347u, 0x154b1349u, 0x164d134bu, 0x174d164cu, 0x1851134du, 0x1951184eu, 0x1a51194fu, 0x1c511a50u, \n0xd530b51u, 0xd540c53u, 0xe550d51u, 0x14560e51u, 0x11570f56u, 0x11581057u, 0x14591156u, 0x145a1259u, \n0x1e5b1451u, 0x1e5c155bu, 0x21531e52u, 0x225c1e53u, 0x195d175cu, 0x1c5e195cu, 0x215f1c5cu, 0x2260215cu, \n0x2a572253u, 0x2d572a52u, 0x30512f50u, 0x30572d51u, 0x344d334cu, 0x344e324du, 0x344f314eu, 0x3457304fu, \n0x3e453840u, 0x3e483745u, 0x364b354au, 0x3e4b3648u, 0x3e54344bu, 0x3d553454u, 0x3b573455u, 0x3c563b55u, \n0x2e5f2257u, 0x315e2e57u, 0x355c3157u, 0x335d315cu, 0x385a3557u, 0x375b355au, 0x3a583857u, 0x39593858u, \n0x35713470u, 0x37723570u, 0x0u, 0x0u, 0x3e6e3c6du, 0x3e733a6eu\n);\n\nvec4 getrect(uint i) {\n    uint x = (i >= uint(NUMRECTS))?0u:rect[i];\n    return (vec4(x & 0xffu, (x >> 8) & 0xffu, (x >> 16) & 0xffu, x >> 24)/MAXSIZE) * 2.0 - 1.0;\n}\n\nbool inrect(vec2 o, vec4 rc) {\n    return (o.x >= rc.x) && (o.y >= rc.y) && (o.x < rc.z) && (o.y < rc.w);\n}\n\nbool find_rect (vec2 o, out uint c) {\n    c = 0u;\n    for (uint i = 0u; i <= uint(LEVELS); ++i) {\n        uint k0 = (c << 1);\n        uint k1 = k0 + 1u;\n        // leaf?\n        if ((k1 >= uint(NUMRECTS)) || ((rect[k0]==0u) && (rect[k1]==0u))) {\n            return true;\n        }\n        vec4 rc = getrect(k0);\n        if (inrect(o, rc)) {\n            c = k0;\n        } else {\n            rc = getrect(k1);\n            if (inrect(o, rc)) {\n                c = k1;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n\n// from https://www.shadertoy.com/view/WlfXRN\nvec3 viridis(float t) {\n\n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    init(fragCoord, iMouse.xy, iResolution.xy);\n\n    set_line_width_px(1.0);\n\n    {\n        uint c = 0u;\n        bool leaf = find_rect(get_origin(), c);\n        vec4 rc = getrect(c);\n        int d = 0;\n        for (int i = 0; i <= LEVELS; ++i) {\n            if (c == 0u)\n                break;\n            d += 1;\n            c = c >> 1;\n        }\n        vec3 col = viridis(float(d)/float(LEVELS));\n        if (leaf) {\n            col = mix(col, vec3(1.0), 0.5);\n        }\n        set_source_rgb(col);\n        clear();\n        if (leaf) {\n            set_source_rgba(0.0,0.0,0.0,0.7);\n            rectangle(rc.x, rc.y, rc.z - rc.x, rc.w - rc.y);\n            stroke();\n        }\n    }\n    set_line_width_px(1.0);\n    // find best rect we're in\n    uint c = 0u;\n    bool found = find_rect(get_query(), c);\n    vec4 rc = getrect(c);\n    rectangle(rc.x, rc.y, rc.z - rc.x, rc.w - rc.y);\n    if (!found) {\n        set_source_rgb(vec3(0.5));    \n        stroke(); \n    } else {\n        set_source_rgb(vec3(0.8));    \n        fill_preserve();\n        set_source_rgb(vec3(0.0));    \n        stroke(); \n    }\n\n    blit(fragColor);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 2d vector graphics library (https://www.shadertoy.com/view/lslXW8)\n// after Cairo API, with anti-aliasing\n// by Leonard Ritter (@paniq)\n// v0.11\n\n// I release this into the public domain.\n// some estimators have been lifted from other shaders and are not\n// necessarily PD licensed, note the links in the source code comments below.\n\n// 2019-06-06: 0.12\n// * split implementation and demo into common and image tab\n\n// 2017-10-05: 0.11\n// * anti-aliasing is gamma-correct\n\n// 2017-10-01: 0.10\n// * added experimental letter() function\n\n// 2017-09-30: 0.9\n// * save() is now a declarative macro\n\n// 2017-09-11: 0.8\n// * added ellipse()\n\n// 2017-09-10: 0.7\n// * paths painted with line_to/curve_to can be filled.\n\n// 2017-09-09: 0.6\n// * added rounded_rectangle()\n// * added set_source_linear_gradient()\n// * added set_source_radial_gradient()\n// * added set_source_blend_mode()\n// * added support for non-uniform scaling\n\n// undefine if you are running on glslsandbox.com\n// #define GLSLSANDBOX\n\n#ifdef GLSLSANDBOX\n#ifdef GL_ES\n#endif\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define iTime time\n#define iResolution resolution\n#define iMouse mouse\n#endif\n\n// interface\n//////////////////////////////////////////////////////////\n\n// set color source for stroke / fill / clear\nvoid set_source_rgba(vec4 c);\nvoid set_source_rgba(float r, float g, float b, float a);\nvoid set_source_rgb(vec3 c);\nvoid set_source_rgb(float r, float g, float b);\nvoid set_source_linear_gradient(vec3 color0, vec3 color1, vec2 p0, vec2 p1);\nvoid set_source_linear_gradient(vec4 color0, vec4 color1, vec2 p0, vec2 p1);\nvoid set_source_radial_gradient(vec3 color0, vec3 color1, vec2 p, float r);\nvoid set_source_radial_gradient(vec4 color0, vec4 color1, vec2 p, float r);\nvoid set_source(sampler2D image);\n// control how source changes are applied\nconst int Replace = 0; // default: replace the new source with the old one\nconst int Alpha = 1; // alpha-blend the new source on top of the old one\nconst int Multiply = 2; // multiply the new source with the old one\nvoid set_source_blend_mode(int mode);\n// if enabled, blends using premultiplied alpha instead of\n// regular alpha blending.\nvoid premultiply_alpha(bool enable);\n\n// set line width in normalized units for stroke\nvoid set_line_width(float w);\n// set line width in pixels for stroke\nvoid set_line_width_px(float w);\n// set blur strength for strokes in normalized units\nvoid set_blur(float b);\n\n// add a circle path at P with radius R\nvoid circle(vec2 p, float r);\nvoid circle(float x, float y, float r);\n// add an ellipse path at P with radii RW and RH\nvoid ellipse(vec2 p, vec2 r);\nvoid ellipse(float x, float y, float rw, float rh);\n// add a rectangle at O with size S\nvoid rectangle(vec2 o, vec2 s);\nvoid rectangle(float ox, float oy, float sx, float sy);\n// add a rectangle at O with size S and rounded corner of radius R\nvoid rounded_rectangle(vec2 o, vec2 s, float r);\nvoid rounded_rectangle(float ox, float oy, float sx, float sy, float r);\n\n// set starting point for curves and lines to P\nvoid move_to(vec2 p);\nvoid move_to(float x, float y);\n// draw straight line from starting point to P,\n// and set new starting point to P\nvoid line_to(vec2 p);\nvoid line_to(float x, float y);\n// draw quadratic bezier curve from starting point\n// over B1 to B2 and set new starting point to B2\nvoid curve_to(vec2 b1, vec2 b2);\nvoid curve_to(float b1x, float b1y, float b2x, float b2y);\n// connect current starting point with first\n// drawing point.\nvoid close_path();\n\n// clear screen in the current source color\nvoid clear();\n// fill paths and clear the path buffer\nvoid fill();\n// fill paths and preserve them for additional ops\nvoid fill_preserve();\n// stroke paths and clear the path buffer\nvoid stroke_preserve();\n// stroke paths and preserve them for additional ops\nvoid stroke();\n// clears the path buffer\nvoid new_path();\n\n// draw a letter with the given texture coordinate\nvoid letter(sampler2D font_texture_source, ivec2 l);\nvoid letter(sampler2D font_texture_source, int lx, int ly);\n    \n// return rgb color for given hue (0..1)\nvec3 hue(float hue);\n// return rgb color for given hue, saturation and lightness\nvec3 hsl(float h, float s, float l);\nvec4 hsl(float h, float s, float l, float a);\n\n// rotate the context by A in radians\nvoid rotate(float a);\n// uniformly scale the context by S\nvoid scale(float s);\n// non-uniformly scale the context by S\nvoid scale(vec2 s);\nvoid scale(float sx, float sy);\n// translate the context by offset P\nvoid translate(vec2 p);\nvoid translate(float x, float y);\n// clear all transformations for the active context\nvoid identity_matrix();\n// transform the active context by the given matrix\nvoid transform(mat3 mtx);\n// set the transformation matrix for the active context\nvoid set_matrix(mat3 mtx);\n\n// return the active query position for in_fill/in_stroke\n// by default, this is the mouse position\nvec2 get_query();\n// set the query position for subsequent calls to\n// in_fill/in_stroke; clears the query path\nvoid set_query(vec2 p);\n// true if the query position is inside the current path\nbool in_fill();\n// true if the query position is inside the current stroke\nbool in_stroke();\n\n// return the transformed coordinate of the current pixel\nvec2 get_origin();\n// draw a 1D graph from coordinate p, result f(p.x),\n// and gradient1D(f,p.x)\nvoid graph(vec2 p, float f_x, float df_x);\n// draw a 2D graph from coordinate p, result f(p),\n// and gradient2D(f,p)\nvoid graph(vec2 p, float f_x, vec2 df_x);\n// adds a custom distance field as path\n// this field will not be testable by queries\nvoid add_field(float c);\n\n// returns a gradient for 1D graph function f at position x\n#define gradient1D(f,x) (f(x + get_gradient_eps()) - f(x - get_gradient_eps())) / (2.0*get_gradient_eps())\n// returns a gradient for 2D graph function f at position x\n#define gradient2D(f,x) vec2(f(x + vec2(get_gradient_eps(),0.0)) - f(x - vec2(get_gradient_eps(),0.0)),f(x + vec2(0.0,get_gradient_eps())) - f(x - vec2(0.0,get_gradient_eps()))) / (2.0*get_gradient_eps())\n// draws a 1D graph at the current position\n#define graph1D(f) { vec2 pp = get_origin(); graph(pp, f(pp.x), gradient1D(f,pp.x)); }\n// draws a 2D graph at the current position\n#define graph2D(f) { vec2 pp = get_origin(); graph(pp, f(pp), gradient2D(f,pp)); }\n\n// represents the current drawing context\n// you usually don't need to change anything here\nstruct Context {\n    // screen position, query position\n    vec4 position;\n    vec2 shape;\n    vec2 clip;\n    vec2 scale;\n    float line_width;\n    bool premultiply;\n    vec2 blur;\n    vec4 source;\n    vec2 start_pt;\n    vec2 last_pt;\n    int source_blend;\n    bool has_clip;\n};\n\n// save current stroke width, starting\n// point and blend mode from active context.\nContext _save();\n#define save(name) Context name = _save();\n// restore stroke width, starting point\n// and blend mode to a context previously returned by save()\nvoid restore(Context ctx);\n\n// draws a half-transparent debug gradient for the\n// active path\nvoid debug_gradient();\nvoid debug_clip_gradient();\n// returns the gradient epsilon width\nfloat get_gradient_eps();\n\n\n// implementation\n//////////////////////////////////////////////////////////\n\nvec2 aspect;\nvec2 uv;\nvec2 position;\nvec2 query_position;\nfloat ScreenH;\nfloat AA;\nfloat AAINV;\n\n//////////////////////////////////////////////////////////\n\nfloat det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\n//////////////////////////////////////////////////////////\n\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\nvec3 hsl(float h, float s, float l) {\n    vec3 rgb = hue(h);\n    return l + s * (rgb - 0.5) * (1.0 - abs(2.0 * l - 1.0));\n}\n\nvec4 hsl(float h, float s, float l, float a) {\n    return vec4(hsl(h,s,l),a);\n}\n\n//////////////////////////////////////////////////////////\n\n#define DEFAULT_SHAPE_V 1e+20\n#define DEFAULT_CLIP_V -1e+20\n\nContext _stack;\n\nvoid init (vec2 fragCoord, vec2 mouse, vec2 resolution) {\n\taspect = vec2(resolution.x / resolution.y, 1.0);\n\tScreenH = min(resolution.x,resolution.y);\n\tAA = ScreenH*0.4;\n\tAAINV = 1.0 / AA;\n    \n    uv = fragCoord.xy / resolution;\n    vec2 m = mouse / resolution;\n\n    position = (uv*2.0-1.0)*aspect;\n    query_position = (m*2.0-1.0)*aspect;\n\n    _stack = Context(\n        vec4(position, query_position),\n        vec2(DEFAULT_SHAPE_V),\n        vec2(DEFAULT_CLIP_V),\n        vec2(1.0),\n        1.0,\n        false,\n        vec2(0.0,1.0),\n        vec4(vec3(0.0),1.0),\n        vec2(0.0),\n        vec2(0.0),\n        Replace,\n        false\n    );\n}\n\nvec3 _color = vec3(1.0);\n\nvec2 get_origin() {\n    return _stack.position.xy;\n}\n\nvec2 get_query() {\n    return _stack.position.zw;\n}\n\nvoid set_query(vec2 p) {\n    _stack.position.zw = p;\n    _stack.shape.y = DEFAULT_SHAPE_V;\n    _stack.clip.y = DEFAULT_CLIP_V;\n}\n\nContext _save() {\n    return _stack;\n}\n\nvoid restore(Context ctx) {\n    // preserve shape\n    vec2 shape = _stack.shape;\n    vec2 clip = _stack.clip;\n    bool has_clip = _stack.has_clip;\n    // preserve source\n    vec4 source = _stack.source;\n    _stack = ctx;\n    _stack.shape = shape;\n    _stack.clip = clip;\n    _stack.source = source;\n    _stack.has_clip = has_clip;\n}\n\nmat3 mat2x3_invert(mat3 s)\n{\n    float d = det(s[0].xy,s[1].xy);\n    d = (d != 0.0)?(1.0 / d):d;\n\n    return mat3(\n        s[1].y*d, -s[0].y*d, 0.0,\n        -s[1].x*d, s[0].x*d, 0.0,\n        det(s[1].xy,s[2].xy)*d,\n        det(s[2].xy,s[0].xy)*d,\n        1.0);\n}\n\nvoid identity_matrix() {\n    _stack.position = vec4(position, query_position);\n    _stack.scale = vec2(1.0);\n}\n\nvoid set_matrix(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(position,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(query_position,1.0)).xy;\n    _stack.scale = vec2(length(mtx[0].xy), length(mtx[1].xy));\n}\n\nvoid transform(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(_stack.position.xy,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(_stack.position.zw,1.0)).xy;\n    _stack.scale *= vec2(length(mtx[0].xy), length(mtx[1].xy));\n}\n\nvoid rotate(float a) {\n    float cs = cos(a), sn = sin(a);\n    transform(mat3(\n        cs, sn, 0.0,\n        -sn, cs, 0.0,\n        0.0, 0.0, 1.0));\n}\n\nvoid scale(vec2 s) {\n    transform(mat3(s.x,0.0,0.0,0.0,s.y,0.0,0.0,0.0,1.0));\n}\n\nvoid scale(float sx, float sy) {\n    scale(vec2(sx, sy));\n}\n\nvoid scale(float s) {\n    scale(vec2(s));\n}\n\nvoid translate(vec2 p) {\n    transform(mat3(1.0,0.0,0.0,0.0,1.0,0.0,p.x,p.y,1.0));\n}\n\nvoid translate(float x, float y) { translate(vec2(x,y)); }\n\nvoid clear() {\n    _color = mix(_color, _stack.source.rgb, _stack.source.a);\n}\n\nvoid blit(out vec4 dest) {\n    dest = vec4(sqrt(_color), 1.0);\n}\n\nvoid blit(out vec3 dest) {\n    dest = _color;\n}\n\nvoid add_clip(vec2 d) {\n    d = d / _stack.scale;\n    _stack.clip = max(_stack.clip, d);\n    _stack.has_clip = true;\n}\n\nvoid add_field(vec2 d) {\n    d = d / _stack.scale;\n    _stack.shape = min(_stack.shape, d);\n}\n\nvoid add_field(float c) {\n    _stack.shape.x = min(_stack.shape.x, c);\n}\n\nvoid new_path() {\n    _stack.shape = vec2(DEFAULT_SHAPE_V);\n    _stack.clip = vec2(DEFAULT_CLIP_V);\n    _stack.has_clip = false;\n}\n\nvoid debug_gradient() {\n    vec2 d = _stack.shape;\n    _color = mix(_color,\n        hsl(d.x * 6.0,\n            1.0, (d.x>=0.0)?0.5:0.3),\n        0.5);\n}\n\nvoid debug_clip_gradient() {\n    vec2 d = _stack.clip;\n    _color = mix(_color,\n        hsl(d.x * 6.0,\n            1.0, (d.x>=0.0)?0.5:0.3),\n        0.5);\n}\n\nvoid set_blur(float b) {\n    if (b == 0.0) {\n        _stack.blur = vec2(0.0, 1.0);\n    } else {\n        _stack.blur = vec2(\n            b,\n            0.0);\n    }\n}\n\nvoid write_color(vec4 rgba, float w) {\n    float src_a = w * rgba.a;\n    float dst_a = _stack.premultiply?w:src_a;\n    _color = _color * (1.0 - src_a) + rgba.rgb * dst_a;\n}\n\nvoid premultiply_alpha(bool enable) {\n    _stack.premultiply = enable;\n}\n\nfloat min_uniform_scale() {\n    return min(_stack.scale.x, _stack.scale.y);\n}\n\nfloat uniform_scale_for_aa() {\n    return min(1.0, _stack.scale.x / _stack.scale.y);\n}\n\nfloat calc_aa_blur(float w) {\n    vec2 blur = _stack.blur;\n    w -= blur.x;\n    float wa = clamp(-w*AA*uniform_scale_for_aa(), 0.0, 1.0);\n    float wb = clamp(-w / blur.x + blur.y, 0.0, 1.0);\n\treturn wa * wb;\n}\n\nvoid fill_preserve() {\n    write_color(_stack.source, calc_aa_blur(_stack.shape.x));\n    if (_stack.has_clip) {\n\t    write_color(_stack.source, calc_aa_blur(_stack.clip.x));        \n    }\n}\n\nvoid fill() {\n    fill_preserve();\n    new_path();\n}\n\nvoid set_line_width(float w) {\n    _stack.line_width = w;\n}\n\nvoid set_line_width_px(float w) {\n    _stack.line_width = w*min_uniform_scale() * AAINV;\n}\n\nfloat get_gradient_eps() {\n    return (1.0 / min_uniform_scale()) * AAINV;\n}\n\nvec2 stroke_shape() {\n    return abs(_stack.shape) - _stack.line_width/_stack.scale;\n}\n\nvoid stroke_preserve() {\n    float w = stroke_shape().x;\n    write_color(_stack.source, calc_aa_blur(w));\n}\n\nvoid stroke() {\n    stroke_preserve();\n    new_path();\n}\n\nbool in_fill() {\n    return (_stack.shape.y <= 0.0);\n}\n\nbool in_stroke() {\n    float w = stroke_shape().y;\n    return (w <= 0.0);\n}\n\nvoid set_source_rgba(vec4 c) {\n    //c.rgb *= c.rgb;\n    c *= c;\n    if (_stack.source_blend == Multiply) {\n        _stack.source *= c;\n    } else if (_stack.source_blend == Alpha) {\n    \tfloat src_a = c.a;\n    \tfloat dst_a = _stack.premultiply?1.0:src_a;\n\t    _stack.source =\n            vec4(_stack.source.rgb * (1.0 - src_a) + c.rgb * dst_a,\n                 max(_stack.source.a, c.a));\n    } else {\n    \t_stack.source = c;\n    }\n}\n\nvoid set_source_rgba(float r, float g, float b, float a) {\n    set_source_rgba(vec4(r,g,b,a)); }\n\nvoid set_source_rgb(vec3 c) {\n    set_source_rgba(vec4(c,1.0));\n}\n\nvoid set_source_rgb(float r, float g, float b) { set_source_rgb(vec3(r,g,b)); }\n\nvoid set_source(sampler2D image) {\n    set_source_rgba(texture(image, _stack.position.xy));\n}\n\nvoid set_source_linear_gradient(vec4 color0, vec4 color1, vec2 p0, vec2 p1) {\n    vec2 pa = _stack.position.xy - p0;\n    vec2 ba = p1 - p0;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    set_source_rgba(mix(color0, color1, h));\n}\n\nvoid set_source_linear_gradient(vec3 color0, vec3 color1, vec2 p0, vec2 p1) {\n    set_source_linear_gradient(vec4(color0, 1.0), vec4(color1, 1.0), p0, p1);\n}\n\nvoid set_source_radial_gradient(vec4 color0, vec4 color1, vec2 p, float r) {\n    float h = clamp( length(_stack.position.xy - p) / r, 0.0, 1.0 );\n    set_source_rgba(mix(color0, color1, h));\n}\n\nvoid set_source_radial_gradient(vec3 color0, vec3 color1, vec2 p, float r) {\n    set_source_radial_gradient(vec4(color0, 1.0), vec4(color1, 1.0), p, r);\n}\n\nvoid set_source_blend_mode(int mode) {\n    _stack.source_blend = mode;\n}\n\nvec2 length2(vec4 a) {\n    return vec2(length(a.xy),length(a.zw));\n}\n\nvec2 dot2(vec4 a, vec2 b) {\n    return vec2(dot(a.xy,b),dot(a.zw,b));\n}\n\nvoid letter(sampler2D font_texture_source, ivec2 l) {\n  vec2 p = vec2(l);\n  vec3 tx;\n  vec2 ip;\n  float d;\n  int ic;\n  ip = vec2(l);\n  p += clamp(_stack.position.xy, 0.0, 1.0);\n  ic = 0x21 + int (mod (16. + ip.x + 2. * ip.y, 94.));\n  tx = texture (font_texture_source, mod ((vec2 (mod (float (ic), 16.),\n     15. - floor (float (ic) / 16.)) + fract (p)) * (1. / 16.), 1.)).gba - 0.5;\n  d = tx.b + 1. / 256.;\n  add_field(d / min_uniform_scale());\n}\n\nvoid letter(sampler2D font_texture_source, int lx, int ly) {\n    letter(font_texture_source, ivec2(lx,ly));\n}\n\nvoid rounded_rectangle(vec2 o, vec2 s, float r) {\n    s = (s * 0.5);\n    r = min(r, min(s.x, s.y));\n    o += s;\n    s -= r;\n    vec4 d = abs(o.xyxy - _stack.position) - s.xyxy;\n    vec4 dmin = min(d,0.0);\n    vec4 dmax = max(d,0.0);\n    vec2 df = max(dmin.xz, dmin.yw) + length2(dmax);\n    add_field(df - r);\n}\n\nvoid rounded_rectangle(float ox, float oy, float sx, float sy, float r) {\n    rounded_rectangle(vec2(ox,oy), vec2(sx,sy), r);\n}\n\nvoid rectangle(vec2 o, vec2 s) {\n    rounded_rectangle(o, s, 0.0);\n}\n\nvoid rectangle(float ox, float oy, float sx, float sy) {\n    rounded_rectangle(vec2(ox,oy), vec2(sx,sy), 0.0);\n}\n\nvoid circle(vec2 p, float r) {\n    vec4 c = _stack.position - p.xyxy;\n    add_field(vec2(length(c.xy),length(c.zw)) - r);\n}\nvoid circle(float x, float y, float r) { circle(vec2(x,y),r); }\n\n// from https://www.shadertoy.com/view/4sS3zz\nfloat sdEllipse( vec2 p, in vec2 ab )\n{\n\tp = abs( p ); if( p.x > p.y ){ p=p.yx; ab=ab.yx; }\n\t\n\tfloat l = ab.y*ab.y - ab.x*ab.x;\n    if (l == 0.0) {\n        return length(p) - ab.x;\n    }\n\t\n    float m = ab.x*p.x/l; \n\tfloat n = ab.y*p.y/l; \n\tfloat m2 = m*m;\n\tfloat n2 = n*n;\n\t\n    float c = (m2 + n2 - 1.0)/3.0; \n\tfloat c3 = c*c*c;\n\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float p = acos(q/c3)/3.0;\n        float s = cos(p);\n        float t = sin(p)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float u = sign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        float p = ry/sqrt(rm-rx);\n        co = (p + 2.0*g/rm - m)/2.0;\n    }\n\n    float si = sqrt( 1.0 - co*co );\n \n    vec2 r = vec2( ab.x*co, ab.y*si );\n\t\n    return length(r - p ) * sign(p.y-r.y);\n}\n\nvoid ellipse(vec2 p, vec2 r) {\n    vec4 c = _stack.position - p.xyxy;\n    add_field(vec2(sdEllipse(c.xy, r), sdEllipse(c.zw, r)));\n}\n\nvoid ellipse(float x, float y, float rw, float rh) {\n    ellipse(vec2(x,y), vec2(rw, rh));\n}\n\nvoid move_to(vec2 p) {\n    _stack.start_pt = p;\n    _stack.last_pt = p;\n}\n\nvoid move_to(float x, float y) { move_to(vec2(x,y)); }\n\n// stroke only\nvoid line_to(vec2 p) {\n    vec4 pa = _stack.position - _stack.last_pt.xyxy;\n    vec2 ba = p - _stack.last_pt;\n    vec2 h = clamp(dot2(pa, ba)/dot(ba,ba), 0.0, 1.0);\n    vec2 s = sign(pa.xz*ba.y-pa.yw*ba.x);\n    vec2 d = length2(pa - ba.xyxy*h.xxyy);\n    add_field(d);\n    add_clip(d * s);\n    _stack.last_pt = p;\n}\n\nvoid line_to(float x, float y) { line_to(vec2(x,y)); }\n\nvoid close_path() {\n    line_to(_stack.start_pt);\n}\n\n// from https://www.shadertoy.com/view/ltXSDB\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat test_cross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat bezier_sign(vec2 A, vec2 B, vec2 C, vec2 p) {\n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0,\n        step(test_cross(A, B, p) * test_cross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * test_cross(A, C, B);\n}\n\n// Solve cubic equation for roots\nvec3 bezier_solve(float a, float b, float c) {\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) {\n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\n// Find the signed distance from a point to a quadratic bezier curve\nfloat bezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{\n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);\n    vec3 t = clamp(bezier_solve(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis * bezier_sign(A, B, C, p);\n}\n\nvoid curve_to(vec2 b1, vec2 b2) {\n    vec2 shape = vec2(\n        bezier(_stack.last_pt, b1, b2, _stack.position.xy),\n        bezier(_stack.last_pt, b1, b2, _stack.position.zw));\n    add_field(abs(shape));\n    add_clip(shape);\n\t_stack.last_pt = b2;\n}\n\nvoid curve_to(float b1x, float b1y, float b2x, float b2y) {\n    curve_to(vec2(b1x,b1y),vec2(b2x,b2y));\n}\n\nvoid graph(vec2 p, float f_x, float df_x) {\n    add_field(abs(f_x - p.y) / sqrt(1.0 + (df_x * df_x)));\n}\n\nvoid graph(vec2 p, float f_x, vec2 df_x) {\n    add_field(abs(f_x) / length(df_x));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}