{
    "Shader": {
        "info": {
            "date": "1487851989",
            "description": "Playing around with making Mandelbrot fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "4sfyD8",
            "likes": 5,
            "name": "Do the Mandelbrot",
            "published": 3,
            "tags": [
                "fractal",
                "mandlebrot"
            ],
            "usePreview": 0,
            "username": "bio998",
            "viewed": 1323
        },
        "renderpass": [
            {
                "code": "\n//By Benjamin Outram\n//following tutorial at http://blog.demofox.org/2012/09/25/how-to-render-the-mandelbrot-set/\n//also refering to i.q. https://www.shadertoy.com/view/lllGWH\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // this line is from i.q. https://www.shadertoy.com/view/lllGWH\n    vec2 p = vec2(-.745,.186) + 3. * (fragCoord/iResolution.y-.5)*pow(.01,1.+cos(.2*iTime));\n    \n    vec2 z = vec2(0.); //magical mandelbrot complex number\n    \n\tfloat n = 0.; //iteration number\n \n    vec4 col = vec4(0.); //default colour\n\n    for(int i = 0; i < 256; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + p;\n        n ++;\n\n        if(dot(z,z) > 2.)\n        {\n            float f = 20.;\n        \tcol = vec4(sin(n/f),cos(n/f),tan(n/f),1.);\n            break;\n        }\n    }\n    \n\tfragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}