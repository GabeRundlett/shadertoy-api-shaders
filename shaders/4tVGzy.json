{
    "Shader": {
        "info": {
            "date": "1611088405",
            "description": "Generating sound and shapes.",
            "flags": 8,
            "hasliked": 0,
            "id": "4tVGzy",
            "likes": 0,
            "name": "Communion ðŸ”Š",
            "published": 3,
            "tags": [
                "wurst"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float relativeFrameBoderThickness = DimGold*DimGold;\n    vec3 frameBorderColor = vec3(DimGold);\n    \n    float ratio = iResolution.x/iResolution.y;\n    float radius = iResolution.y / 2.;    \n    vec2 center = iResolution.xy / 2.;\n    vec2 distCenter = fragCoord - center;\n    vec2 right = vec2 (1., 0.);\n    \n    float borderThickness = 42.1337;\n    vec3 borderColor = vec3(InvGold, DimGold, InvGold);\n    \n    float scaledTime = iTime * TimeScale;    \n    float angle = angleBetween (right, distCenter);\n    float weightA = abs(fract(scaledTime + 3.0 * scaledTime));\n    float weightB = abs(tan(scaledTime) * cos(scaledTime));\n    float zoom = 123. * abs(0.5*sin(scaledTime)+.5)+250.;\n    \n    float theta = abs(sin(angle)-fract(angle)+cos(angle))/2.;\n    weightA = mix(\n        weightA, weightB,\n        getWeightAlpha(scaledTime)\n    );\n    weightB = mix(\n        weightB, weightA,\n        getWeightAlpha(scaledTime)\n    );\n    float s = shape (theta, weightA, weightB);\n    float r = zoom * s;\n    float d = length (distCenter);\n    float rd = r - d;\n    float rdb = r - d + borderThickness;\n   \n    vec3 shapeColor = vec3(theta, weightA, weightB);\n    vec3 backgroundColor = \n        vec3(DimGold)\n      + DimGold*texture(iChannel0, uv+vec2(scaledTime, sin(scaledTime))).rrr;\n    \n    if (0. < rd) {\n        fragColor = vec4 (shapeColor, 1.0);\n    }\n    else if (0. < rdb) {\n        float broderGradient = rdb / borderThickness;\n        fragColor = vec4(mix(shapeColor, backgroundColor, 1.-broderGradient), 1.);\n    }\n    else {\n        fragColor = vec4 (backgroundColor, 1.);\n    }\n    \n    float borderInlfuence = 0.1;\n    if (uv.x < relativeFrameBoderThickness\n     || uv.y < relativeFrameBoderThickness*ratio) {\n        fragColor = vec4(frameBorderColor, borderInlfuence);\n    }\n    \n    if ((uv.x + relativeFrameBoderThickness) > 1.) {\n        fragColor = vec4(frameBorderColor, borderInlfuence);\n    }\n    if ((uv.y + relativeFrameBoderThickness*ratio) > 1.) {\n        fragColor = vec4(frameBorderColor, borderInlfuence);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415\n\nconst float Gold = (1. + sqrt(5.))/2.;\nconst float InvGold = 1. / Gold;\nconst float OneMinusInvGold = 1. - InvGold;\nconst float DimGold = OneMinusInvGold*OneMinusInvGold;\nconst float TimeScale = InvGold;\n\nfloat getWeightAlpha(float t) {\n    return (fract(t)+cos(t))/2.;\n}\n\nfloat shape (float theta, float weightA, float weightB) {\n    float offset = PI / 3.0;\n    return cos(theta + offset * weightA) * sin (theta + offset * weightB);\n}\n\nfloat angleBetween (vec2 a, vec2 b) {\n    float cosTheta = dot (a, b) / (length (a) * length (b));\n    \n    return acos (cosTheta);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{    \n    float angle = float(samp);\n    float scaledTime = time * TimeScale;\n    \n    float weightA = abs(fract(scaledTime + 3.0 * scaledTime));\n    float weightB = abs(tan(scaledTime) * fract(scaledTime));\n    float zoom = 2. * abs(0.5*sin(scaledTime)+.5)+5.;\n    \n    float s = shape (abs(tan(angle)), weightA, weightB);\n    float r = zoom * s;\n    \n    vec2 k = mix(\n        vec2( weightB, weightA ),\n        vec2( weightA, weightB ),\n        getWeightAlpha(scaledTime)\n    );\n    \n    return 2.*abs(cos(scaledTime)) * mix(k, s * k, zoom);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}