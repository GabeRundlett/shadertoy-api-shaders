{
    "Shader": {
        "info": {
            "date": "1617422308",
            "description": "rotate house",
            "flags": 0,
            "hasliked": 0,
            "id": "fsjGDW",
            "likes": 2,
            "name": "rotate house",
            "published": 3,
            "tags": [
                "rotatehouse"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "//por jfp\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\n//Constants\nconst float tau = atan(1.0)*8.0;\nconst float pi = atan(1.0)*4.0;\n\n\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat line(in vec2 p, in vec2 a, in vec2 b, in float thick)\n{\n    return 1.-smoothstep(thick - 1.5/iResolution.y, thick, sdSegment(p,a,b));   \n}\n\nconst int N1 =6;\n\n\nvec2 pt1[6]=vec2[](vec2(.4,.2),vec2(.8,.2),vec2(.8,.5),vec2(.6,.7),vec2(.4,.5),\nvec2(.4,.2));\n\nfloat sdPolygonA( in vec2 p, in vec2[N1] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nvec3 LineasCuadriculado(vec2 p, vec3 col)\n{\n    \n    vec2 a1=vec2(0.0,-1.5);\n    vec2 b1=vec2(0.0,1.5);\n  \n    vec2 a2=vec2(-2.0, 0.0);\n    vec2 b2=vec2( 2.0, 0.0);\n    \n    float thick = 3./iResolution.y;\n    \n    float ds2= line(p, a1, b1, thick);  //vertical\n    float ds3= line(p, a2, b2, thick);  //horizontal\n    col = mix(col,vec3(0.0, 0.0,0.0)*1.2,ds2);\n    col = mix(col,vec3(0.0, 0.0,0.0)*1.2,ds3);\n    return col;\n}   \n\n\nvec2 RotarPuntoPivote(vec2 p,vec2 pXrYr, float theta)\n{\n     vec2 pp=p;\n     vec2 pos=pXrYr;\n     pp=pp-pos;\n     pp.xy = rotatev2(pp.xy, theta);\n     pp=pp+pos;   \n     return pp;\n}    \n\nvec3 casa1(vec2 p, vec3 col )\n{\n    float xr=pt1[5].x;\n    float yr=pt1[5].y;\n    vec2 tmp2;\n    \n    \n    float dc1= sdCircle(  p-vec2(xr, yr), 0.02 );\n    float dc2= sdCircle(  p-vec2(0, 0), 0.02 );\n   \n    \n     vec2 pp=p;\n    \n    p= RotarPuntoPivote(pp,vec2(xr,yr),iTime);\n    \n    float d1 = sdPolygonA(p, pt1);\n    \n    col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(d1,0.0));\n    col = mix(col,vec3(1.0, 0.0,0.0)*1.2,S(dc1,0.0));\n    col = mix(col,vec3(1.0, 0.0,1.0)*1.2,S(dc2,0.0));\n    \n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 p=uv;\n    \n\n    vec3 col=vec3(0.65);\n    col= LineasCuadriculado(p, col);\n    col= casa1( p,  col );\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}