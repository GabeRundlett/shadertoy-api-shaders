{
    "Shader": {
        "info": {
            "date": "1533306264",
            "description": "random splat with linear fall-off.       SPACE: discs on/off   \nLeft: simple weight normalization. Right: with variance renormalization.\n\nJust done to make a figure ;-) \nBetter see [url]https://www.shadertoy.com/results?query=contrast-corrected[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "lttyR2",
            "likes": 8,
            "name": "texture bombing vs normalization",
            "published": 3,
            "tags": [
                "texture",
                "blend",
                "splat",
                "variance",
                "normalization"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1021
        },
        "renderpass": [
            {
                "code": "// To use a custom texture (must be stored on a legit website !):\n// open JS console ( F12 or ctrl-shift-I ) and copy-paste + ENTER:\n//     gShaderToy.SetTexture(0, {mSrc:'https://i.imgur.com/s4eTXBN.jpg',mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\n#define J 1.       // jittering amount in the grid ( splats center )\n//#define J mat2(cos( iTime + vec4(0,33,11,0))) // variant: animated splats \n#define dens 1.    // splat density \n#define BLEND 1    // blend function  0: simple mask  1: linear fading\n\nfloat NORM = 1.,   // normalize: 0: no  1: sum(weights) 2:  variance normalization\n    B_DISC = 1.,   // show bounding circles\n         r = .5;   // splat radius\n\nvec2 R;\nvec4 m = vec4(0);  // mean texture value\n\n#define S(v)     smoothstep(4./R.y,0.,v)\n#define hash(p)  fract(sin( dot( p, vec2(12.9898, 78.233)) ) * 43758.5453)\n#define hash2(p) fract(sin( (p) * mat2(127.1,311.7, 269.5,183.3) )*43758.5453123)\n#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\n\nvec4 splat(vec2 U, float r) { // --- splat a texture patch\n    float d = 1. - length(U)/r;\n    return   ( texture(iChannel0, U) - m )             // texture\n#if BLEND\n             * max(0.,d)                               // blend kernel: linear\n#else \n             * step(d,1.)                              //               mask\n#endif\n           + B_DISC * vec4(vec3(1.*S(abs(d*r))),S(abs(d*r)*.8)); // bounding circle\n}\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    R = iResolution.xy;\n    \n    if keyToggle(32) B_DISC = 1.-B_DISC;               // set param B_DISC & NORM\n    NORM = U.x<R.x/2. ? 1. : 2.;  \n    if (U.x-.5==R.x/2.) { O.g++; return; }        \n    if (NORM == 2.)                                    // contrast normalization requires centering\n        m.rgb = texture(iChannel0, vec2(.5), 99. ).rgb;// mean texture value\n\n    U = ( U+U - R ) / R.y;\n    O -= O;  \n    vec4 T; float w = 0.;\n    \n#define blend(S) O += T = S; w += T.a * T.a;           // blend splat\n    \n#if 0    // --- illustration with 3 tiles\n    \n    U.x += .3;\n    blend( splat( U, r )); \n# if 0                      // on grid\n    blend( splat( U - r*vec2(1,0), r ) );\n    blend( splat( U - r*vec2(.5,-sqrt(3.)/2.), r ) );\n# else                      // random\n    blend( splat( U - vec2(.6,.4), r ) );\n    blend( splat( U - vec2(.4,-.3), r ) );\n#  endif    \n    \n#else    // --- illustration with jittered splats\n    \n    r *= 2.; U *= 2./r;            // consider a grid normalized to cell=1\n    for (int k=0; k<9; k++) {      // do jittered splats\n        vec2 D = floor(U) + vec2(k%3-1,k/3-1), // contrib of neighbor cells\n             P = D + .5 + J * (hash2(D)-.5); // random offset in cell\n        if (hash(D) < dens ) {\n        //O += smoothstep(4./R.y,0.,length(U-P)*r-.02 ); // show splat center\n          blend( splat( (U-P)*r, r ) ); \n        }\n    }\n#endif    \n\n    if      (NORM == 1.) O /= O.a;              // linear normalization\n    else if (NORM == 2.) O = m +  .7*O/sqrt(w); // contrast normalization\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}