{
    "Shader": {
        "info": {
            "date": "1701200662",
            "description": "Learning how mandelbulb works.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctdfDH",
            "likes": 0,
            "name": "Fork Mandelbulb Nov2023",
            "published": 3,
            "tags": [
                "mandelbrot",
                "sdf",
                "mandelbulb"
            ],
            "usePreview": 0,
            "username": "amaxwell",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "// refactored from https://www.shadertoy.com/view/dltBzM\n\nconst int bulbIterations = 4;\n\nfloat mandelbulbSDF(vec3 position) {\n    float bulbPower = 4.0 + iTime / 100.0;\n    vec3 z = position;\n    float dr = 1.0;\n    float radius = 0.0;\n\n    for (int i = 0; i < bulbIterations; i++) {\n        radius = length(z);\n        if (radius > 2.0) break;\n\n        float theta = acos(z.z / radius) * bulbPower;\n        float phi = atan(z.y, z.x) * bulbPower;\n        dr = pow(radius, bulbPower - 1.0) * bulbPower * dr + 1.0;\n        z = position + pow(radius, bulbPower) * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));\n    }\n    return 0.5 * log(radius) * radius / dr;\n}\n\nvec3 rotate(vec3 vector, vec2 angle) {\n    vector.yz = cos(angle.y) * vector.yz + sin(angle.y) * vec2(-1, 1) * vector.zy;\n    vector.xz = cos(angle.x) * vector.xz + sin(angle.x) * vec2(-1, 1) * vector.zx;\n    return vector;\n}\n\nvec3 rayMarch(vec2 fragCoord, vec2 angle) {\n    vec3 rayDirection = rotate(normalize(vec3((fragCoord - iResolution.xy * 0.5) / iResolution.x, 1)), angle);\n    vec3 startPosition = rotate(vec3(0, 0, -3), angle);\n    for (int i = 0; i < 128; i++) {\n        float distance = mandelbulbSDF(startPosition);\n        if (distance < 0.001) break;\n        startPosition += rayDirection * distance;\n    }\n    return startPosition;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 angle = (0.5 - iMouse.xy / iResolution.xy) * 5.0;\n    vec3 position = rayMarch(fragCoord, angle);\n\n    const vec2 ep = vec2(1, -1) * 0.000001;\n    vec3 normal = normalize(ep.xyy * mandelbulbSDF(position + ep.xyy) + \n                            ep.yyx * mandelbulbSDF(position + ep.yyx) + \n                            ep.yxy * mandelbulbSDF(position + ep.yxy) + \n                            ep.xxx * mandelbulbSDF(position + ep.xxx));\n\n    vec3 ambientLight = vec3(sin(normal.x), sin(normal.y), sin(normal.z));\n    vec3 lightDirection = normalize(rotate(vec3(0, 0, -3), angle) - position);\n    float lightIntensity = max(dot(normal, -lightDirection), dot(normal, lightDirection));\n\n    fragColor.rgb = 0.7 * lightIntensity + pow(lightIntensity, 128.0) + ambientLight * 0.3;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}