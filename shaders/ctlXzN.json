{
    "Shader": {
        "info": {
            "date": "1674414773",
            "description": "CC0: Torus loop\n Saw some sweet twitter art again with torus that kept folding in on itself\n Tried something similar",
            "flags": 0,
            "hasliked": 0,
            "id": "ctlXzN",
            "likes": 45,
            "name": "Torus loop",
            "published": 3,
            "tags": [
                "torus"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "// CC0: Torus loop\n//  Saw some sweet twitter art again with torus that kept folding in on itself\n//  Tried something similar\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  22.0\n#define MAX_RAY_MARCHES 60\n#define NORM_OFF        0.001\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff      = 0.0;\nconst vec3 skyCol     = HSV2RGB(vec3(hoff+0.57, 0.70, 0.25));\nconst vec3 glowCol    = HSV2RGB(vec3(hoff+0.025, 0.85, 0.5));\nconst vec3 sunCol1    = HSV2RGB(vec3(hoff+0.60, 0.50, 0.5));\nconst vec3 sunCol2    = HSV2RGB(vec3(hoff+0.05, 0.75, 25.0));\nconst vec3 diffCol    = HSV2RGB(vec3(hoff+0.60, 0.75, 0.25));\nconst vec3 sunDir1    = normalize(vec3(3., 3.0, -7.0));\n\nmat3  g_rot   ;\nfloat g_anim  ;\nmat2  g_rot_yx;\nmat2  g_rot_xz;\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nmat3 rot_z(float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat3(\n      c,s,0\n    ,-s,c,0\n    , 0,0,1\n    );\n}\n\nmat3 rot_y(float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat3(\n      c,0,s\n    , 0,1,0\n    ,-s,0,c\n    );\n}\n\nmat3 rot_x(float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat3(\n      1, 0,0\n    , 0, c,s\n    , 0,-s,c\n    );\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat torus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat df(vec3 p) {\n  const float zz  = 6.0;\n\n  const float r0  = 2.0-0.5;\n  const float r1  = r0/zz;\n  const float r2  = r1/zz;\n  const float r3  = r2/zz;\n\n  float anim  = g_anim;\n  float angle = anim*PI;\n  float z = mix(zz, 1.0, anim); \n\n  vec3 p0 = p;\n  p0 *= g_rot;\n  p0.yz *= g_rot_yx;\n  p0.x -= mix(r0*zz, 0.0, anim);\n  p0 /= z;\n \n  vec3 p1 = p0;\n\n  p1.z = abs(p1.z);\n  p1.xz *= g_rot_xz;\n\n  vec3 p2 = p1;\n  p2.z = abs(p2.z);\n  p2.z -= r0;\n  p2 = p2.zxy;\n\n  vec3 p3 = p0;\n  \n  float rr = mix(r3, 0.0, anim);\n  float d0 = torus(p0, vec2(r0, r1+rr));\n  d0 = abs(d0) - r2;\n  float d1 = p1.x;\n  float d2 = torus(p2, vec2(r1, r2+rr));\n  float d3 = p3.x;\n  \n  float d = d0;\n  d = max(d, d1);\n  d = min(d, d2);\n  if (angle < PI/4.0) d = max(d, d3);\n  if (angle > (TAU-PI/4.0)) d = max(d, -d3);\n  return d*z;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out vec3 gcol) {\n  float t = 0.0;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  vec3 gc = vec3(0.0);\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    gc += (0.0125*glowCol)/d;\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n  gcol = gc;\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  return t;\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  float sd = max(dot(sunDir1, rd), 0.0);\n  float sf = 1.0001-sd;\n  col += clamp(vec3(0.0025/abs(rd.y))*glowCol, 0.0, 1.0);\n  col += 0.75*skyCol*pow((1.0-abs(rd.y)), 8.0);\n  col += 2.0*sunCol1*pow(sd, 100.0);\n  col += sunCol2*pow(sd, 800.0);\n\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -6.0));\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n    col += 0.25*sqrt(skyCol)*max(-db, 0.0);\n  }\n\n  return clamp(col, 0.0, 10.0);;\n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  vec3 gcol;\n  int iter;\n  float t = rayMarch(ro, rd, gcol);\n  vec3 col = render0(ro, rd);\n\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  vec3 r = reflect(rd, n);\n  float fre = 1.0+dot(rd, n);\n  fre *= fre;\n  float dif = dot(sunDir1, n); \n\n  if (t < MAX_RAY_LENGTH) {\n    col = vec3(0.0);\n    col += sunCol1*dif*dif*diffCol*0.25;\n    col += mix(0.33, 1.0, fre)*render0(p, r);\n  } else {\n    col += gcol;\n  }\n\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  float tm  = TIME*0.5+10.0;\n  g_rot     = rot_x(0.11*tm)*rot_y(0.23*tm)*rot_z(0.35*tm);\n  g_anim    = (0.5+0.5*sin(fract(0.1*TIME)*PI-PI/2.0));\n  g_rot_yx  = ROT(g_anim*(PI*0.5));\n  g_rot_xz  = ROT(PI/2.0-g_anim*PI);\n  \n  \n  vec3 ro = 2.0*vec3(5.0, 1.0, 0.);\n  ro.xz *= ROT(-0.1*tm);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render1(ro, rd);\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p);\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = aces_approx(col); \n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}