{
    "Shader": {
        "info": {
            "date": "1367111583",
            "description": "Here are two things I've been thinking should somehow be useful for visualizing sound, that I've never managed to work out how to actually make properly cool-looking.\n\nSee source code comments for further information, this text box is too small.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsXGDn",
            "likes": 8,
            "name": "Visualization Experiment #1",
            "published": 3,
            "tags": [
                "music",
                "experiment"
            ],
            "usePreview": 0,
            "username": "WAHa_06x36",
            "viewed": 1201
        },
        "renderpass": [
            {
                "code": "/*\n\nGLSL is the absolutely worst medium for rendering this,\nbut Shadertoy seemed like a good place to find people who\nmight have ideas about this.\n\nOn the left is a return diagram. It is an X-Y plot of a\nfunction against itself at a constant offset. The offset is\na tunable parameter. If it is set to one fourth of the\nperiod of a certain frequency, then waves at that frequency\nwill cause the diagram to draw circles. Other frequencies\nwill cause some kind of ellipses.\n\nOn the right is a phase space diagram of the signal. It is\nan X-Y plot of the signal against its differential. The\nscaling factor applied to the differential is a sort of\ntunable paramater too, which again allows you to choose one\nfrequency to form perfect circles.\n\nThese both draw kind of neat patterns, but not really neat\nenough to work as visualization. How could this be improved?\n(You'd probably have to do it in something other than a single\nshader, though, to be able to draw more points, or lines.\nHaving access to more of the signal might also be a good thing.)\n\n*/\n\n#define ReturnTuning 0.13636\n#define PhaseScaling 2.0\n#define PointSmallness 100.0\n#define NumSamples 400\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos=(2.0*fragCoord.xy-iResolution.xy)/min(iResolution.x,iResolution.y);\n\n\tfloat c=0.0;\n\tfor(int i=0;i<NumSamples;i++)\n\t{\n\t\tfloat x=float(i)/float(NumSamples);\n\t\tfloat s1=(texture(iChannel0,vec2(x,1.0)).x-0.5)*2.0;\n\t\tfloat s2=(texture(iChannel0,vec2(fract(x-ReturnTuning),1.0)).x-0.5)*2.0;\n\t\tfloat s3=PhaseScaling*(texture(iChannel0,vec2(fract(x+0.01),1.0)).x-texture(iChannel0,vec2(fract(x-0.01),1.0)).x);\n\n\t\tvec2 dist1=pos-vec2(s1-0.8,s2);\n\t\tc+=exp(-dot(dist1,dist1)*PointSmallness*PointSmallness);\n\n\t\tvec2 dist2=pos-vec2(s1+0.8,s3);\n\t\tc+=exp(-dot(dist2,dist2)*PointSmallness*PointSmallness);\n\t}\n\n\tfragColor=vec4(vec3(c),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}