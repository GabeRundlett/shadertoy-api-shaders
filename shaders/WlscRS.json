{
    "Shader": {
        "info": {
            "date": "1592363476",
            "description": "initially made on evvvvil's stream and improved upon later\n\noriginal is here (warning, long compile time) https://www.shadertoy.com/view/3lsyRS",
            "flags": 0,
            "hasliked": 0,
            "id": "WlscRS",
            "likes": 29,
            "name": "Mysterious Hole",
            "published": 3,
            "tags": [
                "mysterious"
            ],
            "usePreview": 1,
            "username": "blackle",
            "viewed": 566
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat linedist(vec3 p, vec3 a, vec3 b) {\n    float k = dot(p-a,b-a)/dot(b-a,b-a);\n    return distance(p,mix(a,b,clamp(k,0.,1.)));\n}\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n    float k = dot(p-a,b-a)/dot(b-a,b-a);\n    return distance(p,mix(a,b,clamp(k,0.,1.)));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(ax,p)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nvec4 wrot(vec4 p) {\n    return vec4(dot(p,vec4(1)), p.yzw + p.zwy - p.wyz - p.xxx)/2.;\n}\n\nfloat smin(float a, float b, float k) {\n    float h = max(0.,k-abs(b-a))/k;\n    return min(a,b)-h*h*h*k/6.;\n}\n\nvec4 gated_domain(vec4 p, float scale, bool gated) {\n    if (!gated) {\n        p.xyz = abs(p.xyz);\n        if (p.x > p.y) p.yx = p.xy;\n        if (p.y > p.z) p.yz = p.zy;\n        if (p.x > p.y) p.yx = p.xy;\n        p.z -= scale;\n    }\n    return p;\n}\n\n#define FK(k) floatBitsToInt(k)^floatBitsToInt(cos(k))\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x-y)*(y*y+x)+x)/2.14e9*.5+.5;\n}\n\nfloat cube(vec4 p, vec4 d) {\n    vec4 q = abs(p)-d;\n    return length(max(q,0.)) + min(0.,max(max(q.x,q.y),max(q.z,q.w)));\n}\n\nfloat cmp(vec4 p) {\n    float scale = 1.7;\n    vec4 id = floor(p/scale);\n    p.xyz = (fract(p.xyz/scale)-0.5)*scale;\n    float hs = hash(hash(id.x,id.y),id.z);\n    p = gated_domain(p, scale, hs<0.4);\n    float h2 = hash(hs,hs);\n    \n    p = wrot(p);\n    p =abs(p);\n    p = wrot(p);\n    p = mix(p,wrot(p),h2*h2*h2);\n\n    return cube(p,vec4(0.4))-.1;\n}\n\nfloat t;\nfloat fdobjs(vec4 p) {\n    p.xyz = erot(p.xyz, vec3(1,0,0),0.9);\n    p.xwz = erot(p.xwz, vec3(0,1,0),0.6);\n    p.ywz = erot(p.ywz, vec3(0,1,0),0.9);\n    return cmp(p);\n}\n\nfloat rocks(vec3 p, float d) {\n    vec4 cds = vec4(p,d+.1);\n    float objs = fdobjs(cds)/sqrt(2.);\n    p = erot(p, vec3(1,0,0),0.3);\n    cds = vec4(p,d+.05);\n    float objs2 = fdobjs(cds*3.)/3.;\n    p = erot(p, vec3(0,1,0),0.5);\n    cds = vec4(p,d+.02);\n    float objs3 = fdobjs(cds*6.)/6.;\n    return min(objs,min(objs2,objs3));\n}\nfloat barf;\nfloat rox;\nfloat scene(vec3 p) {\n    float hills = texture(iChannel0, p.xy).x*.1 + sin(2.*dot(sin(p.xy/2.), cos(p.xy*2.)))*3.;\n    p.z += hills*.04;\n    vec2 holcrds = vec2(length(p.xy),p.z);\n    float h1 = linedist(holcrds, vec2(1,0), vec2(200,10))-.2;\n    float h2 = linedist(holcrds, vec2(1,0), vec2(1,-100))-.2;\n    float gnd = min(h1,h2);\n    rox = rocks(p,h1);\n    barf = rocks(p*1.5+vec3(0,0,-t/3.),length(p.xy*1.5))/1.5;\n    return min(gnd,min(rox,barf));\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.01);\n    return normalize(scene(p)-vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat bayer(ivec2 uv) {\n    return texelFetch(iChannel2, uv % 8, 0).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float b = bayer(ivec2(fragCoord));\n\n    t = iTime;\n    vec3 cam = normalize(vec3(1,uv));\n    vec3 init = vec3(-4,0,.6);\n    cam = erot(cam, vec3(0,1,0), sin(t*.2)*.2+0.6);\n    init = erot(init, vec3(0,1,0), sin(t*.2)*.2+0.6);\n    cam = erot(cam, vec3(0,0,1), t*.1);\n    init = erot(init, vec3(0,0,1), t*.1);\n    vec3 p = init;\n    bool hit = false;\n    float fog = 0.;\n    float glow = 0.;\n    float dist;\n    for (int i = 0; i <100 && !hit; i++ ) {\n        dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=cam*dist;\n        if (distance(p,init)>10.)break;\n    }\n    if (!hit) p = init+cam*10.;\n    bool bf = barf == dist;\n    bool rx = rox == dist;\n    float dst = distance(p,init);\n\tfor (int i = 0; i < 16; i++) {\n        vec3 k = mix(init, p, (float(i)+b/2.)/15.);\n        scene(k);\n     \tfloat fogdensity = texture(iChannel1, k/12.+texture(iChannel1, k/20.).x/20.+t/100.).x;\n       \tfog += fogdensity*dst/80.;\n       \tglow += fogdensity*dst/15./(1.+barf*barf*70.);\n    }\n    float tx = smoothstep(0.6,.3,texture(iChannel0, p.xy).x);\n    fog = smoothstep(0.,1.,fog);\n\n    vec3 ldir = normalize(vec3(0,0,1.5+asin(sin(t))*.2)-p);\n    vec3 ax = normalize(cross(ldir,normalize(vec3(1))));\n    float ro = acos(dot(ldir,normalize(vec3(1))));\n\n    vec3 n = norm(p);\n    vec3 r =reflect(cam,n);\n    float ao = smoothstep(-.1,.1,scene(p+n*.1));\n    float ss = pow(smoothstep(-.1,.1,scene(p+ldir*.1)),5.);\n    float diff = ss*smoothstep(-1.,0.2,p.z);\n    r = erot(r, ax,ro);\n    float spec = length(sin(r*2.5)*.5+.5)/sqrt(3.);\n    float fres = 1.-abs(dot(cam,n))*.98;\n    float specpow = mix(3.,6.,tx*(rx?0.5:1.));\n    vec3 matcol = mix(vec3(0.12,0.08,0.07), vec3(0.05,0.04,0.03), smoothstep(1.5,.9,length(p.xy)));\n    if (rx) matcol = vec3(0.05,0.04,0.04);\n    vec3 col = matcol*diff*ao + pow(spec,specpow)*fres*ao*.4;\n    if (bf) col = vec3(spec*.5+.5)*vec3(1.,1.1,1.3);\n    col = erot(col, n.xzy, 0.1);\n\n    fragColor.xyz=hit?col*ao:vec3(0.02);\n    fragColor.xyz = mix(fragColor.xyz, vec3(.17,.18,.19)*smoothstep(-6.,0.,p.z), fog)+glow;\n    fragColor.xyz = sqrt(fragColor.xyz);\n    fragColor.xyz = smoothstep(vec3(0),vec3(1),fragColor.xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}