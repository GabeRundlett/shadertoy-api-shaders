{
    "Shader": {
        "info": {
            "date": "1707827948",
            "description": "Simple Fire border based on gaussian blur",
            "flags": 0,
            "hasliked": 0,
            "id": "MXfGzs",
            "likes": 1,
            "name": "Fire Border",
            "published": 3,
            "tags": [
                "fireborder"
            ],
            "usePreview": 0,
            "username": "Drovyng",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "float samples = 30.0;\nfloat size = 1.5;\n\nuniform vec2 resolution;\n#define timeScale \t\t\tiTime * 1.0\n#define fireMovement \t\tvec2(-0.01, -0.5)\n#define distortionMovement\tvec2(-0.01, -0.3)\n#define normalStrength\t\t40.0\n#define distortionStrength\t0.1\nvec2 hash( vec2 p ) {\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p) * 43758.5453123);\n}\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y) * K1 );\n\n    vec2 a = p - i + (i.x+i.y) * K2;\n    vec2 o = step(a.yx,a.xy);\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n}\nfloat fbm ( in vec2 p ) {\n    float f = 0.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise(p); p = m*p;\n    f += 0.2500*noise(p); p = m*p;\n    f += 0.1250*noise(p); p = m*p;\n    f += 0.0625*noise(p); p = m*p;\n    f = 0.5 + 0.5 * f;\n    return f;\n}\nvec3 bumpMap(vec2 uv) {\n    vec2 s = 1. / vec2(0.0);\n    float p =  fbm(uv);\n    float h1 = fbm(uv + s * vec2(1., 0));\n    float v1 = fbm(uv + s * vec2(0, 1.));\n\n   \tvec2 xy = (p - vec2(h1, v1)) * normalStrength;\n    return vec3(xy + .5, 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float alphaDiff = 0.0;\n    \n    for (float x = 0.0; x < samples; ++x){\n    \n        for (float y = 0.0; y < samples; ++y){\n    \n            vec2 added = vec2((x - samples / 2.0), (y - samples / 1.75) * 3.0) * size / iResolution.xy;\n\n            alphaDiff += texture(iChannel0, uv + added).a;\n        };\n    }\n    alphaDiff /= samples;\n    alphaDiff /= samples;\n    \n    vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * timeScale);\n    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);\n    uv += displacement;\n\n    vec2 uvT = (uv * vec2(1.0, 0.5)) + fireMovement * timeScale;\n    float n = pow(fbm(8.0 * uvT), 1.0);\n\n    float gradient = pow(1.0 - uv.y, 2.0) * 5.;\n    float finalNoise = n * gradient;\n    \n    // Time varying pixel color\n    vec4 col1 = texture(iChannel0, uv);\n    \n    vec4 col2 = vec4(0.,0.,0., 1.0) * finalNoise * alphaDiff * n;\n    col2 = vec4(1.0, 0.5, 0.25, 1.0) * col2.a;\n    \n    col1 *= col1.a;\n    col2 *= 1.0 - col1.a;\n    //col1 *= col1.a;\n    \n   \n    fragColor = vec4(max(col1.r, col2.r), max(col1.g, col2.g), max(col1.b, col2.b), min(col1.a + col2.a, 1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}