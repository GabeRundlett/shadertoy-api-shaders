{
    "Shader": {
        "info": {
            "date": "1647947049",
            "description": "Ink splatter\n\nTried to recreate this effect:\nhttps://www.youtube.com/watch?v=mI1fhT2IMMU\n\nTechniques picked from this tutorial\n(Regarding seamless radial noise)\nhttps://www.youtube.com/watch?v=JYbgjCR8PMI\n\nCodes: https://www.shadertoy.com/view/Md33zB",
            "flags": 0,
            "hasliked": 0,
            "id": "NtscDH",
            "likes": 9,
            "name": "Fork Ink Splatt elvi5tim 034",
            "published": 3,
            "tags": [
                "ink",
                "paper",
                "splatter",
                "reveal"
            ],
            "usePreview": 0,
            "username": "elvi5tim",
            "viewed": 396
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/Md33zB\n// 3D simplex noise from: https://www.shadertoy.com/view/XsX3zB\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t vec4 w, d;\n\t \n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t w = max(0.6 - w, 0.0);\n\t \n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t return dot(d, vec4(52.0));\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f = 0.0;\t\n\tfloat frequency = 1.0;\n\tfloat amplitude = 0.5;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tf += simplex3d(p * frequency) * amplitude;\n\t\tamplitude *= 0.5;\n\t\tfrequency *= 2.0 + float(i) / 100.0;\n\t}\n\treturn min(f, 1.0);\n}\n\nfloat random (in vec2 st) \n{ \n    return fract(sin(dot(st.xy,vec2(12.9798,78.323)))* 43858.5563313);\n}\n\n// -----------------------------------------------------------------------------\n\n// Recreating the effect from After Effects\nvec2 rectToPolar(vec2 p, vec2 ms) {\n\tp -= ms / 2.0;\n\tconst float PI = 3.1415926534;\n\tfloat r = length(p);\n\tfloat a = ((atan(p.y, p.x) / PI) * 0.5 + 0.5) * ms.x;\n\treturn vec2(a, r);\t\n}\n\n// A line as mask, with 'f' as feather\nfloat line(float v, float from, float to, float f)\n{\n\tfloat d = max(from - v, v - to);\n\treturn 1.0 - smoothstep(0.0, f, d);\n}\n\n// -----------------------------------------------------------------------------\n\nfloat effect(vec2 p, float o) {\n    \n    p *= 2.0;\n    \n    //float f1 = fbm(vec3(p * vec2(13.0, 1.0) + 100.0 + vec2(0.0, o), iTime * .005) ) * 0.5;\n    float f1 = simplex3d(vec3(p * vec2(1.0, 5.0), iTime * 0.05) ) * 0.5 + 0.5;\n    \n \tfloat e = fbm(vec3(p * vec2(15.0, 1.0) + vec2(f1 * 0.85, o), iTime * .005));\n    \n    e = abs(e) * sqrt(p.y / 5.0);\n    \n    float c2 = simplex3d(vec3(p * vec2(6.0, 2.0), iTime * 0.05));\n    \n    c2 = (c2 * 0.5) + 0.5;\n    c2 *= 0.5; //sqrt(p.y / 5.0);\n    \n    e += c2;\n    \n    return e * 0.5;\n}\n\n// ShockWave technique\nfloat sw(vec2 p, vec2 ms) {\n\t\t\n\tp = rectToPolar(p, ms);\n\t\n\t// Offset it on the x\n\tp.x = mod(p.x + 0.5, ms.x);\n\t\n\t// Create the seem mask at that offset\n\tconst float b = 0.5;\n\tconst float d = 0.04;\n\tfloat seem = line(p.x, -1.0, d, b) + line(p.x, ms.x - d, ms.x + 1.0, b);\n\tseem = min(seem, 1.0);\n\t\n\tfloat s1 = effect(p, 0.0);\n\t\n\t// Create another noise to fade to, but the seem has the be at a different position\n\tp.x = mod(p.x + 0.6, ms.x);\n\tfloat s2 = effect(p, -1020.0);\n\t\n\t// Blend them together\n\tfloat s = s1;\n\ts = mix(s1, s2, seem);\n\t\n\t//float m = line(p.y, -0.1, 0.2 + s * 0.9, 0.2);\n    \n    float perc = min( max(abs(sin(iTime * 0.1)), iTime * 0.1), 1.0);\n    //float perc = 0.8;\n    \n    float f1 = perc * 0.25;\n    float f2 = perc * 1.;\n    \n    float m = line(p.y, -0.1, f1 + s * f2, 0.2);\n\t\n\treturn smoothstep(0.31, 0.6, m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.yy;\n    \n    float m = iResolution.x / iResolution.y;\n\tvec2 ms = vec2(m, 1.0);\n     \n    float c = 0.0;\n    \n    float s = sw(p, ms);\n    c += s;\n    \n    float t = random(p * 4.0);\n        \n    float shade = fbm(vec3(p * 3.0, iTime * 0.1) ) * 0.5 + 0.5;\n    \n    shade = sqrt( pow(shade * 0.8, 5.5) );\n    \n    vec3 pic = vec3(shade); // * texture(iChannel0, fragCoord.xy / iResolution.xy).rgb;\n   \tvec3 col = mix(vec3(0.95, 0.96, 0.8), pic, c); \n    \n    // Some grain\n    col -= (1.0 - s) * t * 0.04;\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}