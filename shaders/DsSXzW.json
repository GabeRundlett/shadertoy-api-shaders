{
    "Shader": {
        "info": {
            "date": "1669942964",
            "description": "So ChatGPT can generate Shadertoy Shaders! This one does not work... yet... :P\nSimple shadertoy shader that does a raymarching of a red sphere on top of a checkerboard with reflections\nGenerated with ChatGPT 2022-12-02\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DsSXzW",
            "likes": 3,
            "name": "OpenAI ChatGPT raymarching",
            "published": 3,
            "tags": [
                "chatgpt"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 336
        },
        "renderpass": [
            {
                "code": "// So OpenAI ChatGPT can generate Shadertoy Shaders!\n// This one does not work... yet... :P\n//\n// Simple shadertoy shader that does a raymarching of a red sphere on top of a checkerboard with reflections\n//\n// Generated with ChatGPT 2022-12-02\n\n\n// Raymarch the scene\nvec3 raymarch(vec3 dir, vec3 spherePos, float sphereRadius)\n{\n    // Initialize raymarching variables\n    vec3 pos = vec3(0.0, 0.0, 0.0);\n    float dist = 0.0;\n    float minDist = 0.001;\n\n    // Max number of iterations\n    int maxIter = 64;\n\n    // Raymarch loop\n    for (int i = 0; i < maxIter; i++)\n    {\n        // Get distance to sphere\n        dist = distance(pos, spherePos) - sphereRadius;\n\n        // Stop raymarching if minimum distance is reached\n        if (dist < minDist)\n            break;\n\n        // Advance ray position\n        pos += dir * dist;\n    }\n\n    // Return final ray position\n    return pos;\n}\n\n// Compute checkerboard color at a given position\nvec3 getCheckerColor(vec2 pos, vec3 color1, vec3 color2)\n{\n    // Compute checkerboard pattern\n    float checker = mod(floor(pos.x) + floor(pos.y), 2.0);\n\n    // Blend checkerboard colors\n    vec3 color = mix(color1, color2, checker);\n\n    // Return checkerboard color\n    return color;\n}\n\n// Compute normal at a given position on the sphere\nvec3 getNormal(vec3 pos, vec3 spherePos, float sphereRadius)\n{\n    // Compute normal\n    vec3 norm = normalize(pos - spherePos);\n\n    // Return normal\n    return norm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Camera ray direction\n    vec3 dir = normalize(vec3(uv, 1.0));\n\n    // Sphere position and radius\n    vec3 spherePos = vec3(0.0, 0.0, 2.0);\n    float sphereRadius = 0.5;\n\n    // Raymarch the scene\n    vec3 hitPos = raymarch(dir, spherePos, sphereRadius);\n    vec3 hitNorm = getNormal(hitPos, spherePos, sphereRadius);\n\n    // Compute checkerboard color\n    vec3 checkerColor1 = vec3(0.9, 0.9, 0.9);\n    vec3 checkerColor2 = vec3(0.1, 0.1, 0.1);\n    vec3 checkerColor = getCheckerColor(hitPos.xz, checkerColor1, checkerColor2);\n\n    // Compute reflection direction\n    vec3 reflDir = reflect(dir, hitNorm);\n\n    // Raymarch the reflection\n    vec3 reflHitPos = raymarch(reflDir, spherePos, sphereRadius);\n    vec3 reflHitNorm = getNormal(reflHitPos, spherePos, sphereRadius);\n\n    // Compute reflection color\n    vec3 reflColor = getCheckerColor(reflHitPos.xz, checkerColor1, checkerColor2);\n\n    // Blend checkerboard and reflection colors\n    vec3 color = mix(checkerColor, reflColor, 0.5);\n\n    // Set fragment color\n    fragColor = vec4(color, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}