{
    "Shader": {
        "info": {
            "date": "1725498642",
            "description": "welcome to my web world\nread code comments thx, golfing help is appreciated !!\nstill debating if \"#define L length\" is cheating lol, i guess it's a personal belief\nthere's also something fun about figuring out if #define even saves chars",
            "flags": 0,
            "hasliked": 0,
            "id": "4c2fDy",
            "likes": 0,
            "name": "nature's_swerve.wmv",
            "published": 3,
            "tags": [
                "2d",
                "repetition",
                "experimental",
                "art",
                "symmetry",
                "creative"
            ],
            "usePreview": 0,
            "username": "IDG_works",
            "viewed": 27
        },
        "renderpass": [
            {
                "code": "#define L length\n// 305 chars\n// https://twigl.app/?ol=true&ss=-O6XlPGm1JAzXpUyauUK\n\n// safe version (runs on more devices!)\n// https://www.shadertoy.com/view/lXXcDH\n\n// early beta version that i still like \n// https://www.shadertoy.com/view/MXfcDH\n\n/* vaguely based on https://www.shadertoy.com/view/XsXXDn\nvery old looking shader, reminds me of old visualizer software, it makes me smile quite a bit though\n    - something I like doing is increasing the loop iteration count and dividing c at the end to compensate\n    - also using + moving the pixelate effect line can be interesting, commented code is below\n        - you can mess with the \"64.\" values in the pixelate line to change grid size\n            - removing the pixelation code is good too, I just think it adds nice texture\n    -also also setting v to u later in the chain is very fun\n\ncompletely addicted to how much you can modulate with these \"patches\"\n\ncan't figure out audio for the life of me, maybe i'll go back to it later for the true visualizer experience\nalso, this might get me to figure out how milkdrop works, seems to be similar?\n*/\n\nvoid mainImage( out vec4 o, in vec2 F )\n{\n\t// init\n    vec2 r = iResolution.xy, v = (F + F - r) / r.y, // coords\n    u = 3.*v\n    // *round(v*128.)/128. // i like this pixel filter, remove \"*v\" above if in use\n    ;\n    float t = iTime, s = sin(t), q = cos(u.x), l, i, h = .5; \n    \n    for(o *= i; i++ < 3.; // main loop, changing iteration count is fun, make sure to divide o for compensation at the end tho\n        // v = u,    setting v here is super sick but a bit too extreme to make the final shader\n        l = L(u), // length(u);\n        u += u / l * (sin(t)+sin(t)/4.)*abs(sin(l*2.-t)), // the movement code\n        u *= mat2(q, -s, s, q), // rotation matrix\n        //u = round(u*PX)/PX;    // trying to pixelate here instead is fun\n        \n        // mess with default .003 for funsies \n        o = (o+vec4(.003/L(fract(u)-h // removing h is neat, they're like petals\n                                     )))*4., // carve the shape\n        o*= vec4(h) + // coloring  \n            vec4(-h, \n            vec3(h)) * cos(6. * (clamp(L(o /* i like setting o to 0. */)*l, 0., 1.) // is there a way to clamp w less characters?\n            + L(v) + t/2. + vec4(-.35, .3, h, t)) ), // floats are useful as a 1char unused value\n    \n    // o += vec4(u, 0., h), // this is worth a watch\n    \n    // o *= vec4(0.2/L(v)) // these are my favorite effects\n    // o*= vec4(0.02/L(v)+.5)\n     o *= L(v)/2.+.8\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}