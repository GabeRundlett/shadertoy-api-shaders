{
    "Shader": {
        "info": {
            "date": "1385861396",
            "description": "A little purple waving monster! Drag the mouse around! Kind of a work-in-progress.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsSGDR",
            "likes": 17,
            "name": "Little Monster",
            "published": 3,
            "tags": [
                "cartoon",
                "bezier",
                "color",
                "animation",
                "vector",
                "monster",
                "character",
                "smooth"
            ],
            "usePreview": 0,
            "username": "HLorenzi",
            "viewed": 1039
        },
        "renderpass": [
            {
                "code": "vec2 getBezier(vec2 p0, vec2 p1, vec2 p2, float t) \n{\n\treturn (1.0 - t) * ((1.0 - t) * p0 + t * p1) + (t * ((1.0 - t) * p1 + t * p2));\n}\n\nfloat sqrlen(vec2 v)\n{\n\treturn v.x * v.x + v.y * v.y;\n}\n\nfloat lineDist(vec2 pm, vec2 p0, vec2 p1)\n{\n\tvec2 a = pm - p0;\n\tvec2 b = p1 - p0;\n\tfloat bLen = length(b);\n\tvec2 bNorm = normalize(b);\n\tfloat a1Len = dot(a, bNorm);\n\tvec2 a1 = a1Len * bNorm;\n\tvec2 a2 = a - a1;\n\t\n\tif (a1Len < 0.0) {\n\t\treturn sqrlen(p0 - pm);\n\t} else if (a1Len > bLen) {\n\t\treturn sqrlen(p1 - pm);\n\t} else {\n\t\treturn sqrlen(a2);\n\t}\n}\n\nvec2 lineTDist(vec2 pm, vec2 p0, vec2 p1)\n{\n\tvec2 a = pm - p0;\n\tvec2 b = p1 - p0;\n\tfloat bLen = length(b);\n\tvec2 bNorm = normalize(b);\n\tfloat a1Len = dot(a, bNorm);\n\tvec2 a1 = a1Len * bNorm;\n\tvec2 a2 = a - a1;\n\t\n\tif (a1Len < 0.0) {\n\t\treturn vec2(0.0,sqrlen(p0 - pm));\n\t} else if (a1Len > bLen) {\n\t\treturn vec2(1.0,sqrlen(p1 - pm));\n\t} else {\n\t\treturn vec2(a1Len / bLen,sqrlen(a2));\n\t}\n}\n\nbool checkBezier(vec2 p, vec2 p0, vec2 p1, vec2 p2, float sqrDist)\n{\t\n\tconst float subdiv = 8.0;\n\t\n\tvec2 lastBezier = p0;\n\t\n\tbool check = false;\n\t\n\tfor(float t = 1.0 / subdiv; t <= 1.0; t += 1.0 / subdiv) {\n\t\tvec2 bezier = getBezier(p0,p1,p2,t);\n\t\t\n\t\tif (lineDist(p, lastBezier, bezier) < sqrDist) {\n\t\t\tcheck = true;\n\t\t\t//break;\n\t\t}\n\t\t\n\t\tlastBezier = bezier;\n\t}\n\t\n\treturn check;\n}\n\nvec3 solveCubic(float a, float b, float c, float d) // unused, incomplete\n{\n\tfloat disc = (18.0 * a * b * c * d\n\t\t\t   - 4.0 * b * b * b * d\n\t\t\t   + b * b * c * c\n\t\t\t   - 4.0 * a * c * c * c\n\t\t\t   - 27.0 * a * a * d * d);\n\t\n\tfloat d0 = (b * b - 3.0 * a * c);\n\t\n\tfloat d1 = (2.0 * b * b * b - 9.0 * a * b * c + 27.0 * a * a * d);\n\t\n\tfloat d21m4d30 = (-27.0 * a * a * disc);\n\t\n\tfloat bigc = pow((d1 + sqrt(d21m4d30)) / 2.0, 1.0 / 3.0);\n\t\n\tfloat u1 = 1.0;\n\tfloat x1 = (-1.0 / (3.0 * a)) * (b + u1 * bigc + (d0 / (u1 * bigc)));\n\tfloat u2 = 1.0;\n\tfloat x2 = (-1.0 / (3.0 * a)) * (b + u2 * bigc + (d0 / (u2 * bigc)));\n\tfloat u3 = 1.0;\n\tfloat x3 = (-1.0 / (3.0 * a)) * (b + u3 * bigc + (d0 / (u3 * bigc)));\n\t\n\treturn vec3(x1,x2,x3);\n}\n\nvec2 checkTBezier(vec2 p, vec2 p0, vec2 p1, vec2 p2, float sqrDist)\n{\t\n\tconst float subdiv = 8.0;\n\t\n\tvec2 lastBezier = p0;\n\t\n\tvec2 check = vec2(-1,0);\n\tfloat cur = 0.0;\n\t\n\tfor(float t = 1.0 / subdiv; t <= 1.0; t += 1.0 / subdiv) {\n\t\tvec2 bezier = getBezier(p0,p1,p2,t);\n\t\tvec2 dist = lineTDist(p, lastBezier, bezier);\n\t\t\n\t\tif (dist.y < sqrDist) {\n\t\t\tcheck = vec2(cur + dist.x * (1.0 / subdiv), dist.y);\n\t\t\t//break;\n\t\t}\n\t\t\n\t\tlastBezier = bezier;\n\t\tcur += (1.0 / subdiv);\n\t}\n\t\n\treturn check;\n}\n\nvec4 color(vec2 uv)\n{\n\tvec2 bodyUV = uv *\n\t\tvec2(cos(iTime * 5.0) * 0.025 + 1.0,\n\t\t\t 1.0 - (cos(iTime * 5.0) * 0.025)) -\n\t\tvec2(0, (cos(iTime * 5.0) * 0.02));\n\t\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse = mouse * 2.0 - 1.0;\n\tmouse.x *= iResolution.x / iResolution.y;\n\tvec2 mouseDir = (vec2(0,0.2) - mouse);\n\t\n\tif (sqrlen(mouseDir) > 1.5 * 1.5)\n\t\tmouseDir = normalize(mouseDir) * 1.5;\n\t\n\tvec2 eyeUV = (bodyUV) * vec2(1.1,1);\n\tvec2 eyeDisp = mouseDir * 0.1;\n\t\n\tvec2 armUV = uv - vec2((cos(iTime * 5.0) * 0.02), (cos(iTime * 5.0) * 0.02));\n\tvec2 arm2UV = uv - vec2(-(cos(iTime * 5.0) * 0.02), (cos(iTime * 5.0) * 0.02));\n\t\n\tfloat armPosTime = radians(100.0) + cos(iTime * 13.0) * radians(10.0);\n\tvec2 armPos = vec2(-0.8,0.1) + vec2(cos(armPosTime) * 0.4, sin(armPosTime) * 0.4);\n\t\t\n\tvec2 arm2Pos = vec2(0.8,-0.7);\n\tif (mouse.x > 0.3 && mouse.x < 1.3) {\n\t\tarm2Pos = mouse;\n\t}\n\t\n\tif (sqrlen(eyeUV - vec2(0,0.2)) < 0.4 * 0.4) {\n\t\tif (sqrlen(eyeUV - vec2(0.06,0.3) + eyeDisp) < 0.05 * 0.05) {\n\t\t\treturn vec4(1,1,1,1);\n\t\t} else if (sqrlen((eyeUV + eyeDisp) * vec2(1,0.8) - vec2(0,0.2)) < 0.1 * 0.1) {\n\t\t\treturn vec4(0,0,0,1);\n\t\t} else {\n\t\t\treturn vec4(1,1,1,1);\n\t\t}\n\t} else if (bodyUV.y <\n\t\t\t   \tgetBezier(vec2(-0.4,-0.2), vec2(0,-0.5), vec2(0.4,-0.2), (bodyUV.x + 0.4) / 0.8).y &&\n\t\t\t  bodyUV.y >\n\t\t\t   \tgetBezier(vec2(-0.4,-0.2), vec2(0,-0.6), vec2(0.4,-0.2), (bodyUV.x + 0.4) / 0.8).y) {\n\t\treturn vec4(0.4,0.1,0.5,1);\n\t} else if (bodyUV.y <\n\t\t\t   \tgetBezier(vec2(0.2,-0.32), vec2(0.3,-0.3), vec2(0.35,-0.25), (abs(bodyUV.x) - 0.2) / 0.15).y &&\n\t\t\t  bodyUV.y >\n\t\t\t   \tgetBezier(vec2(0.2,-0.32), vec2(0.3,-0.5), vec2(0.35,-0.25), (abs(bodyUV.x) - 0.2) / 0.15).y) {\n\t\treturn vec4(1,1,0.7,1);\n\t} else if (bodyUV.y <\n\t\t\t   \tgetBezier(vec2(-0.3,-0.3), vec2(0,-0.4), vec2(0.3,-0.3), (bodyUV.x + 0.3) / 0.6).y &&\n\t\t\t  bodyUV.y >\n\t\t\t   \tgetBezier(vec2(-0.3,-0.3), vec2(0,-0.6 + cos(iTime * 2.0) * 0.15), vec2(0.3,-0.3), (bodyUV.x + 0.3) / 0.6).y) {\n\t\tif (sqrlen(bodyUV - vec2(0,-0.5 + cos(iTime * 2.0) * 0.05)) < 0.2 * 0.2) {\n\t\t\treturn vec4(0.9,0.1,0.05,1);\n\t\t} else {\n\t\t\treturn vec4(0.7,0.1,0.05,1);\n\t\t}\n\t} else if (lineDist(bodyUV, vec2(0,-0.2), vec2(0,0.2)) < 0.6 * 0.6) {\n\t\treturn vec4(0.6,0.2,1,1);\n\t} else if (checkBezier(armUV, vec2(-0.5,0.1), vec2(-1.0,-0.6), armPos, 0.1 * 0.1)) {\n\t\treturn vec4(0.6,0.2,1,1);\n\t} else if (checkBezier(arm2UV, vec2(0.5,0.1), vec2(0.7,-0.1), arm2Pos, 0.1 * 0.1)) {\n\t\treturn vec4(0.6,0.2,1,1);\n\t} else {\n\t\treturn mix(vec4(0,0,0,1),vec4(0.2,0.3,0.7,1),sin(-uv.y));\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tfragColor = color(uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}