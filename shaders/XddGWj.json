{
    "Shader": {
        "info": {
            "date": "1452283994",
            "description": "A Lorenz attractor plotter thing made to look like an analog oscilloscope. Lower the speed to see the motion more clearly.",
            "flags": 32,
            "hasliked": 0,
            "id": "XddGWj",
            "likes": 78,
            "name": "Lorenz Attractor Scope",
            "published": 3,
            "tags": [
                "math",
                "simulation",
                "chaos",
                "lorenz",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 4710
        },
        "renderpass": [
            {
                "code": "#define COLOR_BACK vec3(0.10, 0.10, 0.10)\n#define COLOR_TRACE vec3(0.10, 1.10, 0.50)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float b = texture(iChannel0, uv).x;\n    \n\tfragColor = vec4(mix(COLOR_BACK, COLOR_TRACE, b), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//https://en.wikipedia.org/wiki/Lorenz_system\n\n//Settings\n#define STEPS 96.0\n#define VIEW_SCALE 0.015\n\n#define SPEED 0.2\n#define INTENSITY 0.1\n#define FADE 0.99\n#define FOCUS 1.\n\n#define MODE xz\n\n//System Parameters\nfloat O = 10.0;\nfloat P = 28.0;\nfloat B = 8.0/3.0;\n\n//Initial Position\nvec3 start = vec3(0.1,0.001,0);\n\n//Calculate the next position \nvec3 Integrate(vec3 cur, float dt)\n{\n\tvec3 next = vec3(0);\n    \n    next.x = O * (cur.y - cur.x);\n    next.y = cur.x * (P - cur.z) - cur.y;\n    next.z = cur.x*cur.y - B*cur.z;\n    \n    return cur + next * dt;\n}\n\n//Distance to a line segment,\nfloat dfLine(vec2 start, vec2 end, vec2 uv)\n{   \n\tvec2 line = end - start;\n\tfloat frac = dot(uv - start,line) / dot(line,line);\n\treturn distance(start + line * clamp(frac, 0.0, 1.0), uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    uv -= res/2.0;\n    uv.y += 0.375;\n    float d = 1e6;\n    \n    vec3 last = texture(iChannel0, vec2(0,0)).xyz;\n    vec3 next = vec3(0);\n    \n    for(float i = 0.0;i < STEPS;i++)\n    {\n    \tnext = Integrate(last, 0.016 * SPEED);\n        \n        d = min(d, dfLine(last.MODE * VIEW_SCALE, next.MODE * VIEW_SCALE, uv));\n         \n        last = next;\n    }\n    \n    float c = (INTENSITY / SPEED) * smoothstep(FOCUS / iResolution.y, 0.0, d);\n\t\n\tc += (INTENSITY/8.5) * exp(-1000.0 * d*d);\n    \n    //pixel (0,0) saves the current position.\n    if(floor(fragCoord) == vec2(0,0))\n    {\n        if(iFrame == 0) //Setup initial conditions.\n    \t{\n    \t\tfragColor = vec4(start, 0);\n    \t}\n        else //Save current position.\n        {\n    \t\tfragColor = vec4(next, 0);\n        }\n    }\n    else\n    {\n        vec3 lc = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n        fragColor = vec4(vec3(c) + lc * FADE, 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}