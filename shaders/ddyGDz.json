{
    "Shader": {
        "info": {
            "date": "1678388683",
            "description": "CC0: Example of mod2 usage\nGot a question on a shader on how mod2 works so created a simple shader in the hope it helps\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ddyGDz",
            "likes": 10,
            "name": "CC0: Example of mod2 usage",
            "published": 3,
            "tags": [
                "mod2"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "// CC0: Example of mod2 usage\n//  Got a question on a shader on how mod2 works so created a simple shader in the hope it helps\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  // Adjust texture coords to -1.0 .. 1.0 range\n  vec2 p = -1.0+2.0*q;\n  // And compensate for the texture size ratio\n  p.x *= iResolution.x/iResolution.y;\n\n  const float cellSize = 0.5;\n\n  vec2 n = vec2(0.0);\n\n  // Flip between using mod2 and not depending on the time.\n  if (floor(mod(iTime, 2.0))==0.0) {  \n    // This will repeat any shape into cells of size 0.5\n    //  it modifies p and n is the cell id\n    n = mod2(p, vec2(cellSize));\n  }\n\n  // Distance field for circle, it will be repeated depending on if mod2 was applied or not\n  float d = length(p) - cellSize*0.4;\n  \n  float  aa = 4.0/iResolution.y;\n\n  vec3 col = vec3(0.0);\n  // Draw the distance field\n  //  smoothstep with aa makes sure the circle border is nice and smooth\n  col = mix(col, 1.0+cos(vec3(0.0, 1.0, 2.0)+0.8*(n.x+n.y)), smoothstep(0.0, -aa, d));\n  col = sqrt(col);\n\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}