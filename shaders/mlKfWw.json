{
    "Shader": {
        "info": {
            "date": "1702180943",
            "description": "a simple circular slider for your input needs\n",
            "flags": 32,
            "hasliked": 0,
            "id": "mlKfWw",
            "likes": 1,
            "name": "color wheel selector",
            "published": 3,
            "tags": [
                "mouse",
                "sdf",
                "input"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "vec3 hsvToRgb(vec3 hsv){ //hsv.x = hue, hsv.y = saturation, hsv.z = value\n    vec3 col = vec3(hsv.x, hsv.x + 2.0/3.0, hsv.x + 4.0/3.0); //inputs for r, g, and b\n    col = clamp(abs(mod(col*2.0, 2.0)-1.0)*3.0 - 1.0, 0.0, 1.0)*hsv.z*hsv.y + hsv.z - hsv.z*hsv.y; //hue function (graph it on desmos)\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //make sure your mouse coordinates in buffer A are in uv coords\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/iResolution.y;\n    float pxunit = 1.0/iResolution.y; //the size of a pixel for blending\n\n    //position of handle\n    vec2 p = texelFetch(iChannel0, ivec2(0,0), 0).xy;\n    //hue\n    float h = atan(p.y,p.x)/(2.0*PI);\n    //saturation\n    float s = length(p)/wheelRadius;\n    \n    vec3 col = mix(vec3(0.8),vec3(1),float(abs(mod(uv.x,0.1) - mod(uv.y,0.1)) > 0.05));\n    float innerdist = wheelRadius - length(uv);\n    float handledist = handleRadius - distance(uv,p);\n    col = mix(col, hsvToRgb(vec3(atan(uv.y,uv.x)/2.0/PI,length(uv)/wheelRadius,1.0)), smoothstep(0.0, pxunit, innerdist)); //slider background\n    col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(innerdist))); //slider border\n    col = mix(col, hsvToRgb(vec3(h,s,1.0)), smoothstep(0.0, pxunit, handledist)); //handle\n    col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(handledist))); //handle border\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = vec4(0);\n    //xy: handle position\n    //zw: initial offset\n    if (floor(fragCoord) == vec2(0,0)){\n        vec2 handle = texelFetch(iChannel0,ivec2(0,0),0).xy;\n        vec2 offset = texelFetch(iChannel0,ivec2(0,0),0).zw;\n        vec2 m = uv_transform(iMouse.xy,iResolution.xy);\n        vec2 mc = uv_transform(abs(iMouse.zw),iResolution.xy);\n        if (distance(mc,handle) < handleRadius){\n            if (iMouse.w >= 0.0){ //setup on click\n                offset = handle-mc;\n            }\n        }\n        if (iMouse.z >= 0.0 && offset != vec2(999.0)){\n            handle = m + offset;\n        }\n        \n        float l = length(handle);\n        handle = handle/l*clamp(l, 0.0, wheelRadius);\n        \n        if (iMouse.z >= 0.0){\n            data = vec4(handle, offset);\n        } else {\n            data = vec4(handle, vec2(999.0));\n        }\n    }\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float wheelRadius = 0.35;\nconst float handleRadius = 0.05;\n\nvec2 uv_transform(vec2 uv, vec2 res){\n    return (uv - res/2.0)/res.y;\n}\n\n#define PI 3.14159",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}