{
    "Shader": {
        "info": {
            "date": "1634228485",
            "description": "Physically based lightness calculation\nfor a rectangular area light perpendicular to a\nmatte (Lambertian) ground plane, expanding up and down.\ndetails: https://hyperknot.com/blog/area_lights_in_shaders/",
            "flags": 0,
            "hasliked": 0,
            "id": "NsyXzz",
            "likes": 10,
            "name": "Physically based area light",
            "published": 3,
            "tags": [
                "light",
                "area",
                "physics"
            ],
            "usePreview": 0,
            "username": "hyperknot",
            "viewed": 746
        },
        "renderpass": [
            {
                "code": "// Physically based lightness calculation\n// for a rectangular area light perpendicular to a\n// matte (Lambertian) ground plane, expanding up and down.\n// details: https://hyperknot.com/blog/area_lights_in_shaders/\n\nfloat area_light_antideriv(vec2 uv, float i, float h, float t) {\n  float lxh = length(vec2(uv.x, h));\n  return -i * uv.x * atan((t-uv.y)/lxh) / lxh;\n}\n\nfloat area_light(vec2 uv, float i, float h_bottom, float h_top, float t_start, float t_end) {\n  // i - light's intensity\n  // h_top and h_bottom - the light's top and bottom above the ground\n  // t_start and t_end - the light's start and end on the y-axis\n  float v =\n  + area_light_antideriv(uv, i, h_top, t_end)\n  + area_light_antideriv(uv, i, h_bottom, t_start)\n  - area_light_antideriv(uv, i, h_bottom, t_end)\n  - area_light_antideriv(uv, i, h_top, t_start);\n  return max(0., v);\n}\n\n\nfloat lin_to_srgb ( float val ) {\n  if( val < 0.0031308 )\n    return val * 12.92;\n  else\n    return 1.055 * pow(val,1.0/2.4) - 0.055;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    uv *= 2.;\n\n    float h_top = pow(sin(iTime/3.), 2.) * 0.1 + 0.001;\n\n    float v = area_light(uv, 0.05, 0.0, h_top, -0.5, 0.5);\n    v += area_light(uv, -0.5, 0.0, h_top, -0.5, 0.5);\n    v = lin_to_srgb(v);\n\n\t\n \tfragColor=vec4(v);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}