{
    "Shader": {
        "info": {
            "date": "1621450740",
            "description": "Salon quality hair! Learned about the directional blur thing from here: https://www.shadertoy.com/view/4dlGDN",
            "flags": 32,
            "hasliked": 0,
            "id": "7dBXzd",
            "likes": 54,
            "name": "Long Flowing Hair",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "hair"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 1392
        },
        "renderpass": [
            {
                "code": "\n// Cole Peterson\n\n\n// Image: Apply simple bump and lighting \n\nvec3 bump(vec2 uv, float strength){\n    float h = 0.001;\n    \n    vec3 p = texA(uv); \n    float dx = texA(uv).r - texA(uv + vec2(h, .0)).r;\n    float dy = texA(uv).r - texA(uv + vec2(0., h)).r;\n    \n    return normalize( vec3(0., 0., -1.) + vec3(dx, dy, 0.)*strength);\n}\n\n#define scl .9\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    vec3 lp = vec3(-0.22+cos(iTime)*.1, 0.2+sin(iTime)*.1, -1.0);\n    \n    if(iMouse.z>0.)\n        lp = vec3(m.x*.7, m.y*.7, -1.0);\n    \n    vec3 sp = vec3(uv, 0.0);\n    vec3 ro = vec3(0, 0, -1.0);\n    vec3 rd = normalize(sp - ro);\n    vec3 ld = lp - sp;\n    \n    float dist = max(length(ld), 0.001);\n    ld /= dist;\n    vec3 tex = texA((u/R)*scl);\n    \n    vec3 norm = bump((u/R)*scl, 15.);\n  \t\n    float dif = max(dot(norm, ld), 0.);  \n    float spec = pow(max(dot( reflect(-ld, norm), -rd), 0.), 16.); \n    \n    vec3 col = (tex*(dif + 0.3) + vec3(.5, .6, .7)*spec*.2);\n    \n    col = pow(col*1., vec3(3.));\n    col = 1. - exp(-col);\n    \n    f = vec4(col, 1.0); \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Buffer A: Make the wavy noise with base color from a texture\n\n// Directional blur learned from here: https://www.shadertoy.com/view/4dlGDN\n\nvec2 hash22( vec2 x ){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gdns(vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = smoothstep(0., 1., f);\n    \n    vec2 a = hash22(i);\n    vec2 b = hash22( i + vec2(1.,0.));\n    vec2 c = hash22( i + vec2(.0,1.));\n    vec2 d = hash22( i + vec2(1));\n    \n    \n    float nse = mix( mix( dot( a, f - vec2(0.0,0.0) ), \n                     dot( b, f - vec2(1.0,0.0) ), u.x),\n                mix( dot( c, f - vec2(0.0,1.0) ), \n                     dot( d, f - vec2(1) ), u.x), u.y);\n    return nse + 0.5;\n}\n\nfloat octnse(vec2 p, int oct){\n    float a = 1.;\n    float n = 0.;\n    \n    for(int i = 0; i < oct; i++){\n     \tn += gdns(p) * a;\t\n        p*=2.;\n        a *= .5;\n    }\n    \n    return n;\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    uv.y -= iTime*.1;\n\n    vec3 sum = vec3(0);\n    float n = 28., scl = 30., prd = 7., h = iTime*.4;\n    \n    for(float i = 0.; i < n; i++){\n        vec2 p = .01*vec2(cos(uv.y*prd + h), sin(uv.x*prd + h));\n        \n        float a = octnse(p * 4., 4)*25.;\n        vec3 nc = texA(uv).xyz;\n        vec2 v = vec2(cos(a), sin(a));\n        \n        sum += nc;\n        \n        uv += v*.0025;\n    }\n    \n    sum /= n;\n    \n    f = vec4(sum, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n  \n#define texA(p) texture(iChannel0,  p).xyz\n\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}