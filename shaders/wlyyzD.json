{
    "Shader": {
        "info": {
            "date": "1610572395",
            "description": "I was playing around with gyroids and managed to make something I felt is cool. Not sure why i have a strange warping effect (maybe I'm over marching?), but I think it ended up making it look cool anyways.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyyzD",
            "likes": 1,
            "name": "Ink cave",
            "published": 3,
            "tags": [
                "3d",
                "ink",
                "cave",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "intrakits",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURFACE_DIST 0.01\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r, float offX, float offY, float offZ) {\n\ta.x += offX;\n    b.x += offX;\n    \n    a.y += offY;\n    b.y += offY;\n    \n    a.z += offZ;\n    b.z += offZ;\n    \n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    //line from a to b\n    vec3 ab = b-a;\n    \n    // line from p to a\n    vec3 ap = p-a;\n    \n    // as p approaches a, it will be 1\n    // as p approaches b it will b 0\n    float t = dot(ab,ap) / dot(ab,ab);\n    \n    // clamp values between 0 and 1\n    t= clamp(t,0.,1.);\n    \n    // center point of the capsule\n    // start at a (top of capsule)\n    // go towards b, t steps\n    vec3 c = a + t*ab;\n    \n    float d = length(p-c)-r;\n    \n    return d;\n}\n\nfloat sdTorus(vec3 p, vec2 r){\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s){\n    return length(max(abs(p)-s,0.));\n}\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n\tp *= scale;\n    return abs(dot(sin(p), cos(p.zxy))-bias)/scale-thickness;\n}\nfloat GetDist(vec3 p){\n    \n    float g1 = sdGyroid(p, 10., .03, 1.);\n    float g2 = sdGyroid(p, 10.76, .03, .3);\n    float g3 = sdGyroid(p, 20.76, .03, .3);\n    float g4 = sdGyroid(p, 35.76, .03, .3);\n    float g5 = sdGyroid(p, 60.76, .03, .3);\n    float g6 = sdGyroid(p, 110.76, .03, .3);\n    g1 -= g2*.4;\n    g1 -= g3*.3;\n    g1 += g4*.2;\n    g1 += g5*.2;\n    g1 += g6*.3;\n    vec2 uv = vec2(sin(p.x*4.)*.5+.5,cos(p.z*3.)*.5+.5);\n    float disp = texture(iChannel0,uv).r;\n    g1-=disp*.05*sin(iTime);\n    float box = dBox(p, vec3(5));\n    float d = max(g1,box);\n\n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd){\n    // distance from origin\n    float dO=0.;\n    // march until max steps is achieved or object hit\n    for(int i=0; i <MAX_STEPS; i++){\n        // current point being evaluated\n        vec3 p = ro + dO*rd;\n        \n        // get distance to seam\n        float ds = GetDist(p);\n        //move origin to new point\n        dO+=ds*.1;\n        if(ds < SURFACE_DIST || dO > MAX_DIST){\n            break;\n        }\n    }\n    return dO;\n}\nvec3 GetNormal(vec3 p){\n    //distance to point being analyzed\n    float d = GetDist(p);\n    \n    //distance to another point along the objects surface that is closeby\n    vec2 e = vec2(0.01,0);\n    \n    //slope between the two points\n    //note: swizzel is the .xxy or .yyx etc\n    vec3 n = d - vec3(\n         GetDist(p-e.xyy),\n         GetDist(p-e.yxy),\n         GetDist(p-e.yyx));\n         \n    return normalize(n);\n    \n}\nfloat GetLight(vec3 p){\n    //position of the light source\n    vec3 lightPos = vec3(0,0,0);\n    \n    lightPos.xz *= Rot(sin(iTime));\n    //light vector\n    vec3 l = normalize(lightPos-p+vec3(4,0,0));\n    \n    //normal of object\n    vec3 n = GetNormal(p);\n    \n    // dot product of the light vector and normal of the point\n    // will give us the amount of lighting to apply to the point\n    // dot() evaluates to values between -1 and 1, so we will clamp it\n    float diff = clamp(dot(n, l),0.,1.);\n    \n    // calculate if point should be a shadow:\n    // raymarch from point being calculated towards light source\n    // if hits surface of something else before the light,\n    // then it must be obstructed and thus is a shadow\n    // the slight offset \"p+n*SURFACE_DIST*1.1\" is needed to ensure the\n    // break condistions in the function are not met too early\n    float d = RayMarch(p+n*SURFACE_DIST*1.1,l);\n    if(d < length(lightPos-p)){\n        diff *= 0.1;\n    }\n    return diff;\n}\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    // origin is now (0,0)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0);\n    \n    //camera\n    //-----------------\n    // ray origin\n    //controls position\n    vec3 ro = vec3(0.,-0.1,sin(iTime*.1));\n  //  ro.yz *= Rot(-m.y*3.14+1.);\n   // ro.xz *= Rot(sin(iTime)*.6+3.);\n   // ro.yz *= -Rot(sin(iTime)*.1+5.);\n    \n    //ray dir\n    //controls rotation\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    rd.xz *= Rot(sin(iTime)*.6+3.);\n    //------------------\n    float d = RayMarch(ro,rd);\n    // position of point\n    // start at ray origin\n    // move d units in the ray direction\n    vec3 p = ro + rd *d;\n    \n    \n    \n    //color objects\n    if(d < MAX_DIST){\n        \n        //get normals\n        vec3 n = abs(GetNormal(p));\n        \n        \n        float g1 = sdGyroid(p, 5.23, .03, 1.4);\n        float g2 = sdGyroid(p, 10.76, .03, .3);\n        float g3 = sdGyroid(p, 20.76, .03, .3);\n        float g4 = sdGyroid(p, 35.76, .03, .3);\n        float g5 = sdGyroid(p, 60.76, .03, .3);\n        float g6 = sdGyroid(p, 110.76, .03, .3);\n        g1 -= g2*.4;\n        g1 -= g3*.3;\n        g1 += g4*.2;\n        g1 += g5*.2;\n        g1 += g6*.3;\n        vec2 uv = vec2(sin(p.x*4.)*.5+.5,cos(p.z*3.)*.5+.5);\n        float disp = texture(iChannel0,uv).r;\n        g1-=disp*.05;\n        float box = dBox(p, vec3(4));\n        float d = max(g1,box);\n        col = d*vec3(1)*50.;\n        col = max(col,disp*vec3(1,0,0)*3.);\n        col = max(col,g2*vec3(0,1,0)*50.);\n       \n        col *= smoothstep(-.1, .1, g2);\t// blackening\n        //get diffuse lighting\n        float diff = GetLight(p);\n        col *= vec3(diff);\n        \n\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}