{
    "Shader": {
        "info": {
            "date": "1509487504",
            "description": "MIPmap level = Mouse.y or autodemo. \nLeft: texelFetch()    Right: texture()\n\nprecise mapping from LOD to LOD seems difficult for odd sizes... (+ depends whether your system rescale video).\nStrange: when one side is odd/2, it's the other side that slides.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltSyRc",
            "likes": 2,
            "name": "bug MIPmap 4",
            "published": 3,
            "tags": [
                "texture",
                "glsl",
                "lod",
                "mipmap",
                "bug"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "#define plain true       // false: half-pix offset\n#define SRC   iChannel1  // 0: video 1: buffer\n\n// ==== text utils\n\nfloat char(vec2 p, int c) { // --- access to the image of ascii code c\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return 0.;\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) ).x;\n}\nfloat pInt(vec2 p, float n) { // --- display uint4\n    float v = 0.;\n    for (float i = 3.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// === texture MIPmap test\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R =  iResolution.xy,\n         M = length(iMouse.xy)>10. ? iMouse.xy : R*vec2(.5+.5*cos(.5*iTime));\n    O-=O;\n  //U-=.5;\n    float N = floor(log2(float(textureSize(SRC,0).x)))+1.;\n    float z =  N*M.y/R.y;  int iz = int(z);\n    vec2 S = vec2(textureSize(SRC,iz));\n  //vec2 S = R / float(1<<iz);\n        \n    // --- Bottom-left: texelFetch LODs\n    O +=  // texelFetch( iChannel0, ivec2(2.*U)>>iz , iz )      // raw\n          plain ? texelFetch( SRC, ivec2(2.*U/R*S) , iz ) // remap ( no half-pixel)\n                : texelFetch( SRC, ivec2(2.*(U-.5)/R*(S-1.)+.5) , iz ); // remap ( with half-pixel )\n    \n    // --- Top-Right: texture LODs\n    if (U.x >= R.x/2. && U.y >= R.y/2.)\n       O +=  plain ? textureLod( SRC,  2.*U/R-1., floor(z))             // raw\n                   : textureLod( SRC, .5/S + 2.*(U-.5)/R-1., floor(z)); // with half-pixel\n\n    // O = texelFetch( SRC, ivec2(U/R*S) , iz ) ; // full screen\n\n    // --- display size\n    O += pInt(( U/R.y - vec2(.27,.85)) * 8., float(iz));\n    O += pInt(( U/R.y - vec2(.1 ,.7) ) * 8., float(S.x));\n    O += pInt(( U/R.y - vec2(.45,.7) ) * 8., float(S.y));\n    \n    // --- slider\n    O += smoothstep( .035, .03, length((U-.45*vec2(R.x,0))/R.y-vec2(0,floor(z)/9.)))\n        * ( .7+.3*sin(18.*iTime));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "      // ---  video\n// #define mainImage( O, U ) O = texture(iChannel0, U/iResolution.xy)\n\n/**/  // --- multiresolution checkers\n#define C(U,s)  ( int(U.x)/s + int(U.y)/s ) %2\nvoid mainImage(out vec4 O, vec2 U) { O = vec4( C(U,4), C(U,16), C(U,64), 0); }\n/**/\n\n\n/**  // --- calibration target\nvoid mainImage( out vec4 O , vec2 U ) {\n    U /= iResolution.xy;\n    \n    O =   length( U-round(U)) < .1 ? vec4(round(U),0,0)\n        : length( U-.5) < .1       ? vec4(1)\n        : abs(fract(U.x*2.)-.4) < .05 ? vec4(1,0,0,0)\n        :                            vec4(0,0,1,0);\n}\n/**/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}