{
    "Shader": {
        "info": {
            "date": "1610952684",
            "description": "Analytically finding the boundaries of the gradient of an quad SDF. This is also the \"skeleton\" of the shape - all points in this skeleton are equidistant to their two closest quad edges.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlycWh",
            "likes": 15,
            "name": "Quad - Gradient Boundaries",
            "published": 3,
            "tags": [
                "2d",
                "quad",
                "incenter",
                "equicenter"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 694
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Analytically finding the boundaries of the\n// gradient of an quad SDF.\n//\n// The gradisQuad() fuction below returs the two\n// points of the central segment that separates the\n// four constant gradient regions. It also returns\n// in interger (0 or 1) telling you how to connect\n// the quds's corners to these two points.\n\n// Other Gradient boundaries:\n//\n// Triangle: https://www.shadertoy.com/view/tlKcDz\n// Quad:     https://www.shadertoy.com/view/WlycWh\n\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat dot2(in vec2 a ) { return dot(a,a); }\n\nvoid quadSkeleton( in vec2 v[4], out vec2 qa, out vec2 qb, out int of )\n{\n    of = 0;\n    if( dot2(v[1]-v[0])+dot2(v[3]-v[2]) > \n        dot2(v[2]-v[1])+dot2(v[0]-v[3]) )\n    {\n        vec2 t = v[0];\n        v[0] = v[1]; \n        v[1] = v[2];\n        v[2] = v[3]; \n        v[3] = t;\n        of = 1;\n    }\n    \n    vec2 s10 = v[1]-v[0]; float e10 = length(s10);\n    vec2 s21 = v[2]-v[1]; float e21 = length(s21);\n    vec2 s32 = v[3]-v[2]; float e32 = length(s32);\n    vec2 s03 = v[0]-v[3]; float e03 = length(s03);\n\n    float kd = cro(s03,s21);\n    float k0 = cro(s03,s10);\n    float k1 = cro(s10,s21);\n    float k2 = cro(s21,s32);\n    float k3 = cro(s32,s03);\n    \n    // k0+k2 = k1+k3 = area = cro(s20,s31) = cro(v[2]-v[0],v[3]-v[1])\n    \n    // k3 = k0+k2-k1;\n    \n    qa = 0.5*(v[0]+v[1]) + \n         0.5*((s03*e10-s10*e03)*k1 -\n              (s21*e10-s10*e21)*k0)/(-k0*e21-k1*e03+kd*e10);\n\n    qb = 0.5*(v[2]+v[3]) + \n         0.5*((s21*e32-s32*e21)*k3 -\n              (s03*e32-s32*e03)*k2)/(-k2*e03-k3*e21-kd*e32);\n}\n\n//----------------------------------------------------\n\nvec2 sdSeg( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return vec2(dot2(pa-ba*h), cro(pa, ba));\n}\n\nvec3 sdgQuad( in vec2 p, in vec2 v[4] )\n{\n    float gs = cro(v[0]-v[3],v[1]-v[0]);\n    vec4 res;\n    \n    // edge 0\n    {\n    vec2  e = v[1]-v[0];\n    vec2  w = p-v[0];\n    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);\n    float d = dot(q,q);\n    float s = gs*cro(w,e);\n    res = vec4(d,q,s);\n    }\n    \n    // edge 1\n    {\n\tvec2  e = v[2]-v[1];\n    vec2  w = p-v[1];\n    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);\n    float d = dot(q,q);\n    float s = gs*cro(w,e);\n    res = vec4( (d<res.x) ? vec3(d,q) : res.xyz,\n                (s>res.w) ?      s    : res.w );\n    }\n    \n    // edge 2\n    {\n\tvec2  e = v[3]-v[2];\n    vec2  w = p-v[2];\n    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);\n    float d = dot(q,q);\n    float s = gs*cro(w,e);\n    res = vec4( (d<res.x) ? vec3(d,q) : res.xyz,\n                (s>res.w) ?      s    : res.w );\n    }\n\n    // edge 3\n    {\n    vec2  e = v[0]-v[3];\n    vec2  w = p-v[3];\n    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);\n    float d = dot(q,q);\n    float s = gs*cro(w,e);\n    res = vec4( (d<res.x) ? vec3(d,q) : res.xyz,\n                (s>res.w) ?      s    : res.w );\n    }    \n    \n    // distance and sign\n    float d = sqrt(res.x)*sign(res.w);\n    \n    return vec3(d,res.yz/d);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n\n// signed distance to a disk\nfloat sdDisk( in vec2 p, in vec2 c, in float r )\n{\n    return length(p-c)-r;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n    \n    float time = iTime;\n    vec2 v[4] = vec2[4](\n        vec2(-0.9,-0.5) + 0.3*cos( 0.5*time + vec2(0.0,1.9) + 4.0 ),\n\t    vec2( 0.9,-0.5) + 0.3*cos( 0.7*time + vec2(0.0,1.7) + 2.0 ),\n\t    vec2( 0.9, 0.5) + 0.3*cos( 0.9*time + vec2(0.0,1.3) + 1.0 ),\n\t    vec2(-0.9, 0.5) + 0.3*cos( 1.1*time + vec2(0.0,1.5) + 0.0 ) );\n\n\n\tvec3 dg = sdgQuad(p, v);\n    float d = dg.x;\n    vec2  g = dg.yz;\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(1.1,1.4,1.7)*0.5;\n    col *= 0.5+vec3(0.5+0.5*g,0.5);\n    col *= 1.0 - 0.7*exp(-8.0*abs(d));\n    col *= 0.8 + 0.2*cos(200.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    col = clamp(col,0.0,1.0);\n \n    int of;\n    vec2 qa, qb;\n    quadSkeleton( v, qa, qb, of);\n   \n\n    col = mix(col,vec3(1.0,1.0,1.0),smoothstep(2.0*px,0.0,sdSegment( p, v[(0+of)  ], qa )-0.003));\n    col = mix(col,vec3(1.0,1.0,1.0),smoothstep(2.0*px,0.0,sdSegment( p, v[(1+of)  ], qa )-0.003));\n    col = mix(col,vec3(1.0,1.0,1.0),smoothstep(2.0*px,0.0,sdSegment( p, v[(2+of)  ], qb )-0.003));\n    col = mix(col,vec3(1.0,1.0,1.0),smoothstep(2.0*px,0.0,sdSegment( p, v[(3+of)&3], qb )-0.003));\n    col = mix(col,vec3(1.0,1.0,1.0),smoothstep(2.0*px,0.0,sdDisk(p,qb,0.025)));\n    col = mix(col,vec3(1.0,1.0,1.0),smoothstep(2.0*px,0.0,sdDisk(p,qa,0.025)));\n    col = mix(col,vec3(1.0,1.0,1.0),smoothstep(2.0*px,0.0,sdSegment( p, qa, qb)-0.003));\n   \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}