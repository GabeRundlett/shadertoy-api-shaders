{
    "Shader": {
        "info": {
            "date": "1503964130",
            "description": "A shader I made a while back for a fly simulator game for the Ludum Dare.\n\nGame: https://github.com/MagLuTiLa/LudumDare37\nThe game also adds an over all fisheye effect and reduced the red tones slightly.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lfcR7",
            "likes": 18,
            "name": "Facet Eye Vision",
            "published": 3,
            "tags": [
                "grid",
                "hexagon",
                "facets",
                "fragmentshader",
                "faceteye"
            ],
            "usePreview": 0,
            "username": "Samon",
            "viewed": 1216
        },
        "renderpass": [
            {
                "code": "//Radius for each hexagon. Smaller = more hexagons\n#define R .075\n//Difference between neighbouring hexagons.\n#define OFFSET 2.\n//Strength of the falloff in the corners\n#define FALLOFF 0.4\n//Strength of Fisheye effect on each facet\n#define FISH 1.0\n\n\n#define SQRT3 1.732050807\n#define PI 3.141592653\n\n\nvec2 hexCenter(vec2 id, float odd)\n{\n\treturn vec2(\n\t\tSQRT3 * R * (id.x +.5*odd),\n\t\t1.5 * id.y * R\n\t\t);\n}\n\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n\t//UV coordinates [1,2]\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.xy += 1.0;\n\tvec2 grid;\n\n\t//Estimate hex coordinate\n\tgrid.y = floor(uv.y / (1.5*R));\n\tfloat odd = mod(grid.y, 2.0);\n\tgrid.x = floor(uv.x / (SQRT3 * R) - odd*.5);\n\n\t//Find possible centers of hexagons\n\tvec2 h1 = hexCenter(grid, odd);\n\tvec2 h2 = hexCenter(grid + vec2(1.0,0.0), odd);\n\tvec2 h3 = hexCenter(grid + vec2(odd, 1.0), 1.0-odd);\n\n\t//Find closest center\n\tfloat d1 = dot(h1-uv, h1-uv);\n\tfloat d2 = dot(h2-uv, h2-uv);\n\tfloat d3 = dot(h3-uv, h3-uv);\n    \n\tif (d2 < d1)\n\t{\n\t\td1 = d2;\n\t\th1 = h2;\n\t}\n\tif (d3 < d1)\n\t{\n\t\td1 = d3;\n\t\th1 = h3;\n\t}\n\t\n    //Hexagon UV\n\tvec2 uv2 = uv - h1;\n    \n    //Set Hexagon offset\n\tuv = (uv.xy - 1.0) + uv2 * OFFSET;\n\n    //Per Facet Fisheye effect (optional)\n\tvec2 coords = (uv2 - 0.5*R) * 2.0;\n\tvec2 fisheye;\n\tfisheye.x = (1.0 - coords.y * coords.y) * FISH * (coords.x);\n\tfisheye.y = (1.0 - coords.x * coords.x) * FISH * (coords.y);\n\tuv -= fisheye*R;\n\n\n    //Retrieve texture colour\n    o = texture( iChannel0, uv);\n\n    //Redude corners (optional)\n\to = max(vec4(0.0), o - length(2.0*uv-1.0)*FALLOFF);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}