{
    "Shader": {
        "info": {
            "date": "1616161269",
            "description": "Just a car...",
            "flags": 32,
            "hasliked": 0,
            "id": "Nds3zS",
            "likes": 15,
            "name": "Gold Turbo",
            "published": 3,
            "tags": [
                "surface",
                "car",
                "automobile"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 381
        },
        "renderpass": [
            {
                "code": "// \"Gold Turbo\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // optional antialiasing\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Length4 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nvec4 rSize, dSize, dashClk;\nvec3 sunDir, qHit, wlBase, carPos, cSize, litFPos;\nvec2 wlRot, inSize, wSlope;\nfloat tCur, dstFar, strRot, carRot, wbMid, wlRad, litFRad;\nint idObj, idTrObj;\nbool isSh;\nconst int idBod = 1, idBtop = 2, idGril = 3, idEx = 4, idAx = 5, idWhl = 6, idLitF = 7,\n   idLitR = 8, idDash = 9, idSeat = 10, idCon = 11, idStrWhl = 12, idMir = 13, idWin = 14;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n#define DMINTR(id) if (d < dMin) { dMin = d;  idTrObj = id; }\n\nfloat BTopDf (vec3 q)\n{\n  float z, rh;\n  z = dot (q.yz, sin (((q.z > 0.) ? 0.3 : -0.2) * pi + vec2 (0., 0.5 * pi)));\n  rh = (z > 0.) ? wSlope.x : wSlope.y;\n  return SmoothMax (Length4 (max (abs (vec2 (q.x, q.y - 0.7)) - rSize.xy + 0.8, 0.)) - 0.8,\n     length (vec2 (q.x, abs (z) - cSize.z + 2.54 + rh)) - rh, 0.04);\n}\n\nfloat CarExDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 r2;\n  float d, ds, r, z;\n  q = p;\n  r2.x = ((q.z > 0.) ? 2.5: 0.5) * cSize.x;\n  r2.y = ((q.z > 0.) ? 4. : 0.7) * cSize.y;\n  d = length (q.yz - vec2 (((r2.y < cSize.y) ?\n     clamp (q.y, - cSize.y + r2.y, cSize.y - r2.y) : cSize.y - r2.y),\n     clamp (q.z, - cSize.z + r2.y, cSize.z - r2.y))) - r2.y;\n  d = SmoothMax (d, - max (max (PrRoundBox2Df (vec2 (q.x, q.z + 1.25), inSize, 0.1),\n     abs (q.y - 0.5) - 0.6), 0.65 - length (q.yz - vec2 (-0.13, -2.9))), 0.02);\n  q = p;\n  q.x = abs (q.x);\n  d = SmoothMax (d, length (q.xz - vec2 (((r2.x < cSize.x) ?\n     clamp (q.x, - cSize.x + r2.x, cSize.x - r2.x) : cSize.x - r2.x),\n     clamp (q.z, - cSize.z + r2.x, cSize.z - r2.x))) - r2.x, 0.1);\n  q.z -= cSize.z - 1.3;\n  d = SmoothMax (SmoothMax (d, q.z, 0.02), - PrRoundBoxDf (q - vec3 (0., -0.07, 0.),\n     vec3 (0.55, 0.05, 0.2), 0.02), 0.02);\n  q = p;\n  q.x = abs (q.x) - cSize.x;\n  ds = PrCylDf (q - vec3 (0., -0.2, -0.9), 0.03, 1.7);\n  q.y -= -0.03;\n  q.z = abs (q.z + wbMid);\n  q.yz -= wlBase.yz;\n  r = length (q.yz);\n  d = SmoothMin (d, min (ds, length (max (vec2 (r - 0.7, abs (q.x) - 0.02), 0.)) - 0.05), 0.07);\n  d = SmoothMax (d, -0.1 - q.y, 0.05);\n  d = SmoothMax (d, - (length (max (vec2 (r - 0.42, abs (q.x + 0.2) - 0.23), 0.)) - 0.2), 0.02);\n  q = p;\n  q.x = abs (q.x);\n  d = SmoothMax (d, - SmoothMax (abs (PrRoundBox2Df (q.yz - dSize.xy, dSize.zw - 0.2,\n     0.2)) - 0.005, abs (q.x - cSize.x) - 0.001, 0.005), 0.007);\n  d = SmoothMax (d, - PrCylDf (q - litFPos- vec3 (0., 0., 0.85), litFRad, 1.5), 0.01);\n  q = p;\n  q.yz -= vec2 (0.72, 1.8);\n  d = SmoothMax (SmoothMin (d, PrRoundBoxDf (q, vec3 (0.4, 0., 0.3), 0.1), 0.02),\n     - PrRoundBoxDf (q - vec3 (0., 0.02, 0.3), vec3 (0.35, 0.02, 0.1), 0.02), 0.02);\n  q = p;\n  q.yz -= vec2 (0.9, - cSize.z + 0.6);\n  d = SmoothMin (d, PrRoundCylDf (q.yzx, 0.02, 0.04, 1.), 0.05);\n  q = p;\n  q.x = abs (q.x);\n  d = max (d, - PrCylDf (q - vec3 (cSize.x - 0.95, vec2 (-0.15, -4.3)), 0.14, 0.3));\n  q = p;\n  DMINQ (idBod);\n  q = p;\n  q.z -= rSize.z;\n  d = abs (BTopDf (q)) - 0.02;\n  z = dot (q.yz, sin (((q.z > 0.) ? 0.3 : -0.2) * pi + vec2 (0., 0.5 * pi)));\n  d = SmoothMax (d, - min (Length4 (max (abs (vec2 (q.x, q.y - 1.22)) -\n     vec2 (cSize.x - 0.25, 0.25) + 0.3, 0.)) - 0.3, max (PrRoundBox2Df (vec2 (q.y - 1.18, z),\n     vec2 (0.24, 1.6) - 0.05, 0.05), 0.03 - abs (abs (q.z + 0.08) - 0.87))), 0.02);\n  d = max (d, rSize.w - q.y);\n  DMINQ (idBtop);\n  q = p;\n  d = min (PrRoundBoxDf (q - vec3 (0., 0.7, 2.1), vec3 (0.35, 0.1, 0.02), 0.01),\n     PrRoundBoxDf (q - vec3 (0., vec2 (-0.06, 3.05)), vec3 (0.6, 0.1, 0.02), 0.01));\n  DMINQ (idGril);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (cSize.x - 0.95, -0.15, -4.25);\n  d = SmoothMax (PrRoundCylDf (q, 0.1, 0.02, 0.3), - PrCylDf (q - vec3 (0., 0., -0.1),\n     0.06, 0.3), 0.02);\n  DMINQ (idEx);\n  q = p;\n  q.x = abs (q.x) + 0.3;\n  q.z = abs (q.z + wbMid);\n  q -= wlBase;\n  d = PrCylDf (vec3 (abs (q.x) - 0.15, q.zy), 0.06, 0.12);\n  d = min (d, PrCylDf (vec3 (q.z, abs (q.y) - 0.07, q.x), 0.04, 0.12));\n  DMINQ (idAx);\n  q.x -= 0.3;\n  if (p.z > 0.) q.xz = Rot2D (q.xz, - strRot * sign (p.x));\n  q.yz = Rot2D (q.yz, - ((p.x < 0.) ? wlRot.x : wlRot.y) * sign (p.z));\n  r = length (q.yz);\n  d = max (length (max (vec2 (r - wlRad, abs (q.x) - 0.14), 0.)) - 0.05, 0.4 - r);\n  q.yz = Rot2D (q.yz, 2. * pi * floor (7. * atan (q.z, - q.y) / (2. * pi) + 0.5) / 7.);\n  d = min (d, max (length (vec2 (q.x - 0.05, abs (q.z) - 0.03)) - 0.03, abs (q.y + 0.3) - 0.15));\n  d = min (d, SmoothMax (r - 0.18, abs (q.x) - 0.15, 0.02));\n  DMINQ (idWhl);\n  return dMin;\n}\n\nfloat CarInDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;\n  q.x = abs (q.x);\n  q -= litFPos;\n  d = SmoothMax (PrCylDf (q, litFRad - 0.01, litFRad),\n     - PrSphDf (q - vec3 (0., 0., litFRad), 0.1), 0.02);\n  DMINQ (idLitF);\n  q = p;\n  q.x = abs (abs (q.x) - cSize.x + 0.48);\n  q -= vec3 (0.13, 0.25, - cSize.z + 0.3);\n  d = PrRoundCylDf (q, 0.06, 0.03, 0.27);\n  DMINQ (idLitR);\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (0.72, 0.2), -0.1 * pi);\n  d = max (PrRoundBoxDf (q, vec3 (0.9, 0.15, 0.1), 0.1),\n     - PrRoundBoxDf (q - vec3 (0., 0., -0.22), vec3 (0.9, 0.15, 0.1), 0.01));\n  d = max (d, - PrCylDf (vec3 (abs (q.x - dashClk.x) - dashClk.y, q.y, q.z + 0.05), 0.1, 0.1));\n  d = max (d, - PrCylDf (vec3 (abs (q.x - dashClk.z) - dashClk.w, q.y, q.z + 0.05), 0.05, 0.1));\n  DMINQ (idDash);\n  q -= vec3 (-0.47, -0.05, -0.2);\n  d = PrRoundCylDf (q, 0.03, 0.03, 0.45);\n  DMINQ (idCon);\n  q.z -= -0.45;\n  q.xy = Rot2D (q.xy, -8. * strRot + pi / 6.);\n  q.xy = Rot2D (q.xy, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  d = PrTorusDf (q, 0.025, 0.35);\n  DMINQ (idStrWhl);\n  q.x += 0.17;\n  d = PrCylDf (q.yzx, 0.02, 0.17);\n  DMINQ (idCon);\n  q = p;\n  q.z -= -0.3;\n  d = PrRoundBoxDf (q, vec3 (0.05, 0.08, 0.1), 0.05);\n  q.yz = Rot2D (q.yz, 0.1 * pi);\n  q.y -= 0.3;\n  d = min (d, PrCylDf (q.xzy, 0.03, 0.2));\n  DMINQ (idCon);\n  q.y -= 0.2;\n  d = PrSphDf (q, 0.05);\n  DMINQ (idCon);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, 0.1, -1.1);\n  d = PrRoundBoxDf (q, vec3 (0.35, 0.1, 0.45), 0.05);\n  q.yz = Rot2D (q.yz - vec2 (0.4, -0.45), 0.1 * pi);\n  d = min (d, PrRoundBoxDf (q, vec3 (0.35, 0.45, 0.06), 0.05));\n  q.y -= 0.6;\n  d = min (d, PrRoundCylDf (q, 0.17, 0.05, 0.04));\n  q = p;\n  q.yz -= vec2 (0.3, -2.2);\n  d = min (d, PrRoundBoxDf (q, vec3 (1., 0.1, 0.2), 0.05));\n  DMINQ (idSeat);\n  q = p;\n  q.z -= -1.;\n  d = PrCylDf (q, 0.1, 1.5);\n  DMINQ (idSeat);\n  q = p;\n  q.y -= 1.4;\n  d = PrRoundBoxDf (q, vec3 (0.2, 0.05, 0.), 0.01);\n  DMINQ (idMir);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  p.xz = Rot2D (p.xz, carRot);\n  p.yz -= vec2 (carPos.y, wlBase.z + wbMid);\n  d = PrRoundBoxDf (p - vec3 (0., 0.5, -0.7), vec3 (1.5, 1.2, 4.), 0.01);\n  if (isSh || d < 0.1) {\n    dMin = CarExDf (p, dstFar);\n    dMin = CarInDf (p, dMin);\n  } else dMin = d;\n  return dMin;\n}\n\nfloat ObjDfShEx (vec3 p)\n{\n  float dMin;\n  p.xz = Rot2D (p.xz, carRot);\n  p.yz -= vec2 (carPos.y, wlBase.z + wbMid);\n  dMin = CarExDf (p, dstFar);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.01, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjSShadowEx (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDfShEx (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.01, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 c;\n  float dMin, d;\n  dMin = dstFar;\n  p.xz = Rot2D (p.xz, carRot);\n  p.yz -= vec2 (carPos.y, wlBase.z + wbMid);\n  q = p;\n  q.z -= rSize.z;\n  d = max (BTopDf (q), rSize.w - q.y);\n  DMINTR (idWin);\n  q = p;\n  q.x = abs (q.x);\n  c = vec2 (2.5 * cSize.x, 4. * cSize.y);\n  d = max (PrCylDf (q - litFPos - vec3 (0., 0., 0.25), litFRad, 0.3),\n     SmoothMax (length (q.yz - vec2 (-3. * cSize.y, clamp (q.z, - (cSize.z - c.y),\n     cSize.z - c.y))) - c.y, length (q.xz - vec2 (-1.5 * cSize.x, clamp (q.z,\n     - (cSize.z - c.x), cSize.z - c.x))) - c.x, 0.1));\n  DMINTR (idLitF);\n  return dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    p = ro + dHit * rd;\n    d = TrObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat SymCol (vec2 s)\n{\n  return abs (Rot2D (s, 2. * pi * floor (7. * atan (s.y, - s.x) / (2. * pi) + 0.5) / 7.).x +\n     0.1) - 0.02;\n}\n\nvec4 CarCol (out vec2 vf, out bool inCab, out bool isMet, out float refFac)\n{\n  vec4 col4, col4B, col4In, col4D, col4Ls, col4Ds, col4HiRf;\n  vec2 w;\n  float r, s, a;\n  bool loRf;\n  col4B = vec4 (1., 1., 0.1, 0.1);\n  col4In = vec4 (0.6, 0.5, 0.4, 0.05);\n  col4D = vec4 (1., 0.7, 0.1, 0.1);\n  col4Ls = vec4 (0.9, 0.9, 0.9, 0.2);\n  col4Ds = vec4 (0.4, 0.4, 0.4, 0.05);\n  col4HiRf = vec4 (0.9, 0.9, 0.9, 0.);\n  vf = vec2 (0.);\n  loRf = false;\n  inCab = false;\n  if (idObj <= idWhl) {\n    if (idObj == idBod || idObj == idBtop) {\n      col4 = col4B;\n      s = 1.;\n      if (idObj == idBod) {\n        if (length (qHit.yz - vec2 (-0.13, -2.9)) > 0.62 && qHit.y > -0.15 &&\n           max (abs (qHit.x) - inSize.x, abs (qHit.z + 1.15) - (inSize.y + 0.3 -\n           ((qHit.z > 0.) ? 0.3 : 0.15) * qHit.x * qHit.x)) < 0.13) {\n          col4 = col4In;\n          inCab = true;\n        } else {\n          if (qHit.y > -0.23) {\n            r = length (vec2 (qHit.y - wlBase.y + 0.03, abs (qHit.z + wbMid) - wlBase.z));\n            if (r < 0.64) col4 = col4Ds;\n            else if (r < 0.79 || qHit.y < -0.11 && abs (qHit.z + wbMid) < 1.7) col4 = col4D;\n            loRf = true;\n          }\n          if (qHit.y > 0.) {\n            s = min (PrRoundBox2Df (qHit.xz - vec2 (0., -3.8),\n               vec2 (0.7, 0.4), 0.1), PrRoundBox2Df (vec2 (qHit.x, qHit.z - 2.),\n               vec2 (0.7 - 0.15 * (qHit.z - 1.2) * (qHit.z - 1.2), 0.8), 0.1));\n            col4 = mix (col4HiRf, col4, step (0., PrRoundBox2Df (qHit.yz - vec2 (0.7, -1.9),\n               vec2 (0.02, 0.07), 0.02)));\n            w = vec2 (qHit.y - 0.4, qHit.z - 0.1);\n            if (length (w) < 0.2) col4 = mix (col4HiRf, col4, smoothstep (0., 0.01, SymCol (w)));\n            w = vec2 (qHit.x, (qHit.z < 0.) ? qHit.y - 0.2 : qHit.z - 1.9).yx;\n            if (length (w) < 0.3) col4 = mix (col4HiRf, col4, smoothstep (0., 0.01,\n               SymCol (0.8 * w)));\n          }\n          if (qHit.z > cSize.z - 1.35) col4 = col4HiRf;\n        }\n        s = min (s, abs (PrRoundBox2Df (qHit.yz - dSize.xy, dSize.zw - 0.2, 0.2)));\n      } else if (idObj == idBtop) {\n        if (BTopDf (qHit) < 0.) {\n          col4 = col4In;\n          inCab = true;\n        } else {\n          col4 = mix (col4HiRf, col4, smoothstep (0., 0.01, Length4 (max (abs (vec2 (qHit.x,\n             qHit.y - 1.22)) - vec2 (cSize.x - 0.25, 0.25) + 0.3, 0.)) - 0.32));\n          loRf = true;\n        }\n        s = PrRoundBox2Df (qHit.xz - vec2 (0., 0.4), vec2 (0.6, 0.2), 0.1);\n      }\n      col4.rgb *= 0.85 + 0.15 * smoothstep (0., 0.01, abs (s));\n      vf = inCab ? vec2 (32., 0.2) : vec2 (64., 0.02);\n    } else if (idObj == idGril) {\n      col4 = col4Ls;\n      vf = vec2 (128., 0.5);\n    } else if (idObj == idEx) {\n      col4 = (length (qHit.xy) < 0.08) ? col4Ds : col4HiRf;\n    } else if (idObj == idAx) {\n      col4 = col4Ds;\n    } else if (idObj == idWhl) {\n      r = length (qHit.yz);\n      a = atan (qHit.z, - qHit.y) / (2. * pi);\n      if (r > 0.44) col4 = vec4 (0.2, 0.2, 0.2, 0.) * (1. - 0.5 * step (0.5, r) *\n         abs (step (0., cos (32. * pi * qHit.x)) - step (0.5, mod (64. * a + 0.5, 1.))));\n      else if (r > 0.16) col4 = col4Ls * (0.7 + 0.3 * step (-0.1, qHit.x));\n      else col4 = mix (col4D, col4HiRf, step (0.02, abs (Rot2D (qHit.yz,\n         2. * pi * floor (7. * a + 0.5) / 7.).x + 0.1)));\n    }\n  } else {\n    if (idObj == idLitF) {\n      col4 = (length (qHit.xy) > 0.1) ? col4B : col4HiRf;\n    } else if (idObj == idLitR) {\n      col4 = (length (qHit.xy) < 0.06) ? vec4 (0.8, 0.2, 0.2, 0.1) : col4HiRf;\n    } else if (idObj == idDash) {\n      col4 = (abs (qHit.y) < 0.11 && qHit.z > 0.) ? vec4 (1., 1., 1., 0.05) *\n         (0.7 + 0.3 * step (0., min (min (abs (abs (qHit.x - dashClk.x) - dashClk.y),\n         abs (qHit.x - dashClk.z) - dashClk.w), abs (qHit.y)) - 0.01)) : col4In;\n      vf = vec2 (32., 0.1);\n    } else if (idObj == idSeat) {\n      col4 = vec4 (0.9, 0.9, 0.9, 0.05) * (0.95 + 0.05 * cos (128. * qHit.x));\n      vf = vec2 (32., 0.5);\n    } else if (idObj == idCon) {\n      col4 = col4Ls;\n    } else if (idObj == idStrWhl) {\n      col4 = col4D * (0.7 + 0.3 * smoothstep (0.45, 0.55, mod (36. *\n         atan (qHit.y, - qHit.x) / (2. * pi) + 0.5, 1.)));\n    } else if (idObj == idMir) {\n      col4 = (qHit.z < 0.) ? col4HiRf : col4Ls;\n    }\n  }\n  if (idObj >= idDash && idObj <= idMir) inCab = true;\n  isMet = ! (inCab || idObj == idWhl && r > 0.44);\n  refFac = 0.;\n  if (col4 == col4HiRf) refFac = 0.9;\n  else if (loRf) refFac = 0.1;\n  return col4;\n}\n\nfloat RippleHt (vec2 p)\n{\n  vec2 q;\n  float s1, s2;\n  q = Rot2D (p, -0.02 * pi) * vec2 (0.5, 1.);\n  s1 = abs (sin (4. * pi * abs (q.y + 1.5 * Fbm2 (0.7 * q))));\n  s1 = (1. - s1) * (s1 + sqrt (1. - s1 * s1));\n  q = Rot2D (p, 0.01 * pi) * vec2 (0.5, 1.);\n  s2 = abs (sin (3.1 * pi * abs (q.y + 1.9 * Fbm2 (0.5 * q))));\n  s2 = (1. - s2) * (s2 + sqrt (1. - s2 * s2));\n  return 1.2 * mix (s1, s2, 0.1 + 0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * p)));\n}\n\nvec3 RippleNorm (vec2 p, vec3 vn, float f)\n{\n  vec2 e;\n  float h;\n  e = vec2 (0.002, 0.);\n  h = RippleHt (p);\n  vn.xy = Rot2D (vn.xy, f * (RippleHt (p + e) - h));\n  vn.zy = Rot2D (vn.zy, f * (RippleHt (p + e.yx) - h));\n  return vn;\n}\n\nvec3 GrndCol (vec3 ro, vec3 rd, float dstGrnd, float sh)\n{\n  vec3 col, vn;\n  vec2 vf;\n  float f, ff;\n  vn = vec3 (0., 1., 0.);\n  vf = vec2 (0.);\n  ff = 1. - smoothstep (0.3, 0.5, dstGrnd / dstFar);\n  ro.x += 2.5;\n  if (abs (ro.x) < 5.) {\n    f = smoothstep (0.38, 0.4, mod (0.3 * ro.z, 1.) * (1. - smoothstep (0.08, 0.1,\n       abs (abs (ro.x) - 4.6))));\n    vf = vec2 (16., 2. * (1. - 0.9 * f));\n    col = mix (vec3 (0.2) * (0.5 + 0.5 * Fbm2 (64. * ro.xz)), vec3 (0.8), f);\n  } else {\n    vn = RippleNorm (0.5 * ro.zx, vn, 4. * ff);\n    vf = vec2 (4., 1.);\n    col = 0.4 * mix (vec3 (0.8, 1., 0.5), vec3 (0.7, 0.9, 0.5), 0.2 +\n       0.8 * smoothstep (0.3, 0.7, Fbm2 (4. * ro.xz)));\n  }\n  if (vf.x > 0. && ff > 0.) vn = VaryNf (vf.x * ro, vn, vf.y * ff);\n  col *= 0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.);\n  return col;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.3, 0.4, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, rdo, col, colR, vn;\n  vec2 vf;\n  float dstObj, dstTrObj, dstGrnd, nDotL, refFac, sh;\n  bool inCab, isMet;\n  roo = ro;\n  rdo = rd;\n  cSize = wlBase + vec3 (0.2, 1., 2.3);\n  rSize = vec4 (cSize.x - 0.09, cSize.y, -1.3, 0.88);\n  dSize = vec4 (0.6, -1.27, 0.6, 0.97);\n  dashClk = vec4 (-0.47, 0.25, 0.1, 0.1);\n  inSize = vec2 (0.95, 1.5);\n  wSlope = vec2 (3., 5.);\n  litFPos = vec3 (cSize.x - 0.4, 0.3, cSize.z - 1.95);\n  litFRad = 0.12;\n  isSh = false;\n  dstObj = ObjRay (ro, rd);\n  dstTrObj = TrObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = CarCol (vf, inCab, isMet, refFac);\n    isSh = true;\n    sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    nDotL = max (dot (vn, sunDir), 0.);\n    if (isMet) {\n      nDotL *= nDotL;\n      nDotL *= nDotL;\n    }\n    col = col4.rgb * (0.2 + 0.2 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n       0.8 * sh * nDotL) + col4.a * step (0.95, sh) *\n       pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    if (refFac > 0.) rd = reflect (rd, vn);\n  }\n  if (dstObj >= dstFar || refFac > 0.) {\n    if (rd.y < 0.) {\n      dstGrnd = - ro.y / rd.y;\n      ro += dstGrnd * rd;\n      vn = vec3 (0., 1., 0.);\n      sh = (dstGrnd < dstFar) ? ObjSShadowEx (ro + 0.01 * vn, sunDir) : 1.;\n      colR = GrndCol (vec3 (ro.xz + carPos.xz, 0.).xzy, rd, dstGrnd, sh);\n      colR = mix (colR, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n    } else {\n      colR = SkyBgCol (ro, rd);\n    }\n    col = (refFac > 0.) ? mix (col, 0.9 * colR, refFac) : colR;\n  }\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro = roo + dstTrObj * rdo;\n    vn = TrObjNf (ro);\n    if (idTrObj == idWin) col *= vec3 (0.9, 1., 0.9);\n    rd = reflect (rdo, vn);\n    col = mix (col, SkyBgCol (ro, rd), 0.2 + 0.8 * pow (1. - abs (dot (vn, rdo)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, t, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  stDat = Loadv4 (0);\n  carPos = stDat.xyz;\n  carRot = stDat.w;\n  stDat = Loadv4 (1);\n  wlBase = stDat.xyz;\n  wlRad = wlBase.y;\n  wlBase.y = -0.1;\n  wbMid = 0.9;\n  stDat = Loadv4 (2);\n  strRot = stDat.y;\n  wlRot = stDat.zw;\n  carPos.y += wlRad + 0.13;\n  az = pi;\n  el = -0.12 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2.2 * pi * mPtr.x;\n    el -= 0.8 * pi * mPtr.y;\n  } else {\n    t = mod (0.01 * tCur, 2.);\n    az += 1.5 * pi * SmoothBump (0.25, 0.75, 0.25, mod (t, 1.)) * sign (t - 1.);\n    el += 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.45 * pi, -0.03 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -16.);\n  ro.xz += Rot2D (vec2 (0., wlBase.z + wbMid - 0.5), - carRot);\n  ro.y += carPos.y;\n  zmFac = 5.5;\n  dstFar = 100.;\n  sunDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat Length4 (vec2 p)\n{\n  p *= p;\n  return sqrt (sqrt (dot (p, p)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Gold Turbo\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.1415927;\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 carPos, wlBase;\n  vec2 iFrag, wlRot, w;\n  float carRot, cRotN, strRot, wlRad, rTurn, spd, tc, nStep;\n  int pxId;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= 3) discard;\n  init = (iFrame <= 5);\n  if (init) {\n    carPos = vec3 (0.);\n    carRot = 0.;\n    strRot = 0.;\n    wlBase = vec3 (1., 0.5, 2.2);\n    wlRot = vec2 (0.);\n    nStep = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    carPos = stDat.xyz;\n    carRot = stDat.w;\n    stDat = Loadv4 (1);\n    wlBase = stDat.xyz;\n    stDat = Loadv4 (2);\n    nStep = stDat.x;\n    strRot = stDat.y;\n    wlRot = stDat.zw;\n  }\n  wlRad = wlBase.y;\n  ++ nStep;\n  tc = mod (0.003 * nStep, 4.);\n  strRot = 0.1 * pi * SmoothBump (0.3, 0.7, 0.15, mod (tc, 1.)) * sign (mod (tc, 2.) - 1.) *\n     sign (tc - 2.);\n  spd = 0.03;\n  w = vec2 (1.);\n  if (abs (strRot) > 1e-4) {\n    cRotN = carRot - strRot * spd / pi;\n    rTurn = wlBase.z / asin (0.5 * strRot);\n    carPos.xz += rTurn * (sin (carRot - vec2 (0.5 * pi, 0.)) - sin (cRotN - vec2 (0.5 * pi, 0.)));\n    carRot = cRotN;\n    w += vec2 (-1., 1.) * wlBase.x / rTurn;\n  } else {\n    carPos.xz += spd * sin (carRot + vec2 (0., 0.5 * pi));\n  }\n  wlRot += w * spd / wlRad;\n  if      (pxId == 0) stDat = vec4 (carPos, carRot);\n  else if (pxId == 1) stDat = vec4 (wlBase, 0.);\n  else if (pxId == 2) stDat = vec4 (nStep, strRot, wlRot);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}