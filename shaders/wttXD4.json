{
    "Shader": {
        "info": {
            "date": "1580992340",
            "description": "bifurcation diagram towards chaos",
            "flags": 0,
            "hasliked": 0,
            "id": "wttXD4",
            "likes": 4,
            "name": "bifurcation diagram",
            "published": 3,
            "tags": [
                "bifurcationdiagramchaoslogisticmap"
            ],
            "usePreview": 0,
            "username": "ich",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "#define L 128\n\nfloat foo(float y, float r)\n{\n\treturn (r * y) * (1. - y);\n}\n\nfloat bifurcation(float y, float r, int it)\n{\n\tfor (int i = 0; i < it; ++i) {\n        y = foo(y, r);\n    }\n    return y;\n}\n\nfloat[L] bifurcation(float a, float r)\n{\n    float y[L];\n    y[0] = a;\n    for (int i = 1; i < L; ++i) {\n    \ty[i] = foo(y[i - 1], r);\n    }\n    return y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 c = vec3(0);\n    \n    // animated\n    float p = 1. - abs(pow(mod(iTime * .05, 2.) - 1., 3.));\n    // mouse\n    //float p = m.x;\n    \n    // position\n    c.b += smoothstep(.005, .0, abs(dot(uv - vec2(p, 0), vec2(1, 0))));\n    \n    // f(x)\n    c.r += smoothstep(.01, .0, abs(uv.y - bifurcation(.5, p * 4., int(fragCoord.x))));\n\n    // what f(x) 'converges' towards\n    float b[L] = bifurcation(.5, uv.x * 4.);\n    for (int i = L / 2; i < L; ++i) {\n    \tc.g += .3 * smoothstep(.005, .0, abs(uv.y - b[i]));\n    }\n    \n    fragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}