{
    "Shader": {
        "info": {
            "date": "1634583905",
            "description": "potate",
            "flags": 32,
            "hasliked": 0,
            "id": "sdySWh",
            "likes": 27,
            "name": "Day 669",
            "published": 3,
            "tags": [
                "design",
                "poster",
                "mdtmjvm",
                "acidgraphics"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 550
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 539\" by jeyko. https://shadertoy.com/view/slSGz1\n// 2021-06-11 08:12:26\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\nfloat noise(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    p.xy *= rot(1.4);\n    p.x *= 3.;\n    for(float i = 0.; i < 3.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.7;\n        p *= 1.5;\n    }\n    \n    n = sin(n*2.);\n    return n;\n}\n\nvec3 get(vec2 fc, vec2 uv){\n    vec2 coord = fc/iResolution.xy;\n    float chrabamt = 0.;\n    vec3 c = vec3(\n        texture(iChannel0,coord+ chrabamt*vec2(0.00,0.001)).x,\n        texture(iChannel0,coord + chrabamt*vec2(0.001,0.00)).y,\n        texture(iChannel0,coord + chrabamt*vec2(-0.001,0.00)).z\n        );\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //fragCoord += 250.*noise(vec3(uv*2.5,5.))/iResolution.xy;\n    col = get(fragCoord,uv);\n    \n    float no = noise(vec3(uv*2.,35.));\n    //col = mix(col,vec3(0),smoothstep(0.,0.5,max(noise(vec3(uv*2.2 + 0.1,35.)) - 0.5,0.))*0.4);\n    \n    col = mix(col,vec3(1),smoothstep(0.,5.,max(no - 0.5,0.))*.05);\n    \n    //col += min(no - 0.5,0.)*0.02;\n    \n    float n1d = texelFetch(iChannel2,ivec2(mod(fragCoord + vec2(float(iFrame)*0.,0.),256.)),0).x*0.5;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(fragCoord + n1d*200. ,256.)),0).xyz*0.6;\n    \n    \n    //C = smoothstep(0.,1.,C);z\n    \n    //col.xyz = pow(max(col.xyz,0.), vec3(0.55) + n*0.1);\n    \n    \n    \n    col = pow(clamp(col,0.,1.),vec3(0.4545));\n\n    col.xyz += smoothstep(1.,0.,length(col))*n*0.2;\n    \n    col.xyz -= smoothstep(0.,1.,length(col))*n*0.1;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 gg(vec3 p){\n    p.xz *=rot(0.25);\n    p.x += (iTime + sin(iTime))*0.2;\n    vec3 c = vec3(0);\n    p*=4.16;\n    gp = p;\n    float md = 2.;\n    //p.x += iTime + sin(iTime);\n    vec3 id = floor(p/md);\n    //p.x = pmod(p.x,md);\n    c += mod(id.x,2.);\n    c = vec3(dot(c,c));\n    c = clamp(c*20.,0.06,1.);\n    return c;\n}\n    \nvec3 get(vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    float pxSz = fwidth(uv.y);\n    vec3 col = vec3(1);\n\n    \n\n    // 3d\n    {\n        vec3 ro = vec3(0);\n        vec3 rd = normalize(vec3(uv,0.2));\n        rd.yx*=rot(0.5);\n        float t = iTime + sin(iTime + 3.);\n        vec3 p = ro;\n        vec3 att = vec3(1);\n        vec3 C = vec3(0);\n        \n        for(float bnc = 0.; bnc < 1.; bnc++){\n            vec2 box = intersect(p,rd);\n            p = p + rd*box.y;\n            vec3 c = gg(p);\n            //C.xyz += c*att;\n            att *= c;\n            float bncSubCnt = 10.;\n            float ratio = 0.1 + 0.9*floor(mod(gp.y*2.,2.));;\n\n            p += n*0.002;\n            for(float bncSub = 0.; bncSub < bncSubCnt; bncSub++){\n                vec3 diff = hash33(vec3(uv*16.,bncSub + float(iFrame)*0.6));\n                diff = normalize(diff);\n                if(dot(diff,n)<0.)\n                    diff = -diff;\n\n                vec3 brd = reflect(rd,n);\n                brd = mix(-brd,diff,ratio);\n                brd = normalize(brd);\n                vec2 scene = intersect(p,brd);\n                vec3 pp = p + brd * scene.y;\n                vec3 c = gg(pp);\n                C += c*att/bncSubCnt;\n                //att *= c;\n\n                //vec2 \n            }\n        }\n        C = clamp(C,0.,1.);\n        vec2 luv = uv;\n        luv.y += 0.3;\n        float d = sdBox( luv, vec2(0.,0.3) ) - 0.3;\n        \n        //C = mix(vec3(0.8,0.6,0.5)*1.,vec3(1.,0.4,0.1)*0.,C);\n        C = mix(vec3(0.8,0.6,0.5)*1.,vec3(1.,0.6,0.5)*0.2,C);\n        \n        //C = 1.-C*0.5;\n        //col = mix(col,C,smoothstep(pxSz,0.,d));\n        //col = col - (1.-col)*C*1.;\n        //col = mix(col,C,smoothstep(0.9,1.,col));\n        col = mix(col,C,col);\n    \n    }\n    \n        // Left thing\n    {\n        float p = 0.;\n        vec2 luv = uv + vec2(0.5,-0.02);\n        vec2 u = luv*1. + 1. ;\n        float acc = 0.;\n        for(float i = 1.; i < 17.; i++){\n            float mul = 2.*i;\n            if(mod(i,2.) == 0.){\n                p += xor(u.y*mul,u.x*mul + floor(iTime*2. + u.y))*1.;\n                acc += p;\n            } else {\n                u += and(u.x*mul - floor(iTime*4. + u.y) ,u.y*mul)*1.;\n\n                p += xor(u.x*mul + floor(iTime*4. + u.y) ,u.y*mul)*1.;\n                acc += p ;\n            }\n            p = mod(p*1.,2.);\n        }\n        \n        \n        vec3 c = pal(vec3(1.,0.2,0.5),0.5,vec3(3,2,1),1.,acc*20. + iTime);\n        c = pow(abs(c),vec3(0.1,0.2,1));\n        \n        p = clamp(p,0.,1.);\n        vec2 bsz = vec2(0.0,0.0);\n        float d = sdBox( luv, bsz ) - 0.05;\n        bsz += 0.156;\n        d -= 0.001;\n        \n        float db = sdBox( luv, bsz );\n        db = max(  \n            max(db,-abs(d - 0.14)+0.014)  ,\n            -d + 0.14);\n        \n        db = min(db, abs(luv.x - 0.2)-0.001);\n        db = min(db, abs(luv.x - 0.8)-0.001);\n        \n        db = min(db, \n                max(\n                    abs(luv.y - 0.255)-0.001,\n                    -abs(luv.x - 0.5) + 0.3\n                )\n            );\n            \n        // remove maybe\n        db = min(db, \n                max(\n                    abs(luv.y - 0.29)-0.001,\n                    (luv.x - 0.5) + 0.3\n                )\n            );\n        db = min(db, \n                max(\n                    abs(luv.y + 0.256)-0.001,\n                    (luv.x - 0.5) + 0.3\n                )\n            );\n            \n        // star thing\n        float s = 0.06;\n        \n        vec2 lluv = abs(luv) - vec2(0.2,0);\n        float dc = length(lluv) - s;\n        \n        dc = max(dc,lluv.x);\n        lluv = abs(lluv) - s;\n        dc = max(dc,-length(lluv) + s);\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,dc));\n        \n        // aaaaa\n        \n        //db = min(db,sdBox( luv + vec2(bsz.x*2.,0.), bsz ));\n        col = mix(col,vec3(0),smoothstep(pxSz,0.,db));\n        \n        col = mix(col,mix(vec3(0),c,p),smoothstep(pxSz,0.,d - 0.07));\n        \n        //col = mix(col,vec3(p),smoothstep(pxSz,0.,d - 0.07));\n        col = mix(col,vec3(0),smoothstep(pxSz,0.,abs(d - 0.07) - 0.003));\n        \n    }\n    // Top thing\n    {\n        float p = 0.;\n        vec2 luv = uv + vec2(0.,-0.4);\n        vec2 u = luv*1. + 1. ;\n        p = clamp(p,0.,1.);\n        vec2 bsz = vec2(0.1,0.00);\n        float d = sdBox( luv, bsz );\n        float s = 0.02;\n        d -= 0.01;\n        col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n        \n        float db = sdBox( luv, vec2(0.3,0.001) );\n        float dbb = sdBox( -luv, vec2(0.3,0.001) );\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,db));\n        col = mix(col,vec3(0),smoothstep(pxSz,0.,dbb));\n        \n        luv = abs(luv) - vec2(bsz*2.);\n        float dc = length(luv) - s;\n        \n        dc = max(dc,luv.x);\n        luv = abs(luv) - 0.02;\n        dc = max(dc,-length(luv) + s);\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,dc));\n        \n        \n    }\n\n    // deez balls\n    {\n        float range = 3.;\n        float id = floor(iTime/range);\n        float a = abs(sin(id))*10.;\n        float b = abs(sin(id + 1.))*10.;\n        float fact = smoothstep(0.,0.5,fract(iTime/range));\n        float bs;\n        bs = mix(a,b,fact);\n        \n        float ballCnt = 16. + bs;\n        float layerCnt = 2.;\n        for (float ball = 0.; ball < ballCnt; ball++){\n            for (float layer = 0.; layer < layerCnt; layer++){\n                \n                float ttt = mod(iTime + ball/ballCnt,3.);\n                float pump = smoothstep(0.,0.2,ttt)*smoothstep(0.4,0.,ttt);\n    \n                float env = mod((iTime + layer/layerCnt + ball/ballCnt*(2.) + sin(iTime)*0.3)*0.5,0.99);\n                \n                float ballidx = ball/ballCnt*pi*4. +layer/layerCnt*pi*0. + env;\n                vec2 p = vec2(\n                    sin(ballidx),cos(ballidx)\n                    ) *(0. +env*2.5 + pump)*0.1;\n                \n                float size = smoothstep(0.,1.,env)*smoothstep(1.,0.2,env)*0.1 -0.01;\n                //float size = 0.01;\n                col = mix(col,vec3(0),smoothstep(pxSz,0.,length(uv - p) - size));\n                    \n            }\n\n        }\n    \n    }\n    // top left\n    {\n        vec2 luv = uv;\n        luv.x += 0.64;\n        luv.y -= 0.37;\n        // blocks\n        for(float i = 0.; i < 3.; i++){\n            float d = sdBox(luv, vec2(0.007));    \n            vec3 c = pal(vec3(1.,0.2,0.5),0.5,vec3(3,2,1),1.,i + iTime);\n            c = pow(abs(c),vec3(0.1,0.2,1));\n            col = mix(col,c,smoothstep(pxSz,0.,d));\n            \n            d = abs(d) - 0.003;\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n            luv.x -= 0.04;\n        }\n        luv.x -= 0.1;\n        luv.y += 0.0;\n        \n        float range = 1.;\n        float a = abs(sin(iTime));\n        float b = abs(sin(iTime*1.4));\n        float fact = smoothstep(0.,0.5,fract(iTime/range));\n        float id = floor(iTime/range);\n        float bs;\n        if(mod(id,2.) == 0.){\n            bs = mix(a,b,fact);\n        }else {\n            bs = mix(b,a,fact);\n        }\n        \n        float d = sdBox(luv + vec2(bs*2. - 1.,0.)*0.02, vec2(0.007));\n        d = abs(d) - 0.003;\n        luv.y = abs(luv.y);\n        d = min(d,sdBox(luv - vec2(0,0.01),vec2(0.04,0.001)) - 0.001);\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n                \n        \n    }\n    // Bottom thing\n    {\n        float p = 0.;\n        vec2 luv = uv + vec2(-0.01,0.4);\n        vec2 u = luv*1. ;\n        u = abs(u);\n        u.x += u.y;\n        float acc = 0.;\n        float T = iTime + sin(iTime);\n        T *= 0.5;\n        for(float i = 1.; i < 7.; i++){\n            float mul = 2.*i;\n            if(mod(i,2.) == 0.){\n                p += xor(u.y*mul,u.x*mul- T  )*1.;\n            } else {\n                u += and(u.x*mul - T   ,u.y*mul- T)*1.;\n\n                p += xor(u.x*mul  ,u.y*mul)*1.;\n\n            }\n            acc += p + u.x + u.y;\n            p = mod(p*1.,3.);\n        }\n        vec3 c = pal(vec3(1.,0.2,0.5),0.5,vec3(3,2,1),1.,acc + iTime);\n        c = pow(abs(c),vec3(0.1,0.2,1));\n        c = 1.-col*vec3(0.,0.8,0.2)*0.5 + c*0.5;\n        p = clamp(p,0.,1.);\n        vec2 bsz = vec2(0.1,0.0);\n        float d = sdBox( luv, bsz );\n        luv   -= vec2(-0.01,0.);\n        float db = sdBox( luv  , vec2(0.3,0.001) );\n        float dbb = sdBox( -luv , vec2(0.3,0.001) );\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,db));\n        col = mix(col,vec3(0),smoothstep(pxSz,0.,dbb));\n        \n        d = d - 0.03;\n        col = mix(col,mix(vec3(0),c,p),smoothstep(pxSz,0.,d));\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,abs(d) - 0.004));\n        \n        \n        float s = 0.02;\n        luv = abs(luv) - vec2(bsz*3.);\n        float dc = length(luv) - s;\n        \n        dc = max(dc,luv.x);\n        luv = abs(luv) - 0.02;\n        dc = max(dc,-length(luv) + s);\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,dc));\n        \n    }\n    // right\n    {\n        vec2 luv = uv;\n        luv.x -= 0.4;\n        luv.y -= 0.2;\n        // blocks\n        for(float i = 0.; i < 5.; i++){\n            float d = sdBox(luv, vec2(0.007));    \n            vec3 c = pal(vec3(1.,0.2,0.5),0.5,vec3(3,2,1),1.,i + iTime);\n            c = pow(abs(c),vec3(0.1,0.2,1));\n            col = mix(col,c,smoothstep(pxSz,0.,d));\n            \n            d = abs(d) - 0.003;\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n            luv.y += 0.04;\n        }\n        luv.y += 0.02;\n        // balls\n        float balld = 0.2;\n        float balliters = 5.;\n        \n        float env = sin(iTime);\n        float bd = sdBox(luv +vec2(0.,balld*0.79 + env*balld*0.6),vec2(0,balld*(0.4-abs(env)*0.4)));\n        col = mix(col,vec3(0),smoothstep(pxSz,0.,bd-0.003));\n            \n        for(float i = 0.; i < balliters-1.; i++){\n            luv.y += balld/balliters;\n            float d = length(luv);\n            d = abs(d) - 0.004;\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n            luv.y += 0.04;\n        }\n        // other blocks\n        luv.y -= 0.4;\n        luv.x += 0.1;\n        float iters = 5.;\n        for(float i = 0.; i < iters; i++){\n            vec2 u = luv;\n            //u *= rot(i*iters*pi);\n            float d = sdBox(luv, vec2(0.002,0.01));    \n            d = abs(d) - 0.003;\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n            luv.y += 0.04;\n        }\n    }\n    // bottom left\n    {\n        vec2 luv = uv;\n        luv.x += 0.55;\n        luv.y += 0.35;\n        float iters = 15.;\n        for(float i = 0.; i < iters; i++){\n            vec2 u = luv;\n            u *= rot(i/iters*pi*2.);\n            u.y -= 0.02+ 0.03*abs(sin(iTime*2. + i));\n            float d = sdBox(u, vec2(0.00,0.003));    \n            d = abs(d) - 0.002;\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n        }\n        luv.x -= 0.15;\n        luv.y += 0.;\n        /*\n        iters = 8.;\n        float d = 10e5;    \n            \n        for(float i = 0.; i < iters; i++){\n            vec2 u = luv;\n            u *= rot(i/iters*pi*4. + sin(iTime + i));\n            //u.y -= 0.02+ 0.03*abs(sin(iTime*2. + i));\n            float ld = length(u + 0.01) - 0.02*(sin(iTime*2. + i*0.6)) - 0.02;\n            //ld = abs(ld) - 0.002;\n            d = xord(d,ld,0.02);\n        }\n        d = abs(d) - 0.001;\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n        */\n        luv.y += 0.005;\n        float md = 0.015;\n        float range = 4.;\n        vec2 lluv = luv;\n        vec2 id = floor(lluv/md);\n        lluv = pmod(lluv,md);\n        if(abs(id.x) < range && abs(id.y) < range ){\n            float d = length(lluv) - 0.004*sin(dot(id,id) + iTime*5. + sin(iTime*2.) + id.y);\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n        }\n        \n        // other blocks\n        luv.x -= 0.1;\n        iters = 5.;\n        for(float i = 0.; i < iters; i++){\n            vec2 u = luv;\n            //u *= rot(i*iters*pi);\n            float d = sdBox(luv, vec2(0.002,0.01));    \n            d = abs(d) - 0.003;\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n            luv.y += 0.04;\n        }\n        // other blocks\n        luv.x += 0.35;\n        luv.y -= 0.25;\n        iters = 6.;\n        for(float i = 0.; i < iters; i++){\n            vec2 u = luv;\n            float env = smoothstep(1.,0.,abs(i - mod(iTime*2.,iters + 1.) + 1.));\n            u = abs(u) - 0.02*env;\n            //u *= rot(i*iters*pi);\n            float d = sdBox(u, vec2(0.002,0.002));    \n            d = abs(d) - 0.001;\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n            luv.y += 0.02;\n        }\n        \n    }\n    \n    // Upper black block\n    {\n        vec2 luv = uv;\n        luv.y -= 0.56;\n        float d = sdBox(luv,vec2(0.3,0.1));\n        col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n    }\n    // Outer\n    // edges\n    {\n        vec2 luv = uv;\n        luv = abs(luv) - 0.45;\n        \n        luv *= rot(1.*pi*smoothstep(0.,1.,mod(iTime + float(uv.x>0.) - float(uv.y<0.),4.)));\n        float d = length(luv) - 0.02;\n        luv = abs(luv);\n        luv *= rot(-(1.)*pi);\n        d = max(d,-sdBox(luv,vec2(0.005,0.05)));\n        \n        col = mix(col,vec3(0),smoothstep(pxSz,0.,d));\n    }\n    // colorline\n    {\n        vec2 luv = uv;\n        float d = sdBox(luv - vec2(0.62,0.),vec2(0.075,0.5));\n        vec3 c = pal(vec3(1.,0.2,0.5),0.5,vec3(3,2,1),1.,floor(luv.y*15.) + iTime);\n        c = pow(abs(c),vec3(0.1,0.2,1));\n        col = mix(col,c,smoothstep(pxSz,0.,d));\n    }\n    // dark stuff\n    col = mix(col,col*0.,smoothstep(pxSz,0.,abs(uv.x - 0.5) - 0.05));\n    col = mix(col,vec3(0),smoothstep(pxSz,0.,abs(uv.y + 0.5) - 0.05));\n    col = mix(col,vec3(0),smoothstep(pxSz,0.,-((uv.x) - 0.7) - 0.02));\n    col = mix(col,vec3(0),smoothstep(pxSz,0.,((uv.x) + 0.72) - 0.02));\n    \n    // sticker\n    /*\n    {\n        vec2 luv = uv;\n        luv -= vec2(-0.58,-0.37);\n        luv *= rot(0.1);\n        float boxw = 0.2;\n        float db = sdBox(luv,vec2(boxw,0.1));\n        //vec3 c = pal(vec3(0.9,1,0.5),0.5,vec3(3,2,1),1.,floor(luv.y*15.) + iTime);\n        //c = pow(abs(c),vec3(0.2,5,1));\n        for(float i = 0.; i < 3.; i++){\n        \n            float w = 0.07;\n            vec2 lluv = (luv + vec2(boxw*0.25,0))*0.6;\n            lluv -= vec2(boxw*i/7.*1.,0.);\n            //luv *= rot(0.25*i + iTime);\n            \n            lluv.y *= 2.;\n            \n            float d = length(lluv ) - w;\n            d = max(d,-length(abs(lluv) - w) + w);\n            db = max(db,-d);\n\n        }\n        col = mix(col,vec3(0.1,0.9,0.4),smoothstep(fwidth(db),0.,db));\n        \n        \n    }\n    */\n    // boxes\n    {\n        vec2 luv = uv;\n        luv -= vec2(-0.6,0.5);\n        float d = sdBox(luv,vec2(0.06,0.02));\n        //vec3 c = pal(vec3(0.9,1,0.5),0.5,vec3(3,2,1),1.,floor(luv.y*15.) + iTime);\n        //c = pow(abs(c),vec3(0.2,5,1));\n        col = mix(col,vec3(0.9,0.1,0.2)*0.,smoothstep(pxSz,0.,d));\n        \n        luv = uv;\n        luv -= vec2(0.4,0.29);\n        d = sdBox(luv,vec2(0.1,0.02));\n        //vec3 c = pal(vec3(0.9,1,0.5),0.5,vec3(3,2,1),1.,floor(luv.y*15.) + iTime);\n        //c = pow(abs(c),vec3(0.2,5,1));\n        col = mix(col,vec3(0.9,0.1,0.2)*0.,smoothstep(pxSz,0.,d));\n        \n        \n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    float aaSteps = 1.;\n    float pxSz = fwidth(fragCoord.y);\n    for(float i = 0.; i < aaSteps*aaSteps; i++){\n        vec2 coord = fragCoord \n            + (vec2(\n                mod(i,aaSteps),\n                floor(aaSteps)\n            )/aaSteps*2. - 1.)*pxSz/2.;\n        col += get(coord);\n    }\n    col /= aaSteps*aaSteps;\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\n#define T(u) texture(iChannel0,(u)/R)\n\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\nfloat r11(float g){return fract(sin(g*12.5)*4.5);}\n// from iq\nvec2 boxIntersection( in vec3 ro, in vec3 rd, vec3 boxSize, out vec3 outNormal ) \n{\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n    outNormal = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    return vec2( tN, tF );\n}\n// from iq\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n#define xord(a,b,c) min(max(a,-(b) + c),max(b,-(a)))\n    #define xor(a,b) float(int(a)^int(b))\n    #define and(a,b) float(int(a)&int(b))\n    #define or(a,b) float(int(a)|int(b))\n    #define pi acos(-1.)\n    #define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n    #define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n#define pmod(p,a) mod(p,a) - 0.5*a\nvec3 gp;\nvec3 n;\nvec2 intersect(vec3 ro, vec3 rd){\n    //return sphIntersect( ro, rd, vec3(0), 1. );\n    return boxIntersection(ro,rd,vec3(1),n);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}