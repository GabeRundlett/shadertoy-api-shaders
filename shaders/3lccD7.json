{
    "Shader": {
        "info": {
            "date": "1609188116",
            "description": "Awesome fractal noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lccD7",
            "likes": 6,
            "name": "Infinite Map",
            "published": 3,
            "tags": [
                "procedural",
                "map",
                "infinite",
                "fractalnoise",
                "geography"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 155
        },
        "renderpass": [
            {
                "code": "// Hashes from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash21(in vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 Hash22(in vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n\n}\n\nfloat SmoothNoise(in vec2 p) {\n    vec2 cell = floor(p);\n    vec2 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float bl = Hash21(cell);\n    float br = Hash21(cell + vec2(1.0, 0.0));\n    float tl = Hash21(cell + vec2(0.0, 1.0));\n    float tr = Hash21(cell + 1.0);\n\n    return mix(mix(bl, br, local.x), mix(tl, tr, local.x), local.y);\n}\n\nfloat FractalNoise(in vec2 p, in float scale, in float octaves) {\n    p *= scale;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += SmoothNoise(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    uv += 0.1 * iTime;\n\n    float scale = 5.0;\n    float octaves = 5.0;\n\n    float n = FractalNoise(uv, scale, octaves);\n    vec3 color = mix(vec3(0.0, 0.0, 1.0 - n), mix(vec3(0.0, 1.0, 0.0), vec3(0.8, 0.4, 0.0), n * n), smoothstep(0.5 - unit, 0.5 + unit, n));\n\n    vec2 pinPos = floor(uv * 3.0 + 0.5) / 3.0;\n    pinPos += 0.25 * Hash22(pinPos) - 0.125;\n    n = FractalNoise(pinPos, scale, octaves);\n    if (n > 0.5) {\n        float pin = length(uv - pinPos) - 0.02;\n        color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, pin));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}