{
    "Shader": {
        "info": {
            "date": "1482424636",
            "description": "Ray marching test.",
            "flags": 0,
            "hasliked": 0,
            "id": "llyXRR",
            "likes": 3,
            "name": "Ray marching box matrix",
            "published": 3,
            "tags": [
                "raymarchingboxmatrix"
            ],
            "usePreview": 0,
            "username": "morph",
            "viewed": 763
        },
        "renderpass": [
            {
                "code": "const int MAX_ITER = 100;\nconst float MAX_DIST = 32.0;\nconst float EPSILON = 0.001;\n\nvec2 box( vec3 p, vec3 b, float r ) {\n    vec3 c = vec3(4.0,4.0,4.0);\n    vec3 p2 = mod(p,c)-0.5*c;\n\treturn vec2(length(max(abs(p2)-b,0.0))-r,p2.z);\n}\n\nvec2 scene(vec3 p) {\n    return box(p,vec3(.5,.5,.5),.5);\n}\n\nfloat trace(vec3 o, vec3 r) {\n\tfloat t = 0.0;\n    for(int i=0; i<MAX_ITER; ++i) {       \n    \tvec3 p = o + r*t;\n        float d = scene(p).x;\n        t += d*0.5;\n        \n\t\tif (d < EPSILON || t > MAX_DIST)\n        \tbreak;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 eps = vec2(0.0, EPSILON);\n    vec3 normal = normalize(vec3(\n        scene(p + eps.yxx).x - scene(p - eps.yxx).x,\n        scene(p + eps.xyx).x - scene(p - eps.xyx).x,\n        scene(p + eps.xxy).x - scene(p - eps.xxy).x));\n    return normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 c = vec3(0.0, -2.0, -4.0);\n    \n    float angley = iTime*0.5;\n    float anglex = iTime*0.2;\n    vec3 co = vec3(\n                    c.z*sin(angley)+c.x*cos(angley),\n                    c.y,\n                    c.z*cos(angley)-c.x*sin(angley)\n                    );\n    vec3 co2 = vec3(\n                    co.x,\n                    co.y*cos(anglex)-co.z*sin(anglex),\n                    co.y*sin(anglex)+co.z*cos(anglex)\n                    );\n    vec3 cameraOrigin = co2;\n    \n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 upDirection = vec3(0.0, 1.0, 0.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n    vec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n\tvec3 cameraUp = cross(cameraDir, cameraRight);   \n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rayDir = normalize(cameraRight * uv.x + cameraUp * uv.y + cameraDir);\n    \n    vec3 o = cameraOrigin;\n    vec3 r = rayDir;\n        \n    float t = trace(o,r);\n    vec3 p = o+r*t;\n    \n    vec3 normal = getNormal(p);\n\tfloat diffuse = max(0.0, dot(-rayDir, normal));\n    float specular = pow(diffuse, 32.0);\n\n   \tfloat c2=diffuse+specular;\n    vec3 color=vec3(c2*1.5,c2,c2*0.5);\n    color *= pow(diffuse+specular,2.0);\n    color /= abs(p.z);\n    \n    fragColor = vec4(color, 1.0);   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}