{
    "Shader": {
        "info": {
            "date": "1672175595",
            "description": "nothing here.",
            "flags": 0,
            "hasliked": 0,
            "id": "dls3RX",
            "likes": 6,
            "name": "StickMan - 2d Raytracing",
            "published": 3,
            "tags": [
                "raytracing",
                "reflection",
                "ray",
                "sun",
                "cloud",
                "circle",
                "raytrace",
                "square",
                "pink",
                "ball",
                "box",
                "tracing",
                "ground",
                "rect",
                "dark",
                "man",
                "magenta",
                "stick",
                "stickman",
                "ref"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\n//--------------------- scene ---------------------//\n\n#define CircsLen 7\n#define RectsLen 10\n\nstruct Circ{\n\tvec2 pos;\n  float rad;\n} [CircsLen] circs;\n\nstruct Rect{\n\tvec2 pos;\n  vec2 size;\n  float ang;\n  vec2 axis;\n} [RectsLen] rects;\n\nvoid initScene(){\n\t//stick man\n\tcircs[0] = Circ(vec2(0.0,0.05),0.1);\n\trects[0] = Rect(vec2(0.0,-0.1),vec2(0.02,0.25),0.0,vec2(0));\n\trects[1] = Rect(vec2(0.0,0.14-0.2),vec2(0.1,0.02),0.5,vec2(0.1,0.0));\n\trects[2] = Rect(vec2(0.0,0.14-0.2),vec2(0.1,0.02),3.14-0.5,vec2(0.1,0.0));\n\trects[3] = Rect(vec2(0.0,-0.34),vec2(0.1,0.02),0.9,vec2(0.1,0.0));\n\trects[4] = Rect(vec2(0.0,-0.34),vec2(0.1,0.02),3.14-0.9,vec2(0.1,0.0));\n\tcircs[5] = Circ(vec2(0.18,0.04-0.2),0.02);\n\tcircs[6] = Circ(vec2(-0.18,0.04-0.2),0.02);\n\t\n\t//sun\n\tcircs[1] = Circ(vec2(0.3,0.4),0.05);\n\trects[6] = Rect(vec2(0.3,0.4),vec2(0.085,0.005),0.0,vec2(0));\n\trects[7] = Rect(vec2(0.3,0.4),vec2(0.005,0.085),0.0,vec2(0));\n\trects[8] = Rect(vec2(0.3,0.4),vec2(0.005,0.085),0.8,vec2(0));\n\trects[9] = Rect(vec2(0.3,0.4),vec2(0.085,0.005),0.8,vec2(0));\n\t\n\t//cloud\n\tcircs[2] = Circ(vec2(-0.2,0.3),0.09);\n\tcircs[3] = Circ(vec2(-0.1,0.3),0.045);\n\tcircs[4] = Circ(vec2(-0.3,0.3),0.05);\n\t\n\t//ground\n\trects[5] = Rect(vec2(0.0,-0.78),vec2(10.0,0.3),0.0,vec2(0));\n}\n\n//--------------- 2d primitive sdfs ---------------//\n\n#define sdf(c,s) mix(col,c,smoothstep(3.0/iResolution.y,0.0,s))\n#define sdf1(c,s) (c * clamp(smoothstep(3.0/iResolution.y,0.0,s),0.0,1.0))\n\nfloat sdCirc(vec2 p,float r){\n\treturn length(p) - r;\n}\n\nfloat sdRect(vec2 p,vec2 b){\n\tvec2 q = abs(p) - b;\n\treturn length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\nfloat sdLine(vec2 p,float r,vec2 v1,vec2 v2){\n\tvec2 a = p - v1, b = v2 - v1;\n\tfloat h = clamp(dot(a,b)/dot(b,b),0.0,1.0);\n\treturn length(a - b*h) - r;\n}\n\n//------------------- raytracing ------------------//\n\nstruct Ray{\n\tvec2 ro;\n\tvec2 rd;\n};\n\nvec3 iUn(vec3 a,vec3 b){\n\treturn b.z > 0.0 && b.z < a.z ? b : a;\n}\n\nvec3 iCirc(vec2 ro,vec2 rd,float r){\n\tfloat b = dot(ro,rd);\n\tfloat c = dot(ro,ro) - r*r;\n\tfloat h = b*b - c;\n\tfloat t = -b - sqrt(h);\n\tif(h < 0.0) return vec3(0,0,-1);\n\tvec2 nor = (ro+rd*t)/r;\n\treturn vec3(nor,t);\n}\n\nvec3 iRect(vec2 ro,vec2 rd,vec2 b){\n\tvec2 m = 1.0/rd;\n\tvec2 n = ro*m;\n\tvec2 k = abs(m) * b;\n\tvec2 t1 = -n - k;\n\tvec2 t2 = -n + k;\n\tfloat tN = max(t1.x,t1.y);\n\tfloat tF = min(t2.x,t2.y);\n\tfloat t = tN;\n\tif(tN > tF || tF < 0.0) return vec3(0,0,-1);\n\tvec2 nor = tN > 0.0 ? step(vec2(tN),t1) : step(t2,vec2(tF));\n\tnor *= sign(-rd);\n\treturn vec3(nor,t);\n}\n\n//xy: surface normal\n//z: scene sdf\n//w: t (I do not know what it means)\nvec4 raytrace(vec2 p,Ray ray){\n\tvec4 hit = vec4(0,0,999999999999.9,999999999999.9);\n\t\n\tfor(int i=0;i<CircsLen;i++){\n\t\tCirc h = circs[i];\n\t\thit.xyw = iUn(hit.xyw,iCirc(ray.ro-h.pos,ray.rd,h.rad));\n\t\thit.z = min(hit.z,sdCirc(p-h.pos,h.rad));\n\t}\n\n\tfor(int i=0;i<RectsLen;i++){\n\t\tRect h = rects[i];\n\t\tvec2 ro = (ray.ro - h.pos) * rot(h.ang) - h.axis;\n\t\tvec2 rd = ray.rd * rot(h.ang);\n\t\tvec3 inter = iRect(ro,rd,h.size);\n\t\tinter.xy *= rot(-h.ang);\n\t\thit.xyw = iUn(hit.xyw,inter);\n\t\thit.z = min(hit.z,sdRect((p-h.pos)*rot(h.ang)-h.axis,h.size));\n\t}\n\t\n\treturn hit;\n}\n\n//------------------- main loop -------------------//\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = 0.8*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 mo = 0.8*(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.06);\n  \n  initScene();\n  \n  Ray ray;\n  ray.ro = mo;\n  ray.rd = normalize(vec2(0,1)) * rot(iTime*0.25);\n  vec4 hit = raytrace(uv,ray);\n  vec2 pos = ray.ro + ray.rd*hit.w;\n  vec2 nor = hit.xy;\n  \n  //draw scene\n  col = sdf(vec3(1,0,0.5),hit.z);\n  \n  // draw rays //\n  //main ray\n  //col += sdf1(vec3(0.2),sdLine(uv,0.0025,ray.ro,pos));\n  col += sdf1(vec3(0.2),sdCirc(uv-ray.ro,0.015));\n  //normal ray\n  //col += sdf1(vec3(0,1,0.5),sdLine(uv,0.005,pos,pos+nor*0.1));\n  \n  for(int i=1;i<6;i++){\n    hit = raytrace(uv,ray);\n    pos = ray.ro + ray.rd*hit.w;\n    nor = hit.xy;\n    col += sdf1(vec3(1.0/float(i*2)),sdLine(uv,0.0025,ray.ro,pos));\n    ray.ro = pos;\n    ray.rd = reflect(ray.rd,nor);\n  }\n  \n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}