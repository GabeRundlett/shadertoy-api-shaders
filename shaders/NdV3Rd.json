{
    "Shader": {
        "info": {
            "date": "1632072288",
            "description": "kurzgesagt inspired black hole (https://www.youtube.com/channel/UCsXVk37bltHxD1rDPwtNM8Q)",
            "flags": 32,
            "hasliked": 0,
            "id": "NdV3Rd",
            "likes": 18,
            "name": "Artistic Black hole",
            "published": 3,
            "tags": [
                "blackhole",
                "kurzgesagt"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 896
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 doBloom(vec2 uv, float blur, float threshold)\n{\n    vec3 col;\n    int cnt = 20;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = (fi/fcnt);\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 3.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*an*blur*.1;\n        vec3 smple = texture(iChannel0, p).xyz;\n        if (length(smple) > threshold)\n            col += smple;\n    \t\n        \n    }\n    \n    return col/float(cnt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n\n    float bloomIntensity = 224./640.;  \n    vec3 bloomSample = doBloom(uv, 5./360., 237./ 640.);\n    bloomSample = pow(bloomSample, vec3(0.8));\n    \n    col = col + (bloomSample*bloomIntensity);\n    \n\n\n    col = mix(col, col.zyx, pow(sat(length(cuv*2.)),4.));\n\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(1000., -1.);\n\n   acc = _min(acc, vec2(length(p)-1., 0.));\n\n    float plane = max(abs(p.y)-.01, length(p.xz)-3.);\n    acc = _min(acc, vec2(plane, 1.));\n\n    return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\nvec3 gradient(float f)\n{\n    vec3 colors[8];\n    colors[0] = vec3(1.,1.,1.);\n    colors[1] = vec3(1.,1.,1.);\n    colors[2] = vec3(1.000,0.784,0.322);\n    colors[3] = vec3(1.000,0.682,0.322);\n    colors[4] = vec3(0.973,0.325,0.051);\n    colors[5] = vec3(0.882,0.176,0.529)*.7;\n    colors[6] = vec3(0.349,0.141,0.600)*.5;\n    colors[7] = vec3(0.349,0.141,0.600)*.25;\n    f = sat(f);\n    return colors[int(7.0*f)];\n    \n}\nvec3 finalPos;\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    finalPos = ro;\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n        {\n\n            if (res.y == 0.)\n                accCol *= .75;\n            return vec3(res.x, distance(p, ro), res.y);\n        }\n        rd = normalize(rd-normalize(p)*.01*pow(1.-sat(length(p)-1.5),5.5));\n        accCol += .007*gradient(length(p)-1.6)*(1.-sat(res.x / .5));\n        p+= rd*res.x*.15;\n        finalPos = p;\n    }\n    return vec3(-1.);\n}\n\n\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.078,0.043,0.157)*.35;\n    \n\n    uv *= r2d(.3);\n    float dist = 9.+sin(iTime*.35);\n    float t = iTime*.1;\n    vec3 ro = vec3(dist*cos(t),-2.+sin(iTime*.5),dist*sin(t));\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n\n    vec3 res = trace(ro, rd, 512);\n    bool isHorizon = false;\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.x;\n        float idx = floor(length(finalPos)*7.);\n        if (res.z == 1.)\n            col += gradient(length(finalPos)-1.6)*mix(.7,1.,(sat(length(finalPos)-1.5))*sat(400.*sin(.25*pow(idx,.75)*iTime+5.*atan(finalPos.z, finalPos.x))));\n        else\n        {\n            col = vec3(0.);\n            isHorizon = true;\n        }\n    }\n    col += accCol;\n    vec3 finalDir = normalize(ro-finalPos);\n    if (!isHorizon)\n    {\n        col += 1.5*sat(length(uv*1.5))*pow(texture(iChannel0, 3.*vec2(atan(finalDir.z, finalDir.x), acos(finalDir.y))).x,10.);\n        vec2 uvSky = 2.*vec2(atan(finalDir.z, finalDir.x), acos(finalDir.y));\n        col += 1.2*vec3(0.984,0.639,0.455)*pow(texture(iChannel0, uvSky).x,2.)*(1.-sat(5.*abs(dot(finalDir, vec3(0.,1.,0.)))));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    uv *= 1.5;\n    vec3 col = rdr(uv);\n    col = pow(col, vec3(1.2));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}