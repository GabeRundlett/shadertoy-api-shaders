{
    "Shader": {
        "info": {
            "date": "1631182254",
            "description": "Pseudo-Mondrian in 3D (generalization of 2D \"Mondrian in Motion\")",
            "flags": 32,
            "hasliked": 0,
            "id": "7sG3zD",
            "likes": 13,
            "name": "Dynamic 3D Mondrian",
            "published": 3,
            "tags": [
                "dynamics",
                "art",
                "mondrian"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "// \"Dynamic 3D Mondrian\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0  // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec3 OrAng (vec3 p);\nvec3 OrAngT (vec3 p);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nconst int nbEdge = 5;\nconst int nBall = nbEdge * nbEdge * nbEdge;\n\nvec3 ltDir, hbSize, boxAng, vnBlk, vnBox;\nvec2 qBlk;\nfloat tCur, dstFar, hbMarg, bCylRad, bCylHt, baseRad, baseUp, szBlk;\nint idObj, idBlk;\nconst float pi = 3.1415927;\nconst int txOff = 4;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 sLen;\n  vec3 q;\n  float dMin, d, tr, f, b;\n  dMin = dstFar;\n  p.y -= baseUp;\n  q = abs (OrAng (p));\n  sLen = vec4 (hbSize - hbMarg - 0.1, 0.);\n  d = min (min (\n     PrRoundBoxDf (q - sLen.wyz, sLen.xww + 0.05, 0.05),\n     PrRoundBoxDf (q - sLen.xwz, sLen.wyw + 0.05, 0.05)),\n     PrRoundBoxDf (q - sLen.xyw, sLen.wwz + 0.05, 0.05));\n  DMIN (1);\n  b = length (hbSize.xy - hbMarg);\n  f = 0.5 * (baseUp - 0.05);\n  tr = 0.25;\n  sLen.xyz = vec3 (b + 6. * tr, f - tr, hbSize.z - hbMarg + 2. * tr);\n  d = PrCylDf (vec3 (q.xy, abs (q.z) - sLen.z + tr), 0.8 * tr, tr);\n  DMIN (3);\n  q = p;\n  q.xz = Rot2D (q.xz, boxAng.y);\n  q.yz = Rot2D (q.yz, boxAng.x);\n  d = min (PrRoundBoxDf (vec3 (q.xy, abs (q.z) - sLen.z),\n     vec3 (b + 4. * tr, tr, tr) - 0.1, 0.1),\n     PrRoundBoxDf (vec3 (abs (q.x) - b - 3. * tr, q.yz),\n     vec3 (tr, tr, sLen.z + tr) - 0.1, 0.1));\n  DMIN (2);\n  d = PrCylDf (vec3 (abs (q.x) - b - 4.5 * tr, q.yz).yzx, 0.8 * tr, tr);\n  DMIN (3);\n  q = p;\n  q.xz = Rot2D (q.xz, boxAng.y);\n  d = PrRoundBoxDf (vec3 (abs (q.xz) - sLen.xz, q.y + sLen.y).xzy,\n     vec3 (tr, f, tr) - 0.1, 0.1);\n  d = min (d, PrRoundBoxDf (vec3 (abs (q.x) - sLen.x, abs (q.y + sLen.y) - sLen.y, q.z),\n     vec3 (tr, tr, sLen.z + tr) - 0.1, 0.1));\n  d = min (d, PrRoundBoxDf (vec3 (q.xz, q.y + 2. * sLen.y).xzy,\n     vec3 (sLen.x, tr, tr) - 0.1, 0.1));\n  DMIN (2);\n  d = PrCylDf (vec3 (q.xz, q.y + 2. * sLen.y), 2. * tr, 1.4 * tr);\n  DMIN (3);\n  q = p;\n  q.y -= - 2. * f - 0.05;\n  d = PrRoundCylDf (q.xzy, baseRad, 0.1, 0.15);\n  DMIN (4);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 v, tm, tp, u;\n  float dMin, dn, df, sz;\n  dMin = dstFar;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (txOff + 2 * n);\n    v = (ro - p.xyz) / rd;\n    sz = 0.5 * p.w - 0.15;\n    tp = sz / abs (rd) - v;\n    tm = - tp - 2. * v;\n    dn = Maxv3 (tm);\n    df = Minv3 (tp);\n    if (df > 0. && dn < min (df, dMin)) {\n      dMin = dn;\n      vnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n      idBlk = n;\n      szBlk = sz;\n      u = (v + dn) * rd;\n    }\n  }\n  if (dMin < dstFar) qBlk = vec2 (dot (u.zxy, vnBlk), dot (u.yzx, vnBlk));\n  return dMin;\n}\n\nfloat BoxHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  v = ro / rd;\n  tp = (hbSize - hbMarg - 0.04) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vnBox = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, rob, rdb, vn;\n  float dstBlk, dstObj, db, nDotL, reflFac;\n  reflFac = 1.;\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    if (k == 0 || reflFac < 1.) {\n      rob = OrAng (ro - vec3 (0., baseUp, 0.));\n      rdb = OrAng (rd);\n      db = BoxHit (rob, rdb);\n      dstBlk = (db < dstFar) ? BlkHit (rob, rdb) : dstFar;\n      dstObj = ObjRay (ro, rd);\n    }\n    if (k == 0) {\n      if (dstObj < min (dstBlk, dstFar) && idObj == 4 && length (ro.xz + dstObj * rd.xz) < \n         baseRad - 0.3) {\n        ro += dstObj * rd;\n        vn = ObjNf (ro);\n        rd = reflect (rd, vn);\n        ro += 0.01 * rd;\n        reflFac = 0.8;\n      }\n    }\n  }\n  if (dstObj < min (dstBlk, dstFar)) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) col = vec3 (0.85, 0.8, 0.8);\n    else if (idObj == 2) col = vec3 (0.9, 0.9, 0.8);\n    else if (idObj == 3) col = vec3 (0.8, 0.7, 0.7);\n    else if (idObj == 4) col = vec3 (0.9, 0.9, 0.95);\n    nDotL = max (dot (vn, ltDir), 0.);\n    col = col * (0.2 + 0.2 * max (dot (vn, - ltDir), 0.) + 0.8 * nDotL * nDotL +\n       0.2 * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.));\n  } else if (dstBlk < dstFar) {\n    ro += dstBlk * rd;\n    vn = OrAngT (vnBlk);\n    col = HsvToRgb (vec3 (mod (33. * float (idBlk) / float (nBall), 1.), 0.7, 1.)) *\n       (0.2 + 0.8 * smoothstep (0.06, 0.1, szBlk - Maxv2 (abs (qBlk))));\n    col = col * (0.2 + 0.2 * max (dot (vn, - ltDir), 0.) + 0.8 * max (dot (vn, ltDir), 0.) +\n       0.2 * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.));\n  } else {\n    col = vec3 (0., 0., 0.1) * (0.85 + 0.15 * SmoothBump (0.3, 0.7, 0.15,\n       mod (32. * atan (rd.z, rd.x) / pi, 1.))) + 80. * pow (1. - 0.6 * abs (dot (rd,\n       VaryNf (512. * vec3 (rd.xz, rd.y / length (rd.xz) + 0.005 * tCur).xzy, rd, 2.))), 8.);\n  }\n  if (db < min (dstObj, dstFar)) {\n    ro = rob + db * rdb;\n    col *= 0.95;\n    vn = OrAngT (vnBox);\n    col = mix (col, vec3 (0.7, 0.7, 0.75) * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.2 * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.), pow (1. - abs (dot (rd, vn)), 5.));\n  }\n  col *= reflFac;\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, float slVal, float msMode)\n{\n  vec4 wgBx[2];\n  vec3 c;\n  vec2 ut, ust;\n  float asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.45 * asp, 0., 0.015 * asp, 0.2);\n  wgBx[1] = vec4 (0.45 * asp, -0.44, 0.02, 0.);\n  c = vec3 (0.3, 1., 0.3);\n  ut = 0.5 * uv - wgBx[0].xy;\n  ust = abs (ut) - wgBx[0].zw * vec2 (0.7, 1.);\n  if (Maxv2 (ust) < 0.) col = (Minv2 (abs (ust)) * canvas.y < 2.) ? 0.8 * c : col;\n  ut.y -= (slVal - 0.5) * 2. * wgBx[0].w;\n  if (abs (length (ut * vec2 (1., 2.)) - 0.02) * canvas.y < 2.) col = c;\n  ut = 0.5 * uv - wgBx[1].xy;\n  if (length (ut) < wgBx[1].z) col = mix (((msMode > 0.) ? c.grb : c),\n     col, smoothstep (2., 4., abs (length (ut) - 0.02) * canvas.y));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, uvv;\n  float el, az, asp, zmFac, sr, slVal, msMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  hbSize = stDat.xyz;\n  baseRad = 2.8 * hbSize.x;\n  msMode = stDat.w;\n  stDat = Loadv4 (1);\n  boxAng = stDat.xyz;\n  slVal = boxAng.z / (2. * pi);\n  stDat = Loadv4 (3);\n  el = stDat.x;\n  az = stDat.y;\n  vuMat = StdVuMat (el, az);\n  bCylRad = 56.;\n  bCylHt = 14.;\n  ro = vuMat * vec3 (0., -0.2 * bCylHt, -0.95 * bCylRad);\n  hbMarg = 0.4;\n  baseUp = 1.2 * length (hbSize - hbMarg) + 0.05;\n  ro.y += 0.5 * bCylHt;\n  zmFac = 5.5;\n  dstFar = 20. * length (hbSize);\n  ltDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col = ShowWg (uv, canvas, col, slVal, msMode);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nvec3 OrAng (vec3 p)\n{\n  p.xz = Rot2D (p.xz, boxAng.y);\n  p.yz = Rot2D (p.yz, boxAng.x);\n  p.xy = Rot2D (p.xy, boxAng.z);\n  return p;\n}\n\nvec3 OrAngT (vec3 p)\n{\n  p.xy = Rot2D (p.xy, - boxAng.z);\n  p.yz = Rot2D (p.yz, - boxAng.x);\n  p.xz = Rot2D (p.xz, - boxAng.y);\n  return p;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. -\n     3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  }\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Dynamic 3D Mondrian\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nbEdge = 5;\nconst int nBall = nbEdge * nbEdge * nbEdge;\n\nvec3 hbSize, gVec;\nfloat nStep, fOvlap, fricN, fricS, fricT, delT;\nconst float txRow = 128.;\nconst float pi = 3.1415927;\nconst int txOff = 4;\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, inout vec3 am)\n{\n  vec4 p;\n  vec3 rmN, vmN, dr, dv;\n  float rSep, h, fc;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (txOff + 2 * n);\n    rmN = p.xyz;\n    dr = rm - rmN;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) {\n      fc = fOvlap * (1. / rSep - 1.);\n      vmN = Loadv4 (txOff + 2 * n + 1).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n    }\n  }\n}\n\nvoid BdyInt (vec3 rm, vec3 vm, float diam, inout vec3 am)\n{\n  vec4 drw;\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = VAR_ZERO; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n    }\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out float diam)\n{\n  vec4 p;\n  vec3 am;\n  float fDamp, grav, ms;\n  fOvlap = 1000.;\n  fricN = 0.1;\n  fricT = 0.1;\n  fricS = 0.5;\n  fDamp = 0.0001;\n  grav = 0.1;\n  p = Loadv4 (txOff + 2 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  p = Loadv4 (txOff + 2 * mId + 1);\n  vm = p.xyz;\n  ms = diam * diam;\n  am = vec3 (0.);\n  PairInt (mId, rm, vm, am);\n  BdyInt (rm, vm, diam, am);\n  am -= grav * gVec + fDamp * vm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out float diam)\n{\n  float mIdf, nbE;\n  mIdf = float (mId);\n  nbE = float (nbEdge);\n  rm = 0.95 * (floor (vec3 (mod (mIdf, nbE), mod (mIdf, nbE * nbE) / nbE,\n     mIdf / (nbE * nbE))) - 0.5 * (nbE - 1.));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)) - 0.5);\n  diam = 1. + Hashff (mIdf + 0.1);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, wgBx[2], stDat, p;\n  vec3 rm, vm, boxAng;\n  vec2 iFrag, canvas, ust;\n  float el, az, asp, diam, slVal, msMode;\n  int mId, pxId, wgSel, wgReg;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * nBall + txOff) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= txOff) mId = (pxId - txOff) / 2;\n  else mId = -1;\n  wgReg = -2;\n  doInit = (iFrame <= 5);\n  asp = canvas.x / canvas.y;\n  delT = 0.005;\n  if (doInit) {\n    hbSize = 0.7 * vec3 (nbEdge) + 0.5;\n    nStep = 0.;\n    wgSel = -1;\n    el = -0.12 * pi;\n    az = 0.;\n    slVal = 0.75;\n    boxAng = vec3 (0., -0.5 * pi, 2. * pi * slVal);\n    msMode = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    hbSize = stDat.xyz;\n    msMode = stDat.w;\n    stDat = Loadv4 (1);\n    boxAng = stDat.xyz;\n    slVal = boxAng.z / (2. * pi);\n    stDat = Loadv4 (2);\n    mPtrP.xyz = stDat.xyz;\n    stDat = Loadv4 (3);\n    el = stDat.x;\n    az = stDat.y;\n    wgSel = int (stDat.z);\n    nStep = stDat.w;\n    ++ nStep;\n  }\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.45 * asp, 0., 0.015 * asp, 0.2);\n    wgBx[1] = vec4 (0.45 * asp, -0.44, 0.02, 0.);\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) - wgBx[0].zw;\n    if (max (ust.x, ust.y) < 0.) {\n      wgReg = 0;\n      if (mPtrP.z <= 0.) wgSel = wgReg;\n    } else if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[1].xy) < wgBx[1].z) {\n      if (mPtrP.z <= 0.) msMode = 1. - msMode;\n    } else if (wgSel < 0) {\n      if (msMode == 0.) {\n        boxAng.y = -0.5 * pi - 2. * pi * mPtr.x;\n        boxAng.x = - 2. * pi * mPtr.y;\n      } else {\n        az = 2. * pi * mPtr.x;\n        el = clamp (-0.1 * pi + 0.8 * pi * mPtr.y, -0.35 * pi, -0.05 * pi);\n      }\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n    boxAng = mod (boxAng + pi * vec3 (0.0003, 0.00031, 0.00032), 2. * pi);\n    slVal = boxAng.z / (2. * pi);\n  }\n  if (wgSel == 0) {\n    slVal = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n    boxAng.z = 2. * pi * slVal;\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), boxAng.x));\n  gVec.xy = Rot2D (gVec.xy, boxAng.z);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, diam);\n    else Step (mId, rm, vm, diam);\n  }\n  if      (pxId == 0) stDat = vec4 (hbSize, msMode);\n  else if (pxId == 1) stDat = vec4 (boxAng, 0.);\n  else if (pxId == 2) stDat = mPtr;\n  else if (pxId == 3) stDat = vec4 (el, az, float (wgSel), nStep);\n  else {\n    mId = pxId - (txOff + 2 * mId);\n    p = (mId == 0) ? vec4 (rm, diam) : vec4 (vm, 0.);\n  }\n  Savev4 (pxId, ((pxId >= txOff) ? p : stDat), fragColor, fragCoord);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}