{
    "Shader": {
        "info": {
            "date": "1468258725",
            "description": "Support visuals for this video: [url]https://www.youtube.com/watch?v=p-R0druZiTs[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XdySR3",
            "likes": 26,
            "name": "x^y = y^x",
            "published": 3,
            "tags": [
                "2d",
                "mathematics",
                "maths"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2676
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n// Shader for this video: https://www.youtube.com/watch?v=p-R0druZiTs\n\n\nconst float ke  = 2.71828182846;\nconst float kpi = 3.14159265359;\n\nfloat func( vec2 p )\n{\n    float res = 0.0;\n    \n    if( p.x>1.01 && p.y>1.01)\n    {\n        res = abs( log(p.x)/p.x - log(p.y)/p.y);\n    }\n\telse if( p.x>0.5 && p.y<-0.5)\n    {\n        float f = abs( log(p.x)/p.x - log(abs(p.y))/p.y);\n        float d = clamp(abs(fract( p.x*0.5 + 0.25 )/0.5 - 0.5)*2.0,0.0,1.0);\n        res = 1.0 - (1.0-f)*(1.0-d);\n    }\n    else if( p.x<-0.5 && p.y>0.5)\n    {\n        float f = abs( log(p.y)/p.y - log(abs(p.x))/p.x);\n        float d = clamp(abs(fract( p.y*0.5 + 0.25 )/0.5 - 0.5)*2.0,0.0,1.0);\n        res = 1.0 - (1.0-f)*(1.0-d);\n    }\n    else\n    {\n        float xya = (p.x>=0.0) ? 0.0 : kpi*p.y;\n        float yxa = (p.y>=0.0) ? 0.0 : kpi*p.x;\n        vec2 xy = pow(abs(p.x),p.y)*vec2(cos(xya),sin(xya));\n        vec2 yx = pow(abs(p.y),p.x)*vec2(cos(yxa),sin(yxa));\n        res = length( xy - yx );\n    }\n    \n    return res;\n}    \n\nfloat gunc( vec2 p )\n{\n    return log(abs(p.x))/p.x - log(abs(p.y))/p.y;\n}    \n\n\nfloat sc = 25.0;\nvec2 ce = 1.0*vec2(ke);\n\nvec2 map( in vec2 pixel )\n{\n    return ce + sc*(-0.5+pixel / iResolution.y);\n}\n\nfloat rings( in vec2 p, in vec2 c, in float r, in float t )\n{\n    float d = abs(length( p*sign(p.y) - c) - r) - t;\n    float fw = fwidth(d);\n    return 1.0 - smoothstep( -0.5*fw, 0.5*fw, d );\n}\nfloat ring( in vec2 p, in vec2 c, in float r, in float t )\n{\n    float d = abs(length( p - c) - r) - t;\n    float fw = fwidth(d);\n    return 1.0 - smoothstep( -0.5*fw, 0.5*fw, d );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = map( fragCoord );\n\n    vec3 col = vec3(0.35);\n    col *= 1.0 + 0.1*mod( floor(p.x) + floor(p.y), 2.0 );\n    \n    if( (p.y>0.0 && p.x>0.0) ) col.xy *= vec2(1.4,1.3);\n    if( !(p.y*p.x>0.0 ) ) col.yz *= 1.3;\n    if( (p.y<0.0 && p.x<0.0) ) col *= vec3(1.1,1.4,1.2);\n\n    float e = 0.0001;\n\n  \t//------------\n\n    if( p.x<0.0 && p.y<0.0 )\n    {\n        float d = fract( (p.x - p.y)*0.5 + 0.25 )/0.5;\n        d = 1.0 - smoothstep( 0.5, 2.0, abs(d-0.5)/(sc/iResolution.y) );\n        col = mix( col, vec3(0.3,0.6,0.8), d );\n    }\n\n    if( p.x>0.0 && p.y<0.0 )\n    {\n        float d = fract( p.x*0.5 + 0.25 )/0.5;\n        d = 1.0 - smoothstep( 0.5, 2.0, abs(d-0.5)/(sc/iResolution.y) );\n        col = mix( col, vec3(0.3,0.6,0.8), d );\n    }\n    if( p.x<0.0 && p.y>0.0 )\n    {\n        float d = fract( p.y*0.5 + 0.25 )/0.5;\n        d = 1.0 - smoothstep( 0.5, 2.0, abs(d-0.5)/(sc/iResolution.y) );\n        col = mix( col, vec3(0.3,0.6,0.8), d );\n    }\n\n    //----------------\n    \n    col *= smoothstep( 0.5, 3.0, abs(p.x)/(sc/iResolution.y) );\n    col *= smoothstep( 0.5, 3.0, abs(p.y)/(sc/iResolution.y) );\n\n    //----------------\n    \n    {    \n        float f = gunc(p);\n        vec2 gra = vec2(gunc(p + vec2(e,0.0)) - gunc(p - vec2(e,0.0)),\n                        gunc(p + vec2(0.0,e)) - gunc(p - vec2(0.0,e)))/(2.0*e);\n    \n        float d = abs(f) / length( gra );\n        float g = 1.0-smoothstep( 0.5, 2.0, d/(sc/iResolution.y) );\n    \n        g *= step( 0.1, abs(p.y) );\n        g *= step( 0.1, abs(p.x) );\n        \n        col = mix( col, vec3(0.3,0.6,0.8), g );\n\t}    \n\n  \t//------------\n\n    {\n        float f = func(p);\n        vec2 gra = vec2(func(p + vec2(e,0.0)) - func(p - vec2(e,0.0)),\n                        func(p + vec2(0.0,e)) - func(p - vec2(0.0,e)))/(2.0*e);\n    \n        float d = abs(f) / length( gra );\n        float g = 1.0-smoothstep( 0.5, 2.0, d/(sc/iResolution.y) );\n\n        if( (p.y<0.0 && abs(p.x)<-p.y*0.1) ||\n           (p.x<0.0 && abs(p.y)<-p.x*0.1))\n        {\n        }\n        else\n        {\n            col = mix( col, vec3(1.0,1.0,0.0), g );\n\n        }\n\t}\n    \n    //------------\n    \n    col = mix( col, vec3(1.0,0.0,0.0), rings(p,vec2(2.0,4.0), 0.2, 0.05 ) );\n    col = mix( col, vec3(1.0,0.0,0.0), rings(p,vec2(4.0,2.0), 0.2, 0.05 ) );\n    col = mix( col, vec3(1.0,1.0,1.0), ring(p,vec2(ke,ke), 0.2, 0.03 ) );\n\n    //------------\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}