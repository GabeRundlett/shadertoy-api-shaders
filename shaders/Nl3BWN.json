{
    "Shader": {
        "info": {
            "date": "1663083593",
            "description": "Fork of Finite Water by overlii \n\nTreating the render window as a kind of Chladni plate. Fun to watch the modes.",
            "flags": 32,
            "hasliked": 0,
            "id": "Nl3BWN",
            "likes": 4,
            "name": "Finite Water Cymatic Fork",
            "published": 3,
            "tags": [
                "procedural",
                "simulation",
                "water",
                "multipass"
            ],
            "usePreview": 0,
            "username": "tarnith",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "// Wave propagation simulation using finite differences.\n// See (f.ex.) http://www.uio.no/studier/emner/matnat/ifi/INF2340/v05/foiler/sim04.pdf\n// for the model and equations.\n\nvoid mainImage( out vec4 C, in vec2 co )\n{\n\tvec2 uv = co.xy / R.xy;\n\tC = vec4(T(uv).r*vec3(.5,0,0)+T(uv).r*vec3(.0,0.2,0)+abs(T(uv).g)*vec3(0,0.,.5),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 C, in vec2 co )\n{\n    float dx = 1.0/R.x;\n    float dy = 1.0/R.y;\n    vec2 uv = co.xy / R.xy;\n\n    vec2 udu = T(uv).xy;\n    \n\t// old elevation\n    float u = udu.x;\n    // old velociy\n    float du = udu.y;\n    \n    // Finite differences\n    float ux = T(vec2(uv.x+dx, uv.y)).x;\n    float umx = T(vec2(uv.x-dx, uv.y)).x;\n    float uy = T(vec2(uv.x, uv.y+dy)).x;\n    float umy = T(vec2(uv.x, uv.y-dy)).x;\n\n    // new elevation\n    float nu = u + du + 0.5*(umx+ux+umy+uy-4.0*u);\n    nu *= 0.999;\n    if (iFrame == 1)\n        C = T(uv)+vec4(vec3(sin(length((uv-.5)*R.x*.1)))*length((uv-.5)),1.0);\n    else\n    // store elevation and velocity\n        C = vec4(nu,nu-u,0.0,0.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(u) texture(iChannel0,u)\n#define R iResolution",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}