{
    "Shader": {
        "info": {
            "date": "1586000733",
            "description": "KIFS fractal based on BigWing's tutorial\nhttps://www.youtube.com/watch?v=il_Qg9AqQkE",
            "flags": 0,
            "hasliked": 0,
            "id": "WslcDj",
            "likes": 1,
            "name": "KIFS fractal from a tutorial",
            "published": 3,
            "tags": [
                "kifs"
            ],
            "usePreview": 0,
            "username": "maksy",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "vec2 N(float angle) {\n\treturn vec2(sin(angle), cos(angle));\n}\n\n// Rotate around an arbitrary line by the given angle\nvec2 rotate(vec2 uv, vec2 center, float angle, bool side) {\n\n  \t// reflects a point to the other side of a line. Distance to the line\n   \t// is given by dot(uv, n) where n is the orientation of the line\n   \t// min/max makes sure that the only one side of the line will be reflected\n    \n    vec2 n = N(angle * 3.14159);\n    float d = dot(uv - center, n);\n    \n    if (side) {\n\t    uv -= n * max(0., d) * 2.;\n    } else {\n        uv -= n * min(0., d) * 2.;\n    }\n    return uv;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n   \n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    // zoom out\n    uv *= 1.25;\n    \n    // mirror on y axis. This adds the folded line to the lower left corner also\n    uv.x = abs(uv.x);\n    \n    // the original curve lies on the zero line so shift the \n    // the whole thing upper in order to get it in the middle\n    uv.y += tan((5./6.)*3.14159)*.5;\n    \n    // reflect the line by rotating uv around a line passing through (.5, 0)\n    // by 5/6 degrees. This adds the line segment to the lower right corner alse\n    uv = rotate(uv, vec2(.5, 0), (5./6.), true);\n\n\t// folds the space to create the upside down 'V' shapes\n    float scale = 1.; // keeps track how many times uv space is folded\n    uv.x += 0.5; // undo the first shift in the loop to keep the fractal in the middle\n    for (int i=0; i<4; i++) {\n    \t\n        // resets the uv coordinates before folding the next upside down 'V' shape\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5; // shift the origo in the middle of the line segment\n        \n        // this widens the line segment to 3 units of which the centermost is folded\n        uv.x = abs(uv.x); // mirror around the center\n        uv.x -= .5; // add .5 to the both ends of the line to make it 3 units wide\n        \n        uv = rotate(uv, vec2(0., 0.0) ,(2./3.), false);    \t\n    }\n    \n    // Draw the line by calculating distance to a line lying on the y axis and \n    // which x position ranges from -1 to 1\n    float d = length(uv - vec2(clamp(uv.x, -1., 1.), 0.));\n      \n    // make the fractal more trippy by making it go inside out \n    // and rotating by time\n    uv *= sin(iTime * 0.3);\n    uv = rotate(uv, vec2(0., 0.), sin(iTime*0.5), true);\n    \n    // smooths out the line segment so its thick and narrower.\n    // Division by iResolution.y makes sure its resolution independent and always 1 pixel wide\n    col += smoothstep(1./iResolution.y, 0., d/scale); \n    \n    uv /= scale;\n    \n    // let the magic happen\n    col += texture(iChannel0, uv*3.2-iTime*0.2).rgb;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}