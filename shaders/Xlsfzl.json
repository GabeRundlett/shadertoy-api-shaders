{
    "Shader": {
        "info": {
            "date": "1514677110",
            "description": "Crude shadows from a height map. Move the mouse around to change lighting angle.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xlsfzl",
            "likes": 19,
            "name": "Heightmap shadowing",
            "published": 3,
            "tags": [
                "shadows"
            ],
            "usePreview": 1,
            "username": "consoleartist",
            "viewed": 1942
        },
        "renderpass": [
            {
                "code": "float getHeightValue(vec2 coords)\n{\n \n    float n = 0.33;\n    return max(n, texture(iChannel0, coords).x);\n}\n\n\nfloat get_diffuse(vec3 n, vec3 l)\n{\n\treturn max(0.0, dot(n,l));\n}\n\nvec3 shadow(vec3 wPos, vec3 lVector, float NdL)\n{\n   float bias = 0.01;\n   vec3 p;\n   float shadow = 1.0;\n\n   if (NdL > 0.0)\n   \t{\n   \t\tfor (float i = 0.0; i <= 1.0; i += 0.01) \n    \t\t{\n     \t\t\tp = wPos + lVector * i;\n                \n       \t \t\t\tif (p.z < getHeightValue(vec2(p.x, p.y)) - bias)\n        \t\t\t\t{\n            \t\t\t\tshadow = 0.0;\n                    \t\tbreak;\n        \t\t\t\t}\n             }\n   \t}\n\treturn vec3(shadow);\n}\n\n\nvec3 getNormal(vec2 coords, float intensity)\n{\n    float offset = 0.0025;\n    vec3 a = vec3(coords.x - offset, 0.0, getHeightValue(vec2(coords.x - offset, coords.y)) * intensity);\n    vec3 b = vec3(coords.x + offset, 0.0, getHeightValue(vec2(coords.x + offset, coords.y)) * intensity);\n    vec3 c = vec3(0.0, coords.y + offset, getHeightValue(vec2(coords.x, coords.y + offset)) * intensity);\n    vec3 d = vec3(0.0, coords.y - offset, getHeightValue(vec2(coords.x, coords.y - offset)) * intensity);\n\n    return normalize(cross(b-a, c-d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //UV Setup -normalized coords and aspect ratio correction\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n\tuv.x *= aspect;\n   \n    //Mouse\n    vec2 daMouse = iMouse.xy/ iResolution.xy;\n    daMouse = daMouse * 2.0 - 1.0;\n    daMouse.x *= aspect;\n    \n    vec3 color;\n\n\tfloat phi = length(daMouse);\n    vec3 lightVector = normalize(vec3(daMouse.x,\n                                      daMouse.y,\n                                      cos(phi))\n                                );\n    \n    \n    \n    vec3 worldPos = vec3(vec2(uv), getHeightValue(uv));\n    vec3 normal = getNormal(uv, 0.2);\n    \n    float NdotL = max(dot(normal, lightVector), 0.0);\n    color = vec3(get_diffuse(normal, lightVector))*0.7;\n    color *= vec3(shadow(worldPos, lightVector, NdotL));\n    \n    float ambient = get_diffuse(normal, vec3(0.0,0.0,1.0))*0.3;\n    color += ambient;\n\n    \n    \n    \n    \n    fragColor = vec4(color, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}