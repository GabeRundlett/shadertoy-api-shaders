{
    "Shader": {
        "info": {
            "date": "1575989714",
            "description": "Reproduction in GLSLÂ of Piet Mondrian, \"Tableau\" (1921)\n\nExercise from https://thebookofshaders.com/07/",
            "flags": 0,
            "hasliked": 0,
            "id": "Wlc3Dn",
            "likes": 1,
            "name": "Piet Mondriaen - Tableau  (1921)",
            "published": 3,
            "tags": [
                "painting"
            ],
            "usePreview": 0,
            "username": "xuv",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "// Piet Mondrian - Tableau (1921)\n\nprecision highp float;\nuniform vec2 resolution;\n\n#define red vec3(140./255., 16./255., 22./255.)\n#define yellow vec3(242./255., 185./255., 18./255.)\n#define blue vec3(25./255., 73./255., 136./255.)\n#define white vec3(239./255., 232./255., 208./255.)\n#define black vec3(16./255., 17./255., 21./255.)\n#define unit vec2(1./48., 1./56.)\n\nvec4 rect(vec2 p, float x1, float y1, float x2, float y2, vec3 base_color) {\n  vec2 bl = min(floor(vec2(x1, y1) * unit - p), vec2(0.));\n  vec2 tr = min(floor(p - vec2(x2, y2) * unit), vec2(0.));\n\n  float l = bl.x * bl.y;\n  l *= tr.x * tr.y;\n\n  vec4 color = vec4(l * base_color, 1.);\n  return color;\n}\n\nvec4 mondrian(vec2 p, vec4 color) {\n  vec4 c = rect(p, 0., 0., 48., 56.,vec3(1.));\n  color = vec4(1.-c.x, 1.-c.y, 1.-c.z, 1.0);\n  // Red\n  color += rect(p, 0., 47., 3., 56., red);\n  color += rect(p, 4., 47., 10., 56., red);\n  color += rect(p, 0., 36., 3., 46., red);\n  color += rect(p, 4., 36., 10., 46., red);\n  // Yellow\n  color += rect(p, 47., 47., 48., 56., yellow);\n  color += rect(p, 47., 36., 48., 46., yellow);\n  // blue\n  color += rect(p, 47., 0., 48., 4., blue);\n  color += rect(p, 36., 0., 46., 4., blue);\n  //white\n  color += rect(p, 0., 0., 10., 35., white);\n  color += rect(p, 11., 0., 35., 4., white);\n  color += rect(p, 11., 5., 35., 35., white);\n  color += rect(p, 11., 36., 35., 46., white);\n  color += rect(p, 11., 47., 35., 56., white);\n  color += rect(p, 36., 47., 46., 56., white);\n  color += rect(p, 36., 36., 46., 46., white);\n  color += rect(p, 36., 5., 46., 35., white);\n  color += rect(p, 47., 5., 48., 35., white);\n\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float m = min(iResolution.x, iResolution.y) - 10.;\n  vec2 margin = (iResolution.xy - m)/2.;\n  vec2 p = (fragCoord.xy/m)-(margin/m);\n  vec4 color = vec4(1.);\n  color *= mondrian(p, color);\n  fragColor = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}