{
    "Shader": {
        "info": {
            "date": "1454551196",
            "description": "Billy was sure the championship was his if he could just crack the code to the ideal wheel geometry.",
            "flags": 32,
            "hasliked": 0,
            "id": "MdKGWW",
            "likes": 23,
            "name": "Soapbox",
            "published": 3,
            "tags": [
                "collision"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 923
        },
        "renderpass": [
            {
                "code": "//Soapbox by eiffie\n//Testing the DE 2 DE collision. All buf A does is check the nearest distance between the wheels \n//and ground then try to \"mush\" the car to the ground.\n\n#define PI 3.14159\n#define X iTime\n#define RT -iTime\n#define bump 0.05\n\n#define load(a) texture(iChannel0,(vec2(a,0.0)+0.5)/iResolution.xy)\n\nvec2 rotate(vec2 v, float angle) {return cos(angle)*v+sin(angle)*vec2(v.y,-v.x);}\n\nfloat DEW(in vec3 p, float A, float B, float C){//wheels\n\tfloat a=atan(p.x,-p.y);\n\tfloat b=a-mod(a+A*0.5,A)+A*0.5;\n\tfloat d=max(abs(p.z)-0.1,sin(b)*p.x-cos(b)*p.y-C+abs(a)*B);\n\treturn d;\n}\n\nfloat Torus(in vec3 z, vec2 r){return length(vec2(length(z.zy)-r.x,z.x))-r.y;}\nfloat Rect(in vec3 z, vec3 r){return max(abs(z.x)-r.x,max(abs(z.y)-r.y,abs(z.z)-r.z));}\nfloat CapsuleY(in vec3 p, vec3 r){return length(vec3(p.x,p.y-clamp(p.y,r.x,r.y),p.z))-r.z;}\n\nmat3 rmx;\nvec2 XY;\nfloat DE(in vec3 p0){//car\n\tvec2 g=sin(p0.xz+2.4*sin(p0.zx))*bump;\n\tfloat dG=p0.y+1.0+g.x+g.y;\n\tp0.xy+=XY;\n\tp0=rmx*p0;\n\tvec3 p=p0;\n\tconst vec3 rc=vec3(2.0,0.5,1.0);\n\tfloat d=Rect(p,rc);\n\tp.y-=0.25;\n\td=max(d,-Rect(p,rc-vec3(0.1,0.0,0.1)));\n\tp+=sin(p.yzx*2.0+2.3*sin(p.zxy*2.0+rc))*0.02;\n\tp.xy-=vec2(1.25,0.3);\n\td=min(d,Rect(p,vec3(0.7,0.05,0.9)));\n\tp.xy+=vec2(0.75,0.2);\n\td=min(d,Torus(p,vec2(0.5,0.05)));\n\tfloat s1=0.7,s2=-0.05,s3=0.5;\n\tvec3 o=vec3(-1.5,0.25,-1.25);\n\tif(p0.z<0.0){s1+=0.4;s2+=0.04;o.z=-o.z;if(p0.x>0.0)s3=0.25;}\n\tif(p0.x<0.0){s1+=0.4;s2+=0.04;o.x=-o.x;}\n\tp=p0+o;\n\tp.xy=rotate(p.xy,RT);\n\td=min(d,DEW(p,s1,s2,s3));\n\td=min(d,CapsuleY(p.xzy,vec3(-0.2,0.2,0.1)));\n\treturn min(d,dG);\n}\n\nvec4 mcol=vec4(0.0);\nfloat CE(in vec3 p0){ //same for coloring\n\tvec2 g=sin(p0.xz+2.4*sin(p0.zx))*bump;\n\tfloat d7=p0.y+1.0+g.x+g.y;\n\tvec3 p1=p0;\n\tp0.xy+=XY;\n\tp0=rmx*p0;\n\tmcol+=vec4(1.0);\n\tvec3 p=p0;\n\tconst vec3 rc=vec3(2.0,0.5,1.0);\n\tfloat d=Rect(p,rc);\n\tp.y-=0.25;\n\td=max(d,-Rect(p,rc-vec3(0.1,0.0,0.1)));\n\tp+=sin(p.yzx*2.0+2.3*sin(p.zxy*2.0+rc))*0.02;\n\tp.xy-=vec2(1.25,0.3);\n\tfloat d3=Rect(p,vec3(0.7,0.05,0.9));\n\tp.xy+=vec2(0.75,0.2);\n\tfloat d4=Torus(p,vec2(0.5,0.05));\n\tfloat s1=0.7,s2=-0.05,s3=0.5;\n\tvec3 o=vec3(-1.5,0.25,-1.25);\n\tif(p0.z<0.0){s1+=0.4;s2+=0.04;o.z=-o.z;if(p0.x>0.0)s3=0.25;}\n\tif(p0.x<0.0){s1+=0.4;s2+=0.04;o.x=-o.x;}\n\tp=p0+o;\n\tp.xy=rotate(p.xy,RT);\n\tfloat d5=DEW(p,s1,s2,s3);\n\tfloat d6=CapsuleY(p.xzy,vec3(-0.2,0.2,0.1));\n\tvec4 scol=vec4(1.0,0.0,0.0,1.0);\n\tif(min(d3,d5)<d){\n\t\tg=p0.xz;\n\t\tif(d5<d3){d=d5;g=p.xy;}else d=d3;\n\t\tscol=texture(iChannel1,g)*1.5;\n        d+=scol.r*0.03;\n\t}\n\tif(d4<d || d6<d){\n\t\td=min(d4,d6);\n\t\tscol=vec4(0.1,0.2,0.3,1.0);\n\t}\n\tif(d7<d){\n\t\tfloat n=texture(iChannel2,p1.xz).r;\n\t\td=d7+n*0.03;\n\t\tscol=vec4(n+1.7+p1.y,0.4,-0.8-p1.y,n);\n\t}\n\tmcol+=scol;\n\treturn d;\n}\n\nfloat ShadAO(in vec3 ro, in vec3 rd){\n\tfloat t=0.01,s=1.0,d,mn=t;\n\tfor(int i=0;i<16;i++){\n\t\td=max(DE(ro+rd*t)*1.25,mn);\n\t\ts=min(s,d/t+t);\n\t\tt+=d;\n\t}\n\treturn s;\n}\n// Tetrahedral normal from IQ.\nvec3 normal(vec3 p, float e){vec2 v=vec2(-e,e);return normalize(v.yxx*CE(p+v.yxx)+v.xxy*CE(p+v.xxy)+v.xyx*CE(p+v.xyx)+v.yyy*CE(p+v.yyy));}\n\nvec3 scene(vec3 ro, vec3 rd, float rnd){\n\tfloat t=DE(ro)*rnd,d,px=1.0/iResolution.x;\n\tfor(int i=0;i<64;i++){\n\t\tt+=d=DE(ro+rd*t);\n\t\tif(t>100.0 || d<px*t)break;\n\t}\n\tvec3 col=vec3(0.9,0.95,1.4)*max(0.0,0.5+rd.y);\n\tif(d<15.0*px*t){\n\t\tro+=rd*t;\n\t\tvec3 L=normalize(vec3(0.4,0.8,0.5));\n\t\tvec3 N=normal(ro,px*t);\n\t\tfloat dif=0.5+max(0.0,0.5*dot(N,L));\n\t\tfloat shad=(dif>0.0?ShadAO(ro,L):0.0);\n\t\tfloat spc=pow(max(0.0,dot(reflect(rd,N),L)),5.0);\n\t\tfloat fre=max(0.0,dot(rd,N));\n\t\tfloat amb=max(0.0,N.y);\n\t\tmcol/=4.0;\n\t\tvec3 scol=mcol.rgb*clamp((dif*(1.0-0.5*fre)+mcol.a*spc*fre)*shad+amb*0.1,0.0,1.0);\n\t\tcol=mix(col,scol,exp(-t*0.06));\n\t}\n\treturn col;\n}\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\nmat3 lookup(vec3 up){\n\tvec3 fw=vec3(0.0,0.0,1.0),rt=vec3(1.0,0.0,0.0);\n\trt=normalize(cross(fw,up));\n\tfw=normalize(cross(up,rt));\n\treturn mat3(rt,up,fw);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec4 up=load(0);\n\tXY=vec2(X,up.w);\n\trmx=lookup(up.xyz);\n\tfloat rnd=fract(sin(dot(fragCoord,vec2(13.45,75.23)))*435.13);\n\tfloat tim=iTime*0.4;\n\tvec3 ro=vec3(cos(tim)*6.0-X,1.0+sin(tim*0.13)*0.5,sin(tim)*4.0);\n\tvec3 rd=vec3((2.0*fragCoord-iResolution.xy)/iResolution.x,1.0);\n\trd=normalize(lookat(vec3(-X,0.0,0.0)-ro-XY.yyy)*rd);\n\tfragColor=vec4(scene(ro,rd,rnd),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//all this for checking 3 tires against the ground (yes it could have been done with just y)\n//72 DE checks in all, yikes that adds up fast!\n\n#define PI 3.14159\n#define X iTime\n#define RT -iTime\n#define bump 0.05\n#define EPSILON 0.00001\n\nvec2 rotate(vec2 v, float angle) {return cos(angle)*v+sin(angle)*vec2(v.y,-v.x);}\n\nfloat DEW(in vec3 p, float A, float B, float C){\n\tfloat a=atan(p.x,-p.y);\n\tfloat b=a-mod(a+A*0.5,A)+A*0.5;\n\tfloat d=max(abs(p.z)-0.1,sin(b)*p.x-cos(b)*p.y-C+abs(a)*B);\n\treturn d;\n}\n\nfloat DE1(in vec3 p0){\n\tp0.x-=X;\n\tfloat s1=0.7,s2=-0.05,s3=0.5;\n\tvec3 o=vec3(-1.5,0.25,-1.25);\n\tif(p0.z<0.0){s1+=0.4;s2+=0.04;o.z=-o.z;if(p0.x>0.0)s3=0.25;}\n\tif(p0.x<0.0){s1+=0.4;s2+=0.04;o.x=-o.x;}\n\tvec3 p=p0+o;\n\tp.xy=rotate(p.xy,RT);\n\treturn DEW(p,s1,s2,s3);\n}\nfloat DE2(vec3 p0){\n\tvec2 g=sin(p0.xz+2.4*sin(p0.zx))*bump;\n\treturn p0.y+1.0+g.x+g.y;\n}\n// Tetrahedral normal from IQ\nvec3 normal(vec3 p, float e){vec2 v=vec2(-e,e);return normalize(v.yxx*DE1(p+v.yxx)+v.xxy*DE1(p+v.xxy)+v.xyx*DE1(p+v.xyx)+v.yyy*DE1(p+v.yyy));}\nvec3 normal2(vec3 p, float e){vec2 v=vec2(-e,e);return normalize(v.yxx*DE2(p+v.yxx)+v.xxy*DE2(p+v.xxy)+v.xyx*DE2(p+v.xyx)+v.yyy*DE2(p+v.yyy));}\n\nvec4 Collide(in vec3 p){//finds the nearest collision point between 2 distance functions (or tries)\n\tvec3 psave=p;\n\tfor(int i=0;i<3;i++){\n\t\tfloat d=DE2(p); //find direction to ground from wheel\n\t\tvec3 N=-normal2(p,max(d,EPSILON))*d;\n\t\t//if(N==N)//compiler no likey :(\n        p+=N; \n\t\tpsave=p;\n\t\td=DE1(p); //find dir to wheel\n\t\tN=-normal(p,max(d,EPSILON))*d; //I could probably remove normalization and not *d\n\t\t//if(N==N)\n        p+=N;\n\t}\n\treturn vec4(p,length(p-psave));//position of nearest hit and distance between objects (0 if hit)\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tif(fragCoord.y>1.0 || fragCoord.x>1.0)discard;\n\tvec3 p0=vec3(-1.5+X,-0.25,-1.25),p1=vec3(-1.5+X,-0.25,1.25),p2=vec3(1.5+X,-0.25,1.25);\n\tvec4 c=Collide(p0);\n\tp0.y+=c.w;//DE1(c.xyz)+DE2(c.xyz); //c.w;//\n\tc=Collide(p1);\n\tp1.y+=c.w;//DE1(c.xyz)+DE2(c.xyz);\n\tc=Collide(p2);\n\tp2.y+=c.w;//DE1(c.xyz)+DE2(c.xyz); \n\t\n\tvec3 up=cross(p2-p1,p0-p1);\n\tfloat h=(p0.y+p2.y)/2.0+0.25;\n\tfragColor=vec4(normalize(up),h);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}