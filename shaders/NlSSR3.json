{
    "Shader": {
        "info": {
            "date": "1628159607",
            "description": "Solving a differential equation by marching over a slope field.\nSee: https://en.wikipedia.org/wiki/Slope_field",
            "flags": 0,
            "hasliked": 0,
            "id": "NlSSR3",
            "likes": 8,
            "name": "Slope field",
            "published": 3,
            "tags": [
                "2d",
                "slopefield",
                "differentialequation"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "const float pi = 3.1415925;\n\nconst int num_segments1 = 128; //number of segments moving forward\nconst int num_segments2 = 64; //number of segments moving backward\nconst float step_size = .05; //segment size\n\nconst float raster_size = .1;\nconst float zoom = 3.;\n\nconst float random_offset_factor=.2;\n\nconst float line_width = .004;\nconst float dot_size = .02;\n\nconst vec3 bg_col = vec3(1);\nconst vec3 raster_col = vec3(0);\nconst vec3 traj_col = vec3(0,1,0);\nconst vec3 perp_col = vec3(1,0,0);\nconst vec3 dot_col = vec3(0);\n\n//slope field functions\nfloat func(vec2 uv){\n\t//return uv.x*uv.x + uv.y*uv.y;\n\t//return uv.x*uv.x - uv.y*uv.y;\n\t//return sin(2.*uv.x)*sin(2.*uv.y);\n\t//return uv.x*uv.y*uv.y;\n\t//return uv.y*uv.y - uv.x;\n\treturn uv.x*(uv.x*uv.x+uv.y*uv.y)-(2.*uv.x*uv.x-uv.y*uv.y);\n\t//return uv.y*uv.y*uv.y+uv.x*uv.x;\n\t//return uv.x*uv.y;\n\t//return uv.x*uv.x*uv.y;\n\t//return sqrt(uv.x*uv.x*abs(uv.y));\n\t//return -sqrt(uv.x*uv.x*abs(uv.y));\n\t//return sin(uv.x+uv.y)+cos(uv.x+uv.y);\n\t//return 1./(2.*uv.y);\n}\n\nfloat length2( vec2 v ) { return dot(v,v); }\n\nfloat segment_dis_sq( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length2( pa - ba*h );\n}\n\nfloat trajectory_segments_dis_sq(vec2 uv, vec2 p, bool perp){\n    float d0 = 1e38;\n    vec2 a = p;\n    for( int i=1; i<num_segments1; i++ )\n    {\n\t\tvec2 b = a;\n        if(perp){\n            b +=step_size*vec2(-func(a),1);\n        }\n        else{\n            b += step_size*vec2(1,func(a));\n        }\n        d0 = min(d0,segment_dis_sq(uv, a, b ));\n        a = b;\n    }\n\n\ta = p;\n\n    for( int i=1; i<num_segments2; i++ )\n    {\n\t\tvec2 b = a;\n        if(perp){\n            b -= step_size*vec2(-func(a),1);\n        }\n        else{\n            b -= step_size*vec2(1,func(a));\n        }\n        d0 = min(d0,segment_dis_sq(uv, a, b ));\n        a = b;\n    }\n    \n    return d0;\n}\n\n// dave hoskins hash without sine\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\tuv -= .5;\n\tuv.x *= iResolution.x/iResolution.y;\n\n    vec2 mouse = iMouse.xy/iResolution.xy;\n\tmouse -= .5;\n\tmouse.x *= iResolution.x/iResolution.y;\n\n\tfloat border = 1./iResolution.y;\n\n\tfloat dis = 1e38;\n\n\tuv *= zoom;\n\tborder *= zoom;\n\tmouse *= zoom;\n\n\tvec2 duv = floor(uv/raster_size+.5)*raster_size;\n    duv += hash22(duv)*random_offset_factor*raster_size;\n\n\tfloat cur_slope = func(duv);\n\n\tvec2 tang = normalize(vec2(1.,cur_slope));\n\tvec2 nor = vec2(-tang.y,tang.x);\n\n\tfloat len = raster_size/2.;\n    \n    vec3 col = bg_col;\n\n\tdis = sqrt(segment_dis_sq(uv,duv-len/2.*tang,duv+len/2.*tang))-line_width;\n    col = mix(raster_col,col,clamp(sqrt(dis/border),0.,1.));\n    \n\tdis = sqrt(trajectory_segments_dis_sq(uv,mouse,false))-line_width;\n    col = mix(traj_col,col,clamp(sqrt(dis/border),0.,1.));\n    \n    dis = sqrt(trajectory_segments_dis_sq(uv,mouse,true))-line_width;\n    col = mix(perp_col,col,clamp(sqrt(dis/border),0.,1.));\n    \n    dis = distance(uv,mouse)-dot_size;\n    col = mix(dot_col,col,clamp(sqrt(dis/border),0.,1.));\n\n    fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}