{
    "Shader": {
        "info": {
            "date": "1451917999",
            "description": "Playing with the new hotness.",
            "flags": 32,
            "hasliked": 0,
            "id": "Msd3zs",
            "likes": 9,
            "name": "Feedback Flames",
            "published": 3,
            "tags": [
                "multipass"
            ],
            "usePreview": 0,
            "username": "P_Malin",
            "viewed": 1214
        },
        "renderpass": [
            {
                "code": "\nvec3 BlackBody( float t )\n{\n    float h = 6.6e-34; // Planck constant\n    float k = 1.4e-23; // Boltzmann constant\n    float c = 3e8;// Speed of light\n\n    vec3 w = vec3( 610.0, 549.0, 468.0 ) / 1e9; // sRGB approximate wavelength of primaries\n    \n    vec3 w5 = w*w*w*w*w;\n    \n    vec3 o = 2.*h*(c*c) / (w5 * (exp(h*c/(w*k*t)) - 1.0));  // Planck's law https://en.wikipedia.org/wiki/Planck%27s_law\n\n    return o;\n}\n\nvec3 Tonemap( vec3 x )\n{\n    return vec3(1) - exp2( x * -1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fIntensity = texture( iChannel0, fragCoord.xy / iResolution.xy ).r;    \n    \n    float fFlameLinear = -log2( 1.0 - fIntensity * fIntensity * 0.999);\n    \n    float fFlameBrightness = fFlameLinear * 10.0;\n    \n    vec3 vFlameColor = vec3(0);\n\n    // blackbody color\n    float fTemperature = fFlameLinear * 4000.0 + 600.0;\n    vFlameColor = normalize( BlackBody( fTemperature ) );    \n\n    vec3 vFlame = vFlameColor * fFlameBrightness;\n\t    \n    vec3 vCol = Tonemap( vFlame );\n    \n    // Output gamma\n    vCol = pow( vCol, vec3(1.0 / 2.4) );\n\n\tfragColor = vec4(vCol,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float SampleBackbuffer( vec2 vCoord )\n{\n\treturn clamp( texture(iChannel0, vCoord / iResolution.xy).r, 0.0, 1.0 );\n}\n \n// Average pixels surrounding vCoord\nfloat GetIntensityAverage( vec2 vCoord )\n{\n\tfloat fDPixel = 1.0;\n\t\n\tfloat fResult \t= SampleBackbuffer( vCoord + vec2(0.0, 0.0) )\n\t\t\t+ SampleBackbuffer( vCoord + vec2( fDPixel, 0.0) )\n\t\t      \t+ SampleBackbuffer( vCoord + vec2(-fDPixel, 0.0) )\n\t\t\t+ SampleBackbuffer( vCoord + vec2(0.0,  fDPixel) )\n\t\t\t+ SampleBackbuffer( vCoord + vec2(0.0, -fDPixel) );\n\t\n\treturn fResult / 5.0;       \n}\n \n\nvec2 GetIntensityGradient(vec2 vCoord)\n{\n\tfloat fDPixel = 1.0;\n\t\n\tfloat fPX = SampleBackbuffer(vCoord + vec2( fDPixel, 0.0));\n\tfloat fNX = SampleBackbuffer(vCoord + vec2(-fDPixel, 0.0));\n\tfloat fPY = SampleBackbuffer(vCoord + vec2(0.0,  fDPixel));\n\tfloat fNY = SampleBackbuffer(vCoord + vec2(0.0, -fDPixel));\n\t\n\treturn vec2(fPX - fNX, fPY - fNY);              \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vCoord = fragCoord.xy;\n\t\n\t// get the intensity at the current pixel\n\tfloat fCurrPixelValue = SampleBackbuffer(vCoord);\n\t\n\tvec2 vFlamePos = vCoord;\n\t\n\t// move 'down' more the 'hotter' the pixel we sampled was\n\t// this is the main trick to get flame effect looking interesting\n\tvFlamePos.y -= fCurrPixelValue * fCurrPixelValue * 100.0 + fCurrPixelValue * 10.0;\n\t\n\t// always sample at least one pixel below\n\tvFlamePos.y -= 1.0;\n\t\n\t// move down the intensity gradient\n\t// (not really necessary for effect but gives the flames some sideways movement + a better shape)\n\tvFlamePos -= GetIntensityGradient(vCoord) * 16.0; \n\t\n\t// average the surrounding pixels at the new position\n\tfloat fIntensity = GetIntensityAverage(vFlamePos);\n\t\n\t// fade\n\tfIntensity *= 0.97f;\n\t\n\t// \"random\" junk in the bottom few pixels\n\tif(gl_FragCoord.y < 2.0)\n\t{\n\t\tfIntensity = fract(sin(fract(iTime + fragCoord.x * 124.1231243) * 32.3242 + sin(iTime * 23.234234 + fragCoord.x * 1.451243)));\n\t}\n\t\n    fragColor = vec4(fIntensity);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}