{
    "Shader": {
        "info": {
            "date": "1643354152",
            "description": "basic shapes and motion blur",
            "flags": 0,
            "hasliked": 0,
            "id": "fsjczw",
            "likes": 3,
            "name": "basic shapes v1",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "ErinZ",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "#define BLUR 0.005\n\n//=============================================================================================\n//========================================SHAPES===============================================\n//=============================================================================================\n\n//圆心 半径 画圆\nfloat circle( vec2 uv, vec2 o, float r, float blur){\n    float d = length(uv-o);\n    float c = smoothstep(r,r-blur,d);//AA\n    return c;\n}\n//1点+垂直 直线\nfloat lineVer(vec2 uv, vec2 p,float width, float blur){\nwidth/=2.;\nuv -= p;\nreturn smoothstep(-width-blur,-width,uv.x)*smoothstep(width+blur,width,uv.x);\n}\n//1点+斜率 直线\nfloat line(vec2 uv, vec2 p, float k, float width, float blur){\nwidth/=2.;\nuv -= p;\nfloat d = abs(k*uv.x-uv.y)/sqrt(k*k+1.);\nreturn smoothstep(-width-blur,-width,d)*smoothstep(width+blur,width,d);\n}\n//2点 直线\nfloat line(vec2 uv, vec2 p1, vec2 p2, float width, float blur){\nwidth/=2.;blur/=2.;\nvec2 pa = uv-p1,ba = p2-p1;\nfloat h = dot(pa,ba)/dot(ba,ba);\nfloat d = length(pa-ba*h);\nreturn smoothstep(width+blur,width-blur,d);\n}\n//2点 线段\nfloat segment(vec2 uv, vec2 p1, vec2 p2, float width, float blur){\nwidth/=2.;blur/=2.;\nvec2 pa = uv-p1,ba = p2-p1;\nfloat h = clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\nfloat d = length(pa-ba*h);\nreturn smoothstep(width+blur,width-blur,d);\n}\n//圆弧 a1a2为弧度制 a1<a2 a1,a2∈[0,6.28]\nfloat arc(vec2 uv, vec2 o,float r,float a1,float a2, float width, float blur){\nuv -=o;\nwidth/=2.;blur/=2.;\nfloat ap =(uv.x>0.)?acos(uv.y/length(uv)):acos(-uv.y/length(uv))+3.14;//求夹角\nvec2 p1= vec2(sin(a1)*r,cos(a1)*r);\nvec2 p2= vec2(sin(a2)*r,cos(a2)*r);\nfloat d =(ap>a1&&ap<a2)?(abs(length(uv)-r)):\n                        min(length(uv-p1),length(uv-p2));\nreturn smoothstep(width+blur,width-blur,d);\n}\n//等边三角形\nfloat triangle(vec2 uv,vec2 o,float a,float blur){\nuv -= o;\nuv.x = abs(uv.x)-a;\nconst float k = sqrt(3.);\nuv.y +=1./k*a;\nif(uv.x+k*uv.y >0.) uv=vec2(uv.x-k*uv.y,-k*uv.x-uv.y)/2.;\nuv.x -= clamp( uv.x, -2.0*a, 0.0 );\nfloat d = -length(uv)*sign(uv.y);\nreturn smoothstep(0.+blur,0.,d);\n}\n//长方形 左上右下点\nfloat rectangle(vec2 uv,vec2 p1,vec2 p2,float blur){\nblur /= 2.;\nreturn smoothstep(p1.x-blur,p1.x+blur,uv.x)*\n       smoothstep(p2.x+blur,p2.x-blur,uv.x)*\n       smoothstep(p1.y+blur,p1.y-blur,uv.y)*\n       smoothstep(p2.y-blur,p2.y+blur,uv.y);\n}\n\n//=============================================================================================\n//======================================TRANSFORMATION=========================================\n//=============================================================================================\n\n//绕任意点旋转 弧度制\nvec2 rotate(vec2 uv, vec2 p, float a){\nuv-=p;\nvec2 q;\nq.x = cos(a)*uv.x + sin(a)*uv.y;\nq.y = -sin(a)*uv.x + cos(a)*uv.y; \nq+=p;\nreturn q;\n}\n//斜切\nvec2 bevel(vec2 p, float x,float y){\n    vec2 q;\n    q.x = p.x + p.y*x;\n    q.y = p.y +p.x*y;\n    return q;\n}\n//=============================================================================================\n//======================================FUNCTIONS==============================================\n//=============================================================================================\n\n//绘制坐标轴\nvec3 coordSystem(vec2 p){\n    vec3 col = vec3(0);\n    float c;\n    c =lineVer(p, vec2(0.,0.),0.003,BLUR);//y\n    c +=line(p, vec2(0.,0.), 0.,0.003,BLUR);//x\n    c +=lineVer(p, vec2(1.,0.),0.003,BLUR)*.3;//x=1\n    c +=lineVer(p, vec2(-1.,0.),0.003,BLUR)*.3;//x=-1\n    col +=c*vec3(.5,.8,.9);\n    col += vec3(circle(p,vec2(0.,0.),0.02,BLUR));//OriginalPt\n    col = mix(col,vec3(1,0.16,0.6),vec3(circle(p,vec2(0.,0.),0.015,BLUR)));\n    return col;\n}\nvec3 animate(vec2 p,float time){\n    vec3 col = vec3(0,0,1);\n       \n    float tt = mod(time,2.)/2.;\n    float ss = pow(tt,.2)*0.5 + 0.5;\n    ss = ss*.8*sin(tt*6.28*3.0 + p.y*0.5)*exp(-tt*4.);\n    col += circle(p, vec2(-.5, ss*sin(time * 12.0) * 0.7 +.2), 0.1,BLUR);\n    col += circle(p, vec2(.5, ss*sin(time * 12.0) * 0.7), 0.1,BLUR);\n    \n    p = bevel(p,ss*(p.y+0.5),0.);\n\n    col += rectangle(p,vec2(-.3,.5),vec2(.3,-.5),BLUR);\n    col -= circle(p,vec2(-.06,.3),.05,BLUR*2.)*2.;\n    col -= circle(p,vec2(.06,.3),.05,BLUR*2.)*2.;\n    col -= segment(p,vec2(-.05,.3),vec2(.05,.3),.01,BLUR*2.)*2.;\n    col = clamp(col,0.,1.);\n    return col;\n}\n//=============================================================================================\n//========================================MAIN=================================================\n//=============================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //BackGround\n    vec3 col = vec3(0.);\n    //col +=coordSystem(p);\n    \n    //motionblur\n    float amount = 32.;\n    float timescale = .1;\n    vec3 blurcol=vec3(0.);\n    \n\tfor(int i = 0; i < int(amount); i++)\n\t{\n    blurcol += animate(p, iTime - float(i)*timescale/amount)/amount;\n\t}\n    col += blurcol;\n    \n    /*\n    vec2 p1 = vec2(-.5,0.);\n    vec2 p2 = vec2(.5,0.5);\n    vec2 p3 = vec2(.5,-0.5);\n    col +=lineVer(p, p1,0.0001,0.003);\n    col +=line(p, p1, 1.,0.0001,0.003);\n    col +=segment(p, p2,p3,0.2,0.005)*0.5;\n    col += vec3(arc(p, p1,0.3,.785,3.925,0.15,0.005));\n\n    //shapemask pts\n    float ptmask = circle(p,p1,0.02,0.005);\n    ptmask += circle(p,p2,0.02,0.005);\n    ptmask += circle(p,p3,0.02,0.005);\n    col = mix(col,vec3(1.),ptmask);\n    float ptmask2 = circle(p,p1,0.015,0.005);\n    ptmask2 += circle(p,p2,0.015,0.005);\n    ptmask2 += circle(p,p3,0.015,0.005);\n    col = mix(col,vec3(1,0.16,0.6),ptmask2);\n    */\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}