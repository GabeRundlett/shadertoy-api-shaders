{
    "Shader": {
        "info": {
            "date": "1548110841",
            "description": "The Kawase light streak filter from Masaki Kawase, Frame Buffer Postprocessing Effects in DOUBLE-S.T.E.A.L (Wreckless), GDC 2003.\n\nTrying to replicate starglow filter in after effects / trapcode",
            "flags": 34,
            "hasliked": 0,
            "id": "WdSGRR",
            "likes": 14,
            "name": "kawase light streak filter",
            "published": 3,
            "tags": [
                "light",
                "star",
                "glow",
                "streaks",
                "glare",
                "streak",
                "starglow",
                "kira",
                "kirakira",
                "kirakira"
            ],
            "usePreview": 1,
            "username": "aferriss",
            "viewed": 2136
        },
        "renderpass": [
            {
                "code": "#define iter 2\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float scaleUv = 1.0/scale;\n    vec4 strH = streak(iChannel0, uv*scaleUv, pSize/iResolution.xy, vec2(1.0,0.0), samp, att, iter, vec4(1.0,0.0,0.0,0.0));\n    vec4 strV = streak(iChannel0, uv*scaleUv, pSize/iResolution.xy, vec2(0.0,1.0), samp, att, iter, vec4(0.0,1.0,0.0, 0.0));\n\tvec4 strD1 = streak(iChannel0, uv*scaleUv, pSize/iResolution.xy, vec2(1.0, 1.0), samp, att, iter, vec4(0.0,0.0,1.0, 0.0));\n   \tvec4 strD2 = streak(iChannel0, uv*scaleUv, pSize/iResolution.xy, vec2(-1.0, 1.0), samp, att, iter, vec4(0.0,0.0,0.0, 1.0));\n\t\n    vec3 s1 = mix(vec3(0.0), vec3(1.0,0.65,0.0), strH.r);\n    vec3 s2 = mix(vec3(0.0), vec3(1.0,0.65,0.0), strV.g);\n    vec3 s3 = mix(vec3(0.0), vec3(1.0,0.3,0.0), strD1.b);\n    vec3 s4 = mix(vec3(0.0), vec3(1.0,0.3,0.0), strD2.a);\n    \n    vec3 g1 = gradient(vec3(1.0,0.5,1.0), vec3(1.0,0.91,0.91), vec3(1.0), strH.r);\n    vec3 g2 = gradient(vec3(1.0,0.5,1.0), vec3(1.0,0.91,0.91), vec3(1.0), strV.g);\n\n    vec3 g3 = gradient(vec3(1.0,0.25,0.0), vec3(1.0,0.5,0.0), vec3(1.0, 0.823, 0.65), strD1.b);\n    vec3 g4 = gradient(vec3(1.0,0.25,0.0), vec3(1.0,0.5,0.0), vec3(1.0, 0.823, 0.65), strD2.a);\n\n    \n    vec4 str = vec4(strH.r +  strV.g + strD1.b + strD2.a);\n\n\tfragColor.rgb = blendScreen(texture(iChannel3, uv).rgb, str.rgb);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This buffer does some thresholding and edge detection to find highlights.\nvec3 bc(vec3 value, float brightness, float contrast)\n{\n    return (value - 0.5) * contrast + 0.5 + brightness;\n}\n\n\nvec3 gammaCorrect(vec3 color, float gamma){\n    return pow(color, vec3(1.0/gamma));\n}\n\nvec3 levelRange(vec3 color, float minInput, float maxInput){\n    return min(max(color - vec3(minInput), vec3(0.0)) / (vec3(maxInput) - vec3(minInput)), vec3(1.0));\n}\n\nvec3 finalLevels(vec3 color, float minInput, float gamma, float maxInput){\n    return gammaCorrect(levelRange(color, minInput, maxInput), gamma);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    uv *= scale;\n    \n    vec4 t = texture(iChannel1, uv);\n    vec4 tCol = t;\n\tfloat l = luma(t.rgb);\n    //t.rgb = pow(t.rgb, vec3(2.2));\n\t//t.rgb = vec3(smoothstep(0.62, 0.63, l));\n\t//t.rgb \n    //t.rgb = bc(vec3(l), 0.2, 1.2);\n    vec3 soft = finalLevels(vec3(l), 0.0, 2.8, 183.0/255.0);\n    t.rgb = smoothstep(0.56, 0.63, vec3(l));\n    t.rgb -= 0.9997;\n    //t.rgb *= 0.005;\n\t//t.rgb *= soft;\n    //vec3 sob = sobel( iChannel1, uv, fragCoord, iResolution.xy );\n    //t.rgb *= sob.rgb;\n    \n    fragColor = saturate(vec4(t.rgb , t.r));//vec4(str,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define iter 0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    vec4 strH = streak(iChannel0, uv, pSize/iResolution.xy, vec2(1.0,0.0), samp, att, iter, vec4(1.0,0.0,0.0,0.0));\n    vec4 strV = streak(iChannel0, uv, pSize/iResolution.xy, vec2(0.0,1.0), samp, att, iter, vec4(0.0,1.0,0.0, 0.0));\n\tvec4 strD1 = streak(iChannel0, uv, pSize/iResolution.xy, vec2(1.0, 1.0), samp, att, iter, vec4(0.0,0.0,1.0, 0.0));\n\tvec4 strD2 = streak(iChannel0, uv, pSize/iResolution.xy, vec2(-1.0, 1.0), samp, att, iter, vec4(0.0,0.0,0.0, 1.0));\n\n    vec4 str = vec4(strH.r, strV.g, strD1.b, strD2.a);\n    // Output to screen\n    fragColor = str;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define iter 1\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    vec4 strH = streak(iChannel0, uv, pSize/iResolution.xy, vec2(1.0,0.0), samp, att, iter, vec4(1.0,0.0,0.0,0.0));\n    vec4 strV = streak(iChannel0, uv, pSize/iResolution.xy, vec2(0.0,1.0), samp, att, iter, vec4(0.0,1.0,0.0, 0.0));\n\tvec4 strD1 = streak(iChannel0, uv, pSize/iResolution.xy, vec2(1.0, 1.0), samp, att, iter, vec4(0.0,0.0,1.0, 0.0));\n\tvec4 strD2 = streak(iChannel0, uv, pSize/iResolution.xy, vec2(-1.0, 1.0), samp, att, iter, vec4(0.0,0.0,0.0, 1.0));\n\n    vec4 str = vec4(strH.r, strV.g, strD1.b, strD2.a);\n    // Output to screen\n    fragColor = str;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define iter 1\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    vec4 strH = streak(iChannel0, uv, pSize/iResolution.xy, vec2(1.0,0.0), samp, att, iter, vec4(1.0,0.0,0.0,0.0));\n    vec4 strV = streak(iChannel0, uv, pSize/iResolution.xy, vec2(0.0,1.0), samp, att, iter, vec4(0.0,1.0,0.0, 0.0));\n\tvec4 strD1 = streak(iChannel0, uv, pSize/iResolution.xy, vec2(1.0, 1.0), samp, att, iter, vec4(0.0,0.0,1.0, 0.0));\n\tvec4 strD2 = streak(iChannel0, uv, pSize/iResolution.xy, vec2(-1.0, 1.0), samp, att, iter, vec4(0.0,0.0,0.0, 1.0));\n\n    vec4 str = vec4(strH.r, strV.g, strD1.b, strD2.a);\n    // Output to screen\n    fragColor = str;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float att = 0.98;\nconst int samp = 4;\nfloat pSize = 4.0;\nfloat scale = 1.0;\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nfloat saturate(float c){\n\treturn clamp(c, 0.0, 1.0);\n}\n\nvec4 saturate(vec4 c){\n \treturn vec4(saturate(c.r), saturate(c.g), saturate(c.b), saturate(c.a) );  \n}\n\nfloat blendScreen(float base, float blend) {\n\treturn 1.0-((1.0-base)*(1.0-blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n\treturn (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 gradient(vec3 c1, vec3 c2, vec3 c3, float grad){\n    vec3 o = mix(c1, c3, grad);\n    float u = 1.0 - abs(grad * 2.0 - 1.0);\n    \n    o = mix(o, c2, u);\n    return o;\n}\n\n\n\nvec4 streak(sampler2D source, \n            vec2 tc, \n            vec2 pixelSize, \n            vec2 dir, \n            int samples, \n            float attenuation, \n            int iteration,\n           \tvec4 channelMask){\n    \n    vec4 cOut = vec4(0.0);\n    \n    float b = pow(float(samples), float(iteration));\n    \n    const float nSamp = float(samp);\n    \n    for(float s = 0.0; s < nSamp; s++){\n     \tfloat weight = pow(attenuation, b * s);\n        \n        vec2 coord = tc + (dir * b * vec2(s) * pixelSize);\n        cOut += clamp(weight, 0.0, 1.0) * texture(source, coord) * channelMask;\n        \n        vec2 coord2 = tc + (dir*-1.0 * b * vec2(s) * pixelSize);\n        cOut += clamp(weight, 0.0, 1.0) * texture(source, coord2) * channelMask;\n    }\n    \n   \n    return saturate(cOut);\n}\n\n\nvec3 sobel(sampler2D samp, vec2 uv, vec2 fragCoord, vec2 res ){\n\t\n    vec3 col;\n    \n    /*** Sobel kernels ***/\n    // Note: GLSL's mat3 is COLUMN-major ->  mat3[col][row]\n    mat3 sobelX = mat3(-1.0, -2.0, -1.0,\n                       0.0,  0.0, 0.0,\n                       1.0,  2.0,  1.0);\n    mat3 sobelY = mat3(-1.0,  0.0,  1.0,\n                       -2.0,  0.0, 2.0,\n                       -1.0,  0.0,  1.0);  \n    \n    float sumX = 0.0;\t// x-axis change\n    float sumY = 0.0;\t// y-axis change\n    \n//    vec2 tSize = 1.0 / res;\n//   vec2 offset = tSize;\n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            // texture coordinates should be between 0.0 and 1.0\n            float x = (fragCoord.x + float(i))/res.x;\t\n    \t\tfloat y =  (fragCoord.y + float(j))/res.y;\n            \n            // Convolve kernels with image\n            sumX += length(texture( samp, vec2(x, y) ).xyz) * float(sobelX[1+i][1+j]) ;\n            sumY += length(texture( samp, vec2(x, y) ).xyz) * float(sobelY[1+i][1+j]) ;\n        }\n    }\n    \n    float g = abs(sumX) + abs(sumY);\n    //g = sqrt((sumX*sumX) + (sumY*sumY));\n    \n    if(g > 1.0)\n        col = vec3(1.0,1.0,1.0);\n    else\n        col = col * 0.0;\n    \n\treturn col;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}