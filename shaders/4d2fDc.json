{
    "Shader": {
        "info": {
            "date": "1502556731",
            "description": "moebius gears (somehow inspired by https://www.shadertoy.com/view/ls3GDr)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4d2fDc",
            "likes": 23,
            "name": "moebius gears",
            "published": 3,
            "tags": [
                "gears",
                "mobius",
                "moebius"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 789
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// moebius gears\n\n// i saw https://www.shadertoy.com/view/ls3GDr and wanted to do something similar\n// with an additional moebius twist\n\n\n#define PI2 6.2832\n#define GEAR_NUM 9\n#define TOOTH_NUM 15\n\n// iq's signed cylinder distance field\nfloat cylinder( vec3 p, float r, float h )\n{\n  vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat gear(vec3 p)\n{\n    float d=10000.;\n    float ang=atan(p.y,p.x);\n    d=min(d,cylinder(p,1.+.1*sin(ang*float(TOOTH_NUM)),.13));\n    d=max(d,-cylinder(p,.6,.5));\n    return d;\n}\n\nvec4 inverseQuat(vec4 q)\n{\n    //return vec4(-q.xyz,q.w)/length(q);\n    // if already normalized this is enough\n    return vec4(-q.xyz,q.w);\n}\n\nvec4 multQuat(vec4 a, vec4 b)\n{\n    return vec4(cross(a.xyz,b.xyz) + a.xyz*b.w + b.xyz*a.w, a.w*b.w - dot(a.xyz,b.xyz));\n}\n\nvec3 transformVecByQuat( vec3 v, vec4 q )\n{\n    return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w*v );\n}\n\nvec4 axAng2Quat(vec3 ax, float ang)\n{\n    return vec4(normalize(ax),1)*sin(vec2(ang*.5)+vec2(0,PI2*.25)).xxxy;\n}\n\n// checking all gears is slow...\nfloat allGears(vec3 p)\n{\n    float d = 10000.0;\n    float dang=PI2/(float(GEAR_NUM)-.5);\n    float R=2.0;\n    float s=1.0;\n    for(float ang=0.0;ang<PI2*2.-dang*.5;ang+=dang)\n    {\n\t    float r=R*tan(dang*.5)*(.96-.02+.02*cos(ang*.5));\n        vec3 pos=R*vec3(cos(vec2(ang,ang+PI2*.25)),0);\n        vec4 quat=vec2(0,.707107).xyxy;\n        quat=multQuat(quat,axAng2Quat(vec3(1,0,0),2.*sin(iTime*.5)*s));\n        quat=multQuat(quat,axAng2Quat(vec3(0,1,0),ang*.25));\n        quat=multQuat(quat,axAng2Quat(vec3(0,0,1),ang));\n        d=min(d,gear(transformVecByQuat(p-pos,quat)/r)*r);\n        s*=-1.;\n    }\n    return d;\n}\n\n// checking only nearest gears\nfloat allGearsNear(vec3 p)\n{\n    float l=length(p.xy);\n    float angp = -atan(p.y/l,p.x/l);\n    if(angp<0.0) angp+=PI2;\n    float d = 10000.0;\n    float dang=PI2/(float(GEAR_NUM)-.5);\n    float R=2.0;\n    for(float a=-1.;a<=1.;a++)\n    {\n      for(float b=0.;b<=1.;b++)\n      {\n        float ang=b*(PI2+dang*.5)+(a+floor(angp/dang))*dang;\n        if(ang>PI2*2.) ang-=PI2*2.;\n        if(ang<0.0) ang+=PI2*2.;\n        float s=mod(floor(ang/dang+.01),2.)*2.-1.;\n\t    float r=R*tan(dang*.5)*(.96-.02+.02*cos(ang*.5));\n        vec3 pos=R*vec3(cos(vec2(ang,ang+PI2*.25)),0);\n        vec4 quat=vec2(0,.707107).xyxy;\n        quat=multQuat(quat,axAng2Quat(vec3(1,0,0),2.*sin(iTime*.5)*s));\n        quat=multQuat(quat,axAng2Quat(vec3(0,1,0),ang*.25));\n        quat=multQuat(quat,axAng2Quat(vec3(0,0,1),ang));\n        d=min(d,gear(transformVecByQuat(p-pos,quat)/r)*r);\n      }\n    }\n    return d;\n}\n\nfloat dist(vec3 p)\n{\n    return allGearsNear(p);\n}\n\nfloat march(inout vec3 pos, vec3 dir)\n{\n    float rval=0.0;\n    float eps=.001;\n    for(int i=0;i<50;i++)\n    {\n       \tfloat d=dist(pos);\n        if(d<eps) { rval=1.0; break; }\n        pos+=dir*d*.7;\n    }\n    return rval;\n}\n\nvec3 getGrad(vec3 p)\n{\n    float eps=.01;\n    vec3 d = vec3(eps,0,0);\n    return vec3(\n        dist(p+d.xyz)-dist(p-d.xyz),\n        dist(p+d.zxy)-dist(p-d.zxy),\n        dist(p+d.yzx)-dist(p-d.yzx)\n        )/eps;\n}\n\nvec3 refl(vec3 dir)\n{\n\treturn texture(iChannel0,dir.yzx).xyz*1.2+.1;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec3 pos = vec3(0,0,7);\n \tvec3 dir = normalize(vec3((fragCoord.xy-.5*iResolution.xy)/iResolution.x,-1.));\n    vec2 ang=PI2*iMouse.xy/iResolution.xy*vec2(1,.7);\n    if(iMouse.x==0. && iMouse.y==0.) ang = vec2(2.5,1.1);\n    vec4 q = vec4(0,0,0,1);\n    q = multQuat(q,axAng2Quat(vec3(0,0,1),ang.x));\n    q = multQuat(q,axAng2Quat(vec3(1,0,0),ang.y));\n    pos=transformVecByQuat(pos,q);\n   \tdir=transformVecByQuat(dir,q);\n    float m = march(pos,dir);\n    vec3 n = normalize(getGrad(pos));\n    vec3 bg=mix(vec3(1),vec3(.3,.3,1),length(fragCoord.xy-.5*iResolution.xy)/iResolution.x);\n    vec3 col=vec3(.9,.95,1);\n    col*=refl(reflect(dir,n));\n    bg = refl(dir);\n    // calc ao by stepping along normal\n    float ao=1.;\n    ao*=.2+.8*dist(pos+n.xyz*.12)/.12;\n    ao*=.4+.6*dist(pos+n.xyz*.25)/.25;\n    ao*=.6+.4*dist(pos+n.xyz*.5)/.5;\n    col*=clamp(ao,0.,1.);\n    float vign = (1.-.3*length((fragCoord.xy/iResolution.xy)*2.-1.));    \n    fragColor=vec4(mix(col,bg,1.-m)*vign,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}