{
    "Shader": {
        "info": {
            "date": "1606567495",
            "description": "Shader coded for the Cookie Collective live coding stream.\n[url]https://cookie.paris/[/url]\n[url]https://www.twitch.tv/cookiedemoparty[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wsGBz1",
            "likes": 13,
            "name": "Cave (cookie live stream)",
            "published": 3,
            "tags": [
                "cave",
                "cookie"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "//\n// Shader coded for the Cookie Collective live coding stream\n// https://cookie.paris/\n// https://www.twitch.tv/cookiedemoparty\n// \n// Leon Denise 2020.11.28\n// Licensed under hippie love conspiracy\n//\n\n// repeat coordinate\n#define repeat(p,r) (mod(p,r)-r/2.)\n\n// rotation matrix\nmat2 rotation(float a)\n{\n    float c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\n// signed distance field\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    \n    // world space\n    vec3 world = p;\n    \n\t// repeat space\n    p.z = repeat(p.z + iTime * 0.1, 3.0);\n    \n    // kaleidoscopic iterated function\n    const int count = 8;\n    float falloff = 1.0;\n    for (int i = 0; i < count; ++i)\n    {\n        // fold space\n        p.xz = abs(p.xz)-0.5*falloff;\n        \n        // rotations\n        p.yx *= rotation(sin(1.3/falloff + world.z * 0.5 + iTime * 0.1)/falloff);\n        p.xz *= rotation(sin(iTime*0.01) / falloff);\n        \n        // fold space\n        p.x = abs(p.x)-0.1;\n        \n        // sphere\n        dist = min(dist, length(p)-0.4*falloff);\n        \n        // falloff for next iteration\n        falloff /= 1.5;\n    }\n    \n    // inverse volume\n    dist = -dist;\n    \n    // carve a tunnel\n    dist = max(-length(world.xy)+0.2,dist);\n    \n    // displace surface with texture\n    dist -= texture(iChannel0, p.xz * 2.).r*0.1;\n    \n    // tubes\n    p.xz = abs(p.xz)-0.01;\n    dist = min(dist, length(p.xz)-0.001);\n    \n    // sphere on tubes\n    p.y = repeat(p.y, 0.1);\n    dist = min(dist, length(p)-0.005);\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 color, in vec2 coordinate )\n{\n    // coordinates\n    vec2 uv = 2.*(coordinate-0.5*iResolution.xy)/iResolution.y;\n    vec3 camera = vec3(0,0,-4);\n    vec3 ray = normalize(vec3(uv,0.5));\n    \n    // camera animation\n    camera.x += sin(iTime*0.2)*0.1;\n    camera.y += sin(iTime*0.3)*0.05;\n    ray.xy *= rotation(sin(iTime)*0.05);\n    ray.xz *= rotation(sin(iTime*0.1)*0.5);\n    \n    // raymarch iteration\n    const int count = 30;\n    for (int index = 0; index < count; ++index)\n    {\n        // distance field\n        float dist = map(camera);\n        \n        // collide with volume\n        if (dist < 0.001)\n        {\n            // coloring\n            float shade = float(count-index)/float(count);\n    \t\tvec3 tint = vec3(0.5)+vec3(0.5)*sin(vec3(1,2,3)*shade*2.+camera.z*4.);\n            color = vec4(tint*shade, 1);\n            break;\n        }\n        \n        // march\n        camera += ray * dist;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}