{
    "Shader": {
        "info": {
            "date": "1551000979",
            "description": "Grid with animated modulated Circles \n\nPlease wait for a while and look what's happening!\nConcentric Waves will turn into constantly changing harmonic patterns",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXXWr",
            "likes": 11,
            "name": "Celestrial Harmony",
            "published": 3,
            "tags": [
                "starfield",
                "harmonics"
            ],
            "usePreview": 0,
            "username": "arthurstammet",
            "viewed": 793
        },
        "renderpass": [
            {
                "code": "// Grid with animated modulated Circles\n// A kind of waving regular starfield\n\n// Please wait for a while and look what's happening!\n// Concentric Waves will turn into constantly changing harmonic patterns\n\n\nfloat Xor(float a, float b) {\n    return a*(1.-b) + b*(1.-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; // set center to the middle of the screen\n    vec3 col = vec3(0.,0.,0.); // black screen\t\n    \n    // ---- Play with the values -----------------------------------------------------------------------------------------------\n\n    float r1 = 0.; // 0 <> 1.5 for circles : smallest radius\n    float r2 = 0.2; // 0 <> 1.5 for circles : biggest radius\n\n    float c1 = 40.; // base amount of cells\n    float c2 = 18.; // max amount of added cells ( c2 < c1 )\n    \n    float t0 = iTime*2.; // change global speed\n    \n    float ta = t0*.2; // change animation speed : animation amplitude\n    float tr = t0*.008; // change animation speed : starfield rotation\n    float tn = t0*.009; // change animation speed : number of cells\n\n    float th1 = t0*.0002; // change animation speed : diameter of the circles\n    // calculate 4 harmonics\n    float h1 = sin(th1);\n    float th2 = t0*.1; // change animation speed of the 2nd harmonic \n    float h2 = 2.*h1*(th2/1.1); // change amplitude of the 2nd harmonic\n    float th3 = t0*.11; // change animation speed of the 3rd harmonic\n    float h3 = 7.*h1*(th3/7.); // change amplitude of the 3rd harmonic\n    float th4 = t0*.08; // change animation speed of the 4th harmonic\n    float h4 = 8.*h1*(th4/8.3); // change animation speed of the 4th harmonic\n    float th5 = t0*.12; // change animation speed of the 5th harmonic \n    float h5 = 2.*h1*(th2/9.4); // change amplitude of the 5th harmonic\n    float th6 = t0*.13; // change animation speed of the 6th harmonic\n    float h6 = 7.*h1*(th3/13.5); // change amplitude of the 6th harmonic\n    float th7 = t0*.05; // change animation speed of the 7th harmonic\n    float h7 = 8.*h1*(th4/14.6); // change animation speed of the 7th harmonic\n\n    // build a complex wave with 2, 3 ... 7 harmonics\n    // float tVarD = h1+h2;\n    // float tVarD = h1+h2+h3;\n    // float tVarD = h1+h2+h3+h4;\n    // float tVarD = h1+h2+h3+h4+h5;\n    // float tVarD = h1+h2+h3+h4+h5+h6;\n    float tVarD = h1+h2+h3+h4+h5+h6+h7;\n    \n    // -----------------------------------------------------------------------------------------------\n    \n\t// rotate the matrix\n    float a = tr;\n    float s = sin(a);\n    float c = cos(a);\n    uv *= mat2(c, -s, s, c);\n    uv *= c1 + (sin(tn)*c2);\n\n    vec2 gv = fract(uv)-.5; // set center of a single box\n    vec2 id = floor(uv)+.5; // give each single box an id\n\n    float m = 0.;\n\n    // using the 8 cells surrounding main cell for drawing the circles\n    for(float y=-1.; y<=1.; y++) {\n        for(float x=-1.; x<=1.; x++) {\n\t        vec2 offs = vec2(x, y);\n\t        float d = length(gv-offs);\n            float dist = length(id+offs)*(.25+(tVarD*.25)); // make the diameters pulsate\n\t        float r = mix(r1, r2, sin(dist-ta)*.5+.5); // set min and max = animation amplitude\n\n            m = Xor(m, smoothstep(r, r-15./iResolution.y, d));\n        }\n    }\n\n    col += m;\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}