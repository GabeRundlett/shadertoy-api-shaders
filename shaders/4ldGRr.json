{
    "Shader": {
        "info": {
            "date": "1467685655",
            "description": "Care for a dance Mr. Smith?",
            "flags": 64,
            "hasliked": 0,
            "id": "4ldGRr",
            "likes": 3,
            "name": "Supershape visits Matrix ðŸ”Š",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "superformula",
                "matrix",
                "dancing",
                "supershape"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define PI 3.14159\n#define TWO_PI 6.28319\n#define PHI 0.618\n#define SAMPLE_POINT_LOW vec2 (0.013, 0.25)\n#define SAMPLE_POINT_HIGH vec2 (0.9, 0.2)\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\nfloat random (vec2 co) {\n   return fract (sin (dot (co.xy, vec2 (12.9898,78.233))) * 43758.5453);\n}\n\nvec4 getBass () {\n    return normalize (texture (iChannel0, SAMPLE_POINT_LOW)).xyxx;    \n}\n\nvec4 getTreble () {\n    return normalize (texture (iChannel0, SAMPLE_POINT_HIGH)).xyxx;    \n}\n\nfloat superformula (float angle, vec4 shape, vec2 symmetry) {    \n    float m = shape.x;\n    float n1 = shape.y;\n    float n2 = shape.z;\n    float n3 = shape.w;\n    float a = symmetry.x;\n    float b = symmetry.y;\n\n    float rpart = (m * angle) / 4.;\n    float apart = abs (cos (rpart) / a);\n    float bpart = abs (sin (rpart) / b);\n\n    float r = pow (\n        pow (apart, n2) + pow (bpart, n3),\n        -1. / n1\n    );\n    \n    return r;\n}\n\nfloat angleBetween (vec2 a, vec2 b) {\n    float cosTheta = dot (a, b) / (length (a) * length (b));\n    return acos (cosTheta);\n}\n\nvec4 createShape (float t, vec4 music) {\n    vec4 treble = getTreble ();\n    vec4 nt = normalize (treble);\n    \n    float m = mix (4., length (music), length (nt.xz));\n    //float n1 = 3. + 6. * music.x ;\n    float n1 = 2. + mix (PHI, mix (5., 2., max (0.5, abs (sin (treble.x)))), abs (tan (t / 2.)));\n    float n2 = 2. + 10. * music.z ;\n    float n3 = mix (2., length (nt.yw), normalize (music).z);\n    \n    return vec4 (m, n1, n2, n3);\n}\n\nvec2 createSymmetry (float t) {\n    vec4 music = getBass ();\n    \n    float x = 1.;\n    float y = 1.;\n    \n    return vec2 (x, y) * music.z;\n}\n\nvec4 crazyNoise (vec4 music, vec2 fragCoord, float t) {    \n    vec4 noise = vec4 (\n        abs (tan (random (fragCoord + music.xy) + music.z)) + 0.1 * sin (t),\n        abs (sin (random (fragCoord + music.yx) + music.z)) + 0.1 * sin (t),\n        abs (tan (random (fragCoord + music.yx) + music.z)) + 0.1 * sin (t),\n        1.\n    );\n    \n    return noise;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    float radius = iResolution.y / PI;\n    \n    vec2 center = iResolution.xy / 2.;\n    vec2 d = fragCoord - center;\n    vec2 up = vec2 (0., 1.);\n    \n    float t = iTime * 0.6;\n    float tc = iChannelTime[0];\n    float tTrack = 7.*(.5*sin(tc)+.5) + 14.;\n    \n    float angle = angleBetween (up, d);\n    vec4 music = vec4(7.*PHI, 13., 3.*PHI, 4.5) * (2. * getTreble () + 5. * getBass ()) / 7.;\n    vec2 symmetry = createSymmetry (tTrack);\n    vec4 shape = createShape (PHI, music);\n    float r = superformula (angle, shape, symmetry) * radius;\n    \n    float crazyPattern = tan (angle * tTrack + tTrack);\n    fragColor = vec4 (PHI) - sin (angle) * crazyNoise (music, fragCoord, tTrack);\n    \n    if (length (d) <= r) {\n        float dr = (r) / length (d);\n        \n        vec4 c = normalize (shape);\n        //c.r = mix (1. - c.r, c.r, dr);\n        //c.g = mix (0., 1. - c.g, dr);\n        //c.b = 1. - c.b * dr;\n        //c.a = mix (0.6, 1., dr);\n        \n        fragColor = (1. - dr) * fragColor + mix (0.0618, 0.145, sin (t)) * crazyPattern * c + dr * fragColor;\n    }\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 25267,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/toka-kakabadze/sorry"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}