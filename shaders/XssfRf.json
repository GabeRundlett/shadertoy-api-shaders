{
    "Shader": {
        "info": {
            "date": "1497304624",
            "description": "just read the shader text, this is smarter than java code.\n\ncyan is <0\nmagenta is ==0\nyellow is >0\n\nmix(a,b,step(c,0.)+step(0.,c)-1.)\nis equal to\nif(c<=0.)return a;else return b;",
            "flags": 0,
            "hasliked": 0,
            "id": "XssfRf",
            "likes": 0,
            "name": "mix(a,b,step(c,0)+step(0,c)-1)",
            "published": 3,
            "tags": [
                "branchless",
                "boolean",
                "comparator",
                "syntax",
                "fuzzylogic",
                "lisp",
                "xif"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 529
        },
        "renderpass": [
            {
                "code": "//self: https://www.shadertoy.com/view/XssfRf\n//xif(m,n1,n2)=mix(n1,n2,step(...m...)), for all 6 float comparators:\n//from top to bottom; [v>0.] [v<0.] [v==0.] |mirrorInversesTo| [v!=0.] [v>=0.] [v<=0.] \n\n/*\nThe first programming languages had a VERY non-user friendly IF() function.\nNon user friendly, because first language compilers and hardware lacked utility.\n1970s hardware was very bad at jump(ing) (very slow magnet tape memory),\n... but relatively good in caching (decent accumulators and maybe even 8k of ram).\nTherefore it was common to write a custom XIF(n1,n2,m) function.\nThis whole shader very much the same as XIF(); \nAn if() branch made to a branchless XIF(),\n...that evaluates all possible outcomes (n1 and n2) before chosing one of them.\n\nDo you know what else is relatively bad at jump(ing)?\nthe newest 2017 gpu architecture.\nit is so specialized in longer and longer pipeline support, \n...that is is often better to not jump (to avoid shorter branching pipelines), \n...and to instead calculate&cache multiple possible outcomes in parallel (8gb FAST ram is cheap now)\n...and then have one value [m] decide which outcome to use.\n\nMaking things branchless, you easily mess up boolean algrbra.\nEspecially when it gets fuzzy, by using type float.\nUnlike tpe bool, type float distinguishes 3 cases [>],[<],[=]\n...and their inversions [<=] [>=] [!=] , this making them \"fuzzy\".\n\nThe simple underlying principle is to replace\nif(c> 0)return a;else return b; \nby \nreturn mix(a,b,step(c,0.))\nand to MEMORIZE the 6 mix(,,step()...) identities for the 6 comparators:\n*/\n\n//these branchless comparators compare [c] with [0.0] to return [a]==true or [b]==false;\n//based on \n//  https://www.reddit.com/r/askmath/comments/6aag2g/simplifying_stepa00step00a/\n//(c> 0)?a:b\n#define greater(a,b,c)   mix(a,b,step(c,0.))\n//(c< 0)?a:b\n#define less(a,b,c)      mix(a,b,step(0.,c))\n//(c==0)?a:b  <- this actually fails to work with EuclideanRythms\n#define equals(a,b,c)    mix(b,a,step(c,0.)+step(0.,c)-1.)\n//----------- mirror symmetry mirror == swap outputs--------------------\n//(c!=0)?a:b <- this actually fails to work with EuclideanRythms\n#define unequal(a,b,c)   mix(a,b,step(c,0.)+step(0.,c)-1.)\n//(a>=0)?a:b   \"unless   \"=not less   ==greater OR equal\n#define unless(a,b,c)    mix(b,a,step(0.,c))\n//(c<=0)?a:b   \"ungreater\"=not greater==less    OR equal\n#define ungreater(a,b,c) mix(b,a,step(c,0.))\n\n//colored columns show 3 outcomes. \nvec4 cyan   (){return vec4(0,1,1,1);}\nvec4 magenta(){return vec4(1,0,1,1);}\nvec4 yellow (){return vec4(1,1,0,1);}\n\nvoid three(float u,float v,inout vec4 O){\n float c=0.;//we compare a with 0., any inequality easily converts into [a<>=0.]\n      if(       u<1.2){c=-1.;}\n else if(u>1.2&&u<1.8){c=-0.;}//sign of the zero (type float) must not matter here!\n else if(u>1.8&&u<3. ){c=+1.;}\n //above is different setup for u-> 3*[c] columns.\n    \n //below is the \"boolean test area\", different comparator for 6*[v] lines:\n float truth=.0;//brightness factor to be modified.\n      if(v>5.)truth=greater  (2.,.1,c);//if(a> 0)return 2.;return .1 //1st highest line\n else if(v>4.)truth=less     (2.,.1,c);//if(a< 0)return 2.;return .1 //2nd highest line\n else if(v>3.)truth=equals   (2.,.1,c);//if(a==0)return 2.;return .1 //3rd highest line\n else if(v>2.)truth=unequal  (2.,.1,c);//if(a>=0)return 2.;return .1 //4th highest line\n else if(v>1.)truth=unless   (2.,.1,c);//if(a<=0)return 2.;return .1 //5th highest line\n else if(v>0.)truth=ungreater(2.,.1,c);//if(a!=0)return 2.;return .1 //6th highest line\n \n //3 colors, brightness set by [truth] and [u]              \n if(       u<1.2)O=truth*cyan();\n if(u>1.2&&u<1.8)O=truth*magenta();\n if(u>1.8&&u<3. )O=truth*yellow();}\n\n\nvoid mainImage( out vec4 O, in vec2 U ){O=vec4(0);\n float u=U.x*3./iResolution.x;//3 columns for 3 cases: [u<0],[u==0],[u>0]                      \n float v=U.y*6./iResolution.y;\n three(u,v,O);\n /*\n if(      a<1.)O=left();\n if(a>1.&&a<2.)O=mid();\n if(a>2.&&a<3.)O=right();*/\n}\n\n//what is the difference between \"Magenta\" and \"Fucsia\"\n//what is the difference between \"Cyan\"    and \"Aqua\"",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}