{
    "Shader": {
        "info": {
            "date": "1718215368",
            "description": "Each frame every pixel's color changes to that of one of it's neighbors",
            "flags": 32,
            "hasliked": 0,
            "id": "X3G3DV",
            "likes": 3,
            "name": "Pixel Fight 0 - DJ",
            "published": 3,
            "tags": [
                "simulation",
                "pixelfight"
            ],
            "usePreview": 0,
            "username": "DjBlueBear",
            "viewed": 102
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 color_0 = vec3(1.0,0.0,0.0);\n\nconst vec3 color_1 = vec3(0.0,1.0,0.0);\n\nconst vec3 color_2 = vec3(0.0,0.0,1.0);\n\nuint hash(inout uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\nfloat rand(inout uint seed)\n{\n    return fract(float(hash(seed)) / 4294967295.0);//4294967296 2 ^ 32 / 32 bit unsigned integer limit\n}\n\nvec2 randVec2(inout uint seed)\n{\n    float x = rand(seed) * 2.0 - 1.0;\n    float y = rand(seed) * 2.0 - 1.0;\n    return vec2(x,y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float safeFrame = mod(float(iFrame + 2) + iDate.w, 1000.0);\n    uint seed = uint((fragCoord.x * iResolution.y + fragCoord.y) * safeFrame);\n    \n    if(iFrame == 0)\n    {\n        float value = rand(seed);\n        vec3 col = value < 0.333 ? color_0 : value < 0.666 ? color_1 : color_2;\n        fragColor = vec4(col, 1.0);\n        return;\n    }\n    \n    vec2 offset = randVec2(seed);\n    \n    vec4 buffer;\n    \n    if(offset + fragCoord != clamp(offset + fragCoord, vec2(0.0), iResolution.xy))\n    {\n        buffer = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n    else\n    {\n        buffer  = texelFetch(iChannel0, ivec2(fragCoord + offset), 0);\n    }\n    \n    fragColor = buffer;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float safeFrame = mod(float(iFrame + 3) + iDate.w, 1000.0);\n    uint seed = uint((fragCoord.x * iResolution.y + fragCoord.y) * safeFrame);\n    \n    vec2 offset = randVec2(seed);\n    \n    vec4 buffer;\n    \n    if(offset + fragCoord != clamp(offset + fragCoord, vec2(0.0), iResolution.xy))\n    {\n        buffer = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n    else\n    {\n        buffer  = texelFetch(iChannel0, ivec2(fragCoord + offset), 0);\n    }\n    \n    fragColor = buffer;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float safeFrame = mod(float(iFrame + 4) + iDate.w, 1000.0);\n    uint seed = uint((fragCoord.x * iResolution.y + fragCoord.y) * safeFrame);\n    \n    vec2 offset = randVec2(seed);\n    \n    vec4 buffer;\n    \n    if(offset + fragCoord != clamp(offset + fragCoord, vec2(0.0), iResolution.xy))\n    {\n        buffer = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n    else\n    {\n        buffer  = texelFetch(iChannel0, ivec2(fragCoord + offset), 0);\n    }\n    \n    fragColor = buffer;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float safeFrame = mod(float(iFrame + 5) + iDate.w, 1000.0);\n    uint seed = uint((fragCoord.x * iResolution.y + fragCoord.y) * safeFrame);\n    \n    vec2 offset = randVec2(seed);\n    \n    vec4 buffer;\n    \n    if(offset + fragCoord != clamp(offset + fragCoord, vec2(0.0), iResolution.xy))\n    {\n        buffer = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n    else\n    {\n        buffer  = texelFetch(iChannel0, ivec2(fragCoord + offset), 0);\n    }\n    \n    if(buffer == vec4(0.0))\n    {\n       fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n       return;\n    }\n    fragColor = buffer;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}