{
    "Shader": {
        "info": {
            "date": "1612551618",
            "description": "blue clouds",
            "flags": 32,
            "hasliked": 0,
            "id": "tltfDn",
            "likes": 21,
            "name": "Blue Clouds",
            "published": 3,
            "tags": [
                "2d",
                "raymarching",
                "clouds",
                "volumetric",
                "godrays",
                "lightshafts"
            ],
            "usePreview": 1,
            "username": "TheNosiriN",
            "viewed": 1093
        },
        "renderpass": [
            {
                "code": "// Made by: TheNosiriN\n// Use mouse to move the sun\n// Look in \"Common\" tab for settings\n\n\n\n\n\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03; float c = 2.43;\n    float d = 0.59; float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = UV;\n    #ifdef MARGIN\n    if(uv.y < marginSize || uv.y > 1.0-marginSize){ fragColor = vec4(0.0); return; }\n    #endif\n    vec3 color;\n    \n    //from: https://www.shadertoy.com/view/3lXcW8\n    float shaft = 0.0;\n    vec3 shp = vec3(uv, max(0.0, (imageBrightness/10.0)-0.5)) - 0.5;\n    for (float i=0.0; i<100.0; i++){\n        shp.xy = (shp.xy-SUNPOS) * 0.992 + SUNPOS;\n        shp.xy += hash21(shp.xy)*0.005;\n        shaft += pow(\n            saturate(texture(iChannel0, 0.5+shp.xy).a), 10.0/flareBrightness\n        ) * exp(-i*(1.0-radialLength));\n    }\n    //\n    \n    vec4 clouds = texture(iChannel0, uv);\n    clouds.rgb = mix(clouds.rgb, pow(clouds.rgb,vec3(2))*SUNCOLOR, min(2.0,shaft)*0.2);\n    \n    color = ACESFilm(saturate(clouds.rgb));\n    \n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f*f*(6.0*f*f - 15.0*f + 10.0);\n    \n    return mix(\n        mix(hash21(i+vec2(0.0,0.0)),hash21(i+vec2(1.0,0.0)),u.x),\n        mix(hash21(i+vec2(0.0,1.0)),hash21(i+vec2(1.0,1.0)),u.x),\n    u.y);\n}\nfloat cloud(vec2 p)\n{\n    vec2 time = vec2(TIME*0.2);\n    \n    float r = texture(iChannel1, p+time*0.5).r;\n    \n\tp += time;\n    float f = 0.0, a = 1.0;\n    for (int i=0; i<5; i++){\n\t\tf += (noise(p)+texture(iChannel1, p).r*0.5)*a;\n        p = (M2*p + time)*2.0;\n\t\ta *= 0.5;\n    }\n    \n    f *= f;\n    f = saturate(f);\n    f = 1.0-(1.0-f) * (1.0-f);\n    return f;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef BLUR\n    if (fragCoord == vec2(0.5,0.5)){ fragColor.a=iResolution.x; return; }\n    vec4 pc = texelFetch(iChannel0,ivec2(0,0),0);\n    if (iResolution.x!=pc.a){ fragColor = vec4(0); return; }\n    #endif\n    \n    vec2 uv = UV;\n    #ifdef MARGIN\n    if(uv.y < marginSize || uv.y > 1.0-marginSize){ fragColor = vec4(0.0); return; }\n    #endif\n    uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    vec4 color;\n    \n    vec3 sky1 = vec3(0.2,0.4,0.6);\n    vec3 sky2 = saturate(sky1+vec3(0.2,0.3,0.4));\n    \n    \n    float ambient = 0.15;\n    float intensity = 1.25;\n\t\n    float stepsinv = 1.0 / STEPS;\n    \n    vec2 sundir = SUNPOS;\n    vec2 dist = vec2(mix(0.01,0.03,saturate(length(sundir-uv))));\n    \n    vec2 dp = normalize(sundir-uv) * dist * stepsinv;\n    float total = 0.0;\n    vec2 p = uv;\n    float fd = cloud(p);\n    \n    for(float i=0.0; i<STEPS; ++i){\n        float h = i * stepsinv;\n        p += dp * (1.0 + h * (hash21(p) * 0.75));\n   \t\tfloat d = cloud(p);\n        total += (saturate(fd-d) + ambient*stepsinv) * (1.0-h);\n    }\n    total = saturate(total);\n    \n    vec3 sky = mix(sky2, sky1, uv.y);\n    color.rgb = mix(sky*0.8, SUNCOLOR, total) * intensity;\n    color.rgb = 1.0-(1.0-color.rgb)*(1.0-sky*0.5);\n    color.rgb = pow(color.rgb, vec3(3.0));\n    color.a = total;\n    \n    \n    vec3 sun = vec3(saturate(0.03/length(uv-sundir)));\n    sky += sun;\n    \n    color.rgb = mix(sky, color.rgb, fd);\n    color.rgb = saturate(color.rgb);\n    \n    #ifdef BLUR\n    float st = 1.0/(0.5/iTimeDelta);\n    color.rgb = texture(iChannel0, UV).rgb*(1.0-st)+color.rgb*st;\n    #endif\n    \n    \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n//#define BLUR //uncomment this if you see artifacts\n#define MARGIN //comment this to remove margins\n\n#define TIME (iTime*0.05)\n#define saturate(x) clamp(x,0.0,1.0)\n#define UV (fragCoord.xy/iResolution.xy)\n#define SUNCOLOR vec3(0.929,0.831,0.929)\n#define SUNPOS ((iMouse.xy-iResolution.xy*0.5)/iResolution.y)\n\nconst float STEPS = 32.0; //make this 16.0 if your pc cant handle it\n\nconst float radialLength = 0.96;\nconst float imageBrightness = 9.0;\nconst float flareBrightness = 4.5;\n\n\nconst float marginSize = 0.08;\n\nconst mat2 M2 = mat2(0.8,-0.6,0.6,0.8);\n\nfloat hash21(vec2 p){\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)*2.0-1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}