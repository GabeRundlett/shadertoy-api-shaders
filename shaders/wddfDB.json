{
    "Shader": {
        "info": {
            "date": "1605959132",
            "description": "Variation on [url]https://www.shadertoy.com/view/tstfzs[/url] with randomization & a few tweaks.\n\nFull screen best & mouse to zoom in, as before.",
            "flags": 0,
            "hasliked": 0,
            "id": "wddfDB",
            "likes": 4,
            "name": "Random Graph",
            "published": 3,
            "tags": [
                "random",
                "graph"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Random Graph\n// Matthew Arcus, mla, 2020\n//\n// Variation of https://www.shadertoy.com/view/tstfzs\n//\n// Take N points in a circle, draw a line between each pair of\n// points. The obvious way to do this in a fragment shader is to test\n// the pixel against every point pair, but this gets slow for larger\n// number of points. A better way is to maintain two indexes into the\n// points, i and j, and each time around the loop, after testing for\n// proximity to the line between i and j, increment the index that\n// will move the line towards the pixel rather than away (draw a\n// diagram if this isn't clear).\n//\n// We can also draw the lines selectively, for example, randomize when\n// each line appears, so the complete graph structure only emerges gradually.\n// \n////////////////////////////////////////////////////////////////////////////////\n\nconst int N = 64; // number of nodes\nconst int P = 16;  // bipartite block size\nint Q; // sub block size\nconst float T = 15.0; // Cycle time\nconst float X = 6.0;  // Speed (N/X should be 10 seconds or so)\n\nbool select(int i, int j) {\n  if (Q == 0) return true; // Complete graph\n  // For a bipartite graph, divide up into blocks of P points, the\n  // first Q points of each block are connected to every point in the\n  // last P-Q of each block.\n  return (i%P < Q) != (j%P < Q);\n}\n\nbool rselect(int i, int j) {\n  if (!select(i,j)) return false;\n  // Randomly choose whether to display each line, based on the time,\n  // so lines gradually all appear.\n  uint h = ihash(uint(i) + uint(256*j));\n  return float(h) / 4294967296.0 < mod(iTime,T)/10.0;\n}\n\nvec3 diagram(vec2 p) {\n  float lwidth = fwidth(p.x);\n  vec3 col = vec3(1,1,0.8);\n  if (dot(p,p) > 1.0+lwidth) return col;\n  int cycle = int(iTime/T);\n  Q = cycle%(P/2+1);\n  float k = float(N);\n  //k *= smoothstep(0.0,k,min(k,X*mod(iTime,T)));\n  float d2 = 1e8;\n  for (float i = 0.0, j = 1.0; j < k; ) {\n    float offset = 0.5*float(Q-1); // Centre on Q block\n    float ii = 2.0*PI/k*(i-offset);\n    float ij = 2.0*PI/k*(j-offset);\n    vec2 q = vec2(sin(ii),cos(ii));\n    vec2 r = vec2(sin(ij),cos(ij));\n    if (rselect(int(i),int(j))) d2 = min(d2,segment2(p,q,r));\n    vec2 n = r-q;\n    if (dot(p-q,vec2(-n.y,n.x)) > 0.0) i++;\n    else j++;\n  }\n  col = mix(vec3(0),col,smoothstep(0.0,lwidth,sqrt(d2)));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  if (iMouse.z > 0.0) {\n    vec2 mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p -= mouse; // Centre on mouse\n    p *= 0.55*iResolution.y/iResolution.x; // And zoom\n  }\n  vec3 col = diagram(p);\n    col = 1.0-col;\n  fragColor = vec4(pow(col,vec3(0.4545)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159265;\n\n// Distance squared of p from line segment qr.\nfloat segment2(vec2 p, vec2 q, vec2 r) {\n  p -= q; r -= q;\n  float h = dot(p,r)/dot(r,r);\n  h = clamp(h,0.0,1.0);\n  p -= h*r;\n  return dot(p,p);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}