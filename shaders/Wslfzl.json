{
    "Shader": {
        "info": {
            "date": "1588924356",
            "description": "Travel through a pipe",
            "flags": 0,
            "hasliked": 0,
            "id": "Wslfzl",
            "likes": 4,
            "name": "tube_yurka",
            "published": 3,
            "tags": [
                "tube"
            ],
            "usePreview": 0,
            "username": "yurka",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "#define DELTA_DISTANCE  1e-10\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat random (in float _st) {\n    return fract(sin(dot(vec2(_st, 0.0),\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat timescale = 0.5;\n\nvec3 ProjectPointOnLine(vec3 a, vec3 v, vec3 pos)\n{\n \tvec3 p = pos-a;\n\n\tfloat l_l = length(v);\n\tfloat l_p = length(p);\n\n\tif (l_l<DELTA_DISTANCE)\n\t\treturn a;\n\tif (l_p<DELTA_DISTANCE)\n\t\treturn a;\n\n\tvec3 l_u = normalize(v);\n\n\treturn a + l_u*dot(v,p)/l_l;\n}\n\nbool intersectPlaneAndLine(vec3 planePoint, vec3 planeVector, vec3 linePoint, vec3 lineVector, out vec3 p)\n{\n    float planeD = -(planeVector.x*planePoint.x + planeVector.y*planePoint.y + planeVector.z*planePoint.z);\n    p = vec3(0);\n    float temp = planeVector.x * lineVector.x + planeVector.y * lineVector.y + planeVector.z * lineVector.z;\n    if (abs(temp) < 1E-40)\n        return false;\n    float t = (-planeD - planeVector.x * linePoint.x - planeVector.y * linePoint.y - planeVector.z * linePoint.z) / temp;\n    p.x = lineVector.x * t + linePoint.x;\n    p.y = lineVector.y * t + linePoint.y;\n    p.z = lineVector.z * t + linePoint.z;\n    return true;\n}\n\nvec2 GetTotal(float atime)\n{\n    \n    vec2 dprev = vec2(random(floor(atime * timescale) - 1.0) - 0.5, random(floor(atime * timescale) - 1.0 + 0.4) - 0.5);\n    vec2 d     = vec2(random(floor(atime * timescale)) - 0.5, random(floor(atime * timescale) + 0.4) - 0.5);\n    vec2 dnext = vec2(random(floor(atime * timescale) + 1.0) - 0.5, random(floor(atime * timescale) + 1.0 + 0.4) - 0.5);\n    float prg = fract(atime * timescale);\n    //float pd = 1.0 - abs(prg - 0.5);\n    //float pdprev = max(0.0, 0.5 - prg);\n    //float pdnext = max(0.0, prg - 0.5);\n    \n    float ddd = pow(2.0*(prg - 0.5), 2.0) * 0.5;\n    float pd = 1.0 - ddd;\n    float pdprev = ddd;\n    float pdnext = ddd;\n    if (prg < 0.5)\n        pdnext = 0.0;\n    else\n        pdprev = 0.0;\n    \n    vec2 dtotal = dprev * pdprev + d * pd + dnext * pdnext;\n    return dtotal * 1.5;\n}\n\nfloat length2(vec3 v){\n        return v.x*v.x+v.y*v.y+v.z*v.z;               \n}\n\nfloat GetAngle(vec3 v1, vec3 v2)\n{\n    float cosval = dot(v1, v2) / (length(v1) * length(v2));\n    if (cosval < -1.0)\n        cosval = -1.0;\n    if (cosval > 1.0)\n        cosval = 1.0;\n    return acos(cosval);\n}\n\nvec3 RotateVectorAroundVector(vec3 axe, vec3 v, float angle)\n{\n    vec3 res;\n    float a [3 * 3];\n\n    float c = cos(angle);\n    float s = sin(angle);\n    axe = normalize(axe);\n    a[0*3+0] = c + (1.0 - c) * axe.x * axe.x;\n    a[0*3+1] = (1.0 - c) * axe.y * axe.x - s * axe.z;\n    a[0*3+2] = (1.0 - c) * axe.z * axe.x + s * axe.y;\n    a[1*3+0] = (1.0 - c) * axe.x * axe.y + s * axe.z;\n    a[1*3+1] = c + (1.0 - c) * axe.y * axe.y;\n    a[1*3+2] = (1.0 - c) * axe.z * axe.y - s * axe.x;\n    a[2*3+0] = (1.0 - c) * axe.x * axe.z - s * axe.y;\n    a[2*3+1] = (1.0 - c) * axe.y * axe.z + s * axe.x;\n    a[2*3+2] = c + (1.0 - c) * axe.z * axe.z;\n    res.x = v.x * a[0*3+0] + v.y * a[0*3+1] + v.z * a[0*3+2];\n    res.y = v.x * a[1*3+0] + v.y * a[1*3+1] + v.z * a[1*3+2];\n    res.z = v.x * a[2*3+0] + v.y * a[2*3+1] + v.z * a[2*3+2];\n    return res;\n}\n\nvec4 raymarch(vec3 ro, vec3 rd) {\n    \n    vec3 path = vec3(0, 0, 0);\n    path.y += 0.0;\n    float stp = 0.004;\n    float radius = 0.2;\n    float crT = iTime;\n    float maxdist = 0.0;\n    float maxdistT = crT;\n    vec3 maxdistProj = vec3(0);\n    vec3 maxdistProjV = vec3(0);\n    vec3 pathzd = vec3(GetTotal(iTime), 1.0);\n    vec3 forward = vec3(0, 0, 1);\n    vec3 axis = cross(pathzd, forward);\n    float angle = GetAngle(pathzd, forward);\n    for (int i = 0; i < 1000; i++) {\n        float crstp = stp * pow(2.0, (crT - iTime)*0.5);\n        crT += crstp;\n        vec3 pathd = vec3(GetTotal(crT), 1.0);\n        pathd = RotateVectorAroundVector(axis, pathd, angle);\n        //pathd.x -= pathzd.x;\n        //pathd.y -= pathzd.y;\n        path += pathd * crstp * timescale;\n        \n        //vec3 prj = ProjectPointOnLine(ro, rd, path);\n        vec3 prj;\n        \n        if (intersectPlaneAndLine(path, pathd, ro, rd, prj) && length2(path - prj) > maxdist)\n        {\n            maxdist = length2(path - prj);\n            maxdistT = crT;\n            maxdistProj = prj;\n            maxdistProjV = path - prj;\n            vec3 axis_ = cross(pathd, forward);\n            float angle_ = GetAngle(pathd, forward);\n            maxdistProjV = RotateVectorAroundVector(axis_, maxdistProjV, angle_);\n        }\n        if (maxdist > radius*radius)\n        {\n            break;\n        }\n    }\n    float freq = 5.0;\n    vec3 c = vec3(0.0, 0.0, 0.0);\n    if (maxdist > radius*radius)\n    {\n\n        float an = GetAngle(maxdistProjV, vec3(1, 0, 0));\n        vec3 c3 = vec3(\n        cos(an * 5.0) * sin(fract(maxdistT) * 3.14 * 3.0),\n        -cos(an * 5.0) * sin(fract(maxdistT) * 3.14 * 3.0),\n        abs(cos(an * 5.0) * sin(fract(maxdistT) * 3.14 * 3.0))\n    \t);\n        \n        c = (c3 ) / 1.0;\n\t\t\n    }\n    return vec4(c, 1.0);\n}\n\nvec4 raymarch_test(vec3 ro, vec3 rd) {\n    \n\n vec3 path = vec3(0, 0, 0);\n\n    vec3 c = vec3(0.0, 0.0, 0.0);\n\n    return vec4(c, 1.0);\n}\n\nmat2 rotate(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - iResolution.xy/2.0) / iResolution.y * 2.0;\n\n    //vec4 col = vec4(vec3(dot(uv, GetTotal(iTime))), 1.0);\n    \n    vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    //rd.yz *= rotate(3.14*0.5);\n    //ro.y += -2.8;\n    //ro.z += 1.5;\n    vec4 col = raymarch(ro, rd);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}