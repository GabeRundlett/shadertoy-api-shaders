{
    "Shader": {
        "info": {
            "date": "1725530124",
            "description": "Forked to add colors to my fbm shader (CC0). Made by Rik Riesmeijer, 2024 - No rights reserved.",
            "flags": 0,
            "hasliked": 0,
            "id": "XcjBDV",
            "likes": 1,
            "name": "RGB Fractal Brownian Motion",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "fbm",
                "rgb",
                "brownian",
                "monochrome",
                "motion",
                "cc0",
                "copyrightfree"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 73
        },
        "renderpass": [
            {
                "code": "// RGB Fractal Brownian Motion, Made By Rik Riesmeijer, 2024 - CC0 / Copyright free.\n// See my other noises and shaders for my weird rotation formula...\nvec4 n(vec2 v){ uvec2 u=uvec2(v*3e4+v.y+1e8); return vec2(u.yx*=u^=u*u).xyxy/43e8; }\nuvec4 m(uvec4 a) { return a * a.yzwx ^ a; }\nvec4 h(vec2 v) { return vec4(m(m(uvec4(v + v + 2e4, v + v + 3e7)))) / vec4(-1u); }\nfloat w(float x) { return fract(x) * fract(-x) * sign(fract(x * 0.5) - 0.5); }\nfloat s(float x) { return -4.0 * w(x / 3.1415); }\nfloat c(float x) { return s(x - 1.5775); }\nvec2  r(vec2 v, float a) { \n    float cs = c(a), sn = s(a);\n    return mat2(cs, -sn, sn, cs) * v;\n}\nvec4 fbm(vec2 v, float time, vec4 c) {\n    vec2 vs; float fi, si, ti;\n    for(int i = 0; i++ < 6;) {\n        v = r(v, 0.4 + time);\n        fi = float(i + 1);\n        si = exp2(fi);\n        ti = si * si - 2.0;\n        vs = si * v;\n        vec4 b = vec4(floor(vs), ceil(vs));\n        vec2 f = smoothstep(0.0, 1.0, fract(vs));\n        vec4 m = mix(mix(h(b.xy), h(b.zy), f.x),\n                     mix(h(b.xw), h(b.zw), f.x), f.y);\n        c = si * m / ti + c;\n    }\n    return c;\n}\n\nvoid mainImage(out vec4 c, vec2 v) { // Demo of the FBM monochromatically shown.\n    v = v - 0.5 * iResolution.xy;    // Rotation ideally is centered around origin.\n    v = v * iResolution.y / 23e4;    // Normalize the aspect ratio.\n    c = fbm(v, iTime * 0.3, c - c);  // Show color.\n}                                    // End of demo.",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}