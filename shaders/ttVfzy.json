{
    "Shader": {
        "info": {
            "date": "1614675150",
            "description": "Nox DDA",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVfzy",
            "likes": 1,
            "name": "Nox DDA (fixed)",
            "published": 3,
            "tags": [
                "noxdda"
            ],
            "usePreview": 0,
            "username": "NoxWings",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "#define AA 0.01\nconst vec3 white = vec3(1,1,1);\nconst vec3 red = vec3(1,0,0);\nconst vec3 green = vec3(0,1,0);\nconst vec3 blue = vec3(0,0,1);\nconst vec3 yellow = vec3(1,1,0);\n\nvec2 grid(vec2 uv, float rep) {\n    return (uv * vec2(iResolution.x / iResolution.y, 1.0) * rep);\n}\n\nfloat drawGrid(vec2 uv, float minThick, float maxThick) {\n    return max(\n        smoothstep(maxThick, minThick, min(uv.x, uv.y)),\n        smoothstep(maxThick, minThick, min(1.0-uv.x, 1.0-uv.y))\n    );\n}\n\nfloat drawPoint(vec2 uv, float r) {\n    return smoothstep(r+AA, r, length(uv));\n}\n\nfloat distanceToSegment(vec2 p, vec2 a, vec2 b) {\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat drawLine(vec2 uv, vec2 from, vec2 to, float thick) {\n    return smoothstep(thick+AA, thick, distanceToSegment(uv, from, to));\n}\n\nfloat drawDDA(vec2 uv, vec2 from, vec2 to) {\n    vec2 d = to - from;\n    float steps = max(abs(d.x), abs(d.y));\n    vec2 inc = d / steps;\n\n    float acc = 0.0;\n    for (int i = 1; i < int(steps); i++) {\n        vec2 p = from + inc * float(i);\n        acc += drawPoint(uv - p, 0.09);\n    }\n    return acc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float reps = 15.0;\n    vec2 fuv = grid(uv, reps);\n    vec2 p1 = round(grid(abs(iMouse.zw) / iResolution.xy, reps));\n    vec2 p2 = round(grid(iMouse.xy / iResolution.xy, reps));\n    \n    float gridLines = drawGrid(fract(fuv), 0.00, 0.03);\n    float point1    = drawPoint(fuv - p1, 0.2);\n    float point2    = drawPoint(fuv - p2, 0.2);\n    float line      = drawLine(fuv, p1, p2, 0.02);\n    float dda       = drawDDA(fuv, p1, p2);\n\n    vec3 col = vec3(0.2);\n    col += vec3(0.7) * gridLines;\n    if (line > 0.5)   { col += blue   * line; }\n    if (point1 > 0.5) { col  = red    * point1; }\n    if (point2 > 0.5) { col  = green  * point2; }\n    if (dda > 0.5)    { col  = yellow * dda; }    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}