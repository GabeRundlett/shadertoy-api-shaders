{
    "Shader": {
        "info": {
            "date": "1584293348",
            "description": "Base on https://www.shadertoy.com/view/lsG3zK (by ndel)\n",
            "flags": 32,
            "hasliked": 0,
            "id": "3dXyzN",
            "likes": 10,
            "name": "Improved LBM",
            "published": 3,
            "tags": [
                "lbm"
            ],
            "usePreview": 0,
            "username": "yuchengzhong",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int LatSizeX = int(iResolution.y/2.0);\n    int LatSizeY = int(iResolution.y/2.0);\n    \n    int ix = int(floor(fragCoord.x/2.0));\n    int iy = int(floor(fragCoord.y/2.0));\n    \n    if( ix >= LatSizeX || iy >= LatSizeY )\n    {\n        return;\n    }\n    vec3 m00 = texture(iChannel0, (vec2(2*ix+1,2*iy+1)+0.5)/iResolution.xy).xyz;\n    vec3 m10 = texture(iChannel0, (vec2(2*ix+3,2*iy+1)+0.5)/iResolution.xy).xyz;\n    vec3 m01 = texture(iChannel0, (vec2(2*ix+1,2*iy+3)+0.5)/iResolution.xy).xyz;\n    vec3 m11 = texture(iChannel0, (vec2(2*ix+3,2*iy+3)+0.5)/iResolution.xy).xyz;\n    \n    vec3 m0 = mix(m00,m10,(fragCoord.x-2.0*float(ix))*0.5);\n    vec3 m1 = mix(m01,m11,(fragCoord.x-2.0*float(ix))*0.5);\n    vec3 m = mix(m0,m1,(fragCoord.y-2.0*float(iy))*0.5);\n    float rho = m.x;\n    float vx  = m.y;\n    float vy  = m.z;\n\n    fragColor = vec4((rho-1.0));\n    fragColor = 5.0*vec4(abs(2.0*vx-1.0),abs(2.0*vy-1.0),(2.0*rho-1.0),1.0);\n    //fragColor = 5.0*vec4((2.0*rho-1.0),(2.0*rho-1.0),(2.0*rho-1.0),1.0);\n    //fragColor = texture(iChannel0,vec2(fragCoord)/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int ix = int(floor(fragCoord.x/2.0));\n    int iy = int(floor(fragCoord.y/2.0));\n    float rho = 0.0;\n    if(distance(iMouse.xy/2.0,vec2(ix,iy)) < 4.0)\n    {\n            vec3 objectVelocity = vec3(iMouse.xy/iResolution.xy,iMouse.w)-texture(iChannel0, (vec2(ix,iy)+0.5)/iResolution.xy).xyz;\n            objectVelocity *= 1000.0*iTimeDelta;     \n            rho =min(length(objectVelocity),0.5);\n            \n    }\n    fragColor = vec4(rho,0.0,0.0,0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//map distribution functions to texture coordinates\n//4 texels are used to store the 9 distribution functions in one cell\n#define f0(x,y) texture(iChannel0, (vec2(2*x,2*y)+0.5)/iResolution.xy).r;\n#define f1(x,y) texture(iChannel0, (vec2(2*x,2*y)+0.5)/iResolution.xy).g;\n#define f2(x,y) texture(iChannel0, (vec2(2*x,2*y)+0.5)/iResolution.xy).b;\n#define f3(x,y) texture(iChannel0, (vec2(2*x+1,2*y)+0.5)/iResolution.xy).r;\n#define f4(x,y) texture(iChannel0, (vec2(2*x+1,2*y)+0.5)/iResolution.xy).g;\n#define f5(x,y) texture(iChannel0, (vec2(2*x+1,2*y)+0.5)/iResolution.xy).b;\n#define f6(x,y) texture(iChannel0, (vec2(2*x,2*y+1)+0.5)/iResolution.xy).r;\n#define f7(x,y) texture(iChannel0, (vec2(2*x,2*y+1)+0.5)/iResolution.xy).g;\n#define f8(x,y) texture(iChannel0, (vec2(2*x,2*y+1)+0.5)/iResolution.xy).b;\n\n#define G 0.5\n#define w 0.9\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    int LatSizeX = int(iResolution.y/2.0);\n    int LatSizeY = int(iResolution.y/2.0);\n    \n    int ix = int(floor(fragCoord.x/2.0));\n    int iy = int(floor(fragCoord.y/2.0));\n    \n    if( ix >= LatSizeX || iy >= LatSizeY )\n    {\n        return;\n    }    \n    int itx = int(fragCoord.x) - 2*ix;\n    int ity = int(fragCoord.y) - 2*iy;\n    \n    float f0,f1,f2,f3,f4,f5,f6,f7,f8; \n    float rho, vx, vy;\n    if((iFrame==0))\n    {\n        rho = 1.0;\n        vx = vy = 0.0;\n        f0 = 1.0-5.0/6.0*G;\n        f1 = 1.0/6.0 *G;\n        f2 = 1.0/6.0 *G;\n        \n        f3 = 1.0/6.0 *G;\n        f4 = 1.0/6.0 *G;\n        f5 = 1.0/24.0*G;\n        \n        f6 = 1.0/24.0*G;\n        f7 = 1.0/24.0*G;\n        f8 = 1.0/24.0*G;\n    }\n    else\n    {\n        int xplus  = clamp(ix+1,0,LatSizeX-1);\n        int xminus = clamp(ix-1,0,LatSizeX-1);\n        int yplus  = clamp(iy+1,0,LatSizeY-1);\n        int yminus = clamp(iy-1,0,LatSizeY-1);\n\n        f0 = f0( ix    ,iy    );\n        f1 = f1( xminus,iy    );\n        f2 = f2( xplus ,iy    );\n        \n        f3 = f3( ix    ,yminus);\n        f4 = f4( ix    ,yplus );\n        f5 = f5( xminus,yminus);\n        \n        f6 = f6( xplus ,yplus );\n        f7 = f7( xplus ,yminus);\n        f8 = f8( xminus,yplus );\n\n        rho = f0+f1+f2+f3+f4+f5+f6+f7+f8;\n        vx = (1.0/rho)*(f1-f2+f5-f6-f7+f8);\n        vy = (1.0/rho)*(f3-f4+f5-f6+f7-f8);  \n        \n        \n        vx = clamp(vx,-0.999,0.999);\n        vy = clamp(vy,-0.999,0.999);\n        //rho = mix(rho,1.0,0.01);\n        rho = rho*0.999;\n        if(ix==0||ix==LatSizeX-1)//boundary condition\n        {\n            vx = -vx;\n        }\n        if(iy==0||iy==LatSizeY-1)//boundary condition\n        {\n            vy = -vy;\n        }\n        rho += texture(iChannel1, (fragCoord)/iResolution.xy).x;\n        rho = clamp(rho,1.0,1.5);        \n        \n        float sq_term = (vx*vx+vy*vy);\n        \n        float f0eq = rho*(1.0-10.0/12.0*G*rho-2.0/3.0*sq_term);\n        float f1eq = rho*(1.0/6.0 *G*rho+1.0/3.0 *vx     +vx*vx/2.0            -sq_term/6.0);\n        float f2eq = rho*(1.0/6.0 *G*rho-1.0/3.0 *vx     +vx*vx/2.0            -sq_term/6.0);\n        \n        float f3eq = rho*(1.0/6.0 *G*rho+1.0/3.0 *vy     +vy*vy/2.0            -sq_term/6.0);\n        float f4eq = rho*(1.0/6.0 *G*rho-1.0/3.0 *vy     +vy*vy/2.0            -sq_term/6.0);\n        float f5eq = rho*(1.0/24.0*G*rho+1.0/12.0*(vx+vy)+1.0/8.0*(vx+vy)*(vx+vy)-sq_term/24.0);  \n        \n        float f6eq = rho*(1.0/24.0*G*rho-1.0/12.0*(vx+vy)+1.0/8.0*(vx+vy)*(vx+vy)-sq_term/24.0);\n        float f7eq = rho*(1.0/24.0*G*rho-1.0/12.0*(vx-vy)+1.0/8.0*(vx-vy)*(vx-vy)-sq_term/24.0);\n        float f8eq = rho*(1.0/24.0*G*rho+1.0/12.0*(vx-vy)+1.0/8.0*(vx-vy)*(vx-vy)-sq_term/24.0);\n        //=== RELAX TOWARD EQUILIBRIUM ========================\n        f0 = mix(f0,f0eq,w);\n        f1 = mix(f1,f1eq,w);\n        f2 = mix(f2,f2eq,w);\n        f3 = mix(f3,f3eq,w);\n        f4 = mix(f4,f4eq,w);\n        f5 = mix(f5,f5eq,w);\n        f6 = mix(f6,f6eq,w);\n        f7 = mix(f7,f7eq,w);\n        f8 = mix(f8,f8eq,w);\n    }\n    if(itx==0&&ity==0)\n    {\n        fragColor.rgb = min(abs(vec3(f0,f1,f2)),1.0);\n    }\n    else if(itx==1&&ity==0)\n    {\n        fragColor.rgb = min(abs(vec3(f3,f4,f5)),1.0);\n    }\n    else if(itx==0&&ity==1)\n    {\n        fragColor.rgb = min(abs(vec3(f6,f7,f8)),1.0);\n    }\n    else\n    {\n        fragColor.rgb = min(abs(vec3(0.5*rho,0.5*vx+0.5,0.5*vy+0.5)),1.0);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(iMouse.xy/iResolution.xy,iMouse.w,iTime);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}