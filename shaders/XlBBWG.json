{
    "Shader": {
        "info": {
            "date": "1516924766",
            "description": "Variations on the \"Cairo\" pentagonal tessellation.\n\n[url]https://en.wikipedia.org/wiki/Cairo_pentagonal_tiling[/url]\n\nMouse overrides animation (drag to left edge and release to restart).\n\n'c': color scheme\n'r': fundamental region\n'z': zoom out",
            "flags": 16,
            "hasliked": 0,
            "id": "XlBBWG",
            "likes": 46,
            "name": "Pentagonal Tessellations",
            "published": 3,
            "tags": [
                "tessellation",
                "pentagonal",
                "wythoff",
                "snub",
                "cairo"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 1538
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Created by Matthew Arcus, 2018\n// Wythoff construction for dual snub quadrille tessellation\n//\n// Fold down to square fundamental region. Draw lines to \"Wythoff point\".\n// Keep track of folding for consistent coloring.\n//\n// Now with extra colors:\n// 'c' changes color scheme to one per tile type\n// 'r' shows fundamental region\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.141592654;\nconst float TWOPI = 2.0*PI;\n\nvec2 perp(vec2 r) {\n  return vec2(-r.y,r.x);\n}\n\nint imod(int n, int m) {\n  int k = n - n/m*m;\n  if (k < 0) return k+m;\n  else return k;\n}\n\nconst int CHAR_C = 67;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_Z = 90;\n\nbool keypress(int key) {\n#if __VERSION__ < 300\n    return false;\n#else\n    return texelFetch(iChannel0, ivec2(key,2),0).x != 0.0;\n#endif\n}\n\nvec3 getcol0(ivec2 s) {\n  int i = 2*imod(s.x,2)+imod(s.y,2);\n  if (i == 0) return vec3(1,0,0);\n  if (i == 1) return vec3(0,1,0);\n  if (i == 2) return vec3(0,0,1);\n  if (i == 3) return vec3(1,1,0);\n  if (i == 4) return vec3(1,0,1);\n  if (i == 5) return vec3(0,1,1);\n  if (i == 6) return vec3(1,1,1);\n  return vec3(1,1,1);\n}\n\nvec3 getcol1(ivec2 s) {\n  // https://iquilezles.org/articles/palettes\n  float t = 0.1*iTime + 0.1*0.618*float(s.x+s.y);\n  vec3 a = vec3(0.4);\n  vec3 b = vec3(0.6);\n  vec3 c = vec3(1,1,1);\n  vec3 d = vec3(0,0.33,0.67);\n  vec3 col = a + b*cos(TWOPI*(c*t+d));\n  return col;\n}\n\nvec3 getcol(ivec2 s) {\n  if (keypress(CHAR_C)) {\n    return 0.4+0.6*getcol0(s);\n  } else {\n    return getcol1(s);\n  }\n}\n\n// segment function by FabriceNeyret2\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nivec2 nextcell(ivec2 s, int q) {\n  q = imod(q,4);\n  if (q == 0) s.x++;\n  else if (q == 1) s.y--;\n  else if (q == 2) s.x--;\n  else if (q == 3) s.y++;\n  return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float scale = 3.3;\n  if (keypress(CHAR_Z)) scale *= 2.0;\n  float lwidth = 0.025;\n  // Half the width of the AA line edge\n  float awidth = 1.5*scale/iResolution.y;\n  vec2 q,p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n  if (iMouse.x > 5.0) {\n    q = (iMouse.xy-25.0)/(iResolution.xy-50.0);\n    q = clamp(q,0.0,1.0);\n  } else {\n    // Just bouncing around\n    q = mod(0.3*iTime*vec2(1,1.618),2.0);\n    q = min(q,2.0-q);\n  }\n  p *= scale;\n  ivec2 s = ivec2(floor(p));\n  p = mod(p,2.0)-1.0; // Fold down to Â±1 square\n  int parity = int((p.y < 0.0) != (p.x < 0.0)); // Reflection?\n  int quad = 2*int(p.x < 0.0) + parity; // Quadrant\n  p = abs(p);\n  if (parity != 0) p.xy = p.yx;\n  // Lines from triangle vertices to Wythoff point\n  float d = 1e8;\n  d = min(d,segment(p,vec2(0,0),q));\n  d = min(d,segment(p,vec2(1,0),q));\n  d = min(d,segment(p,vec2(1,1),q));\n  d = min(d,segment(p,vec2(-q.y,q.x),vec2(q.y,-q.x)));\n  d = min(d,segment(p,vec2(-q.y,q.x),vec2(q.y,2.0-q.x)));\n  d = min(d,segment(p,vec2(2.0-q.y,q.x),vec2(q.y,2.0-q.x)));\n  // Color - what side of the lines are we?\n  float a = dot(p-q,perp(vec2(0,0)-q));\n  float b = dot(p-q,perp(vec2(1,0)-q));\n  float c = dot(p-q,perp(vec2(1,1)-q));\n  bool unit = s == ivec2(0);\n  if (b > 0.0) {\n    if (c < 0.0) s = nextcell(s,quad);\n  } else {\n    if (a > 0.0) s = nextcell(s,quad+1);\n  }\n  vec3 col = getcol(s);\n  col = mix(col,vec3(1),0.1);\n  col *= 0.75;\n  col = mix(vec3(0),col,smoothstep(lwidth-awidth,lwidth+awidth,d));\n  if (keypress(CHAR_R)) {\n    vec2 p1 = min(p,1.0-p);\n    float d1 = min(p1.x,p1.y);\n    col = mix(vec3(0.5),col,smoothstep(0.5*lwidth-awidth,0.5*lwidth+awidth,d1));\n  }\n  if (keypress(CHAR_S)) {\n    vec2 q0 = q.yx;\n    vec2 q1 = vec2(2.0-q.x,q.y);\n    vec2 q2 = vec2(q.x,-q.y);\n    vec2 q3 = vec2(q.x,2.0-q.y);\n    vec2 q4 = vec2(-q.x,q.y);\n    vec2 q5 = vec2(-q.y,2.0-q.x);\n    d = min(segment(p,q0,q1),segment(p,q0,q2));\n    d = min(d,segment(p,q0,q3));\n    d = min(d,segment(p,q0,q4));\n    d = min(d,segment(p,q0,q5));\n    col = mix(vec3(0.5),col,smoothstep(0.5*lwidth-awidth,0.5*lwidth+awidth,d));\n  }\n\n  fragColor = vec4(sqrt(col),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}