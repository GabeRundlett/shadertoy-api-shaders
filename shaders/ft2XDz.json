{
    "Shader": {
        "info": {
            "date": "1627458217",
            "description": "Done during MonsieurSoleil Shader Coding Party. Somehow close to bonzo (you're used to it now, can't reduce my fft consumption :D )",
            "flags": 0,
            "hasliked": 0,
            "id": "ft2XDz",
            "likes": 13,
            "name": "大龙猫 - Du Grand Nawak",
            "published": 3,
            "tags": [
                "jam"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "#define lim 5.\n#define fGlobalTime iTime\n#define qq mod(fGlobalTime,10.)<5.\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat box(vec3 p,vec3 b){\n       vec3 q = abs(p)-b;\n       return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat bbox(vec3 p){\n    //p.xz *=rot(sin(fGlobalTime)*-.785);\n    float h = box(p,vec3(1.));\n    h = max(abs(p.z)-.1,abs(h)-.1);\n  return h;\n}\nvec2 sdf(vec3 p){\n  \n  vec3 op ;\n  \n  if(qq){\n    \n     p.xy *=rot(p.z*.1);\n   p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(3.1415/4.);\n    op=p;\n     p.y+=mix(0.,1.,fract(iTime));\n      p.xy = asin(sin(p.xy)*(.8));\n  } else {\n    op=p;\n      p.z+=mod(fGlobalTime,100.);;\n    p.z /=1.;\n   \n   \n     p.z = asin(sin(p.z)*.8);\n    \n    p.z*=1.;\n     \n    \n    }\n\n   \n    vec2 h;\n  //h.x= mix(box(p,vec3(1.)),length(p)-1.,sin(p.x*(1.+texture(texFFT,abs(p.y)*.1).r*10.)+fGlobalTime));\n  h.x = bbox(p);\n       float a=.25*abs(floor(fract(iTime*1.)*10.)/10.);\n     float rto = dot(vec2(1,1),vec2(1,0)*rot(3.1415*a));\n  \n   vec4 pp = vec4(p,1.);\n \n      h.y = 1.;\n   for(float i=0.;i<=lim;i++){\n          pp.xy*=rot(a*3.1415);\n          pp*=rto;\n          vec2 t;\n          t.x = bbox(pp.xyz)/pp.a;\n          t.y = 1.+i/lim;\n          h = t.x < h.x ? t:h;\n     }\n     vec2 t;\n     vec3 oop = op;\n     oop.xy =- abs(oop.xy)+1.2;\n      oop.x+=(sin(oop.z+fGlobalTime));\n     oop.y += (cos(oop.z+fGlobalTime*.1));\n       oop.xy =- abs(oop.xy)+1.2;\n      t.x = abs(length(oop.xy)-.1)-.1;\n      t.y = 2.; \n      h = t.x < h.x ? t:h;\n      op.xy *=rot(fGlobalTime*.2);\n         op = abs(op)-1.1;\n     op.xz *=rot(fGlobalTime);\n      \n    \n     \n  return h;\n  \n}\n#define q(s) s*sdf(p+s).x\nvec2 e=vec2(.0003,-.0003);\nvec3 norm(vec3 p){return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.1,.2,.3)));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n   \n  bool bounce = false;\n  vec3 col = vec3(.1);//sqrt(vec3(texture(texFFT,abs(uv.x)).r));\n \n  vec3 ro = vec3(0.,0.,-5.);\n  vec3 rd = normalize(vec3(uv,1.));\n   if(qq) {\n     \n     ro = vec3(uv*7.,-10.);\n     rd = vec3(0,0,1);\n     }\n  vec3 light = vec3(1.,2.,-3.);\n  vec3 rp =ro;\n     vec3 acc = vec3(.0);\n     float tt =mod(iTime*.1,10.);\n     float ttt =mod(iTime*.07,10.);\n     float tq = 0.;\n  for(float i=0.;i<=69.;i++){\n      vec2 d = sdf(rp);\n    \n         if(d.y == 1.+floor(fract(tt*4.)*10.)/lim) { \n           tq+= exp(-abs(d.x))/10.;\n           acc += pal(ttt)*1.5*exp(-abs(d.x))/(10.+sin(length(rp.xy)*10.)*5.);\n           d.x = max(abs(d.x),.001);\n           \n           } \n            if(d.y ==2.) { \n           tq+= exp(-abs(d.x))/10.;\n           acc += pal(rp.z*.1+ttt)*exp(-abs(d.x))/(60.-fract(fGlobalTime*.5+rp.z)*30.);\n           d.x = max(abs(d.x),.01);\n           \n           } \n       rp +=rd * d.x;\n       if(length(rp)>100.) break;\n       \n       if(d.x <.001){\n          vec3 n = norm(rp);\n          if(d.y >= 1.){\n             float angle = max(dot(reflect(normalize(light), n), rd), 0.0);\n  float specular = pow(angle, 10.0);\n            vec3 c = pal(d.y+texture(iChannel0,rp.xy*.1+fGlobalTime).r*.01);\n          col = specular*c+c*max(0.,dot(normalize(light-rp),n));; \n         break;\n          } else {\n               rd = reflect(rd,n+texture(iChannel0,rp.xy).r*.01);\n             rp+=rd*.01;\n            acc += pal(d.y)*.1;\n            bounce = true;\n            }\n          \n         }\n    \n  }\n  col+= +acc;\n  if(bounce) col = 1.-col;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}