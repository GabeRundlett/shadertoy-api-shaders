{
    "Shader": {
        "info": {
            "date": "1724637626",
            "description": "source https://glslsandbox.com/e#78496.0 https://www.shadertoy.com/view/MdXSzS",
            "flags": 0,
            "hasliked": 0,
            "id": "MfBBz1",
            "likes": 1,
            "name": "fbm noise 3",
            "published": 3,
            "tags": [
                "fractal",
                "fbm",
                "light",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 131
        },
        "renderpass": [
            {
                "code": "\n    #define time iTime\n    #define resolution iResolution.xy\n\n\n\n#define NUM_OCTAVES 16\nmat3 rotX(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat3(\n\t\t1, 0, 0,\n\t\t0, c, -s,\n\t\t0, s, c\n\t);\n}\nmat3 rotY(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat3(\n\t\tc, 0, -s,\n\t\t0, 1, 0,\n\t\ts, 0, c\n\t);\n}\n\nfloat random(vec2 pos) {\n\treturn fract(sin(dot(pos.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat noise(vec2 pos) {\n\tvec2 i = floor(pos);\n\tvec2 f = fract(pos);\n\tfloat a = random(i + vec2(0.0, 0.0));\n\tfloat b = random(i + vec2(1.0, 0.0));\n\tfloat c = random(i + vec2(0.0, 1.0));\n\tfloat d = random(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 pos) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100.0);\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n\tfor (int i=0; i<NUM_OCTAVES; i++) {\n\t\tv += a * noise(pos);\n\t\tpos = rot * pos * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nconst float PI = 3.1415925358;\n\nfloat safety_sin( in float x ) { return sin( mod( x, PI ) ); }\n\nfloat random3 (in vec2 st) {\n    return fract(sin(dot(st.xy,\n    vec2(12.9898,78.233)))\n    * 43758.5453123);\n}\n\nfloat rand( vec2 p ) { return fract( sin( dot(p, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 + time * .35 ); }\n\nfloat noise2 (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random3(i);\n    float b = random3(i + vec2(1.0, 0.0));\n    float c = random3(i + vec2(0.0, 1.0));\n    float d = random3(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n    (c - a)* u.y * (1.0 - u.x) +\n    (d - b) * u.x * u.y;\n}\n\nfloat star_burst( vec2 p )\n{\n\tfloat k0 = 2.0;\n\tfloat k1 = 1.0;\n\tfloat k2 = 0.5;\n\tfloat k3 = 12.0;\n\tfloat k4 = 12.0;\n    float k5 = 2.0;\n    float k6 = 5.2;\n    float k7 = 4.0;\n    float k8 = 6.2;\n\t\n\tfloat l  = length( p );\n    float l2 = pow( l * k1, k2 );\n\tfloat n0 = noise( vec2( atan(  p.y,  p.x ) * k0, l2 ) * k3+time );\n\tfloat n1 = noise( vec2( atan( -p.y, -p.x ) * k0, l2 ) * k3-time/10.0 );\n\tfloat n  = pow( max( n0, n1 ), k4 ) * pow( clamp( 1.0 - l * k5, 0.0, 1.0 ), k6 );\n\tn += pow( clamp( 1.0 - ( l * k7 - 0.1 ), 0.0, 1.0 ), k8 );\n\treturn n;\n}\n\n\n\n\nfloat makePoint(float x,float y,float fx,float fy,float sx,float sy,float t){\n   float xx=x+sin(t*fx)*sx;\n   float yy=y+cos(t*fy)*sy;\n   return 1.0/sqrt(xx*xx+yy*yy);\n}\n#define c2 .0191\n#define c1 vec4(.10+c2, 1.5+c2,.15,.0)\n\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+ceil((iTime*0.101))+c1.xy+sin(time*.01))*scale)-.5) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n\n\tfloat t = 0.0, d;\n \n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\t\n\n\n\tfloat t3 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t3);\n\tfloat co = cos(t3);\n\tmat2 ma = mat2(co, si, -si, co);\n\t\n\t\t \n\t\t \n\tfloat offset = sin(time*.10)*.3 +.2;\n\tfloat scale  = 3.16;\n\t\n\t\n\tfor(int i=0;i<5;i++){\n\t\tuv = triangle_wave(uv.yx-offset,scale)+triangle_wave(uv, scale + float(i)*0.08)*ma;;\n\t\t \n\t}\n\t \n \t\n\t float shade  = smoothstep( .02,.3,      ((uv.x)-(uv.y)));\n\tfloat time2 = 50.0 * time / 5.0;\n vec2 p3=(gl_FragCoord.xy/resolution.x)*2.0-vec2(1.0,resolution.y/resolution.x);\n\n   p3=p*2.0;\n   \n   float x=p3.x;\n   float y=p3.y;\nfloat stars= star_burst(p);\n   float a=\n       makePoint(x,y,3.3,2.9,0.3,0.3,time);\n   a=a+makePoint(x,y,1.9,2.0,0.4,0.4,time);\n   a=a+makePoint(x,y,0.8,0.7,0.4,0.5,time);\n   a=a+makePoint(x,y,2.3,0.1,0.6,0.3,time);\n   a=a+makePoint(x,y,0.8,1.7,0.5,0.4,time);\n   a=a+makePoint(x,y,0.3,1.0,0.4,0.4,time);\n   a=a+makePoint(x,y,1.4,1.7,0.4,0.5,time);\n   a=a+makePoint(x,y,1.3,2.1,0.6,0.3,time);\n   a=a+makePoint(x,y,1.8,1.7,0.5,0.4,time);   \n   \n   float b=\n       makePoint(x,y,1.2,1.9,0.3,0.3,time);\n   b=b+makePoint(x,y,0.7,2.7,0.4,0.4,time);\n   b=b+makePoint(x,y,1.4,0.6,0.4,0.5,time);\n   b=b+makePoint(x,y,2.6,0.4,0.6,0.3,time);\n   b=b+makePoint(x,y,0.7,1.4,0.5,0.4,time);\n   b=b+makePoint(x,y,0.7,1.7,0.4,0.4,time);\n   b=b+makePoint(x,y,0.8,0.5,0.4,0.5,time);\n   b=b+makePoint(x,y,1.4,0.9,0.6,0.3,time);\n   b=b+makePoint(x,y,0.7,1.3,0.5,0.4,time);\n\n   float c=\n       makePoint(x,y,3.7,0.3,0.3,0.3,time);\n   c=c+makePoint(x,y,1.9,1.3,0.4,0.4,time);\n   c=c+makePoint(x,y,0.8,0.9,0.4,0.5,time);\n   c=c+makePoint(x,y,1.2,1.7,0.6,0.3,time);\n   c=c+makePoint(x,y,0.3,0.6,0.5,0.4,time);\n   c=c+makePoint(x,y,0.3,0.3,0.4,0.4,time);\n   c=c+makePoint(x,y,1.4,0.8,0.4,0.5,time);\n   c=c+makePoint(x,y,0.2,0.6,0.6,0.3,time);\n   c=c+makePoint(x,y,1.3,0.5,0.5,0.4,time);\n   \n   vec3 d3=vec3(a,b,c)/32.0;\n   \n\tvec2 q = vec2(0.0)*uv;\n\tq.x = fbm(p + 0.00 * time2);\n\tq.y = fbm(p + vec2(1.0));\n\tvec2 r = vec2(0.0);\n\tr.x = fbm(p + 1.0 * q + vec2(1.7, 9.2) + 0.15 * time2);\n\tr.y = fbm(p + 1.0 * q + vec2(8.3, 2.8) + 0.126 * time2);\n\tfloat f = fbm(p + r);\n\tvec3 color = mix(\n\t\tvec3(10.90, 0.2, 0.2),\n\t\tvec3(10.50, 0.07, 0.07),\n\t\tclamp((f * f) * 4.0, 1.0, 10.0)\n\t);\n\n\tcolor = mix(\n\t\tcolor,\n        vec3(5.2, 0.5, 1.00),\n\t\tclamp(length(q), 10.0, 2.0)\n\t);\n\n\n\tcolor = mix(\n\t\tcolor,\n\t\tvec3(0.0, 0.0, 0.8),\n\t\tclamp(length(r.x), 0.0, 1.0)\n\t);\n// Normalized pixel coordinates (from 0 to 1)\n    vec2 p4 = fragCoord / min( iResolution.x, iResolution.y );\n    \n    p4 -= 0.5; p4.x -= 0.35;\n    p4 *= 0.5;\n    \n\tfloat r3 = star_burst( p3 * 1.1 );\n\tfloat g = star_burst( p3 );\n\tfloat b3 = star_burst( p3 * 0.9 );\n\n    // Output to screen\n    vec3 col = pow( vec3( r3, g, b3 ), vec3( 1.0 / 2.2 ) );\n\tcolor = (f *f * f + 0.1 * f * f + 0.2 * f) * color*vec3(0.5,3.,0.5);\n\n\tfragColor = vec4(color+col+shade, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}