{
    "Shader": {
        "info": {
            "date": "1455999625",
            "description": "I know, it's a bit late for Valentine's day, but I noticed a heart equation on some playing cards and thought that it would be a shame not to put it here. <img src=\"/img/emoticonHappy.png\"/>  (and Fabrice has bettered it, of course...)",
            "flags": 0,
            "hasliked": 0,
            "id": "ldVGzt",
            "likes": 4,
            "name": "Heart 100 chars",
            "published": 3,
            "tags": [
                "short",
                "tweet"
            ],
            "usePreview": 0,
            "username": "coyote",
            "viewed": 576
        },
        "renderpass": [
            {
                "code": "//Andre made it 100 chars :)\n//\n//Thanks to Fabrice it is both shorter and nicer (IMO)\n//(although I did shave off some additional chars... :)\n\n//100 chars by Andre\n\nvoid mainImage( out vec4 o, vec2 i ) {\n  i = i/iResolution.y-.5;\n  o-=o;\n  abs(i.x-=.39)*i.y > dot(i, i)-.1 ? o.x++ : 0.;\n}\n/**/\n\n//half tweet version (70) by Andre, small heart, might not work on some macs\n/*\nvoid mainImage( out vec4 o, vec2 i ) {\n    o -= o - dot(i=i/9.-1.,i) + abs(i.x)*i.y;\n}\n/**/\n\n//almost half tweet version (77) but white heart, left aligned and not scaled\n//should work everywhere\n/*\nvoid mainImage( out vec4 o, vec2 i ) {\n    o=vec4(dot(i=i/3e2-.5, i)-.1 < abs(i.x)*i.y);\n}\n/**/\n\n//104/105 chars, centered only for 16:9 aspect\n/*\nvoid mainImage( out vec4 o, vec2 i ) {\n\ti/=iResolution.y;\n    i.x-=.39;\n    o-=o;\n\n    dot(i-=.5, i)-.1 < abs(i.x)*i.y ? o.x++ : 0.;\n\n    //o.x -= 5.*(dot(i-=.5, i)-.2 - abs(i.x)*i.y) ; //this instead of the above for 105 \"shaded\" version\n}\n/**/\n\n\n//111/107 chars, works for all wide aspect ratios\n//nicer heart shape provided by Fabrice :)\n/*\nvoid mainImage( out vec4 o, vec2 i ) {\n    i = 2.*(i+i - (o.xy=iResolution.xy))/o.y;\n    o-=o;\n    \n    dot(i, i)-1. < abs(i.x)*i.y ? o.x++ : 0.;\n    \n    //o.x -= dot(i, i)-2. - abs(i.x)*i.y ; //this instead of the above for 107 \"shaded\" version\n}\n/**/\n\n//127 chars original version (different shape)\n/*\nvoid mainImage( out vec4 o, vec2 i ) {\n    i += i - (o.xy=iResolution.xy);\n    float d = dot( i*=2./o.y, i );\n\n    o = vec4( --d*d*d < (i*i).x*(i*i*i).y, 0, 0, 1 );\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}