{
    "Shader": {
        "info": {
            "date": "1500925386",
            "description": "Inspired by prior works by Alien https://www.dwitter.net/d/2842 / https://twitter.com/LienTheAlien",
            "flags": 32,
            "hasliked": 0,
            "id": "4djfzG",
            "likes": 2,
            "name": "Structured noise",
            "published": 3,
            "tags": [
                "quasica"
            ],
            "usePreview": 0,
            "username": "Kchplr",
            "viewed": 419
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    ivec2 texPos = ivec2(ceil(fragCoord.xy / 3.) * 3.);\n    int id = int(floor(mod(fragCoord.x, 3.)) + floor(mod(fragCoord.y, 3.)) * 3.); // 0-2 / 3-5 / 6-9\n    \n    vec4 A = texelFetch(iChannel0, texPos + ivec2(-1,-1) * 3, 0);\n    vec4 B = texelFetch(iChannel0, texPos + ivec2(0,-1) * 3, 0);\n    vec4 C = texelFetch(iChannel0, texPos + ivec2(1,-1) * 3, 0);\n    vec4 D = texelFetch(iChannel0, texPos + ivec2(-1,0) * 3, 0);\n    vec4 E = texelFetch(iChannel0, texPos, 0);\n    vec4 F = texelFetch(iChannel0, texPos + ivec2(1,0) * 3, 0);\n    vec4 G = texelFetch(iChannel0, texPos + ivec2(-1,1) * 3, 0);\n    vec4 H = texelFetch(iChannel0, texPos + ivec2(0,1) * 3, 0);\n    vec4 I = texelFetch(iChannel0, texPos + ivec2(1,1) * 3, 0);\n    \n    vec4 result;\n    \n    if (id == 0 && D==B && D!=H && B!=F) result = D;\n    else if (id == 1 && ((D==B && D!=H && B!=F && E!=C) || (B==F && B!=D && F!=H && E!=A))) result = B;\n\telse if (id == 2 && B==F && B!=D && F!=H) result = F;\n    \n    else if (id == 3 && ((H==D && H!=F && D!=B && E!=A) || (D==B && D!=H && B!=F && E!=G))) result = D;\n    else if (id == 5 && ((B==F && B!=D && F!=H && E!=I) || (F==H && F!=B && H!=D && E!=C))) result = F;\n        \n    else if (id == 6 && H==D && H!=F && D!=B) result = D;\n    else if (id == 7 && ((F==H && F!=B && H!=D && E!=G) || (H==D && H!=F && D!=B && E!=I))) result = H;\n    else if (id == 8 && F==H && F!=B && H!=D) result = F;\n        \n    else result = E;\n    \n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 _hsv2rgb (const in vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 getColor (float s) {\n    s = floor(pow(s, 3.) * 4.) / 4.;\n    \n    return mix(vec3(s), _hsv2rgb(vec3(s* iTime, 1., 1.)), 0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy - iResolution.xy / 2.;\n    p = ceil(p / 7.) * 7.;\n    float d = length(p);\n    \n    //flavor\n    float q = d + iTime / 50000.;\n    float s = pow(30.*cos(q + sin(q+iTime/120.)), 3.);\n    \n    s = mod(s, 256.) / 255.;\n\tfragColor = vec4(getColor(s),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 texPos = ivec2(ceil(fragCoord.xy / 3.) * 3.);\n    int id = int(floor(mod(fragCoord.x, 3.)) + floor(mod(fragCoord.y, 3.)) * 3.); // 0-2 / 3-5 / 6-9\n    \n    vec4 A = texelFetch(iChannel0, texPos + ivec2(-1,-1) * 3, 0);\n    vec4 B = texelFetch(iChannel0, texPos + ivec2(0,-1) * 3, 0);\n    vec4 C = texelFetch(iChannel0, texPos + ivec2(1,-1) * 3, 0);\n    vec4 D = texelFetch(iChannel0, texPos + ivec2(-1,0) * 3, 0);\n    vec4 E = texelFetch(iChannel0, texPos, 0);\n    vec4 F = texelFetch(iChannel0, texPos + ivec2(1,0) * 3, 0);\n    vec4 G = texelFetch(iChannel0, texPos + ivec2(-1,1) * 3, 0);\n    vec4 H = texelFetch(iChannel0, texPos + ivec2(0,1) * 3, 0);\n    vec4 I = texelFetch(iChannel0, texPos + ivec2(1,1) * 3, 0);\n    \n    vec4 result;\n    \n    if (id == 0 && D==B && D!=H && B!=F) result = D;\n    else if (id == 1 && ((D==B && D!=H && B!=F && E!=C) || (B==F && B!=D && F!=H && E!=A))) result = B;\n\telse if (id == 2 && B==F && B!=D && F!=H) result = F;\n    \n    else if (id == 3 && ((H==D && H!=F && D!=B && E!=A) || (D==B && D!=H && B!=F && E!=G))) result = D;\n    else if (id == 5 && ((B==F && B!=D && F!=H && E!=I) || (F==H && F!=B && H!=D && E!=C))) result = F;\n        \n    else if (id == 6 && H==D && H!=F && D!=B) result = D;\n    else if (id == 7 && ((F==H && F!=B && H!=D && E!=G) || (H==D && H!=F && D!=B && E!=I))) result = H;\n    else if (id == 8 && F==H && F!=B && H!=D) result = F;\n        \n    else result = E;\n    \n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}