{
    "Shader": {
        "info": {
            "date": "1706278638",
            "description": "Cut down version of original, just showing Klein's J-Invariant.\n\nBased on original work by David Lowry-Duda: [url]https://davidlowryduda.com/quanta-langlands-viz/[/url]\n\nMousable. For other controls, see header.",
            "flags": 16,
            "hasliked": 0,
            "id": "XcjSD1",
            "likes": 18,
            "name": "Modular Forms - J-Invariant",
            "published": 3,
            "tags": [
                "complex",
                "form",
                "modular"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n\n// Modular Forms - J-Invariant, mla, 2024\n// This version just shows Klein's J-Invariant, which has weight 0,\n// so some streamlining is possible.\n\n// Based on original work by David Lowry-Duda:\n// https://davidlowryduda.com/quanta-langlands-viz/\n\n// A Modular Form is a complex valued function, defined on\n// the upper half plane, that is invariant (up to a certain\n// scaling factor, determined by the \"weight\" of the form) \n// under the action of the modular group (integer valued\n// Mobius transformations with unit determinant).\n\n// Each form can be evaluated by a Fourier series, but this\n// can result in large numeric errors. A better way (as\n// described by Lowry-Duda) is to pullback or fold the\n// half plane into the fundamental region for the\n// group (the region with |Re(z)| < 0.5 and |z| > 1) and\n// only evaluate the series there, where it can be done\n// with less loss of precision.\n\n// The value of the form is shown with color indicating phase\n// and shading showing magnitude & the boundary of the\n// fundamental region is also shown ('p','m' and 'r' control\n// these).\n\n// By default the upper halfplane is mapped into the unit disk\n// (press 'h' to see the half plane). Use the mouse to apply\n// a Mobius transformation to the disk or plane.\n\n// Controls:\n// <mouse>: apply transform to disk or plane\n// 'h': Half plane\n// 'p': Show phase as color\n// 'm': Show (log) magnitude as shading\n// 'r': Show fundamental region\n// 'f': Use pullback/fold\n// 'c': Continuous coloring\n// 't': color change over time\n// 'l': log contour lines\n// 'x': Progressive Fourier expansion\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Klein's J-Invariant\nfloat coeffs[] = float[](\n  744.0,196884.0,21493760.0,864299970.0,20245856256.0\n  ,333202640600.0, 4252023300096.0, 44656994071935.0, 401490886656000.0\n  //,3176440229784420.0, 22567393309593600.0, 146211911499519294.0\n  //,874313719685775360.0, 4872010111798142520.0, 25497827389410525184.0\n  //,126142916465781843075.0\n);\n\nvec2 deltafn(vec2 z) {\n  vec2 w = complex(0);\n  vec2 q = cexp(TWOPI*cmul(vec2(0,1),z)); // The nome squared\n  int N = coeffs.length();\n  if (key(CHAR_X)) N = int(iTime)%(N+1); // Progressive\n  for (int i = N; i > 0; i--) {\n    w = cmul(w,q);\n    w += complex(coeffs[i-1]);\n  }\n  w += cinv(q);\n  return w;\n}\n\nvec2 act(mat2 gamma, vec2 z) {\n  // Action of Mobius transformation matrix on z.\n  float a = gamma[0][0], b = gamma[0][1];\n  float c = gamma[1][0], d = gamma[1][1];\n  return cdiv(a*z+complex(b),c*z+complex(d));\n}\n\nvec2 pullback(vec2 z) {\n    for (int i = 0; i < 40; i++) {\n      if (abs(z.x) < 0.5 && dot(z,z) > 1.0) break;\n      float xshift = -floor(z.x + 0.5);\n      mat2 shiftmatrix = mat2(1, xshift, 0, 1);\n      z = act(shiftmatrix, z);\n      if (dot(z,z) < 1.0) {\n         z = -cinv(z);\n      }\n    }\n    return z;\n}\n\nfloat clength(vec2 z) {\n  // \"Careful\" length - avoid overflow for very large values\n  if (z == vec2(0)) return 0.0;\n  float t = max(abs(z.x),abs(z.y));\n  z /= t;\n  return t*length(z);\n}\n\nvec3 getcolor(vec2 z) {\n  if (key(CHAR_H)) {\n    z.y += 1.0;\n    if (iMouse.x > 0.0) {\n      vec2 c = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      z.x -= c.x;\n      z *= (c.y+1.0)/dot(z,z);\n      z.x += c.x;\n      z /= dot(z,z);\n    }\n  } else {\n    if (dot(z,z) > 1.0) return vec3(0);\n    if (iMouse.x > 0.0) {\n      vec2 c = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      if (dot(c,c) > 1.0) c /= dot(c,c);\n      z -= c;\n      z *= (dot(c,c)-1.0)/dot(z,z);\n      z += c;\n      z /= -dot(z,z);\n    }\n    z.y += 1.0;\n    z *= 2.0/dot(z,z);\n    z.y -= 1.0;\n    z /= dot(z,z);\n  }\n  if (!key(CHAR_F)) z = pullback(z);\n  vec2 w = deltafn(z);\n  //w = jfunc(z);\n  if (w == vec2(0)) return vec3(0);\n  float h = 0.5+atan(w.y,w.x)/TWOPI;\n  if (!key(CHAR_C)) h *= 0.5; // Use limited color range\n  vec3 col = vec3(1,1,0.5);\n  float t = 0.0;\n  if (!key(CHAR_T)) t = iTime;\n  if (!key(CHAR_P)) col = 0.2+0.8*h2rgb(h+0.0*t);\n  if (!key(CHAR_L)) {\n    vec2 uv = (vec2(t,0)+4.0*clog(w))/PI;\n    float px = fwidth(uv.x);\n    uv = fract(uv);\n    uv = min(uv,1.0-uv);\n    col *= smoothstep(0.0,min(px,0.1),min(uv.x,uv.y));\n  }\n  if (!key(CHAR_M)) col *= 0.65+0.35*cos(t+4.0*log(clength(w)));\n  if (key(CHAR_R)) {\n    //  Fundamental region borders\n    float d = abs(0.5-abs(z.x));\n    d = min(d,abs(length(z)-1.0));\n    d = min(d,abs(z.x));\n    float px = fwidth(d);\n    col *= 0.5+0.5*smoothstep(-px,px,d-0.02);\n  }\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  int AA = 2;\n  vec3 col = vec3(0);\n  for (int i = 0; i < AA; i++){\n      for (int j = 0; j < AA; j++) {\n        vec2 z = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n        col += getcolor(z);\n      }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) { if (!b) alert = true; }\n\nconst float PI = 3.14159265359;\nconst float TWOPI = 2.0*3.14159265359;\n\n#define complex(x) (vec2((x),0))\n\nvec2 cmul(vec2 z, vec2 w) {\n  return mat2(z.x,z.y,-z.y,z.x)*w;\n}\n\n// 1/z = (1/(z/t))/t\nvec2 cinv(vec2 z) {\n  float t = 10.0;\n  t = max(abs(z.x),abs(z.y));\n  z /= t;\n  z = vec2(z.x,-z.y)/dot(z,z);\n  return z/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 cexp(vec2 z) {\n  // If cos and sin were perfect we wouldn't need normalize\n  return exp(z.x)*normalize(vec2(cos(z.y),sin(z.y)));\n}\n\nvec2 clog(vec2 z) {\n  float t = max(abs(z.x),abs(z.y));\n  z /= t;\n  float r2 = dot(z,z);\n  return vec2(0.5*log(r2)+log(t),atan(z.y,z.x));\n}\n\nvec2 cpow(vec2 z, vec2 w) {\n  return cexp(cmul(clog(z),w));\n}\n\nvec2 cpow(vec2 z, int n) {\n  // Integer powers by repeated squaring, more\n  // for precision than for performance.\n  vec2 res = vec2(1,0);\n  vec2 t = z;\n  while (true) {\n    if ((n&1) == 1) res = cmul(res,t);\n    n >>= 1;\n    if (n == 0) break;\n    t = cmul(t,t);\n  }\n  return res;\n}\n\nvec3 h2rgb(float h) {\n  // Function by iq\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\n// From https://www.shadertoy.com/view/sdcyW8 by @nimitz\nfloat cabs (const vec2 c) { return dot(c,c); }\nvec2 cmuli(vec2 z) { return vec2(-z.y, z.x);}\nvec2 cadd(vec2 a, float s) { return vec2( a.x+s, a.y ); }\n//vec2 cmul(vec2 a, vec2 b)  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\n//vec2 cdiv(vec2 a, vec2 b)  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\n//vec2 cinv(vec2 z)  { float d = dot(z,z); return vec2( z.x, -z.y ) / d; }\nvec2 csqr(vec2 a) { return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y ); }\nvec2 csqrt(vec2 z) { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 conj(vec2 z) { return vec2(z.x,-z.y); }\nvec2 cpow(vec2 z, float n) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\n//vec2 cexp(vec2 z) {  return exp( z.x )*vec2( cos(z.y), sin(z.y) ); }\nvec2 cexp2(vec2 z) {  return exp2( z.x )*vec2( cos(z.y), sin(z.y) ); }\n//vec2 clog(vec2 z) {  float d = dot(z,z);return vec2( 0.5*log(d), atan(z.y,z.x)); }\nvec2 csin(vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*sin(z.x),(r-1.0/r)*cos(z.x));}\nvec2 ccos(vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*cos(z.x),-(r-1.0/r)*sin(z.x));}\n#define pi 3.1415926535\nvec2 qn(vec2 z, float n){ return cexp(2.*n*pi*cmuli(z)); }\nvec2 qinv(vec2 z){ return cdiv(cmuli(-z) + vec2(1,0), z - vec2(0,1)); }\nmat2 rot2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\n//Eisenstein series\nvec2 e4(vec2 z)\n{\n    vec2 rz = vec2(0.,0.);\n    for(float n = 1.; n<500.; n++)\n    {\n        vec2 q = qn(z, n);\n        rz += cdiv(n*n*n*q, vec2(1., 0.) - q);\n    }\n    return vec2(1.0, 0.) + 240.*rz;\n}\n\nvec2 e6(vec2 z)\n{\n    vec2 rz = vec2(0);\n    for(float n = 1.; n<500.; n++)\n    {\n        float n2 = n*n;\n        vec2 q = qn(z, n);\n        rz += cdiv(n2*n2*n*q, vec2(1., 0.) - q);\n    }\n    return vec2(1.0, 0.0) - 504.*rz;\n}\n\nvec2 e8(vec2 z)\n{\n    vec2 rz = vec2(0);\n    for(float n = 1.; n<50.; n++)\n    {\n        float n3 = n*n*n;\n        vec2 q = qn(z, n);\n        rz += cdiv(n3*n3*n*q, vec2(1., 0.) - q);\n    }\n    return vec2(1.0, 0.0) + 480.*rz;\n}\n\n// Dedekind eta function (Euler function with final scaling factor)\nvec2 eta(vec2 z)\n{\n    vec2 prod = vec2(1.,0.);\n    for(float n = 1.; n<50.; n++)\n    {\n        vec2 q = qn(z, n);\n        prod = cmul(prod, vec2(1.,.0)-q);\n    }\n    vec2 ml = cexp(pi*cmuli(z)/12.);\n    return cmul(ml, prod);\n}\n\n// eta squared\nvec2 eta2(vec2 z)\n{\n    vec2 prod = vec2(1.,.0);\n    for(float n = 1.; n<150.; n++)\n    {\n        vec2 q = qn(z, n);\n        prod = cmul(prod, csqr(vec2(1.,.0)-q));\n    }\n    vec2 ml = cexp(pi*cmuli(z)/6.);\n    return cmul(ml, prod);\n}\n\n// eta cubed\nvec2 eta3(vec2 z)\n{\n    vec2 prod = vec2(1.,.0);\n    for(float n = 1.; n<200.; n++)\n    {\n        vec2 q = qn(z, n);\n        prod = cmul(prod, cpow(vec2(1.,.0)-q, 3.));\n    }\n    vec2 ml = cexp(pi*cmuli(z)/4.);\n    return cmul(ml, prod);\n}\n\nvec2 eta8(vec2 z)\n{\n    vec2 prod = vec2(1.,.0);\n    for(float n = 1.; n<200.; n++)\n    {\n        vec2 q = qn(z, n);\n        prod = cmul(prod, cpow(vec2(1.,.0)-q, 8.));\n    }\n    vec2 ml = cexp(pi*cmuli(z)/1.5);\n    return cmul(ml, prod);\n}\n\n// modular discriminant\nvec2 delta(vec2 z)\n{\n    if (z.y < 0.0) return vec2(0);\n    vec2 prod = vec2(1.,0.);\n    for(float n = 1.; n<150.; n++)\n    {\n        vec2 q = qn(z, n);\n        prod = cmul(prod, cpow(vec2(1.,.0)-q, 24.));\n    }\n    vec2 ml = cexp(2.*pi*cmuli(z));\n    return cmul(ml, prod)*pow(6.2831853,12.);\n}\n\n// Jacobi theta function\nvec2 theta(vec2 z, vec2 tau)\n{\n    vec2 rez = vec2(0);\n    for(float n = -30.; n<30.; n++)\n    {\n        rez += cexp(pi*cmuli(n*n*tau + 2.*n*z));\n    }\n    return rez;\n}\n\n// Z = 0,1/5\nvec2 theta0(vec2 tau)\n{\n    vec2 z = vec2(0,.5);\n    vec2 rz = vec2(0);\n    for(float n = -12.; n<12.; n++)\n    {\n        rz += cexp(pi*n*n*cmuli(tau) + 2.*pi*n*cmuli(z));\n    } \n    return rz;\n}\n\n// j-function / j-invariant\nvec2 jfunc(vec2 z)\n{\n    if (z.y < -.0) return vec2(0);\n    // using auxilliary theta functions\n    vec2 et = eta(z);\n    vec2 a = cdiv(2.*eta2(2.*z), et); // ϑ_10 (θ_2)\n    vec2 b = cdiv(eta2(0.5*(z+vec2(1,0))), eta(z + vec2(1,0))); // ϑ_00 (θ_3)\n    vec2 c = cdiv(eta2(.5*z), et); // ϑ_01 (θ_3) \n    vec2 num = cpow(cpow(a,8.) + cpow(b,8.) + cpow(c,8.), 3.);\n    vec2 den = cmul(cmul(a,b),c);    \n    vec2 rz = 32.*cdiv(num, cpow(cmul(cmul(a,b),c),8.));\n    return rz;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}