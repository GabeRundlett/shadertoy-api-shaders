{
    "Shader": {
        "info": {
            "date": "1662095437",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "7lGcWG",
            "likes": 5,
            "name": "Fractal mosaic 9 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    float s1 = 8.;\n    return\n        fract(a)\n        //max(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n        //abs(fract(a)-(fract(a/s1)/s1))\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    //a += .5;\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(2.5,-1.)\n        //vec2(1.5,0.)\n        \n        //vec2(-2.,.5+mod(floor(a.x),2.))\n    ,\n    \n    a1 =\n        a+a2\n        //a+a2+floor(a.x)\n        //a+a2+floor(a.y)\n    ;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //abs(fract((a1)*(a2.x+a2.y))*sign(a.yx-a)-.5)\n        //abs(fract((a1+.25)*(a2.x+a2.y))-.5)\n    ;\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.*8.*2.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5,c1=0.;\n    vec2 t2 = vec2(0.);\n    bool t3 = false;\n    vec2 uv1 = vec2(0.);\n    for(int k = 0; k < 9; k++){\n        //uv += t1_(floor(uv/2.),floor(uv/2.))/2.;\n        //uv += floor(vec2(uv.x,uv.y+.5))/1.5;\n\n        \n        //a really interesting pattern:\n        //uv -= floor(iTime+uv/1.5)/1.5;\n        \n        //uv.x += floor(uv.x*8.)/8.;\n\n        //uv.x += fmod(uv.x*5.,5.); //fractured pattern\n        //uv.y += fmod(uv.y,1.5); //lace pattern\n        //uv += floor(uv+vec2(-.5,0.))/1.5;\n        t3 =\n            uv.x > uv.y\n            //uv.x < uv.y || !t3\n            //uv.x < uv.y && t2.x > t2.y || !t3\n        ;\n\n        //another awesome pattern (looks better zoomed out)\n        //if(t3){ uv = uv.yx+.5;t2 = -t2.yx-.5;}\n        \n        //arabesque pattern\n        //if(t3){ uv = uv.yx;t2 = t2.yx;}\n        \n        //t3 = !t3 && uv.x > uv.y || t3 && uv.x < uv.y;\n        //t3 = !(t3 || uv.x < uv.y) && (!t3 || uv.x > uv.y);\n        \n        //if(t3)\n        uv =\n            abs(.5+uv+t2)+uv1\n            //abs(.5+uv+t2*fmod(uv.y+t2.y,2.))+uv1\n            //uv = max(abs(.5+uv+t2),abs(-.5+uv+t2))+uv1\n            \n            //abs(.5+uv+t2+pow(floor(uv.y*2./1.5),2.))\n            //fract(abs(2.+uv+t2))\n            //*sign(uv.y-uv.x)\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n        //uv.y += .5;\n\n        //uv += float(!t3);\n        \n        //star pattern on black background\n        //uv += floor(uv.x+uv.y+1.)*floor(t2.x+t2.y)/2.;\n        \n        //arabesque knot pattern\n        //if(uv.y>uv.x) uv = -uv.yx; else uv *= -sign(uv-uv.yx);\n        \n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv+.5+floor(uv.y*1.5-.5))\n            //-triangle_wave(uv-.5)*float(t3)\n            //-triangle_wave(uv-.5+floor(uv.x+uv.y))\n            //-triangle_wave(uv+.5*sign(uv.x-uv.y))\n            //-triangle_wave(uv-.5+fmod(uv.y*2.,8.))\n            //triangle_wave(uv+.5*sign(uv.x-uv.y))*sign(uv.x-uv.y)\n            //-triangle_wave(u-.5)/(.5+fmod(t2.x,2.))\n            //-triangle_wave(uv-1.5-fmod(t2.x/1.5,2.))\n            //*sign(uv.y-uv.x)\n        ;\n        \n\n        uv =\n            t2-triangle_wave(uv.yx)\n            //fract(t2-triangle_wave(uv.yx)+.5)/1.5\n            //t2-triangle_wave(uv.yx-floor(t2.y-t2.x))\n            //t2-triangle_wave(uv.yx-floor(t2.y-t2.x)*floor(uv.y-uv.x))\n        ;\n        //uv = fract(uv);\n        \n        //uv.x += floor((uv.x-uv.y));\n        \n        c1 =\n            uv.x-uv.y\n            //max(c1,(uv.x-uv.y))\n        ;\n        col = col.yzx;\n        //col *= col + .5;\n        if(t3 || uv.y < uv.x) col =\n            vec3(col.yz,c1)\n            //vec3(col.yz,max(c1,col.x))\n            //max(vec3(col.yz,c1),abs(col-c1)/3.)\n        ;\n        //else if(k>4) uv.x -= iTime;\n        //if(!t3 || uv.y > uv.x) col = vec3(col.yz,max(c1,0.));\n        //if(!t3 && uv.y < uv.x) col = vec3(col.yz,max(c1,0.));\n        //if(t2.x<t2.y||t2.x>t2.y) {uv=uv.yx;t2=t2.yx;}\n        //uv1 += 1.;\n        //if(uv.x>uv.y) uv.y += .5;\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time){\n  //time += floor(time*2.)/2.;\n  //time += fmod(time*2.,2.)+fmod(time*4.,4.);\n\n  //time += fpow(time,2.)*fpow(time*4.,2.);\n  \n  float tempo = 1.;\n  time /= tempo;\n  \n  //time += floor(time*pow(2.,fmod(time/8.,3.)));\n  float s1 =\n      4.\n      //pow(2.,1.+fmod(time,3.))\n  ;\n  //time -= floor(time*s1);\n  //time += fmod(time,5.+fmod(time*s1,7.));\n  float t=\n      time\n      //time + floor(time*s1+floor(time/s1))/s1\n      //time/(1.+fmod(time*s1,2.))/(1.+fmod(time/s1,2.))\n      //time/(1.+fmod(time/s1,2.))\n  ,\n  m1 =\n      fmod(t/4.,4.)\n      //fmax(t*4.+floor(t),floor(t*4.)+t,4.)\n      //fmax(t/4.,t/4.+fmod(t*4.,4.),4.)\n      //fmod(t*4.+floor(t/4.),4.)\n      //fmod(floor(t/s1)*(floor(t)+floor(t*s1)),s1)\n      //fmod(t/4.+ceil(t*4.),4.)\n  ,\n  //m1 = fmod(floor(t/4.)-t*4.,4.),\n  \n      //4.*(1.+fmod(t/(1.+fmod(t,2.)),2.)), //varying tempo\n  m3 = \n      fmod(t*s1/abs(2.5-m1),s1)\n      //fmod((t+floor(t*2.))*s1/abs(2.5-m1),s1)\n  ;\n  \n  //t *= (1.+fmod(t/4.,2.))/(1.+fmod(t/8.,2.)); //varying tempo\n  //t += floor(t*s1+floor(t/s1))/s1;\n  //t += m1+m3;\n  t *=\n      s1*s1\n      //s1*s1/(1.+fmod((t/s1+floor(t/s1/s1))/2.,2.))\n      //s1*s1*(1.+floor(m1/2.))\n      //s1*s1/abs(2.5-m1)\n      //s1*s1*(1.+fmod(floor(t*s1/4.)/s1,2.))/(1.+fmod(floor(t*s1/2.)/s1,2.))\n  ;\n  //t /= (1.+fmod(t/4.,2.))/(1.+fmod(t/8.,2.)); //varying tempo\n  \n  float m2 =\n      1. + fmod((t/s1),s1)\n      //1. + fmod((t/(s1+s1*m3)),s1)\n  ;\n\n  t /=\n      max(m2,m1+1.)\n      //max(min(m2,m3),m1+1.)\n  ;\n  \n  //m3 = mod(floor(t/s1*2.),s1-m3);\n  //m2 = mod(floor(t/s1*2.),s1-m2);\n  \n  float a =\n      128.*sqrt((1.-sqrt(fract(t/s1)))/s1)*.2\n      //(2.-log(fract(t/s1)))*(2.-log(fract(t/s1)))\n,\n  nb = time*pow(2.,m3/2.+7.5)*tempo;\n\n  return\n      log(abs(.5-vec2(fract(nb*.998),fract(nb)))*a)\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //vec2(fract(time*nb*.998/m2*s1)*a,fract(time*nb/m2*s1)*a)\n  ;\n\n}\n\n/*\nvec2 mainSound(int samp, float time){\n  float t=time*4.;\n  float m1 = mod(floor(t/4.),4.),\n  m3 = mod(floor(t/abs(2.5-m1)),4.);\n  \n  t *= 4.;\n  float m2 = 1. + min(mod(floor(t/4.),4.),t);\n\n  t /= max(m2,m1+1.);\n  \n  float a=sqrt((1.-sqrt(fract(t/4.)))/4.)*.2,\n  \n  nb = pow(2.,m3/2.+6.5);\n\n  return vec2(fract(time*nb*.998)*a\n   ,fract(time*nb)*a);\n\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)*floor(x),y*y)/y)\nfloat fmod1(float a, float b){\n    /*\n    for(float i = 1.; i < mod(floor(a/b),b); i++){\n        a += mod(floor(a/b),b)*i;\n    }\n    */\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = floor(a);\n    //a /= 1. + mod(floor(a1/32.),2.);\n    //a /= 1. + mod(floor(a1/16.),2.);\n    //a /= 1. + mod(floor(a1/8.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //abs(b-mod(floor(a),b*2.))\n        //mod(mod(floor(a/2.+2.),b),b)\n        //mod(mod(floor(a)+4.,floor(a/4.)+4.),b)\n        //mod(floor(floor(a/2.*b)/4.+floor(a/2.)),b)\n        //mod(floor(floor(a*2./b)*sign(.5-mod(float(a*2./b),2.))),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //fmod1(a+fmod1(a/4., b), b)\n    ;\n}\n\n//#define fmod(a,b) mod(mod(floor((a)),floor(1.+(a)/3.)),b)\n\n//multiply by prime numbers to get an interesting rhythm\n//#define fmod(a,b) mod(floor((a)/2.)*3.+floor((a)/4.)*7.,b)\n\n#define fmod1(x,y) mod(floor(x)+floor(floor(x)/y),y)\n#define fmod2(x,y) mod(floor(x+y/2.)*floor(x-y/2.),y)\n#define fmod3(x,y) mod(floor(x)*(mod(floor(time/s1),s1)+floor(x)),y)\n#define fmod4(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fpow(x,y) pow(y,fmod(x,y))\n#define floor1(x) floor(x)*floor(mod((x)/4.,2.))\n\n#define powmod(x,y) mod(floor(pow(y,mod(floor(x)/y,y))),y)\n#define powmod1(x,y) mod(floor(x+powmod(x+y,y)),y)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}