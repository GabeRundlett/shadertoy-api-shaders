{
    "Shader": {
        "info": {
            "date": "1549808420",
            "description": "There's no answer, any time, any place.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dSGWG",
            "likes": 14,
            "name": "vib ribbon",
            "published": 3,
            "tags": [
                "playstation"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 698
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define rot2D(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat noise(float x) {\n    return fract(sin(dot(vec2(x), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\n// 2d distance functions from https://iquilezles.org/articles/distfunctions2d\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udQuad( vec3 p, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 dc = d - c; vec3 pc = p - c;\n    vec3 ad = a - d; vec3 pd = p - d;\n    vec3 nor = cross( ba, ad );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(dc,nor),pc)) +\n     sign(dot(cross(ad,nor),pd))<3.0)\n     ?\n     min( min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ),\n     dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec3 line( in vec3 buf, in vec2 a, vec2 b, in vec2 p, in vec2 w, in vec4 col )\n{\n   float f = sdLine( p, a, b );\n   float g = fwidth(f)*w.y;\n   return mix( buf, col.xyz, col.w*(1.0-smoothstep(w.x-g, w.x+g, f)) );\n}\n\nvec4 map(vec3 p){\n    float d = udQuad(p, vec3(-3.5, 2.5, 1.0), vec3(-3.5, -2.5, 1.0), vec3(3.5, -2.5, 1.0),vec3(3.5, 2.5, 1.0));\n    return vec4(vec3(1.0),d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    mat3 camRotY = matRotateY(radians(sin(iTime*0.5)*10.0));\n    \n\tvec3 ro=vec3(0.,0.0,-0.3);\n    vec3 rd=normalize(vec3(p,1.0));\n\t\n    float t, dist;\n\tt = 0.0;\n\tvec3 distPos = vec3(0.0);\n\tvec4 distCl = vec4(0.0);\n\tfor(int i = 0; i < 20; i++){\n\t\tdistCl = map(distPos);\n\t\tdist = distCl.w;\n        if(t>30.)break;\n\t\tt += dist;\n\t\tdistPos = (ro+rd*t)*camRotY;\n\t}\n\n    vec2 uvRef = distPos.xy;\n    \n\tfloat n0 = noise(iTime*0.01)*0.05;\n    float n1 = noise(iTime*1.0)*0.06;\n    float n2 = noise(iTime*1.5)*0.05;\n    float n3 = noise(iTime*2.0)*0.04;\n    float n4 = noise(iTime*2.5)*0.03;  \n    \n    // bg color\n    vec3 col = vec3(0.0);\n    \n    // line color and size\n    vec4 lineCol = vec4(1.0);\n\tfloat lineSize = 0.005;\n    \n    /* particle??? */\n    vec2 ppos = vec2(0.5,0.8);  \n    \n    float pnum = 7.0;\n    for(float i = 0.0; i<pnum; i++){\n        float deg = i*(270.0/pnum)-(iTime*150.0);\n    \tfloat ex = cos(radians(deg))*0.6;\n        float ey = sin(radians(deg))*-0.15;\n        \n        float size = (cos(radians(deg))*0.05)+0.02+(((pnum-1.0)-i)*0.001)+n0;\n        float size2 = (-sin(radians(deg))*0.05)+0.02+(((pnum-1.0)-i)*0.001)+n0;\n        \n        mat2 rot = rot2D(radians(i*sin(iTime*1.0)*2.0));\n        vec2 ep = vec2(ex,ey)*rot;\n        vec2 p0 = (vec2(ep.x+size2, ep.y+size));\n        vec2 p1 = (vec2(ep.x-size2, ep.y-size));\n        \n        col = line( col, p0+ppos, p1+ppos, uvRef, vec2(lineSize,lineSize), lineCol);\n    }\n    \n    /* chara */\n    vec2 cpos = vec2(-1.0,0.1+sin(iTime*6.0)*0.02);\n    float moveSpeed = 3.5;\n    \n    // head\n    col = line( col, vec2(-0.08+n0, 0.2)+cpos, vec2(0.08+n0, 0.2)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.08+n0, 0.2)+cpos, vec2(-0.15+n1, 0.1)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.15+n1, 0.1)+cpos, vec2(-0.08+n0, 0.0)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.08+n0, 0.0)+cpos, vec2(0.08+n0, 0.0)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n\tcol = line( col, vec2(0.08+n0, 0.2)+cpos, vec2(0.15+n2, 0.1)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.15+n2, 0.1)+cpos, vec2(0.08+n0, 0.0)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    \n    // ear\n    vec2 earWeightPos = vec2(sin(iTime*2.0)*0.02,sin(iTime*2.0)*0.01);\n    col = line( col, vec2(-0.3+n0, 0.4+n0)+cpos+earWeightPos, vec2(0.0, 0.2)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.3+n0, 0.4+n0)+cpos+earWeightPos, vec2(-0.45+n0, 0.55+n0)+cpos+earWeightPos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.45+n0, 0.55+n0)+cpos+earWeightPos, vec2(-0.3+n0, 0.5+n0)+cpos+earWeightPos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.3+n0, 0.5+n0)+cpos+earWeightPos, vec2(0.0, 0.2)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    \n    vec2 earWeightPos2 = vec2(sin(iTime*1.5)*0.05,sin(iTime*1.5)*0.01);\n    col = line( col, vec2(-0.2+n0, 0.5+n0)+cpos+earWeightPos2, vec2(0.0, 0.2)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.2+n0, 0.5+n0)+cpos+earWeightPos2, vec2(-0.23+n0, 0.65+n0)+cpos+earWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.23+n0, 0.65+n0)+cpos+earWeightPos2, vec2(-0.13+n0, 0.55+n0)+cpos+earWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.13+n0, 0.55+n0)+cpos+earWeightPos2, vec2(0.0, 0.2)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    \n    // eye\n    float num = 8.0;\n    vec2 epos = vec2(0.1+n0*0.5,0.17+sin(iTime*6.0)*0.02+n0*0.5)+cpos;\n    float prevEx = 0.06;\n    float prevEy = -0.05;\n    for(float i = 0.0; i<num; i++){\n        float deg = i*(360.0/num)+30.0;\n    \tfloat ex = cos(radians(deg))*0.03;\n        float ey = sin(radians(deg))*0.03;\n        \n        deg = i*(360.0/num);\n\t\tfloat ex2 = cos(radians(deg))*0.08;\n        float ey2 = sin(radians(deg))*0.08;\n        \n        col = line( col, vec2(ex, ey)+epos, vec2(ex2, ey2)+epos, uvRef, vec2(lineSize,lineSize), lineCol);\n        \n        deg = i*(360.0/num)-30.0;\n    \tex = cos(radians(deg))*0.03;\n        ey = sin(radians(deg))*0.03;\n        col = line( col, vec2(ex, ey)+epos, vec2(ex2, ey2)+epos, uvRef, vec2(lineSize,lineSize), lineCol);\n        \n        col = line( col, vec2(prevEx, prevEy)+epos, vec2(ex2, ey2)+epos, uvRef, vec2(lineSize,lineSize), lineCol);\n        \n        prevEx = ex2;\n        prevEy = ey2;\n    }\n    \n    // body\n    col = line( col, vec2(0.0+n0, 0.0)+cpos, vec2(-0.02+n0, -0.3)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.02+n0, -0.3)+cpos, vec2(0.02+n0, -0.3)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n\tcol = line( col, vec2(0.02+n0, -0.3)+cpos, vec2(0.0+n0, 0.0)+cpos, uvRef, vec2(lineSize,lineSize), lineCol);\n\n    // arm left\n    vec2 armWeightPos = vec2(sin(iTime*moveSpeed)*0.12,0.0);\n    vec2 armWeightPos2 = vec2(0.03+sin(iTime*moveSpeed)*0.17,0.0);\n    col = line( col, vec2(0.0+n0, 0.0)+cpos, vec2(0.0+n0, -0.15)+cpos+armWeightPos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.0+n0, -0.15)+cpos+armWeightPos, vec2(0.0+n0, -0.25)+cpos+armWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.+n0, -0.25)+cpos+armWeightPos2, vec2(0.02+n0, -0.25)+cpos+armWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    \n    // arm right\n    armWeightPos = vec2(sin(iTime*moveSpeed)*-0.12,0.0);\n    armWeightPos2 = vec2(0.03+sin(iTime*moveSpeed)*-0.17,0.0);\n    \n    col = line( col, vec2(0.0+n0, 0.0)+cpos, vec2(0.0+n0, -0.15)+cpos+armWeightPos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.0+n0, -0.15)+cpos+armWeightPos, vec2(0.0+n0, -0.25)+cpos+armWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.0+n0, -0.25)+cpos+armWeightPos2, vec2(0.02+n0, -0.25)+cpos+armWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    \n    // leg left\n\tvec2 legWeightPos = vec2(sin(iTime*moveSpeed)*-0.1,0.0);\n    vec2 legWeightPos2 = vec2(-0.07+sin(iTime*moveSpeed)*-0.17,0.0);\n\n    col = line( col, vec2(0.0+n0, -0.3)+cpos, vec2(0.0+n0, -0.45)+cpos+legWeightPos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.0+n0, -0.45)+cpos+legWeightPos, vec2(0.0+n0, -0.6)+cpos+legWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.0+n0, -0.6)+cpos+legWeightPos2, vec2(0.02+n0, -0.62)+cpos+legWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    \n    // leg right\n    legWeightPos = vec2(sin(iTime*moveSpeed)*0.1,0.0);\n    legWeightPos2 = vec2(-0.07+sin(iTime*moveSpeed)*0.17,0.0);\n    \n    col = line( col, vec2(0.0+n0, -0.3)+cpos, vec2(0.0+n0, -0.45)+cpos+legWeightPos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.0+n0, -0.45)+cpos+legWeightPos, vec2(0.0+n0, -0.6)+cpos+legWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(0.0+n0, -0.6)+cpos+legWeightPos2, vec2(0.02+n0, -0.62)+cpos+legWeightPos2, uvRef, vec2(lineSize,lineSize), lineCol);\n    \n    \n    /* road */\n    vec2 rpos = vec2(0.0,-0.55);\n    uvRef.x += iTime;\n    uvRef.x = mod(uvRef.x,3.0)-3.0;\n    \n\tcol = line( col, vec2(-3.0, 0.0)+rpos, vec2(-2.9, -0.3+n1)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-2.9, -0.3+n1)+rpos, vec2(-2.8, 0.0)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-2.8, 0.0)+rpos, vec2(-2.8, 0.0)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-2.8, 0.0)+rpos, vec2(-1.5, 0.0)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-1.5, 0.0)+rpos, vec2(-1.4, -0.3+n2)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-1.4, -0.3+n2)+rpos, vec2(-1.3, 0.0+n1)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-1.3, 0.0+n1)+rpos, vec2(-1.2, -0.3+n3)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-1.2, -0.3+n3)+rpos, vec2(-1.1, 0.0+n2)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-1.1, 0.0+n2)+rpos, vec2(-1.0, -0.3+n4)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-1.0, -0.3+n4)+rpos, vec2(-0.9, 0.0)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n    col = line( col, vec2(-0.9, 0.0)+rpos, vec2(0.0, 0.0)+rpos, uvRef, vec2(lineSize,lineSize), lineCol);\n\n\tvec3 color;\n\tif(t < 30.){\n\t\tcolor = distCl.xyz*col;\n\t}else{\n        // bg\n        color = vec3(0.0);\n\t}\n\n\t// rendering result\n\tvec3 dst = color;\n\tfragColor = vec4(dst, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}