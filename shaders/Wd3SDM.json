{
    "Shader": {
        "info": {
            "date": "1573461527",
            "description": "Inktober, but with shaders\n\nWanted to try out Truchet tiling!",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3SDM",
            "likes": 5,
            "name": "shadetober #24 (dizzy)",
            "published": 3,
            "tags": [
                "truchet",
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\nmat2 rot(float a) { \n    return mat2(\n    cos(a), sin(a),\n        -sin(a), cos(a)\n    );\n}\n\n// gotta do a Truchet tiling amirite\n#define TAU 6.283\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //----------------------------------- tiling and camera ------------------------------\n    // fb_uv: original framebuffer uv\n    // uv: uv of the each cell\n    // s_uv: scaled uv\n    // cell: vec2 of cell coords\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    vec2 fb_uv = uv;\n    float ytiles = 5. * (sin(iTime) + 2.);\n    vec2 s_uv = uv * ytiles;\n    \n    // move the \"camera\" around\n    s_uv -= ytiles * .5;\n    mat2 canvasRotation = rot(iTime);\n    s_uv *= canvasRotation;\n    s_uv += ytiles * .5;\n    s_uv += iTime * 5.;\n    \n    uv = fract(s_uv);    \n    vec2 cell = floor(s_uv);\n    \n    //----------------------------------- truchet stuff -----------------------------------\n    \n    float noise = floor(.5 + texture(iChannel0, cell * .01).r);\n    \n    // temp change origin for rotation\n    uv -= .5;\n    mat2 cellRotation = rot(TAU / 4. * noise);\n    uv *= cellRotation;\n    uv += .5;\n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse.x *= aspect;\n    \n    vec3 col = vec3(.2,.5,.9);\n    \n    const float width = 0.1;\n    const float st = (.5 - width);\n    const float en = (.5 + width);\n    const float specpower = 6.;\n    vec3 lcolor = vec3(.1, .9, 1.) * .6;\n    vec3 scolor = vec3(1.);\n    \n    vec2 lp = normalize(mouse - fb_uv);\n    vec3 lp3 = normalize(vec3(lp, 1.));\n    \n    // --- bottom left circle ---\n    float d = length(uv);\n    float t = (d - st) / (en - st);\n    t = clamp(t, 0., 1.);\n\tfloat z = sin(t * PI);\n    vec2 tang = canvasRotation * cellRotation * (normalize(uv) * (t * 2. - 1.));\n    vec3 tcol = vec3(tang.xy, z);\n    float incd = clamp(dot(tcol, lp3), 0., 1.);\n    //float masking = (1. - pow(abs(cos(PI * z/2.)), 10.));\n    // todo the \"masking\" term fixes the soft z but edges get crackly when the camera zooms out so whatev\n    col = mix(col, incd * lcolor + pow(incd, specpower) * scolor, z);\n    \n    // --- top right circle ---\n    float e = length(uv - 1.);\n    t = 1. - (e - st) / (en - st);\n    t = clamp(t, 0., 1.);\n\tz = sin(t * PI);\n    tang = canvasRotation * cellRotation * (normalize(1. - uv) * (t * 2. - 1.));\n    tcol = vec3(tang.xy, z);\n    incd = clamp(dot(tcol, lp3), 0., 1.);\n    //masking = (1. - pow(abs(cos(PI * z/2.)), 10.));\n    col = mix(col, incd * lcolor + pow(incd, specpower) * scolor, z);\n\n    // fake light\n    col *= 1.5-length(fb_uv - mouse)*.5;\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}