{
    "Shader": {
        "info": {
            "date": "1628541862",
            "description": "Testing some idea function. pretty sure it's not optimized and / or heavy but yolo I like the rendering :) ",
            "flags": 0,
            "hasliked": 0,
            "id": "sl2SDG",
            "likes": 9,
            "name": "大龙猫 - Terrain I ",
            "published": 3,
            "tags": [
                "terrain"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat _tx(float t){\n  return clamp(abs(sin(t))-.5,0.,.35)*2.;\n  }\nfloat tx(vec2 t){\n  float q = 4.0;\n  for(float i=1.;i<=8.;i++){\n       \n       q =q + sign(mod(i,1.)-.5)* _tx(t.y+t.x*i*3.1415+i*2.)/(i*4.);\n       t*=rot(-.785);\n    }\n    return q;\n  \n  }\nvec2 sdf(vec3 p){\n  vec3 op = p;\n  p.z +=fGlobalTime*.1;\n\n    vec2 h;\n  h.x = dot(p,vec3(0.,1.,.0))-tx(p.xz*.8+tx(p.zx*.8)/8.)/4.;\n  h.x = max(length( op+vec3(0.,-1.5,0.) )-1.2,h.x);\n  h.x*=.9;\n  h.y = 1.;\n  return h;\n}\n\n#define q(s) s*sdf(p+s).x\nvec2 e= vec2(-.0005,.0005);\nvec3 norm(vec3 p){return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\n#define ao(rp,n,k) (sdf(rp+n*k).x/k)\n#define AO(rp,n) (ao(rp,n,.1)+ao(rp,n,10.)+ao(rp,n,100.))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col =vec3(.1);\n  vec3 ro = vec3(sin(fGlobalTime*.1)*1.,1.2,cos(fGlobalTime*.2)*1.);\n  vec3 rt = vec3(0.,0.5,0);\n  vec3 z = normalize(rt-ro);\n  vec3 x = normalize(cross(z,vec3(0.,-1.,0.)));\n  vec3 y = normalize(cross(z,x));\n  vec3 rd =mat3(x,y,z)*normalize(vec3(uv,1.));\n  vec3 light =mat3(x,y,z)*vec3(0.,1.,-0.5);\n  vec3 rp = ro;\n \n  for(float i=0.;i<=128.;i++){\n      vec2 d = sdf(rp);\n      if(length(rp) > 100.)break;\n      if(d.x <=.001){\n          vec3 n= norm(rp);\n        \n          float diff = max(0.,dot(normalize(light-rp),n));\n          float spec = pow(max(0.,dot(normalize(ro-rp),reflect(-normalize(light),n))),32.);\n        float  fr=pow(1.+dot(n,rd),8.);\n          col = vec3(.1)*diff+spec+2.*vec3(1.,.7,0.5)*fr;\n          col = mix(vec3(.1),col,fr+AO(rp,n)/3.);\n        \n          break;\n       }\n       rp+=rd*d.x;\n  }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}