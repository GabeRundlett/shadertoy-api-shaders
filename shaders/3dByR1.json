{
    "Shader": {
        "info": {
            "date": "1586035830",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "3dByR1",
            "likes": 27,
            "name": "Day 107",
            "published": 3,
            "tags": [
                "mograph",
                "motiongraphics"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 102\" by jeyko. https://shadertoy.com/view/3dfcW2\n// 2020-04-04 21:09:03\n\n// Fork of \"Day 101\" by jeyko. https://shadertoy.com/view/WslyWS\n// 2020-03-30 07:59:19\n\n// radiual chromab in this buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n\tfragColor = vec4(0);\n    // Radial blur\n    float steps = 1.;\n    float scale = 0.00 + pow(dot(uvn,uvn),1.)*0.05;\n    float chromAb = pow(length(uv - 0.5),2.9)*0.2;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1.4/iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor += radial;\n    \n    //fragColor = 1. - fragColor;\n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    fragColor = max(fragColor, 0.);\n    //fragColor.b *= 1. + uv.x*0.4;\n    fragColor *= 1. - dot(uvn,uvn)*1.;\n    fragColor = 1.-exp(-fragColor*3.5);\n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor)*1.4,0.5);\n    \n    \n    float n1d = texelFetch(iChannel2,ivec2(mod(fragCoord + vec2(float(iFrame)*0.,0.),256.)),0).x*0.5;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(fragCoord + n1d*200. ,256.)),0).xyz*0.6;\n    \n    fragColor.xyz += smoothstep(1.,0.,length(fragColor.xyz))*n*0.004;\n    \n    fragColor.xyz -= smoothstep(0.,1.,length(fragColor.xyz))*n*0.4;\n    \n    fragColor = pow(abs(fragColor), vec4(0.4545 ));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// from https://necessarydisorder.wordpress.com/\nfloat ease(float p, float g) {\n    if(p < 0.){\n        return 0.;\n    } else if(p > 1.){\n    \treturn 1.;\n    } else {\n        if (p < 0.5) \n            return 0.5 * pow(2.*p, g);\n        else\n            return 1. - 0.5 * pow(2.*(1. - p), g);\n    }\n}\n\n#define iTime (iTime*0.8)\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\tvec2 suv = uv;\n    \n    uv *= 1. - dot(uv,uv)*0.05;\n    \n    \n    vec3 col = vec3(0.004,0.001,0.0);\n    col = smoothstep(0.,1.,col);\n\n    float t = mod(iTime, 3.5);\n    \n    float enva = ease(t*2., 2.);\n    float envb = ease((t - 1.)*2., 2.);\n    float envc = ease((t - 2.)*2., 2.);\n    \n    uv += sin(vec2(3,2)*iTime*0.5)*0.01;\n    //uv.xy *= rot(0.5*pi);\n    uv.xy *= rot(-pi*pow(enva, 1.)*0.5   - 0.5*envc*pi);\n    \n    uv *= 1.;\n    \n    uv.x += enva*0.2;\n    uv.x -= envb*0.4;\n    uv.x += envc*0.2;\n    \n    vec3 p = vec3(uv, 1.);\n    p /= dot(p.xy,p.xy);\n    //p.xy -= sin(enva *pi*0.5 - 0.5*envb*tau - 0.5*envc*pi - pi*0.)*tau;\n    \n    p.x -= sin(enva *pi*0.5 - 0.5*envb*tau - 0.5*envc*pi - pi*0.)*tau*0.94;\n    #define xor(a,b) a < (b) ? max(a,-(b)) : min(a,(b))\n    \n    float d = 10e8;\n    float b = 3.1 + enva*0.2 - envc*0.2;\n    \n    for(float i = 0.; i < 20.; i++){\n    \tfloat dpp = dot(p.xy,p.xy);\n        \n        //dpp = clamp(dpp, .1,25.);\n        //if(mod(i - 9., 9.) == 0.)\n        //dpp = clamp(dpp, 1.- i*0.4,1.8 );\n        dpp = clamp(dpp, 0.1,20. );\n        \n        p = (2. - i*0.05)*p/dpp;\n         \n        \n        //b *= 0.99;\n        p.xy = abs((mod(p.yx- 0.5*b, b) ) - 0.5*b);\n        \n        if(i == 2.)\n    \t\tp.x -= 1.1 - pow(enva, 0.6)*0.5 + envb*0.25 + envc*0.25;\n    \n    }\n    \n    #define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n    \n    \n    float s = 0.002;\n    \n    \n    //col += smoothstep(0.0,0.004*p.z, d  + 0.2);\n    //col += smoothstep(0.0,0.13, -d);\n    //col += smoothstep(0.0,0.01, -d + 0.);\n    \n    \n    \n\t//col += smoothstep(0.0,0.00002*iResolution.y, -length(p.xy)/p.z + s*4. );\n\t//col += smoothstep(0.0,0.00001*iResolution.y, -length(max(p.x, -p.y))/p.z + s );\n    //col += smoothstep(0.0,0.000005*iResolution.y, -abs(length(p.x)/p.z) + s ) * vec3(1.9,0.9,0.6);\n    //col += smoothstep(0.0,1.*fwidth(suv.x), -abs(length(p.x)/p.z) + s ) * vec3(1.9,0.9,0.6);\n    \n    col += smoothstep(abs(fwidth(suv.x)),0., abs(abs(p.x)/p.z) + 0.0005 ) * vec3(1.9,0.9,0.6)*0.6;\n    \n    \n    col += pow(smoothstep(0.01,0., abs(abs(p.x)/p.z) ),2.) * vec3(1.9,0.9,0.6)*0.05;\n    col += pow(smoothstep(0.05,0., abs(abs(p.x)/p.z) ),2.5) * vec3(1.9,0.9,0.6)*0.002;\n    //col += pow(smoothstep(0.1,0., abs(abs(p.x)/p.z) ),2.5) * vec3(1.9,0.9,0.6)*0.002;\n    //col += pow(smoothstep(0.2,0., abs(abs(p.x)/p.z) ),2.5) * vec3(1.9,0.9,0.6)*0.001;\n    //col += smoothstep(5.*fwidth(suv.x),0., abs(abs(p.x)/p.z) +0.0001 ) * vec3(1.9,0.9,0.6)*0.05;\n    \n    \n    float g = smoothstep(0.0,dFdx(suv.x), -length(min(p.y, p.x))/p.z + s );\n    //col += 2.*max(g*pow(abs(sin( 3.5*(uv.x + sin(uv.y*10. - uv.x*10. - t*5.))/tau)), 6.)*2.*pal(0.5,0.5,vec3(4.,.44,.04),0.7,(5. + sin( 3.5*(suv.xxx*1. + t)/tau)*1.)), 0.);\n    col += 5.*max(\n        \tg*pow(abs(sin( 3.5*(uv.x + sin(uv.y*10. - uv.x*20. - t/1.5*tau))/tau)), 6.)*2.\n        \t*pal(0.,0.5,vec3(4.,.44,.04),0.7,(5. + 1.*sin(suv.xxx*1. + t/.5*tau))), \n        0.)*vec3(0.2,1,1);\n    g = smoothstep(0.0,0.1, -length(min(p.y, p.x))/p.z + s*10. );\n    \n    col += 2.*max(\n        g*pow(abs(sin( 3.5*(uv.x + sin(uv.y*10. - uv.x*20. - t/1.5*tau))/tau)), 6.)*2.\n        *pal(0.,0.5,vec3(4.,.44,.04),0.7,(5. + 1.*sin(suv.xxx*1. + t/.5*tau))), \n    0.)*vec3(0.5,1,1)*1.;\n    g = smoothstep(0.0,dFdx(suv.x), -length(min(p.y, p.x))/p.z + s );\n    \n    \n    col += 0.02*max(\n        g, \n    0.)*vec3(0.1,0.1,0.)*1.;\n\n\t\n    \n    \n    col = pow(abs(col), vec3(1. + dot(suv*1.4,suv*1.4)*0.));\n    \n    col = max(col, 0.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}