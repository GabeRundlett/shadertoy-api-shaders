{
    "Shader": {
        "info": {
            "date": "1555568171",
            "description": "its just a web",
            "flags": 0,
            "hasliked": 0,
            "id": "3dBXWt",
            "likes": 7,
            "name": "psyWeb",
            "published": 3,
            "tags": [
                "animation",
                "web",
                "psy"
            ],
            "usePreview": 0,
            "username": "lucastakejame",
            "viewed": 534
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415\n#define ss(a,b,c) smoothstep(a,b,c)\n\nconst float period = 5.;\n\n\nvec2 rotate(vec2 p, vec2 piv, float angle)\n{\n    p -= piv;\n    return vec2(p.x*cos(angle)-p.y*sin(angle) + piv.x,\n                p.y*cos(angle)+p.x*sin(angle) + piv.y);\n}\n\n// Returns value in [0,1] \n// mode changes how value changes\nfloat window( int mode, float t)\n{\n    // 0 is linear\n\n    if(mode == 1) // fast end maintain 1\n        t *= t;\n    else if(mode == 2)// fast start maintain 1\n        t = 1. - (1. - t)*(1. - t);\n    else if(mode == 3) // cos smooth rise and fall\n        t = .5 + .5*cos( -PI + 2.*PI*t);\n    else if(mode == 4) // constant with smooth edges\n    {\n        t = .5 + .5*cos( -PI + 2.*PI*t);\n        t = clamp(t*10.,0.,1.);\n    }\n    return t;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Time controls\n    float t0 = window( 3, mod(iTime, 5.)/5.);\n    float t1 = window( 3, mod(iTime, 10.)/10.);\n    float t2 = window( 0, mod(iTime, 2.)/2.);\n    float t3 = window( 3, mod(iTime, 1.)/1.);\n    float t4 = window( 2, clamp(mod(iTime,6.) - .7, 0.,5.)/5.);\n    float t5 = window( 2, clamp(mod(iTime,3.) - 1.5, 0.,1.8)/1.8);\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n//    float r = iResolution.x/iResolution.y;\n    vec2 uv = (fragCoord -.5* iResolution.xy ) /iResolution.y;\n    \n    vec2 wc = vec2(.4,-0.2); // web center\n    // move web center\n    uv += wc;\n    \n    \n    float wavy = .1*sin(30.*length(uv));\n    float spiralCW = length(uv);\n    uv = rotate(uv, vec2(0), iTime*.4\n                \n                + t0*wavy\n                + t1*spiralCW\n               ); \n    \n    vec2 pol = vec2(length(uv), (atan(uv.y,uv.x))/(2.*PI) + .5 );\n    \n    // angular repetition\n    vec2 polOld = pol;\n    // angle window\n    float aw = .0588;\n    pol.y = mod(pol.y, aw);\n    \n    \n    // radial strip\n    float t6 = window(4, clamp(mod(iTime, 10.)/5. - 1.,0.,1.));\n    float d = .003 + t6*.025 + .0005/pol.x;\n    float p = .5;\n    float strip = smoothstep(d, d*p - .001, pol.y) \n        \t\t+ smoothstep(aw - d, aw - d*p, pol.y);\n    \n    float web = strip;\n\n    // arcs curvature\n    float modul = (pol.y - 0.*t1*.1*sin(polOld.y*21.2)) * (pol.y - .065) * (.2/(pol.x));\n    float pulse = 1. - smoothstep(.05, .3 ,abs(pol.x - mix(0.,2.,(t4 + t5)*2.5 - 2.  )));\n    \n    \n    float rpwindow = window( 3, clamp(mod(iTime,10.), 0.,5.)/5.);\n    //radial period\n    float rp = window(2, pol.x*.6)*.9;\n    \n    // pulse distortion\n    float pd = .1 + .5*window( 0, mod(iTime, 10.)/10.);\n    \n    float t7 = 1.-window(3, clamp(mod(iTime, 7.)/7. - 1.,0.,1.));\n    \n    // arc thickness \n    float t = 2.*pow(abs(pol.y/aw - .5*t7), 4.);\n    float arcs = smoothstep(.99 - t6*.9 - t,\n                            .998 - t,\n                            sin(\n                                (rp + pulse*pd - pol.x*modul*140.)\n                               *(60.+ floor(polOld.y/aw)*2.)\n                                \n                                + iTime*10.\n                            )\n                           );\n    float wa = max(web, arcs);\n\n    vec3 col = mix(\n                    vec3( window(3, pol.y/aw) *2.*(.5+.5*sin(pol.x*40.*polOld.y) + t1) )*t1*.2,\n                    mix(\n                        mix(\n                        vec3(pol.y+.9, pol.x + 4.*pulse, t1)*.8,\n                        vec3(pol.x*3. + pulse, pol.y*2., t3),\n                        arcs - web),\n                        vec3(1),\n                        1.-t1*1.-t1),\n                    wa);\n//  vec3 col = vec3(web);\n\n    fragColor = vec4(col,1.);\n    //fragColor = vec4(web);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}