{
    "Shader": {
        "info": {
            "date": "1567633730",
            "description": "4k PC intro released at Xenium 2019\n\nDownload/pouet: https://www.pouet.net/prod.php?which=82778",
            "flags": 96,
            "hasliked": 0,
            "id": "3ddGzn",
            "likes": 290,
            "name": "Then and Before - PC4k by Altair",
            "published": 3,
            "tags": [
                "4k",
                "demoscene",
                "volumetric",
                "pathtracing",
                "madtracing"
            ],
            "usePreview": 1,
            "username": "KK",
            "viewed": 12865
        },
        "renderpass": [
            {
                "code": "//\n// __ __|  |   |  ____|   \\  |         \\      \\  |  __ \\       __ )   ____|  ____|  _ \\    _ \\   ____| \n//    |    |   |  __|      \\ |        _ \\      \\ |  |   |      __ \\   __|    |     |   |  |   |  __|   \n//    |    ___ |  |      |\\  |       ___ \\   |\\  |  |   |      |   |  |      __|   |   |  __ <   |     \n//   _|   _|  _| _____| _| \\_|     _/    _\\ _| \\_| ____/      ____/  _____| _|    \\___/  _| \\_\\ _____| \n//\n//\n//                                                                         4k PC intro - Altair MMXIX\n//\n//\n//    Code & design:    KK\n//    Music & design:   Lesnik\n//    Add. code:        Virgill\n//\n//\n//\n//\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ================================================ Intro ================================================\n\n\nconst int QN = 100;\nconst int QD = 50;\n\nconst float QNs = 45./float(QN);\nconst float QNq = 1.35/float(QN);\nconst float QDs = 30./float(QD);\nconst float QDq = .9/float(QD);\n\n\nint seq_code;\nivec3 iA;\nfloat cb(int n) {\n\treturn float((seq_code>>n)&1);\n}\n\nvec3 lpos3;\nfloat camz, destr, sprog;\t// scene progress\n\n\n\n\n\n\n\n\nvec3 map(vec3 p)\n{\n\tfloat\n\t\ta=.5*iTime*cb(11),\n\t\tn0 = noise(73.*p+a),\n\t\tn1 = noise(10.*p+a+a),\n\t\tn2 = noise(2.*p+a)-.5,\n\t\tn3 = noise(.4*p+a)-.5,\n\t\th;\n\tfloat\n\t\twn1 = .2*n0+n1,\n\t\twn2 = sat(10.*n2),\n\t\twn3 = sat(10.*n3)*sat(.2*p.x*p.x-.1+.3*n2);\n\tfloat wallnoise = wn1*(.02+wn2),\n        \teclipse=sat(5.*sprog-3.)*cb(7);\n\tvec3 d = vec3(1, 0, 0), q, t;\n\n\tdmin(d, 6.-p.y-.1*n1+.3*n2-.4*n3,\n\t\t(2.-.4*cb(12)-1.*eclipse+1.5*sat(1000.*\n\t\t(1.3-length((p-7.*lpos3).xz))*cb(4)\t// enl\n\t\t))*(.12+.3*n0+.5*n1+.5*n2+.5*n3),\t\t// ebase,\n\t\t0.); \t\t// common sky\n\n\n\th = mix(.05*n0+.07*n1+.3*n2+n3,\t\t\t\t\t// terrain\n\t\t.002*n0+.04*n1+.2*n2+.4*n3, cb(11));\t// water\n\tif( cb(3)==0. )\n\t\tdmin(d, .8+p.y-.1*wallnoise, .01+.9*wn2, 0.);\t// forrest floor\n\telse if( cb(2)==0. )\n\t\tdmin(d, 1.2-.6*cb(11)+p.y-h, mix(.8+h*(1.-eclipse), .01, cb(11)), 0.);\t// terrain\n\telse\n\t\tdmin(d, .6+p.y-(wn1/3.+n2+.5+3.*sat(4.*n3-1.))*(.02+wn3), .01+.9*wn3, 0.);\t// rocks\n\n\n\n\th = sat(mix(.85*sprog, 1., cb(5))*2.*cb(6)-.5+.2*p.y);\n\th*=2.*(n0-.2)*h;\n\tif( cb(3)==0. )\n\t\tif( cb(2)==0. )\n\t\t{\n\t\t\t// trees\n\t\t\tq=rep(abs(p)-1.6, 3.2);\n\t\t\tq.y = abs(p.y)-3.;\n\t\t\tdmin(d,\n\t\t\t\tmax(p.y-3.5+wn2, vines(\n\t\t\t\t\tq,\n\t\t\t\t\t.1*wn1+.5+10./pow(1.+.95*q.y*q.y, 1.5)\n\t\t\t\t) -\n\t\t\t\t\tmix(.02+.08*wn1, -.1, (.55+p.y/3.)*sat(-15.-p.z))\n\t\t\t\t), .9, .0);\n\t\t}\n\t\telse {\n\t\t\t// city\n\t\t\tq=p;\n\t\t\tq.xz=rep(q-3., 6.).xz;\n\n\t\t\tdmin(d,\n\t\t\t\t(max(\n\t\t\t\t\tmin(lattice(rep(q, .17))-.01, lattice(rep(q, .3))-.03),\n\t\t\t\t\tlength(max(abs(q) - vec3(1, 3, 1), 0.))+sat(wallnoise+q.y/10.-.25)\n\t\t\t\t)-h), .7, 0.);\n\t\t}\n\n\n\t\tq=p;\n\t\tq.y-=1.5*n0*sprog*cb(15);\n\t\tif( camz<30. )\n\t\t\tif( cb(2)==0. )\n\t\t\t\t// circle\n\t\t\t\tif( cb(4)==0. )\n\t\t\t\t\tdmin(d,\n\t\t\t\t\t\tlength(vec2(q.z, length(q.xy)-.5))-.025,\n\t\t\t\t\t\t2.5, -.3);\n\t\t\t\telse\n\t\t\t\t\tdmin(d,\n\t\t\t\t\t\tlength(q)-.6,\n\t\t\t\t\t\t1.8+eclipse*(p.z+.4*(p.y+p.x)<0. ? -.8 : .5),\n\t\t\t\t\t\t.0);\n\t\t\telse\n\t\t\t\t// glowing triangle/square\n\t\t\t\tif( cb(4)==0. )\n\t\t\t\t\tfor( float i=0.; i<.99; i+=1./(3.+cb(3)) ) {\n\t\t\t\t\t\tt=q;\n\t\t\t\t\t\tpR(t.xy, i);\n\t\t\t\t\t\tt.y -= .3+.22*cb(3);\n\t\t\t\t\t\tdmin(d,\n\t\t\t\t\t\t\tmax(length(t.yz)-.025, abs(t.x)-.532),\n\t\t\t\t\t\t\t2.5, -.3);\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpR(q.xz, .05);\n\t\t\t\t\tq.y -= .5;\n\t\t\t\t\tdmin(d,\n\t\t\t\t\t\tmax(q.y, dot(abs(q), normalize(vec3(1, .6, 1)))-.4),\n\t\t\t\t\t\t1.4, .0);\n\t\t\t\t}\n\n\n\t\t// destruction\n\t\tvec2 r=p.xz+p.xy, s = vec2(.5, -.5), vd=50.*vcore(vcore(vcore(vcore(vec2(1), r, s.xx), r, s.xy), r, s.yx), r, s.yy);\n\t\th = vd.y-vd.x+sat(p.y)+1.-1.5*sat((destr-length(p.xz)));\n\t\td.yz = mix(d.yz, vec2(3., -.3), sat(1.-h));\n\n\t\treturn d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(0);\n    \n    // sequencing\n\t{\n\t\tint spos = 0;\n\t\tfloat stim = iTime*1000.*441./10./(9586.*2.);\n\t\tint istim = int(stim);\n        while( SCENES[spos].x<255 && stim>=float(SCENES[spos].x) )\n            stim -= float(SCENES[spos++].x);\n        iA.y = seq_code = SCENES[spos].y;\n        sprog = sat(stim / float(SCENES[spos].x));\n\t}\n\n\tcamz = mix((15.+10.*cb(0)+20.*cb(1)+5.*cb(10))*(1.-.1*sprog)-10., .6, pow(sprog,6.)*cb(7));\n\tdestr = sprog*cb(9)*(3.+5.*cb(5));\n\n\n\n\tfragColor = vec4(0);\n\tif( uv.y>.11 && uv.y<.89 )\n\t{\n\t\tfloat t1 = 0., t2 = 0., seed = uv.x*uv.y+uv.y+uv.x+fract(iTime);\n\t\tvec3 ro1 = vec3(0, 0, -.1),\n\t\t\trd1 = normalize(vec3((2.*fragCoord.xy-iResolution.xy)/iResolution.y/1.8, 1)),\n\t\t\tscol=vec3(0), m1, m2, nor1, pos1, pos2;\n\n\t\t// camera angle\n\t\tvec2 ca=vec2(.1, .07)*cb(8), e = vec2(0, .0001);\n\t\tpR(ro1.zy, ca.y); pR(rd1.zy, ca.y);\n\t\tpR(ro1.zx, ca.x); pR(rd1.zx, ca.x);\n\t\tro1.z-=camz;\n\n\t\tlpos3 = normalize(mix(vec3(.5, 1, 0), vec3(0, -1, 0), sat(destr)));\n\n\t\tt1 = .2*fract(seed);\n\n\t\tfor( int i = 0; i < QN; i++ )\n\t\t{\n\t\t\tpos1 = ro1+rd1*t1;\n\t\t\tm1 = map(pos1);\n\t\t\tt1+=QNs*m1.x;\n\n\t\t\tif( m1.x<.005 )\n\t\t\t{\n\t\t\t\tif( m1.z<0. )\n\t\t\t\t\tscol+= vec3(1.+m1.z, 1., 1.-m1.z)*step(1., m1.y)*float(QN-i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos2=pos1+mix(lpos3, hashHs(lpos3, seed), .04)*t2;\n\t\t\tm2 = map(pos2);\n\t\t\tt2+=m2.x;\n\n\t\t\tscol +=\n\t\t\t\tmax(0., m1.z) +\n\t\t\t\tvec3(1.+m1.z, 1., 1.-m1.z)*max(0., m1.y-1.) +\n\t\t\t\t(.5+5.*m1.x*noise(7.*pos1+vec3(iTime)))*max(0., m2.y-1.)*(1.-cb(12));\n\t\t}\n\t\tscol *= QNq;\n\n\t\tnor1 = normalize(m1.x-vec3(map(pos1 - e.yxx).x, map(pos1 - e.xyx).x, map(pos1 - e.xxy).x));\n\n\t\tt2=1.;\n\t\tfor( int i = 0; i < QD; i++ )\n\t\t{\n\t\t\tpos2 = pos1 + mix(reflect(rd1, nor1), hashHs(nor1, seed), sat(m1.y))*t2;\n\t\t\tm2 = map(pos2);\n\t\t\tt2+=QDs*m2.x;\n\n\t\t\tscol += vec3(1.+m2.z, 1., 1.-m2.z)*max(0., m2.y-1.)*QDq;\n\n\t\t}\n\t\tscol=clamp(scol, 0., 1.)\n\t\t\t*sat(cb(14)+15.*sprog)\n\t\t\t*sat(cb(13)+5.-5.*sprog)\n\t\t\t-float(iA.y==128)\n\t\t\t;\n\n\t\tfragColor = mix(scol.xyzz, texture(iChannel0, uv), pow(.0001, iTimeDelta));\n\t}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 19489,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/lesnik-altair/there-and-before"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n// Scene control:\n//\n// $0003\tBA\t1..0\t- camera distance 0..3\n// $000C\tDC\t3..2\t- scenery \t00:forest\t\t01:city\n//\t\t\t\t\t\t\t\t\t10:terrain\t\t11:landscape\n//\t \t\t\t\t\t\t\t\t-0:circle\t\t-1:triangle\n//\n// $0010\t E\t 4\t\t- 0:glowing\t\t1:solid\n// $0020\t F\t 5\t\t- large voronoi range / end phase of city destruction\n// $0040\t G\t 6\t\t- city destruction\n// $0080\t H\t 7\t\t- black sphere (only flag H = black screen)\n// $0100\t I\t 8\t\t- camera angle\n// $0200\t J\t 9\t\t- voronoi destruction\n// $0400\t K\t10\t\t- camera distance + 0.5\n// $0800\t L  11\t\t- water (with C=0 D=1)\n// $1000\t M  12\t\t- darkness\n// $2000\t N\t13\t\t- sharp OUT transition\n// $4000\t O\t14\t\t- sharp IN transition\n// $8000\t P\t15\t\t- shape particles\n//\n//\n\n\nconst ivec3 SCENES[] = ivec3[](\n#define SCENE(n,d,b)\tivec3((d),(b),(n))\n\n\t//intro\n\tSCENE(2, 16, 0x050A | 0x0000),\n\tSCENE(3, 16, 0x040B | 0x0000),\n\n\t//PART 1 - forest+rocks\n\tSCENE(4, 12, 0x0013 | 0x4000),\n\tSCENE(5, 11, 0x0051 | 0x2000),\n\tSCENE(6, 1, 0x0410 | 0x6000),\n\tSCENE(7, 8, 0x0010 | 0x6000),\n\tSCENE(8, 12, 0x0110 | 0x4000),\n\tSCENE(9, 12, 0x001F | 0x0000),\n\tSCENE(10, 12, 0x001C | 0x6000),\n\n\t//the ball!\n\tSCENE(11, 8, 0x0080 | 0x0000), //d\n\tSCENE(13, 20, 0x0418 | 0x2000),\n\n\t//PART 2 - city\n\tSCENE(14, 16, 0x0407 | 0x4000),\n\tSCENE(15, 16, 0x0014 | 0x0000),\n\tSCENE(16, 20, 0x0124 | 0x6000),\n\tSCENE(17, 11, 0x0044 | 0x6000),\n\n\t//the ball!\n\tSCENE(18, 13, 0x0080 | 0x0000), //d        \n\tSCENE(20, 20, 0x0818 | 0x4000),\n\n\t//PART 3 - destruction\n\tSCENE(80, 16, 0x0041 | 0x2000),\n\tSCENE(21, 16, 0x0200 | 0x6000),\n\tSCENE(33, 16, 0x0074 | 0x0000),\n\tSCENE(22, 16, 0x040c | 0x7000),\n\tSCENE(24, 19, 0x063c | 0x3000),\n\n\tSCENE(26, 7, 0x0080 | 0x0000), //d\n\n\t\t\t\t\t\t\t\t   //outtro - water\n\tSCENE(28, 12, 0x1908 | 0x0000),\n\tSCENE(27, 16, 0x0808 | 0x1000),\n\tSCENE(97, 10, 0x0C08 | 0xB000),\n\n\tSCENE(96, 8, 0x0080 | 0x0000), //d\n\n\t\t\t\t\t\t\t\t   //the ball! \n//\tSCENE(30, 12, 0x0018 | 0x4000),\n//\tSCENE(31, 16, 0x0098 | 0x0000),\n\tSCENE(32, 24, 0x0098 | 0x6000),\n\tSCENE(0, 255, 0x0080 | 0x0000) //d\t\n#undef SCENE\n\t);\n\n\n\n// ================================ Helper functions ================================\n\n\nfloat sat(float x)\n{\n\treturn clamp(x, 0., 1.);\n}\n\n\n// ================================ Noises ================================\n\n// 3D noise - method by iq/shane\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n\tp-=ip;\n\tvec3 s=vec3(7, 157, 113);\n\tvec4 h=vec4(0, s.yz, s.y+s.z)+dot(ip, s);\n\tp=p*p*(3.-2.*p);\n\th=mix(fract(43758.5*sin(h)), fract(43758.5*sin(h+s.x)), p.x);\n\th.xy=mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n\n// ================================ Voronoi ================================\n\nvec2 vcore(vec2 m, vec2 p, vec2 s)\n{\n\tvec2 c = floor(2.5*p+s);\t\t// 1./.4   r\n\tc += fract(43758.5*sin(c+17.*c.yx));\n\n\tfloat v = length(.4*c-p);\t// r\n\treturn v<m.x ? vec2(v, m.x) : v<m.y ? vec2(m.x, v) : m;\n}\n\n\n\n// ================================ Patterns ================================\n\n\nfloat lattice(vec3 p)\n{\n\tp=abs(p);\n\tp=max(p, p.yzx);\n\tp=min(p, p.yzx);\n\tp=min(p, p.yzx);\n\treturn p.x;\n}\n\n\n\n// ================================ SDF merge functions ================================\n\n\nvoid dmin(inout vec3 d, float x, float y, float z)\n{\n\tif( x < d.x ) d = vec3(x, y, z);\n}\n\n\n\n// ================================ Domain operations ================================\n\n\n// rotation\nvoid pR(inout vec2 p, float a)\n{\n\ta *= 6.283;\n\tp = cos(a)*p+sin(a)*vec2(p.y, -p.x);\n}\n\n\n// 3D repetition\nvec3 rep(vec3 p, float r)\n{\n\treturn (fract(p/r-.5)-.5)*r;\n}\n\n// diffuse reflection hash - method by fizzer\nvec3 hashHs(vec3 n, inout float seed)\n{\n\tvec2 uv = (seed=32.+seed*fract(seed))+vec2(78.233, 10.873);\n\tuv = fract(.1031*uv);\n\tuv *= 19.19+uv;\n\tuv = fract(2.*uv*uv);\n\n\tfloat u = 2.*uv.x-1.;\n\n\tvec3 v = vec3(sqrt(1.-u*u), 0., u);\n\tpR(v.xy, uv.y);\n\treturn normalize(n+v);\n}\n\n\n// ================================ Complex SDFs ================================\n\nfloat vines(vec3 p, float s)\n{\n\tp.y=abs(p.y);\n\tpR(p.xz, .1*p.y); p=abs(p); p.xz -= .06*s;\n\tpR(p.xz, -.16*p.y); p=abs(p); p.xz -= .05*s;\n\tpR(p.xz, .4*p.y);\n\treturn length(abs(p.xz) - .04*(s*.5+.5));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}