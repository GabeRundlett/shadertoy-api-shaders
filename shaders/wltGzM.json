{
    "Shader": {
        "info": {
            "date": "1575961397",
            "description": "Motion blur on simple scene. Its pretty slow which makes me think I need to improve how I do this. Fake shinyness ",
            "flags": 0,
            "hasliked": 0,
            "id": "wltGzM",
            "likes": 4,
            "name": "Speedyballz",
            "published": 3,
            "tags": [
                "blur",
                "motionblur"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "// Plento\nvec2 R;\n\nfloat trace(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0., g = 0.;   \n    vec3 p = vec3(0);\n    \n    for(int i = 0; i < 38; i++){\n        p = (ro+rd*t);\n        p = mod(p, b)-.5*b;\n    \td = length(p) - .23; \n        \n        if(abs(d) < .01 || t > 25.){\n            break;\n        }\n        t += d * .9;\n    }\n    \n    return t;\n}\nvec3 color(vec3 ro, vec3 rd, float t){\n    vec3 g = mod(ro, b)-.5*b;\n    vec3 objcol = hash33(floor(ro*.5 - .25 ))*.35 - .05;\n    vec3 col = objcol + vec3(.7, .6, .6)*exp(-length(g.xy-vec2(.05, .1))*40.)*40.;\n    col = mix(col, vec3(0), 1. - exp( -.005*t*t*t));\n    col = 1. - exp( -col );\n    \n\treturn col;   \n}\n\nvec3 scene(vec2 uv, float dt){\n    float time = (iTime+dt)*3.;\n    \n    vec3 rd = normalize(vec3(uv, 1.0 - dot(uv, uv) * -.8));\n   \n    vec3 ro = vec3(0., time*2.0, time*4.);\n    rd.yx*=rot(-.25);\n   \n    float t = trace(rd, ro);\n    ro += rd*t;\n    \n    return color(ro, rd, t);\n}\n\n\nvec3 blur(vec2 uv){  \n    vec3 col = vec3(0);\n    for(float i = 0.; i < 4.; i++){\n    \tcol += scene(uv, (i*.0175) + (hash12(uv*999.)*.015) );    \n    }\n    col /= 3.;\n    return col;\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n   \n    vec3 col = blur(uv);\n    //vec3 col = scene(uv, 0.); // without motion blur\n    \n    f = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n#define b vec3(2)\n\nvec3 hash33(vec3 p3){\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}