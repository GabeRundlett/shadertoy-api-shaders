{
    "Shader": {
        "info": {
            "date": "1697708072",
            "description": "first project\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cdtfDX",
            "likes": 4,
            "name": "Kaleidoscope on crack",
            "published": 3,
            "tags": [
                "2d",
                "designs"
            ],
            "usePreview": 0,
            "username": "mashedpotato",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "vec2 rotate(vec2 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    mat2 rotationMatrix = mat2(c, -s, s, c);\n    return rotationMatrix * p;\n}\n\nvec3 palette(float t) {\n    // Create time-varying coefficients for a, b, c, and d\n    vec3 a = vec3(0.488 * cos(t), -0.212 * sin(0.5*t), 0.528 * cos(2.0 * t));\n    vec3 b = vec3(0.298 * sin(0.5 * t), 0.738 * cos(t), -0.112 * sin(t));\n    vec3 c = vec3(-1.942 * cos(1.5 * t), -2.312 * sin(t), -3.142 * cos(0.3 * t));\n    vec3 d = vec3(1.098 * sin(0.7 * t), -1.982 * cos(t), 0.667 * sin(2.0 * t));\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n\n    // Apply a rotation to uv based on time (iTime)\n    float rotationAngle = 0.1*iTime; // You can adjust the rotation speed as needed\n    uv = rotate(uv, rotationAngle);\n\n    vec3 finalcolor = vec3(0.0);\n\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = uv *(2.2+ 1.4*cos(0.1*iTime));\n        uv = fract(uv);\n        uv = uv - 0.5;\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + 0.4 * i + 0.4*iTime );\n\n        d = sin(8.0 * d + iTime) / 8.0;\n        d = abs(d);\n\n        //d = pow(smoothstep(0.0, 0.1, d),1.8);\n        d = pow(0.01 / d, 1.8);\n        //d = pow(5.0*exp(-d), 1.8);\n\n        finalcolor += col * d;\n    }\n\n    fragColor = vec4(finalcolor, 1.0);\n}\n  \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}