{
    "Shader": {
        "info": {
            "date": "1655997619",
            "description": "Pixelates and maps colors for an image.\nTweak the PIXELATION_FACTOR constant to scale the pixelation.\nClick and drag up/down in the render window to tweak the brightness for color mapping.\n",
            "flags": 2,
            "hasliked": 0,
            "id": "ss3Bz8",
            "likes": 4,
            "name": "Pixelated Image w/ Color Lookup",
            "published": 3,
            "tags": [
                "pixelation",
                "pixelated"
            ],
            "usePreview": 0,
            "username": "Xorberax",
            "viewed": 522
        },
        "renderpass": [
            {
                "code": "const float PIXELATION_FACTOR = 4.0;\n\nvec2 getPixelatedSampleCoord(vec2 fragCoord)\n{\n    return fragCoord - mod(fragCoord, PIXELATION_FACTOR);\n}\n\nvec4 getMappedColor(vec4 color)\n{\n    float luma = luma(color) + iMouse.y / iResolution.y;\n    if (luma > 0.95)\n    {\n        return vec4(0.75, 0.8, 0.9, 1.0);\n    }\n    else if (luma > 0.93)\n    {\n        return vec4(0.7, 0.5, 0.2, 1.0);\n    }\n    else if (luma > 0.88)\n    {\n        return vec4(0.6, 0.5, 0.3, 1.0);\n    }\n    else if (luma > 0.8)\n    {\n        return vec4(0.5, 0.25, 0.25, 1.0);\n    }\n    else if (luma > 0.7)\n    {\n        return vec4(0.25, 0.15, 0.25, 1.0);\n    }\n    else if (luma > 0.6)\n    {\n        return vec4(0.23, 0.15, 0.25, 1.0);\n    }\n    else if (luma > 0.3)\n    {\n        return vec4(0.2, 0.1, 0.15, 1.0);\n    }\n    else if (luma > 0.25)\n    {\n        return vec4(0.15, 0.1, 0.05, 1.0);\n    }\n    else if (luma > 0.2)\n    {\n        return vec4(0.0, 0.0, 0.1, 1.0);\n    }\n    else if (luma > 0.1)\n    {\n        return vec4(0.05, 0.0, 0.05, 1.0);\n    }\n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sampleCoord = getPixelatedSampleCoord(fragCoord);\n    vec2 uv = sampleCoord / iResolution.xy;\n    fragColor = getMappedColor(texture(iChannel0, uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Credit: https://github.com/hughsk/glsl-luma/blob/master/index.glsl\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}