{
    "Shader": {
        "info": {
            "date": "1698098929",
            "description": "?",
            "flags": 112,
            "hasliked": 0,
            "id": "csdyWM",
            "likes": 1,
            "name": "thoth",
            "published": 3,
            "tags": [
                "3drenderer"
            ],
            "usePreview": 0,
            "username": "dqvid",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "#define RAM_SIZE 128.0\n\nfloat fade(float value, float start, float end)\n{\n    return (clamp(value,start,end)-start)/(end-start);\n}\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\nvec3 Xrm(vec3 v, float t) {\n    return v*mat3(\n        1, 0, 0,\n        0, cos(t), sin(t),\n        0, sin(t), cos(t));\n}\n    \nvec3 Yrm(vec3 v, float t) {\n    return v*mat3(\n        cos(t), 0, sin(t),\n        0, 1, 0,\n        sin(t), 0, cos(t)\n    );\n}\n\nvec3 Zrm(vec3 v, float t) {\n    return v*mat3(\n        cos(t), sin(t), 0,\n        -sin(t), cos(t), 0,\n        0, 0, 1);\n}\n\nfloat remap01(float a, float b, float c) {\n    return (c-a)/(b-a);\n}\n\nvec4 rayTriangleIntersection(vec3 ro, vec3 rd, mat3 triangle) {\n    vec3 a = triangle[0];\n    vec3 b = triangle[1];\n    vec3 c = triangle[2];\n\n    \n    vec3 ab = b-a;\n    vec3 ac = c-a;\n    vec3 vn = cross(ab, ac);\n    \n    float vn_dot_rd = dot(vn, rd);\n    float vn_dot_ps = dot(vn, a-ro);\n    float t = vn_dot_ps / vn_dot_rd;\n    \n    vec3 vip = ro+rd*t;\n\n    vec3 bc = c-b;\n    vec3 ca = a-c;\n    \n    vec3 a_vip = vip-a;\n    vec3 b_vip = vip-b;\n    vec3 c_vip = vip-c;\n    \n    vec3 atest = cross(ab, a_vip);\n    vec3 btest = cross(bc, b_vip);\n    vec3 ctest = cross(ca, c_vip);\n    \n    return vec4(dot(atest,vn), dot(btest,vn), dot(ctest,vn), t);\n}\n\nint drawQuadrilateral(vec3 ro, vec3 rd, mat4x3 points) {\n    int t;\n    vec4 inter = rayTriangleIntersection(ro, rd, mat3(\n        points[0],\n        points[1],\n        points[2]\n    ));\n    if (inter.x > 0. && inter.y > 0. && inter.z > 0.) t = 1;\n    inter = rayTriangleIntersection(ro, rd, mat3(\n        points[0],\n        points[3],\n        points[2]\n    ));\n    if (inter.x > 0. && inter.y > 0. && inter.z > 0.) t = 1;\n    inter = rayTriangleIntersection(ro, rd, mat3(\n        points[0],\n        points[1],\n        points[3]\n    ));\n    if (inter.x > 0. && inter.y > 0. && inter.z > 0.) t = 1;\n    inter = rayTriangleIntersection(ro, rd, mat3(\n        points[1],\n        points[3],\n        points[2]\n    ));\n    if (inter.x > 0. && inter.y > 0. && inter.z > 0.) t = 1;\n    return t;\n}\n\nint drawRect(vec3 ro, vec3 rd, vec3 pos, vec2 size) {\n    return drawQuadrilateral(ro, rd, mat4x3(\n        vec3(pos),\n        vec3(pos.xy, pos.z+size.y),\n        vec3(pos.x, pos.yz+size),\n        vec3(pos.x, pos.y+size.x, pos.z)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float slice = iResolution.x/RAM_SIZE;\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    // Camera\n    vec3 ro = vec3(-1, uv);\n    vec3 rd = normalize(vec3(1, 0, 0));\n    \n    vec3 accent = vec3(abs(sin(iTime/40.))*.7,abs(sin(iTime/20.))*.7,abs(sin(iTime/60.))*.7);\n    col = accent;\n    \n    vec3 pos = vec3(0,-.7725,-.375);\n    vec2 size = vec2(.747,.75);\n    if (drawRect(ro, rd, pos, size) > 0) col = vec3(.15)+accent;\n    \n    pos = vec3(0,.025,-.375);\n    if (drawRect(ro, rd, pos, size) > 0) col = vec3(.15)+accent;\n\n    pos = vec3(0,-.7225,-.075);\n    size = vec2(.65,.15);\n    if (drawRect(ro, rd, pos, size) > 0) col = accent;\n    \n    pos = vec3(0,.025,-.075);\n    size = vec2(.3485,.15);\n    if (drawRect(ro, rd, pos, size) > 0) col = accent;\n    \n    pos = vec3(0,.425,-.075);\n    size = vec2(.3485,.45);\n    if (drawRect(ro, rd, pos, size) > 0) col = accent;\n\n    if (abs(uv.y) > .42555 || abs(uv.x/iResolution.x*iResolution.y*2.) > .92555) col = vec3(1)-accent;\n\n    // Player\n    vec4 sphere = texture(iChannel0, vec2(0));\n\n    \n    float t = dot(sphere.xyz-ro, rd);\n    vec3 r = ro+rd*t;\n    \n    float y = length(sphere.xyz - r);\n    \n    if (y < sphere.w) {\n        col = vec3(1);\n    }\n    \n    // Sphere enemy 1\n    sphere = texture(iChannel0, vec2(2./RAM_SIZE, 0));\n    \n    t = dot(sphere.xyz-ro, rd);\n    r = ro+rd*t;\n    \n    y = length(sphere.xyz - r);\n    \n    if (y < sphere.w) {\n        col = vec3(rand(uv+iTime*.00000006)*2.-1.97)*30.;\n    }\n    \n    // Vertex 1\n    ro = vec3(-1, uv);\n    rd = normalize(vec3(1, 0, 0));\n    \n    vec3 a = vec3(0,-.0625,.0625);\n    vec3 b = vec3(0,-.0625,-.0625);\n    vec3 c = vec3(0,0,-.125);\n    vec3 d = vec3(0,0,0);\n    \n    mat4x3 quad = mat4x3(a,b,c,d);\n\n    int inter = drawQuadrilateral(ro, rd, quad);\n        // if (inter > 0) col = vec3(1.5)-accent*2.;\n    \n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // if (length(data) > 0.) col = vec3(data);\n    \n    fragColor = vec4(col, 1.0);\n}\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 35770,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/dqvid-437164529/impulseandtrail-01-thoth-ost/s-EnoFfUpxw4n?si=e922f1eabe4146dabdeb02263c068617&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define RAM_SIZE 128.\n#define G 6.6743*pow(10., -8.)\n\nint up = 87;\nint down = 83;\nint left = 65;\nint right = 68;\n\nfloat fade(float value, float start, float end)\n{\n    return (clamp(value,start,end)-start)/(end-start);\n}\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\nvec4 sphereEnemy(vec4 col, vec2 dataPos) {\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.x;\n    vec4 col = texture(iChannel1, uv);\n    float aspect = iResolution.x/iResolution.y;\n    \n    vec2 fieldSize = iResolution.xy*.5 - vec2(iResolution.x*.1025*.5, iResolution.y*.2*.5);\n    fieldSize /= iResolution.y;\n    \n    float slice = iResolution.x/RAM_SIZE;\n    \n    if (fragCoord.x < slice) {\n        if (iFrame == 0) col = vec4(vec3(0),.025);\n        vec2 velocity = vec2(0);\n\n        velocity.x = texelFetch( iChannel0, ivec2(right, 0), 0 ).x - texelFetch( iChannel0, ivec2(left, 0), 0 ).x;\n        velocity.y = texelFetch( iChannel0, ivec2(up, 0), 0 ).x - texelFetch( iChannel0, ivec2(down, 0), 0 ).x;\n\n        if (length(velocity) > .0) col.yz += normalize(velocity)*iResolution.x/(1./.008)/iResolution.y;\n\n        col.y = clamp(col.y, -fieldSize.x, fieldSize.x);\n        \n        col.z = clamp(col.z, -fieldSize.y, fieldSize.y);\n    }\n    \n    if (!(fragCoord.x < 3.*slice) && fragCoord.x < 4.*slice) {\n        if (iFrame == 0) col = vec4(vec3(0),0);\n        vec4 player = texture(iChannel1, vec2(0, 0));\n        vec4 enemy = texture(iChannel1, vec2(2./RAM_SIZE, 0));\n        \n        vec3 r = player.xyz - enemy.xyz;\n        \n        vec3 vel = normalize(r)/pow(length(r),2.)*G*500.;\n        \n        if (length(r-vel) > player.w+enemy.w) col.xyz += vel;\n    }\n    \n    if (!(fragCoord.x < 1.*slice) && fragCoord.x < 2.*slice) {\n        if (iFrame == 0) col = vec4(0,-.4,0,.075)*4.;\n        vec4 player = texture(iChannel1, vec2(0, 0));\n        \n        vec3 r = player.xyz - col.xyz;\n        \n        vec3 vel = texture(iChannel1, vec2(3./RAM_SIZE, 0)).xyz;\n        \n        col.xyz += vel;\n    }\n    \n    vec4 player = texture(iChannel1, vec2(0, 0));\n    vec4 enemy = texture(iChannel1, vec2(2./RAM_SIZE, 0));\n    \n    vec3 vel = texture(iChannel1, vec2(3./RAM_SIZE, 0)).xyz;\n    \n    vec3 r = player.xyz-enemy.xyz;\n    \n    if (length(r) < enemy.w+player.w) {\n        if (fragCoord.x < slice) col.xyz = vec3(0);\n        if (!(fragCoord.x < 1.*slice) && fragCoord.x < 2.*slice) col.yz = vec2(rand(iTime)-.5, rand(iTime+1.)-.5)*4.+.2;\n        if (!(fragCoord.x < 3.*slice) && fragCoord.x < 4.*slice) col.xyz = vec3(0);\n    }\n    \n    if (abs((enemy.xyz+vel).y) > fieldSize.x-enemy.w/2.) {\n        if (!(fragCoord.x < 1.*slice) && fragCoord.x < 2.*slice) \n            col.xyz -= normalize(vec3(0, enemy.y, 0)) * (abs(enemy.y) - fieldSize.x + enemy.w);\n        if (!(fragCoord.x < 3.*slice) && fragCoord.x < 4.*slice) \n            col.xyz = reflect(col.xyz, normalize(vec3(0, -enemy.y, 0)));\n    }\n    \n    if (abs((enemy.xyz+vel).z) > fieldSize.y-enemy.w/2.) {\n        if (!(fragCoord.x < 1.*slice) && fragCoord.x < 2.*slice) \n            col.xyz -=  normalize(vec3(0, 0, enemy.z)) * (abs(enemy.z) - fieldSize.y + enemy.w);\n        if (!(fragCoord.x < 3.*slice) && fragCoord.x < 4.*slice) \n            col.xyz = reflect(col.xyz, normalize(vec3(0, 0, -enemy.z)));\n    }\n    \n    fragColor = col;\n}\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}