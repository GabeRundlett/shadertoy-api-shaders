{
    "Shader": {
        "info": {
            "date": "1667096391",
            "description": "3D fractal structures generated using [url=https://en.wikipedia.org/wiki/Triangle_wave]triangle waves[/url].\nUse the mouse to look around.",
            "flags": 8,
            "hasliked": 0,
            "id": "ddS3Rz",
            "likes": 9,
            "name": "Tangled fractal vines (3D)",
            "published": 3,
            "tags": [
                "3d",
                "fractal",
                "tree",
                "vine"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "#define t iTime*4.\n#define r iResolution\n#define iterations 250 //number of raymarching steps\n#define EPSILON .001\n#define MAX_DIST 40.0\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n\n\n//Based on https://www.shadertoy.com/view/3tXyRN\n\nvec3 spaghetti(vec3 uv)\n{\n    vec3 col = vec3(0.);\n    for(int k = 0; k < 6; k++){ \n        vec3 offset =\n            //vec3(uv.z,uv.x-uv.y,uv.y)\n            vec3(uv.z,uv.x-.5,uv.y)\n            //abs(-.5+fract(vec3(uv.z,uv.x+.5,uv.y+.5)))\n            //vec3(uv.z-uv.x,uv.x-.4,uv.y+.3)\n            //vec3(uv.z-uv.x/2.,uv.x-.5-uv.y/2.,uv.y-.5-uv.z/2.)\n            //vec3(uv.z,uv.x-uv.y,uv.y)\n            //vec3(uv.z-uv.x,uv.x-.45,uv.y+.45)\n            //vec3(uv.z-uv.x/2.,uv.x-uv.y/2.,uv.y-uv.z/2.)\n            //vec3(uv.z-uv.x/2.,uv.x-.5,uv.y-uv.z/2.)\n        ;\n        uv =\n            abs(fract(uv.yzx+offset)-.5)\n        ;\n        col = vec3(col.yz,uv.x-uv.y);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 o, in vec2 U )\n{\n    o = vec4(0.0);\n    vec3 d=vec3(U/r.xy-.5,.5),p0=vec3(0,6,t),p=p0;\n    if (length(iMouse.xy) > 40.0) {\n        d.yz *= rot(-3.14*0.5+iMouse.y/iResolution.y*3.14);\n        d.xz *= rot(-3.14+iMouse.x/iResolution.x*3.14*2.0);\n    }\n    float l1;\n    vec3 col = vec3(0.);\n    for(int i=0;i<iterations;i++)\n    {\n        col = spaghetti(p/16.);\n        float sd1 = col.z-.1;\n        if(-sd1 < EPSILON*(length(l1)+1.0) || l1 > MAX_DIST){ break; }\n        p+=d*(-sd1);\n        l1 = distance(p,p0);\n    }\n    o+=(vec4(col/2.,0)+l1/100.0)*3.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float x, float y){\n    //x /= 1. + mod(floor(x/2.),2.);\n    return mod(floor(floor(x)+floor((x)/4.)/4.),y);\n}\n\n//#define fmod(x,y) mod(floor(x),y)\n#define fpow(x,y) pow(y,fmod(x,y))\n//#define fmod0(x,y) mod(floor(x)+floor((x)/2.)+floor((x)/4.),y)\n\nvec2 mainSound(int samp, float t){\n  //t += floor(t*4.)/4.;\n  //t += fmod(t*4.,4.)/4.;\n  float s1 =\n      4.,\n  m1 =\n      //fmod(t*s1,s1),\n      fmod((t+floor(t/2.+fpow(t,5.+fpow(t*8.,2.))+s1)+floor(t*2.)),s1),\n      //fmod(t*s1-floor(t),s1),\n  z1 =\n      (1.+fmod(m1+fpow(t,2.),2.))\n  ;\n  t /=\n      1.+fmod((t+floor(t*s1/2.+s1+fpow(t*2.,2.))),2.)\n  ;\n  float m3 =\n      fmod((t+floor(t/2.+s1+fpow(t*2.,2.))),s1)+m1\n  ;\n  t *=\n      1.+fmod(((t*s1+m3)+floor(t*s1/2.+s1)),2.)\n  ;\n\n  float a=\n      //log((.1+sqrt(fract(t*s1)/2.)))/8.\n      (1.-sqrt(fract(t*s1)/2.))/8.\n      //((1.-sqrt(fract(t*s1))))*.2\n  ,\n\n  nb = pow(2.,(m3+z1)/5.+7.);\n\n  return abs(.5-vec2(fract(t*nb*.998*2.)\n   ,fract(t*nb)))*a;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}