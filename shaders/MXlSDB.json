{
    "Shader": {
        "info": {
            "date": "1709942093",
            "description": "my first sdf shader",
            "flags": 0,
            "hasliked": 0,
            "id": "MXlSDB",
            "likes": 2,
            "name": "redaphid-sdf-shape-morphs",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "redaphid",
            "viewed": 122
        },
        "renderpass": [
            {
                "code": "struct ShapeParams {\n    vec3 location;\n    float scale;\n    float sides;\n    float radius;\n    vec3 materialColor;\n    float rotation; // Rotation speed\n};\n\n\nfloat tetrahedronSDF(vec3 p) {\n    vec3 q = abs(p);\n    return max(q.x + q.y + q.z - 1.7, max(q.x, max(q.y, q.z)) - 1.0);\n}\n\nvec3 rotateZ(vec3 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n}\n\nfloat sceneSDF(vec3 pos, ShapeParams params) {\n    // Apply rotation\n    pos = rotateZ(pos - params.location, params.rotation * iTime) + params.location;\n    \n    float sphereDist = length(pos - params.location) - params.radius;\n    float tetraDist = tetrahedronSDF(pos - params.location);\n    float mixFactor = smoothstep(1.0, 4.0, clamp(params.sides, 1.0, 4.0));\n    return mix(sphereDist, tetraDist, mixFactor) * params.scale;\n}\n\n\nvec3 estimateNormal(vec3 p, ShapeParams params) {\n    float eps = 0.01; \n    vec3 n;\n    n.x = sceneSDF(vec3(p.x + eps, p.y, p.z), params) - sceneSDF(vec3(p.x - eps, p.y, p.z), params);\n    n.y = sceneSDF(vec3(p.x, p.y + eps, p.z), params) - sceneSDF(vec3(p.x, p.y - eps, p.z), params);\n    n.z = sceneSDF(vec3(p.x, p.y, p.z + eps), params) - sceneSDF(vec3(p.x, p.y, p.z - eps), params);\n    return normalize(n);\n}\n\nfloat marchRay(vec3 ro, vec3 rd, ShapeParams params) {\n    float t = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 pos = ro + rd * t;\n        float dist = sceneSDF(pos, params) - 0.01;\n        if (dist < 0.01) return t;\n        t += dist;\n        if (t > 100.0) break;\n    }\n    return -1.0;\n}\n\nvec3 calculatePhongShading(vec3 normal, vec3 lightDir, vec3 viewDir, vec3 specularColor) {\n    float diff = max(dot(normal, lightDir), 0.0);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n    vec3 specular = spec * specularColor;\n    return diff + specular;\n}\n\nvoid drawShape(ShapeParams params, vec2 fragCoord, out vec4 fragColor) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 camPos = vec3(0.0, 0.0, 2.0);\n    vec3 rayDir = normalize(vec3(uv, -1.0));\n\n    float distance = marchRay(camPos, rayDir, params);\n    \n    if (distance > 0.0) {\n        vec3 hitPoint = camPos + distance * rayDir;\n        vec3 normal = estimateNormal(hitPoint, params);\n        vec3 lightPos = vec3(0.0, 5.0, 5.0);\n        vec3 lightDir = normalize(lightPos - hitPoint);\n        vec3 viewDir = normalize(camPos - hitPoint);\n        \n        vec3 color = calculatePhongShading(normal, lightDir, viewDir, params.materialColor);\n        fragColor = vec4(color * params.materialColor, 1.0); // Apply material color\n    } else {\n        fragColor = vec4(vec3(0.0), 1.0); // Background color\n    }\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime;\n\n    // Define a central point for the shapes to orbit around\n    vec3 center = vec3(0.0, 0.0, 0.0);\n    \n    // Parameters for three different shapes, making them orbit around the center\n    ShapeParams params1;\n    params1.scale = 0.1; // Make smaller\n    params1.sides = abs(sin(time) * 5.0) + 1.0;\n    params1.radius = 0.2; // Adjust for smaller scale\n    params1.materialColor = vec3(sin(time * 0.5) * 0.5 + 0.5, sin(time * 0.7) * 0.5 + 0.5, sin(time * 0.9) * 0.5 + 0.5);\n    // Orbiting effect\n    params1.location = center + vec3(cos(time) * 0.5, sin(time) * 0.5, 0.0);\n    \n    ShapeParams params2;\n    params2.scale = 0.1; // Make smaller\n    params2.sides = abs(cos(time) * 5.0) + 1.0;\n    params2.radius = 0.2; // Adjust for smaller scale\n    params2.materialColor = vec3(cos(time * 0.3) * 0.5 + 0.5, cos(time * 0.5) * 0.5 + 0.5, cos(time * 0.7) * 0.5 + 0.5);\n    // Orbiting effect with a different phase\n    params2.location = center + vec3(cos(time + 2.0) * 0.7, sin(time + 2.0) * 0.7, 0.0);\n    \n    ShapeParams params3;\n    params3.scale = 0.1; // Make smaller\n    params3.sides = abs(sin(time * 1.5) * 4.0) + 2.0; // Faster change\n    params3.radius = 0.2; // Adjust for smaller scale\n    params3.materialColor = vec3(sin(time * 0.2) * 0.5 + 0.5, sin(time * 0.4) * 0.5 + 0.5, sin(time * 0.6) * 0.5 + 0.5);\n    // Orbiting effect with another different phase\n    params3.location = center + vec3(cos(time - 2.0) * 0.6, sin(time - 2.0) * 0.6, 0.0);\n    \n    // Initialize a black background\n    vec4 accumulatedColor = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    // Temporary fragment color for individual shapes\n    vec4 tempFragColor;\n    \n    // Draw three shapes and accumulate their colors\n    drawShape(params1, fragCoord, tempFragColor);\n    accumulatedColor += tempFragColor;\n    \n    drawShape(params2, fragCoord, tempFragColor);\n    accumulatedColor += tempFragColor;\n    \n    drawShape(params3, fragCoord, tempFragColor);\n    accumulatedColor += tempFragColor;\n    \n    // Normalize the accumulated color to avoid exceeding 1.0 in any channel\n    fragColor = min(accumulatedColor, vec4(1.0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}