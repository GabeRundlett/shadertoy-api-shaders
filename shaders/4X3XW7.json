{
    "Shader": {
        "info": {
            "date": "1719154520",
            "description": "infinite tentacles",
            "flags": 0,
            "hasliked": 0,
            "id": "4X3XW7",
            "likes": 4,
            "name": "infinite tentacles",
            "published": 3,
            "tags": [
                "raymarching",
                "tentacles",
                "infinite"
            ],
            "usePreview": 0,
            "username": "darnok",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n/*vec3 rot3D(vec3 p, vec3 axis, float angle) {\n    return mix(dot(axis, p) * axis, p, cos(angle))\n            + cross(axis, p) * sin(angle);\n}*/\n\n// Function Operator\n/*float opUnion(float d1, float d2) {\n    return min(d1, d2);\n}\n\nfloat opSubtraction(float d1, float d2) {\n    return max(-d1, d2);\n}\n\nfloat opIntersection(float d1, float d2) {\n    return max(d1, d2);\n}*/\n\n// Function Operator Smooth\n/*float opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0 - h);\n}\n\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);\n    return mix(d2, -d1, h) + k*h*(1.0 - h);\n}\n\nfloat opSmoothInteraction(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) + k*h*(1.0 - h);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a - b), 0.0) / k;\n    return min(a, b) - h*h*h*k*(1.0 / 6.0);\n}*/\n\n// Funtion Distance\n/*float sdSphere(vec3 p, float s) {\n    return length(p) - 1.;\n}*/\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n// Distance to the scene\nfloat map(vec3 p, float t) {\n    vec3 q = p; // Input copy\n    \n    q.xy = mod(q.xy, 1.) - 0.5;\n    q.z = mod(q.z, 0.3) - 0.15;\n    q.xy *= rot2D(iTime*1. + t * 4. * sin(iTime * 0.1));\n    \n    float box = sdBox(q, vec3(.1+.0 * sin(t * 2. + iTime * 5.), .1+.0 * sin(t * 2. + iTime*2.), .2));\n\n    // Closest distance to the scene\n    return box;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = vec2(0.);//(iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -3);                     // ray origin\n    vec3 rd = normalize(vec3(uv, 1));             // ray direction\n    vec3 col = vec3(0);                           // final pixel color\n    \n    float t = 0.;                                 // total distance travelled\n    \n    // Vertical camera rotation\n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n    // Horizontal camera rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    // Raymarching\n    int i;\n    vec3 p;\n    for (i = 0; i < 80; i++) {\n        p = ro + rd * t;                     // position along the ray        \n        p.xy *= rot2D(sin(iTime/10.) * pow(log(max(t, 1.)), abs(sin(iTime/10.) * 3.)) / max(1.0, length(p.xy)*3.));\n\n        // Scene modification\n        p.y += sin(t*1.5 + iTime*2.) * 0.15 / max(length(p.xy), 1.);                      // ray distortion      \n        p.xy *= rot2D(iTime*0.2);\n\n        float d = map(p, t);                         // current distance to the scene\n\n        t += d;                                   // \"march\" the ray\n        \n        //col = vec3(i) / 80.;                    // iteration count\n        \n        if (d < .001 || t > 10.) break;          // early stop\n    }\n    \n    // Coloring\n    //col = vec3(t * .05 + float(i) * 0.015); // color based on distance\n    \n    float shadow = 1. - (max(0., min(t, 10.) - 5.) / 5.);\n    float shadowSide = 1. - (max(0., min(length(p.xy), 10.)) );\n    col = shadow * shadowSide * palette( t * .05 + float(i) * (0.02 + 0.01*(sin(iTime * 0.02 + length(p.xy)))) + (iTime * 0.1),\n        /*vec3(0.608, -3.142, 0.218),\n        vec3(0.248, 0.248, 0.138),\n        vec3(-0.552, 3.138, 2.728),\n        vec3(1.975, -0.802, -0.925));*/\n    \n        /*vec3(0.608, -2.222, -0.782),\n        vec3(0.358, 0.808, 0.418),\n        vec3(-0.552, 0.338, 0.218),\n        vec3(1.975, 1.975, -0.925));*/\n        \n        vec3(0.558, 0.168, 0.338),\n        vec3(0.358, 0.808, 0.418),\n        vec3(-0.552, 0.338, 0.218),\n        vec3(1.975, 1.975, -0.925)); // http://dev.thi.ng/gradients/\n        \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}