{
    "Shader": {
        "info": {
            "date": "1695155833",
            "description": "CC0: Tuesday tinkering\nExperimenting with hextiling, beziers and glow\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DsccRS",
            "likes": 47,
            "name": "Tuesday tinkering",
            "published": 3,
            "tags": [
                "glow"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 831
        },
        "renderpass": [
            {
                "code": "// CC0: Tuesday tinkering\n//   Experimenting with hextiling, beziers and glow\n\n\n// Less calming, more flickering\n// #define FLICKER\n\n// Applies mobius transform tinkering\n// #define DISTORT\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define ROT(a)     mat2(cos(a), sin(a), -sin(a), cos(a))\n#define OFF6(n)    (vec2(1.0, 0.0)*ROT(n*TAU/6.))\n\nconst vec2 off6[6] = vec2[6](\n    OFF6(0.)\n  , OFF6(1.)\n  , OFF6(2.)\n  , OFF6(3.)\n  , OFF6(4.)\n  , OFF6(5.)\n  ); \n\nconst vec2 noff6[6] = vec2[6](\n    vec2(-1.0, 0.0)\n  , vec2(-0.5, 0.5)\n  , vec2( 0.5, 0.5)\n  , vec2( 1.0, 0.0)\n  , vec2( 0.5,-0.5)\n  , vec2(-0.5,-0.5)\n  ); \n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r) {\n  p = p.yx;\n  const vec3 k = 0.5*vec3(-sqrt(3.0), 1.0, sqrt(4.0/3.0));\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  co += 1.234;\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nfloat dot2(vec2 p) {\n  return dot(p, p);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat bezier(vec2 pos, vec2 A, vec2 B, vec2 C) {    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\nvec2 coff(float h) {\n  float h0 = h;\n  float h1 = fract(h0*9677.0);\n  float h2 = fract(h0*8677.0);\n  float t = mix(0.5, 1.0, h2*h2)*TIME+1234.5*h0;\n  return mix(0.1, 0.2, h1*h1)*sin(t*vec2(1.0, sqrt(0.5)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\n\nvec2 transform(vec2 p) {\n  p *= 2.0;\n  vec2 sp0 = toSmith(p-0.);\n  vec2 sp1 = toSmith(p+vec2(1.0)*ROT(0.12*TIME));\n  vec2 sp2 = toSmith(p-vec2(1.0)*ROT(0.23*TIME));\n  p = fromSmith(sp0+sp1-sp2);\n  return p;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  float aa = 4.0/RESOLUTION.y;\n  \n  vec2 hp = p;\n#ifdef DISTORT\n  vec2 nhp = transform(hp+aa);\n  hp = transform(hp);\n  float scale = distance(nhp, hp);\n#else\n  hp *= 3.0;\n#endif\n\n  const float ga = 100.0;\n  hp += ga*sin(vec2(1.0, sqrt(0.5))*TAU*(TIME-300.0)/(8.0*ga));\n  vec2 hn = hextile(hp);\n  \n  float h0 = hash(hn);\n  vec2 p0 = coff(h0);\n  \n  vec3 bcol = 0.5*(1.0+cos(vec3(0.0, 1.0, 2.0) + dot(p, p)-0.5*TIME)); \n  vec3 col = vec3(0.0);\n  \n#ifdef DISTORT\n  float mx = 0.0005+0.01*scale;\n#else\n  const float mx = 0.0005;\n#endif\n\n  for (int i = 0; i < 6; ++i) {\n    float h1 = hash(hn+noff6[i]);\n    vec2 p1 = off6[i]+coff(h1);\n    \n#if defined(FLICKER)    \n    float fade = (smoothstep(1.05, 0.9, dot2(p0-p1))) > hash(floor(TIME*30.0)+h2) ? 1.0 : 0.0;\n#else\n    float fade = smoothstep(1.05, 0.85, distance(p0, p1)); \n#endif\n    if (fade < 0.025) continue;\n    \n    float h2 = h0+h1;\n    vec2 p2 = 0.5*(p1+p0)+coff(h2);\n    \n    float dd = bezier(hp, p0, p2, p1);\n    float gd = abs(dd);\n    gd *= sqrt(gd);\n    gd = max(gd, mx);\n    col += fade*0.002*bcol/(gd);\n  }\n\n  {  \n    float cd = length(hp-p0);\n    float gd = abs(cd);\n    gd *= (gd);\n    gd = max(gd, mx);\n    col += 0.0025*sqrt(bcol)/(gd);\n  }\n  \n  {\n    float hd = hexagon(hp, 0.485);\n    float gd = abs(hd);\n    gd = max(gd, mx*10.0);\n    col += 0.0005*bcol*bcol/(gd);\n  }\n\n#ifdef DISTORT\n  col += scale*(bcol);\n#endif\n\n  col *= smoothstep(1.75, 0.5, length(pp));\n  col = aces_approx(col);  \n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}