{
    "Shader": {
        "info": {
            "date": "1670550995",
            "description": "Click-and-drag within the middle triangle to map that point to the other triangles (https://stackoverflow.com/a/55550712).\nDoes this work for 3d? Would it then have to be a 4x4 transformation matrix?\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cd2Xzy",
            "likes": 8,
            "name": "triangle-triangle point mapping",
            "published": 3,
            "tags": [
                "sdf",
                "triangle",
                "random",
                "map",
                "matrix",
                "transform"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "const mat3 M0 = mat3(+0.00, (sqrt3 / 3.0) + 0.00, 1, +0.50, -(sqrt3 / 6.0) - 0.00, 1, -0.5, -(sqrt3 / 6.0) + 0.0, 1);\nconst mat3 M1 = mat3(-1.75, (sqrt3 / 3.0) + 0.25, 1, -1.50, -(sqrt3 / 6.0) - 0.25, 1, -1.0, -(sqrt3 / 3.0) + 0.5, 1);\nconst mat3 M2 = mat3(+1.50, (sqrt3 / 3.0) + 0.25, 1, +1.75, -(sqrt3 / 6.0) - 0.25, 1, +1.0, -(sqrt3 / 6.0) + 0.5, 1);\n\n    \nfloat scene(vec2 p, mat3 T0, mat3 T1, mat3 T2) {\n    float d = sdTriangle(p, T0[0].xy, T0[1].xy, T0[2].xy);\n    d = min(d, sdTriangle(p, T1[0].xy, T1[1].xy, T1[2].xy));\n    d = min(d, sdTriangle(p, T2[0].xy, T2[1].xy, T2[2].xy));\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // uv\n\tvec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 q = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    if (iMouse.z <= 0.0) q = vec2(0);\n    //// zoom\n    p *= 2.5;\n    q *= 2.5;\n    \n    // reposition triangles\n    mat3 T0 = mat3(rotmat2(iTime * 0.5)) * M0;\n    mat3 T1 = M1 + mat3(-mod(iTime / 8.0, 0.25), 0, 0, 0, mod(iTime / 8.0, 0.5), 0, 0, -mod(iTime / 8.0, 0.25), 0);\n    mat3 T2 = M2 + mat3(+mod(iTime / 8.0, 0.25), 0, 0, 0, -mod(iTime / 8.0, 0.5), 0, 0, -mod(iTime / 8.0, 0.25), 0);\n    \n    // dist\n    float d = scene(p, T0, T1, T2);\n    \n    // color\n    vec3 rnd = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n    vec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcol *= 1.0 - exp(-24.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(240.0 * d);\n    \n    col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - q) - abs(scene(q, T0, T1, T2))) - 0.0075));\n    vec2 q1 = (T1 * inverse(T0) * vec3(q, 1)).xy;\n    col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - q1) - abs(scene(q1, T0, T1, T2))) - 0.0075));\n    vec2 q2 = (T2 * inverse(T0) * vec3(q, 1)).xy;\n    col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - q2) - abs(scene(q2, T0, T1, T2))) - 0.0075));\n    col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(sdSegment(p, q, q1)) - 0.0075));\n    col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(sdSegment(p, q, q2)) - 0.0075));\n    \n    float aa = 2.0 / iResolution.y;\n    col = max(col, rnd * smoothstep(aa, 0.0, d));\n    \n    // output\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sqrt3 sqrt(3.0)\n\nmat2 rotmat2(float angle) {\n    float c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat sdCircle(vec2 p, float r) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    return length(p) - r;\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 ) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    vec2 e0 = p1 - p0, e1 = p2 - p1, e2 = p0 - p2;\n    vec2 t0 = p  - p0, t1 = p  - p1, t2 = p  - p2;\n    vec2 pq0 = t0 - e0 * clamp(dot(t0, e0)/ dot(e0, e0), 0.0, 1.0);\n    vec2 pq1 = t1 - e1 * clamp(dot(t1, e1)/ dot(e1, e1), 0.0, 1.0);\n    vec2 pq2 = t2 - e2 * clamp(dot(t2, e2)/ dot(e2, e2), 0.0, 1.0);\n    float s = sign(e0.x * e2.y - e0.y * e2.x );\n    vec2 d = min(min(vec2(dot(pq0, pq0), s * (t0.x * e0.y - t0.y * e0.x)),\n                     vec2(dot(pq1, pq1), s * (t1.x * e1.y - t1.y * e1.x))),\n                     vec2(dot(pq2, pq2), s * (t2.x * e2.y - t2.y * e2.x)));\n    return -sqrt(d.x) * sign(d.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}