{
    "Shader": {
        "info": {
            "date": "1602648408",
            "description": "cube",
            "flags": 32,
            "hasliked": 0,
            "id": "wlffzn",
            "likes": 3,
            "name": "The Cube Sponge",
            "published": 3,
            "tags": [
                "cube"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor /= fragColor.w;\n    fragColor *= 1.5;\n    fragColor /= fragColor+1.;\n    fragColor = pow(fragColor, vec4(0.9));\n    fragColor = smoothstep(0.,1.,fragColor);\n    fragColor.rgb = mix(vec3(0,.03,.05),vec3(1,1,1),fragColor.rgb);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int MAX_D=200;\nconst float DELTA=0.01;\nint matId = 0;\n\nfloat hash21(vec2 p){\n\treturn(fract(sin(p.x*22.+p.y*421.)*999.));\n}\n\nvec3 randInSphere(vec2 seed){\n\tvec3 p;   \n     p = sin(iTime)*vec3(hash21(seed+fract(iTime)*22.),hash21(seed+fract(iTime)*43.),\n                     hash21(seed+fract(iTime)*97.));\n    return normalize(p);\n}\n\nmat2 rot(float a){\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat box( vec3 p, vec3 b ) {\n     vec3 d = abs(p) - b;\n     return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cros(vec3 p){\n    return min(box(p.xyy,vec3(1,1,9999)),min(box(p.xxz,vec3(1,9999,1)),box(p.yyz,vec3(9999,1,1))));\n}\n\nfloat sponge(vec3 p, float size){\n    float res = box(p,vec3(size));\n    float c = 2.*size;\n    float crSiz =3.; \n    for(int i = 0; i < 4; i++){\n      vec3 q = mod(p+0.5*c,c)-0.5*c;\n      float subt = cros(q*(crSiz/size))/(crSiz/size);  \n      res=max(-subt,res);\n      c/=3.;\n      crSiz*=3.;\n    }\n    return res;\n}\n\nfloat map(vec3 p){\n    float c = 12.9;\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    float sp = sponge(q+vec3(0,0,0),3.2);\n    float lightb = box(p-vec3(0,7,0),vec3(9,0.2,9));\n    float lightb2 = box(p-vec3(0,-9.1,0),vec3(10,0.2,10));\n    float best = min(lightb,min(sp,lightb2));\n    if(best==sp){\n    \tmatId = 2;\n    }\n    if(best == lightb){\n    \tmatId=3;\n    }\n    if(best == lightb2){\n    \tmatId=4;\n    }\n    return best;\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0,DELTA);\n    return normalize(vec3(map(p+e.yxx)-map(p-e.yxx),\n                map(p+e.xyx)-map(p-e.xyx),\n                map(p+e.xxy)-map(p-e.xxy))); \n}\n\nvec3 addLight(vec3 lightCol, vec3 lightdir,vec3 rd){\n    vec3 light = vec3(0.);\n    float li = max(dot(lightdir,rd),0.);\n    light+=pow(lightCol,vec3(2))*pow(li,2.);\n    light+=lightCol*pow(li,200.9);\n    return light;\n}\n\nvec3 skyColor(vec3 rd){ \n    vec3 outLight = vec3(0.125);\n    outLight+= addLight(vec3(0.7,0.5,0.),normalize(-vec3(0.2,0.05,0.2)),rd);\n    outLight+= addLight(vec3(0.1,0.7,0.2),normalize(-vec3(-1.5,-0.5,1.)),rd);\n    outLight+= addLight(vec3(1.0,0.3,0.1),normalize(-vec3(1.5,0.9,-1.)),rd);\n    outLight+=addLight(vec3(0.1,0.3,0.7),normalize(-vec3(-0.2,0.05,-0.2)),rd);\n    return outLight;\n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n    float tot = 0.1;\n    for(int i = 0; i < MAX_D;i++){\n        float dst = map(ro+rd*tot);\n        tot+=dst;\n        if(tot>float(MAX_D) || dst < DELTA)break;\n    } \n    return tot;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.x;\n    vec3 ro = vec3(0,0.,-16);\n    vec3 rd = normalize(vec3(uv,1));     \n   // ro.xz*=rot(3.14/2.);\n    rd.xz*=rot(2.2); \n    vec3 color = vec3(0); \n    vec3 accum = vec3(0); \n    for(int i = 0; i<5;i++){\n        float tot = (raymarch(ro,rd+hash21(iTime*2.+uv)*0.0006));\n        vec3 p = ro+rd*tot;\n        vec3 n = normal(p);\n        if(tot>float(MAX_D)){\n            matId = 1;\n        }\n        if(matId ==1){\n            color = skyColor(rd);     \n        }\n        if(matId ==2){ \n            ro=p;\n            rd = (randInSphere(uv+iTime)+n)*0.5;\n        }\n        if(matId ==3){\n            color =1.*vec3(1.,0.4,0);\n            \n        } \n        if(matId ==4){   \n            color =2.*vec3(1.1,0.2,0.1);\n        }    \n        accum+=0.7*color;\n    }\n    if(iMouse.z>1.){\n    \tfragColor = vec4(0);\n    }\n    fragColor += vec4((accum),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}