{
    "Shader": {
        "info": {
            "date": "1656577934",
            "description": "Very simple post processing god rays shader",
            "flags": 32,
            "hasliked": 0,
            "id": "ss3fW7",
            "likes": 2,
            "name": "Simpler God Rays",
            "published": 3,
            "tags": [
                "rays",
                "post",
                "god",
                "crepuscular",
                "processing"
            ],
            "usePreview": 0,
            "username": "akufishi",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "const int NumSamples = 100;\nconst float Density = 0.85f;\nconst float Weight = 0.01f;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //delta between current pixel and light position\n    vec2 delta = uv - vec2(0.5);\n    \n    //define sampling step\n    delta *= 1.0f / float(NumSamples) * Density;\n    \n    //initial color\n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    float illuminationDecay = 0.9f;\n    \n    for(int i = 0; i < NumSamples; i++)\n    {\n        //peform sampling step\n        uv -= delta;\n        \n        //decay the ray\n        vec3 color_sample = texture(iChannel0, uv).rgb;\n        \n        color_sample *= illuminationDecay * Weight;\n        \n        //original color + ray sample\n        color += color_sample;\n    }\n\n    // Output to screen\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 circle(vec2 uv, vec2 pos, float radius)\n{\n    return vec3(float(dot(uv - pos, uv - pos) < radius * radius) * 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 ms = iMouse.xy / iResolution.xy;\n    \n    fragColor = vec4(vec3(0.0), 1.0);\n\n    fragColor.rgb += circle(uv, vec2(0.5), 0.1);\n    fragColor.rgb -= circle(uv, ms, 0.1);\n    fragColor.rgb -= circle(uv, ms + vec2(0.2, 0.0), 0.05);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}