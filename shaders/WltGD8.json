{
    "Shader": {
        "info": {
            "date": "1576175456",
            "description": "Band lens",
            "flags": 32,
            "hasliked": 0,
            "id": "WltGD8",
            "likes": 3,
            "name": "[I3D'20] Band lens",
            "published": 3,
            "tags": [
                "i3d20"
            ],
            "usePreview": 0,
            "username": "I3D20_23",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "/**********************************************/\n/**********************************************/\n/**********************************************/\n/*                                            */\n/*     /*\\     Parameters can be changed in   */\n/*    /* *\\    \"Common\" tab.                  */\n/*   /* | *\\                                  */\n/*  /*  o  *\\  Avoid modifying this file.     */\n/* /*********\\                                */\n/*                                            */\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\n#define colorRange 24.0\n\nvec3 bloomTile(float lod, vec2 offset, vec2 uv){\n    return texture(iChannel1, uv * exp2(-lod) + offset).rgb;\n}\n\nvec3 getBloom(vec2 uv){\n\n    vec3 blur = vec3(0.0);\n\n    blur = pow(bloomTile(2., vec2(0.0,0.0), uv),vec3(2.2))       \t   \t+ blur;\n    blur = pow(bloomTile(3., vec2(0.3,0.0), uv),vec3(2.2)) * 1.3        + blur;\n    blur = pow(bloomTile(4., vec2(0.0,0.3), uv),vec3(2.2)) * 1.6        + blur;\n    blur = pow(bloomTile(5., vec2(0.1,0.3), uv),vec3(2.2)) * 1.9 \t   \t+ blur;\n    blur = pow(bloomTile(6., vec2(0.2,0.3), uv),vec3(2.2)) * 2.2 \t   \t+ blur;\n\n    return blur * colorRange;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 base = texture(iChannel0,uv);    \n    vec3 color = vec3(0.0);\n    \n#if DRAW_BLOOM == 1 \n    color = pow(texture(iChannel0, uv).www * colorRange, vec3(2.2));\n    color = pow(color, vec3(2.2));\n    color += pow(getBloom(uv), vec3(2.2));\n#endif\n   \t\n    fragColor = vec4(base.rgb + 0.7*color,0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**********************************************/\n/**********************************************/\n/**********************************************/\n/*                                            */\n/*     /*\\                                    */\n/*    /* *\\                                   */\n/*   /* | *\\  Do not modify below this point. */\n/*  /*  o  *\\                                 */\n/* /*********\\                                */\n/*                                            */\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\nvec2 panning() {\n  return EXTENT * vec2(sin(iTime*0.1),cos(iTime*0.1));    \n}\n\n////////////////////////\n// fields for figures //\n////////////////////////\n\nvec2 uv(vec2 p) \n{\n    vec2 ctr = vec2(EXTENT/2.0*iResolution.x/iResolution.y + EXTENT/3.0*sin(iTime), EXTENT/2.0 + cos(iTime*0.7)) + panning();\n    vec2 dt  = vec2(ctr-p);\n\n    const float R = 0.4 * EXTENT;    \n    float rr = dot(dt,dt);\n    vec2 f   = vec2(p);\n    if (rr < R*R) {\n      float z = 10.0 - 9.0 / sqrt(R*R - rr);\n      f = p + 3.0 * (p - ctr) / z;\n      f = 0.5 * f;\n    }\n    return f.xy;\n}\n\nvec2 d(vec2 p) \n{\n#if DO_SPLITS == 0\n    return vec2(log_step);\n#endif\n    float delta = 0.1;\n    vec2  dudx  = ( uv(p - vec2(delta,0.0)) - uv(p + vec2(delta,0.0)) ) * 0.5 / delta;\n    vec2  dudy  = ( uv(p - vec2(0.0,delta)) - uv(p + vec2(0.0,delta)) ) * 0.5 / delta;\n    float du    = log_step / (0.00001 + length(vec2(dudx.x,dudy.x)));\n    float dv    = log_step / (0.00001 + length(vec2(dudx.y,dudy.y)));\n\n    du = max(log_step, du);\n    dv = max(log_step, dv);\n    \n    return vec2(du,dv);\n}\n\n///////////////////////\n\n\nvec4 draw(vec2 p) {\n          \n    p += panning();\n    \n    float _ = 0.0;\n   \n    vec2 uvp = vec2(EXTENT*2.0) + uv(p);\n    vec2 dp  = d(p);\n    \n    int lidA = getLocalID(uvp.x, dp.x, _);\n    int lidB = getLocalID(uvp.y, dp.y, _);\n    \n    uvec4 gidA = getGlobalID(lidA, dp.x);\n    uvec4 gidB = getGlobalID(lidB, dp.y);\n\n    if ( (numBits(gidA.y) | numBits(gidB.y)) > 0u) {\n      return vec4(0.0, 0.0, 0.0, 0.1);\n    } else {\n      return vec4( 0.85*getRandomColor( gidA ^ gidB.yxwz ).xyz , 0.0 );\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 p = EXTENT * fragCoord / iResolution.y;\n    fragColor = draw( p );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**********************************************/\n/**********************************************/\n/**********************************************/\n/*                                            */\n/*     /*\\                                    */\n/*    /* *\\                                   */\n/*   /* | *\\  Do not modify below this point. */\n/*  /*  o  *\\                                 */\n/* /*********\\                                */\n/*                                            */\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\nvec3 makeBloom(float lod, vec2 offset, vec2 bCoord){\n    \n    vec2 pixelSize = 1.0 / vec2(iResolution.x, iResolution.y);\n\n    offset += pixelSize;\n\n    float lodFactor = exp2(lod);\n\n    vec3 bloom = vec3(0.0);\n    vec2 scale = lodFactor * pixelSize;\n\n    vec2 coord = (bCoord.xy-offset)*lodFactor;\n    float totalWeight = 0.0;\n\n    if (any(greaterThanEqual(abs(coord - 0.5), scale + 0.5)))\n        return vec3(0.0);\n\n    for (int i = -5; i < 5; i++) {\n        for (int j = -5; j < 5; j++) {\n\n            float wg = pow(1.0-length(vec2(i,j)) * 0.125,6.0);\n\n            bloom = pow(texture(iChannel0,vec2(i,j) * scale + lodFactor * pixelSize + coord, lod).www,vec3(2.2))*wg + bloom;\n            totalWeight += wg;\n            \n        }\n    }\n\n    bloom /= totalWeight;\n\n    return bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n\tvec3 blur = makeBloom(2.,vec2(0.0,0.0), uv);\n\t\tblur += makeBloom(3.,vec2(0.3,0.0), uv);\n\t\tblur += makeBloom(4.,vec2(0.0,0.3), uv);\n\t\tblur += makeBloom(5.,vec2(0.1,0.3), uv);\n\t\tblur += makeBloom(6.,vec2(0.2,0.3), uv);\n\n    fragColor = vec4(pow(blur, vec3(1.0 / 2.2)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// M and N parameters\n#define N 79.0\n#define M 53.0\n\n// Split or distortion (1 or 0)\n#define DO_SPLITS 1\n\n// BLOOM or not\n#define DRAW_BLOOM 1\n\n// Define how much \"zoom\"\n#define EXTENT 20.0\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n/*                                            */\n/*     /*\\                                    */\n/*    /* *\\                                   */\n/*   /* | *\\  Do not modify below this point. */\n/*  /*  o  *\\                                 */\n/* /*********\\                                */\n/*                                            */\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\nconst float log_step = N/M;\n\n/**********************************************/\n\nvec4 getRandomColor(uvec4 id) {\n    vec3 tmp = vec3(fract(float(id.x^id.w)/213789.0), fract(float(id.y^1489u)/348789.0), fract(float(id.z^2789u)/5689.0));\n    for (int i = 0; i < 16; i++) {\n      tmp = fract(vec3(13.14159265359,1.41421356237,6.62607004) * tmp.zyx + tmp.yxz / vec3(13.14159265359,1.41421356237,6.62607004));\n    }\n    return vec4(tmp, 1.0);\n}\n\n/**********************************************/\n\nfloat quantize(float d) {\n    return pow(log_step,floor(log(d)/log(log_step)));\n}\n\n/**********************************************/\n\nint d2level(float d) {\n    return int(floor(log(d)/log(log_step)));\n}\n\n/**********************************************/\n\nfloat level2d(int level) {\n  return pow(log_step,round(float(level)));\n}\n\n/**********************************************/\n\nfloat interpolate(float d) {\n    int   level   = d2level(d);\n    float df      = level2d(level);\n    float dc      = level2d(level-1);    \n    float linear  = (d - df) / (df - dc) / log_step;\n    return smoothstep(0.0,1.0,linear);\n}\n\n/**********************************************/\n\nfloat spacing(float d) {\n    return 1.0/d;   \n}\n\n/**********************************************/\n\nfloat shift(float d) {\n    if (N == 2.0) {\n        return spacing(d) / 2.0;\n    }\n    return d ;\n}\n                                   \n/**********************************************/\n\nfloat id2Lborder(int id, float d) {\n    return (float(id) +       (shift(d) / spacing(d)) ) * spacing(d);\n}\n                                   \n/**********************************************/\n\nfloat id2center(int id, float d) {\n    return (float(id) + 0.5 + (shift(d) / spacing(d)) ) * spacing(d);\n}\n                                   \n/**********************************************/\n\nint u2id(float u, float d) {\n    return int(floor( u / spacing(d) - (shift(d) / spacing(d)) ));\n}\n\n/**********************************************/\n\nint u2closestLBorderId(float u, float d) {\n    int lid = u2id(u, d);\n    if (u < id2center(lid, d)) {\n        return lid;\n    } else {\n        return lid+1;\n    }\n}\n                                   \n/**********************************************/\n\nfloat u2closestBorder (float u, float d) {\n    return id2Lborder(u2closestLBorderId(u,d), d);\n}\n\n/**********************************************/\n\nint getLocalID(float u, float d, out float ctr) {\n  // fine and coarse densities\n  int   level = d2level(d);\n  float df    = level2d(level  );\n  float dc    = level2d(level-1);\n  // enclosing band id\n  int   lid     = u2id(u, df); \n  // get the borders of the fine band\n  float lf_brdr = id2Lborder(lid, df);\n  float rf_brdr = id2Lborder(lid+1, df);\n  // get the closest coarser band borders\n  float lc_brdr = u2closestBorder(lf_brdr, dc);\n  float rc_brdr = u2closestBorder(rf_brdr, dc);\n  // interpolate between fine and coarse borders\n  float a     = interpolate(d);\n  float left  = lf_brdr * a + lc_brdr * (1.0 - a);\n  float right = rf_brdr * a + rc_brdr * (1.0 - a);    \n  // adjust enclosing band after interpolation\n  if      (u < left ) lid--;\n  else if (u > right) lid++;\n      \n  return lid;\n}\n\n/**********************************************/\n\nuvec4 setId(uvec4 id,uint bit) // 128 bits IDs\n{\n    if (bit > 127u) return id;\n    if (bit < 64u) {\n        if (bit < 32u) { // 0 - 31 (w) LSBs\n            return uvec4(id.x,id.y,id.z,id.w | (1u << bit));\n        } else {         // 32 - 63 (x)\n            return uvec4(id.x,id.y,id.z | (1u << (bit-32u)),id.w);            \n        }\n    } else {\n        if (bit < 96u) { // 64 - 95 (x)\n            return uvec4(id.x,id.y | (1u << (bit-64u)),id.z,id.w);            \n        } else {         // 96 - 127 (x) MSBs\n            return uvec4(id.x | (1u << (bit-96u)),id.y,id.z,id.w);            \n        }\n    }\n}\n\n/**********************************************/\n\nuvec4 getGlobalID(int lid, float d) {\n  uvec4 gid = uvec4(0u);\n  int start_level = d2level(d);\n  for (int level = start_level; level > 0; level--) {\n    float df      = level2d(level);\n    float dc      = level2d(level-1);\n    float lf_brdr = id2Lborder(lid  , df);\n    float rf_brdr = id2Lborder(lid+1, df);\n    // get the closest borders on the coarse bands\n    int lid_brdr = u2closestLBorderId(lf_brdr, dc);\n    int rid_brdr = u2closestLBorderId(rf_brdr, dc);\n    if (lid_brdr == rid_brdr) {\n      // this band is closing between parents, tag in ID (lower 96 bits)\n      gid = setId(gid,uint(96 - level));\n      lid  = u2id(lf_brdr, dc);\n    } else {\n      // move up to parent\n      lid  = lid_brdr;\n        \n    }      \n  }\n  // parent ids go into the most significant 32 bits\n  gid.x = uint(lid);\n  return gid;\n}\n\n/**********************************************/\n\nuint numBits(uint v) {\n    uint n = 0u;\n    while (v > 0u) {\n        n += v & 1u;\n        v = v >> 1u;\n    }\n    return n;\n}\n\n/**********************************************/\n\n//////////////////////////////////////////////////////\n//////////////////////////////////////////////////////\n// Noise from https://www.shadertoy.com/view/4sdGD8 //\n//////////////////////////////////////////////////////\n//////////////////////////////////////////////////////\n\nlowp vec3 permute(in lowp vec3 x) { return mod( x*x*34.+x, 289.); }\nlowp float snoise(in lowp vec2 v) {\n  lowp vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n      x0 = (i.x+i.y)*.211324865405187 + v - i;\n  lowp float s = step(x0.x,x0.y);\n  lowp vec2 j = vec2(1.0-s,s),\n      x1 = x0 - j + .211324865405187, \n      x3 = x0 - .577350269189626; \n  i = mod(i,289.);\n  lowp vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = fract(p * .024390243902439) * 2. - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5);\n  return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}