{
    "Shader": {
        "info": {
            "date": "1641720909",
            "description": "Plot alternating between:\n- sRGB gamut\n- a smoothed gamut, smaller than sRGB\n- sRGB gamut\n- sRGB gamut, stretched to have saddle points at the edges of the rgb cube",
            "flags": 0,
            "hasliked": 0,
            "id": "7lVXDc",
            "likes": 0,
            "name": "RGB Gamut shape",
            "published": 3,
            "tags": [
                "gamutshape"
            ],
            "usePreview": 0,
            "username": "bjornornorn",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "vec3 cbrt( vec3 x )\n{\n    return sign(x)*pow(abs(x), vec3(1.0/3.0));\n}\n\nfloat scurve(float x)\n{\n    return (3.0*x - x*x*x)/2.0;\n}\n\nvec3 scurve3(vec3 x)\n{\n    return (3.0*x - x*x*x)/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 hl = fragCoord/iResolution.xy;\n\n    // map 2D plane to the boundary of the RGB cube\n    vec3 yuv = vec3(hl.y, sin(hl.x*2.0*3.1415), cos(hl.x*2.0*3.1415));\n    \n    mat3x3 toRGB = mat3x3(\n        1.0, 0.0, -2.0/sqrt(2.0),\n        1.0, -sqrt(3.0/2.0), 1.0/sqrt(2.0),\n        1.0, sqrt(3.0/2.0), 1.0/sqrt(2.0));\n        \n    vec3 rgb = yuv*toRGB;\n    float Y = yuv.x;\n    float C = 2.0*Y*(1.0-Y);\n    rgb = Y + C*(rgb-Y);\n\n    float maxRGB = max(rgb.r,max(rgb.g,rgb.b));\n    float minRGB = min(rgb.r,min(rgb.g,rgb.b));\n\n    float maxScale = (maxRGB - 0.5)/(0.5);\n    float minScale = (0.5 - minRGB)/(0.5);\n\n    float scale = 1.0/max(maxScale, minScale);\n\n    rgb = (rgb-0.5)*scale + 0.5;      \n\n    \n    if (int(iTime) % 4 == 1)\n    {\n        // Reduced smoothed gamut\n        // In 3d it would look like a cube with rounded corners\n        // Should treat black and white specially, so they aren't smoothed as well.\n    \n        Y = 0.5;\n    \n        float l = 1.0/sqrt(dot(rgb - Y,rgb - Y));\n        rgb = (rgb-Y)*l + Y;\n    \n        vec3 maxScale = (1.0-Y)/(rgb - Y);\n        vec3 minScale = (Y)/(Y - rgb);\n        \n        vec3 combinedScale = 0.5*((maxScale + minScale) + sign(rgb - Y)*(maxScale - minScale));\n\n        float p =  - 4.0;\n        float scale = pow(dot(pow(combinedScale, vec3(p)),vec3(1.0)), 1.0/p);\n        \n        rgb = (rgb-Y)*scale + Y;   \n    }\n\n    \n    if (int(iTime) % 4 == 3)\n    {\n        // Map rgb values so ridges are saddle points\n    \n        rgb = 0.5*(scurve3(2.0*rgb - 1.0)+1.0);\n    }\n    \n    \n    fragColor = vec4(pow(rgb,vec3(1.0/2.2)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}