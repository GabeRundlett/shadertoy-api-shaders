{
    "Shader": {
        "info": {
            "date": "1491675723",
            "description": "Particle system with as many random variables as possible:\n- random particle position\n- random particle ellipsoid path with a,b = random\n- random particle speed and size (size depending on speed) \n- random color\n\nSystem is re-scaled within a rectangle ",
            "flags": 0,
            "hasliked": 0,
            "id": "4s2yWz",
            "likes": 10,
            "name": "[ #09 ] - Random particle system",
            "published": 3,
            "tags": [
                "2d",
                "text",
                "texture",
                "random",
                "hash",
                "particle",
                "system",
                "atlas"
            ],
            "usePreview": 1,
            "username": "Yrai",
            "viewed": 985
        },
        "renderpass": [
            {
                "code": "#define res_            iResolution\n#define t               iTime\n\n// System attributes\n#define particle_r_            .01\n#define particle_system_size_  50\n#define particle_speed_factor_ 11.\n\n// Colors\n#define white vec3(1.)\n#define black vec3(0.)\n\nstruct particle {\n\tfloat r;\n    float d;\n    vec2 pos;\n    vec2 path;\n    vec3 col;\n};\n\n    \n\nfloat pchar(vec2 p, int C);\nfloat pfnum(vec2 p, float x);\nfloat pinum(vec2 p, float x);\nfloat ppoint(vec2 p, vec2 n);\n\nvec2  domain(vec2 uv, float s);\nfloat hash(vec2 p);\nfloat hashm(vec2 p);\n\nparticle[particle_system_size_] calc_system(vec2 p, vec2 span);\n\n\nvoid mainImage(out vec4 o, vec2 f) {\n\tvec2 p = domain(f, 4.5);\n\t\n\tvec2 span = vec2(4. + sin(t) , 2. - cos(t)*2.);\n    float axis = 4. * smoothstep(.02, .01, min(abs(p.y), abs(p.x)));\n    float box  = smoothstep(\n        .02, .01, abs(max(abs(p.x) - span.x, abs(p.y) - span.y))\n    );\n    \n    particle particle_system[particle_system_size_] = calc_system(p, span);\n\n        \n    vec3 c = vec3(0.);\n    c = mix(c, vec3(1.), axis);\n    c = mix(c, vec3(1.), box);\n    for(int i = 0; i < particle_system_size_; i++) {\n        c = mix(c, white, particle_system[i].col * particle_system[i].d);        \n    }\n    \n    c = mix(c, white, ppoint(4.*(p+vec2(span.x, -span.y)), span));\n    o = vec4(c, 1.);\n}\n\n\nparticle[particle_system_size_] calc_system(vec2 p, vec2 span) {\n    float x_span = span.x;\n    float y_span = span.y;\n    \n    particle particle_system[particle_system_size_];\n    for(int i = 0; i < particle_system_size_; i++) {\n    \tfloat fi = float(i);\n        float sx = sign(hashm( vec2(0., fi) ));\n        float sy = sign(hashm( vec2(fi + 1., fi + 1.) ));\n        float dx = x_span * hash( vec2(fi, .2) );\n        float dy = y_span * hash( vec2(fi - 1., fi - 1.) );\n        float randrx = sx * hash( vec2(fi - 1., fi) );\n        float randry = sy * hash( vec2(fi, fi) );\n        \n        float part_speed = t*(particle_speed_factor_ * hash( vec2(fi, fi) ));\n        vec2  part_pos   = p + vec2(sx*dx, sy*dy);\n        vec2  part_path = vec2(\n            randrx * cos(part_speed) + hash( vec2(0., fi) ),\n            randry * sin(part_speed)\n        );\n        float part_r = particle_r_;\n        float part_d = smoothstep(.02 + abs(.2*sin(t*part_speed)), .01,\n        \tlength(part_pos - part_path) - part_r\n        );\n        \n        vec3 part_col = 2.*vec3(\n        \thash( vec2(0.-fi, 0.*fi)  ),\n            hash( vec2(0.+2.*fi, fi)  ),\n            hash( vec2(fi, 1./(fi+.1)) )\n        );\n        \n        particle_system[i] = particle(\n            part_r,\n            part_d,\n        \tpart_pos,\n            part_path,\n            part_col\n        );\n    }\n    \n    return particle_system;\n}\n\nfloat hash(vec2 p) {\n    return fract(sin(p.x*15.32+p.y*5.78) * 43758.236237153);\n}\n\nfloat hashm(vec2 p) {\n\tfloat h = dot(p,vec2(127.1,311.7));\n    return -1.0 + 2.0 * fract(sin(h)*43758.5453123);\n}\n\nfloat pinum(vec2 p, float x) {\n    bool neg = false;\n    if(x < 0.) {\n    \tneg = true;\n        x *= -1.;\n    }\n    \n    int x_ = int(floor(x));\n    float nm = 0.;\n    if(neg)\n        nm = pchar(p+vec2(.3,0.), 45);\n    \n    for(int i = 0; i < 10; i++) {\n    \tint n = int(floor(mod(float(x_), 10.)));\n        nm = max(nm, pchar(p + float(i)*vec2(.4, 0.), 48+n));\n        x_ /= 10;\n        if(x_ == 0)\n            break;\n    }\n    \n    return nm;\n}\n\nfloat pfnum(vec2 p, float x) {\n   \t// +/-dn...d1d0d,d_0d_1...d_n\n    float xo = x;\n    bool neg = false;\n    if(x < 0.) { neg = true; x *= -1.; }\n    \n\tint d = int(abs(floor(x)));\n    int d0 = 0;\n    \n    int d_0 = int( floor(abs(fract(x)) * 10.) );\n\tint d_1 = int( floor(abs(fract(x)) * 100.) );\n    d_1 = int( d_1 - d_0*10);\n    \n    float nm = pinum(p, xo);\n    nm = max(nm, pchar(p - vec2(.3, 0.), 46));\n    nm = max(nm, pchar(p - vec2(.6, 0.), 48 + d_0));\n    nm = max(nm, pchar(p - vec2(1., 0.), 48 + d_1));\n\t\n    return nm;\n}\n\nvec2 domain(vec2 uv, float s) {\n    return (2. * uv.xy - res_.xy) / res_.y * s;\n}\n\nfloat pchar(vec2 p, int C) {\n  if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return 0.;\n   \n  return textureGrad(\n      iChannel0, p/16. + fract(vec2(C, 15-C/16) / 16.), \n      dFdx(p/16.),dFdy(p/16.)\n  ).r;\n}\n\nfloat ppoint(vec2 p, vec2 n) {\n\tfloat pn = max(pchar(p + vec2(.5, 0.), 40), pfnum(p, n.x));\n    pn = max(pn, pchar(p - vec2(1.3, 0.), 44));\n    pn = max(pn, pfnum(p - vec2(1.9, 0.), n.y));\n    pn = max(pn, pchar(p - vec2(3.3, 0.), 41));\n    return pn;\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}