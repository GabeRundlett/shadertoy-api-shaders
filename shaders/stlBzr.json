{
    "Shader": {
        "info": {
            "date": "1650492952",
            "description": "This is my first shadertoy project, I wanted to test drawing lines, in future I want to add rotation animations.\n\nI would be happy to hear your suggestions!\n\nedit: I improved my code's performance with sdf methods and added rotations. ",
            "flags": 0,
            "hasliked": 0,
            "id": "stlBzr",
            "likes": 3,
            "name": "Square Mayhem",
            "published": 3,
            "tags": [
                "lines",
                "primitives"
            ],
            "usePreview": 0,
            "username": "nuudl3",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "//Improved with sdf functions\n\nfloat rhombusSDF(vec2 p, float scale)\n{\n    p = abs(p);\n    \n    float d = p.x + p.y; \n    \n    float f1 = d - scale;\n    float f2 = d - scale + 0.01;\n    \n    return max(f1 ,-f2);\n}\n\nfloat squareSDF(vec2 p, float scale)\n{\n    p = abs(p);\n    \n    float f1 = max(p.x, p.y) - scale;    \n    float f2 = max(p.x, p.y) - scale + 0.005;\n    return max(f1,-f2);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv = rotate(uv, 3.1415/16. * iTime);\n    // Time varying pixel color\n    float px=2.5/iResolution.y ;\n    vec3 col = vec3(0.);\n    col = mix(vec3(1,1,1), col, smoothstep(0., px, rhombusSDF(uv, 0.025f)));    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, squareSDF(uv, 0.025f)));\n    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, rhombusSDF(uv, 0.05f)));    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, squareSDF(uv, 0.05f)));\n    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, rhombusSDF(uv, 0.1f)));    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, squareSDF(uv, 0.1f)));\n    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, rhombusSDF(uv, 0.2f)));    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, squareSDF(uv, 0.2f)));\n    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, rhombusSDF(uv, 0.4f)));    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, squareSDF(uv, 0.4f)));\n    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, rhombusSDF(uv, 0.8f)));    \n    col = mix(vec3(1,1,1), col, smoothstep(0., px, squareSDF(uv, 0.8f)));\n\n    col *= cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n// OLD CODE with loops and line equations\n\n/*float drawLine(vec2 p1, vec2 p2, vec2 p3)\n{\n    vec2 p13 = p3 - p1;\n    vec2 p12 = p2 - p1;\n    \n    float len = dot(p13, p12) / distance(p2, p1);\n    \n    p12 = normalize(p12);\n    \n    vec2 project = p12 * len + p1;\n    \n    if(distance(project, p3) < 0.005f && distance(p1, project) < distance(p1,p2) && distance(p2, project) < distance(p1,p2)) return 1.0f;\n    //if(distance(project, p3) < 0.05f) return 1.0f;\n    \n    return 0.0f;\n  \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vec2((fragCoord.x/iResolution.x - 0.5f) * 2.0f, (fragCoord.y/iResolution.y - 0.5f) * 2.0f);\n    \n    vec2 mouse_uv = vec2((iMouse.x/iResolution.x - 0.5f) * 2.0f, (iMouse.y/iResolution.y - 0.5f) * 2.0f);\n    \n    float yx = iResolution.y / iResolution.x;\n    \n    //rotation vectors \n    \n    vec2 n = vec2(1.0f,0);    \n    vec2 e = vec2(0,1.0f);\n    vec2 s = vec2(-1.0f,0);\n    vec2 w = vec2(0,-1.0f); \n    \n    vec2 ne = normalize(vec2(1.0f,1.0f));\n    vec2 se = normalize(vec2(1.0f,-1.0f));\n    vec2 sw = normalize(vec2(-1.0f,-1.0f));\n    vec2 nw = normalize(vec2(-1.0f,1.0f));\n\n\n    vec2 k1 = n * 0.1f;    \n    vec2 k2 = e * 0.1f;\n    vec2 k3 = s * 0.1f;\n    vec2 k4 = w * 0.1f;\n\n    //float lix = drawLine(k1,k2,uv)\n     //           +drawLine(k2,k3,uv)\n       //         +drawLine(k3,k4,uv)\n         //       +drawLine(k4,k1,uv);\n    float lix = 0.;\n    \n    int prev = 1;\n    for(int i = 0; i < 640;)\n    {\n       \n        vec2 k1 = n * 0.01f * float(i) ;    \n        vec2 k2 = e * 0.01f * float(i) ;\n        vec2 k3 = s * 0.01f * float(i) ;\n        vec2 k4 = w * 0.01f * float(i) ;\n        \n        k1.x *= yx;        \n        k2.x *= yx;\n        k3.x *= yx;\n        k4.x *= yx;\n\n        lix += drawLine(k1,k2,uv)\n                +drawLine(k2,k3,uv)\n                +drawLine(k3,k4,uv)\n                +drawLine(k4,k1,uv);\n        \n        \n        \n        \n        vec2 f1 = ne * 0.01f * float(i) * 1.414;    \n        vec2 f2 = se * 0.01f * float(i) * 1.414;\n        vec2 f3 = sw * 0.01f * float(i) * 1.414;\n        vec2 f4 = nw * 0.01f * float(i) * 1.414;\n        \n        f1.x *= yx;        \n        f2.x *= yx;\n        f3.x *= yx;\n        f4.x *= yx;\n        \n        lix += drawLine(f1,f2,uv)\n                +drawLine(f2,f3,uv)\n                +drawLine(f3,f4,uv)\n                +drawLine(f4,f1,uv);\n        \n        \n        \n        i = prev + i;\n        prev = i;\n        \n    }\n    \n    \n    \n    float lines = drawLine(vec2(0.1,0.1), mouse_uv, uv); \n    //float lines = 0.0f;\n    \n    //if(distance(uv, vec2(0,0)) < 0.01f) lines = 1.0f;\n    \n    lix = lix * cos(iTime);\n    vec3 col = vec3(lix, 1.0f - lix , uv.x + 1.0f);\n    if(lix == 0.0f)\n    {\n        col = vec3(0,0,0);\n    }\n    \n    \n    \n    \n    \n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}