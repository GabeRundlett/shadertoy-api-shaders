{
    "Shader": {
        "info": {
            "date": "1569267447",
            "description": "A simple shader to play with a rect function.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wdc3Wj",
            "likes": 7,
            "name": "Dancing Rects - By Dani Frank",
            "published": 3,
            "tags": [
                "colors",
                "animation",
                "rectangle"
            ],
            "usePreview": 0,
            "username": "ChibiDenDen",
            "viewed": 453
        },
        "renderpass": [
            {
                "code": "bool rect(vec2 bl, vec2 tr, vec2 uv) {\n    vec2 pos = smoothstep(bl, tr, uv);\n    return all(lessThan(pos,vec2(1))) && all(greaterThan(pos, vec2(0)));\n}\n\n#define RECT_COUNT 64.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = 0.25*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 addcol = vec3(0.15, 0, 0);\n    for (float i = 0.; i < RECT_COUNT; i++) {\n        vec2 bl = vec2(sin(iTime*((i/RECT_COUNT)+1.)) + cos(i*3.14*24.), cos(iTime*((i/RECT_COUNT)+1.) + sin(i*3.14*24.)));\n        vec2 tr = vec2(sin(iTime*((i/RECT_COUNT)+1.4)) + cos(i*3.14*14.), cos(iTime*((i/RECT_COUNT)+1.4) + cos(i*3.14*34.)));\n        bl = bl*vec2(0.25, 0.5) + 0.5;\n        tr = tr*vec2(0.25, 0.5) + 0.5;\n        col += rect(bl, tr, uv)? addcol: vec3(0);\n        addcol = addcol.gbr;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}