{
    "Shader": {
        "info": {
            "date": "1545554901",
            "description": "font rendering in cells (gives a little bit of a speed boost)",
            "flags": 0,
            "hasliked": 0,
            "id": "wdlGz7",
            "likes": 7,
            "name": "less slow font",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "font",
                "slow",
                "dirty"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 591
        },
        "renderpass": [
            {
                "code": "// \n//\n//------------------------------------------------------------------------\n// Camera\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    vec2 mouse2 = vec2(sin(time*0.25)*0.1, 0.1+(0.5+sin(time)*0.5)*0.4);\n    if (iMouse.z>0.5)\n\t\tmouse2 = mouse;\n    float an = 7.0*mouse2.x;\n    camPos = vec3(9.5*sin(an),mouse2.y*8.0,9.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n//------------------------------------------------------------------------\n// Modelling \n//------------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n// signed box distance field\nfloat sdBox(vec3 p, vec3 radius)\n{\n  vec3 dist = abs(p) - radius;\n  return min(max(dist.x, max(dist.y, dist.z)), 0.0) + length(max(dist, 0.0));\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opTwist( vec3 p )\n{\n    p.y += 0.5;\n    float scale = sin(iTime*1.25)*0.15;\n    \n    float  c = cos(scale*p.y+scale);\n    float  s = sin(scale*p.y+scale);\n    mat2   m = mat2(c,-s,s,c);\n    p = vec3(m*p.zy,p.x);\n    p.y -= 0.5;\n    return p;\n}\n\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca * p.y - sa * p.z, sa * p.y + ca * p.z);\n}\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x + sa * p.z, p.y, -sa * p.x + ca * p.z);\n}\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x - sa * p.y, sa * p.x + ca * p.y, p.z);\n}\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n// http://mercury.sexy/hg_sdf/\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n#define PI 3.14159\n#define\tTAU 6.28318\n\n#define CHS 0.2\n// 2d box for font\nfloat sdBox2(in vec2 p,in vec2 b) {vec2 d=abs(p)-b;return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);}\n// 2d line for font\nfloat line2(float d,vec2 p,vec4 l){vec2 pa=p-l.xy;vec2 ba=l.zw-l.xy;float h=clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);return min(d,length(pa-ba*h));}\n// font, optimized with mirroring etc.\nfloat LR(vec2 p, float d){p.x=abs(p.x);return line2(d,p,vec4(2,-3.25,2,3.25)*CHS);}\nfloat TB(vec2 p, float d){p.y=abs(p.y);return line2(d,p,vec4(2,3.25,-2,3.25)*CHS);}\nfloat TBLR(vec2 p, float d){return min(d,abs(sdBox2(p,vec2(2,3.25)*CHS)));}\nfloat A(vec2 p,float d){d=LR(p,d);p.y=abs(p.y-1.5*CHS);return line2(d,p,vec4(2,1.75,-2,1.75)*CHS);}\nfloat B(vec2 p,float d){p.y+=1.75*CHS;d=min(d,abs(sdBox2(p,vec2(2.0,1.5)*CHS)));p+=vec2(0.5,-3.25)*CHS;return min(d,abs(sdBox2(p,vec2(1.5,1.75)*CHS)));}\nfloat C(vec2 p,float d){d=TB(p,d);return line2(d,p,vec4(-2,3.25,-2,-3.25)*CHS);}\nfloat D(vec2 p,float d){d=line2(d,p,vec4(-2,-3.25,-2,3.25)*CHS);d=line2(d,p,vec4(2,-1,2,1)*CHS);p.y=abs(p.y);d=line2(d,p,vec4(2,1,1.5,2.75)*CHS);d=line2(d,p,vec4(1.5,2.75,1,3.25)*CHS);return line2(d,p,vec4(1,3.25,-2,3.25)*CHS);}\nfloat E(vec2 p,float d){d=TB(p,d);d=line2(d,p,vec4(-2,3.25,-2,-3.25)*CHS);return line2(d,p,vec4(0,-0.25,-2,-0.25)*CHS);}\nfloat F(vec2 p,float d){d=line2(d,p,vec4(2,3.25,-2,3.25)*CHS);d=line2(d,p,vec4(-2,3.25,-2,-3.25)*CHS);return line2(d,p,vec4(0,-0.25,-2,-0.25)*CHS);}\nfloat G(vec2 p,float d){d=TB(p,d);d=line2(d,p,vec4(-2,-3.25,-2,3.25)*CHS);d=line2(d,p,vec4(2,2.25,2,3.25)*CHS);d=line2(d,p,vec4(2,-3.25,2,-0.25)*CHS);return line2(d,p,vec4(2,-0.25,0.5,-0.25)*CHS);}\nfloat H(vec2 p,float d){d=LR(p,d);return line2(d,p,vec4(-2,-0.25,2,-0.25)*CHS);}\nfloat I(vec2 p,float d){d=line2(d,p,vec4(0,-3.25,0,3.25)*CHS);p.y=abs(p.y);return line2(d,p,vec4(1.5,3.25,-1.5,3.25)*CHS);}\nfloat J(vec2 p,float d){d=line2(d,p,vec4(-1.5,-3.25,0,-3.25)*CHS);d=line2(d,p,vec4(0,-3.25,1,-2.25)*CHS);d=line2(d,p,vec4(1,-2.25,1,3.25)*CHS);return line2(d,p,vec4(1,3.25,-1.5,3.25)*CHS);}\nfloat K(vec2 p,float d){d=line2(d,p,vec4(-2,-3.25,-2,3.25)*CHS);d=line2(d,p,vec4(-2,-0.25,-0.5,-0.25)*CHS);d=line2(d,p,vec4(2,3.25,-0.5,-0.25)*CHS);return line2(d,p,vec4(-0.5,-0.25,2,-3.25)*CHS);}\nfloat L(vec2 p,float d){d=line2(d,p,vec4(2,-3.25,-2,-3.25)*CHS);return line2(d,p,vec4(-2,3.25,-2,-3.25)*CHS);}\nfloat M(vec2 p,float d){p.x=abs(p.x);d=line2(d,p,vec4(2,-3.25,2,3.25)*CHS);return line2(d,p,vec4(0,0.75,2,3.25)*CHS);}\nfloat N(vec2 p,float d){d=LR(p,d);return line2(d,p,vec4(-2,3.25,2,-3.25)*CHS);}\nfloat O(vec2 p,float d){return TBLR(p,d);}\nfloat P(vec2 p,float d){d=line2(d,p,vec4(-2,-3.25,-2,0.0)*CHS);p.y-=1.5*CHS;return min(d,abs(sdBox2(p,vec2(2.0,1.75)*CHS)));}\nfloat Q(vec2 p,float d){d=TBLR(p,d);return line2(d,p,vec4(2,-3.25,0.5,-1.75)*CHS);}\nfloat R(vec2 p,float d){d=line2(d,p,vec4(0.5,-0.25,2,-3.25)*CHS);d=line2(d,p,vec4(-2,-3.25,-2,0.0)*CHS);p.y-=1.5*CHS;return min(d, abs(sdBox2(p,vec2(2.0,1.75)*CHS)));}\nfloat S(vec2 p,float d){d=TB(p,d);d=line2(d,p,vec4(-2,3.25,-2,-0.25)*CHS);d=line2(d,p,vec4(-2,-0.25,2,-0.25)*CHS);return line2(d,p,vec4(2,-0.25,2,-3.25)*CHS);}\nfloat T(vec2 p,float d){d=line2(d,p,vec4(0,-3.25,0,3.25)*CHS);return line2(d,p,vec4(2,3.25,-2,3.25)*CHS);}\nfloat U(vec2 p,float d){d=LR(p,d);return line2(d,p,vec4(2,-3.25,-2,-3.25)*CHS);}\nfloat V(vec2 p,float d){p.x=abs(p.x);return line2(d,p,vec4(0,-3.25,2,3.25)*CHS);}\nfloat W(vec2 p,float d){p.x=abs(p.x);d=line2(d,p,vec4(2,-3.25,2,3.25)*CHS);return line2(d,p,vec4(0,-1.25,2,-3.25)*CHS);}\nfloat X(vec2 p,float d){d = line2(d,p,vec4(-2,3.25,2,-3.25)*CHS);return line2(d,p,vec4(-2,-3.25,2,3.25)*CHS);}\nfloat Y(vec2 p,float d){d=line2(d,p,vec4(0,-0.25,0,-3.25)*CHS);p.x=abs(p.x);return line2(d,p,vec4(0,-0.25,2,3.25)*CHS);}\nfloat Z(vec2 p,float d){d=TB(p,d);return line2(d,p,vec4(-2,-3.25,2,3.25)*CHS);}\n\nfloat GetChar(vec2 p, float d, float c)\n{\n    if (c<-14.0) return 0.5;\t\t// blank left\n    if (c<-13.0) return A(p,d);\n    if (c<-12.0) return B(p,d);\n    if (c<-11.0) return C(p,d);\n    if (c<-10.0) return D(p,d);\n    if (c<-9.0) return E(p,d);\n    if (c<-8.0) return F(p,d);\n    if (c<-7.0) return G(p,d);\n    if (c<-6.0) return H(p,d);\n    if (c<-5.0) return I(p,d);\n    if (c<-4.0) return J(p,d);\n    if (c<-3.0) return K(p,d);\n    if (c<-2.0) return L(p,d);\n    if (c<-1.0) return M(p,d);\n    if (c<0.0) return N(p,d);\n    if (c<1.0) return O(p,d);\n    if (c<2.0) return P(p,d);\n    if (c<3.0) return Q(p,d);\n    if (c<4.0) return R(p,d);\n    if (c<5.0) return S(p,d);\n    if (c<6.0) return T(p,d);\n    if (c<7.0) return U(p,d);\n    if (c<8.0) return V(p,d);\n    if (c<9.0) return W(p,d);\n    if (c<10.0) return X(p,d);\n    if (c<11.0) return Y(p,d);\n    if (c<12.0) return Z(p,d);\n    if (c<13.0) return 0.5;\t\t\t// blank right\n    return d;\n}\n\nfloat celltest(vec3 p,float d)\n{\n    p.x += iTime*4.1;\n    pMod1(p.x,80.0);\n    \n\tfloat t1 = fract(iTime*0.3) * TAU;\n\tp.y -= sin(t1+p.x*0.25)*0.7;\n    \n    vec3 mods = vec3(1.8,2.0,3.0);\n    vec3 cells = vec3(0.0);\n    cells.z = pMod1(p.z,mods.z);\n    p.x += cells.z*2.1;\n    cells.x = pMod1(p.x,mods.x);\n    cells.y = pMod1(p.y,mods.y);\n    \n    if (cells.y<0.0 || cells.z<-7.0 || cells.z>1.0)\n        return d;\n    \n    d = GetChar(p.xy, d, cells.x);\n    d-=0.65*CHS;\t// char thickness...\n\t//if (d<=1.0)\n\t{\n\t\t// extrude\n\t\tfloat dep = 0.1;\n\t\tvec2 e = vec2( d, abs(p.z) - dep );\n\t\td = min(max(e.x,e.y),0.0) + length(max(e,0.0));\n\t\td -= 0.425*CHS;\t\t// rounding\n  \t\t//d-=  sin(t1+(p.x*0.15))*0.05;\n\t}\n    return d*0.5;\n}\n\nvec2 doModel( vec3 p )\n{\n    vec2 res = vec2(1.0,1.0);\n    //res = opU(res,vec2(sdBox(p,vec3(15.0,0.1,15.0)),1.0));\n    res = vec2( sdPlane(p+vec3(0.0,0.0,0.0)), 1.0);\t// floor...\n    p.y -= 1.6;\n    float d = celltest(p,1.0);\n    res = opU(res,vec2(d,3.0));\n    return res;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in float _mat )\n{\n    vec3 mal = vec3(0.0);\n    float specval = 0.0;\n    if (_mat<=1.0)\n    {\n        float f = mod( floor(0.5*pos.z) + floor(0.5*pos.x), 2.0);\n        mal = 0.2 + 0.2*f+0.2*vec3(0.45,0.85,1.0);\n    }\n    else\n    {\n        mal = vec3(0.5,0.15,0.1);\n        specval = 1.1;\n    }\n    \n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(0.7,0.875,0.89));\t\t// dir\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0;\n    if( dif>0.01 )\n        sha=calcSoftshadow( pos, lig, 0.02, 2.5 );\n    lin += dif*vec3(1.00,1.00,1.00)*sha;\n    float spec = pow(dif, 12.0) *specval;\n    \n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal.xyz*lin;\n    col+=spec;\n    \n    // fog    \n    //-----------------------------\n   \tcol *= exp(-0.0015*dis*dis);\n    return col;\n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 70.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\t//float res = -1.0;\n    vec2 res = vec2(-1.0,0.0);\n    float c = 0.0;\n    \n    for( int i=0; i<190; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n        vec2 res2 = doModel( ro+rd*t );\n\t    h = res2.x;\n        c = res2.y;\n        t += h;\n    }\n\n    if( t<maxd )\n    {\n        res.x = t;\n        res.y = c;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.0001;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n#define ZERO (min(iFrame,0))\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<16; i++ )\n    {\n\t\tfloat h = doModel( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n  \tvec3 col = vec3(0.03,0.03,0.05);\n\n\t// raymarch\n    vec2 res = calcIntersection( ro, rd ); \n    float t = res.x;\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        col = doLighting( pos, nor, rd, t, res.y );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}