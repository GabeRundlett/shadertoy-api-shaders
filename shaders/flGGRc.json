{
    "Shader": {
        "info": {
            "date": "1638311751",
            "description": "the flag of Romania with wind effect ... \nhttps://en.wikipedia.org/wiki/Flag_of_Romania",
            "flags": 0,
            "hasliked": 0,
            "id": "flGGRc",
            "likes": 0,
            "name": "the flag of Romania - 005",
            "published": 3,
            "tags": [
                "flag",
                "romania",
                "catafest"
            ],
            "usePreview": 0,
            "username": "catafest",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "// this create a rectangle, from uv and size\nfloat rectangle (vec2 uv, float size) {\n\tvec2 s = abs(uv) - vec2(size);\n    float Patrat = length(max(s, .0));\n    Patrat = smoothstep(.001, .0, Patrat);\n    return Patrat;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // all colors\n    vec3 col = vec3(0.0);    // background black \n    vec3 blue = vec3(0.0, 0.0, 1.0); // blue flag\n    vec3 yellow = vec3(1.0, 1.0, 0.0); // yellow flag\n    vec3 red = vec3(1.0, 0.0, 0.0); // red flag\n\n    // get uv area \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    // set a new area for draw \n    vec2 new_uv = uv;\n\n\n    // create a flagpole \n    uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    new_uv = uv;\n    new_uv.x += .335;\n    float flagpole = smoothstep(.0176, .0155, length(new_uv.x));\n    col += flagpole;\n\n    // translation of uv to the left area of flagpole\n    uv.y -= .0;\n    uv.x -= -.321;\n \n    //create animation with color \n    float windColor= .1;\n    \n    // wind effect\n    new_uv.x = uv.x;\n    new_uv.x += -1.0-sin(-iTime);\n    \n    float mod = smoothstep(0.9, 0.0, length(abs(new_uv.x+(new_uv.y*-.5))));\n    \n    // shadow wind\n    uv.y += mod * 0.1;\n    col -= mod * windColor;\n    \n    // up and down flag \n    uv.y +=0.18 * sin(-0.11 * (iTime))/mod*mod;\n    col -= mod*windColor;\n\n    // flag created with the new UV and Patrat \n    new_uv = uv;\n    new_uv.x *= .55;\n    float base = rectangle(new_uv, .3);\n\n    float flag_X = new_uv.x;\n    float flag_Y = new_uv.y* base;\n    \n\n    if (flag_X > 0.0 && flag_X < 0.6  && flag_Y > 0.0) \n    { \t\t       \n\t\tfloat size = 3.0;\n\t\tif (flag_X < 0.33 / size) \n\t\t{\n\t\t\t// Output to screen fill the screen with blue\n\t\t\t//fragColor = vec4(0,0,1,0);\n            col = blue;\n            \t\n\t\t} else if (flag_X < 0.6 / size) {     \n\t\t\t// fill the 2/3 of size with yellow color\n\t\t\tcol = yellow;\n        \t    \n\t\t} else if (flag_X < 0.9 / size) {\n   \n\t\t\t// fill the last 1/3 with the red color \n\t\t\tcol=red;\n\t\t}\n    }\n  \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}