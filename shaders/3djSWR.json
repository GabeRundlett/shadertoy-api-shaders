{
    "Shader": {
        "info": {
            "date": "1553436017",
            "description": "This is a by-product of trying to understand shane's and flockeroo's simplex-weave patterns.\n\nThe zoom (line 44) does not follow the bass as desired. I have yet to find proper documentation on how to read correctly from the sound-textures.",
            "flags": 64,
            "hasliked": 0,
            "id": "3djSWR",
            "likes": 14,
            "name": "Wire Mesh Fence",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "sound",
                "parallax",
                "simplex",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 2100
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Wire Mesh Fence - A by-product of trying to understand shane's and flockaroo's\n// simplex-weave patterns\n//\n// Copyright 2019 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nmat2 r2d (in float degree)\n{\n    float rad = radians (degree);\n    float c = cos (rad);\n    float s = sin (rad);\n    return mat2 (vec2 (c, s), vec2 (-s, c));\n}\n\nfloat line (in vec2 a, in vec2 b)\n{\n    vec2 ba = b - a;\n    float h = clamp (dot (-a, ba)/dot (ba, ba), .0, 1.);\n    return length (-a - ba*h);\n}\n\nfloat grid (in vec2 p0)\n{\n    // offset, scale and rotate space\n\tvec2 p = p0 + 2.*vec2 (cos(iTime),sin(iTime));\n    float bassZoom = texelFetch (iChannel0, ivec2(0), 0).r;\n    p *= 2. + bassZoom*(.5 + .5*cos (iTime));\n\tp *= r2d (37.*iTime);\n\n    // get triangle-center/vertices/edge-midpoints\n    vec2 s = floor(p + (p.x + p.y)*.36602540378);\n    p -= s - (s.x + s.y)*.211324865;\n    vec2 v0 = p;\n\tfloat i = v0.x < v0.y ? 1. : 0.;\n    vec2 ioffs = vec2(1. - i, i);\n    vec2 v1 = v0 - ioffs + .2113248654;\n    vec2 v2 = v0 - .577350269;\n    vec2 center = (v0 + v1 + v2)/3.;\n\tvec2 e0 = .5*(v0 + v1);\n\tvec2 e1 = .5*(v1 + v2);\n\tvec2 e2 = .5*(v2 + v0);\n\n    // twist and compute lines\n\tfloat t = 4.*iTime;\n    center *= r2d (45.*sin(t)); \n\tvec2 offset = .035*vec2 (cos(t), sin(t));\n    float l0 = line (center + offset, e0);\n    float l1 = line (center + offset, e1);\n    float l2 = line (center + offset, e2);\n\n    // 'draw' lines\n    float m0 = smoothstep (.02, .01, l0);\n    float m1 = smoothstep (.02, .01, l1);\n    float m2 = smoothstep (.02, .01, l2);\n\treturn m0 + m1 + m2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize, aspect-correct and 'bulge' UVs\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvRaw = uv;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\tuv *= 1. + .5*length(fragCoord.xy/iResolution.xy*2. - 1.);\n\n    // offset UVs for green and blue channel for fake chromatic aberration\n    float offsetScale = .0175;\n    vec2 offsetGreen = vec2(offsetScale*length(fragCoord.xy/iResolution.xy*2. - 1.));\n    vec2 offsetBlue = vec2(-offsetScale*length(fragCoord.xy/iResolution.xy*2. - 1.));\n\n    // draw four layers of grid for a parallax-like effect\n    vec3 col = vec3 (1., .95, .9);\n\tfloat layerLarge = 3.*grid(uv);\n\tfloat layerMedium = .75*grid(2.*uv*r2d(3.));\n\tfloat layerSmall = .25*grid(3.*uv*r2d(6.));\n\tfloat layerTiny = .125*grid(4.*uv*r2d(9.));\n\n    vec2 uvGreen = uv + offsetGreen;\n    float layerLargeGreen = 3.*grid(uvGreen);\n\tfloat layerMediumGreen = .75*grid(2.*uvGreen*r2d(3.));\n\tfloat layerSmallGreen = .25*grid(3.*uvGreen*r2d(6.));\n\tfloat layerTinyGreen = .125*grid(4.*uvGreen*r2d(9.));\n\n    vec2 uvBlue = uv + offsetBlue;\n    float layerLargeBlue = 3.*grid(uvBlue);\n\tfloat layerMediumBlue = .75*grid(2.*uvBlue*r2d(3.));\n\tfloat layerSmallBlue = .25*grid(3.*uvBlue*r2d(6.));\n\tfloat layerTinyBlue = .125*grid(4.*uvBlue*r2d(9.));\n\n    col.r += 4.*(layerLarge + layerMedium + layerSmall + layerTiny);\n    col.g += 4.*(layerLargeGreen + layerMediumGreen + layerSmallGreen + layerTinyGreen);\n    col.b += 4.*(layerLargeBlue + layerMediumBlue + layerSmallBlue + layerTinyBlue);\n\n    // tone-map, vignette, raster-effect, gamma-correct\n    col = col / (1. + col);\n    col *= 1. - .6*length (fragCoord.xy/iResolution.xy*2. - 1.);\n    col *= mix (1., .75, .5 + .5*cos(900.*uvRaw.y));\n    col = pow (col, vec3 (1./2.2));\n\n    fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 18172,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/iamdjtrp/m-22-white-lies-trp-remix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}