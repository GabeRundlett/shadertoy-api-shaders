{
    "Shader": {
        "info": {
            "date": "1537283657",
            "description": "Some solid modelling practice.",
            "flags": 0,
            "hasliked": 0,
            "id": "llKcR3",
            "likes": 12,
            "name": "Football",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "CLPB",
            "viewed": 930
        },
        "renderpass": [
            {
                "code": "// Modified from https://www.shadertoy.com/view/Xds3zN by iq.\n\n// Face coloring was a little more complicated than expected, \n// so I'm leaving the pentagons colored as circles for now.\n\n#define AA 1\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat lpnorm(vec3 p, float s){\n    return pow(\n        (\n         pow(abs(p.x),s)+\n         pow(abs(p.y),s)+\n         pow(abs(p.z),s)), \n        1.0/s);\n}\n\n#define PI 3.14159265359\n#define PHI (1.618033988749895)\n#define TAU 6.283185307179586\n\n// HG_SDF Icosahedron but truncated and rounded\n// Optimized by iq (see comments)\nvec2 football(vec3 p, float s)\n{\n    float d = 0.0;\n    float M = 2.5;\n    \n    p = abs(p);\n    \n    d = max(d, dot(p, normalize(vec3(1.0,1,1))));\n    d = max(d, dot(p, normalize(vec3(0,1,PHI+1.))));\n    d = max(d, dot(p, normalize(vec3(PHI+1.,0,1))));\n    d = max(d, dot(p, normalize(vec3(1,PHI+1.,0))));\n    \n    // Truncation\n    // FIXME: planarity not maintained when projecting M onto rounded surface.\n    //        May have to defer this to the material stage?\n    float si = s*.04;\n    \n    float rnd = length(p);\n    float rdg = 0.35;\n    float ort = 0.49;\n    \n    float dprod = dot( p, normalize(vec3(PHI+1.0,PHI,0) ) );\n    d = max(d, dprod - si);\n    M = dprod>ort?3.5:M;\n    dprod = dot(p, normalize(vec3(0,PHI,1.0)) );\n    d = max(d, dprod - si);\n    M = dprod>ort?3.5:M;\n    dprod = dot(p, normalize(vec3(1.0,0,PHI)) );\n    d = max(d, dprod -si);\n    M = dprod>ort?3.5:M;\n    \n    //return vec2(d-s+abs(d-rnd)*1.5, M);\n    return vec2(d-s+pow(abs(d-rnd)*8.0,2.0)*rdg, M);\n}\n\n//------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n// http://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 axis2quat(vec3 a, float angle){\n    float hlf = (angle * 0.5) * 3.14159 / 180.0;\n    return vec4(\n    \ta.x * sin(hlf),\n        a.y * sin(hlf),\n        a.z * sin(hlf),\n        cos(hlf)\n    );\n}\n\nvec4 quat_conj(vec4 q){\n    return vec4(-q.x,-q.y,-q.z, q.w);\n}\n\nvec4 quat_mul(vec4 q1, vec4 q2)\n{ \n  vec4 qr;\n  qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n  qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n  qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n  qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n  return qr;\n}\n\n//------------------------------------------------------------------\n\nvec3 fbpos(){\n    return vec3(sin(iTime*.8)*1.5,\n                        abs(sin(iTime*3.1))*.7+.5,\n                        0.0);\n}\n\n/*\nfloat sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528); // pi/5: cos, sin, tan\n\n    p.y = -p.y;\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    \n    return length(p-vec2(clamp(p.x,-r*k.z,r*k.z),r))*sign(p.y-r);\n}\n\nfloat sdPenta(vec3 p){\n    p.x += sin(70.0);\n    p.z += cos(30.0);\n    float d = sdPentagon(p.xz, 0.1);\n    return d;\n}*/\n\nvec2 map_shapes( vec3 pos ) {\n    \n    vec3 p = pos - fbpos();\n    \n    vec4 qr = axis2quat(normalize(vec3(cos(iTime+PHI),0.0,sin(iTime+PHI))), mod(-iTime,1000.0)*150.0);\n    vec4 qr_conj = quat_conj(qr);\n    vec4 q_pos = vec4(p.xyz, 0.0);\n    \n    qr = quat_mul(quat_mul(qr, q_pos), qr_conj);\n    vec3 q = vec3(qr.x, qr.y, qr.z);\n    \n    vec2 res = football(\n        q, .5);\n    \n    //res = opU(res, vec2(sdPenta(p)));\n    \n    return res;\n}\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2( sdPlane(pos), 1.0 );\n    \n    res = opU(res, map_shapes(pos));\n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 30.0;\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<80; i++ )\n    {\n\t    float precis = 0.0001*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x*.7;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = checkersGradBox( 1.2*pos.xz+iTime*3.0 );\n            col = 0.3 + f*vec3(0.3);\n        }\n        if (m >= 2.0 ){\n            col = vec3(0.6);\n        }\n        if (m >= 3.0){\n            col = vec3(0.07);\n        }\n\n        // lighting        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(0.2, 0.7, 0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n        lin += 0.20*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.20*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.35*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 10.00*spe*vec3(1.00,0.90,0.70);\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\t\n        vec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), \n                       2.0 + 2.0*mo.y, \n                       0.5 + 4.0*sin(0.1*time + 6.0*mo.x) );\n        vec3 ta = vec3(0.0, 0.7, 0.0);\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy, 2.5) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}