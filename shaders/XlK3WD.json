{
    "Shader": {
        "info": {
            "date": "1474695800",
            "description": "polygon",
            "flags": 0,
            "hasliked": 0,
            "id": "XlK3WD",
            "likes": 14,
            "name": "polywarp",
            "published": 3,
            "tags": [
                "poly"
            ],
            "usePreview": 0,
            "username": "zeo",
            "viewed": 724
        },
        "renderpass": [
            {
                "code": "float time;\nfloat atime;\n\nstruct Ray\n{\n\tvec3 org;\n\tvec3 dir;\n};\n\nvec3 background(vec3 dir){\n    float a = atan(dir.y, dir.x);\n    float f = dir.z;\n    vec3 nadir = vec3(.1,.3,.5);\n    vec3 ground = vec3(.1,.6,.2);\n    vec3 sky = vec3(1.);\n    vec3 zenith = vec3(.0, .0, .2);\n    vec3 col = f < 0. ? mix(nadir, ground, f+1.) : mix(sky, zenith, pow(f,.25));\n    return col * (5.+sin(a*2.))/6.*2.5;\n}\n\nvec4 box(vec3 p, float w){\n    p = abs(p);\n    float dx = p.x-w;\n    float dy = p.y-w;\n    float dz = p.z-w;\n    float m = max(p.x-w, max(p.y-w, p.z-w));\n    return vec4(m,dx,dy,dz);\n}\n\nmat3 rotateX(float a){\n    return mat3(1.,0.,0.,\n                0.,cos(a), -sin(a),\n                0.,sin(a), cos(a));\n}\n\nmat3 rotateY(float a){\n    return mat3(cos(a), 0., -sin(a),\n                0.,1.,0.,\n                sin(a), 0., cos(a));\n}\n\nmat3 rotation;\nfloat jitter;\n\nvec4 map(vec3 p){\n    for (int i = 0; i < 5; i++){\n        p = abs(p*rotation + vec3(0.1, .0, .0));\n        p.y -= .8;\n        p.x -= .06;\n        p.z -= jitter;\n        p.xy = p.yx;\n    }\n    return box(p, .6);\n}\n\nvec3 normal(vec3 pos)\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 render(Ray ray){\n    float dist = 0.;\n    vec3 pos;\n    for (int i = 0; i < 60; i++){\n        pos = ray.org + dist*ray.dir;\n        dist+=map(pos).x;\n    }\n    vec4 m = map(pos);\n    if (m.x < 0.01){\n        vec3 n = normal(pos);\n        vec3 l = normalize(vec3(1.,2.,5.));\n        vec3 diffuse = clamp(dot(n, l),0., 1.)*vec3(1.);\n        vec3 r = reflect(ray.dir, n);\n        vec3 refl = background(r);\n        float dx = m.y;\n        float dy = m.z;\n        float dz = m.w;\n        float start = 0.00;\n        float end = 0.05;\n        float f = smoothstep(start, end, abs(dx-dy));\n        f *= smoothstep(start, end, abs(dx-dz));\n        f *= smoothstep(start, end, abs(dz-dy));\n        f = 1. - f;\n        float rf = 1.-abs(dot(ray.dir, n));\n        rf = pow(rf,3.);\n        float flash = 1.-fract(atime);\n        flash = sqrt(flash);\n        return diffuse*(1.-rf)*.8 + flash*f*vec3(2.9, 1.4, 1.2) + refl*rf*1.3; \n    }\n\n    //return vec3(0.);\n    return background(ray.dir)*0.2;\n}\n\nRay createRay(vec3 center, vec3 lookAt, vec3 up, vec2 uv, float fov, float aspect)\n{\n\tRay ray;\n\tray.org = center;\n\tvec3 dir = normalize(lookAt - center);\n\tup = normalize(up - dir*dot(dir,up));\n\tvec3 right = cross(dir, up);\n\tuv = 2.*uv - vec2(1.);\n\tfov = fov * 3.1415/180.;\n\tray.dir = dir + tan(fov/2.) * right * uv.x + tan(fov/2.) / aspect * up * uv.y;\n\tray.dir = normalize(ray.dir);\t\n\treturn ray;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = iTime;\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec3 cameraPos = vec3(7.*sin(time/3.),7.*cos(time/3.),-4.*sin(time/8.));\n\tvec3 lookAt = vec3(0.);\n\tvec3 up = vec3(0.,0.,1.);\n\tfloat aspect = iResolution.x/iResolution.y;\n    float t = floor(time);\n    float f = fract(time);\n    t += 1. - exp(-f*9.);\n    atime = t;\n    rotation = rotateX(atime*1.9)*rotateY(atime*1.4);\n    jitter = sin(time*80.)*.1*pow((1.-fract(time)),4.);\n\tRay ray = createRay(cameraPos, lookAt, up, p, 90., aspect);\n    vec3 col = render(ray);\n    float vig = p.x*(1.-p.x)*p.y*(1.-p.y)*4.;\n    vig = pow(vig,0.3);\n    col *= vig;\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}