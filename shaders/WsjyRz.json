{
    "Shader": {
        "info": {
            "date": "1585977963",
            "description": "Raymarching experiments",
            "flags": 0,
            "hasliked": 0,
            "id": "WsjyRz",
            "likes": 5,
            "name": "Lights in the Sky",
            "published": 3,
            "tags": [
                "raymarching",
                "glow"
            ],
            "usePreview": 0,
            "username": "Roninkoi",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAXIT 128\n#define EPSILON 0.001\n \n#define minx4(a, b) ((a.w) < (b.w) ? (a) : (b))\n#define minx2(a, b) ((a.x) < (b.x) ? (a) : (b))\n \n#define MAT0 0.0\n#define MAT1 1.0\n \nmat3 rotX(float a)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(a), -sin(a),\n        0., sin(a), cos(a)\n    );\n}\n \nmat3 rotY(float a)\n{\n    return mat3(\n        cos(a), 0.0, -sin(a),\n        0., 1., 0.,\n        sin(a), 0.0, cos(a)\n    );\n}\n \nmat3 rotZ(float a)\n{\n    return mat3(\n        cos(a), -sin(a), 0.,\n        sin(a), cos(a), 0.,\n        0., 0., 1.\n    );\n}\n \nfloat t;\n \nfloat sphere(vec3 r, float a)\n{\n    return length(r) - a;\n}\n \nfloat torus(vec3 r, vec2 a)\n{\n    a.y += sin(length(r.xy + t) * 7.) * 0.09;\n    vec2 p = vec2(length(r.xz) - a.x, r.y);\n    return length(p) - a.y;\n}\n \nfloat plane(vec3 r, vec3 o, vec3 n) {\n    return dot(r - o, n);\n}\n \nfloat box(vec3 r, vec3 a)\n{\n    vec3 p = abs(r) - a;\n    return length(max(p - p.x * 0.4 - p.y * 0.4, 0.)) + min(max(p.x - p.y * 0.5, max(p.y, p.z) - p.x * 0.3), 0.);\n}\n \nfloat shade(vec3 n, vec3 rd)\n{\n    return clamp(max(dot(n, -rd), 0.) + 1., 0., 1.);\n}\n \nvec3 fog(float z, vec3 col, vec3 fogCol)\n{\n    return mix(fogCol, col, exp(-z));\n}\n \nmat3 obj;\n \nvec2 map(vec3 r)\n{\n    obj = rotZ((-t + r.z * 0.2) * 0.3) * rotY(1. * t);\n   \n    vec2 b1 = vec2(\n        box(obj * obj * (r) + vec3(0., sin(2. * t) * 1., 0.), vec3(.75, .5, .5)),\n        MAT0\n    );\n   \n    vec2 t1 = vec2(\n        torus(- obj *r, vec2(2.0, 0.1)),\n        MAT1\n    );\n   \n    return minx2(b1, t1);\n}\n \nfloat hash(vec2 r) {\n    return fract(sin(dot(r, vec2(15.5921, 96.654654))) * 23626.3663);\n}\n \nvec3 matCol(vec2 o)\n{\n    if (o.y == MAT0)\n        return normalize(vec3(1., 0.5, .0));\n   \n    if (o.y == MAT1)\n        return normalize(vec3(0., 1.7, 0.0));\n   \n    return vec3(0.);\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    t = iTime;\n   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n   \n    mat3 cam = rotY(t * 0. - PI);\n       \n    vec3 ro = vec3(0., 0., -3.0);\n    vec3 rd = cam * normalize(vec3(uv * 2., -1.));\n    vec3 r = ro;\n   \n    vec3 bcol = normalize((vec3(1., 0., 1.0) + 0.5) * (uv.y + 0.3) * (sin(t) + 1.) * 1.5 + vec3(0., 0.5, 1.0)) * 1.5 + 0.4;\n    vec4 col = vec4(0.);\n    col.rgb = bcol;\n   \n    vec2 c = vec2(10000., MAT0);\n   \n    float sh = 1.;\n   \n    float glow = 0.;\n   \n    vec3 gcol = bcol;\n   \n    for (int i = 0; i < MAXIT; ++i) {\n        vec2 d = map(r);\n        float z = length(r - ro);\n       \n        glow += exp(-d.x * 5.);\n        gcol += matCol(d) * exp(-d.x * 1.);\n       \n        if (d.x < EPSILON) {\n            col.rgb = mix(col.rgb, matCol(d), shade(normalize(r), rd));\n            col.rgb = fog(z * 0.1, col.rgb, bcol);\n            break;\n        }\n       \n        d.x *= 0.7 - 0.1 * hash(uv);\n        r += rd * clamp(d.x, -0.5, 0.5) * 0.7;\n       \n        sh = (float(i) / float(MAXIT));\n    }\n   \n    col.rgb *= exp(-sh * .9);\n    col.rgb = mix(col.rgb, gcol, glow * 0.005);\n   \n    fragColor = vec4(col.rgb, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}