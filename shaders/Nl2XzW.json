{
    "Shader": {
        "info": {
            "date": "1627210812",
            "description": "A ray tracing programe, use witted style method.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl2XzW",
            "likes": 1,
            "name": "Witted-Tracing",
            "published": 3,
            "tags": [
                "3d",
                "raytrcing"
            ],
            "usePreview": 0,
            "username": "HigashiSan",
            "viewed": 583
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926536;\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.3, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 8;\nconst int NUM_PLANES = 2;\nconst int NUM_SPHERES = 18;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID_1;\n    int materialID_2;\n    int type; //1 is for grid,2 is for normal plane\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n\n\nfloat height(float time,float h,float arg){\n\n    return abs(h*sin(arg*time)/time);\n}\n\nfloat x_loc(float angle,float time){\n    return 2.*cos(angle)*time;\n}\n\nfloat z_loc(float angle,float time){\n    return 2.*sin(angle)*time;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].type = 1;\n    Plane[0].materialID_1 = 6;\n    Plane[0].materialID_2 = 0;\n    \n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 3.5;\n    Plane[1].materialID_1 = 3;\n    Plane[1].type = 2;\n\n    // Center bouncing sphere.\n    \n    float time = mod(iTime,5.);\n    \n    \n    Sphere[0].center = vec3( 3.0+x_loc(45.,time),  height(time,5.,7.) + 0.7, 0.0+z_loc(45.,time ) );\n    Sphere[0].radius = 0.7;\n    Sphere[0].materialID = 7;\n\n    Sphere[1].center = vec3( 2.0+x_loc(30.,time),  height(time,5.,5.5) + 0.2, -8.0+z_loc(30.,time) );\n    Sphere[1].radius = 0.5;\n    Sphere[1].materialID = 7;\n    \n    Sphere[2].center = vec3( 3.0+x_loc(15.,time),  height(time,5.,4.5) + 0.2, -3.0+z_loc(15.,time) );\n    Sphere[2].radius = 0.4;\n    Sphere[2].materialID = 5;\n    \n    Sphere[3].center = vec3( 5.0+x_loc(60.,time),  height(time,4.,7.5) + 0.7, -9.0+z_loc(60.,time) );\n    Sphere[3].radius = 0.7;\n    Sphere[3].materialID = 6;\n    \n    Sphere[4].center = vec3( -2.0+x_loc(-45.,time),  height(time,5.,5.5) + 0.7, 2.0+z_loc(-45.,time) );\n    Sphere[4].radius = 0.7;\n    Sphere[4].materialID = 3;\n    \n    Sphere[5].center = vec3( -3.5+x_loc(-60.,time),  height(time,5.,7.5) + 0.6, 1.0+z_loc(-60.,time) );\n    Sphere[5].radius = 0.6;\n    Sphere[5].materialID = 4;\n    \n    Sphere[6].center = vec3( -3.5+x_loc(-15.,time),  height(time,5.,6.)+ 0.6, 6.0+z_loc(-15.,time) );\n    Sphere[6].radius = 0.6;\n    Sphere[6].materialID = 2;\n    \n    Sphere[7].center = vec3( -5.5+x_loc(-45.,time),  height(time,5.,7.) + 0.4, 3.0+z_loc(-45.,time) );\n    Sphere[7].radius = 0.4;\n    Sphere[7].materialID = 3;\n    \n    Sphere[8].center = vec3( 4.5+x_loc(75.,time),  height(time,5.,4.5) + 0.45, 1.5 +z_loc(75.,time));\n    Sphere[8].radius = 0.45;\n    Sphere[8].materialID = 1;\n    \n    Sphere[9].center = vec3( -2.5+x_loc(-35.,time),  height(time,5.,5.) + 0.3, 4.2 +z_loc(-35.,time));\n    Sphere[9].radius = 0.3;\n    Sphere[9].materialID = 5;\n    \n    Sphere[10].center = vec3( 1.0+x_loc(15.,time),  height(time,5.,3.) + 0.5, 3.5 +z_loc(15.,time));\n    Sphere[10].radius = 0.5;\n    Sphere[10].materialID = 5;\n    \n    Sphere[11].center = vec3( -3.5+x_loc(-80.,time),  height(time,5.,4.) + 0.6, 1.0+z_loc(-80.,time) );\n    Sphere[11].radius = 0.6;\n    Sphere[11].materialID = 3;\n    \n    Sphere[12].center = vec3( 11.0+x_loc(-35.,time),  height(time,5.,4.5) + 0.8, 5.5+z_loc(-35.,time) );\n    Sphere[12].radius = 0.8;\n    Sphere[12].materialID = 4;\n    \n    Sphere[13].center = vec3( -3.5+x_loc(-55.,time),  height(time,5.,3.)+ 0.8, -4.5+z_loc(-55.,time) );\n    Sphere[13].radius = 0.8;\n    Sphere[13].materialID = 4;\n    \n    Sphere[14].center = vec3( 0.5+x_loc(25.,time),  height(time,5.,6.) + 0.3, 7.5+z_loc(25.,time) );\n    Sphere[14].radius = 0.3;\n    Sphere[14].materialID = 2;\n    \n    Sphere[15].center = vec3( 2.5+x_loc(25.,time),  height(time,5.,4.) + 0.4, 1.5+z_loc(25.,time) );\n    Sphere[15].radius = 0.4;\n    Sphere[15].materialID = 4;\n    \n    Sphere[16].center = vec3( 3.5+x_loc(55.,time),  height(time,5.,5.5) + 0.35, 2.5+z_loc(55.,time) );\n    Sphere[16].radius = 0.35;\n    Sphere[16].materialID = 6;\n    \n    Sphere[17].center = vec3( 0.5+x_loc(5.,time),  height(time,5.,5.5) + 0.6, -4.5+z_loc(5.,time) );\n    Sphere[17].radius = 0.6;\n    Sphere[17].materialID = 2;\n\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.4, 0.8, 0.2 );\n    Material[2].k_a = 0.3 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.4 * Material[2].k_r;\n    Material[2].n = 128.0;\n    \n    //Copper material\n    Material[3].k_d = vec3( 0.780392, 0.568627, 0.113725 );\n    Material[3].k_a = vec3( 0.329412, 0.223529, 0.027451 );\n    Material[3].k_r = vec3( 0.992157, 0.941176, 0.807843 );\n    Material[3].k_rg = 0.4 * Material[3].k_r;\n    Material[3].n = 27.0;\n    \n    //Red diomand\n    Material[4].k_d = vec3( 0.614240, 0.041360, 0.041360 );\n    Material[4].k_a = vec3( 0.174500, 0.011750, 0.011750 );\n    Material[4].k_r = vec3( 0.727811, 0.626959, 0.626959 );\n    Material[4].k_rg = vec3( 0.550000, 0.550000, 0.550000);\n    Material[4].n = 128.0;\n    \n    //pearl\n    Material[5].k_d = vec3( 1.000000, 0.829000, 0.829000 );\n    Material[5].k_a = vec3( 0.250000, 0.207250, 0.207250 );\n    Material[5].k_r = vec3( 0.296648, 0.296648, 0.296648 );\n    Material[5].k_rg = 0.4 * Material[5].k_r;\n    Material[5].n = 128.0;\n    \n    //Bronze\n    Material[6].k_d = vec3( 0.714000, 0.428400, 0.181440 );\n    Material[6].k_a = vec3( 0.212500, 0.127500, 0.054000 );\n    Material[6].k_r = vec3( 0.393548, 0.271906, 0.166721 );\n    Material[6].k_rg = 0.4 * Material[6].k_r;\n    Material[6].n = 128.0;\n    \n    //violet\n    Material[7].k_d = vec3( 0.430000, 0.470000, 0.540000 );\n    Material[7].k_a = vec3( 0.110000, 0.060000, 0.090000 );\n    Material[7].k_r = vec3( 0.330000, 0.330000, 0.520000 );\n    Material[7].k_rg = 0.4 * Material[7].k_r;\n    Material[7].n = 128.0;\n\n    // Light 0.\n    Light[0].position = vec3( 15.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -10.0 + 30.0 * sin(iTime / 3.0), 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.1 + sin(iTime), 0.1, 0.1);\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n    \n}\n\n\n\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n   \n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    // (p.x-sph.center.x)^2 + (p.y-sph.center.y)^2 + (p.z-sph.center.z)^2=sph.radius^2\n    float t1,t2;\n    float a = dot(ray.d,ray.d);\n    float b = 2.0 * dot(ray.o - sph.center, ray.d);\n    float c = dot(ray.o - sph.center, ray.o - sph.center) - sph.radius * sph.radius;\n\n    if((b * b - 4.0 * a * c)<0.0) return false;\n\n    t1 = (-b - sqrt(b * b - 4. * a * c)) / (2. * a);\n    t2 = (-b + sqrt(b * b - 4. * a * c)) / (2. * a);\n\n    if(t1 < tmin || t2 > tmax) return false;\n   \n    t = t1;\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(ray.o - sph.center + t * ray.d);\n    return true;  \n}\n\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    float t1,t2;\n    float a = dot(ray.d,ray.d);\n    float b = 2.0 * dot(ray.o - sph.center, ray.d);\n    float c = dot(ray.o - sph.center, ray.o - sph.center) - sph.radius * sph.radius;\n    if((b * b - 4.0 * a * c)<0.0) return false;\n\n    t1 = (-b - sqrt(b * b - 4.0 * a * c)) / 2.0 * a;\n    t2 = (-b + sqrt(b * b - 4.0 * a * c)) / 2.0 * a;\n\n    if(t1 < tmin || t2 > tmax) return false;\n\n    return true; \n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    for(int i =0;i<NUM_PLANES;++i){\n        if(IntersectPlane(Plane[i],ray,DEFAULT_TMIN,DEFAULT_TMAX))\n        {\n            IntersectPlane(Plane[i],ray,DEFAULT_TMIN,DEFAULT_TMAX,temp_t,temp_hitPos,temp_hitNormal);\n            if(temp_t < nearest_t)\n            {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                \n                if(Plane[i].type == 1){\n                    float tempX = mod(nearest_hitPos.x,5.)-2.5;\n                    float tempZ = mod(nearest_hitPos.z,5.)-2.5;\n                    if(tempX*tempZ<0.)\n                        nearest_hitMatID = Plane[i].materialID_1;\n                    else\n                        nearest_hitMatID = Plane[i].materialID_2;\n                }\n                else if(Plane[i].type == 2){\n                    nearest_hitMatID = Plane[i].materialID_1;\n                }\n            }\n            hasHitSomething = true;\n        }\n    }\n\n    for(int i =0;i<NUM_SPHERES;++i){\n        if(IntersectSphere(Sphere[i],ray,DEFAULT_TMIN,DEFAULT_TMAX))\n        {\n            IntersectSphere(Sphere[i],ray,DEFAULT_TMIN,DEFAULT_TMAX,temp_t,temp_hitPos,temp_hitNormal);\n            if(temp_t < nearest_t)\n            {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n            }\n            hasHitSomething = true;\n        }\n    }\n\n\n    /////////////////////////////////\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  \n\n    for(int i=0;i<NUM_LIGHTS;i++){\n        Ray_t shadowRay;\n        vec3 disToLight = nearest_hitPos - Light[i].position;\n        shadowRay.o = Light[i].position;\n        shadowRay.d = normalize(disToLight);\n\n        \n        temp_hasHit = false;\n        for(int j=0;j<NUM_SPHERES;++j){\n            if(temp_hasHit) break;\n            temp_hasHit = IntersectSphere(Sphere[j],shadowRay,DEFAULT_TMIN,length(disToLight)-DEFAULT_TMIN);\n        }\n        for(int j=0;j<NUM_PLANES;++j){\n            if(temp_hasHit) break;\n            temp_hasHit = IntersectPlane(Plane[j],shadowRay,DEFAULT_TMIN,length(disToLight)-DEFAULT_TMIN);\n        }\n        vec3 color = PhongLighting(-shadowRay.d,nearest_hitNormal,normalize(ray.o-nearest_hitPos),temp_hasHit,Material[nearest_hitMatID],Light[i]);\n        I_local += color;\n    }\n\n    /////////////////////////////////\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    I_local = clamp(I_local,vec3(0.,0.,0.) ,vec3(1.,1.,1.) );\n\n    return I_local;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    float addPos = sin(iTime);\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 6.5 + addPos * 1.5, 3.0 , 14.5 + addPos * 1.5);\n    vec3 cam_lookat = vec3( 1.0, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4(I_result , 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}