{
    "Shader": {
        "info": {
            "date": "1711659529",
            "description": "CC0: Easter hack #1\nEaster holiday and I got some time to tinker\n",
            "flags": 32,
            "hasliked": 0,
            "id": "XccGW4",
            "likes": 42,
            "name": "Easter hack #1",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 894
        },
        "renderpass": [
            {
                "code": "// CC0: Easter tweaks\n//  Easter holiday and I got some time to tinker\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 isz = 1./RESOLUTION.xy;\n  vec2 q = fragCoord*isz;\n  fragColor = texture(iChannel0, q);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0: Easter tweaks\n//  Easter holiday and I got some time to tinker\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define TOLERANCE           0.0001\n#define MAX_RAY_LENGTH      40.0\n#define MAX_RAY_MARCHES     80\n#define NORM_OFF            0.005\n\nconst vec3 sunDir       = normalize(vec3(0.,0., 1.));\nconst vec3 sunCol       = HSV2RGB(vec3(0.6, .95, 1E-2))*1.;\nconst vec3 bottomBoxCol = HSV2RGB(vec3(0.7, 0.80, 0.5))*1.;\nconst vec3 topBoxCol    = HSV2RGB(vec3(0.57, 0.90, 1.))*1.;\nconst vec3 glowCol      = HSV2RGB(vec3(0.98, 0.825, 2E-3))*1.;\n  \nfloat g_gd;\nfloat g_gz;\n\nfloat segmentz(vec3 p, float r, float l) {\n  p.z = abs(p.z)-l*0.5;\n  float d0 = length(p.xy)-r;\n  float d1 = length(p)-r;\n  return p.z > 0. ? d1: d0;\n}\n\n\nfloat df(vec3 p, float t) {\n  float gz = p.z;\n  p.z -= -PI*TIME;\n  mat2 r = ROT(-0.1*p.z);\n  vec2 p0 = p.xy;\n  p0 *= r;\n  vec2 s0 = sign(p0);\n  p0 = abs(p0);\n  p0 -= 1.;\n  float d0 = length(p0) - 0.1;\n  vec2 p1 = p0;\n  p1 -= 0.25;\n  float off = 2.*s0.x+1.*s0.y;\n  float p1z = p.z+TIME*8.+4.*off;\n  float n1z = mod1(p1z, 24.0);\n  vec3 p1_ = vec3(p1, p1z);\n  float d1 = segmentz(p1_, 0.01, 8.);\n  float d = d0;\n\n  d = min(d, d1);\n\n  if (d1 < g_gd) {\n    g_gd = d1;\n    g_gz = t;\n  }\n  \n  float d2 = hexagon(p.xy*r, 2., .5);\n  d = min(d, -d2);\n  return d;\n}\n\nfloat df(vec3 p) {\n  return df(p, 1.);\n}\n\n// Back stepping technique by IQ\n#define BACKSTEP\nfloat rayMarch(vec3 ro, vec3 rd, float tinit) {\n  float t = tinit;\n  const float tol = TOLERANCE;\n#if defined(BACKSTEP)\n  vec2 dti = vec2(1e10,0.0);\n#endif  \n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t,t);\n#if defined(BACKSTEP)\n    if (d<dti.x) { dti=vec2(d,t); }\n#endif  \n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n#if defined(BACKSTEP)\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n#endif  \n  return t;\n}\n\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  \n  float tp0  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -5.0));\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp0 > 0.0) {\n    col += bottomBoxCol*exp(-0.5*(length((ro + tp0*rd).xz)));\n  }\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += topBoxCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += 0.2*topBoxCol*exp(-0.5*max(db, 0.0));\n    col += 0.05*sqrt(topBoxCol)*max(-db, 0.0);\n  }\n\n  col += sunCol/(1.00035-dot(sunDir, rd));\n  return clamp(col, 0., 10.); \n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  int ii;\n  g_gd = 1E3;\n  float t = rayMarch(ro, rd, 0.);\n  float gd = g_gd;\n  float gz = g_gz;\n\n  vec3 sky = render0(ro, rd);\n  vec3 col = sky;\n  \n  float fo = exp(-0.125*max(t-10., 0.));\n  float gfo = exp(-0.125*max(gz-10., 0.));\n  \n  if (t < MAX_RAY_LENGTH) {\n    vec3 p = ro+rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    vec3 rcol = render0(p, r);\n\n    vec3 drx = dFdx(r);\n    vec3 dry = dFdy(r);\n    float drxy = (dot(drx,drx)+dot(dry,dry));\n    \n\n    g_gd = 1E3;\n    float rt = rayMarch(p, r, 0.5);\n    float rgd = g_gd;\n    float rgz = g_gz;\n\n    float fre = 1.0+dot(rd,n);\n    fre *= fre;\n    fre = mix(0.3, 1.0, fre);\n    \n    col = vec3(0.);\n    col += rcol*fre;\n    col += smoothstep(2E-4, 0., drxy)*4.*gfo*glowCol/max(rgd, 4E-3)*fre;\n  }\n\n  col = mix(sky, col, fo);\n  col += gfo*glowCol/max(gd*abs(gd), 2E-4);\n\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  const float fov = 2.;\n\n  const vec3 up = vec3(0., 1., 0.);\n  const vec3 ro   = vec3(0.0, .5, -3.0);\n  const vec3 la   = vec3(0.0);\n\n  const vec3 ww = normalize(la-ro);\n  const vec3 uu = normalize(cross(up, ww));\n  const vec3 vv = cross(ww, uu);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = vec3(0.0); \n  col = render1(ro, rd);\n  col -= 1E-2*vec3(1.,2.,3.).zyx*(length(p)+0.25); \n  col = aces_approx(col);\n  col = sqrt(col);\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: Easter tweaks\n//  Easter holiday and I got some time to tinker\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n  \n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r, float rr) {\n  r -= rr;\n  const vec3 k = 0.5*vec3(-sqrt(3.0), 1.0, sqrt(4.0/3.0));\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y)-rr;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}