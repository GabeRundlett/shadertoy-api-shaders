{
    "Shader": {
        "info": {
            "date": "1701480361",
            "description": "My code from the Shader Jam / Inercia DemoParty - https://2023.inercia.pt/",
            "flags": 0,
            "hasliked": 0,
            "id": "DldfRl",
            "likes": 25,
            "name": "Inercia DemoParty #062 (YOT)",
            "published": 3,
            "tags": [
                "raymarching",
                "truchet",
                "demoparty",
                "inercia"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Inercia DemoParty Shader Jam!! Making my last Truchet for the year!!\n    \n    Year of Truchets #062\n    12/01/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n*/\n\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MIN_DIST .001\n#define MAX_DIST 90.\n#define SCALE .775\n\nmat2 rot (float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21( vec2 p ) { return fract(sin(dot(p,vec2(23.43,84.21))) *4832.3234); }\n\nfloat box(vec3 p, vec3 b, float r) {\n  vec3 q = abs(p)-b;\n  return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.)-r;\n}\nfloat trs(vec3 p, vec2 t){\n  vec2 q=vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nvec3 shp,fhp;\nvec2 sip,bid;\nfloat thsh;\n\nconst float sz = 1./SCALE;\nconst float hf = sz/2.;\nconst float bs = hf*.82;\nconst float cs = (hf*1.15);\nvec2 map(vec3 p) {\n    vec2 res = vec2(1e5,0);\n  p.z += 4.;\n  p.x -= T*.2;\n  \n  vec2 qid = floor((p.xy+hf)/sz);\n  vec3 qm = vec3(mod(p.xy+hf,sz)-hf,p.z);\n  \n  float hs = hash21(qid);\n  if(hs>.5) qm.x=-qm.x;\n  \n  vec2 q = length(qm.xy-hf)<length(qm.xy+hf)?qm.xy-hf:qm.xy+hf;\n  vec3 q3 = vec3(q,qm.z);\n  \n  float thx = .125+.11*sin(3.5+p.y*.75);\n  float t = trs(q3,vec2(hf,thx));\n\n  sip = qid;\n  thsh = hs;\n  \n  if(t<res.x) {\n    res = vec2(t,1.);\n    shp = qm;\n  }\n\n  float bx = box(qm+vec3(0,0,1.45),vec3(bs),.04);\n  if(bx<res.x) {\n    res = vec2(bx,2.);\n  }\n  \n  float cx = box(qm,vec3(bs),.04);\n  float sx = length(qm)-cs;\n  float nx = max(cx,-sx);\n  if(nx<res.x&&hs>.82) {\n      res = vec2(nx,3.);\n  }\n  return res;\n}\n\nvec3 normal(vec3 p, float t)\n{\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\nvec3 thp,ghp;\nvec2 tip,fid;\nfloat hsh;\nvec4 FC = vec4(.30,.33,.35,0.);\nvec3 hue(float a){\n  return  .45 + .45 * cos(PI2* a * vec3(1.,.15,.25));\n}\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last, inout float d) {\n\n    vec3 C = vec3(0);\n    float m = 0.;\n    vec3 p = ro;\n    \n    for(int i=0;i<164;i++) {\n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST)break;\n        d += i<62? ray.x*.25: ray.x*.75;\n        m  = ray.y;\n    } \n \n    thp = shp;\n    tip = sip;\n    hsh = thsh;\n    if(d<MAX_DIST)\n    {\n        vec3 n = normal(p,d);\n        vec3 lpos =  vec3(1,8,0);\n        vec3 l = normalize(lpos-p);\n\n        float diff = clamp(dot(n,l),0.,1.);\n        \n        float shdw = 1.0;\n        for( float t=.05; t < 18.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 18.*h/t);\n            t += h;\n            if( shdw<MIN_DIST || t>32. ) break;\n        }\n        diff = mix(diff,diff*shdw,.75);\n\n        vec3 view = normalize(p - ro);\n        vec3 ret = reflect(normalize(lpos), n);\n        float spec =  .75 * pow(max(dot(view, ret), 0.), 25.);\n        vec3 h = vec3(.05);\n\n        if(m==1.) {\n            thp /= 1./SCALE;\n            float dir = mod(tip.x + tip.y,2.) * 2. - 1.;  \n            vec2 uv = thp.xy-sign(thp.x+thp.y+.001)*.5;\n            float angle = atan(uv.x, uv.y);\n            float a = sin( dir * angle * 6. + T * 2.25);\n            a = abs(abs(a)-.45)-.35;\n            \n            vec3 nz = hue((p.x*.5+(T*.12))*.25);\n            h = mix(nz, vec3(1), smoothstep(.01, .02, a)); \n\n            ref= h==vec3(1)? vec3(0) : h ;\n        }\n        \n        if(m==2.) {\n            h=vec3(hsh*.5);\n            ref=h;\n        }\n  \n        if(m==3.) {   \n            h = hue((p.x*.5+(T*.12))*.25)*.3;\n            ref=h;\n        }\n        \n        C = h*diff+min(spec,shdw);\n        C = mix(FC.rgb,C,  exp(-.00005*d*d*d));\n    \n        ro = p+n*.001;\n        rd = reflect(rd,n);\n    \n    }else{\n        C = FC.rgb;\n    } \n    return vec4(C,d);\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    \n    float zoom = 6.;\n    vec3 ro = vec3(uv*zoom,-(zoom+10.));\n    vec3 rd = vec3(0,0,1.);\n\n    mat2 rx = rot(.4), ry = rot(2.8);\n    ro.yz *= rx,ro.xz *= ry;\n    rd.yz *= rx,rd.xz *= ry;\n\n    vec3 C = vec3(0),ref=vec3(0),fil=vec3(1);\n    \n    float d = 0.,a = 0.;\n    float numBounces = 2.;\n    \n    for(float i=0.; i<numBounces; i++) {\n        d =0.;\n        vec4 pass = render(ro, rd, ref, i==numBounces-1., d);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.) a = d;\n    }\n\n    float ff = hash21(uv);\n    if(ff>.5) C = mix(C,clamp(C-.05,vec3(0),vec3(1)),ff);\n    C = mix(FC.rgb,C,  exp(-.000001*a*a*a));\n\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}