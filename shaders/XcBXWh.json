{
    "Shader": {
        "info": {
            "date": "1706236423",
            "description": "A fractal pattern with sitar music.",
            "flags": 8,
            "hasliked": 0,
            "id": "XcBXWh",
            "likes": 20,
            "name": "Sitar synthesizer",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug",
                "sitar"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 598
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvec3 fractal(vec2 uv){\n    float scale = 1.5;\n    vec3 col = vec3(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        uv =\n            triangle_wave(uv-.5)-triangle_wave(uv.yx)\n            \n            //another nice pattern\n            //(1./2.+triangle_wave(uv-.5)-triangle_wave(uv.yx)/1.5)\n        ;\n        vec2 uv1 =\n            uv\n            //triangle_wave((uv-.5)/1.5)-triangle_wave((uv.yx)/1.5)\n        ;\n        \n        c1 =\n            max(abs(max(uv1.y,uv1.x)),1.-(c1))\n            //max(abs(max(uv1.y,uv1.x)),1.-(c1))\n        ;\n        c1 = abs(2.*c1-1.)\n        ;\n        col.x =\n            max(c1,col.x)\n\n            //blue and green\n            //max(length(uv-c1)/3.,col.x)\n           \n            //purple\n            //2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n            //black and white\n            //col.x\n        ;\n        col =\n            //abs(col-1.+c1*col.x)\n            \n            //more colorful\n            //1.-abs(col.yzx+c1*col.x)\n            \n            1.-abs(col-c1*col.x)\n            //c1*col.x-col\n        ;\n        col1 =\n            abs(col1-col*c1).yzx\n            //abs(col1.yzx-col*c1)\n        ;\n        //uv -= fract(uv)*2.;\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 64.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/16.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/DtycDc\n\nfloat fmod(float a, float b){\n\n    float m1 = floor(mod(b/2.,2.));\n    \n    a +=\n        m1\n    ;\n    float\n    a2 = mod(floor(a),b),\n    a3 =\n        mod(floor(a/(b)),b)\n    ;\n    return\n        mod(a2*(a3+floor(a/4.*sign(a2-a3))),b)\n    ;\n}\n\n\nfloat prime_rhythm(float time){\n    return\n        (1.+fmod(time/5.,2.))/(1.+fmod(time/3.,2.))\n    ;\n}\n\n#define fract1(a) (1.-fract(-a)*fract(-a))\nvec2 sitar0(vec2 a, vec2 nb){\nreturn a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.)));\n}\n\n#define sitar7(a,nb) (sitar0(a,nb)-sitar0(a,nb/2.)/2.)\n\nvec2 sitar1(vec2 a, vec2 nb){\n    return a/16./2.*abs((a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -(a*(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 sitar3(vec2 a, vec2 nb){\nreturn a/16./4.*abs(log(1./2.+.5*a*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./2.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n;\n}\n\nvec2 note1(vec2 rhythm,float attack,float duration){\nreturn vec2(\n      (-log(attack+.5/duration*fract1(rhythm.x))),(-log(attack+.5/duration*fract1(rhythm.y)))\n  );\n}\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar6(vec2 a, vec2 nb){\n    return a*a/16./2.*abs((.5*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -(a/4.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 gamelan1(vec2 a, vec2 nb){\n    return a*a/16./4.*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.)\n    ;\n}\n\nvec2 gamelan2(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./4.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 instrument1(vec2 a,vec2 nb,int instrument){ \n  vec2 sitar = \n  sitar5(a,nb),\n  \n  gamelan =\n      //sitar3(a,nb)\n      gamelan1(a,nb)\n  ,\n  \n  steel_drum = a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))      \n  \n  ,oud = a/16./8.*abs(log(1./4.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  +.5*log(1./4.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n\n  ,banjo = a/16./8.*abs(log(1./2.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  -log(1./2.+a*abs(abs(1./2.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n\n  ,harp = a/16./2.*abs(log(1./8.+a*abs(1./4.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./8.+a*abs(abs(1./4.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.))) \n\n  \n  \n  ;\n  switch(instrument){\n  case 1: return gamelan;\n  case 2: return oud;\n  case 3: return steel_drum;\n  case 4: return sitar;\n  case 5: return harp;\n  case 6: return banjo;\n  default:\n  return\n      oud;\n}\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration,float attack){\n  float s1 =\n      8.,\n  tempo1 =\n      //1.\n      //divide by prime numbers to get an interesting rhythm\n      prime_rhythm(time)\n  ,\n  t = time/tempo1,\n  t1 = fmod(t*2./(1.+fmod(t/4.,2.)),2.),\n  t5 = t/(1.+fmod(t/8.,2.))/(1.+fmod(t/4.,2.)),\n  t3 = (1.+fmod(t5/2.,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6+mod(t6/8.,3.)-mod(t6/8.,2.),s1/2.)/2.),\n      //floor(fmod(t6+floor(t6/8.),s1/2.)/2.),\n      //floor(2.*fmod(floor(t6)*3.,s1/2.)/2.),\n  m2 =\n      1. + fmod(t/t3/2.,s1/2.)\n  ;\n  vec2\n  rhythm=\n      vec2(t)\n      //vec2(t5*2.)\n      //vec2(t*t3)\n      //vec2(t*2./t3)\n      \n  ,a=\n      note1(rhythm,attack,duration)\n  ,\n  nb = vec2(\n      t*pow(2.,(m3+m2-t1*4.)/7.+scale)*tempo1\n  ),\n  nb1 = vec2(t*pow(2.,(4.+t1*4.)/7.+scale))*tempo1\n  ;\n  \n  return\n      instrument1(a/2.,nb/2.,instrument)+instrument1(a,nb,instrument)/2.\n      //instrument1(a,nb,instrument)-instrument1(a,nb/2.,instrument)/2.-instrument1(a,nb/4.,instrument)/4.\n      //instrument1(a,nb,instrument)-instrument1(a/2.,nb*2.,instrument)\n  ;\n}\n\nvec2 sitar1(int a,float b,float scale,int instrument,float attack){\n    return\n        2.*(mainSound1(a,b,scale,instrument,2.,attack*8.)-mainSound1(a,b,scale-1.,instrument,1.,attack*8.)/2.)\n    ;\n}\n\nvec2 sitar(int a,float b,float scale,int instrument,float attack){\n    return\n        //mainSound1(a,b,scale,4,2.,1./64.*8.)+mainSound1(a,b,scale-1.,1,2.,1./64.*8.)\n        \n        (mainSound1(a,b,scale,instrument,1.,attack)-mainSound1(a,b,scale,instrument,1./2.,attack))\n        //-.5*(mainSound1(a,b,scale-1.,instrument,1.,attack)-mainSound1(a,b,scale-1.,instrument,1./2.,attack))\n    ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp, time,scale,instrument,1.,1./64.);\n}\n\nvec2 mainSound(int a,float b){\n    return\n        //sitar (sounds like gamelan using sitar1)\n        4.*sitar(a,b,7.5,4,1./64.*2.)*4.\n        //sitar(a,b/2.,7.5,4,1./64./4.)+sitar(a,b,5.5,4,1./64./2.)\n        //sitar1(a,b,7.5,4,1./64./2.)\n        \n        //gamelan\n        //2.*sitar(a,b,7.5,1,1./64./16./4.)\n\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}