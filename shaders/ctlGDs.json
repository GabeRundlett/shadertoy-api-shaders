{
    "Shader": {
        "info": {
            "date": "1672682526",
            "description": "monogram/sigil extruded (as suggested by @jt)\nd\n  a\n    n\nw/ alternative style \"n\" or \"N\", not sure which is better...",
            "flags": 0,
            "hasliked": 0,
            "id": "ctlGDs",
            "likes": 8,
            "name": "monogram/sigil extruded",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "sigil",
                "extrusion",
                "dan",
                "monogram"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "const float sixto = 1.0 / 6.0;\n\nfloat sdMonogram(vec2 p, float t, vec4 dann) {\n    float d = 1.0;\n    // d\n    if (bool(dann.x)) {\n        d = sdSegment(p, vec2(0, -1.0 * sixto), vec2(0, +3.0 * sixto), t);\n        d = opUnion(d, opOnion(sdBox(p + vec2(+sixto, 0), vec2(sixto)), t));\n    }\n    // a\n    if (bool(dann.y)) {\n        d = opUnion(d, sdSegment(p, vec2(-1.0 * sixto, 1.0 * sixto), vec2(-1.0 * sixto, 2.0 * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(-1.0 * sixto, 2.0 * sixto), vec2(1.0 * sixto, 2.0 * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(1.0 * sixto, 2.0 * sixto), vec2(1.0 * sixto, 0.0 * sixto), t));\n        d = opUnion(d, opOnion(sdBox(p + vec2(0, +sixto), vec2(sixto)), t));\n    }\n    // n/N\n    if (bool(dann.z) || bool(dann.w)) {\n        d = opUnion(d, sdSegment(p, vec2(0, 0), vec2(0.0, -3.0 * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(0, -sixto), vec2(2.0 * sixto,  (bool(dann.w) ? -1.0 : -3.0) * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(2.0 * sixto, -3.0 * sixto), vec2(2.0 * sixto, -sixto), t));\n    }\n    return d;\n}\n\nfloat sdSigil(vec2 p, float t, vec4 dann) {\n    float d = sdMonogram(p + vec2(sixto, -4.0 * sixto), t, dann);\n    d = opUnion(d, sdMonogram(rotmat2(radians(090.0)) * p + vec2(sixto, -4.0 * sixto), t, dann));\n    d = opUnion(d, sdMonogram(rotmat2(radians(180.0)) * p + vec2(sixto, -4.0 * sixto), t, dann));\n    d = opUnion(d, sdMonogram(rotmat2(radians(270.0)) * p + vec2(sixto, -4.0 * sixto), t, dann));\n    return d;\n}\n\nfloat scene(vec3 p) {\n    float t = 0.125 * sixto;\n    float y = abs(-cos(iTime / 2.0) * 5.0);\n    p.xy = rotmat2(iTime / 3.0) * p.xy;\n    float d = sdSigil(p.xy, t, vec4(y > 1.0, y > 2.0 , y > 3.0, y > 4.0));\n    return opExtrusion(p.z, d, 0.25);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  float d;\n\n  for (int i = 0; i < MAX_ITER; i++) {\n    vec3 p = ro + depth * rd;\n    d = scene(p);\n    depth += d;\n    if (d < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  d = depth;\n  \n  return d;\n}\n\nvec3 normal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy) +\n      e.yyx * scene(p + e.yyx) +\n      e.yxy * scene(p + e.yxy) +\n      e.xxx * scene(p + e.xxx));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.y;\n\n    if (m == vec2(0.0)) m = vec2(0.5);\n\n    vec3 col = vec3(0);\n    vec3 lp = vec3(0);\n    vec3 ro = vec3(0, 0, 3);\n\n    float camRadius = 1.0;\n    ro.yz = ro.yz * camRadius * rotmat2(mix(-PI/2., PI/2., m.y));\n    ro.xz = ro.xz * rotmat2(mix(-PI, PI, m.x)) + vec2(lp.x, lp.z);\n\n    vec3 rd = camera(ro, lp) * normalize(vec3(p, -1));\n\n    float d = march(ro, rd);\n\n    if (d > MAX_DIST) {\n        col = COLOR_BACKGROUND;\n    } else {\n        vec3 p = ro + rd * d;\n        vec3 norm = normal(p);\n\n        vec3 lightPos = vec3(0, 2, 2);\n        vec3 lightDir = normalize(lightPos - p) * 0.65;\n\n        float diff = clamp(dot(norm, lightDir), 0.0, 1.0) * 0.5 + 0.5;\n\n        vec3 rnd = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n        col = vec3(diff) + rnd;    \n    }\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// math\n//// constants\n#define PI 3.14159265359\n#define cos30 cos(radians(30.0))\n#define sqrt3 sqrt(3.0)\n//// schwarz triangle\n#define v1 vec2(0, 0)\n#define v2 vec2(0, cos30)\n#define v3 vec2(0.5, cos30)\n\n// ray marching\n#define MAX_ITER 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define PRECISION 0.001\n#define EPSILON 0.0005\n#define COLOR_BACKGROUND vec3(0, 0, 0)\n#define COLOR_AMBIENT vec3(0.42, 0.20, 0.1);\n\nmat2 rotmat2(float angle) {\n    float c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\n//// signed distance functions\n////// ------------------------------------------------\n////// https://iquilezles.org/articles/distfunctions/\n////// https://iquilezles.org/articles/distfunctions2d/\n////// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nfloat opUnion(float d1, float d2) {\n    // https://iquilezles.org/articles/distfunctions/\n    return min(d1, d2); \n}\n\nfloat opOnion(in float sdf, in float thickness) {\n    // https://iquilezles.org/articles/distfunctions/\n    return abs(sdf) - thickness;\n}\n\nfloat opExtrusion(in float p, in float d, in float h) {\n    // modified: https://iquilezles.org/articles/distfunctions/\n    vec2 w = vec2(d, abs(p) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\nfloat sdSegment(vec2 p, vec2 a, vec2 b, float r) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\n////// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n////// https://iquilezles.org/articles/distfunctions/\n////// https://iquilezles.org/articles/distfunctions2d/\n////// ------------------------------------------------\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}