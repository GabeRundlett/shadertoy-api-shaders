{
    "Shader": {
        "info": {
            "date": "1605403512",
            "description": "yep.",
            "flags": 0,
            "hasliked": 0,
            "id": "wscBzS",
            "likes": 3,
            "name": "waving colors 3",
            "published": 3,
            "tags": [
                "tags",
                "comma",
                "separated"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "float aspect;\nfloat phTex;\n    \n// https://iquilezles.org/articles/palettes for more information\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 palette(float t) {\n    vec3 c = pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67));\n    c = c * 0.9 + 0.1;\n    return c;\n}\n\nvec3 color(float u1, float u2, float v) {\n    vec2 uv = vec2(u1 * iResolution.x / 256.0, v * iResolution.y / 256.0 - iTime * 0.0002 * phTex * iResolution.y);\n    float noise = (0.5 + 0.7 * texture(iChannel0, uv).x);\n    vec3 c = palette(u2);\n    return c * mix(1.0, noise, phTex);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    aspect = iResolution.x / iResolution.y;\n        \n    // artificial down-resing to test AA\n    const float pixelate = 1.0; //  + (sin(iTime) * 0.5 + 0.5) * 14.0;\n    \n    fragCoord = round(fragCoord / pixelate);\n    \n    vec2 res = ceil(iResolution.xy / pixelate);\n    \n    vec2 uv = fragCoord/res.xy;\n    \n    const int bins = int(40.0 / pixelate);\n\n    vec3 col = vec3(0.0);\n    \n    // phased-in behavior\n    float phWig = smoothstep(3.0, 15.0, iTime);\n    float phBin = smoothstep(6.0, 18.0, iTime);\n    float phTap = smoothstep(9.0, 30.0, iTime);\n    float phPin = smoothstep(0.0, 15.0, iTime);\n          phTex = smoothstep(1.0, 09.0, iTime);\n    float phCol = smoothstep(9.0, 45.0, iTime);\n    \n    float accum = 0.0;\n\n    // horizontal AA amount\n    float binEdge = 4.0 / res.x;\n\n    \n    for (int bin = 0; bin < bins; ++bin) {\n        float binMid = (float(bin) + 0.5)/float(bins);\n        float t = uv.x;\n        \n        // taper the overall thing\n        t = ((t - 0.5) * (1.0 + pow(uv.y, 0.8) * 0.3 * phPin)) + 0.5;\n        \n        // wiggle the things\n        float fmod = sin(binMid * 3.0 - iTime * 0.31) * 0.5 + 0.5;\n        t += abs(uv.x - 0.5) * phWig * uv.y * 0.2 * sin(uv.y * 20.0 - iTime * (1.0 + phBin * binMid + 0.6) + fmod);\n        \n        // wiggle the overall thing a tiny bit\n        t += 0.01 * phWig * uv.y * sin(uv.y * 7.0 - iTime);\n        \n        float binWidth = 1.0 / float(bins) * (1.0 - phTap * uv.y * 0.75);\n        float binBeg = binMid - binWidth * 0.5;\n        float binEnd = binMid + binWidth * 0.5;\n        if (t >= binBeg - binEdge && t < binEnd + binEdge) {\n            // AA:\n            float amount = 1.0;\n            if (t < binBeg) {\n                amount = smoothstep(binBeg - binEdge, binBeg, t);\n            }\n            else if (t > binEnd) {\n                amount = 1.0 - smoothstep(binEnd, binEnd + binEdge, t);\n            }\n            \n            float uvyMod = mod(float(bin), 2.0) * 2.0 - 1.0;\n            float st1 = sin(iTime * 0.04) * 0.5 + 0.5;\n            float tMod = 1.0 * mix(1.0, uvyMod, phCol * st1);\n            vec3 c = color(t, t + tMod, uv.y * uvyMod);\n            c = mix(c, vec3(0.2), uv.y * 0.9 * phTex);\n    \t\tcol += c * amount;\n            accum += amount;\n        }\n        binBeg = binEnd;\n    }\n    \n    col /= max(accum * 1.0, 1.0);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}