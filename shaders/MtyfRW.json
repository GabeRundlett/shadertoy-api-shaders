{
    "Shader": {
        "info": {
            "date": "1541949105",
            "description": "Lots of fugu looking at you (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "MtyfRW",
            "likes": 14,
            "name": "Fugu Watching",
            "published": 3,
            "tags": [
                "lighting",
                "water",
                "repetition",
                "fish",
                "fibonacci"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 776
        },
        "renderpass": [
            {
                "code": "// \"Fugu Watching\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Lots of fugu looking at you (mouseable)\n\n#define AA  1   // optional antialiasing\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRndBoxDf (vec3 p, vec3 b, float r);\nvec3 HsvToRgb (vec3 c);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 RotToDirLim (vec3 v1, vec3 v2, vec3 p, float aMax);\nvec2 Rot2D (vec2 q, float a);\nfloat Minv3 (vec3 p);\nvec3 Hashv3f (float p);\n\nvec3 fRep, kRep, bRep, pFish, ltDir, vuPos, fMove, fCell, fShift, eyeOff, vRan;\nfloat dstFar, tCur, szFac, bodyEx, spkEx, mthShp, eyeBlnk, fHue;\nint idObj;\nbool fOcc, kOcc, bOcc;\nconst int idBody = 1, idFinV = 2, idFinL = 3, idTail = 4, idMouth = 5, idEye = 6,\n   idKelp = 7, idBub = 8;\nconst float pi = 3.14159, phi = 1.618034;\n\nvec3 RdNonz (vec3 rd)\n{\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  return rd;\n}\n\nvoid FSetConf (vec3 cId)\n{\n  vRan = Hashv3f (dot (cId, vec3 (31., 41., 51.)) + 99.);\n  bodyEx = SmoothBump (0.25, 0.75, 0.15, mod (0.4 * tCur + 2. * pi * vRan.y, 1.));\n  spkEx = SmoothBump (0.65, 0.85, 0.05, mod (0.2 * tCur + 2. * pi * vRan.y, 1.));\n  mthShp = sin (6. * tCur + 2. * pi * vRan.x);\n  szFac = 4. - 0.5 * vRan.x;\n  fShift = vec3 (0., 0., 4. * vRan.y - 2.);\n  fOcc = (vRan.z > 0.6);\n  eyeBlnk = vRan.y;\n  fHue = vRan.x;\n}\n\nfloat DstTail ()\n{\n  vec3 p;\n  float d, r, a;\n  p = pFish;\n  p.yz -= vec2 (0.11, -0.45);\n  p.xz = Rot2D (p.xz, 0.5 * cos (2. * tCur + 2. * pi * vRan.z - 3. * p.y + 5. * p.z));\n  a = 0.003 * sin (32. * atan (p.y, p.z));\n  r = length (p.yz);\n  d = min (0.01 - 0.008 * smoothstep (0.15, 0.25, r) - abs (p.x -\n     a * smoothstep (0.04, 0.08, r)), 0.35 - 0.05 * p.y - 0.01 * cos (a * 1024.) - r);\n  d = - SmoothMin (abs (p.y) + 0.3 * p.z, SmoothMin (-0.3 * abs (p.y) - p.z, d, 0.02), 0.02);\n  return d;\n}\n\nfloat DstFinL ()\n{\n  vec3 p;\n  float d, r, a, t, w;\n  p = pFish;\n  t = 5. * tCur + 2. * pi * vRan.z + 0.2 * sign (p.x);\n  p.x = abs (p.x) - 0.26 - 0.02 * bodyEx;\n  p.xz = Rot2D (p.xz, 0.4 * pi);\n  w = 0.15 * (1. - 0.15 * bodyEx) * (1. + 5. * length (p));\n  p.yz = Rot2D (p.yz, 0.2 + 0.5 * w * cos (t + 2. * atan (p.x, - p.y)) - 0.5 * pi);\n  p.xz = Rot2D (p.xz, 1.2 + 0.75 * bodyEx + w * sin (t - w) - 0.5 * pi);\n  a = atan (p.x, - p.y);\n  r = length (p.xy);\n  d = min (0.01 - 0.008 * smoothstep (0.2, 0.3, r) -\n     abs (p.z + 0.002 * sin (32. * a) * smoothstep (0.05, 0.08, r)),\n     0.4 - 0.15 * smoothstep (1., 3., abs (a)) - 0.01 * cos (32. * a) - r);\n  d = - SmoothMin (-0.2 * p.x + p.y, SmoothMin (p.x - 0.7 * p.y, d, 0.02), 0.02);\n  return d;\n}\n\nfloat DstFinV ()\n{\n  vec3 p;\n  float d, r, a, y;\n  p = pFish;\n  p.y = abs (p.y + 0.035 * bodyEx) - 0.035 * bodyEx - 0.26 - 0.02 * sign (p.y);\n  p.z -= -0.1;\n  y = smoothstep (0., 0.2, p.y);\n  p.z *= 1. - 0.3 * y * y;\n  a = - cos (4. * tCur + 2. * pi * vRan.z + 5. * (- p.y + p.z)) * (0.1 - 0.3 * p.z);\n  p.xz = Rot2D (p.xz, a);\n  p.xy = Rot2D (p.xy, a);\n  a = 0.0025 * sin (32. * atan (p.y, p.z));\n  r = length (p.yz);\n  d = min (0.01 - 0.009 * smoothstep (0.1, 0.2, r) -\n     abs (p.x + a * smoothstep (0.04, 0.1, r)), 0.22 - 0.015 * cos (512. * a) - r);\n  d = - SmoothMin (p.y + 0.4 * p.z, SmoothMin (-0.4 * p.y - p.z, d, 0.02), 0.02);\n  return d;\n}\n\nfloat DstMth ()\n{\n  vec3 p;\n  p = pFish;\n  p.yz -= vec2 (0.1, 0.34 + 0.02 * bodyEx - 2. * p.x * p.x);\n  p.xy *= vec2 (0.5 + 0.1 * mthShp, 1. - 0.5 * mthShp);\n  return PrCylAnDf (p, 0.015, 0.0015, 0.03);\n}\n\nvec4 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vec4 (sqrt (ddMin), vfMin);\n}\n\nvec2 SpkShp ()\n{\n  vec4 f4;\n  vec3 uf;\n  float s;\n  f4 = SphFib (normalize (pFish + vec3 (0., 0., 0.1)), 2048.);\n  uf = f4.yzw;\n  s = smoothstep (0.95, 0.99, dot (uf, normalize (vec3 (0., 0.24, 1.))));\n  if (s == 0.) s = smoothstep (0.92, 0.99, dot (uf, normalize (vec3 (0., 0.35, -1.))));\n  if (s == 0.) s = smoothstep (0.9, 0.94, dot (uf, normalize ((eyeOff - vec3 (0., 0., -0.03)) *\n     vec3 (sign (uf.x), 1., 1.))));\n  if (s == 0.) s = smoothstep (0.97, 0.99, dot (uf, normalize (vec3 (sign (uf.x), 0., 0.25))));\n  if (s == 0.) s = smoothstep (0.97, 0.99, dot (uf, normalize (vec3 (0., sign (uf.y), -0.1))));\n  return vec2 (1. - s, f4.x);\n}\n\nfloat DstBody ()\n{\n  vec3 p, q;\n  vec2 spk;\n  float spkLen, db, dt;\n  spk = SpkShp ();\n  spkLen = spk.x * (1. - smoothstep (0.001, 0.02, spk.y)) * (0.001 + 0.04 * spkEx);\n  p = pFish;\n  p.y -= -0.03 * bodyEx;\n  p.x *= 1. + 1.5 * (p.y + 0.2) * (p.y + 0.2);\n  p.xy *= 1. + 0.5 * smoothstep (0., 0.5, - p.z);\n  q = (p - vec3 (0., 0.2 + 0.025 * bodyEx, 0.5 * (p.y - 0.2) - 0.14)) * vec3 (1.4, 1.7, 0.6);\n  dt = PrSphDf (q, 0.4 - 0.2 * smoothstep (0., 1.5, 1.3 - p.z) + spkLen);\n  q = p * vec3 (1.2, 1.2, 1. + 0.5 * smoothstep (0., 0.5, - p.y - p.z));\n  db = PrSphDf (q, 0.37 + smoothstep (0., 1.7, - p.z) + 0.03 * bodyEx + spkLen);\n  q = pFish;\n  q.yz -= vec2 (0.1, 0.1);\n  q.xy *= vec2 (0.5, 1.) + vec2 (0.1, -0.4) * mthShp;\n  return SmoothMin (max (db, - PrCylDf (q, 0.02, 0.3)), dt, 0.05);\n}\n\nfloat FishDf (vec3 p)\n{\n  float dMin, d, a, c;\n  p += fShift;\n  p /= szFac;\n  d = PrSphDf (p, 0.8);\n  if (d < 0.1) {\n    c = cos (2. * tCur + 2. * pi * vRan.x);\n    a = -0.5 * smoothstep (-0.2, 1.1, - p.z) * c;\n    p.xz = Rot2D (p.xz, 0.1 * c + a);\n    p.xy = Rot2D (p.xy, 0.5 * a);\n    pFish = p;\n    dMin = 0.3 * DstBody ();\n    idObj = idBody;\n    d = DstMth ();\n    if (abs (d) < dMin) idObj = idMouth;\n    dMin = SmoothMin (dMin, d, 0.01);\n    d = 0.6 * DstTail ();\n    if (d < dMin) idObj = idTail;\n    dMin = SmoothMin (dMin, d, 0.01);\n    d = 0.6 * DstFinL ();\n    if (d < dMin) idObj = idFinL;\n    dMin = SmoothMin (dMin, d, 0.01);\n    d = 0.7 * DstFinV ();\n    if (d < dMin) idObj = idFinV;\n    dMin = SmoothMin (dMin, d, 0.01);\n    p.x = abs (p.x);\n    d = PrSphDf (p - eyeOff, 0.13);\n    if (d < dMin) idObj = idEye;\n    dMin = SmoothMin (dMin, d, 0.02);\n  } else dMin = d;\n  return szFac * dMin;\n}\n\nfloat FObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, cIdP, s;\n  float dHit, d;\n  rd = RdNonz (rd);\n  dHit = 0.1;\n  cIdP = vec3 (-99.);\n  for (int j = 0; j < 120; j ++) {\n    p = ro + rd * dHit + fMove;\n    cId = floor (p / fRep);\n    if (cId != cIdP) {\n      cIdP = cId;\n      FSetConf (cId);\n    }\n    d = fOcc ? FishDf (p - fRep * (cId + 0.5)) : dstFar;\n    s = (fRep * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (Minv3 (s)) + 0.01);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 FObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (- FishDf (p + e.xxx), FishDf (p + e.xyy), FishDf (p + e.yxy), FishDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvoid KSetConf (vec3 cId)\n{\n  vRan = Hashv3f (dot (cId.xz, vec2 (37., 47.)));\n  kOcc = (vRan.x * smoothstep (7., 10., length (cId)) > 0.9);\n}\n\nfloat KelpDf (vec3 p)\n{\n  p.xz -= 1.;\n  p.xz = Rot2D (p.xz, p.y * pi * floor (vRan.y * 10.) / 40.);\n  return 0.9 * PrRndBoxDf (p, vec3 ((0.1 + 0.5 * vRan.x) *\n    (0.8 + 0.2 * sin (0.2 * pi * p.y)), 30., 0.02 + 0.01 * vRan.y), 0.005);\n}\n\nfloat KObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, cIdP, s;\n  float dHit, d;\n  rd = RdNonz (rd);\n  dHit = 0.1;\n  cIdP = vec3 (-99.);\n  for (int j = 0; j < 80; j ++) {\n    p = ro + rd * dHit;\n    p.x += sin (tCur + p.y * 0.2) * 0.5;\n    cId = floor (p / kRep);\n    if (cId != cIdP) {\n      cIdP = cId;\n      KSetConf (cId);\n    }\n    d = kOcc ? KelpDf (p - kRep * (cId + 0.5)) : dstFar;\n    s = (kRep * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (Minv3 (s)) + 0.01);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 KObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (- KelpDf (p + e.xxx), KelpDf (p + e.xyy), KelpDf (p + e.yxy), KelpDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvoid BSetConf (vec3 cId)\n{\n  vRan = Hashv3f (dot (cId, vec3 (33., 43., 53.)));\n  bOcc = (vRan.x * smoothstep (2., 5., length (cId)) > 0.95);\n}\n\nfloat BubDf (vec3 p, vec3 pw)\n{\n  vec3 b, vr;\n  float s, t, r, d, a;\n  t = tCur;\n  vr = vRan - 0.5;\n  s = pow (fract (dot (vr, vec3 (1.)) * 100.), 4.);\n  pw.y += t;\n  pw = 7. * pw + 2. * pi * vr + vec3 (t, 0., t);\n  d = sin ((t + vr.y) * 3. * pi * (1. - s)) * 0.3 * vr.x * (1. - s);\n  a = vr.z * t;\n  b = d * vec3 (cos (a), 0., sin (a));\n  r = 0.1 - 0.05 * s + dot (sin (pw), vec3 (1.)) * s * 0.02;\n  return 0.9 * PrSphDf (p - b, r);\n}\n\nfloat BObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, cIdP, s;\n  float dHit, d;\n  rd = RdNonz (rd);\n  dHit = 0.1;\n  cIdP = vec3 (-99.);\n  for (int j = 0; j < 80; j ++) {\n    p = ro + rd * dHit;\n    p.y -= tCur * 4. + 40.;\n    cId = floor (p / bRep);\n    if (cId != cIdP) {\n      cIdP = cId;\n      BSetConf (cId);\n    }\n    d = bOcc ? BubDf (p - bRep * (cId + 0.5), p) : dstFar;\n    s = (bRep * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (Minv3 (s)) + 0.01);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 BObjNf (vec3 p, vec3 pw)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (- BubDf (p + e.xxx, pw), BubDf (p + e.xyy, pw), BubDf (p + e.yxy, pw),\n     BubDf (p + e.yyx, pw));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 FishCol (vec3 p)\n{\n  vec4 col4;\n  vec3 ve;\n  vec2 spk;\n  float s, t;\n  col4 = vec4 (HsvToRgb (vec3 (0.15 + 0.8 * fHue, 0.8, 1.)), 0.2);\n  if (idObj == idBody) {\n    col4.rgb *= 0.7 + 0.3 * smoothstep (-0.1, 0.1, pFish.y);\n    spk = SpkShp ();\n    col4.rgb = mix (col4.rgb, vec3 (0.9, 0.7, 0.7), 0.5 * smoothstep (0., 0.01, spk.x) *\n       SmoothBump (0.25, 0.75, 0.1, mod (128. * atan (0.7 * pFish.x, pFish.y - 0.1) / pi, 1.)));\n    col4 = mix (col4, vec4 (0.9, 0.9, 0.95, 0.5), 0.5 * step (0.02, spk.x) * step (spk.y, 0.02));\n  } else if (idObj == idMouth) {\n    col4.rgb = mix (col4.rgb, vec3 (0.9, 0.7, 0.7), 0.5);\n  } else if (idObj == idFinV || idObj == idFinL) {\n    col4.rgb = mix (col4.rgb, vec3 (1.), 0.3 * smoothstep (0.4, 0.5, length (pFish)));\n  } else if (idObj == idTail) {\n    col4.rgb = mix (col4.rgb, vec3 (1.), 0.3 * smoothstep (0.6, 0.7, length (pFish)));\n  } else if (idObj == idEye) {\n    if (abs (pFish.y - eyeOff.y - 0.04) < 0.001 + 0.1 * SmoothBump (0.13, 0.87, 0.07,\n       mod (0.5 * tCur + 2. * pi * eyeBlnk, 1.))) {\n      ve = eyeOff * vec3 (sign (pFish.x), 1., 1.) * szFac + fCell - (fShift + fMove);\n      ve = RotToDirLim (normalize (vuPos - ve), vec3 (sign (pFish.x), 0., 0.), p - ve, 0.35 * pi);\n      s = length (ve.yz) / szFac;\n      t = (1. - step (s, 0.06 + 0.02 * SmoothBump (0.25, 0.75, 0.25,\n         mod (12. * atan (ve.y, ve.z) / pi, 1.))));\n      col4.rgb = vec3 (1.) * t * (0.5 + 0.5 * smoothstep (0.07, 0.1, s));\n      col4.a = (t == 0.) ? -1. : 0.3;\n    } else idObj = idBody;\n  }\n  return col4;\n}\n\nfloat WatShd (vec3 rd)\n{\n  vec2 p;\n  float t, h;\n  rd = RdNonz (rd);\n  p = 20. * rd.xz / rd.y;\n  t = tCur * 2.;\n  h = sin (2. * p.x + 0.77 * t + sin (0.73 * p.y - t)) + sin (0.81 * p.y - 0.89 * t +\n     sin (0.33 * p.x + 0.34 * t)) + 0.5 * (sin (1.43 * p.x - t) + sin (0.63 * p.y + t));\n  h *= 0.04 * smoothstep (0.5, 1., rd.y);\n  return h;\n}\n\nfloat TurbLt (vec3 p, vec3 vn, float t)\n{\n  vec4 b;\n  vec2 q, qq;\n  float c, tt;\n  q = 2. * pi * mod (vec2 (dot (p.yzx, vn), dot (p.zxy, vn)), 1.) - 256.;\n  t += 11.;\n  c = 0.;\n  qq = q;\n  for (float j = 1.; j <= 7.; j ++) {\n    tt = t * (1. + 1. / j);\n    b = sin (tt + vec4 (- qq + vec2 (0.5 * pi, 0.), qq + vec2 (0., 0.5 * pi)));\n    qq = q + tt + b.xy + b.zw;\n    c += 1. / length (q / sin (qq));\n  }\n  return clamp (pow (abs (1.25 - abs (0.167 + 40. * c)), 8.), 0., 1.);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = tCur * 4.;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return mix (vec3 (0., 0.5, 0.8), vec3 (0.25, 0.4, 1.), 0.5 + 0.5 * rd.y) *\n     (0.24 + 0.44 * (rd.y + 1.) * (rd.y + 1.)) * (1. + gd * 0.05);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, cId, p;\n  float dstObj, d;\n  fRep = vec3 (6., 6.5, 11.5);\n  kRep = vec3 (4., 40., 4.);\n  bRep = vec3 (4., 4., 4.);\n  eyeOff = vec3 (0.13);\n  fMove = vec3 (0., 0., -1.5 * tCur);\n  bgCol = BgCol (rd);\n  dstObj = dstFar;\n  d = FObjRay (ro, rd);\n  if (d < dstObj) {\n    dstObj = d;\n  }\n  d = KObjRay (ro, rd);\n  if (d < dstObj) {\n    dstObj = d;\n    idObj = idKelp;\n  }\n  d = BObjRay (ro, rd);\n  if (d < dstObj) {\n    dstObj = d;\n    idObj = idBub;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    if (idObj <= idEye) {\n      p = ro + fMove;\n      cId = floor (p / fRep);\n      FSetConf (cId);\n      fCell = fRep * (cId + 0.5);\n      vn = FObjNf (p - fCell);\n      col4 = FishCol (ro);\n    } else if (idObj == idKelp) {\n      p = ro;\n      p.x += sin (tCur + p.y * 0.2) * 0.5;\n      cId = floor (p / kRep);\n      KSetConf (cId);\n      vn = KObjNf (p - kRep * (cId + 0.5));\n      col4 = vec4 (0.2, 0.7, 0.3, 0.);\n    } else if (idObj == idBub) {\n      p = ro;\n      p.y -= tCur * 4. + 40.;\n      cId = floor (p / bRep);\n      BSetConf (cId);\n      vn = BObjNf (p - bRep * (cId + 0.5), p);\n      col4 = vec4 (0.7 * mix (vec3 (1.), BgCol (reflect (rd, vn)), 0.7), 0.5);\n    }\n    if (col4.a >= 0.) {\n      col = col4.rgb * (0.1 + 0.2 * bgCol + 0.7 * max (dot (vn, ltDir), 0.)) +\n         col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n      if (idObj != idEye) col += 0.1 * TurbLt (0.5 * ro, abs (vn), 0.5 * tCur) *\n         smoothstep (-0.3, -0.1, vn.y);\n      else col = mix (col, vec3 (1., 0., 0.), 0.1 * dot (vn, - rd));\n      if (idObj == idBub) col *= 0.5 + 0.5 * clamp (rd.y + 1., 0., 1.5);\n    } else {\n      rd = reflect (rd, vn);\n      col = 0.5 * (BgCol (rd) + WatShd (rd));\n    }\n    col = mix (col, bgCol, smoothstep (0.3, 0.95, dstObj / dstFar));\n  } else col = bgCol + WatShd (rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = pi + 2. * pi * SmoothBump (0.25, 0.75, 0.25, mod (0.01 * tCur, 1.));\n  el = -0.22 * pi * sin (0.017 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.6 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0.01);\n  vuPos = ro;\n  ltDir = normalize (vec3 (0.2, 1., -0.2));\n  dstFar = 50.;\n  col = vec3 (0.);\n  if (abs (uv.y) < 0.85) {\n#if ! AA\n    const float naa = 1.;\n#else\n    const float naa = 3.;\n#endif  \n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = 0.; a < naa; a ++) {\n      rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n         sr * (0.667 * a + 0.5) * pi), 2.));\n      col += (1. / naa) * ShowScene (ro, rd);\n    }\n    col = pow (col, vec3 (0.8));\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRndBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 RotToDirLim (vec3 v1, vec3 v2, vec3 p, float aMax)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = max (dot (v1, v2), cos (aMax));\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (p + vec3 (37., 39., 41.)) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}