{
    "Shader": {
        "info": {
            "date": "1542392650",
            "description": "Some attempts to visually balance the HSV hue spectrum better.\n\nRows:\n1. Regular HSV spectrum\n2. HSV with smoothstep applied to the colour channels.\n3. HSV with a slight sinusoidal distortion, and then smoothstep.\n\nLeft is sRGB, right is linear.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lVBW1",
            "likes": 19,
            "name": "HSV experiments",
            "published": 3,
            "tags": [
                "hsv"
            ],
            "usePreview": 0,
            "username": "WAHa_06x36",
            "viewed": 1148
        },
        "renderpass": [
            {
                "code": "vec3 hsv(float h, float s, float v) {\n\tvec3 p = clamp(abs(fract(vec3(h) + vec3(3.0, 2.0, 1.0) / 3.0) * 6.0 - vec3(3.0)) - vec3(1.0), 0.0, 1.0);\n\treturn v * mix(vec3(1.0), p, s);\n}\n\n// Smoothstep-HSV\nvec3 shsv(float h, float s, float v) {\n\tvec3 p = clamp(abs(fract(vec3(h) + vec3(3.0, 2.0, 1.0) / 3.0) * 6.0 - vec3(3.0)) - vec3(1.0), 0.0, 1.0);\n\tp = p * p * (3.0 - 2.0 * p);\n\treturn v * mix(vec3(1.0), p, s);\n}\n\n// Distorted-Smoothstep-HSV\nvec3 dshsv(float h, float s, float v) {\n\tvec3 p = clamp(abs(fract(vec3(h) + vec3(3.0, 2.0, 1.0) / 3.0) * 6.0 - vec3(3.0)) - vec3(1.0), 0.0, 1.0);\n\tp -= sin(p * 3.141592) * 0.02 * 6.0;\n\tp = p * p * (3.0 - 2.0 * p);\n\treturn v * mix(vec3(1.0), p, s);\n}\n\n\n// Smoothstep-HSV, alternate implementation by distorting hue\nvec3 shsv2(float h, float s, float v) {\n\th *= 6.0;\n\tfloat x = mod(h, 1.0);\n\th = floor(h) + x * x * (3.0 - 2.0 * x);\n\th /= 6.0;\n\n\treturn hsv(h, s, v);\n}\n\n// Distorted-Smoothstep-HSV, alternate implementation by distorting hue\nvec3 dshsv2(float h, float s, float v) {\n\th -= sin(h * 3.0 * 2.0 * 3.141592) * 0.02;\n\n\th *= 6.0;\n\tfloat x = mod(h, 1.0);\n\th = floor(h) + x * x * (3.0 - 2.0 * x);\n\th /= 6.0;\n\n\treturn hsv(h, s, v);\n}\n\nvec3 hsl(float h, float s, float l) {\n\tfloat newS = s * (1.0 - abs(1.0 - 2.0 * l)) / 2.0;\t\n\treturn hsv(h, 2.0 * newS / (l + newS), l + newS);\n}\n\nvec3 shsl(float h, float s, float l) {\n\tfloat newS = s * (1.0 - abs(1.0 - 2.0 * l)) / 2.0;\t\n\treturn shsv(h, 2.0 * newS / (l + newS), l + newS);\n}\n\nvec3 dshsl(float h, float s, float l) {\n\tfloat newS = s * (1.0 - abs(1.0 - 2.0 * l)) / 2.0;\t\n\treturn dshsv(h, 2.0 * newS / (l + newS), l + newS);\n}\n\nvec3 shsl2(float h, float s, float l) {\n\tfloat newS = s * (1.0 - abs(1.0 - 2.0 * l)) / 2.0;\t\n\treturn shsv2(h, 2.0 * newS / (l + newS), l + newS);\n}\n\nvec3 dshsl2(float h, float s, float l) {\n\tfloat newS = s * (1.0 - abs(1.0 - 2.0 * l)) / 2.0;\t\n\treturn dshsv2(h, 2.0 * newS / (l + newS), l + newS);\n}\n\nvec3 hsltest(float h, float s, float l, vec2 P) {\n\tvec3 c = vec3(0.0);\n\n\tif(fract(dot(sin(P * 1312314.3), vec2(1212323.3))) > 0.5) {\n\t\tif(mod(P.y, 3.0) > 2.0) c = dshsl(h, 1.0, l);\n\t\telse if(mod(P.y, 3.0) > 1.0) c = shsl(h, 1.0, l);\n\t\telse c = hsl(h, 1.0, l);\n\t} else {\n\t\tif(mod(P.y, 3.0) > 2.0) c = dshsl2(h, 1.0, l);\n\t\telse if(mod(P.y, 3.0) > 1.0) c = shsl2(h, 1.0, l);\n\t\telse c = hsl(h, 1.0, l);\n\t}\n\tif(P.x > 1.0) {\n\t\tc = pow(c, vec3(1.0 / 2.2));\n\t}\n\n\treturn c;\n}\n\nvec3 box(vec2 p, vec2 origin, vec2 size) {\n\tvec2 newP = (p - origin) / size;\n\treturn vec3(newP, step(0.0, newP.x) * step(-1.0, -newP.x) * step(0.0, newP.y) * step(-1.0, -newP.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 s = fragCoord.xy / iResolution.xy;\n\tvec2 P = vec2(s.x * 2.0, (1.0 - s.y) * 3.0);\n\tvec2 p = mod(P, 1.0);\n\n\tfloat ratio = iResolution.y / iResolution.x * 2.0 / 3.0;\n\tvec3 c = vec3(0.0);\n\n\tvec3 p1 = box(box(p, vec2(0.0, 0.0), vec2(1.0 - ratio, 0.5)).xy, vec2(0.02, 0.05), vec2(0.96, 0.9));\n\tc += hsltest(p1.x, 1.0, 0.5, P) * p1.z;\n\n\tvec3 p2 = box(box(p, vec2(0.0, 0.5), vec2(1.0 - ratio, 0.5)).xy, vec2(0.02, 0.05), vec2(0.96, 0.9));\n\tc += hsltest(p2.x, 1.0, 1.0 - p2.y, P) * p2.z;\n\n\tvec2 p3 = (box(p, vec2(1.0 - ratio, 0.0), vec2(ratio, 1.0)).xy - 0.5) * 2.1;\n\n\tfloat a = atan(p3.y, p3.x);\n\tfloat r = length(p3);\n\n\tfloat h = a / 2.0 / 3.141592;\n\n\tif(r < 0.6) {\n\t\th = floor(h * 12.0 + 0.5) / 12.0;\n\t} else if(r < 0.8) {\n\t\th = floor(h * 24.0 + 0.5) / 24.0;\n\t}\n\n\tvec3 c3 = hsltest(h, 1.0, 0.5, P);\n\n\tfloat stripes =\n\t\tstep(-r, -0.29) * step(r, 0.31) +\n\t\tstep(-r, -0.59) * step(r, 0.61) +\n\t\tstep(-r, -0.79) * step(r, 0.81) +\n\t\tstep(-r, -0.99) * step(r, 1.01) +\n\t\tstep(mod(a * 12.0 / 2.0 / 3.141592 + 0.5 + 0.04, 1.0), 0.08) * step(r, 0.6) * step(-r, -0.3)+\n\t\tstep(mod(a * 24.0 / 2.0 / 3.141592 + 0.5 + 0.05, 1.0), 0.10) * step(r, 0.8) * step(-r, -0.6);\n\tc3 *= step(-r, -0.4) * step(-1.0, -r) * (1.0 - stripes);\n\tc += c3;\n\n\tvec2 lines = step(abs(mod((P + 0.5), 1.0) - 0.5), vec2(0.005) * vec2(ratio , 1.0 ));\n\n\tc += lines.x + lines.y;\n\n\tfragColor = vec4(c, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}