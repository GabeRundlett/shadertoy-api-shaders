{
    "Shader": {
        "info": {
            "date": "1584378236",
            "description": "poto",
            "flags": 32,
            "hasliked": 0,
            "id": "3sXyz7",
            "likes": 9,
            "name": "Day 88",
            "published": 3,
            "tags": [
                "mdmtjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 85\" by jeyko. https://shadertoy.com/view/WdfczH\n// 2020-03-16 09:19:14\n\n// Fork of \"Day 84\" by jeyko. https://shadertoy.com/view/Wssczn\n// 2020-03-13 10:52:05\n\n// radial blur and chromatic abberation in this buffer\n// thx iq for pallette, mercury for hg-sdf, balkhan for glow\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5),4.)*0.7;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.)*2.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor = radial*5.5; \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.6);\n    //1fragColor *= 18.;\n    fragColor = max(fragColor, 0.);\n    fragColor.r *= 0.95 + uvn.x*0.4;\n    fragColor.g *= 0.95 + uvn.y*0.2;\n    fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*1.5));\n    fragColor *= 1. - dot(uvn,uvn)*1.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define iTime (iTime + 3.6)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 att = vec3(1);\n\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(float t){\n\treturn mix(texture(iChannel0,vec2(floor(t)/256.)),texture(iChannel0,vec2(floor(t) + 1.)/256.), smoothstep(0.,1.,fract(t)));\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(vec2 t){\n    //t *= 1.4;\n    vec2 fr = fract(t);\n    //t *= 4.;\n\treturn \n        mix(\n            mix( \n                texture(iChannel0,vec2(floor(t.x), floor(t.y))/256.),\n                texture(iChannel0,vec2(floor(t.x), floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            mix( \n                texture(iChannel0,vec2(floor(t.x) + 1.,floor(t.y))/256.),\n                texture(iChannel0,vec2(floor(t.x) + 1.,floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            smoothstep(0.,1.,fr.x));\n}\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\nfloat sdRhombus(vec3 p, vec3 s){\n\t\n    \n    p = abs(p) - s;\n    \n    float d = max(p.z, max(p.x, p.y));\n    \n    \n    d = max(d, dot(p.yx + s.yx*0.5, normalize(vec2(1.))));\n    d = max(d, dot(p.yz + s.yz*0.5, normalize(vec2(1.))));\n    //d = max(d - s.x*0., -dot(p.z,p.x));\n    //d \n    \n    \n    return d;\n}\n\n// Similar to fOpUnionRound, but more lipschitz-y at acute angles\n// (and less so at 90 degrees). Useful when fudging around too much\n// by MediaMolecule, from Alex Evans' siggraph slides\nfloat fOpUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\n\nfloat sdBox( vec3 p, vec3 s )\n{\n    p = abs(p) - s;\n    return max(p.x, max(p.y, p.z));\n}\n\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n    \n    float dd = length(p) - 0.1;\n    \n    float clOff = - exp(-p.z*0.4)*0.02;\n    \n    p.y += - exp(-p.z*0.4)*0.02;\n    p.z -= iTime;\n    \n    vec3 g = p;\n    \n    p.z = pmod(p.z, 2.5);\n    vec3 ccc = vec3(0.,0.4,1.);\n    \n    ccc *= 1. + pow(abs(sin(p.z + iTime+ cos(p.y + iTime*0.5)) ), 20.);\n    \n    float dG = max(max(abs(p.x), abs(p.z)) - 0.3, abs(p.y) - 0.011);\n    \n    vec3 u = p;\n    vec3 q = abs(p);\n    \n    q.xz -= 0.24;\n    \n    float dR = sdRhombus(q, vec3(0.04));\n    \n    //glow += 0.1/(0.03 + dLamp*dLamp*2000.)*vec3(1,1.,1);\n    \n    \n    float dP = max(max(abs(p.x), abs(p.z)) - 0.01, (p.y) + 0.25);\n\n    dP = fOpUnionStairs(dG, dP, 0.25,6.);\n    \n    dP = min(dP,fOpUnionStairs(dG, dR, 0.09,6.));\n    \n    \n    \n    q.y += 0.01;\n    q.xy -= vec2(-0.15,0.01);\n    float dQ = max(q.x, q.y);\n    \n    q = u;\n    \n    q = abs(q);\n    q.x -= 0.7;\n    //q.z -= 0.2;\n    q = abs(q);\n    //q.x -= 0.4;\n    //float dS = max(q.z, q.y)-0.;\n    float dS = max(q.z, q.x)-0.05;\n    \n    d = dmin(d, vec2(dP, 6.));\n    d = dmin(d, vec2(dQ, 10.));\n    \n    \n    //d = dmin(d, vec2(dS, 6.));\n    \n    float dCl = p.y + 0.5 - valueNoise(p.xz*6. + iTime).x*0.4;\n     \n    dCl += - pow(valueNoise(p.xz*0.4 + iTime).x, 2.)*0.5;\n    dCl = abs(dCl) + 0.06;\n    \n    \n    float modDB = 6.;\n    \n\tfloat id = floor(u.z/modDB); \n    \n    //u.y += sin(iTime + id);\n    \n    u = g;\n    \n    float mm = sin(iTime + id*0.1  + sign(p.x)*0.9);\n    \n    \n    \n    u.y -= (0.2 + \n             mm\n            \n           )*0.3;\n    u.z = pmod(u.z, modDB);\n    \n    \n    //u.y += 0.5;\n    u.x = abs(u.x);\n    u.x -= 1.8;\n    \n    //float dB = length(u) - 0.87 + sin(iTime*3.)*0.05;\n    \n    float dB = length(u) - 0.2 ;\n    \n    \n    dB = fOpUnionSoft(dB,dCl, 0.96);\n    dB = abs(dB) + 0.03;\n    \n    dCl = abs(dCl) + 0.01;\n    \n    d = dmin(d, vec2(dB, 6.));\n    d = dmin(d, vec2(dCl, 6.));\n    \n    p.x = abs(p.x);\n    p.x -= 0.24;\n    float dPp = length(p.yx) - 0.01;\n    d = dmin(d, vec2(dPp, 6.));\n    \n    glow += 0.06/(0.03 + dCl*dCl*dCl*200.)*vec3(1,1.,1)*att;\n    \n    \n    //glow += 0.04/(0.001 + dB*dB*50.)*vec3(1,1.3,1)*att* smoothstep(1.,0.,length(u)*0.4)*smoothstep(1.,0.,length(glow)*0.04)*4.;\n    glow += 0.04/(0.001 + dB*dB*50.)*vec3(1,1.3,1)*att;\n    \n    vec3 c = vec3(1);\n    //glow += 0.3/(0.1 + d.x*d.x)*c;\n\td.x *= 0.6;\n    return d;\n}\nfloat dith;\nint it;\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n    \n\tvec2 d = map(ro);\n\n    if(d.x < 0.05)\n        ro += rd*0.1;\n    \n    p = ro; t = 0.; hit = false;\n    \n    \n    for(it = 0; it < 230    ; it++){\n    \td = map(p);\n        d.x *= dith;\n        \n    \t//glow += exp(-d.x*20.);\n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        if(t > 40.){\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir ));\n\tvec3 up = normalize(cross(dir, right));\n    float fov = 0.6;\n    return normalize(dir + (right*uv.x + up*uv.y)*fov);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //\n\t//uv *= 1. - dot(uv,uv)*0.2;\n    uv *= 1. - dot(uv,uv)*0.2;\n    \n    uv.xy *= rot(sin((iTime - 3.6))*0.2);\n    \n    vec3 col = vec3(0);\n\n    dith = mix(0.95,1., texture(iChannel0, 20.*uv*256.).x);\n    vec3 ro = vec3(0);\n    \n    \n    float n = pow(valueNoise(iTime*1.).x, 2.);\n    float nb = valueNoise(iTime*1./2.).x;\n    float zoom = 0.9 + n*1.;\n    //ro.xz += vec2(sin(iTime*0.5),cos(iTime*0.5))*zoom;\n    n *= 1.;\n    //ro.xz += vec2(sin( nb*6.14*1.5),cos( nb*6.14*1.5))*zoom;\n    //ro.xz += vec2(sin( 0.4),cos(0.1))*zoom;\n    ro.xz += vec2(sin( 0.),cos(0.))*zoom;\n    \n    ro.y += 0.3;\n    \n    vec3 lookAt = vec3(0,ro.y - 0.4,0.);\n    \n    lookAt.y += iMouse.y/iResolution.y*0.05;\n    lookAt.x -= iMouse.x/iResolution.y*0.05 - 0.025;\n    lookAt.y += -0. + valueNoise(iTime*1./2.).x*0.5;\n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    vec3 p; float t; bool hit;\n    float side = 1.;\n    float tA = 0.;\n    \n    for(int i = 0; i < 2; i ++){\n    \tvec2 d = march(ro, rd, p, t, hit);\n    \tvec3 n = getNormal(p);\n        \n        vec3 ld = normalize(vec3(1));\n        vec3 h = normalize(ld - rd);\n        \n        float diff = max(dot(n, ld), 0.);\n        float spec = pow(max(dot(n, -h), 0.), 20.);\n        float fres = pow(1. - max(dot(n, -rd), 0.), 14.);\n        \n        tA = max(tA, t);\n        if(d.y == 10.){\n            \n            col += fres*0.05*pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *80. + iTime)*att;\n            \n            att *= vec3(0.7,0.7,0.65)*0.9;\n            //glow *= att;\n            rd = refract(rd, normalize(n + vec3(length(sin(p*6.)), 0.,0.)*0.035),0.995);\n            ro = p + rd *0.;\n    \t\t        \n        } else {\n            //col += fres*0.04*vec3(0.1,0.6,0.8)*att;\n            \n            //glow *= att;\n            col += fres*0.04*vec3(0.6,0.6,0.8)*att;\n\n            //col += diff*0.01*vec3(0,0.5,1)*att;\n        \tbreak;\n        }\n    }\n\n    \n    col = mix(col, vec3(0.1 + sin(iTime + uv.x)*0.2,0.4 + sin(iTime*0.4 + uv.y)*0.2,0.7)*0.1, pow(smoothstep(0.,1.,tA*0.043), 1.6)*att);\n        \n    col += glow*0.009*att;\n    //col -= float(it)*0.00009;    \n    //col = mix(col, vec3(0.4,0.4,0.7)*0.1, pow(smoothstep(0.,1.,tA*0.143), 1.6));\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}