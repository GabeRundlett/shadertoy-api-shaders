{
    "Shader": {
        "info": {
            "date": "1674206415",
            "description": "Coaxal Circles, with an exact SDF and xoring a system with its complement. Mouse sets system parameters, keys a,b,c,d change displayed elements.\n\n[url]https://mathworld.wolfram.com/CoaxalCircles.html[/url]\n\n",
            "flags": 16,
            "hasliked": 0,
            "id": "DllXzn",
            "likes": 20,
            "name": "Coaxal Circles",
            "published": 3,
            "tags": [
                "circles",
                "sdf",
                "xor",
                "coaxal"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "// Coaxal Circles, mla, 2023\n// https://mathworld.wolfram.com/CoaxalCircles.html\n// an exact SDF and xoring a \n// system with its complement. Mouse sets system parameters,\n// keys a,b,c,d change displayed elements.\n// 'x' to just  see the basic system\n\n// Exact distance to circle lam in system c\nbool coaxal(out float d, vec2 p, float c, float lam) {\n  if (abs(lam) > 1e4) { // lam may be infinity\n    d = abs(p.x);\n  } else {\n    vec2 centre = vec2(-lam,0);\n    float radius = lam*lam-c;\n    if (radius < 0.0) return false; // No real circle.\n    radius = sqrt(radius);\n    d = length(p-centre) - radius;\n  }\n  return true;\n}\n\n// map parameter lam, -inf < lam < inf, to linear range \nfloat map(float lam, float t, float N) {\n  float x = atan(lam);\n  x /= 0.5*PI;\n  x += t;\n  x *= N;\n  return x;\n}\n\n// linear range back to parameter - inverse of map()\nfloat unmap(float x, float t, float N) {\n  x /= N;\n  x -= t;\n  x *= 0.5*PI;\n  x = tan(x);\n  return x;\n}\n\nfloat pencil(vec2 p, float c, float t, float N, out float ix) {\n  float d = 1e8, d1;\n  float lam = -(dot(p,p) + c)/(2.0*p.x);\n  lam = map(lam,t,N);\n  float lam0 = round(lam); // Nearest circle\n  if (coaxal(d1,p,c,unmap(lam0,t,N))) d = min(d,abs(d1));\n  float lam1 = lam0+sgn(lam-lam0); // Nearest on other side\n  if (coaxal(d1,p,c,unmap(lam1,t,N))) d = min(d,abs(d1));\n  ix = min(lam0,lam1); // Index of region we are in\n  if (mod(ix,2.0) == 0.0) d = -d; // Set interior/exterior\n  return d;\n}\n\nfloat xor(float d0, float d1) {\n  // Union minus the intersection\n  return max(min(d0,d1),-max(d0,d1));\n}\n\nfloat ssqr(float x) {\n return sign(x)*x*x; // signed square\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec3 fg = vec3(0.5);\n  float scale = 3.0;\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  p *= scale;\n  float px = fwidth(p.x);\n  float c = 1.0, N = 10.0;\n  if (iMouse.x > 0.0) {\n    c = ssqr(8.0*(iMouse.x/iResolution.x-0.5));\n    N = 1.0+floor(20.0*iMouse.y/iResolution.y);\n  }\n  float t = mod(iTime/N,2.0);\n  float ix0, ix1;\n  float d = pencil(p.yx,c,t,N,ix0);\n  if (!key(CHAR_X)) d = xor(d,pencil(p.xy,-c,0.0,N,ix1));\n  vec3 col = vec3(1.0);\n  if (!key(CHAR_C)) fg = h2rgb(rand(mod(vec2(ix0,ix1),2.0*N)));\n  if (!key(CHAR_A)) col = mix(fg,col,smoothstep(-0.5*px,0.5*px,d));\n  float k = 0.5; // Pixel scaling factor for distance field\n  if (!key(CHAR_D)) col *= 0.75-0.25*cos(k*PI*d/px);\n  if (!key(CHAR_B)) col *= smoothstep(0.0,px,abs(d)-0.01); // Border\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst float PI = 3.141592654;\nconst float TWOPI = 2.0*PI;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define sgn(x) ((x) >= 0.0 ? 1.0 : -1.0)\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n  x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat rand(ivec2 p) {\n  uint h = ihash(uint(p.x)^ihash(uint(p.y)));\n  return float(h)/exp2(32.0);\n}\n\nfloat rand(vec2 p) {\n  return rand(ivec2(p));\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}