{
    "Shader": {
        "info": {
            "date": "1617475775",
            "description": "Attempt at a lens flare",
            "flags": 32,
            "hasliked": 0,
            "id": "fdS3Ww",
            "likes": 26,
            "name": "Lens Flare Fun",
            "published": 3,
            "tags": [
                "experimentation",
                "lensflare"
            ],
            "usePreview": 1,
            "username": "account",
            "viewed": 1254
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    vec3 rad;\n    \n    vec2 offset2 = iResolution.xy/2.0 - fragCoord.xy;\n    for(int i = 0; i < 20; i++){\n       vec2 offset = fragCoord + offset2*smoothstep(0.,4.- length(uv*2.0-1.0)*2., float(i+1)/20.);\n       rad.x += texture(iChannel0, offset/iResolution.xy).x;\n       rad.y += texture(iChannel0, (offset+vec2(5.1))/iResolution.xy).y;\n       rad.z += texture(iChannel0, (offset-vec2(10.1))/iResolution.xy).z;\n\n    }\n    rad /= 16.;\n    \n    rad = pow(rad, vec3(1.)/vec3(1.3,1.,1.3));\n    //rad = pow(rad, vec3(1.)/2.2);\n    fragColor = vec4(rad,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float ring(vec2 p, vec2 pos, float r1, float r2){\nvec2 a = normalize(p-pos);\nreturn length((pos+a*r1)-p)-r2;\n}\n\n\nconst float pi = 3.14159;\nvec2 rot(vec2 a, float c){\nfloat l = length(a);\na/=l;\nfloat ang = (a.y < 0.)?2.0*pi - acos(a.x):acos(a.x);\nang += c;\nreturn vec2(l*cos(ang), l*sin(ang));\n}\n\nvec3 lensflare(vec2 uv, vec2 mouse){\n//vec2 mouse = iMouse.xy / iResolution.xy;\n    //mouse = mouse * 2.0 - 1.0;\n    \n    vec3 col = vec3(0.);\n    float dist = length(mouse-uv);\n    vec2 pos = normalize(uv - mouse);\n   \n    //col = pow(col, vec3(1.0/2.2));\n    //col += pow(1.0-dist, texture(iChannel0, fragCoord/iResolution.xy).x)*0.1;\n    dist = length(mouse-uv);\n    vec2 mouse2 = normalize(mouse);\n    float ang = (mouse2.y < 0.)?2.0*pi - acos(mouse2.x):acos(mouse2.x);\n   // col += clamp(vec3(0.9,0.7,0.2)*(1.0-dist*0.9)*texture(iChannel0, rot(pos*0.06, -ang)).x,0.0,1.);\n   col += sin(texture(iChannel0, rot(pos*0.06, -ang)).x)\n   *cos(texture(iChannel0, rot(pos*0.04, -ang)).x)*0.2;\n   \n   col += clamp(vec3(2.)-clamp(dist*1.5,0.,1.)*2.1,0.,1.)*vec3(0.9,0.7,0.2);\n    \n   \n    dist = length(-mouse-uv)-0.05;\n    //col += smoothstep(max(dist, -dist+0.15),0.2, length(-mouse-uv));\n    col += (2.0-length(mouse-uv)-0.04)*vec3(0.9,0.6,0.2);\n    //dist = length(-mouse*0.5-uv)-0.001;\n    float rin = ring(uv, -mouse, 0.2, 0.05);\n    //if(rin < 0.01){\n      col += clamp(3.0-rin*2.,-0.4,0.4);\n    //}\n    col += clamp(vec3(1.)-clamp(dist*dist*dist+dist*1.5,0.,1.)*2.1,0.,1.)*\n    (vec3(length(mouse-uv), 1.0-length(-mouse-uv),0.2 ));\n    dist = length(-mouse*0.2-uv)-0.001;\n    col += clamp(vec3(1.)-clamp(dist*1.5,0.,1.)*4.,0.,1.)*vec3(0.9,0.6,0.3);\n    dist = length(-mouse*0.6-uv)-0.001;\n    col += clamp(vec3(3.)-clamp(dist*2.5,0.,1.)*4.,0.,1.)*vec3(0.9,0.6,0.3);\n    \n    dist = length(-mouse*0.5-uv)-0.4;\n    col += clamp(vec3(3.)-dist*dist*dist+dist*1.5,0.,1.)*vec3(0.9,0.6,0.2);\n    //col -= length(mouse-uv);\n\n    col += clamp(vec3(0.9, 0.7, 0.2)-ring(uv, mouse, 0.1,0.04)*2.-0.1,0.,1.);\n    col += clamp(1.0-ring(uv, -mouse*0.1, 0.2, 0.05)*2.,0.,1.)*0.8*vec3(0.9,0.7,0.7);  \n  \n    col/=2.0;\n    col = clamp(col, 0., 1.);\n    return col;\n}\n\n//From https://www.shadertoy.com/view/4tl3z4\n//==========================================\nfloat hash1(inout float seed) {\n    return fract(sin(seed += 0.1)*43758.5453123);\n}\n\nvec2 hash2(inout float seed) {\n    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n//==========================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= 1.3;\n    uv.y /= 1.3;\n    uv *= 12.0;\n    //vec3 col = lensflare(uv);\n    vec3 col;\n    vec2 p = fragCoord/iResolution.xy;\n    float seed = 3.43121412313;\n\n    \n    for(int i = 0; i < 20; i++){\n       vec2 pos = hash2(seed)*2.0-1.;\n       pos*=8.0;\n       float strength = hash1(seed);\n       col += lensflare(uv/4., (rot(pos,iTime*0.5))*vec2(cos(iTime*0.5), sin(iTime*0.5)))*strength*1.;   \n       seed += float(i+1);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}