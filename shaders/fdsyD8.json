{
    "Shader": {
        "info": {
            "date": "1642023080",
            "description": "Visualises the Mandelbrot set and the underlying iterations used for calculating the Mandelbrot set. More info on the Mandelbrot set and how its calculations can be implemented, can be found here: https://en.wikipedia.org/wiki/Mandelbrot_set",
            "flags": 0,
            "hasliked": 0,
            "id": "fdsyD8",
            "likes": 2,
            "name": "Mandelbrot Set Visualiser",
            "published": 3,
            "tags": [
                "math",
                "mandelbrot",
                "visualiser"
            ],
            "usePreview": 0,
            "username": "xiving",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926538\n\nstruct INum {\n    float R;\n    float I;\n};\n\nint modI(float a,float b) {\n    float m=a-floor((a+0.5)/b)*b;\n    return int(floor(m+0.5));\n}\n\nINum iPow(INum num) {\n    return INum(num.R * num.R - num.I * -1.0, num.R * num.I * 2.0);\n}\n\nINum iAdd(INum num1, INum num2) {\n    return INum(num1.R + num2.R, num1.I + num2.I);\n}\n\nbool inBounds(INum num, float threshold) {\n    if (num.R > 0.0) {\n        if (num.R >= threshold) {\n            return false;\n        }\n    } else {\n        if (num.R <= threshold * -1.0) {\n            return false;\n        }\n    }\n    \n    if (num.I == 0.0) {\n        if (num.I >= threshold) {\n            return false;\n        }\n    } else {\n        if (num.I <= threshold * -1.0) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nbool converges(INum c, float threshold, int n) {\n    INum z = INum(0.0, 0.0);\n    \n    for (int i = 0; i < n; i++) {\n        z = iAdd(iPow(z), c);\n        \n        if (!inBounds(z, threshold)) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfloat mandelbrotX(float x, float zoom) {\n    float offset = -1.4855;\n    return ((((x / iResolution.x) * (2.47) - (2.0)) - offset) / zoom) + offset;\n}\n\nfloat mandelbrotY(float y, float zoom) {\n    return ((y / (iResolution.y)) * 2.24 - 1.12) / zoom;\n}\n\nint mandelbrot(float x, float y, int maxIterations, float zoom) { \n   float x0 = mandelbrotX(x, zoom);\n   float y0 = mandelbrotY(y, zoom);\n   \n   x = 0.0;\n   y = 0.0;\n   \n   float xX = 0.0;\n   float yY = 0.0;\n   \n   int iteration = 0;\n   \n   while(xX + yY <= 4.0 && iteration < maxIterations) {\n       y = 2.0 * x * y + y0;\n       x = xX - yY + x0;\n       xX = x * x;\n       yY = y * y;\n       iteration = iteration + 1;\n   }\n   \n   return iteration;\n}\n\nvec3 mandelbrotColor(int iterations, int maxIterations) {\n    float d = float(iterations) / float(maxIterations);\n    \n    float red = clamp(sin(PI * d * 0.5), 0.2, 1.0 );\n    float green = clamp(sin(PI * d), 0.2, 1.0);\n    float blue = clamp(cos(PI * d * 0.5), 0.2, 1.0);\n    \n    d = sqrt(0.05 + (0.95  * d));\n    \n    return vec3(d * red, d * green, d * blue);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   float framesPerIteration = 10.0;\n   float iDelta = float(iFrame) / framesPerIteration;\n   \n   float zoom = pow((float(iFrame) * 0.005), 2.0);\n   \n   if (zoom <= 1.0) {\n       zoom = 1.0;\n   }\n   \n   int maxIteration = int(floor(iDelta)) + 1;\n   float delta = iDelta - float(maxIteration - 1);\n   \n   if (maxIteration > 200) {\n       maxIteration = 200;\n       delta = 0.0;\n   }\n\n   vec3 color = vec3(0.0, 0.0, 0.0);\n   int i0 = mandelbrot(fragCoord.x, fragCoord.y, maxIteration, zoom);\n   \n   if (i0 != maxIteration) {\n      int i1 = mandelbrot(fragCoord.x, fragCoord.y, maxIteration + 1, zoom);\n      \n      vec3 i0Color = mandelbrotColor(i0, maxIteration);\n      vec3 i1Color = mandelbrotColor(i1, maxIteration + 1);\n      \n      color = (i0Color * (1.0 - delta)) + (i1Color * delta);\n   }\n   \n   fragColor = vec4(color, 1.0);\n}\n \n ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}