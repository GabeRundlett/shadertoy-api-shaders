{
    "Shader": {
        "info": {
            "date": "1600951933",
            "description": "This shader can be used 2D fires. These fires will mostly be used with one texture channel and then interpolating the color in the image with that same one channel value.",
            "flags": 32,
            "hasliked": 0,
            "id": "wt2yD3",
            "likes": 2,
            "name": "FIRE",
            "published": 3,
            "tags": [
                "buffers"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "\n#define RedChannel vec3(1, 0.2, 0.2)\n#define GreenChannel vec3(1,1,0)\n#define BlueChannel vec3(1,0.2,0.1)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 nothing = vec3(0);\n    fragColor = vec4(mix(mix(mix(nothing, RedChannel, texture(iChannel0,uv).r), GreenChannel, texture(iChannel0,uv).g), BlueChannel, texture(iChannel0,uv).b), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv_Dif = 1./iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = \n       (texture(iChannel0, uv + uv_Dif.xy).rgb + \n        texture(iChannel0, uv - uv_Dif.xy).rgb + \n        texture(iChannel0, uv + vec2(uv_Dif.x,0)).rgb + \n        texture(iChannel0, uv - vec2(uv_Dif.x,0)).rgb + \n        texture(iChannel0, uv + vec2(0,uv_Dif.y)).rgb + \n        texture(iChannel0, uv - vec2(0,uv_Dif.y)).rgb + \n        texture(iChannel0, uv + vec2(-uv_Dif.x,uv_Dif.y)).rgb + \n        texture(iChannel0, uv + vec2(uv_Dif.x,-uv_Dif.y)).rgb)*0.125;\n\n    fragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define Speed 3.\n\n#define Cool 0.05\n#define CoolSpeed 80.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = clamp(texture(iChannel0, uv - vec2(0., 1./iResolution.xy*Speed)) - Cool*texture(iChannel1, uv - vec2(0., 1./iResolution.xy)*iTime*CoolSpeed), 0., 1.) + max(vec4((1.-length(fragCoord - iMouse.xy)/50.)),0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}