{
    "Shader": {
        "info": {
            "date": "1656176031",
            "description": "Heads up display.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdGcDG",
            "likes": 1,
            "name": "HUD_Heads_Up_Display",
            "published": 3,
            "tags": [
                "hud"
            ],
            "usePreview": 0,
            "username": "stevenschronk",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.141592654\n\nuniform float u_time;\n\nfloat set_min_line_width(float in_width){\n    // if the width of or height of the window is too small\n    // increase the size of the lines to make them draw clearly\n    float max_screen_size;\n    if(iResolution.y > iResolution.x) { max_screen_size = iResolution.y; }\n    else {  max_screen_size = iResolution.x; }\n    float min_line_width = 38./max_screen_size;\n    if(in_width > min_line_width) {\n        min_line_width = in_width;\n    }\n    return min_line_width;\n}\n\nvoid circle(vec2 st, float radius, vec3 in_color, inout vec3 out_color){\n    vec2 dist = st-vec2(0.5);\n\tfloat inside_circle =  1.-smoothstep(radius-(radius*0.01),\n                         radius+(radius*0.01),\n                         dot(dist,dist)*4.0);           \n    if(inside_circle > 0.0) { out_color = in_color; }\n}\n\nfloat circle_antialiased(vec2 st, float radius){\n    vec2 dist = st-vec2(0.5);\n\treturn 1.-smoothstep(radius-(radius*0.01),\n                         radius+(radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\n// draws an aliased circle\nvoid circle_line(vec2 st, float radius, float thickness, vec3 in_color, inout vec3 out_color){\n    vec2 dist = st-vec2(0.5); // set center of circle\n    thickness /= 2.;\n\tfloat inside_circle = smoothstep( radius-thickness, radius, dot(dist,dist)*4.0) -\n          smoothstep( radius, radius+thickness, dot(dist,dist)*4.0);                     \n    if(inside_circle > 0.0) { out_color = in_color; }\n}\n\nfloat circle_line_antialiased(vec2 st, float radius, float thickness){\n    vec2 dist = st-vec2(0.5); // set center of circle\n    thickness /= 2.;\n\treturn smoothstep( radius-thickness, radius, dot(dist,dist)*4.0) -\n          smoothstep( radius, radius+thickness, dot(dist,dist)*4.0);\n}\n\nvoid rectangle(vec2 uv, vec2 point_1, vec2 point_2, vec3 color_in, inout vec3 color_out){\n    if(uv.x > point_1.x && uv.x < point_2.x && uv.y > point_1.y && uv.y < point_2.y){\n        color_out = color_in;\n    }\n}\n\nfloat edge_function(vec2 a, vec2 b, vec2 c){\n    return ((c.x - a.x) * (b.y - a.y) - (c.y - a.y) * (b.x - a.x));\n}\n\nvoid draw_triangle(vec2 uv, vec2 a, vec2 b, vec2 c,\n    vec3 color_in, inout vec3 color_out) {\n    float a_inside = edge_function(a, b, uv);\n    float b_inside = edge_function(b, c, uv);\n    float c_inside = edge_function(c, a, uv);\n    \n    if( a_inside > .0 || b_inside > .0 || c_inside > .0 ) {\n        // TODO: Remove the else here.\n    } else {\n        color_out = color_in;\n    }\n}\n\nfloat radar_sweep(vec2 uv, float len){\n    uv.x -= 0.5; // TODO: this shouldn't be needed?\n    uv.y -= 0.5;\n    float theta0 = 120.0 * iTime; // 120.0 sets the speed of rotation\n    float theta = mod(180.0 * atan(uv.y,uv.x) / M_PI+theta0, 360.0);\n    float angle = iTime;\n    return smoothstep(2./M_PI, 1.999/M_PI, theta);\n}\n\nvec3 color_white = vec3(1.);\nvec3 color_hlt_blue = vec3(37.9/100.,76.5/100.,79.5/100.);\nvec3 color_lt_blue = vec3(70.7/100.0,90.8/100.,94.2/100.);\nvec3 color_orange = vec3(89.5/100.,34.2/100.,19.1/100.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    uv.y -= .25;\n    uv.x -= .45;\n    uv *= 15.80;\n\n    vec3 col = vec3(0.);\n    vec2 center_pos = vec2(15.)-uv;\n    \n    col += radar_sweep(uv, -4.26) * color_lt_blue;\n    \n    // Blue lines\n    //rectangle(uv, vec2(-4.26, 0.5), vec2(0.5, .56), color_hlt_blue, col);\n\n    col += circle_line_antialiased(uv, .18,  set_min_line_width(0.1)) * color_lt_blue;\n    col += circle_line_antialiased(uv, 15.7, set_min_line_width(2.)) * color_lt_blue;\n    col += circle_line_antialiased(uv, 43., set_min_line_width(2.)) * color_lt_blue;\n    col += circle_line_antialiased(uv, 90.5, set_min_line_width(2.)) *color_white;\n    col += circle_line_antialiased(uv, 155.5, set_min_line_width(5.)) * color_hlt_blue;\n    \n    // White triangles\n    // left\n    draw_triangle(uv, vec2(-5.6,0.32), vec2(-5.4,0.5), vec2(-5.6,0.65), color_white, col);\n    // right\n    draw_triangle(uv, vec2(6.6,0.32), vec2(6.6,0.65), vec2(6.4,0.5), color_white, col);\n    \n    // Red lines\n    uv.y -= 1.97;\n\n    col += circle_antialiased(uv, 0.05) * color_orange;\n    col += circle_line_antialiased(uv, 0.12, set_min_line_width(0.0001)) * color_orange;\n    col += circle_line_antialiased(uv, 8.6, set_min_line_width(0.8)) * color_orange;\n    \n    // White dots\n    uv.y += 0.5;\n    uv.x -= 0.15;\n    col += circle_antialiased(uv, 0.022) * color_white;\n    \n    uv.y -= 2.2;\n    uv.x += 0.8;\n    col += circle_antialiased(uv, 0.022) * color_white;    \n    \n    //fragColor = vec4(0., uv.y,0.,1.);\n    fragColor = vec4( col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}