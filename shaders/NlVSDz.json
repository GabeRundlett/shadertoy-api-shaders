{
    "Shader": {
        "info": {
            "date": "1640518896",
            "description": "Clelia curve rendering (https://en.wikipedia.org/wiki/Cl%C3%A9lie).\nSee top comment for more infos.\n\nMerry Christmas to all!",
            "flags": 0,
            "hasliked": 0,
            "id": "NlVSDz",
            "likes": 9,
            "name": "Clelia curve",
            "published": 3,
            "tags": [
                "3d",
                "distance",
                "curve",
                "parametric"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "/*\nPlentos question in https://www.shadertoy.com/view/7lGSRW\nled me to experiment with projecting a 3D parametric curve to 2D along a ray and then using the technique from\nhttps://www.shadertoy.com/view/3tsXDB to approximate the distance to that.\n\nIt works fine to compute the distance to the projected curve, but\ni failed to properly trace the curve along a ray,\ni couldn't decide which part of the curve lies nearer to the camera\nand which point on the surface of the curve is really hit by the ray\nwithout introducing severe artifacts, so i consider this experiment\nfailed for now.\n*/\n\n\nconst float pi=3.1415925;\n\nconst float clelia_fac=1./4.;\nconst float clelia_period=1./clelia_fac*2.*pi;\nconst float radius=1.;\n\nconst int num_iterations=3;\nconst int num_start_params=13;\n\nconst float eps=.001;\n\nconst float curve_width=.003;\n\nconst float rotation_speed=.5;\n\nmat2 rot(float t){\n\treturn mat2(cos(t),-sin(t),sin(t),cos(t));\n}\n\nvec3 parametric(float t){\n\t//clelia curve\n\tt*=clelia_period;\n\tvec3 p = radius*vec3(cos(t)*cos(clelia_fac*t),cos(t)*sin(clelia_fac*t),sin(t));\n\tp.yz*=rot(mod(rotation_speed*iTime,2.*pi));\n\treturn p;\n}\n\nvec3 parametric_diff(float t){\n\t//clelia curve\n\tt*=clelia_period;\n\tvec3 p = clelia_period*radius*vec3(-clelia_fac*cos(t)*sin(clelia_fac*t)-sin(t)*cos(clelia_fac*t),\n\t                                   clelia_fac*cos(t)*cos(clelia_fac*t)-sin(t)*sin(clelia_fac*t),\n\t                                   cos(t));\n\n\tp.yz*=rot(mod(rotation_speed*iTime,2.*pi));\n\treturn p;\n}\n\nfloat parametric_normal_iteration(float t, vec3 cam, mat3x2 mat){\n\tvec2 uv_to_p=mat*(parametric(t)-cam);\n\tvec2 tang=mat*parametric_diff(t);\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat trace_parametric_curve(vec3 ro, vec3 rd){\n    float t;\n    float t0=0.;\n\tfloat d0 = 1e38;\n\n\tvec3 nor1=normalize(vec3(-rd.y,rd.x,0.));\n\tvec3 nor2=cross(rd,nor1);\n\n\tmat3x2 mat=transpose(mat2x3(nor1,nor2));\n\tvec3 p0=ro;\n\n\tfor(int i=0;i<num_start_params;i++){\n\t\tt=t0;\n\t\tfor(int j=0;j<num_iterations;j++){\n\t\t\tt=parametric_normal_iteration(t,p0,mat);\n\t\t}\n\t\tt=clamp(t,0.,1.);\n\t\tvec3 p1=parametric(t);\n\t\tvec3 p0_to_p1=p1-p0;\n\t\td0=min(d0,dot(mat*p0_to_p1,mat*p0_to_p1));\n\n\t\tt0+=1./float(num_start_params-1);\n\t}\n\n\treturn d0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, 3);\n    vec3 rd = normalize(vec3(uv, 0.) - vec3(0,0,1));\n\n\tfloat dis = trace_parametric_curve(ro,rd);\n\n    if(dis < curve_width){\n    \tfragColor = vec4(1.-dis*1000.);\n    }\n    else{\n        fragColor = vec4(0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}