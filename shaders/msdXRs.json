{
    "Shader": {
        "info": {
            "date": "1680289359",
            "description": "A simple and usable television noise shader I made for a Godot game. I release it into the public domain.",
            "flags": 0,
            "hasliked": 0,
            "id": "msdXRs",
            "likes": 6,
            "name": "Game-ready TV/VCR/VHS distortion",
            "published": 3,
            "tags": [
                "noise",
                "distortion",
                "tv",
                "static",
                "television",
                "gameready"
            ],
            "usePreview": 1,
            "username": "Donitz",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "// License: CC0\n\nconst float interference = 1.0;\nconst float resolution = 256.0;\n\nconst float pi = 3.14159265359;\n\nconst float scanline_alpha = 0.2;\n\nconst float constant_noise = 0.1;\nconst float scrolling_noise = 0.8;\nconst vec4 noise_color = vec4(0.8);\n\nconst float horizontal_distort_distance = 0.02;\nconst float vertical_scroll_distance = 0.05;\n\nconst float constant_chromatic_aberration = 0.005;\nconst float distort_chromatic_aberration = 0.02;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float line_interference = max(0.0, \n        sin(uv.y * (8.1 - interference * 4.3) + iTime * 1.4) * \n        sin(uv.y * (3.2 - interference * 2.6) + iTime * 2.3)) * interference;\n    float horizontal_distortion = (\n        sin(uv.y * 2.0 + iTime * 1.0) + \n        sin(uv.y * 50.0 + iTime * 5.7) * 0.3 + \n        sin(uv.y * 500.0 + iTime * 20.0) * 0.1) * horizontal_distort_distance * line_interference;\n    float vertical_distortion =  \n        sin(uv.y * 2.5 + 5.1 + iTime * 1.4) * \n        sign(sin(uv.y * 3.6 + iTime * 2.4)) * vertical_scroll_distance * line_interference;\n    vec2 rounded_uv = round(uv * resolution) / resolution;\n    vec2 scatter = vec2(texture(iChannel1, uv + iTime).r, 0.0) * max(0.0, line_interference - 0.5) * 0.1;\n    float aberration_strength = constant_chromatic_aberration + distort_chromatic_aberration * (0.1 + line_interference);\n    float noise_alpha = (constant_noise * interference + line_interference * scrolling_noise * 0.3) *\n        sin(iTime * 23.4 + texture(iChannel1, rounded_uv).r * 123.4);\n    vec2 image_uv = vec2(1.0 - uv.x + horizontal_distortion, uv.y + vertical_distortion) + scatter;\n    float scanline = scanline_alpha * sin(uv.y * resolution * pi * 2.0);\n    vec3 image_color = min(noise_alpha * noise_color.rgb + vec3(\n        texture(iChannel0, image_uv - vec2(aberration_strength, 0.0)).r,\n        texture(iChannel0, image_uv).g,\n        texture(iChannel0, image_uv + vec2(aberration_strength, 0.0)).b), 1.0) - scanline;\n\n    fragColor.rgb = image_color.rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}