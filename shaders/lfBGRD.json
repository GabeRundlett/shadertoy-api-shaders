{
    "Shader": {
        "info": {
            "date": "1703880071",
            "description": "I finally found one of the rule set that mesmerized me when I was younger and playing with Golly, the Cellular Automata Software (I was a fun kid)\n\nThis is Star Wars by Mirek Wojtowicz. 345/2/4\nI found it here : https://golly.sourceforge.io/\n",
            "flags": 32,
            "hasliked": 0,
            "id": "lfBGRD",
            "likes": 11,
            "name": "Generation CCA",
            "published": 3,
            "tags": [
                "gameoflife",
                "multipass"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "//source: https://iquilezles.org/articles/palettes/\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n#define COLOR_PALETTE vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30)\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float value = texture(iChannel0, uv).r;\n    value = value / lifeSpan;\n    value = 1. - (value * .66 + .33);\n\tfragColor.rgb = palette(value, COLOR_PALETTE);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define lookup(pos) texture(iChannel0,mod(pos,iResolution.xy)).x\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invResolution = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy * invResolution;\n    \n    ;\n    float birthingValue = lifeSpan - 1.;\n    \n    float e = 0.;\n    for (float x = -1.; x <= 1.; ++x)\n    {\n        for (float y = -1.; y <= 1.; ++y)\n        {\n            if (x == 0. && y == 0.)\n            {\n                continue;\n            }\n            \n            float value = lookup(uv + vec2(x, y) * invResolution);\n\n            if (value == birthingValue)\n            {\n                e++;\n            }\n        }\n    }\n    \n    fragColor = texture(iChannel0,uv);\n    float prevState = fragColor.x;\n    if( prevState < 1. )\n        for (int index = 0; index < birthValues.length(); ++index)\n        {\n            if(e == birthValues[index])\n            {\n                fragColor.r = birthingValue;\n                break;\n            }\n        }\n    else\n    {\n        if (prevState == birthingValue)\n        {\n            fragColor.r = prevState - 1.;\n            for (int index = 0; index < surviveValues.length(); ++index)\n            {\n                if(e == surviveValues[index])\n                {\n                    fragColor.r = birthingValue;\n                    break;\n                }\n            }\n        }\n        else\n        {\n            fragColor.r = prevState - 1.;\n        }\n    }\n    \n    if(iMouse.z > .5)\n    {\n    \tfragColor.r = max(fragColor.r, step(length(iMouse.xy - fragCoord), 5.) * birthingValue);\n    }\n    else if (iFrame < 10)\n    {\n        fragColor = vec4(0.);\n        vec2 hr = iResolution.xy / 2.;\n        if (fragCoord.x > hr.x && fragCoord.x < hr.x + 2. && fragCoord.y > hr.y && fragCoord.y < hr.y + 2.)\n        {\n            fragColor.r = birthingValue;\n        }\n    }\n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 invResolution = 1. / iResolution.xy;\n    \n    fragColor = vec4(0.);\n    \n    float kernelSize = 3.;\n    for (float x = -kernelSize; x <= kernelSize; ++x)\n    {\n        for (float y = -kernelSize; y <= kernelSize; ++y)\n        {\n            fragColor += texture(iChannel1, uv + vec2(x, y) * invResolution);\n        }\n    }\n    \n    float side = kernelSize * 2. + 1.;\n    fragColor /= (side * side);\n    fragColor *= .9;\n    \n\tfragColor = max(fragColor, texture(iChannel0,uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat[] surviveValues = float[](3.,4.,5.);\nfloat[] birthValues = float[](2.);\nfloat lifeSpan = 4.;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}