{
    "Shader": {
        "info": {
            "date": "1714840682",
            "description": "This is a demonstration of panning laws. The difference is subtle but basically, sine and square root law panning preserves power of the signal while linear does not. Use headphones to hear clearly.",
            "flags": 8,
            "hasliked": 0,
            "id": "4fVSzh",
            "likes": 2,
            "name": "Sound: Panning Laws",
            "published": 3,
            "tags": [
                "sound",
                "panning",
                "pan",
                "squarerootlaw"
            ],
            "usePreview": 0,
            "username": "taylormatson",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Create a pan \"knob\" that \"rotates\" from -100 to 100.\n// The pan knob must effect both channels simultaniously\n// When the pan goes left, reduce the right signal and vice versa\n// panValue: User-specified Pan Value\n\nvec2 mainSound( int samp, float time )\n{\n    // Stereo Input signal\n    float amp = .1;\n    float frequency = 200.;\n    vec2 oscillator = vec2(amp*sin(TAU*frequency*time));\n    \n    float panValue = 0.;\n    // Set value to [-100 to 100]\n    // -100 is full left, 0 is center, 100 is full right\n    \n    // Autopan\n    float lfo_freq = 1.;\n    panValue = 100.*sin(TAU*lfo_freq*time); // Autopan\n\n    // vec2 stereo_out = linearPan(oscillator, panValue);\n    // vec2 stereo_out = squarePan(oscillator, panValue);\n    vec2 stereo_out = sinePan(oscillator, panValue);\n\n    return stereo_out;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define PI 3.1415926535\n#define TAU 6.2831853071\n\n// Functions by Taylor Matson, education from Eric Tarr\n// Sound:Panning Laws Â© 2024 by Taylor Matson is licensed under CC BY 4.0 \n// You may reuse with attribution please!\n\n// Linear Panning\nvec2 linearPan (vec2 stereo_in, float panValue)\n{\n    float pan_max =  100.;\n    float pan_min = -100.; \n    float pan_rng = abs((pan_min)-(pan_max)); // range is 200\n\n    float x = panValue/pan_rng + .5;\n    \n    //Stereo Amp Attenuation/Boost\n    float leftAmp = x;\n    float rightAmp = 1.-x;\n    \n    //Process Signal\n    return vec2( stereo_in.x*leftAmp,stereo_in.y*rightAmp);\n}\n    \n// Square-Law Panning\nvec2 squarePan (vec2 stereo_in, float panValue)\n{\n    float pan_max =  100.;\n    float pan_min = -100.; \n    float pan_rng = abs((pan_min)-(pan_max)); // range is 200\n\n    float x = panValue/pan_rng + .5;\n    \n    //Stereo Amp Attenuation/Boost\n    float leftAmp = x;\n    float rightAmp = 1.-x;\n    \n    //Process Signal\n    return vec2( stereo_in.x*sqrt(leftAmp), stereo_in.y*sqrt(rightAmp));\n}\n    \n// Sine-Law Panning (Tangent-Law Panning)\nvec2 sinePan (vec2 stereo_in, float panValue)\n{\n    float pan_max =  100.;\n    float pan_min = -100.; \n    float pan_rng = abs((pan_min)-(pan_max)); // range is 200\n\n    float x = panValue/pan_rng + .5;\n    \n    //Stereo Amp Attenuation/Boost\n    float leftAmp = x;\n    float rightAmp = 1.-x;\n    \n    //Process Signal\n    return vec2( stereo_in.x*sin(leftAmp*(PI/2.)), stereo_in.y*sin(rightAmp*(PI/2.)));\n}\n\n// Sine-Law and Square Root Law Panning preserve power of the signal\n// while linear panning loses power in the center.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}