{
    "Shader": {
        "info": {
            "date": "1686122260",
            "description": "三角形形成的旋转图案",
            "flags": 0,
            "hasliked": 0,
            "id": "DtGXWw",
            "likes": 3,
            "name": "patterns triangle",
            "published": 3,
            "tags": [
                "patterns"
            ],
            "usePreview": 0,
            "username": "yufengjie",
            "viewed": 154
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\n\n\nfloat genCorner(vec2 D, vec2 st) {\n  vec2 halfS = smoothstep(D - vec2(0.01), D, st);\n  vec2 halfE = smoothstep(D, D + vec2(0.01), st);\n  vec2 c = halfS - halfE;\n  return c.x + c.y;\n}\n\nfloat genBound(vec2 st) {\n  float lb = genCorner(vec2(0.0), st);\n  float rt = genCorner(vec2(1.0), st);\n  return lb + rt;\n}\n\nvoid tile(inout vec2 st, float zoom) {\n  st *= zoom;\n  st = fract(st);\n}\n\n// 非常严谨的三角形，超出区域是白色\nfloat triangle(vec2 st) {\n  float z1 = 1.0 - smoothstep(st.x - 0.01, st.x, st.y);\n  float z2 = smoothstep(0.0, 0.01, st.y);\n  float z3 = 1.0 - smoothstep(1.0 - 0.01, 1.0, st.x);\n  return z1 * z2 * z3;\n}\n\nvoid rotate2D(inout vec2 st, float angle) {\n  st -= 0.5;\n  st = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * st;\n  st += 0.5;\n}\n\nvoid rotateTilePattern(inout vec2 st) {\n  st *= 2.0;\n  float index = 0.0;\n  index += step(1.0, mod(st.x, 2.0));\n  index += step(1.0, mod(st.y, 2.0)) == 1.0 ? 2.0 : 0.0; // 在垂直方向上是加2\n\n  if(index == 0.0) {\n    // rotate2D(st, PI / 180.0 * 90.0);\n  } else if(index == 1.0) {\n    rotate2D(st, PI / 180.0 * 90.0);\n  } else if(index == 2.0) {\n    rotate2D(st, PI / 180.0 * 270.0);\n  } else if(index == 3.0) {\n    rotate2D(st, PI / 180.0 * 180.0);\n  }\n\n  st = fract(st);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 st = fragCoord.xy / iResolution.xx;\n  vec3 color = vec3(0.0);\n  \n  tile(st, 8.0);\n  \n\n  rotateTilePattern(st);\n\n  rotate2D(st, 10.0 * sin(iTime ));\n  \n  \n // float b = genBound(st);\n // color += vec3(b);\n\n  float t = triangle(st);\n  color += vec3(t);\n\n  fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}