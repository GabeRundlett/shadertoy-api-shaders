{
    "Shader": {
        "info": {
            "date": "1370990296",
            "description": "Something looking organic, a bit translucent and wormy. Perhaps gross and disgusting? Based on noisy iterations again.",
            "flags": 0,
            "hasliked": 0,
            "id": "MssGW4",
            "likes": 47,
            "name": "Iterations - guts",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 9807
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// Other \"Iterations\" shaders:\n//\n// \"trigonometric\"   : https://www.shadertoy.com/view/Mdl3RH\n// \"trigonometric 2\" : https://www.shadertoy.com/view/Wss3zB\n// \"circles\"         : https://www.shadertoy.com/view/MdVGWR\n// \"coral\"           : https://www.shadertoy.com/view/4sXGDN\n// \"guts\"            : https://www.shadertoy.com/view/MssGW4\n// \"inversion\"       : https://www.shadertoy.com/view/XdXGDS\n// \"inversion 2\"     : https://www.shadertoy.com/view/4t3SzN\n// \"shiny\"           : https://www.shadertoy.com/view/MslXz8\n// \"worms\"           : https://www.shadertoy.com/view/ldl3W4\n// \"stripes\"         : https://www.shadertoy.com/view/wlsfRn\n\n\n// define the following for a version without texture lookups\n//#define PROCEDURAL\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\n\nconst mat2 ma = mat2( 0.8, -0.6, 0.6, 0.8 );\n\nvec2 map( vec2 p )\n{\n\tfloat a  = 0.7*noise(p)*6.2831*6.0; p = ma*p*3.0;\n\t      a += 0.3*noise(p)*6.2831*6.0;\n\ta += 0.2*iTime;\n\treturn vec2( cos(a), sin(a) );\n}\n\nvec3 texturef( in vec2 p )\n{\n    #ifndef PROCEDURAL\n    return texture( iChannel0, p ).xyz;\n    #else\n\tvec2 q = p;\n\tp *= 32.0;\n    \n\tfloat f = 0.0;\n    f += 0.500*noise( p ); p = ma*p*2.02;\n    f += 0.250*noise( p ); p = ma*p*2.03;\n    f += 0.125*noise( p ); p = ma*p*2.01;\n\tf /= 0.875;\n\t\n\tvec3 col = 0.53 + 0.47*sin( f*4.5 + vec3(0.0,0.65,1.1) + 0.6 );\n    return col*0.7*clamp( 1.65*noise( 16.0*q.yx ), 0.0, 1.0 );\n    #endif\n}\n\nvec2 iterate( in vec2 uv, out vec3 oCol )\n{\n    vec2 or = uv;\n\t\n\tfloat acc = 0.0;\n\tvec3  col = vec3(0.0);\n\tfor( int i=0; i<64; i++ )\n\t{\n\t\tvec2 dir = map( uv );\n\t\t\n\t\tfloat h = float(i)/64.0;\n\t\tfloat w = 1.0-h;\n\t\tvec3 ttt = w*texturef(0.5*uv );\n\t\tttt *= mix( 0.8*vec3(0.4,0.55,0.65), vec3(1.0,0.9,0.8), 0.5 + 0.5*dot( dir, -vec2(0.707) ) );\n\t\t\n\t\tcol += w*ttt;\n\t\tacc += w;\n\t\t\n\t\tuv += 0.015*dir;\n\t}\n\toCol = col/acc;\n\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // --- iterate 3 times so that we can compute gradients\n    \n    vec2 p = fragCoord / iResolution.xy;\n    vec2 orc = (2.0* fragCoord           -iResolution.xy)/iResolution.y;\n    vec2 orx = (2.0*(fragCoord+vec2(1,0))-iResolution.xy)/iResolution.y;\n    vec2 ory = (2.0*(fragCoord+vec2(0,1))-iResolution.xy)/iResolution.y;\n    \n    vec3 colc, colx, coly;\n    vec2 uvc = iterate( orc, colc );\n    vec2 uvx = iterate( orx, colx );\n    vec2 uvy = iterate( ory, coly );\n\n    float llc = length(uvc-orc);\n    float llx = length(uvx-orx);\n    float lly = length(uvy-ory);\n    vec3 nor = normalize( vec3(llx-llc, 4.0/iResolution.x, lly-llc ) );\n\n\tfloat tec = texturef(4.0*uvc + 4.0*p).x;\n    float tex = texturef(4.0*uvx + 4.0*p).x;\n    float tey = texturef(4.0*uvy + 4.0*p).x;\n    vec3 bnor = normalize( vec3(tex-tec, 400.0/iResolution.x, tey-tec) );\n\tnor = normalize( nor + 0.5*normalize(bnor) );\n    \n    // --- color ---\n\n\tvec2 di = map( uvc );\n\n    vec3 col = colx;\n\tcol *= 0.8 + 0.2*dot( di, -vec2(0.707) );\n\tcol *= 2.5;\n\tcol += vec3(1.0,0.5,0.2)*0.15*dot(nor,normalize(vec3(0.8,0.2,-0.8)) );\n\tcol += 0.12*pow(nor.y,16.0);\n\tcol += llc*vec3(1.0,0.8,0.6)*col*0.5*(1.0-pow(nor.y,1.0));\n\tcol *= 0.5 + llc;\n\tcol *= 0.2 + 0.8*pow( 4.0*p.x*(1.0-p.x), 0.25 );\n\n\tfragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}