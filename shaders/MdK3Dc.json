{
    "Shader": {
        "info": {
            "date": "1456887424",
            "description": "change 'resdiv' in BufA to adjust sobel line thickness - sobel ripped from https://www.shadertoy.com/view/MlBSWW ",
            "flags": 96,
            "hasliked": 0,
            "id": "MdK3Dc",
            "likes": 25,
            "name": "Hotline Van Damme",
            "published": 3,
            "tags": [
                "2d",
                "sobel",
                "multipass",
                "hotlinemiami"
            ],
            "usePreview": 0,
            "username": "granito",
            "viewed": 1623
        },
        "renderpass": [
            {
                "code": "\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 ACESFilm( vec3 x )\n{\n    x *= 0.6; // For the original ACES curve just multiply input (x) by 0.6.\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0, 1.0);\n}\n\nfloat dist(vec2 p0, vec2 pf){return sqrt((pf.x-p0.x)*(pf.x-p0.x)+(pf.y-p0.y)*(pf.y-p0.y));}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        \n    lowp vec2 uv = fragCoord.xy / iResolution.xy;\n    lowp float time = iTime * 0.4;\n        \n    lowp float lines = sin(uv.y * iResolution.y * 2.);\n    \n    lowp float noise = texture(iChannel1, uv * 4. + time).r; \n    noise += texture(iChannel1, 0.5 + uv * 3. - time).r;    \n    noise *= 0.333;\n    noise *= lines * 0.5 + 0.5;\n    noise = 0.6 + noise * 0.8;\n   \n    lowp float sound = texture(iChannel2, (uv - vec2(0.5,0.0)) * 0.001 + 0.15).r;\n    \n    lowp float d = dist(iResolution.xy*0.5,fragCoord.xy)*(atan(iTime * 10.1)+1.5)*0.003;\n    d *= clamp(0.0, 1.0 , float(iFrame)* 0.001 ); \n    d = mix(1.0, 0.0 ,d);\n\n    \n    vec4 c = texture(iChannel0, (uv - 0.5) * (0.9 + sound * 0.2) + 0.5 ).rgba;    \n    c.rgb *= vec3(d * 0.05 + 0.975);\n    c.rgb *= sound * sound;\n    c.rgb *= noise;\n    \n    // tonemapping\n    c *= 16.0;  \n\tc.rgb = ACESFilm(c.rgb);\n    \n    // contrast\n    c *= c * c;\n    c *= 2.;\n    \n    \n\tfragColor = vec4(c.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 4895,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/devolverdigital/jasper-byrne-miami"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define resdiv 2\n\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sobelVideo(vec2 fragCoord)\n{\n\n   \tvec2 uv = fragCoord.xy / (iResolution.xy / vec2(resdiv));\n\n    vec3 col;\n    \n    /*** Sobel kernels ***/\n    // Note: GLSL's mat3 is COLUMN-major ->  mat3[col][row]\n    mat3 sobelX = mat3(-1.0, -2.0, -1.0,\n                       0.0,  0.0, 0.0,\n                       1.0,  2.0,  1.0);\n    mat3 sobelY = mat3(-1.0,  0.0,  1.0,\n                       -2.0,  0.0, 2.0,\n                       -1.0,  0.0,  1.0);  \n    \n    float sumX = 0.0;\t// x-axis change\n    float sumY = 0.0;\t// y-axis change\n    \n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            // texture coordinates should be between 0.0 and 1.0\n            float x = (fragCoord.x + float(i)) / (iResolution.x / float(resdiv));\t\n    \t\tfloat y =  (fragCoord.y + float(j)) / (iResolution.y / float(resdiv));\n            \n            // Convolve kernels with image\n            sumX += length(1.0-texture( iChannel2, vec2(x, y) ).xyz) * float(sobelX[1+i][1+j]);\n            sumY += length(1.0-texture( iChannel2, vec2(x, y) ).xyz) * float(sobelY[1+i][1+j]);\n        }\n    }\n    \n    float g = abs(sumX) + abs(sumY);\n    g = sqrt((sumX*sumX) + (sumY*sumY));\n     \n    \n    if(g > 1.0)\n        col = vec3(1.0,1.0,1.0);\n    else\n        col = col * 0.0;\n    \n\treturn col.x;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float time = iTime * 0.4 + 0.1;\n    \n    float d;\n            \n    float redc = clamp(texture(iChannel0, uv + (sin(time) * 0.0001 - 0.00005)).r, 0.0, 1.0);\n    float greenc = clamp(texture(iChannel0, uv + (-sin(time) * 0.0001 - 0.00005)).g, 0.0, 1.0);    \n    float bluec = clamp(texture(iChannel0, uv + (-cos(time) * 0.0001 - 0.00005)).b, 0.0, 1.0);    \n    vec3 greenscreen = texture(iChannel2, uv).rgb;\n    float alpha;    \n        \n    if (greenscreen.g > 0.5 && greenscreen.r < 0.2) \n    {\n     alpha = 0.0;\n    }\n    else\n    {\n     alpha = 1.0;\n    }\n    \n\tvec3 c = 0.999 * vec3(redc,greenc,bluec);\n    \n    c = c * (0.8 + 0.2 * c);\n    \n    vec3 color = hsv2rgb( vec3(time*1.0, 0.3, fract(time) ) );\n\n  \n    d = sobelVideo(fragCoord.xy * (1.0/float(resdiv)));\n        \n\tc = max(c, color * d );\n        \n    \n    fragColor = vec4(c.rgb,alpha);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "lowp vec2 hash2seed(float seed) {\n    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.33; \n    lowp vec2 uv = fragCoord.xy / iResolution.xy; \n    lowp vec2 uv2 = uv + .04 *  (hash2seed(iTime) - 0.5) * sin(time);\n   \n\n    lowp vec2 scalefx = vec2(sin(iTime), cos(1.0-iTime)) * 0.5 + 0.5;        \n    float noise = texture(iChannel2, (uv+uv2*3.) * 0.5 * scalefx + vec2(cos(iTime), sin(iTime))).r * 0.5;\n    noise +=  texture(iChannel2, (uv+uv2*2.) * 0.5 * scalefx + vec2(sin(iTime), cos(iTime))).r *0.3;\n    noise +=  texture(iChannel2, (uv+uv2*1.5) * 0.5 * scalefx - vec2(sin(iTime), sin(iTime))).r *0.2;\n\n    \n    vec4 c = texture(iChannel0, uv ).rgba;\n    \n    lowp vec4 c2 = texture(iChannel0, uv2 ).rgba;\n    \n\tlowp vec3 bgcolor = mix( hsv2rgb( vec3(time+0.2,0.9,0.15)), hsv2rgb( vec3(time+0.1,0.6,sin(time) * 0.2 +0.1)), c.a  );\n\tc.rgb += bgcolor;    \n    \n    c += c2 * atan(time) * 0.5;\n\n    \n    \n    noise = mix(noise, 1.0-noise, c.a);    \n\tc.rgb *= 0.7 + noise * 0.6;\n    \n    lowp vec4 b = texture(iChannel1, uv ).rgba;\n    \n    c = mix(b, c, 0.3);\n    \n    \n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}