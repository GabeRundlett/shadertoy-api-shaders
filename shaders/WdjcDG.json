{
    "Shader": {
        "info": {
            "date": "1587269562",
            "description": "Use mouse: y adjusts strength of sinusoidal perturbation of radius, x adjusts number of petals.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdjcDG",
            "likes": 0,
            "name": "Circle radius perturbations",
            "published": 3,
            "tags": [
                "geometry",
                "basics"
            ],
            "usePreview": 0,
            "username": "nickcody",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "const vec3 white = vec3(1., 1., 1.);\nconst vec3 black = vec3(0., 0., 0.);\nconst vec3 gray  = vec3(.2, .2, .3);\n\n// circleTest\n//\n// coord      - pixel to test\n// center     - center of circle\n// radius     - radius of circle\n// width      - thickness of circle line\n// pixelWidth - blendiness\n\nvec3 circleTest(vec2 coord, vec2 center, float radius, float width, float pixelWidth) {\n    float delta = distance(coord, center)-radius;\n    \n    // From shadertoy default shader\n    vec3 inside = .5 + .5*cos(iTime+coord.xyx+vec3(0,2,4));\n    \n    float blend = smoothstep(0., pixelWidth, abs(delta) - width);\n    \n    if (delta  < 0.)\n        return mix(white, inside, blend); // rgb -> white (inside  edge)\n    else if (delta  > 0.)\n        return mix(white, black, blend);  // white -> black (outside edge)\n    else\n        return white;\t\t\t\t\t  // can't decide\n        \n}\n\n// Credit: https://thebookofshaders.com/edit.php#10/ikeda-simple-grid.frag\n//\nfloat grid(vec2 st, float res){\n    vec2 grid = fract(st*res);\n    return 1.-(step(res,grid.x) * step(res,grid.y));\n}\n\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord) {\n    \n    float aspect     = iResolution.y/iResolution.x,\n          pixelWidth = 1./iResolution.x,\n          width      = 2./iResolution.x,\n          maxPetals  = 12.,\n          br         = .1;\n\n    \n    vec2 dMouse = iMouse.xy == vec2(0) ? iResolution.xy/2. : iMouse.xy,\n         cen    = vec2(1., aspect) / 2.,\n    \t q      = fragCoord.xy/iResolution.x,\n    \t nq     = q - cen,\n    \t m      = dMouse.xy/iResolution.x,\n         nm     = m - cen;\n    \n    float a   = atan(nq.y,nq.x);\n    float p   = ceil(maxPetals * m.x);\n\tfloat vr  = 8. * br * aspect * nm.y; // -1./petals keeps bottom row as vr=0\n    float s   = sin(p * a);\n    float r   = br  + vr * s;\n    \n    vec3 c = circleTest(\n        q, \n        cen,\n        r,\n        width, \n        pixelWidth\n    );\n\t\n    c = c == vec3(0.) ? gray * grid(fragCoord, maxPetals/iResolution.x ) : c;\n    \n    out_color = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}