{
    "Shader": {
        "info": {
            "date": "1474066371",
            "description": "trying to improve on https://www.shadertoy.com/view/Msf3Wr\nby allowing for performance tweaks.\njust modify some global constants\n\n//#define HideMultiversePattern at own risk, looks better with large layers\nhigh smoothness at own risk\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MlyGWR",
            "likes": 28,
            "name": "faster infinite zoom noise",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "noise",
                "tunnel",
                "zoom"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1660
        },
        "renderpass": [
            {
                "code": "//a simpler tiny (well documented) variant of this is\n//https://www.shadertoy.com/view/ltjXDW\n//but that one flickers more.\n\n//fractal noise, modified by ollj\n//to work nicely with modifiable constants:\n//to allow lower and higher detail, varying #layers\n//to have \"roughness\" independend from #layers\n//to visualize a chosable fractal pattern via //#define showMultiversePattern\n//to remove unnecessary distortions, less 2d rotation.\n//\n//based on https://www.shadertoy.com/view/Msf3Wr \n//by mu6k\n//License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//known errors\n//brightness oscillates a bit (over time)\n//more noticable with few [layers], barely with layers>6 \n//because f(x)=x-x*x: is not an ideal averaging curve for \"shepard tone fadeing\"\n//but for a good performance it is close enough.\n\n//beware:\n//while this can be used to zoom infinitely\n//its fractalness means that\n//the same valleys/hills re-appear within the same angle\n//and if you stand at the center\n//the horizon is \"a perfect fit\"\n//over infinitely many valleys and mountains.\n//which is noticeable rather quickly\n//even if you map this on a sphere.\n//A workaround for this is to use this noise \n//multiple times to create interferrence patterns.\n\n//type constrains:\n//because [i] [layers] and [pattern] \n//make little sense as floats\n//i made them explicitly type int\n//for user friendly constrains\n//even though type conversion may slow shit down.\n//See yourself how it looks with [pattern] type float\n\n////irrational numbers, do not touch!\nconst float pi =asin(1.)*2.;   //3.14..=fullRotationDistance/radius\nconst float tau=asin(1.)*4.;   //6.28..=fullRotationDistance/diameter\nconst float phi=sqrt(5.)*.5+.5;//1.61..=goldenRatio; 1/phi=1-phi=0.61...\n//they are not essential here, but i like to include them EVERYWHERE\n////irrational numbers.end\n\n\n////modifiable constants:\n//extreme values likely lead to extreme artefacs.\n\n//number if iterations , level of detail\nconst int layers=8;\n//layers=8 is a good compromise bettwen\n//perfortmance and not seeing large squares.\n\n//roughness >1. smaller values are smoother noise.\n//roughness becomes irrelevant on small [layers]\nconst float roughness=8.;//=.7*tau*phi;\n\n//z sets a fractal pattern, it is ALWAYS noticable.\n//some are just less diagonal and blend in more.\n//values near 50 tend to blend in best.\n//values likely >100 cause various issues\n//due to low precision for small abs(p.y) (you will see a \"horizon\" in the noie itself)\nconst int pattern=41;\n\n#define HideMultiversePattern\n//comment out to visualize [pattern]\n//better with layers>9\n//a better [pattern] appears more uniformly grey\n//=41 is pretty decent at that.\n//a \"worse\" pattern will create more noticeable concentric\n//lines or rings of valleys and hills.\n//an ideal pattern may look like a fibonacci spiral?\n\n\n////modifiable constants.end\n\n\n//there are likely better hashes for this one\n//but for this demo the fract(sin()) hash is pretty irrelevant?\nfloat hash(float x){\n return fract(sin     (x*9801.)*99.);\n //return fract(sin(cos(x*99.)*99.)*99.);\n //return fract(sin(cos(x*12.13)*19.123)*17.321);\n}\n\nfloat ss01(float x){return smoothstep(0.,1.,x);}\n//this noise function still works recursivey.\nfloat noise(vec2 p){\n const float z=float(pattern);\n//const float z=float(pattern)*1.61; //bad idea\n vec2 m=fract(p),o=floor(p);o.y*=z;o.y+=o.x;\n float a=hash(o.y     );float b=hash(o.y+1.  );\n float c=hash(o.y+   z);float d=hash(o.y+1.+z);//begs for simplification\n return mix(mix(a,b,ss01(m.x)),mix(c,d,ss01(m.x)),ss01(m.y));}\n\nvoid mainImage( out vec4 r, in vec2 i){\n float o=roughness/sqrt(float(layers));\n //dividing roughness by /sqrt(layers) \n //keeps the zooming speed relatively constant for most layer counts;\n float t=-2.*iTime/o;\n vec2 v=i/iResolution.x;\n v-=vec2(1.,iResolution.y/iResolution.x)*.5;\n float w=0.;\n for(int i=0;i<layers;i++){\n  float j=float(i);\n  float m=float(layers);\n#ifndef HideMultiversePattern \n  j/=o;\n#endif\n  float u=mod(t+j,m);\n  float e=pow(o,u);\n  float l=u-t;\n  float z=u/m;\n  w-=noise(v*e+cos(vec2(l)))*(z-z*z);\n //*(.5-abs(f-.5))*.5;  \n }\n    \n //tweaky values need to be optimized out.\n //so far this linear interpolation works fine (a in,it is visible)\n //for a STATIC range of layers, range [2 to 20]\n w=mix(w+.7,w+1.5,float(layers)*.1-.3);\n r=vec4(vec3(w),1.);}\n\n/*\n//https://www.shadertoy.com/view/ltjXDW#\n\ntiniest\nfloat N(vec2 p) {\n\tvec2 f = fract(p); p-=f; f *= f*(3.-f-f);  \n    return dot( mat2(fract(sin(vec4(0, 1, 57, 58) + p.x+p.y*57.)*1e4)) * vec2(1.-f.y,f.y), vec2(1.-f.x, f.x) );\n}\n\n//tiny:\nvec4 tinInfiniteFractalFabrice( out vec4 o, in vec2 p ){\n    {\n    vec2 r = iResolution.xy; // Fabrice's suggestion.\n\tp=(p-r*.5)/r.y;\n\tfloat c = 0.,t=iTime*.6,f;\n    o=vec4(0);\n    const float layers=14.;\n\tfor (float i = 0.; i<layers; i++){\n\t\tf = fract((i - t*2.)/layers);     \n        o += texture(iChannel0, p*exp2(f*layers)/2e2 + i*.9)*(.5-abs(f-.5))*.5;        \n\t}return o;}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}