{
    "Shader": {
        "info": {
            "date": "1703773507",
            "description": "This is very messily coded. The rough idea is to oscillate the terrain (things far from centre oscillate more), then average the output over many frames. Click the screen to change position",
            "flags": 32,
            "hasliked": 0,
            "id": "Mf23Rz",
            "likes": 22,
            "name": "Fake Tilt-shift / DOF",
            "published": 3,
            "tags": [
                "raymarch",
                "depthoffield",
                "tiltshift",
                "micro",
                "photography"
            ],
            "usePreview": 1,
            "username": "SnoopethDuckDuck",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "// !!! CLICK THE SCREEN !!!\n\nvoid mainImage( out vec4 o, vec2 u )\n{\n    o = texture(iChannel0, u/iResolution.xy);\n    o.rgb /= o.a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define pi 3.14159\n#define Dir(a) vec2(cos(a), sin(a))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec3 ori() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(6, 3, 3);\n    //ro.yz *= rot(-m.y*3.14+1.);\n    ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nvec2 map(vec3 p) {\n    float mat = 0.;   \n    p /= 1.+.005*dot(p,p);\n    //p.y += 1.- 1./cosh(.15*length(p.xz));\n    p.xz *= .4; //mix(.38, .42, tanh(iTime));\n    p.x += 4.*iMouse.y / iResolution.y - 2.;\n    float d = p.y + .15 - texture(iChannel0, .1* p.xz).r;\n   \n    d -= .3 * texture(iChannel0, .3 * p.xz).r;\n    d -= .13*exp(-6.*texture(iChannel0, .5 * p.xz).r);\n    d += .06 * texture(iChannel0, p.xz).r;\n    \n    float falloff = 1.-1./cosh(.15*abs(dot(p,p) - .5*cos(61.*iTime)));\n    //falloff = smoothstep(1., 2.2, length(p.xz));\n    //falloff += .5*texture(iChannel0, .1 * p.xz).r - .2;\n    float rand = texture(iChannel1, p.xz - Dir(p.x+10.*iTime)*iTime).r;\n    \n    // comment this for worse output but less lag\n    //rand = texture(iChannel1, p.xz + Dir(rand) * iTime).r;\n    \n    d -= falloff * rand;\n    \n    return vec2(d, mat);\n}\n\nvec3 march(vec3 ro, vec3 rd, float z) {\t\n    float d = 0.;\n    float s = sign(z);\n    int steps = 0;\n    float mat = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        if (s != sign(m.x)) { z *= 0.5; s = sign(m.x); }\n        if (abs(m.x) < SURF_DIST || d > MAX_DIST) {\n            steps = i + 1;\n            mat = m.y;\n            break;\n        }\n        d += m.x * z; \n    }   \n    return vec3(min(d, MAX_DIST), steps, mat);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat AO(in vec3 p, in vec3 n) {\n\tfloat occ = 0.;\n    float sc = 1.;\n    for (float i = 0.; i < 5.; i++) {\n        float h = 0.015 + 0.015 * i;\n        float d = map(p+h*n).x;\n        occ += (h-d)*sc;\n        sc *= 0.95;\n    }\n    return clamp(1. - 3.*occ, 0., 1.);\n}\n\nfloat shadow(in vec3 ro, in vec3 rd) {\n    float res = 1.;\n    float t = SURF_DIST;\n    for (int i=0; i<24; i++)\n    {\n\t\tfloat h = map(ro + rd * t).x;\n        float s = clamp(32. * h / t, 0., 1.);\n        res = min(res, s);\n        t += clamp(h, 0.01, 0.2);\n        if(res<SURF_DIST || t>MAX_DIST ) break;\n    }\n    res = clamp(res, 0.0, 1.0);\n    return smoothstep(0., 1., res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t//uv += .03*(1.-1./cosh(2.*length(uv))) * Dir(10.*iTime+texture(iChannel1, uv+iTime).x);\n    vec3 ro = ori();\n    \n    vec3 rd = dir(uv, ro, vec3(0,.5,0), 2.3);\n    vec3 col = vec3(0);\n   \n    vec3 m = march(ro, rd, 1.);  \n    float d = m.x;    \n    vec3 p = ro + rd * d;\n    \n    if (d<MAX_DIST) {        \n        vec3 n = norm(p);\n        vec3 r = reflect(rd, n);        \n\n        vec3 ld = normalize(vec3(1,2,3));\n        float dif  = dot(normalize(n+r),  ld)*.5+.5;\n        float spec = pow(dif, 12.);\n        float fres = pow(1. + dot(rd, n),  5.);\n     \n        //col = vec3(1);\n        col = vec3(dif);//fres * vec3(spec*45.);  \n        col *= 1.+r;\n        col *= fres;\n        //col = min(col, 1.-spec);\n    }\n    \n    col = max(col, vec3(1.4, .7, 1.2*cos(.5*p.x))*(1.-exp(-.005*m.y)) \n        * (1.+cos(8.*p.y)));\n        \n    col = pow(col, vec3(1./2.3));   \n    col = tanh(2.5*col);\n    fragColor = vec4(col, 1);\n    \n    vec4 A = texture(iChannel2, fragCoord / iResolution.xy);\n    if (iMouse.z <= 0.) fragColor += A;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}