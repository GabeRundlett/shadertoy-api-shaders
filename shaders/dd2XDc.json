{
    "Shader": {
        "info": {
            "date": "1728035317",
            "description": "A very very simple fractal, just mirror, rotate and scale ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "dd2XDc",
            "likes": 0,
            "name": "Basic sponge",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "rogo1965",
            "viewed": 31
        },
        "renderpass": [
            {
                "code": "//Basic fractal by @paulofalcao\n\nconst int maxIterations=6;//a nice value for fullscreen is 8\n\nfloat circleSize=1.0/(3.0*pow(2.0,float(maxIterations)));\n\n//generic rotation formula\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t//normalize stuff\n\tvec2 uv=iResolution.xy;uv=-.5*(uv-2.0*fragCoord.xy)/uv.x;\n\n\t//global rotation and zoom\n\tuv=rot(uv,iTime);\n\tuv*=sin(iTime)*0.5+1.5;\n\t\n\t//mirror, rotate and scale 6 times...\n\tfloat s=0.3;\n\tfor(int i=0;i<maxIterations;i++){\n\t\tuv=abs(uv)-s;\n\t\tuv=rot(uv,iTime);\n\t\ts=s/2.1;\n\t}\n\t\n\t//draw a circle\n\tfloat c=length(uv)>circleSize?0.0:1.0;\t\n\n\tfragColor = vec4(c,c,c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}