{
    "Shader": {
        "info": {
            "date": "1520497751",
            "description": "Exercise in variable curvature",
            "flags": 0,
            "hasliked": 0,
            "id": "XscyDl",
            "likes": 11,
            "name": "Petals",
            "published": 3,
            "tags": [
                "flower",
                "leaf",
                "curvature",
                "petal"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 675
        },
        "renderpass": [
            {
                "code": "// \"Petals\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 qHit;\nfloat dstFar, tCur;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, h, r, y, s;\n  dMin = dstFar;\n  h = 2.;\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * ((length (q.xz) > 0.) ? atan (q.z, - q.x) /\n     (2. * pi) : 0.) + 0.5) / 6.));\n  q.x += 3.1;\n  q.xy = Rot2D (q.xy, -0.33 * pi);\n  r = length (q.xz);\n  qq = q;\n  for (float k = 0.; k < 2.; k ++) {\n    q = qq;\n    q.y -= 0.1 * step (0.5, k);\n    q.xz = Rot2D (q.xz, sign (k - 0.5) * pi / 6.);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (3. * ((r > 0.) ?\n       atan (q.z, - q.x) / (2. * pi) : 0.) + 0.5) / 3.));\n    y = 0.5 * (1. + q.y / h);\n    s = 1. - 0.9 * cos (0.5 * pi * y);\n    d = max (PrCylAnDf (q.xzy, 0.3 + 0.5 * y + s * (1. + 0.5 * s) - 0.01 * step (0.5, k), 0.01, h),\n       abs (q.z) - 1.55 + 1.4 * (1. - (0.12 + y) * (0.88 - y)));\n    DMINQ (1);\n  }\n  dMin *= 0.5;\n  q = qq;  q.y += 1.75;\n  d = max (PrSphDf (q, 0.6), q.y - 0.4);\n  DMINQ (2);\n  q = qq;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (12. * ((r > 0.) ? atan (q.z, - q.x) /\n     (2. * pi) : 0.) + 0.5) / 12.));\n  q.y += 1.;\n  q.x = abs (q.x + 0.1 + 0.2 * q.y * (1. + q.y)) - 0.04;\n  d = 0.3 * PrCylDf (q.xzy, 0.01, 0.4);\n  DMINQ (3);\n  q = qq;  q.xy += vec2 (0.5, 2.35);\n  d = max (PrTorusDf (q, 0.05, 0.5), q.y);\n  q.xy = Rot2D (q.xy, 0.25 * pi);\n  d = max (d, - q.y);\n  DMINQ (4);\n  q.xy -= vec2 (0.5, -1.3);\n  d = PrCylDf (q.xzy, 0.05, 1.3);\n  DMINQ (4);\n  q = p;  q.y += 4.4;\n  d = PrCylDf (q.xzy, 1.5, 0.5 * (1. - 0.1 * length (q.xz) / 1.5));\n  DMINQ (5);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 ltPos[3], ltCol[3], col, vn, ltDir, dfSum, spSum;\n  vec2 vf;\n  float dstObj, spec, cv, at, r, a;\n  for (int k = 0; k < 3; k ++) {\n    a = 2. * pi * float (k) / 3.;\n    ltPos[k] = 10. * vec3 (cos (a), 0.5, sin (a));\n  }\n  ltCol[0] = vec3 (1., 1., 0.4);\n  ltCol[1] = vec3 (1., 0.4, 0.4);\n  ltCol[2] = vec3 (0.4, 0.4, 1.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    spec = 0.;\n    if (idObj == 1) {\n      cv = (1. - 0.3 * (1. - 0.4 * (SmoothBump (0.4, 0.6, 0.05, mod (6. * (abs (qHit.z) -\n         0.3 * abs (qHit.x) - 0.6 * qHit.x * qHit.x), 1.)) + 1. - smoothstep (0., 0.02,\n         abs (qHit.z))))) * (1. - 0.3 * smoothstep (0.4, 0.5, abs (qHit.z) +\n         0.1 * abs ((qHit.x + 0.3) * (1. - (qHit.x + 0.3))))) *\n         (1. - 0.3 * smoothstep (-0.8, -0.5, qHit.x - 0.5 * abs (qHit.z)));\n      col = HsvToRgb (vec3 (floor (6. * (atan (ro.z, - ro.x) / (2. * pi) + 0.5) + 0.5) / 6., 0.7, cv));\n      spec = 0.1;\n      vf = vec2 (128., 0.1);\n    } else if (idObj == 2) {\n       if (qHit.y < 0.35) {\n        col = vec3 (0.3, 0.9, 0.2) * (1. - 0.3 * SmoothBump (0.4, 0.6, 0.05,\n           mod (12. * ((length (qHit.xz) > 0.) ? atan (qHit.z, - qHit.x) / (2. * pi) : 0.), 1.)));\n        spec = 0.1;\n        vf = vec2 (64., 0.5);\n      } else {\n        r = length (qHit.xz);\n        qHit.xz = Rot2D (qHit.xz, 5. * tCur);\n        col = mix (vec3 (0.5, 0.5, 0.1), vec3 (0.4, 0.2, 0.1), SmoothBump (0.2, 0.8, 0.1,\n           mod (16. * r + ((r > 0.) ? atan (qHit.z, - qHit.x) / (2. * pi) : 0.), 1.)));\n        spec = 0.05;\n        vf = vec2 (32., 2.);\n      }\n    } else if (idObj == 3) {\n      col = mix (vec3 (0.9, 0.9, 0.2), vec3 (1., 0.1, 0.1), step (0.35, qHit.y));\n      spec = 0.1 - step (0.35, qHit.y);\n    } else if (idObj == 4) {\n      col = mix (vec3 (0.2, 0.3, 0.2), vec3 (0.2, 0.7, 0.1), smoothstep (-1., 0., qHit.y));\n      spec = 0.1;\n      vf = vec2 (64., 0.5);\n    } else if (idObj == 5) {\n      if (length (ro.xz) < 1.4) {\n        col = vec3 (0.25, 0.15, 0.1) * (0.5 + 0.5 * step (0.1, length (Rot2D (ro.xz, 2. * pi *\n           (floor (6. * atan (ro.z, - ro.x) / (2. * pi) + 0.5) / 6.)) + vec2 (0.25, 0.))));\n        vf = vec2 (32., 1.);\n      } else {\n        col = vec3 (0.7, 0.7, 0.9);\n        vf = vec2 (128., 0.2);\n      }\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    if (spec >= 0.) {\n      dfSum = vec3 (0.);\n      spSum = vec3 (0.);\n      for (int k = 0; k < 3; k ++) {\n        ltDir = normalize (ltPos[k]);\n        at = smoothstep (0.7, 0.8, dot (normalize (ltPos[k] - ro), ltDir));\n        dfSum += ltCol[k] * at * max (dot (vn, ltDir), 0.);\n        spSum += ltCol[k] * at * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n      }\n      col = col * (0.2 + 0.7 * dfSum) + spec * spSum;\n    }\n  } else {\n    col = vec3 (1., 1., 0.8) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.1 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= pi * mPtr.y;\n  } else {\n    az += 0.02 * pi * tCur;\n  }\n  el = clamp (el, 0.05 * pi, 0.4 * pi);\n  ro = 20. * vec3 (cos (el) * cos (az), sin (el), cos (el) * sin (az));\n  vd = normalize (vec3 (0., -1., 0.) - ro);\n  vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  zmFac = 4.4 - 0.8 * abs (el);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 40.;\n  col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col *= 0.8 + 0.2 * pow (1. - 0.5 * length (uvs * uvs), 4.);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}