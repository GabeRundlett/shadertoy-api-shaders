{
    "Shader": {
        "info": {
            "date": "1616341093",
            "description": "Attempting to procedurally generate cloud brushes. Splatting n layers of carefully filtered fbm. ",
            "flags": 0,
            "hasliked": 0,
            "id": "NsXGRX",
            "likes": 36,
            "name": "RandomCloudBrushes",
            "published": 3,
            "tags": [
                "2d",
                "clouds",
                "cloud",
                "brush"
            ],
            "usePreview": 0,
            "username": "kuvkar",
            "viewed": 1201
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358\n\nvec2 g_uv;\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat fbm(vec2 uv, int layers)\n{\n    float f = 0.0;\n    for (int i = 0; i < layers; ++i)\n    {\n        float fi = float(i + 1);\n        f += texture(iChannel0, uv * pow(2.0, fi)).r * pow(0.5, fi);\n    }\n    \n    return f;\n}\n\nfloat getCloudLayer(vec2 uv, vec2 seed)\n{\n    \n    float layer = fbm(uv * .15, 1);\n    \n    float circleMask = smoothstep(0.1, 0.4, length(uv * vec2(.9, 1.)));\n    float cloudMask = smoothstep(0.0, 0.76, fbm(uv * .07 + seed, 6));\n    float baseMask = max(0.0, cloudMask - circleMask*1.);\n    float edgeMask = smoothstep(0., .2, baseMask);    \n    float shape = smoothstep(0.0, 0.1, baseMask);\n    float tex = fbm(seed + uv * .1, 5) * shape;\n    tex = smoothstep(-0.4, 1., tex);\n    float tex2 = fbm(vec2(0.2, 0.2) + seed + uv*.05, 4) * shape;\n    \n    float dark = 1.0 - smoothstep(0.1, 0.7, fbm(seed + uv * .05, 7) * shape);\n    tex *= 0.5 + 0.5 * smoothstep(0.0, 0.7, tex2);\n    \n    dark += (uv.y * 5.0);\n    dark = smoothstep(-0.4, 1., dark);\n    tex *= dark;    \n    tex *= edgeMask;\n    return tex;\n}\n\nvec4 getCloudTexture(in vec2 uv, in vec2 seed)\n{\n    vec4 color = vec4(0.0);\n    vec2 offset = vec2(0.0);\n    for (int i = 0; i < 4; ++i)\n    {\n        float x = rand(seed + float(i) * .12) - .5;\n        float y = rand(seed + float(i) * .13) - .5;\n        float cloud = getCloudLayer(uv + offset*.4, seed + offset);\n        color = mix(color, vec4(1.0), cloud);\n        offset += vec2(x, y)*.5;\n    }\n    float squareMask = smoothstep(0.4, 0.5, max(abs(uv.y), abs(uv.x)));\n    color -= squareMask;\n    color = clamp(color, 0.0, 1.0);\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; uv -= vec2(.5);    \n    g_uv = uv;\n    uv.y /= iResolution.x / iResolution.y;\n    uv *= 4.;\n    vec2 seed = vec2(floor(iTime), 0.0);\n    \n    fragColor = vec4(0.01, 0.045, 0.14, 0.0) * (g_uv.y + .9);\n    \n    vec2 muv = mod(uv, 1.0) - 0.5;\n    seed += floor(uv)*.0133;\n    vec4 cloudColor = getCloudTexture(muv, seed);\n    fragColor = mix(fragColor, cloudColor, cloudColor.a);\n        \n    vec2 absUv = abs(g_uv);\n    \n    fragColor *= smoothstep(0.5, 0.35, absUv.x);\n    fragColor *= smoothstep(0.5, 0.35, absUv.y);\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0/2.2));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}