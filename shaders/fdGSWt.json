{
    "Shader": {
        "info": {
            "date": "1635454426",
            "description": "Abstract Planes Fragmented",
            "flags": 0,
            "hasliked": 0,
            "id": "fdGSWt",
            "likes": 14,
            "name": "Abstract Planes Fragmented",
            "published": 3,
            "tags": [
                "abstract",
                "planes",
                "fragmented"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via Noodlesplate (https://github.com/aiekick/NoodlesPlate)\n\nconst vec3 uColor0 = vec3(0.2,0.8,0.3);\nconst vec3 uColor1 = vec3(0.8,0.2,0.37);\n\nmat3 rotx(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 roty(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 rotz(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nmat3 m1;\nmat3 m2;\n\nvec3 path(vec3 p)\n{\n\tp.xy += cos(iTime * 0.1);\n\tp *= rotz(p.z * 0.2);\n    p += sin(p.zxy * 0.5) * 0.5;\n\tp *= rotz(p.z * 0.2);\n    p = sin(p.zxy * 0.1) * 2.;\n    return p;\n}\n\nfloat pattern(vec3 p)\n{\n\tp = abs(fract(p*.3) - 0.5);\n\treturn length(max(abs(p.x), abs(p.y)) - p.z);\n}\n\nfloat sdf(vec3 p)\n{\n\tp += path(p);\n\tp *= rotz(p.z * 0.045);\n\tvec2 q = mod(p.xz, 3.0) - 1.5;\n\tvec3 qm1 = p*m1, qm2 = p*m2;\n\tfloat d0 = min(pattern(qm1), pattern(qm2));\n    float d1 = min(pattern(qm1*3.), pattern(qm2*2.));\n   \tfloat dist0 = (1.-clamp(d0,0.,1.));\n\tfloat dist1 = (1.-clamp(d1,0.,1.))*d0;\n\tfloat sp = 1. - cos(p.z * 1.5) * 0.1 - abs(p.y) + dist0*0.75 + dist1*2.25;\n\tp.xz = mod(p.xz, 1.5) - 0.75;\n\tfloat ct = (cos(iTime * 0.5) * 0.5 + 0.5) * 2.0;\n\tfloat st = (sin(iTime * 0.5) * 0.5 + 0.5) * 2.0;\n\tfloat bo = length(max(abs(p) - vec3(ct,1000.0,st), 0.0)) - 0.1;\n\t\n\treturn max(bo,sp);\n}\n\nfloat mat(vec3 p)\n{\n\tp += path(p);\n\tp *= rotz(p.z * 0.045);\n\tvec2 q = mod(p.xz, 3.0) - 1.5;\n\tvec3 qm1 = p*m1, qm2 = p*m2;\n\tfloat d0 = min(pattern(qm1), pattern(qm2));\n    float d1 = min(pattern(qm1*3.), pattern(qm2*2.));\n   \tfloat dist0 = (1.-clamp(d0,0.,1.));\n\tfloat dist1 = (1.-clamp(d1,0.,1.))*d0;\n\tfloat sp = 1. - cos(p.z * 1.5) * 0.1 - abs(p.y) + dist0*0.75 + dist1*2.25;\n\tp.xz = mod(p.xz, 1.5) - 0.75;\n\tfloat ct = (cos(iTime * 0.5) * 0.5 + 0.5) * 2.0;\n\tfloat st = (sin(iTime * 0.5) * 0.5 + 0.5) * 2.0;\n\tfloat bo = length(max(abs(p) - vec3(ct,1000.0,st), 0.0)) - 0.1;\n\t\n\tif (bo > sp)\n\t{\n\t\treturn 1.0;\n\t}\n\treturn 0.0;\n}\n\nvec3 nor(vec3 p, float epsilon)\n{\n\tvec3 eps = vec3(epsilon, 0., 0.);\n\tvec3 nor = vec3(\n\t\tsdf(p + eps.xyy) - sdf(p - eps.xyy),\n\t\tsdf(p + eps.yxy) - sdf(p - eps.yxy),\n\t\tsdf(p + eps.yyx) - sdf(p - eps.yyx));\n\treturn normalize(nor);\n}\n\nfloat getSha( in vec3 ro, in vec3 rd, in float hn) // iq code\n{\n    float res = 1.0;\n    float t = 0.0005;\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )\n    {\n        h = sdf(ro + rd*t);\n        res = min( res, hn*h/t );\n\t\tt += clamp( h, 0.02, 2.0 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\n\nfloat getAO( in vec3 p, in vec3 nor ) // iq code\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12 * float(i)/4.0;\n        vec3 aopos =  nor * hr + p;\n        float dd = sdf( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ) // from shane\n{\n    n = max((abs(n) - .2)*7., .001);\n    n /= (n.x + n.y + n.z );  \n    p = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    return p*p;\n}\n\n\nvec3 doBumpMap( sampler2D tx, in vec3 p, in vec3 n, float bf) // from shane\n{\n    const vec2 e = vec2(0.001, 0);\n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    vec3 g = vec3(0.299, 0.587, 0.114)*m;\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n    return normalize( n + g*bf );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n\tfragColor = vec4(0);\n\t\n\tvec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n\t\n\tfloat ca = 3.0;\n    float ce = 8.0;\n    float cd = 20.0;\n\tfloat maxd = 1000.0;\n\t\n\tca = iMouse.x / iResolution.x * 6.28318;\n\tce = iMouse.y / iResolution.y * 30.0;\n\t\n    vec3 ro = vec3(0,0, iTime * 6.); \n\tro -= path(ro);\n\tvec3 cv = ro + vec3(0,0,4); \n\tcv -= path(cv);\n\tvec3 lp = ro + vec3(0,0,3);\n    lp -= path(lp);\n\t\n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n  \tvec3 rd = normalize(uv.x * x + uv.y * y + z);\n\t\n\tmat3 mx = rotx(-7.);\n\tmat3 my = roty(-5.);\n\tmat3 mz = rotz(-3.);\n\t\n    m1 = mx * my * mz;\n    m2 = m1 * m1;\n\t\n\tfloat d = 0.0, s = 1.0;\n\tfor (float i = 0.0; i < 500.0; i++)\n\t{\n\t\tif (log(d/1e7) > 0.0 || d > maxd) break;\n\t\ts = sdf(ro + rd * d);\n\t\td += s * 1.0;\n\t}\n\t\n\tfloat fog = 1.0-exp( -0.001*d*d );\n\t\t\n\tif (d < maxd)\n\t{\n\t\tvec3 p = ro + rd * d;\n\t\tvec3 n = nor(p, 0.01);\n\t\t\n\t\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\tfloat mt = mat(p);\n\t\t\n\t\tvec4 col = vec4(0);\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\tif (mt < 0.5) // top\n\t\t{\n\t\t\tn = doBumpMap(iChannel1, -p*0.5, n, 0.018);\n\t\t\tvec3 refl = reflect(rd,n);\n\t\t\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 );\n\t\t\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 16. );\n\t\t\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),25.);\n\t\t\tfloat sha = 0.5 + 0.5 * getSha(p, n, 2.0);\n\t\t\tfloat ao = getAO(p, n);\n\t\t\tfragColor = vec4(\n\t\t\t\t(diff + fre) * 0.8 + diff * ao,\n\t\t\t\t(diff + fre) * uColor1 + spe * sha\n\t\t\t) * 1.0;\n\t\t}\n\t\telse // wall\n\t\t{\n\t\t\tn = doBumpMap(iChannel0, -p*0.5, n, 0.1);\n\t\t\tvec3 refl = reflect(rd,n);\n\t\t\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 );\n\t\t\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),25.);\n\t\t\tfloat sha = 0.5 + 0.5 * getSha(p, n, 2.0);\n\t\t\tfloat ao = getAO(p, n);\n    \n\t\t\tfragColor = vec4(uColor0 * ao + spe * sha, 1);\n\t\t}\n\n\t\tfragColor = fragColor.zyww + fragColor.x*0.1;\n\t}\n\t\n\tfragColor = mix( fragColor, vec4(0), fog);\n       \n\tfragColor = mix(fragColor, fragColor.grba, sin(fog*3.));\n   \tfragColor = sqrt(fragColor*fragColor*fragColor*1.5);\n\t\n\t// vigneting from iq\n    vec2 q = fragCoord/iResolution.xy;\n    fragColor.rgb *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 1.0 );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}