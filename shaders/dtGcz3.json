{
    "Shader": {
        "info": {
            "date": "1702817606",
            "description": "Animated reproduction of this image: https://desenio.fr/p/affiches/peintres-celebres/bauhaus/bauhaus-1923-affiche/",
            "flags": 0,
            "hasliked": 0,
            "id": "dtGcz3",
            "likes": 1,
            "name": "Bahaus",
            "published": 3,
            "tags": [
                "color",
                "circle",
                "reproduction",
                "bahaus"
            ],
            "usePreview": 0,
            "username": "Saimon",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "/* \"Bahaus\"\n * I wanted to practice GLSL and the primitives describe in https://thebookofshaders.com/07/\n * so I started looking for art images to try to reproduce.\n * This one is the first one of the serie, it follows Bauhaus esthetic, \n * and is based on: https://desenio.fr/p/affiches/peintres-celebres/bauhaus/bauhaus-1923-affiche/\n * (November 2023)(started with 1438 char - Updated 10/01/24)\n */\n\n#define R       iResolution.xy\n\nfloat sdCircle(vec2 p, float r){\n  float w = .8/R.y;\n  return smoothstep(-w,w, length(p) - r);\n}\n\n// r: radius\n// s: size of the border\n// Derived from: http://iquilezles.org/articles/distfunctions2d/\nfloat sdCircleBorder(vec2 p, float r, float s){\n    float d = length(p) - r, //signed distance of circle\n          d2 = abs(d) - s,\n          w = .8/R.y;\n    return smoothstep(-w,w,max(d,d2));\n}\n\n// Simplify version of code: https://thebookofshaders.com/edit.php?log=160909065147\n// and http://www.kynd.info\nfloat easeInOutExpo(float t) {\n  t = exp2(40.*t-10.);\n  return t < 1.\n      ?      .5 * t\n      : 1. - .5 / t;\n}\n\n#define tweenEIOE(t) easeInOutExpo(min(t, 1. -t))\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 st = ( fragCoord.xy*2. -R.xy ) /R.y ;\n  float t = fract((iTime+2.)/3.);\n\n  // Convert hexa color to glsl: https://airtightinteractive.com/util/hex-to-glsl/\n  vec3 YELLOW = vec3(0.941,0.588,(0.004));\n  vec3 ORANGE = vec3(0.914,0.349,0.141);\n  vec3 RED = vec3(0.902,0.118,(0.167));\n\n  // Here the division of the tween aren't random.\n  // Indeed, I want my yellow circle to have a radius of 0.7.\n  // To simulate this I divide tween out value between [0,1] by the number that could give me what I want:\n  // (1. / 1.25 = 0.8); it's the same logic applied to the other circles\n  float c1 = sdCircleBorder(st, tweenEIOE(t)/1.25, 0.251),\n        c2 = sdCircleBorder(st, tweenEIOE(t)/1.8, 0.23),\n        c3 = sdCircle(st, tweenEIOE(t)/3.);\n\n  vec3 col = mix(YELLOW, vec3(1.), c1);\n  col = mix(ORANGE, col, c2);\n  col = mix(RED, col, c3);\n  fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}