{
    "Shader": {
        "info": {
            "date": "1588609781",
            "description": "camera noise visual effect",
            "flags": 0,
            "hasliked": 0,
            "id": "tdXBz2",
            "likes": 6,
            "name": "Camera noise",
            "published": 3,
            "tags": [
                "noise",
                "camera"
            ],
            "usePreview": 0,
            "username": "kaylent",
            "viewed": 498
        },
        "renderpass": [
            {
                "code": "// \"Camera noise\" by kaylent - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n//random alghoritm by Spatial https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl \n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)); }\n\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\n\nfloat random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n\nvec2 fishEye(vec2 uv){\n    uv -= vec2(0.5,0.5);\n    uv = uv * 1.2 * (0.833 + 2.0f * uv.x*uv.x * uv.y*uv.y);\n    uv += vec2(0.5,0.5);\n    return uv;\n}\n\nvec2 squadShift(vec2 fragCoord){\n    vec2 shift;\n    shift.x = random(floor(fragCoord.x/60.0))*float(uint(fract(iTime/3.0)+0.10))/24.0;\n    shift.y = random(floor(fragCoord.y/60.0))*float(uint(fract(iTime/3.0)+0.10))/24.0;\n    shift.x += random(floor(fragCoord.x/60.0))*float(uint(fract(iTime/11.0)+0.10))/48.0;\n    shift.y += random(floor(fragCoord.y/60.0))*float(uint(fract(iTime/11.0)+0.10))/48.0;\n    return shift;\n}\n\nvec2 scanShift(vec2 fragCoord){\n    vec2 shift;\n    shift.y = exp(-pow(iResolution.y-fragCoord.y-fract(iTime*2000./8000.)*8000.,2.0)/1.);\n    shift.y += exp(-pow(iResolution.y-20.-fragCoord.y-fract(iTime*2000./8000.)*8000.,2.0)/1.);\n    shift.y += exp(-pow(iResolution.y-fragCoord.y-fract(iTime*2000./3000.)*12000.,2.0)/1.);\n    shift.y += exp(-pow(iResolution.y-fragCoord.y-fract(iTime*2000./2400.)*23400.,2.0)/1.);\n    shift.x = 0.;\n    return shift;\n}\n\n\nvec3 tonalCompression(vec3 color, float exposure ){\n    return vec3(1.0) - exp(-color * exposure);    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 texColor;\n\n    uv += squadShift(fragCoord);\n    uv += scanShift(fragCoord);\n    uv = fishEye(uv);    \n\t//remove the second part for more purity\n    float noise = (sin(uv.y*350.0f+iTime*14.f)+1.35)*min((random(uv+iTime*2.f)*10.),1.0);\n    noise = min(noise, 1.0);\n    \n\ttexColor = texture(iChannel0,uv).xyz*noise;\n\ttexColor = tonalCompression(texColor, 3.0f);\n    \n    fragColor = vec4(texColor,1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}