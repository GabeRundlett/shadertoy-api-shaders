{
    "Shader": {
        "info": {
            "date": "1487188400",
            "description": "Julia Revolute",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXczN",
            "likes": 4,
            "name": "Julia Revolute 1",
            "published": 3,
            "tags": [
                "julia",
                "revolute"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 604
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nvec3 mat = vec3(28,250,43)/255.;\t\t\t\t\t\t\t\t\t\n\nconst vec3 ld = vec3(0.,1., .5);\n\nfloat t = 0.;\n\nfloat fullAtan(vec2 p)\n{\n    return step(0.0,-p.x)*3.1415926535 + sign(p.x) * atan(p.x, sign(p.x) * p.y);\n}\n\nfloat fractus(vec2 p, vec2 v)\n{\n\tvec2 z = p;\n    vec2 c = v;\n\tfloat k = 1., h = 1.0;    \n    for (float i=0.;i<20.;i++)\n    {\n        h *= 4.*k;\n\t\tk = dot(z,z);\n        if(k > 4.) break;\n\t\tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n    }\n\treturn sqrt(k/h)*log(k);   \n}\n\nvec2 df(vec3 p)\n{\n\tfloat a = fullAtan(p.xz)*0.5 + iTime * 0.5;\n    \n    vec2 rev = vec2(length(p.xz),p.y) - 1.7;\n    rev *= mat2(cos(a),-sin(a),sin(a),cos(a));\n\t\n\tfloat ftus = fractus(rev, vec2(-0.2,-0.688));\n\tvec2 res = vec2(ftus, 0);\n\t\n\tif (p.z > res.x)\n\t\tres = vec2(p.z, 1);\n\t\t\n\treturn res;\n}\n\n//--------------------------------------------------------------------------\n// Grab all sky information for a given ray from camera\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(.32, .32, .32), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvec3 nor( vec3 p , vec3 e)\n{\n\treturn normalize(vec3(\t\t\t\t\t\t\t\t\t\t\t\n\t    df(p+e.xyy).x - df(p-e.xyy).x,\t\t\t\t\t\t\t\t\n\t    df(p+e.yxy).x - df(p-e.yxy).x,\t\t\t\t\t\t\t\t\n\t    df(p+e.yyx).x - df(p-e.yyx).x ));\t\t\t\t\t\t\t\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,vec3( 0.0001, 0, 0)); \t\t\t\t\t\t\t\n\treturn df(p - n * s).x/s;\t\t\t\t\t\t\t\t\t\t\n}\n\nvec2 shade(vec3 ro, vec3 rd, float d, vec3 lp, float li)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t\n\tvec3 n = nor(p, vec3( 0.0001, 0, 0));\t\t\t\t\t\t\t\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t\n\tfloat amb = 0.132; \t\t\t\t\t\t\t\t\t\t\t\t\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\t\t\n\tfloat sss = 1. - SubDensity(p, 1.); \t\t\t\t\t\t\t\n\treturn vec2(\n        (diff + fre + spe) * amb * li, \t\t\t\t\t\t\t\t\n        (diff + fre + sss) * amb * li + spe \t\t\t\t\t\t\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(1);\n\t\n\tvec2 g = fragCoord.xy;\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (2.*g-si)/min(si.x, si.y);\n\t\n\tt = 1.57;\n\t\n\tvec2 camp = vec2(.74,.55) * 5.;\n\tvec3 rayOrg = vec3(cos(t),sin(camp.y),sin(t)) * camp.x;\n\tvec3 lpi = vec3(-cos(t),sin(camp.y),-sin(t)) * camp.x;\n\n\tvec3 camUp = vec3(0,1,0);\n\tvec3 camOrg = vec3(0,1.76,0);\n\t\n\tfloat fov = .5;\n\tvec3 axisZ = normalize(camOrg - rayOrg);\n\tvec3 axisX = normalize(cross(camUp, axisZ));\n\tvec3 axisY = normalize(cross(axisZ, axisX));\n\tvec3 rayDir = normalize(axisZ + fov * uv.x * axisX + fov * uv.y * axisY);\n\t\n\tfloat s = 1.;\n\tfloat d = 0.;\n\tvec3 p = rayOrg + rayDir * d;\n\tfloat dMax = 20.;\n\t\n\tfor (float i=0.; i<150.; i++)\n\t{\n\t\tif (log(d*d/s/1e5)>s || d>dMax) break;\n\t\ts = df(p).x;\n\t\td += s * 0.2;\n\t\tp = rayOrg + rayDir * d;\t\n\t}\n\t\n    if (d<dMax)\n\t{\n\t\tvec3 p = rayOrg + rayDir * d;\n\t\tfloat m = df(p).y;\n\t\tif (m < 0.5)\n\t\t{\n\t\t\tvec3 n = nor(p, vec3( 0.1, 0, 0));\t\n\t\t\tfragColor.rgb = GetSky(reflect(n,rayDir), ld, vec3(50)) * .2 + vec3(73,28,94)/255. * .8;\n\t\t}\n\t\telse if (m < 1.5)\n\t\t{\n\t\t\tfragColor.rgb = mix(\n\t\t\t\tshade(p, rayDir, 1., lpi, 5.).y * mat, \t\t\t\t\t\t\n\t\t\t\tshade(rayOrg, rayDir, d, rayOrg, 1.).x * (mat+0.5), \t\t\t\t\n\t\t\t.5);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfragColor.rgb = GetSky(rayDir, ld, vec3(50));\n\t}\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}