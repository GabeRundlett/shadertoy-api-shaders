{
    "Shader": {
        "info": {
            "date": "1710379670",
            "description": "Detects whether two rounded AABBs are colliding by checking if the rounded box which represents their Minkowski difference contains the origin. More general than colliding squares and circles. Easily extends to 3D rounded boxes, spheres, capsules, etc.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtcyWB",
            "likes": 4,
            "name": "Minkowski Rounded Box Collision",
            "published": 3,
            "tags": [
                "collision",
                "sdf",
                "circle",
                "rectangle",
                "box",
                "aabb",
                "minkowski",
                "rect",
                "rounded"
            ],
            "usePreview": 0,
            "username": "PureAsbestos",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "\nconst float pi = 2.0*acos(0.0);\n\nstruct Box {\n    vec2 position;\n    float rotation;\n    vec2 halfSize;\n    float cornerRadius;\n};\n\nmat2 make_rot_mat(float theta) {\n    return mat2(1.,0.,0.,1.);//mat2(cos(theta),-sin(theta),sin(theta),cos(theta));\n}\n\nfloat boxDist(Box b) {\n   vec2 position = make_rot_mat(b.rotation) * (abs(b.position) - b.halfSize + b.cornerRadius);\n   return length(max(position, 0.0)) + min(max(position.x, position.y), 0.0) - b.cornerRadius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/min(iResolution.x,iResolution.y);\n    vec2 mouse = iMouse.xy/min(iResolution.x,iResolution.y);\n\n\n    Box box1 = Box(uv-vec2(0.5,0.5), 0.0, vec2(0.1, 0.2), 0.02);\n    Box box2 = Box(uv-mouse, pi/4.0, vec2(0.08, 0.08), 0.08);\n\n    float box1dist = boxDist(box1);\n    float box2dist = boxDist(box2);\n    \n    Box collisionBox = Box(box1.position-box2.position, box1.rotation-box2.rotation, box1.halfSize+box2.halfSize, box1.cornerRadius+box2.cornerRadius);\n\n    float collisionDist = boxDist(collisionBox);\n\n    vec3 color = min(box1dist, box2dist) <= 0.0? vec3(1): vec3(0);\n    \n    if (collisionDist <= 0.0) {\n        color.gb = vec2(0);\n    }\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}