{
    "Shader": {
        "info": {
            "date": "1652306209",
            "description": "Simple voronoi Split as operator function in one single shader\n",
            "flags": 0,
            "hasliked": 0,
            "id": "flSBDw",
            "likes": 14,
            "name": "Voronoi broke the picture",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "worley",
                "cells",
                "polygon"
            ],
            "usePreview": 1,
            "username": "iapafoto",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "// Created by Sebastien Durand - 2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------\n\n// get ids in a cyclic order to i,j neigbourg elements\n#define ID_POS(x) clamp(abs(4.-8.*fract(vec2(x+3,x-3)/8.))-2.,-1.,1.)\n\nmat2 mRot;\n\nmat2 rot(float a) {\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nvec2 hash2(vec2 p) {\n    vec2 o = .3*texture(iChannel0, (p+0.5)/256.0,-100.0).xy;\n    o = .3*cos(.5*(3.+o)*6.3 + o*6.2831853);\n    return o;\n}\n\n//-----------------------------------\n// Minimalist voronoi distance for one cell\n// Inexact outside of cells\n// Generalisable to 3D cells\n//-----------------------------------\nvec3 sdVoronoiCell(in vec2 p, in vec2 cellId ) {\n    float md = 8.0;    \n    vec2 mr = hash2(cellId);\n    for(int i=0; i<8; i++) {\n        vec2 g = ID_POS(i),\n             r = g + hash2(cellId + g);\n        md = min(md, dot(.5*(mr+r)-p, normalize(r-mr)));\n    }\n    return vec3(-md, mr-p);\n}\n\nfloat opCutVoronoi(inout vec2 p, float k) {\n    k += 1.;\n    float d = 999.;\n    vec2 posTxt = p;\n    for( int j=-1; j<=1; j++)\n    for( int i=-1; i<=1; i++) {\n         vec2 g = vec2(i,j) + floor(p/k);\n         if (length(k*g-p)<1.5) { // do it only on neighbourhood\n             vec3 v = sdVoronoiCell((p-k*g)*mRot, g);\n             if (d>v.x) {\n                 posTxt = (p-k*g)*mRot+g;\n             }\n             d  = min(d,v.x);\n         }\n    }\n    p = posTxt;\n    return d;\n}\n\n\n//-----------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float time = mod(iTime, 10.);\n    \n    // Noisy background\n    vec2 q = fragCoord.xy/iResolution.xy;\n    float h = dot(vec3(q,1.),vec3(127.1,311.7,758.5453));\t\n\tvec3 col = .75*(vec3(.0512) + .05*fract(sin(h)*43758.5453123));\n    \n    // Animation ticks\n    float a5 = 1.25*smoothstep(28.,32.,time);\n           \n    // Coords on screen\n    float sc = step(512., iResolution.y)*4. + 6., // Scale differently for fullscreen\n\t      ss = (a5+sc) / iResolution.y; // Size of 1 pixel\n    vec2 p = (fragCoord.xy - iResolution.xy*.5)*ss;\n    \n    // checker\n    p.x += .1*cos(50.*iTime)*(smoothstep(1.,2., time)-smoothstep(2.,4., time));\n    // space\n    float k = .5*(smoothstep(3.,6., time)-smoothstep(6.,7., time)); \n    // rotation\n    float a = 6.28*smoothstep(5.,6.5, time);  \n    mRot = rot(a);\n    \n    p *= 1.-.4*a5;\n    p += (1.5+.5*cos(.5*iTime))*a5;\n    \n    // The selected cell\n    vec2 posTxt = p;\n    float dCut = opCutVoronoi(posTxt, k);\n       \n    col = mix(vec3(0.), sqrt(col), .5*smoothstep(.0, 0.2, abs(dCut)+.1));    \n    col = mix(col, texture(iChannel1, .5+posTxt*.1).xyz, smoothstep(.01, 0.,dCut));\n\n    // Post prod\n    col = pow(col, vec3(.7));\n    col *= pow(16.*q.x*q.y*(1.-q.x)*(1.-q.y), .5);   \n    fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}