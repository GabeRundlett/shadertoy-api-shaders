{
    "Shader": {
        "info": {
            "date": "1687417682",
            "description": "Very simple Mandelbrot shader. See code comments for details and instructions.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds2yzh",
            "likes": 1,
            "name": "Test: Mandelbrot/Julia (Mitsync)",
            "published": 3,
            "tags": [
                "fractal",
                "test",
                "julia",
                "mandelbrot",
                "zoom",
                "set"
            ],
            "usePreview": 0,
            "username": "Mitsync",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "// Mitsync 2023\n\n/*\n    HOW TO USE:\n    Mandelbrot mode:\n        Draws the canonical Mandelbrot set:\n        Brightness of point c is related to the amount of iterations it takes for that point diverge to infinity\n            when iterated according to the Mandelbrot formula $z_{n+1} = {z_n}^2 + c$ with $z_0 = 0$.\n        Mouse drags the shape around, centered on an interesting point for your viewing pleasure.\n        Set the time bar to 0->300 seconds to use it as zoom slider, or use alt+[left/right] to zoom in fullscreen.\n    Julia mode (uncomment `#define JULIA`):\n        Draws the Julia set of the clicked point:\n        The same formula as Mandelbrot except z and c are 'reversed', so every point has a fractal associated with it.\n        Mouse changes initial point z, so changes the fractal.\n        Time still acts as zoom, and in the same way as in Mandelbrot mode.\n    Note that in both modes you can't zoom in very far because of the limitations of floating point numbers.\n    TODO: fix that\n*/\n\n// Iterations is an int because this saves like 5ms over floats\n#define ITERATIONS 2048\n// MSAA level\n#define AA 5\nconst vec2[] aa_pnts = vec2[](vec2(0.25, 0.25), vec2(0.75, 0.75), vec2(0.25, 0.75), vec2(0.75, 0.25), vec2(0.5, 0.5));\n// Uncomment below to draw Julia sets instead of the canonical Mandelbrot\n//#define JULIA\n\n// Interesting point, from animation on Wikipedia\nconst vec2 zoom_center = vec2(-0.743643887037158704752191506114774, 0.131825904205311970493132056385139);\n//const vec2 zoom_center = vec2(0.0, 0.0);\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t) {\n    vec3 a = vec3(0.300, 0.014, 0.025);\n    vec3 b = vec3(0.714, 0.835, 0.573);\n    vec3 c = vec3(1.198, 1.295, 0.206);\n    vec3 d = vec3(3.173, 4.916, 1.800);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// The canonical Mandelbrot has c as input with z initially being 0\nfloat iterate( in vec2 c, in vec2 z ) {\n    for (int i = 0; i < ITERATIONS; i++) {\n        // z_{n+1} = {z_n}^2 + c\n        z = vec2((z.x*z.x) - (z.y*z.y), 2.*z.x*z.y) + c;\n        // Can't really check for infinity, but luckily in Mandelbrot infinity = 2\n        // Note the weird comparison, saving milliseconds left and right\n        if (any(greaterThan(abs(z), vec2(2., 2.)))) return float(i);\n    }\n    return float(ITERATIONS);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates ((0,0) is center, y goes from -1 to 1, aspect ratio preserved)\n    vec2 uv = ((2.0 * fragCoord)-iResolution.xy) / iResolution.y;\n    vec2 mouse_uv = ((2.0 * iMouse.xy)-iResolution.xy) / iResolution.y;\n    \n    //vec2 c = (vec2(cos(0.001*iTime+0.1), sin(0.001*iTime+0.1)) / 4.) - vec2(1.0, 0.0);\n    \n    vec3 col = vec3(0.0);\n\n    // Calculate fractal, with multi-sampling AA\n    for (int aa_pass = 0; aa_pass < AA; aa_pass++) {\n        // Multisampling AA does what it says on the tin, so we gotta come up with different points to sample\n        vec2 aa_uv = uv + (aa_pnts[aa_pass] * 2./iResolution.xy);\n        #ifndef JULIA\n        // Canonical Mandelbrot\n        float it = iterate((aa_uv-mouse_uv)/(exp(iTime/25.))+zoom_center, vec2(0.0));\n        #else\n        // Julia set of point at cursor\n        float it = iterate(mouse_uv, (aa_uv)/(exp(iTime/25.)));\n        #endif\n        col += vec3(palette(0.1*log2(it))) / float(AA);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}