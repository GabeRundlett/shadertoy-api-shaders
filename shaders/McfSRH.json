{
    "Shader": {
        "info": {
            "date": "1704914450",
            "description": "Implementation of Golan Levin and Collaborators' \"Polynomial Shaping Functions\" webpage.\nhttps://www.flong.com/archive/texts/code/shapers_poly/",
            "flags": 0,
            "hasliked": 0,
            "id": "McfSRH",
            "likes": 0,
            "name": "GL Polynomial Shaping Functions",
            "published": 3,
            "tags": [
                "functions",
                "polynomial",
                "shaping",
                "golanlevin"
            ],
            "usePreview": 0,
            "username": "cloneoframon",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "float blinnWyvillCosineApproximation(float x) {\n    float x2 = x*x;\n    float x4 = x2*x2;\n    float x6 = x4*x2;\n\n    float fa = ( 4.0/9.0);\n    float fb = (17.0/9.0);\n    float fc = (22.0/9.0);\n\n    float y = fa*x6 - fb*x4 + fc*x2;\n    \n    return y;\n}\n\nfloat doubleCubicSeat(float x, float a, float b) {\n    float epsilon = 0.00001;\n    float min_param_a = 0.0 + epsilon;\n    float max_param_a = 1.0 - epsilon;\n    float min_param_b = 0.0;\n    float max_param_b = 1.0;\n    \n    a = min(max_param_a, max(min_param_a, a));  \n    b = min(max_param_b, max(min_param_b, b)); \n\n    float y = 0.0;\n    \n    if (x <= a){\n        y = b - b*pow(1.0-x/a, 3.0);\n    } else {\n        y = b + (1.0-b)*pow((x-a)/(1.0-a), 3.0);\n    }\n    \n    return y;\n}\n\nfloat doubleCubicSeatWithLinearBlend(float x, float a, float b) {\n    float epsilon = 0.00001;\n    float min_param_a = 0.0 + epsilon;\n    float max_param_a = 1.0 - epsilon;\n    float min_param_b = 0.0;\n    float max_param_b = 1.0;\n    \n    a = min(max_param_a, max(min_param_a, a));  \n    b = min(max_param_b, max(min_param_b, b)); \n    b = 1.0 - b; //reverse for intelligibility.\n\n    float y = 0.0;\n    \n    if (x<=a){\n        y = b*x + (1.0-b)*a*(1.0-pow(1.0-x/a, 3.0));\n    } else {\n        y = b*x + (1.0-b)*(a + (1.0-a)*pow((x-a)/(1.0-a), 3.0));\n    }\n    return y;\n}\n\nfloat doubleOddPolynomialSeat(float x, float a, float b, int n) {\n    float epsilon = 0.00001;\n    float min_param_a = 0.0 + epsilon;\n    float max_param_a = 1.0 - epsilon;\n    float min_param_b = 0.0;\n    float max_param_b = 1.0;\n    \n    a = min(max_param_a, max(min_param_a, a));  \n    b = min(max_param_b, max(min_param_b, b)); \n\n    int p = 2 * n + 1;\n    float y = 0.0;\n    \n    if (x <= a){\n        y = b - b*pow(1.0-x/a, float(p));\n    } else {\n        y = b + (1.0-b)*pow((x-a)/(1.0-a), float(p));\n    }\n    return y;\n}\n\nfloat doublePolynomialSigmoid(float x, float a, float b, int n){\n    float y = 0.0;\n\n    if (n%2 == 0){\n        // even polynomial\n        if (x<=0.5){\n            y = pow(2.0*x, float(n))/2.0;\n        } else {\n            y = 1.0 - pow(2.0*(x-1.0), float(n))/2.0;\n        }\n    }\n    else { \n        // odd polynomial\n        if (x <= 0.5){\n            y = pow(2.0*x, float(n))/2.0;\n        } else {\n            y = 1.0 + pow(2.0*(x-1.0), float(n))/2.0;\n        }\n    }\n\n    return y;\n}\n\nfloat quadraticThroughAGivenPoint(float x, float a, float b){\n    float epsilon = 0.00001;\n    float min_param_a = 0.0 + epsilon;\n    float max_param_a = 1.0 - epsilon;\n    float min_param_b = 0.0;\n    float max_param_b = 1.0;\n    \n    a = min(max_param_a, max(min_param_a, a));  \n    b = min(max_param_b, max(min_param_b, b)); \n\n    float A = (1.0-b)/(1.0-a) - (b/a);\n    float B = (A*(a*a)-b)/a;\n    float y = A*(x*x) - B*(x);\n    \n    y = min(1.0,max(0.0,y)); \n\n    return y;\n}\n\nfloat plot(vec2 coord, float value){\n  return  smoothstep( value-0.02, value, coord.y) -\n          smoothstep( value, value+0.02, coord.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // gradient\n    float y = uv.x;\n    vec3 color = vec3(y);\n    \n    // line plot\n    float line = plot(uv, blinnWyvillCosineApproximation(uv.x));\n    //float line = plot(uv, doubleCubicSeat(uv.x, 0.407, 0.720));\n    //float line = plot(uv, doubleCubicSeatWithLinearBlend(uv.x, 0.640, 0.827));\n    //float line = plot(uv, doubleOddPolynomialSeat(uv.x, 0.520, 0.613, 15)); // n=[1, 20)\n    //float line = plot(uv, doublePolynomialSigmoid(uv.x, 0.520, 0.613, 5)); // n=[1, 10)\n    //float line = plot(uv, quadraticThroughAGivenPoint(uv.x, 0.233, 0.340));\n    \n    // overlay line onto gradient\n    color = (1.0 - line) * color + line * vec3(0.0, 1.0, 0.0);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}