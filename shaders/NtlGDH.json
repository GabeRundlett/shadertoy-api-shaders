{
    "Shader": {
        "info": {
            "date": "1622105842",
            "description": "A simple glow effect and how to control it.\n\nSee [url]https://www.desmos.com/calculator/eecd6kmwy9[/url] for an illustration as mentioned in the code\n\nSee also P_Malin's comment below and [url]https://www.desmos.com/calculator/f14x5a9lsb[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NtlGDH",
            "likes": 4,
            "name": "Fork GLOW TUTOR vanky 801",
            "published": 3,
            "tags": [
                "tutorial",
                "bloom",
                "glow"
            ],
            "usePreview": 0,
            "username": "vanky",
            "viewed": 401
        },
        "renderpass": [
            {
                "code": "// How to achieve and control a simple distance glow effect based on several Shadertoy examples\n// Things to try:\n//  * Make the radius and intensity pulse in time or to input\n//\t* Time varying colour\n//  * Animate several points and add the glow values for each to create metaballs\n//  * Generate more complex shapes\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    //***********    Basic setup    **********\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // The ratio of the width and height of the screen\n    float widthHeightRatio = iResolution.x/iResolution.y;\n    vec2 centre = vec2(0.5, 0.5);\n\t// Position of fragment relative to centre of screen\n    vec2 pos = centre - uv;\n    // Adjust y by ratio for uniform transforms\n    pos.y /= widthHeightRatio;\n    \n    //**********         Glow        **********\n    \n    // Equation 1/x gives a hyperbola (n.双曲线,y=1/x)which is a nice shape to use for drawing glow as \n    // it is intense near 0 followed by a rapid fall off and an eventual slow fade\n    float dist = 1./length(pos);\n    \n    //**********        Radius       **********\n    \n    // Dampen (vt. 抑制) the glow to control the radius\n    dist *= 0.1;\n    \n    //**********       Intensity     **********\n    \n    // Raising the result to a power allows us to change the glow fade behaviour\n    // See https://www.desmos.com/calculator/eecd6kmwy9 for an illustration\n    // (Move the slider of m to see different fade rates)\n    dist = pow(dist, 0.8);\n    \n    //Knowing the distance from a fragment to the source of the glow, the above can be written compactly as: \n    //\tfloat getGlow(float dist, float radius, float intensity){\n    //\t\treturn pow(radius/dist, intensity);\n\t//\t}\n    //The returned value can then be multiplied with a colour to get the final result\n       \n    // Get colour\n    vec3 col = dist * vec3(1.0, 0.5, 0.25);\n\t\n    // See comment by P_Malin\n    col = 1.0 - exp( -col );\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}