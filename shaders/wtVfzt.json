{
    "Shader": {
        "info": {
            "date": "1614910689",
            "description": "cellular automata",
            "flags": 32,
            "hasliked": 0,
            "id": "wtVfzt",
            "likes": 2,
            "name": "cellular automata fiber",
            "published": 3,
            "tags": [
                "cellularautomate"
            ],
            "usePreview": 0,
            "username": "account",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float d1(float x, float a){\nreturn 1./(1.+exp(-(x-a)*(4./a)));\n}\nfloat d2(float x, float a, float b){\nreturn d1(x,a)*(1.0-d1(x,b));\n}\nfloat d3(float x, float y, float m){\nreturn x*(1.0-d1(m, 0.5)) + y*d1(m,0.5);\n}\nfloat d4(float n, float m, float b1, float b2, float d1, float dd2){\nreturn d2(n, d3(b1,d1,m),d3(b2,dd2,m));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    //0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))\n    \n    float n = 0.;\n    \n    for(int i = 0; i < 20; i++){\n        for(int k = 0; k < 20; k++){\n            vec2 coords = vec2(float(i)-10., float(k)-10.);\n            if(length(coords) - 5. < 0.01){\n               vec2 uvm = uv * iResolution.xy;\n               vec3 c = texture(iChannel0, (uvm + coords)/iResolution.xy).xyz;\n               vec3 c2 = texture(iChannel1, (uvm + coords)/iResolution.xy).xyz;\n               if(coords.x == 0. && coords.y == 0.)continue;\n               if(c.x > 0.01 || c.y > 0.01 || c.z > 0.01){\n                  n+= d4(0.4, n, 0.3, 0.6, 0.4, 0.6);\n               }\n            }\n        }\n    }\n    \n    if(col.x > 0.01 || col.y > 0.01 || col.z > 0.01){\n       if(n < 4. || n > 30.){\n          col = vec3(0.0);\n       }\n    }else{\n       if(n > 15. && n < 25.){\n          col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n       }\n    }\n    \n    //col = vec3(d4(uv.x*2.1+n, uv.y*2.1, 0.3, uv.x, uv.y, 0.6))*(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    if(iMouse.z > 0.5){\n       if(length(mouse-uv) < 0.4){\n          col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n       }\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}