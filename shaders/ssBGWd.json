{
    "Shader": {
        "info": {
            "date": "1618185179",
            "description": "Signed distance field of a NACA00xx.\nWorks relatively well for the exterior, and for the interior up to a thickness of around 40%, which is its normal range.\n\nDrag vertically to change the thickness.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssBGWd",
            "likes": 7,
            "name": "NACA00xx - 2d distance",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "fluid",
                "distance",
                "cfd",
                "naca"
            ],
            "usePreview": 0,
            "username": "jmpep",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Javier Meseguer de Paz\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Attempt to create the signed distance field of a NACA00xx.\n// https://en.wikipedia.org/wiki/NACA_airfoil#Equation_for_a_symmetrical_4-digit_NACA_airfoil\n//\n// Useful for showcasing 2d fluid simulators and the like. Or for creating wings via extrusion :)\n//\n// The NACA is defined in x=(0,1.0] as it is customary.\n//\n// Works relatively well for the exterior, and for the interior up\n// to a thickness of around 40%, which is pretty much its normal range.\n//\n// Furthermore, when it is not working inside it is still working outside,\n// and the fluid is normally there :).\n//\n// The method uses Newton-Rhapson to compute the closest point in the NACA, then the distance from there.\n// Since the NACA has an asymptote in x=0 we simply avoid it, and we approximate the very begining \n// of the leading edge (where x < EPS) by a simple segment.\n\n#define MAX_THICKNESS 0.40\n#define EPS 0.001\n#define NR_ITERATIONS 7\n#define IS_DEMO 1\n\n// segment's sdf from: https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// half thickness function\nfloat yt(float x, float sx, float t) \n{\n    x = clamp(x, 0.0, 1.0);    \n    return 5.0 * t * (0.2969*sx + x*(-0.126 + x * (-0.3516 + x * (0.2843 + x * (-0.1037)))));\n}\n\n// first derivative of yt\nfloat dyt(float x, float sx, float t)\n{\n    return t * (0.74225/sx - 0.63 + x * (-3.516 + x * (4.2645 + x * (-2.074))));\n}\n\n// second derivative of yt\nfloat ddyt(float x, float sx, float t)\n{\n    float x32 = sx * sx * sx;   \n    return t * (x32 * (-3.516 + x * (8.529 + x * (-6.222))) - 0.371125)/(x32+1e-27);\n}\n\n// NACA's sdf\nfloat sdNACA(vec2 p, float t)\n{\n    p.y = abs(p.y);\n    \n    // get where the distance from p to the NACA is the minimum\n    // (its first derivate will be zero) using Newton-Rhapson\n    float x = clamp(p.x, 0.0, 1.0); \n    float sx = sqrt(x);\n        \n    // get whether we are inside our outside the NACA\n    float s = (p.y >= yt(x, sx, t) ? +1.0 : -1.0);\n\n    // try to compute the closest point in the NACA to the current point\n    // using Newton-Rhapson\n    for (int i = 0; i < NR_ITERATIONS; ++i) {\n    \n        float eyt = yt(x, sx, t);\n        float edyt = dyt(x, sx, t);\n        float eddyt = ddyt(x, sx, t);\n    \n        float fx = -2.0*p.x + 2.0*x -2.0*(p.y - eyt)* edyt;\n        float ffx = -2.0*(p.y-eyt) * eddyt + 2.0* edyt * edyt + 2.0;\n\n        x = clamp(x - fx / ffx, EPS, 1.0);\n        sx = sqrt(x);\n    }\n\n    // once we have x of the closest point, compute the NACA's point and distance\n    vec2 naca = vec2(x, yt(x, sx, t));\n    float nacaDist =  length(p - naca);    \n\n\n    // use a segment to close the leading gap \n    // (because we are clamping x to EPS to avoid infinities)   \n    vec2 segmentEdge= vec2(EPS, yt(EPS, sqrt(EPS), t));\n    float segmentDist = sdSegment(p, segmentEdge, -segmentEdge);\n\n    // return the signed distance to either the NACA or the segment (the closest one)\n    return s * min(nacaDist, segmentDist);    \n}\n\n// from iq's signed distance field gallery\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    if (m.x < 0.001 && m.y < 0.001) m.y = 0.65;\n    \n#if IS_DEMO\n    float t = mix(0.1, MAX_THICKNESS, (0.5 + 0.5 * sin(0.5 * iTime)));\n#else\n    float t = MAX_THICKNESS * m.y;\n #endif\n    t = clamp(t, 0.0, MAX_THICKNESS);\n     \n    float d = sdNACA(0.65*(uv + vec2(0.5, 0.0)), t );\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-5.0*abs(d));\n    col *= 0.8 + 0.2*cos(120.0*d/0.65);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n\tfragColor = vec4( col, 1.0 );;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}