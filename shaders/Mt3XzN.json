{
    "Shader": {
        "info": {
            "date": "1478430569",
            "description": "Balloons at dawn",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt3XzN",
            "likes": 14,
            "name": "Balloon Dance",
            "published": 3,
            "tags": [
                "fire",
                "balloon"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 873
        },
        "renderpass": [
            {
                "code": "// \"Balloon Dance\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\nconst float pi = 3.14159;\n\n#define N_BAL 5\n\nvec3 balPos[N_BAL], sunDir, qHit, qHitFlm;\nfloat dstFar, tCur, balRad, flmCylRad, flmCylLen;\nint idObj, idGrp;\nbool balFlm[N_BAL], balFlmCur;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, sunCol, p;\n  float ds, fd, att, attSum, d, sd;\n  if (rd.y >= 0.) {\n    p = rd * (200. - ro.y) / max (rd.y, 0.0001);\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;\n    p.xz += 0.1 * tCur;\n    att = Fbm2 (p.xz);\n    attSum = att;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    attSum *= 0.3;\n    att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n    sunCol = vec3 (1., 0.8, 0.7) * pow (sd, 1024.) +\n       vec3 (1., 0.4, 0.2) * pow (sd, 256.);\n    col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n       max (rd.y - 0.1, 0.))) + 0.3 * sunCol;\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  } else col = vec3 (0.1, 0.2, 0.1);\n  return col;\n}\n\nfloat FlmDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin;\n  dMin = dstFar;\n  for (int k = 0; k < N_BAL; k ++) {\n    if (balFlm[k]) {\n      q = p - (balPos[k] - vec3 (0., 0.8 * balRad, 0.));\n      d = PrCylDf (q.xzy, flmCylRad + 0.3 * q.y / flmCylLen, flmCylLen);\n      d = max (d, - q.y - 0.5 * flmCylLen);\n      if (d < dMin) { dMin = d;  qHitFlm = q; }\n    }\n  }\n  return dMin;\n}\n\nfloat FlmRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = FlmDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nfloat BalDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;\n  d = max (PrSphDf (q, balRad), - PrSphDf (q, 0.98 * balRad));\n  q.y -= - balRad;\n  d = max (d, - PrCylDf (q.xzy, 0.3 * balRad, 0.1 * balRad));\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = p;}\n  q = p;\n  q.y -= -1.42 * balRad;\n  d = PrCylDf (q.xzy, 0.05 * balRad, 0.13 * balRad);\n  q.y -= 0.02 * balRad;\n  d = max (d, - PrCylDf (q.xzy, 0.03 * balRad, 0.13 * balRad));\n  if (d < dMin) { dMin = d;  idObj = 2;  qHit = p;}\n  q = p;\n  q.y -= -1.5 * balRad;\n  d = PrCylDf (q.xzy, 0.2 * balRad, 0.07 * balRad);\n  q.y -= 0.02 * balRad;\n  d = max (d, - PrCylDf (q.xzy, 0.18 * balRad, 0.07 * balRad));\n  if (d < dMin) { dMin = d;  idObj = 3;  qHit = p;}\n  q = p;\n  q.xz = abs (q.xz) - 0.25 * balRad;\n  q.y -= -1.15 * balRad;\n  q.yz = Rot2D (q.yz, -0.35);\n  q.xy = Rot2D (q.xy, 0.35);\n  d = PrCylDf (q.xzy, 0.005 * balRad, 0.35 * balRad);\n  if (d < dMin) { dMin = d;  idObj = 4;  qHit = p;}\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  for (int k = 0; k < N_BAL; k ++) {\n    d = BalDf (p - balPos[k], dMin);\n    if (d < dMin) { dMin = d;  idGrp = k;  balFlmCur = balFlm[k]; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nvec3 FlmCol (vec3 p, vec3 rd)\n{\n  vec3 q, qq;\n  float a, f, dr;\n  a = 0.;\n  p.y -= - flmCylLen;\n  dr = 0.05 / flmCylRad;\n  for (int j = 0; j < 20; j ++) {\n    p += dr * rd;\n    q = 15. * p / flmCylLen;\n    q.y -= 40. * tCur;\n    qq.y = Noisefv3 (q + 0.1 * vec3 (sin (tCur)));\n    qq.x = Noisefv3 (q + vec3 (qq.y));\n    qq.z = Noisefv3 (q + vec3 (qq.x));\n    q = p + 0.25 * (1. - 3. * p.y / flmCylLen) * (qq - 0.5);\n    f = 0.45 * q.y - 2.5 * length (q.xz);\n    f = clamp (sign (f) * f * f, 0., 1.) * (3. - 0.9 * q.y);\n    a += f;\n  }\n  return clamp (a * vec3 (1., 0.5, 0.3), 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, colFlm;\n  float dstObj, dstFlm, a, s;\n  bool inSun, inFlm;\n  for (int k = 0; k < N_BAL; k ++) {\n    s = float (k - 1) / float (N_BAL);\n    a = 2. * pi * fract (0.02 * tCur + s);\n    balPos[k].xz = 2.5 * balRad * vec2 (cos (a), sin (a));\n    a = 2. * pi * fract (0.07 * tCur + s);\n    balPos[k].y = 3. * balRad + 0.5 * balRad * sin (a);\n    balFlm[k] = (a > pi);\n  }\n  flmCylRad = 0.4;\n  flmCylLen = 2.;\n  dstFlm = FlmRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  inSun = true;\n  inFlm = false;\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col = HsvToRgb (vec3 (float (idGrp) / float (N_BAL), 0.9, 0.8));\n      col *= 1. + 0.2 * SmoothBump (0.17, 0.25, 0.02,\n         min (length (qHit.xy), length (qHit.zy)) / balRad);\n      inFlm = balFlmCur;\n      if (length (qHit) < 0.99 * balRad) {\n        col *= 0.2;\n        if (inFlm) col += 0.1 * vec3 (1., 0.5, 0.);\n        inSun = false;\n      } else {\n        if (length (qHit) > 0.99 * balRad) {\n          a = atan (qHit.x, qHit.z) / (2. * pi) + 0.5;\n          vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (24. * a, 1.))));\n        }\n      }\n    } else if (idObj == 2) {\n       a = atan (qHit.x, qHit.z) / (2. * pi) + 0.5;\n       vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (12. * a, 1.))));\n      col = vec3 (0.6);\n    } else if (idObj == 3) {\n      a = atan (qHit.x, qHit.z) / (2. * pi) + 0.5;\n      vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (32. * a, 1.))));\n      col = vec3 (0.6, 0.3, 0.);\n    } else if (idObj == 4) {\n      col = vec3 (0.3);\n    }\n    if (inSun) col = col * (0.2 +\n       0.2 * max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.) +\n       0.6 * max (dot (vn, sunDir), 0.)) +\n       0.1 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n  } else col = BgCol (ro, rd);\n  if (dstFlm < min (dstFar, dstObj)) {\n    colFlm = FlmCol (qHitFlm, rd);\n    col = mix (col, colFlm, 0.6 * length (colFlm));\n  }\n  if (inFlm) col = mix (col, vec3 (1., 0.5, 0.),\n     0.3 * pow (clamp (dot (normalize (qHit), - rd), 0., 1.), 4.));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec3 ro, rd, vd, u;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dstFar = 50.;\n  balRad = 2.;\n  az = 2. * pi * fract (0.01 * tCur);\n  el = 0.1 * pi + 0.08 * pi * sin (2. * pi * fract (0.022 * tCur));\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  ro = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n       mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n      vec3 (0., 2., -30.);\n  vd = normalize (vec3 (0., 3. * balRad, 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  rd = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd) *\n     normalize (vec3 (uv, 5.5));\n  sunDir = normalize (vec3 (1., 0.2, -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}