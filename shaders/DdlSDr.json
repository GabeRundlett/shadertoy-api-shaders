{
    "Shader": {
        "info": {
            "date": "1668726135",
            "description": "Adds a stylized outline to video/images\n\nClick and drag the mouse to modify the effect\nX: controls the darkening effect\nY: controls the sampling spread\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DdlSDr",
            "likes": 4,
            "name": "Dirty Edge Outliner",
            "published": 3,
            "tags": [
                "mouse",
                "outline",
                "edges"
            ],
            "usePreview": 0,
            "username": "eo",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "\n/*\nCalculates a 'dirty' edge image by subtracting the original image\nfrom a 'blurred' copy of itself, except the blurred copy is coming\nfrom a simple 'monto carlo' blur. The result is combined back into\nthe original image. A bit like unsharp masking:\nhttps://en.wikipedia.org/wiki/Unsharp_masking\n\nInspired by the very pretty stippling effect from starea:\nhttps://www.shadertoy.com/view/ldSyzV\n\nI really like the term 'monte carlo blur', it comes from Justaway:\nhttps://www.shadertoy.com/view/MdXXWr\n*/\n\n\n//#define EDGES_ONLY\n#define TWO_PI 6.283185307\n#define ANIMATED_NOISE 0.25\n\n\n// Settings applied when mouse isn't active\nfloat default_offset = 0.015;\nfloat default_darken = 0.92;\n\n\n// From Dave_Hoskins: https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\nvec2 get_random_sampling_offset(vec2 xy) {\n\n    vec2 random_2d = hash22(xy);\n    float random_radius = random_2d.x;\n    float random_angle = random_2d.y * TWO_PI;\n    \n    #ifdef ANIMATED_NOISE\n        random_angle += (iTime * ANIMATED_NOISE);\n    #endif\n    \n    return random_radius * vec2(cos(random_angle), sin(random_angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // For convenience\n    vec2 xy_norm = fragCoord/iResolution.xy;\n    vec2 mouse_xy_norm = iMouse.xy / iResolution.xy;\n    float is_mouse_down = clamp(iMouse.z, 0., 1.);\n    \n    // Get offset sampling scale (can be altered by mouse Y)\n    float mouse_scale = mix(0.001, 0.5, mouse_xy_norm.y);\n    float offset_scale = mix(default_offset, mouse_scale, is_mouse_down);\n    vec2 sampling_offset = offset_scale * get_random_sampling_offset(fragCoord);\n\n    // Get edges by subtracting a 'blurry' copy of the image from itself\n    vec4 orig_img = texture(iChannel0, xy_norm);\n    vec4 offset_img = texture(iChannel0, xy_norm + sampling_offset);\n    vec4 diff_img = orig_img - offset_img;\n    float gray = 1.0 - length(diff_img.xyz);\n    \n    // Contrast bump before output (can be altered by mouse X)\n    float mouse_darken = mix(0.0, 1.0, mouse_xy_norm.x);\n    float darken = mix(default_darken, mouse_darken, is_mouse_down);\n    gray = smoothstep(darken, 1.0, gray) * 0.8 + 0.2;\n    vec3 gray_3d = vec3(gray);\n    \n    // Choose coloring style\n    vec3 col;\n    #ifdef EDGES_ONLY\n        col = gray_3d;\n    #else\n        vec3 dulled_offset = offset_img.rgb * 0.6 + 0.2;\n        col = mix(gray_3d, dulled_offset, gray);\n    #endif\n    \n    fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}