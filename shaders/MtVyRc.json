{
    "Shader": {
        "info": {
            "date": "1537273417",
            "description": "Frame Buffer Compression\nReference: Chapter 4 \"Practical FrameBuffer Compression\" Pavlos Mavridis & Georgios Papaioannou (from GPU Pro 4)\nCompress 3 channels into 2 channels.\nYou can use mouse to drag the image.",
            "flags": 32,
            "hasliked": 0,
            "id": "MtVyRc",
            "likes": 6,
            "name": "FrameBuffer Compression",
            "published": 3,
            "tags": [
                "compression",
                "yuv",
                "chessboard",
                "ycocg"
            ],
            "usePreview": 1,
            "username": "834144373",
            "viewed": 1268
        },
        "renderpass": [
            {
                "code": "/*\n\tReference: \n\t\tChapter 4 \"Practical FrameBuffer Compression\" Pavlos Mavridis & Georgios Papaioannou (from GPU Pro 4)\n\n\tabout:\n\t\t1.first RGB to YCoCg\n\t\t2.Use chessboard arrange YCoCg into just two channels (rg)\t\n\t\tSo compress 3 channels into 2 channels,compress ratio is 3/2;\n\t\n\tBufferA: Compress Image\n\tImage: Decompress\n\t\n\tOther: \n\t\tYou can drag the image\n\t\tThe Mouse Information 16bits xyzw store into 32bits zw buffer. \n        The MouseDrag(*) \"Store\" x is Mouse position (x,y),y is Mouse Variation(z,w)\n*/\nconst float THRESH = 30./255.;\nfloat EdgeDirectFilter(vec2 a0,vec2 a1,vec2 a2,vec2 a3,vec2 a4){\n    vec4 lum = vec4(a1.x,a2.x,a3.x,a4.x);\n    vec4 w = 1.-step(THRESH,abs(lum - a0.x));\n    float W = w.x + w.y + w.z + w.w;\n    W = (W==0.0) ? W : 1./W;\n    return dot(w,vec4(a1.y,a2.y,a3.y,a4.y))*W;\n}\nvec3 GetYCoCg(sampler2D _tex,ivec2 iU){\n    /*\n\t   * a3 *\n\t  a1 a0 a2\n\t   * a4 *\n\t*/\n    const ivec2 e = ivec2(1,0);\n    vec2 a0 = texelFetch(_tex,iU,0).xy;\n    vec2 a1 = texelFetch(_tex,iU+e.xy,0).xy;\n    vec2 a2 = texelFetch(_tex,iU-e.xy,0).xy;\n    vec2 a3 = texelFetch(_tex,iU+e.yx,0).xy;\n    vec2 a4 = texelFetch(_tex,iU-e.yx,0).xy;\n\tfloat Co_or_Cg = EdgeDirectFilter(a0,a1,a2,a3,a4);\n    return ((iU.x+iU.y)&1) == 0 ? vec3(a0.x,Co_or_Cg,a0.y) : vec3(a0.x,a0.y,Co_or_Cg);\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(U);\n    \n    C = GetYCoCg(iChannel0,iU).rgbb;\n    C.rgb = YCoCg2RGB(C.rgb);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\nconst ivec2 MOUSE_COORD = ivec2(0);\n\nvec3 TexelFetch_Mirror(sampler2D _tex,ivec2 iU,int lod){\n    ivec2 size = textureSize(_tex,lod);\n    return texelFetch(_tex,abs(((iU/size)&1)*(size-1)-(iU%size)),lod).rgb;\n}\n\nvec4 GetValue(sampler2D _tex,ivec2 coord){\n\treturn texelFetch(_tex,coord,0);\n}\nbool IsCoord(ivec2 iU,ivec2 coord){\n\treturn all(equal(iU,coord));\n}\nvec2 MouseDrag(out vec2 Store,ivec2 iU,ivec2 coord){\n    #define MouseTex iChannel1\n    #define Scale 32767.\n\tuvec2 data = floatBitsToUint(GetValue(MouseTex,coord).zw);\n\tmediump vec4 MousePos = vec4(unpackSnorm2x16(data.x),unpackSnorm2x16(data.y))*Scale,tmpMousePos = vec4(MousePos.xy,0.,0.);\n    iMouse.z>0. ? tmpMousePos.xy+=tmpMousePos.zw=iMouse.xy-iMouse.zw : tmpMousePos.xy=MousePos.xy+=MousePos.zw;\n    if(IsCoord(iU,coord)) Store=uintBitsToFloat(uvec2(packSnorm2x16(fract(MousePos.xy/Scale)),packSnorm2x16(tmpMousePos.zw/Scale)));\n    return tmpMousePos.xy;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(U);\n    vec2 MousePos = MouseDrag(C.zw,iU,MOUSE_COORD);\n    vec3 RGB = TexelFetch_Mirror(iChannel0,abs(iU-ivec2(MousePos)),0).rgb;\n    vec3 YCoCg = RGB2YCoCg(RGB);\n    /* G Channel layout\n\t  |\tCo Cg Co Cg\n\t  |\tCg Co Cg Co\n\t  |\tCo Cg Co Cg\n\t  |\tCg Co Cg Co\n\t  0------------->\n\t*/\n    C.rg = ((iU.x+iU.y)&1) == 0 ? YCoCg.xz : YCoCg.xy;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//-------------------------YCoCg----------------------------\n/*\n Y = R/4 + G/2 + B/4\nCo = R/2 - B/2\nCg =-R/4 + G/2 - B/4\n*/\nvec3 RGB2YCoCg(vec3 RGB) {\n\tvec3 YCoCg;\n\tYCoCg.x = RGB.r / 4. + RGB.g / 2. + RGB.b / 4.;\n\tYCoCg.y = RGB.r / 2. - RGB.b / 2.;\n\tYCoCg.z = -RGB.r / 4. + RGB.g / 2. - RGB.b / 4.;\n\treturn YCoCg;\n}\n/*\n R = Y + Co - Cg\n G = Y + Cg\n B = Y - Co - Cg\n*/\nvec3 YCoCg2RGB(vec3 YCoCg) {\n\tvec3 RGB;\n\tRGB.r = YCoCg.x + YCoCg.y - YCoCg.z;\n\tRGB.g = YCoCg.x + YCoCg.z;\n\tRGB.b = YCoCg.x - YCoCg.y - YCoCg.z;\n\treturn RGB;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}