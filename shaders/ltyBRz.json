{
    "Shader": {
        "info": {
            "date": "1542315674",
            "description": "A first experiment with 3d fractals bases on iq's wonderful work 'Apollonian', as well as many others here on shadertoy =)",
            "flags": 1,
            "hasliked": 0,
            "id": "ltyBRz",
            "likes": 11,
            "name": "fractal experiment",
            "published": 3,
            "tags": [
                "fractals"
            ],
            "usePreview": 0,
            "username": "conan777",
            "viewed": 847
        },
        "renderpass": [
            {
                "code": "//#version 400 core\n\nvec4 orb;\n\nfloat map(vec3 p, float s)\n{\n\tfloat scale = 1.0;\n\torb = vec4(100.0);\n\n\tfor (int i = 0; i < 8; i++)\n\t{\n\t\tp = -1.0 + 2.0 * fract(0.5 * p + 0.5);\n\t\tfloat r2 = dot(p, p);\n        orb = min(orb, vec4(abs(p), r2));\n\n\t\tfloat k = s / r2;\n\t\tp *= k;\n\t\tscale *= k;\n\t}\n\treturn 0.25 * (abs(p.x) + abs(p.y)) / scale;\n}\n\nfloat trace( in vec3 ro, in vec3 rd, float s )\n{\n\tfloat maxd = 30.0;\n    float t = 0.01;\n    for (int i = 0; i < 150; i++)\n    {\n\t    float precis = 0.001 * t;\n\n\t    float h = map(ro + rd * t, s);\n        if (h < precis || t > maxd)\n            break;\n        t += h;\n    }\n    if (t > maxd)\n        t = -1.0;\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos, in float t, in float s )\n{\n    float precis = 0.001 * t;\n\n    vec2 e = vec2(1.0,-1.0) * precis;\n    return normalize(e.xyy * map(pos + e.xyy, s) +\n\t\t\t\t\t e.yyx * map(pos + e.yyx, s) +\n\t\t\t\t\t e.yxy * map(pos + e.yxy, s) +\n                     e.xxx * map(pos + e.xxx, s));\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in float anim )\n{\n    vec3 col = vec3(0.0);\n    float t = trace(ro, rd, anim);\n    if (t > 0.0)\n    {\n        vec4 tra = orb;\n        vec3 pos = ro + t * rd;\n        vec3 nor = calcNormal(pos, t, anim);\n        vec3  light = vec3(0.5, 0.5, 0.5);\n        float key = clamp(dot(light, nor), 0.0, 1.0);\n        vec3 brdf = vec3(0.30, 0.20, 0.10) + vec3(1.00, 0.40, 0.00) * key;\n        vec3 rgb = vec3(1.0);\n        rgb = mix(rgb, vec3(0.90, 0.20, 0.20), clamp(10.0 * tra.y, 0.0, 1.0));\n        col = rgb * brdf * exp(-0.2 * t);\n    }\n    return sqrt(col);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    \n    vec2 uv = (fragCoord.xy - iResolution.xy/2.0) / max(iResolution.xy.x, iResolution.xy.y);\n \n    float anim = (sin(iTime * 0.2) + 1.0) * 0.6;\n    vec3 tot = vec3(0.0);\n    vec3 ro;\n    ro = vec3(1.0, 5.0, 5.0);\n    vec3 tmp = vec3(uv, 1.0);\n    vec3 rd = -normalize(tmp);\n    tot += render(ro, rd, anim);\n\tfragColor = vec4(tot, 1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    float time = iTime*0.25;\n    float anim = (sin(iTime * 0.2) + 1.0) * 0.6;\n\n    vec3 col = render( fragRayOri + vec3(0.0,1.0,2.5), fragRayDir, anim);\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}