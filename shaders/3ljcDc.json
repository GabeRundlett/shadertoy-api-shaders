{
    "Shader": {
        "info": {
            "date": "1595599866",
            "description": "Still 2d, some textures and a boat.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljcDc",
            "likes": 2,
            "name": "Waves v.2",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "pli",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "#define SHADOW 0.03\n#define MULTIPLIER 0.6\n#define BASE_COLOR vec4(0.0, 0.18, 0.2 ,1.0)\n#define SHOW_TEXTURES true\n\n#define BOAT_COLOR vec4(1., 0.57, 0.0 ,1.0)\n#define HEAD_COLOR vec4(.7, .6, .4 ,1.0)\n#define EYE_COLOR vec4(0., 0.0, 0.0 ,1.0)\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    // from https://www.shadertoy.com/view/lsf3WH\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat heightAt(vec2 uv, float speed, float height, float vOffset) {\n    return height * cos(speed * iTime + uv.y * 2.0 + uv.x * 300.0 * height)\n        \t+ 0.3 * height * cos(speed * iTime + uv.x * 100.0 * height)\n        \t+ vOffset;\n}\n\nfloat covered(vec2 uv, float speed, float height, float vOffset) {\n    float distance = heightAt(uv, speed, height, vOffset) - uv.y;\n    \n    float covered;\n    if (distance > SHADOW) {\n        covered = 1.0;\n    } else if (distance > 0.) {\n        covered = distance / SHADOW;\n    } else {\n        covered = 0.0;\n    }\n    return covered;\n}\n\nfloat dist(vec2 p1, vec2 p2) {\n\treturn sqrt( (p1.x-p2.x) * (p1.x-p2.x) + (p1.y-p2.y) * (p1.y-p2.y));   \n}\n\nvec4 drawCircle(vec4 pixel, vec2 uv, vec2 position, float size, vec4 color) {\n    if (dist(uv, position) < size) {\n    \tpixel = color;   \n    }\n    return pixel;    \n}\n\nvec4 drawBoat(vec4 pixel, vec2 uv, vec2 position, float size) {\n\n\n    pixel = drawCircle(pixel, uv, vec2(position.x, heightAt(vec2(position.x, 0), 2.5, 0.04, 0.0)) + 0.03, .015, HEAD_COLOR);\n    pixel = drawCircle(pixel, uv, vec2(position.x + 0.007, heightAt(vec2(position.x, 0), 2.5, 0.04, 0.0)) + 0.03, .002, EYE_COLOR);\n\n    pixel = drawCircle(pixel, uv, vec2(position.x, heightAt(vec2(position.x, 0), 2.5, 0.04, 0.0)), .025, BOAT_COLOR);\n    pixel = drawCircle(pixel, uv, vec2(position.x+0.02, heightAt(vec2(position.x+0.02, 0), 2.5, 0.04, 0.0)), .025, BOAT_COLOR);\n    pixel = drawCircle(pixel, uv, vec2(position.x+0.04, heightAt(vec2(position.x+0.04, 0), 2.5, 0.04, 0.0)), .025, BOAT_COLOR);\n    pixel = drawCircle(pixel, uv, vec2(position.x+0.06, heightAt(vec2(position.x+0.06, 0), 2.5, 0.04, 0.0)), .025, BOAT_COLOR);\n\n    return pixel;\n}\n\nvec4 drawWave(vec4 pixel, vec2 uv, float speed, float height, float vOffset) {\n    float c = covered(uv, speed, height, vOffset);\n    if (c == 1.) {\n\t\tpixel += BASE_COLOR * MULTIPLIER;\n        \n        if (SHOW_TEXTURES) {\n            vec2 nUv = uv;\n            nUv.x += iTime * sqrt(speed) * 0.1;\n            nUv.y -= heightAt(uv, speed, height, vOffset);\n            pixel += .015 * noise(nUv * 20.);\n    \t}\n    } else if (c > 0.) {\n\t\tpixel *= vec4(vec3(sqrt(1.-c)) ,1.0);\n    }\n    \n\treturn pixel;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec4 result;\n\tresult = vec4(0.0, 0.18, 0.2 ,1.0);\n\n    \n    result = drawWave(result, uv, 1.5, 0.02, 0.2);\n    vec2 boatPosition = vec2(.2 + 0.2 * cos(0.5*iTime) + 0.1 * cos(0.95*iTime), 0.);\n    result = drawBoat(result, uv, boatPosition, .025);\n\n//    vec2 boatPosition2 = vec2(.1 + 0.2 * cos(1.5*iTime) + 0.2 * cos(0.35*iTime), 0.);\n//    result = drawBoat(result, uv, boatPosition2, .025);\n\n    result = drawWave(result, uv, 2.5, 0.04, 0.0);\n    result = drawWave(result, uv, 5.0, 0.05, -0.25);\n\n    \n    // Output to screen\n    //result = vec4(vec3(noise(uv * 100.)), 1.);\n    fragColor = result;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}