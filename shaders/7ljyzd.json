{
    "Shader": {
        "info": {
            "date": "1650146251",
            "description": "My shader for revision 2022 shader jam",
            "flags": 96,
            "hasliked": 0,
            "id": "7ljyzd",
            "likes": 7,
            "name": "Revision 2022 jam entry",
            "published": 3,
            "tags": [
                "revision",
                "jam"
            ],
            "usePreview": 0,
            "username": "kostik1337",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(texture(iChannel0, uv).rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define INF (1e10)\n#define PI 3.14159265\n#define rep(p,s) (mod(p,s)-s/2.)\n#define rep2(p,s) (abs(rep(p,2.*s))-s/2.)\n#define time iTime\n\n#define mr(t) (mat2(cos(t), sin(t), -sin(t), cos(t)))\n\n// Don't know how to use integrated fft on shadertoy :(\nfloat ffti(float t) {return 0.;/*texture(iChannel0, vec2(t,0.)).r*/;}\nfloat ffts(float t) {return texture(iChannel0, vec2(t,0.)).r;}\n\nfloat box(vec3 p, vec3 s) {\n  p = abs(p)-s;\n  return max(p.x, max(p.y, p.z));\n}\n\nvec3 ct(vec3 p) {\n  if(p.x < p.y) p.xy = p.yx;\n  if(p.y < p.z) p.yz= p.zy;\n  if(p.x < p.y) p.xy = p.yx;\n  return p;\n}\n\nfloat hash(float t) {\n  return fract(sin(t * 3234.12345));\n}\n\nfloat glow = 0.;\n\nfloat map(vec3 op) {\n  op.z += 10.*time + 20.*ffti(.07);\n  float m = INF;\n  vec3 p = op;\n  p = 2.-abs(p);\n  \n  float off = 0.;\n  vec3 p1 = p;\n  for(float i=0.; i<1.; ++i) {\n    p1 += vec3(hash(i), hash(i+.17), hash(i+.21));\n    off += hash(dot(vec3(.17, .21, .92), floor(p1/6.)));\n    p1 *= 2.;\n  }\n  m = min(m, max(p.x, p.y) + 1. + off);\n  \n  p = op;\n  float wires = INF;\n  float t = time / 4.;\n  t = floor(t) + smoothstep(.8, 1., fract(t));\n  for(float i = 0.; i<3.;++i) {\n    p.xz *= mr(.22);\n    p.yz *= mr(.28);\n    p = rep2(p, vec3(130.) / exp2(i));\n    p.xz *= mr(.3);\n    p.yz *= mr(.13);\n    if(i == 2.) p.xz *= mr(t * .1);\n    p = abs(p)-1.2;\n    p = ct(abs(p));\n    wires = min(wires, length(p.yz)-.1);\n    \n    vec3 p1 = p;\n    p1.x = rep2(p1.x + time, 12.);\n    p1 = abs(p1)-.2;\n    p1.yz *= mr(3.*p1.x);\n    float m1 = max(abs(p1.s)-2., length(p1.yz)-.01);\n    wires = min(wires, m1);\n    glow += .01 / abs(m1+.003);\n  }\n  m = max(m, -wires+.3);\n  m = min(m, wires);\n  \n  p = op;\n  float zdiv = 8.;\n  float cz = floor(p.z/zdiv);\n  p.z = rep(p.z, zdiv);\n  float ang = hash(cz) * 2.*PI + time * (hash(cz+.111)*2.-1.);\n  p.xy -= 3.*vec2(cos(ang), sin(ang));\n  p1 = p;\n  float figure = INF;\n  p.xz *= mr(3.*time * mix(.3, .9, hash(cz+.1344)));\n  p.yz *= mr(3.*time * mix(.3, .9, hash(cz+.37887)));\n  if(hash(cz + .911) < .5) {\n    figure = box(p, vec3(.5));\n  } else {\n    p = abs(p);\n    figure = dot(p, normalize(vec3(1.))) - .4;\n  }\n  float h = hash(cz+1.221);\n  float pawah = min(1., ffts(h)*90.);\n  glow += mix(.001, .003, pawah) / abs(figure-mix(.01, .3, pawah));\n  m = min(m, figure);\n  \n  return m;\n}\n\nvec3 normal(vec3 p) {\n  vec2 E = vec2(0., .001);\n  return normalize(\n    vec3(map(p+E.yxx), map(p+E.xyx), map(p+E.xxy)) - map(p));\n}\n\nvec3 bg(vec3 n) {\n  vec2 uv = vec2(atan(n.x, n.z), atan(n.x, n.y));\n  return 1.*vec3(.5, .7, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  vec2 uv1 = uv;\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 c = vec3(0.);\n  vec3 O = vec3(0.,0.,-3.), D = normalize(vec3(uv, 1.));\n  D.xz *= mr(.3);\n  D.yz *= mr(.1);\n  D.xy *= mr(time*.3 + .1*ffti(.09));\n  float d = 0., i;\n  vec3 p;\n  bool hit = false;\n  for(i=0.; i<64.;++i) {\n    p = O+D*d;\n    float m = map(p);\n    d += m;\n    if(m < .001 * d) {\n      hit = true;\n      break;\n    }\n  }\n  if(hit) {\n    vec3 n = normal(p);\n    vec3 col = vec3(1.);\n    vec3 bg = bg(D);\n    vec3 expVec = vec3(1., 1.3, 1.3);\n    vec3 cc = mix(bg, col, dot(n, vec3(0.,0.,-1.)) * exp(-d*expVec*.1));\n    cc += col * max(0., dot(abs(D), n)) * exp(-d*expVec*.1);\n    c += cc;\n    c = mix(c, vec3(0.), glow * exp(-d*.04));\n  } else {\n    c= bg(D);\n  }\n  \n  vec2 e = vec2(.003 + .003 * (sin(time)*.5+.5), .0);\n  vec3 prev = vec3(\n    texture(iChannel1, uv1-e).r,\n    texture(iChannel1, uv1).g,\n    texture(iChannel1, uv1+e).b\n  );\n  \n  float mad = 1.2*mix(.2, .1, sin(time)*.5+.5);\n  c -= .04/(smoothstep(.2, .0, prev)+mad);\n  c += .2 * smoothstep(.5, 1., prev);\n  c = max(c, vec3(0.));\n  \n  fragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28771,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mpl57/mixail-pilyavskij-live-2"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}