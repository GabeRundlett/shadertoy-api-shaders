{
    "Shader": {
        "info": {
            "date": "1607383270",
            "description": "OREN-NAYAR LADO IZQUIERDO Y LAMBERT LADO DERECHO\nGRAFICACION UNIDAD 4",
            "flags": 0,
            "hasliked": 0,
            "id": "tsyBzG",
            "likes": 1,
            "name": "Oren-nayar vs lambert",
            "published": 3,
            "tags": [
                "onlightmodel"
            ],
            "usePreview": 0,
            "username": "ivanjm",
            "viewed": 396
        },
        "renderpass": [
            {
                "code": "/**\nComparison of Oren-Nayar and Lambert diffuse lighting model\n\nYou can use the mouse to move the slider comparison\n\n*/\n\n\n/** Roughness value only affects Oren-Nayar Shading */\n#define ROUGHNESS 0.5\n\nconst float PI = 3.14159265359;\n\nfloat degToRad(float d) \n{\n    return d * PI / 180.;\n}\n\nmat4 makeYRotation(in float angleInRadians) \n{\n  float c = cos(degToRad(angleInRadians));\n  float s = sin(degToRad(angleInRadians));\n  mat4 r;\n  r[0].xyzw = vec4(c, 0, -s, 0);\n  r[1].xyzw = vec4(0, 1, 0, 0);\n  r[2].xyzw = vec4(s, 0, c, 0);\n  r[3].xyzw = vec4(0, 0, 0, 1);\n\n  return r;\n}\n\nvec3 opTx( vec3 p, mat4 m )\n{\n    vec3 q = mat3(inverse(m))*p;\n    return q;\n}\n\nfloat sdSphere( vec3 p, float s)\n{\n\treturn length(p + vec3(.0, .5,0.0))-s * sin(iTime);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p + vec3(.0, .5, .0))-b,.0))-r;\n}\n\nfloat smin( float a, float b )\n{\n\tfloat k = .1;\n    float h = clamp( .5+.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat map( in vec3 p)\n{\n\tfloat res = .0;\n\tfloat resSph = sdSphere(p, 2.5);\n\n\tvec3 q = opTx(p, makeYRotation(5. * iTime));\n\tfloat resCube = udRoundBox(q, vec3(1.5), .3);\n\n\tres = smin(resCube, resSph);\n\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(.002,.0,.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n    const float maxd = 10.;\n\tfloat h          = 1.;\n    float t          = .0;\n    for( int i=0; i<50; i++ )\n    {\n        if( h<.001 || t>maxd ) break;\n\t    h = map( ro+rd*t);\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.;\n\t\n    return t;\n}\n\nfloat OrenNayar(vec3 ld,vec3 vd,vec3 sn,float r,float a) {\n  float LdotV = dot(ld, vd);\n  float NdotL = dot(ld, sn);\n  float NdotV = dot(sn, vd);\n\n  float s = LdotV - NdotL * NdotV;\n\n  float sigma2 = r * r;\n  float A = 1. - .5 * (sigma2/(((sigma2 + .33) + .000001)));\n  float B = .45 * sigma2 / ((sigma2 + .09) + .00001);\n    \n  float ga = dot(vd-sn*NdotV,sn-sn*NdotL);\n\n  return max(0., NdotL) * (A + B * max(0., ga) * sqrt(max((1.0-NdotV*NdotV)*(1.0-NdotL*NdotL), 0.)) / max(NdotL, NdotV));\n}\n\nvec2 res;\nfloat limit = 1.;\nvec3 lighting(in vec3 n, in vec3 lp, in vec3 p, float fragCoord)\n{\n\n    vec3 ld = normalize(lp - p);\n    vec3 vd = normalize(vec3(0., 0., 5.) - p);\n    if(iMouse.x == 0.)\n    {\n        limit = 0.0;\n    }\n    else{\n    \tlimit = iMouse.x/res.x;\n    \tlimit = limit * 2. - 1.;\n    \tlimit *= 16./9.;\n    }\n    float diff;\n    if(fragCoord <= limit)\n    {\n\t\tdiff = OrenNayar(ld, vd, n, ROUGHNESS, 1.);\n    }\n    else\n    {\n        diff = max(dot(ld, n), 0.);\n    }\n   \n\treturn vec3(diff);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    res = iResolution.xy;\n\tvec2 q = uv * 2. - 1.;\n\tq.x *= iResolution.x/iResolution.y;\n\n\tvec3 ro = vec3(.0, .0, 5. );\n    vec3 rd = normalize( vec3(q,-1.) );\n\tvec3 col = vec3(0.0);\n    float t = intersect(ro,rd);\n    if( t>0. )\n    {\n    \tvec3 pos = ro+rd*t;\n        vec3 normal = calcNormal(pos);\n        vec3 light = vec3(lighting(normal, vec3(sin(iTime)*10., 10., 10.), pos, q.x));\n        col = light * vec3(.2, .4, .9) + vec3(.04);\n    }\n    \n\tcol *= smoothstep( .006, .008, abs(limit-q.x) );\n    \n    fragColor = vec4(col, 1. );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}