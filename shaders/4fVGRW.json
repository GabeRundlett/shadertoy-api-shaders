{
    "Shader": {
        "info": {
            "date": "1713131046",
            "description": "Inspired by kishimisu's shader tutorial and based on Inigo Quliez's heart shaped 2D signed distance function.\n\nNo this was not a romantic gesture, I just felt like making it.",
            "flags": 0,
            "hasliked": 0,
            "id": "4fVGRW",
            "likes": 2,
            "name": "Neon Heart Eyes",
            "published": 3,
            "tags": [
                "2d",
                "heart",
                "neon"
            ],
            "usePreview": 0,
            "username": "JPW03",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2024 JPW03\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed Distance Heart function, credit to Inigo Quilez\n// See: https://www.shadertoy.com/view/3tyBzV\n// LICENSE:\n// The MIT License\n// Copyright © 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\n// Colour palette definition\nvec3 palette( float t )\n{\n    // Pink -> Bright pink -> Pink\n    // Constants generated using: http://dev.thi.ng/gradients/\n    vec3 a = vec3(0.969, 0.015, 0.440);\n    vec3 b = vec3(-0.022, 0.698, 0.250);\n    vec3 c = vec3(1.233, 0.762, 0.241);\n    vec3 d = vec3(5.132, 2.727, 5.929);\n    \n    return a + b * cos(6.283185 * (c*t + d));\n}\n\n// Colour constants\nconst vec3 pink = vec3(0.9, 0.3, 0.8);\nconst vec3 white = vec3(1.0);\nconst vec3 emojiYellow = vec3(0.945,0.835,0.055);\nconst vec3 emojiMouthBrown = vec3(0.384,0.333,0.184);\nconst vec3 emojiTongueRed = vec3(0.694,0.004,0.020);\n\n// Defines a neon white border 0.1 dist thick on the line where dist = 0\nvec3 applyBorder( in float dist ) {\n    float border = 0.1 / ( 1.0 - (smoothstep(-0.05, 0.0, dist) - smoothstep(0.0, 0.05, dist)) );\n    border = pow(border, 1.1); // amplify\n    return border*white;\n}\n\n// Defines a pink gradient in the region dist <= 0\n// Returns an overridden colour or the original colour\nvoid innerPinkGradient( inout vec3 resultColour, in float dist ) {\n    if (dist <= 0.0) {\n        resultColour =  pink * (1.2 - abs(dist));\n    }\n}\n\n// Defines\nvoid rotateVec2( out vec2 v, in float rad) {\n    mat2 rotation = mat2(\n        cos(rad), -sin(rad),\n        sin(rad), cos(rad)\n    );\n    v *= rotation;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1, 0,0 centre)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 finalCol = vec3(0.0);\n\n    // FACE\n    \n    // Define face as circle of radius 1\n    float faceDist = length(uv) - 0.6;\n    // Define ovular mouth\n    vec2 uvMouth = vec2(uv.x, 1.5*uv.y + 0.3);\n    float mouthDist = length(uvMouth) - 0.4;\n    if (uvMouth.y > 0.0) {\n        mouthDist = 0.1;\n    }\n    // Define ovular tongue\n    float tongueDist = length(vec2(uv.x, 1.5*uv.y + 0.7)) - 0.2;\n\n    // Apply face\n    if (mouthDist <= 0.0) { //inner mouth\n        finalCol = pow(-mouthDist, 0.25) * emojiMouthBrown;\n        \n        // Apply tongue\n        if (tongueDist <= 0.0) {\n            finalCol = pow(-tongueDist, 0.25) * emojiTongueRed;\n        }\n    }\n    else if (faceDist <= 0.0) { //inner face, outer mouth\n        finalCol = emojiYellow * pow(-faceDist, 0.25);\n    }\n    \n    // HEART EYES\n\n    vec2 uvLeftHeart = 2.0 * vec2(uv.x + 0.25, uv.y + 0.05);\n    vec2 uvRightHeart = 2.0 * vec2(uv.x - 0.25, uv.y + 0.05);\n    rotateVec2(uvLeftHeart, radians(-15.0));\n    rotateVec2(uvRightHeart, radians(15.0));\n\n    // Distance from heart\n    float leftHeartDist = sdHeart(uvLeftHeart);\n    float rightHeartDist = sdHeart(uvRightHeart);\n\n    // Create rings        \n    float ringDist = max(-abs(leftHeartDist - 0.1), -abs(rightHeartDist - 0.1));\n    // The above formula's...\n    //  Gradient sign dictates the direction of the ring (positive = inwards heart/negative = outwards)\n    //  Minima/maxima dictates where rings diverge/converge\n    //  Gradient maginitude dictates the speed of rings\n    vec3 col = palette(ringDist + iTime);\n\n    float ring = abs(sin(ringDist*6.0 + iTime*2.0));\n    // Neon-ify\n    ring = 0.06 / ring;\n    ring = pow(ring, 1.2); // amplify\n    finalCol += col * ring;\n    \n    \n    // Create visible hearts\n    innerPinkGradient(finalCol, leftHeartDist);\n    innerPinkGradient(finalCol, rightHeartDist);\n    \n    // Apply heart borders\n    finalCol += applyBorder(leftHeartDist);\n    finalCol += applyBorder(rightHeartDist);\n    \n    // Output to screen\n    fragColor = vec4(finalCol, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}