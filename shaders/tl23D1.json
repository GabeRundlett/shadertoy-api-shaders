{
    "Shader": {
        "info": {
            "date": "1559461292",
            "description": "colors experiment\nRemake of my JS context2d demo https://avin.github.io/sketches/055_ragged_canvas.html",
            "flags": 32,
            "hasliked": 0,
            "id": "tl23D1",
            "likes": 18,
            "name": "Ragged colors",
            "published": 3,
            "tags": [
                "colors",
                "buffer"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 942
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PERIOD 20.\n\n#define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\n#define rand1(p) fract(sin(p* 78.233)* 43758.5453) \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    float aspect = iResolution.x / iResolution.y;\n    \n    float phaseInVal = float(iFrame)/PERIOD;\n    float phaseId = floor(phaseInVal);\n    float phaseVal = fract(phaseInVal);\n    float phase = floor(mod(phaseId, 2.)); // vert or horiz phase\n    \n    float speedF = .05; // speed factor    \n    float val = phaseVal*speedF;\n    float iVal = 1./PERIOD*speedF;               \n        \n    uv += sin(uv.yx*(50. + (rand1(phaseId+100.)-.5)*50.))*.005; //sin break boundary  \n    \n    uv.x +=(rand1(phaseId+200.)-.5)*.5;\n    uv.y +=(rand1(phaseId+300.)-.5)*.5;       \n    \n    float a = rand1(phaseId)*.5 - .25; \n    float ca = cos(a);\n    float sa = sin(a);\n    mat2 rot = mat2(ca, -sa, sa, ca);    \n    uv*=rot;\n    \n    float m = phase == 1. ? step(abs(uv.x), val) : step(abs(uv.y), val);    \n            \n    ouv -= phase == 1. ? vec2(sign(uv.x)*iVal, 0) : vec2(0, sign(uv.y)*iVal*aspect);            \n    vec3 col = texture(iChannel0, ouv).rgb;\n        \n    vec3 innerCol = hue( fract(phaseId/7.) ).rgb;  \n    \n    innerCol *= phaseVal; // gradient shadow       \n        \n    col = mix(col, innerCol, m);    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}