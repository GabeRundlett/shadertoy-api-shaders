{
    "Shader": {
        "info": {
            "date": "1645566734",
            "description": "CC0: More colors, more spirals\nBeen tinkering withs spirals for a few days so why stop now\n",
            "flags": 0,
            "hasliked": 0,
            "id": "sdsBWs",
            "likes": 39,
            "name": "More colors, more spirals",
            "published": 3,
            "tags": [
                "2d",
                "spirals"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 593
        },
        "renderpass": [
            {
                "code": "// CC0: More colors, more spirals\n// Been tinkering withs spirals for a few days so why stop now\n\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d\nfloat hex(vec2 p, float r ) {\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x)+PI);\n}\n\nvec2 spiralEffect(vec2 p, float a, float n) {\n  vec2 op = p;\n  float b = a/TAU;\n  vec2 pp   = toPolar(op);\n  float  aa = pp.y;\n  pp        -= vec2(pp.y*n*b, (pp.x/b+PI)/n);\n  vec2  nn  = mod2(pp, vec2(a, TAU/n));\n  // Yes, this is a trial and error:ed until it looked good \n  // because I couldn't be bothered to compute the real solution\n  float xf  = tanh_approx(20.0*length(p)/abs(n));\n  return vec2(abs(pp.x)*xf, mod(nn.y, n));\n}\n\n\nvec3 df(vec2 p) {\n  float zo = mix(0.75, 1.5, smoothstep(-0.5, 0.5, -cos(TIME*sqrt(0.1))));\n  \n  p /= zo;\n\n  p += 10.0*cos(0.033*TIME*vec2(1.0, sqrt(0.5)));\n  \n  vec2  hn = hextile(p);\n  float hh = hash(hn);\n  float h0 = fract(1367.0*hh);\n  float h1 = fract(1777.0*hh);\n  float h2 = fract(2083.0*hh);\n  float h3 = fract(2711.0*hh);\n  float h4 = fract(2803.0*hh);\n  \n  float zi = mix(0.125, 0.25, h3);\n\n  float hd = (abs(hex(p.yx, 0.5))-0.025)*zo;\n  \n  p /= zi;\n  \n  float a = 0.5;\n  float sp0 = round(mix(1.0, 23.0, h0));\n  float sp1 = round(mix(1.0, 37.0, h1));\n  vec2 se0 = spiralEffect(p*ROT(-0.123*TIME), a, sp0);\n  vec2 se1 = spiralEffect(p*ROT(.1*TIME), a, sign(h4-0.75)*sp1);\n  \n  vec2 se = vec2(pmin(se0.x, se1.x, 0.025), se0.y+se1.y);\n  \n  float h = se.y*0.05+h2+TIME*0.2;\n  float d = -((se.x)-0.05);\n  d *= zi*zo;\n  return vec3(d, hd, h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float aa = 2.0/RESOLUTION.y;\n  vec2 q  = fragCoord/iResolution.xy;\n  vec2 p  = -1. + 2. * q;\n  p.x     *= RESOLUTION.x/RESOLUTION.y;\n  vec3 d3 = df(p);\n  float d = d3.x;\n  float hd= d3.y;\n  float h = d3.z;\n  float s = smoothstep(aa, -aa, d);\n  vec3 col = vec3(0.0);\n  \n  col = hsv2rgb(vec3(fract(h), 0.95, s));\n  col = mix(col, vec3(0.0), smoothstep(aa, -aa, hd));\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}