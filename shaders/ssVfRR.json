{
    "Shader": {
        "info": {
            "date": "1657581541",
            "description": "Visualization of the associated Legendre polynomials for spherical harmonics.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssVfRR",
            "likes": 3,
            "name": "Spherical Harmonic Polynomial",
            "published": 3,
            "tags": [
                "spherical",
                "harmonics",
                "polynomials",
                "legendre"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "// Visualization of associated legendre polynomials for illustrative purposes\n\n#define PI 3.1415926\n#define L 2\n#define M 1\n\nint factorial(int v)\n{\n    int t = 1;\n    for(int i = 2; i < v; i++)\n    {\n        t *= i;\n    }\n    return t;\n}\n\n// Adapted from https://patapom.com/blog/SHPortal/\n// \"Evaluate an Associated Legendre Polynomial P(l,m,x) at x\n// For more, see “Numerical Methods in C: The Art of Scientific Computing”, Cambridge University Press, 1992, pp 252-254\" \nfloat P(int l, int m, float x )\n{\n    float pmm = 1.0;\n    if ( m > 0 ) {\n        float somx2 = sqrt((1.0-x)*(1.0+x));\n        float fact = 1.0;\n        for ( int i=1; i<=m; i++ ) {\n            pmm *= (-fact) * somx2;\n            fact += 2.0;\n        }\n    }\n    if( l == m )\n        return pmm;\n\n    float pmmp1 = x * (2.0*float(m)+1.0) * pmm;\n    if ( l == m+1 )\n        return pmmp1;\n\n    float pll = 0.0;\n    for ( float ll=float(m+2); ll<=float(l); ll+=1.0 ) {\n        pll = ( (2.0*ll-1.0)*x*pmmp1-(ll+float(m)-1.0)*pmm ) / (ll-float(m));\n        pmm = pmmp1;\n        pmmp1 = pll;\n    }\n\n    return pll;\n}\n\n\nfloat K(int l, int m)\n{\n    float n = float((2*l+1)*factorial(l - abs(m)));\n    float d = 4.0 * PI * float(factorial(l + abs(m)));\n    return sqrt(n/d);\n}\n\nfloat y(int l, int m, float cosTheta)\n{\n    float v = K(l, m) * P(l, abs(m), cosTheta);\n    if(m != 0)\n        v *= sqrt(2.0);\n    return v;\n}\n\n#define D(v) clamp(1.0 - abs(v) * iResolution.y / 3.0, 0.0, 1.0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n\n    float a = iResolution.y / iResolution.x;\n\n    float b = D(uv.y - y(L, M, uv.x));\n    float g = D(uv.y);\n    g += clamp(1.0 - abs(uv.x)/(0.01*a), 0.0, 1.0);\n    fragColor = vec4(g + vec3(b,b,0.0), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}