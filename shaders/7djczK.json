{
    "Shader": {
        "info": {
            "date": "1643813557",
            "description": "I was so busy I didn't have time to doodle so I built a doodle printer. Now that its done I have time again.",
            "flags": 40,
            "hasliked": 0,
            "id": "7djczK",
            "likes": 18,
            "name": "Doodle Printer 5000",
            "published": 3,
            "tags": [
                "graphics",
                "turtle"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "//Doodle Printer by eiffie \n//This is the same turtle graphics routine shown on numberphile but the angle\n//increases exponentially.\n\n//Challenge: Find a three sided loop.\n#define time iTime\n#define rez iResolution.xy\n\nvoid mainImage(out vec4 O, in vec2 U){\n  O=texture(iChannel0,U/rez.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define time iTime\n#define rez iResolution.xy\n#define pi 3.14159\nvec4 load(float x, float y){return texture(iChannel0,vec2(x+.5,y+.5)/rez.xy);}\nfloat tube(vec2 pa, vec2 ba){return length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0));}\nvoid mainImage(out vec4 O, in vec2 U){\n  O=texture(iChannel0,U/rez.xy);\n  U=floor(U);\n  vec4 L=load(0.,0.);\n  float f=float(iFrame),mf=900.;//increase this to complete circuits after 180. secs\n  if(mod(f,mf)==0.){\n    if(U.x+U.y==0.)O=vec4(rez.x,0.,-(2.*U.x-rez.x)/rez.y*15.,0.); \n    else if(U.x>rez.x/2. || iFrame==0)O=vec4(1);\n    else O=load(U.x+floor(rez.x/2.),U.y);\n    return;\n  }\n  vec2 nv=vec2(cos(L.y),sin(L.y));\n  if(U.x+U.y==0.){//logic pixel\n    float s=floor(f/mf);\n    f=mod(f-1.,mf);\n    if(f>800.+s*12.)return;//approximately 1 loop has finished\n    float f2=s*3.+200.;//199 for a new batch, every 3rd doodle is crap so step over it\n    O.zw+=nv;\n    O.y=mod(O.y+pi/f2*pow(f,2.),pi*2.);//increases the angle by pi*(step#^2)/doodle#\n  }else{//draw\n    vec2 p=L.zw,u=30.*(2.*U-rez.xy)/rez.y;\n    float d=tube(u-p,nv);d=smoothstep(0.0,90./rez.y,d);\n    O=min(O,vec4(d));\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define bps 8.\n#define pi 3.14159\nint N[8]=int[8](0,2,4,5,7,5,4,0);\n//int N[8]=int[8](0,2,3,4,5,7,8,9);\nfloat scale(float note){//throws out dissonant tones \n float n2=mod(note,12.); \n if((n2==1.)||(n2==6.)||(n2==8.)||(n2==11.))note=-100.;//mixolydian +minor 3rd \n return note; \n}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2 \nfloat ntof(int n0){\n float n=scale(float(n0));\n return (n>0.)?440.0 * pow(2.0, (float(n) - 67.0) / 12.0):0.0;\n} \nvec2 rot(vec2 v, float a) {return cos(a)*v+sin(a)*vec2(v.y,-v.x);}\nvec2 I(int n, float t, vec3 p, vec4 e, vec4 d){\n  float bt=t,t2,t3,t4,f=ntof(n);\n  if(f==0.)return vec2(0);\n  t-=t*d.y*sin((d.w*pi+t)*pi*d.z);t3=t*d.x;\n  t2=fract(t*p.y*f);t4=fract(t3*p.y*f);\n  t=fract(t*f);t3=fract(t3*f);\n  float amp=abs(1.+cos(bt*e.z*pi)*e.w)*exp(-bt*e.y)*(1.0-exp(-bt*e.x))*min(1.,100.-bt*100.);\n  return amp*rot(vec2(sin(pow(t,p.x)*pi*2.+pi*2.*p.z*sin(pow(t2,p.x)*pi*2.)),\n    sin(pow(t3,p.x)*pi*2.+pi*2.*p.z*sin(pow(t4,p.x)*pi*2.))),float(n)+bt*pi*2.);\n}\nvec2 mainSound(int samp, float time){\n//return vec2(sin(time*500.));\n  float tim=time*bps;\n  float bt=floor(tim),t=fract(tim);\n  int n1=N[int(bt/64.)];\n  int n0=n1+N[int(bt/8.)%8],n=n0+N[int(bt)%8],n2=n0+N[int(bt/2.)%8],n4=n0+N[int(bt/4.)%8];\n  vec2 v=I(n+36,t,vec3(1.-t*.5,1.,t),vec4(10.,1.0,12.,t*.3),vec4(1.014,0.005,1.,.5))*.25;\n  t=fract(tim/2.);\n  float fo=pow(1.-t,20.0);\n  v+=I(n2+48,t,vec3(1.-fo*.5,1.5,fo),vec4(10.,4.0,24.,t*.8),vec4(1.014,0.005,1.,.5));\n  \n  t=fract(tim/4.);\n  fo=pow(1.-t,20.0);\n  v+=I(n4+48,t,vec3(1.-fo*.5,1.5,fo),vec4(10.,4.0,36.,t*.8),vec4(1.014,0.005,1.,.5));\n  \n  t=fract(tim/8.);\n  fo=pow(1.-t,20.0);\n  v+=I(n0+36,t,vec3(1.-fo*.5,1.5,fo),vec4(10.,2.0,48.,t*.8),vec4(1.014,0.005,1.,.5));\n  return v*.2;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}