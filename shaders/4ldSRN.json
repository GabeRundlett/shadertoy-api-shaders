{
    "Shader": {
        "info": {
            "date": "1478473220",
            "description": "I accidentally wrote a Shadertoy App for Android...\nYou can download it here: [url]http://www.flockaroo.at/shadertoy4android.php[/url]\nStill very rudimentary, so some bugs might crawl out here and there, but many shaders should work.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldSRN",
            "likes": 4,
            "name": "Shadertoy4Android app",
            "published": 3,
            "tags": [
                "shadertoy",
                "app",
                "android"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 1959
        },
        "renderpass": [
            {
                "code": "// I accidentally wrote a Shadertoy App for Android.\n// So this is just an announcement.\n// download Shadertoy for Android here:\n// http://flockaroo.at/downloads/shadertoy4android-debug.apk\n\nint getDigitMask(int d)\n{\n    if(d==0x0) return 0x00EAAAE;\n    if(d==0x1) return 0x004C444;\n    if(d==0x2) return 0x00E2E8E;\n    if(d==0x3) return 0x00E2E2E;\n    if(d==0x4) return 0x00AAE22;\n    if(d==0x5) return 0x00E8E2E;\n    if(d==0x6) return 0x00E8EAE;\n    if(d==0x7) return 0x00E2222;\n    if(d==0x8) return 0x00EAEAE;\n    if(d==0x9) return 0x00EAE2E;\n    if(d==0xa) return 0x004AAEA;\n    if(d==0xb) return 0x00CACAC;\n    if(d==0xc) return 0x0068886;\n    if(d==0xd) return 0x00CAAAC;\n    if(d==0xe) return 0x00E8C8E;\n    if(d==0xf) return 0x00E8C88;\n    return -1;\n}\n\n\n#define O_ 0x10\n#define I_ 0x11\n#define Z_ 0x12\n#define M_ 0x13\n#define H_ 0x14\n#define S_ 0x15\n#define G_ 0x16\n#define L_ 0x17\n#define X_ 0x18\n#define Q_ 0x19\n#define A_ 0x1A\n#define B_ 0x1B\n#define C_ 0x1C\n#define D_ 0x1D\n#define E_ 0x1E\n#define F_ 0x1F\n#define J_ 0x21\n#define N_ 0x22\n#define W_ 0x23\n#define K_ 0x24\n#define U_ 0x25\n#define P_ 0x26\n#define V_ 0x27\n#define T_ 0x28\n#define Y_ 0x29\n#define R_ 0x2A\n#define dot_ 0x30\n#define dot2_ 0x31\n#define space_ 0x32\n#define minus_ 0x33\n\nint getLetterMask(int d)\n{\n    if(d==O_) return 0x004AAA4; // O\n    if(d==I_) return 0x00E444E; // I\n    if(d==Z_) return 0x00E248E; // Z\n    if(d==M_) return 0x00AEEAA; // M\n    if(d==H_) return 0x00AAEAA; // H\n    if(d==S_) return 0x00E8E2E; // S\n    if(d==G_) return 0x00E8AAE; // G\n    if(d==L_) return 0x008888E; // L\n    if(d==X_) return 0x00EAEAE; // X\n    if(d==Q_) return 0x004AAA6; // q\n    if(d==A_) return 0x004AAEA; // A\n    if(d==B_) return 0x00CACAC; // B\n    if(d==C_) return 0x0068886; // C\n    if(d==D_) return 0x00CAAAC; // D\n    if(d==E_) return 0x00E8C8E; // E\n    if(d==F_) return 0x00E8C88; // F\n    if(d==J_) return 0x00E222C; // J\n    if(d==N_) return 0x00CAAAA; // N\n    if(d==W_) return 0x00AAEEA; // W\n    if(d==K_) return 0x00AAEAA; // K\n    if(d==U_) return 0x00AAAAE; // U\n    if(d==P_) return 0x00CAAC8; // P\n    if(d==V_) return 0x00AAAA4; // V\n    if(d==T_) return 0x00E4444; // T\n    if(d==Y_) return 0x00AAE44; // Y\n    if(d==R_) return 0x00CAACA; // R\n    if(d==dot_) return 0x0000004; // .\n    if(d==dot2_) return 0x0004004; // :\n    if(d==space_) return 0x0000000; // _\n    if(d==minus_) return 0x0000E00; // _\n    return getDigitMask(d);\n}\n\n\nvoid drawLetter(int n, vec2 pos, float size, inout vec4 fragColor, vec2 fragCoord)\n{\n    int m = getLetterMask(n);\n    int j=int((fragCoord-pos).y/size);\n    int i=int((fragCoord-pos).x/size);\n    if(i>=0 && i<4 && j>=0 && j<6)\n        //if(((m>>(4*j-i))&1)==1) fragColor=vec4(1);\n        if(int(mod(float(m)/pow(2.0,float(4*j-i)),2.0))==1) fragColor=vec4(1);\n}\n\nvoid drawText(mat4 str, vec2 pos, float size, inout vec4 fragColor, vec2 fragCoord)\n{\n    for(int i=0;i<4;i++)\n    {\n        bool breakIt=false;\n        for(int j=0;j<4;j++)\n        {\n            if(int(str[i][j])<0) { breakIt=true; break; }\n            drawLetter(int(str[i][j]),pos+size*vec2(4.0*float(i*4+j),0),size,fragColor,fragCoord);\n        }\n        if(breakIt) break;\n    }\n}\n\nvoid drawDigit(int n, vec2 pos, float size, inout vec4 fragColor, vec2 fragCoord)\n{\n    int m = getDigitMask(n);\n    int j=int((fragCoord-pos).y/size);\n    int i=int((fragCoord-pos).x/size);\n    if(i>=0 && i<4 && j>=0 && j<6)\n        //if(((m>>(4*j-i))&1)==1) fragColor=vec4(1);\n        if(int(mod(float(m)/pow(2.0,float(4*j-i)),2.0))==1) fragColor=vec4(1);\n}\n\nint getDigit(int n, int d)\n{\n    return int(mod(float(n)/pow(10.0,float(d)),10.0));\n}\n\nint getDigitF(float f, int d)\n{\n    if(d<0) return int(mod(f/pow(0.1,float(-d)),10.0));\n    return int(mod(f/pow(10.0,float(d)),10.0));\n}\n\nvoid drawInt(int n, vec2 pos, float size, inout vec4 fragColor, vec2 fragCoord )\n{\n    int n2 = 10;\n    int dn=0;\n    for(int i=0;i<100;i++) { if(n2-1>=n) {dn=i+1; break;} n2*=10; }\n    for(int i=0;i<100;i++)\n    {\n        if(i==dn) break;\n        drawDigit(getDigit(n,dn-1-i), pos, size, fragColor, fragCoord );\n        pos+=vec2(4.0*size,0);\n    }\n}\n\n\nvoid drawFloat(float f, int dotnum, vec2 pos, float size, inout vec4 fragColor, vec2 fragCoord )\n{\n    int n2 = 10;\n    int dn=0;\n    if(f<0.0) { f=-f; drawLetter(minus_, pos, size, fragColor, fragCoord); pos+=vec2(4.0*size,0); }\n    for(int i=0;i<100;i++) { if(float(n2-1)>=f) {dn=i+1; break;} n2*=10; }\n    for(int i=0;i<100;i++)\n    {\n        int d;\n        if      (i<dn)  d=getDigitF(f,dn-1-i);\n        else if (i==dn) d=dot_;\n        else if (i>dn)  d=getDigitF(f,dn-1-i+1);\n        if(i==dn+dotnum+1) break;\n        drawLetter(d, pos, size, fragColor, fragCoord );\n        pos+=vec2(4.0*size,0);\n    }\n}\n\nvoid drawBox(float x, float y, float sx, float sy, inout vec4 col, vec2 coord)\n{\n    coord-=vec2(x,y);\n    vec4 dcol = vec4(1);\n    dcol *= 1.-smoothstep( sx-.01, sx+.01,coord.x);\n    dcol *=    smoothstep(-sx-.01,-sx+.01,coord.x);\n    dcol *= 1.-smoothstep( sy-.01, sy+.01,coord.y);\n    dcol *=    smoothstep(-sy-.01,-sy+.01,coord.y);\n    col+=dcol;\n}\n\nvoid drawHalfCircle(float x, float y, float r, inout vec4 col, vec2 coord)\n{\n    coord-=vec2(x,y);\n    vec4 dcol = vec4(1);\n    float l=length(coord);\n    dcol *= 1.0-smoothstep(r-.01,r+.01,l);\n    dcol *= smoothstep(-.01,+.01,coord.y);\n    col+=dcol;\n}\n\nvoid drawAndroid(float x, float y, float sx, float sy, inout vec4 col, vec2 coord)\n{    \n    coord = (coord-vec2(x,y))/vec2(sx,sy);\n    float ang = .3*cos(iTime*5.);\n    coord = vec2(coord.x*cos(ang)+coord.y*sin(ang),-coord.x*sin(ang)+coord.y*cos(ang));\n    \n    drawHalfCircle(0.,1.,.9,col,coord);\n    drawBox(0.,0.,.9,.9,col,coord);\n    drawBox( 1.25,0.,.2,.8,col,coord);\n    drawBox(-1.25,0.,.2,.8,col,coord);\n    drawBox(-.5,-1.3,.2,.3,col,coord);\n    drawBox( .5,-1.3,.2,.3,col,coord);\n}\n\n#define Res vec2(iResolution.xy)\n\nvec3 maskRGBGrid(vec3 col, vec2 coord,vec2 scrRes)\n{\t\n    if(fract(coord.x/Res.x*scrRes.x)<0.33) return col*vec3(1,0,0);\n    if(fract(coord.x/Res.x*scrRes.x)<0.66) return col*vec3(0,1,0);\n    return col*vec3(0,0,1);\n}\n\nfloat fermi(float x)\n{\n    return 1./(1.+exp(x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float offTime=1200000.;\n    float offdt=iTime-offTime;\n    float s=iResolution.x*0.013;\n    s*=fermi(offdt/0.07)+0.7*exp(-offdt*offdt/0.1/0.1);\n    vec2 c=iResolution.xy*0.5;\n    float l1=9.0;\n    float l2=3.0;\n    float l3=7.0;\n    vec4 col=vec4(0.0);\n    vec2 coord = (fragCoord-c);\n    coord+=dot(coord,coord)*coord/iResolution.x/iResolution.x*0.9;\n    coord+=c;\n    float coordOffX=0.0;\n    vec2 scrRes=vec2(150,120)*3.0;\n    if(Res.y/1.7<scrRes.y) scrRes*=Res.y/1.7/scrRes.y;\n    coordOffX+=.7*sin(iTime*40.0+70.0*coord.y/Res.x)*Res.x*0.002;\n    coordOffX-=1.*sin(iTime*60.0+800.0*coord.y/Res.x)*Res.x*0.002;\n    //coord+=vec2(coordOffX,0);\n    vec2 coordQ = floor(coord/Res*scrRes)*Res/scrRes;\n    coordQ+=vec2(coordOffX,0);\n    float andrSize = iResolution.y*.3*(.8+.15*sin(iTime*3.));\n    drawText(mat4(S_,H_,A_,D_, E_,R_,T_,O_, Y_,-1,0,0, 0,0,0,0), c+vec2(-s*4.*0.5*l1, s*4.0), s, col,coordQ);\n    drawText(mat4(F_,O_,R_,-1, 0,0,0,0, 0,0,0,0, 0,0,0,0),       c+vec2(-s*4.*0.5*l2,-s*3.0), s, col,coordQ);\n    drawText(mat4(A_,N_,D_,R_, O_,I_,D_,-1,0,0,0,0, 0,0,0,0),    c+vec2(-s*4.*0.5*l3,-s*10.0), s, col,coordQ);\n    col*=2.;\n    drawAndroid(c.x,c.y,andrSize,andrSize,col,coordQ);\n    col*=.35;\n    //coord-=vec2(coordOffX,0);\n\tcol*=vec4(1.,0.0,0.0,1);\n    col+=vec4(0.15);\n    // pixel mask\n    //col.xyz=maskRGBGrid(col.xyz,coord,scrRes);\n    // cathod ray mask\n    col*=clamp(1.0*(0.5+0.5*sin(3.3*scrRes.y*coord.y/iResolution.y)),0.0,1.0);\n    // time-mask\n    float ferm=fermi(offdt/0.07);\n    float d=length(coord-c);\n    col+=0.015*exp(-d*d/4.0/Res.x/Res.x/ferm/ferm)/(ferm)*mix(sin(iTime*300.0),1.0,(1.0-ferm));\n    if(coord.x<Res.x*0.05) col=vec4(0);\n    if(coord.y<Res.y*0.05) col=vec4(0);\n    if(coord.x>Res.x*0.95) col=vec4(0);\n    if(coord.y>Res.y*0.95) col=vec4(0);\n    fragColor=col.yxzw;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}