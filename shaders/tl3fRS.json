{
    "Shader": {
        "info": {
            "date": "1614336704",
            "description": "A lil raymarch scene. Next I want to make an actual train like a few examples I've seen on here. ",
            "flags": 0,
            "hasliked": 0,
            "id": "tl3fRS",
            "likes": 26,
            "name": "Coaster Jungle",
            "published": 3,
            "tags": [
                "3d",
                "rollercoaster"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 498
        },
        "renderpass": [
            {
                "code": "// Cole Peterson (Plento)\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n// Dave Hashkin hash\nfloat hash11(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n// Reflect across an axis\nvec3 ref(vec3 rp, vec3 q){\n    return -vec3(abs(rp.x), abs(rp.y), abs(rp.z)) + q*step(vec3(0), q);\n}\n\n\nfloat rbox( vec3 p, vec3 b, float r ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat line( vec3 p, vec3 a, vec3 b, float r ){\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat rcyl( vec3 p, float ra, float rb, float h ){\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\n\n// track height\nfloat h(float x){\n    return cos(x * 3.4) * .18 + cos(x * 1.2)*.1;\n}\n\n// Slope\nfloat hp(float x){\n    return (-3.4*sin(x * 3.4) * .18) + (-1.2*sin(x *1.2)*.1);\n}\n\n// Track width\n#define tw 0.12\n// Car size\n#define cs vec3(.08, .03, .04)\n//Car seperation\n#define sep 1.5\n\n\n\nfloat map(vec3 rp){\n    float d = 999.;\n    \n    rp.xy*=rot(rp.z*.23);\n    vec3 p = rp, p0 = rp;\n    \n    float tId = floor(p.z / sep);\n    float to = hash11(tId*999.)*5.;\n   \n    p.y -= cos(tId*2.) * .2;\n    float tX = iTime*.78 * sign(cos(tId*4.))*min(to, .8);\n    \n    float trackHeight = h(p.x + to);\n    \n    p.zy = mod(p.zy, sep)-sep*.5;\n    p.y += trackHeight;\n    \n    p.x = mod(p.x, 0.2)-0.2*.5;\n    d = min(line(p, vec3(0., 0., -tw), vec3(0., 0., tw), 0.01), d);\n    p.xy*=rot(3.14/2.);\n    d = min(rcyl(ref(p, vec3(0., 0.0, tw)), .006, .001, .2), d);\n    \n    p = p0;\n    p.y -= cos(tId*2.) * .2;\n    p.x -= tX;\n    \n    float cId = floor(p.x);\n    \n    float carHeight = h(tX + cId + cs.x*2. + .35 + to);\n    float trackDer = hp(tX + cId + cs.x*2. + .35 + to);\n    \n    p.x = mod(p.x, 1.)-1.*.5;\n    p.zy = mod(p.zy, sep)-sep*.5;\n    \n    p.xy *= rot(trackDer);\n    p.y += carHeight - cs.y + .11;\n    \n    d = min(rbox(p + vec3(0., 0., 0.), cs, 0.05), d);\n    \n    return d;\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec3 rd = normalize(vec3(uv, 1.7));\n    vec3 ro = vec3(0., .0, iTime+10.);\n    \n    float d = 0.0, t = 0.0;\n    \n    for(int i = 0; i < 80; i++){\n    \td = map(ro + rd*t); \n        \n        if(abs(d) < 0.003 || t > 20.) break;\n        \n        t += abs(d) * .62;\n    }\n    \n    vec3 p = ro + rd*t;\n    \n    vec3 sky = mix(vec3(0.7, 0.9, 0.9), vec3(0.95, 0.47, 0.36), (uv.y+.15)*2.);\n    vec3 col = mix(sky, vec3(0), exp(-t*t*t*0.001));\n    col *= ss(.54, .1, abs(uv.y));\n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}