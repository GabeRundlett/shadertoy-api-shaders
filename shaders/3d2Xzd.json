{
    "Shader": {
        "info": {
            "date": "1554749992",
            "description": "Inverted torus knot, with fairy coloring from tdhooper [url]https://www.shadertoy.com/view/4lGyW1[/url]\n\nmouse/up/down: change view\ni: inversion\nleft/right: number of turns in torus (0 to cycle).",
            "flags": 48,
            "hasliked": 0,
            "id": "3d2Xzd",
            "likes": 32,
            "name": "Inverted Torus Knot",
            "published": 3,
            "tags": [
                "torus",
                "inversion",
                "knot",
                "fairy",
                "cyclide"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 1162
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Torus knot (p,p+1), inverted (to make a Dupin cyclide knot I guess).\n//\n// Colouring from tdhoopers \"Shaderdough Fairy\"\n//\n// https://www.shadertoy.com/view/4lGyW1\n//\n// mouse/up/down: change view\n// i: inversion\n// left/right: knot number (0 to cycle).\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec2 thetorus = vec2(1.0, 0.7);\nbool doinvert = false;\n\n// \"Fairy\" coloring lifted from tdhooper's ...\nconst float MAX_TRACE_DISTANCE = 10.0;\nconst float INTERSECTION_PRECISION = 0.001;\n#ifdef HIGH_QUALITY\nconst float FUDGE_FACTOR = .2;\n#else\nconst float FUDGE_FACTOR = .4;\n#endif\n\nconst float PI = 3.14159;\nbool dorotate = true;\nfloat scale = 1.0;\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(t) + vec2(p.y, -p.x) * sin(t);\n}\n\nfloat A = 10.0;\nfloat B = 11.0;\n\nfloat torus(in vec3 p, in vec2 t, out vec2 uv) {\n  float rho = atan(A/B);\n\n  float theta = atan(p.y,p.x);\n  float phi = atan(p.z,length(p.xy)-t.x);\n  uv = vec2(theta,phi);\n  uv /= 2.0*PI;\n\n  uv = rotate(uv,rho);\n  uv += 0.2*iTime;\n  float K = sqrt(A*A+B*B);\n  vec2 grid = vec2(K);\n  uv *= grid;\n  uv.y = round(uv.y);\n  uv /= grid;\n  uv -= 0.2*iTime;\n  uv = rotate(uv,-rho);\n  theta = 2.0*PI*uv.x;\n  phi = 2.0*PI*uv.y;\n  vec2 rad = vec2(cos(theta),sin(theta)); // Unit length radial vector\n  vec3 r = vec3(t.x*rad+t.y*cos(phi)*rad,t.y*sin(phi));\n  return distance(p,r)-0.1;\n}\n\nvec3 invert(vec3 p, vec3 centre, float r2, inout float k) {\n  p -= centre;\n  float r = dot(p,p);\n  p *= r2/r;\n  p += centre;\n  k *= r/r2;\n  return p;\n}\n\nfloat map(in vec3 p, out vec2 uv)\n{\n  float k = 1.0;\n  if (doinvert) {\n    vec3 centre = vec3(sin(0.5*iTime));\n    p = invert(p,centre,1.0,k);\n  }\n  float d = torus(p,thetorus,uv);\n  float res = k*d;\n  return res;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\n// Smooth hue to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 h2rgb(float hue) {\n  vec3 rgb = clamp( abs(mod(hue*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nbool keypress(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nconst int CHAR_I = 73;\n\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  doinvert = !keypress(CHAR_I);\n  vec2 uv = scale*(2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n  vec3 ro = vec3(0,0,4);\n  ro *= 0.1*float(10+keycount(KEY_DOWN)-keycount(KEY_UP));\n  vec3 rd = normalize(vec3(uv,-2));\n\n  A = max(0.0,float(keycount(KEY_RIGHT)-keycount(KEY_LEFT)));\n  if (A == 0.0) {\n    A = floor(8.0-4.0*cos(0.2*iTime));\n  }\n  B = A+1.0;\n  ro = transform(ro);\n  rd = transform(rd);\n  rd = normalize(rd);\n\n  vec3 col = pow(vec3(.15,0,.2), vec3(2.2));    \n  int iter = int(20. / FUDGE_FACTOR);\n  float t = 0.0;\n  for( int i=0; i < iter; i++ ){\n    if( t > MAX_TRACE_DISTANCE ) break;\n    float d = map( ro+rd*t, uv );\n    vec3 c = h2rgb(uv.x+uv.y);\n    float h = abs(d);\n    t += max(INTERSECTION_PRECISION, h * FUDGE_FACTOR);\n    col += c * pow(max(0., (.02 - h)) * 19.5, 10.) * 150.;\n    col += c * .001 * FUDGE_FACTOR;\n  }\n  col = pow(col, vec3(1./1.8)) * 1.5;\n  col = pow(col, vec3(1.5));\n  col *= 3.0;\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}