{
    "Shader": {
        "info": {
            "date": "1686312299",
            "description": "To kiss or not to kiss with octahedral sphere packing",
            "flags": 0,
            "hasliked": 0,
            "id": "clyXWG",
            "likes": 17,
            "name": "Osculating Sphere Variations",
            "published": 3,
            "tags": [
                "fractal",
                "schottky"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "// \"Osculating Sphere Variations\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/* Started from \"3D kissing-Schottky Orbit-sphere\" by soma_arc */\n\n#define AA    0  // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nvec3 HsvToRgb (vec3 c);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\n\n#define N_VERT  6\n\nvec3 ltDir, sPos[N_VERT];\nfloat dstFar, tCur, cRad, rRef;\nint nFrame, nIt;\nconst int maxIt = 40;\nconst float pi = 3.1415927;\n\nvoid Setup ()\n{\n  vec2 e;\n  e = vec2 (1., 0.);\n  sPos[0] = e.xyy;\n  sPos[1] = - e.xyy;\n  sPos[2] = e.yxy;\n  sPos[3] = - e.yxy;\n  sPos[4] = e.yyx;\n  sPos[5] = - e.yyx;\n  cRad = 1. / sqrt(2.);\n  rRef = cRad * 5. / 12.;  // (for kissing spheres)\n  rRef *= 1.2 + 0.85 * sin (0.2 * pi * tCur);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 q;\n  float r2, pp, sFac;\n  bool done;\n  r2 = cRad * cRad;\n  sFac = 1.05;  // (1.0 for the original)\n  nIt = 0;\n  q = vec4 (p, 1.);\n  for (int j = VAR_ZERO; j < maxIt; j ++) {\n    done = true;\n    for (int k = VAR_ZERO; k < N_VERT; k ++) {\n      p = q.xyz - sPos[k];\n      pp = dot (p, p);\n      if (pp < r2) {\n        q = sFac * (r2 / pp) * vec4 (p, q.w) + vec4 (sPos[k], 0.);\n        nIt = j + 1;\n        done = false;\n        break;\n      }\n    }\n    if (done) break;\n  }\n  return 0.1 * (length (q.xyz) - rRef) / q.w;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BallHit (vec3 ro, vec3 rd, float rad)\n{\n  float b, d, w, dMin;\n  dMin = dstFar;\n  b = dot (rd, ro);\n  w = b * b - dot (ro, ro) + rad * rad;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    if (d > 0.) dMin = d;\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  float dHit, d, nDotL;\n  Setup ();\n  col = vec3 (0.4, 0.42, 0.4);\n  if (BallHit (ro, rd, cRad) < dstFar) {\n    dHit = 0.;\n    for (int j = VAR_ZERO; j < 1000; j ++) {\n      d = ObjDf (ro + dHit * rd);\n      if (d < 1e-5 || dHit > dstFar) break;\n      dHit += d;\n    }\n    if (dHit < dstFar) {\n      ro += dHit * rd;\n      vn = ObjNf (ro);\n      nDotL = max (dot (ltDir, vn), 0.);\n      col = (nIt == 0) ? vec3 (0.95, 0.95, 1.) :\n         HsvToRgb (vec3 (fract (- 2. * log2 (float (nIt)) / log2 (float (maxIt))), 1., 1.));\n      col = col * (0.2 + 0.8 * nDotL * nDotL) +\n         vec3 (0.2) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    }\n  }\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  zmFac = 6.;\n  if (mPtr.z > 0.) {\n    az += 2.2 * pi * mPtr.x;\n    el += pi * mPtr.y;\n    zmFac += 14. * abs (mPtr.x);\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.2 * pi * sin (0.02 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -5.);\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}