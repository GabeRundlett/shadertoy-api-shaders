{
    "Shader": {
        "info": {
            "date": "1672852675",
            "description": "trying to get x%y  giving the same result on all platforms.\nThe last one is the one that works everywhere like the ref mod().\nthe before-last is ok for y>0 \n\nIt's incredible how each variant give a different result AND different on Windows vs OpenGL !\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Dlj3Rh",
            "likes": 7,
            "name": "portable x%y",
            "published": 3,
            "tags": [
                "glsl",
                "modulo",
                "compatibility",
                "portability"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "// #define imod(a,b) int( round ( mod(float(a), float(b) ) ) ) // ref.  but wrong on some values, e.g. mod(33,33)=33\n// #define imod(a,b) (  (a) % (b) )                            // OpenGL: wrong for a|b<0  Windows: wrong on a*b<0\n// #define imod(a, b) (a - (a/b)*b)                            // supposed to be the def but ok only for a&b>0\n// #define imod(a,b) int( uint(a) % uint(b) )                  // OpenGL: look like above  Windows: look like OpenGL (and nothing else)\n// #define imod(a,b) ( ( (a) % (b) ) + ( a < 0 ? b : 0 ) )     // OpenGL: wrong for a|b<0  Windows: ok for b > 0 = the practical case\n// #define imod(a,b) ( ( a + 1024*(b) ) % (b) )                // OpenGL: wrong for a|b<0  Windows: ok for a not too negative\n   #define imod(a,b) ( a >= 0 ? (a) % (b) : -(a)%(b)==0 ? 0 :  b - ( -(a) % (b) ) ) // ok everywhere for b > 0 = the practical case\n// #define imod(a,b) ( b>= 0 ? a >= 0 ? (a) % (b) : ( b - ( -(a) % (b) ) )%(b) \\\n   //                        :  a > 0 ? (a) % -(b) == 0 ? 0 : b + (a) % -(b) : -( -(a) % -(b) ) ) //  ok everywhere for all case\n\n#if 0\nint imod(int a, int b) { // function variant of option 5\n  int r = abs(a)%b;\n  if (a >= 0) return r;\n  if (r == 0) return 0;\n  return b-r;\n}\n#endif\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 I = ivec2( U - iResolution.xy/2. );\n    O = vec4( .5 + .5* float( imod(I.x,I.y) )/float(abs(I.y)) );\n    if (  abs(imod(I.x,I.y)) == abs(I.y) && iFrame%20<10 ) O=vec4(1,0,0,0); //Â test bounds: red if error\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}