{
    "Shader": {
        "info": {
            "date": "1677702069",
            "description": "Forked from \"Dive into geometry\" by Deep4, shadertoy.com/view/Ddc3zs\nNow with added auto-VJ capabilities, dust particles & light ring.\n\nOriginal description: \"Result by fail\"",
            "flags": 64,
            "hasliked": 0,
            "id": "cst3zl",
            "likes": 15,
            "name": "Fork: Dive Into Music",
            "published": 3,
            "tags": [
                "music",
                "abstract"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 587
        },
        "renderpass": [
            {
                "code": "// Fork: Dive Into Music 1.03.230301\n// Forked from \"Dive into geometry\" by Deep4, shadertoy.com/view/Ddc3zs\n// Now with added auto-vj capabilities, dust particles & light ring\n//\n// - use with music in iChannel0 -\n\n\n#define PI 3.14159265359 \n\nfloat animTime;\nvec4 fft, ffts;\n\nvoid compressFft(){ //compress sound in iChannel0 to simple frequency-range amplitude estimations \n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. shadertoy.com/view/Xds3Rr)\n    for (int n=1;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 86-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(2,8,7,4); ffts /= vec4(2,3,3,21); //normalize\n    fft.x = step(.91,fft.x); //weaken weaker sounds, hard limit\n}\n\nfloat hash21(vec2 p){ //pseudorandom generator, cf. The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\n\nmat2 rotM(float deg){\n    deg /= 180./PI;\n    return mat2(cos(deg),-sin(deg),sin(deg),cos(deg));\n}\n\nfloat particle(vec2 p){\n    return smoothstep(.1,.0,length(p)) * smoothstep(.1,.06,length(p-vec2(0.,.02)));\n}\n\nfloat dustLayer(vec2 p){\n    float id = hash21(floor(p));\n    return smoothstep(0.,1.,id)*particle((fract(p)-vec2(.5+.4*cos(id*animTime),.5+.4*sin(.8*id*animTime)))*rotM(id*360.)/vec2(cos(.5*id*animTime),1)); //...is there performance gain in doing this rather than via sub steps?\n}\n\nvec3 Field(vec3 Pos) //forked\n {\n\tPos *= 0.1;\n\tfloat f = 0.1;\n\n\tfor (int i = 0; i < 5; ++i)\n\t{\n\t\tPos = (Pos.yzx * mat3(0.8, 0.6, 0, -0.6, 0.8, 0.0, 0.0, 0.0, 1.0)) + vec3(0.123, 0.456, 0.789) * float(i);\n\t\tPos = (abs(fract(Pos) - 0.5)) * 2.0;\n\t\tf *= 2.0;\n\t}\n\n\tPos *= Pos;\n\treturn sqrt(Pos + Pos.yzx) / f + 0.0001;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); // viewport max -1..1\n    float d2 = uv.x*uv.x+uv.y*uv.y; //polar distance squared\n    animTime = 2.133333*iTime;\n\tvec3 col;\n    float aFrac, amp = 0.; \n    compressFft(); //initializes fft, ffts\n    vec3 Position = vec3(0.5, 0.8, .5*animTime+.4*fft.w*fft.w*fft.w);\n    vec3 Direction = vec3((1.-.5*cos(animTime/16.))*uv,1.);\n      \n    // Dust layers \n    for (float n=0.;n<4.;n++){\n        aFrac = fract(-.05*animTime+.25*n)-.03*fft.w*fft.w*fft.w;\n        amp += 1.4*(.2+.8*fft.z)*dustLayer((uv+n*vec2(.1,.05))*25.*aFrac)*smoothstep(1.,.33,aFrac);\n    }\n    amp *= (.7+.5*length(uv)); //anti-vignette \n    \n    // Original geometry field, forked\n\tfor (int i = 0; i < 50; ++i){\n\t\tvec3 f2 = Field(Position);\n\t\tPosition += Direction * min(min(f2.x, f2.y), f2.z);\n\t\tcol += float(50 - i) / (f2 + 0.005);\n\t}\n\tcol = vec3(1.0 - 1.0 / (1.0 + col * (-0.06 / 2500.0)));\n\tcol *= col;\n\n    // Misc\n    col = (.5*amp+3.*col.r)*vec3(ffts.x<=ffts.y,ffts.y<=ffts.z,ffts.z<=ffts.x); //colors\n    col += .1*vec3(clamp(.015/abs(d2-.04*(.5+ffts.w))*(.1+.9*fft.x),0.,1.))/(length(col)); //center eye\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32534,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/darklightrec/fedde-le-grand-let-the-1"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}