{
    "Shader": {
        "info": {
            "date": "1660203773",
            "description": "I haven't been able to make much lately...",
            "flags": 0,
            "hasliked": 0,
            "id": "Nlcyzf",
            "likes": 3,
            "name": "Soft Balls",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141592653;\n\nstruct Camera {\n    vec3 position;\n    vec3 direction;\n    vec3 up_direction; // not require dot(direction, up_direction) == 0\n    float fov;\n    float aspect; // x / y\n};\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\n// perspective camera ray, uv = fragCoord / iResolution.xy\n// cf: https://qiita.com/aa_debdeb/items/301dfc54788f1219b554\nRay cameraRay(in Camera camera, in vec2 uv) {\n    uv = uv * 2.0 - 1.0;\n    float h = tan(camera.fov * 0.5);\n    float w = h * camera.aspect;\n    vec3 right = normalize(cross(camera.direction, camera.up_direction));\n    vec3 up = normalize(cross(right, camera.direction));\n    vec3 direction = normalize(right * w * uv.x + up * h * uv.y + camera.direction);\n    Ray ray;\n    ray.origin = camera.position;\n    ray.direction = direction;\n    return ray;\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 randomUnit(in float gen) {\n    vec2 u = hash21(gen);\n    float t = 2.0 * PI * u.x;\n    float z = 2.0 * u.y - 1.0;\n    float r = sqrt(1.0 - z * z);\n    return vec3(r * cos(t), r * sin(t), z);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sDist(in vec3 p) {\n    float dist = length(p) - 1.5;\n    for (int i = 0; i < 20; i++) {\n        vec3 c = 5.0 * (sin((float(i) * 0.5 + iTime * 1.2) / 5.0 * PI) + 1.0) * randomUnit(float(i));\n        dist = opSmoothUnion(dist, length(p - c) - 0.5, 0.5);\n    }\n    return dist;\n}\n\nvec3 calcNormal(in vec3 p) {\n    const vec2 h = vec2(0, 1.0e-5);\n    return normalize(vec3(\n        sDist(p + h.yxx) - sDist(p - h.yxx),\n        sDist(p + h.xyx) - sDist(p - h.xyx),\n        sDist(p + h.xxy) - sDist(p - h.xxy)\n    ));\n}\n\nvoid mainImage0(out vec4 O, in vec2 U) {\n    vec2 r = iResolution.xy,\n    pos = vec2(cos(iTime * 0.12), sin(iTime * 0.12));\n    U /= r;\n    Camera cam = Camera(\n        vec3(pos.y, 0, pos.x) * 20.0,\n        vec3(-pos.y, 0, -pos.x),\n        vec3(0, 1, 0),\n        PI / 4.0,\n        r.x / r.y\n    );\n    Ray ray = cameraRay(cam, U);\n    \n    float dist = 0.0; int i;\n    for (i = 0; i < 256; i++) {\n        vec3 p = ray.origin + dist * ray.direction;\n        float dist0 = sDist(p);\n        if (dist0 < 1.0e-3 || dist > 40.0) break;\n        dist += dist0;\n    }\n\n    float k = clamp((0.5 + U.y - U.x) / 4.0, 0.0, 1.0);\n    O = vec4(0, k, 0.25 - k, 1);\n    if (i < 256 && dist < 40.0) {\n        vec3 p = ray.origin + dist * ray.direction;\n        vec3 normal = calcNormal(p);\n        float c = -dot(normal, normalize(vec3(-1)));\n        O = vec4(c * 0.1, 0, (1.0 - c) * 0.1, 1);\n    }\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    \n// smart anti-aliasing\n// reference: https://shadertoyunofficial.wordpress.com/2021/03/09/advanced-tricks/\n    if (fwidth(length(O.xyz)) > 0.1) {\n        vec4 o;\n        for (int k = 0; k < 4; k++) {\n              mainImage0(o,U + (vec2(k % 2, k / 2) - 0.5) / 1.5);\n              O += o;\n        }\n        O /= 5.0;\n    }\n    \n    O = pow(O, vec4(.4545));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}