{
    "Shader": {
        "info": {
            "date": "1437992000",
            "description": "A crawling cell on a hexagon grid",
            "flags": 0,
            "hasliked": 0,
            "id": "llfSz2",
            "likes": 12,
            "name": "hexcrawler",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "hex"
            ],
            "usePreview": 0,
            "username": "nexor",
            "viewed": 662
        },
        "renderpass": [
            {
                "code": "\n// Used in ShaderEditor for Android\n//#define MOBILE\n\n#ifndef MOBILE\n#define time iTime\n#define resolution iResolution.xy\n#else\nprecision highp float;\nuniform float time;\nuniform vec2 resolution;\n#endif\n\nconst float pi = asin(1.)*2.;\nconst float p257 = 2./sqrt(3.); //=2.*.57735;\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*157.0;\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m2*p*2.02;\n    f += 0.2500*noise( p ); p = m2*p*2.03;\n    f += 0.1250*noise( p ); p = m2*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n}\n\nvec2 tr(vec2 p)\n{\n\t p /= resolution.xy;\n\t p = -1.0+2.0*p;\n\t p.x *= resolution.x/resolution.y;\n\t return p;\n}\n\nvec2 rot(vec2 p, float deg)\n{\n\tfloat c = cos(deg);\n\tfloat s = sin(deg);\n\tmat2 m = mat2(c,s,s,-c);\n\treturn m*p;\n}\n\nvec2 pix(vec2 p, int s)\n{\n\t return floor(p*float(s)+0.5)/float(s);\n}\n\nfloat eudist(vec2 p, vec2 s)\n{\n\t return max(abs(p.x-s.x),abs(p.y-s.y));\n}\n\nfloat hex(vec2 p)\n{\n    p.x *= p257;\n\tp.y += mod(floor(p.x), 2.0)*0.5;\n\tp = abs((mod(p, 1.0) - 0.5));\n\treturn abs(max(p.x*1.5 + p.y, p.y*2.0) - 1.0);\n}\n\nvoid render(inout vec4 fragColor, in vec2 fragCoord)\n{\n\t   vec2 uv = tr(fragCoord.xy);\n\n\t   vec2 c = vec2(0.0);\n\n\t   float t = smoothstep(0.1,0.7,fract(time))+floor(time);\n     t *= 0.75;\n\n\t\t\tvec3 bg = vec3(0.2,0.8,0.3);\n\t\t\tvec2 mv = 10.0*vec2(\n\t   \t\tcos(t*0.1-time*0.2),\n\t   \t\tsin(t*0.1-time*0.2));\n\n\t   \tbg *= fbm(uv*8.0+mv);\n\n\t   vec3 col = vec3(1.0,.65,0.1);\n\n\n\n\t   vec2 v = uv-c;\n\t   float ang = atan(v.y,v.x);\n\t   vec2 r = rot(uv,time*0.25);\n\t   float d = mix(-0.575+hex(8.0*uv+mv)*10.0*smoothstep(0.8,0.4,length(v)),\n\t   \t\t\t\tsmoothstep(0.4,0.5,length(v)),\n\t   \t\t\t\t20.0*cos(time*0.25));\n\n\t   float len =\n\t   smoothstep(1.0,0.3,d*1.75+0.175);\n\n\t   len *= bg.r+mod(bg.g,0.2);\n\t   len *= 4.0;\n\n    col *= 2.0*len;\n    col = mix(col,vec3(0.0,0.8,0.5),len);\n\tcol = mix(\tcol,\n\t\t\t\tcol-bg.rgg,\n\t\t\t\tsmoothstep(0.0,0.005,len));\n\n\n    col = sqrt(col);\n    //col.bgr = col;\n    //col.rbg = col;\n    //col.grb = col;\n    col = 1.0-col.brg;\n\n    fragColor = vec4( col, 1.0 );\n}\n\n#ifndef MOBILE\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \trender(fragColor,fragCoord);\n}\n#else\nvoid main()\n{\n    render(gl_FragColor,gl_FragCoord.xy);\n}\n#endif",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}