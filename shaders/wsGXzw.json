{
    "Shader": {
        "info": {
            "date": "1573628278",
            "description": "melted likes some water balls",
            "flags": 0,
            "hasliked": 0,
            "id": "wsGXzw",
            "likes": 3,
            "name": "Melted Ball",
            "published": 3,
            "tags": [
                "tutorial"
            ],
            "usePreview": 0,
            "username": "Easy",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "vec2 N22(vec2 p)\n{\n\tvec3 a = fract(p.xyx*vec3(123.34,234.34,345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\t\n    float t = iTime*1.0+10.0;\n    \n    vec2 p1 = vec2(0.55,0.0);\n    vec2 p2 = vec2(-0.55,0.0);\n    \n    float radius = 0.15;\n    float expend = 0.1;\n    float threshold = 0.8;\n    float d = 0.0;\n    \n    for (float i = 1.0; i <= 60.0; i++)\n    {\n        vec2 n = N22(vec2(i+1.0,i));\n        vec2 p = vec2(1.0*sin(n.x*t/ratio)*ratio, 1.0*sin(n.y*t));\n        d += smoothstep(radius+expend, radius, length(uv - p));\n    }\n    d = smoothstep(threshold, 1.0, d);\n    \n    // Output to screen\n    fragColor = vec4(0.4,0.6,1.0,1.0)*d;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}