{
    "Shader": {
        "info": {
            "date": "1649390702",
            "description": "Another ornate mosaic pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "st2yRw",
            "likes": 4,
            "name": "Metal branch mosaic",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n\nvec2 fract1(vec2 a){\n    return\n        fract(a)\n        //fract(a-fract(a*4.)/2.)\n    ;\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c)*v;\n}\n\nvec2 triangle_wave(vec2 a,float num){\n    a = rotate(a,num*radians(180.));\n    return abs(fract1((a+vec2(1.,0.5))*1.5)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    float time1 = iTime/64.;\n    uv += vec2(time1/2.0,time1/3.0)/t1/4.0+(vec2(cos(time1),sin(time1)))*8./t1;\n    float scale = 1.5;\n    float p1 = 1.;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);\n    vec3 col1 = col;\n    for(int k = 0; k < 9; k++){\n        //uv.y -= fmod(uv.y,1.5); //lace pattern\n        float rotation_number = 0.;\n        //rotation_number -= (floor(uv.x+uv.y)*2.+float(k))*1.5;\n\n        //rotation_number += p1/2.;\n        //rotation_number = floor(uv.x+uv.y-2.)/2.;\n\n        uv += t2;\n        uv /= scale;\n        //uv = abs(uv);\n        //uv.x += sign(uv.x)/2.;\n        //uv.y += sign(uv.y)/2.;\n\n        t2 = p1*triangle_wave(uv-.5+floor(t2.y+t2.x),rotation_number);\n        t3 = -p1*triangle_wave(uv.yx+floor(t2.y+t2.x),rotation_number);\n        //t3 -= dot(t3,t3)/4.; //makes another interesting pattern\n\n        uv = t2-t3;\n        p1 *= -1.;\n        //p1 *= sign(uv.y+.5);\n\n        float multiplier = 1.25;\n        //col.x += (-col.x)/4.;\n\n        //col.x /= multiplier;\n        col.x = max(uv.y+uv.x-col.x*2.,col.x*(multiplier));\n        //col.x = max(uv.y+uv.x-col.x*(2.*(2.-uv.y)-(uv.x+uv.y)/2.),col.x*(multiplier));\n        //col.x = abs(.5-col.x);\n        col = abs(col.yzx-vec3(1.-col.x))/multiplier;\n        col1 = abs(col-col1);\n    }\n    fragColor =\n        vec4(col*2.,1.0);\n        //vec4(col1*2.,1.0);\n}\n\n/*\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c)*v;\n}\n\nvec2 triangle_wave(vec2 a,float num){\n    a = rotate(a,num*radians(180.));\n    return abs(fract((a+vec2(1.,0.5))*1.5)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    float time1 = iTime/64.;\n    uv += vec2(time1/2.0,time1/3.0)/t1/4.0+(vec2(cos(time1),sin(time1)))*8./t1;\n    float scale = 1.5;\n    float p1 = 1.;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);\n    for(int k = 0; k < 12; k++){\n        float rotation_number = 0.;\n        //rotation_number -= (floor(uv.x+uv.y)*2.+float(k))*1.5;\n\n        //rotation_number += p1/2.;\n        //rotation_number = floor(uv.x+uv.y-2.)/2.;\n\n        uv += t2;\n        //uv /= scale;\n        //uv.x += sign(uv.x)/2.;\n        //uv.y += sign(uv.y)/2.;\n\n        t2 = -p1*triangle_wave(uv-.5,rotation_number)/3.;\n        t3 = p1*triangle_wave(uv.yx,rotation_number);\n        uv = t2-t3;\n        p1 *= -1.;\n        //p1 *= sign(uv.y+.5);\n\n        float multiplier = 1.25;\n        //col.x += (-col.x)/4.;\n\n        //col.x /= multiplier;\n        col.x = max(uv.y+uv.x-col.x*2.,col.x*(multiplier));\n        //col.x = max(uv.y+uv.x-col.x*(2.*(2.-uv.y)-(uv.x+uv.y)/2.),col.x*(multiplier));\n        //col.x = abs(.5-col.x);\n        col = abs(col.yzx-vec3(1.-col.x))/multiplier;\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}