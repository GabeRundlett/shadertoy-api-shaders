{
    "Shader": {
        "info": {
            "date": "1722277299",
            "description": "i made a simple shader art that uses boxes and has a cool result\n\nfollowing the book of shaders has been really helpfull",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2yW1",
            "likes": 0,
            "name": "Snake Tower",
            "published": 3,
            "tags": [
                "noob",
                "box",
                "art"
            ],
            "usePreview": 0,
            "username": "spaceman",
            "viewed": 77
        },
        "renderpass": [
            {
                "code": "// Author: O.R.A N. C* O^ L* L* * I* N* S\n// Title: Snake Tower\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec2 rectcenter(vec2 pos, vec2 size){\n    vec2 st = gl_FragCoord.xy / iResolution.xy;\n    st += -pos;\n     \n    vec2 start  = step(vec2(-size) / 2.0, st);\n    vec2 end = step(-vec2(size) / 2.0, -st);\n    \n    return smoothstep(0.0, 1.0, vec2(start.x * start.y, end.x * end.y));\n}\n\nvec2 rect(vec2 pos, vec2 size){\n    vec2 st = gl_FragCoord.xy / iResolution.xy;\n    st += -pos;  \n    vec2 start = step(vec2(0.0), st);\n    vec2 end = step(-vec2(size), -st);\n    return vec2(start.x * start.y, end.x * end.y);\n}\n\nvec2 box(vec2 pos, float radius){\n    return rect(pos, vec2(radius));\n}\n\nvec2 boxcenter(vec2 pos, float radius){\n    return rectcenter(pos, vec2(radius));\n}\n\nvec3 add(vec3 a, vec3 b){\n    return a + b - 2.0 * (a * b);\n}\n\nfloat constrain(float n, float low, float high) {\n    return max(min(n, high), low);\n}\n\nfloat map(float n, float start1, float stop1, float start2, float stop2, bool withinBounds) {\n    float newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n    if (!withinBounds) {\n        return newval;\n    }\n    if (start2 < stop2) {\n        return constrain(newval, start2, stop2);\n    } else {\n        return constrain(newval, stop2, start2);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy / iResolution.xy;\n    vec3 color = vec3(0.093, 0.092, 0.095);\n\n    vec3 previous = vec3(1.0);\n    float wiggle = 0.04;\n    float animate = map(sin(iTime), -1.0, 1.0, -wiggle, wiggle * 2.0, false); \n    for(float k = 0.0; k <= 14.0; k += 1.0) {\n        for(float i = 0.0; i <= 5.0; i++) {\n            for(float j = 0.0; j < 7.0; j++) {\n                vec2 pct = boxcenter(vec2(-0.010 + animate, 0.010 + animate) * (i * 0.636) + vec2(j * 0.076 * 2.0 + 0.100, 0.060 * k + 0.052), 0.076); \n                vec3 a = smoothstep(0.284, -0.024, vec3(pct.x * pct.y));\n                color = add(color * color, a);\n            }\n        }\n    }\n    \n    vec2 z = boxcenter(vec2(.5),.3);\n    \n    vec3 test =  vec3(z.x *z.y);\n    color = add(color, test );\n     \n    fragColor = vec4(color,  .0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}