{
    "Shader": {
        "info": {
            "date": "1715801319",
            "description": "Created Conways Game of Life where every pixels color is determined by the ancestors that helped create the cell or keep it alive. Click to reset",
            "flags": 32,
            "hasliked": 0,
            "id": "McKXDK",
            "likes": 9,
            "name": "Conways ancestors",
            "published": 3,
            "tags": [
                "conway",
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "KatzenTatzenTanz",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 conway = (texture(iChannel0, uv).xyz);\n    \n    //cool color grading.wow\n    fragColor.xyz = vec3(0.2 + conway.x * 0.6 - conway.y * 0.3, 0.2 + conway.y * 0.4, 0.25 + conway.y * 0.75) + vec3(conway.z) / 20.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//https://www.shadertoy.com/view/XlXcW4\n\nconst uint k = 1103515245U;  // GLIB C\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //check cells and find average\n    vec2 avg = vec2(0);\n    int count = 0;\n    vec2 inRes = 1./iResolution.xy;\n    for(int x = -1; x <= 1; x++) {\n        for(int y = -1; y <= 1; y++) {\n            vec3 cur = texture(iChannel0, uv + vec2(x,y) * inRes).xyz;\n            bool curAlive = cur.z > 0.5;\n            bool shouldAdd = curAlive && (x != 0 || y != 0);\n            //if-less addition\n            avg += cur.xy * vec2(curAlive);\n            count += int(shouldAdd);\n        }\n    }\n    //to avoid dividing by 0 and counting self\n    bool alive = texture(iChannel0, uv).z > 0.5;\n    avg /= float(count + int(count == 0 || alive) );\n    //standard conways game of life\n    alive = (alive && count == 2) || (count == 3);\n    \n    //update cell if-less\n    fragColor = vec4(avg * vec2(alive) + texture(iChannel0, uv).xy * vec2(!alive), alive, 1);\n    \n    \n    \n    // CLEAR SETTINGS\n    \n    //execute on first frame if-less\n    bool first = iFrame == 0 || iMouse.z > 0.5;\n    bool b = hash(uvec3(fragCoord, iFrame)).x > 0.6;\n    \n    //keep alive by adding alive cells every once in a while\n    bool force = hash(uvec3(fragCoord, iFrame)).x > 0.9999;\n    b = b || force;\n    first = first || force;\n    \n    //if-less set\n    fragColor = fragColor * vec4(!first) + vec4(uv,b,1) * vec4(first);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}