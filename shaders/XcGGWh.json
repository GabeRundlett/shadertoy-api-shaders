{
    "Shader": {
        "info": {
            "date": "1712653479",
            "description": "trippy",
            "flags": 0,
            "hasliked": 0,
            "id": "XcGGWh",
            "likes": 0,
            "name": "psy02lines",
            "published": 3,
            "tags": [
                "trippy"
            ],
            "usePreview": 0,
            "username": "maxiie",
            "viewed": 104
        },
        "renderpass": [
            {
                "code": "\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nfloat trwv(float fl)\n{\n    return abs(fl-floor(fl+0.5));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ti=sin(iTime/10.)*0.1+0.;\n    float ti2=sin(iTime/3.)*0.25+0.1;\n    float ti3=sin(iTime/1.)*0.28+0.25;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy-0.5;\n\n    // Time varying pixel color\n    vec3 col = vec3(sin(pow(abs(uv.x),1.5)*ti),sin(pow(abs(uv.y),2.3)*ti2),sin(pow(length(uv*ti3+vec2(2.,1.)),8.1)));\n\n    vec3 col2 = vec3(sin(uv.x*2.*ti2),sin(uv.y*2.*ti),sin(length(uv*2.*ti3)))+vec3(0.3,0.4,0.5);\n    vec3 col3 = vec3(sin(uv.x*3.*ti3)*pow(iTime,0.71),sin(uv.y*3.*ti2)*pow(iTime,0.72),pow(iTime,0.73)*sin(length(uv*3.*ti)))+vec3(-0.2,-0.4,-0.8);\n      vec3 col4 = vec3(sin(uv.y*5.*ti)*pow(iTime,0.7),sin(uv.x*5.*ti),pow(iTime,1.27)*sin(length(uv*5.*ti2)))+vec3(0.25,0.45,0.85);\n      vec3 col5 = vec3(sin(length(uv*7.*ti))*iTime,sin(length(uv*7.*ti3))*pow(iTime,1.2),pow(iTime,1.45)*sin(length(uv*7.*ti)))+vec3(0.75,0.75,0.75);\n      vec3 col6 = vec3(sin(length(uv*7.5*ti))*pow(iTime,0.5),sin(length(uv*7.5*ti3))*pow(iTime,1.5),pow(iTime,1.53)*sin(length(uv*7.5*ti)))+vec3(1.75,2.75,3.75);\n      vec3 col7 = vec3(sin(uv.y*2.1*ti2),sin(uv.x*2.1*ti),sin(uv.x*2.1*ti))+vec3(0.3,0.4,0.5);\n       vec3 col8=vec3(noise(uv*ti),noise(uv*ti2),noise(uv*ti3));\n      \n     vec3 res=col+col2+col3+col4+col5+col6+col7+col8;\n     res=vec3(trwv(res.x),trwv(res.y),trwv(res.z));\n    // Output to screen\n    fragColor = vec4(res,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}