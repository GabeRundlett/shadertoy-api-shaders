{
    "Shader": {
        "info": {
            "date": "1655480807",
            "description": "Eisenstein Series modular forms.\n\n[url]https://en.wikipedia.org/wiki/Eisenstein_series[/url]\nDavid Lowry-Duda: [url]https://davidlowryduda.com/quanta-langlands-viz/[/url]\n@branc116: [url]https://www.shadertoy.com/view/Nsyyzh[/url]\n\nShows E4-E30. Mousable.",
            "flags": 16,
            "hasliked": 0,
            "id": "sdKczh",
            "likes": 9,
            "name": "Eisenstein Series",
            "published": 3,
            "tags": [
                "complex",
                "form",
                "modular",
                "eisensteinseries"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Eisenstein Series, Matthew Arcus, mla, 2022\n//\n// Based on original work by David Lowry-Duda:\n// https://davidlowryduda.com/quanta-langlands-viz/\n// Also inspired by (and some code based on)\n// @branc116's https://www.shadertoy.com/view/Nsyyzh\n//\n// <mouse>: apply transform to disk or plane\n// 'h': Half plane/disk\n// 'p': Show phase as color\n// 'm': Show (log) magnitude as shading\n// 'l': Show log(w) tiles\n// 'r': Show fundamental region\n// 'f': Use pullback/fold\n// 'c': Continuous coloring\n// 't': Rotate colors\n// 'e': Use texture for coloring\n//\n// A Modular Form is a complex valued function, defined on\n// the upper half plane, that is invariant (up to a certain\n// scaling factor, determined by the \"weight\" of the form) \n// under the action of the modular group (integer valued\n// Mobius transformations with unit determinant).\n//\n// The Eisenstein Series modular form of weight k is the sum of \n// 1/(nz+m)^k for all integers n,m, except 0,0. Since k >= 4,\n// and Re(z) < 0.5 in the fundamental region the sum converges\n// fairly quickly, so can be used directly to evaluate the form.\n// Some optimization of the calculation is possible, in which\n// Riemann's zeta function plays an important part (see code).\n//\n// The value of the form is shown with color indicating phase\n// and shading showing (log) magnitude. The boundary of the\n// fundamental region is also shown ('p','m' and 'r' control\n// these).\n//\n// By default the upper halfplane is shown, (press 'h' to map\n// into the unit disk). Use mouse for a Mobius transformation \n// of the disk or plane.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat zeta(int n) {\n  // Should probably use a fixed array here, eg. zeta(4) = 1.082323 etc.\n  float x = 0.0;\n  for (int j = 6; j > 1; --j) {\n    x += 1.0/pow(float(j),float(n));\n  }\n  return x+1.0;\n}\n\n// Euclid's algorithm - since this is only used for small n,m,\n// we hardly ever loop.\nbool coprime(int n, int m) {\n  while (m != 0) {\n    int t = m;\n    m = n%m;\n    n = t;\n  }\n  return n == 1;\n}\n\n// The Eisenstein series - sum 1/(nz+m)^k for all integers n,m, except 0,0\n// Since for a modular form, k is at least 4, and Re(z) <= 1/2, things\n// converge fairly quickly & for drawing pictures we can get away with n,m <= 3.\n// Based on original function by @branc116\nvec2 eisen0(vec2 z, int weight) {\n  vec2 w = complex(0);\n  int N = 3;\n  for (int i = -N; i <= N; ++i) {\n    vec2 prod = float(i)*z;\n    for (int j = -N; j <= N; ++j) {\n      if (i == 0 && j == 0) continue;\n      w += cinv(cpow(prod+complex(j), weight));\n    }\n  }\n  return w;\n}\n\n// Optimized version - since all pairs (n,m) are all pairs (tn',tm')\n// for coprime n',m' and any positive t, can sum 1/(nz+m)^k just for coprime\n// n, m, and multiply by zeta(k) = sum(1/t^k). Once we do this, various\n// simplifications of the loop bounds are also possible.\n// Note that zeta(k) is approximately 1 for integer k >= 4 and anyway\n// multiplication by a constant factor doesn't make much difference\n// to the displayed image.\nvec2 eisen(vec2 z, int k) {\n  int N = 3;\n  if (key(CHAR_Z)) N++; // Do an extra round, just to check.\n  vec2 w = complex(1); // 0,1\n  w += cinv(cpow(z,k)); // 1,0 \n  w += cinv(cpow(z+complex(1), k)); // 1,1\n  w += cinv(cpow(z-complex(1), k)); // 1,-1\n  for (int i = 1; i <= N; ++i) {\n    vec2 iz = float(i)*z;\n    for (int j = i+1; j <= N; ++j) {\n      if (!coprime(i,j)) continue;\n      vec2 jz = float(j)*z;\n      w += cinv(cpow(iz+complex(j), k));\n      w += cinv(cpow(iz-complex(j), k));\n      w += cinv(cpow(jz+complex(i), k));\n      w += cinv(cpow(jz-complex(i), k));\n    }\n  }\n  w *= 2.0*zeta(k);\n  return w;\n}\n\nvec2 act(mat2 gamma, vec2 z) {\n  // Action of Mobius transformation matrix on z.\n  float a = gamma[0][0], b = gamma[0][1];\n  float c = gamma[1][0], d = gamma[1][1];\n  return cdiv(a*z+complex(b),c*z+complex(d));\n}\n\nvec2 pullback(vec2 z, out mat2 gamma) {\n  // Returns gamma, w such that gamma(z) = w and w is\n  // (essentially) in the fundamental domain. We specify\n  // the matrices in \"row major\" form, and swap the order\n  // of multiplication (since this is GLSL).\n  gamma = mat2(1);\n  for (int i = 0; i < 40; i++) {\n    if (abs(z.x) < 0.5 && dot(z,z) > 1.0) break;\n    float xshift = -floor(z.x + 0.5);\n    mat2 shiftmatrix = mat2(1, xshift, 0, 1);\n    gamma *= shiftmatrix;\n    z = act(shiftmatrix, z);\n    if (dot(z,z) < 1.0) {\n      z = -cinv(z);\n      gamma *= mat2(0, -1, 1, 0);\n    }\n  }\n  return z;\n}\n\nfloat clength(vec2 z) {\n  // \"Careful\" length - avoid overflow for very large values\n  float t = max(abs(z.x),abs(z.y));\n  if (t <= 1e4) return length(z);\n  z /= t;\n  return t*length(z);\n}\n\nvec3 getcolor(vec2 z) {\n  if (!key(CHAR_H)) {\n    // Halfplane\n    z.y += 1.0;\n    if (iMouse.x > 0.0) {\n      vec2 c = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      z.x -= c.x;\n      z *= (c.y+1.0)/dot(z,z);\n      z.x += c.x;\n      z /= dot(z,z);\n    }\n  } else {\n    if (dot(z,z) > 1.0) return vec3(0);\n    if (iMouse.x > 0.0) {\n      vec2 c = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      if (dot(c,c) > 1.0) c /= dot(c,c);\n      z -= c;\n      z *= (dot(c,c)-1.0)/dot(z,z);\n      z += c;\n      z /= -dot(z,z);\n    }\n    z.y += 1.0;\n    z *= 2.0/dot(z,z);\n    z.y -= 1.0;\n    z /= dot(z,z);\n  }\n  mat2 gamma = mat2(1);\n  if (!key(CHAR_F)) z = pullback(z,gamma);\n  float a = gamma[0][0], b = gamma[0][1];\n  float c = gamma[1][0], d = gamma[1][1];\n  int weight = 2*(int(iTime)%14+2);\n  vec2 w = eisen(z,weight);\n  if (w == vec2(0)) return vec3(0);\n  // Apply modularity - note that gamma is inverse of mapping\n  // to fundamental region & and has unit determinant.\n  w = cmul(w,cpow(-c*z + complex(a),weight));\n  if (key(CHAR_D)) w = cmul(w,w);\n  float t = 0.0;\n  if (key(CHAR_T)) t = 0.2*iTime;\n  float h = 0.5+atan(w.y,w.x)/TWOPI;\n  if (!key(CHAR_C)) h *= 0.5; // Use limited color range\n  vec3 col = vec3(1,1,0.5);\n  if (!key(CHAR_P)) col = 0.2+0.8*h2rgb(h+t);\n  if (key(CHAR_E)) {\n    // Tile with texture\n    vec2 uv = clog(w)/PI;\n    uv += 1.0;\n    uv = mod(uv,2.0);\n    uv = min(uv,2.0-uv); // Mirroring\n    col = texture(iChannel0,uv).rgb;\n    col = pow(col,vec3(2.2));\n  }\n  if (key(CHAR_L)) {\n    vec2 uv = 4.0*clog(w)/PI;\n    float px = fwidth(uv.x);\n    uv = fract(uv);\n    uv = min(uv,1.0-uv);\n    col *= smoothstep(0.0,min(px,0.1),min(uv.x,uv.y));\n  }\n  if (!key(CHAR_M)) col *= 0.65+0.35*sin(t+4.0*log(clength(w)));\n  if (!key(CHAR_R)) {\n    //  Fundamental region borders\n    float d = abs(0.5-abs(z.x)) - 0.02;\n    d = min(d,abs(length(z)-1.0) - 0.02);\n    d = min(d,abs(z.x)-0.015);\n    float px = fwidth(d);\n    col *= 0.5+0.5*smoothstep(-px,px,d);\n  }\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  int AA = 2;\n  vec3 col = vec3(0);\n  for (int i = 0; i < AA; i++){\n      for (int j = 0; j < AA; j++) {\n        vec2 z = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n        col += getcolor(z);\n      }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) { if (!b) alert = true; }\n\nconst float PI = 3.14159265359;\nconst float TWOPI = 2.0*3.14159265359;\n\n#define complex(x) (vec2((x),0))\n\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2(z.x*w.x-z.y*w.y,z.x*w.y+z.y*w.x);\n  //return mat2(z.x,z.y,-z.y,z.x)*w; // Miscompiles on ANGLE\n}\n\nvec2 cinv(vec2 z) {\n  return vec2(z.x,-z.y)/dot(z,z);\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 cexp(vec2 z) {\n  // If cos and sin were perfect we wouldn't need normalize\n  return exp(z.x)*normalize(vec2(cos(z.y),sin(z.y)));\n}\n\nvec2 clog(vec2 z) {\n  float r2 = dot(z,z);\n  return vec2(0.5*log(r2),atan(z.y,z.x));\n}\n\nvec2 cpow(vec2 z, vec2 w) {\n  return cexp(cmul(clog(z),w));\n}\n\nvec2 cpow0(vec2 z, int n) {\n  return cpow(z,vec2(n,0));\n}\n\nvec2 cpow(vec2 z, int n) {\n  // Integer powers by repeated squaring, more\n  // for precision than for performance.\n  vec2 res = vec2(1,0);\n  vec2 t = z;\n  while (true) {\n    if ((n&1) == 1) res = cmul(t,res);\n    n >>= 1;\n    if (n == 0) break;\n    t = cmul(t,t);\n  }\n  return res;\n}\n\nvec3 h2rgb(float h) {\n  // Function by iq\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}