{
    "Shader": {
        "info": {
            "date": "1480284719",
            "description": "Julia set for a parameter moving in a Bezier interpolation between random control points. Click to use mouse position for the parameter.",
            "flags": 0,
            "hasliked": 0,
            "id": "4tdSWN",
            "likes": 3,
            "name": "Moving Julia set",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia",
                "bezier"
            ],
            "usePreview": 0,
            "username": "sheepmaster",
            "viewed": 784
        },
        "renderpass": [
            {
                "code": "#define SCALE 3.0\n\n#define TIME_INTERVAL 3.0\n\n#define SHOW_INDICATOR false\n#define INDICATOR_RADIUS 2.0\n\n#define NUM_ITERATIONS 1024\n#define ESCAPE_RADIUS 10.0\n\n#define PI 3.14159265359\n\n// https://www.shadertoy.com/view/4dS3Wd\nfloat hash(int n) {\n    return fract(sin(float(n)) * 1e4);\n}\n\nfloat bezierInterpolate(vec4 p, float t) {\n    float oneMinusT = 1.0 - t;\n    vec4 weights = vec4(\n        oneMinusT * oneMinusT * oneMinusT,\n        3.0 * t * oneMinusT * oneMinusT,\n        3.0 * t * t * oneMinusT,\n        t * t * t);\n    return dot(weights, p);\n}\n\nvec2 boxMuller(vec2 u) {\n    float r = sqrt(-2.0 * log(u.x));\n    float theta = 2.0 * PI * u.y;\n    return r * vec2(cos(theta), sin(theta));\n}\n\n// Smooth HSV to RGB conversion \n// https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2RgbSmooth(float hue, float saturation, float value) {\n    vec3 rgb = clamp(abs(mod(hue*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);\n\n\trgb = rgb*rgb*(3.0-2.0*rgb);  // Cubic smoothing\t\n\n\treturn value * mix(vec3(1.0), rgb, saturation);\n}\n\nfloat arg(vec2 z) {\n    return atan(z.y, z.x) / (2.0 * PI);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float scalingFactor = min(iResolution.x, iResolution.y) / SCALE;\n\tvec2 scaledCoord = (fragCoord.xy - iResolution.xy / 2.0) / scalingFactor;\n    \n    vec2 pos;\n    if (iMouse.z + iMouse.w > 0.0) {\n        pos = (iMouse.xy - iResolution.xy / 2.0) / scalingFactor;\n    } else {\n        int timeStep = int(iTime / TIME_INTERVAL);\n        float timeRel = fract(iTime / TIME_INTERVAL);\n\n        vec2 pos1 = vec2(hash(4 * timeStep), hash(4 * timeStep + 1)) * 2.0 - vec2(1.0);\n        vec2 dir1 = boxMuller(vec2(hash(4 * timeStep + 2), hash(4 * timeStep + 3)));\n        vec2 pos2 = vec2(hash(4 * timeStep + 4), hash(4 * timeStep + 5)) * 2.0 - vec2(1.0);\n        vec2 dir2 = boxMuller(vec2(hash(4 * timeStep + 6), hash(4 * timeStep + 7)));\n\n        pos = vec2(\n            bezierInterpolate(vec4(pos1.x, pos1.x + dir1.x, pos2.x - dir2.x, pos2.x), timeRel),\n            bezierInterpolate(vec4(pos1.y, pos1.y + dir1.y, pos2.y - dir2.y, pos2.y), timeRel));\n\n        vec2 dist = scaledCoord - pos;\n        if (SHOW_INDICATOR && (distance(scaledCoord, pos) < INDICATOR_RADIUS / scalingFactor)) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            return;\n        }\n    }\n    \n    // Iterate\n    vec2 z = scaledCoord;\n    vec2 dz = vec2(0.0);\n\tfloat d = 0.0;\n    for(int i = 0; i < NUM_ITERATIONS; i++) {\n        if(length(z) > ESCAPE_RADIUS) {\n        \t// distance\t\n\t\t\t// d(c) = |Z|·log|Z|/|Z'|\n            d = 0.5 * sqrt(dot(z,z)/dot(dz,dz)) * log(dot(z,z));\n\n            // do some soft coloring based on distance\n            d = clamp(8.0 * d, 0.0, 1.0);\n            d = 1.0 - pow(d, 0.5);\n            break;\n        }\n        \n\t\t// Z' -> 2·Z·Z' + 1\n        dz = 2.0 * vec2(z.x * dz.x - z.y * dz.y, z.x * dz.y + z.y * dz.x) + vec2(1.0, 0.0);\n\t\t\t\n        // Z -> Z² + c\t\t\t\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + pos;\t\n    }\n\n    float hue = arg(scaledCoord) - arg(pos); \n    float sat = min(length(scaledCoord) * 5.0, 1.0);\n    vec3 col = hsv2RgbSmooth(hue, sat, d);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}