{
    "Shader": {
        "info": {
            "date": "1528378027",
            "description": "Couldn't come up with a better name. A visual verification I got this right. Smoothing using continuous weighted average / lerp. Mouse changes delta step. See comments for more info.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsVfDz",
            "likes": 8,
            "name": "Corrected geometric ratio",
            "published": 3,
            "tags": [
                "graph",
                "geometric",
                "smoothing",
                "weightedaverage"
            ],
            "usePreview": 0,
            "username": "grinist",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "// Let's say you want to smooth a continuously changing value temporally using weighted average,\n// such as user input, camera target position etc., and you'd do something like:\n// currValue = lerp(currValue, targetValue, 0.3);\n// You are doing this every frame and you've found a nice lerp factor for your frame rate.\n// Now, perhaps you need to change your target frame / physics rate and you notice the factor\n// you're using no longer gives the same smoothing.\n// Your lerps basically make a geometric series, although the target value can change every frame.\n// geometricRatio returns a corrected ratio for lerping with your new timestep,\n// referenceRatio is assumed to work correctly on the reference timestep.\n\n#define REFRATIO 0.5\n#define REFDELTA 0.2\n\nfloat geometricRatio(float referenceRatio, float referenceDt, float targetDt)\n{\n\treturn 1.0 - pow(1.0 - referenceRatio, targetDt / referenceDt);\n}\n\n// ----- The rest is just for demo\n\nfloat geometricCurve(float x, float ratio, float delta)\n{\n    x = max(x, 0.0);\n\n    float xSteps = x / delta;\n    \n    int left = int(floor(xSteps));\n    int right = int(ceil(xSteps));\n    float fr = fract(xSteps);\n    \n    // A series of lerps, start value = 0, target value = 1\n    float l = 0.0;\n    float r = 0.0;\n    for (int i = 0; i < right; i++)\n    {\n        l = r;\n        r = mix(r, 1.0, ratio);\n    }\n    l = (left == right) ? r : l;\n    \n    return mix(l, r, fr);\n}\n\nvec2 xy;\t\t// current graph coords\nvec2 dxy; \t\t// pixel size in graph units\nvec4 fColor;\t// current fragment color\n\nvoid mixColor(vec4 color, float alpha)\n{\n    fColor = vec4(mix(fColor.rgb, color.rgb, alpha * color.a), 1.0);\n}\n\nvoid drawGrid(float stepSize, vec4 gridCol)\n{\n\tfloat mul = 1.0 / stepSize;\n\tvec2 g = abs(vec2(-0.5) + fract((xy + vec2(stepSize) * 0.5) * mul)); // g passes 0 at stepSize intervals\n\tg = vec2(1.0) - smoothstep(vec2(0.0), dxy * mul * 1.5, g);\n    mixColor(gridCol, max(g.x, g.y));\n}\n\nvoid drawCurve(float value, vec4 curveCol)\n{\n\t// Using y distance to curve, modifying distance threshold with approximated slope\n    // Derivative breaks with drastic changes of value and discontinuities, but so be it\n    float yDist = abs(value - xy.y);\n    float dValue = abs(dFdx(value));\n\tfloat c = 1.0 - smoothstep(0.0, (dxy.y + dValue) * 2.0, yDist);\n\tmixColor(curveCol, c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // graph setup\n\tfloat aspect = iResolution.x / iResolution.y;\n\tvec2 graphSize = vec2(aspect * 1.2, 1.2);\n\tvec2 graphPos = 0.5 - graphSize * 0.5;\n\n\txy = graphPos + uv * graphSize;\t// graph coords\n\tdxy = graphSize / iResolution.xy;\t// pixel size in graph units\n\n    // new delta value\n    float auto = 0.51 + sin(iTime * 0.5) * 0.49;\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = graphPos + mouse * graphSize;\n    float newDelta = iMouse.z <= 0.0 ? auto : (mouse.x);\n    newDelta = max(0.02, newDelta);\n    \n    // background\n\tfColor = mix(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.7, 0.7, 0.7, 1.0), pow(length(0.5 - uv) * 1.414, 3.5));\n    \n\t// grid\n    drawGrid(0.1, vec4(0.0, 0.0, 0.0, 0.2));\n\tdrawGrid(0.5, vec4(0.0, 0.0, 0.0, 0.3));\n\tdrawGrid(1.0, vec4(0.0, 0.0, 0.0, 0.4));\n\n    // curves\n    drawCurve(geometricCurve(xy.x, REFRATIO, REFDELTA), vec4(0.91, 0.13, 0.23, 0.5));\n    float newRatio = geometricRatio(REFRATIO, REFDELTA, newDelta);\n    drawCurve(geometricCurve(xy.x, newRatio, newDelta), vec4(0.15, 0.45, 0.85, 0.8));\n\n\tfragColor = fColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}