{
    "Shader": {
        "info": {
            "date": "1710283216",
            "description": "beautiful cubic transformation of the vectors",
            "flags": 0,
            "hasliked": 0,
            "id": "lX2Xz1",
            "likes": 2,
            "name": "HyperYantra",
            "published": 3,
            "tags": [
                "rainbow"
            ],
            "usePreview": 0,
            "username": "anthromni",
            "viewed": 83
        },
        "renderpass": [
            {
                "code": "vec3 interpolateColor(float interpolationParameter, vec3 colorA, vec3 colorB, vec3 colorC, vec3 colorD) {\n    return colorA + colorB * cos(6.28318 * (colorC * interpolationParameter + colorD));\n}\n\nvoid mainImage(out vec4 fragmentColor, in vec2 fragmentCoordinates) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 normalizedTextureCoordinates = (fragmentCoordinates * 2.0 - iResolution.xy) / iResolution.y;\n    float distanceFromOriginBeforeTransformation = length(normalizedTextureCoordinates);\n    vec3 finalColor = vec3(0.0);\n    float iterator = 0.0;\n    \n    for(iterator = 0.0; iterator < 5.0; iterator++) {\n        // Apply spinning and evolving spatial transformations\n        float angle = iTime * 0.5 + iterator * 0.2;\n        float sinAngle = sin(angle);\n        float cosAngle = cos(angle);\n        mat2 rotationMatrix = mat2(cosAngle, -sinAngle, sinAngle, cosAngle);\n        normalizedTextureCoordinates = rotationMatrix * normalizedTextureCoordinates;\n        \n        // Add repetitions with fract()\n        normalizedTextureCoordinates = fract(normalizedTextureCoordinates * (1.5 + sin(iTime * 0.3) * 0.5)) - 0.5;\n        \n        float distanceFromOrigin = length(normalizedTextureCoordinates);\n        vec3 interpolatedColors = interpolateColor(distanceFromOriginBeforeTransformation + iterator * 0.1 + iTime * 0.5,\n            vec3(0.764, 0.508, 0.479),\n            vec3(0.630, 0.615, 0.608),\n            vec3(1.203, 1.459, 0.993),\n            vec3(1.974, 3.863, 2.899));\n        distanceFromOrigin = tan(distanceFromOrigin * 4.0 - iTime) / 4.0;\n        distanceFromOrigin = 0.002 / distanceFromOrigin;\n        distanceFromOrigin = smoothstep(0.0, 0.1, distanceFromOrigin);\n        finalColor += interpolatedColors * distanceFromOrigin;\n    }\n    \n    // Output to screen\n    fragmentColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}