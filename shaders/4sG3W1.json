{
    "Shader": {
        "info": {
            "date": "1454173567",
            "description": "learning something from that tutorial:\nhttp://www.raywenderlich.com/70208/opengl-es-pixel-shaders-tutorial",
            "flags": 0,
            "hasliked": 0,
            "id": "4sG3W1",
            "likes": 4,
            "name": "learning how to sphere",
            "published": 3,
            "tags": [
                "shadow",
                "sphere"
            ],
            "usePreview": 0,
            "username": "capitanNeptune",
            "viewed": 697
        },
        "renderpass": [
            {
                "code": "// http://www.raywenderlich.com/70208/opengl-es-pixel-shaders-tutorial\n// all noise from iq\n\n#define time iTime*0.5\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,128.852))) * 43758.5453)*2.0-1.0;\n}\n\nfloat simplex3D(vec3 p)\n{\n\t\n\tfloat f3 = 1.0/3.0;\n\tfloat s = (p.x+p.y+p.z)*f3;\n\tint i = int(floor(p.x+s));\n\tint j = int(floor(p.y+s));\n\tint k = int(floor(p.z+s));\n\t\n\tfloat g3 = 1.0/6.0;\n\tfloat t = float((i+j+k))*g3;\n\tfloat x0 = float(i)-t;\n\tfloat y0 = float(j)-t;\n\tfloat z0 = float(k)-t;\n\tx0 = p.x-x0;\n\ty0 = p.y-y0;\n\tz0 = p.z-z0;\n\t\n\tint i1,j1,k1;\n\tint i2,j2,k2;\n\t\n\tif(x0>=y0)\n\t{\n\t\tif\t\t(y0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order\n\t\telse if\t(x0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order\n\t\telse \t\t\t{ i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; } // Z X Z order\n\t}\n\telse \n\t{ \n\t\tif\t\t(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order\n\t\telse if\t(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order\n\t\telse \t\t\t{ i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order\n\t}\n\t\n\tfloat x1 = x0 - float(i1) + g3; \n\tfloat y1 = y0 - float(j1) + g3;\n\tfloat z1 = z0 - float(k1) + g3;\n\tfloat x2 = x0 - float(i2) + 2.0*g3; \n\tfloat y2 = y0 - float(j2) + 2.0*g3;\n\tfloat z2 = z0 - float(k2) + 2.0*g3;\n\tfloat x3 = x0 - 1.0 + 3.0*g3; \n\tfloat y3 = y0 - 1.0 + 3.0*g3;\n\tfloat z3 = z0 - 1.0 + 3.0*g3;\t\n\t\t\t\t \n\tvec3 ijk0 = vec3(i,j,k);\n\tvec3 ijk1 = vec3(i+i1,j+j1,k+k1);\t\n\tvec3 ijk2 = vec3(i+i2,j+j2,k+k2);\n\tvec3 ijk3 = vec3(i+1,j+1,k+1);\t\n            \n\tvec3 gr0 = normalize(vec3(noise3D(ijk0),noise3D(ijk0*2.01),noise3D(ijk0*2.02)));\n\tvec3 gr1 = normalize(vec3(noise3D(ijk1),noise3D(ijk1*2.01),noise3D(ijk1*2.02)));\n\tvec3 gr2 = normalize(vec3(noise3D(ijk2),noise3D(ijk2*2.01),noise3D(ijk2*2.02)));\n\tvec3 gr3 = normalize(vec3(noise3D(ijk3),noise3D(ijk3*2.01),noise3D(ijk3*2.02)));\n\t\n\tfloat n0 = 0.0;\n\tfloat n1 = 0.0;\n\tfloat n2 = 0.0;\n\tfloat n3 = 0.0;\n\n\tfloat t0 = 0.5 - x0*x0 - y0*y0 - z0*z0;\n\tif(t0>=0.0)\n\t{\n\t\tt0*=t0;\n\t\tn0 = t0 * t0 * dot(gr0, vec3(x0, y0, z0));\n\t}\n\tfloat t1 = 0.5 - x1*x1 - y1*y1 - z1*z1;\n\tif(t1>=0.0)\n\t{\n\t\tt1*=t1;\n\t\tn1 = t1 * t1 * dot(gr1, vec3(x1, y1, z1));\n\t}\n\tfloat t2 = 0.5 - x2*x2 - y2*y2 - z2*z2;\n\tif(t2>=0.0)\n\t{\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * dot(gr2, vec3(x2, y2, z2));\n\t}\n\tfloat t3 = 0.5 - x3*x3 - y3*y3 - z3*z3;\n\tif(t3>=0.0)\n\t{\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * dot(gr3, vec3(x3, y3, z3));\n\t}\n\treturn 96.0*(n0+n1+n2+n3);\n\t\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f;\n    f  = 0.50000*(simplex3D( p )); p = p*2.01;\n    f += 0.25000*(simplex3D( p )); p = p*2.02;\n    f += 0.12500*(simplex3D( p )); p = p*2.03;\n    f += 0.06250*(simplex3D( p )); p = p*2.04;\n    f += 0.03125*(simplex3D( p )); p = p*2.05;\n    f += 0.015625*(simplex3D( p ));\n\treturn f;\n}\n\nvec3 planet(float radius, vec2 center, vec2 position, vec3 cLight)\n{\n    float mx = iMouse.x/iResolution.x;\n    float my = iMouse.y/iResolution.y;\n    \n    float z = sqrt(radius*radius - position.x*position.x - position.y*position.y);\n\tvec3 normal = normalize(vec3(position.x, position.y, z)); // for visualize->(normal+1.)/2.\n    float diffuse = max(0.,dot(normal, cLight));\n    \n    // texture\n    float noise = fbm(vec3(normal.x,normal.y, normal.z+mx))*0.5+0.5;\n    vec3 color = (noise<my)?vec3(0.2, 0.2, 0.8):vec3(0.2, 0.5, 0.2);\n    //color *= (z/radius);\n    vec3 result = vec3(diffuse * color);\n    return result;\n}\n\nvec3 atmos(float radius, vec2 center, vec2 position, vec3 cLight)\n{\n    radius *= 1.08;\n    float center_opacity = 150.;\n    float atmos_strenght = 5.5;\n    \n    float z = sqrt(radius*radius - position.x*position.x - position.y*position.y);\n\tvec3 normal = normalize(vec3(position.x, position.y, z));\n    \n    float diffuse = max(.0,(dot(normal*100.0, cLight)));\n    //z /= radius;\n    z /= radius*100.0;\n    \n    vec3 color = vec3(1.0)-(vec3(1.0, 1.0, 1.0)*z*center_opacity);  // white atmos\n    color*=vec3(0.0, 0.7, 0.93)*z*atmos_strenght;\t\t\t\t\t// colorize atmos\n    \n    vec3 result = vec3(diffuse * color);\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float mx = iMouse.x/iResolution.x;\n    float my = iMouse.y/iResolution.y;\n    \n    // SPHERE\n    vec2 center = iResolution.xy/2.0;\n    float radius = iResolution.y/3.0;\n    vec2 position = gl_FragCoord.xy - center;\n    \n    // light\n    vec3 cLight = normalize(vec3(sin(time), .0, cos(time)));\n    \n    // ATMOSPHERE\n    float at_radius = 30.0;\n    \n    vec3 planet_color = planet(radius, center, position, cLight);\n    vec3 atmos_color = atmos(radius, center, position, cLight);\n    \n\tif(length(position) < radius)\n    {\n    \tfragColor = vec4(planet_color, 1.);\n    }\n    else\n    {\n        fragColor = vec4(atmos_color, 1.);\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}