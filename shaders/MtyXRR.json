{
    "Shader": {
        "info": {
            "date": "1482424598",
            "description": "Ray marching test with hard shadows. Non optimized.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtyXRR",
            "likes": 1,
            "name": "Ray marching cube and ball",
            "published": 3,
            "tags": [
                "raymarchingcubeandball"
            ],
            "usePreview": 0,
            "username": "morph",
            "viewed": 837
        },
        "renderpass": [
            {
                "code": "const int MAX_ITER = 64;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.001;\n\nfloat box(vec3 p,vec3 b,float r) {\n    return length(max(abs(p)-b,0.0))-r;\t\n}\n\nfloat plane(vec3 p) {\n\treturn -p.y+2.0;\n}\n\nfloat sphere(vec3 p,float radius) {\n\treturn length(p+vec3(3.0,0.0,0.0))-radius;\n}\n\nvec2 scene(vec3 p) {\n    float d,d1,d2,d3;\n    \n    vec2 r;\n    \n    d1=box(p,vec3(1.0,1.0,1.0),.5);\n    d2=plane(p);\n    d3=sphere(p,1.0);\n    \n    d=min(d1,min(d2,d3));\n    \n    return d==d1?vec2(d1,1.0):d==d2?vec2(d2,2.0):vec2(d3,3.0);\n}\n\nvec2 trace(vec3 o, vec3 r) {\n\tfloat t = 0.0;\n    vec2 s;\n    for(int i=0; i<MAX_ITER; ++i) {       \n    \tvec3 p = o + r*t;\n        s = scene(p);\n        float d = s.x;\n        t += d*0.5;\n        \n\t\tif (d < EPSILON || t > MAX_DIST)\n        \tbreak;\n    }\n    return vec2(t,s.y);\n}\n\nfloat mat(vec2 p) {\n    float x=floor(p.x/2.0);\n    float y=floor(p.y/2.0);\n    float xx=x-(floor(x/2.0)*2.0);\n    float yy=y-(floor(y/2.0)*2.0);                 \n\tif(yy!=0.0) {\n        if( xx>0.0 ) {\n            return 1.0;\n        }\n\t}\n    else {\n        if( xx==0.0 ) {\n            return 1.0;\n        }\n    }\n\treturn 0.0;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 eps = vec2(0.0, EPSILON);\n    vec3 normal = normalize(vec3(\n        scene(p + eps.yxx).x - scene(p - eps.yxx).x,\n        scene(p + eps.xyx).x - scene(p - eps.xyx).x,\n        scene(p + eps.xxy).x - scene(p - eps.xxy).x));\n    return normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 c = vec3(0.0, -2.0, -4.0);\n  \n    float ca=iTime*0.5;\n    vec3 cameraOrigin = vec3(\n                                c.z*sin(ca)+c.x*cos(ca),\n                                c.y,\n                                c.z*cos(ca)-c.x*sin(ca)\n                            );\n    \n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 upDirection = vec3(0.0, 1.0, 0.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n    vec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n\tvec3 cameraUp = cross(cameraDir, cameraRight);   \n    \n    uv = uv * 2.0 - 1.0;\n\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rayDir = normalize(cameraRight * uv.x + cameraUp * uv.y + cameraDir);\n    \n    vec3 o = cameraOrigin;\n    vec3 r = rayDir;\n        \n    vec2 t = trace(o,r);    \n    vec3 p = o+r*t.x;\n\n    vec3 l = vec3(10.0, -10.0, -10.0); \n    float la=iTime*0.2;\n    vec3 lightPos =  vec3(\n                            l.z*sin(la)+l.x*cos(la),\n                            l.y,\n                            l.z*cos(la)-l.x*sin(la)\n                         );\n    vec3 lightDir = normalize(p-lightPos);\n    \n\tvec3 normal = getNormal(p);\n\tfloat diffuse = max(0.0, dot(-lightDir, normal));\n    float specular = pow(diffuse, 32.0);\n\n\tvec3 color=vec3(diffuse+specular);\n    if( t.y==1.0 ) {\n    \tcolor=vec3(diffuse+specular,0.0,0.0);\n    }\n    if( t.y==2.0 ) {\n    \tcolor=vec3(diffuse+specular);\n    }\n    if( t.y==3.0 ) {\n    \tcolor=vec3(0.0,0.0,diffuse+specular);\n    }    \n    color *= diffuse+specular;\n    \n    vec2 shd = trace(lightPos,lightDir);\n    float odl=length(lightPos-p);\n    if( shd.y!=t.y ) {\n        if( (shd.x+0.1)<odl && odl<30.0 ) {\n            color = color-0.2;\n        }\n    }\n    if( t.y==2.0 ) {\n\t\tcolor = color-mat(p.xz)*0.5;\n    }\n    fragColor = vec4(color, 1.0);   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}