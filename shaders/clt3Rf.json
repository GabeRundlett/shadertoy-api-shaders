{
    "Shader": {
        "info": {
            "date": "1683983499",
            "description": "test",
            "flags": 48,
            "hasliked": 0,
            "id": "clt3Rf",
            "likes": 8,
            "name": "Stable fluid for water",
            "published": 3,
            "tags": [
                "2d",
                "fluid",
                "navier",
                "stokes"
            ],
            "usePreview": 0,
            "username": "ddinhddoong",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "void scale(inout vec2 p, float ratio, vec2 origin)\n{\n    p-= origin;\n    p/= ratio;\n    p+= origin;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    if(KEY_S > 0.) scale(fragCoord, iResolution.y*0.005, iMouse.xy);\n    \n    vec4 o = T(fragCoord);\n    //fragColor = vec4(abs(c.xy)*1.0f, abs(c.z)*100.0f, c.w);\n    \n    vec4 color = vec4(.2, .8, 1, 1)*.5;\n    fragColor = color*o.w;\n    fragColor += length(o.xy)*0.05;\n    fragColor -= o.z*0.005;\n    \n    if(isObstacle(fragCoord, iResolution.xy)) fragColor = mix(vec4(.3,.2,.1,1.), fragColor, 0.25);;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// advection & boundary & control\nint id(int i, int j){\n    return (i+1) + 3*(j+1);\n}\n\n// Runge-Kutta 4 backward advection\nvec2 RK4(vec2 p){\n    vec2 k1 = T(p).xy;\n    vec2 k2 = T(p - 0.5 * k1).xy;\n    vec2 k3 = T(p - 0.5 * k2).xy;\n    vec2 k4 = T(p - k3).xy;\n    return (0.5 * k1 + k2 + k3 + 0.5 * k4) / 3.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 n = T(fragCoord + vec2(0, 1));\n    vec4 e = T(fragCoord + vec2(1, 0));\n    vec4 s = T(fragCoord + vec2(0, -1));\n    vec4 w = T(fragCoord + vec2(-1, 0));\n    \n    // advection\n    fragColor = T(fragCoord);\n    //vec2 prePos = fragCoord - fragColor.xy * dt;\n    vec2 prePos = fragCoord - RK4(fragCoord) * dt;\n    //fragColor.xyw = bilerp(iChannel0, prePos, iResolution.xy).xyw;\n    fragColor.xyw = T(prePos).xyw;\n    \n    //vorticity\n    /*\n    float vor[9];\n    for(int i = -1; i < 2; i++)\n    for(int j = -1; j < 2; j++)\n    if(i*j == 0){\n        vec2 cc = fragCoord + vec2(i, j);\n        float   nn = T(cc + vec2(0, 1)).x,\n                ee = T(cc + vec2(1, 0)).y,\n                ss = T(cc + vec2(0, -1)).x,\n                ww = T(cc + vec2(-1, 0)).y;\n        vor[id(i, j)] = (ee - ww - nn + ss)*0.5;\n    }\n    \n    vec2 force = vec2(0.5);\n    force.x *= abs(vor[id(0, 1)]) - abs(vor[id(0, -1)]);\n    force.y *= abs(vor[id(1, 0)]) - abs(vor[id(-1, 0)]);\n    force = normalize(force + 0.0001) * vor[id(0, 0)] * curl;\n    force.y *= -1.;\n     \n    fragColor.xy += force*dt;\n    //*/\n    \n     //gravity\n    vec2 dir = (KEY_G > 0.)? vec2(0, -1) : normalize(iResolution.xy/2. - fragCoord);\n    fragColor.xy += dir * g * fragColor.w;\n    \n    //water's behavior\n    fragColor.w = smoothstep(0.0, 1.0, fragColor.w);\n    fragColor.z *= fragColor.w;\n    //*/\n    // interaction\n    if(length(iMouse.xy - fragCoord.xy) < 30. && iMouse.z > 1.)\n    {\n        fragColor.w = 1.0;\n    }\n    //*\n    if(length(fragCoord - iResolution.xy/1.2)<20. && iTime < 10.) {\n        fragColor.x = -3. + sin(iTime*1.)/10.;\n        fragColor.w = 1.;\n    }\n    if(length(fragCoord - vec2(iResolution.x*0.2, iResolution.y/1.2))<20. && iTime < 10.) {\n        fragColor.x = 3. + sin(iTime*1.)/20.;\n        fragColor.w = 1.;\n    }//*/\n    /*\n    if(iFrame < 1  && fragCoord.x < iResolution.x/2. && fragCoord.y < iResolution.y/1.2){\n        fragColor.w = 1.;\n    }\n    //*/\n\n    if(isObstacle(fragCoord, iResolution.xy)){\n        fragColor.xy *= 0.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texture(iChannel0, (U)/iResolution.xy)\n#define KEY_G round(texelFetch(iChannel3, ivec2(71,2) , 0 ).x)\n#define KEY_S round(texelFetch(iChannel3, ivec2(83,0) , 0 ).x)\n\nconst float dt = 1.0;\nconst float dx = 1.0;\nconst float halfrdx = 0.5 / dx;\nconst float ov = 1.9;\nconst float g = 0.1;\nconst float curl = 0.1;\n\nfloat jacobi(float e, float w, float n, float s, float alpha, float bC, float rBeta){\n    return (e + w + n + s + alpha * bC) * rBeta;\n}\n\nvec4 bilerp(sampler2D tex, vec2 pos, vec2 size){\n    vec2 i = floor(pos);\n    vec2 j = fract(pos);\n    vec4 x1 = texture(tex, (i)/size),\n         x2 = texture(tex, (i + vec2(1,0))/size),\n         y1 = texture(tex, (i + vec2(0,1))/size),\n         y2 = texture(tex, (i + vec2(1,1))/size);\n         \n    vec4 z1 = mix(x1, x2, j.x);\n    vec4 z2 = mix(y1, y2, j.x);\n    return mix(z1, z2, j.y); \n}\n\nbool isObstacle(vec2 fragCoord, vec2 size){\n    //land\n    float ratio = size.y/100.;\n    float nScale = 3. * ratio;\n    float noise = 10. *ratio *(cos(fragCoord.x/nScale) * sin(fragCoord.y/nScale));\n    bool land = length(fragCoord - size/2.) + noise < size.y/4.;\n    //wall\n    bool wall = fragCoord.x < 1. || fragCoord.y < 1. || fragCoord.x > size.x-1. || fragCoord.y > size.y-1.;\n    \n    return  wall || land;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// pressure poisson\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 n = T(fragCoord + vec2(0, 1));\n    vec4 e = T(fragCoord + vec2(1, 0));\n    vec4 s = T(fragCoord + vec2(0, -1));\n    vec4 w = T(fragCoord + vec2(-1, 0));\n    fragColor = T(fragCoord);\n    \n    // divergence of the velocity\n    float div = (e.x - w.x + n.y - s.y) * halfrdx * ov;\n    \n    //jacobi(float e, float w, float n, float s, float alpha, float bC, float rBeta)\n    fragColor.z = jacobi(e.z, w.z, n.z, s.z, -dx*dx, div, 0.25);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// pressure poisson\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 n = T(fragCoord + vec2(0, 1));\n    vec4 e = T(fragCoord + vec2(1, 0));\n    vec4 s = T(fragCoord + vec2(0, -1));\n    vec4 w = T(fragCoord + vec2(-1, 0));\n    fragColor = T(fragCoord);\n    \n    // divergence of the velocity\n    float div = (e.x - w.x + n.y - s.y) * halfrdx * ov;\n    \n    //jacobi(float e, float w, float n, float s, float alpha, float bC, float rBeta)\n    fragColor.z = jacobi(e.z, w.z, n.z, s.z, -dx*dx, div, 0.25);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// projection\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 n = T(fragCoord + vec2(0, 1));\n    vec4 e = T(fragCoord + vec2(1, 0));\n    vec4 s = T(fragCoord + vec2(0, -1));\n    vec4 w = T(fragCoord + vec2(-1, 0));\n    fragColor = T(fragCoord);\n    \n    // gradient of the pressure\n    vec2 grad = vec2( e.z - w.z, n.z - s.z ) * halfrdx;\n\n    // project\n    fragColor.xy -= grad;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}