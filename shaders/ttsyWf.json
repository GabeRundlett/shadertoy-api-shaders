{
    "Shader": {
        "info": {
            "date": "1593337874",
            "description": "Inside and outside views of the quaternion Julia set for f(q) = q^3 + c",
            "flags": 0,
            "hasliked": 0,
            "id": "ttsyWf",
            "likes": 16,
            "name": "Juliabrot Tomography",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "quaternion"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 576
        },
        "renderpass": [
            {
                "code": "// \"Juliabrot Tomography\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Inside and outside views of the quaternion Julia set for f(q) = q^3 + c\n Mousing recommended\n Based on \"Fractal Tomography\", with fractal from iq's \"Julia - Quaternion 3\"\n*/\n\n#define AA   0  // optional antialiasing\n\nfloat Maxv3 (vec3 p);\nfloat Minv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\n\nvec3 ltDir, slBox, slPos;\nfloat dstFar, tCur, nHit;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec4 QtSqr (vec4 q)\n{\n  return vec4 (2. * q.w * q.xyz, q.w * q.w - dot (q.xyz, q.xyz));\n}\n\nvec4 QtCub (vec4 q)\n{\n  float b;\n  b = dot (q.xyz, q.xyz);\n  return vec4 (q.xyz * (3. * q.w * q.w - b), q.w * (q.w * q.w - 3. * b));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 q, qq, c;\n  vec2 b;\n  float s, ss, ot;\n  q = vec4 (p, 0.).yzwx;\n  c = vec4 (0.2727, 0.6818, -0.2727, -0.0909);\n  b = vec2 (0.45, 0.55);\n  s = 0.;\n  ss = 1.;\n  ot = 100.;\n  nHit = 0.;\n  for (int j = VAR_ZERO; j < 256; j ++) {\n    ++ nHit;\n    qq = QtSqr (q);\n    ss *= 9. * dot (qq, qq);\n    q = QtCub (q) + c;\n    ot = min (ot, length (q.wy - b) - 0.1);\n    s = dot (q, q);\n    if (s > 32.) break;\n  }\n  return min (ot, max (0.25 * log (s) * sqrt (s / ss) - 0.001, 0.));\n}\n\nvec2 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  dMin = dstFar;\n  if (df > 0. && dn < df) dMin = dn;\n  return vec2 (dMin, df);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec2 d2;\n  float dHit, h;\n  d2 = BlkHit (ro - slPos, rd, slBox);\n  dHit = d2.x;\n  if (dHit < dstFar) {\n    for (int j = VAR_ZERO; j < 1024; j ++) {\n      h = ObjDf (ro + dHit * rd);\n      dHit += min (h, 0.005);\n      if (h < 0.0002 || dHit > d2.y) break;\n    }\n  }\n  if (dHit > d2.y) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ColFun ()\n{\n  return (0.6 + 0.4 * cos (log2 (nHit) + 0.1 * tCur + pi * vec3 (0., 0.33, 0.66))) *\n     mix (vec3 (0.6, 0.6, 0.3), vec3 (1.), smoothstep (5., 10., nHit));\n}\n\nvec3 Illum (vec3 col, vec3 rd, vec3 vn)\n{\n  return col * (0.1 + 0.1 * max (- dot (vn, ltDir), 0.) + 0.7 * max (dot (vn, ltDir), 0.) +\n     0.2 * vec3 (1., 1., 0.5) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colT;\n  float dstObj, dstObjT, c, t;\n  slBox = vec3 (2., 0.03, 2.);\n  t = 50. * mod (0.02 * tCur, 1.);\n  t = (1./50.) * (floor (t) + smoothstep (0.9, 1., mod (t, 1.)));\n  slPos = vec3 (0., 0.5 - SmoothBump (0.25, 0.75, 0.25, t), 0.);\n  dstObj = ObjRay (ro, rd);\n  col = (dstObj < dstFar && nHit > 1.) ? Illum (2. * ColFun (), rd, ObjNf (ro + dstObj * rd)) :\n     vec3 (0.);\n  c = length (col);\n  if (c == 0.) dstObj = dstFar;\n  slBox = vec3 (2.);\n  slPos = vec3 (0.);\n  dstObjT = ObjRay (ro, rd);\n  if (dstObjT < min (dstObj, dstFar) && nHit > 1.) {\n    colT = Illum (0.5 + 1.5 * ColFun (), rd, ObjNf (ro + dstObjT * rd));\n    col = (c > 0.) ? mix (col, colT, 0.25) : 0.4 * colT;\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    t = floor (tCur / 7.) + smoothstep (0.9, 1., mod (tCur / 7., 1.));\n    az -= 0.22 * pi * t;\n    el -= 0.12 * pi * sin (0.02 * pi * t);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -6.);\n  zmFac = 5.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  dstFar = 10.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}