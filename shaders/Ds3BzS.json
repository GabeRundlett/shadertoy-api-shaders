{
    "Shader": {
        "info": {
            "date": "1697564382",
            "description": "Triplanar mapping version that uses a single sample with the help of dithering. This shader includes normal mapping using tangent space matrixes. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds3BzS",
            "likes": 7,
            "name": "Uniplanar with Normals (Dither)",
            "published": 3,
            "tags": [
                "3d",
                "texture",
                "triplanar",
                "uv",
                "normal",
                "mapping",
                "tbn"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nThis is a small demonstration of how to implement uniplanar mapping with accurate \nnormals. This is a variation of standard triplanar mapping that uses dithering to\nonly require one sample. This effect looks virtually identical to triplanar mapping,\nespecially when temporal anti-aliasing is also used, while being ~3x faster.\n\nSeveral global constants are defined below to enable debug views of the\nmapping, as well as mouse controls for navigation.\n\nThis method was introduced by Far Cry 5:\nhttps://www.gdcvault.com/play/1025480/Terrain-Rendering-in-Far-Cry\n\nSee here how the same shader looks with triplanar mapping: \nhttps://www.shadertoy.com/view/mdcBz8\n*/\n\n// The number of previous samples looked at to blur result, with a similar effect to\n// Temporal Anti-Aliasing (TAA) which you should use instead if you can.\n#define TEMPORALBLUR 8 \n\n// A value of 1 means no contrast, higher values increase contrast\n#define CONTRAST 16.0\n\n// This visualizes the blend region between the two cubemappings\n// Green, Red and Blue represent the lower bounds of the weights\n//#define SHOWGRID\n#define LINETHICKNESS 0.01\n\n// Valve edition (slightly modified to be a true 12 dither)\n// http://alex.vlachos.com/graphics/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf\n// Input in pixels (i.e., not normalized UV)\nfloat ScreenSpaceDither12(vec2 vScreenPos, float time)\n{\n    float vDither = dot( vec2( 171.0, 231.0 ), vScreenPos.xy + time); \n    return fract( vDither / 103.0);\n}\n\n// Structure to hold material properties\nstruct materialValues {\n    vec3 color;\n    vec3 normal;\n};\n\n// Uniplanar mapping\nmaterialValues uniplanar(sampler2D tex, vec3 normal, vec2 fragCoord, \n                         float time, float scale, float contrast) {\n    // Weights/Alpha for interpolation\n    vec3 weights = abs(normal);\n\n    // Increase contrast of weights for sharper transitions\n    weights = smoothContrast(weights, contrast);\n\n    // Calculate sign for flipping sides\n    vec3 sgn = sign(normal);\n    \n    // Scale coordinates. Replace normal with world coordinates if not a sphere\n    vec3 uvwC = normal * scale;\n    \n    // Sample dither noise\n    float dither = ScreenSpaceDither12(fragCoord, time);\n    \n    // Smooth contrast creates artifacts in the dither. Clamping removes them\n    dither = clamp(dither, 0.01, 0.99);\n\n    // Mip calculation as the automatic ones don't work\n    vec3 duvwdx = dFdx(uvwC);\n    vec3 duvwdy = dFdy(uvwC);\n\n    // \"Interpolate\" the UVs using dither\n    vec2 uv;\n    vec2 duvdx; \n    vec2 duvdy;\n    mat3 tbn;\n    // The weights are grouped cumulatively, and if the dither value is within one \n    // cumulative section for one of the weights, that weight is selected.\n    if (weights.x > dither) {\n        // X-axis Side\n        // Coordinate projections all right side up with slightly different offsets\n        uv = vec2(uvwC.y * sgn.x, uvwC.z) + 0.25;\n        \n        // Partial derivative measures UV rate of change, so mirroring and offset are irrelevant.\n        duvdx = duvwdx.yz; \n        duvdy = duvwdy.yz;\n        \n        // Tangent is the direction of uvX.x in world space\n        vec3 tangentX = safeNormalize(cross(normal, vec3(0,0,-1)), vec3(0,sgn.x,0));   \n        \n        // Bitangent is the direction of uvY.y in world space.\n        vec3 bitangentX = cross(normal, vec3(0,sgn.x,0));\n        \n        // Tangent Bitangent Normal matrix to translate normal textures to world space normals.\n        tbn = mat3(tangentX, \n                   bitangentX, \n                   normal); // Normal vector straight up from the surface.\n                   \n    } else if (1.-weights.z > dither) { // Because sum of all weights is 1, so 1-z = sum of xy.\n        // Y-axis Side\n        uv = vec2(-uvwC.x * sgn.y, uvwC.z) + 0.5;\n        duvdx = duvwdx.zx;\n        duvdy = duvwdy.zx;\n       \n        // TBN matric for the Y sides\n        vec3 tangentY = safeNormalize(cross(normal, vec3(0,0,-1)), vec3(-sgn.y,0,0));\n        vec3 bitangentY = cross(normal, vec3(-sgn.y,0,0));\n        tbn = mat3(tangentY,\n                   bitangentY,\n                   normal);\n    } else {\n        // Z-axis Side \n        uv = vec2(uvwC.x * sgn.z, uvwC.y) + 0.75;        \n        duvdx = duvwdx.xy;\n        duvdy = duvwdy.xy;\n        \n        // TBN matric for the Z sides\n        vec3 tangentZ = safeNormalize(cross(normal, vec3(0,-1,0)), vec3(sgn.z,0,0));\n        vec3 bitangentZ = cross(normal, vec3(sgn.z,0,0));\n        tbn = mat3(tangentZ,\n                   bitangentZ,\n                   normal);\n    }\n\n    // Sample textures for cardinal directions.\n\tvec3 color = textureGrad(tex, uv, duvdx, duvdy).xyz;\n    \n    // Sample normal. If possible use a normal texture instead in tangent space.\n    vec3 tsNormal = heightToNormal(tex, uv, duvdx, duvdy, \n                                  iChannelResolution[0].xy, 5.0);\n      \n    // Translate normals to world space.\n    vec3 normalWS = tbn * tsNormal;          \n    \n    #ifdef SHOWGRID\n        // Overlaying the edges of the alpha mask.\n        vec3 mask = step(abs(weights - 0.1), vec3(LINETHICKNESS));\n        color = max(mask, color);\n    #endif\n    return materialValues(color, normalWS);\n}\n\n// used as part for variantance restoration see triplanar version for proper use\n// NB: trick published in https://hal.inria.fr/inria-00536064v2\nfloat getSquaredAlphaSum(vec3 normal, float contrast) {\n    // Weights/Alpha for interpolation\n    vec3 weights = abs(normal);\n\n    // Increase contrast of weights for sharper transitions\n    weights = smoothContrast(weights, contrast);\n    \n    // partial value used in main\n    float squaredAlphaSum = weights.x * weights.x +\n                            weights.y * weights.y +\n                            weights.z * weights.z ; // = dot(weights, weights)\n                            \n    return squaredAlphaSum; \n}\n\n// _____________________________3D Section_____________________________\n// https://www.shadertoy.com/view/4sjXW1 by nimitz (twitter: @stormoid)\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nvec2 iSphere(in vec3 ro, in vec3 rd) {\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - 1.;\n    float h = b*b - c;\n    //if(h <0.0) return vec2(-1.);\n    return vec2(-b - sqrt(h), h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\t\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 um = iMouse.xy / iResolution.xy-.5;\n\tum.x *= iResolution.x/iResolution.y;\n    p*= 1.5;\n\t\n    //camera\n\tvec3 ro = vec3(0.,0.,2.4);\n    vec3 rd = normalize(vec3(p,-1.5));\n    mat2 mx;\n    mat2 my;\n    vec2 cursor;\n    if(iMouse.x > 0.0)\t{    \n        mx = mm2(um.x*5.);\n        my = mm2(um.y*5.);   \n    } else {\n        mx = mm2(-iTime*.1+um.x*5.);\n        my = mm2(iTime*0.05+um.y*5.);\n    }\n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    \n    vec2 t = iSphere(ro,rd);\n\n    vec3 lightDir = normalize(vec3(1,0,1));\n\n    // Alternate between background and sphere mapping\n    vec3 color;\n    if (t.x > 0.) {\n        // Sphere mapping\n    \tvec3 normal = ro + rd * t.x;\n        \n        #if TEMPORALBLUR <= 1\n            // We just take a single sample from the ditheredSample function.\n            materialValues planar = uniplanar(iChannel0, normal, \n                    fragCoord, iTime, 0.7, CONTRAST);\n        #else\n            // We take multiple samples from the ditheredSample function and average them.\n            // This is normally done automatically by your TAA or motion blur\n            materialValues planar;\n            for(int i = 0; i < TEMPORALBLUR; i++) {\n                // subtracting from time offset\n                materialValues tempPlanar = uniplanar(iChannel0, normal, \n                    fragCoord, iTime - float(i), 0.7, CONTRAST);\n                \n                // collect values \n                planar.color += tempPlanar.color;\n                planar.normal += tempPlanar.normal;\n            }\n            planar.color /= float(TEMPORALBLUR);\n            \n            // Variance restoration with normalization (very visible in the Stars)\n            float squaredAlphaSum = getSquaredAlphaSum(normal, CONTRAST);\n                        \n            // Sampling mips lowest level to get the mean. Could be a constant if known.\n            vec3 mean = vec3(0.576,0.455,0.404); // textureLod(tex, uvX, 12.).xyz; \n\n            // Variance restoration with normalization (very visible in the Stars)\n            planar.color = mean + (planar.color - mean) / sqrt(squaredAlphaSum);\n\n            // technically wrong but looks the same as Slerp\n            planar.normal = normalize(planar.normal / float(TEMPORALBLUR)); \n        #endif\n\n        #ifdef SHOWGRID\n            // Show unlit color\n            color = planar.color;\n        #else\n            // Apply lighting to show the normals too\n            color = phongLighting(planar.color, planar.normal, ro, lightDir);\n        #endif       \n    } else {\n        // Background mapping\n        vec3 normal = rd;       \n        \n        // Sample albedo textures for stars\n        // disabling dithering as the edge is invisible anyway with stars\n        materialValues planar = uniplanar(iChannel1, normal, vec2(1), 0., 2., CONTRAST);\n        \n        #ifdef SHOWGRID\n            // Show unlit color\n            color = planar.color;\n        #else        \n            // Make stars less bright\n            float stars = pow(planar.color.x * planar.color.y * planar.color.z,2.);\n            vec3 albedo = planar.color * stars; // Make stars colorful\n            \n            // Create sun with halo\n            vec3 sun = sun(normal, lightDir);\n\n            // Combine stars albedo and sunlight\n            color = max(albedo - sun, 0.) + sun;\n        #endif \n    }\n    \n    #ifndef SHOWGRID\n        // Fresnel mask for atmosphere\n        float fresnel = pow(clamp(1.-abs(t.y), 0., 1.), 32.);\n        color = mix(color, vec3(0.404,0.302,0.275), fresnel);\n    #endif\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "//_________________________GENERIC FUNCTIONS_____________________________________\n#define SUN_COLOR vec3(1.0, 0.9, 0.7)\n\n// Phong lighting model\nvec3 phongLighting(vec3 albedo, vec3 normal, vec3 cameraDir, vec3 lightDir) {\n    // Ambient\n    float ambientStrength = 0.15;\n    vec3 ambient = ambientStrength * albedo;\n\n    // Diffuse \n    float diff = clamp(dot(normal, lightDir), 0.0, 1.0);\n    vec3 diffuse = diff * albedo;\n\n    // Specular\n    float specularStrength = 1.0;\n    vec3 viewDir = normalize(cameraDir);\n    vec3 reflectDir = reflect(-lightDir, normal);  \n    float spec = pow(clamp(dot(viewDir, reflectDir), 0.0, 1.0), 36.0);\n    vec3 specular = specularStrength * spec * SUN_COLOR;  \n\n    // Combine results\n    return ambient + diffuse + specular;\n}\n\n// This function creates a simple sun with a halo effect.\n#define ONE_OVER_PI 0.3183098861836\nvec3 sun(vec3 normal, vec3 lightDir) {\n    // Compute the dot product of the normal and light direction.\n    float NdotL = dot(normal, lightDir);\n    \n    // Prevent Nan errors with fron acos\n    NdotL = clamp(NdotL, -1., 1.);\n    \n    // Compute the angle between the normal and light direction.\n    float angle = acos(NdotL) * ONE_OVER_PI;\n\n    // Compute an intensity based on the angle.\n    float intensity = pow(1.0 - angle, 25.0) * 2.0;\n\n    // Generate a color based on the intensity and the sun's color.\n    return intensity * SUN_COLOR;\n}\n\n// This function creates a simple sun with a halo effect.\n#define ONE_OVER_PI 0.3183098861836\nvec3 sunSpace(vec3 normal, vec3 lightDir) {\n    // Compute the dot product of the normal and light direction.\n    float NdotL = dot(normal, lightDir);\n    \n    // Prevent Nan errors with fron acos\n    NdotL = clamp(NdotL, -1., 1.);\n    \n    // Compute the angle between the normal and light direction.\n    float angle = acos(NdotL) * ONE_OVER_PI;\n\n    // Compute an intensity based on the angle.\n    float intensity = pow(1.0 - angle, 12.0) * 2.0;\n\n    // Generate a color based on the intensity and the sun's color.\n    return intensity * SUN_COLOR;\n}\n\n// Increases the steepness of Alpha while forcing 0-1 range and 1 sum\n// See 2 value example https://www.desmos.com/calculator/n6gpory8yq\nvec3 smoothContrast(vec3 alpha, float contrast) {\n    // increase steepness using power\n    vec3 powAlpha = pow(alpha, vec3(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z);\n}\n\n// Safe Normalization avoiding division by zero with alternate\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\nvec3 safeNormalize(vec3 vector, vec3 alternate) {\n\n    // Calculate the square of the length of the vector\n    float lenSq = dot(vector, vector);\n    \n    // Check if the squared length is greater than a tiny threshold\n    if (lenSq > SMALLESTFLOAT) {\n        // If so, normalize the vector resuing the squared length\n        return vector / sqrt(lenSq);\n        \n    } else {\n        // Otherwise, return a alternate vector\n        return alternate;\n    }\n}\n\n// Function for generating normals using 3 texture samples.\n// Original source: https://www.shadertoy.com/view/3sSSW1\nvec3 heightToNormal(sampler2D tex, vec2 uv, vec2 duvdx, vec2 duvdy, vec2 res, float strength) {\n    vec2 s = 1.0 / res;\n    \n    float textureOffset = 1.0;\n    \n    float p = textureGrad(tex, uv, duvdx, duvdy).x;\n    float h1 = textureGrad(tex, uv + s * vec2(textureOffset,0), duvdx, duvdy).x;\n    float v1 = textureGrad(tex, uv + s * vec2(0,textureOffset), duvdx, duvdy).x;\n       \n   \tvec2 xy = (p - vec2(h1, v1));\n    \n    return safeNormalize(vec3(xy * strength, 1.0), vec3(0,0,1));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}