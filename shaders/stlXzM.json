{
    "Shader": {
        "info": {
            "date": "1625395615",
            "description": "License CC0: Spherical iris\nResult of more tinkering around eye designs",
            "flags": 0,
            "hasliked": 0,
            "id": "stlXzM",
            "likes": 8,
            "name": "Spherical iris",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "#define PI            3.141592654\n#define TAU           (2.0*PI)\n#define TIME          iTime\n#define RESOLUTION    iResolution\n\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\n// Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst vec3  grid_color    = HSV2RGB(vec3(0.6, 0.3, 1.0)); \nconst vec3  light0_color  = 16.0*HSV2RGB(vec3(0.6, 0.5, 1.0)); \nconst vec3  light1_color  = 8.0*HSV2RGB(vec3(0.9, 0.25, 1.0)); \nconst vec3  sky0_color    = HSV2RGB(vec3(0.05, 0.65, -0.25)); \nconst vec3  sky1_color    = HSV2RGB(vec3(0.6, 0.5, 0.25)); \nconst vec3  light0_pos    = vec3(5.0, 4.0, 4.0);\nconst vec3  light1_pos    = vec3(3.0, -1.0, -8.0);\nconst vec3  light0_dir    = normalize(light0_pos);\nconst vec3  light1_dir    = normalize(light1_pos);\nconst vec4  planet_sph    = vec4(50.0*normalize(light1_dir+vec3(0.025, -0.025, 0.0)), 10.0);\nconst vec2   iris_center  = vec2(0.0, 0.28);\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, vec3(1.0/2.2));\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat vesica(vec2 p, float r, float d) {\n  p = abs(p);\n  float b = sqrt(r*r-d*d);\n  return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                           : length(p-vec2(-d,0.0))-r;\n}\n\n// IQ's ray sphere intersect: https://iquilezles.org/articles/intersectors\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sph) {\n  vec3 oc = ro - sph.xyz;\n  float b = dot( oc, rd );\n  float c = dot( oc, oc ) - sph.w*sph.w;\n  float h = b*b - c;\n  if (h < 0.0) return vec2(-1.0);\n  h = sqrt(h);\n  return vec2(-b - h, -b + h);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nvec2 df(vec2 p) {\n  const float iris_outer = 0.622;\n  const float iris_inner = 0.285;\n  \n  float a  = mix(0.0, 0.85, smoothstep(0.995, 1.0, cos(TAU*TIME/5.0)));\n  const float b = 4.0;\n  float rr = mix(1.6, b, a);\n  float dd = mix(1.12, b, a);\n  \n  float t0 = abs(0.9*p.x);\n  t0 *= t0;\n  t0 *= t0;\n  t0 *= t0;\n  t0 = clamp(t0, 0.0, 1.0);\n  float dt0 = mix(0.0125, -0.0025, t0);\n\n  vec2 p0 = p;\n  p0 = p0.yx;\n  float d0 =  vesica(p0, rr, dd);\n  float d5 = d0;\n\n  vec2 p1 = p;\n  p1 -= iris_center;\n  float d1 = circle(p1, iris_outer);\n  d1 = max(d1,d0+dt0);\n  float d6 = d1;\n\n  vec2 p2 = p;\n  p2 -= vec2(-0.155, 0.35);\n  float d2 = circle(p2, 0.065);\n\n  vec2 p3 = p;\n  p3 -= iris_center;\n  p3 = toPolar(p3);\n  float n3 = mod1(p3.x, 0.05);\n  float d3 = abs(p3.x)-0.0125*(1.0-1.0*length(p1));\n\n  vec2 p4 = p;\n  p4 -= iris_center;\n  float d4 = circle(p4, iris_inner);\n\n  d3 = max(d3,-d4);\n\n  d1 = pmax(d1,-d2, 0.0125);\n  d1 = max(d1,-d3);\n\n  d0 = abs(d0)-dt0;\n\n  float d = d0;\n  d = pmin(d, d1, 0.0125);\n  return vec2(d, d6);\n}\n\nvec3 render_background(vec3 ro, vec3 rd, vec3 nrd) {\n  vec3 srd = toSpherical(rd.xzy);\n  srd.z += 0.02*TIME;\n  vec2 pg  = srd.yz;\n  float f  = sin(pg.x); \n  float lf2= ceil(log(f)/log(2.0)-0.505);\n  float mf = pow(2.0, lf2);\n\n  const float aa = 0.005;\n  const float count = 20.0;\n  const vec2 sz = vec2(2.0*PI/count);\n  vec2 ng = mod2(pg, vec2(mf, 1.0)*sz);\n\n  float dg = min(abs(pg.y)*f, abs(pg.x))-aa*0.0;\n  vec3 lines = grid_color*smoothstep(-aa, aa, -dg)*f*f;\n\n  vec3 sky  = smoothstep(1.0, 0.0, rd.y)*sky1_color+smoothstep(0.5, 0.0, rd.y)*sky0_color;\n\n  vec2 pi = raySphere(ro, rd, planet_sph);\n\n  float lf1 = 1.0;\n  if (pi.x > 0.0) {\n    vec3 ppos = ro+rd*pi.x;\n    float t = 1.0-tanh_approx(1.5*(pi.y - pi.x)/planet_sph.w);\n    sky *= mix(0.5, 1.0, t);\n    lf1 = t;\n  } else {\n    sky += lines;\n  }\n\n  sky += pow(max(dot(rd, light0_dir), 0.0), 800.0)*light0_color; \n  sky += pow(max(dot(rd, light0_dir), 0.0), 80.0)*light1_color*0.1; \n  sky += lf1*pow(max(dot(rd, light1_dir), 0.0), 150.0)*light1_color; \n  sky += lf1*pow(max(dot(rd, light1_dir), 0.0), 50.0)*light0_color*0.1; \n\n\n  return sky;\n}\n\nvec4 render_iris(vec2 p, vec2 q, float d) {\n  p -= iris_center;\n  float aa = 2.0/RESOLUTION.y;\n  \n  float a = smoothstep(-aa, aa, -d);\n  float b = smoothstep(0.0, 0.125, -d);\n  \n  vec3 ro = 1.0*vec3(2.0, 4.0, -1.0);\n  vec3 la = vec3(0.0, 0.0, 0.0); \n\n  vec2 np   = p + vec2(4.0/RESOLUTION.y); \n\n  vec3 ww   = normalize(la - ro);\n  vec3 uu   = normalize(cross(vec3(0.0,1.0,0.0), ww));\n  vec3 vv   = normalize(cross(ww,uu));\n  float rdd = 2.0;\n  vec3 rd   = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd  = normalize(np.x*uu + np.y*vv + rdd*ww);\n  \n  vec4 sph  = vec4(vec3(0.0), 1.78);\n  \n  vec2 si   = raySphere(ro, rd, sph);\n  \n  vec3 pos  = ro + rd*si.x;\n  \n  vec3 nor  = normalize(pos - sph.xyz);\n  \n  vec3 ref  = reflect(rd, nor); \n  vec3 nref = reflect(nrd, nor); \n\n  vec3 rbkg = render_background(pos, ref, nref); \n\n  vec4 col = vec4(rbkg, 1.0);\n  \n  col.xyz*=b;\n  col.w = a;\n  \n  \n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float aa = 2.0/RESOLUTION.y;\n  vec2 d   = df(p);\n\n  vec4 dcol = vec4(0.0, 0.0, 0.0, 0.5);\n  dcol.w    = mix(0.0, 0.95, smoothstep(-aa, aa, -d.x));\n  vec4 scol = render_iris(p, q, d.y); \n  \n  vec3 col  = vec3(1.0);\n  col = alphaBlend(col, dcol);\n  col = alphaBlend(col, scol);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n  col = postProcess(col, q);\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}