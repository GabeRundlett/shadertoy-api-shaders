{
    "Shader": {
        "info": {
            "date": "1593547587",
            "description": "How to get a perfect fit of parameterization along inter-poles arc ?\nvariant of [url]https://shadertoy.com/view/WtlyWs[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wlByRR",
            "likes": 7,
            "name": "Logarithmic Moebius Transform 9",
            "published": 3,
            "tags": [
                "zoom",
                "spiral",
                "mobius",
                "transform",
                "logarithm",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/WtlyWs\n\nvoid mainImage(out vec4 O,  vec2 u ){\n\n    vec2 R = iResolution.xy,  I,\n         U = (u - .5*R) / R.y,                                // normalized coordinates\n\n         z = U - vec2(-1,0);  U.x -= .5;                      // Moebius transform\n    U *= mat2(z,-z.y,z.x) / dot(U,U);\n    \n#if 1              \n                  // offset   spiral, zoom   phase            // spiraling\n    U =   log(length(U+=.5))*vec2(.5, -.5) + iTime/8.\n        + atan(U.y, U.x)/6.283 * vec2(6, 1);  // n  \n  //U *= vec2(10,22)/2.73; // /(.5+iMouse.x/R.x);\n    U *= vec2(11./3., 2./sqrt(3.)*7.); // *1,4,7 ok      // thanks Shane !\n#else                                                    // variant adapted form mla's version\n    U =  vec2( log(length(U+=.5)) , atan(U.y, U.x) ) / 3.1416;\n    U.x += iTime/8.;\n    I = vec2( 7. , 3./sqrt(3.) );\n    // my: (PI/2,  3, -PI/2, .5) * D(3.66,8) = ( 5.75, 11,  -12.6,  4 ) \n    U = mat2(I,-I.y,I) * U;          // here:  ( 7,   1.73, -1.73,  7 )\n    U = U*sqrt(3.)-.5;\n#endif\n    \n    U *= mat2(1,0,.5,sqrt(3.)/2.);                            // triangular mesh\n    z = fwidth(U);\n    I = floor(U); U = fract(U); \n    float s = float(U.x-U.y>0.),                              // parallelogram = 2 triangles\n         id = 6.28*( I.y/6.+I.x/11.)*2.+s*91.;\n    float v = 1.-2.*abs(U.x-U.y);\n    U = abs(U*2.-1.);  v = max(v,max(U.x,U.y));               // dist to border\n    O =   smoothstep(.7,-.7, (v-.95)/( abs(z.x-z.y)>1.?.1:z.y*4.))  // draw AA tiles\n        * (.6 + .6 * cos( id  + vec4(0,23,21,0)  ) );         // color\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}