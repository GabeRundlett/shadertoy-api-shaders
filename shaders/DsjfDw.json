{
    "Shader": {
        "info": {
            "date": "1689780282",
            "description": "Simple sdf raymarching of a sphere/circle as starting point for further experiments",
            "flags": 0,
            "hasliked": 0,
            "id": "DsjfDw",
            "likes": 1,
            "name": "SDF Basics 0: Start sphere",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "signeddistancefield"
            ],
            "usePreview": 0,
            "username": "SaphireSoul",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "// defines/constants\n#define SDF_DIST .01\n#define RAYMARCH_STEPS 50\n#define MAX_DIST 50.0\n\nstruct Ray {\n    vec3 dir;\n    vec3 origin;\n};\n\nfloat GetMinSceneDistanceFromPoint(vec3 point) {\n    //define sphere here for now vec4(position.xyz, radius)\n    vec4 sphere = vec4(0.0, 1.0, 6.0, 1.0);\n    \n    // get distance from point to sphere\n    return length(point - sphere.xyz) - sphere.w;\n}\n\nfloat calcShading(vec3 p) \n{\n    // light source\n    vec3 light_position = vec3(-5.0, 5.0, 2.0);\n    \n    // light direction\n    vec3 light_dir = normalize(light_position - p);\n    \n    // calculate hitpoint normal (gradient of sdf at p)\n    float dist = GetMinSceneDistanceFromPoint(p);\n    vec2 epsilon = vec2(0.01, 0);\n    vec3 normal = normalize(dist - vec3(GetMinSceneDistanceFromPoint(p - epsilon.xyy), \n                                        GetMinSceneDistanceFromPoint(p - epsilon.yxy), \n                                        GetMinSceneDistanceFromPoint(p - epsilon.yyx)));\n    \n    // calculate diffuse contribution\n    return clamp(dot(normal, light_dir), 0.0, 1.0);\n}\n\nfloat Raymarch(Ray r)\n{\n    float dist_0 = 0.0; //distance from origin\n    \n    // main raymarch loop\n    for(int i=0; i < RAYMARCH_STEPS; i++) {\n\n        // march ray from origin in direction\n        vec3 t = r.origin + r.dir * dist_0;\n        \n        // get distance\n        float d = GetMinSceneDistanceFromPoint(t);\n        \n        //advance/march along ray\n        dist_0 += d;\n        \n        //compute sdf\n        if(dist_0 > MAX_DIST || d < SDF_DIST) {\n            // found a hit\n            return dist_0;\n        }\n    } \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Create ray\n    Ray ray;\n    ray.dir = normalize(vec3(uv.x, uv.y, 1.0));\n    ray.origin = vec3(0.0, 1.0, 0.0);\n    \n    // raymarching\n    float m = Raymarch(ray);\n    \n    if(m < MAX_DIST) {\n        // sphere hit\n        vec3 col = vec3(0.8, 0.8, 0.8);\n        fragColor = vec4(col,1.0);\n    }\n    else\n    {\n        // background\n        vec3 col = vec3(uv.xy, 1.0);\n        fragColor = vec4(col,1.0);\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}