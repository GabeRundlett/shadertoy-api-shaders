{
    "Shader": {
        "info": {
            "date": "1548097836",
            "description": "voronoi edges.\nuncomment #define lowstephack\nand set #define steps 5",
            "flags": 0,
            "hasliked": 0,
            "id": "WdX3z8",
            "likes": 18,
            "name": "voronoi edges",
            "published": 3,
            "tags": [
                "3d",
                "voronoi"
            ],
            "usePreview": 1,
            "username": "abje",
            "viewed": 835
        },
        "renderpass": [
            {
                "code": "#define voronoiscale 1.0\n#define voronoiborder 0.02\n#define FAR 10.0\n#define EPS 0.001\n#define STEPS 100\n//#define lowstephack\n\n#define dot2(a) dot(a,a)\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n\nfloat planetrace(float l, vec3 d,vec3 plane) {\n    \n    vec2 a = vec2(-l,dot(d,plane));\n    \n    if (a.y <= 0.0) return 999.0*sign(a.x);\n    \n    return a.x/a.y;\n}\n\nvec3 noise(vec3 p3)\n{\n    return (texelFetch(iChannel0,ivec3(mod(p3+0.01*iTime,32.0)),0).rgb)*0.5+0.25;\n}\n\nvec3 findcell(vec3 ro) {\n    ro /= voronoiscale;\n    \n    float len = 10000.0;\n    vec3 center;\n    vec3 cell = floor(ro);\n    vec3 cell2;\n    \n    //finding closest voronoi cell\n    for(float x = 0.0; x <= 1.0; x++) {\n    \tfor(float y = 0.0; y <= 1.0; y++) {\n    \t\tfor(float z = 0.0; z <= 1.0; z++) {\n                vec3 orig = vec3(x,y,z)+cell;\n                orig += noise(orig);\n                if (len > dot2(ro-orig)) {\n                    center = orig;\n                    cell2 = vec3(x,y,z)+cell;\n                    len = dot2(ro-orig);\n                }\n            }\n    \t}\n    }\n    \n    return cell2;\n}\n\nvec4 holes(vec3 ro, vec3 rd, inout vec3 cell) {\n    \n    ro /= voronoiscale;\n    \n    vec3 center = cell;\n    center += noise(center);\n    \n    vec3 normal0;\n    vec3 normal1;\n    \n    float len0 = 10000.0;\n    float len1 = 10000.0;\n    \n    float a = 10000.0;\n    \n    vec3 delta;\n    \n    for(float x = -1.0; x <= 1.0; x++) {\n        for(float y = -1.0; y <= 1.0; y++) {\n            for(float z = -1.0; z <= 1.0; z++) {\n                if (x!=0.0||y!=0.0||z!=0.0)\n                {\n                    vec3 orig = vec3(x,y,z)+cell;\n                    orig += noise(orig);\n                    vec3 mid = mix(orig,center,0.5);\n                    vec3 plane = vec3((orig-center));\n                    \n                    float df = dot(ro-mid,plane)+voronoiborder;\n                    float num = planetrace(df,rd,plane);\n                    \n                    float num2 = planetrace(df-voronoiborder,rd,plane);\n                    if (num2 < a) {\n                        a = num2;\n                        delta = vec3(x,y,z);\n                    }\n                    \n                    if (num < len1) {\n                        if (num < len0) {\n                            len1 = len0;\n                            normal1 = normal0;\n                            \n                            len0 = num;\n                            normal0 = -plane;\n                            delta = vec3(x,y,z);\n                        } else {\n                            len1 = num;\n                            normal1 = -plane;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    if (len1 > a) {\n    \tcell += delta;\n    }\n    \n    return vec4(max(len1,0.0)*voronoiscale,normal1);\n}\n\n\n\nvec4 ray(vec3 ro, vec3 rd) {\n    float d = 0.0;\n    vec4 h;\n    vec4 n = vec4(-1);\n    \n    vec3 cell = findcell(ro);\n    \n    float h2;\n    \n    for(int i = 0; i < STEPS; i++) {\n        vec3 p = ro+rd*d;\n        \n#ifdef lowstephack\n        vec3 cell2 = cell;\n#endif\n        \n        h = holes(p, rd, cell);\n        \n#ifdef lowstephack\n        if (cell2==cell) i--;\n#endif\n        \n        p += rd*h.x;\n        d += h.x;\n        \n        if (d > FAR||(h.x < EPS && n.x < EPS)) {\n            break;\n        }\n        \n        n = h;\n    }\n    return vec4(d,n.yzw);\n}\n\nvec3 getcolor(vec3 ro, vec3 rd, vec3 n, float d) {\n    \n    vec3 col = vec3(0.8);\n    \n    vec3 light0n = normalize(vec3(1,1,-1));\n    vec3 light0col = vec3(0.9,0.3,0.1);\n    float light0 = clamp(dot(light0n,n),0.2,1.0);\n    \n    vec3 light1n = normalize(sin(iTime*vec3(0.321,0.841,0.54)));\n    vec3 light1col = vec3(0.2,0.7,0.8);\n    float light1 = clamp(dot(light1n,n),0.2,1.0);\n    \n    col = col*light0*light0col+col*light1*light1col;\n    \n    col *= 1.0-d/FAR;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.5*voronoiscale,0.5*voronoiscale,iTime*0.3);\n    vec3 rd = normalize(vec3(uv,1));\n    \n    if (length(iMouse.xy) > 40.0) {\n        rd.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n        rd.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n    }\n    \n    vec4 h = ray(ro,rd);\n    \n    vec3 p = ro+rd*h.x;\n    \n    fragColor.xyz = getcolor(ro,rd,normalize(h.yzw),h.x);\n    \n    fragColor = sqrt(fragColor);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}