{
    "Shader": {
        "info": {
            "date": "1515205702",
            "description": "NCPS-minus-001 by Necroposters\nReleased at Demoscene at MAGfest 2018\nCode: cxw (does it still count as partycoding if it's a remote entry?)\nMusic: elan (but blame cxw for the softsynth)\nSupport: psenough\nBuilt and tested in Firefox 57.0.3 (32-bit)",
            "flags": 40,
            "hasliked": 0,
            "id": "XtBfWR",
            "likes": 3,
            "name": "ncps-minus-001",
            "published": 3,
            "tags": [
                "compo"
            ],
            "usePreview": 0,
            "username": "cxw",
            "viewed": 777
        },
        "renderpass": [
            {
                "code": "\n\n\n// gfx.frag\n\n// by cxw/Necroposters.  CC-BY-SA 3.0\n// https://bitbucket.org/necroposters/ncps-minus-001\n//This file is generated from gfx.frag.in using perlpp.  DO NOT EDIT.\n//Use https://github.com/cxw42/perlpp/, branch 'defines'.\n\n\n\n//music.frag.inc: Music parameters and other common foo ##########\n\n\n\n\n\n\n\n\n\n#define BPM (270.00000000000000000000)\n    // beats per minute\n#define BPS (4.50000000000000000000)\n    // beats per sec = BPM/60 (110 bpm)\n#define SPB (0.22222222222222220989)\n    // sec per beat, precomputed\n#define BPP (2048.0)\n    // beats per pattern - make it longer than the song\n    // if you don't want repeats\n\n// DEBUG: where in the demo you want to start.\n#define START_OFS_SEC 0.00000000000000000000\n\n// Utils //////////////////////////////////////////////////////////////////\nfloat rand(float n){    // http://shadertoy.wikia.com/wiki/Noise\n    // added abs - make sure it's 0..1\n    return fract(abs(cos(n*89.42))*343.42);\n}\n//################################################################\n\n\n\n\n// Reminder: OpenGL-style coord system: +X right, +Y up, +Z toward viewer\n// CONFIG CONSTANTS STRUCTS GLOBALS ///////////////////\n// {{{1\nprecision highp int;    //play it safe.  Also covers\nprecision highp float;  //vectors and matrices.\n\n\n\n// Round text\n#define ARC_CENTER (vec2(0.0, -10.0))\n    // Center of the arc in the plane of the text.  World coords, not screen.\n#define ARC_DEAD_RADIUS (10.0)\n    // Radial dead zone around ARC_CENTER\n\n// Fixed text grid used for do_hey()\n#define HEY_X_CELLS (9.0)\n#define HEY_Y_CELLS (3.0)\n#define HEY_Y_VOFS (0.5)\n\n// How main samples from BUFA\n\n    \n\n\n\n#define SAMP_OFS_1 (ivec2(-4,0))\n#define SAMP_OFS_2 (ivec2(+4,0))\n#define SAMP_OFS_3 (ivec2(0,-4))\n#define SAMP_OFS_4 (ivec2(0,+4))\n\n\n// Voxel logo and related\n#define VLOGO_ORIGIN (vec3(6.0, 1.0, -2.0))\n#define MESSAGE_Z (0.1)\n\n// Bump-mapping\n#define TEX_SCALE (0.2)\n    // iChannel0 is Lichen.\n\n// Timing &c.\n#define LOADING_FREQ (0.2)\n\n#define S_SINE_FREQ (0.02380952380952380952380952380952)\n    // 1/42.  sine letter frequency in cycles per X unit.\n#define S_SINE_GROUP_FREQ (0.03125)\n    // 1/32.  sine group frequency.  If > S_SINE_FREQ, sine gradually\n    // shifts right on screen.\n#define CYL_RADIUS (15.0)\n    // radius of the cylinder for CYL and later parts\n#define TUNNEL_ACCEL (17.0)\n    // Acceleration during TUNNEL, in x units per sec^2\n#define CUBE_FADEIN_TIME (3.0)\n    //fadein in seconds\n\n#define TWOSIDED_RATE (0.3)\n    // how fast you go back and forth\n\n#define PI (3.1415926535897932384626433832795028841971)\n    // from memory :)\n#define PI_OVER_2 (1.5707963267948966192313216916398)\n#define PI_OVER_4 (0.78539816339744830961566084581988)\n#define THREE_PI_OVER_4 (2.3561944901923449288469825374596)\n#define TWO_PI (6.283185307179586)\n#define ONE_OVER_TWO_PI (0.15915494309644431437107064141535)\n    // not from memory :) :)\n\n#define TEE_ZERO (0.001)\n#define TEE_ONE (99999999999999999999.0)\n    // +Inf => 1.0/0.0 gives \"divide by zero during constant folding\" error\n\n#define LTR_Z_THICKNESS (1.0)\n    // in voxels\n#define EPS (0.000001)\n    // Arbitrary choice\n\n#define MAX_VOXEL_STEPS (60)\n    // Empirical - gives a nice disappearing effect at the edges on my\n    // test system\n#define MAX_DIST (100.0)\n\n// xport config\n#define XP_GAIN_HZ (3.0)\n\n#define XP_SHINE_LOW (6.0)\n#define XP_SHINE_HIGH (32.0)\n#define XP_SHINE_AIM (24.0)\n    // what it settles down to\n#define XP_SHINE_HZ (5.5)\n\n// Hack the camera\n#define SMALLEST_CAM_FRACTION (.00001)\n\n// Sinusoids across the u axis (horz)\n\n#define XP_H0_PER_U (30.00000000000000000000)\n    // cycles per screen width (u coordinate 0..1)\n#define XP_H0_PHASE (0.00000000000000000000)\n    // initial phase\n#define XP_H0_PHASE_PER_SEC (1.36590984938686665906)\n    // how much the phase of the sinusoid changes per second\n\n#define XP_H1_PER_U (10.00000000000000000000)\n    // cycles per screen width (u coordinate 0..1)\n#define XP_H1_PHASE (1.00000000000000000000)\n    // initial phase\n#define XP_H1_PHASE_PER_SEC (0.10000000000000000555)\n    // how much the phase of the sinusoid changes per second\n\n#define XP_H2_PER_U (5.00000000000000000000)\n    // cycles per screen width (u coordinate 0..1)\n#define XP_H2_PHASE (0.00000000000000000000)\n    // initial phase\n#define XP_H2_PHASE_PER_SEC (1.00000000000000000000)\n    // how much the phase of the sinusoid changes per second\n\n\n// }}}1\n\n// CHARSET FOR WORLD-COORDINATE LETTERS ///////////////\n// {{{1\n/*\n^ +Y\n9    00000\n8  1   2   3\n7  1   2   3\n6  1   2   3\n5    44444\n4  5       6\n3  5       6\n2 858      6\n1 88877777\n0 888\n   0 12345 6  --> +X\n(lowercase x, dot, and bang are handled separately)\n*/\n\n// Character storage\n#define NSEGS (9)\nvec4 SEG_SHAPES[NSEGS];\n    // All polys will be quads in the X-Y plane, Z=0.\n    // All quad edges are parallel to the X or Y axis.\n    // These quads are encoded in a vec4: (.x,.y) is the LL corner and\n    // (.z,.w) is the UR corner (coords (x,y)).\n\nvec4 SEG_VOXELS[NSEGS];\n    // Same deal, but voxel offsets, start->last+1\n\n// Grid parameters - 2D\n#define GRID_CHARHT (10.0)\n#define GRID_CHARWD (6.0)\n    // Size of each character\n#define GRID_PITCH (7.0)\n    //each char takes up this much space.  Margin is added on the right\n    //and is GRID_PITCH-GRID_CHARWD wide.\n#define GRID_PITCH_RECIP (0.14285714285714285714285714285714)\n    // avoid a division\n#define GRID_VPITCH (12.0)\n    // margin is added on top\n#define THICKNESS (1.0)\n    // how thick each stroke is\n\n#define GRID_XSHIFT (GRID_PITCH * 0.5)\n    // + pitch/0.5 because letters were snapping into\n    // existence at the right side of the screen.\n\n// Grid parameters - voxels.  Twice the size.\n#define VGRID_CHARHT (GRID_CHARHT*2.0)\n#define VGRID_CHARWD (GRID_CHARWD*2.0)\n#define VGRID_PITCH (GRID_PITCH*2.0)\n#define VGRID_PITCH_RECIP (GRID_PITCH_RECIP*0.5)\n#define VGRID_VPITCH (GRID_VPITCH*2.0)\n\n// For upright chars, each char (X,Y) goes from (PITCH*ofs, 0)->(.+WD,HT).\n\nvoid init_charset()\n{\n    float halft = THICKNESS*0.5;\n    float halfht = GRID_CHARHT * 0.5;\n\n    SEG_SHAPES[0] = vec4(THICKNESS, GRID_CHARHT - THICKNESS, GRID_CHARWD-THICKNESS, GRID_CHARHT);\n    SEG_SHAPES[1] = vec4(0.0,                   halfht, THICKNESS,             GRID_CHARHT - halft);\n    SEG_SHAPES[2] = vec4(GRID_CHARWD*0.5-halft, halfht, GRID_CHARWD*0.5+halft, GRID_CHARHT - halft);\n    SEG_SHAPES[3] = vec4(GRID_CHARWD-THICKNESS, halfht, GRID_CHARWD,           GRID_CHARHT - halft);\n    SEG_SHAPES[4] = vec4(THICKNESS, halfht - halft, GRID_CHARWD-THICKNESS, halfht + halft);\n    SEG_SHAPES[5] = vec4(0.0,                   halft,    THICKNESS,             halfht );\n    SEG_SHAPES[6] = vec4(GRID_CHARWD-THICKNESS, halft,    GRID_CHARWD,           halfht );\n    SEG_SHAPES[7] = vec4(THICKNESS, 0, GRID_CHARWD-THICKNESS, THICKNESS);\n    SEG_SHAPES[8] = vec4(0.0, 0.0, THICKNESS, THICKNESS); //dot\n\n    // Voxel grid #1 - not currently in use\n    //Grid_Origin = vec3(GRID_XSHIFT, 0, 0);\n    //Grid_Spacings = vec3(1.0);\n    //Grid_Spacings_Inv = vec3(1.0)/Grid_Spacings;\n\n    // TODO rewrite in terms of #defines.\n    // Z, W are +1 so can use IsPointInRectXY, which does not include the\n    // UR corner in the poly.\n    // Size has been doubled, so we can use multiples of 0.5.\n    SEG_VOXELS[0] = vec4(1.0, 9.0, 5.0,10.0)*vec4(2.0);\n    SEG_VOXELS[1] = vec4(0.0, 5.5, 1.0, 9.5)*vec4(2.0);\n    SEG_VOXELS[2] = vec4(3.0, 6.0, 4.0, 9.0)*vec4(2.0);\n    SEG_VOXELS[3] = vec4(5.0, 5.5, 6.0, 9.5)*vec4(2.0);\n    SEG_VOXELS[4] = vec4(1.0, 5.0, 5.0, 6.0)*vec4(2.0);\n    SEG_VOXELS[5] = vec4(0.0, 1.5, 1.0, 5.5)*vec4(2.0);\n    SEG_VOXELS[6] = vec4(5.0, 1.5, 6.0, 5.5)*vec4(2.0);\n    SEG_VOXELS[7] = vec4(1.0, 1.0, 6.0, 2.0)*vec4(2.0);\n    SEG_VOXELS[8] = vec4(0.0, 0.0, 2.0, 2.0)*vec4(2.0);\n\n} //init_charset\n\n// }}}1\n\n// MESSAGE ////////////////////////////////////////////\n// No music sync found\n// Parts and start times\n#define BLANK (0.0)\n#define BLANK_START (0.00000000000000000000)\n#define LINE1 (1.0)\n#define LINE1_START (2.00000000000000000000)\n#define LINE2 (2.0)\n#define LINE2_START (8.33333333333333214910)\n#define LINE3 (3.0)\n#define LINE3_START (16.66666666666666429819)\n#define LINE4 (4.0)\n#define LINE4_START (23.49999999999999644729)\n#define LINE5 (5.0)\n#define LINE5_START (28.83333333333332859638)\n#define LINE6 (6.0)\n#define LINE6_START (33.16666666666666429819)\n#define NAMEUS (7.0)\n#define NAMEUS_START (40.66666666666666429819)\n#define GREET (8.0)\n#define GREET_START (47.33333333333332859638)\n#define CREDZ (9.0)\n#define CREDZ_START (58.83333333333332859638)\n#define LAST1 (10.0)\n#define LAST1_START (69.00000000000000000000)\n#define NCPS1 (11.0)\n#define NCPS1_START (74.50000000000000000000)\n#define YEAR1 (12.0)\n#define YEAR1_START (77.50000000000000000000)\n#define ENDPART (13.0)\n#define ENDPART_START (92.50000000000000000000)\n\nvec4 get_story(in float time)\n{   //returns vec4(partnum, charidx_frac, first_charidx, clip_charidx)\n    // NOTE: charidx_frac restarts at 0 each part!\n    // first_charidx and clip_charidx are with respect to the whole messge.\n    // Character indices starting with clip_charidx should not be displayed.\n    float partnum, charidx_frac, first_charidx, clip_charidx;\n    if(time<2.00000000000000000000) {\n        partnum=BLANK;\n        charidx_frac=(time-BLANK_START)*0.50000000000000000000;\n        first_charidx=0.0;\n        clip_charidx=0.0;\n    } else\n\n    if(time<8.33333333333333214910) {\n        partnum=LINE1;\n        charidx_frac=(time-LINE1_START)*6.00000000000000000000;\n        first_charidx=1.0;\n        clip_charidx=32.0;\n    } else\n\n    if(time<16.66666666666666429819) {\n        partnum=LINE2;\n        charidx_frac=(time-LINE2_START)*6.00000000000000000000;\n        first_charidx=39.0;\n        clip_charidx=85.0;\n    } else\n\n    if(time<23.49999999999999644729) {\n        partnum=LINE3;\n        charidx_frac=(time-LINE3_START)*6.00000000000000000000;\n        first_charidx=89.0;\n        clip_charidx=130.0;\n    } else\n\n    if(time<28.83333333333332859638) {\n        partnum=LINE4;\n        charidx_frac=(time-LINE4_START)*6.00000000000000000000;\n        first_charidx=130.0;\n        clip_charidx=162.0;\n    } else\n\n    if(time<33.16666666666666429819) {\n        partnum=LINE5;\n        charidx_frac=(time-LINE5_START)*6.00000000000000000000;\n        first_charidx=162.0;\n        clip_charidx=188.0;\n    } else\n\n    if(time<40.66666666666666429819) {\n        partnum=LINE6;\n        charidx_frac=(time-LINE6_START)*6.00000000000000000000;\n        first_charidx=188.0;\n        clip_charidx=229.0;\n    } else\n\n    if(time<47.33333333333332859638) {\n        partnum=NAMEUS;\n        charidx_frac=(time-NAMEUS_START)*3.00000000000000000000;\n        first_charidx=233.0;\n        clip_charidx=253.0;\n    } else\n\n    if(time<58.83333333333332859638) {\n        partnum=GREET;\n        charidx_frac=(time-GREET_START)*6.00000000000000000000;\n        first_charidx=253.0;\n        clip_charidx=318.0;\n    } else\n\n    if(time<69.00000000000000000000) {\n        partnum=CREDZ;\n        charidx_frac=(time-CREDZ_START)*6.00000000000000000000;\n        first_charidx=322.0;\n        clip_charidx=379.0;\n    } else\n\n    if(time<74.50000000000000000000) {\n        partnum=LAST1;\n        charidx_frac=(time-LAST1_START)*6.00000000000000000000;\n        first_charidx=383.0;\n        clip_charidx=412.0;\n    } else\n\n    if(time<77.50000000000000000000) {\n        partnum=NCPS1;\n        charidx_frac=(time-NCPS1_START)*3.00000000000000000000;\n        first_charidx=416.0;\n        clip_charidx=424.0;\n    } else\n\n    if(time<92.50000000000000000000) {\n        partnum=YEAR1;\n        charidx_frac=(time-YEAR1_START)*0.59999999999999997780;\n        first_charidx=425.0;\n        clip_charidx=433.0;\n    } else\n\n    if(time<1092.50000000000000000000) {\n        partnum=ENDPART;\n        charidx_frac=(time-ENDPART_START)*0.00100000000000000002;\n        first_charidx=434.0;\n        clip_charidx=434.0;\n    } else\n\n    {\n        partnum=0.0;\n        charidx_frac=0.0;\n        first_charidx=0.0;\n        clip_charidx=0.0;\n    }\n\n    return vec4(partnum,charidx_frac,first_charidx,clip_charidx);\n} //get_story\n\nvec4 get_seg_vec4(float vecidx) {\n    if(vecidx>=54.0){\n        if(vecidx>=81.0){\n            if(vecidx>=95.0){\n                if(vecidx>=102.0){\n                    if(vecidx>=105.0){\n                        if(vecidx>=108.0) return vec4(251.0,0.0,0.0,0.0);\n                        if(vecidx>=107.0) return vec4(0.0,185.0,235.0,72.0);\n                        if(vecidx>=106.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=105.0) return vec4(107.0,163.0,59.0,211.0);\n                    }else{\n                        if(vecidx>=104.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=103.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=102.0) return vec4(211.0,21.0,248.0,187.0);\n                    }\n                }else{\n                    if(vecidx>=98.0){\n                        if(vecidx>=101.0) return vec4(114.0,187.0,3.0,0.0);\n                        if(vecidx>=100.0) return vec4(187.0,0.0,27.0,178.0);\n                        if(vecidx>=99.0) return vec4(11.0,0.0,178.0,114.0);\n                        if(vecidx>=98.0) return vec4(27.0,26.0,0.0,27.0);\n                    }else{\n                        if(vecidx>=97.0) return vec4(187.0,187.0,0.0,218.0);\n                        if(vecidx>=96.0) return vec4(0.0,0.0,0.0,211.0);\n                        if(vecidx>=95.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }\n            }else{\n                if(vecidx>=88.0){\n                    if(vecidx>=91.0){\n                        if(vecidx>=94.0) return vec4(26.0,219.0,114.0,0.0);\n                        if(vecidx>=93.0) return vec4(211.0,187.0,11.0,27.0);\n                        if(vecidx>=92.0) return vec4(3.0,178.0,0.0,59.0);\n                        if(vecidx>=91.0) return vec4(26.0,59.0,59.0,27.0);\n                    }else{\n                        if(vecidx>=90.0) return vec4(0.0,20.0,0.0,211.0);\n                        if(vecidx>=89.0) return vec4(179.0,18.0,123.0,11.0);\n                        if(vecidx>=88.0) return vec4(211.0,21.0,19.0,0.0);\n                    }\n                }else{\n                    if(vecidx>=84.0){\n                        if(vecidx>=87.0) return vec4(20.0,0.0,15.0,26.0);\n                        if(vecidx>=86.0) return vec4(19.0,124.0,30.0,0.0);\n                        if(vecidx>=85.0) return vec4(235.0,248.0,187.0,0.0);\n                        if(vecidx>=84.0) return vec4(0.0,20.0,0.0,163.0);\n                    }else{\n                        if(vecidx>=83.0) return vec4(211.0,0.0,16.0,72.0);\n                        if(vecidx>=82.0) return vec4(0.0,107.0,163.0,59.0);\n                        if(vecidx>=81.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }\n            }\n        }else{\n            if(vecidx>=67.0){\n                if(vecidx>=74.0){\n                    if(vecidx>=77.0){\n                        if(vecidx>=80.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=79.0) return vec4(234.0,258.0,0.0,0.0);\n                        if(vecidx>=78.0) return vec4(248.0,0.0,218.0,235.0);\n                        if(vecidx>=77.0) return vec4(111.0,0.0,123.0,11.0);\n                    }else{\n                        if(vecidx>=76.0) return vec4(178.0,59.0,235.0,162.0);\n                        if(vecidx>=75.0) return vec4(26.0,187.0,178.0,0.0);\n                        if(vecidx>=74.0) return vec4(187.0,0.0,59.0,27.0);\n                    }\n                }else{\n                    if(vecidx>=70.0){\n                        if(vecidx>=73.0) return vec4(15.0,0.0,107.0,163.0);\n                        if(vecidx>=72.0) return vec4(0.0,19.0,26.0,219.0);\n                        if(vecidx>=71.0) return vec4(15.0,26.0,19.0,19.0);\n                        if(vecidx>=70.0) return vec4(35.0,211.0,0.0,19.0);\n                    }else{\n                        if(vecidx>=69.0) return vec4(242.0,51.0,0.0,242.0);\n                        if(vecidx>=68.0) return vec4(187.0,163.0,178.0,0.0);\n                        if(vecidx>=67.0) return vec4(0.0,21.0,11.0,51.0);\n                    }\n                }\n            }else{\n                if(vecidx>=60.0){\n                    if(vecidx>=63.0){\n                        if(vecidx>=66.0) return vec4(219.0,0.0,178.0,235.0);\n                        if(vecidx>=65.0) return vec4(35.0,218.0,21.0,107.0);\n                        if(vecidx>=64.0) return vec4(0.0,0.0,0.0,178.0);\n                        if(vecidx>=63.0) return vec4(211.0,0.0,0.0,0.0);\n                    }else{\n                        if(vecidx>=62.0) return vec4(211.0,178.0,187.0,3.0);\n                        if(vecidx>=61.0) return vec4(3.0,27.0,59.0,27.0);\n                        if(vecidx>=60.0) return vec4(0.0,107.0,187.0,19.0);\n                    }\n                }else{\n                    if(vecidx>=57.0){\n                        if(vecidx>=59.0) return vec4(0.0,178.0,114.0,187.0);\n                        if(vecidx>=58.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=57.0) return vec4(11.0,0.0,0.0,0.0);\n                    }else{\n                        if(vecidx>=56.0) return vec4(0.0,200.0,27.0,21.0);\n                        if(vecidx>=55.0) return vec4(0.0,218.0,27.0,26.0);\n                        if(vecidx>=54.0) return vec4(15.0,21.0,178.0,32.0);\n                    }\n                }\n            }\n        }\n    }else{\n        if(vecidx>=27.0){\n            if(vecidx>=40.0){\n                if(vecidx>=47.0){\n                    if(vecidx>=50.0){\n                        if(vecidx>=53.0) return vec4(0.0,211.0,26.0,242.0);\n                        if(vecidx>=52.0) return vec4(0.0,114.0,21.0,178.0);\n                        if(vecidx>=51.0) return vec4(0.0,218.0,27.0,26.0);\n                        if(vecidx>=50.0) return vec4(27.0,11.0,19.0,187.0);\n                    }else{\n                        if(vecidx>=49.0) return vec4(123.0,107.0,248.0,0.0);\n                        if(vecidx>=48.0) return vec4(0.0,256.0,256.0,256.0);\n                        if(vecidx>=47.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }else{\n                    if(vecidx>=43.0){\n                        if(vecidx>=46.0) return vec4(211.0,256.0,256.0,256.0);\n                        if(vecidx>=45.0) return vec4(163.0,123.0,18.0,18.0);\n                        if(vecidx>=44.0) return vec4(3.0,187.0,107.0,0.0);\n                        if(vecidx>=43.0) return vec4(187.0,0.0,211.0,21.0);\n                    }else{\n                        if(vecidx>=42.0) return vec4(256.0,256.0,178.0,114.0);\n                        if(vecidx>=41.0) return vec4(0.0,0.0,0.0,256.0);\n                        if(vecidx>=40.0) return vec4(256.0,256.0,0.0,0.0);\n                    }\n                }\n            }else{\n                if(vecidx>=33.0){\n                    if(vecidx>=36.0){\n                        if(vecidx>=39.0) return vec4(248.0,27.0,15.0,256.0);\n                        if(vecidx>=38.0) return vec4(0.0,30.0,21.0,211.0);\n                        if(vecidx>=37.0) return vec4(218.0,235.0,234.0,35.0);\n                        if(vecidx>=36.0) return vec4(187.0,248.0,211.0,0.0);\n                    }else{\n                        if(vecidx>=35.0) return vec4(178.0,0.0,107.0,187.0);\n                        if(vecidx>=34.0) return vec4(26.0,178.0,0.0,21.0);\n                        if(vecidx>=33.0) return vec4(0.0,0.0,0.0,242.0);\n                    }\n                }else{\n                    if(vecidx>=30.0){\n                        if(vecidx>=32.0) return vec4(90.0,256.0,0.0,0.0);\n                        if(vecidx>=31.0) return vec4(0.0,72.0,91.0,73.0);\n                        if(vecidx>=30.0) return vec4(248.0,0.0,21.0,11.0);\n                    }else{\n                        if(vecidx>=29.0) return vec4(248.0,123.0,178.0,187.0);\n                        if(vecidx>=28.0) return vec4(178.0,0.0,234.0,59.0);\n                        if(vecidx>=27.0) return vec4(0.0,162.0,123.0,211.0);\n                    }\n                }\n            }\n        }else{\n            if(vecidx>=13.0){\n                if(vecidx>=20.0){\n                    if(vecidx>=23.0){\n                        if(vecidx>=26.0) return vec4(35.0,187.0,123.0,248.0);\n                        if(vecidx>=25.0) return vec4(15.0,0.0,178.0,114.0);\n                        if(vecidx>=24.0) return vec4(51.0,235.0,35.0,26.0);\n                        if(vecidx>=23.0) return vec4(0.0,0.0,123.0,0.0);\n                    }else{\n                        if(vecidx>=22.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=21.0) return vec4(256.0,0.0,0.0,0.0);\n                        if(vecidx>=20.0) return vec4(123.0,3.0,19.0,114.0);\n                    }\n                }else{\n                    if(vecidx>=16.0){\n                        if(vecidx>=19.0) return vec4(187.0,0.0,211.0,187.0);\n                        if(vecidx>=18.0) return vec4(27.0,27.0,219.0,18.0);\n                        if(vecidx>=17.0) return vec4(11.0,178.0,0.0,219.0);\n                        if(vecidx>=16.0) return vec4(11.0,27.0,19.0,187.0);\n                    }else{\n                        if(vecidx>=15.0) return vec4(11.0,0.0,21.0,11.0);\n                        if(vecidx>=14.0) return vec4(178.0,114.0,0.0,123.0);\n                        if(vecidx>=13.0) return vec4(211.0,0.0,30.0,21.0);\n                    }\n                }\n            }else{\n                if(vecidx>=6.0){\n                    if(vecidx>=9.0){\n                        if(vecidx>=12.0) return vec4(178.0,123.0,3.0,178.0);\n                        if(vecidx>=11.0) return vec4(21.0,178.0,0.0,211.0);\n                        if(vecidx>=10.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=9.0) return vec4(0.0,0.0,0.0,0.0);\n                    }else{\n                        if(vecidx>=8.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=7.0) return vec4(0.0,26.0,211.0,256.0);\n                        if(vecidx>=6.0) return vec4(187.0,0.0,27.0,51.0);\n                    }\n                }else{\n                    if(vecidx>=3.0){\n                        if(vecidx>=5.0) return vec4(218.0,0.0,27.0,11.0);\n                        if(vecidx>=4.0) return vec4(3.0,187.0,123.0,248.0);\n                        if(vecidx>=3.0) return vec4(187.0,0.0,123.0,18.0);\n                    }else{\n                        if(vecidx>=2.0) return vec4(26.0,0.0,123.0,3.0);\n                        if(vecidx>=1.0) return vec4(0.0,0.0,218.0,27.0);\n                        if(vecidx>=0.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }\n            }\n        }\n    }\n    return vec4(0.0);\n} //get_seg_vec4\n\n#define NUM_CHARS_IN_MESSAGE (435.0)\nfloat get_seg_mask(float charidx)\n{\n    if(charidx>=NUM_CHARS_IN_MESSAGE) return 0.0; //blank at the end\n    float vecidx = charidx * 0.250000000;\n    float subidx = mod(charidx, 4.0);\n    vec4 v = get_seg_vec4(vecidx);\n    float rv = v[0];\n    rv = mix(rv, v[1], step(1.0, subidx));\n    rv = mix(rv, v[2], step(2.0, subidx));\n    rv = mix(rv, v[3], step(3.0, subidx));\n    return rv;\n} //get_seg_mask\n\n// Camera and light prototypes\n\nvoid do_cl_blank(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line2(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line3(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line4(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line5(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line6(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_nameus(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_greet(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_credz(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_last1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_ncps1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_year1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_endpart(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\n\nvoid do_camera_light(in float partnum, in float charidx_frac,\n                        out vec3 camera_pos,\n                        out vec3 camera_look_at, out vec3 camera_up,\n                        out float fovy_deg, out vec3 light_pos)\n{   // Camera and light dispatcher\n    if(partnum>=NAMEUS) {\n\n        if(partnum==NAMEUS) {\n            do_cl_nameus(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==GREET) {\n            do_cl_greet(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==CREDZ) {\n            do_cl_credz(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LAST1) {\n            do_cl_last1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==NCPS1) {\n            do_cl_ncps1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==YEAR1) {\n            do_cl_year1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==ENDPART) {\n            do_cl_endpart(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        {\n            camera_pos=vec3(0.0,0.0,10.0);    //default\n            camera_look_at=vec3(0.0);\n            camera_up=vec3(0.0, 1.0, 0.0);\n            fovy_deg=45.0;\n            light_pos=camera_pos;\n        }\n    } else {\n\n        if(partnum==BLANK) {\n            do_cl_blank(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE1) {\n            do_cl_line1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE2) {\n            do_cl_line2(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE3) {\n            do_cl_line3(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE4) {\n            do_cl_line4(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE5) {\n            do_cl_line5(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE6) {\n            do_cl_line6(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        {\n            camera_pos=vec3(0.0,0.0,10.0);    //default\n            camera_look_at=vec3(0.0);\n            camera_up=vec3(0.0, 1.0, 0.0);\n            fovy_deg=45.0;\n            light_pos=camera_pos;\n        }\n    }\n} //do_camera_light\n\n#define NCPS1_REALSTART (420.00000000000000000000)\n#define YEAR1_REALSTART (429.00000000000000000000)\n#define YEAR1_CLIPCHARIDX (437.00000000000000000000)\n\n\n// UTIL ///////////////////////////////////////////////\n// {{{1\n//mat4 my_transpose(in mat4 inMatrix)\n//\n//{\n//    // Modified from\n//    // http://stackoverflow.com/a/18038495/2877364 by\n//    // http://stackoverflow.com/users/2507370/jeb\n//    vec4 i0 = inMatrix[0];\n//    vec4 i1 = inMatrix[1];\n//    vec4 i2 = inMatrix[2];\n//    vec4 i3 = inMatrix[3];\n//\n//    vec4 o0 = vec4(i0.x, i1.x, i2.x, i3.x);\n//    vec4 o1 = vec4(i0.y, i1.y, i2.y, i3.y);\n//    vec4 o2 = vec4(i0.z, i1.z, i2.z, i3.z);\n//    vec4 o3 = vec4(i0.w, i1.w, i2.w, i3.w);\n//\n//    mat4 outMatrix = mat4(o0, o1, o2, o3);\n//\n//    return outMatrix;\n//}\n\nvoid lookat(in vec3 in_eye, in vec3 in_ctr, in vec3 in_up,\n            out mat4 view, out mat4 view_inv)\n{\n    // From Mesa glu.  Thanks to\n    // http://learnopengl.com/#!Getting-started/Camera\n    // and https://www.opengl.org/wiki/GluLookAt_code\n\n    vec3 forward, side, up;\n\n    forward=normalize(in_ctr-in_eye);\n    up = in_up;\n    side = normalize(cross(forward,up));\n    up = cross(side,forward);   // already normalized since both inputs are\n        //now side, up, and forward are orthonormal\n\n    mat4 orient, where;\n\n    // Note: in Mesa gluLookAt, a C matrix is used, so the indices\n    // have to be swapped compared to that code.\n    vec4 x4, y4, z4, w4;\n    x4 = vec4(side,0);\n    y4 = vec4(up,0);\n    z4 = vec4(-forward,0);\n    w4 = vec4(0,0,0,1);\n    orient = transpose(mat4(x4, y4, z4, w4));\n\n    where = mat4(1.0); //identity (1.0 diagonal matrix)\n    where[3] = vec4(-in_eye, 1);\n\n    view = (orient * where);\n\n    // Compute the inverse for later\n    view_inv = mat4(x4, y4, z4, -where[3]);\n    view_inv[3][3] = 1.0;   // since -where[3].w == -1, not what we want\n        // Per https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations ,\n        // M_{view->world}\n} //lookat\n\nvoid gluPerspective(in float fovy_deg, in float aspect,\n                    in float near, in float far,\n                    out mat4 proj, out mat4 proj_inv)\n{   // from mesa glu-9.0.0/src/libutil/project.c.\n    // Thanks to https://unspecified.wordpress.com/2012/06/21/calculating-the-gluperspective-matrix-and-other-opengl-matrix-maths/\n\n    float fovy_rad = radians(fovy_deg);\n    float dz = far-near;\n    float sin_fovy = sin(fovy_rad);\n    float cot_fovy = cos(fovy_rad) / sin_fovy;\n\n    proj=mat4(0);\n    //[col][row]\n    proj[0][0] = cot_fovy / aspect;\n    proj[1][1] = cot_fovy;\n\n    proj[2][2] = -(far+near)/dz;\n    proj[2][3] = -1.0;\n\n    proj[3][2] = -2.0*near*far/dz;\n\n    // Compute the inverse matrix.\n    // http://bookofhook.com/mousepick.pdf\n    float a = proj[0][0];\n    float b = proj[1][1];\n    float c = proj[2][2];\n    float d = proj[3][2];\n    float e = proj[2][3];\n\n    proj_inv = mat4(0);\n    proj_inv[0][0] = 1.0/a;\n    proj_inv[1][1] = 1.0/b;\n    proj_inv[3][2] = 1.0/e;\n    proj_inv[2][3] = 1.0/d;\n    proj_inv[3][3] = -c/(d*e);\n} //gluPerspective\n\nvoid compute_viewport(in float x, in float y, in float w, in float h,\n                        out mat4 viewp, out mat4 viewp_inv)\n{\n    // See https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations#Viewport_Transformation\n    // Also mesa src/mesa/main/viewport.c:_mesa_get_viewport_xform()\n\n    viewp = mat4(0);\n    // Reminder: indexing is [col][row]\n    viewp[0][0] = w/2.0;\n    viewp[3][0] = x+w/2.0;\n\n    viewp[1][1] = h/2.0;\n    viewp[3][1] = y+h/2.0;\n\n    // assumes n=0 and f=1,\n    // which are the default for glDepthRange.\n    viewp[2][2] = 0.5;  // actually 0.5 * (f-n);\n    viewp[3][2] = 0.5;  // actually 0.5 * (n+f);\n\n    viewp[3][3] = 1.0;\n\n    //Invert.  Done by hand.\n    viewp_inv = mat4(1.0);\n    viewp_inv[0][0] = 2.0/w;    // x->x\n    viewp_inv[3][0] = -1.0 - (2.0*x/w);\n\n    viewp_inv[1][1] = 2.0/h;    // y->y\n    viewp_inv[3][1] = -1.0 - (2.0*y/h);\n\n    viewp_inv[2][2] = 2.0;      // z->z\n    viewp_inv[3][2] = -1.0;\n\n}  //compute_viewport\n\n// https://www.opengl.org/wiki/Compute_eye_space_from_window_space\n\nvec4 wts(in mat4 modelviewproj, in mat4 viewport,\n                in vec3 pos)\n{   // world to screen coordinates\n    vec4 clipvertex = modelviewproj * vec4(pos,1.0);\n    vec4 ndc = clipvertex/clipvertex.w;\n    vec4 transformed = viewport * ndc;\n    return transformed;\n} //wts\n\n// screen to world: http://bookofhook.com/mousepick.pdf\nvec4 WorldRayFromScreenPoint(in vec2 scr_pt,\n    in mat4 view_inv,\n    in mat4 proj_inv,\n    in mat4 viewp_inv)\n{   // Returns world coords of a point on a ray passing through\n    // the camera position and scr_pt.\n\n    vec4 ndc = viewp_inv * vec4(scr_pt,0.0,1.0);\n        // z=0.0 => it's a ray.  0 is an arbitrary choice in the\n        // view volume.\n        // w=1.0 => we don't need to undo the perspective divide.\n        //      So clip coords == NDC\n\n    vec4 view_coords = proj_inv * ndc;\n        // At this point, z=0 will have become something in the\n        // middle of the projection volume, somewhere between\n        // near and far.\n    view_coords = view_coords / view_coords.w;\n        // Keepin' it real?  Not sure what happens if you skip this.\n    //view_coords.w = 0.0;\n        // Remove translation components.  Note that we\n        // don't use this trick.\n    vec4 world_ray_point = view_inv * view_coords;\n        // Now scr_pt is on the ray through camera_pos and world_ray_point\n    return world_ray_point;\n} //WorldRayFromScreenPoint\n\nvec3 hsv2rgb(vec3 c) {\n    // by hughsk, from https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl .\n    // All inputs range from 0 to 1.\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat scalesin(in float bot, in float top, in float x)\n{   //rescale [-1,1] to [bot, top]\n    return mix(bot, top, clamp((x+1.0)*0.5, 0.0, 1.0));\n}\n\n\n\n// }}}1\n\n// VOXEL MARCHING\n// {{{1\n\n// GLSL implementation by cxw.\n// Origial by http://gamedev.stackexchange.com/users/8806/maxim-kamalov , aka\n// dogfuntom, https://gist.github.com/dogfuntom .\n// See http://gamedev.stackexchange.com/questions/47362/cast-ray-to-select-block-in-voxel-game#comment188335_49423\n// Modified from https://gist.github.com/cc881c8fc86ad43d55d8.git\n// Heavily based on:\n// http://gamedev.stackexchange.com/a/49423/8806\n\n// Variables for voxel marching\nstruct VM2State {\n    // Parameters\n    vec3 origin;\n    vec3 direction;\n    vec3 world_min;\n    vec3 world_max;\n\n    // Internals\n    vec3 curr;      //where we are now - was x, y, z vars\n    vec3 stepdir;   //was step[XYZ]\n    vec3 tMax;\n    vec3 tDelta;\n    float max_t;\n}; //VM2State\n\n\n\n/// Handle edge cases when initializing marching\nfloat intbound(float s, float ds)\n{\n    // Some kind of edge case, see:\n    // http://gamedev.stackexchange.com/questions/47362/cast-ray-to-select-block-in-voxel-game#comment160436_49423 :\n        // \"The edge case is where a coordinate of the ray origin is an\n        //integer value, and the corresponding part of the ray direction is\n        //negative. The initial tMax value for that axis should be zero, since\n        //the origin is already at the bottom edge of its cell, but it is\n        //instead 1/ds causing one of the other axes to be incremented instead.\n        //The fix is to write intfloor to check if both ds is negative and s is\n        //an integer value (mod returns 0), and return 0.0 in that case. â€“\n        //codewarrior Dec 24 '14 at 12:00\"\n\n    // by http://gamedev.stackexchange.com/users/57468/codewarrior\n    bool sIsInteger = (fract(s)==0.0);  //TODO check against epsilon?\n    if (ds < 0.0 && sIsInteger)\n        return 0.0;\n\n    return (\n        ( (ds > 0.0) ? (ceil(s) - s) : (s - floor(s)) )\n            // I don't need intbound_ceil here since I make sure origin\n            // always has a fractional part using hack_camera().\n        /\n        abs(ds)\n    );\n} //intbound\n\nbool VM2_init(out VM2State state,\n    in vec3 origin, in vec3 direction, in float max_dist,\n    in vec3 world_min, in vec3 world_max)\n{ //The initialization portion of VM2_raycast (q.v.).\n  //Returns true if successful.\n\n    if(length(direction)==0.0) {\n        return false;   // *** EXIT POINT ***\n    }\n\n    state.origin = origin;\n    state.direction = direction;\n    state.world_min = world_min;     // TODO? make sure they are ints?\n    state.world_max = world_max;\n\n    state.curr = floor(origin);\n    state.stepdir = sign(direction);\n\n    state.tMax.x = intbound(origin.x, direction.x);\n    state.tMax.y = intbound(origin.y, direction.y);\n    state.tMax.z = intbound(origin.z, direction.z);\n\n    state.tDelta.x = state.stepdir.x / direction.x;\n    state.tDelta.y = state.stepdir.y / direction.y;\n    state.tDelta.z = state.stepdir.z / direction.z;\n\n    state.max_t = max_dist / length(direction);\n\n    \n\n    return true;\n} //VM2_init\n\n//DEBUG: these are floats.  For production, change them back to int.\n#define VM2_HIT (1.0)\n#define VM2_NOTYET (-1.0)\n#define VM2_DONE (0.0)\n\nvec4 VM2_step(inout VM2State state,\n                out vec3 voxel, out vec3 hitpoint, out vec3 normal,\n                out float hit_t)\n{ //returns:\n  // VM2_HIT    if we hit a voxel in the world;\n  // VM2_NOTYET if we have not yet reached the world; or\n  // VM2_DONE   if we have traced off the end of the world or have gone\n  //            too far along the ray.\n  // If VM2_HIT, voxel and normal are filled in:\n  //    voxel       coordinates of the voxel we're in\n  //    hitpoint    The actual point where the ray hit the voxel\n  //    normal      normal of the voxel at hitpoint\n\n    vec3 ret_normal;    //value to be returned\n\n    // Go to the next voxel.\n    //DEBUG: The *0.05's below are to rescale for visibility, and are debug.\n    if (state.tMax.x < state.tMax.y) {\n        if (state.tMax.x < state.tMax.z) {\n            if (state.tMax.x > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.x += state.stepdir.x;    // Update which cube we are now in.\n            hit_t = state.tMax.x;               // Record where we hit the cube\n            state.tMax.x += state.tDelta.x;\n                // Adjust state.tMax.x to the next X-oriented crossing\n            ret_normal = vec3(-state.stepdir.x, 0.0, 0.0);\n                // Record the normal vector of the voxel we just entered.\n        } else {\n            if (state.tMax.z > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.z += state.stepdir.z;\n            hit_t = state.tMax.z;\n            state.tMax.z += state.tDelta.z;\n            ret_normal = vec3(0.0, 0.0, -state.stepdir.z);\n        }\n    } else {\n        if (state.tMax.y < state.tMax.z) {\n            if (state.tMax.y > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.y += state.stepdir.y;\n            hit_t = state.tMax.y;\n            state.tMax.y += state.tDelta.y;\n            ret_normal = vec3(0.0, -state.stepdir.y, 0.0);\n        } else {\n            if (state.tMax.z > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.z += state.stepdir.z;\n            hit_t = state.tMax.z;\n            state.tMax.z += state.tDelta.z;\n            ret_normal = vec3(0.0, 0.0, -state.stepdir.z);\n        }\n    } //end conditionals\n\n    // Check if we're past the world\n    if( (state.stepdir.x>0.0) ?\n        (state.curr.x>=state.world_max.x) : (state.curr.x<state.world_min.x) )\n        return vec4(1.0,0.0,0.0,VM2_DONE);\n    if( (state.stepdir.y>0.0) ?\n        (state.curr.y>=state.world_max.y) : (state.curr.y<state.world_min.y) )\n        return vec4(0.0,1.0,0.0,VM2_DONE);\n    if( (state.stepdir.z>0.0) ?\n        (state.curr.z>=state.world_max.z) : (state.curr.z<state.world_min.z) )\n        return vec4(0.0,0.0,1.0,VM2_DONE);\n\n    // Check if we're not yet at the world.\n    // TODO in VM2_init, fast-forward to the boundary of the world so that\n    // this case never happens.\n    if( (state.stepdir.x>0.0) ?\n        (state.curr.x<state.world_min.x) : (state.curr.x>=state.world_max.x) )\n        return vec4(0.5,0.0,0.0,VM2_NOTYET);\n    if( (state.stepdir.y>0.0) ?\n        (state.curr.y<state.world_min.y) : (state.curr.y>=state.world_max.y) )\n        return vec4(0.0,0.5,0.0,VM2_NOTYET);\n    if( (state.stepdir.z>0.0) ?\n        (state.curr.z<state.world_min.z) : (state.curr.z>=state.world_max.z) )\n        return vec4(0.0,0.0,0.5,VM2_NOTYET);\n\n    // If we made it here, we are in a voxel cell.\n    voxel = state.curr;\n    hitpoint = state.origin + hit_t*state.direction;\n    normal = ret_normal;\n    return vec4(voxel,VM2_HIT);     //voxel is debug\n} //VM2_step\n\n// }}}1\n\n// GEOMETRY HIT-TESTING ///////////////////////////////\n// {{{1\n\n\n\n/// Faster routine for the special case of the main text\nvec3 HitZZero(vec3 camera_pos, vec3 rayend)\n{   // Find where the ray meets the z=0 plane.  The ray is\n    // camera_pos + t*(rayend - camera_pos) per Hook.\n    float hit_t = -camera_pos.z / (rayend.z - camera_pos.z);\n    return (camera_pos + hit_t * (rayend-camera_pos));\n} //HitZZero\n\n/// HitZZero(), but using a direction vector.\nvoid HitZZeroDir(in vec3 camera_pos, in vec3 ray_dir,\n                out vec3 hit_pos, out float hit_t)\n{   // Find where the ray meets the z=0 plane.  The ray is\n    // camera_pos + t*(rayend - camera_pos) per Hook.\n    hit_t = -camera_pos.z / ray_dir.z;\n    hit_pos = (camera_pos + hit_t * ray_dir);\n} //HitZZeroDir\n\n/// HitZZeroDir(), but for z!=0\nvoid HitZDir(in vec3 camera_pos, in vec3 ray_dir, in float z,\n                out vec3 hit_pos, out float hit_t)\n{   // Find where the ray meets the z=0 plane.  The ray is\n    // camera_pos + t*(rayend - camera_pos) per Hook.\n    hit_t = (z-camera_pos.z) / ray_dir.z;\n    hit_pos = (camera_pos + hit_t * ray_dir);\n} //HitZDir\n\n// --- IsPointInRectXY ---\n// All polys will be quads in the X-Y plane, Z=0.\n// All quad edges are parallel to the X or Y axis.\n// These quads are encoded in a vec4: (.x,.y) is the LL corner and\n// (.z,.w) is the UR corner (coords (x,y)).  The UR corner is not\n// inclued in the poly.\n\nbool IsPointInRectXY(in vec4 poly_coords, in vec2 world_xy_of_point)\n{\n    // return true if world_xy_of_point is within the poly defined by\n    // poly_coords in the Z=0 plane.\n    // I.e., xy >= poly_coords.xy, and xy < poly_coords.zw.\n    // I can test in 2D rather than 3D because all the geometry\n    // has z=0 and all the quads are planar.\n\n    float x_test, y_test;\n    x_test = step(poly_coords.x, world_xy_of_point.x) *\n            (1.0 - step(poly_coords.z, world_xy_of_point.x));\n        // step() is 1.0 if world.x >= poly_coords.x\n        // 1-step() is 1.0 if world.x < poly_coords.z\n    y_test = step(poly_coords.y, world_xy_of_point.y) *\n            (1.0 - step(poly_coords.w, world_xy_of_point.y));\n\n    return ( (x_test>=0.9) && (y_test >= 0.9) );\n        // Not ==1.0 because these are floats!\n\n} //IsPointInRectXY\n\n\n\n// }}}1\n\n// TEXT RENDERING /////////////////////////////////////\n// {{{1\n\n// Text-rendering internal parameters\n#define LETTER_EPSILON (0.001)\n    // small enough for our purposes.\n#define SIDE_LETTERS (4)\n    // How many letters to render on each side of the current one.\n    // Set to fill the screen at the desired aspect ratio and orientation.\n\n\n\nbool is_in_basic_message(in vec2 in_pt,\n    in float first_charidx, in float clip_charidx,\n    in vec2 text_origin)\n{   // returns true iff world_xy_of_point is the message for this part,\n    // which begins with first_charidx at text_origin,\n    // upright in the z=0 plane.\n\n    vec2 pt = in_pt - text_origin;     // adjust for where the text is\n\n    float nchars = (clip_charidx-first_charidx);\n        //not ()+1 because clip_charidx is one past the last char to show.\n    if( (pt.x<0.0) || (pt.x>=nchars*GRID_PITCH) ) {\n        return false;   //outside - can't hit\n    }\n\n    if( (pt.y<0.0) || (pt.y>GRID_CHARHT*GRID_VPITCH) ) {\n        return false;   //ditto\n    }\n\n    // Which letter are we in?  There can be only one.\n    float ltridx = floor(pt.x/GRID_PITCH);\n    float ofs = ltridx * GRID_PITCH;\n    vec2 shifted_pt = pt - vec2(ofs,0.0);   // with respect to the letter\n    float mask = get_seg_mask(first_charidx + ltridx);\n\n    // Early exit on spaces\n    if(mask <= LETTER_EPSILON) {\n        return false;\n    }\n\n    // check each segment in turn\n    for(int seg_idx=0; seg_idx<NSEGS; ++seg_idx) {\n        if(mod(mask, 2.0)>LETTER_EPSILON) {\n            // Where is this segment of this letter?\n            vec4 theshape = SEG_SHAPES[seg_idx];\n\n            // Check if we are in the segment\n            if(IsPointInRectXY(theshape, shifted_pt)) {\n                return true;    // as soon as we're in a segment,\n            }                   // we don't need to check any others\n\n        } //endif this segment is in mask\n\n        mask = floor(mask * 0.5);\n            //move to next bit and drop fractional part\n\n        // Early exit when you run out of segments\n        if(mask<=LETTER_EPSILON) {\n            return false;       // no more chances\n        }\n    } //foreach segment\n\n    return false;\n} //is_in_basic_message\n\n// }}}1\n\n// VOXEL LOGO /////////////////////////////////////////\n// {{{1\n\n// Voxel-Logo parameters.  Note: Voxels are every 1 unit at present.\n#define VLOGO_HEIGHT (8.0)\n#define VLOGO_Y_MAX (VLOGO_HEIGHT - 1.0)\n#define VLOGO_WIDTH (7.0)\n#define VLOGO_X_MAX (VLOGO_WIDTH - 1.0)\n#define VLOGO_THICKNESS (1.0)\n    // along the X axis\n\n/// Determine whether the ray from #ray_origin in #ray_direction hits the logo.\n/// The logo is in the X = #logo_origin.x plane, beginning at #logo_origin.yz.\n///\n/// @return {bvec2} (did_hit, was_error)\n/// did_hit is true on hit.  If true, _voxel_ holds the grid coordinates of\n/// the voxel that was hit, _hitpoint_ holds the actual point hit, and\n/// _normal_ is the normal of the voxel face that was hit.\n/// was_error is true on error.\n///\nbvec2 voxel_is_in_logo(\n    in vec3 ray_origin, in vec3 ray_direction,\n    in vec3 logo_origin,\n    out vec3 voxel, out vec3 hitpoint, out vec3 normal,\n    out float hit_t)\n{\n\n    //Retval storage, so we don't trash the out parameters if there's no hit.\n    vec3 ret_voxel, ret_hitpoint, ret_normal;\n    float ret_hit_t;\n\n    // TODO RESUME HERE double the size of the logo so it fills the screen\n    // better during the intropart\n\n    // Setup voxel marching\n    bool ok;\n    VM2State state;\n    ok = VM2_init(state, ray_origin, ray_direction, MAX_DIST,\n        //world_min\n        logo_origin,\n        //world_max - last+1\n        logo_origin + vec3(VLOGO_THICKNESS, VLOGO_HEIGHT, VLOGO_WIDTH)\n    );\n\n    if(!ok) return bvec2(false, true);\n        // *** EXIT POINT *** can't init => can't hit\n\n    // Run the marching loop.  At each voxel, check the mask for only\n    // the letter that voxel might be in.\n    for(int step_idx=0; step_idx<MAX_VOXEL_STEPS; ++step_idx) {\n        vec4 hit = VM2_step(state, ret_voxel, ret_hitpoint, ret_normal,\n                                    ret_hit_t);\n\n        if(hit.w == VM2_DONE) return bvec2(false, false); // *** EXIT POINT ***\n\n        if(hit.w == VM2_NOTYET) continue;     // to the next voxel step\n\n        // If we got here, we are in a voxel that is in the world.\n        bool did_hit = false;\n\n        // Don't test X, because the \"are we in the world\" test covers that.\n        // We just need to test Z across the width and Y across the height.\n        // Also, shift from voxel coordinates into logo-relative coords.\n        float x = ret_voxel.z - logo_origin.z;\n        float y = ret_voxel.y - logo_origin.y;\n\n        // Sanity check.  Do we need this?\n        if(x < 0.0 || y<0.0 || x>VLOGO_X_MAX || y>VLOGO_Y_MAX) continue;\n\n        /// Distance from the closest edges in X and Y\n        float xe = min(x, abs(VLOGO_X_MAX - x));\n        float ye = min(y, abs(VLOGO_Y_MAX - y));\n\n        // TODO check here to see if voxel (x,y) is in the logo\n\n        if(did_hit) {\n           // A hit!  A very palpable hit.\n           voxel = ret_voxel;\n           hitpoint = ret_hitpoint;\n           normal = ret_normal;\n           hit_t = ret_hit_t;\n           return bvec2(true, false);   // did hit; no error\n        }\n\n    } //for each voxel step\n\n    return bvec2(false, false);     // didn't hit, but no error.\n} //voxel_is_in_logo\n\n\n\n\n\n// }}}1\n\n// BUMP MAPPING ///////////////////////////////////////\n// {{{1\n\nvec3 bump_normal(in sampler2D unit_wave, in vec2 tex_coord)\n{\n// https://stackoverflow.com/a/5284527/2877364 by\n// https://stackoverflow.com/users/607131/kvark\n    //float center = texture(iChannel0, hitlocn.xy * TEX_SCALE).ggg;\n    const vec2 size = vec2(2.0,0.0);\n    const ivec3 off = ivec3(-1,0,1);\n\n    vec4 wave = texture(unit_wave, tex_coord);\n    float s11 = wave.x;\n    float s01 = textureOffset(unit_wave, tex_coord, off.xy).x;\n    float s21 = textureOffset(unit_wave, tex_coord, off.zy).x;\n    float s10 = textureOffset(unit_wave, tex_coord, off.yx).x;\n    float s12 = textureOffset(unit_wave, tex_coord, off.yz).x;\n    vec3 va = normalize(vec3(size.xy,s21-s01));\n    vec3 vb = normalize(vec3(size.yx,s12-s10));\n    //vec4 bump = vec4( cross(va,vb), s11 );\n    //The result is a bump vector: xyz=normal, a=height\n    return cross(va,vb);\n} //bump_normal\n\n// }}}1\n\n// CAMERA AND LIGHT ///////////////////////////////////\n// {{{1\n\n// --- Helpers ---\n\n#define GAMMA (2.2)\n#define ONE_OVER_GAMMA (0.45454545454545454545454545454545)\n\nvec3 phong_color(\n    in vec3 pixel_pos, in vec3 normal, in vec3 camera_pos,      // Scene\n    in vec3 light_pos, in vec3 ambient_matl,                    // Lights\n    in vec3 diffuse_matl, in vec3 specular_matl,                // Lights\n    in float shininess)                                         // Material\n{   // Compute pixel color using Blinn-Phong shading with a white light.\n    // Modified from\n    // https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\n    // Normal must be normalized on input.  All inputs are world coords.\n    // Set shininess <=0 to turn off specular highlights.\n    // Objects are one-sided.\n\n    vec3 light_dir = normalize(light_pos - pixel_pos);\n    vec3 eye_dir = normalize(camera_pos - pixel_pos);\n\n    if(dot(light_dir, eye_dir) < 0.0) {\n        return ambient_matl;       // Camera behind the object\n    }\n\n    float lambertian = max(0.0, dot(light_dir, normal));        // Diffuse\n\n    float specular = 0.0;\n    if((lambertian > 0.0) && (shininess > 0.0)) {               // Specular\n        vec3 reflectDir = reflect(-light_dir, normal);\n        float specAngle = max(dot(reflectDir, eye_dir), 0.0);\n        specular = pow(specAngle, shininess);\n    }\n    lambertian = pow(lambertian, ONE_OVER_GAMMA);\n    specular = pow(specular, ONE_OVER_GAMMA);\n\n    vec3 retval = ambient_matl + lambertian*diffuse_matl +\n        specular*specular_matl;\n\n    return clamp(retval, 0.0, 1.0);     // no out-of-range values, please!\n\n} //phong_color\n\nhighp vec3 pos_clelies(in float the_time, in float radius)\n{   //Clelies curve\n    //thanks to http://wiki.roblox.com/index.php?title=Parametric_equations\n    vec3 pos; float m = 0.8;\n    highp float smt = sin(m*the_time);\n    pos.x = radius * smt*cos(the_time);\n    pos.y = radius * smt*sin(the_time);\n    pos.z = radius * cos(m*the_time);\n    return pos;\n} //camerapos\n\n/// Get the position of moving text in the main parts.\nvoid get_text_origin(\n    //in float partnum,\n    in float charidx_frac, out vec3 text_origin\n    //out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n    //out vec3 light_pos\n    )\n{\n    text_origin = vec3(-charidx_frac*GRID_PITCH-5.0, 0.0, 0.0);\n        // Origin moves to the left, so the view pans to the right.\n}\n\n// --- Per-part routines referenced above ---\n\nvoid do_cl_nop(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(0.0,0.0,10.0);    //default\n    camera_look_at = vec3(0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n} //do_cl_nop\n\nvoid do_cl_main(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    // Old lines - for moving camera\n    //camera_pos = vec3(charidx_frac*GRID_PITCH-5.0, GRID_CHARHT*0.5, 10.0);\n    //camera_look_at = vec3(camera_pos.x+3.0, GRID_CHARHT*0.5,0);\n\n    // New lines - for use with moving text\n    camera_pos = vec3(-5.0, GRID_CHARHT*0.5, 10.0);\n    camera_look_at = vec3(-5.0+3.0, GRID_CHARHT*0.5,0);\n\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n    light_pos.y += 4.0 * sin(charidx_frac);\n} //do_cl_main\n\nvoid do_cl_intro(in float pn, in float cf, out vec3 camera_pos, out vec3 cla, out vec3 cu, out float fovy_deg, out vec3 light_pos) {\n    do_cl_main(pn, cf, camera_pos, cla, cu, fovy_deg, light_pos);\n    fovy_deg = 39.0;    // a bit tighter for the intro, so we can see\n                        // the logo better.\n    light_pos = camera_pos; // TODO improve this later.\n} //do_cl_intro\n\n\n\n\nvoid do_cl_blank(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line2(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line3(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line4(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line5(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line6(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_nameus(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_greet(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\n\nvoid do_cl_credz(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(0.0, GRID_CHARHT*0.5, 10.0);\n    camera_look_at = vec3(0.0-2.0, GRID_CHARHT*0.5,0);\n\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 50.0;\n    light_pos = camera_pos;\n    light_pos.y += 4.0 * sin(charidx_frac);\n} //do_cl_main\n\nvoid do_cl_last1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_ncps1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_year1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_endpart(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\n\n//void do_cl_xport(in float partnum, in float charidx_frac, out vec3 camera_pos,\n//     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n//     out vec3 light_pos)\n//{ //static camera\n//    camera_pos = vec3(/*charidx_frac*/\n//        floor(XPORT_NCHARS/2.0)*GRID_PITCH+GRID_PITCH*0.3, GRID_CHARHT*0.5 + 0.5, 10.0);\n//    camera_look_at = vec3(camera_pos.x, GRID_CHARHT*0.5,0);\n//    camera_up = vec3(0.0, 1.0, 0.0);\n//    fovy_deg = 68.0;\n//    light_pos = camera_pos;\n//} //do_cl_xport\n//\n//void do_cl_line2(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_s_plain(pn, cf, cp, cla, cu, fd, lp); }\n//\n//void do_cl_line3(in float partnum, in float charidx_frac, out vec3 camera_pos,\n//     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n//     out vec3 light_pos)\n//{ //For the voxel part.\n//    camera_pos = vec3(charidx_frac*VGRID_PITCH-5.0, VGRID_CHARHT*0.5+0.5, 20.0);\n//    camera_look_at = vec3(camera_pos.x-0.5, VGRID_CHARHT*0.5,0.0);\n//\n//    camera_up = vec3(0.0, 1.0, 0.0);\n//    fovy_deg = 45.0;\n//    light_pos = vec3(\n//        camera_pos.x + VGRID_PITCH*sin(TWO_PI*0.125*charidx_frac),\n//        camera_pos.y+6.0,\n//        camera_pos.z-2.0\n//    );\n//} //do_cl_line3\n//\n//void do_cl_howto(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_line3(pn, cf, cp, cla, cu, fd, lp); }\n//\n//void do_cl_endpart(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_nop(pn, cf, cp, cla, cu, fd, lp); }\n\n\n\n/// Make sure the camera is never at an integer coordinate.\n/// TODO someday --- fix the voxel marcher ;)\nvec3 hack_camera(vec3 camera_pos)\n{\n    return vec3(    fract(camera_pos.x) >= SMALLEST_CAM_FRACTION ?\n        camera_pos.x :\n        (\n            (abs(camera_pos.x) - fract(camera_pos.x) +\n                    SMALLEST_CAM_FRACTION)\n            *\n            sign(camera_pos.x)\n        )\n,     fract(camera_pos.y) >= SMALLEST_CAM_FRACTION ?\n        camera_pos.y :\n        (\n            (abs(camera_pos.y) - fract(camera_pos.y) +\n                    SMALLEST_CAM_FRACTION)\n            *\n            sign(camera_pos.y)\n        )\n,     fract(camera_pos.z) >= SMALLEST_CAM_FRACTION ?\n        camera_pos.z :\n        (\n            (abs(camera_pos.z) - fract(camera_pos.z) +\n                    SMALLEST_CAM_FRACTION)\n            *\n            sign(camera_pos.z)\n        )\n);\n}\n\n\n// }}}1\n\n// ARTISTRY ///////////////////////////////////////////\n// {{{1\n\nvoid do_hey(in float the_time, in vec2 charpos, in float clip_charidx,\n            out vec3 diffuse_matl)\n{\n    vec2 pos;\n    diffuse_matl = vec3(0.0);\n    vec2 text_origin = vec2(GRID_PITCH * (HEY_X_CELLS - 4.0 - 1.0), 0.0);\n        // Multiply by GRID_PITCH ecause text_origin is in logical units,\n        // not grid cells.\n        // We have four characters, so leave four spaces, plus one at the\n        // right for a margin.\n\n    // Flicker minimum - starts at 1 (no flicker); gradually drops to 0.2.\n    float flicker_depth =\n            1.0 - 0.8 * smoothstep(YEAR1_START, YEAR1_START+5.0, the_time);\n\n    float global_fadeout =\n            smoothstep(NCPS1_START, NCPS1_START+2.0, the_time) *\n            (1.0 - smoothstep(ENDPART_START - 3.0, ENDPART_START, the_time));\n\n    //NCPS\n    pos = charpos - vec2(0.0, 1.0*GRID_VPITCH); // move up one line\n    if(is_in_basic_message(pos, NCPS1_REALSTART, clip_charidx, text_origin)) {\n        diffuse_matl = vec3(1.0,0.27058823529411762943,0.0);\n            // orangered from\n            // https://www.rapidtables.com/web/color/orange-color.html\n\n        // Fuzz the logo randomly for a flickery effect\n        if(rand(the_time * 0.01) > 0.7) {\n            diffuse_matl *= clamp(rand(the_time*0.2), flicker_depth, 1.0);\n        }\n        diffuse_matl *= global_fadeout;\n        return;\n    }\n\n    // 2018\n    pos = charpos; // - vec2(0.0, 0.0*GRID_VPITCH);\n    if( is_in_basic_message(pos, YEAR1_REALSTART, clip_charidx, text_origin)) {\n        diffuse_matl = vec3(0.54117647058823525885,0.02745098039215686236,0.02745098039215686236);\n            // blood red from http://www.colourlovers.com/color/8A0707/Blood_red\n\n        // mul by PI just to shift it.  Multiplicative rather than additive\n        // because if it's additive, whatever happens to NCPS happens to\n        // 2018 shortly after that.\n        if(rand(the_time * 0.01 * PI) > 0.7) {\n            diffuse_matl *= clamp(rand(the_time*0.2 * PI), flicker_depth, 1.0);\n        }\n        diffuse_matl *= global_fadeout;\n        return;\n    }\n} //do_hey\n\n//void color_xport(in vec2 wpt, in vec2 uvpt, in float dt,\n//                out vec3 ambient_matl, out vec3 diffuse_matl,\n//                out float shininess)\n//{ // World point, Fragment point ([0,1] range), time within the effect.\n//  // Fades in over time=[0, XPORT_FADEIN_DURATION].\n//\n//    float ramp = smoothstep(0.0, XPORT_FADEIN_DURATION, dt);\n//    ambient_matl = vec3(0.0);   //for now\n//\n//    // Shininess\n//    float s_dt = scalesin(-PI_OVER_2, PI_OVER_2, dt/XPORT_FADEIN_DURATION);\n//        // s_dt goes from 0 to pi/2\n//    float s_top = mix(XP_SHINE_HIGH, XP_SHINE_AIM, dt/XPORT_FADEIN_DURATION);\n//    float s_bot = mix(XP_SHINE_LOW, XP_SHINE_AIM, dt/XPORT_FADEIN_DURATION);\n//    float shine = sin(TWO_PI*XP_SHINE_HZ*dt);\n//    shininess = scalesin(s_bot, s_top, shine); // [XP_SHINE_LOW, X~_HIGH]\n//\n//    // Overall gain\n//    float g_top = clamp(ramp*1.5, 0.0, 1.0);\n//    float g_bot = ramp*ramp;    // <=ramp, so <= g_top\n//    float gain = sin(TWO_PI*XP_GAIN_HZ*dt);\n//    gain = scalesin(g_bot, g_top, gain);    // [0,1]\n//\n//    // Localized gain - horizontal\n//    float s;\n//    < ? for my $idx (0..$#hs) {\n//        my $lr = $hs[$idx];?>\n//        s = sin(TWO_PI*XP_H< ?=$idx?>_PER_U * uvpt.x +\n//            TWO_PI*XP_H< ?=$idx?>_PHASE +\n//            TWO_PI*XP_H< ?=$idx?>_PHASE_PER_SEC * dt);\n//        s = mix(s, 1.0, ramp);     // gain effects are 1.0 at the end\n//        gain *= scalesin(0.0, 1.0, s);\n//    < ? } ?>\n//\n//    diffuse_matl = gain * vec3(0.2, 0.2, 1.0);\n//} //color_xport\n\nbool do_voxel_logo(\n    in vec3 camera_pos, in vec3 raydir_norm, in vec3 logo_origin,\n    // Outputs - only updated if it hits.\n    out vec3 wc_pixel, out vec3 wc_normal,\n    out vec3 ambient_matl, out vec3 diffuse_matl,\n    out float shininess,\n    out float voxel_hit_t)\n{\n    bool did_hit = false;\n    vec3 voxel, hitpoint, normal;\n    float hit_t;\n    bvec2 hit_status = voxel_is_in_logo(\n        camera_pos, raydir_norm, logo_origin,\n        // Outputs\n        voxel, hitpoint, normal, hit_t\n    );\n\n    bool did_hit_voxel = hit_status.x;\n    //bool was_error = hit_status.y;\n\n    //if(was_error) {\n    //    diffuse_matl = vec3(1.0, 0.0, 0.0);\n    //} else\n    if(did_hit_voxel) {\n        did_hit = true;\n        wc_pixel = hitpoint;\n        wc_normal = normal;\n        voxel_hit_t = hit_t;\n        ambient_matl = vec3(0.1, 0.1, 0.1);\n        diffuse_matl = vec3(0.2, 0.3, 0.8);\n\n        shininess = 25.0;\n    }\n\n    return did_hit;\n\n} // do_voxel_logo\n\nvoid renderItAll( in vec4 story, in float the_time, in vec2 uv,\n                    out vec4 fragColor, in vec2 fragCoord )\n{\n    init_charset();\n\n    // --- Story ---\n    float partnum=story[0], charidx_frac=story[1];\n    float first_charidx=story[2], clip_charidx=story[3];\n\n    // --- Camera and light ---\n    vec3 camera_pos, camera_look_at, camera_up, light_pos;\n    float fovy_deg;\n\n    do_camera_light(partnum, charidx_frac,\n        camera_pos, camera_look_at, camera_up, fovy_deg, light_pos);\n    camera_pos = hack_camera(camera_pos);\n\n    // Camera processing\n    mat4 view, view_inv;\n\n    //camera_look_at.y -= 5.0;    //DEBUG\n    lookat(camera_pos, camera_look_at, camera_up,\n            view, view_inv);\n\n    mat4 proj, proj_inv;\n    //fovy_deg = 25.0;    //DEBUG\n    gluPerspective(fovy_deg, iResolution.x/iResolution.y, 1.0, 10.0,\n                    proj, proj_inv);\n\n    mat4 viewport, viewport_inv;\n    compute_viewport(0.0, 0.0, iResolution.x, iResolution.y,\n                        viewport, viewport_inv);\n\n    // --- Geometry ---\n\n    vec3 rayend = WorldRayFromScreenPoint(fragCoord,\n                                    view_inv, proj_inv, viewport_inv).xyz;\n    vec3 raydir_norm = normalize(rayend - camera_pos);\n\n    // Each part determines world coords of the hit, normal at the\n    // hit point, and base color of the geometry.\n\n    vec3 wc_pixel;  // world coords of this pixel\n    vec3 wc_normal; // ditto for the normal\n    vec3 ambient_matl = vec3(0.1);\n    vec3 diffuse_matl = vec3(0.0);\n        // material - light is always white.  Alpha is always 1.\n    float shininess = 4.0;  //Phong shininess\n    bool did_hit = false;   //if not did_hit, just use _diffuse_.\n\n    if ((partnum == BLANK) || (partnum == ENDPART) ) {    // black screens\n        diffuse_matl = vec3(0.0);\n    } else\n\n    if( (partnum == NCPS1) || (partnum == YEAR1) ) {  // Static text\n        // Straight 2d\n        // Grid for this part is 9 chars across and 3 high,\n        // offset by half a character vertically.\n        vec2 charpos = uv * vec2(HEY_X_CELLS,HEY_Y_CELLS);\n            //now charpos is 0..8 horz and 0..3 vert\n        charpos.y -= HEY_Y_VOFS;    // now -0.5..2.5 vert are on screen\n        charpos *= vec2(GRID_PITCH, GRID_VPITCH);\n            // Now in coordinates of the segments\n\n        do_hey( the_time, charpos,\n                YEAR1_CLIPCHARIDX,  //clip_charidx,\n                diffuse_matl);\n            //did_hit stays false so we just use diffuse_matl.\n\n    } else\n\n    { // scrollers\n        bool did_hit_message=false, did_hit_voxel=false;\n\n        // Message outputs\n        float message_hit_t;\n        vec3 message_hit_locn;\n\n        // Voxel outputs\n        float voxel_hit_t;\n        vec3 vwc_pixel, vwc_normal, vambient_matl, vdiffuse_matl;\n        float vshininess;\n\n        // Do the message\n\n        vec3 text_origin;\n        get_text_origin(charidx_frac, text_origin);\n            // The letters move, not the camera\n\n        HitZDir(camera_pos, raydir_norm, MESSAGE_Z,\n            message_hit_locn, message_hit_t);\n            // message_hit_locn is where it hits z=MESSAGE_Z,\n            // where the letters are.  For now, ignore text_origin.z.\n\n        // Swirly thing in the back\n        if( (partnum != LINE1) && (partnum != NAMEUS) ) {\n            // Map the Cartesian hit location to a polar hit location\n            vec2 polar;\n            message_hit_locn.y -= 12.0; //move the shape up on to the screen\n            float theta = atan(message_hit_locn.y, message_hit_locn.x);\n                // theta is on [-pi, pi]\n            float r = length(message_hit_locn.xy - ARC_CENTER);\n            polar.y = r - 5.0; //ARC_DEAD_RADIUS;   //DEBUG\n            polar.x = theta + PI * 20.0;   //DEBUG test\n\n            // Check the hit in the polar system\n            did_hit_message = is_in_basic_message(polar, first_charidx,\n                                clip_charidx, text_origin.xy*vec2(0.15,1.0));\n                                    // slow down the spinning     ^^^^\n        }\n\n        // Now check the actual text, in screen space\n        did_hit_voxel = is_in_basic_message(\n            vec2(uv.x, uv.y)*vec2(25.0, 14.0)+vec2(0.0, -2.0), first_charidx,\n                            clip_charidx, text_origin.xy);\n\n        if(did_hit_voxel) {\n            did_hit_message = false;        // Real message wins\n\n            vwc_pixel = vec3(uv, 0.0);\n            vwc_normal = vec3(0.0,0.0,1.0); //out of the screen\n            vshininess = 25.0;\n            vambient_matl = vec3(0.0);\n            if(partnum == LINE1) {\n                vdiffuse_matl = vec3(1.0,0.0,0.0);\n            } else if(partnum == NAMEUS) {\n                vdiffuse_matl = vec3(0.37254901960784314596, 0.49803921568627451677, 0.08235294117647058709);\n            } else {\n                vdiffuse_matl = vec3(0.1, 0.2, 0.8);\n            }\n        }\n\n//        // Painter's algorithm (sort of)\n//        if(did_hit_message && did_hit_voxel) {\n//            if(message_hit_t < voxel_hit_t) {\n//                did_hit_voxel = false;\n//            } else {\n//                did_hit_message = false;\n//            }\n//        }\n\n        // Now at most one of message or voxel was hit.\n\n        if(did_hit_message) {\n            did_hit = true;\n            wc_pixel = message_hit_locn;\n            wc_normal = vec3(0.0,0.0,-1.0 + 2.0*step(0.0, camera_pos.z));\n                // normal Z is -1 if camera_pos.z<0.0, and +1 otherwise.\n                // This benefits TWOSIDED.\n\n            // Perturb the normal by bump-mapping\n            wc_normal = normalize(\n                wc_normal + bump_normal(iChannel0,\n                                            message_hit_locn.xy * TEX_SCALE)\n            );\n            ambient_matl = vec3(0.2, 0.2, 0.1);\n            diffuse_matl = vec3(0.6,0.6,0.3);\n            shininess = 50.0;\n\n        } else if(did_hit_voxel) {\n            did_hit = true;\n            wc_pixel = vwc_pixel;\n            wc_normal = vwc_normal;\n            ambient_matl = vambient_matl;\n            diffuse_matl = vdiffuse_matl;\n            shininess = vshininess;\n        }  // else diffuse is the default (0,0,0).\n\n    }\n\n    // --- Lighting ---\n    // Phong shading based on the Geometry section's output values\n\n    if(did_hit) {               // a hit\n        vec3 rgb = phong_color(\n            wc_pixel, wc_normal, camera_pos, light_pos,\n            ambient_matl, diffuse_matl, vec3(1.0), shininess);\n\n        fragColor = vec4(rgb, 1.0);\n    } else {                    // no hit - just use diffuse_matl\n        fragColor = vec4(diffuse_matl, 1.0);\n    }\n} //renderItAll\n\n// }}}1\n\n// MAIN ///////////////////////////////////////////////\n// {{{1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Init\n    float the_time = iTime + START_OFS_SEC; //0.5*mod(iGlobalTime, 16.0)+S_PLAIN_START;\n    //the_time += (NCPS1_START - 2.0); //DEBUG\n\n    // Basic things we need\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 story = get_story(the_time);\n    float partnum = story[0];\n\n\n    // Main: grab from BufA\n\n    if( (partnum == NCPS1) || (partnum == YEAR1) ||\n        (partnum == LINE1) || (partnum == NAMEUS) ) {  // No blur\n        fragColor = texture(iChannel0, uv);   //exact copy\n    } else\n\n    {\n        vec4 accum = vec4(0.0);\n        \n        accum += textureOffset(iChannel0, uv, SAMP_OFS_1);\n        \n        accum += textureOffset(iChannel0, uv, SAMP_OFS_2);\n        \n        accum += textureOffset(iChannel0, uv, SAMP_OFS_3);\n        \n        accum += textureOffset(iChannel0, uv, SAMP_OFS_4);\n        \n        accum *= 0.25000000000000000000;\n        accum = clamp(accum, 0.0, 1.0);\n        fragColor = accum;\n    }\n\n\n\n\n} //mainImage\n\n// }}}1\n\n// vi: set ts=4 sts=4 sw=4 et ai foldmethod=marker foldenable foldlevel=0: //\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n\n// bufa.frag\n\n// by cxw/Necroposters.  CC-BY-SA 3.0\n// https://bitbucket.org/necroposters/ncps-minus-001\n//This file is generated from gfx.frag.in using perlpp.  DO NOT EDIT.\n//Use https://github.com/cxw42/perlpp/, branch 'defines'.\n\n\n\n//music.frag.inc: Music parameters and other common foo ##########\n\n\n\n\n\n\n\n\n\n#define BPM (270.00000000000000000000)\n    // beats per minute\n#define BPS (4.50000000000000000000)\n    // beats per sec = BPM/60 (110 bpm)\n#define SPB (0.22222222222222220989)\n    // sec per beat, precomputed\n#define BPP (2048.0)\n    // beats per pattern - make it longer than the song\n    // if you don't want repeats\n\n// DEBUG: where in the demo you want to start.\n#define START_OFS_SEC 0.00000000000000000000\n\n// Utils //////////////////////////////////////////////////////////////////\nfloat rand(float n){    // http://shadertoy.wikia.com/wiki/Noise\n    // added abs - make sure it's 0..1\n    return fract(abs(cos(n*89.42))*343.42);\n}\n//################################################################\n\n\n\n\n// Reminder: OpenGL-style coord system: +X right, +Y up, +Z toward viewer\n// CONFIG CONSTANTS STRUCTS GLOBALS ///////////////////\n// {{{1\nprecision highp int;    //play it safe.  Also covers\nprecision highp float;  //vectors and matrices.\n\n\n\n// Round text\n#define ARC_CENTER (vec2(0.0, -10.0))\n    // Center of the arc in the plane of the text.  World coords, not screen.\n#define ARC_DEAD_RADIUS (10.0)\n    // Radial dead zone around ARC_CENTER\n\n// Fixed text grid used for do_hey()\n#define HEY_X_CELLS (9.0)\n#define HEY_Y_CELLS (3.0)\n#define HEY_Y_VOFS (0.5)\n\n// How main samples from BUFA\n\n    \n\n\n\n// Voxel logo and related\n#define VLOGO_ORIGIN (vec3(6.0, 1.0, -2.0))\n#define MESSAGE_Z (0.1)\n\n// Bump-mapping\n#define TEX_SCALE (0.2)\n    // iChannel0 is Lichen.\n\n// Timing &c.\n#define LOADING_FREQ (0.2)\n\n#define S_SINE_FREQ (0.02380952380952380952380952380952)\n    // 1/42.  sine letter frequency in cycles per X unit.\n#define S_SINE_GROUP_FREQ (0.03125)\n    // 1/32.  sine group frequency.  If > S_SINE_FREQ, sine gradually\n    // shifts right on screen.\n#define CYL_RADIUS (15.0)\n    // radius of the cylinder for CYL and later parts\n#define TUNNEL_ACCEL (17.0)\n    // Acceleration during TUNNEL, in x units per sec^2\n#define CUBE_FADEIN_TIME (3.0)\n    //fadein in seconds\n\n#define TWOSIDED_RATE (0.3)\n    // how fast you go back and forth\n\n#define PI (3.1415926535897932384626433832795028841971)\n    // from memory :)\n#define PI_OVER_2 (1.5707963267948966192313216916398)\n#define PI_OVER_4 (0.78539816339744830961566084581988)\n#define THREE_PI_OVER_4 (2.3561944901923449288469825374596)\n#define TWO_PI (6.283185307179586)\n#define ONE_OVER_TWO_PI (0.15915494309644431437107064141535)\n    // not from memory :) :)\n\n#define TEE_ZERO (0.001)\n#define TEE_ONE (99999999999999999999.0)\n    // +Inf => 1.0/0.0 gives \"divide by zero during constant folding\" error\n\n#define LTR_Z_THICKNESS (1.0)\n    // in voxels\n#define EPS (0.000001)\n    // Arbitrary choice\n\n#define MAX_VOXEL_STEPS (60)\n    // Empirical - gives a nice disappearing effect at the edges on my\n    // test system\n#define MAX_DIST (100.0)\n\n// xport config\n#define XP_GAIN_HZ (3.0)\n\n#define XP_SHINE_LOW (6.0)\n#define XP_SHINE_HIGH (32.0)\n#define XP_SHINE_AIM (24.0)\n    // what it settles down to\n#define XP_SHINE_HZ (5.5)\n\n// Hack the camera\n#define SMALLEST_CAM_FRACTION (.00001)\n\n// Sinusoids across the u axis (horz)\n\n#define XP_H0_PER_U (30.00000000000000000000)\n    // cycles per screen width (u coordinate 0..1)\n#define XP_H0_PHASE (0.00000000000000000000)\n    // initial phase\n#define XP_H0_PHASE_PER_SEC (1.36590984938686665906)\n    // how much the phase of the sinusoid changes per second\n\n#define XP_H1_PER_U (10.00000000000000000000)\n    // cycles per screen width (u coordinate 0..1)\n#define XP_H1_PHASE (1.00000000000000000000)\n    // initial phase\n#define XP_H1_PHASE_PER_SEC (0.10000000000000000555)\n    // how much the phase of the sinusoid changes per second\n\n#define XP_H2_PER_U (5.00000000000000000000)\n    // cycles per screen width (u coordinate 0..1)\n#define XP_H2_PHASE (0.00000000000000000000)\n    // initial phase\n#define XP_H2_PHASE_PER_SEC (1.00000000000000000000)\n    // how much the phase of the sinusoid changes per second\n\n\n// }}}1\n\n// CHARSET FOR WORLD-COORDINATE LETTERS ///////////////\n// {{{1\n/*\n^ +Y\n9    00000\n8  1   2   3\n7  1   2   3\n6  1   2   3\n5    44444\n4  5       6\n3  5       6\n2 858      6\n1 88877777\n0 888\n   0 12345 6  --> +X\n(lowercase x, dot, and bang are handled separately)\n*/\n\n// Character storage\n#define NSEGS (9)\nvec4 SEG_SHAPES[NSEGS];\n    // All polys will be quads in the X-Y plane, Z=0.\n    // All quad edges are parallel to the X or Y axis.\n    // These quads are encoded in a vec4: (.x,.y) is the LL corner and\n    // (.z,.w) is the UR corner (coords (x,y)).\n\nvec4 SEG_VOXELS[NSEGS];\n    // Same deal, but voxel offsets, start->last+1\n\n// Grid parameters - 2D\n#define GRID_CHARHT (10.0)\n#define GRID_CHARWD (6.0)\n    // Size of each character\n#define GRID_PITCH (7.0)\n    //each char takes up this much space.  Margin is added on the right\n    //and is GRID_PITCH-GRID_CHARWD wide.\n#define GRID_PITCH_RECIP (0.14285714285714285714285714285714)\n    // avoid a division\n#define GRID_VPITCH (12.0)\n    // margin is added on top\n#define THICKNESS (1.0)\n    // how thick each stroke is\n\n#define GRID_XSHIFT (GRID_PITCH * 0.5)\n    // + pitch/0.5 because letters were snapping into\n    // existence at the right side of the screen.\n\n// Grid parameters - voxels.  Twice the size.\n#define VGRID_CHARHT (GRID_CHARHT*2.0)\n#define VGRID_CHARWD (GRID_CHARWD*2.0)\n#define VGRID_PITCH (GRID_PITCH*2.0)\n#define VGRID_PITCH_RECIP (GRID_PITCH_RECIP*0.5)\n#define VGRID_VPITCH (GRID_VPITCH*2.0)\n\n// For upright chars, each char (X,Y) goes from (PITCH*ofs, 0)->(.+WD,HT).\n\nvoid init_charset()\n{\n    float halft = THICKNESS*0.5;\n    float halfht = GRID_CHARHT * 0.5;\n\n    SEG_SHAPES[0] = vec4(THICKNESS, GRID_CHARHT - THICKNESS, GRID_CHARWD-THICKNESS, GRID_CHARHT);\n    SEG_SHAPES[1] = vec4(0.0,                   halfht, THICKNESS,             GRID_CHARHT - halft);\n    SEG_SHAPES[2] = vec4(GRID_CHARWD*0.5-halft, halfht, GRID_CHARWD*0.5+halft, GRID_CHARHT - halft);\n    SEG_SHAPES[3] = vec4(GRID_CHARWD-THICKNESS, halfht, GRID_CHARWD,           GRID_CHARHT - halft);\n    SEG_SHAPES[4] = vec4(THICKNESS, halfht - halft, GRID_CHARWD-THICKNESS, halfht + halft);\n    SEG_SHAPES[5] = vec4(0.0,                   halft,    THICKNESS,             halfht );\n    SEG_SHAPES[6] = vec4(GRID_CHARWD-THICKNESS, halft,    GRID_CHARWD,           halfht );\n    SEG_SHAPES[7] = vec4(THICKNESS, 0, GRID_CHARWD-THICKNESS, THICKNESS);\n    SEG_SHAPES[8] = vec4(0.0, 0.0, THICKNESS, THICKNESS); //dot\n\n    // Voxel grid #1 - not currently in use\n    //Grid_Origin = vec3(GRID_XSHIFT, 0, 0);\n    //Grid_Spacings = vec3(1.0);\n    //Grid_Spacings_Inv = vec3(1.0)/Grid_Spacings;\n\n    // TODO rewrite in terms of #defines.\n    // Z, W are +1 so can use IsPointInRectXY, which does not include the\n    // UR corner in the poly.\n    // Size has been doubled, so we can use multiples of 0.5.\n    SEG_VOXELS[0] = vec4(1.0, 9.0, 5.0,10.0)*vec4(2.0);\n    SEG_VOXELS[1] = vec4(0.0, 5.5, 1.0, 9.5)*vec4(2.0);\n    SEG_VOXELS[2] = vec4(3.0, 6.0, 4.0, 9.0)*vec4(2.0);\n    SEG_VOXELS[3] = vec4(5.0, 5.5, 6.0, 9.5)*vec4(2.0);\n    SEG_VOXELS[4] = vec4(1.0, 5.0, 5.0, 6.0)*vec4(2.0);\n    SEG_VOXELS[5] = vec4(0.0, 1.5, 1.0, 5.5)*vec4(2.0);\n    SEG_VOXELS[6] = vec4(5.0, 1.5, 6.0, 5.5)*vec4(2.0);\n    SEG_VOXELS[7] = vec4(1.0, 1.0, 6.0, 2.0)*vec4(2.0);\n    SEG_VOXELS[8] = vec4(0.0, 0.0, 2.0, 2.0)*vec4(2.0);\n\n} //init_charset\n\n// }}}1\n\n// MESSAGE ////////////////////////////////////////////\n// No music sync found\n// Parts and start times\n#define BLANK (0.0)\n#define BLANK_START (0.00000000000000000000)\n#define LINE1 (1.0)\n#define LINE1_START (2.00000000000000000000)\n#define LINE2 (2.0)\n#define LINE2_START (8.33333333333333214910)\n#define LINE3 (3.0)\n#define LINE3_START (16.66666666666666429819)\n#define LINE4 (4.0)\n#define LINE4_START (23.49999999999999644729)\n#define LINE5 (5.0)\n#define LINE5_START (28.83333333333332859638)\n#define LINE6 (6.0)\n#define LINE6_START (33.16666666666666429819)\n#define NAMEUS (7.0)\n#define NAMEUS_START (40.66666666666666429819)\n#define GREET (8.0)\n#define GREET_START (47.33333333333332859638)\n#define CREDZ (9.0)\n#define CREDZ_START (58.83333333333332859638)\n#define LAST1 (10.0)\n#define LAST1_START (69.00000000000000000000)\n#define NCPS1 (11.0)\n#define NCPS1_START (74.50000000000000000000)\n#define YEAR1 (12.0)\n#define YEAR1_START (77.50000000000000000000)\n#define ENDPART (13.0)\n#define ENDPART_START (92.50000000000000000000)\n\nvec4 get_story(in float time)\n{   //returns vec4(partnum, charidx_frac, first_charidx, clip_charidx)\n    // NOTE: charidx_frac restarts at 0 each part!\n    // first_charidx and clip_charidx are with respect to the whole messge.\n    // Character indices starting with clip_charidx should not be displayed.\n    float partnum, charidx_frac, first_charidx, clip_charidx;\n    if(time<2.00000000000000000000) {\n        partnum=BLANK;\n        charidx_frac=(time-BLANK_START)*0.50000000000000000000;\n        first_charidx=0.0;\n        clip_charidx=0.0;\n    } else\n\n    if(time<8.33333333333333214910) {\n        partnum=LINE1;\n        charidx_frac=(time-LINE1_START)*6.00000000000000000000;\n        first_charidx=1.0;\n        clip_charidx=32.0;\n    } else\n\n    if(time<16.66666666666666429819) {\n        partnum=LINE2;\n        charidx_frac=(time-LINE2_START)*6.00000000000000000000;\n        first_charidx=39.0;\n        clip_charidx=85.0;\n    } else\n\n    if(time<23.49999999999999644729) {\n        partnum=LINE3;\n        charidx_frac=(time-LINE3_START)*6.00000000000000000000;\n        first_charidx=89.0;\n        clip_charidx=130.0;\n    } else\n\n    if(time<28.83333333333332859638) {\n        partnum=LINE4;\n        charidx_frac=(time-LINE4_START)*6.00000000000000000000;\n        first_charidx=130.0;\n        clip_charidx=162.0;\n    } else\n\n    if(time<33.16666666666666429819) {\n        partnum=LINE5;\n        charidx_frac=(time-LINE5_START)*6.00000000000000000000;\n        first_charidx=162.0;\n        clip_charidx=188.0;\n    } else\n\n    if(time<40.66666666666666429819) {\n        partnum=LINE6;\n        charidx_frac=(time-LINE6_START)*6.00000000000000000000;\n        first_charidx=188.0;\n        clip_charidx=229.0;\n    } else\n\n    if(time<47.33333333333332859638) {\n        partnum=NAMEUS;\n        charidx_frac=(time-NAMEUS_START)*3.00000000000000000000;\n        first_charidx=233.0;\n        clip_charidx=253.0;\n    } else\n\n    if(time<58.83333333333332859638) {\n        partnum=GREET;\n        charidx_frac=(time-GREET_START)*6.00000000000000000000;\n        first_charidx=253.0;\n        clip_charidx=318.0;\n    } else\n\n    if(time<69.00000000000000000000) {\n        partnum=CREDZ;\n        charidx_frac=(time-CREDZ_START)*6.00000000000000000000;\n        first_charidx=322.0;\n        clip_charidx=379.0;\n    } else\n\n    if(time<74.50000000000000000000) {\n        partnum=LAST1;\n        charidx_frac=(time-LAST1_START)*6.00000000000000000000;\n        first_charidx=383.0;\n        clip_charidx=412.0;\n    } else\n\n    if(time<77.50000000000000000000) {\n        partnum=NCPS1;\n        charidx_frac=(time-NCPS1_START)*3.00000000000000000000;\n        first_charidx=416.0;\n        clip_charidx=424.0;\n    } else\n\n    if(time<92.50000000000000000000) {\n        partnum=YEAR1;\n        charidx_frac=(time-YEAR1_START)*0.59999999999999997780;\n        first_charidx=425.0;\n        clip_charidx=433.0;\n    } else\n\n    if(time<1092.50000000000000000000) {\n        partnum=ENDPART;\n        charidx_frac=(time-ENDPART_START)*0.00100000000000000002;\n        first_charidx=434.0;\n        clip_charidx=434.0;\n    } else\n\n    {\n        partnum=0.0;\n        charidx_frac=0.0;\n        first_charidx=0.0;\n        clip_charidx=0.0;\n    }\n\n    return vec4(partnum,charidx_frac,first_charidx,clip_charidx);\n} //get_story\n\nvec4 get_seg_vec4(float vecidx) {\n    if(vecidx>=54.0){\n        if(vecidx>=81.0){\n            if(vecidx>=95.0){\n                if(vecidx>=102.0){\n                    if(vecidx>=105.0){\n                        if(vecidx>=108.0) return vec4(251.0,0.0,0.0,0.0);\n                        if(vecidx>=107.0) return vec4(0.0,185.0,235.0,72.0);\n                        if(vecidx>=106.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=105.0) return vec4(107.0,163.0,59.0,211.0);\n                    }else{\n                        if(vecidx>=104.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=103.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=102.0) return vec4(211.0,21.0,248.0,187.0);\n                    }\n                }else{\n                    if(vecidx>=98.0){\n                        if(vecidx>=101.0) return vec4(114.0,187.0,3.0,0.0);\n                        if(vecidx>=100.0) return vec4(187.0,0.0,27.0,178.0);\n                        if(vecidx>=99.0) return vec4(11.0,0.0,178.0,114.0);\n                        if(vecidx>=98.0) return vec4(27.0,26.0,0.0,27.0);\n                    }else{\n                        if(vecidx>=97.0) return vec4(187.0,187.0,0.0,218.0);\n                        if(vecidx>=96.0) return vec4(0.0,0.0,0.0,211.0);\n                        if(vecidx>=95.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }\n            }else{\n                if(vecidx>=88.0){\n                    if(vecidx>=91.0){\n                        if(vecidx>=94.0) return vec4(26.0,219.0,114.0,0.0);\n                        if(vecidx>=93.0) return vec4(211.0,187.0,11.0,27.0);\n                        if(vecidx>=92.0) return vec4(3.0,178.0,0.0,59.0);\n                        if(vecidx>=91.0) return vec4(26.0,59.0,59.0,27.0);\n                    }else{\n                        if(vecidx>=90.0) return vec4(0.0,20.0,0.0,211.0);\n                        if(vecidx>=89.0) return vec4(179.0,18.0,123.0,11.0);\n                        if(vecidx>=88.0) return vec4(211.0,21.0,19.0,0.0);\n                    }\n                }else{\n                    if(vecidx>=84.0){\n                        if(vecidx>=87.0) return vec4(20.0,0.0,15.0,26.0);\n                        if(vecidx>=86.0) return vec4(19.0,124.0,30.0,0.0);\n                        if(vecidx>=85.0) return vec4(235.0,248.0,187.0,0.0);\n                        if(vecidx>=84.0) return vec4(0.0,20.0,0.0,163.0);\n                    }else{\n                        if(vecidx>=83.0) return vec4(211.0,0.0,16.0,72.0);\n                        if(vecidx>=82.0) return vec4(0.0,107.0,163.0,59.0);\n                        if(vecidx>=81.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }\n            }\n        }else{\n            if(vecidx>=67.0){\n                if(vecidx>=74.0){\n                    if(vecidx>=77.0){\n                        if(vecidx>=80.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=79.0) return vec4(234.0,258.0,0.0,0.0);\n                        if(vecidx>=78.0) return vec4(248.0,0.0,218.0,235.0);\n                        if(vecidx>=77.0) return vec4(111.0,0.0,123.0,11.0);\n                    }else{\n                        if(vecidx>=76.0) return vec4(178.0,59.0,235.0,162.0);\n                        if(vecidx>=75.0) return vec4(26.0,187.0,178.0,0.0);\n                        if(vecidx>=74.0) return vec4(187.0,0.0,59.0,27.0);\n                    }\n                }else{\n                    if(vecidx>=70.0){\n                        if(vecidx>=73.0) return vec4(15.0,0.0,107.0,163.0);\n                        if(vecidx>=72.0) return vec4(0.0,19.0,26.0,219.0);\n                        if(vecidx>=71.0) return vec4(15.0,26.0,19.0,19.0);\n                        if(vecidx>=70.0) return vec4(35.0,211.0,0.0,19.0);\n                    }else{\n                        if(vecidx>=69.0) return vec4(242.0,51.0,0.0,242.0);\n                        if(vecidx>=68.0) return vec4(187.0,163.0,178.0,0.0);\n                        if(vecidx>=67.0) return vec4(0.0,21.0,11.0,51.0);\n                    }\n                }\n            }else{\n                if(vecidx>=60.0){\n                    if(vecidx>=63.0){\n                        if(vecidx>=66.0) return vec4(219.0,0.0,178.0,235.0);\n                        if(vecidx>=65.0) return vec4(35.0,218.0,21.0,107.0);\n                        if(vecidx>=64.0) return vec4(0.0,0.0,0.0,178.0);\n                        if(vecidx>=63.0) return vec4(211.0,0.0,0.0,0.0);\n                    }else{\n                        if(vecidx>=62.0) return vec4(211.0,178.0,187.0,3.0);\n                        if(vecidx>=61.0) return vec4(3.0,27.0,59.0,27.0);\n                        if(vecidx>=60.0) return vec4(0.0,107.0,187.0,19.0);\n                    }\n                }else{\n                    if(vecidx>=57.0){\n                        if(vecidx>=59.0) return vec4(0.0,178.0,114.0,187.0);\n                        if(vecidx>=58.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=57.0) return vec4(11.0,0.0,0.0,0.0);\n                    }else{\n                        if(vecidx>=56.0) return vec4(0.0,200.0,27.0,21.0);\n                        if(vecidx>=55.0) return vec4(0.0,218.0,27.0,26.0);\n                        if(vecidx>=54.0) return vec4(15.0,21.0,178.0,32.0);\n                    }\n                }\n            }\n        }\n    }else{\n        if(vecidx>=27.0){\n            if(vecidx>=40.0){\n                if(vecidx>=47.0){\n                    if(vecidx>=50.0){\n                        if(vecidx>=53.0) return vec4(0.0,211.0,26.0,242.0);\n                        if(vecidx>=52.0) return vec4(0.0,114.0,21.0,178.0);\n                        if(vecidx>=51.0) return vec4(0.0,218.0,27.0,26.0);\n                        if(vecidx>=50.0) return vec4(27.0,11.0,19.0,187.0);\n                    }else{\n                        if(vecidx>=49.0) return vec4(123.0,107.0,248.0,0.0);\n                        if(vecidx>=48.0) return vec4(0.0,256.0,256.0,256.0);\n                        if(vecidx>=47.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }else{\n                    if(vecidx>=43.0){\n                        if(vecidx>=46.0) return vec4(211.0,256.0,256.0,256.0);\n                        if(vecidx>=45.0) return vec4(163.0,123.0,18.0,18.0);\n                        if(vecidx>=44.0) return vec4(3.0,187.0,107.0,0.0);\n                        if(vecidx>=43.0) return vec4(187.0,0.0,211.0,21.0);\n                    }else{\n                        if(vecidx>=42.0) return vec4(256.0,256.0,178.0,114.0);\n                        if(vecidx>=41.0) return vec4(0.0,0.0,0.0,256.0);\n                        if(vecidx>=40.0) return vec4(256.0,256.0,0.0,0.0);\n                    }\n                }\n            }else{\n                if(vecidx>=33.0){\n                    if(vecidx>=36.0){\n                        if(vecidx>=39.0) return vec4(248.0,27.0,15.0,256.0);\n                        if(vecidx>=38.0) return vec4(0.0,30.0,21.0,211.0);\n                        if(vecidx>=37.0) return vec4(218.0,235.0,234.0,35.0);\n                        if(vecidx>=36.0) return vec4(187.0,248.0,211.0,0.0);\n                    }else{\n                        if(vecidx>=35.0) return vec4(178.0,0.0,107.0,187.0);\n                        if(vecidx>=34.0) return vec4(26.0,178.0,0.0,21.0);\n                        if(vecidx>=33.0) return vec4(0.0,0.0,0.0,242.0);\n                    }\n                }else{\n                    if(vecidx>=30.0){\n                        if(vecidx>=32.0) return vec4(90.0,256.0,0.0,0.0);\n                        if(vecidx>=31.0) return vec4(0.0,72.0,91.0,73.0);\n                        if(vecidx>=30.0) return vec4(248.0,0.0,21.0,11.0);\n                    }else{\n                        if(vecidx>=29.0) return vec4(248.0,123.0,178.0,187.0);\n                        if(vecidx>=28.0) return vec4(178.0,0.0,234.0,59.0);\n                        if(vecidx>=27.0) return vec4(0.0,162.0,123.0,211.0);\n                    }\n                }\n            }\n        }else{\n            if(vecidx>=13.0){\n                if(vecidx>=20.0){\n                    if(vecidx>=23.0){\n                        if(vecidx>=26.0) return vec4(35.0,187.0,123.0,248.0);\n                        if(vecidx>=25.0) return vec4(15.0,0.0,178.0,114.0);\n                        if(vecidx>=24.0) return vec4(51.0,235.0,35.0,26.0);\n                        if(vecidx>=23.0) return vec4(0.0,0.0,123.0,0.0);\n                    }else{\n                        if(vecidx>=22.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=21.0) return vec4(256.0,0.0,0.0,0.0);\n                        if(vecidx>=20.0) return vec4(123.0,3.0,19.0,114.0);\n                    }\n                }else{\n                    if(vecidx>=16.0){\n                        if(vecidx>=19.0) return vec4(187.0,0.0,211.0,187.0);\n                        if(vecidx>=18.0) return vec4(27.0,27.0,219.0,18.0);\n                        if(vecidx>=17.0) return vec4(11.0,178.0,0.0,219.0);\n                        if(vecidx>=16.0) return vec4(11.0,27.0,19.0,187.0);\n                    }else{\n                        if(vecidx>=15.0) return vec4(11.0,0.0,21.0,11.0);\n                        if(vecidx>=14.0) return vec4(178.0,114.0,0.0,123.0);\n                        if(vecidx>=13.0) return vec4(211.0,0.0,30.0,21.0);\n                    }\n                }\n            }else{\n                if(vecidx>=6.0){\n                    if(vecidx>=9.0){\n                        if(vecidx>=12.0) return vec4(178.0,123.0,3.0,178.0);\n                        if(vecidx>=11.0) return vec4(21.0,178.0,0.0,211.0);\n                        if(vecidx>=10.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=9.0) return vec4(0.0,0.0,0.0,0.0);\n                    }else{\n                        if(vecidx>=8.0) return vec4(0.0,0.0,0.0,0.0);\n                        if(vecidx>=7.0) return vec4(0.0,26.0,211.0,256.0);\n                        if(vecidx>=6.0) return vec4(187.0,0.0,27.0,51.0);\n                    }\n                }else{\n                    if(vecidx>=3.0){\n                        if(vecidx>=5.0) return vec4(218.0,0.0,27.0,11.0);\n                        if(vecidx>=4.0) return vec4(3.0,187.0,123.0,248.0);\n                        if(vecidx>=3.0) return vec4(187.0,0.0,123.0,18.0);\n                    }else{\n                        if(vecidx>=2.0) return vec4(26.0,0.0,123.0,3.0);\n                        if(vecidx>=1.0) return vec4(0.0,0.0,218.0,27.0);\n                        if(vecidx>=0.0) return vec4(0.0,0.0,0.0,0.0);\n                    }\n                }\n            }\n        }\n    }\n    return vec4(0.0);\n} //get_seg_vec4\n\n#define NUM_CHARS_IN_MESSAGE (435.0)\nfloat get_seg_mask(float charidx)\n{\n    if(charidx>=NUM_CHARS_IN_MESSAGE) return 0.0; //blank at the end\n    float vecidx = charidx * 0.250000000;\n    float subidx = mod(charidx, 4.0);\n    vec4 v = get_seg_vec4(vecidx);\n    float rv = v[0];\n    rv = mix(rv, v[1], step(1.0, subidx));\n    rv = mix(rv, v[2], step(2.0, subidx));\n    rv = mix(rv, v[3], step(3.0, subidx));\n    return rv;\n} //get_seg_mask\n\n// Camera and light prototypes\n\nvoid do_cl_blank(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line2(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line3(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line4(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line5(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_line6(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_nameus(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_greet(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_credz(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_last1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_ncps1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_year1(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_endpart(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\n\nvoid do_camera_light(in float partnum, in float charidx_frac,\n                        out vec3 camera_pos,\n                        out vec3 camera_look_at, out vec3 camera_up,\n                        out float fovy_deg, out vec3 light_pos)\n{   // Camera and light dispatcher\n    if(partnum>=NAMEUS) {\n\n        if(partnum==NAMEUS) {\n            do_cl_nameus(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==GREET) {\n            do_cl_greet(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==CREDZ) {\n            do_cl_credz(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LAST1) {\n            do_cl_last1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==NCPS1) {\n            do_cl_ncps1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==YEAR1) {\n            do_cl_year1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==ENDPART) {\n            do_cl_endpart(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        {\n            camera_pos=vec3(0.0,0.0,10.0);    //default\n            camera_look_at=vec3(0.0);\n            camera_up=vec3(0.0, 1.0, 0.0);\n            fovy_deg=45.0;\n            light_pos=camera_pos;\n        }\n    } else {\n\n        if(partnum==BLANK) {\n            do_cl_blank(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE1) {\n            do_cl_line1(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE2) {\n            do_cl_line2(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE3) {\n            do_cl_line3(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE4) {\n            do_cl_line4(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE5) {\n            do_cl_line5(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==LINE6) {\n            do_cl_line6(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        {\n            camera_pos=vec3(0.0,0.0,10.0);    //default\n            camera_look_at=vec3(0.0);\n            camera_up=vec3(0.0, 1.0, 0.0);\n            fovy_deg=45.0;\n            light_pos=camera_pos;\n        }\n    }\n} //do_camera_light\n\n#define NCPS1_REALSTART (420.00000000000000000000)\n#define YEAR1_REALSTART (429.00000000000000000000)\n#define YEAR1_CLIPCHARIDX (437.00000000000000000000)\n\n\n// UTIL ///////////////////////////////////////////////\n// {{{1\n//mat4 my_transpose(in mat4 inMatrix)\n//\n//{\n//    // Modified from\n//    // http://stackoverflow.com/a/18038495/2877364 by\n//    // http://stackoverflow.com/users/2507370/jeb\n//    vec4 i0 = inMatrix[0];\n//    vec4 i1 = inMatrix[1];\n//    vec4 i2 = inMatrix[2];\n//    vec4 i3 = inMatrix[3];\n//\n//    vec4 o0 = vec4(i0.x, i1.x, i2.x, i3.x);\n//    vec4 o1 = vec4(i0.y, i1.y, i2.y, i3.y);\n//    vec4 o2 = vec4(i0.z, i1.z, i2.z, i3.z);\n//    vec4 o3 = vec4(i0.w, i1.w, i2.w, i3.w);\n//\n//    mat4 outMatrix = mat4(o0, o1, o2, o3);\n//\n//    return outMatrix;\n//}\n\nvoid lookat(in vec3 in_eye, in vec3 in_ctr, in vec3 in_up,\n            out mat4 view, out mat4 view_inv)\n{\n    // From Mesa glu.  Thanks to\n    // http://learnopengl.com/#!Getting-started/Camera\n    // and https://www.opengl.org/wiki/GluLookAt_code\n\n    vec3 forward, side, up;\n\n    forward=normalize(in_ctr-in_eye);\n    up = in_up;\n    side = normalize(cross(forward,up));\n    up = cross(side,forward);   // already normalized since both inputs are\n        //now side, up, and forward are orthonormal\n\n    mat4 orient, where;\n\n    // Note: in Mesa gluLookAt, a C matrix is used, so the indices\n    // have to be swapped compared to that code.\n    vec4 x4, y4, z4, w4;\n    x4 = vec4(side,0);\n    y4 = vec4(up,0);\n    z4 = vec4(-forward,0);\n    w4 = vec4(0,0,0,1);\n    orient = transpose(mat4(x4, y4, z4, w4));\n\n    where = mat4(1.0); //identity (1.0 diagonal matrix)\n    where[3] = vec4(-in_eye, 1);\n\n    view = (orient * where);\n\n    // Compute the inverse for later\n    view_inv = mat4(x4, y4, z4, -where[3]);\n    view_inv[3][3] = 1.0;   // since -where[3].w == -1, not what we want\n        // Per https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations ,\n        // M_{view->world}\n} //lookat\n\nvoid gluPerspective(in float fovy_deg, in float aspect,\n                    in float near, in float far,\n                    out mat4 proj, out mat4 proj_inv)\n{   // from mesa glu-9.0.0/src/libutil/project.c.\n    // Thanks to https://unspecified.wordpress.com/2012/06/21/calculating-the-gluperspective-matrix-and-other-opengl-matrix-maths/\n\n    float fovy_rad = radians(fovy_deg);\n    float dz = far-near;\n    float sin_fovy = sin(fovy_rad);\n    float cot_fovy = cos(fovy_rad) / sin_fovy;\n\n    proj=mat4(0);\n    //[col][row]\n    proj[0][0] = cot_fovy / aspect;\n    proj[1][1] = cot_fovy;\n\n    proj[2][2] = -(far+near)/dz;\n    proj[2][3] = -1.0;\n\n    proj[3][2] = -2.0*near*far/dz;\n\n    // Compute the inverse matrix.\n    // http://bookofhook.com/mousepick.pdf\n    float a = proj[0][0];\n    float b = proj[1][1];\n    float c = proj[2][2];\n    float d = proj[3][2];\n    float e = proj[2][3];\n\n    proj_inv = mat4(0);\n    proj_inv[0][0] = 1.0/a;\n    proj_inv[1][1] = 1.0/b;\n    proj_inv[3][2] = 1.0/e;\n    proj_inv[2][3] = 1.0/d;\n    proj_inv[3][3] = -c/(d*e);\n} //gluPerspective\n\nvoid compute_viewport(in float x, in float y, in float w, in float h,\n                        out mat4 viewp, out mat4 viewp_inv)\n{\n    // See https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations#Viewport_Transformation\n    // Also mesa src/mesa/main/viewport.c:_mesa_get_viewport_xform()\n\n    viewp = mat4(0);\n    // Reminder: indexing is [col][row]\n    viewp[0][0] = w/2.0;\n    viewp[3][0] = x+w/2.0;\n\n    viewp[1][1] = h/2.0;\n    viewp[3][1] = y+h/2.0;\n\n    // assumes n=0 and f=1,\n    // which are the default for glDepthRange.\n    viewp[2][2] = 0.5;  // actually 0.5 * (f-n);\n    viewp[3][2] = 0.5;  // actually 0.5 * (n+f);\n\n    viewp[3][3] = 1.0;\n\n    //Invert.  Done by hand.\n    viewp_inv = mat4(1.0);\n    viewp_inv[0][0] = 2.0/w;    // x->x\n    viewp_inv[3][0] = -1.0 - (2.0*x/w);\n\n    viewp_inv[1][1] = 2.0/h;    // y->y\n    viewp_inv[3][1] = -1.0 - (2.0*y/h);\n\n    viewp_inv[2][2] = 2.0;      // z->z\n    viewp_inv[3][2] = -1.0;\n\n}  //compute_viewport\n\n// https://www.opengl.org/wiki/Compute_eye_space_from_window_space\n\nvec4 wts(in mat4 modelviewproj, in mat4 viewport,\n                in vec3 pos)\n{   // world to screen coordinates\n    vec4 clipvertex = modelviewproj * vec4(pos,1.0);\n    vec4 ndc = clipvertex/clipvertex.w;\n    vec4 transformed = viewport * ndc;\n    return transformed;\n} //wts\n\n// screen to world: http://bookofhook.com/mousepick.pdf\nvec4 WorldRayFromScreenPoint(in vec2 scr_pt,\n    in mat4 view_inv,\n    in mat4 proj_inv,\n    in mat4 viewp_inv)\n{   // Returns world coords of a point on a ray passing through\n    // the camera position and scr_pt.\n\n    vec4 ndc = viewp_inv * vec4(scr_pt,0.0,1.0);\n        // z=0.0 => it's a ray.  0 is an arbitrary choice in the\n        // view volume.\n        // w=1.0 => we don't need to undo the perspective divide.\n        //      So clip coords == NDC\n\n    vec4 view_coords = proj_inv * ndc;\n        // At this point, z=0 will have become something in the\n        // middle of the projection volume, somewhere between\n        // near and far.\n    view_coords = view_coords / view_coords.w;\n        // Keepin' it real?  Not sure what happens if you skip this.\n    //view_coords.w = 0.0;\n        // Remove translation components.  Note that we\n        // don't use this trick.\n    vec4 world_ray_point = view_inv * view_coords;\n        // Now scr_pt is on the ray through camera_pos and world_ray_point\n    return world_ray_point;\n} //WorldRayFromScreenPoint\n\nvec3 hsv2rgb(vec3 c) {\n    // by hughsk, from https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl .\n    // All inputs range from 0 to 1.\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat scalesin(in float bot, in float top, in float x)\n{   //rescale [-1,1] to [bot, top]\n    return mix(bot, top, clamp((x+1.0)*0.5, 0.0, 1.0));\n}\n\n\n\n// }}}1\n\n// VOXEL MARCHING\n// {{{1\n\n// GLSL implementation by cxw.\n// Origial by http://gamedev.stackexchange.com/users/8806/maxim-kamalov , aka\n// dogfuntom, https://gist.github.com/dogfuntom .\n// See http://gamedev.stackexchange.com/questions/47362/cast-ray-to-select-block-in-voxel-game#comment188335_49423\n// Modified from https://gist.github.com/cc881c8fc86ad43d55d8.git\n// Heavily based on:\n// http://gamedev.stackexchange.com/a/49423/8806\n\n// Variables for voxel marching\nstruct VM2State {\n    // Parameters\n    vec3 origin;\n    vec3 direction;\n    vec3 world_min;\n    vec3 world_max;\n\n    // Internals\n    vec3 curr;      //where we are now - was x, y, z vars\n    vec3 stepdir;   //was step[XYZ]\n    vec3 tMax;\n    vec3 tDelta;\n    float max_t;\n}; //VM2State\n\n\n\n/// Handle edge cases when initializing marching\nfloat intbound(float s, float ds)\n{\n    // Some kind of edge case, see:\n    // http://gamedev.stackexchange.com/questions/47362/cast-ray-to-select-block-in-voxel-game#comment160436_49423 :\n        // \"The edge case is where a coordinate of the ray origin is an\n        //integer value, and the corresponding part of the ray direction is\n        //negative. The initial tMax value for that axis should be zero, since\n        //the origin is already at the bottom edge of its cell, but it is\n        //instead 1/ds causing one of the other axes to be incremented instead.\n        //The fix is to write intfloor to check if both ds is negative and s is\n        //an integer value (mod returns 0), and return 0.0 in that case. â€“\n        //codewarrior Dec 24 '14 at 12:00\"\n\n    // by http://gamedev.stackexchange.com/users/57468/codewarrior\n    bool sIsInteger = (fract(s)==0.0);  //TODO check against epsilon?\n    if (ds < 0.0 && sIsInteger)\n        return 0.0;\n\n    return (\n        ( (ds > 0.0) ? (ceil(s) - s) : (s - floor(s)) )\n            // I don't need intbound_ceil here since I make sure origin\n            // always has a fractional part using hack_camera().\n        /\n        abs(ds)\n    );\n} //intbound\n\nbool VM2_init(out VM2State state,\n    in vec3 origin, in vec3 direction, in float max_dist,\n    in vec3 world_min, in vec3 world_max)\n{ //The initialization portion of VM2_raycast (q.v.).\n  //Returns true if successful.\n\n    if(length(direction)==0.0) {\n        return false;   // *** EXIT POINT ***\n    }\n\n    state.origin = origin;\n    state.direction = direction;\n    state.world_min = world_min;     // TODO? make sure they are ints?\n    state.world_max = world_max;\n\n    state.curr = floor(origin);\n    state.stepdir = sign(direction);\n\n    state.tMax.x = intbound(origin.x, direction.x);\n    state.tMax.y = intbound(origin.y, direction.y);\n    state.tMax.z = intbound(origin.z, direction.z);\n\n    state.tDelta.x = state.stepdir.x / direction.x;\n    state.tDelta.y = state.stepdir.y / direction.y;\n    state.tDelta.z = state.stepdir.z / direction.z;\n\n    state.max_t = max_dist / length(direction);\n\n    \n\n    return true;\n} //VM2_init\n\n//DEBUG: these are floats.  For production, change them back to int.\n#define VM2_HIT (1.0)\n#define VM2_NOTYET (-1.0)\n#define VM2_DONE (0.0)\n\nvec4 VM2_step(inout VM2State state,\n                out vec3 voxel, out vec3 hitpoint, out vec3 normal,\n                out float hit_t)\n{ //returns:\n  // VM2_HIT    if we hit a voxel in the world;\n  // VM2_NOTYET if we have not yet reached the world; or\n  // VM2_DONE   if we have traced off the end of the world or have gone\n  //            too far along the ray.\n  // If VM2_HIT, voxel and normal are filled in:\n  //    voxel       coordinates of the voxel we're in\n  //    hitpoint    The actual point where the ray hit the voxel\n  //    normal      normal of the voxel at hitpoint\n\n    vec3 ret_normal;    //value to be returned\n\n    // Go to the next voxel.\n    //DEBUG: The *0.05's below are to rescale for visibility, and are debug.\n    if (state.tMax.x < state.tMax.y) {\n        if (state.tMax.x < state.tMax.z) {\n            if (state.tMax.x > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.x += state.stepdir.x;    // Update which cube we are now in.\n            hit_t = state.tMax.x;               // Record where we hit the cube\n            state.tMax.x += state.tDelta.x;\n                // Adjust state.tMax.x to the next X-oriented crossing\n            ret_normal = vec3(-state.stepdir.x, 0.0, 0.0);\n                // Record the normal vector of the voxel we just entered.\n        } else {\n            if (state.tMax.z > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.z += state.stepdir.z;\n            hit_t = state.tMax.z;\n            state.tMax.z += state.tDelta.z;\n            ret_normal = vec3(0.0, 0.0, -state.stepdir.z);\n        }\n    } else {\n        if (state.tMax.y < state.tMax.z) {\n            if (state.tMax.y > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.y += state.stepdir.y;\n            hit_t = state.tMax.y;\n            state.tMax.y += state.tDelta.y;\n            ret_normal = vec3(0.0, -state.stepdir.y, 0.0);\n        } else {\n            if (state.tMax.z > state.max_t) return vec4(state.tMax*0.05,VM2_DONE);\n            state.curr.z += state.stepdir.z;\n            hit_t = state.tMax.z;\n            state.tMax.z += state.tDelta.z;\n            ret_normal = vec3(0.0, 0.0, -state.stepdir.z);\n        }\n    } //end conditionals\n\n    // Check if we're past the world\n    if( (state.stepdir.x>0.0) ?\n        (state.curr.x>=state.world_max.x) : (state.curr.x<state.world_min.x) )\n        return vec4(1.0,0.0,0.0,VM2_DONE);\n    if( (state.stepdir.y>0.0) ?\n        (state.curr.y>=state.world_max.y) : (state.curr.y<state.world_min.y) )\n        return vec4(0.0,1.0,0.0,VM2_DONE);\n    if( (state.stepdir.z>0.0) ?\n        (state.curr.z>=state.world_max.z) : (state.curr.z<state.world_min.z) )\n        return vec4(0.0,0.0,1.0,VM2_DONE);\n\n    // Check if we're not yet at the world.\n    // TODO in VM2_init, fast-forward to the boundary of the world so that\n    // this case never happens.\n    if( (state.stepdir.x>0.0) ?\n        (state.curr.x<state.world_min.x) : (state.curr.x>=state.world_max.x) )\n        return vec4(0.5,0.0,0.0,VM2_NOTYET);\n    if( (state.stepdir.y>0.0) ?\n        (state.curr.y<state.world_min.y) : (state.curr.y>=state.world_max.y) )\n        return vec4(0.0,0.5,0.0,VM2_NOTYET);\n    if( (state.stepdir.z>0.0) ?\n        (state.curr.z<state.world_min.z) : (state.curr.z>=state.world_max.z) )\n        return vec4(0.0,0.0,0.5,VM2_NOTYET);\n\n    // If we made it here, we are in a voxel cell.\n    voxel = state.curr;\n    hitpoint = state.origin + hit_t*state.direction;\n    normal = ret_normal;\n    return vec4(voxel,VM2_HIT);     //voxel is debug\n} //VM2_step\n\n// }}}1\n\n// GEOMETRY HIT-TESTING ///////////////////////////////\n// {{{1\n\n\n\n/// Faster routine for the special case of the main text\nvec3 HitZZero(vec3 camera_pos, vec3 rayend)\n{   // Find where the ray meets the z=0 plane.  The ray is\n    // camera_pos + t*(rayend - camera_pos) per Hook.\n    float hit_t = -camera_pos.z / (rayend.z - camera_pos.z);\n    return (camera_pos + hit_t * (rayend-camera_pos));\n} //HitZZero\n\n/// HitZZero(), but using a direction vector.\nvoid HitZZeroDir(in vec3 camera_pos, in vec3 ray_dir,\n                out vec3 hit_pos, out float hit_t)\n{   // Find where the ray meets the z=0 plane.  The ray is\n    // camera_pos + t*(rayend - camera_pos) per Hook.\n    hit_t = -camera_pos.z / ray_dir.z;\n    hit_pos = (camera_pos + hit_t * ray_dir);\n} //HitZZeroDir\n\n/// HitZZeroDir(), but for z!=0\nvoid HitZDir(in vec3 camera_pos, in vec3 ray_dir, in float z,\n                out vec3 hit_pos, out float hit_t)\n{   // Find where the ray meets the z=0 plane.  The ray is\n    // camera_pos + t*(rayend - camera_pos) per Hook.\n    hit_t = (z-camera_pos.z) / ray_dir.z;\n    hit_pos = (camera_pos + hit_t * ray_dir);\n} //HitZDir\n\n// --- IsPointInRectXY ---\n// All polys will be quads in the X-Y plane, Z=0.\n// All quad edges are parallel to the X or Y axis.\n// These quads are encoded in a vec4: (.x,.y) is the LL corner and\n// (.z,.w) is the UR corner (coords (x,y)).  The UR corner is not\n// inclued in the poly.\n\nbool IsPointInRectXY(in vec4 poly_coords, in vec2 world_xy_of_point)\n{\n    // return true if world_xy_of_point is within the poly defined by\n    // poly_coords in the Z=0 plane.\n    // I.e., xy >= poly_coords.xy, and xy < poly_coords.zw.\n    // I can test in 2D rather than 3D because all the geometry\n    // has z=0 and all the quads are planar.\n\n    float x_test, y_test;\n    x_test = step(poly_coords.x, world_xy_of_point.x) *\n            (1.0 - step(poly_coords.z, world_xy_of_point.x));\n        // step() is 1.0 if world.x >= poly_coords.x\n        // 1-step() is 1.0 if world.x < poly_coords.z\n    y_test = step(poly_coords.y, world_xy_of_point.y) *\n            (1.0 - step(poly_coords.w, world_xy_of_point.y));\n\n    return ( (x_test>=0.9) && (y_test >= 0.9) );\n        // Not ==1.0 because these are floats!\n\n} //IsPointInRectXY\n\n\n\n// }}}1\n\n// TEXT RENDERING /////////////////////////////////////\n// {{{1\n\n// Text-rendering internal parameters\n#define LETTER_EPSILON (0.001)\n    // small enough for our purposes.\n#define SIDE_LETTERS (4)\n    // How many letters to render on each side of the current one.\n    // Set to fill the screen at the desired aspect ratio and orientation.\n\n\n\nbool is_in_basic_message(in vec2 in_pt,\n    in float first_charidx, in float clip_charidx,\n    in vec2 text_origin)\n{   // returns true iff world_xy_of_point is the message for this part,\n    // which begins with first_charidx at text_origin,\n    // upright in the z=0 plane.\n\n    vec2 pt = in_pt - text_origin;     // adjust for where the text is\n\n    float nchars = (clip_charidx-first_charidx);\n        //not ()+1 because clip_charidx is one past the last char to show.\n    if( (pt.x<0.0) || (pt.x>=nchars*GRID_PITCH) ) {\n        return false;   //outside - can't hit\n    }\n\n    if( (pt.y<0.0) || (pt.y>GRID_CHARHT*GRID_VPITCH) ) {\n        return false;   //ditto\n    }\n\n    // Which letter are we in?  There can be only one.\n    float ltridx = floor(pt.x/GRID_PITCH);\n    float ofs = ltridx * GRID_PITCH;\n    vec2 shifted_pt = pt - vec2(ofs,0.0);   // with respect to the letter\n    float mask = get_seg_mask(first_charidx + ltridx);\n\n    // Early exit on spaces\n    if(mask <= LETTER_EPSILON) {\n        return false;\n    }\n\n    // check each segment in turn\n    for(int seg_idx=0; seg_idx<NSEGS; ++seg_idx) {\n        if(mod(mask, 2.0)>LETTER_EPSILON) {\n            // Where is this segment of this letter?\n            vec4 theshape = SEG_SHAPES[seg_idx];\n\n            // Check if we are in the segment\n            if(IsPointInRectXY(theshape, shifted_pt)) {\n                return true;    // as soon as we're in a segment,\n            }                   // we don't need to check any others\n\n        } //endif this segment is in mask\n\n        mask = floor(mask * 0.5);\n            //move to next bit and drop fractional part\n\n        // Early exit when you run out of segments\n        if(mask<=LETTER_EPSILON) {\n            return false;       // no more chances\n        }\n    } //foreach segment\n\n    return false;\n} //is_in_basic_message\n\n// }}}1\n\n// VOXEL LOGO /////////////////////////////////////////\n// {{{1\n\n// Voxel-Logo parameters.  Note: Voxels are every 1 unit at present.\n#define VLOGO_HEIGHT (8.0)\n#define VLOGO_Y_MAX (VLOGO_HEIGHT - 1.0)\n#define VLOGO_WIDTH (7.0)\n#define VLOGO_X_MAX (VLOGO_WIDTH - 1.0)\n#define VLOGO_THICKNESS (1.0)\n    // along the X axis\n\n/// Determine whether the ray from #ray_origin in #ray_direction hits the logo.\n/// The logo is in the X = #logo_origin.x plane, beginning at #logo_origin.yz.\n///\n/// @return {bvec2} (did_hit, was_error)\n/// did_hit is true on hit.  If true, _voxel_ holds the grid coordinates of\n/// the voxel that was hit, _hitpoint_ holds the actual point hit, and\n/// _normal_ is the normal of the voxel face that was hit.\n/// was_error is true on error.\n///\nbvec2 voxel_is_in_logo(\n    in vec3 ray_origin, in vec3 ray_direction,\n    in vec3 logo_origin,\n    out vec3 voxel, out vec3 hitpoint, out vec3 normal,\n    out float hit_t)\n{\n\n    //Retval storage, so we don't trash the out parameters if there's no hit.\n    vec3 ret_voxel, ret_hitpoint, ret_normal;\n    float ret_hit_t;\n\n    // TODO RESUME HERE double the size of the logo so it fills the screen\n    // better during the intropart\n\n    // Setup voxel marching\n    bool ok;\n    VM2State state;\n    ok = VM2_init(state, ray_origin, ray_direction, MAX_DIST,\n        //world_min\n        logo_origin,\n        //world_max - last+1\n        logo_origin + vec3(VLOGO_THICKNESS, VLOGO_HEIGHT, VLOGO_WIDTH)\n    );\n\n    if(!ok) return bvec2(false, true);\n        // *** EXIT POINT *** can't init => can't hit\n\n    // Run the marching loop.  At each voxel, check the mask for only\n    // the letter that voxel might be in.\n    for(int step_idx=0; step_idx<MAX_VOXEL_STEPS; ++step_idx) {\n        vec4 hit = VM2_step(state, ret_voxel, ret_hitpoint, ret_normal,\n                                    ret_hit_t);\n\n        if(hit.w == VM2_DONE) return bvec2(false, false); // *** EXIT POINT ***\n\n        if(hit.w == VM2_NOTYET) continue;     // to the next voxel step\n\n        // If we got here, we are in a voxel that is in the world.\n        bool did_hit = false;\n\n        // Don't test X, because the \"are we in the world\" test covers that.\n        // We just need to test Z across the width and Y across the height.\n        // Also, shift from voxel coordinates into logo-relative coords.\n        float x = ret_voxel.z - logo_origin.z;\n        float y = ret_voxel.y - logo_origin.y;\n\n        // Sanity check.  Do we need this?\n        if(x < 0.0 || y<0.0 || x>VLOGO_X_MAX || y>VLOGO_Y_MAX) continue;\n\n        /// Distance from the closest edges in X and Y\n        float xe = min(x, abs(VLOGO_X_MAX - x));\n        float ye = min(y, abs(VLOGO_Y_MAX - y));\n\n        // TODO check here to see if voxel (x,y) is in the logo\n\n        if(did_hit) {\n           // A hit!  A very palpable hit.\n           voxel = ret_voxel;\n           hitpoint = ret_hitpoint;\n           normal = ret_normal;\n           hit_t = ret_hit_t;\n           return bvec2(true, false);   // did hit; no error\n        }\n\n    } //for each voxel step\n\n    return bvec2(false, false);     // didn't hit, but no error.\n} //voxel_is_in_logo\n\n\n\n\n\n// }}}1\n\n// BUMP MAPPING ///////////////////////////////////////\n// {{{1\n\nvec3 bump_normal(in sampler2D unit_wave, in vec2 tex_coord)\n{\n// https://stackoverflow.com/a/5284527/2877364 by\n// https://stackoverflow.com/users/607131/kvark\n    //float center = texture(iChannel0, hitlocn.xy * TEX_SCALE).ggg;\n    const vec2 size = vec2(2.0,0.0);\n    const ivec3 off = ivec3(-1,0,1);\n\n    vec4 wave = texture(unit_wave, tex_coord);\n    float s11 = wave.x;\n    float s01 = textureOffset(unit_wave, tex_coord, off.xy).x;\n    float s21 = textureOffset(unit_wave, tex_coord, off.zy).x;\n    float s10 = textureOffset(unit_wave, tex_coord, off.yx).x;\n    float s12 = textureOffset(unit_wave, tex_coord, off.yz).x;\n    vec3 va = normalize(vec3(size.xy,s21-s01));\n    vec3 vb = normalize(vec3(size.yx,s12-s10));\n    //vec4 bump = vec4( cross(va,vb), s11 );\n    //The result is a bump vector: xyz=normal, a=height\n    return cross(va,vb);\n} //bump_normal\n\n// }}}1\n\n// CAMERA AND LIGHT ///////////////////////////////////\n// {{{1\n\n// --- Helpers ---\n\n#define GAMMA (2.2)\n#define ONE_OVER_GAMMA (0.45454545454545454545454545454545)\n\nvec3 phong_color(\n    in vec3 pixel_pos, in vec3 normal, in vec3 camera_pos,      // Scene\n    in vec3 light_pos, in vec3 ambient_matl,                    // Lights\n    in vec3 diffuse_matl, in vec3 specular_matl,                // Lights\n    in float shininess)                                         // Material\n{   // Compute pixel color using Blinn-Phong shading with a white light.\n    // Modified from\n    // https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\n    // Normal must be normalized on input.  All inputs are world coords.\n    // Set shininess <=0 to turn off specular highlights.\n    // Objects are one-sided.\n\n    vec3 light_dir = normalize(light_pos - pixel_pos);\n    vec3 eye_dir = normalize(camera_pos - pixel_pos);\n\n    if(dot(light_dir, eye_dir) < 0.0) {\n        return ambient_matl;       // Camera behind the object\n    }\n\n    float lambertian = max(0.0, dot(light_dir, normal));        // Diffuse\n\n    float specular = 0.0;\n    if((lambertian > 0.0) && (shininess > 0.0)) {               // Specular\n        vec3 reflectDir = reflect(-light_dir, normal);\n        float specAngle = max(dot(reflectDir, eye_dir), 0.0);\n        specular = pow(specAngle, shininess);\n    }\n    lambertian = pow(lambertian, ONE_OVER_GAMMA);\n    specular = pow(specular, ONE_OVER_GAMMA);\n\n    vec3 retval = ambient_matl + lambertian*diffuse_matl +\n        specular*specular_matl;\n\n    return clamp(retval, 0.0, 1.0);     // no out-of-range values, please!\n\n} //phong_color\n\nhighp vec3 pos_clelies(in float the_time, in float radius)\n{   //Clelies curve\n    //thanks to http://wiki.roblox.com/index.php?title=Parametric_equations\n    vec3 pos; float m = 0.8;\n    highp float smt = sin(m*the_time);\n    pos.x = radius * smt*cos(the_time);\n    pos.y = radius * smt*sin(the_time);\n    pos.z = radius * cos(m*the_time);\n    return pos;\n} //camerapos\n\n/// Get the position of moving text in the main parts.\nvoid get_text_origin(\n    //in float partnum,\n    in float charidx_frac, out vec3 text_origin\n    //out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n    //out vec3 light_pos\n    )\n{\n    text_origin = vec3(-charidx_frac*GRID_PITCH-5.0, 0.0, 0.0);\n        // Origin moves to the left, so the view pans to the right.\n}\n\n// --- Per-part routines referenced above ---\n\nvoid do_cl_nop(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(0.0,0.0,10.0);    //default\n    camera_look_at = vec3(0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n} //do_cl_nop\n\nvoid do_cl_main(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    // Old lines - for moving camera\n    //camera_pos = vec3(charidx_frac*GRID_PITCH-5.0, GRID_CHARHT*0.5, 10.0);\n    //camera_look_at = vec3(camera_pos.x+3.0, GRID_CHARHT*0.5,0);\n\n    // New lines - for use with moving text\n    camera_pos = vec3(-5.0, GRID_CHARHT*0.5, 10.0);\n    camera_look_at = vec3(-5.0+3.0, GRID_CHARHT*0.5,0);\n\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n    light_pos.y += 4.0 * sin(charidx_frac);\n} //do_cl_main\n\nvoid do_cl_intro(in float pn, in float cf, out vec3 camera_pos, out vec3 cla, out vec3 cu, out float fovy_deg, out vec3 light_pos) {\n    do_cl_main(pn, cf, camera_pos, cla, cu, fovy_deg, light_pos);\n    fovy_deg = 39.0;    // a bit tighter for the intro, so we can see\n                        // the logo better.\n    light_pos = camera_pos; // TODO improve this later.\n} //do_cl_intro\n\n\n\n\nvoid do_cl_blank(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line2(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line3(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line4(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line5(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_line6(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_nameus(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_greet(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\n\nvoid do_cl_credz(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(0.0, GRID_CHARHT*0.5, 10.0);\n    camera_look_at = vec3(0.0-2.0, GRID_CHARHT*0.5,0);\n\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 50.0;\n    light_pos = camera_pos;\n    light_pos.y += 4.0 * sin(charidx_frac);\n} //do_cl_main\n\nvoid do_cl_last1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_ncps1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_year1(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\nvoid do_cl_endpart(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_main(pn, cf, cp, cla, cu, fd, lp); }\n\n\n//void do_cl_xport(in float partnum, in float charidx_frac, out vec3 camera_pos,\n//     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n//     out vec3 light_pos)\n//{ //static camera\n//    camera_pos = vec3(/*charidx_frac*/\n//        floor(XPORT_NCHARS/2.0)*GRID_PITCH+GRID_PITCH*0.3, GRID_CHARHT*0.5 + 0.5, 10.0);\n//    camera_look_at = vec3(camera_pos.x, GRID_CHARHT*0.5,0);\n//    camera_up = vec3(0.0, 1.0, 0.0);\n//    fovy_deg = 68.0;\n//    light_pos = camera_pos;\n//} //do_cl_xport\n//\n//void do_cl_line2(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_s_plain(pn, cf, cp, cla, cu, fd, lp); }\n//\n//void do_cl_line3(in float partnum, in float charidx_frac, out vec3 camera_pos,\n//     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n//     out vec3 light_pos)\n//{ //For the voxel part.\n//    camera_pos = vec3(charidx_frac*VGRID_PITCH-5.0, VGRID_CHARHT*0.5+0.5, 20.0);\n//    camera_look_at = vec3(camera_pos.x-0.5, VGRID_CHARHT*0.5,0.0);\n//\n//    camera_up = vec3(0.0, 1.0, 0.0);\n//    fovy_deg = 45.0;\n//    light_pos = vec3(\n//        camera_pos.x + VGRID_PITCH*sin(TWO_PI*0.125*charidx_frac),\n//        camera_pos.y+6.0,\n//        camera_pos.z-2.0\n//    );\n//} //do_cl_line3\n//\n//void do_cl_howto(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_line3(pn, cf, cp, cla, cu, fd, lp); }\n//\n//void do_cl_endpart(in float pn, in float cf, out vec3 cp, out vec3 cla, out vec3 cu, out float fd, out vec3 lp) { do_cl_nop(pn, cf, cp, cla, cu, fd, lp); }\n\n\n\n/// Make sure the camera is never at an integer coordinate.\n/// TODO someday --- fix the voxel marcher ;)\nvec3 hack_camera(vec3 camera_pos)\n{\n    return vec3(    fract(camera_pos.x) >= SMALLEST_CAM_FRACTION ?\n        camera_pos.x :\n        (\n            (abs(camera_pos.x) - fract(camera_pos.x) +\n                    SMALLEST_CAM_FRACTION)\n            *\n            sign(camera_pos.x)\n        )\n,     fract(camera_pos.y) >= SMALLEST_CAM_FRACTION ?\n        camera_pos.y :\n        (\n            (abs(camera_pos.y) - fract(camera_pos.y) +\n                    SMALLEST_CAM_FRACTION)\n            *\n            sign(camera_pos.y)\n        )\n,     fract(camera_pos.z) >= SMALLEST_CAM_FRACTION ?\n        camera_pos.z :\n        (\n            (abs(camera_pos.z) - fract(camera_pos.z) +\n                    SMALLEST_CAM_FRACTION)\n            *\n            sign(camera_pos.z)\n        )\n);\n}\n\n\n// }}}1\n\n// ARTISTRY ///////////////////////////////////////////\n// {{{1\n\nvoid do_hey(in float the_time, in vec2 charpos, in float clip_charidx,\n            out vec3 diffuse_matl)\n{\n    vec2 pos;\n    diffuse_matl = vec3(0.0);\n    vec2 text_origin = vec2(GRID_PITCH * (HEY_X_CELLS - 4.0 - 1.0), 0.0);\n        // Multiply by GRID_PITCH ecause text_origin is in logical units,\n        // not grid cells.\n        // We have four characters, so leave four spaces, plus one at the\n        // right for a margin.\n\n    // Flicker minimum - starts at 1 (no flicker); gradually drops to 0.2.\n    float flicker_depth =\n            1.0 - 0.8 * smoothstep(YEAR1_START, YEAR1_START+5.0, the_time);\n\n    float global_fadeout =\n            smoothstep(NCPS1_START, NCPS1_START+2.0, the_time) *\n            (1.0 - smoothstep(ENDPART_START - 3.0, ENDPART_START, the_time));\n\n    //NCPS\n    pos = charpos - vec2(0.0, 1.0*GRID_VPITCH); // move up one line\n    if(is_in_basic_message(pos, NCPS1_REALSTART, clip_charidx, text_origin)) {\n        diffuse_matl = vec3(1.0,0.27058823529411762943,0.0);\n            // orangered from\n            // https://www.rapidtables.com/web/color/orange-color.html\n\n        // Fuzz the logo randomly for a flickery effect\n        if(rand(the_time * 0.01) > 0.7) {\n            diffuse_matl *= clamp(rand(the_time*0.2), flicker_depth, 1.0);\n        }\n        diffuse_matl *= global_fadeout;\n        return;\n    }\n\n    // 2018\n    pos = charpos; // - vec2(0.0, 0.0*GRID_VPITCH);\n    if( is_in_basic_message(pos, YEAR1_REALSTART, clip_charidx, text_origin)) {\n        diffuse_matl = vec3(0.54117647058823525885,0.02745098039215686236,0.02745098039215686236);\n            // blood red from http://www.colourlovers.com/color/8A0707/Blood_red\n\n        // mul by PI just to shift it.  Multiplicative rather than additive\n        // because if it's additive, whatever happens to NCPS happens to\n        // 2018 shortly after that.\n        if(rand(the_time * 0.01 * PI) > 0.7) {\n            diffuse_matl *= clamp(rand(the_time*0.2 * PI), flicker_depth, 1.0);\n        }\n        diffuse_matl *= global_fadeout;\n        return;\n    }\n} //do_hey\n\n//void color_xport(in vec2 wpt, in vec2 uvpt, in float dt,\n//                out vec3 ambient_matl, out vec3 diffuse_matl,\n//                out float shininess)\n//{ // World point, Fragment point ([0,1] range), time within the effect.\n//  // Fades in over time=[0, XPORT_FADEIN_DURATION].\n//\n//    float ramp = smoothstep(0.0, XPORT_FADEIN_DURATION, dt);\n//    ambient_matl = vec3(0.0);   //for now\n//\n//    // Shininess\n//    float s_dt = scalesin(-PI_OVER_2, PI_OVER_2, dt/XPORT_FADEIN_DURATION);\n//        // s_dt goes from 0 to pi/2\n//    float s_top = mix(XP_SHINE_HIGH, XP_SHINE_AIM, dt/XPORT_FADEIN_DURATION);\n//    float s_bot = mix(XP_SHINE_LOW, XP_SHINE_AIM, dt/XPORT_FADEIN_DURATION);\n//    float shine = sin(TWO_PI*XP_SHINE_HZ*dt);\n//    shininess = scalesin(s_bot, s_top, shine); // [XP_SHINE_LOW, X~_HIGH]\n//\n//    // Overall gain\n//    float g_top = clamp(ramp*1.5, 0.0, 1.0);\n//    float g_bot = ramp*ramp;    // <=ramp, so <= g_top\n//    float gain = sin(TWO_PI*XP_GAIN_HZ*dt);\n//    gain = scalesin(g_bot, g_top, gain);    // [0,1]\n//\n//    // Localized gain - horizontal\n//    float s;\n//    < ? for my $idx (0..$#hs) {\n//        my $lr = $hs[$idx];?>\n//        s = sin(TWO_PI*XP_H< ?=$idx?>_PER_U * uvpt.x +\n//            TWO_PI*XP_H< ?=$idx?>_PHASE +\n//            TWO_PI*XP_H< ?=$idx?>_PHASE_PER_SEC * dt);\n//        s = mix(s, 1.0, ramp);     // gain effects are 1.0 at the end\n//        gain *= scalesin(0.0, 1.0, s);\n//    < ? } ?>\n//\n//    diffuse_matl = gain * vec3(0.2, 0.2, 1.0);\n//} //color_xport\n\nbool do_voxel_logo(\n    in vec3 camera_pos, in vec3 raydir_norm, in vec3 logo_origin,\n    // Outputs - only updated if it hits.\n    out vec3 wc_pixel, out vec3 wc_normal,\n    out vec3 ambient_matl, out vec3 diffuse_matl,\n    out float shininess,\n    out float voxel_hit_t)\n{\n    bool did_hit = false;\n    vec3 voxel, hitpoint, normal;\n    float hit_t;\n    bvec2 hit_status = voxel_is_in_logo(\n        camera_pos, raydir_norm, logo_origin,\n        // Outputs\n        voxel, hitpoint, normal, hit_t\n    );\n\n    bool did_hit_voxel = hit_status.x;\n    //bool was_error = hit_status.y;\n\n    //if(was_error) {\n    //    diffuse_matl = vec3(1.0, 0.0, 0.0);\n    //} else\n    if(did_hit_voxel) {\n        did_hit = true;\n        wc_pixel = hitpoint;\n        wc_normal = normal;\n        voxel_hit_t = hit_t;\n        ambient_matl = vec3(0.1, 0.1, 0.1);\n        diffuse_matl = vec3(0.2, 0.3, 0.8);\n\n        shininess = 25.0;\n    }\n\n    return did_hit;\n\n} // do_voxel_logo\n\nvoid renderItAll( in vec4 story, in float the_time, in vec2 uv,\n                    out vec4 fragColor, in vec2 fragCoord )\n{\n    init_charset();\n\n    // --- Story ---\n    float partnum=story[0], charidx_frac=story[1];\n    float first_charidx=story[2], clip_charidx=story[3];\n\n    // --- Camera and light ---\n    vec3 camera_pos, camera_look_at, camera_up, light_pos;\n    float fovy_deg;\n\n    do_camera_light(partnum, charidx_frac,\n        camera_pos, camera_look_at, camera_up, fovy_deg, light_pos);\n    camera_pos = hack_camera(camera_pos);\n\n    // Camera processing\n    mat4 view, view_inv;\n\n    //camera_look_at.y -= 5.0;    //DEBUG\n    lookat(camera_pos, camera_look_at, camera_up,\n            view, view_inv);\n\n    mat4 proj, proj_inv;\n    //fovy_deg = 25.0;    //DEBUG\n    gluPerspective(fovy_deg, iResolution.x/iResolution.y, 1.0, 10.0,\n                    proj, proj_inv);\n\n    mat4 viewport, viewport_inv;\n    compute_viewport(0.0, 0.0, iResolution.x, iResolution.y,\n                        viewport, viewport_inv);\n\n    // --- Geometry ---\n\n    vec3 rayend = WorldRayFromScreenPoint(fragCoord,\n                                    view_inv, proj_inv, viewport_inv).xyz;\n    vec3 raydir_norm = normalize(rayend - camera_pos);\n\n    // Each part determines world coords of the hit, normal at the\n    // hit point, and base color of the geometry.\n\n    vec3 wc_pixel;  // world coords of this pixel\n    vec3 wc_normal; // ditto for the normal\n    vec3 ambient_matl = vec3(0.1);\n    vec3 diffuse_matl = vec3(0.0);\n        // material - light is always white.  Alpha is always 1.\n    float shininess = 4.0;  //Phong shininess\n    bool did_hit = false;   //if not did_hit, just use _diffuse_.\n\n    if ((partnum == BLANK) || (partnum == ENDPART) ) {    // black screens\n        diffuse_matl = vec3(0.0);\n    } else\n\n    if( (partnum == NCPS1) || (partnum == YEAR1) ) {  // Static text\n        // Straight 2d\n        // Grid for this part is 9 chars across and 3 high,\n        // offset by half a character vertically.\n        vec2 charpos = uv * vec2(HEY_X_CELLS,HEY_Y_CELLS);\n            //now charpos is 0..8 horz and 0..3 vert\n        charpos.y -= HEY_Y_VOFS;    // now -0.5..2.5 vert are on screen\n        charpos *= vec2(GRID_PITCH, GRID_VPITCH);\n            // Now in coordinates of the segments\n\n        do_hey( the_time, charpos,\n                YEAR1_CLIPCHARIDX,  //clip_charidx,\n                diffuse_matl);\n            //did_hit stays false so we just use diffuse_matl.\n\n    } else\n\n    { // scrollers\n        bool did_hit_message=false, did_hit_voxel=false;\n\n        // Message outputs\n        float message_hit_t;\n        vec3 message_hit_locn;\n\n        // Voxel outputs\n        float voxel_hit_t;\n        vec3 vwc_pixel, vwc_normal, vambient_matl, vdiffuse_matl;\n        float vshininess;\n\n        // Do the message\n\n        vec3 text_origin;\n        get_text_origin(charidx_frac, text_origin);\n            // The letters move, not the camera\n\n        HitZDir(camera_pos, raydir_norm, MESSAGE_Z,\n            message_hit_locn, message_hit_t);\n            // message_hit_locn is where it hits z=MESSAGE_Z,\n            // where the letters are.  For now, ignore text_origin.z.\n\n        // Swirly thing in the back\n        if( (partnum != LINE1) && (partnum != NAMEUS) ) {\n            // Map the Cartesian hit location to a polar hit location\n            vec2 polar;\n            message_hit_locn.y -= 12.0; //move the shape up on to the screen\n            float theta = atan(message_hit_locn.y, message_hit_locn.x);\n                // theta is on [-pi, pi]\n            float r = length(message_hit_locn.xy - ARC_CENTER);\n            polar.y = r - 5.0; //ARC_DEAD_RADIUS;   //DEBUG\n            polar.x = theta + PI * 20.0;   //DEBUG test\n\n            // Check the hit in the polar system\n            did_hit_message = is_in_basic_message(polar, first_charidx,\n                                clip_charidx, text_origin.xy*vec2(0.15,1.0));\n                                    // slow down the spinning     ^^^^\n        }\n\n        // Now check the actual text, in screen space\n        did_hit_voxel = is_in_basic_message(\n            vec2(uv.x, uv.y)*vec2(25.0, 14.0)+vec2(0.0, -2.0), first_charidx,\n                            clip_charidx, text_origin.xy);\n\n        if(did_hit_voxel) {\n            did_hit_message = false;        // Real message wins\n\n            vwc_pixel = vec3(uv, 0.0);\n            vwc_normal = vec3(0.0,0.0,1.0); //out of the screen\n            vshininess = 25.0;\n            vambient_matl = vec3(0.0);\n            if(partnum == LINE1) {\n                vdiffuse_matl = vec3(1.0,0.0,0.0);\n            } else if(partnum == NAMEUS) {\n                vdiffuse_matl = vec3(0.37254901960784314596, 0.49803921568627451677, 0.08235294117647058709);\n            } else {\n                vdiffuse_matl = vec3(0.1, 0.2, 0.8);\n            }\n        }\n\n//        // Painter's algorithm (sort of)\n//        if(did_hit_message && did_hit_voxel) {\n//            if(message_hit_t < voxel_hit_t) {\n//                did_hit_voxel = false;\n//            } else {\n//                did_hit_message = false;\n//            }\n//        }\n\n        // Now at most one of message or voxel was hit.\n\n        if(did_hit_message) {\n            did_hit = true;\n            wc_pixel = message_hit_locn;\n            wc_normal = vec3(0.0,0.0,-1.0 + 2.0*step(0.0, camera_pos.z));\n                // normal Z is -1 if camera_pos.z<0.0, and +1 otherwise.\n                // This benefits TWOSIDED.\n\n            // Perturb the normal by bump-mapping\n            wc_normal = normalize(\n                wc_normal + bump_normal(iChannel0,\n                                            message_hit_locn.xy * TEX_SCALE)\n            );\n            ambient_matl = vec3(0.2, 0.2, 0.1);\n            diffuse_matl = vec3(0.6,0.6,0.3);\n            shininess = 50.0;\n\n        } else if(did_hit_voxel) {\n            did_hit = true;\n            wc_pixel = vwc_pixel;\n            wc_normal = vwc_normal;\n            ambient_matl = vambient_matl;\n            diffuse_matl = vdiffuse_matl;\n            shininess = vshininess;\n        }  // else diffuse is the default (0,0,0).\n\n    }\n\n    // --- Lighting ---\n    // Phong shading based on the Geometry section's output values\n\n    if(did_hit) {               // a hit\n        vec3 rgb = phong_color(\n            wc_pixel, wc_normal, camera_pos, light_pos,\n            ambient_matl, diffuse_matl, vec3(1.0), shininess);\n\n        fragColor = vec4(rgb, 1.0);\n    } else {                    // no hit - just use diffuse_matl\n        fragColor = vec4(diffuse_matl, 1.0);\n    }\n} //renderItAll\n\n// }}}1\n\n// MAIN ///////////////////////////////////////////////\n// {{{1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Init\n    float the_time = iTime + START_OFS_SEC; //0.5*mod(iGlobalTime, 16.0)+S_PLAIN_START;\n    //the_time += (NCPS1_START - 2.0); //DEBUG\n\n    // Basic things we need\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 story = get_story(the_time);\n    float partnum = story[0];\n\n\n\n\n    // BufA: render all\n    renderItAll(story, the_time, uv, fragColor, fragCoord);\n\n\n} //mainImage\n\n// }}}1\n\n// vi: set ts=4 sts=4 sw=4 et ai foldmethod=marker foldenable foldlevel=0: //\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// msx.frag by cxw/Necroposters.  CC-BY-SA 3.0\n// https://bitbucket.org/necroposters/ncps-minus-001\n//This file is generated from msx.frag.in using perlpp.  DO NOT EDIT\nprecision highp int;precision highp float;\n\n//music.frag.inc: Music parameters and other common foo ##########\n\n\n\n\n\n\n\n\n\n#define BPM (270.00000000000000000000)\n    // beats per minute\n#define BPS (4.50000000000000000000)\n    // beats per sec = BPM/60 (110 bpm)\n#define SPB (0.22222222222222220989)\n    // sec per beat, precomputed\n#define BPP (2048.0)\n    // beats per pattern - make it longer than the song\n    // if you don't want repeats\n\n// DEBUG: where in the demo you want to start.\n#define START_OFS_SEC 0.00000000000000000000\n\n// Utils //////////////////////////////////////////////////////////////////\nfloat rand(float n){    // http://shadertoy.wikia.com/wiki/Noise\n    // added abs - make sure it's 0..1\n    return fract(abs(cos(n*89.42))*343.42);\n}\n//################################################################\n\n\n\n\n// Manual sync\n#define MUSIC_START_TIME (0.0) //(0.75)\n    // how long to wait before starting the music\n\n#define MUSIC_DURATION_SEC (180.0)\n    // ShaderToy only generates 3min of music\n\n// Dynamics - how much the first beat of the measure differs from the\n// rest of the measure.\n#define DYN_EXP (2.0)\n\n// Computed parameters //////////////////////////////////////////////////\n#define PATTERN_DURATION_SEC (SPB * BPP)\n    // = SPP = S/B * B/P\n\n// Constants ////////////////////////////////////////////////////////////\n#define PI (3.1415926535897932384626433832795028841971)\n    // from memory :)\n#define TWO_PI (6.283185307179586)\n#define ONE_OVER_TWO_PI (0.15915494309644431437107064141535)\n    // not from memory :) :)\n#define HALF_PI (1.5707963267948966192313216916398)\n#define ONE_OVER_HALF_PI (0.63661977236758134307553505349006)\n\n// Utils ////////////////////////////////////////////////////////////////\n\n\n\n\n// Triangle /////////////////////////////////////////////////////////////\n\nfloat do_tri(in float time, in float freq_hz, in float period_sec)\n{ // additively synthesize something vaguely like an NES triangle\n    float phase_rad = mod(time, period_sec) * TWO_PI * freq_hz;\n    float phase_within_quadrant = mod(phase_rad, HALF_PI);\n    float phase_at_quadrant_start = phase_rad - phase_within_quadrant;\n    float ramp_start = sin(phase_at_quadrant_start);\n    float ramp_end = sin(phase_at_quadrant_start + HALF_PI);\n\n    float pct = phase_within_quadrant * ONE_OVER_HALF_PI;\n    float retval = mix(ramp_start, ramp_end, pct);\n\n    retval += 0.2*cos(TWO_PI * freq_hz * time);             // sag/rise\n    //retval += 0.05*sin(32.0 * TWO_PI * freq_hz * time);   // steps\n        // Sounds less harsh on my machine without this.\n\n    retval *= 0.9;      //leave a bit of room\n    retval += 0.006;    //DC balance (sort of)\n\n    return retval;\n} //do_tri\n\n// Noise ////////////////////////////////////////////////////////////////\nfloat do_noise(in float time, in float freq_hz, in float period_sec)\n{ // synthesize something vaguely like noise\n    float retval = 0.5*sin(time*TWO_PI*freq_hz);\n    retval += 0.5 * rand(time);\n    return retval;\n} //do_noise\n\n// Square ///////////////////////////////////////////////////////////////\n\n#define MELODY_RAMP_TIME_SEC (0.02)\n    // Attack time\n#define MELODY_RAMPDOWN_TIME_SEC (0.05)\n    // Release time\n\nfloat do_square(in float time, in float freq_hz, in float period_sec)\n{ // synthesize a square wave\n    float phase_01 = mod(time, period_sec) * freq_hz;\n        // phase, from 0 to 1 in each cycle.  mod(time,period) gives us\n        // time in units of periods, then *freq gives 0..1\n    float whichpart = sign(0.5-phase_01);   // square -1 to 1\n        // positive in the first half of the cycle; negative in the second\n    float retval = (1.0 + whichpart) * 0.5; // square 0 to 1\n\n    return retval;\n} //do_square\n\n// Song data ////////////////////////////////////////////////////////////\n\n\n\n//Length 106.560000; ticks_per_beat 480.000000\n//Track 1: elan ^ necroposters\n//Track 2: _minus\n//Track 3: 2018\n//Notes from 20 to 108\n//#############################\n//Track 1\n// [36, 0.0, 1.0]\n// [36, 0.5, 0.25196850393700787]\n// [41, 1.0, 1.0]\n// [41, 1.5, 0.25196850393700787]\n// [56, 2.0, 1.0]\n// [56, 2.5, 0.25196850393700787]\n// [41, 3.0, 1.0]\n// [41, 3.5, 0.25196850393700787]\n// [36, 4.0, 1.0]\n// [36, 4.5, 0.25196850393700787]\n// [41, 5.0, 1.0]\n// [41, 5.5, 0.25196850393700787]\n// [56, 6.0, 1.0]\n// [56, 6.5, 0.25196850393700787]\n// [41, 7.0, 1.0]\n// [41, 7.5, 0.25196850393700787]\n// [37, 8.0, 1.0]\n// [37, 8.5, 0.25196850393700787]\n// [43, 9.0, 1.0]\n// [43, 9.5, 0.25196850393700787]\n// [58, 10.0, 1.0]\n// [58, 10.5, 0.25196850393700787]\n// [43, 11.0, 1.0]\n// [43, 11.5, 0.25196850393700787]\n// [37, 12.0, 1.0]\n// [37, 12.5, 0.25196850393700787]\n// [43, 13.0, 1.0]\n// [43, 13.5, 0.25196850393700787]\n// [58, 14.0, 1.0]\n// [58, 14.5, 0.25196850393700787]\n// [43, 15.0, 1.0]\n// [43, 15.5, 0.25196850393700787]\n// [36, 16.0, 1.0]\n// [36, 16.5, 0.25196850393700787]\n// [41, 17.0, 1.0]\n// [41, 17.5, 0.25196850393700787]\n// [56, 18.0, 1.0]\n// [56, 18.5, 0.25196850393700787]\n// [41, 19.0, 1.0]\n// [41, 19.5, 0.25196850393700787]\n// [36, 20.0, 1.0]\n// [36, 20.5, 0.25196850393700787]\n// [41, 21.0, 1.0]\n// [41, 21.5, 0.25196850393700787]\n// [56, 22.0, 1.0]\n// [56, 22.5, 0.25196850393700787]\n// [41, 23.0, 1.0]\n// [41, 23.5, 0.25196850393700787]\n// [37, 24.0, 1.0]\n// [37, 24.5, 0.25196850393700787]\n// [43, 25.0, 1.0]\n// [43, 25.5, 0.25196850393700787]\n// [58, 26.0, 1.0]\n// [58, 26.5, 0.25196850393700787]\n// [43, 27.0, 1.0]\n// [43, 27.5, 0.25196850393700787]\n// [37, 28.0, 1.0]\n// [37, 28.5, 0.25196850393700787]\n// [43, 29.0, 1.0]\n// [43, 29.5, 0.25196850393700787]\n// [58, 30.0, 1.0]\n// [58, 30.5, 0.25196850393700787]\n// [43, 31.0, 1.0]\n// [43, 31.5, 0.25196850393700787]\n// [39, 32.0, 1.0]\n// [39, 32.5, 0.25196850393700787]\n// [44, 33.0, 1.0]\n// [44, 33.5, 0.25196850393700787]\n// [60, 34.0, 1.0]\n// [60, 34.5, 0.25196850393700787]\n// [44, 35.0, 1.0]\n// [44, 35.5, 0.25196850393700787]\n// [39, 36.0, 1.0]\n// [39, 36.5, 0.25196850393700787]\n// [44, 37.0, 1.0]\n// [44, 37.5, 0.25196850393700787]\n// [60, 38.0, 1.0]\n// [60, 38.5, 0.25196850393700787]\n// [44, 39.0, 1.0]\n// [44, 39.5, 0.25196850393700787]\n// [43, 40.0, 1.0]\n// [43, 40.5, 0.25196850393700787]\n// [48, 41.0, 1.0]\n// [48, 41.5, 0.25196850393700787]\n// [63, 42.0, 1.0]\n// [63, 42.5, 0.25196850393700787]\n// [48, 43.0, 1.0]\n// [48, 43.5, 0.25196850393700787]\n// [43, 44.0, 1.0]\n// [43, 44.5, 0.25196850393700787]\n// [48, 45.0, 1.0]\n// [48, 45.5, 0.25196850393700787]\n// [63, 46.0, 1.0]\n// [63, 46.5, 0.25196850393700787]\n// [48, 47.0, 1.0]\n// [48, 47.5, 0.25196850393700787]\n// [39, 48.0, 1.0]\n// [39, 48.5, 0.25196850393700787]\n// [44, 49.0, 1.0]\n// [44, 49.5, 0.25196850393700787]\n// [60, 50.0, 1.0]\n// [60, 50.5, 0.25196850393700787]\n// [44, 51.0, 1.0]\n// [44, 51.5, 0.25196850393700787]\n// [39, 52.0, 1.0]\n// [39, 52.5, 0.25196850393700787]\n// [44, 53.0, 1.0]\n// [44, 53.5, 0.25196850393700787]\n// [60, 54.0, 1.0]\n// [60, 54.5, 0.25196850393700787]\n// [44, 55.0, 1.0]\n// [44, 55.5, 0.25196850393700787]\n// [43, 56.0, 1.0]\n// [43, 56.5, 0.25196850393700787]\n// [48, 57.0, 1.0]\n// [48, 57.5, 0.25196850393700787]\n// [63, 58.0, 1.0]\n// [63, 58.5, 0.25196850393700787]\n// [48, 59.0, 1.0]\n// [48, 59.5, 0.25196850393700787]\n// [43, 60.0, 1.0]\n// [43, 60.5, 0.25196850393700787]\n// [48, 61.0, 1.0]\n// [48, 61.5, 0.25196850393700787]\n// [63, 62.0, 1.0]\n// [63, 62.5, 0.25196850393700787]\n// [48, 63.0, 1.0]\n// [48, 63.5, 0.25196850393700787]\n// [44, 64.0, 1.0]\n// [44, 64.5, 0.5039370078740157]\n// [49, 65.0, 1.0]\n// [49, 65.5, 0.5039370078740157]\n// [65, 66.0, 1.0]\n// [65, 66.5, 0.5039370078740157]\n// [49, 67.0, 1.0]\n// [49, 67.5, 0.5039370078740157]\n// [44, 68.0, 1.0]\n// [44, 68.5, 0.5039370078740157]\n// [49, 69.0, 1.0]\n// [49, 69.5, 0.5039370078740157]\n// [65, 70.0, 1.0]\n// [65, 70.5, 0.5039370078740157]\n// [49, 71.0, 1.0]\n// [49, 71.5, 0.5039370078740157]\n// [51, 72.0, 1.0]\n// [51, 72.5, 0.5039370078740157]\n// [55, 73.0, 1.0]\n// [55, 73.5, 0.5039370078740157]\n// [70, 74.0, 1.0]\n// [70, 74.5, 0.5039370078740157]\n// [55, 75.0, 1.0]\n// [55, 75.5, 0.5039370078740157]\n// [51, 76.0, 1.0]\n// [51, 76.5, 0.5039370078740157]\n// [55, 77.0, 1.0]\n// [55, 77.5, 0.5039370078740157]\n// [70, 78.0, 1.0]\n// [70, 78.5, 0.5039370078740157]\n// [55, 79.0, 1.0]\n// [55, 79.5, 0.5039370078740157]\n// [44, 80.0, 1.0]\n// [44, 80.5, 0.5039370078740157]\n// [49, 81.0, 1.0]\n// [49, 81.5, 0.5039370078740157]\n// [65, 82.0, 1.0]\n// [65, 82.5, 0.5039370078740157]\n// [49, 83.0, 1.0]\n// [49, 83.5, 0.5039370078740157]\n// [44, 84.0, 1.0]\n// [44, 84.5, 0.5039370078740157]\n// [49, 85.0, 1.0]\n// [49, 85.5, 0.5039370078740157]\n// [65, 86.0, 1.0]\n// [65, 86.5, 0.5039370078740157]\n// [49, 87.0, 1.0]\n// [49, 87.5, 0.5039370078740157]\n// [51, 88.0, 1.0]\n// [51, 88.5, 0.5039370078740157]\n// [55, 89.0, 1.0]\n// [55, 89.5, 0.5039370078740157]\n// [70, 90.0, 1.0]\n// [70, 90.5, 0.5039370078740157]\n// [55, 91.0, 1.0]\n// [55, 91.5, 0.5039370078740157]\n// [51, 92.0, 1.0]\n// [51, 92.5, 0.5039370078740157]\n// [55, 93.0, 1.0]\n// [55, 93.5, 0.5039370078740157]\n// [70, 94.0, 1.0]\n// [70, 94.5, 0.5039370078740157]\n// [55, 95.0, 1.0]\n// [55, 95.5, 0.5039370078740157]\n// [73, 96.0, 1.0]\n// [73, 96.5, 0.7559055118110236]\n// [58, 97.0, 1.0]\n// [58, 97.5, 0.7716535433070866]\n// [67, 98.0, 1.0]\n// [67, 98.5, 0.7874015748031497]\n// [72, 99.0, 1.0]\n// [72, 99.5, 0.8031496062992126]\n// [73, 100.0, 1.0]\n// [73, 100.5, 0.8188976377952756]\n// [58, 101.0, 1.0]\n// [58, 101.5, 0.8346456692913385]\n// [67, 102.0, 1.0]\n// [67, 102.5, 0.8503937007874016]\n// [72, 103.0, 1.0]\n// [72, 103.5, 0.8661417322834646]\n// [60, 104.0, 1.0]\n// [60, 104.5, 0.8818897637795275]\n// [63, 105.0, 1.0]\n// [63, 105.5, 0.8976377952755905]\n// [79, 106.0, 1.0]\n// [79, 106.5, 1.0]\n// [63, 107.0, 1.0]\n// [63, 107.5, 1.0]\n// [60, 108.0, 1.0]\n// [60, 108.5, 1.0]\n// [70, 109.0, 1.0]\n// [70, 109.5, 1.0]\n// [60, 110.0, 1.0]\n// [60, 110.5, 1.0]\n// [63, 111.0, 1.0]\n// [63, 111.5, 1.0]\n// [73, 112.0, 1.0]\n// [73, 112.5, 0.7559055118110236]\n// [58, 113.0, 1.0]\n// [58, 113.5, 0.7716535433070866]\n// [67, 114.0, 1.0]\n// [67, 114.5, 0.7874015748031497]\n// [72, 115.0, 1.0]\n// [72, 115.5, 0.8031496062992126]\n// [73, 116.0, 1.0]\n// [73, 116.5, 0.8188976377952756]\n// [58, 117.0, 1.0]\n// [58, 117.5, 0.8346456692913385]\n// [67, 118.0, 1.0]\n// [67, 118.5, 0.8503937007874016]\n// [72, 119.0, 1.0]\n// [72, 119.5, 0.8661417322834646]\n// [60, 120.0, 1.0]\n// [60, 120.5, 0.8818897637795275]\n// [63, 121.0, 1.0]\n// [63, 121.5, 0.8976377952755905]\n// [79, 122.0, 1.0]\n// [79, 122.5, 1.0]\n// [63, 123.0, 1.0]\n// [63, 123.5, 1.0]\n// [60, 124.0, 1.0]\n// [60, 124.5, 1.0]\n// [70, 125.0, 1.0]\n// [70, 125.5, 1.0]\n// [60, 126.0, 1.0]\n// [60, 126.5, 1.0]\n// [63, 127.0, 1.0]\n// [63, 127.5, 1.0]\n// [92, 128.0, 1.0]\n// [92, 128.5, 1.0]\n// [77, 129.0, 1.0]\n// [77, 129.5, 1.0]\n// [86, 130.0, 1.0]\n// [86, 130.5, 1.0]\n// [91, 131.0, 1.0]\n// [91, 131.5, 1.0]\n// [92, 132.0, 1.0]\n// [92, 132.5, 1.0]\n// [77, 133.0, 1.0]\n// [77, 133.5, 1.0]\n// [86, 134.0, 1.0]\n// [86, 134.5, 1.0]\n// [91, 135.0, 1.0]\n// [91, 135.5, 1.0]\n// [79, 136.0, 1.0]\n// [79, 136.5, 1.0]\n// [82, 137.0, 1.0]\n// [82, 137.5, 1.0]\n// [98, 138.0, 1.0]\n// [98, 138.5, 1.0]\n// [82, 139.0, 1.0]\n// [82, 139.5, 1.0]\n// [79, 140.0, 1.0]\n// [79, 140.5, 1.0]\n// [89, 141.0, 1.0]\n// [89, 141.5, 1.0]\n// [79, 142.0, 1.0]\n// [79, 142.5, 1.0]\n// [82, 143.0, 1.0]\n// [82, 143.5, 1.0]\n// [92, 144.0, 1.0]\n// [92, 144.5, 1.0]\n// [77, 145.0, 1.0]\n// [77, 145.5, 1.0]\n// [86, 146.0, 1.0]\n// [86, 146.5, 1.0]\n// [91, 147.0, 1.0]\n// [91, 147.5, 1.0]\n// [92, 148.0, 1.0]\n// [92, 148.5, 1.0]\n// [77, 149.0, 1.0]\n// [77, 149.5, 1.0]\n// [86, 150.0, 1.0]\n// [86, 150.5, 1.0]\n// [91, 151.0, 1.0]\n// [91, 151.5, 1.0]\n// [79, 152.0, 1.0]\n// [79, 152.5, 1.0]\n// [82, 153.0, 1.0]\n// [82, 153.5, 1.0]\n// [98, 154.0, 1.0]\n// [98, 154.5, 1.0]\n// [82, 155.0, 1.0]\n// [82, 155.5, 1.0]\n// [79, 156.0, 1.0]\n// [79, 156.5, 1.0]\n// [89, 157.0, 1.0]\n// [89, 157.5, 1.0]\n// [79, 158.0, 1.0]\n// [79, 158.5, 1.0]\n// [82, 159.0, 1.0]\n// [82, 159.5, 1.0]\n// [72, 160.0, 1.0]\n// [77, 161.0, 1.0]\n// [92, 162.0, 1.0]\n// [77, 163.0, 1.0]\n// [72, 164.0, 1.0]\n// [77, 165.0, 1.0]\n// [92, 166.0, 1.0]\n// [77, 167.0, 1.0]\n// [70, 168.0, 1.0]\n// [75, 169.0, 1.0]\n// [91, 170.0, 1.0]\n// [75, 171.0, 1.0]\n// [70, 172.0, 1.0]\n// [75, 173.0, 1.0]\n// [91, 174.0, 1.0]\n// [75, 175.0, 1.0]\n// [72, 176.0, 1.0]\n// [77, 177.0, 1.0]\n// [92, 178.0, 1.0]\n// [77, 179.0, 1.0]\n// [72, 180.0, 1.0]\n// [77, 181.0, 1.0]\n// [92, 182.0, 1.0]\n// [77, 183.0, 1.0]\n// [70, 184.0, 1.0]\n// [75, 185.0, 1.0]\n// [91, 186.0, 1.0]\n// [75, 187.0, 1.0]\n// [70, 188.0, 1.0]\n// [75, 189.0, 1.0]\n// [91, 190.0, 1.0]\n// [75, 191.0, 1.0]\n// [68, 192.0, 1.0]\n// [73, 193.0, 1.0]\n// [89, 194.0, 1.0]\n// [73, 195.0, 1.0]\n// [68, 196.0, 1.0]\n// [73, 197.0, 1.0]\n// [89, 198.0, 1.0]\n// [73, 199.0, 1.0]\n// [70, 200.0, 1.0]\n// [75, 201.0, 1.0]\n// [91, 202.0, 1.0]\n// [75, 203.0, 1.0]\n// [70, 204.0, 1.0]\n// [75, 205.0, 1.0]\n// [91, 206.0, 1.0]\n// [75, 207.0, 1.0]\n// [68, 208.0, 1.0]\n// [73, 209.0, 1.0]\n// [89, 210.0, 1.0]\n// [73, 211.0, 1.0]\n// [68, 212.0, 1.0]\n// [73, 213.0, 1.0]\n// [89, 214.0, 1.0]\n// [73, 215.0, 1.0]\n// [70, 216.0, 1.0]\n// [75, 217.0, 1.0]\n// [91, 218.0, 1.0]\n// [75, 219.0, 1.0]\n// [70, 220.0, 1.0]\n// [75, 221.0, 1.0]\n// [91, 222.0, 1.0]\n// [75, 223.0, 1.0]\n// [60, 224.0, 1.0]\n// [0, 224.5, 0]\n// [65, 225.0, 1.0]\n// [80, 226.0, 1.0]\n// [65, 227.0, 1.0]\n// [60, 228.0, 1.0]\n// [65, 229.0, 1.0]\n// [80, 230.0, 1.0]\n// [65, 231.0, 1.0]\n// [61, 232.0, 1.0]\n// [67, 233.0, 1.0]\n// [82, 234.0, 1.0]\n// [67, 235.0, 1.0]\n// [61, 236.0, 1.0]\n// [67, 237.0, 1.0]\n// [82, 238.0, 1.0]\n// [67, 239.0, 1.0]\n// [60, 240.0, 1.0]\n// [65, 241.0, 1.0]\n// [80, 242.0, 1.0]\n// [65, 243.0, 1.0]\n// [60, 244.0, 1.0]\n// [65, 245.0, 1.0]\n// [80, 246.0, 1.0]\n// [65, 247.0, 1.0]\n// [61, 248.0, 1.0]\n// [67, 249.0, 1.0]\n// [82, 250.0, 1.0]\n// [67, 251.0, 1.0]\n// [61, 252.0, 1.0]\n// [67, 253.0, 1.0]\n// [82, 254.0, 1.0]\n// [67, 255.0, 1.0]\n// [63, 256.0, 1.0]\n// [68, 257.0, 1.0]\n// [84, 258.0, 1.0]\n// [68, 259.0, 1.0]\n// [63, 260.0, 1.0]\n// [68, 261.0, 1.0]\n// [84, 262.0, 1.0]\n// [68, 263.0, 1.0]\n// [61, 264.0, 1.0]\n// [67, 265.0, 1.0]\n// [82, 266.0, 1.0]\n// [67, 267.0, 1.0]\n// [61, 268.0, 1.0]\n// [67, 269.0, 1.0]\n// [82, 270.0, 1.0]\n// [67, 271.0, 1.0]\n// [63, 272.0, 1.0]\n// [68, 273.0, 1.0]\n// [84, 274.0, 1.0]\n// [68, 275.0, 1.0]\n// [63, 276.0, 1.0]\n// [68, 277.0, 1.0]\n// [84, 278.0, 1.0]\n// [68, 279.0, 1.0]\n// [61, 280.0, 1.0]\n// [67, 281.0, 1.0]\n// [82, 282.0, 1.0]\n// [67, 283.0, 1.0]\n// [61, 284.0, 1.0]\n// [67, 285.0, 1.0]\n// [82, 286.0, 1.0]\n// [67, 287.0, 1.0]\n// [56, 288.0, 1.0]\n// [61, 289.0, 1.0]\n// [56, 290.0, 1.0]\n// [77, 291.0, 1.0]\n// [56, 292.0, 1.0]\n// [61, 293.0, 1.0]\n// [56, 294.0, 1.0]\n// [77, 295.0, 1.0]\n// [58, 296.0, 1.0]\n// [63, 297.0, 1.0]\n// [58, 298.0, 1.0]\n// [79, 299.0, 1.0]\n// [58, 300.0, 1.0]\n// [63, 301.0, 1.0]\n// [58, 302.0, 1.0]\n// [79, 303.0, 1.0]\n// [56, 304.0, 1.0]\n// [61, 305.0, 1.0]\n// [56, 306.0, 1.0]\n// [77, 307.0, 1.0]\n// [56, 308.0, 1.0]\n// [61, 309.0, 1.0]\n// [56, 310.0, 1.0]\n// [77, 311.0, 1.0]\n// [58, 312.0, 1.0]\n// [63, 313.0, 1.0]\n// [58, 314.0, 1.0]\n// [79, 315.0, 1.0]\n// [58, 316.0, 1.0]\n// [63, 317.0, 1.0]\n// [58, 318.0, 1.0]\n// [79, 319.0, 1.0]\n// [46, 320.0, 1.0]\n// [51, 321.0, 1.0]\n// [0, 322.0, 0]\n// [67, 322.0, 1.0]\n// [51, 323.0, 1.0]\n// [46, 324.0, 1.0]\n// [51, 325.0, 1.0]\n// [67, 326.0, 1.0]\n// [51, 327.0, 1.0]\n// [44, 328.0, 1.0]\n// [49, 329.0, 1.0]\n// [65, 330.0, 1.0]\n// [49, 331.0, 1.0]\n// [44, 332.0, 1.0]\n// [49, 333.0, 1.0]\n// [65, 334.0, 1.0]\n// [49, 335.0, 1.0]\n// [46, 336.0, 1.0]\n// [51, 337.0, 1.0]\n// [67, 338.0, 1.0]\n// [51, 339.0, 1.0]\n// [46, 340.0, 1.0]\n// [51, 341.0, 1.0]\n// [67, 342.0, 1.0]\n// [51, 343.0, 1.0]\n// [44, 344.0, 1.0]\n// [49, 345.0, 1.0]\n// [65, 346.0, 1.0]\n// [49, 347.0, 1.0]\n// [44, 348.0, 1.0]\n// [49, 349.0, 1.0]\n// [65, 350.0, 1.0]\n// [49, 351.0, 1.0]\n// [34, 352.0, 1.0]\n// [39, 353.0, 1.0]\n// [55, 354.0, 1.0]\n// [39, 355.0, 1.0]\n// [36, 356.0, 1.0]\n// [0, 357.0, 0]\n// [41, 357.0, 1.0]\n// [56, 358.0, 1.0]\n// [41, 359.0, 1.0]\n// [37, 360.0, 1.0]\n// [43, 361.0, 1.0]\n// [58, 362.0, 1.0]\n// [43, 363.0, 1.0]\n// [32, 364.0, 1.0]\n// [37, 365.0, 1.0]\n// [53, 366.0, 1.0]\n// [37, 367.0, 1.0]\n// [34, 368.0, 1.0]\n// [39, 369.0, 1.0]\n// [55, 370.0, 1.0]\n// [39, 371.0, 1.0]\n// [36, 372.0, 1.0]\n// [41, 373.0, 1.0]\n// [56, 374.0, 1.0]\n// [41, 375.0, 1.0]\n// [37, 376.0, 1.0]\n// [43, 377.0, 1.0]\n// [58, 378.0, 1.0]\n// [43, 379.0, 1.0]\n// [32, 380.0, 1.0]\n// [37, 381.0, 1.0]\n// [53, 382.0, 1.0]\n// [37, 383.0, 1.0]\n// [22, 384.0, 1.0]\n// [27, 385.0, 1.0]\n// [0, 386.0, 0]\n// [43, 386.0, 1.0]\n// [27, 387.0, 1.0]\n// [22, 388.0, 1.0]\n// [27, 389.5, 1.0]\n// [43, 390.5, 1.0]\n// [27, 391.5, 1.0]\n// [24, 392.75, 1.0]\n// [29, 393.75, 1.0]\n// [44, 394.75, 1.0]\n// [29, 395.75, 1.0]\n// [24, 397.0, 1.0]\n// [44, 399.0, 1.0]\n// [22, 400.0, 1.0]\n// [27, 401.0, 1.0]\n// [43, 402.0, 1.0]\n// [27, 403.0, 1.0]\n// [22, 404.0, 1.0]\n// [27, 405.5, 1.0]\n// [43, 406.5, 1.0]\n// [27, 407.5, 1.0]\n// [24, 408.75, 1.0]\n// [29, 409.75, 1.0]\n// [44, 410.75, 1.0]\n// [29, 411.75, 1.0]\n// [24, 413.0, 1.0]\n// [44, 415.0, 1.0]\n// [22, 416.0, 1.0]\n// [25, 417.0, 1.0]\n// [41, 418.0, 1.0]\n// [25, 419.0, 1.0]\n// [22, 420.0, 1.0]\n// [25, 421.0, 1.0]\n// [41, 422.0, 1.0]\n// [25, 423.0, 1.0]\n// [20, 424.0, 1.0]\n// [24, 425.0, 1.0]\n// [39, 426.0, 1.0]\n// [24, 427.0, 1.0]\n// [20, 428.0, 1.0]\n// [24, 429.0, 1.0]\n// [39, 430.0, 1.0]\n// [24, 431.0, 1.0]\n// [22, 432.0, 1.0]\n// [25, 433.0, 1.0]\n// [41, 434.0, 1.0]\n// [25, 435.0, 1.0]\n// [22, 436.0, 1.0]\n// [25, 437.0, 1.0]\n// [41, 438.0, 1.0]\n// [25, 439.0, 1.0]\n// [20, 440.0, 1.0]\n// [24, 441.0, 1.0]\n// [39, 442.0, 1.0]\n// [24, 443.0, 1.0]\n// [20, 444.0, 1.0]\n// [24, 445.0, 1.0]\n// [39, 446.0, 1.0]\n// [24, 447.0, 1.0]\n// [0, 480.0, 0]\n//Track 2\n// [84, 161.0, 1.0]\n// [91, 165.0, 1.0]\n// [106, 169.0, 1.0]\n// [91, 173.0, 1.0]\n// [84, 177.0, 1.0]\n// [91, 181.0, 1.0]\n// [106, 185.0, 1.0]\n// [91, 189.0, 1.0]\n// [82, 193.0, 1.0]\n// [87, 197.0, 1.0]\n// [103, 201.0, 1.0]\n// [87, 205.0, 1.0]\n// [82, 209.0, 1.0]\n// [87, 213.0, 1.0]\n// [103, 217.0, 1.0]\n// [87, 221.0, 1.0]\n// [84, 224.5, 0.5039370078740157]\n// [87, 228.5, 0.5039370078740157]\n// [103, 232.5, 0.5039370078740157]\n// [87, 236.5, 0.5039370078740157]\n// [84, 240.5, 0.5039370078740157]\n// [87, 244.5, 0.5039370078740157]\n// [103, 248.5, 0.5039370078740157]\n// [87, 252.5, 0.5039370078740157]\n// [87, 257.0, 1.0]\n// [91, 261.0, 1.0]\n// [106, 265.0, 1.0]\n// [91, 269.0, 1.0]\n// [87, 273.0, 1.0]\n// [91, 277.0, 1.0]\n// [106, 281.0, 1.0]\n// [91, 285.0, 1.0]\n// [80, 289.0, 1.0]\n// [87, 293.0, 1.0]\n// [103, 297.0, 1.0]\n// [87, 301.0, 1.0]\n// [80, 305.0, 1.0]\n// [87, 309.0, 1.0]\n// [103, 313.0, 1.0]\n// [87, 317.0, 1.0]\n// [44, 321.0, 1.0]\n// [51, 325.0, 1.0]\n// [0, 327.0, 0]\n// [67, 329.0, 1.0]\n// [51, 333.0, 1.0]\n// [44, 337.0, 1.0]\n// [51, 341.0, 1.0]\n// [67, 345.0, 1.0]\n// [51, 349.0, 1.0]\n// [20, 353.5, 1.0]\n// [29, 357.5, 1.0]\n// [44, 361.5, 1.0]\n// [48, 365.5, 1.0]\n// [20, 369.5, 1.0]\n// [29, 373.5, 1.0]\n// [44, 377.5, 1.0]\n// [48, 381.5, 1.0]\n// [34, 384.5, 1.0]\n// [48, 386.5, 1.0]\n// [41, 388.5, 1.0]\n// [34, 392.0, 1.0]\n// [41, 394.0, 1.0]\n// [56, 396.0, 1.0]\n// [58, 398.0, 1.0]\n// [0, 399.0, 0]\n// [34, 400.5, 1.0]\n// [48, 402.5, 1.0]\n// [41, 404.5, 1.0]\n// [34, 408.0, 1.0]\n// [41, 410.0, 1.0]\n// [56, 412.0, 1.0]\n// [58, 414.0, 1.0]\n// [34, 416.5, 1.0]\n// [46, 418.5, 1.0]\n// [34, 420.5, 1.0]\n// [46, 422.5, 1.0]\n// [34, 424.5, 1.0]\n// [46, 426.5, 1.0]\n// [34, 428.5, 1.0]\n// [46, 430.5, 1.0]\n// [34, 432.5, 1.0]\n// [46, 434.5, 1.0]\n// [34, 436.5, 1.0]\n// [46, 438.5, 1.0]\n// [34, 440.5, 1.0]\n// [46, 442.5, 1.0]\n// [34, 444.5, 1.0]\n// [46, 446.5, 1.0]\n// [0, 480.0, 0]\n//Track 3\n// [24, 0.0, 1.0]\n// [37, 8.0, 1.0]\n// [24, 16.0, 1.0]\n// [37, 24.0, 1.0]\n// [39, 32.0, 1.0]\n// [31, 40.0, 1.0]\n// [39, 48.0, 1.0]\n// [31, 56.0, 1.0]\n// [44, 64.0, 1.0]\n// [51, 72.0, 1.0]\n// [44, 80.0, 1.0]\n// [51, 88.0, 1.0]\n// [61, 96.0, 1.0]\n// [48, 104.0, 1.0]\n// [61, 112.0, 1.0]\n// [48, 120.0, 1.0]\n// [68, 128.0, 1.0]\n// [55, 136.0, 1.0]\n// [68, 144.0, 1.0]\n// [55, 152.0, 1.0]\n// [48, 160.0, 1.0]\n// [48, 161.5, 1.0]\n// [48, 162.5, 1.0]\n// [48, 163.0, 1.0]\n// [108, 163.5, 1.0]\n// [48, 164.0, 1.0]\n// [48, 165.5, 1.0]\n// [48, 166.5, 1.0]\n// [48, 167.0, 1.0]\n// [108, 167.5, 1.0]\n// [48, 168.0, 1.0]\n// [48, 169.5, 1.0]\n// [48, 170.5, 1.0]\n// [48, 171.0, 1.0]\n// [108, 171.5, 1.0]\n// [48, 172.0, 1.0]\n// [48, 173.5, 1.0]\n// [108, 174.0, 1.0]\n// [108, 175.0, 1.0]\n// [48, 176.0, 1.0]\n// [48, 177.5, 1.0]\n// [48, 178.5, 1.0]\n// [48, 179.0, 1.0]\n// [108, 179.5, 1.0]\n// [48, 180.0, 1.0]\n// [48, 181.5, 1.0]\n// [48, 182.5, 1.0]\n// [48, 183.0, 1.0]\n// [108, 183.5, 1.0]\n// [48, 184.0, 1.0]\n// [48, 185.5, 1.0]\n// [48, 186.5, 1.0]\n// [48, 187.0, 1.0]\n// [108, 187.5, 1.0]\n// [48, 188.0, 1.0]\n// [48, 189.5, 1.0]\n// [108, 190.0, 1.0]\n// [108, 191.0, 1.0]\n// [48, 192.0, 1.0]\n// [48, 193.5, 1.0]\n// [48, 194.5, 1.0]\n// [48, 195.0, 1.0]\n// [108, 195.5, 1.0]\n// [48, 196.0, 1.0]\n// [48, 197.5, 1.0]\n// [48, 198.5, 1.0]\n// [48, 199.0, 1.0]\n// [108, 199.5, 1.0]\n// [48, 200.0, 1.0]\n// [48, 201.5, 1.0]\n// [48, 202.5, 1.0]\n// [48, 203.0, 1.0]\n// [108, 203.5, 1.0]\n// [48, 204.0, 1.0]\n// [48, 205.5, 1.0]\n// [108, 206.0, 1.0]\n// [108, 207.0, 1.0]\n// [48, 208.0, 1.0]\n// [48, 209.5, 1.0]\n// [48, 210.5, 1.0]\n// [48, 211.0, 1.0]\n// [108, 211.5, 1.0]\n// [48, 212.0, 1.0]\n// [48, 213.5, 1.0]\n// [48, 214.5, 1.0]\n// [48, 215.0, 1.0]\n// [108, 215.5, 1.0]\n// [48, 216.0, 1.0]\n// [48, 217.5, 1.0]\n// [48, 218.5, 1.0]\n// [48, 219.0, 1.0]\n// [108, 219.5, 1.0]\n// [48, 220.0, 1.0]\n// [48, 221.5, 1.0]\n// [108, 222.0, 1.0]\n// [108, 223.0, 1.0]\n// [48, 256.0, 1.0]\n// [48, 257.5, 1.0]\n// [48, 259.0, 1.0]\n// [48, 260.0, 1.0]\n// [48, 261.5, 1.0]\n// [48, 263.0, 1.0]\n// [48, 264.0, 1.0]\n// [48, 265.5, 1.0]\n// [48, 267.0, 1.0]\n// [48, 268.0, 1.0]\n// [48, 269.5, 1.0]\n// [108, 270.0, 1.0]\n// [108, 271.0, 1.0]\n// [48, 272.0, 1.0]\n// [48, 273.5, 1.0]\n// [48, 275.0, 1.0]\n// [48, 276.0, 1.0]\n// [48, 277.5, 1.0]\n// [48, 279.0, 1.0]\n// [48, 280.0, 1.0]\n// [48, 281.5, 1.0]\n// [48, 283.0, 1.0]\n// [48, 284.0, 1.0]\n// [48, 285.5, 1.0]\n// [108, 286.0, 1.0]\n// [108, 287.0, 1.0]\n// [48, 288.0, 1.0]\n// [48, 289.5, 1.0]\n// [48, 290.5, 1.0]\n// [48, 291.0, 1.0]\n// [108, 291.5, 1.0]\n// [48, 292.0, 1.0]\n// [48, 293.5, 1.0]\n// [48, 294.5, 1.0]\n// [48, 295.0, 1.0]\n// [108, 295.5, 1.0]\n// [48, 296.0, 1.0]\n// [48, 297.5, 1.0]\n// [48, 298.5, 1.0]\n// [48, 299.0, 1.0]\n// [108, 299.5, 1.0]\n// [48, 300.0, 1.0]\n// [48, 301.5, 1.0]\n// [108, 302.0, 1.0]\n// [108, 303.0, 1.0]\n// [48, 304.0, 1.0]\n// [48, 305.5, 1.0]\n// [48, 306.5, 1.0]\n// [48, 307.0, 1.0]\n// [108, 307.5, 1.0]\n// [48, 308.0, 1.0]\n// [48, 309.5, 1.0]\n// [48, 310.5, 1.0]\n// [48, 311.0, 1.0]\n// [108, 311.5, 1.0]\n// [48, 312.0, 1.0]\n// [48, 313.5, 1.0]\n// [48, 314.5, 1.0]\n// [48, 315.0, 1.0]\n// [108, 315.5, 1.0]\n// [48, 316.0, 1.0]\n// [48, 317.5, 1.0]\n// [108, 318.0, 1.0]\n// [108, 319.0, 1.0]\n// [48, 320.0, 1.0]\n// [48, 323.0, 1.0]\n// [48, 324.0, 1.0]\n// [48, 327.0, 1.0]\n// [48, 328.0, 1.0]\n// [48, 331.0, 1.0]\n// [48, 332.0, 1.0]\n// [108, 334.0, 1.0]\n// [108, 335.0, 1.0]\n// [48, 336.0, 1.0]\n// [48, 339.0, 1.0]\n// [48, 340.0, 1.0]\n// [48, 343.0, 1.0]\n// [48, 344.0, 1.0]\n// [48, 347.0, 1.0]\n// [48, 348.0, 1.0]\n// [108, 350.0, 1.0]\n// [108, 351.0, 1.0]\n// [48, 355.0, 1.0]\n// [48, 359.0, 1.0]\n// [48, 363.0, 1.0]\n// [108, 366.0, 1.0]\n// [108, 367.0, 1.0]\n// [48, 371.0, 1.0]\n// [48, 375.0, 1.0]\n// [48, 379.0, 1.0]\n// [108, 382.0, 1.0]\n// [108, 383.0, 1.0]\n// [34, 384.0, 1.0]\n// [0, 397.5, 0]\n// [36, 397.5, 1.0]\n// [34, 400.0, 1.0]\n// [36, 413.5, 1.0]\n// [34, 416.0, 1.0]\n// [36, 429.0, 1.0]\n// [34, 432.0, 1.0]\n// [36, 445.0, 1.0]\n// [34, 448.0, 1.0]\n// [32, 462.0, 1.0]\n// [34, 464.0, 1.0]\n// [32, 478.0, 1.0]\n// [0, 480.0, 0]\n//#############################\nvec2 get_track_square(float beat) {\n    float key = beat;\n    if(key>=152.0){\n        if(key>=295.0){\n            if(key>=369.0){\n                if(key>=408.8){\n                    if(key>=429.0){\n                        if(key>=439.0){\n                            if(key>=444.0){\n                                if(key>=446.0){\n                                    if(key>=480.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                                    if(key>=447.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=446.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=445.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=444.0) return vec2(20.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=441.0){\n                                    if(key>=443.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=442.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=441.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=440.0) return vec2(20.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=439.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=434.0){\n                                if(key>=436.0){\n                                    if(key>=438.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=437.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=436.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=435.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=434.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=431.0){\n                                    if(key>=433.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=432.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=431.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=430.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=429.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }\n                    }else{\n                        if(key>=419.0){\n                            if(key>=424.0){\n                                if(key>=426.0){\n                                    if(key>=428.0) return vec2(20.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=427.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=426.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=425.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=424.0) return vec2(20.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=421.0){\n                                    if(key>=423.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=422.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=421.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=420.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=419.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=413.0){\n                                if(key>=416.0){\n                                    if(key>=418.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=417.0) return vec2(25.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=416.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=415.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=413.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=411.8) return vec2(29.00000000000000000000, 1.00000000000000000000);\n                                if(key>=410.8) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                if(key>=409.8) return vec2(29.00000000000000000000, 1.00000000000000000000);\n                                if(key>=408.8) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=387.0){\n                        if(key>=397.0){\n                            if(key>=403.0){\n                                if(key>=405.5){\n                                    if(key>=407.5) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=406.5) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=405.5) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=404.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=403.0) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=400.0){\n                                    if(key>=402.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=401.0) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=400.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=399.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=397.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=391.5){\n                                if(key>=393.8){\n                                    if(key>=395.8) return vec2(29.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=394.8) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=393.8) return vec2(29.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=392.8) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=391.5) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=390.5) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                if(key>=389.5) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                                if(key>=388.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                if(key>=387.0) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=378.0){\n                            if(key>=383.0){\n                                if(key>=385.0){\n                                    if(key>=386.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=386.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                                    if(key>=385.0) return vec2(27.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=384.0) return vec2(22.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=383.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=380.0){\n                                    if(key>=382.0) return vec2(53.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=381.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=380.0) return vec2(32.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=379.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=378.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=373.0){\n                                if(key>=375.0){\n                                    if(key>=377.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=376.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=375.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=374.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=373.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=372.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                                if(key>=371.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                if(key>=370.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                if(key>=369.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(key>=332.0){\n                    if(key>=351.0){\n                        if(key>=359.0){\n                            if(key>=364.0){\n                                if(key>=366.0){\n                                    if(key>=368.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=367.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=366.0) return vec2(53.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=365.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=364.0) return vec2(32.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=361.0){\n                                    if(key>=363.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=362.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=361.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=360.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=359.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=355.0){\n                                if(key>=357.0){\n                                    if(key>=358.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=357.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=357.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                                }else{\n                                    if(key>=356.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=355.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=354.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                if(key>=353.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                if(key>=352.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                                if(key>=351.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=341.0){\n                            if(key>=346.0){\n                                if(key>=348.0){\n                                    if(key>=350.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=349.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=348.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=347.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=346.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=343.0){\n                                    if(key>=345.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=344.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=343.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=342.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=341.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=336.0){\n                                if(key>=338.0){\n                                    if(key>=340.0) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=339.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=338.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=337.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=336.0) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=335.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                if(key>=334.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                if(key>=333.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                if(key>=332.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=314.0){\n                        if(key>=322.0){\n                            if(key>=327.0){\n                                if(key>=329.0){\n                                    if(key>=331.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=330.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=329.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=328.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=327.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=324.0){\n                                    if(key>=326.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=325.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=324.0) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=323.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=322.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=318.0){\n                                if(key>=320.0){\n                                    if(key>=322.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                                    if(key>=321.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=320.0) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=319.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=318.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=317.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                if(key>=316.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                if(key>=315.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                if(key>=314.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=304.0){\n                            if(key>=309.0){\n                                if(key>=311.0){\n                                    if(key>=313.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=312.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=311.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=310.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=309.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=306.0){\n                                    if(key>=308.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=307.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=306.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=305.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=304.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=299.0){\n                                if(key>=301.0){\n                                    if(key>=303.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=302.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=301.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=300.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=299.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=298.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                if(key>=297.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                if(key>=296.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                if(key>=295.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }\n        }else{\n            if(key>=220.0){\n                if(key>=257.0){\n                    if(key>=276.0){\n                        if(key>=285.0){\n                            if(key>=290.0){\n                                if(key>=292.0){\n                                    if(key>=294.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=293.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=292.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=291.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=290.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=287.0){\n                                    if(key>=289.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=288.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=287.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=286.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=285.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=280.0){\n                                if(key>=282.0){\n                                    if(key>=284.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=283.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=282.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=281.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=280.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=279.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                if(key>=278.0) return vec2(84.00000000000000000000, 1.00000000000000000000);\n                                if(key>=277.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                if(key>=276.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=266.0){\n                            if(key>=271.0){\n                                if(key>=273.0){\n                                    if(key>=275.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=274.0) return vec2(84.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=273.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=272.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=271.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=268.0){\n                                    if(key>=270.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=269.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=268.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=267.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=266.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=261.0){\n                                if(key>=263.0){\n                                    if(key>=265.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=264.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=263.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=262.0) return vec2(84.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=261.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=260.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                if(key>=259.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                if(key>=258.0) return vec2(84.00000000000000000000, 1.00000000000000000000);\n                                if(key>=257.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=238.0){\n                        if(key>=247.0){\n                            if(key>=252.0){\n                                if(key>=254.0){\n                                    if(key>=256.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=255.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=254.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=253.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=252.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=249.0){\n                                    if(key>=251.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=250.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=249.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=248.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=247.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=242.0){\n                                if(key>=244.0){\n                                    if(key>=246.0) return vec2(80.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=245.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=244.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=243.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=242.0) return vec2(80.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=241.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                if(key>=240.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                if(key>=239.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                if(key>=238.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=228.0){\n                            if(key>=233.0){\n                                if(key>=235.0){\n                                    if(key>=237.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=236.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=235.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=234.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=233.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=230.0){\n                                    if(key>=232.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=231.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=230.0) return vec2(80.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=229.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=228.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=224.0){\n                                if(key>=225.0){\n                                    if(key>=227.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=226.0) return vec2(80.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=225.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=224.5) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                                    if(key>=224.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=223.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                if(key>=222.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                if(key>=221.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                if(key>=220.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(key>=182.0){\n                    if(key>=201.0){\n                        if(key>=210.0){\n                            if(key>=215.0){\n                                if(key>=217.0){\n                                    if(key>=219.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=218.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=217.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=216.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=215.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=212.0){\n                                    if(key>=214.0) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=213.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=212.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=211.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=210.0) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=205.0){\n                                if(key>=207.0){\n                                    if(key>=209.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=208.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=207.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=206.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=205.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=204.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                if(key>=203.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                if(key>=202.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                if(key>=201.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=191.0){\n                            if(key>=196.0){\n                                if(key>=198.0){\n                                    if(key>=200.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=199.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=198.0) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=197.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=196.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=193.0){\n                                    if(key>=195.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=194.0) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=193.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=192.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=191.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=186.0){\n                                if(key>=188.0){\n                                    if(key>=190.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=189.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=188.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=187.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=186.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=185.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                if(key>=184.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                if(key>=183.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                if(key>=182.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=163.0){\n                        if(key>=172.0){\n                            if(key>=177.0){\n                                if(key>=179.0){\n                                    if(key>=181.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=180.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=179.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=178.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=177.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=174.0){\n                                    if(key>=176.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=175.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=174.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=173.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=172.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=167.0){\n                                if(key>=169.0){\n                                    if(key>=171.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=170.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=169.0) return vec2(75.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=168.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=167.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=166.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                if(key>=165.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                if(key>=164.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                if(key>=163.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=156.5){\n                            if(key>=159.0){\n                                if(key>=160.0){\n                                    if(key>=162.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=161.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=160.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=159.5) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=159.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=157.5){\n                                    if(key>=158.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=158.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=157.5) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=157.0) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=156.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=154.0){\n                                if(key>=155.0){\n                                    if(key>=156.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=155.5) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=155.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=154.5) return vec2(98.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=154.0) return vec2(98.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=153.5) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                if(key>=153.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                if(key>=152.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                if(key>=152.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }else{\n        if(key>=76.0){\n            if(key>=114.0){\n                if(key>=133.0){\n                    if(key>=142.5){\n                        if(key>=147.0){\n                            if(key>=149.5){\n                                if(key>=150.5){\n                                    if(key>=151.5) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=151.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=150.5) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=150.0) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=149.5) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=148.0){\n                                    if(key>=149.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=148.5) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=148.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=147.5) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=147.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=144.5){\n                                if(key>=145.5){\n                                    if(key>=146.5) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=146.0) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=145.5) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=145.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=144.5) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=144.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                if(key>=143.5) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                if(key>=143.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                if(key>=142.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=137.5){\n                            if(key>=140.0){\n                                if(key>=141.0){\n                                    if(key>=142.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=141.5) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=141.0) return vec2(89.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=140.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=140.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=138.5){\n                                    if(key>=139.5) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=139.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=138.5) return vec2(98.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=138.0) return vec2(98.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=137.5) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=135.0){\n                                if(key>=136.0){\n                                    if(key>=137.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=136.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=136.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=135.5) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=135.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=134.5) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                if(key>=134.0) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                if(key>=133.5) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                if(key>=133.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=123.5){\n                        if(key>=128.0){\n                            if(key>=130.5){\n                                if(key>=131.5){\n                                    if(key>=132.5) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=132.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=131.5) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=131.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=130.5) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=129.0){\n                                    if(key>=130.0) return vec2(86.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=129.5) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=129.0) return vec2(77.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=128.5) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=128.0) return vec2(92.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=125.5){\n                                if(key>=126.5){\n                                    if(key>=127.5) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=127.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=126.5) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=126.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=125.5) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=125.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                if(key>=124.5) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                if(key>=124.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                if(key>=123.5) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }else{\n                        if(key>=118.5){\n                            if(key>=121.0){\n                                if(key>=122.0){\n                                    if(key>=123.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=122.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=122.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=121.5) return vec2(63.00000000000000000000, 0.89763779527559051097);\n                                    if(key>=121.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=119.5){\n                                    if(key>=120.5) return vec2(60.00000000000000000000, 0.88188976377952754682);\n                                    if(key>=120.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=119.5) return vec2(72.00000000000000000000, 0.86614173228346458266);\n                                }else{\n                                    if(key>=119.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=118.5) return vec2(67.00000000000000000000, 0.85039370078740161851);\n                                }\n                            }\n                        }else{\n                            if(key>=116.0){\n                                if(key>=117.0){\n                                    if(key>=118.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=117.5) return vec2(58.00000000000000000000, 0.83464566929133854334);\n                                    if(key>=117.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=116.5) return vec2(73.00000000000000000000, 0.81889763779527557919);\n                                    if(key>=116.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=115.5) return vec2(72.00000000000000000000, 0.80314960629921261503);\n                                if(key>=115.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                if(key>=114.5) return vec2(67.00000000000000000000, 0.78740157480314965088);\n                                if(key>=114.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(key>=95.0){\n                    if(key>=104.5){\n                        if(key>=109.0){\n                            if(key>=111.5){\n                                if(key>=112.5){\n                                    if(key>=113.5) return vec2(58.00000000000000000000, 0.77165354330708657571);\n                                    if(key>=113.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=112.5) return vec2(73.00000000000000000000, 0.75590551181102361156);\n                                }else{\n                                    if(key>=112.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=111.5) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=110.0){\n                                    if(key>=111.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=110.5) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=110.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=109.5) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=109.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=106.5){\n                                if(key>=107.5){\n                                    if(key>=108.5) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=108.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=107.5) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=107.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=106.5) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=106.0) return vec2(79.00000000000000000000, 1.00000000000000000000);\n                                if(key>=105.5) return vec2(63.00000000000000000000, 0.89763779527559051097);\n                                if(key>=105.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                if(key>=104.5) return vec2(60.00000000000000000000, 0.88188976377952754682);\n                            }\n                        }\n                    }else{\n                        if(key>=99.5){\n                            if(key>=102.0){\n                                if(key>=103.0){\n                                    if(key>=104.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=103.5) return vec2(72.00000000000000000000, 0.86614173228346458266);\n                                    if(key>=103.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=102.5) return vec2(67.00000000000000000000, 0.85039370078740161851);\n                                    if(key>=102.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=100.5){\n                                    if(key>=101.5) return vec2(58.00000000000000000000, 0.83464566929133854334);\n                                    if(key>=101.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=100.5) return vec2(73.00000000000000000000, 0.81889763779527557919);\n                                }else{\n                                    if(key>=100.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=99.5) return vec2(72.00000000000000000000, 0.80314960629921261503);\n                                }\n                            }\n                        }else{\n                            if(key>=97.0){\n                                if(key>=98.0){\n                                    if(key>=99.0) return vec2(72.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=98.5) return vec2(67.00000000000000000000, 0.78740157480314965088);\n                                    if(key>=98.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=97.5) return vec2(58.00000000000000000000, 0.77165354330708657571);\n                                    if(key>=97.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=96.5) return vec2(73.00000000000000000000, 0.75590551181102361156);\n                                if(key>=96.0) return vec2(73.00000000000000000000, 1.00000000000000000000);\n                                if(key>=95.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                if(key>=95.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=85.5){\n                        if(key>=90.0){\n                            if(key>=92.5){\n                                if(key>=93.5){\n                                    if(key>=94.5) return vec2(70.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=94.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=93.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                }else{\n                                    if(key>=93.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=92.5) return vec2(51.00000000000000000000, 0.50393700787401574104);\n                                }\n                            }else{\n                                if(key>=91.0){\n                                    if(key>=92.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=91.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=91.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=90.5) return vec2(70.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=90.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=87.5){\n                                if(key>=88.5){\n                                    if(key>=89.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=89.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=88.5) return vec2(51.00000000000000000000, 0.50393700787401574104);\n                                }else{\n                                    if(key>=88.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=87.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                                }\n                            }else{\n                                if(key>=87.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                if(key>=86.5) return vec2(65.00000000000000000000, 0.50393700787401574104);\n                                if(key>=86.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                if(key>=85.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                            }\n                        }\n                    }else{\n                        if(key>=80.5){\n                            if(key>=83.0){\n                                if(key>=84.0){\n                                    if(key>=85.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=84.5) return vec2(44.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=84.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=83.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=83.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=81.5){\n                                    if(key>=82.5) return vec2(65.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=82.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=81.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                                }else{\n                                    if(key>=81.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=80.5) return vec2(44.00000000000000000000, 0.50393700787401574104);\n                                }\n                            }\n                        }else{\n                            if(key>=78.0){\n                                if(key>=79.0){\n                                    if(key>=80.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=79.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=79.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=78.5) return vec2(70.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=78.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=77.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                if(key>=77.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                if(key>=76.5) return vec2(51.00000000000000000000, 0.50393700787401574104);\n                                if(key>=76.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }\n        }else{\n            if(key>=38.0){\n                if(key>=57.0){\n                    if(key>=66.5){\n                        if(key>=71.0){\n                            if(key>=73.5){\n                                if(key>=74.5){\n                                    if(key>=75.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=75.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=74.5) return vec2(70.00000000000000000000, 0.50393700787401574104);\n                                }else{\n                                    if(key>=74.0) return vec2(70.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=73.5) return vec2(55.00000000000000000000, 0.50393700787401574104);\n                                }\n                            }else{\n                                if(key>=72.0){\n                                    if(key>=73.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=72.5) return vec2(51.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=72.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=71.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=71.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=68.5){\n                                if(key>=69.5){\n                                    if(key>=70.5) return vec2(65.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=70.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=69.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                                }else{\n                                    if(key>=69.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=68.5) return vec2(44.00000000000000000000, 0.50393700787401574104);\n                                }\n                            }else{\n                                if(key>=68.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                if(key>=67.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                                if(key>=67.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                if(key>=66.5) return vec2(65.00000000000000000000, 0.50393700787401574104);\n                            }\n                        }\n                    }else{\n                        if(key>=61.5){\n                            if(key>=64.0){\n                                if(key>=65.0){\n                                    if(key>=66.0) return vec2(65.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=65.5) return vec2(49.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=65.0) return vec2(49.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=64.5) return vec2(44.00000000000000000000, 0.50393700787401574104);\n                                    if(key>=64.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=62.5){\n                                    if(key>=63.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=63.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=62.5) return vec2(63.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=62.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=61.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }\n                        }else{\n                            if(key>=59.0){\n                                if(key>=60.0){\n                                    if(key>=61.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=60.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=60.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=59.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=59.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=58.5) return vec2(63.00000000000000000000, 0.25196850393700787052);\n                                if(key>=58.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                if(key>=57.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                                if(key>=57.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=47.5){\n                        if(key>=52.0){\n                            if(key>=54.5){\n                                if(key>=55.5){\n                                    if(key>=56.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=56.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=55.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=55.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=54.5) return vec2(60.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }else{\n                                if(key>=53.0){\n                                    if(key>=54.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=53.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=53.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=52.5) return vec2(39.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=52.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=49.5){\n                                if(key>=50.5){\n                                    if(key>=51.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=51.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=50.5) return vec2(60.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=50.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=49.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }else{\n                                if(key>=49.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                if(key>=48.5) return vec2(39.00000000000000000000, 0.25196850393700787052);\n                                if(key>=48.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                if(key>=47.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                            }\n                        }\n                    }else{\n                        if(key>=42.5){\n                            if(key>=45.0){\n                                if(key>=46.0){\n                                    if(key>=47.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=46.5) return vec2(63.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=46.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=45.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=45.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=43.5){\n                                    if(key>=44.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=44.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=43.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=43.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=42.5) return vec2(63.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }\n                        }else{\n                            if(key>=40.0){\n                                if(key>=41.0){\n                                    if(key>=42.0) return vec2(63.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=41.5) return vec2(48.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=41.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=40.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=40.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=39.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                if(key>=39.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                if(key>=38.5) return vec2(60.00000000000000000000, 0.25196850393700787052);\n                                if(key>=38.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(key>=19.0){\n                    if(key>=28.5){\n                        if(key>=33.0){\n                            if(key>=35.5){\n                                if(key>=36.5){\n                                    if(key>=37.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=37.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=36.5) return vec2(39.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=36.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=35.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }else{\n                                if(key>=34.0){\n                                    if(key>=35.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=34.5) return vec2(60.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=34.0) return vec2(60.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=33.5) return vec2(44.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=33.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=30.5){\n                                if(key>=31.5){\n                                    if(key>=32.5) return vec2(39.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=32.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=31.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=31.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=30.5) return vec2(58.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }else{\n                                if(key>=30.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                if(key>=29.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                if(key>=29.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                if(key>=28.5) return vec2(37.00000000000000000000, 0.25196850393700787052);\n                            }\n                        }\n                    }else{\n                        if(key>=23.5){\n                            if(key>=26.0){\n                                if(key>=27.0){\n                                    if(key>=28.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=27.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=27.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=26.5) return vec2(58.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=26.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=24.5){\n                                    if(key>=25.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=25.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=24.5) return vec2(37.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=24.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=23.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }\n                        }else{\n                            if(key>=21.0){\n                                if(key>=22.0){\n                                    if(key>=23.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=22.5) return vec2(56.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=22.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=21.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=21.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=20.5) return vec2(36.00000000000000000000, 0.25196850393700787052);\n                                if(key>=20.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                                if(key>=19.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                if(key>=19.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }else{\n                    if(key>=9.5){\n                        if(key>=14.0){\n                            if(key>=16.5){\n                                if(key>=17.5){\n                                    if(key>=18.5) return vec2(56.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=18.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=17.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=17.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=16.5) return vec2(36.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }else{\n                                if(key>=15.0){\n                                    if(key>=16.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=15.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=15.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=14.5) return vec2(58.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=14.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }\n                        }else{\n                            if(key>=11.5){\n                                if(key>=12.5){\n                                    if(key>=13.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=13.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=12.5) return vec2(37.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=12.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=11.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }else{\n                                if(key>=11.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                if(key>=10.5) return vec2(58.00000000000000000000, 0.25196850393700787052);\n                                if(key>=10.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                                if(key>=9.5) return vec2(43.00000000000000000000, 0.25196850393700787052);\n                            }\n                        }\n                    }else{\n                        if(key>=4.5){\n                            if(key>=7.0){\n                                if(key>=8.0){\n                                    if(key>=9.0) return vec2(43.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=8.5) return vec2(37.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=8.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=7.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=7.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=5.5){\n                                    if(key>=6.5) return vec2(56.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=6.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=5.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                }else{\n                                    if(key>=5.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=4.5) return vec2(36.00000000000000000000, 0.25196850393700787052);\n                                }\n                            }\n                        }else{\n                            if(key>=2.0){\n                                if(key>=3.0){\n                                    if(key>=4.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                                    if(key>=3.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=3.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                }else{\n                                    if(key>=2.5) return vec2(56.00000000000000000000, 0.25196850393700787052);\n                                    if(key>=2.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                                }\n                            }else{\n                                if(key>=1.5) return vec2(41.00000000000000000000, 0.25196850393700787052);\n                                if(key>=1.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                                if(key>=0.5) return vec2(36.00000000000000000000, 0.25196850393700787052);\n                                if(key>=0.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return vec2(0.0);\n} //get_track_square\n\nvec2 get_track_tri(float beat) {\n    float key = beat;\n    if(key>=333.0){\n        if(key>=402.5){\n            if(key>=426.5){\n                if(key>=438.5){\n                    if(key>=444.5){\n                        if(key>=480.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                        if(key>=446.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                        if(key>=444.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=442.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                        if(key>=440.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                        if(key>=438.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                    }\n                }else{\n                    if(key>=432.5){\n                        if(key>=436.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                        if(key>=434.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                        if(key>=432.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=430.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                        if(key>=428.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                        if(key>=426.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                    }\n                }\n            }else{\n                if(key>=414.0){\n                    if(key>=420.5){\n                        if(key>=424.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                        if(key>=422.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                        if(key>=420.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=418.5) return vec2(46.00000000000000000000, 1.00000000000000000000);\n                        if(key>=416.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                        if(key>=414.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                    }\n                }else{\n                    if(key>=408.0){\n                        if(key>=412.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                        if(key>=410.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                        if(key>=408.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=404.5) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                        if(key>=402.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                    }\n                }\n            }\n        }else{\n            if(key>=377.5){\n                if(key>=392.0){\n                    if(key>=398.0){\n                        if(key>=400.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                        if(key>=399.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                        if(key>=398.0) return vec2(58.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=396.0) return vec2(56.00000000000000000000, 1.00000000000000000000);\n                        if(key>=394.0) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                        if(key>=392.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                    }\n                }else{\n                    if(key>=384.5){\n                        if(key>=388.5) return vec2(41.00000000000000000000, 1.00000000000000000000);\n                        if(key>=386.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        if(key>=384.5) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=381.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        if(key>=377.5) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                    }\n                }\n            }else{\n                if(key>=353.5){\n                    if(key>=365.5){\n                        if(key>=373.5) return vec2(29.00000000000000000000, 1.00000000000000000000);\n                        if(key>=369.5) return vec2(20.00000000000000000000, 1.00000000000000000000);\n                        if(key>=365.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=361.5) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                        if(key>=357.5) return vec2(29.00000000000000000000, 1.00000000000000000000);\n                        if(key>=353.5) return vec2(20.00000000000000000000, 1.00000000000000000000);\n                    }\n                }else{\n                    if(key>=341.0){\n                        if(key>=349.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                        if(key>=345.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                        if(key>=341.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=337.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                        if(key>=333.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                    }\n                }\n            }\n        }\n    }else{\n        if(key>=248.5){\n            if(key>=293.0){\n                if(key>=313.0){\n                    if(key>=325.0){\n                        if(key>=329.0) return vec2(67.00000000000000000000, 1.00000000000000000000);\n                        if(key>=327.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                        if(key>=325.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=321.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                        if(key>=317.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                        if(key>=313.0) return vec2(103.00000000000000000000, 1.00000000000000000000);\n                    }\n                }else{\n                    if(key>=301.0){\n                        if(key>=309.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                        if(key>=305.0) return vec2(80.00000000000000000000, 1.00000000000000000000);\n                        if(key>=301.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=297.0) return vec2(103.00000000000000000000, 1.00000000000000000000);\n                        if(key>=293.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                    }\n                }\n            }else{\n                if(key>=269.0){\n                    if(key>=281.0){\n                        if(key>=289.0) return vec2(80.00000000000000000000, 1.00000000000000000000);\n                        if(key>=285.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                        if(key>=281.0) return vec2(106.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=277.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                        if(key>=273.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                        if(key>=269.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                    }\n                }else{\n                    if(key>=257.0){\n                        if(key>=265.0) return vec2(106.00000000000000000000, 1.00000000000000000000);\n                        if(key>=261.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                        if(key>=257.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=252.5) return vec2(87.00000000000000000000, 0.50393700787401574104);\n                        if(key>=248.5) return vec2(103.00000000000000000000, 0.50393700787401574104);\n                    }\n                }\n            }\n        }else{\n            if(key>=205.0){\n                if(key>=224.5){\n                    if(key>=236.5){\n                        if(key>=244.5) return vec2(87.00000000000000000000, 0.50393700787401574104);\n                        if(key>=240.5) return vec2(84.00000000000000000000, 0.50393700787401574104);\n                        if(key>=236.5) return vec2(87.00000000000000000000, 0.50393700787401574104);\n                    }else{\n                        if(key>=232.5) return vec2(103.00000000000000000000, 0.50393700787401574104);\n                        if(key>=228.5) return vec2(87.00000000000000000000, 0.50393700787401574104);\n                        if(key>=224.5) return vec2(84.00000000000000000000, 0.50393700787401574104);\n                    }\n                }else{\n                    if(key>=213.0){\n                        if(key>=221.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                        if(key>=217.0) return vec2(103.00000000000000000000, 1.00000000000000000000);\n                        if(key>=213.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=209.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                        if(key>=205.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                    }\n                }\n            }else{\n                if(key>=181.0){\n                    if(key>=193.0){\n                        if(key>=201.0) return vec2(103.00000000000000000000, 1.00000000000000000000);\n                        if(key>=197.0) return vec2(87.00000000000000000000, 1.00000000000000000000);\n                        if(key>=193.0) return vec2(82.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=189.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                        if(key>=185.0) return vec2(106.00000000000000000000, 1.00000000000000000000);\n                        if(key>=181.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                    }\n                }else{\n                    if(key>=169.0){\n                        if(key>=177.0) return vec2(84.00000000000000000000, 1.00000000000000000000);\n                        if(key>=173.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                        if(key>=169.0) return vec2(106.00000000000000000000, 1.00000000000000000000);\n                    }else{\n                        if(key>=165.0) return vec2(91.00000000000000000000, 1.00000000000000000000);\n                        if(key>=161.0) return vec2(84.00000000000000000000, 1.00000000000000000000);\n                    }\n                }\n            }\n        }\n    }\n    return vec2(0.0);\n} //get_track_tri\n\nvec2 get_track_noise(float beat) {\n    float key = beat;\n    if(key>=263.0){\n        if(key>=312.0){\n            if(key>=350.0){\n                if(key>=397.5){\n                    if(key>=432.0){\n                        if(key>=462.0){\n                            if(key>=480.0) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                            if(key>=478.0) return vec2(32.00000000000000000000, 1.00000000000000000000);\n                            if(key>=464.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                            if(key>=462.0) return vec2(32.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=448.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                            if(key>=445.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                            if(key>=432.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=413.5){\n                            if(key>=429.0) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                            if(key>=416.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                            if(key>=413.5) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=400.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                            if(key>=397.5) return vec2(36.00000000000000000000, 1.00000000000000000000);\n                            if(key>=397.5) return vec2(0.00000000000000000000, 0.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=367.0){\n                        if(key>=379.0){\n                            if(key>=384.0) return vec2(34.00000000000000000000, 1.00000000000000000000);\n                            if(key>=383.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=382.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=379.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=375.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=371.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=367.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=359.0){\n                            if(key>=366.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=363.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=359.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=355.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=351.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=350.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }else{\n                if(key>=327.0){\n                    if(key>=336.0){\n                        if(key>=343.0){\n                            if(key>=348.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=347.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=344.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=343.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=340.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=339.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=336.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=332.0){\n                            if(key>=335.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=334.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=332.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=331.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=328.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=327.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=317.5){\n                        if(key>=320.0){\n                            if(key>=324.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=323.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=320.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=319.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=318.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=317.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=315.0){\n                            if(key>=316.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=315.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=315.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=314.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=313.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=312.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }\n        }else{\n            if(key>=291.5){\n                if(key>=301.5){\n                    if(key>=307.0){\n                        if(key>=309.5){\n                            if(key>=311.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=311.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=310.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=309.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=308.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=307.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=307.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=304.0){\n                            if(key>=306.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=305.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=304.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=303.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=302.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=301.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=296.0){\n                        if(key>=299.0){\n                            if(key>=300.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=299.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=299.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=298.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=297.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=296.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=294.5){\n                            if(key>=295.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=295.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=294.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=293.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=292.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=291.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }else{\n                if(key>=277.5){\n                    if(key>=285.5){\n                        if(key>=288.0){\n                            if(key>=291.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=290.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=289.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=288.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=287.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=286.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=285.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=281.5){\n                            if(key>=284.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=283.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=281.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=280.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=279.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=277.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=270.0){\n                        if(key>=273.5){\n                            if(key>=276.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=275.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=273.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=272.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=271.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=270.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=267.0){\n                            if(key>=269.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=268.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=267.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=265.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=264.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=263.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }\n        }\n    }else{\n        if(key>=185.5){\n            if(key>=206.0){\n                if(key>=217.5){\n                    if(key>=222.0){\n                        if(key>=257.5){\n                            if(key>=261.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=260.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=259.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=257.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=256.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=223.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=222.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=219.5){\n                            if(key>=221.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=220.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=219.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=219.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=218.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=217.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=211.5){\n                        if(key>=214.5){\n                            if(key>=216.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=215.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=215.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=214.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=213.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=212.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=211.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=209.5){\n                            if(key>=211.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=210.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=209.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=208.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=207.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=206.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }else{\n                if(key>=195.5){\n                    if(key>=200.0){\n                        if(key>=203.0){\n                            if(key>=205.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=204.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=203.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=203.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=202.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=201.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=200.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=198.5){\n                            if(key>=199.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=199.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=198.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=197.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=196.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=195.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=190.0){\n                        if(key>=193.5){\n                            if(key>=195.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=194.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=193.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=192.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=191.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=190.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=187.5){\n                            if(key>=189.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=188.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=187.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=187.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=186.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=185.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }\n        }else{\n            if(key>=164.0){\n                if(key>=174.0){\n                    if(key>=179.5){\n                        if(key>=182.5){\n                            if(key>=184.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=183.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=183.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=182.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=181.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=180.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=179.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=177.5){\n                            if(key>=179.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=178.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=177.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=176.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=175.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=174.0) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=169.5){\n                        if(key>=171.5){\n                            if(key>=173.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=172.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=171.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=171.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=170.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=169.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=167.0){\n                            if(key>=168.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=167.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=167.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=166.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=165.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=164.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }else{\n                if(key>=96.0){\n                    if(key>=144.0){\n                        if(key>=161.5){\n                            if(key>=163.5) return vec2(108.00000000000000000000, 1.00000000000000000000);\n                            if(key>=163.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=162.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=161.5) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=160.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=152.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                            if(key>=144.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=120.0){\n                            if(key>=136.0) return vec2(55.00000000000000000000, 1.00000000000000000000);\n                            if(key>=128.0) return vec2(68.00000000000000000000, 1.00000000000000000000);\n                            if(key>=120.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=112.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                            if(key>=104.0) return vec2(48.00000000000000000000, 1.00000000000000000000);\n                            if(key>=96.0) return vec2(61.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }else{\n                    if(key>=48.0){\n                        if(key>=72.0){\n                            if(key>=88.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                            if(key>=80.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                            if(key>=72.0) return vec2(51.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=64.0) return vec2(44.00000000000000000000, 1.00000000000000000000);\n                            if(key>=56.0) return vec2(31.00000000000000000000, 1.00000000000000000000);\n                            if(key>=48.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }else{\n                        if(key>=24.0){\n                            if(key>=40.0) return vec2(31.00000000000000000000, 1.00000000000000000000);\n                            if(key>=32.0) return vec2(39.00000000000000000000, 1.00000000000000000000);\n                            if(key>=24.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                        }else{\n                            if(key>=16.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                            if(key>=8.0) return vec2(37.00000000000000000000, 1.00000000000000000000);\n                            if(key>=0.0) return vec2(24.00000000000000000000, 1.00000000000000000000);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return vec2(0.0);\n} //get_track_noise\n\nvec2 get_track_MIDINOTES(float notenum) {\n    float key = notenum;\n    if(key>=64.0){\n        if(key>=96.0){\n            if(key>=112.0){\n                if(key>=120.0){\n                    if(key>=124.0){\n                        if(key>=127.0) return vec2(12543.85395141598382906523,0.00007972031593106338);\n                        if(key>=126.0) return vec2(11839.82152677230260451324,0.00008446073259962506);\n                        if(key>=125.0) return vec2(11175.30340585612066206522,0.00008948302911185181);\n                        if(key>=124.0) return vec2(10548.08182121184108837042,0.00009480396691548536);\n                    }else{\n                        if(key>=123.0) return vec2(9956.06347910658769251313,0.00010044130414581642);\n                        if(key>=122.0) return vec2(9397.27257335703870921861,0.00010641385489180981);\n                        if(key>=121.0) return vec2(8869.84419125991007604171,0.00011274155198637776);\n                        if(key>=120.0) return vec2(8372.01808961915594409220,0.00011944551353035719);\n                    }\n                }else{\n                    if(key>=116.0){\n                        if(key>=119.0) return vec2(7902.13282009798331273487,0.00012654811337220733);\n                        if(key>=118.0) return vec2(7458.62018428944247716572,0.00013407305577864956);\n                        if(key>=117.0) return vec2(7040.00000000000000000000,0.00014204545454545454);\n                        if(key>=116.0) return vec2(6644.87516127911931107519,0.00015049191681239997);\n                    }else{\n                        if(key>=115.0) return vec2(6271.92697570799191453261,0.00015944063186212675);\n                        if(key>=114.0) return vec2(5919.91076338615130225662,0.00016892146519925012);\n                        if(key>=113.0) return vec2(5587.65170292806033103261,0.00017896605822370363);\n                        if(key>=112.0) return vec2(5274.04091060592054418521,0.00018960793383097072);\n                    }\n                }\n            }else{\n                if(key>=104.0){\n                    if(key>=108.0){\n                        if(key>=111.0) return vec2(4978.03173955329384625657,0.00020088260829163285);\n                        if(key>=110.0) return vec2(4698.63628667851935460931,0.00021282770978361962);\n                        if(key>=109.0) return vec2(4434.92209562995503802085,0.00022548310397275552);\n                        if(key>=108.0) return vec2(4186.00904480957797204610,0.00023889102706071437);\n                    }else{\n                        if(key>=107.0) return vec2(3951.06641004899165636743,0.00025309622674441466);\n                        if(key>=106.0) return vec2(3729.31009214472123858286,0.00026814611155729913);\n                        if(key>=105.0) return vec2(3520.00000000000000000000,0.00028409090909090908);\n                        if(key>=104.0) return vec2(3322.43758063956147452700,0.00030098383362479978);\n                    }\n                }else{\n                    if(key>=100.0){\n                        if(key>=103.0) return vec2(3135.96348785399368352955,0.00031888126372425378);\n                        if(key>=102.0) return vec2(2959.95538169307565112831,0.00033784293039850025);\n                        if(key>=101.0) return vec2(2793.82585146403152975836,0.00035793211644740710);\n                        if(key>=100.0) return vec2(2637.02045530295890785055,0.00037921586766194166);\n                    }else{\n                        if(key>=99.0) return vec2(2489.01586977664692312828,0.00040176521658326570);\n                        if(key>=98.0) return vec2(2349.31814333926104154671,0.00042565541956723896);\n                        if(key>=97.0) return vec2(2217.46104781497660951572,0.00045096620794551125);\n                        if(key>=96.0) return vec2(2093.00452240478898602305,0.00047778205412142875);\n                    }\n                }\n            }\n        }else{\n            if(key>=80.0){\n                if(key>=88.0){\n                    if(key>=92.0){\n                        if(key>=95.0) return vec2(1975.53320502449696505209,0.00050619245348882899);\n                        if(key>=94.0) return vec2(1864.65504607235925504938,0.00053629222311459869);\n                        if(key>=93.0) return vec2(1760.00000000000000000000,0.00056818181818181815);\n                        if(key>=92.0) return vec2(1661.21879031978073726350,0.00060196766724959956);\n                    }else{\n                        if(key>=91.0) return vec2(1567.98174392699684176478,0.00063776252744850756);\n                        if(key>=90.0) return vec2(1479.97769084653782556416,0.00067568586079700050);\n                        if(key>=89.0) return vec2(1396.91292573201576487918,0.00071586423289481419);\n                        if(key>=88.0) return vec2(1318.51022765147945392528,0.00075843173532388333);\n                    }\n                }else{\n                    if(key>=84.0){\n                        if(key>=87.0) return vec2(1244.50793488832346156414,0.00080353043316653140);\n                        if(key>=86.0) return vec2(1174.65907166963052077335,0.00085131083913447792);\n                        if(key>=85.0) return vec2(1108.73052390748830475786,0.00090193241589102250);\n                        if(key>=84.0) return vec2(1046.50226120239449301152,0.00095556410824285750);\n                    }else{\n                        if(key>=83.0) return vec2(987.76660251224848252605,0.00101238490697765798);\n                        if(key>=82.0) return vec2(932.32752303617962752469,0.00107258444622919738);\n                        if(key>=81.0) return vec2(880.00000000000000000000,0.00113636363636363631);\n                        if(key>=80.0) return vec2(830.60939515989036863175,0.00120393533449919912);\n                    }\n                }\n            }else{\n                if(key>=72.0){\n                    if(key>=76.0){\n                        if(key>=79.0) return vec2(783.99087196349842088239,0.00127552505489701511);\n                        if(key>=78.0) return vec2(739.98884542326891278208,0.00135137172159400100);\n                        if(key>=77.0) return vec2(698.45646286600788243959,0.00143172846578962839);\n                        if(key>=76.0) return vec2(659.25511382573972696264,0.00151686347064776666);\n                    }else{\n                        if(key>=75.0) return vec2(622.25396744416173078207,0.00160706086633306280);\n                        if(key>=74.0) return vec2(587.32953583481526038668,0.00170262167826895584);\n                        if(key>=73.0) return vec2(554.36526195374415237893,0.00180386483178204501);\n                        if(key>=72.0) return vec2(523.25113060119724650576,0.00191112821648571499);\n                    }\n                }else{\n                    if(key>=68.0){\n                        if(key>=71.0) return vec2(493.88330125612424126302,0.00202476981395531596);\n                        if(key>=70.0) return vec2(466.16376151808981376234,0.00214516889245839476);\n                        if(key>=69.0) return vec2(440.00000000000000000000,0.00227272727272727262);\n                        if(key>=68.0) return vec2(415.30469757994518431587,0.00240787066899839823);\n                    }else{\n                        if(key>=67.0) return vec2(391.99543598174921044119,0.00255105010979403022);\n                        if(key>=66.0) return vec2(369.99442271163445639104,0.00270274344318800199);\n                        if(key>=65.0) return vec2(349.22823143300394121979,0.00286345693157925678);\n                        if(key>=64.0) return vec2(329.62755691286986348132,0.00303372694129553332);\n                    }\n                }\n            }\n        }\n    }else{\n        if(key>=32.0){\n            if(key>=48.0){\n                if(key>=56.0){\n                    if(key>=60.0){\n                        if(key>=63.0) return vec2(311.12698372208086539104,0.00321412173266612559);\n                        if(key>=62.0) return vec2(293.66476791740763019334,0.00340524335653791168);\n                        if(key>=61.0) return vec2(277.18263097687207618947,0.00360772966356409002);\n                        if(key>=60.0) return vec2(261.62556530059862325288,0.00382225643297142998);\n                    }else{\n                        if(key>=59.0) return vec2(246.94165062806212063151,0.00404953962791063191);\n                        if(key>=58.0) return vec2(233.08188075904490688117,0.00429033778491678952);\n                        if(key>=57.0) return vec2(220.00000000000000000000,0.00454545454545454523);\n                        if(key>=56.0) return vec2(207.65234878997256373623,0.00481574133799679647);\n                    }\n                }else{\n                    if(key>=52.0){\n                        if(key>=55.0) return vec2(195.99771799087466206402,0.00510210021958805871);\n                        if(key>=54.0) return vec2(184.99721135581722819552,0.00540548688637600399);\n                        if(key>=53.0) return vec2(174.61411571650194218819,0.00572691386315851442);\n                        if(key>=52.0) return vec2(164.81377845643496016237,0.00606745388259106577);\n                    }else{\n                        if(key>=51.0) return vec2(155.56349186104043269552,0.00642824346533225118);\n                        if(key>=50.0) return vec2(146.83238395870375825325,0.00681048671307582596);\n                        if(key>=49.0) return vec2(138.59131548843606651644,0.00721545932712817830);\n                        if(key>=48.0) return vec2(130.81278265029931162644,0.00764451286594285996);\n                    }\n                }\n            }else{\n                if(key>=40.0){\n                    if(key>=44.0){\n                        if(key>=47.0) return vec2(123.47082531403100347234,0.00809907925582126730);\n                        if(key>=46.0) return vec2(116.54094037952248186230,0.00858067556983357731);\n                        if(key>=45.0) return vec2(110.00000000000000000000,0.00909090909090909047);\n                        if(key>=44.0) return vec2(103.82617439498628186811,0.00963148267599359294);\n                    }else{\n                        if(key>=43.0) return vec2(97.99885899543733103201,0.01020420043917611742);\n                        if(key>=42.0) return vec2(92.49860567790861409776,0.01081097377275200798);\n                        if(key>=41.0) return vec2(87.30705785825097109409,0.01145382772631702885);\n                        if(key>=40.0) return vec2(82.40688922821748008118,0.01213490776518213153);\n                    }\n                }else{\n                    if(key>=36.0){\n                        if(key>=39.0) return vec2(77.78174593052021634776,0.01285648693066450236);\n                        if(key>=38.0) return vec2(73.41619197935187912663,0.01362097342615165192);\n                        if(key>=37.0) return vec2(69.29565774421803325822,0.01443091865425635660);\n                        if(key>=36.0) return vec2(65.40639132514965581322,0.01528902573188571992);\n                    }else{\n                        if(key>=35.0) return vec2(61.73541265701550173617,0.01619815851164253459);\n                        if(key>=34.0) return vec2(58.27047018976124093115,0.01716135113966715461);\n                        if(key>=33.0) return vec2(55.00000000000000000000,0.01818181818181818094);\n                        if(key>=32.0) return vec2(51.91308719749314093406,0.01926296535198718587);\n                    }\n                }\n            }\n        }else{\n            if(key>=16.0){\n                if(key>=24.0){\n                    if(key>=28.0){\n                        if(key>=31.0) return vec2(48.99942949771865841058,0.02040840087835223832);\n                        if(key>=30.0) return vec2(46.24930283895430704888,0.02162194754550401596);\n                        if(key>=29.0) return vec2(43.65352892912548554705,0.02290765545263405770);\n                        if(key>=28.0) return vec2(41.20344461410874004059,0.02426981553036426306);\n                    }else{\n                        if(key>=27.0) return vec2(38.89087296526010817388,0.02571297386132900473);\n                        if(key>=26.0) return vec2(36.70809598967594666874,0.02724194685230330037);\n                        if(key>=25.0) return vec2(34.64782887210900952368,0.02886183730851272014);\n                        if(key>=24.0) return vec2(32.70319566257482790661,0.03057805146377143984);\n                    }\n                }else{\n                    if(key>=20.0){\n                        if(key>=23.0) return vec2(30.86770632850775797351,0.03239631702328506224);\n                        if(key>=22.0) return vec2(29.13523509488062046557,0.03432270227933430923);\n                        if(key>=21.0) return vec2(27.50000000000000000000,0.03636363636363636187);\n                        if(key>=20.0) return vec2(25.95654359874657046703,0.03852593070397437175);\n                    }else{\n                        if(key>=19.0) return vec2(24.49971474885933275800,0.04081680175670446969);\n                        if(key>=18.0) return vec2(23.12465141947715352444,0.04324389509100803192);\n                        if(key>=17.0) return vec2(21.82676446456274277352,0.04581531090526811539);\n                        if(key>=16.0) return vec2(20.60172230705437002030,0.04853963106072852612);\n                    }\n                }\n            }else{\n                if(key>=8.0){\n                    if(key>=12.0){\n                        if(key>=15.0) return vec2(19.44543648263005763965,0.05142594772265800251);\n                        if(key>=14.0) return vec2(18.35404799483797333437,0.05448389370460660075);\n                        if(key>=13.0) return vec2(17.32391443605450476184,0.05772367461702544028);\n                        if(key>=12.0) return vec2(16.35159783128741395331,0.06115610292754287969);\n                    }else{\n                        if(key>=11.0) return vec2(15.43385316425387898676,0.06479263404657012448);\n                        if(key>=10.0) return vec2(14.56761754744031023279,0.06864540455866861846);\n                        if(key>=9.0) return vec2(13.75000000000000000000,0.07272727272727272374);\n                        if(key>=8.0) return vec2(12.97827179937328523351,0.07705186140794874350);\n                    }\n                }else{\n                    if(key>=4.0){\n                        if(key>=7.0) return vec2(12.24985737442966460264,0.08163360351340895327);\n                        if(key>=6.0) return vec2(11.56232570973857676222,0.08648779018201606383);\n                        if(key>=5.0) return vec2(10.91338223228137138676,0.09163062181053623079);\n                        if(key>=4.0) return vec2(10.30086115352718501015,0.09707926212145705225);\n                    }else{\n                        if(key>=3.0) return vec2(9.72271824131502704347,0.10285189544531601891);\n                        if(key>=2.0) return vec2(9.17702399741898666718,0.10896778740921320150);\n                        if(key>=1.0) return vec2(8.66195721802725238092,0.11544734923405088056);\n                        if(key>=0.0) return vec2(8.17579891564370697665,0.12231220585508575938);\n                    }\n                }\n            }\n        }\n    }\n    return vec2(0.0);\n} //get_track_MIDINOTES\n\n\n\n\n// Melody ///////////////////////////////////////////////////////////////\n\n#define MELODY_RAMP_TIME_SEC (0.02)\n    // Attack time\n#define MELODY_RAMPDOWN_TIME_SEC (0.05)\n    // Release time\n\n\n\n\nfloat do_voice1(in float beat_in_pattern, in float time)\n{ //time is the global time\n\n    // Get the current note (which may be a rest)\n    vec2 note = get_track_square(beat_in_pattern);\n\n    \n    // Unpack the note\n    float pitchnum = note[0];\n    float freq_hz, period_sec;\n\n    {\n        vec2 fp = get_track_MIDINOTES(pitchnum);\n        freq_hz = fp[0];\n        period_sec = fp[1];\n    }\n\n    float volume = note[1];\n\n    //float start_beat = note[2]; // should be <= beat_in_pattern\n    //float end_beat = note[3];\n    //                                // note covers [start_beat, end_beat)\n    //float time_in_note =\n    //    max(0.0, time - (start_beat * SPB));\n\n\n\n    if(freq_hz<1.0) return 0.0;     //early bail on rests\n\n    //Make the sound.\n    float wave = do_square(time, freq_hz, period_sec);\n\n//    // Envelope - smooth transition at beginning and end of note.\n//\n//    //attack\n//    float envelope = smoothstep(0.0, MELODY_RAMP_TIME_SEC, time_in_note);\n//\n//    // release\n//    float end_time = end_beat * SPB;\n//    envelope *= (1.0 - smoothstep(end_time - MELODY_RAMPDOWN_TIME_SEC,\n//                                    end_time, time_in_note));\n//\n//    return wave * envelope * dynamics;\n    return wave * volume;\n} //do_voice1\n\n// Harmony //////////////////////////////////////////////////////////////\n\n#define HARMONY_RAMP_TIME_SEC (0.02)\n    // Attack time\n#define HARMONY_RAMPDOWN_TIME_SEC (0.05)\n    // Release time\n\nfloat do_voice2(in float beat_in_pattern, in float time)\n{ //time is the global time\n\n    // Get the current note (which may be a rest)\n    vec2 note = get_track_tri(beat_in_pattern);\n\n    \n    // Unpack the note\n    float pitchnum = note[0];\n    float freq_hz, period_sec;\n\n    {\n        vec2 fp = get_track_MIDINOTES(pitchnum);\n        freq_hz = fp[0];\n        period_sec = fp[1];\n    }\n\n    float volume = note[1];\n\n    //float start_beat = note[2]; // should be <= beat_in_pattern\n    //float end_beat = note[3];\n    //                                // note covers [start_beat, end_beat)\n    //float time_in_note =\n    //    max(0.0, time - (start_beat * SPB));\n\n\n\n    if(freq_hz<1.0) return 0.0;     //early bail on rests\n\n    //Make the sound.\n    float wave = do_tri(time, freq_hz, period_sec);\n\n//    // Envelope - smooth transition at beginning and end of note.\n//\n//    //attack\n//    float envelope = smoothstep(0.0, HARMONY_RAMP_TIME_SEC, time_in_note);\n//\n//    // release\n//    float end_time = end_beat * SPB;\n//    envelope *= (1.0 - smoothstep(end_time - HARMONY_RAMPDOWN_TIME_SEC,\n//                                    end_time, time_in_note));\n//\n//    return wave * envelope * dynamics;\n    return wave * volume;\n} //do_voice2\n\nfloat do_voice3(in float beat_in_pattern, in float time)\n{ //time is the global time\n\n    // Get the current note (which may be a rest)\n    vec2 note = get_track_noise(beat_in_pattern);\n\n    \n    // Unpack the note\n    float pitchnum = note[0];\n    float freq_hz, period_sec;\n\n    {\n        vec2 fp = get_track_MIDINOTES(pitchnum);\n        freq_hz = fp[0];\n        period_sec = fp[1];\n    }\n\n    float volume = note[1];\n\n    //float start_beat = note[2]; // should be <= beat_in_pattern\n    //float end_beat = note[3];\n    //                                // note covers [start_beat, end_beat)\n    //float time_in_note =\n    //    max(0.0, time - (start_beat * SPB));\n\n\n\n    if(freq_hz<1.0) return 0.0;     //early bail on rests\n\n    //Make the sound.\n    float wave = do_noise(time, freq_hz, period_sec);\n\n    return wave * volume;\n} //do_voice3\n\n// mainSound( in int samp,) //////////////////////////////////////////////////////////\n\nvec2 mainSound( in int samp, float time )\n{\n    float t = time + START_OFS_SEC;\n\n    //time += START_CREDZ; //DEBUG\n\n    if(t < MUSIC_START_TIME) { return vec2(0.0); }\n    t -= MUSIC_START_TIME;\n        //because I had better luck not starting right at t=0.\n\n    float music_t = mod(t, PATTERN_DURATION_SEC); //within one pattern\n    float beat_in_pattern = mod(music_t*BPS, BPP);\n    float time_in_beat = mod(music_t, SPB);\n\n    float L=0.0, R=0.0, X=0.0;\n\n\n//    if(time < END_LOGOFADEOUT) {            // Jingle\n//        vec2 result = do_jingle(beat_in_pattern, music_t);\n//        L = result.x;\n//        R = result.y;\n//    } else if(time < START_CREDZ) {         // Regular music\n        L = do_voice1(beat_in_pattern, music_t);            //mono\n        R = do_voice2(beat_in_pattern, music_t);           //mono\n        X = do_voice3(beat_in_pattern, music_t);           //mono\n//    }\n\n//    return vec2(    // a bit of stereo separation\n//        mix(L, R, 0.25),\n//        mix(L, R, 0.75)\n//    );\n    float signal = (L+R+X)*0.33333333333333331483;\n    signal *= (1.0-smoothstep(95.0, 100.0, music_t));\n    return vec2(signal);\n\n\n} //mainSound\n\n// vi: set ts=4 sts=4 sw=4 et ai: //\n\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}