{
    "Shader": {
        "info": {
            "date": "1682264778",
            "description": "This shader uses the 'droste' logic from the following code by roywig.\nhttps://www.shadertoy.com/view/Ml33R7\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mtdGWn",
            "likes": 31,
            "name": "droste effect with arrows",
            "published": 3,
            "tags": [
                "graphicdesign",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2009
        },
        "renderpass": [
            {
                "code": "#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(3.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// principal value of logarithm of z\n// https://gist.github.com/ikr7/d31b0ead87c73e6378e6911e85661b93\nvec2 clog (vec2 z) {\n\treturn vec2(log(length(z)), atan(z.y, z.x));\n}\n\n// The following code will return the Droste Zoom UV.\n// by roywig https://www.shadertoy.com/view/Ml33R7\nvec2 drosteUV(vec2 p){\n    float speed = 0.5;\n    float animate = mod(iTime*speed,2.07);\n    float rate = sin(iTime*0.5);\n    p = clog(p)*mat2(1,.11,rate*0.5,1);\n    //p = clog(p);\n    p = exp(p.x-animate) * vec2( cos(p.y), sin(p.y));\n    vec2 c = abs(p);\n    vec2 duv = .5+p*exp2(ceil(-log2(max(c.y,c.x))-2.));\n    return duv;\n}\n\nfloat arrowBase(vec2 p){\n    vec2 prevP = p;\n    p.y-=0.3;\n    float d = Tri(p,vec2(0.35));\n    p = prevP;\n    p-=vec2(0.,0.1);\n    float d2 = Tri(p,vec2(0.3));\n    d = max(-d2,d);\n    p = prevP;\n    p.y+= 0.1;\n    d2 = B(p,vec2(0.07,0.2));\n    float a = radians(-45.);\n    p.x = abs(p.x);\n    p.y+=0.2;\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat arrow(vec2 p, float speed){\n    p.y-= 0.5;\n    p.y-=iTime*(0.5+(speed*0.5));\n    p.y = mod(p.y,1.)-0.5;\n    vec2 prevP = p;\n    float d = abs(arrowBase(p))-0.01;\n    \n    p.y+= 0.04;\n    float d2 = B(p,vec2(0.03,0.2));\n    float a = radians(-45.);\n    p.x = abs(p.x);\n    p.y+=0.2;\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    p = prevP;\n    a = radians(45.);\n    p.x = abs(p.x);\n    p.y-=0.1;\n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    \n    d = min(d,abs(d2)-0.01);\n    \n    p = prevP;\n    p.y-=0.21;\n    d2 = Tri(p,vec2(0.2));\n    p = prevP;\n    p-=vec2(0.,0.18);\n    \n    d2= max(-Tri(p,vec2(0.2)),d2);\n    \n    d = min(d,d2);    \n    \n    \n    return d;\n}\n\nfloat bg(vec2 p){\n    vec2 prevP = p;\n    p = mod(p,0.1)-0.05;\n    float d = length(p)-0.002;\n    \n    return d;\n}\n\nfloat otherGraphicItems(vec2 p){\n    vec2 prevP = p;\n    \n    p.x = abs(p.x);\n    p.x-=0.45;\n    float d = B(p,vec2(0.002,0.3));\n    p.x+=0.02;\n    p.y+=iTime*0.2;\n    p.y=mod(p.y,0.05)-0.025;\n    float d2 = B(p,vec2(0.02,0.002));\n    d2 = max((abs(prevP.y)-0.3),d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=0.42;\n    p.y = abs(p.y)-0.3;\n    d2 = B(p,vec2(0.03,0.003));\n    d = min(d,d2);\n    \n    p = prevP;\n    p = abs(p)-0.3;\n    p*=Rot(radians(iTime*100.-45.));\n    d2 = B(p,vec2(0.04,0.003));\n    d = min(d,d2);\n    \n    p = prevP;\n\n    p.y+=sin(-iTime)*0.25;\n    p.x = abs(p.x)-0.39;\n    d2 = B(p,vec2(0.005,0.02));\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat drawGraphics(vec2 p){\n    vec2 prevP = p;\n    p*=4.; // `4.` will be the best fit.\n    vec2 id = floor(p);\n    vec2 gr = fract(p)-0.5;\n    vec2 prevGr = gr;\n    \n    float n = random(id);\n    \n    float d = bg(gr);\n    \n    gr = prevGr;\n    if(n<0.3){\n        gr*=Rot(radians(90.));\n    } else if(n>=0.3 && n<0.6){\n        gr*=Rot(radians(180.));\n    } else if(n>=0.6 && n<0.9){\n        gr*=Rot(radians(270.));\n    }\n    \n    float d2 = otherGraphicItems(gr);\n    d = min(d,d2);\n    \n    d2 = max(B(prevGr,vec2(0.45)),arrow(gr,n));\n    d = min(d,d2);\n    \n    gr = prevGr;\n    d2 = abs(B(gr,vec2(0.45)))-0.01;\n    d2 = max(-(abs(gr.x)-0.35),d2);\n    d2 = max(-(abs(gr.y)-0.35),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 prevP = p;\n    vec2 duv = drosteUV(p);\n    \n    vec3 col = vec3(0.);\n    \n    p = duv;\n    float d =drawGraphics(p);\n    \n    col = mix(col,vec3(1.),S(d,0.));\n    p = prevP;\n    col*=length(p); // The Antialiasing of the small scale of the graphics looks not great. Added the fog effect to fade them out.\n    \n    // debug\n    //p = duv;\n    //vec2 gr = fract(p*4.)-0.5;\n    //col.rg+=gr;\n    fragColor = vec4(sqrt(col),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}