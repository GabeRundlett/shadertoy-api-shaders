{
    "Shader": {
        "info": {
            "date": "1527347461",
            "description": "My shader (with the reflection working) made at the cookie shader shodown #8 in paris https://www.facebook.com/events/595464197484976/",
            "flags": 0,
            "hasliked": 0,
            "id": "4dyBzR",
            "likes": 1,
            "name": "Drunk at cookie shader showdown ",
            "published": 3,
            "tags": [
                "shader",
                "drunk",
                "cookie",
                "showdown"
            ],
            "usePreview": 0,
            "username": "lamogui",
            "viewed": 647
        },
        "renderpass": [
            {
                "code": "float bass;\n\n/*\nfloat megabass()\n{\n  float b = 0.0;\n  for (int i = 0; i < 16; i++)\n    b = max(texelFetch(texFFTIntegrated, i, 0).x, b);\n  return b;\n}\n*/\n\n// THX Flopine and Koltes for formula !\nfloat cyl(vec3 p, float r, float h)\n{\n  return max(length(p.xz) - r, abs(p.y) - h);\n}\n\nfloat bou(vec3 p)\n{\n  float d = cyl(p, 0.5, 0.5);\n  return min(d, cyl(p - vec3(0.0, 0.8, 0.0), 0.2, 0.3));\n}\n\nmat2 rot(float a)\n{\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c, s, -s, c);\n}\n\nint prout;\n\nfloat map(vec3 p)\n{\n  vec3 per = vec3(3.0);\n  ivec3 id = ivec3(p/per);\n  vec3 q = mod(p, per) - 0.5 * per;\n  q .y += 0.5 * sin(float(p.z));\n  q.xy *= rot(float(id.x) * 0.2561 + float(id.y + id.z) + bass);\n  q.yz *= rot(float(id.x) * 0.2561 + float(id.y + id.z) + bass);\n\n  prout = id.x + id.y +id.z;\n  float d = bou(q); \n\n  return d;\n}\n\nvec3 grad(vec3 p)\n{\n  vec2 e = vec2(0.001, 0.0);\n  return normalize(vec3(map(p+e.xyy) - map(p-e.xyy), map(p+e.yxy) - map(p-e.yxy), map(p+e.yyx) - map(p-e.yyx)));\n}\n\nvec3 rm(vec3 ro, vec3 rd, out float st)\n{\n     st = 1.0;\n  vec3 p = ro;\n   for (int i = 0; i < 64; ++i)\n    {\n    float d = map(p);\n    if (abs(d) < 0.01)\n    {\n      st = float(i) / 64.0;\n      break;\n    }\n    p += rd * 0.7 * d;\n  }\n  return p;\n}\n\nvec3 shade(vec3 p,  vec3 ro, vec3 n, float st)\n{\n  return vec3(exp(-distance(ro, p) * 0.1)) * vec3(0.5 + 0.5 * cos(float(prout) + bass * 0.1), 0.5 + 0.5 * sin(float(prout) + bass * 0.1), 1.0) * (1.0 - st); //* (n * 0.5 + 0.5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  bass = iTime;//megabass();\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 finalColor = vec3(0.0);\n  for (int i = 0; i < 4; ++i)\n  {\n    uv.y += 0.01 * cos(bass);\n    \n  float st;\n  vec3 ro = vec3(0.0, 0.0, bass * 5.0);\n  vec3 rd = normalize(vec3(uv, normalize(length(uv)) - 0.7));\n\n  rd.xz *= rot(0.1 * bass);\n\n  vec3 p = rm(ro, rd, st);\n  vec3 n = grad(p);\n  vec3 color = shade(p, ro, n, st);\n\n  vec3 rd2 = reflect(rd, n);\n  vec3 ro2 = p + rd2 * 0.01;\n\n  float st2;\n  vec3 p2 = rm(ro2, rd2, st2);\n  vec3 n2 = grad(p2); \n\n  color = mix(color, shade(p2, ro, n2, st2), 0.2);\n  color = pow(color, vec3(1.0 / 2.2));\n   finalColor += color;\n  \n  }\n   fragColor = vec4(finalColor / 4.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}