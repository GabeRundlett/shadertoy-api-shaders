{
    "Shader": {
        "info": {
            "date": "1528320169",
            "description": "An experiment with the Mandlebrot set.",
            "flags": 32,
            "hasliked": 0,
            "id": "XsVfWR",
            "likes": 2,
            "name": "Modbrot",
            "published": 3,
            "tags": [
                "trippy"
            ],
            "usePreview": 0,
            "username": "psientist",
            "viewed": 484
        },
        "renderpass": [
            {
                "code": "// How deep to test mandlebrot values\n#define MAX_ITERATIONS 128\n\n// How long one period is in seconds\n#define PERIOD_LENGTH 7.0\n\n// Current time in radians, where the full circle is one period\n#define PERIOD_RADIANS (iTime / PERIOD_LENGTH * 6.2831853)\n\n// Colors\n//#define COLOR_1 vec3(0.0, 0.0, 0.0)\n#define COLOR_2 vec3(0.33333, 0.10196, 0.5451)\n#define COLOR_3 vec3(1.0, 0.84314, 0.0)\n#define COLOR_INNER vec3(0.95686, 0.64314, 0.37647)\n\nint count_mandlebrot_iterations(vec2 xy) {\n    //vec2 z = vec2(0);\n    //vec2 z = iMouse.xy / iResolution.xy / 2.0;\n    //vec2 z = vec2(1.1 * sin(PERIOD_RADIANS * 1.01), 0.3 * sin(PERIOD_RADIANS));\n    //vec2 z = vec2(2.0 * cos(PERIOD_RADIANS), 1.4 * cos(PERIOD_RADIANS));\n    vec2 z = vec2(sin(1.1 * PERIOD_RADIANS), 0.5 * sin(PERIOD_RADIANS));\n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n        z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + xy;\n        if(dot(z, z) > 4.0) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    //float zoom = 0.5;\n    //float zoom = float(texture(iChannel0, vec2(0)).x);\n    float zoom = float(texture(iChannel0, vec2(0)).x) / ( 1.5 + 0.5 * cos(PERIOD_RADIANS) );\n    \n    vec2 centre = texture(iChannel0, vec2(0)).yz;\n\n    vec2 pos = fragCoord / iResolution.xy - centre.xy;\n\n    // pan and zoom in when mouse click is down\n    //if (iMouse.z > 0.0) {\n    //    pos -= 0.5 - iMouse.xy / iResolution.xy;\n        //zoom *= 2.0;\n    //}\n\n    // zoom, swap xy, translate\n    pos = 1.0 / zoom * vec2(-pos.y + 0.25, pos.x - 0.5);\n\n    int mandlebrot_iterations = count_mandlebrot_iterations(pos);\n\n    // color the \"body\"\n    if (mandlebrot_iterations == -1) {\n        fragColor = vec4(COLOR_INNER * (0.5 * cos(PERIOD_RADIANS / 8.0) + 0.8), 1.0);\n        return;\n    }\n\n    float interpolate_outer = 0.5 * sin(PERIOD_RADIANS / 5.0011) + 0.5;\n    interpolate_outer = 1.0 / (interpolate_outer - float(mandlebrot_iterations) / float(MAX_ITERATIONS));\n\n    //float interpolate_1 = 0.5 * sin(PERIOD_RADIANS / 7.0017) + 0.5;\n    // color the background by settings RGB to values of different frequency sine waves at the current time\n    vec3 color_x = vec3(\n        0.5 * sin(PERIOD_RADIANS * 0.507) + 0.5,\n        0.5 - 0.5 * sin(PERIOD_RADIANS * 0.531),\n        0.5 * sin(PERIOD_RADIANS * 0.979) + 0.5\n    );\n    //vec3 color_1 = mix(COLOR_1, color_x, interpolate_1);\n    \n    //fragColor = vec4(color_x, 1.0); return;\n    \n    // mix color 2 at this freq\n    float interpolate_2 = 0.5 * sin(PERIOD_RADIANS / 6.0010) + 0.5;\n    vec3 color_2 = mix(color_x, COLOR_2, interpolate_2);\n\n    // mix color 3 at this freq\n    float interpolate_3 = 0.5 * cos(PERIOD_RADIANS / 3.0013) + 0.5;\n    vec3 color_3 = mix(color_x, COLOR_3, interpolate_3);\n\n    // result is the background mixed with 2 and 3, mixed with eachother\n    fragColor = vec4(mix(color_3, color_2, interpolate_outer), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Zoom limits\n#define MIN_ZOOM 0.4\n#define MAX_ZOOM 32.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Zoom is stored in x\n    float zoom = float(texture(iChannel0, vec2(0)).x);\n    \n    // Centre is stored in yz\n    vec2 centre = texture(iChannel0, vec2(0)).yz;\n    \n    // pan and zoom in when mouse click is down\n    if (iMouse.z > 0.0) {\n        zoom = mix(zoom, MAX_ZOOM, 0.001);\n        // @todo zoom to point that was originally clicked?\n        centre.xy += (0.5 - iMouse.xy / iResolution.xy) * zoom / 16.0;\n    }\n    // otherwise, return to default zoom/centre\n    else {\n        zoom = mix(zoom, MIN_ZOOM, 0.1);\n        centre.xy = mix(centre.xy, vec2(0), 0.1);\n    }\n    \n    // Init/reset zoom\n    if (zoom < MIN_ZOOM) {\n        zoom = MIN_ZOOM;\n        centre.xy = vec2(0);\n    }\n    \n    // Update texture\n    fragColor = vec4(zoom, centre.xy, 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}