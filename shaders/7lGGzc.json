{
    "Shader": {
        "info": {
            "date": "1638739283",
            "description": "yet another color mixer",
            "flags": 0,
            "hasliked": 0,
            "id": "7lGGzc",
            "likes": 7,
            "name": "chroma collapse",
            "published": 3,
            "tags": [
                "procedural"
            ],
            "usePreview": 0,
            "username": "medium_fi",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = (iTime + 50.4)/ 14.;\n    float p = 0.4;\n    float c = 0.7;\n    float radius = 0.15;\n\n    // inside out\n    vec2 xy = fragCoord/min(iResolution.xy.x, iResolution.xy.y) - 0.5;\n    xy = 1. * (xy - 0.3 * vec2(cos(t*5.), sin(t*5.)));\n    vec2 uv = vec2(sqrt(xy.x * xy.x + xy.y * xy.y), atan(xy.y, xy.x));\n    float r = uv.x;\n    float inside = float(r < radius);\n    uv.x  = (1. -inside) * (r-radius) + (inside) * (radius / r - 1.);\n    uv.y  = (1. -inside) * uv.y + (inside) * -uv.y;\n    \n    // fold it\n    for (int i=0; i < 3; i++) {\n        uv = uv + t * 5. + cos(sin(t*7.) * uv.x * uv.y);\n        uv = 3. * cos(uv) * cos(uv);\n    }\n \n    // glow it\n    uv = p * floor(c * uv) / c + (1.- p) * uv * r;\n    fragColor = vec4(0.5 * cos(uv) + 0.5, 0.5 * sin(uv.x) + 0.5, 1.0);\n\n    float b = max((1. - inside) * cos(r/1.5),  0.);\n    b = b + exp(-20. * abs(r - radius));\n    fragColor = fragColor * vec4(b, b, b, 1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}