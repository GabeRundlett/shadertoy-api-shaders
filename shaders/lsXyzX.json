{
    "Shader": {
        "info": {
            "date": "1489075055",
            "description": "Hexagonal grid line of sight",
            "flags": 0,
            "hasliked": 0,
            "id": "lsXyzX",
            "likes": 13,
            "name": "Line of Sight",
            "published": 3,
            "tags": [
                "grid",
                "hexagons",
                "lineofsight"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1202
        },
        "renderpass": [
            {
                "code": "// \"Line of Sight\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Hexagonal grid line of sight (all cells that line intersects - unlike Bresenham\n  which only shows one cell per row/column).\n\n  The hexagonal grid tutorial http://www.redblobgames.com/grids/hexagons\n  covers everything except the line-of-sight problem.\n\n  Mouse moves line end.\n*/\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (SQRT3/2.) - p.x + 0.5 * min (p.x - SQRT3 * p.y, 0.);\n}\n\nbool HexOnLine (vec2 v, vec2 b)\n{\n  vec3 w;\n  w = abs (vec3 (v.x, 0.5 * (v.x + SQRT3 * v.y), 0.5 * (v.x - SQRT3 * v.y)));\n  return (abs (b.x * v.y - b.y * v.x) < max (w.x, max (w.y, w.z)));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 col;\n  vec2 canvas, uv, va, cId, pMid, s1, s2, ds, db, r;\n  float tCur, scale, dEdge, lenLn, d, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  scale = 10.;\n  a = 0.3 * tCur;\n  va = vec2 (canvas.x / canvas.y, 1.);\n  r = vec2 (cos (a), sin (a)) * va;\n  s1 = (mPtr.z > 0.) ? 2. * mPtr.xy * va : - 0.4 * r;\n  s2 = s1 + 1.3 * r;\n  ds = s2 - s1;\n  lenLn = length (ds);\n  cId = PixToHex (scale * uv);\n  pMid = HexToPix (cId) / scale;\n  db = pMid - s1;\n  d = (lenLn > 0.) ? dot (db, ds) / lenLn : 0.;\n  dEdge = HexEdgeDist (scale * (uv - pMid));\n  if (all (equal (PixToHex (scale * s1), cId)) ||\n      all (equal (PixToHex (scale * s2), cId)) ||\n      d > 0. && d < lenLn && HexOnLine (ds, scale * db)) {\n    col = HsvToRgb (vec3 (1., 1. - 1.2 * dEdge,\n       min (1. + 0.2 * sin (50. * dEdge), 1.)));\n    col = mix (col, vec3 (0., 0., 1.), step (length (uv - pMid), 0.015));\n  } else col = vec3 (0.2);\n  col = mix (vec3 (0., 1., 0.), col, step (0.04, dEdge));\n  db = uv - s1;\n  d = (lenLn > 0.) ? dot (db, ds) / lenLn : 0.;\n  if (d > 0. && d < lenLn) col = mix (col, vec3 (1., 1., 0.),\n     (1. - smoothstep (0.003, 0.004, sqrt (max (0., dot (db, db) - d * d)))));\n  if (mPtr.z > 0. && scale * length (uv - 2. * mPtr.xy * va) < 0.15) col *= 2.;\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}