{
    "Shader": {
        "info": {
            "date": "1694207476",
            "description": "practice of a shader beginner, perfect in 320*180",
            "flags": 0,
            "hasliked": 0,
            "id": "DlSBzK",
            "likes": 3,
            "name": "celeste dream block",
            "published": 3,
            "tags": [
                "2d",
                "celeste",
                "fakeparticle"
            ],
            "usePreview": 0,
            "username": "JohnKranz",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "\n// hash function from \"Hash without sine\" by Dave_Hoskins - https://www.shadertoy.com/view/4djSRW\nfloat hash(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat blinkLevel(int size, float frameNum){\n    if(size == 1){\n        return floor(mod(frameNum, 2.));\n    }else if(size == 2){\n        float num = ceil(mod(frameNum, 4.));\n        if(num > 2.){\n            return 4. - num;\n        }else{\n            return num;\n        }\n    }else{\n        return 0.;\n    }\n}\n\nvec3 blinkColor(int id){\n    if(id == 0){\n        return vec3(.8,0.,0.);\n    }else if(id == 1){\n        return vec3(1.,.2,.8);\n    }else if(id == 2){\n        return vec3(0.,.8,0.);\n    }else if(id == 3){\n        return vec3(.4,1.,.4);\n    }else if(id == 4){\n        return vec3(0.,0.,1.);\n    }else if(id == 5){\n        return vec3(0.,.8,1.);\n    }else if(id == 6){\n        return vec3(1.,1.,0.);\n    }\n    return vec3(0.);\n}\n\n\nvec4 blink(vec2 p){\n    vec2 pixelUnit = vec2(1.) / iResolution.xy;\n    vec2 whRatio = vec2(iResolution.x / iResolution.y,1.);\n    vec4 l = vec4(0.);\n    float whAvg = (iResolution.x + iResolution.y) / iResolution.y * 90.;\n    for (float i = 0.; i < 320.; i += 1.) {\n        float z = hash(i*.1);\n        l.rgb = blinkColor(int(hash(i*.4) * 7.));\n        float offset = hash(i*.5) * 3.;\n        int size = int(3.*z*z);\n        int depth = (3 - size) * 100;\n        float level = blinkLevel(size, iTime / 0.2f + offset) + 1.;\n        float invDepth = 1./float(depth);\n        vec2 pos = fract(vec2(hash(i*.2), hash(i*.3)) + 100.*iMouse.xy/iResolution.xy*invDepth);\n        pos -= mod(pos,pixelUnit) + pixelUnit / 2.;\n        vec2 delta = (p - pos) * whRatio;\n        float range = abs(delta.x) + abs(delta.y);\n\n        float inRange = (level - 2.) / whAvg;\n        float outRange = level / whAvg;\n\n        l.a = step(inRange, range) * step(range, outRange);\n\n        if(l.a > 0.){\n            return l;\n        }\n    }\n    return vec4(0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = fragCoord/iResolution.xy;\n\n    fragColor = blink(p);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}