{
    "Shader": {
        "info": {
            "date": "1701995266",
            "description": "raymarcher example\nwith shadows, diffuse lighting, and object colouring",
            "flags": 0,
            "hasliked": 0,
            "id": "mlKfDR",
            "likes": 1,
            "name": "raymarcher example",
            "published": 3,
            "tags": [
                "raymarcher"
            ],
            "usePreview": 0,
            "username": "LuckyLMJ",
            "viewed": 34
        },
        "renderpass": [
            {
                "code": "//constants\n#define MAX_DISTANCE 100\n#define MAX_STEPS 1000\n\n#define AMBIENT 0.25\n\n//shader values\nvec3 cameraPosition = vec3(0, 0, -20);\nvec3 cameraDirection = vec3(0, 0, 0);\n\n//this is a vector of where the light is coming from. \n//this is normalized later (made into a 1-length vector)\nvec3 lightDirection = vec3(1, 1.5, 0);\n\n//rotates a point p by angles a\n//angles are in radians\nvec3 rotatePoint(vec3 p, vec3 a) {\n    a = a.yxz;\n\n    p.yz = vec2(\n        p.y*cos(a.y) + p.z*sin(a.y),\n       -p.y*sin(a.y) + p.z*cos(a.y)\n    );\n    p.xz = vec2(\n        p.x*cos(a.x) + p.z*sin(a.x),\n      -(p.x*sin(a.x) - p.z*cos(a.x))\n    );\n    p.xy = vec2(\n        p.x*cos(a.z) - p.y*sin(a.z),\n        p.x*sin(a.z) + p.y*cos(a.z)\n    );\n    \n    return p;\n}\n\n//Gets the signed distance from point p to the surface of a sphere at point sp with radius r\nfloat sphereSDF(vec3 p, vec3 sp, float r) {\n    return distance(p, sp) - r;\n}\n\n//gets the signed distance from point p to the surface of a box at sp with size b\nfloat boxSDF(vec3 p, vec3 sp, vec3 b){\n  vec3 q = abs(p-sp) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n//more SDFs can be found at https://iquilezles.org/articles/distfunctions/\n\n//gets the distance to the closest object in the scene from a point p\nfloat map(vec3 p) {\n    float dist = float(MAX_DISTANCE);\n    \n    //a ground plane\n    \n    dist = p.y + 4.0;\n    \n    //two spheres\n    //one bobs up and down\n    dist = min(dist, sphereSDF(p, vec3(0, -1, 0), 3.0));\n    dist = min(dist, sphereSDF(p, vec3(7, 3.0 + sin(iTime*3.0), 3), 2.0));\n    \n    //a cube\n    dist = min(dist, boxSDF(p, vec3(4, -3, -4), vec3(1, 1, 1)));\n    \n    //a wacky cube with a cutout sphere in it\n    dist = min(dist, max(\n        boxSDF(p, vec3(-3, 0, 5), vec3(1, 1, 1)),\n        -sphereSDF(p, vec3(-3, 0, 5), 1.3)\n    ));\n    \n    //an intersection of two spheres\n    dist = min(dist, max(\n        sphereSDF(p, vec3(3, -3, 5), 1.0),\n        sphereSDF(p, vec3(3, -2, 5), 1.0)\n    ));\n    \n    return dist;\n}\n\nvec3 getColour(vec3 p) {\n    vec3 colour = vec3(1);\n    if (p.y + 4.0 < 1e-4) {\n        //checkerboard pattern on the floor\n        vec3 fp = floor(p);\n        colour = vec3(mod(fp.x + fp.y + fp.z, 2.f)) + vec3(0.5f);\n    } else if (sphereSDF(p, vec3(0, -1, 0), 3.0) < 1e-4) {\n        colour = vec3(1, 0, 0);\n    } else if (sphereSDF(p, vec3(7, 3.0 + sin(iTime*3.0), 3), 2.0) < 1e-4) {\n        colour = vec3(1, 0, 1);\n    } else if (boxSDF(p, vec3(4, -3, -4), vec3(1, 1, 1)) < 1e-4) {\n        colour = vec3(1, 0.5, 0);\n    } else if (max(\n      boxSDF(p, vec3(-3, 0, 5), vec3(1, 1, 1)),\n      -sphereSDF(p, vec3(-3, 0, 5), 1.3)) < 1e-4) {\n        colour = vec3(0, 1, 0);\n    } else if (max(\n      sphereSDF(p, vec3(3, -3, 5), 1.0),\n      sphereSDF(p, vec3(3, -2, 5), 1.0)) < 1e-4) {\n        colour = vec3(0.5, 0.6, 1);\n    }\n    \n    return colour;\n}\n\n//gets the normal at a point\n//required for nice smooth lighting\nvec3 getNormal(vec3 p) {\n    const vec2 h = vec2(1e-5, 0);\n    float mapP = map(p);\n    return normalize(vec3(\n        map(p+h.xyy) - mapP,\n        map(p+h.yxy) - mapP,\n        map(p+h.yyx) - mapP\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //normalized screen coordinate, (-1, -1) is bottom left, (1, 1) is top right\n    vec2 screenCoordinate = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    \n    //rotate the light\n    lightDirection = rotatePoint(lightDirection, vec3(0, iTime, 0));\n    lightDirection = normalize(lightDirection); //makes the light direction a unit vector\n    \n    \n    //rotate the camera\n    cameraDirection = vec3(0, -iTime * 0.1, 0);\n    \n    //move the camera\n    cameraPosition = rotatePoint(cameraPosition, cameraDirection);\n    \n    //where the fragment's ray is facing. this is a vector direction\n    vec3 rayDirection = rotatePoint(\n        normalize(vec3(screenCoordinate, 1.5)),\n        cameraDirection\n    );\n    \n    //actual raymarching\n    float t = 0.0; //total distance traveled\n    vec3 colour = vec3(0, 0, 0);\n    \n    float light = 1.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        float dist = map(cameraPosition + t*rayDirection);\n        t += dist;\n        \n        //check if we hit an object\n        if (dist < 1e-5) {\n            //get diffuse lighting\n            vec3 normal = getNormal(cameraPosition + t*rayDirection);\n            light = max(dot(normal, lightDirection), 0.0);\n            light = (light * (1.0-AMBIENT)) + AMBIENT; //ambient lighting\n            \n            //cast shadow\n            float shadowT = 0.0;\n            vec3 shadowBaseP = (cameraPosition + (t-1e-3)*rayDirection);\n            for (int j = 0; j < MAX_STEPS; j++) {\n                float dist = map(shadowBaseP + shadowT*lightDirection);\n                shadowT += dist;\n                if (dist < 1e-5) { //in shadow \n                    light = AMBIENT;\n                    break;\n                }\n                if (shadowT > float(MAX_DISTANCE)) {\n                    break;\n                }\n            }\n            \n            light *= 1.0-(t / float(MAX_DISTANCE)); //add a depth fog effect\n            \n            //get the colour\n            colour = getColour(cameraPosition + t*rayDirection);\n            //colour = (normal + 1.0) / 2.0; //this will show the normals of the objects\n            \n            break;\n        }\n        //check if we've gone outside of the maximum distance\n        if (t > float(MAX_DISTANCE)) {\n            break;\n        }\n    }\n    \n    //Output to the screen\n    fragColor = vec4(colour, 1);\n    fragColor.rgb *= light;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}