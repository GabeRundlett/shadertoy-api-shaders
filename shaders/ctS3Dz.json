{
    "Shader": {
        "info": {
            "date": "1673102365",
            "description": "Distorting noise gets a somewhat rain-like sound :) Click to show rain matte",
            "flags": 40,
            "hasliked": 0,
            "id": "ctS3Dz",
            "likes": 13,
            "name": "Rain (Sound)",
            "published": 3,
            "tags": [
                "sound",
                "simulation",
                "glass",
                "lod",
                "rain",
                "drop",
                "lightning",
                "buffer",
                "window",
                "drops",
                "raining",
                "gpusound",
                "sfx"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Read blur amount from buffer\n    float blur = texture(iChannel1, uv).r;\n    \n    // Use LOD levels to blur texture\n    vec4 tex = textureLod(iChannel0, uv, 7.0 - blur * 6.0);\n    \n    // Add lightning\n    tex += exp(mod(iTime - 1.0, 6.0) * -5.0) * (sin(iTime * 36.0) * 0.2 + 0.2);\n    \n    // Click to show rain matte\n    fragColor = iMouse.z > 0.0 ? vec4(blur) : tex * tex;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float TAU = 6.28318530;\n\n// 1D hash, from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tp = fract(p * 0.1031);\n\tp *= p + 33.33;\n\tp *= p + p;\n\treturn fract(p);\n}\n\n// From https://www.shadertoy.com/view/tttfRj\nfloat noise(float s) {\n    int si = int(floor(s));\n    float sf = fract(s);\n    sf = smoothstep(0.0, 1.0, sf);\n    return mix(hash(float(si)), hash(float(si + 1)), sf) * 2.0 - 1.0;\n}\n\n// From https://www.shadertoy.com/view/sls3WM\nfloat coloredNoise(float time, float freq, float Q) {\n    return sin(TAU * freq * fract(time)) * noise(time * Q);\n}\n\n// Works like Waveshaper in FL Studio\nfloat distort(float x, float time) {\n    // Curved distortion, more bass\n    float a = smoothstep(0.2, 1.0, abs(x));\n    // Straight distortion, more treble\n    float b = clamp((abs(x) - 0.6) * 1.5, 0.0, 1.0);\n    // Unipolar distortion, same for positive and negative sides\n    return sign(x) * mix(a, b, cos(time * 0.5) * 0.5 + 0.5);\n}\n\nvec2 mainSound(int samp, float time) {\n\n    vec2 result = vec2(0.0);\n    \n    // Lightning\n    float amplitude = min(1.0, exp(mod(time - 1.0, 6.0) * -0.5));\n    result.x += coloredNoise(time, 20.0, 500.0) * amplitude;\n    result.y += coloredNoise(time + 1.5, 20.0, 500.0) * amplitude;\n    \n    // Low frequency rumble\n    result.x += coloredNoise(time, 100.0, 1000.0) * 0.3;\n    result.y += coloredNoise(time + 1.5, 100.0, 1000.0) * 0.3;\n    \n    // Mid frequency rumble\n    result.x += coloredNoise(time, 700.0, 2000.0) * 0.05;\n    result.y += coloredNoise(time + 1.5, 700.0, 2000.0) * 0.05;\n    \n    // Distorted noise for rain\n    result.x += distort(coloredNoise(time, 120.0, 2000.0), time) * 0.25;\n    result.y += distort(coloredNoise(time + 1.5, 120.0, 2000.0), time) * 0.25;\n    \n    return result;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// From https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n// From https://www.shadertoy.com/view/4djSRW\nvec2 hash2d(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Initialize with solid black\n    if (iFrame < 1) {\n        fragColor.r = 0.0;\n        return;\n    }\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    float maxVelocity = 2.0 / iResolution.y;\n    vec2 offset = vec2(0.0, maxVelocity - cos(iTime * 0.5) * maxVelocity);\n    \n    // Sample with offset to slide rain down screen\n    float a = texture(iChannel0, uv).r;\n    float b = texture(iChannel0, uv + offset).r;\n    fragColor.r = max(a, b);\n    \n    // Fade towards blur over time\n    fragColor.r = max(0.0, fragColor.r - 0.03);\n    \n    // Draw 16 drops on screen each frame\n    const float drops = 16.0;\n    for (float i = 0.0; i < drops; i++) {\n        float seed = (iTime + i) * 1024.0;\n        vec2 pos = hash2d(seed) * iResolution.xy;\n        float size = 4.0 + hash(seed) * 8.0;\n        fragColor.r += smoothstep(size, 0.0, distance(fragCoord, pos));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}