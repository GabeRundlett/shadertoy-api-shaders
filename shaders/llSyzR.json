{
    "Shader": {
        "info": {
            "date": "1507134519",
            "description": "inspired by a truchet shader by shau.\nframerate decreases over time.",
            "flags": 0,
            "hasliked": 0,
            "id": "llSyzR",
            "likes": 12,
            "name": "truchet traveler 3d",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "truchet"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n#define dir3(num) vec3(equal(abs(dir),vec3(num)))\n//hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define dot2(p) dot(p,p)\n\nfloat torus(vec3 p, vec2 r) {//creates 4 toruses\n    return length(vec2(abs(abs(length(p.xy)-r.x)-0.05),abs(p.z)-0.05))-r.y;\n}\n\nfloat map(vec3 p) {\n    \n    vec3 p2 = mod(p,2.0)-1.0;\n    vec3 floorpos = floor(p*0.5);\n    float len = 1e10;\n    \n    //the truchet flipping\n    vec3 flipping = floor(hash33(floorpos)+0.5)*2.0-1.0;\n    \n    //actually flipping the truchet\n    vec3 p3 = p2*flipping;\n    \n    //positions relative to truchet centers\n    mat3 truchet = mat3(\n        vec3(+p3.yz+vec2(-1.0, 1.0),p3.x),\n        vec3(+p3.zx+vec2(-1.0, 1.0),p3.y),\n        vec3(+p3.yx+vec2( 1.0,-1.0),p3.z)\n    );\n    \n    //finding distance to truchet\n    len = min(min(\n        torus(truchet[0],vec2(1.0,0.01)),\n        torus(truchet[1],vec2(1.0,0.01))),\n        torus(truchet[2],vec2(1.0,0.01)));\n    \n    return len;\n}\n\n//normal calculation\nvec3 findnormal(vec3 p, float len) {\n    const vec2 eps = vec2(0.01,0.0);\n    \n    return normalize(vec3(\n        len-map(p-eps.xyy),\n        len-map(p-eps.yxy),\n        len-map(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 floorpos = vec3(0.0,0.0,0.0);\n    vec3 pos = vec3(1.0,1.0,0.0);\n    vec3 dir = vec3(3.0,2.0,1.0);\n    int num = 2;\n    float time = iTime*0.4;\n    for (float i = 0.0; i <= floor(time); i++) {\n        \n        pos += dir*dir3(1);\n        \n    \tvec3 flipping = floor(hash33(floorpos)+0.5)*2.0-1.0; //the truchet flipping\n        \n        dir *= flipping;\n        \n        int num2 = (num-int(dot(dir,dir3(1)))+3)%3;\n        float back = dir[num2];\n        dir[num2] = dir[num];\n        dir[num] = -back;\n        num = num2;\n        \n        dir *= flipping;\n        \n        floorpos += dir*dir3(1);\n        pos += dir*dir3(1);\n    }\n\t\n    vec3 flipping = floor(hash33(floorpos)+0.5)*2.0-1.0; //the truchet flipping\n    vec3 dir2 = dir;\n    \n    dir *= flipping;\n    \n    int num2 = (num-int(dot(dir,dir3(1)))+3)%3;\n    float back = dir[num2];\n    dir[num2] = dir[num];\n    dir[num] = -back;\n    num = num2;\n    \n    dir *= flipping;\n\t\n    //animation\n    pos += dir2*vec3(equal(abs(dir2),vec3(1.0)))*(sin(fract(time)*3.14*0.5));\n    pos += dir*dir3(1)*(1.0-cos(fract(time)*3.14*0.5));\n    \n    //normal pointing towards where the camera moves, would be nice if the camera was looking in that direction\n    vec3 forward = dir2*vec3(equal(abs(dir2),vec3(1.0)))*cos(fract(time)*3.14*0.5)+dir*dir3(1)*sin(fract(time)*3.14*0.5);\n    \n    /*\n    mat3 rotation = mat3(\n        vec3(0.0),\n        vec3(0.0),\n        vec3(0.0));\n    rotation[2] = forward;\n    rotation[1] = normalize(cross(forward,vec3(1)));\n    rotation[0] = cross(rotation[1],forward);\n    */\n    \n    mat3 rotation = mat3(\n        vec3(0.0),\n        vec3(0.0),\n        vec3(0.0));\n    \n    vec2 t = vec2(cos(fract(time)*3.14*0.5),sin(fract(time)*3.14*0.5));\n\trotation[2] = normalize(dir2*vec3(equal(abs(dir2),vec3(1)))*t.x+dir*dir3(1)*t.y);\n    rotation[1] = normalize(dir2*vec3(equal(abs(dir2),vec3(2)))*t.x+dir*dir3(2)*t.y);\n    rotation[0] = normalize(dir2*vec3(equal(abs(dir2),vec3(3)))*t.x+dir*dir3(3)*t.y);\n    \n    \n    \n    vec3 ro = pos+rotation[1]*0.125;\n    vec3 rd = normalize(vec3(uv,1.0));\n    \n    rd = normalize(uv.x*rotation[0]+uv.y*rotation[1]+rotation[2]);\n    \n    bool hit = false;\n    float len;\n    float dist = 0.0;\n    for (int i = 0; i < 50; i++) {\n        len = map(ro);\n        if (len < 0.01||dist>10.0) {\n            hit = len < 0.01;\n            break;\n        }\n        ro += rd*len;\n        dist += len;\n    }\n    if (hit) {\n        \n\t\tfragColor = vec4(findnormal(ro,len)*0.5+0.5,1.0);\n        fragColor /= (dist*dist*0.05+1.0);\n        //if (all(equal(floor(ro*0.5),floorpos))) fragColor = 1.0-fragColor;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}