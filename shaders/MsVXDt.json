{
    "Shader": {
        "info": {
            "date": "1468997481",
            "description": "This shader was inspired by https://www.shadertoy.com/view/MtBSWR. I wanted to do a 3d version.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsVXDt",
            "likes": 82,
            "name": "Elemental Ring",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "otaviogood",
            "viewed": 2315
        },
        "renderpass": [
            {
                "code": "/*--------------------------------------------------------------------------------------\nLicense CC0 - http://creativecommons.org/publicdomain/zero/1.0/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n^ This means do ANYTHING YOU WANT with this code. Because we are programmers, not lawyers.\n-Otavio Good\n*/\n\n// ---------------- Config ----------------\n// This is an option that lets you render high quality frames for screenshots. It enables\n// stochastic antialiasing and motion blur automatically for any shader.\n//#define NON_REALTIME_HQ_RENDER\nconst float frameToRenderHQ = 11.0; // Time in seconds of frame to render\nconst float antialiasingSamples = 16.0; // 16x antialiasing - too much might make the shader compiler angry.\n\n//#define MANUAL_CAMERA\n\n\n// --------------------------------------------------------\n// These variables are for the non-realtime block renderer.\nfloat localTime = 0.0;\nfloat seed = 1.0;\n\n// ---- noise functions ----\nfloat v31(vec3 a)\n{\n    return a.x + a.y * 37.0 + a.z * 521.0;\n}\nfloat v21(vec2 a)\n{\n    return a.x + a.y * 37.0;\n}\nfloat Hash11(float a)\n{\n    return fract(sin(a)*10403.9);\n}\nfloat Hash21(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(sin(f)*104003.9);\n}\nvec2 Hash22(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(cos(f)*vec2(10003.579, 37049.7));\n}\nvec2 Hash12(float f)\n{\n    return fract(cos(f)*vec2(10003.579, 37049.7));\n}\nfloat Hash1d(float u)\n{\n    return fract(sin(u)*143.9);\t// scale this down to kill the jitters\n}\nfloat Hash2d(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(sin(f)*104003.9);\n}\nfloat Hash3d(vec3 uv)\n{\n    float f = uv.x + uv.y * 37.0 + uv.z * 521.0;\n    return fract(sin(f)*110003.9);\n}\n\nconst float PI=3.14159265;\n\nvec3 saturate(vec3 a) { return clamp(a, 0.0, 1.0); }\nvec2 saturate(vec2 a) { return clamp(a, 0.0, 1.0); }\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 matMin(vec2 a, vec2 b)\n{\n\tif (a.x < b.x) return a;\n\telse return b;\n}\n\n// ---- shapes defined by distance fields ----\n// See this site for a reference to more distance functions...\n// https://iquilezles.org/articles/distfunctions\n// box distance field\nfloat sdBox(vec3 p, vec3 radius)\n{\n  vec3 dist = abs(p) - radius;\n  return min(max(dist.x, max(dist.y, dist.z)), 0.0) + length(max(dist, 0.0));\n}\n\n// simple cylinder distance field\nfloat cyl(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nconst float TAU = 2.0 * PI;\n\nfloat glow = 0.0;\n// This is the function that makes the geometry.\n// The input is a position in space.\n// The output is the distance to the nearest surface and a material number\nvec2 DistanceToObject(vec3 p)\n{\n    float time = localTime*2.0;\n    float cylRadBig = 1.0;\n    float cylRadSmall = 0.05;\n    float freq = 4.0;\n    float braidRad = 0.15;\n    float angle = atan(p.z, p.x);\n    float cylDist = length(p.xz) - cylRadBig;\n    vec3 cylWarp = vec3(cylDist, p.y, angle);\n    float amp = sin(angle + time) * 0.5 + 0.5;\n\n    float theta = angle*freq;\n    vec2 wave1 = vec2(sin(theta), cos(theta)) * braidRad;\n    wave1 *= amp;\n    //float d = length(cylWarp.xy + wave1) - cylRadSmall;\n    float d = sdBox(vec3(cylWarp.xy + wave1, 0.0), vec3(cylRadSmall));\n    float final = d;\n\n    theta = angle*freq + TAU / 3.0;\n    vec2 wave2 = vec2(sin(theta), cos(theta)) * braidRad;\n    wave2 *= amp;\n    //d = length(cylWarp.xy + wave2) - cylRadSmall;\n    d = sdBox(vec3(cylWarp.xy + wave2, 0.0), vec3(cylRadSmall));\n    final = smin(final, d, 0.1);\n\n    theta = angle*freq - TAU / 3.0;\n    vec2 wave3 = vec2(sin(theta), cos(theta)) * braidRad;\n    wave3 *= amp;\n    //d = length(cylWarp.xy + wave3) - cylRadSmall;\n    d = sdBox(vec3(cylWarp.xy + wave3, 0.0), vec3(cylRadSmall));\n    final = smin(final, d, 0.1);\n\n    vec2 matd = vec2(final, fract((angle+time) / TAU+0.5));\n    float sliver = cyl(cylWarp.xy, 0.03);\n    glow += 1.0 / (sliver * sliver * sliver * sliver + 1.0);\n    //sliver = max(sliver, abs(fract(cylWarp.z*freq-2.0*localTime)-0.5)-0.3);\n    matd = matMin(matd, vec2(sliver, -1.0));\n    return matd;\n}\n\n// Input is UV coordinate of pixel to render.\n// Output is RGB color.\nvec3 RayTrace(in vec2 fragCoord )\n{\n    glow = 0.0;\n\t// -------------------------------- animate ---------------------------------------\n\tvec3 camPos, camUp, camLookat;\n\t// ------------------- Set up the camera rays for ray marching --------------------\n    // Map uv to [-1.0..1.0]\n\tvec2 uv = fragCoord.xy/iResolution.xy * 2.0 - 1.0;\n    float zoom = 2.2;\n    uv /= zoom;\n\n    // Camera up vector.\n\tcamUp=vec3(0,1,0);\n\n\t// Camera lookat.\n\tcamLookat=vec3(0);\n\n    // debugging camera\n    float mx=iMouse.x/iResolution.x*PI*2.0;\n\tfloat my=-iMouse.y/iResolution.y*10.0;\n#ifndef MANUAL_CAMERA\n    camPos = vec3(0.0);\n    camPos.y = sin(localTime*0.125)*3.0;\n    camPos.z = cos(localTime*0.125)*3.0;\n    camUp.y = camPos.z;\n    camUp.z = -camPos.y;\n    camUp = normalize(camUp);\n#else\n\tcamPos = vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*3.0;\n#endif\n\n\t// Camera setup.\n\tvec3 camVec=normalize(camLookat - camPos);\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\n\tvec3 upNorm=cross(camVec, sideNorm);\n\tvec3 worldFacing=(camPos + camVec);\n\tvec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x/iResolution.y) + uv.y * upNorm;\n\tvec3 rayVec = normalize(worldPix - camPos);\n\n\t// ----------------------------- Ray march the scene ------------------------------\n\tvec2 distMat = vec2(1.0, 0.0);\n\tfloat t = 0.0 + Hash2d(uv)*1.6;\t// random dither glow by moving march count start position\n\tconst float maxDepth = 6.0; // farthest distance rays will travel\n\tvec3 pos = vec3(0,0,0);\n    const float smallVal = 0.000625;\n    float marchCount = 0.0;\n\t// ray marching time\n    for (int i = 0; i < 80; i++)\t// This is the count of the max times the ray actually marches.\n    {\n        // Step along the ray.\n        pos = camPos + rayVec * t;\n        // This is _the_ function that defines the \"distance field\".\n        // It's really what makes the scene geometry. The idea is that the\n        // distance field returns the distance to the closest object, and then\n        // we know we are safe to \"march\" along the ray by that much distance\n        // without hitting anything. We repeat this until we get really close\n        // and then break because we have effectively hit the object.\n        distMat = DistanceToObject(pos);\n\n        // Move along the ray.\n        // Leave room for error by multiplying in case distance function isn't exact.\n        t += distMat.x * 0.8;\n        // If we are very close to the object, let's call it a hit and exit this loop.\n        if ((t > maxDepth) || (abs(distMat.x) < smallVal)) break;\n\n        // Glow if we're close to the part of the ring with the braid.\n        float cyc = (-sin(distMat.y * TAU))*0.5+0.7;\n        // This function is similar to a gaussian fall-off of glow when you're close\n        // to an object.\n        // http://thetamath.com/app/y=(1)/((x*x+1))\n        marchCount += cyc / (distMat.x * distMat.x + 1.0);\n    }\n\n\t// --------------------------------------------------------------------------------\n\t// Now that we have done our ray marching, let's put some color on this geometry.\n\n    // Save off ray-march glows so they don't get messed up when we call the distance\n    // function again to get the normal\n\tfloat glowSave = glow;\n    float marchSave = marchCount;\n    marchCount = 0.0;\n    glow = 0.0;\n\n    // default to blueish background color.\n\tvec3 finalColor = vec3(0.09, 0.15, 0.35);\n\n\t// If a ray actually hit the object, let's light it.\n    if (t <= maxDepth)\n\t{\n        // calculate the normal from the distance field. The distance field is a volume, so if you\n        // sample the current point and neighboring points, you can use the difference to get\n        // the normal.\n        vec3 smallVec = vec3(smallVal, 0, 0);\n        vec3 normalU = vec3(distMat.x - DistanceToObject(pos - smallVec.xyy).x,\n                           distMat.x - DistanceToObject(pos - smallVec.yxy).x,\n                           distMat.x - DistanceToObject(pos - smallVec.yyx).x);\n\n        vec3 texColor = vec3(0.0, 0.0, 0.1);\n        if (distMat.y < 0.0) texColor = vec3(0.6, 0.3, 0.1)*110.0;\n\n        finalColor = texColor;\n        // visualize length of gradient of distance field to check distance field correctness\n        //finalColor = vec3(0.5) * (length(normalU) / smallVec.x);\n\t}\n    // add the ray marching glows\n    finalColor += vec3(0.3, 0.5, 0.9) * glowSave*0.00625;\n    finalColor += vec3(1.0, 0.5, 0.3) * marchSave*0.05;\n\n    // vignette\n    finalColor *= vec3(1.0) * saturate(1.0 - length(uv/2.5));\n\n\t// output the final color without gamma correction - will do gamma later.\n\treturn vec3(saturate(finalColor));\n}\n\n#ifdef NON_REALTIME_HQ_RENDER\n// This function breaks the image down into blocks and scans\n// through them, rendering 1 block at a time. It's for non-\n// realtime things that take a long time to render.\n\n// This is the frame rate to render at. Too fast and you will\n// miss some blocks.\nconst float blockRate = 20.0;\nvoid BlockRender(in vec2 fragCoord)\n{\n    // blockSize is how much it will try to render in 1 frame.\n    // adjust this smaller for more complex scenes, bigger for\n    // faster render times.\n    const float blockSize = 64.0;\n    // Make the block repeatedly scan across the image based on time.\n    float frame = floor(iTime * blockRate);\n    vec2 blockRes = floor(iResolution.xy / blockSize) + vec2(1.0);\n    // ugly bug with mod.\n    //float blockX = mod(frame, blockRes.x);\n    float blockX = fract(frame / blockRes.x) * blockRes.x;\n    //float blockY = mod(floor(frame / blockRes.x), blockRes.y);\n    float blockY = fract(floor(frame / blockRes.x) / blockRes.y) * blockRes.y;\n    // Don't draw anything outside the current block.\n    if ((fragCoord.x - blockX * blockSize >= blockSize) ||\n    \t(fragCoord.x - (blockX - 1.0) * blockSize < blockSize) ||\n    \t(fragCoord.y - blockY * blockSize >= blockSize) ||\n    \t(fragCoord.y - (blockY - 1.0) * blockSize < blockSize))\n    {\n        discard;\n    }\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef NON_REALTIME_HQ_RENDER\n    // Optionally render a non-realtime scene with high quality\n    BlockRender(fragCoord);\n#endif\n\n    // Do a multi-pass render\n    vec3 finalColor = vec3(0.0);\n#ifdef NON_REALTIME_HQ_RENDER\n    for (float i = 0.0; i < antialiasingSamples; i++)\n    {\n        const float motionBlurLengthInSeconds = 1.0 / 60.0;\n        // Set this to the time in seconds of the frame to render.\n\t    localTime = frameToRenderHQ;\n        // This line will motion-blur the renders\n        localTime += Hash11(v21(fragCoord + seed)) * motionBlurLengthInSeconds;\n        // Jitter the pixel position so we get antialiasing when we do multiple passes.\n        vec2 jittered = fragCoord.xy + vec2(\n            Hash21(fragCoord + seed),\n            Hash21(fragCoord*7.234567 + seed)\n            );\n        // don't antialias if only 1 sample.\n        if (antialiasingSamples == 1.0) jittered = fragCoord;\n        // Accumulate one pass of raytracing into our pixel value\n\t    finalColor += RayTrace(jittered);\n        // Change the random seed for each pass.\n\t    seed *= 1.01234567;\n    }\n    // Average all accumulated pixel intensities\n    finalColor /= antialiasingSamples;\n#else\n    // Regular real-time rendering\n    localTime = iTime;\n    finalColor = RayTrace(fragCoord);\n#endif\n\n    fragColor = vec4(sqrt(clamp(finalColor, 0.0, 1.0)),1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}