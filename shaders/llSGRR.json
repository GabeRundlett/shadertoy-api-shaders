{
    "Shader": {
        "info": {
            "date": "1428187115",
            "description": "Minimalistic vector font. I planned to do all the letters, but shader limitations did not permit. Or I did not do my best.",
            "flags": 16,
            "hasliked": 0,
            "id": "llSGRR",
            "likes": 15,
            "name": "Minimal Bezier vector digits",
            "published": 3,
            "tags": [
                "bezier",
                "font",
                "digit"
            ],
            "usePreview": 1,
            "username": "klk",
            "viewed": 1613
        },
        "renderpass": [
            {
                "code": "#define float3 vec3\n#define float2 vec2\n#define float4 vec4\n\n//precision lowp float;\n\nfloat Draw(float2 p0, float2 p1, float2 uv)\n{\n    float2 dp=normalize(p1-p0);\n    float2 dpp=float2(dp.y, -dp.x);\n    float l=abs(dot(dpp,uv-p0));\n    if((dot(dp,uv-p0)<0.0))\n        l=length(uv-p0);\n    if((dot(-dp,uv-p1)<0.0))\n        l=length(uv-p1);\n    return l;\n}\n\nfloat l=1.0;\nfloat line;\nfloat2 CP0;\nfloat2 CP;\nfloat2 uv;\nfloat size;\n\nfloat2 Pp0=float2(-0.5,-0.25);\nfloat2 Ppx=float2(0.01,0);\nfloat2 Ppy=float2(0,0.01);\n\nfloat2 TS(float2 p)\n{\n    return Pp0+Ppx*p.x+Ppy*p.y;\n}\n    \nvoid BeginShape()\n{\n    l=1.0;\n}\n\nvoid MoveTo(float2 p)\n{\n    p=TS(p);\n    CP0=CP=p;\n}\n\nvoid LineTo(float2 p)\n{\n    p=TS(p);\n    l=min(l,Draw(CP,p,uv));\n    CP=p;\n}\n\nvoid RLineTo(float2 p)\n{\n    p=CP+TS(p)-Pp0;\n    l=min(l,Draw(CP,p,uv));\n    CP=p;\n}\n\nvoid LineToNoTS(float2 p)\n{\n    l=min(l,Draw(CP,p,uv));\n    CP=p;\n}\n/*\nvoid Bez2To(float2 p1, float2 p2)\n{\n    p1=TS(p1);\n    p2=TS(p2);\n    const int NS=3;\n    float t=1.0/float(NS);\n    float2 p0=CP;\n\tfor(int i=1;i<=NS;i++)\n    {\n        LineToNoTS(p0*(1.0-t)*(1.0-t)+2.0*p1*t*(1.0-t)+p2*t*t);\n        t+=1.0/float(NS);\n    }\n}\n*/\nvoid Bez3To(float2 p1, float2 p2, float2 p3)\n{\n    p1=TS(p1);\n    p2=TS(p2);\n    p3=TS(p3);\n    int NS=6;\n    float t=1.0/float(NS);\n    float2 p0=CP;\n\tfloat2 d1=(p1-p0)*3.0;\n\tfloat2 d2=(p1-p2)*3.0;\n\tfor(int i=0;i<=NS;i++)\n    {\n\t\tLineToNoTS((((d2-p0+p3)*t-d1-d2)*t+d1)*t+p0);\n        t+=1.0/float(NS);\n        if(t>1.0)\n            break;\n    }\n}\n\n\nvoid CloseShape()\n{\n    if(length(CP-CP0)>0.0)\n    \tLineTo(CP0);\n}\n\nvoid FinishShape()\n{\n    float l0=sqrt(l*l*size*size)*0.25;\n    line=clamp(1.0-l0,0.0,1.0);\n}\n\nvoid Digit(float d);\n\nvoid Print(float v)\n{\n    if(v<0.0)\n    {\n    \tDigit(11.5);\n\t    Pp0+=Ppx*2.3;\n        v=-v;\n    }\n    Digit((fract(v/10.0)*10.0));\n    Pp0+=Ppx*2.3;\n    Digit(10.5);\n    float d=1.0;\n    for(int i=0;i<10;i+=1)\n    {\n        Pp0+=Ppx*2.3;\n\t    Digit((fract(v*d)*10.0));\n    \td*=10.0;\n        if(d>100.0)\n            break;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    size=min(iResolution.x, iResolution.y);\n    float2 mp=iMouse.xy/iResolution.xy-0.5;\n    mp.x=mp.x*iResolution.x/iResolution.y;\n\n    Ppx.x=0.06;\n    Ppy.y=0.09;\n    Ppy.x=0.01;\n    \n    float t=iTime*0.25;\n\tuv = fragCoord.xy/iResolution.xy-0.5;\n    uv.x=uv.x*iResolution.x/iResolution.y;\n    \n    BeginShape();\n    if(iMouse.xy==float2(0.0))\n        Print(fract(t*0.01)*10.0-5.0);\n    else\n        Print(mp.x);\n    FinishShape();\n\n    float3 col2=float3(0);\n\n    fragColor=float4(0.9,0.8,0.6,1.0);\n   \tfragColor.rgb=mix(fragColor.rgb,col2,line);\n}\n\nvoid glyph_0();\nvoid glyph_1();\nvoid glyph_2();\nvoid glyph_3();\nvoid glyph_4();\nvoid glyph_5();\nvoid glyph_6();\nvoid glyph_7();\nvoid glyph_8();\nvoid glyph_9();\nvoid glyph_Dot();\nvoid glyph_Minus();\n\nvoid Digit(float d)\n{\n    /* */if(d< 1.0)glyph_0();\n    else if(d< 2.0)glyph_1();\n    else if(d< 3.0)glyph_2();\n    else if(d< 4.0)glyph_3();\n    else if(d< 5.0)glyph_4();\n    else if(d< 6.0)glyph_5();\n    else if(d< 7.0)glyph_6();\n    else if(d< 8.0)glyph_7();\n    else if(d< 9.0)glyph_8();\n    else if(d<10.0)glyph_9();\n    else if(d<11.0)glyph_Dot();\n    else if(d<12.0)glyph_Minus();\n}\n\nfloat2 x=float2(1.0,0.0);\nfloat2 y=float2(0.0,1.0);\n\nvoid glyph_0()\n{\n  MoveTo(x);\n  Bez3To(-0.2*x,2.0*y-x*0.2,float2(1.0,2.0));\n  Bez3To(2.0*y+x*2.2,2.2*x,x);\n  MoveTo(x*0.85+y*0.7);\n  LineTo(x*1.15+y*1.3);\n}\nvoid glyph_1()\n{\n  MoveTo(0.5*x+1.7*y);\n  LineTo(x+2.0*y);\n  LineTo(x);\n  MoveTo(0.5*x);\n  LineTo(1.5*x);\n}\nvoid glyph_2()\n{\n  MoveTo(1.8*x+y*0.2);\n  LineTo(1.8*x);\n  LineTo(0.2*x);    \n  Bez3To(float2(0.9,0.625),x*1.8+y*1.1,x*1.8+y*1.5);\n  Bez3To(x*1.8+y*2.2,x*0.2+y*2.2,x*0.2+y*1.5);\n}\nvoid glyph_3()\n{\n  MoveTo(x*0.2+y*1.7);\n  Bez3To(x*0.4+y*2.15,x*1.7+y*2.15,x*1.7+y*1.55);\n  Bez3To(x*1.7+y*1.3,x*1.4+y*1.1,x*0.8+y*1.1);\n  Bez3To(x*1.4+y*1.1,x*1.8+y*0.9,x*1.8+y*0.55);\n  Bez3To(x*1.8-y*0.2,x*0.4-y*0.2,x*0.2+y*0.3);\n}\nvoid glyph_4()\n{\n  MoveTo(0.1*x+0.6*y);    \n  LineTo(x*1.6+2.0*y);\n  RLineTo(-y*2.0);\n  RLineTo(-0.3*x);\n  RLineTo(0.6*x);\n  MoveTo(0.1*x+0.6*y);    \n  RLineTo(1.8*x);\n}\nvoid glyph_5()\n{\n  MoveTo(x*0.2+y*1.1);\n  Bez3To(x*0.7+y*1.5,x*1.8+y*1.4,x*1.8+y*0.65);\n  Bez3To(x*1.8-y*0.2,x*0.4-y*0.2,x*0.1+y*0.3);\n  MoveTo(x*0.2+y*1.1);\n  RLineTo(y*0.9);\n  RLineTo(x*1.5);\n}\nvoid glyph_6()\n{\n  MoveTo(x*0.2+y*0.6);\n  Bez3To(x*0.2-0.2*y,1.8*x-y*0.2,float2(1.8,0.6));\n  Bez3To(1.8*x+y*1.4,x*0.2+1.4*y,x*0.2+y*0.6);\n  Bez3To(x*0.0+1.6*y,0.7*x+y*2.3,float2(1.6,1.9));\n}\nvoid glyph_7()\n{\n  MoveTo(x*0.1+y*1.8);\n  RLineTo(y*0.2);\n  RLineTo(x*1.8);\n  Bez3To(x+y*1.3,x+y*0.5,x);\n}\nvoid glyph_8()\n{\n  MoveTo(x+y*1.1);\n  Bez3To(y*1.1-x*0.2,-x*0.2-y*0.05,x-y*0.05);\n  Bez3To(2.2*x-y*0.05,y*1.1+2.2*x,x+y*1.1);\n  Bez3To(y*1.1,y*2.05,x+y*2.05);\n  Bez3To(y*2.05+2.0*x,2.0*x+y*1.1,x+y*1.1);\n}\nvoid glyph_9()\n{\n  MoveTo(float2(1.8,1.4));\n  Bez3To(1.8*x+y*0.6,x*0.2+0.6*y,x*0.2+y*1.4);\n  Bez3To(x*0.2+2.2*y,1.8*x+y*2.2,float2(1.8,1.4));\n  Bez3To(float2(1.9,0.0),float2(1.0,-0.2),float2(0.4,0.2));\n}\nvoid glyph_Dot()\n{\n  MoveTo(x);\n  Bez3To(x*1.2,x*1.2+y*0.2,x+y*0.2);\n  Bez3To(x*0.8+y*0.2,x*0.8,x);\n}\nvoid glyph_Minus()\n{\n  MoveTo(x*0.5+y);\n  RLineTo(x);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}