{
    "Shader": {
        "info": {
            "date": "1582828033",
            "description": ">>> Focus on preview and press W to start! <<<",
            "flags": 48,
            "hasliked": 0,
            "id": "WtGSWW",
            "likes": 16,
            "name": "Snake game prototype",
            "published": 3,
            "tags": [
                "game",
                "snake"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 620
        },
        "renderpass": [
            {
                "code": "#define BLACK vec3(32, 43, 51) / 255.0\n#define DARK_GRAY vec3(57, 75, 89) / 255.0\n#define GRAY vec3(138, 155, 168) / 255.0\n#define WHITE vec3(225, 232, 237) / 255.0\n#define RED vec3(255, 115, 115) / 255.0\n\n// Smooth factor\n#define SF 1./min(iResolution.x, iResolution.y)\n#define SS(l, s, sf) smoothstep(sf, -sf, l - s)\n// Clamp value [0 - 1]\n#define C(v) clamp(v, 0., 1.)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 gData = texelFetch(iChannel0, ivec2(2, 0), 0);\n    float lastEatTime = gData.y;\n    float ltDiff = C((iTime - lastEatTime)*2.);\n    float ltDiffS = sqrt(ltDiff);\n    float ltDiffHS = C(sqrt(ltDiff*2.0));\n    float ltDiffJump = (1. - cos(ltDiffHS*PI2))*.015;\n    float ltDiffJump2x = (1. - cos(ltDiffHS*PI2*2.))*.015;\n    \n    vec2 ruv = fragCoord / iResolution.xy;\n    vec2 ouv = (fragCoord - iResolution.xy * .5) / iResolution.y * (1. - ltDiffJump);\n    float rFactor = hash11(gData.z);\n    ouv *= rot(ltDiffJump2x * (rFactor > .5 ? 1. : -1.));\n    \n    float fSize = SIZE + 2.;\n    vec2 id = floor(ouv * fSize);\n    vec2 buv = ouv * fSize;\n    vec2 uv = fract(buv);                  \n    \n    // Final color\n    vec3 col;\n    \n    // Grid\n    float sf = SF * fSize*.5 * (1. - ltDiffJump);    \n    float g = C(step(abs(uv.x - sf), sf) + step(abs(uv.y - sf), sf));        \n    col = mix(BLACK, GRAY, g);\n    \n    // Snake           \n    for(int i=(int(gData.z)+1); i>=0; i-=1){\n        vec2 mPos = texelFetch(iChannel0, ivec2(i, 1), 0).xy;    \n        vec3 pCol = WHITE * (1. - (float(i) / (gData.z+1.))*.5);\n    \tcol = mix(col, pCol, B2F(mPos.x == id.x && mPos.y == id.y));   \n    }\n    \n    // Outer space\n    float outx = step(buv.x, SIZE*.5+sf*2.) * step(-SIZE*.5, buv.x);\n    float outy = step(buv.y, SIZE*.5+sf*2.) * step(-SIZE*.5, buv.y);       \n    float str = 2. - ltDiffHS;\n    float l = length(ouv);\n    vec3 backCol = mix(BLACK, DARK_GRAY, smoothstep(str, 0., l)*.5);\n    col = mix(backCol, col, outx * outy);\n    \n    // Fruit\n    vec2 fPos = texelFetch(iChannel0, ivec2(1, 0), 0).xy;        \n    float fill = B2F(fPos.x == id.x && fPos.y == id.y)\n        * step(abs(uv.x - .5), ltDiffS)\n        * step(abs(uv.y - .5), ltDiffS);\n    col = mix(col, RED, fill);      \n    \n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fetch data\n#define FD(x,y) texelFetch(iChannel1, ivec2(x, y), 0)\n// Read key toggle\n#define RKT(v) texelFetch(iChannel0, ivec2(v, 1), 0).x == 1.\n// Read key press\n#define RKP(v) texelFetch(iChannel0, ivec2(v, 1), 1).x == 1.\n// Read key click\n#define RKC(v) texelFetch(iChannel0, ivec2(v, 1), 2).x == 1.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    \n    if(y>2){\n    \tdiscard;\n\t}\n    \n    bool isUp = (RKT(87) || RKT(38));\n\tbool isRight = (RKT(68) || RKT(39));\n\tbool isDown = (RKT(83) || RKT(40));\n\tbool isLeft = (RKT(65) || RKT(37));    \n\n    // --------------\n    // Read data\n    // --------------\n\n    // Move data\n    vec4 mData = FD(0, 0);\n\n    vec2 mPos = mData.xy;\n    float mDir = mData.z;\n    if(iFrame == 1){\n        mDir = -1.;\n    }\n    float lastGameTick = mData.w;\n    \n    // Neighbor data\n    vec2 nPointPos = FD(1, 1).xy;\n\n    // Fruit data\n    vec4 fData = FD(1, 0);\n\n    float fFactor = fData.z;\n    float fX = floor((hash11(fFactor)-.5)*SIZE);\n    float fY = floor((hash11(fFactor + 100.)-.5)*SIZE);\n    vec2 fPos = vec2(fX, fY);\n\n    // Game data\n    vec4 gData = FD(2, 0);\n\n    float speed = gData.x;\n    if(iFrame == 1){\n        speed = 10.;\n    }\n    float lastEatTime = gData.y;\n    if(iFrame == 1){\n        lastEatTime = -100.;\n    }\n    float score = gData.z;\n\n    // --------------\n    // Process game logic\n    // --------------\n\n    float gameTick = floor(iTime*speed);\n\n    // Move position\n    bool shouldMove = lastGameTick != gameTick;\n    if(shouldMove){\n        if(mDir == 0.){\n            mPos.y += 1.;\n        }\n        if(mDir == 1.){\n            mPos.x += 1.;\n        }\n        if(mDir == 2.){\n            mPos.y -= 1.;\n        }\n        if(mDir == 3.){\n            mPos.x -= 1.;\n        }\n        lastGameTick = gameTick;\n    }\n\n\n    // Set direction\n    if(isUp){    \t\n        if(mPos + vec2(0., 1.) != nPointPos){\n        \tmDir = 0.;\n        }\n    }\n    if(isRight){\n        if(mPos + vec2(1., 0.) != nPointPos){\n            mDir = 1.;\n        }\n    \t\n    }\n    if(isDown){\n        if(mPos + vec2(0., -1.) != nPointPos){\n            mDir = 2.;\n        }    \t\n    }\n    if(isLeft){\n        if(mPos + vec2(-1., 0.) != nPointPos){\n            mDir = 3.;\n        }\n    \t\n    }\n\n    // Normalize position\n    if(mPos.x >= SIZE*.5){\n        mPos.x = -SIZE*.5;\n    }\n    if(mPos.x < -SIZE*.5){\n        mPos.x = SIZE*.5 - 1.;\n    }\n    if(mPos.y >= SIZE*.5){\n        mPos.y = -SIZE*.5;\n    }\n    if(mPos.y < -SIZE*.5){\n        mPos.y = SIZE*.5 - 1.;\n    }\n\n    bool fruitEaten = mPos == fPos;\n    if(fruitEaten){\n    \tfFactor += .1;\n        lastEatTime = iTime;\n        score+=1.;\n    }\n\n    // Write data\n    if(x == 0 && y == 0){\n    \tfragColor = vec4(mPos, mDir, lastGameTick);\n    }\n    if(x == 1 && y == 0){\n    \tfragColor = vec4(fPos, fFactor, 0);\n    }\n    if(x == 2 && y == 0){\n    \tfragColor = vec4(speed, lastEatTime, score, 0);\n    }\n\n    // iPoints\n    if(y == 1){\n        if(x == 0){\n            fragColor = vec4(mPos, 0, 0);\n        } else {\n            if(shouldMove){\n                for(int i=int(score+1.); i>=1; i-=1){\n                    if(x == i){\n                        // Neighbor point to exist\n                        vec2 nPointPos = FD(i-1, 1).xy;\n                        fragColor = vec4(nPointPos, 0, 0);\n                    }\n                }\n            } else {\n            \tfor(int i=1; i<=int(score+1.); i+=1){\n                    if(x == i){\n                        // Same point to exist\n                        vec2 iPointPos = FD(i, 1).xy;\n                        fragColor = vec4(iPointPos, 0, 0);\n                    }\n                }\n\n            }\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SIZE 16.\n\n#define PI2 6.2831852\n#define PI 3.1415926\n#define PI_2 1.5707963\n#define PI_4 0.78539815\n\n#define B2F(v) (v ? 1.: 0.)\n\nfloat hash11(float p)\n{\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nmat2 rot (float a){\n\tfloat ca = cos(a);\n    float sa = sin(a);\n    return mat2(ca,-sa,sa,ca);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}