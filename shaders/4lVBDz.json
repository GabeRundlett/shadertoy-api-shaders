{
    "Shader": {
        "info": {
            "date": "1546547309",
            "description": "an experiment with scale, position, and color variation on a grid using (approximately) the cividis color scheme",
            "flags": 0,
            "hasliked": 0,
            "id": "4lVBDz",
            "likes": 12,
            "name": "Grid Wave",
            "published": 3,
            "tags": [
                "ripples",
                "grid",
                "wave",
                "stationary",
                "standing"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2019\n\n\n/*\ndraw antialiased point with minimum pixel size \n*/\nvec3 draw(vec3 buffer, float d, float r, vec3 color) {\n    float up = min(iResolution.x, iResolution.y);\n    d = up * d;\n    r = r * up / 360.0;\n  \tfloat aa = fwidth(d);\n   \treturn mix(buffer, color, 1.0 - smoothstep(r - aa, r + aa, d));\n}\n\n\n/*\ndistance function from Inigo Quilez\nhttps://iquilezles.org/articles/distfunctions2d\n*/\nfloat sdBox(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, vec2(0.0))) + min(max(d.x, d.y), 0.0);\n}\n\n\nvoid mainImage(out vec4 o, vec2 i) {\n    vec2 R = iResolution.xy;\n    i = (i - R / 2.) / min(R.x, R.y);\n    \n    // time\n    float time = 2. * iTime;\n    \n    // repeat and ripple\n    const float radius = 1. / 16.;\n    float offset = 6. * radius * (cos(time / 2.) * cos(floor(i.x / radius) / 2.) + cos(floor(i.y / radius) / 2.));\n    float phaseTime = time + offset;\n    vec2 translation = vec2(cos(phaseTime), sin(2. * phaseTime)) * radius / 4.;\n    vec2 q = i - translation;\n    const vec2 c = vec2(radius);\n    q = mod(q, c) - .5 * c;\n    \n    // scale\n    float s = .5001 + 32. * translation.y;\n    \n    // distance\n    float d = sdBox(q / s, vec2(radius / 8.)) * s;\n    \n    // color and antialias\n    const vec3 yellow = vec3(1.0, 233.8095 / 255.0, 69.6405 / 255.0);\n    const vec3 blue = vec3(0.0, 32.181 / 255.0, 76.8825 / 255.0);\n    vec3 col = mix(blue, yellow, .5 + 32. * translation.y);\n    col = draw(vec3(0.), d, 1.5, col);\n    \n    o = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}