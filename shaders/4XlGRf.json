{
    "Shader": {
        "info": {
            "date": "1707768979",
            "description": "raymarching for dummies",
            "flags": 0,
            "hasliked": 0,
            "id": "4XlGRf",
            "likes": 1,
            "name": "raymarching-dummy",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "liubi",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "# define MAX_DIST 100.\n# define MAX_STEPS 100\n# define MIN_DIST .01\n# define SURF_DIST 0.4\n\nfloat getDist(vec3 p) {\n    vec4 sphere = vec4(.0, 1., 6., 1.);\n    float dis = length(p - sphere.xyz) - sphere.w;\n    return min(p.y, dis);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float ds = 0.;\n    vec3 p;\n    for (int i = 0; i < MAX_STEPS; i ++) {\n        p = ro + rd * ds;\n        float d0 = getDist(p);\n        ds += d0;\n        if (ds > MAX_DIST || d0 < MIN_DIST) break;\n        \n    }\n    return ds;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(.01, 0);\n    vec3 n = d - vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx)\n    );\n    return normalize(n);\n}\n\nfloat getLight(vec3 p) {\n    vec3 light = vec3(0, 5, 6);\n    light.xz += vec2(sin(iTime), cos(iTime)) * 5.; \n    vec3 l = normalize(light-p);\n    vec3 normal = getNormal(p);\n    float diff = clamp(dot(normal, l), .0, 1.0);\n    \n    float d = RayMarch(p+normal*SURF_DIST, light);\n    if (d < length(light - p)) diff *= 0.1;\n    \n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    vec3 ro = vec3(.0, 1., .0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    \n    float distance = RayMarch(ro, rd);\n    //distance /= 6.0;\n    //col = vec3(distance);\n\n    vec3 p = ro + rd * distance;\n    \n    float light = getLight(p);\n    col = vec3(light);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}