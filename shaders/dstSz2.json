{
    "Shader": {
        "info": {
            "date": "1680128980",
            "description": "Line pinch effect, with the nice property that lines have constant width independent of distortion of the uv field. ",
            "flags": 0,
            "hasliked": 0,
            "id": "dstSz2",
            "likes": 5,
            "name": "Hamster Grid",
            "published": 3,
            "tags": [
                "lines",
                "pinch",
                "width"
            ],
            "usePreview": 0,
            "username": "starmole2",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "\nfloat sawtooth(float t, float width) {\n    // sawtooth wave, [0..1], pulse of width\n    // 1| / / /\n    //  |/ / /\n    //  0--w--->\n    return fract(t / width);\n}\n\nfloat triangle(float t, float width) {\n    // triangle wave, [0..1], pulse of width\n    // 1| /\\  /\\\n    //  |/  \\/  \\\n    //  0----w---->\n    float s = sawtooth(t, width) * 2.0;\n    return (s>1.0)?2.0-s:s; \n}\n\nfloat square(float t, float width) {\n    // square wave, [0..1], pulse of width\n    // 1|--  --\n    //  |  __  __\n    //  0----w---->\n    float s = sawtooth(t, width);\n    return (s>.5)?1.0:0.0;\n}\n\nfloat rectangle(float t, float width, float highwidthrel) {\n    // square wave, [0..1], pulse of width\n    // 1|--  --\n    //  |  __  __\n    //  0--h-w---->\n    float s = sawtooth(t, width);\n    return (s>1.0-highwidthrel)?1.0:0.0;\n}\n\nfloat smoothsquare(float t, float width, float edgewidthrel ) {\n    // smoothed square wave, [0..1], pulse of width\n    // smooth edge width edgewidth [0..width]. \n    // 1|--    --\n    //  |  \\__/  \\__\n    //  0--e--w------->\n    // if edgewidth = 0, same as a square wave\n    // if edgewidth = width, same as triangle wave \n    edgewidthrel *= .5;\n    return smoothstep(.5-edgewidthrel,.5+edgewidthrel,triangle(t,width));\n}\n\nfloat smoothrectangle(float t, float width, float highwidthrel, float edgewidthrel ) {\n    // mix of rectangle and smoothsquare \n    edgewidthrel *= .5;\n    float em = 1.0 - highwidthrel;\n    return smoothstep(em-edgewidthrel,em+edgewidthrel,triangle(t,width));\n}\n\nfloat cosine(float t, float width) {\n     // cosine wave, [0..1], pulse of width\n    // 1|-   -   -\n    //  | \\_/ \\_/\n    //  0----w----->\n    return cos((t/width)*6.28318530)*.5+.5;\n}\n\nvec2 pinch(vec2 uv, vec2 center, float outerr, float innerr, float amount) {\n    vec2 uv2 = uv - center;\n    float d = length(uv2);\n    float s = (d-innerr) / (outerr-innerr);\n    s =  clamp(s, 0.0, 1.0);\n    s = 1.0 - cosine(s, 1.0);\n    uv2 += (uv2/d)*s*amount; \n    return uv2 + center;\n}\n\nfloat softxor(float a , float b) {\n    float xa = a * (1.0-b); // only 1 if a==1 && b==0\n    float xb = b * (1.0-a); // only 1 if a==0 && b==1\n    return max(xa,xb);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv0 = fragCoord/iResolution.xy * 2.0 - 1.0;\n    vec2 uv = uv0;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;   \n    \n    vec2 m = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n    m = clamp(m, vec2(-1.0), vec2(1.0));\n    m.x *= aspect;\n    \n    vec2 mr = vec2(m.y,-m.x);\n    \n    m.x += sin(iTime*.5);\n    m.y += cos(iTime*.33);\n    mr.x += sin(iTime*-.1);\n    mr.y += cos(iTime*.27);\n    \n#if 1\n    // nice shapes\n    vec2 uv2 = pinch(uv, m, 4.0, .012, 1.95);\n    uv2 = pinch(uv2, mr, 5.0, .22, -1.85);\n    uv2 *= 8.0;\n#else\n    // perspective test\n    vec2 uv2 = uv - m;\n    uv2 *= 10.0;\n    uv2.x /= uv2.y;\n#endif\n\n    vec2 duvx = abs(dFdx(uv2));\n    vec2 duvy = abs(dFdy(uv2));\n    \n    float maxdu = max(duvx.x, duvy.x);\n    float maxdv = max(duvx.y, duvy.y);\n\n    float linew = 3.0;\n    float smoothw = 4.0;\n\n#if 1\n    // lines\n    float c = smoothrectangle(uv2.x, 1.0, maxdu*linew, maxdu*smoothw);\n    float c2 = smoothrectangle(uv2.y, 1.0, maxdv*linew, maxdv*smoothw);\n    c = max(c,c2);\n#else\n    // checkerboard\n    float c = smoothrectangle(uv2.x, 1.0, .5, maxdu*smoothw);\n    float c2 = smoothrectangle(uv2.y, 1.0, .5, maxdv*smoothw);\n    c = softxor(c,c2);\n#endif    \n    c = clamp(c, 0.0, 1.0);\n    vec3 col = vec3(1.0-c);\n   \n \n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1.0/2.2)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}