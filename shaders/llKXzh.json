{
    "Shader": {
        "info": {
            "date": "1483012278",
            "description": "A mini fork of [url]https://www.shadertoy.com/view/4ds3zn[/url].",
            "flags": 1,
            "hasliked": 0,
            "id": "llKXzh",
            "likes": 76,
            "name": "Apollonian II",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "distancefield",
                "kleinian",
                "apollonian",
                "vr"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 6714
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2015 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// Antialiasing level. Make it 1 if you have a slow machine\n#define AA 1\n\n\nvec3 map( vec3 p )\n{\n\tfloat scale = 1.0;\n    \n    float orb = 10000.0;\n\n    for( int i=0; i<6; i++ )\n\t{\n\t\tp = -1.0 + 2.0*fract(0.5*p+0.5);\n\n        p -= sign(p)*0.04; // trick\n        \n        float r2 = dot(p,p);\n\t\tfloat k = 0.95/r2;\n\t\tp     *= k;\n\t\tscale *= k;\n\n        orb = min( orb, r2);\n\t}\n\n    float d1 = sqrt( min( min( dot(p.xy,p.xy), dot(p.yz,p.yz) ), dot(p.zx,p.zx) ) ) - 0.02;\n    float d2 = abs(p.y);\n    float dmi = d2;\n    float adr = 0.7*floor((0.5*p.y+0.5)*8.0);\n    if( d1<d2 )\n    {\n        dmi = d1;\n        adr = 0.0;\n    }\n    return vec3( 0.5*dmi/scale, adr, orb );\n}\n\nvec3 trace( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 20.0;\n    float t = 0.01;\n    vec2  info = vec2(0.0);\n    for( int i=0; i<256; i++ )\n    {\n\t    float precis = 0.001*t;\n        \n        vec3  r = map( ro+rd*t );\n\t    float h = r.x;\n        info = r.yz;\n        if( h<precis||t>maxd ) break;\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n    return vec3( t, info );\n}\n\nvec3 calcNormal( in vec3 pos, in float t )\n{\n    float precis = 0.0001 * t * 0.57;\n\n    vec2 e = vec2(1.0,-1.0)*precis;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n                      e.xxx*map( pos + e.xxx ).x );\n}\n\nvec3 forwardSF( float i, float n) \n{\n    const float PI  = 3.141592653589793238;\n    const float PHI = 1.618033988749894848;\n    float phi = 2.0*PI*fract(i/PHI);\n    float zi = 1.0 - (2.0*i+1.0)/n;\n    float sinTheta = sqrt( 1.0 - zi*zi);\n    return vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, zi);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<16; i++ )\n    {\n        vec3 w = forwardSF( float(i), 16.0 );\n\t\tw *= sign( dot(w,nor) );\n        float h = float(i)/15.0;\n        ao += clamp( map( pos + nor*0.01 + w*h*0.15 ).x*2.0, 0.0, 1.0 );\n    }\n\tao /= 16.0;\n\t\n    return clamp( ao*16.0, 0.0, 1.0 );\n}\n\n\nvec3 textureBox( sampler2D sam, in vec3 pos, in vec3 nor )\n{\n    vec3 w = nor*nor;\n    return (w.x*texture( sam, pos.yz ).xyz + \n            w.y*texture( sam, pos.zx ).xyz + \n            w.z*texture( sam, pos.xy ).xyz ) / (w.x+w.y+w.z);\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.0);\n    vec3 res = trace( ro, rd );;\n    float t = res.x;\n    if( t>0.0 )\n    {\n        vec3  pos = ro + t*rd;\n        vec3  nor = calcNormal( pos, t );\n        float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n        float occ = pow( clamp(res.z*2.0,0.0,1.0), 1.2 );\n              occ = 1.5*(0.1+0.9*occ)*calcAO(pos,nor);        \n        vec3  lin = vec3(1.0,1.0,1.5)*(2.0+fre*fre*vec3(1.8,1.0,1.0))*occ*(1.0-0.5*abs(nor.y));\n        \n      \tcol = 0.5 + 0.5*cos( 6.2831*res.y + vec3(0.0,1.0,2.0) );  \n        col *= textureBox( iChannel0, pos, nor ).xyz;\n        col = col*lin;\n        col += 0.6*pow(1.0-fre,32.0)*occ*vec3(0.5,1.0,1.5);        \n        col *= exp(-0.3*t);\n    }\n    col.z += 0.01;\n\n    return sqrt(col);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.15 + 0.005*iMouse.x;\n    \n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int jj=0; jj<AA; jj++ )\n    for( int ii=0; ii<AA; ii++ )\n    #else\n    int ii = 0, jj = 0;\n    #endif\n    {\n        vec2 q = fragCoord+vec2(float(ii),float(jj))/float(AA);\n\n        // camera\n        vec3 ro = vec3( 2.8*cos(0.1+.33*time), 0.5 + 0.20*cos(0.37*time), 2.8*cos(0.5+0.35*time) );\n        vec3 ta = vec3( 1.9*cos(1.2+.41*time), 0.5 + 0.10*cos(0.27*time), 1.9*cos(2.0+0.38*time) );\n        float roll = 0.2*cos(0.1*time);\n        vec3 cw = normalize(ta-ro);\n        vec3 cp = vec3(sin(roll), cos(roll),0.0);\n        vec3 cu = normalize(cross(cw,cp));\n        vec3 cv = normalize(cross(cu,cw));\n\n        #if 1\n        vec2 p = (2.0*q-iResolution.xy)/iResolution.y;\n        vec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n        #else\n        vec2 p = q/iResolution.xy;\n        vec2 an = 3.1415926535898 * (p*vec2(2.0, 1.0) - vec2(0.0,0.5));\n        vec3 rd = vec3(cos(an.y) * sin(an.x), sin(an.y), cos(an.y) * cos(an.x));\n\t\t#endif\n\n        tot += render( ro, rd );\n    }\n    \n    tot = tot/float(AA*AA);\n    \n\tfragColor = vec4( tot, 1.0 );\t\n\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 col = render( fragRayOri + vec3(0.82,1.3,-0.3), fragRayDir );\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}