{
    "Shader": {
        "info": {
            "date": "1469384349",
            "description": "I had to change the controls as pressing Ctrl + W closes the window.\nCursors - Turn\nWASD - Move\nSpace - Fire\nEnter/F - Open Door\nShift - Run\nAlt - Strafe\nL - Mouse look\nI - Invert Y\nTab - Map\n(see ReadControls() in  buffer C)",
            "flags": 112,
            "hasliked": 0,
            "id": "lldGDr",
            "likes": 142,
            "name": "[SH16C] Doom",
            "published": 3,
            "tags": [
                "game",
                "doom",
                "competition",
                "sh16c"
            ],
            "usePreview": 1,
            "username": "P_Malin",
            "viewed": 19524
        },
        "renderpass": [
            {
                "code": "\n//   _____ _               _           _               ______           ___  ___\n//  /  ___| |             | |         | |              |  _  \\          |  \\/  |\n//  \\ `--.| |__   __ _  __| | ___ _ __| |_ ___  _   _  | | | |___   ___ | .  . |\n//   `--. \\ '_ \\ / _` |/ _` |/ _ \\ '__| __/ _ \\| | | | | | | / _ \\ / _ \\| |\\/| |\n//  /\\__/ / | | | (_| | (_| |  __/ |  | || (_) | |_| | | |/ / (_) | (_) | |  | |\n//  \\____/|_| |_|\\__,_|\\__,_|\\___|_|   \\__\\___/ \\__, | |___/ \\___/ \\___/\\_|  |_/\n//                                               __/ |                          \n//                                              |___/                           \n\n// https://www.shadertoy.com/view/lldGDr\n\n// @P_Malin\n\n// Entry for shadertoy 2016 competetion (Part C)\n// YouTube video here: https://www.youtube.com/watch?v=ETDjQ1itiNE\n\n// I worked on this a lot after the week we had for the competition.\n// I think the earlier verion I submitted for the competition was like this\n// https://www.shadertoy.com/view/ldscz7\n\n// Note - Exit sign texture is disabled - enable it in Buffer D by removing #define LINUX_WORKAROUND\n\n// Comment out for faster rendering:\n#define HUD_MESSAGES\n#define FULL_HUD\n\n//#define SHOW_SPRITES\n//#define SHOW_MAP_DATA\n\n// Enables map on Tab key (slow):\n// Also need define in buf c\n#define ALLOW_MAP\n//#define HIRES_MAP\n\n// Controls: \n\n// Press Space / Enter to Start!\n// Cursors - Turn\n// WASD - Move\n// Space - Fire\n// Enter/F - Open Door\n// Shift - Run\n// Alt - Strafe\n// L - Mouse look\n// I - Invert Y\n\n// ( see ReadControls() in  buffer C )\n\n\n// Note: I've added a bunch of additional stuff to this shader since the competition deadline\n//\n// * Fixed framerate issue on some machines\n// * Fixed some state machine timer logic\n// * Enemy sprites for different compass directions\n// * Changed aspect ratio\n// * Added mouse control + mouselook\n// * Sergeants carry shotguns\n// * Added sprites for more enemy states\n// * Fixed sky rendering\n// * Added viemodel\n// * Added enemy model textures sprites\n// * Added muzzle flash sprite\n// * Improved barrel explode sprite\n// * Impreove imp fireball sprite\n// * Improved HUD and added numbers font\n// * Added messages for pickups etc.\n\n// Music : https://soundcloud.com/plasma3/doom-remix-at-dooms-gate-level-1-theme-e1m1\n\n// Thanks to adx and morimea for investigating the linux version.\n\n// HUD / UI / Viewmodel\n\n#define MAP_CHANNEL iChannel0\n#define STATE_CHANNEL iChannel1\n\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n// Common code follows\n\n#define NO_UNROLL(X) (X + min(0,iFrame))\n#define NO_UNROLLU(X) (X + uint(min(0,iFrame)))\n\nbool Map_PointInSector( sampler2D mapSampler, vec2 vPos, Sector sector )\n{\n    float fInOutTest = 0.0;\n    \n    for(int iSideDefIndex=0; iSideDefIndex< NO_UNROLL( sector.iSideDefCount ); iSideDefIndex++)\n    {        \n        SideDef sideDef = Map_ReadSideDefInfo( mapSampler, sector.iSectorId, iSideDefIndex );\n        \n        vec2 vPosToA = sideDef.vA - vPos;\n        vec2 vPosToB = sideDef.vB - vPos;\n        \n        if ( vPosToA.y > 0.0 && vPosToB.y > 0.0 )\n        \tcontinue;\n        if ( vPosToB.y <= 0.0 && vPosToA.y <= 0.0 )\n        \tcontinue;               \n        \n        float fCross = Cross2d( vPosToA, vPosToB );\n        if ( vPosToA.y > vPosToB.y )\n            fCross = -fCross;\n        if ( fCross < 0.0 )\n        {\n            fInOutTest++;\n        }        \n    }\n    \n    return mod( fInOutTest, 2.0 ) >= 1.0;    \n}\n\nbool Map_PointInSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos, int iSectorId )\n{\n    if ( !Map_ValidSectorId(mapInfo, iSectorId) )\n    {\n        return false;\n    }\n\n    Sector sector = Map_ReadSector( mapSampler, iSectorId );\n\n    return Map_PointInSector( mapSampler, vPos, sector );\n}\n\nint Map_SeekSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos )\n{    \n    for(int iSectorIndex=0; iSectorIndex<NO_UNROLL( mapInfo.iSectorCount ); iSectorIndex++)\n    {        \n        if ( Map_PointInSector( mapSampler, mapInfo, vPos, iSectorIndex ) )\n        {\n            return iSectorIndex;\n        }        \n    }\n\n    return SECTOR_NONE;\n}\n\n\nvoid Map_UpdateSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPrev, vec2 vPos, inout int iSectorId )\n{    \n    if ( vPrev == vPos )\n    {\n        return;\n    }\n    \n    if ( !Map_PointInSector( mapSampler, mapInfo, vPos, iSectorId ) )\n    {\n        int iNewSectorId = Map_SeekSector( mapSampler, mapInfo, vPos );\n        \n        if ( iNewSectorId != SECTOR_NONE )\n        {\n        \tiSectorId = iNewSectorId;\n        }                \n    }\n}\n\n///////////////////////////\n// Trace\n///////////////////////////\n\nTraceResult Map_Trace( sampler2D mapSampler, MapInfo mapInfo, vec3 vRayOrigin, vec3 vRayDir, int iSectorId, float fMaxDist )\n{\n    TraceResult result;\n    \n    result.iTexture = 0u;\n    result.vTexture = vec3(0.0);\n    result.fDist = 0.0;\n    result.fLightLevel = 0.0;\n    result.iSector = SECTOR_NONE;\n    \n    while(true)\n    {\n        if ( iSectorId == SECTOR_NONE )\n        {\n            break;\n        }\n        \n        Sector sector = Map_ReadSector( mapSampler, iSectorId );\n        \n        TraceSectorState sectorState;\n        sectorState.iNextSector = SECTOR_NONE;        \n        sectorState.fEnterDist = result.fDist;\n        sectorState.bNoUpper = false;\n        result.fDist = fMaxDist;\n        result.iSector = iSectorId;\n        \n        for(int iSideDefIndex=0; iSideDefIndex<NO_UNROLL( sector.iSideDefCount); iSideDefIndex++)\n        {\n            SideDef sideDef = Map_ReadSideDefInfo( mapSampler, iSectorId, iSideDefIndex );                        \n\n            TraceSideDef( mapSampler, vRayOrigin, vRayDir, result, sectorState, sector, sideDef );\n        }\n\n        // Test floor / ceiling\n        if ( sectorState.fExitY < sector.fFloorHeight )\n        {\n            result.fDist = (sector.fFloorHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vFloorPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vFloorPos.xz );\n            result.iTexture = sector.iFloorTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }\n        else\n        if ( sectorState.fExitY > sector.fCeilingHeight && !sectorState.bNoUpper )\n        {\n            result.fDist = (sector.fCeilingHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vCeilingPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vCeilingPos.xz );\n            result.iTexture = sector.iCeilingTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }        \n\n        iSectorId = sectorState.iNextSector;\n    }\n    \n    if ( result.iTexture == 1u )\n        result.fDist = FAR_CLIP;\n    \n    return result;\n}\n\n\n// End of common code\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n\n\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n// Start of Font code\n\nconst ivec3 _SPACE_ = ivec3(0,0,5);\nconst ivec3 _EXCLAMATION_ = ivec3(49539,384,4);\nconst ivec3 _QUOTE_ = ivec3(2331,0,7);\nconst ivec3 _HASH_ = ivec3(167818,1311,7);\nconst ivec3 _DOLLAR_ = ivec3(508575,69524,7);\nconst ivec3 _PERCENT_ = ivec3(232984,4487,8);\nconst ivec3 _AMPERSAND_ = ivec3(249630,8095,8);\nconst ivec3 _APOSTROPHE_ = ivec3(259,0,4);\nconst ivec3 _L_PAREN_ = ivec3(115614,3847,7);\nconst ivec3 _R_PAREN_ = ivec3(462351,1948,7);\nconst ivec3 _ASTERISK_ = ivec3(509700,526,7);\nconst ivec3 _PLUS_ = ivec3(114944,2,5);\nconst ivec3 _COMMA_ = ivec3(0,33152,4);\nconst ivec3 _MINUS_ = ivec3(245760,0,6);\nconst ivec3 _PERIOD_ = ivec3(0,384,4);\nconst ivec3 _SLASH_ = ivec3(232984,391,7);\nconst ivec3 _0_ = ivec3(843678,3903,8);\nconst ivec3 _1_ = ivec3(99206,774,5);\nconst ivec3 _2_ = ivec3(1039935,8067,8);\nconst ivec3 _3_ = ivec3(1023007,4024,8);\nconst ivec3 _4_ = ivec3(511387,3096,7);\nconst ivec3 _5_ = ivec3(508319,3998,7);\nconst ivec3 _6_ = ivec3(1033150,7987,8);\nconst ivec3 _7_ = ivec3(793663,6192,8);\nconst ivec3 _8_ = ivec3(498111,8115,8);\nconst ivec3 _9_ = ivec3(1038751,4024,8);\nconst ivec3 _COLON_ = ivec3(3,384,4);\nconst ivec3 _SEMICOLON_ = ivec3(384,33152,4);\nconst ivec3 _LESSTHAN_ = ivec3(98816,66307,5);\nconst ivec3 _EQUALS_ = ivec3(114688,896,5);\nconst ivec3 _GREATERTHAN_ = ivec3(49280,16774,5);\nconst ivec3 _QUESTION_MARK_ = ivec3(925568,114751,8);\nconst ivec3 _AT_ = ivec3(1532350,65237,9);\nconst ivec3 _A_ = ivec3(1038782,6579,8);\nconst ivec3 _B_ = ivec3(515135,8123,8);\nconst ivec3 _C_ = ivec3(115646,7943,8);\nconst ivec3 _D_ = ivec3(842783,4027,8);\nconst ivec3 _E_ = ivec3(1034174,7951,8);\nconst ivec3 _F_ = ivec3(508863,387,8);\nconst ivec3 _G_ = ivec3(902078,7991,8);\nconst ivec3 _H_ = ivec3(1038771,6579,8);\nconst ivec3 _I_ = ivec3(49539,387,4);\nconst ivec3 _J_ = ivec3(792624,8120,8);\nconst ivec3 _K_ = ivec3(249267,6555,8);\nconst ivec3 _L_ = ivec3(49539,8071,8);\nconst ivec3 _M_ = ivec3(2096099,12779,9);\nconst ivec3 _N_ = ivec3(1039287,7615,8);\nconst ivec3 _O_ = ivec3(843678,3903,8);\nconst ivec3 _P_ = ivec3(1039423,387,8);\nconst ivec3 _Q_ = ivec3(843678,790335,8);\nconst ivec3 _R_ = ivec3(515135,6587,8);\nconst ivec3 _S_ = ivec3(508319,3992,7);\nconst ivec3 _T_ = ivec3(198207,1548,8);\nconst ivec3 _U_ = ivec3(842163,3903,8);\nconst ivec3 _V_ = ivec3(232859,526,7);\nconst ivec3 _W_ = ivec3(2094563,15359,9);\nconst ivec3 _X_ = ivec3(466807,15294,9);\nconst ivec3 _Y_ = ivec3(498099,1548,8);\nconst ivec3 _Z_ = ivec3(232991,3975,7);\nconst ivec3 _L_SQUARE_BRACKET_ = ivec3(49543,899,5);\nconst ivec3 _BACKSLASH_ = ivec3(230275,3100,7);\nconst ivec3 _R_SQUARE_BRACKET_ = ivec3(99079,902,5);\nconst ivec3 _CARET_ = ivec3(444164,0,7);\nconst ivec3 _UNDERSCORE_ = ivec3(0,1032192,8);\n\nfloat Font_DecodeBitmap( vec2 vCoord, ivec3 vCharacter )\n{\n    vCoord = floor( vCoord );\n\n    int iRow = int(vCoord.y) - 1;\n    int iCol = int(vCoord.x) - 1;\n    \n    if ( iRow < 0 || iRow >= 6 ) return 0.0;\n    if ( iCol < 0 || iCol >= 7 ) return 0.0;\n    \n    int iRowBits = 0;\n        \n   \tif ( iRow == 0 ) \t\t\tiRowBits = vCharacter.x;\n    else  if ( iRow == 1 ) \t\tiRowBits = vCharacter.x / 128;\n    else  if ( iRow == 2 ) \t\tiRowBits = vCharacter.x / 16384;\n    else  if ( iRow == 3 ) \t\tiRowBits = vCharacter.y;\n    else  if ( iRow == 4 ) \t\tiRowBits = vCharacter.y / 128;\n    else \t\t\t\t\t\tiRowBits = vCharacter.y / 16384;\n      \n    return (iRowBits & (1 << iCol )) == 0 ? 0.0 : 1.0;\n}\n\n\nstruct PrintState\n{\n    vec2 vTexCoord;\n    vec2 vOrigin;\n    vec2 vPos;\n    \n    vec3 vColor;\n    vec3 vOutline;\n};\n    \nvoid Print_MoveTo( inout PrintState printState, vec2 vPos )\n{\n    printState.vOrigin = printState.vTexCoord - vPos;\n    printState.vPos = printState.vOrigin;\n}\n\nvoid Print_Newline( inout PrintState printState )\n{\n    printState.vPos.x = printState.vOrigin.x;\n    printState.vPos.y -= 8.0;\n}\n\nvoid Print_Color( inout PrintState printState, vec3 vColor )\n{\n    printState.vColor = vColor;\n}\n\nvoid Print_Init( out PrintState printState, vec2 vTexCoord )\n{\n    printState.vTexCoord = vTexCoord;        \n    printState.vOrigin = vTexCoord;\n    printState.vPos = vTexCoord;\n    printState.vColor = vec3(1,0,0);\n    printState.vOutline = vec3(.3,0,0);\n    Print_MoveTo( printState, vec2(0) ); \n}\n\nvoid Print_Space( inout PrintState printState )\n{\n    printState.vPos.x -= 5.0;\n}\n\nbool Print_Test( inout PrintState printState, vec3 vCharacter, float fSpacing )\n{\n    if ( vCharacter.z == -1.0 )\n    {\n        Print_MoveTo( printState, vCharacter.xy );\n        return false;\n    }\n    \n    if ( printState.vPos.x < vCharacter.z )\n        return true;\n         \n\tprintState.vPos.x -= vCharacter.z + fSpacing;\n    return false;\n}\n\nvoid Print_Char( inout PrintState printState, inout vec3 vResult, ivec3 vCharacter )\n{\n    float fBitmap = Font_DecodeBitmap( printState.vPos, vCharacter );\n    if ( fBitmap > 0.0 ) vResult = printState.vColor;\n    \n    printState.vPos.x -= float(vCharacter.z - 1);\n}\n\nvoid Print_HudChar( inout PrintState printState, inout vec3 vResult, ivec3 vCharacter )\n{\n    float fBitmap = Font_DecodeBitmap( printState.vPos, vCharacter );\n    float fShadow = Font_DecodeBitmap( printState.vPos - vec2( 1, 1), vCharacter );\n\n    if ( fBitmap > 0.0 ) vResult = printState.vColor * 0.5 + 0.5 * (printState.vPos.y / 8.);\n    else if ( fShadow > 0.0 ) vResult *= 0.5;\n    \n    printState.vPos.x -= float(vCharacter.z);\n}\n\nvoid Print_FancyChar( inout PrintState printState, inout vec3 vResult, ivec3 vCharacter )\n{\n    float fBitmapTL = Font_DecodeBitmap( printState.vPos - vec2(-1,-1), vCharacter );\n    float fBitmapTC = Font_DecodeBitmap( printState.vPos - vec2( 0,-1), vCharacter );\n    float fBitmapTR = Font_DecodeBitmap( printState.vPos - vec2( 1,-1), vCharacter );\n\n    float fBitmapCL = Font_DecodeBitmap( printState.vPos - vec2(-1, 0), vCharacter );\n    float fBitmapCC = Font_DecodeBitmap( printState.vPos - vec2( 0, 0), vCharacter );\n    float fBitmapCR = Font_DecodeBitmap( printState.vPos - vec2( 1, 0), vCharacter );\n    \n    float fBitmapBL = Font_DecodeBitmap( printState.vPos - vec2(-1, 1), vCharacter );\n    float fBitmapBC = Font_DecodeBitmap( printState.vPos - vec2( 0, 1), vCharacter );\n    float fBitmapBR = Font_DecodeBitmap( printState.vPos - vec2( 1, 1), vCharacter );\n    \n    float fOutline \t= min( 1., fBitmapTL + fBitmapTC + fBitmapTR + fBitmapCL + fBitmapCR + fBitmapBL + fBitmapBC + fBitmapBR );    \n    float fShade = (fBitmapTL * .5 - fBitmapBR * .5 ) + 0.5;\n    \n    if ( fBitmapCC > 0.0 ) vResult = printState.vColor * (fShade * 0.25 + 0.75);\n    else\n    if ( fOutline > 0.0 ) vResult = printState.vOutline;\n    \n    printState.vPos.x -= float(vCharacter.z);\n}\n\n// End of font code\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n\n\n\nEntity g_playerEnt;\nGameState g_gameState;\n\nfloat hash2D(vec2 p)    \n{\n\treturn Hash( dot( p, vec2(1.0, 41.0) ) );\t\n}\n\nfloat noise1D( float p )\n{\n\tfloat fl = floor(p);\n\t\n\tfloat h0 = Hash( fl );\n\tfloat h1 = Hash( fl + 1.0 );\n\t\n\tfloat fr = p - fl;\n\tfloat fr2 = fr * fr;\n\tfloat fr3 = fr2 * fr;\n\t\n\tfloat t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tfloat t0 = 1.0 - t1;\n\t\n\treturn h0 * t0\n\t\t + h1 * t1;\n}\n\nfloat noise2D( vec2 p, float r )\n{\n\tvec2 fl = floor(p);\n\n\tfloat h00 = hash2D( mod(fl + vec2(0.0, 0.0), r) );\n\tfloat h10 = hash2D( mod(fl + vec2(1.0, 0.0), r) );\n\tfloat h01 = hash2D( mod(fl + vec2(0.0, 1.0), r) );\n\tfloat h11 = hash2D( mod(fl + vec2(1.0, 1.0), r) );\n\t\n\tvec2 fr = p - fl;\n\t\n\tvec2 fr2 = fr * fr;\n\tvec2 fr3 = fr2 * fr;\n\t\n\tvec2 t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tvec2 t0 = 1.0 - t1;\n\t\n\treturn h00 * t0.x * t0.y\n\t\t + h10 * t1.x * t0.y\n\t\t + h01 * t0.x * t1.y\n\t\t + h11 * t1.x * t1.y;\n}\n\nfloat fbm( vec2 p, float per )\n{\n\tfloat val = 0.0;\n\tfloat tot = 0.0;\n\tfloat mag = 0.5;\n\n\tp += 0.5;\n\tp = p * (1.0 / 8.0);\n\tval += noise2D(p, 4.0) * mag; tot+=mag; p=p*2.0 + 1.234; mag*=per;\t\n\tval += noise2D(p, 8.0) * mag; tot+=mag; p=p*2.0 + 2.456; mag*=per;\n\tval += noise2D(p, 16.0) * mag; tot+=mag; p=p*2.0 + 3.678; mag*=per;\n\tval += noise2D(p, 32.0) * mag; tot+=mag;\n\n\treturn val * (1.0 / tot);\n}\n\nvec3 Tex( vec2 vTexCoord )\n{\n    vec2 vSize = vec2(64.0);    \n    float fPersistence = 0.8;\n\tfloat fNoise2Freq = 0.5;\n    \n    vTexCoord = floor( vTexCoord );\n    \n\tfloat fRandom = fbm( vTexCoord, fPersistence );\n    \n\tvec3 col = mix( vec3(63.0, 47.0, 23.0), vec3(147.0, 123.0, 99.0), fRandom) / 255.0;\n\t\n\treturn col;    \n}\n\nvoid VWipe( inout vec2 vPixel, float fFade, vec2 vSize )\n{\n    float fEffectTime = max( 0.0, fFade );\n    float fEffectOffset = max(fEffectTime - 1.0, 0.0) - Hash(floor(vPixel.x)) * 0.4;\n\n    fEffectOffset = clamp(fEffectOffset, 0.0, 1.0);\n    \t\n    vPixel.y += fEffectOffset * vSize.y;\n}\n\n//////////////////////////////////////////////////////////////\n// Raymarching\n\n\nstruct SceneResult\n{\n\tfloat fDist;\n\tfloat fObjectId;\n    vec3 vUVW;\n};\n\nSceneResult Scene_Union( const in SceneResult a, const in SceneResult b )\n{\n    if ( a.fDist < b.fDist )\n    {\n        return a;\n    }\n    return b;\n}\n    \nSceneResult Scene_Subtract( const in SceneResult a, const in SceneResult b )\n{\n    if ( -a.fDist < b.fDist )\n    {\n        return a;\n    }\n\n    SceneResult result;\n    result.fDist = -b.fDist;\n    result.fObjectId = b.fObjectId;\n    result.vUVW = b.vUVW;\n    return result;\n}\n\nSceneResult Scene_Intersection( const in SceneResult a, const in SceneResult b )\n{\n    if ( a.fDist > b.fDist )\n    {\n        return a;\n    }\n    return b;\n}\n    \nSceneResult Scene_GetDistance( const vec3 vPos );    \n\nvec3 Scene_GetNormal(const in vec3 vPos)\n{\n    const float fDelta = 0.001;\n    vec2 e = vec2( -1, 1 );\n    \n    vec3 vNormal = \n        Scene_GetDistance( vPos + e.yxx * fDelta ).fDist * e.yxx + \n        Scene_GetDistance( vPos + e.xxy * fDelta ).fDist * e.xxy + \n        Scene_GetDistance( vPos + e.xyx * fDelta ).fDist * e.xyx + \n        Scene_GetDistance( vPos + e.yyy * fDelta ).fDist * e.yyy;\n    \n    if ( dot( vNormal, vNormal ) < 0.00001 )\n    {\n        return vec3(0, 1, 0);\n    }\n    \n    return normalize( vNormal );\n}    \n\nSceneResult Scene_Trace( const in vec3 vRayOrigin, const in vec3 vRayDir, float maxDist )\n{\t\n    SceneResult result;\n    result.fDist = 0.0;\n    result.vUVW = vec3(0.0);\n    result.fObjectId = 0.0;\n    \n\tfloat t = 0.1;\n\tconst int kRaymarchMaxIter = 128;\n\tfor(int i=0; i<kRaymarchMaxIter; i++)\n\t{\t\t\n\t\tresult = Scene_GetDistance( vRayOrigin + vRayDir * t );\t\t\n        t += result.fDist;\n\n        if ( abs(result.fDist) < 0.001 )\n\t\t{\n\t\t\tbreak;\n\t\t}\t\t\n        if ( t > maxDist )\n        {\n            result.fObjectId = -1.0;\n\t        t = maxDist;\n            break;\n        }\n\t}\n    \n    result.fDist = t;\n\n    return result;\n}\n\nvec2 Segment_Internal( vec3 vPos, vec3 vP0, vec3 vP1 )\n{\n\tvec3 pa = vPos - vP0;\n\tvec3 ba = vP1 - vP0;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\t\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nfloat Segment( vec3 vPos, vec3 vP0, vec3 vP1, float r0, float r1 )\n{\n    vec2 vC = Segment_Internal( vPos, vP0, vP1 );\n    \n    return vC.x - mix(r0, r1, vC.y);\n}\n\n#define MAT_BG 0.0\n#define MAT_SHOTGUN 1.0\n#define MAT_PISTOL 2.0\n\nSceneResult Scene_GetDistance( const vec3 vPos )\n{\n    vec3 vWeaponPos = vPos;\n    \n    if ( g_playerEnt.fHealth <= 0.0 )\n    {    \n        float fDeathFall = 0.0;\n\n        // Death\n        if( g_playerEnt.fHealth <= 0.0 )\n        {\n            fDeathFall = 1.0 - (g_playerEnt.fTimer / 1.5);\n        }\n\n    \tvWeaponPos.y += fDeathFall * 5.0;\n    }        \n    \n    \n    if ( g_playerEnt.fUseWeapon == 2.0 )\n    {\n\t    vWeaponPos += vec3(0.0, 0.0, 1.0) * pow( g_playerEnt.fTimer, 3.0) * 5.0 ;\n        \n        float fDist = Segment( vWeaponPos, vec3(0,-1.0,2.5), vec3(0, -5, 25), .2, 0.2 );\n        float fDist2 =  Segment( vWeaponPos, vec3(0, -4.5, 23), vec3(0, -4.5, 25), .1, 0.1 );\n        fDist = min( fDist, fDist2 );\n        return SceneResult( fDist, MAT_SHOTGUN, vec3(0.0) );    \n    }\n    \n    // pistol\n    vWeaponPos += vec3(0.0, 0.0, 1.0) * pow( g_playerEnt.fTimer, 3.0) * 10.0 ;\n    \n    float fDist = Segment( vWeaponPos, vec3(0,-0.8,0), vec3(0, -5, 20), .1, 0.1 );\n\treturn SceneResult( fDist, MAT_PISTOL, vec3(0.0) );    \n    \n    //return SceneResult( length(vPos - vec3(0.0, 1.0, 5.0)) - 0.5, MAT_SHOTGUN, vec3(0.0) );\n}\n\nvec4 MuzzleFlash( vec2 vUV, vec2 vPos, vec2 vSize )\n{\n    vec4 vResult = vec4( 0.0 );\n    vec2 vLocalPos = vUV - vPos;\n    vLocalPos = vLocalPos / vSize;\n    float fDist = length( vLocalPos );\n    fDist += abs(vLocalPos.x) + abs(vLocalPos.y);\n\n    float fFactor = fDist * 5.0 + fbm( vLocalPos * 100., 0.8);\n\n    //float fAmount = exp2( * fFactor );\n\n    if ( fFactor < 3.0)\n    {\n        fFactor = 1.0 - fFactor / 3.0;\n\n        fFactor = pow( 0.5 + fFactor, 5.0 );\n\n        vResult.rgb = vec3( fFactor, pow(fFactor, 2.0) * .4, pow(fFactor, 3.0) * .2) * 5.0;\n        vResult.a = 1.0;\n\n    }\n    \n    return vResult;\n}\n\nvec4 ViewmodelSprite( vec2 vUV, float fLightLevel )\n{\n    vec4 vResult = vec4( 0 );\n    \n    vec2 vBoundsMin = vec2(0);\n    vec2 vBoundsMax = vec2(1);\n    \n    if ( g_playerEnt.fUseWeapon == 2.0 )\n    {\n    \tvBoundsMin = vec2(0.4, 0.0);\n    \tvBoundsMax = vec2(0.6,0.25);\n    }\n    else\n    {\n    \tvBoundsMin = vec2(0.47, 0.0);\n    \tvBoundsMax = vec2(0.53,0.15);\n    }\n    \n    if ( all( greaterThanEqual( vUV, vBoundsMin ) ) &&\n         all( lessThan( vUV, vBoundsMax ) ) )\n    {       \n        vec3 vCameraPos = vec3(0.0, 0.0, 0.0);    \n        vec2 vWindowPos = vec2(vUV.x * 2.0 - 1.0, vUV.y * 2.0 - 1.0);\n        vec3 vCameraDir = normalize( vec3(vWindowPos, 3.0) - vCameraPos );\n\n        SceneResult sceneResult = Scene_Trace( vCameraPos, vCameraDir, 1000.0 );\n\n        if ( sceneResult.fDist < 400.0 )\n        {\n\n            vec3 vHitPos = vCameraPos + vCameraDir * sceneResult.fDist;\n\n            vec3 vNormal = Scene_GetNormal( vHitPos );\n\n            vec3 vAmbientLight = vec3(0.1);\n            vec3 vLightDir = normalize( vec3( 0.2, 0.3, 0.2 ) );\n            vec3 vLightColor = vec3(1.0);\n\n            float fShade = max( 0.0, dot( vNormal, vLightDir ) );\n\n            vec3 vDiffuseCol = vec3(.1);\n            float fSpecPow = 10.0;\n            float fSpecIntensity = 200.0;\n\n            if ( sceneResult.fObjectId == MAT_SHOTGUN )\n            {\n                vDiffuseCol = vec3(.1);\n                fSpecPow = 10.0;\n                fSpecIntensity = 200.0;        \n            }\n            else\n            if ( sceneResult.fObjectId == MAT_PISTOL )\n            {\n                vDiffuseCol = vec3(.2);\n                fSpecPow = 50.0;\n                fSpecIntensity = 20.0;        \n\n            }\n\n            vec3 vDiffuseLight = vAmbientLight + fShade * vLightColor;\n            vResult.rgb = vDiffuseCol * vDiffuseLight;\n\n            vec3 vRefl = reflect( vCameraDir, vNormal );\n            float fDot = max(0.0, dot( vRefl, vLightDir )) * fShade;\n            float fSpec = pow( fDot, fSpecPow );\n            vResult.rgb += fSpec * fSpecIntensity;\n\n            vResult.rgb = 1.0 - exp2( vResult.rgb * -2.0 );\n            vResult.rgb = pow( vResult.rgb, vec3(1.0 / 1.5) );\n            vResult.rgb = clamp( vResult.rgb, vec3(0.0), vec3(1.0) );\n            vResult.rgb *= fLightLevel;\n            vResult.rgb = clamp( vResult.rgb, vec3(0.0), vec3(1.0) );\n\n            vResult.a = 1.0;\n\n            return vResult;\n        }\n        else\n        {\n            // Bounds debug\n\t\t\t//return vec4(1,0,0,1);            \n        }\n    }\n    \n    // muzzle flash sprite\n       \n    if(  g_playerEnt.fHealth > 0.0 )\n    {    \n        if ( g_playerEnt.fUseWeapon == 2.0 )\n        {\n       \t\tif ( g_playerEnt.fTimer > 0.9 )\n\t    \t{\n                vec4 vMuzzleFlash = MuzzleFlash( vUV, vec2(0.5, 0.2), vec2(0.5, 0.5) );\n                \n                if ( vMuzzleFlash.a > 0.0 )\n                {\n                    return vMuzzleFlash;\n                }\n            }\n        }\n        else\n        {\n       \t\tif ( g_playerEnt.fTimer > 0.45 )\n\t    \t{\n                vec4 vMuzzleFlash = MuzzleFlash( vUV, vec2(0.5, 0.12), vec2(0.25, 0.25) );\n                \n                if ( vMuzzleFlash.a > 0.0 )\n                {\n                    return vMuzzleFlash;\n                }\n            }\n        }\t            \n\t}\n    \n    return vResult;    \n}\n\n#define FONT_POS \tivec2(280,0)\n#define FONT_CHAR \tivec2(16,0)\n\n\nvec4 NumFont_Char( vec2 vCharUV, int iDigit )\n{\n \tif ( iDigit < 0 )\n    \treturn vec4(0.0);\n    \n    ivec2 vTexCoord = ivec2(floor(vCharUV * vec2(14.0, 16.0))) + FONT_POS;\n    vTexCoord += iDigit * FONT_CHAR;\n        \n    return texelFetch( iChannel2, vTexCoord, 0 );\n}\n\nvec4 PrintHUDPercent(const in vec2 vStringUV, const in float fValue )\n{\n    float fMaxDigits = 3.0;\n    if ((vStringUV.y < 0.0) || (vStringUV.y >= 1.0)) return vec4(0.0);\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringUV.x);\n\tfloat fCharacter = -1.0;\n    \n\tif(fDigitIndex > (-0.0 - 1.01)) {\n\t\tif(fDigitIndex <= fBiggestIndex) {\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tfCharacter = 10.0; // Percent\n\t\t\t} else {\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharacter = floor(mod(kFix+fDigitValue, 10.0));\n\t\t\t}\t\t\n\t\t}\n\t}\n    \n    return NumFont_Char( fract(vStringUV), int(fCharacter) );\n}\n\n\nvec4 GetHudText( vec2 vPos, float fHealth, float fArmor )\n{    \n    vPos = floor( vPos );\n\tvec4 vHealth = PrintHUDPercent( vec2( (vPos - vec2(33,12)) / vec2(14,16)), fHealth );\n    if ( vHealth.a > 0.0 )\n    \treturn vHealth;\n    \n\tvec4 vArmor = PrintHUDPercent( vec2( (vPos - vec2(164,12)) / vec2(14,16)), fArmor );\n    if ( vArmor.a > 0.0 )\n    \treturn vArmor;\n    \n    return vec4(0.0);\n}\n\n\nvec4 SampleScene( vec2 vPixelCoord, vec2 vResolution, float fLightLevel )\n{\n    vec2 vScenePixelCoord = floor(vPixelCoord) - vec2(0, 32.0);\n    vec4 vResult = texture( iChannel3, (vScenePixelCoord + 0.5) / iChannelResolution[2].xy );\n    \n    vec2 vQuantizedUV = floor(vScenePixelCoord) * (1.0 / vResolution);\n    vec4 vViewmodelSprite = ViewmodelSprite( vQuantizedUV, fLightLevel );\n\n    vResult = mix ( vResult, vViewmodelSprite, vViewmodelSprite.a );\n    \n    if ( vScenePixelCoord.y < 1.0 )\n    {\n        return vec4((vec3(70./256.)), 1.);\n    }   \n    \n    return vResult;\n}\n\nvec3 DrawMap( vec2 vPixelCoord, vec2 vResolution )\n{\n    vec3 vResult = vec3(0.0);\n    vec2 vScenePixelCoord = floor(vPixelCoord) - vec2(0, 31.0);\n    \n    float fScale = 5.0;\n    \n    vec2 vPixelWorldPos = (vScenePixelCoord - vec2(160,100)) * fScale + g_playerEnt.vPos.xz;\n\n    MapInfo mapInfo = ReadMapInfo( MAP_CHANNEL );\n    \n    //if ( Key_IsToggled( KEY_TAB ) )\n    {\n        for(int iSectorIndex=0; iSectorIndex<mapInfo.iSectorCount; iSectorIndex++)\n        {\n            Sector sector = Map_ReadSector( MAP_CHANNEL, iSectorIndex );\n            \n            /*if ( Map_PointInSector( vPixelWorldPos, sector ) )\n            {\n                vResult = vec3(1,0,0);\n            }*/\n            \n\n            for(int iSideDefIndex=0; iSideDefIndex<sector.iSideDefCount; iSideDefIndex++)\n            {\n                SideDef sideDef = Map_ReadSideDefInfo( MAP_CHANNEL, iSectorIndex, iSideDefIndex );                        \n\n                vec2 vSideDir = normalize( sideDef.vB - sideDef.vA );\n\n                float fProj = dot( vSideDir, vPixelWorldPos - sideDef.vA );\n                fProj = clamp( fProj, 0.0, sideDef.fLength );\n                \n                vec2 vClosest = sideDef.vA + vSideDir * fProj;\n                float fDist = length( vClosest - vPixelWorldPos );\n                \n                if (fDist < fScale * .5 )\n                {\n                    if ( sideDef.iNextSector != SECTOR_NONE )\n                    {\n\t                    vResult = vec3(1,1,0);\n                    }\n                    else\n                    {\n\t                    vResult = vec3(1,0,0);\n                    }\n                }\n            }\t\t\t\n        }\n    }    \n    \n    return vResult;\n}\n\nfloat Relief( vec2 vPos, vec2 vMin, vec2 vMax )\n{\n    vPos = floor(vPos);\n    if ( (vPos.x == vMin.x ) && (vPos.y <= vMax.y && vPos.y >= vMin.y ) )\n    {\n\t    return 1.3;\n    }\n\n    if ( (vPos.y == vMax.y ) && (vPos.x <= vMax.x && vPos.x >= vMin.x ) )\n    {\n\t    return 1.4;\n    }\n        \n    if ( (vPos.x == vMax.x ) && (vPos.y <= vMax.y && vPos.y >= vMin.y ) )\n    {\n\t    return 0.4;\n    }\n\n    if ( (vPos.y == vMin.y ) && (vPos.x <= vMax.x && vPos.x >= vMin.x ) )\n    {\n\t    return 0.7;\n    }\n    \n    return 1.0;\n}\n\n#ifdef FULL_HUD\n\nivec3 GetMessageChar( int iMessage, int iChar )\n{\n\t#define MESSAGE_CHAR(X) if ( iChar == 0 ) return X; iChar--\n    \n    if ( iMessage == EVENT_HEALTH_BONUS ||\n       \tiMessage == EVENT_ARMOR_BONUS || \n       \tiMessage == EVENT_GREENARMOR || \n        iMessage == EVENT_BLUEARMOR ||\n       iMessage == EVENT_MEDIKIT)\n    {\n        MESSAGE_CHAR( _P_ );\n        MESSAGE_CHAR( _I_ );\n        MESSAGE_CHAR( _C_ );\n        MESSAGE_CHAR( _K_ );\n        MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _D_ );\n\n        MESSAGE_CHAR( _SPACE_ );\n\n        MESSAGE_CHAR( _U_ );\n        MESSAGE_CHAR( _P_ );\n\n        MESSAGE_CHAR( _SPACE_ );\n    }\n    else\n    if( iMessage == EVENT_SHOTGUN )\n    {\n        MESSAGE_CHAR( _Y_ );\n        MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _U_ );\n        \n        MESSAGE_CHAR( _SPACE_ );\n\n        MESSAGE_CHAR( _G_ );\n        MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _T_ );\n        \n        MESSAGE_CHAR( _SPACE_ );\n    }\n        \n    \n    if ( iMessage == EVENT_HEALTH_BONUS || iMessage == EVENT_ARMOR_BONUS || iMessage == EVENT_MEDIKIT)\n    {    \n        MESSAGE_CHAR( _A_ );\n        if ( iMessage == EVENT_ARMOR_BONUS )\n        {    \n\t        MESSAGE_CHAR( _N_ );\n        }\n        MESSAGE_CHAR( _SPACE_ );\n    }\n    else if ( iMessage == EVENT_GREENARMOR ||\n            iMessage == EVENT_BLUEARMOR || \n            iMessage == EVENT_SHOTGUN )\n    {\n        MESSAGE_CHAR( _T_ );\n        MESSAGE_CHAR( _H_ );\n        MESSAGE_CHAR( _E_ );\n        \n        MESSAGE_CHAR( _SPACE_ );\n    }\n\n    if ( iMessage == EVENT_BLUEARMOR )\n    {\n        MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _G_ );\n        MESSAGE_CHAR( _A_ );\n    }\n    \n    if( iMessage == EVENT_SHOTGUN )\n    {\n        MESSAGE_CHAR( _S_ );\n        MESSAGE_CHAR( _H_ );\n        MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _T_ );\n        MESSAGE_CHAR( _G_ );\n        MESSAGE_CHAR( _U_ );\n        MESSAGE_CHAR( _N_ );\n        \n        MESSAGE_CHAR( _SPACE_ );\n    }\n    \n    if ( iMessage == EVENT_HEALTH_BONUS )\n    {    \n        MESSAGE_CHAR( _H_ );\n        MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _A_ );\n        MESSAGE_CHAR( _L_ );\n        MESSAGE_CHAR( _T_ );\n        MESSAGE_CHAR( _H_ );\n    }\n    else if ( iMessage == EVENT_ARMOR_BONUS || iMessage == EVENT_GREENARMOR || iMessage == EVENT_BLUEARMOR)\n    {    \n        MESSAGE_CHAR( _A_ );\n        MESSAGE_CHAR( _R_ );\n        MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _R_ );\n    }\n    else if ( iMessage == EVENT_MEDIKIT )\n    {    \n        MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _D_ );\n        MESSAGE_CHAR( _I_ );\n        MESSAGE_CHAR( _K_ );\n        MESSAGE_CHAR( _I_ );\n        MESSAGE_CHAR( _T_ );\n    }\n    \n    if ( iMessage == EVENT_HEALTH_BONUS || iMessage == EVENT_ARMOR_BONUS)\n    {    \n        MESSAGE_CHAR( _SPACE_ );\n        \n        MESSAGE_CHAR( _B_ );\n        MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _N_ );\n        MESSAGE_CHAR( _U_ );\n        MESSAGE_CHAR( _S_ );\n    }\n\n    if ( iMessage == EVENT_BLUEARMOR || iMessage == EVENT_SHOTGUN )\n    {\n        MESSAGE_CHAR( _EXCLAMATION_ );\n    }\n    else\n    {\n        MESSAGE_CHAR( _PERIOD_ );\n    }   \n    \n    return ivec3(0);\n}\n\n\nivec3 GetHudTextChar( int iChar ) \n{\n\n\t#define HUD_TEXT_CHAR(X) if ( iChar == 0 ) return X; iChar--\n    \n    HUD_TEXT_CHAR( ivec3(6,189, -1) ); // MOVE\n\n    HUD_TEXT_CHAR( _A_ );\n    HUD_TEXT_CHAR( _M_ );\n    HUD_TEXT_CHAR( _M_ );\n    HUD_TEXT_CHAR( _O_ );\n\n    HUD_TEXT_CHAR( ivec3(52,189, -1) ); // MOVE\n    \n    HUD_TEXT_CHAR( _H_ );\n    HUD_TEXT_CHAR( _E_ );\n    HUD_TEXT_CHAR( _A_ );\n    HUD_TEXT_CHAR( _L_ );\n    HUD_TEXT_CHAR( _T_ );\n    HUD_TEXT_CHAR( _H_ );\n    \n    HUD_TEXT_CHAR( ivec3(109,189, -1) ); // MOVE\n\n    HUD_TEXT_CHAR( _A_ );\n    HUD_TEXT_CHAR( _R_ );\n    HUD_TEXT_CHAR( _M_ );\n    HUD_TEXT_CHAR( _S_ );\n    \n    HUD_TEXT_CHAR( ivec3(187,189, -1) ); // MOVE\n\n    HUD_TEXT_CHAR( _A_ );\n    HUD_TEXT_CHAR( _R_ );\n    HUD_TEXT_CHAR( _M_ );\n    HUD_TEXT_CHAR( _O_ );\n    HUD_TEXT_CHAR( _R_ );\n\n    return ivec3(0);\n}\n\n\nvoid PrintHudMessage( vec2 vTexCoord, int iMessage, inout vec3 vResult )\n{\n    if ( vTexCoord.y > 8.0 || vTexCoord.y < 0.0 || vTexCoord.x < 0.0 || vTexCoord.x > 240. )\n        return;     \n    \n    vec2 vUV = vec2( vTexCoord.x, vTexCoord.y );\n    vUV.y += float(iMessage * 8);\n    vUV.y = (iChannelResolution[0].y - 1.0) - vUV.y;\n    vUV = floor( vUV ) + 0.5;\n    vUV /= iChannelResolution[0].xy;\n    vec4 vSample = texture(iChannel0, vUV);\n\tif( vSample.a > 0.0)\n\t{\n        vResult = vSample.rgb;\n\t}\n                    \n    \n                    /*\n    // Message text\n    PrintState printState;\n    Print_Init( printState, vTexCoord );\n\n    // Fixed size font\n    //float fCharIndex = floor( printState.vPos.x / 8. );\n    //printState.vPos.x -= fCharIndex * 8.0;\n    //vec3 vChar = GetMessageChar( fMessage, fCharIndex );\n    \n    vec3 vChar = _SPACE_;\n    for ( int i=0; i<32; i++)\n    {\n        vChar = GetMessageChar( fMessage, float(i) );\n        if ( Print_Test( printState, vChar, 0.0 ) )\n        {\n            break;\n        }\n        if ( vChar.z == 0. )\n            break;\n    }\n        \t\n    Print_FancyChar( printState, vResult, vChar );\n\t*/\n}\n#endif // FULL_HUD\n\nvec4 GameImage( vec2 vUV, vec2 vResolution )\n{\n    vec4 vResult = vec4(0.0);\n\n    if ( any( lessThan( vUV, vec2(0.0) ) ) || any( greaterThanEqual( vUV, vec2(1,1) ) ) )\n    {\n        return vResult;\n    }\n    \n    vec2 vHudPixel = vUV * vResolution.xy;\n    vec2 vScenePixel = vUV * vResolution.xy;\n\n    g_playerEnt = Entity_Read( STATE_CHANNEL, 0 );\n    Sector playerSector = Map_ReadSector( MAP_CHANNEL, g_playerEnt.iSectorId );\n    \n\tg_gameState = GameState_Read( STATE_CHANNEL );\n    \n    float fHudFade = 0.0;\n    float fGameFade = 10.0;\n    \n    if ( g_gameState.iMainState == MAIN_GAME_STATE_GAME_RUNNING )\n    {\n        fHudFade = 0.01 + g_gameState.fStateTimer;\n        fGameFade = 0.0;\n    }\n    if ( g_gameState.iMainState == MAIN_GAME_STATE_WIN )\n    {\n        fGameFade = 0.01 + g_gameState.fStateTimer;\n        fHudFade = 0.0;\n    }\n    \n    VWipe( vHudPixel, fHudFade, vResolution );\n    VWipe( vScenePixel, fGameFade, vResolution );       \n    \n    \n    vec3 vRenderImage;\n    \n#ifdef ALLOW_MAP    \n    if ( g_gameState.fMap > 0.0 )\n    {\n#ifdef HIRES_MAP        \n        vRenderImage = DrawMap( vScenePixel, vResolution );\n#else // HIRES_MAP       \n        vec2 vScenePixelCoord = floor(vScenePixel);\n\n        float fScale = 10.0;\n        vec2 vPixelWorldPos = (vScenePixelCoord - vec2(160,100)) * fScale + g_playerEnt.vPos.xz;\n        \n        vec2 vMapUV = (vPixelWorldPos - vec2(1056, -3616)) / 10.0 + vec2(200, 150);\n        vMapUV += vec2(0, 32.0);\n        \n        vRenderImage = texture( iChannel1, (floor(vMapUV) + 0.5) / iChannelResolution[1].xy ).rgb;\n#endif // HIRES_MAP\n    }        \n    else\n#endif // ALLOW_MAP        \n    {\n \t\tvRenderImage = SampleScene( vScenePixel, vResolution, playerSector.fLightLevel ).rgb;        \n    }\n    \n    if ( vScenePixel.y <= 32.0 )\n    {\n        vec4 vHudText = GetHudText( vScenePixel, g_playerEnt.fHealth, g_playerEnt.fArmor );\n\n\t\tvec2 vNoiseScale = vec2(500.0, 300.0);        \n        float fNoisePer = 0.8;\n        if ( vHudText.a > 0.0 )\n        {\n            vNoiseScale = vec2(600.0); \n            fNoisePer = 0.5;\n        }\n\n        float fNoise = fbm( vUV * vNoiseScale, fNoisePer );\n        fNoise = fNoise * 0.5 + 0.5;\n        \n        if ( vHudText.a > 0.0 )\n        {\n            vRenderImage = vHudText.rgb * fNoise;\n        }\n    \telse\n        {\n            vRenderImage = vec3(fNoise * fNoise * 0.65 );\n        }    \n        \n#ifdef FULL_HUD\n        // Main relief\n        vRenderImage *= Relief( vScenePixel, vec2(0, 0), vec2(46, 31));\n        vRenderImage *= Relief( vScenePixel, vec2(48, 0), vec2(104, 31));\n        vRenderImage *= Relief( vScenePixel, vec2(106, 0), vec2(142, 31));\n        vRenderImage *= Relief( vScenePixel, vec2(178, 0), vec2(235, 31));\n        vRenderImage *= Relief( vScenePixel, vec2(249, 0), vec2(319, 31));\n        \n        // weapon avail\n        vRenderImage *= Relief( vScenePixel, vec2(107, 200 - 179), vec2(117, 200 - 171));\n        vRenderImage *= Relief( vScenePixel, vec2(119, 200 - 179), vec2(129, 200 - 171));\n        vRenderImage *= Relief( vScenePixel, vec2(131, 200 - 179), vec2(141, 200 - 171));\n        \n        vRenderImage *= Relief( vScenePixel, vec2(107, 200 - 189), vec2(117, 200 - 181));\n        vRenderImage *= Relief( vScenePixel, vec2(119, 200 - 189), vec2(129, 200 - 181));\n        vRenderImage *= Relief( vScenePixel, vec2(131, 200 - 189), vec2(141, 200 - 181));\n\n        // decoration\n        vRenderImage *= Relief( vScenePixel, vec2(237, 200 - 179), vec2(247, 200 - 171));\n        vRenderImage *= Relief( vScenePixel, vec2(237, 200 - 189), vec2(247, 200 - 181));\n        vRenderImage *= Relief( vScenePixel, vec2(237, 200 - 199), vec2(247, 200 - 191));\n        \n        vRenderImage *= Relief( vScenePixel, vec2(143, 0), vec2(177, 31));\n        \n        if ( all( greaterThanEqual( vScenePixel, vec2(144,1) ) ) &&\n            all( lessThan( vScenePixel, vec2(177,31) ) ) )\n        {\n            vRenderImage = vec3(0.0);\n        }\n#endif // FULL_HUD\n            \n#ifdef FULL_HUD   \n        \n        PrintHudMessage( vec2(vScenePixel.x, (vResolution.y - 1.) - (vScenePixel.y + 189.)), MESSAGE_HUD_TEXT, vRenderImage );\n        \n        PrintState printState;\n        Print_Init( printState, vec2(vScenePixel.x, (vResolution.y - 1.) - vScenePixel.y) );        \n\n        \n        // HUD text AMMO, HEALTH, ARMS, ARMOR\n/*\n        Print_Color( printState, vec3(.9 ) );\n        vec3 vChar = _SPACE_;\n        for ( int i=0; i<24; i++)\n        {\n            vChar = GetHudTextChar( float(i) );\n            if ( Print_Test( printState, vChar, 0.0 ) )\n            {\n                break;\n            }\n            if ( vChar.z == 0. )\n                break;\n        }\n\n        Print_HudChar( printState, vRenderImage, vChar );        \n*/\n        // Arms numbers\n        Print_Color( printState, vec3(.8,.8,0 ) );        \n        Print_MoveTo( printState, vec2(109,170) );\n        Print_Char( printState, vRenderImage, _2_ );\n\n        if( g_playerEnt.fHaveShotgun <= 0.0 )\n        {\n\t\t\tPrint_Color( printState, vec3(.25 ) );        \n        }\n        \n        Print_MoveTo( printState, vec2(120,170) );\n        Print_Char( printState, vRenderImage, _3_ );\n        Print_Color( printState, vec3(.25 ) );        \n        Print_MoveTo( printState, vec2(132,170) );\n        Print_Char( printState, vRenderImage, _4_ );\n\n        Print_MoveTo( printState, vec2(109,179) );\n        Print_Char( printState, vRenderImage, _5_ );\n        Print_MoveTo( printState, vec2(120,179) );\n        Print_Char( printState, vRenderImage, _6_ );\n        Print_MoveTo( printState, vec2(132,179) );\n        Print_Char( printState, vRenderImage, _7_ );\n#endif // FULL_HUD        \n    }    \n    \n\tfloat fEffectAmount = clamp( abs(g_gameState.fHudFx), 0.0, 1.0 );\n            \n    if (g_gameState.fHudFx > 0.0) \n    {\n        vRenderImage.rgb = mix( vRenderImage.rgb, vec3( 0.5, 1, 0.6), fEffectAmount * 0.75 );\n    }\n\n    if (g_gameState.fHudFx < 0.0) \n    {\n        vRenderImage.rgb = mix( vRenderImage.rgb, vec3( 1, 0, 0), fEffectAmount * 0.75 );\n    }\n    \n#ifdef FULL_HUD    \n#ifdef HUD_MESSAGES\n    if ( g_gameState.fMessageTimer > 0.0 )\n    {\n        if (g_gameState.iMessage >= 0 )\n        {\n        \tPrintHudMessage( vec2(vScenePixel.x, (vResolution.y) - vScenePixel.y), g_gameState.iMessage, vRenderImage );\n        }\n    }\n#endif // HUD_MESSAGES    \n#endif // FULL_HUD    \n    \n    \n    vec3 vFrontendImage = vec3(0.0);\n    \n    if ( vHudPixel.y > 0.0 )\n    {\n        vFrontendImage = Tex( vHudPixel );\n        vec2 vHudTextCoord = vec2(vHudPixel.x, (vResolution.y) - vHudPixel.y);\n\n        if ( g_gameState.iMainState == MAIN_GAME_STATE_WIN )\n        {\n            float fScale = 0.5;\n            vec2 vPos = vec2(58,8);\n\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_HANGAR, vFrontendImage );        \n            vPos.y += 10.0;\n            vPos.x = 56.0;\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_FINISHED, vFrontendImage );        \n\n        }\n\n        /*\n        if ( g_gameState.fMainState == MAIN_GAME_STATE_SKILL_SELECT\n           || g_gameState.fMainState == MAIN_GAME_STATE_INIT_LEVEL\n           || g_gameState.fMainState == MAIN_GAME_STATE_GAME_RUNNING )\n        {            \n            float fScale = 0.8;\n            vec2 vPos = vec2(32,32);\n\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_CHOOSE_SKILL, vFrontendImage );        \n\n            vPos.x += 32.0;\n            vPos.y += 24.0;\n\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_SKILL_1, vFrontendImage );        \n            vPos.y += 16.0;\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_SKILL_2, vFrontendImage );        \n            vPos.y += 16.0;\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_SKILL_3, vFrontendImage );        \n            PrintHudMessage( (vHudTextCoord * fScale - vPos + vec2(16.0, 0) ), MESSAGE_SELECT, vFrontendImage );        \n            vPos.y += 16.0;\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_SKILL_4, vFrontendImage );        \n            vPos.y += 16.0;\n            PrintHudMessage( (vHudTextCoord * fScale - vPos ), MESSAGE_SKILL_5, vFrontendImage );        \n            vPos.y += 16.0;       \t\t        \n        }\n\t\t*/\n    }\n    \n    \n    vec2 vHudUV = vHudPixel / vResolution;\n    vec2 vSceneUV = vScenePixel / vResolution;\n    if ( fHudFade > fGameFade )\n    {\n        vResult.rgb = vRenderImage;\n\n        if ( vHudUV.y < 1.0 )\n        {\n            vResult.rgb = vFrontendImage;    \n        }\n    }\n    else\n    {\n        vResult.rgb = vFrontendImage;\n\n        if ( vSceneUV.y < 1.0 )\n        {\n\t        vResult.rgb = vRenderImage;\n        }\n    }\n    \n    if ( g_gameState.iMainState == MAIN_GAME_STATE_BOOT  ) \n    {\n        vResult.rgb = vec3( 0, 0, 0 );\n    }\n\n    //vResult *= 0.5 + 0.5 * mod(mod(floor(vScenePixel.x), 2.0) + mod(floor(vScenePixel.y), 2.0), 2.0);\n    \n\treturn vResult;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUV = fragCoord / iResolution.xy;\n    \n    vec2 vResolution = min( iResolution.xy, vec2( 320.0, 200.0 ) );\n    //vec2 vAspect = iResolution.xy;\n    vec2 vAspect = vec2( 4, 3 );\n    \n    vec2 vWindowUV = vUV;\n    float fXScale = (iResolution.x / iResolution.y) * (vAspect.y / vAspect.x);;\n    \n    vWindowUV.x = vWindowUV.x * fXScale + (1.0 - fXScale) * 0.5;\n    \n    \n// Full screen\n#if 0\n    vWindowUV = vUV;\n#endif  \n    \n// 1 : 1\n#if 0\n    vWindowUV = vUV * iResolution.xy / vResolution.xy;\n#endif    \n    \n    \n#ifdef SHOW_MAP_DATA\n    fragColor = texture( iChannel0, vUV); return;\n#endif // SHOW_MAP_DATA    \n\n    //fragColor = texture( iChannel1, vUV * 0.25 ); return;\n    \n#ifdef SHOW_SPRITES\n    fragColor = texture( iChannel2, vUV); return;\n#endif // SHOW_SPRITES\n        \n    //fragColor = texture( iChannel2, vUV); return;\n    //fragColor = texture( iChannel2, vUV * vec2(600,400) / iResolution.xy); return;\n      \n    fragColor = GameImage( vWindowUV, vResolution );\n    \n    \n    #ifdef QUANTIZE_FINAL_IMAGE\n    fragColor = Quantize(fragColor.rgb, 32.0);\n    #endif\n    \n    if ( false )\n    {\n\t   vec4 vSample = texture( iChannel2, vUV * 0.5 + vec2(0.0, 0) );\n    \tfragColor.rgb = mix( fragColor.rgb, vSample.rgb, vSample.a );\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define WRITE_GRID_DATA\n\n#define MAP_CHANNEL iChannel0\n#define STATE_CHANNEL iChannel1\n\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n// Common code follows\n\n#define NO_UNROLL(X) (X + min(0,iFrame))\n#define NO_UNROLLU(X) (X + uint(min(0,iFrame)))\n\n\n\nbool Map_PointInSector( sampler2D mapSampler, vec2 vPos, Sector sector )\n{\n    float fInOutTest = 0.0;\n    \n    for(int iSideDefIndex=0; iSideDefIndex< NO_UNROLL( sector.iSideDefCount ); iSideDefIndex++)\n    {        \n        SideDef sideDef = Map_ReadSideDefInfo( mapSampler, sector.iSectorId, iSideDefIndex );\n        \n        vec2 vPosToA = sideDef.vA - vPos;\n        vec2 vPosToB = sideDef.vB - vPos;\n        \n        if ( vPosToA.y > 0.0 && vPosToB.y > 0.0 )\n        \tcontinue;\n        if ( vPosToB.y <= 0.0 && vPosToA.y <= 0.0 )\n        \tcontinue;               \n        \n        float fCross = Cross2d( vPosToA, vPosToB );\n        if ( vPosToA.y > vPosToB.y )\n            fCross = -fCross;\n        if ( fCross < 0.0 )\n        {\n            fInOutTest++;\n        }        \n    }\n    \n    return mod( fInOutTest, 2.0 ) >= 1.0;    \n}\n\nbool Map_PointInSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos, int iSectorId )\n{\n    if ( !Map_ValidSectorId(mapInfo, iSectorId) )\n    {\n        return false;\n    }\n\n    Sector sector = Map_ReadSector( mapSampler, iSectorId );\n\n    return Map_PointInSector( mapSampler, vPos, sector );\n}\n\nint Map_SeekSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos )\n{    \n    for(int iSectorIndex=0; iSectorIndex<NO_UNROLL( mapInfo.iSectorCount ); iSectorIndex++)\n    {        \n        if ( Map_PointInSector( mapSampler, mapInfo, vPos, iSectorIndex ) )\n        {\n            return iSectorIndex;\n        }        \n    }\n\n    return SECTOR_NONE;\n}\n\n\nvoid Map_UpdateSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPrev, vec2 vPos, inout int iSectorId )\n{    \n    if ( vPrev == vPos )\n    {\n        return;\n    }\n    \n    if ( !Map_PointInSector( mapSampler, mapInfo, vPos, iSectorId ) )\n    {\n        int iNewSectorId = Map_SeekSector( mapSampler, mapInfo, vPos );\n        \n        if ( iNewSectorId != SECTOR_NONE )\n        {\n        \tiSectorId = iNewSectorId;\n        }                \n    }\n}\n\n///////////////////////////\n// Trace\n///////////////////////////\n\nTraceResult Map_Trace( sampler2D mapSampler, MapInfo mapInfo, vec3 vRayOrigin, vec3 vRayDir, int iSectorId, float fMaxDist )\n{\n    TraceResult result;\n    \n    result.iTexture = 0u;\n    result.vTexture = vec3(0.0);\n    result.fDist = 0.0;\n    result.fLightLevel = 0.0;\n    result.iSector = SECTOR_NONE;\n    \n    while(true)\n    {\n        if ( iSectorId == SECTOR_NONE )\n        {\n            break;\n        }\n        \n        Sector sector = Map_ReadSector( mapSampler, iSectorId );\n        \n        TraceSectorState sectorState;\n        sectorState.iNextSector = SECTOR_NONE;        \n        sectorState.fEnterDist = result.fDist;\n        sectorState.bNoUpper = false;\n        result.fDist = fMaxDist;\n        result.iSector = iSectorId;\n        \n        for(int iSideDefIndex=0; iSideDefIndex<NO_UNROLL( sector.iSideDefCount); iSideDefIndex++)\n        {\n            SideDef sideDef = Map_ReadSideDefInfo( mapSampler, iSectorId, iSideDefIndex );                        \n\n            TraceSideDef( mapSampler, vRayOrigin, vRayDir, result, sectorState, sector, sideDef );\n        }\n\n        // Test floor / ceiling\n        if ( sectorState.fExitY < sector.fFloorHeight )\n        {\n            result.fDist = (sector.fFloorHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vFloorPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vFloorPos.xz );\n            result.iTexture = sector.iFloorTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }\n        else\n        if ( sectorState.fExitY > sector.fCeilingHeight && !sectorState.bNoUpper )\n        {\n            result.fDist = (sector.fCeilingHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vCeilingPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vCeilingPos.xz );\n            result.iTexture = sector.iCeilingTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }        \n\n        iSectorId = sectorState.iNextSector;\n    }\n    \n    if ( result.iTexture == 1u )\n        result.fDist = FAR_CLIP;\n    \n    return result;\n}\n\n\n\n// End of common code\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n\n\n///////////////////////////////////////\n\n#define FONT_POS \tvec2(280,0)\n#define FONT_CHAR \tvec2(16,0)\n\nfloat NumFont_Rect( vec2 vPos, vec2 bl, vec2 tr )\n{\n\tif ( all( greaterThanEqual( vPos, bl ) ) &&\n        all( lessThanEqual( vPos, tr ) ) )\n    {\n        return 1.0;\n    }\n        \n    return 0.0;\n}     \n\n\nfloat NumFont_Pixel( vec2 vPos, vec2 vPixel )\n{\n    return NumFont_Rect( vPos, vPixel, vPixel );\n}\n\nfloat NumFont_Circle( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n    \n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(2, 2), vec2(10,12) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(4, 1), vec2(8,13) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 4), vec2(11,10) ));\n    \n    return fResult;\n}\n\nfloat NumFont_Zero( vec2 vTexCoord )\n{\n    float fResult = NumFont_Circle( vTexCoord );\n\n    float fHole = NumFont_Rect( vTexCoord, vec2(6, 4), vec2(6,10) );\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(5, 5), vec2(7,9) ) );\n\n    fResult = min( fResult, 1.0 - fHole );    \n\n    return fResult;\n}\n\nfloat NumFont_One( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n    \n    //fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(4, 1), vec2(8,13), fOutline ));\n    //fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(3, 2), vec2(3,4), fOutline ));\n    //fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(2, 3), vec2(2,4), fOutline ));\n    //fResult = max( fResult, NumFont_Pixel( vTexCoord, vec2(1, 4), fOutline ));\n    \n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(6, 1), vec2(10,13) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(5, 2), vec2(5,4) ));\n    fResult = max( fResult, NumFont_Pixel( vTexCoord, vec2(3, 4) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(4, 3), vec2(4,4.1) ));\n    \n\n    return fResult;\n}\n\nfloat NumFont_Two( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n    \n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(2, 1), vec2(9,3) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(3, 6), vec2(9,8) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 8), vec2(4,13) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 11), vec2(10,13) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(2, 7), vec2(10,7) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(8, 3), vec2(11,6) ));\n    fResult = max( fResult, NumFont_Pixel( vTexCoord, vec2(10, 2) ) );\n\n    return fResult;\n}\n\nfloat NumFont_Three( vec2 vTexCoord )\n{\n    float fResult = NumFont_Circle( vTexCoord );\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 1), vec2(8,13) ));\n\n    float fHole = NumFont_Rect( vTexCoord, vec2(-1, 4), vec2(7,5) );\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(-1, 9), vec2(7,10) ));\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(-1, 6), vec2(3,8) ));\n    \n    fResult = min( fResult, 1.0 - fHole );    \n    \n    return fResult;\n}\n\nfloat NumFont_Four( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n    \n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 1), vec2(4,8) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(8, 1), vec2(11,13) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 6), vec2(11,8) ));\n\n    return fResult;\n}\n\nfloat NumFont_Five( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 1), vec2(10,3) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 1), vec2(3,8) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 6), vec2(9,8) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(8, 7), vec2(10,12) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(8, 8), vec2(11,11) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 11), vec2(9,13) ));\n    \n    return fResult;\n}\n\nfloat NumFont_Six( vec2 vTexCoord )\n{\n    float fResult = NumFont_Circle( vTexCoord );\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(4, 1), vec2(11,13) ));\n\n    float fHole = NumFont_Rect( vTexCoord, vec2(5, 9), vec2(8,10) );\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(5, 4), vec2(17,5) ));\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(10, 6), vec2(17,6) ));\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(10, 13), vec2(17,13) ));\n\n    fResult = min( fResult, 1.0 - fHole );    \n    \n    return fResult;\n}\n\nfloat NumFont_Seven( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 1), vec2(11,3) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(8, 4), vec2(11,13) ));\n\n    float fHole = NumFont_Rect( vTexCoord, vec2(9, -1), vec2(17,1) );\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(11, -1), vec2(17,3) ));\n    fResult = min( fResult, 1.0 - fHole );    \n    \n    return fResult;\n}\n\nfloat NumFont_Eight( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(2, 1), vec2(10,13) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 2), vec2(11,12) ));\n    \n    float fHole = NumFont_Rect( vTexCoord, vec2(5, 4), vec2(7,5) );\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(5, 9), vec2(7,10) ));\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(-1, 6), vec2(1,8) ));\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(11, 6), vec2(17,8) ));\n    fHole = max( fHole, NumFont_Pixel( vTexCoord, vec2(2, 7) ));\n    fHole = max( fHole, NumFont_Pixel( vTexCoord, vec2(10, 7) ));\n\n    fResult = min( fResult, 1.0 - fHole );    \n    \n    return fResult;\n}\n\nfloat NumFont_Nine( vec2 vTexCoord )\n{\n    float fResult = NumFont_Circle( vTexCoord );\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 3), vec2(9,13) ));\n\n    float fHole = NumFont_Rect( vTexCoord, vec2(5, 4), vec2(7,5) );\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(-1, 9), vec2(7,10) ));\n    fHole = max( fHole, NumFont_Rect( vTexCoord, vec2(-1, 8), vec2(3,8) ));\n    fHole = max( fHole, NumFont_Pixel( vTexCoord, vec2(-1, 7) ));\n\n    fResult = min( fResult, 1.0 - fHole );    \n    \n    return fResult;\n}\n\nfloat NumFont_Percent( vec2 vTexCoord )\n{\n    float fResult = 0.0;\n    \n    vec2 vClosestRectMin;\n    vClosestRectMin.x = clamp( vTexCoord.x, 1.0, 11.0 );\n    vClosestRectMin.y = 12.0 - vClosestRectMin.x;\n    \n    vec2 vClosestRectMax = vClosestRectMin + vec2(0,3); \n    \n    vClosestRectMax.y = min( vClosestRectMax.y, 13.0 );\n    \n    fResult = max( fResult, NumFont_Rect( vTexCoord, vClosestRectMin, vClosestRectMax ));\n    \n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(1, 1), vec2(3,3) ));\n    fResult = max( fResult, NumFont_Rect( vTexCoord, vec2(9, 11), vec2(11,13) ));\n    \n    return fResult;\n}\n\nfloat NumFont_BinChar( vec2 vTexCoord, float fDigit )\n{\n    vTexCoord.y = 15. - vTexCoord.y;\n    vTexCoord = floor(vTexCoord);\n    if ( fDigit == 0.0 )\n    {\n\t\treturn NumFont_Zero( vTexCoord );\n    }\n    else\n    if ( fDigit == 1.0 )\n    {\n\t\treturn NumFont_One( vTexCoord );\n    }\n    else\n    if ( fDigit == 2.0 )\n    {\n\t\treturn NumFont_Two( vTexCoord );\n    }\n    else\n    if ( fDigit == 3.0 )\n    {\n\t\treturn NumFont_Three( vTexCoord );\n    }\n    else\n    if ( fDigit == 4.0 )\n    {\n\t\treturn NumFont_Four( vTexCoord );\n    }\n    else\n    if ( fDigit == 5.0 )\n    {\n\t\treturn NumFont_Five( vTexCoord );\n    }\n    else\n    if ( fDigit == 6.0 )\n    {\n\t\treturn NumFont_Six( vTexCoord );\n    }\n    else\n    if ( fDigit == 7.0 )\n    {\n\t\treturn NumFont_Seven( vTexCoord );\n    }\n    else\n    if ( fDigit == 8.0 )\n    {\n\t\treturn NumFont_Eight( vTexCoord );\n    }\n    else\n    if ( fDigit == 9.0 )\n    {\n\t\treturn NumFont_Nine( vTexCoord );\n    }\n    else\n    if ( fDigit == 10.0 )\n    {\n\t\treturn NumFont_Percent( vTexCoord );\n    }\n        \n    return 0.0;\n}\n\n\nvec4 NumFont_Char( vec2 vTexCoord, float fDigit )\n{\n    float fOutline = 0.0;\n    float f00 = NumFont_BinChar( vTexCoord + vec2(-1,-1), fDigit );\n    float f10 = NumFont_BinChar( vTexCoord + vec2( 0,-1), fDigit );\n    float f20 = NumFont_BinChar( vTexCoord + vec2( 1,-1), fDigit );\n        \n    float f01 = NumFont_BinChar( vTexCoord + vec2(-1, 0), fDigit );\n    float f11 = NumFont_BinChar( vTexCoord + vec2( 0, 0), fDigit );\n    float f21 = NumFont_BinChar( vTexCoord + vec2( 1, 0), fDigit );\n        \n    float f02 = NumFont_BinChar( vTexCoord + vec2(-1, 1), fDigit );\n    float f12 = NumFont_BinChar( vTexCoord + vec2( 0, 1), fDigit );\n    float f22 = NumFont_BinChar( vTexCoord + vec2( 1, 1), fDigit );\n        \n    float fn1 = NumFont_BinChar( vTexCoord + vec2(-2, 0), fDigit );\n    float fn2 = NumFont_BinChar( vTexCoord + vec2(-2, 1), fDigit );\n    \n    float fn3 = NumFont_BinChar( vTexCoord + vec2(-2, 2), fDigit );\n    float f03 = NumFont_BinChar( vTexCoord + vec2(-1, 2), fDigit );\n    float f13 = NumFont_BinChar( vTexCoord + vec2( 0, 2), fDigit );\n        \n    float fOutlineI = min( 1.0, f00 + f10 + f20 + f01 + f11 + f21 + f02 + f12 + f22 );\n    float fShadow = min( 1.0, fn1 + f01 + f21 + fn2 + f02 + f12 + fn3 + f03 + f13 );\n\n    float nx = f00 * -1.0 + f20 * 1.0\n             + f01 * -2.0 + f21 * 2.0\n         \t + f02 * -1.0 + f22 * 1.0;\n        \n    float ny = f00 * -1.0 + f02 * 1.0\n             + f10 * -2.0 + f12 * 2.0\n         \t + f20 * -1.0 + f22 * 1.0;\n    \n    vec3 n = normalize( vec3( nx, ny, 0.1 ) );\n    \n    vec3 vLight = normalize( vec3( 0.5, -1.0, 0.5 ) );\n    \n    float NdotL = dot( n, vLight ) * 0.25 + 0.75;\n    NdotL = sqrt(NdotL);\n    \n    if ( (fOutlineI + fShadow) <= 0.0 )\n    {\n        return vec4(0.0);\n    }\n\n    vec4 vResult = vec4(1.0);\n    \n    if ( fShadow > 0.0 )\n    {\n        vResult.xyz = vec3(0.2);\n    }\n\n    if ( fOutlineI > 0.0 )\n    {\n\t    vec3 vDiff = vec3(0.5,0,0);\n        \n        if ( f11 > 0.0 )\n        {\n            vDiff = vec3(1,0,0) * NdotL;\n        }\n        vResult.rgb = vDiff;\n    }\n    \n    return vResult;\n}\n\n///////////////////////////////////////\n\n\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n// Start of Font code\n\nconst ivec3 _SPACE_ = ivec3(0,0,5);\nconst ivec3 _EXCLAMATION_ = ivec3(49539,384,4);\nconst ivec3 _QUOTE_ = ivec3(2331,0,7);\nconst ivec3 _HASH_ = ivec3(167818,1311,7);\nconst ivec3 _DOLLAR_ = ivec3(508575,69524,7);\nconst ivec3 _PERCENT_ = ivec3(232984,4487,8);\nconst ivec3 _AMPERSAND_ = ivec3(249630,8095,8);\nconst ivec3 _APOSTROPHE_ = ivec3(259,0,4);\nconst ivec3 _L_PAREN_ = ivec3(115614,3847,7);\nconst ivec3 _R_PAREN_ = ivec3(462351,1948,7);\nconst ivec3 _ASTERISK_ = ivec3(509700,526,7);\nconst ivec3 _PLUS_ = ivec3(114944,2,5);\nconst ivec3 _COMMA_ = ivec3(0,33152,4);\nconst ivec3 _MINUS_ = ivec3(245760,0,6);\nconst ivec3 _PERIOD_ = ivec3(0,384,4);\nconst ivec3 _SLASH_ = ivec3(232984,391,7);\nconst ivec3 _0_ = ivec3(843678,3903,8);\nconst ivec3 _1_ = ivec3(99206,774,5);\nconst ivec3 _2_ = ivec3(1039935,8067,8);\nconst ivec3 _3_ = ivec3(1023007,4024,8);\nconst ivec3 _4_ = ivec3(511387,3096,7);\nconst ivec3 _5_ = ivec3(508319,3998,7);\nconst ivec3 _6_ = ivec3(1033150,7987,8);\nconst ivec3 _7_ = ivec3(793663,6192,8);\nconst ivec3 _8_ = ivec3(498111,8115,8);\nconst ivec3 _9_ = ivec3(1038751,4024,8);\nconst ivec3 _COLON_ = ivec3(3,384,4);\nconst ivec3 _SEMICOLON_ = ivec3(384,33152,4);\nconst ivec3 _LESSTHAN_ = ivec3(98816,66307,5);\nconst ivec3 _EQUALS_ = ivec3(114688,896,5);\nconst ivec3 _GREATERTHAN_ = ivec3(49280,16774,5);\nconst ivec3 _QUESTION_MARK_ = ivec3(925568,114751,8);\nconst ivec3 _AT_ = ivec3(1532350,65237,9);\nconst ivec3 _A_ = ivec3(1038782,6579,8);\nconst ivec3 _B_ = ivec3(515135,8123,8);\nconst ivec3 _C_ = ivec3(115646,7943,8);\nconst ivec3 _D_ = ivec3(842783,4027,8);\nconst ivec3 _E_ = ivec3(1034174,7951,8);\nconst ivec3 _F_ = ivec3(508863,387,8);\nconst ivec3 _G_ = ivec3(902078,7991,8);\nconst ivec3 _H_ = ivec3(1038771,6579,8);\nconst ivec3 _I_ = ivec3(49539,387,4);\nconst ivec3 _J_ = ivec3(792624,8120,8);\nconst ivec3 _K_ = ivec3(249267,6555,8);\nconst ivec3 _L_ = ivec3(49539,8071,8);\nconst ivec3 _M_ = ivec3(2096099,12779,9);\nconst ivec3 _N_ = ivec3(1039287,7615,8);\nconst ivec3 _O_ = ivec3(843678,3903,8);\nconst ivec3 _P_ = ivec3(1039423,387,8);\nconst ivec3 _Q_ = ivec3(843678,790335,8);\nconst ivec3 _R_ = ivec3(515135,6587,8);\nconst ivec3 _S_ = ivec3(508319,3992,7);\nconst ivec3 _T_ = ivec3(198207,1548,8);\nconst ivec3 _U_ = ivec3(842163,3903,8);\nconst ivec3 _V_ = ivec3(232859,526,7);\nconst ivec3 _W_ = ivec3(2094563,15359,9);\nconst ivec3 _X_ = ivec3(466807,15294,9);\nconst ivec3 _Y_ = ivec3(498099,1548,8);\nconst ivec3 _Z_ = ivec3(232991,3975,7);\nconst ivec3 _L_SQUARE_BRACKET_ = ivec3(49543,899,5);\nconst ivec3 _BACKSLASH_ = ivec3(230275,3100,7);\nconst ivec3 _R_SQUARE_BRACKET_ = ivec3(99079,902,5);\nconst ivec3 _CARET_ = ivec3(444164,0,7);\nconst ivec3 _UNDERSCORE_ = ivec3(0,1032192,8);\n\nfloat Font_DecodeBitmap( vec2 vCoord, ivec3 vCharacter )\n{\n    vCoord = floor( vCoord );\n\n    int iRow = int(vCoord.y) - 1;\n    int iCol = int(vCoord.x) - 1;\n    \n    if ( iRow < 0 || iRow >= 6 ) return 0.0;\n    if ( iCol < 0 || iCol >= 7 ) return 0.0;\n    \n    int iRowBits = 0;\n        \n   \tif ( iRow == 0 ) \t\t\tiRowBits = vCharacter.x;\n    else  if ( iRow == 1 ) \t\tiRowBits = vCharacter.x / 128;\n    else  if ( iRow == 2 ) \t\tiRowBits = vCharacter.x / 16384;\n    else  if ( iRow == 3 ) \t\tiRowBits = vCharacter.y;\n    else  if ( iRow == 4 ) \t\tiRowBits = vCharacter.y / 128;\n    else \t\t\t\t\t\tiRowBits = vCharacter.y / 16384;\n      \n    return (iRowBits & (1 << iCol )) == 0 ? 0.0 : 1.0;\n}\n\n\nstruct PrintState\n{\n    vec2 vTexCoord;\n    vec2 vOrigin;\n    vec2 vPos;\n    \n    vec3 vColor;\n    vec3 vOutline;\n};\n    \nvoid Print_MoveTo( inout PrintState printState, vec2 vPos )\n{\n    printState.vOrigin = printState.vTexCoord - vPos;\n    printState.vPos = printState.vOrigin;\n}\n\nvoid Print_Newline( inout PrintState printState )\n{\n    printState.vPos.x = printState.vOrigin.x;\n    printState.vPos.y -= 8.0;\n}\n\nvoid Print_Color( inout PrintState printState, vec3 vColor )\n{\n    printState.vColor = vColor;\n}\n\nvoid Print_Init( out PrintState printState, vec2 vTexCoord )\n{\n    printState.vTexCoord = vTexCoord;        \n    printState.vOrigin = vTexCoord;\n    printState.vPos = vTexCoord;\n    printState.vColor = vec3(1,0,0);\n    printState.vOutline = vec3(.3,0,0);\n    Print_MoveTo( printState, vec2(0) ); \n}\n\nvoid Print_Space( inout PrintState printState )\n{\n    printState.vPos.x -= 5.0;\n}\n\nbool Print_Test( inout PrintState printState, ivec3 vCharacter, float fSpacing )\n{\n    if ( vCharacter.z == -1 )\n    {\n        Print_MoveTo( printState, vec2(vCharacter.xy) );\n        return false;\n    }\n    \n    if ( printState.vPos.x < float(vCharacter.z) )\n        return true;\n         \n\tprintState.vPos.x -= float(vCharacter.z) + fSpacing;\n    return false;\n}\n\nvoid Print_Char( inout PrintState printState, inout vec3 vResult, ivec3 vCharacter )\n{\n    float fBitmap = Font_DecodeBitmap( printState.vPos, vCharacter );\n    if ( fBitmap > 0.0 ) vResult = printState.vColor;\n    \n    printState.vPos.x -= float(vCharacter.z - 1);\n}\n\nvoid Print_HudChar( inout PrintState printState, inout vec3 vResult, ivec3 vCharacter )\n{\n    float fBitmap = Font_DecodeBitmap( printState.vPos, vCharacter );\n    float fShadow = Font_DecodeBitmap( printState.vPos - vec2( 1, 1), vCharacter );\n\n    if ( fBitmap > 0.0 ) vResult = printState.vColor * 0.5 + 0.5 * (printState.vPos.y / 8.);\n    else if ( fShadow > 0.0 ) vResult *= 0.5;\n    \n    printState.vPos.x -= float(vCharacter.z);\n}\n\nvoid Print_FancyChar( inout PrintState printState, inout vec3 vResult, ivec3 vCharacter )\n{\n    float fBitmapTL = Font_DecodeBitmap( printState.vPos - vec2(-1,-1), vCharacter );\n    float fBitmapTC = Font_DecodeBitmap( printState.vPos - vec2( 0,-1), vCharacter );\n    float fBitmapTR = Font_DecodeBitmap( printState.vPos - vec2( 1,-1), vCharacter );\n\n    float fBitmapCL = Font_DecodeBitmap( printState.vPos - vec2(-1, 0), vCharacter );\n    float fBitmapCC = Font_DecodeBitmap( printState.vPos - vec2( 0, 0), vCharacter );\n    float fBitmapCR = Font_DecodeBitmap( printState.vPos - vec2( 1, 0), vCharacter );\n    \n    float fBitmapBL = Font_DecodeBitmap( printState.vPos - vec2(-1, 1), vCharacter );\n    float fBitmapBC = Font_DecodeBitmap( printState.vPos - vec2( 0, 1), vCharacter );\n    float fBitmapBR = Font_DecodeBitmap( printState.vPos - vec2( 1, 1), vCharacter );\n    \n    float fOutline \t= min( 1., fBitmapTL + fBitmapTC + fBitmapTR + fBitmapCL + fBitmapCR + fBitmapBL + fBitmapBC + fBitmapBR );    \n    float fShade = (fBitmapTL * .5 - fBitmapBR * .5 ) + 0.5;\n    \n    if ( fBitmapCC > 0.0 ) vResult = printState.vColor * (fShade * 0.25 + 0.75);\n    else\n    if ( fOutline > 0.0 ) vResult = printState.vOutline;\n    \n    printState.vPos.x -= float(vCharacter.z);\n}\n\n// End of font code\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n\n\nivec3 GetMessageChar( int iMessage, int iChar )\n{\n\t#define MESSAGE_CHAR(X) if ( iChar == 0 ) return X; iChar--\n    \n    if (iMessage == MESSAGE_HUD_TEXT)\n    {\n        MESSAGE_CHAR( ivec3(6,0, -1) ); // MOVE\n\n        MESSAGE_CHAR( _A_ );\n        MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _O_ );\n\n        MESSAGE_CHAR( ivec3(52,0, -1) ); // MOVE\n\n        MESSAGE_CHAR( _H_ );\n        MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _A_ );\n        MESSAGE_CHAR( _L_ );\n        MESSAGE_CHAR( _T_ );\n        MESSAGE_CHAR( _H_ );\n\n        MESSAGE_CHAR( ivec3(109,0, -1) ); // MOVE\n\n        MESSAGE_CHAR( _A_ );\n        MESSAGE_CHAR( _R_ );\n        MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _S_ );\n\n        MESSAGE_CHAR( ivec3(187,0, -1) ); // MOVE\n\n        MESSAGE_CHAR( _A_ );\n        MESSAGE_CHAR( _R_ );\n        MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _R_ );        \n    }\n    else\n    if (iMessage == MESSAGE_CHOOSE_SKILL )\n    {\n        MESSAGE_CHAR( _C_ ); MESSAGE_CHAR( _H_ );MESSAGE_CHAR( _O_ ); MESSAGE_CHAR( _O_ ); MESSAGE_CHAR( _S_ ); MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _S_ ); MESSAGE_CHAR( _K_ );MESSAGE_CHAR( _I_ ); MESSAGE_CHAR( _L_ ); MESSAGE_CHAR( _L_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _L_ ); MESSAGE_CHAR( _E_ );MESSAGE_CHAR( _V_ ); MESSAGE_CHAR( _E_ ); MESSAGE_CHAR( _L_ );\n        MESSAGE_CHAR( _COLON_ );\n    }\n    else\n    if (iMessage == MESSAGE_SKILL_1 )\n    {\n        MESSAGE_CHAR( _I_ ); MESSAGE_CHAR( _APOSTROPHE_ );MESSAGE_CHAR( _M_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _T_ ); MESSAGE_CHAR( _O_ );MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _Y_ ); MESSAGE_CHAR( _O_ );MESSAGE_CHAR( _U_ ); MESSAGE_CHAR( _N_ ); MESSAGE_CHAR( _G_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _T_ ); MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _D_ ); MESSAGE_CHAR( _I_ );MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _PERIOD_ );\n    }\n    else\n    if (iMessage == MESSAGE_SKILL_2 )\n    {\n        MESSAGE_CHAR( _H_ ); MESSAGE_CHAR( _E_ );MESSAGE_CHAR( _Y_ );\n        MESSAGE_CHAR( _COMMA_ );MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _N_ ); MESSAGE_CHAR( _O_ );MESSAGE_CHAR( _T_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _T_ ); MESSAGE_CHAR( _O_ );MESSAGE_CHAR( _O_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _R_ ); MESSAGE_CHAR( _O_ );MESSAGE_CHAR( _U_ ); MESSAGE_CHAR( _G_ ); MESSAGE_CHAR( _H_ );\n        MESSAGE_CHAR( _PERIOD_ );\n    }\n    else\n    if (iMessage == MESSAGE_SKILL_3 )\n    {\n        MESSAGE_CHAR( _H_ ); MESSAGE_CHAR( _U_ );MESSAGE_CHAR( _R_ );MESSAGE_CHAR( _T_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _M_ );MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _SPACE_ );\n        MESSAGE_CHAR( _P_ ); MESSAGE_CHAR( _L_ );MESSAGE_CHAR( _E_ ); MESSAGE_CHAR( _N_ ); MESSAGE_CHAR( _T_ ); MESSAGE_CHAR( _Y_ );\n        MESSAGE_CHAR( _PERIOD_ );\n    }\n    else\n    if (iMessage == MESSAGE_SKILL_4 )\n    {\n        MESSAGE_CHAR( _U_ ); MESSAGE_CHAR( _L_ );MESSAGE_CHAR( _T_ );MESSAGE_CHAR( _R_ );MESSAGE_CHAR( _A_ );\n        MESSAGE_CHAR( _MINUS_ );\n        MESSAGE_CHAR( _V_ ); MESSAGE_CHAR( _I_ );MESSAGE_CHAR( _O_ );MESSAGE_CHAR( _L_ );MESSAGE_CHAR( _E_ );MESSAGE_CHAR( _N_ );MESSAGE_CHAR( _C_ );MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _PERIOD_ );\n    }\n    else\n    if (iMessage == MESSAGE_SKILL_5 )\n    {\n        MESSAGE_CHAR( _N_ ); MESSAGE_CHAR( _I_ );MESSAGE_CHAR( _G_ );MESSAGE_CHAR( _H_ );MESSAGE_CHAR( _T_ );MESSAGE_CHAR( _M_ );MESSAGE_CHAR( _A_ );MESSAGE_CHAR( _R_ );MESSAGE_CHAR( _E_ );\n        MESSAGE_CHAR( _EXCLAMATION_ );\n    }\n    else\n    if (iMessage == MESSAGE_HANGAR )\n    {\n        MESSAGE_CHAR( _H_ ); MESSAGE_CHAR( _A_ );MESSAGE_CHAR( _N_ );MESSAGE_CHAR( _G_ );MESSAGE_CHAR( _A_ );MESSAGE_CHAR( _R_ );\n    }\n    else\n    if (iMessage == MESSAGE_FINISHED )\n    {\n        MESSAGE_CHAR( _F_ ); MESSAGE_CHAR( _I_ );MESSAGE_CHAR( _N_ );MESSAGE_CHAR( _I_ );MESSAGE_CHAR( _S_ );MESSAGE_CHAR( _H_ );MESSAGE_CHAR( _E_ );MESSAGE_CHAR( _D_ );\n    }\n    else\n    if (iMessage == MESSAGE_KILLS )\n    {\n        MESSAGE_CHAR( _K_ ); MESSAGE_CHAR( _I_ );MESSAGE_CHAR( _L_ );MESSAGE_CHAR( _L_ );MESSAGE_CHAR( _S_ );\n    }\n    else\n    if (iMessage == MESSAGE_ITEMS )\n    {\n        MESSAGE_CHAR( _I_ ); MESSAGE_CHAR( _T_ );MESSAGE_CHAR( _E_ );MESSAGE_CHAR( _M_ );MESSAGE_CHAR( _S_ );\n    }\n    else\n    if (iMessage == MESSAGE_SECRET )\n    {\n        MESSAGE_CHAR( _S_ ); MESSAGE_CHAR( _E_ );MESSAGE_CHAR( _C_ );MESSAGE_CHAR( _R_ );MESSAGE_CHAR( _E_ );MESSAGE_CHAR( _T_ );\n    }\n    else\n    if (iMessage == MESSAGE_TIME )\n    {\n        MESSAGE_CHAR( _T_ ); MESSAGE_CHAR( _I_ );MESSAGE_CHAR( _M_ );MESSAGE_CHAR( _E_ );\n    }\n    else\n    if (iMessage == MESSAGE_SELECT )\n    {\n        MESSAGE_CHAR( _ASTERISK_ );\n    }\n    else\n    {    \n        if ( iMessage == MESSAGE_HEALTH_BONUS ||\n            iMessage == MESSAGE_ARMOR_BONUS || \n            iMessage == MESSAGE_GREENARMOR || \n            iMessage == MESSAGE_BLUEARMOR ||\n            iMessage == MESSAGE_STIMPACK ||\n           iMessage == MESSAGE_MEDIKIT)\n        {\n            MESSAGE_CHAR( _P_ );\n            MESSAGE_CHAR( _I_ );\n            MESSAGE_CHAR( _C_ );\n            MESSAGE_CHAR( _K_ );\n            MESSAGE_CHAR( _E_ );\n            MESSAGE_CHAR( _D_ );\n\n            MESSAGE_CHAR( _SPACE_ );\n\n            MESSAGE_CHAR( _U_ );\n            MESSAGE_CHAR( _P_ );\n\n            MESSAGE_CHAR( _SPACE_ );\n        }\n        else\n        if( iMessage == MESSAGE_SHOTGUN )\n        {\n            MESSAGE_CHAR( _Y_ );\n            MESSAGE_CHAR( _O_ );\n            MESSAGE_CHAR( _U_ );\n\n            MESSAGE_CHAR( _SPACE_ );\n\n            MESSAGE_CHAR( _G_ );\n            MESSAGE_CHAR( _O_ );\n            MESSAGE_CHAR( _T_ );\n\n            MESSAGE_CHAR( _SPACE_ );\n        }\n\n\n        if ( iMessage == MESSAGE_HEALTH_BONUS || iMessage == MESSAGE_ARMOR_BONUS || iMessage == MESSAGE_STIMPACK || iMessage == MESSAGE_MEDIKIT)\n        {    \n            MESSAGE_CHAR( _A_ );\n            if ( iMessage == MESSAGE_ARMOR_BONUS )\n            {    \n                MESSAGE_CHAR( _N_ );\n            }\n            MESSAGE_CHAR( _SPACE_ );\n        }\n        else if ( iMessage == MESSAGE_GREENARMOR ||\n                iMessage == MESSAGE_BLUEARMOR || \n                iMessage == MESSAGE_SHOTGUN )\n        {\n            MESSAGE_CHAR( _T_ );\n            MESSAGE_CHAR( _H_ );\n            MESSAGE_CHAR( _E_ );\n\n            MESSAGE_CHAR( _SPACE_ );\n        }\n\n        if ( iMessage == MESSAGE_BLUEARMOR )\n        {\n            MESSAGE_CHAR( _M_ );\n            MESSAGE_CHAR( _E_ );\n            MESSAGE_CHAR( _G_ );\n            MESSAGE_CHAR( _A_ );\n        }\n\n        if( iMessage == MESSAGE_SHOTGUN )\n        {\n            MESSAGE_CHAR( _S_ );\n            MESSAGE_CHAR( _H_ );\n            MESSAGE_CHAR( _O_ );\n            MESSAGE_CHAR( _T_ );\n            MESSAGE_CHAR( _G_ );\n            MESSAGE_CHAR( _U_ );\n            MESSAGE_CHAR( _N_ );\n        }\n\n        if ( iMessage == MESSAGE_HEALTH_BONUS )\n        {    \n            MESSAGE_CHAR( _H_ );\n            MESSAGE_CHAR( _E_ );\n            MESSAGE_CHAR( _A_ );\n            MESSAGE_CHAR( _L_ );\n            MESSAGE_CHAR( _T_ );\n            MESSAGE_CHAR( _H_ );\n        }\n        else if ( iMessage == MESSAGE_ARMOR_BONUS || iMessage == MESSAGE_GREENARMOR || iMessage == MESSAGE_BLUEARMOR)\n        {    \n            MESSAGE_CHAR( _A_ );\n            MESSAGE_CHAR( _R_ );\n            MESSAGE_CHAR( _M_ );\n            MESSAGE_CHAR( _O_ );\n            MESSAGE_CHAR( _R_ );\n        }\n        else if ( iMessage == MESSAGE_MEDIKIT )\n        {    \n            MESSAGE_CHAR( _M_ );\n            MESSAGE_CHAR( _E_ );\n            MESSAGE_CHAR( _D_ );\n            MESSAGE_CHAR( _I_ );\n            MESSAGE_CHAR( _K_ );\n            MESSAGE_CHAR( _I_ );\n            MESSAGE_CHAR( _T_ );\n        }\n        else if ( iMessage == MESSAGE_STIMPACK )\n        {\n            MESSAGE_CHAR( _S_ );\n            MESSAGE_CHAR( _T_ );\n            MESSAGE_CHAR( _I_ );\n            MESSAGE_CHAR( _M_ );\n            MESSAGE_CHAR( _P_ );\n            MESSAGE_CHAR( _A_ );\n            MESSAGE_CHAR( _C_ );\n            MESSAGE_CHAR( _K_ );\n        }\n\n        if ( iMessage == MESSAGE_HEALTH_BONUS || iMessage == MESSAGE_ARMOR_BONUS)\n        {    \n            MESSAGE_CHAR( _SPACE_ );\n\n            MESSAGE_CHAR( _B_ );\n            MESSAGE_CHAR( _O_ );\n            MESSAGE_CHAR( _N_ );\n            MESSAGE_CHAR( _U_ );\n            MESSAGE_CHAR( _S_ );\n        }\n\n        if ( iMessage == MESSAGE_BLUEARMOR || iMessage == MESSAGE_SHOTGUN )\n        {\n            MESSAGE_CHAR( _EXCLAMATION_ );\n        }\n        else\n        {\n            MESSAGE_CHAR( _PERIOD_ );\n        }   \n    }\n    \n    return ivec3(0.0);\n}\n\nvoid PrintHudMessage( vec2 vTexCoord, int iMessage, inout vec3 vResult )\n{\n    if ( vTexCoord.y > 8.0 )\n        return;\n\n    if ( iMessage >= MESSAGE_COUNT )\n        return;\n    \n    // Message text\n    PrintState printState;\n    Print_Init( printState, vTexCoord );\n\n    // Fixed size font\n    //float fCharIndex = floor( printState.vPos.x / 8. );\n    //printState.vPos.x -= fCharIndex * 8.0;\n    //vec3 vChar = GetMessageChar( fMessage, fCharIndex );\n    \n    ivec3 vChar = _SPACE_;\n    for ( int i=0; i<NO_UNROLL( 26 ); i++)\n    {\n        vChar = GetMessageChar( iMessage, i );\n        if ( Print_Test( printState, vChar, 0.0 ) )\n        {\n            break;\n        }\n        if ( vChar.z == 0 )\n            break;\n    }\n        \n    if ( iMessage == MESSAGE_HUD_TEXT || iMessage == MESSAGE_HANGAR )\n    {\n\t\tPrint_Color( printState, vec3(1. ) );        \n    \tPrint_HudChar( printState, vResult, vChar );\n    }\n    else\n    {\n    \tPrint_FancyChar( printState, vResult, vChar );\n    }\n}\n\n// Constant Data\n\n///////////////////////////////////\n\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n#define GRID_POS \t\tvec2(244,32)\n#define GRID_SIZE \t\tvec2(256,256)\n#define GRID_WORLD_MIN\tvec2(-780,-4900)\n#define GRID_WORLD_MAX\tvec2(3820,-2060)\n\nbool LineInGridCell( vec2 vA, vec2 vB, vec2 vGridCellMin, vec2 vGridCellMax )\n{\n    vec2 vAB = vB - vA;\n    \n    // Check if box crosses line\n\n    float fCross0 = Cross2d( vAB, vec2(vGridCellMin.x, vGridCellMin.y) - vA );\n    float fCross1 = Cross2d( vAB, vec2(vGridCellMax.x, vGridCellMin.y) - vA );\n    float fCross2 = Cross2d( vAB, vec2(vGridCellMin.x, vGridCellMax.y) - vA );\n    float fCross3 = Cross2d( vAB, vec2(vGridCellMax.x, vGridCellMax.y) - vA );\n       \n    if ( fCross0 < 0.0 && fCross1 < 0.0 && fCross2 < 0.0 && fCross3 < 0.0 )\n        return false;\n\n    if ( fCross0 > 0.0 && fCross1 > 0.0 && fCross2 > 0.0 && fCross3 > 0.0 )\n        return false;\n           \n    // Check if line projection crosses box\n\n    vec2 vLineMin = min( vA, vB );\n    vec2 vLineMax = max( vA, vB );\n\n    if ( vLineMin.x > vGridCellMax.x ) return false;\n    if ( vLineMin.y > vGridCellMax.y ) return false;\n    if ( vLineMax.x < vGridCellMin.x ) return false;\n    if ( vLineMax.y < vGridCellMin.y ) return false;\n    \n    return true;\n}\n\nbool Map_SectorInGridCell( sampler2D mapSampler, MapInfo mapInfo, vec2 vGridCellMin, vec2 vGridCellMax, int iSectorId )\n{\n    Sector sector;\n    \n    sector = Map_ReadSector( mapSampler, iSectorId );\n    \n    float fInOutTest = 0.0;\n    \n    for(int iSideDefIndex=0; iSideDefIndex<NO_UNROLL( MAX_SIDEDEF_COUNT ); iSideDefIndex++)\n    {        \n        SideDef sideDef = Map_ReadSideDefInfo( mapSampler, sector.iSectorId, iSideDefIndex );                        \n        \n        if ( sideDef.fLength <= 0.0)\n        {\n            break;\n        }\n\n        if ( LineInGridCell( sideDef.vA, sideDef.vB, vGridCellMin, vGridCellMax ) )\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nvec4 GetGridData( sampler2D mapSampler, vec2 vGridCellWorldMin, vec2 vGridCellWorldMax )\n{\n    MapInfo mapInfo = ReadMapInfo( mapSampler );\n    \n    int sectorCount = 0;\n    int gridSectors[8];\n        \n\tgridSectors[0] = -1;\n    gridSectors[1] = -1;\n    gridSectors[2] = -1;\n    gridSectors[3] = -1;\n    gridSectors[4] = -1;\n    gridSectors[5] = -1;\n    gridSectors[6] = -1;\n    gridSectors[7] = -1;\n    \n    //gridSectors[0] = Map_SeekSector( mapInfo, vGridCellWorldMin ); \n    \n\tint foundIndex = 0;\n    for(int iSectorIndex=0; iSectorIndex<NO_UNROLL( MAX_SECTOR_COUNT ); iSectorIndex++)\n    {\n        if ( !Map_ValidSectorId( mapInfo, iSectorIndex ) )\n        {\n            break;\n        }\n\n        if ( foundIndex > 7 )\n        {\n            break;\n        }\n        \n        if ( Map_SectorInGridCell( mapSampler, mapInfo, vGridCellWorldMin, vGridCellWorldMax, iSectorIndex ) )\n        {\n            if ( foundIndex == 0 ) gridSectors[0] = iSectorIndex;\n            if ( foundIndex == 1 ) gridSectors[1] = iSectorIndex;\n            if ( foundIndex == 2 ) gridSectors[2] = iSectorIndex;\n            if ( foundIndex == 3 ) gridSectors[3] = iSectorIndex;\n            if ( foundIndex == 4 ) gridSectors[4] = iSectorIndex;\n            if ( foundIndex == 5 ) gridSectors[5] = iSectorIndex;\n            if ( foundIndex == 6 ) gridSectors[6] = iSectorIndex;\n            if ( foundIndex == 7 ) gridSectors[7] = iSectorIndex;\n            foundIndex++;\n        }        \n    }\n    \n\n    vec4 gridDataPacked;\n    gridDataPacked.x = BytePack2( vec2( gridSectors[0], gridSectors[1] ) + 1. );\n    gridDataPacked.y = BytePack2( vec2( gridSectors[2], gridSectors[3] ) + 1. );\n    gridDataPacked.z = BytePack2( vec2( gridSectors[4], gridSectors[5] ) + 1. );\n    gridDataPacked.w = BytePack2( vec2( gridSectors[6], gridSectors[7] ) + 1. );\n    \n    return gridDataPacked;\n}\n\n#define PACK_DATA(A,B,C,D) ( A + (B<<8) + (C<<16) + (D<<24) )\n#define UNPACK_DATA(X) uvec4( X & 0xffu, (X>>8u)&0xffu, (X>>16u)&0xffu, (X>>24u)&0xffu )\n\n\t\t// Textures\n\t\t#define TEX_X 0u\n\t\t#define TEX_F_SKY1 1u\n\t\t#define TEX_NUKAGE3 2u\n\t\t#define TEX_FLOOR7_1 3u\n\t\t#define TEX_FLOOR4_8 4u\n\t\t#define TEX_CEIL5_1 5u\n\t\t#define TEX_FLAT5_5 6u\n\t\t#define TEX_FLAT20 7u\n\t\t#define TEX_FLOOR5_1 8u\n\t\t#define TEX_CEIL5_2 9u\n\t\t#define TEX_CEIL3_5 10u\n\t\t#define TEX_TLITE6_5 11u\n\t\t#define TEX_FLAT14 12u\n\t\t#define TEX_FLAT18 13u\n\t\t#define TEX_TLITE6_4 14u\n\t\t#define TEX_FLOOR7_2 15u\n\t\t#define TEX_STEP2 16u\n\t\t#define TEX_TLITE6_1 17u\n\t\t#define TEX_FLOOR1_1 18u\n\t\t#define TEX_FLOOR5_2 19u\n\t\t#define TEX_FLOOR6_2 20u\n\t\t#define TEX_FLAT23 21u\n\t\t#define TEX_TLITE6_6 22u\n\t\t#define TEX_DOOR3 23u\n\t\t#define TEX_LITE3 24u\n\t\t#define TEX_STARTAN3 25u\n\t\t#define TEX_BROWN1 26u\n\t\t#define TEX_DOORSTOP 27u\n\t\t#define TEX_COMPUTE2 28u\n\t\t#define TEX_STEP6 29u\n\t\t#define TEX_BROWN144 30u\n\t\t#define TEX_SUPPORT2 31u\n\t\t#define TEX_STARG3 32u\n\t\t#define TEX_DOORTRAK 33u\n\t\t#define TEX_SLADWALL 34u\n\t\t#define TEX_TEKWALL4 35u\n\t\t#define TEX_SW1COMP 36u\n\t\t#define TEX_BIGDOOR2 37u\n\t\t#define TEX_STARGR1 38u\n\t\t#define TEX_BROWNGRN 39u\n\t\t#define TEX_NUKE24 40u\n\t\t#define TEX_BROWN96 41u\n\t\t#define TEX_BRNBIGR 42u\n\t\t#define TEX_BRNBIGL 43u\n\t\t#define TEX_BRNBIGC 44u\n\t\t#define TEX_STARTAN1 45u\n\t\t#define TEX_EXITDOOR 46u\n\t\t#define TEX_SW1STRTN 47u\n\t\t#define TEX_BIGDOOR4 48u\n\t\t#define TEX_EXITSIGN 49u\n\t\t#define TEX_TEKWALL1 50u\n\t\t#define TEX_COMPTALL 51u\n\t\t#define TEX_COMPSPAN 52u\n\t\t#define TEX_PLANET1 53u\n\t\t#define TEX_COMPTILE 54u\n\t\t#define TEX_STEP1 55u\n\t\t#define TEX_COMPUTE3 56u\n        \n\t\tstruct DataSideDefPacked\n        {\n            uint A;\n            uint B;\n            uint packed0;\n            uint packed1;\n        };\n\n\t\tstruct DataSideDef\n\t\t{\n\t\t\tivec2 A;\n\t\t\tivec2 B;\n\t\t\tint len;\n\t\t\tint otherSector;\n\t\t\tfloat lightLevel;\n\t\t\tuint bytePacked;\n\t\t};\n            \n\t\t#define DATA_SIDE_DEF(Ax, Ay, Bx, By, len, otherSector, light, packed)\t\t\\\n            DataSideDefPacked\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n            (\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n                uint((Ax+8192)|((Ay+8192)<<16)),\t\t\t\t\t\t\t\t\t\\\n                uint((Bx+8192)|((By+8192)<<16)),\t\t\t\t\t\t\t\t\t\\\n                uint(len<<16)|(uint(sign(light)+1.)<<14)|uint(otherSector+1),\t\t\\\n                packed\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n            )\n            \n\t\tDataSideDef UnpackSideDef( const DataSideDefPacked p)\n        {\n            DataSideDef sideDef;\n            sideDef.A.x = int(p.A & 0xffffu) - 8192;\n            sideDef.A.y = int(p.A >> 16) - 8192;\n            sideDef.B.x = int(p.B & 0xffffu) - 8192;\n            sideDef.B.y = int(p.B >> 16) - 8192;\n            sideDef.len = int(p.packed0 >> 16) - 1;\n            sideDef.otherSector = int(p.packed0 & 0x3fffu) - 1;\n            sideDef.lightLevel = .063 * (float((p.packed0 >> 14) & 3u) - 1.);\n            sideDef.bytePacked = p.packed1;\n            return sideDef;\n        }            \n\n\t\tstruct DataSector\n\t\t{\n\t\t\tfloat lightLevel;\n\t\t\tint floorHeight;\n\t\t\tint ceilingHeight;\n\t\t\tuint floorTex;\n\t\t\tuint ceilingTex;\n\t\t\tint firstSideDef;\n\t\t\tint sideDefCount;\n\t\t};\n            \n\t\tstruct DataEntity\n\t\t{\n\t\t\tivec2 origin;\n\t\t\tint type;\n\t\t\tint subType;\n\t\t\tint angle;\n\t\t\tint flags;\n\t\t\tivec2 triggerPos;\n\t\t};\n\n\t\tstruct DataMap\n\t\t{\n\t\t\tint sectorCount;\n\t\t\tDataSector sectors[88];\n\t\t\tDataSideDefPacked sideDefs[666];\n\t\t\tDataEntity entities[102];\n\t\t};\n\n\t\tconst DataMap map = DataMap(\n\t\t\t88,\n\t\t\tDataSector[88] (\n\t\t\t\t// Sector Data 0\n\t\t\t\tDataSector( 1.000, -80, 216, TEX_NUKAGE3, TEX_F_SKY1, 0, 8 ),\n\t\t\t\t// Sector Data 1\n\t\t\t\tDataSector( 1.000, -56, 216, TEX_FLOOR7_1, TEX_F_SKY1, 8, 29 ),\n\t\t\t\t// Sector Data 2\n\t\t\t\tDataSector( 1.000, 0, 0, TEX_FLOOR4_8, TEX_CEIL5_1, 37, 6 ),\n\t\t\t\t// Sector Data 3\n\t\t\t\tDataSector( 1.000, 8, 192, TEX_FLAT5_5, TEX_FLAT5_5, 43, 4 ),\n\t\t\t\t// Sector Data 4\n\t\t\t\tDataSector( 0.565, 0, 0, TEX_FLOOR4_8, TEX_FLAT20, 47, 4 ),\n\t\t\t\t// Sector Data 5\n\t\t\t\tDataSector( 1.000, 8, 192, TEX_FLAT5_5, TEX_FLAT5_5, 51, 4 ),\n\t\t\t\t// Sector Data 6\n\t\t\t\tDataSector( 0.502, -136, -40, TEX_FLOOR5_1, TEX_CEIL5_2, 55, 7 ),\n\t\t\t\t// Sector Data 7\n\t\t\t\tDataSector( 0.502, -120, 16, TEX_FLOOR5_1, TEX_CEIL5_2, 62, 4 ),\n\t\t\t\t// Sector Data 8\n\t\t\t\tDataSector( 0.502, -104, 16, TEX_FLOOR5_1, TEX_CEIL5_2, 66, 4 ),\n\t\t\t\t// Sector Data 9\n\t\t\t\tDataSector( 0.502, -88, 16, TEX_FLOOR5_1, TEX_CEIL5_2, 70, 4 ),\n\t\t\t\t// Sector Data 10\n\t\t\t\tDataSector( 0.502, -72, 16, TEX_FLOOR5_1, TEX_CEIL5_2, 74, 4 ),\n\t\t\t\t// Sector Data 11\n\t\t\t\tDataSector( 1.000, -56, 24, TEX_FLOOR7_1, TEX_F_SKY1, 78, 5 ),\n\t\t\t\t// Sector Data 12\n\t\t\t\tDataSector( 1.000, -56, 64, TEX_FLOOR7_1, TEX_F_SKY1, 83, 8 ),\n\t\t\t\t// Sector Data 13\n\t\t\t\tDataSector( 0.690, -56, 16, TEX_FLOOR7_1, TEX_CEIL5_2, 91, 6 ),\n\t\t\t\t// Sector Data 14\n\t\t\t\tDataSector( 1.000, 32, 88, TEX_FLOOR4_8, TEX_CEIL5_1, 97, 4 ),\n\t\t\t\t// Sector Data 15\n\t\t\t\tDataSector( 0.502, 0, 224, TEX_FLOOR4_8, TEX_CEIL3_5, 101, 32 ),\n\t\t\t\t// Sector Data 16\n\t\t\t\tDataSector( 1.000, 0, 224, TEX_FLOOR4_8, TEX_CEIL3_5, 133, 8 ),\n\t\t\t\t// Sector Data 17\n\t\t\t\tDataSector( 1.000, 0, 96, TEX_FLOOR4_8, TEX_TLITE6_5, 141, 4 ),\n\t\t\t\t// Sector Data 18\n\t\t\t\tDataSector( 1.000, 0, 224, TEX_FLOOR4_8, TEX_CEIL3_5, 145, 8 ),\n\t\t\t\t// Sector Data 19\n\t\t\t\tDataSector( 1.000, 0, 96, TEX_FLOOR4_8, TEX_TLITE6_5, 153, 4 ),\n\t\t\t\t// Sector Data 20\n\t\t\t\tDataSector( 1.000, 8, 152, TEX_FLAT14, TEX_TLITE6_5, 157, 4 ),\n\t\t\t\t// Sector Data 21\n\t\t\t\tDataSector( 1.000, 32, 88, TEX_FLAT18, TEX_CEIL5_1, 161, 12 ),\n\t\t\t\t// Sector Data 22\n\t\t\t\tDataSector( 0.627, 0, 72, TEX_FLOOR4_8, TEX_CEIL3_5, 173, 4 ),\n\t\t\t\t// Sector Data 23\n\t\t\t\tDataSector( 1.000, 32, 88, TEX_FLAT18, TEX_CEIL5_1, 177, 6 ),\n\t\t\t\t// Sector Data 24\n\t\t\t\tDataSector( 0.565, 0, 144, TEX_FLOOR4_8, TEX_CEIL3_5, 183, 6 ),\n\t\t\t\t// Sector Data 25\n\t\t\t\tDataSector( 1.000, 0, 88, TEX_FLOOR4_8, TEX_TLITE6_4, 189, 4 ),\n\t\t\t\t// Sector Data 26\n\t\t\t\tDataSector( 0.816, 0, 0, TEX_FLOOR4_8, TEX_FLAT20, 193, 4 ),\n\t\t\t\t// Sector Data 27\n\t\t\t\tDataSector( 0.878, -16, 200, TEX_FLAT14, TEX_CEIL3_5, 197, 12 ),\n\t\t\t\t// Sector Data 28\n\t\t\t\tDataSector( 0.753, -8, 120, TEX_FLAT14, TEX_CEIL3_5, 209, 12 ),\n\t\t\t\t// Sector Data 29\n\t\t\t\tDataSector( 0.565, 0, 72, TEX_FLOOR4_8, TEX_CEIL3_5, 221, 29 ),\n\t\t\t\t// Sector Data 30\n\t\t\t\tDataSector( 1.000, 0, 72, TEX_FLOOR4_8, TEX_CEIL3_5, 250, 4 ),\n\t\t\t\t// Sector Data 31\n\t\t\t\tDataSector( 0.502, -8, 120, TEX_FLOOR4_8, TEX_CEIL3_5, 254, 10 ),\n\t\t\t\t// Sector Data 32\n\t\t\t\tDataSector( 0.502, -8, 224, TEX_FLOOR4_8, TEX_FLOOR7_2, 264, 32 ),\n\t\t\t\t// Sector Data 33\n\t\t\t\tDataSector( 0.565, 8, 224, TEX_FLOOR4_8, TEX_FLOOR7_2, 296, 4 ),\n\t\t\t\t// Sector Data 34\n\t\t\t\tDataSector( 0.565, 24, 224, TEX_FLOOR4_8, TEX_FLOOR7_2, 300, 4 ),\n\t\t\t\t// Sector Data 35\n\t\t\t\tDataSector( 1.000, 40, 184, TEX_STEP2, TEX_TLITE6_1, 304, 4 ),\n\t\t\t\t// Sector Data 36\n\t\t\t\tDataSector( 1.000, 40, 184, TEX_STEP2, TEX_TLITE6_1, 308, 4 ),\n\t\t\t\t// Sector Data 37\n\t\t\t\tDataSector( 0.565, 40, 224, TEX_FLOOR4_8, TEX_FLOOR7_2, 312, 4 ),\n\t\t\t\t// Sector Data 38\n\t\t\t\tDataSector( 0.565, 56, 224, TEX_FLOOR4_8, TEX_FLOOR7_2, 316, 4 ),\n\t\t\t\t// Sector Data 39\n\t\t\t\tDataSector( 0.565, 72, 224, TEX_FLOOR4_8, TEX_FLOOR7_2, 320, 4 ),\n\t\t\t\t// Sector Data 40\n\t\t\t\tDataSector( 0.878, 0, 128, TEX_FLOOR7_1, TEX_F_SKY1, 324, 8 ),\n\t\t\t\t// Sector Data 41\n\t\t\t\tDataSector( 0.753, 104, 264, TEX_FLOOR4_8, TEX_FLOOR7_2, 332, 18 ),\n\t\t\t\t// Sector Data 42\n\t\t\t\tDataSector( 1.000, 0, 264, TEX_FLOOR7_1, TEX_F_SKY1, 350, 16 ),\n\t\t\t\t// Sector Data 43\n\t\t\t\tDataSector( 1.000, 136, 240, TEX_FLAT20, TEX_FLAT20, 366, 4 ),\n\t\t\t\t// Sector Data 44\n\t\t\t\tDataSector( 0.753, 128, 264, TEX_FLOOR1_1, TEX_FLOOR7_2, 370, 8 ),\n\t\t\t\t// Sector Data 45\n\t\t\t\tDataSector( 1.000, 136, 240, TEX_FLAT20, TEX_FLAT20, 378, 4 ),\n\t\t\t\t// Sector Data 46\n\t\t\t\tDataSector( 1.000, 136, 240, TEX_FLAT20, TEX_FLAT20, 382, 4 ),\n\t\t\t\t// Sector Data 47\n\t\t\t\tDataSector( 0.690, 104, 192, TEX_FLOOR4_8, TEX_FLOOR7_2, 386, 8 ),\n\t\t\t\t// Sector Data 48\n\t\t\t\tDataSector( 0.565, 88, 224, TEX_FLOOR4_8, TEX_FLOOR7_2, 394, 4 ),\n\t\t\t\t// Sector Data 49\n\t\t\t\tDataSector( 0.565, -24, 176, TEX_FLOOR5_2, TEX_CEIL3_5, 398, 9 ),\n\t\t\t\t// Sector Data 50\n\t\t\t\tDataSector( 0.627, -16, 72, TEX_FLOOR4_8, TEX_CEIL3_5, 407, 4 ),\n\t\t\t\t// Sector Data 51\n\t\t\t\tDataSector( 0.565, -48, 176, TEX_NUKAGE3, TEX_CEIL3_5, 411, 3 ),\n\t\t\t\t// Sector Data 52\n\t\t\t\tDataSector( 0.565, -24, 176, TEX_FLOOR5_2, TEX_CEIL3_5, 414, 8 ),\n\t\t\t\t// Sector Data 53\n\t\t\t\tDataSector( 0.753, -48, 176, TEX_NUKAGE3, TEX_CEIL3_5, 422, 11 ),\n\t\t\t\t// Sector Data 54\n\t\t\t\tDataSector( 0.502, -48, 104, TEX_FLOOR4_8, TEX_FLOOR6_2, 433, 10 ),\n\t\t\t\t// Sector Data 55\n\t\t\t\tDataSector( 0.627, 96, 176, TEX_FLOOR4_8, TEX_CEIL3_5, 443, 5 ),\n\t\t\t\t// Sector Data 56\n\t\t\t\tDataSector( 0.753, -24, 176, TEX_FLOOR5_2, TEX_CEIL3_5, 448, 14 ),\n\t\t\t\t// Sector Data 57\n\t\t\t\tDataSector( 0.753, -48, 176, TEX_NUKAGE3, TEX_CEIL3_5, 462, 7 ),\n\t\t\t\t// Sector Data 58\n\t\t\t\tDataSector( 0.502, 104, 184, TEX_FLOOR4_8, TEX_FLOOR6_2, 469, 19 ),\n\t\t\t\t// Sector Data 59\n\t\t\t\tDataSector( 1.000, 16, 152, TEX_FLAT14, TEX_TLITE6_5, 488, 4 ),\n\t\t\t\t// Sector Data 60\n\t\t\t\tDataSector( 1.000, 24, 152, TEX_FLAT14, TEX_TLITE6_5, 492, 4 ),\n\t\t\t\t// Sector Data 61\n\t\t\t\tDataSector( 0.627, -8, 72, TEX_FLOOR4_8, TEX_CEIL3_5, 496, 6 ),\n\t\t\t\t// Sector Data 62\n\t\t\t\tDataSector( 0.753, 0, 136, TEX_FLAT20, TEX_FLAT20, 502, 4 ),\n\t\t\t\t// Sector Data 63\n\t\t\t\tDataSector( 1.000, -56, 24, TEX_FLOOR7_1, TEX_F_SKY1, 506, 4 ),\n\t\t\t\t// Sector Data 64\n\t\t\t\tDataSector( 1.000, -24, 104, TEX_FLOOR5_2, TEX_TLITE6_5, 510, 24 ),\n\t\t\t\t// Sector Data 65\n\t\t\t\tDataSector( 0.502, -24, 48, TEX_FLOOR5_2, TEX_CEIL3_5, 534, 18 ),\n\t\t\t\t// Sector Data 66\n\t\t\t\tDataSector( 1.000, -24, 72, TEX_FLOOR5_2, TEX_CEIL3_5, 552, 10 ),\n\t\t\t\t// Sector Data 67\n\t\t\t\tDataSector( 1.000, -24, 56, TEX_FLOOR5_2, TEX_FLAT23, 562, 4 ),\n\t\t\t\t// Sector Data 68\n\t\t\t\tDataSector( 1.000, -24, 48, TEX_FLOOR5_2, TEX_CEIL3_5, 566, 4 ),\n\t\t\t\t// Sector Data 69\n\t\t\t\tDataSector( 1.000, -24, -24, TEX_FLOOR5_2, TEX_FLAT20, 570, 4 ),\n\t\t\t\t// Sector Data 70\n\t\t\t\tDataSector( 1.000, -24, 88, TEX_FLOOR5_2, TEX_TLITE6_5, 574, 12 ),\n\t\t\t\t// Sector Data 71\n\t\t\t\tDataSector( 1.000, -24, 72, TEX_FLOOR5_2, TEX_FLAT23, 586, 4 ),\n\t\t\t\t// Sector Data 72\n\t\t\t\tDataSector( 1.000, -24, 48, TEX_FLOOR5_2, TEX_CEIL3_5, 590, 4 ),\n\t\t\t\t// Sector Data 73\n\t\t\t\tDataSector( 0.502, -104, 48, TEX_FLOOR5_1, TEX_CEIL5_2, 594, 4 ),\n\t\t\t\t// Sector Data 74\n\t\t\t\tDataSector( 0.502, -88, 48, TEX_FLOOR5_1, TEX_CEIL5_2, 598, 4 ),\n\t\t\t\t// Sector Data 75\n\t\t\t\tDataSector( 0.502, -72, 48, TEX_FLOOR5_1, TEX_CEIL5_2, 602, 4 ),\n\t\t\t\t// Sector Data 76\n\t\t\t\tDataSector( 0.502, -56, 48, TEX_FLOOR5_1, TEX_CEIL5_2, 606, 4 ),\n\t\t\t\t// Sector Data 77\n\t\t\t\tDataSector( 0.502, -40, 48, TEX_FLOOR5_1, TEX_CEIL5_2, 610, 4 ),\n\t\t\t\t// Sector Data 78\n\t\t\t\tDataSector( 0.502, -24, 48, TEX_FLOOR5_2, TEX_CEIL5_2, 614, 4 ),\n\t\t\t\t// Sector Data 79\n\t\t\t\tDataSector( 1.000, -136, -24, TEX_FLOOR5_1, TEX_TLITE6_6, 618, 8 ),\n\t\t\t\t// Sector Data 80\n\t\t\t\tDataSector( 0.502, -136, -40, TEX_FLOOR5_1, TEX_CEIL5_2, 626, 6 ),\n\t\t\t\t// Sector Data 81\n\t\t\t\tDataSector( 0.502, -120, 48, TEX_FLOOR5_1, TEX_CEIL5_2, 632, 4 ),\n\t\t\t\t// Sector Data 82\n\t\t\t\tDataSector( 0.502, -24, 48, TEX_FLOOR5_2, TEX_CEIL3_5, 636, 4 ),\n\t\t\t\t// Sector Data 83\n\t\t\t\tDataSector( 0.565, -24, -24, TEX_FLOOR5_2, TEX_FLAT5_5, 640, 4 ),\n\t\t\t\t// Sector Data 84\n\t\t\t\tDataSector( 0.502, -24, 48, TEX_FLOOR5_2, TEX_CEIL3_5, 644, 6 ),\n\t\t\t\t// Sector Data 85\n\t\t\t\tDataSector( 0.502, -24, -24, TEX_FLOOR5_2, TEX_FLAT20, 650, 4 ),\n\t\t\t\t// Sector Data 86\n\t\t\t\tDataSector( 1.000, -48, 32, TEX_FLOOR4_8, TEX_TLITE6_6, 654, 6 ),\n\t\t\t\t// Sector Data 87\n\t\t\t\tDataSector( 0.502, 104, 184, TEX_FLOOR4_8, TEX_FLOOR6_2, 660, 6 )\n\t\t\t),\n\t\t\tDataSideDefPacked[666] (\n\t\t\t\tDATA_SIDE_DEF( 1520, -3168, 1672, -3104, 164, 1, 0.000, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1672, -3104, 1896, -3104, 224, 1, -0.063, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1896, -3104, 2040, -3144, 149, 1, 0.000, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2040, -3144, 2128, -3272, 155, 1, 0.000, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2128, -3272, 2064, -3408, 150, 1, 0.000, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2064, -3408, 1784, -3448, 282, 1, 0.000, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -3448, 1544, -3384, 248, 1, 0.000, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1544, -3384, 1520, -3168, 217, 1, 0.000, PACK_DATA(TEX_BROWN144, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3200, 1376, -3104, 96, 5, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3360, 1376, -3264, 96, 3, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3264, 1376, -3200, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3104, 1376, -2944, 160, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -2944, 1472, -2880, 115, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1856, -2880, 1920, -2920, 75, 2, 0.000, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1672, -3104, 1520, -3168, 164, 0, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1896, -3104, 1672, -3104, 224, 0, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2040, -3144, 1896, -3104, 149, 0, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2128, -3272, 2040, -3144, 155, 0, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2064, -3408, 2128, -3272, 150, 0, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -3448, 2064, -3408, 282, 0, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1544, -3384, 1784, -3448, 248, 0, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1520, -3168, 1544, -3384, 217, 0, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2736, -3360, 2736, -3648, 288, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2736, -3648, 2240, -3648, 496, 63, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -3648, 1984, -3648, 256, 12, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -3648, 1376, -3648, 608, 11, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -2920, 2272, -3008, 93, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2272, -3008, 2432, -3112, 190, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2432, -3112, 2736, -3112, 304, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2736, -3112, 2736, -3360, 248, 62, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3648, 1376, -3520, 128, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3392, 1376, -3360, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3520, 1376, -3392, 128, 4, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1472, -2880, 1664, -2880, 192, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2880, 1856, -2880, 192, 2, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1920, -2920, 2176, -2920, 256, 2, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2920, 2240, -2920, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1920, -2920, 1856, -2880, 75, 1, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2816, 2176, -2816, 512, 14, -0.063, PACK_DATA(TEX_COMPUTE3, TEX_X, TEX_COMPUTE3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1856, -2880, 1664, -2880, 192, 1, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2920, 1920, -2920, 256, 1, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2816, 2176, -2920, 104, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2880, 1664, -2816, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3360, 1344, -3264, 96, 27, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3264, 1376, -3360, 96, 1, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3264, 1376, -3264, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3360, 1344, -3360, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3520, 1344, -3392, 128, 29, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3392, 1376, -3392, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3520, 1344, -3520, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3392, 1376, -3520, 128, 1, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3200, 1344, -3104, 96, 27, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3104, 1376, -3200, 96, 1, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3200, 1344, -3200, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3104, 1376, -3104, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -4096, 2112, -4032, 143, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3904, 2176, -3904, 128, 7, -0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -3968, 2240, -4096, 128, 79, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3904, 2176, -3920, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3920, 2240, -3968, 80, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2112, -4032, 2048, -3920, 128, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3920, 2048, -3904, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3904, 2048, -3872, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3872, 2176, -3904, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3872, 2176, -3872, 128, 8, -0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3904, 2048, -3904, 128, 6, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3872, 2048, -3840, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3840, 2176, -3872, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3840, 2176, -3840, 128, 9, -0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3872, 2048, -3872, 128, 7, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3808, 2176, -3840, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3840, 2048, -3808, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3808, 2176, -3808, 128, 10, -0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3840, 2048, -3840, 128, 8, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3776, 2176, -3808, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3808, 2048, -3776, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3776, 2176, -3776, 128, 13, -0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3808, 2048, -3808, 128, 9, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1528, -3680, 1376, -3648, 155, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1672, -3744, 1528, -3680, 157, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -3776, 1672, -3744, 313, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1376, -3648, 1984, -3648, 608, 1, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -3648, 1984, -3776, 128, 12, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -3776, 2208, -3680, 101, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2208, -3680, 2176, -3680, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2016, -3680, 1984, -3776, 101, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3680, 2016, -3680, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3680, 2048, -3680, 128, 13, -0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -3648, 2240, -3648, 256, 1, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -3776, 1984, -3648, 128, 11, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -3648, 2240, -3776, 128, 63, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3680, 2176, -3680, 128, 12, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3776, 2048, -3776, 128, 10, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3680, 2176, -3704, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -3704, 2176, -3776, 72, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3776, 2048, -3704, 72, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2048, -3704, 2048, -3680, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2752, 2176, -2816, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2752, 2176, -2752, 512, 15, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2816, 1664, -2816, 512, 2, -0.063, PACK_DATA(TEX_COMPUTE3, TEX_X, TEX_COMPUTE3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2816, 1664, -2752, 64, 23, 0.063, PACK_DATA(TEX_COMPSPAN, TEX_X, TEX_COMPTALL, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2368, 1664, -2112, 256, 21, 0.063, PACK_DATA(TEX_COMPSPAN, TEX_X, TEX_COMPTALL, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2112, 2496, -2112, 832, 21, -0.063, PACK_DATA(TEX_COMPSPAN, TEX_X, TEX_COMPTALL, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2112, 2496, -2496, 384, 21, 0.063, PACK_DATA(TEX_COMPSPAN, TEX_X, TEX_COMPTALL, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2752, 1664, -2752, 512, 14, -0.063, PACK_DATA(TEX_COMPSPAN, TEX_X, TEX_COMPTALL, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2688, 2496, -2752, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_STARGR1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2560, 1664, -2432, 128, 22, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_STARGR1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2560, 2496, -2688, 128, 61, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_STARGR1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2624, 1664, -2600, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2600, 1664, -2560, 40, -1, 0.063, PACK_DATA(TEX_X, TEX_STARGR1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2432, 1664, -2392, 40, -1, 0.063, PACK_DATA(TEX_X, TEX_STARGR1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2392, 1664, -2368, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2496, 2496, -2520, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2520, 2496, -2560, 40, -1, 0.063, PACK_DATA(TEX_X, TEX_STARGR1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2752, 2200, -2752, 296, -1, -0.063, PACK_DATA(TEX_X, TEX_STARGR1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2200, -2752, 2176, -2752, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2112, -2592, 2336, -2592, 224, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2336, -2592, 2336, -2272, 320, -1, 0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2336, -2272, 2112, -2272, 224, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2112, -2272, 2112, -2304, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2112, -2304, 2144, -2304, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2144, -2560, 2112, -2560, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2112, -2560, 2112, -2592, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2144, -2304, 2144, -2560, 256, 20, 0.063, PACK_DATA(TEX_STEP1, TEX_X, TEX_COMPTILE, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2552, 1784, -2552, 208, 18, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2552, 1784, -2632, 80, 18, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2632, 1992, -2632, 208, 18, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2632, 1992, -2552, 80, 18, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2312, 1992, -2312, 208, 16, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2312, 1992, -2232, 80, 16, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2232, 1784, -2232, 208, 16, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2232, 1784, -2312, 80, 16, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2752, 1664, -2624, 128, 23, 0.063, PACK_DATA(TEX_COMPSPAN, TEX_X, TEX_COMPTALL, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2304, 1984, -2240, 64, 17, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2240, 1792, -2240, 192, 17, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2240, 1792, -2304, 64, 17, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2304, 1984, -2304, 192, 17, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2312, 1784, -2312, 208, 15, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2232, 1992, -2312, 80, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2232, 1992, -2232, 208, 15, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2312, 1784, -2232, 80, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2240, 1984, -2304, 64, 16, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2240, 1984, -2240, 192, 16, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2304, 1792, -2240, 64, 16, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2304, 1792, -2304, 192, 16, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2624, 1984, -2560, 64, 19, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2560, 1792, -2560, 192, 19, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2560, 1792, -2624, 64, 19, 0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2624, 1984, -2624, 192, 19, -0.063, PACK_DATA(TEX_STARGR1, TEX_X, TEX_PLANET1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2552, 1992, -2552, 208, 15, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1784, -2632, 1784, -2552, 80, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2632, 1784, -2632, 208, 15, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1992, -2552, 1992, -2632, 80, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2560, 1984, -2624, 64, 18, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2560, 1984, -2560, 192, 18, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1792, -2624, 1792, -2560, 64, 18, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1984, -2624, 1792, -2624, 192, 18, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2144, -2304, 2176, -2304, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2560, 2144, -2560, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2144, -2560, 2144, -2304, 256, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2304, 2176, -2560, 256, 59, 0.063, PACK_DATA(TEX_STEP1, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2368, 1600, -2368, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1600, -2368, 1600, -2112, 256, -1, 0.063, PACK_DATA(TEX_X, TEX_COMPUTE2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2560, -2112, 2560, -2496, 384, -1, 0.063, PACK_DATA(TEX_X, TEX_COMPUTE2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2560, -2496, 2496, -2496, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1600, -2048, 1664, -2048, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2048, 2496, -2048, 832, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPUTE2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2048, 2560, -2048, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2560, -2048, 2560, -2112, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1600, -2112, 1600, -2048, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2112, 1664, -2368, 256, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2112, 1664, -2112, 832, 15, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2496, 2496, -2112, 384, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1552, -2560, 1552, -2432, 128, 26, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_BIGDOOR2, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2560, 1552, -2560, 112, -1, -0.063, PACK_DATA(TEX_X, TEX_STARGR1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1552, -2432, 1664, -2432, 112, -1, -0.063, PACK_DATA(TEX_X, TEX_STARGR1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2432, 1664, -2560, 128, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1600, -2624, 1664, -2624, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2816, 1600, -2816, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1600, -2816, 1600, -2752, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1600, -2752, 1600, -2624, 128, -1, 0.063, PACK_DATA(TEX_X, TEX_COMPUTE2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2752, 1664, -2816, 64, 14, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1664, -2624, 1664, -2752, 128, 15, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -2880, 1248, -2528, 353, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1384, -2592, 1344, -2880, 290, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1472, -2560, 1384, -2592, 93, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1248, -2528, 1472, -2432, 243, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -2880, 1216, -2880, 128, 29, -0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1472, -2432, 1472, -2560, 128, 25, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1472, -2560, 1472, -2432, 128, 24, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1536, -2432, 1536, -2560, 128, 26, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_BIGDOOR2, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1536, -2560, 1472, -2560, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1472, -2432, 1536, -2432, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1536, -2560, 1536, -2432, 128, 25, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1552, -2432, 1552, -2560, 128, 22, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1536, -2432, 1552, -2432, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1552, -2560, 1536, -2560, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -3392, 1216, -3360, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -3360, 1184, -3360, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3104, 1216, -3104, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -3104, 1216, -3072, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3264, 1344, -3360, 96, 3, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3200, 1344, -3264, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3104, 1344, -3200, 96, 5, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3360, 1216, -3392, 131, 29, 0.000, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -3072, 1344, -3104, 131, 29, 0.000, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3104, 1184, -3104, 256, 28, -0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3360,  928, -3360, 256, 28, -0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3360,  928, -3104, 256, 28, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3392,  928, -3360, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3360,  896, -3360, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3360, 1184, -3392, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  896, -3104,  928, -3104, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3104,  928, -3072, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3072, 1184, -3104, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3392,  928, -3392, 256, 29, -0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_COMPUTE2, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3104,  928, -3104, 256, 27, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3360, 1184, -3360, 256, 27, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3104,  928, -3360, 256, 27, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  896, -3360,  896, -3104, 256, 29, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_COMPUTE2, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3072, 1184, -3072, 256, 29, -0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_COMPUTE2, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1152, -3648, 1088, -3648, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1024, -3648,  960, -3648, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1280, -3552, 1152, -3648, 160, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  960, -3648,  832, -3552, 160, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3552, 1280, -3552, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  832, -3552,  704, -3552, 128, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  896, -3392,  928, -3392, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  896, -3360,  896, -3392, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3392, 1216, -3392, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  896, -3072,  896, -3104, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3072,  896, -3072, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -3072, 1184, -3072, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -2880, 1344, -3104, 224, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  928, -3392, 1184, -3392, 256, 28, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -3392, 1344, -3360, 131, 27, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3104, 1216, -3072, 131, 27, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  704, -2944,  832, -2944, 128, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  832, -2944,  968, -2880, 150, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  968, -2880, 1216, -2880, 248, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1088, -3648, 1024, -3648, 64, 30, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  896, -3104,  896, -3360, 256, 28, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1184, -3072,  928, -3072, 256, 28, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  704, -3552,  704, -3360, 192, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  704, -3104,  704, -2944, 160, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  704, -3360,  704, -3104, 256, 31, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1216, -2880, 1344, -2880, 128, 24, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3360, 1344, -3392, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3520, 1344, -3552, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1344, -3392, 1344, -3520, 128, 4, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 1088, -3680, 1024, -3680, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_DOOR3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1024, -3680, 1024, -3648, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1088, -3648, 1088, -3680, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 1024, -3648, 1088, -3648, 64, 29, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  704, -3104,  704, -3360, 256, 29, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  512, -3328,  512, -3304, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  512, -3160,  512, -3136, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  512, -3136,  680, -3104, 171, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  680, -3104,  704, -3104, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  704, -3360,  680, -3360, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  680, -3360,  512, -3328, 171, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  496, -3304,  496, -3160, 144, 32, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  512, -3304,  496, -3304, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  496, -3160,  512, -3160, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  496, -3160,  496, -3304, 144, 31, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_STARG3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  496, -3304,  496, -3328, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  496, -3328,  448, -3456, 136, -1, 0.000, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  448, -3456,  128, -3456, 320, -1, -0.063, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3008,  448, -3008, 320, -1, -0.063, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  496, -3136,  496, -3160, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  448, -3008,  496, -3136, 136, -1, 0.000, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3264,  160, -3264, 32, 48, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  160, -3264,  192, -3264, 32, 39, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  192, -3264,  224, -3264, 32, 38, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  224, -3264,  256, -3264, 32, 37, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3264,  288, -3264, 32, 34, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  288, -3264,  320, -3264, 32, 33, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3264,  320, -3200, 64, 33, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3200,  288, -3200, 32, 33, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  288, -3200,  256, -3200, 32, 34, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3200,  224, -3200, 32, 37, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  224, -3200,  192, -3200, 32, 38, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  192, -3200,  160, -3200, 32, 39, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  160, -3200,  128, -3200, 32, 48, -0.063, PACK_DATA(TEX_SLADWALL, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3200,   64, -3072, 143, 47, 0.000, PACK_DATA(TEX_STARG3, TEX_X, TEX_STARG3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -3072,  128, -3008, 90, -1, 0.000, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3456,   64, -3392, 90, -1, 0.000, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -3392,  128, -3264, 143, 47, 0.000, PACK_DATA(TEX_STARG3, TEX_X, TEX_STARG3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3136,  320, -3136, 64, 36, -0.063, PACK_DATA(TEX_TEKWALL4, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3136,  320, -3072, 64, 36, 0.063, PACK_DATA(TEX_TEKWALL4, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3072,  256, -3072, 64, 36, -0.063, PACK_DATA(TEX_SW1COMP, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3072,  256, -3136, 64, 36, 0.063, PACK_DATA(TEX_TEKWALL4, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3392,  320, -3392, 64, 35, -0.063, PACK_DATA(TEX_TEKWALL4, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3392,  320, -3328, 64, 35, 0.063, PACK_DATA(TEX_TEKWALL4, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3328,  256, -3328, 64, 35, -0.063, PACK_DATA(TEX_TEKWALL4, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3328,  256, -3392, 64, 35, 0.063, PACK_DATA(TEX_TEKWALL4, TEX_X, TEX_TEKWALL4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3264,  288, -3264, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3200,  320, -3264, 64, 32, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  288, -3200,  320, -3200, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  288, -3264,  288, -3200, 64, 34, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  288, -3264,  256, -3264, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3200,  288, -3200, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3264,  256, -3200, 64, 37, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  288, -3200,  288, -3264, 64, 33, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3392,  256, -3392, 64, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3328,  320, -3392, 64, 32, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3328,  320, -3328, 64, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3392,  256, -3328, 64, 32, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3136,  256, -3136, 64, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  320, -3072,  320, -3136, 64, 32, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3072,  320, -3072, 64, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3136,  256, -3072, 64, 32, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3264,  224, -3264, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  224, -3200,  256, -3200, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  224, -3264,  224, -3200, 64, 38, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  256, -3200,  256, -3264, 64, 34, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  224, -3264,  192, -3264, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  192, -3200,  224, -3200, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  192, -3264,  192, -3200, 64, 39, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  224, -3200,  224, -3264, 64, 37, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  192, -3264,  160, -3264, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  160, -3200,  192, -3200, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  160, -3264,  160, -3200, 64, 48, 0.063, PACK_DATA(TEX_STEP6, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  192, -3200,  192, -3264, 64, 38, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -3648, -640, -3648, 704, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -640, -3648, -768, -3520, 181, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -768, -3520, -768, -2944, 576, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -768, -2944, -640, -2816, 181, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -640, -2816,   64, -2816, 704, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -640, -3520,   64, -3648, 715, 42, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( -640, -2944, -640, -3520, 576, 42, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -2816, -640, -2944, 715, 42, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3328, -320, -3296, 71, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -320, -3168, -256, -3136, 71, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -64, -3136,  -64, -3328, 192, 47, 0.063, PACK_DATA(TEX_STARG3, TEX_X, TEX_STARG3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3328, -256, -3328, 128, 46, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3136, -128, -3136, 128, 43, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -320, -3296, -320, -3168, 128, 45, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3136,  -88, -3136, 40, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -88, -3136,  -64, -3136, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -64, -3328,  -88, -3328, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -88, -3328, -128, -3328, 40, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -240, -3264, -208, -3264, 32, 44, -0.063, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -208, -3264, -192, -3248, 22, 44, 0.000, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -192, -3248, -192, -3216, 32, 44, 0.063, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -192, -3216, -208, -3200, 22, 44, 0.000, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -208, -3200, -240, -3200, 32, 44, -0.063, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -240, -3200, -256, -3216, 22, 44, 0.000, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3216, -256, -3248, 32, 44, 0.063, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3248, -240, -3264, 22, 44, 0.000, PACK_DATA(TEX_TEKWALL1, TEX_X, TEX_TEKWALL1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3120, -336, -3120, 80, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -336, -3120, -336, -3168, 48, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -336, -3296, -336, -3344, 48, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -336, -3344, -256, -3344, 80, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3344,  -96, -3344, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -96, -3344,   64, -3520, 237, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -96, -3120, -128, -3120, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -2944,  -96, -3120, 237, -1, 0.000, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3344, -128, -3344, 128, 46, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3120, -256, -3120, 128, 43, -0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -336, -3168, -336, -3296, 128, 45, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_STARTAN3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -2816,   64, -2944, 128, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -3520,   64, -3648, 128, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -3648, -640, -3520, 715, 40, 0.000, PACK_DATA(TEX_STARG3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( -640, -3520, -640, -2944, 576, 40, 0.063, PACK_DATA(TEX_STARG3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( -640, -2944,   64, -2816, 715, 40, 0.000, PACK_DATA(TEX_STARG3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3120, -128, -3136, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3136, -256, -3120, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3136, -256, -3136, 128, 41, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3120, -128, -3120, 128, 42, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -208, -3264, -240, -3264, 32, 41, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -192, -3248, -208, -3264, 22, 41, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -192, -3216, -192, -3248, 32, 41, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -208, -3200, -192, -3216, 22, 41, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -240, -3200, -208, -3200, 32, 41, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3216, -240, -3200, 22, 41, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3248, -256, -3216, 32, 41, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -240, -3264, -256, -3248, 22, 41, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -320, -3296, -336, -3296, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -336, -3168, -320, -3168, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -320, -3168, -320, -3296, 128, 41, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -336, -3296, -336, -3168, 128, 42, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3344, -256, -3328, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3328, -128, -3344, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -256, -3328, -128, -3328, 128, 41, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( -128, -3344, -256, -3344, 128, 42, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3200,  128, -3264, 64, 48, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -3072,  128, -3200, 143, 32, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3264,   64, -3392, 143, 32, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(   64, -3392,   48, -3392, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(   48, -3392,  -64, -3328, 128, -1, 0.000, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -64, -3136,   48, -3072, 128, -1, 0.000, PACK_DATA(TEX_X, TEX_STARG3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(   48, -3072,   64, -3072, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF(  -64, -3328,  -64, -3136, 192, 41, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  160, -3264,  128, -3264, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3200,  160, -3200, 32, 32, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  160, -3200,  160, -3264, 64, 39, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF(  128, -3264,  128, -3200, 64, 47, 0.063, PACK_DATA(TEX_STARG3, TEX_X, TEX_STARG3, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2880, -2912, 2880, -2880, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3048, 2752, -2912, 136, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -2784, 2944, -2656, 230, 50, 0.000, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3048, -2880, 2752, -3048, 340, 56, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2880, -2880, 2752, -2800, 150, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -2800, 2752, -2784, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -2656, 2960, -2656, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2960, -2656, 3048, -2880, 240, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -2912, 2880, -2912, 128, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -2784, 2624, -2784, 128, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -2560, 2944, -2656, 214, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -2656, 2752, -2784, 230, 49, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2624, -2784, 2752, -2560, 257, 61, 0.000, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3584, 2752, -3360, 224, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3360, 2944, -3536, 260, 57, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3536, 2752, -3584, 197, 52, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3648, 2752, -3584, 202, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -3648, 3072, -4000, 352, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3776, 2944, -3648, 128, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3536, 3072, -3648, 170, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3584, 2944, -3536, 197, 51, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3904, 2944, -3776, 128, 83, 0.063, PACK_DATA(TEX_BROWN96, TEX_X, TEX_BROWN96, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4000, 2944, -3904, 96, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4000, 2944, -4000, 128, 82, -0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3136, -3072, 3304, -3040, 171, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3280, -3320, 2984, -3200, 319, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2984, -3200, 3136, -3072, 198, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -3552, 3280, -3320, 291, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3264, -3616, 3104, -3552, 172, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3352, -3568, 3264, -3616, 100, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3472, -3432, 3408, -3432, 64, 55, -0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3408, -3432, 3312, -3496, 115, 55, 0.000, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3312, -3496, 3352, -3568, 82, 55, 0.000, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3400, -3152, 3472, -3432, 289, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3304, -3040, 3400, -3152, 147, 58, 0.000, PACK_DATA(TEX_BROWNGRN, TEX_BROWNGRN, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3352, -3568, 3448, -3520, 107, 55, 0.000, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3520, -3904, 3328, -3968, 202, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3328, -3744, 3360, -3648, 101, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3328, -3968, 3328, -3744, 224, 86, 0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3448, -3520, 3472, -3520, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3472, -3520, 3520, -3584, 80, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3360, -3648, 3352, -3592, 56, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3352, -3592, 3352, -3568, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3520, -3584, 3520, -3840, 256, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3520, -3840, 3520, -3904, 64, 87, 0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3408, -3432, 3472, -3432, 64, 53, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3312, -3496, 3408, -3432, 115, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3352, -3568, 3312, -3496, 82, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3472, -3432, 3448, -3520, 91, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3448, -3520, 3352, -3568, 107, 54, 0.000, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3048, -2880, 3048, -2944, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3048, -2944, 3304, -3040, 273, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3304, -3040, 3136, -3072, 171, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3536, 3112, -3360, 243, 57, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3112, -3360, 2816, -3232, 322, 57, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2984, -3200, 3280, -3320, 319, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2816, -3232, 2976, -3072, 226, 57, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3136, -3072, 2984, -3200, 198, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3264, -3616, 3072, -3648, 194, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -3648, 2944, -3536, 170, 52, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3048, 3048, -2880, 340, 49, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3280, -3320, 3104, -3552, 291, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -3552, 3264, -3616, 172, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -3072, 2752, -3048, 225, 57, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3112, -3360, 2944, -3536, 243, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2816, -3232, 3112, -3360, 322, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -3072, 2816, -3232, 226, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3536, 2752, -3360, 260, 51, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3048, 2976, -3072, 225, 56, 0.000, PACK_DATA(TEX_NUKE24, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3360, 2752, -3112, 248, 62, 0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3112, 2752, -3048, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3680, -3904, 3584, -3904, 96, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3744, -3808, 3680, -3904, 115, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3584, -3840, 3616, -3776, 71, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3616, -3776, 3552, -3552, 232, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3552, -3552, 3552, -3392, 160, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3552, -3392, 3648, -3264, 160, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3680, -3552, 3744, -3808, 263, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3680, -3392, 3680, -3552, 160, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3808, -3264, 3680, -3392, 181, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3648, -3264, 3496, -3032, 277, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3584, -2880, 3808, -3264, 444, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3496, -3032, 3456, -3032, 40, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3360, -2880, 3584, -2880, 224, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3400, -3152, 3304, -3040, 147, 53, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3584, -3904, 3584, -3840, 64, 87, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3304, -3040, 3320, -3040, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3320, -3040, 3360, -2880, 164, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3456, -3032, 3416, -3152, 126, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3416, -3152, 3400, -3152, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2304, 2208, -2304, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2208, -2560, 2176, -2560, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2176, -2560, 2176, -2304, 256, 20, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2208, -2304, 2208, -2560, 256, 60, 0.063, PACK_DATA(TEX_STEP1, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2208, -2304, 2304, -2304, 96, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2304, -2304, 2304, -2560, 256, -1, 0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2304, -2560, 2208, -2560, 96, -1, -0.063, PACK_DATA(TEX_X, TEX_COMPTILE, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2208, -2560, 2208, -2304, 256, 59, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2520, -2560, 2752, -2560, 232, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2624, -2784, 2520, -2688, 141, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2560, 2520, -2560, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2520, -2688, 2496, -2688, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2496, -2688, 2496, -2560, 128, 15, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -2560, 2624, -2784, 257, 50, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3360, 2736, -3360, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2736, -3112, 2752, -3112, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3112, 2752, -3360, 248, 57, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2736, -3360, 2736, -3112, 248, 1, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2736, -3648, 2488, -3744, 265, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2488, -3744, 2240, -3776, 250, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN144, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -3648, 2736, -3648, 496, 1, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -3776, 2240, -3648, 128, 12, 0.063, PACK_DATA(TEX_STARTAN3, TEX_X, TEX_X, 1u) ),\n\t\t\t\tDATA_SIDE_DEF( 2856, -4160, 2888, -4160, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4160, 2912, -4160, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3160, -4352, 3128, -4352, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4352, 3104, -4352, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4160, 3128, -4160, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4160, 3160, -4160, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4352, 2888, -4352, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4352, 2856, -4352, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4320, 2888, -4352, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4352, 2888, -4320, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGL, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4192, 2888, -4320, 128, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGC, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4320, 2888, -4192, 128, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGC, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4160, 2888, -4192, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGL, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2888, -4192, 2888, -4160, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4352, 3128, -4320, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGL, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4320, 3128, -4352, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4192, 3128, -4160, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4160, 3128, -4192, 32, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGL, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4320, 3128, -4192, 128, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGC, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3128, -4192, 3128, -4320, 128, 64, 0.063, PACK_DATA(TEX_X, TEX_BRNBIGC, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4160, 3104, -4160, 192, 84, -0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4352, 2912, -4352, 192, 65, -0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2856, -4352, 2856, -4160, 192, 65, 0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3160, -4160, 3160, -4352, 192, 65, 0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3200, -4128, 3328, -4128, 128, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2688, -4128, 2816, -4128, 128, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2816, -4128, 2856, -4160, 51, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3160, -4160, 3200, -4128, 51, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4352, 3104, -4384, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4384, 3160, -4384, 56, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3160, -4384, 3160, -4352, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2856, -4352, 2856, -4384, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2856, -4384, 2912, -4384, 56, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4384, 2912, -4352, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3328, -4544, 3072, -4544, 256, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4544, 2688, -4544, 256, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4352, 3104, -4352, 192, 64, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2688, -4544, 2688, -4128, 416, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3328, -4128, 3328, -4544, 416, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2856, -4160, 2856, -4352, 192, 64, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3160, -4352, 3160, -4160, 192, 64, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4544, 2944, -4544, 128, 66, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4544, 3072, -4608, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4608, 2944, -4544, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_LITE3, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4544, 3072, -4544, 128, 65, -0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4608, 3040, -4608, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4608, 2944, -4608, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4592, 2992, -4592, 32, 67, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4600, 3024, -4600, 32, 67, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4600, 3024, -4592, 8, 67, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4592, 2992, -4600, 8, 67, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4608, 2976, -4608, 64, 68, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_STARTAN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4592, 3024, -4592, 32, 66, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4600, 2992, -4600, 32, 66, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4592, 3024, -4600, 8, 66, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4600, 2992, -4592, 8, 66, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4632, 2976, -4608, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_EXITDOOR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4608, 3040, -4632, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_EXITDOOR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4632, 2976, -4632, 64, 69, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITDOOR, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4608, 3040, -4608, 64, 66, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4632, 3040, -4648, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4648, 2976, -4632, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4648, 2976, -4648, 64, 72, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4632, 3040, -4632, 64, 68, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4672, 3104, -4672, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4672, 2976, -4672, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4672, 3104, -4864, 192, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4864, 2912, -4800, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4800, 2912, -4736, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_SW1STRTN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4736, 2912, -4672, 64, -1, 0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4864, 2912, -4864, 192, -1, -0.063, PACK_DATA(TEX_X, TEX_STARTAN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4672, 3040, -4672, 64, 72, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_STARTAN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4840, 2992, -4840, 32, 71, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4848, 3024, -4848, 32, 71, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4848, 3024, -4840, 8, 71, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4840, 2992, -4848, 8, 71, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITSIGN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4840, 3024, -4840, 32, 70, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4848, 2992, -4848, 32, 70, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3024, -4840, 3024, -4848, 8, 70, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2992, -4848, 2992, -4840, 8, 70, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4648, 3040, -4672, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_EXITDOOR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4672, 2976, -4648, 24, -1, 0.063, PACK_DATA(TEX_X, TEX_EXITDOOR, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2976, -4648, 3040, -4648, 64, 69, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_EXITDOOR, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3040, -4672, 2976, -4672, 64, 70, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3776, 2752, -3904, 128, 74, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2720, -3904, 2688, -3776, 131, 81, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2688, -3776, 2752, -3776, 64, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3904, 2720, -3904, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2784, -3776, 2784, -3904, 128, 75, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3904, 2752, -3776, 128, 73, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2752, -3776, 2784, -3776, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2784, -3904, 2752, -3904, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2816, -3776, 2816, -3904, 128, 76, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2784, -3904, 2784, -3776, 128, 74, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2784, -3776, 2816, -3776, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2816, -3904, 2784, -3904, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2848, -3776, 2848, -3904, 128, 77, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2816, -3904, 2816, -3776, 128, 75, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2816, -3776, 2848, -3776, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2848, -3904, 2816, -3904, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2880, -3776, 2880, -3904, 128, 78, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2848, -3904, 2848, -3776, 128, 76, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2848, -3776, 2880, -3776, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2880, -3904, 2848, -3904, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2880, -3904, 2880, -3776, 128, 77, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2880, -3776, 2912, -3776, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -3904, 2880, -3904, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -3776, 2912, -3904, 128, 83, 0.063, PACK_DATA(TEX_BROWN96, TEX_X, TEX_BROWN96, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -4096, 2240, -3968, 128, 6, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2368, -3968, 2368, -4096, 128, 80, 0.063, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2368, -4096, 2344, -4096, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2344, -4096, 2264, -4096, 80, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2264, -4096, 2240, -4096, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2240, -3968, 2264, -3968, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2264, -3968, 2344, -3968, 80, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2344, -3968, 2368, -3968, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2368, -4096, 2368, -3968, 128, 79, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2632, -3792, 2688, -3920, 139, 81, 0.000, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2688, -3920, 2672, -3920, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2672, -3920, 2368, -4096, 351, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2368, -3968, 2616, -3792, 304, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2616, -3792, 2632, -3792, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2688, -3776, 2720, -3904, 131, 73, 0.000, PACK_DATA(TEX_BROWN1, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2688, -3920, 2632, -3792, 139, 80, 0.000, PACK_DATA(TEX_X, TEX_X, TEX_BROWN1, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2632, -3792, 2688, -3776, 58, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2720, -3904, 2688, -3920, 35, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWN1, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4000, 3072, -4000, 128, 52, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4016, 2944, -4000, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4000, 3072, -4016, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4016, 2944, -4016, 128, 85, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_BIGDOOR4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3904, 2912, -3904, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -3776, 2944, -3776, 32, -1, -0.063, PACK_DATA(TEX_X, TEX_DOORSTOP, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -3776, 2944, -3904, 128, 52, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -3904, 2912, -3776, 128, 78, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4160, 2912, -4128, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4128, 3104, -4160, 32, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3104, -4160, 2912, -4160, 192, 64, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2912, -4128, 2944, -4032, 101, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4032, 3104, -4128, 101, -1, 0.000, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4032, 3072, -4032, 128, 85, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_BIGDOOR4, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4032, 2944, -4016, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4016, 3072, -4032, 16, -1, 0.063, PACK_DATA(TEX_X, TEX_DOORTRAK, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 2944, -4016, 3072, -4016, 128, 82, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3072, -4032, 2944, -4032, 128, 84, -0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3200, -3968, 3200, -3744, 224, -1, 0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3328, -3744, 3328, -3968, 224, 54, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_X, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3328, -3968, 3304, -3968, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3304, -3968, 3200, -3968, 104, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3200, -3744, 3304, -3744, 104, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3304, -3744, 3328, -3744, 24, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3520, -3904, 3520, -3840, 64, 54, 0.063, PACK_DATA(TEX_X, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3584, -3840, 3584, -3904, 64, 58, 0.063, PACK_DATA(TEX_BROWNGRN, TEX_X, TEX_BROWNGRN, 0u) ),\n\t\t\t\tDATA_SIDE_DEF( 3520, -3840, 3536, -3840, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3536, -3840, 3584, -3840, 48, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3584, -3904, 3536, -3904, 48, -1, -0.063, PACK_DATA(TEX_X, TEX_BROWNGRN, TEX_X, 2u) ),\n\t\t\t\tDATA_SIDE_DEF( 3536, -3904, 3520, -3904, 16, -1, -0.063, PACK_DATA(TEX_X, TEX_SUPPORT2, TEX_X, 2u) )\n\t\t\t),\n\t\t\tDataEntity[102] (\n\t\t\t\tDataEntity( ivec2( 1056, -3616 ), ENTITY_TYPE_PLAYER, 0, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1545, -2483 ), ENTITY_TYPE_DOOR, 0, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2926, -3830 ), ENTITY_TYPE_DOOR, 0, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3000, -4019 ), ENTITY_TYPE_DOOR, 0, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3000, -4644 ), ENTITY_TYPE_DOOR, 0, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3410, -3489 ), ENTITY_TYPE_PLATFORM, 0, -10, 7, ivec2( 2996, -4070 ) ),\n\t\t\t\tDataEntity( ivec2( 3533, -3874 ), ENTITY_TYPE_PLATFORM, 1, 200, 7, ivec2( 2945, -2918 ) ),\n\t\t\t\tDataEntity( ivec2( 288, -3104 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_TALL_TECHNO_PILLAR, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 288, -3360 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_TALL_TECHNO_PILLAR, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 528, -3312 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 528, -3152 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3440, -3472 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_IMP, 135, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3360, -3504 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_IMP, 135, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2912, -2816 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 90, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3056, -3584 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 90, 14, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3136, -3408 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 90, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1824, -3280 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_BLUEARMOR, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2736, -4256 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 0, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3280, -4256 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 180, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3008, -4416 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_IMP, 90, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3280, -4304 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 180, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2736, -4304 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 0, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2880, -4416 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_MEDIKIT, 0, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 144, -3136 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 144, -3328 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 96, -3392 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 96, -3072 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 432, -3040 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 432, -3424 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 32, -3232 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( -32, -3232 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1312, -3520 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 736, -3520 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 752, -2992 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 976, -2912 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1312, -3264 ), ENTITY_TYPE_BARREL, 0, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1152, -2912 ), ENTITY_TYPE_BARREL, 0, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 864, -3328 ), ENTITY_TYPE_BARREL, 0, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2672, -2752 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2752, -2640 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3232, -3040 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2800, -3040 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2912, -4176 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3104, -4176 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2720, -4352 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3296, -4352 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2944, -4320 ), ENTITY_TYPE_BARREL, 0, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3184, -4224 ), ENTITY_TYPE_BARREL, 0, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2832, -4240 ), ENTITY_TYPE_BARREL, 0, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3184, -4176 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2832, -4176 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2736, -4192 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3280, -4192 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 180, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3280, -4448 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2736, -4448 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3072, -4832 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2944, -4832 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3072, -4704 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2944, -4704 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3008, -4816 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_IMP, 90, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3072, -4768 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_STIMPACK, 90, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2304, -4032 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_MEDIKIT, 90, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( -224, -3232 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_GREENARMOR, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( -288, -3232 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1056, -3552 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS, 90, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1792, -2944 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS, 270, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3408, -3504 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS, 135, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2784, -4160 ), ENTITY_TYPE_DECORATION, ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS, 270, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2272, -2432 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 180, 15, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2272, -2352 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_TROOPER, 180, 14, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2272, -2512 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 180, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2464, -2432 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 180, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2224, -2320 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2224, -2544 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2288, -2544 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2288, -2320 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1712, -2144 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2240, -2256 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 180, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3264, -3936 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_SHOTGUN, 270, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3232, -3808 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_MEDIKIT, 270, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3216, -3888 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 0, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( -160, -3232 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 0, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 240, -3376 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 135, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 240, -3088 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 225, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1696, -2688 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 90, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 1920, -2176 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 270, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2976, -3264 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 90, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3008, -3520 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 90, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3008, -3072 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 90, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2816, -2688 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 0, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2496, -3968 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 0, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 2256, -4064 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 0, 4, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3072, -4256 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 90, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( -192, -3296 ), ENTITY_TYPE_ENEMY, ENTITY_SUB_TYPE_ENEMY_SERGEANT, 0, 12, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3616, -3392 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3712, -3264 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3472, -2960 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3376, -3024 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3568, -2992 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3616, -3088 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3664, -3168 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) ),\n\t\t\t\tDataEntity( ivec2( 3648, -3840 ), ENTITY_TYPE_ITEM, ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS, 0, 7, ivec2( 0, 0 ) )\n\t\t\t)\n\t\t);\n\n\nvoid MainData( out vec4 fragColor, in ivec2 fragCoord )\n{\n    if( all(equal(fragCoord, ivec2(0,0) )))\n    {\n        fragColor = vec4( 88,iResolution.x, iResolution.y, 0 );\n        return;\n    }\n\n    if ( fragCoord.x < 128 )\n    {    \n        int sectorIndex = fragCoord.y - 1;\n        if ( sectorIndex >= 0 && sectorIndex < map.sectorCount )\n        {\n            DataSector sector = map.sectors[ sectorIndex ];\n            //DATA1(0, 1.000);\n            //DATA(1, -80,216,TEX_NUKAGE3,TEX_F_SKY1);\n            // Sidedefs\n            //DATA(2, 1520,-3168,1672,-3104); \tDATA(3, 164,0.,TEX_X,1); \t\tDATA3(4, TEX_BROWN144,TEX_X,1);\n\n            if ( fragCoord.x == 0 )\n            {\n                fragColor = vec4( sector.lightLevel, sector.sideDefCount, 0, 0 );\n            }\n            else\n            if ( fragCoord.x == 1 )\n            {\n                fragColor = vec4( sector.floorHeight, sector.ceilingHeight, sector.floorTex, sector.ceilingTex );\n            }\n            else\n            {\n                uint sideDefIndex = (uint(fragCoord.x) - 2u) / 3u;\n                uint sideDefData = (uint(fragCoord.x) - 2u) % 3u;\n\n                if ( sideDefIndex < uint(map.sectors[ sectorIndex ].sideDefCount) )\n                {\n                    DataSideDef sideDef = UnpackSideDef( map.sideDefs[ uint(sector.firstSideDef) + sideDefIndex ] );\n                    uvec4 unpacked = UNPACK_DATA(sideDef.bytePacked);\n\t\t\t\t\tuint lowerTex = unpacked.x;\n                    uint midTex = unpacked.y;\n                    uint upperTex = unpacked.z;\n                    uint flags = unpacked.w;\n                    \n                    if ( sideDefData == 0u )\n                    {                    \n                        fragColor = vec4( sideDef.A.x, sideDef.A.y, sideDef.B.x, sideDef.B.y );\n                    }\n                    else\n                    if ( sideDefData == 1u )\n                    {\n                        fragColor = vec4( sideDef.len, sideDef.lightLevel, midTex, sideDef.otherSector );\n                    }\n                    else\n                    {\n                        fragColor = vec4( lowerTex, upperTex, flags, 0 );\n                    }\n                }\n                else\n                {\n                    fragColor = vec4( 0 );\n                }\n            }\n        }\n    }\n    else\n    if( fragCoord.x < 130)\n    {\n        int entityIndex = fragCoord.y;\n        if ( entityIndex < 102 )\n        {\n            DataEntity entity = map.entities[entityIndex];\n            \n            if( fragCoord.x == 128)\n            {\n                fragColor = vec4( entity.type, entity.subType, entity.origin.x, entity.origin.y);\n            }\n            else\n            if( fragCoord.x == 129)\n            {\n                fragColor = vec4( entity.angle, entity.flags, entity.triggerPos.x, entity.triggerPos.y);\n            }\n        }\n        else\n        {\n            fragColor = vec4( 0 );\n        }\n    }\n    \n    \t#define DOOR_START 1    \n\n        #define DOOR_COUNT 6\n\t    #define DOOR_END ( DOOR_START + DOOR_COUNT )\n\n\t\t\t//Entities\n\t\t\n\t\t//BEGIN_BLOCK(vec2(128, 0));\n\t\t//BEGIN_ROW(0);\tDATA( 0, ENTITY_TYPE_PLAYER, 0, 1056, -3616 );\tDATA( 1, 90, 7, 0, 0 );\tEND_ROW();\n\n        // Doors must be the first entities so we can traverse them below\n\t    //#define DOOR_START 1    \n        \n\t\t//BEGIN_ROW(1);\n        //DATA( 0, ENTITY_TYPE_DOOR, 0, 1545, -2483 );\tDATA( 1, 0, 7, 0, 0 );\n\t\t//END_ROW();\n\n\t\t//BEGIN_ROW(2);\n        //DATA( 0, ENTITY_TYPE_DOOR, 0, 2926, -3830 );\tDATA( 1, 0, 7, 0, 0 );\n\t\t//END_ROW();\n\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vFontCoord = floor( fragCoord - FONT_POS );\n    vec2 vFontMax = 10. * FONT_CHAR;\n    bool isBigFont = ( vFontCoord.x >= 0.0 && vFontCoord.y >= 0.0 && vFontCoord.x < (vFontMax.x + 16.0) && vFontCoord.y < (vFontMax.y + 16.0) );\n\n    bool isMapData = all( lessThanEqual( fragCoord, vec2( 148, 100 ) ) );\n    \n    vec2 vMessageUV = vec2(fragCoord.x, (iResolution.y - 1.) - fragCoord.y);\n    int iMessageIndex = int(floor(vMessageUV.y / 8.0));\n    bool isMessage = (iMessageIndex < MESSAGE_COUNT) && vMessageUV.x < 240.;\n    \n    vec2 vGridCoord = floor( fragCoord - GRID_POS );\n\n#ifdef WRITE_GRID_DATA\n    bool isGridData = ( vGridCoord.x >= 0.0 && vGridCoord.y >= 0.0 && vGridCoord.x < GRID_SIZE.x && vGridCoord.y < GRID_SIZE.y );\n#else\n    bool isGridData = false;\n#endif\n    \n    if ( !isMapData && !isBigFont && !isMessage && !isGridData) \n    {\n    \tdiscard;\n    }\n            \n    fragColor = vec4(0.0,0.0,0.0,0.0);\n        \n    bool bReuseData = false;\n    if ( iFrame > 1 )\n    {\n\t    // Check Resolution\n        vec4 info = texelFetch( iChannel0, ivec2(0, 0), 0);\n        if ( (info.y == iResolution.x) && (info.z == iResolution.y) )\n        {\n            bReuseData = true;\n        }\n    }\n\n\tif ( bReuseData )\n    {\n        fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n        \n        //fragColor.r = sin(iTime * 10.0) *0.5 + 0.5; // flash the cache\n    }\n    else\n    {\n\t    if( isBigFont )\n    \t{\n            float fFontDigit = floor( vFontCoord.x / 16.0);\n            vec2 vFontPixel = floor( vFontCoord.xy );\n            vFontPixel.x = mod( vFontPixel.x, 16.0 );\n            float fValue = NumFont_BinChar( vFontPixel, fFontDigit );\n            //float fValue = NumFont_Char( vFontPixel, fFontDigit );            \n            fragColor =  vec4( fValue );\t        \n            return;\n        }\n        \n        if ( isMessage )\n        {\n            vMessageUV.y = mod(vMessageUV.y, 8.0);\n    \t\tPrintHudMessage( vMessageUV, iMessageIndex, fragColor.rgb );\t\n            fragColor.a = fragColor.r > 0. ? 1.0 : 0.0;\n            return;\n        }                  \n\n#ifdef WRITE_GRID_DATA\n        if ( isGridData )\n        {\n            vec2 vGridCellWorldMin = GRID_WORLD_MIN + (vGridCoord / GRID_SIZE) * (GRID_WORLD_MAX - GRID_WORLD_MIN);\n            vec2 vGridCellWorldMax = GRID_WORLD_MIN + ((vGridCoord + 1.) / GRID_SIZE) * (GRID_WORLD_MAX - GRID_WORLD_MIN);\n            \n            float fSize = 16.0;\n            \n            vec4 gridData = GetGridData(vGridCellWorldMin - fSize, vGridCellWorldMax + fSize);\n            \n            fragColor = gridData;\n            return;\n        }\n#endif // WRITE_GRID_DATA        \n        \n\t\tMainData( fragColor, ivec2(fragCoord.xy) );\n    }\n    \n    // Flashing sectors\n    if ( floor(fragCoord.x) == 0. ) \n    {\n        float fTestSectorId = floor(fragCoord.y);\n        if ( fTestSectorId == 31. || fTestSectorId == 65.)\n        {\n        \tfragColor.x = (hash(floor(iTime * 10.0)) > 0.2) ? 0.4 : 0.8;\n        }\n        else\n        if ( fTestSectorId == 36. || fTestSectorId == 37. )\n        {\n            fragColor.x = sin(iTime * 8.0) * 0.5 + 0.5;\n            fragColor.x = sqrt(fragColor.x);\n        }\n    }\n\n    // We need to modify the map data in this pass \n    // but as simply as possible due to constraints in the data shader.\n    // Doors are hardcoded to be the first n entities...\n    \n    // Output to the sector info texel\n    if ( floor(fragCoord.x) == 1. )\n    {\n        int iOutputSectorId = int( floor(fragCoord.y - 1.) );\n        \n        for (int iDoorIndex = DOOR_START; iDoorIndex < NO_UNROLL( DOOR_END ); iDoorIndex++)\n        {\n            ivec2 vAddress = ivec2(iDoorIndex, ENTITY_DATA_YPOS);\n            vec4 vEntData0 = LoadVec4( iChannel1, vAddress );\n            \n            //\n            vec3 vUnpacked0 = ByteUnpack3( vEntData0.x ) - 1.;\n            int iType = int(vUnpacked0.x);\n            int iSubType = int(vUnpacked0.y);\n            int iSectorId = int(vUnpacked0.z);\n            \n            // Validate it really is a door (could be blank on frame zero)\n            if ( iType == ENTITY_TYPE_DOOR )\n            {\n                if ( iSectorId == iOutputSectorId )\n                {\n                    // Update the ceiling height\n\t\t\t\t    // The entity target data[0].z field stores the height\n                    fragColor.y = vEntData0.z;\n                }                \n            }            \n            else if ( iType == ENTITY_TYPE_PLATFORM )\n            {\n                if ( iSectorId == iOutputSectorId )\n                {\n                    // Update the floor height\n\t\t\t\t    // The entity target data[0].z field stores the height\n                    fragColor.x = vEntData0.z;\n                }                \n            }\n        }        \n                \n    }\n}\n        \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 4265,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/plasma3/doom-remix-at-dooms-gate-level-1-theme-e1m1"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Sprite Sheet\n\n// Pickup / Enemy Sprites\n\n//////////////////////////////////////////////////////////////\n\n#define NO_UNROLL(X) (X + min(0,iFrame))\n#define NO_UNROLLU(X) (X + uint(min(0,iFrame)))\n\n\n//////////////////////////////////////////////////////////////\n// Texture Helpers\n//////////////////////////////////////////////////////////////\n\nfloat hash2D(vec2 p)\n{\n\treturn Hash( dot( p, vec2(1.0, 41.0) ) );\t\n}\n\nfloat noise1D( float p )\n{\n\tfloat fl = floor(p);\n\t\n\tfloat h0 = Hash( fl );\n\tfloat h1 = Hash( fl + 1.0 );\n\t\n\tfloat fr = p - fl;\n\tfloat fr2 = fr * fr;\n\tfloat fr3 = fr2 * fr;\n\t\n\tfloat t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tfloat t0 = 1.0 - t1;\n\t\n\treturn h0 * t0\n\t\t + h1 * t1;\n}\n\nfloat noise2D( vec2 p, float r )\n{\n\tvec2 fl = floor(p);\n\n\tfloat h00 = hash2D( mod(fl + vec2(0.0, 0.0), r) );\n\tfloat h10 = hash2D( mod(fl + vec2(1.0, 0.0), r) );\n\tfloat h01 = hash2D( mod(fl + vec2(0.0, 1.0), r) );\n\tfloat h11 = hash2D( mod(fl + vec2(1.0, 1.0), r) );\n\t\n\tvec2 fr = p - fl;\n\t\n\tvec2 fr2 = fr * fr;\n\tvec2 fr3 = fr2 * fr;\n\t\n\tvec2 t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tvec2 t0 = 1.0 - t1;\n\t\n\treturn h00 * t0.x * t0.y\n\t\t + h10 * t1.x * t0.y\n\t\t + h01 * t0.x * t1.y\n\t\t + h11 * t1.x * t1.y;\n}\n\nfloat fbm( vec2 p, float per )\n{\n\tfloat val = 0.0;\n\tfloat tot = 0.0;\n\tfloat mag = 0.5;\n\n\tp += 0.5;\n\tp = p * (1.0 / 8.0);\n\tval += noise2D(p, 4.0) * mag; tot+=mag; p=p*2.0 + 1.234; mag*=per;\t\n\tval += noise2D(p, 8.0) * mag; tot+=mag; p=p*2.0 + 2.456; mag*=per;\n\tval += noise2D(p, 16.0) * mag; tot+=mag; p=p*2.0 + 3.678; mag*=per;\n\tval += noise2D(p, 32.0) * mag; tot+=mag;\n\n\treturn val * (1.0 / tot);\n}\n\nfloat Indent(vec2 vTexCoord, vec2 vHigh, vec2 vLow, float fHighIntensity, float fLowIntensity)\n{\n\tvec2 vMin = min(vLow, vHigh);\n\tvec2 vMax = max(vLow, vHigh);\n\tif((vTexCoord.x < vMin.x) || (vTexCoord.x > vMax.x) || (vTexCoord.y < vMin.y) || (vTexCoord.y > vMax.y))\n\t\treturn 1.0;\n\n\tif((vTexCoord.x == vHigh.x) || (vTexCoord.y == vHigh.y))\n\t{\n\t\treturn fHighIntensity;\n\t}\n\t\n\tif((vTexCoord.x == vLow.x) || (vTexCoord.y == vLow.y))\n\t{\n\t\treturn fLowIntensity;\n\t}\n\t\n\treturn 1.0;\n}\n\nvec4 SmoothBump(const in vec2 vTexCoord, const in vec2 vMin, const in vec2 vMax, const in vec2 vLightDir, const in float fSize)\n{\n\tvec2 vNearest = min( max(vTexCoord, vMin), vMax );\n\tvec2 vDelta = vNearest - vTexCoord;\n    float fDeltaLen = length(vDelta);\n\tfloat fDist = (fDeltaLen - fSize) / fSize;\n\tvec2 vDir = vDelta;\n    if(fDeltaLen > 0.0) vDir = vDir / fDeltaLen;\n\tfloat fShade = dot(vDir, vLightDir);\n\t//return clamp(1.0 - (fDist / fSize), 0.0, 1.0) * fShade;\n\tfShade *= clamp(1.0 - abs((fDist)), 0.0, 1.0);\n\treturn vec4( fShade, fDist, (vTexCoord - vMin + fSize) / (vMax - vMin + fSize * 2.0) );\n}\n\n\nfloat wrap( const in float x , const in float r )\n{\n\treturn fract( x * (1.0 / r) ) * r;\n}\n\nvec4 Hexagon( vec2 vUV )\n{\n\tvec2 vIndex;\n\t\n\tfloat fRow = floor(vUV.y);\n\t\n\tvec2 vLocalUV = vUV;\n\tfloat fRowEven = wrap(fRow, 2.0);\n\tif(fRowEven < 0.5)\n\t{\n\t\tvLocalUV.x += 0.5;\n\t}\n\t\n\tvIndex = floor(vLocalUV);\n\t\n\tvec2 vTileUV = fract(vLocalUV);\n\t{\n\t\tfloat m = 2.0 / 3.0;\n\t\tfloat c = 2.0 / 3.0;\n\t\tif((vTileUV.x *m + c) < vTileUV.y)\n\t\t{\n\t\t\tif(fRowEven < 0.5)\n\t\t\t{\n\t\t\t\tvIndex.x -= 1.0;\n\t\t\t}\n\t\t\tfRowEven = 1.0 - fRowEven;\t\t\t\t\n\t\t\tvIndex.y += 1.0;\n\t\t}\n\t}\n\t\n\t{\n\t\tfloat m = -2.0 / 3.0;\n\t\tfloat c = 4.0 / 3.0;\n\t\tif((vTileUV.x *m + c) < vTileUV.y)\n\t\t{\n\t\t\tif(fRowEven >= 0.5)\n\t\t\t{\n\t\t\t\tvIndex.x += 1.0;\n\t\t\t}\n\t\t\tfRowEven = 1.0 - fRowEven;\t\t\t\t\n\t\t\tvIndex.y += 1.0;\n\t\t}\n\t}\n\t\n\tvec2 vCenter = vIndex - vec2(0.0, -1.0 / 3.0);\n\tif(fRowEven > 0.5)\n\t{\n\t\tvCenter.x += 0.5;\n\t}\n\t\n\tvec2 vDelta = vUV - vCenter;\n\t\n\t//vDelta = abs(vDelta);\n\t\n\tfloat d1 = vDelta.x;\n\tfloat d2 = dot(vDelta, normalize(vec2(2.0/3.0, 1.0)));\n\tfloat d3 = dot(vDelta, normalize(vec2(-2.0/3.0, 1.0)));\n\t\n\td2 *= 0.9;\n\td3 *= 0.9;\n\t\n\tfloat fDist = max( abs(d1), abs(d2) );\n\tfDist = max( fDist, abs(d3) );\n\t\n\tfloat fTest = max(max(-d1, -d2), d3);\n\t\n\treturn vec4(vIndex, abs(fDist), fTest);\n}\n\n\n//////////////////////////////////////////////////////////////\n// Raymarching\n\n\nstruct SceneResult\n{\n\tfloat fDist;\n\tfloat fObjectId;\n    vec3 vUVW;\n};\n\nSceneResult Scene_Union( const in SceneResult a, const in SceneResult b )\n{\n    if ( a.fDist < b.fDist )\n    {\n        return a;\n    }\n    return b;\n}\n    \nSceneResult Scene_Subtract( const in SceneResult a, const in SceneResult b )\n{\n    if ( -a.fDist < b.fDist )\n    {\n        return a;\n    }\n\n    SceneResult result;\n    result.fDist = -b.fDist;\n    result.fObjectId = b.fObjectId;\n    result.vUVW = b.vUVW;\n    return result;\n}\n\nSceneResult Scene_Intersection( const in SceneResult a, const in SceneResult b )\n{\n    if ( a.fDist > b.fDist )\n    {\n        return a;\n    }\n    return b;\n}\n    \nSceneResult Scene_GetDistance( const vec3 vPos );    \n\nvec3 Scene_GetNormal(const in vec3 vPos)\n{\n    const float fDelta = 0.01;\n    \n#if 1    \n    // dont unroll normal calculation ( from https://www.shadertoy.com/view/ldd3DX )\n    \n    vec3 n = vec3(0.0);\n    for( int i=0; i<NO_UNROLL(4); i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*Scene_GetDistance(vPos+e*fDelta).fDist;\n    }\n    \n    return normalize( n );\n#else\n    \n    vec2 e = vec2( -1, 1 );\n    \n    vec3 vNormal = \n        Scene_GetDistance( vPos + e.yxx * fDelta ).fDist * e.yxx + \n        Scene_GetDistance( vPos + e.xxy * fDelta ).fDist * e.xxy + \n        Scene_GetDistance( vPos + e.xyx * fDelta ).fDist * e.xyx + \n        Scene_GetDistance( vPos + e.yyy * fDelta ).fDist * e.yyy;\n    \n    if ( dot( vNormal, vNormal ) < 0.00001 )\n    {\n        return vec3(0, 1, 0);\n    }\n    \n    return normalize( vNormal );\n#endif\n}    \n\nSceneResult Scene_Trace( const in vec3 vRayOrigin, const in vec3 vRayDir, float maxDist )\n{\t\n    SceneResult result;\n    result.fDist = 0.0;\n    result.vUVW = vec3(0.0);\n    result.fObjectId = 0.0;\n    \n\tfloat t = 0.1;\n\tconst int kRaymarchMaxIter = 128;\n\tfor(int i=0; i<kRaymarchMaxIter; i++)\n\t{\t\t\n\t\tresult = Scene_GetDistance( vRayOrigin + vRayDir * t );\t\t\n        t += result.fDist;\n\n        if ( abs(result.fDist) < 0.001 )\n\t\t{\n\t\t\tbreak;\n\t\t}\t\t\n        if ( t > maxDist )\n        {\n            result.fObjectId = -1.0;\n\t        t = maxDist;\n            break;\n        }\n\t}\n    \n    result.fDist = t;\n\n    return result;\n}\n\n\nvec4 Raymarch_GetColor( vec3 vRayOrigin, vec3 vRayDir )\n{\n    vec4 vColor = vec4(0);\n    \n    return vColor;\n}\n\nstruct PoseLeg\n{\n    vec3 vHip;\n    vec3 vKnee;\n    vec3 vAnkle;\n    vec3 vToe;\n};\n\nstruct PoseArm\n{\n    vec3 vShoulder;\n    vec3 vElbow;\n    vec3 vWrist;\n    vec3 vHand;\n};\n\nstruct Pose\n{\n    PoseLeg leftLeg;\n    PoseLeg rightLeg;\n    PoseArm leftArm;\n    PoseArm rightArm;\n    \n    vec3 vHeadUp;\n    vec3 vHeadFd;\n};\n    \nstruct CharDef\n{\n    float fToe;\n    float fAnkle;\n    float fKnee;\n    float fHip;\n    \n    float fShoulder;\n    float fElbow;\n    float fWrist;\n    float fHand;\n    \n    float fHead1;\n    float fHead2;\n        \n    vec3 vCol;\n\n    vec3 vUniformColor0;\n    vec3 vUniformColor1;\n    vec3 vBootsColor;\n    vec3 vSkinColor;\n\n    vec3 vEyeColor;\n    vec3 vHairColor;\n};\n\nvoid CharDef_Default( inout CharDef charDef )\n{    \n    charDef.fToe = 2.5;\n    charDef.fAnkle = 3.0;\n    charDef.fKnee = 3.0;\n    charDef.fHip = 4.0;\n    \n    charDef.fShoulder = 3.0;\n    charDef.fElbow = 2.5;\n    charDef.fWrist = 2.4;\n    charDef.fHand = 2.5;\n    \n    charDef.fHead1 = 4.0;\n    charDef.fHead2 = 3.0;    \n    \n    charDef.vCol = vec3( 0.4, 1.0, 0.2 );\n    charDef.vEyeColor = vec3( 1, 0, 0 );\n    \n    charDef.vUniformColor0 = vec3( 0, 1, 0 );\n    charDef.vUniformColor1 = vec3( 0, 0, 1 );\n    charDef.vBootsColor = vec3(0.5);\n    charDef.vSkinColor = vec3(239, 163, 115) / 255.;    \n    charDef.vHairColor = vec3( 0 );\n}\n\nvoid CharDef_Imp( inout CharDef charDef )\n{    \n    CharDef_Default(charDef);\n    \n    float fExtra = 1.0;\n    \n    charDef.fToe += fExtra;\n    charDef.fAnkle += fExtra;\n    charDef.fKnee += fExtra;\n    charDef.fHip += fExtra;\n    \n    charDef.fShoulder += fExtra;\n    charDef.fElbow += fExtra;\n    charDef.fWrist += fExtra;\n    charDef.fHand += fExtra;\n    \n    charDef.fHead1 += 0.4;\n    charDef.fHead2 += 0.4;  \n    \n    charDef.vCol = vec3( 1.0, 0.5, 0.2 );\n    charDef.vUniformColor0 = charDef.vCol;\n\tcharDef.vUniformColor1 = charDef.vCol * 0.7;\n\tcharDef.vSkinColor = charDef.vCol * 1.2;\n    charDef.vBootsColor = charDef.vCol * 0.5;\n    charDef.vHairColor = charDef.vSkinColor;\n\n    charDef.vEyeColor = vec3( 1.0, 0.9, .1 ) * 10.;\n}\n\nvoid CharDef_Trooper( inout CharDef charDef )\n{    \n    CharDef_Default(charDef);\n\n    float fExtra = 0.1;\n    \n    charDef.fToe += fExtra;\n    charDef.fAnkle += fExtra;\n    charDef.fKnee += fExtra;\n    charDef.fHip += fExtra;\n    \n    charDef.fShoulder += fExtra;\n    charDef.fElbow += fExtra;\n    charDef.fWrist += fExtra;\n    charDef.fHand += fExtra;\n    \n    charDef.fHead1 = 3.5;\n    charDef.fHead2 = 3.2;      \n\n    charDef.vUniformColor0 = vec3( 87, 67, 44 ) / 255.;\n    charDef.vUniformColor1 = 1.5 * vec3( 90, 71, 49 ) / 255.;\n    charDef.vBootsColor = 1.5 * vec3(63,71,43) / 255.;\n\n    charDef.vHairColor = vec3( 67, 147, 55) / 255.;\n\n    charDef.fHead1 = 3.5;\n    charDef.fHead2 = 3.2;      \n}\n\nvoid CharDef_Sergeant( inout CharDef charDef )\n{    \n    CharDef_Default(charDef);\n\n    float fExtra = 0.2;\n    \n    charDef.fToe += fExtra;\n    charDef.fAnkle += fExtra;\n    charDef.fKnee += fExtra;\n    charDef.fHip += fExtra;\n    \n    charDef.fShoulder += fExtra;\n    charDef.fElbow += fExtra;\n    charDef.fWrist += fExtra;\n    charDef.fHand += fExtra;\n    \n    charDef.fHead1 = 3.5;\n    charDef.fHead2 = 3.2;      \n\n    charDef.vCol = vec3( 0.3, 0.3, 0.3 );\n\n    charDef.vUniformColor0 = vec3( 0.3, .3, .3 );\n    charDef.vUniformColor1 = vec3( 0.1, 0.1, 0.1 );\n    charDef.vBootsColor = vec3(0.5,0,0);\n\n    charDef.vHairColor = vec3( 179, 115, 71) / 255.;\n}\n\nstruct Scene\n{\n    float fCameraRotation;\n    vec3 vLightDir;\n    vec3 vLightColor;\n    vec3 vAmbientLight;\n    \n    bool bArmor;\n    bool bCharacter;\n    \n    CharDef charDef;\n    Pose pose;\n    \n    vec3 vWeaponStart;\n    vec3 vWeaponDir;\n    \n};\n    \nScene g_scene;\n\nvoid Pose_MirrorLeft( inout Pose pose )\n{\n    vec3 vMirror = vec3( -1.0, 1, 1 );\n    pose.rightLeg.vHip = pose.leftLeg.vHip * vMirror;\n    pose.rightLeg.vKnee = pose.leftLeg.vKnee * vMirror;\n    pose.rightLeg.vAnkle = pose.leftLeg.vAnkle * vMirror;\n    pose.rightLeg.vToe = pose.leftLeg.vToe * vMirror;\n\n    pose.rightArm.vShoulder = pose.leftArm.vShoulder * vMirror;\n    pose.rightArm.vElbow = pose.leftArm.vElbow * vMirror;\n    pose.rightArm.vWrist = pose.leftArm.vWrist * vMirror;\n    pose.rightArm.vHand = pose.leftArm.vHand * vMirror;\n}\n\n\nvoid Pose_Flip( inout Pose pose )\n{\n    vec3 vTemp;\n    vec3 vMirror = vec3( -1.0, 1, 1 );\n        \n\t#define SWAP_FLIP(X,Y) vTemp=X;X=Y*vMirror; Y=vTemp*vMirror;\n    \n    SWAP_FLIP(pose.rightLeg.vHip, pose.leftLeg.vHip);\n    SWAP_FLIP(pose.rightLeg.vKnee, pose.leftLeg.vKnee);\n    SWAP_FLIP(pose.rightLeg.vAnkle, pose.leftLeg.vAnkle);\n    SWAP_FLIP(pose.rightLeg.vToe, pose.leftLeg.vToe);\n\n    SWAP_FLIP(pose.rightArm.vShoulder, pose.leftArm.vShoulder);\n    SWAP_FLIP(pose.rightArm.vElbow, pose.leftArm.vElbow);\n    SWAP_FLIP(pose.rightArm.vWrist, pose.leftArm.vWrist);\n    SWAP_FLIP(pose.rightArm.vHand, pose.leftArm.vHand);\n    \n    pose.vHeadUp *= vMirror;\n    pose.vHeadFd *= vMirror;\n}\n\nvoid Pose_Clear( inout Pose pose )\n{\n    pose.leftLeg.vHip = vec3( 2.0, 24.0, 1.0 );\n    pose.leftLeg.vKnee = vec3( 5.0, 14.0, -2.0 );\n    pose.leftLeg.vAnkle = vec3( 5.0, 3.0, -0.0 );\n    pose.leftLeg.vToe = vec3( 5.0, 3.0, -4.0 );\n\n    pose.leftArm.vShoulder = vec3( 3.5, 40.0, 0.0 );\n    pose.leftArm.vElbow = vec3( 8.0, 30.0, 1.0 );\n    pose.leftArm.vWrist = vec3( 9.0, 28.0, -4.0 );\n    pose.leftArm.vHand = vec3( 10.0, 28.0, -5.0 );\n    \n    Pose_MirrorLeft( pose );\n    \n    pose.vHeadUp = vec3(0, 1, 0);\n    pose.vHeadFd = vec3(0, 0, -1);\n}\n\nvoid Pose_Attack( inout Pose pose )\n{\n    pose.leftLeg.vHip = vec3( 2.0, 24.0, 1.0 );\n    pose.leftLeg.vKnee = vec3( 5.0, 14.0, -2.0 );\n    pose.leftLeg.vAnkle = vec3( 5.0, 3.0, -0.0 );\n    pose.leftLeg.vToe = vec3( 5.0, 3.0, -2.0 );\n\n    pose.leftArm.vShoulder = vec3( 3.5, 40.0, -1.0 );\n    pose.leftArm.vElbow = vec3( 8.0, 34.0, -5.0 );\n    pose.leftArm.vWrist = vec3( 1.2, 37.0, -10.0 );\n    pose.leftArm.vHand = vec3( 0.0, 37.0, -10.0 );\n    \n    Pose_MirrorLeft( pose );\n        \n    pose.leftLeg.vHip.z = 3.0;\n    pose.leftLeg.vKnee.z = 5.0;\n    pose.leftLeg.vAnkle.z = 8.0;\n    pose.leftLeg.vAnkle.y = 4.0;\n    pose.leftLeg.vToe.z = 5.0;\n\n    pose.rightLeg.vHip.z = 1.0;\n    pose.rightLeg.vKnee.z = -5.0;\n    pose.rightLeg.vAnkle.z = -8.0;\n    pose.rightLeg.vToe.z = -7.0;\n\n    pose.leftArm.vShoulder.z += 1.;\n    pose.rightArm.vShoulder.z -= 1.;\n\n    pose.leftArm.vHand.y += 1.8;\n    pose.leftArm.vHand.z -= 3.;\n    pose.leftArm.vWrist.z -= 3.;\n    pose.rightArm.vHand.z += 1.;\n    pose.rightArm.vWrist.z += 1.;\n    \n    pose.vHeadUp = vec3(0, 1, -.5);\n    pose.vHeadFd = vec3(0, 0, -1);    \n}\n\nvoid Pose_Walk1( inout Pose pose )\n{\n    pose.leftLeg.vHip = vec3( 2.0, 24.0, 1.0 );\n    pose.leftLeg.vKnee = vec3( 5.0, 14.0, -4.0 );\n    pose.leftLeg.vAnkle = vec3( 5.0, 8.0, 7.0 );\n    pose.leftLeg.vToe = vec3( 5.0, 4.0, 6.0 );\n\n    pose.rightLeg.vHip = vec3( -2.0, 24.0, 1.0 );\n    pose.rightLeg.vKnee = vec3( -5.0, 14.0, -2.0 );\n    pose.rightLeg.vAnkle = vec3( -5.0, 3.0, 2.0 );\n    pose.rightLeg.vToe = vec3( -5.0, 2.0, -2.0 );\n\n    pose.leftArm.vShoulder.z += 1.;\n    pose.rightArm.vShoulder.z -= 1.;\n    \n    pose.vHeadUp = vec3(0, 1, -.5);\n    pose.vHeadFd = vec3(0.1, 0, -1);    \n    \n    \n    pose.rightArm.vShoulder = vec3( -3.5, 40.0, 1.0 );\n    pose.rightArm.vElbow = vec3( -8.0, 30.0, -0.0 );\n    pose.rightArm.vWrist = vec3( -9.0, 24.0, -8.0 );\n    pose.rightArm.vHand = vec3( -9.0, 23.0, -9.0 );    \n\n    pose.leftArm.vShoulder = vec3( 3.5, 40.0, -1.0 );\n    pose.leftArm.vElbow = vec3( 8.0, 30.0, 2.0 );\n    pose.leftArm.vWrist = vec3( 9.0, 24.0, -4.0 );\n    pose.leftArm.vHand = vec3( 9.0, 23.0, -6.0 );\n}\n\nvoid Pose_Walk2( inout Pose pose )\n{\n    Pose_Walk1( pose );\n    Pose_Flip( pose );\n}\n\nvoid Pose_Pain( inout Pose pose )\n{\n    pose.leftLeg.vHip = vec3( 2.0, 24.0, 1.0 );\n    pose.leftLeg.vKnee = vec3( 4.0, 15.0, -2.0 );\n    pose.leftLeg.vAnkle = vec3( 4.0, 4.0, -0.0 );\n    pose.leftLeg.vToe = vec3( 4.0, 3.0, -4.0 );\n\n    pose.leftArm.vShoulder = vec3( 3.5, 36.0, 6.0 );\n    pose.leftArm.vElbow = vec3(10.0, 27.0, 4.0 );\n    pose.leftArm.vWrist = vec3( 12.0, 25.0, -6.0 );\n    pose.leftArm.vHand = vec3( 12.5, 26.0, -6.0 );\n    \n    Pose_MirrorLeft( pose );\n\n    pose.rightLeg.vHip = vec3( -2.0, 24.0, 1.0 );\n    pose.rightLeg.vKnee = vec3( -4.0, 15.0, 2.0 );\n    pose.rightLeg.vAnkle = vec3( -4.0, 4.0, 3.0 );\n    pose.rightLeg.vToe = vec3( -4.0, 3.0, -2.0 );\n\n    \n    pose.vHeadUp = vec3(0, 1, .5);\n    pose.vHeadFd = vec3(0, .5, -1);\n    \n}\n\nvoid Pose_Die( inout Pose pose )\n{\n    pose.leftLeg.vHip = vec3( 2.0, 20.0, -3.0 );\n    pose.leftLeg.vKnee = vec3( 4.0, 12.0, -10.0 );\n    pose.leftLeg.vAnkle = vec3( 4.0, 4.0, -6.0 );\n    pose.leftLeg.vToe = vec3( 4.0, 3.0, -11.0 );\n\n    pose.leftArm.vShoulder = vec3( 3.5, 28.0, 9.0 );\n    pose.leftArm.vElbow = vec3(10.0, 23.0, 4.0 );\n    pose.leftArm.vWrist = vec3( 9.0, 28.0, -6.0 );\n    pose.leftArm.vHand = vec3( 8.5, 29.0, -6.0 );\n    \n    Pose_MirrorLeft( pose );\n\n    pose.leftArm.vWrist.y -= 4.0;\n    pose.leftArm.vHand.y -= 5.0;\n    pose.leftArm.vHand.z -= 2.0;\n    \n    pose.rightArm.vHand.z -= 2.0;\n    \n    pose.rightLeg.vKnee.x -= 3.0;\n        \n    pose.vHeadUp = vec3(0, 1, .6);\n    pose.vHeadFd = vec3(0, .5, -1);\n    \n}\n\nvoid Pose_Weapon()\n{\n    \n    g_scene.vWeaponStart = g_scene.pose.rightArm.vHand + vec3( 0, 2, 0);\n    g_scene.vWeaponDir = normalize( g_scene.pose.leftArm.vHand - g_scene.vWeaponStart );\n}\n\nvoid Weapon_None()\n{\n\tg_scene.vWeaponStart = vec3(-10,-100,0);\n    g_scene.vWeaponDir = vec3(1, 0, 0);\n}\n\nvoid Weapon_DefaultPos()\n{\n\tg_scene.vWeaponStart = vec3(-10,6,0);\n    g_scene.vWeaponDir = vec3(1, 0, 0);\n    \n}\n\n\nvoid Pose_Dead( inout Pose pose )\n{\n    float dy = 4.0;\n    pose.leftLeg.vHip = vec3( 2.0, dy + 3.0, 1.0 );\n    pose.leftLeg.vKnee = vec3( 4.0, dy + 4.0, -2.0 );\n    pose.leftLeg.vAnkle = vec3( 15.0, dy + 7.0, -0.0 );\n    pose.leftLeg.vToe = vec3( 6.0, dy + 4.0, -2.0 );\n\n    pose.leftArm.vShoulder = vec3( 3.5, dy + 5.0, 0.0 );\n    pose.leftArm.vElbow = vec3( 4.0, dy + 4.0, 1.0 );\n    pose.leftArm.vWrist = vec3( 3.0, dy + 6.0, -4.0 );\n    pose.leftArm.vHand = vec3( 5.0, dy + 4.0, -5.0 );\n    \n    Pose_MirrorLeft( pose );\n\n    pose.leftArm.vElbow.y += 5.;\n    pose.leftLeg.vKnee.y += 4.;\n    \n    pose.vHeadUp = vec3(1, 0.3, 0);\n    pose.vHeadFd = vec3(0, 0, -1);\n    \n    Weapon_None();\n}\n\nvoid Scene_Clear()\n{\n    g_scene.vLightDir = normalize( vec3(0, 1, -0.3) );\n    g_scene.vLightColor = vec3(1, 1, 1);\n    g_scene.vAmbientLight = vec3(0.4);\n    \n    g_scene.bCharacter = false;\n    g_scene.bArmor = false;\n        \n    g_scene.fCameraRotation = 0.0;\n    \n\t\n    Weapon_None();\n    \n    Pose_Clear( g_scene.pose );\n    \n    CharDef_Default( g_scene.charDef );\n}\n\n\n\nconst float kMaxTraceDist = 1000.0;\n\n#define MAT_BG 0.0\n#define MAT_CHARACTER 1.0\n#define MAT_WHITE 2.0\n#define MAT_GREY 3.0\n#define MAT_SHOTGUN 4.0\n#define MAT_WOOD 5.0\n#define MAT_HEAD 6.0\n#define MAT_EYE 7.0\n\nvec2 Segment_Internal( vec3 vPos, vec3 vP0, vec3 vP1 )\n{\n\tvec3 pa = vPos - vP0;\n\tvec3 ba = vP1 - vP0;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\t\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nfloat Segment( vec3 vPos, vec3 vP0, vec3 vP1, float r0, float r1 )\n{\n    vec2 vC = Segment_Internal( vPos, vP0, vP1 );\n    \n    return vC.x - mix(r0, r1, vC.y);\n}\n\nvec3 Segment3( vec3 vPos, vec3 vP0, vec3 vP1, float r0, float r1 )\n{\n    //return vec3( Segment( vPos, vP0, vP1, r0, r1 ) );\n    vec3 vDir = normalize(vP1 - vP0);\n    float len = length( vP1 - vP0 );\n    float t = dot( vDir, vPos - vP0 ) / len;\n    float clamped_t = clamp( t, 0.0, 1.0 );\n\n    vec3 vClosestOnLine = mix( vP0, vP1, clamped_t);\n    vec3 vDirToClosest = vPos - vClosestOnLine;\n    float fClosestDist = length( vDirToClosest );\n    \n    float d = fClosestDist - mix(r0, r1, t);\n\n    vec3 fd = vec3(1,0,0);\n    \n    return vec3( d, t, dot( fd, normalize(vDirToClosest))  );\n}\n\n\n/*\nfloat Limb( vec3 vPos, vec3 vP0, vec3 vP1, vec3 vPerpDir, float l1, float l2, float rStart, float rMid, float rEnd )\n{\n    vec3 vStartToEnd = vP1 - vP0;\n    vec3 vDir = normalize( vStartToEnd );\n    \n    vec3 vTemp = cross( vDir, vPerpDir);\n    vec3 vPerDir = normalize( cross( vDir, vTemp) );\n    \n    float d = length( vStartToEnd );\n    \n    float d1 = (l1 * l1 - l2 *  l2 + d * d) / ( 2.0 * d );\n    float d2 = d - d1;\n    \n    float h = sqrt( l1 * l1 - d1 * d1 );\n\n    vec3 vMidPoint = vP0 + vDir * d1 + vPerpDir * h;\n    \n    return LimbSegments();\n    float fSD1 = Segment( vPos, vP0, vMidPoint, rStart, rMid );\n    float fSD2 = Segment( vPos, vMidPoint, vP1, rMid, rEnd );\n\n    return min( fSD1, fSD2 );\n}\n*/\nfloat SmoothMin( float a, float b, float k )\n{\n\t//return min(a,b);\n\t\n\t\n    //float k = 0.06;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 SmoothMin3( vec3 a, vec3 b, float k )\n{\n\t//return min(a,b);\n\t\n\t\n    //float k = 0.06;\n\tfloat h = clamp( 0.5 + 0.5*(b.x-a.x)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 LimbCombine( vec3 fA, vec3 fB )\n{\n    return SmoothMin3( fA, fB, 0.5);\n    //return min( fA, fB );\n}\n\nvec3 Chain( vec3 vPos, vec4 vA, vec4 vB, vec4 vC, vec4 vD, vec3 vWeights )\n{\n    vec3 vD1 = Segment3( vPos, vA.xyz, vB.xyz, vA.w, vB.w );\n    vec3 vD2 = Segment3( vPos, vB.xyz, vC.xyz, vB.w, vC.w );\n    vec3 vD3 = Segment3( vPos, vC.xyz, vD.xyz, vC.w, vD.w );\n    \n    vD1.y = vD1.y * vWeights.x;\n    vD2.y = vWeights.x + vD2.y * vWeights.y;\n    vD3.y = vWeights.x + vWeights.y + vD3.y * vWeights.z;\n    \n    vec3 vResult = LimbCombine( vD1, vD2 );    \n    vResult = LimbCombine( vResult, vD3 );    \n    return vResult;\n}\n\nvec3 LegDist( vec3 vPos, PoseLeg leg )\n{    \n    return Chain( \n        vPos,\n        vec4(leg.vToe, g_scene.charDef.fToe),\n        vec4(leg.vAnkle, g_scene.charDef.fAnkle),\n        vec4(leg.vKnee, g_scene.charDef.fKnee), \n        vec4(leg.vHip, g_scene.charDef.fHip), \n        vec3(0.1, 0.4, 0.5 )\n    );\n}\n\nvec3 ArmDist( vec3 vPos, PoseArm arm )\n{\n    return Chain( \n        vPos,\n        vec4(arm.vShoulder, g_scene.charDef.fShoulder), \n        vec4(arm.vElbow, g_scene.charDef.fElbow), \n        vec4(arm.vWrist, g_scene.charDef.fWrist),\n        vec4(arm.vHand, g_scene.charDef.fHand),\n        vec3(0.5, 0.4, 0.1 )\n    );    \n}\n\n\nvec3 TorsoDistance( vec3 vPos, vec3 vA, vec3 vB, vec3 vC, vec3 vD, float fSizeTop, float fSizeBase )\n{    \n    vec3 vMidBase = (vA + vB) * 0.5;\n    vec3 vMidTop = (vC + vD) * 0.5;\n    \n    vec3 vAxis = vMidTop - vMidBase;\n    float fAxisLen = length( vAxis );\n    vec3 vAxisDir = normalize( vAxis );\n    \n    float fProjection = dot( vAxisDir, vPos - vMidBase );\n    \n    float fNormProj = fProjection / fAxisLen;\n    float fNormProjClamped = clamp( fNormProj, 0., 1. );\n    \n    //vec3 vProjected = vMidBase + vAxisDir * clamp( fProjection, 0., fAxisLen );\n    \n    vec3 vSpinePos = mix( vMidBase, vMidTop, fNormProjClamped );\n\n    vec3 vPerpBase = (vB - vA) * 0.5;\n    vec3 vPerpTop = (vD - vC) * 0.5;\n    \n    vec3 vPerp = mix( vPerpBase, vPerpTop, fNormProj );\n    vec3 vPerpDir = normalize( vPerp );\n    \n    float fSideLen = length( vPerp );\n    \n    float fPerpProj = dot( vPerpDir, vPos - vSpinePos );\n    float fPerpProjClamped = clamp( fPerpProj, -fSideLen, fSideLen );\n    \n\tvec3 vBackPlanePos = vSpinePos + vPerpDir * fPerpProjClamped;\n    \n    float fSize = mix( fSizeBase, fSizeTop, fNormProjClamped );\n    \n    //float fNormPerpProj = fPerpProj / length(vPerp);\n    //float fNormPerpProjClamped = clamp( fNormPerpProj, -1., 1.);\n    \n    //vec3 vSidePos = vSpinePos + vPerp;\n    //vec3 vBackPlanePos = mix( vSpinePos, vSidePos, fNormPerpProjClamped );\n    \n    \n    float fDistance = length(vPos - vBackPlanePos) - fSize;\n    \n    return vec3( fDistance, fNormProj, fPerpProj / (fSideLen * 2.0) + 0.5);\n}\n\nfloat BodyCombine( float fA, float fB )\n{\n    return SmoothMin( fA, fB, 0.5);\n    //return min( fA, fB );\n}\nvec3 BodyCombine3( vec3 fA, vec3 fB )\n{\n    return SmoothMin3( fA, fB, 0.5);\n    //return min( fA, fB );\n}\n\nSceneResult Character_GetDistance( vec3 vPos )\n{\n    SceneResult result = SceneResult( kMaxTraceDist, MAT_BG, vec3(0.0) );\n\n\n    vec3 vLeftLeg = LegDist( vPos, g_scene.pose.leftLeg );\n    vec3 vRightLeg = LegDist( vPos, g_scene.pose.rightLeg );\n    vec3 vLeftArm = ArmDist( vPos, g_scene.pose.leftArm );\n    vec3 vRightArm = ArmDist( vPos, g_scene.pose.rightArm );\n    vec3 vTorsoDist = TorsoDistance( \n        vPos,\n        g_scene.pose.leftLeg.vHip, \n        g_scene.pose.rightLeg.vHip,\n        g_scene.pose.leftArm.vShoulder,\n        g_scene.pose.rightArm.vShoulder,\n    \tg_scene.charDef.fShoulder, g_scene.charDef.fHip);\n        \n    vTorsoDist.y += 1.0;\n    vLeftArm.y += 2.0;\n    vRightArm.y += 2.0;            \n    vLeftArm.z += 1.0;\n    vLeftLeg.z += 1.0;\n        \n    vec3 vLimbDist = vec3(10000.0);\n    vLimbDist = BodyCombine3( vLimbDist, vLeftLeg );\n    vLimbDist = BodyCombine3( vLimbDist, vRightLeg );\n    vLimbDist = BodyCombine3( vLimbDist, vLeftArm );\n    vLimbDist = BodyCombine3( vLimbDist, vRightArm );        \n    vec3 vCharacterDist = BodyCombine3( vLimbDist, vTorsoDist );\n\n    //vCharacterDist.x -= fbm( vLimbDist.xy * 10., 0.9 ) * 2.0;\n    \n    float fNeckSize = 1.0;\n    float fNeckLen = 3.0;\n\n    vec3 vNeckBase = (g_scene.pose.leftArm.vShoulder + g_scene.pose.rightArm.vShoulder) * 0.5;\n    vec3 vNeckTop = vNeckBase + g_scene.pose.vHeadUp * fNeckLen;\n    vec3 vNeckDist = Segment3( vPos, vNeckBase, vNeckTop, fNeckSize, fNeckSize );\n    \n    float fHead1 = g_scene.charDef.fHead1;\n    float fHead2 = g_scene.charDef.fHead2;\n    float fHeadTop = 6.0;\n    float fHeadChin = 2.0;\n    \n    vec3 vHeadBase = vNeckBase + g_scene.pose.vHeadUp * ( fHeadChin + fHead2);\n    vec3 vHead2 = vHeadBase  + g_scene.pose.vHeadFd * (fHead2 * .5);\n    vec3 vHead1 = vHeadBase + g_scene.pose.vHeadUp * (fHeadTop - fHead1);\n    \n    vec3 vHeadDist = Segment3( vPos, vHead1, vHead2, fHead1, fHead2 );\n    vHeadDist = SmoothMin3( vHeadDist, vNeckDist, 0.5 );\n\n    vec3 vNosePos = vHead1 + g_scene.pose.vHeadFd * fHead1 * 1.2 - g_scene.pose.vHeadUp * 1.5;\n    float fNoseDist = length( vPos - vNosePos ) - 1.;\n    vHeadDist.x = min( vHeadDist.x, fNoseDist ); // keep material\n\n\n    vec3 vEyePerp = normalize( cross(g_scene.pose.vHeadFd, g_scene.pose.vHeadUp) );\n\n    vec3 vEyePos1 = vHead1 + g_scene.pose.vHeadFd * fHead1 + vEyePerp * 1.5;\n    float fEyeDist1 = length( vPos - vEyePos1 ) - 1.;\n\n    vec3 vEyePos2 = vHead1 + g_scene.pose.vHeadFd * fHead1 - vEyePerp * 1.5;\n    float fEyeDist2 = length( vPos - vEyePos2 ) - 1.;\n    \n    float fEyeDist = min( fEyeDist1, fEyeDist2 );\n        \n    vHeadDist.x = max( vHeadDist.x, -(fEyeDist - 0.2) );\n    \n    \n    //vCharacterDist = BodyCombine3( vCharacterDist, vHeadDist );\n    result = Scene_Union( result, SceneResult( vHeadDist.x, MAT_HEAD, vHeadDist.yzz ) );    \n    \n    \n    \n    result = Scene_Union( result, SceneResult( fEyeDist, MAT_EYE, g_scene.charDef.vCol ) );    \n        \n    result = Scene_Union( result, SceneResult( vCharacterDist.x, MAT_CHARACTER, vCharacterDist.yzz ) );    \n\n         \n    return result;\n}\n\n\nSceneResult Armor_GetDistance( vec3 vPos )\n{\n    vPos.x = abs(vPos.x);\n\n    vPos.y += 1.;\n    \n    float fScale = 1.4;\n    vPos /= fScale;\n    \n    float fDist1 = Segment( vPos, vec3(0,10,2), vec3(6, 9, 0), 4., 4. );\n    float fDist2 = Segment( vPos, vec3(0,10,0), vec3(0, 5, 0), 5., 6. );\n    float fDist = SmoothMin( fDist1, fDist2, 1.5 );\n\n    float fDistHole1 = Segment( vPos, vec3(0,12,-1), vec3(0, -2, -0.5), 3.5, 4.5 );    \n    float fDistHole2 = Segment( vPos, vec3(0,10,2), vec3(8, 8, -1), 3.0, 3.0 );\n    float fDistHole = SmoothMin( fDistHole1, fDistHole2, 1.5 );\n\n    SceneResult result = SceneResult( fDist, MAT_WHITE, vec3(0.0) );\n        \n    result = Scene_Subtract( result, SceneResult( fDistHole, MAT_GREY, vec3(0.0) ));\n    \n    result.fDist *= fScale;\n    \n\n    return result;\n}\n\n\nSceneResult Scene_GetDistance( const vec3 vPos )\n{\n    SceneResult result = SceneResult( kMaxTraceDist, MAT_BG, vec3(0.0) );\n        \n\tif ( g_scene.bCharacter )\n    {\n\t    result = Scene_Union( result, Character_GetDistance( vPos ) );\n    }\n\n    {\n/*        float fDist = Segment( vPos, vec3(-10,10,0), vec3(13, 10, 0), 1., 1. );\n        result = Scene_Union( result, SceneResult( fDist, MAT_SHOTGUN, g_scene.charDef.vCol ) );    \n\n        float fDist2 = Segment( vPos, vec3(-12,6,0), vec3(-4, 10, 0), 2., 1. );\n        result = Scene_Union( result, SceneResult( fDist2, MAT_WOOD, g_scene.charDef.vCol ) );    */\n        \n        vec3 vStart = g_scene.vWeaponStart;\n        vec3 vDir = g_scene.vWeaponDir;\n        float fDist = Segment( vPos, vStart, vStart + vDir * 23.0, 1., 1. );\n        result = Scene_Union( result, SceneResult( fDist, MAT_SHOTGUN, g_scene.charDef.vCol ) );    \n\n        float fDist2 = Segment( vPos, vStart + vDir * -2. + vec3(0,-4,0), vStart + vDir * 6., 2., 1. );\n        result = Scene_Union( result, SceneResult( fDist2, MAT_WOOD, g_scene.charDef.vCol ) );\n    }\n    \n    if ( g_scene.bArmor )\n    {        \n\t    result = Scene_Union( result, Armor_GetDistance( vPos ) );\n    }\n    \n    return result;\n}\n\n\n\n\nvec4 Raymarch_Sprite( vec2 fragCoord, vec4 vSpriteInfo )\n{\n    vec4 vResult = vec4( 0 );\n    \n    vec2 vSpritePos = fragCoord - vSpriteInfo.xy;\n    float fSpriteX = vSpritePos.x - vSpriteInfo.z * 0.5;\n    \n    float fRotation = g_scene.fCameraRotation;\n    \n    //fRotation += iTime;\n    \n    vec3 vCameraPos;\n    vCameraPos.x = cos(fRotation) * fSpriteX;\n    vCameraPos.y = vSpritePos.y;\n    vCameraPos.z = sin(fRotation) * fSpriteX;\n    \n    vec3 vCameraDir = vec3(-sin(fRotation), 0, cos(fRotation));\n    \n    vCameraPos -= vCameraDir * 200.0;\n\n\tSceneResult sceneResult = Scene_Trace( vCameraPos, vCameraDir, 1000.0 );\n    \n    if ( sceneResult.fDist > 400.0 )\n    {\n        return vResult;\n    }\n\n    vec3 vHitPos = vCameraPos + vCameraDir * sceneResult.fDist;\n    \n    vec3 vNormal = Scene_GetNormal( vHitPos );\n    \n    float fShade = max( 0.0, dot( vNormal, g_scene.vLightDir ) );\n    \n    float fSpecIntensity = 1.0;\n    \n    float fFBM1 = fbm( sceneResult.vUVW.xy * 30.0 * vec2(1.0, 0.4), 0.2 );    \n    float fFBM2 = fbm( sceneResult.vUVW.xy * 30.0 * vec2(1.0, 0.4) + 5.0, 0.5 );\n    vec3 vDiffuseCol = vec3(1.);\n    if ( sceneResult.fObjectId == MAT_CHARACTER )\n    {\n        float fUniformBlend = smoothstep( 0.5, 0.6, fFBM1 );\n        \n        vDiffuseCol = mix( g_scene.charDef.vUniformColor0, \n                          g_scene.charDef.vUniformColor1, \n                          fUniformBlend );\n        \n        vDiffuseCol = mix( vDiffuseCol, g_scene.charDef.vSkinColor, step(2.2,sceneResult.vUVW.x) );\n\n        float fBootBlend = step(sceneResult.vUVW.x, .4);\n        \n        fBootBlend = max( fBootBlend, step( abs(2.5 - sceneResult.vUVW.x), 0.2 ) ); // arm thing\n        \n        vDiffuseCol = mix( vDiffuseCol, g_scene.charDef.vBootsColor, fBootBlend );\n                \n        float fGoreBlend = smoothstep( 0.6, 0.7, fFBM2 );\n        fGoreBlend = max( fGoreBlend, step(2.9,sceneResult.vUVW.x) ); // bloody hands\n        \n        vDiffuseCol = mix( vDiffuseCol, \n                          vec3(1,0,0), \n                          fGoreBlend );\n        \n        //vDiffuseCol = fract(sceneResult.vUVW);//g_scene.charDef.vCol;\n        //vDiffuseCol = sceneResult.vUVW.xxx / 5.0;//g_scene.charDef.vCol;\n    }\n    else if ( sceneResult.fObjectId == MAT_SHOTGUN )\n    {\n        vDiffuseCol = vec3( 0.2 );\n    }\n    else if ( sceneResult.fObjectId == MAT_WOOD )\n    {\n        vDiffuseCol = vec3( 0.4, 0.2, .1 );\n    }\n    else if ( sceneResult.fObjectId == MAT_HEAD )\n    {\n        vDiffuseCol = g_scene.charDef.vSkinColor;\n        float fHairBlend = step( sceneResult.vUVW.x + fFBM1 * 0.5, 0.1 );\n        vDiffuseCol = mix( vDiffuseCol, g_scene.charDef.vHairColor, fHairBlend );\n    }\n    else if ( sceneResult.fObjectId == MAT_EYE )\n    {\n        vDiffuseCol = g_scene.charDef.vEyeColor;\n    }\n    else if ( sceneResult.fObjectId == MAT_GREY )\n    {\n        vDiffuseCol = vec3( 0.2 );\n        fSpecIntensity = 0.1;\n    }\n    \n    vec3 vDiffuseLight = g_scene.vAmbientLight + fShade * g_scene.vLightColor;\n    vResult.rgb = vDiffuseCol * vDiffuseLight;\n    \n    vec3 vRefl = reflect( vec3(0, 0, 1), vNormal );\n    float fDot = max(0.0, dot( vRefl, g_scene.vLightDir )) * fShade;\n    float fSpec = pow( fDot, 5.0 );\n    vResult.rgb += fSpec * fSpecIntensity;\n    \n    vResult.rgb = 1.0 - exp2( vResult.rgb * -2.0 );\n    vResult.rgb = pow( vResult.rgb, vec3(1.0 / 1.5) );\n    \n    vResult.a = 1.0;\n    \n    return vResult;\n}\n\n\n\n//////////////////////////////////////////////////////////////\n\nbool MaskBarrel(vec2 vTexCoord)\n{\n\tvec2 vSize = vec2(23.0, 32.0);\n\t\n\tvTexCoord = floor(vTexCoord);\n\t\n\t// remove corner pixels\n\tvec2 vWrapCoord = fract((vTexCoord + vec2(2.0, 1.0) ) / vSize) * vSize;\n\t\n\treturn ( (vWrapCoord.x >= 4.0) || (vWrapCoord.y >= 2.0) );\n}\n\nvec4 TexBar1A( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    if ( any( lessThan( vTexCoord, vec2(0) ) ) ) return vec4(0);\n    if ( any( greaterThan( vTexCoord, vec2(22,32) ) ) ) return vec4(0);\n    vTexCoord.y = 31. - vTexCoord.y;\n\tvec3 col = vec3(123.0, 127.0, 99.0) / 255.0;\n\t\n\tfloat fBrownStreakBlend = smoothstep( 2.0, 1.0, abs(vTexCoord.x - 3.5));\n\tcol = mix(col, vec3(0.724, 0.736, 0.438), fBrownStreakBlend);\n\t\n\tif( (vTexCoord.y == 1.0) && (vTexCoord.x > 3.0) && (vTexCoord.x < 18.0) )\n\t{\n\t\tcol = col * clamp(((vTexCoord.x / 18.0)), 0.0, 1.0);\t\t\n\t}\n\telse\n\t{\n\t\tcol = col * clamp((1.0 - (vTexCoord.x / 18.0)), 0.0, 1.0);\t\t\n\t}\n\t\n\tfloat fNukageBlend = 0.0;\n\tif( (vTexCoord.y == 1.0) && (vTexCoord.x > 8.0) && (vTexCoord.x < 14.0) )\n\t{\n\t\tfNukageBlend = 1.0;\n\t}\t\n\tif( (vTexCoord.y == 2.0) && (vTexCoord.x > 2.0) && (vTexCoord.x < 20.0) )\n\t{\n\t\tfNukageBlend = 1.0;\n\t}\t\n\tcol = mix(col, vec3(0.172, 0.560, 0.144) * fRandom, fNukageBlend);\n\t\n\t\n\tif(vTexCoord.x < 1.0)\n\t{\n\t\tcol += 0.1;\n\t}\n\t\n\tfloat fBlend = clamp(((vTexCoord.x - 20.0) / 3.0), 0.0, 1.0);\n\tcol += fBlend * 0.2;\n\t\n\tfloat fBumpY = 8.0;\n\tif(vTexCoord.y > 14.0) fBumpY += 9.0;\n\tif(vTexCoord.y > 23.0) fBumpY += 8.0;\n\n\tvec4 vBump = SmoothBump( vTexCoord, vec2(2.0, fBumpY), vec2(23.0 - 2.0, fBumpY), normalize(vec2(-0.2, 1.0)), 1.25 );\t\n\tcol += vBump.x * 0.2;\n\n\t// rim highlights\n\t{\n\t\tvec2 vOffset = (vTexCoord - vec2(17.0, 0.0)) / vec2(8.0, 2.0);\n\t\tcol += clamp(1.0 - dot(vOffset, vOffset), 0.0, 1.0) * 0.2;\n\t}\t\n\t{\n\t\tvec2 vOffset = (vTexCoord - vec2(20.0, 1.0)) / vec2(4.0, 1.0);\n\t\tcol += clamp(1.0 - dot(vOffset, vOffset), 0.0, 1.0) * 0.2;\n\t}\t\n\t{\n\t\tvec2 vOffset = (vTexCoord - vec2(3.0, 2.0)) / vec2(4.0, 2.0);\n\t\tcol += clamp(1.0 - dot(vOffset, vOffset), 0.0, 1.0) * 0.2;\n\t}\t\n\t\n\tcol *= 0.5 + fRandom * 0.5;\n\t\n    vec4 vResult;\n    vResult.rgb = col;\n    vResult.a = MaskBarrel( vTexCoord ) ? 1. : 0.;\n    \n\treturn vResult;\n}\n\n\nvec4 CosApprox( vec4 x )\n{\n\tx = abs(fract(x * (0.5))*2.0 - 1.0);\n\tvec4 x2 = x*x;\n\treturn( ( x2 * 3.0) - ( 2.0 * x2*x) );\n}\n\nbool MaskCorpseSprite(vec2 vTexCoord)\n{\n\t//vTexCoord = floor(vTexCoord);\n    \n    vec2 vUV = vTexCoord.xy / vec2(48.0, 22.0);\n    vec2 vOffset = vUV;\n    vOffset = vOffset * 2.0 -vec2(1.0, 0.6);\n    float fDist = dot(vOffset, vOffset);\n    fDist += dot(CosApprox(vTexCoord.xyxy * vec4(0.55, 0.41, 0.25, 0.1)), vec4(0.2 * -vOffset.y));\n\treturn fDist < 0.4;\n}\n\nvec4 TexPlayW( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec3 col = mix(vec3(190.0, 10.0, 10.0), vec3(50, 16.0, 16.0 ), fRandom * vTexCoord.y/18.0) / 255.0;\n    \n    vec4 vResult = vec4(0);\n    vResult.rgb = col;\n    vResult.a = MaskCorpseSprite( vTexCoord ) ? 1. : 0.;\n    \n\treturn vResult;\n}\n\nvec4 TexFireball( vec2 vTexCoord, float fRandom, float fHRandom, float fSize, float fType )\n{\n    float fLen = length( vTexCoord - vec2(fSize) ) / fSize;\n    \n    vec4 vResult = vec4(0);\n    \n    vResult.rgb = mix( vec3( 1., 0.5, 0.4), vec3(0.6, 0.2, 0.05), fLen );//vec3(sin(fLen * 10.0) * 0.5 + 0.5,0,1);\n    if ( fType == 0. )\n    {\n    \tvResult.rgb += vec3( 1., 0.3, 0.1) * ( exp( fLen * -3.0)) * 3.;\n    }\n    else\n    {\n        fLen += fRandom - 0.25;\n    }\n    vResult.rgb *= fRandom * 0.5 + 0.5;\n\n    if ( fLen < 1.0 )\n    {\n        vResult.a = 1.;\n    }\n    \n    return vResult;\n}\n\nvec4 TexHealthBonus( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    float fLen = length( vTexCoord - vec2(8.0, 6.0) ) / 5.5;\n    \n    vec4 vResult = vec4(0);\n    \n    vec3 vCol = vec3(0,0,1);\n    if ( all( greaterThan( vTexCoord, vec2( 6, 13) ) ) && all( lessThan( vTexCoord, vec2(10, 16 ) ) ) )\n\t{\n        vCol = vec3(1., .5, .2) * 2.;\n\t}\n    \n    float fShade = clamp( vTexCoord.y / 10.0, 0.0, 1.0);\n    vResult.rgb = vCol * fShade * fRandom;\n    if ( fLen < 1.0 )\n    {\n        vResult.a = 1.;\n    }\n    \n    if ( all( greaterThan( vTexCoord, vec2( 6, 4) ) ) && all( lessThan( vTexCoord, vec2(10, 16 ) ) ) )\n\t{\n        vResult.a = 1.;\n\t}\n    \n    \n    return vResult;\n}\n    \nvec4 TexArmorBonus( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec2 vXY = vTexCoord - vec2(7.5,7.0);\n\n    vec4 vResult = vec4(0);\n    \n    float fRad = 8.0;\n    if ( vXY.y < 0.0 )\n    {\n        vXY.y += 1.0;\n        vXY.x *= 0.9;\n    }\n\n    vec3 vCol = mix( vec3(75), vec3(95, 67, 35), step(0.55, fRandom)) / 255.;\n    \n    \n    float fLen = length( vXY );\n    \n    if ( fLen < fRad )\n    {\n    \tvec3 vNormal = normalize( vec3( vXY, sqrt( fRad * fRad - fLen * fLen) ) );\n        vec3 vLight = normalize( vec3( 0.4, 0.3, 3.0 ) );\n        \n                \n        float fShade = max(0.0, dot( vLight, vNormal ) );\n        \n        float fHighlight = pow(fShade, 50.0) * 0.2;\n        \n        fShade = fShade * 0.8 + 0.2;\n        \n        \n        vResult = vec4( vCol * fShade + fHighlight, 1 );\n    }\n    \n    if ( (vTexCoord.x == 6. || vTexCoord.x == 9.) && ( vTexCoord.y >= 0. && vTexCoord.y < 5.) )\n    {\n        vResult.rgb *= 0.5;\n    }\n    else\n    if ( (vTexCoord.x >= 6. && vTexCoord.x <= 9.) && vTexCoord.y == 0. )\n    {\n        vResult.rgb *= 0.5;\n    }\n    \n    float fMirrorX = 7.5 - abs( vTexCoord.x - 7.5 );\n    vec2 vMirror = vec2( fMirrorX, vTexCoord.y );\n    \n    bool bEye = false;\n    if( all( greaterThanEqual( vMirror, vec2(2,4) ) ) &&\n        all( lessThanEqual( vMirror, vec2(5,5) ) ))\n    {\n        bEye = true; \n    }\n\n    if( all( greaterThanEqual( vMirror, vec2(4,2) ) ) &&\n        all( lessThanEqual( vMirror, vec2(5,3) ) ))\n    {\n        bEye = true; \n    }\n    \n    if( bEye )\n\t{\n        float fEyeShade = clamp( 1.0 - (10. -vMirror.x - vMirror.y) / 8.0, 0.0, 1.0);\n\t\tvResult.rgb = fEyeShade * vec3(83,175,71) / 255.;\n\t}\n\n    if( all( greaterThanEqual( vMirror, vec2(4,0) ) ) &&\n        all( lessThanEqual( vMirror, vec2(5,1) ) ))\n    {\n        vResult = vec4(0.0);\n    }\n    \n    \n    /*\n\n    vec3 vCol = vec3(0,1,.5);\n    if ( all( greaterThan( vTexCoord, vec2(4, 6) ) ) && all( lessThan( vTexCoord, vec2(8, 9 ) ) ) )\n\t{\n        vCol *= 0.5;\n\t}\n    if ( all( greaterThan( vTexCoord, vec2(9, 6) ) ) && all( lessThan( vTexCoord, vec2(13, 9 ) ) ) )\n\t{\n        vCol *= 0.5;\n\t}\n    \n    float fShade = clamp( vTexCoord.y / 10.0, 0.0, 1.0);\n    vResult.rgb = vCol * fShade * fRandom;\n    if ( fLen < 1.0 )\n    {\n        vResult.a = 1.;\n    }\n    \n    if ( length( vTexCoord ) < 5.5 )\n    {\n        vResult.a = 0.;\n    }\n    if ( length( vTexCoord - vec2(16,0)) < 5.5 )\n    {\n        vResult.a = 0.;\n    }\n\t*/\n    \n    return vResult;\n}\n\nvec4 TexWallImpact( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = vec4(0);\n    \n    float fLen = length( vTexCoord - vec2(3.0) ) / 3.0;\n    fLen = sqrt(fLen);\n    fLen = max( 0.0, fLen * 1.3 - 0.3 );\n    vResult.rgb = mix( vec3(1.,1.,.8), vec3(0.4,0.2,0.0), fLen * fLen);\n    vResult.rgb *= 1.5;\n    \n\n    vResult.a = step(fLen, 1.0);\n    \n    return vResult;  \n}\n\nvec4 TexBulletSmokeImpact( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = vec4(0);\n    \n    vResult.rgb = vec3(1.0,1.0,1.0) * fRandom;\n    \n    float fLen = length( (vTexCoord - vec2(4.0, 8.0)) / vec2(6.0, 10.0) ) ;\n\n    fRandom = 1.0 - fRandom;\n    \n    vResult.a = step(fLen + fRandom * fRandom * 2.0, 1.0);\n    \n    return vResult;    \n}\n\nvec4 TexFleshImpact( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = vec4(0);\n    \n    vResult.rgb = vec3(1.0,0.0,0.0) * fRandom;\n    \n    float fLen = length( vTexCoord - vec2(4.0) ) / 4.2;\n\n    vResult.a = step(fLen + fRandom * fRandom * 1.5, 1.0);\n    \n    return vResult;  \n}\n    \nvec4 TexEnemyPlaceholder( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = vec4(0);\n    \n    vResult.rgb = vec3(0,0.2,0);\n    if ( (length( vTexCoord - vec2(16.0, 50.) ) < 5.0) )\n    {\n        vResult.a = 1.;\n    }\n    if ( (length( vTexCoord - vec2(16.0, 30.) ) < 12.0) )\n    {\n        vResult.a = 1.;\n    }\n    \n    if ( (length( vTexCoord - vec2(9.0, 5.) ) < 5.0) )\n    {\n        vResult.a = 1.;\n    }\n\n    if ( (length( vTexCoord - vec2(31. -9.0, 5.) ) < 5.0) )\n    {\n        vResult.a = 1.;\n    }\n\n    if ( (length( vTexCoord - vec2(9.0, 15.) ) < 5.0) )\n    {\n        vResult.a = 1.;\n    }\n\n    if ( (length( vTexCoord - vec2(31. -9.0, 15.) ) < 5.0) )\n    {\n        vResult.a = 1.;\n    }\n        \n    return vResult;\n}\n\nvec4 TexShotgunItem( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = vec4(1);\n    \n    vResult.rgb = vec3(0.3) * fRandom;\n \n    return vResult;    \n}\n\nvec4 TexPlaceholder( vec2 vTexCoord, float fRandom, float fHRandom, vec3 vCol )\n{\n    vec4 vResult = vec4(1);\n    \n    vResult.rgb = vCol * fRandom;\n \n    return vResult;\n}\n\n\nbool RedCross( vec2 vTexCoord )\n{\n    if ( all( greaterThan( vTexCoord, vec2( -4, -2) ) ) && all( lessThan( vTexCoord, vec2(3, 1 ) ) ) )\n\t{\n        return true;\n\t}\n\n    if ( all( greaterThan( vTexCoord, vec2( -2, -4) ) ) && all( lessThan( vTexCoord, vec2(1, 3 ) ) ) )\n\t{\n        return true;\n\t}\n    \n    return false;\n}\n\nfloat Flap( vec2 vTexCoord )\n{\n    float f1 = vTexCoord.y - 4.0;\n    float f2 = vTexCoord.y + vTexCoord.x - 9.0;\n\n    float fFlap = min(f1,f2);\n    \n    return fFlap / 3.0;\n    \n}\n\nvec4 TexMedikit( vec2 vTexCoord, float fRandom, float fHRandom, float fEdge )\n{\n    vec4 vResult = vec4(1);\n    \n    float xMirror = 13.5 - abs(vTexCoord.x - 13.5);\n    \n    if ( xMirror - vTexCoord.y + 15.0 - fEdge < 0.0 )\n    {\n        return vec4(0.0);\n    }\n    \n    xMirror -= fEdge * .5;\n        \n    vResult.rgb = vec3(111)/255.;\n \n    if ( vTexCoord.y > 15. )\n    {\n\t\tvResult.rgb = vec3(139)/255.;\n    }\n    else\n    if ( vTexCoord.y > 14. )\n    {\n\t\tvResult.rgb = vec3(167)/255.;\n    }        \n    \n    float fFlap = Flap( vec2( xMirror, vTexCoord.y ) );\n    \n    // Strap\n    if ( xMirror >= 6. && xMirror <= 8. )\n    {\n        if ( vTexCoord.y < 6. )\n        {\n            if ( fFlap >= 1.0 )\n            {\n\t        \tvResult.rgb = vec3(151) / 255.;\n            }\n            else\n            {\n\t        \tvResult.rgb = vec3(39) / 255.;\n            }\n        }\n    }\n        \n    if ( fFlap > 0.0 && fFlap < 1.0 )\n    {\n        vResult.rgb *= 1.0 - fFlap;\n    }\n\n    if ( vTexCoord.y < 1. )\n    {\n        vResult.rgb *= 0.75;\n    }\n\n    \n    vResult.rgb *= (fRandom * 0.2 + 0.8);\n\n    vec2 vCrossPos = vTexCoord - vec2(14, 11 );\n    if ( RedCross( vCrossPos ) )\n\t{\n        float fDist = 1.0 - length( vCrossPos ) / 4.5;\n        vResult.rgb = fDist * vec3(155,0,0)/255.;\n        \n\t}\n\n    /*if ( RedCross( vCrossPos + vec2(1,-1) ) )\n    {\n        vResult.rgb *= 0.9;        \n    }\n    \n    if ( RedCross( vCrossPos - vec2(1,-1) ) )\n    {\n\t\t\tvResult.rgb *= 1.1;        \n    }*/\n                        \n    return vResult;\n}\n\nvec4 TexFloorLamp( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = vec4(0);\n\n    float y = floor( vTexCoord.y );\n    float xMirror = floor( abs(vTexCoord.x - 11.) );\n\n    float fWidth = 6.0;;\n    float fSpread = 1.0 / 4.0;\n    float fLightPos = 10.0;\n    \n    if ( y == 47.0 )\n    {\n        fWidth = 3.0;\n    }\n    else\n    if ( y == 46.0 )\n    {\n        fWidth = 5.0;\n    }\n    else\n    if ( y == 7.0 || y == 10.0 || y == 13.0 )\n    {\n        fWidth = 7.0;\n        fSpread = 1.0 / 8.;\n        fLightPos = 8.0;\n    }\n    else\n    if ( y == 2.0 || y == 3.0 )\n    {\n        fWidth = 11.0;\n    }\n    else\n    if ( y == 1.0 )\n    {\n        fWidth = 9.0;\n    }\n    else\n    if ( y == 4.0 )\n    {\n        fWidth = 10.0;\n    }\n    if ( y == 5.0 )\n    {\n        fWidth = 8.0;\n    }\n    \n    if ( y <= 5.0 )\n    {\n        fSpread = 1.0 / 20.;\n        fLightPos = y * .5 + 5.;\n    }\n    \n    if ( xMirror < fWidth )\n    {\n        if ( y >= 41. && y <= 44. )\n        {\n            vec2 delta = vTexCoord - vec2(11, 42.5);\n            float d = dot( delta, delta );\n\t        \n            float fShade1 = 0.8 - (xMirror / 6.0);\n            \n            float fShade2 = 1.0 - d / 8.0;\n            float fShade = max(0.0, max( fShade1, fShade2 ) );\n            \n            vec3 vCol = vec3(215, 187, 67)/255.;\n            vCol += fShade * vec3(1, 0.75, 0.5);\n    \t    vResult = vec4( vCol,1.0);\n        }\n        else\n        {\n\t        float fShade= max(0.0, 1.0 - abs(vTexCoord.x - fLightPos ) * fSpread ) * 0.25;\n    \t    vResult = vec4(vec3(fShade),1.0);\n        }\n    }\n    \n    return vResult;\n}\n\nvec3 Project( vec3 a, vec3 b )\n{\n\treturn a - b * dot(a, b);\n}\n/*\nvoid TraceSlab( const in vec3 vRayOrigin, const in vec3 vRayDir, const in vec3 vSlabOrigin, const in vec3 vSlabDir, const in float fThickness, out float fNear, out float fFar, inout vec3 vNormal )\n{\n    \n    float t0 = projOffset0 / projDir;\n    float t1 = projOffset1 / projDir;\n    \n    \n    \n    if ( f0 > \n}\n*/\nfloat TraceCylinder( const in vec3 vRayOrigin, const in vec3 vRayDir, const in vec3 vCylinderOrigin, const in vec3 vCylinderDir, const in float fLength, const in float fCylinderRadius, inout vec3 vNormal )\n{\t\n\t\n\tvec3 vOffset = vCylinderOrigin - vRayOrigin;\n\t\n\tvec3 vProjOffset = Project(vOffset, vCylinderDir);\n\tvec3 vProjDir = Project(vRayDir, vCylinderDir);\n\tfloat fProjScale = length(vProjDir);\n\tvProjDir /= fProjScale;\n\t\n\t// intersect circle in projected space\n\t\n\tfloat fTClosest = dot(vProjOffset, vProjDir);\n\t\n\tvec3 vClosest = vProjDir * fTClosest;\n\tfloat fDistClosest = length(vClosest - vProjOffset);\n\tif(fDistClosest < fCylinderRadius)\n\t{\t\t\n\t\tfloat fHalfChordLength = sqrt(fCylinderRadius * fCylinderRadius - fDistClosest * fDistClosest);\n\t\tfloat fTIntersectMin = clamp((fTClosest - fHalfChordLength) / fProjScale, 0.0, 100000.0);\n\t\tfloat fTIntersectMax = (fTClosest + fHalfChordLength) / fProjScale;\t\n\t\t\n\t\tif(fTIntersectMax > fTIntersectMin)\n\t\t{\t\n            vec3 vHitPos = vRayOrigin + vRayDir * fTIntersectMin;\n            float hitU = dot( vHitPos - vCylinderOrigin, vCylinderDir );\n            if ( hitU >= 0.0 && hitU <= fLength )\n            {\n\t\t\t\tvNormal = normalize(vProjDir * (fTClosest - fHalfChordLength) - vProjOffset );\n\t\t\t\treturn fTIntersectMin;\n            }\n\t\t}\t\t\n\t}\n    \n    // end cap\n\n    vec3 vEndPos = vCylinderOrigin;\n\tvNormal = vCylinderDir;\n    \n    if ( dot( vRayDir, vCylinderDir) < 0.0 )\n    {\n        vEndPos += vCylinderDir * fLength;\n        vNormal = -vNormal;\n    }\n    \n    vec3 vEndOffset = vEndPos - vRayOrigin;\n    float endDot = dot( vEndOffset , vCylinderDir );\n    float dirDot = dot( vRayDir, vCylinderDir );\n    \n    float capT = endDot / dirDot;\n    \n    if ( capT > 0.0 )\n    {\n        vec3 vCapPos = vRayOrigin + vRayDir * capT;\n        \n        if ( length( vEndPos - vCapPos ) < fCylinderRadius )\n        {\n            return capT;\n        }\n    }\n    \n    \n    return 100000.0;\n}\n\nvec4 TexTallTechnoPillar( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec3 vRayOrigin = vec3(0.0, 64.0, -300.0);\n    vec3 vRayTarget = vec3( vTexCoord.x - 38. * .5, vTexCoord.y, 0.0);\n    vec3 vRayDir = normalize( vRayTarget - vRayOrigin );\n    \n    vec3 vNormal;\n    \n    float t = TraceCylinder( vRayOrigin, vRayDir, vec3(0, 3, 0), vec3(0,1,0), 127.0 - 6., 12.0, vNormal );\n\n    vec3 vNormal2;\n    float t2; \n    t2 = TraceCylinder( vRayOrigin, vRayDir, vec3(0, 3, 0), vec3(0,1,0), 6.0, 16.0, vNormal2 );\n    if ( t2 < t )\n    {\n        t = t2;\n        vNormal = vNormal2;\n    }\n\n    t2 = TraceCylinder( vRayOrigin, vRayDir, vec3(0, 127. - 3. - 6., 0), vec3(0,1,0), 6.0, 16.0, vNormal2 );\n    if ( t2 < t )\n    {\n        t = t2;\n        vNormal = vNormal2;\n    }\n\n\n    t2 = TraceCylinder( vRayOrigin, vRayDir, vec3(0, 32, 0), vec3(0,1,0), 2.0, 16.0, vNormal2 );\n    if ( t2 < t )\n    {\n        t = t2;\n        vNormal = vNormal2;\n    }\n    \n    t2 = TraceCylinder( vRayOrigin, vRayDir, vec3(0, 36, 0), vec3(0,1,0), 2.0, 16.0, vNormal2 );\n    if ( t2 < t )\n    {\n        t = t2;\n        vNormal = vNormal2;\n    }\n    t2 = TraceCylinder( vRayOrigin, vRayDir, vec3(0, 40, 0), vec3(0,1,0), 2.0, 16.0, vNormal2 );\n    if ( t2 < t )\n    {\n        t = t2;\n        vNormal = vNormal2;\n    }\n    \n    \n    //vec3 vNormal1;\n    if ( t > 5000. )\n    {\n        return vec4(0.);\n    }\n    \n    vec3 vLight = normalize( vec3(-1., -0.5, -2 ) );\n    \n    float fShade = max(0.0, dot( vNormal, vLight ));\n    \n    vec3 vCol = vec3(0.2) + fRandom * 0.1;\n    \n    vec3 vPos = vRayOrigin + vRayDir * t;\n    \n    if ( vPos.y > 43. && vPos.y < 118. )\n    {\n        float f = fRandom / .75;\n        //f *= 0.75 + fHRandom * 0.25;\n        vCol = vec3( pow( f, 5.0) );\n    }\n    \n    vCol *= fShade;\n    return vec4(vCol,1);\n    \n    // float fShade = fRandom - fHRandom * 0.5;\n    //return vec4(fShade,fShade, fShade, 1);\n}\n\nvoid AddGlow( inout vec3 vResult, vec2 vSpritePixel, vec2 vGlowPos, vec3 vCol, float f )\n{\n    float fLen = length( vSpritePixel - vGlowPos );\n    \n    vResult += exp2(-fLen * f) * vCol;\n}\n\nvec4 MuzzleFlash( vec2 vUV, vec2 vPos, vec2 vSize )\n{\n    vec4 vResult = vec4( 0.0 );\n    vec2 vLocalPos = vUV - vPos;\n    vLocalPos = vLocalPos / vSize;\n    float fDist = length( vLocalPos );\n    fDist += abs(vLocalPos.x) + abs(vLocalPos.y);\n\n    float fFactor = fDist * 5.0 + fbm( vLocalPos * 100., 0.8);\n\n    //float fAmount = exp2( * fFactor );\n\n    if ( fFactor < 3.0)\n    {\n        fFactor = 1.0 - fFactor / 3.0;\n\n        fFactor = pow( 0.5 + fFactor, 5.0 );\n\n        vResult.rgb = vec3( fFactor, pow(fFactor, 2.0) * .4, pow(fFactor, 3.0) * .2) * 5.0;\n        vResult.a = 1.0;\n\n    }\n    \n    return vResult;\n}\n\n\nvec4 TexBarExpl( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = TexBar1A( vTexCoord - vec2(4,0), fRandom, fHRandom );\n    \n    vec4 vExplode = MuzzleFlash( vTexCoord, vec2(16,16), vec2(60, 60));\n    \n    if ( vExplode.a > 0.0 )\n    {\n        vResult.rgb += vExplode.rgb * 0.2;\n        vResult.a = 1.0;\n        return vResult;\n    }\n    \n    //AddGlow( vResult.rgb, vTexCoord, vec2(13., 20.0), vec3(1,.9, .5) * 2., 0.15 );\n    //vResult *= TexFireball( vTexCoord, fRandom, fHRandom );\n\treturn vResult;\n}\n\nvec4 TexBarExpl2( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec4 vResult = MuzzleFlash( vTexCoord.yx, vec2(24,19), vec2(90, 82));    \n    \n\treturn vResult;\n}\n\n/////////\n\nvec2 SpritePixel( vec2 sheetPixel, vec4 vSpriteInfo )\n{\n    return floor(sheetPixel - vSpriteInfo.xy);\n}\n\nbool IsInSprite( vec2 sheetPixel, vec4 vSpriteInfo )\n{\n    return all( greaterThanEqual(sheetPixel, vSpriteInfo.xy) ) && all( lessThan(sheetPixel, vSpriteInfo.xy + vSpriteInfo.zw) );\n}\n\nbool SpriteSelectIterate( vec4 vSpriteInfo, vec2 sheetPixel, inout vec4 vOutSpriteInfo, inout float fOutSpriteIndex, inout float fTestIndex )\n{\n    bool isInSprite = IsInSprite( sheetPixel, vSpriteInfo );\n    \n    if ( isInSprite )\n    {\n        vOutSpriteInfo = vSpriteInfo;\n        fOutSpriteIndex = fTestIndex;\n    }\n    \n    fTestIndex++;\n    return isInSprite;\n}\n\nbool SpriteProcessIterate( inout float fTestIndex, float fSpriteIndex )\n{\n    bool bResult = false;\n    if ( fSpriteIndex == fTestIndex )\n    {\n        bResult = true;\n    }\n    \n    fTestIndex++;\n    \n    return bResult;\n}\n\n///////////////////////////\n// Sprite Crop Sheet Info\n///////////////////////////\n\n#define SPR_RIGHT(V) vec2((V.x + V.z), V.y)\n#define SPR_ABOVE(V) vec2(V.x, (V.y + V.w))\n\nconst vec4 kSpriteNone\t\t\t\t= vec4( 0 );\n\nconst vec4 kSpriteBarrel\t\t\t= vec4(\tSPR_RIGHT(kSpriteNone),\t\t\t\t\t23,32);\nconst vec4 kSpriteBarrelExpl\t\t= vec4(\tSPR_RIGHT(kSpriteBarrel),\t\t\t\t32,32);\n\nconst vec4 kSpriteFireball\t\t\t= vec4(\tSPR_RIGHT(kSpriteBarrelExpl),\t\t\t20,20);\nconst vec4 kSpriteFireball2\t\t\t= vec4(\tSPR_RIGHT(kSpriteFireball),\t\t\t\t24,24);\n\nconst vec4 kSpriteHealthBonus\t\t= vec4(\tSPR_RIGHT(kSpriteFireball2),\t\t\t16,16);\nconst vec4 kSpriteArmorBonus\t\t= vec4(\tSPR_ABOVE(kSpriteHealthBonus),\t\t\t16,15);\nconst vec4 kSpriteMedikit\t\t\t= vec4(\tSPR_RIGHT(kSpriteHealthBonus),\t\t\t28,19);\nconst vec4 kSpriteStimpack\t\t\t= vec4(\tSPR_RIGHT(kSpriteMedikit),\t\t\t\t16,19);\nconst vec4 kSpriteBlueArmor\t\t\t= vec4(\tSPR_RIGHT(kSpriteStimpack),\t\t\t\t32,24);\nconst vec4 kSpriteGreenArmor\t\t= vec4(\tSPR_RIGHT(kSpriteBlueArmor),\t\t\t32,24);\nconst vec4 kSpriteShotgun\t\t\t= vec4(\tSPR_RIGHT(kSpriteGreenArmor),\t\t\t32,16);\n\nconst vec4 kSpriteWallImpact1\t\t= vec4(\tSPR_RIGHT(kSpriteShotgun),\t\t\t\t6,6);\nconst vec4 kSpriteWallSmokeImpact1\t= vec4(\tSPR_RIGHT(kSpriteWallImpact1),\t\t\t8,16);\nconst vec4 kSpriteFleshImpact1\t\t= vec4(\tSPR_RIGHT(kSpriteWallSmokeImpact1),\t\t8,8);\n\nconst vec4 kSpriteBloodyMess\t\t= vec4(\tSPR_RIGHT(kSpriteFleshImpact1) + vec2(0,16),\t\t42,16);\nconst vec4 kSpriteDeadTrooper \t\t= vec4(\tSPR_RIGHT(kSpriteBloodyMess),\t\t\t42,16);\nconst vec4 kSpriteDeadSergeant \t\t= vec4(\tSPR_RIGHT(kSpriteDeadTrooper),\t\t\t42,16);\nconst vec4 kSpriteDeadImp \t\t\t= vec4(\tSPR_RIGHT(kSpriteDeadSergeant),\t\t\t42,16);\n\nconst vec4 kSpriteBarrelExpl2\t\t= vec4(\t480,0,\t\t\t\t\t\t\t\t\t38,48);\n\nconst vec4 kSpriteFloorLamp\t\t\t= vec4(\t480,48,\t\t\t\t\t\t\t\t\t23,48);\nconst vec4 kSpriteTallTechnoPillar\t= vec4(\tSPR_ABOVE(kSpriteFloorLamp),\t\t\t38,128);\n\nconst vec4 kSpriteEnemyBegin = vec4(0, 32., 32, 52);\n\n\n#define SPRITE_ENEMY_ACTION_STAND \t\t0.\n#define SPRITE_ENEMY_ACTION_ATTACK\t\t1.\n#define SPRITE_ENEMY_ACTION_WALK1 \t\t2.\n#define SPRITE_ENEMY_ACTION_WALK2 \t\t3.\n#define SPRITE_ENEMY_ACTION_PAIN \t\t4.\n#define SPRITE_ENEMY_ACTION_DIE \t\t5.\n\n#define SPRITE_ENEMY_ACTION_COUNT \t\t6\n\n#define SPRITE_ENEMY_ACTION_DEAD\t\t10.\n\n#define SPRITE_ENEMY_TYPE_TROOPER \t0.\n#define SPRITE_ENEMY_TYPE_IMP \t\t1.\n#define SPRITE_ENEMY_TYPE_SERGEANT \t2.\n\n#define SPRITE_ENEMY_TYPE_COUNT     3\n\nvec4 GetEnemySprite( float fType, float fAction, float fDirection )\n{\n    vec2 vGridPos = vec2( fType + fDirection * float(SPRITE_ENEMY_TYPE_COUNT), fAction );\n    vec2 vPos = kSpriteEnemyBegin.xy +kSpriteEnemyBegin.zw * vGridPos;\n\treturn vec4( vPos, kSpriteEnemyBegin.zw );\n}\n\n\n\nbool GetEnemySpriteId( vec2 fragCoord, out float fEnemySpriteType, out float fEnemySpriteAction, out float fEnemySpriteDirection )\n{\n    vec2 vGridLocal = fragCoord - kSpriteEnemyBegin.xy;\n    vec2 vGridPos = floor( vGridLocal / kSpriteEnemyBegin.zw );\n    \n    fEnemySpriteType = mod( vGridPos.x, float(SPRITE_ENEMY_TYPE_COUNT) );\n    fEnemySpriteAction = vGridPos.y;\n    fEnemySpriteDirection = floor( vGridPos.x / float(SPRITE_ENEMY_TYPE_COUNT) );\n\n    return ( vGridPos.x >= 0. && vGridPos.y >= 0. && vGridPos.x < (float(SPRITE_ENEMY_TYPE_COUNT) * 5.0) && vGridPos.y < float(SPRITE_ENEMY_ACTION_COUNT) );        \n}\n\n\n\n\nvoid Pose_Enemy( float fEnemySpriteType, float fEnemySpriteAction, float fEnemySpriteDirection )\n{\n    bool bWeapon = false;\n    if ( fEnemySpriteType == float(SPRITE_ENEMY_TYPE_IMP))\n    {\n        CharDef_Imp( g_scene.charDef );            \n    }            \n    else\n        if ( fEnemySpriteType == float(SPRITE_ENEMY_TYPE_TROOPER))\n        {\n            CharDef_Trooper( g_scene.charDef );\n        }   \n    else\n        if ( fEnemySpriteType == float(SPRITE_ENEMY_TYPE_SERGEANT))\n        {\n            CharDef_Sergeant( g_scene.charDef );\n            bWeapon = true;\n        }                        \n\n    //////\n    \n    if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_STAND))\n    {\n        Pose_Clear( g_scene.pose );\n    }            \n    else\n        if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_ATTACK))\n        {\n            Pose_Attack( g_scene.pose );\n        }            \n    else\n        if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_WALK1))\n        {\n            Pose_Walk1( g_scene.pose );\n        }   \n    else\n        if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_WALK2))\n        {\n            Pose_Walk2( g_scene.pose );\n        }                        \n    else\n        if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_PAIN))\n        {\n            Pose_Pain( g_scene.pose );\n        }                        \n    else \n        if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_DIE))\n    {\n        Pose_Die( g_scene.pose );\n        bWeapon = false;        \n    }                        \n    else \n        if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_DEAD))\n    {\n        Pose_Dead( g_scene.pose );\n        bWeapon = false;\n    }                        \n\n                          \n    if ( bWeapon )\n    {\n    \tPose_Weapon();\n    }\n    else\n    {\n\t\tWeapon_None();\n    }    \n\n    g_scene.fCameraRotation = fEnemySpriteDirection * radians(45.0);            \n}\n\n\n///////////////////////////////////////\n\n#define FONT_POS \tivec2(280,0)\n#define FONT_CHAR \tivec2(16,0)\n\nvec4 NumFont_Char( ivec2 vTexCoord, int iDigit )\n{\n \tif ( iDigit < 0 || iDigit > 10 )\n    \treturn vec4(0.0);\n    \n    //vTexCoord = floor(vTexCoord * vec2(14.0, 16.0)) + 0.5 + vec2(480,96);\n    vTexCoord = vTexCoord + FONT_POS;\n    vTexCoord += FONT_CHAR * iDigit;\n    \n    float fSample_TL = texelFetch( iChannel1, (vTexCoord - ivec2(-1, 1) ), 0 ).a;\n    float fSample_TC = texelFetch( iChannel1, (vTexCoord - ivec2( 0, 1) ), 0 ).a;\n    float fSample_TR = texelFetch( iChannel1, (vTexCoord - ivec2( 1, 1) ), 0 ).a;\n    \n    float fSample_CL = texelFetch( iChannel1, (vTexCoord - ivec2(-1, 0) ), 0 ).a;\n    float fSample_CC = texelFetch( iChannel1, (vTexCoord - ivec2( 0, 0) ), 0 ).a;\n    float fSample_CR = texelFetch( iChannel1, (vTexCoord - ivec2( 1, 0) ), 0 ).a;\n    float fSample_CS = texelFetch( iChannel1, (vTexCoord - ivec2( 2, 0) ), 0 ).a;\n\n    float fSample_BL = texelFetch( iChannel1, (vTexCoord - ivec2(-1,-1) ), 0 ).a;\n    float fSample_BC = texelFetch( iChannel1, (vTexCoord - ivec2( 0,-1) ), 0 ).a;\n    float fSample_BR = texelFetch( iChannel1, (vTexCoord - ivec2( 1,-1) ), 0 ).a;\n    float fSample_BS = texelFetch( iChannel1, (vTexCoord - ivec2( 2,-1) ), 0 ).a;\n    \n    \n    float fSample_SC = texelFetch( iChannel1, (vTexCoord - ivec2( 0,-2) ), 0 ).a;\n    float fSample_SR = texelFetch( iChannel1, (vTexCoord - ivec2( 1,-2) ), 0 ).a;\n    float fSample_SS = texelFetch( iChannel1, (vTexCoord - ivec2( 2,-2) ), 0 ).a;\n   \n    float fOutline = min( 1.0, \n\t\tfSample_TL + fSample_TC + fSample_TR +\n\t\tfSample_CL + fSample_CC + fSample_CR +\n\t\tfSample_BL + fSample_BC + fSample_BR );\n    \n    float fShadow = min( 1.0, \n\t\tfSample_CC + fSample_CR + fSample_CS +\n\t\tfSample_BC + fSample_BR + fSample_BS + \n\t\tfSample_SC + fSample_SR + fSample_SS);\n    \t\n    float fMain = fSample_CC;\n    \n    vec4 vResult = vec4(0.0);\n    \n    float fAlpha = min( 1.0, fOutline + fMain + fShadow );\n    \n    float fShade = fSample_TL * 1.5 + fSample_BR * -1.5 + fSample_TC * 1.0 + fSample_CL * 1.0 \n        + fSample_BC * -1.0 + fSample_CR * -1.0;\n    \n    fShade = clamp( fShade * 0.25, 0.0, 1.0 );\n    \n    fShade = fShade * .3 + .7;\n    \n    vec3 vColor = vec3( .2 ); // drop shadow\n    \n    if ( fOutline > 0.0 )\n        vColor = vec3(.4, 0, 0); // outline\n\n    if ( fMain > 0.0 )\n        vColor = vec3(fShade, 0, 0); // main text\n            \n    vResult = vec4(vColor, fAlpha);\n    \n    return vResult;\n}\n\n///////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool bReuseData = false;\n    if ( iFrame > 0 )\n    {\n\t    // Check Resolution\n        vec4 info = texelFetch( iChannel0, ivec2(0, 0), 0 );\n        if ( (info.x == iResolution.x) && (info.y == iResolution.y) )\n        {\n            bReuseData = true;\n        }\n    }\n\n\tif ( bReuseData )\n    {\n        fragColor = texelFetch( iChannel0, ivec2(floor(fragCoord)), 0 );\n        return;\n        //vResult.r = sin(iTime * 10.0) *0.5 + 0.5; // flash the cache\n    }    \n    \n    ivec2 vFontCoord = ivec2(floor(fragCoord)) - FONT_POS;\n    \n    vec4 vResult = vec4(0.2,0,0,1);\n    \n    float fPersistence = 0.8;\n\tfloat fNoise2Freq = 0.5;    \n    \n    vec2 vSpritePixel = vec2(0);\n    vec4 vSpriteInfo = vec4(0);\n    \n    float fSpriteIndex = -1.;\n    \n    bool bRaymarch = false;\n    Scene_Clear();\n    \n    \n    #if 0\n        bRaymarch = true;\n    \n    \t#if 1\n    \t\tg_scene.bArmor = true;\n    \t#endif\n    \n    \t#if 0\n            g_scene.bCharacter = true;\n\n            //float fType = SPRITE_ENEMY_TYPE_TROOPER;\n            float fType = SPRITE_ENEMY_TYPE_SERGEANT;\n            //float fType = SPRITE_ENEMY_TYPE_IMP;\n\n            //float fAction = SPRITE_ENEMY_ACTION_STAND;\n            float fAction = SPRITE_ENEMY_ACTION_WALK1;\n            //float fAction = SPRITE_ENEMY_ACTION_WALK2;\n            //float fAction = SPRITE_ENEMY_ACTION_ATTACK;\n            //float fAction = SPRITE_ENEMY_ACTION_PAIN;\n            //float fAction = SPRITE_ENEMY_ACTION_DIE;\n            //float fAction = SPRITE_ENEMY_ACTION_DEAD;\n\n\n            Pose_Enemy( fType, fAction, 0. );\n\n    \t#endif\n\n        vec2 vSize = vec2(512, 512);\n        float fScale = 6.5;\n        vec2 vPos = fragCoord.xy;\n        vPos.x = (vPos.x - vSize.x * .5) / fScale + vSize.x * .5;\n        vPos.y /= fScale;\n    \n    \tg_scene.fCameraRotation = iTime;\n    \tfragColor = Raymarch_Sprite( vPos.xy, vec4(0,0,512,512) );\n    \n    \treturn;\n    #endif\n    \n    \n    float fTestIndex = 0.;\n    if ( SpriteSelectIterate( kSpriteFireball, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {\n    }\n    if ( SpriteSelectIterate( kSpriteFireball2, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {\n    }\n    if ( SpriteSelectIterate( kSpriteBarrel, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteBarrelExpl, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteBarrelExpl2, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteBloodyMess, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n        fPersistence = 1.0;\n    }\n    if ( SpriteSelectIterate( kSpriteHealthBonus, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteArmorBonus, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n        fPersistence = 0.6;\n    }\n    if ( SpriteSelectIterate( kSpriteMedikit, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteStimpack, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteBlueArmor, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n        bRaymarch = true;\n        g_scene.bArmor = true;\n    }\n    if ( SpriteSelectIterate( kSpriteGreenArmor, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n        bRaymarch = true;\n        g_scene.bArmor = true;\n\t    g_scene.vLightDir = normalize( vec3(0.2, 1, -0.2) );\n        \n    }\n    if ( SpriteSelectIterate( kSpriteShotgun, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n        bRaymarch = true;\n        g_scene.bCharacter = false;\n        Weapon_DefaultPos();\n    }\n    if ( SpriteSelectIterate( kSpriteWallImpact1, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteWallSmokeImpact1, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n        fPersistence = 0.95;\n    }\n    if ( SpriteSelectIterate( kSpriteFleshImpact1    , fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n    }\n    if ( SpriteSelectIterate( kSpriteDeadTrooper    , fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {        \n        bRaymarch = true;\n        g_scene.bCharacter = true;\n\t    CharDef_Trooper( g_scene.charDef );            \n        Pose_Dead( g_scene.pose );\n    }\n    if ( SpriteSelectIterate( kSpriteDeadSergeant    , fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {\n        bRaymarch = true;\n        g_scene.bCharacter = true;\n\t    CharDef_Sergeant( g_scene.charDef );                    \n        Pose_Dead( g_scene.pose );\n    }\n    if ( SpriteSelectIterate( kSpriteDeadImp    , fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {\n        bRaymarch = true;\n        g_scene.bCharacter = true;\n\t    CharDef_Imp( g_scene.charDef );                    \n        Pose_Dead( g_scene.pose );\n    }\n    if ( SpriteSelectIterate( kSpriteFloorLamp, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {\n    }\n    if ( SpriteSelectIterate( kSpriteTallTechnoPillar, fragCoord, vSpriteInfo, fSpriteIndex, fTestIndex ) )\n    {\n        fNoise2Freq = 2.0;\n        fPersistence = 1.0;\n    }\n    \n    float fEnemySpriteType;\n    float fEnemySpriteAction;\n    float fEnemySpriteDirection;\n    bool isEnemySprite = GetEnemySpriteId( fragCoord, fEnemySpriteType, fEnemySpriteAction, fEnemySpriteDirection );\n\n    ivec2 vFontMax = 10 * FONT_CHAR;\n    if( vFontCoord.x >= 0 && vFontCoord.y >= 0 && vFontCoord.x < (vFontMax.x + 16) && vFontCoord.y < (vFontMax.y + 16) )\n    {\n        fSpriteIndex = 777.;\n    }\n    else\n    if ( isEnemySprite )\n    {\n        bRaymarch = true;\n        g_scene.bCharacter = true;\n\t\tPose_Enemy( fEnemySpriteType, fEnemySpriteAction, fEnemySpriteDirection );\n        \n        fSpriteIndex = 666.;\n        vSpriteInfo = GetEnemySprite( fEnemySpriteType, fEnemySpriteAction, fEnemySpriteDirection );\n        \n        //fragColor.rgb= vec3( fEnemySpriteType, fEnemySpriteAction, fEnemySpriteDirection) / 8.0; return;\n    }\n        \n    if ( fSpriteIndex == -1.0 )\n    {\n        discard;\n    }\n\t\t\n\tvec4 vRaymarchResult = vec4( 0 );\n    vRaymarchResult = Raymarch_Sprite( fragCoord.xy, vSpriteInfo );\n    \n    {    \n        vSpritePixel = SpritePixel( fragCoord, vSpriteInfo );\n\n        float fRandom = fbm( vSpritePixel, fPersistence );\n        float fHRandom = noise1D( vSpritePixel.x * fNoise2Freq );// - (vSpritePixel.y / vSpriteInfo.w);\n\n        fTestIndex = 0.;\n\n\t    if( vFontCoord.x >= 0 && vFontCoord.y >= 0 && vFontCoord.x < (vFontMax.x + 16) && vFontCoord.y < (vFontMax.y + 16) )\n        {\n\n            int iFontDigit = vFontCoord.x / 16;\n            ivec2 vFontPixel = vFontCoord.xy;\n            vFontPixel.x = vFontPixel.x % 16;\n            vResult = NumFont_Char( vFontPixel, iFontDigit );\n            //float fValue = NumFont_BinChar( vFontPixel, fFontDigit );\n            //vResult =  vec4( fValue );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexFireball( vSpritePixel, fRandom, fHRandom, vSpriteInfo.z * .5, 0. );\n        }\n\t\tif ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexFireball( vSpritePixel, fRandom, fHRandom, vSpriteInfo.z * .5, 1. );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexBar1A( vSpritePixel, fRandom, fHRandom );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexBarExpl( vSpritePixel, fRandom, fHRandom );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexBarExpl2( vSpritePixel, fRandom, fHRandom );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexPlayW( vSpritePixel, fRandom, fHRandom  );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexHealthBonus( vSpritePixel, fRandom, fHRandom  );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexArmorBonus( vSpritePixel, fRandom, fHRandom  );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // Medikit\n            vResult = TexMedikit( vSpritePixel, fRandom, fHRandom, 0.0 );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // Stimpack\n            vResult = TexMedikit( vSpritePixel + vec2(6,0), fRandom, fHRandom, 5.0 );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // blue armor\n            //vResult = TexPlaceholder( vSpritePixel, fRandom, fHRandom, vec3(0,0,1) );\n            vResult = vRaymarchResult;            \n            vResult.rgb *= fRandom * vec3(0,0,1);            \n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // green armor\n            vResult = vRaymarchResult;            \n            vResult.rgb *= fRandom * vec3(0,1.0,0);\n            //vResult = TexPlaceholder( vSpritePixel, fRandom, fHRandom, vec3(0,1.0,0) );\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // Shotgun\n            //vResult = TexShotgunItem( vSpritePixel, fRandom, fHRandom  );\n            vResult = vRaymarchResult;       \n            vResult.rgb *= fRandom;\n            \n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexWallImpact( vSpritePixel, fRandom, fHRandom  );\n        }        \n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexBulletSmokeImpact( vSpritePixel, fRandom, fHRandom  );\n        }        \n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexFleshImpact( vSpritePixel, fRandom, fHRandom  );\n        }        \n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // Dead trooper\n            vResult = TexPlayW( vSpritePixel, fRandom, fHRandom );\n            float fMask = fRandom * fRandom * ((16.0 - vSpritePixel.y) / 4.0);\n            if ( (vRaymarchResult.a - fMask ) > 0. )\n            {\n            \tvResult = vRaymarchResult;            \n\t            vResult.xyz *= fRandom;\n            }\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // Dead sergeant\n            vResult = TexPlayW( vSpritePixel, fRandom, fHRandom );\n            float fMask = fRandom * fRandom * ((16.0 - vSpritePixel.y) / 4.0);\n            if ( (vRaymarchResult.a - fMask ) > 0. )\n            {\n            \tvResult = vRaymarchResult;            \n\t            vResult.xyz *= fRandom;\n            }\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            // Dead imp\n            vResult = TexPlayW( vSpritePixel, fRandom, fHRandom );\n            float fMask = fRandom * fRandom * ((16.0 - vSpritePixel.y) / 4.0);\n            if ( (vRaymarchResult.a - fMask ) > 0. )\n            {\n            \tvResult = vRaymarchResult;            \n\t            vResult.xyz *= fRandom;\n            }\n        }\n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexFloorLamp( vSpritePixel, fRandom, fHRandom  );\n        }        \n        if ( SpriteProcessIterate( fTestIndex, fSpriteIndex) )\n        {\n            vResult = TexTallTechnoPillar( vSpritePixel, fRandom, fHRandom  );\n        }        \n        \n        \n        if ( isEnemySprite )\n        {\n            vResult = vRaymarchResult;\n            vResult.xyz *= fRandom;\n            \n            if ( fEnemySpriteAction == float(SPRITE_ENEMY_ACTION_ATTACK) )\n            {\n\t            AddGlow( vResult.xyz, vSpritePixel, vec2(16. - 8. * sin( g_scene.fCameraRotation), 36), vec3(1,.9, .5) * 3., 1.0 );\n            }\n        }\n\n        vResult.rgb = clamp( vResult.rgb, 0.0, 1.0 );\n        vResult.rgb = Quantize(vResult.rgb, 32.0);\n    }\n    \n\t\n\n \n    // Flash alpha channel\n#if 0\n    if ( vResult.a == 0. )\n    {\n        float fFlash = 1.0;\n        //float fFlash = sin(iTime* 10.) * 0.5 + 0.5;\n        vResult.rgb = mix ( vec3(0,0,0.3), vec3(1,.5, 1), fFlash );\n    }\n#endif    \n    \n    if ( floor ( fragCoord ) == vec2(0.0) )\n    {\n        vResult = vec4( iResolution.x, iResolution.y, 0, 0 );\n    }\n    \n    fragColor = vResult;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Update / Game Logic\n\n//#define DEV\n\n#ifdef DEV\n\n#define CHEAT_GOD\n#define CHEAT_NOCLIP\n#define CHEAT_NOAI\n\n#endif \n\n\n// TODO:\n//\n// * Bug fixes\n// ** Only pickup when needed\n// ** Fix slidebox bugs *!*\n\n// * Performance\n// ** Profile\n// ** Entity rendering precalc\n// ** Sector update logic in BufC (makes bufA static)\n\n// *Implement more textures\n// ** Exit door\n// ** Exit area door\n// ** Walls with alpha\n//\n// * Add more decorations \n// ** Dead players\n// ** Candelabra\n\n// * Sprites\n// ** improve fireball + explode\n\n// * Presentation / UI\n// ** Skill select?\n// ** Level summary\n\n// * Enemy sound / path finding\n\n// * Viewmodel\n// ** Viewmodel hand\n// ** Better pistol viewmodel\n// ** Better viewmodel anim\n\n// * Map color (brown vs yellow)\n\n// * Gameplay\n// ** More authentic movement\n// ** Mouse accel\n// ** Balance damage / health amounts\n\n// * Ammo / ammo pickups\n// ** Clip\n// ** Shells\n// ** Box of shells\n\n// * Unpinned top / bottom textures\n\n// * Generic door / platform logic\n\n// * Improve enemy poses\n\n\n#define ALLOW_MAP\n\n#define MAP_CHANNEL iChannel0\n#define STATE_CHANNEL iChannel1\n#define iChannelKeyboard iChannel3\n\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n// Common code follows\n\n#define NO_UNROLL(X) (X + min(0,iFrame))\n#define NO_UNROLLU(X) (X + uint(min(0,iFrame)))\n\nbool Map_PointInSector( sampler2D mapSampler, vec2 vPos, Sector sector )\n{\n    float fInOutTest = 0.0;\n    \n    for(int iSideDefIndex=0; iSideDefIndex< NO_UNROLL( sector.iSideDefCount ); iSideDefIndex++)\n    {        \n        SideDef sideDef = Map_ReadSideDefInfo( mapSampler, sector.iSectorId, iSideDefIndex );\n        \n        vec2 vPosToA = sideDef.vA - vPos;\n        vec2 vPosToB = sideDef.vB - vPos;\n        \n        if ( vPosToA.y > 0.0 && vPosToB.y > 0.0 )\n        \tcontinue;\n        if ( vPosToB.y <= 0.0 && vPosToA.y <= 0.0 )\n        \tcontinue;               \n        \n        float fCross = Cross2d( vPosToA, vPosToB );\n        if ( vPosToA.y > vPosToB.y )\n            fCross = -fCross;\n        if ( fCross < 0.0 )\n        {\n            fInOutTest++;\n        }        \n    }\n    \n    return mod( fInOutTest, 2.0 ) >= 1.0;    \n}\n\nbool Map_PointInSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos, int iSectorId )\n{\n    if ( !Map_ValidSectorId(mapInfo, iSectorId) )\n    {\n        return false;\n    }\n\n    Sector sector = Map_ReadSector( mapSampler, iSectorId );\n\n    return Map_PointInSector( mapSampler, vPos, sector );\n}\n\nint Map_SeekSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos )\n{    \n    for(int iSectorIndex=0; iSectorIndex<NO_UNROLL( mapInfo.iSectorCount ); iSectorIndex++)\n    {        \n        if ( Map_PointInSector( mapSampler, mapInfo, vPos, iSectorIndex ) )\n        {\n            return iSectorIndex;\n        }        \n    }\n\n    return SECTOR_NONE;\n}\n\n\nvoid Map_UpdateSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPrev, vec2 vPos, inout int iSectorId )\n{    \n    if ( vPrev == vPos )\n    {\n        return;\n    }\n    \n    if ( !Map_PointInSector( mapSampler, mapInfo, vPos, iSectorId ) )\n    {\n        int iNewSectorId = Map_SeekSector( mapSampler, mapInfo, vPos );\n        \n        if ( iNewSectorId != SECTOR_NONE )\n        {\n        \tiSectorId = iNewSectorId;\n        }                \n    }\n}\n\n///////////////////////////\n// Trace\n///////////////////////////\n\nTraceResult Map_Trace( sampler2D mapSampler, MapInfo mapInfo, vec3 vRayOrigin, vec3 vRayDir, int iSectorId, float fMaxDist )\n{\n    TraceResult result;\n    \n    result.iTexture = 0u;\n    result.vTexture = vec3(0.0);\n    result.fDist = 0.0;\n    result.fLightLevel = 0.0;\n    result.iSector = SECTOR_NONE;\n    \n    while(true)\n    {\n        if ( iSectorId == SECTOR_NONE )\n        {\n            break;\n        }\n        \n        Sector sector = Map_ReadSector( mapSampler, iSectorId );\n        \n        TraceSectorState sectorState;\n        sectorState.iNextSector = SECTOR_NONE;        \n        sectorState.fEnterDist = result.fDist;\n        sectorState.bNoUpper = false;\n        result.fDist = fMaxDist;\n        result.iSector = iSectorId;\n        \n        for(int iSideDefIndex=0; iSideDefIndex<NO_UNROLL( sector.iSideDefCount); iSideDefIndex++)\n        {\n            SideDef sideDef = Map_ReadSideDefInfo( mapSampler, iSectorId, iSideDefIndex );                        \n\n            TraceSideDef( mapSampler, vRayOrigin, vRayDir, result, sectorState, sector, sideDef );\n        }\n\n        // Test floor / ceiling\n        if ( sectorState.fExitY < sector.fFloorHeight )\n        {\n            result.fDist = (sector.fFloorHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vFloorPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vFloorPos.xz );\n            result.iTexture = sector.iFloorTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }\n        else\n        if ( sectorState.fExitY > sector.fCeilingHeight && !sectorState.bNoUpper )\n        {\n            result.fDist = (sector.fCeilingHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vCeilingPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vCeilingPos.xz );\n            result.iTexture = sector.iCeilingTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }        \n\n        iSectorId = sectorState.iNextSector;\n    }\n    \n    if ( result.iTexture == 1u )\n        result.fDist = FAR_CLIP;\n    \n    return result;\n}\n\n// End of common code\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n\n\nMapInfo g_mapInfo;\nGameState g_gameState;\n\nstruct Controls\n{\n    bool menuConfirm;\n    bool menuUp;\n    bool menuDown;\n    \n    bool moveForwards;\n    bool moveBackwards;\n    bool moveLeft;\n    bool moveRight;\n    bool fire;\n\n    bool turnLeft;\n    bool turnRight;\n\n    bool run;\n    bool strafe;\n    bool open;    \n    \n    bool weap_2;\n    bool weap_3;\n    \n    bool toggleMouseLook;\n    bool toggleInvertY;\n};\n    \nControls g_controls;\n\nControls ReadControls()\n{\n    Controls controls;\n    \n    bool bArrowUp = Key_IsPressed( iChannelKeyboard, KEY_UP );\n    bool bArrowDown = Key_IsPressed( iChannelKeyboard, KEY_DOWN );\n    bool bSpace = Key_IsPressed( iChannelKeyboard, KEY_SPACE );        \n    bool bEnter = Key_IsPressed( iChannelKeyboard, KEY_ENTER );        \n    \n    controls.moveForwards = \t\tKey_IsPressed( iChannelKeyboard, KEY_W ) || bArrowUp;\n    controls.moveBackwards = \t\tKey_IsPressed( iChannelKeyboard, KEY_S ) || bArrowDown;\n    controls.moveLeft = \t\t\tKey_IsPressed( iChannelKeyboard, KEY_A );\n    controls.moveRight = \t\t\tKey_IsPressed( iChannelKeyboard, KEY_D );\n    controls.fire = \t\t\t\tbSpace;\n\n    controls.turnLeft = \t\t\tKey_IsPressed( iChannelKeyboard, KEY_LEFT );\n    controls.turnRight = \t\t\tKey_IsPressed( iChannelKeyboard, KEY_RIGHT );\n\n    controls.run = \t\t\t\t\tKey_IsPressed( iChannelKeyboard, KEY_SHIFT );\n    controls.strafe = \t\t\t\tKey_IsPressed( iChannelKeyboard, KEY_ALT );        \n    controls.open = \t\t\t\tbEnter || Key_IsPressed( iChannelKeyboard, KEY_F );\n    \n    controls.weap_2 = \t\t\t\tKey_IsPressed( iChannelKeyboard, KEY_2 );\n    controls.weap_3 = \t\t\t\tKey_IsPressed( iChannelKeyboard, KEY_3 );        \n    \n    controls.toggleMouseLook = \t\tKey_IsToggled( iChannelKeyboard, KEY_L );\n    controls.toggleInvertY = \t\tKey_IsToggled( iChannelKeyboard, KEY_I );\n    \n    controls.menuConfirm = \t\t\tbSpace || bEnter;\n    controls.menuUp = \t\t\t\tbArrowUp;\n    controls.menuDown = \t\t\tbArrowDown;\n    \n    return controls;\n}\n    \n\nvoid Entity_MapSpawn( inout Entity entity, int iSpawnIndex )\n{   \n    Entity_Clear( entity );\n    \n    vec4 vData0 = ReadMapData( MAP_CHANNEL, ivec2(128, iSpawnIndex) );\n    vec4 vData1 = ReadMapData( MAP_CHANNEL, ivec2(129, iSpawnIndex) );\n    \n    if ( dot(vData0.zw, vData0.zw) > 0.0 )\n    {\n        entity.iType = int(vData0.x);\n        entity.iSubType = int(vData0.y);\n        entity.vPos.xz = vData0.zw;\n        entity.vPos.y = 0.0;\n        entity.fYaw = radians( 90. - vData1.x );\n\n        entity.iSectorId = Map_SeekSector( MAP_CHANNEL, g_mapInfo, entity.vPos.xz );    \n\n        Sector sector = Map_ReadSector( MAP_CHANNEL, entity.iSectorId );\n\n        entity.vPos.y = sector.fFloorHeight;\n        \n        if ( entity.iType == ENTITY_TYPE_PLAYER )\n        {\n            entity.fHealth = 100.0;\n        }\n        if ( entity.iType == ENTITY_TYPE_ENEMY )\n        {\n            if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_TROOPER )\n            {\n\t            entity.fHealth = 20.0;\n            }\n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_SERGEANT )\n            {\n\t            entity.fHealth = 30.0;\n            }\n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_IMP )\n            {\n\t            entity.fHealth = 60.0;\n            }\n        }\n        if ( entity.iType == ENTITY_TYPE_BARREL )\n        {\n            entity.fHealth = 20.0;\n        }        \n        if ( entity.iType == ENTITY_TYPE_DOOR )\n        {        \n\t        entity.fTarget = sector.fFloorHeight;\n        }\n        if ( entity.iType == ENTITY_TYPE_PLATFORM )\n        {        \n            entity.vPos.y = sector.fFloorHeight;\n            entity.vPos.xz = vData1.zw; // trigger location\n\t        entity.fTarget = sector.fFloorHeight;\n        }\n    }\n    else\n    {\n        entity.iType = ENTITY_TYPE_NONE;\n    }\n}\n\nvoid Entity_Fall( inout Entity entity, float fTimestep )\n{\n    if ( Map_ValidSectorId( g_mapInfo, entity.iSectorId ) )\n    {\n        Sector sector = Map_ReadSector( MAP_CHANNEL, entity.iSectorId );    \t\n        float a = -800.;\n        entity.vPos.y += entity.vVel.y * fTimestep + .5 * a * fTimestep * fTimestep;\n        entity.vVel.y += a * fTimestep;\n        if ( entity.vPos.y < sector.fFloorHeight )\n        {\n            entity.vPos.y = sector.fFloorHeight;\n            entity.vVel.y = 0.0;\n        }\n    }\n    else\n    {\n        entity.vVel.y = 0.0;\n    }\n}\n\n\nvoid SlideVector( inout int iSectorId, inout vec2 vPos, inout vec2 vVel, float fYPos, float fYPos2, float fDropOff )\n{       \n\tbool bReevaluate = false;\n    \n    int iInitialSector = iSectorId;\n    \n    // maximum number of sector traversal / wall collisions\n    for (int iIter=0; iIter<8; iIter++ )\n    {\n\t    bReevaluate = false;\n\n        float fVelLength = length( vVel );\n        if ( length( vVel ) <= 0.0 )\n        {\n            break;\n        }\n\n        vec2 vVelDir = normalize( vVel );\n\n        Sector sector = Map_ReadSector( MAP_CHANNEL, iSectorId );\n\n        for(int iSideDefIndex=0; iSideDefIndex<sector.iSideDefCount; iSideDefIndex++)\n        {\n            SideDef sideDef = Map_ReadSideDefInfo( MAP_CHANNEL, iSectorId, iSideDefIndex );                        \n\n            vec3 vHitTUD = Map_SideDefIntersectLine( sideDef, vPos, vVelDir );\n\n            float fHitT = vHitTUD.x;\n            float fHitU = vHitTUD.y;\n            float fDenom = vHitTUD.z;        \n\n\t\t\t// Only consider cases when we are leaving sector\n            if ( fDenom < 0.0 )\n            {        \n                if ( fHitT > 0.0 && fHitT < fVelLength )\n                {\n                    if ( fHitU > 0.0 && fHitU < 1.0 )\n                    {\n                        // We hit a sidedef\n\n                        bool bSolid = true;\n                        bReevaluate = true;\n                        \n                        if ( sideDef.iNextSector != SECTOR_NONE )\n                        {\n#ifdef CHEAT_NOCLIP                            \n                            {   {   {\n#else // #ifdef CHEAT_NOCLIP                                \n                            // blocking flag\n                            if ( mod( floor(sideDef.fFlags / 2.), 2. ) == 0. )\n                            {\n                                // Check heights of next sector\n                                Sector nextSector = Map_ReadSector( MAP_CHANNEL, sideDef.iNextSector );                            \n                                if( ( fYPos > nextSector.fFloorHeight && fYPos < nextSector.fCeilingHeight ) && \n                                    ( fYPos2 > nextSector.fFloorHeight && fYPos2 < nextSector.fCeilingHeight ) )\n                                {\n                                    // Check DropOff (enemies are blocked from walking over ledges higher than this)\n                                    if ( nextSector.fFloorHeight >= (sector.fFloorHeight - fDropOff) )\n                                    {\n#endif // #ifdef CHEAT_NOCLIP                            \n                                        // Consider next sector\n                                        bSolid = false;\n                                        iSectorId = sideDef.iNextSector;                                    \n                                    }\n                                }\n                            }\n                        }\n                        \n                        \n                        //if (false)\n                        if ( bSolid )\n                        {\n                            //vVel *= 0.0;\n                            //break;\n\n                            // Apply the sliding constraint\n                            vec2 vAB = sideDef.vB - sideDef.vA;\n                            vec2 vNormal = normalize( vec2( -vAB.y, vAB.x ) );\n\n                            float fDot = dot( vVel, vNormal );\n                            vVel -= vNormal * fDot;\n                            vVel -= vNormal * 0.2;\n                            \n                            // Velocity updated, begin testing from initial sector\n                            iSectorId = iInitialSector;\n                        }    \n                        \n                        break;                    \n                    }\n                }\n            }                \n        }        \n\n        if ( !bReevaluate )\n        {\n            break;\n        }\n    }\n    \n    if (!bReevaluate)\n    {\n    \tvPos += vVel;    \n    }\n    else\n    {\n        vVel = vec2(0);\n    }\n}\n            \nvoid Entity_UpdateSlideBox( inout Entity entity, float fTimestep )\n{\n    entity.fYaw += entity.fYawVel * fTimestep;\n\n    const float fStepHeight = 24.1; // https://www.doomworld.com/vb/doom-general/67054-maximum-height-monsters-can-step-on/\n    const float fClearanceHeight = 32.;\n    \n    float fDropOff = 10000.0;\n    if ( entity.iType == ENTITY_TYPE_ENEMY )\n    {\n        // Enemies \n        fDropOff = 24.0;\n    }\n    entity.vVel.xz *= fTimestep;\n    SlideVector( entity.iSectorId, entity.vPos.xz, entity.vVel.xz, entity.vPos.y + fStepHeight, entity.vPos.y + fClearanceHeight, fDropOff );\n    entity.vVel.xz /= fTimestep;\n}\n\nfloat Entity_GetWeaponType( Entity entity )\n{\n    if ( entity.iType == ENTITY_TYPE_PLAYER )\n    {\n        //return WEAPON_TYPE_FIREBALL;\n        if ( entity.fUseWeapon == 1. )\n        {\n        \treturn WEAPON_TYPE_PISTOL;\n        }\n        else\n        {\n    \t\treturn WEAPON_TYPE_SHOTGUN;\n        }\n    }\n    else\n    if ( entity.iType == ENTITY_TYPE_ENEMY )\n    {\n        if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_TROOPER )\n        {\n            return WEAPON_TYPE_PISTOL;        \n        }\n        else if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_SERGEANT )\n        {\n            return WEAPON_TYPE_SHOTGUN;        \n        }\n        else if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_IMP )\n        {\n            return WEAPON_TYPE_FIREBALL;        \n        }        \n    }\n\n    return WEAPON_TYPE_PISTOL;\n}\n\nWeaponDef Entity_GetWeaponDef( Entity entity )\n{\n    return Weapon_GetDef( Entity_GetWeaponType( entity ), entity.iType == ENTITY_TYPE_ENEMY );\n}\n    \n    \nint Enemy_GetState( Entity entity )\n{\n    return int(entity.fArmor);\n}\n\nvoid Enemy_SetState( inout Entity entity, int iNewState )\n{\n    if ( Enemy_GetState(entity) == ENEMY_STATE_DIE )\n    {\n        return;\n    }\n    \n    entity.fArmor = float(iNewState);\n    \n    bool setRandomTimer = false;\n    \n    if ( iNewState == ENEMY_STATE_PAIN )\n    {\n        entity.fTimer = 0.2;    \n    }\n    else\n    if ( iNewState == ENEMY_STATE_DIE )\n    {\n        SetFlag( entity.iFrameFlags, ENTITY_FRAME_FLAG_DROP_ITEM );\n        entity.fTimer = 0.4;    \n    }\n    else\n#ifdef CHEAT_NOAI \n    {\n    \tentity.fArmor = float(ENEMY_STATE_STAND);        \n        entity.fTimer = 0.4;    \n    }\n#else        \n    if ( iNewState == ENEMY_STATE_FIRE )\n    {\n        SetFlag( entity.iFrameFlags, ENTITY_FRAME_FLAG_FIRE_WEAPON );\n        entity.fTimer = 0.3;    \n    }\n    else\n    if ( iNewState == ENEMY_STATE_WALK_RANDOM )\n    {\n    \tfloat fRandom = Hash( float(entity.iId) + iTime + 3.456 );        \n        \n        entity.fYaw = fRandom * 3.14 * 2.0;\n\n        float fStepScale = 3.14 / 4.0;\n        entity.fYaw = floor( entity.fYaw / fStepScale ) * fStepScale;\n        \n        setRandomTimer = true;\n    }\n    else\n    if ( iNewState == ENEMY_STATE_WALK_TO_TARGET )\n    {\n        Entity targetEnt = Entity_Read( STATE_CHANNEL, int(entity.fTarget) );\n        vec3 vToTarget = targetEnt.vPos - entity.vPos;\n        entity.fYaw = atan(vToTarget.x, vToTarget.z);\n        \n        float fStepScale = 3.14 / 4.0;\n        entity.fYaw = floor( entity.fYaw / fStepScale ) * fStepScale;\n        \n        setRandomTimer = true;\n    }\n    else\n    {\n        setRandomTimer = true;\n    }    \n\n    if ( setRandomTimer )\n    {\n    \tfloat fRandom = Hash( float(entity.iId) + iTime + 0.1 );        \n        entity.fTimer = 0.5 + fRandom * fRandom * 1.5;\n    }\n#endif // #ifndef CHEAT_NOAI        \n}\n\nvoid Enemy_SetRandomHostileState( inout Entity entity, bool notFire )\n{\n    float fRandom = Hash( float(entity.iId) + iTime );\n    \n    if ( !notFire && (fRandom < 0.2) )\n    {        \n        if ( notFire )\n        {\n        \tEnemy_SetState( entity, ENEMY_STATE_STAND );                    \n        }\n        else\n        {\n\t        Enemy_SetState( entity, ENEMY_STATE_FIRE );        \n        }\n\t}\n    else\n    if ( fRandom < 0.7 )\n    {\n        Entity targetEnt = Entity_Read( STATE_CHANNEL, int(entity.fTarget) );\n        vec3 vToTarget = targetEnt.vPos - entity.vPos;\n        \n        if ( length( vToTarget ) < 100.0 )\n        {\n        \tEnemy_SetState( entity, ENEMY_STATE_WALK_RANDOM );\n        }\n        else\n        {\n        \tEnemy_SetState( entity, ENEMY_STATE_WALK_TO_TARGET );\n\t\t}\n    }\n    else\n    {        \n        Enemy_SetState( entity, ENEMY_STATE_STAND );        \n\t}\n}\n\nbool Entity_CanHear( Entity entityA, Entity entityB )\n{\n    // Simple distance check for now...\n    // Could do sector coloring somehow?\n    if ( length( entityA.vPos - entityB.vPos ) < 400.0 ) \n    {\n        return true;\n    }\n    return false;\n}\n\nbool Entity_CanSee( Entity entityA, Entity entityB )\n{\n    vec3 vRayStart = entityA.vPos + vec3(0,32,0);\n    vec3 vRayEnd = entityB.vPos + vec3(0,32,0);            \n    vec3 vRayDir = normalize( vRayEnd - vRayStart );\n    float fDistToTarget = distance( vRayStart, vRayEnd );\n\tTraceResult traceResult = Map_Trace( MAP_CHANNEL, g_mapInfo, vRayStart, vRayDir, entityA.iSectorId, fDistToTarget );\n    return traceResult.fDist >= fDistToTarget;\n}\n\nbool Enemy_CanSee( inout Entity enemy, Entity target )\n{\n    vec3 vTargetPos = target.vPos;\n    vec3 vToTarget = vTargetPos - enemy.vPos;\n    float fAng = mod((degrees( atan( vToTarget.x, vToTarget.z ) - enemy.fYaw ) + 180.0), 360.0) - 180.0;\n\n    if ( abs( fAng ) < 45.0 )\n    {\n        // Line of sight check\n\n        if ( Entity_CanSee( enemy, target ) )\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nvoid Enemy_UpdateState(  inout Entity entity )\n{\n    int iState = Enemy_GetState( entity );\n    \n    if( entity.fHealth <= 0.0 )\n    {\n        Enemy_SetState( entity, ENEMY_STATE_DIE );\n        iState = ENEMY_STATE_DIE;\n    }\n\n    if ( iState == ENEMY_STATE_DIE )\n    {\n        if ( entity.fTimer == 0. )\n        {            \n            entity.iType = ENTITY_TYPE_DECORATION;\n            if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_TROOPER )\n            {\n            \tentity.iSubType = ENTITY_SUB_TYPE_DECORATION_DEAD_TROOPER;\n    \t\t}\n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_SERGEANT )\n            {\n            \tentity.iSubType = ENTITY_SUB_TYPE_DECORATION_DEAD_SERGEANT;\n    \t\t}\n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_ENEMY_IMP )\n            {\n            \tentity.iSubType = ENTITY_SUB_TYPE_DECORATION_DEAD_IMP;\n    \t\t}\n            else\n            {\n            \tentity.iSubType = ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS;            \n            }\n        }\n        \n        return;\n    }    \n     \n    // Check if can see player    \n    if ( int(entity.fTarget) == ENTITY_NONE )\n    {        \n\t\tEntity playerEnt = Entity_Read( STATE_CHANNEL, 0 );\n        \n        bool wakeUp = false;\n\n        if ( Enemy_CanSee( entity, playerEnt ) )\n        {\n\t\t\twakeUp = true;\n        }   \n\n        // Wake if player firing weapon\n        if ( !wakeUp )\n        {\n        \tif ( FlagSet( playerEnt.iFrameFlags, ENTITY_FRAME_FLAG_FIRE_WEAPON ) )\n            {\n                if ( Entity_CanHear( entity, playerEnt ) )\n                {\n\t                wakeUp  = true;\n\t\t\t\t}\n            }            \n        }\n\n        if ( wakeUp )\n        {\n            // target player \n            entity.fTarget = 0.;\n        \tEnemy_SetState( entity, ENEMY_STATE_STAND );\n            iState = ENEMY_STATE_STAND;            \n        }\n    }\n    \n    \n    if ( iState == ENEMY_STATE_IDLE )\n    {\n    }\n\telse\n    if ( iState == ENEMY_STATE_PAIN )\n    {\n        if ( entity.fTimer == 0. )\n        {\n            Enemy_SetState( entity, ENEMY_STATE_STAND );\n        }\n    }\n\telse\n    if ( \tiState == ENEMY_STATE_STAND ||\n        \tiState == ENEMY_STATE_FIRE ||\n        \tiState == ENEMY_STATE_WALK_TO_TARGET ||\n        \tiState == ENEMY_STATE_WALK_RANDOM\n       )\n    {\n        if ( int(entity.fTarget) != ENTITY_NONE )\n        {\n            Entity targetEnt = Entity_Read( STATE_CHANNEL, int(entity.fTarget) );\n\n            if ( targetEnt.fHealth <= 0.0 )\n            {\n                entity.fTarget = float( ENTITY_NONE );\n                Enemy_SetState( entity, ENEMY_STATE_IDLE );\n            }\n        }\n        \n        if ( entity.fTimer == 0. )\n        {\n            if ( iState == ENEMY_STATE_FIRE )\n            {\n\t            Enemy_SetRandomHostileState( entity, true );\n            }\n            else\n            {\n\t            Enemy_SetRandomHostileState( entity, false );\n            }                \n        }\n    }        \n}\n\nbool Entity_IsAlivePlayer( Entity entity )\n{\n    if ( entity.iType == ENTITY_TYPE_PLAYER )\n    {\n        if ( entity.fHealth > 0.0 )\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nbool Entity_CanReceiveDamage( Entity entity )\n{\n    if ( entity.iType == ENTITY_TYPE_BARREL )\n        return true;\n    \n    if ( Entity_IsAlivePlayer( entity ) )\n    {\n#ifdef CHEAT_GOD        \n        return false;\n#else\n        return true;\n#endif    \n    }\n    \n    if ( entity.iType == ENTITY_TYPE_ENEMY )\n    {\n        if ( Enemy_GetState(entity) == ENEMY_STATE_DIE )\n        {\n            return false;\n        }\n        \n        return true;\n    }\n    \n    return false;\n}\n\nvoid Entity_ApplyDamage( inout Entity entity, float fAmount, int iSourceId )\n{\n    if ( !Entity_CanReceiveDamage( entity ) )\n    {\n        return;\n    }\n    \n    if ( Entity_IsAlivePlayer( entity ) )\n    {\n        entity.fTookDamage += fAmount;\n        if ( entity.fHealth - fAmount <= 0.0 )\n        {\n            entity.fTimer = 1.5;\n            entity.iEvent = EVENT_DIED;\n        }\n    } \n    \n    float fArmorAbsorb = 0.;\n    \n    if ( Entity_IsAlivePlayer( entity ) )\n    {\n        fArmorAbsorb = min( fAmount, entity.fArmor );\n        entity.fArmor -= fArmorAbsorb;\n        fArmorAbsorb *= 0.25; // always absorb 25% (ignore special rules about blue armor)\n    }\n    \n    entity.fHealth -= (fAmount - fArmorAbsorb);\n    \n    Entity source = Entity_Read( STATE_CHANNEL, iSourceId );\n\n    if ( iSourceId != ENTITY_NONE )\n    {\n\t    entity.vVel.xz += normalize( entity.vPos.xz - source.vPos.xz ) * fAmount;\n    }\n\n    if ( entity.iType == ENTITY_TYPE_ENEMY )\n    {\n        if ( iSourceId != ENTITY_NONE )\n        {\n            if ( (source.iType == ENTITY_TYPE_ENEMY && entity.iSubType != source.iSubType)\n                || source.iType == ENTITY_TYPE_PLAYER )\n            {\n                // We are now riled with the attacker\n                entity.fTarget = float( iSourceId );\n            }\n        }\n        Enemy_SetState( entity, ENEMY_STATE_PAIN );\n    }                           \n}\n\nbool Entity_IsPlayerTarget( Entity entity )\n{\n    if ( \tentity.iType == ENTITY_TYPE_PLAYER ||\n       \t \tentity.iType == ENTITY_TYPE_BARREL || \n       \t\tentity.iType == ENTITY_TYPE_ENEMY )\n    {\n        return true;\n    }\n    \n    return false;\n}\n\nvoid Player_SelectTarget( inout Entity playerEnt )\n{\n    // Select target entity (used to aim shots up / down)\n    float fBiggestDot = cos( radians( 4.0 ) );\n    \n    float fClosest = FAR_CLIP;\n    \n    playerEnt.fTarget = float(ENTITY_NONE);\n    \n    vec2 vPlayerForwards = vec2( sin( playerEnt.fYaw ), cos( playerEnt.fYaw ) );\n    \n    for ( int iOtherEntityIndex=0; iOtherEntityIndex<int(ENTITY_MAX_COUNT); iOtherEntityIndex++ )\n    {\n        Entity otherEntity = Entity_Read( STATE_CHANNEL, iOtherEntityIndex );\n\n        if ( Entity_IsPlayerTarget( otherEntity ) )\n        {\n            vec3 vToTarget = otherEntity.vPos - playerEnt.vPos;\n            \n            float fDist = length( vToTarget.xz );\n            \n            if ( fDist < fClosest ) \n            {\n                vec2 vDirToTarget = normalize( vToTarget.xz );\n                float fDot = dot( vDirToTarget, vPlayerForwards );\n                \n                if ( fDot > fBiggestDot )\n                {\n                    fClosest = fDist;\n                    playerEnt.fTarget = float(iOtherEntityIndex);\n                }\n            }\n        }        \n    }    \n}\n\nvoid Entity_Think( inout Entity entity, float fTimestep )\n{\n    entity.fTimer = max( 0.0, entity.fTimer - fTimestep );    \n\n    float fMaxAccel = 1000.0;    \n    vec2 vIdealVel = vec2(0);\n    \n    bool bUseVelSteer = false;\n    \n    if ( entity.iType == ENTITY_TYPE_PLAYER )\n    {        \n        bUseVelSteer = true;\n                \n        if( entity.fHealth > 0.0 )\n        {\n            vec2 vDir = vec2(0.0);\n\n\n\n            if ( g_controls.moveForwards )\n            {\n                vDir.y += 1.0;\n            }\n            if ( g_controls.moveBackwards )\n            {\n                vDir.y -= 1.0;\n            }\n            if (g_controls.moveLeft || (g_controls.turnLeft && g_controls.strafe))\n            {\n                vDir.x -= 1.0;\n            }\n            if (g_controls.moveRight || (g_controls.turnRight && g_controls.strafe))\n            {\n                vDir.x += 1.0;\n            }\n\n            float fspeed = g_controls.run ? 250.0 : 150.0;\n            fMaxAccel = g_controls.run ? 2000.0 : 1000.0; \n            float fMaxYawVelAccel = g_controls.run ? 50.0 : 30.0;\n            float fTurnspeed = g_controls.run ? 3.5 : 1.5;\n\n            vDir *= fspeed;\n\n            vIdealVel.x = vDir.x * cos( entity.fYaw ) + vDir.y * sin( entity.fYaw );\n            vIdealVel.y = vDir.x * -sin( entity.fYaw ) + vDir.y * cos( entity.fYaw );\n\n            float fMouseSpeed = 1.0 / 180.0;\n            \n            vec2 vMouseDelta = (iMouse.xy - g_gameState.vPrevMouse.xy) * fMouseSpeed;\n            vec2 vMouseSign = sign(vMouseDelta);\n            vec2 vMouseAbs = abs(vMouseDelta);\n            vMouseAbs = pow( vMouseAbs, vec2(1.5));\n            vMouseDelta = vMouseAbs * vMouseSign;\n            if ( iMouse.z > 0.0 && g_gameState.vPrevMouse.z > 0.0 )\n            {\n            \tentity.fYaw += (vMouseDelta.x);\n                \n                if ( g_controls.toggleMouseLook )\n                {\n                    float fPitchInvert = g_controls.toggleInvertY ? -1.0 : 1.0;\n                    \n                \tentity.fPitch += (vMouseDelta.y) * fPitchInvert;\n                }\n                else\n                {\n                \tentity.fPitch = 0.0;\n                }\n                float fMaxPitch = radians(89.0);\n                entity.fPitch = clamp( entity.fPitch, -fMaxPitch, fMaxPitch);\n            }\n            \n            float fIdealYawVel = 0.0;\n\n            if ( g_controls.turnLeft && !g_controls.strafe )\n            {\n                fIdealYawVel -= 1.0;\n            }\n            if ( g_controls.turnRight && !g_controls.strafe )\n            {\n                fIdealYawVel += 1.0;\n            }\n\n            fIdealYawVel *= fTurnspeed;\n\n            float fToIdealYawVel = fIdealYawVel - entity.fYawVel;\n            entity.fYawVel += clamp( fToIdealYawVel, -fMaxYawVelAccel * fTimestep, fMaxYawVelAccel * fTimestep );        \n            \n            // Change weapon\n            {\n\t\t\t\tif ( g_controls.weap_2 )\n                {\n                    entity.fUseWeapon = 1.;\n                }\n                \n\t\t\t\tif ( g_controls.weap_3 )\n                {\n                    if ( entity.fHaveShotgun > 0. )\n                    {\n                    \tentity.fUseWeapon = 2.;\n                    }\n                }\n            }\n            \n            \n            // Fire weapon\n            if ( g_controls.fire )\n            {\n                if ( entity.fTimer == 0.0 )\n                {\n                    SetFlag( entity.iFrameFlags, ENTITY_FRAME_FLAG_FIRE_WEAPON );\n\n                    WeaponDef weaponDef = Entity_GetWeaponDef( entity );\n\n                    // reload time\n                    entity.fTimer = weaponDef.fReloadTime;\n                    \n                    Player_SelectTarget( entity );\n                }\n            }\n            \n            // Apply Nukage damage\n\t        #define TEX_NUKAGE 2u\n            Sector sector = Map_ReadSector( MAP_CHANNEL, entity.iSectorId );\n            if ( sector.iFloorTexture == TEX_NUKAGE )\n            {\n                float fCurrTime = g_gameState.fGameTime;\n                float fNextTime = fCurrTime + fTimestep;\n                // apply damage every second\n                if ( floor( fCurrTime ) != floor( fNextTime ) )\n                {\n                    // 5 damage per second\n                \tEntity_ApplyDamage( entity, 5.0, ENTITY_NONE );\n                }\n            }                           \n        }\n        else\n        {\n            entity.fYawVel *= pow( 0.3, fTimestep );\n        }\n    }    \n    else if ( entity.iType == ENTITY_TYPE_ENEMY )\n    {\n        bUseVelSteer = true;\n        fMaxAccel = 50.;\n        \n        Enemy_UpdateState( entity );\n        \n        int iState = Enemy_GetState( entity );\n        \n        if ( iState == ENEMY_STATE_FIRE )\n        {\n            Entity targetEnt = Entity_Read( STATE_CHANNEL, int(entity.fTarget) );\n            vec3 vToTarget = targetEnt.vPos - entity.vPos;\n            entity.fYaw = atan(vToTarget.x, vToTarget.z);\n        }\n        \n        if ( iState == ENEMY_STATE_WALK_TO_TARGET || iState == ENEMY_STATE_WALK_RANDOM )\n        {\n            float fWalkSpeed = 50.;\n            vIdealVel.x = sin( entity.fYaw ) * fWalkSpeed;\n            vIdealVel.y = cos( entity.fYaw ) * fWalkSpeed;\n        }     \n    }    \n    else if ( entity.iType == ENTITY_TYPE_BARREL )\n    {\n        entity.vVel *= pow( 0.3, fTimestep );\n        \n        if( entity.fHealth <= 0.0 )\n        {\n            if ( entity.iSubType == ENTITY_SUB_TYPE_BARREL_INACTIVE )\n            {\n                entity.iSubType = ENTITY_SUB_TYPE_BARREL_EXPLODING;\n                entity.fTimer = 1.0;\n            }\n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_BARREL_EXPLODING )\n            {\n                if ( entity.fTimer <= 0.0 )\n                {\n\t                entity.iSubType = ENTITY_SUB_TYPE_BARREL_APPLY_DAMAGE;\n                }\n            }\n            else\n            {\n\t\t\t\tEntity_Clear( entity );                                    \n            }\n        }        \n    }    \n    else if ( entity.iType == ENTITY_TYPE_BULLET )\n    {\n        entity.fTarget = -1.; // Clear target (only deal damage for first frame)\n        if ( entity.fTimer <= 0.0 )\n        {\n            Entity_Clear( entity );\n        }\n    }\n    else if ( entity.iType == ENTITY_TYPE_FIREBALL )\n    {\n        if ( entity.fTimer <= 0.0 )\n        {\n            Entity_Clear( entity );\n        }\n    }\n    else if ( entity.iType == ENTITY_TYPE_DOOR )\n    {        \n        Entity playerEnt = Entity_Read( STATE_CHANNEL, 0 );\n        \n        bool bPlayerNearby = (distance(entity.vPos.xz, playerEnt.vPos.xz) < 100. );\n        bool bTrigger = g_controls.open && bPlayerNearby;\n        \n        float fOpenDist = entity.fTarget - entity.vPos.y;\n        \n        // Door state machine\n        if ( entity.iSubType == 0 )\n        {\n\t        // Closed        \n            if ( bTrigger )\n            {\n                entity.iSubType = 1;\n            }\n        }\n        else\n        if ( entity.iSubType == 1 )\n        {\n\t        // Opening\n            fOpenDist += 40.0 * fTimestep;\n            \n            if ( fOpenDist >= 80.0 )\n            {\n                fOpenDist = 80.0;\n                entity.iSubType = 2;\n                \n                entity.fTimer = 5.;\n            }\n        }\n        else\n        if ( entity.iSubType == 2 )\n        {\n\t        // Open\n            if ( bTrigger || entity.fTimer == 0.0 )\n            {\n                entity.iSubType = 3;\n            }\n        }\n        else\n        if ( entity.iSubType == 3 )\n        {\n\t        // Closing\n            fOpenDist -= 40.0 * fTimestep;\n            \n            if ( fOpenDist <= 0.0 )\n            {\n                fOpenDist = 0.0;\n                entity.iSubType = 0;\n            }\n            \n            if ( bTrigger )\n            {\n                entity.iSubType = 1;\n            }            \n        }\n        \n        entity.fTarget = fOpenDist + entity.vPos.y;        \n    }\n    else\n    if ( entity.iType == ENTITY_TYPE_PLATFORM )\n    {\n        Entity playerEnt = Entity_Read( STATE_CHANNEL, 0 );\n        \n        bool bPlayerNearby = (distance(entity.vPos.xz, playerEnt.vPos.xz) < 150. );\n        \n        float fOpenDist = entity.fTarget;\n        // Hack - params from spawn data yaw\n        float fSpawnYaw = 90. - degrees(entity.fYaw);\n        float fMoveSpeed = abs(fSpawnYaw);\n        bool bStaysLowered = fSpawnYaw < 0.0;\n        \n        // Hack - both platforms on this level go to this height\n        float fFinalFloorHeight = -48.;\n        \n        if ( entity.iSubType == 0 )\n        {\n            // Platform is Up\n            \n            if ( bPlayerNearby )\n            {\n                entity.iSubType = 1;\n            }\n        }\n        else if ( entity.iSubType == 1 )\n        {\n            // Platform is Lowering\n            fOpenDist -= fMoveSpeed * fTimestep;\n            \n            if ( fOpenDist < fFinalFloorHeight )\n            {\n                fOpenDist = fFinalFloorHeight;\n                entity.iSubType = 2;\n                \n                entity.fTimer = 5.;\n            }            \n        }\n        else if ( entity.iSubType == 2 )\n        {\n            // Platform is Down\n            if ( !bStaysLowered )\n            {\n                if ( entity.fTimer == 0.0 )\n                {\n                    entity.iSubType = 3;\n                }            \n            }\n        }\n        else if ( entity.iSubType == 3 )\n        {\n            // Platform is Raising\n            fOpenDist += fMoveSpeed * fTimestep;\n            \n            if ( fOpenDist > entity.vPos.y )\n            {\n                fOpenDist = entity.vPos.y;\n                entity.iSubType = 0;\n            }            \n        }\n        \n        entity.fTarget = fOpenDist;\n        \n        //entity.fTarget = sin( iTime ) * 100.0;\n    }\n    \n    if ( bUseVelSteer )\n    {\n        vec2 vToIdealVel = vIdealVel - entity.vVel.xz;\n        float len = length( vToIdealVel );\n\n        if ( len > 0.0 )\n        {\n            entity.vVel.xz += normalize(vToIdealVel) * clamp( len, 0.0, fMaxAccel * fTimestep );\n        }        \n    }\n}\n\nbool CanBePushed( Entity entity, Entity otherEntity )\n{\n    if ( Entity_IsAlivePlayer( entity ) )\n    {\n        if ( (otherEntity.iType == ENTITY_TYPE_ENEMY && Enemy_GetState( otherEntity ) != ENEMY_STATE_DIE ) ||\n             (otherEntity.iType == ENTITY_TYPE_BARREL) ||\n             (otherEntity.iType == ENTITY_TYPE_DECORATION && otherEntity.iSubType == ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP)\n           )\n        {\n            return true;\n        }\n    }\n    else if ( entity.iType == ENTITY_TYPE_ENEMY )\n    {\n        if (    (otherEntity.iType == ENTITY_TYPE_ENEMY)\n             || (otherEntity.iType == ENTITY_TYPE_BARREL)\n             //|| (otherEntity.fType == ENTITY_TYPE_PLAYER)\n           )\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nvoid Entity_Collide( inout Entity entity, Entity otherEntity, float fTimestep )\n{\n    // True if we can be pushed\n    if ( CanBePushed( entity, otherEntity ) )\n    {\n        vec2 vDeltaPos = entity.vPos.xz - otherEntity.vPos.xz;\n        vec2 vDeltaVel = entity.vVel.xz - otherEntity.vVel.xz;\n\n        float fLen = length( vDeltaPos );\n        float fVelLen = length(vDeltaVel);\n        float fCombinedRadius = 20.0;\n        if ( fLen > 0.0 && fLen < fCombinedRadius )\n        {\n            vec2 vNormal = normalize(vDeltaPos);\n            \n            if ( fVelLen > 0.0 )\n            {\n                float fProj = dot( vNormal, vDeltaVel );\n\n                if ( fProj < 0.0 )\n                {\n                    // cancel vel in normal dir\n                    vec2 vImpulse = -fProj * vNormal;\n                    \n                    // Push away\n                    float fPenetration = fCombinedRadius - fLen;\n                    vImpulse += vNormal * fPenetration * 5.0 * fTimestep;\n                    \n                    \n\t\t\t\t    if ( CanBePushed( otherEntity, entity ) )\n                    {\n                    \tentity.vVel.xz += vImpulse * 0.5;\n                    }\n                    else\n                    {\n                    \tentity.vVel.xz += vImpulse;\n                    }\n                }\n            }            \n        }        \n    }    \n}\n\nvoid Player_GiveHealth( inout Entity entity, float fAmount, bool mega )\n{    \n    if ( mega )\n    {\n\t    entity.fHealth = min( entity.fHealth + fAmount, 200.0 );\n    }\n    else\n    {\n        if ( entity.fHealth < 100.0 )\n        {\n\t\t    entity.fHealth = min( entity.fHealth + fAmount, 100.0 );\n        }\n\t}\n}\n\nvoid Player_GiveArmor( inout Entity entity, float fAmount, bool mega )\n{\n    if ( mega )\n    {\n\t    entity.fArmor = min( entity.fArmor + fAmount, 200.0 );\n    }\n    else\n    {\n        if ( entity.fArmor < 100.0 )\n        {\n\t\t    entity.fArmor = min( entity.fArmor + fAmount, 100.0 );\n        }\n\t}\n\n}\n\n#define PICKUP_RADIUS 25.\n\nbool Fireball_Hit( Entity fireball, Entity other )\n{\n    if ( fireball.iSubType == ENTITY_SUB_TYPE_FIREBALL  )\n    {\n        if ( other.iId != int(fireball.fArmor) )\n        {                    \t\n            if ( Entity_CanReceiveDamage( other ) )\n            {\n                if ( length( other.vPos.xz - fireball.vPos.xz ) < (12. + 16.0) )\n                {\n                \treturn true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n            \nvoid Entity_Interact( inout Entity entity, float fTimestep )\n{    \n    // Apply actions to this entity based on every other entity\n    \n    float fSpawnQueueSlot = 0.0;\n    \n    for ( int iOtherEntityIndex=0; iOtherEntityIndex<int(ENTITY_MAX_COUNT); iOtherEntityIndex++ )\n    {\n        Entity otherEntity = Entity_Read( STATE_CHANNEL, iOtherEntityIndex );\n\n        if ( entity.iType == ENTITY_TYPE_NONE )\n        {\n            if ( iOtherEntityIndex == entity.iId )\n            {\n\t            entity.fTarget = fSpawnQueueSlot;                \n    \t        break;\n            }\n\n\t        // Set this entity's position in spawn queue\n            if ( otherEntity.iType == ENTITY_TYPE_NONE )\n            {\n                fSpawnQueueSlot++;\n            }                    \n        }\n        else\n        {        \n            // Ignore self\n            if ( iOtherEntityIndex == entity.iId )\n            {\n                continue;\n            }\n\n            Entity_Collide( entity, otherEntity, fTimestep );\n\n            if ( Entity_IsAlivePlayer( entity ) )\n            {\n                if ( otherEntity.iType == ENTITY_TYPE_ITEM )\n                {\n                    if ( distance(entity.vPos.xz, otherEntity.vPos.xz) < PICKUP_RADIUS)\n                    {\n                        if( otherEntity.iSubType == ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS )\n                        {\n                            Player_GiveHealth( entity, 1.0, true );\n\t\t\t\t            entity.iEvent = EVENT_HEALTH_BONUS;                            \n                        }\n                        else\n                        if( otherEntity.iSubType == ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS )\n                        {\n                            Player_GiveArmor( entity, 1.0, false );\n\t\t\t\t            entity.iEvent = EVENT_ARMOR_BONUS;                            \n                        }\n                        else\n                        if ( otherEntity.iSubType == ENTITY_SUB_TYPE_ITEM_MEDIKIT )\n                        {\n                            Player_GiveHealth( entity, 25.0, false );\n\t\t\t\t            entity.iEvent = EVENT_MEDIKIT;                            \n                        }\n                        else\n                        if ( otherEntity.iSubType == ENTITY_SUB_TYPE_ITEM_STIMPACK )\n                        {\n                            Player_GiveHealth( entity, 10.0, false );\n\t\t\t\t            entity.iEvent = EVENT_STIMPACK;\n                        }\n                        else\n                        if ( otherEntity.iSubType == ENTITY_SUB_TYPE_ITEM_GREENARMOR )\n                        {\n                            Player_GiveArmor( entity, 100.0, false );\n\t\t\t\t            entity.iEvent = EVENT_GREENARMOR;\n                        }\n                        else\n                        if ( otherEntity.iSubType == ENTITY_SUB_TYPE_ITEM_BLUEARMOR )\n                        {\n                            Player_GiveArmor( entity, 200.0, true );\n\t\t\t\t            entity.iEvent = EVENT_BLUEARMOR;\n                        }\n                        else\n                        if ( otherEntity.iSubType == ENTITY_SUB_TYPE_ITEM_SHOTGUN )\n                        {\n                            if ( entity.fHaveShotgun == 0. )\n                            {\n\t                    \t\tentity.fUseWeapon = 2.;                        \n\t\t\t\t\t            entity.iEvent = EVENT_SHOTGUN;\n                            }\n                            \t\n                            entity.fHaveShotgun = 1.;\n                        }\n                    }\n                }\n            }\n            else\n            if ( entity.iType == ENTITY_TYPE_ITEM )\n            {\n                if ( Entity_IsAlivePlayer( otherEntity ) )\n                {\n                    if ( distance(entity.vPos.xz, otherEntity.vPos.xz) < PICKUP_RADIUS)\n                    {\n                        entity.iType = ENTITY_TYPE_NONE;\n                    }\n                }\n            }\n            if ( entity.iType == ENTITY_TYPE_FIREBALL )\n            {\n                if ( Fireball_Hit( entity, otherEntity ) )\n                {\n                    entity.iSubType = ENTITY_SUB_TYPE_FIREBALL_IMPACT;\n                    entity.fTimer = 0.3;\n                }\n            }\n            \n            // Process damage from other\n            if ( otherEntity.iType == ENTITY_TYPE_BULLET )\n            {\n                // Bullet is applying damage to this entity\n                if ( otherEntity.fTarget == float(entity.iId) )\n                {\n                    Entity_ApplyDamage( entity, otherEntity.fHealth, int( otherEntity.fArmor ) );\n                }\n            }\n            else\n            if ( otherEntity.iType == ENTITY_TYPE_FIREBALL )\n            {\n                if ( Fireball_Hit( otherEntity, entity ) )\n                {\n                    Entity_ApplyDamage( entity, otherEntity.fHealth, int( otherEntity.fArmor ) );\n                }\n            }\n            else\n            if ( otherEntity.iType == ENTITY_TYPE_BARREL && otherEntity.iSubType == ENTITY_SUB_TYPE_BARREL_APPLY_DAMAGE )\n            {\n                // Todo : trace?\n                float fBlastRadius = 250.0;\n                float fMaxDamage = 50.0;\n                \n                vec3 vSeparation = entity.vPos - otherEntity.vPos;\n                float fDamage = fMaxDamage * clamp( 1.0 - length( vSeparation.xz ) / fBlastRadius, 0.0, 1.0 );\n                \n                if ( Entity_CanSee( otherEntity, entity ) )\n                {\n\t\t\t\t    Entity_ApplyDamage( entity, fDamage, otherEntity.iId );\n                }\n            }\n        }        \n    }\n}\n\nvoid Entity_Move( inout Entity entity, float fTimestep )\n{    \n    if( ( entity.iType == ENTITY_TYPE_PLAYER ) \t||\n        ( entity.iType == ENTITY_TYPE_ENEMY ) \t||\n        ( entity.iType == ENTITY_TYPE_BARREL )\n      )\n    {\n        //vec2 vPrevPos = entity.vPos.xz;\n\n        Entity_UpdateSlideBox( entity, fTimestep );\n\n        //Map_UpdateSector( g_mapInfo, vPrevPos, entity.vPos.xz, entity.fSectorId );\n    }\n    \n    if( ( entity.iType == ENTITY_TYPE_PLAYER )\t||\n        ( entity.iType == ENTITY_TYPE_ENEMY )  \t||\n        ( entity.iType == ENTITY_TYPE_BARREL ) \t|| \n        ( entity.iType == ENTITY_TYPE_ITEM ) \t||\n        ( entity.iType == ENTITY_TYPE_DECORATION )\n      )\n    {\n    \tEntity_Fall( entity, fTimestep );    \n    }\n    \n    if ( entity.iType == ENTITY_TYPE_BULLET )\n    {\n        entity.vPos.y += 10.0 * fTimestep;\n    }\n    \n    if ( entity.iType == ENTITY_TYPE_FIREBALL )\n    {\n        if ( entity.iSubType == ENTITY_SUB_TYPE_FIREBALL )\n        {\n\t        vec2 vPrevPos = entity.vPos.xz;\n\n            float fMaxTraceDist = length( entity.vVel ) * fTimestep;\n            vec3 vDir = normalize( entity.vVel );\n\n            TraceResult traceResult = Map_Trace( MAP_CHANNEL, g_mapInfo, entity.vPos, vDir, entity.iSectorId, fMaxTraceDist );\n\n            if ( traceResult.fDist > 0.0 )\n            {\n            \tentity.vPos += vDir * traceResult.fDist;\n            }\n\n        \tMap_UpdateSector( MAP_CHANNEL, g_mapInfo, vPrevPos, entity.vPos.xz, entity.iSectorId );\n            \n            if ( traceResult.fDist > 0.0 && traceResult.fDist < fMaxTraceDist  )\n            {\n                entity.iSubType = ENTITY_SUB_TYPE_FIREBALL_IMPACT;\n                entity.fTimer = 0.3;\n            }\n\t\t}\n    }\n}\n\nfloat RayCircleIntersect( vec2 vRayOrigin, vec2 vRayDir, vec2 vCircleOrigin, float fRadius2 )\n{\n    vec2 vRayOriginToCircleOrigin = vCircleOrigin - vRayOrigin;\n    float fProjection = dot( vRayOriginToCircleOrigin, vRayDir );        \n    vec2 vClosestPos = vRayOrigin + vRayDir * fProjection;\n    vec2 vClosestToCircle = vCircleOrigin - vClosestPos;\n    float fClosestDist2 = dot( vClosestToCircle, vClosestToCircle );\n    if ( fClosestDist2 < fRadius2 )\n    {\n        float fHalfChordLength = sqrt( fRadius2 - fClosestDist2 );\n        float fHitT = fProjection - fHalfChordLength;\n\n        return fHitT;\n\t}\n\n    return -1.0;\n}\n\nfloat Entity_Trace( vec3 vRayOrigin, vec3 vRayDir, int iIgnoreEnt, out Entity hitEntity )\n{\n    hitEntity.iId = -1;\n    float fHitEntityDist = FAR_CLIP;\n    \n    float fOrigDirLen = length( vRayDir.xz );\n    \n    vec2 vFlatRayDir = vRayDir.xz / fOrigDirLen;\n\n    for ( int iTraceEntityIndex=0; iTraceEntityIndex<int(ENTITY_MAX_COUNT); iTraceEntityIndex++ )\n    {\n        if ( iTraceEntityIndex == iIgnoreEnt )\n            continue;\n        \n        Entity entity = Entity_Read( STATE_CHANNEL, iTraceEntityIndex );\n\n        \n        // TODO: Entity_GetSize function?\n        float fRadius = 0.0;\n        float fHeight = 0.0;\n        if ( entity.iType == ENTITY_TYPE_BARREL )\n        {\n            fRadius = 12.0;\n            fHeight = 32.0;            \n        }\n        \n        if ( entity.iType == ENTITY_TYPE_ENEMY || entity.iType == ENTITY_TYPE_PLAYER )\n        {\n            fRadius = 15.0;\n            fHeight = 54.0;            \n        }\n \n        if ( fRadius > 0.0 )\n        {\n            float fHitT = RayCircleIntersect( vRayOrigin.xz, vFlatRayDir, entity.vPos.xz, fRadius * fRadius );\n            fHitT /= fOrigDirLen;\n\t\t\tif ( fHitT > 0.0 && fHitT < fHitEntityDist )\n            {\n                float fEntHitY = vRayOrigin.y + vRayDir.y * fHitT - entity.vPos.y;\n                \n                if ( fEntHitY > 0. && fEntHitY < fHeight )\n                {\n                    fHitEntityDist = fHitT;\n                    hitEntity = entity;\n                }\n            }\n \t   }\n\t}\n    \n    return fHitEntityDist;\n}\n\nint Entity_GetSpawnQueueSlotType( int iSpawnQueueSlot, inout Entity spawningEntity, out int iSpawnSubType )\n{\n    iSpawnSubType = 0;\n    \n    int iOtherSpawnQueueSlot = 0;\n    for ( int iOtherEntityIndex=0; iOtherEntityIndex<int(ENTITY_MAX_COUNT); iOtherEntityIndex++ )\n    {\n        spawningEntity = Entity_Read( STATE_CHANNEL, iOtherEntityIndex );\n\n        // spawn fired bullets\n        if ( FlagSet( spawningEntity.iFrameFlags, ENTITY_FRAME_FLAG_FIRE_WEAPON ) )\n        {\n            WeaponDef weaponDef = Entity_GetWeaponDef( spawningEntity );\n\n            int iNewSlot = iOtherSpawnQueueSlot + weaponDef.iProjectileCount;\n            if ( iNewSlot >= iSpawnQueueSlot ) \n            {\n                if ( weaponDef.fWeaponType == WEAPON_TYPE_FIREBALL )\n                {\n\t                return ENTITY_TYPE_FIREBALL;\n                }\n                else\n                {\n\t                return ENTITY_TYPE_BULLET;\n                }                    \n            }\n            iOtherSpawnQueueSlot = iNewSlot;\n        }\n        \n        // spawn dropped items\n        // spawn fired bullets\n        if ( FlagSet( spawningEntity.iFrameFlags, ENTITY_FRAME_FLAG_DROP_ITEM ) )\n        {\n            bool doSpawn = false;\n            \n            if ( spawningEntity.iSubType == ENTITY_SUB_TYPE_ENEMY_SERGEANT )\n            {\n                iSpawnSubType = ENTITY_SUB_TYPE_ITEM_SHOTGUN;\n                doSpawn = true;\n            }\n            \n            if ( doSpawn )\n            {\n                int iNewSlot = iOtherSpawnQueueSlot + 1;\n                if ( iNewSlot >= iSpawnQueueSlot ) \n                {                \n                    return ENTITY_TYPE_ITEM;                    \n                }\n\t            iOtherSpawnQueueSlot = iNewSlot;\n            }\n        }\n        \n    }\n    \n    return ENTITY_TYPE_NONE;\n}\n\nbool Entity_SpawnOther( inout Entity entity )\n{\n    if ( entity.iType == ENTITY_TYPE_NONE )\n    {\n        Entity spawningEntity;\n        \n        int iSpawnQueueSlot = int(entity.fTarget);\n        int iSpawnSubType;\n        int iSpawnType = Entity_GetSpawnQueueSlotType( iSpawnQueueSlot, spawningEntity, iSpawnSubType );\n        \n        if ( iSpawnType == ENTITY_TYPE_BULLET )\n        {\n            Entity_Clear( entity );\n            entity.iType = ENTITY_TYPE_BULLET;\n            entity.iSubType = ENTITY_SUB_TYPE_BULLET_WALL;\n            \n            WeaponDef weaponDef = Entity_GetWeaponDef( spawningEntity );\n            \n            vec3 vRayOrigin = spawningEntity.vPos + vec3(0,40.,0);\n            // adjust Y to aim at target\n            float dy = tan(spawningEntity.fPitch);\n            if ( int(spawningEntity.fTarget) != ENTITY_NONE )\n            {\n\t\t        Entity targetEntity;\n                \n                targetEntity = Entity_Read( STATE_CHANNEL, int(spawningEntity.fTarget) );\n                \n                vec3 vTargetPos = targetEntity.vPos;\n                \n                if( targetEntity.iType == ENTITY_TYPE_BARREL )\n                {\n                    vTargetPos.y += 30.0;\n                }\n                else\n                {\n                    vTargetPos.y += 40.0;                    \n\t\t\t\t}\n                \n                vec3 vToTarget = vTargetPos - vRayOrigin;\n                dy = vToTarget.y / length(vToTarget.xz);\n            }\n            float fSRand = Hash( float(iSpawnQueueSlot) + iTime) * 2.0 - 1.0;\n            float fSpread = weaponDef.fSpread;\n            float fYaw = spawningEntity.fYaw + fSRand * fSpread;            \n            vec3 vRayDir = normalize( vec3(sin(fYaw), dy, cos(fYaw)) );\n\n            Entity hitEntity;\n            float fHitDist = Entity_Trace( vRayOrigin, vRayDir, spawningEntity.iId, hitEntity );\n            \n            TraceResult traceResult = Map_Trace( MAP_CHANNEL, g_mapInfo, vRayOrigin, vRayDir, spawningEntity.iSectorId, fHitDist );\n\t\t\t\n            if ( hitEntity.iType == ENTITY_TYPE_ENEMY || hitEntity.iType == ENTITY_TYPE_PLAYER )\n            {\n\t            entity.iSubType = ENTITY_SUB_TYPE_BULLET_FLESH;                \n            }\n            \n            // Not sure why this > 0 test is required. Oh well...\n            if ( traceResult.fDist > 0.0 &&  traceResult.fDist < fHitDist  )\n            {\n                fHitDist = traceResult.fDist;\n                hitEntity.iId = -1;\n\t            entity.iSubType = ENTITY_SUB_TYPE_BULLET_WALL;\n            }\n            \n            entity.vPos = vRayOrigin + vRayDir * fHitDist + vec3(0,-8,0);\n            float fRand = Hash(float(iSpawnQueueSlot) + iTime + 1.234);\n            entity.fHealth = weaponDef.fBaseDamagePerProjectile + weaponDef.fRandomDamagePerProjectile * fRand; // Damage to deal\n            entity.fTimer = 0.3; // Impact effect timer\n            entity.fTarget = float( hitEntity.iId ); // Which entity did we hit (cleared on first frame)\n            entity.fArmor = float( spawningEntity.iId ); // Who fired the bullet\n            entity.iSectorId = traceResult.iSector;\n\n            return true;\n        }\n        else\n        if ( iSpawnType == ENTITY_TYPE_FIREBALL )\n        {\n            Entity_Clear( entity );\n            entity.iType = ENTITY_TYPE_FIREBALL;\n            entity.iSubType = ENTITY_SUB_TYPE_FIREBALL;\n            \n            WeaponDef weaponDef = Entity_GetWeaponDef( spawningEntity );\n            \n            entity.vPos = spawningEntity.vPos + vec3(0,40.,0);\n            // adjust Y to aim at target\n            float dy = 0.0;\n            if ( int(spawningEntity.fTarget) != ENTITY_NONE )\n            {\n\t\t        Entity targetEntity;\n                \n                targetEntity = Entity_Read( STATE_CHANNEL, int( spawningEntity.fTarget ) );\n                \n                vec3 vTargetPos = targetEntity.vPos;\n                \n                if( targetEntity.iType == ENTITY_TYPE_BARREL )\n                {\n                    vTargetPos.y += 30.0;\n                }\n                else\n                {\n                    vTargetPos.y += 40.0;                    \n\t\t\t\t}\n                \n                vec3 vToTarget = vTargetPos - entity.vPos;\n                dy = vToTarget.y / length(vToTarget.xz);\n            }\n            float fSRand = Hash( float(iSpawnQueueSlot) + iTime) * 2.0 - 1.0;\n            float fSpread = weaponDef.fSpread;\n            float fYaw = spawningEntity.fYaw + fSRand * fSpread;            \n            entity.vVel = normalize( vec3(sin(fYaw), dy, cos(fYaw)) );\n            float fMoveSpeed = 200.0;\n            entity.vVel *= fMoveSpeed;\n\n            entity.fHealth = weaponDef.fBaseDamagePerProjectile; // Damage to deal\n            entity.fTimer = 5.0; // Travel timeout\n            entity.fArmor = float( spawningEntity.iId ); // Who fired the bullet\n            entity.iSectorId = spawningEntity.iSectorId;\n\n            return true;\n        }\n        else\n        if ( iSpawnType == ENTITY_TYPE_ITEM )\n        {\n            Entity_Clear( entity );\n            entity.iType = ENTITY_TYPE_ITEM;\n            entity.iSubType = iSpawnSubType;\n            entity.vPos = spawningEntity.vPos + vec3(0, 24, 0);\n            entity.vVel = vec3(0, 2, 0);\n            entity.iSectorId = spawningEntity.iSectorId;\n            \n            return true;\n        }            \n    }\n    \n    return false;\n}\n\nvoid Entity_Update( inout Entity entity, float fTimestep )\n{    \n    entity.iFrameFlags = 0;\n    entity.iEvent = 0;\n    entity.fTookDamage = 0.;\n\n    // This is first to ensure consistent state\n    if( Entity_SpawnOther( entity ) )\n    {\n        return;\n    }\n        \n    Entity_Think( entity, fTimestep );\n\n    Entity_Interact( entity, fTimestep );\n    \n    Entity_Move( entity, fTimestep );    \n}\n\nvec4 DrawMap( vec2 vTexCoord )\n{\n    if ( vTexCoord.y < 0.0 )\n    {\n        return vec4(0,0,0,1);\n    }    \n        \n    float fScale = 10.0;\n        \n    vec2 vPixelWorldPos = vTexCoord;    \n    vPixelWorldPos -= vec2(200, 150); \n    vPixelWorldPos *= fScale;\n    vPixelWorldPos += vec2(1056, -3616);\n    \n    fScale *= 1.1;\n    \n    //for(int iSectorIndex=0; iSectorIndex<MAX_SECTOR_COUNT; iSectorIndex++)\n    for(int iSectorIndex=0; iSectorIndex < g_mapInfo.iSectorCount; iSectorIndex++)\n    {\n        //if ( iSectorIndex > g_mapInfo.iSectorCount )\n          //  break;\n\n        Sector sector = Map_ReadSector( MAP_CHANNEL, iSectorIndex );\n\n        /*if ( Map_PointInSector( vPixelWorldPos, sector ) )\n{\nvResult = vec3(1,0,0);\n}*/\n\n\n        for(int iSideDefIndex=0; iSideDefIndex<sector.iSideDefCount; iSideDefIndex++)\n        {\n            SideDef sideDef = Map_ReadSideDefInfo( MAP_CHANNEL, iSectorIndex, iSideDefIndex );                        \n\n            vec2 vSideDir = normalize( sideDef.vB - sideDef.vA );\n\n            float fProj = dot( vSideDir, vPixelWorldPos - sideDef.vA );\n            fProj = clamp( fProj, 0.0, sideDef.fLength );\n\n            vec2 vClosest = sideDef.vA + vSideDir * fProj;\n            float fDist = length( vClosest - vPixelWorldPos );\n\n            if (fDist < fScale * .5 )\n            {\n                if ( sideDef.iNextSector != SECTOR_NONE )\n                {\n                    return vec4(1,1,0,1);\n                }\n                else\n                {\n                    return vec4(1,0,0,1);\n                }\n            }\n        }\t\t\t\n    }\n        \n    return vec4(0.0);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = vec4(0.0);\n\n    g_controls = ReadControls();\n    \n    g_mapInfo = ReadMapInfo( MAP_CHANNEL );\n    g_gameState = GameState_Read( STATE_CHANNEL );\n    \n    float fTimestep = iTimeDelta;//1.0 / 60.0;\n\n    bool bShouldOutputGameState = all( lessThanEqual( floor(fragCoord.xy), vec2( 2, 0 ) ) );\n    int iOutputEntityId = Entity_GetOutputId( fragCoord );\n    bool bShouldOutputEntity = Entity_IdValid( iOutputEntityId );\n    \n    if ( !bShouldOutputEntity && !bShouldOutputGameState )\n    {\n#ifdef ALLOW_MAP        \n        if ( iFrame != 1 )\n#endif            \n        {\n        \tfragColor = texelFetch( iChannel1, ivec2(floor(fragCoord)), 0 );\n\t        return;\n        }\n        \n#ifdef ALLOW_MAP        \n        fragColor = DrawMap( fragCoord - vec2(0, 32));\n        return;\n#endif        \n        \n        //fragColor.rgb = vec3( 1,0,0);\n        //discard;\n    }\n    \n    if ( bShouldOutputGameState )\n    {\n        if ( iFrame == 0 )\n        {\n            GameState_Reset( g_gameState, iMouse );\n        }        \n    }\n    int iMainGameState = g_gameState.iMainState;\n        \n    if ( bShouldOutputEntity )\n    {\n        Entity outputEntity;\n        outputEntity = Entity_Read( STATE_CHANNEL, iOutputEntityId );\n        \n        if ( iMainGameState == MAIN_GAME_STATE_BOOT )\n        {\n            Entity_Clear( outputEntity );\n        }\n\n        if ( iMainGameState == MAIN_GAME_STATE_INIT_LEVEL )\n        {\n            Entity_MapSpawn( outputEntity, iOutputEntityId );\n        }               \n        else if ( iMainGameState == MAIN_GAME_STATE_GAME_RUNNING )\n        {        \n        \tEntity_Update( outputEntity, fTimestep );\n        }\n        \n        Entity_Store( outputEntity, fragColor, fragCoord );        \n    }\n    \n    if ( bShouldOutputGameState )\n    {\n        // Update GameState  \n\n        Entity playerEnt;\n        playerEnt = Entity_Read( STATE_CHANNEL, 0 );\n                \n\t\tg_gameState.fStateTimer += fTimestep;\n        \n        if ( iMainGameState == MAIN_GAME_STATE_BOOT )\n        {\n            g_gameState.iMainState = MAIN_GAME_STATE_SKILL_SELECT;\t\t\t\n        }\n        \n        if ( iMainGameState == MAIN_GAME_STATE_SKILL_SELECT )\n        {\n            if ( g_controls.menuConfirm || g_gameState.fStateTimer > 2.0 )\n            {\n                g_gameState.iMainState = MAIN_GAME_STATE_INIT_LEVEL;\n\t            g_gameState.fStateTimer = 0.0;\n            }            \n        }\n        \n        if ( iMainGameState == MAIN_GAME_STATE_GAME_RUNNING )\n        {\n        \tg_gameState.fGameTime += fTimestep;        \n\n            \n            bool bPlayerNearExit = (distance( playerEnt.vPos.xz, vec2( 2930, -4768 ) ) < 100.0);        \n            if ( bPlayerNearExit && g_controls.open )\n            {\n                g_gameState.iMainState = MAIN_GAME_STATE_WIN;\n\t            g_gameState.fStateTimer = 0.0;\n            }   \n\n            if ( playerEnt.fHealth <= 0.0 && playerEnt.fTimer <= 0.0 )\n            {\n                if ( g_controls.menuConfirm )\n                {\n                    g_gameState.iMainState = MAIN_GAME_STATE_INIT_LEVEL;\n\t\t            g_gameState.fStateTimer = 0.0;\n                }\n            }\n            \n            if ( playerEnt.fHealth > 0.0 )\n            {\n                // This does debounce logic for us\n                if ( Key_IsToggled( iChannelKeyboard, KEY_TAB ) )\n                {\n                    g_gameState.fMap = 1.0;\n                }\n                else\n                {\n                    g_gameState.fMap = 0.0;                \n                }\n            }\n            \n            // Apply / update HUD effects\n            {\n                if ( playerEnt.iEvent == EVENT_HEALTH_BONUS )\n                {\n                    g_gameState.fHudFx += 0.25;\n\n                    g_gameState.iMessage = MESSAGE_HEALTH_BONUS;\n                    g_gameState.fMessageTimer = 3.0;\n                }\n                else if ( playerEnt.iEvent == EVENT_ARMOR_BONUS )\n                {\n                    g_gameState.fHudFx += 0.25;\n\n                    g_gameState.iMessage = MESSAGE_ARMOR_BONUS;\n                    g_gameState.fMessageTimer = 3.0;\n                }\n                else if ( playerEnt.iEvent == EVENT_STIMPACK )\n                {\n                    g_gameState.fHudFx += 0.5;\n\n                    g_gameState.iMessage = MESSAGE_STIMPACK;\n                    g_gameState.fMessageTimer = 3.0;\n                }\n                else if ( playerEnt.iEvent == EVENT_MEDIKIT )\n                {\n                    g_gameState.fHudFx += 0.5;\n\n                    g_gameState.iMessage = MESSAGE_MEDIKIT;\n                    g_gameState.fMessageTimer = 3.0;\n                }\n                else if ( playerEnt.iEvent == EVENT_GREENARMOR )\n                {\n                    g_gameState.fHudFx += 1.0;\n                    \n                    g_gameState.iMessage = MESSAGE_GREENARMOR;\n                    g_gameState.fMessageTimer = 3.0;\n                }\n                else if ( playerEnt.iEvent == EVENT_BLUEARMOR )\n                {\n                    g_gameState.fHudFx += 1.0;\n                    \n                    g_gameState.iMessage = MESSAGE_BLUEARMOR;\n                    g_gameState.fMessageTimer = 3.0;\n                }\n                else if ( playerEnt.iEvent == EVENT_DIED )\n                {\n                    g_gameState.fHudFx -= 1.0;\n                } \n                else if ( playerEnt.iEvent == EVENT_SHOTGUN)\n                {\n                    g_gameState.iMessage = MESSAGE_SHOTGUN;\n                    g_gameState.fMessageTimer = 3.0;\n                }\n\n                if ( playerEnt.fTookDamage > 0.0 )\n                {\n                    g_gameState.fHudFx -= playerEnt.fTookDamage / 8.0;\n                }\n                \n                if ( g_gameState.fHudFx > 0.0 )\n                {\n                    g_gameState.fHudFx = max( 0.0, g_gameState.fHudFx - fTimestep );\n                }        \n                else\n                if ( g_gameState.fHudFx < 0.0 )\n                {\n                    g_gameState.fHudFx = min( 0.0, g_gameState.fHudFx + fTimestep );            \n                }     \n                g_gameState.fHudFx = clamp( g_gameState.fHudFx, -1.0, 1.0 );                \n                \n                // Update message timer;\n                g_gameState.fMessageTimer = max( 0.0, g_gameState.fMessageTimer - fTimestep );\n            }\n            \n        }\n\n        if ( iMainGameState == MAIN_GAME_STATE_INIT_LEVEL )\n        {\n\t\t\tg_gameState.fGameTime = 0.0;\n\t\t\tg_gameState.iMainState = MAIN_GAME_STATE_GAME_RUNNING;\n            g_gameState.fStateTimer = 0.0;\n        }\n        \n        g_gameState.vPrevMouse = iMouse;\n                \n        GameState_Store( g_gameState, fragColor, fragCoord );\n    }        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Scene Rendering\n\n//#define DEBUG_IDENTIFY_TEXTURES\n//#define DEBUG_IDENTIFY_TEXTURE 21.\n//#define DEBUG_IDENTIFY_UNDEFINED_TEXTURES\n//#define DEBUG_ENTITY_INFO\n//#define DEBUG_VALUES\n//#define TEXTURE_PREVIEW 54.0\n\n#define LINUX_WORKAROUND\n\n#define MAP_CHANNEL iChannel0\n#define STATE_CHANNEL iChannel1\n\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n// Common code follows\n\n#define NO_UNROLL(X) (X + min(0,iFrame))\n#define NO_UNROLLU(X) (X + uint(min(0,iFrame)))\n\nbool Map_PointInSector( sampler2D mapSampler, vec2 vPos, Sector sector )\n{\n    float fInOutTest = 0.0;\n    \n    for(int iSideDefIndex=0; iSideDefIndex< NO_UNROLL( sector.iSideDefCount ); iSideDefIndex++)\n    {        \n        SideDef sideDef = Map_ReadSideDefInfo( mapSampler, sector.iSectorId, iSideDefIndex );\n        \n        vec2 vPosToA = sideDef.vA - vPos;\n        vec2 vPosToB = sideDef.vB - vPos;\n        \n        if ( vPosToA.y > 0.0 && vPosToB.y > 0.0 )\n        \tcontinue;\n        if ( vPosToB.y <= 0.0 && vPosToA.y <= 0.0 )\n        \tcontinue;               \n        \n        float fCross = Cross2d( vPosToA, vPosToB );\n        if ( vPosToA.y > vPosToB.y )\n            fCross = -fCross;\n        if ( fCross < 0.0 )\n        {\n            fInOutTest++;\n        }        \n    }\n    \n    return mod( fInOutTest, 2.0 ) >= 1.0;    \n}\n\nbool Map_PointInSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos, int iSectorId )\n{\n    if ( !Map_ValidSectorId(mapInfo, iSectorId) )\n    {\n        return false;\n    }\n\n    Sector sector = Map_ReadSector( mapSampler, iSectorId );\n\n    return Map_PointInSector( mapSampler, vPos, sector );\n}\n\nint Map_SeekSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPos )\n{    \n    for(int iSectorIndex=0; iSectorIndex<NO_UNROLL( mapInfo.iSectorCount ); iSectorIndex++)\n    {        \n        if ( Map_PointInSector( mapSampler, mapInfo, vPos, iSectorIndex ) )\n        {\n            return iSectorIndex;\n        }        \n    }\n\n    return SECTOR_NONE;\n}\n\n\nvoid Map_UpdateSector( sampler2D mapSampler, MapInfo mapInfo, vec2 vPrev, vec2 vPos, inout int iSectorId )\n{    \n    if ( vPrev == vPos )\n    {\n        return;\n    }\n    \n    if ( !Map_PointInSector( mapSampler, mapInfo, vPos, iSectorId ) )\n    {\n        int iNewSectorId = Map_SeekSector( mapSampler, mapInfo, vPos );\n        \n        if ( iNewSectorId != SECTOR_NONE )\n        {\n        \tiSectorId = iNewSectorId;\n        }                \n    }\n}\n\n///////////////////////////\n// Trace\n///////////////////////////\n\nTraceResult Map_Trace( sampler2D mapSampler, MapInfo mapInfo, vec3 vRayOrigin, vec3 vRayDir, int iSectorId, float fMaxDist )\n{\n    TraceResult result;\n    \n    result.iTexture = 0u;\n    result.vTexture = vec3(0.0);\n    result.fDist = 0.0;\n    result.fLightLevel = 0.0;\n    result.iSector = SECTOR_NONE;\n    \n    while(true)\n    {\n        if ( iSectorId == SECTOR_NONE )\n        {\n            break;\n        }\n        \n        Sector sector = Map_ReadSector( mapSampler, iSectorId );\n        \n        TraceSectorState sectorState;\n        sectorState.iNextSector = SECTOR_NONE;        \n        sectorState.fEnterDist = result.fDist;\n        sectorState.bNoUpper = false;\n        result.fDist = fMaxDist;\n        result.iSector = iSectorId;\n        \n        for(int iSideDefIndex=0; iSideDefIndex<NO_UNROLL( sector.iSideDefCount); iSideDefIndex++)\n        {\n            SideDef sideDef = Map_ReadSideDefInfo( mapSampler, iSectorId, iSideDefIndex );                        \n\n            TraceSideDef( mapSampler, vRayOrigin, vRayDir, result, sectorState, sector, sideDef );\n        }\n\n        // Test floor / ceiling\n        if ( sectorState.fExitY < sector.fFloorHeight )\n        {\n            result.fDist = (sector.fFloorHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vFloorPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vFloorPos.xz );\n            result.iTexture = sector.iFloorTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }\n        else\n        if ( sectorState.fExitY > sector.fCeilingHeight && !sectorState.bNoUpper )\n        {\n            result.fDist = (sector.fCeilingHeight - vRayOrigin.y) / vRayDir.y;\n            vec3 vCeilingPos = vRayOrigin + vRayDir * result.fDist;\n            result.vTexture.st = vec2( vCeilingPos.xz );\n            result.iTexture = sector.iCeilingTexture;\n            result.fLightLevel = 0.0;\n            sectorState.iNextSector = SECTOR_NONE;\n        }        \n\n        iSectorId = sectorState.iNextSector;\n    }\n    \n    if ( result.iTexture == 1u )\n        result.fDist = FAR_CLIP;\n    \n    return result;\n}\n\n\n// End of common code\n// ----------------- 8< -------------------------- 8< -------------------------- 8< --------------\n\n\n// ---- 8< ---- GLSL Number Printing - @P_Malin ---- 8< ----\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n\nfloat DigitBin(const in int x)\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue(const in vec2 vStringUV, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    if ((vStringUV.y < 0.0) || (vStringUV.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringUV.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));\n\t\t\t}\t\t\n\t\t}\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringUV.x) * 4.0) + (floor(vStringUV.y * 5.0) * 4.0))), 2.0));\n}\n\n// ---- 8< -------- 8< -------- 8< -------- 8< ----\n\n#define ENABLE_SPRITES\n\n#define DRAW_SKY\n#define HEAD_BOB\n\n#define QUANTIZE_FINAL_IMAGE\n#define QUANTIZE_TEXTURES\n#define PIXELATE_TEXTURES\n\n\n#define DISCARD_BACKGROUND\n\nconst float kDepthFadeScale = (1.0 / 3500.0);\nconst float kExtraLight = 0.0;\n\nvec3 SampleTexture( uint iTexture, const in vec2 vUV );\n\nvec3 GetCameraRayDir( const in vec2 vWindow, const in vec3 vCameraPos, const in vec3 vCameraTarget )\n{\n\tvec3 vForward = normalize(vCameraTarget - vCameraPos);\n\tvec3 vRight = normalize(cross(vec3(0.0, 1.0, 0.0), vForward));\n\tvec3 vUp = normalize(cross(vForward, vRight));\n\t\n    const float kFOV = 1.8;\n    \n\tvec3 vDir = normalize(vWindow.x * vRight + vWindow.y * vUp + vForward * kFOV);\n\n\treturn vDir;\n}\n\n///////////////////////////////\n\n\n\n#ifdef ENABLE_SPRITES\n\nvoid Sprite( vec3 vRayOrigin, vec3 vRayDir, vec3 vPos, vec2 vSpriteDir, int iSectorId, vec4 vSpriteInfo, inout TraceResult traceResult )\n{\n\tif ( vSpriteInfo.z <= 0.0 )\n        return;\n    \n    vec2 vSize = vSpriteInfo.zw;\n    \n\tvec2 vA = vPos.xz - vSpriteDir * 0.5 * vSize.x;\n\tvec2 vB = vPos.xz + vSpriteDir * 0.5 * vSize.x;\n    vec2 vD = vB - vA;\n    vec2 vOA = vA - vRayOrigin.xz;\n    float rcpdenom = 1.0 / Cross2d( vRayDir.xz, vD ); \n    float fHitT = Cross2d( vOA, vD ) * rcpdenom;   \n    \n    float fDepthBias = 0.0;//-vSize.x * .5;\n    \n    if ( fHitT > 0.0 && (fHitT + fDepthBias) < traceResult.fDist )\n    {\n\t    float fHitU = Cross2d( vOA, vRayDir.xz ) * rcpdenom;\n        float fHitY = vRayDir.y * fHitT + vRayOrigin.y;\n        float fSpriteX = fHitU * vSize.x;\n        float fSpriteY = fHitY - vPos.y;\n        if( (fSpriteX >= 0.0) && (fSpriteX < vSize.x) )\n        {\n            if( (fSpriteY >= 0.0 ) && (fSpriteY < vSize.y) )\n            {             \t\t\t\t\n                vec2 vSpritePixel = floor( vec2( fSpriteX, fSpriteY ) );\n                vec2 vUV = (vSpritePixel + vSpriteInfo.xy + 0.5 ) / iChannelResolution[2].xy;                \n                if ( vUV.x > 1.0 ) vUV.x = 2.0 - vUV.x;\n                vec4 vSpriteSample = texture( iChannel2, vUV );\n                if ( vSpriteSample.a > 0.0 )\n                {\n\t\t\t\t\ttraceResult.fDist = fHitT;                    \n                    traceResult.vTexture.rgb = vSpriteSample.rgb;\n                    traceResult.iSector = iSectorId;\n                    traceResult.fLightLevel = 0.0;\n                }                \n            }\n        }\n    }   \n}\n\n#endif\n\nvoid DebugValueSprite( vec3 vRayOrigin, vec3 vRayDir, vec3 vPos, vec2 vSpriteDir, float fValue, vec3 vColor, bool bNoDepthTest, inout TraceResult traceResult )\n{    \n    vec2 vSize = vec2(4.0, 6.0);\n    \n\tvec2 vA = vPos.xz;\n\tvec2 vB = vPos.xz + vSpriteDir;\n    vec2 vD = vB - vA;\n    vec2 vOA = vA - vRayOrigin.xz;\n    float rcpdenom = 1.0 / Cross2d( vRayDir.xz, vD ); \n    float fHitT = Cross2d( vOA, vD ) * rcpdenom;    \n    \n    if ( fHitT > 0.0 && (fHitT < traceResult.fDist || bNoDepthTest ) )\n    {\n\t    float fHitU = Cross2d( vOA, vRayDir.xz ) * rcpdenom;\n        float fHitY = vRayDir.y * fHitT + vRayOrigin.y;\n        float fSpriteX = fHitU;\n        float fSpriteY = fHitY - vPos.y;\n\n        {                        \n            vec2 vSpritePixel = vec2( fSpriteX, fSpriteY ) / vSize;\n\n            float fText = PrintValue( vSpritePixel, fValue, 4.0, 2.0 );\n\n            if ( fText > 0.0 )\n            {\n                traceResult.fDist = fHitT;                    \n                traceResult.vTexture.rgb = vColor;\n                traceResult.iSector = 0;\n                traceResult.fLightLevel = 0.0;\n            }                \n        }\n    }   \n}\n\n\n\n///////////////////////////\n// Sprite Crop Sheet Info\n///////////////////////////\n\n#define SPR_RIGHT(V) vec2((V.x + V.z), V.y)\n#define SPR_ABOVE(V) vec2(V.x, (V.y + V.w))\n\nconst vec4 kSpriteNone\t\t\t\t= vec4( 0 );\n\nconst vec4 kSpriteBarrel\t\t\t= vec4(\tSPR_RIGHT(kSpriteNone),\t\t\t\t\t23,32);\nconst vec4 kSpriteBarrelExpl\t\t= vec4(\tSPR_RIGHT(kSpriteBarrel),\t\t\t\t32,32);\n\nconst vec4 kSpriteFireball\t\t\t= vec4(\tSPR_RIGHT(kSpriteBarrelExpl),\t\t\t20,20);\nconst vec4 kSpriteFireball2\t\t\t= vec4(\tSPR_RIGHT(kSpriteFireball),\t\t\t\t24,24);\n\nconst vec4 kSpriteHealthBonus\t\t= vec4(\tSPR_RIGHT(kSpriteFireball2),\t\t\t16,16);\nconst vec4 kSpriteArmorBonus\t\t= vec4(\tSPR_ABOVE(kSpriteHealthBonus),\t\t\t16,15);\nconst vec4 kSpriteMedikit\t\t\t= vec4(\tSPR_RIGHT(kSpriteHealthBonus),\t\t\t28,19);\nconst vec4 kSpriteStimpack\t\t\t= vec4(\tSPR_RIGHT(kSpriteMedikit),\t\t\t\t16,19);\nconst vec4 kSpriteBlueArmor\t\t\t= vec4(\tSPR_RIGHT(kSpriteStimpack),\t\t\t\t32,24);\nconst vec4 kSpriteGreenArmor\t\t= vec4(\tSPR_RIGHT(kSpriteBlueArmor),\t\t\t32,24);\nconst vec4 kSpriteShotgun\t\t\t= vec4(\tSPR_RIGHT(kSpriteGreenArmor),\t\t\t32,16);\n\nconst vec4 kSpriteWallImpact1\t\t= vec4(\tSPR_RIGHT(kSpriteShotgun),\t\t\t\t6,6);\nconst vec4 kSpriteWallSmokeImpact1\t= vec4(\tSPR_RIGHT(kSpriteWallImpact1),\t\t\t8,16);\nconst vec4 kSpriteFleshImpact1\t\t= vec4(\tSPR_RIGHT(kSpriteWallSmokeImpact1),\t\t8,8);\n\nconst vec4 kSpriteBloodyMess\t\t= vec4(\tSPR_RIGHT(kSpriteFleshImpact1) + vec2(0,16),\t\t42,16);\nconst vec4 kSpriteDeadTrooper \t\t= vec4(\tSPR_RIGHT(kSpriteBloodyMess),\t\t\t42,16);\nconst vec4 kSpriteDeadSergeant \t\t= vec4(\tSPR_RIGHT(kSpriteDeadTrooper),\t\t\t42,16);\nconst vec4 kSpriteDeadImp \t\t\t= vec4(\tSPR_RIGHT(kSpriteDeadSergeant),\t\t\t42,16);\n\nconst vec4 kSpriteBarrelExpl2\t\t= vec4(\t480,0,\t\t\t\t\t\t\t\t\t38,48);\n\nconst vec4 kSpriteFloorLamp\t\t\t= vec4(\t480,48,\t\t\t\t\t\t\t\t\t23,48);\nconst vec4 kSpriteTallTechnoPillar\t= vec4(\tSPR_ABOVE(kSpriteFloorLamp),\t\t\t38,128);\n\nconst vec4 kSpriteEnemyBegin = vec4(0, 32., 32, 52);\n\n\n#define SPRITE_ENEMY_ACTION_STAND \t\t0.\n#define SPRITE_ENEMY_ACTION_ATTACK\t\t1.\n#define SPRITE_ENEMY_ACTION_WALK1 \t\t2.\n#define SPRITE_ENEMY_ACTION_WALK2 \t\t3.\n#define SPRITE_ENEMY_ACTION_PAIN \t\t4.\n#define SPRITE_ENEMY_ACTION_DIE \t\t5.\n\n#define SPRITE_ENEMY_ACTION_COUNT \t\t6\n\n#define SPRITE_ENEMY_ACTION_DEAD\t\t10.\n\n#define SPRITE_ENEMY_TYPE_TROOPER \t0.\n#define SPRITE_ENEMY_TYPE_IMP \t\t1.\n#define SPRITE_ENEMY_TYPE_SERGEANT \t2.\n\n#define SPRITE_ENEMY_TYPE_COUNT     3\n\nvec4 GetEnemySprite( int iType, float fAction, float fDirection )\n{\n    vec2 vGridPos = vec2( float(iType) + fDirection * float(SPRITE_ENEMY_TYPE_COUNT), fAction );\n    vec2 vPos = kSpriteEnemyBegin.xy +kSpriteEnemyBegin.zw * vGridPos;\n\treturn vec4( vPos, kSpriteEnemyBegin.zw );\n}\n\n#ifdef TEXTURE_PREVIEW\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fTexture = TEXTURE_PREVIEW;\n    \n    vec2 vTexCoord = floor( fragCoord.xy ) / 2.5;\n    fragColor.rgb = SampleTexture( fTexture, vTexCoord );    \n    fragColor.a = 1.0;\n}\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vOrigUV = fragCoord.xy / iResolution.xy;\n    \n    vec2 vResolution = min( iResolution.xy, vec2( 320.0, 200.0 - 32.0 ) );\n    \n    vec2 vUV = fragCoord.xy / vResolution;\n    if ( any( lessThan( vUV, vec2(0) ) ) ||  any( greaterThanEqual( vUV, vec2(1.) )) )\n             discard;\n    \n\tvec3 vCameraPos = vec3(0.0);\n\tvec3 vCameraTarget = vec3(0.0);\n        \n    vec2 vMouse = (iMouse.xy / iResolution.xy);\n\t\n    \n    Entity playerEnt = Entity_Read( STATE_CHANNEL, 0 );\n    vCameraPos = playerEnt.vPos;\n    \n    float fDeathFall = 0.0;\n    \n    // Death\n    if( playerEnt.fHealth <= 0.0 )\n    {\n        fDeathFall = 1.0 - (playerEnt.fTimer / 1.5);\n    }\n    \n    vCameraPos.y += 6.0 + 34.0 * (1.0 - fDeathFall);\n\n    Sector playerSector = Map_ReadSector( MAP_CHANNEL, playerEnt.iSectorId );\n\n    \n    #ifdef HEAD_BOB\n\tfloat fBob = sin(vCameraPos.x* 0.04) * 4.0; // head bob\n    vCameraPos.y += fBob;\n    #endif\n        \n    // Door crush\n    vCameraPos.y = min( vCameraPos.y, playerSector.fCeilingHeight - 1.0 );\n    vCameraPos.y = max( vCameraPos.y, playerSector.fFloorHeight + 0.001 );\n    \n    vCameraTarget = vCameraPos;\n\n    // Mouselook\n    float fSinPitch = sin(playerEnt.fPitch);\n    float fCosPitch = cos(playerEnt.fPitch);\n    vCameraTarget.y += fSinPitch;\n    //playerEnt.fYaw += (vMouse.x - 0.5 )* 3.0;\n\n    vCameraTarget.x += sin( playerEnt.fYaw ) * fCosPitch;\n    vCameraTarget.z += cos( playerEnt.fYaw ) * fCosPitch;\n    \n    \n    vec2 vWindowCoord =\t(vUV * 2.0 - 1.0) * vec2(vResolution.x / vResolution.y, 1.0);\n\t\n    vec3 vRayOrigin = vCameraPos;\n    vec3 vRayDir = GetCameraRayDir( vWindowCoord, vCameraPos, vCameraTarget );\n    \n    float fNoFog = 0.0;\n\tMapInfo mapInfo = ReadMapInfo( MAP_CHANNEL );\n    \n\tTraceResult traceResult;\t\n    traceResult = Map_Trace( MAP_CHANNEL, mapInfo, vRayOrigin, vRayDir, playerEnt.iSectorId, FAR_CLIP );\n\n\tvec3 vForwards = normalize(vCameraTarget - vCameraPos); \n    \n    // sky    \n    #ifdef DRAW_SKY    \n    if ( traceResult.iTexture == 1u )\n    {\n        fNoFog = 1.0;\n        float fSkyU = (atan(vForwards.x, vForwards.z) * 768.0 / radians(180.0)) + vUV.x * vResolution.x;\n        float fSkyV = (vUV.y + fSinPitch) * 210.0 + 41.0;\n        fSkyV = min( fSkyV, 255.0 );\n        \n    \ttraceResult.vTexture.st = vec2(fSkyU, fSkyV);\n\t    traceResult.fLightLevel = 100.0f;\n    }\n    // add extra light for sky, will be clamped to 1.0 later\n\t#endif    \n\n    // Resovle level textures here\n\ttraceResult.vTexture.rgb = SampleTexture( traceResult.iTexture, traceResult.vTexture.st );    \n    \n\n    #ifdef ENABLE_SPRITES\n\tvec2 vSpriteDir = -normalize(vec2(-vForwards.z, vForwards.x));\n\t    \n    for( int iEnt=0; iEnt<int(ENTITY_MAX_COUNT); iEnt++)\n    {\n        float fFlipSprite = 1.0;\n        vec4 vSpriteInfo = kSpriteNone;\n\t\tEntity entity = Entity_Read( STATE_CHANNEL, iEnt );\n        if ( entity.iType == ENTITY_TYPE_BARREL )\n        {\n            if( entity.iSubType == ENTITY_SUB_TYPE_BARREL_EXPLODING && entity.fTimer < 0.05 )\n            {\n                vSpriteInfo = kSpriteBarrelExpl2;                                      \n\t\t\t\tentity.iSectorId = 0; // hack fullbright\n    \t\t}\n            else\n            if( entity.iSubType == ENTITY_SUB_TYPE_BARREL_EXPLODING && entity.fTimer < 0.2 )\n            {                   \n                vSpriteInfo = kSpriteBarrelExpl;\n\t\t\t\tentity.iSectorId = 0; // hack fullbright\n            }\n            else\n            {\n                vSpriteInfo = kSpriteBarrel;                \n            }\n        }            \n        else\n        if ( entity.iType == ENTITY_TYPE_ITEM )\n        {\n            if ( entity.iSubType == ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS )\n            {\n\t            vSpriteInfo = kSpriteHealthBonus;\n            }\n            else if ( entity.iSubType == ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS )\n            {\n\t            vSpriteInfo = kSpriteArmorBonus;\n            }\n            else if ( entity.iSubType == ENTITY_SUB_TYPE_ITEM_MEDIKIT )\n            {\n\t            vSpriteInfo = kSpriteMedikit;\n            }\n            else if ( entity.iSubType == ENTITY_SUB_TYPE_ITEM_STIMPACK )\n            {\n\t            vSpriteInfo = kSpriteStimpack;\n            }\n            else if ( entity.iSubType == ENTITY_SUB_TYPE_ITEM_GREENARMOR )\n            {\n\t            vSpriteInfo = kSpriteGreenArmor;\n            }\n            else if ( entity.iSubType == ENTITY_SUB_TYPE_ITEM_BLUEARMOR )\n            {\n\t            vSpriteInfo = kSpriteBlueArmor;\n            }\n            else if ( entity.iSubType == ENTITY_SUB_TYPE_ITEM_SHOTGUN )\n            {\n\t            vSpriteInfo = kSpriteShotgun;\n            }\n            \n            else\n            {\n\t            vSpriteInfo = kSpriteFireball;                \n            }            \n        }\n        else\n        if ( entity.iType == ENTITY_TYPE_DECORATION )\n        {\n    \t    if ( entity.iSubType == ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS )\n\t        {\n\t            vSpriteInfo = kSpriteBloodyMess;\n            }\n            else\n    \t    if ( entity.iSubType == ENTITY_SUB_TYPE_DECORATION_DEAD_TROOPER )\n\t        {\n\t            vSpriteInfo = kSpriteDeadTrooper;\n            }\n            else\n    \t    if ( entity.iSubType == ENTITY_SUB_TYPE_DECORATION_DEAD_SERGEANT )\n\t        {\n\t            vSpriteInfo = kSpriteDeadSergeant;\n            }\n            else\n    \t    if ( entity.iSubType == ENTITY_SUB_TYPE_DECORATION_DEAD_IMP )\n\t        {\n\t            vSpriteInfo = kSpriteDeadImp;\n            }      \n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP )\n            {\n                vSpriteInfo = kSpriteFloorLamp;\n                entity.iSectorId = 0; // hack fullbright\n            }\n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_DECORATION_TALL_TECHNO_PILLAR )\n            {\n                vSpriteInfo = kSpriteTallTechnoPillar;\n            }\n        }            \n        else\n        if ( entity.iType == ENTITY_TYPE_ENEMY )\n        {\n            float fAction = SPRITE_ENEMY_ACTION_STAND;\n            \n            if ( int(entity.fArmor) == ENEMY_STATE_FIRE )\n            {\n                fAction = SPRITE_ENEMY_ACTION_ATTACK;\n            }\n            else\n            if ( int(entity.fArmor) == ENEMY_STATE_PAIN )\n            {\n                fAction = SPRITE_ENEMY_ACTION_PAIN;\n\t\t\t}\n            else\n            if ( int(entity.fArmor) == ENEMY_STATE_DIE )\n            {\n                if ( iChannelResolution[2].y < 360.0 )\n                {\t                    \n            \t\tfAction = SPRITE_ENEMY_ACTION_PAIN;\n                }\n                else\n                {\n            \t\tfAction = SPRITE_ENEMY_ACTION_DIE;\n                }\n            }\n            else\n                if ( int(entity.fArmor) == ENEMY_STATE_WALK_RANDOM || int(entity.fArmor) == ENEMY_STATE_WALK_TO_TARGET )\n                {\n                    if( fract( entity.fTimer ) < 0.5 )\n                    {\n                        fAction = SPRITE_ENEMY_ACTION_WALK1;\n                    }\n                    else\n                    {\n                        fAction = SPRITE_ENEMY_ACTION_WALK2;\n                    }\n                }\n            else\n            {\n                fAction = SPRITE_ENEMY_ACTION_STAND;\n            }\n            \n            vec3 vCamToEnt = entity.vPos - playerEnt.vPos;\n            float fCameraYaw = atan( vCamToEnt.z, vCamToEnt.x );\n            float fRelativeYaw = fCameraYaw + entity.fYaw + radians(90.0 + 22.5);\n            float fDirection = (fRelativeYaw / radians(45.0)) + 16.0;\n            fDirection = mod( floor(fDirection), 8.0 );\n            if ( fDirection > 4.0 ) \n            {\n                fDirection = 8.0 - fDirection;\n                fFlipSprite = -1.0;\n            }\n            \n            vSpriteInfo = GetEnemySprite( entity.iSubType, fAction, fDirection );\n        }\n        else if ( entity.iType == ENTITY_TYPE_BULLET )\n        {\n            if ( entity.iSubType == ENTITY_SUB_TYPE_BULLET_WALL )\n            {\n                if ( entity.fTimer > (0.3 - 0.1) )\n                {                    \n            \t\tvSpriteInfo = kSpriteWallImpact1;\n                    // entity.fSectorId = 0.; hack fullbright\n                    \n                }\n                else\n                {\n            \t\tvSpriteInfo = kSpriteWallSmokeImpact1;\n                }\n            }\n            else\n            if ( entity.iSubType == ENTITY_SUB_TYPE_BULLET_FLESH )\n            {\n            \tvSpriteInfo = kSpriteFleshImpact1;\n            }                \n        }    \n        else if ( entity.iType == ENTITY_TYPE_FIREBALL )\n        {\n            entity.vPos.y -= 16.0; // Centre fireball\n            if ( entity.iSubType == ENTITY_SUB_TYPE_FIREBALL ) \n            {                \n\t\t\t\tvSpriteInfo = kSpriteFireball;\n                entity.iSectorId = 0; // hack fullbright\n            }\n            else\n            {\n                vSpriteInfo = kSpriteFireball2;\n                entity.iSectorId = 0; // hack fullbright\n            }\n        }\n        \n        Sprite( vRayOrigin, vRayDir, entity.vPos, fFlipSprite * vSpriteDir, entity.iSectorId, vSpriteInfo, traceResult );\n        \n        // Debug\n\t\t#ifdef DEBUG_ENTITY_INFO\n\t\t{\n            bool bNoDepthTest = false;\n            if( entity.iType == ENTITY_TYPE_ENEMY )\n            {\n            \tDebugValueSprite( vRayOrigin, vRayDir, entity.vPos + vec3(0,48,0), vSpriteDir, entity.fArmor, vec3(1), bNoDepthTest, traceResult );\n            }\n\n            if( entity.iType != ENTITY_TYPE_NONE )\n            {\n\t            // Show health\n            \tDebugValueSprite( vRayOrigin, vRayDir, entity.vPos + vec3(0,32,0), vSpriteDir, entity.fHealth, vec3(1,0,0), bNoDepthTest, traceResult );\n\t            // Show timer\n            \tDebugValueSprite( vRayOrigin, vRayDir, entity.vPos + vec3(0,24,0), vSpriteDir, entity.fTimer, vec3(0,0,1), bNoDepthTest, traceResult );\n\n                // Show sector id\n                //DebugValueSprite( vRayOrigin, vRayDir, entity.vPos + vec3(0,16,0), vSpriteDir, entity.fSectorId, vec3(1), bNoDepthTest, traceResult );\n                DebugValueSprite( vRayOrigin, vRayDir, entity.vPos + vec3(0,16,0), vSpriteDir, float(entity.iSubType), vec3(1), bNoDepthTest, traceResult );\n            }\n        }\n        #endif\n    }        \n    #endif\t\n    \n    // Calculate light levels\n    Sector sector = Map_ReadSector( MAP_CHANNEL, traceResult.iSector );    \n\ttraceResult.fLightLevel = clamp( sector.fLightLevel + traceResult.fLightLevel + kExtraLight, 0.0, 1.0);\n\n    float fFlash = 0.0;\n    {\n        if(  playerEnt.fHealth > 0.0 )\n        {    \n            float fIntensity;\n            float fReloadTime;\n            float fTimeScale;\n            if ( playerEnt.fUseWeapon == 2.0 )\n            {\n                fReloadTime = 1.0;\n                fTimeScale = 15.0;\n                fIntensity = 0.2;\n                fFlash = 1.0 -  playerEnt.fTimer;\n            }\n            else\n            {\n                fReloadTime = 0.5;\n                fIntensity = 0.1;\n                fTimeScale = 20.0;\n            }\t  \n            fFlash = (fReloadTime -  playerEnt.fTimer) * fTimeScale;\n            fFlash = (1.0 - clamp(fFlash, 0.0, 1.0)) * fIntensity;\n        }        \n    }\n    \n    float fLightLevel = clamp( traceResult.fLightLevel, 0.0, 1.0 );\n    fLightLevel = pow( fLightLevel, 1.5);\n    float fDepth = dot(vRayDir, vForwards) * traceResult.fDist;\n    float fDepthFade = fDepth * kDepthFadeScale;\n    float fApplyFog = 1.0 - fNoFog;\n    fDepthFade -= fFlash;\n    fLightLevel = clamp( fLightLevel - fDepthFade * fApplyFog, 0.0, 1.0 );   \n    //fLightLevel = fLightLevel * fLightLevel;\n    \n    vec3 vResult = traceResult.vTexture.rgb * fLightLevel;\n    \n    vResult = clamp(vResult * 1.2, 0.0, 1.0);\n\n    \n\t/*\n\t\t// Debug entity trace\n        \n        float fEntId = -1.0;\n\t\tfloat fEntTraceDist = Entity_Trace( vRayOrigin, vRayDir, 0.0, fEntId );\n        \n        if ( fEntTraceDist < FAR_CLIP )\n        {\n            if ( fEntTraceDist < traceResult.fDist )\n            {\n\t            vResult = vec3( 1, 0, 0 );\n            }\n            else\n            {\n\t            vResult = vec3( 0, 0, 0.5 );                \n\t\t\t}\n        }\n    }*/\n    \n    #ifdef DISCARD_BACKGROUND    \n    if(traceResult.iSector == SECTOR_NONE)\n    {\n        vResult.rgb = vec3(1,0,1);\n        //discard;\n    }\n\t#endif    \n    \n    #ifdef QUANTIZE_FINAL_IMAGE\n    vResult = Quantize(vResult, 32.0);\n    #endif\n    \n\tfragColor = vec4(vResult, 1.0);\n\n\t#ifdef DEBUG_VALUES\n    vec2 vFontUV = fragCoord / vec2( 8, 16 );\n    vFontUV.y -= 7.0;\n    float fFontX = vFontUV.x;\n    fragColor.rgb = mix( fragColor.rgb, vec3(0,0,1), PrintValue(vFontUV, playerEnt.vPos.x, 4., 0.) ); \n    vFontUV.x -= 8.;\n    fragColor.rgb = mix( fragColor.rgb, vec3(0,0,1), PrintValue(vFontUV, playerEnt.vPos.y, 4., 0.) ); \n    vFontUV.x -= 8.;\n    fragColor.rgb = mix( fragColor.rgb, vec3(0,0,1), PrintValue(vFontUV, playerEnt.vPos.z, 4., 0.) ); \n\tvFontUV.x = fFontX;\n    \n    vFontUV.y -= 1.2;\n    fragColor.rgb = mix( fragColor.rgb, vec3(1,0,1), PrintValue(vFontUV, float(playerEnt.iSectorId), 4., 0.) );\n    #endif\n}\n#endif\n\n// Textures\n#define TEX_X 0u\n#define TEX_F_SKY1 1u\n#define TEX_NUKAGE3 2u\n#define TEX_FLOOR7_1 3u\n#define TEX_FLOOR4_8 4u\n#define TEX_CEIL5_1 5u\n#define TEX_FLAT5_5 6u\n#define TEX_FLAT20 7u\n#define TEX_FLOOR5_1 8u\n#define TEX_CEIL5_2 9u\n#define TEX_CEIL3_5 10u\n#define TEX_TLITE6_5 11u\n#define TEX_FLAT14 12u\n#define TEX_FLAT18 13u\n#define TEX_TLITE6_4 14u\n#define TEX_FLOOR7_2 15u\n#define TEX_STEP2 16u\n#define TEX_TLITE6_1 17u\n#define TEX_FLOOR1_1 18u\n#define TEX_FLOOR5_2 19u\n#define TEX_FLOOR6_2 20u\n#define TEX_FLAT23 21u\n#define TEX_TLITE6_6 22u\n#define TEX_DOOR3 23u\n#define TEX_LITE3 24u\n#define TEX_STARTAN3 25u\n#define TEX_BROWN1 26u\n#define TEX_DOORSTOP 27u\n#define TEX_COMPUTE2 28u\n#define TEX_STEP6 29u\n#define TEX_BROWN144 30u\n#define TEX_SUPPORT2 31u\n#define TEX_STARG3 32u\n#define TEX_DOORTRAK 33u\n#define TEX_SLADWALL 34u\n#define TEX_TEKWALL4 35u\n#define TEX_SW1COMP 36u\n#define TEX_BIGDOOR2 37u\n#define TEX_STARGR1 38u\n#define TEX_BROWNGRN 39u\n#define TEX_NUKE24 40u\n#define TEX_BROWN96 41u\n#define TEX_BRNBIGR 42u\n#define TEX_BRNBIGL 43u\n#define TEX_BRNBIGC 44u\n#define TEX_STARTAN1 45u\n#define TEX_EXITDOOR 46u\n#define TEX_SW1STRTN 47u\n#define TEX_BIGDOOR4 48u\n#define TEX_EXITSIGN 49u\n#define TEX_TEKWALL1 50u\n#define TEX_COMPTALL 51u\n#define TEX_COMPSPAN 52u\n#define TEX_PLANET1 53u\n#define TEX_COMPTILE 54u\n#define TEX_STEP1 55u\n#define TEX_COMPUTE3 56u\n\n\n/*\nfloat hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nvec3 SampleTexture( const in float fTexture, const in vec2 _vUV )\n{\n    vec2 vTexureSize = vec2(64);    \n    float fXCount = 10.0; // TODO : base on resolution?\n    \n    vec2 vTexturePos = vec2( mod( floor(fTexture), fXCount ), floor( fTexture / fXCount ) ) * vTexureSize;\n    \n    vec2 vPixel = vTexturePos + fract(_vUV / vTexureSize) * vTexureSize;\n    \n    vec2 vSampleUV = vPixel / iChannelResolution[1].xy;\n    \n    vec4 vSample = texture( iChannel1, vSampleUV );\n    \n    return vSample.xyz;\n}\n*/\n\n//////////////////////////////////////////////////////////////\n// Texture Helpers\n//////////////////////////////////////////////////////////////\n\nfloat hash2D(vec2 p)\n{\n\treturn Hash( dot( p, vec2(1.0, 41.0) ) );\t\n}\n\nfloat noise1D( float p )\n{\n\tfloat fl = floor(p);\n\t\n\tfloat h0 = Hash( fl );\n\tfloat h1 = Hash( fl + 1.0 );\n\t\n\tfloat fr = p - fl;\n\tfloat fr2 = fr * fr;\n\tfloat fr3 = fr2 * fr;\n\t\n\tfloat t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tfloat t0 = 1.0 - t1;\n\t\n\treturn h0 * t0\n\t\t + h1 * t1;\n}\n\nfloat noise2D( vec2 p, float r )\n{\n\tvec2 fl = floor(p);\n\n\tfloat h00 = hash2D( mod(fl + vec2(0.0, 0.0), r) );\n\tfloat h10 = hash2D( mod(fl + vec2(1.0, 0.0), r) );\n\tfloat h01 = hash2D( mod(fl + vec2(0.0, 1.0), r) );\n\tfloat h11 = hash2D( mod(fl + vec2(1.0, 1.0), r) );\n\t\n\tvec2 fr = p - fl;\n\t\n\tvec2 fr2 = fr * fr;\n\tvec2 fr3 = fr2 * fr;\n\t\n\tvec2 t1 = 3.0 * fr2 - 2.0 * fr3;\t\n\tvec2 t0 = 1.0 - t1;\n\t\n\treturn h00 * t0.x * t0.y\n\t\t + h10 * t1.x * t0.y\n\t\t + h01 * t0.x * t1.y\n\t\t + h11 * t1.x * t1.y;\n}\n\nfloat fbm( vec2 p, float per )\n{\n\tfloat val = 0.0;\n\tfloat tot = 0.0;\n\tfloat mag = 0.5;\n\n\tp += 0.5;\n\tp = p * (1.0 / 8.0);\n\tval += noise2D(p, 4.0) * mag; tot+=mag; p=p*2.0 + 1.234; mag*=per;\t\n\tval += noise2D(p, 8.0) * mag; tot+=mag; p=p*2.0 + 2.456; mag*=per;\n\tval += noise2D(p, 16.0) * mag; tot+=mag; p=p*2.0 + 3.678; mag*=per;\n\tval += noise2D(p, 32.0) * mag; tot+=mag;\n\n\treturn val * (1.0 / tot);\n}\n\nfloat Indent(vec2 vTexCoord, vec2 vHigh, vec2 vLow, float fHighIntensity, float fLowIntensity)\n{\n\tvec2 vMin = min(vLow, vHigh);\n\tvec2 vMax = max(vLow, vHigh);\n\tif((vTexCoord.x < vMin.x) || (vTexCoord.x > vMax.x) || (vTexCoord.y < vMin.y) || (vTexCoord.y > vMax.y))\n\t\treturn 1.0;\n\n\tif((vTexCoord.x == vHigh.x) || (vTexCoord.y == vHigh.y))\n\t{\n\t\treturn fHighIntensity;\n\t}\n\t\n\tif((vTexCoord.x == vLow.x) || (vTexCoord.y == vLow.y))\n\t{\n\t\treturn fLowIntensity;\n\t}\n\t\n\treturn 1.0;\n}\n\nvec4 SmoothBump(const in vec2 vTexCoord, const in vec2 vMin, const in vec2 vMax, const in vec2 vLightDir, const in float fSize)\n{\n\tvec2 vNearest = min( max(vTexCoord, vMin), vMax );\n\tvec2 vDelta = vNearest - vTexCoord;\n    float fDeltaLen = length(vDelta);\n\tfloat fDist = (fDeltaLen - fSize) / fSize;\n\tvec2 vDir = vDelta;\n    if(fDeltaLen > 0.0) vDir = vDir / fDeltaLen;\n\tfloat fShade = dot(vDir, vLightDir);\n\t//return clamp(1.0 - (fDist / fSize), 0.0, 1.0) * fShade;\n\tfShade *= clamp(1.0 - abs((fDist)), 0.0, 1.0);\n\treturn vec4( fShade, fDist, (vTexCoord - vMin + fSize) / (vMax - vMin + fSize * 2.0) );\n}\n\n\nfloat wrap( const in float x , const in float r )\n{\n\treturn fract( x * (1.0 / r) ) * r;\n}\n\nvec4 Hexagon( vec2 vUV )\n{\n\tvec2 vIndex;\n\t\n\tfloat fRow = floor(vUV.y);\n\t\n\tvec2 vLocalUV = vUV;\n\tfloat fRowEven = wrap(fRow, 2.0);\n\tif(fRowEven < 0.5)\n\t{\n\t\tvLocalUV.x += 0.5;\n\t}\n\t\n\tvIndex = floor(vLocalUV);\n\t\n\tvec2 vTileUV = fract(vLocalUV);\n\t{\n\t\tfloat m = 2.0 / 3.0;\n\t\tfloat c = 2.0 / 3.0;\n\t\tif((vTileUV.x *m + c) < vTileUV.y)\n\t\t{\n\t\t\tif(fRowEven < 0.5)\n\t\t\t{\n\t\t\t\tvIndex.x -= 1.0;\n\t\t\t}\n\t\t\tfRowEven = 1.0 - fRowEven;\t\t\t\t\n\t\t\tvIndex.y += 1.0;\n\t\t}\n\t}\n\t\n\t{\n\t\tfloat m = -2.0 / 3.0;\n\t\tfloat c = 4.0 / 3.0;\n\t\tif((vTileUV.x *m + c) < vTileUV.y)\n\t\t{\n\t\t\tif(fRowEven >= 0.5)\n\t\t\t{\n\t\t\t\tvIndex.x += 1.0;\n\t\t\t}\n\t\t\tfRowEven = 1.0 - fRowEven;\t\t\t\t\n\t\t\tvIndex.y += 1.0;\n\t\t}\n\t}\n\t\n\tvec2 vCenter = vIndex - vec2(0.0, -1.0 / 3.0);\n\tif(fRowEven > 0.5)\n\t{\n\t\tvCenter.x += 0.5;\n\t}\n\t\n\tvec2 vDelta = vUV - vCenter;\n\t\n\t//vDelta = abs(vDelta);\n\t\n\tfloat d1 = vDelta.x;\n\tfloat d2 = dot(vDelta, normalize(vec2(2.0/3.0, 1.0)));\n\tfloat d3 = dot(vDelta, normalize(vec2(-2.0/3.0, 1.0)));\n\t\n\td2 *= 0.9;\n\td3 *= 0.9;\n\t\n\tfloat fDist = max( abs(d1), abs(d2) );\n\tfDist = max( fDist, abs(d3) );\n\t\n\tfloat fTest = max(max(-d1, -d2), d3);\n\t\n\treturn vec4(vIndex, abs(fDist), fTest);\n}\n\n//////////////////////////////////////////////////////////////\n\n\n//////////////////////////\n// Textures\n//////////////////////////\n\nvec3 TexNukage3( vec2 vTexCoord, float fRandom)\n{\n\tfloat fBlend = 0.0;\n\tfBlend = smoothstep(0.8, 0.0, fRandom);\n\tfBlend = min(fBlend, smoothstep(1.0, 0.8, fRandom));\n\tfBlend *= 1.5;\n\tvec3 col = mix( vec3(11.0, 23.0, 7.0), vec3(46.0, 83, 39.0), fBlend) / 255.0;\n\t\n\treturn col;\n}\n\nvoid AddMountain( inout float fShade, const in vec2 vUV, const in float fRandom, const in float fHRandom, const in float fXPos, const in float fWidth, const in float fHeight, const in float fFog)\n{\n\tfloat fYPos = 1.0 - smoothstep( 0.0, 1.0, abs(fract(fXPos - vUV.x + vUV.y * 0.05 + 0.5) - 0.5) * fWidth );\n\tfYPos += fHRandom * 0.05 + fRandom * 0.05;\n\tfYPos *= fHeight;\n\tfloat fDist = fYPos - vUV.y;\n\tif(fDist > 0.0)\n\t{\n\t\tfShade = fRandom * ((1.0 - clamp(sqrt(fDist) * 2.0, 0.0, 1.0)) * 0.3 + 0.1);\n\t\tfShade = mix(fShade, 0.6 + 0.1 * fRandom, fFog);\n\t}\t\n}\n\nvec3 TexFSky1(vec2 vTexCoord, float fRandom, float fHRandom)\n{\n\tfloat fShade = 0.6 + 0.1 * fRandom;\n\t\n\tvec2 vUV = vTexCoord * (1.0 / vec2(256.0, 128.0));\n\tvUV.y = 1.0 - vUV.y;\n\t\n\tAddMountain( fShade, vUV, fRandom, fHRandom, 0.25, 1.0, 0.85, 0.5 );\n\tAddMountain( fShade, vUV, fRandom, fHRandom, 1.5, 4.0, 0.78, 0.2 );\n\tAddMountain( fShade, vUV, fRandom, fHRandom, 1.94, 2.51, 0.8, 0.0 );\n\n\t\n\treturn vec3(fShade);\n}\n\nvec3 TexFloor7_1( vec2 vTexCoord, float fRandom, vec3 vCol1, vec3 vCol2 )\n{\n\tvec3 col = mix( vCol1, vCol2, fRandom * fRandom * 2.5) / 255.0;\n\t\n\treturn col;\n}\n\nvec3 TexFlat5_5( vec2 vTexCoord, float fRandom )\n{\n\tvec3 col = mix( vec3(63.0, 47.0, 23.0), vec3(147.0, 123.0, 99.0), fRandom) / 255.0;\n\t\n\tcol *= mod(vTexCoord.x, 2.0) * 0.15 + 0.85;\n\t\n\treturn col;\n}\n\nvec3 TexFloor4_8( vec2 vTexCoord, float fRandom, vec3 vColA, vec3 vColB )\n{\n\tvec3 col = mix( vColA, vColB, fRandom * fRandom) / 255.0;\n\n\tvec4 vHex = Hexagon( vTexCoord.yx / 32.0 );\n    \n    float fShadow = (clamp((0.5 - vHex.z) * 15.0, 0.0, 1.0) * 0.5 + 0.5);\n    float fHighlight = 1.0 + clamp(1.0 - (abs(0.45 - vHex.w)) * 32.0, 0.0, 1.0) * 0.5;\n    \n\tcol = col * (clamp((0.5 - vHex.z) * 2.0, 0.0, 1.0) * 0.25 + 0.75);\n    col = col * fHighlight;\n\tcol = col * fShadow;\n\t\n\treturn col;\n}\n\nvec3 TexCeil3_5( vec2 vTexCoord, float fRandom )\n{\n\tvec3 col = vec3(1.0);\n\t\n\tvec2 vTileCoord = vTexCoord;\n\tvTileCoord.x -= 17.0;\n\tif( (vTileCoord.x >= 0.0) && (vTileCoord.x < 32.0) ) \n\t\tvTileCoord.y -= 58.0;\n\telse \n\t\tvTileCoord.y -= 11.0;\n\tvTileCoord.x = mod(vTileCoord.x, 32.0);\n\tvTileCoord.y = mod(vTileCoord.y, 64.0);\n\t\t\n\tvec2 vBoxClosest = clamp(vTileCoord, vec2(4.0, 4.0), vec2(28.0, 60.0));\n\tvec2 vDelta = vTileCoord - vBoxClosest;\n\tfloat fDist2 = dot(vDelta, vDelta);\n\n\tconst float fLight1 = 59.0 / 255.0;\n\tconst float fMed1 = 55.0 / 255.0;\n\tconst float fDark1 = 47.0 / 255.0;\n\tconst float fDark2 = 39.0 / 255.0;\n\n\tfloat fShade = fMed1;\t\n\tfShade = mix( fShade, fLight1, smoothstep(0.6, 0.45, fRandom) );\n\tfShade = mix( fShade, fDark1, smoothstep(0.45, 0.35, fRandom) );\n\t\n\tfShade = mix( fShade, fDark1, step(1.5, fDist2) );\n\tfShade = mix( fShade, fDark2, step(13.5, fDist2) );\n\t\t\n\tcol *= fShade;\n\t\n\tif((vTileCoord.x < 12.0) || (vTileCoord.x > 20.0) || (vTileCoord.y < 12.0) || (vTileCoord.y > 52.0))\n\t{\n\t\tfloat fRRow = floor(mod(vTileCoord.y - 3.5, 7.5));\n\t\tfloat fRColumn = mod(vTileCoord.x - 15.0, 10.0);\n\t\tif((fRRow == 2.0) && (fRColumn == 0.0))\n\t\t{\n\t\t\tcol -= 0.05;\n\t\t}\n\t\tif((fRRow <= 2.0) && (fRColumn <= 2.0))\n\t\t{\n\t\t\tvec2 vOffset = vec2(fRRow - 1.0, fRColumn - 1.0);\n\t\t\tfloat fDist2 = dot(vOffset, vOffset) / 2.0;\n\t\t\tcol += clamp(1.0 - fDist2, 0.0, 1.0) * 0.05;\n\t\t}\n\t}\n\t\n\treturn col;\n}\n\nvec3 TexRandom( vec2 vTexCoord, float fRandom, vec3 vCol0, vec3 vCol1 )\n{\n\treturn mix( vCol0, vCol1, fRandom * fRandom);\n}\n\nfloat SdBox( vec2 vPos, vec2 vSize )\n{\n  vec2 d = abs(vPos) - vSize;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat SdBox( vec2 vPos, vec2 vMin, vec2 vMax )\n{\n    vec2 vMid = (vMin + vMax) * .5;\n    return SdBox( vPos - vMid, (vMax - vMin) * .5 );\n}\n\nfloat BigDoorYellowStripes( vec2 vTexCoord )\n{\n    float fDist = 0.0;\n\n    float fIndentSize = 5.0;\n\n    vTexCoord.x = 64. - abs(vTexCoord.x - 64.);\n    \n    vTexCoord.x = 32. - abs(vTexCoord.x - 32.);\n    \n    float d;\n    d =  min( fIndentSize, -SdBox( vTexCoord, vec2(13,116), vec2(48, 124) ) );\n    fDist = max( fDist, d );\n    \n    float fCorner = clamp( vTexCoord.x - vTexCoord.y + 105., 0.0, 5.0 );\n    fDist = min( fDist, fCorner );\n    \n    return fDist;\n}\n\nfloat BigDoorIndent( vec2 vTexCoord )\n{\n    float fDist = 0.0;\n\n    float d;\n\n    float fIndentSize = 4.0;    \n    \n    d = min( fIndentSize, -SdBox( vTexCoord, vec2(82,19), vec2(93,75) ) );\n    fDist = max( fDist, d );\n        \n    d = min( fIndentSize, -SdBox( vTexCoord, vec2(54,20), vec2(68,74) ) );\n    fDist = max( fDist, d );\n    \n    d = min( fIndentSize, -SdBox( vTexCoord, vec2(15, 19), vec2(68, 49) ) );\n    float fCorner = clamp( vTexCoord.x + vTexCoord.y - 50.0, 0.0, 5.0 );\n    d = min( d, fCorner );    \n    fDist = max( fDist, d );\n    \n    d = min( fIndentSize, -SdBox( vTexCoord, vec2(100, 21), vec2(112, 74) ) );    \n    fDist = max( fDist, d );\n\n    d = min( fIndentSize, -SdBox( vTexCoord, vec2(50,123), vec2(79,126) ) );\n    fDist = max( fDist, d );\n    \n    fIndentSize = 2.0;\n    \n    d = min( fIndentSize, -SdBox( vTexCoord, vec2(41,59), vec2(50,110) ) );\n    fDist = max( fDist, d );\n    \n    fIndentSize = 0.5;\n\n    d = min( fIndentSize, SdBox( vTexCoord, vec2(1, 114), vec2(126, 126) ) );\n    fDist = max( fDist, d );\n    \n    // Rivets\n    {\n        vec2 vCoord = vTexCoord;\n\n        float m = 10.0;\n        float yMax = 128.0;\n        fIndentSize = 0.5;\n        \n        vCoord.x = 64. - abs(vCoord.x - 64.);\n        \n        if ( vCoord.x > 10.0 )\n        {\n            vCoord.x -= 8.0;\n            m = 6.0;\n            \n            yMax = 80.;\n            fIndentSize = 0.25;\n        }\n\n        if ( vCoord.y < yMax )\n        {\n            vCoord.y = mod(vCoord.y, m);\n\n            d = min( 0.0, -fIndentSize + SdBox( vCoord, vec2(2, 3), vec2(4, 5) ) );\n            fDist += d;\n        }\n    }\n    \n    d = min( 1.0, BigDoorYellowStripes( vTexCoord ) );\n    fDist += d;\n \n    return fDist / 5.0;\n}\n\nvec3 TexBigDoor2( vec2 vTexCoord, float fRandom, float fHRandom, vec3 vCol0 )\n{\n    float fShade = 1.0;\n    \n    fShade = 1.0 + (BigDoorIndent( vTexCoord ) - BigDoorIndent( vTexCoord  + vec2(.5, 1.))) * 2.0;\n    \n    vec3 vCol = vCol0 * (0.8 + fHRandom * 0.2);\n    \n\tfloat fMirrorX = 64. - abs(vTexCoord.x - 64.);\n    if ( fMirrorX < 6.0 )\n    {\n        vCol *= 0.75;\n    }\n\n    \n    float f = BigDoorYellowStripes( vTexCoord );\n    if ( f > 0.0 )\n    {\n        if ( mod(vTexCoord.x + vTexCoord.y, 16.0) > 8.0)\n        {\n    \t\tvCol = vec3(175,123,31) /255.;\n\t\t}\n        else\n        {\n    \t\tvCol = vec3(47)/255.;\n        }\n    }\n    \n    vCol *= (fHRandom + vTexCoord.y / 128.0) * 0.2 + 0.8;\n    vCol *= fRandom * 0.3 + 0.7;\n    \n    float fStreak = 1.0 - clamp( fract(fHRandom * 8.0 + vTexCoord.y / 128.0) * 3.0, 0.0, 1.0);\n    fStreak = fStreak * (fHRandom * fHRandom * 0.7 + 0.3);\n    vCol = mix(vCol, vec3(95,67,35)/255., fStreak );\n    \n\treturn vCol * fShade; \n}\n\nvec3 TexDoor3(vec2 vTexCoord, float fRandom, float fHRandom)\n{\n\tfloat fVNoise = fHRandom + fRandom;\n\tfloat fStreak = clamp(abs(fract(fVNoise) - 0.5) * 3.0, 0.0, 1.0);\n\tfStreak = fStreak * fStreak;\n\t\n\tfloat fShade = 1.0;\n\t\n\tfShade = 1.0 - abs((vTexCoord.y / 72.0) - 0.5) * 2.0;\n\tfShade = fShade * fShade;\n\tfShade = fShade * 0.2 + 0.3;\n\t\n\tfShade = fShade * (fHRandom * 0.2 + 0.8);\n\t\n\tfShade *= Indent( vTexCoord, vec2(8.0, 8.0), vec2(64.0 - 8.0, 72.0 - 16.0), 0.8, 1.2);\n\tfShade *= Indent( vTexCoord, vec2(8.0, 72.0 - 15.0), vec2(64.0 - 8.0, 72.0 - 8.0), 0.8, 1.2);\n\t\n\tfShade *= Indent( vTexCoord, vec2(64.0 - 11.0, 46.0), vec2(46.0, 32.0), 0.8, 1.2);\n\tfShade *= Indent( vTexCoord, vec2(64.0 - 11.0, 56.0), vec2(46.0, 52.0), 0.8, 1.2);\n\t\n\tfShade += fRandom * 0.1;\n\n\tfloat fStreakTopAmount = smoothstep( 32.0, 0.0, vTexCoord.y );\n\tfloat fStreakBottomAmount = smoothstep( 72.0 -32.0, 72.0, vTexCoord.y );\n\t\n\tfShade *= 1.0 - fStreak * max(fStreakTopAmount, fStreakBottomAmount) * 0.2;\n\t\n\tif( (vTexCoord.x > 8.0) && (vTexCoord.x < 52.0) )\n\t{\n\t\tvec2 vRepeatCoord = mod( vTexCoord, vec2( 8.0, 48.0 ) );\n\t\tvRepeatCoord += vec2(4.0, -12.0);\n\t\tif( vRepeatCoord.x == 4.0 )\n\t\t{\n\t\t\tif(vRepeatCoord.y == 0.0)\n\t\t\t{\n\t\t\t\tfShade += 0.1;\n\t\t\t}\n\t\t\tif(vRepeatCoord.y > 0.0)\n\t\t\t{\n\t\t\t\tfShade *= clamp(vRepeatCoord.y / 16.0, 0.0, 1.0) * 0.3 + 0.7;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn vec3(fShade);\n}\n\nvec3 TexLite3( vec2 vTexCoord )\n{\n\tvec2 vLocalCoord = vTexCoord;\n\tvLocalCoord.y = mod(vLocalCoord.y, 8.0 );\n\t\n\tvec2 vClosest = min( max( vLocalCoord, vec2(4.0, 3.5) ), vec2(32.0 - 5.0, 3.5) );\n\tvec2 vDelta = vLocalCoord - vClosest;\n\tfloat fDist = max(abs(vDelta.x), abs(vDelta.y)) / 3.9;\n\t\n\treturn vec3(1.0 - fDist * 0.65);\n}\n\nvec3 TexTLite6_4( vec2 vTexCoord, float fRandom, vec3 vFlatCol, vec3 vLightCol )\n{\n\tvec2 vLocalCoord = vTexCoord;\n\tvLocalCoord = mod(vLocalCoord, 64.0 );\n\t\n    vec2 vAbsLocal = abs( vLocalCoord - 32. );\n    \n    float fDist = (vAbsLocal.x + vAbsLocal.y) / 16.0;\n    fDist = fDist * fDist;\n    \n    if ( fDist > 1.0 )\n    {\n        return vFlatCol * (0.5 + fRandom * 0.5);\n    }\n    \n    float fLight = clamp(1.0 - fDist * fDist, 0.0, 1.0);\n\treturn min( vec3(1.0), vLightCol * (fLight * 0.75 + 0.25) + pow( fLight, 5.0 ) * 0.4);    \n}\n\nvec3 TexTLite6_5( vec2 vTexCoord, float fRandom, vec3 vFlatCol, vec3 vLightCol )\n{\n\tvec2 vLocalCoord = vTexCoord;\n\tvLocalCoord = mod(vLocalCoord, 32.0 );\n\t\n    float fDist = length( vLocalCoord - 16. ) / 8.0;\n    \n    if ( fDist > 1.0 )\n    {\n        return vFlatCol * (0.5 + fRandom * 0.5);\n    }\n    \n    float fLight = clamp(1.0 - fDist * fDist, 0.0, 1.0);\n\treturn min( vec3(1.0), vLightCol * (fLight * 0.75 + 0.25) + pow( fLight, 5.0 ) * 0.4);    \n}\n   \n\nvec3 TexStartan3( vec2 vTexCoord, float fRandom, vec3 col0, vec3 col1 )\n{\n\tvec3 col = col0;\n\t\n\tfloat fVNoise = noise1D(vTexCoord.x * 0.5) - ((vTexCoord.y) / 128.0) + fRandom;\n\tfloat fStreak = clamp(abs(fract(fVNoise) - 0.5) * 3.0, 0.0, 1.0);\n\tfStreak = fStreak * fStreak;\n\t\t\n\tfloat fBlend2 = smoothstep( 0.0, 32.0, abs(vTexCoord.x - 64.0) );\n\tfBlend2 *= fBlend2;\n\tfBlend2 *= fStreak * 0.5 + 0.5;\n\tcol = mix( col, col1, fBlend2 * 0.5);\n\t\n\tfloat fBlend = smoothstep( 24.0, 56.0, abs(vTexCoord.x - 64.0) );\n\tfBlend *= fBlend;\n\tfBlend *= fStreak * 0.7 + 0.3;\n\tcol = mix( col, col1 * 1.1, fBlend);\n\t\n\tcol *= fRandom * fRandom * 0.3 + 0.7;\n\n\tvec2 vCoord = vTexCoord;\n\tvCoord.x = mod(vCoord.x, 32.0);\n\t\n\tfloat fStreakHL = fStreak * 0.075 + 0.075;\n\t\n\tfloat fDistMin = 1.0;\n\tfloat fShade = 0.0;\n\t\n\tvec4 vBump = SmoothBump( vCoord, vec2(6.0, 8.0), vec2(32.0 - 5.0, 9.0), normalize(vec2(0.0, 1.0)), 3.0 );\n\tfShade += vBump.x * 0.1;\n\tfDistMin = min(fDistMin, vBump.y);\n\tfShade += ((vBump.w >= 0.0) && (vBump.w <= 1.0)) ? (1.0 - vBump.w) * fStreakHL : 0.0;\n\tvBump = SmoothBump( vCoord, vec2(6.0, 20.0), vec2(32.0 - 6.0, 40.0), normalize(vec2(0.0, 1.0)), 3.0 ); \n\tfShade += vBump.x * 0.1;\n\tfShade += ((vBump.w >= 0.0) && (vBump.w <= 1.0)) ? (1.0 - vBump.w) * fStreakHL : 0.0;\n\tfDistMin = min(fDistMin, vBump.y);\n\n\tvBump = SmoothBump( vCoord, vec2(6.0, 64.0), vec2(32.0 - 6.0, 65.0), normalize(vec2(0.0, 1.0)), 3.0 );\n\tfShade += vBump.x * 0.1;\n\tfShade += ((vBump.w >= 0.0) && (vBump.w <= 1.0)) ? (1.0 - vBump.w) * fStreakHL : 0.0;\n\tfDistMin = min(fDistMin, vBump.y);\n\tvBump = SmoothBump( vCoord, vec2(6.0, 76.0), vec2(32.0 - 6.0, 110.0), normalize(vec2(0.0, 1.0)), 3.0 ) ;\n\tfShade += vBump.x * 0.1;\n\tfShade += ((vBump.w >= 0.0) && (vBump.w <= 1.0)) ? (1.0 - vBump.w) * fStreakHL : 0.0;\n\tfDistMin = min(fDistMin, vBump.y);\n\n\tvBump = SmoothBump( vTexCoord, vec2(-16.0, 50.0), vec2(256.0, 52.0), normalize(vec2(0.0, 1.0)), 3.0 );\n\tfShade += vBump.x * 0.1;\n\tfShade += ((vBump.w >= 0.0) && (vBump.w <= 1.0)) ? (1.0 - vBump.w) * fStreakHL : 0.0;\n\tfDistMin = min(fDistMin, vBump.y);\n\tvBump = SmoothBump( vTexCoord, vec2(-16.0, 122.0), vec2(256.0, 200.0), normalize(vec2(0.0, 1.0)), 3.0 );\n\tfShade += vBump.x * 0.05;\n\tfDistMin = min(fDistMin, vBump.y);\n\n\tcol *= 1.0 + fShade * 3.0;\n\n\tcol *= clamp((1.0 - fDistMin) * 1.0, 0.0, 1.0) * 0.3 + 0.7;\n\n\treturn col;\n}\n\nvec3 TexBrown1( vec2 vTexCoord, float fRandom, float fHRandom, vec3 vColA, vec3 vColB, vec3 vDirtCol )\n{\n\tvec3 col = mix( vColA, vColB, fRandom * fRandom) / 255.0;\n\n\tif(vTexCoord.x >= 64.0)\n\t{\n\t\tcol = col * vec3(1.0, 0.848, 0.646);\n\t\t\n\t\tcol = mix( col, vec3( 0.111, 0.414, 0.3), clamp((fRandom -0.5) * 2.0, 0.0, 1.0)); // green bits\n\t}\n\t\n\tfloat fVNoise = fHRandom + fRandom;\n\t\n\tfloat fStreak = clamp(abs(fract(fVNoise) - 0.5) * 3.0, 0.0, 1.0);\n\tfStreak = fStreak * fStreak;\n\n\tvec2 vRepeatCoord = vTexCoord;\n\tvRepeatCoord.x = mod(vRepeatCoord.x, 13.0);\n\t\n\tvec4 vBump = SmoothBump( vRepeatCoord, vec2( 5.0, 6.0 ), vec2( 5.0, 12.0), vec2(0.0, 1.0), 1.5);\n\tfloat fMask = clamp(1.0 - vBump.y, 0.0, 1.0);\n\t\n\tfloat fStreakAmount = 1.0;\n\tfStreakAmount *= smoothstep( 0.0, 8.0, vRepeatCoord.y );\n\tfloat fStreakWidth = smoothstep( 64.0, 12.0, vRepeatCoord.y );\n\tfloat fBase1Dist = smoothstep( 24.0, 75.0, vRepeatCoord.y ) * step(vRepeatCoord.y, 75.0);\n\tfloat fBase2Dist = smoothstep( 96.0, 127.0, vRepeatCoord.y );// * step(75.0, vRepeatCoord.y);\n\tfloat fBaseDist = max(fBase1Dist, fBase2Dist);\n\tfStreakWidth = max( fStreakWidth, fBaseDist);\n\tfloat fTop2Dist = smoothstep( 127.0, 75.0, vRepeatCoord.y ) * step(75.0, vRepeatCoord.y);\n\tfStreakWidth = max(fStreakWidth, fTop2Dist);\n\tfloat fStreakX = abs(vRepeatCoord.x - 5.0) / 8.0;\n\tfStreakAmount *= fStreakWidth;\n\tfStreakAmount *= smoothstep( fStreakWidth, 0.0, fStreakX);\n\tfStreakAmount = max(fStreakAmount, (fBaseDist - 0.75) * 4.0);\n\tfStreakAmount *= 1.0 - fMask; \n\tcol = mix(col, vDirtCol, fStreakAmount * (fStreak * 0.5 + 0.5) );\n\t\n\tcol += ((vBump.w >= 0.0) && (vBump.w <= 1.0)) ? (vBump.w) * (1.0-vBump.y) * 0.05 : 0.0;\n\t\n\tif((vTexCoord.y == 17.0) || (vTexCoord.y == 73.0)) col *= 0.9;\n\tif((vTexCoord.y == 19.0) || (vTexCoord.y == 75.0)) col *= 1.2;\n\n\tcol *= 1.0 + clamp(vBump.x, -1.0, 0.0) * 0.6;\n\t\t\n\treturn col;\n}\n\nvec3 TexDoorstop( vec2 vTexCoord, float fRandom )\n{\n\tfloat fShade = 1.0 - abs(vTexCoord.x - 3.4) / 4.0;\n\t\n\tfShade = fShade * 0.2 + 0.2;\n\t\n\tfloat fSin = sin((vTexCoord.y - 16.0) * 3.14150 * 4.0 / 128.0) * 0.5 + 0.5;\n\tfShade *= 0.8 + fRandom * 1.2 * fSin;\n\t\n\treturn vec3(fShade);\n}\n\nvoid DrawScreen(inout vec3 col, const in vec2 vTexCoord, const in vec2 vPos, const in vec2 vSize, const in vec3 vCol)\n{\n\tvec2 vScreenCoord = vTexCoord - vPos;\n\tcol *= Indent( vScreenCoord, vSize, vec2(-1.0), 1.2, 0.5);\n\n\tif((vScreenCoord.x >= 0.0) && (vScreenCoord.y >= 0.0) && (vScreenCoord.x < vSize.x) && (vScreenCoord.y < vSize.y))\n\t{\n\t\tcol = vCol;\n\t}\n}\n\nbool Screen( inout vec3 col, const in vec2 vTexCoord, const in vec2 vPos, const in vec2 vSize, out vec2 vUV )\n{\n\tvec2 vScreenCoord = vTexCoord - vPos;\n\tcol *= Indent( vScreenCoord, vSize, vec2(-1.0), 1.2, 0.5);\n\n    vUV = vScreenCoord / vSize;\n    \n\tif((vScreenCoord.x >= 0.0) && (vScreenCoord.y >= 0.0) && (vScreenCoord.x < vSize.x) && (vScreenCoord.y < vSize.y))\n\t{\n        return true;\n\t}\n    return false;\n}\n\n\nvec3 TexCompute2( vec2 vTexCoord, float fRandom )\n{\n    fRandom = 1.0 - fRandom * fRandom;\n\tvec3 col = vec3(35.0 / 255.0);\n\t\n\tcol *= Indent( vTexCoord, vec2( -8.0, 0.0), vec2(300.0, 10.0), 1.3, 0.5);\n\tcol *= Indent( vTexCoord, vec2( -8.0, 11.0), vec2(300.0, 27.0), 1.3, 0.5);\n\tcol *= Indent( vTexCoord, vec2( -8.0, 28.0), vec2(300.0, 43.0), 1.3, 0.5);\n\t{\n\t\tvec2 vLocalCoord = vTexCoord;\n\t\tvLocalCoord.x = mod(vLocalCoord.x, 21.0);\n\t\tcol *= Indent( vLocalCoord, vec2( 0.0, 44.0), vec2(20.0, 55.0), 1.3, 0.5);\n\t}\n\n\tif(vTexCoord.y < 40.0)\n\t{\n\t\tvec2 vTileSize = vec2(48.0, 14.0);\n\t\tvec2 vIndex = floor(vTexCoord / vTileSize);\n\n\t\tfloat fIndex = vIndex.x + vIndex.y * 13.0;\n\t\tvec2 vMin = vIndex * vTileSize + vec2(Hash(fIndex) * 32.0, 4.0);\n\t\tvec2 vSize = vec2(8.0 + Hash(fIndex + 1.0) * 32.0, 4.0);\n\n\t\tvec3 vCol = vec3(0.0);\n\t\tfloat iIndex = floor(mod(fIndex, 5.0));\n\t\tif( iIndex < 0.5 ) \n\t\t{\n\t\t\tvCol = mix(vec3(0.0, 0.5, 0.0), vec3(0.0, 0.25, 0.0), fRandom);\n\t\t}\n\t\telse if(iIndex < 1.5)\n\t\t{\n\t\t\tvCol = mix(vec3(1.0, 0.6, 0.02), vec3(0.1), fRandom);\n\t\t}\n\t\telse if(iIndex < 2.5)\n\t\t{\n\t\t\tvCol = vec3(fRandom * 0.5);\n\t\t}\n\t\telse if(iIndex < 3.5)\n\t\t{\n\t\t\tvCol = vec3(fRandom * 0.25);\n\t\t}\n\t\telse if(iIndex < 4.5)\n\t\t{\n\t\t\tvCol = mix(vec3(0.0, 0.0, 0.5), vec3(0.1), fRandom);\n\t\t}\n\t\tDrawScreen(col, vTexCoord, vMin, vSize, vCol);\n\t}\n\n\treturn col;\n}\n\nvec3 TexStep6( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n\tvec3 col = mix( vec3(87.0, 67.0, 51.0), vec3(119.0, 95.0, 75.0), fRandom) / 255.0;\n\n\tcol *= Indent( vTexCoord, vec2(-1.0, 3.0), vec2(32.0, 1.0), 1.3, 0.7);\n\tcol *= Indent( vTexCoord, vec2(-1.0, 8.0), vec2(32.0, 0.0), 1.3, 0.9);\n\n\tfloat fStreak = clamp((vTexCoord.y / 16.0) * 1.5 - fHRandom, 0.0, 1.0);\n\n\tcol *= fStreak * 0.3 + 0.7;\n\t\n\treturn col;\n}\n\nvec3 TexSupport2( vec2 vTexCoord, float fRandom )\n{\n\tvec3 col;\n\tfloat fShade = 0.5;\n\t\n\tfloat f1 = abs(fract((vTexCoord.y + 32.0) / 70.0) - 0.5) * 2.0;\n\tfloat f2 = abs(fract((vTexCoord.x + 16.0) / 16.0) - 0.5) * 2.0;\n\tfShade += f1 * 0.75 + f2 * 0.25;\n\tfShade = fShade * fShade;\n\n\tfShade = fShade * 0.2 + 0.05;\n\tfShade *= 1.0 + fRandom * 0.4;\n\n\tvec2 vLocalCoord = vTexCoord;\n\tif((vLocalCoord.y < 64.0) || (vLocalCoord.y > 75.0))\n\t{\n\t\tif(vLocalCoord.y > 64.0) vLocalCoord.y -= 8.0;\n\t\tvLocalCoord = mod( vLocalCoord, vec2(20.0, 16.0));\n\t\tfloat fIndent = Indent( vLocalCoord, vec2(8.0, 8.0), vec2(16.0, 15.0), 0.9, 1.1);\n\t\tfShade += fIndent - 1.0;\n\t}\n\t\n\tcol = vec3(fShade);\n\t\n\treturn col;\n}\n\nvec3 TexDoorTrak( vec2 vTexCoord, float fRandom )\n{\n\tfloat fShade = fRandom * 0.5;\n\tfShade *= mod(vTexCoord.x, 2.0) * 0.6 + 0.4;\n\treturn vec3(fShade);\n}\n\nvec3 TexBrown144( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n\tvec3 col = mix( vec3(39.0, 39.0, 39.0), vec3(51.0, 43.0, 19.0), fRandom) / 255.0;\n\t\n\tfloat fBlend = fHRandom - 0.1;\n\tfBlend = clamp(fBlend, 0.0, 1.0);\n\tcol = mix( col, col * 2.0 * vec3(0.893, 0.725, 0.161), fBlend);\n\treturn col;\n}\n\nvec3 TexNuke24( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n\tvec3 col = mix( vec3(51.0, 43.0, 19.0), vec3(79.0, 59, 35.0), fRandom) / 255.0;\n\tvec3 colNuke = mix( vec3(11.0, 23.0, 7.0), vec3(46.0, 83, 39.0), fRandom) * 2.5 / 255.0;\n\tfloat fBlend = -0.25 -fHRandom + vTexCoord.y / 12.0;// * 3.0;\n\tfBlend = clamp(fBlend, 0.0, 1.0);\n    fBlend= fBlend * fBlend;\n\tcol = mix( col, colNuke, fBlend);    \n\treturn col;\n}\n\nvec3 TexPlanet1( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    float fShade;\n    float fMirrorY = 64.0 - abs(vTexCoord.y - 64.0);\n    \n    fShade = cos( 3.14 * (fMirrorY - 36.0) / 36.0 ) * 0.5 + 0.5;\n    fShade *= fRandom * 0.5 + 0.5;\n\n    float fStreak = clamp(0.0, 1.0, fHRandom + fMirrorY / 32.0);\n    fShade *= fStreak;\n    \n\tvec3 col = mix( vec3(59), vec3(147), fShade) / 255.0;\n\n    vec2 vMin = vec2(4,7);\n    vec2 vMax = vec2(58,60);\n    \n    float fIndex = 0.0;\n    \n    if ( vTexCoord.x > 128.0 )\n    {\n        vMin.x += 128.;\n        vMax.x += 128.;\n        \n        fIndex += 2.0;\n    }\n    else\n    if ( vTexCoord.x > 64.0 )\n    {\n        vMin.x += 64.;\n        vMax.x += 64.;\n        \n        fIndex += 1.0;\n    }\n    \n    if ( vTexCoord.y > 64.0 )\n    {\n        vMin.y += 62.;\n        vMax.y += 62.;\n        \n        fIndex += 3.0;\n    }\n    \n    if ( all( greaterThanEqual( vTexCoord, vMin ) ) &&\n         all( lessThanEqual( vTexCoord, vMax ) ))\n    {\n        col = vec3(0.0);\n        \n        vec2 vUV = (vTexCoord - (vMin + 1.0)) / (vMax - vMin - 2.);\n\t    if ( all( greaterThanEqual( vUV, vec2(0.0) ) ) &&\n    \t     all( lessThan( vUV, vec2(1.0) ) ))\n    \t{\n            col = vec3(0.0);\n\n            float fSize = mod((1.0 + fIndex) * 1.45, 1.0);\n            float fOffset = mod((1.0 + fIndex) * 1.84, 1.0);\n            \n            vec2 vXY = vUV * 2.0 - 1.0;\n            vXY += fOffset;\n            float l = length(vXY);\n\n            vec3 vPlanetCol = vec3(0.5,0.2,.4) + vec3(8.3,2.24,5.89) * fIndex;\n            vPlanetCol = mod( vPlanetCol, vec3(1));\n            vPlanetCol *= vec3(1., .2, .01);\n            vPlanetCol = normalize(vPlanetCol);\n            \n            if ( fIndex == 4.0 )\n            {\n            \tcol = vPlanetCol * max( 0.0, fRandom - l * 0.5 );\n            }\n            else\n            {\n            \t// planet                       \n                if ( l < fSize )\n                {                \n                    col = vPlanetCol;\n\n                    vec3 vLight = vec3(0.1,0.5,.4) + vec3(5.435,32.345,32.923) * fIndex;\n                    vLight = mod( vLight, 1.0);\n                    vLight.xy = vLight.xy * 2.0 - 1.0;\n                    vLight = normalize(vLight);\n\n\n                    vec2 vD = vXY;\n                    vec3 vNorm = vec3(vD, sqrt( fSize * fSize - l * l ));\n                    float fPlanetShade = max(0.0, dot( vNorm, vLight));\n                    col *= fPlanetShade; \n                }\n                else\n                {\n                    float f = min(1.0, fRandom / .75);\n                    col = vec3(1.) * pow( f, 100.0) * 0.25;\n                    /*\n                    if ( fRandom > 0.75 )\n                    {\n                        col = vec3(0.5);\n                    }*/\n                }\n            }\n            \n            \n            col += 0.1;\n            // sheen\n            col += max(0.0, 1.0 - (vUV.x + vUV.y) * 2.0) * 0.3;\n        }\n        \n    }\n\t//if( Screen( col, const in vec2 vTexCoord, const in vec2 vPos, const in vec2 vSize, out vec2 vUV )\n    \n    \n\treturn col;    \n}\n\nfloat Line( vec2 vCoord, vec2 vA, vec2 vB )\n{\n    vec2 vDelta = vB - vA;\n    vec2 vDir = normalize(vDelta);\n    vec2 vOffset = vCoord - vA;\n    \n    float fProj = dot( vOffset, vDir );\n    \n     fProj = clamp( fProj, 0.0, length(vDelta) );\n    vec2 vClosest = vA + vDir * fProj;\n    \n    float d = max(0.0, 1.0 - length( vClosest - vCoord ) * 0.25);\n    return d * d * d;\n    //return 0.0;\n}\n\nvec3 TexExitSign( vec2 vTexCoord, float fRandom, float fHRandom )\n{\n    vec3 vCol = vec3(59) / 255.;\n    \n    vec2 vBevelMin = vec2(1,1);\n    vec2 vBevelMax = vec2(30,14);\n   \n    if ( vTexCoord.y == (vBevelMin.y-1.) )\n    {\n        vCol *= 1.5;\n    }\n    if ( vTexCoord.y == (vBevelMax.y+1.) )\n    {\n        vCol *= 0.5;\n    }\n    if ( vTexCoord.x == (vBevelMin.x-1.) )\n    {\n        vCol *= 1.1;\n    }\n    if ( vTexCoord.x == (vBevelMax.x+1.) )\n    {\n        vCol *= 0.75;\n    }\n    \n    if ( all( greaterThanEqual(vTexCoord, vec2(2,2) ) ) &&\n        all( lessThanEqual(vTexCoord, vec2(29,13) ) )         \n    )\n    {\n        vCol = vec3(0.0);\n        \n        vec3 vLetterCol = vec3(227,0,0) / 255.;\n        vLetterCol *= 1.0 - (vTexCoord.y / 30.0);\n        \n        // Verticals\n        vec2 vA = vec2(4,4);\n        vec2 vB = vec2(4,11);\n        \n        if ( vTexCoord.x > 23. ) \n        {\n            vA.x = vB.x = 25.0;\n    \t}\n        else\n        if ( vTexCoord.x > 15. ) \n        {\n            vA.x = vB.x = 20.0;\n            \n        }\n                \n        vCol = mix( vCol, vLetterCol, Line( vTexCoord, vA, vB ) );\n        \n        // Horizontals\n        vA = vec2(4,4);\n        vB = vec2(9,4);\n        \n        if ( vTexCoord.x > 20. ) \n        {\n            vA.x = 22.;\n            vB.x = 28.;\n        }\n        else\n        if ( vTexCoord.y > 10. ) \n        {\n            vA.y = 11.;\n            vB.y = 11.;\n        }\n        else\n        if ( vTexCoord.y > 4. ) \n        {\n            vA.y = 7.;\n            vB.y = 7.;\n            vB.x = 7.;\n        }\n        \n        vCol = mix( vCol, vLetterCol, Line( vTexCoord, vA, vB ) );\n                \n        vCol = mix( vCol, vLetterCol, Line( vTexCoord, vec2(11,4), vec2(18,11) ) );\n        vCol = mix( vCol, vLetterCol, Line( vTexCoord, vec2(11,11), vec2(18,4) ) );\n    }\n    \n    return vCol;\n}\n\n\n\nfloat IsTile( vec2 vTexCoord )\n{\n    float y = 63.5 - abs( vTexCoord.y - 63.5);\n    \n    float f = y - 5.0;\n    float fm = f;\n    \n    float fRepeat = 29. - 13.;\n    \n    float x = 64. - abs(vTexCoord.x - 64.);\n    \n    if ( f > 0.0 && f < fRepeat * 3.5 )\n    {\n    \tfm = mod( fm, fRepeat ); \n    }\n    else\n    {\n        fm = 0.0;\n    }\n        \n    if ( fm > 7.0)\n    {\n\t    if ( x > 23. )\n            return 1.0;\n    }\n    else\n    {\n\t    if ( x > 31. )\n            return 1.0;\n    }\n    return 0.0;\n}\n\nvec3 TexCompTile( vec2 vTexCoord, float fRandom )\n{   \n    // Blue\n    vec3 vCol0 = vec3(0.0, 0.0, 35.0 / 255.0);\n    vec3 vCol1 = vec3(0.0, 0.0, 200.0 / 255.0);\n    vec3 blueCol = mix( vCol0, vCol1, fRandom * fRandom * 2.5);\n    \n    if ( IsTile(vTexCoord) > 0.0 )\n    {\n        return blueCol;\n    }\n    \n    vec3 col = vec3(39./255.);\n    if ( IsTile( vTexCoord - 1. ) > 0.0 )\n    {\n        col += 0.1;\n    }\n    else\n    if ( IsTile( vTexCoord + 1. ) > 0.0 )\n    {\n        col -= 0.1;\n    }\n    \n    if ( vTexCoord.x == 0.0 ) col += 0.1;\n    if ( vTexCoord.x == 127.0 ) col -= 0.1;\n    if ( vTexCoord.y == 0.0 ) col += 0.1;\n    if ( vTexCoord.y == 127.0 ) col -= 0.1;\n    if ( vTexCoord.y == 64.0 ) col += 0.1;\n    if ( vTexCoord.y == 63.0 ) col -= 0.1;\n    \n    \n    return col;\n}\n\nvec3 TexTekWall1( vec2 vTexCoord, float fRandom )\n{\n\tvec3 col = mix( vec3(39.0, 39.0, 39.0), vec3(51.0, 51.0, 51.0), fRandom * fRandom) / 255.0;\n\t\n\treturn col;\n}\n\nvoid TexAddSwitch( inout vec3 col, vec2 vTexCoord, float fRandom )\n{    \n    vec2 vMin = vec2(16., 72.);\n    vec2 vMax = vec2(47., 103.);\n\n    if ( all( greaterThanEqual( vTexCoord, vMin ) ) && \n        all( lessThanEqual( vTexCoord, vMax ) ))\n    {\n        col = vec3( 0.5 );\n        \n        col *= Indent(vTexCoord, vMax, vMin, 0.5, 1.5);\n        \n        DrawScreen( col, vTexCoord, vec2(22,91), vec2(9,8), vec3(1,0,0));\n        DrawScreen( col, vTexCoord, vec2(22,77), vec2(9,8), vec3(0,.3,0));\n        \n        col *= Indent(vTexCoord, vec2(38,79), vec2(39,96), 0.5, 1.1);\n\n        vec2 vSwMin = vec2(37,81);\n        vec2 vSwMax = vSwMin + vec2(3,2);\n        if ( all( greaterThanEqual( vTexCoord, vSwMin ) ) && \n        \tall( lessThanEqual( vTexCoord, vSwMax ) ))\n        {\n            col = vec3(0.5, 0.4, 0.3);\n            col *= Indent(vTexCoord, vSwMax, vSwMin, 0.5, 1.5);\n        }\n        \n        col *= fRandom * 0.5 + 0.5;\n    }    \n}\n\nvec3 SampleTexture( uint iTexture, const in vec2 _vUV )\n{\n    vec3 vCol0 = vec3(0.6);\n    vec3 vCol1 = vec3(119.0, 79.0, 43.0) / 255.0;\n    vec3 vCol2 = vec3(0);\n    \n    uint iOrigTexture = iTexture;\n    \n        \n    vec3 col = vec3(1.0, 1.0, 1.0);\n#ifdef DEBUG_IDENTIFY_UNDEFINED_TEXTURES    \n    col = vec3(1.0, 0.0, 1.0);\n#endif  \n    \n#ifdef DEBUG_IDENTIFY_TEXTURE\n    if ( fTexture == DEBUG_IDENTIFY_TEXTURE && (fract(iTime) < 0.5))\n    {\n        return vec3(1.0, 0.0, 1.0);\n    }\n#endif     \n    \n    vec2 vUV = _vUV;\n    \n    vec2 vSize = vec2(64.0);\n    float fPersistence = 0.8;\n\tfloat fNoise2Freq = 0.5;\n    vec2 vRandomStreak = vec2(0.0);\n    \n    // Direct Substitutes\n    if ( iTexture == TEX_FLOOR1_1 )\n    {\n        iTexture = TEX_FLAT14;\n    }\n    else \n    if ( iTexture == TEX_BROWN96 )\n    {\n        iTexture = TEX_BROWN1;\n    }\n    else\n    if ( iTexture == TEX_COMPTALL)\n    {\n        iTexture = TEX_STARGR1;\n    }\n    else\n    if ( iTexture == TEX_DOORSTOP )\n    {\n        iTexture = TEX_DOORTRAK;\n    }\n    else\n    if ( iTexture == TEX_FLAT20 )\n    {\n        iTexture = TEX_DOORSTOP;\n    }\n\telse\n    if (iTexture == TEX_TEKWALL4\n       || iTexture == TEX_STEP2)\n    {\n        // start area pillars\n        iTexture = TEX_TEKWALL1;\n    }\n    else\n    if (iTexture == TEX_STEP1)\n    {\n        // Comp room steps (lights added later)\n        iTexture = TEX_STEP6;\n    }\n    else\n    if ( iTexture == TEX_SLADWALL)\n    {\n        iTexture = TEX_BROWNGRN;\n    }\n    else\n    if ( iTexture == TEX_EXITDOOR )\n    {\n        iTexture = TEX_DOOR3;\n    }\n    else\n\tif ( iTexture == TEX_FLAT23 )\n    {\n        iTexture = TEX_FLAT18;\n    }         \n        \n        \n    \n    if ( iTexture == TEX_FLOOR4_8)\n    {\n        // start area\n\t    vCol0 = vec3(30.0, 30.0, 30.0);\n        vCol1 = vec3(150.0, 150.0, 150.0);\n    }\n\telse        \n    if ( iTexture == TEX_FLOOR5_1)\n    {\n        // Corridor to outside\n        iTexture = TEX_FLOOR4_8;\n        vCol0 = vec3(51.0, 43.0, 19.0);\n        vCol1 = vec3(150.0, 150.0, 150.0);\n    }\n\telse        \n    if ( iTexture == TEX_FLOOR5_2 )\n    {\n        // imp/nukage room\n        iTexture = TEX_FLOOR4_8;\n        vCol0 = vec3(51.0, 43.0, 19.0);\n\t\tvCol1 = vec3(79.0, 59, 35.0);\n    }\n    \n    if ( iTexture == TEX_TLITE6_5)\n    {\n\t\tvCol0 = vec3(.2);        \n\t\tvCol1 = vec3(1,0,0);\n    }\n    if ( iTexture == TEX_TLITE6_6 )\n    {\n        iTexture = TEX_TLITE6_5;\n        vCol0 = vec3(.25, .2, .1);\n        vCol1 = vec3(.8,.6,.4);\n    }\n\n    if ( iTexture == TEX_TLITE6_4 )\n    {\n        vCol0 = vec3(.25, .2, .1);\n        vCol1 = vec3(.8,.6,.4);\n    }\n    else\n    if ( iTexture == TEX_TLITE6_1 )\n    {\n        iTexture = TEX_TLITE6_4;\n\t\tvCol0 = vec3(.2);        \n\t\tvCol1 = vec3(1);\n    }\n\n    if ( iTexture == TEX_BIGDOOR2 )\n    {\n    \tvCol0 = vec3(119) /255.;\n    }\n    else\n    if ( iTexture == TEX_BIGDOOR4 )\n    {\n        iTexture = TEX_BIGDOOR2;\n    \tvCol0 = vec3(103,83,63) /255.;\n    }\n    \n    if ( iTexture == TEX_FLOOR7_1 )\n    {\n\t    vCol0 = vec3(51.0, 43.0, 19.0);\n        vCol1 = vec3(79.0, 59, 35.0);\n\t}\n    \n    if ( iTexture == TEX_CEIL5_2 )\n    {\n        iTexture = TEX_FLOOR7_1;\n\t    vCol0 = vec3(51.0, 43.0, 19.0) * .75;\n        vCol1 = vec3(79.0, 59, 35.0) * .75;\n\t}\n    \n    if ( iTexture == TEX_BROWN1 )\n    {\n        vCol0 = vec3(119.0, 95.0, 63.0);\n        vCol1 = vec3(147.0, 123.0, 99.0);\n        vCol2 = vec3(0.3, 0.2, 0.1);\n    }\n    else\n    if ( iTexture == TEX_BROWNGRN )\n    {\n        iTexture = TEX_BROWN1;\n        vCol1 = vec3(43,35,15);\n        vCol0 = vec3(47.0, 47.0, 47.0);\n        //vCol1 = vec3(147.0, 123.0, 99.0);\n        //vCol1 = vec3(123.0, 127.0, 99.0);\n        vCol2 = vec3(19,35,11) / 255.;\n    }\n    \n    if ( iTexture == TEX_FLAT14 )\n    {\n        // Blue noise\n \t\tvCol0 = vec3(0.0, 0.0, 35.0 / 255.0);\n        vCol1 = vec3(0.0, 0.0, 200.0 / 255.0);\n\t\tfPersistence = 2.0;\n    }\n    else\n    if ( iTexture == TEX_CEIL5_1 )\n    {\n        // Comp room side ceil\n        iTexture = TEX_FLAT14;        \n \t\tvCol0 = vec3(30.0 / 255.0);\n        vCol1 = vec3(15.0 / 255.0);\n\t\tfPersistence = 2.0;\n    }\n    else\n    if ( iTexture == TEX_FLAT18 )\n    {\n        // Comp room side floor\n        iTexture = TEX_FLAT14;        \n \t\tvCol0 = vec3(70.0 / 255.0);\n        vCol1 = vec3(40.0 / 255.0);\n\t\tfPersistence = 2.0;\n    }   \n    else\n    if ( iTexture == TEX_COMPSPAN )\n    {\n        // Comp room wall lower\n        iTexture = TEX_FLAT14;        \n \t\tvCol0 = vec3(70.0 / 255.0);\n        vCol1 = vec3(30.0 / 255.0);\n\t\tfPersistence = 1.0;\n    }\n    else\n    if ( iTexture == TEX_FLOOR6_2 )\n    {\n        // secret shotgun area ceil\n        iTexture = TEX_FLAT14;        \n \t\tvCol0 = vec3(120.0 / 255.0);\n        vCol1 = vec3(0.0 / 255.0);\n\t\tfPersistence = 1.25;\n    }\n\n    if ( iTexture == TEX_FLOOR7_2 )\n    {\n        // Green armor ceil\n        iTexture = TEX_FLAT14;\n \t\tvCol0 = vec3(85,89,60)/255.;\n        vCol1 = vec3(0.0, 0.0, 0);\n\t\tfPersistence = 0.5;\n    }\n    \n    if ( iTexture == TEX_COMPUTE3 )\n    {\n        iTexture = TEX_COMPUTE2;\n    }       \n\n\tif(iTexture == TEX_NUKAGE3)\n\t{\n        float fTest = fract(floor(iTime * 6.0) * (1.0 / 3.0));\n        if( fTest < 0.3 )\n        {\n\t        vUV += 0.3 * vSize;\n        }\n        else if(fTest < 0.6)\n        {\n            vUV = vUV.yx - 0.3; \n        }\n        else\n        {\n            vUV = vUV + 0.45;\n        }\n\t}\n    \n    if ( iTexture == TEX_STARTAN1 )\n    {\n        iTexture = TEX_STARTAN3;\n        vCol0 = vec3(131.0, 101.0, 75.0) / 255.0;\n        vCol1 = vec3(131.0, 101.0, 75.0) / 255.0;\n    }\n    else\n    if ( iTexture == TEX_STARG3 )\n    {\n        iTexture = TEX_STARTAN3;\n\t\tvCol0 = vec3(0.6);\n\t\tvCol1 = vec3(123,127,99) / 255.0;\n    }\n    else\n    if ( iTexture == TEX_STARGR1 )\n    {\n        iTexture = TEX_STARTAN3;\n\t\tvCol0 = vec3(0.6);\n\t\tvCol1 = vec3(0.6);  \n    }\n    else\n    if ( iTexture == TEX_SW1STRTN )\n    {\n        iTexture = TEX_STARTAN3;\n        vCol0 = vec3(131.0, 101.0, 75.0) / 255.0;\n        vCol1 = vec3(131.0, 101.0, 75.0) / 255.0;\n    }   \n    \n    // Should be a sidedef flag\n    if ( iOrigTexture == TEX_TEKWALL1 )\n    {\n        vUV.x = mod(vUV.x + floor(iTime * 50.0), 64.);\n    }\n    \n\t\n\tif(iTexture == TEX_NUKAGE3) { fPersistence = 1.0; }\n\tif(iTexture == TEX_F_SKY1) { vSize = vec2(256.0, 128.0); fNoise2Freq = 0.3; }\n    if(iTexture == TEX_FLOOR7_1 ||\n      iTexture == TEX_CEIL5_2 ) { vSize = vec2(64.0, 32.0); fPersistence = 1.0; }\t\n    if(iTexture == TEX_FLAT5_5) { fPersistence = 3.0; }\n    if(iTexture == TEX_FLOOR4_8) { fPersistence = 0.3; }\n    if(iTexture == TEX_CEIL3_5) { fPersistence = 0.9; }\t\n    if(iTexture == TEX_DOOR3) { vSize = vec2(64.0, 72.0); }\t\n    if(iTexture == TEX_LITE3) { vSize = vec2(32.0, 128.0); }\t\n    if(iTexture == TEX_STARTAN3) { vSize = vec2(128.0); fPersistence = 1.0; }\t\n    if(iTexture == TEX_STARGR1) { vSize = vec2(128.0); fPersistence = 1.0; }\t    \n    if(iTexture == TEX_BIGDOOR2) { vSize = vec2(128.0, 128.0); fPersistence = 0.5; vRandomStreak = vec2(0,128.); }\t    \n\tif(iTexture == TEX_BROWN1) { vSize = vec2(128.0); fPersistence = 0.7; }\t\n\tif(iTexture == TEX_BROWNGRN) { vSize = vec2(128.0); fPersistence = 0.7; }\t    \n    if(iTexture == TEX_DOORSTOP) { vSize = vec2(8.0, 128.0); fPersistence = 0.7; }\n    if(iTexture == TEX_COMPUTE2) { vSize = vec2(256.0, 56.0); fPersistence = 1.5; }\n    if(iTexture == TEX_STEP6) { vSize = vec2(32.0, 16.0); fPersistence = 0.9; }\n    if(iTexture == TEX_SUPPORT2) { vSize = vec2(64.0, 128.0); }\n    if(iTexture == TEX_DOORTRAK) { vSize = vec2(8.0, 128.0); }\n    if(iTexture == TEX_TEKWALL1) {  fPersistence = 1.0;vSize = vec2(64.0, 64.0); }\n    if(iTexture == TEX_TLITE6_5) { fPersistence = 1.0; vSize = vec2(64.0, 64.0); }\n    if(iTexture == TEX_TLITE6_4) { fPersistence = 1.0; vSize = vec2(64.0, 64.0); }\n    if(iTexture == TEX_NUKE24) { vSize = vec2(64.0,24.0); }\n    if(iTexture == TEX_COMPTILE) { vSize = vec2(128.); vRandomStreak = vec2(16.0, 0); }\n    if(iTexture == TEX_PLANET1) { vSize = vec2(256.0, 128.0); vRandomStreak = vec2(0.0, 255.); }\n    if(iTexture == TEX_EXITSIGN) { vSize = vec2(64,16); }\n\t\n#ifdef PREVIEW\n\t     if(fTexture == TEX_DOOR3) {\tvSize = vec2(128.0, 128.0); }\t\n\telse if(fTexture == TEX_COMPUTE2) { vSize = vec2(256.0, 64.0); }\n#endif\n\t\n\t\n#ifdef PREVIEW\n    vec2 vTexCoord = floor(fract(vUV) * vSize);\n#else\n    vec2 vTexCoord = fract(vUV / vSize) * vSize;\n    #ifdef PIXELATE_TEXTURES\n    vTexCoord = floor(vTexCoord);\n    #endif\n    vTexCoord.y = vSize.y - vTexCoord.y - 1.0;\n#endif\n    \n\tfloat fHRandom = noise1D(vTexCoord.x * fNoise2Freq);\n    float fHOffset =  - ((vTexCoord.y) / vSize.y);\n\n    vec2 vRandomCoord = vTexCoord + float(iTexture);\n    vRandomCoord += fHRandom * vRandomStreak;\n\tfloat fRandom = fbm( vRandomCoord, fPersistence );\n\n\tif(iTexture == TEX_NUKAGE3) \tcol = TexNukage3( vTexCoord, fRandom );\n\tif(iTexture == TEX_F_SKY1) \tcol = TexFSky1( vTexCoord, fRandom, fHRandom );\n    if(iTexture == TEX_FLOOR7_1) \tcol = TexFloor7_1( vTexCoord, fRandom, vCol0, vCol1 );\n    if(iTexture == TEX_FLAT5_5) \tcol = TexFlat5_5( vTexCoord, fRandom );\n    if(iTexture == TEX_FLOOR4_8) \tcol = TexFloor4_8( vTexCoord, fRandom, vCol0, vCol1 );\n    if(iTexture == TEX_CEIL3_5) \tcol = TexCeil3_5( vTexCoord, fRandom );\n\tif(iTexture == TEX_FLAT14) \tcol = TexRandom( vTexCoord, fRandom, vCol0, vCol1 );\n\tif(iTexture == TEX_DOOR3) \t\tcol = TexDoor3( vTexCoord, fRandom, fHRandom + fHOffset);\n\tif(iTexture == TEX_LITE3) \t\tcol = TexLite3( vTexCoord );\n    if(iTexture == TEX_STARTAN3) \tcol = TexStartan3( vTexCoord, fRandom, vCol0, vCol1 );\n\tif(iTexture == TEX_BIGDOOR2) \tcol = TexBigDoor2( vTexCoord, fRandom, fHRandom, vCol0 );\n    if(iTexture == TEX_BROWN1) \tcol = TexBrown1( vTexCoord, fRandom, fHRandom + fHOffset, vCol0, vCol1, vCol2 );\n    if(iTexture == TEX_DOORSTOP) \tcol = TexDoorstop( vTexCoord, fRandom );\n    if(iTexture == TEX_COMPUTE2) \tcol = TexCompute2( vTexCoord, fRandom );\n    if(iTexture == TEX_STEP6) \t\tcol = TexStep6( vTexCoord, fRandom, fHRandom + fHOffset );\n    if(iTexture == TEX_SUPPORT2) \tcol = TexSupport2( vTexCoord, fRandom );\n\tif(iTexture == TEX_DOORTRAK) \tcol = TexDoorTrak( vTexCoord, fRandom );\n\tif(iTexture == TEX_BROWN144) \tcol = TexBrown144( vTexCoord, fRandom, fHRandom  + fHOffset );\n    if(iTexture == TEX_TEKWALL1)\tcol = TexTekWall1( vTexCoord, fRandom );\n    if(iTexture == TEX_TLITE6_5)\tcol = TexTLite6_5( vTexCoord, fRandom, vCol0, vCol1 );\n    if(iTexture == TEX_TLITE6_4)\tcol = TexTLite6_4( vTexCoord, fRandom, vCol0, vCol1 );\n    if(iTexture == TEX_NUKE24) \tcol = TexNuke24( vTexCoord, fRandom, fHRandom );\n\tif(iTexture == TEX_PLANET1)\tcol = TexPlanet1( vTexCoord, fRandom, fHRandom );\n#ifndef LINUX_WORKAROUND\n\tif(iTexture == TEX_EXITSIGN)\tcol = TexExitSign( vTexCoord, fRandom, fHRandom );\n#endif\n\t\n    if (iTexture == TEX_COMPTILE)\tcol = TexCompTile( vTexCoord, fRandom );\n        \n    if ( iOrigTexture == TEX_SW1STRTN )\n    {\n        TexAddSwitch( col, vTexCoord, fRandom );\n    }\n    else\n    if (iOrigTexture == TEX_STEP1)\n    {\n        /// Add lights\n        vec2 d = vTexCoord - vec2(16,8);\n        col *= max(0.3, 1.0 - 0.005 * dot(d,d) );\n    }    \n        \n    #ifdef QUANTIZE_TEXTURES\n    col = Quantize(col, 32.0);\n    #endif\n   \n#ifdef DEBUG_IDENTIFY_TEXTURES\n    vec2 vFontUV = fract(_vUV * vec2(.08) * vec2(1., 2.) ) * 3.0 / vec2(1., 2.);\n    if ( PrintValue(vFontUV, fOrigTexture, 2., 0.) > 0.0 )\n    {\n        col = vec3(1.,0,0);\n    }\n#endif    \n\n    return col;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define FAR_CLIP 1000000.0\n\n///////////////////////////\n// Util\n///////////////////////////\n\nvec3 Quantize( const in vec3 col, float fLevels )\n{\n\treturn floor( col * fLevels + 0.5 ) * (1.0 / fLevels);\n}\n\nfloat Cross2d( const in vec2 vA, const in vec2 vB )\n{   \n    return vA.x * vB.y - vA.y * vB.x;\n}\n\nvoid SetFlag( inout int iBits, int iFlag )\n{\n    iBits |= iFlag;\n}\n\n\nbool FlagSet( int iBits, int iFlag )\n{\n    return (iBits & iFlag) != 0;\n}\n\n\nfloat Hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\n///////////////////////////\n// Keyboard\n///////////////////////////\n\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\nconst int KEY_COMMA = 188;\nconst int KEY_PER   = 190;\n\nconst int KEY_1 = \t49;\nconst int KEY_2 = \t50;\nconst int KEY_3 = \t51;\nconst int KEY_ENTER = 13;\nconst int KEY_SHIFT = 16;\nconst int KEY_CTRL  = 17;\nconst int KEY_ALT   = 18;\nconst int KEY_TAB\t= 9;\n\nbool Key_IsPressed( sampler2D samp, int key)\n{\n    return texelFetch( samp, ivec2(key, 0), 0 ).x > 0.0;    \n}\n\nbool Key_IsToggled(sampler2D samp, int key)\n{\n    return texelFetch( samp, ivec2(key, 2), 0 ).x > 0.0;    \n}\n\n///////////////////////////\n// Packing\n///////////////////////////\n\nfloat BytePack2( vec2 val )\n{ \n    return dot( floor(val), vec2(1, 256) );\n}\n\nfloat BytePack2( float x, float y )\n{\n    return BytePack2( vec2( x, y ) );\n}\n\nvec2 ByteUnpack2( float x )\n{\n    return mod( floor(vec2(x) / vec2(1, 256)), 256. );\n}\n\nfloat BytePack3( vec3 val )\n{ \n    return dot( floor(val), vec3(1, 256, 65536) );\n}\n\nfloat BytePack3( float x, float y, float z )\n{\n    return BytePack3( vec3( x, y, z ) );\n}\n\nvec3 ByteUnpack3( float x )\n{\n    return mod( floor(vec3(x) / vec3(1, 256, 65536)), 256. );\n}\n\n///////////////////////////\n// Data Storage\n///////////////////////////\n\nvec4 LoadVec4( sampler2D sampler, in ivec2 vAddr )\n{\n    return texelFetch( sampler, vAddr, 0 );\n}\n\nvec3 LoadVec3( sampler2D sampler, in ivec2 vAddr )\n{\n    return LoadVec4( sampler, vAddr ).xyz;\n}\n\nbool AtAddress( vec2 p, ivec2 c ) { return all( equal( floor(p), vec2(c) ) ); }\n\nvoid StoreVec4( in ivec2 vAddr, in vec4 vValue, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = AtAddress( fragCoord, vAddr ) ? vValue : fragColor;\n}\n\nvoid StoreVec3( in ivec2 vAddr, in vec3 vValue, inout vec4 fragColor, in vec2 fragCoord )\n{\n    StoreVec4( vAddr, vec4( vValue, 0.0 ), fragColor, fragCoord);\n}\n\n\n///////////////////////////\n// Game State\n///////////////////////////\n    \nvec4 ReadStateData( sampler2D stateSampler, ivec2 address )\n{\n    return LoadVec4( stateSampler, address );\n}\n\n#define MAIN_GAME_STATE_BOOT\t\t\t0\n#define MAIN_GAME_STATE_SKILL_SELECT\t1\n#define MAIN_GAME_STATE_INIT_LEVEL\t\t2\n#define MAIN_GAME_STATE_GAME_RUNNING\t3\n#define MAIN_GAME_STATE_WIN\t\t\t\t4\n\nstruct GameState\n{\n    int iMainState;\n    float fStateTimer;\n    float fSkill;\n    float fGameTime;\n    \n    vec4 vPrevMouse;\n    \n    float fMap;\n    float fHudFx;\n    \n    int iMessage;\n    float fMessageTimer;\n};\n\nvoid GameState_Reset( out GameState gameState, vec4 vMouse )\n{\n    gameState.iMainState = MAIN_GAME_STATE_BOOT;\n\tgameState.fSkill = 0.;\n    gameState.fGameTime = 0.;\n    gameState.fStateTimer = 0.;\n    \n    gameState.vPrevMouse = vMouse;\n    \n    gameState.fMap = 0.0;\n    gameState.fHudFx = 0.0;\n    \n    gameState.iMessage = -1;\n    gameState.fMessageTimer = 0.0;\n}\n\nGameState GameState_Read( sampler2D stateSampler )\n{\n    GameState gameState;\n    \n    ivec2 vAddress = ivec2( 0 );\n    \n    vec4 vData0 = ReadStateData( stateSampler, vAddress );\n    vAddress.x++;\n\n    vec4 vData1 = ReadStateData( stateSampler, vAddress );\n    vAddress.x++;\n\n    vec4 vData2 = ReadStateData( stateSampler, vAddress );\n    vAddress.x++;\n\n    gameState.iMainState = int(vData0.x);\n    gameState.fSkill = vData0.y;\n    gameState.fGameTime = vData0.z;\n    gameState.fStateTimer = vData0.w;    \n\n    gameState.vPrevMouse = vData1;\n    \n    gameState.fMap = vData2.x;\n    gameState.fHudFx = vData2.y;\n\n    gameState.iMessage = int(vData2.z);\n    gameState.fMessageTimer = vData2.w;\n    \n    return gameState;\n}\n\nvoid GameState_Store( GameState gameState, inout vec4 fragColor, in vec2 fragCoord )\n{    \n    vec4 vData0 = vec4( gameState.iMainState, gameState.fSkill, gameState.fGameTime, gameState.fStateTimer );    \n\n    vec4 vData1 = vec4( gameState.vPrevMouse );    \n\n    vec4 vData2 = vec4( gameState.fMap, gameState.fHudFx, gameState.iMessage, gameState.fMessageTimer );\n\n    ivec2 vAddress = ivec2( 0 );\n    StoreVec4( vAddress, vData0, fragColor, fragCoord );\n    vAddress.x++;\n\n    StoreVec4( vAddress, vData1, fragColor, fragCoord );\n    vAddress.x++;\n\n    StoreVec4( vAddress, vData2, fragColor, fragCoord );\n    vAddress.x++;\n}\n\n\n///////////////////////////\n// Map Data\n///////////////////////////\n\nvec4 ReadMapData( sampler2D mapSampler, ivec2 address )\n{\n    return LoadVec4( mapSampler, address );\n}\n    \n#define MAX_SECTOR_COUNT 96\n#define MAX_SIDEDEF_COUNT 32\n\n#define SECTOR_NONE -1\n\nstruct MapInfo\n{\n    int iSectorCount;\n};\n    \nMapInfo ReadMapInfo( sampler2D mapSampler )\n{\n    MapInfo mapInfo;\n    \n    vec4 vData = ReadMapData( mapSampler, ivec2(0.0, 0.0) );\n    \n    mapInfo.iSectorCount = int(vData.x);\n    \n    return mapInfo;\n}\n\nstruct Sector\n{\n    int iSectorId;   \n    int iSideDefCount;\n    float fLightLevel;\n\n    float fFloorHeight;\n    float fCeilingHeight;\n\n    uint iFloorTexture;\n    uint iCeilingTexture;\n};\n    \nivec2 GetSectorAddress( int iSectorId )\n{\n    return ivec2(0, 1 + iSectorId );\n}\n\nivec2 GetSideDefAddress( int iSectorId, int iSideDefIndex )\n{\n    return ivec2(2 + iSideDefIndex * 3, 1 + iSectorId );\n}\n    \nSector Map_ReadSector( sampler2D mapSampler, int iSectorId )\n{\n    Sector sector;\n    \n    sector.iSectorId = iSectorId;\n    \n    ivec2 vAddress = GetSectorAddress( iSectorId );\n    \n    vec4 vData0 = ReadMapData(mapSampler, vAddress);\n    vAddress.x += 1;\n\n\n    vec4 vData1 = ReadMapData(mapSampler, vAddress);\n    vAddress.x += 1;\n\n    sector.fLightLevel = vData0.x;\n    sector.iSideDefCount = int(vData0.y);\n\n    sector.fFloorHeight = vData1.x;\n    sector.fCeilingHeight = vData1.y;\n    sector.iFloorTexture = uint(vData1.z);\n    sector.iCeilingTexture = uint(vData1.w);\n    \n    return sector;\n}\n\nstruct SideDef\n{\n    vec2 vA;\n    vec2 vB;\n    float fLength;\n    \n    int iNextSector;\n    \n    float fLightLevel;\n    \n    uint iUpperTexture;\n    uint iMiddleTexture;\n    uint iLowerTexture;    \n    \n    float fFlags;\n};\n\nSideDef Map_ReadSideDefInfo( sampler2D mapSampler, int iSectorId, int iSideDefIndex )\n{\n    SideDef sideDef;\n    \n    ivec2 vAddress = GetSideDefAddress( iSectorId, iSideDefIndex );\n    \n    vec4 vData0 = ReadMapData(mapSampler, vAddress);\n    vAddress.x += 1;\n\n    sideDef.vA = vData0.xy;\n    sideDef.vB = vData0.zw;\n    \n    vec4 vData1 = ReadMapData(mapSampler, vAddress);\n    vAddress.x += 1;\n\n    sideDef.fLength = vData1.x;\n    sideDef.fLightLevel = vData1.y;    \n    sideDef.iMiddleTexture = uint(vData1.z);\n    sideDef.iNextSector = int(vData1.w);\n    \n    vec4 vData2 = ReadMapData(mapSampler, vAddress);\n    sideDef.iLowerTexture = uint(vData2.x);\n    sideDef.iUpperTexture = uint(vData2.y);\n    sideDef.fFlags = vData2.z;\n    \n    return sideDef;\n}\n\n// Return:\n//   ray t value\n//   sidedef u value\n//   edge crossing direction\nvec3 Map_SideDefIntersectLine( SideDef sideDef, vec2 vRayPos, vec2 vRayDir )\n{\n    vec2 vEdgeDir = sideDef.vB - sideDef.vA;\n    vec2 vOA = sideDef.vA - vRayPos;\n    float fDenom = Cross2d( vRayDir, vEdgeDir );\n    float fRcpDenom = 1.0 / fDenom;\n    \n    vec3 vHitTUD;\n    vHitTUD.x = Cross2d( vOA, vEdgeDir ) * fRcpDenom;\n    vHitTUD.y = Cross2d( vOA, vRayDir ) * fRcpDenom;\n    vHitTUD.z = fDenom;\n    \n    return vHitTUD;    \n}\n\nbool Map_ValidSectorId( MapInfo mapInfo, int iSectorId )\n{\n    return ( iSectorId >= 0 && iSectorId < mapInfo.iSectorCount );\n}\n\n///////////////////////////\n// Trace\n///////////////////////////\n\nstruct TraceResult\n{\n    float fDist;\n    uint iTexture;\n    vec3 vTexture; // UV during trace. Resolved to RGB for sprite rendering\n  \tfloat fLightLevel;\n    int iSector;\n};\n\nstruct TraceSectorState\n{\n    float fEnterDist;\n    float fExitY;\n    int iNextSector;\n    bool bNoUpper;\n};\n\nvoid TraceSideDef( sampler2D mapSampler, vec3 vRayOrigin, vec3 vRayDir, inout TraceResult result, inout TraceSectorState sectorState, Sector sector, SideDef sideDef )\n{    \n\tvec3 vHitTUD = Map_SideDefIntersectLine( sideDef, vRayOrigin.xz, vRayDir.xz );\n    float fHitT = vHitTUD.x;\n    float fHitU = vHitTUD.y;\n    float fDenom = vHitTUD.z;\n\n    if( \n        // We hit the edge between the endpoints\n        (fHitU >= 0.0) && (fHitU < 1.0) &&\n        // Hit point is further than sector entrance distance\n        (fHitT > sectorState.fEnterDist) && \n        // Track closest hit\n        (fHitT < result.fDist) && \n        // Ignore faces entering sector\n        (fDenom < 0.0)\n      )\n    {\n        float fHitY = vRayDir.y * fHitT + vRayOrigin.y;\n        sectorState.fExitY = fHitY;\n        result.fDist = fHitT;\n        \n        if( (sectorState.fExitY > sector.fFloorHeight) )                \n        {\n            sectorState.iNextSector = SECTOR_NONE;\n            if( sideDef.iNextSector == SECTOR_NONE && sideDef.iMiddleTexture != 0u && (sectorState.fExitY < sector.fCeilingHeight ) )\n            {\n                result.vTexture.st = vec2(fHitU * sideDef.fLength, fHitY);\n                result.iTexture = sideDef.iMiddleTexture;\n                result.fLightLevel = sideDef.fLightLevel;\n                sectorState.bNoUpper = false;\n            }\n            else\n            {\n                Sector nextSector = Map_ReadSector( mapSampler, sideDef.iNextSector );\n                                \n\t\t        bool bNoUpper = mod(sideDef.fFlags, 2.0) != 0.0;\n\n\t            if (sectorState.fExitY < sector.fCeilingHeight || bNoUpper )\n                {                                    \n                    if( nextSector.fFloorHeight > sector.fFloorHeight && fHitY > sector.fFloorHeight && fHitY < nextSector.fFloorHeight)\n                    {\n                        result.vTexture.st = vec2(fHitU * sideDef.fLength, fHitY - nextSector.fFloorHeight);\n                        result.iTexture = sideDef.iLowerTexture;\n                        result.fLightLevel = sideDef.fLightLevel;\n                        sectorState.bNoUpper = false;\n                    }            \n                    else\n                    if( sideDef.iUpperTexture != 0u && nextSector.fCeilingHeight < sector.fCeilingHeight && fHitY < sector.fCeilingHeight && fHitY > nextSector.fCeilingHeight)\n                    {\n                        result.vTexture.st = vec2(fHitU * sideDef.fLength, fHitY - nextSector.fCeilingHeight);\n                        result.iTexture = sideDef.iUpperTexture;\n                        result.fLightLevel = sideDef.fLightLevel;\n                        sectorState.bNoUpper = false;\n                    }\n                    else\n                    {\n                        sectorState.bNoUpper = bNoUpper;\n                        sectorState.iNextSector = sideDef.iNextSector;                          \n                    }\n                }\n            }\n        }\n    }\n}\n\n\n///////////////////////////\n// Entity Management\n///////////////////////////\n\n#define ENTITY_TYPE_NONE -1\n\nstruct Entity\n{\n    int iId;\n    \n    int iType;\n    int iSubType;\n    int iSectorId;    \n\n    vec3 vPos;\n    float fYaw;\n    float fPitch;\n    \n    vec3 vVel;\n    float fYawVel;\n    \n    float fHealth;\n    float fArmor;    \n    \n    float fUseWeapon;    \n    float fHaveShotgun;\n    \n    float fTookDamage; // For HUD damage indicator\n    int iEvent; // Message event for UI \"Picked up an armor bonus\" etc.\n    \n    float fTimer; // Weapon reload for player, think timer for AI\n    float fTarget; // AI nemesis and also used for player aim up / down \n    int iFrameFlags;\n};\n    \n#define ENTITY_DATA_YPOS 8\n#define ENTITY_DATA_SIZE 4\n\n#define ENTITY_MAX_COUNT 128\n    \n#define ENTITY_NONE -1\n    \nint Entity_GetOutputId( vec2 fragCoord )\n{\n    if (\n           int(fragCoord.y) < ENTITY_DATA_YPOS\n        || int(fragCoord.y) >= (ENTITY_DATA_YPOS + ENTITY_DATA_SIZE)\n        || int(fragCoord.x) >= ENTITY_MAX_COUNT\n       )\n    {\n        return ENTITY_NONE;        \n    }\n\n    return int(floor(fragCoord.x));\n}\n\nbool Entity_IdValid( int iEntityId )\n{\n    return ( iEntityId >= 0 && iEntityId < ENTITY_MAX_COUNT );\n}\n\nvoid Entity_Clear( inout Entity entity )\n{\n    entity.iType = ENTITY_TYPE_NONE;\n    entity.vPos = vec3(0);\n    entity.iSectorId = SECTOR_NONE;\n    entity.fYaw = 0.0;\n    entity.vVel = vec3(0);\n    entity.fYawVel = 0.0;\n    entity.fPitch = 0.0;\n    entity.fHealth = 0.0;\n    entity.fArmor = 0.0;\n    entity.fTimer = 0.0;\n    entity.fTarget = float(ENTITY_NONE);\n    entity.iFrameFlags = 0;    \n    entity.fUseWeapon = 1.;\n    entity.fHaveShotgun = 0.;\n    entity.fTookDamage = 0.;\n    entity.iEvent = 0;\n}\n\nEntity Entity_Read( sampler2D stateSampler, int iEntityId )\n{\n    Entity entity;\n    \n    entity.iId = iEntityId;\n    \n    ivec2 vAddress = ivec2( iEntityId, ENTITY_DATA_YPOS );\n    \n    vec4 vData0 = ReadStateData( stateSampler, vAddress );\n    vec3 vUnpacked0x = ByteUnpack3( vData0.x ) - 1.;\n    vAddress.y++;\n    \n    \n    entity.iType = int(vUnpacked0x.x);\n    entity.iSubType = int(vUnpacked0x.y);\n    entity.iSectorId = int(vUnpacked0x.z);\n    \n    entity.iFrameFlags = int(vData0.y);\n    \n    entity.fTarget = vData0.z;\n    entity.fTimer = vData0.w;\n    \n    vec4 vData1 = ReadStateData( stateSampler, vAddress );\n    vAddress.y++;\n\n    entity.vPos = vData1.xyz;\n    entity.fYaw = vData1.w;\n\n    vec4 vData2 = ReadStateData( stateSampler, vAddress );\n    vAddress.y++;\n\n    entity.vVel = vData2.xyz;\n    entity.fYawVel = vData2.w;\n\n    vec4 vData3 = ReadStateData( stateSampler, vAddress );\n    vec2 vUnpacked3x = ByteUnpack2(vData3.x);\n    vec2 vUnpacked3y = ByteUnpack2(vData3.y);\n    vec2 vUnpacked3z = ByteUnpack2(vData3.z) -1.;\n    vAddress.y++;\n    \n    entity.fHealth = vUnpacked3x.x;\n    entity.fArmor = vUnpacked3x.y;\n    float fPackedWeaponInfo = vData3.y;\n    entity.fUseWeapon = vUnpacked3y.x;\n    entity.fHaveShotgun = vUnpacked3y.y;\n    entity.fTookDamage = vUnpacked3z.x;\n    entity.iEvent = int(vUnpacked3z.y);\n    entity.fPitch = vData3.w;\n    \n    return entity;\n}\n\nvoid Entity_Store( Entity entity, inout vec4 fragColor, in vec2 fragCoord )\n{\n    if ( !Entity_IdValid( entity.iId ) ) \n        return;\n\n    float fPacked0 = BytePack3( vec3(entity.iType, entity.iSubType, entity.iSectorId ) + 1. );\n\n    entity.fHealth = floor( clamp( entity.fHealth, 0.0, 255.0 ) );\n    entity.fArmor = floor( clamp( entity.fArmor, 0.0, 255.0 ) );\n    float fPackedHealthAndArmor = BytePack2( vec2( entity.fHealth, entity.fArmor ) ); \n\tfloat fPackedWeaponInfo = BytePack2( vec2( entity.fUseWeapon, entity.fHaveShotgun ) );\n\tfloat fPackedEvents = BytePack2( vec2( entity.fTookDamage, entity.iEvent ) + 1. );\n    \n    ivec2 vAddress = ivec2( entity.iId, ENTITY_DATA_YPOS );\n    \n    vec4 vData0 = vec4( fPacked0, entity.iFrameFlags, entity.fTarget, entity.fTimer );    \n    vec4 vData1 = vec4( entity.vPos, entity.fYaw );\n    vec4 vData2 = vec4( entity.vVel, entity.fYawVel );\n    vec4 vData3 = vec4( fPackedHealthAndArmor, fPackedWeaponInfo, fPackedEvents, entity.fPitch );\n\n    StoreVec4( vAddress, vData0, fragColor, fragCoord );\n    vAddress.y++;\n\n    StoreVec4( vAddress, vData1, fragColor, fragCoord );\n    vAddress.y++;\n\n    StoreVec4( vAddress, vData2, fragColor, fragCoord );\n    vAddress.y++;\n\n    StoreVec4( vAddress, vData3, fragColor, fragCoord );\n    vAddress.y++;\n}\n\n///////////////////////////\n// Weapon Defs\n///////////////////////////\n\n#define WEAPON_TYPE_PISTOL\t\t0.\n#define WEAPON_TYPE_SHOTGUN\t\t1.\n#define WEAPON_TYPE_FIREBALL\t2.\n\nstruct WeaponDef\n{\n    float fWeaponType;\n    float fReloadTime;\n    int iProjectileCount;\n    float fBaseDamagePerProjectile;\n    float fRandomDamagePerProjectile;\n    float fSpread;\n};\n\nWeaponDef Weapon_GetDef( float fWeaponType, bool bEnemy )\n{\n    WeaponDef weaponDef;\n\n    if ( fWeaponType == WEAPON_TYPE_SHOTGUN )\n    {\n        weaponDef.fWeaponType = WEAPON_TYPE_SHOTGUN;\n        weaponDef.fReloadTime = 1.0;\n        weaponDef.iProjectileCount = bEnemy ? 3 : 7;\n        weaponDef.fBaseDamagePerProjectile = bEnemy ? 3.0 : 5.0;\n        weaponDef.fRandomDamagePerProjectile = bEnemy ? 12.0 : 10.0;\n        weaponDef.fSpread = radians(4.0);\n    }\n    else\n    if ( fWeaponType == WEAPON_TYPE_FIREBALL )\n    {\n        weaponDef.fWeaponType = WEAPON_TYPE_FIREBALL;\n        weaponDef.fReloadTime = 1.0;\n        weaponDef.iProjectileCount = 1;\n        weaponDef.fBaseDamagePerProjectile = 5.0;\n        weaponDef.fRandomDamagePerProjectile = 0.0;\n        weaponDef.fSpread = radians(0.0);\n    }\n    else\n    {\n        // Pistol\n        weaponDef.fWeaponType = WEAPON_TYPE_PISTOL;\n        weaponDef.fReloadTime = 0.5;\n        weaponDef.iProjectileCount = 1;\n        weaponDef.fBaseDamagePerProjectile = bEnemy ? 3.0 : 5.0;\n        weaponDef.fRandomDamagePerProjectile = bEnemy ? 12.0 : 10.0;\n        weaponDef.fSpread = bEnemy ? radians(4.0) : 0.0;\n    }\n    \n    return weaponDef;\n}\n    \n#define ENTITY_TYPE_PLAYER \t0\n\n#define ENTITY_TYPE_BARREL \t1\n#define ENTITY_SUB_TYPE_BARREL_INACTIVE\t\t\t0\n#define ENTITY_SUB_TYPE_BARREL_EXPLODING\t\t1\n#define ENTITY_SUB_TYPE_BARREL_APPLY_DAMAGE\t\t2\n\n#define ENTITY_TYPE_ITEM \t2\n#define ENTITY_SUB_TYPE_ITEM_HEALTH_BONUS \t0\n#define ENTITY_SUB_TYPE_ITEM_ARMOR_BONUS \t1\n#define ENTITY_SUB_TYPE_ITEM_SHOTGUN \t\t2\n#define ENTITY_SUB_TYPE_ITEM_STIMPACK\t\t3\n#define ENTITY_SUB_TYPE_ITEM_GREENARMOR\t\t4\n#define ENTITY_SUB_TYPE_ITEM_BLUEARMOR\t\t5\n#define ENTITY_SUB_TYPE_ITEM_MEDIKIT\t\t6\n\n#define ENTITY_TYPE_DECORATION 3\n#define ENTITY_SUB_TYPE_DECORATION_BLOODY_MESS\t\t\t0\n#define ENTITY_SUB_TYPE_DECORATION_DEAD_TROOPER\t\t\t1\n#define ENTITY_SUB_TYPE_DECORATION_DEAD_SERGEANT\t\t2\n#define ENTITY_SUB_TYPE_DECORATION_DEAD_IMP\t\t\t\t3\n#define ENTITY_SUB_TYPE_DECORATION_TALL_TECHNO_PILLAR\t4\n#define ENTITY_SUB_TYPE_DECORATION_FLOOR_LAMP\t\t\t5\n\n#define ENTITY_TYPE_ENEMY\t4\n#define ENTITY_SUB_TYPE_ENEMY_TROOPER \t\t0\n#define ENTITY_SUB_TYPE_ENEMY_IMP \t\t\t1\n#define ENTITY_SUB_TYPE_ENEMY_SERGEANT \t\t2\n\n#define ENTITY_TYPE_BULLET 5\n#define\tENTITY_SUB_TYPE_BULLET_WALL\t\t\t0\n#define\tENTITY_SUB_TYPE_BULLET_FLESH\t\t1\n\n#define ENTITY_TYPE_DOOR 6\n\n#define ENTITY_TYPE_PLATFORM 7\n\n#define ENTITY_TYPE_FIREBALL 8\n#define ENTITY_SUB_TYPE_FIREBALL 0\n#define ENTITY_SUB_TYPE_FIREBALL_IMPACT 1\n\n\n#define ENTITY_FRAME_FLAG_FIRE_WEAPON\t\t1\n#define ENTITY_FRAME_FLAG_DROP_ITEM\t\t\t2\n\n\n#define ENEMY_STATE_IDLE\t\t\t\t0\n#define ENEMY_STATE_PAIN\t\t\t\t1\n#define ENEMY_STATE_WALK_RANDOM\t\t\t2\n#define ENEMY_STATE_WALK_TO_TARGET\t\t3\n#define ENEMY_STATE_STAND\t\t\t\t4\n#define ENEMY_STATE_FIRE\t\t\t\t5\n#define ENEMY_STATE_DIE\t\t\t\t\t6\n\n\n#define EVENT_HEALTH_BONUS \t1\n#define EVENT_ARMOR_BONUS \t2\n#define EVENT_SHOTGUN \t\t3\n#define EVENT_STIMPACK\t\t4\n#define EVENT_GREENARMOR\t5\n#define EVENT_BLUEARMOR\t\t6\n#define EVENT_MEDIKIT\t\t7\n#define EVENT_DIED\t\t\t8\n\n#define MESSAGE_NONE\t\t\t-1\n#define MESSAGE_HEALTH_BONUS \t0\n#define MESSAGE_ARMOR_BONUS \t1\n#define MESSAGE_SHOTGUN \t\t2\n#define MESSAGE_STIMPACK\t\t3\n#define MESSAGE_GREENARMOR\t\t4\n#define MESSAGE_BLUEARMOR\t\t5\n#define MESSAGE_MEDIKIT\t\t\t6\n#define MESSAGE_HUD_TEXT\t\t7\n#define MESSAGE_CHOOSE_SKILL\t8\n#define MESSAGE_SKILL_1\t\t\t9\n#define MESSAGE_SKILL_2\t\t\t10\n#define MESSAGE_SKILL_3\t\t\t11\n#define MESSAGE_SKILL_4\t\t\t12\n#define MESSAGE_SKILL_5\t\t\t13\n#define MESSAGE_HANGAR\t\t\t14\n#define MESSAGE_FINISHED\t\t15\n#define MESSAGE_KILLS\t\t\t16\n#define MESSAGE_ITEMS\t\t\t17\n#define MESSAGE_SECRET\t\t\t18\n#define MESSAGE_TIME\t\t\t19\n#define MESSAGE_SELECT\t\t\t20\n#define MESSAGE_COUNT\t\t\t21\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}