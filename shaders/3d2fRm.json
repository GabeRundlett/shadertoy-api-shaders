{
    "Shader": {
        "info": {
            "date": "1589743752",
            "description": "Iterated inversion & reflection makes nice patterns. Use mouse to move free inversion circle around.",
            "flags": 16,
            "hasliked": 0,
            "id": "3d2fRm",
            "likes": 10,
            "name": "Inversive Kaleidoscope",
            "published": 3,
            "tags": [
                "kaleidoscope",
                "inversion",
                "apollonian",
                "hyperbolic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Inversive Kaleidoscope\n// mla, 2020\n//\n// <mouse>: move free inversion circle\n// c: show circles\n// l: show lines\n// m: mouse\n////////////////////////////////////////////////////////////////////////////////\n\nint P = 7;\nvec3 getcolor(vec2 z0, vec2 w) {\n  z0 += 1e-2;\n  vec2 z = z0;\n  float r2 = 2.0-cos(time);\n  float theta = PI/float(P);\n  vec2 l0 = vec2(0,1);\n  vec2 l1 = vec2(sin(theta),-cos(theta));\n  vec3 c0 = vec3(0,0,r2);\n  vec3 c1 = vec3(w,1.0);\n  int i, N = 40;\n  for (i = 0; i < N; i++) {\n    for (int j = 0; j < P; j++) {\n      if (dot(z,l0) < 0.0) z = reflect(z,l0);\n      else if (dot(z,l1) < 0.0) z = reflect(z,l1);\n      else break;\n    }\n    if (inside(z,c1)) z = invert(z,c1);\n    else if (inside(z,c0)) z = invert(z,c0);\n    else break;\n  }\n  if (i == N) return vec3(0);\n  vec3 col = vec3(1);\n  col = hsv2rgb(vec3(float(i)/10.0,1,1));\n  if (!key(CHAR_L)) {\n    vec3 ccol = vec3(0);\n    col = drawline(z,col,ccol,l0);\n    col = drawline(z,col,ccol,l1);\n    col = drawcircle(z,col,ccol,c0);\n    col = drawcircle(z,col,ccol,c1);\n  }\n  if (!key(CHAR_C)) {\n    vec3 ccol = vec3(1);\n    col = drawline(z0,col,ccol,l0);\n    col = drawline(z0,col,ccol,l1);\n    col = drawcircle(z0,col,ccol,c0);\n    col = drawcircle(z0,col,ccol,c1);\n  }\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  float AA = 2.0;\n  vec3 color = vec3(0);\n  float scale = 2.0;\n  time = iTime - 5.0;\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 z = scale*(2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec2 w = vec2(2.0,0.25)+vec2(-0.25*sin(0.618*time),0.5*cos(0.618*time));\n      if (iMouse.x > 0.0 && !key(CHAR_M)) w = scale*(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      color += getcolor(z,w);\n    }\n  }\n  color /= AA*AA;\n  color = pow(color,vec3(0.4545));\n  fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415927;\nfloat time;\n\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\nconst int CHAR_C = 67;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_X = 88;\n\nvec2 invert(vec2 z, vec3 c) {\n  z -= c.xy;\n  float k = c.z/dot(z,z);\n  z *= k;\n  z += c.xy;\n  return z;\n}\n\nbool inside(vec2 z, vec3 c) {\n  z -= c.xy;\n  return dot(z,z) < abs(c.z);\n}\n\nfloat kfact = 0.8;\nfloat lwidth = 0.01;\nvec3 draw(float d, vec3 col, vec3 ccol, float pwidth) {\n  pwidth *= 0.1; //0.25;\n  col = mix(ccol,col,mix(1.0,smoothstep(0.5*lwidth,max(pwidth,lwidth),d),kfact));\n  //col = mix(ccol,col,mix(1.0,smoothstep(-pwidth,pwidth,d-lwidth),kfact));\n  return col;\n\n}\n\nvec3 drawcircle(vec2 z, vec3 col, vec3 ccol, vec3 circle) {\n  float d = abs(length(z-circle.xy) - sqrt(abs(circle.z)));\n  return draw(d,col,ccol,fwidth(z.x));\n}\n\nvec3 drawline(vec2 z, vec3 col, vec3 ccol, vec2 line) {\n  float d = abs(dot(z,line));\n  return draw(d,col,ccol,fwidth(z.x));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}