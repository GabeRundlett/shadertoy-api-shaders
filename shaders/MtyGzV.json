{
    "Shader": {
        "info": {
            "date": "1475652425",
            "description": "it has higher PSNR (>40db)on my custom offline decoder.The buffer is 16bit half float,so I have to down quality.it's 1bpp.The next ShadertoyTC II version,surport in 32 float buffer,best in opengles 3.0,Special Digit Encode,better filter,Bi-approximation..",
            "flags": 32,
            "hasliked": 0,
            "id": "MtyGzV",
            "likes": 27,
            "name": "Candy Cat[ShadertoyTC]",
            "published": 3,
            "tags": [
                "texture",
                "compression",
                "photo",
                "image",
                "life",
                "cat",
                "love",
                "wavelet",
                "ycocg",
                "shadertoytc",
                "hwt",
                "ihwt"
            ],
            "usePreview": 0,
            "username": "834144373",
            "viewed": 2088
        },
        "renderpass": [
            {
                "code": "/******************************************************************************\n======ShadertoyTC (version I) created by 834144373(恬纳微晰)===========\n\nAbout: 1.Buffer A-C is used to \"Fast Store Data\",with two mini-micro functions \"A()\" & \"B()\",the data \n\t\thas been already arranged by IZ-cuve.\n\t   2.Buffer D is \"ShadertoyTC Decoder\",\nSomething: GPU texture compression(TC) is defferent from the image compression.\nLisence:1.Fist Base on CC-3.0 by-nc-sa(署名-非商业性使用-相同方式共享)\n\t\t2.You must be allowed under my permission for commercial.:D\n*******************************************************************************/\n/*\n\t========================Knowledge==================\nMain Reference:\n\t1.YCoCg(-R)Color Space Conversion on the GPU --Dieter Van Rijsselbergen\n\t2.Texture Compression using Wavelet Decomposition 2012 --Pavlos Mavridis & Georios Papaioannou\n\t3.GPU Pro 5:Adaptive Scalable Texture Compression --Stacy Smith\n\t4.Texture Compression using Low-Frequency Signal Modulation --Simon Fenney\nKnowledge Reference:\n\t1.http://media.cs.tsinghua.edu.cn/~ahz/digitalimageprocess/chapter14/chapt14_ahz.htm\n\t2.https://en.wikipedia.org/wiki/Discrete_wavelet_transform\n\t3.iquilezles.org/articles/wavelet\nSome Encode Reference:\n\t1.ARM ASTC Specification \n\t2.PVRTC Specification\n*/\n\n//=================Unicode Font===============================================\n/*\n\thttps://www.shadertoy.com/view/XsGXzt by 834144373(恬纳微晰)\n*/\nvec2 FontUV = vec2(0.);\nint num4row = int(1.);\n#define start_pos(where_x,where_y) FontUV.x=FontBaseUV.x-=where_x;FontUV.y-=16.*(float(num4row)-1.)-where_y;\nint adjacency_width = 2;\nint adjacency_height= 0;\n#define first_word_pos(with) FontUV.x-= float(15+adjacency_width)*float(with);\nstruct DataFont{\n    vec3 a,c;\n    vec2 b,d;\n};\nDataFont F;\n#define Font FontCol+=font(F);\n#define next FontUV.x = FontBaseUV.x;FontUV.y += 16.+ float(adjacency_height);\n#define Next(step) FontUV.x = FontBaseUV.x;FontUV.y += 16.*float(step)+ float(adjacency_height);\n#define T F.a=vec3(0x80,0xff,0x427f00);F.b=vec2(0x42c242,0x7f42);F.c=vec3(0x700,0x408ff,0x242400);F.d=vec2(0x447f24,0x444c4);Font\n#define N F.a=vec3(0x44e644,0x4848,0x2010ff);F.b=vec2(0x8000c0,0xfe0162);F.c=vec3(0x350c04,0x8c6,0x8080f);F.d=vec2(0x8ff08,0xf0808);Font\n#define W F.a=vec3(0xff0080,0x7c0201,0x7c4040);F.b=vec2(0xe61108,0x1e618);F.c=vec3(0x231108,0x7901cc,0x9f909);F.d=vec2(0x1b0479,0x80fe8);Font\n#define X F.a=vec3(0x808fc,0x8060fc,0x4180ff);F.b=vec2(0xfe,0xff);F.c=vec3(0x21213f,0x9083f,0x8ff);F.d=vec2(0x22223f,0x24243);Font\n\nfloat Bin(float n,float _u,float v,inout float c){\n    return (_u>=0. && v>=0. && _u<=2. && v<=7.) ? mod(floor(n/(exp2(8.*_u+v))),2.) : c;\n}\nfloat arrayBin(DataFont f){\n    float c = 0.,o = 3., y = FontUV.y-8.;\n    c = Bin(f.a.r,FontUV.x,FontUV.y,c);c = Bin(f.c.r,FontUV.x,y,c);\n    FontUV.x -= o;c = Bin(f.a.g,FontUV.x,FontUV.y,c);c = Bin(f.c.g,FontUV.x,y,c);\n    FontUV.x -= o;c = Bin(f.a.b,FontUV.x,FontUV.y,c);c = Bin(f.c.b,FontUV.x,y,c);\n    FontUV.x -= o;c = Bin(f.b.r,FontUV.x,FontUV.y,c);c = Bin(f.d.r,FontUV.x,y,c);\n    FontUV.x -= o;c = Bin(f.b.g,FontUV.x,FontUV.y,c);c = Bin(f.d.g,FontUV.x,y,c);\n    return c;\n}\nfloat font(DataFont f){\n    FontUV.x -= 3.+ float(adjacency_width);\n    return arrayBin(f);\n}\n\n//=================Part VI Convert decode=====================================\nconst float offset = 128.;\nconst vec3 offsetDetail = vec3(0,8,6);\nvec3 YCoCg2RGB(vec3 xyz){\n\tvec3 rgb = vec3(0.);\n    xyz += offsetDetail;\n    float tmp_co = xyz.y - offset;\n    float tmp_cg = xyz.z - offset;\n    rgb = vec3(\n    \txyz.x + tmp_co - tmp_cg,\n        xyz.x + tmp_cg,\n        xyz.x - tmp_co - tmp_cg\n    );\n    return rgb;\n}\nvoid mainImage( out vec4 c, in vec2 u )\n{\n    c -= c;\n    vec3 R = iResolution;\n    vec2 uv = vec2(u.x,R.y-u.y);\n\tuv -= R.xy*vec2(0.27,0.1);\n    uv /= R.y*R.xy/256.*1.6;\n    float mark = 0.;\n    if(uv.x>0.&& uv.y>0.){\n    \tif(iFrame > 6)\n            c = texture(iChannel3,uv);\n        if(uv.x<(0.16/(R.y/256./1.7333)) && uv.y<(0.284/(R.y/256./1.738)))\n            mark = 1.;\n        else if(uv.x<(1./(R.y/1.8)) || uv.y<(1./(R.y/2.7)))\n            c = vec4(0.);\n        else\n            c *= vec4(.2,.5,1.2,0.);\n    }\n\tc.rgb = YCoCg2RGB(c.rgb)/256.;\n    float FontCol = 0.;\n    vec2 FontBaseUV = floor(u-vec2(R.x-120.,12.));\n\tFontUV = FontBaseUV;\n    start_pos(0.,0.);\n    Next(0)\n        first_word_pos(0)\n        T N W X\n    c = max(vec4(FontCol),c);\n\tvec3 backgroud = vec3(0.8177615);\n    if( !(c.b-c.r*4.<0.1 && mark==1.)){\n        c.rgb = c.bbb-c.rrr*3.;\n    \tc.rgb = c.rgb*backgroud*1.087654;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 cc = vec4(0);\nfloat i = 0.;\nfloat index = 0.;\nvec2 uu = vec2(0);\nvec2 chunk_u = vec2(0);\nvoid A(vec4 data){\n    if(i++ == index){\n        if(chunk_u.x == 0.)\n        \tcc = floor(data/2048.);\n        else if(chunk_u.x == 1.)\n        \tcc = mod(data,2048.);\n    }\n}\n\nvoid mainImage( out vec4 c, in vec2 u )\n{\n\tc-=c;\n    uu = floor(u/4.);\n    chunk_u = mod(floor(u),4.);\n    chunk_u.x = chunk_u.y*4.+chunk_u.x;\n    if(uu.x>31.||uu.y>10.){c = vec4(0.);return;}\n    if(iFrame > 10){discard; return;}\n    index = uu.y*32.+uu.x;\n\n\tA(vec4(0,1179663,0,-1978717));\n\tA(vec4(0,663566,0,-1978709));\n\tA(vec4(0,14,2304,-1987069));\n\tA(vec4(0,1835022,0,-1978879));\n\tA(vec4(0,3407886,0,-1986901));\n\tA(vec4(0,3014669,0,-1986817));\n\tA(vec4(0,2363409,0,-1978724));\n\tA(vec4(0,2359433,0,-2231893));\n\tA(vec4(0,3407882,0,-1953898));\n\tA(vec4(0,2494473,0,1937493));\n\tA(vec4(0,4358,0,1945365));\n\tA(vec4(131072,1449995,0,-1945600));\n\tA(vec4(0,393228,262144,-1700009));\n\tA(vec4(262208,1048717,4077860,1970262));\n\tA(vec4(1310974,1441902,1753855,-1962070));\n\tA(vec4(1704111,1966188,3910267,1978774));\n\tA(vec4(2621633,45056,4194245,1924605));\n\tA(vec4(255,65543,4177919,1398271));\n\tA(vec4(131583,81923,4194303,1398271));\n\tA(vec4(794879,81923,4194303,1398271));\n\tA(vec4(255,81923,4194303,1398271));\n\tA(vec4(255,45059,4194303,1398271));\n\tA(vec4(255,40963,4194303,-333311));\n\tA(vec4(255,32771,4194303,4090218));\n\tA(vec4(262335,28675,4194303,-21930));\n\tA(vec4(655546,24579,3139263,-1353130));\n\tA(vec4(393465,36866,2796154,-2796202));\n\tA(vec4(524543,20482,4100481,1727146));\n\tA(vec4(393450,28672,3777593,1420031));\n\tA(vec4(524319,32899,442758,-1420031));\n\tA(vec4(262373,24580,3422521,2775807));\n\tA(vec4(131163,24707,1825750,-1414895));\n\tA(vec4(0,1179789,0,1978541));\n\tA(vec4(0,17,2623492,-2215509));\n\tA(vec4(131092,48,3123786,2223958));\n\tA(vec4(0,15,3115072,-2231637));\n\tA(vec4(131072,15,2714176,-2240111));\n\tA(vec4(0,15,2246720,-1978453));\n\tA(vec4(131072,15,674368,-2231973));\n\tA(vec4(0,1441807,0,1970367));\n\tA(vec4(131072,1183760,0,2223936));\n\tA(vec4(0,131086,5120,-2240510));\n\tA(vec4(131072,14,10884,-1978623));\n\tA(vec4(0,131087,1381696,2232319));\n\tA(vec4(131088,142,2138368,2224218));\n\tA(vec4(659705,786479,782335,2232128));\n\tA(vec4(107,655567,263173,1961897));\n\tA(vec4(1311230,1966127,3750202,1970582));\n\tA(vec4(1703999,61443,4189165,-3059374));\n\tA(vec4(1442047,77827,1747647,1529169));\n\tA(vec4(659711,65539,355007,-3844778));\n\tA(vec4(524543,69635,1386,1398101));\n\tA(vec4(655615,36994,4138,1747690));\n\tA(vec4(131327,49154,1403519,1922901));\n\tA(vec4(393471,36867,2714303,1419946));\n\tA(vec4(786687,32771,2796223,-2730495));\n\tA(vec4(1048747,24579,326283,3844858));\n\tA(vec4(524373,28672,4183061,2796287));\n\tA(vec4(524394,28673,2785621,1398271));\n\tA(vec4(524453,20480,1658937,2796287));\n\tA(vec4(655573,32769,1052725,4194303));\n\tA(vec4(262335,28675,4177919,-2862954));\n\tA(vec4(1048790,36867,3924730,4128190));\n\tA(vec4(131179,36867,4194283,2808538));\n\tA(vec4(0,1179662,0,-1978717));\n\tA(vec4(131232,131088,3414056,-1962325));\n\tA(vec4(85,131086,1397776,-1978708));\n\tA(vec4(169,131118,2532709,2256533));\n\tA(vec4(86,76,3115938,-2002539));\n\tA(vec4(131157,48,617066,2232185));\n\tA(vec4(21,176,64,-1962320));\n\tA(vec4(131072,1573136,3683344,-1962325));\n\tA(vec4(655381,1445999,1152731,-1970501));\n\tA(vec4(266240,917552,2444160,-1962070));\n\tA(vec4(0,929808,16384,2223961));\n\tA(vec4(131152,16,5140,1962218));\n\tA(vec4(149,393230,3761445,2232319));\n\tA(vec4(131103,393327,181955,-1970347));\n\tA(vec4(16,15,1251913,-2232570));\n\tA(vec4(131300,786575,4132,1970410));\n\tA(vec4(111,16386,1316165,1924445));\n\tA(vec4(1,4096,4095552,1398101));\n\tA(vec4(0,4096,2797504,1398101));\n\tA(vec4(0,4096,1398080,-1414549));\n\tA(vec4(0,0,174976,3108719));\n\tA(vec4(0,0,3127936,-2472442));\n\tA(vec4(0,4096,1480064,1397844));\n\tA(vec4(0,4096,1419584,1398101));\n\tA(vec4(216,4096,354900,1398101));\n\tA(vec4(255,8193,349565,2796202));\n\tA(vec4(393471,4099,4168354,-3779242));\n\tA(vec4(131167,16387,1054047,-2730729));\n\tA(vec4(262149,12290,2453434,-2862079));\n\tA(vec4(524393,4099,345120,2796202));\n\tA(vec4(262209,20480,1754496,2472378));\n\tA(vec4(393466,28676,16421,2746858));\n\tA(vec4(0,131086,2812560,-1978717));\n\tA(vec4(224,131088,3844473,2224021));\n\tA(vec4(131319,131120,382077,-2223700));\n\tA(vec4(131167,131183,345439,-1962133));\n\tA(vec4(166,131121,2495526,1986159));\n\tA(vec4(22,80,166786,-1978016));\n\tA(vec4(0,788240,0,1970347));\n\tA(vec4(131248,921614,1781550,2232150));\n\tA(vec4(393217,917680,2700649,-1962154));\n\tA(vec4(786582,1445968,4101841,2223978));\n\tA(vec4(131083,655407,2719114,-1970570));\n\tA(vec4(0,8208,16384,2224042));\n\tA(vec4(131284,13,1315893,1978538));\n\tA(vec4(6,79,2246762,-2240342));\n\tA(vec4(131072,15,1398133,1970266));\n\tA(vec4(0,46,2246720,1970666));\n\tA(vec4(131072,0,1731156,1924445));\n\tA(vec4(184,1,3045502,-2731429));\n\tA(vec4(85,4098,2528661,1398101));\n\tA(vec4(85,1,1918813,3976232));\n\tA(vec4(131094,1,2718313,2554046));\n\tA(vec4(170,4098,1217702,-2097089));\n\tA(vec4(85,1,1079133,4042671));\n\tA(vec4(85,4098,1480085,-2468010));\n\tA(vec4(85,4097,1135957,2468522));\n\tA(vec4(21,1,4107178,-2484906));\n\tA(vec4(190,2,2144942,1397845));\n\tA(vec4(0,4096,1480064,-2665638));\n\tA(vec4(0,4096,1398080,2796202));\n\tA(vec4(254,4096,2446697,1801977));\n\tA(vec4(105,0,2263961,-2730411));\n\tA(vec4(131137,0,1721636,2812650));\n\tA(vec4(95,131182,1398229,-1978717));\n\tA(vec4(131093,47,1332564,1961742));\n\tA(vec4(131159,47,349525,-1970757));\n\tA(vec4(87,47,4134004,-2231831));\n\tA(vec4(170,112,1034927,2010500));\n\tA(vec4(131090,48,690505,-1994431));\n\tA(vec4(0,1572878,0,-2240254));\n\tA(vec4(131180,1179664,1776411,-1970275));\n\tA(vec4(1048656,1310892,426305,2264917));\n\tA(vec4(1441793,2359500,1462639,1986405));\n\tA(vec4(528421,1183792,760794,2223878));\n\tA(vec4(131078,393262,3754311,1978453));\n\tA(vec4(84,15,2361378,2232314));\n\tA(vec4(131157,47,1747562,1961829));\n\tA(vec4(85,45,3033154,2240426));\n\tA(vec4(131157,46,1665642,1970410));\n\tA(vec4(85,1,1930321,1924445));\n\tA(vec4(170,4098,1152422,4128510));\n\tA(vec4(85,1,4028253,1726038));\n\tA(vec4(170,4098,1152422,2775321));\n\tA(vec4(85,1,1918801,-2179653));\n\tA(vec4(131242,2,2713962,3103423));\n\tA(vec4(131162,2,1747609,2468282));\n\tA(vec4(85,1,853117,2188903));\n\tA(vec4(131241,2,2800238,3532201));\n\tA(vec4(169,4098,2458789,-2883434));\n\tA(vec4(131158,2,1747866,-1505977));\n\tA(vec4(85,1,1922173,-3794069));\n\tA(vec4(170,3,1403583,-2796143));\n\tA(vec4(170,3,2247343,3864822));\n\tA(vec4(131158,1,2779753,-3125162));\n\tA(vec4(149,1,3307634,2812650));\n\tA(vec4(105,131150,2528405,-1978717));\n\tA(vec4(170,131119,1480018,1961982));\n\tA(vec4(234,131119,2708821,1970266));\n\tA(vec4(170,131150,2516325,2232169));\n\tA(vec4(170,131150,3770778,2002420));\n\tA(vec4(131114,78,608906,-2223743));\n\tA(vec4(0,1311629,0,1716585));\n\tA(vec4(262252,1183757,2829099,2224002));\n\tA(vec4(1048666,1573070,1156518,1970426));\n\tA(vec4(1573053,1966187,3408874,-2240169));\n\tA(vec4(1835079,2101292,2549345,-2019478));\n\tA(vec4(224,528432,1677993,2215918));\n\tA(vec4(17,397393,655953,1961881));\n\tA(vec4(90,46,80419,2240511));\n\tA(vec4(186,131151,2168230,1962155));\n\tA(vec4(85,47,3209041,1970645));\n\tA(vec4(170,4098,1410454,1924445));\n\tA(vec4(131305,2,1727366,4128510));\n\tA(vec4(255,4099,3586746,-2863019));\n\tA(vec4(131247,3,2488744,-3844714));\n\tA(vec4(84,4097,1381461,2154720));\n\tA(vec4(85,1,4020033,2730607));\n\tA(vec4(85,0,3144352,-2796201));\n\tA(vec4(170,4098,1738134,3799782));\n\tA(vec4(131242,2,3058602,-4172714));\n\tA(vec4(154,2,10364,2401508));\n\tA(vec4(86,2,15008,1398359));\n\tA(vec4(106,4098,1430,3516777));\n\tA(vec4(0,24576,0,2750782));\n\tA(vec4(131152,0,1583144,-2797247));\n\tA(vec4(85,1,3033186,-2730666));\n\tA(vec4(131221,1,2718314,1430997));\n\tA(vec4(131159,46,1398085,-1978717));\n\tA(vec4(85,131088,1398101,2223886));\n\tA(vec4(85,131119,1398101,2232216));\n\tA(vec4(131157,44,21844,1962110));\n\tA(vec4(131178,45,5781,2232144));\n\tA(vec4(131109,46,263749,-1986709));\n\tA(vec4(0,3985,0,2215598));\n\tA(vec4(262312,1835023,3947821,1970340));\n\tA(vec4(917578,921677,772034,1961915));\n\tA(vec4(786597,1704204,1381476,2207652));\n\tA(vec4(1310806,2228332,2712959,-1945493));\n\tA(vec4(1056879,1441871,1662622,2232233));\n\tA(vec4(116,524429,1061944,1970173));\n\tA(vec4(131088,798735,1233088,1962150));\n\tA(vec4(131232,16,5140,2224026));\n\tA(vec4(131226,46,1365,1970410));\n\tA(vec4(85,4098,2878118,1924445));\n\tA(vec4(165,4098,2796198,-2993577));\n\tA(vec4(131201,4098,1350037,-2796202));\n\tA(vec4(23,4097,1398101,4140863));\n\tA(vec4(84,4097,1480021,2861929));\n\tA(vec4(169,4097,87397,1813417));\n\tA(vec4(170,4098,5477,-3517154));\n\tA(vec4(170,2,1358766,-4173222));\n\tA(vec4(41,4098,1409,-4177662));\n\tA(vec4(0,12312,0,-3733672));\n\tA(vec4(0,41092,3674112,3899029));\n\tA(vec4(131072,28676,3604473,4042667));\n\tA(vec4(131072,20611,1086847,4193013));\n\tA(vec4(80,1,752544,3844855));\n\tA(vec4(170,4098,1119654,3713450));\n\tA(vec4(150,2,2247586,2812650));\n\tA(vec4(161,131150,2692251,-1978717));\n\tA(vec4(131242,79,1616281,1961742));\n\tA(vec4(131242,47,1661589,1970328));\n\tA(vec4(85,131115,1398101,-1961983));\n\tA(vec4(85,131182,1398101,2232314));\n\tA(vec4(21,131118,1398093,2240347));\n\tA(vec4(131072,131085,346368,2003733));\n\tA(vec4(131568,1970574,3417128,1961918));\n\tA(vec4(1048623,1704011,2193770,1962111));\n\tA(vec4(786600,921614,1495188,1945833));\n\tA(vec4(1048666,1441964,3782288,-2207662));\n\tA(vec4(917657,1703978,2473977,1945573));\n\tA(vec4(262230,1183852,509638,1962239));\n\tA(vec4(266254,1704108,1313030,1961983));\n\tA(vec4(262144,930097,81984,2224382));\n\tA(vec4(131300,262158,10281,1970409));\n\tA(vec4(131246,8195,26283,1924445));\n\tA(vec4(131242,8194,10838,4128510));\n\tA(vec4(131077,8193,5778,2879467));\n\tA(vec4(169,8193,9573,3108863));\n\tA(vec4(131242,4098,2374271,3729577));\n\tA(vec4(131141,8194,2796522,-2812847));\n\tA(vec4(262272,8194,105189,-1331285));\n\tA(vec4(262186,2,262277,3864057));\n\tA(vec4(131072,28684,1048576,-2792366));\n\tA(vec4(131072,45056,1830772,-2796202));\n\tA(vec4(524414,49155,1074518,1441465));\n\tA(vec4(528533,45058,3913151,-2752506));\n\tA(vec4(131086,130,17543,-1726187));\n\tA(vec4(131100,16388,1114371,4062975));\n\tA(vec4(0,16384,2441216,-3670015));\n\tA(vec4(131152,0,3494932,2746600));\n\tA(vec4(96,131084,2630696,1978542));\n\tA(vec4(81,131087,3495285,-1970602));\n\tA(vec4(131238,79,1665433,2232282));\n\tA(vec4(85,131115,1398101,-1962079));\n\tA(vec4(85,131115,3626325,2215929));\n\tA(vec4(85,131116,1561941,1978538));\n\tA(vec4(22,131151,690822,2265301));\n\tA(vec4(262608,2105356,2105396,-1953787));\n\tA(vec4(1572869,2883662,1310785,2207398));\n\tA(vec4(1052734,1703981,1399054,1945450));\n\tA(vec4(786452,2228236,1397760,2011541));\n\tA(vec4(1310784,1835021,2527552,-1978474));\n\tA(vec4(921646,1835211,3829647,2207449));\n\tA(vec4(659936,1835022,2783545,1970430));\n\tA(vec4(262212,1052815,1213153,1961915));\n\tA(vec4(262145,786542,1645131,1970666));\n\tA(vec4(262144,36868,4008256,-3059374));\n\tA(vec4(393216,65536,4167296,1727146));\n\tA(vec4(524288,45184,4179264,2795946));\n\tA(vec4(262144,41216,360448,2056031));\n\tA(vec4(262208,12416,16400,-2812666));\n\tA(vec4(262313,16385,1048597,-2796459));\n\tA(vec4(262150,20489,81920,-2775722));\n\tA(vec4(262144,36868,1978368,4111865));\n\tA(vec4(393456,45186,3408007,-2467172));\n\tA(vec4(655702,65668,2619496,1749612));\n\tA(vec4(1314849,65666,3130963,-1792666));\n\tA(vec4(262224,24705,1820994,-2059966));\n\tA(vec4(0,16516,2113536,-2746857));\n\tA(vec4(524516,12288,2792055,-3059711));\n\tA(vec4(262399,12291,2698943,4194303));\n\tA(vec4(131327,20483,2467259,2812650));\n\tA(vec4(148,131086,1320996,-1978717));\n\tA(vec4(131285,47,1332565,2232214));\n\tA(vec4(131157,45,1398101,-1962238));\n\tA(vec4(85,131114,1398101,2224022));\n\tA(vec4(131242,76,1414532,-2215594));\n\tA(vec4(175,131180,1747626,1953878));\n\tA(vec4(21,131112,345413,2240233));\n\tA(vec4(262272,2752908,2105376,-2223999));\n\tA(vec4(1708276,3149999,498623,1937493));\n\tA(vec4(655531,1577067,1387118,-2215655));\n\tA(vec4(131327,1310925,83354,-1978623));\n\tA(vec4(1049086,2359469,4045094,2207563));\n\tA(vec4(2232487,2625643,2872298,1953641));\n\tA(vec4(1573103,1970287,1995575,1970351));\n\tA(vec4(791038,2105520,2694189,2224079));\n\tA(vec4(131081,1843247,6782,1970410));\n\tA(vec4(131312,20489,3947580,1924445));\n\tA(vec4(2228393,94209,1458578,2484645));\n\tA(vec4(1450238,90113,772506,1448815));\n\tA(vec4(191,49153,333118,-2795940));\n\tA(vec4(655430,40967,2101266,2796202));\n\tA(vec4(4242,32897,83931,-2796122));\n\tA(vec4(131082,20613,670768,-2796261));\n\tA(vec4(31,24835,1281,1419931));\n\tA(vec4(393616,40965,3681598,1922389));\n\tA(vec4(1183993,57347,2378598,2796535));\n\tA(vec4(524463,28675,284719,1376426));\n\tA(vec4(393307,20483,1977263,-2472097));\n\tA(vec4(393445,20482,2764093,2729637));\n\tA(vec4(262145,16385,4172372,-3125167));\n\tA(vec4(131156,8192,4189850,-2796139));\n\tA(vec4(131221,12289,4192933,2812650));\n\tA(vec4(144,131086,2364436,-1978717));\n\tA(vec4(0,48,1931075,-1986489));\n\tA(vec4(83,131114,1398101,2207653));\n\tA(vec4(131242,79,2792089,1945770));\n\tA(vec4(85,131116,1393989,-1945941));\n\tA(vec4(131157,47,1922391,2199193));\n\tA(vec4(131114,75,625295,1978474));\n\tA(vec4(64,1835788,4112,-1994581));\n\tA(vec4(1585439,3407977,2878423,-2223801));\n\tA(vec4(524368,921611,3048596,-1970010));\n\tA(vec4(659476,1573132,3864933,2207573));\n\tA(vec4(1581309,2359404,2593371,1945381));\n\tA(vec4(1179659,2494668,2794816,-1962154));\n\tA(vec4(1052853,2097167,2709145,2224047));\n\tA(vec4(655697,2494636,2454837,-2248277));\n\tA(vec4(131233,274542,365190,1970666));\n\tA(vec4(4144,20480,1988873,1924445));\n\tA(vec4(393368,53268,1040,-3092078));\n\tA(vec4(3018847,106499,772055,3471588));\n\tA(vec4(1577029,82050,497300,-2861994));\n\tA(vec4(1052701,81926,22091,1398101));\t\n    \n    c = cc;\n} ",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 cc = vec4(0);\nfloat i = 0.;\nfloat index = 0.;\nvec2 uu = vec2(0);\nvec2 chunk_u = vec2(0);\nvoid A(vec4 data){\n    if(i++ == index){\n        if(chunk_u.x == 0.)\n        \tcc = floor(data/2048.);\n        else if(chunk_u.x == 1.)\n        \tcc = mod(data,2048.);\n    }\n}\nvoid B(vec3 data){\n    if(i++ == index){\n        if(chunk_u.x == 0.)\n        \tcc.rgb = floor(data/2048.);\n        else if(chunk_u.x == 1.)\n            cc.rgb = mod(data,2048.);\n    }\n}\n\nvoid mainImage( out vec4 c, in vec2 u )\n{\n    c-=c;\n    uu = floor(u/4.);\n    chunk_u = mod(floor(u),4.);\n    chunk_u.x = chunk_u.y*4.+chunk_u.x;\n    if(uu.x>31.){c = vec4(0.);return;}\n    if(iFrame > 10) {discard; return;}\n    index = uu.y*32.+uu.x-341.;\n\t\n\tA(vec4(655360,40964,3750464,-2796202));\n\tA(vec4(266281,53377,426050,1414485));\n\tA(vec4(262144,53252,132112,-2056030));\n\tA(vec4(262148,36869,2631973,1419689));\n\tA(vec4(262357,41093,213445,2056026));\n\tA(vec4(393223,8320,1057825,-3783081));\n\tA(vec4(104,16390,3421541,3794597));\n\tA(vec4(393306,16387,2549466,2775706));\n\tA(vec4(655557,8193,1398101,-4173743));\n\tA(vec4(131327,20483,1419899,1398101));\n\tA(vec4(131327,16387,2468539,-1431274));\n\tA(vec4(160,12,2963821,-1970350));\n\tA(vec4(170,131147,1481114,2215535));\n\tA(vec4(85,131116,1398101,1954036));\n\tA(vec4(84,45,4020035,-1945535));\n\tA(vec4(85,46,2094463,-2207617));\n\tA(vec4(169,131149,104097,1945434));\n\tA(vec4(131113,77,2442,-2207385));\n\tA(vec4(0,3277709,0,-2019243));\n\tA(vec4(1839534,3018800,3137451,-2002513));\n\tA(vec4(1442037,2228366,1318969,-2256686));\n\tA(vec4(1966573,2625577,3429018,1683449));\n\tA(vec4(2101423,2621484,3834127,-1970431));\n\tA(vec4(1445946,1839147,519786,2215594));\n\tA(vec4(1048806,2228558,1078522,1961995));\n\tA(vec4(1180117,1208396,2207921,1962069));\n\tA(vec4(0,1314828,1967120,1962389));\n\tA(vec4(135225,45064,2959901,1683182));\n\tA(vec4(655680,94217,1069072,-2468463));\n\tA(vec4(2625823,106499,2878427,-2796265));\n\tA(vec4(2883630,98306,3193259,-4128767));\n\tA(vec4(1048580,86146,4190150,3844538));\n\tA(vec4(270568,20484,1175534,4177190));\n\tA(vec4(917638,81929,2205040,2385001));\n\tA(vec4(790555,61699,692202,16613));\n\tA(vec4(393301,45061,1064213,396223));\n\tA(vec4(393273,32897,1220792,1381417));\n\tA(vec4(84,20481,514713,3865081));\n\tA(vec4(262368,16384,3813245,1809071));\n\tA(vec4(262299,8194,2533798,-2796202));\n\tA(vec4(262293,8192,2140841,-3125087));\n\tA(vec4(80,4096,3075668,-3844693));\n\tA(vec4(149,12289,3865253,2790805));\n\tA(vec4(164,131084,2434085,1945757));\n\tA(vec4(85,45,1931101,-1954133));\n\tA(vec4(149,131149,1152409,-1954133));\n\tA(vec4(169,131118,2446678,2207646));\n\tA(vec4(170,131117,2451049,1953962));\n\tA(vec4(131113,78,1018510,1945854));\n\tA(vec4(0,2957,0,1945627));\n\tA(vec4(524672,3145740,3095864,2215744));\n\tA(vec4(1577135,3281005,1147270,2215746));\n\tA(vec4(1704050,2232334,692013,1970409));\n\tA(vec4(1573013,2490574,2102569,2215931));\n\tA(vec4(1192175,1704012,3059119,2215850));\n\tA(vec4(229,655753,4148,1961898));\n\tA(vec4(397399,3014768,2714026,2232479));\n\tA(vec4(266567,1573106,16516,2215618));\n\tA(vec4(528825,2232492,4095614,1970410));\n\tA(vec4(244,45193,3455100,-2993838));\n\tA(vec4(397633,73862,3795413,1398101));\n\tA(vec4(3276975,118787,247783,1398101));\n\tA(vec4(3408005,106497,526397,-2747561));\n\tA(vec4(3145983,106499,1401215,-2796186));\n\tA(vec4(1851791,86146,3926879,-1747626));\n\tA(vec4(131104,20608,1865858,-3844843));\n\tA(vec4(262180,40970,25749,3795777));\n\tA(vec4(921664,57473,2851530,-4194214));\n\tA(vec4(262230,28677,1049626,2780074));\n\tA(vec4(397342,49285,757343,3074282));\n\tA(vec4(244,8192,14393,-4112299));\n\tA(vec4(175,4099,2375679,2796202));\n\tA(vec4(131073,1,1425472,4194287));\n\tA(vec4(131326,4096,174126,-2796138));\n\tA(vec4(131327,4097,1049973,2746858));\n\tA(vec4(164,45,2701870,1978797));\n\tA(vec4(170,131149,2524566,-1945514));\n\tA(vec4(131177,78,1423786,2207558));\n\tA(vec4(84,131117,2534037,1945558));\n\tA(vec4(131152,14,1398101,-1953963));\n\tA(vec4(131134,131181,428746,2207558));\n\tA(vec4(0,1180046,1048576,2207253));\n\tA(vec4(786685,1835053,1556351,-1945497));\n\tA(vec4(1311110,2097198,4094325,2207662));\n\tA(vec4(393242,1577196,2793430,1945597));\n\tA(vec4(1704277,2621454,4192953,1954031));\n\tA(vec4(790702,2101355,2812629,1945594));\n\tA(vec4(262147,262380,426050,1962218));\n\tA(vec4(532905,2101263,4095534,1961823));\n\tA(vec4(0,1442064,3433536,2224042));\n\tA(vec4(672185,2363471,4194303,1970645));\n\tA(vec4(262339,53507,1085552,-2005401));\n\tA(vec4(655847,98309,3699893,-3865338));\n\tA(vec4(3407887,106499,1305539,-3713530));\n\tA(vec4(3276816,102400,345413,4062713));\n\tA(vec4(3014720,102400,4011312,2861995));\n\tA(vec4(2883775,98307,3627771,-2408122));\n\tA(vec4(1445991,73856,3141591,-2779738));\n\tA(vec4(659776,41088,4160784,-2224432));\n\tA(vec4(43,16385,3059333,-3848634));\n\tA(vec4(655488,36864,4112312,130557));\n\tA(vec4(528635,65542,248814,-3124207));\n\tA(vec4(131072,3456,0,-4194303));\n\tA(vec4(393376,8192,1583164,4061946));\n\tA(vec4(262383,4098,17834,4194111));\n\tA(vec4(2,8193,4188886,-3664041));\n\tA(vec4(132,8193,4177577,1430740));\n\tA(vec4(164,262156,1315860,-1978542));\n\tA(vec4(131077,131118,2709588,2207663));\n\tA(vec4(173,131148,3844799,1953893));\n\tA(vec4(131226,131150,174518,-1945834));\n\tA(vec4(131158,131148,4176554,-2215771));\n\tA(vec4(42,131149,2088927,1970240));\n\tA(vec4(262352,1048970,1052704,-2231893));\n\tA(vec4(1577055,2883693,3602407,-2207238));\n\tA(vec4(47,401645,1672642,1945945));\n\tA(vec4(131156,2097295,65536,2190997));\n\tA(vec4(249,1314988,754950,-1945771));\n\tA(vec4(262315,3408014,1392640,1953663));\n\tA(vec4(262294,4075663,98320,-2232318));\n\tA(vec4(262650,2490575,3685951,-1970527));\n\tA(vec4(397778,2621551,4194298,-1970501));\n\tA(vec4(2228415,2625645,454890,1978602));\n\tA(vec4(925696,61450,2777797,1683118));\n\tA(vec4(1835508,94213,4145086,-3209642));\n\tA(vec4(3407887,114691,1229506,-1091753));\n\tA(vec4(3014677,110593,1738053,3041962));\n\tA(vec4(3145916,102400,4174890,2796202));\n\tA(vec4(3145878,102400,4182442,2926933));\n\tA(vec4(3145966,102403,4178111,2053461));\n\tA(vec4(1835163,86146,3136042,1419862));\n\tA(vec4(1577070,69636,2703636,-1398358));\n\tA(vec4(397545,49153,2050713,-2730666));\n\tA(vec4(262150,41472,0,1353386));\n\tA(vec4(393216,8192,5120,4063103));\n\tA(vec4(393312,8192,349528,2861999));\n\tA(vec4(393217,8193,1320277,1398101));\n\tA(vec4(393470,12288,1739499,1398101));\n\tA(vec4(262399,16386,2450746,2812650));\n\tA(vec4(164,131085,272681,1978969));\n\tA(vec4(131157,109,1381716,1970385));\n\tA(vec4(131306,131150,1731238,-2207393));\n\tA(vec4(131074,46,38277,-2215673));\n\tA(vec4(254,131152,3123883,1945855));\n\tA(vec4(131135,131156,330058,2224117));\n\tA(vec4(131136,3015183,0,1970367));\n\tA(vec4(2884315,3276876,4189110,1995009));\n\tA(vec4(1183974,2883689,2087919,1986645));\n\tA(vec4(1835435,2752615,3683706,1986901));\n\tA(vec4(266559,2629739,773067,1978709));\n\tA(vec4(1188526,2621517,4161407,1978814));\n\tA(vec4(135179,2240622,49345,1978709));\n\tA(vec4(262208,2228494,2708736,1978709));\n\tA(vec4(2102271,3145806,3964479,1978709));\n\tA(vec4(1572938,2756686,453354,1978837));\n\tA(vec4(3015056,102400,4139561,-2971993));\n\tA(vec4(3277055,102403,1739519,4188901));\n\tA(vec4(2883723,98434,2793569,-108713));\n\tA(vec4(2359487,77827,1151979,-43690));\n\tA(vec4(1319166,90113,4177791,4173679));\n\tA(vec4(393471,94211,4194303,4128510));\n\tA(vec4(4863,98307,4194303,4172799));\n\tA(vec4(2752623,94211,4178943,4172379));\n\tA(vec4(3014910,110594,2121786,4172373));\n\tA(vec4(2232570,94339,1085622,4172373));\n\tA(vec4(266242,41219,32896,4172437));\n\tA(vec4(262144,8192,2631684,4150618));\n\tA(vec4(262184,12291,3124154,4150613));\n\tA(vec4(393344,12291,428930,4150613));\n\tA(vec4(262229,4097,3486781,4150613));\n\tA(vec4(131221,8193,3602873,4183509));\n\tB(vec3(0,24584,0));\n\tB(vec3(131312,4096,2369576));\n\tB(vec3(131157,3,349509));\n\tB(vec3(160,4096,3812011));\n\tB(vec3(131242,2,1660305));\n\tB(vec3(0,4099,345415));\n\tB(vec3(131072,90140,0));\n\tB(vec3(1050110,106498,4177855));\n\tB(vec3(1327231,102531,4190191));\n\tB(vec3(917632,65541,38244));\n\tB(vec3(794671,81927,3829663));\n\tB(vec3(4600,77828,2144317));\n\tB(vec3(262407,77827,4189138));\n\tB(vec3(1577461,86145,3145662));\n\tB(vec3(528626,94342,3964092));\n\tB(vec3(3407879,126978,98448));\n\tB(vec3(3277053,106498,2697534));\n\tB(vec3(2891966,98306,2616303));\n\tB(vec3(1704110,61443,2103687));\n\tB(vec3(794788,53249,782335));\n\tB(vec3(47,49286,267264));\n\tB(vec3(131072,36868,0));\n\tB(vec3(524517,90120,0));\n\tB(vec3(786879,86017,2696254));\n\tB(vec3(3018885,94211,4177915));\n\tB(vec3(1445958,94339,1151698));\n\tB(vec3(393222,4355,115650));\n\tB(vec3(393392,8192,5141));\n\tB(vec3(262334,12291,4194239));\n\tB(vec3(393217,16385,262144));\n\tB(vec3(786596,8192,2697577));\n\tB(vec3(131211,4099,4123623));\n\tB(vec3(131072,16384,0));\n\tB(vec3(164,4096,2631972));\n\tB(vec3(131254,4098,2533802));\n\tB(vec3(131104,2,1217878));\n\tB(vec3(131173,1,21913));\n\tB(vec3(21,4097,1861));\n\tB(vec3(131072,69644,1048576));\n\tB(vec3(2884861,102402,4194239));\n\tB(vec3(3277055,106499,3404799));\n\tB(vec3(2236443,94339,3140567));\n\tB(vec3(917600,61440,1072772));\n\tB(vec3(1183755,57476,3602446));\n\tB(vec3(262392,65540,4183764));\n\tB(vec3(397407,73857,2082113));\n\tB(vec3(524784,73736,1062972));\n\tB(vec3(3407878,118786,230338));\n\tB(vec3(3408020,106496,4077624));\n\tB(vec3(2490395,94339,3140309));\n\tB(vec3(1577088,77828,4012084));\n\tB(vec3(135179,78339,180930));\n\tB(vec3(131088,20480,2698505));\n\tB(vec3(393216,32776,2446336));\n\tB(vec3(925972,98309,2345866));\n\tB(vec3(2098168,106497,4194239));\n\tB(vec3(3018927,98307,3667963));\n\tB(vec3(1183894,61570,4110757));\n\tB(vec3(262151,12291,2366600));\n\tB(vec3(393216,12289,2857888));\n\tB(vec3(262399,12288,817470));\n\tB(vec3(524308,8193,1562581));\n\tB(vec3(393316,16384,1054504));\n\tB(vec3(253,12289,4030335));\n\tB(vec3(0,4096,1315840));\n\tB(vec3(131297,0,1415574));\n\tB(vec3(43,4099,27559));\n\tB(vec3(41,4098,6814));\n\tB(vec3(131072,20488,1054016));\n\tB(vec3(393216,57348,4177557));\n\tB(vec3(1835748,98306,4194302));\n\tB(vec3(3277055,106499,2348031));\n\tB(vec3(3276975,98307,2663851));\n\tB(vec3(3145983,110594,1381434));\n\tB(vec3(3149947,106499,2795887));\n\tB(vec3(2883588,102403,3125183));\n\tB(vec3(3018981,118786,2458005));\n\tB(vec3(401535,73858,694875));\n\tB(vec3(131328,102408,3683360));\n\tB(vec3(3407886,106499,4185027));\n\tB(vec3(3277033,106497,4192826));\n\tB(vec3(2625663,94209,2088799));\n\tB(vec3(1839348,90112,4029821));\n\tB(vec3(659463,69767,4094080));\n\tB(vec3(164,90112,4183444));\n\tB(vec3(1835514,106497,4183401));\n\tB(vec3(3416275,106496,4194237));\n\tB(vec3(3277055,106499,4187903));\n\tB(vec3(2494495,90243,2606027));\n\tB(vec3(790708,49280,1039981));\n\tB(vec3(131152,20480,1315876));\n\tB(vec3(262318,8194,961195));\n\tB(vec3(393386,8194,1353110));\n\tB(vec3(393327,8195,1214150));\n\tB(vec3(524320,12288,2780684));\n\tB(vec3(131321,16386,3848894));\n\tB(vec3(131232,0,268820));\n\tB(vec3(1,4100,1024));\n\tB(vec3(262144,20484,2774016));\n\tB(vec3(524368,45060,4177577));\n\tB(vec3(2359525,77827,508671));\n\tB(vec3(2883839,106499,2363450));\n\tB(vec3(3277055,110595,98667));\n\tB(vec3(3276971,98306,1677830));\n\tB(vec3(3145770,102402,1351809));\n\tB(vec3(3014824,94209,3144638));\n\tB(vec3(3145898,102403,2796522));\n\tB(vec3(3408062,102402,4095915));\n\tB(vec3(3277014,102401,3717877));\n\tB(vec3(3145855,106499,4188863));\n\tB(vec3(3277049,102403,4126975));\n\tB(vec3(511,106499,4194303));\n\tB(vec3(3277039,102403,2616283));\n\tB(vec3(2887775,98307,3114886));\n\tB(vec3(2097248,77828,3677192));\n\tB(vec3(2752765,102402,1820398));\n\tB(vec3(3277055,110594,3843391));\n\tB(vec3(3539199,106499,1299839));\n\tB(vec3(3276975,110595,2188727));\n\tB(vec3(1966334,90243,3144383));\n\tB(vec3(1577071,49155,3685798));\n\tB(vec3(266266,41091,509895));\n\tB(vec3(131152,8192,2631716));\n\tB(vec3(131258,8194,1485482));\n\tB(vec3(262228,4096,206233));\n\tB(vec3(262293,8193,3582681));\n\tB(vec3(393333,8193,1400669));\n\tB(vec3(234,12290,3848890));\n\tB(vec3(0,8200,0));\n\tB(vec3(262208,28676,3744800));\n\tB(vec3(917694,49155,444059));\n\tB(vec3(1704190,65537,2368830));\n\tB(vec3(2621451,86023,2201218));\n\tB(vec3(3145876,106497,1496746));\n\tB(vec3(3276934,98306,1463450));\n\tB(vec3(3276965,98305,1661593));\n\tB(vec3(3014806,98306,2828970));\n\tB(vec3(2883711,98306,1141423));\n\tB(vec3(3014800,98304,3766948));\n\tB(vec3(3145892,102403,3145698));\n\tB(vec3(3277034,102403,3586747));\n\tB(vec3(1720575,102403,1044479));\n\tB(vec3(262378,90254,16));\n\tB(vec3(1311999,102403,4194303));\n\tB(vec3(3145871,106499,3930087));\n\tB(vec3(1327294,94211,3141615));\n\tB(vec3(1442276,90113,2697577));\n\tB(vec3(3408127,98307,261863));\n\tB(vec3(3408127,102402,3327392));\n\tB(vec3(3145903,106496,2872682));\n\tB(vec3(2756821,106498,348501));\n\tB(vec3(1310767,49282,1316190));\n\tB(vec3(1179876,53249,3832442));\n\tB(vec3(528411,41091,773063));\n\tB(vec3(240,4096,2899261));\n\tB(vec3(262150,12291,98769));\n\tB(vec3(249,8193,10878));\n\tB(vec3(131323,8195,10943));\n\tB(vec3(85,12289,5461));\n\tB(vec3(131306,8194,2713962));\n\tB(vec3(262144,32776,1052672));\n\tB(vec3(786680,36865,1732543));\n\tB(vec3(1048603,36867,2950));\n\tB(vec3(2097504,65536,2845305));\n\tB(vec3(2752730,94210,3832506));\n\tB(vec3(3145823,106499,1496790));\n\tB(vec3(3145830,102401,2713978));\n\tB(vec3(3276905,98305,1813402));\n\tB(vec3(3145964,98306,3881322));\n\tB(vec3(2883775,94209,2878080));\t\n    \n    c = cc;\n}",
                "description": "",
                "inputs": [],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 cc = vec4(0);\nfloat i = 0.;\nfloat index = 0.;\nvec2 uu = vec2(0);\nvec2 chunk_u = vec2(0);\nvoid B(vec3 data){\n    if(i++ == index){\n        if(chunk_u.x == 0.)\n        \tcc.rgb = floor(data/2048.);\n        else if(chunk_u.x == 1.)\n            cc.rgb = mod(data,2048.);\n    }\n}\nvoid mainImage( out vec4 c, in vec2 u )\n{\n    c-=c;\n    uu = floor(u/4.);\n    chunk_u = mod(floor(u),4.);\n    chunk_u.x = chunk_u.y*4.+chunk_u.x;\n    if(uu.x>31.){c = vec4(0.);return;}\n    if(iFrame > 10){discard; return;}\n    index = uu.y*32.+uu.x-682.;\n\t\n\tB(vec3(2883754,98305,121));\n\tB(vec3(3276907,98307,3403182));\n\tB(vec3(3145946,106496,3437872));\n\tB(vec3(2101279,90243,246722));\n\tB(vec3(131072,24581,269977));\n\tB(vec3(2097407,90119,1062271));\n\tB(vec3(2752751,98307,3454399));\n\tB(vec3(270527,86147,2088943));\n\tB(vec3(524528,61452,1057848));\n\tB(vec3(2363551,106499,1563627));\n\tB(vec3(3014886,102402,2171238));\n\tB(vec3(2105595,81922,2551807));\n\tB(vec3(1048703,57475,18091));\n\tB(vec3(1048592,45061,2369813));\n\tB(vec3(1704169,49154,3928054));\n\tB(vec3(790575,57347,1825739));\n\tB(vec3(262224,20480,4007960));\n\tB(vec3(262149,28673,3140229));\n\tB(vec3(655360,32769,2790800));\n\tB(vec3(393216,36865,2796181));\n\tB(vec3(786496,28673,4177834));\n\tB(vec3(233,32771,4194303));\n\tB(vec3(917504,49152,2783524));\n\tB(vec3(1310741,49154,105413));\n\tB(vec3(1572864,65536,1731157));\n\tB(vec3(2228329,86021,2450853));\n\tB(vec3(3145961,102402,2611199));\n\tB(vec3(3145819,98307,2763366));\n\tB(vec3(3145881,98306,2796219));\n\tB(vec3(3145914,98306,2796202));\n\tB(vec3(3014825,102402,2796202));\n\tB(vec3(3014911,98307,2796207));\n\tB(vec3(3145978,94210,3043242));\n\tB(vec3(3014751,102401,3626325));\n\tB(vec3(3277014,98306,2648615));\n\tB(vec3(3411983,102401,4128742));\n\tB(vec3(663698,90242,2083798));\n\tB(vec3(277,36866,2637354));\n\tB(vec3(397312,40962,2796481));\n\tB(vec3(262228,32772,16768));\n\tB(vec3(786752,45056,1804800));\n\tB(vec3(1703962,77832,1377793));\n\tB(vec3(1572928,82048,1394020));\n\tB(vec3(917525,61445,344065));\n\tB(vec3(917504,65792,0));\n\tB(vec3(1310864,40960,1390652));\n\tB(vec3(1573006,57344,3499360));\n\tB(vec3(921631,53379,3132363));\n\tB(vec3(524532,28672,4008253));\n\tB(vec3(917759,28675,2878463));\n\tB(vec3(1441967,36867,3129336));\n\tB(vec3(1441962,40962,2207720));\n\tB(vec3(1310891,49153,1474597));\n\tB(vec3(1310975,45058,1056830));\n\tB(vec3(1835349,98305,4188565));\n\tB(vec3(2883585,98305,4188841));\n\tB(vec3(3145833,98305,3132079));\n\tB(vec3(3145961,106498,1479994));\n\tB(vec3(3145759,98307,1600123));\n\tB(vec3(3145897,98306,2812586));\n\tB(vec3(3145898,98306,2796202));\n\tB(vec3(3145898,98306,2796218));\n\tB(vec3(3145882,98304,3287717));\n\tB(vec3(3014890,98307,3861162));\n\tB(vec3(3014767,98306,1485442));\n\tB(vec3(3014784,94208,1657217));\n\tB(vec3(2883647,98306,2812591));\n\tB(vec3(2883800,102400,4192825));\n\tB(vec3(4129023,102403,4194303));\n\tB(vec3(266385,90371,180436));\n\tB(vec3(131093,57480,2097153));\n\tB(vec3(128,32768,4193913));\n\tB(vec3(397439,40963,1830895));\n\tB(vec3(655609,65538,5823));\n\tB(vec3(921775,73731,2450799));\n\tB(vec3(917758,61441,4097360));\n\tB(vec3(1179674,65538,42047));\n\tB(vec3(1572864,53251,3948483));\n\tB(vec3(1442021,57344,3832250));\n\tB(vec3(4287,53379,3141615));\n\tB(vec3(524528,8192,1328192));\n\tB(vec3(524463,20482,2501423));\n\tB(vec3(655402,20482,3136452));\n\tB(vec3(786432,24580,2199824));\n\tB(vec3(1048682,40962,98630));\n\tB(vec3(1310720,90116,0));\n\tB(vec3(1311231,98307,4194303));\n\tB(vec3(3014911,98307,1563631));\n\tB(vec3(3145823,102401,1398101));\n\tB(vec3(3145818,102402,1414806));\n\tB(vec3(3145888,98305,2792089));\n\tB(vec3(3276970,94210,1682090));\n\tB(vec3(3014749,98305,1529175));\n\tB(vec3(3014746,98306,2796202));\n\tB(vec3(3014826,98306,4111018));\n\tB(vec3(3145898,94211,2808196));\n\tB(vec3(3014810,98307,2816678));\n\tB(vec3(3014698,94211,4176618));\n\tB(vec3(2756777,94209,2786945));\n\tB(vec3(2228478,81923,47167));\n\tB(vec3(1315071,86019,2703359));\n\tB(vec3(528399,57603,433099));\n\tB(vec3(262640,69632,4173758));\n\tB(vec3(1179903,49283,106943));\n\tB(vec3(393242,24579,1327039));\n\tB(vec3(786436,53250,1708437));\n\tB(vec3(1048701,49157,1524213));\n\tB(vec3(917669,49285,721636));\n\tB(vec3(1179694,73862,2102565));\n\tB(vec3(1445892,65542,4037460));\n\tB(vec3(1835211,65536,2208124));\n\tB(vec3(397423,57475,773063));\n\tB(vec3(131232,4096,1579052));\n\tB(vec3(131218,8193,22884));\n\tB(vec3(262383,12290,1075898));\n\tB(vec3(393387,20483,2452139));\n\tB(vec3(786438,28674,608898));\n\tB(vec3(1048576,106500,0));\n\tB(vec3(1179903,86019,4194303));\n\tB(vec3(3014831,90115,515051));\n\tB(vec3(3145818,98304,3877542));\n\tB(vec3(3145770,98307,2878127));\n\tB(vec3(3145897,98306,2796202));\n\tB(vec3(3014694,98307,2796222));\n\tB(vec3(3014827,98306,2796202));\n\tB(vec3(3014826,98306,2795962));\n\tB(vec3(3014827,94210,2292671));\n\tB(vec3(3014826,98304,2463008));\n\tB(vec3(3145821,98307,1381463));\n\tB(vec3(3014846,98306,3832495));\n\tB(vec3(3014895,94211,4193279));\n\tB(vec3(2236527,90115,4194287));\n\tB(vec3(1835008,82050,2873025));\n\tB(vec3(1310720,53248,2206016));\n\tB(vec3(1179817,40961,19349));\n\tB(vec3(1052694,61441,2877781));\n\tB(vec3(1441956,53249,888510));\n\tB(vec3(1179866,45058,5269));\n\tB(vec3(917605,49283,677797));\n\tB(vec3(1446066,49160,1050738));\n\tB(vec3(1441792,61569,229824));\n\tB(vec3(1573029,61444,2623506));\n\tB(vec3(1966239,77826,3748137));\n\tB(vec3(266287,37123,180950));\n\tB(vec3(164,4097,1915500));\n\tB(vec3(131093,8193,2458689));\n\tB(vec3(262144,12288,2786624));\n\tB(vec3(524288,20480,2785280));\n\tB(vec3(786448,28672,753921));\n\tB(vec3(917504,94212,0));\n\tB(vec3(917759,77827,4194303));\n\tB(vec3(2490607,81923,4190207));\n\tB(vec3(3014815,98306,4188839));\n\tB(vec3(3145903,98306,2337386));\n\tB(vec3(3145898,98306,1215146));\n\tB(vec3(3014826,98306,2713129));\n\tB(vec3(3014826,98306,2467498));\n\tB(vec3(3014906,94210,2857903));\n\tB(vec3(3145969,94209,1564669));\n\tB(vec3(3145815,94211,1398229));\n\tB(vec3(3145834,98305,3828584));\n\tB(vec3(3145898,98306,2775726));\n\tB(vec3(3145962,102402,2199589));\n\tB(vec3(3014911,98306,4106623));\n\tB(vec3(3281087,94211,2801663));\n\tB(vec3(2625537,90115,4194303));\n\tB(vec3(2490576,86019,4184063));\n\tB(vec3(2359471,81923,2445414));\n\tB(vec3(1839125,61441,2055509));\n\tB(vec3(1572948,53249,2067101));\n\tB(vec3(1572965,57348,81969));\n\tB(vec3(1441792,49280,2872536));\n\tB(vec3(1703977,69760,1056792));\n\tB(vec3(1441936,57348,2155536));\n\tB(vec3(1188054,57347,4177850));\n\tB(vec3(27,16514,2372644));\n\tB(vec3(131216,16520,114832));\n\tB(vec3(131160,8193,2496617));\n\tB(vec3(131258,8194,1321258));\n\tB(vec3(262399,16387,87423));\n\tB(vec3(524319,12291,193));\n\tB(vec3(524288,81928,0));\n\tB(vec3(786687,65539,4177919));\n\tB(vec3(1835263,69635,3141611));\n\tB(vec3(2752751,90119,3499451));\n\tB(vec3(3014751,98307,4184021));\n\tB(vec3(3014677,98305,3528021));\n\tB(vec3(3014741,98305,1561941));\n\tB(vec3(3014741,98305,1397073));\n\tB(vec3(3014830,94210,3910315));\n\tB(vec3(3014745,94208,4188800));\n\tB(vec3(3145829,98306,4180654));\n\tB(vec3(3014806,98305,4188458));\n\tB(vec3(3014826,102402,4183462));\n\tB(vec3(3145797,98305,4183377));\n\tB(vec3(3145914,98306,2550415));\n\tB(vec3(3276969,98306,4177898));\n\tB(vec3(3145981,98305,1431549));\n\tB(vec3(3145967,90112,2718425));\n\tB(vec3(2752597,90115,3494096));\n\tB(vec3(2490539,81922,3136102));\n\tB(vec3(1966109,69635,4152671));\n\tB(vec3(1835140,61440,2639910));\n\tB(vec3(1704029,57345,3227724));\n\tB(vec3(1572945,49158,3703200));\n\tB(vec3(1835147,61443,3913079));\n\tB(vec3(135295,36995,1562591));\n\tB(vec3(176,16388,2634808));\n\tB(vec3(131094,16641,57412));\n\tB(vec3(112,4096,2730296));\n\tB(vec3(86,4099,1813466));\n\tB(vec3(131136,0,1738138));\n\tB(vec3(38,1,2107400));\n\tB(vec3(0,20484,345408));\n\tB(vec3(1048814,4101,3282662));\n\tB(vec3(917759,57348,4122960));\n\tB(vec3(1835158,77826,771733));\n\tB(vec3(2753023,94210,3750527));\n\tB(vec3(3014895,94211,3927039));\n\tB(vec3(3014831,94211,3586751));\n\tB(vec3(3014741,98305,82261));\n\tB(vec3(3014877,94209,5239));\n\tB(vec3(2752767,94211,16063));\n\tB(vec3(2490623,90115,81919));\n\tB(vec3(1708287,90115,338943));\n\tB(vec3(1048831,90115,2375359));\n\tB(vec3(1836031,98307,4194303));\n\tB(vec3(3145807,102403,4178626));\n\tB(vec3(3145978,98305,4188458));\n\tB(vec3(3145770,98306,3582602));\n\tB(vec3(3014869,94208,2082132));\n\tB(vec3(2883750,94210,2195540));\n\tB(vec3(2752763,86146,1056864));\n\tB(vec3(2359549,77824,3831226));\n\tB(vec3(2097299,57474,824858));\n\tB(vec3(1573011,57347,3114771));\n\tB(vec3(1446098,53251,4172453));\n\tB(vec3(659711,45187,778239));\n\tB(vec3(131079,12550,0));\n\tB(vec3(81,4098,464260));\n\tB(vec3(131074,4100,1114625));\n\tB(vec3(170,4096,2956843));\n\tB(vec3(131113,4097,2373996));\n\tB(vec3(131241,8192,2703392));\n\tB(vec3(262226,4098,2132621));\n\tB(vec3(21,20481,358981));\n\tB(vec3(106,73731,4194287));\n\tB(vec3(2490517,90113,4182736));\n\tB(vec3(2498751,81922,2882239));\n\tB(vec3(917728,61574,103928));\n\tB(vec3(2883743,94215,3818115));\n\tB(vec3(3145913,94208,510575));\n\tB(vec3(3014805,98307,4177855));\n\tB(vec3(2883839,98307,4194303));\n\tB(vec3(2752703,98307,4190207));\n\tB(vec3(2887834,110594,4191674));\n\tB(vec3(790655,45443,16839));\n\tB(vec3(524288,24580,2698260));\n\tB(vec3(1179897,69636,20536));\n\tB(vec3(1180159,90115,3751871));\n\tB(vec3(3015167,94211,4194303));\n\tB(vec3(3145866,102401,4178258));\n\tB(vec3(2883775,94210,4189567));\n\tB(vec3(2883671,94211,4183434));\n\tB(vec3(2752581,98433,2261249));\n\tB(vec3(2359546,77825,3047442));\n\tB(vec3(1966240,73728,2855200));\n\tB(vec3(659711,53251,4194303));\n\tB(vec3(266495,36995,109567));\n\tB(vec3(27,8193,5120));\n\tB(vec3(0,4096,1644868));\n\tB(vec3(131084,4100,197379));\n\tB(vec3(96,8192,3826968));\n\tB(vec3(131306,2,2528934));\n\tB(vec3(166,8195,1387262));\n\tB(vec3(250,8193,1137006));\n\tB(vec3(131099,4099,657481));\n\tB(vec3(131072,53256,0));\n\tB(vec3(262399,61443,4194303));\n\tB(vec3(1835183,69635,2869207));\n\tB(vec3(2101355,61442,3125038));\n\tB(vec3(397313,53265,1065024));\n\tB(vec3(1180664,98304,4194239));\n\tB(vec3(3145743,98307,4189131));\n\tB(vec3(3014910,94210,4188863));\n\tB(vec3(3014891,98306,4192890));\n\tB(vec3(1593599,94211,4194303));\n\tB(vec3(786559,37249,1163456));\n\tB(vec3(655360,49153,2769216));\n\tB(vec3(917588,41088,3571712));\n\tB(vec3(659461,28673,4194197));\n\tB(vec3(262144,28673,1748933));\n\tB(vec3(655592,69636,86112));\n\tB(vec3(524543,77826,9278));\n\tB(vec3(786943,81927,2439871));\n\tB(vec3(786687,81923,2801663));\n\tB(vec3(2232815,77827,2785279));\n\tB(vec3(790783,73859,2801663));\n\tB(vec3(655614,61570,27327));\n\tB(vec3(786623,28803,1061267));\n\tB(vec3(393216,28672,4177573));\n\tB(vec3(131072,32898,449478));\n\tB(vec3(131168,0,10272));\n\tB(vec3(131180,12418,1071));\n\tB(vec3(233,4097,2435365));\n\tB(vec3(85,4097,1398229));\n\tB(vec3(131072,1,5501));\n\tB(vec3(131136,2,2534058));\n\tB(vec3(131133,3,378181));\n\tB(vec3(0,53252,0));\n\tB(vec3(255,49155,4194303));\n\tB(vec3(131263,40963,4194303));\n\tB(vec3(4286,28675,1744879));\n\tB(vec3(393280,81932,3765280));\n\tB(vec3(255,94211,4194303));\n\tB(vec3(255,94211,4194303));\n\tB(vec3(131327,94211,4194303));\n\tB(vec3(255,90115,4194303));\n\tB(vec3(131327,94211,4194303));\n\tB(vec3(131163,78083,2874070));\n\tB(vec3(524542,49153,4024958));\n\tB(vec3(524507,45063,3765942));\n\tB(vec3(131327,40963,4194299));\n\tB(vec3(262315,36866,2813930));\n\tB(vec3(131077,32898,99969));\n\tB(vec3(524288,45060,5120));\n\tB(vec3(4176,16384,7769));\n\tB(vec3(131072,53248,0));\n\tB(vec3(131072,77824,0));\n\tB(vec3(393220,86016,0));\n\tB(vec3(0,86144,0));\n\tB(vec3(393216,73856,0));\n\tB(vec3(262393,40961,21));\n\tB(vec3(131078,36865,0));\n\tB(vec3(0,28800,0));\n\tB(vec3(0,4096,5397));\n\tB(vec3(85,8193,341));\n\tB(vec3(102,4097,5466));\n\tB(vec3(0,20484,0));\n\tB(vec3(96,4096,5401));\n\tB(vec3(0,12289,256));\n\tB(vec3(0,49152,0));\n    \n    c = cc + texture(iChannel0,u/iResolution.xy)+texture(iChannel1,u/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/****************************************************\n\t\t\"ShaderToy Texture Compression Decoder\"\n*****************************************************/\n//=================Part I decode data from buffer================================================\nvec4 ReadBuffer(vec2 _u){\n    return texture(iChannel2,(_u+0.5)/iResolution.xy,0.);\n}\nvec4 CombineBinary(vec2 _u){\n\t_u = floor(_u/4.)*4.;\n    return ReadBuffer(_u)*2048.+ReadBuffer(vec2(1.,0.)+_u); \n}\n//=================Part II region decode=========================================================\nstruct DataBlock{\n\tvec3 A;\n    vec3 B;\n};\nstruct ModBlock{\n\tvec3 M;\n};\nDataBlock LumiCoeffs_Data[4];\nDataBlock CoCg_Data[4];\nModBlock LumiCoeff_Mod;\nModBlock CoCg_Mod;\n\nDataBlock GetDataCoCg(vec2 _u){\n    DataBlock tmp;\n    if(_u.x<64.&&_u.y<64.){\n    \tvec3 Blocks = vec3(CombineBinary(_u).yw,CombineBinary(vec2(64,0.)+_u).w);\n        Blocks = abs(Blocks);\n        tmp.A = vec3(\n        \t0.,\n            mod(Blocks.x,32.)*8.,\n            mod(floor(Blocks.y/262144.),16.)*16.\n        );\n        tmp.B = vec3(\n        \t0.,\n            mod(floor(Blocks.y/8192.),32.)*8.,\n        \tmod(floor(Blocks.y/256.),32.)*8.//floor(mod(Blocks.y,8192.)/256.)\n        );\n    } \n    return tmp;\t\n}//Pass !!?\nModBlock GetModCoCg(vec2 _u){\n    ModBlock tmp;\n    if(_u.x<64.&&_u.y<64.){\n    \tvec3 Blocks = vec3(CombineBinary(_u).yw,CombineBinary(vec2(64,0.)+_u).w);\n        float mod15 = float(Blocks.y>0.)*2.+float(Blocks.z>0.);\n        Blocks  = abs(Blocks);\n        tmp.M.x = mod(Blocks.y,256.);\n        tmp.M.y = mod(Blocks.z,4.);\n        tmp.M.z = floor(Blocks.z/4.)+mod15*1048576.;\n    }\n    return tmp;\n}//Pass !!?\n\nDataBlock GetDataLCoffs(vec2 _u){\n\tDataBlock tmp;\n    vec3 Blocks = CombineBinary(_u).xyz;\n    tmp.A = vec3(\n\t\tfloor(Blocks.x/131072.)*8.,\n        mod(floor(Blocks.x/4096.),32.)*8.,\n        mod(floor(Blocks.x/256.),16.)*16.);\n    _u.x<64.&&_u.y<64. ?\n    tmp.B = vec3(\n\t\tfloor(Blocks.y/131072.)*8.,\n        mod(floor(Blocks.y/4096.),32.)*8.,\n        mod(floor(Blocks.y/128.),32.)*8.)\n    :\n    tmp.B = vec3(\n        floor(Blocks.y/4096.)*8.,\n        mod(floor(Blocks.y/128.),32.)*8.,\n        mod(floor(Blocks.y/4.),32.)*8.);\n    return tmp;\n}\nModBlock GetModLCoffs(vec2 _u){\n\tvec3 Blocks = CombineBinary(_u).xyz;\n    ModBlock tmp;\n    tmp.M.x = mod(Blocks.x,256.);\n    _u.x<64. && _u.y<64. ?\n    \ttmp.M.y = mod(floor(Blocks.y/32.),4.) \n\t:\n    \ttmp.M.y = mod(Blocks.y,4.);\n    tmp.M.z = Blocks.z;\n    return tmp;\n}\n//=================Part III Partition decode=====================================================\nmat4 BiLiner[4];\nvec2 Weight[4]; \nvoid initValue(){\n\tBiLiner[0] = mat4(\n    \t4, 4, 4, 4,\n\t\t2, 6, 2, 6,\n\t\t8, 0, 8, 0,\n\t\t6, 2, 6, 2);\n    BiLiner[1] = mat4(\n        2, 2, 6, 6, \n\t\t1, 3, 3, 9, \n\t\t4, 0, 12,0,\n\t\t3, 1, 9, 3);\n    BiLiner[2] = mat4(\n        8,  8, 0, 0,\n\t\t4, 12, 0, 0,\n\t\t16, 0, 0, 0,\n\t\t12, 4, 0, 0);\n    BiLiner[3] = mat4(\n        6,  6, 2, 2, \n\t\t3,  9, 1, 3, \n\t\t12, 0, 4, 0,\n\t\t9,  3, 3, 1); \n    Weight[0] = vec2(8, 0);\n    Weight[1] = vec2(5, 3);\n    Weight[2] = vec2(3, 5);\n    Weight[3] = vec2(0, 8);\n}\n\nvoid Partition(vec2 _u){\n    vec2 xyOffset = (floor(mod(floor(_u),4.)/2.)-1.)*4.;\n    vec2 u00 = _u + xyOffset;\n    vec2 u10 = _u + xyOffset + vec2(4.,0.);\n    vec2 u01 = _u + xyOffset + vec2(0.,4.);\n    vec2 u11 = _u + xyOffset + vec2(4.,4.);\n\tLumiCoeffs_Data[0] = GetDataLCoffs(clamp(u00,0.,128.));\n\tLumiCoeffs_Data[1] = GetDataLCoffs(clamp(u10,0.,128.));\n\tLumiCoeffs_Data[2] = GetDataLCoffs(clamp(u01,0.,128.));\n\tLumiCoeffs_Data[3] = GetDataLCoffs(clamp(u11,0.,128.));\n    CoCg_Data[0] = GetDataCoCg(clamp(u00,0.,64.));\n    CoCg_Data[1] = GetDataCoCg(clamp(u10,0.,64.));\n    CoCg_Data[2] = GetDataCoCg(clamp(u01,0.,64.));\n    CoCg_Data[3] = GetDataCoCg(clamp(u11,0.,64.));\n\tLumiCoeff_Mod = GetModLCoffs(_u);\n    CoCg_Mod = GetModCoCg(_u);\n}\n//=================Part IV Chunk decode=========================================================\nstruct ColorArray{\n\tvec3 A;\n    vec3 B;\n};\nColorArray L_C_Chunk;\nColorArray CoCg_Chunk;\nmat4 matMaker(vec3 c0,vec3 c1,vec3 c2,vec3 c3){\n    return mat4(\n    \tvec4(c0,0.),\n        vec4(c1,0.),\n        vec4(c2,0.),\n        vec4(c3,0.)\n    );\n}\nColorArray Bilinear_insert(vec2 index2D,DataBlock Blocks[4]){\n    ColorArray tmp;\n    vec4 biliner = vec4(0.);\n    for(int y = 0;y<4;y++)\n        for(int x = 0;x<4;x++)\n        \tif(float(y) == index2D.y && float(x) == index2D.x)\n                biliner = BiLiner[y][x];\n    tmp.A = (matMaker(Blocks[0].A,Blocks[1].A,Blocks[2].A,Blocks[3].A)*biliner).rgb;\n    tmp.B = (matMaker(Blocks[0].B,Blocks[1].B,Blocks[2].B,Blocks[3].B)*biliner).rgb;\n    return tmp;\n}\nvec3 GetColor(ColorArray _tmp,float _m){\n\tvec2 weight = vec2(0.);\n    for(int i = 0;i<4;i++)\n    \tif(float(i) == _m)\n  \t\t\tweight = Weight[i];\n    return floor((_tmp.A*weight.x + _tmp.B*weight.y)/128.);\n}\nfloat GetMod(float index,ModBlock _mod){\n    float M = 0.;\n    index < 4. ?\n    \tM = mod(floor(_mod.M.x/exp2(2.*index)),4.) :\n    index < 5. ?\n    \tM = _mod.M.y\n    :\n    \tM = mod(floor(_mod.M.z/exp2(2.*(index-5.))),4.);\n    return M;\n}\nvec3 LC_Color = vec3(0.);\nvec3 CoCg_Color = vec3(0.);\nvoid Chunk(vec2 _u){\n   \tvec2 chunkIndex2D = mod(floor(_u),4.);\n    float index = chunkIndex2D.y*4.+chunkIndex2D.x;\n\t\n    L_C_Chunk  = Bilinear_insert(chunkIndex2D,LumiCoeffs_Data);\n\tfloat L_C_M = GetMod(index,LumiCoeff_Mod);\n    LC_Color = GetColor(L_C_Chunk,L_C_M);/////////////\n    \n    CoCg_Chunk = Bilinear_insert(chunkIndex2D,CoCg_Data);\n    float CoCg_M = GetMod(index,CoCg_Mod);\n    CoCg_Color = GetColor(CoCg_Chunk,CoCg_M);//////////////\n} \n//=================Part V Inverse Haar-WaveLet Transfrom decode=================================\n/*\n\tuse as known as Frame Buffer,it runs fast on parallel calculation,\n\tsimilar to Dynamic Buffer.\n*/\nvoid IHWT(inout vec4 c,vec2 _u){\n    int F = iFrame- 1;\n    if(F == 0)\n    \tc.rgb = LC_Color.rgb;\n    else if(F == 1){\n    \tvec2 area = floor(_u/128.);\n        float areaIndex = area.y*2.+area.x;\n        vec3 stp = texture(iChannel3,mod(_u,128.)/iResolution.xy).stp;\n        if(areaIndex == 0.) c.s = stp.s;\n        if(areaIndex == 1.) c.s = stp.t - stp.p;\n        c.tp = CoCg_Color.gb;\n    }\n    else if(F == 2){\n    \tfloat U_Y = floor(_u.y/2.)+0.5;\n        float odd_even = -sign(mod(floor(_u.y),2.)-0.5);\n        c.s = texture(iChannel3,vec2(_u.x,U_Y)/iResolution.xy).s;\n            + odd_even*texture(iChannel3,vec2(_u.x,U_Y+128.)/iResolution.xy).s;\n    }\n    else if(F == 3){\n    \tfloat U_X = floor(_u.x/2.)+0.5;\n        float odd_even = -sign(mod(floor(_u.x),2.)-0.5);\n        c.s = texture(iChannel3,vec2(U_X,_u.y)/iResolution.xy).s;\n        \t+ odd_even*texture(iChannel3,vec2(U_X,_u.y+128.)/iResolution.xy).s;\n    }\n    else if(F == 4){\n    \tc.s = texture(iChannel3,_u*2./iResolution.xy).s;\n    \tc.tp = texture(iChannel3,_u/2./iResolution.xy).tp;\n    }\n}\n//--------------------------------------------------------------------\nvoid mainImage( out vec4 c, in vec2 u )\n{\n\tc = texture(iChannel3,u/iResolution.xy);\n    if(iFrame > 10)return;\n    initValue();\n    Partition(u);\n    Chunk(u);\n    if(u.x<256.&&u.y<256.)\n    \tIHWT(c,u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}