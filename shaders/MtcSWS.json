{
    "Shader": {
        "info": {
            "date": "1481408494",
            "description": "One of my first shaders that I actually put a lot of time in. Hope you like it :)",
            "flags": 1,
            "hasliked": 0,
            "id": "MtcSWS",
            "likes": 37,
            "name": "slime",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "reflections",
                "slime",
                "aa",
                "vr",
                "smoothmin"
            ],
            "usePreview": 0,
            "username": "Jespertheend",
            "viewed": 2273
        },
        "renderpass": [
            {
                "code": "#define AA 1\n#define DROP_COUNT 15\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p, float s){\n    return length(p)-s;\n}\n\nfloat lolRand(float seed){\n    return sin(seed*1000.)*0.5+0.5;\n}\n\n\n\n// ============== noise stuff\n// src: https://www.shadertoy.com/view/Xtl3W2\n\n\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i);\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n// ======================\n\n\n\nfloat drop(vec3 a, vec3 b, float ra, float rb, float s){\n    vec3 ba = b - a;\n    float h = dot(-a,ba)/dot(ba,ba);\n    float d = (log2(1.44269/s))/s;\n    float start = pow(2.,d*s);\n    float minf = pow(2.,(h+d-start)*s);\n    float maxf = 1.-pow(2.,(-h+1.+d-start)*s);\n    if(h < start){\n        h = minf;\n    }\n    if(h > 1.-start){\n        h = maxf;\n    }\n    h = clamp(h, 0., 1.);\n    return length( -a - ba*h ) - mix(ra, rb, h);\n}\n\nfloat map(vec3 pos){\n    float sphereNoiseAmount = clamp(1.-pos.y,0.,1.)*0.05;\n    float sphereNoise = snoise(vec4(pos.x, pos.y+iTime*0.5, pos.z, 1.))*sphereNoiseAmount;\n    float sph = sdSphere(pos+sphereNoise, 1.);\n    float floorSph = sdSphere(pos * vec3(0.5, 3., 0.5) + vec3(0., 7.7, 0.), 1.);\n    float res = min(sph, floorSph);\n    \n    //drops\n    for(int i=0; i<DROP_COUNT; i++){\n        float seed = float(i)*10.;\n        float t = iTime+lolRand(seed*3.324)*5.;\n        const float dropDuration = 2.8;\n        seed += floor(t/dropDuration);\n        t= mod(t,dropDuration);\n        t += 1.;\n        float dropRot = lolRand(seed)*6.5;\n        float dropDist = pow(-lolRand(seed*2.34)+1.,1.8) * 0.8;\n        vec3 dropPos = pos + vec3(cos(dropRot)*dropDist, 0., sin(dropRot)*dropDist);\n        float size = 0.8-dropDist*0.5;\n        size = 0.6-dropDist*0.4;\n\n        float y1, y2, s1, s2;\n        //drop pos\n        if(t < 1.756){\n            y1 = 0.;\n        }else if(t < 2.9){\n            y1 = pow(t-1.756,4.);\n        }else{\n            y1 = -pow(100.,-t+2.82)+2.4;\n        }\n        y2 = pow(min(t,2.08)*0.6,4.);\n        y2 += 0.08;\n        \n        //drop size\n        s1 = -pow((t/5.)-0.5,2.)+0.2;\n        s2 = -pow(2.,-t-0.8)+0.6;\n        s1 *= size*0.5;\n        s2 *= size;\n        s1 = max(s1, 0.);\n        s2 = max(s2, 0.);\n        float dropd = drop(dropPos+ vec3(0., y1, 0.), dropPos+ vec3(0., y2, 0.), s1, s2, 5.);\n        res = smin(res, dropd, 0.2);\n    }\n    return res;\n}\n\nconst int MAX_RAY_STEPS = 128;\nconst float HIT_PRECISION = 0.009;\nconst float FAR_CLIPPING = 100.;\n\nfloat castRay(in vec3 ro, in vec3 rd){\n    float h = HIT_PRECISION * 2.;\n    float t = 0.;\n\n    for(int i=0; i<MAX_RAY_STEPS; i++){\n        h = map(ro+rd*t);\n        if(h < HIT_PRECISION || t > FAR_CLIPPING) break;\n        t += h;\n    }\n\n    float res = -1.;\n    if(t<=FAR_CLIPPING) res = t;\n    return res;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(.0001, 0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\nvec4 render( in vec3 ro, in vec3 rd){\n    vec3 light = vec3(7., 1., -1.);\n\n    float z = castRay(ro, rd);\n    //return vec4(matInfo);\n    //return vec4(z/10.);\n    if(z == -1.){ // BG\n        vec3 bgDir = rd;\n        bgDir.y *= -1.;\n        return texture(iChannel0, bgDir);\n    }\n    vec3 pos = ro + rd * z;\n    vec3 normal = getNormal(pos);\n    \n    //see through amount\n    float seeThrough = clamp(3.-abs(pos.y*4.2+6.5),0.,1.);\n    //return vec4(seeThrough);\n    \n    //relative normal \n    float relNorm = dot(-rd, normal);\n    \n    //soft reflection / refraction\n    float reflectSoftMid = (snoise(vec4(pos*vec3(30., 1., 30.)+vec3(0.,1.,0.)*iTime, 0.))+0.3)*3.*seeThrough;\n    //float floorReflSoftDist = distance(vec2(0.),pos.xz+0.4*snoise(vec4(pos.xz*7.,0.,0.)));\n    //float floorReflSoft = 0.3*snoise(vec4(floorReflSoftDist*3.-iTime*0.1));\n    float floorReflSoftDisp = 0.3*snoise(vec4(pos.xz*7.,iTime*0.1,0.));\n    float floorReflSoftDisp2 = 1.*snoise(vec4(pos.xz*0.5,1.,0.));\n    float floorReflSoftDist = distance(vec2(0.),pos.xz+floorReflSoftDisp+floorReflSoftDisp2);\n    float floorReflSoft = sin(floorReflSoftDist*10.-iTime)*3.;\n    floorReflSoft *= clamp(-10.3-pos.y*5.,0.,1.);\n    float reflSoftTop = snoise(vec4(pos*10.+iTime*vec3(0.,3.,0.),0.))*10.+0.5;\n    reflSoftTop *= clamp(pos.y*5.+5.,0.,1.);\n    float reflectSoftAmount = clamp(reflSoftTop + reflectSoftMid + floorReflSoft, 0., 1.);\n    //return vec4(floorReflSoft);\n    \n    //refraction\n    vec3 refrDir = normalize(refract(rd, normal, 0.8));\n    vec3 refrColHard = texture(iChannel0, refrDir).rgb;\n    vec3 refrColSoft = texture(iChannel1, refrDir).rgb;\n    vec3 refrCol = mix(refrColHard, refrColSoft, reflectSoftAmount);\n    \n    //reflection\n    vec3 reflColHard = texture(iChannel0, normalize(reflect(rd, normal))).rgb;\n    vec3 reflColSoft = texture(iChannel1, normalize(reflect(rd, normal))).rgb;\n    float reflAmount = pow(1. - relNorm,4.-seeThrough*3.);\n    reflAmount = clamp(reflAmount, 0., 1.);\n    vec3 reflCol = mix(reflColHard, reflColSoft, reflectSoftAmount);\n    //return vec4(reflAmount);\n    //return vec4(reflCol,1.);\n    \n    //color\n    vec3 absorbCol = mix(vec3(0., 1., 0.), vec3(0., 0.2, 0.), relNorm);\n    absorbCol = mix(vec3(1.), absorbCol, min(relNorm*3., 1.));\n    float absorbAmount = min(relNorm*2.5,1.) - seeThrough*0.5;\n    //return vec4(absorbAmount);\n\n    //vec4 col = vec4(normal, 1.);\n    vec3 col = mix(refrCol, absorbCol, absorbAmount);\n    col = mix(col, reflCol, reflAmount);\n    return vec4(col, 1.);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ){\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nconst float CAM_DIST = 4.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord2d ){\n    float camRot = iMouse.x*.01;\n    float camHeight = -iMouse.y*.01;\n    if(iMouse.x == 0. && iMouse.y == 0.){\n        camRot = iTime*0.2;\n        camHeight = -1.2;\n    }\n    vec3 camPos = vec3(cos(camRot)*CAM_DIST, camHeight, sin(camRot)*CAM_DIST);\n    vec3 camTarget = vec3(0., -1., 0.);\n    mat3 camMat = setCamera(camPos, camTarget, 0.);\n    #if AA<2\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord2d.xy ) / iResolution.y;\n    vec3 rayDir = normalize(camMat * vec3(uv.xy,2.));\n    fragColor = render(camPos, rayDir);\n    #else\n    vec4 col = vec4(0.);\n    for(int m=0; m<AA; m++){\n        for(int n=0; n<AA; n++){\n            vec2 rr = vec2( float(m), float(n) ) / float(AA);\n    \t\tvec2 uv = ( -iResolution.xy + 2.0 * fragCoord2d.xy +rr ) / iResolution.y;\n    \t\tvec3 rayDir = normalize(camMat * vec3(uv.xy,2.));\n            col += render(camPos, rayDir);\n        }\n    }\n    col /= float(AA*AA);\n    fragColor = col;\n    #endif\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOrigin, in vec3 rayDir ){\n    fragColor = render(rayOrigin * 8. + vec3(0.,0.,4.), rayDir);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}