{
    "Shader": {
        "info": {
            "date": "1495845173",
            "description": "Based on the fact that a Mobius transformation of an Apollonian gasket is always another Apollonian gasket.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dsBDn",
            "likes": 8,
            "name": "Interactive Apollonian",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mobius",
                "apollonian"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 1081
        },
        "renderpass": [
            {
                "code": "const bool alternateColor = true;//you can try disabling this but it doesnt work for a lot of people\nconst int max_iterations = 50;//lower this to ~7 for alternateColor = false\nconst bool colorShifting = false;\nconst bool rotate = false;\nconst float pi = 3.14159265;\nconst vec2 c1 = vec2(0, .2);\nconst vec2 c2 = vec2(.8, .8);\nconst vec2 c3 = vec2(-.8, .8);\nconst float r1 = .2;\nconst float r2 = .8;\nconst float r3 = .8;\nconst vec2 tan12 = vec2(.2, .266667);\nconst vec2 tan13 = vec2(-.2, .266667);\n\nvec2 cMult(vec2 a, vec2 b){return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);}\n\nvec2 cInv(vec2 z){return vec2(z.x, -z.y) / dot(z, z);}\n\nvec2 diskMap(vec2 z, vec2 a){//will be a bijection of the unit disk if |a|<1\n    return cMult(z-a, cInv(cMult(vec2(a.x, -a.y), z) - vec2(1.0, 0.0)));\n}\n\nvec2 circleInverse(vec2 pos, vec2 circlePos, float circleR){\n    vec2 pc = pos - circlePos;\n\treturn pc * circleR * circleR/dot(pc, pc) + circlePos;\n}\n\nvec3 gasket(vec2 pos){\n    float iteration = 0.0;\n\tfor(int n = 0; n < max_iterations; n++){\n\t\tif(distance(pos,c1) < r1){\n\t\t\tpos = circleInverse(pos, c1, r1);\n            iteration++;\n\t\t}\n        else if(distance(pos, c2) < r2){\n\t\t\tpos = circleInverse(pos, c2, r2);\n            iteration++;\n\t\t}\n        else if(distance(pos, c3) < r3){\n\t\t\tpos = circleInverse(pos, c3, r3);\n            iteration++;\n\t\t}\n        else if(pos.y < 0.){\n\t\t\tpos = vec2(pos.x, -pos.y);\n            iteration++;\n\t\t}\n\t\telse return vec3(pos, iteration);\n    }\n    return vec3(pos, iteration);\n}\n\nvec4 getCol(vec3 n){\n    float s = 0.08 * (4.0-length(n.xy)) + n.z;\n    if (n.z==50.0)return vec4(0);\n    float arg = pi * s / 20. + .76;\n    if(colorShifting) arg -= iTime;\n    arg -= 4.5;\n    vec3 col = sin(vec3(arg - pi * 3.5, arg - pi, arg - 1.2 * pi * 3.)) * 0.4 + 0.5;\n    return vec4(col*col, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 z = 2. * fragCoord.xy / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 uv = z;\n    vec2 m =\n        iMouse.xy == vec2(0) ? vec2(0)\n        : 2.0*iMouse.xy/iResolution.y - vec2(iResolution.x/iResolution.y, 1.0);\n    m *= 5.0;\n    if(rotate) z = cMult(z, vec2(cos(iTime / 3.0), sin(iTime / 3.0)));\n    z = diskMap(z, m);\n    vec3 data = gasket(z);\n    if(alternateColor){\n    \tfragColor = getCol(data);\n    \tfragColor.xyz = pow(fragColor.xyz, vec3(1.2));\n    }\n    else {\n        float onGasket;\n        if(data.z == float(max_iterations)) onGasket = 1.0;\n        else onGasket = 0.0;\n    \tfragColor = vec4(onGasket);\n        if(colorShifting && fragColor != vec4(0.0)){\n    \t\tfragColor.x *= .5 + .5 * sin(0.25*iTime + 3.0 * uv.y);\n    \t\tfragColor.y *= .5 + .5 * cos(0.25*iTime + 3.0 * uv.x);\n    \t\tfragColor.z *= .5 - .5 * sin(0.25*iTime + 3.0 * dot(uv, uv));\n    \t\tfragColor.xyz = fragColor.xyz;\n    \t\tfragColor.xyz = pow(fragColor.xyz, vec3(.4545));\n        }\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}