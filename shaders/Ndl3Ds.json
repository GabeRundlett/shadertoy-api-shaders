{
    "Shader": {
        "info": {
            "date": "1616756973",
            "description": "Ornithopter squadron",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndl3Ds",
            "likes": 18,
            "name": "Flying Bathtubs",
            "published": 3,
            "tags": [
                "flight",
                "kinematics",
                "replicate",
                "absurd"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "// \"Flying Bathtubs\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrRound4BoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat Length4 (vec3 p);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec4 wngLink;\nvec3 sunDir, qHit, flDisp;\nvec2 cId, wngCs;\nfloat tCur, dstFar, bGrid, grLim, wngH, wngAh, whlRad, whlRot, hVel, prpRot;\nint idObj;\nconst int idBod = 1, idProp = 2, idWingF = 3, idWingC = 4, idLnk = 5, idEng = 6, idNos = 7,\n   idWhl = 8, idSpok = 9, idSeat = 10;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat BodDf (vec3 p)\n{\n  return PrRound4BoxDf (p, vec3 (max (vec2 (0.15, 0.4) - vec2 (0.03, 0.1) * p.z * p.z, 0.), 1.6), 0.3);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, db, dr, dw, dx;\n  dMin = dstFar;\n  p -= flDisp;\n  p.xz = Rot2D (p.xz, 0.25 * pi);\n  q = p;\n  q.z -= -0.2;\n  db = BodDf (q);\n  d = SmoothMax (min (abs (db) - 0.03, max (q.y + 0.45, db)), q.y - 0.3, 0.02);\n  d = max (d, 0.07 - length (vec2 (q.y + 0.65, abs (q.z) - 0.8)));\n  d = 0.9 * min (d, PrRoundBoxDf (vec3 (abs (q.x) - 0.45, q.y + 0.65, abs (q.z) - 0.8), vec3 (0.01, 0.1, 0.02), 0.02));\n  DMINQ (idBod);\n  q = p;\n  q.z = abs (q.z + 0.2) - 1.;\n  q.y -= 0.1;\n  d = max (PrRoundBox2Df (q.yz, vec2 (0.01, 0.1), 0.02), db);\n  DMINQ (idSeat);\n  q = p;\n  q.z -= -0.2;\n  d = min (max (PrCylDf (q, 0.32, 0.08), 0.05 - length (q.xz - vec2 (0., 0.08))),\n     PrCylDf (q - vec3 (0., 0., -0.35), 0.25, 0.3));\n  DMINQ (idEng);\n  q = p;\n  q.y -= 0.6;\n  d = PrCapsDf (q.xzy, 0.05, 1.1);\n  DMINQ (idEng);\n  q = p;\n  q.x = abs (q.x) - wngLink.x;\n  dx = 0.03 - q.x;\n  q.z -= -0.02;\n  d = PrCapsDf (q, 0.06, 0.42);\n  q.xy = Rot2Cs (q.xy, wngCs * vec2 (1., -1.));\n  d = min (d, PrCylDf (q - vec3 (wngLink.y, 0., -0.15), 0.02, 0.55));\n  DMINQ (idWingF);\n  dr = length (q.xz) - 2.8;\n  q.xz = Rot2D (q.xz, 0.06 * pi);\n  dw = dot (vec2 (abs (q.z) + 0.2, q.x), sin (-0.06 * pi + vec2 (0.5 * pi, 0.)));\n  d = max (max (abs (q.y) - 0.01, abs (dw) - 0.6), max (dr, dx));\n  DMINQ (idWingC);\n  d = max (length (vec2 (dr, q.y)) - 0.02, abs (dw) - 0.6);\n  q.xz = Rot2D (vec2 (q.x, abs (q.z) - 0.26), -0.04 * pi);\n  dw = dot (vec2 (abs (q.z) - 0.135, q.x), sin (-0.02 * pi + vec2 (0.5 * pi, 0.)));\n  d = min (d, max (length (vec2 (q.y, dw)) -0.02, max (dr - 0.01, dx)));\n  DMINQ (idWingF)\n  q = p;\n  q.x = abs (q.x) - wngLink.x;\n  q.xy -= wngLink.y * wngCs;\n  d = PrCylDf (q, 0.06, 0.04);\n  DMINQ (idLnk);\n  q.xy = Rot2D (q.xy, wngAh);\n  q.x -= 0.5 * wngLink.w;\n  d = PrCylDf (q.yzx, 0.02, 0.5 * wngLink.w);\n  DMINQ (idLnk);\n  q = p;\n  q.y -= wngH - 0.6;\n  d = PrCylDf (q.xzy, wngLink.z - 0.01, 0.7);\n  DMINQ (idLnk);\n  q.yz -= vec2 (-0.7, -0.1);\n  d = PrCylDf (q, 0.03, 0.1);\n  DMINQ (idLnk);\n  q = p;\n  q.x = abs (q.x);\n  q.xy -= vec2 (wngLink.z, wngH);\n  d = PrCylDf (q, 0.05, 0.04);\n  DMINQ (idLnk);\n  q = p;\n  q.z -= -1.3;\n  d = PrCylDf (q, 0.03, 1.);\n  DMINQ (idProp);\n  q.z -= -1.;\n  d = PrCapsDf (q, 0.1, 0.03);\n  DMINQ (idProp);\n  q.xy = Rot2D (q.xy, prpRot);\n  q.yz = Rot2D (q.yz, 0.35 * pi * sign (q.x));\n  q.x = abs (q.x) - 0.48;\n  d = PrRoundBoxDf (q, vec3 (0.38, 0.002, 0.07 * (1. + q.x)), 0.01);\n  DMINQ (idProp);\n  q = p;\n  q.z -= 1.7;\n  d = max (PrCapsDf (q, 0.15, 0.15), - db);\n  DMINQ (idNos);\n  q = p;\n  q.y -= -0.7 + max (1.1 - flDisp.y, 0.);\n  q.z = abs (q.z + 0.2) - 0.8;\n  d = PrCylDf (q.yzx, 0.03, 0.65);\n  q.x = abs (q.x) - 0.6;\n  q.yz = Rot2D (q.yz, whlRot * sign (p.z));\n  d = min (d, max (abs (length (q.yz) - whlRad + 0.02) - 0.02, abs (q.x) - 0.04));\n  DMINQ (idWhl);\n  q.yz = Rot2D (q.yz, 2. * pi * floor (8. * (atan (q.z, - q.y) / (2. * pi) + 0.5) + 0.5) / 8.);\n  q.y -= 0.19;\n  d = PrCylDf (q.xzy, 0.02, 0.19);\n  DMINQ (idSpok);\n  return dMin;\n}\n\nvoid ObjState ()\n{\n  vec2 h;\n  float wngAng, tc, t, tt;\n  tc = tCur + 0.7 * (cId.x + cId.y);\n  t = cos (2. * pi * mod (0.6 * tc, 1.));\n  wngAng = 0.12 * pi * (1. + 0.7 * t);\n  wngCs = sin (wngAng + vec2 (0.5 * pi, 0.));\n  wngH = wngLink.y * wngCs.x + wngLink.x - wngLink.z;\n  wngH = sqrt (max (0., wngLink.w * wngLink.w - wngH * wngH));\n  wngAh = pi + asin (wngH / wngLink.w);\n  wngH += wngLink.y * wngCs.y;\n  tt = (mod (0.3 * tc, 6.) - 2.) / 4.;\n  h = Hashv2v2 (17.1 * cId + 0.1) - 0.5;\n  flDisp.xz = bGrid * (cId + 0.5 + 0.2 * h);\n  flDisp.y = 1. + ((tt > 0.) ? 0.2 * (1. - t) + (7. + dot (h, vec2 (0.5))) *\n     SmoothBump (0.2, 0.8, 0.2, tt) : 0.);\n  prpRot = -2. * pi * tc;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 cIdP, s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi.xz = 1. / rd.xz;\n  cIdP = vec2 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p.xz / bGrid);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    d = (Maxv2 (abs (cId)) <= grLim) ? ObjDf (p) : dstFar;\n    s = (bGrid * (cId + step (0., rd.xz)) - p.xz) * rdi.xz;\n    d = min (d, abs (Minv2 (s)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  cIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    cId = floor (p.xz / bGrid);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    if (Maxv2 (abs (cId)) <= grLim) {\n      h = ObjDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n    } else h = 0.3 * bGrid;\n    d += clamp (h, 0.02, 0.5);\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else if (rd.y < 0.) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return 0.8 * col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, q;\n  float dstObj, dstGrnd, sh, t;\n  bool isBg;\n  wngLink = vec4 (0.5, 0.8, 0.08, 1.5);\n  hVel = 1.;\n  whlRad = 0.4;\n  whlRot = - (hVel / whlRad) * tCur;\n  dstGrnd = dstFar;\n  isBg = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idBod) {\n      t = BodDf (qHit);\n      if (qHit.y < 0.25) col4 = vec4 (1., 1., 0.8, 0.2) * (0.85 + 0.15 * smoothstep (0., 0.02, abs (mod (4. *\n         ((t > 0.) ? 2. * qHit.y : ((abs (qHit.z) < 1.8) ? qHit.z : 2. * qHit.x)) + 0.5, 1.) - 0.5) - 0.05));\n      else col4 = mix (vec4 (0.8, 0.7, 0., 0.2), vec4 (0.5, 0.2, 0., 0.1), smoothstep (0.01, 0.02, abs (t)));\n      if (t > 0. && PrRoundBox2Df (qHit.zy - vec2 (1.3, -0.01), vec2 (0.3, 0.15), 0.01) < 0.) col4.rgb =\n         mix (col4.rgb, vec3 (1., 0.2, 0.2), ShowIntPZ ((qHit.zy - vec2 (1.3 + 0.25 * sign (qHit.x), -0.13)),\n         vec2 (0.5 * sign (qHit.x), 0.25), 3., 1. + grLim - cId.x + (2. * grLim + 1.) * (grLim - cId.y)));\n    } else if (idObj == idProp) col4 = mix (vec4 (1., 0., 0., 0.2), vec4 (0.8, 0.9, 0.8, 0.2), \n       smoothstep (0., 0.02, abs (qHit.x - 0.27) - 0.05));\n    else if (idObj == idWingF) col4 = vec4 (0.8, 0.5, 0.1, 0.2);\n    else if (idObj == idWingC) col4 = vec4 (0.9, 0.9, 0.8, 0.2) * (0.93 + 0.07 * smoothstep (0., 0.02,\n       abs (abs (length (qHit.xz) - 1.9) - 0.3) - 0.01));\n    else if (idObj == idLnk) col4 = vec4 (0.8, 0.6, 0.3, 0.2);\n    else if (idObj == idEng) col4 = vec4 (0.8, 0.85, 0.8, 0.2);\n    else if (idObj == idNos) col4 = vec4 (1., 0.3, 0., 0.2);\n    else if (idObj == idWhl) col4 = vec4 (0.7, 0.6, 0.6, 0.05);\n    else if (idObj == idSpok) col4 = vec4 (0.5, 0.6, 0.7, 0.1);\n    else if (idObj == idSeat) col4 = vec4 (0.5, 0.2, 0., 0.1) * (0.8 + 0.2 * smoothstep (0., 0.02,\n       mod (16. * qHit.z, 1.) - 0.2));\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    cId = floor (ro.xz / bGrid);\n    q = ro;\n    q.xz += (hVel / sqrt(2.)) * tCur;\n    col4 = mix (vec4 (0.4, 0.5, 0.3, 0.), vec4 (0., 0.5, 0.1, 0.), smoothstep (0.2, 0.8, Fbm2 (4. * q.xz)));\n    col4 = mix (vec4 (0.2, 0.5, 0.2, 0.), col4,  1. - smoothstep (0.3, 0.6, dstGrnd / dstFar));\n    vn = VaryNf (4. * q, vec3 (0., 1., 0.), 2. * (1. - smoothstep (0.1, 0.3, dstGrnd / dstFar)));\n  } else {\n    col = SkyBgCol (ro, rd);\n    isBg = true;\n  }\n  if (! isBg) {\n    sh = (min (dstObj, dstGrnd) < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n    col = col4.rgb * (0.2 + 0.1 * max (vn.y, 0.) + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       step (0.95, sh) * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    if (dstObj >= dstFar) col = mix (col, 0.8 * vec3 (0.3, 0.41, 0.55), pow (1. + rd.y, 16.));\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  bGrid = 8.;\n  grLim = 3.;\n  az = pi;\n  el = -0.04 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    az -= 0.03 * pi * tCur;\n  }\n  el = clamp (el, -0.2 * pi, 0.2 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (0., 7., -4. - 1.4 * (grLim + 1.) * bGrid * (0.9 - 0.1 * cos (4. * az)));\n  ro.xz = Rot2D (ro.xz, - az) + 0.5 * bGrid;\n  zmFac = 3.;\n  dstFar = 150.;\n  sunDir = normalize (vec3 (0., 1., 1.));\n  sunDir.xz = Rot2D (sunDir.xz, -0.01 * pi * tCur);\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRound4BoxDf (vec3 p, vec3 b, float r)\n{\n  return Length4 (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat Length4 (vec3 p)\n{\n  return sqrt (length (p * p));\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  q = 1. - smoothstep (vec2 (0.), vec2 (0.04, 0.07), abs (q) - vec2 (0.13, 0.5));\n  return q.x * q.y;\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  vec2 vp, vm, vo;\n  float d;\n  int k, kk;\n  vp = vec2 (0.5, 0.5);\n  vm = vec2 (-0.5, 0.5);\n  vo = vp - vm;\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    nDig = mxChar;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = max (val, 0.) / pow (10., mxChar - idChar - 1.);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}