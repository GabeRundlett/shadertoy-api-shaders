{
    "Shader": {
        "info": {
            "date": "1712257814",
            "description": "A scrolling view of a Cellular Automata simulating rule 110",
            "flags": 32,
            "hasliked": 0,
            "id": "XctGWs",
            "likes": 4,
            "name": "Another Rule 110",
            "published": 3,
            "tags": [
                "cellularautomata",
                "rule110"
            ],
            "usePreview": 0,
            "username": "krazykylep",
            "viewed": 154
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(vec2 co) {\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iuv = ivec2(fragCoord.xy);\n    if (iFrame < 2 && fragCoord.x < 1.) {\n        // set up initial state\n        fragColor = vec4(round(rand(vec2(fragCoord.y, fract(iDate.w / 1000.)))));\n    } else if (iFrame > 1) {\n        if (fragCoord.x < 1.) {\n            // calculate next gen if we are on column 0\n            vec4 up = texelFetch(iChannel0, iuv + ivec2(0, 1), 0);\n            vec4 center = texelFetch(iChannel0, iuv, 0);\n            vec4 down = texelFetch(iChannel0, iuv + ivec2(0, -1), 0);\n            if ((up.r > 0.5 && center.r > 0.5 && down.r > 0.5) || (up.r > 0.5 && center.r > 0.5 && down.r < 0.5) || (up.r < 0.5 && center.r < 0.5 && down.r < 0.5)) {\n                fragColor = vec4(1.);\n            } else {\n                fragColor = vec4(0.);\n            }\n        } else {\n            // move all other columns towards the right by copying your left neighbor.\n            vec4 pixelLookupL = texelFetch(iChannel0, iuv + ivec2(-1, 0), 0);\n            fragColor = pixelLookupL;\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}