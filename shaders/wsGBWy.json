{
    "Shader": {
        "info": {
            "date": "1607850102",
            "description": "Simulates rays trajectory around a white fountain (opposite of blackhole) along a 2D slice.\njust reusing [url]https://shadertoy.com/view/wdt3zM[/url] with opposite sign.",
            "flags": 32,
            "hasliked": 0,
            "id": "wsGBWy",
            "likes": 6,
            "name": "light trajectory - 2D white src",
            "published": 3,
            "tags": [
                "simulation",
                "blackhole",
                "physics",
                "optics",
                "relativity",
                "whitefountain"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "// Variant of \"light trajectory - 2D black hole\" https://shadertoy.com/view/wdt3zM\n// Just changing the sign of F,  and smaller Size\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = sqrt( T(U) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define Size .1                      //size of BH ( Schwarzschild radius or photon sphere ? )\n\nvoid mainImage( out vec4 O, vec2 u ) // --- simulates trajectories\n{\n    O = T(u);\n    \n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n\n    if ( T(2).xy != R ) {\n        O -= O;\n        if (u.x<2.) O = vec4(U,1,0);     // init positions: .xy and dir: .zw\n        else if (u==vec2(2.5)) O.xy = R; // for testing window size change\n            else O += .3*S( length(U) - .625*Size ); // draw BH photon sphere. why .625 ?\n        return;\n    }\n    if (u==vec2(2.5)) return;\n   \n    if (u.x==.5) {                           // simulates physics\n        // O.xy = pos, O.zw = dir (normalized)\n        // Physics adapted from set111's 3D black hole https://www.shadertoy.com/view/tsBXW3\n        float r = length(O.xy);                   // distance to BH\n        float d  = min( .92,// * abs(O.y /O.w) ,  // conservative distance to disk (y==0)   \n                       min( r*.5,                 // limit step size far from to BH \n                            r*.1 + .05*r*r/Size   // limit step size close to BH \n                      )   );\n        float F = -Size * .625 /(r*r);             // bending force\n        O.zw =  normalize(O.zw - d * F* O.xy/r ); // bend ray towards BH\n        O.xy += d * O.zw;                \n    }\n    else if (u.x==1.5)                       // save prev position for drawing\n        O = T(vec2(.5,u.y));\n    else {                                   // draw rays (new segment)\n        float d = 1e5, i_, i=0., v;\n        for (; i < R.y; i += 5. ) {\n            v = line( U, T(vec2(1,i)).xy, T(vec2(0,i)).xy);\n            if ( v < d ) d = v, i_ = i;\n        }\n        O += S( sqrt(d) -0./R.y ) * hue(i_/R.y);\n    }   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n\n// utils from https://www.shadertoy.com/view/llySRh\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b),                  // proj coord on line\n          c = clamp(h, 0., 1.);\n    p -= b * h; return h==c ? dot(p,p): 1e5;          // distÂ² to segment\n}\n\n#define S(v) smoothstep( 3./R.y, 0., v)\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}