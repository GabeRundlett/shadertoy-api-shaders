{
    "Shader": {
        "info": {
            "date": "1685361448",
            "description": ".",
            "flags": 48,
            "hasliked": 0,
            "id": "mtdSDr",
            "likes": 0,
            "name": "PBR Path tracer attempt 6",
            "published": 3,
            "tags": [
                "pathtracer"
            ],
            "usePreview": 0,
            "username": "pathtracerenthusiast",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "//To change camera settings or the scene, go to the 'Buffer A' tab.\n//To change the bloom threshold settings, go to the 'Buffer B' tab.\n//To set or remove the maximum number of frames or objects go to the 'Common' tab.\n\n//#define Bloom\n\n#define exposure .8\n\n//I used the Bing AI to improve this code.\nvec3 blur(sampler2D s, vec2 p, int w) {\n  vec2 invRes = 1. / vec2(textureSize(s, 0));\n  vec3 color = vec3(0.);\n  float n = 1./float(2*w*w);\n  const float invpi = 1./PI;\n  for (int x = -w; x <= w; x++) {\n    for (int y = -w; y <= w; y++) {\n      vec2 uv = p + vec2(x, y) * invRes;\n      float weight = n*invpi*exp(-float(x*x+y*y)*n);\n      //float weight = 1.;\n      color += texture(s, uv).xyz*weight;\n    }\n  }\n  return color;\n}\n\n#define size 2.75*((R.x+R.y)*.00119048)\nvoid mainImage( out vec4 o,  vec2 i )\n{\n    vec2 p = R-10.;\n    #ifdef maxFrame\n    if(i.x>=p.x&&i.y>=p.y&&iFrame>maxFrame){o=vec4(1.);return;}\n    #endif\n    o = texelFetch(iChannel0,ivec2(i),0);\n    o /= o.w;\n    \n    #ifdef Bloom\n    #ifdef maxFrame\n    if(iFrame>=maxFrame)\n    #endif\n    o.xyz += blur(iChannel1,i/R,int(size));\n    #endif\n    \n    \n    o.xyz *= exposure;\n    \n    o.xyz = ACESFilm(o.xyz);\n    o.xyz = linearToSRGB(o.xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define maxFrame 256\n\n#define R iResolution.xy\n#define PI 3.1415926523\n#define d2r(a) a*(PI/180.)\n#define md(a,b) max(0.,dot(a,b))\n\nfloat _seed;\n// Thanks to Dave_Hoskin for the random numbers\nfloat rand(){\n    float v = fract(_seed*.1031);\n    v *= _seed + 33.33;\n    v *= _seed + _seed;\n    v += 34.35;\n    float a = fract(v);\n    _seed++;\n    _seed *= 2.*a;\n    return a;\n}\n\nvec2 rand2(){\n    vec3 p = fract(_seed*vec3(.1031,.103,.0973));\n    p += dot(p,p.yzx+33.33);\n    vec2 a = fract((p.xx+p.yz)*p.zy);\n    _seed++;\n    _seed *= a.x+a.y;\n    return a;\n}\n\nvoid irand(vec2 i,float t){\n    vec3 p = vec3(i.y,t,i.x);\n    p = fract(p*.1031);\n    p += dot(p,p.zyx+32.31);\n    _seed = fract((p.x+p.y)*p.z);\n}\n\nmat3 rot3(vec3 a){\n    vec3 c = cos(a);\n    vec3 s = sin(a);\n    \n    mat3 xm = mat3(1., 0., 0.,\n                   0., c.x, -s.x,\n                   0., s.x, c.x );\n    \n    mat3 ym = mat3(c.y, 0.,-s.y,\n                   0.,1.,0.,\n                   s.y,0.,c.y);\n    \n    mat3 zm = mat3(c.z,s.z,0.,\n                   -s.z,c.z,0.,\n                   0.,0.,1.);\n    \n    \n    return xm*ym*zm;\n}\n\n\nstruct Mat {\n    float r;\n    float m;\n    vec3 col;\n    vec3 ems;\n    float IOR;\n    float scatDens;\n};\n\n\nstruct AABB {\n    vec3 minv,maxv;\n};\n\nstruct SphBody {\n    vec3 c;\n    float rad;\n    bool isActive;\n};\n\nstruct BoxBody {\n    vec3 pos,size,rot;\n    bool inverted, isActive;\n};\n\nstruct QuadBody {\n    vec3 v0,v1,v2,v3;\n    bool fn, isActive;\n};\n\nstruct Obj {\n    SphBody sph;\n    BoxBody box;\n    QuadBody quad;\n    Mat mat;\n    AABB bound;\n};\n\nstruct BVHNode {\n    AABB bound;\n    uint left,right;\n};\n\nstruct Viewer {\n    vec3 uu;\n    vec3 vv;\n    vec3 ww;\n    vec3 ro;\n};\n\nstruct NewHit {\n    float len;\n    vec3 nor;\n    Obj o;\n    bool ff;\n};\n\nstruct IntRes {\n    float len;\n    bool ff;\n};\n\n#define DefaultSph SphBody(vec3(0.),0.,false)\n#define DefaultBox BoxBody(vec3(0.),vec3(0.),vec3(0.),false,false)\n#define DefaultQuad QuadBody(vec3(0.),vec3(0.),vec3(0.),vec3(0.),false,false)\n\n#define objC 9\nstruct NewWorld {\n    Obj objs[objC];\n    Viewer camera;\n};\n\nObj Obj_Sphere(vec3 pos,float rad,Mat m){\n    AABB bound = AABB(pos-rad-.0001,pos+rad+.0001);\n    return Obj(SphBody(pos,rad,true),DefaultBox,DefaultQuad,m,bound);\n}\n\nvoid createObj_HollowSphere(vec3 pos,float rad,float thickness,int idx0,int idx1,Mat m,inout Obj objlst[objC]){\n    objlst[idx0] = Obj_Sphere(pos,rad,m);\n    objlst[idx1] = Obj_Sphere(pos,thickness-rad,m);\n}\n\nObj Obj_Box(vec3 pos,vec3 size,vec3 rot,Mat m){\n    AABB bound = AABB(pos-2.*size-.001,pos+2.*size+.0001);\n    return Obj(DefaultSph,BoxBody(pos,size,rot,false,true),DefaultQuad,m,bound);\n}\n\nvoid createObj_HollowBox(vec3 pos,vec3 size,vec3 rot,float thickness,int idx0,int idx1,Mat m,inout Obj objlst[objC]){\n    objlst[idx0] = Obj_Box(pos,size,rot,m);\n    AABB bound = AABB(pos-2.*abs(size)-.001+thickness,pos+2.*abs(size)+.0001-thickness);\n    objlst[idx1] = Obj(DefaultSph,BoxBody(pos,size-thickness,rot,true,true),DefaultQuad,m,bound);\n}\n\nObj Obj_Quad(vec3 v0,vec3 v1,vec3 v2,vec3 v3,bool fn,Mat m){\n    vec3 minv = min(min(v0,v1),min(v2,v3));\n    vec3 maxv = max(max(v0,v1),max(v2,v3));\n    AABB bound = AABB(minv,maxv);\n    return Obj(DefaultSph,DefaultBox,QuadBody(v0,v1,v2,v3,fn,true),m,bound);\n}\n\nIntRes newSphereInt( in vec3 ro, vec3 rd, SphBody sph) {\n    ro -= sph.c;\n    float b = dot( ro, rd );\n    float c = dot( ro, ro ) - sph.rad*sph.rad;\n    float h = b*b - c;\n    if( h<0. ) return IntRes(-1.,false);\n    h = sqrt( h );\n    if(length(ro)<=sph.rad){\n        return IntRes(-b+h,false);\n    }else{\n        return IntRes(-b-h,true);\n    }\n}\n\nbool insideAabb(vec3 p,vec3 s){\n    return (p.x<=s.x&&p.x>=-s.x)&&(p.y<=s.y&&p.y>=-s.y)&&(p.z<=s.z&&p.z>=-s.z);\n}\n\nIntRes newBoxInt( in vec3 ro, in vec3 rd, BoxBody box) {\n    mat3 r = rot3(-box.rot);\n    \n    ro *= r; rd *= r;\n    ro -= box.pos;\n    vec3 m = 1./rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*abs(box.size);\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.) return IntRes(-1.,false);\n    if(insideAabb(ro,abs(box.size))){\n        return IntRes(tF,box.inverted);\n    }else{\n        return IntRes(tN,!box.inverted);\n    }\n}\n\nfloat newQuadInt(vec3 ro,vec3 rd,QuadBody q){\n    vec3 n = cross(q.v1-q.v0,q.v2-q.v0);\n    float d = dot(n, q.v0);\n    \n    float nd = dot(n, rd);\n    if (abs(nd) < 1e-6) return -1.;\n    \n    float t = (d - dot(n, ro)) / nd;\n    if (t < 0.) return -1.;\n    vec3 p = ro + t * rd;\n    \n    vec3 e0 = q.v1 - q.v0;\n    vec3 e1 = q.v2 - q.v1;\n    vec3 e2 = q.v3 - q.v2;\n    vec3 e3 = q.v0 - q.v3;\n    vec3 c0 = p - q.v0;\n    vec3 c1 = p - q.v1;\n    vec3 c2 = p - q.v2;\n    vec3 c3 = p - q.v3;\n    if (dot(n, cross(e0, c0)) > 0. &&\n        dot(n, cross(e1, c1)) > 0. &&\n        dot(n, cross(e2, c2)) > 0. &&\n        dot(n, cross(e3, c3)) > 0.) {\n        return t;\n    }\n    \n    return -1.;\n}\n\nbool aabbInt(in vec3 ro,vec3 rd,AABB box){\n    vec3 a = .5*(box.maxv+box.minv);\n    vec3 d = .5*(box.maxv-box.minv);\n    vec3 m = 1./rd;\n    vec3 n = m*(ro-a); \n    vec3 k = abs(m)*d;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.) return false;\n    return true;\n}\n\n\n\nconst float bias = 1.0001;\nvec3 newBoxNor(vec3 p,BoxBody b){\n    vec3 q = p-b.pos;\n    vec3 d = b.size;\n    return normalize(vec3(ivec3(q/d*bias)));\n}\n\nvec3 cosDir(vec3 nor)\n{\n    float u = rand();\n    float v = rand();\n    float a = 2.*PI*v; float b = 2.*u-1.;\n    vec3 dir = vec3(sqrt(1.-b*b)*vec2(cos(a),sin(a)),b);\n    return normalize(nor+dir);\n}\nvec3 cosDir2(vec3 N){\n    float u1 = rand(),u2 = rand(),\n    r = sqrt(1.-u1*u1),\n    phi = 2.*PI*u2;\n    vec3 dir = vec3(\n    cos(phi)*r,\n    sin(phi)*r,\n    u1\n    );\n    \n    vec3 up = N.z<1.?vec3(0.,0.,1.):vec3(0.,1.,0.),\n    tangent = normalize(cross(up,N)),\n    bitangent = cross(N,tangent);\n    \n    return tangent*dir.x +\n    bitangent*dir.y +\n    N*dir.z;\n} \nvec3 uniformVec(void)\n{\n    float phi = rand()*2.*PI;\n    float z = rand()*2.-1.;\n    float r = sqrt(1.-z*z);\n    float x = r*cos(phi), y = r*sin(phi);\n\treturn vec3(x,y,z);\n}\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2( c,-s,\n                 s, c);\n}\nvec3 clip(vec3 N,vec3 D){\n    return normalize(N+2.*D*abs(dot(N,-D)));\n}\nvec3 hemi(vec3 h){\n    return clip(uniformVec(),-h);\n}\n\n\nvec3 LessThan(vec3 f, float val) {\n    return vec3(\n        (f.x < val) ? 1. : 0.,\n        (f.y < val) ? 1. : 0.,\n        (f.z < val) ? 1. : 0.);\n}\n \nvec3 linearToSRGB(vec3 rgb) {\n    rgb = clamp(rgb, 0., 1.);\n     \n    return mix(\n        pow(rgb, vec3(1. / 2.4)) * 1.055 - .055,\n        rgb * 12.92,\n        LessThan(rgb, .0031308)\n    );\n}\n \nvec3 SRGBToLinear(vec3 rgb) {\n    rgb = clamp(rgb, 0., 1.);\n     \n    return mix(\n        pow(((rgb + .055) / 1.055), vec3(2.4)),\n        rgb / 12.92,\n        LessThan(rgb, 0.04045)\n    );\n}\n\nvec3 ACESFilm(vec3 x) {\n    float a = 2.51;\n    float b = .03;\n    float c = 2.43;\n    float d = .59;\n    float e = .14;\n    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0., 1.);\n}\n\nvec3 importanceGGX(float r,vec3 N){\n    float a2 = r*r*r*r,\n    phi = 2.*PI*rand(),\n    u2 = rand(),\n    cosT = sqrt((1.-u2)/(1.+(a2-1.)*u2)),\n    sinT = sqrt(1.-cosT*cosT);\n    \n    vec3 H = vec3(\n    cos(phi)*sinT,\n    sin(phi)*sinT,\n    cosT),\n    \n    up = abs(N.z)<.999?vec3(0.,0.,1.):vec3(1.,0.,0.),\n    tangent = normalize(cross(up,N)),\n    bitangent = cross(N,tangent);\n    \n    return normalize(H.x*tangent+H.y*bitangent+H.z*N);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//NOTE: When making any changes in the code in this tab, and the mode is zero,\n//you must reset the time for the changes to take effect.\n#define shutAp .6\n#define fcsDist 4.5\n#define blurAmt .001\n#define numLvls 8\n#define spp 1.\n#define FOV 75.\n#define fovInDeg 1\n#define SkyMode 2\n#define airDens .0001\nconst float mode = 0.;\n//mode=0.: Develop; the image develops over multiple frames.\n//mode=1.; Realtime; the image is signifigantly more noisy, but changes take effect\n//immediatly.\n//Any other value of mode: FPS; same as Develop, but resets the image every\n//->mode<- frames. FPS MODE NOT RECCOMENDED. Develop mode reccomended.\n\n//To add objects, look in the 'Common' tab.\n\n\n//NOTE: Component order:\n// - Roughness [0,1]\n// - Metalness [0,1]\n// - Diffuse Color (Color)\n// - Emmissive Color (Color)\n// - IOR {>1}\n\n//NOTE: Diffuse occurs if you set the -§density§- higher,\n//make it rougher, lower the IOR on a dielectric.\n\nNewWorld getNewWorld(float t){\n    NewWorld world;\n    Viewer cam = Viewer(vec3(1.,0.,0.),vec3(0.,1.,0.),vec3(0.,0.,1.),vec3(.5,2.25,-3.));\n    \n    mat2 rx = rot(d2r(-20.));\n    cam.uu.zy *= rx;\n    cam.vv.zy *= rx;\n    cam.ww.zy *= rx;\n    \n    mat2 ry = rot(-d2r(-5.));\n    cam.uu.xz *= ry;\n    cam.vv.xz *= ry;\n    cam.ww.xz *= ry;\n    \n    mat2 rz = rot(-d2r(0.));\n    cam.uu.yx *= rz;\n    cam.vv.yx *= rz;\n    cam.ww.yx *= rz;\n    \n    world.objs[0] = Obj_Sphere(vec3(0.,-27.001,0.),25.,Mat(.9,1.,vec3(.3,.5,1.),vec3(0.),1.2,.2));\n    //createObj_HollowSphere(vec3(-1.5,-.5,3.),1.5,.4,1,8,Mat(.2,vec3(1.),vec3(0.),0.,vec3(1.),1.52,false),world.objs);\n    world.objs[1] = Obj_Sphere(vec3(-1.5,-.5,3.),1.5,Mat(.1,0.,vec3(1.),vec3(0.),1.5,.005));\n    world.objs[2] = Obj_Sphere(vec3(1.5,-1.,2.),1.,Mat(.9,0.,vec3(.8),vec3(0.),1.5,0.));\n    world.objs[3] = Obj_Quad(vec3(-3.5,-2.,-2.),vec3(3.5,-2.,-2.),vec3(3.5,-2.,3.5),vec3(-3.5,-2.,3.5),true,Mat(.75,.75,vec3(1.),vec3(0.),1.5,.0025));\n    world.objs[4] = Obj_Quad(vec3(-3.5,-2.,-2.),vec3(-3.5,1.5,-2.),vec3(-3.5,1.5,3.5),vec3(-3.5,-2.,3.5),false,Mat(.5,.5,vec3(1.,.1,.1),vec3(0.),1.5,.005));\n    world.objs[5] = Obj_Quad(vec3(3.5,-2.,-2.),vec3(3.5,1.5,-2.),vec3(3.5,1.5,3.5),vec3(3.5,-2.,3.5),true,Mat(.25,.25,vec3(.1,1.,.1),vec3(0.),1.5,.0075));\n    //world.objs[6] = Obj_Quad(vec3(-3.5,5.,-2.),vec3(3.5,5.,-2.),vec3(3.5,5.,3.5),vec3(-3.5,5.,3.5),false,Mat(0.,1.52,vec3(1.),vec3(0.),.5,vec3(1.),0.,vec3(1.)));\n    world.objs[7] = Obj_Box(vec3(0.,4.,.75),vec3(1.5,.5,1.5),d2r(vec3(0.)),Mat(.5,0.,vec3(.75,.775,.9),vec3(10.),1.5,0.));\n    world.objs[8] = Obj_Box(vec3(0.,-1.,-.75),vec3(1.),d2r(vec3(0.)),Mat(.1,1.,vec3(1.),vec3(0.),1.5,0.));\n    //TODO: Generate bounding boxes\n    \n    \n    world.camera = cam;\n    return world;\n}\n\nNewHit newInt(vec3 ro,vec3 rd,Obj objs[objC]){\n    NewHit h;\n    h.len = -1.;\n    \n    for(int i = 0; i < objC; i++) {\n        Obj o = objs[i];\n        //if(!aabbInt(ro,rd,o.bound)) continue;\n        if(o.sph.isActive) {IntRes res = newSphereInt(ro,rd,o.sph);if(res.len>=.0001&&(res.len<h.len||h.len<0.)){h.o=o;h.ff=res.ff;h.len=res.len;}}\n        else if(o.box.isActive) {IntRes res = newBoxInt(ro,rd,o.box);if(res.len>=.0001&&(res.len<h.len||h.len<0.)){h.o=o;h.ff=res.ff;h.len=res.len;}}\n        else if(o.quad.isActive) {float res = newQuadInt(ro,rd,o.quad);if(res>=.0001&&(res<h.len||h.len<0.)){h.o=o;h.ff=true;h.len=res;}}\n    }\n    \n    Obj o = h.o;\n    vec3 p = ro+rd*h.len;\n    \n    if(o.sph.isActive) h.nor = normalize(p-o.sph.c);//*sign(o.sph.rad);\n    else if(o.box.isActive) {BoxBody b = o.box;mat3 r = rot3(b.rot);mat3 rn = rot3(-b.rot);h.nor = newBoxNor(b.pos+(p-b.pos)*rn,b)*r;}\n    else if(o.quad.isActive) {QuadBody q = o.quad;h.nor = normalize(cross(q.v1-q.v0,q.v2-q.v0))*(q.fn?-1.:1.);}\n    \n    //h.nor *= h.ff?1.:-1.;\n    \n    return h;\n}\n\nconst vec3 sunDir = normalize(vec3(.5,1.,.75));\n//Sebastian Lagues's sky function\nvec3 getSky(float t,vec3 rd) {\n    #if SkyMode == 1\n    float skyGradT = pow(smoothstep(0.,.4,rd.y),.35);\n    vec3 skyGrad = mix(vec3(.05),vec3(.3,.6,.9),skyGradT);\n    \n    vec3 sun = pow(max(0.,dot(rd,sunDir)),40.)*10.*vec3(1.,.85,.7);\n    \n    float groundT = smoothstep(-.01,0.,rd.y);\n    \n    return mix(vec3(.25),skyGrad,groundT)+sun;\n    #elif SkyMode == 0\n    return vec3(0.);\n    #elif SkyMode == 2\n    return SRGBToLinear(texture(iChannel1,rd).xyz);\n    #endif\n}\n\nvec3 newRay(inout vec3 ro,inout vec3 L,vec3 P,in vec3 N,Mat m,bool ff) {\n    vec3 oro = ro, V = -L;\n    ro = P;\n    \n    float T = length(oro-P);\n    float scatterProb = 1.-exp(-T*(ff?airDens:m.scatDens));\n    if(scatterProb>rand()){\n        P = oro-V*rand()*T;\n        N = hemi(V);\n        L = reflect(-V,N);\n        return m.col;\n    }\n    \n    float F = pow(1.-md(-V,sign(dot(-V,N))*N),5.);\n    float r = m.r+(1.-m.r)*F;\n    vec3 H = importanceGGX(r,N);\n    if(m.m>rand()){ // Metal (Glossy Reflection)\n        L = reflect(-V,mix(H,N,round(rand())));\n        return m.col;\n    } else { // Dielectric (Refraction)\n        float eta = ff?1./m.IOR:m.IOR;\n        L = refract(-V,H,eta);\n        if(length(L)==0.) L = reflect(-V,H);\n        return m.col;\n    }\n}\n\nvoid mainImage( out vec4 o, in vec2 i ){\n    #ifdef maxFrame\n    if(iFrame>=maxFrame) {o=texelFetch(iChannel0,ivec2(i),0);return;}\n    #endif\n    irand(i,float(iFrame));\n    \n    float ftime;\n    if(mode==0.){\n        o = texelFetch(iChannel0,ivec2(i),0);\n        ftime = 0.;\n    } else if(mode==1.) {\n        o = vec4(0.);\n        ftime = iTime;\n    }else{\n        if(iTimeDelta*mode>1.) {\n        o = vec4(0.);\n        }else{\n        o = texelFetch(iChannel0,ivec2(i),0);\n        }\n        ftime = floor(iTime*mode)/mode;\n    }\n    if(texture(iChannel3, vec2(32.5/256.0,0.25)).x > 0.1) o = vec4(0.);\n    \n    #if fovInDeg==0\n    float dv = 1./tan(FOV/2.);\n    #else\n    float dv = 1./tan(PI*FOV/360.);\n    #endif\n    \n    vec3 ttcol = vec3(0.);\n    for(float _i = 0.; _i<spp;_i++) {\n        vec2 p1 = (-R+ 2.*(i + rand2())) / R.y;\n        \n        vec3 er = normalize(vec3(p1,dv));\n        float ctime = ftime - rand()*shutAp/24.;\n        \n        NewWorld world = getNewWorld(ctime);\n        Viewer cam = world.camera;\n        \n        vec3 rd = er.x*cam.uu + er.y*cam.vv+er.z*cam.ww;\n        \n        vec3 go = blurAmt*vec3(-1.+2.*rand2(),0.);\n        vec3 gd = normalize( er*fcsDist-go );\n        cam.ro += go.x*cam.uu + go.y*cam.vv;\n        rd += gd.x*cam.uu + gd.y*cam.vv;\n        rd = normalize(rd);\n        \n        vec3 tcol = vec3(0.);\n        vec3 fcol = vec3(1.);\n        for(int _j = 0; _j<numLvls;_j++) {\n            NewHit hit = newInt(cam.ro,rd,world.objs); \n            if(hit.len==-1.) {tcol+=getSky(ctime,rd)*fcol;break;}                             \n            \n            vec3 p = hit.len*rd+cam.ro;\n            \n            Mat mat = hit.o.mat;\n            \n            \n            tcol += mat.ems*fcol;\n            fcol *= newRay(cam.ro,rd,p,hit.nor,mat,hit.ff);\n            \n            #if 1\n            {\n                float r_p = max(.0001,max(fcol.x,max(fcol.y,fcol.z)));\n                if(rand()>r_p) break;\n                fcol /= r_p;\n            }\n            #endif\n        }\n        \n        ttcol += tcol;\n    }\n    if(ttcol.x!=ttcol.x) ttcol.x = 0.;\n    if(ttcol.y!=ttcol.y) ttcol.y = 0.;\n    if(ttcol.z!=ttcol.z) ttcol.z = 0.;\n    o += vec4(ttcol / spp,1.);\n    //o = vec4(i*.001,.5,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 o, vec2 i )\n{\n    o = texture(iChannel0,i/R);\n    o /= o.w;\n    float d = dot(o.xyz,vec3(1.));\n    o.xyz = d>7.5?o.xyz:vec3(0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}