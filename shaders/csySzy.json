{
    "Shader": {
        "info": {
            "date": "1681294873",
            "description": "Synthesizes steins;gate's \"gate of steiner -piano-\" MIDI.\n- With destructive wave interference, try putting two stereo speakers together, it will get quiter.\n- Wrote custom MIDI to glsl converter program for this",
            "flags": 8,
            "hasliked": 0,
            "id": "csySzy",
            "likes": 3,
            "name": "Steins;Gate synth",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "piano",
                "synth",
                "synthesizer",
                "gate",
                "midi",
                "steins"
            ],
            "usePreview": 1,
            "username": "Peace",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "float getSound(float x)\n{\n    return MainSound(0, x + iTime).x;\n}\n\n//Math constants\n#define PI 3.14159\n#define TWO_PI 6.28318\n\n//Frequency range to which the halo reacts currently set to 0-512hz\n#define FREQ 512.0\n \nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat luma(vec3 color) \n{\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvn = uv * 2.0 - 1.0;\n    uvn.x *= iResolution.x / iResolution.y;\n    \n    float angle = atan(normalize(uvn).x, normalize(uvn).y);\n    float angleNormalized = angle / PI;\n\n    float inner_halo = max(pow(1.0 - abs(length(uvn) - 0.6), 8.0), 0.0) * 2.0;\n    inner_halo *= inner_halo;\n    \n\tfloat outer_halo = max(pow(abs(length(uvn)), 4.0), 0.0) * 0.25;\n    float halo = inner_halo + outer_halo;\n    \n    float s = abs(getSound(abs(angleNormalized) * 2.0));\n    \n    vec3 col = halo * hsv2rgb(vec3(angleNormalized * 0.5 + 0.5 - iTime * 0.1, 1.0, 1.0)) * s;\n    \n    col = pow(col, vec3(2));\n    col += max(length(col) / sqrt(3.0) - 1.0, 0.0);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time)\n{\n    return MainSound(samp, time);\n}                            ",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "const float T = 6.28318531;\n\nfloat x = 0.0; // Current time\nfloat o = 0.0;\n\nfloat w(float freq) {\n    return sin((x * freq + o) * T);\n}\n\nfloat env(float start, float duration, float attack) {\n    float dt = max(0.0, x - start);\n    return min(dt / attack, exp(2.0 * (attack - dt) / sqrt(duration)));\n} \n\nfloat p(float freq, float start, float duration) {\n    float s = 0.0;\n    s += w(freq * 1.0) * 0.15;\n    s += w(freq * 2.0) * 0.2;\n    s += w(freq * 4.0) * 0.075;\n    s += w(freq * 6.0) * 0.015;\n    return s * env(start, duration, 0.001);\n}\n\nfloat music() {\n    float s = 0.0;\n    s+=p(392., 0.02, 0.04)+p(466.16, 0.03, 0.04)+p(622.25, 0.04, 0.04)+p(293.66, 0.12, 0.04)+p(392., 0.20, 0.04)+p(466.16, 0.28, 0.04)+p(587.33, 0.36, 0.04)+p(293.66, 0.44, 0.04)+p(392., 0.52, 0.04)+p(466.16, 0.60, 0.04)+p(554.37, 0.68, 0.04)+p(293.66, 0.76, 0.04)+p(392., 0.84, 0.04)+p(466.16, 0.92, 0.04)+p(587.33, 1., 0.04)+p(293.66, 1.08, 0.04)+p(392., 1.16, 0.04)+p(466.16, 1.24, 0.04)+p(196., 0.04, 1.28)+p(622.25, 1.32, 0.04)+p(440., 1.32, 0.04)+p(293.66, 1.40, 0.04)+p(392., 1.48, 0.04)+p(440., 1.56, 0.04)+p(587.33, 1.64, 0.04)+p(293.66, 1.72, 0.04)+p(392., 1.80, 0.04)+p(440., 1.88, 0.04)+p(554.37, 1.96, 0.04)+p(293.66, 2.04, 0.04)+p(392., 2.12, 0.04)+p(440., 2.20, 0.04)+p(587.33, 2.28, 0.04)+p(293.66, 2.36, 0.04)+p(392., 2.44, 0.04)+p(440., 2.52, 0.04)+p(196., 1.32, 1.28)+p(622.25, 2.60, 0.04)+p(415.30, 2.60, 0.04)+p(261.63, 2.68, 0.04)+p(392., 2.76, 0.04)+p(415.30, 2.84, 0.04)+p(587.33, 2.92, 0.04)+p(261.63, 3., 0.04)+p(392., 3.08, 0.04)+p(415.30, 3.16, 0.04)+p(523.25, 3.24, 0.04)+p(261.63, 3.32, 0.04)+p(392., 3.40, 0.04)+p(415.30, 3.48, 0.04)+p(587.33, 3.56, 0.04)+p(261.63, 3.64, 0.04)+p(392., 3.72, 0.04)+p(415.30, 3.80, 0.04)+p(174.61, 2.60, 1.28)+p(349.23, 3.88, 0.04)+p(523.25, 3.88, 0.04)+p(220., 3.96, 0.04)+p(349.23, 4.04, 0.04)+p(392., 4.12, 0.04)+p(523.25, 4.20, 0.04)+p(220., 4.28, 0.04)+p(349.23, 4.36, 0.04)+p(392., 4.44, 0.04)+p(146.83, 3.88, 0.68)+p(196., 4.52, 0.04)+p(587.33, 4.52, 0.04)+p(493.88, 4.52, 0.04)+p(293.66, 4.68, 0.04)+p(349.23, 4.76, 0.04)+p(174.61, 4.84, 0.04)+p(246.94, 4.86, 0.04)+p(698.46, 4.88, 0.04)+p(622.25, 4.96, 0.04)+p(587.33, 5.04, 0.04)+p(523.25, 5.12, 0.04);\n    s+=p(196., 5.20, 0.04)+p(293.66, 5.28, 0.04)+p(440., 5.36, 0.04)+p(466.16, 5.44, 0.04)+p(1244.51, 5.20, 0.32)+p(622.25, 5.20, 0.32)+p(196., 5.52, 0.04)+p(293.66, 5.60, 0.04)+p(440., 5.68, 0.04)+p(466.16, 5.76, 0.04)+p(587.33, 5.52, 0.32)+p(1174.66, 5.52, 0.32)+p(196., 5.84, 0.04)+p(293.66, 5.92, 0.04)+p(440., 6., 0.04)+p(466.16, 6.08, 0.04)+p(554.37, 5.84, 0.32)+p(1108.73, 5.84, 0.32)+p(196., 6.16, 0.04)+p(293.66, 6.24, 0.04)+p(440., 6.32, 0.04)+p(466.16, 6.40, 0.04)+p(587.33, 6.16, 0.32)+p(1174.66, 6.16, 0.32)+p(196., 6.48, 0.04)+p(277.18, 6.56, 0.04)+p(392., 6.64, 0.04)+p(440., 6.72, 0.04)+p(1244.51, 6.48, 0.32)+p(622.25, 6.48, 0.32)+p(196., 6.80, 0.04)+p(277.18, 6.88, 0.04)+p(392., 6.96, 0.04)+p(440., 7.04, 0.04)+p(1174.66, 6.80, 0.32)+p(587.33, 6.80, 0.32)+p(196., 7.12, 0.04)+p(277.18, 7.20, 0.04)+p(392., 7.28, 0.04)+p(440., 7.36, 0.04)+p(1108.73, 7.12, 0.32)+p(554.37, 7.12, 0.32)+p(196., 7.44, 0.04)+p(277.18, 7.52, 0.04)+p(392., 7.60, 0.04)+p(440., 7.68, 0.04)+p(587.33, 7.44, 0.32)+p(1174.66, 7.44, 0.32)+p(622.25, 7.72, 0.04)+p(830.61, 7.74, 0.04)+p(174.61, 7.76, 0.04)+p(261.63, 7.84, 0.04)+p(392., 7.92, 0.04)+p(415.30, 8., 0.04)+p(1046.50, 7.76, 0.32)+p(523.25, 8.16, 0.04)+p(698.46, 8.24, 0.04)+p(783.99, 8.32, 0.04)+p(207.65, 8.40, 0.32)+p(392., 8.40, 0.32)+p(523.25, 8.40, 0.32)+p(1046.50, 8.40, 0.32)+p(329.63, 8.40, 0.32)+p(196., 8.72, 0.32)+p(130.81, 8.72, 0.32)+p(932.33, 8.72, 0.32)+p(466.16, 8.72, 0.32)+p(174.61, 9.08, 0.04)+p(261.63, 9.16, 0.04)+p(311.13, 9.24, 0.04)+p(392., 9.32, 0.04)+p(415.30, 9.04, 0.68)+p(523.25, 9.06, 0.66)+p(783.99, 9.08, 0.64)+p(87.31, 9.72, 0.68)+p(196., 9.72, 1.28)+p(261.63, 9.72, 1.28)+p(207.65, 9.72, 1.28)+p(130.81, 10.84, 0.16)+p(87.31, 11., 0.24)+p(349.23, 11., 0.24)+p(207.65, 11.24, 0.40)+p(196., 11.24, 0.40)+p(130.81, 11.24, 0.40)+p(87.31, 11.64, 0.24)+p(261.63, 11.24, 0.80)+p(349.23, 12.04, 0.04)+p(261.63, 12.12, 0.04)+p(349.23, 12.20, 0.04)+p(130.81, 11.88, 0.40)+p(196., 11.88, 0.40)+p(207.65, 11.88, 0.40)+p(130.81, 12.28, 0.24)+p(392., 12.28, 0.24)+p(196., 12.52, 0.40)+p(155.56, 12.52, 0.40)+p(233.08, 12.52, 0.40)+p(130.81, 12.92, 0.24)+p(261.63, 12.52, 0.80)+p(392., 13.32, 0.04)+p(261.63, 13.40, 0.04)+p(392., 13.48, 0.04)+p(196., 13.16, 0.40)+p(233.08, 13.16, 0.40)+p(155.56, 13.16, 0.40)+p(155.56, 13.56, 0.24)+p(415.30, 13.56, 0.40)+p(415.30, 13.96, 0.04)+p(466.16, 14.04, 0.04)+p(415.30, 14.12, 0.04)+p(233.08, 13.80, 0.40)+p(207.65, 13.80, 0.40)+p(174.61, 13.80, 0.40)+p(77.78, 14.20, 0.24)+p(392., 14.20, 0.40)+p(392., 14.60, 0.04)+p(622.25, 14.68, 0.04)+p(523.25, 14.76, 0.04)+p(155.56, 14.44, 0.40)+p(196., 14.44, 0.40)+p(233.08, 14.44, 0.40)+p(87.31, 14.84, 0.24)+p(233.08, 15.32, 0.04)+p(196., 15.08, 0.36);\n    return s;\n}\n\nvec2 MainSound(int samp, float time) {\n    x = time / 2.5 - 0.2;\n    \n    float m = music();\n    \n    // Destructive Wave Interference (for fun)\n    // uncomment and when you bring L/R speakers together sound gets quitter\n    //o = 0.5;\n    //float m2 = music(); \n    //return vec2(m, m2);\n    \n    return vec2(m);\n}                            ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}