{
    "Shader": {
        "info": {
            "date": "1620139820",
            "description": "Made for the willstall challenge - 1 shader a week keeps the depression meek\n\nTwo layers of reaction-diffusion which change each-other's parameters \nPress space to reset the sim \nPressing shift changes switches between the two layers\n",
            "flags": 48,
            "hasliked": 0,
            "id": "NdjXWh",
            "likes": 5,
            "name": "Two Layers Reaction-Diffusion",
            "published": 3,
            "tags": [
                "mouse",
                "diffusion",
                "reaction"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 449
        },
        "renderpass": [
            {
                "code": "vec2 getBufferOutput(vec2 uv)\n{\n    if(mergeOutputs)\n    {\n        vec2 outputs = mix(texture(iChannel0, uv).xy, texture(iChannel1, uv).xy, .5);\n        return outputs/maxAmount;\n    } else \n    {\n        if(keyToggled(iChannel2, SHIFT_KEY))\n        {\n            return texture(iChannel0, uv).xy/maxAmount;\n        } else \n        {\n            return texture(iChannel1, uv).xy/maxAmount;\n        }\n    }\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 bufferOutput = getBufferOutput(uv);\n    \n    if(usingPalette)\n    {\n        bool shiftPressed = keyToggled(iChannel2, SHIFT_KEY);\n        fragColor = vec4(pal(bufferOutput.x, palettes[shiftPressed ? 1 : 0]) , 1.0);\n    } else \n    {\n        fragColor = vec4(bufferOutput.xxx,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int bufferCount = 2;\n\n//---- reaction-diffusion constants\nconst float firstDiffusionRate[bufferCount] = float[bufferCount]( 1.0, .8);\nconst float growthRate[bufferCount] = float[bufferCount](.03, .025);\nconst float growthVariation[bufferCount] = float[bufferCount](.018, .010);\n\nconst float secondDiffusionRate[bufferCount] = float[bufferCount](.4, .4);\nconst float deathRate[bufferCount] = float[bufferCount](.057, .057);\nconst float deathVariation[bufferCount] = float[bufferCount](.001, .003);\n\nconst float startRadius[bufferCount] = float[bufferCount](.05, .05);\n\nconst float maxAmount = 1.0;\nconst float speed = 100.0;\n\nconst bool useMouse = false;\nconst float mouseRadius = .1;\n\nconst bool mergeOutputs = false;\n\n//---- aesthetic constants\nconst bool usingPalette = true; //true: v gets converted to palette\n\nstruct Palette \n{\n    vec3 a, b, c, d;\n};\n\nconst Palette palettes[bufferCount] = Palette[bufferCount](\n    Palette(\n        vec3(0.5,0.5,0.5),\n        vec3(0.5,0.5,0.5),\n        vec3(1.0,1.0,0.5),\n        vec3(0.8,0.90,0.30)),\n    Palette(\n        vec3(0.5,0.5,0.5),\n        vec3(0.5,0.5,0.7),\n        vec3(1.0,1.0,1.0),\n        vec3(0.05,0.10,0.1))\n);\n\n//from iq: https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, Palette p )\n{\n    return p.a + p.b*cos( 6.28318*(p.c*t+p.d) );\n}\n\n//---- kernel stuff\nconst float laplacianKernel[9] = float[9](\n    .05, .2, .05, \n    .2, -1., .2, \n    .05, .2, .05);\n    \nvec2 _applyKernel(vec2 uv, vec2 resolution, sampler2D image, float kernel[9])\n{\n    vec2 pixelSize = 1./resolution.xy;\n    vec2 afterKernel = vec2(.0);\n    for(int i = 0; i < 3; i++)\n    for(int j = 0; j < 3; j++)\n    {\n        vec2 sampleUV = uv + vec2(float(i-1), float(j-1)) * pixelSize;\n        afterKernel += texture(image, sampleUV).xy * kernel[j*3+i];\n    }\n    \n    return afterKernel;\n}\n#define applyKernel(uv, image, kernel) _applyKernel(uv, iResolution.xy, image, kernel)\n\n//---- boilerplate\n\n#define keyPressed(sampler, ascii) (texelFetch(sampler,ivec2(ascii, 0), 0).x > 0.0)\n#define keyToggled(sampler, ascii)  ( texelFetch(sampler,ivec2(ascii,2),0).x > 0.)\nconst int SPACE_KEY = 32;\nconst int SHIFT_KEY = 16;\n\n//---- reaction-diffusion macro\n\n#define REACTION_DIFFUSION(number) \\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \\\n{\\\n    vec2 bufferUV = fragCoord.xy/iResolution.xy; \\\n    float aspectRatio = iResolution.x/iResolution.y;\\\n    \\\n    vec2 aspectCorrectedUV = bufferUV;\\\n    aspectCorrectedUV.x *= aspectRatio;\\\n    \\\n    if(iFrame < 3 || keyPressed(iChannel1, SPACE_KEY))\\\n    {\\\n        fragColor = vec4(1.0, distance(aspectCorrectedUV, vec2(.5*aspectRatio,.5)) < startRadius[number], .0, 1.0);\\\n        return;\\\n    }\\\n    \\\n    if(useMouse)\\\n    {\\\n        vec2 mouse = iMouse.xy/iResolution.xy;\\\n        mouse.x *= aspectRatio;\\\n        \\\n        if((distance(mouse, aspectCorrectedUV) < mouseRadius) && sign(iMouse.z) > .0)\\\n        {\\\n            fragColor = vec4(1.0, 1.0, .0, 1.0);\\\n            return;\\\n        }\\\n    }\\\n    \\\n    vec2 lastFrame = clamp(texture(iChannel0, bufferUV).xy, .0, maxAmount);\\\n    \\\n    const vec2 diffusionRates = vec2(firstDiffusionRate[number], secondDiffusionRate[number]);\\\n    vec2 diffusion = applyKernel(bufferUV, iChannel0, laplacianKernel) * diffusionRates;\\\n    \\\n    vec2 otherBufferValues = clamp(texture(iChannel2, bufferUV).xy, .0, maxAmount);\\\n    float currentGrowthRate = mix(growthRate[number]-growthVariation[number], growthRate[number]+growthVariation[number], otherBufferValues.x);\\\n    float currentDeathRate = mix(deathRate[number]-deathVariation[number], deathRate[number]+deathVariation[number], otherBufferValues.y);\\\n    \\\n    float reactionAmount = lastFrame.x * lastFrame.y * lastFrame.y;\\\n    vec2 change = diffusion + vec2(\\\n        -reactionAmount + currentGrowthRate * (maxAmount - lastFrame.x),\\\n        reactionAmount - (currentGrowthRate + currentDeathRate) * lastFrame.y\\\n    );\\\n    \\\n    fragColor = clamp(vec4(lastFrame+change*iTimeDelta*speed, 1.0, 1.0), .0, maxAmount);\\\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "REACTION_DIFFUSION(0)",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "REACTION_DIFFUSION(1)",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}