{
    "Shader": {
        "info": {
            "date": "1612434241",
            "description": "Seen on another planet",
            "flags": 0,
            "hasliked": 0,
            "id": "3ltfzM",
            "likes": 13,
            "name": "Metallic Tubeworms",
            "published": 3,
            "tags": [
                "life",
                "tube",
                "kinematics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "// \"Metallic Tubeworms\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0  // (=0/1) optional antialising\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrRound4Box2Df (vec2 p, vec2 b, float r);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEllips2Df (vec3 p, vec2 r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Maxv3 (vec3 p);\nfloat Minv3 (vec3 p);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec4 Hashv4v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nvec2 gId;\nfloat tCur, dstFar, hgSize, grLim, sLoop, hBase, lEnd, tubRot, bkAop, szFac, ghMax;\nint idObj;\nconst int idTube = 1, idEx = 2, idEnd = 3, idBk = 4;\nconst float pi = 3.14159, sqrt3 = 1.732051;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrndHt (vec2 p)\n{\n  vec2 gIdL;\n  float h, hh, nl, nf;\n  nf = 0.5;\n  p = (floor (nf * p) +  smoothstep (0.1, 1., mod (nf * p, 1.))) / nf;\n  hh = Fbm2 (0.1 * p);\n  nl = 10.;\n  h = ghMax * (floor (nl * hh) + smoothstep (0.4, 0.6, mod (nl * hh, 1.))) / nl + 0.05 * hh;\n  gIdL = PixToHex (p / hgSize);\n  if (Maxv3 (abs (vec3 (gIdL, dot (gIdL, vec2 (1.))))) <= grLim)\n     h *= 0.2 + 0.8 * smoothstep (0., 2., length (p - HexToPix (gIdL * hgSize)) - 1.5);\n  return h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.5, 0.8 * h);\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy), GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, dLoop, aLoop, rCyl, rc, s, dc, dy;\n  dLoop = 6. * sLoop;\n  aLoop = 0.25 * pi / sLoop;\n  rCyl = 0.6;\n  rc = 0.6;\n  dMin = dstFar / szFac;\n  p.xz -= HexToPix (gId * hgSize);\n  p /= szFac;\n  q = p;\n  dy = - q.y;\n  q.y -= 0.3;\n  d = max (PrRoundCylDf (q.xzy, rCyl + 0.4, 0.1, 0.3), dy);\n  DMINQ (idEx);\n  q = p;\n  q.y -= 2. * lEnd + hBase + 0.3;\n  s = mod (3. * q.y + 0.5, 1.);\n  d = max (max (PrRound4Box2Df (q.xz, vec2 (rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15, s))) - rc, rc),\n     abs (q.y + lEnd) - lEnd - 0.01), dy);\n  DMINQ (idEnd);\n  q.xz = Rot2D (q.xz, tubRot);\n  q.xy = Rot2D (q.xy, 0.5 * pi);\n  q.xy = Rot2D (vec2 (q.x, q.y - dLoop), aLoop - 0.5 * pi);\n  s = mod (3. * dLoop * atan (q.y, - q.x) + 0.5, 1.);\n  qq = q;\n  dc = dot (vec2 (q.x, abs (q.y)), sin (aLoop + vec2 (0., 0.5 * pi)));\n  q.xz = Rot2D (vec2 (length (q.xy) - dLoop, q.z), tubRot);\n  d = max (max (PrRound4Box2Df (q.xz, vec2 (rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15, s)) - rc),\n     rc), dc), dy);\n  DMINQ (idTube);\n  q = qq;\n  q.xy = Rot2D (q.xy, aLoop) + vec2 (dLoop, 0.);\n  q.xz = Rot2D (q.xz, - tubRot);\n  s = mod (3. * q.y + 0.5, 1.);\n  d = max (max (PrRound4Box2Df (q.xz, vec2 (rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15, s))) - rc, rc),\n     abs (q.y - lEnd) - lEnd - 0.01), dy);\n  DMINQ (idEnd);\n  q.y -= 2. * lEnd + 0.1;\n  d = PrRoundCylDf (q.xzy, rCyl + 0.1, 0.05, 0.05);\n  DMINQ (idEx);\n  q.y -= 0.2;\n  d = PrCapsDf (q.xzy, 0.25, 0.25);\n  DMINQ (idEx);\n  q.y -= 1.2;\n  q.xz = abs (q.xz);\n  q.xz = (q.x + q.z * vec2 (-1., 1.)) / sqrt(2.);\n  q.yz = Rot2D (q.yz + vec2 (0.7, 0.), bkAop) - vec2 (0.8, 0.);\n  d = max (abs (PrEllips2Df (q.xzy, vec2 (0.5, 1.))) - 0.02, - 0.01 - (q.z - abs (q.x)) / sqrt(2.));\n  DMINQ (idBk);\n  return 0.8 * szFac * dMin;\n}\n\nvoid SetObjConf ()\n{\n  vec4 r4;\n  float tCyc, t;\n  r4 = Hashv4v2 (19.1 * gId + 99.1);\n  tCyc = 20. + 10. * r4.x;\n  t = (tCur + 13.1) / tCyc;\n  tubRot = mod ((10. + 5. * r4.y) * t, 2. * pi) * sign (r4.z - 0.5);\n  t = mod (t, 1.);\n  sLoop = (1. / (1. + 0.25 * r4.w)) / (0.01 + 0.99 * SmoothBump (0.25, 0.75, 0.15, t));\n  lEnd = 1.;\n  hBase = - (6. * (0.5 * pi) + 4. * lEnd) * (1. - SmoothBump (0.1, 0.9, 0.08, t));\n  bkAop = -0.5 * pi * SmoothBump (0.25, 0.75, 0.15, mod ((12. - 0.6 * r4.y) * t, 1.)) *\n     SmoothBump (0.3, 0.7, 0.1, t);\n  szFac = 0.7 + 0.3 * r4.w;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (Maxv3 (abs (vec3 (gId, dot (gId, vec2 (1.))))) <= grLim) {\n      if (gId != gIdP) {\n        gIdP = gId;\n        SetObjConf ();\n      }\n      d = ObjDf (p);\n    } else d = dstFar;\n    if (dHit + d < s) dHit += d;\n    else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.002, -0.002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    h = p.y - GrndHt (p.xz);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.01, 1.);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (Maxv3 (abs (vec3 (gId, dot (gId, vec2 (1.))))) <= grLim) {\n      if (gId != gIdP) {\n        gIdP = gId;\n        SetObjConf ();\n      }\n      h = ObjDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n    } else h = 0.1;\n    d += clamp (h, 0.01, 1.);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.2, 0.3, 0.7), vec3 (0.4, 0.4, 0.55), pow (1. - max (rd.y, 0.), 8.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  float f;\n  ro.x -= tCur;\n  f = Fbm2 (0.01 * (ro + rd * (200. - ro.y) / (rd.y + 0.0001)).xz);\n  return mix (SkyBg (rd), vec3 (1.), clamp (f * rd.y, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstGrnd, dstObj, nDotL, sh;\n  dstObj = ObjRay (ro, rd);\n  dstGrnd = GrndRay (ro, rd);\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col4 = vec4 (HsvToRgb (vec3 (0.9 * Hashfv2 (17.1 * gId), 0.3, 0.9)), 0.1);\n      if (idObj == idTube || idObj == idEnd) col4 = col4 * (0.93 + 0.07 * smoothstep (-0.1, 0.,\n         cos (32. * atan (qHit.z, - qHit.x))));\n      else if (idObj == idEx) col4 *= 0.9;\n      else if (idObj == idBk) col4 = (PrEllips2Df (qHit.xzy, vec2 (0.5, 1.)) < -0.01) ?\n         vec4 (0.8 + 0.2 * sin (32. * pi * tCur), 0., 0., -1.) : col4 *\n         (0.9 + 0.1 * smoothstep (-0.7, -0.6, cos (64. * qHit.y)));\n      if (col4.a >= 0.) {\n        nDotL = max (dot (vn, sunDir), 0.);\n        nDotL *= nDotL;\n        sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n        col = col4.rgb * (0.2 + 0.8 * sh * nDotL) + col4.a * step (0.95, sh) *\n           pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n      } else col = col4.rgb * (0.6 - 0.4 * dot (vn, rd));\n    } else {\n      ro += dstGrnd * rd;\n      vn = GrndNf (ro);\n      vn = VaryNf (ro, vn, 1.);\n      col = mix (vec3 (0.4, 0.4, 0.1), vec3 (0.8, 0.7, 0.7), mod (floor (10. * ro.y / ghMax) / 10., 1.));\n      col *= 1. - 0.2 * Fbm2 (64. * ro.xz);\n      sh = GrndSShadow (ro + 0.01 * vn, sunDir);\n      gId = PixToHex (ro.xz / hgSize);\n      if (Maxv3 (abs (vec3 (gId, dot (gId, vec2 (1.))))) <= grLim)\n         sh = min (sh, ObjSShadow (ro + 0.01 * vn, sunDir));\n      col *= 0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.);\n    }\n    col = mix (col, SkyBg (rd), pow (min (dstObj, dstGrnd) / dstFar, 4.));\n  } else {\n    col = SkyCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv;\n  float el, az, zmFac, asp, sr, t, ar;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  hgSize = 12.;\n  grLim = 12.;\n  ghMax = 1.5;\n  el = -0.08 * pi;\n  az = 0.;\n  if (mPtr.z > 0.) {\n    az += 0.4 * pi * mPtr.x;\n    el += 0.25 * pi * mPtr.y;\n  }\n  t = mod (0.003 * tCur, 2.);\n  ar = -0.5 * pi + 2.5 * pi * (0.5 - abs ((floor (32. * t) + smoothstep (0.8, 1.,\n     mod (32. * t, 1.))) / 32. - 1.));\n  az -= ar;\n  ro = vec3 (0., 15., - 1.02 * sqrt3 * hgSize * grLim);\n  ro.xz = Rot2D (ro.xz, ar);\n  sunDir = normalize (vec3 (1., 1., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, ar);\n  el = clamp (el, -0.2 * pi, -0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  zmFac = 3.;\n  dstFar = 2. * sqrt3 * hgSize * grLim;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat Length4 (vec2 p)\n{\n  p *= p;\n  return sqrt (sqrt (dot (p, p)));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrRound4Box2Df (vec2 p, vec2 b, float r)\n{\n  return Length4 (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrEllips2Df (vec3 p, vec2 r)\n{\n  return (length (p / r.xxy) - 1.) * min (r.x, r.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39);\n  return fract (sin (dot (p, cHashVA2) + vec4 (0., cHashVA2.xy, cHashVA2.x + cHashVA2.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}