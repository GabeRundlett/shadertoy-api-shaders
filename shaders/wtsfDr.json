{
    "Shader": {
        "info": {
            "date": "1596517313",
            "description": "What happens when you apply photoshop blend modes to audio?",
            "flags": 8,
            "hasliked": 0,
            "id": "wtsfDr",
            "likes": 0,
            "name": "Soundshwop Blend Modes",
            "published": 3,
            "tags": [
                "audio",
                "blend"
            ],
            "usePreview": 0,
            "username": "ljdp",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "// Edit of Photoshop Blend Modes by ridhojeftha https://www.shadertoy.com/view/4tSGWV\n// Why not photoshop blend audio?\n\n//Darken\nvec3 darken (vec3 target, vec3 blend){\n    \n return min (target, blend);   \n}\n\n//Multiply\nvec3 multiply (vec3 target, vec3 blend){\n    return target*blend;\n}\n\n//Color Burn\nvec3 colorBurn (vec3 target, vec3 blend){\n    return 1.0 - (1.0 - target)/ blend;\n}\n\n//Linear Burn\nvec3 linearBurn (vec3 target, vec3 blend){\n    return target + blend - 1.0;\n}\n\n//Lighten\nvec3 lighten (vec3 target, vec3 blend){\n    return max (target, blend);\n}\n\n//Screen\nvec3 screen (vec3 target, vec3 blend){\n    return 1.0 - (1.0 - target) * (1.0 - blend);\n}\n\n//Color Dodge\nvec3 colorDodge (vec3 target, vec3 blend){\n    return target / (1.0 - blend);\n}\n\n//Linear Dodge\nvec3 linearDodge (vec3 target, vec3 blend){\n    return target + blend;\n}\n\n//Overlay\nvec3 overlay (vec3 target, vec3 blend){\n    vec3 temp;\n    temp.x = (target.x > 0.5) ? (1.0-(1.0-2.0*(target.x-0.5))*(1.0-blend.x)) : (2.0*target.x)*blend.x;\n    temp.y = (target.y > 0.5) ? (1.0-(1.0-2.0*(target.y-0.5))*(1.0-blend.y)) : (2.0*target.y)*blend.y;\n    temp.z = (target.z > 0.5) ? (1.0-(1.0-2.0*(target.z-0.5))*(1.0-blend.z)) : (2.0*target.z)*blend.z;\n    return temp;\n}\n\n//Soft Light\nvec3 softLight (vec3 target, vec3 blend){\n vec3 temp;\n    temp.x = (blend.x > 0.5) ? (1.0-(1.0-target.x)*(1.0-(blend.x-0.5))) : (target.x * (blend.x + 0.5));\n    temp.y = (blend.y > 0.5) ? (1.0-(1.0-target.y)*(1.0-(blend.y-0.5))) : (target.y * (blend.y + 0.5));\n    temp.z = (blend.z > 0.5) ? (1.0-(1.0-target.z)*(1.0-(blend.z-0.5))) : (target.z * (blend.z + 0.5));\n    return temp;   \n}\n\n//Hard Light\nvec3 hardLight (vec3 target, vec3 blend){\n    vec3 temp;\n    temp.x = (blend.x > 0.5) ? (1.0-(1.0-target.x)*(1.0-2.0*(blend.x-0.5))) : (target.x * (2.0*blend.x));\n    temp.y = (blend.y > 0.5) ? (1.0-(1.0-target.y)*(1.0-2.0*(blend.y-0.5))) : (target.y * (2.0*blend.y));\n    temp.z = (blend.z > 0.5) ? (1.0-(1.0-target.z)*(1.0-2.0*(blend.z-0.5))) : (target.z * (2.0*blend.z));\n    return temp;\n}\n\n//Vivid Light\nvec3 vividLight (vec3 target, vec3 blend){\n     vec3 temp;\n    temp.x = (blend.x > 0.5) ? (1.0-(1.0-target.x)/(2.0*(blend.x-0.5))) : (target.x / (1.0-2.0*blend.x));\n    temp.y = (blend.y > 0.5) ? (1.0-(1.0-target.y)/(2.0*(blend.y-0.5))) : (target.y / (1.0-2.0*blend.y));\n    temp.z = (blend.z > 0.5) ? (1.0-(1.0-target.z)/(2.0*(blend.z-0.5))) : (target.z / (1.0-2.0*blend.z));\n    return temp;\n}\n\n//Linear Light\nvec3 linearLight (vec3 target, vec3 blend){\n    vec3 temp;\n    temp.x = (blend.x > 0.5) ? (target.x)+(2.0*(blend.x-0.5)) : (target.x +(2.0*blend.x-1.0));\n    temp.y = (blend.y > 0.5) ? (target.y)+(2.0*(blend.y-0.5)) : (target.y +(2.0*blend.y-1.0));\n    temp.z = (blend.z > 0.5) ? (target.z)+(2.0*(blend.z-0.5)) : (target.z +(2.0*blend.z-1.0));\n    return temp;\n}\n\n//Pin Light\nvec3 pinLight (vec3 target, vec3 blend){\n     vec3 temp;\n    temp.x = (blend.x > 0.5) ? (max (target.x, 2.0*(blend.x-0.5))) : (min(target.x, 2.0*blend.x));\n    temp.y = (blend.y > 0.5) ? (max (target.y, 2.0*(blend.y-0.5))) : (min(target.y, 2.0*blend.y));\n    temp.z = (blend.z > 0.5) ? (max (target.z, 2.0*(blend.z-0.5))) : (min(target.z, 2.0*blend.z));\n    return temp;\n}\n\n//Difference\nvec3 difference (vec3 target, vec3 blend){\n    return abs (target - blend);\n    \n}\n//Exclusion\nvec3 exclusion (vec3 target, vec3 blend){\n    return 0.5 - 2.0*(target-0.5)*(blend-0.5);\n}\n\n//Subtract (thanks to Brandondorf9999)\nvec3 subtract (vec3 target, vec3 blend){\n    return target - blend;\n}\n\nvec3 modulo (vec3 target, vec3 blend){\n return mod(target,blend);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = 0.04 / ceil(mod (iTime/2.0, 6.0));\n    vec3 upperTexture = vec3(sin(iTime+fragCoord.x*scale));\n    vec3 lowerTexture = vec3(\n        (sin(iTime+fragCoord.x*2.5025*scale)*0.75)\n        +(sin(iTime+fragCoord.x*7.501*scale)*0.25));\n    \n    int time = int (mod (iTime/2.0, 18.0));\n    \n    vec3 finalImage = vec3(0.0);\n    if (time==0) finalImage =  darken ( upperTexture,  lowerTexture\t);\n    else if (time==1) finalImage = multiply ( upperTexture,  lowerTexture);\n    else if (time==2) finalImage =colorBurn ( upperTexture,  lowerTexture);\n    else if (time==3) finalImage =linearBurn ( upperTexture,  lowerTexture);\n    else if (time==4) finalImage =lighten ( upperTexture,  lowerTexture);\n    else if (time==5) finalImage =screen ( upperTexture,  lowerTexture);\n    else if (time==6) finalImage =colorDodge ( upperTexture,  lowerTexture);\n    else if (time==7) finalImage =linearDodge (upperTexture,  lowerTexture);\n    else if (time==8) finalImage =overlay ( upperTexture,  lowerTexture);\n    else if (time==9) finalImage =softLight ( upperTexture,  lowerTexture);\n    else if (time==10) finalImage =hardLight ( upperTexture,  lowerTexture);\n    else if (time==11) finalImage =vividLight ( upperTexture,  lowerTexture);\n    else if (time==12) finalImage =linearLight ( upperTexture,  lowerTexture);\n    else if (time==13) finalImage =pinLight ( upperTexture,  lowerTexture);\n    else if (time==14) finalImage =difference ( upperTexture,  lowerTexture);\n    else if (time==15) finalImage =exclusion (upperTexture, lowerTexture);\n    else if (time==16) finalImage = subtract(upperTexture, lowerTexture);\n    else if (time== 17) finalImage = modulo(upperTexture, lowerTexture);\n    \n    //set the color\n    finalImage.g = (finalImage.g*finalImage.g);\n    finalImage.b = 1.0 - (finalImage.g*finalImage.b);\n    fragColor = vec4(floor(finalImage*8.0)/8.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Darken\nfloat darken (float target, float blend){\n    \n return min (target, blend);   \n}\n\n//Multiply\nfloat multiply (float target, float blend){\n    return target*blend;\n}\n\n//Color Burn\nfloat colorBurn (float target, float blend){\n    return 1.0 - (1.0 - target)/ blend;\n}\n\n//Linear Burn\nfloat linearBurn (float target, float blend){\n    return target + blend - 1.0;\n}\n\n//Lighten\nfloat lighten (float target, float blend){\n    return max (target, blend);\n}\n\n//Screen\nfloat screen (float target, float blend){\n    return 1.0 - (1.0 - target) * (1.0 - blend);\n}\n\n//Color Dodge\nfloat colorDodge (float target, float blend){\n    return target / (1.0 - blend);\n}\n\n//Linear Dodge\nfloat linearDodge (float target, float blend){\n    return target + blend;\n}\n\n//Overlay\nfloat overlay (float target, float blend){\n    return (target > 0.5) ? (1.0-(1.0-2.0*(target-0.5))*(1.0-blend)) : (2.0*target)*blend;\n}\n\n//Soft Light\nfloat softLight (float target, float blend){\n    return (blend > 0.5) ? (1.0-(1.0-target)*(1.0-(blend-0.5))) : (target * (blend + 0.5));  \n}\n\n//Hard Light\nfloat hardLight (float target, float blend){\n    return (blend > 0.5) ? (1.0-(1.0-target)*(1.0-2.0*(blend-0.5))) : (target * (2.0*blend));\n}\n\n//Vivid Light\nfloat vividLight (float target, float blend){\n    return (blend > 0.5) ? (1.0-(1.0-target)/(2.0*(blend-0.5))) : (target / (1.0-2.0*blend));\n}\n\n//Linear Light\nfloat linearLight (float target, float blend){\n    return (blend > 0.5) ? (target)+(2.0*(blend-0.5)) : (target +(2.0*blend-1.0));\n}\n\n//Pin Light\nfloat pinLight (float target, float blend){\n    return (blend > 0.5) ? (max (target, 2.0*(blend-0.5))) : (min(target, 2.0*blend));\n}\n\n//Difference\nfloat difference (float target, float blend){\n    return abs (target - blend);\n    \n}\n//Exclusion\nfloat exclusion (float target, float blend){\n    return 0.5 - 2.0*(target-0.5)*(blend-0.5);\n}\n\n//Subtract (thanks to Brandondorf9999)\nfloat subtract (float target, float blend){\n    return target - blend;\n}\n\n//Divide (thanks to Brandondorf9999)\nfloat divide (float target, float blend){\n return target/blend;   \n}\n\nfloat modulo (float target, float blend){\n return mod(target,blend);   \n}\n\nvec2 mainSound( in int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    float osc1 = sin(6.2831*420.0*time);\n    float osc2 = sin(6.2831*420.0*2.5025*time) * 0.75;\n    osc2 += sin(6.2831*220.0*7.601*time) * 0.25;\n    float finalImage;\n    int func = int (mod (time/2.0, 18.0));\n    //func = 1;\n    if (func==0) finalImage =  darken ( osc1,  osc2\t);\n    else if (func==1) finalImage = multiply ( osc1,  osc2);\n    else if (func==2) finalImage =colorBurn ( osc1,  osc2)*0.25;\n    else if (func==3) finalImage =linearBurn ( osc1,  osc2);\n    else if (func==4) finalImage =lighten ( osc1,  osc2);\n    else if (func==5) finalImage =screen ( osc1,  osc2);\n    else if (func==6) finalImage =colorDodge ( osc1,  osc2);\n    else if (func==7) finalImage =linearDodge (osc1,  osc2);\n    else if (func==8) finalImage =overlay ( osc1,  osc2);\n    else if (func==9) finalImage =softLight ( osc1,  osc2);\n    else if (func==10) finalImage =hardLight ( osc1,  osc2);\n    else if (func==11) finalImage =vividLight ( osc1,  osc2);\n    else if (func==12) finalImage =linearLight ( osc1,  osc2);\n    else if (func==13) finalImage =pinLight ( osc1,  osc2);\n    else if (func==14) finalImage =difference ( osc1,  osc2);\n    else if (func==15) finalImage =exclusion (osc1, osc2);\n    else if (func==16) finalImage =subtract (osc1, osc2);\n    else if (func==17) finalImage =modulo (osc1, osc2);\n        \n    return vec2( (floor(finalImage*8.0)/8.0) * 0.25 );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}