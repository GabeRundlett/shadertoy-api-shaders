{
    "Shader": {
        "info": {
            "date": "1726511983",
            "description": "class workshop",
            "flags": 0,
            "hasliked": 0,
            "id": "4XlyWH",
            "likes": 3,
            "name": "Custom Shape",
            "published": 3,
            "tags": [
                "flower"
            ],
            "usePreview": 0,
            "username": "AtCat",
            "viewed": 47
        },
        "renderpass": [
            {
                "code": "const vec3 background = vec3(255.0, 253.0, 221.0) / 255.0;\nconst vec3 circle = vec3(255.0, 49.0, 67.0) / 255.0;\nconst vec3 blue = vec3(111, 210, 249) / 255.0;\nconst vec3 white = vec3(252, 250, 255) / 255.0;\nconst vec3 pink = vec3(250, 137, 220) / 255.0;\nconst float radius = 0.2;\nconst float PI = 3.14159265358979;\nconst mat2 r45 = mat2(0.7071068, 0.7071068, -0.7071068, 0.7071068);\nconst mat3 r45y = mat3(0.7071068,  0.0000000,  0.7071068,\n                       0.0000000,  1.0000000,  0.0000000,\n                      -0.7071068,  0.0000000,  0.7071068);\nfloat hash12(vec2 p)\n{\n    // Two typical hashes...\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n    \n    // This one is better, but it still stretches out quite quickly...\n    // But it's really quite bad on my Mac(!)\n    //return fract(sin(dot(p, vec2(1.0,113.0)))*43758.5453123);\n\n}\n\nfloat polarAngle(in vec2 uv, in vec2 center)\n{\n    vec2 diff = normalize(uv - center);\n    return atan(diff.y, diff.x);\n}\n\nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\nfloat parabola(float x, float k)\n{\n    return pow(4.0 * x * (1.0 - x), k);\n}\n\nfloat triangle_wave(float x, float freq, float amplitude)\n{\n    return (abs(fract(x * freq) - 0.5) * 2.0 - 1.0) * amplitude;\n}\n\nfloat impulse(float x)\n{\n    return 8.0*x*exp(1.0-8.0*x);\n}\n\nfloat zebra(float dist, float thres)\n{\n    return step(thres, fract(dist - iTime * 2.0));\n}\n\nvec4 flower(in vec2 center, in vec3 stripCol, in float scale, in vec2 uv)\n{\n    // Rotation matrix\n    float rotateAngle = iTime * 25.0 * PI / 180.0;\n    mat2 rotate = mat2(cos(rotateAngle), -sin(rotateAngle), sin(rotateAngle), cos(rotateAngle));\n    \n    vec4 backgroundCol = vec4(blue, 1.0);\n\n\n    \n    // Background texture\n    float zebra_bg = zebra((r45 * uv).x * 18.0, 0.5);\n    vec4 zebra_bgCol = vec4(mix(background , circle, zebra_bg), 1.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    uv = uv - center;\n    uv = scale *  uv * rotate + center;\n    \n    \n    // Draw a circle\n    float dist = length(uv - center);\n    \n    vec4 circleCol = vec4(0);\n    float rad = polarAngle(uv, center);\n    float bump = bias(triangle_wave(rad / (PI * 2.0), 5.0, 1.0), 0.2) * sin(iTime);\n    if (dist < radius + bump)\n    {\n        circleCol = vec4(stripCol, 1.0);\n        if (dist - bump < 0.185)\n        {\n            circleCol *= zebra((dist) * 30.0, 0.8);\n            //circleCol.xyz = mix(circleCol.xyz, circle, (zebra_bg));\n        }\n    } else\n    {\n        //backgroundCol = mix(backgroundCol, zebra_bgCol, zebra_bgCol.a);\n    }\n        \n    \n    // Output to screen\n    return circleCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Rotation matrix\n    float rotateAngle = iTime * 25.0 * PI / 180.0;\n    mat2 rotate = mat2(cos(rotateAngle), -sin(rotateAngle), sin(rotateAngle), cos(rotateAngle));\n    vec2 center = vec2(iResolution.x / (iResolution.y * 2.0), 0.5);\n    \n    vec4 backgroundCol = vec4(blue, 1.0);\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec4 flowerCol = vec4(0);\n    // flower 1\n    vec4 flower1 = flower(vec2(1.2, 0.3) + vec2(0, (-fract(iTime * 0.1) + 0.5) * 3.0), pink, 0.9, uv);\n    vec4 flower2 = flower(vec2(.4, 0.8) + vec2(0, (-fract(iTime * hash12(vec2(.4, .8)) * 0.3) + 0.5) * 3.0), pink, 1.2, uv);\n    flowerCol = mix(flower1, flower2, flower2.a);\n    vec4 flower3 = flower(vec2(.7, 0.8) + vec2(0, (-fract(iTime * hash12(vec2(114.514, 1.919810)) * 0.2) + 0.5) * 3.0), pink, .6, uv);\n    flowerCol = mix(flowerCol, flower3, flower3.a);\n    fragColor = mix(backgroundCol, flowerCol, flowerCol.a);    \n    return;\n    \n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}