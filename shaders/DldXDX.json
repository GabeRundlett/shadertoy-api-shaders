{
    "Shader": {
        "info": {
            "date": "1685821758",
            "description": "CC0: Ringed planet\nWas tinkering with trying to recreate a sweet sci fi image\nStopped working and forgot to share at the time.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "DldXDX",
            "likes": 199,
            "name": "Sunrise on saturn",
            "published": 3,
            "tags": [
                "3d",
                "postproc"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 12649
        },
        "renderpass": [
            {
                "code": "// CC0: Sunrise on saturn\n// Was tinkering with trying to recreate a sweet sci fi image\n// Stopped working and forgot to share at the time.\n// I strongly doubt there's mist like blur in space but it looked\n// nice on original image so tried to recreate it.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec3 col = vec3(0.0);\n  col = texture(iChannel0, q).xyz;\n  col = sqrt(col);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/spherefunctions/spherefunctions.htm\nvec2 raySphere2(vec3 ro, vec3 rd, vec4 sph) {\n  vec3 oc = ro - sph.xyz;\n  float b = dot(oc, rd);\n  float c = dot(oc, oc) - sph.w*sph.w;\n  float h = b*b - c;\n  if(h<0.0) return vec2(-1.0);\n  h = sqrt(h);\n  return vec2(-b - h, -b + h);\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/intersectors/intersectors.htm\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nconst float far           = 1E5;\nconst vec3 sunDir         = normalize(vec3(2.5, -2.0, 10.0));\nconst float planetRadius  = 425.0;\nconst vec3 planetCenter   = vec3(0.0, -1.05*planetRadius, 0.0);\nconst vec4 planetDim      = vec4(planetCenter, planetRadius);\nconst vec4 surfaceDim     = vec4(planetCenter, 0.95*planetRadius);\nconst vec3 ringNor        = normalize(vec3(-3.2, 1.0, 1.75));\nconst vec4 ringDim        = vec4(ringNor, -dot(ringNor, planetCenter));\n\nvec3 sky(vec3 ro, vec3 rd) {\n  const vec3 sunCol = HSV2RGB(vec3(0.066, 0.66, 0.000025));\n\n  float sf = 1.001-dot(rd, sunDir);\n//  sf *= sf;\n  sf *= sf;\n  vec3 col = vec3(0.0);\n  col += sunCol/sf;\n  return col;\n}\n\nvec3 sky(vec3 col, inout float hit, vec3 ro, vec3 rd) {\n\n  if (far > hit) {\n    return col;\n  }\n  hit = 1E5;\n\n  col += sky(ro, rd);\n\n\n  return col;\n}\n\nvec3 planet(vec3 col, inout float hit, vec3 ro, vec3 rd) {\n  vec2 pi   = raySphere2(ro, rd, planetDim);\n  if (pi.x == -1.0) {\n    return col;\n  }\n  if (pi.x > hit) {\n    return col;\n  }\n  hit = pi.x;\n  \n  vec3 pos  = ro+rd*pi.x;\n  vec3 nor  = normalize(pos-planetDim.xyz);\n  float fre = 1.0+dot(rd, nor);\n  fre *= fre;\n  vec3 refl = reflect(rd, nor);\n  float rr = mix(1.0, 0.7, tanh_approx(0.0025*(pi.y-pi.x)));\n  vec3 refr = refract(rd, nor, rr);\n  \n  vec2 pri  = raySphere2(pos, refr, planetDim);\n  vec2 sri  = raySphere2(pos, refr, surfaceDim);\n  vec3 rpos = pos+refr*pri.y;\n  vec3 rnor = normalize(rpos-planetDim.xyz);\n  vec3 rrefr= refract(refr, -rnor, rr);\n  \n  vec3 pcol   = vec3(0.0);\n  vec3 prefl  = sky(pos, refl);\n  vec3 prefr  = sky(pos, rrefr);\n  prefr = pow((prefr), vec3(1.25, 1.0, 0.75));\n  pcol += prefl*fre;\n  pcol += prefr*(1.0-tanh_approx(0.004*(sri.y-sri.x)));\n\n  float pt = tanh_approx(0.025*(pi.y-pi.x));\n  col = mix(col, pcol, pt);\n  return col;\n}\n\nvec3 rings(vec3 col, inout float hit, vec3 ro, vec3 rd) {\n  float pt = rayPlane(ro, rd, ringDim);\n  if (pt < 0.0) {\n    return col;\n  }\n  if (pt > hit) {\n    return col;\n  }\n  \n  vec3 pos = ro+rd*pt;\n  vec3 nor = ringDim.xyz;\n  vec2 sri  = raySphere2(pos, sunDir, planetDim);\n  vec3 spos = pos+sunDir*sri.x;\n  vec3 snor = normalize(spos - planetDim.xyz);\n  float sfre = 1.0+dot(sunDir, snor);\n//  sfre *= sfre;\n\n  float r = length(pos-planetCenter);\n  float rr = 1.0*r;\n  float ri0 = sin(.5*rr);\n  float ri1 = sin(.2*rr);\n  float ri2 = sin(.12*rr);\n  float ri3 = sin(.033*rr-2.);\n//  float ri = (0.5+0.5*ri0*ri1*ri2);\n  float ri = smoothstep(-0.95, 0.75, ri0*ri1*ri2);\n  ri = 0.5*ri+0.2*ri3;\n  ri *= 1.75;\n  float sf = sri.x < 0.0 ? 1.0 : mix(0.05, 1.0, smoothstep(0.5, 1.0, sfre));\n  float rdif = max(dot(nor, sunDir), 0.0);\n  rdif = sqrt(rdif);\n  vec3 rcol = hsv2rgb(vec3(0.066, 0.85+0.1*ri0*ri1, ri))*sf*rdif;\n  rcol *= smoothstep(550.0, 560.0, r)*smoothstep(860.0, 850.0, r);\n  col += rcol;\n  return col;\n}\nvec3 render(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n\n  float hit = far;\n  \n  col = sky(col, hit, ro, rd);\n  col = planet(col, hit, ro, rd);\n  col = rings(col, hit, ro, rd);\n  \n  return col;\n}\n\nvec3 effect(vec2 p) {\n  float gd = min(abs(p.x), abs(p.y))-0.005;\n\n  const vec3 ro = vec3(0.0, 0.0, -1000.0);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = 4.0;\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  float aa = 4.0/RESOLUTION.y;\n  vec3 col = render(ro, rd);\n//  col = mix(col, vec3(0.25, 0.0 ,0.), smoothstep(0.0, -aa, gd));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst mat2 brot = ROT(2.399);\n// License: Unknown, author: Dave Hoskins, found: Forgot where\nvec3 dblur(vec2 q,float rad) {\n  vec3 acc=vec3(0);\n  const float m = 0.0025;\n  vec2 pixel=vec2(m*RESOLUTION.y/RESOLUTION.x,m);\n  vec2 angle=vec2(0,rad);\n  rad=1.;\n  const int iter = 30;\n  for (int j=0; j<iter; ++j) {  \n    rad += 1./rad;\n    angle*=brot;\n    vec4 col=texture(iChannel1,q+pixel*(rad-1.)*angle);\n    acc+=clamp(col.xyz, 0.0, 10.0);\n  }\n  return acc*(1.0/float(iter));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec3 col = texture(iChannel0, q).xyz;\n  \n  col -= 0.005*vec3(0.0, 1.0, 2.0).zyx;\n  col = aces_approx(col);\n  col += 0.5*dblur(q, 1.0);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}