{
    "Shader": {
        "info": {
            "date": "1701267356",
            "description": "A cone with an arc, also the top is a weird face thing\nIf you want just the arc cone with no face set SHOW_FACE to 0\nFace uses smooth xor but if not for that I think it would be exact\n\n2d arc cone:  https://www.shadertoy.com/view/DtdBz7\nface use jt's xor",
            "flags": 0,
            "hasliked": 0,
            "id": "ctdBRM",
            "likes": 12,
            "name": "Arc Cone Face",
            "published": 3,
            "tags": [
                "cone",
                "xor",
                "arc"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "\n//see to 0 remove face\n#define SHOW_FACE 1\n\n//The floor shows the internal distance/gradient\n//Norm is scaled into 0-1 range for visualization to verify signs\n\n//Set to 1 to show numeric gradient to verify that it matches analytic\n#define SHOW_NUMERIC_GRADIENT 1//ignore this, this doesn't have analytic gradients\n\n//if 1 it scales norm into 0-1, if 0 it takes abs\n#define SHOW_FULL_NORM_RANGE 1\n\n\nconst float gFlowerR = 1.8;\n\nvec2 sabs(vec2 x, float softness){\n    return sqrt(x*x + softness*softness)-softness;\n    }\n    \nconst float smooth_r = .1;//smooth xor radius(0 is invalid)\n\n//smin attempt:  adjusted for smooth xor so that it transitions between + and - space smoothly\n//the problem is smin with a and b both being 0 does not return 0\n//a and b need to be positive\nfloat smin_xor(float a, float b, float r) {\n//return min(a,b);\n    float e = max(r - abs(a - b),0.0);\n    \n    //a fade so we get smooth transition for sxor between + and - space\n    //..this might cause rate of change to be > 1-- oh well for now.. at least it is very close to surface\n    float f = min(min(a,b)/r,1.0);\n\n   //slow down the transition to hard \n   f = f+f - f*f;\n\n    return min(a, b)- e*e* (1.0/(r*4.0)) *f;\n\n}\n//has some issues when xor goes from + to - space--the distance value jumps--this is because \n//we don't get 0 when and a and b are both 0\nfloat smin(float a, float b, float r) {\n    float e = max(r - abs(a - b),0.0);\n    \n    return min(a, b)- e*e* (1.0/(r*4.0));\n\n}\n\nfloat sgn(float a){\n    return a >=0.0 ? 1.0 : -1.0;\n}\n//smooth xor\n//radius of 0 is invalid\nfloat sxor(float a, float b, float r){\n    //see IQ article: https://iquilezles.org/articles/sdfxor/\n    //where he shows it can be written this way\n     return sgn(a)*sgn(b)*smin_xor(abs(a), abs(b),r );\n}\n\nfloat sdBox( in vec2 p, in vec2 b ) // https://iquilezles.org/articles/distfunctions\n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n//TheTurks flower function https://www.shadertoy.com/view/ctBfWz\nfloat flower(vec2 position, float radius) {\n    position = abs(position);\n   // position = sabs(position, .1);\n    position -= min(position.y - sqrt(3.0) * position.x, 0.0) * vec2(-sqrt(3.0) * 0.5, 0.5);\n    position.y -= radius * 0.5;\n    position = abs(position);\n    //  position = sabs(position, .1);\n   \n    if (position.x + sqrt(3.0) * 0.5 * radius < position.y * sqrt(3.0)) {\n   \n        return length(position - vec2(0.0, 0.5 * radius));\n    }\n    return length(position - vec2(-sqrt(3.0) * 0.5 * radius, 0.0)) - radius;\n}\n\n\nfloat sdCircle( vec2 p, float r ) // https://iquilezles.org/articles/distfunctions\n{\n//    return abs(flower(p,r))-.3;//too much?\n    //return flower(p,r);\n//return length(p)-r;\n    return abs(length(p) - r)-.3;\n}\n\n\n\n// It seems like xor does not have the problems explained in https://www.shadertoy.com/view/3t33WH Interior Distance by iq\n// Confirmed in this new article https://iquilezles.org/articles/sdfxor/ by iq\nfloat xor(float a, float b)\n{\n    // NOTE: XOR can be implemented via sign but sign is buggy on some platforms as spalmer found out.\n    return max(min(a, b), -max(a, b));\n}\n\nfloat XorThing(vec2 p, float r)\n{\n\n    \n    float m = abs(sin(iTime));\n\t//float a = sdBox(p-vec2(m,0), vec2(0.5));\n    float b = sdCircle(p+vec2(m,0), r);\n    float a=  sdCircle(p-vec2(m,0), r);\n    \n    float d = sxor(a, b,smooth_r); \n\n    float n = abs(cos(iTime*.9));\n    float c = sdCircle(p+vec2(0.0,n),r);\n    float e = sdCircle(p-vec2(0.,n), r);\n    \n    float f = sxor(c, e,smooth_r);\n    \n    d = sxor(d, f,smooth_r);\n\n    return abs(d)-.1;\n   // return d-.01;\n}\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n//Cone with circular arc edge rather than straight edge\n//width is relative to height and must not be > 1, also fails if w ==0\n//started from iq's CircleCross https://www.shadertoy.com/view/NslXDM\n//Here is 2D version: https://www.shadertoy.com/view/DtdBz7\nfloat sdArcCone( in vec2 p, in float height, float w){\n\n    //Center and flip it(optional)\n   // w = 1.0;\n    p.y += height*.5;\n    p = p.yx;\n    \n    //these are contants and can be pre-computed\n    float k = 0.5*(w+1.0/w);           \n    float kw =k-w;// max(k-w,0.0); \n    k = k*height;\n    w= w*height;\n  \n   \n    p.y = abs(p.y);\n    \n    bool needBot = abs(p.y) < w;\n\n    float px = p.x;\n    \n    p.x = needBot ? abs(p.x):p.x;\n   \n    bool wantArc = ( (p.x)<height && p.y<(p.x*kw+w) ) ;\n    \n    float d= dot2(p-vec2(height,wantArc ? k:0.0));//circule arc or top corner\n    \n    if(!wantArc){\n         d= min(dot2(p-vec2(0,w)),     // right corner\n                                      d);;// top corner \n    }\n\n     d = sqrt(d);\n     d = wantArc ? (k-d):d;\n \n    //bottom\n    d = needBot? max(d,-px):d;\n\n    return d;\n}\nfloat sdRing( in vec2 p, in vec2 n, in float r, in float th )\n{\n    p.x = abs(p.x);\n    \n    p = mat2(n.x,n.y,-n.y,n.x)*p;\n\n    return max( abs(length(p)-r)-th*0.5,\n                length(vec2(p.x,max(0.0,abs(r-p.y)-th*0.5)))*sign(p.x) );\n}\n\n//arc cone to 3D here.\n//Ignore the norm thats from previous shader and not used here\nfloat sdgCylinder(vec3 p, vec2 rh,  out vec3 norm) {\n    p =p.xzy;\n    \n#if SHOW_FACE ==1\n   // float x = flower(p.xz,abs(sin(iTime*.33))*gFlowerR+0.01);\n    float x = XorThing(p.xz,abs(sin(iTime*.33))*gFlowerR+0.01);\n #else\n   float x = length(p.xz);\n #endif\n// x = sdRing(p.zx, normalize(vec2(0.7,.5)), 1.50, 0.0);\n     //x =  abs(length(p.xz)-1.0);//-.1;\n    // x =  length(max(abs(p.xz)-1.0,0.0));\n   // x = max(abs(p.x), abs(p.z));\n    float width = abs(sin(iTime*.5))*1.0;//width at the bottom\n    width = max(width,0.01);//can't be 0\n    float height =  2.0 + abs(cos(iTime*.8))*4.0;//rh.x;\n\tfloat d= sdArcCone(vec2(x, p.y),height,width );\n    return d;\n}\n\n\n            \n//Rest of code by mostly by paniq\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 1.5 + sin(time * 0.1) * 0.7;\n\tcamPos = vec3(4.5*sin(an),2.0,4.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n\nvec2 min2(vec2 a, vec2 b) {\n    return (a.x <= b.x)?a:b;\n}\n\nvec2 max2(vec2 a, vec2 b) {\n    return (a.x > b.x)?a:b;\n}\n\n\nvec2 plane( vec3 p) {\n    return vec2(p.y+2.0,1.0);\n}\n\nvec2 add_plane(vec3 p, vec2 m) {\n    return min2(plane(p),m);\n}\n\nvec2 doModelWithNorm( vec3 p, out vec3 norm) {\n\n    float Size = 1.5;\n   // float d = Tetrahedron(p, Size, 0.0);\n   float round = .8*abs(sin(iTime*.3));\n\n   round=round*round*round;\n   //   round = max(round,0.01);\n   float rd = abs(cos(iTime*.1))*.5 + 1.0;//,norm;\n   vec2 rad = vec2(rd*.5, rd);\n    float d = sdgCylinder(p, rad, norm )-round;\n    \n#if SHOW_NUMERIC_GRADIENT == 1\n//  if(iMouse.z<=0.0){//show  numeric gradients when left mouse is held\n\n     const float eps = 0.01;\n     const vec3 e = vec3(eps,0.0, 0.0);\n     norm = normalize(vec3(sdgCylinder( p +e.xyz, rad, norm )- sdgCylinder( p -e.xyz, rad, norm ),\n                      sdgCylinder( p +e.yxz, rad, norm )- sdgCylinder( p -e.yxz, rad, norm ),\n                      sdgCylinder( p +e.yzx, rad, norm )- sdgCylinder( p -e.yzx, rad, norm )));\n  //   }\n#endif\n#if SHOW_FULL_NORM_RANGE == 1\n    norm = norm*.5 + .5;\n #else\n    norm = abs(norm);\n#endif\n                             \n\t// d = min(d,length(p)-Size);//use to verify sphere size and tet match up\n    vec2 rr = add_plane(p, vec2(d,0.0));\n \n    return rr;\n}\nvec2 doModel( vec3 p) {\nvec3 norm;\n    return doModelWithNorm(p, norm);\n}\n//------------------------------------------------------------------------\n// Material \n//\n// Defines the material (colors, shading, pattern, texturing) of the model\n// at every point based on its position and normal. In this case, it simply\n// returns a constant yellow color.\n//------------------------------------------------------------------------\nvec4 doMaterial( in vec3 pos, in vec3 nor )\n{\n    vec3 norm,norm2;\n    float k = doModelWithNorm(pos,norm).y;\n    float d = doModelWithNorm(vec3(pos.x,0.0,pos.z),norm2).x;\n    \n    float w = abs(mod(d, 0.1)/0.1 - 0.5);\n    \n    vec4 objCOlor = vec4(0.1,.01,1.0,0.1);\n    objCOlor.xyz = norm;\n    return mix(objCOlor, //nor * 0.5 + 0.5,\n               vec4(norm2,0.0) * w,\n               clamp(k,0.0,1.0));\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec4 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n\tfloat cos_Ol = max(0.0, dot(nor, lig));\n    vec3 h = normalize(lig - rd);\n    float cos_Oh = max(0.0,dot(nor, h));\n    float dif = cos_Ol;\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(0.8, 0.7, 0.6)*sha;\n    \n    lin += vec3(0.20,0.30,0.30);\n\n    \n    vec3 col = mal.rgb*lin;\n\n    // specular\n    col += cos_Ol * pow(cos_Oh,40.0);\n    \n    // envmap\n //   col += mal.w*Texture2D(iChannel0, reflect(rd,nor)).rgb;\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<80; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n        \n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\n#if 0\n    vec3 norm;\n    doModelWithNorm(pos, norm);\n#if SHOW_FULL_NORM_RANGE ==1\n    norm = norm*2.0 -1.0;\n#endif\n    return (norm);\n    \n#else//for lighting we want the ground plane etc, so do it numerically\n        const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n    vec3 norm;\n#endif\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<80; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n        if(h <= 0.0){\n            break;\n        }\n        t +=abs(h);\n        if(t > 20.0){\n            break;\n        }\n      //  t += max(h, 0.;\n\t//\tt += clamp( h, 0.001, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec3 ff_filmic_gamma3(vec3 linear) {\n    vec3 x = max(vec3(0.0), linear-0.004);\n    return (x*(x*6.2+0.5))/(x*(x*6.2+1.7)+0.06);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n  //  vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n   // vec3 ro, ta;\n    //doCamera( ro, ta, iTime, m.x );\n    //doCamera( ro, ta, 3.0, 0.0 );\n\n    // camera matrix\n   // mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\t//vec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \tfloat an = 5.31 + 0.05*(iTime-10.0) - 7.0*m.x+1.0;\n    \n\tvec3 ro = vec3(4.5*sin(an),1.0,4.5*cos(an))*1.5;\n    vec3 ta = vec3(0.0,0.2,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n    \n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec4 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = ff_filmic_gamma3(col * 0.6); //pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}