{
    "Shader": {
        "info": {
            "date": "1670939594",
            "description": "A fork of my shader Time Gem (https://www.shadertoy.com/view/7tK3Wd) but using the EGA palette",
            "flags": 0,
            "hasliked": 0,
            "id": "dsjSDK",
            "likes": 7,
            "name": "Enhanced Graphics Adaptation",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "palette",
                "abstract",
                "ega"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "// Enhanced Graphics Adaptation by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\n#define LUM_COEFFS vec3(.2126, .7152, .0722)\n#define ANIMATE_DITHER + float(iFrame & 15) * 13.\n\nmat2 rot(float a)\n{\n    float s = sin(a),\n          c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 erot(vec3 p, vec3 ax, float a)\n{\n  return mix(dot(ax, p) * ax, p, cos(a)) + cross(ax, p) * sin(a);\n}\n\n// https://iquilezles.org/articles/intersectors\n// axis aligned box centered at the origin, extruded by radius r\nfloat rbi(vec3 ro, vec3 rd, float r)\n{\n    vec3 m = 1. / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * (r + 1.);\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if(tN > tF || tF < 0.)\n        return -1.;\n    float t = tN;\n    \n    vec3 pos = ro + rd * t;\n    vec3 s = sign(pos);\n    ro  *= s;\n    rd  *= s;\n    pos *= s;\n        \n    pos -= 1.;\n    pos = max(pos.xyz, pos.yzx);\n    if(min(min(pos.x, pos.y), pos.z) < 0.) \n        return t;\n        \n    vec3 oc = ro - 1.;\n    vec3 dd = rd * rd;\n    vec3 oo = oc * oc;\n    vec3 od = oc * rd;\n    float ra2 = r * r;\n\n    t = 1e20;        \n\n    // corner\n    {\n        float b = od.x + od.y + od.z;\n        float c = oo.x + oo.y + oo.z - ra2;\n        float h = b * b - c;\n        if(h > 0.) t = -b - sqrt(h);\n    }\n    // edge X\n    {\n        float a = dd.y + dd.z;\n        float b = od.y + od.z;\n        float c = oo.y + oo.z - ra2;\n        float h = b * b - a * c;\n        if(h > 0.)\n        {\n            h = (-b - sqrt(h)) / a;\n            if(h > 0. && h < t && abs(ro.x + rd.x * h) < 1.)\n                t = h;\n        }\n    }\n    // edge Y\n    {\n        float a = dd.z + dd.x;\n        float b = od.z + od.x;\n        float c = oo.z + oo.x - ra2;\n        float h = b * b - a * c;\n        if(h > 0.)\n        {\n            h = (-b - sqrt(h)) / a;\n            if(h > 0. && h < t && abs(ro.y + rd.y * h) < 1.)\n                t = h;\n        }\n    }\n    // edge Z\n    {\n        float a = dd.x + dd.y;\n        float b = od.x + od.y;\n        float c = oo.x + oo.y - ra2;\n        float h = b * b - a * c;\n        if( h > 0. )\n        {\n            h = (-b - sqrt(h)) / a;\n            if(h > 0. && h < t && abs(ro.z + rd.z * h) < 1.)\n                t = h;\n        }\n    }\n\n    if( t > 1e19 ) t = -1.;\n    \n    return t;\n}\n\nvec4 render(vec3 ro, vec3 rd, float time)\n{\n    ro.xz *= -rot(time * .5);\n    ro.yx *= -rot(time * .4);\n    \n    rd.xz *= -rot(time * .5);\n    rd.yx *= -rot(time * .4);\n    \n    float t = rbi(ro, rd, .1);\n    if (t < 0.)\n        t = 100.;\n    vec3 p = ro + rd * t;\n    \n    return vec4(p, t);\n}\n\nvec3 normal(vec3 p, float t)\n{\n\treturn sign(p) * normalize(max(abs(p) - 1., 0.));\n}\n\nfloat lum(vec3 c)\n{\n    return dot(c, LUM_COEFFS);\n}\n\nvec3 color(float t)\n{\n    vec3 c = vec3(.4,.7,.01);\n    c *= LUM_COEFFS;\n    c = c * 2. - 1.;\n    c = erot(c, normalize(vec3(1, 1, 1)), -t) * .5 + .5;\n    c /= LUM_COEFFS;\n    return c;\n}\n\nvec3 palette[16] = vec3[]\n(\n    vec3(0),\n    vec3(1),\n    vec3(.3333),\n    vec3(.6666),\n    vec3(0, 0, .6666),\n    vec3(0, .6666, 0),\n    vec3(0, .6666, .6666),\n    vec3(.6666, 0, 0),\n    vec3(.6666, 0, .6666),\n    vec3(.6666, .3333, 0),\n    vec3(.3333, .3333, 1),\n    vec3(.3333, 1, .3333),\n    vec3(.3333, 1, 1),\n    vec3(1, .3333, .3333),\n    vec3(1, .3333, 1),\n    vec3(1, 1, .3333)\n);\n\nvec3 palettize(vec3 c, vec2 fc)\n{\n    c = clamp(\n        c + fract(dot(fc ANIMATE_DITHER, vec2(.11592,.60233)) + vec3(.666, .333, 0)) * .667 - .333,\n        0., 1.);\n    vec3 res = vec3(1,0,1);\n    float minDist = 1000000.;\n    for(int i = 0; i < 16; ++i)\n    {\n        vec3 pc = palette[i];\n        float d = length((c - pc));\n        if (d < minDist)\n        {\n            minDist = d;\n            res = pc;\n        }\n    }\n    return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\n    vec3 ro = vec3(0, 0, -4);\n    vec3 rd = normalize(vec3(uv, 1.3));\n    \n    float t = iTime;\n    vec4 p = vec4(0);\n    for(int i = 0; i < 6; ++i)\n    {\n        ro -= rd * .3;\n        p = render(ro, rd, t);\n        t += p.w * (.5 + .5 * sin(iTime * .02));\n        if (p.w > 10.)\n            break;\n    }\n    \n    ro.xz *= -rot(t * .5);\n    ro.yx *= -rot(t * .4);\n    \n    rd.xz *= -rot(t * .5);\n    rd.yx *= -rot(t * .4);\n    \n    vec3 n = normal(p.xyz, t);\n    vec3 ld = normalize(vec3(1,0,1));\n    \n    ld.xz *= -rot(t * .5);\n    ld.yx *= -rot(t * .4);\n    \n    float l = dot(n, ld) * .5 + .5;\n    float spec = pow(dot(ld, reflect(rd, n)) * .5 + .5, 40.);\n    vec3 col = mix(color(iTime * .01) * l, vec3(l * 5.), l * l);\n    col += spec * 5.;\n    if (length(p.xyz) > 8.)\n        col = vec3(.85);\n    \n    \n    // saturation\n    col = mix(vec3(lum(col)), col, 1.5);\n    \n    // gamma\n    col = pow(col, vec3(1./2.2));\n    \n    // vignette\n    col *= smoothstep(1.5, .5, length(fragCoord - iResolution.xy * .5) / iResolution.y);\n    \n    col = palettize(col, fragCoord);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}