{
    "Shader": {
        "info": {
            "date": "1575396250",
            "description": "Exploring simulation pass then rendering with many particles\ni used several shadertoy tutorials to learn along the way, in particular\nIQ's Bricks Game https://www.shadertoy.com/view/MddGzf",
            "flags": 32,
            "hasliked": 0,
            "id": "WsKXDd",
            "likes": 3,
            "name": "Particles in a plane",
            "published": 3,
            "tags": [
                "learn"
            ],
            "usePreview": 0,
            "username": "samcake",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "#define ELEMENT_BUFFER\n#ifdef ELEMENT_BUFFER\nvec4 getElementArrayDesc() {\n    return texelFetch(iChannel0, ivec2(0,0), 0);\n}    \n    \nvec4 getElement(int i) {\n    \n    int x = (i + 1) % int(iResolution.x);\n    int y = (i + 1) / int(iResolution.x);\n\treturn texelFetch(iChannel0, ivec2(x, y), 0);\n}\n\n\n#else\nconst int numElements = 2;\nvec4 elements[numElements] = vec4[numElements](\n\tvec4(0.3, 0.4, 0.0, 0.0),\n\tvec4(0.8, 0.5, 0.0, 0.0)\n);\n    \nvec4 getElementArrayDesc() {\n    return vec4(2.0, 0.0,0.0,0.0);\n}    \n    \nvec4 getElement(int i) {\n\treturn elements[i];\n}\n\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 invRes = vec2(aspectRatio, 1.0) / iResolution.xy;\n    float pixelSize2 = 2.0 * dot(invRes,invRes);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord * invRes;\n\n    vec4 arrayDesc = getElementArrayDesc();\n    \n    int numElements = int(arrayDesc.x);\n    \n    int numParticles = 0;\n    for (int i = 0; i < numElements; i++) {\n        \n    \tvec4 element = getElement(i);\n        vec2 pe = uv - element.xy;\n        if (dot(pe,pe) < pixelSize2) {\n            numParticles++;\n        }\n        \n    }\n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    if (numParticles > 0) {\n    \tcol = 0.5 + 0.5*cos(vec3(numParticles) + vec3(0,2,4));\n\t}\n\t//vec3 col = vec3(uv.xy, 0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash1( float n ) { return fract(sin(n)*138.5453123); }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord-0.5);\n\n    // Number elements\n   // int numElements = int(iResolution.y * iResolution.x * 0.15);\n\tint numElements = 25000;\n    int width = min(int(iResolution.x), numElements + 1);\n \tint height = min(int(iResolution.y), 1 + (numElements + 1) / width);\n    \n    // Out of the compute region, do nothing\n    if( ipx.x > width || ipx.y> height) discard;\n    \n    float aspectRatio = iResolution.x / iResolution.y; \n    vec2 regionSize = vec2(aspectRatio, 1.0); \n    \n    // Default/first element value describe the array\n    vec4 defaultElement = vec4(numElements,0.0,0.0,0.0);\n        \n    int elementNum = (int(iResolution.x) * (1 + ipx.y) + ipx.x ) - 1;\n    float elemetnNumf = float(elementNum);\n    \n    vec4 value = texelFetch(iChannel0, ipx, 0);\n    if (iFrame == 0) {\n        float s = hash1(elemetnNumf * 0.1);\n        float e = hash1(s);\n        float e2 = hash1(e);\n        float d = hash1(e2);\n        float d2 = hash1(d);\n        value = vec4(s * aspectRatio, e, 0.01 * d2 * normalize(vec2(e2, d) * vec2(2) - vec2(1.0)));\n    \t\n    }\n    \t\n        vec2 bp = value.xy - 0.5 * regionSize;\n        float bp2 = dot(bp, bp) * 0.009;      \n        value.zw = value.zw - bp2 * normalize(bp);\n        \n        \n        value.xy += value.zw;\n        \n  /*      if (value.x > regionSize.x) {\n            value.x = regionSize.x;\n            value.z = -value.z;\n        } else if (value.x < 0.0) {\n            value.x = 0.0;\n            value.z = -value.z;\n        } \n        \n        if (value.y > regionSize.y) {\n            value.y = regionSize.y;\n            value.w = -value.w;\n        } else if (value.y < 0.0) {\n            value.y = 0.0;\n            value.w = -value.w;\n        }*/\n    \n    fragColor = ((ipx.x > 0) ? value : defaultElement);\n \t     \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}