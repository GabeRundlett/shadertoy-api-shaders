{
    "Shader": {
        "info": {
            "date": "1718540153",
            "description": "An interactive demo showing a cubic Bézier curve with 4 anchor points evaluated using Seiler’s interpolation. Drag the 4 anchors or the 2 Seiler points around to see how the curve changes.",
            "flags": 32,
            "hasliked": 0,
            "id": "X3V3Rt",
            "likes": 12,
            "name": "Seiler’s Interpolation Bézier",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "spline",
                "lerp",
                "cubic",
                "interpolation",
                "seiler"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "/**\n* An interactive demo showing a cubic Bézier curve with 4 anchor points evaluated using Seiler’s interpolation, \n* which uses 2 Seiler points s1 and s2 computed from the Bézier control points.\n* More info: http://www.cemyuksel.com/research/seilers_interpolation/\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 outColor = textureLod(iChannel0, uv, 0.0).xyz;\n    \n    if (fragCoord.y < 1.0) \n    {\n        outColor = vec3(0.015, 0.005, 0.04);\n    }\n    \n    fragColor = vec4(pow(outColor, vec3(0.4545)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n* An interactive demo showing a cubic Bézier curve with 4 anchor points evaluated using Seiler’s interpolation, \n* which uses 2 Seiler points s1 and s2 computed from the Bézier control points.\n* More info: http://www.cemyuksel.com/research/seilers_interpolation/\n*/\n\n#define Saturate(x) clamp(x, 0.0, 1.0)\n\nstruct Point\n{\n    vec2 position;\n    vec3 color;\n};\n\nfloat SignedDistanceCircle(in vec2 uv, in vec2 center, in float radius)\n{\n    return length(uv - center) - radius;\n}\n\nfloat SignedDistanceCircle(in vec2 uv, in vec2 center, in float radius, in float pixelWidth)\n{\n    return smoothstep(pixelWidth, -pixelWidth, SignedDistanceCircle(uv, center, radius));\n}\n\nfloat SignedDistanceLineSegment(in vec2 uv, in vec2 a, in vec2 b, in float thickness, in float pixelWidth)\n{\n    vec2 AB = b - a;\n    vec2 AP = uv - a;\n    float position = Saturate(dot(AP, AB) / dot(AB, AB));\n    return smoothstep(pixelWidth, -pixelWidth, length(AP - position * AB) - thickness);\n}\n\nfloat SignedDistanceDottedLineSegment(in vec2 uv, in vec2 a, in vec2 b, in float thickness, in float dottedCount, in float dottedSize, in float pixelWidth)\n{\n    float dottedCountInv = 1.0 / dottedCount;\n    vec2 AB = b - a;\n    vec2 AP = uv - a;\n    float position = Saturate(dot(AP, AB) / dot(AB, AB));\n    dottedSize = 1.0 - dottedSize;\n    return smoothstep(dottedSize - pixelWidth, dottedSize + pixelWidth, mod(length(position), dottedCountInv) \\\n        * dottedCount) * smoothstep(pixelWidth, -pixelWidth, length(AP - position * AB) - thickness);\n}\n\nvec3 GetAnchorColor(uint anchorIdx)\n{ \n    return vec3((anchorIdx & 1u) ^ (((anchorIdx + 6u) >> 1u) & 1u), anchorIdx & 1u, ((anchorIdx * 3u) >> 2u) & 1u);\n}\n\nvoid InitializeAnchors(inout Point anchors[4u], in vec2 aspectRatio)\n{\n    anchors[0].position = vec2(-0.35, -0.4 ) * aspectRatio;\n    anchors[1].position = vec2(-0.05, -0.1 ) * aspectRatio;\n    anchors[2].position = vec2( 0.1,  -0.15) * aspectRatio;\n    anchors[3].position = vec2( 0.3,  -0.35) * aspectRatio;\n}\n\nvoid GetAnchorsFromHistory(inout Point anchors[4u], inout uint activeAnchorIdx)\n{\n    for (uint i = 0u; i < 2u; ++i)\n    {\n        uint anchorIdx = i * 2u;\n        anchors[anchorIdx] = Point(texelFetch(iChannel0, ivec2(i, 0), 0).xy, GetAnchorColor(anchorIdx));\n        anchorIdx += 1u;\n        anchors[anchorIdx] = Point(texelFetch(iChannel0, ivec2(i, 0), 0).zw, GetAnchorColor(anchorIdx));\n    }\n    \n    activeAnchorIdx = uint(texelFetch(iChannel0, ivec2(2, 0), 0).x);\n}\n\nvoid UpdateAnchorPoints(inout Point anchors[4u], inout uint activeAnchorIdx, in vec2 mouseCoords)\n{\n    // Find out which anchor is under the mouse when clicked\n    if (iMouse.w > 0.0)\n    {\n        activeAnchorIdx = 4u;\n        for (uint i = 0u; i < 4u; ++i)\n        {\n            float radius = length(mouseCoords - anchors[i].position);\n            if (radius < 0.015)\n            {\n                activeAnchorIdx = i;\n            }\n        }\n    }\n    \n    // If any anchors found when mouse was clicked, update it. \n    if (activeAnchorIdx < 4u)\n    {\n        anchors[activeAnchorIdx] = Point(mouseCoords, GetAnchorColor(activeAnchorIdx));\n    }\n}\n\nvoid UpdateSeilerPoints(inout Point anchors[4u], inout float activeSeiler, in vec2 s1, in vec2 s2, in vec2 mouseCoords)\n{\n    // Similar to anchors, find out if any Seiler points were under the mouse when it was clicked\n    activeSeiler = texelFetch(iChannel0, ivec2(2, 0), 0).y;\n    if (iMouse.w > 0.0)\n    {\n        activeSeiler = 0.0;\n        activeSeiler = length(mouseCoords - s1) < 0.015 ? 1.0 : activeSeiler;\n        activeSeiler = length(mouseCoords - s2) < 0.015 ? 2.0 : activeSeiler;\n    }\n    \n    // Update Seiler points if any of them were clicked\n    if (floor(activeSeiler) == 1.0)\n    {\n        s1 = mouseCoords;\n        anchors[1u].position = (s1 + anchors[0u].position + anchors[3u].position) / 3.0;\n    }\n    \n    if (floor(activeSeiler) == 2.0)\n    {\n        s2 = mouseCoords;\n        anchors[2u].position = (s2 + anchors[0u].position + anchors[3u].position) / 3.0;\n    }\n}\n\nvoid CalculateSeilerPoints(inout vec2 d1, inout vec2 d2, inout vec2 s1, inout vec2 s2, in Point anchors[4u])\n{\n    d1 = 3.0 * (anchors[1u].position - anchors[0u].position) - anchors[3u].position + anchors[0u].position;\n    d2 = 3.0 * (anchors[2u].position - anchors[3u].position) - anchors[0u].position + anchors[3u].position;\n    s1 = d1 + anchors[0u].position;\n    s2 = d2 + anchors[3u].position;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pixelWidth = (1.0 / iResolution.y);\n    vec2 aspectRatio = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) * pixelWidth;\n    vec2 m =  (iMouse.xy - 0.5 * iResolution.xy) * pixelWidth;\n    \n    vec3 outColor = vec3(0.015, 0.005, 0.04);\n    \n    Point anchors[4u];\n    uint activeAnchorIdx;\n    // Get last anchor positions from the previous frame\n    GetAnchorsFromHistory(anchors, activeAnchorIdx);\n \n    if (iFrame == 0)\n    {\n        // Setting active anchor index to 4 means no anchor is being dragged currently\n        activeAnchorIdx = 4u;\n        // Set anchors to their initial positions\n        InitializeAnchors(anchors, aspectRatio);\n    }\n    \n    // Update anchor positions if any of them is being dragged by the mouse\n    UpdateAnchorPoints(anchors, activeAnchorIdx, m);\n    \n    vec2 d1, d2, s1, s2;\n    CalculateSeilerPoints(d1, d2, s1, s2, anchors);\n    \n    float activeSeiler;\n    UpdateSeilerPoints(anchors, activeSeiler, s1, s2, m);\n\n    // Calculate cubic bezier points\n    vec2 bezierPoint, lastBezierPoint;\n    float t, t2, st;\n    for (float i = 0.0; i < 101.0; ++i)\n    {\n        t = i / 100.0;\n        t2 = t * t;\n        st = t - t2;\n        \n        vec2 b03 = mix(anchors[0].position, anchors[3].position, t);\n        vec2 d12 = mix(d1, d2, t);\n        vec2 s12 = mix(s1, s2, t);\n        \n        bezierPoint = mix(b03, s12, st);\n        \n        if (i > 0.0)\n        {\n            outColor = mix(outColor, vec3(0.5, 1.0, 0.0), SignedDistanceLineSegment(uv, lastBezierPoint, bezierPoint, 0.002, pixelWidth));\n        }\n        \n        lastBezierPoint = bezierPoint;\n    }\n    \n    t = sin(iTime + 1.0) * 0.5 + 0.5;\n    t2 = t * t;\n    st = t - t2;\n    \n    vec2 b03 = mix(anchors[0].position, anchors[3].position, t);\n    vec2 d12 = mix(d1, d2, t);\n    vec2 s12 = mix(s1, s2, t);\n    vec2 e1 = mix(anchors[0].position, s1, st);\n    vec2 e2 = mix(anchors[3].position, s2, st);\n    \n    bezierPoint = mix(b03, s12, st);\n    \n    // Draw segments joining anchors\n    for (uint i = 0u; i < 3u; ++i)\n    {\n        outColor = mix(outColor, vec3(0.25), SignedDistanceLineSegment(uv, anchors[i].position, anchors[i+1u].position, 0.001, pixelWidth));\n    }\n    \n    outColor = mix(outColor, vec3(0.25), SignedDistanceDottedLineSegment(uv, anchors[0].position, anchors[3].position, 0.001, 64.0, 0.6, pixelWidth));\n    \n    // Draw segments joining the anchors to the Seiler points\n    outColor = mix(outColor, vec3(0.0, 0.5, 1.0), SignedDistanceLineSegment(uv, anchors[0].position, s1, 0.001, pixelWidth));\n    outColor = mix(outColor, vec3(0.0, 0.5, 1.0), SignedDistanceLineSegment(uv, anchors[3].position, s2, 0.001, pixelWidth));\n    \n    // Draw a dotted line joining the 2 Seiler points\n    outColor = mix(outColor, vec3(1.0, 0.0, 1.0), SignedDistanceDottedLineSegment(uv, s1, s2, 0.001, 64.0, 0.6, pixelWidth));\n    \n    // Draw a dotted line joining the 2 Seiler offset points\n    outColor = mix(outColor, vec3(1.0, 0.25, 0.0), SignedDistanceDottedLineSegment(uv, e1, e2, 0.001, 64.0, 0.6, pixelWidth));\n    \n    // Draw a dotted line joining offset points between b0 & b3 and the Seiler points s1 & s2\n    outColor = mix(outColor, vec3(0.5), SignedDistanceDottedLineSegment(uv, b03, s12, 0.001, 64.0, 0.6, pixelWidth));\n    \n    // Draw the bezier point at the current time\n    outColor = mix(outColor, vec3(0.75, 0.0, 1.0), SignedDistanceCircle(uv, bezierPoint, 0.01, pixelWidth));\n    \n    // Draw the offset point between the 2 Seiler points\n    outColor = mix(outColor, vec3(0.0, 0.5, 1.0), SignedDistanceCircle(uv, s12, 0.01, pixelWidth));\n    \n    // Draw the offset point between the 2 anchors b0 & b3\n    outColor = mix(outColor, vec3(0.0, 0.5, 1.0), SignedDistanceCircle(uv, b03, 0.01, pixelWidth));\n    \n    // Draw the offset point between the anchor b0 and the Seiler point s1\n    outColor = mix(outColor, vec3(1.0, 0.25, 0.0), SignedDistanceCircle(uv, e1, 0.01, pixelWidth));\n    \n    // Draw the offset point between the anchor b3 and the Seiler point s2\n    outColor = mix(outColor, vec3(1.0, 0.25, 0.0), SignedDistanceCircle(uv, e2, 0.01, pixelWidth));\n    \n    // Draw the anchor points\n    for (uint i = 0u; i < 4u; ++i)\n    {\n        outColor = mix(outColor, anchors[i].color, SignedDistanceCircle(uv, anchors[i].position, 0.015, pixelWidth));\n    }\n    \n    // Draw the Seiler points\n    outColor = mix(outColor, vec3(1.0, 0.0, 1.0), SignedDistanceCircle(uv, s1, 0.015, pixelWidth));\n    outColor = mix(outColor, vec3(1.0, 0.0, 1.0), SignedDistanceCircle(uv, s2, 0.015, pixelWidth));\n    \n    vec4 previMouse = texelFetch(iChannel0, ivec2(3, 0), 0);\n    \n    if (previMouse.z > 0.0 && iMouse.z < 0.0)\n    {\n        activeAnchorIdx = 4u;\n        activeSeiler = 0.0;\n    }\n    \n    fragColor = vec4(outColor, 1.0);\n    \n    if (all(lessThan(fragCoord, vec2(4.0, 1.0))))\n    {\n        fragColor = iMouse;\n    }\n    \n    if (all(lessThan(fragCoord, vec2(3.0, 1.0))))\n    {\n        fragColor.x = float(activeAnchorIdx);\n        fragColor.y = activeSeiler;\n    }\n    \n    if (all(lessThan(fragCoord, vec2(2.0, 1.0))))\n    {\n        fragColor = vec4(anchors[2u].position, anchors[3u].position);\n    }\n    \n    if (all(lessThan(fragCoord, vec2(1.0, 1.0))))\n    {\n        fragColor = vec4(anchors[0u].position, anchors[1u].position);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}