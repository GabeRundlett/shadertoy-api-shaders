{
    "Shader": {
        "info": {
            "date": "1704391487",
            "description": "clock with moving hands. Numbers are displayed on top of the hour markers with text using sdf chars. Seconds elapsed of the day are displayed in the bottom left corner.\n\nComments are welcome! \n\nI would love some feedback or help to make even cooler stuff!",
            "flags": 0,
            "hasliked": 0,
            "id": "lf23zy",
            "likes": 7,
            "name": "Simple Clock with moving handsv2",
            "published": 3,
            "tags": [
                "text",
                "clock",
                "rotate",
                "moving",
                "hands"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159\n\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\nfloat segment(in vec2 st, in vec2 a, in vec2 b) {\n    vec2 ba = b-a;\n    vec2 sta = st-a;\n    float h = clamp(dot(sta,ba)/dot(ba,ba),0.0,1.0);\n    return length(sta-ba*h);\n}\n\nvec2 rotate(vec2 st, float angle) {\n    st = mat2(cos(angle),-sin(angle),\n            sin(angle),cos(angle))*st;\n    return st;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st-=0.5;\n    \n    // Extract hours, minutes, and seconds from iDate.w\n    float totalSeconds = iDate.w;\n    float secondsF = mod(totalSeconds, 60.0);\n    float totalMinutes = totalSeconds / 60.0;\n    float minutes = mod(totalMinutes, 60.0);\n    float hours = mod(totalMinutes / 60.0, 12.0); // Assumes 12-hour clock\n\n    // Convert hours and minutes to angles (in radians)\n    float hourAngle = (hours + minutes / 60.0) * (PI / 6.0); // 30 degrees per hour\n    float minuteAngle = minutes * (PI / 30.0); // 6 degrees per minute\n    float secondAngle = secondsF * (PI / 30.0);\n    \n    hourAngle = hourAngle-PI/2.0;\n    minuteAngle = minuteAngle-PI/2.0;\n    secondAngle = secondAngle-PI/2.0;\n    \n    //hands coords\n    vec2 handsCoord = vec2(st);\n    \n    //setup clock\n    vec3 color = vec3(0.0);\n    float hourAngleC = 3.14159/6.;\n    float minuteAngleC = 6.*3.14159/180.; //(0.10472)\n    vec2 rst = st;\n    for(int i=0; i<12; i++){\n        rst = rotate(rst, hourAngleC);\n        color.r += step(length(rst+vec2(0.4,0.0)),0.005);\n        color.r += clamp(step(segment(rst, vec2(0.0,0.0), vec2(0.4,0.0)),0.003)*0.6,0.0,0.2);\n    }\n    //hour marker\n    color.g = 1.0-smoothstep(handsCoord.x*1.5/iResolution.y,0.005,length(rotate(handsCoord, -hourAngle)+vec2(-0.2,0.0)));\n    \n    //minute marker\n    color.g += 1.0-smoothstep(handsCoord.x*1.5/iResolution.y,0.005,length(rotate(handsCoord, -minuteAngle)+vec2(-0.35,0.0)));\n    //second marker\n    color.g += 1.0-smoothstep(handsCoord.x*1.5/iResolution.y,0.005,length(rotate(handsCoord, -secondAngle) + vec2(-0.4, 0.0)));\n    //hour segment\n    color.g += (1.0-smoothstep(handsCoord.x*1.5/iResolution.y,0.005,segment(rotate(handsCoord, -hourAngle), vec2(0.0,0.0), vec2(0.2,0.0))))*0.4;\n    //minute segment\n    color.g += (1.0-smoothstep(handsCoord.x*1.5/iResolution.y,0.005,segment(rotate(handsCoord, -minuteAngle), vec2(0.0,0.0), vec2(0.35,0.0))))*0.4;\n    //second segment\n    color.g += (1.0-smoothstep(handsCoord.x*1.5/iResolution.y,0.005,segment(rotate(handsCoord, -secondAngle), vec2(0.0,0.0), vec2(0.4,0.0))))*0.4;\n    \n    //add fadeout to middle\n    color *= vec3(length(st))*6.0;\n    //output the clock color\n    fragColor = vec4(color,1.0);\n    \n    //setup text\n    vec4 textColor = vec4(0);\n    vec2 textCoord = fragCoord;\n    textCoord /= iResolution.y;\n    vec2 position = vec2(0);\n    float fontSize = 7.;\n    vec2 U = ( textCoord - position)*64.0/fontSize;\n    textColor += char(vec2(U.x-10.85,U.y-7.7),49);//1\n    textColor += char(vec2(U.x-13.6,U.y-5.96),50);//2\n    textColor += char(vec2(U.x-14.4,U.y-4.1),51);//3\n    textColor += char(vec2(U.x-13.5,U.y-2.0), 52); // 4\n    textColor += char(vec2(U.x-10.9,U.y-0.5), 53); // 5\n    textColor += char(vec2(U.x-7.6,U.y-0.0), 54); // 6\n    textColor += char(vec2(U.x-4.2,U.y-0.5), 55); // 7\n    textColor += char(vec2(U.x-1.6,U.y-2.1), 56); // 8\n    textColor += char(vec2(U.x-0.7,U.y-4.1), 57); // 9\n    textColor += char(vec2(U.x-1.4,U.y-6.3),49);//10 (1,0)\n    textColor += char(vec2(U.x-1.8,U.y-6.3),48);\n    textColor += char(vec2(U.x-4.0,U.y-7.7),49);//11 (1,1)\n    textColor += char(vec2(U.x-4.3,U.y-7.7),49);\n    textColor += char(vec2(U.x-7.4,U.y-8.1),49);//12 (1,2)\n    textColor += char(vec2(U.x-7.8,U.y-8.1),50);\n    \n    //setup seconds counter\n    int seconds = int(iDate.w);\n    int digit;\n    vec2 digitPos;\n\n    // Loop through each digit place (5 digits)\n    for (int place = 0; place < 5; ++place) {\n        // Calculate the value of the digit in this place\n        digit = (seconds / int(pow(10.0, float(place)))) % 10;\n\n        // Calculate the position for this digit\n        digitPos = vec2(U.x - 0.5 * float(4 - place), U.y);\n\n        // render the digit\n        textColor += char(digitPos, 48 + digit);\n\n        // If we have rendered the last non-zero digit, break out of the loop\n        if (seconds < int(pow(10.0, float(place + 1)))) {\n            break;\n        }\n    }\n    \n    fragColor += textColor.rrrr;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}