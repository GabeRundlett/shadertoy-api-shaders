{
    "Shader": {
        "info": {
            "date": "1522693398",
            "description": "Drawing the 120-cell with faces. Just a POC. The distance estimation is a bit rough.\n\nSliced at z=0 to show internal structure (toggle with 's', faces with 'f').",
            "flags": 48,
            "hasliked": 0,
            "id": "MdVcRK",
            "likes": 12,
            "name": "Polytopes with faces",
            "published": 3,
            "tags": [
                "faces",
                "polytope",
                "120cell"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 2956
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Created by Matthew Arcus, 2018.\n//\n// Wythoff construction for polytopes in R4\n//\n// <mouse>: rotates\n// <UP>,<DOWN>: zoom in and out.\n// 'r': R3 rotation\n// 't': R4 rotation\n// 'f': show faces\n// 'e': thicker edges and vertices\n// 's': slice at z = 0 to show internal structure\n//\n////////////////////////////////////////////////////////////////////////////////\n\n#define PI 3.14159\n\n#define NOKEYS (__VERSION__ < 300)\n//#define NOKEYS 1\n\n// Just use one vertex and one edge of region.\n#define NODE p\n#define EDGE P\n#define FACE S\n\nbool dofaces = true;\n\n// Coxeter graph:\n//  A B C   -- dihedral\n// o-o-o-o  -- the graph\n// P Q R S  -- mirror planes\n//\n// Convert to 6 dihedral angles:\n// angles = (A,B,2,2,2,C)\n\n// Given mirror planes PQRS, angles are PQ,QR,RP,PS,QS,RS\n// Pick your symmetry group\n#if 0\n// Hypercube\nconst int PQ = 4, QR = 3, RP = 2;\nconst int NFOLDS = 4;\n#elif 0\n// 24-cell\nconst int PQ = 3, QR = 4, RP = 2;\nconst int NFOLDS = 6;\n#else\n// 120- & 600-cell\nconst int PQ = 5, QR = 3, RP = 2;\nconst int NFOLDS = 15;\n#endif\n\nconst int PS = 2, QS = 2, RS = 3;\n\n// Rotation quaternions\nvec4 ql = vec4(0,0,0,1);\nvec4 qr = vec4(0,0,0,1);\n\n// Apply an R3 rotation as well as R4\nbool dorotate = false;\nbool dorotate4 = true;\n\n//#define DEBUG // Comment for performance, uncomment for debug\n#if defined DEBUG\nbool alert = false;\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\n// Approximate equality. Used for assertion checks.\nbool eq(float a, float b) {\n  return abs(a-b) < 1e-4;\n}\n\nbool eq(vec3 a, vec3 b) {\n  return eq(a.x,b.x) && eq(a.y,b.y) && eq(a.z,b.z);\n}\n\nbool eq(vec4 a, vec4 b) {\n  return eq(a.x,b.x) && eq(a.y,b.y) && eq(a.z,b.z) && eq(a.w,b.w);\n}\n#else\n#define assert(x) 0\n#endif\n\n// Quaternion multiplication\n\n// (p+P)(q+Q) = pq + pQ + qP + PQ\nvec4 qmul(vec4 p, vec4 q) {\n  vec3 P = p.xyz, Q = q.xyz;\n  return vec4(p.w*Q+q.w*P+cross(P,Q),p.w*q.w-dot(P,Q));\n}\n\n// Dihedral angle between two faces with normals n,m\n// Assume the normals are pointing inwards\nfloat dihedral(vec4 n, vec4 m) {\n  return PI - acos(dot(n,m));\n}\n\nfloat dihedral(int x) {\n  return -cos(PI/float(x));\n}\n\nvec4 P,Q,R,S; // Mirror planes\nvec4 p,q,r,s; // Vertices of fundamental tetrahedron\n\n// Reflect in hyperplanes until in fundamental region\nvec4 fold(vec4 p) {\n  // 4 is sufficient for hypercube symmetry\n  for (int i = 0; i < NFOLDS; i++) {\n    // Shortcut: P is always x = 0\n    //p -= 2.0*min(0.0,dot(p,P))*P;\n    p.x = abs(p.x);\n    p -= 2.0*min(0.0,dot(p,Q))*Q;\n    p -= 2.0*min(0.0,dot(p,R))*R;\n    p -= 2.0*min(0.0,dot(p,S))*S;\n  }\n  return p;\n}\n\nvoid solveangles() {\n  // Convert parameters to actual dihedral angles\n  float A = dihedral(PQ);\n  float B = dihedral(QR);\n  float C = dihedral(RP);\n  float D = dihedral(PS);\n  float E = dihedral(QS);\n  float F = dihedral(RS);\n  // Now construct 4 mirror planes satisfying those constraints\n  P = vec4(1,0,0,0);\n  // Q = [a,b,0,0], P.Q = A\n  float a = A;\n  assert(a*a < 1.0);\n  float b = sqrt(1.0 - a*a);\n  Q = vec4(a,b,0,0);\n  // R = [c,d,e,0]\n  // R.P = C = c\n  // Q.R = B = ac + bd\n  float c = C, d = (B-a*c)/b;\n  assert(c*c + d*d < 1.0);\n  float e = sqrt(1.0 - c*c - d*d);\n  R = vec4(c,d,e,0);\n#if __VERSION__ >= 300\n  // The easy way\n  mat3 mm = inverse(mat3(P.xyz,Q.xyz,R.xyz));\n  vec3 S3 = vec3(D,E,F)*mm;\n#else\n  vec3 X = cross(Q.xyz,R.xyz);\n  vec3 Y = cross(R.xyz,P.xyz);\n  vec3 Z = cross(P.xyz,Q.xyz);\n\n  // S3 = iX + jY + kZ\n  // P.S = P.S3 = D = iP.X\n  // Q.S = Q.S3 = E = jQ.Y\n  // R.S = R.S3 = F = kR.Z\n  \n  float i = D/dot(P.xyz,X);\n  float j = E/dot(Q.xyz,Y);\n  float k = F/dot(R.xyz,Z);\n\n  vec3 S3 = i*X+j*Y+k*Z;\n#endif\n  // We might have dot(u,u) = 1, in which case the fundamental region\n  // is 3 dimensional and we have an infinite 3d honeycomb. We don't\n  // do honeycombs here so exclude this case.\n  assert(dot(S3,S3) < 1.0-1e-4);\n\n  float w = sqrt(1.0 - dot(S3,S3));\n  S = vec4(S3,w);\n  assert(eq(dihedral(P,Q),PI/float(PQ)));\n  assert(eq(dihedral(Q,R),PI/float(QR)));\n  assert(eq(dihedral(R,P),PI/float(RP)));\n  assert(eq(dihedral(P,S),PI/float(PS)));\n  assert(eq(dihedral(Q,S),PI/float(QS)));\n  assert(eq(dihedral(R,S),PI/float(RS)));\n  mat4 m = inverse(mat4(P,Q,R,S));\n\n  // The 4 corners of the tetrahedron\n  p = vec4(1,0,0,0)*m; // Postmultiply = premultiply by transpose\n  q = vec4(0,1,0,0)*m;\n  r = vec4(0,0,1,0)*m;\n  s = vec4(0,0,0,1)*m;\n  p = normalize(p);\n  q = normalize(q);\n  r = normalize(r);\n  s = normalize(s);\n  assert(eq(length(p),1.0));\n  assert(eq(length(q),1.0));\n  assert(eq(length(r),1.0));\n  assert(eq(length(s),1.0));\n\n  assert(eq(fold(p),p));\n  assert(eq(fold(q),q));\n  assert(eq(fold(r),r));\n  assert(eq(fold(s),s));\n\n}\n\n#if 1\n// Stereographic projection\nvec3 proj(vec4 p4) {\n  float k = 1.0/(1.0+p4.w);\n  return k*p4.xyz;\n}\n\n// And the inverse, which is what we really need.\nvec4 iproj(vec3 p, out float k) {\n  k = 2.0/(1.0+dot(p,p));\n  return vec4(k*p,k-1.0);\n}\n#else\n// More general construct (projection point isn't on\n// sphere, but gives DE trouble for K > 1.0).\nconst float K = 1.1;\nconst float K2 = K*K;\nconst float RAD = K/sqrt(K2-1.0);  // Function not allowed here really\n\n// Solve quadratic, Ax^2 + 2Bx + C = 0\nfloat cquadratic(float A, float B, float C) {\n   float D = B*B - A*C;\n   if (D < 0.0) D = 0.0; // Clamp discriminant\n   D = sqrt(D);\n   assert(B >= 0.0);\n   if (B < 0.0) D = -D;\n   float x = (-B-D)/A;\n   // For present purposes, return the larger solution\n   if (B < 0.0) return x;\n   else return C/(A*x);\n}\n\n// k is \"scale factor\" for DE.\nvec4 iproj(vec3 p, out float k) {\n  float A = dot(p,p)+K2;\n  float B = -K2;\n  float C = K2 - 1.0;\n  k = cquadratic(A,B,C);\n  return vec4(k*p,K*(k-1.0));\n}\n#endif\n\nvec4 closest(vec4 p, vec4 a, vec4 b) {\n  // Find closest point on line through a and b\n  vec4 pa = p-a;\n  vec4 ba = b-a;\n  float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n  return a + h*ba;\n}\n\n// Spherical distance from p to q (on a great circle)\nfloat dist(vec4 p, vec4 q) {\n  // Make sure we stay in acos domain\n  return acos(clamp(dot(p,q),-1.0,1.0));\n}\n\n// Spherical distance from p to line (great circle) through q and r\n// This is an approximation, but seems good enough for now\nfloat dist0(vec4 p, vec4 q, vec4 r) {\n  vec4 t = closest(p,q,r);\n  t = normalize(t);\n  return dist(p,t);\n}\n\nfloat dist(vec4 z, vec4 p, vec4 n) {\n  // pmin is the orthogonal projection of z onto the plane defined by p and n\n  //then pmin is projected onto the unit sphere\n  float zn = dot(z,n), zp = dot(z,p), np = dot(n,p);\n  float alpha = zp-zn * np, beta = zn-zp * np;\n  vec4 pmin = normalize(alpha*p+min(0.0,beta)*n);\n  return dist(z,pmin);\n}\n\nfloat facedist(vec4 p, vec4 q) {\n  assert(eq(length(p),1.0));\n  assert(eq(length(q),1.0));\n  vec4 p0 = p - dot(p,q)*q;\n  assert(eq(dot(p0,q),0.0));\n  assert(eq(dot(p-p0,q),length(p-p0)));\n  p0 = normalize(p0);\n  assert(dot(p,p0) >= 0.0);\n  float t = dist(p,p0);\n  assert(t == t);\n  return t;\n}\n\nvec4 map(vec3 pos, out float k) {\n  vec4 p4 = iproj(pos,k);\n  if (dorotate4) {\n  \tp4 = qmul(ql,p4);\n  \tp4 = qmul(p4,qr);\n  }\n  p4 = fold(p4);\n  return p4;\n}\n\n\n#define PWIDTH 0.04\n#define EWIDTH 0.02\n#define FWIDTH 0.01\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_X = 87;\n\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\n bool keypress(int key) {\n#if NOKEYS\n   return false;\n#else\n   return texelFetch(iChannel0, ivec2(key,2),0).x != 0.0;\n#endif\n}\n\nvec4 store(int i,int j) {\n#if NOKEYS\n  return vec4(0);\n#else\n  return texelFetch(iChannel1, ivec2(i,j),0);\n#endif\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nfloat ewidth;\nfloat pwidth;\nconst float fwidth = FWIDTH;\n\nbool slice = false;\n\nfloat eval(vec3 pos) {\n  float k;\n  vec4 p4 = normalize(map(pos,k));\n  float d = 1e8;\n  // Just do one side of tetrahedron, quicker\n  // for simpler forms, eg. hypercube.\n  d = min(d,dist(p4,NODE,EDGE)-ewidth);\n  d = min(d,dist(p4,NODE)-pwidth);\n  if (dofaces) {\n    d = min(d,facedist(p4,FACE)-fwidth);\n  }\n  d = d/k;\n  if (slice) d = max(d,-pos.z);\n  return d;\n}\n\nvec3 calcNormal(vec3 p, float t) {\n  // Scale epsilon for distance from origin.\n  float eps = 1.0*length(p)*0.001;\n  //float eps = 0.005;\n  vec2 e = vec2(eps, 0.0);\n  return normalize(vec3(eval(p + e.xyy) - eval(p - e.xyy),\n                        eval(p + e.yxy) - eval(p - e.yxy),\n                        eval(p + e.yyx) - eval(p - e.yyx)));\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  float maxd = 25.0;\n  const float precis = 0.001;\n  float t = 0.25;\n  float res = 1e8;\n  for (int i = 0; i < 200; i++) {\n    vec3 p = ro + rd * t;\n    float d = eval(p);\n    //d = max(d,-p.z);\n    //d = max(d,length(p)-2.0);\n    d *= 0.5;       // Fudge factor\n    d = min(0.5,d); // Try and avoid overstepping\n    t += d;\n    if (d < precis) return t;\n    if (t > maxd) break;\n  }\n  return 1e8;\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    float t = iTime;\n    p.zx = rotate(p.zx,t * 0.2);\n  }\n  return p;\n}\n\nvec3 getcolor(vec3 pos) {\n  float k;\n  vec4 p4 = map(pos,k);\n  float d = 1e8, d0;\n  int id = 0;\n  // Just do one side of tetrahedron, quicker\n  // for simpler forms, eg. hypercube.\n  d0 = dist(p4,NODE)-pwidth;\n  if (d0 < d) { d = d0; id = 1; }\n  d0 = dist(p4,NODE,EDGE)-ewidth;\n  if (d0 < d) { d = d0; id = 2; }\n  if (dofaces) {\n    d0 = facedist(p4,FACE)-fwidth;\n    if (d0 < d) { d = d0; id = 3; }\n  }\n  if (id == 1) return vec3(0.02);\n  if (id == 2) return vec3(1,0,0);\n  if (id == 3) return vec3(0,1,0);\n  if (id == 4) return vec3(0,0,1);\n  if (id == 5) return vec3(1,1,0);\n  return vec3(1,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n  // Do a quaternion rotation in R4 about this axis\n  vec3 axis = vec3(1,1,1);\n  \n  solveangles();\n  float theta = 0.1*iTime;\n  slice = !keypress(CHAR_S);\n  dofaces = !keypress(CHAR_F);\n  pwidth = PWIDTH;\n  ewidth = EWIDTH;\n  if (keypress(CHAR_E)) {\n    ewidth *= 2.0;\n    pwidth *= 2.0;\n  }\n  // Left and right quaternion rotation about axis.\n  // A general R4 rotation is qpr for any unit quaternions\n  // q and r. Here we set them to be the same.\n  axis.x = float(!keypress(CHAR_0+7));\n  axis.y = float(!keypress(CHAR_0+8));\n  axis.z = float(!keypress(CHAR_0+9));\n  axis = normalize(axis);\n  dorotate = keypress(CHAR_R);\n  dorotate4 = !keypress(CHAR_T);\n  qr = normalize(vec4(sin(theta)*axis,cos(theta)));\n  ql = normalize(vec4(sin(theta)*axis,cos(theta)));\n\n  vec2 p = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0,0,-10);\n  ro.z *= 0.1*float(10+keycount(KEY_DOWN)-keycount(KEY_UP));\n  vec3 rd = vec3(p,2.0);\n  vec3 li = vec3(0.5, 0.8, -3.0);\n  ro = transform(ro);\n  rd = normalize(transform(rd));\n  li = normalize(transform(li));\n  float t = march(ro,rd);\n  if (t < 1e8) {\n    vec3 pos = ro + t*rd;\n    vec3 n = calcNormal(pos,t);\n    col = 0.5*getcolor(pos);\n    float diffuse = clamp(dot(n, li), 0.0, 1.0);\n    col *= diffuse;\n    float specular = pow(max(0.0,dot(reflect(li,n),rd)),4.0);\n    col += 0.3*specular*vec3(1);\n  }\n  col = pow(col, vec3(0.4545));\n  assert(col == col);\n#if defined DEBUG\n  if (alert) col = vec3(1,0,0);\n#endif\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}