{
    "Shader": {
        "info": {
            "date": "1572494086",
            "description": "Strap in",
            "flags": 0,
            "hasliked": 0,
            "id": "3dtSz2",
            "likes": 5,
            "name": "Shadertober 28 - Ride",
            "published": 3,
            "tags": [
                "ride",
                "inktober",
                "shadertober",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 500.\n#define T iTime*20.\nmat2 rot(float x){return mat2(cos(x),-sin(x),sin(x),cos(x));}\n\nfloat box(vec3 p, vec3 d)\n{\n  vec3 q = abs(p) - d;\n  return min(max(q.x,max(q.y,q.z)),0.0)+length(max(q,0.0));\n}\n\nfloat g;\nfloat map(vec3 p)\n{\n    float r=0.;\n    \n    float hw = 4.;\n    float hh = 5.;\n    float cz = cos(p.z/15.);\n    p.xy*=rot(cos(p.z/100.)/5.);\n    float b = box(p-vec3(0,-3.75-cz,T+10.+cos(iTime)*.5),vec3(1.5,2.-(p.z-T)*.1,3));\n    b=max(b,-box(p-vec3(0,-1.75-cz,T+10.+cos(iTime)*.5),vec3(1.,2.8,2.)));\n    g+=0.01/(0.01+b*b);\n    float f = p.y+hh+cz+smoothstep(-1.,.5,cos(clamp(p.x*3.,-5.,5.))*3.);\n    float rw = dot(p+vec3(hw,0,0),normalize(vec3(1,0,0)));\n    float lw = dot(p-vec3(hw,0,0),normalize(vec3(-1,0,0)));\n    float tw = dot(p-vec3(0,hh-cos(p.z/20.),0),normalize(vec3(0,-1,0)));\n    b*=.9;\n    f*=.5;\n    r=min(f,rw);\n    r=min(r,lw);\n    r=min(r,tw);\n    r=min(r,b);\n    return r;\n}\nfloat ray(vec3 ro, vec3 rd)\n{\n    float t=0.;\n    for(int i=0;i<128;i++)\n    {\n        vec3 p = ro+rd*t;\n        float s = map(p);\n        if(s<0.01)break;\n        t+=s;\n        if(t>MAX_DIST){t=-1.;break;}\n    }\n    return t;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.0001,0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        ));\n}\n\nvec3 cam(vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    return normalize(uv.x*cu+uv.y*cr+2.*cf);\n}\n\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n    vec2 uv = (2.*f-iResolution.xy)/iResolution.y;\n\n    float h = -1.75;\n    vec3 ro = vec3(0,2.+h+cos(T/15.-10.),T-10.);\n    vec3 ta = vec3(0,h+cos(T/15.-9.),T);\n    vec3 rd = cam(ro,ta,uv);\n    \n    float r = ray(ro,rd);\n    \n    vec3 col = vec3(0);\n    \n    if(r>0.)\n    {\n        vec3 p = ro+rd*r;\n        vec3 n = normal(p);\n        vec3 sun = normalize(vec3(0.,0.1,.3));\n        float dif = clamp(dot(n,sun),0.,1.);\n        \n        col=vec3(1.)*dif+r/300.+g/100.;\n    }\n\tc.rgb=col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}