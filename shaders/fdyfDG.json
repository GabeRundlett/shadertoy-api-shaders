{
    "Shader": {
        "info": {
            "date": "1658760110",
            "description": "Fork of triangle blur from three.js that looks better",
            "flags": 32,
            "hasliked": 0,
            "id": "fdyfDG",
            "likes": 2,
            "name": "Triangle blur fork",
            "published": 3,
            "tags": [
                "blur"
            ],
            "usePreview": 0,
            "username": "LoganDark",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord/iResolution.xy;\n\tfragColor = triangleBlur(iChannel0, uv, vec2(0, RADIUS) / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265359\n#define ITER 5.0\n#define RADIUS iMouse.x / iResolution.x * 256.0\n\nfloat rand(const in vec2 uv) {\n\tconst float a = 12.9898, b = 78.233, c = 43758.5453;\n\tfloat dt = dot(uv.xy, vec2(a, b));\n\tfloat sn = mod(dt, PI);\n\treturn fract(sin(sn) * c);\n}\n\nvec3 fromLinear(vec3 linearRGB) {\n\tbvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n\tvec3 higher = vec3(1.055)*pow(linearRGB, vec3(1.0/2.4)) - vec3(0.055);\n\tvec3 lower = linearRGB * vec3(12.92);\n\treturn mix(higher, lower, cutoff);\n}\n\nvec3 toLinear(vec3 sRGB) {\n\tbvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n\tvec3 higher = pow((sRGB + vec3(0.055))/vec3(1.055), vec3(2.4));\n\tvec3 lower = sRGB/vec3(12.92);\n\treturn mix(higher, lower, cutoff);\n}\n\nvec4 triangleBlur(const in sampler2D sampler, const in vec2 uv, const in vec2 delta) {\n\tfloat offset = rand(uv) - 0.5;\n\n\tvec4 sum = vec4(0.0);\n\tfloat total = 0.0;\n\n    for (float t = -ITER; t <= ITER; t++) {\n\t\tfloat percent = (t + offset) / (ITER + 1.0);\n\t\tfloat weight = 1.0 - abs(percent);\n\n\t\tvec2 loc = uv + delta * percent;\n\t\tif (!any(lessThan(loc, vec2(0.0))) && !any(greaterThan(loc, vec2(1.0)))) {\n\t\t\tvec4 srgb = texture(sampler, uv + delta * percent);\n\t\t\tsum += vec4(toLinear(srgb.rgb), srgb.a) * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t}\n\n\tvec4 linear = sum / total;\n\treturn vec4(fromLinear(linear.rgb), linear.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord/iResolution.xy;\n\tfragColor = triangleBlur(iChannel0, uv, vec2(RADIUS, 0) / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}