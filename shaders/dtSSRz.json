{
    "Shader": {
        "info": {
            "date": "1675551828",
            "description": "make sure to click the sound!\n\nsame as fork, very very messy code",
            "flags": 64,
            "hasliked": 0,
            "id": "dtSSRz",
            "likes": 16,
            "name": "xXx_Monolith_xXx",
            "published": 3,
            "tags": [
                "h"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 80.\n#define SURF_DIST .001\n\n#define t iTime\n#define smx 0.4\n\n//https://www.shadertoy.com/view/sslGzN\nconst float Semitone  = 1.05946309436; //12 notes between an octave, octave is 2, so a semitone is 2^(1/12)\n\nfloat KeyToFrequency(float n){\n    return pow(Semitone,(n-8.))*440./48000.;\n}\n\nfloat smh(float a, float b, float k) {\n    return clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n}\n\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 ori() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float a = 0.14*t+pi/4.;\n    float r = 12. + 6. * sin(a);\n    r = mix(r, 7., tanh(0.005*t));\n    vec3 ro = vec3(r*cos(a), 1.8 + 1. * sin(a), r*sin(a));\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nvec2 map(vec3 p) {\n    p.y -= 0.005 * dot(p.xz, p.xz);\n    float pd = p.y - 0.5;\n    \n    //p.xz -= 13.5-.2 * t;\n    float sc = 1.;//0.25;\n    float y1 = texture(iChannel2, sc * 0.1 * (p.xz - 0.2*t)).r;\n    float y2 = texture(iChannel2, sc * 0.05 * (p.xz - 0.2*t)).r;\n    float y3 = texture(iChannel2, sc * 0.12 * (p.xz - 0.2*t)).r;\n    //pd += smin(y2,y1, .5+.5*cos(t));\n   // pd += y1 + y2 + y3;\n    //pd += .5*cos(pi*abs(y1)/(1.+abs(y2)));\n    pd += 0.2*smoothstep(-0.3,0.1, 0.05 - abs(y3 - 0.5));\n\n    /*\n    vec3 ip = 10. * p;\n    ip.xz = floor(ip.xz) + 0.5;\n    vec3 fp = 10. * p;\n    fp.y += -5.+5.*cos(pi*abs(y1)/(1.+abs(y2)));\n    fp.xz = fract(fp.xz) - 0.5;\n    //*/\n    \n    //float d = box(fp, vec3(0.5 * y3)) - 0.05; \n   // pd = smin(td,pd,smx);\n    //smh(td,pd,smx\n    float band = KeyToFrequency(33.);\n    float s = texture(iChannel0, vec2(band, 0.25)).x;\n    //d = min(d, length(p) - 2. * s);\n    p.xz *= rot(0.2*t + 0.5*pd);\n    float sd = length(p-vec3(0,1.5,0)) -0.5 - 2.5*exp(-0.2*pd);\n    \n    sd = mix(sd, mlength(p.xz)-1., 0.5);\n   // d = smin(d,pd, 0.2);\n   // pd = min(pd, sd);//, 0.5*s*s);\n    if (sd < pd)\n        return vec2(sd, 0.);\n    //if (sd < d)\n    //    return vec2(sd, 0.);\n    return vec2(pd, 20000.);\n}\n\nvec3 march(vec3 ro, vec3 rd, float z) {\t\n    float d = 0.;\n    float s = sign(z);\n    int steps = 0;\n    float mat = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        m.x *= 0.9 + 0.1 * hash(hash(p.x,p.z), p.y); // for glow\n        if (s != sign(m.x)) { z *= 0.5; s = sign(m.x); }\n        if (abs(m.x) < SURF_DIST || d > MAX_DIST) {\n            steps = i + 1;\n            mat = m.y;\n            break;\n        }\n        d += m.x * z; \n    }   \n    return vec3(min(d, MAX_DIST), steps, mat);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat AO(in vec3 p, in vec3 n) {\n\tfloat occ = 0.;\n    float sc = 1.;\n    for (float i = 0.; i < 5.; i++) {\n        float h = 0.015 + 0.015 * i;\n        float d = map(p+h*n).x;\n        occ += (h-d)*sc;\n        sc *= 0.95;\n    }\n    return exp(-14.*clamp(occ,0.,1.));//clamp(1. - 3.*occ, 0., 1.);\n}\n\nfloat shadow(in vec3 ro, in vec3 rd) {\n    float res = 1.;\n    float t = SURF_DIST;\n    for (int i=0; i<24; i++)\n    {\n\t\tfloat h = map(ro + rd * t).x;\n        float s = clamp(32. * h / t, 0., 1.);\n        res = min(res, s);\n        t += clamp(h, 0.01, 0.2);\n        if(res<SURF_DIST || t>MAX_DIST ) break;\n    }\n    res = clamp(res, 0.0, 1.0);\n    return smoothstep(0., 1., res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = ori();\n    \n    vec3 rd = dir(uv, ro, vec3(0,2,0), 1.5);\n    vec3 col = vec3(0);\n   \n    vec3 m = march(ro, rd, 1.);  \n    float d = m.x;    \n    vec3 p = ro + rd * d;\n    \n    if (d<MAX_DIST) {        \n        vec3 n = norm(p);\n        vec3 r = reflect(rd, n);        \n\n        vec3 ld = normalize(p + vec3(100,22.5,0));//normalize(vec3(1,2,3));\n        float dif  = dot(n,  ld)*.5+.5;\n        float spec = pow(dif, 16.);\n        float fres = pow(.5 + .5 * dot(rd, n), 2.*exp(-0.1*length(p.xz)));\n     \n        col = vec3(dif);\n        float c = .5+.5*cos(10.*p.y);\n        col *= texture(iChannel1, vec2(0.02*m.z,c)).rgb;//(.8+.2*cos(2.*pi*ao));  \n        float sh = shadow(p + (2.+hash(p.x,p.z)) * SURF_DIST * n, ld);\n        float ao = AO(p, n);\n        col *= 0.2 + 0.8 * sh;\n        col *= 0.1 + 0.9 * ao;\n        vec3 c2 = vec3(1,-.5,-5.);// mix(vec3(1,0,0),vec3(0,0,1),rd);\n        col = mix(col,c2 +vec3(200,143,112)/255., fres);\n        col = clamp(col, 0., 1.);\n        if (m.z == 0.)\n            col *= m.z;\n       // col *= 0.1 + 0.9 * ao;\n    }\n    col = mix(col, vec3(200,143,112)/255., 1.-exp(-0.08 * length(p.xz)));\n    vec3 tx = texture(iChannel1, vec2(0.5*m.z)).rgb;\n    col = mix(col, tx, (1.-exp(-0.01 * m.y)));\n    \n    col = 1.-pow(1.-col, vec3(1./1.8));\t// gamma correction\n    vec3 col2 = tanh(vec3(4.2,3.5,3.4)*col);\n    \n    // -- everything below here I've given up on understanding --\n    \n    float a = 0.14*t+pi/4.;\n    float sz = 0.5 + 0.5 * sin(a);\n    sz = mix(sz, -2., tanh(0.05*max(0.,t-28.)));\n   // float sz = 0.4 - 0.2 * sin(a);\n    //float s = texture(iChannel0, vec2(uv.y,0.25)).y;\n    float k = 1. / iResolution.y;\n    float mx = smoothstep(-k, k, mix(0.6,0.2,sz) - abs(uv.x));\n    \n    float wav = texture(iChannel0, vec2((0.5-0.4*tanh(0.1*t))*abs(uv.x)+0.5, 0.25)).x;\n    float ss = exp(-20.*abs(uv.y) + 1.*(wav-0.55));\n    float ss2 = step(abs(uv.y), tanh(0.019*t) + tanh(0.1*t)*(wav));\n    float ss3 = smoothstep(-k, k, -wav + 0.5 - uv.y) \n              - smoothstep(-k, k, -wav + 0.5 - uv.y - 0.02);\n    ss3 *= exp(-10.*abs(uv.x));\n    float mx2 = 1.-step(1., m.z);\n    col = mix(col, col2, mx);\n    col *= mix(2.*(1.-tanh(0.03*t))*ss, 4.*ss3, mx2)\n    + ss2 * vec3(1,tanh(t), tanh(0.1*t));\n    col = pow(col, vec3(1.2));\n    //col = pow(col, vec3(1.-exp(-abs(uv.x + s))));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32210,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/beatsantique/bassnectar-so-butterfly-beats-antique-remix-ft-sorne?in=madison-davis-734836374/sets/beebooboobop&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Thanks to (everyone I've copied code + ideas from):\n// TheArtOfCode - raymarching\n//  BlackleMori - hash, erot\n//      Sizertz - AO, shadow\n//        NuSan - materials\n//        Tater - raymarching\n//         Leon - raymarching hash trick\n//           iq - pal, smin, most things!\n\n#define tau 6.2831853071\n#define pi 3.1415926535\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define pal(a,b) .5+.5*cos(2.*pi*(a+b))\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat h21(vec2 a) { return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123); }\nfloat mlength(vec2 uv) { return max(abs(uv.x), abs(uv.y)); }\nfloat mlength(vec3 uv) { return max(max(abs(uv.x), abs(uv.y)), abs(uv.z)); }\n\n// Maybe remove this\nfloat sfloor(float a, float b) { return floor(b-.5)+.5+.5*tanh(a*(fract(b-.5)-.5))/tanh(.5*a); }\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}