{
    "Shader": {
        "info": {
            "date": "1709523689",
            "description": "A multiscale truchet weave pattern using triangle waves instead of trigonometric functions.",
            "flags": 8,
            "hasliked": 0,
            "id": "4XlSW4",
            "likes": 7,
            "name": "Multiscale neon truchet 2",
            "published": 3,
            "tags": [
                "music",
                "truchet",
                "multiscale",
                "weave"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "#define triwave(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1(p) (abs(fract(p/4.0)-.5)-abs(fract(p/2.0)-.5)/2.)\n\nvec4 t1(vec2 c, vec2 p){\n    return triwave((.5 - length( min(p=fract(p*sign(triwave1(c*c.y))), 1.-p.yx) )) * vec4(22,7,5,0));\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 p = (I/1e2+iTime/4.);\n    vec4 t_ = t1(ceil(p),p);\n    vec4 t1_ = vec4(0.),\n    t3_ = vec4(0.);\n    float scale = 2.;\n    \n    for(int i = 0; i < 3;i++){\n        t1_ = t1(ceil(p/scale),p/scale);\n        scale *= 2.;\n        t3_ = 1.-min(t_,t1_);\n        t3_.x -= triwave(t3_.x-iTime);\n        if(\n            //Lots of interesting patterns here!\n            //t3_.y>t1_.y\n            //t3_.y-triwave1(iTime-p.x)>t1_.y-triwave1(iTime-p.y)\n            //t_.y>t_.x\n            //t1_.y>t1_.z\n            1.-t_.z>t1_.y||1.-t_.y>t1_.x||1.-t_.x>t1_.z\n\n            //t1_.y>t_.y||t1_.z>t_.z||t1_.x>t_.x\n            //t_.y<t1_.y\n\n            //t_.x>t1_.x&&t_.y<t1_.x\n            //t_.z>.5||t_.y>.5||t_.z>.5\n            //t1_.z>t_.z||t1_.y>t_.y||t1_.z>t_.z\n        ) t_ = 1.-t1_;\n    }\n    O = max(min(t3_,1.),0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/mtSBzV\n\nfloat binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n\nfloat fibonacci(float nthNumber_) {\n        int nthNumber = int(nthNumber_);\n        int previouspreviousNumber, previousNumber = 0, currentNumber = 1;\n        for (int i = 1; i < nthNumber ; i++) {\n\n            previouspreviousNumber = previousNumber;\n\n            previousNumber = currentNumber;\n\n            currentNumber = previouspreviousNumber + previousNumber;\n\n        }\n        return float(currentNumber);\n}\n\nfloat m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a, float b){\n    /*\n    for(float i = 1.; i < mod(floor(a/8.),8.); i++){\n        a += mod(floor(a/8.),b)*i;\n    }\n    */\n    return\n        mod(a,b)\n        //mod(a+floor((a/2.-b)/2.),b)\n        //mod(a+floor(a/2.),b)\n        //mod(a+floor(b*13./7.),b)\n        //floor(mod(floor(a+floor(a)/8.),b))\n        //mod(a-fibonacci(a/32.),b)\n        //mod(a+mod(a-mod(a,3.),5.)+mod(a+mod(a,5.),3.),b)\n        //mod(a-mod(a-mod(a,5.),3.),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n\n    //a = (a/2. + floor(a))/4.;\n    \n    //a -= fibonacci(a/64.);\n    \n    //a += float(int(a)>>int(b));\n    //a += floor(a/4.);\n    //a += fibonacci(mod(a,8.));\n    //a += m1(a,1.+b*b,4.);\n    //a += m1(a,5.+b,3.+b);\n    //a += float(fibonacci(int(mod(a,8.))));\n\n    //a += abs(mod((a),3.)-mod((a),5.));\n    //a += 2.*floor(1.+mod(floor(a/2.),2.))/(1.+mod(floor(a/4.),2.));\n    //a -= mod(floor(a/2.)/2.,2.)*2.;\n    float m1 = floor(mod1(b/2.,2.));\n    \n    a +=\n        //floor(mod(b/2.,2.))+mod(floor(a+3.),4.-b)\n        m1\n        //floor(mod(b/2.,2.))\n        //mod(b/2.+binary_digit(int(a),1),2.)\n        //mod((b/2.+floor(a/4.)),4.)\n    ;\n    float\n    a2 = mod1(floor(a),b),\n    a3 =\n        mod1(floor(a/(b)),b)\n        //mod1(floor((a+floor((b*3.+m1)/4.))/(b)),b)\n        //mod1(floor(floor(a/4.)*b/4.+(a2)/(b)),b)\n    ;\n    \n    //a -= mod(floor(a+b),3.);\n    //a += m1(a,5.+b,3.+b);\n    \n    //a += m1(a,3.,7.);\n    \n    //a += mod(-a*2.,2.)/2.;\n    return\n        //mod1(a2*a3,b)\n        mod1(a2*(a3+floor(a/4.*sign(a2-a3))),b)\n        //mod(floor((1.+a3)/(1.+a2)),b)\n        //mod(-mod(-floor(a),b)*mod(-floor((a)/b),b),b)\n        //mod(floor(a-mod(a,3.)),b)\n        //floor(mod(a/floor(1.+mod(-a/2.+b,2.)),b))\n        //floor(mod(mod(floor(a)/(1.+mod(floor(-a/2.),2.)),b)*mod(floor((a)/b),b),b))\n        //floor(mod((a/(1.+mod(floor(-a/2.),2.))),b))\n        //floor(mod(mod(floor(a),b)*mod(a/b,b),b))\n        //floor(mod(mod(floor(a),2.)+mod(a/2.,6.),b))\n        //mod(floor(mod(a,8./b))*3.,b)\n        //floor(mod(mod(a,1.+abs(mod(a,5.)-mod(a,3.))),b))\n        //mod(floor(floor(a)/1.5)+floor(floor(a)/2.),b)\n        //floor(mod(mod(floor(a/2.)*3.,b)*mod(floor(a/2.)*5.,b),b))\n        //floor(mod(mod(floor(a)*3.,b/3.+3.)*mod(floor(a)*5.,b/5.+5.),b))\n        //mod(mod(floor(a)+2.,b)*mod(floor((a/2.)/b),b)+2.,b)\n        //floor(mod(mod(floor(a)/b,b)*mod(floor((a)/b)+2.,b)+2.,b))\n        //floor(mod((mod(floor(a),b))*mod(floor(a/b*2.)/2.,b),8.))\n    ;\n}\n\n\nfloat prime_rhythm(float time){\n    \n    //time += mod(time/8.,5.) - mod(time/8.,3.);\n    \n    //time = (time/2. + floor(time))/4.;\n    \n    //time += fibonacci(mod(time/8.,8.));\n    \n    return\n        (1.+fmod(time/5.,2.))/(1.+fmod(time/3.,2.))\n        //(1.+fmod(time/8.,2.))/(1.+fmod(time/4.,2.))\n        //(1.+fmod(time/5.,2.))/(1.+fmod(-time/3.,2.))\n    ;\n    //return (1.+fmod(time/2.,2.))*(1.+fmod(time/3.,2.))/(1.+fmod(time/5.,2.))/(1.+fmod(time/7.,2.))*(1.+fmod(time/11.,2.));\n}\n\nfloat fmod1(float a, float b){\n    //change the notes without changing the rhythm\n    //a += mod(-b/2.,2.);\n    //a += prime_rhythm(a);\n    return\n        fmod(a,b)\n        //fmod(a,b-fmod(a/2.,2.))\n        //fmod(floor(a)*5.,b+fmod(floor(a/8.)*3.,b))\n    ;\n}\n\n//#define fract1(a) pow(fract(a),2.)\n//#define fract1(a) pow(fract(a),1.+fract(a))\n#define fract1(a) (1.-fract(-a)*fract(-a))\n//#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n//#define fract1(a) pow(fract(a),3.)\n\nvec2 sitar3(vec2 a, vec2 nb){\nreturn a/16./4.*abs(log(1./2.+.5*a*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./2.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n;\n}\n\nvec2 note1(vec2 rhythm,float attack,float duration){\nreturn vec2(\n      (-log(attack+.5/duration*fract1(rhythm.x))),(-log(attack+.5/duration*fract1(rhythm.y)))\n  );\n}\n\nvec2 instrument1(vec2 a,vec2 nb,int instrument){ \n  vec2 sitar = \n  a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.))) \n  //a/16./2.*abs(log(1./4.+a*abs(1./4.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  //-log(1./4.+a*abs(abs(vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n  ,\n  \n  gamelan =\n      //sitar3(a,nb)\n      a/16./4.*abs(log(1./4.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  +.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n  ,\n  \n  steel_drum = a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))      \n  \n  ,oud = a/16./8.*abs(log(1./4.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  +.5*log(1./4.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n\n  ,banjo = a/16./8.*abs(log(1./2.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  -log(1./2.+a*abs(abs(1./2.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n\n  ,harp = a/16./2.*abs(log(1./8.+a*abs(1./4.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./8.+a*abs(abs(1./4.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.))) \n\n  \n  \n  ;\n  //instrument = 1+int(fmod(time/4.+float(instrument),2.));\n  switch(instrument){\n  case 1: return gamelan;\n  case 2: return oud;\n  case 3: return steel_drum;\n  case 4: return sitar;\n  case 5: return harp;\n  case 6: return banjo;\n  default:\n  return\n      //gamelan\n      oud\n      //steel_drum\n      //sitar\n      //hurdy-gurdy\n      //(abs(log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998*2.),fract1(nb.y*2.)))/2.))-log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.))))\n\n      //log(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))*a)\n      \n      //abs(log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      //abs(1.+log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      \n      //log(a*abs(1./4.-abs(.5-vec2(fract1(nb.x+.5),fract1(nb.y*2.)))))\n  ;\n}\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration){\n  \n  //duration /= (1.+fmod(time,2.));\n  float s1 =\n      8.,\n  tempo1 =\n      //1.\n      //divide by prime numbers to get an interesting rhythm\n      prime_rhythm(time)\n  ,\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod(t4,2.),\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6+mod(t6/8.,3.)-mod(t6/8.,2.),s1/2.)/2.),\n      //floor(fmod(t6+floor(t6/8.),s1/2.)/2.),\n      //floor(2.*fmod(floor(t6)*3.,s1/2.)/2.),\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.)\n  ,attack=1./64./4.;\n  vec2\n  rhythm=\n      t*vec2(1./2./prime_rhythm(time+14.),1./prime_rhythm(time+7.))\n  ,a=\n      note1(rhythm,attack,duration)\n      //(note1(rhythm,attack,duration)-note1(rhythm,attack/2.,duration*2.)/4.)\n      //note1(rhythm/2.,attack,duration)\n  ,\n  nb = vec2(\n      t*pow(2.,(m3+m2-t1*4.)/7.+scale)*tempo1\n      //t*pow(2.,(m3-m2*2.+t1)/7.+6.5)*tempo1\n      \n      //airhorn remix\n      //abs(t*(pow(2.,(m3+m2-t1*4.)/7.+7.5)*tempo1/2.)-a/16.)*2.\n  ),\n  nb1 = vec2(t*pow(2.,(4.+t1*4.)/7.+scale))*tempo1\n  ;\n  \n  return\n      instrument1(a,nb,instrument)\n      //instrument1(a,nb,instrument)-instrument1(a/2.,nb*2.,1)\n      //instrument1(a,nb,instrument)+instrument1(note1(rhythm/2.,attack*2.,duration/4.),nb1*2.,1)\n  ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp, time,scale,instrument,1.);\n}\n\nvec2 mainSound(int a,float b){\n    return\n        //mainSound1(a,b,6.,6)\n        //(mainSound1(a,b,6.5,1)+mainSound1(a,b+8.,5.5,1)/2.+mainSound1(a,b+16.,4.5,1)/4.)\n        \n        //sounds like a tabla drum\n        //mainSound1(a,b,5.5,1,1.)/2.\n        \n        //sitar\n        //abs(mainSound1(a,b,5.5,4,2.)-mainSound1(a,b,6.5,4,4.)/4.)\n        //mainSound1(a,b,5.5,4,1.)\n        \n        //(mainSound1(a,b,5.5,4,1.)-mainSound1(a,b,6.5,4,2.)/4.)\n        \n        //gamelan\n        //(mainSound1(a,b,5.5,1,2.)-mainSound1(a,b,6.5,1,1.)/4.)\n        //(mainSound1(a,b,5.,1,2.)*2.-mainSound1(a,b,6.,1,1.))\n        \n        ((mainSound1(a,b-fract(b/4.)*2.,5.,4,1.))*2.+(mainSound1(a,b-fract(b/8.)*4.,7.,4,2.)))\n\n\n        //(mainSound1(a,b/2.,8.)+mainSound1(a,b,7.)/2.+mainSound1(a,b*2.,6.)/4.+mainSound1(a,b*4.,5.)/8.)\n        //(mainSound1(a,b,6.5)+mainSound1(a,b/2.,7.5)+mainSound1(a,b/4.,8.5))\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}