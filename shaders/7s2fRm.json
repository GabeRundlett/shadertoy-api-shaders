{
    "Shader": {
        "info": {
            "date": "1645918791",
            "description": "The pumping box factory",
            "flags": 0,
            "hasliked": 0,
            "id": "7s2fRm",
            "likes": 13,
            "name": "大龙猫 - Pumpin' box factory",
            "published": 3,
            "tags": [
                "cube",
                "box",
                "factory"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.1,.3,.4)));}\nfloat box(vec3 p,vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(q,vec3(0.)))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\nfloat yd =0.;\nfloat xd=0.;\nfloat id = 0.;\nvec2 sdf(vec3 p){\n\n float time = iTime*150./60.*.5;\n p.z +=(floor(time)+pow(fract(time),4.));\n  p.z *=.25;\n    id = floor(p.z);\n     p.xy *=rot(id+sign(mod(id,2.)-.5)*iTime*.2);\n      p.x  +=asin(sin(time*.5+id*.2))*.5;\n    p.y  +=asin(cos(time*.5+id*.2))*.5;\n    \n    p.z =   fract(p.z)-.5;\n    p.z /=.25;\n    vec2 h; \n    h.x = box(p,vec3(1.1));\n    h.y = mod(id,3.)+1.;\n    \n    \n    \n    vec2 t ;\n    vec3 tp = p;\n    tp = abs(tp);\n    tp.y -= 2.+ (yd=sin(iTime+id))*.75;\n    t.x = box(tp,vec3(1.,.125,1.));\n    t.y = 4.;\n    h = t.x < h.x ? t:h;\n    \n    for(float i=0.;i<2.;i++){\n        tp.xz =abs(tp.xz)-.155;\n        tp.xz *=rot(.785+id);\n    }\n    t.x = sdCappedCylinder(tp,-vec3(0.+cos(id)*.1,2.,0),-vec3(0.,tp.y,0.),.2+sin(iTime+p.y)*.1);\n    t.y = 2.;\n  \n    h = t.x < h.x ? t:h;\n    \n    tp = p;\n    tp = abs(tp);\n    tp.x -= 2.+(xd=cos(iTime-id))*.75;\n    t.x = box(tp,vec3(.125,1.,1.));\n    t.y = 4.;\n    h = t.x < h.x ? t:h;\n    for(float i=0.;i<2.;i++){\n        tp.yz =abs(tp.yz)-.155;\n        tp.yz *=rot(.785+id);\n    }\n    t.x = sdCappedCylinder(tp,-vec3(2.,0.,0),-vec3(tp.x,0.,0.),.2+sin(iTime+tp.x)*.1);\n    t.y = 3.;\n    h = t.x < h.x ? t:h;\n    return h;\n}\n\n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p,float ee){vec2 e=vec2(-ee,ee);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy -.5* iResolution.xy)/iResolution.y;\n    vec3 rp,ro=vec3(4.,2.,-5.)+1e-5;\n    ro.xy *= rot(iTime*.2);\n    rp = ro;\n    vec3 rt = vec3(0.)+1e-5;\n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z,vec3(0.,-1.,0.)));\n    vec3 y = normalize(cross(z,x));\n    \n    vec3 rd = mat3(x,y,z)*normalize(vec3(uv,1.-.8*sqrt(length(uv))));\n    \n    vec3 light = vec3(1.,2.,-3.);\n    vec3 col = vec3(.1);\n    vec3 acc= vec3(0.);\n    float dd=0.;\n    for(float i=0.;i<128.;i++){\n        vec2 d = sdf(rp);\n        if(floor(d.y)==2. || floor(d.y)==3.){\n            float li = floor(d.y)==2. ? yd:xd;\n            acc+=pal(mix(1.15,.3,pow(li*.5+.5,1.5)))*exp(-abs(d.x))/60.*mix(4.,.1,li*.5+.5); \n            d.x = max(.001,abs(d.x));\n     \n        } \n        \n        \n        rp+=rd*d.x;\n        dd+=d.x;\n      \n        if(dd> 50.) break;\n        if(abs(d.x)<.0001){\n            vec3 n = norm(rp,.001);\n            if(d.y == 4.) {\n            vec3 n2 = norm(rp,.01);\n             col = (mod(id,2.)==0.? vec3(0.0, 0.34, 0.72):     vec3(1.0, 0.84, 0.0))*smoothstep(.2,.1,length(n-n2));\n            } else {float dif = max(0.,dot(normalize(light-rp),n));\n            col = vec3(1.)*dif;\n            }\n            break;\n        }\n    \n    }\n    col +=acc;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}