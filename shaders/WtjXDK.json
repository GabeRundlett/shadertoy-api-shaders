{
    "Shader": {
        "info": {
            "date": "1568081739",
            "description": "Reactive visualisation of my most favourite live set this summer.\n\nWatch the first 5 min in fullscreen :)\n\nLink to the set:\nhttps://soundcloud.com/township-rebellion/township-rebellion-fusion-festival-palast-der-republik-2019",
            "flags": 64,
            "hasliked": 0,
            "id": "WtjXDK",
            "likes": 10,
            "name": "[phreax] lines",
            "published": 3,
            "tags": [
                "reactive",
                "geometric"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2019\n*/\n\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI 3.141592\n#define T1 118.9\n#define T2 134.2\n#define BEATS 15.53\n#define BEAT_OFF 6.88\n#define time iChannelTime[0]\n#define S(a, b, x) smoothstep(a, b, x)\n\n// interval, 1 if x in [a, b], 0 otherwise\n#define I(a, b, x) step(a, x)*step(x, b)\n\n\n// fadeIn in only defined in interval [a, b]\nfloat fadeInt(float a, float b, float x) {\n    return S(a, b, x)*I(a, b, x);\n}\n\n// sum average fft for bands\nfloat avgVolume(int fMin, int fMax) {\n    float sum = 0.0;\n    \n    for(int i = fMin; i <= fMax; i++) {\n        sum += texelFetch(iChannel0, ivec2(i, 0), 0).x;\n    }\n    \n    return sum / float(fMax-fMin);\n}\n       \nfloat layer(vec2 uv, vec2 sound) {\n    float bass = sound.x;\n    float mid = sound.y;\n\n    uv = uv.yx;\n    \n    float m = 0.;\n    float zoom = mix(1., 5., fadeInt(110., T1, time));\n    float kalei = I(T1, T2, time) + I(T2, T2+5., time)\n                  +step(T2+5., time) * step(BEATS/8., mod(time+BEAT_OFF, BEATS/4.));\n    float neigh = step(1.1, zoom);\n    float tousle = S(60., 65., time)*I(60., T1, time)+step(T2+15., time)*kalei;\n    float tousleA = mix(5., 10., fadeInt(60., T1, time));\n    float nlines = mix(1., 10., S(10., 30., time));\n    uv *= rot(.4*PI*fadeInt(110., T1, time));\n    uv = mix(uv, vec2(fract(zoom*uv.x), uv.y), neigh);\n    \n    bass += 0.8*I(T1, T1+3.5, time);\n    bass = bass*(1.-0.5*I(0., 30., time));\n    bass = bass*(1.-0.2*I(0., T1, time));\n    bass += 1.*I(T2, T2+1.5, time);\n    float t = 2.*time*(1.-(kalei*.6*step(T2+2., time)));   // slow down on kaleidoscope\n    vec2 uvO = uv;\n    \n    for(float off=-neigh; off<=neigh; off++) {\n        uv = uvO + vec2(off, 0.);\n        \n        vec2 UV = uv;\n\t\n        // kaleidoscope\n        vec2 kv = abs(uv);\n        kv *= rot(0.25*PI);\n        kv = abs(kv);\n        kv *= rot(0.6*PI+0.1*t);\n        kv = abs(kv);\n        \n        uv = mix(UV, kv, kalei) ;\n        \n        for(float i=0.; i<nlines; i+=1.) {\n            float s = sin(0.25*t)*i; \n            uv.x += bass*0.2*sin(s*2.+5.*uv.y-t);\n            uv.x += 0.15*sin(20.*i+tousleA*uv.y+0.5*t)*tousle;\n            m += abs(0.06/uv.x) * 0.01;                    // draw lines\n        }\n        m += abs((200./iResolution.x)/uv.x) * 0.02*bass;   // draw main line\n        m += mid*0.02/(abs(uv.x)+abs(uv.y))*kalei;         // supernova\n        m += mid*0.01/(abs(UV.x)+abs(UV.y))*kalei;\n    }\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    float bass = clamp(avgVolume(0, 40)-0.5, 0.01, 1.)*1.5;\n    float mid = clamp(avgVolume(80, 100)-0.5, 0.0, 1.)*3.;\n    vec2 sound = vec2(bass, mid);\n    col += layer(uv, sound);\n    \n    if(time >= T2) {\n    \tcol += vec3(layer(uv*0.75, sound), 0, 0);\n    \tcol += vec3(0, layer(uv*0.5, sound), 0);\n    \tcol += vec3(0, 0, layer(uv*0.25, sound));\n\t}\n   \n    col *= col;\n    col = mix(1.-col, col, S(T2, T2+.2, time));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19499,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/township-rebellion/township-rebellion-fusion-festival-palast-der-republik-2019"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}