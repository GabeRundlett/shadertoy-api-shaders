{
    "Shader": {
        "info": {
            "date": "1496615864",
            "description": "100% pure code without artificial textures",
            "flags": 0,
            "hasliked": 0,
            "id": "MdlBW7",
            "likes": 47,
            "name": "Volatile Sphere of Cubes",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "cube",
                "sphere"
            ],
            "usePreview": 0,
            "username": "knarkowicz",
            "viewed": 1782
        },
        "renderpass": [
            {
                "code": "const float MATH_PI = float( 3.14159265359 );\n\nfloat saturate( float x )\n{\n    return clamp( x, 0.0, 1.0 );\n}\n\nfloat Sphere( vec3 p, float s )\n{\n\treturn length( p ) - s;\n}\n\nfloat RoundBox( vec3 p, vec3 b, float r )\n{\n\treturn length( max( abs( p ) - b, 0.0 ) ) - r;\n}\n\nfloat Union( float a, float b )\n{\n    return min( a, b );\n}\n\nfloat RepeatAngle( inout vec2 p, float n ) \n{\n\tfloat angle = 2.0 * MATH_PI / n;\n\tfloat a = atan( p.y, p.x ) + angle / 2.0;\n\tfloat r = length( p );\n\tfloat c = floor( a / angle );\n\ta = mod( a, angle ) - angle / 2.;\n\tp = vec2( cos( a ), sin( a ) ) * r;\n\treturn c;\n}\n\nvoid Rotate( inout vec2 p, float a ) \n{\n    p = cos( a ) * p + sin( a ) * vec2( p.y, -p.x );\n}\n\nfloat Scene( vec3 p )\n{\n    float a = p.x;\n    p.x = -p.y;\n    p.y = a;\n    \n    Rotate( p.yz, iTime );    \n    \n    // sphere\n    float ret = Sphere( p, 0.6 );\n    for ( float i = -5.0; i < 6.0; ++i )\n    {\n        float theta   = ( i / 6.0 ) * MATH_PI * 0.5;\n        float boxNum  = 12.0;\n        float radius  = cos( theta ) * 0.7;\n        float boxSize = abs( radius ) * 0.12;\n        float boxOffset = -sin( theta ) * 0.7;\n                \n        Rotate( p.yz, MATH_PI / ( 2.0 * boxNum ) );\n        \n        vec3 t = p;\t\t\n\t\tfloat boxLen = 0.15 + sin( iTime * 2.0 ) * 0.1;        \n    \tt = p + vec3( boxOffset, 0.0, 0.0 );\n    \tRepeatAngle( t.yz, boxNum );\n    \tt.y -= radius;\n        Rotate( t.xy, -theta );\n    \tret = Union( ret, RoundBox( t, vec3( boxSize, boxLen, boxSize ), 0.02 ) );\n        \n\t\tt = p;\n\t\tboxLen = 0.15 + sin( iTime * 3.0 ) * 0.1;        \n\t\tRotate( p.yz, MATH_PI / boxNum );\n    \tt = p + vec3( boxOffset, 0.0, 0.0 );\n    \tRepeatAngle( t.yz, boxNum );\n    \tt.y -= radius;\n        Rotate( t.xy, -theta );\n    \tret = Union( ret, RoundBox( t, vec3( boxSize, boxLen, boxSize ), 0.02 ) );\n    }\n    \n    // debris\n    vec3 t = p;\n    t.y = abs( t.y + 0.3 * sin( 1.7 * iTime ) );\n    t.z = abs( t.z );\n    t -= vec3( 0.8, 1.0, 1.0 );\n    Rotate( t.xz, iTime );    \n\tRotate( t.xy, -0.25 );\n    ret = Union( ret, RoundBox( t, vec3( 0.01 ), 0.005 ) );\n    \n    Rotate( p.xy, 0.1 * iTime );\n    Rotate( p.yz, MATH_PI * 0.25 );\n    t = p;\n    t.y = abs( t.y + 0.3 * sin( 1.7 * iTime ) );\n    t.z = abs( t.z );\n    t -= vec3( 0.8, 1.0, 1.0 );\n    Rotate( t.xz, iTime );    \n\tRotate( t.xy, -0.25 );    \n    ret = Union( ret, RoundBox( t, vec3( 0.01 ), 0.005 ) );    \n\n\treturn ret;\n}\n\nfloat CastRay( in vec3 ro, in vec3 rd )\n{\n    const float maxd = 5.0;\n    \n\tfloat h = 1.0;\n    float t = 0.0;\n   \n    for ( int i = 0; i < 50; ++i )\n    {\n        if ( h < 0.001 || t > maxd ) \n        {\n            break;\n        }\n        \n\t    h = Scene( ro + rd * t );\n        t += h;\n    }\n\n    if ( t > maxd )\n    {\n        t = -1.0;\n    }\n\t\n    return t;\n}\n\nvec3 SceneNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 normal = vec3(\n\t    Scene( pos + eps.xyy ) - Scene( pos - eps.xyy ),\n\t    Scene( pos + eps.yxy ) - Scene( pos - eps.yxy ),\n\t    Scene( pos + eps.yyx ) - Scene( pos - eps.yyx ) );\n\treturn normalize( normal );\n}\n\nvec3 KeyColor = vec3( 1.0, 0.98, 0.94 );\nvec3 FillColor = vec3( 0.09, 0.19, 0.25 ); \n\nvec3 Sky( vec3 rayDir )\n{\n    vec3 skyPos     = rayDir;\n    vec2 skyAngle   = vec2( atan( skyPos.z, skyPos.x ), acos( skyPos.y ) );\n\n    vec3 color = KeyColor * mix( 1.0, 0.4, smoothstep( 0.0, 1.0, saturate( 1.5 * skyPos.y + 0.1 ) ) );\n    color = mix( color, FillColor, smoothstep( 0.0, 1.0, saturate( -1.5 * skyPos.y - 0.1 ) ) );\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n\n    vec3 rayOrigin\t= vec3( 0.0, -0.2, -3.0 );\n\tvec3 rayDir \t= normalize( vec3( p.xy, 2.0 ) ); \n\n\tvec3 color = Sky( rayDir );\n\tfloat t = CastRay( rayOrigin, rayDir );\n    if ( t > 0.0 )\n    {\n        vec3 pos = rayOrigin + t * rayDir;\n        vec3 normal = SceneNormal( pos );\n        vec3 lightDir = normalize( vec3( 0.5, 0.5, -1.0 ) );\n            \n        // ambient, diffuse and specular\n        color = 0.8 * mix( FillColor, KeyColor, 0.5 * normal.y + 0.5 );\n        float specOcc = 0.3 + 0.7 * smoothstep( 0.0, 1.0, saturate( 2.0 * length( pos.xy ) ) );\n        float fresnel = saturate( pow( 1.4 + dot( rayDir, normal ), 5.0 ) ) * specOcc;\n        color += 0.5 * Sky( normal ) * mix( 0.1, 1.0, fresnel );\n        color += 0.3 * KeyColor * saturate( dot( normal, lightDir ) );\n        color *= 0.85;\n    }\n    else\n    {\n        // sphere shadow\n        float planeT = -( rayOrigin.y + 1.2 ) / rayDir.y;\n        if ( planeT > 0.0 )\n        {\n            vec3 p = rayOrigin + planeT * rayDir;\n            \n            float radius = max( 0.15 + sin( iTime * 2.0 ) * 0.1, 0.15 + sin( iTime * 3.0 ) * 0.1 );\n            color *= 0.7 + 0.3 * smoothstep( 0.0, 1.0, saturate( length( p + vec3( 0.0, 1.0, 0.0 ) ) - radius ) );\n        }\t\t\n    }\n    \n    float vignette = q.x * q.y * ( 1.0 - q.x ) * ( 1.0 - q.y );\n    vignette = saturate( pow( 32.0 * vignette, 0.05 ) );\n    color *= vignette;\n        \n    fragColor = vec4( color, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}