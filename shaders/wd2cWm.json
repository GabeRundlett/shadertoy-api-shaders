{
    "Shader": {
        "info": {
            "date": "1586791609",
            "description": "I'm quite happy with this, but there is some distortion going on in the background (most visible in the lower left). What can I do to avoid that? -> decreasing the step size to 70% as suggested by ilyaev helped a lot! :)",
            "flags": 0,
            "hasliked": 0,
            "id": "wd2cWm",
            "likes": 9,
            "name": "Cable Vortex",
            "published": 3,
            "tags": [
                "raymarching",
                "question",
                "cables"
            ],
            "usePreview": 0,
            "username": "blinry",
            "viewed": 623
        },
        "renderpass": [
            {
                "code": "vec3 cell;\nfloat g;\nfloat time;\nfloat pi = 3.14159;\n\nfloat noise(vec3 p) {\n    return fract(sin(dot(p, vec3(4.3243241, 34.234, 234.23))) * 342.234);\n}\n\nmat2 rotate(float r) { return mat2(cos(r), sin(r), -sin(r), cos(r)); }\n\nfloat scene(vec3 p) {\n    p.x += p.z * p.z * 0.02 * sin(time * 2. * pi);\n\n    p.z += time * 40. * pi;\n    p.xy *= rotate(p.z * 0.10);\n\n    vec3 cellsize = vec3(4, 4, 0);\n    cell = floor(p / cellsize);\n\n    p = mod(p, cellsize) - cellsize / 2.;\n\n    return length(p.xy) - 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    time = mod(iTime / 10., 1.);\n\n    vec3 cam = vec3(0, 0, -5);\n    vec3 dir = normalize(vec3(uv, 1));\n\n    float t = 0.;\n    for (int i = 0; i < 128; ++i) {\n        t += scene(cam + dir * t) * .7;\n        if (t < 0.0001 || t > 50.)\n            break;\n    }\n\n    vec3 h = cam + dir * t;\n    vec2 o = vec2(.001, 0);\n    vec3 n = normalize(vec3(scene(h + o.xyy) - scene(h - o.xyy),\n                            scene(h + o.yxy) - scene(h - o.yxy),\n                            scene(h + o.yyx) - scene(h - o.yyx)));\n\n    vec3 light = normalize(vec3(0, 1, 1));\n    float diffuse = max(0., dot(n, light));\n    vec3 albedo =\n        0.05 + 0.95 * vec3(noise(cell.xyy), noise(cell.yxy), noise(cell.yyx));\n    float specular = pow(max(dot(normalize(light + -dir), n), 0.), 10000.);\n    float ambient = 0.4;\n    float fresnel = min(0.5, pow(1. + dot(n, dir), 4.));\n    vec3 bg = vec3(0.001);\n    vec3 col = mix((ambient + diffuse) * albedo + specular * vec3(1, 0.5, 0.5),\n                   bg, fresnel);\n\n    col = mix(col, bg, 1. - exp(-.0001 * t * t * t)); // apply fog\n\n    col = pow(col, vec3(.454)); // gamma correction\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}