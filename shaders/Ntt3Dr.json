{
    "Shader": {
        "info": {
            "date": "1636013383",
            "description": "A QR Code Generator.\nMy code is too bad. sorry :D",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntt3Dr",
            "likes": 6,
            "name": "QR Code",
            "published": 3,
            "tags": [
                "qrcode",
                "microtiles"
            ],
            "usePreview": 0,
            "username": "xZAKHAMx",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "\n\nfloat square(in float valx, in float valy, in float eps)\n{\n    vec2 comp = vec2(0.0);\n    if (valx < eps && valx > -eps) comp.x = 1.0;\n    if (valy < eps && valy > -eps) comp.y = 1.0;\n\n    return comp.x*comp.y;\n}\n\nfloat noise(in vec2 uv, in float seed)\n{\n    float gr = 1.618;\n    return fract(tan(distance(uv*gr, uv)*seed)*uv.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n    vec2 res = vec2(1.80, 1.00);\n    vec2 porg  = (-1.0 + 2.0*uv)*res;\n    vec2 p = abs((-1.0 + 2.0*uv)*res);\n    \n    \n    float seed = float(ceil(2.0*iTime+1.0));\n    float scale = 40.0;\n    float bias = 0.5;\n    float sr1 = 3.0;\n    float sr2 = sr1+2.0;\n    float sr3 = sr2+2.0;\n    float sr4 = sr3+2.0;\n    float srk1 = 1.0;\n    float srk2 = srk1+2.0;\n    float srk3 = srk2+2.0;\n    float div = 1.0/scale;\n    float mult1 = div*sr1;\n    float mult2 = div*sr2;\n    float mult3 = div*sr3;\n    float mult4 = div*sr4;\n    float multk1 = div*srk1;\n    float multk2 = div*srk2;\n    float multk3 = div*srk3;\n    float move = sr4;\n    float movek = srk3+20.0;\n    vec3 colp = vec3(0.0);\n\n\n    vec2 newUV = vec2 (uv.x*res.x, uv.y*res.y)*scale;\n    newUV = ceil(newUV);\n    float pix = float(noise(newUV, seed));\n\n    if (pix > bias) colp = vec3(1.0);\n    \n    float m = square(porg.x-res.x+1.0,\n                     porg.y+res.y, 1.0);\n    \nfloat k1 = square(porg.x-(res.x-div*movek),\n                       porg.y-(-res.y+div*movek), multk1);\nfloat k2 = square(porg.x-(res.x-div*movek),\n                       porg.y-(-res.y+div*movek), multk2);\nfloat k3 = square(porg.x-(res.x-div*movek),\n                       porg.y-(-res.y+div*movek), multk3);\n                       \n    \n    float sq1 = square(p.x-(res.x-div*move),\n                       p.y-(res.y-div*move), mult1);\n    float sq2 = square(p.x-(res.x-div*move),\n                       p.y-(res.y-div*move), mult2);\n    float sq3 = square(p.x-(res.x-div*move),\n                       p.y-(res.y-div*move), mult3);\n    float sq4 = square(p.x-(res.x-div*move),\n                       p.y-(res.y-div*move), mult4);\n    \n                       \n    \n    \n     vec3 cols = vec3(sq4-sq3+sq2-sq1);\n     vec3 colsm = 1.0 -vec3 (k3-k2+k1);\n     float mask = clamp(sq4 - m, 0.0, 1.0);\n     vec3 col = mix(colp, cols, mask);\n     col = mix(col, colsm, k3);\n\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}