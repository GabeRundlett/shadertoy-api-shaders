{
    "Shader": {
        "info": {
            "date": "1628295266",
            "description": "Just practicing\nThe title is a lie, there are no cubes here, just clever spheres",
            "flags": 0,
            "hasliked": 0,
            "id": "flSSRt",
            "likes": 8,
            "name": "Cube patterns",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "#define time iTime\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec3 opRepLim( in vec3 p, in float c, in vec3 l)\n{\n    vec3 q = p-c*clamp(round(p/c),-l,l);\n    return q;\n    //return primitive( q );\n}\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n//Taken from http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl.\n\nvec4 map(vec3 p) {\n    float pd = 9.;\n    //p.z += time*2.1;\n    p.z += 0.5;\n    float cs = length(p)-0.1;\n    p.z -= 0.5;\n    p.x += sin(time*0.3)*0.3;\n    p.z += sin(time*0.3)*0.4;\n    \n    p.xz *= r2d(sin(time*.05)*0.5);\n    p.yz *= r2d(cos(time*.07)*0.5);\n    //vec3 m = p;\n    vec3 o = p;\n    float c = length(p);\n    p = (fract(p*pd)-0.5)/pd;\n    p = abs(p);\n    \n    p.xz *= r2d(sin(time*.05)*20.5);\n    \n    p.yz *= r2d(cos(time*.07)*0.5);\n    \n    //float cs = length(p);\n    //p.xz *= r2d(sin(time*1.+c*13.));\n    //p.xy *= r2d(sin(c*20+time)*0.2);\n    //p = (fract(p*pd)-0.5)/pd;\n    //p.xz *= r2d(sin(log(c*3.)-time*0.3)*4.);\n    p.xy = vec2(length(p.xy),atan(p.x,p.y));\n    \n    //p.y = abs(p.y);\n    //p.y *= 8./3.14159;\n    //vec3 m = p;\n    p.y *= 4./(3.14159*2.);\n    p.y = (fract(p.y)-0.5);\n    p.y = abs(p.y)-sin(o.z*0.2);\n    \n    p.xy = vec2(p.x*sin(p.y),p.x*cos(p.y));\n    \n    p = opRepLim(p,0.21,vec3(1.));\n    p.xz *= r2d(sin(time*1.+c*13.));\n    p = opRepLim(p,0.06,vec3(2.));\n    p.xy *= r2d(sin(time*1.)+time);\n    vec3 m = p;\n    p = opRepLim(p,0.005,vec3((0.5-sin(c*5.5+time)*0.5)*10.));\n\n    float d = length(p)-0.001;\n    d = max(d,-(length(o.xy)-0.3+o.z*02.1));\n    d = max(d,-(cs));\n    return vec4(vec3(m.x,o.z,m.z),d);\n}\n\n\n\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    float ii = 0.;\n    \n    for (int i=0;i<220;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w;\n        dO += dS*0.5;\n        ii += 0.1;\n        if (dS < 0.001 || dO > 1000.) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 1.- 2.*fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n\n    //vec2 uv = -1. + 2. * inData.v_texcoord;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    float c = length(uv*0.9);\n    //uv *= r2d(c*4.+time);\n    //uv *= r2d(uv.y*time*.1-time*4.3);\n    vec3 ro = vec3(0.,0.,-0.5);\n    //ro.z += time*0.2;\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd);\n    vec3 p = ro+rd*d.x;\n    vec3 pm = map(p).xyz;\n    //col = sin(uv.xyy*39.);\n    col = vec3((d.y*0.15)-0.3);\n    col = (1.-d.yyy*0.1);\n    //col -= d.y*0.3;\n    vec3 hsv = vec3(\n    sin(sin(pm.x*0.04+time*0.03)*4.)*2.+sin(pm.y*9.+pm.z*150.)*0.31,\n    sin(pm.z*300.)*0.5+0.5,\n    1.-d.y*0.1-d.x*0.4\n    );\n    if (d.x > 100.) {\n        //hsv.y *= 0.2;\n    }\n    col = hsv2rgb(hsv);\n    \n    fragColor = vec4(col,1.);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}