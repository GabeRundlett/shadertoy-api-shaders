{
    "Shader": {
        "info": {
            "date": "1689019575",
            "description": "ray marching test",
            "flags": 0,
            "hasliked": 0,
            "id": "mslfWr",
            "likes": 1,
            "name": "mjal - ray marching",
            "published": 3,
            "tags": [
                "mjal"
            ],
            "usePreview": 0,
            "username": "mlalisse",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "#define sat(a) clamp(a, 0., 1.)\n\n#define EPSILON    0.0001\n#define SPHERE_POS    vec3(.0, .0, 0.)\n#define SPHERE_RADIUS 1.\n#define SPHERE_COLOR  vec3(1., 0.0, 0.0)\n#define LIGHT_POS vec3(5.0, -7.0, 3.0)\n\nvec3  eye = vec3(.0, .0, -7.);\n\nfloat map( vec3 pos ) {\n    return max(\n        sdBox(pos, vec3(1.0, 1.0, 0.5)),\n        sdSphere(pos, 1.0)\n    );\n}\n\nvec3 gradiant( vec3 pos ) {\n    vec3 offset = vec3(EPSILON, 0.0, 0.0);\n    return normalize(vec3(\n        map(pos - offset.xyy) - map(pos + offset.xyy),\n        map(pos - offset.yxy) - map(pos + offset.yxy),\n        map(pos - offset.yyx) - map(pos + offset.yyx)\n    ));\n}\n\nvec3 lighting( vec3 pos ) {\n    vec3 normal = gradiant(pos);\n    vec3 dir = normalize(LIGHT_POS - pos);\n    return sat(dot(normal, dir) * SPHERE_COLOR);\n}\n\nvec3 rayMarching( vec3 pos, vec3 dir ) {\n    float dist = 0.0;\n    for (int i = 0; i < 100; i++) {\n        pos += dir * dist;\n        dist = map(pos);\n        if (dist < EPSILON) {\n            break;\n        }\n    }\n\n    if (dist < EPSILON) {\n        return lighting(pos) + vec3(.1,.0,.0);\n    } else {\n        return vec3(0.0, 0.0, 0.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv  = (fragCoord - 0.5 * iResolution.xy) / iResolution.xx;\n    vec3 dir = normalize(vec3(uv, 1.0));\n\n    fragColor = vec4(rayMarching(rotateY(eye, iTime), rotateY(dir, iTime)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 3D Transformations\n\nmat4 matRotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat4(\n        vec4(c,  0., s,  0.),\n        vec4(0., 1., 0., 0.),\n        vec4(-s, 0., c,  0.),\n        vec4(0., 0., 0., 1.)\n    );\n}\n\nvec3 rotateY( vec3 p, float t ) {\n    return (matRotateY(t) * vec4(p, 1.0)).xyz;\n}\n\n// Signed Distance Functions\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}