{
    "Shader": {
        "info": {
            "date": "1702988852",
            "description": "Bitmap font for the Georgian alphabet.\n\nGalaktioni\nhttps://en.wikipedia.org/wiki/Galaktion_Tabidze",
            "flags": 64,
            "hasliked": 0,
            "id": "XcX3DH",
            "likes": 16,
            "name": "Georgian Alphabet (bitmap)",
            "published": 3,
            "tags": [
                "text",
                "bitmap",
                "font",
                "alphabet",
                "symbols",
                "georgian"
            ],
            "usePreview": 0,
            "username": "koiava",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "#define INTERPOLATION_LINEAR\n\nbool readBit(uint bits, int bitIndex) {\n    return (bits & (1u << bitIndex)) != 0u;\n}\n\nbool draw_char(uint c, ivec2 size, ivec2 uv){\n    if( uv.x >= size.x || uv.x < 0 ||\n        uv.y >= size.y || uv.y < 0)\n        return false;\n    \n    int y = size.y - uv.y - 1;\n    int bit = uv.x + y * size.x;\n    int uintIndex = bit / 32;\n    uint val = bitmaps[int(c)*3 + uintIndex];\n    \n    return readBit(val, 32 - bit % 32 - 1);\n}\n\nfloat draw_text(ivec2 uv, vec2 print_pos) {\n    float res = 0.0f;\n    float xEdge = print_pos.x;\n\n    if( float(uv.x) < print_pos.x ||\n        float(uv.y-12) > print_pos.y ||\n        float(uv.x-280) > print_pos.x ||\n        float(uv.y+1000) < print_pos.y) {\n        return 0.0f;\n    }\n    \n    int i = 0;\n    uint c;\n    while ((c = galaktioni[i]) != 255u) {\n       if (c == 50u) {\n           print_pos.y -= 14.0f;\n           print_pos.x = xEdge;\n       } else {\n           int char_actual_width = char_w[c];\n           vec2 new_uv = vec2(uv) - print_pos;\n           if(new_uv.x >= -1.0f &&\n           new_uv.x < float(char_actual_width+1) &&\n           new_uv.y >= -1.0f &&\n           new_uv.y < float(char_size.y+1)) {\n               vec2 uv_frac = fract(new_uv);\n               //bilinear sampling\n               \n               float val;\n#ifdef INTERPOLATION_LINEAR\n               float v0 = draw_char(c, char_size, ivec2(floor(new_uv)) + ivec2(0, 0))? 1.0f : 0.0f;\n               float v1 = draw_char(c, char_size, ivec2(floor(new_uv)) + ivec2(1, 0))? 1.0f : 0.0f;\n               float v2 = draw_char(c, char_size, ivec2(floor(new_uv)) + ivec2(0, 1))? 1.0f : 0.0f;\n               float v3 = draw_char(c, char_size, ivec2(floor(new_uv)) + ivec2(1, 1))? 1.0f : 0.0f;\n               val = mix(\n               mix(v0, v1, uv_frac.x),\n               mix(v2, v3, uv_frac.x),\n               uv_frac.y);\n#else\n               val = draw_char(c, char_size, ivec2(floor(new_uv)))? 1.0f : 0.0f;\n#endif\n               \n               res += val;\n           }\n           print_pos.x += float(char_actual_width + 1);\n       }\n       i++;\n    }\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy;\n    \n    if(iMouse.z > 0.001f) {\n        uv -= iMouse.xy; \n        uv /= 4.0;\n        uv += iMouse.xy; \n    }\n\tivec2 duv = ivec2(floor(uv));\n    float h = iResolution.y;\n    float fade = h/3.0;\n    \n    vec2 print_pos;\n    print_pos.x = iResolution.x/2.0f - 100.0f;\n    print_pos.y = mod(iTime*5.0, iResolution.y * 2.5);\n\tfloat pixel = draw_text(duv, print_pos);\n    float dist1 = clamp(h - fragCoord.y, 0.0f, fade) / fade;\n    float dist2 = clamp(fragCoord.y, 0.0f, fade) / fade;\n    pixel *= min(dist1, dist2);\n    \n    pixel = pow(pixel, 0.45f);\n\n\tfragColor = vec4(vec3(pixel, pixel, pixel), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35554,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mariam-natroshvili/galaktioni-meri"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const ivec2 char_size = ivec2(8, 12);\nconst uint bitmaps[] = uint[](\n0x00002010u,0x08888870u,0x00000000u, // ა\n0x80C02070u,0x88888870u,0x00000000u, // ბ\n0x00000060u,0x90101070u,0x88888870u, // გ\n0x0000006Cu,0x9292928Cu,0x8040FC02u, // დ\n0x00000070u,0x88880808u,0x08888870u, // ე\n0x00000070u,0x88080830u,0x08888870u, // ვ\n0x6090907Cu,0x1212120Cu,0x00000000u, // ზ\n0x0000006Cu,0x92929264u,0x00000000u, // თ\n0x00000070u,0x88888850u,0x00000000u, // ი\n0x00000010u,0x08080830u,0x08888870u, // კ\n0x0000005Au,0xA5A58180u,0x8040FE01u, // ლ\n0x70880878u,0x88888870u,0x00000000u, // მ\n0xF88080F0u,0x88888870u,0x00000000u, // ნ\n0x0000006Cu,0x92928244u,0x00000000u, // ო\n0x20100808u,0x30088870u,0x00000000u, // პ\n0x00000038u,0x4828A848u,0x08888870u, // ჟ\n0x3E40C0ECu,0x92928244u,0x00000000u, // რ\n0x80808090u,0x88888870u,0x00000000u, // ს\n0x00000854u,0x949498A4u,0x84848478u, // ტ\n0x000000D8u,0x24240404u,0x04848478u, // უ\n0x0000006Cu,0x92929264u,0x0482827Cu, // ფ\n0x08080878u,0x88880808u,0x08888870u, // ქ\n0x0000006Cu,0x92928280u,0x8040FC02u, // ღ\n0x00000048u,0x88888878u,0x08888870u, // ყ\n0x70A80878u,0x88888870u,0x00000000u, // შ\n0xF08888F0u,0xC8888890u,0x00000000u, // ჩ\n0x00000090u,0x888888B0u,0x88888870u, // ც\n0x08080878u,0x88888870u,0x00000000u, // ძ\n0x50A880F0u,0x88888870u,0x00000000u, // წ\n0x10101074u,0x98987410u,0x08888870u, // ჭ\n0x808080F0u,0x88888870u,0x00000000u, // ხ\n0x10101010u,0x701C1210u,0x08888870u, // ჯ\n0x10083008u,0x08300888u,0x70000000u, // ჰ\n0x00000000u,0x00000000u,0x00000000u, // space\n0x00000000u,0x00000080u,0x80800000u, // ,\n0x00000000u,0x00000080u,0x00000000u, // .\n0x80808080u,0x80000080u,0x00000000u, // !\n0x70880808u,0x10200020u,0x00000000u, // ?\n0x00000000u,0x00FF0000u,0x00000000u, // -\n0x50505000u,0x00000000u,0x00000000u, // \"\n0x70888888u,0x88888870u,0x00000000u, // 0\n0x202060E0u,0x202020F8u,0x00000000u, // 1\n0x70888808u,0x102040FFu,0x00000000u, // 2\n0x70880830u,0x08888870u,0x00000000u, // 3\n0x88888888u,0xF8080808u,0x00000000u, // 4\n0xFF8080F0u,0x08088870u,0x00000000u, // 5\n0x708880F0u,0x88888870u,0x00000000u, // 6\n0xFF080808u,0x10102020u,0x00000000u, // 7\n0x70888870u,0x88888870u,0x00000000u, // 8\n0x70888888u,0x78088870u,0x00000000u  // 9\n);\n\nconst int char_w[] = int[](\n//  ა  ბ  გ  დ  ე  ვ  ზ  თ  ი  კ ლ  მ  ნ  ო  პ  ჟ  რ  ს  ტ  უ  ფ  ქ  ღ  ყ  შ  ჩ  ც  ძ  წ  ჭ  ხ  ჯ  ჰ    ,  .  !  ?  -  \"  0  1  2  3  4  5  6  7  8  9\n    5, 5, 5, 7, 5, 5, 7, 7, 5, 5, 8, 5, 5, 7, 5, 6, 7, 5, 6, 6, 7, 5, 7, 5, 5, 5, 5, 5, 5, 6, 5, 7, 5, 8, 2, 2, 3, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n);\n\n#define _a 0u,\n#define _b 1u,\n#define _g 2u,\n#define _d 3u,\n#define _e 4u,\n#define _v 5u,\n#define _z 6u,\n#define _T 7u,\n#define _i 8u,\n#define _k 9u,\n#define _l 10u,\n#define _m 11u,\n#define _n 12u,\n#define _o 13u,\n#define _p 14u,\n#define _J 15u,\n#define _r 16u,\n#define _s 17u,\n#define _t 18u,\n#define _u 19u,\n#define _f 20u,\n#define _q 21u,\n#define _R 22u,\n#define _y 23u,\n#define _S 24u,\n#define _C 25u,\n#define _c 26u,\n#define _Z 27u,\n#define _w 28u,\n#define _W 29u,\n#define _x 30u,\n#define _j 31u,\n#define _h 32u,\n#define _spc 33u,\n#define _com 34u,\n#define _dot 35u,\n#define _exc 36u,\n#define _que 37u,\n#define _dsh 38u,\n#define _quo 39u,\n#define _0 40u,\n#define _1 41u,\n#define _2 42u,\n#define _3 43u,\n#define _4 44u,\n#define _5 45u,\n#define _6 46u,\n#define _7 47u,\n#define _8 48u,\n#define _9 49u,\n#define _nl 50u,\n\nconst uint galaktioni[] = uint[](\n_S _e _n _spc _j _v _a _r _s _spc _i _w _e _r _d _i _spc _i _m _spc _R _a _m _e _s _com _spc _m _e _r _i _exc _nl\n_m _e _r _i _com _spc _i _m _spc _R _a _m _e _s _spc _m _a _g _spc _T _v _a _l _T _a _spc _k _v _d _o _m _a _com _nl\n_s _a _n _d _o _m _i _a _n _spc _c _i _s _spc _e _l _v _a _spc _d _a _spc _f _e _r _i _nl\n_m _w _u _x _a _r _e _spc _i _y _o _com _spc _v _i _T _spc _S _e _m _o _d _g _o _m _a _exc _nl\n_nl\n_a _f _e _T _q _e _b _u _l _i _spc _d _a _spc _m _o _c _a _x _c _a _x _e _nl\n_i _w _o _d _a _spc _n _a _T _e _l _spc _a _l _T _a _spc _k _r _e _b _u _l _i _com _nl\n_m _a _g _r _a _m _spc _s _a _n _T _l _e _b _z _e _spc _u _f _r _o _spc _e _g _spc _s _a _x _e _nl\n_i _y _o _spc _i _d _u _m _a _l _spc _g _a _f _i _T _r _e _b _u _l _i _dot _nl\n_nl\n_i _w _o _d _a _spc _t _a _Z _r _i _s _spc _g _u _m _b _a _T _i _com _spc _k _a _l _T _a _com _nl\n_v _a _r _d _T _a _spc _d _i _o _d _a _spc _n _e _l _i _spc _s _u _r _n _e _l _i _dot _nl\n_m _a _g _r _a _m _spc _l _o _d _i _n _i _T _spc _d _a _R _a _l _u _l _spc _q _a _l _T _a _nl\n_s _x _v _a _spc _a _r _i _s _spc _l _o _c _v _a _spc _g _a _n _u _k _u _r _n _e _l _i _dot _nl\n_nl\n_m _e _s _m _o _d _a _spc _S _e _n _i _spc _u _g _o _n _o _spc _f _i _c _i _dot _dot _dot _nl\n_m _e _r _i _com _spc _Z _v _i _r _f _a _s _o _exc _spc _d _R _e _s _a _c _spc _a _r _spc _m _j _e _r _a _dot _dot _dot _nl\n_v _i _c _i _spc _w _a _m _e _b _a _com _spc _m _a _g _r _a _m _spc _a _r _spc _v _i _c _i _com _nl\n_e _s _spc _g _l _o _v _a _spc _i _y _o _spc _T _u _spc _j _v _a _r _i _s _w _e _r _a _que _nl\n_nl\n_l _o _d _e _b _T _a _n _spc _v _i _R _a _c _spc _m _w _a _r _e _d _spc _g _o _d _e _b _d _a _nl\n_d _a _spc _b _e _W _d _e _b _i _s _spc _T _v _l _e _b _s _spc _q _a _r _S _i _spc _k _a _r _g _a _v _d _a _dot _dot _dot _nl\n_i _y _o _spc _o _b _l _o _b _a _spc _d _a _spc _S _e _c _o _d _e _b _a _com _nl\n_d _R _e _s _a _s _w _a _u _l _s _spc _k _i _spc _e _s _spc _d _R _e _spc _a _r _spc _h _g _a _v _d _a _dot _nl\n_nl\n_t _a _Z _r _i _d _a _n _spc _g _a _s _u _l _s _spc _n _a _b _i _j _i _spc _C _q _a _r _i _nl\n_s _a _d _spc _m _a _t _a _r _e _b _d _a _que _spc _x _e _d _v _a _spc _m _i _m _Z _i _m _d _a _exc _nl\n_q _u _C _a _S _i _spc _m _Z _a _f _r _i _spc _d _a _h _q _r _o _d _a _spc _q _a _r _i _nl\n_d _a _spc _g _a _n _u _w _y _v _e _t _l _i _v _spc _w _v _i _m _d _a _spc _d _a _spc _w _v _i _m _d _a _dot _nl\n_nl\n_n _a _b _a _d _i _spc _t _a _n _z _e _spc _S _e _m _o _v _i _x _v _i _e _com _nl\n_T _a _v _i _spc _m _i _v _a _n _d _e _spc _f _i _q _r _s _spc _S _e _u _w _y _v _e _t _e _l _s _dot _dot _dot _nl\n_o _h _exc _spc _S _e _n _i _spc _s _a _x _l _i _exc _spc _m _e _spc _s _a _x _l _T _a _n _spc _i _q _v _e _nl\n_R _o _n _e _m _i _x _d _i _l _i _spc _m _i _v _a _w _e _q _spc _k _e _d _e _l _s _dot _nl\n_nl\n_a _s _e _spc _m _w _u _x _a _r _e _spc _v _i _d _e _q _i _spc _d _i _d _x _a _n _s _nl\n_d _a _spc _C _e _m _s _spc _w _i _n _spc _S _a _v _i _com _spc _s _w _o _r _i _spc _v _e _r _x _v _e _b _i _nl\n_a _S _r _i _a _l _e _b _d _n _e _n _spc _f _o _T _l _e _b _s _spc _b _n _e _l _x _m _i _a _n _s _com _nl\n_r _o _g _o _r _c _spc _g _a _f _r _e _n _i _l _spc _a _r _w _i _v _i _s _spc _f _r _T _e _b _i _dot _nl\n_nl\n_d _a _spc _S _r _i _a _l _e _b _d _a _spc _t _o _t _i _spc _v _e _r _x _v _i _s _a _com _nl\n_r _a _z _e _spc _dsh _spc _v _i _n _spc _i _c _i _s _exc _spc _v _i _n _spc _i _c _i _s _spc _m _e _r _i _exc _nl\n_b _e _d _i _com _spc _r _o _m _e _l _i _c _spc _m _e _spc _a _r _spc _m _e _R _i _r _s _a _spc _dsh _nl\n_q _a _r _s _spc _m _i _h _y _v _e _b _o _d _a _com _spc _r _o _g _o _r _c _spc _n _a _m _q _e _r _i _dot _nl\n_nl\n_s _T _q _v _i _spc _u _e _c _a _r _i _spc _g _a _s _x _i _v _o _s _n _e _b _a _nl\n_r _a _d _spc _C _a _q _r _a _spc _a _s _e _que _spc _v _i _s _spc _v _e _v _e _d _r _e _b _i _que _nl\n_r _a _d _spc _a _S _r _i _a _l _d _a _spc _C _e _m _i _spc _o _c _n _e _b _a _com _nl\n_r _o _g _o _r _c _spc _g _a _f _r _e _n _i _l _spc _a _r _w _i _v _i _s _spc _f _r _T _e _b _i _que _nl\n_nl\n_a _n _spc _c _a _s _spc _R _i _m _i _l _i _T _spc _r _a _d _spc _g _a _v _c _q _e _r _o _d _i _com _nl\n_a _n _spc _r _a _d _spc _v _i _W _e _r _d _i _spc _S _u _q _s _spc _m _o _k _a _m _k _a _m _e _s _que _nl\n_a _n _spc _quo _m _e _s _a _f _l _a _v _e _s _quo _spc _r _i _s _T _v _i _s _spc _v _m _R _e _r _o _d _i _com _nl\n_a _n _spc _v _i _n _spc _i _s _m _e _n _d _a _spc _C _e _m _s _spc _quo _m _e _spc _d _a _spc _R _a _m _e _s _quo _que _nl\n_nl\n_q _a _r _i _spc _d _a _spc _w _v _i _m _i _s _spc _w _v _e _T _e _b _i _spc _x _S _i _r _i _nl\n_w _y _d _e _b _o _d _n _e _n _spc _r _o _g _o _r _c _spc _m _w _y _d _e _b _o _d _a _spc _g _u _l _i _nl\n_d _a _spc _m _e _spc _a _v _t _i _r _d _i _spc _v _i _T _spc _m _e _f _e _spc _l _i _r _i _com _nl\n_l _i _r _i _spc _y _v _e _l _a _s _g _a _n _spc _m _i _t _o _v _e _b _u _l _i _dot _nl\n_nl _nl\n_spc _spc _spc _spc _spc _spc _spc _spc _spc _spc _spc _g _a _l _a _k _t _i _o _n _i _dot _spc _1 _9 _1 _5 _spc\n255u);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}