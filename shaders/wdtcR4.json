{
    "Shader": {
        "info": {
            "date": "1600555944",
            "description": "The rift beckons...",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtcR4",
            "likes": 1,
            "name": "Parabolic Inversion",
            "published": 3,
            "tags": [
                "spiral",
                "rift",
                "flip",
                "parabola",
                "violet"
            ],
            "usePreview": 0,
            "username": "timeisbeautifulhere",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159\n\n//Constants for reference line\n//parabolas are defined from.\n//(ax + by = c)\n//This is just a straight line in\n//middle.\n#define LINE_A 1.0\n#define LINE_B 0.0\n#define LINE_C (0.0)\n\n#define PARABOLA_TIME_CONST 0.5\n#define PARABOLA_LINE_WIDTH 0.005\n#define NUM_PARABOLAS 20\n#define PARABOLA_TIME_DIFF 0.2\n\n#define RIFT_TIME_CONST 0.25\n#define RIFT_NUM_STRIPES 30.0\n#define RIFT_LINE_WIDTH 0.05\n\n//Return polar coordinate (radius, degrees)\nvec2 cart_to_pc(vec2 uv){\n    return vec2(\n        sqrt(uv.x*uv.x+uv.y*uv.y),\n        atan(uv.y,uv.x)\n    );\n}\n\nvec3 rift_color(vec2 uv){\n    \n    vec2 pc = cart_to_pc(uv);\n    \n    //[0,2pi]\n    float rads = pc[1] + PI;\n    \n    vec3 col = vec3(1.0,0.85,1.0);\n    \n    float spacing = (2.0*PI)/RIFT_NUM_STRIPES;\n    float dist = pc[0] + rads;\n    //dist = rads;\n    \n    if(mod(dist,spacing)<RIFT_LINE_WIDTH){\n    \tfloat offset = pc[0] + (rads/(2.0*PI));\n    \tfloat intensity = fract((iTime*RIFT_TIME_CONST)+offset);\n        intensity = mix(0.35, 1.0, intensity);\n    \n    \tcol = vec3(intensity, 0.0, intensity);\n    }\n    \n    return col;\n}\n\nfloat line_dist(vec2 uv, float a, float b, float c){\n    return abs(a*uv.x + b*uv.y + c)/sqrt(a*a+b*b);\n}\n\n//Parabolas defined by a line and a moving focus point.\n//https://en.wikipedia.org/wiki/Parabola#Definition_as_a_locus_of_points\nbool on_parabolas(vec2 uv){\n    for(int i=1;i<=NUM_PARABOLAS;i++){\n        float time = iTime + (float(i)*PARABOLA_TIME_DIFF);\n        \n    \tvec2 focus = vec2(\n        \tsin(time*PARABOLA_TIME_CONST),\n        \t0.0\n    \t);\n    \n    \tfloat dist_l = line_dist(uv, LINE_A, LINE_B, LINE_C);\n    \tfloat dist_f = distance(uv, focus);\n    \n    \tif(abs(dist_l-dist_f)<PARABOLA_LINE_WIDTH)\n        \treturn true;\n    }\n    \n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //[-1,1]\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.xy;\n\n    vec3 col = rift_color(uv);\n    \n    if(on_parabolas(uv)){\n        col = vec3(\n            0.5*abs(sin(iTime*PARABOLA_TIME_CONST*0.5)),\n            0.75*(1.0-col.g),\n            1.0-abs(sin(iTime*PARABOLA_TIME_CONST))\n        );\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}