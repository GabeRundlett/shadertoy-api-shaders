{
    "Shader": {
        "info": {
            "date": "1610801014",
            "description": "Do you see the eye? Try using your mouse. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGcDz",
            "likes": 0,
            "name": "Eye Eye",
            "published": 3,
            "tags": [
                "mouse",
                "interactive",
                "eye",
                "orange",
                "shader",
                "heartbeat",
                "pulsing",
                "meditative"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "// Inspiration - Book of Shader - Circles \n// Based on the code by Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy/iResolution.xy;\n    vec2 st_mouse =fragCoord.xy/iMouse.xy;\n  \n    float pct = 0.0;\n    float pulse = abs(sin(iTime));\n    vec3 color = vec3(0.845,0.620*pulse,0.014);\n    \n    color= vec3(color*pulse);\n\n    // a. The DISTANCE from the pixel to the center\n    pct = smoothstep(max(distance(st,vec2(0.2)),distance(st,vec2(0.8))),pulse/2.,pulse/4.)-\n        smoothstep(distance(st,vec2(0.480,0.490)) * distance(st,vec2(st_mouse)-vec2(0.5)),pulse/3.,pulse/4.5);\n\n    // pct = min(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n    // pct = distance(st,vec2(0.4)) + distance(st,vec2(0.6));\n    // pct = distance(st,vec2(0.4)) * distance(st,vec2(0.6));\n    // pct = min(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n    // pct = max(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n    // pct = pow(distance(st,vec2(0.4)),distance(st,vec2(0.6)));\n    // b. The LENGTH of the vector\n    //    from the pixel to the center\n    // vec2 toCenter = vec2(0.5)-st;\n    // pct = length(toCenter);\n\n    // c. The SQUARE ROOT of the vector\n    //    from the pixel to the center\n    // vec2 tC = vec2(0.5)-st;\n    // pct = sqrt(tC.x*tC.x+tC.y*tC.y);\n\n    color = vec3(pct*color);\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}