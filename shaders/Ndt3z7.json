{
    "Shader": {
        "info": {
            "date": "1629415986",
            "description": "rotating circles domain warped via fbm(cellular_noise(st))",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndt3z7",
            "likes": 7,
            "name": "spinning...cirles?",
            "published": 3,
            "tags": [
                "noise",
                "rotation",
                "domainwarp"
            ],
            "usePreview": 0,
            "username": "watershed",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define TWO_PI 6.28318530718\n#define PI 3.141592653589793\n#define HALF_PI 1.5707963267948966\n\nfloat circle(in vec2 st, in vec2 center, float r, float smoothing_factor){\n    return 1.0-smoothstep(r-smoothing_factor, r+smoothing_factor, distance(st, center)); //*sin(atan(st.y,st.x))); //*TWO_PI*6.)+smoothstep(0.,1.,fract(st.x))));\n}\n\nfloat rand(float x){\n    return fract(sin(12.59585855*PI*x)+4102200.398383);\n}\n\nfloat circle_outline(in vec2 st, in vec2 center, float r, float stroke_weight){\n    float d = distance(st, center);\n    return smoothstep(fwidth(d), 0.0, abs(d-r));\n}\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\n\n//below fuctions from https://github.com/ashima/webgl-noise via Patricio Gonzalez\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n// vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\t\n\n\nfloat fbm(vec2 x)\n{    \n    float G = 0.5; //exp2(-H);\n    float freq = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        t += a*snoise(freq*x);\n        freq = pow(2.0, float(i));\n        // f += 2.0;\n        a *= G;\n    }\n    return t;\n}\n\n\nfloat map(float x, float oldMin, float oldMax, float newMin, float newMax){\n    return (newMax-newMin) - (x-oldMin)/(oldMax-oldMin) + newMin;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nmat2 scale(float _scale){ //overload for scalar \n    return mat2(_scale,0.0,\n                0.0,_scale);\n}\n\nfloat spinning_cirlces_illusion(vec2 st, float time_scale, float offset){\n    vec2 center = vec2(.5); //translate to center of screen (assumes normalized st coords)\n    st -= center; //translate coords - remember origin in in the btm left\n    st = rotate2d((offset)) * st; //rotate\n    float circle = circle_outline(st, vec2(0), 0.25, 0.005); //circle centered at 0,0 since already translated\n    st += center; //untranslate coords \n\n    int t = 12;\n    for(int i=0; i<12; i++){\n        float r = 0.25;\n        // st = scale(1.5)*st;\n        vec2 new_center = vec2(r*cos(float(i)*TWO_PI/18.), r*sin(float(i)*TWO_PI/18.)); //relative to translated coord sys (dividing with numbers with various common factors leads to more symmetric or chaotic ring resonance)\n        st -= center; //translate coords - remember origin in in the btm left\n        st = rotate2d(iTime*time_scale) * st; //rotate\n        // circle += plot(st, r);\n        \n        circle += circle_outline(st, new_center, 0.25, 0.005); //circle centered at 0,0 since already translated\n        st += center; //untranslate coords \n    }\n\n    return circle;\n}\n\nfloat spinning_cirlces_illusion(vec2 st, float time_scale, float offset, float smoothing_factor){\n    vec2 center = vec2(.5); //translate to center of screen (assumes normalized st coords)\n    st -= center; //translate coords - remember origin in in the btm left\n    st = rotate2d((offset)) * st; //rotate\n    // float circle = (0.);\n    float circle = circle_outline(st, vec2(0), 0.25, 0.005); //circle centered at 0,0 since already translated\n    st += center; //untranslate coords \n\n    int t = 12;\n    for(int i=0; i<12; i++){\n        float r = 0.25;\n        // st = scale(1.5)*st;\n        vec2 new_center = vec2(r*cos(float(i)*TWO_PI/18.), r*sin(float(i)*TWO_PI/18.)); //relative to translated coord sys (dividing with numbers with various common factors leads to more symmetric or chaotic ring resonance)\n        st -= center; //translate coords - remember origin in in the btm left\n        st = rotate2d(iTime*time_scale) * st; //rotate\n        // circle += plot(st, r);\n        vec2 travelling_center = vec2(0);\n\n\n        circle += circle_outline(st, new_center, 0.25, smoothing_factor); //circle centered at 0,0 since already translated\n        st += center; //untranslate coords \n    }\n\n    return circle;\n}\n\nvec2 random2(vec2 st){ //generate 2d random values (i.e. a random gradient in 2d)\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return fract(sin(st)*43758.5453123);\n}\n\nfloat cellular_noise(vec2 st, float scale){\n    st *= scale;\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    float m_dist = 100.;\n    //loop through neighboring cells to check points\n    for(int i=-1; i<=1; i++){\n        for(int j=-1; j<=1; j++){\n            //find the neighbor\n            vec2 neighbor = vec2(float(i), float(j));\n            //random (deterministicallly) point\n            vec2 point = random2(i_st+neighbor);\n            // point = 0.5 + 0.5*sin(u_time + 6.2831*point); //animate\n            //vector from pixel to point \n            vec2 diff = neighbor + point - f_st;\n            //dist \n            float dist = length(diff);\n            //keep closer distance \n            m_dist=min(m_dist, dist);\n        }\n    }\n    return m_dist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 st = fragCoord.xy/iResolution.xy;   \n    vec2 xy=st;\n    \n    float s = 2.0;\n    st = scale(s) * st;\n    st = fract(st);\n    \n    \n\n\n    // float warp = fbm(xy*cellular_noise(st, 5.));\n    vec2 warp = rotate2d((0.3*fbm(xy*cellular_noise(st, 5.)))) * st; //rotate\n    float circle = (circle(warp, vec2(0.5), 0.25, .035) + circle_outline(warp, vec2(0.5)+vec2(0.25,0), 0.25, 0.05));\n\n    vec3 color = vec3(0);\n\n    // color += circle;\n    color += spinning_cirlces_illusion(st, 0.15,  fbm(xy*cellular_noise(st, 5.)*sin(iTime)), 0.005);\n\n    fragColor = vec4(color, 1.);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}