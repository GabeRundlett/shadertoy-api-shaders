{
    "Shader": {
        "info": {
            "date": "1692707050",
            "description": "Water and air are continuous volumetric material, but many are made of opaque particles ( pigments, foliage... ).\nTrap: If occluders distribution is space-correlated, the opacity is angle-dependent, and can be both under or over estimated.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "clsfRN",
            "likes": 7,
            "name": "volumetric trap #3: dens vs occl",
            "published": 3,
            "tags": [
                "volumetric",
                "tuto",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "// === volumetric trap: occlusion ‚â† density, \n//     since the 1st can be direction-dependent if the occluder distribution is space-correlated.\n//     In particular, opacity is generally surestimated on silhouettes of voxelized solid objects.\n//     Density makes sense only for truly homogeneous material or totally uncorrelated distributions.\n\n// see also  volumetric trap #1: \"density\": https://shadertoy.com/view/mllBR8\n//           volumetric trap #2: \"Ti*ùõô*To\"\" https://shadertoy.com/view/mtsfR8\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float n = 7., i = 16., a, k; \n    vec2  R = iResolution.xy, A = R/R.y,\n          U = n* u / R.y,\n          K = floor(U/A),                                           // set id\n          N = U - K*A +(1.-A)/2.,                                   // coord in set\n          B =  abs(N-.5),                                           // centered symmetric version ( for boxes )\n          I = floor(N*i);                                           // subpixels\n          k = K.x/(n-1.);                                           // set coefficient in [0,1]\n\n    O *= 0.;\n    if (clamp(N,0.,1.) != N ) return;\n    \n    K.y==6. ? O.r = smoothstep( 3.*i/R.y, 0., abs(max(B.x,B.y)-.5) ),                         // red boxes            \n              O += vec4( round( mix( i*fract(1e4*sin(I.y*171.7-K.x*93.2)), I.y, k) ) == I.x ) // particles configuration\n            : O ; \n \n    K.x==3. ? O.r += max(0., 1.-R.y/n* abs(  K.y==2. ? N.y - N.x    // red: directionality\n                                           : K.y==0. ? N.y + N.x -1. \n                                           : K.y==4. ? min( abs(B.x-B.y), min(B.x,B.y)) \n                                           : 1.)) : 0.;\n    a = 1. - pow(1.-1./i,i);\n    if ( K.x<1. || K.x > n-2. )\n        O += floor(U.y-.2)==4. ?     a          : 0.,               // opacity, assuming no correlation\n        O += floor(U.y-.4)==2. ? mix(a, 1./i,k) : 0.,               // opacity along /\n        O += floor(U.y-.6)==0. ? mix(a, 1.  ,k) : 0.;               // opacity along \\\n    \n    O = sqrt(O);                                                    // to sRGB\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}