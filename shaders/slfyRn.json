{
    "Shader": {
        "info": {
            "date": "1647421373",
            "description": "sample code\nVoronoi decomposition with L^p norms",
            "flags": 0,
            "hasliked": 0,
            "id": "slfyRn",
            "likes": 1,
            "name": "7_5_lpVoronoi",
            "published": 3,
            "tags": [
                "ch7"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "ivec2 channel;\n//begin hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\nuint uhash11(uint n){\n    n ^= (n << u.x);\n    n ^= (n >> u.x);\n    n *= k.x;\n    n ^= (n << u.x);\n    return n * k.x;\n}\nuvec2 uhash22(uvec2 n){\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n){\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\nfloat hash11(float p){\n    uint n = floatBitsToUint(p);\n    return float(uhash11(n)) / float(UINT_MAX);\n}\nfloat hash21(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n}\nfloat hash31(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n}\nvec2 hash22(vec2 p){\n    uvec2 n = floatBitsToUint(p);\n    return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\nvec3 hash33(vec3 p){\n    uvec3 n = floatBitsToUint(p);\n    return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\nfloat length2(vec2 p){\n    p = abs(p);\n    float d = 4.0 * sin(iTime) + 5.0;\n    return pow(pow(p.x, d) + pow(p.y, d), 1.0 / d);\n}\n\nvec2 voronoi2(vec2 p){\n    vec2 n = floor(p + 0.5);\n    float dist = length2(vec2(1));\n    vec2 id;\n    for(float j = 0.0; j <= 2.0; j ++ ){\n        vec2 glid;\n        glid.y = n.y + sign(mod(j, 2.0) - 0.5) * ceil(j * 0.5);\n        if (abs(glid.y - p.y) - 0.5 > dist){\n            continue;\n        }\n        for(float i = -1.0; i <= 1.0; i ++ ){\n            glid.x = n.x + i;\n            vec2 jitter = hash22(glid) - 0.5;\n            if (length2(glid + jitter - p) <= dist){\n                dist = length2(glid + jitter - p);\n                id = glid;\n            }\n        }\n    }\n    return id;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 pos = fragCoord.xy/ min(iResolution.x, iResolution.y); \n    pos *= 10.0;\n    pos += iTime;\n    fragColor = vec4(hash22(voronoi2(pos)), 1, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}