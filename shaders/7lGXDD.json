{
    "Shader": {
        "info": {
            "date": "1640702641",
            "description": "Concrete cubes",
            "flags": 32,
            "hasliked": 0,
            "id": "7lGXDD",
            "likes": 31,
            "name": "Concrete cubes",
            "published": 3,
            "tags": [
                "3d",
                "cubes",
                "concrete"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\n// Thanks IQ !\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec3 op = p;\n    vec2 acc = vec2(10000.,-1.);\n    \n    float rep = 2.5;\n    vec2 id = floor((p.xz+rep*.5)/rep);\n    p.x += id.y;\n    p.xz = mod(p.xz+rep*.5,rep)-rep*.5;\n    p.xy *= r2d(PI*.25);\n    float shape = sdRoundBox(p, vec3(1.), .05);\n    acc = _min(acc, vec2(shape, 0.));\n    // Mmmmh id' like to make only the edges a bit broken...\n    // but I've no idea how :p\n    float alignedEdge = -op.y - 1.4;\n    acc.x += texture(iChannel0, op.xz*.1+.01*id.x).x*.5*(sat(alignedEdge*1.));\n    float face = abs(p.z)-1.;\n    acc.x += texture(iChannel0, op.xz*.1).x*1.5*(sat(face*1.))\n    *sat(sdRoundBox(p, vec3(.8,.8,10.), .05));\n    acc.x += texture(iChannel0, op.xz*.1).x*.0033;\n    acc = _min(acc, vec2(-op.y-.4, 0.));\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x*.2;\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    return texture(iChannel1, rd*vec3(1.,-1.,1.)).xyz*.5;\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = vec3(0.);\n    vec3 lpos = vec3(0.,-10.,10.)+1.81*(vec3(rand(), rand(), rand())-.5);\n    vec3 ldir = lpos-p;\n    vec3 h = normalize(rd+ldir);\n    \n    vec3 resshadow = trace(p+n*0.01, normalize(ldir), 64);\n    if (resshadow.y < 0.)\n    {\n        col = pow(sat(dot(n,h)), 2.)*vec3(0.506,0.996,0.937)*.25;\n        col += pow(sat(dot(n,h)), .5)*vec3(0.992,0.702,0.545);\n    }\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    float d = 9.;\n    float t = sin(iTime*.1)*.5+2.5;\n    vec3 dof = (vec3(rand(), rand(), rand())-.5)*.002;\n    vec3 ro = vec3(sin(t)*d,-5.,cos(t)*d);\n    vec3 ta = vec3(0.,-1.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    ro += dof;\n    rd = getCam(rd, uv)-dof;\n    \n    vec3 res = trace(ro, rd, 512);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        \n        col = getMat(res, rd, p, n);\n        vec3 diff = normalize(vec3(rand(), rand(), rand())-.5);\n        if (dot(diff, n) < 0.)\n            diff = -diff;\n        vec3 resdiff = trace(p+n*0.01, diff, 64);\n        if (resdiff.y > 0.)\n        {\n            vec3 pdiff = p+diff*resdiff.y;\n            vec3 ndiff = getNorm(pdiff, resdiff.x);\n            \n            col += getMat(resdiff, diff, pdiff, ndiff); \n        }\n        else\n            col += getEnv(diff);\n    }\n    else\n        col += getEnv(rd)*2.;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    seed = texture(iChannel3, uv).x;\n    seed+= iTime;\n    vec3 col = rdr(uv);\n    \n    col *= pow(1.-sat(length(uv)-.4), .2);\n    col = sat(col);\n    col = mix(col, texture(iChannel2, fragCoord/iResolution.xy).xyz, .95);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0.,1.)\n#define PI 3.14159265\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}