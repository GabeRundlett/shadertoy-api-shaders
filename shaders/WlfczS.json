{
    "Shader": {
        "info": {
            "date": "1592312099",
            "description": "- silhouette lines in bold\n- hidden lines in grey\n- facing lines in regular\n  ( For high face distortions, I should split edges )   Mouse.x controls rotation (bottom-left corner: back to autodemo)",
            "flags": 0,
            "hasliked": 0,
            "id": "WlfczS",
            "likes": 10,
            "name": "cube technical drawing",
            "published": 3,
            "tags": [
                "cube",
                "short",
                "technicaldrawing"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 521
        },
        "renderpass": [
            {
                "code": "vec3 point[14];                                       // 8 corners + 6 faces center\nvec2  proj[8];                                        // screen proj of the 8 corners\nint   face[24] = int[]( 4,2,  3,4,  2,5,  5,3,        // 2 faces adjacent to each edge\n                        2,0,  0,3,  1,2,  3,1, \n                        0,4,  5,0,  4,1,  1,5);\n\n// --- utils from https://www.shadertoy.com/view/llySRh\n#define S(d,r) smoothstep( -1.5, 1.5, (r) - (d)*R.y ) // antialiased draw\nfloat seg(vec2 p, vec2 a,vec2 b) {                    // --- draw segment with round ends\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    return length(p - b * h);                         // dist to segment\n}\n#define rot(a) mat2(cos(a+vec4(0,11,33,0)))\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( u - .5*R ) / R.y,\n         M = iMouse.xy;\n    vec3 P,A,B, C = vec3(0,0,-4);                     // C: camera pos 76\n    O-=O;\n    float t = length(M)<20. ? iTime : 6.28 * M.x/R.x;\n    int i = 0, a,b,c;\n    for(; i<8; i++ )                        // --- compute 3D corners coords + 2D proj\n        P =    vec3( i%2, i/2%2, i/4%2 ) *2. - 1.     // cubes corner\n            + .1*cos(iTime+vec3(1+i,2+2*i,3-i)),      // jittering\n        P.zx *= rot(t),\n        P.zy *= rot(-.5),\n        point[i] = P,                                 // corner i\n        point[ 8+i/4  ] += P/4.,                      // faces corner i belongs to\n        point[10+i%2  ] += P/4.,                      // ( indeed, calc faces center)\n        point[12+i/2%2] += P/4.,\n        P -= C , proj[i] = P.xy / P.z;                // screen proj of corner i\n\n#define N(c) dot( cross( point[8+face[2*i+c]]-A , B-A ) , A-C ) // dot(Normal,View)\n    for(i=0; i<12; i++) \n        a = i%4*(i<4?1:2) - (i/4==1 ?i%2:0), b = a + (4>> i/4), // index of line i ends\n        A = point[a], B = point[b],                             // 3D coords of line i  ends\n        //F = ivec3(a/4, 2+a%2 ,4+a/2%2),\n        //G = ivec3(b/4, 2+b%2 ,4+b/2%2) - F,\n        //F.xy= G.x==0 ? F.yz : G.y==0 ? F.xz :F.xy,            // F[c] replaces face[] (but array shorter)\n        c = N(0) < 0. ? 1 : 0 , N(1) > 0. ? c++ : c,            // visibility of adjacent faces \n        O = max(O, S( seg(U,proj[a],proj[b]), c<1 ?0.: c<2 ?4.:2. ) );// draw segment\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}