{
    "Shader": {
        "info": {
            "date": "1659462296",
            "description": "left=proper, center=subtract 180Â°, right=fabrice\n\ntop=only corner\nbottom=zoomed corner + 3 cubes",
            "flags": 0,
            "hasliked": 0,
            "id": "fttcRM",
            "likes": 0,
            "name": "Proper vs Fabrice Corner",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "corner",
                "l2",
                "linf"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "bool proper, sub180, big;\n\nconst int Linf = 00;\nconst int L2   =  2;\nint norm = Linf;\n\nfloat zsweep = 0.;\nbool diagonal = true;\n\nvoid demo()\n{\n    //return;\n    diagonal = cos(iTime/8.) > 0.;\n    norm = sin(iTime/8. + .01) > 0. ? Linf : L2;\n    zsweep = 9. * sin(iTime);\n}\n\nfloat C(vec3 q)\n{\n    if (norm == Linf)\n        return max(q.x, max(q.y,q.z));\n    if (norm == L2)\n    {\n        //return length(max(q, 0.));\n        return length(max(q, 0.)) + min(max(max(q.x, q.y), q.z), 0.);\n    }\n    return 0.;\n}\n\nfloat sdCorner(vec3 q, vec3 r)\n{\n    vec3 a; float t;\n    if (big) q /= 2.;\n    if (norm == Linf)\n    {\n        if (proper)\n            t = C(q + 8. * step(q.xyz, min(q.yzx, q.zxy)));\n        else if (sub180)\n            t = max(C(q), -C(-q-8.));\n        else\n        {\n            t = C(q), a = 8.-abs(q), t = max(t, -C(-a));\n            //t = C(q), a = 8.-abs(q), t = -C(-a); // only show subtracted box\n        }\n    }\n    if (norm == L2)\n    {\n        if (proper)\n            // the L2 corner does not like having multiple 1-values in that added vector\n            // -> use \"?:\" instead of \"step\"\n            t = C(q + 8. * (q.x<min(q.y, q.z) ? vec3(1,0,0) : q.y<min(q.x, q.z) ? vec3(0,1,0) : vec3(0,0,1)));\n        else if (sub180)\n            t = max(C(q), -C(-q-8.));\n        else\n        {\n            t = C(q), a = 8.-abs(q), t = max(t, min(min(a.x, a.y), a.z));\n            //t = C(q), a = 8.-abs(q), t = min(min(a.x, a.y), a.z); // only show subtracted box\n        }\n    }\n    if (big) t = min(t, C((abs(q+vec3(6,2,2))-2.)));\n    if (big) t = min(t, C((abs(q+vec3(2,6,2))-2.)));\n    if (big) t = min(t, C((abs(q+vec3(2,2,6))-2.)));\n    if (big) t *= 2.;\n    return t;\n}\n\nfloat sdScene(vec2 p)\n{\n    float scale = 12.;\n    p *= scale;\n    vec3 q;\n    q = vec3(p, zsweep);\n    if (diagonal)\n    {\n        q /= sqrt(vec3(2,6,3));\n        q = mat3(-1,1,0, -1,-1,2, 1,1,1) * q;\n    }\n    return sdCorner(q, vec3(8. + cos(iTime*3.), 8. + cos(iTime * 2.), 8.)) / scale;\n}\n\nfloat VC(vec3 q)\n{\n    if (diagonal)\n    {\n        q /= sqrt(vec3(2,6,3));\n        q = mat3(-1,1,0, -1,-1,2, 1,1,1) * q;\n    }\n    return C(abs(q));\n}\n\nconst vec2 views = vec2(3, 2);\nvoid linf(out vec4 fragColor, vec2 fragCoord, vec3 iResolution, vec4 iMouse, float iTime)\n{\n    // iq: Box - distance L-inf https://www.shadertoy.com/view/Nlj3WR\n    vec2 p = (2.0*fragCoord - iResolution.xy) / iResolution.y * views.yx/views.x;\n    vec2 m = (2.0*iMouse.xy - iResolution.xy) / iResolution.y * views.yx/views.x;\n\n    if( iMouse.z<0.01 ) m=sin(-0.17*iTime*vec2(1.1,1.3)+vec2(0,2));\n\n    float d = sdScene(p);\n\n    vec3 col;\n    if (norm == Linf)\n    {\n        col = vec3(1.0,0.9,1.0) + sign(d)*vec3(-0.3,0.4,0.3);\n        col *= 1.0 - exp(-3.0*abs(d));\n        col *= 0.8 + 0.2*cos(150.0*d);\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.008,abs(d)) );\n    }\n    if (norm == L2)\n    {\n        col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n        col *= 1.0 - exp(-3.0*abs(d));\n        col *= 0.8 + 0.2*cos(150.0*d);\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.008,abs(d)) );\n    }\n\n    d = sdScene(m);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.004, 0.008, abs(VC(vec3(p-m, 0)) - abs(d))));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.004, 0.008, length(p-m)-0.015));\n\n\tfragColor = vec4(col,1.0);\n}\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    demo();\n    vec3 R = iResolution;\n    vec2 U = O * views;\n    proper = U.x < R.x;\n    sub180 = U.x >= R.x && U.x < 2. * R.x;\n    big = U.y < R.y;\n    linf(C, mod(U, R.xy), R, iMouse.z < 0.01 ? iMouse : mod(iMouse*views.xyxy, R.xyxy), iTime);\n    C = mix(C, vec4(0), clamp(2. - abs(O.y - floor(R.y/2.*1.) + .5), 0., 1.));\n    C = mix(C, vec4(0), clamp(2. - abs(O.x - floor(R.x/3.*1.) + .5), 0., 1.));\n    C = mix(C, vec4(0), clamp(2. - abs(O.x - floor(R.x/3.*2.) + .5), 0., 1.));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}