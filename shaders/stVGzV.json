{
    "Shader": {
        "info": {
            "date": "1638032584",
            "description": "LCh ↔ Lab ↔ XYZ ↔ sRGB\n\nhttps://bottosson.github.io/posts/oklab/\nhttps://bottosson.github.io/posts/colorpicker/\nhttps://raphlinus.github.io/color/2021/01/18/oklab-critique.html",
            "flags": 0,
            "hasliked": 0,
            "id": "stVGzV",
            "likes": 5,
            "name": "Oklab",
            "published": 3,
            "tags": [
                "oklab"
            ],
            "usePreview": 0,
            "username": "thepheer",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "#define rep(m, x) (mod(x, 2.0*(m)) - (m))\n#define sdf(w, d) smoothstep(1.5*(w), 0.0, d)\n#define plot(w, x, y) sdf(w, abs((x) - (y)))\n#define range(x, a, b) ((a) <= (x) && (x) < (b))\n\nvoid mainImage(out vec4 rgba, vec2 xy) {\n    vec2 px = 1.0/iResolution.xy;\n    vec2 uv = xy*px;\n    \n    const float tau = radians(360.0);\n    float L = 0.50 + 0.49*sin(tau*(0.2*uv.x - 0.1*iTime));\n    float C = 0.18*L*(1.0 - L*L*L);\n    float h = tau*(fract(uv.x + 0.5*iTime) - 0.5);\n\n    // LCh → Lab → sRGB → Lab → LCh\n    vec3 LCh1 = vec3(L, C, h);\n    vec3 Lab1 = LCh_to_Lab(LCh1);\n    vec3 sRGB = Lab_to_sRGB(Lab1);\n    vec3 Lab2 = sRGB_to_Lab(sRGB);\n    vec3 LCh2 = Lab_to_LCh(Lab2);\n    \n    float dashed = sdf(1.0, abs(rep(6.0, xy.x)) - 4.0);\n    float dotted = sdf(1.0, abs(rep(2.0, xy.x)));\n    vec3 split = 0.025*vec3(-1.0, 0.0, 1.0);\n    \n    vec3 plots =\n        plot(px.y, uv.y, 0.500)*dotted*0.1 +\n        plot(px.y, uv.y, 0.100)*dotted*0.1 +\n        plot(px.y, uv.y, 0.775 + 1e3*(LCh2 - LCh1) - split) +\n        plot(px.y, uv.y, 0.625 + 2e4*(Lab2 - Lab1) - split) +\n        plot(px.y, uv.y, 0.100 + 0.4*sRGB);\n\n    vec3 rgb =\n        range(uv.y, 0.9, 1.0) ? sRGB :\n    \tplots;\n\n    rgba = vec4(sRGB_OETF(rgb), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// sRGB boilerplate\n\n#define xy_to_XYZ(x, y) vec3(x/y, 1.0, (1.0 - x - y)/y)\n#define diag3(v) mat3((v).x, 0.0, 0.0, 0.0, (v).y, 0.0, 0.0, 0.0, (v).z)\n#define primaries(rx, ry, gx, gy, bx, by) mat3(xy_to_XYZ(rx, ry), xy_to_XYZ(gx, gy), xy_to_XYZ(bx, by))\n#define whitepoint(wx, wy) xy_to_XYZ(wx, wy)\n#define colorspace(gamut, wp) gamut*diag3(inverse(gamut)*wp)\n\nconst vec3 D65 = whitepoint(0.31271, 0.32902);\nconst mat3 sRGB = primaries(0.64, 0.33, 0.30, 0.60, 0.15, 0.06);\nconst mat3 sRGB_to_XYZ = colorspace(sRGB, D65);\nconst mat3 XYZ_to_sRGB = inverse(sRGB_to_XYZ);\n\nvec3 sRGB_OETF(vec3 c) {\n    vec3 a = 12.92*c;\n    vec3 b = 1.055*pow(c, vec3(1.0/2.4)) - 0.055;\n    return mix(a, b, greaterThan(c, vec3(0.00313066844250063)));\n}\n\nvec3 sRGB_EOTF(vec3 c) {\n    vec3 a = c/12.92;\n    vec3 b = pow((c + 0.055)/1.055, vec3(2.4));\n    return mix(a, b, greaterThan(c, vec3(0.0404482362771082)));\n}\n\n// Oklab\n\nconst mat3 M1 = mat3(\n    +0.8189330101, +0.0329845436, +0.0482003018,\n    +0.3618667424, +0.9293118715, +0.2643662691,\n    -0.1288597137, +0.0361456387, +0.6338517070\n);\n\nconst mat3 M2 = mat3(\n    +0.2104542553, +1.9779984951, +0.0259040371,\n    +0.7936177850, -2.4285922050, +0.7827717662,\n    -0.0040720468, +0.4505937099, -0.8086757660\n);\n\nvec3 XYZ_to_Lab(vec3 XYZ) {\n    vec3 lms = M1*XYZ;\n    vec3 lms_p = sign(lms)*pow(abs(lms), vec3(1.0/3.0));\n    return M2*lms_p;\n}\n\nvec3 Lab_to_XYZ(vec3 Lab) {\n    vec3 lms_p = inverse(M2)*Lab;\n    vec3 lms = lms_p*lms_p*lms_p;\n    return inverse(M1)*lms;\n}\n\nvec3 LCh_to_Lab(vec3 LCh) {\n    return vec3(LCh.x, LCh.y*vec2(cos(LCh.z), sin(LCh.z)));\n}\n\nvec3 Lab_to_LCh(vec3 Lab) {\n    return vec3(Lab.x, length(Lab.yz), atan(Lab.z, Lab.y));\n}\n\nvec3 sRGB_to_Lab(vec3 sRGB) {\n    return XYZ_to_Lab(sRGB_to_XYZ*sRGB);\n}\n\nvec3 Lab_to_sRGB(vec3 Lab) {\n    return XYZ_to_sRGB*Lab_to_XYZ(Lab);\n}\n\nvec3 sRGB_to_LCh(vec3 sRGB) {\n    return Lab_to_LCh(sRGB_to_Lab(sRGB));\n}\n\nvec3 LCh_to_sRGB(vec3 LCh) {\n    return Lab_to_sRGB(LCh_to_Lab(LCh));\n}\n\nfloat L_to_Lr(float L) {\n    const vec3 k = vec3(0.206, 0.03, 1.206/1.03);\n    float x = k.z*L - k.x;\n    return 0.5*(x + sqrt(x*x + 4.0*k.y*k.z*L));\n}\n\nfloat Lr_to_L(float Lr) {\n    const vec3 k = vec3(0.206, 0.03, 1.206/1.03);\n    return (Lr*(Lr + k.x))/(k.z*(Lr + k.y));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}