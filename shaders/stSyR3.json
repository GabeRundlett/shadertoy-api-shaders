{
    "Shader": {
        "info": {
            "date": "1650006108",
            "description": "press r to reset\n\ntheres a lot you can do with this: run 1 automata on each rgb channel then have a rock paper scissors interaction rule between the channels. I thought this one was cool",
            "flags": 48,
            "hasliked": 0,
            "id": "stSyR3",
            "likes": 6,
            "name": "Space war automata 2",
            "published": 3,
            "tags": [
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch( iChannel0, ivec2(fragCoord), 0 ).rgb;\n\n    fragColor.rgb = vec3(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n//#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\nvec3 Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return texelFetch(iChannel0, p, 0 ).rgb;\n}\n\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 px = ivec2( fragCoord );    \n\n    if (key_down(KEY_RESET) || iFrame==0) \n    {    \n        float d = length((fragCoord -.5* iResolution.xy ) / iResolution.y);\n        vec2 f = fragCoord + 0.001 * iTime;\n        vec3 g = vec3(h21(f), h21(f + 1.), h21(f - 1.));\n        fragColor.rgb = step(0.8, g);\n        return;\n    }\n        \n    // center cell\n    vec3 e = Cell(px); \n    \n    // neighbour cells\n    vec3 t = Cell(px + ivec2(0,-1));\n    vec3 b = Cell(px + ivec2(0,1));\n    vec3 l = Cell(px + ivec2(-1,0));\n    vec3 r = Cell(px + ivec2(1,0));   \n    \n    // \"average\" of neighbours\n    vec3 k = 0.5 * max(t + b, l + r);\n    \n    // difference between \"average\" and center\n    vec3 j = abs(e - k);\n    \n    for (int i = 0; i < 3; i++) {\n        if (e[i] < k[i] - 0.3)\n            e[i] = 1. * k[i] +  10000. * j[i] * e[i] * e[i] * e[i]; \n        else if (k[i] > 0.01 && e[i] > 0.46 && j[i] < 0.5)\n            e[i]= k[i] + 0.3 * j[i];      \n        else \n            e[i] = k[i];\n            e[i] -= 0.16 * j[i];\n            e[i] *= 0.99;\n    }    \n    \n    vec3 e2 = e;\n    for(int i = 0; i < 3; i++) {\n        if (e[(i+1)%3] < e[i]) {\n            //e2[(i-1)%3] += 0.01;\n            //e2[(i)%3] -= 0.05;// * fragCoord.x/iResolution.x;\n            //e2[(i+1)%3] -= 0.01;\n            \n            e2[i] = mix(e[i], e[(i+1)%3], 0.6);\n        }\n    }\n    e = e2;\n    //*/\n    e = clamp(e,0.,1.);\n     \n    fragColor = vec4( e, 0.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}