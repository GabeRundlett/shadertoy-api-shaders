{
    "Shader": {
        "info": {
            "date": "1600295118",
            "description": "Test implementation of a glitch effect.\nClick and drag to change the angle and scale.",
            "flags": 32,
            "hasliked": 0,
            "id": "Wdtyzr",
            "likes": 12,
            "name": "Basic glitch effect",
            "published": 3,
            "tags": [
                "2d",
                "filter",
                "glitch",
                "smudge"
            ],
            "usePreview": 0,
            "username": "luluco250",
            "viewed": 1969
        },
        "renderpass": [
            {
                "code": "/*\n\nConfiguration can be found in the Common tab.\n\n(Un)license:\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\n*/\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color = texture(iChannel0, uv);\n    \n    vec2 dir = Direction;\n    \n    if (iMouse.z > 0.0)\n        dir = (0.5 - iMouse.xy * ps) * 2.0;\n    \n    vec4 glitch = SmudgeBlur(iChannel1, uv, dir * ps * Scale, Samples);\n    color = max(color, glitch);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2 Direction = vec2(0.0, 1.0);\nconst int Samples = 75;\nconst float Scale = 1.0;\nconst float Threshold = 0.775;\nconst vec3 ChromaKey = vec3(0.051, 0.639, 0.145);\nconst float ChromaKeyThreshold = 0.2;\n\nvec4 SmudgeBlur(sampler2D sp, vec2 uv, vec2 dir, const int samples)\n{\n    if (samples < 1)\n        return vec4(0);\n    \n    if (samples == 1)\n        return texture(sp, uv);\n    \n    // If centering is desired...\n    //uv -= dir * float(samples) * 0.5;\n    \n    vec4 color = texture(sp, uv);\n    float scale = color.a;\n    \n    for (int i = 1; i < samples; ++i)\n    {\n        color = max(color, texture(sp, uv));\n        uv += dir * scale;\n    }\n    \n    //color /= float(samples);\n    \n    return color;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 color, vec2 coord)\n{\n    color = texture(iChannel0, coord / iResolution.xy);\n    \n    float key = distance(color.rgb, ChromaKey);\n    key = smoothstep(ChromaKeyThreshold, 1.0 - ChromaKeyThreshold, key);\n    key = clamp(key, 0.0, 1.0);\n    \n    color *= key;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float GetNoise(vec2 coord);\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color = texture(iChannel0, uv);\n    color.rgb *= GetNoise(coord);\n    color.a = 1.0 - max(color.r, max(color.g, color.b));\n}\n\nfloat GetNoise(vec2 coord)\n{\n    vec2 uv = coord / 256.0;\n        \n    vec3 color = texture(iChannel1, uv).rgb;\n    float noise = 1.0 - max(color.r, max(color.g, color.b));\n    \n    noise = step(Threshold, noise);\n    \n    return noise;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}