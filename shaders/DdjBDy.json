{
    "Shader": {
        "info": {
            "date": "1690093731",
            "description": "find this trying Inversion Transformation",
            "flags": 0,
            "hasliked": 0,
            "id": "DdjBDy",
            "likes": 2,
            "name": "Inversion Transformation",
            "published": 3,
            "tags": [
                "2d",
                "math"
            ],
            "usePreview": 0,
            "username": "o0CHT0o",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "vec2 InvTrans(vec2 pos){\n    //vec2 lt=vec2(iTime/length(pos),atan(pos.y, pos.x));\n    //return lt.x * vec2(sin(lt.y), cos(lt.y));\n    return pos/dot(pos,pos)*iTime; //thank Envy24 \n}\n/*\nfloat sep(float x){\n    return floor(mod(x, 2.))*2.-1.;\n}\n\nvec4 checkerboard(vec2 pos){\n    float l=sep(pos.x)*sep(pos.y);\n    return vec4(l,l,l,1);\n}\n*/\n// Reference https://www.shadertoy.com/view/lt2XWK\nvec4 checkerboard(vec2 pos){\n    float l=mod(floor(pos.x)+floor(pos.y),2.);\n    return vec4(l,l,l,1);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    // Output to screen\n    fragColor = checkerboard(InvTrans(uv));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}