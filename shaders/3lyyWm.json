{
    "Shader": {
        "info": {
            "date": "1611160951",
            "description": "Left: Single Jittered Frame, Right: Temporal Super Sampling.\nClick and drag to compare.",
            "flags": 32,
            "hasliked": 0,
            "id": "3lyyWm",
            "likes": 3,
            "name": "Temporal super sampling filter",
            "published": 3,
            "tags": [
                "aliasing",
                "filter",
                "sampling",
                "aa",
                "super",
                "anti",
                "temporal"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "/*Left: Single Jittered Frame, Right: Temporal Super Sampling\nClick and drag to compare.*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float slideX = iMouse.z>0.?iMouse.x:\n                (sin(iTime)*.5+.5)*iResolution.x;\n    if (abs(fragCoord.x-slideX) < 2.) {\n        //display slide bar\n        fragColor = vec4(1,0,1,1);\n    } else if (fragCoord.x > slideX) {\n        //display temporal super sampling\n        vec4 c = texelFetch(iChannel0,ivec2(fragCoord),0);\n        fragColor = c/c.w;\n    } else {\n        //display single frame\n        fragColor = texelFetch(iChannel1,ivec2(fragCoord),0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nmat2 r2(float a) {\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\n//render example scene designed to test super sampling\nvec4 scene(vec2 uv) {\n\n    //static circle\n    float s = length(uv)-.1;\n    \n    //moving circle\n    s = min(s,length(uv-vec2(sin(iTime*3.3),cos(iTime))*.7)-.1);\n    \n    //rotating cube\n    s = min(s,length(max(abs((uv-vec2(1.,.2))*r2(iTime))-.2,0.)));\n    \n    //color shapes white\n    if (s <= 0.) return vec4(1);\n    \n    \n    //very noise moire checkerboard\n    if (uv.x < 0.) {\n        vec3 rd = normalize(vec3(uv,1));\n        rd = abs(rd*2./max(1e-4,abs(rd.y)));\n        return vec4(mod(floor(rd.x)+floor(rd.z),2.));\n    }\n\n    //texture used to induce errors in movement detection\n    return texture(iChannel1,uv)*max(0.,uv.x*.5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //randomly jitter uv for super sampling(integrate area of the pixel square)\n    vec2 jitter = texelFetch(iChannel2,(ivec2(fragCoord)+ivec2(iFrame,iFrame/33))%1024,0).xy-0.5,\n        uv = ((fragCoord+jitter)*2.-iResolution.xy)/iResolution.y;\n\n    fragColor = scene(uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*Ethan Alexander Shulman 2021 - xaloez.com\n\nWhen temporal super sampling you combine old pixel samples with new pixel samples.\nHowever when you have a moving object or a shift due to reprojection you\nrun into motion blur/smearing issues. Commonly this is solved\nby outputting motion vectors to predict where objects move along with validating\ndepth/normals from gbuffers. However motion vectors can be tricky especially for\nprocedurally animated movements like foliage wind or water.\n\nThis attempts to solve the issue using only color values, the main issue with this\nis it requires minimal noise. You can see on the noisy checkboard the flickering\nspots where noise is 'breaking through'.\n\nI kept tweaking this shader over and over never really got it to a point where I\nwas happy with it. Decided it was a waste sitting private so here we are.\n*/\n\n\n#define MIN_THRESHOLD 90.\n#define MAX_THRESHOLD 100.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) {\n        //initialize black\n        fragColor = vec4(0);\n        return;\n    }\n\n    //compute average difference of nearby samples\n    #define ts(cx,cy) texelFetch(iChannel0,ivec2(fragCoord.x,fragCoord.y)+ivec2(cx,cy),0)\n    vec4 nw = ts(-1,1), n = ts(0,1), ne = ts(1,1),\n         w = ts(-1,0), c = ts(0,0), e = ts(1,0),\n         sw = ts(-1,-1), s = ts(0,-1), se = ts(1,-1);\n    \n    /*vec4 diff = max((abs(nw-c)+abs(n-c)+abs(ne-c)+\n    abs(w-c)+abs(e-c)+\n    abs(sw-c)+abs(s-c)+abs(se-c))/8., 1e-8);*/\n    vec4 diff = max((abs(n-nw)+abs(ne-n)+abs(c-w)+abs(e-c)+abs(s-sw)+abs(se-s)+\n    abs(w-nw)+abs(c-n)+abs(e-ne)+abs(sw-s)+abs(w-sw)+abs(s-c)+abs(se-e))/12., 1e-16);\n    \n    //filter out old sample based off difference\n    vec4 old = texelFetch(iChannel1,ivec2(fragCoord),0);\n    n = clamp((abs(c-old)/diff-MIN_THRESHOLD)/(MAX_THRESHOLD-MIN_THRESHOLD),0.,1.);\n    c.w = 1.;\n    c += old*(1.-max(n.x,max(n.y,n.z)));\n    \n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}