{
    "Shader": {
        "info": {
            "date": "1700955732",
            "description": "Click to re-seed with noise. You can change SCALE and REFRESH_RATE in the common tab to modify the simulation.\nI mostly did this as a \"hello world\" experiment in doing compute-buffer-style stuff with shadertoy's buffers.",
            "flags": 32,
            "hasliked": 0,
            "id": "dttfR8",
            "likes": 3,
            "name": "conway-life",
            "published": 3,
            "tags": [
                "life",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 128
        },
        "renderpass": [
            {
                "code": "vec3 gamma(in vec3 color) {\n    return pow(max(color, 0.0), vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 coord = fragCoord / SCALE;\n    vec4 data = texelFetch(iChannel0, ivec2(coord), 0);\n    \n    vec3 color;\n    if (data.x == 1.0) {\n        float t = min(data.z / 15.0, 1.0);\n        color = palette(t);\n    } else {\n        float t = 1.0 - min(data.z / 30.0, 1.0);\n        color = 0.2 * t * palette(1.0);\n    }\n    color = gamma(color);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (fragCoord.x > iResolution.x / SCALE || fragCoord.y > iResolution.y / SCALE) return;\n    \n    // x = alive/dead\n    // y = neighbor count\n    // z = age\n    vec4 data;\n    \n    if (iFrame == 0 || iMouse.w > 0.0) {\n        float t = iDate.x + iDate.y + iDate.z + iDate.w;\n        data.x = step(0.5, hash13(vec3(fragCoord.xy, t)));\n        fragColor = data;\n        return;\n    }\n    \n    data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (mod(float(iFrame), REFRESH_RATE) != 0.0) {\n        fragColor = data;\n        return;\n    }\n    \n    float neighborCount;\n    for (float x = -1.0; x <= 1.0; x++) {\n        for (float y = -1.0; y <= 1.0; y++) {\n            if (x == 0.0 && y == 0.0) {\n                continue;\n            }\n            vec2 offset = vec2(x, y);\n            vec2 coord = mod(fragCoord + offset, iResolution.xy / SCALE);\n            neighborCount += texelFetch(iChannel0, ivec2(coord), 0).x;\n        }\n    }\n    \n    data.y = neighborCount;\n    data.z++;\n    \n    if (data.x == 0.0) {\n        if (neighborCount == 3.0) {\n            data.x = 1.0;\n            data.z = 0.0;\n        }\n    } else {\n        if (neighborCount != 2.0 && neighborCount != 3.0) {\n            data.x = 0.0;\n            data.z = 0.0;\n        }\n    }\n    \n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float SCALE = 3.0;\nconst float REFRESH_RATE = 2.0;\n\nfloat hash13(vec3 p3) {\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(0.5, 0.5, 0.5);\n    vec3 d = vec3(0.1, 0.3, 0.8) - 0.2;\n    return a + b * cos(6.28318 * (c * t + d));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}