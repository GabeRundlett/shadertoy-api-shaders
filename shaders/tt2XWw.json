{
    "Shader": {
        "info": {
            "date": "1566150120",
            "description": "A verry happy dog bouncing in the rainbow world.\nUsing sdf, booleans, palette colors and a lot of fun\nSome shadow for incredible beauty",
            "flags": 0,
            "hasliked": 0,
            "id": "tt2XWw",
            "likes": 4,
            "name": "Happy dog",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "colors",
                "palette"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 516
        },
        "renderpass": [
            {
                "code": "// HAPPY DOG\n// by Green Chicken\n// -----------------\n// So much fun with sdf, boolean, palette color\n// first shadow. Hope to see what i'll do with color materials\n\n// iq\nfloat impulse(float k, float x)\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\n// iq\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// iq\nfloat uSDF(float s1, float s2)\n{\n    return min(s1, s2);\n}\n\n// iq\nfloat dSDF(float s1, float s2)\n{\n    return max(s1, -s2);\n}\n\n// iq\nfloat suSDF( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n// iq\nfloat sdPlane(vec3 pos, float offset)\n{\n    return pos.y+offset;\n}\n\n// iq\nfloat sdSphere(vec3 pos, float r)\n{\n    \n    return length(pos)-r;\n}\n\n// iq\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n// iq ? yes\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat map(vec3 pos)\n{\n    vec3 tp = pos;\n    float t = 10000.0;\n    \n    // body\n    float bodyY = -1.0;\n    bodyY += impulse(5.0, fract(iTime)) * .5;\n    tp = pos + vec3(0.0, bodyY, 0.0);\n    t = sdCapsule(tp, vec3(1., .0, .0), vec3(0.0), 1.0);\n    \n    // sexy legs\n    float legY = 1.0;\n    tp = pos + vec3(0.5, legY, 1.0);\n    t = suSDF(t, sdRoundCone(tp, .1, .5, 1.), .5);\n    tp = pos + vec3(-1.5, legY, 1.0);\n    t = suSDF(t, sdRoundCone(tp, .1, .5, 1.), .5);\n    tp = pos + vec3(0.5, legY, -1.0);\n    t = suSDF(t, sdRoundCone(tp, .1, .5, 1.), .5);\n    tp = pos + vec3(-1.5, legY, -1.0);\n    t = suSDF(t, sdRoundCone(tp, .1, .5, 1.), .5);\n    \n    // la tete de ta mere\n    tp = pos + vec3(1.5, bodyY+-.5, 0.0);\n    t = suSDF(t, sdSphere(tp, 1.5), .2);\n    tp = pos + vec3(1.5, bodyY+-2.0, 0.5);\n    t = suSDF(t, sdRoundCone(tp, .3, .1, 1.), .5);\n    tp = pos + vec3(1.5, bodyY+-2.0, -0.5);\n    t = suSDF(t, sdRoundCone(tp, .3, .1, 1.), .5);\n    tp = pos + vec3(2.5, bodyY+-.2, 0.0);\n    t = dSDF(t, sdSphere(tp, .6));\n    tp = pos + vec3(2.8, bodyY+-.5, 0.0);\n    t = uSDF(t, sdSphere(tp, .5));\n    // eyes\n    tp = pos + vec3(2.7, bodyY+-1.0, .5);\n    t = uSDF(t, sdSphere(tp, .25));\n    tp = pos + vec3(2.9, bodyY+-1.0, .5);\n    t = dSDF(t, sdSphere(tp, .1));\n    tp = pos + vec3(2.7, bodyY+-1.0, -.5);\n    t = uSDF(t, sdSphere(tp, .25));\n    tp = pos + vec3(2.9, bodyY+-1.0, -.5);\n    t = dSDF(t, sdSphere(tp, .1));\n    \n    // balls of steel\n    tp = pos + vec3(-2.0, bodyY+.5, 0.15);\n    t = uSDF(t, sdSphere(tp, .2));\n    tp = pos + vec3(-2.0, bodyY+.5, -0.15);\n    t = uSDF(t, sdSphere(tp, .2));\n    tp = pos + vec3(-2., bodyY+.5, 0.0);\n    t = uSDF(t, sdCapsule(tp, vec3(0.0, -.5, sin(iTime*10.)*.2), vec3(.0), .15));\n    \n    t = uSDF(t, sdPlane(pos, 1.0));\n    \n    return t;\n}\n\nfloat CastRay(vec3 rayOrigin, vec3 rayDir)\n{\n    float t;\n    \n    for(int i=0; i<128; i++)\n    {\n        float res = map(rayOrigin + rayDir * t);\n        \n        if(res < (0.0001*t))\n        {\n            return t;\n        }\n        \n        t += res;\n    }\n    \n    return -1.0;\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(1.0, -1.0) * 0.5773 * 0.0005;\n    return normalize(   e.xyy*map(  pos+e.xyy   )   +\n                        e.yyx*map(  pos+e.yyx   )   +\n                        e.yxy*map(  pos+e.yxy   )   +\n                        e.xxx*map(  pos+e.xxx   ));\n}\n\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    float t = CastRay(ro, rd);\n    \n    vec3 col = vec3(0.0);\n    \n    if(t == -1.0)\n    {\n        col = vec3(0.0);\n    }\n    else\n    {\n        vec3 pos=ro+rd*t;\n        vec3 N = calcNormal(pos);\n        vec3 L = vec3(-1.0, 1.0, 1.0);\n        \n        float light = clamp(dot(N, L), 0.0, 1.0);\n        vec3 spec = vec3(pow(clamp(dot(N, L), 0.0, 1.0),8.0));\n        float fog = 0.2 * t; // is it ?\n        \n        float shad = shadow(pos, L, 0.02, 2.5);\n        \n        col = palette(\n            light * fog, \n            vec3(.5),\n            vec3(.5),\n            vec3(.12),\n            vec3(.5, .2, .9));\n        \n        col = mix(col*.33, col, shad);\n    }\n    \n    return col;\n}\n\nvec3 CameraViewDir(vec2 uv, vec3 camPos, vec3 camTar)\n{\n    vec3 viewDir;\n    vec3 forward = normalize(camTar - camPos);\n    vec3 right = normalize(cross(vec3(.0, -1., .0), forward));\n    vec3 up = normalize(cross(right, forward));\n    float fPersp = 1.0;\n    \n    viewDir = normalize(uv.x * right + uv.y * up + fPersp * forward);\n    \n    return viewDir;\n}\n\nvec2 NormalizeScreen(vec2 st)\n{\n    vec2 uv = 2. * st/iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = vec3(.0);\n    float time = iTime*.5;\n    vec3 camPos = vec3(sin(time), .2+sin(iTime)*.2, cos(time))*5.0;\n    vec3 camTarget = vec3(0.0, 0.5, 0.0);\n    vec2 uv = NormalizeScreen(fragCoord);\n    \n    vec3 viewDir = CameraViewDir(uv, camPos, camTarget);\n    \n    col = render(camPos, viewDir); \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}