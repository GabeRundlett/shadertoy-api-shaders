{
    "Shader": {
        "info": {
            "date": "1648714196",
            "description": "my second project",
            "flags": 0,
            "hasliked": 0,
            "id": "7lXcW2",
            "likes": 2,
            "name": "TP-3",
            "published": 3,
            "tags": [
                "texture",
                "shader",
                "marble",
                "woods"
            ],
            "usePreview": 0,
            "username": "valentinCuzin",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "// Texturing\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\n    vec3 c;\n    float s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n\nfloat Turbulence(vec3 p,float coef, int detail,float longueurOnde){// somme de bruits \n    float somme;\n    for(int i = 0; i<detail; i++){//boucle pour calculer la somme de bruit\n        somme = somme + coef*Noise(p/longueurOnde);\n        coef = coef / 2.0;\n        longueurOnde = longueurOnde / 2.0;\n    }\n    return somme;\n}\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n// Différence\n// a,b : les deux distance de la fonction SDF des deux object\nfloat Differance(float a, float b){\n    return max(a, -b);\n}\n\nmat2 Rotation(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\nfloat cylinder (vec3 a, vec3 b, float r, vec3 p)\n{\n    float aq = dot((p-a),(b-a)/length(b-a));\n    float l = sqrt(dot(p-a,p-a)- aq*aq);\n    return l-r;\n}\n\n//cylindrefini\n// p : point\n// r : rayon\n// t : taille du cylindre\nfloat CylindreFini(vec3 p, float r, float t)\n{\n    float cylindreInf = cylinder(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, t), r, p);\n    float demiCylindreInf1 = Differance(cylindreInf, Plane( p, vec3(0.0, 0.0, -1.0) , vec3(0.0, 0.0, t+1.0))); \n    float demiCylindreInf2 = Differance(cylindreInf, Plane( p, vec3(0.0 ,0.0 ,1.0) , vec3(0.0,0.0,1.0) ));\n    return Intersection(demiCylindreInf1, demiCylindreInf2);\n    \n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-4.0),1);\n  vec3 pTurbul=p; \n  u=Union(u,Dice(p,vec3( 0.0, 10.0, 2.0),4.0,4));\n  pTurbul.x = p.x + Turbulence(p, 0.4, 3, 1.0);\n  pTurbul.y = p.y + Turbulence(p, 0.4,3,1.0);\n  V tronc= V(CylindreFini(pTurbul, 4.0, 5.0),0);\n  u=Union(u,tronc);\n  pTurbul = p + Turbulence(p, 0.5, 3, 1.0); \n  u=Union(u,Dice(pTurbul,vec3( -10.0, 0.0, 2.0),4.0,2));\n  u=Union(u,Dice(p,vec3( 10.0, 0.0, 2.0),4.0,3));\n \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps*2; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v)/2.0;//complexité augmenter par la précission\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.35,0.45,0.695),vec3(0.352,0.397,0.695), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n\n\nint convert(float a){\n    if(a<0.0){\n        a= a-1.0;\n    }\n    return int(a);\n}\n\nT uniforme(vec3 c, float s){\n    return T(c,s); //retourne une texture uniforme en fonction d'une couleur et d'une reflexion spéculaire\n}\n\nT Damier(in vec3 p, T a, T b){\n    int x = convert(p.x);//convertion en entier\n    int y = convert(p.y);//correction partie entière des valeurs négatifs pour evité le cas de int(0.4)=int(-0.4)\n    int z = convert(p.z);\n        if( (x+y+z)%2 == 0 ){//modulo 2 pour faire 2 cas: coordonées paire, coordonées impaire\n        return a;//couleur 1\n    }else{\n        return b;//couleur 2\n    }   \n}\n\nT bois(in vec3 p, T a, T b, float E, float bruit){\n    p = p + bruit*Noise(p)*(p/E);//perturbation de p en fonction de l'indice bruit et de la longeur d'onde E\n    float d = length(p.xy);//calcul de la distance pour créer les cercles\n    float v = 0.5*cos(d*E) + 1.0;//utilisation de cos pour interpoler les deux couleurs quand v=1 couleur a quand v= 0 couleur b\n    return T( (a.c*v + b.c*(1.0-v)), (a.s*v + b.s*(1.0-v)) );//vrai interpolation de la couleur mais aussi de l'indice spéculaire\n}\n\nT marbre_veineux(in vec3 p, T a, T b){\n    p = p + Turbulence(p,3.0,10,3.0);//perturbation grande de p avec valeur imposer \n    /* utilisation de tangente: fonction qui à pour valeurs interdites pi/2 \n    et qui varie entre -infini et +infini décrit des droites vertical donc parfait pour faire des veines\n    apliquer à x mais peut aussi s'appliquer à y et z\n    \n    p.x multiplier par 2 car ogmentation du nombre de ligne\n    tangente multiplier par 5 pour grossir les veines\n    \n    l'utilisation de tangente est très performante car de complexiter 10 appliquer qu'une fois \n    en comparaison de de ((1.0+cos(x))/2)⁴ ou de l'utilisation d'un plan\n    \n    critiquable car si l'objet est en coordonnée x<0 les couleurs s'inverse entre la veine et le fond\n\n    */\n    float t = tan(p.x*2.)*5.;\n    vec3 veine = vec3(p.x+t,p.yz);\n    if(veine.x<0.) return a;//couleur veine\n    else return b;//couleur fond\n    /*autre possibilité explorer\n    t = ((1.0+cos(t))/2.0)*((1.0+cos(t))/2.0)*((1.0+cos(t))/2.0)*((1.0+cos(t))/2.0);\n    T couleurFinal = T( (a.c*t + b.c*(0.6-t)), (a.s*t + b.s*(1.0-t)));\n    return couleurFinal;\n    */\n}\n\nT marbre(in vec3 p, T a, T b){\n    p = p + Turbulence(p,9.0,10,2.0);//perturbation grande de p avec valeur imposer pour que ça ressemble à du marbre\n    float t = cos(p.x);//utile pour l'interpolation des deux couleur entre 1 et moins 1\n    return T( (a.c*t + b.c*(0.6-t)), (a.s*t + b.s*(1.0-t)));//interpolation des deux couleurs\n}\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        return bois(p, T(vec3(0.87, 0.72, 0.53),0.0), T(vec3(0.54, 0.27, 0.07),0.0), 6.0, 0.1);\n    }\n    else if (vp.i==1)\n    {\n        return marbre(p, T(vec3(0.6,0.7,0.65), 0.1), T(vec3(0.8,0.9,0.85), 0.4));\n    }\n    else if (vp.i==2)\n    {\n        vec3 pT = p + Turbulence(p, 0.6, 3, 1.0);\n        return Damier(pT, T(vec3(0.0,0.0,0.0),1.0), T(vec3(1.0,1.0,1.0),0.0));\n    }\n    else if (vp.i==3)\n    {\n        return marbre_veineux(p, T(vec3(1,0.9,0.), 0.9), T(vec3(0.2,0.2,0.2), 0.1));\n    }\n    else if (vp.i==4)\n    {\n        return uniforme(vec3(0.6,0.6,1.),14.0);\n        \n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 20.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n    l.xy=l.xy*Rotation(0.3*iTime);//la lune tourne\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.1*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.2  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),8.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(35.0,0.0,15.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}