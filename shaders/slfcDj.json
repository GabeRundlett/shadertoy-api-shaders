{
    "Shader": {
        "info": {
            "date": "1648709981",
            "description": "doing a lot of new stuff here\n\ninspiration: https://twitter.com/y2k_aesthetic/status/1448866886922366982",
            "flags": 0,
            "hasliked": 0,
            "id": "slfcDj",
            "likes": 2,
            "name": "Day Deux - Lambmeow",
            "published": 3,
            "tags": [
                "sdf",
                "shading",
                "numbers",
                "two",
                "daily"
            ],
            "usePreview": 0,
            "username": "lambmeow",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\nfloat bb(vec2 p, vec2 b)\n{ \n    vec2 q = abs(p) - b;\n    \n    return length(max(q, 0.)) + min(max(q.x,q.y),0.);\n}\n\nfloat tws(vec2 p)\n{\n    float res = bb(p, vec2(0.5));\n    res = max(-bb(p + vec2(0.13, -0.2), vec2(0.45, .06)), res);\n    res = max(-bb(p + vec2(-0.13, 0.2), vec2(0.45, .06)), res);\n\n    return res;\n}\n\nfloat ss(vec3 p)\n{\n    p = p/atan(iTime);\n    p.x += iTime;\n    p.x = mod(p.x + .75,1.5) - .75;\n    //get 2d\n    float tw = tws(p.xy);\n    \n    \n    //extrusion\n    vec2 w = vec2(tw, abs(p.z) - ( .5));\n    float res = min(max(w.x,w.y),0.) + length(max(w,0.));\n    return res - 0.02;\n}\nvec3 nn(vec3 value)\n{\n    vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e * ss(value+0.0005*e);\n    }\n    return normalize(n);\n}\n\n\nmat3 la(vec3 ro, vec3 ll, vec3 up)\n{\n    vec3 ww = normalize(ll - ro);\n    vec3 uu = normalize(cross(ww, normalize(up)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    return mat3(uu, vv, ww);\n}\n\nfloat ggx(float ndv,float r)\n{\n    float rr = r + 1.;\n    float s = (rr *rr)/8.;\n    return ndv / (ndv * (1. - s) + s);\n}\n\nfloat gSmth(float ndv, float ndl, float r)\n{\n    \n    return ggx(ndv, r) * ggx(ndl, r);\n}\n\nvec3 fsnl(float dl, vec3 F0)\n{\n    return F0 + (1. -F0) * pow(1. - dl, 5.);\n}\n\nfloat rt(vec3 ro, vec3 rd, inout vec3 p)\n{\n    float ll = 0., dd = 0.;\n        \n    \n    for(int i = 0 ; i < 255; i ++)\n    {\n         p = ro + rd * ll; \n         dd = ss(p)*atan(iTime);\n         ll += dd;\n         \n         if(dd < 0.001 || ll > 100.)\n             break;\n    }\n    \n    return dd;\n}\n\nfloat nd(vec3 d, vec3 l)\n{\n    return max(dot(d,l),.0);\n}\n//lighting from https://learnopengl.com/PBR/Lighting\nvec4 gc(vec3 p, vec3 n, float dd, vec3 rd, vec2 u)\n{\n    vec3 al = vec3(1,0,0);\n    float met = 1.;\n    float r = .1;\n    \n    dd = max(1.- dd, 0.);\n    vec3 l = normalize(vec3(sin(iTime) * 3., -cos(iTime) , 1));\n    vec3 v = -rd;\n    vec3 h = normalize(v + l);\n    float ndh = nd(n,h);\n    float ndl = nd(n , l);\n    float ndv = nd(n, v);\n    \n    vec3 bg = vec3(0,0,1) * (1.5 - u.y);\n    if(dd > 0.01)\n    {\n    vec3 f = mix(bg, pow(al , vec3(2.2)), met);\n    float nf = ggx(ndh, r);\n    float g =gSmth(ndv , ndl,r);\n    vec3 fs = fsnl(nd(h, v), f);\n    vec3 kd = vec3(1.) - fs;\n    kd *= 1.- met;\n    \n    vec3 nu = nf * g * f;\n    float de = 4. * ndv * ndl;\n    vec3 sp = nu / max(de, 0.001);\n    \n    return vec4(bg*0.1,1.) + vec4(1. * (kd * pow(al, vec3(2.2)) / PI + sp) * (ndl) ,1);\n    }\n    else\n    {\n    return vec4(bg, 1.);\n    }\n}\nvoid mainImage( out vec4 c, in vec2 f )\n{\n\n    vec2 r = iResolution.xy, u = (2. * f  -r)/r.y;\n    vec3 ro = vec3(-.7 * cos(iTime) , sin(iTime) * 0.4,4), rd = normalize(vec3(u, 2.)), p;\n    float dd = 0.;\n    rd *= la(ro, vec3(0), vec3(0,1,sin(iTime) *0.01));\n    vec3 rf = rd, rfo = ro;\n    float d = rt(ro,rd, p);\n    vec3 op = p;\n    \n    for(int i = 0; i < 2; i ++)\n    {\n        dd = rt(rfo, rf, p);\n        if(dd > 0.01)\n            break;\n        \n        rf = reflect(rd, nn(p));\n        rfo = p +0.01;\n    }\n    \n    c = mix(gc(p, nn(p),d, rd, u), gc(rfo, nn(rfo), dd, rf,  u),0.15);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}