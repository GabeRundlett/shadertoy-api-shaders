{
    "Shader": {
        "info": {
            "date": "1592081065",
            "description": "Inspired by : https://www.instagram.com/p/B5DBbWtHXm1/ ",
            "flags": 64,
            "hasliked": 0,
            "id": "ttfyD4",
            "likes": 3,
            "name": "MX Onion",
            "published": 3,
            "tags": [
                "sdf",
                "audioreactive",
                "onion"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "#define STRIPE 50.\n#define AUDIOREACTONION\t\t0.3\n#define AUDIOREACTSPIRAL\t1.5 \n#define CONSTCOLOR 0\nconst\tvec3 col1 = vec3(255,  25, 128) / 255.;\nconst\tvec3 col2 = vec3(200, 255, 200) / 255.;\nconst\tbool spiralEnabled = true;\n\n\n#if HW_PERFORMANCE==0\n#define AA 0\n#else\n#define AA 1\n#endif\n\n#define BIASED_NORMAL 1\n\n\nfloat mid;\nfloat low;\n\n\nfloat saturate(float c)\n{\n    return clamp(c,0.,1.);\n}\n\nfloat opExtrussion( in vec3 p, in float sdf, in float h )\n{\n    vec2 w = vec2( sdf, abs(p.z) - h );\n  \treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nvec2 minVecSelect(vec2 a, vec2 b)\n{\n    return a.y<b.y?a:b;\n}\n\nfloat triangle(float v)\n{\n    return -(abs((v - 4. * floor(0.25 * v)) - 2.) - 1.);\n}\n\n//---------------------------------\n\nvec2 map(in vec3 pos)\n{\n    float\tl;\n    vec3\tp;\n    p = vec3(sin(0.13 * iTime + 0.36), sin(0.07 * iTime + 1.25), sin(0.08 * iTime + 2.33));\n    l = length(p - pos) + low * AUDIOREACTONION;\n\tvec2\tv1 = vec2(triangle(l * STRIPE + iTime) / STRIPE, l);\n    p = vec3(sin(0.12 * iTime + 3.66), sin(0.08 * iTime + 4.36), sin(0.17 * iTime + 4.95));\n    l = length(p - pos) + low * AUDIOREACTONION;\n\tvec2\tv2 = vec2(triangle(l * STRIPE + iTime) / STRIPE, l); \n    p = vec3(sin(0.19 * iTime + 1.26), sin(0.09 * iTime + 3.33), sin(0.14 * iTime + 0.15));\n    l = length(p - pos) + low * AUDIOREACTONION;\n\tvec2\tv3 = vec2(triangle(l * STRIPE + iTime) / STRIPE, l);\n    vec2\tv = minVecSelect(v1, minVecSelect(v2, v3));\n    float d = opExtrussion( pos, sd2dMX(pos.xy), 1. );\n    float m = max(d, v.x);\n    return vec2(m,v.y);\n}\n\n#if BIASED_NORMAL\nvec3 calcNormal(vec3 pos)\n{\n    vec2 eps = vec2(0.0001, 0);\n\tfloat d = map(pos).x;\n\treturn normalize(vec3(map(pos + eps.xyy).x - d, map(pos + eps.yxy).x - d, map(pos + eps.yyx).x - d));\n}\n#else\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = 0.001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n#endif\n\n// From IQ\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 Render(vec3 ro,vec3 rd,vec3 cd,float dist,vec2 fracCoord)\n{\n    float t = 0.5;\n    float d;\n    float r = 1.;\n    for( int i=0; i<100; i++ )\n    {\n        vec3\tp = ro + t*rd;\n        float\th = map(p).x;\n        t += h;\n        d = dot(t*rd,cd);\n        if( abs(h) < 0.001 || d > dist )\n        {\n            r = float(i) / 100.;\n            break;\n        }\n    }\n\n    vec3 col = vec3(0.5);\n\n    if( d<dist )\n    {\n        vec3 light = vec3(0.,10.,2.);\n        vec3 p = ro + t*rd;\n        vec3 n = calcNormal(p);\n        #if CONSTCOLOR\n        vec3 c1 = col1;\n        vec3 c2 = col2;\n        #else\n        vec3 c1 = normalize(vec3(1. + sin(iTime * 0.7 + 1.3) / 2., 1. + sin(iTime * 0.8 + 4.45) / 2., 1. + sin(iTime * 0.5 + 2.3) / 2.));\n        vec3 c2 = normalize(vec3(1. + sin(iTime * 0.4 + 0.2) / 2., 1. + sin(iTime * 0.6 + 2.33) / 2., 1. + sin(iTime * 0.45 + 3.3) / 2.));\n        #endif\n        vec3 c = mix(c1, c2, step(0., triangle((map(p).y * STRIPE + iTime) / 2.)));\n        float ao = calcAO(p, n);\n        \n        vec3 v = normalize(ro-p);\n        vec3 l = normalize(light-p);\n        vec3 h = normalize(l+v);\n        \n        //vec3 diffcol = vec3(mix(saturate(pow(abs(sin(noise*16.))*1.5,15.)) ,1.,0.3)); \n        vec3 diffcol = c; \n        vec3 speccol = vec3(1.,1.,1.);\n        vec3 ambcol = diffcol;\n        \n        col = saturate(dot(n,l)) * diffcol;\n        col+= pow(saturate(dot(n,h)),20.) * speccol;\n        col+= 0.2 * ambcol;\n        col*= ao;\n        col*= (1. - r);\n\n    }\n    else\n    {\n        if(spiralEnabled)\n        {\n            float len = length(fracCoord);\n            float angle = atan(fracCoord.y, fracCoord.x);\n\n            float sinAngle = sin(angle + iTime) / 2. + 0.5;\n\n            float powLen = 1. / len;\n\n            float spiral = sin(powLen * 10.0  + angle * 3. - iTime * 4.0) / 2. + 0.5;\n\n            float value = (powLen - iTime) * 10.;\n            col\t= vec3(sin(0.13 * value + 0.36 + mid * AUDIOREACTSPIRAL), sin(0.11 * value + 1.25 + mid * AUDIOREACTSPIRAL), sin(0.08 * value + 2.33 + mid * AUDIOREACTSPIRAL)) / 2. + 0.5;\n            col *= mid * AUDIOREACTSPIRAL;\n            col = mix(vec3(0), col,smoothstep(0.4, 1., len)) * spiral;\n        }\n    }\n    return col;\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n// From https://www.shadertoy.com/view/4djSRW\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 vignette(vec3 color, vec2 q, float v)\n{\n    color *= 0.3 + 0.8 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), v);\n    return color;\n}\n\nvec3 desaturate(in vec3 c, in float a)\n{\n    float l = dot(c, vec3(1. / 3.));\n    return mix(c, vec3(l), a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Audio reactive   \n    mid = texture(iChannel0, vec2(0.5,0.25)).x;\n    low = texture(iChannel0, vec2(0.9,0.25)).x;\n    \n    float theta\t= radians(90.) + sin(iTime / 2.) * radians(20.);\n\tfloat phi\t= radians(80.) + sin(iTime / 3.) * radians(10.);\n\tvec3 ro = 3.*vec3( sin(phi)*cos(theta),cos(phi),sin(phi)*sin(theta));\n     \n\tvec3 tot = vec3(0.0);    \n#if AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        //vec3 cd = ca[2];    \n        \n        vec3 rd =  ca*normalize(vec3(p,1.5));        \n        \n        vec3 col = Render(ro ,rd , ca[2], 100., p);\n        \n\n        tot += col;\n            \n#if AA\n    }\n    tot /= 4.;\n#endif\n        \n    tot = desaturate(tot, -0.4);\n    tot = vignette(tot, fragCoord / iResolution.xy, 0.8);\n    tot = pow(tot, vec3(1./2.2));\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23121,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/babelian/rob-hubbard-goldrunner-khatchadour-remix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n// Oriented Box\nfloat sdOBox(vec2 p, vec2 c, vec2 b, vec2 d)\n{\n    mat2\tr;\n    r[0]\t= d;\n   \tr[1]\t= vec2(-d.y, d.x);\n    vec2\tlp = (p - c) * r;\n    vec2\tq = abs(lp) - b;\n    return\tlength(max(q, 0.0)) + min(max(q.x, q.y), 0.0);  \n}\n\n// Axis Aligned Box\nfloat sdAABox(vec2 p, vec2 c, vec2 b)\n{ \n    vec2\tq = abs(p - c) - b;\n    return\tlength(max(q, 0.0)) + min(max(q.x, q.y), 0.0);\n}\n\n// Circle\nfloat sdCircle(vec2 p, vec2 c, float r)\n{\n    return\tlength(p - c) - r;\n}\n\nfloat sd2dM(vec2 p)\n{\n    float d0 = sdAABox(p, vec2(-1.5990, -0.2965), vec2(0.2900, 0.7035));\n    float d1 = sdAABox(p, vec2(-0.8555, -0.2965), vec2(0.2905, 0.7035));\n    float d2 = sdAABox(p, vec2(-0.1135, -0.2965), vec2(0.2905, 0.7035));\n    float cl = sdCircle(p, vec2(-1.3349, 0.4478), 0.5545);\n    float cr = sdCircle(p, vec2(-0.3787, 0.4478), 0.5565);\n    float cb = opUnion(cl, cr);\n    float dl = opUnion(d0, opUnion(d1, d2));\n    cb = opIntersection(cb, 0.2 - p.y);\n    float hl = sdCircle(p, vec2(-1.2275, 0.2000), 0.0815);\n    float hr = sdCircle(p, vec2(-0.4845, 0.2000), 0.0815);\n    float hb = opUnion(hl, hr);\n    return opSubtraction(hb, opUnion(dl, cb));    \n}\n\nfloat sd2dX(vec2 p)\n{\n    float dd = sdOBox(p, vec2(1.0765, -0.0245), vec2(1.2410, 0.2679), vec2(-0.4634, 0.8861));\n    float du = sdOBox(p, vec2(1.0535, -0.0245), vec2(1.2480, 0.2532), vec2(0.4776, 0.8786));\n    float dx = opUnion(dd, du);\n    return opIntersection(sdAABox(p, vec2(1.0620, -0.0245), vec2(0.8270, 0.9755)), dx);\n}\n\nfloat sd2dMX(vec2 p)\n{\n    return opUnion(sd2dM(p), sd2dX(p));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}