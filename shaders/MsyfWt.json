{
    "Shader": {
        "info": {
            "date": "1539210106",
            "description": "the distance to the closest point on a cone",
            "flags": 0,
            "hasliked": 0,
            "id": "MsyfWt",
            "likes": 3,
            "name": "cone df",
            "published": 3,
            "tags": [
                "cone"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "\n/**/\n#define pi acos(-1.0)\n\n#define mode 1\n//mode 0: normal\n//mode 1: branchless\n//mode 2: two \"boxes\" rotated and mirrored\n//mode 3: bad at sharp angles but simple\n//mode 4: added this later, pretty solid\n\nfloat cone( vec2 p, vec2 c )\n{\n    //p.x = length(p.xz); //for 3d\n    p.x = abs(p.x);     // for 2d\n    \n#if mode == 0\n    if (dot(vec2(-c.y,c.x),p.xy) < 0.0) {\n        return dot(c.xy,p.xy);\n    } else {\n        return length(p.xy)*sign(c.x);\n    }\n#elif mode == 1\n    mat2 hi2 = mat2(-c.y,c.x,c);\n    vec2 hi = p.xy*hi2;\n    hi.x = max(hi.x, 0.0);\n    return length(hi)*sign(hi.y);\n#elif mode == 2\n    vec2 q = p.xy*mat2(-c.y,c.x,c.xy);\n    return length(max(q,0.0))+min(q.y,0.0);\n#elif mode == 3\n    return dot(c.xy,p.xy);\n#elif mode == 4\n    float l = dot(c,p.xy);\n    \n    vec2 q = p.xy-c*l;\n    \n    if (q.x < 0.0) {\n        l = length(p.xy)*sign(p.y*c.y);\n    }\n    \n    return l;\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    float t = iTime;\n    \n    float len = cone(uv,vec2(sin(t),cos(t)));\n    \n    //distance field coloring by iq https://www.shadertoy.com/view/4lcBWn\n    vec3 col = vec3(1.0) - sign(len)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(len));\n\tcol *= 0.8 + 0.2*cos(120.0*abs(len));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(len)) );\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}