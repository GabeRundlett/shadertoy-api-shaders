{
    "Shader": {
        "info": {
            "date": "1587310896",
            "description": "A variation on @RadoKirov's [url]https://www.shadertoy.com/view/3sjyWG[/url], also incorporating many of Fabrice's suggestions.\n\nMouse sets spiral parameters, t,g,h,z also do things, see code. ",
            "flags": 16,
            "hasliked": 0,
            "id": "3dSyWV",
            "likes": 24,
            "name": "Interactive Droste Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "droste"
            ],
            "usePreview": 1,
            "username": "mla",
            "viewed": 689
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Interactive Droste spiral\n// Matthew Arcus, mla, 2020\n//\n// Derived from @FabriceNeyret2's reworking of @RadoKirov's original:\n// https://www.shadertoy.com/view/3sjyWG\n//\n// Parameterized things, added mouse control etc.\n//\n// <mouse>: horizontal = scale factor, vertical = number of spirals\n// t: use texture\n// g,h: show major and minor grids\n// z: autozoom\n//\n////////////////////////////////////////////////////////////////////////////////\n\nint AA = 2;\n\nfloat N = 1.0;\n// There are M spirals\nfloat M = 2.0;\n// Scale factor for each turn\nfloat X = 2.0, logX = log(2.0);\n\n// Grid dimensions\nfloat majorGrid = 2.0;\nfloat minorGrid = 4.0;\nconst float speed = 3.0;\nconst float PI = 3.1415927;\n\nfloat grid(vec2 uv, float g, float r) {\n  uv *= g;\n  vec2  a = abs(fract(uv+0.5)-0.5);\n  // Antialiasing by Fabrice. Thanks.\n  float m = min(a.x,a.y)-r;\n  return smoothstep(-g,g,m*100.0*log(X*length(gl_FragCoord)));\n}\n\nvec2 cmul(vec2 z, vec2 w) {\n  return z.x*w + vec2(-z.y*w.y,w.x*z.y);\n}\n\nvec2 polar(vec2 z) {\n  return vec2(log(length(z)), atan(z.y, z.x));\n}\n\nvec2 cartesian(vec2 z) {\n  return exp(z.x) * normalize(vec2(cos(z.y),sin(z.y)));\n}\n\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_M = 77;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_Z = 90;\n\nbool key(int key) {\n  return texelFetch(iChannel3,ivec2(key,2),0).x != 0.0;\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 getcolor(vec2 z) {\n  vec3 col = vec3(1);\n  col = hsv2rgb(vec3(0.5*z+0.5,1));\n  if (key(CHAR_T)) col = texture(iChannel0,0.5*z+0.5).xyz;\n  if (!key(CHAR_G)) col *= grid(z,majorGrid,0.06);\n  if (!key(CHAR_H)) col *= grid(z,minorGrid,0.06);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 m = vec2(0);\n  if (iMouse.x > 0.0) {\n    m = iMouse.xy/iResolution.xy;\n  }\n  X = 2.0+floor(16.1*m.y);\n  logX = log(X);\n  majorGrid = X;\n  minorGrid = 4.0*X;\n  M = floor(16.1*(m.x-0.5));\n  float t = iTime / speed;\n  vec3 col = vec3(0);\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 z = (2.0 * (fragCoord+vec2(i,j)/float(AA)) - iResolution.xy) / iResolution.y;\n      if (key(CHAR_Z)) z *= exp(-t); // Zooming it\n      vec2 e = vec2(N,M*logX/PI/2.0);\n      z = cmul(polar(z),e);\n      z = cartesian(z);\n      z /= exp(mod(t,logX));\n      // Multiply z to bring it into range, ie. find power of\n      // X that brings max(x,y) into range 1..X\n      float tt = ceil(log(max(abs(z.x),abs(z.y)))/logX);\n      z *= pow(X,-tt);\n      col += getcolor(z);\n    }\n  }\n  fragColor = vec4(col/float(AA*AA),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}