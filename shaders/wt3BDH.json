{
    "Shader": {
        "info": {
            "date": "1613549062",
            "description": "Godunov type central upwind scheme for shallow water equation",
            "flags": 32,
            "hasliked": 0,
            "id": "wt3BDH",
            "likes": 8,
            "name": "SaintVenantSystem",
            "published": 3,
            "tags": [
                "simulation",
                "water",
                "shallowwaterequation",
                "saintvenant"
            ],
            "usePreview": 0,
            "username": "EvilRyu",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Saint-Venant system of Shallow Water Equation\n\nvec2 getCellUV(float fragCoord)\n{\n    float Cellid = (fragCoord / (iResolution.x/NUM_CELLS));\n    return vec2(Cellid, 0.5)/iResolution.xy;\n    \n    // no smooth filter to see the height of each cell\n    //return vec2(floor(Cellid) + 0.5, 0.5) / iResolution.xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Render topology\n    float d = uv.y - B(getCellUV(fragCoord.x));\n    vec3 col = vec3(smoothstep(0., 0.01, d) * smoothstep(0.02, 0.01, d));\n        \n    // Render water\n    float w = texture(iChannel0, getCellUV(fragCoord.x)).x;\n    d = uv.y - w;\n    col += vec3(0., 0., smoothstep(0.015, 0., d));\n    \n    // Cut out overlapping area\n    d = uv.y - B(getCellUV(fragCoord.x));\n    col -= vec3(smoothstep(0.01, 0.0, d));\n    col = clamp(col, 0., 1.);\n\t\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Saint-Venant system of Shallow Water Equation\n// An implementation of the paper:\n// A SECOND-ORDER WELL-BALANCED POSITIVITY PRESERVING CENTRAL-UPWIND SCHEME FOR THE SAINT-VENANT SYSTEM\n// https://www.intlpress.com/site/pub/files/_fulltext/journals/cms/2007/0005/0001/CMS-2007-0005-0001-a006.pdf\n\n// No larger than iResolution.x\n#define NUM_CELLS 100.\n#define dx 1.\n#define theta 1.3\n#define epsilon (0.0001 * max(1., dx))\n#define G 9.812\n// not bounded by CFL condition as it requires \n// calculation of the max of all local speeds of propagation\n#define dt .1\n\n#define oneCell vec2(1./iResolution.x, 0.)\n#define halfCell vec2(0.5/iResolution.x, 0.)\n\n// bottom topology\nfloat B(vec2 uv)\n{\n    float x = uv.x * 13.+ 6.0;\n    return .3 + .3 * sin(10. * x + 5. * cos(x + 2.5 * sin(x)));\n}\n\nvec2 initialCondition(vec2 uv)\n{\n    return vec2(.2 + B(uv), 0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Saint-Venant system of Shallow Water Equation\n\n// Limiter to ensure non-oscillatory reconstruction\nvec2 minmod(vec2 a1, vec2 a2, vec2 a3)\n{\n    vec2 res;\n    \n    for(int i = 0; i < 2; ++i)\n    {\n        if(a1[i] > 0. && a2[i] > 0. && a3[i] > 0.)\n        {\n            res[i] = min(min(a1[i], a2[i]), a3[i]);\n        }\n        else if(a1[i] < 0. && a2[i] < 0. && a3[i] < 0.)\n        {\n            res[i] = max(max(a1[i], a2[i]), a3[i]);\n        }\n        else res[i] = 0.;\n    }\n    \n    return res;\n}\n\n// Bottom topology height at j+1/2 and j-1/2\nfloat B_jph(vec2 uv)\n{\n    return B(uv+halfCell);\n}\n\nfloat B_jmh(vec2 uv)\n{\n    return B(uv-halfCell);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > NUM_CELLS-0.5 || fragCoord.y > 1.5)\n        return;\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // water level: U.x = w\n    // discharge:   U.y = hu\n    vec2 U = texture(iChannel1, uv).xy;\n    \n    // at j+1 and j-1\n    vec2 U_jp1 = texture(iChannel1, uv + oneCell).xy;\n    vec2 U_jm1 = texture(iChannel1, uv - oneCell).xy;\n   \n    // Boundary\n    if((uv + oneCell).x > (NUM_CELLS - 0.5)/iResolution.x)\n    {\n        U_jp1 = vec2(U.x, -U.y);\n    }\n    \n    if((uv - oneCell).x < 0.)\n    {\n        U_jm1 = vec2(U.x, -U.y);\n    }\n    \n    \n    //if(iFrame == 0)\n    //{\n        //U_jp1 = U_jm1 = U = initialCondition(uv);\n    //}\n\n\n    vec2 Ux;\n    vec2 a1 = theta * (U - U_jm1) / dx;\n    vec2 a2 = (U_jp1 - U_jm1) / (2.*dx);\n    vec2 a3 = theta * (U_jp1 - U) / dx;\n    Ux = minmod(a1, a2, a3);\n    \n    // upwind at j-1/2 and downwind at j+1/2\n    vec2 U_E, U_W;\n    U_W = U - dx * 0.5 * Ux;\n    U_E = U + dx * 0.5 * Ux;\n    \n    // reconstruct water level for positivity preserving\n    // B_f: Bⱼ₊₁/₂\n    // B_b: Bⱼ₋₁/₂\n    float B_f = B_jph(uv);\n    float B_b = B_jmh(uv);\n    \n    if(U_E.x < B_f)\n    {\n        Ux.x = (B_f - U.x) / (0.5 * dx);\n        U_E.x = B_f;\n        U_W.x = 2. * U.x - B_f;\n    }\n    \n    if(U_W.x < B_b)\n    {\n        Ux.x = (U.x - B_b) / (0.5 * dx);\n        U_E.x = 2. * U.x - B_b;\n        if(U_E.x < B_f)\n            U_E.x = B_f;\n        U_W.x = B_b;\n    }\n    \n    \n    fragColor = vec4(U_W, U_E);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Saint-Venant system of Shallow Water Equation\n\nfloat reconstructSpeed(float h, float hu)\n{\n    float h4 = h*h*h*h;\n    return (sqrt(2.) * h * hu) / sqrt(h4 + max(h4, epsilon));\n}\n\nfloat localPropagationSpeedUpwind(float u_p, float u_m, float h_p, float h_m)\n{\n    return max(max(u_p + sqrt(G * h_p), u_m + sqrt(G * h_m)), 0.00001);\n}\n\nfloat localPropagationSpeedDownwind(float u_p, float u_m, float h_p, float h_m)\n{\n    return min(min(u_p - sqrt(G * h_p), u_m - sqrt(G * h_m)), -0.00001);\n}\n\nvec2 F(float hu, float h, float u)\n{\n    return vec2(hu, h * u*u + G * 0.5 * h*h);\n}\n\n// Values at j+1/2 and j-1/2\nfloat B_jph(vec2 uv)\n{\n    return B(uv+halfCell);\n}\n\nfloat B_jmh(vec2 uv)\n{\n    return B(uv-halfCell);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > NUM_CELLS-0.5 || fragCoord.y > 1.5)\n        return;\n        \n    vec2 uv = fragCoord/iResolution.xy;\n    float B_f = B_jph(uv);\n    float B_b = B_jmh(uv);\n    \n    vec4 U = texture(iChannel0, uv);\n    vec2 U_jp1_W = texture(iChannel0, uv+oneCell).xy;\n    vec2 U_jm1_E = texture(iChannel0, uv-oneCell).zw;\n    \n    // Boundary\n    if((uv + oneCell).x > (NUM_CELLS - 0.5)/iResolution.x)\n    {\n        U_jp1_W = vec2(U.z, -U.w);\n    }\n    \n    if((uv - oneCell).x < 0.)\n    {\n        U_jm1_E = vec2(U.x, -U.y);\n    }\n    \n    // Get upwind and downwind derivatives on the two edges\n    // U_fp = U⁺ⱼ₊₁/₂ = U_jp1_W\n    // U_bm = U⁻ⱼ₋₁/₂ = U_jm1_E\n    // U_fm = U⁻ⱼ₊₁/₂ = U_E\n    // U_bp = U⁺ⱼ₋₁/₂ = U_W\n    vec2 U_fp = U_jp1_W;\n    vec2 U_bm = U_jm1_E;\n    vec2 U_fm = U.zw;\n    vec2 U_bp = U.xy;\n    \n    \n    // reconstruct water depth and propagation speed\n    // h⁺⁻ⱼ₊₋₁/₂ = w⁺⁻ⱼ₊₋₁/₂ - Bⱼ₊₋₁/₂\n    float h_fp = U_fp.x - B_f;\n    float h_fm = U_fm.x - B_f;\n    float h_bm = U_bm.x - B_b;\n    float h_bp = U_bp.x - B_b;\n    \n    \n    // velocity desingularization in case of very small h\n    float u_fp = reconstructSpeed(h_fp, U_fp.y);\n    float u_fm = reconstructSpeed(h_fm, U_fm.y);\n    float u_bm = reconstructSpeed(h_bm, U_bm.y);\n    float u_bp = reconstructSpeed(h_bp, U_bp.y);\n    \n    // Local speeds of propagation\n    // the upper and lower bounds of local speeds can be estimated using\n    // the largest and smallest eigenvalues of the Jacobian ∂F/∂U\n    float a_fp = localPropagationSpeedUpwind(u_fp, u_fm, h_fp, h_fm);\n    float a_fm = localPropagationSpeedDownwind(u_fp, u_fm, h_fp, h_fm);\n    float a_bp = localPropagationSpeedUpwind(u_bp, u_bm, h_bp, h_bm);\n    float a_bm = localPropagationSpeedDownwind(u_bp, u_bm, h_bp, h_bm);\n    \n    // Recompute the discharge using reconstructed h and u\n    U_fp.y = h_fp * u_fp;\n    U_fm.y = h_fm * u_fm;\n    U_bp.y = h_bp * u_bp;\n    U_bm.y = h_bm * u_bm;\n    \n    // Flux\n    vec2 H_f, H_b;\n    vec2 F_fp, F_fm, F_bp, F_bm;\n    \n    F_fp = F(U_fp.y, h_fp, u_fp);\n    F_fm = F(U_fm.y, h_fm, u_fm);\n    F_bp = F(U_bp.y, h_bp, u_bp);\n    F_bm = F(U_bm.y, h_bm, u_bm);\n    \n    H_f = (a_fp * F_fm - a_fm * F_fp) / (a_fp - a_fm) + \n            (a_fp * a_fm) / (a_fp - a_fm) * (U_fp - U_fm);\n    H_b = (a_bp * F_bm - a_bm * F_bp) / (a_bp - a_bm) + \n            (a_bp * a_bm) / (a_bp - a_bm) * (U_bp - U_bm);\n            \n    // Source Term\n    vec2 S = vec2(0., -G * ((U_fm.x + U_bp.x) * 0.5 - (B_f+B_b)*0.5) \n                            * ((B_f-B_b) / dx));\n    \n\n    vec2 U_n = texture(iChannel1, uv).xy;\n    \n    // Initial condition\n    if(iFrame == 0)\n    {\n        U_n = initialCondition(uv);\n    }\n    \n    // Foward Eular\n    U.xy = U_n + dt * (-(H_f - H_b)/dx + S);\n                            \n    fragColor = vec4(U.xy, 0., 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}