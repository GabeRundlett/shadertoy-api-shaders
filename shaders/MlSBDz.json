{
    "Shader": {
        "info": {
            "date": "1520032222",
            "description": "Wythoff construction for convex uniform polyhedra, including snubs, duals, prisms. Gallery feature shows the range ('g' for gallery). 'n' for non-convex forms.",
            "flags": 48,
            "hasliked": 0,
            "id": "MlSBDz",
            "likes": 20,
            "name": "More Polyhedra",
            "published": 3,
            "tags": [
                "raymarch",
                "prism",
                "dual",
                "polyhedra",
                "snub"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 1055
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n\n// Created 2018 by Matthew Arcus\n\n// Derived in part from knighty's Wythoff construction DE shader:\n// https://www.shadertoy.com/view/XlX3zB, with substantial modifications\n// to handle duals, snubs, prisms and some very basic non-convex polyhedra.\n//\n// The Wythoff construction:\n// https://en.wikipedia.org/wiki/Wythoff_construction\n//\n// Schwarz triangles including the snub case:\n// https://en.wikipedia.org/wiki/File:Wythoff_construction-pqr.png\n//\n// Controls:\n// Mouse changes orientation\n// p: toggle prism, ie. use (2 2 x) triangle, default is (2 3 x)\n// 3: use (2 x 3) triangle (default is (2 x 5))\n// 4: use (2 x 4) triangle\n// \n// s: snub\n// d: dual\n// g: gallery\n// m: monochrome\n// n: non-convex (experimental)\n// o: roundness\n// r: show fundamental region\n// x: swap M and N angles\n\n// Choices here are: (2,2),(2,3),(2,4),...,(3,3),(3,4),(3,5) (and opposite)\nint M = 3; \nint N = 5;\n\nbool snubify = true;\nbool nonconvex = true;\nbool dual = false;\nbool gallery = false;\nbool swap = false;\nbool region = false;\n\nfloat roundness = 0.0;\n\nconst vec3 Face0Color = vec3(0.8,0,0);\nconst vec3 Face1Color = vec3(0.8,0.7,0);\nconst vec3 Face2Color = vec3(0.1,0,0.6);\nconst vec3 SnubColor = vec3(0,0.5,0.0);\nconst vec3 DualColor0 = vec3(0.7,0.7,0.1);\nconst vec3 DualColor1 = vec3(0.1,0.1,0.1);\n\nconst float PI\t= 3.14159265359;\nconst float TWOPI = 2.0 * PI;\n\nbool alert = false;\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\nint imod(int i, int j) {\n    return i-i/j*j;\n}\n\n// Geometric globals\n\n// C is the 3rd mirror plane\n// p is the \"triangle point\"\n// pa,pb,pc is its reflection in the 3 walls\n// P,Q,R are triangle corners\nvec3 A,B,C,C1,p,pa,pb,pc,P,Q,R;\n\n// These vec4s represent planes, xyz is a normal,\n// w is -ve distance from the origin, so we can find\n// distance of p from plane q with dot(vec4(p,1),q):\n// P4, Q4,R4 are the face planes, Q4b is relection of Q4\n// in side b.\n// T4a,T4b,T4c are the snub triangle planes for the three\n// adjacent regions.\nvec4 P4,Q4,R4,Q4b,T4a,T4b,T4c;\n\nvec3 applybary(vec3 bary, vec3 p, vec3 q, vec3 r) {\n  return bary.x*p+bary.y*q+bary.z*r;\n}\n\nvec3 reflx(vec3 p) { return vec3(-p.x,p.y,p.z); }\nvec3 refly(vec3 p) { return vec3(p.x,-p.y,p.z); }\nvec3 refla(vec3 p) { return p - 2.0*dot(p,A)*A; } // Fold about A plane\nvec3 reflb(vec3 p) { return p - 2.0*dot(p,B)*B; } // Fold about B plane\nvec3 reflc(vec3 p) { return p - 2.0*dot(p,C)*C; } // Fold about C plane\n\n// For our vec4 plane representations\nvec4 refla(vec4 p) { return vec4(refla(p.xyz),p.w); }\nvec4 reflb(vec4 p) { return vec4(reflb(p.xyz),p.w); }\nvec4 reflc(vec4 p) { return vec4(reflc(p.xyz),p.w); }\n\nvec4 makeplane(vec3 p, vec3 q, vec3 r) {\n  vec3 n = normalize(cross(q-p,r-p));\n  float k = dot(p,n);\n  // Fix so that away from origin is +ve distance\n  k *= sign(k);\n  n *= sign(k);\n  return vec4(n,-k);\n}\n\n// Find bary coords of point whose 3 reflections form an equilateral triangle.\n// Fairly standard application of 2-dimensional Newton-Raphson.\n// It's pretty silly doing this in a fragment shader - the coords only\n// depend on the triangle so we could just have a lookup table.\nvec2 eval(vec2 s) {\n  vec3 t = applybary(vec3(s,1.0-s.x-s.y),P,Q,R);\n  vec3 p0 = refla(t);\n  vec3 q0 = reflb(t);\n  vec3 r0 = reflc(t);\n  float d0 = distance(p0,q0);\n  float d1 = distance(q0,r0);\n  float d2 = distance(r0,p0);\n  return vec2(d1-d0,d2-d1);\n}\n\nmat2 jacobian(vec2 s, float eps) {\n  // f(a+eps) = f(a-eps) + 2*eps*f'(a) => f'(a) =  (f(a+eps)-f(a-eps))/(2*eps)\n  vec2 e = vec2(eps,0);\n  vec2 s0 = eval(s+e.xy);\n  vec2 s1 = eval(s-e.xy);\n  vec2 s2 = eval(s+e.yx);\n  vec2 s3 = eval(s-e.yx);\n  // df[0]/da df[0]/db\n  // df[1]/da df[1]/db\n  // Column major!\n  return mat2(s0-s1,s2-s3)/(2.0*eps);\n}\n\nvec2 refine(vec2 s) {\n  // 0 = f(a+dx) = f(a)+M(dx)\n  // f(a) = -M(dx)\n  // dx = -inv(M)(f(a))\n  mat2 m = inverse(jacobian(s,1e-6));\n  vec2 t = eval(s);\n  vec2 dx = m*t;\n  return s-dx;\n}\n\nvec3 getsnub() {\n  // Solve f(a,b,c) = g(a,b,c) = h(a,b,c)\n  // Here f,g,h are distances to 3 sides of triangle. a,b,c are bary coords\n  // In fact, we can set a+b+c = 1, so only 2 variables really.\n  // Have a vector quantity: [f-g,h-g], which we want to set to [0,0].\n  // f(x+dx) = f(x) + F(dx)\n  // ie. f(x) + F(dx) = 0 => dx = -inv(F)(f(x))\n  // We need a decent starting point, here the middle of the triangle\n  vec2 s = vec2(0.333,0.333);\n  // A few iterations is enough\n  for (int i = 0; i < 4; i++) {\n    s = refine(s);\n  }\n  //assert(length(eval(s)) < 1e-3); // Check we have a solution\n  vec3 res = vec3(s,1.0-s.x-s.y);\n  return res;\n}\n\nvoid init(vec3 tri) {\n  if (swap) {\n    int t = M; M = N; N = t;\n  }\n  // Setup folding planes and vertex\n  float a = cos(PI/float(M));\n  float b = cos(PI/float(N));\n  float c = sqrt(max(1e-2,1.0 - a*a - b*b));\n  A = vec3(1,0,0);\n  B = vec3(0,1,0);\n  C = vec3(-a,-b,c);\n  //if (nonconvex) A = reflx(C); \n  if (nonconvex) B = refly(C); // One of many extended triangles\n  P = cross(B,C); //vec3(0,-c,b);\n  Q = cross(C,A); //vec3(c,0,a);\n  R = cross(A,B); //vec3(0,c,b);\n  // Weights to convert trilinear (distance from region planes) to barycentric\n  // (weighted sum of triangle vertices).\n  vec3 tri2bary = vec3(length(P),length(Q),length(R));\n  P = normalize(P);\n  Q = normalize(Q);\n  R = normalize(R);\n  if (snubify) {\n    // For snubs we need to use special values to ensure that the\n    // snub triangles are equilateral (for trilinear coords (1,1,1)).\n    tri2bary = getsnub();\n  }\n  p = applybary(tri2bary*tri,P,Q,R);\n  p = normalize(p);\n  assert(dot(p,A) > -1e-3);\n  assert(dot(p,B) > -1e-3);\n  assert(dot(p,C) > -1e-3);\n  P4 = vec4(P,-dot(p,P));\n  Q4 = vec4(Q,-dot(p,Q));\n  R4 = vec4(R,-dot(p,R));\n\n  pa = refla(p);\n  pb = reflb(p);\n  pc = reflc(p);\n  if (snubify) {\n    Q4b = reflb(Q4);\n    // Now work out the 3 corners of the snub triangles\n    vec4 T4 = makeplane(refla(p),reflb(p),reflc(p));\n    // The snub triangles can coincide with the normal faces\n    // so move them out slightly to avoid clashes.\n    T4.w += 0.001;\n    T4a = refla(T4);\n    T4b = reflb(T4);\n    T4c = reflc(T4);\n  }\n}\n\n// Could use an ivec3 and count different types of flip\nvec3 fold(vec3 pos, out int flips) {\n  // We want to know the number of actual reflections made\n  // so keep track of that in flips.\n  flips = 0;\n  // 5 iterations is enough to get up to (2 3 5) or (2 2 10)\n  for (int i = 0; i < 5; i++) {\n    float k;\n    k = dot(pos,A);\n    flips += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*A;\n    k = dot(pos,B);\n    flips += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*B;\n    k = dot(pos,C);\n    flips += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*C;\n  }\n  return pos;\n}\n\nfloat scene(vec3 pos) {\n  vec4 pos4 = vec4(pos,1);\n  // Distance from 3 planes\n  float d = -1e8;\n  d = max(d,dot(pos4,P4));\n  d = max(d,dot(pos4,Q4));\n  d = max(d,dot(pos4,R4));\n  if (!snubify) return d;\n  // Distance from reflection of Q\n  d = max(d,dot(pos4,Q4b));\n  // Distance from snub triangles\n  d = max(d,dot(pos4,T4a));\n  d = max(d,dot(pos4,T4b));\n  d = max(d,dot(pos4,T4c));\n  return d;\n}\n\nfloat colorscene(vec3 pos, inout int col) {\n  vec4 pos4 = vec4(pos,1);\n  // Distance from 3 planes\n  float d0, d = -1e8;\n  d0 = dot(pos4,P4);\n  if (d0 > d) { d = d0; col = 0; }\n  d0 = dot(pos4,Q4);\n  if (d0 > d) { d = d0; col = 1; }\n  d0 = dot(pos4,R4);\n  if (d0 > d) { d = d0; col = 2; }\n  if (!snubify) return d;\n  d0 = dot(pos4,Q4b);\n  if (d0 > d) { d = d0; col = 1; }\n  d0 = max(dot(pos4,T4a),\n           max(dot(pos4,T4b),\n               dot(pos4,T4c)));\n  if (d0 > d) { d = d0; col = 3; }\n  return d;\n}\n\nfloat dscene(vec3 pos) {\n  if (!snubify) {\n    return dot(pos,p)-1.0; // Nice 'n' easy, p defines surface\n  } else {\n    // Almost as easy, reflect triangle point in each side,\n    // then use to define surface.\n    float d0 = dot(pos,pa)-1.0;\n    float d1 = dot(pos,pb)-1.0;\n    float d2 = dot(pos,pc)-1.0;\n    float d = d0;\n    d = max(d,d1);\n    d = max(d,d2);\n    return d;\n  }\n}\n\nfloat d2planes(vec3 pos) {\n  float d = 1e8;\n  if (dual) {\n    d = min(d,dscene(pos));\n    if (nonconvex) d = min(d,dscene(refly(pos)));\n  } else {\n    d = min(d,scene(pos));\n    if (nonconvex) d = min(d,scene(refly(pos)));\n  }\n  return d;\n}\n\nbool monochrome = true;\n\nfloat colorplanes(vec3 pos, bool parity, out int col) {\n  float d;\n  if (dual) {\n    col = (!snubify && !nonconvex && parity && !monochrome) ? 5 : 4;\n    d = d2planes(pos);\n  } else {\n    col = -1;\n    float d = colorscene(pos,col);\n    if (nonconvex) {\n      int col0;\n      float d0 = colorscene(refly(pos),col0);\n      if (d0 < d - 1e-4) {\n        d = d0;\n        col = col0;\n      }\n    }\n  }\n  if (monochrome) col = 4;\n  return d;\n}\n\nfloat polyhedron(vec3 pos) {\n  int flips;\n  vec3 pos0 = pos;\n  pos = fold(pos,flips);\n  if (snubify && imod(flips,2) == 1) pos = refly(pos);\n  bool parity = imod(flips,2) == 1;\n  float d = 1e8;\n  d = min(d,d2planes(pos));\n  if (region) {\n    d = max(d,dot(pos0,A));\n    d = max(d,dot(pos0,B));\n    d = max(d,dot(pos0,C));\n  }\n  return d;\n}\n\nvec3 getColor(vec3 pos){\n  vec3 pos0 = pos;\n  int flips;\n  pos = fold(pos,flips);\n  bool parity = imod(flips,2) == 1;\n  if (snubify && parity) pos = refly(pos);\n  int col;\n  float d = colorplanes(pos,parity,col);\n  assert(col >= 0);\n  if (region) {\n    float d0 = d;\n    d = max(d,dot(pos0,A));\n    d = max(d,dot(pos0,B));\n    d = max(d,dot(pos0,C));\n    if (d != d0) col = 6;\n  }\n  if (col == 0) return Face0Color;\n  if (col == 1) return Face1Color;\n  if (col == 2) return Face2Color;\n  if (col == 3) return SnubColor;\n  if (col == 4) return DualColor0;\n  if (col == 5) return DualColor1;\n  if (col == 6) return vec3(1);\n  assert(false);\n  return vec3(1);\n}\n\n//-------------------------------------------------\n//From https://www.shadertoy.com/view/XtXGRS#\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat map(in vec3 p) {\n  return mix(polyhedron(p),length(p)-1.0,roundness); // just for fun\n}\n\nvec3 calcNormal(in vec3 p) {\n  const vec2 e = vec2(0.001, 0.0);\n  return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                        map(p + e.yxy) - map(p - e.yxy),\n                        map(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  const float maxd = 5.0;\n  const float precis = 0.001;\n  float h = precis * 2.0;\n  float t = 0.0;\n  float res = -1.0;\n  for(int i = 0; i < 64+min(int(iFrame),0); i++) {\n      if (h < precis || t > maxd) break;\n      h = map(ro + rd * t);\n      t += h;\n    }\n  if (t < maxd) res = t;\n  return res;\n}\n\nvec3 transform(in vec3 p) {\n  // Rotations are weird\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  p.yz = rotate(p.yz,iTime * 0.125);\n  p.zx = rotate(p.zx,iTime * 0.2);\n  return p;\n}\n\n#if __VERSION__ < 300\nvec3 gettri(float t) {\n    return vec3(1,1,1);\n}\n#else\nbool keypress(int code) {\n    return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_X = 88;\n\nvec3 circuit[] = vec3[]\n  (vec3(1,1,1),vec3(1,1,1),vec3(1,0,0),vec3(1,0,0),\n   vec3(1,1,0),vec3(1,1,0),vec3(0,1,0),vec3(0,1,0),\n   vec3(0,1,1),vec3(0,1,1),vec3(0,0,1),vec3(0,0,1),\n   vec3(1,0,1),vec3(1,0,1),vec3(1,0,0),vec3(1,0,0),\n\n   vec3(1,1,1),vec3(1,1,0),vec3(1,1,1),vec3(0,1,0),\n   vec3(1,1,1),vec3(0,1,1),vec3(1,1,1),vec3(0,0,1),\n   vec3(1,1,1),vec3(1,0,1),\n\n   vec3(1,1,1),vec3(1,0,0),vec3(1,1,0),vec3(0,1,0),\n   vec3(0,1,1),vec3(0,0,1),vec3(1,0,1),vec3(1,0,0));\n\nconst int nsteps = circuit.length();\n\nvec3 gettri(float t) {\n  int i = int(floor(t))%nsteps;\n  return mix(circuit[i],circuit[(i+1)%nsteps],mod(t,1.0));\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n#if __VERSION__ < 300\n  gallery = true;\n#else\n  gallery = !keypress(CHAR_G);\n  dual = keypress(CHAR_D);\n  snubify = !keypress(CHAR_S);\n  nonconvex = keypress(CHAR_N);\n  swap = keypress(CHAR_X);\n  region = keypress(CHAR_R);\n  roundness = keypress(CHAR_O) ? 0.5 : 0.0;\n  M = keypress(CHAR_P) ? 2 : 3;\n  N = keypress(CHAR_0+3) ? 3 : \n    keypress(CHAR_0+4) ? 4 : 5;\n#endif\n  monochrome = keypress(CHAR_M);\n  vec2 p = fragCoord.xy / iResolution.xy;\n  p.y = 1.0-p.y;\n  // Now both coords are in (0,1)\n  if (gallery) {\n    p *= vec2(4.0);\n    snubify =  p.y > 2.0;\n    dual =  mod(p.y,2.0) > 1.0;\n    if (p.x < 1.0) { M = 2, N = 5; }\n    else if (p.x < 2.0) { M = 3, N = 3; }\n    else if (p.x < 3.0) { M = 3, N = 4; }\n    else if (p.x < 4.0) { M = 3, N = 5; }\n    p = mod(p,1.0);\n  }\n  p = 2.0*p-1.0;\n  p *= iResolution.xy/iResolution.y;\n  p *= 3.0;\n  vec3 col = vec3(0.3 + p.y * 0.1);\n  vec3 ro = vec3(0.0, 0.0, -2.5);\n  vec3 rd = normalize(vec3(p, 6.0));\n  vec3 li = normalize(vec3(0.5, 0.8, -3.0));\n  ro = transform(ro);\n  rd = transform(rd);\n  li = transform(li);\n  vec3 tri = gettri(0.5*iTime);\n  init(tri);\n  float t = march(ro, rd);\n  if (t > -0.001) {\n    vec3 pos = ro + t * rd;\n    vec3 n = calcNormal(pos);\n    float diffuse = clamp(dot(n, li), 0.0, 1.0);\n    col = getColor(pos) * diffuse;\n    //if (isnan(col.x) || isnan(col.y) || isnan(col.z)) col = vec3(1,0,0);\n    col = pow(col, vec3(0.4545));\n  }\n  if (alert) col = vec3(1,0,0);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}