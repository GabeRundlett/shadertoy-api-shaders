{
    "Shader": {
        "info": {
            "date": "1719264423",
            "description": "LMS cone activation functions\nGaussian\nInverse Gaussian\nBarlett (is it's own inverse)\nConnes\nMore functions: https://mathworld.wolfram.com/ApodizationFunction.html",
            "flags": 0,
            "hasliked": 0,
            "id": "M33Xzj",
            "likes": 2,
            "name": "spectral activation functions",
            "published": 3,
            "tags": [
                "rainbow",
                "lms",
                "spectral"
            ],
            "usePreview": 0,
            "username": "jafam",
            "viewed": 102
        },
        "renderpass": [
            {
                "code": "//Spectra from normalized cone response functions\n//More info https://mathworld.wolfram.com/ApodizationFunction.html\n//ToDo: Compare with oklab predicted lightness\n//ToDo: Add gamma - gauss function can optimize pow() as exp2(\n\n//wavelengths in nm\nconst float uv = 400.0; //\"ultraviolet\"\nconst float ir = 600.0; //\"infrarred\"\n\nvec3 barlett(vec3 x) {\n    return 1.0-clamp(x, 0.0, 1.0);\n}\nvec3 connes(vec3 x) {\n    vec3 t = barlett(x*x);\n    return t*t;\n}\nvec3 invconnes(vec3 x) {\n    return barlett(sqrt(abs(x)));\n}\nvec3 gauss(vec3 x){\n    //base 2 and ignore variance for performance\n    return exp2(-x*x);\n}\nvec3 invgauss(vec3 x){\n    return sqrt(-log2(abs(x)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 gp = fragCoord/iResolution.xy;\n    vec2 grid = vec2(1.0,4.0);\n    vec2 p = fract(grid*gp);\n    float lambda = mix(ir, uv, p.x);\n    vec3 peak = vec3(550.0, 500.0, 437.5+cos(0.5*iTime)*12.5); //ToDo: tune\n    const vec3 spread = vec3(75.0); //ToDo: tune\n    vec3 hue = (lambda-peak)/spread;\n    vec3 col;\n    if (gp.y > 0.75)\n        col = gauss(hue);\n    else if (gp.y > 0.5)\n        col = invgauss(hue);\n    else if (gp.y > 0.25)\n        col = barlett(abs(hue));\n    else\n        col = connes(hue);\n    col = clamp(2.0*p.y,0.0,1.0)*col;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}