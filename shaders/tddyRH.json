{
    "Shader": {
        "info": {
            "date": "1600423394",
            "description": "Apparent intensity bands caused by abrupt surface curvature changes",
            "flags": 0,
            "hasliked": 0,
            "id": "tddyRH",
            "likes": 4,
            "name": "Mach Band Test",
            "published": 3,
            "tags": [
                "vision",
                "artifact"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "// \"Mach Band Test\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Curvature discontinuity causes perceived luminance discontinuity even though surface is\n  smooth with a continuously varying normal.\n\n  From left: raytraced quadratic (exact normal) and raymarched quadratic (i.e. capsules -\n  expect same result), raymarched higher order functions with continuous curvature (no bands).\n*/\n\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir;\nfloat tCur, dstFar;\nconst float pi = 3.1415927;\n\nvec4 CapsHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  vec3 s, vn;\n  float dMin, d, a, b, w;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - rad * rad);\n  if (w > 0. && a > 0.) {\n    d = - (b + sqrt (w)) / a;\n    s = ro + d * rd;\n    if (d > 0. && abs (s.z) < len) {\n      dMin = d;\n      vn = normalize (vec3 (s.xy, 0.));\n    } else {\n      ro.z -= len * sign (s.z);\n      b = dot (rd, ro);\n      w = b * b - (dot (ro, ro) - rad * rad);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0.) {\n          dMin = d;\n          vn = normalize (ro + d * rd);\n        }\n      }\n    }\n  }\n  return vec4 (dMin, vn);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  p.z -= clamp (p.z, - h, h);\n  return length (p) - r;\n}\n\nfloat PrCaps3Df (vec3 p, float r, float h)\n{\n  vec2 s;\n  p.z -= clamp (p.z, - h, h);\n  s = vec2 (length (p.xy), abs (p.z));\n  return pow (dot (s * s, s), 1./3.) - r;\n}\n\nfloat PrCaps4Df (vec3 p, float r, float h)\n{\n  p.z -= clamp (p.z, - h, h);\n  return sqrt (length (vec2 (dot (p.xy, p.xy), p.z * p.z))) - r;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin;\n  dMin = dstFar;\n  q = p;\n  q.x -= -1.25;\n  dMin = min (dMin, PrCapsDf (q.xzy, 1., 1.));\n  q = p;\n  q.x -= 1.25;\n  dMin = min (dMin, PrCaps3Df (q.xzy, 1., 1.));\n  q = p;\n  q.x -= 3.75;\n  dMin = min (dMin, PrCaps4Df (q.xzy, 1., 1.));\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 dc4;\n  vec3 col, vn;\n  float dstObj;\n  dc4 = CapsHit ((ro - vec3 (-3.75, 0., 0.)).xzy, rd.xzy, 1., 1.);\n  dstObj = ObjRay (ro, rd);\n  if (min (dc4.x, dstObj) < dstFar) {\n    if (dc4.x < dstObj) vn = (dc4.yzw).xzy;\n    else vn = ObjNf (ro + dstObj * rd);\n    col = vec3 (0.2, 0.8, 0.8) * (0.2 + 0.2 * max (- dot (vn, ltDir), 0.) +\n       0.8 * max (dot (vn, ltDir), 0.));\n  } else {\n    col = vec3 (0.2);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.15 * pi * sin (0.02 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -15.);\n  zmFac = 4.5;\n  dstFar = 40.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}