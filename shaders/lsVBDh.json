{
    "Shader": {
        "info": {
            "date": "1528724876",
            "description": "Playing around with colouring and trying to create a sense of place. Not sure if I actually manage to achieve that, but there are blobs. Use mouse to look around, or maybe VR works? I have no idea.",
            "flags": 1,
            "hasliked": 0,
            "id": "lsVBDh",
            "likes": 13,
            "name": "Rising stones",
            "published": 3,
            "tags": [
                "blobs"
            ],
            "usePreview": 0,
            "username": "WAHa_06x36",
            "viewed": 802
        },
        "renderpass": [
            {
                "code": "vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n\t\n// Mix final noise value\nvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    vec4 m2 = m * m;\n    vec4 m4 = m2 * m2;\n\n    vec4 pdotx = vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3));\n\n    vec4 temp = m2 * m * pdotx;\n    vec3 grad = -8.0 * (temp.x * x0 + temp.y * x1 + temp.z * x2 + temp.w * x3);\n    grad += m4.x * p0 + m4.y * p1 + m4.z * p2 + m4.w * p3;\n \n    return 42.0 * vec4(grad, dot(m4, pdotx));\n}\n\nvec3 getSkyColor(vec3 e) {\n\tfloat y = e.y;\n\tvec4 r = snoise(150.0 * e);\n\ty+=r.w*0.01-r.y*0.005;\n\ty = atan(2.0*y);\n\treturn mix(vec3(1.0,1.0,0.7), vec3(0.5,0.7,0.4), clamp(y + 1.0, 0.0, 1.0))+\n\t\tmix(vec3(0.0), -vec3(0.5,0.7,0.4), clamp(y, 0.0, 1.0));\n}\n\nmat3 fromEuler(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x), cos(ang.x));\n\tvec2 a2 = vec2(sin(ang.y), cos(ang.y));\n\tvec2 a3 = vec2(sin(ang.z), cos(ang.z));\n\treturn mat3(\n\t\tvec3(a1.y * a3.y + a1.x * a2.x * a3.x, a1.y * a2.x * a3.x + a3.y * a1.x, -a2.y * a3.x),\n\t\tvec3(-a2.y * a1.x, a1.y * a2.y, a2.x),\n\t\tvec3(a3.y * a1.x * a2.x + a1.y * a3.x, a1.x * a3.x - a1.y * a3.y * a2.x, a2.y * a3.y)\n\t);\n}\n\nfloat distfunc(vec3 p) {\n\treturn (snoise(p + vec3(0.0, -iTime * 0.1, 0.0)).w + length(p) * 0.3) * 0.3;\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 pos, in vec3 dir) {\n\tpos.z -= 4.0;\n    \n    vec3 sky = getSkyColor(dir);\n\n\tvec3 colour = pow(clamp(sky, 0.0, 1.0),vec3(0.75));\n\t\n\tfor (int i = 0; i< 256; i++) {\n\t\tfloat dist = distfunc(pos);\n\t\tif (dist < 0.001) {\n\t\t\tfloat e = 0.01;\n\t\t\tvec3 n = normalize(vec3(dist - distfunc(pos - vec3(e, 0, 0)), dist - distfunc(pos - vec3(0, e, 0)), dist - distfunc(pos - vec3(0, 0, e))));\n\t\t\tvec4 t = snoise(70.0 * (pos + vec3(0.0, -iTime * 0.1, 0.0)));\n\t\t\tcolour = vec3(1.0 - 0.75 * float(i) / 256.0) * (1.0 + 0.3 * -n.y + 0.005 * t.y) * vec3(0.9, 1.0, 0.8);\n\t\t\tbreak;\n\t\t}\n\t\tif (length(pos) > 30.0) break;\n\t\tpos += dir * dist;\n\t}\n\t\n\tfragColor = vec4(colour, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n \tvec2 mouse = iMouse.xy == vec2(0.0) ? vec2(0.5) : iMouse.xy / iResolution.xy;\n    \n\tvec3 ang = vec3(0.0, -(mouse.y - 0.5) * 3.14159265 * 1.0, mouse.x * 3.1415926535 * 2.0);\n\n    vec3 dir = normalize(vec3(p.xy, -2.0 + length(p) * 0.15)) * fromEuler(ang);\n\n    mainVR(fragColor, fragCoord, vec3(0.0), dir);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}