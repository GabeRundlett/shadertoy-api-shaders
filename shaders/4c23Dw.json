{
    "Shader": {
        "info": {
            "date": "1704297850",
            "description": "Animation of a problem I was working on.",
            "flags": 32,
            "hasliked": 0,
            "id": "4c23Dw",
            "likes": 19,
            "name": "Three Spring System",
            "published": 3,
            "tags": [
                "physics",
                "system",
                "springs",
                "differentialeqn"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "#define paint(sdf, color) fragColor.rgb = mix(fragColor.rgb, color, smoothstep(unit, 0.0, sdf))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * scale;\n    float unit = 2.0 * scale / iResolution.y;\n\n    SpringSystem sys;\n    solveSpringSystem(\n        initialPos1, initialPos2, initialPos3,\n        initialVel1, initialVel2, initialVel3,\n        springiness1, springiness2, springiness3,\n        sys\n    );\n\n    vec2 a, b, c;\n    springState(sys, iTime, a, b, c);\n    vec2 center = sys.c1 + sys.c2 * iTime;\n    a -= center, b -= center, c -= center;\n\n    vec2 uv1 = axisAlign(uv - a, normalize(b - a));\n    if (uv1.x > 0.0 && uv1.x < length(b - a)) paint(udTriangleWave(uv1, 8.0 / length(b - a), 0.5), vec3(1.0));\n    vec2 uv2 = axisAlign(uv - b, normalize(c - b));\n    if (uv2.x > 0.0 && uv2.x < length(c - b)) paint(udTriangleWave(uv2, 8.0 / length(c - b), 0.5), vec3(1.0));\n    vec2 uv3 = axisAlign(uv - c, normalize(a - c));\n    if (uv3.x > 0.0 && uv3.x < length(a - c)) paint(udTriangleWave(uv3, 8.0 / length(a - c), 0.5), vec3(1.0));\n\n    paint(length(uv - a) - 0.3, vec3(1.0, 0.0, 0.0));\n    paint(length(uv - b) - 0.3, vec3(0.0, 1.0, 0.0));\n    paint(length(uv - c) - 0.3, vec3(0.0, 0.0, 1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define paint(sdf, color) fragColor.rgb = max(fragColor.rgb, color * smoothstep(unit, 0.0, sdf))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * scale;\n    float unit = 2.0 * scale / iResolution.y;\n\n    SpringSystem sys;\n    solveSpringSystem(\n        initialPos1, initialPos2, initialPos3,\n        initialVel1, initialVel2, initialVel3,\n        springiness1, springiness2, springiness3,\n        sys\n    );\n\n    vec2 st = fragCoord / iResolution.xy;\n    vec2 movement = sys.c2 * iTimeDelta / scale;\n    movement.x *= iResolution.y / iResolution.x;\n    fragColor = texture(iChannel0, st + movement);\n\n    vec2 ap, bp, cp;\n    springState(sys, iTime - iTimeDelta, ap, bp, cp);\n\n    vec2 ac, bc, cc;\n    springState(sys, iTime, ac, bc, cc);\n\n    vec2 center = sys.c1 + sys.c2 * iTime;\n    ap -= center, bp -= center, cp -= center;\n    ac -= center, bc -= center, cc -= center;\n\n    paint(sdLine(uv, ap, ac), vec3(1.0));\n    paint(sdLine(uv, bp, bc), vec3(1.0));\n    paint(sdLine(uv, cp, cc), vec3(1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float scale = 10.0;\n\n/*const vec2 initialPos1 = vec2(2.0, 0.0), initialVel1 = vec2(0.0, 2.0);\nconst vec2 initialPos2 = vec2(-1.0, 1.732), initialVel2 = vec2(-1.732, -1.0);\nconst vec2 initialPos3 = vec2(-1.0, -1.732), initialVel3 = vec2(1.732, -1.0);\nconst float springiness1 = 0.1;\nconst float springiness2 = 0.1;\nconst float springiness3 = 0.1;*/\n\nconst vec2 initialPos1 = vec2(-2.0, -2.0), initialVel1 = vec2(1.0, -0.5);\nconst vec2 initialPos2 = vec2(2.0, -2.0), initialVel2 = vec2(1.0, 1.5);\nconst vec2 initialPos3 = vec2(0.0, 2.0), initialVel3 = vec2(-1.0, 0.5);\nconst float springiness1 = 3.0;\nconst float springiness2 = 1.0;\nconst float springiness3 = 2.0;\n\nstruct SpringSystem {\n    bool equalSpringiness;\n    float m0, m1;\n    float P13, P12, P23;\n    float Q13, Q12, Q23;\n    vec2 c1, c2, c3, c4, c5, c6;\n};\n\n// a'' = k1 * (b - a) + k3 * (c - a)\n// b'' = k1 * (a - b) + k2 * (c - b)\n// c'' = k2 * (b - c) + k3 * (a - c)\n\n#define fequals(a, b) (abs((a) - (b)) < 1e-6)\nvoid solveSpringSystem(in vec2 a0, in vec2 b0, in vec2 c0, in vec2 u0, in vec2 v0, in vec2 w0, in float k1, in float k2, in float k3, inout SpringSystem sys) {\n    if (fequals(k1, k2) && fequals(k2, k3)) {\n        sys.equalSpringiness = true;\n        sys.m0 = sqrt(k1 + k2 + k3);\n        sys.c1 = (a0 + b0 + c0) / 3.0;\n        sys.c2 = (u0 + v0 + w0) / 3.0;\n        sys.c3 = a0 - sys.c1, sys.c4 = (u0 - sys.c2) / sys.m0;\n        sys.c5 = b0 - sys.c1, sys.c6 = (v0 - sys.c2) / sys.m0;\n    } else {\n        sys.equalSpringiness = false;\n        float T = k1 + k2 + k3;\n        float K = k1 * k2 + (k1 + k2) * k3;\n        float d = sqrt(T * T - 3.0 * K);\n        float m0m0 = T + d, m1m1 = T - d;\n        sys.m0 = sqrt(m0m0), sys.m1 = sqrt(m1m1);\n\n        float p1 = K - k1 * m0m0, p2 = K - k2 * m0m0, p3 = K - k3 * m0m0;\n        sys.P13 = p1 * p3, sys.P12 = p1 * p2, sys.P23 = p2 * p3;\n\n        float q1 = K - k1 * m1m1, q2 = K - k2 * m1m1, q3 = K - k3 * m1m1;\n        sys.Q13 = q1 * q3, sys.Q12 = q1 * q2, sys.Q23 = q2 * q3;\n\n        vec2 b0a0 = b0 - a0, c0a0 = c0 - a0;\n        vec2 v0u0 = v0 - u0, w0u0 = w0 - u0;\n        p1 = sys.P12 - sys.P13, p2 = sys.P23 - sys.P13;\n        q1 = sys.Q12 - sys.Q13, q2 = sys.Q23 - sys.Q13;\n        float det = p1 * q2 - p2 * q1;\n\n        sys.c3 = (q2 * b0a0 - q1 * c0a0) / det;\n        sys.c4 = (q2 * v0u0 - q1 * w0u0) / det;\n        sys.c5 = (p1 * c0a0 - p2 * b0a0) / det;\n        sys.c6 = (p1 * w0u0 - p2 * v0u0) / det;\n        sys.c1 = a0 - sys.P13 * sys.c3 - sys.Q13 * sys.c5;\n        sys.c2 = u0 - sys.P13 * sys.c4 - sys.Q13 * sys.c6;\n        sys.c4 /= sys.m0;\n        sys.c6 /= sys.m1;\n    }\n}\n\nvoid springState(in SpringSystem sys, in float t, out vec2 a, out vec2 b, out vec2 c) {\n    if (sys.equalSpringiness) {\n        float x = sys.m0 * t;\n        float co = cos(x), si = sin(x);\n        vec2 l = sys.c1 + sys.c2 * t;\n        vec2 u = sys.c3 * co + sys.c4 * si;\n        vec2 v = sys.c5 * co + sys.c6 * si;\n        a = l + u;\n        b = l + v;\n        c = l - u - v;\n    } else {\n        vec2 l = sys.c1 + sys.c2 * t;\n        float x0 = sys.m0 * t, x1 = sys.m1 * t;\n        vec2 r0 = sys.c3 * cos(x0) + sys.c4 * sin(x0);\n        vec2 r1 = sys.c5 * cos(x1) + sys.c6 * sin(x1);\n        a = l + sys.P13 * r0 + sys.Q13 * r1;\n        b = l + sys.P12 * r0 + sys.Q12 * r1;\n        c = l + sys.P23 * r0 + sys.Q23 * r1;\n    }\n}\n\nvec2 axisAlign(in vec2 p, in vec2 up) {\n    return mat2(up.x, -up.y, up.yx) * p;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0.0, 1.0));\n}\n\nfloat udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}