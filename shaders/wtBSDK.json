{
    "Shader": {
        "info": {
            "date": "1567135982",
            "description": "an sss dog from a beginner",
            "flags": 0,
            "hasliked": 0,
            "id": "wtBSDK",
            "likes": 3,
            "name": "dog test",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "crossbow",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "//from iq\nfloat g_time;\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nmat2 rotmat(float a)\n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\nfloat sdf(vec3 p,float time){\n    float pi=3.1415926;\n   float d=1e4;\n   d=smin(length(p-vec3(-.75,0.,-.1))-.4,length(p-vec3(.75,0.,-.1))-.5,2.);\n    d=smin(d,length(p-vec3(0,0.4,-.1))-.9,1.6);\n    //NOSE\n    d=smin(d,length(p-vec3(0,0.4,1.0))-.5,.3);\n    d=smin(d,length(p-vec3(0,0.35,2.0))-.2,1.2);\n    //d=smin(d,length(p-vec3(0,0.35,3.0))-.2,1.2);\n    //DOG EARS\n    d=smin(d,length(p-vec3(.8,1.3,-0.5))-.3,0.4);\n    d=smin(d,length(p-vec3(1.0,1.6,-0.5))-.05,0.4);\n    d=smin(d,length(p-vec3(-.8,1.3,-0.5))-.3,0.4);\n    d=smin(d,length(p-vec3(-1.0,1.6,-0.5))-.05,0.4);\n    //neck\n    vec3 pneck=p;\n    pneck.yz*=rotmat(pi/8.0);\n    d=smin(d,distance(vec3(0.,clamp(pneck.y,-3.0,-1.1),0.),pneck.xyz)-0.95,.4);\n    //front chest\n    d=smin(d,length(p-vec3(.0,-3.0,-1.0))-1.2,0.4);\n    //front legs\n    d=smin(d,distance(vec3(0.55,clamp(p.y,-5.0,-3.1),-1.0),p.xyz)-0.4,.4);\n    d=smin(d,distance(vec3(-0.55,clamp(p.y,-5.0,-3.1),-1.0),p.xyz)-0.4,.4);\n    //belly\n    d=smin(d,distance(vec3(0.,-3.0,clamp(p.z,-3.5,-1.0)),p.xyz)-1.0,.4);\n    d=smin(d,length(p-vec3(0,-3.5,-2.7))-1.2,0.4);\n    //backleg\n    d=smin(d,length(p-vec3(.4,-3.3,-4.0))-.8,0.4);\n    d=smin(d,length(p-vec3(-.4,-3.3,-4.0))-.8,0.4);\n    d=smin(d,length(p-vec3(.6,-4.2,-4.2))-.6,0.7);\n    d=smin(d,length(p-vec3(-.6,-4.2,-4.2))-.6,0.7);\n    //leg\n    vec3 plleg=p;\n    plleg.yz*=rotmat(-pi/12.0);\n    d=smin(d,distance(vec3(0.55,clamp(plleg.y,-6.0,-5.0),-2.3),plleg.xyz)-0.35,.4);\n    d=smin(d,distance(vec3(-0.55,clamp(plleg.y,-6.0,-5.0),-2.3),plleg.xyz)-0.35,.4);\n    d=smin(d,distance(vec3(0.55,clamp(plleg.y,-5.0,-3.6),-5.6),plleg.xyz)-0.35,.4);\n    d=smin(d,distance(vec3(-0.55,clamp(plleg.y,-5.0,-3.6),-5.6),plleg.xyz)-0.35,.4);\n    //tail\n    vec3 plt1=p;\n    plt1.y+=3.3;\n    plt1.z+=2.3;\n    plt1.yz*=rotmat(sin(time*10.0)*pi/12.0);\n    plt1.y-=3.3;\n    plt1.z-=2.3;\n    vec3 plt2=p;\n    plt2.y+=3.3;\n    plt2.z+=5.3;\n    plt2.yz*=rotmat(sin(time*10.0)*pi/12.0);\n    plt2.y-=3.3;\n    plt2.z-=5.3;\n    d=smin(d,length(p-vec3(-.0,-3.3,-5.0))-.4,0.4);\n    d=smin(d,length(plt1-vec3(-.0,-3.3,-6.0))-1.1,0.4);\n    d=smin(d,length(plt2-vec3(-.0,-3.3,-7.5))-.1,1.6);\n    return d;\n}\nfloat raymarch(vec3 ro,vec3 rd,float begin,float end,float time){\n    float d= begin;\n    for (int i = 0; i < 255; i++) {\n        float dist = sdf(ro+rd*d,time);\n        if (dist < 0.001) {\n\t\t\treturn d;\n        }\n        d += dist;\n        if (d >= end) {\n            return end;\n        }\n    }\n    return end;\n}\nvec3 Ray( float zoom, in vec2 fragCoord )\n{\n\treturn vec3( fragCoord.xy-iResolution.xy*.5, iResolution.x*zoom );\n}\nvec3 RY(vec3 pos, float angle) \n{\n\treturn vec3(\n        pos.x * cos(angle) - pos.z * sin(angle),\n        pos.y,\n        pos.x * sin(angle) + pos.z * cos(angle)\n    );\n}\nfloat rand(float i){\n    return fract(sin(i*18.0)*12345.987);\n}\n//from iq\nfloat CalcAO(vec3 p, vec3 n)\n{\n   float r = 0.0;\n   float w = 1.0;\n   for (int i=1; i<=6; i++)\n   {\n      float d0 = float(i) * 0.2;\n      r += w * (d0 - sdf(p + n * d0,g_time));\n      w *= 0.4;\n   }\n   return 1.0 - clamp(r,0.0,1.0);\n}\n//from iq\nfloat CalcSSS(vec3 ro, vec3 rd,vec3 nor)\n{\n    vec4 kk;\n\tfloat occ = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.002 + 0.11*float(i)/7.0;\n        vec3 dir = normalize( sin( float(i)*13.0 + vec3(0.0,2.1,4.2) ) );\n        dir *= sign(dot(dir,nor));\n        occ += (h-sdf(ro-h*dir,g_time));\n    }\n    occ = clamp( 1.0 - 11.0*occ/8.0, 0.0, 1.0 );    \n    return occ*occ;\n}\n\n\nvec3 GetNormal(vec3 pos)\n{\n   vec3 n;\n   vec2 delta=vec2(0.001,0);\n   n.x = sdf( pos + delta.xyy,g_time ) - sdf( pos - delta.xyy,g_time );\n   n.y = sdf( pos + delta.yxy,g_time ) - sdf( pos - delta.yxy,g_time );\n   n.z = sdf( pos + delta.yyx ,g_time) - sdf( pos - delta.yyx ,g_time);\n   \n   return normalize(n);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat t=iTime;\n    g_time=iTime;\n\tvec3 rd=Ray(0.3,fragCoord);\n\trd=normalize(rd);\n    vec3 ro=vec3(0.0,0.0,-8.0);\n\tro=RY(ro,t/3.0);\n\trd=RY(rd,t/3.0);\n\tfloat dt=raymarch(ro,rd,0.0,100.0,t);\n\tif(dt>100.0-0.001){\n\t\tfragColor=vec4(0.0,0.0,0.0,0.0);\n\t\treturn;\n\t}\n    vec3 norm=GetNormal(ro+dt*rd);\n\tvec3 light = vec3(1) * max(0.0, dot(norm, vec3(0.2,0.1,0.02)));\n    \n   //light = (0.25 * light);\n   float sss=CalcSSS(ro+rd*dt, rd,norm);\n   float ao= CalcAO(ro+rd*dt, norm);\n   light = mix(light, vec3(0.8,0.6,0.6),sss);\n   light +=ao*0.25;\n    //light+=vec3(0.1,0.1,0.1);\n    \n    fragColor=vec4(clamp(light,0.0,1.0),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}