{
    "Shader": {
        "info": {
            "date": "1634630131",
            "description": "Virtually climbing the \"Vessel\" in NYC - now closed; mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "NdGXDD",
            "likes": 20,
            "name": "Vessel Climbing",
            "published": 3,
            "tags": [
                "tower",
                "geometry",
                "architecture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// \"Vessel Climbing\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Virtually climbing the \"Vessel\" in NYC - now closed; mouseable.\n\n/*\n  No. 4 in \"Vessel\" series\n    \"Stairs to Nowhere\"         (wtB3R3)\n    \"Submerging Tower\"          (wdcGWr)\n    \"Mountain Lake with Tower\"  (3tdcWj)\n*/\n\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat IFbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nvec4 szFlr;\nvec3 ltDir, qHit, pvU[5], pvD[5];\nfloat dstFar, tCur, twrScl, flSpc, nFlr, twrRad, bSizeV, cIdV;\nint idObj;\nconst int idFlr = 1, idStr = 2, idRl = 3, idStn = 4, idCln = 5, idMovBU = 6, \n   idMovHU = 7, idMovBD = 8, idMovHD = 9, idWall = 10, idRfEx = 11, idGrEx = 12;\nconst float pi = 3.1415927, sqrt2 = 1.41421;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, stSpc, xLim1, xLim2, bRad, r, a, x;\n  bool topFlr, botFlr;\n  dMin = dstFar / twrScl;\n  p /= twrScl;\n  r = length (p.xz) - twrRad;\n  d = r - 20.;\n  if (d < 1.) {\n    a = 2. * pi * ((floor (6. * atan (p.x, - p.z) / (2. * pi)) + 0.5) / 6.);\n    stSpc = 6.;\n    xLim1 = abs (dot (p.xz, sin (a + vec2 (0.5 * pi, 0.)))) - 22.;\n    xLim2 = xLim1 + 16.;\n    bRad = 0.5 * 0.5;\n    topFlr = (cIdV == 2. * nFlr - 1.);\n    botFlr = (cIdV == 0.);\n    if (topFlr) {\n      d = length (max (abs (vec2 (p.y + 0.5 * szFlr.w, r + szFlr.z + stSpc)) -\n         vec2 (0.5 * szFlr.w, szFlr.z), 0.));\n      DMIN (idFlr);\n      d = max (length (vec2 (p.y + 0.4, abs (r + szFlr.z + stSpc - 0.5)) - (szFlr.z - 0.1)) -\n         bRad, - xLim2);\n      DMIN (idRl);\n    }\n    d = max (length (max (abs (vec2 ((topFlr ? - p.y : abs (p.y)) - flSpc,\n       r - 0.4 * (szFlr.z + stSpc))) - vec2 (szFlr.w, 1.4 * (szFlr.z + stSpc)), 0.)), - xLim1);\n    DMIN (idFlr);\n    d = max (length (max (abs (vec2 (p.y + szFlr.w, r)) - vec2 (szFlr.w, 2. * szFlr.z + stSpc +\n       0.5), 0.)), xLim2);\n    DMIN (idFlr);\n    p.zx = Rot2D (p.zx, a);\n    p.z = abs (p.z) - twrRad;\n    x = abs (p.x) - szFlr.x;\n    for (float sz = -1.; sz <= 1.; sz += 2.) {\n      if (! topFlr || sz < 0.) {\n        q.x = x;\n        q.yz = p.yz - sz * vec2 (szFlr.y - szFlr.w, - (szFlr.z + stSpc));\n        d = abs (q.y) - (szFlr.y - szFlr.w - 0.005);\n        q.xy = vec2 (q.x + sz * q.y, - sz * q.x + q.y) / sqrt2;\n        d = max (max (max (q.y - 0.5 * sqrt2 - abs (0.5 * sqrt2 - mod (q.x, sqrt2)),\n           abs (q.z) - szFlr.z), -1. - q.y), d);\n        DMIN (idStr);\n      }\n    }\n    d = max (length (vec2 (p.y + flSpc - 4., abs (r - szFlr.z) - (2. * szFlr.z + stSpc -\n       0.8))) - bRad, - xLim1);\n    DMIN (idRl);\n    d = max (length (vec2 (p.y - 3.5, abs (r - 0.4) - (2. * szFlr.z + stSpc - 0.1))) - bRad, xLim2);\n    DMIN (idRl);\n    q = vec3 (x - 4., p.y + 0.5 * flSpc, abs (p.z - (szFlr.z + stSpc)) - szFlr.z);\n    d = max (length (vec2 ((q.x + q.y) / sqrt2, q.z)) - bRad, abs (x) - 8.);\n    DMIN (idRl);\n    q.xz = vec2 (x + 4., abs (p.z + szFlr.z + stSpc) - szFlr.z);\n    if (! botFlr) {\n      d = max (length (vec2 ((q.x - (p.y + 1.5 * flSpc)) / sqrt2, q.z)) - bRad, abs (x) - 8.);\n      DMIN (idRl);\n    }\n    if (! topFlr) {\n      d = max (length (vec2 ((q.x - (p.y - 0.5 * flSpc)) / sqrt2, q.z)) - bRad, abs (x) - 8.);\n      DMIN (idRl);\n    }\n    x = abs (p.x);\n    q.x = x - 22.;\n    d = min (length (vec2 (q.x, p.y + flSpc - 4.)), length (vec2 (x - 6., p.y - 3.5))) - bRad;\n    d = max (d, max (abs (p.z) - (2. * szFlr.z + stSpc), szFlr.z - abs (abs (p.z) - (szFlr.z + stSpc))));\n    DMIN (idRl);\n    q.yz = vec2 (p.y + flSpc - 2.5, abs (abs (p.z) - (szFlr.z + stSpc)) - szFlr.z);\n    d = PrCapsDf (q.xzy, 0.7 * 0.7, 2. + 0.2);\n    DMIN (idStn);\n    if (! topFlr) {\n      d = length (vec2 (q.x, p.z)) - 0.8 * 0.8;\n      DMIN (idCln);\n    }\n    d = PrCapsDf (vec3 (x - 6., p.y - 2.5, q.z).xzy, 0.7 * 0.7, 2. + 0.2);\n    DMIN (idStn);\n    dMin *= 0.7;\n  } else dMin = d;\n  return twrScl * dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d, eps, sy;\n  eps = 0.0005;\n  dHit = eps;\n  if (rd.y == 0.) rd.y = 0.001;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cIdV = floor (p.y / bSizeV);\n    sy = (bSizeV * (cIdV + step (0., rd.y)) - p.y) / rd.y;\n    d = abs (sy) + eps;\n    if (cIdV >= 0. && cIdV < 2. * nFlr) {\n       d = min (GObjDf (p - vec3 (0., bSizeV * (cIdV + 0.5), 0.)), d);\n    }\n    dHit += d;\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps || p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  cIdV = floor (p.y / bSizeV);\n  p.y -= bSizeV * (cIdV + 0.5);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, wz, h;\n  int idb;\n  dMin = dstFar;\n  p.y -= bSizeV * (nFlr - 0.5);\n  p /= twrScl;\n  h = bSizeV * (nFlr - 0.5) / twrScl;\n  q = p;\n  r = length (q.xz) - twrRad;\n  q.y -= 1.3 * flSpc + h;\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (3. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 3.));\n  d = dot (vec2 (q.x, abs (q.z)), sin (0.09 * pi + vec2 (0., 0.5 * pi)));\n  q.x = r + szFlr.z + 5.;\n  d = max (d, length (max (abs (q.xy) - vec2 (2.1, 0.3 * flSpc), 0.)) - 0.02);\n  DMINQ (idRfEx);\n  q = p;\n  q.y -= 0.25 * flSpc - h;\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (3. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 3.));\n  wz = q.z;\n  d = abs (abs (q.z) - 18.) - 5.;\n  q.x = r + szFlr.z + 1.3;\n  d = max (d, length (max (abs (q.xy) - vec2 (2.9, 0.3 * flSpc), 0.)) - 0.02);\n  DMINQ (idGrEx);\n  q = p;\n  q.y -= 0.4 * flSpc - h;\n  d = max (length (max (abs (vec2 (r - 2. * szFlr.z - 15., q.y)) -\n     vec2 (0.5, 0.4 * flSpc), 0.)) - 0.02, 0.2 - length (max (abs (vec2 (abs (wz) - 40., q.y)) -\n     vec2 (4., 0.3 * flSpc), 0.))); \n  DMINQ (idWall);\n  return twrScl * dMin;\n}\n\nvec4 SphHit (vec3 ro, vec3 rd, float r)\n{\n  vec3 vn;\n  float b, d, w, dMin;\n  dMin = dstFar;\n  b = dot (rd, ro);\n  w = b * b - dot (ro, ro) + r * r;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    if (d > 0.) {\n      dMin = d;\n      vn = (ro + d * rd) / r;\n    }\n  }\n  return vec4 (dMin, vn);\n}\n\nvec4 CapsHit (vec3 ro, vec3 rd, float r, float h)\n{\n  vec3 s, vn;\n  vec2 e;\n  e = vec2 (-1., 1.);\n  float dMin, d, a, b, w, drz;\n  dMin = dstFar;\n  ro.yz = ro.zy * e;\n  rd.yz = rd.zy * e;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - r * r);\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    d /= max (a, 1e-6);\n    s = ro + d * rd;\n    if (d > 0. && abs (s.z) < h) {\n      dMin = d;\n      vn = vec3 (s.xy, 0.);\n    } else {\n      drz = - h * sign (s.z);\n      ro.z += drz;\n      b = dot (rd, ro);\n      w = b * b - (dot (ro, ro) - r * r);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0.) {\n          dMin = d;\n          vn = ro + d * rd;\n        }\n      }        \n    }\n  }\n  vn.yz = - vn.zy * e;\n  return vec4 (dMin, vn);\n}\n\nvoid PathVerts ()\n{\n  pvU[0] = vec3 (4., - flSpc, 5.);\n  pvU[1] = vec3 (-14., - flSpc, -2. * szFlr.z - 5.);\n  pvU[2] = vec3 (4., 0., - szFlr.z - 5.);\n  pvU[3] = vec3 (-4., 0., szFlr.z + 5.);\n  for (int k = 0; k < 4; k ++) pvU[k] += vec3 (1., 0., - twrRad);\n  pvU[4] = pvU[0];\n  pvU[2].xz = Rot2D (pvU[2].xz, - pi / 6.);\n  pvU[3].xz = Rot2D (pvU[3].xz, - pi / 6.);\n  pvU[4].xz = Rot2D (pvU[4].xz, - 2. * pi / 6.);\n  pvU[4].y += 2. * flSpc;\n  pvD[0] = vec3 (14., flSpc, -2. * szFlr.z - 5.);\n  pvD[1] = vec3 (-4., flSpc, 5.);\n  pvD[2] = vec3 (4., 0., szFlr.z + 5.);\n  pvD[3] = vec3 (-4., 0., - szFlr.z - 5.);\n  for (int k = 0; k < 4; k ++) pvD[k] += vec3 (-1., 0., - twrRad);\n  pvD[4] = pvD[0];\n  pvD[2].xz = Rot2D (pvD[2].xz, - pi / 6.);\n  pvD[3].xz = Rot2D (pvD[3].xz, - pi / 6.);\n  pvD[4].xz = Rot2D (pvD[4].xz, - 2. * pi / 6.);\n  pvD[4].y -= 2. * flSpc;\n}\n\nvec4 MovObjHit (vec3 ro, vec3 rd)\n{\n  vec4 dc4;\n  vec3 s[5], s1, s2, ss, vn;\n  float dMin, d, r, t, h, iDir;\n  int idb, iUD;\n  dMin = dstFar;\n  h = bSizeV * (nFlr - 0.5);\n  ro.y -= h;\n  h += 0.5 * flSpc * twrScl;\n  iDir = 1.;\n  for (float iMul = 0.; iMul < 6.; iMul ++) {\n    iDir = 1. - iDir;\n    idb = (iDir == 0.) ? idMovBU : idMovBD;\n    for (int j = 0; j < 5; j ++) s[j] = (iDir == 0.) ? pvU[j] : pvD[j];\n    t = fract (0.3 * tCur + 0.5 * iDir);\n    r = 2. * t - 0.5 * (sign (t - 0.5) + 1.);\n    for (int iSec = 0; iSec < 6; iSec ++) {\n      s1 = (t < 0.5) ? mix (s[0], s[1], r) : mix (s[1], s[2], r);\n      s2 = (t < 0.5) ? mix (s[2], s[3], r) : mix (s[3], s[4], r);\n      iUD = 1;\n      for (float iRep = 0.; iRep < 6.; iRep ++) {\n        iUD = 1 - iUD;\n        ss = (iUD == 0) ? s1 : s2;\n        ss.y += (4. - 12. * mod (iRep, 3.) + 4. * mod (iMul, 3.)) * flSpc *\n           sign (0.5 - iDir) + 2.9;\n        dc4 = CapsHit (ro - ss * twrScl, rd, 1.2 * twrScl, 1.5 * twrScl);\n        if (dc4.x < dMin && abs (ro.y + dc4.x * rd.y - flSpc * twrScl + 3.8 * twrScl) <\n           h + 3.8 * twrScl) {\n          dMin = dc4.x;\n          vn = dc4.yzw;\n          idObj = idb;\n        }\n        ss.y += 3.7;\n        dc4 = SphHit (ro - ss * twrScl, rd, 1.1 * twrScl);\n        if (dc4.x < dMin && abs (ro.y + dc4.x * rd.y - flSpc * twrScl + 3.8 * twrScl) <\n           h + 3.8 * twrScl) {\n          dMin = dc4.x;\n          vn = dc4.yzw;\n          idObj = idb + 1;\n        }\n      }\n      for (int j = 0; j < 5; j ++) {\n        s[j].xz = Rot2D (s[j].xz, - 2. * pi / 6.);\n        s[j].y += 2. * flSpc * sign (0.5 - iDir);\n      }\n    }\n  }\n  return vec4 (dMin, normalize (vn));\n}\n\nfloat ObjAO (vec3 p)\n{\n  vec3 q, w, s[5], s1, s2;\n  float d, r, t, iDir;\n  int iUD;\n  d = dstFar;\n  p.y -= bSizeV * (nFlr - 0.5);\n  p /= twrScl;\n  iDir = 1.;\n  for (float iMul = 0.; iMul < 6.; iMul ++) {\n    iDir = 1. - iDir;\n    q.xz = p.xz;\n    for (int j = 0; j < 5; j ++) s[j] = (iDir == 0.) ? pvU[j] : pvD[j];\n    t = fract (0.3 * tCur + 0.5 * iDir);\n    r = 2. * t - 0.5 * (sign (t - 0.5) + 1.);\n    for (int iSec = 0; iSec < 6; iSec ++) {\n      s1 = (t < 0.5) ? mix (s[0], s[1], r) : mix (s[1], s[2], r);\n      s2 = (t < 0.5) ? mix (s[2], s[3], r) : mix (s[3], s[4], r);\n      iUD = 1;\n      for (float iRep = 0.; iRep < 6.; iRep ++) {\n        iUD = 1 - iUD;\n        q.y = p.y - (4. - 12. * mod (iRep, 3.) + 4. * mod (iMul, 3.)) * flSpc * sign (0.5 - iDir);\n        q.y -= 3.;\n        w = q - ((iUD == 0) ? s1 : s2);\n        if (abs (w.y) < 4.) d = min (d, length (w.xz));\n      }\n      for (int j = 0; j < 5; j ++) {\n        s[j].xz = Rot2D (s[j].xz, - 2. * pi / 6.);\n        s[j].y += 2. * flSpc * sign (0.5 - iDir);\n      }\n    }\n  }\n  return 0.6 + 0.4 * smoothstep (1.3, 2.6, d);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0002 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 ObjCol (vec3 ro, vec3 vn)\n{\n  vec4 col4;\n  if (idObj == idFlr) {\n    col4 = vec4 (0.5, 0.2, 0., 0.1);\n    if (vn.y > 0.99) col4 *= 0.8 + 0.2 * smoothstep (0., 0.02,\n       abs (mod (0.25 * length (ro.xz) / twrScl + 0.5, 1.) - 0.5) - 0.07);\n  } else if (idObj == idStr) {\n    col4 = vec4 (0.6, 0.3, 0.1, 0.1);\n  } else if (idObj == idRl) {\n    col4 = vec4 (0.9, 0.9, 1., 0.2);\n  } else if (idObj == idStn) {\n    col4 = vec4 (0.8, 0.8, 1., 0.2);\n  } else if (idObj == idCln) {\n    col4 = vec4 (1., 0., 1., 0.2) * (0.8 + 0.2 * smoothstep (0., 0.02, abs (mod (ro.y / twrScl +\n       0.5, 1.) - 0.5) - 0.07));\n  } else if (idObj == idMovBU) {\n    col4 = vec4 (0.8, 0.8, 0., 0.2);\n  } else if (idObj == idMovHU) {\n    col4 = vec4 (0.8, 0.8, 0., -1.);\n  } else if (idObj == idMovBD) {\n    col4 = vec4 (0., 0.8, 0.8, 0.2);\n  } else if (idObj == idMovHD) {\n    col4 = vec4 (0., 0.8, 0.8, -1.);\n  } else if (idObj == idWall) {\n    col4 = vec4 (0.8, 0.4, 0.2, 0.) * (0.8 + 0.2 * smoothstep (0., 0.02, \n       abs (mod (64. * atan (qHit.z, - qHit.x) / pi + 0.5, 1.) - 0.5) - 0.05));\n  } else if (idObj == idRfEx) {\n    col4 = vec4 (0.8, 0.5, 0.3, 0.1) * (0.8 + 0.2 * smoothstep (0., 0.02, abs (mod (qHit.y +\n       0.5, 1.) - 0.5) - 0.07));\n    if (abs (qHit.y + 0.6) < 4.1 && qHit.x > 0. && abs (abs (qHit.z) - 2.6) < 1.7)\n       col4 = (qHit.z > 0.) ? vec4 (0.6, 0.6, 0., -1.) : vec4 (0., 0.6, 0.6, -1.);\n  } else if (idObj == idGrEx) {\n    col4 = vec4 (0.8, 0.5, 0.3, 0.1) * (0.8 + 0.2 * smoothstep (0., 0.02, abs (mod (qHit.y +\n       0.5, 1.) - 0.5) - 0.07));\n    if (abs (qHit.y + 0.6) < 4.1 && abs (qHit.z) - 18. > 0. && abs (qHit.x) < 1.7)\n       col4 = (qHit.z > 0.) ? vec4 (0.6, 0.6, 0., -1.) : vec4 (0., 0.6, 0.6, -1.);\n  }\n  return col4;\n}\n\nvec3 GrndNf (vec2 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return vec3 (normalize (vec3 (Fbm2 (p) - vec2 (Fbm2 (p + e.xy),\n     Fbm2 (p + e.yx)), 4. * e.x)).xzy);\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.02 * (0.1 + 0.9 * IFbm1 (32. * atan (rd.z, - rd.x) / pi))) {\n    col = 0.8 * vec3 (0.35, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * ltDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    col = mix (vec3 (0.3, 0.4, 0.8), clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, dc4;\n  vec3 col, vn;\n  float dstObj, dstObjG, dstObjM, s;\n  int idObjG, idObjM;\n  PathVerts ();\n  dstObjG = GObjRay (ro, rd);\n  idObjG = idObj;\n  dc4 = MovObjHit (ro, rd);\n  dstObjM = dc4.x;\n  idObjM = idObj;\n  dstObj = ObjRay (ro, rd);\n  if (min (dstObj, min (dstObjM, dstObjG))  < dstFar) {\n    if (dstObj < min (dstObjM, dstObjG)) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n    } else if (dstObjG < dstObjM) {\n      dstObj = dstObjG;\n      idObj = idObjG;\n      ro += dstObj * rd;\n      vn = GObjNf (ro);\n    } else {\n      dstObj = dstObjM;\n      idObj = idObjM;\n      ro += dstObj * rd;\n      vn = dc4.yzw;\n    }\n    col4 = ObjCol (ro, vn);\n    if ((idObj == idFlr || idObj == idStr) && vn.y > 0.) col4.rgb *= ObjAO (ro);\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    else col = col4.rgb * (0.6 - 0.4 * dot (vn, rd));\n  } else if (rd.y < 0.) {\n    ro += (- ro.y / rd.y) * rd;\n    s = length (ro.xz);\n    if (s < (twrRad + 2. * szFlr.z + 15.) * twrScl) {\n      col = vec3 (0.2, 0.3, 0.2) * (0.7 + 0.3 * Fbm2 (4. * ro.xz));\n    } else {\n      vn = GrndNf (0.5 * ro.xz);\n      col = (0.4 * mix (vec3 (0.8, 1., 0.5), vec3 (0.7, 0.9, 0.5), 0.2 +\n         0.8 * smoothstep (0.3, 0.7, Fbm2 (4. * ro.xz)))) *\n         (0.2 + 0.8 * max (dot (vn, ltDir), 0.));\n      col *= 0.7 + 0.3 * smoothstep (0., 0.5, s - 9.3);\n      col = mix (col, 0.8 * vec3 (0.35, 0.4, 0.5), pow (1. + rd.y, 16.));\n    }\n    col *= 0.7 + 0.3 * smoothstep (0., 2., abs (s - (twrRad + 2. * szFlr.z + 15.) * twrScl));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  twrScl = 0.3;\n  szFlr = vec4 (14., 8.5, 4., 0.5);\n  flSpc = 2. * szFlr.y - szFlr.w;\n  nFlr = 4.;\n  twrRad = 60.;\n  bSizeV = 2. * flSpc * twrScl;\n  az = 0.;\n  el = -0.05 * pi;\n  ro = vec3 (0., 1.9 * flSpc * nFlr * twrScl, -120.);\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    ro.y += 1.9 * 2. * flSpc * nFlr * twrScl * mPtr.y;\n  } else {\n    az += 0.05 * pi * tCur;\n    ro.y += 1.8 * flSpc * nFlr * twrScl * (2. * SmoothBump (0.25, 0.75, 0.22,\n       mod (0.022 * tCur, 1.)) - 1.);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * ro;\n  zmFac = 2.2 / (1. - 0.85 * abs (mod (az + pi, 2. * pi) - pi) / pi);\n  dstFar = 150.;\n  ltDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat IFbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 10.;\n  for (int j = 0; j < 3; j ++) {\n    f += floor (a * Noiseff (p));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / (1.75 * a));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}