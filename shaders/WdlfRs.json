{
    "Shader": {
        "info": {
            "date": "1589064349",
            "description": "Raymarched Whitney Umbrella - a singular surface. See header for controls etc.",
            "flags": 48,
            "hasliked": 0,
            "id": "WdlfRs",
            "likes": 6,
            "name": "Whitney Umbrella",
            "published": 3,
            "tags": [
                "whitney",
                "umbrella",
                "singularity"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Whitney Umbrella\n//\n// Matthew Arcus, mla, 2020.\n//\n// Wanted to see how some classic singularities came out with raymarching\n// the implicit equation - seems to work OK, even with numeric gradient,\n// with even the 'handle' coming out alright.\n//\n// <mouse>: rotate\n// <up>/<down>: move in/out\n// <left>/<right>: fog distance\n// f: fog\n// l: light transform\n// r: autorotation\n// \n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.14159;\n\nfloat AA = 2.0;\nint maxsteps = 100;\nfloat maxdist = 5.0;\nfloat precis = 0.0005;\n\nbool dorotate = true; // Autorotate\n\nfloat eval(vec3 p) {\n  float x = p.x, y = p.y, z = p.z;\n  return y*y - x*x*z; // Whitney Umbrella\n}\n\n// To see how numeric gradient works change #if\n// This might be a good place to use dual numbers.\nvec3 cgrad(vec3 p) {\n#if 1\n  float x = p.x, y = p.y, z = p.z;\n  return vec3(-2.0*x*z,2.0*y,-x*x);\n#else\n  // Numeric gradient\n  float eps = 1e-2;\n  vec2 e = vec2(eps,0);\n  vec3 tt = vec3(eval(p+e.xyy)-eval(p-e.xyy),\n                 eval(p+e.yxy)-eval(p-e.yxy),\n                 eval(p+e.yyx)-eval(p-e.yyx));\n  return tt/(2.0*eps);\n#endif\n}\n\nfloat rosign;   // sign of implict equation at ray origin\nfloat getdist(vec3 p) {\n  float d = eval(p)/length(cgrad(p));\n  d *= rosign;\n  return d;\n}\n\nfloat march(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  for(int i = 0; i < maxsteps; i++) {\n    vec3 p = ro + t*rd;\n    float d = getdist(p);\n    t += d;\n    if (t > maxdist || abs(d) < t*precis) break;\n  }\n  return t;\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.1);\n  }\n  return p;\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return v * mix( vec3(1.0), rgb, s);\n}\n\nint mymod(int n, int m) {\n  // glsl % undefined for -ve arguments\n  if (n < 0) return m-1-(-n-1)%m;\n  else return n%m;\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_F = 70;\nconst int CHAR_L = 76;\nconst int CHAR_R = 82;\nconst int CHAR_T = 84;\nconst int CHAR_X = 88;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel2, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nbool key(int code) {\n  return texelFetch(iChannel3, ivec2(code,2),0).x != 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  dorotate = !key(CHAR_R);\n  float camera = 2.0;\n  camera *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  maxdist = 2.0*camera;\n  maxdist *= exp(0.1*float(keycount(KEY_RIGHT)-keycount(KEY_LEFT)));\n  vec3 ro = vec3(0,0,-camera);\n  ro = transform(ro);\n  vec3 light = vec3(1,2,-3);\n  // Leaving the light fixed (untransformed) is more dramatic but\n  // may make things harder to see.\n  if (key(CHAR_L)) light = transform(light);\n  light = normalize(light);\n  rosign = sign(eval(ro));\n  vec3 aacol = vec3(0);\n  vec3 fogcol = vec3(1,1,0.5); //mix(vec3(1),basecol,0.75);\n  vec3 basecol = hsv2rgb(0.1+0.01*iTime,1.0,1.0); //vec3(1,0.5,0);\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 uv = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec3 rd = vec3(uv,2);\n      rd = transform(rd);\n      rd = normalize(rd);\n      float t = march(ro, rd);\n      vec3 col = fogcol;\n      if (t < maxdist) {\n        col = basecol;\n        vec3 p = ro+t*rd;\n        int parity = int(dot(floor(2.0*p+1e-3),vec3(1)));\n        if (mymod(parity,2) == 1) col *= 0.8;\n        vec3 n = rosign*cgrad(p);\n        if (dot(n,rd) > 0.0) n = -n;\n        n = normalize(n);\n        float diffuse = mix(1.0,max(dot(n,light),0.0),0.6);\n        float intensity = 1.2;\n        col *= diffuse*intensity;\n        float fog = key(CHAR_F) ? 0.0 : t/maxdist;\n        col = mix(col,fogcol,fog);\n      }\n      aacol += col;\n    }\n  }\n  aacol = pow(aacol/(AA*AA),vec3(0.4545));\t// gamma correction\n  fragColor = vec4(aacol,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}