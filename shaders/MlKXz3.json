{
    "Shader": {
        "info": {
            "date": "1486731747",
            "description": "A tunnel with some faux timber panelling.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlKXz3",
            "likes": 33,
            "name": "Panelled Tube",
            "published": 3,
            "tags": [
                "tunnel",
                "polar",
                "tube"
            ],
            "usePreview": 1,
            "username": "Shane",
            "viewed": 1546
        },
        "renderpass": [
            {
                "code": "/*\n\n\tPanelled Tube\n\t-------------\n\n\tNothing exciting. Just a less detailed, slightly cleaner rehash of my previous tunnel\n\texample. I was going for a hard-lacquered faux timber panel look, because I wanted \n\tsomething reflective and shiny, but it's possible to make it look like real timber with \n\ta few setting and material changes here and there.\n\n\tI'm on a very fast laptop at the moment, so I have no idea how well - or badly - this \n\truns. My mother used to say that the best optimizing tool is a slow computer. I tend to \n\tagree, but sometimes it can be disappointing getting something looking the way you want \n\ton your good machine, then having to throw out details in order to cater for older \n\thardware... OK, reading that sentence back to myself brings the \"First World Problems\" \n\tmeme to mind. :D\t\n\n\tAnyway, without the cheap (12 iteration) reflective pass, I'd imagine this would run \n\tat 60 fps on most systems. With it... between 30 and 60 fps, although that's just a \n\tguess.\n\t\n\n*/\n\n// Maximum ray distance.\n#define FAR 50.\n\n// Coyote's snippet to provide a virtual reality element. Really freaky. It gives the scene \n// physical depth, but you have to do that magic picture focus adjusting thing with your eyes.\n//#define THREE_D \n\n// Object ID, used for the gold trimming in the bump mapping section.\nfloat svObjID, svObjID2;\nvec3 vObjID;\n\n#define TUN 0. // Tunnel: Basically, the metal plates.\n#define ROD 1. // Rod:  Silver rod, and washer, attached to the bolts.\n#define BLT 2. // Bolts:  The hexagonal fasteners.\n\n// 2D rotation. Always handy. Angle vector, courtesy of Fabrice.\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\n\n// Camera path. Arranged to coincide with the frequency of the lattice.\nvec3 camPath(float t){\n  \n    //return vec3(0, 0, t); // Straight path.\n    \n    // Curvy path. Weaving around the columns.\n    float a = sin(t*3.14159265/16. + 1.5707963);\n    float b = cos(t*3.14159265/16.);\n    \n    return vec3(a, b*a*.5, t);     \n}\n\n// Camera path. Arranged to coincide with the frequency of the lattice.\nvec3 camPathPL(float t){\n  \n    //return vec3(0, 0, t); // Straight path.\n    \n    float it = floor(t + 1.);\n    float ft = t - it;\n    \n    // Curvy path. Weaving around the columns.\n    float a = sin(it*3.14159265/16. + 1.5707963);\n    float b = cos(it*3.14159265/16.);\n    \n    vec2 p0 = vec2(a, b*a*.5);\n    \n    a = sin((it + 1.)*3.14159265/16. + 1.5707963);\n    b = cos((it + 1.)*3.14159265/16.);\n    \n    vec2 p1 = vec2(a, b*a*.5);\n    \n    vec2 p = mix(p0, p1, ft);\n    \n    return vec3(p, t);     \n}\n\n\n// Minimum - with corresponding object ID.\nvec2 objMin(vec2 a, vec2 b){ \n    \n    // Returning the minimum distance along with the ID of the\n    // object. This is one way to do it. There are others.\n    return a.x < b.x ? a : b;\n    \n    //Equivalent to: return a.x < b.x ? a: b; \n    //float s = step(a.x, b.x);\n    //return s*a + (1. - s)*b;\n}\n\n\n// The tunnel scene. There's a bit of code, but it's nothing more than a bunch of boxes\n// and cylinders spread out around some repeat cylindrical coordinates.\nfloat map(vec3 p){\n    \n    const float depth = .25; // Depth of the rounded metal plates.\n    \n    // Mold the scene around the path.\n    p.xy -= camPath(p.z).xy;\n    \n    // The edge of the tunnel. Set at a radius of one, plus the depth.\n    float tun = (1. + depth) - length(p.xy); \n    //max(abs(p.x)*.866025 + abs(p.y)*.5, abs(p.y));//\n\n    \n    ///////////////\n    \n    // The tunnel walls. Due to the amount of detailing and the polar conversion, it \n    // looks more complicated than it actually is. To repeat across the XY plane we\n    // do something along the lines of \"p.xz = mod(p.xz, c) - c/2.\" To repeat around\n    // a circle in the XY plane, we convert to polar coordinates, \"p.xy = rot(angle),\"\n    // (angle is based on \"atan(p.y, p.x),\" then do the same thing. The rest is basic\n    // unit circle trigonometry, etc. By the way, this is a rough description, so if\n    // something doesn't quite make sense, it probably doesn't. :)\n    \n    // Converting the XY plane to polar coordinates. I'm handling the panels (five per\n    // circle) and the bolts (15 per circle) at the same time to share some calculations.\n    // I'd love to use the geometry of one to constuct the other - in order to save\n    // some instructions, but I'm leaving it alone for now.\n    vec3 q = p; \n    vec3 q2 = p;    \n    \n    float a = atan(q.y, q.x)/6.2831853; // Polar angle of \"p.xy\" coordinate.\n    float ia = (floor(a*5.) + .5)/5.*6.2831853; // Angle between \"PI/5\" intervals.\n    float ia2 = (floor(a*15.) + .5)/15.*6.2831853; // Angle between \"PI/15\" intervals.\n    \n     // Polar conversion for 5 segments, but offset every second panel.\n    q.xy *= rot(ia + sign(mod(q.z + 1., 4.) - 2.)*3.14159/15.);// \n    //float of2 = sign(mod(q.z + .5, 2.) - 1.)*3.14159/15.;\n    q2.xy *= rot(ia2); // Polar conversion for 15 segments (for the bolts).\n   \n    // The X-coordinate is now the radial coordinate, which radiates from the center\n    // to infinity. We want to break it into cells that are 2 units wide, but centered\n    // in the middle. The result is that the panels will start at radius one.\n    q.x = mod(q.x, 2.) - 1.;\n    // Plain old linear Z repetion. We want the panels and bolts to be repeated in the\n    // Z-direction (down the tunnel) every half unit.\n    q.z = mod(q.z, 2.) - 1.;\n    \n    // Moving the bolts out to a distance of 2.25.\n    q2.x = mod(q2.x, (2. + .25)) - (2. + .25)/2.;\n    \n    // Now, it's just a case of drawing and positioning some basic shapes. Boxes and\n    // tubes with a hexagonal cross-section.\n    q = abs(q);\n    q2 = abs(q2);\n\n    // Panelling details.\n    float tunDetail = max(min(q.y, q.z) - .07, -(min(q.y, q.z) - .007));     \n \n    // Adding the tunnel details (with a circular center taken out) to the tunnel.\n    tun = min(tun, max(tunDetail, tun-depth));  \n    \n    ///////////////\n    \n    // Bolts: Hexagon shapes spaced out fifteen times around the tunnel walls. The \n    // panels are spaced out in fifths, so that means three per panel. And yes, they're\n    // technically nuts (not bolts), but I was too lazy to change the variable names\n    // for the previous example. :)\n    float blt = max(max(q2.x*.866025 + q2.y*.5, q2.y) - .055, q.z - .16);\n    //blt = min(blt, max(length(q2.xy) - .07, q.z - .08));\n    \n    float thread = max(sin(q.z*6.283*64.)*2., 0.)*.002;\n    float rod = max(length(q2.xy) - .025 + thread, q.z - .19);\n    rod = min(rod, max(length(q2.xy) - .075, q.z - .09));\n\n\n    \n    // Determine the overall closest object and its corresponding object ID. There's a way\n    // to save some cycles and take the object-ID calculations out of the distance function, \n    // but I'm leaving them here for simplicity.\n    //vec2 d = objMin(vec2(tun, TUN), vec2(blt, BLT));\n    //d = objMin(d, vec2(rod, ROD));\n    \n    // Save all the object IDs here, then sort them later. It's overcomplicated, but saves \n    // a few cycles.\n    vObjID = vec3(tun, blt, rod);\n    \n    return min(min(tun, blt), rod); // Return the closest distance.\n\n\n    \n    \n}\n\n\n// The reflections are pretty subtle, so not much effort is being put into them. Only a few iterations.\n// For faster machines, use about 32 iterations, and you'll get a more accurate reflection.\nfloat refTrace(vec3 ro, vec3 rd){\n\n    float t = 0.0;\n    for(int i=0; i<12; i++){\n        float d = map(ro + rd*t);\n        if (abs(d) < 0.005*(t*.25 + 1.) || t>FAR) break;\n        t += d;\n    } \n    return t;\n}\n\n\n// Raymarching.\nfloat trace(vec3 ro, vec3 rd){\n\n    float t = 0., d;\n    for (int i=0; i<96; i++){\n\n        d = map(ro + rd*t);\n        if(abs(d)<.001*(t*.125 + 1.) || t>FAR) break;\n        t += d;\n    }\n    return min(t, FAR);\n}\n\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D(sampler2D channel, vec3 p, vec3 n){\n    \n    // Adjusting the texture calculations to the camera path. Add in the checkered texture,\n    // then comment it out to see what it's for.\n    p.xy -= camPath(p.z).xy;\n    \n    n = max(abs(n) - .2, 0.001);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(channel, p.yz).xyz;\n    vec3 ty = texture(channel, p.xz).xyz;\n    vec3 tz = texture(channel, p.xy).xyz;\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. :)\n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n}\n\n\n\n/*\n// The normal function with some 6-tap curvature rolled into it. Sometimes, it's possible to get away\n// with six taps overall, but we need a bit of epsilon value variance here, so there's an extra six.\nvec3 nr(vec3 p, inout float crv, float ef){ \n\t//ef/iResolution.y\n    vec2 e = vec2(ef/450., 0); // Larger epsilon for greater sample spread, thus thicker edges.\n\n    // Take some distance function measurements from either side of the hit point on all three axes.\n\tfloat d1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\tfloat d3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\tfloat d5 = map(p + e.yyx), d6 = map(p - e.yyx);\n\tfloat d = map(p);\t// The hit point itself - Doubled to cut down on calculations. See below.\n    \n    // Seven-tap curvature calculation. You can get away with four taps, but this is a little\n    // more accurate.\n    crv = clamp((d1 + d2 + d3 + d4 + d5 + d6 - d*6.)*32. + .5, 0., 1.);\n\t\n    // Redoing the calculations for the normal with a more precise epsilon value.\n    e = vec2(.005, 0);\n\td1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\td3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\td5 = map(p + e.yyx), d6 = map(p - e.yyx); \n    \n    // Return the normal.\n    // Standard, normalized gradient mearsurement.\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n*/\n\n\n// The normal function with some cheaper 4-tap curvature rolled into it. The 4-tap curvature\n// came from Nimitz.\nvec3 nrHyb(vec3 p, inout float crv, float ef){ \n\t\n    // Edging thickness. I wanted the edges to be resolution independent... or to put it\n    // another way, I wanted the lines to be a certain pixel width regardless of the \n    // canvas size. If you don't, then the lines can look too fat in fullscreen.\n    vec2 e = vec2(-1., 1.)*.66*ef/450.;  \n    \n    // The hit point value, and four nearby samples, spaced out in a tetrahedral fashion.\n\tfloat d1 = map(p + e.yxx), d2 = map(p + e.xxy);\n\tfloat d3 = map(p + e.xyx), d4 = map(p + e.yyy);\n    float d = map(p);\n    float d5, d6;\n    \n    crv = clamp((d1 + d2 + d3 + d4 - d*4.)*24. + .5, 0., 1.);\n\t\n    // Redoing the calculations for the normal with a more precise epsilon value.\n    e = vec2(.005, 0);\n\td1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\td3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\td5 = map(p + e.yyx), d6 = map(p - e.yyx); \n    \n    // Return the normal.\n    // Standard, normalized gradient mearsurement.\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\n\n// Tetrahedral normal - courtesy of IQ. I'm in saving mode, so am saving a few map calls.\n// I've added to the function to include a rough tetrahedral edge calculation.\nvec3 nrRef(in vec3 p, inout float crv, in float ef){\n  \n    // Edging thickness. I wanted the edges to be resolution independent... or to put it\n    // another way, I wanted the lines to be a certain pixel width regardless of the \n    // canvas size. If you don't, then the lines can look too fat in fullscreen.\n    vec2 e = vec2(-1., 1.)*.66*ef/450.;  \n    \n    // The hit point value, and four nearby samples, spaced out in a tetrahedral fashion.\n\tfloat d1 = map(p + e.yxx), d2 = map(p + e.xxy);\n\tfloat d3 = map(p + e.xyx), d4 = map(p + e.yyy); \n    float d = map(p);\n    \n    // Edge calculation. Taking for samples around the hit point and determining how\n    // much they vary. Large variances tend to indicate an edge.\n    //crv = abs(d1 + d2 + d3 + d4 - d*4.);\n    //crv = smoothstep(0., 1., sqrt(crv/e.y*2.));\n    \n    crv = clamp((d1 + d2 + d3 + d4 - d*4.)*24. + .5, 0., 1.);\n    \n    // Recalculating for the normal. I didn't want the sample spacing to change from\n    // one resolution to the next. Hence, the fixed number. Just for the record, I tend\n    // to work within the 800 by 450 window. \n    e = vec2(-1., 1.)*.002;  \n\td1 = map(p + e.yxx), d2 = map(p + e.xxy);\n\td3 = map(p + e.xyx), d4 = map(p + e.yyy); \n    \n    // Normalizing.\n\treturn normalize(e.yxx*d1 + e.xxy*d2 + e.xyx*d3 + e.yyy*d4 );   \n}\n\n\n// I keep a collection of occlusion routines... OK, that sounded really nerdy. :)\n// Anyway, I like this one. I'm assuming it's based on IQ's original.\nfloat cao(in vec3 p, in vec3 n){\n\t\n    float sca = 1., occ = 0.;\n    for(float i=0.; i<5.; i++){\n    \n        float hr = .01 + i*.5/4.;        \n        float dd = map(n * hr + p);\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp(1.0 - occ, 0., 1.);    \n}\n\n\n// Cheap shadows are hard. In fact, I'd almost say, shadowing particular scenes with limited \n// iterations is impossible... However, I'd be very grateful if someone could prove me wrong. :)\nfloat softShadow(vec3 ro, vec3 lp, float k){\n\n    // More would be nicer. More is always nicer, but not really affordable... Not on my slow test machine, anyway.\n    const int maxIterationsShad = 20; \n    \n    vec3 rd = (lp-ro); // Unnormalized direction ray.\n\n    float shade = 1.0;\n    float dist = 0.05;    \n    float end = max(length(rd), 0.001);\n    //float stepDist = end/float(maxIterationsShad);\n    \n    rd /= end;\n\n    // Max shadow iterations - More iterations make nicer shadows, but slow things down. Obviously, the lowest \n    // number to give a decent shadow is the best one to choose. \n    for (int i=0; i<maxIterationsShad; i++){\n\n        float h = map(ro + rd*dist);\n        shade = min(shade, k*h/dist);\n        //shade = min(shade, smoothstep(0.0, 1.0, k*h/dist)); // Subtle difference. Thanks to IQ for this tidbit.\n        //dist += min( h, stepDist ); // So many options here: dist += clamp( h, 0.0005, 0.2 ), etc.\n        dist += clamp(h, 0.01, 0.25);\n        \n        // Early exits from accumulative distance function calls tend to be a good thing.\n        if (h<0.001 || dist > end) break; \n    }\n\n    // I've added 0.5 to the final shade value, which lightens the shadow a bit. It's a preference thing.\n    return min(max(shade, 0.) + 0.2, 1.0); \n}\n\n/*\n// Simple environment mapping. Pass the reflected vector in and create some\n// colored noise with it. The normal is redundant here, but it can be used\n// to pass into a 3D texture mapping function to produce some interesting\n// environmental reflections.\nvec3 eMap(vec3 rd, vec3 sn){\n    \n    vec3 tx = tex3D(iChannel0, rd, sn);\n    return tx*.5 + smoothstep(0.02, .8, tx);\n}\n*/\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Screen coordinates.\n\tvec2 u = (fragCoord - iResolution.xy*0.5)/iResolution.y;\n    \n    #ifdef THREE_D\n    float sg = sign(fragCoord.x - .5*iResolution.x);\n    u.x -= sg*.25*iResolution.x/iResolution.y;\n    #endif\n\t\n\t// Camera Setup.\n    float speed = 2.;\n    vec3 ro = camPath(iTime*speed + .0); // Camera position, doubling as the ray origin.\n    \n    vec3 lk = camPath(iTime*speed + .5);  // \"Look At\" position.\n    //ro.y -= .1; // Hack to lower the camera.\n    //lk.y -= .1;\n    \n    vec3 lp = camPath(iTime*speed + 2.); // Light position, somewhere near the moving camera.\n    lp.y += .5;\n    // Alternative. Moving the light to the right a bit. \n    //float th = 6.283*1./12.;\n    //lp += vec3(sin(th)*.6, cos(th)*.6, 0); \n    \n    #ifdef THREE_D\n    ro.x -= sg*.15; lk.x -= sg*.15; lp.x -= sg*.15;\n    #endif\n    \n\n    // Using the above to produce the unit ray-direction vector.\n    float FOV = .75; // FOV - Field of view.\n    vec3 fwd = normalize(lk-ro);\n    vec3 rgt = normalize(vec3(fwd.z, 0., -fwd.x )); \n    vec3 up = cross(fwd, rgt);\n\n    // Unit direction ray.\n    //vec3 rd = normalize(fwd + FOV*(u.x*rgt + u.y*up));\n    \n    // Mild lens distortion to fit more of the scene in, and to mix things up a little.\n    vec3 rd = fwd + FOV*(u.x*rgt + u.y*up);\n    rd = normalize(vec3(rd.xy, (rd.z - length(rd.xy)*.25)*.75));\n    \n    // Swiveling the camera from left to right when turning corners.\n    float swivel = camPath(lk.z).x;\n    rd.xy = rot(swivel/48. )*rd.xy;\n    rd.xz = rot(swivel/32. )*rd.xz;\n \n    \n    // Raymarch.\n    float t = trace(ro, rd);\n    \n    // Determine the object ID here. It's a more cumbersome method, but a saves a\n    // heap of sorting in the distance function, so is a lot faster.\n    vec2 vObj = objMin(vec2(vObjID.x, TUN), vec2(vObjID.y, BLT));\n    vObj = objMin(vObj, vec2(vObjID.z, ROD));\n    svObjID = vObj.y;\n    \n    // Surface hit point.\n    vec3 sp = ro + rd*t;\n    \n    // Offset path. It's handy to have an adjusted hit point \n    // that aligns with the path contour.\n    //vec3 pathSp = sp - camPath(sp.z);\n    \n    \n    // Normal with curvature component.\n    float crv = 1., ef = 8.; // ef - Edge and curvature factor.\n    \n    // Normal and curvature calculations.\n    vec3 sn = nrHyb(sp, crv, ef);\n    \n    //vec3 svN = sn; // Sometimes, it's handy to save the normal before bumpping it.\n    \n    // Shadows and ambient self shadowing.\n    float sh = softShadow(sp, lp, 16.); // Soft shadows.\n    float ao = cao(sp, sn); // Ambient occlusion.\n    \n    // Light direction vector setup and light to surface distance.\n    vec3 ld = lp - sp;\n    float lDist = max(length(ld), .0001);\n    ld /= lDist;\n    \n    // Attenuation.\n    float atten = 1./(1.0 + lDist*.25 + lDist*lDist*.025);\n    \n    // Texturing the object.\n    const float tSize0 = 1./1.;\n    vec3 tx = tex3D(iChannel0, sp*tSize0, sn);\n    tx = tx*.5 + smoothstep(0.02, .8, tx)*1.;\n \n    // Ugly \"if\" statements for object coloring. They do the job though. \n    float gr = dot(tx, vec3(.299, .587, .114));    \n    if(svObjID==TUN) tx *= vec3(1); \n\telse if(svObjID==ROD) tx = (gr*.5 + .5)*vec3(1);//vec3(1.25, 1, .75);\n    else if(svObjID==BLT) tx = (tx*.5 + .5)*vec3(1.4, .7, .05);\n\n \n    \n    // Diffuse, specular and Fresnel.\n    float dif = max(dot(ld, sn), 0.);\n    \n    float spe = pow(max(dot(reflect(rd, sn), ld), 0.), 64.);\n    //float fre = pow(clamp(dot(rd, sn) + 1., 0., 1.), 2.);\n    \n    // The specular looks a little too full on at particular angles, so I've had to do\n    // the Schlick thing to tone them down a little.\n    float Schlick = pow( 1. - max(dot(rd, normalize(rd + ld)), 0.), 5.0);\n    Schlick = mix(.5, 1., Schlick);\n    \n    // Ramp up the diffuse on the metallic objects.\n    if(svObjID!=TUN)\n        dif = (pow(dif, 4.)*.5 + pow(dif, 8.)*.5)*3.;\n\n  \n    /////////////////////\n    // Cheap reflection: Not entirely accurate, but the reflections are pretty subtle, so not much \n    // effort is being put in. By the way, this is really ugly, and there are definitely neater\n    // ways to get the job done.\n    //\n    vec3 ref = reflect(rd, sn); // Reflected ray. //svN*.1 + sn*.9\n    float rt = refTrace(sp + ref*0.1, ref); // Raymarch from \"sp\" in the reflected direction.\n    vObj = objMin(vec2(vObjID.x, TUN), vec2(vObjID.y, BLT));\n    vObj = objMin(vObj, vec2(vObjID.z, ROD));\n    svObjID2 = vObj.y;\n    float crv2 = 1.;\n    vec3 rsp = sp + ref*rt; // Reflected surface hit point.\n    vec3 rsn = nrRef(rsp, crv2, ef); // Normal at the reflected surface. //, cr2, ef\n\n    vec3 rCol = tex3D(iChannel0, rsp*tSize0, rsn);\n    rCol = smoothstep(0.02, .8, rCol)*2.;\n\n    gr = dot(rCol, vec3(.299, .587, .114)); \n    if(svObjID2==TUN) rCol *= vec3(1); \n    else if(svObjID2==ROD) rCol = (gr*.5 + .5)*vec3(1);\n    else if(svObjID2==BLT) rCol = (rCol*.5 + .5)*vec3(1.4, .7, .05);\n\n    float rDiff = max(dot(rsn, normalize(lp-rsp)), 0.); // Diffuse light at \"rsp.\"\n    float rSpec = pow(max(dot(reflect(ref, rsn), normalize(lp-rsp)), 0.), 8.); // Diffuse light at \"rsp.\"\n    float rlDist = length(lp - rsp);\n\n    if(svObjID2!=TUN) rDiff = (pow(rDiff, 4.)*.5 + pow(rDiff, 8.)*.5)*3.;\n\n    // Reflected color. Not entirely accurate, but close enough. \n    rCol = rCol*(rDiff + .25) + vec3(1., .6, .2)*rSpec*2.;\n    rCol *= 1./(1. + rlDist*0.25 + rlDist*rlDist*.025); \n    rCol *= min(crv2*1.5, 1.);\n    ///////////////////\n    \n     \n    // Combining the terms above to produce the final color.\n    // Note the ambient occlusion term in place of a constant ambient term. It makes for a subtle\n    // difference in ambient lighting in the corners. It's fake, obviously. :)\n    vec3 fc = tx*(dif + ao*.3) + vec3(1, .6, .2)*spe*Schlick*2.; // + vec3(1, .9, .7)*spot*4.\n    \n    \n    if(svObjID != TUN) fc += rCol*.5;\n    else fc += rCol*.25;\n    \n\n    \n    // Very uninspiring, fake environment mapping.. but much cheaper than the raymarched\n    // reflective pass above.\n    //fc += (dif*dif + spe)*eMap(reflect(rd, sn)/1.5, sn)*.15;\n    \n    \n       \n    fc *= atten*sh*ao;\n    //fc *= (1. - crv*.8);\n    fc *= clamp(crv*1.5, 0., 1.);\n    \n  \n    \n    // Mixing in some fog.\n    vec3 bg = vec3(1, .7, .4);\n    fc = mix(fc, bg*2., smoothstep(0., .95, t/FAR));\n    \n     \n    // Post processing.\n    //float gr = dot(fc, vec3(.299, .587, .114));\n    //fc = fc*.5 + pow(min(vec3(1.5, 1, 1)*gr, 1.), vec3(1, 3, 16))*.5;\n    \n     // Approximate gamma correction.\n\tfragColor = vec4(pow(clamp(fc, 0., 1.), vec3(1./2.)), 1.0); // 1./2.2, etc.\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}