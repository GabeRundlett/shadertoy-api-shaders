{
    "Shader": {
        "info": {
            "date": "1483976839",
            "description": "Some fun with folding space.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltVSDz",
            "likes": 5,
            "name": "Prismoid",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 674
        },
        "renderpass": [
            {
                "code": "// Based on https://www.shadertoy.com/view/Xt2XDt by Cabbibo\n\n#define PI 3.14159165\n\nconst int S = 100; // steps\nconst float D = 100.; // max distance\nconst float P = 0.001; // intersection precision\n\n//-------------------\n// Camera\n//-------------------\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n//-------------------\n// Modelling\n//-------------------\n\nvec2 map(in vec3 p)\n{\n    float s = 1000.;\n    for (int i = 0; i < 4; i++)\n    {\n        p = abs(p);\n        p -= .5;\n        pR(p.xz, sin(iTime * .001) * 90.);\n        pR(p.yx, sin(iTime * .001) * 90.);\n        s = min(s, sdTriPrism(p, vec2(.5)));\n    }\n    vec2 res = vec2(s, 1.);\n    return res;\n}\n\nvec2 trace(in vec3 ro, in vec3 rd)\n{\n    float h = P*2.;\n    float t = 0.;\n    float id = -1.;\n    float res = -1.;\n    \n    for (int i = 0; i < S; i++)\n    {\n        if (h<P || t>D) break;\n        vec3 r = ro + rd*t;\n        h = map(r).x;\n        t += h;\n        id = map(r).y;\n    }\n    \n    if (t < D) res = t;\n    if (t > D) id = -1.;\n    \n    return vec2(res, id);\n}\n\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n// From Connor Bell\nfloat softShadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render(in vec2 res, in vec3 ro, in vec3 rd)\n{\n    vec3 color = vec3(0.);\n    vec3 lightPos = vec3( 1. , 4. , 3. );\n    \n    if (res.y > -.5)\n    {\n        vec3 p = ro + rd*res.x;\n        vec3 norm = calcNormal(p);      \n        vec3 lightDir = normalize(lightPos - p);\n        float match = max( 0. , dot( lightDir , norm ));\n        float occ = calcAO(p, norm);\n        \n        if (res.y == 1.)\n        {\n            color = norm * match * occ * (1.0-calcAO(p, rd));\n        }\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0., 0., 4.);\n    vec3 ta = vec3(0., 0., 0.);\n    \n    // Camera Matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0. );  // 0.0 is the camera roll\n    \n    // Create view ray\n\tvec3 rd = normalize( camMat * vec3(uv.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = trace(ro, rd);\n    \n    vec3 color = render(res, ro, rd);\n    color = pow(color, vec3(.4545));\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}