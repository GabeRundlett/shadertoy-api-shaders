{
    "Shader": {
        "info": {
            "date": "1613031300",
            "description": "white: instant fps.  Very noisy: many applications ( e.g. to stick to 60 fps ) require smoothing.\nred: smooth timing ( iTimeDelta )       seems best\ngreen: smooth fps ( 1. / iTimeDelta )  very sensitive to outliers, despite longer smoothing delay used.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "Wt3BR2",
            "likes": 5,
            "name": "smooth fps",
            "published": 3,
            "tags": [
                "fps",
                "relaxation",
                "adaptive"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 572
        },
        "renderpass": [
            {
                "code": "// recycling https://shadertoy.com/view/tlcfRB\n\nvoid mainImage( out vec4 O, vec2 U ) { O = T(U); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (U==vec2(.5)) {\n        O.x = mix( T(0).x,    iTimeDelta, 1./5.  );  // relaxation on time\n        O.y = mix( T(0).y, 1./iTimeDelta, 1./20. );  // relaxation on fps\n     // O-=O;\n     // O = vec4(1e3);                               // stress tests\n        return;\n    }\n    \n    float y =  U.y/R.y;\n    O = U.x > 1.\n          ? T(U-vec2(1,0))                           // scroll\n          : vec4( y <  1./iTimeDelta/70.  );         // instant fps\n          \n    if (mod(iTime,10.) < 5. ) { // every 5 seconds, 5 secondes of time varing \n        if (U.x<1.) O.rg *= .9;\n        for( float i=0.; i < (.5+.5*sin(.3*6.28*iTime))*1e4; i++) O.a++;\n    }\n        \n    if (U.x<1.) O = mix(O, vec4(1,0,0,0), max(0.,1.-abs( y - 1./T(0).x/70. )/2.*R.y) ),\n                O = mix(O, vec4(0,1,0,0), max(0.,1.-abs( y -    T(0).y/70. )/2.*R.y) );\n                \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R     iResolution.xy\n#define T(U)  texelFetch( iChannel0 , ivec2(U) , 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}