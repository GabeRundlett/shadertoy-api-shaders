{
    "Shader": {
        "info": {
            "date": "1642032327",
            "description": "Pixel to hex test.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdlcDH",
            "likes": 0,
            "name": "Pixel to Hex",
            "published": 3,
            "tags": [
                "hex"
            ],
            "usePreview": 0,
            "username": "qtiki",
            "viewed": 45
        },
        "renderpass": [
            {
                "code": "struct Hex {\n    float q;\n    float r;\n    float s;\n};\n\nstruct Orientation {\n    float f0;\n    float f1;\n    float f2;\n    float f3;\n    float b0;\n    float b1;\n    float b2;\n    float b3;\n    float start_angle;\n};\n\nconst Orientation PointyOrientation = Orientation(sqrt(3.0), sqrt(3.0) / 2.0, 0.0, 3.0 / 2.0, sqrt(3.0) / 3.0, -1.0 / 3.0, 0.0, 2.0 / 3.0, 0.5);\nconst Orientation FlatOrientation = Orientation(3.0 / 2.0, 0.0, sqrt(3.0) / 2.0, sqrt(3.0), 2.0 / 3.0, 0.0, -1.0 / 3.0, sqrt(3.0) / 3.0, 0.0);\n\n#define POINTY\n\nvoid pixelToHex(out Hex hex, in vec2 p, in vec2 size, in vec2 origin) {\n    vec2 pt = vec2((p.x - origin.x) / size.x, (p.y - origin.y) / size.y);\n#ifdef POINTY\n    Orientation M = PointyOrientation;\n#else\n    Orientation M = FlatOrientation;\n#endif\n    hex.q = M.b0 * pt.x + M.b1 * pt.y;\n    hex.r = M.b2 * pt.x + M.b3 * pt.y;\n    hex.s = -hex.q - hex.r;\n}\n\nvoid roundHex(inout Hex hex) {\n    float qi = round(hex.q);\n    float ri = round(hex.r);\n    float si = round(hex.s);\n    float q_diff = abs(qi - hex.q);\n    float r_diff = abs(ri - hex.r);\n    float s_diff = abs(si - hex.s);\n    if (q_diff > r_diff && q_diff > s_diff)\n    {\n        qi = -ri - si;\n    }\n    else\n        if (r_diff > s_diff)\n        {\n            ri = -qi - si;\n        }\n        else\n        {\n            si = -qi - ri;\n        }\n    hex.q = qi;\n    hex.r = ri;\n    hex.s = si;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 size = vec2(50.0, 30.0);\n    vec2 origin = vec2(iResolution) / 2.0;\n    \n    origin += vec2(\n        sin(iTime * 0.5) * 500.0,\n        cos(iTime * 0.52) * 500.0\n    );\n\n    Hex hex = Hex(0.0, 0.0, 0.0);\n    \n    pixelToHex(hex, fragCoord, size, origin);\n    roundHex(hex);\n    \n    vec3 color = vec3(\n        sin(hex.q * 1.0) * 0.5 + 0.5,\n        sin(hex.r * 1.0) * 0.5 + 0.5,\n        sin(hex.s * 1.0) * 0.5 + 0.5\n    );\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}