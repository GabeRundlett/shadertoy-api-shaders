{
    "Shader": {
        "info": {
            "date": "1650761241",
            "description": "Simple sphere shading with phong",
            "flags": 0,
            "hasliked": 0,
            "id": "ftXBW8",
            "likes": 2,
            "name": "Sphere Shading",
            "published": 3,
            "tags": [
                "phong",
                "sphere",
                "shading"
            ],
            "usePreview": 0,
            "username": "VPaltoDance",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURFACE_ERROR 0.01\n\n\n#define LIGHT vec4(0.0, 5.0, 6.0, 10.0)\n#define RAY_ORIGIN vec3(0.0, 1.0, 0.0)\n#define RAY_DIRECTION normalize(vec3(uv.x, uv.y, 1.0))\n#define SPHERE_CENTER vec4(0.0, 1.0, 6.0, 1.0)\n\nfloat calculateDistance(vec3 point, out bool hitSphere)\n{    \n    float sphereDist = length(point - SPHERE_CENTER.xyz) - SPHERE_CENTER.w;\n    float planeDist = point.y;\n    \n    hitSphere = planeDist > sphereDist;\n    \n    return min(planeDist, sphereDist);\n}\n\nfloat calculateDistance(vec3 point)\n{    \n    float sphereDist = length(point - SPHERE_CENTER.xyz) - SPHERE_CENTER.w;\n    float planeDist = point.y;\n    \n    \n    return min(planeDist, sphereDist);\n}\n\nfloat RayMarch(vec3 rayOrigin, vec3 rayDelta, out bool hitSphere)\n{\n    float dist = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; ++i)\n    {\n        vec3 p = rayOrigin + rayDelta * dist;\n        float dS = calculateDistance(p, hitSphere);\n        dist += dS;\n        \n        if(dist > MAX_DIST || dist < SURFACE_ERROR) break;\n    }\n    \n    return dist;\n}\n\nfloat RayMarch(vec3 rayOrigin, vec3 rayDelta)\n{\n    float dist = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; ++i)\n    {\n        vec3 p = rayOrigin + rayDelta * dist;\n        float dS = calculateDistance(p);\n        dist += dS;\n        \n        if(dist > MAX_DIST || dist < SURFACE_ERROR) break;\n    }\n    \n    return dist;\n}\n\nvec3 calculateNormal(vec3 p) {\n\tfloat d = calculateDistance(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        calculateDistance(p-e.xyy),\n        calculateDistance(p-e.yxy),\n        calculateDistance(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat calculateDiffuseLighting(vec3 point)\n{\n    vec3 lightPos = LIGHT.xyz;\n    lightPos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightPos - point);\n    vec3 n = calculateNormal(point);\n    float d = length(lightPos - point);\n    \n    \n    float diff = clamp(dot(l, n), 0.0, 1.0) * LIGHT.w / d / d;\n    \n    float ray = RayMarch(point + n * 2.0 * SURFACE_ERROR, l);\n    if(ray< length(point - lightPos)) diff *= 0.1;\n    \n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y ;\n    \n    bool isSphere = false;\n    float dist = RayMarch(RAY_ORIGIN, RAY_DIRECTION, isSphere);\n    \n    vec3 point = RAY_ORIGIN + RAY_DIRECTION * dist;\n    \n    float diff = calculateDiffuseLighting(point);\n    \n    calculateDistance(RAY_ORIGIN);\n    \n    vec3 col = vec3(diff);\n    if(isSphere)\n        col *= vec3(0.5, 0.3, 0.7);\n    else\n        col *= vec3(0.5, 0.3, 0.1);\n        \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}