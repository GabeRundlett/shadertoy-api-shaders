{
    "Shader": {
        "info": {
            "date": "1452070091",
            "description": "Based on https://www.shadertoy.com/view/lss3zr",
            "flags": 0,
            "hasliked": 0,
            "id": "lddGDB",
            "likes": 10,
            "name": "Cubic Volume",
            "published": 3,
            "tags": [
                "3d",
                "volume"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 638
        },
        "renderpass": [
            {
                "code": "// 2016 David A Roberts <https://davidar.io>\n\n#define NUM_SAMPLES 64\n#define MAX_DEPTH 40.0\n#define ABSORPTION 10.0\n\n// Smooth HSV to RGB conversion <https://www.shadertoy.com/view/MsS3Wc>\nvec3 hsv2rgb_smooth(in vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat f(in vec3 p) {\n    return 0.5 * sin(p.x) * sin(p.y) * sin(p.z) + 0.25 * sin(iTime) + 0.5;\n}\n\nvoid mainImage(out vec4 r, in vec2 c) {\n    vec2 v = 2.0 * (c.xy / iResolution.xy) - 1.0;\n    v.x *= iResolution.x / iResolution.y;\n\n    vec2 mo = vec2(iTime/10., 3.*cos(iTime/4.));\n    if(iMouse.z > 0.) mo = 3.0 * iMouse.xy / iResolution.xy;\n\n    // camera by iq\n    vec3 p = 25.0*normalize(vec3(cos(2.75-3.0*mo.x), 0.7-1.0*(mo.y-1.0), sin(2.75-3.0*mo.x)));\n    vec3 ta = vec3(0.0, 1.0, 0.0);\n    vec3 ww = normalize(ta - p);\n    vec3 uu = normalize(cross(vec3(0,1,0), ww));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 dir = normalize(v.x*uu + v.y*vv + 1.5*ww);\n\n    vec4 col = vec4(0);\n    float T = 1.0;\n    for(int i = 0; i < NUM_SAMPLES; i++) {\n        float density = f(p);\n        density *= 1. - smoothstep(8.,12.,abs(p.x));\n        density *= 1. - smoothstep(8.,12.,abs(p.y));\n        density *= 1. - smoothstep(8.,12.,abs(p.z));\n        if(density > 0.) {\n            float u = ABSORPTION * density / float(NUM_SAMPLES);\n            col += u * T * vec4(hsv2rgb_smooth(vec3(density,1,1)),1);\n            T *= 1. - u;\n        }\n        p += dir * MAX_DEPTH / float(NUM_SAMPLES);\n    }\n    r = col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}