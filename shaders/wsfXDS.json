{
    "Shader": {
        "info": {
            "date": "1552001059",
            "description": "My first experiment with cellular noise! I had a lot of fun :) The code is messy sorry... Hope you'll like it :D",
            "flags": 0,
            "hasliked": 0,
            "id": "wsfXDS",
            "likes": 166,
            "name": "[TWITCH] Sous l'ocean",
            "published": 3,
            "tags": [
                "2d",
                "mosaic",
                "voronoise",
                "twitch",
                "stainedglass"
            ],
            "usePreview": 0,
            "username": "Flopine",
            "viewed": 7583
        },
        "renderpass": [
            {
                "code": "// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot and Alkama for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Cookie Collective rulz\n\n#define time iTime\n#define PI 3.141592\n\n\nvoid moda (inout vec2 uv, float rep)\n{\n    float per = 2.*PI/rep;\n    float a = atan(uv.y,uv.x);\n    float l = length(uv);\n    a = mod(a-per/2., per)-per/2.;\n    uv = vec2(cos(a), sin(a))*l;\n}\n\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n\nvec2 rand (vec2 x)\n{return fract(sin(vec2(dot(x, vec2(1.2,5.5)), dot(x, vec2(4.54,2.41))))*4.45);}\n\n\n// voronoi function which is a mix between Book of Shaders : https://thebookofshaders.com/12/?lan=en\n// and iq article : https://iquilezles.org/articles/voronoilines\nvec3 voro (vec2 uv)\n{\n    vec2 uv_id = floor (uv);\n    vec2 uv_st = fract(uv);\n\n    vec2 m_diff;\n    vec2 m_point;\n    vec2 m_neighbor;\n    float m_dist = 10.;\n\n    for (int j = -1; j<=1; j++)\n    {\n        for (int i = -1; i<=1; i++)\n        {\n            vec2 neighbor = vec2(float(i), float(j));\n            vec2 point = rand(uv_id + neighbor);\n            point = 0.5+0.5*sin(2.*PI*point+time);\n            vec2 diff = neighbor + point - uv_st;\n\n            float dist = length(diff);\n            if (dist < m_dist)\n            {\n                m_dist = dist;\n                m_point = point;\n                m_diff = diff;\n                m_neighbor = neighbor;\n            }\n        }\n    }\n\n    m_dist = 10.;\n    for (int j = -2; j<=2; j++)\n    {\n        for (int i = -2; i<=2; i++)\n        {\n            if (i==0 && j==0) continue;\n            vec2 neighbor = m_neighbor + vec2(float(i), float(j));\n            vec2 point = rand(uv_id + neighbor);\n            point = 0.5+0.5*sin(point*2.*PI+time);\n            vec2 diff = neighbor + point - uv_st;\n            float dist = dot(0.5*(m_diff+diff), normalize(diff-m_diff));\n            m_point = point;\n            m_dist = min(m_dist, dist);\n        }\n    }\n\n    return vec3(m_point, m_dist);\n}\n\n\nvec3 blue_grid (vec2 uv, float detail)\n{\n    uv *= detail;\n    vec3 v = voro(uv);\n    return clamp(vec3(v.x*0.8, v.y,1.)*smoothstep(0.05,0.07, v.z),0.,1.);\n}\n\n\nvec3 green_grid (vec2 uv, float detail)\n{\n    uv *= detail;\n    vec3 v = voro(uv);\n    return clamp(vec3(v.x, 1. ,v.y)*smoothstep(0.05,0.07, v.z),0.,1.);\n}\n\n\nvec3 red_grid (vec2 uv, float detail)\n{\n    uv *= detail;\n    vec3 v = voro(uv);\n    return clamp(vec3(1.,v.x, v.y)*smoothstep(0.05,0.07, v.z),0.,1.);\n}\n\n\nvec3 magenta_grid (vec2 uv, float detail)\n{\n    uv *= detail;\n    vec3 v = voro(uv);\n    return clamp(vec3(1.,v.y*0.8, v.x*4.)*smoothstep(0.05,0.07, v.z),0.,1.);\n}\n\n\nfloat ground_mask1 (vec2 uv, float offset)\n{\n    uv.y += 0.2;\n    uv.y += sin(uv.x*3.)*0.08;\n    return step(uv.y,0.-offset);\n}\n\n\nfloat ground_mask2 (vec2 uv, float offset)\n{\n    uv.y += 0.37;\n    uv.y -= sin(uv.x*3.)*0.08;\n    return step(uv.y,0.-offset);\n}\n\n\nfloat seaweed_mask (vec2 uv, float offset)\n{\n\n    vec2 uu = uv;\n    uv.x = abs(uv.x);\n    uv.x -=.7;\n    uv.y += 0.8;\n    uv.x += sin(uv.y*8.+time)*0.05;\n    float line = step(abs(uv.x), (0.1-uv.y*0.1)-offset);\n\n    uv = uu;\n    uv.x = abs(uv.x);\n    uv.x -= 0.4;\n    uv.y += 1.1;\n    uv.x += sin(uv.y*4.-time)*0.05;\n    float line2 = step(abs(uv.x), (0.1-uv.y*0.1)-offset);\n\n    uv = uu;\n    uv.y += 1.8;\n    uv.x += sin(uv.y*4.-time)*0.05;\n    float line3 = step(abs(uv.x), (0.2-uv.y*0.1)-offset);\n    return line + line2 + line3;\n}\n\n\nfloat sun_mask (vec2 uv, float offset)\n{\n    uv -= vec2(0.4,0.2);\n    uv *= rot(time*0.15);\n    float s = step(length(uv),0.18 - offset);\n\n    moda(uv,5.);\n    float l = step(abs(uv.y), (0.02+uv.x*0.1)-offset);\n    return s + l;\n}\n\n\nvec3 ground (vec2 uv)\n{\n    float m1 = clamp(ground_mask1(uv,0.01) - ground_mask2(uv, 0.) - seaweed_mask(uv,0.),0.,1.);\n    float m2 = clamp(ground_mask2(uv,0.01)- seaweed_mask(uv,0.),0.,1.);\n    return red_grid(uv,28.) * m2 + magenta_grid(uv,20.) * m1;\n}\n\n\nvec3 seaweed (vec2 uv)\n{\n    return green_grid(uv,35.) * seaweed_mask(uv,0.01);\n}\n\n\nvec3 sun (vec2 uv)\n{\n    float m1 = clamp(sun_mask(uv,0.01) -  (ground_mask1(uv,0.) + ground_mask2(uv,0.) + seaweed_mask(uv,0.)),0.,1.);\n    return red_grid((uv-vec2(0.4,0.2))*rot(time*0.15),18.)*m1;\n}\n\n\nvec3 sky (vec2 uv)\n{\n    float m1 = clamp(1. - (ground_mask1(uv,0.) + ground_mask2(uv,0.) + seaweed_mask(uv,0.) + sun_mask(uv,0.)),0.,1.);\n    return blue_grid(uv,13.)*m1;\n}\n\n\nvec3 framed (vec2 uv)\n{\n    return ground(uv) + seaweed(uv) + sky(uv) + sun(uv);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 col = framed(uv);\n    \n  fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}