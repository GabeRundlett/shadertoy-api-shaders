{
    "Shader": {
        "info": {
            "date": "1665484213",
            "description": "Raymarching the RGBA 3D noise texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlKBDK",
            "likes": 9,
            "name": "Dreams of Cloud Iridescence",
            "published": 3,
            "tags": [
                "raymarching",
                "noise"
            ],
            "usePreview": 0,
            "username": "Yetman",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "#define STEPS 128\n#define DISTANCE 0.8\n\n#define START vec3(0.006, 0.01, 0.2)\n#define VELOCITY vec3(0.0, 0.0, 0.02)\n\n#define LAYER_1_SCALE 2.0\n#define LAYER_1_VELOCITY vec3(0.005)\n#define LAYER_1_POWER 0.3\n#define LAYER_2_SCALE 4.0\n#define LAYER_2_VELOCITY vec3(0.05)\n#define LAYER_2_POWER 0.1\n\n#define LUM_FACTORS vec3(0.3, 0.59, 0.11)\n#define THRESHOLD 0.55\n#define SMOOTHNESS 0.05\n\n#define ALPHA_FAC vec2(0.04, 0.5)\n#define VOID_COLOR vec3(0.1)\n\n#define SPLITTONE_SHADOWS vec3(0.3, 0.0, 0.4)\n#define SPLITTONE_HIGHLIGHTS vec3(1.0, 0.7, 0.1)\n\n// Pegtop's Soft Light Formula\nvec3 SoftLight(vec3 a, vec3 b)\n{\n    return ((1.0 - 2.0 * b) * a + 2.0 * b) * a;\n}\n\n// Adapted from https://catlikecoding.com/unity/tutorials/custom-srp/color-grading/\nvec3 splitToning (vec3 color) {\n    float lum = dot(LUM_FACTORS, color);\n\tvec3 shadows = mix(vec3(0.5), SPLITTONE_SHADOWS, 1.0 - lum);\n\tvec3 highlights = mix(vec3(0.5), SPLITTONE_HIGHLIGHTS, lum);\n\tcolor = SoftLight(color, shadows);\n\tcolor = SoftLight(color, highlights);\n\treturn color;\n}\n\n// Source: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec4 soft_sample(sampler3D tex, vec3 p) {\n\n    vec3 size = vec3(textureSize(tex, 0));\n    vec3 texel = fract(p) * size - 0.5;\n    \n    vec3 whole = floor(texel), fraction = fract(texel);\n    \n    // Make fractions smooth\n    //fraction = mix(fraction * fraction, sqrt(fraction), fraction);\n    fraction = smoothstep(0.0, 1.0, fraction);\n    \n    return texture(tex, (whole + fraction + 0.5) / size);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float noise = texture(iChannel1, fragCoord / iChannelResolution[1].xy).r;\n    \n    vec3 ray = normalize(vec3((fragCoord - iResolution.xy * 0.5) / iResolution.y * 2.0, 1.0));\n    vec3 march_step = ray * DISTANCE / float(STEPS);\n    vec3 pos = START + VELOCITY * iTime + march_step * (float(STEPS - 1) + noise);\n    \n    vec3 accum = vec3(0.0);\n    for(int i = STEPS - 1; i >= 0; --i){\n        pos -= march_step;\n        \n        vec3 color = texture(iChannel0, pos.xyz).rgb;\n        color = mix(color, soft_sample(iChannel0, pos.xyz * LAYER_1_SCALE + iTime * LAYER_1_VELOCITY).rgb, LAYER_1_POWER);\n        color = mix(color, soft_sample(iChannel0, pos.xyz * LAYER_2_SCALE + iTime * LAYER_2_VELOCITY).rgb, LAYER_2_POWER);\n        \n        float threshold = smoothstep(THRESHOLD, THRESHOLD + SMOOTHNESS, dot(LUM_FACTORS, color));\n        \n        float alpha = mix(ALPHA_FAC.x, ALPHA_FAC.y, threshold);\n        \n        color = max(vec3(0.0), color * (1.0 + THRESHOLD) - THRESHOLD);\n        color = mix(ALPHA_FAC.x * VOID_COLOR, ALPHA_FAC.y * color, threshold);\n        \n        accum = color + accum * (1.0 - alpha);\n    }\n\n    fragColor = vec4(splitToning(ACESFilm(accum)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}