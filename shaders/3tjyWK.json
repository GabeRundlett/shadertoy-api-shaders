{
    "Shader": {
        "info": {
            "date": "1595371906",
            "description": "Glowy circles\n\nThis is mostly a copy/variation of Shiny Circle by phil https://www.shadertoy.com/view/ltBXRc\n ",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjyWK",
            "likes": 7,
            "name": "More Shiny Circles",
            "published": 3,
            "tags": [
                "2d",
                "circles"
            ],
            "usePreview": 0,
            "username": "goncalopalaio",
            "viewed": 471
        },
        "renderpass": [
            {
                "code": "// Inspired by Shiny Circle by phil (https://www.shadertoy.com/view/ltBXRc)\n\nfloat variation(vec2 v1, vec2 v2, float variationStrength) {\n return sin(dot(normalize(v1), normalize(v2))* variationStrength + iTime * 2.0) / 100.0;\n}\n\nmat2 rotate2d(float angle) {\n\treturn mat2(cos(angle), -sin(angle),\n                sin(angle),  cos(angle));\n}\n\nvec3 paintCircle(vec2 uv, vec2 center, float radius, float width, float variationStrength) {\n \n    vec2 diff = center - uv;\n    float len = length(diff);\n    \n    // Make resulting line all wobly by adding some variation based on the dot product of the direction from center with both axis. \n    len += variation(diff, vec2(0.0, 1.0), variationStrength);\n    len -= variation(diff, vec2(1.0, 0.0), variationStrength);\n    \n    \n    // Add a circle in the middle\n    float circle = smoothstep(radius - width, radius, len);\n    // Add a circle on the outside, leaving a white line in the middle between both circles \n    circle -= smoothstep(radius, radius + width, len);\n    \n    return vec3(circle);\n}\n\nvec3 paintOne(vec2 uv, vec2 center, float radius, float variationStrength) {\n\t\n    // Full white circle in the middle\n\tvec3 col = paintCircle(uv, center, radius, 0.05, variationStrength);\n    \n    // Add white circle will be outside of the previous one\n    col += paintCircle(uv, center, radius, 0.01, variationStrength);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // hacky way of having this rendered proportionally\n    vec2 uv = fragCoord/iResolution.xx;\n    vec2 center = vec2(0.5, 0.28);\n    float radius = 0.15;\n\n    vec3 col = paintOne(uv, center, radius, 5.0);\n    col += paintOne(uv, center, radius * 1.2, 0.0);\n    \n    // Color with gradient that pulses around\n    // vec2 v = rotate2d(iTime) * uv;\n    // col *= vec3(v.y, v.x, 0.8 - v.y * v.x);\n \tcol *= 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}