{
    "Shader": {
        "info": {
            "date": "1710249208",
            "description": "ease functions",
            "flags": 0,
            "hasliked": 0,
            "id": "M3BXzh",
            "likes": 4,
            "name": "ease functions",
            "published": 3,
            "tags": [
                "easefunctions"
            ],
            "usePreview": 0,
            "username": "kenshin",
            "viewed": 136
        },
        "renderpass": [
            {
                "code": "#define T iTime * .3\n\nfloat x2(float x)\n{\n    return x * x;\n}\n\nfloat OverShoot(float x, float n, float k)\n{\n    float s = x * x * (3. - 2. * x);\n    float a = n * x * x;\n    float b = 1. - k * x2(x - 1.);\n    return a * (1. - s) + b * s;\n}\n\nvec3 Dot(vec2 uv, float x, float y, vec3 color)\n{\n    x = mix(-.8, .8, x);\n    return smoothstep(.008, .0, length(uv - vec2(x, y)) - .03) * color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    vec3 col = vec3(.0);\n    float x = min(T, 1.);\n    if(abs(abs(uv.x) - 0.8) < 0.003) col += .6;\n    col += Dot(uv, x, .45, vec3(.8, .2 ,.3));//linear\n    col += Dot(uv, x * x, .25, vec3(.2, .5, .8));//ease in\n    col += Dot(uv, 1. - x2(x - 1.), .05, vec3(.3, .8, .2));//ease out\n    col += Dot(uv, x * x * (3. - 2. * x), -.15, vec3(.7, .2, .9));//smooth\n    col += Dot(uv, OverShoot(x, 3.5, 3.5), -.35, vec3(.5, .5, .5));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}