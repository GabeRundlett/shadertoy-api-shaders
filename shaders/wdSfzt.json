{
    "Shader": {
        "info": {
            "date": "1590594606",
            "description": "Inspired by https://www.shadertoy.com/view/4lcyzn\n\nUsing web palette with 6 values per color channel giving 216 colors.\nFirst closest and second closest color search is O(1), no loops.\nDoesn't use any YUV conversion. RGB only.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wdSfzt",
            "likes": 2,
            "name": "ordered dithering web palette",
            "published": 3,
            "tags": [
                "dithering"
            ],
            "usePreview": 0,
            "username": "bgeradz",
            "viewed": 516
        },
        "renderpass": [
            {
                "code": "// Inspired by https://www.shadertoy.com/view/4lcyzn\n\n// TODO: divide by 16\nconst float threshold16[16] = float[16](\n    0., 8., 2., 10., \n    12., 4., 14., 6.,\n    3.,11.,1.,9.,\n    15.,7.,13., 5.\n);\n\n// TODO: floats, divide by 64\nconst int threshold64[64] = int[64](\n    0, 48, 12, 60, 3, 51, 15, 63,\n    32, 16, 44, 28, 35, 19, 47, 31,\n    8,  56, 4,  52, 11, 59, 7,  55,\n    40, 24, 36, 20, 43, 27, 39, 23,\n    2,  50, 14, 62, 1,  49, 13, 61,\n    34, 18, 46, 30, 33, 17, 45, 29,\n    10, 58, 6,  54, 9,  57, 5,  53,\n    42, 26, 38, 22, 41, 25, 37, 21\n);\n\n// use 8x8 or 4x4 threshold matrix\nconst bool is64 = true;\n\n// Quantize to 6 values per color channel\n// Byte values: 0, 51, 102, 153, 204, 255\n// eventually converted to range 0..1\nfloat quantizeFloor(float value) {\n    return (floor(value * 5.0) * 51.0) / 255.0;\n}\nfloat quantizeCeil(float value) {\n    return (ceil(value * 5.0) * 51.0) / 255.0;\n}\nfloat quantizeRound(float value) {\n    return (round(value * 5.0) * 51.0) / 255.0;\n}\n\n\n// value 0..1\nbool choose(int x, int y, float value) {\n    float t;\n    if (is64) {\n        t = float(threshold64[8*y+x]) / 64.;\n    } else {\n        t = threshold16[4*y+x] / 16.;\n    }\n    \n    return value < t;\n}\n\n\n// use monochrome palette\nvec3 palMonochrome(int x, int y, vec3 rgbColor) {\n    // https://en.wikipedia.org/wiki/Luma_(video)\n    float lum = dot(vec3(0.2126, 0.7152, 0.0722), rgbColor.rgb);\n    \n    float value = choose(x, y, lum) ? 0. : 1.;\n    return vec3(value);\n}\n\n// Use web palette (part of gif default palette).\n// 6 color values per channel, total of 216 colors.\nvec3 palWeb(int x, int y, vec3 rgbColor) {\n    // Two closest colors.\n    vec3 qFloor = vec3(\n        quantizeFloor(rgbColor.r),\n        quantizeFloor(rgbColor.g),\n        quantizeFloor(rgbColor.b)\n    );\n\n    vec3 qCeil = vec3(\n        quantizeCeil(rgbColor.r),\n        quantizeCeil(rgbColor.g),\n        quantizeCeil(rgbColor.b)\n    );\n\t\n    \n    float r = choose(x, y, (rgbColor.r - qFloor.r) / (qCeil.r - qFloor.r))\n        ? qFloor.r : qCeil.r;\n    \n    float g = choose(x, y, (rgbColor.g - qFloor.g) / (qCeil.g - qFloor.g))\n        ? qFloor.g : qCeil.g;\n    \n    float b = choose(x, y, (rgbColor.b - qFloor.b) / (qCeil.b - qFloor.b))\n        ? qFloor.b : qCeil.b;\n    \n    return vec3(r, g, b);\n}\n    \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n\n    // https://en.wikipedia.org/wiki/Ordered_dithering\n   \tint x = int(fragCoord.x) % (is64 ? 8 : 4);\n    int y = int(fragCoord.y) % (is64 ? 8 : 4);\n    \n    // vec3 paletteColor = palMonochrome(x,y, col.rgb);\n    vec3 paletteColor = palWeb(x,y, col.rgb);\n \n\t// Output to screen\n\tfragColor = vec4(paletteColor, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}