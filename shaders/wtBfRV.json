{
    "Shader": {
        "info": {
            "date": "1599327956",
            "description": "Polar coordinates distorted by perlin noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtBfRV",
            "likes": 8,
            "name": "Yet another plasma",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "codecontemplator",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "float mirrored(float v) {\n    float m = mod(v, 2.0);\n    return mix(m, 2.0 - m, step(1.0, m));\n}\n\n//\tClassic Perlin 2D Noise \n//\tby Stefan Gustavson\n//\n// ref: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ar = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - vec2(1.0);\n\tuv.y /= ar;\n      \n\tvec2 uvd = uv + cnoise(uv+vec2(0.4,0.3)*iTime);\n    float r = mirrored(length(uvd)*1.5);\n    float a = atan(uvd.y, uvd.x);\n    \n    float cr = sin(r*10.0+iTime) * 0.5 + 0.5;\n    float ca = sin(a+iTime) * 0.25 + 0.5;\n    float c = cr*ca;\n    vec3 col = vec3(c);\n    vec3 col2 = 0.5 + 0.5*cos(iTime+uvd.xyx+vec3(0,2,4));\n    //col = mix(col, col2, 0.5);\n    col = col * col2;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}