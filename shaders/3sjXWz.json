{
    "Shader": {
        "info": {
            "date": "1553472168",
            "description": "My first raymarching experiment based on \"Raymarching for Dummies\" from \"The Art of Code\" (https://youtu.be/PGtv-dBi2wE)",
            "flags": 0,
            "hasliked": 0,
            "id": "3sjXWz",
            "likes": 1,
            "name": "Smurf Gum in Vanilla Cream",
            "published": 3,
            "tags": [
                "raymarching",
                "beginner",
                "experiment"
            ],
            "usePreview": 0,
            "username": "sy2002",
            "viewed": 494
        },
        "renderpass": [
            {
                "code": "/* Smurf Gum in Vanilla Cream - First Raymarching Experiment\n   inspired by \"Raymarching for Dummies\" tutorial from \"The Art of Code\" (https://youtu.be/PGtv-dBi2wE)\n   done by sy2002 on 24th of March 2019\n*/\n\n#define MAX_STEPS\t\t200\n#define\tMAX_DIST\t\t100.0\n#define SURFACE_DIST\t0.01\n\n#define IS_FLOOR\t\t1.0\n#define IS_OBJECT\t\t2.0\n\n//in Raymarching, the distance function equals the scene description\n//the first scalar represents the object type, the second the actual distance\nvec2 GetDist(vec3 p)\n{    \n    //distance to sphere = distance to center of sphere minus radius\n    //y-pos and radius vary over time in some sin/cos pattern\n\tvec4 sphere = vec4(0, 1.0, 6, 1.0);\n    sphere.y += 1.0 * cos(iTime/2.0);\n    sphere.w += abs(sin(iTime / 3.0));\n    float dS = length(p - sphere.xyz) - sphere.w;\n    \n    //displace the body of the sphere according to the x-position and the time\n    dS += 0.2 * sin(sin(iTime/3.0)*7.0*p.x) * cos(iTime);\n    \n    //distance to ground plane is just height of camera due to our simple scene\n    float dP = p.y + 0.01 * sin(p.x * 5.0 + iTime);\n    \n\t//the object that is closest, wins\n    vec2 retval = vec2(0);\n    if (dP < dS)\n        retval.x = IS_FLOOR;\n    else\n        retval.x = IS_OBJECT;\n    \n    //mix the two distances with an intensity that depends on how close they are\n    float k = 0.5;\n    float h = clamp(0.5 + 0.5*(dP-dS)/k, 0.0, 1.0);\n    retval.y = mix(dP, dS, h) - k*h*(1.0-h);\n    \n    return retval;\n}\n\n//return the distance to the first object that the ray hits\n//the first scalar represents the object type, the second the actual distance\nvec2 RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.0; //distance from origin\n    vec2 retval = vec2(0);\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + dO*rd;\t//march the ray\n        retval = GetDist(p);\n        float dS = retval.y;\t//minimum distance from surface relative to p\n        dO += dS;\t\t\t\t//it is safe to march at least the distance dS without intersecting\n        \n        //approached surface close enough OR reached \"infinity\"\n\t\tif (dS < SURFACE_DIST || dO > MAX_DIST)\n            break;\n    }\n    \n    retval.y = dO;\t\t\t\t//retval.x is the detected object type\n    return retval;\n}\n\n//this is still magic to me, note to self: learn more\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p).y;\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3 (\n        GetDist(p - e.xyy).y,\n        GetDist(p - e.yxy).y,\n        GetDist(p - e.yyx).y\n    );\n    return normalize(n);\n}\n\n//simple diffuse light model: maximum intensity, when the light ray is perpendicular\n//to the surface and zero intensity, when it is parallel: this is the dot product\n//between the normalized normal vector of the surface and the light\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(-0.9, 0.9, 1.9);\n    //lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    vec3 l = normalize(lightPos - p);\t//light vector\n    vec3 n = GetNormal(p);\t\t\t\t//perpendicular to surface\n    \n    //the dot product delivers a value between -1..1, we need 0..1, so clamp it\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n        \n    return dif;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //normalized and aspect ratio corrected pixel coordinates from -1 to 1\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //ro = ray origin = camera\n    //rd = ray direction\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n \n    //distance to the nearest object\n    vec2 retval = RayMarch(ro, rd);\n    float object = retval.x;\n    float d = retval.y;\n    \n    if (d < MAX_DIST) //Vanilla Cream + Smurf Gum\n    {\n        //light that point using diffuse lighting\n        vec3 p = ro + rd*d;\n        float dif = GetLight(p);\n        if (object == IS_FLOOR)\n            col = vec3(0.92, 0.92, 0.65) * vec3(dif) * 1.1 + 0.1;\n        else\n        \tcol = vec3(0.0, 0.7, 1.0) * vec3(dif) * 1.2 + vec3(0.05, 0.05, 0.2);\n    }\n    else //sky\n    {\n        const vec3 left  = vec3(0.698, 0.996, 0.980);\n        const vec3 right = vec3(0.055, 0.824, 0.969);\n        col = mix(left, right, (fragCoord.x / iResolution.x) * (fragCoord.y / (0.4*iResolution.y))) - 0.05; \n    }\n    \n    //output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}