{
    "Shader": {
        "info": {
            "date": "1639254226",
            "description": "Renders an autostereogram — replace get_color with get_debug_color in mainImage to see the source image's normals.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftcSDr",
            "likes": 6,
            "name": "Raymarched Autostereogram",
            "published": 3,
            "tags": [
                "autostereogram"
            ],
            "usePreview": 0,
            "username": "personalizedrefrigerator",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "/*\n\n    Copyright (c) 2021 H Heino\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ \n\n#define MAX_MARCH_STEPS 40\n#define MAX_DEPTH 40.3\n#define MIN_STEP 0.001\n#define SMALL 0.001\n\nconst float CAM_Z = -2.0;\nconst float SCREEN_Z = 0.1;\nconst vec3 EYES[2] = vec3[2]( vec3(0.0, 0.0, CAM_Z), vec3(0.1, 0.0, CAM_Z) );\n\nfloat map(vec3 p)\n{\n    float orbiterX = 0.5 * sin(iTime);\n    float orbiterZ = 0.5 * cos(iTime);\n    \n    // Stretch everything — emphasize depth!\n    p = vec3(p.x, p.y, p.z / 3.0);\n    \n    //p = vec3(p.x - floor(p.x/10.0) * 10.0, p.y, p.z);\n    return min(\n        Sphere_SDF(p, Sphere(vec3(0.0, 0.0, -CAM_Z), 0.5)),\n        Sphere_SDF(p, Sphere(vec3(orbiterX, orbiterZ, -CAM_Z), 0.3))\n    );\n}\n\n/// Return the depth of the scene that [ray].\nfloat get_depth(in Ray ray)\n{\n    float dist = 0.0;\n    ray.direction = normalize(ray.direction);\n    \n    // March the ray!\n    for (int i = 0; i < MAX_MARCH_STEPS; i++)\n    {\n        vec3 p = ray.origin + dist * ray.direction;\n        \n        if (abs(p.z) > MAX_DEPTH)\n        {\n            return MAX_DEPTH;\n        }\n        \n        float currentDist = map(p);\n        \n        dist += currentDist;\n        \n        if (abs(currentDist) < MIN_STEP)\n        {\n            return dist;\n        }\n    }\n    \n    return dist;\n}\n\nvec3 get_hit_pt(in Ray ray)\n{\n    float depth = get_depth(ray);\n    return ray.origin + depth * ray.direction;\n}\n\nvec3 proj_to_screen(vec3 pt, vec3 rel_to)\n{\n    vec3 dir = normalize(pt - rel_to);\n    return dir / dir.z * (SCREEN_Z - rel_to.z);\n}\n\nvec3 screen_to_world(vec2 pt)\n{\n    return vec3(pt, SCREEN_Z);\n}\n\n/// Get the color \nvec3 get_color(vec2 p)\n{\n    // Cast right\n    for (int i = 0; i < 60; i++) {\n        vec3 w1 = get_hit_pt(Ray(EYES[1], screen_to_world(p) - EYES[1]));\n        vec2 s1 = proj_to_screen(w1, EYES[0]).xy;\n        \n        if (s1.x > -1.0) {\n            p = s1;\n        } else {\n            break;\n        }\n    }\n    \n    // Change background position with time.\n    vec2 timeDisplacement = vec2(sin(iTime / 32.0), cos(iTime / 24.0));\n    vec3 col = texture(iChannel0, abs(vec2(sin(p.x), p.y) - timeDisplacement) * 8.0).rgb;\n    \n    return col;\n}\n\n\nvec3 getNormal(in vec3 p)\n{\n    float distAt = map(p);\n\n    return normalize(vec3\n    (\n        map(p + vec3(SMALL, 0.0, 0.0)) - distAt,\n        map(p + vec3(0.0, SMALL, 0.0)) - distAt,\n        map(p + vec3(0.0, 0.0, SMALL)) - distAt\n    ));\n}\n\nvec3 get_depth_map(vec2 p)\n{\n    Ray r = Ray(EYES[1], vec3(p, 1.0));\n    float depth = get_depth(r);\n    \n    vec3 world = r.origin + depth * r.direction;\n    return 1.0 - vec3(depth) / MAX_DEPTH;\n}\n\n\nvec3 get_debug_color(vec2 p)\n{\n    Ray r = Ray(EYES[1], vec3(p, 1.0));\n    float depth = get_depth(r);\n    \n    vec3 world = r.origin + depth * r.direction;\n    vec3 norm = getNormal(world);\n    \n    return norm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy/2.0) / iResolution.x;\n    vec3 col = get_color(uv);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n};\n\n// Get the distance from a point to a sphere.\nfloat Sphere_SDF(vec3 point, in Sphere sphere)\n{\n    return length(sphere.center - point) - sphere.radius;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}