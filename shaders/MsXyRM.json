{
    "Shader": {
        "info": {
            "date": "1487415538",
            "description": "see also version exposing all stack operations: [url]https://www.shadertoy.com/view/ldXyRM[/url]\n\nCostly, and perf depends on stack size... even if unused !\nsize <= 61: 27 fps   size <= 252: 14 fps  then   10 fps.\n[update]: did no change, but now 60 fps!\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MsXyRM",
            "likes": 4,
            "name": "recursion (stack-based) ",
            "published": 3,
            "tags": [
                "stack",
                "bug",
                "recursion",
                "factorial",
                "switch",
                "webgl2"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 2366
        },
        "renderpass": [
            {
                "code": "// === How to simulate a recursive function with a stack ======================\n// See version with only stack operations: https://www.shadertoy.com/view/ldXyRM\n\nfloat fact(float n) // -- factorial(n)\n{\n    const int MAX=20;\n    float stack[MAX];  int z=0, t=0;  \n    #define push(v)       stack[z++] = v\n    #define pop()         stack[--z]\n    #define empty()       z==0\n\n    int mode; const int CALL=1, RETURN=0;\n    #define CALL(v)     { SAVE_CTX; push(v); mode = CALL;   }\n    #define RETURN(v)   { push(v); mode = RETURN; }\n    #define SAVE_CTX      push(n)\n    #define RESTORE_CTX   n = pop()\n    #define GET_PARAM     pop()\n    #define GET_RETURN    pop(); RESTORE_CTX\n   \n// the recursive function to reproduce :    \n//    if (n<2.) return 1;\n//       else {\n//              float v = fact(n-1); \n//              return v * n; \n//            }\n\n    CALL(n);                       // first eval\n    \n    do { \n       if (mode==CALL) {           // recursion engine\n    // switch(mode) { \n      // case CALL: {              // NB: switch is buggy on windows, especially with return\n           n = GET_PARAM;\n            if (n<2.) RETURN(1.) \n                 else CALL(n-1.); \n        //  break; }\n       } else {  \n        //case RETURN: {\n            float v = GET_RETURN; \n            if (empty()) return v; // recursive computation finished\n            RETURN(v*n);\n         // break; }\n         }\n       } while(t++<100 && z<MAX); // overflow check (or computer can freeze !)\n\n    return -1.;        \n}\n\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n\tU /= iResolution.xy;\n    #define N 15.\n    float x = floor(N*U.x), f = fact(x);\n    U.y -= .2;\n\tO = U.y<0. ? vec4(x/N)                     // x\n               : f<0. ? vec4(1,0,0,0)          // error\n                      : step(U.y, vec4(log(f)/N/N, log(f)/N, f/N, 1) );    // result\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}