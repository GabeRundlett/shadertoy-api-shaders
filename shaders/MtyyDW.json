{
    "Shader": {
        "info": {
            "date": "1536226405",
            "description": "Bicubic (Hermite) grid interpolation. To compare with bilinear (default lerp), remove the #define in line 1.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtyyDW",
            "likes": 7,
            "name": "Grid interpolation",
            "published": 3,
            "tags": [
                "lerp",
                "bilinear"
            ],
            "usePreview": 0,
            "username": "OskarSwierad",
            "viewed": 848
        },
        "renderpass": [
            {
                "code": "#define USE_BICUBIC_INTERP // Leave to use bicubic, comment out to use bilinear\n#define GRID_SIZE_X 5\n#define GRID_SIZE_Y 3\nconst int   GRID_COUNT = GRID_SIZE_X * GRID_SIZE_Y;\nconst vec2  GRID_SIZE_F = vec2(GRID_SIZE_X, GRID_SIZE_Y);\nconst ivec4 GRID_RANGE_2D = ivec4(0, 0, GRID_SIZE_X - 1, GRID_SIZE_Y - 1);\nconst vec4  GRID_RANGE_2D_F = vec4(GRID_RANGE_2D);\nconst int   GRID_LAST_INDEX_1D = GRID_COUNT - 1;\n\nconst vec3 EXAMPLE_GRID[GRID_COUNT] = vec3[GRID_COUNT](\n    vec3(0.7, 0.7, 0.5),\n    vec3(1.0, 0.7, 0.4),\n    vec3(1.0, 0.9, 0.3),\n    vec3(0.9, 0.9, 0.5),\n    vec3(0.9, 0.6, 0.2),\n    //\n    vec3(0.1, 0.4, 0.7),\n    vec3(0.2, 0.8, 0.2),\n    vec3(0.1, 0.2, 0.3),\n    vec3(0.0, 1.0, 0.8),\n    vec3(1.0, 0.2, 0.3),\n    //\n    vec3(0.0, 0.1, 0.3),\n    vec3(0.0, 0.2, 0.6),\n    vec3(0.0, 0.1, 0.4),\n    vec3(0.0, 0.1, 0.4),\n    vec3(0.0, 0.0, 0.2)\n);\n\nint getIndex1D(int x, int y)\n{\n    return clamp(y * GRID_SIZE_X + x, 0, GRID_LAST_INDEX_1D);\n}\n\nivec4 getInterpolationIndexes(vec2 gridCoords)\n{   \n    ivec2 idxStart = ivec2(gridCoords);\n    ivec2 idxEnd = ivec2(ceil(gridCoords));\n    \n    ivec4 idx1D = ivec4(\n        getIndex1D(idxStart.x, idxStart.y),\n        getIndex1D(idxEnd.x,   idxStart.y),\n        getIndex1D(idxStart.x, idxEnd.y),\n        getIndex1D(idxEnd.x,   idxEnd.y)\n    );\n    return idx1D;\n}\n\nvec3 gridLerp(vec2 coordsNormalized)\n{\n    vec2 gridCoords = coordsNormalized * GRID_RANGE_2D_F.zw;\n    ivec4 idx1D = getInterpolationIndexes(gridCoords);\n    \n#ifdef USE_BICUBIC_INTERP\n    vec2 factors = smoothstep(vec2(0.0, 0.0), vec2(1.0, 1.0), fract(gridCoords));\n#else\n    vec2 factors = fract(gridCoords);\n#endif // USE_BICUBIC_INTERP\n    \n    vec3 result[2] = vec3[2](\n        mix(EXAMPLE_GRID[idx1D.x], EXAMPLE_GRID[idx1D.y], factors.x),\n        mix(EXAMPLE_GRID[idx1D.z], EXAMPLE_GRID[idx1D.w], factors.x)\n    );\n    return mix(result[0], result[1], factors.y);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coords = fragCoord / iResolution.xy;\n    vec3 result = gridLerp(coords);\n    vec3 resultGamma = pow(result, vec3(0.4545));\n    fragColor = vec4( resultGamma, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}