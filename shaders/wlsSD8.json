{
    "Shader": {
        "info": {
            "date": "1562789929",
            "description": "Mandelbrot set colored by the orbital point trap method. The position of the point trap is controlled by the mouse. Click and drag anywhere on the canvas to move the point trap, indicated by the white dot.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlsSD8",
            "likes": 7,
            "name": "interactive orbital point trap",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "interactive",
                "pointtrap"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 516
        },
        "renderpass": [
            {
                "code": "#define N_ITERS 1000\n#define PI 3.14159265\n\nvec3 color(float t) {\n\tvec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    return a + b * cos(2.0*PI*(c*t + d));\n}\n\nvec2 cmul(vec2 c1, vec2 c2) {\n    return vec2(c1.x*c2.x - c1.y*c2.y, c1.x*c2.y + c1.y*c2.x);\n}\n\nfloat linscale(float x, float x1, float x2, float y1, float y2) {\n\treturn (y2-y1)/(x2-x1) * (x-x1) + y1;\n}\n\nfloat shade(vec2 c, vec2 point) {\n\tvec2 z = vec2(0.0, 0.0);\n    float dist = 1.0e20;\n    float k = linscale(sin(iTime), -1.0, 1.0, -1.0, 1.0);\n    for (int i=0; i<N_ITERS; i++) {\n    \t// quadratic mandlebrot set: z(n+1) = z(n)^2 + k*z + c\n        //z = cmul(z,z) + k*z + c;\n        z = cmul(z,z) + c*z + c;\n        if (length(z) > 5.0) break;\n        dist = min(dist, distance(z, point));\n    }\n\treturn sqrt(dist);\n}\n\nvec2 screen_coord(vec2 xy, vec2 dim) {\n    return (xy - 0.5*dim) / min(dim.x, dim.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 3.0*screen_coord(fragCoord.xy, iResolution.xy);\n    vec2 mouse = 3.0*screen_coord(iMouse.xy, iResolution.xy);\n    float pointer = step(0.05, length(uv-mouse));\n    vec3 fractal_col = color(shade(uv, mouse));\n    vec3 col = mix(vec3(1.0), fractal_col, pointer);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}