{
    "Shader": {
        "info": {
            "date": "1514089410",
            "description": "http://people.tamu.edu/~ergun/research/implicitmodeling/papers/sm99.pdf",
            "flags": 0,
            "hasliked": 0,
            "id": "ltlfDs",
            "likes": 0,
            "name": "General SDF",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "brisingre",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "const float PHI = sqrt(5.0)*0.5 + 0.5;\n\nconst vec3 gdfVecs[19] = vec3[](\n    normalize(vec3(1,0,0)),\n    normalize(vec3(0,1,0)),\n    normalize(vec3(0,0,1)),\n    \n    normalize(vec3(1, 1, 1)),\n    normalize(vec3(-1, 1, 1)),\n    normalize(vec3(1, -1 , 1)),\n    normalize(vec3(1, 1, -1)),\n    \n    normalize(vec3(0, 1, PHI+1.0)),\n    normalize(vec3(0, -1, PHI + 1.0)),\n    normalize(vec3(PHI + 1.0, 0, 1)),\n    normalize(vec3(-PHI-1.0,0, 1)),\n    normalize(vec3(1, PHI+1.0, 0)),\n    normalize(vec3(-1, PHI+1.0, 0)),\n    \n    normalize(vec3(0, PHI, 1)),\n    normalize(vec3(0, -PHI, 1)),\n    normalize(vec3(1, 0, PHI)),\n    normalize(vec3(-1, 0, PHI)),\n    normalize(vec3(PHI, 1, 0)),\n    normalize(vec3(-PHI, 1, 0))\n    );\n\n\nfloat generalizedDF(vec3 point, float radius, int start, int end)\n{\n    float retval = 0.0;\n    for(int i = start; i <= end; i++)\n    {\n        retval = max(retval, abs(dot(point, gdfVecs[i])));\n    }\n    return retval - radius;\n}\n\nfloat generalizedDFExp(vec3 point, float radius, float exponent, int start, int end)\n{ \n    float retval = 0.0;\n    for(int i = start; i <= end; i++)\n    {\n        retval += pow(abs(dot(point, gdfVecs[i])), exponent);\n    }\n    return pow(retval, 1.0/exponent) - radius;\n    \n}\n\n//THIS IS WHERE YOU MESS AROUND WITH SHAPES\nfloat sceneSDF(vec3 point)\n{\n    float a = generalizedDFExp(point, 1.0, 60.0, 0, 2);\n    float b = generalizedDFExp(point.zyx, 1.0, 60.0, 3, 6);\n    float combine = min(a, b);\n    \n    float pipe = length(vec2(a, b )) - 0.02;\n    return b;\n    return min(a, min(b, pipe));\n    //return generalizedDFExp(point, 1.0, 15.0, 0,2);\n    //return length(point)-1.0;\n}\n\n\nvec3 diffuseColor(vec3 point)\n{\n    float dist = generalizedDFExp(point, 1.5, 60.0, 7, 18);\n    if(mod(dist * 5.0, 1.0) <0.5)\n    {\n        return vec3(0.2, 0.2, 0.2);\n    }\n    else\n    {\n        return vec3(0.7, 0.7, 0.7);\n    }\n}\n\n\n\n//Raymarching stuff\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst float STEP_SCALE =1.0;\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 direction, float start, float end)\n{\n  float depth = start;\n    for(int i = 0; i < MAX_MARCHING_STEPS; i++)\n    {\n        float dist = sceneSDF(eye + depth * direction);\n        if(dist < EPSILON)\n        {\n            return depth;\n        }\n        depth += dist * STEP_SCALE;\n        if (depth >= end)\n        {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord){\n    vec2 xy = fragCoord - size/2.0;\n    float z = size.y/tan(radians(fieldOfView)/2.0);\n    return normalize(vec3(xy,-z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up)\n{\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    \n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n        );\n        \n        \n        \n}\n\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z-EPSILON))\n        ));\n}\n\nvec3 phongLight(vec3 diffuse, vec3 specular, float shiny, vec3 point,\n                vec3 eye, vec3 lightPos, vec3 lightCol)\n{\n    vec3 surfaceNormal = estimateNormal(point);\n    vec3 lightDir = normalize(lightPos - point);\n    vec3 viewDir = normalize(eye - point);\n    vec3 R = normalize(reflect(-lightDir, surfaceNormal));\n    \n    float dotLN = dot(lightDir, surfaceNormal);\n    float dotRV = dot(R, viewDir);\n    \n    if(dotLN < 0.0)\n    {\n        //light on the other side of the surface\n        return vec3(0.0, 0.0, 0.0);\n    }\n    \n    if(dotRV < 0.0)\n    {\n     //light reflecting away from the camera, no highlight\n        return lightCol * (diffuse * dotLN);\n    }\n    \n    return lightCol * (diffuse * dotLN + specular * pow(dotRV, shiny));\n}\n\nvec3 phongIllumination(vec3 ambient, vec3 diffuse, vec3 specular, float shiny, vec3 point, vec3 eye)\n{\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * ambient;\n    \n    //vec3 light1Pos = vec3(7.0 * sin(iTime), 2.0, 7.0 * cos(iTime));\n    vec3 light1Pos = vec3(7.0 * sin(7.), 2.0, 7.0 * cos(7.));\n    vec3 light1Col = vec3(0.8, 0.0, 0.7);\n    \n    color += phongLight(diffuse, specular, shiny, point, eye, light1Pos, light1Col);\n    \n    //vec3 light2Pos = vec3(7.0 * sin(iTime), -2.0 * sin(iTime * 0.1), 7.0 * cos(-0.5 * iTime));\n    vec3 light2Pos = vec3(7.0 * sin(7.), -2.0 * sin(7. * 0.1), 7.0 * cos(-0.5 * 7.));\n    vec3 light2Col = vec3(0.0, 0.6, 0.9);\n    \n    color += phongLight(diffuse, specular, shiny, point, eye, light2Pos, light2Col);\n        \n    //vec3 light3Pos = vec3(7.0 * cos(iTime * -.1), 4.0 * cos(iTime * 0.1), 7.0 * sin(-0.5 * iTime));\n    vec3 light3Pos = vec3(7.0 * cos(7. * -.1), 4.0 * cos(7. * 0.1), 7.0 * sin(-0.5 * 7.));\n    vec3 light3Col = vec3(0.9, 0.5, 0.0);\n    \n    color += phongLight(diffuse, specular, shiny, point, eye, light3Pos, light3Col);\n    \n    return color;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    fragColor = vec4(fragCoord, 0, 1);\n\t/*vec2 uv = fragCoord.xy / iResolution.yy;\n    vec3 point = vec3(uv, 0.5+0.5*sin(iTime));\n    \n    point *= vec3(5, 5, 10);\n    point -= vec3(4.5, 2.5, 5.0);\n    \n    \n    float dist = sceneSDF(point);\n    //float dist = generalizedDFExp(point, 1.0, 99.0, 0, 6);\n    \n    //vec3 color = dist < 0.0 ?\n    //    vec3(1,1,1) : point;\n  \n    vec3 color = vec3(dist);\n\tfragColor = vec4(color,1.0);*/\n    \n    vec3 viewDir = rayDirection(60.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(4.0 * sin(iTime * 0.5), 1.5 * sin(iTime), 4.0 * cos(iTime * 0.5));\n    //vec3 eye = vec3(4.0 * sin(7. * 0.5), 1.5 * sin(7.), 4.0 * cos(7. * 0.5));\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n  \n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n      \n    //fragColor = vec4(dist, dist * 0.1, dist * 0.01,1);\n    //return;\n    \n    if(dist > MAX_DIST - EPSILON)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n        \n        vec3 point = eye + dist * worldDir;\n        \n        //THIS IS WHERE YOU MESS AROUND WITH COLOR\n        vec3 diffuse = diffuseColor(point);\n        \n        vec3 ambient = vec3(0.2, 0.2, 0.2);\n        vec3 specular = diffuse  -vec3(0.1, 0.1, 0.1);\n        float shiny = 10.0 * specular.x;\n        \n        vec3 litColor = phongIllumination(ambient, diffuse, specular, shiny, point, eye);\n        \n        fragColor = vec4(litColor, 1.0);\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}