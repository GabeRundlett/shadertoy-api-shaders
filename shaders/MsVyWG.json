{
    "Shader": {
        "info": {
            "date": "1610220114",
            "description": "Publishing my old sound shaders.",
            "flags": 40,
            "hasliked": 0,
            "id": "MsVyWG",
            "likes": 9,
            "name": "Sound Experiment 2018-02-20 C2a",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "sampleprecise"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "// Passthrough to Channel 0\nvoid mainImage ( out vec4 f, in vec2 d ) {\n  f = texelFetch(iChannel0, ivec2(d), 0); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Sample precise time\nstruct timeT { int s; };\nfloat floatC (timeT t) { return float(t.s)/iSampleRate; }\n// not exact to composition's division of time into notes.  Clicks are heard (also with floats).\nfloat modM (timeT t, float m) { return floatC(timeT(t.s%int(m*iSampleRate))); }\n\n// Spectrogram config\nconst float timescale = 1./4.;\nconst float freqscale = 2600.;\nconst vec2 stereomix = vec2(1.,1.)*2.;\n\n/*\nSound Experiment\nCopyright 2018 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth0(float freq, float time) {\n  return wave(freq*time);\n}\n\nfloat synth1(float freq, float time) {\n  float freq2 = freq;\n  float freq3 = freq2 + 0.25;\n  float v = 0.;\n  for (float n=1.; n<5.; n+=1.00+0.002) {\n      // these exp(freq/440.) are slowing it down quite a bit!\n    v += 0.2/pow(n,(1.2+exp(freq/440.)))*wave(n*freq*time+1.*wave(n*freq2*time));\n    v += 0.2/pow(n,(1.2+exp(freq/440.)))*wave(n*freq*time+1.*wave(n*freq3*time));\n  }\n  return v;\n}\n\nvec2 smoothclip(vec2 f) {\n    float p = 3.;\n    f.x = pow(atan(pow(abs(f.x),p)*1.571)/1.571,1./p)*sign(f.x);\n    f.y = pow(atan(pow(abs(f.y),p)*1.571)/1.571,1./p)*sign(f.y);\n    return f;\n}\n\nfloat sincstep(float x) {\n    return ( x<0.001 ? 0. : 1.0-sin(pi*x)/(pi*x) );\n}\n\nfloat pulse1(float freq, float decay, float time) {\n  return sincstep(time*freq*2.)*exp(-time*decay)*cos(time*freq*2.*pi);\n}\n\nfloat synth2(float freq, float time, float maxtime) {\n  float v = 0.;\n  //freq/=3.;\n  freq*=2.;\n  for (float n=1.0; n<18.; n+=1.0) {\n    v += pulse1(freq*n/3., pow(n/3.,2.)*1., time)*exp(-n*0.3/3.);\n  }\n  if (time < 0. || time > maxtime) return 0.;\n  v*=1.-exp((time/maxtime-1.)*8.);\n  return v/3.;\n}\n\nfloat selfproduct(vec3 v) { return v.x*v.y*v.z; }\n/*\nivec3[] seqN = ivec3[](\n    ivec3(-1,0,-1),\n    ivec3(-2,1,-1),\n    ivec3(1,-1,-1),\n    ivec3(1,-2,0),\n    ivec3(-1,-1,0),\n    ivec3(-2,0,0),\n    ivec3(-2,1,-1),\n    ivec3(-1,-1,0),\nivec3(0));\n*/\nivec3[] seqN = ivec3[](\n    ivec3(-1,0,-1),\n    ivec3(-2,1,-1),\n    ivec3(1,-1,-1),\n    ivec3(-3,-1,1),\n    ivec3(-1,-1,0),\n    ivec3(-4,1,0),\n    ivec3(-2,1,-1),\n    ivec3(-1,-1,0),\nivec3(0));\n\nfloat[] seqN2 = float[](\n    1.,\n    2.,\n    2.,\n    1.,\n    1.,\n    1.,\n    4./3.,\n    1.,\n\n    1.,\n    2.,\n    4./5.,\n    3./4.,\n    3./2.,\n    1.,\n    3./2.,\n    1.,\n0.);\n\nfloat seqf(int n, int s) {\n  int i = n%8;\n  int j = (n/(1))%8;\n  int k = s;\n  k ^= (k>>1);\n  k |= (k>>1);\n  //k &= s;\n  i ^= (k ^ (j>>1));\n  //i %= 8;\n  //ivec3 seq = seqN[i] * ((ivec3(k)>>ivec3(0,1,2))&1);\n  //ivec3 seq = seqN[i%8];\n  //return selfproduct(pow(vec3(2,3,5), vec3(seq)));\n  return seqN2[(i%16)%(n/16+1)];\n}\n\nfloat seqa (float t, float e) { \n    \n    return max(pow(wave(t/2.),e), 0.); }\n\nvoid seq0(float time, out float ampl, out float freq, int s) {\n    int n = int(time);\n    ampl = seqa(time, 2.);\n    float fprod = seqf(n, s);\n    freq = 141. * 1. * fprod;\n}\n\nvec2 mainSound( timeT timein ) {\n  float time = floatC(timein) + 180.*0.;\n  //time = 0.4;\n  float br;\n  vec2 v = vec2(0.);\n  float ac = 1.;\n  for (int i = 0; i < 6; i++) { // 2018-03-29: 6 -> 8\n    if (time>-8.) {\n        for (float j = 0.; j < 4.; j+=1.) {\n            float rtime = time-j/br;\n            \n        float ampl;\n        float freq;\n        br = float(1<<i)*0.25*5./4.;\n        float nr = 1./4.;\n        float syntime = modM(timein,1./br);//+float(int(time*br)%23);\n        float rsyntime = syntime+j/br;\n        if (mod(rtime*br,2.)<8.) ac*=0.75;\n        seq0(rtime*br, ampl, freq, int(rtime*nr));\n       // freq *= pow(2., -5.+float(i));\n        ampl = 0.0625;// * ac; // 2018-03-29: *ac\n        ampl *= 1.*pow(.9, float(i)); // prev\n        //ampl *= pow(1.2, float(i)); // 2018-03-29\n        //ampl *= exp(-pow(float(i)-time/180.*16.,2.)*0.2); // 2018-03-29\n        float pos = pi*sin(0.25*pi*float((1<<i)*int(rtime*br)));\n        //float pos = time*0.5;\n        float td = 0.0001;\n        //v.x += ampl*synth2(freq, syntime+td*sin(pos)-td, 1./br)*pow(cos(pos/2.-pi/4.),2.);\n        //v.y += ampl*synth2(freq, syntime-td*sin(pos)-td, 1./br)*pow(cos(pos/2.+pi/4.),2.);\n        v += ampl*synth2(freq, rsyntime, 4./br);\n        }\n    }\n  }\n  //  time -= 55.+0.125/4.;\n  //}\n  v *= max(1.-exp(-10.*(178.-floatC(timein))),0.);\n  v*=0.8;\n  v = smoothclip(v);\n  return vec2(v);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\nStreaming Spectrogram v.3\nCopyright 2018 Theron Tarigo\n*/\n\nconst float windowmax = 0.5;\n\nvec4 encode ( int i ) { return vec4((uvec4(i)>>ivec4(0,8,16,24))&0xFFu)/255.; }\nint decode ( vec4 f ) { uvec4 d = uvec4(f*255.)<<ivec4(0,8,16,24);\n  return int(d.x|d.y|d.z|d.w); }\n\nvoid mainImage ( out vec4 f, in vec2 pixf ) {\n  f = vec4(0.);\n  ivec2 pix = ivec2(pixf);\n  ivec2 res = ivec2(iChannelResolution[0].xy);\n  int center = res.x*res.y/2;\n  int offset = int(iTime*iSampleRate) - center;\n  int index = res.x*pix.y+pix.x;\n  if (index==0) { f = encode(offset); return; }\n  int offsetlast = decode(texelFetch(iChannel0, ivec2(0), 0));\n  int cutoff = int(windowmax*iSampleRate);\n  if (abs(index-center) > cutoff) return;\n  int samp = index+offset;\n  int samplast = center+cutoff+offsetlast;\n  //float time = (float(samp)-0.5)/iSampleRate;\n  if (samp <= offsetlast + center + cutoff) {\n    f.xy = texelFetch(iChannel0,\n      (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n  } else {\n    f.xy = mainSound(timeT(samp));\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nStreaming Spectrogram v.3\nCopyright 2018 Theron Tarigo\n*/\n\nconst float sgr_pi = 3.141592653589793;\n\nvec2 readsound ( int isamp ) {\n  ivec2 res = ivec2(iResolution.xy);\n  int offset = int(iTime*iSampleRate) - res.x*res.y/2;\n  int samp = isamp - offset;\n  ivec2 pix = ivec2(samp%res.x, (samp/res.x));\n  return texelFetch(iChannel1, pix, 0).xy;\n}\n\nvec2 spectrogram ( float windowtime, int isamp, float freq ) {\n  vec2 sum = vec2(0.);\n  int iwindow = int(windowtime*iSampleRate);\n  float window = float(iwindow)/iSampleRate;\n  for (int irel = -iwindow; irel <= iwindow; irel+=1) {\n    // Cosine window\n    float w = (0.5+0.5*cos(float(irel)/float(iwindow)*sgr_pi));\n    float samp = dot(stereomix,readsound(isamp+irel));\n    float a = fract(float(irel)*freq/iSampleRate)*2.*sgr_pi;\n    sum += w*vec2(cos(a),sin(a))*samp;\n  }\n  return sum/iSampleRate/window;\n}\n\n// Calibrated to ttg's hearing\n// Returns modulation frequency at which a tone at base frequency\n// transitions from sounding as beats to sounding as separate tones\nfloat timeratiofn ( float freq ) {\n  const float nparam = 58.5;\n  const float aparam = 950.;\n  return freq/nparam + exp(-freq/aparam)*aparam/nparam;\n}\n\nvoid panImage( out vec4 f, int isamp, float y ) {\n  float freq = freqscale * y / iResolution.y;\n  float windowfreq = timeratiofn(freq);\n  f.rgb = vec3(10.,3.2,1.)*\n  pow(length(spectrogram(1./windowfreq, isamp, freq)),2.)*50.;\n}\n\nvoid mainImage ( out vec4 f, in vec2 df ) {\n  ivec2 d = ivec2(df);\n  vec2 fsf = iResolution.xy;\n  ivec2 fs = ivec2(fsf);\n  int shift = int(fsf.x*timescale*(iTime));\n  int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n  int delta = shift - shiftlast;\n  if ((fs.x-d.x) <= delta) {\n    float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n    panImage(f, int(time*iSampleRate), df.y);\n  } else {\n    f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Sound in Common\n\nvec2 mainSound( int samp, float time ) { return mainSound(timeT(samp)); }",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}