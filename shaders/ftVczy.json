{
    "Shader": {
        "info": {
            "date": "1661753750",
            "description": "A colorful mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "ftVczy",
            "likes": 5,
            "name": "Fractal mosaic 7 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    //a += sign(a.x)/2.;\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(2.5,-1.)\n        \n        //vec2(1.5,0.)\n    ,\n    \n    a1 =\n        a+a2\n        //a+a2+floor(a.x)\n        //a+a2+floor(a.y)\n    ;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    //a1 += (distance(floor(a1),round(a1)));\n\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n        //abs(fract((a1+.25)*(a2.x+a2.y))-.5)\n    ;\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = true;\n    for(int k = 0; k < 6; k++){\n        //uv += floor(uv*1.5);\n\n        //uv.y += t1_(floor(uv),floor(uv));\n    \n        float offset =\n            0.\n            //float(k)/2.\n        ;\n        \n        //uv += pow(floor(-(uv.x+.5)*2./1.5),2.)/2.;\n        \n        //uv.x += fmod(uv.x,1.5); //lace pattern\n        //uv += floor(uv+vec2(.5,0.))/1.5;\n\n        //if(t3){ uv = uv.yx+1.;t2 = t2.yx+.5;}\n        uv =\n            abs(.5+uv+t2)/scale\n            //fract(.5+uv+t2)/scale\n            //abs(.5+uv*sign(uv.x-uv.y)+t2)/scale\n        ;\n        //uv *= sign(uv.yx-uv);\n        \n        //if(uv.y>uv.x) uv = -uv.yx; else uv *= -sign(uv-uv.yx);\n        t2 =\n            -triangle_wave(uv-.5+offset)\n            //-triangle_wave(uv-.5+offset-floor(uv.x-uv.y)*floor(t2.x-t2.y))\n            //-triangle_wave(uv-.5*sign(uv.x-uv.y))\n            //-triangle_wave(uv-.5)/(.5+fmod(t2.x,2.))\n\n            //-triangle_wave(uv-1.5-fmod(t2.x/1.5,2.))\n        ;\n        //t2 = abs(t2);\n\n        uv =\n            -triangle_wave(uv.yx+offset)\n            //-triangle_wave(uv.yx+offset+floor(t2.y-t2.x)*floor(uv.y-uv.x))\n        ;\n        uv =\n            t2+uv\n            //fract(t2+uv)\n            //t2*length(t2)+uv\n            //t2*length(uv)+uv\n        ;\n        float c1 = uv.y-uv.x;\n        //c1 = max(c1,t2.x-t2.y);\n        if(uv.y > uv.x) col = vec3(col.yz,max(c1,col.x));\n        //col *= col + .5;\n        //else if(t3) col = col;\n        //else col = vec3(0.);\n        //if(t2.x*uv.x < t2.y*uv.y) col = col.yzx;\n        //if(t2.x-t2.y > uv.x-uv.y) col = col.yzx;\n        //if(t2.x<t2.y||t2.x>t2.y) {uv=uv.yx;t2=t2.yx;}\n\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time){\n  float tempo = 1.;\n  time /= tempo;\n  \n  //time += fpow(time,2.)*fpow(time*4.,2.);\n  //time += fmod(time*8.,2.)+fmod(time*8.,4.)+fmod(time*8.,8.);\n  \n  //time -= floor(time*4.);\n  //time = time*(1. + fmod(time*4.,2.))/2.;\n\n  \n  float   t=\n      time/4.\n      //time + floor(time*4.+floor(time/4.))/4.\n      //2.*time/(1.+fmod(time,2.))/(1.+fmod(time/2.,2.))\n      //time/(1.+fmod(time/s1,2.))\n  ,\n  \n  m1 = fmod(t/8.,6.),\n  m3 = fmod(t/abs(2.5-m1),4.);\n  \n  t *= 16.;\n  \n  \n  float m2 = 1. + fmod(t/4.,2.);\n\n  t /= max(m2,m1+1.);\n  \n  float a=sqrt((1.-sqrt(fract(t/4.)))/4.)*.2,\n  \n  nb = time*pow(2.,abs(m3-m2-m1)/2.+6.5)*tempo;\n\n  return vec2(fract(nb*.998)\n\n   ,fract(nb))*a;\n\n}\n\n/*\nvec2 mainSound(int samp, float time){\n  \n  float t=(time)/4.;\n  \n  float m1 = mod(floor(t),6.),\n  m3 = mod(floor(t*2./abs(2.5-m1)),4.);\n  \n  t *= 16.;\n  float m2 = 1. + min(mod(floor(t/4.),2.),t);\n\n  t /= max(m2,m1+1.);\n  \n  float a=sqrt((1.-fract(t/4.))/4.)*.2,\n  \n  nb = pow(2.,abs(m3-m2-m1)/2.+6.5);\n\n  return vec2(fract(time*nb*.998)*a\n\n   ,fract(time*nb)*a);\n\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)*floor(x),y*y)/y)\n#define fmod(x,y) mod(floor(x),y)\n#define fmod1(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fpow(x,y) pow(y,fmod(x,y))\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}