{
    "Shader": {
        "info": {
            "date": "1634651983",
            "description": "tried to make waves for an ocean shader, ended up making a very inefficient noise function, then i added domain transformation and now ",
            "flags": 0,
            "hasliked": 0,
            "id": "NsVSWW",
            "likes": 6,
            "name": "its also burning",
            "published": 3,
            "tags": [
                "wavesnoise"
            ],
            "usePreview": 0,
            "username": "Arrangemonk",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "//Arrangemonk 2021, innefficient noise function\n//in the unlikely event of someone forking this: yeah, do that\n\nfloat PI  = 3.14159265359;\nfloat TAU = 6.28318530718;\nfloat E = 2.71828182846;\nfloat iters = 4.;\nfloat octaves = 8.;\n\nfloat wave(float x,float time)\n{\n   return sin(x * PI - time) *.5 + .5;\n}\n\nvec2 rot(vec2 uv, float phi)\n{\n    return vec2(sin(phi)*uv.x + cos(phi)*uv.y,cos(phi)*uv.x - sin(phi)*uv.y);\n}\n\nfloat rotfbm(vec3 pos)\n{\nfloat result = 0.;\nfloat m = 0.;\nfor(float i = 1.; i < octaves;i++)\n    {\n    float tmp = 1./i;\n    m += tmp;\n    result += wave(rot(pos.xy*i,PI * E * i).x * iters,pos.z)* tmp;\n    }\nreturn result /m;\n}\n\nvec3 NormalMap(in vec2 uv)\n{ \n    float time = iTime * 0.2;\n    float p  = rotfbm(vec3(uv,time));\n    float h1 = rotfbm(vec3(uv + vec2(.1,0),time));\n    float v1 = rotfbm(vec3(uv + vec2(0,.1),time));      \n   \tvec2 normal = 0.5 + (p - vec2(h1, v1));\n    return normalize(vec3(normal, 1.));\n}\n\nfloat curvature(in vec2 uv)\n{\n    vec3 p  = NormalMap(uv);\n    vec3 h1 = NormalMap(uv + vec2(.001,0));\n    vec3 v1 = NormalMap(uv + vec2(0,.001));      \n\n    return (h1.x -p.x + v1.y -p.y - p.z)*.5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x * 4.;\n\n    float val = rotfbm(vec3(uv,iTime));\n    vec2 pos = .25 * (uv + NormalMap(.5 *(uv + NormalMap(1. *(uv + NormalMap(uv + vec2(0,-iTime * 0.1)).xy)).yz)).zx);\n    vec3 col = NormalMap(pos);\n    float occ = curvature(pos);\n\n    fragColor = texture(iChannel0,uv + col.xy * col.z);\n    \n    fragColor = fragColor * fragColor * 4.;\n    \n    float amount = uv.y + col.y * col.z;\n    //amount = sqrt(amount);\n    \n    fragColor = mix(vec4(4,1.5,0,1),vec4(0,0,0.2,1),amount)+occ*.1;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}