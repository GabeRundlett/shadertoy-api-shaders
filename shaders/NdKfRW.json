{
    "Shader": {
        "info": {
            "date": "1657746106",
            "description": "Quick and dirty implementation of the 3Blue1Brown fractal described here: https://youtu.be/-RdOwhmqP5s\n\nUse mouse to grab and move roots (the little black rings).",
            "flags": 32,
            "hasliked": 0,
            "id": "NdKfRW",
            "likes": 0,
            "name": "Newton's method fractal",
            "published": 3,
            "tags": [
                "fractal",
                "newton",
                "3b1b"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "vec4 getParam(int p) {\n    return texelFetch(iChannel0, ivec2(p, 0), 0);\n}\n\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y,\n                a.x * b.y + a.y * b.x);\n}\n\nvec2 cdiv(vec2 a, vec2 b) {\n    float s = 1.0 / length(b);\n    b.y = -b.y;\n    return cmul(a * s, b * s);\n}\n\nvec2 term(vec2 x, int n) {\n    vec2 r = getParam(n).rg;\n    return x - r;\n}\n\nvec2 f(vec2 x) {\n    vec2 fx = vec2(1.0, 0.0);\n    for (int i = 0; i < nroots; ++i) {\n        fx = cmul(fx, term(x, i));\n    }\n    return fx;\n}\n\nvec2 df(vec2 x) {\n    vec2 right[nroots];\n    right[nroots - 1] = vec2(1.0, 0.0);\n    for (int i = nroots - 1; i > 0; --i) {\n        right[i - 1] = cmul(right[i], term(x, i));\n    }\n    vec2 dfx = vec2(0.0);\n    vec2 left = vec2(1.0, 0.0);\n    for (int i = 0; i < nroots; ++i) {\n        dfx += cmul(left, right[i]);\n        left = cmul(left, term(x, i));\n    }\n    return dfx;\n}\n\n\nint find_nearest(vec2 uv) {\n    int nearest = 0;\n    for (int i = 1; i < nroots; ++i) {\n        if (length(term(uv, i)) < length(term(uv, nearest))) {\n            nearest = i;\n        }\n    }\n    return nearest;\n}\n\nvec3 add_roots(vec3 col, vec2 uv) {\n    // TODO: figure out proper pixel-size-aware smoothstep params.\n    for (int i = 0; i < nroots; ++i) {\n        float r = abs(0.02 - length(term(uv, i)));\n        col = mix(vec3(0.0), col, smoothstep(0.0, 0.01, r));\n    }\n    return col;\n}\n\nvec3 add_grid(vec3 col, vec2 uv) {\n    uv = fract(uv) * 5.0;\n    float h = (1.0 - smoothstep(0.0, 0.05, abs(uv.y - round(uv.y))));\n    float v = (1.0 - smoothstep(0.0, 0.05, abs(uv.x - round(uv.x))));\n    h *= uv.y < 0.5 || uv.y > 4.5 ? 0.75 : 0.25;\n    v *= uv.x < 0.5 || uv.x > 4.5 ? 0.75 : 0.25;\n    \n    col = mix(col, vec3(1.0), max(h, v));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if 0\n    vec2 mid = iResolution.xy * 0.5;\n    vec2 s = 2.0 / mid.xx;\n    vec2 uv = (fragCoord - mid) * s;\n#else\n    vec2 uv = fragToPlane(fragCoord, getParam(P_RESCALE));\n#endif\n    vec2 uv0 = uv;\n\n\n    for (int i = 0; i < max_iter; ++i) {\n        uv -= cdiv(f(uv), df(uv));\n    }\n\n\n    int nearest = find_nearest(uv);\n    vec3 col = palette[nearest % palette.length()];\n\n    col = add_grid(col, uv0);\n    col = add_roots(col, uv0);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec4 getParam(int p) {\n    return texelFetch(iChannel0, ivec2(p, 0), 0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 outData = vec4(0.0);\n    vec4 m = iMouse;\n    bool down = m.z > 0.0;\n    bool click = m.w > 0.0;\n    m = fragToPlane(abs(m), getParam(P_RESCALE));\n\n    int root = int(fragCoord.x);\n    if (root < nroots) {\n        outData.xy = getParam(root).xy;\n        if (iFrame < 1) {\n            outData.xy = roots[root];\n        }\n        if (down && !click) {\n            int grabbed = int(getParam(P_GRABBED).r * float(nroots));\n            if (root == grabbed) {\n                outData.xy = m.xy;\n            }\n        }\n    } else {\n        if (root == P_GRABBED) {\n            int grabbed = int(getParam(P_GRABBED).r * float(nroots));\n            if (click) {\n                grabbed = 0;\n                float d = distance(getParam(0).xy, m.xy);\n                for (int i = 1; i < nroots; ++i) {\n                    float dd = distance(getParam(i).xy, m.xy);\n                    if (dd < d) {\n                        grabbed = i;\n                        d = dd;\n                    }\n                }\n            }\n            outData.x = (float(grabbed) + 0.5) / float(nroots);\n        } else if (root == P_RESCALE) {\n            outData = getParam(P_RESCALE);\n//            if (iFrame < 1) {\n                outData = vec4(iResolution.xy * 0.5,\n                               vec2(6.2) / iResolution.xx);\n//            }\n        }\n    }\n\n    fragColor = outData;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 roots[] = vec2[](\n    vec2( 0.00, 1.00),\n    vec2( 0.00,-1.00),\n    vec2( 0.66,-0.52),\n    vec2( 0.66, 0.52),\n    vec2(-1.32, 0.00)\n#if 0\n    ,vec2( 1.20, 1.20)\n    ,vec2(-1.20, 1.20)\n    ,vec2( 1.20,-1.20)\n    ,vec2(-1.20,-1.20)\n#endif\n);\n\nconst int nroots = roots.length();\nconst int P_GRABBED = nroots + 0;\nconst int P_RESCALE = nroots + 1;\n\nconst int max_iter = 6;\n\nvec3 palette[] = vec3[](\n    vec3(.1, .7, .7),\n    vec3(.3, .7, .3),\n    vec3(.3, .3, .6),\n    vec3(.4, .2, .4),\n    vec3(.5, .7, 1.),\n    vec3(.2, .8, .7),\n    vec3(.1, .8, .3),\n    vec3(.4, .4, .8),\n    vec3(.2, .2, .5),\n    vec3(.1, .5, 1.)\n);\n\n\n\nvec2 fragToPlane(vec2 fc, vec4 scale)\n{\n    return (fc - scale.xy) * scale.zw;\n}\n\nvec4 fragToPlane(vec4 mc, vec4 scale)\n{\n    return (mc - scale.xyxy) * scale.zwzw;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}