{
    "Shader": {
        "info": {
            "date": "1685257130",
            "description": "..",
            "flags": 0,
            "hasliked": 0,
            "id": "dt3XDn",
            "likes": 5,
            "name": "Space Runner",
            "published": 3,
            "tags": [
                "loop",
                "spacecity"
            ],
            "usePreview": 0,
            "username": "moonLight7k",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "#define NONE  -1\n#define PLANE  0\n#define SPHERE 1\n\n#define TMAX 10000.\n\nconst float N = 55.0;\n\nconst vec4 skyTop = vec4(0.001f, 0.0f, 0.1f, 1.0f);\nconst vec4 skyBottom = vec4(0.55f, 0.08f, 0.896f, 1.0f);\n\nfloat gridTextureGradBoxFilter(vec2 uv, vec2 ddx, vec2 ddy) {\n    uv += 0.5f;\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;\n    vec2 a = uv + 0.015 + w;\n    vec2 b = uv - 0.015 + w;\n\n    vec2 i = (floor(a) + min(fract(a) * N, 1.0) -\n        floor(b) - min(fract(b) * N, 1.0)) / (N * w);\n\n    return (1.0 - i.x) * (1.0 - i.y);\n}\n\nfloat gridTexture(vec2 uv) {\n    uv += 0.5f;\n    vec2 i = step(fract(uv), vec2(1.0 / N, 1.0 / N));\n    return (1.0 - i.x) * (1.0 - i.y);\n}\n\nvec2 texCoords(vec3 pos, int objectType) {\n    vec2 uv;\n    if(objectType == PLANE) {\n        uv = pos.xz;\n    }\n\n    uv.y -= iTime * 10.;\n    return 0.5 * uv;\n}\n\nfloat traceRay(vec3 rayOrigin, vec3 rayDir, inout vec3 pos, inout vec3 nor, inout int objType) {\n    float tmin = TMAX;\n    pos = vec3(0.0f, 0.0f, 0.0f);\n    nor = vec3(0.0f, 0.0f, 0.0f);\n    objType = NONE;\n\n    float t = (-1.0 - rayOrigin.y) / rayDir.y;\n\n    if(t > 0.0) {\n        tmin = t;\n        nor = vec3(0.0f, 1.0f, 0.0f);\n        pos = rayOrigin + rayDir * t;\n        objType = PLANE;\n    }\n\n    return tmin;\n}\n\nvoid createRay(in vec2 pixel, inout vec3 rayOrigin, inout vec3 rayDirection) {\n    vec2 p = (2. * pixel.xy - iResolution.xy) / iResolution.y;\n\n    vec3 camPos = vec3(0.1f, 1.0f, 5.0f);\n    vec3 camDir = vec3(0.1f, 1.0f, 0.0f);\n\n    vec3 dir = normalize(camDir - camPos);\n    vec3 right = normalize(cross(dir, vec3(0.0f, 1.0f, 0.0f)));\n    vec3 up = normalize(cross(right, dir));\n\n    rayDirection = normalize(p.x * right + p.y * up + 3.0f * dir);\n    rayOrigin = camPos;\n}\n\nfloat rand(float x) {\n    return fract(sin(x) * 50000.0f);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 p = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\n\n    float radius = 0.6f;\n    vec2 ctr = vec2(0.0f, 0.3f);\n    vec2 diff = p - ctr;\n\n    float width = 40.0;\n    float skylineHeight = rand((mod(trunc(p.x * width), width)));\n\n    float falloffFactor = 0.8;\n    skylineHeight *= 1.0 - abs(p.x) * falloffFactor;\n\n    float t = TMAX;\n    if(p.y > 0.0 && p.y * 2.7 < skylineHeight) {\n        fragColor = vec4(0.216, 0.165, 0.165, 1.0);\n        fragColor *= rand(p.y) * rand(p.x) * 3.0f;\n        t = 50.0f;\n    } else if(dot(diff, diff) < (radius * radius) && p.y > 0.0f) {\n        fragColor = vec4(1.0f, 0.55f, 0.28f, 1.0f) * step(fract(p.y * 10.) - p.y / 4., 8. / 10.0);\n        t = 5.0;\n    } else {\n        fragColor = mix(skyTop, skyBottom, .25 - p.y / 3.);\n    }\n\n    vec3 rayDir;\n    vec3 rayOrigin;\n    vec3 rayOriginDdx;\n    vec3 rayDirDdx;\n    vec3 rayOriginDdy;\n    vec3 rayDirDdy;\n\n    createRay(fragCoord, rayOrigin, rayDir);\n    createRay(fragCoord + vec2(1.0, 0.0), rayOriginDdx, rayDirDdx);\n    createRay(fragCoord + vec2(0.0, 1.0), rayOriginDdy, rayDirDdy);\n\n    vec3 pos;\n    vec3 nor;\n    int objectType = NONE;\n\n    float groundt = traceRay(rayOrigin, rayDir, pos, nor, objectType);\n\n    t = min(groundt, t);\n\n    vec3 posDdx = rayOriginDdx - rayDirDdx * dot(rayOriginDdx - pos, nor) / dot(rayDirDdx, nor);\n    vec3 posDdy = rayOriginDdy - rayDirDdy * dot(rayOriginDdy - pos, nor) / dot(rayDirDdy, nor);\n\n    vec2 uv = texCoords(pos, objectType);\n\n    vec2 uvDdx = texCoords(posDdx, objectType) - uv;\n    vec2 uvDdy = texCoords(posDdy, objectType) - uv;\n\n    if(objectType == PLANE) {\n        float color = gridTextureGradBoxFilter(uv, uvDdx, uvDdy);\n        fragColor = mix(vec4(217.0 / 255.0, 10.0 / 255.0, 217.0 / 225.0, 1.0f), vec4(133.0 / 255.0, 46.0 / 255.0, 106.0 / 255.0, 1.0f), color);\n    }\n\n    if(t < TMAX) {\n        fragColor = mix(fragColor, skyBottom, 1.0 - exp(-0.0001 * t * t));\n    }\n    return;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}