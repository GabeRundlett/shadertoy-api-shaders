{
    "Shader": {
        "info": {
            "date": "1499160102",
            "description": "Travel through a repeating Mandelbox",
            "flags": 0,
            "hasliked": 0,
            "id": "XdjfRz",
            "likes": 6,
            "name": "Endless Mandelbox Tunnel",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 699
        },
        "renderpass": [
            {
                "code": "// \"Endless Mandelbox Tunnel\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 gloPos, ltPos;\nvec2 trkF, trkA;\nfloat tCur, dstFar;\nconst float pi = 3.14159;\n\nfloat MBoxDf (vec3 p)\n{\n  vec4 q, q0;\n  const float mScale = 2.62;\n  const int nIter = 10;\n  q0 = vec4 (p, 1.);\n  q = q0;\n  for (int n = 0; n < nIter; n ++) {\n    q.xyz = clamp (q.xyz, -1., 1.) * 2. - q.xyz;\n    q = q * mScale / clamp (dot (q.xyz, q.xyz), 0.5, 1.) + q0;\n  }\n  return length (q.xyz) / abs (q.w);\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkA, sin (trkF * t)), dot (trkA.yx, cos (trkF * t)), t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (dot (trkF * trkA, cos (trkF * t)),\n     dot (trkF * trkA.yx, - sin (trkF * t)), 1.);\n}\n\nvec3 TrackAcc (float t)\n{\n  return vec3 (dot (trkF * trkF * trkA, - sin (trkF * t)),\n     dot (trkF * trkF * trkA.yx, - cos (trkF * t)), 0.);\n}\n\nfloat ObjDf (vec3 p)\n{\n  float d;\n  p.xy -= TrackPath (p.z).xy;\n  d = 0.25 - max (abs (p.y), 0.866 * abs (p.x) + 0.5 * abs (p.y));\n  p.z = mod (p.z + 3., 6.) - 3.;\n  return max (MBoxDf (p), d);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.002, -0.002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy),\n     ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat GlowCol (vec3 ro, vec3 rd, float dstHit)\n{\n  vec3 gloDir;\n  float gloDist, wGlow;\n  wGlow = 0.;\n  gloDir = gloPos - ro;\n  gloDist = length (gloDir);\n  gloDir /= gloDist;\n  if (gloDist < dstHit) wGlow +=\n     pow (max (dot (rd, gloDir), 0.), 1024.) / sqrt (gloDist);\n  return 0.7 * (0.9 + 0.1 * sin (5. * tCur)) * clamp (wGlow, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltVec, roo, rdo;\n  float dstHit, ltDist, h;\n  roo = ro;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += dstHit * rd;\n    ltVec = ltPos - ro;\n    ltDist = length (ltVec);\n    ltVec /= ltDist;\n    vn = ObjNf (ro);\n    vn = VaryNf (50. * ro, vn, 5.);\n    h = length ((ro.xy - TrackPath (ro.z).xy) - (roo.xy - TrackPath (roo.z).xy));\n    col = HsvToRgb (vec3 (mod (0.3 * h + 0.03 * ro.z, 1.), 0.8,\n       min (0.4 + 0.6 * h, 1.)));\n    col *= (0.3 + 0.7 * max (dot (vn, ltVec), 0.)) / (1. + 0.02 * ltDist * ltDist);\n  } else {\n    col = vec3 (0., 0., 0.1);\n    rdo = rd;\n    rdo += vec3 (1.);\n    for (int j = 0; j < 10; j ++)\n       rdo = 11. * abs (rdo) / dot (rdo, rdo) - 3.;\n    col += min (1., 1.5e-6 * pow (min (16., length (rdo)), 5.)) *\n       vec3 (0.7, 0.6, 0.6);\n  }\n  col = mix (col, vec3 (1., 0.7, 0.5), GlowCol (roo, rd, dstHit));\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, vFly;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = -0.1 * pi + pi * mPtr.y;\n  }\n  trkF = vec2 (0.1, 0.17);\n  trkA = vec2 (2.5, 0.9);\n  vFly = 1.;\n  ro = TrackPath (vFly * tCur);\n  ro.y += 0.05;\n  vd = normalize (TrackVel (vFly * tCur));\n  ori = vec2 (el + 1.5 * sin (vd.y), az + 2. * atan (vd.x, vd.z));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 2.));\n  rd.xy = Rot2D (rd.xy, -20. * TrackAcc (vFly * tCur).x);\n  gloPos = TrackPath (vFly * tCur + 1.);\n  ltPos = gloPos;\n  dstFar = 30.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}