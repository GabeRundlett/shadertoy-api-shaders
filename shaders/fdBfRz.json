{
    "Shader": {
        "info": {
            "date": "1645593738",
            "description": "!!!",
            "flags": 0,
            "hasliked": 0,
            "id": "fdBfRz",
            "likes": 15,
            "name": "Mis Ojos",
            "published": 3,
            "tags": [
                "eyes",
                "animated",
                "realistic"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "#define TAU 6.2831853072\n\n// http://marcodiiga.github.io/radial-lens-undistortion-filtering\nvec2 barrelDistort(in vec2 p, in vec2 alpha) {\n    return p / (1.0 - alpha * dot(p, p));\n}\n\n// 1D noise\nfloat Hash11(in float p) { // https://www.shadertoy.com/view/4djSRW\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat snoise11(in float p) {\n    return mix(Hash11(floor(p)), Hash11(ceil(p)), smoothstep(0.0, 1.0, fract(p)));\n}\n\nfloat fbm11(in float p) {\n    p *= 6.0;\n\n    float res = 0.0;\n    float amp = 1.0;\n    float totAmp = 0.0;\n    for (int oct=0; oct < 5; oct++) {\n        res += amp * snoise11(p);\n        totAmp += amp;\n        p *= 2.0;\n        amp *= 0.5;\n    }\n\n    return res / totAmp;\n}\n\n// 2D noise\nfloat Hash21(in vec2 p) { // https://www.shadertoy.com/view/4djSRW\n    vec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat snoise21(in vec2 p) {\n    vec2 cell = floor(p);\n    vec2 local = smoothstep(0.0, 1.0, fract(p));\n\n    float bl = Hash21(cell);\n    float br = Hash21(cell + vec2(1.0, 0.0));\n    float tl = Hash21(cell + vec2(0.0, 1.0));\n    float tr = Hash21(cell + 1.0);\n\n    return mix(mix(bl, br, local.x), mix(tl, tr, local.x), local.y);\n}\n\nfloat fbm21(in vec2 p) {\n    float res = 0.0;\n    float amp = 1.0;\n    float totAmp = 0.0;\n    for (int oct=0; oct < 5; oct++) {\n        res += amp * abs(2.0 * snoise21(p) - 1.0);\n        totAmp += amp;\n        p *= 2.0;\n        amp *= 0.5;\n    }\n\n    return res / totAmp;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Symmetry (not mirroring though)\n    uv.x = uv.x - 1.4 * sign(uv.x);\n\n    // Distorted UVs to fake a 3D look\n    vec2 bulgeUv = barrelDistort(uv, vec2(0.25));\n    vec2 eyeballUv = bulgeUv - 0.15 * mouse; // Look at mouse\n\n    // Veins\n    float co = cos(1.4), si = sin(1.4);\n    mat2 rot = mat2(co, si, -si, co);\n\n    float veinFade = smoothstep(1.8, 0.0, length(eyeballUv));\n    for (int i=0; i < 4; i++) {\n        color.gb -= 0.7 * smoothstep(0.2, 0.0, fbm21(2.0 * eyeballUv - 10.0)) * veinFade;\n        eyeballUv *= rot;\n    }\n\n    color = max(color, 0.0);\n\n    // Iris\n    vec2 polar = vec2(atan(eyeballUv.y, eyeballUv.x), length(eyeballUv));\n\n    float irisWidth = 0.125 + 0.015 * snoise11(iTime);\n    float irisRadius = 0.375 - irisWidth;\n    float irisDist = abs(length(eyeballUv) - irisRadius) - irisWidth;\n\n    vec3 irisColor = vec3(0.7, 0.4, 0.0) * fbm11(polar.x);\n    irisColor += vec3(0.0, 0.45, 0.0) * fbm11(polar.x - 10.0);\n    color = mix(color, irisColor * 0.9, smoothstep(unit, 0.0, irisDist));\n    //color *= smoothstep(0.0, 0.31, polar.y);\n    if (polar.y < irisRadius + irisWidth) color *= smoothstep(0.1, -0.1, irisDist); // It took me a while to realize this was what I really needed!\n\n    // Pupil\n    color = max(color - smoothstep(unit, 0.0, polar.y - irisRadius + irisWidth), 0.0);\n\n    // Fake specular highlight\n    color += smoothstep(0.2, -0.2, length(uv - vec2(0.3, 0.15)));\n\n    // Eye shape (deformed circle)\n    vec2 eyeUv = vec2(uv.x, 3.5 * uv.y / (2.0 - uv.x * uv.x));\n    //vec2 eyeUv = vec2(uv.x, 6.5 * uv.y / (4.0 - uv.x * uv.x));\n\n    float eyeMask = smoothstep(0.1, -0.1, length(eyeUv) - 1.0); // Outline\n    eyeMask *= smoothstep(2.0, 0.0, length(eyeUv)); // Shading\n\n    float blink = 1.0 - 2.0 * pow(abs(cos(mod(iTime, TAU))), 1000.0);\n    float eyelidCurve = 0.15 * bulgeUv.x * bulgeUv.x * blink;\n    eyeMask *= smoothstep(0.1, 0.0, bulgeUv.y + eyelidCurve - blink); // Eyelid\n\n    color *= eyeMask;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}