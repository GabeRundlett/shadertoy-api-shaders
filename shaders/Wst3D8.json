{
    "Shader": {
        "info": {
            "date": "1568383489",
            "description": "Slower, zoomed out version of gabwoot's 'Snake low poly texture' [url]https://www.shadertoy.com/view/3stGD8[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Wst3D8",
            "likes": 6,
            "name": "Triangle ocean",
            "published": 3,
            "tags": [
                "triangle",
                "texture",
                "wavy",
                "lowpoly"
            ],
            "usePreview": 0,
            "username": "Mipmap",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "// Slower, zoomed out version of gabwoot's 'Snake low poly texture' https://www.shadertoy.com/view/3stGD8\n#define PI\t\t\t\t3.141592653589793\n#define TWO_PI\t\t\tPI * 2.0\n#define TIME_SCALE      1.0 / 32.0\n#define BRIGHTNESS      1.6\n#define TRIPPINESS      8.0\n#define ZOOM            12.0\n\nconst vec4 color1 = vec4(0, 59, 70, 255) / vec4(255);\nconst vec4 color2 = vec4(7, 87, 91, 255) / vec4(255);\n\nvec2 coord(in vec2 p) {\n  p = p / iResolution.xy;\n  // correct aspect ratio\n  if (iResolution.x > iResolution.y) {\n    p.x *= iResolution.x / iResolution.y;\n    p.x += (iResolution.y - iResolution.x) / iResolution.y / 2.0;\n  } else {\n    p.y *= iResolution.y / iResolution.x;\n    p.y += (iResolution.x - iResolution.y) / iResolution.x / 2.0;\n  }\n  // centering\n  p -= 0.5;\n  p *= vec2(-1.0, 1.0);\n  return p;\n}\n\nmat2 rotation2d(float angle) {\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n}\n\nfloat random (in vec2 st) {\n    return fract(\n        sin(\n            dot(st.xy, vec2(12.9898,78.233))\n        ) * 43758.5453123\n    );\n}\n\nfloat normalize2(float minV, float maxV, float v) {\n    return minV + v * (maxV - minV);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n \n    vec2 uv = coord(fragCoord.xy);\n    float time = iTime * TIME_SCALE;\n\n    vec2 wave = uv;\n    wave.x += sin(uv.y * TRIPPINESS + time) * 0.1;\n    wave.y += cos(uv.x * TRIPPINESS + time) * 0.1;\n    uv += wave;\n\n    uv *= rotation2d(PI / 3.2 * time);\n    uv *= vec2(normalize2(1., 2., (1. + sin(time)) / 2.));\n    uv += vec2(normalize2(5., 10., time));\n\n    vec2 index = floor(ZOOM * uv) / ZOOM;\n    float t = floor(random(index) * 4.) / 4.;\n    uv = 2.0 * fract(ZOOM * uv) - 1.0;\n    uv *= rotation2d(t * TWO_PI);\n\n    float c = step(uv.x, uv.y) * 0.9;\n    c = abs(sin(5. + fract((random(index + c) + 0.1))));\n    vec4 color = random(vec2(c)) > 0.5 ? color1 : color2;\n    fragColor = vec4((c * BRIGHTNESS + 0.5) * color.xyz, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}