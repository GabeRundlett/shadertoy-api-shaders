{
    "Shader": {
        "info": {
            "date": "1666800645",
            "description": "The spectral frequencies of elements can be expressed in terms of sin waves, which create unique sounds. The frequencies for hydrogen can be calculated analytically but other elements have been found experimentally which I have copied here. ",
            "flags": 8,
            "hasliked": 0,
            "id": "dsf3Wj",
            "likes": 3,
            "name": "What Elements Sound Like",
            "published": 3,
            "tags": [
                "sound",
                "iron",
                "hydrogen"
            ],
            "usePreview": 0,
            "username": "incription",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "vec3 Freq(vec2 uv, float nm) {\n    return mix(vec3(0), vec3(0.03), float(length(uv) < (nm/2.2)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float[] s = ELEMENT;\n    float f = 0.;\n    for(int i=0;i<s.length();i++) {\n        float nm = 950. / (s[i]);\n        col += Freq(uv, sin(nm  * (iTime + 1.) * 6.2831 * 440.));\n    }\n    \n    //if(length(uv-.5) < (f/100.)) col = vec3(0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float[] s = ELEMENT;\nvec2 mainSound( int samp, float time )\n{\n    \n    float f = 0.;\n    for(int i=0;i<s.length();i++) {\n        float nm = 950. / (s[i]);\n        f += sin(nm  * (time + 1.) * 6.2831 * 440.);\n    }\n    \n    return vec2( f / float(s.length()) );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define ELEMENT Hydrogen\n\nconst float[] Hydrogen = float[]( 926.2256, 930.7482, 937.8034, 949.743, 972.5367, 1025.7222, 1215.66824, 1215.67364, 3835.384, 3889.049, 3970.072, 4101.74, 4340.462, 4861.2786, 4861.287, 4861.3615, 6562.711, 6562.7248, 6562.8518, 9545.97, 10049.4, 10938.1, 12818.07, 18751.01, 21655.3, 26251.5, 40511.6, 46525.1, 74578.0);\nconst float[] Iron = float[]( 30.0, 2178.0808, 2259.5103, 2292.5249, 2298.1689, 2300.1418, 2327.3958, 2331.3084, 2332.799, 2338.0065, 2343.4951, 2343.961, 2344.2816, 2348.1159, 2348.3025, 2359.1322, 2359.9997, 2360.2945, 2363.8612, 2364.8281, 2365.7654, 2368.5964, 2369.9534, 2373.6245, 2373.7357, 2375.194, 2376.4294, 2379.2765, 2380.7616, 2382.0376, 2383.2452, 2388.6289, 2395.6254, 2399.2413, 2404.8858, 2406.6612, 2406.9761, 2410.5192, 2411.0677, 2413.3104, 2417.8707, 2422.6882, 2424.1456, 2428.3638, 2430.0783, 2432.2612, 2432.8732, 2439.3014, 2443.71, 2444.5154, 2445.5732, 2457.5891, 2458.7838, 2460.4404, 2461.2835, 2461.861, 2462.6472, 2465.1492, 2466.6713, 2466.8194, 2468.8799, 2469.5147, 2470.6694, 2472.332, 2472.8713, 2474.8145, 2478.5722, 2479.7764, 2480.1577, 2482.1172, 2482.6577, 2483.2708, 2483.5334, 2484.1875, 2484.2446, 2486.3728, 2488.1426, 2489.4833, 2489.7524, 2490.6443, 2490.8584, 2491.155, 2491.3965, 2493.1846, 2493.2637, 2496.5337, 2501.1318, 2502.393, 2503.8745, 2506.0935, 2507.9004, 2510.835, 2511.7603, 2512.365, 2517.6611, 2518.1018, 2519.0472, 2522.8494, 2524.2925, 2525.3879, 2526.2939, 2527.4351, 2529.135, 2533.6274, 2534.4186, 2535.4856, 2535.6069, 2536.6726, 2536.8, 2538.7987, 2538.9094, 2538.99, 2540.66, 2540.9722, 2541.101, 2541.8358, 2542.1013, 2543.3781, 2545.9785, 2546.6701, 2548.7442, 2549.0833, 2549.3947, 2549.4616, 2549.6133, 2550.0274, 2550.6832, 2562.5356, 2563.4755, 2566.9126, 2574.3662, 2576.6902, 2577.9219, 2582.5832, 2584.5359, 2585.8758, 2591.5428, 2598.3692, 2599.3956, 2599.5669, 2606.5162, 2606.8264, 2607.0871, 2611.8736, 2613.8243, 2617.6174, 2620.41, 2623.5339, 2625.6671, 2628.2931, 2631.0471, 2631.3232, 2635.8088, 2664.6638, 2666.8125, 2679.0242, 2684.7536, 2689.2122, 2692.6019, 2703.9891, 2706.582, 2714.4129, 2719.0273, 2720.9023, 2723.5774, 2727.5392, 2728.9, 2733.5806, 2735.4753, 2737.3091, 2739.5474, 2742.4053, 2743.1969, 2746.4838, 2749.3216, 2749.486, 2750.1406, 2753.2877, 2755.7365, 2761.81, 2772.074, 2778.2202, 2788.1047, 2804.5203, 2806.9841, 2813.2864, 2823.2756, 2825.5557, 2832.4355, 2838.1194, 2843.9763, 2851.7969, 2936.9033, 2947.876, 2953.9399, 2966.8982, 2970.0994, 2973.1323, 2973.2354, 2981.4451, 2983.5696, 2994.4268, 2999.5117, 3000.9478, 3008.1382, 3020.01, 3020.4907, 3020.6389, 3021.0728, 3024.0327, 3025.8423, 3037.3887, 3047.6045, 3057.4458, 3059.0857, 3193.2258, 3193.2998, 3222.0591, 3225.7871, 3236.2224, 3355.2278, 3407.4597, 3427.1194, 3440.606, 3440.9888, 3443.8765, 3465.8606, 3475.4502, 3476.7019, 3490.574, 3497.8406, 3521.2612, 3526.0408, 3541.0833, 3554.9246, 3558.5151, 3565.3789, 3570.0977, 3570.2542, 3581.1931, 3585.3188, 3586.9849, 3606.6794, 3608.8594, 3618.7678, 3631.4631, 3647.8428, 3679.9133, 3687.4568, 3705.5659, 3707.9199, 3709.2463, 3719.9348, 3722.563, 3727.6189, 3733.3176, 3734.8638, 3737.1316, 3743.3621, 3745.5613, 3745.8994, 3748.2622, 3749.4854, 3758.2329, 3760.0498, 3763.7891, 3765.5388, 3767.1919, 3795.0022, 3799.5476, 3812.9646, 3815.8403, 3820.4253, 3824.4436, 3825.8811, 3827.8225, 3834.2224, 3840.4375, 3841.0481, 3856.3716, 3859.9114, 3878.5732, 3886.2822, 3888.5134, 3895.6565, 3899.7075, 3902.9458, 3920.2581, 3922.9119, 3927.9199, 3930.2966, 4005.2419, 4045.8125, 4063.5942, 4071.738, 4132.0581, 4143.8682, 4202.0293, 4216.1836, 4250.7871, 4260.4746, 4271.7607, 4282.4028, 4307.9023, 4325.7622, 4375.9302, 4383.5449, 4404.7505, 4415.1226, 4427.2979, 4461.6528, 4920.5029, 4957.5967, 5167.4883, 5171.5962, 5227.1509, 5269.5376, 5270.3564, 5328.0386, 5328.5317, 5341.0239, 5371.4897, 5397.1279, 6247.56, 6456.38, 11607.5752, 11689.9756, 11882.8467, 11973.0498 );\nconst float[] Carbon = float[]( 687.0526, 687.346, 903.6235, 903.9616, 904.1416, 904.4801, 1036.3367, 1037.0182, 1193.0088, 1193.0308, 1193.2402, 1193.2644, 1261.552, 1277.2452, 1277.2824, 1277.5131, 1277.5497, 1280.333, 1329.5775, 1329.6005, 1334.5323, 1335.7077, 1560.309, 1560.682, 1560.709, 1561.438, 1656.267, 1656.928, 1657.008, 1657.379, 1657.907, 1658.121, 1751.827, 1930.906, 2478.561, 2836.71, 2837.603, 2992.618, 3918.978, 3920.693, 4267.003, 4267.258, 5145.16, 5151.09, 5380.34, 5889.77, 6013.22, 6578.05, 6582.88, 7231.32, 7236.42, 8335.15, 9094.83, 9111.8, 9405.73, 9658.44, 10691.25, 11748.22, 11753.32, 11754.76, 16890.38 );\nconst float[] Uranium = float[]( 120.0, 2635.529, 2793.934, 2802.56, 2807.119, 2817.958, 2821.121, 2828.935, 2832.061, 2865.681, 2889.624, 2906.794, 2908.272, 2931.414, 2941.916, 2943.896, 2956.06, 2967.936, 2971.066, 3022.21, 3031.987, 3050.197, 3057.939, 3062.537, 3072.783, 3093.005, 3102.422, 3111.618, 3124.952, 3149.24, 3229.499, 3232.156, 3291.332, 3305.8912, 3357.8437, 3390.3775, 3424.5566, 3435.4913, 3459.9191, 3462.22, 3463.5479, 3466.301, 3473.4269, 3480.3634, 3482.49, 3489.3672, 3493.9963, 3500.076, 3504.0089, 3507.3442, 3513.6742, 3514.6107, 3533.5659, 3534.3346, 3542.5704, 3549.2018, 3550.8223, 3555.3188, 3561.411, 3561.8038, 3563.6559, 3566.5909, 3569.0781, 3574.7602, 3577.9162, 3578.7211, 3584.8774, 3591.7443, 3605.2742, 3616.3305, 3620.0838, 3622.6987, 3638.1986, 3644.2422, 3651.5366, 3652.0641, 3659.1548, 3670.0701, 3701.5161, 3713.5546, 3738.0405, 3746.419, 3748.6758, 3751.1746, 3758.348, 3763.2643, 3766.8864, 3773.4339, 3782.8407, 3793.1002, 3793.2638, 3808.9207, 3811.9911, 3826.5084, 3831.4593, 3839.6255, 3854.2202, 3854.6448, 3859.5716, 3865.9176, 3871.0353, 3874.0387, 3878.0847, 3881.4546, 3890.3615, 3892.681, 3894.1206, 3899.7775, 3906.453, 3926.2078, 3926.7153, 3932.0221, 3943.8161, 3964.2064, 3966.5211, 3985.7924, 4005.2094, 4017.7163, 4042.7496, 4047.6117, 4050.0412, 4062.544, 4090.1319, 4116.0974, 4153.971, 4156.6483, 4171.5886, 4222.3677, 4241.6646, 4341.6865, 4355.74, 4362.051, 4393.5858, 4472.3297, 4543.6255, 4756.8059, 5027.3841, 5915.385, 6826.913, 8607.95, 8691.282, 8757.76, 10157.91, 10259.55, 10554.93, 11167.84, 11384.13, 11859.42, 11908.83, 13185.16, 13961.58 );\n\nvec3 spectral_spektre (float l)\n{\n\tfloat r=0.0,g=0.0,b=0.0;\n\t\t\tif ((l>=400.0)&&(l<410.0)) { float t=(l-400.0)/(410.0-400.0); r=    +(0.33*t)-(0.20*t*t); }\n\telse if ((l>=410.0)&&(l<475.0)) { float t=(l-410.0)/(475.0-410.0); r=0.14         -(0.13*t*t); }\n\telse if ((l>=545.0)&&(l<595.0)) { float t=(l-545.0)/(595.0-545.0); r=    +(1.98*t)-(     t*t); }\n\telse if ((l>=595.0)&&(l<650.0)) { float t=(l-595.0)/(650.0-595.0); r=0.98+(0.06*t)-(0.40*t*t); }\n\telse if ((l>=650.0)&&(l<700.0)) { float t=(l-650.0)/(700.0-650.0); r=0.65-(0.84*t)+(0.20*t*t); }\n\t\t\tif ((l>=415.0)&&(l<475.0)) { float t=(l-415.0)/(475.0-415.0); g=             +(0.80*t*t); }\n\telse if ((l>=475.0)&&(l<590.0)) { float t=(l-475.0)/(590.0-475.0); g=0.8 +(0.76*t)-(0.80*t*t); }\n\telse if ((l>=585.0)&&(l<639.0)) { float t=(l-585.0)/(639.0-585.0); g=0.82-(0.80*t)           ; }\n\t\t\tif ((l>=400.0)&&(l<475.0)) { float t=(l-400.0)/(475.0-400.0); b=    +(2.20*t)-(1.50*t*t); }\n\telse if ((l>=475.0)&&(l<560.0)) { float t=(l-475.0)/(560.0-475.0); b=0.7 -(     t)+(0.30*t*t); }\n\n\treturn vec3(r,g,b);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}