{
    "Shader": {
        "info": {
            "date": "1440000040",
            "description": "applying the audio flange effect to an image to see what it looks like.  Use mouse dragging to enable interactivity on the X axis.  Mouse X = frequency.  Mouse Y = Depth (max offset)",
            "flags": 0,
            "hasliked": 0,
            "id": "4tfSWX",
            "likes": 13,
            "name": "Image Flange",
            "published": 3,
            "tags": [
                "2d",
                "flange"
            ],
            "usePreview": 1,
            "username": "demofox",
            "viewed": 1851
        },
        "renderpass": [
            {
                "code": "#define CHROMATIC 1\n\nfloat c_depthX = 3.0;  // in pixels, how far on the x axis the flange moves\nfloat c_depthY = 2.0;  // in pixels, how far on the y axis the flange moves\nfloat c_frequencyX = 4.3; // in Hz, the frequency of the sine wave controling the x axis flange\nfloat c_frequencyY = 7.14; // in Hz, the frequency of the sine wave controling the x axis flange\nfloat c_textureSize = 512.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float c_pixelSize = (1.0 / c_textureSize);\n    // interactive mode settings\n    if (iMouse.z > 0.0)\n    {\n        c_frequencyX = 100.0 * iMouse.x / iResolution.x;\n        c_depthX = 25.0 * iMouse.y / iResolution.y;\n        c_frequencyY = 0.0;\n        c_depthY = 0.0;\n    }\n    \n    // calculate the uv and offset for our uv\n\tvec2 uv = fragCoord.xy / iResolution.xy * vec2(1,-1);\n    \n    vec2 offset = vec2(\n        (sin(iTime*c_frequencyX) * 0.5 + 0.5) * c_pixelSize*c_depthX,\n        (sin(iTime*c_frequencyY) * 0.5 + 0.5) * c_pixelSize*c_depthY\n\t);\n    \n    // get our value and our offset value \n    #if CHROMATIC\n    \tvec3 a = texture(iChannel0, uv).rgb;\n    \tvec3 b = vec3(\n            texture(iChannel0, uv + offset.xy).r,\n            texture(iChannel0, uv + offset.yx).g,\n            texture(iChannel0, uv + vec2(offset.y, -offset.x)).b            \n\t\t);\n    #else\n    \tvec3 a = texture(iChannel0, uv).rgb;\n    \tvec3 b = texture(iChannel0, uv + offset).rgb;\n    #endif\n    \n    // convert from 0-1 space to -1 to 1 space so we can have cancelation when doing addition\n    a = a * 2.0 - 1.0;\n    b = b * 2.0 - 1.0;\n    \n    // add (mix)\n    vec3 color = a + b;\n    \n    // convert from -1 to 1 space to 0 to 1 space again\n    color = color * 0.5 + 0.5;\n    \n    // set the color\n\tfragColor = vec4(clamp(color, 0.0, 1.0), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}