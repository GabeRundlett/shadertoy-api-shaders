{
    "Shader": {
        "info": {
            "date": "1702374053",
            "description": "Volumetric Bloom",
            "flags": 0,
            "hasliked": 0,
            "id": "ctyBRc",
            "likes": 10,
            "name": "Bloomy shape",
            "published": 3,
            "tags": [
                "volumetric",
                "bloom"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "float hash21(vec2 p){\n    vec2 d = vec2(17.256, 18.5679);\n    return fract(sin(dot(p,d)*3.3628)*17.256);\n\n}\nfloat hash(float h){\n    return fract(sin(h*173.456)*36.234);\n}\nfloat noise(vec2 p){\n    vec2 pt = floor(p);\n    vec2 pt1 = floor(p)+1.;\n    float h = hash21(pt);\n    float h1 = hash21(pt1);\n    return mix(h, h1, fract(p.x));\n}\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\nfloat sdZ(vec2 p){\n    \n    p *= 2.;\n    float d = sdSegment(p, vec2(-.4,-.3), vec2(.4,-.3));\n    d = min(d, sdSegment(p, vec2(.4,-.3), vec2(-.4,.3)));\n    d = min(d, sdSegment(p, vec2(-.4,.3), vec2(.4,.3)));\n   \n    return d;\n}\nmat2 rot(float angle){\n    return mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n}\nvec4 palette(float t){\n    return mix(\n        mix(vec4(0.988,0.686,0.243,1), vec4(0.678,0.498,0.659,1), cos(t)*.5+.5), \n        mix(vec4(0.451,0.824,0.086,1), vec4(0.204,0.396,0.643,1), cos(t)*.5+.5), \n        cos(t*.07)*.5+.5);\n}\n#define R iResolution.xy\nvoid mainImage( out vec4 O,vec2 I)\n{\n    vec2 uv = (R*.5-I)/R.y;\n    float t=iTime*2.;\n    vec4 lum = vec4(0.);\n    for (float i=.5; i>0.3; i-=.0025){\n        vec2 p=(I+I-R)/R.y*i;\n        p *= 4.;\n        vec2 P = p;\n        p.x = p.x/.9;\n        float deltay = noise(vec2(t)*.02 + floor(p.x));\n        p.y += deltay*deltay*16.;\n        vec2 id = floor(p);\n        float go_id = noise(id*17. + t*.3);\n        go_id *= go_id;\n        float angle = noise(t*.001+vec2(go_id))*4.;\n        p = fract(p);\n        p -= .5;\n        p *= rot(angle*6.28);\n        p*=1.5;\n        vec2 q = p;\n        float L2 = smoothstep(.05, .0, abs(sdEquilateralTriangle(p, .4))-.01);\n        p = abs(p);\n        float L = abs(max(abs(p.x), abs(p.y)))*4.;\n        L = mix(abs(L - 1.), L2-1., .5+.5*cos(1.*t*(noise(vec2(hash21(id)))-.5)));\n        float dZ = sdZ(q);\n        float dO = abs(length(q)*4.-1.);\n        float zo =  mix(dZ, dO, .5+.5*cos(1.*t*(noise(vec2(hash21(id)))-.5)));\n        L = mix(L, zo, .5+.5*cos(.1*t + length(uv)*2.));\n        float d = L;\n        float LP = length(p);\n        LP = 1./(1.+150.*LP*LP);\n        vec4 c = palette(t*0.2 + i*6.2830*4.+ 3.14159*cos(.1*t + length(uv)*2.));\n        if (i==.5){\n            lum += c*exp(-d*d*1000.)*go_id/i*.5 * smoothstep(1., .0, length(uv))*4.* LP + c/(1.+400.*d*d)*go_id * LP;\n\n        }\n        else{\n            c *= exp(-d*d*1000.*i)*go_id;\n            float Di = abs(.5-i);\n            lum += c/i*.1 * smoothstep(1., .0, length(uv))/(1.+600.*Di*Di)*2.* LP;\n        }\n    }\n    lum = tanh(lum*lum*(30. + 10.*cos(t*.35)));\n    O=lum;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}