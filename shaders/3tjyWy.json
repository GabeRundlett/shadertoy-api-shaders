{
    "Shader": {
        "info": {
            "date": "1595268741",
            "description": "https://de.wikipedia.org/wiki/Mitchell-Netravali-Filter",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjyWy",
            "likes": 0,
            "name": "Mitchell-Netravali Filter",
            "published": 3,
            "tags": [
                "filter",
                "filtering",
                "interpolation",
                "reconstruction"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 557
        },
        "renderpass": [
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\n\thttps://de.wikipedia.org/wiki/Mitchell-Netravali-Filter\n*/\n\n#define PARAMS 0\n\n#if PARAMS == 0\n\n// cubic B-Spline\nconst float MN_B = 1.0;\nconst float MN_C = 0.0;\n\n#elif PARAMS == 1\n\nconst float MN_B = 1.0/3.0;\nconst float MN_C = 1.0/3.0;\n\n#elif PARAMS == 2\n\n// Rom-Spline\nconst float MN_B = 0.0;\nconst float MN_C = 1.0/2.0;\n\n#endif\n#undef PARAMS\n\nfloat MNKern(float x)\n{\n    const float B = MN_B;\n    const float C = MN_C;\n    \n    x = abs(x);\n    \n    float a = x < 1.0 ?   1.0 -  2.0/6.0*B         :   8.0/6.0*B + 4.0*C;\n    float b = x < 1.0 ?   0.0                      :     - 2.0*B - 8.0*C;\n    float c = x < 1.0 ? - 3.0 +      2.0*B + 1.0*C :       1.0*B + 5.0*C;\n    float d = x < 1.0 ?   2.0 -      1.5*B - 1.0*C :  -1.0/6.0*B - 1.0*C;\n    \n    return a + x * (b + x * (c + x * d));\n}\n\nvec2 MNKern2(float x)\n{\n    const float B = MN_B;\n    const float C = MN_C;\n    \n    float sn = x < 0.0 ? -1.0 : 1.0;\n    \n    x = abs(x);\n    \n    float a = x < 1.0 ?   1.0 -  2.0/6.0*B         :   8.0/6.0*B + 4.0*C;\n    float b = x < 1.0 ?   0.0                      :     - 2.0*B - 8.0*C;\n    float c = x < 1.0 ? - 3.0 +      2.0*B + 1.0*C :       1.0*B + 5.0*C;\n    float d = x < 1.0 ?   2.0 -      1.5*B - 1.0*C :  -1.0/6.0*B - 1.0*C;\n    \n    float d0 = (a + x * (b + x * (    c + x *      d)));\n    float d1 =           b + x * (2.0*c + x * (3.0*d));\n    \n    return vec2(sn * d1, d0);\n}\n\nvec3 MNKern3(float x)\n{\n    const float B = MN_B;\n    const float C = MN_C;\n    \n    float sn = x < 0.0 ? -1.0 : 1.0;\n    \n    x = abs(x);\n    \n    float a = x < 1.0 ?   1.0 -  2.0/6.0*B         :   8.0/6.0*B + 4.0*C;\n    float b = x < 1.0 ?   0.0                      :     - 2.0*B - 8.0*C;\n    float c = x < 1.0 ? - 3.0 +      2.0*B + 1.0*C :       1.0*B + 5.0*C;\n    float d = x < 1.0 ?   2.0 -      1.5*B - 1.0*C :  -1.0/6.0*B - 1.0*C;\n    \n    float d0 = (a + x * (b + x * (    c + x *      d)));\n    float d1 =           b + x * (2.0*c + x * (3.0*d));\n    float d2 =                    2.0*c + x * (6.0*d);\n    \n    return vec3(d2, sn * d1, d0);\n}\n\nfloat MNKernD1(float x)\n{\n    const float B = MN_B;\n    const float C = MN_C;\n        \n    float sn = x < 0.0 ? -1.0 : 1.0;\n    \n    x = abs(x);\n    \n    float a = x < 1.0 ?                  0.0 : -2.0*B -  8.0*C;\n    float b = x < 1.0 ? -6.0 + 4.0*B + 2.0*C :  2.0*B + 10.0*C;\n    float c = x < 1.0 ?  6.0 - 4.5*B - 3.0*C : -0.5*B -  3.0*C;\n    \n    return sn * (a + x * (b + x * c));\n}\n\n\nvec4 MNKern2(vec2 p)\n{\n    vec2 kernX = MNKern2(p.x);\n    vec2 kernY = MNKern2(p.y);\n    \n    return vec4(kernX.x * kernY.y,  // d/dx\n                kernX.y * kernY.x,  // d/dy\n                kernX.x * kernY.x,  // dd/dxdy\n                kernX.y * kernY.y); // f\n}\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n\tvec2 uv = uv0 - 0.5;\n    uv0 += 0.0;\n    \n    vec2 tex = uv0;\n    tex -= iResolution.xy * 0.5;\n    tex /= iResolution.xx * 0.125;\n\n    tex *= 0.5;\n    \n\n    vec3 col = vec3(0.0);\n    \n\tcol = mix(vec3(1.0), vec3(0.9), Grid(tex.xy * 4.0, 0.0));        \n\tcol = mix(col, vec3(0.5), Grid(tex.xy * 1.0, 0.0));        \n\tcol = mix(col, vec3(0.125), Cross(tex.xy * 1.0, 0.)); \t\n    \n    \n    col = mix(col, vec3(0.0, 1.0, 0.5), Graph(MNKern3(tex.x).x*0.5 - tex.y, 0.5)*0.5);       \n    col = mix(col, vec3(0.0, 0.5, 1.0), Graph(MNKern3(tex.x).y - tex.y, 0.5));       \n    col = mix(col, vec3(1.0, 0.0, 0.0), Graph(MNKern3(tex.x).z - tex.y, 0.5)); \n    \n    #if 1\n    vec2 s = (uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow2(s.x);    s.y = 1.0-Pow2(s.y);\n    col *= mix(1.0, 0.4, Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    \n    outCol = vec4(GammaEncode(clamp01(col)), 1.0);    \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define PixelCount iResolution.xy\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define rsqrt inversesqrt\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\nconst float Pi2  = Pi * 2.0;\nconst float RcpPi= 1.0 / Pi;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat ddxyLen(float v) { return length(vec2(dFdx(v), dFdy(v))); }\nfloat ddxyRcpLen(float v) { return rsqrt( Pow2(dFdx(v)) + Pow2(dFdy(v)) ); }\n\n\nfloat rescale(float v) { return v * ddxyRcpLen(v); }\n\nfloat Graph(float f, float b)\n{\n    return clamp01(1.0 - (abs(rescale(f))-0.5-b)); \n}\n\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * Pi), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    float xl = Lines(uv.x, b);    \n    float yl = Lines(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    float xl = Line(uv.x, b);    \n    float yl = Line(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Dot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v *= ddxyRcpLen(v);\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}