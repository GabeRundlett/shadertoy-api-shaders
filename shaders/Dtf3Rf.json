{
    "Shader": {
        "info": {
            "date": "1672123855",
            "description": "Just a little fun shader to cleanse the palette since I've been working on so much more difficult ones lately.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dtf3Rf",
            "likes": 19,
            "name": "Rainbow Bump (314 chars)",
            "published": 3,
            "tags": [
                "raymarch",
                "codegolf"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "// From FabriceNeyret2: 314 chars\n//*\n#define n normalize\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec3  R = iResolution,\n          u = ( U.xyy -.5*R ) / R.y,\n          p = vec3(6, 9, 3),\n          x = n(p.zzy - p.xzz), \n          r = u.x * x - u.y * n(cross(p, x)) - n(p);\n    float v = x.z;\n    \n    for (; v > .01;  )\n        R = exp(abs( p += .2*r * v )),\n        v = p.y - 15. * sin(p.z) / (R.x+R.z);\n    \n    v = p.x - iTime * .2;\n    O =   smoothstep(.2, .4, abs(fract(v * 2.) - .5)) \n       * ( sin(v + vec4(0, 1, 3, 0)) * .5 + .5 );\n}\n/**/\n\n// My golfing attempt: 333 chars\n/*\n#define n normalize\n#define R iResolution\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    u -= .5 * R.xy;\n    u /= R.y;\n    \n    vec3 p = vec3(6, 9, 3),\n         x = n(p.zzy - p.xzz),\n         r = (u.x * x - u.y * n(cross(p, x)) - n(p)) * .2;\n\n    for (;x.z > .01; x.z = p.y - 15. * sin(p.z) / (exp(abs(p.x)) + exp(abs(p.z))))\n        p += r * x.z;\n    \n    x.x = p.x - iTime * .2;\n    O = smoothstep(.2, .4, abs(fract(x.x * 2.) - .5)) * (sin(x.x + vec4(0, 1, 3, 0)) * .5 + .5);\n}\n/**/\n\n// Original (450 chars)\n/*\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    u = (u - .5*iResolution.xy) / iResolution.y;\n    vec3 p = vec3(6, 6, 3);\n    vec3 c = normalize(-p);\n    vec3 x = normalize(cross(c, vec3(0, -1, 0)));\n    vec3 y = normalize(cross(c, x));\n    vec3 r = normalize(c + u.x*x + u.y*y);\n\n    for (int i = 0; i < 1000; ++i)\n    {\n        float f = sin(p.z) / (exp(abs(p.x)) + exp(abs(p.z)));\n        float d = p.y - f*12.;\n        if (d < .0001) break;\n        p += r * d * .2;\n    }\n    \n    float t = p.x - iTime * .2;\n    vec3 color = sin(t + vec3(0, 1, 3)) * .5 + .5;\n    O = vec4(smoothstep(.1, .2, abs(mod(t, .5) - .25))) * vec4(color, 1);\n}\n/**/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}