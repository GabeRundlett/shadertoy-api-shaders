{
    "Shader": {
        "info": {
            "date": "1510860054",
            "description": "use prefix sum scan / stream reduction [url]https://www.shadertoy.com/view/ltsBzr[/url] to paint areas.\nMouse control. \nRewind to clear.",
            "flags": 32,
            "hasliked": 0,
            "id": "Mllfzr",
            "likes": 2,
            "name": "Parallel paint ( stream reduc)",
            "published": 3,
            "tags": [
                "parallelism",
                "sum",
                "compaction",
                "prefix"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 639
        },
        "renderpass": [
            {
                "code": "// base parallel count algo https://www.shadertoy.com/view/ltsBzr\n// see also: https://en.wikipedia.org/wiki/Prefix_sum\n//           http://www.seas.upenn.edu/~cis565/Lectures2011/Lecture12.pdf\n\n// paint obstacles in .r, current index count per line in .g , final indexing result in .b\n\n#define STYLE 3    \n\n#define T(U)   texelFetch( iChannel0, ivec2(U), 0 )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);\n\n#if   STYLE==1                                      // gradient style\n    O.g = 0.;   O.b /= T(vec2(iResolution.x-1.,U.y)).b;\n#elif STYLE==2                                      // checker style\n    O.r = O.g = 0.;   O.b = mod(O.b,2.);\n#else                                               // colored style\n    O = O.r > 0. ? vec4(1)\n                 : .3+.3*cos(.95*O.b+vec4(0,-2.1,2.1,0));\n#endif    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// .r = data, scattered 1 among zeros.\n// .g = current index count\n// .b = final index count\n\n#define rnd(U)   fract(sin(dot(U, vec2(12.9898, 78.233))) * 43758.5453)\n#define T(U,d)   texelFetch( iChannel0, ivec2(U) - ivec2(d,0), 0 )\n\nfloat segment(vec2 u, vec2 a, vec2 b)  {            // --- draw line segment\n    b -= a, u -= a;\n    float k = u.y/b.y;\n    return 0. <= k && k < 1. ? abs( u.x - round(b.x*k) ) : 1e9;     // horizontal distance (1 pixel per line)\n  //return length( u - b * clamp(dot(b, u) / dot(b, b), 0., 1.) ) ; // euclidian distance\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U,0);\n    vec2 R = iResolution.xy; \n    int l = int(log2(R.x))+2,                       // delay for complete propagate\n        i = iFrame % (l+1);                         // delay to restart\n    \n    if ( i == 0 ) O.g = O.r;\n                 // O.g = float( O.r > 0. && T(U,1).r == 0.);  // restart: count 1 if criterion ok                       \n    \n    if ( i < l )        \n        O.g += T(U,1<<(i-1)).g;                     // the hearth of the count algorithm\n    else O.b = O.g;\n    \n                                                    // --- drawing\n    vec2 P = floor(iMouse.xy),                      // mouse control (floor: recent shadertoy bug)\n        _P = iFrame>0 ? T(U-U,0).zw : R/2.;         // prev position\n    float t = iTime;\n    if (length(P)<10.)                              // demo mode: pilote mouse\n        P = R/2. + R/2.1*vec2(cos(t+sin(1.+t/17.7)),sin(t*1.71))*cos(2.+t/5.67); \n\t\n   // if (abs(P.y-_P.y) >= 1.)\n        O.r += step( segment( U-.5, _P, P ) ,.5);   // paint\n    //else P=_P;\n       \n    \n    if (U==vec2(.5)) O.zw = P;                      // last mouse pos\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}