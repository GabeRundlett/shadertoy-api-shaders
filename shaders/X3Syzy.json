{
    "Shader": {
        "info": {
            "date": "1727451650",
            "description": "A rotating 4d menger sponge rotating in the fourth dimension. If you pay close attention you can see that the relfections are of a different skybox because the light rays reflect into the fourth dimension.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3Syzy",
            "likes": 3,
            "name": "4d raymarching.",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "spheretracing",
                "4d",
                "signeddistancefields"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 55
        },
        "renderpass": [
            {
                "code": "#define ZERO int(min(0., iTime))\n#define PI 3.14159265\n#define MAX_ITERATIONS 1000\n\n#define MAX_DIST 100.\n#define MIN_DIST .0006\n\n#define SUN_DIR normalize(vec4(3.,7.,4.,.6))\n\n//Fractals---------------------------------------------------------------------------\nfloat sdfMengerTesseract(vec4 p, float s, int iterations) {\n    float scale = 1.;\n    \n    for (int i = ZERO; i < iterations; i++) {\n        scale *= 3.;\n        p *= 3.;\n        \n        p = abs(p);\n        fold(vec4(0., .5, 0., .5), vec4(0., 1., 0., -1.), p);\n        fold(vec4(0., .5, .5, 0.), vec4(0., 1., -1., 0.), p);\n        fold(vec4(.5, .5, 0., 0.), vec4(-1., 1., 0., 0.), p);\n        fold(vec4(0., .5, 0., 0.), vec4(0., -1., 0., 0.), p);\n        \n        p -= 1.;\n    }\n    \n    return (sdfTesseract(p, vec4(.5-s))-s)/scale;\n}\n//-----------------------------------------------------------------------------------\nfloat map(vec4 ro) {\n    ro.xw *= rotate(iTime*.7);\n    ro.yw *= rotate(PI*.2-iTime*.9);\n    ro.zw *= rotate(PI*.25+iTime*.6);\n    ro.xz *= rotate(-iTime*.3);\n    ro.xy *= rotate(-iTime*.2);\n    ro.yz *= rotate(iTime*.5);\n    \n    return sdfMengerTesseract(ro, .1, 3);\n}\n\nvec4 sdfNormal(vec4 p) {\n    const vec2 h = vec2(.001, 0.);\n    return normalize(vec4(\n\t    map(p+h.xyyy) - map(p-h.xyyy),\n\t    map(p+h.yxyy) - map(p-h.yxyy),\n\t    map(p+h.yyxy) - map(p-h.yyxy),\n\t\tmap(p+h.yyyx) - map(p-h.yyyx)\n\t));\n}\nvoid trace(vec4 ro, vec4 rd, inout float t, inout bool hit) {\n    t = 0.;\n    hit = false;\n    \n    for (int i = ZERO; i < MAX_ITERATIONS; i++) {\n        float dist = map(ro + rd*t);\n        \n        if (dist < MIN_DIST) {\n            hit = true;\n            break;\n        } else if (dist > MAX_DIST) {\n            break;\n        }\n        \n        t += dist;\n    }\n}\nvec3 render(vec4 ro, vec4 rd) {\n    float t = 0.;\n    bool hit = false;\n    vec3 col = vec3(1.);\n    \n    for (int i = 0; i < 3; i++) {\n        trace(ro, rd, t, hit);\n        if (!hit) {\n            if (i == 0) col *= mix(texture(iChannel0, rd.xyz).rgb, texture(iChannel2, rd.xyz).rgb, abs(rd.w));\n            else col *= mix(texture(iChannel1, rd.xyz).rgb, texture(iChannel3, rd.xyz).rgb, abs(rd.w));\n            break;\n        }\n\n        vec4 hit = ro + rd*t;\n        vec4 normal = sdfNormal(hit);\n        \n        col *= vec3(0.529,0.529,0.529);\n        ro = hit+normal*MIN_DIST*2.;\n        rd = reflect(rd, normal);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec2 m = (iMouse.xy-iResolution.xy/2.)/iResolution.y;\n\n    vec4 ro = vec4(0.,0.,2.,0.);\n    ro = vec4(rot3D(ro.xyz,-m.y*4.,-m.x*4.),ro.w);\n    vec4 rd = vec4(getRayDir(ro.xyz,vec3(0),uv,60.),0.);\n    \n    vec3 col = render(ro, normalize(rd));\n    \n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 getRayDir(vec3 ro, vec3 wo, vec2 uv, float FOV) {\n    float t = tan(FOV*3.14159/180.);\n    vec3 f = normalize(wo-ro),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        rd = f+r*uv.x*t+u*uv.y*t;\n    return normalize(rd);\n}\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(\n        c,-s,\n        s,c\n    );\n}\nvec3 rot3D(vec3 p, float pitch, float yaw) {\n    p.zy *= rotate(pitch);\n    p.xz *= rotate(yaw);\n    return p;\n}\nvoid fold(vec4 o, vec4 n, inout vec4 ro) {\n    n = normalize(n);\n    float d = dot(ro-o, n);\n    ro -= 2.*n*max(d,0.);\n}\n//SDFs-------------------------------------------------------------------------------\nfloat sdfSphere(vec4 ro, float r) {\n    return length(ro)-r;\n}\nfloat sdfTesseract(vec4 p, vec4 b) {\n  vec4 d = abs(p) - b;\n  return min(max(d.x,max(d.y,max(d.z,d.w))),0.0) + length(max(d,0.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}