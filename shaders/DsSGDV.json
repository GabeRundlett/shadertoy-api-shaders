{
    "Shader": {
        "info": {
            "date": "1668123542",
            "description": "polygon",
            "flags": 0,
            "hasliked": 0,
            "id": "DsSGDV",
            "likes": 0,
            "name": "polygon lines",
            "published": 3,
            "tags": [
                "polygon"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "// function from \nfloat f_n_dist_line(vec2 p, vec2 a,vec2 b) { // --- distance to segment with caps\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);// proj coord on line\n    return length(p - b * h);                      // dist to segment\n    // We might directly return smoothstep( 3./R.y, 0., dist),\n    //     but its more efficient to factor all lines.\n    // We can even return dot(,) and take sqrt at the end of polyline:\n    // p -= b*h; return dot(p,p);\n}\n\nfloat f_n_dist_polygon_slower(\n    float n_sides,\n    float n_radius, \n    vec2 o_pix_cor_nor\n){\n\n    float n_tau = 6.283185;\n    float n_dist_line_lowest = 1.0; \n    for(\n        float n_side_norm = 0.0;\n        n_side_norm < 1.0;\n        n_side_norm +=1.0/n_sides\n       ){\n           float n_side_norm_next = n_side_norm+(1.0/n_sides);\n       \n           vec2 p1 = vec2(\n               sin(n_tau*n_side_norm)*n_radius,\n               cos(n_tau*n_side_norm)*n_radius\n           );\n           vec2 p2 = vec2(\n               sin(n_tau*n_side_norm_next)*n_radius,\n               cos(n_tau*n_side_norm_next)*n_radius\n           );\n\n           \n           float n_dist = f_n_dist_line(o_pix_cor_nor, p1,p2);\n           \n           if(n_dist < n_dist_line_lowest){\n               n_dist_line_lowest = n_dist;\n           }\n       }\n       \n    \n    return n_dist_line_lowest;\n}\n\nfloat f_n_dist_polygon(\n    float n_sides,\n    float n_radius, \n    vec2 o_pix_cor_nor\n){\n\n    float n_tau = 6.283185;\n    float n_dist_line_lowest = 1.0;\n    \n    float n_center_xy = 0.0;\n    float delta_x = o_pix_cor_nor.x - n_center_xy;\n    float delta_y = o_pix_cor_nor.y - n_center_xy;\n    \n    float n_rad_current = atan(0.0, 0.0) - atan(o_pix_cor_nor.x, o_pix_cor_nor.y);\n    n_rad_current = atan(delta_x,delta_y);\n    float n_nth_line = floor(n_rad_current/(n_tau / n_sides));\n    float n_radians = (n_tau / n_sides) * (n_nth_line);\n    float n_radians_next = (n_tau / n_sides) * ((n_nth_line)+1.0);\n\n    //float n_radians_next = n_radians+ (n_tau / n_sides);\n\n   vec2 p1 = vec2(\n       sin((n_nth_line)*(n_tau / n_sides))*n_radius,\n       cos((n_nth_line)*(n_tau / n_sides))*n_radius\n   );\n   vec2 p2 = vec2(\n       sin(n_radians_next)*n_radius,\n       cos(n_radians_next)*n_radius\n   );\n\n   float n_dist = f_n_dist_line(o_pix_cor_nor,p2,p1);\n    \n    return n_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_pixel_coord_norm = fragCoord.xy / iResolution.xy;\n    \n    o_pixel_coord_norm -= 0.5;\n    \n    o_pixel_coord_norm.x *= iResolution.x/iResolution.y;\n    \n    //line\n    float n_ires_min =  min(iResolution.x,iResolution.y);\n    float n_ires_max =  max(iResolution.x,iResolution.y);\n    vec2 o_pix_cor_nor = fragCoord.xy / iResolution.xy; \n    o_pix_cor_nor-=0.5;\n    o_pix_cor_nor*= vec2(\n        n_ires_max / n_ires_min,\n        n_ires_min / n_ires_min\n    );\n    o_pix_cor_nor*=2.0; // zoom out\n    \n    \n    float n_sides = 5.0;\n    float n_radius_norm = 0.5;\n    float n_dist_polygon = f_n_dist_polygon(\n        n_sides, \n        n_radius_norm, \n        o_pix_cor_nor\n    );\n    \n    fragColor = vec4(n_dist_polygon);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}