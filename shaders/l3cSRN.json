{
    "Shader": {
        "info": {
            "date": "1718697192",
            "description": "Little hearts caught in violent winds",
            "flags": 0,
            "hasliked": 0,
            "id": "l3cSRN",
            "likes": 14,
            "name": "Heart tornado",
            "published": 3,
            "tags": [
                "heart",
                "neon",
                "tornado"
            ],
            "usePreview": 0,
            "username": "Docteur_Raton",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926535897932384626433832795\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 heartPalette(float t)\n{\n    // http://dev.thi.ng/gradients/\n    vec3 a = vec3(0.938, 0.328, 0.718);\n    vec3 b = vec3(0.659, 0.438, 0.628);\n    vec3 c = vec3(0.445, 0.445, 0.17);\n    vec3 d = vec3(2.538, 2.478, 0.228);\n    \n    return palette(t, a, b, c, d);\n}\n\nmat2 findRotationMatrix(float angle)\n{\n    return mat2(cos(angle), -sin(angle),\n        sin(angle), cos(angle));\n}\n\nvec2 findRotationVector(float angle)\n{\n    return vec2(cos(angle), sin(angle));\n}\n\nvec3 drawHeart(vec3 prev, vec2 uv)\n{\n    vec3 col = vec3(0.);\n    uv *= 5.;\n    uv.y += -4.;\n    for (float i = 0.; i < 1.; i += 1. / 20.)\n    {\n        for (float j = 0.; j < 1.; j += 1. / 25.)\n        {\n            vec2 uv_cur = uv;\n            float phase = 1.5 * iTime + 5. * j;\n            uv_cur *= findRotationMatrix((1. - j) * .5 * sin(phase + 1.5));\n            uv_cur.x += 1.75 * sin(phase);\n            vec2 rot = findRotationVector(2. * M_PI * i + 2. * iTime * (2. * j + 1.));\n            vec2 rot0 = rot;\n            uv_cur.y += 8. * j + 1. * i;\n            rot.y *= .5;\n            rot *= (5. - 4.5 * j);\n            vec2 heartCoords = uv_cur + rot;\n            heartCoords.x *= 1. + pow(tan(M_PI / 3. * rot0.x), 2.);\n            col += heartPalette(j * 1. + .1) * 0.0015/abs(sdHeart(heartCoords));\n        }\n    }\n    col.r = smoothstep(0., 1., col.r);\n    col.g = smoothstep(0., 1., col.g);\n    col.b = smoothstep(0., 1., col.b);\n    \n    return prev + col;\n}\n\nfloat drawAxes(vec3 prev, vec2 uv)\n{\n    float width = 0.005;\n    float col = float(uv.x < width && uv.x > -width || uv.y < width && uv.y > -width);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.);\n    col += drawHeart(col, uv);\n    \n    float contrast = 1.5;\n    col.r = pow(col.r, contrast);\n    col.g = pow(col.g, contrast);\n    col.b = pow(col.b, contrast);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}