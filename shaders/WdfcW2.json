{
    "Shader": {
        "info": {
            "date": "1586012672",
            "description": "Follow up to [url]https://www.shadertoy.com/view/wdfyDj[/url]. As promised, here's a 4D version, ie. a hyperoctahedron or 16-cell. Mouse moves things around.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdfcW2",
            "likes": 10,
            "name": "Hyperoctahedron Tutorial",
            "published": 3,
            "tags": [
                "tutorial",
                "sierpinski",
                "hyperoctahedron"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Sierpinski Hyperoctahedron Tutorial\n//\n// Matthew Arcus, 2020.\n//\n// A follow on to https://www.shadertoy.com/view/wdfyDj, in which we\n// do essentially the same thing, the Sierpinski construction on an\n// octahedron, but going up to 4-dimensional space (R4) and using\n// stereographic projection to get back to 3 dimensions (R3). Now we\n// are dealing with a hyperoctahedron or 16-cell, but the calculations\n// remain essential the same.\n//\n// As before, heavily annotated in tutorial style. The main changes\n// are in the DE function itself and the raymarcher, which now has a\n// more demanding job to do.\n//\n// No controls, apart from mouse rotation: config changes need recompilation.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// As before. Start off with some global variables.\n\nbool dorotate = false;  // Autorotate scene\nbool ctranslate = true; // Do Clifford translation\n\n// To see what is going on better, set the 'nofold' option to just see a single\n// tetrahedral hyperface. Reduce eyedist eg. to 2.0 to see this better.\nbool nofold = false;\nfloat eyedist = 10.0;     // Distance of eye from origin\nvec3 light = vec3(0,2,1); // Light direction\nint numsteps = 200;       // Maximum raymarching steps\nfloat precis = 1e-3;      // Raymarching precision\nfloat lfactor = 0.8;      // \"Lipschitz\" factor\nfloat eradius = 0.015;    // Radius of edge\nfloat pradius = 0.05;     // Radius of point\n\nint level = 2;            // Sierpinski division level, 0, 1 or 2\n\nfloat PI = 3.1415927;\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n//#define assert(x)\n\n// The outer wrapper is the same as the octahedron shader, so let's\n// start with the DE function.\n\n// Auxiliary functions\n// Spherical distance between points on hypersphere\nfloat sdistance(vec4 p, vec4 q);\n// Spherical distance from p to great circle through q and r\nfloat ssegment(vec4 p, vec4 q, vec4 r); \n\nvec4 stereographic(vec3 p3, inout float scale); // Stereographic projection\nvec4 qmul(vec4 p, vec4 q); // Quaternion multiplication\n\n// To draw a 4-dimensional figure, we use stereographic projection to\n// map the figure into R3 (or rather, use the inverse to find what\n// point in R4 is mapped to the R3 point under consideration).\n//\n// Inverse stereographic projection uses a projection point of\n// (0,0,0,1), (the 'north hyperpole') to project points on the w=0\n// hyperplane (ie. the normal embedding of R3 in R4) onto the unit\n// hypersphere. We can also represent this as an inversion in a\n// sphere, centre (0,0,0,1), radius sqrt(2) and that is how we\n// calculate it here.\n\n// The stereographic projection, and inversions generally, are\n// conformal, in that at each point the scale factor is the same in\n// all directions - this is important for ray marching as it means\n// that after applying a conformal map, we just need to multiply the\n// DE by the appropriate scale factor to get a coherent DE for the\n// mapped surface, with the caveat that the scale factor will vary\n// over the course of the ray, but provided it doesn't vary too much,\n// we can deal with this by reducing the step size by a small fiddle\n// factor, or by ensuring that large steps get clamped to something\n// less likely to lead to overshooting the surface. ('Lipschitz\n// continuity' is very relevant here).\n\nfloat de(vec3 p3, out int type) {\n  float scale = 1.0;\n  vec4 p = stereographic(p3,scale);\n\n  if (ctranslate) {\n    // Apply a rotation in R4 with a quaternion.\n    // Quaternions represent rotations (and reflections) in R4 just as\n    // well as in R3, with p -> qpr, for quaternions q and r\n    // representing a general rotation. Here we multiply by a single\n    // quaternion, giving a \"Clifford translation\" which after\n    // stereographic projection appears as a screw motion - a rotation\n    // combined with a translation along the rotation axis (here the\n    // vertical y-axis).\n    // https://en.wikipedia.org/wiki/William_Kingdon_Clifford\n    float t = 0.1*iTime;\n    // The 'normalize' here shouldn't be necessary, but sin and cos\n    // can be relatively inaccurate.\n    vec4 Q = normalize(vec4(sin(t)*vec3(0,1,0),cos(t)));\n    p = qmul(p,Q);\n  }\n\n  // Exactly as with the octahedron, set p = abs(p), reflecting\n  // everything into the positive sector and into a single\n  // (tetrahedral) hyperface. Then sort the coordinates to\n  // take everything into a small sector around vertex A(1,0,0,0).\n  if (!nofold) p = abs(p);\n  // Sort the coordinates\n  if (p.x < p.y) p.xy = p.yx;\n  if (p.z < p.w) p.zw = p.wz;\n  if (p.x < p.z) p.xz = p.zx;\n  if (p.y < p.w) p.yw = p.wy;\n  if (p.y < p.z) p.yz = p.zy;\n  // Check all is well. On my laptop there is a weird bug where if\n  // these assertions are removed, the sort doesn't get done\n  // properly.\n  assert(p.x >= p.y);\n  assert(p.y >= p.z);\n  assert(p.z >= p.w);\n\n  // The tetrahedron is on the hyperplane x+y+z+w = 1, but we need to\n  // project everything onto the hypersphere, with |p| = 1, so though\n  // we do our calculations on the hyperplane, we normalize\n  // before drawing anything (we could do this in the drawing\n  // functions, but it's more efficient to do it once and for all\n  // here).\n\n  // The main tetrahedron, (A,B,C,D). Just a normal R3 equilateral\n  // tetrahedron with side length sqrt(2), it just happens to be in\n  // R4 rather than R3 (like the equilateral triangle side of the\n  // octahedron in the earlier shader).\n  vec4 A = vec4(1,0,0,0);\n  vec4 B = vec4(0,1,0,0);\n  vec4 C = vec4(0,0,1,0);\n  vec4 D = vec4(0,0,0,1);\n  // The 'corner' tetrahedron, (A1,B1,C1,D1), that we want to\n  // subdivide in turn.\n  vec4 A1 = A;\n  vec4 B1 = 0.5*(A+B);\n  vec4 C1 = 0.5*(A+C);\n  vec4 D1 = 0.5*(A+D);\n\n  //  It has 6 edges, with 6 midpoints, but we only need these 4.\n  vec4 AB1 = 0.5*(A1+B1);\n  vec4 AC1 = 0.5*(A1+C1);\n  vec4 BC1 = 0.5*(B1+C1);\n  vec4 BD1 = 0.5*(B1+D1);\n\n  // Normalize to hypersphere for drawing. I expect the compiler\n  // can constant fold these.\n  A1 = normalize(A1);\n  B1 = normalize(B1);\n  C1 = normalize(C1);\n  D1 = normalize(D1);\n\n  AB1 = normalize(AB1);\n  AC1 = normalize(AC1);\n  BC1 = normalize(BC1);\n  BD1 = normalize(BD1);\n\n  // Now draw the points and lines, to the desired level.\n  float d = 1e8, d0 = d;\n  for (;;) { \n    d = min(d,ssegment(p,A,B)-eradius);\n    if (level == 0) break;\n    d = min(d,ssegment(p,B1,C1)-eradius);\n    if (level == 1) break;\n    d = min(d,ssegment(p,AB1,BC1)-eradius);\n    d = min(d,ssegment(p,AC1,AB1)-eradius);\n    d = min(d,ssegment(p,BC1,BD1)-eradius);\n    break;\n  }\n  if (d < d0) type = 0; d0 = d;\n\n  for (;;) { \n    d = min(d,sdistance(p,A)-pradius);\n    if (level == 0) break;\n    d = min(d,sdistance(p,B1)-pradius);\n    if (level == 1) break;\n    d = min(d,sdistance(p,AB1)-pradius);\n    d = min(d,sdistance(p,BC1)-pradius);\n    break;\n  }\n  if (d < d0) type = 1; d0 = d;\n\n  // Finally return the distance, but taking into account the\n  // scaling factor from the stereographic projection.\n  return d/scale;\n}\n\n// The revised raymarcher - this now has a much harder job to do - the\n// surface can now extend out as far as the eye can see and even pass\n// through the eye point itself, and the surface itself is more\n// complex so we must tread carefully. As mentioned above, its a good\n// idea to use a 'Lipschitz' factor to reduce the step size and also\n// keep the step below some limit. To avoid many inefficient small\n// steps when stepping out to a distant point, the limit should be\n// dependent on the distance travelled so far, and the desired\n// precision should also be distance dependent for similar reasons.\n\n// Another problem to deal with here is negative steps, which as our\n// DE function is signed, will happen and are usually a good thing -\n// but if we find ourselves stepping backwards past the eye point,\n// then we should give up - this can easily happen if the surface can\n// passes through the eye point, for example.\n\n// Of course, all these cautious changes means that we might\n// need to do more steps, so increase numsteps accordingly - we can\n// still use our assertion to see how many steps are actually being\n// taken and find that 50 or fewer usually suffice.\n\nfloat de(vec3 p) { int t; return de(p,t); }\n\nfloat march(vec3 q, vec3 r) {\n  float t = 0.01; // Total distance so far.\n  float maxdist = eyedist + 10.0;\n  for (int i = 0; i < numsteps; i++) {\n    //assert(i < 50);\n    vec3 p = q+t*r;\n    float d = de(p);\n    if (abs(d) < t*precis) return t;\n    d = min(d,max(0.5,0.5*t));\n    t += lfactor*d;\n    // We can go backwards!\n    if (t < 0.0 || t > maxdist) break;\n  }\n  return -1.0;\n}\n\n// Measuring distances on the hypersphere: this is done just like on a R3\n// sphere, measuring along a great circle route, so the dot product of\n// the two vectors gives the cosine of the angle between them, and the\n// spherical distance is just that angle.\nfloat sdistance(vec4 p, vec4 q) {\n  // acos gives the correct answer, but the Euclidean distance\n  // is a good approximation, particularly up close. The result is\n  // visually indistinguishable and acos is expensive (the Euclidean\n  // distance is an underestimate of the spherical distance, which is\n  // just what we want for raymarching).\n  //return acos(clamp(dot(p,q),-1.0,1.0));\n  return distance(p,q);\n}\n\n// Find the (spherical) distance from p to the line (great circle)\n// through q and r. Again, this is almost the same calculation as in\n// R3 - find the nearest point on the line to p by projecting p onto\n// the qr-plane and normalizing, then after checking the point is in\n// bounds, return the spherical distance to that point.\nfloat ssegment(vec4 p, vec4 q, vec4 r) {\n  // Map p to the plane defined by q and r (and the origin):\n  // p = aq + br + x, where q.x = r.x = 0 so:\n  // p.q = aq.q + br.q and:\n  // p.r = aq.r + br.r\n  // Solve by inverting a 2x2 matrix.\n  mat2 m = inverse(mat2(dot(q,q),dot(q,r),dot(q,r),dot(r,r)));\n  vec2 ab = m*vec2(dot(p,q),dot(p,r));\n  ab = max(ab,0.0); // Clamp to segment\n  // p1 in plane of q,r, on hypersphere\n  vec4 p1 = normalize(ab[0]*q + ab[1]*r);\n  // And return the distance to the closest point.\n  return sdistance(p,p1);\n}\n\n// Get the normal of the surface at point p.\nvec3 getnormal(vec3 p, float t) {\n  float eps = 1e-2;\n  vec2 e = vec2(eps,0);\n  return normalize(vec3(de(p + e.xyy) - de(p - e.xyy),\n                        de(p + e.yxy) - de(p - e.yxy),\n                        de(p + e.yyx) - de(p - e.yyx)));\n}\n\nvec4 invert(vec4 p, vec4 q, float r2, inout float scale) {\n  // Invert p in circle, centre q, radius square r2.\n  // Return inverted point and multiply scale by scaling factor.\n  p -= q;\n  float k = r2/dot(p,p);\n  p *= k;\n  scale *= k;\n  p += q;\n  return p;\n}\n\nvec4 stereographic(vec3 p, inout float scale) {\n  return invert(vec4(p,0),vec4(0,0,0,1),2.0,scale);\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\n// Quaternion multiplication\n// (p+P)(q+Q) = pq + pQ + qP + PQ\nvec4 qmul(vec4 p, vec4 q) {\n  vec3 P = p.xyz, Q = q.xyz;\n  return vec4(p.w*Q+q.w*P+cross(P,Q),p.w*q.w-dot(P,Q));\n}\n\nvec3 getbackground(vec3 r) {\n  //return r; // Colourful fun\n  return vec3(0); // The more sober option.\n}\n\nvec3 getbasecolor(int type) {\n  assert(type >= 0);\n  if (type == 0) return vec3(1,1,0.45);\n  if (type == 1) return vec3(0.2);\n  return vec3(1,0,1);\n}\n\n// Rotate according to mouse position\nvec3 transformframe(vec3 p) {\n  if (iMouse.x > 0.0) {\n    // Full range of rotation across the screen.\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  // autorotation - we always rotate a little as otherwise nothing can\n  // be seen (since the z-axis is part of the model).\n  float t = 1.0;\n  if (dorotate) t += iTime;\n  p.yz = rotate(p.yz,-t*0.125);\n  p.zx = rotate(p.zx,-t*0.1);\n  return p;\n}\n\n// Follow ray from q, direction r.\nvec3 raycolor(vec3 q, vec3 r) {\n  float t = march(q,r);\n  if (t < 0.0) return getbackground(r);\n  vec3 p = q+t*r;\n  vec3 normal = getnormal(p,t);\n  int type;\n  de(p,type); // Just to get the object type\n  vec3 color = getbasecolor(type);\n  float ambient = 0.3;\n  vec3 lightdir = normalize(light);\n  float diffuse = 0.7*clamp(dot(normal,lightdir),0.0,1.0);\n  color *= ambient+ diffuse;\n  return color;\n}\n\n// Get the colour for a screen point (with normalized coordinates)\nvec3 screencolor(vec2 z) {\n  vec3 eye = vec3(0,0,eyedist);\n  vec3 ray = vec3(z,-2);\n  eye = transformframe(eye);\n  ray = transformframe(ray);\n  light = transformframe(light);\n  ray = normalize(ray);\n  vec3 col = raycolor(eye,ray);\n  col = pow(col,vec3(0.4545)); // Gamma correction - see elsewhere\n  return col;\n}\n\n// The main function called by Shadertoy\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = screencolor(z);\n  if (alert) col.r = 1.0; // Check nothing has gone wrong.\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}