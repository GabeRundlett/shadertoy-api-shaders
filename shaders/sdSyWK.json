{
    "Shader": {
        "info": {
            "date": "1644078857",
            "description": "psenoise test",
            "flags": 0,
            "hasliked": 0,
            "id": "sdSyWK",
            "likes": 2,
            "name": "odos|psrdnoise warping",
            "published": 3,
            "tags": [
                "simplexnoise"
            ],
            "usePreview": 0,
            "username": "ErinZ",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n  vec2 uv = vec2(x.x+x.y*0.5, x.y);\n  vec2 i0 = floor(uv), f0 = fract(uv);\n  float cmp = step(f0.y, f0.x);\n  vec2 o1 = vec2(cmp, 1.0-cmp);\n  vec2 i1 = i0 + o1, i2 = i0 + 1.0;\n  vec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n  vec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n  vec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n  vec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n  vec3 iu, iv, xw, yw;\n  if(any(greaterThan(period, vec2(0.0)))) {\n    xw = vec3(v0.x, v1.x, v2.x);\n    yw = vec3(v0.y, v1.y, v2.y);\n    if(period.x > 0.0)\n    xw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n    if(period.y > 0.0)\n      yw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n    iu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n  } else {\n    iu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n  }\n  vec3 hash = mod(iu, 289.0);\n  hash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n  hash = mod((hash*34.0 + 10.0)*hash, 289.0);\n  vec3 psi = hash*0.07482 + alpha;\n  vec3 gx = cos(psi); vec3 gy = sin(psi);\n  vec2 g0 = vec2(gx.x, gy.x);\n  vec2 g1 = vec2(gx.y, gy.y);\n  vec2 g2 = vec2(gx.z, gy.z);\n  vec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n  w = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n  vec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n  float n = dot(w4, gdotx);\n  vec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n  vec2 dn0 = w4.x*g0 + dw.x*x0;\n  vec2 dn1 = w4.y*g1 + dw.y*x1;\n  vec2 dn2 = w4.z*g2 + dw.z*x2;\n  gradient = 10.9*(dn0 + dn1 + dn2);\n  return 10.9*n;\n}\n\nfloat fbm(vec2 x,float n,out vec2 g){\n\nvec2 p = vec2(0.);\nfloat alpha = iTime*.05;\nfloat scale = .5;\n\nfloat noise = 0.;\nfor (float i = 0.;i<n;i++){\nnoise += psrdnoise(x , p, alpha, g)*scale;\nx *=2.;scale/=2.;alpha *=1.3;\n}\nreturn noise;\n}\n\nfloat pattern( in vec2 p , out vec2 g)\n{\n    vec2 q = vec2( fbm( p + vec2(0.0,0.0) ,4.,g),\n                   fbm( p + vec2(5.2,1.3),4.,g) );\n\n    vec2 r = vec2( fbm( p + 4.0*q + vec2(1.7,9.2) ,4.,g),\n                   fbm( p + 4.0*q + vec2(8.3,2.8) ,4.,g) );\n\n    return fbm( p + 4.0*r ,4.,g);\n}\n\nfloat logo(vec2 uv);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 uv1 = uv*1.5;\n    const vec2 p = vec2(8.0, 8.0);\n    float alpha = iTime*.1;\n    vec2 g;\n    float n = psrdnoise(uv1, p, alpha, g);\n    \n    \n    vec3 col;\n    col = vec3(n*0.5+0.5);\n    //warping\n    vec2 uv2 = uv*.1;\n    vec3 pa;\n    pa.x = pattern(uv2,pa.yz);\n    col = mix(vec3(0,0,0),vec3(.2,.3,.4),pa.x+n*0.3);\n    col = mix(col,vec3(.7,.3,.3),pa.x-n*0.1);\n    col = mix(col,vec3(.8,.6,.9),smoothstep(-1.,1.,pa.y)*.4);\n    \n    col= clamp(col,0.,1.);\n    col +=logo(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n#define S(v,r) smoothstep( r, r+ 3./iResolution.y, v ) \nfloat logo(vec2 uv){\nfloat n = 0.;\nn += S(.05,abs(length(uv-vec2(-1.23,0))-.12));\nn *= 1.-S(-1.25,uv.x);\nn += S(.17,abs(uv.y))*S(.05,abs(uv.x+1.29));\nn += S(.05,abs(length(uv-vec2(-1.5,0))-.12));\nn += S(.05,abs(length(uv-vec2(-0.9,0))-.12));\nn += (1.+S(-.6,uv.x)-S(.05,uv.y))*S(.05,abs(length(uv-vec2(-0.6,.03))-.09));\nn += (1.-S(-.6,uv.x)+S(-.05,uv.y))*S(.05,abs(length(uv-vec2(-0.6,-.04))-.09));\nreturn n;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}