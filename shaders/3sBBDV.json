{
    "Shader": {
        "info": {
            "date": "1590801618",
            "description": "something simple I managed to do for a game",
            "flags": 0,
            "hasliked": 0,
            "id": "3sBBDV",
            "likes": 11,
            "name": "twinkle starfield",
            "published": 3,
            "tags": [
                "2d",
                "random",
                "space",
                "stars",
                "starfield",
                "twinkle"
            ],
            "usePreview": 0,
            "username": "TheNosiriN",
            "viewed": 980
        },
        "renderpass": [
            {
                "code": "#define RES 0.2\n\n\n// perlin noise from: https://www.shadertoy.com/view/4sc3z2\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\n\nfloat hash21(vec2 p)\n{\n \tp = fract( p*vec2(123.34, 456.21) );\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nfloat star(vec2 p, float time)\n{\n\tfloat d = length(p);\n    float m = (max(0.2, abs(sin(time))) * 0.02) / d;\n    \n    m *= smoothstep(1.0, 0.2, d);\n    \n    return m;\n}\n\n\nvec3 starField(vec2 uv)\n{\n    vec3 col = vec3(0);\n    \n    vec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    \n    for (int x=-1; x<=1; x++){\n        for (int y=-1; y<=1; y++)\n        {\n            vec2 offset = vec2(x, y);\n            \n            float n = hash21(id + offset);\n            float star = star(gv - offset - (vec2(n, fract(n*100.0)) - 0.5), iTime*fract(n*135.246));\n            float size = min(1.0, fract(n*1234.567) + 0.1);\n            \n            col += star * size;\n        }\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.y)/RES;\n    vec3 coords = vec3(vec2(uv.x, uv.y + iTime*0.03), iTime*0.3);\n    \n    \n    vec3 stars = starField( vec2(coords.x, coords.y)*5.0 );\n    \n    \n    float warpAmplitude = 10.0;\n   \tfloat warpFrequency = 0.04;\n    \n    vec3 clouds = vec3( perlin_noise(coords) ) * 0.3;\n    \n    vec3 cloudsCol = 0.5 + 0.5*cos((coords*2.0)+vec3(0,3,9)); //color\n    clouds *= cloudsCol;\n    stars *= cloudsCol*2.0;\n    stars *= clouds+0.5;\n    vec3 col = clouds + stars;\n   \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}