{
    "Shader": {
        "info": {
            "date": "1715873089",
            "description": "time or mouse x changes voronoi distance calc  (also rotates) (far right is 'fractured' voronoi)\nmouse y changes scale\n(messing with \"Varying metric voronoi POC 2\" by ruojake. [url]https://shadertoy.com/view/lcGSD3[/url])",
            "flags": 0,
            "hasliked": 0,
            "id": "XcVSDc",
            "likes": 5,
            "name": "TieDie voronoi variations",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "noise",
                "chebyshev"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "// Fork of \"Varying metric voronoi POC 2\" by ruojake. https://shadertoy.com/view/lcGSD3\n// 2024-05-16 14:31:55\n\n\nvec2 mouse;\nint func;\n\n/*\n#define FK(k) floatBitsToUint(k)^floatBitsToUint(cos(k))\n\nfloat hash(vec2 p)\n{\n    uint x = FK(p.x);\n    uint y = FK(p.y);\n    \n    return float((x*x-y)*(y*y+x)-x)/4.28e9;\n}\n*/\n\n//Hash and Noise Functions\n\n\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n// https://www.shadertoy.com/view/4djSRW\n// Trying to find a Hash function that is the same on ALL systens\n// and doesn't rely on trigonometry functions that change accuracy \n// depending on GPU. \n// New one on the left, sine function on the right.\n// It appears to be the same speed, but I suppose that depends.\n\n// * Note. It still goes wrong eventually!\n// * Try full-screen paused to see details.\n\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n//#define HASHSCALE1 443.8975\n//#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n//#define HASHSCALE4 vec3(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n        vec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash(vec2 p)\n{\n        vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = smoothstep(0., 1., p-i);\n    const vec2 o = vec2(1,0);\n    \n    return mix(\n        mix(hash(i), hash(i + o), f.x),\n        mix(hash(i + o.yx), hash(i + 1.), f.x),\n    f.y);\n}\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat2(c,-s,s,c);\n}\n\nfloat cheb(vec2 v, float k)\n{\n    return pow(pow(abs(v.x), k) + pow(abs(v.y), k), 1./k);\n}\n\nfloat dist;\n\nfloat vor(vec2 p)\n{\n    dist = 10000.;\n    float id;\n    vec2 i = floor(p);\n    \n    for (float x = -3.1415/*-3.*/; x < 3.1415/*4.*/; ++x)\n    for (float y = -3.1415/*-3.*/; y < 3.132/*4.*/; ++y)\n    {\n        vec2 c = vec2(x, y) + i;\n        float h = hash(c);\n        vec2 o = vec2(h, fract((h * .5 + .9653) * 12.321) * 2. - 1.);\n        \n        o += sin(o + h * 5. + iTime * h * .8);\n        \n        float d = cheb(p - o - c, 1.2 + h * h * 3.);\n        d += noise(normalize(p - o - c) * (9.5 + 2.5 * h)) * h * min(d * d, 1.) * .5;\n        if( (func==0 && tan(dist) > sin(d)) || //grid of art\n            (func==1 && tan(dist) > atan(d)) ||  //wondering dots\n            (func==2 && cos(dist) > cos(d)) ||  // modern impressionist art\n            (func==3 && sin(dist) > sin(d)) ||  // modern impressionist art\n            (func==4 && mouse.x<1. && dist > d) ) // regular voronoi\n        {\n            dist = d;\n            id = sin(h);\n            if(mouse.x> 0.9 && sin(d)>cos(id)) break;\n        }\n    }\n    \n    return id;\n}\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\n// simple mouse rotate and zoom for shader\n#define pi 3.14159265359 \n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0,0.1) : iMouse.xy/iResolution.xy;\n    uv.xy *= r2d(-(mouse.x)*pi*2.);\n    uv *= (1./(10.0*mouse.y));\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n   uv = mouseRotZoom(uv);\n    \n   mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0) : iMouse.xy/iResolution.xy;\n   \n   if(iMouse.xy == vec2(0.)) {\n      mouse.x = 1.0 - fract(iTime/20.0);\n   }\n   \n   func = 4;\n   float colorscale=0.04;\n   if(mouse.x>=0.0 && mouse.x<0.20) {\n      func = 0; //grid of art\n      colorscale=0.0823;\n   }\n   if(mouse.x>=0.20 && mouse.x<0.40) {\n      func = 1;  //wondering dots\n      colorscale=0.23;\n   }\n   if(mouse.x>=0.40 && mouse.x<0.60){\n      func = 2;  // impressionist art\n      colorscale=0.23;\n   }\n   if(mouse.x>=0.60 && mouse.x<0.80){\n      func = 3; // impressionist art2\n      colorscale=0.108023;\n   }\n   if(mouse.x>=0.80 && mouse.x<=1.) {\n      func=4; // regular voronoi\n   }\n    \n    float v = vor(uv * 8. );\n    dist = pow(2.1,dist*v);\n    vec3 col = hsb2rgb(vec3(3.1415/v*(3.1415*colorscale*cos(dist)),0.9,0.9));\n    float v2 = v*sin(v);\n    vec3 col2 = hsb2rgb(vec3(3.1415/v2,0.9,0.9));\n\n    fragColor = vec4((col+col2)/2.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}