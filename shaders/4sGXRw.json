{
    "Shader": {
        "info": {
            "date": "1463526592",
            "description": "This runs an approximate iterative Poisson solver on a vector field generated by a reaction-diffusion system, then uses the result as a heightmap. Hit spacebar to reset (useful in fullscreen).",
            "flags": 48,
            "hasliked": 0,
            "id": "4sGXRw",
            "likes": 45,
            "name": "Poisson Cubemap",
            "published": 3,
            "tags": [
                "cubemap",
                "poisson",
                "solver"
            ],
            "usePreview": 0,
            "username": "cornusammonis",
            "viewed": 2290
        },
        "renderpass": [
            {
                "code": "/*\n\tPoisson Cubemap\n\t\n\tThis shader generates a vector field using a reaction-diffusion system in\n\tBuffer A, then runs a Poisson solver on the vector field to generate a \n    heightmap in Buffer B. The heightmap is raymarched as a displacement on\n\tthe surface of a sphere.\n\n\tRendering is partly based on iq's Sculpture III:\n\thttps://www.shadertoy.com/view/XtjSDK\n\t\n*/\n\n// iq's cubemap function\nvec3 texCube( sampler2D sam, in vec3 d, in float s)\n{\n    vec3 colx = texture( sam, fract(0.5 + s*d.yz/d.x)).xyz;\n    vec3 coly = texture( sam, fract(0.5 + s*d.zx/d.y)).xyz;\n    vec3 colz = texture( sam, fract(0.5 + s*d.xy/d.z)).xyz;\n    \n    vec3 n = d*d;\n    \n    return (colx*n.x + coly*n.y + colz*n.z)/(n.x+n.y+n.z);\n}\n\nvec2 map( vec3 q )\n{\n    float td = 0.03 * texCube( iChannel0, q, 0.25).x;\n\treturn vec2(length(q - vec3(0.0, 0.22, 0.0)) - 2.25  + td, td);\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 6.0;\n\n\tfloat precis = 0.05;\n    vec2 h = vec2(1.0);\n    float t = 1.0;\n    float td = 0.0;\n    for( int i=0; i<50; i++ )\n    {\n        if( (h.x<precis) || (t>maxd) ) break;\n\t    h = map( ro+rd*t );\n        t += 0.5 * h.x;\n        td = h.y;\n    }\n\n    if( t>maxd ) t=-1.0;\n\treturn vec2(t, td);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.005,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n\tvec2 q = fragCoord/iResolution.xy;\n\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    \n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = 1.1 + 0.05*(iTime-10.0) - 7.0*m.x;\n\n\tvec3 ro = vec3(4.5*sin(an),1.0,4.5*cos(an));\n    vec3 ta = vec3(0.0,0.2,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n    \n\tvec3 col = vec3(0.1)*clamp(1.0-length(q-0.5),0.0,1.0);\n\n\t// raymarch\n    vec2 h = intersect(ro,rd);\n    float occ = 0.5 - h.y;\n    float t = h.x;\n\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n\t\tcol = vec3(0.05);\n        \n        col *= mix(0.0, 1.0, occ);\n        col *= mix(0.0, 3.0, occ*occ*occ );\n        \n        // lighting\n        float fre = 4.0 * clamp( 1.0 + dot(rd,nor), 0.0, 1.0 );\n        float spe = 0.4 * pow(max( dot(-rd,nor),0.0),8.0);\n        col = col * fre + spe;\n    }\n\n\tcol = pow(col,vec3(0.4));\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n    Generates a vector field using a dynamical system. \n\tTo see it in action on its own see this shadertoy:\n    https://www.shadertoy.com/view/XddSRX\n*/\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvec2 normz(vec2 x) {\n\treturn x == vec2(0.0, 0.0) ? vec2(0.0, 0.0) : normalize(x);\n}\n\n// reverse advection\nvec3 advect(vec2 ab, vec2 vUv, vec2 step, float sc) {\n    \n    vec2 aUv = vUv - ab * sc * step;\n    \n    const float _G0 = 0.25; // center weight\n    const float _G1 = 0.125; // edge-neighbors\n    const float _G2 = 0.0625; // vertex-neighbors\n    \n    // 3x3 neighborhood coordinates\n    float step_x = step.x;\n    float step_y = step.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec3 uv =    texture(iChannel0, fract(aUv)).xyz;\n    vec3 uv_n =  texture(iChannel0, fract(aUv+n)).xyz;\n    vec3 uv_e =  texture(iChannel0, fract(aUv+e)).xyz;\n    vec3 uv_s =  texture(iChannel0, fract(aUv+s)).xyz;\n    vec3 uv_w =  texture(iChannel0, fract(aUv+w)).xyz;\n    vec3 uv_nw = texture(iChannel0, fract(aUv+nw)).xyz;\n    vec3 uv_sw = texture(iChannel0, fract(aUv+sw)).xyz;\n    vec3 uv_ne = texture(iChannel0, fract(aUv+ne)).xyz;\n    vec3 uv_se = texture(iChannel0, fract(aUv+se)).xyz;\n    \n    return _G0*uv + _G1*(uv_n + uv_e + uv_w + uv_s) + _G2*(uv_nw + uv_sw + uv_ne + uv_se);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float _K0 = -20.0/6.0; // center weight\n    const float _K1 = 4.0/6.0;   // edge-neighbors\n    const float _K2 = 1.0/6.0;   // vertex-neighbors\n    const float cs = -0.6;  // curl scale\n    const float ls = 0.05;  // laplacian scale\n    const float ps = -0.8;  // laplacian of divergence scale\n    const float ds = -0.05; // divergence scale\n    const float dp = -0.04; // divergence update scale\n    const float pl = 0.3;   // divergence smoothing\n    const float ad = 6.0;   // advection distance scale\n    const float pwr = 1.0;  // power when deriving rotation angle from curl\n    const float amp = 1.0;  // self-amplification\n    const float upd = 0.8;  // update smoothing\n    const float sq2 = 0.6;  // diagonal weight\n\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec3 uv =    texture(iChannel0, fract(vUv)).xyz;\n    vec3 uv_n =  texture(iChannel0, fract(vUv+n)).xyz;\n    vec3 uv_e =  texture(iChannel0, fract(vUv+e)).xyz;\n    vec3 uv_s =  texture(iChannel0, fract(vUv+s)).xyz;\n    vec3 uv_w =  texture(iChannel0, fract(vUv+w)).xyz;\n    vec3 uv_nw = texture(iChannel0, fract(vUv+nw)).xyz;\n    vec3 uv_sw = texture(iChannel0, fract(vUv+sw)).xyz;\n    vec3 uv_ne = texture(iChannel0, fract(vUv+ne)).xyz;\n    vec3 uv_se = texture(iChannel0, fract(vUv+se)).xyz;\n    \n    // uv.x and uv.y are the x and y components, uv.z is divergence \n\n    // laplacian of all components\n    vec3 lapl  = _K0*uv + _K1*(uv_n + uv_e + uv_w + uv_s) + _K2*(uv_nw + uv_sw + uv_ne + uv_se);\n    float sp = ps * lapl.z;\n    \n    // calculate curl\n    // vectors point clockwise about the center point\n    float curl = uv_n.x - uv_s.x - uv_e.y + uv_w.y + sq2 * (uv_nw.x + uv_nw.y + uv_ne.x - uv_ne.y + uv_sw.y - uv_sw.x - uv_se.y - uv_se.x);\n    \n    // compute angle of rotation from curl\n    float sc = cs * sign(curl) * pow(abs(curl), pwr);\n    \n    // calculate divergence\n    // vectors point inwards towards the center point\n    float div  = uv_s.y - uv_n.y - uv_e.x + uv_w.x + sq2 * (uv_nw.x - uv_nw.y - uv_ne.x - uv_ne.y + uv_sw.x + uv_sw.y + uv_se.y - uv_se.x);\n    float sd = uv.z + dp * div + pl * lapl.z;\n\n    vec2 norm = normz(uv.xy);\n    \n    vec3 ab = advect(vec2(uv.x, uv.y), vUv, texel, ad);\n    \n    // temp values for the update rule\n    float ta = amp * ab.x + ls * lapl.x + norm.x * sp + uv.x * ds * sd;\n    float tb = amp * ab.y + ls * lapl.y + norm.y * sp + uv.y * ds * sd;\n\n    // rotate\n    float a = ta * cos(sc) - tb * sin(sc);\n    float b = ta * sin(sc) + tb * cos(sc);\n    \n    vec3 abd = upd * uv + (1.0 - upd) * vec3(a,b,sd);\n    \n    if (iMouse.z > 0.0) {\n    \tvec2 d = fragCoord.xy - iMouse.xy;\n        float m = exp(-length(d) / 20.0);\n        abd.xy += m * normz(d);\n    }\n    \n    vec3 init = texture(iChannel1, fragCoord.xy / iResolution.xy).xyz;\n    // initialize with noise\n    if((uv == vec3(0.0) && init != vec3(0.0)) || reset()) {\n        fragColor = vec4(init - 0.5, 0.0);\n    } else {\n        abd.z = clamp(abd.z, -1.0, 1.0);\n        abd.xy = clamp(length(abd.xy) > 1.0 ? normz(abd.xy) : abd.xy, -1.0, 1.0);\n        fragColor = vec4(abd, 0.0);\n    }\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\tThis is the Poisson solver. The basic idea is that we reconstruct\n\tthe function that yields the vector field in Buffer A if we take the\n\tfunction's gradient. However, when using a toroidal topology as we are\n    here (i.e. we use X and Y wrapping) it's generally not possible to solve\n\tthe Poisson equation. In spite of that, we can get a result that's good\n    enough for the purpose of generating a heightmap from our vector field.\n*/\n\n#define TIMESTEP 0.2\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    vec2 n  = vec2(0.0, 1.0);\n    vec2 e  = vec2(1.0, 0.0);\n    vec2 s  = vec2(0.0, -1.0);\n    vec2 w  = vec2(-1.0, 0.0);\n\n    vec4 u =    texture(iChannel0, fract(vUv));\n    vec4 u_n =  texture(iChannel0, fract(vUv+texel*n));\n    vec4 u_e =  texture(iChannel0, fract(vUv+texel*e));\n    vec4 u_s =  texture(iChannel0, fract(vUv+texel*s));\n    vec4 u_w =  texture(iChannel0, fract(vUv+texel*w));\n    \n    float p =    texture(iChannel1, fract(vUv)).x;\n    float p_n =  texture(iChannel1, fract(vUv+texel*n)).x;\n    float p_e =  texture(iChannel1, fract(vUv+texel*e)).x;\n    float p_s =  texture(iChannel1, fract(vUv+texel*s)).x;\n    float p_w =  texture(iChannel1, fract(vUv+texel*w)).x;\n\n    float dp_n = -u_n.y + p_n - p;\n    float dp_s =  u_s.y + p_s - p;\n    float dp_e = -u_e.x + p_e - p;\n    float dp_w =  u_w.x + p_w - p;    \n\n    // initialize with noise\n    if(reset()) {\n        fragColor = vec4(0.0);\n    } else {\n        float res = clamp(p + TIMESTEP * (dp_n + dp_s + dp_e + dp_w), -200.0, 200.0);\n        fragColor = vec4(res, vec3(0));\n    }\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}