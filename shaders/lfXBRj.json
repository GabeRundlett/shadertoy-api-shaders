{
    "Shader": {
        "info": {
            "date": "1724011705",
            "description": "Sketch for demonstrating a Mandelbrot pecularity.",
            "flags": 0,
            "hasliked": 0,
            "id": "lfXBRj",
            "likes": 0,
            "name": "Where's my Antenna?!",
            "published": 3,
            "tags": [
                "evoke25"
            ],
            "usePreview": 0,
            "username": "Refurio",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "#define pi 3.1415926536\n\n// center coordinates\nfloat x0 = -0.75 - 0.85e-5;\nfloat y0 = 0.0025;\n\n#define L 4\nfloat[L] ti = float[](3.,      6.,      9.,      20.);  // keyframe time index\nfloat[L] r  = float[](0.15e-5, 0.15e-5, 0.15e-5, 1.4);  // radius\nfloat[L] a  = float[](90.,     90.,     90.,     0.);   // angle\nint[L]   N  =   int[](2000,    2525,    20000,   2000); // iteration depth\n\n// color depends on iteration depth N:\nfloat[L] rf = float[](100.,    126.25,  1000.,   100.);\nfloat[L] gf = float[](200.,    252.5,   2000.,   200.);\nfloat[L] bf = float[](300.,    378.75,  3000.,   300.);\n\nfloat pw(float x) {\n    return x*x*x*x*x*x*x;\n}\nfloat blendf(float[L] lut, int k) {\n    if(k == 0)\n        return lut[k];\n    if(k >= L)\n        return lut[L-1];\n    float d = (iTime - ti[k-1])/(ti[k]-ti[k-1]);\n    return lut[k-1]*(1.-pw(d)) + lut[k]*pw(d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int k;\n    for(k = 0; k < L && iTime > ti[k]; ++k);\n\n    float w2 = iResolution.x / 2.;\n    float h2 = iResolution.y / 2.;\n    float m = h2 < w2 ? h2 : w2;\n    \n    // make complex radius from r and a:\n    float rr = blendf(r, k) * cos(-blendf(a, k)*pi/180.) / m;\n    float ri = blendf(r, k) * sin(-blendf(a, k)*pi/180.) / m;\n\n    int i;\n    float fcx = fragCoord.x - w2;\n    float fcy = fragCoord.y - h2;\n    float cr  = fcx*rr - fcy*ri + x0;\n    float ci  = fcx*ri + fcy*rr + y0;\n    \n    float zr = 0., zi = 0.;\n    for(i = 0; i < N[k]; ++i) {\n        float t = zr*zr - zi*zi + cr;\n        zi = 2.*zr*zi + ci;\n        zr = t;\n        if(zi*zi + zr*zr > 16.) {\n            float d = float(i)/float(N[k]);\n            fragColor = vec4(sin(rf[k]*d), sin(gf[k]*d), sin(bf[k]*d), 0.);\n            return;\n        }\n    }\n    fragColor = vec4(0., 0., 0., 0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}