{
    "Shader": {
        "info": {
            "date": "1571857511",
            "description": "a thing i made while eating beans at 3 am",
            "flags": 32,
            "hasliked": 0,
            "id": "td3SD8",
            "likes": 2,
            "name": "split complex fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "splitcomplex"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//reduce the 16 to 8 or 1 or whatever if its running slow for you\n#define SS 16\n\nvec2 R2smpl(float i) {\n  return fract(i * vec2(1.6180, 1.3247));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n  vec2 mpos = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n  float pxsize = 2. / iResolution.y;\n  vec3 acc = vec3(0.);\n  {\n    vec3 tmp = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n    acc += tmp*tmp * float(SS);\n  }\n  for(int smpl = 0; smpl < SS; smpl++) {\n    vec2 c = (pos + pxsize * R2smpl(dot(vec4(smpl,iFrame,fragCoord), vec4(1,8,3,7)))) * 2.;\n    vec2 z = vec2(0.);\n    for(int i = 0; i < 32; i++) {\n      if(dot(z,z) > 1000000.) {\n        float sm = float(i) + 1. - log(log(length(z))) / log(3.);\n        vec3 tmp = sin(sm * vec3(.67, .74, 1.)) * .5 + .5;\n        acc += tmp*tmp;\n        break;\n      }\n      vec2 a = z;\n      z = vec2(z.x*z.x + z.y*z.y, z.x*z.y*2.);\n      z += mpos;//vec2(-2., 1.);\n      z = vec2(z.x*a.x + z.y*a.y, z.x*a.y + z.y*a.x);\n      z = vec2(z.y, -z.x);\n      z += c;\n    }\n  }\n  fragColor = sqrt(acc / (float(SS) * 2.)).xyzz;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}