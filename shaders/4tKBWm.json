{
    "Shader": {
        "info": {
            "date": "1575631153",
            "description": "Fractal generated by the ifs u |-> u^(a/u) over the complex plane.",
            "flags": 0,
            "hasliked": 0,
            "id": "4tKBWm",
            "likes": 5,
            "name": "A chaotic map",
            "published": 3,
            "tags": [
                "chaos"
            ],
            "usePreview": 0,
            "username": "AlphaModder",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "#define MAX_ITERATIONS 200\n#define ZERO vec2(0.0, 0.0)\n#define RANGE vec2(2.0, 1.0)\n#define OFFSET vec2(0.0, -0.5)\n#define PI 3.1415926535\n#define A_MIN 8.0\n#define A_MAX 8.0\n\nvec3 fromhue(float h) {\n    float r = abs(h * 6.0 - 3.0) - 1.0;\n    float g = 2.0 - abs(h * 6.0 - 2.0);\n    float b = 2.0 - abs(h * 6.0 - 4.0);\n    return clamp(vec3(r, g, b), 0.0, 1.0);\n}\n\nvec3 torgb(vec3 hsl)\n{\n  vec3 rgb = fromhue(hsl.x);\n  float c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;\n  return (rgb - 0.5) * c + hsl.z;\n}\n\nvec3 color(vec2 c) {\n    float hue = 0.5 + carg(c) / (2.0 * PI);\n    float saturation = 1.0;\n    float lightness = 0.5 - (0.15 * fract(log2(cabs(c))));\n    return torgb(vec3(hue, saturation, lightness));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 p = -RANGE * (OFFSET + uv);\n    \n    float a = A_MIN + (A_MAX - A_MIN) * (0.5 + 0.5 * sin(0.5 * iTime));\n\n    float l = 0.0;\n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n        const float T = 12.0;\n        p = cexp(p, a * cinv(p));\n        if(dot(p,p) > (T*T)) break;\n        l += 1.0;\n    }\n    \n    // vec3 col = 0.5 + 0.5*cos( 3.0 + l*0.15 + vec3(0.0,0.6,1.0));\n    vec3 col = vec3(0.5 + p.x * 0.5, 0.5 + p.y * 0.5, 0);\n    \n    col = color(p);\n    // vec3 col = vec3(log(dot(p, p)) / 10.0, 0, 0);\n\tfragColor = vec4(col,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float carg(vec2 n) {\n    return atan(n.y, n.x);\n}\n\nfloat cabs(vec2 n) {\n    return sqrt(dot(n, n));\n}\n\nvec2 cconj(vec2 n) {\n    return vec2(n.x, -n.y);\n}\n\nvec2 cinv(vec2 n) {\n    return cconj(n) / dot(n, n);\n}\n\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 cexp(vec2 a, vec2 b) {\n    float magnitude = pow(cabs(a), b.x) * exp(-b.y * carg(a));\n    float param = b.x * carg(a) + b.y * log(cabs(a));\n    return magnitude * vec2(cos(param), sin(param));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}