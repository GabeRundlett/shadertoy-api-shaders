{
    "Shader": {
        "info": {
            "date": "1502393741",
            "description": "[url=https://www.facebook.com/groups/147749602472741/]Join the Shadertoy Community group on FB ![/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4dBBWc",
            "likes": 5,
            "name": "Join Facebook Shadertoy Group !",
            "published": 3,
            "tags": [
                "logo",
                "facebook"
            ],
            "usePreview": 0,
            "username": "ttoinou",
            "viewed": 719
        },
        "renderpass": [
            {
                "code": "#define kMIN(Q) k = min(k,Q);\n#define kMAX(Q) k = max(k,Q);\n\nfloat Quadrant(vec2 p,float r,int x,int y,bool inside\n               ,float outerRadiusProtection // wtf\n) {\n    float q = step( max( -float(x)*p.x , -float(y)*p.y) ,.0);\n    \n    if(inside)\n        return (1. - (1. - r + length(p))*q)* step(length(p) + outerRadiusProtection *r,1.);\n    else\n        return (length(p) - r)* q * step(length(p) + outerRadiusProtection *r,1.);\n    //return 1. - (r + length(p))*step( max( -float(x)*p.x , -float(y)*p.y) ,.0);\n    //return (1. - r - length(p)) * step( max( -float(x)*p.x , -float(y)*p.y) ,.0);\n}\n\nfloat Rectangle(vec2 p,vec2 min_,vec2 max_)\n{\n    float k = min(\n        p.x - min_.x,\n        p.y - min_.y\n    );\n    kMIN(max_.x-p.x);\n    return kMIN(max_.y-p.y);\n}\n\n#define FBPOINT(x,y) (vec2(x,y)/250.*vec2(2.,-2.)+vec2(-1.,1.))\n\nvoid mainImage( out vec4 col, in vec2 coord )\n{\n    float border = .92;\n    float e = 1./min(iResolution.x,iResolution.y);\n    \n    float intro = smoothstep(.0,1.,iTime/2.);\n    \n    // 3px anti-aliasing\n    float prec = mix(32.,3.,intro)*e; \n    \n\tvec2 p = (coord.xy - iResolution.xy/2.) * e * mix( 24. , 2.1 , intro );\n    \n    //vec2 q = abs(p),r = q - vec2(border);\n    \n    // square\n        //min(1. - q.x,1. - q.y)*step(q.x,1.)\n    float k = Rectangle(p,vec2(-1.),vec2(1.)); \n    \n    // round corners\n        //,1. - ( step(.1 - length(r),.0)*step(-min(r.x,r.y),.0) )\n        //, 1. - ( (.1 - length(r) < .0 ? 1. : 0.)*step(-min(r.x,r.y),.0) )\n        //, 1. - (border + length(r))*step(-min(r.x,r.y),.0)\n    kMIN(Quadrant(abs(p) - vec2(border),1. - border,1,1,true,-10.));\n    \n    // f sticks\n    kMIN(-Rectangle(p,FBPOINT(133,250),FBPOINT(173,39)));\n    kMIN(-Rectangle(p,FBPOINT(134,73),FBPOINT(211,39)));\n    \n    // f middle stick\n    //kMIN(-Rectangle(p,FBPOINT(101,152),FBPOINT(206,116)));\n    vec2 pm = p;\n    if( pm.x > .0 ) pm.x -= pm.y*.12;\n    kMIN(-Rectangle(pm,FBPOINT(101,152),FBPOINT(210,116)));\n    \n    // f outside corner\n    kMAX( Quadrant(p-FBPOINT(174,80),.328,-1,1,false,1.5) );\n    //kMIN(Quadrant(p-FBPOINT(185,85),.09,-1,1,true,-20.5) );\n    \n    col = mix(\n        vec4(1.),\n        vec4(.23,.35,.6,1.), // FB blue *.9\n        smoothstep(.0,prec,k) \n    );\n    \n    // f inside corner\n    col = mix(\n        col,\n        vec4(1.),\n        smoothstep(.0,prec,\n          Quadrant(p-FBPOINT(187.2,87.2),.11,-1,1,false,-2.5)\n            * step(-p.x,-.3) * step(p.y,.5)) // wtf\n    );\n    \n    col = mix( vec4(1.) , col , intro );\n}\n\n\n    // tests\n    \n    /*\n\n    col = mix(col,vec4(1.,.0,.0,1.),smoothstep(.0,e,Rectangle(p,vec2(-1.),vec2(1.))));\n    col = mix(col,vec4(1.,.0,.0,1.),smoothstep(.0,3.*e,Quadrant(p,1.,-1,-1,true)));\n    col = mix(col,vec4(1.,.0,.0,1.),smoothstep(.0,3.*e,Quadrant(p,1.,-1,-1,false)));\n    \n    col = mix(col,vec4(1.,.0,.0,1.),smoothstep(.0,3.*e,\n        Quadrant(p-FBPOINT(185,85),.09,-1,1,false,-2.5)\n                                               * step(-p.x,-.3)\n                                               * step(p.y,.5)\n    ));\n\n    col = mix(col,vec4(1.,.0,.0,1.),smoothstep(.0,3.*e,\n        -Quadrant(p-FBPOINT(185,85),.09,-1,1,true,9.2)\n    ));\n    \n    \n    col = mix(col,vec4(1.,.0,.0,1.),smoothstep(.0,3.*e,\n        Quadrant(p-FBPOINT(174,80),.33,-1,1,false)\n    ));\n\n\t*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}