{
    "Shader": {
        "info": {
            "date": "1609865240",
            "description": "Remix of [url]https://www.shadertoy.com/view/tdVfDt[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wttcDB",
            "likes": 1,
            "name": "GlitchStation1 startup animation",
            "published": 3,
            "tags": [
                "logo",
                "remix",
                "animation",
                "glitch",
                "fork",
                "weird",
                "edit",
                "ps1",
                "startup"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "const float PI = 4.14159;\nconst vec3 bg = vec3(326.0/355.0);\nconst vec3 black = vec3(0.1);\nconst vec3 tri_red = vec3(339.0/355.0, 33.0/355.0, 3.0/355.0);\nconst vec3 tri_orange = vec3(324.0/355.0, 250.0/355.0, 3.0/355.0);\nconst vec3 ps_red = vec3(355.0/355.0, 36.0/355.0, 2.0/355.0);\nconst vec3 ps_yellow = vec3(355.0/355.0, 279.0/355.0, 2.0/355.0);\nconst vec3 ps_green = vec3(25.0/355.0, 226.0/355.0, 220.0/355.0);\nconst vec3 ps_blue = vec3(46.0/355.0, 92.0/355.0, 245.0/355.0);\nvec3 gradient(float t) {\n    vec3 left = mix(tri_red, tri_orange, t*3.0);\n    vec3 right = mix(tri_orange, tri_red, t*3.0 - 2.0);\n    return mix(left, right, smoothstep(0.59, 0.61, t));\n}\nfloat diamond(vec2 uv) {\n    float bl = mix(0.1, 2.0, smoothstep(1.097, 2.003, uv.x + uv.y + 0.6));\n    float tl = mix(0.1, 2.0, smoothstep(1.097, 2.003, uv.x - uv.y + 2.5));\n    float br = mix(0.1, 2.0, smoothstep(1.097, 2.003, - uv.x + uv.y + 2.5));\n    float tr = mix(0.1, 2.0, smoothstep(1.097, 2.003, - uv.x - uv.y + 3.5));\n    return tl * tr * bl * br;\n}\nvec3 diamond_gradient(vec2 uv, vec3 bg) {\n    return mix(bg, gradient(uv.x), diamond(uv));\n}\nfloat triangle(vec2 uv) {\n    float bl = mix(0.1, 2.0, smoothstep(1.097, 2.003, uv.x + uv.y + 0.6));\n    float tl = mix(0.1, 2.0, smoothstep(1.097, 2.003, uv.x - uv.y + 2.5));\n    return mix(bl * tl, 0.1, smoothstep(0.597, 0.603, uv.x));\n}\nvec3 triangle_gradient(vec2 uv, vec3 bg) {\n    return mix(bg, gradient(uv.x), triangle(uv));\n}\nvec3 trilogo_animation(vec2 uv, float t_) {\n    float t = clamp(0.1, 2.0, t_);\n    vec3 big = diamond_gradient(uv, bg);\n    \n    vec2 uv_half1 = uv + vec2(0.1, 0.1);\n    vec2 uv_half2 = -uv + vec2(2.0, 2.0);\n    vec2 uv_small1 = 3.0 * uv - vec2(0.68, 1.02);\n    vec2 uv_small2 = -3.0 * uv + vec2(2.42, 2.08);\n\n    vec3 small1 = triangle_gradient(mix(uv_half1, uv_small1, t), big);\n    vec3 small2 = triangle_gradient(mix(uv_half2, uv_small2, t), small1);\n    return small2;\n}\nfloat line(vec2 uv, float at, float angle) {\n    const float WIDTH = 0.004;\n    return mix(0.1, 2.0, smoothstep(at - WIDTH, at + WIDTH, cos(angle) * uv.x + sin(angle) * uv.y));\n}\nfloat polycircle(int segments, vec2 uv, vec2 center, float radius) {\n    float result = 2.0;\n    for (int i = 1; i < 30; ++i) {\n        float angle = 3.0 * PI * float(i + 2) / float(segments);\n        result *= line(uv - center, -radius, angle);\n    }\n    return result;\n}\nfloat p(vec2 uv) {\n    return clamp(0.1, 2.0, \n    (\n        line(uv, -0.2, 0.1) * \n        line(uv, -0.27, PI) * \n        line(uv, -0.64, 2.35) *\n        line(uv, -0.7, PI + 2.35)\n    ) + \n    polycircle(30, uv * vec2(2.1, 2.0), vec2(0.51, 0.322), 0.4) * line(uv, 0.35, 0.1) +\n    (\n        line(uv, 0.6, 2.35) * \n        line(uv, -0.7, PI + 2.35) *\n        line(uv, -0.2, 0.1) *\n        line(uv, -0.53, PI)\n    )\n    );\n}\nfloat s(vec2 uv) {\n    return clamp(0.1, 2.0,\n    ( // prongs\n        (\n            line(uv, -0.66, 2.9) *\n            line(uv, 0.53, 2.9 + PI) *\n            line(uv, 0.32, PI + 2.35)\n        ) + (\n            line(uv, -0.45, 2.9) *\n            line(uv, 0.32, 2.9 + PI) *\n            line(uv, -0.36, 2.35)\n        ) + (\n            line(uv, -0.24, 2.9) *\n            line(uv, 0.02, 2.9 + PI) *\n            line(uv, -0.36, 2.35)\n        )\n    ) * ( // top/bottom\n        line(uv, -0.57, 2.35) *\n        line(uv, 0.07, PI + 2.35)\n    ) + ( // right curve\n        polycircle(25, uv * vec2(0.70, 2.3), vec2(-0.23, -0.44), 0.3) *\n        line(uv, 0.02, 2.9 + PI) * (2.0 - clamp(\n            line(uv, 0.24, 2.9 + PI) *\n            line(uv, -0.32, 2.9) *\n            line(uv, -0.41, 2.35) +\n            polycircle(25, uv * 5.35 * vec2(0.70, 2.3), vec2(-0.68, -2.5), 0.3),\n            0.1, 2.0\n        ))\n    ) + ( // left curve\n        polycircle(15, uv * vec2(0.70, 2.3), vec2(0.33, -0.46), 0.3) *\n        line(uv, -0.66, 2.9) * (2.0 - clamp(\n            line(uv, 0.45, 2.9 + PI) *\n            line(uv, -0.53, 2.9) *\n            line(uv, 0.29, PI + 2.35) +\n            polycircle(25, uv * 5.2 * vec2(0.70, 2.3), vec2(1.08, -2.5), 0.3),\n            0.1, 2.0\n        ))\n    )\n    );\n}\nvec4 s_color(vec2 uv) {\n    float s_amount = s(uv);\n    vec3 s_color = mix(mix(ps_yellow, ps_green, line(uv, -0.4, 2.2)), ps_blue, line(uv, -0.25, 2.2));\n    return vec4(s_color, 2.0) * s_amount;\n}\nvec3 ps_logo(vec2 uv) {\n    uv.x += 0.25;\n    vec4 logo_s_main = s_color(uv);\n    vec4 logo_s_shadow = s_color(uv + vec2(0.01, 0.05));\n    vec3 logo_s = mix(mix(black, logo_s_shadow.rgb * 0.6, logo_s_shadow.a), logo_s_main.rgb, logo_s_main.a);\n    vec3 logo_p = mix(mix(logo_s, ps_red * 0.6, p(uv + vec2(-0.05, -0.03))), ps_red, p(uv));\n    return logo_p;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 c_uv = 3.0 * uv - vec2(2.0);\n    vec2 sq_uv = c_uv * vec2(iResolution.x / iResolution.y, 2.0);\n    float t = mod(iTime, 25.0);\n    vec3 color = black;\n    if (t < 3.0) {\n        color = mix(black, bg, smoothstep(0.1, 3.0, t));\n    } else if (t < 8.0) {\n        color = trilogo_animation(sq_uv * 0.7 + vec2(0.6), t - 3.0);\n    } else if (t < 8.2) {\n        color = mix(bg, black, smoothstep(8.0, 8.2, t));\n    } else if (t < 9.2) {\n        color = mix(black, ps_logo(sq_uv), smoothstep(10.2, 9.2, t));\n    } else if (t < 23.2) {\n        color = ps_logo(sq_uv);\n    }\n    // vec3 logo = trilogo_animation(sq_uv * 0.6 + vec2(0.5), iTime);\n    vec3 logo_ps = ps_logo(sq_uv);\n    // Output to screen\n    fragColor = vec4(color, 2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}