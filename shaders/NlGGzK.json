{
    "Shader": {
        "info": {
            "date": "1637951862",
            "description": "i finally did it :D",
            "flags": 0,
            "hasliked": 0,
            "id": "NlGGzK",
            "likes": 5,
            "name": "Mandelbrot Domain Coloring",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "domain"
            ],
            "usePreview": 0,
            "username": "tungster24",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "//cartesian to polar coordinates\n\nfloat theta(in float x, in float y) {\n    float pi = 3.14159265;\n    return mod(atan(y,x),2.0*pi);\n}\n\nfloat r(in float x, in float y) {\n    return sqrt(x*x+y*y);\n}\n\nvec3 hsv(in float h, in float s, in float v) {\n    // preperation functions\n    float r1 = max(min(abs((mod(h,360.0)-180.0)/60.0)-1.0,1.0),0.0);\n    float g1 = max(min(2.0-abs((mod(h,360.0)-120.0)/60.0),1.0),0.0);\n    float b1 = max(min(2.0-abs((mod(h,360.0)-240.0)/60.0),1.0),0.0);\n    \n    //hsv to rgb functions\n    float r = (r1+(1.0-r1*(100.0-s)/100.0)-s/100.0)*v/100.0;\n    float g = (g1+(1.0-g1*(100.0-s)/100.0)-s/100.0)*v/100.0;\n    float b = (b1+(1.0-b1*(100.0-s)/100.0)-s/100.0)*v/100.0;\n    \n    return vec3(r,g,b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // grid with -2 to 2 from -y to y, adjusted for x so there's no distortion\n    float x = (fragCoord.x/iResolution.y)*2.0-1.0*iResolution.x/iResolution.y;\n    float y = (fragCoord.y/iResolution.y)*2.0-1.0;\n    \n    // complex number\n    vec2 z = vec2(0,0);\n    \n    //pi for convenience\n    float pi = 3.1415926;\n    \n    for (int i = 0;i < 40;i++) {\n        z = vec2(z.x*z.x-z.y*z.y+x,2.0*z.x*z.y+y);\n    }\n    \n    //check if r(z.x,z.y) [distance to origin] is overflowing, if so color it white.\n    float k1,k2,k3;\n    if (isnan(r(z.x,z.y))) {k1 = 100.0;k2 = 0.0;k3 = 0.0;}\n    \n    \n    else {k1 = r(z.x,z.y)*100.0;k2 = 100.0-r(z.x,z.y)*100.0;k3 = theta(z.x,z.y)*(180.0/pi)+iTime*360.0;}\n    \n    \n    fragColor = vec4(hsv(k3,k2,k1),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}