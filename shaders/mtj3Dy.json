{
    "Shader": {
        "info": {
            "date": "1673894426",
            "description": "ðŸŒ¼",
            "flags": 32,
            "hasliked": 0,
            "id": "mtj3Dy",
            "likes": 59,
            "name": "Frooty",
            "published": 3,
            "tags": [
                "plant",
                "froot"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 648
        },
        "renderpass": [
            {
                "code": "\n// Frooty by Leon Denise 2023-01-16\n\n// a floral iteration over \n// Baroque Fractal Pattern https://www.shadertoy.com/view/flcBD4\n// Taste of Noise 7 https://www.shadertoy.com/view/NddSWs\n\n// Buffer A draws shape trails with a depth and id buffer\n// Buffer B calculates ambient occlusion and normal\n// Image does the coloring and lighting\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // 2d coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (fragCoord-R.xy/2.)/R.y;\n    \n    // pixel data from Buffer A (steps, timeline, id, depth)\n    vec4 data = texture(iChannel0, uv);\n    float total = data.a;\n    \n    if (total > .001 && total < max_dist)\n    {\n        // data from Buffer A\n        float shade = data.r;\n        float time = data.g;\n        float mat = floor(data.b);\n        float froot = fract(data.b);\n        \n        // data from Buffer B (normal, ao)\n        data = texture(iChannel1, uv);\n        vec3 normal = data.xyz;\n        float ao = data.a;\n        \n        // palettes\n        // Inigo Quilez https://iquilezles.org/articles/palettes\n        vec3 tintCold = .5+.5*cos(vec3(2,3,1)*5.7+4.-time*4.);\n        vec3 tintWarm = .5+.5*cos(vec3(1,2,3)*4.9+mat*1.+uv.y*2.+5.);\n        color = mix(tintCold, tintWarm, froot);\n        \n        // lighting\n        color += pow(dot(normal, N(0,1,1))*.5+.5, 4.)*froot;\n        //color += .2*(1.-pow(abs(dot(normal, N(0,0,1))), .5));\n        \n        // shadow\n        color *= shade;\n        color *= ao * .5 + .5;\n        color *= ss(100.,0.,total);\n    }\n    else\n    {\n        // background\n        color = vec3(0.039,0.110,0.322) * smoothstep(2., -2., length(uv-.5));\n    }\n    \n    // fade transition\n    float t = fract(iTime/delay);\n    color *= ss(.0,.1,t) * ss(1.,.9,t);\n    \n    // vignette\n    color *= ss(1.5, .5, length(p));\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Frooty by Leon Denise 2023-01-16\n\n// this frame buffer draws the depth buffer with pixel data (steps, timeline, id, depth)\n// it draws shape only if it is closer that previous depth\n// we can then draw trails of shapes and relight later in Buffer B\n\n\n// globals\nfloat timeline;\nfloat id, froot;\n\nfloat map(vec3 p)\n{\n    vec3 q = p;\n    float dist = 100.;\n    float shape = 100.;\n    \n    // grid repeat\n    float cell = 5.;\n    vec3 pp = p+cell/2.;\n    id = hash13(floor(pp/cell));\n    p = repeat(pp, cell);\n    p += (hash31(floor(id*100.))*2.-1.)*cell/4.;\n    \n    // timing\n    float t = timeline;\n    float tt = fract(t);\n    float end = mix(.2,.8,id);\n    float anim = ss(-.1,end,tt);\n    \n    // shape parameters\n    float r = 1.; // range \n    float f = 1.7; // falloff coeficient\n    const float count = 6.; // iterations\n    \n    // angle\n    float n = id*1000.+anim*2. + floor(t); \n    \n    // going outter\n    r *= pow(ss(0.01,end,tt), .2);\n    \n    // kaleidoscopic iterated function\n    float a = 1.;\n    for (float i = 0.; i < count; ++i)\n    {\n        // twist faster and faster\n        p.xy *= rot(n/a);\n        p.yz *= rot(n/a);\n        \n        // fold\n        p.x = abs(p.x)-r*a;\n        \n        // falloff\n        a /= f;\n    }\n    \n    // tube (the stems)\n    dist = min(dist, max(abs(p.y)-.1*(1.-anim), length(p.xz)-.02));\n    \n    // sphere (the froots)\n    froot = ss(end-.3,end,tt);\n    float size = .1 * froot - (1.-froot) * .1;\n    dist = min(dist, length(p)-size);\n    \n    // crop shell to avoid camera collision\n    dist = max(dist, -length(q)+cell/2.);\n    \n    return dist * .8;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 2d coordinates\n    vec2 uv = fragCoord/R.xy;\n    vec2 p = (fragCoord-R.xy/2.)/R.y;\n    \n    // noise\n    vec3 rng = hash(uvec3(fragCoord, iFrame));\n    vec3 blu = texture(iChannel1, fragCoord/1024.).rgb;\n    vec2 blur = normalize(blu.xy*2.-1.) * blu.z;\n    \n    // buffer\n    vec4 frame = texture(iChannel0, uv);\n    \n    // timeline used by map for animation\n    timeline = rng.x*.001+iTime/delay;\n\n    // 3d coordinates\n    vec3 pos = vec3(0,0,0);\n    vec3 ray = normalize(vec3(p, -2.));\n    vec2 angle = (hash21(floor(iTime/delay))*2.-1.)*.5;\n    ray.yz *= rot(angle.x);\n    ray.xz *= rot(angle.y);\n    \n    // raymarch\n    float total = 0.;\n    float steps = 0.;\n    float dof = 0.;\n    const float count = 80.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        if (dist < .001 || total > max_dist) break;\n        \n        // dithering\n        dist *= 0.9 + 0.1 * rng.z;\n        \n        // dof far blur\n        dof += 0.0001 * ss(15.,30.,total);\n        ray.xy += blur * dof;\n        \n        total += dist;\n        pos += ray * dist;\n    }\n\n    // draw if closer\n    float depth = frame.a;\n    bool closer = total < depth || depth < .001;\n    if (total < max_dist && closer)\n    {\n        // data pack\n        fragColor = vec4(\n            steps/count, // used to apply shadow\n            fract(timeline), // used to offset tint\n            floor(id*100.) + froot * .99, // used as material\n            total); // depth buffer\n    }\n    else\n    {\n        // keep previous result\n        fragColor = frame;\n    }\n    \n    // clear between transition\n    fragColor *= step(.01, fract(iTime/delay));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// shared constants\nconst float delay = 15.;\nconst float max_dist = 200.;\n\n// snippets\n#define R iResolution\n#define T(uv) texture(iChannel0, uv).a\n#define N(x,y,z) normalize(vec3(x,y,z))\n#define ss(a,b,t) smoothstep(a,b,t)\n#define repeat(p,r) (mod(p,r)-r/2.)\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n// Victor Shepardson + Inigo Quilez \n// https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;  // GLIB C\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// Frooty by Leon Denise 2023-01-16\n\n// compute ambient occlusion and normal from Buffer A depth\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    \n    // ambient occlusion\n    float ao = 0.;\n    if (color.a < 20. && color.a > 0.5)\n    {\n        const float count = 6.;\n        for (float f = 0.; f < count; ++f)\n        {\n            vec3 rng = hash(uvec3(fragCoord, float(iFrame)+196.*f));\n            vec2 offset = 20.*pow(rng.z, 4.)*normalize(rng.xy*2.-1.)/R.xy;\n            float total = texture(iChannel0, uv+offset).a;\n            if (total < 20. && total > 0.5)\n                ao += 4.*abs(color.a - total);\n        }\n    }\n    float frame = texture(iChannel1, uv).a;\n    fragColor.a = mix(frame, 1.-clamp(ao, 0., 1.), .1);\n    \n    // normal\n    vec3 unit = vec3(1./R.xy, 0);\n    float w = T(uv+unit.xz);\n    float e = T(uv-unit.xz);\n    float n = T(uv+unit.zy);\n    float s = T(uv-unit.zy);\n    bool edge = w * e * n * s < .001;\n    if (color.a > .001 && color.a < max_dist && !edge)\n    {\n        vec3 normal = normalize(vec3(w-e, n-s, color.r*color.r*.05));\n        fragColor.rgb = normal;\n    }\n    else\n    {\n        fragColor.rgb = vec3(0,0,1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}