{
    "Shader": {
        "info": {
            "date": "1676286872",
            "description": "it's a squaricle!",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt2Szy",
            "likes": 3,
            "name": "squaricle",
            "published": 3,
            "tags": [
                "superb"
            ],
            "usePreview": 0,
            "username": "oudend",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "vec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nfloat manhattanDistance(vec2 p1, vec2 p2) {\n    float d1 = abs(p1.x - p2.x);\n\tfloat d2 = abs(p1.y - p2.y);\n\treturn d1 + d2;\n}\n\nvec3 squareMask(vec2 uv, float rotation, vec2 mid, float thickness, float gap, vec2 ratio)\n{\n    float dist = (1. - manhattanDistance( rotate(uv*ratio, rotation), rotate(mid*ratio, rotation) )) - (1. - thickness);\n    float dist2 = (manhattanDistance( rotate(uv*ratio, rotation), rotate(mid*ratio, rotation ) )) - gap;\n    \n    return vec3( ceil(dist2 * dist) + min(.1, .1 - dist2) * .2 );\n    return vec3( ceil(dist2 * dist) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float ratio = iResolution.x / iResolution.y;\n    vec2 resRatio = vec2(ratio * .5, 1./ratio);\n    \n    int steps = 190;\n    float speed = .075;\n    float size = .001;\n    float thickness = .001;\n    float thicknessDiff = .0001;\n    float angleDiff = 1.;\n    float sizeDiff = .005;\n    float speedDiff = .1;\n    \n    \n    //speed = speed + mod(iTime, 1.) * .1;//speed + (mod(iTime / 2., 4.) / 40. );\n    \n    \n    // Time varying pixel color\n    \n    vec3 col = (.9 + 0.5*cos(iTime + uv.xyx*ratio+vec3(0,1,4))) * ( 1. - distance(uv,vec2(.5,.5))*1.2 )*.4;// * (1. - distance(uv, vec2(.5, .5)));\n    vec3 colConst = (.9 + 0.5*cos(iTime+vec3(4,1,4)));\n    \n    \n    vec3 squares = vec3(0.);\n    \n    for(int i = 0; i < steps; ++i)\n    {\n        vec3 square = squareMask(uv, iTime * (speed + speedDiff*float(i)) + angleDiff*float(i), vec2(.5,.5), size + sizeDiff*float(i) + (thickness+thicknessDiff*float(i)), size + sizeDiff*float(i), resRatio);\n        squares = (squares + square) / 1.01;\n    }\n    \n    colConst = max(vec3(0.), colConst - squares) * col;\n\n    // Output to screen\n    fragColor = vec4(colConst + col * squares,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}