{
    "Shader": {
        "info": {
            "date": "1724272914",
            "description": "originals  https://glslsandbox.com/e#60577.0",
            "flags": 0,
            "hasliked": 0,
            "id": "MfXfWB",
            "likes": 5,
            "name": "data mining",
            "published": 3,
            "tags": [
                "cube",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution.xy\n\n\n\nconst float PI = 3.14159265;\n\nvec2 rotate(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2( cosA + sinA*v.x, v.y * cosA + v.y * sinA); \t\n}\n\nfloat square(vec2 uv, float d) {\n\treturn max(abs(uv.x), abs(uv.y)) - d;\t\n}\n\nfloat smootheststep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0) * 3.14159265;\n    return 0.5 - (cos(x) * 0.5);\n}\nvec3 getColorFromTime( float time)\n{\n\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= resolution.x / resolution.y;\n\tuv *= 1.5;\n\t\n    \tfloat blurAmount = -0.005 * 1000.0 / resolution.y;\n    \n\tfloat btime = mod(time, 1.0);\n\tbtime = smootheststep(0.0, 1.0,  btime);\n\t\n\tvec3 returnVal = vec3(.0);\n\t\n\t\n\tfor (int i = 0; i < 19; i++) {\n\t\tfloat n = float(i);\n\t\tfloat size = 1.0 - n / 9.0;\n\t\tfloat rotateAmount = (n * 0.5 + 0.25) * PI * 2.0; \n\t\treturnVal = mix(returnVal, vec3(1.0), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * btime), size)));\n\t\tfloat blackOffset = mix(1.0 / 4.0, 1.0 / 2.0, n / 9.0) / 9.0;\n\t\treturnVal = mix(returnVal, vec3(0.0), smoothstep(0.0, blurAmount, square(rotate(uv, -(rotateAmount + PI / 2.0) * btime), size - blackOffset)));\n    }\nreturn returnVal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat period = 2.0;\n\tfloat btime = time*0.1 / period;\n\n\tvec3 mainVal \t= getColorFromTime(btime);\n\tvec3 SecondVal \t= getColorFromTime(btime -.005);\n\tvec3 ThirdVal \t= getColorFromTime(btime -.01);\n\tvec3 FirstMixInter = mix( SecondVal, ThirdVal, .25);\n\tvec3 SecondMixInter =  mix( SecondVal, ThirdVal, .30);\n\t\n\tvec3 FirstMix = mix ( mainVal, FirstMixInter, .25 );\n\tvec3 SecondMix = mix ( mainVal, SecondMixInter, .30 );\n\t\n\tfragColor.rgb = SecondMixInter;\n\tfragColor = vec4( fragColor.r, mix (mainVal, mix( SecondVal, ThirdVal, .25), .30 ).x, fragColor.b, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}