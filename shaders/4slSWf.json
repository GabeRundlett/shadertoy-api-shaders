{
    "Shader": {
        "info": {
            "date": "1407382465",
            "description": "Bender distance field (partial, only what's visible to camera).",
            "flags": 0,
            "hasliked": 0,
            "id": "4slSWf",
            "likes": 229,
            "name": "Bender",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefield",
                "sdf",
                "cartoon"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 22265
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n//   https://www.youtube.com/c/InigoQuilez\n//   https://iquilezles.org\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n\n//========================================================================================\n// noises\n//========================================================================================\n\nfloat sin_noise( in vec2 x ) { return sin(x.x+sin(x.y)); }\nfloat fbm( vec2 p )\n{\n    const mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n    float f = 0.0;\n    f += 0.5000*sin_noise( p ); p = m2*p*2.02;\n    f += 0.2500*sin_noise( p ); p = m2*p*2.03;\n    f += 0.1250*sin_noise( p ); p = m2*p*2.01;\n    f += 0.0625*sin_noise( p );\n    return f/0.9375;\n}\n\n//========================================================================================\n// distance primitives\n//========================================================================================\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec2 sdSegment( vec3 a, vec3 b, vec3 p )\n{\n\tvec3 pa = p - a;\n\tvec3 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n\treturn max( max( dot(q,c.xy), p.y), -p.y-c.z );\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nvec3 getClosest( vec2 b0, vec2 b1, vec2 b2 ) \n{\n    float a =     det(b0,b2);\n    float b = 2.0*det(b1,b0);\n    float d = 2.0*det(b2,b1);\n    float f = b*d - a*a;\n    vec2  d21 = b2-b1;\n    vec2  d10 = b1-b0;\n    vec2  d20 = b2-b0;\n    vec2  gf = 2.0*(b*d21+d*d10+a*d20); gf = vec2(gf.y,-gf.x);\n    vec2  pp = -f*gf/dot(gf,gf);\n    vec2  d0p = b0-pp;\n    float ap = det(d0p,d20);\n    float bp = 2.0*det(d10,d0p);\n    float t = clamp( (ap+bp)/(2.0*a+b+d), 0.0 ,1.0 );\n    return vec3( mix(mix(b0,b1,t), mix(b1,b2,t),t), t );\n}\n\nvec2 sdBezier( vec3 a, vec3 b, vec3 c, vec3 p, in float thickness )\n{\n\tvec3 w = normalize( cross( c-b, a-b ) );\n\tvec3 u = normalize( c-b );\n\tvec3 v = normalize( cross( w, u ) );\n\n\tvec2 a2 = vec2( dot(a-b,u), dot(a-b,v) );\n\tvec2 b2 = vec2( 0.0 );\n\tvec2 c2 = vec2( dot(c-b,u), dot(c-b,v) );\n\tvec3 p3 = vec3( dot(p-b,u), dot(p-b,v), dot(p-b,w) );\n\n\tvec3 cp = getClosest( a2-p3.xy, b2-p3.xy, c2-p3.xy );\n\n\treturn vec2( 0.85*(sqrt(dot(cp.xy,cp.xy)+p3.z*p3.z) - thickness), cp.z );\n}\n\n//========================================================================================\n// distance operators\n//========================================================================================\n\nfloat opU( float d2, float d1 ) { return min( d1,d2); }\nfloat opS( float d2, float d1 ) { return max(-d1,d2); }\nvec3  opU( vec3  d2, vec3  d1 ) { return ( d2.x<d1.x)? d2:d1; }\nvec3  opS( vec3  d2, vec3  d1 ) { return (-d1.x>d2.x)?-d1:d2; }\n\n//========================================================================================\n// Bender\n//========================================================================================\n\nvec4 map( vec3 p )\n{\n\tvec3 q = vec3( abs(p.x), p.yz );\n\n    // head and body\n\tfloat d1;\n    d1 =          sdSegment(     vec3(0.0,1.8,0.0), vec3(0.0,0.7,0.0), p ).x - 0.5;\n    d1 = opU( d1, sdCone(      p-vec3(0.0,2.8,0.0), vec3( normalize(vec2(0.9,0.1)), 0.5 ) ) );\n    d1 = opS( d1, sdCylinder( (p-vec3(0.0,1.0,0.4)).zxy, vec2(0.2,1.0) ) );\n    d1 = opU( d1, sdCylinder( (p-vec3(0.0,-0.32,0.0)), vec2(0.93,0.7) ) );\n    d1 = opU( d1, sdCone(     (p-vec3(2.2,1.7,1.0))*vec3(1.0,-1.0,-1.0), vec3( normalize(vec2(0.8,0.4)), 0.5 ) ) );\n    vec4 res = vec4( d1,1.0,0.0,0.0 );\n    \n    // neck and fingers    \n    {\n    vec3 d;\n    d =         vec3( udRoundBox( p-vec3(0.0,1.55,0.30), vec3(0.35,0.1,0.3)-0.03, 0.12 ), 1.0, 5.0 );\n    d = opS( d, vec3( udRoundBox( p-vec3(0.0,1.55,0.35), vec3(0.35,0.1,0.5)-0.04, 0.10 ), 0.0, 5.0) );\n    d = opU( d, vec3( sdCone(     p-vec3(0.0,1.08,0.00), vec3(0.60,0.8,0.7) ), 1.0, 6.0) );\n    d = opU( d, vec3( sdSphere(   p-vec3(0.0,2.70,0.00), 0.08 ), 1.0, 7.0) );\n    d = opU( d, vec3( sdSphere(   p-vec3(0.0,2.20,0.00), 0.15 ), 1.0, 8.0) );\n    d = opU( d, vec3( sdSegment( vec3(2.2,2.10,1.0), vec3(2.2,2.35,0.8), q ).x - 0.08, 0.8,  9.0) );\n\td = opU( d, vec3( sdSegment( vec3(2.2,2.10,1.0), vec3(2.4,2.35,1.2), q ).x - 0.08, 0.8, 10.0) );\n\td = opU( d, vec3( sdSegment( vec3(2.2,2.10,1.0), vec3(2.0,2.35,1.2), q ).x - 0.08, 0.8, 11.0) );\n    d = opU( d, vec3( sdSegment( vec3(2.2,2.35,0.8), vec3(2.2,2.40,0.8), q ).x - 0.08, 0.8,  9.0) );\n\td = opU( d, vec3( sdSegment( vec3(2.4,2.35,1.2), vec3(2.4,2.50,1.1), q ).x - 0.08, 0.8, 10.0) );\n\td = opU( d, vec3( sdSegment( vec3(2.0,2.35,1.2), vec3(2.0,2.50,1.1), q ).x - 0.08, 0.8, 11.0) );\n    if( d.x<res.x ) res = vec4( d.x,3.0,d.yz );\n    }\n    \n    // eyes and mouth\n    {\n    vec3 d;\n    d =         vec3( sdSphere(   p-vec3( 0.18,1.55,0.48), 0.18           ), 1.0, 12.0 );\n    d = opU( d, vec3( sdSphere(   p-vec3(-0.18,1.55,0.48), 0.18           ), 1.0, 13.0 ) );\n    d = opU( d, vec3( sdCylinder( p-vec3( 0.00,1.00,0.00), vec2(0.47,0.4) ), 1.0, 14.0 ) );\n    if( d.x<res.x ) res = vec4( d.x,2.0, d.yz );\n    }\n    \n    // arms\n    {\n    vec3 d;\n    d =         vec3( sdSphere( q-vec3( 0.88,0.15,0.0), 0.19 ), 0.0, 15.0 );\n    d = opU( d, vec3( sdBezier( vec3(0.9,0.15,0.0), vec3(2.0,-0.5,0.0), vec3(2.2,2.0,1.0), q, 0.13 ), 16.0) );\n    if( d.x<res.x ) res = vec4( d.x,0.0, d.yz );\n    }\n\n    return res;\n}\n\n//========================================================================================\n\nvec4 raycast( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 9.0;\n    float t = 0.0;\n    vec4 res = vec4(-1.0);\n    for( int i=0; i<128; i++ )\n    {\n\t    vec4 tmp = map( ro+rd*t );\n        res = vec4(t,tmp.yzw);\n        if( tmp.x<0.001 || t>maxd ) break;\n        t += tmp.x;\n    }\n    return (t>maxd) ? vec4(-1.0) : res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(-1.0,1.0) * 0.005;   \n\treturn normalize( e.yxx*map( pos + e.yxx ).x + \n\t\t\t\t\t  e.xxy*map( pos + e.xxy ).x + \n\t\t\t\t\t  e.xyx*map( pos + e.xyx ).x + \n\t\t\t\t\t  e.yyy*map( pos + e.yyy ).x );    \n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<48; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        res = min( res, k*h/t );\n        if( res<0.001 || t>5.0 ) break;\n\t\tt += clamp( h, 0.005, 0.5 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvoid generateRay( out vec3 resRo, out vec3 resRd, in vec3 po, in vec3 ta, in vec2 pi )\n{\n\tvec2 p = (2.0*pi-iResolution.xy)/iResolution.y;\n        \n    // camera matrix\n    vec3 ww = normalize( ta - po );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.2*ww );\n\n    resRo = po;\n    resRd = rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    float an = 5.7 + 0.62831*iTime;\n\tvec3  po = vec3(1.0 + 3.5*sin(an),0.6,3.5*cos(an));\n    vec3  ta = vec3(1.0,1.5,0.0);\n\n    vec3 ro, rd;\n    generateRay( ro, rd, po, ta, fragCoord );\n    \n    //-----------------------------------------------------\n\t// sky\n    //-----------------------------------------------------\n    \n    float gra = smoothstep(-0.3,0.6,rd.y);                    \n    vec3  sky = vec3(0.4,0.7,1.0)*0.2;\n    float h = (1000.0-ro.y)/rd.y;\n    if( h>0.0 )\n    {\n        vec2 uv = ro.xz + rd.xz*h;\n        float cl = smoothstep( 0.0, 0.8, fbm( 0.002*uv ) );\n        cl = clamp( floor(cl*3.0)/(3.0-1.0), 0.0, 1.0 );\n        sky = mix( sky, vec3(0.9,0.6,0.3), 0.4*cl*gra );\n    }\n    vec3 col = mix( 0.6*vec3(0.6,0.9,1.0), sky, gra );\n\n    //-----------------------------------------------------\n\t// bender\n    //-----------------------------------------------------\n\n    // raymarch\n    vec4 tmat  = raycast( ro ,rd );\n    if( tmat.y>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\n        // materials\n\t\tvec3 mate = vec3(0.0);\n\t\tif( tmat.y<0.5 )\n\t\t{\n\t\t\tmate = vec3(0.1,0.12,0.15);\n            mate *= smoothstep( -0.95, -0.94, sin(40.0*tmat.z) );\n\t\t}\n\t\telse if( tmat.y<1.5 )\n\t\t{\n\t\t\tmate = vec3(0.13,0.17,0.24);\n            mate *= clamp( 200.0*udRoundBox( pos-vec3(0.0,1.55,0.35), vec3(0.35,0.1,0.5)-0.04, 0.1 ), 0.0, 1.0 );\n\t\t}\n\t\telse if( tmat.y<2.5 )\n\t\t{\n\t\t\tmate = vec3(0.7,0.68,0.4);\n            vec3 qos = vec3( abs(pos.x), pos.yz );\n            mate *= clamp( 100.0 * sdBox(qos-vec3(0.18+0.05*sign(pos.x),1.55+0.05,0.5),vec3(0.04,0.04,0.5) ), 0.0, 1.0 );\n            float teeth = min( sdBox(qos-vec3(0.0,1.08,0.5),vec3(1.0,0.01,0.3) ),\n                               sdBox(qos-vec3(0.0,0.92,0.5),vec3(1.0,0.01,0.3) ) );\n            teeth = min( teeth, sdBox( vec3(mod(qos.x+0.09,0.18),qos.yz) -vec3(0.0,1.0,0.5),vec3(0.01,0.3,0.3) ) );\n            mate *= clamp( 100.0 * teeth, 0.0, 1.0 );\n\t\t}\n\t\telse if( tmat.y<3.5 )\n\t\t{\n            mate = vec3(0.25,0.29,0.34) * tmat.z;\n\t\t}\n        \n\t\t// lighting \n        const vec3 lig = normalize(vec3(0.8,0.6,0.3));\n\t\tfloat dif = max(dot(nor,lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.01*nor, lig, 0.0005, 32.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 5.0 );\n        vec3 brdf = vec3(0.0);\n        brdf += 1.5*sha;\n\t\tbrdf += 0.75;\n        brdf += 0.7*smoothstep(0.1,0.15,fre*sha);\n        \n\t\t// surface-light interacion\n\t\tcol = mate*brdf;\n\t}\n\n    // cartoon edges\n    float edge = max(iResolution.x/500.0,2.0);\n    vec3 ro2, rd2; generateRay( ro2, rd2, po, ta, fragCoord+vec2(edge,0.0) );\n    vec3 ro3, rd3; generateRay( ro3, rd3, po, ta, fragCoord+vec2(0.0,edge) );\n    vec3 ro4, rd4; generateRay( ro4, rd4, po, ta, fragCoord+vec2(edge,edge) );\n    vec4 tmat2 = raycast(ro2,rd2);\n    vec4 tmat3 = raycast(ro3,rd3);\n    vec4 tmat4 = raycast(ro3,rd4);\n    col *= min( 1.0 - 10.0*max(max(\n      abs(tmat.w-tmat2.w),\n      abs(tmat.w-tmat3.w)),\n      abs(tmat.w-tmat4.w)), 1.0 );\n\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n    \n\t// vignetting\n\tvec2 q = fragCoord / iResolution.xy;\n    col *= 0.4 + 0.6*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}