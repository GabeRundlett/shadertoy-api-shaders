{
    "Shader": {
        "info": {
            "date": "1717837822",
            "description": "cineshader",
            "flags": 0,
            "hasliked": 0,
            "id": "43V3zG",
            "likes": 16,
            "name": "magic circles",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nnew",
            "viewed": 419
        },
        "renderpass": [
            {
                "code": "const float PI = acos(-1.);\nconst float TAU = PI * 2.;\n\n#define saturate(x) clamp(x,0.,1.)\n#define _tail2x(p,n) (mod(p,2.)-1.)\n#define time iTime\n#define resolution iResolution.xy\nfloat Hash( vec2 p, in float s ){\n    return fract(sin(dot(vec3(p.xy,10.0 * abs(sin(s))),vec3(27.1,61.7, 12.4)))*273758.5453123);\n}\n\nfloat noise(in vec2 p, in float s){\n  vec2 i = floor(p);\n  vec2 f = fract(p);\n  return mix(\n    mix(Hash(i + vec2(0.,0.), s), Hash(i + vec2(1.,0.), s),f.x),\n    mix(Hash(i + vec2(0.,1.), s), Hash(i + vec2(1.,1.), s),f.x),f.y) * s;\n}\n\nfloat fbm(vec2 p){\n  float v = 0.0;\n  v += noise(p*34., .1);\n  v += noise(p*20., .04);\n  return v;\n}\n\nvec2 mPolar(vec2 p){\n  float a = atan(p.y, p.x);\n  float r = length(p);\n  return vec2(a, r);\n}\n\nvec2 tailY2x(vec2 p,float n){p*=n;return vec2(p.x,_tail2x(p.y,n));}\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n\nhighp float rand(vec2 p){\n  highp float a = 12.9898;\n  highp float b = 78.233;\n  highp float c = 43758.5453;\n  highp float dt= dot(p ,vec2(a,b));\n  highp float sn= mod(dt,3.14);\n  return fract(sin(sn) * c);\n}\n\n// signed distance\nfloat sd(float d,float r){return r-d;}\nfloat sd(float d){return 1.-d;}\n\n// ease\nfloat o2(float t){t=1.-t;return 1.-t*t;}\nfloat oN(float t,float n){return 1.-pow(1.-t,n);}\n\nfloat dot2(vec2 p){return dot(p,p);}\n\nfloat ring(vec2 p,float t){\n  float alpha = fract(-t);\n  float l =saturate(.02/abs(sd(length(p),1.1+fract(t)))*alpha);\n  vec2 p4=mPolar(p*(.57-oN(t,1.3)*.28)).yx;\n  p4.x-=.65;\n  l+= saturate(abs(1./((p4.x + fbm( p4 + vec2(sin(t*.2),t*0.1))) * 50.0))*sd(dot2(tailY2x(p4+vec2(.1,0.),12.)),.9)*alpha);\n  return l;\n}\n\nfloat render(vec2 p){\n  p*=rot(time);\n  p*=2.;\n  float tt = time*.75;\n  float l2 = ring(p,o2(fract(tt)));\n  l2+=ring(p*rot(PI/3.),o2(fract(tt+.5)));\n  return l2;\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \n\n// glow + fill\nfloat gf(float d,float r){return r/d;}\nfloat gf(float d){return 1./d;}\n\nfloat fill_na(float d){return step(0.,d);}\nfloat fill(float d){return smoothstep(0.,0.01,d);}\nfloat stroke(float d,float w){return 1.-smoothstep(w,w+0.01,abs(d));}\nfloat strokeInner(float d,float w){return stroke(d-w,w);}\nfloat strokeOuter(float d,float w){return stroke(d+w,w);}\n\nfloat lSquare(vec2 p){p = abs(p);return max(p.x,p.y);}    \n\nfloat lPoly(vec2 p,float n){\n  float a = atan(p.x,p.y)+PI;\n  float r = TAU/n;\n  return cos(floor(.5+a/r)*r-a)*length(p)/cos(r*.5);\n}\n\nfloat strokeStar(vec2 p,float n,float w){\n  float l =strokeInner(sd(lPoly(p,n*.5)),w);\n  l+=strokeInner(sd(lPoly(mod(n,2.)!=0.?vec2(-p.x,p.y):p*rot(TAU/n),n*.5)),w);\n  return l;\n}\n\nvec2 mPoly(vec2 p,float n,float s){\n  float r = TAU / n;\n  float a = floor(atan(p.y,p.x)/r)*r+r*.5;\n  return (vec2(cos(a),sin(a))*s-p)*rot(-a-PI*.5);\n}\n\nfloat wsaw(float x){return fract(x*.5+.5)*2.-1.;}\nfloat wtri(float x){return abs(2.*fract(x*.5-.25)-1.)*2.-1.;}\nfloat utri(float x){return abs(2.*fract(x*.5-.5)-1.);}\nfloat wtrz(float x,float w){return clamp(wtri(x*2.)*w,-1.,1.);} // 台形波 trapezoidal wave\n\n// ease\n\nvec2 mSimplePerspective(vec2 p){p.y+=.2;p.y*=3.;return p;}\n\nfloat ring2(vec2 p,float t){\n  float alpha =    fract(-t);\n  float l = 0.;\n  vec2 p3=mPoly(p*rot(PI*.5),10.,1.);\n  l+=saturate(gf(abs(p3.x),.03)*fill(sd(length(p),1.1+fract(t)))*(1.-fill(sd(length(p),.9+fract(t))))*alpha);\n \n  l+=saturate(.02/abs(sd(length(p),1.1+fract(t)))*alpha);\n  vec2 p4=mPolar(p*(.57-oN(t,1.3)*.28)).yx;\n  p4.x-=.65;\n  l+= saturate(abs(1./((p4.x + fbm( p4 + vec2(sin(t*.2),t*0.1))) * 50.0))*sd(dot2(tailY2x(p4+vec2(.1,0.),12.)),.9)*alpha);\n  return l;\n}\n\nfloat summoningCircle(vec2 p){\n  float l=0.;\n  l+=fill(sd(lSquare(p*rot(PI/3.*1.5)*vec2(100.,1.)),1.));\n  l+=fill(sd(lSquare(p*rot(PI/3.*2.5)*vec2(100.,1.)),1.));\n  l+=fill(sd(lSquare(p*rot(PI/3.*3.5)*vec2(100.,1.)),1.));\n  l=saturate(l);\n  l-=fill(sd(lPoly(p,3.)));\n  l=saturate(l);\n  float r = atan(p.y,p.x);\n  l+=strokeOuter(sd(length(p),.98),.008+wtrz(r/TAU*3.,12.)*.005);\n  l+=strokeInner(sd(length(p),.95),.005);\n  l+=strokeInner(sd(lPoly(p,3.)),.01);\n  l+=strokeInner(sd(lPoly(p,3.),.88),.02);\n  l+=strokeInner(sd(lPoly(p,6.),.53),.01);\n  vec2 q=mPoly(p*rot(PI*.5),3.,.5);\n  l+=fill(sd(lPoly(q,3.),.3));\n  vec2 q2=mPoly(p*rot(PI/3.+PI*.5),3.,.7);\n  l+=fill(sd(lPoly(q2,3.),.1));\n  l+=strokeInner(sd(lPoly(p*rot(PI),3.),.5),.02);\n  l+=fill(sd(length(p),.05));\n  vec2 q3=mPoly(p*rot(PI*.5),3.,1.);\n  l=saturate(l);\n  l-=fill(sd(length(q3),.2));\n  l=saturate(l);\n  l+=strokeInner(sd(length(q3),.18),.005);\n  l+=strokeInner(sd(length(q3),.15),.005);\n  l+=strokeStar(q3*rot(PI)*7.,6.,.1);\n  return l;\n}\n\nfloat render2(vec2 p){\n  //p=mSimplePerspective(p);\n  p*=rot(-time);\n  p*=2.;\n  float tt = -time*.75;\n  float l2 = ring(p,o2(fract(tt)));\n  l2+=ring(p*-rot(PI/3.),o2(fract(tt+.5)));\n  float l=0.;\n  l = summoningCircle(p*=rot(floor(time*12.)/3.));\n  return l2;\n}\n#define white vec4(1.0)\n#define black vec4(0.0, 0.0, 0.0, 1.0)\n#define blue  vec4(0.0, 0.3, 1.0, 1.0)\n\n#define edge 0.01\n\n\nuniform vec2 mouse;\n\n\n\n\nfloat inCircle(vec2 pt, vec2 center, float radius, float line)\n{\nreturn smoothstep(radius + line/2., radius, distance(pt, center)) -\n      smoothstep(radius, radius - line/2., distance(pt, center));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / max(resolution.x, resolution.y);\n  vec4 color = black;\nvec2 p3 = (2. * gl_FragCoord.xy - resolution.xy) / resolution.x;\nfloat t = time*0.5;\nfor (int i = 0; i < 8; i ++){\nfloat offset = sin(t+sin(t));\np *= rot(sin(t+offset));\nfloat a = atan(p3.y, p3.x);\nfloat f = sin(sin(t*0.1)+1.0 * a);\nvec2 center = vec2(0.0, offset*0.5);\ncolor += blue * inCircle(p, center, 0.35 + 0.05 * f, edge);\n}\n  float l=0.;\n  l = (render(p)+render(p+vec2(0.,1./min(resolution.x, resolution.y))))*.5;\n  vec2 p2 = (gl_FragCoord.xy * 2.0 - resolution) / 200.;\n  float l2=0.;\n  l2 = (render2(p2)+render2(p2+vec2(0.,1./min(resolution.x, resolution.y))))*.5;\n  fragColor= vec4(l2*vec3( 0.75, 0.5, .5 )*2.+color.xyz, 1.0);\n  fragColor+= vec4(l*vec3( 0.75, 0.5, .05 )*2., 1.0);\n  p *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n    fragColor+= vec4(happy_star(p, anim) * vec3(0.55,0.5,0.55)*0.2, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}