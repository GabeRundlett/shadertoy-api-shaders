{
    "Shader": {
        "info": {
            "date": "1676929959",
            "description": "Simple sphere rendering using rays.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ddc3R8",
            "likes": 1,
            "name": "Simple Sphere With Rays",
            "published": 3,
            "tags": [
                "spheres",
                "learn"
            ],
            "usePreview": 0,
            "username": "sagefarrenholz",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "// Pi\n#define PI 3.14159256\n\n// FOV for both h and v\n#define FOV 135.\n\n// Near plane distance\n#define NP 10.\n\n// Sphere\n#define S_R 20.\n#define S_C vec3(15.,5.,40.)\n\n// Turn sensisitivity\n#define MOUSE_SEN 5\n\n// Point light loc\n#define LI vec3(5.,0.,35.)\nstruct Hit {\n    bool hit;\n    float dist;\n    vec3 dir;\n    vec3 nor;\n};\n\nHit sphereInter(vec3 ray_dir, vec3 cen, float rad) {\n    vec3 neg_cen = (-1.*cen);\n    \n    float inter = pow(dot(ray_dir, neg_cen),2.) - (dot(neg_cen,neg_cen) - pow(rad,2.));    \n    float tmp = -1.*(dot(ray_dir,neg_cen));\n    float sqr_inter = sqrt(inter);\n    float d = max(tmp - sqr_inter,tmp + sqr_inter);\n    vec3 nor = normalize(ray_dir - cen);\n    \n    return Hit(d >= 0., d, d*ray_dir, nor);\n}\n\nfloat diffuse(vec3 light, vec3 point, vec3 normal) {\n    vec3 light_dir = normalize(light - point);\n    return max(dot(normal, light_dir),0.);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - (iResolution.xy / 2.))/iResolution.y;\n    \n    // Normalized mouse coord\n    vec2 mv = iMouse.xy / iResolution.xy;\n     \n    // View plane coordinate\n    vec2 win = NP*tan(FOV/2.*PI/180.)*uv;\n        \n    // Unit ray direction\n    vec3 ray_dir = normalize(vec3(win,NP));\n    \n    Hit sphere_hit = sphereInter(ray_dir, S_C, S_R);\n    \n    float diff = 4.*diffuse(LI, sphere_hit.dir, sphere_hit.nor);\n    \n    vec3 light_dir = normalize(LI - sphere_hit.dir);\n    vec3 halfv = normalize(light_dir - sphere_hit.dir);\n    \n\n    // Specular lighting\n    float spec = .8*pow(dot(halfv, sphere_hit.nor),50.);\n\n    // Distance based illumination value\n    float illu = (diff + spec) / (.2*length(LI-sphere_hit.dir)) + 0.015;\n   \n    vec3 col = vec3(1.0);\n    col *= mix(vec3(0.0), vec3(0.0, 1.0, 1.0), illu);\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}