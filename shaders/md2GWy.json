{
    "Shader": {
        "info": {
            "date": "1668152104",
            "description": "key W to restart\n3D form of https://www.shadertoy.com/view/7ldGzl\nbut this does not damps the divergence of velocity field",
            "flags": 48,
            "hasliked": 0,
            "id": "md2GWy",
            "likes": 22,
            "name": "3D particles without particles",
            "published": 3,
            "tags": [
                "graph",
                "function",
                "plot",
                "helper"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec3 camPos = step(iMouse.z,.5)*vec3(cos(sin(iTime*.11)*3.),cos(iTime*.7)*.3,sin(sin(iTime*.15)*3.))*3.;\n         camPos+= step(.5,iMouse.z)*vec3(cos(m.x),m.y,sin(m.x))*3.;\n    vec3 camDir = -normalize(camPos);\n    \n    mat3 mtx;\n    mtx[0] = normalize(vec3(camDir.z,0.,-camDir.x));\n    mtx[1] = cross(camDir,mtx[0]);\n    mtx[2] = camDir;\n    vec3 ray = mtx*normalize(vec3(u,2.));//direction of ray from camera\n    vec3 ray2= 1./ray;\n    vec3 ray3= step(vec3(0),ray)*2.-1.;\n    \n    float x2 = iResolution.x;\n    float x3 = iResolution.x*iResolution.y+.001;\n          x3 = pow(x3,1./3.);\n          x3 = floor(x3);\n    float x3d= 2./x3;\n    float x4 = x3*2.;//max voxels the ray will transverse inside simulationCube\n    \n        vec3  inc  = step(camPos,vec3( 1))*  //inside cube\n                     step(vec3(-1),camPos);\n        vec3  tMin = (vec3(-1)-camPos)*ray2;\n        vec3  tMax = (vec3( 1)-camPos)*ray2;    ray2 = abs(ray2);\n        vec3  t1 = min(tMin, tMax);\n        vec3  t2 = max(tMin, tMax);\n        float tN = max(max(t1.x, t1.y), t1.z);//length of ray between camera and simulationCube\n        float tF = min(min(t2.x, t2.y), t2.z);\n              tF = float(tF>tN);\n              \n    vec3 p = camPos+ray*tN*(1.-inc.x*inc.y*inc.z)*1.001;//collision position of ray on simulationCube \n         p = (p*.5+.5)*x3;      //transform to voxels coordinates, range 0 to x3\n    fragColor = vec4(0);\n    for(float i=0.; i<x4; ++i)\n    {\n        vec3  g = (1.-fract(p*ray3))*ray2;\n        float l = min(min(g.x,g.y),g.z);\n        fragColor += texelFetch(iChannel0, ivec2(c32(floor(p),x2,x3)), 0)*l;\n        p+= ray*l;\n        \n        vec3 o = abs(p*x3d-1.);\n        if(o.x>=1.||o.y>=1.||o.z>=1.){break;}\n    }\n    fragColor = fragColor*vec4(.02,.02,.02,1)+fragColor.wwww*.3;\n    //fragColor = fragColor.wwww*.7;\n    fragColor*= tF;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    float x2 = iResolution.x;\n    float x3 = iResolution.x*iResolution.y+.001;\n          x3 = pow(x3,1./3.);\n          x3 = floor(x3);\n    vec3  u3 = c23(floor(u), x2, x3);\n    \n    vec3  r = vec3(0);\n    vec4  a = texelFetch(iChannel0, ivec2(u), 0);\n    float z = 4.;//kernel convolution size\n    for(float i=-z; i<=z; ++i){\n    for(float j=-z; j<=z; ++j){\n    for(float k=-z; k<=z; ++k){\n        vec3 ijk = vec3(i,j,k);\n        float l = length(ijk);\n        if((i==0.&&j==0.&&k==0.) || l>z+.1){continue;}\n      //vec3  c  = normalize(ijk);\n        vec3  um = mod(u3+ijk,vec3(x3));\n              um = floor(um);\n        vec4  a2 = texelFetch(iChannel0, ivec2(c32(um,x2,x3)), 0);\n        vec4  b  = a2-a;\n        r += ijk*b.w*cos(l*2.1)*exp(-l*l*.25);\n    }}}\n    fragColor = vec4(r,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 vectorField(vec3 p)\n{\n    return +p.yxz*vec3(-1,1,0)*exp(-dot(p,p)*9.)*.0;\n}\nvoid mainImage(out vec4 fragColor, in vec2 u)\n{\n    float x2 = iResolution.x;\n    float x3 = iResolution.x*iResolution.y+.001;\n          x3 = pow(x3,1./3.);\n          x3 = floor(x3);\n    vec3  u3 = c23(floor(u), x2, x3);\n\n    vec3 m = +vectorField(floor(u3)*2./x3-1.)\n             +texelFetch(iChannel0, ivec2(u), 0).xyz*1. //mass momentum\n             +texelFetch(iChannel1, ivec2(u), 0).xyz;   //mass force on mass\n    float s = 0.;\n    float z = 2.;//kernel convolution size\n    for(float i=-z; i<=z; ++i){\n    for(float j=-z; j<=z; ++j){\n    for(float k=-z; k<=z; ++k){\n        vec3 ijk = vec3(i,j,k);\n        if(dot(ijk,ijk)>z*z+.1){continue;}\n        vec3 c = m+ijk;\n        s += exp(-dot(c,c));\n    }}}\n    if(s!=0.){s = 1./s;}\n    fragColor = vec4(m,s);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    float x2 = iResolution.x;\n    float x3 = iResolution.x*iResolution.y+.001;\n          x3 = pow(x3,1./3.);\n          x3 = floor(x3);\n    vec3  u3 = c23(floor(u), x2, x3);\n\n    vec3  v = vec3(0);\n    float s = 0.;\n    float z = 2.;//kernel convolution size\n    for(float i=-z; i<=z; ++i){\n    for(float j=-z; j<=z; ++j){\n    for(float k=-z; k<=z; ++k){\n        vec3 ijk = vec3(i,j,k);\n        if(dot(ijk,ijk)>z*z+.1){continue;}\n        vec3  um = mod(u3+ijk,vec3(x3));\n              um = floor(um);\n        ivec2 u2 = ivec2(c32(um,x2,x3));\n        vec4  t = texelFetch(iChannel0, u2, 0);\n        vec4  m = texelFetch(iChannel1, u2, 0);\n        vec3  c = m.xyz-ijk;\n        float w = t.w*m.w*exp(-dot(c,c));\n        v += w*m.xyz;\n        s += w;\n    }}}\n    float dv = 1./s; if(s==0.){dv = 0.;}//avoid division by zero\n    fragColor = vec4(v*dv,s);\n    float keyW = texture(iChannel2, vec2(87.5/256.,.25)).x;\n    if(iFrame==0||keyW>0.)\n    {\n        vec3 uv = (floor(u3)/x3-.5)*3.;\n        fragColor = vec4(0,0,0,.1)*exp(-dot(uv,uv));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 c23(vec2 u, float x2, float x3)//transform 2D to 3D coordinates\n{\n    float i = dot(u,vec2(1,x2))+.5;\n    return vec3(mod(i,x3), mod(i/x3,x3), i/(x3*x3));\n}\nvec2 c32(vec3 u, float x2, float x3)//transform 3D to 2D coordinates\n{\n    float i = dot(u,vec3(1, x3, x3*x3))+.5;\n    return vec2(mod(i,x2), i/x2);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}