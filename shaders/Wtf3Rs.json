{
    "Shader": {
        "info": {
            "date": "1601068687",
            "description": "an sdf, a combination of spheres and a box",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtf3Rs",
            "likes": 3,
            "name": "curvy cross",
            "published": 3,
            "tags": [
                "sdf",
                "distance",
                "cross",
                "exact"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "float pin(vec2 p, float h, float r0, float r1) {\n    \n    p = abs(p);\n    \n    if (p.x > p.y) p = p.yx;\n    \n    vec2 q;\n    \n    vec2 b = vec2(r0,0);\n    q = p-b;\n    float pin = -length(q)+r1;\n    \n    vec2 a = vec2(r0-sqrt(r1*r1-h*h),h);\n    \n    \n    q = p-a;\n    \n    \n    vec2 c = a-b;\n    c = vec2(c.y,-c.x);\n    float f = min(q.x,dot(q,c));\n    if (f > 0.0) {\n        // corners\n        pin = length(q);\n    }\n    \n    float r = r0/sqrt(2.0);\n    float e = r0*0.5-sqrt((r1*r1-r*r))*sqrt(0.5);\n    \n    c = p-b;\n    c = vec2(c.y,-c.x);\n    \n    float d = dot(p-e,c);\n    \n    if (d < 0.0) {\n        pin = -length(p-e);\n    }\n    \n    // outer box\n    pin = max(pin,p.y-h);\n    \n    return pin;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = 2.0;\n    vec2 uv = scale*(fragCoord*2.0-iResolution.xy)/iResolution.y;\n    float aa = iResolution.y/scale*0.4;\n    \n    float len = 10000.0;\n    \n    len = min(pin(uv, 0.9+sin(iTime)*0.1,1.8+sin(iTime*0.89)*0.1,1.6+sin(iTime*0.97)*0.1),len);\n    \n    vec3 col = vec3(1.0) - sign(len)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-2.0*abs(len));\n    col *= 0.8 + 0.2*cos(120.0*abs(len));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,1.0/aa,abs(len)) );\n    \n    //vec2 a = fract(uv*5.0);\n    //col += max(max(a.x,a.y)-0.8,0.0)*5.0;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}