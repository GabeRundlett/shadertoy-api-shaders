{
    "Shader": {
        "info": {
            "date": "1391461640",
            "description": "Compares the classic float to RGBA8 encoding with the simpler and more accurate method of just linearly mapping the value to a 32 bit integer.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldj3zG",
            "likes": 26,
            "name": "Pack and Unpack",
            "published": 3,
            "tags": [
                "utility",
                "pack",
                "unpack"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2197
        },
        "renderpass": [
            {
                "code": "// Better way to encode [0,1] depth into a PNG?\n//\n// Left  : traditional three.js style depth_to_rgba encoding and decoding\n// Middle: uniform scaling [0,1] float to [0,2^32-1] 32 bit integer\n// Right : interpreting IEEE754 bits as 32 bit integer\n//\n// Red shows the parts of the signal where the rountrip from depth->RGBA->depth is not bit exact.\n// Note the alternatives to the oldschool method are better and simpler to implement.\n//\n// Here I'm returning the {r,g,b,a} quadruplet as a 32 bit integer (\"uint\" is \"uint32_t\")\n//\n// Set Test to 1 in line 17 to test other [0,1] depth signals\n\n\n// 0: linear gradient\n// 1: sine waves\n#define TEST 0\n\n//-------------------------------------------------------------------------\n// \nuint pack_depth_to_rgba_old( in float depth )\n{\n    // https://git.corp.adobe.com/transmute/transmute/blob/3363701a2c5b0244195d36cff8b9bd0da0e3e5fe/nodes/Clio/clio.cpp#L189\n    float r_frac = fract(255.0*255.0*255.0*depth);\n    float g_frac = fract(255.0*255.0*depth);\n    float b_frac = fract(255.0*depth);\n    float a_frac = fract(depth);\n    uint  r = uint(r_frac*255.0);\n    uint  g = uint((g_frac-r_frac/255.0)*255.0);\n    uint  b = uint((b_frac-g_frac/255.0)*255.0);\n    uint  a = uint((a_frac-b_frac/255.0)*255.0);\n    return (a<<24) | (b<<16) | (g<<8) | r;\n}\n\nfloat unpack_rgba_to_depth_old( in uint rgba )\n{\n    vec4 x = vec4((uvec4(rgba)>>uvec4(0,8,16,24))&255u)/255.0;\n    return dot(x, vec4(1.0/(255.0*255.0*255.0), 1.0/(255.0*255.0), 1.0/255.0, 1.0));\n  //return dot(x, vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0));\n}\n\n//-------------------------------------------------------------------------\n\nuint pack_depth_to_rgba_new( in float value )\n{\n    return uint( float(0xffffffffu)*value );\n}\nfloat unpack_rgba_to_depth_new( in uint value )\n{\n    return float(value)/float(0xffffffffu);\n}\n\n//-------------------------------------------------------------------------\n\nuint pack_depth_to_rgba_best( in float value )\n{\n    /* C++    */  // return *((uint32_t*)&value);\n    /* C++ 20 */  // return std::bit_cast<std::uint32_t>(value);\n    /* GLSL   */     return floatBitsToUint(value);\n}\nfloat unpack_rgba_to_depth_best( in uint value )\n{\n    /* C++  */    // return *((float*)&value);\n    /* C++ 20 */  // return std::bit_cast<float>(value);\n    /* GLSL */       return uintBitsToFloat(value);\n}\n//-------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord/iResolution.xy;\n\n    // create a simulated depth buffer (a ramp or a sine wave pattern)\n    #if TEST==0\n    float depth = p.y;\n    #elif TEST==1\n    float depth = 0.5 + 0.5*sin(p.x*50.0 + sin(p.y*50.0) )*sin(p.y*40.0 + sin(p.x*40.0+iTime) );\n    #endif\n    \n\t// pack float to 8 bit RGBA\n\tuint rgba = (p.x<0.33) ? pack_depth_to_rgba_old( depth ) :\n                (p.x<0.67) ? pack_depth_to_rgba_new( depth ) :\n                             pack_depth_to_rgba_best( depth );\n                             \n    // unpack from an 8 bit RGBA to a float\t \n\tfloat decoded_depth = (p.x<0.33) ? unpack_rgba_to_depth_old( rgba ) : \n                          (p.x<0.67) ? unpack_rgba_to_depth_new( rgba ) :\n                                       unpack_rgba_to_depth_best( rgba );\n\n    // show the decoded depth buffer\n\tfragColor = vec4(vec3(decoded_depth),1.0);\n\n    // every second, show bit-exact roundtrip errors in red\n    if( cos(3.1415927*iTime)>0.0 )\n    {\n        if( floatBitsToUint(decoded_depth) != floatBitsToUint(depth) )\n        {\n            fragColor.xyz = vec3(1.0,0.0,0.0);\n        }\n    }\n    \n    // show two separating lines between the three bands\n    fragColor.xyz *= smoothstep(0.0025,0.0050,abs(abs(p.x-0.5)-0.17));\n}    \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}