{
    "Shader": {
        "info": {
            "date": "1682621479",
            "description": "perverted \"different noise\" - use mouse to take over rotate/zoom and explore the nervous breakdown ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "dlcGzB",
            "likes": 5,
            "name": "psycho-delic mind fault",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "// Fork of \"different noise\" by WhiteWalrus518. https://shadertoy.com/view/mt2SDy\n// 2023-04-27 18:38:06\n\n#define res iResolution\n#define t iTime\n\n// simple mouse rotate and zoom for shader\n#define pi 3.14159265359 \n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(0.5*sin(iTime/8.0),0.2+.3*cos((iTime/2.))) : iMouse.xy/iResolution.xy;\n    uv.xy *= r2d(-(mouse.x)*pi*2.);\n    uv *= (1./(10.0*mouse.y));\n    return uv;\n}\n    \nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat r(float a){\n    return random2(vec2(a, 3.14159)).x;\n}\n\nvec2 randcis(vec2 seed, float time){\n    vec2 ra = random2(seed);\n    vec2 rb = random2(ra + seed);\n    vec2 rc = random2(rb + seed);\n    return vec2(ra.x * sin(pi * (rb.x * time + rc.x)),\n                ra.y * cos(pi * (rb.y * time + rc.y)));\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/res.y;\n    \n \n    \n    vec2 st = uv - vec2(res.x/res.y, 1.0) * 0.5;\n    \n    st = mouseRotZoom(st);\n\n  \n    st *= 25.0;\n    \n    \n\n    vec2 cor = floor(st);\n    \n    float minda =  999.0;\n    float mindb = 1000.0;\n    float mindc = 1001.0;\n    for(int x = -2; x < 3;x++){\n        for(int y = -2; y < 3; y++){\n            vec2 test = cor + vec2(float(x), float(y));\n            vec2 centre = test + random2(test) + randcis(test, t);\n            float dist = length(centre - st);\n            if(dist < minda){\n                mindc = mindb;\n                mindb = minda;\n                minda = dist;\n            }else{\n                if(dist < mindb){\n                    mindc = mindb;\n                    mindb = dist;\n                }\n                else{\n                    if(dist < mindc){\n                        mindc = dist;\n                    }\n                }\n            }\n        }\n    }\n    \n    \n    // Time varying pixel color\n    //vec3 col = vec3(1.0);\n    vec3 col = hsb2rgb( vec3(max(minda,mindb)*uv.x/st.y, mindb*0.8, 0.9) );\n    \n    if(mindc - mindb < (20.0 * (1.0 + sin(t * pi * 0.3)) - length(st))* 0.01 ){\n        //col = vec3(0.0);\n        col = hsb2rgb( vec3(minda*st.y*uv.x*0.3/*/uv.x*/, mindc*0.8, 0.9) );\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}