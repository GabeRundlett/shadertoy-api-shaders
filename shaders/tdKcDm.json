{
    "Shader": {
        "info": {
            "date": "1603055441",
            "description": "as the line sweeps across the image it triggers a video hold.  Move while it's doing so to produce weird distorted blobby shapes.\n\nAs seen on TikTok.",
            "flags": 34,
            "hasliked": 0,
            "id": "tdKcDm",
            "likes": 6,
            "name": "video hold effect",
            "published": 3,
            "tags": [
                "simple",
                "video",
                "fun",
                "effect"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 754
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    float sweep = get_sweep_uv(iTime);\n    sweep *= iResolution.x;\n    \n    if (abs(fragCoord.x - sweep) < 5.0) {\n    \tfragColor = vec4(1.0, 0.7, 0.0, 1.0);\n        return;\n    }\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float sweep = get_sweep_uv(iTime);\n    sweep = max(sweep, 0.0);\n    \n    vec4 hold_color = texture(iChannel0, uv);\n    vec4 vid_color = texture(iChannel1, vec2(1. - uv.x, uv.y));\n    fragColor = mix(vid_color, hold_color, step(uv.x, sweep));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float sweep_period = 20.0;\nconst float pre_sweep_pause = 2.0;\nconst float post_sweep_pause = 10.0;\n\nfloat get_sweep_uv(in float time) {\n\tfloat result = (mod(time, sweep_period + pre_sweep_pause + post_sweep_pause) -\n           pre_sweep_pause) /\n        (sweep_period);\n    result = max(0.0, min(result, 1.0));\n    return result;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}