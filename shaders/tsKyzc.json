{
    "Shader": {
        "info": {
            "date": "1603463056",
            "description": "Catmull Rom experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "tsKyzc",
            "likes": 6,
            "name": "Catmull-Rom",
            "published": 3,
            "tags": [
                "catmull"
            ],
            "usePreview": 0,
            "username": "henrmota",
            "viewed": 491
        },
        "renderpass": [
            {
                "code": "highp vec2 points[5];\n\nconst mat4 catmullMatrix =  mat4(\n    0., 2., 0., 0., \n   -1.,0., 1., 0.,\n    2., -5., 4., -1,\n   -1, 3, -3, 1\n);\n\nvec2 getPoint(float t, int index) {\n   vec2 p1 = points[index];\n   vec2 p2 = points[(index+1) % points.length()];\n   vec2 p3 = points[(index+2)% points.length()];\n   vec2 p0 = points[(index - 1 + points.length()) % points.length()];\n    \n   mat4x2 pointsMat;\n   pointsMat[0] = p0;\n   pointsMat[1] = p1;\n   pointsMat[2] = p2;\n   pointsMat[3] = p3;\n\n   float t2 = t*t;\n   float t3 = t2 * t;\n   \n   return pointsMat * catmullMatrix * vec4(1., t, t2, t3) * 0.5;\n}\n\nfloat catrom(vec2 uv, int index) {\n   float onePixel = 1./iResolution.y;\n   float d = 100.;\n    \n   for(float t=0.; t<=1.; t+=onePixel*5.) {\n     vec2 p = getPoint(t, index);\n     d = min(d, distance(uv, p));\n   }\n   \n   return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    points = vec2[](\n    \tvec2(-0.5, 0.5 * (sin(iTime) * 0.5 + 0.5)), \n   \t \tvec2(-0.25, 0.2 * abs(sin(iTime))),\n        vec2(-0.15 * abs(sin(iTime)), 0.2 * abs(sin(iTime))),\n    \tvec2(mouse.x, mouse.y), \n    \tvec2(0.5,-0.2 * (sin(iTime) * 0.5 + 0.5))\n\t);\n    \n    float t = mod(iTime, float(points.length()));\n    float t2 = mod(0.4 * iTime, float(points.length()));\n    \n    float onePixel = 1./iResolution.y;\n\tvec3 col = vec3(0);\n    float m = 0.;\n    for(int i=0; i < points.length(); i++) {\n       float pixel = 10.*onePixel;\n       m+= 0.002/distance(uv, points[i]);\n    }\n\n    float pixel = 20.*onePixel;\n    vec2 point = getPoint(fract(t), int(floor(t)));\n    col += 0.02/distance(uv, point) * vec3(0.12, 0.04, 0.5);\n    \n    point = getPoint(fract(t2), int(floor(t2)));\n    col += 0.02/distance(uv, point) * vec3(0.12, 0.2, 0.04);\n    \n    pixel = 4.*onePixel;\n    \n    col.g += m;\n    for(int i = 0; i < points.length(); i++) {\n    \tcol += 0.0005/catrom(uv, i) *  vec3(0.5, 0.54, 0.32);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}