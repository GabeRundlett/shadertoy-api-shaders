{
    "Shader": {
        "info": {
            "date": "1725017999",
            "description": "the next level version. ",
            "flags": 0,
            "hasliked": 0,
            "id": "lcBfDm",
            "likes": 0,
            "name": "OctoTHE4th",
            "published": 3,
            "tags": [
                "spiralarmsdancing"
            ],
            "usePreview": 0,
            "username": "nilberlin",
            "viewed": 73
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Verbesserte Audio-Analyse\n    float bassFreq = texture(iChannel0, vec2(0.1, 0.1)).r;\n    float midFreq = texture(iChannel0, vec2(0.5, 0.1)).r;\n    float highFreq = texture(iChannel0, vec2(0.9, 0.1)).r;\n    float totalVolume = (bassFreq + midFreq + highFreq) / 3.0;\n    \n    // Dynamische Zeitsteuerung basierend auf der Musik\n    float timeScale = 0.75 + totalVolume * 2.0;\n    float time = iTime * timeScale;\n    \n    // Richtungsänderung basierend auf Frequenzen\n    vec2 direction = vec2(\n        cos(time * 0.5 + bassFreq * 10.0),\n        sin(time * 0.7 + highFreq * 8.0)\n    );\n    uv += direction * 0.1 * totalVolume;\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    // Octopus-Körper und Arme mit dynamischer Anpassung\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    float armCount = 8.0 + sin(time) * 2.0 + midFreq * 10.0; // Armanzahl reagiert auf Mittenfrequenz\n    float armSpeed = 7.0 + highFreq * 20.0; // Armgeschwindigkeit reagiert auf Hochfrequenz\n    float armPattern = sin(armCount * angle + time * armSpeed - radius * 20.0 + mouse.x * 10.0);\n    \n    // Verbesserte Neon-Dots für die Tentakel\n    float dotFrequency = 80.0 + bassFreq * 100.0; // Dot-Frequenz reagiert auf Bass\n    float dotPattern = smoothstep(0.01, 0.02, cos(radius * dotFrequency + armPattern * 8.0 + time * 2.0));\n    \n    // Komplexe Farbberechnung mit Audio-Reaktivität\n    vec3 color = vec3(\n        0.5 + 0.5 * sin(armPattern * 10.0 + time + bassFreq * 15.0),\n        0.5 + 0.5 * sin(armPattern * 8.0 + time + midFreq * 12.0),\n        0.5 + 0.5 * sin(armPattern * 12.0 + time + highFreq * 18.0)\n    );\n    \n    // Zusätzliche dynamische Farbeffekte\n    color *= 1.0 + sin(radius * (20.0 + totalVolume * 30.0) - time * 5.0) * 0.2; // Dynamischer Ringeffekt\n    color += vec3(0.1, 0.05, 0.2) * smoothstep(0.4, 0.6, sin(angle * (16.0 + midFreq * 20.0) + time * 2.0)); // Dynamische Streifen\n    \n    // Verbesserte Glüheffekte\n    float glow = smoothstep(0.1, 0.25, armPattern);\n    color *= glow * (1.5 + totalVolume);\n    color += vec3(0.1, 0.1, 0.3) * pow(glow, 3.0 + highFreq * 5.0); // Dynamisches blaues Glühen\n    \n    // Dynamischer Hintergrundeffekt\n    vec3 bgColor = vec3(0.05, 0.05, 0.1) + 0.05 * sin(uv.xyx * (10.0 + bassFreq * 20.0) + time);\n    color = mix(bgColor, color, smoothstep(0.2, 0.21, armPattern));\n    \n    // Anwenden des verbesserten Dot-Musters\n    color *= 1.0 + dotPattern * vec3(0.5 + bassFreq, 0.7 + midFreq, 1.0 + highFreq);\n    \n    // Dynamischer Vignette-Effekt\n    float vignetteStrength = 0.5 + totalVolume * 0.5;\n    float vignette = smoothstep(1.0, vignetteStrength, length(uv));\n    color *= vignette;\n    \n    // Zusätzlicher Pulseffekt basierend auf dem Beat\n    float beatPulse = sin(time * 10.0) * 0.5 + 0.5;\n    color *= 1.0 + beatPulse * totalVolume * 0.3;\n    \n    // Finale Farbausgabe mit verstärktem Pulsieren\n    fragColor = vec4(color * (1.0 + totalVolume * 0.4), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}