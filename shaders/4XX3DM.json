{
    "Shader": {
        "info": {
            "date": "1707501199",
            "description": "Stacked animated noise",
            "flags": 0,
            "hasliked": 0,
            "id": "4XX3DM",
            "likes": 7,
            "name": "Animated Stacked Pixel Static",
            "published": 3,
            "tags": [
                "noise",
                "pixel",
                "static"
            ],
            "usePreview": 0,
            "username": "Rugg0064",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nmat2 getRotationMatrix2(float theta) {\n    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\nint murmurHash32(int h) {\n    h ^= h >> 16;\n    h *= 0x85ebca6b;\n    h ^= h >> 13;\n    h *= 0xc2b2ae35;\n    h ^= h >> 16;\n    return h;\n}\n\n\nvec2 randomNormalizedVec2(ivec2 seed) {\n    int combinedSeed = int(seed.x) * 73856093 + int(seed.y) * 19349663;\n    int hash = murmurHash32(combinedSeed);\n    int randInt = hash & 0xFFFFFFFF;\n    float randFloat = float(randInt) / float(0xFFFF);\n    float randRads = randFloat * 2.0 * PI;\n    return vec2(1, 0) * getRotationMatrix2(randRads);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 shiftedFragCoord = fragCoord + vec2(1000000, 1000000.0);\n    float sum = 0.0;\n    int startingPower = 1;\n    int layerCount = 9;\n    for(int layer = 0; layer < layerCount; layer++)\n    {\n        int power = startingPower + layer;\n        float scale = pow(2.0, float(power));\n        ivec2 iFragCoord = ivec2(shiftedFragCoord / scale);\n        vec2 randomVector = randomNormalizedVec2(iFragCoord);\n        float value = dot(randomVector, vec2(1, 0) * getRotationMatrix2(iTime*2.0)) / (pow(2.0, float(layer)) * 2.0);\n        if(layer == layerCount - 1) {\n            value *= 2.0;\n        }\n        sum += value;\n    }\n    fragColor = vec4(sum, sum, sum, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}