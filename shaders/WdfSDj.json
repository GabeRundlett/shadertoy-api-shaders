{
    "Shader": {
        "info": {
            "date": "1552145019",
            "description": "\"Foldable double standards\" - Shader showdown practice session 010.\nLive coded on Twitch with 25 minutes time limit.\nPracticing live on TWITCH every Tuesdays around 21:00 UK time.\nhttps://www.twitch.tv/evvvvil_",
            "flags": 0,
            "hasliked": 0,
            "id": "WdfSDj",
            "likes": 20,
            "name": "[TWITCH] Foldable Dbl Standards",
            "published": 3,
            "tags": [
                "time",
                "demoscene",
                "abstract",
                "double",
                "scene",
                "limit",
                "live",
                "battle",
                "shadershowdown",
                "coding",
                "twitch",
                "showdown"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 866
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\"Foldable double standards\" - Shader Showdown practice session 010\n\n// WHAT THE FUCK IS THE SHADER SHOWDOWN?\n// The \"Shader Showdown\" is a demoscene live-coding shader battle competition.\n// 2 coders battle for 25 minutes making a shader from memory on stage. \n// The audience votes for the winner by making noise or by voting on their phone.\n// Winner goes through to the next round until the final where champion is crowned.\n// Live coding shader software used is BONZOMATIC made by Gargaj from Conspiracy:\n// https://github.com/Gargaj/Bonzomatic\n\n// Every tuesdays around 21:00 UK time I practise live on TWITCH. This is the result of session 010.\n\n// COME SEE LIVE CODING EVERY TUESDAYS HERE: https://www.twitch.tv/evvvvil_\n\n// evvvvil / DESiRE demogroup\n\n// \"Fools running where angels fear to tread\" - Alexander Pope\n\nvec2 sc,e=vec2(.00035,-.00035);float t,tt,st,ct;vec3 np,op;//Some fucking globals, about as exciting as a flooded wellbeing yoga centre \nfloat bo(vec3 p,vec3 r){vec3 q=abs(p)-r;return max(max(q.x,q.y),q.z);}//box function stolen from UNC because UNC from QUITE always finds my shit jokes funny.\nvec2 fb( vec3 p )//Fucking bits function which makes the fucking bit/piece it is a base shape which we clone and repeate to create the whole geometry in mp function\n{\n  vec2 h,t=vec2(bo(p,vec3(6,0.5,0.5)),5);  //Bunch of fucking mediocre boxes\n  t.x=min(t.x,bo(abs(p)-vec3(3,0,0),vec3(0.8,0.5,100)));//more fucknig boxes\n  h=vec2(bo(p,vec3(6.2,0.7,0.2)),3);//Dude this fucking box thing again? Yeah but with different material id, fucking cheer up yeah?\n  h.x=min(h.x,bo(abs(p)-vec3(3,0,0),vec3(1,0.2,100)));  //Stacking boxes mengo\n  h.x=min(h.x,length(abs(p)-vec3(7,0,0))-1.2);//Oh look little fucking spheres on the sides? cute\n  t=(t.x<h.x)?t:h;//Merge both shapes while retaining material id, a friendly and colourful handshake basically\n  h=vec2(bo(p,vec3(0.5,(15.+sin(op.z*.4+tt*10.)*5.)*(1.-ct),0.5)),6.);//Makes the spikes in scene 01\n  t=(t.x<h.x)?t:h;//Merge both shapes while retaining material id, a friendly and colourful handshake basically\n  t.x*=0.8; return t;\n}\nfloat noise(vec3 p){//Noise function stolen from Virgil who stole it from Shane who I assume understands this shit, unlike me who is too busy argueing about the poetry of football hooliganism\n  vec3 ip=floor(p),s=vec3(7,157,113);\n  p-=ip; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(ip,s);\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);\n}\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}//simple rotate function, it is useful as fuck and short. Bit like Muggsy Bogues in the 90's\nvec2 mp( vec3 p ) //This is the main MAP function where all geometry is made/defined. It's centre stage broski, bit like a drunken Belgian monk in a hipster's shitty brewing party\n{\n  op=p;//Remember that orignal position broski? Yeah I agree, there was more individual freedom in the 90s, bring back smoking and football hooliganism\n  p.xy*=r2(sin(p.z*0.2)*0.2+tt);//overall we're sort of twisting the fucker\n  p.z=mod(p.z+tt*10.,20.)-10.;//modulo is fucking shit, avoid it but hey to make it infinite on one axis is alright broski, it's even suitable for vegans\n  vec4 pp=vec4(p,1);//we make a new position which is vec4 to remember how much we scale it and apply that shit back to tweak domain scale and avoid artifact on line 61\n  vec2 h,t=vec2(10000,0);//We start with number super high, just like me on any given good saturday afternoon\n  for(int i=0;i<4;i++)//Pseudo fractal bullshit loop de loopo motherfucker\n  {\n    pp.xy*=r2(0.785*(2.*st));//Sometimes we rotate, sometimes we dont, depends on b animation variable\n    pp.xyz=abs(pp.xyz)-mix(vec3(0,3,6),vec3(0,10,2),st);//Abs symetry clone geometry to get more, each iteration\n    pp*=1.5;//Each iteration we make fractal piece smaller\n    pp.xz*=r2(0.785*(1.+st));//rotate the fucking piece\n    h=fb(pp.xyz);h.x/=pp.w;//Finally each iteration we draw the piece of fractal\n    t=(t.x<h.x)?t:h;//Merge this iteration fractal piece with rest, like building blocks but without the DMT smoking and throwing pieces at the neighbour in euphoria\n  }\n  np=pp.xyz;//Aye remember the fucking position for later on lighting and gloss map bitch\n  p.xy*=r2(cos(p.z*1.5+tt*10.)*0.5+tt*5.);//create pos for those shitty spheres in scene 2\n  h=vec2(length(p-vec3(cos(p.z*25.)*0.05+cos(p.x),0,0))-5.*st,6.);//Shitty sphere from scene 02 with nice twisty animation and frills\n  h.x*=0.5;//Scale sphere distance field to avoid artifact, keep it shallow and beautiful\n  t=(t.x<h.x)?t:h;//Merge the fucking fractal and spheres and shit\n  return t;\n}\nvec2 tr( vec3 ro, vec3 rd,float near,float far,int it )\n{\n  vec2 h,t=vec2(near);//Near plane because we all started as annoying little shits yeah, and nah, your kids aren't cute\n  for(int i=0;i<it;i++){//Main loop de loop \n    h=mp(ro+rd*t.x);//Marching forward like any good fascist army: without any care for culture theft\n    if(h.x<.0001||t.x>far) break;//Don't let the bastards break you down! Fuck the system!\n    t.x+=h.x;t.y=h.y;//Remember the postion and the material id? Because I can be a poncy interior designer too when I'v drunk enough Sherry\n  }\n  if(t.x>far) t.x=0.;//If we've gone to far then it's time to get on yer bike and get job\n  return t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);//boilerplate code to get uvs in BONZOMATIC live coding software i use.\n    tt=mod(iTime*.5,50.);//MAin time variable, it's modulo'ed to avoid ugly artifact. Holding time in my hand: playing god seems better thanspending two months in rehab.\n\tst=0.5+clamp(sin(tt*0.5),-0.5,0.5);//These are just aniimation variables used in mp or fb\n  \tct=1.2+sin(tt*0.5);//Yeah this one too broski\n    vec3 ro=vec3(20,0,cos(tt)*10.),//Ro=ray origin=camera position because everything is relative to a view point, even your wife's failed wellbeing yoga centre\n    cw=normalize(vec3(0)-ro),cu=normalize(cross(cw,vec3(0,1,0))),cv=normalize(cross(cu,cw)),\n    rd=mat3(cu,cv,cw)*normalize(vec3(uv,.5)),//rd=ray direction (where the camera is pointing), co=final color, fo=fog color\n    co,fo,ld=normalize(vec3(.5,.3,-.1));//ld=light direction, because god wouldn't be much without good lighting and vfx\n    co=fo=vec3(.04)*(1.-(length(uv)-.2));//By default the color fog color and it's a dark coloured vignette, because it's the colour of the sky in Loretta Lynn's \"Fist city\"\n    sc=tr(ro,rd,0.1,50.,128);t=sc.x;//This is where we shoot the fucking rays to get the fucking scene. Like a soldier but with a pixel gun and less intentions to invade and pillage.\n\t\n    if(t>0.){//If t>0 then we must have hit some geometry so let's fucking shade it. Grab an umbrella, it's like dinning at the beach\n        //We hit some geometry so let's get the current position (po) and build some normals (no). You do the Maths while I light up Diogenes' lamp as he searches for an honest person.\n        vec3 po=ro+rd*t,no=normalize(e.xyy*mp(po+e.xyy).x+e.yyx*mp(po+e.yyx).x+e.yxy*mp(po+e.yxy).x+e.xxx*mp(po+e.xxx).x),\n        //LIGHTING MICRO ENGINE BROSKI \n        al=vec3(0,.2,.4);//Albedo is base colour.\n        if(sc.y<5.)  al=vec3(0.9);//Change colour depending on material id, it's like a painting/decorating job but without the football banter, so it's kinda shit\n        //More colour change, color is gradient over y axis because Roy Hodgson is still in charge of Crystal Palace and they should be staying up this year\n        if(sc.y>5.)  al=mix(vec3(0.9,0.9,0.9),vec3(1,.5,0),0.5+0.5*sin(op.z*0.4+tt*10.));\n        no*=(1.+.6*ceil(cos(np*0.5)));no=normalize(no);//TRICK to add more detail to geometry by tweaking the normals don't forget to normalize after though, \"Honky Tonk girls better know not to break the rules!\"\n        float dif=max(0.,dot(no,ld)),//dif=diffuse because i ain't got time to cook torrance\n        aor=t/50.,ao=exp2(-2.*pow(max(0.,1.-mp(po+no*aor).x/aor),2.)),//aor =amibent occlusion range, ao = ambient occlusion\n        fr=pow(1.+dot(no,rd),4.),//Fr=fresnel which adds reflections on edges to composite geometry better, yeah could be reflected, but who gives a shit? Anyways just like your ex, it doesn't do much.\n        spo= exp2(1.+3.*noise(np/vec3(1,2,4)));//TRICK making a gloss map from a 3d noise function is a thing of fucking beauty\n        vec3 sss=vec3(0.5)*smoothstep(0.,1.,mp(po+ld*0.4).x/0.4),//sss=subsurface scatterring made by tekf from the wax shader, big up tekf! https://www.shadertoy.com/view/lslXRj\n        sp=vec3(0.5)*pow(max(dot(reflect(-ld,no),-rd),0.),spo);//Sp=specualr, sotlen from Shane and it's better than walking into cold puddle of water in the bathroom while only wearing socks\n        co=mix(sp+al*(.8*ao+0.2)*(dif+sss),fo,fr);//Building the final lighting result, compressing the fuck outta everything above into an RGB shit sandwich\n        co=mix(co,fo,1.-exp(-.00003*t*t*t));//Fog soften things, but it won't save your failed marriage, God will though! Grab a bible and put on some lingerie.\n    }\n    fragColor = vec4(pow(co,vec3(0.45)),1);//Cheap tone mapping, even cheaper than a date with your future ex girlfriend\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}