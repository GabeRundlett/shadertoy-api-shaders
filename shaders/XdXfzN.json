{
    "Shader": {
        "info": {
            "date": "1494972221",
            "description": "Use the arrow keys to move, Space to switch shader, and Q to toggle Panoramic Mode. Z/X controls the angle.",
            "flags": 113,
            "hasliked": 0,
            "id": "XdXfzN",
            "likes": 7,
            "name": "Brain-Busting Maze Game",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "maze",
                "vr"
            ],
            "usePreview": 0,
            "username": "hopskotchrainbow",
            "viewed": 1291
        },
        "renderpass": [
            {
                "code": "#define time iTime\n\nvec3 LightPosition(bit3d_Ray r) {\n\treturn path(time+2.0,0)+vec3(0.0,0.2,0.0);\n}\n\nvec4 glyph(vec2 coord, vec2 center, vec2 size, int char) {\n    vec2 vc = coord-center;\n    vc /= size;\n    vc += 0.5;\n    vc = 1.0-vc;\n    float c = float(char);\n    vec2 ch = vec2(mod(c,16.0),floor(c/16.0))/16.0;\n    ch = ch;\n    vec2 vch = (vc/16.0+ch);\n    vec4 g = vec4(0.0);\n    if (vc.x > 0.0 && vc.y > 0.0 && vc.x < 1.0 && vc.y < 1.0) {\n        g = texture(iChannel2,(vch)).gbar;\n    }\n    return g;\n}\nvec4 materialColor(bit3d_Ray ray) {\n\tvec3 lightpos = LightPosition(ray);\n\tvec4 m = vec4(0.0);\n\tif (ray.hit) {\n\t\tbit3d_shape target = ray.target;\n\t\tvec3 vn = normalize(ray.direction);\n\t\tvec3 im = lightpos;\n\t\tvec3 vm = normalize(ray.coord.position-im);\n\t\tvec3 vi = normalize(vm-im);\n\t\tvec3 h = normalize(ray.coord.position-lightpos);\n\t\tbit3d_Ray hray = rayof(ray.coord.position-h*edge*2.,h*(length(ray.direction)-ray.dist),ray.maxIterations-ray.iters);\n\t\tfloat byshade = 1.0;\n\n\t\tfloat diffuse = dot(ray.normal, vi)*byshade;\n\t\tdiffuse = pow(clamp(diffuse+target.ambientOcclusion, target.ambientOcclusion, 1.0),1.0);\n\t\tfloat specm = pow(max(dot(vi, ray.normal),0.0),target.specPower);\n\t\tm.a = clamp(1.0-(pow(float(ray.iters)/float(ray.maxIterations),0.2)*pow(distance(ray.coord.position,ray.origin)/length(ray.direction)*24.0,0.01)),0.0,1.0);\n\t\tm.a *= 1.0-(ray.dist/length(ray.direction));\n\t\tm.rgb = mix(target.ambient+mix(target.diffuse*diffuse,target.diffuse+target.specular,specm),target.glowcolor, target.glow*(1.0-diffuse));\n\t}\n\tm.rgb = clamp(m.rgb, 0.0, 1.0);\n\treturn m;\n}\n\nvoid blend(inout vec4 fragColor, vec4 c) {\n\tfragColor.rgb = mix(fragColor.rgb, c.rgb, c.a);\n\tfragColor.a = max(fragColor.a, c.a);\n}\n\nvoid blend(\n\tsampler2D sampler,\n    vec2 fragCoord,\n    inout vec4 fragColor,\n\tvec2 origin,\n\tvec2 size,\n\tfloat rotation,\n\tfloat alpha\n) {\n vec2 c = fragCoord.xy-origin;\n c /= size;\n rotate(c, rotation);\n c += 0.5;\n if (c.x>= 0.0 && c.y >= 0.0 && c.x < 1.0 && c.y < 1.0) {\n \tvec4 t = texture(sampler, c);\n \tt.a *= alpha;\n \tblend(fragColor, t);\n }\n}\n\nvoid blend(inout vec4 fragColor, bit3d_Ray ray) {\n\tvec4 color = materialColor(ray);\n\tbit3d_Ray refl = ray;\n\tint iei = ray.iters;\n\twhile (iei > 0) {\n\t\tfloat rh = refl.target.reflection;\n\t\tint iters = refl.iters;\n\t\tif ((!ray.hit) || rh <= 0.0) break;\n\t\tfloat gz = length(refl.direction)-refl.dist;\n\t\trefl.origin = refl.coord.position;\n\t\trefl.direction = reflect(normalize(refl.direction), refl.normal)*gz;\n\t\trefl.maxIterations = ray.maxIterations;\n\t\trefl.origin += normalize(refl.direction)*shading;\n\t\tfire(refl, refl.coord.portal);\n\t\tiei -= iters;\n\t\tvec4 c2 = materialColor(refl);\n        c2.a = pow(c2.a,1.2);\n\t\tcolor.rgb = mix(color.rgb, c2.rgb, rh);\n\t\tcolor.a = mix(color.a,color.a*c2.a,rh);\n\t}\n\tblend(fragColor, color);\n}\n\nvec4 drawNumber(vec2 fragCoord, int number, vec2 localCoord, float size) {\n    float n = float(number);\n    vec2 Vec = localCoord;\n    vec4 gd = vec4(0.0);\n    while (true) {\n        float frx = floor(fract(n/10.0)*10.0);\n        vec4 g = glyph(fragCoord, Vec, vec2(-size,size), number0+int(frx));\n        blend(gd,g);\n        Vec.x -= size/2.0;\n        float mdex = floor(n/10.0);\n        if (mdex == 0.) break;\n        n = n/10.0;\n    }\n    return gd;\n}\nvec4 load( int index ) {\n    float x = mod(float(index),iResolution.x);\n    float y = floor(float(index)/iResolution.x);\n    ivec2 id = ivec2(x,y);\n    return texelFetch(iChannel1, id, 0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    vec4 lv = load(0);\n    vec3 b = vec3(0.0,lv.a,0.0);\n    vec3 o = vec3(lv.r,0.0,lv.g);\n    vec3 unv = vec3(rd)*60.0;\n    rotate(unv, vec3(0.0,lv.a,0.0));\n    bit3d_Ray ray = rayof(o+ro, unv, 4);\n    vec4 portalData = load(1);\n    ray.lensDist = 1.0;\n    fire(ray, int(lv.b));\n    vec4 c = vec4(vec3(0.0),1.0);\n    blend(c, ray);\n    vec3 m = mix(vec3(0.0), c.rgb, c.a);\n\tfragColor = vec4(m,1.0);\n    vec4 opt = load(3);\n    if (opt.r > 0.0) {\n        fragColor = texture(iChannel0,fragCoord.xy/iResolution.xy);\n    }\n}\n\nvec4 glyph3d(vec2 fragCoord, vec2 localCoord, float size, int char) {\n    vec4 c = vec4(0.0);\n    vec4 glyph3 = glyph(fragCoord,localCoord,vec2(-size,size),char);\n    vec3 gLight = vec3(1.0,1.0,0.6);\n    vec3 gNormal = normalize(normalize(gLight)-glyph3.xyz);\n    float gShadow = dot(normalize(gLight),gNormal);\n    vec4 gDiffuse = vec4(vec3(0.76,0.5,0.9)*gShadow,glyph3.a);\n    blend(c, gDiffuse);\n    return c;\n}\n\nvec4 musiAmp(float x) {\n    return vec4(\n        texture(iChannel3,vec2(x,0.0)).r,\n        texture(iChannel3,vec2(x,0.25)).r,\n        texture(iChannel3,vec2(x,0.5)).r,\n        texture(iChannel3,vec2(x,0.75)).r\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy - iResolution.xy / 2.0;\n    uv /= max(iResolution.x,iResolution.y);\n    vec2 xuv = fragCoord.xy/iResolution.xy;\n    xuv -= 0.5;\n    vec2 pixsize = 1.0/iResolution.xy;\n    vec2 uv2 = fragCoord.xy/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec4 lv = load(0);\n    vec3 b = vec3(0.0,lv.a,0.0);\n    vec3 o = vec3(lv.r,0.0,lv.g);\n    vec4 options = load(2);\n    float angle = 45.0+options.y;\n    vec3 sph = spherical(xuv*vec2(180.0,angle));\n    sph = mix(sph,vec3(uv*fov(angle), 1.0),1.0-options.x);\n    vec3 unv = vec3(sph)*20.0;\n    rotate(unv, vec3(0.0,lv.a,0.0));\n    bit3d_Ray ray = rayof(o, unv, 2);\n    ray.lensDist = mix(length(sph),1.0,options.x*0.1+0.9);\n    fire(ray, int(lv.b));\n    vec4 c = vec4(vec3(0.0),1.0);\n    blend(c, ray);\n    vec3 gLight;\n    vec3 gNormal;\n    float gShadow;\n    vec4 gDiffuse;\n    blend(c, gDiffuse);\n    vec4 gn = drawNumber(fragCoord.xy,int(lv.b),vec2(46.0),64.0);\n    gLight = vec3(0.95,0.5,0.6);\n    gNormal = normalize(normalize(gLight)-gn.xyz);\n    gShadow = dot(normalize(gLight),gNormal);\n    gDiffuse = vec4(vec3(0.76,0.5,0.9)*gShadow,gn.a);\n    blend(c, gDiffuse);\n    blend(c, glyph3d(fragCoord,vec2(20.0,16.0),30.0,Ll));\n    blend(c, glyph3d(fragCoord,vec2(40.0,16.0),30.0,Ee));\n    blend(c, glyph3d(fragCoord,vec2(60.0,16.0),30.0,Vv));\n    blend(c, glyph3d(fragCoord,vec2(80.0,16.0),30.0,Ee));\n    blend(c, glyph3d(fragCoord,vec2(100.0,16.0),30.0,Ll));\n    float whiteFlash = smoothstep(0.0,1.0,1.0-(iTime-options.b));\n    blend(c,vec4(vec3(1.0),whiteFlash));\n    if (ray.inside) {\n        c = vec4(vec3(0.0),1.0);\n        blend(c, glyph3d(fragCoord,vec2(20.0,24.0),40.0,Ss));\n        blend(c, glyph3d(fragCoord,vec2(40.0,24.0),40.0,Tt));\n        blend(c, glyph3d(fragCoord,vec2(60.0,24.0),40.0,Uu));\n        blend(c, glyph3d(fragCoord,vec2(80.0,24.0),40.0,Cc));\n        blend(c, glyph3d(fragCoord,vec2(100.0,24.0),40.0,Kk));\n    }\n\tvec3 m = mix(vec3(1.0), c.rgb, c.a);\n\tfragColor = vec4(m,1.0);\n    vec4 options2 = load(3);\n    if (options2.r > 0.0) {\n        fragColor = texture(iChannel0,uv2);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 8777,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/blue-comet/geometrical-dominator-by-waterflame-full"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define time iTime\n\nvec3 LightPosition(bit3d_Ray r) {\n\treturn path(time+2.0,0)+vec3(0.0,0.2,0.0);\n}\n\n#define time iTime\nbool isKeyPressed(float key, int status) {\n    float x = key*256.0;\n    vec4 t = texelFetch(iChannel1, ivec2(x,float(status)),0);\n    if (t.x > 0.0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nbool isKeyPressed(float key) {\n    return isKeyPressed(key, 0);\n}\n\nbool saveIndex( in int index, in vec2 coord ) {\n    float x = mod(float(index),iResolution.x);\n    float y = floor(float(index)/iResolution.x);\n    vec2 id = vec2(x, y);\n    if (coord.x >= id.x && coord.y >= id.y && coord.x < id.x+1.0 && coord.y < id.y+1.0 ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\nvec4 glyph(vec2 coord, vec2 center, vec2 size, int char) {\n    vec2 vc = coord-center;\n    vc /= size;\n    vc += 0.5;\n    vc = 1.0-vc;\n    float c = float(char);\n    vec2 ch = vec2(mod(c,16.0),floor(c/16.0))/16.0;\n    ch = ch;\n    vec2 vch = (vc/16.0+ch);\n    vec4 g = vec4(0.0);\n    if (vc.x > 0.0 && vc.y > 0.0 && vc.x < 1.0 && vc.y < 1.0) {\n        g = texture(iChannel2,(vch)).gbar;\n    }\n    return g;\n}\n\nvec4 load( int index ) {\n    float x = mod(float(index),iResolution.x);\n    float y = floor(float(index)/iResolution.x);\n    ivec2 id = ivec2(x,y);\n    return texelFetch(iChannel1, id, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    if (saveIndex(0, fragCoord)) {\n        vec2 xyz = fragColor.rg;\n    \tfloat angle = fragColor.a;\n        vec2 m = vec2(0.0);\n        if (isKeyPressed(KEY_LEFT, 0)) m.x -= iTimeDelta*32.0;\n        if (isKeyPressed(KEY_RIGHT, 0)) m.x += iTimeDelta*32.0;\n        if (isKeyPressed(KEY_UP, 0)) m.y += iTimeDelta*8.0;\n        bit3d_coordinate coord;\n        coord.position = vec3(xyz.x,0.0,xyz.y);\n        coord.portal = int(fragColor.b);\n        bit3d_shape shape;\n        shape.portal = int(fragColor.b);\n        scene(shape, coord);\n        if (shape.surface > iTimeDelta*1.0) {\n            vec3 zm = vec3(0.0,0.0,m.y);\n        \tangle -= m.x*5.0;\n        \trotate(zm, vec3(0.0,angle,0.0));\n        \txyz += zm.xz*0.15;\n        } else {\n            vec3 n = bit3d_normal(coord);\n            xyz += n.xz*(abs(shape.surface)+1.0)*iTimeDelta;\n        }\n        if (shape.portal != coord.portal) {\n            fragColor.b = float(shape.portal);\n        }\n        vec3 normal = bit3d_normal(coord);\n        fragColor.rg = xyz;\n    \tfragColor.a = angle;\n        if (isKeyPressed(KEY_E, 0)) fragColor = vec4(0.0);\n    } else if (saveIndex(2, fragCoord)) {\n        float g = fragColor.r;\n        if (isKeyPressed(KEY_Q, 1)) g = 1.0-g;\n        if (isKeyPressed(KEY_X, 0)) fragColor.g = min(fragColor.g+5.0,45.0);\n        if (isKeyPressed(KEY_Z, 0)) fragColor.g = max(fragColor.g-5.0,0.0);\n        fragColor.r = g;\n        vec4 dx = load(0);\n        vec4 previousG = load(2);\n        if (previousG.a != dx.b) {\n            fragColor.b = iTimeDelta;\n        }\n        fragColor.b = dx.b;\n    } else if (saveIndex(1, fragCoord)) {\n        int id = int(fragColor.a);\n        bit3d_coordinate coord;\n        vec4 gd = load(0);\n        vec4 prev = load(1);\n        fragColor = vec4(gd.xy,prev.xy-gd.xy);\n    } else if (saveIndex(3, fragCoord)) {\n        if (isKeyPressed(KEY_SP, 1)) fragColor.r = 1.0-fragColor.r;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define time iTime\n\nvec3 LightPosition(bit3d_Ray r) {\n\treturn path(time+2.0,0)+vec3(0.0,0.2,0.0);\n}\n\nvec4 glyph(vec2 coord, vec2 center, vec2 size, int char) {\n    vec2 vc = coord-center;\n    vc /= size;\n    vc += 0.5;\n    vc = 1.0-vc;\n    float c = float(char);\n    vec2 ch = vec2(mod(c,16.0),floor(c/16.0))/16.0;\n    ch = ch;\n    vec2 vch = (vc/16.0+ch);\n    vec4 g = vec4(0.0);\n    if (vc.x > 0.0 && vc.y > 0.0 && vc.x < 1.0 && vc.y < 1.0) {\n        g = texture(iChannel2,(vch)).gbar;\n    }\n    return g;\n}\nvec4 materialColor(bit3d_Ray ray) {\n\tvec3 lightpos = LightPosition(ray);\n\tvec4 m = vec4(0.0);\n\tif (ray.hit) {\n\t\tbit3d_shape target = ray.target;\n\t\tvec3 vn = normalize(ray.direction);\n\t\tvec3 im = lightpos;\n\t\tvec3 vm = normalize(ray.coord.position-im);\n\t\tvec3 vi = normalize(vm-im);\n\t\tvec3 h = normalize(ray.coord.position-lightpos);\n\t\tbit3d_Ray hray = rayof(ray.coord.position-h*edge*2.,h*(length(ray.direction)-ray.dist),ray.maxIterations-ray.iters);\n\t\tfloat byshade = 1.0;\n\n\t\tfloat diffuse = dot(ray.normal, vi)*byshade;\n\t\tdiffuse = pow(clamp(diffuse+target.ambientOcclusion, target.ambientOcclusion, 1.0),1.0);\n\t\tfloat specm = pow(max(dot(vi, ray.normal),0.0),target.specPower);\n\t\tm.a = clamp(1.0-(pow(float(ray.iters)/float(ray.maxIterations),0.2)*pow(distance(ray.coord.position,ray.origin)/length(ray.direction)*24.0,0.01)),0.0,1.0);\n\t\tm.a *= 1.0-(ray.dist/length(ray.direction));\n\t\tm.rgb = mix(target.ambient+mix(target.diffuse*diffuse,target.diffuse+target.specular,specm),target.glowcolor, target.glow*(1.0-diffuse));\n\t}\n\tm.rgb = clamp(m.rgb, 0.0, 1.0);\n\treturn m;\n}\n\nvoid blend(inout vec4 fragColor, vec4 c) {\n\tfragColor.rgb = mix(fragColor.rgb, c.rgb, c.a);\n\tfragColor.a = max(fragColor.a, c.a);\n}\n\nvoid blend(\n\tsampler2D sampler,\n    vec2 fragCoord,\n    inout vec4 fragColor,\n\tvec2 origin,\n\tvec2 size,\n\tfloat rotation,\n\tfloat alpha\n) {\n vec2 c = fragCoord.xy-origin;\n c /= size;\n rotate(c, rotation);\n c += 0.5;\n if (c.x>= 0.0 && c.y >= 0.0 && c.x < 1.0 && c.y < 1.0) {\n \tvec4 t = texture(sampler, c);\n \tt.a *= alpha;\n \tblend(fragColor, t);\n }\n}\n\nvoid blend(inout vec4 fragColor, bit3d_Ray ray) {\n\tvec4 color = materialColor(ray);\n\tbit3d_Ray refl = ray;\n\tint iei = ray.iters;\n\twhile (iei > 0) {\n\t\tfloat rh = refl.target.reflection;\n\t\tint iters = refl.iters;\n\t\tif ((!ray.hit) || rh <= 0.0) break;\n\t\tfloat gz = length(refl.direction)-refl.dist;\n\t\trefl.origin = refl.coord.position;\n\t\trefl.direction = reflect(normalize(refl.direction), refl.normal)*gz;\n\t\trefl.maxIterations = ray.maxIterations;\n\t\trefl.origin += normalize(refl.direction)*shading;\n\t\tfire(refl, refl.coord.portal);\n\t\tiei -= iters;\n\t\tvec4 c2 = materialColor(refl);\n        c2.a = pow(c2.a,1.2);\n\t\tcolor.rgb = mix(color.rgb, c2.rgb, rh);\n\t\tcolor.a = mix(color.a,color.a*c2.a,rh);\n\t}\n\tblend(fragColor, color);\n}\n\nvec4 drawNumber(vec2 fragCoord, int number, vec2 localCoord, float size) {\n    float n = float(number);\n    vec2 Vec = localCoord;\n    vec4 gd = vec4(0.0);\n    while (true) {\n        float frx = floor(fract(n/10.0)*10.0);\n        vec4 g = glyph(fragCoord, Vec, vec2(-size,size), number0+int(frx));\n        blend(gd,g);\n        Vec.x -= size/2.0;\n        float mdex = floor(n/10.0);\n        if (mdex == 0.) break;\n        n = n/10.0;\n    }\n    return gd;\n}\nvec4 load( int index ) {\n    float x = mod(float(index),iResolution.x);\n    float y = floor(float(index)/iResolution.x);\n    ivec2 id = ivec2(x,y);\n    return texelFetch(iChannel1, id, 0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    vec4 lv = load(0);\n    vec3 b = vec3(0.0,lv.a,0.0);\n    vec3 o = vec3(lv.r,0.0,lv.g);\n    vec3 unv = vec3(rd)*60.0;\n    rotate(unv, vec3(0.0,lv.a,0.0));\n    bit3d_Ray ray = rayof(o+ro, unv, 4);\n    vec4 portalData = load(1);\n    ray.lensDist = 1.0;\n    fire(ray, int(lv.b));\n    vec4 c = vec4(vec3(0.0),1.0);\n    blend(c, ray);\n    vec3 m = mix(vec3(0.0), c.rgb, c.a);\n\tfragColor = vec4(m,1.0);\n}\n\nvec4 glyph3d(vec2 fragCoord, vec2 localCoord, float size, int char) {\n    vec4 c = vec4(0.0);\n    vec4 glyph3 = glyph(fragCoord,localCoord,vec2(-size,size),char);\n    vec3 gLight = vec3(1.0,1.0,0.6);\n    vec3 gNormal = normalize(normalize(gLight)-glyph3.xyz);\n    float gShadow = dot(normalize(gLight),gNormal);\n    vec4 gDiffuse = vec4(vec3(0.76,0.5,0.9)*gShadow,glyph3.a);\n    blend(c, gDiffuse);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy - iResolution.xy / 2.0;\n    uv /= max(iResolution.x,iResolution.y);\n    vec2 xuv = fragCoord.xy/iResolution.xy;\n    xuv -= 0.5;\n    vec2 pixsize = 1.0/iResolution.xy;\n    vec2 uv2 = fragCoord.xy/iResolution.xy;\n    vec4 overlay = texture(iChannel0,uv2);\n    vec2 uv3 = uv2-0.5;\n    rotate(uv3,length(uv3)*15.0);\n    uv3 += 0.5;\n    vec4 overlay2 = texture(iChannel0,uv3);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec4 lv = load(0);\n    vec3 b = vec3(0.0,lv.a,0.0);\n    vec3 o = vec3(lv.r,0.0,lv.g);\n    vec4 options = load(2);\n    float angle = 45.0+options.y;\n    vec3 sph = spherical(xuv*vec2(180.0,angle));\n    sph = mix(sph,vec3(uv*fov(angle), 1.0),1.0-options.x);\n    vec3 unv = vec3(sph)*20.0;\n    rotate(unv, vec3(0.0,lv.a,0.0));\n    bit3d_Ray ray = rayof(o, unv, 2);\n    ray.lensDist = mix(length(sph),1.0,1.0-options.x);\n    fire(ray, int(lv.b));\n    vec4 c = vec4(vec3(overlay2.rgb*0.2),1.0);\n    blend(c, ray);\n    vec3 gLight;\n    vec3 gNormal;\n    float gShadow;\n    vec4 gDiffuse;\n    blend(c, gDiffuse);\n    if (ray.inside) {\n        vec3 hsv = rgb2hsv(overlay.rgb);\n        hsv.r = fract(hsv.r+0.1);\n        hsv.b = max(hsv.b-iTimeDelta/0.6,0.0);\n        c = vec4(hsv2rgb(hsv),1.0);\n    }\n    vec4 gn = drawNumber(fragCoord.xy,int(lv.b),vec2(46.0),64.0);\n    gLight = vec3(0.95,0.5,0.6);\n    gNormal = normalize(normalize(gLight)-gn.xyz);\n    gShadow = dot(normalize(gLight),gNormal);\n    gDiffuse = vec4(vec3(0.76,0.5,0.9)*gShadow,gn.a);\n    blend(c, gDiffuse);\n    blend(c, glyph3d(fragCoord,vec2(20.0,16.0),30.0,Ll));\n    blend(c, glyph3d(fragCoord,vec2(40.0,16.0),30.0,Ee));\n    blend(c, glyph3d(fragCoord,vec2(60.0,16.0),30.0,Vv));\n    blend(c, glyph3d(fragCoord,vec2(80.0,16.0),30.0,Ee));\n    blend(c, glyph3d(fragCoord,vec2(100.0,16.0),30.0,Ll));\n\tvec3 m = mix(vec3(1.0), c.rgb, c.a);\n\tfragColor = vec4(m,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 3.14152865\n\n#define eps 0.001\n#define edge 0.00125\n#define shading 0.00125\n#define ev vec3(shading, 0.0, 0.0)\n\n#define float3 vec3\n#define float2 vec2\n#define float4 vec4\n\n#define id( x,y)   floor(x)+100.*floor(y)\n#define rnd( x)    fract(1000.*sin(345.2345*x))\n\n#define Aa 65\n#define Bb 66\n#define Cc 67\n#define Dd 68\n#define Ee 69\n#define Ff 70\n#define Gg 71\n#define Hh 72\n#define Ii 73\n#define Jj 74\n#define Kk 75\n#define Ll 76\n#define Mm 77\n#define Nn 78\n#define Oo 79\n#define Pp 80\n#define Qq 81\n#define Rr 82\n#define Ss 83\n#define Tt 84\n#define Uu 85\n#define Vv 86\n#define Ww 87\n#define Xx 88\n#define Yy 89\n#define Zz 90\n\n#define char_Lb 91\n#define char_Vb 92\n#define char_Rb 93\n#define char_apostrophe 64\n#define char_left 16\n#define char_up 17\n#define char_right 18\n#define char_down 19\n\n#define number0 48\n#define number1 49\n#define number2 50\n#define number3 51\n#define number4 52\n#define number5 53\n#define number6 54\n#define number7 55\n#define number8 56\n#define number9 57\n\n// Keyboard constants definition\nconst float KEY_BSP   = 8.5/256.0;\nconst float KEY_SP    = 32.5/256.0;\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\nconst float KEY_A     = 65.5/256.0;\nconst float KEY_B     = 66.5/256.0;\nconst float KEY_C     = 67.5/256.0;\nconst float KEY_D     = 68.5/256.0;\nconst float KEY_E     = 69.5/256.0;\nconst float KEY_F     = 70.5/256.0;\nconst float KEY_G     = 71.5/256.0;\nconst float KEY_H     = 72.5/256.0;\nconst float KEY_I     = 73.5/256.0;\nconst float KEY_J     = 74.5/256.0;\nconst float KEY_K     = 75.5/256.0;\nconst float KEY_L     = 76.5/256.0;\nconst float KEY_M     = 77.5/256.0;\nconst float KEY_N     = 78.5/256.0;\nconst float KEY_O     = 79.5/256.0;\nconst float KEY_P     = 80.5/256.0;\nconst float KEY_Q     = 81.5/256.0;\nconst float KEY_R     = 82.5/256.0;\nconst float KEY_S     = 83.5/256.0;\nconst float KEY_T     = 84.5/256.0;\nconst float KEY_U     = 85.5/256.0;\nconst float KEY_V     = 86.5/256.0;\nconst float KEY_W     = 87.5/256.0;\nconst float KEY_X     = 88.5/256.0;\nconst float KEY_Y     = 89.5/256.0;\nconst float KEY_Z     = 90.5/256.0;\nconst float KEY_COMMA = 188.5/256.0;\nconst float KEY_PER   = 190.5/256.0;\nconst float KEY_ADD   = 107.5/256.0;\nconst float KEY_SUBS  = 109.5/256.0;\nconst float KEY_EQUAL = 187.5/256.0;\nconst float KEY_MINUS = 189.5/256.0;\n\nstruct bit3d_shape\n{\n\tvec3 diffuse;\n\tvec3 ambient;\n\tvec3 glowcolor;\n\tfloat glow;\n\tfloat surface;\n\tvec3 specular;\n\tfloat specPower;\n\tint portal;\n\tfloat ambientOcclusion;\n\tfloat reflection;\n\tbool stepk;\n};\nstruct bit3d_coordinate\n{\n\tvec3 position;\n\tint portal;\n};\n\nstruct bit3d_Ray\n{\n\tvec3 origin;\n\tvec3 direction;\n\tint maxIterations;\n\tint iters;\n\tfloat dist;\n\tbit3d_coordinate coord;\n\tbit3d_shape target;\n\tbool hit;\n\tvec3 normal;\n\tbool inside;\n    float lensDist;\n};\n\n// Official HSV to RGB conversion\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// Smooth HSV to RGB conversion\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nfloat maze(vec2 u) {\n    float n = id(u.x,u.y);  u = fract(u);\n    return 1.-smoothstep(.1,.15,((rnd(n)>.5)?u.x:u.y));  // .1 .15\n}\n\nfloat direction(vec2 uv) {\n\tfloat a = atan(uv.x,uv.y)/radians(360.0);\n\ta += 0.5;\n\treturn a*360.0;\n}\n\nvoid rotate(inout vec2 uv, float angle) {\n\tfloat rad = radians(angle);\n\tuv = vec2(uv.x*cos(rad)-uv.y*sin(rad),\n\t\tuv.x*sin(rad)+uv.y*cos(rad));\n}\n\nvec2 direction(vec3 v)\n{\n\treturn vec2(\n\t\tdirection(v.xz)+180.0,\n\t\tdirection(vec2(\n\t\t\tlength(v.xz),\n\t\t\tv.y\n\t\t))+90.0\n\t);\n}\n\nvoid rotate(inout vec3 v, vec3 angle) {\n\trotate(v.zy, angle.x);\n\trotate(v.xz, angle.y);\n\trotate(v.xy, angle.z);\n}\n\n\nvec3 spherical(vec2 angle) {\n    vec2 rad = radians(angle*2.0-vec2(180.0,90.0));\n    return vec3(\n        sin(rad.x)*sin(rad.y),\n        cos(rad.y),\n        cos(rad.x)*sin(rad.y)\n    );\n}\n\n// union\nbit3d_shape op_union(bit3d_shape primary, bit3d_shape secondary) {\n\tbit3d_shape shape3d = primary;\n\tif (secondary.surface < primary.surface) shape3d = secondary;\n\treturn shape3d;\n}\n\n// intersection\nfloat op_intersect(float primary, float secondary) {\n\treturn max(primary, secondary);\n}\n\n// mixing\nfloat op_mix(float primary, float secondary, float factor) {\n\tfloat h = clamp((primary-secondary)/factor+1.0,0.0,1.0);\n\tfloat j = mix(primary, secondary, pow(h,3.0));\n\treturn j;\n}\n\n// subtraction\nfloat op_subtract(float primary, float secondary) {\n\treturn max(primary, -secondary);\n}\n\n// sphere\nfloat sphere(vec3 l, vec3 size) {\n\tvec3 m = l/(size);\n\tif (length(m) > 1.0)\n\t{\n\t\tm = normalize(m);\n\t}\n\tm *= size;\n\treturn length(l-m)-length(size);\n}\n\n// box\nfloat box(vec3 l, vec3 size) {\n\tvec3 m = clamp(l, -size/2.0,size/2.0);\n\treturn distance(l, m)-edge;\n}\n\n// cylinder\nfloat cylinder(vec3 l, vec2 scale, float bottom, float top) {\n\tvec2 scf = l.xz/scale;\n\tif (length(scf) >= 1.0) scf = normalize(scf);\n\tfloat coDist = distance(l.xz, scf*scale);\n\tfloat cg = max(l.y-bottom, top-l.y);\n\treturn max(cg, coDist)-edge;\n}\n\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdPryamid4(vec3 p, vec3 h ) // h = { cos a, sin a, height }\n{\n    // Tetrahedron = Octahedron - Cube\n    float box = sdBox( p - vec3(0,-2.0*h.z,0), vec3(2.0*h.z) );\n \n    float d = 0.0;\n    d = max( d, abs( dot(p, vec3( -h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y, h.x )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y,-h.x )) ));\n    float octa = d - h.z;\n    return max(-box,octa); // Subtraction\n }\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n\nvec3 path(float k, int id) {\n\tvec2 nv = vec2(cos(k*0.7),sin(k*0.7))*0.6;\n\treturn vec3(nv,k*1.3);\n}\n\nvec3 pathdir(float k, int id) {\n\treturn normalize(path(k+eps, id)-path(k, id));\n}\n\nvoid forward(inout vec3 point, vec3 target) {\n\tvec2 dh = direction(target);\n\trotate(point, -vec3(dh.yx,0.0));\n}\n\nvoid forward(inout vec3 point, vec3 target, float inverse) {\n\tvec2 dh = direction(target);\n\trotate(point, -vec3(mix(dh.yx,-dh.yx,inverse),0.0));\n}\n\nfloat capsphere(vec3 h, float radius) {\n\tvec2 orig = h.xy;\n\tif (length(orig) >= radius) {\n\t\torig = normalize(orig)*radius;\n\t}\n\treturn length(vec3(h.xy-orig.xy,h.z));\n}\n\nfloat speed(float k, int id) {\n\treturn distance(path(k,id),path(k+eps,id))/eps;\n}\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat iqnoise( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\nfloat imaze(  vec2 U )\n{  return .1/ fract(   sin(1e5*length (ceil(U/=8.))) < 0.  ? U.x : U.y ); }\n\nfloat cnoise(float x) {\n    float gn = cos(x*7.0);\n    gn = sin(cos(x*2.76312)*4.32256);\n    gn *= sin(sin(x*6.53106391-0.11746362)*4.337163);\n    gn *= sin(sin(x*1.641647-0.32176)+0.357176);\n    gn = sqrt(abs(gn))*sign(gn);\n    float hn = cos(x*2.6316);\n    hn = sin(hn-sin(x*7.631474)*0.5);\n    hn = sin(hn*hn);\n    return (gn+hn)/2.0;\n}\n\n#define TL  30.0\n#define TL2 33.0\n\nfloat hash(float n)\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise(vec2 p)\n{\n    return hash(p.x + p.y*57.0);\n}\n\nfloat mazeDist(vec3 p)\n{\n    vec3 cp=fract(p)-vec3(.5),acp=abs(cp);\n    float r=acos(-1.)*2./8.;\n    vec2 p2=(p.xz-.5)*mat2(cos(r),sin(r),sin(r),-cos(r))*length(vec2(1));\n    vec2 c=floor(p2),f=fract(p.xz);\n    float a=step(.5,noise(c));\n    float s=.1;\n    if(a>.5)\n        return acp.x-s;\n    return acp.z-s;\n}\n\n\nvoid scene(\n\tinout bit3d_shape shape,\n\tbit3d_coordinate coord\n)\n{\n\tvec3 frame = (abs(fract(coord.position/16.0)-0.5)-0.5)*32.;\n\tvec3 uframe = (fract(coord.position/16.0+0.5)-0.5)*16.0;\n\tshape.diffuse = vec3(0.11,0.5,0.89);\n\tshape.ambient = vec3(0.0);\n\tshape.specular = vec3(0.2);\n\tshape.specPower = 5.0;\n\tshape.stepk = false;\n\tshape.reflection = 0.0;\n\tshape.ambientOcclusion = 0.5;\n    shape.glow = 0.0;\n\tvec3 pos = coord.position;\n    int dimension = coord.portal;\n    float dx = float(dimension);\n    float rd = floor(noise(vec2(dx*256.0))*1200.0);\n    float rs = mazeDist(vec3(pos.x/32.0+rd,0.0,pos.z/32.0+rd)*32.0);\n    rs = op_subtract(rs,-(pos.y-0.12));\n    rs = min(rs,pos.y+0.15);\n    shape.surface = rs;\n    if (pos.y >= -0.15+edge) {\n        shape.diffuse = hsv2rgb(vec3(float(dimension)/16.0,1.0,1.0));\n        shape.specular = vec3(0.8);\n        shape.specPower = 24.0;\n    } else {\n        shape.diffuse = vec3(0.1,0.5,0.6);\n    }\n    if (noise(floor(pos.xz/8.0)+vec2(mod(dx,16.0),floor(dx/16.0))*24.0)*5.0 <= 1.5 && shape.surface >= edge*1.0) {\n        shape.portal = coord.portal+1;\n    }\n}\n\nfloat scenef(bit3d_coordinate l) {\n\tbit3d_shape shape;\n\tshape.portal = l.portal;\n\tscene(shape, l);\n\treturn shape.surface;\n}\n\nbit3d_coordinate cadd(bit3d_coordinate v, vec3 n) {\n\tbit3d_coordinate a;\n\ta.portal = v.portal;\n\ta.position = v.position+n;\n\treturn a;\n}\n\nvec3 bit3d_normal(bit3d_coordinate l) {\n\treturn normalize(vec3(\n\t\tscenef(cadd(l, ev.xyz))-scenef(cadd(l,0.0-ev.xyz)),\n\t\tscenef(cadd(l, ev.yxz))-scenef(cadd(l,0.0-ev.yxz)),\n\t\tscenef(cadd(l, ev.zyx))-scenef(cadd(l,0.0-ev.zyx))\n\t));\n}\n\nvoid fire(inout bit3d_Ray ray, int firstPortal) {\n\tray.coord.position = ray.origin;\n\tvec3 d = normalize(ray.direction);\n\tbit3d_coordinate coord = ray.coord;\n\tcoord.position = ray.origin;\n\tcoord.portal = firstPortal;\n\tbit3d_shape shape = ray.target;\n\tray.hit = false;\n\tray.iters = 0;\n\tray.dist = 0.0;\n\tray.inside = true;\n\tshape.portal = firstPortal;\n\tray.maxIterations = max(ray.maxIterations, 256);\n\twhile (ray.iters < ray.maxIterations && ray.dist < length(ray.direction)) {\n\t\tray.iters += 1;\n\t\tfloat zh = shape.surface;\n\t\tbool kh = shape.stepk;\n\t\tint pl = shape.portal;\n\t\tscene(shape, coord);\n\t \tif (ray.dist > edge) ray.inside = false;\n\t \tif (shape.surface <= edge && shape.portal == coord.portal) {\n\t\t\tray.hit = true;\n\t\t\tray.normal = bit3d_normal(coord);\n\t\t\tbreak;\n\t\t}\n\t\tfloat hy = shape.surface*ray.lensDist;\n\t\tif (kh) {hy = edge;}\n\t\tcoord.position += d*hy;\n\t \tcoord.portal = shape.portal;\n\t\tray.dist += hy;\n\t}\n\tray.target = shape;\n\tray.coord = coord;\n}\n\nbit3d_Ray rayof(vec3 o, vec3 t, int mi) {\n\tbit3d_Ray r;\n\tr.origin = o;\n\tr.direction = t;\n\tr.maxIterations = 8;\n\treturn r;\n}\n\n\n\n\n\nfloat fov( float angle ) {\n    return 1.0/atan(1.0/radians(angle*2.0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}