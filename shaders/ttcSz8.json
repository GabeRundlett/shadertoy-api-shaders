{
    "Shader": {
        "info": {
            "date": "1580360225",
            "description": "color",
            "flags": 0,
            "hasliked": 0,
            "id": "ttcSz8",
            "likes": 2,
            "name": "Generative Color with Music",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "tonywu",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "// HSB to RGB\nvec3 hsb2rgb(in vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n        // the sound texture is 512x2\n    int tx = int(uv.x*512.0)/10;\n    //int tx = 1;\n     \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n\n    // Calculate hue based on current horizontal pixel\n    // and cursor position.\n    float stepX = fft*9.0;\n    float hue = floor(stepX * uv.x) / stepX;\n\n    // Calculate saturation based on current vertical\n    // pixel and cursor position.\n    float stepY = fft*5.;\n    float sat = 1.0 - floor(stepY * uv.y)/ stepY;\n    \n    // Generate HSB color.\n    vec3 col = hsb2rgb(vec3(\n        hue,\n        sat,\n        1.0\n    ));\n    float y = fft*cos(uv.x*50.*fft+iTime*50.)*0.5+0.5;\n\n    vec3 color = vec3(y);\n    float pct = plot(uv,y);\n    color = pct*vec3(0.0,1.0,0.0);\n    \n    col -= color;\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}