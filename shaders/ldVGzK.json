{
    "Shader": {
        "info": {
            "date": "1455439521",
            "description": "This is my version of the Yin Yang challenge in one tweet that was started by s23b:<br/>https://www.shadertoy.com/view/4sKGRG<br/>Please help me make it better (smaller)",
            "flags": 0,
            "hasliked": 0,
            "id": "ldVGzK",
            "likes": 13,
            "name": "Yin Yang 130 chars!!",
            "published": 3,
            "tags": [
                "short",
                "2tc",
                "onetweet"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 963
        },
        "renderpass": [
            {
                "code": "// 130 chars - coyote does the IMPOSSIBLE by removing the dot product to save another char. WOW!\n\nvoid mainImage(out vec4 o, vec2 i) {\nvec2 r=iResolution.xy, u=(i+i-r)/r.y,\n     a=u*u; a+=a.x; r=abs(u)-a;\n     o += 9. / ( r.y>0. ? (r-.23)*u : --a*u.x).y; }  /*\n\n\n// 117 chars - coyote removed the floats and Fabrice reworked the math for another 2 chars!\n\n#define mainImage(o,I)                      \\\nvec2 R=iResolution.xy, i=I+I-R,\t            \\\n     a=R-R+dot(i/=R.y,i), b=abs(i)-a;       \\\n     o += 9. / ( b.y>0. ? (b-.23)*i : --a*i.x).y\n\n\n// 119 chars - Using the latest #define trick and a few other optimizations\n\n#define mainImage(o,I)\t\t\t\t\t\t\\\nvec2 R=iResolution.xy, i=(I+I-R)/R.y;\t\t\\\nfloat a = dot(i,i), b = abs(i.y);\t\t\t\\\no += 9./(b>a ? (b-a-.23)*i.y : --a*i.x)\n\n    \n// 131 chars - As the TITANS of optimization (Fabrice & coyote) battle, another 2 chars vanish!\n// Added real centering code only added 2 chars.\n// A BIG thank you to coyote and Fabrice ... this is an algorithmic MIRACLE!!\n\nvoid mainImage(out vec4 o,vec2 i)\n{\n\tfloat a = dot(i=(i+i-(o.xy=iResolution.xy))/o.y,i), b = abs(i.y);\n    o += 9./(b>a ? (b-a-.23)*i.y : --a*i.x)-o;\n}\n\n\n// 121 chars - Not centerd version ... Fabrice, once again did the IMPOSSIBLE!!\n\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i/iResolution.y-1. ,i), b = abs(i.y);\n    o += 9./(b>a ? (b-a-.23)*i.y : --a*i.x) - o;\n}\n\n\n// Here it is centered with Fabrice's optimization - 131 chars (-3 chars because of coyote)\n\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti/=iResolution.y*.5;\n    i.x-=.8;\n    float a = dot(--i,i), b = abs(i.y)-a;\n\to += --a*(b>0.? i.y : i.x )*(b-.23)*1e6 -o;\n}\n\n\n// 138 chars - coyote magically made another character disappear \n\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i/iResolution.y-1. ,i), b = abs(i.y)-a;\n\to = vec4( --a*(b-.23) * (i.x+i.y + sign(b)*(i.y-i.x)) > 0. );\n}\n\n\n// Original version at 139 chars by Greg Rostami\n\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i/iResolution.y-1. ,i), b = abs(i.y)-a;\n\to = o-o+sign( --a*(b-.23) * (i.x+i.y + sign(b)*(i.y-i.x)) );\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}