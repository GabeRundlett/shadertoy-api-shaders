{
    "Shader": {
        "info": {
            "date": "1639445016",
            "description": "Without a texture using only a 1D array in code.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl3XRX",
            "likes": 2,
            "name": "1D Array Ersteller",
            "published": 3,
            "tags": [
                "notexture",
                "ersteller",
                "lookuparray"
            ],
            "usePreview": 0,
            "username": "ersteller",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// only 1D arrays but at least with constructor ;(\nconst int[] aiErsteller = int[] (\n      0,0,0,0,0,0,0,\n\t  0,0,0,1,0,0,0,\n\t  0,0,1,1,1,0,0,\n\t  0,0,0,1,0,0,0,\n\t  0,0,0,0,0,0,0,\n\t  1,1,1,1,1,1,1,\n\t  1,0,1,1,1,0,1,\n\t  1,0,1,1,1,0,1,\n      0,0,1,1,1,0,0,\n\t  0,0,1,1,1,0,0,\n\t  0,0,1,0,1,0,0,\n\t  0,0,1,0,1,0,0,\n\t  0,0,1,0,1,0,0,\n\t  0,1,1,0,1,1,0,\n      0,0,0,0,0,0,0\n);\n\nconst vec2 bitmap_size = vec2(7, 15);\n\n\n// input 0 to 1\nvec3 getValueXY( in vec2 uv  )\n{\n\tfloat value = 1.;\n    vec3 col ;\n    // transform to grid pos\n    vec2 fetch_pos = vec2( uv * bitmap_size.y );\n    // check if in array range\n\tif( fetch_pos.x >= 0.  && fetch_pos.y >= 0.\n\t\t&& fetch_pos.x < bitmap_size.x  && fetch_pos.y < bitmap_size.y  )\n\t{\n        // convert x y to index \n\t\tint idx = int(fetch_pos.x) + ( int(bitmap_size.y) - 1 - int(fetch_pos.y)) * int(bitmap_size.x);\n\t\tvalue = float(1 - aiErsteller[idx]); // invert\n        \n        // glitch effect every 3 seconts \n        if (fract(iTime/5.) < 1./5. && value == 0.)\n        {\n            // we use time fraction for random value\n            int frac = int(fract(iTime)*4095.*10.);\n            int y = int(fetch_pos.y);\n            int x = int(fetch_pos.x);          \n            \n            // some kind of random bitwise fun\n            col = vec3( \n                float((frac & 0x00f)^x^y) / 15., \n                float(((frac & 0x0f0)>>4)^x^y) / 15., \n                float(((frac & 0xf00)>>8)^x^y) / 15.\n            );\n            if (int((bitmap_size.y)-fract(iTime/5.)*10.*(bitmap_size)) == y)\n            {\n               return col;\n            }\n        } \n\t} else value = 1.;  // outer color;\n\treturn vec3(value);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize coord (and force square grid aspect ratio)\n\tvec2 uv = vec2(fragCoord.x /iResolution.y,fragCoord.y/iResolution.y);\n    // shift to center\n    uv.x = uv.x-0.6;\n    uv.y = uv.y-0.;\n   \n    vec3 col = getValueXY(uv);\n\n\n\tfragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}