{
    "Shader": {
        "info": {
            "date": "1611010818",
            "description": "Don't get infected.",
            "flags": 8,
            "hasliked": 0,
            "id": "XsG3D3",
            "likes": 1,
            "name": "Ill ðŸ”Š",
            "published": 3,
            "tags": [
                "asdf"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    vec2 up = vec2 (0, 1);\n\tvec2 center = iResolution.xy / 2.;\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 point = center - fragCoord;\n\tfloat angle = angleBetween (up, point);\n    float r = shape (angle + iTime) * ((tan (iTime) * RADIUS / 2.) + RADIUS / 2.);\n    float l = length (point);\n    \n    if (l < r) {\n        fragColor = vec4 (l / RADIUS, 1., 1., 1.);\n    }\n    else {\n        fragColor = vec4 (0.);\n    }\n    \n    vec4 videoColor = texture(iChannel0, uv);\n    \n    fragColor *= videoColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( in int samp, float time )\n{\n    float signal = shape(time) * shape(time * RADIUS);\n    \n    return vec2(VOLUME * signal);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define PI 3.14159\n#define RADIUS 200.\n#define VOLUME 0.1\n// original sin\n#define APPROACH fract\n// original cos\n#define FRONT fract\n#define BACK fract\n\nfloat shape (float angle) {\n    return APPROACH (2. * FRONT (angle) + 1.6 * APPROACH (angle) + 0.5 * BACK (angle) + 1.6 * PI);\n}\n\nfloat angleBetween (vec2 a, vec2 b) {\n    return acos (dot (a, b) / (length (a) * length (b)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}