{
    "Shader": {
        "info": {
            "date": "1676413593",
            "description": "Test of sea  transparency",
            "flags": 0,
            "hasliked": 0,
            "id": "mt2XR3",
            "likes": 20,
            "name": "Mediterranean Sea",
            "published": 3,
            "tags": [
                "wave",
                "sea",
                "reef"
            ],
            "usePreview": 0,
            "username": "guil",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S.Guillitte \n\n#define time -iTime\n\n                                 \nmat2 m2 = mat2(0.8,  0.6, -0.6,  0.8);\n\n\nfloat noise(in vec2 p){\n\n    float res=0.;\n    float f=1.;\n\tfor( int i=0; i< 3; i++ ) \n\t{\t\t\n        p=m2*p*f+.6;     \n        f*=1.2;\n        res+=sin(p.x+sin(2.*p.y));\n\t}        \t\n\treturn res/3.;\n}\n\nvec3 noised(in vec2 p){//noise with derivatives\n\tfloat res=0.;\n    vec2 dres=vec2(0.);\n    float f=1.;\n    mat2 j=m2;\n\tfor( int i=0; i< 3; i++ ) \n\t{\t\t\n        p=m2*p*f+.6;     \n        f*=1.2;\n        float a=p.x+sin(2.*p.y);\n        res+=sin(a);\n        dres+=cos(a)*vec2(1.,2.*cos(2.*p.y))*j;\n        j*=m2*f;\n        \n\t}        \t\n\treturn vec3(res,dres)/3.;\n}\n\n\nfloat fbmabs( vec2 p ) {\n\t\n\tfloat f=.7;   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<12;i++){\t\n\t\tvec3 n = noised(p);\n        r += abs(noise( p*f +n.xz)+.5)/f;       \n\t    f *=1.45;\n        p=m2*p;       \n\t}\n\treturn r;\n}\n\nfloat sea( vec2 p ) \n{\n\tfloat f=.7;   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<6;i++){\t\t\t\n        r += (1.-abs(noise( p*f -.6*time)))/f;       \n\t    f *=1.4;\n        p-=vec2(-.01,.04)*(r+.2*time/(.1-f));\n\t}\n\treturn r/4.+.8;\n}\n\n\n\nfloat rocks(vec2 p){   \n   return 1.-fbmabs(p)*.15;   \n}\n\nvec3 map( vec3 p)\n{\n\tfloat d1 =p.y+ cos(.2*p.x-sin(.5*p.z))*cos(.2*p.z+sin(.3*p.x))+.5-rocks(p.xz);\n    float d2 =p.y-.4*sea(p.xz);\n    //dh = d2-d1;\n    float d = min(d1,d2);\n\treturn vec3(d,d1,d2);\t\n       \t\n}\n\nvec3 normalRocks(in vec2 p)\n{\n\tconst vec2 e = vec2(0.004, 0.0);\n\treturn normalize(vec3(\n\t\trocks(p + e.xy) - rocks(p - e.xy),\n        .008,\n\t\trocks(p + e.yx) - rocks(p - e.yx)\n\t\t));\n}\n\nvec3 normalSea(in vec2 p)\n{\n\tconst vec2 e = vec2(0.002, 0.0);\n\treturn normalize(vec3(\n\t\tsea(p + e.xy) - sea(p - e.xy),\n        .004,\n\t\tsea(p + e.yx) - sea(p - e.yx)\n\t\t));\n}\n\nvec3 sky(in vec2 p)\n{\t\n    return sin(vec3(1.7,1.5,1)+ 2.-fbmabs(p*12.)*.25)+.3;\n}\n\nvec3 march(in vec3 ro, in vec3 rd)\n{\n\tconst float maxd = 35.0;\n\tconst float precis = 0.001;\n    float h = precis * 2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for(int i = 0; i < 128; i++)\n    {\n        if(h < precis*t || t > maxd) break;\n\t    h = map(ro + rd * t).x;\n        t += h*.5;\n    }\n    if(t < maxd) res = t;\n    return vec3(res,map(ro + rd * t).yz);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = vec3(0.);\n   \tvec3 rd = normalize(vec3(p, -2.));\n\tvec3 ro = vec3(0.0, 2.0, -2.+.2*time);\n    vec3 li = normalize(vec3(2., 2., -4.));   \n    \n    vec3 v = march(ro, rd);\n    float t = v.x;\n    float dh = v.z-v.y;\n    if(t > 0.)\n    {\n        \n        vec3 pos = ro + t * rd;       \n        float k=rocks(pos.xz)*2.;       \n        vec3 nor = normalRocks(pos.xz);\n        float r = max(dot(nor, li),0.05)/2.;\n        col =vec3(r*k*k, r*k, r*.8)+.4*exp(-150.*dh*dh);\n        if(dh<0.03){\n        \tvec3 nor = normalSea(pos.xz);\n        \tnor = reflect(rd, nor);\n            col +=vec3(0.9,.2,.05)*dh*1.;\n        \tcol += pow(max(dot(li, nor), 0.0), 5.0)*vec3(.5);\n        \tcol +=.2* sky(nor.xz/(.5+nor.y));\n            \n        }\n\t    col = .1+col;\n        \n\t}\n    else //sky\n        col = sky(rd.xz*(.1+rd.y));\n    \n   \tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}