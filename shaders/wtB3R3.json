{
    "Shader": {
        "info": {
            "date": "1560443648",
            "description": "Alternative version of the NYC artwork (use mouse to explore)",
            "flags": 0,
            "hasliked": 0,
            "id": "wtB3R3",
            "likes": 16,
            "name": "Stairs to Nowhere",
            "published": 3,
            "tags": [
                "raymarch",
                "symmetry",
                "architecture",
                "folly"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "// \"Stairs to Nowhere\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrCapsDf (vec3 p, float r, float h);\nvec3 HexGrid (vec2 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec4 szFlr;\nvec3 sunDir, vnCylOut;\nfloat dstFar, tCur, szFac, flSpc, nFlr, twrRad, bCylRad, bCylHt, dCylOut, bSizeV, cIdV;\nint idObj;\nconst float pi = 3.14159, sqrt3 = 1.73205, sqrt2 = 1.41421;\nconst int idFlr = 1, idStr = 2, idRl = 3, idStn = 4, idCln = 5, idMir = 6;\n\n#define SZ(x) (szFac * (x))\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, stSpc, xLim1, xLim2, bRad, r, a, x;\n  bool topFlr, botFlr;\n  r = length (p.xz) - twrRad;\n  a = 2. * pi * ((floor (6. * atan (p.x, - p.z) / (2. * pi)) + 0.5) / 6.);\n  stSpc = SZ(6.);\n  xLim1 = abs (dot (p.xz, sin (a + vec2 (0.5 * pi, 0.)))) - SZ(22.);\n  xLim2 = xLim1 + SZ(16.);\n  bRad = SZ(0.35);\n  topFlr = (cIdV == 2. * nFlr - 1.);\n  botFlr = (cIdV == 0.);\n  dMin = dstFar;\n  if (topFlr) {\n    d = length (max (abs (vec2 (p.y + 0.5 * szFlr.w, r + szFlr.z + stSpc)) -\n       vec2 (0.5 * szFlr.w, szFlr.z), 0.));\n    DMIN (idFlr);\n    d = max (length (vec2 (p.y + SZ(0.4), abs (r + szFlr.z + stSpc - SZ(0.5))) -\n       (szFlr.z - SZ(0.1))) - bRad, - xLim2);\n    DMIN (idRl);\n  }\n  d = max (length (max (abs (vec2 ((topFlr ? - p.y : abs (p.y)) - flSpc,\n     r - 0.4 * (szFlr.z + stSpc))) - vec2 (szFlr.w, 1.4 * (szFlr.z + stSpc)), 0.)), - xLim1);\n  DMIN (idFlr);\n  d = max (length (max (abs (vec2 (p.y + szFlr.w, r)) - vec2 (szFlr.w,\n     2. * szFlr.z + stSpc + SZ(0.5)), 0.)), xLim2);\n  DMIN (idFlr);\n  p.zx = Rot2D (p.zx, a);\n  p.z = abs (p.z) - twrRad;\n  for (float sz = -1.; sz <= 1.; sz += 2.) {\n    if (! topFlr || sz < 0.) {\n      q.x = abs (p.x) - szFlr.x;\n      q.yz = p.yz - sz * vec2 (szFlr.y - szFlr.w, - (szFlr.z + stSpc));\n      d = abs (q.y) - (szFlr.y - szFlr.w - SZ(0.005));\n      q.xy = vec2 (q.x + sz * q.y, - sz * q.x + q.y) / sqrt2;\n      x = mod (q.x, SZ(sqrt2));\n      d = max (max (max (q.y - min (x, SZ(sqrt2) - x), abs (q.z) - szFlr.z),\n         - SZ(1.) - q.y), d);\n      DMIN (idStr);\n    }\n  }\n  d = max (length (vec2 (p.y + flSpc - SZ(4.), abs (r - szFlr.z) -\n     (2. * szFlr.z + stSpc - SZ(0.8)))) - bRad, - xLim1);\n  DMIN (idRl);\n  d = max (length (vec2 (p.y - SZ(3.5), abs (r - SZ(0.4)) -\n     (2. * szFlr.z + stSpc - SZ(0.1)))) - bRad, xLim2);\n  DMIN (idRl);\n  q = vec3 (abs (p.x) - szFlr.x - SZ(4.), p.y + 0.5 * flSpc,\n     abs (p.z - (szFlr.z + stSpc)) - szFlr.z);\n  d = max (length (vec2 ((q.x + q.y) / sqrt2, q.z)) - bRad,\n     abs (abs (p.x) - szFlr.x) - SZ(8.));\n  DMIN (idRl);\n  q.xz = vec2 (abs (p.x) - szFlr.x + SZ(4.), abs (p.z + szFlr.z + stSpc) - szFlr.z);\n  if (! botFlr) {\n    d = max (length (vec2 ((q.x - (p.y + 1.5 * flSpc)) / sqrt2, q.z)) - bRad,\n       abs (abs (p.x) - szFlr.x) - SZ(8.));\n    DMIN (idRl);\n  }\n  if (! topFlr) {\n    d = max (length (vec2 ((q.x - (p.y - 0.5 * flSpc)) / sqrt2, q.z)) - bRad,\n       abs (abs (p.x) - szFlr.x) - SZ(8.));\n    DMIN (idRl);\n  }\n  q.x = abs (p.x) - SZ(22.);\n  d = min (length (vec2 (q.x, p.y + flSpc - SZ(4.))),\n     length (vec2 (abs (p.x) - SZ(6.), p.y - SZ(3.5)))) - bRad;\n  d = max (d, max (abs (p.z) - (2. * szFlr.z + stSpc), szFlr.z - abs (abs (p.z) -\n     (szFlr.z + stSpc))));\n  DMIN (idRl);\n  q.yz = vec2 (p.y + flSpc - SZ(2.5), abs (abs (p.z) - (szFlr.z + stSpc)) - szFlr.z);\n  d = PrCapsDf (q.xzy, SZ(0.7), SZ(2.));\n  DMIN (idStn);\n  if (! topFlr) {\n    d = length (vec2 (q.x, p.z)) - SZ(0.8);\n    DMIN (idCln);\n    d = max (p.z + 0.7 * twrRad, abs (p.y) - flSpc);\n    DMIN (idMir);\n  }\n  d = PrCapsDf (vec3 (abs (p.x) - SZ(6.), p.y - SZ(2.5), q.z).xzy, SZ(0.7), SZ(2.));\n  DMIN (idStn);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d, eps, sy;\n  eps = 0.0005;\n  dHit = eps;\n  if (rd.y == 0.) rd.y = 0.001;\n  for (int j = 0; j < 220; j ++) {\n    p = ro + dHit * rd;\n    cIdV = floor (p.y / bSizeV);\n    sy = (bSizeV * (cIdV + step (0., rd.y)) - p.y) / rd.y;\n    d = abs (sy) + eps;\n    if (cIdV >= 0. && cIdV < 2. * nFlr) {\n      p.y = p.y - bSizeV * (cIdV + 0.5);\n      d = min (ObjDf (p), d);\n    }\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h, sy;\n  sh = 1.;\n  d = SZ(0.05);\n  for (int j = 0; j < 40; j ++) {\n    p = ro + d * rd;\n    cIdV = floor (p.y / bSizeV);\n    sy = (bSizeV * (cIdV + step (0., rd.y)) - p.y) / rd.y;\n    if (cIdV >= 0. && cIdV < 2. * nFlr) {\n      p.y -= bSizeV * (cIdV + 0.5);\n      h = ObjDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n    } else h = abs (sy);\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.002, -0.002);\n  cIdV = floor (p.y / bSizeV);\n  p.y -= bSizeV * (cIdV + 0.5);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvoid InCylHit (vec3 ro, vec3 rd)\n{\n  vec3 s;\n  float a, b, w, ws, srdy;\n  dCylOut = dstFar;\n  vnCylOut = vec3 (0.);\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - bCylRad * bCylRad);\n  if (w > 0.) {\n    ws = sqrt (w);\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      dCylOut = (- b + ws) / a;\n      s = ro + dCylOut * rd;\n    } else s.y = bCylHt;\n    if (abs (s.y) < bCylHt) vnCylOut.xz = - s.xz / bCylRad;\n    else {\n      dCylOut = (- srdy * ro.y + bCylHt) / abs (rd.y);\n      vnCylOut.y = - srdy;\n    }\n  }\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  float sd;\n  rd = normalize (vec3 (rd.x, max (0.001, rd.y), rd.z));\n  ro.xz += tCur;\n  sd = max (dot (rd, sunDir), 0.);\n  return mix (vec3 (0.2, 0.3, 0.65) + 0.2 * pow (sd, 256.), vec3 (0.9),\n     clamp (3. * (Fbm2 (0.02 * (rd.xz * (100. - ro.y) / rd.y + ro.xz)) - 0.5) * rd.y + 0.1, 0., 1.));\n}\n\nvec3 ShStagGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.5 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, qh, rg;\n  vec2 qw;\n  float hy, hhy, hw, ww, f, b, aa, sRotH, sRotV, sh;\n  InCylHit (ro + vec3 (0., - bCylHt, 0.), rd);\n  if (vnCylOut.y == 0.) {\n    ro += dCylOut * rd;\n    vn = vnCylOut;\n    hy = (ro.y - bCylHt) / bCylHt;\n    hhy = abs (hy) - 0.43;\n    aa = atan (vn.x, - vn.z) / pi;\n    sRotH = mod (48. * 0.5 * (1. + aa) + 0.5, 1.) - 0.5;\n    hw = 0.29;\n    ww = 0.28;\n    qw = abs (vec2 (sRotH, hhy));\n    if (qw.x < ww && qw.y < hw) {\n      qw = abs (qw - 0.5 * vec2 (ww, hw)) - vec2 (0.44 * ww, 0.47 * hw);\n      if (max (qw.x, qw.y) < 0.) col = 0.7 * SkyCol (ro, reflect (rd, vn));\n      else col = vec3 (0.5, 0.5, 0.3) * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n         0.5 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 128.);\n    } else {\n      col = vec3 (0.7, 0.8, 0.7);\n      qw -= vec2 (ww, hw);\n      if (abs (hy) > (1. - 0.85/16.) || max (qw.x, qw.y) < 0.02) {\n        col *= 0.9;\n        vn.xz = Rot2D (vn.xz, - pi * aa);\n        if (abs (hy) > (1. - 0.85/16.)) {\n          sRotV = (1. - abs (2. * SmoothBump (1. - 0.9/16., 0.97, 0.03, abs (hy)) - 1.));\n        } else {\n          sRotV = (1. - abs (2. * SmoothBump (hw, hw + 0.02, 0.02, abs (hhy)) - 1.)) * sign (hhy);\n          vn.xz = Rot2D (vn.xz, 0.4 * pi * sign (sRotH) *\n             (1. - abs (2. * SmoothBump (- (ww + 0.02), ww + 0.02, 0.04, sRotH) - 1.)));\n        }\n        vn.yz = Rot2D (vn.yz, -0.2 * pi * sRotV * sign (hy));\n        vn.xz = Rot2D (vn.xz, pi * aa);\n      } else {\n        qw = 16. * vec2 (12. * aa, hy);\n        rg = ShStagGrid (qw);\n        col *= rg.y * (1. - 0.3 * Noisefv2 (8. * qw));\n        rg.xz *= sign ((abs (vn.x) > 0.5) ? vn.x : vn.z);\n        if (abs (vn.x) > 0.5) {\n          if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n          else vn.xz = Rot2D (vn.xz, rg.x);\n        } else {\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n        }\n      }\n      col = col * (0.4 + 0.6 * max (dot (vn, sunDir), 0.));\n    }\n  } else if (vnCylOut.y > 0.) {\n    ro += dCylOut * rd;\n    b = 1. - smoothstep (-0.1, -0.01, rd.y) * smoothstep (0.4, 0.8, dCylOut / (1.6 * bCylRad));\n    qh = HexGrid (0.75 * ro.xz);\n    f = max (length (qh.xy) - 0.5, 0.) * b;\n    vn = vec3 (0., Rot2D (vec2 (1., 0.), 4. * f * f));\n    vn.zx = vn.z * vec2 (qh.x, - qh.y) / length (qh.xy);\n    vn = VaryNf (64. * ro, vn, 0.2 * b);\n    col = vec3 (0.72, 0.72, 0.75) * (1. - 0.1 * b * Noisefv2 (128. * ro.xz)) *\n       (1. - min (0.2 * b * (1. - smoothstep (0.03, 0.06, qh.z)), 0.1));\n    sh = ObjSShadow (ro, sunDir);\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.));\n  } else col = SkyCol (ro, rd);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, rot, refCol;\n  float dstObj, sh, nDotS;\n  bSizeV = 2. * flSpc;\n  dstObj = ObjRay (ro, rd);\n  rot = ro + dstObj * rd;\n  refCol = vec3 (1.);\n  if (dstObj < dstFar && idObj == idMir && length (rot.xz) < 0.33 * twrRad) {\n    ro = rot;\n    vn = ObjNf (ro);\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    refCol = vec3 (0.7, 1., 1.);\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idFlr) {\n      col4 = vec4 (0.7, 0.4, 0.2, 0.1);\n      if (vn.y > 0.99) col4 *= 0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.05, mod (0.5 * length (ro.xz) / SZ(1.), 1.));\n    } else if (idObj == idStr) {\n      col4 = vec4 (0.6, 0.3, 0.2, 0.1);\n    } else if (idObj == idRl) {\n      col4 = vec4 (0.7, 0.7, 0.9, 0.4);\n    } else if (idObj == idStn) {\n      col4 = vec4 (0.9, 0.9, 0.1, 0.4);\n    } else if (idObj == idCln) {\n      col4 = vec4 (0.6, 0.8, 0.6, 0.2);\n    } else if (idObj == idMir) {\n      col4 = vec4 (0.5, 0.6, 0.6, 0.4);\n    }\n    nDotS = max (dot (vn, sunDir), 0.);\n    if (idObj != idFlr && idObj != idStr) nDotS *= nDotS;\n    sh = ObjSShadow (ro, sunDir);\n    col = col4.rgb * (0.2 + 0.8 * sh * nDotS) + col4.a * step (0.95, sh) * sh *\n       pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else col = BgCol (ro, rd);\n  col *= refCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, azt, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  azt = 0.;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    azt = (1.2/16.) * pi * (floor (0.2 * tCur) + smoothstep (0.9, 1., mod (0.2 * tCur, 1.)));\n  }\n  zmFac = 2.8 + 6. * smoothstep (0.2 * pi , 0.7 * pi, abs (az));\n  az += azt;\n  el = clamp (el, -0.4 * pi, 0.03 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  szFac = 0.2;\n  szFlr = SZ(vec4 (14., 8.5, 4., 0.5));\n  flSpc = 2. * szFlr.y - szFlr.w;\n  nFlr = 3.;\n  twrRad = SZ(60.);\n  bCylRad = 80.;\n  bCylHt = 24.;\n  ro = vuMat * vec3 (0., 1.5 * nFlr * flSpc, - bCylRad + 1.);\n  dstFar = 200.;\n  sunDir = normalize (vec3 (1., 2., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, 0.5 * sqrt3 - q.x + 0.5 * min (q.x - sqrt3 * q.y, 0.));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}