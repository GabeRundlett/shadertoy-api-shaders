{
    "Shader": {
        "info": {
            "date": "1563861608",
            "description": "Testing out stupid ways of sampling points. This one looks like parchment.",
            "flags": 32,
            "hasliked": 0,
            "id": "3lXSzs",
            "likes": 4,
            "name": "Wave Sampling",
            "published": 3,
            "tags": [
                "random",
                "sampling",
                "tracing",
                "path"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 416
        },
        "renderpass": [
            {
                "code": "\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = vec4(pow(col.xyz, vec3(1./2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fdist 0.5\n#define PI 3.1415926\n#define R 0.75\n\nvec2 noise2D(in vec2 uv)\n{\n    mat2 m = mat2(1949.1905, -49181.415689, 5556.895, 1149.8885);\n\treturn fract(m*sin(m*uv));\n}\n\nfloat noise(in vec2 uv)\n{\n    vec2 v = vec2(1484.41456, 189159.141);\n    mat2 m = mat2(1949.1905, -49181.415689, 5556.895, 1149.8885);\n\treturn fract(dot(v, sin(m * uv)));   \n}\n\nfloat noise1D(float t)\n{\n    return fract(138915.1950*sin(8118181.1*t));\n}\n\nvec3 sky(vec3 d)\n{\n\treturn(d.zxy+1.)*0.5;\n}\n\nfloat intersectSphere(vec3 ro, vec3 rd)\n{\n    vec3 C = vec3(0,0,R); \n    vec3 P = ro - C;\n    float dP = dot(rd, P);\n    float disc = dP*dP - (dot(P, P)-R*R);\n    if (disc < 0.)\n    {\n    \treturn -1.;\n    }\n    else\n    {\n        return (-dP+sqrt(disc))*0.5; //can be inside, so check the back distance\n    }\n}\n\n\nvec4 pathtrace(in vec3 ro, in vec3 rd, in vec2 seed)\n{\n    //test primary intersection against sphere\n    float t = intersectSphere(ro, rd);\n    if (t >= 0.)\n    {\n    \treturn vec4(0.);\n    }\n    //check for primary rays missing the scene\n    if (rd.z > 0.) return vec4(sky(rd), 0.);\n    \n    //find ground plane intersection\n\tvec2 uv = ro.xy-rd.xy * ro.z/rd.z;\n    //generate secondary ray according to uniform hemisphere distribution\n    vec2 coords = seed; //theta, phi in spherical coords\n    coords.y *= 2.*PI;\n    coords.x = acos(1.-coords.x);\n    float rho = sin(coords.x);\n    vec3 rd2 = vec3(rho*cos(coords.y), rho*sin(coords.y), cos(coords.x));\n    vec3 ro2 = vec3(uv, 0.);\n    \n    //weight sample by material BRDF\n    vec3 h = normalize(rd2 - rd);\n    float w = pow(max(h.z, 0.), 25.)*20.;\n    w *= rd2.z;\n    //float w = rd2.z; //for diffuse BRDF\n    \n    //check for secondary ray intersection with sphere\n    t = intersectSphere(ro2, rd2);\n    if (t < 0.)\n    {\n    \treturn vec4(w*sky(rd2), 0.);   \n    } else {\n        return vec4(vec3(0.), t);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 oldcol;\n    if (iFrame == 0 || iMouse.z > 1.)\n    {\n    \toldcol = vec4(0.);\n    } else {\n    \toldcol = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n    vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.x;\n    float mxang = iMouse.x/iResolution.x*PI*2.;\n    float myang;\n    if (iMouse.y > 1.)\n        myang = iMouse.y/iResolution.y*PI*0.5;\n    else\n        myang = PI*0.4;\n    float mxc = cos(mxang);\n    float mxs = sin(mxang);\n    float myc = cos(myang);\n    float mys = sin(myang);\n    vec3 ro = vec3(mys*mxc, mys*mxs, myc)*3.*(0.4+myc);\n    vec3 w = -normalize(ro);\n    vec3 up = vec3(0,0,1);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = cross(u, w);\n    vec3 rd = normalize(u*uv.x+v*uv.y+fdist*w);\n    int offset = iFrame;\n    ivec2 coord = ivec2(fragCoord) + ivec2(offset, 10.+10.*sin(float(offset)/10.)).yx;\n    coord %= 1024;\n    vec2 seed = texelFetch(iChannel1, coord, 0).zw;\n    vec4 d = pathtrace(ro, rd, seed);\n    //fragColor = vec4(d.xyz, 1.);\n    fragColor = vec4(mix(d.xyz, oldcol.xyz, oldcol.w/(oldcol.w+1.)), oldcol.w+1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}