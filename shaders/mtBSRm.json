{
    "Shader": {
        "info": {
            "date": "1675828292",
            "description": "gradient color horizontal 2",
            "flags": 0,
            "hasliked": 0,
            "id": "mtBSRm",
            "likes": 0,
            "name": "gradient color horizontal  2",
            "published": 3,
            "tags": [
                "gradientcolorhorizontal2"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "\n\n//The shader code that embeds a 938x84 frame buffer at its largest size without stretching the input\n\nconst vec2 target_resolution = vec2(940, 86);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n\tuv += .5;\n    uv.y -= 0.5/r - 0.5;    \n    \n    //color1/2/3均为可调参数\n    vec4 color1 = vec4(0.639,0.263,0.263,1.0); \n    vec4 color2 = vec4(1.000,0.722,0.478,1.0);\n    vec4 color02 = vec4(0.502,0.667,1.000,1.0);\n    vec4 color3 = vec4(0.000,0.267,1.000,1.0);\n    \n    float PI = 3.1415926;\n    float time = iTime * 0.04; \n    \n    //scale为可调参数\n    float scale = 1.0;\n    //colorStep1为可调参数\n    float colorStep1 = 0.2;\n    //colorStep2为可调参数\n    float colorStep2 = 0.4;\n    float colorStep3 = 1.5;\n    float colorStep4 = 1.9;\n    \n    //float offset  =  floor(time/scale)*scale;\n    float offset = uv.x ;\n    float y = offset;\n    \n    //float y = offset; \n    \n    float step1 = (colorStep1);\n    float step2 = (colorStep2); \n    float step3 = (colorStep3); \n    float step4 = (colorStep3);\n    \n    if (y < step1) {\n    float dist1 = smoothstep(0.0, step1, y);\n    fragColor = mix(color1, color2, dist1);\n    }\n    \n    //红到蓝 step1 - step2\n    else if (y > step1 && y < step2) {\n    float dist2 = smoothstep(step1, step2, y);\n    fragColor = vec4(dist2,dist2,dist2,1.0);\n    fragColor = mix(color2, color02, dist2);\n    }\n    \n    else if (y > step2 && y < step3) {\n    float dist02 = smoothstep(step2, step3, y);\n    fragColor = vec4(dist02,dist02,dist02,1.0);\n    fragColor = mix(color02, color3, dist02);\n    }\n    \n    //蓝到绿 step2 - 1.0\n    else if (y > step3 && y < step4){\n    float dist3 = smoothstep(step3, 1.0 * scale, y);\n    fragColor = vec4 (dist3,dist3,dist3,1.0);\n    fragColor = color3;\n    }\n    \n    fragColor = sqrt(fragColor);\n    \n    float atmosphere = sqrt(1.0-uv.x);\n    \n    //vec3 skyColor = vec3(fragColor.rgb);\n    vec3 skyColor = vec3(0.2,0.4,0.8);\n     \n    float scatter = pow((sin(iTime * .5) * 0.5 + 0.5),1.0 / 1.0);\n    //float scatter = pow(iMouse.x / iResolution.x,1.0 / 15.0);\n    //scatter = clamp(scatter,0.2,1.0);\n    \n    vec3 scatterColor = mix(vec3(1.000,0.412,0.161), vec3(1.000,0.816,0.561)*1.2, scatter);\n    vec3 skyColors = mix(fragColor.rgb,skyColor,scatter);\n    \n    //vec3 color = vec3(atmosphere/1.3,atmosphere/1.3,atmosphere/1.3);\n    vec3 color = mix(skyColors,vec3(scatterColor),pow(atmosphere/1.3,1.5));\n    \n    fragColor = vec4(color,1.0);\n    \n    // Black bars at the sides\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}