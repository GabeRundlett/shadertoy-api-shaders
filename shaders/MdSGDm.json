{
    "Shader": {
        "info": {
            "date": "1389235247",
            "description": "Analytic motion blur. A disk is checked for intersection while moving linearly. The resulting equation is a quadratic that can be solved to compute the time coverage of the swept disk over the pixel over the aperture of the camera (a full frame at 24 hz)",
            "flags": 0,
            "hasliked": 0,
            "id": "MdSGDm",
            "likes": 350,
            "name": "Analytic Motionblur 2D",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "motionblur",
                "motion",
                "analytic"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 23871
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Analytic motion blur, for 2D spheres (disks).\n//\n// (Linearly) Moving Disk - pixel/ray overlap test. The resulting\n// equation is a quadratic that can be solved to compute time coverage\n// of the swept disk behind the pixel over the aperture of the camera\n// (a full frame at 24 hz in this test).\n\n\n\n// draw a disk with motion blur\nvec3 diskWithMotionBlur( in vec3 pcol,    // pixel color (background)\n                         in vec2 puv,     // pixel coordinates\n                         in vec3 dpr,     // disk (pos,rad)\n                         in vec2 dv,      // disk velocity\n                         in vec3 dcol )   // disk color\n{\n\tvec2 xc = puv - dpr.xy;\n\tfloat a = dot(dv,dv);\n\tfloat b = dot(dv,xc);\n\tfloat c = dot(xc,xc) - dpr.z*dpr.z;\n\tfloat h = b*b - a*c;\n\tif( h>0.0 )\n\t{\n\t\th = sqrt( h );\n\t\t\n\t\tfloat ta = max( 0.0, (-b-h)/a );\n\t\tfloat tb = min( 1.0, (-b+h)/a );\n\t\t\n\t\tif( ta < tb ) // we can comment this conditional, in fact\n\t\t    pcol = mix( pcol, dcol, clamp(2.0*(tb-ta),0.0,1.0) );\n\t}\n\n\treturn pcol;\n}\n\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\nvec4 hash4( float n ) { return fract(sin(vec4(n,n+1.0,n+2.0,n+3.0))*43758.5453123); }\n\nconst float speed = 8.0;\nvec2 getPosition( float time, vec4 id ) { return vec2(       0.9*sin((speed*(0.75+0.5*id.z))*time+20.0*id.x),        0.75*cos(speed*(0.75+0.5*id.w)*time+20.0*id.y) ); }\nvec2 getVelocity( float time, vec4 id ) { return vec2( speed*0.9*cos((speed*(0.75+0.5*id.z))*time+20.0*id.x), -speed*0.75*sin(speed*(0.75+0.5*id.w)*time+20.0*id.y) ); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\t\n\tvec3 col = vec3(0.03) + 0.015*p.y;\n\t\n\tfor( int i=0; i<16; i++ )\n\t{\t\t\n\t\tvec4 off = hash4( float(i)*13.13 );\n        vec3 sph = vec3( getPosition( iTime, off ), 0.02+0.1*off.x );\n        vec2 dv = getVelocity( iTime, off ) /24.0 ;\n\t\tvec3 sphcol = 0.55 + 0.45*sin( 3.0*off.z + vec3(4.0,0.0,2.0) );\n\t\t\n        col = diskWithMotionBlur( col, p, sph, dv, sphcol );\n\t}\t\t\n\n    col = pow( col, vec3(0.4545) );\n    \n    col += (1.0/255.0)*hash3(p.x+13.0*p.y);\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}