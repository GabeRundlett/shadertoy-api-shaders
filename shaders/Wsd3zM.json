{
    "Shader": {
        "info": {
            "date": "1568100593",
            "description": "The second shader created live on-stream at https://twitch.tv/codebasealpa as part of the Introduction to Shaders series of streams.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wsd3zM",
            "likes": 4,
            "name": "CodebaseAlpha 2",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "codebasealpha",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "float sdSphere(in vec3 p, in float r)\n{\n  return length(p) - r;\n}\n\nfloat maxComp(in vec3 p)\n{\n  return max(p.x,max(p.y, p.z));\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  vec3  di = abs(p) - b;\n  float mc = maxComp(di);\n  return min(mc, length(max(di, 0.0)));\n}\n\nvoid rot(inout vec2 p, float a)\n{\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c * p.x + s * p.y, -s * p.x + c * p.y);\n}\n\n// soft min function\nfloat smin(float a, float b, float k)\n{\n  float res = exp( -k * a ) + exp( -k * b );\n  return -log( res ) / k;\n}\n\nfloat distanceEstimator(in vec3 p)\n{\n  float d = sdSphere(p, 1.0);\n    \n  for (float x = 0.0; x < 12.0; x++)\n  {\n    vec3 off = vec3(0.0, 0.0, 0.0 +3.0 * sin(0.3 * (iTime + x)));\n    rot(off.xz, x);\n    float sphere = sdSphere(p - off, 0.75);\n    d = smin(d, sphere, 10.0);\n  }\n    \n  float box = sdBox(p - vec3(0.0,-1.0,0.0), vec3(2.0, 0.1, 2.0));\n  \n  return min(box, d);\n}\n\n#define TOLERANCE       0.001\n#define MAX_RAY_LENGTH  32.0\n#define MAX_RAY_MARCHES 60\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n  float t = 0.0;\n  for (int i = 0; i < MAX_RAY_MARCHES; i++)\n  {\n    float distance = distanceEstimator(ro + rd*t);\n    if (distance < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    t += distance;\n  }\n  return t;\n}\n\n// Calculate vector normal to pos\nvec3 normal(in vec3 pos)\n{\n  vec3 eps = vec3(.001,0.0,0.0);\n  vec3 nor;\n  nor.x = distanceEstimator(pos+eps.xyy) - distanceEstimator(pos-eps.xyy);\n  nor.y = distanceEstimator(pos+eps.yxy) - distanceEstimator(pos-eps.yxy);\n  nor.z = distanceEstimator(pos+eps.yyx) - distanceEstimator(pos-eps.yyx);\n  return normalize(nor);\n}\n\n// Specular lighting\nfloat specular(in vec3 nor, in vec3 ld, in vec3 rd)\n{\n  return pow(max(dot(reflect(ld, nor), rd), 0.), 75.);\n}\n\n// Diffuse lighting\nfloat diffuse(in vec3 nor, in vec3 ld)\n{\n  return max(dot(nor, ld),0.0);\n}\n\nfloat softShadow(in vec3 pos, in vec3 ld, float mint, float k)\n{\n  float res = 1.0;\n  float t = mint;\n  for (int i=0; i<32; i++)\n  {\n    float distance = distanceEstimator(pos + ld*t);\n    res = min(res, k*distance/t);\n    t += max(distance, mint*0.2);\n  }\n  return clamp(res,0.25,1.0);\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n  // position of light source\n  vec3 lightPos = -2.0*vec3(1.5, 3.0, -1.0);\n  // background color\n  vec3 skyCol = mix(vec3(0.8, 0.8, 1.0)*0.3, vec3(0.8, 0.8, 1.0)*0.6, 0.25 + 0.75*rd.y);\n  vec3 color  = vec3(0.5, 0.8, 1.0);\n\n  float t = rayMarch(ro,rd);\n\n  if (t < MAX_RAY_LENGTH)\n  {\n    // Ray intersected object\n    vec3 pos = ro + t * rd;\n    vec3 ld = normalize(pos - lightPos);\n    \n    vec3 nor = normal(pos);\n    \n    // diffuse lighting\n    float d = diffuse(nor, ld);\n    // specular lighting\n    float s = specular(nor, ld, rd);\n    \n    float sh = softShadow(pos, ld, 0.01, 16.0);\n    \n    return (color * d + s) * sh;\n  }\n  else\n  {\n    // Ray intersected sky\n    return skyCol;\n  }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 p = fragCoord/iResolution.xy - vec2(0.5);\n  p.x *= iResolution.x/iResolution.y;\n    \n  // camera\n  vec3 ro = 3.0*vec3(2.0, 1.0, 0.2);\n  rot(ro.xz, iTime*0.2);\n  vec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n  vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  // ray direction\n  vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n  vec3 col = render(ro, rd);\n  \n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}