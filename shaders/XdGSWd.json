{
    "Shader": {
        "info": {
            "date": "1467278125",
            "description": "2D signed distance field functions and simple API for drawing 2D graphics. ",
            "flags": 0,
            "hasliked": 0,
            "id": "XdGSWd",
            "likes": 4,
            "name": "2D Graphics",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "dche",
            "viewed": 699
        },
        "renderpass": [
            {
                "code": "\n#define SQRT_2      1.4142135623730951\n#define RECIP_3  \t0.3333333333333333\n\t\nvec2 rotate(vec2 p, float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    mat2 rm = mat2(c, s, -s, c);\n    return rm * p;\n}\n\n// Anti-alias step function\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2( dFdx(value), dFdy(value)));\n    return smoothstep(threshold - afwidth, threshold + afwidth, value);\n}\n\n// union\nfloat opU(float d0, float d1) {\n    return min(d0, d1);\n}\n\n// intersection\nfloat opI(float d0, float d1) {\n    return max(d0, d1);\n}\n\n// substrction\nfloat opS(float d0, float d1) {\n    return max(d0, -d1);\n}\n\n// repeatition\nvec2 opRep(vec2 p, vec2 c) {\n    return mod(p, c) - c * 0.5;\n}\n\n// circle: (center.x, center.y, radius)\nfloat sdCircle(vec2 p, vec3 circle) {\n    return length(p - circle.xy) - circle.z;\n}\n\n// ellipse: (center.x, center.y, a, b)\nfloat sdEllipse(vec2 p2d, vec4 ellipse) {\n    vec2 z = p2d - ellipse.xy;\n    vec2 ab = ellipse.zw;\n\n    // Created by inigo quilez - iq/2013\n    // License Creative Commons\n    // Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n    vec2 p = abs( z ); if( p.x > p.y ){ p=p.yx; ab=ab.yx; }\n\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l; float m2 = m*m;\n    float n = ab.y*p.y/l; float n2 = n*n;\n    float c = (m2 + n2 - 1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float p = acos(q/c3)/3.0;\n        float s = cos(p);\n        float t = sin(p)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float u = sign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        float p = ry/sqrt(rm-rx);\n        co = (p + 2.0*g/rm - m)/2.0;\n    }\n\n    float si = sqrt( 1.0 - co*co );\n\n    vec2 closestPoint = vec2( ab.x*co, ab.y*si );\n\n    return length(closestPoint - p ) * sign(p.y-closestPoint.y);\n}\n\nfloat sdHalfPlane(vec2 p, vec2 plane) {\n    return dot(p, normalize(plane));\n}\n\nfloat sdSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 np = p - a;\n    vec2 ns = b - a;\n    float proj = dot(np, ns) / length(ns);\n    float d = sdHalfPlane(np, vec2(ns.y, -ns.x));\n    float s = sign(d);\n    if (proj < 0.) return s * length(np);\n    if (proj > length(ns)) return s * length(np - ns);\n    else return d;\n}\n\nfloat dSegment(vec2 p, vec2 a, vec2 b) {\n    return abs(sdSegment(p, a, b));\n}\n\nfloat opISeg(float d0, float d1) {\n    if (d0 * d1 > 0.) return min(d0, d1);\n    return max(d0, d1);\n}\n\nfloat sdTriangle(in vec2 p, vec2 p0, vec2 p1, vec2 p2) {\n    float d0 = sdSegment(p, p0, p1);\n    float d1 = sdSegment(p, p1, p2);\n    float d2 = sdSegment(p, p2, p0);\n    return opISeg(d0, opISeg(d1, d2));\n}\n\n// star: (center.x, center.y, radius)\nfloat sdStar(vec2 p, vec3 star) {\n    vec2 np = p - star.xy;\n\n    float d = sdTriangle(np, vec2(0., star.z), vec2(-RECIP_3, 0.) * star.z, vec2(vec2(RECIP_3, 0.) * star.z));\n    for (int i = 1; i < 5; i++) {\n        np = rotate(np, radians(72.));\n        d = opU(d, sdTriangle(np, vec2(0., star.z), vec2(-RECIP_3, 0.) * star.z, vec2(vec2(RECIP_3, 0.) * star.z)));\n    }\n    return d;\n}\n\n// box: (center.x, center.y, half width, half height)\nfloat sdBox(vec2 p, vec4 box) {\n    vec2 np = p - box.xy;\n    vec2 d = abs(np) - box.zw;\n    float de = length(max(d, 0.));\n    float di = max(d.x, d.y);\n    float f = step(0., di);\n    return di * (1. - f) + de * f;\n}\n\n// box: (center.x, center.y, half width, half height)\n// r: corner radius.\nfloat sdRoundedCornerBox(vec2 p, vec4 box, float r) {\n    return sdBox(p, vec4(box.xy, box.zw - r)) - r;\n}\n\n// diamond: (center.x, center.y, helf width, helf height)\nfloat sdDiamond(vec2 p, vec4 diamond) {\n    // rotation 45รยบ.\n    vec2 np = vec2(p.x, p.y * diamond.z / diamond.w) - diamond.xy;\n    float x = SQRT_2 * 0.5 * (np.x - np.y);\n    float y = SQRT_2 * 0.5 * (np.x + np.y);\n    vec2 s = vec2(diamond.z) / SQRT_2;\n    return sdBox(vec2(x, y), vec4(vec2(0.), s));\n}\n\n// heart: (center.x, center.y, half size)\nfloat sdHeart(vec2 p, vec3 heart) {\n    vec2 c = vec2(heart.z) * 0.5;\n    float r = heart.z * 0.5 * SQRT_2;\n    float dd = sdDiamond(vec2(p.x, p.y + r * 0.62), vec4(heart, heart.z));\n    vec2 np = p - heart.xy;\n    float dc = sdCircle(vec2(abs(np.x), np.y + r * 0.62), vec3(c, r));\n    return opU(dd, dc);\n}\n\nvec4 fill(float shape, vec4 color) {\n    return vec4(color.rgb, color.a * (1. - smoothstep(0., 1.5, shape)));\n}\n\nvec4 stroke(float shape, vec4 color, float width) {\n    float w = 1. - aastep(width * 0.5, abs(shape));\n    float a = min(w, 1.);\n    return vec4(color.rgb, color.a * a);\n}\n\nvec3 blend(vec4 fg, vec3 bg) {\n    return mix(bg, fg.rgb, fg.a);\n}\n\n// examples.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy - iResolution.xy * 0.5;\n    vec3 col = vec3(0.1, 0.3, 0.5);\n\n    float d = 0.;\n    \n    // star\n    d = sdStar(p, vec3(150., 30., 100.));\n    col = blend(fill(d, vec4(1., 0.9, 0., 1.)), col);\n\n    // hearts\n    d = sdHeart(opRep(p, vec2(60., 60.)), vec3(0., 0., 12. + 6. * abs(cos(iTime * 4.))));\n    col = blend(fill(d, vec4(0., 0.5, 0., 1.)), col);\n    col = blend(stroke(d, vec4(1., 0.4, 0.6, 1.), 2.), col);\n\n    // transparent box\n    d = sdBox(p, vec4(-120., 10., 40., 60.));\n    col = blend(fill(d, vec4(0.5, 0., 0., 0.7)), col);\n    col = blend(stroke(d, vec4(1.), 5.), col);\n\n    // composition\n    d = sdDiamond(p, vec4(0., 0., 20., 30.)) - 2.;\n    d = opS(d, sdHeart(p, vec3(0., 0., 10.)));\n    col = blend(fill(d, vec4(0., 0.7, 0.8, 1.)), col);\n    col = blend(stroke(d, vec4(1., 0.4, 0.6, 1.), 2.), col);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}