{
    "Shader": {
        "info": {
            "date": "1618430229",
            "description": "Box with analytic gradient inside + outside",
            "flags": 0,
            "hasliked": 0,
            "id": "NslSz7",
            "likes": 1,
            "name": "Box - gradient 3D",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "gradient",
                "normal",
                "box",
                "analytic"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//Rendering code from IQs torus gradient shader https://www.shadertoy.com/view/wtcfzM\n\n\n// Other SDF analytic gradients\n// Egg: https://www.shadertoy.com/view/7dXSz7\n// Oval: https://www.shadertoy.com/view/NdsSRM\n// Disk: https://www.shadertoy.com/view/NdlSR7\n// Box : https://www.shadertoy.com/view/NslSz7\n\n// Other SDF analytic gradients(By IQ):\n//\n// Torus:   https://www.shadertoy.com/view/wtcfzM\n// Capsule: https://www.shadertoy.com/view/WttfR7\n\n//Set to 1 to show the finite difference gradient for comparison\n#define SHOW_NUMERIC_GRADIENT 0\n\n//show inside of box gradient(it shows the gradient at that location in the box, not the gradient of the surface caused by the sphere cut,\n//so the numeric gradients don't match when this is on)\n#define SHOW_INSIDE 0\n\nfloat sgn(float p){\n return p >= 0.0 ? 1.0 : -1.0;\n}\nvec3 sgn(vec3 p){\n return vec3(sgn(p.x), sgn(p.y), sgn(p.z));\n}\n\n//A 3D box with gradient\n// .x = f(p)\n// .y = ∂f(p)/∂x\n// .z = ∂f(p)/∂y\n// .w = ∂f(p)/∂z\n// .yzw = ∇f(p) with ‖∇f(p)‖ = 1\nvec4 sdgBox(vec3 p, vec3 r) {\n    vec3 b = abs(p) - r;\n    vec3 bc = max(b, 0.0);\n    \n    float d2 = dot(bc,bc);   \n    float rSqrtD2 = inversesqrt(d2);\n    \n\tfloat d =  d2 *rSqrtD2;  \n    vec3 grad = bc*rSqrtD2 ;//bc*2.0*rSqrtD2*.5 simplies to this\n    \n    //inside box?\n    if(d2 == 0.f){\n         float mxy = max(b.x,b.y);\n         grad = (b.x > b.y) ? vec3(1.0, 0.0,0.0) : vec3(0.0,1.0,0.0);\n         grad = (b.z > mxy) ? vec3(0.0,0.0,1.0): grad;\n         d = max(mxy, b.z);\n    }\n   \n    return vec4(d, grad*sign(p));//sgn is more correct, but sign portable so using it here\n}\n\n//Do the box thing, and maybe other stuff\nvec4 sdgBoxWrap(vec3 p, float  a, float b) {\n   p.xyz = p.xzy;\n    vec3 box =  vec3(a,b, (a+b)*.5);\n    vec4 r= sdgBox(p,box) ;//\n    r.x -= max(sin(iTime*1.7)*.1,0.0);\n    \n  #if SHOW_INSIDE ==1\n    float spherehole = length(p-box)-.50;\n    if(r.x < -spherehole){\n        r.x = -spherehole;\n       // r.yzw = -normalize(p-box);\n    }\n  #endif\n    r.yzw = (r.ywz);\n    return r;\n}\n\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*(iTime-10.0);\n\tvec3 ro = 1.2*vec3( 1.0*cos(an), 0.65, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, -0.15, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n   \n    // animate torus\n      float ra = 0.5;\n    float rb = 0.2+0.1*sin(iTime);\n    \n    // render    \n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = sdgBoxWrap(pos,ra,rb).x;\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = sdgBoxWrap(pos,ra,rb).yzw;\n\n            // compute normal numerically, for comparison\n            // https://iquilezles.org/articles/normalsSDF\n            #if SHOW_NUMERIC_GRADIENT\n            const vec2 e = vec2(1,-1);\n            const float eps = 0.0002;\n            nor = normalize( e.xyy*sdgBoxWrap( pos + e.xyy*eps, ra, rb ).x + \n                             e.yyx*sdgBoxWrap( pos + e.yyx*eps, ra, rb ).x + \n                             e.yxy*sdgBoxWrap( pos + e.yxy*eps, ra, rb ).x + \n                             e.xxx*sdgBoxWrap( pos + e.xxx*eps, ra, rb ).x );\n       \n\n            #endif\n    //nor =-nor;\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n            col *= (0.5+0.5*nor)*(0.5+0.5*nor);\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}