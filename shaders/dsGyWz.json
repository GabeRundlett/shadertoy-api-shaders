{
    "Shader": {
        "info": {
            "date": "1697661541",
            "description": "https://en.wikipedia.org/wiki/Metaballs\nhttps://www.rapidtables.com/convert/color/hsv-to-rgb.html\nhttps://en.wikipedia.org/wiki/Ordered_dithering\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dsGyWz",
            "likes": 6,
            "name": "HSVMetaballs",
            "published": 3,
            "tags": [
                "animation"
            ],
            "usePreview": 0,
            "username": "chuffrey",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "struct Ball {\n    vec2 pos; // position in px\n    vec2 cen; // center of orbit in px\n    vec2 rad; // orbital radius\n    vec2 chg; // phase change in radians\n    vec2 spd; // oribtal speed in radians per second\n};\n\nvoid updateBall(inout Ball b) {\n    vec2 o = vec2(cos(b.chg.x + b.spd.x * iTime),\n                  sin(b.chg.y + b.spd.y * iTime));\n    b.pos = b.cen + o * b.rad;\n}\n\nconst float radius = 25.0f;\n\nBall[] balls = Ball[] (\n    Ball(vec2(1),vec2(200,250),vec2(80,140),vec2(0.1),vec2(1.0,1.1)),\n    Ball(vec2(1),vec2(400,650),vec2(110,150),vec2(0.5),vec2(0.9,0.5)),\n    Ball(vec2(1),vec2(500,450),vec2(120,120),vec2(0.2),vec2(1.5,1.0)),\n    Ball(vec2(1),vec2(800,475),vec2(140,70),vec2(1.2),vec2(1.2,0.9)),\n    Ball(vec2(1),vec2(1300,275),vec2(90,140),vec2(3.1),vec2(0.7,1.3)),\n    Ball(vec2(1),vec2(1250,645),vec2(85,110),vec2(4.3),vec2(0.9,1.5)),\n    \n    Ball(vec2(1),vec2(210,230),vec2(110,60),vec2(3.2),vec2(1.2,0.7)),\n    Ball(vec2(1),vec2(430,670),vec2(90,80),vec2(4.2),vec2(1.9,0.4)),\n    Ball(vec2(1),vec2(540,440),vec2(120,90),vec2(2.1),vec2(0.7,1.2)),\n    Ball(vec2(1),vec2(850,330),vec2(75,85),vec2(4.2),vec2(0.9,0.4)),\n    Ball(vec2(1),vec2(1370,245),vec2(124,120),vec2(2.1),vec2(0.4,1.8)),\n    Ball(vec2(1),vec2(1250,685),vec2(225,75),vec2(2.7),vec2(1.2,1.0))\n);\n\nconst int ballCt = 12;\n\nvec3 hsvToRgb(vec3 hsv) {\n    float c = hsv.y * hsv.z;\n    float x = c * (1.0 - abs(mod(hsv.x / 60.0, 2.0) - 1.0));\n    float m = hsv.z - c;\n    int bin = int(mod(floor(hsv.x / 60.0),6.0));\n    vec3 rgb;\n    switch (bin) {\n        case 0: rgb = vec3(c,x,0.0); break;\n        case 1: rgb = vec3(x,c,0.0); break;\n        case 2: rgb = vec3(0.0,c,x); break;\n        case 3: rgb = vec3(0.0,x,c); break;\n        case 4: rgb = vec3(x,0.0,c); break;\n        case 5: rgb = vec3(c,0.0,x); break;\n    }\n    rgb + m;\n    return rgb;\n}\n\nconst float[] dither = float[] (\n     0.0/16.0,  8.0/16.0,  2.0/16.0, 10.0/16.0,\n    12.0/16.0,  4.0/16.0, 14.0/16.0,  6.0/16.0,\n     3.0/16.0, 11.0/16.0,  1.0/16.0,  9.0/16.0,\n    15.0/16.0,  7.0/16.0, 13.0/16.0,  5.0/16.0\n);\nconst int ditherSize = 16;\n\nconst float pxf = 8.0; // pixelation factor\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ires = ivec2( // integer pixelized resolution size\n        trunc(iResolution.x / pxf),\n        trunc(iResolution.y / pxf));\n        \n    ivec2 ifc = ivec2( // integer pixelized frag coord\n        trunc(fragCoord.x / pxf),\n        trunc(fragCoord.y / pxf));\n    \n    vec2 efc = vec2(ifc) * pxf;\n    float sum = 0.0;\n    for (int i=0; i<ballCt; i++) {\n        updateBall(balls[i]);\n        sum += radius / distance(efc, balls[i].pos);\n    }\n\n    int ditherX = int(mod(float(ifc.x), 4.0));\n    int ditherY = int(mod(float(ifc.y), 4.0));\n    \n    float ditherThresh = dither[ditherY * 4 + ditherX];\n    \n    vec3 hsv = vec3(\n        round(mod(sum,1.0)*16.0)/16.0*360.0,\n        1.0,step(ditherThresh,sum));\n    \n    \n    // Output to screen\n    fragColor = vec4(hsvToRgb(hsv),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}