{
    "Shader": {
        "info": {
            "date": "1651529722",
            "description": "lots of unused code",
            "flags": 0,
            "hasliked": 0,
            "id": "NtXfDX",
            "likes": 8,
            "name": "Pixel Thing 98761",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define pi 3.14159\n\nfloat line(in vec2 f, in vec2 p, in vec2 q) { \n    // Translate space. We consider 0,0 to p-q\n    f -= p;\n    \n    vec2 pq = p - q;   \n    float a = atan(pq.x, pq.y) + pi / 2.;\n    \n    // Rotate f\n    float c = cos(a), s = sin(a);    \n    float x = c * f.x - s * f.y;\n    float y = s * f.x + c * f.y;\n\n    // Split space into 1 (above rotated y), 0 (below)\n    float e = step(y, 0.);\n\n    // Do the same for 4 neighbouring cells (in non-rotated space)\n    float t = step(y,  c);\n    float b = step(y, -c);\n    float r = step(y,  s);\n    float l = step(y, -s);  \n     \n    // If some neighbours are different, we draw a line\n    // Otherwise, we don't (0 0 0 0, 1 1 1 1 -> 0 )  \n    float m = max(max(t,b),max(l,r)) - min(min(t,b),min(l,r));\n    // m = step(1., mod(t + b + l + r, 4.));\n    \n    // Center x at d (in rotated space). Only include cells within d of it.\n    // (only include cells between p and q)\n    float d = 0.5 * length(pq);  \n    return e * m * step(abs(x - d), d);   \n}\n\nvec2 edge(vec2 p) {\n    vec2 p2 = abs(p);\n    if (p2.x > p2.y) return vec2((p.x < 0.) ? -1. : 1., 0);\n    else             return vec2(0., (p.y < 0.) ? -1. : 1.);\n}\n\nfloat circle(vec2 coord, float r) {\n    float d = length(coord);     \n    float d2 = length(coord + edge(coord));   \n    return step(d,r) - step(d2, r);\n}\n\nfloat v(vec2 f, float o) {\n    float t = iTime;\n    f.y += 0.2 * f.x * thc(400., 0.15 * f.x  - 2.5 * t + o);\n    return step(f.y, \n    32. * thc(100., -2. * t + 0.15 * f.x + 0.5 * thc(4., 10.5 * f.y - t) ));    \n}\n\nfloat test(vec2 f, float o) {  \n    float e = v(f, o);\n    \n    float t = v(f + vec2(0,1), o);\n    float b = v(f - vec2(0,1), o);\n    float l = v(f + vec2(1,0), o);\n    float r = v(f - vec2(1,0), o);\n    float m = max(max(t,b),max(l,r)) - min(min(t,b),min(l,r));\n    return e * m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 3.;\n\n    float sc = 42.;\n    vec2 ipos = floor(sc * uv) + 0.5;\n\n    float o = 2. * pi / 3.;\n    vec3 col = vec3(test(ipos, 0.),\n                    test(ipos, -o),\n                    test(ipos, o));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}