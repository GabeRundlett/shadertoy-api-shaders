{
    "Shader": {
        "info": {
            "date": "1702864304",
            "description": "Use mouse to zoom, change the #define eqy to input equation\n\nImprovements for the plot shader.\n\nI tried to improve the grid and line rendering.\n\nThere are some unexpected behavior in the plot, for example, pow(x, x) doesn't render correctly.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctGBWw",
            "likes": 1,
            "name": "014 - Plot v2",
            "published": 3,
            "tags": [
                "beginner",
                "plot"
            ],
            "usePreview": 0,
            "username": "PiGIon",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "// 2022.08.02 rev 1\n// 2022.08.02 rev 2 - fix plot errors for pow when x and y < 0.\n// 2022.08.02 rev 3 - fix plot errors when result isinf\n// 2023.12.17 rev 4 - implement better grid and line thickness, add t constant for time\n\n//#define eqy sin(x)\n//#define eqy x*x*x\n//#define eqy pow(x, x)\n//#define eqy x\n//#define eqy x*x\n//#define eqy pow(x, 4.)\n//#define eqy cos(x-t)\n\n// from https://www.mzrg.com/math/graphs.shtml\n#define eqy div(sin(t*5.+pow(x, x)), pow(2., div((pow(x, x)-PI/2.), PI)))\n\n\n\n// tells if the result is undefined, e.g. pow(-1, -1)\nbool undefinedResult = false;\n\n// avoids undefined behavior when x < 0 && y < 0\nfloat safePow(float x, float y) {\n    if (x < 0. || (x == 0. && y <= 0.))\n        undefinedResult=true;\n    \n    float res = pow(x, y);\n    if (isinf(res))\n        undefinedResult=true;\n\n    return res;\n}\nfloat safeDiv(float x, float y) { return x/(y + 0.00000000001); }\n\n#define PI 3.14159265\n#define pow safePow\n#define div safeDiv\n#define t (iTime+iTimeDelta)\n\n// equation to plot that defines y based on x\n\n\nfloat invuv(float scale, vec2 uv, vec3 res) {\n    return 2. / scale;\n}\n\nfloat gridLine(vec2 c, vec2 fragCoord, float size) {\n    vec2 g = floor(mod(c - fragCoord, size));\n    return g.x*g.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 O;\n    // controls the scale, or, in another word, the zoom of the plot\n    float scale = (iMouse.x + iResolution.x/3.)/iResolution.x + 0.00001;\n    vec2 uv = ((2. * fragCoord - iResolution.xy) / iResolution.y) / scale;\n    \n    // determine the minimum size for a x pixels in the screen\n    float line = scale/iResolution.y * 10.;\n    float antiAlias = (scale * 1.5)/iResolution.y; // higher scale requires more antiAlias\n    \n    vec3 plot = vec3(.96, 0.1, 0.06);\n    vec3 bg = vec3(.993, .992, 0.995);\n    vec3 grid = vec3(0.53, 0.53, 0.53);\n    \n    // distance from center of screen, mod the grid size\n    vec2 ms = floor(vec2(iResolution.x/2., iResolution.y/2.));\n    float gs = (iResolution.y/2.)*scale;\n    float sg = scale > 0.7 ? 10.:5.;\n    float g = gridLine(ms, fragCoord, gs) *\n                gridLine(ms, fragCoord + 1., gs) *\n                gridLine(ms, fragCoord, gs/sg);\n    vec2 d = abs(floor(ms - fragCoord));\n    float h = gs/(sg*2.);\n    float dist = 5. * scale;\n    float dashs = step(h, d.y) + floor(mod(d.x, h)) * floor(mod(d.x+1., h));\n    dashs *= step(h, d.x) + floor(mod(d.y, h)) * floor(mod(d.y+1., h));\n    \n    // cool effect\n    //float g = normalize(floor(mod(abs(ms - fragCoord), gridSize))).y + iTime;\n    bg = mix(grid, bg, g*dashs);\n\n    // calculate function and distance to current pixel\n    float x = uv.x;\n    float yOfx = eqy;\n    vec2 p = vec2(uv.x, yOfx);\n    float delta = step(0.01/scale, distance(uv, p));\n\n    if (!undefinedResult) {\n        O = mix(plot, bg, smoothstep(line - antiAlias, line + antiAlias, delta));\n    } else {\n        O = bg;\n    }\n\n    // Output to screen\n    fragColor = vec4(O, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}