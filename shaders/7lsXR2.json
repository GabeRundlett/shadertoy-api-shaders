{
    "Shader": {
        "info": {
            "date": "1626119791",
            "description": "Another variation of KilledByAPixel's Voxel Fractal:\n[url]https://www.shadertoy.com/view/NlB3Rz[/url]\nRain code from P_Malin's SmallStars\n[url]https://www.shadertoy.com/view/Ml2XDt[/url]",
            "flags": 64,
            "hasliked": 0,
            "id": "7lsXR2",
            "likes": 19,
            "name": "XOR Towers in Fog & Rain",
            "published": 3,
            "tags": [
                "3d",
                "voxel",
                "fog",
                "city",
                "lights",
                "short"
            ],
            "usePreview": 1,
            "username": "GregRostami",
            "viewed": 822
        },
        "renderpass": [
            {
                "code": "// Added rain code from P_Malin\n// You can toggle features by placing a comment \"//\" in front of each line that has a \"*\" in comments.\nvoid mainImage(out vec4 o, vec2 u)\n{ \n    ivec4 b = ivec4(o -= o);                   // Initialize b=0\n     vec2 R = iResolution.xy;\n    float t = .1*iTime, B, h, z;\n            \n    u =\n        (2. + cos(t)) *                        // * Camera push in/out \n        (u+u-R)/R.y                            //   Center coordinates\n        * mat2( cos( vec4(0,33,55,0) - .1*t))  // * Rotate camera\n        ;\n            \n    for ( z = (h = cos(B = ceil(atan(u.x, u.y) * 2e2))) / dot(u,u); //Variables for Rain\n          (b.x^b.y^b.z)%99 > b.z-8 ; )         // The XOR function for towers!!\n          b = ivec4(u * o.a + 2e2\n                + vec2(7,30)*t                 // * Move camera (x,y)\n                , o+=.1 );                     // Increment layer\n                \n    o =\n        o.a < 8.1 ? .1+sin(t/.1)*vec4(b%32 & b.x%9 & b.z%9) :  // * Blinking lights\n        o/70. - .02 *                                          // * Distance fog\n        vec4(b%3)                                              // * building colors\n        + .06 * texture( iChannel1, .02*u - .03*t ).r          // * Moving fog\n        + .01 * max(exp(fract(h * B - z + t+t) * -1e2) / z,0.) // * Rain\n        ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 27797,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/appy-the-gm/blade-runner-blues-vangelis-hd"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}