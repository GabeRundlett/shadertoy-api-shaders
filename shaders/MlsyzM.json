{
    "Shader": {
        "info": {
            "date": "1504138973",
            "description": "Simple circle effect",
            "flags": 0,
            "hasliked": 0,
            "id": "MlsyzM",
            "likes": 18,
            "name": "Circle effect",
            "published": 3,
            "tags": [
                "2d",
                "circles"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 764
        },
        "renderpass": [
            {
                "code": "/*\nCopyright (c) <2018> <Felix Potthast>\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software\nand associated documentation files (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies\nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n//#define SOLID_COLOR\n\nconst float pi=3.1416;\n\nfloat hash(float n){return fract(sin(n)*43758.5453);}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect_ratio=iResolution.x/iResolution.y;\n    float channel_ar=iChannelResolution[0].x/iChannelResolution[0].y;\n    \n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\tuv-=.5;\n\tuv.x*=iResolution.x/iResolution.y;\n\n    float border = 2./iResolution.y;\n\n\tuv*=1.05;\n\tborder*=1.05;\n\n\tvec2 mouse=iMouse.xy/iResolution.xy;\n\tmouse-=.5;\n    mouse.x*=iResolution.x/iResolution.y;\n\n\tfloat t0=2.5*mod(iTime,100.);\n\n\tvec3 bg_col=vec3(1);\n\tvec3 line_col=vec3(0);\n\n\tconst float max_circle_rad=.02;\n\tconst float circle_dis=3.*max_circle_rad;\n\n\tvec3 color=bg_col;\n\n\tconst float num_circles=50.;\n\n\tfor(float i=0.;i<num_circles;i+=1.){\n\n\t\tfloat index=i+floor(t0);\n\n\t\tvec2 circle_center;\n\n\t\tconst float num_offsets=3.;\n\t\tconst float offset_factor=1./num_offsets;\n\n\t\tfor(float j=0.;j<num_offsets;j+=1.){\n\t\t\tif(mod(index,num_offsets)==j){\n\t\t\t\tcircle_center=floor(uv/circle_dis+.5-j*offset_factor)*circle_dis+j*offset_factor*circle_dis;\n\t\t\t}\n\n\t\t}\n\n\t\tfloat circle_rad=max_circle_rad;\n\n\t\tfloat random_val1=dot(circle_center,vec2(2.309870295738217,9.237549175982))+2.92746193956+index;\n\t\tfloat random_val2=dot(circle_center,vec2(1.9472658,0.718593652))+0.19726489+index;\n\t\tfloat random_val3=dot(circle_center,vec2(0.275827165832,6.3918475623718))+2.092359087+index;\n\n\t\tcircle_center+=(circle_dis-(2.*circle_rad+border))*(vec2(hash(random_val1),hash(random_val2))-.5);\n\t\tcircle_rad-=circle_rad*.3*hash(random_val3);\n\n\t\tfloat dis=distance(circle_center,uv)-circle_rad;\n\n\t\t#ifdef SOLID_COLOR\n\t\tvec4 tex_col=texture(iChannel0,clamp(vec2(1./channel_ar,1)*circle_center+vec2(0.5),vec2(0),vec2(1)));\n\t\t#else\n\t\tfloat t1=(distance(uv,circle_center)/circle_rad)*2.*pi;\n\t\tvec2 dir=vec2(sin(t1),cos(t1));\n\t\tvec4 tex_col=texture(iChannel0,clamp(vec2(1./channel_ar,1)*circle_center+vec2(0.5)+distance(uv,circle_center)*dir,vec2(0),vec2(1)));\n\t\t#endif\n\n\t\tvec3 circle_col=mix(color,tex_col.rgb,tex_col.a);\n\n\t\tif(i==0.){\n\t\t\tcircle_col=mix(color,circle_col,smoothstep(1.,0.,fract(t0)));\n\t\t}\n\t\telse if(i==num_circles-1.){\n\t\t\tcircle_col=mix(color,circle_col,smoothstep(0.,1.,fract(t0)));\n\t\t}\n\n\t\tcolor=mix(circle_col,color,smoothstep(0., border, dis));\n\t}\n\n\tfragColor=vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}