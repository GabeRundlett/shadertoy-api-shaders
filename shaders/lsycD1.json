{
    "Shader": {
        "info": {
            "date": "1521806152",
            "description": "It works now",
            "flags": 0,
            "hasliked": 0,
            "id": "lsycD1",
            "likes": 2,
            "name": "Reflect Learn ",
            "published": 3,
            "tags": [
                "3d",
                "reflection",
                "sdf"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 764
        },
        "renderpass": [
            {
                "code": "#define EPS 0.002\n#define STEPS 1028\n#define FAR 1000.0\n#define PI acos( -1.0 )\n\nvec3 pMod( vec3 p, float d )\n{\n\n    float hal = d * 0.5;\n    return mod( p + hal, d ) - hal;\n    \n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    \n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n\n}\n\nvec2 map( vec3 p )\n{\n \n    /*vec2 pla = vec2( p.y + 2.3, 0.0 );\n    p.x += iTime;\n    p = pMod( p, 5.0 );\n    vec2 cub = vec2( sdBox( p, vec3( 1.0 ) ), 1.0 );\n    if( cub.x < pla.x ) pla = cub;\n    return pla;*/\n    //float dis = 3.0;\n    //p = mod( p, dis ) - dis * 0.5;\n    float r = 2.0 + 0.25 * cos( 5.0 * p.x + iTime * 2.0 ) * cos( 5.0 * p.z + iTime * 2.0 )\n              * cos( 5.0 * p.y );\n    float w = 2.0 + 0.15 * cos( 10.0 + p.z + iTime ) * sin( 2.0 * p.x );\n    vec2 pla = vec2( p.y + 2.0, 1.0 );\n    //p = pMod( p, 15.0 );\n    vec2 sph = vec2( length( p ) - r, 0.0 );\n    if( sph.x < pla.x ) pla = sph;\n    return pla;\n\n}\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          )\n                     );\n\n}\n\nfloat softShadows( vec3 ro, vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n        float h = map( ro + rd * t ).x;\n    \tif( h < EPS ) return 0.0;\n        res = min( res, 8.0 * h / t );\n\n    } \n    \n    return res;\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    vec3 col = vec3( 0.0 );\n    float t = 0.0;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n    \td = 0.5 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        t += d;\n        \n    }\n\n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 col = vec3( 0.0 );\n    vec3 ref = reflect( rd, n );\n    vec3 cub = pow( texture( iChannel0, reflect( rd, p ) ).rgb, vec3( 6.0 ) );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float bac = max( 0.0, 0.5 + 0.2 * dot( blig, n ) );\n    float dif = max( 0.0, dot( lig, n ) );\n    float sha = softShadows( p, lig );\n    float spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    float speO = pow( clamp( dot( ref, blig ), 0.0, 1.0 ), 16.0 );\n    \n    col += 0.2 * amb; \n    col += 0.4 * dif;\n    col += 0.2 * bac;\n    col += 1.0 * spe;\n    col += 1.0 * speO;\n    //col += 1.0 * sha;\n    col = pow( col, vec3( 0.2 ) );\n    if( map( p ).y == 0.0 ) col *= n + 0.1 * cub;\n    if( map( p ).y == 1.0 ) col *= vec3( 1.0 );\n    \n    col *= sqrt( col );\n    \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = vec3( 0.0 );\n    if( mou.x == 0.0 )\n    \tro = 5.0 * vec3( sin( -2.0 + iTime * 0.2 ), mou.y, cos( 2.0 + iTime * 0.2 ) );\n    else if( mou.x != 0.0 )\n        ro = 5.0 * vec3( sin( mou.x * PI * 2.0 ), sin( mou.y ), cos( -mou.x * PI * 2.0 ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n    vec3 col = d < EPS ? shad( ro, rd ) : vec3( 0.0 );\n    \n    if( map( p ).y == 1.0 )\n\n    rd = normalize( reflect( rd, n ) );\n    ro = p + rd * EPS;\n\n    if( d < EPS ) col = shad( ro, rd );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}