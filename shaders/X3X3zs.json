{
    "Shader": {
        "info": {
            "date": "1707816196",
            "description": "One more intermediary step before going to https://en.wikipedia.org/wiki/Order-4_pentagonal_tiling",
            "flags": 0,
            "hasliked": 0,
            "id": "X3X3zs",
            "likes": 6,
            "name": "Voronoi grid 3",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "sig",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "vec2 cell = vec2(0.2, 0.2);\n\nvec2 expi(float angle) {\n    return vec2(cos(angle), sin(angle));\n}\n\nvec2 point(int x, int y) {\n    float t = mod(iTime, 10.0) / 10.0;\n    vec2 from = cell * vec2(x, y);\n    float odd = float((1000 + x + y) % 2);\n    float even = 1.0 - odd;\n    vec2 to = cell * (odd * vec2(x ^ 1, y) + even * vec2(x, y ^ 1));\n    return t * from + (1.0 - t) * to;\n}\n\nfloat switch_interval = 2.0;\nfloat dist(vec2 a, vec2 b) {\n    float T = 2.0; // mod(iTime, switch_interval * 6.) / switch_interval;\n    switch(int(T)) {\n    case 0: return abs(a.x-b.x) + abs(a.y-b.y); // 1-d \"manhattan\"\n    case 1:\n    case 2: \n    case 3: \n    case 4: return pow(pow(abs(a.x-b.x), T) + pow(abs(a.y-b.y), T), 1./T);\n    case 5: return max(abs(a.x-b.x), abs(a.y-b.y)); // inf-d \"\"\n    }\n}\n\nfloat BORDER_R = 0.01;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float min_d = 666.;\n    vec2 min_c = p;\n    float hilite = 0.;\n    float border = 0.;\n    vec2 pp = p;\n    int ix = int(pp.x / cell.x);\n    int iy = int(pp.y / cell.y);\n    for (int idy = -2; idy < 3; idy++) {\n        for (int idx = -2; idx < 3; idx++) {            \n            vec2 c = point(ix + idx, iy + idy);\n            float d = dist(c, p);\n            hilite += d < 0.05 ? d : 0.0;\n            float dd = d - min_d;\n            if (dd < BORDER_R) {\n                if (dd < -BORDER_R) {\n                    min_d = d;\n                    min_c = c;\n                    border = 0.0;\n                } else {\n                    border = 1.0 - abs(dd) / BORDER_R;\n                }\n            }\n        }\n    }\n\n    vec3 col = 0.5 + hilite + 0.5*cos(iTime+min_c.xyx+vec3(0,2,4)) - border;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}