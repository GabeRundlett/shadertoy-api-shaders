{
    "Shader": {
        "info": {
            "date": "1656423728",
            "description": "Happy shappy shapes",
            "flags": 32,
            "hasliked": 0,
            "id": "fsdfW8",
            "likes": 18,
            "name": "Dreamy Geometry",
            "published": 3,
            "tags": [
                "abstract",
                "dream",
                "kif",
                "softracer"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "\n\n// Dreamy Geometry by Leon Denise 2022-06-28\n// using code from Inigo Quilez, Dave Hoskins, Blackle, NuSan and many more\n\n// Softracing geometry sketch using temporal accumulation to trace motion\n// trying a trick of floored hashed seeds to duplicate shapes\n// a remix of Taste of Noise 7 https://www.shadertoy.com/view/NddSWs\n\n// code is in Buffer A\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nfloat delay = 15.;\n\nfloat anim, aanim, seed, index, ttime, rng1, rng2;\nvec3 rng, rndMove1, rndMove2, rndMove3, rndMove4, rndScale1, cam;\nvec4 rndRot1, rndRot2;\n\nfloat map (vec3 pos)\n{\n    vec3 p = pos;\n    float dist = 100.;\n    float shape = 100.;\n\n    // expansion anim\n    float r = .01*rng.x+.4*aanim;\n    float t = r*.1+index+aanim;\n\n    // twist and fold\n    const float count = 3.;\n    float a = 1.;\n    for (float index = 0.; index < count; ++index)\n    {\n        p.xy *= rot(t/a);\n        p.xz *= rot(t/a);\n        p = abs(p)-r*a;\n        a /= 2.8;\n    }\n\n    // shapes\n    dist = length(p)-0.01; // curves\n    dist = smin(dist, length(pos)-.1, .1); // kernel\n    shape = max(abs(length(pos)-.5)-.01, pos.z-.1); // cocoon\n    shape = min(shape, length(pos+rndMove1*.8)-.1*rng1); // spheres\n\n    // tubes\n    p = rndrot(pos, rndRot1) + rndMove2 * .5;\n    shape = smin(shape, max(abs(p.y)-2.*aanim, length(p.xz)-.02), .2);\n\n    // rings\n    p += rndMove3 * 1.5;\n    shape = smin(shape, sdTorus(p, vec2(.2,.01) * rng2), .2);\n\n    // boxes\n    p = rndrot(pos, rndRot2) + rndMove4 * 2.;\n    shape = min(shape, sdBoxFrame(p, rndScale1*.5, .01));\n\n    // blend\n    dist = smin(dist, shape, .1);\n    return dist;\n}\n\n\n// NuSan \n// https://www.shadertoy.com/view/3sBGzV\nvec3 getNormal (vec3 pos, float e) {\n    vec2 noff = vec2(e,0);\n    return normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // timeline\n    ttime = iTime/delay;\n    anim = fract(ttime);\n    index = floor(ttime);\n    aanim = pow(anim, .5);\n\n    // randoms\n    rng = hash33(vec3(gl_FragCoord.xy, iTime));\n    seed = floor(rng.y*32.)+index*72.;\n    rng1 = hash11(seed);\n    rng2 = hash11(seed+763.);\n    rndMove1 = normalize(tan(hash31(seed)*2.-1.));\n    rndMove2 = hash31(seed+76.)*2.-1.;\n    rndMove3 = hash31(seed+192.)*2.-1.;\n    rndRot1 = hash41(seed)*2.-1.;\n    seed = floor(rng.x*32.)+index*76.;\n    rndMove4 = hash31(seed+32.)*2.-1.;\n    rndScale1 = hash31(seed+65.);\n    rndRot2 = hash41(seed)*2.-1.;\n    cam = (hash31(index)*2.-1.)*.5 + vec3(0,0,4.5);\n    vec3 blur = hash33(vec3(gl_FragCoord.xy, iTime))*2.-1.;\n\n    // coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec3 at = vec3(0);\n    vec3 ray = lookAt(cam, at, p, .5+.5*length(cam));\n    blur *= 0.1 * ss(.5, 1., length(p));\n    vec3 pos = cam + ray * rng.z + blur;\n\n    // ray shooting\n    float shade = 0.;\n    const float count = 30.;\n    for (shade = 1.; shade > 0.; shade -= 1./count) {\n        float dist = map(pos);\n        if (dist < .001) break;\n        dist *= .5 + 0.5 * rng.z;\n        pos += ray *dist;\n    }\n\n    // coloring\n    vec3 color = vec3(1);\n    vec3 normal = getNormal(pos, .001);\n    float angle = abs(dot(ray, normal));\n    color = .5+.5*cos(vec3(1,2,3)*2.+pos*3.+normal);\n    color = mix(color, vec3(1), angle);\n    color *= shade*shade;\n\n    // fade in\n    color *= ss(.0,1./delay,anim);\n\n    // temporal accumulation\n    vec4 frame = texture(iChannel0, uv);\n    color = max(frame.rgb, color);\n\n    // fade out\n    if (anim * delay > delay - 1.)\n    {\n        color = frame.rgb;\n        color -= iTimeDelta;\n    }\n\n    fragColor = vec4(color, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define ss(a,b,t) smoothstep(a,b,t)\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n// blackle\n// https://suricrasia.online/demoscene/functions/\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\nvec3 rndrot(vec3 p, vec4 rnd) {\n  return erot(p, normalize(tan(rnd.xyz)), rnd.w*3.1415);\n}\n\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvec3 hash31(float p) {\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\nvec3 hash32(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec4 hash41(float p){\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}