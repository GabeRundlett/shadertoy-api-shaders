{
    "Shader": {
        "info": {
            "date": "1475865779",
            "description": "Experimenting with normals and simplex noise.\nif anybody know how I can fight the atmosphere aliasing, please teach me :D",
            "flags": 0,
            "hasliked": 0,
            "id": "XlVGR3",
            "likes": 64,
            "name": "Atmospheric Moon",
            "published": 3,
            "tags": [
                "normals",
                "planet",
                "simplex3d"
            ],
            "usePreview": 1,
            "username": "capitanNeptune",
            "viewed": 3636
        },
        "renderpass": [
            {
                "code": "// all noise from iq!\n\n#define time iTime\n\n// INNER ATMOS PROPIETIES:\n    // inner atmos inner strenght\n    #define in_inner 0.2\n    // inner atmos outer strenght\n    #define in_outer 0.2\n\n// OUTER ATMOS PROPIETIES:\n    // inner atmos inner strenght\n    #define out_inner 0.2 \n    // inner atmos outer strenght\n    #define out_outer 0.4 // 0.01 is nice too\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,128.852))) * 43758.5453)*2.0-1.0;\n}\n\nfloat simplex3D(vec3 p)\n{\n\tfloat f3 = 1.0/3.0;\n\tfloat s = (p.x+p.y+p.z)*f3;\n\tint i = int(floor(p.x+s));\n\tint j = int(floor(p.y+s));\n\tint k = int(floor(p.z+s));\n\t\n\tfloat g3 = 1.0/6.0;\n\tfloat t = float((i+j+k))*g3;\n\tfloat x0 = float(i)-t;\n\tfloat y0 = float(j)-t;\n\tfloat z0 = float(k)-t;\n\tx0 = p.x-x0;\n\ty0 = p.y-y0;\n\tz0 = p.z-z0;\n\tint i1,j1,k1;\n\tint i2,j2,k2;\n\tif(x0>=y0)\n\t{\n\t\tif\t\t(y0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order\n\t\telse if\t(x0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order\n\t\telse \t\t\t{ i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; } // Z X Z order\n\t}\n\telse \n\t{ \n\t\tif\t\t(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order\n\t\telse if\t(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order\n\t\telse \t\t\t{ i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order\n\t}\n\tfloat x1 = x0 - float(i1) + g3; \n\tfloat y1 = y0 - float(j1) + g3;\n\tfloat z1 = z0 - float(k1) + g3;\n\tfloat x2 = x0 - float(i2) + 2.0*g3; \n\tfloat y2 = y0 - float(j2) + 2.0*g3;\n\tfloat z2 = z0 - float(k2) + 2.0*g3;\n\tfloat x3 = x0 - 1.0 + 3.0*g3; \n\tfloat y3 = y0 - 1.0 + 3.0*g3;\n\tfloat z3 = z0 - 1.0 + 3.0*g3;\t\t\t \n\tvec3 ijk0 = vec3(i,j,k);\n\tvec3 ijk1 = vec3(i+i1,j+j1,k+k1);\t\n\tvec3 ijk2 = vec3(i+i2,j+j2,k+k2);\n\tvec3 ijk3 = vec3(i+1,j+1,k+1);\t     \n\tvec3 gr0 = normalize(vec3(noise3D(ijk0),noise3D(ijk0*2.01),noise3D(ijk0*2.02)));\n\tvec3 gr1 = normalize(vec3(noise3D(ijk1),noise3D(ijk1*2.01),noise3D(ijk1*2.02)));\n\tvec3 gr2 = normalize(vec3(noise3D(ijk2),noise3D(ijk2*2.01),noise3D(ijk2*2.02)));\n\tvec3 gr3 = normalize(vec3(noise3D(ijk3),noise3D(ijk3*2.01),noise3D(ijk3*2.02)));\n\tfloat n0 = 0.0;\n\tfloat n1 = 0.0;\n\tfloat n2 = 0.0;\n\tfloat n3 = 0.0;\n\tfloat t0 = 0.5 - x0*x0 - y0*y0 - z0*z0;\n\tif(t0>=0.0)\n\t{\n\t\tt0*=t0;\n\t\tn0 = t0 * t0 * dot(gr0, vec3(x0, y0, z0));\n\t}\n\tfloat t1 = 0.5 - x1*x1 - y1*y1 - z1*z1;\n\tif(t1>=0.0)\n\t{\n\t\tt1*=t1;\n\t\tn1 = t1 * t1 * dot(gr1, vec3(x1, y1, z1));\n\t}\n\tfloat t2 = 0.5 - x2*x2 - y2*y2 - z2*z2;\n\tif(t2>=0.0)\n\t{\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * dot(gr2, vec3(x2, y2, z2));\n\t}\n\tfloat t3 = 0.5 - x3*x3 - y3*y3 - z3*z3;\n\tif(t3>=0.0)\n\t{\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * dot(gr3, vec3(x3, y3, z3));\n\t}\n\treturn 96.0*(n0+n1+n2+n3);\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f;\n    f  = 0.50000*(simplex3D( p )); p = p*2.01;\n    f += 0.25000*(simplex3D( p )); p = p*2.02;\n    f += 0.12500*(simplex3D( p )); p = p*2.03;\n    f += 0.06250*(simplex3D( p )); p = p*2.04;\n    f += 0.03125*(simplex3D( p )); p = p*2.05;\n    f += 0.015625*(simplex3D( p ));\n\treturn f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 pos = vec3(gl_FragCoord.xy - iResolution.xy/2.0,0.0); // planet center\n    \n    // LIGHT\n    vec3 l = normalize(vec3(sin(time), sin(time*0.5), (cos(time))));\n    \n    // PLANET\n    float r = iResolution.y/3.0; // radius\n    float z_in = sqrt(r*r - pos.x*pos.x - pos.y*pos.y);\n    float z_out = sqrt(-r*r + pos.x*pos.x + pos.y*pos.y);\n    \n    // NORMALS\n    vec3 norm = normalize(vec3(pos.x, pos.y, z_in)); // normals from sphere\n    vec3 norm_out = normalize(vec3(pos.x, pos.y, z_out)); // normals from outside sphere\n    float e = 0.05; // planet rugosity\n    float nx = fbm(vec3(norm.x+e, norm.y,   norm.z  ))*0.5+0.5; // x normal displacement\n    float ny = fbm(vec3(norm.x,   norm.y+e, norm.z  ))*0.5+0.5; // y normal displacement\n    float nz = fbm(vec3(norm.x,   norm.y,   norm.z+e))*0.5+0.5; // z normal displacement\n    norm = normalize(vec3(norm.x*nx, norm.y*ny, norm.z*nz));\n    //norm = (norm+1.)/2.; // for normals visualization\n\t\n    // TEXTURE\n    float n = 1.0-(fbm(vec3(norm.x, norm.y, norm.z))*0.5+0.5); // noise for every pixel in planet\n    \n    // ATMOS\n    float z_in_atm  = (r * in_outer)  / z_in - in_inner;   // inner atmos\n    float z_out_atm = (r * out_inner) / z_out - out_outer; // outer atmos\n    z_in_atm = max(0.0, z_in_atm);\n    z_out_atm = max(0.0, z_out_atm);\n    \n    // DIFFUSE LIGHT\n    float diffuse = max(0.0, dot(norm, l));\n    float diffuse_out = max(0.0, dot(norm_out, l)+0.3); // +0.3 because outer atmosphere stills when inner doesn't\n    \n\t//fragColor = vec4(vec3(n * diffuse),1.0);\n    //fragColor = vec4(vec3(z_in_atm * diffuse),1.0);\n    //fragColor = vec4(vec3(z_out_atm * diffuse_out),1.0);*/\n    \n    fragColor = vec4(vec3(n * diffuse + z_in_atm * diffuse + z_out_atm * diffuse_out),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}