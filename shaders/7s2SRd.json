{
    "Shader": {
        "info": {
            "date": "1620849702",
            "description": "A man smoking a cigar in the nightsky.\nA lot of things here are quite hacky this is more of a test to recreate a drawing as ashader.",
            "flags": 0,
            "hasliked": 0,
            "id": "7s2SRd",
            "likes": 7,
            "name": "Cigar at night",
            "published": 3,
            "tags": [
                "sky",
                "night",
                "smoke",
                "human",
                "cigar",
                "sillouhette"
            ],
            "usePreview": 0,
            "username": "Daizuukee",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "#define Cig1 vec3(0.4, 0.2902, 0.2196)\n#define Cig2 vec3(0.8588, 0.7882, 0.7686)\n#define Light1 vec3(0.902, 0.4941, 0.3843)\n#define Light2 vec3(0.7686, 0.5843, 0.0863)\n#define PIXELSIZE 100.\n\n//#define LSD\n\n#define CRT\n\n\n#define CLCOL ((Light1 - Light2) * abs(max(cos(iTime * 2. * PI),sin(iTime * 2. * PI))) + Light2)\n#define PI_TWO\t\t\t1.570796326794897\n#define PI\t\t\t\t3.141592653589793\n#define TWO_PI\t\t\t6.283185307179586\n\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\nvec2 hash( vec2 p ) {  \t\t\t\t\t\t// rand in [-1,1]\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\treturn -1. + 2.*fract(sin(p+20.)*53758.5453123);\n}\n\n//https://www.shadertoy.com/view/MtcGRl\nvec2 GetGradient(vec2 intPos, float t) {\n    \n    // Uncomment for calculated rand\n    //float rand = fract(sin(dot(intPos, vec2(12.9898, 78.233))) * 43758.5453);;\n    \n    // Texture-based rand (a bit faster on my GPU)\n    float rand = hash(intPos / 64.0).r;\n    \n    // Rotate gradient: random starting rotation, random rotation rate\n    float angle = 6.283185 * rand + 4.0 * t * rand;\n    return vec2(cos(angle), sin(angle));\n}\n\n\nfloat Pseudo3dNoise(vec3 pos) {\n    vec2 i = floor(pos.xy);\n    vec2 f = pos.xy - i;\n    vec2 blend = f * f * (3.0 - 2.0 * f);\n    float noiseVal = \n        mix(\n            mix(\n                dot(GetGradient(i + vec2(0, 0), pos.z), f - vec2(0, 0)),\n                dot(GetGradient(i + vec2(1, 0), pos.z), f - vec2(1, 0)),\n                blend.x),\n            mix(\n                dot(GetGradient(i + vec2(0, 1), pos.z), f - vec2(0, 1)),\n                dot(GetGradient(i + vec2(1, 1), pos.z), f - vec2(1, 1)),\n                blend.x),\n        blend.y\n    );\n    return noiseVal / 0.7; // normalize to about [-1..1]\n}\n\n\n\nvec2 uv;\n\n\nbool Smoke( in vec2 p) {\n    p -= vec2(0.2,0.1);\n    p.x += sin(p.y * 20. - iTime * PI) * p.y / 2. * pow(abs(sin(iTime * 0.25 * PI)),0.5);\n    if(p.x - 0.005 < p.y && p.x + 0.0025 >= p.y * 0.75 && p.x > 0.)\n        return true;\n    return false;\n}\n\nvec3 Cigar( in vec2 p) {\n    vec3 shade = vec3(0.4,0.3,0.2) * (1. - (p.y - 0.08) * (1./0.08) * 2.);\n    if(p.y > 0.08 && p.y < 0.1 && p.x > 0. && p.x < 0.2) {\n        if(p.x < 0.05)\n            return Cig1 - shade;\n        if(p.x < 0.18)\n            return Cig2 - shade;\n        return CLCOL;\n    }\n    return vec3(0);\n}\n\nfloat FaceDist(in vec2 p) {\n    float f = -0.3;\n    //HEAD\n    float po = abs(p.y - 0.225) * 2.;\n    f += (0.1 - po*po*po*po*po) * 3.;\n    //HAT\n    if(p.y > 0.3) {\n        po = (0.4-p.y)*3.25;\n        f = smax(f,po*po*po - 0.075,-0.2) + 0.05;\n    }\n    //EYE HOLE\n    f = smin(f,abs(p.y - 0.25),0.15);\n    //NOSE\n    f = smax(f, 0.02-abs(p.y - 0.175),-0.2);\n    //MOUTH\n    f = smax(f, 0.01-abs(p.y - 0.11),-0.2);\n    f = smax(f, 0.01-abs(p.y - 0.09),-0.2);\n    //SHOULDERS\n    f = smax(f, 0.02-abs(p.y + 0.2),0.1);\n    return f - p.x;\n}\n\nfloat star( in vec2 p) {\n    float x = Pseudo3dNoise(vec3(p * PIXELSIZE / 2.,iTime));\n    if(x > 0.75)\n        return (x-0.75) * (1./0.75); \n    return 0.;\n}\n\nvec3 getColor( in vec2 p) {\n    float smok = 0.;\n    if(Smoke(p))\n        smok = max(0.,0.6 - length(p));\n    vec3 c;\n    if((c = Cigar(p)) != vec3(0)) \n        return vec3(c);\n    float face = FaceDist(p);\n    if(face > 0.)\n        return CLCOL * (0.1 - face);\n\n    float star = star(p);\n    return CLCOL * max(0.2 - distance(p,vec2(0.2,0.09)),0.) + smok + star;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n    uv = fragCoord.xy / iResolution.yy;\n    uv.x -= 0.25;\n    uv.y -= 0.1;\n#ifdef CRT\n    if(uv.y > (0.75-fract(iTime * 0.1)) * 1.5 && uv.y < (0.75-fract(iTime * 0.1)) * 1.5 + 0.05) {\n        uv.y = (0.75-fract(iTime * 0.1)) * 1.5 + 0.05;\n    }\n#endif\n#ifdef LSD\n    fragColor = vec4(getColor(floor(uv * PIXELSIZE) / PIXELSIZE).r,\n                     getColor(floor((uv + vec2(0.01) * sin(iTime * PI)) * PIXELSIZE) / PIXELSIZE).g,\n                     getColor(floor((uv + vec2(-0.01,sin(iTime * PI) * 0.01) * sin(iTime * PI * 1.5432)) * PIXELSIZE) / PIXELSIZE).b,\n                     1);\n#else\n#ifdef CRT\n    fragColor = vec4(getColor(floor((uv + vec2(0.0,0.116) / PIXELSIZE) * PIXELSIZE) / PIXELSIZE).r,\n                     getColor(floor((uv + vec2(0.116,-0.116) / PIXELSIZE) * PIXELSIZE) / PIXELSIZE).g,\n                     getColor(floor((uv + vec2(-0.116,-0.116) / PIXELSIZE) * PIXELSIZE) / PIXELSIZE).b,\n                     1);\n#else\n    fragColor = vec4(getColor(floor(uv * PIXELSIZE) / PIXELSIZE),1);\n#endif\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}