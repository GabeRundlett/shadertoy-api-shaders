{
    "Shader": {
        "info": {
            "date": "1656244459",
            "description": "a sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "NsdfRM",
            "likes": 4,
            "name": "sphere test lines",
            "published": 3,
            "tags": [
                "sphere"
            ],
            "usePreview": 0,
            "username": "JorgePlk",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159265\n\nmat2 rotMat(float rot) {\n    return mat2(cos(rot), -sin(rot),\n                sin(rot), cos(rot));\n}\n\nfloat line(vec2 p1, vec2 p2, vec2 frag_pos, float width) {\n    vec2 line_track = p2 - p1;\n    vec2 hip = frag_pos - p1;\n    float proj = clamp(dot(hip, line_track) / dot(line_track, line_track), 0.0, 1.0);\n    vec2 perp_pos = p1 + line_track * proj;\n    \n    \n    return (1.0 - step(width, distance(perp_pos, frag_pos))) ;\n}\n\nvoid transformSphere(in vec3 sphere[72], out vec3 transformed[72]) {\n    for(int i = 0; i < 72; ++i) {\n    \n        sphere[i].xz *= rotMat(iTime*3.);\n        sphere[i].xy *= rotMat(iTime*3.);\n        \n        sphere[i].xy /= sphere[i].z -4.0;\n        transformed[i] = sphere[i] * 250.0 + vec3(400.0, 225.0, 1.0);\n        \n    }\n}\n\nfloat sphereCalc(in vec3 cube[72], vec2 frag_pos) {\n    float is_sphere = 0.0;\n    \n    for(int i = 0; i < 64; ++i) {\n        if (i % 8 != 7)\n            is_sphere += line(cube[i].xy, cube[i + 1].xy, frag_pos, 1.0);\n        else \n            is_sphere += line(cube[i].xy, cube[i - 7].xy, frag_pos, 1.0);\n\n        is_sphere += line(cube[i].xy, cube[i + 8].xy, frag_pos, 1.0);\n    }\n    \n    return min(is_sphere, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 points[72];\n    float radious = 1.5;\n    for (float i = 0.; i < 9.; i++) {\n        float angle = i * pi / 8.;\n        float size = radious * sin(angle);\n        float alt = radious * cos(angle);\n        vec3 height = vec3(0, alt, 0);\n\n        int index = int(i) * 8;\n\n        points[index ] = height + vec3(sin(0.)           , 0, cos(0.))           * size;\n        points[index + 1] = height + vec3(sin(pi / 4.)      , 0, cos(pi / 4.))      * size;\n        points[index + 2] = height + vec3(sin(pi / 2.)      , 0, cos(pi / 2.))      * size;\n        points[index + 3] = height + vec3(sin(3. * pi / 4.)  , 0, cos(3. * pi / 4.))  * size;\n        points[index + 4] = height + vec3(sin(pi)          , 0, cos(pi))          * size;\n        points[index + 5] = height + vec3(sin(-3. * pi / 4.) , 0, cos(-3. * pi / 4.)) * size;\n        points[index + 6] = height + vec3(sin(-pi / 2.)     , 0, cos(-pi / 2.))     * size;\n        points[index + 7] = height + vec3(sin(-pi / 4.)     , 0, cos(-pi / 4.))     * size;\n    }\n\n\n    vec3 transformed[72];\n                                 \n    transformSphere(points, transformed);\n    float is_sphere = sphereCalc(transformed, fragCoord.xy);\n    \n    vec3 final_color = vec3(1.0 - is_sphere);\n    \n    fragColor = vec4(final_color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}