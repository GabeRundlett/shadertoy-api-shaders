{
    "Shader": {
        "info": {
            "date": "1613573700",
            "description": "Using a basic hexagon fractal structure to stack 2D isometric cubes in a way that resembles a geometric snowflake.",
            "flags": 0,
            "hasliked": 0,
            "id": "WltBDj",
            "likes": 47,
            "name": "Fractal Cube Snowflake",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "cube",
                "isometric",
                "polar",
                "sierpinski",
                "snowflake"
            ],
            "usePreview": 0,
            "username": "Shane",
            "viewed": 1048
        },
        "renderpass": [
            {
                "code": "/*\n\n    Fractal Cube Snowflake\n    ----------------------  \n    \n    Using a basic hexagon fractal structure to stack 2D isometric cubes in \n    a way that resembles a geometric snowflake. It's not the most exciting\n    example, that's for sure, but I thought the fractal geometry crowd might\n    appreciate it. The structure isn't common, but I've seen it around. This \n    particular one is loosely based on one of Robert Fathauer's renderings.\n    \n    \n    The idea behind polygon fractals is pretty simple: Render a polygon,\n    subdivide space into polar cells and render more objects in each of\n    those cells, subdivide the resultant cells and render more objects around \n    the newly rendered objects... Continue ad infinitum, as they say.\n    \n    \n    \n    Other 2D polygon-based fractal examples:\n    \n    \n    // Very watchable, and with virtually no code. \n    Pen Patterns - Kali\n    https://www.shadertoy.com/view/tsdfWf\n    \n    // A very cool hexagon fractal pattern -- Also based on\n    // one of Robert Fathauer's renderings.\n    Linked Rings Fractal Tiling - Fizzer\n    https://www.shadertoy.com/view/3l3fRn\n    \n    // Here's an easier version to understand.\n    Sierpinski Fractal Cubes - Shane\n    https://www.shadertoy.com/view/tldfzX\n\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Aspect correct screen coordinates.\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n    // Scaling and translation.\n    const float gSc = 1.;\n    \n    // Smoothing factor.\n    float sf = gSc/iResolution.y;\n    \n    // Scaling, translation, etc.\n    vec2 p = uv*gSc;\n    \n    \n    // Subtle animation, to break up the monotony.\n    //\n    // Three part rotation. Kekwizard's ida. :)\n    float t = mod(iTime/4., 3.);\n    float a = (t>2.)? 2. : (t>1.)? 1. : 0.; \n    a += smoothstep(.1, .3, t - a);\n    p *= rot2(-a*6.2831/3.);\n    // Perturbing the screen coordinates slightly.\n    t = mod(iTime, 6.2831);\n    p += sin(p*4. + t - cos(p.yx*8. + t))*.003;\n    \n    \n    \n    // Set the background to something neutral.\n    vec3 col = vec3(.2);//vec3(.53, .5, .47);\n    \n    // Initial box scale. \n    float sc = .215;\n    \n    // Edge width. \n    const float ew = .0015;\n    \n    float totD3 = 1e5;\n    \n    int sI = 0, sIOld = 0;\n    \n    // Render the fractal levels.\n    for(int i = 0; i<5; i++){\n    \n        bool render = false;\n        // Render all six surrounding cubes on the first level.\n        if(i<2) render = true;\n        else {\n            // Render three surrounding cubes in the following\n            // posistions. Otherwise break.\n            if((sI - sIOld + 5)%6 < 3) render = true;\n            else break;\n        }\n    \n    \n        // Obtain the individual cube face quad distances. Three are\n        // visible to the viewer.\n        vec3 d3 = cubeQuads(p, sc*2.);\n    \n        // Amalgamating all three quads to form a cube. Used for shadows and lines.\n        float cube = min(min(d3.x, d3.y), d3.z);\n        \n        \n        \n        // Faux shadowy ambient occlusion.\n        float sh = cube;\n        if((sI%2)==0) sh = max(sh, -(totD3 - sf*12.*iResolution.y/450.));\n        if(render) col = mix(col, vec3(0), (1. - smoothstep(0., sf*12.*iResolution.y/450., sh))*.25);\n        \n        \n        // Iterate through the cube faces for this level.\n        for(int j = 0; j<3; j++){\n        \n            // Render every second cube behind the cube from the previous level.\n            if((sI%2)==0) d3[j] = max(d3[j], -totD3);\n            \n            // Face ID... A mixture of common sense and trial and error, as always. :D\n            int fid = (i - j + 4)%3; \n            \n            // Normal based shade.\n            float sh = .5 + float(2 - fid)/4.; \n            \n            // Color -- based on the face ID.\n            //vec3 fCol = .55 + .45*cos(6.2831*float(fid)/12. + vec3(0, 1, 2));\n            // Color based on face shade.\n            vec3 fCol = vec3(sh);\n            // Coloring alternate layers.\n            //if((i%2)==0) fCol *= vec3(1, .08, .16);\n            //vec3 fCol = .54 + .46*cos(6.2831*float(sh*sh)/2.25 + vec3(0, 1, 2));\n        \n            // Render the quad.\n            if(render) col = mix(col, fCol, (1. - smoothstep(0., sf, d3[j])));\n        \n        }\n        \n        // Current cube, or occluded cube, which is why the update is necessary.\n        cube = min(min(d3.x, d3.y), d3.z);\n        // Add it to the current structure, which we need for occlude cubes in\n        // the next pass.\n        totD3 = min(totD3, cube);\n        \n        // Apply edges over the top. For those not familiar, \"abs(dist) - edgeWidth/2.\"\n        // will give you the edge outlines.\n        if(render) col = mix(col, vec3(0), (1. - smoothstep(0., sf, abs(cube) - ew/2.))*.8);\n        \n        \n        // Split space into three polar angles -- Pretty standard stuff.\n        float rN = 6.;\n        p = rot2(6.2831/12.)*p; // Rotate to the desired postion.\n        float ia = floor(fract(atan(p.x, p.y)/6.2831)*rN); // Cell number.\n        ia = (ia + .5)*6.2831/rN; // Cell's central postion.\n        \n        p = rot2(ia)*p; // Rotate each cell center.\n        p.y -= sc/.8660254; // Move out along the radial line.\n        p = rot2(-ia + 7.*6.2831/12.)*p; // Rotate in situ to get the correct face.\n\n        \n        sIOld = sI; // Cell number from the previous level.\n        sI = (int(ia))%6; // Cell number for the current level.\n        \n        // Reduce scale for the next iteration. 50% works nicely, but \n        // values like 35% will work also.\n        sc *= .5; \n        \n    \n    }\n\n    // Rough gamma correction and output to screen.\n    fragColor = vec4(sqrt(max(col, 0.)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// UTILITY FUNCTIONS -- These are just worker functions. All the logic is contained\n// within the \"Image\" tab.\n\n// Hexagon cell scale.\n#define HSCALE vec2(.5, .8660254)\n\n// Vertices and edge midpoints: Clockwise from the left.\nvec2[6] vID = vec2[6](vec2(-1, -1./3.), vec2(-1, 1./3.), vec2(0, 2./3.), \n                      vec2(1, 1./3.), vec2(1, -1./3.), vec2(0, -2./3.));\n\n\n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, s, -s, c); }\n\n\n// IQ's vec2 to float hash.\n//float hash21(vec2 p){  return fract(sin(dot(p, vec2(27.619, 57.583)))*43758.5453); }\n\n\n// Entirely based on IQ's signed distance to a 2D triangle. I've expanded it \n// to work with convex quads and generalized it a bit, but I doubt it would \n// translate to speed. It would be easy to generalize to convex polyons though.\nfloat quad(in vec2 p, in vec2[4] v){\n\n    // Lines between successive vertex points.\n    vec2[4] e = vec2[4](v[1] - v[0], v[2] - v[1], v[3] - v[2], v[0] - v[3]);\n    \n    // Winding related sign.\n    float s = sign(e[0].x*e[3].y - e[0].y*e[3].x);\n    \n    vec2 d = vec2(1e5);\n    \n    for(int i = 0; i<4; i++){\n        \n        // Minimum point to line calculations.\n        vec2 vi = p - v[i];\n        vec2 qi = vi - e[i]*clamp(dot(vi, e[i])/dot(e[i], e[i]), 0., 1.);\n        d = min(d, vec2(dot(qi, qi), s*(vi.x*e[i].y - vi.y*e[i].x)));\n    }\n\n    // Quad distance.\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\n\n\n// Returns the 3 viewable cube face distances.\nvec3 cubeQuads(vec2 p, float sc){\n\n\n    vec2 hSc = HSCALE*sc;\n    vec3 d;\n    \n    // Iterate through the three cube faces.\n    for(int j = 0; j<3; j++){\n        \n        // Using the hexagon vertices to constructing the 3 viewable cube quad faces.\n        vec2[4] v = vec2[4](vID[(j*2 + 5)%6]*hSc, vID[(j*2)%6]*hSc, vID[(j*2 + 1)%6]*hSc, vec2(0));\n\n        // Face quad.\n        d[j] = quad(p, v);\n            \n    }\n    \n    return d;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}