{
    "Shader": {
        "info": {
            "date": "1697250908",
            "description": "Renders stuff in 3D with SPDs using the CIE 1931 XYZ Color Matching Functions (2-degree observer) and matricies to transform into IEC 61966-2-1:1999 sRGB, along with the EOTF",
            "flags": 32,
            "hasliked": 0,
            "id": "DsdBWM",
            "likes": 15,
            "name": "Spectral Path-Tracing",
            "published": 3,
            "tags": [
                "ray",
                "traced",
                "tracer",
                "path"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "// ##### Spectral Path-Tracing #####\n// Made by Jacob Bingham (Zi7ar21) on October 24, 2023\n// Last Updated on October 24, 2023 at 08:37 Mountain Daylight Time\n\n// If you found this anywhere except Shadertoy, you can find the original and possibly updated version at:\n// https://www.shadertoy.com/view/DsdBWM\n\n// ## About\n// This shader path traces spheres with different Spectral Power Distributions (SPDs) and displays them\n// in IEC 61966-2-1:1999 sRGB (so if your monitor is sRGB calibrated, along with sRGB gamma then this\n// is really what the spectral data would look like, clamped to the sRGB gamut).\n//\n// ## Performance Tips\n// If the shader performs poorly for you (probably integrated graphics users) try\n// changing the defines at the top of the common tab. You can disable the expensive\n// lookup tables.\n//\n// ## List of SPDs\n// - The background is a flat plane with equal-energy reflectance,\n// - The top sphere is an approximate tomato (yes, the fruit) SPD based on a chart I found online\n// - The bottom left sphere is a 445 nm shortpass filter\n// - The middle sphere is a 530 nm bandpass filter\n// - The bottom right sphere is a smooth longpass filter\n//\n// ## Colorimetry Technical Details\n// By default this shader uses a lookup table for the \"CIE 1931 XYZ Colour-Matching Functions, 2-degree observer\"\n// and \"CIE Standard Illuminant D65\", and displays it in IEC 61966-2-1:1999 sRGB with a D65 white point\n// and sRGB gamma (not the same as 2.2! Most displays use 2.2 now but I wanted this to be sRGB-compliant)\n// along with tonemapping and undoing the sRGB transform that happens between Shadertoy and your monitor\n//\n// Buffer C contains the accumulated XYZ data if you want to export renders\n// for evaluation in something like GIMP (use the Shadertoy EXR export in the\n// bottom right of the editor while Buffer C is selected, then open the EXR\n// in GIMP and tag it with a CIE 1931 XYZ color profile)\n//\n// Buffer D contains the untonemapped linear IEC 61966-2-1:1999 sRGB data,\n// same thing with the EXR export thingy\n//\n// In the case of sRGB, beware of negative color values! (this is because the colors are out-of-gamut, can be\n// visualized by uncommenting the dfeine below)\n\n// Highlight sRGB out-of-gamut colors in magenta\n//#define MARK_OUT_OF_GAMUT\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(texelFetch(iChannel0, ivec2(fragCoord), 0).rgb, 1.0);\n\n    // render out-of-srgb-gamut pixels as magenta\n    #ifdef MARK_OUT_OF_GAMUT\n    /*\n    if(fragColor.r < 0.0) { fragColor.rgb = vec3(1.0, 0.0, 1.0); return; }\n    if(fragColor.g < 0.0) { fragColor.rgb = vec3(1.0, 0.0, 1.0); return; }\n    if(fragColor.b < 0.0) { fragColor.rgb = vec3(1.0, 0.0, 1.0); return; }\n    if(fragColor.r > 1.0) { fragColor.rgb = vec3(1.0, 0.0, 1.0); return; }\n    if(fragColor.r > 1.0) { fragColor.rgb = vec3(1.0, 0.0, 1.0); return; }\n    if(fragColor.r > 1.0) { fragColor.rgb = vec3(1.0, 0.0, 1.0); return; }\n    */\n    if(any(lessThan(fragColor.rgb,vec3(0)))||any(greaterThan(fragColor.rgb,vec3(1)))) { fragColor.rgb = vec3(1,0,1); return; }\n    #endif\n\n    fragColor.rgb *= 2.0; // exposure\n\n    fragColor.rgb = tanh(fragColor.rgb); // tonemapping\n\n    fragColor.rgb = clamp(fragColor.rgb, 0.0, 1.0); // clamp negative values\n\n    fragColor.rgb = linear_to_srgb(fragColor.rgb); // undo monitor gamma\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Faster, especially on integrated graphics\n// Turn off for exact colorimetry experiments\n//#define USE_CMF_APPROXIMATION\n\n// Use the CIE Standard Illuminant E (equal-energy) instead of D65 Table\n// Faster but results have a different white point than D65!\n//#define USE_STANDARD_ILLUMINANT_E\n\n\n\n#ifndef USE_CMF_APPROXIMATION\n// CIE 1931 XYZ Colour-Matching Functions, 2-degree observer, [360, 830] nanometers with 1 nm step size\nconst vec3[471] cie1931 = vec3[471] (\nvec3(0.000129900000,0.000003917000,0.000606100000),\nvec3(0.000145847000,0.000004393581,0.000680879200),\nvec3(0.000163802100,0.000004929604,0.000765145600),\nvec3(0.000184003700,0.000005532136,0.000860012400),\nvec3(0.000206690200,0.000006208245,0.000966592800),\nvec3(0.000232100000,0.000006965000,0.001086000000),\nvec3(0.000260728000,0.000007813219,0.001220586000),\nvec3(0.000293075000,0.000008767336,0.001372729000),\nvec3(0.000329388000,0.000009839844,0.001543579000),\nvec3(0.000369914000,0.000011043230,0.001734286000),\nvec3(0.000414900000,0.000012390000,0.001946000000),\nvec3(0.000464158700,0.000013886410,0.002177777000),\nvec3(0.000518986000,0.000015557280,0.002435809000),\nvec3(0.000581854000,0.000017442960,0.002731953000),\nvec3(0.000655234700,0.000019583750,0.003078064000),\nvec3(0.000741600000,0.000022020000,0.003486000000),\nvec3(0.000845029600,0.000024839650,0.003975227000),\nvec3(0.000964526800,0.000028041260,0.004540880000),\nvec3(0.001094949000,0.000031531040,0.005158320000),\nvec3(0.001231154000,0.000035215210,0.005802907000),\nvec3(0.001368000000,0.000039000000,0.006450001000),\nvec3(0.001502050000,0.000042826400,0.007083216000),\nvec3(0.001642328000,0.000046914600,0.007745488000),\nvec3(0.001802382000,0.000051589600,0.008501152000),\nvec3(0.001995757000,0.000057176400,0.009414544000),\nvec3(0.002236000000,0.000064000000,0.010549990000),\nvec3(0.002535385000,0.000072344210,0.011965800000),\nvec3(0.002892603000,0.000082212240,0.013655870000),\nvec3(0.003300829000,0.000093508160,0.015588050000),\nvec3(0.003753236000,0.000106136100,0.017730150000),\nvec3(0.004243000000,0.000120000000,0.020050010000),\nvec3(0.004762389000,0.000134984000,0.022511360000),\nvec3(0.005330048000,0.000151492000,0.025202880000),\nvec3(0.005978712000,0.000170208000,0.028279720000),\nvec3(0.006741117000,0.000191816000,0.031897040000),\nvec3(0.007650000000,0.000217000000,0.036210000000),\nvec3(0.008751373000,0.000246906700,0.041437710000),\nvec3(0.010028880000,0.000281240000,0.047503720000),\nvec3(0.011421700000,0.000318520000,0.054119880000),\nvec3(0.012869010000,0.000357266700,0.060998030000),\nvec3(0.014310000000,0.000396000000,0.067850010000),\nvec3(0.015704430000,0.000433714700,0.074486320000),\nvec3(0.017147440000,0.000473024000,0.081361560000),\nvec3(0.018781220000,0.000517876000,0.089153640000),\nvec3(0.020748010000,0.000572218700,0.098540480000),\nvec3(0.023190000000,0.000640000000,0.110200000000),\nvec3(0.026207360000,0.000724560000,0.124613300000),\nvec3(0.029782480000,0.000825500000,0.141701700000),\nvec3(0.033880920000,0.000941160000,0.161303500000),\nvec3(0.038468240000,0.001069880000,0.183256800000),\nvec3(0.043510000000,0.001210000000,0.207400000000),\nvec3(0.048995600000,0.001362091000,0.233692100000),\nvec3(0.055022600000,0.001530752000,0.262611400000),\nvec3(0.061718800000,0.001720368000,0.294774600000),\nvec3(0.069212000000,0.001935323000,0.330798500000),\nvec3(0.077630000000,0.002180000000,0.371300000000),\nvec3(0.086958110000,0.002454800000,0.416209100000),\nvec3(0.097176720000,0.002764000000,0.465464200000),\nvec3(0.108406300000,0.003117800000,0.519694800000),\nvec3(0.120767200000,0.003526400000,0.579530300000),\nvec3(0.134380000000,0.004000000000,0.645600000000),\nvec3(0.149358200000,0.004546240000,0.718483800000),\nvec3(0.165395700000,0.005159320000,0.796713300000),\nvec3(0.181983100000,0.005829280000,0.877845900000),\nvec3(0.198611000000,0.006546160000,0.959439000000),\nvec3(0.214770000000,0.007300000000,1.039050100000),\nvec3(0.230186800000,0.008086507000,1.115367300000),\nvec3(0.244879700000,0.008908720000,1.188497100000),\nvec3(0.258777300000,0.009767680000,1.258123300000),\nvec3(0.271807900000,0.010664430000,1.323929600000),\nvec3(0.283900000000,0.011600000000,1.385600000000),\nvec3(0.294943800000,0.012573170000,1.442635200000),\nvec3(0.304896500000,0.013582720000,1.494803500000),\nvec3(0.313787300000,0.014629680000,1.542190300000),\nvec3(0.321645400000,0.015715090000,1.584880700000),\nvec3(0.328500000000,0.016840000000,1.622960000000),\nvec3(0.334351300000,0.018007360000,1.656404800000),\nvec3(0.339210100000,0.019214480000,1.685295900000),\nvec3(0.343121300000,0.020453920000,1.709874500000),\nvec3(0.346129600000,0.021718240000,1.730382100000),\nvec3(0.348280000000,0.023000000000,1.747060000000),\nvec3(0.349599900000,0.024294610000,1.760044600000),\nvec3(0.350147400000,0.025610240000,1.769623300000),\nvec3(0.350013000000,0.026958570000,1.776263700000),\nvec3(0.349287000000,0.028351250000,1.780433400000),\nvec3(0.348060000000,0.029800000000,1.782600000000),\nvec3(0.346373300000,0.031310830000,1.782968200000),\nvec3(0.344262400000,0.032883680000,1.781699800000),\nvec3(0.341808800000,0.034521120000,1.779198200000),\nvec3(0.339094100000,0.036225710000,1.775867100000),\nvec3(0.336200000000,0.038000000000,1.772110000000),\nvec3(0.333197700000,0.039846670000,1.768258900000),\nvec3(0.330041100000,0.041768000000,1.764039000000),\nvec3(0.326635700000,0.043766000000,1.758943800000),\nvec3(0.322886800000,0.045842670000,1.752466300000),\nvec3(0.318700000000,0.048000000000,1.744100000000),\nvec3(0.314025100000,0.050243680000,1.733559500000),\nvec3(0.308884000000,0.052573040000,1.720858100000),\nvec3(0.303290400000,0.054980560000,1.705936900000),\nvec3(0.297257900000,0.057458720000,1.688737200000),\nvec3(0.290800000000,0.060000000000,1.669200000000),\nvec3(0.283970100000,0.062601970000,1.647528700000),\nvec3(0.276721400000,0.065277520000,1.623412700000),\nvec3(0.268917800000,0.068042080000,1.596022300000),\nvec3(0.260422700000,0.070911090000,1.564528000000),\nvec3(0.251100000000,0.073900000000,1.528100000000),\nvec3(0.240847500000,0.077016000000,1.486111400000),\nvec3(0.229851200000,0.080266400000,1.439521500000),\nvec3(0.218407200000,0.083666800000,1.389879900000),\nvec3(0.206811500000,0.087232800000,1.338736200000),\nvec3(0.195360000000,0.090980000000,1.287640000000),\nvec3(0.184213600000,0.094917550000,1.237422300000),\nvec3(0.173327300000,0.099045840000,1.187824300000),\nvec3(0.162688100000,0.103367400000,1.138761100000),\nvec3(0.152283300000,0.107884600000,1.090148000000),\nvec3(0.142100000000,0.112600000000,1.041900000000),\nvec3(0.132178600000,0.117532000000,0.994197600000),\nvec3(0.122569600000,0.122674400000,0.947347300000),\nvec3(0.113275200000,0.127992800000,0.901453100000),\nvec3(0.104297900000,0.133452800000,0.856619300000),\nvec3(0.095640000000,0.139020000000,0.812950100000),\nvec3(0.087299550000,0.144676400000,0.770517300000),\nvec3(0.079308040000,0.150469300000,0.729444800000),\nvec3(0.071717760000,0.156461900000,0.689913600000),\nvec3(0.064580990000,0.162717700000,0.652104900000),\nvec3(0.057950010000,0.169300000000,0.616200000000),\nvec3(0.051862110000,0.176243100000,0.582328600000),\nvec3(0.046281520000,0.183558100000,0.550416200000),\nvec3(0.041150880000,0.191273500000,0.520337600000),\nvec3(0.036412830000,0.199418000000,0.491967300000),\nvec3(0.032010000000,0.208020000000,0.465180000000),\nvec3(0.027917200000,0.217119900000,0.439924600000),\nvec3(0.024144400000,0.226734500000,0.416183600000),\nvec3(0.020687000000,0.236857100000,0.393882200000),\nvec3(0.017540400000,0.247481200000,0.372945900000),\nvec3(0.014700000000,0.258600000000,0.353300000000),\nvec3(0.012161790000,0.270184900000,0.334857800000),\nvec3(0.009919960000,0.282293900000,0.317552100000),\nvec3(0.007967240000,0.295050500000,0.301337500000),\nvec3(0.006296346000,0.308578000000,0.286168600000),\nvec3(0.004900000000,0.323000000000,0.272000000000),\nvec3(0.003777173000,0.338402100000,0.258817100000),\nvec3(0.002945320000,0.354685800000,0.246483800000),\nvec3(0.002424880000,0.371698600000,0.234771800000),\nvec3(0.002236293000,0.389287500000,0.223453300000),\nvec3(0.002400000000,0.407300000000,0.212300000000),\nvec3(0.002925520000,0.425629900000,0.201169200000),\nvec3(0.003836560000,0.444309600000,0.190119600000),\nvec3(0.005174840000,0.463394400000,0.179225400000),\nvec3(0.006982080000,0.482939500000,0.168560800000),\nvec3(0.009300000000,0.503000000000,0.158200000000),\nvec3(0.012149490000,0.523569300000,0.148138300000),\nvec3(0.015535880000,0.544512000000,0.138375800000),\nvec3(0.019477520000,0.565690000000,0.128994200000),\nvec3(0.023992770000,0.586965300000,0.120075100000),\nvec3(0.029100000000,0.608200000000,0.111700000000),\nvec3(0.034814850000,0.629345600000,0.103904800000),\nvec3(0.041120160000,0.650306800000,0.096667480000),\nvec3(0.047985040000,0.670875200000,0.089982720000),\nvec3(0.055378610000,0.690842400000,0.083845310000),\nvec3(0.063270000000,0.710000000000,0.078249990000),\nvec3(0.071635010000,0.728185200000,0.073208990000),\nvec3(0.080462240000,0.745463600000,0.068678160000),\nvec3(0.089739960000,0.761969400000,0.064567840000),\nvec3(0.099456450000,0.777836800000,0.060788350000),\nvec3(0.109600000000,0.793200000000,0.057250010000),\nvec3(0.120167400000,0.808110400000,0.053904350000),\nvec3(0.131114500000,0.822496200000,0.050746640000),\nvec3(0.142367900000,0.836306800000,0.047752760000),\nvec3(0.153854200000,0.849491600000,0.044898590000),\nvec3(0.165500000000,0.862000000000,0.042160000000),\nvec3(0.177257100000,0.873810800000,0.039507280000),\nvec3(0.189140000000,0.884962400000,0.036935640000),\nvec3(0.201169400000,0.895493600000,0.034458360000),\nvec3(0.213365800000,0.905443200000,0.032088720000),\nvec3(0.225749900000,0.914850100000,0.029840000000),\nvec3(0.238320900000,0.923734800000,0.027711810000),\nvec3(0.251066800000,0.932092400000,0.025694440000),\nvec3(0.263992200000,0.939922600000,0.023787160000),\nvec3(0.277101700000,0.947225200000,0.021989250000),\nvec3(0.290400000000,0.954000000000,0.020300000000),\nvec3(0.303891200000,0.960256100000,0.018718050000),\nvec3(0.317572600000,0.966007400000,0.017240360000),\nvec3(0.331438400000,0.971260600000,0.015863640000),\nvec3(0.345482800000,0.976022500000,0.014584610000),\nvec3(0.359700000000,0.980300000000,0.013400000000),\nvec3(0.374083900000,0.984092400000,0.012307230000),\nvec3(0.388639600000,0.987418200000,0.011301880000),\nvec3(0.403378400000,0.990312800000,0.010377920000),\nvec3(0.418311500000,0.992811600000,0.009529306000),\nvec3(0.433449900000,0.994950100000,0.008749999000),\nvec3(0.448795300000,0.996710800000,0.008035200000),\nvec3(0.464336000000,0.998098300000,0.007381600000),\nvec3(0.480064000000,0.999112000000,0.006785400000),\nvec3(0.495971300000,0.999748200000,0.006242800000),\nvec3(0.512050100000,1.000000000000,0.005749999000),\nvec3(0.528295900000,0.999856700000,0.005303600000),\nvec3(0.544691600000,0.999304600000,0.004899800000),\nvec3(0.561209400000,0.998325500000,0.004534200000),\nvec3(0.577821500000,0.996898700000,0.004202400000),\nvec3(0.594500000000,0.995000000000,0.003900000000),\nvec3(0.611220900000,0.992600500000,0.003623200000),\nvec3(0.627975800000,0.989742600000,0.003370600000),\nvec3(0.644760200000,0.986444400000,0.003141400000),\nvec3(0.661569700000,0.982724100000,0.002934800000),\nvec3(0.678400000000,0.978600000000,0.002749999000),\nvec3(0.695239200000,0.974083700000,0.002585200000),\nvec3(0.712058600000,0.969171200000,0.002438600000),\nvec3(0.728828400000,0.963856800000,0.002309400000),\nvec3(0.745518800000,0.958134900000,0.002196800000),\nvec3(0.762100000000,0.952000000000,0.002100000000),\nvec3(0.778543200000,0.945450400000,0.002017733000),\nvec3(0.794825600000,0.938499200000,0.001948200000),\nvec3(0.810926400000,0.931162800000,0.001889800000),\nvec3(0.826824800000,0.923457600000,0.001840933000),\nvec3(0.842500000000,0.915400000000,0.001800000000),\nvec3(0.857932500000,0.907006400000,0.001766267000),\nvec3(0.873081600000,0.898277200000,0.001737800000),\nvec3(0.887894400000,0.889204800000,0.001711200000),\nvec3(0.902318100000,0.879781600000,0.001683067000),\nvec3(0.916300000000,0.870000000000,0.001650001000),\nvec3(0.929799500000,0.859861300000,0.001610133000),\nvec3(0.942798400000,0.849392000000,0.001564400000),\nvec3(0.955277600000,0.838622000000,0.001513600000),\nvec3(0.967217900000,0.827581300000,0.001458533000),\nvec3(0.978600000000,0.816300000000,0.001400000000),\nvec3(0.989385600000,0.804794700000,0.001336667000),\nvec3(0.999548800000,0.793082000000,0.001270000000),\nvec3(1.009089200000,0.781192000000,0.001205000000),\nvec3(1.018006400000,0.769154700000,0.001146667000),\nvec3(1.026300000000,0.757000000000,0.001100000000),\nvec3(1.033982700000,0.744754100000,0.001068800000),\nvec3(1.040986000000,0.732422400000,0.001049400000),\nvec3(1.047188000000,0.720003600000,0.001035600000),\nvec3(1.052466700000,0.707496500000,0.001021200000),\nvec3(1.056700000000,0.694900000000,0.001000000000),\nvec3(1.059794400000,0.682219200000,0.000968640000),\nvec3(1.061799200000,0.669471600000,0.000929920000),\nvec3(1.062806800000,0.656674400000,0.000886880000),\nvec3(1.062909600000,0.643844800000,0.000842560000),\nvec3(1.062200000000,0.631000000000,0.000800000000),\nvec3(1.060735200000,0.618155500000,0.000760960000),\nvec3(1.058443600000,0.605314400000,0.000723680000),\nvec3(1.055224400000,0.592475600000,0.000685920000),\nvec3(1.050976800000,0.579637900000,0.000645440000),\nvec3(1.045600000000,0.566800000000,0.000600000000),\nvec3(1.039036900000,0.553961100000,0.000547866700),\nvec3(1.031360800000,0.541137200000,0.000491600000),\nvec3(1.022666200000,0.528352800000,0.000435400000),\nvec3(1.013047700000,0.515632300000,0.000383466700),\nvec3(1.002600000000,0.503000000000,0.000340000000),\nvec3(0.991367500000,0.490468800000,0.000307253300),\nvec3(0.979331400000,0.478030400000,0.000283160000),\nvec3(0.966491600000,0.465677600000,0.000265440000),\nvec3(0.952847900000,0.453403200000,0.000251813300),\nvec3(0.938400000000,0.441200000000,0.000240000000),\nvec3(0.923194000000,0.429080000000,0.000229546700),\nvec3(0.907244000000,0.417036000000,0.000220640000),\nvec3(0.890502000000,0.405032000000,0.000211960000),\nvec3(0.872920000000,0.393032000000,0.000202186700),\nvec3(0.854449900000,0.381000000000,0.000190000000),\nvec3(0.835084000000,0.368918400000,0.000174213300),\nvec3(0.814946000000,0.356827200000,0.000155640000),\nvec3(0.794186000000,0.344776800000,0.000135960000),\nvec3(0.772954000000,0.332817600000,0.000116853300),\nvec3(0.751400000000,0.321000000000,0.000100000000),\nvec3(0.729583600000,0.309338100000,0.000086133330),\nvec3(0.707588800000,0.297850400000,0.000074600000),\nvec3(0.685602200000,0.286593600000,0.000065000000),\nvec3(0.663810400000,0.275624500000,0.000056933330),\nvec3(0.642400000000,0.265000000000,0.000049999990),\nvec3(0.621514900000,0.254763200000,0.000044160000),\nvec3(0.601113800000,0.244889600000,0.000039480000),\nvec3(0.581105200000,0.235334400000,0.000035720000),\nvec3(0.561397700000,0.226052800000,0.000032640000),\nvec3(0.541900000000,0.217000000000,0.000030000000),\nvec3(0.522599500000,0.208161600000,0.000027653330),\nvec3(0.503546400000,0.199548800000,0.000025560000),\nvec3(0.484743600000,0.191155200000,0.000023640000),\nvec3(0.466193900000,0.182974400000,0.000021813330),\nvec3(0.447900000000,0.175000000000,0.000020000000),\nvec3(0.429861300000,0.167223500000,0.000018133330),\nvec3(0.412098000000,0.159646400000,0.000016200000),\nvec3(0.394644000000,0.152277600000,0.000014200000),\nvec3(0.377533300000,0.145125900000,0.000012133330),\nvec3(0.360800000000,0.138200000000,0.000010000000),\nvec3(0.344456300000,0.131500300000,0.000007733333),\nvec3(0.328516800000,0.125024800000,0.000005400000),\nvec3(0.313019200000,0.118779200000,0.000003200000),\nvec3(0.298001100000,0.112769100000,0.000001333333),\nvec3(0.283500000000,0.107000000000,0.000000000000),\nvec3(0.269544800000,0.101476200000,0.000000000000),\nvec3(0.256118400000,0.096188640000,0.000000000000),\nvec3(0.243189600000,0.091122960000,0.000000000000),\nvec3(0.230727200000,0.086264850000,0.000000000000),\nvec3(0.218700000000,0.081600000000,0.000000000000),\nvec3(0.207097100000,0.077120640000,0.000000000000),\nvec3(0.195923200000,0.072825520000,0.000000000000),\nvec3(0.185170800000,0.068710080000,0.000000000000),\nvec3(0.174832300000,0.064769760000,0.000000000000),\nvec3(0.164900000000,0.061000000000,0.000000000000),\nvec3(0.155366700000,0.057396210000,0.000000000000),\nvec3(0.146230000000,0.053955040000,0.000000000000),\nvec3(0.137490000000,0.050673760000,0.000000000000),\nvec3(0.129146700000,0.047549650000,0.000000000000),\nvec3(0.121200000000,0.044580000000,0.000000000000),\nvec3(0.113639700000,0.041758720000,0.000000000000),\nvec3(0.106465000000,0.039084960000,0.000000000000),\nvec3(0.099690440000,0.036563840000,0.000000000000),\nvec3(0.093330610000,0.034200480000,0.000000000000),\nvec3(0.087400000000,0.032000000000,0.000000000000),\nvec3(0.081900960000,0.029962610000,0.000000000000),\nvec3(0.076804280000,0.028076640000,0.000000000000),\nvec3(0.072077120000,0.026329360000,0.000000000000),\nvec3(0.067686640000,0.024708050000,0.000000000000),\nvec3(0.063600000000,0.023200000000,0.000000000000),\nvec3(0.059806850000,0.021800770000,0.000000000000),\nvec3(0.056282160000,0.020501120000,0.000000000000),\nvec3(0.052971040000,0.019281080000,0.000000000000),\nvec3(0.049818610000,0.018120690000,0.000000000000),\nvec3(0.046770000000,0.017000000000,0.000000000000),\nvec3(0.043784050000,0.015903790000,0.000000000000),\nvec3(0.040875360000,0.014837180000,0.000000000000),\nvec3(0.038072640000,0.013810680000,0.000000000000),\nvec3(0.035404610000,0.012834780000,0.000000000000),\nvec3(0.032900000000,0.011920000000,0.000000000000),\nvec3(0.030564190000,0.011068310000,0.000000000000),\nvec3(0.028380560000,0.010273390000,0.000000000000),\nvec3(0.026344840000,0.009533311000,0.000000000000),\nvec3(0.024452750000,0.008846157000,0.000000000000),\nvec3(0.022700000000,0.008210000000,0.000000000000),\nvec3(0.021084290000,0.007623781000,0.000000000000),\nvec3(0.019599880000,0.007085424000,0.000000000000),\nvec3(0.018237320000,0.006591476000,0.000000000000),\nvec3(0.016987170000,0.006138485000,0.000000000000),\nvec3(0.015840000000,0.005723000000,0.000000000000),\nvec3(0.014790640000,0.005343059000,0.000000000000),\nvec3(0.013831320000,0.004995796000,0.000000000000),\nvec3(0.012948680000,0.004676404000,0.000000000000),\nvec3(0.012129200000,0.004380075000,0.000000000000),\nvec3(0.011359160000,0.004102000000,0.000000000000),\nvec3(0.010629350000,0.003838453000,0.000000000000),\nvec3(0.009938846000,0.003589099000,0.000000000000),\nvec3(0.009288422000,0.003354219000,0.000000000000),\nvec3(0.008678854000,0.003134093000,0.000000000000),\nvec3(0.008110916000,0.002929000000,0.000000000000),\nvec3(0.007582388000,0.002738139000,0.000000000000),\nvec3(0.007088746000,0.002559876000,0.000000000000),\nvec3(0.006627313000,0.002393244000,0.000000000000),\nvec3(0.006195408000,0.002237275000,0.000000000000),\nvec3(0.005790346000,0.002091000000,0.000000000000),\nvec3(0.005409826000,0.001953587000,0.000000000000),\nvec3(0.005052583000,0.001824580000,0.000000000000),\nvec3(0.004717512000,0.001703580000,0.000000000000),\nvec3(0.004403507000,0.001590187000,0.000000000000),\nvec3(0.004109457000,0.001484000000,0.000000000000),\nvec3(0.003833913000,0.001384496000,0.000000000000),\nvec3(0.003575748000,0.001291268000,0.000000000000),\nvec3(0.003334342000,0.001204092000,0.000000000000),\nvec3(0.003109075000,0.001122744000,0.000000000000),\nvec3(0.002899327000,0.001047000000,0.000000000000),\nvec3(0.002704348000,0.000976589600,0.000000000000),\nvec3(0.002523020000,0.000911108800,0.000000000000),\nvec3(0.002354168000,0.000850133200,0.000000000000),\nvec3(0.002196616000,0.000793238400,0.000000000000),\nvec3(0.002049190000,0.000740000000,0.000000000000),\nvec3(0.001910960000,0.000690082700,0.000000000000),\nvec3(0.001781438000,0.000643310000,0.000000000000),\nvec3(0.001660110000,0.000599496000,0.000000000000),\nvec3(0.001546459000,0.000558454700,0.000000000000),\nvec3(0.001439971000,0.000520000000,0.000000000000),\nvec3(0.001340042000,0.000483913600,0.000000000000),\nvec3(0.001246275000,0.000450052800,0.000000000000),\nvec3(0.001158471000,0.000418345200,0.000000000000),\nvec3(0.001076430000,0.000388718400,0.000000000000),\nvec3(0.000999949300,0.000361100000,0.000000000000),\nvec3(0.000928735800,0.000335383500,0.000000000000),\nvec3(0.000862433200,0.000311440400,0.000000000000),\nvec3(0.000800750300,0.000289165600,0.000000000000),\nvec3(0.000743396000,0.000268453900,0.000000000000),\nvec3(0.000690078600,0.000249200000,0.000000000000),\nvec3(0.000640515600,0.000231301900,0.000000000000),\nvec3(0.000594502100,0.000214685600,0.000000000000),\nvec3(0.000551864600,0.000199288400,0.000000000000),\nvec3(0.000512429000,0.000185047500,0.000000000000),\nvec3(0.000476021300,0.000171900000,0.000000000000),\nvec3(0.000442453600,0.000159778100,0.000000000000),\nvec3(0.000411511700,0.000148604400,0.000000000000),\nvec3(0.000382981400,0.000138301600,0.000000000000),\nvec3(0.000356649100,0.000128792500,0.000000000000),\nvec3(0.000332301100,0.000120000000,0.000000000000),\nvec3(0.000309758600,0.000111859500,0.000000000000),\nvec3(0.000288887100,0.000104322400,0.000000000000),\nvec3(0.000269539400,0.000097335600,0.000000000000),\nvec3(0.000251568200,0.000090845870,0.000000000000),\nvec3(0.000234826100,0.000084800000,0.000000000000),\nvec3(0.000219171000,0.000079146670,0.000000000000),\nvec3(0.000204525800,0.000073858000,0.000000000000),\nvec3(0.000190840500,0.000068916000,0.000000000000),\nvec3(0.000178065400,0.000064302670,0.000000000000),\nvec3(0.000166150500,0.000060000000,0.000000000000),\nvec3(0.000155023600,0.000055981870,0.000000000000),\nvec3(0.000144621900,0.000052225600,0.000000000000),\nvec3(0.000134909800,0.000048718400,0.000000000000),\nvec3(0.000125852000,0.000045447470,0.000000000000),\nvec3(0.000117413000,0.000042400000,0.000000000000),\nvec3(0.000109551500,0.000039561040,0.000000000000),\nvec3(0.000102224500,0.000036915120,0.000000000000),\nvec3(0.000095394450,0.000034448680,0.000000000000),\nvec3(0.000089023900,0.000032148160,0.000000000000),\nvec3(0.000083075270,0.000030000000,0.000000000000),\nvec3(0.000077512690,0.000027991250,0.000000000000),\nvec3(0.000072313040,0.000026113560,0.000000000000),\nvec3(0.000067457780,0.000024360240,0.000000000000),\nvec3(0.000062928440,0.000022724610,0.000000000000),\nvec3(0.000058706520,0.000021200000,0.000000000000),\nvec3(0.000054770280,0.000019778550,0.000000000000),\nvec3(0.000051099180,0.000018452850,0.000000000000),\nvec3(0.000047676540,0.000017216870,0.000000000000),\nvec3(0.000044485670,0.000016064590,0.000000000000),\nvec3(0.000041509940,0.000014990000,0.000000000000),\nvec3(0.000038733240,0.000013987280,0.000000000000),\nvec3(0.000036142030,0.000013051550,0.000000000000),\nvec3(0.000033723520,0.000012178180,0.000000000000),\nvec3(0.000031464870,0.000011362540,0.000000000000),\nvec3(0.000029353260,0.000010600000,0.000000000000),\nvec3(0.000027375730,0.000009885877,0.000000000000),\nvec3(0.000025524330,0.000009217304,0.000000000000),\nvec3(0.000023793760,0.000008592362,0.000000000000),\nvec3(0.000022178700,0.000008009133,0.000000000000),\nvec3(0.000020673830,0.000007465700,0.000000000000),\nvec3(0.000019272260,0.000006959567,0.000000000000),\nvec3(0.000017966400,0.000006487995,0.000000000000),\nvec3(0.000016749910,0.000006048699,0.000000000000),\nvec3(0.000015616480,0.000005639396,0.000000000000),\nvec3(0.000014559770,0.000005257800,0.000000000000),\nvec3(0.000013573870,0.000004901771,0.000000000000),\nvec3(0.000012654360,0.000004569720,0.000000000000),\nvec3(0.000011797230,0.000004260194,0.000000000000),\nvec3(0.000010998440,0.000003971739,0.000000000000),\nvec3(0.000010253980,0.000003702900,0.000000000000),\nvec3(0.000009559646,0.000003452163,0.000000000000),\nvec3(0.000008912044,0.000003218302,0.000000000000),\nvec3(0.000008308358,0.000003000300,0.000000000000),\nvec3(0.000007745769,0.000002797139,0.000000000000),\nvec3(0.000007221456,0.000002607800,0.000000000000),\nvec3(0.000006732475,0.000002431220,0.000000000000),\nvec3(0.000006276423,0.000002266531,0.000000000000),\nvec3(0.000005851304,0.000002113013,0.000000000000),\nvec3(0.000005455118,0.000001969943,0.000000000000),\nvec3(0.000005085868,0.000001836600,0.000000000000),\nvec3(0.000004741466,0.000001712230,0.000000000000),\nvec3(0.000004420236,0.000001596228,0.000000000000),\nvec3(0.000004120783,0.000001488090,0.000000000000),\nvec3(0.000003841716,0.000001387314,0.000000000000),\nvec3(0.000003581652,0.000001293400,0.000000000000),\nvec3(0.000003339127,0.000001205820,0.000000000000),\nvec3(0.000003112949,0.000001124143,0.000000000000),\nvec3(0.000002902121,0.000001048009,0.000000000000),\nvec3(0.000002705645,0.000000977058,0.000000000000),\nvec3(0.000002522525,0.000000910930,0.000000000000),\nvec3(0.000002351726,0.000000849251,0.000000000000),\nvec3(0.000002192415,0.000000791721,0.000000000000),\nvec3(0.000002043902,0.000000738090,0.000000000000),\nvec3(0.000001905497,0.000000688110,0.000000000000),\nvec3(0.000001776509,0.000000641530,0.000000000000),\nvec3(0.000001656215,0.000000598090,0.000000000000),\nvec3(0.000001544022,0.000000557575,0.000000000000),\nvec3(0.000001439440,0.000000519808,0.000000000000),\nvec3(0.000001341977,0.000000484612,0.000000000000),\nvec3(0.000001251141,0.000000451810,0.000000000000)\n);\n#endif\n\nfloat g(float x, float mu, float sigma1, float sigma2) {\n    float x0 = (x-mu)/sigma1;\n    float x1 = (x-mu)/sigma2;\n    return x < mu ? exp(-0.5*x0*x0) : exp(-0.5*x1*x1);\n}\n\n// CIE 1931 XYZ CMFs, 2-degree observer\nvec3 cie_1931_xyz_cmf(float lambda) {\n    // lambda: wavelength in nanometers\n\n    #ifndef USE_CMF_APPROXIMATION\n    int index = int(lambda-360.0);\n\n    if((index < 0) || (index > 470)) return vec3(0);\n\n    return mix(cie1931[index+0], cie1931[index+1], fract(lambda)); // linear interpolation\n    #endif\n\n    return vec3(\n    1.056*g(lambda, 599.8, 37.9, 31.0)+0.362*g(lambda, 442.0, 16.0, 26.7)-0.065*g(lambda,501.1,20.4,26.2),\n    0.821*g(lambda, 568.8, 46.9, 40.5)+0.286*g(lambda, 530.9, 16.3, 31.1),\n    1.217*g(lambda, 437.0, 11.8, 36.0)+0.681*g(lambda, 459.0, 26.0, 13.8));\n}\n\n// CIE 1931 XYZ to Linear D65 sRGB\nvec3 xyz_to_linear(vec3 xyz) {\n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    return xyz*mat3(\n     3.2404542, -1.5371385, -0.4985314,\n    -0.9692660,  1.8760108,  0.0415560,\n     0.0556434, -0.2040259,  1.0572252\n    );\n}\n\n// Linear D65 sRGB to CIE 1931 XYZ\nvec3 linear_to_xyz(vec3 rgb) {\n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    return rgb*mat3(\n    0.4124564,  0.3575761, 0.1804375,\n    0.2126729,  0.7151522, 0.0721750,\n    0.0193339,  0.1191920, 0.9503041\n    );\n}\n\n// Linear Gamma to sRGB IEC 61966-2-1:1999 EOTF\nvec3 linear_to_srgb(vec3 rgb) {\n    return vec3(\n    rgb.r > 0.0031308 ? 1.055*pow(rgb.r,1.0/2.4)-0.055 : 12.92*rgb.r,\n    rgb.g > 0.0031308 ? 1.055*pow(rgb.g,1.0/2.4)-0.055 : 12.92*rgb.g,\n    rgb.b > 0.0031308 ? 1.055*pow(rgb.b,1.0/2.4)-0.055 : 12.92*rgb.b);\n}\n\n// IEC 61966-2-1:1999 sRGB EOTF to Linear Gamma\nvec3 srgb_to_linear(vec3 rgb) {\n    return vec3(\n    rgb.r > 0.04045 ? pow((rgb.r+0.055)/1.055,2.4) : rgb.r/12.92,\n    rgb.g > 0.04045 ? pow((rgb.g+0.055)/1.055,2.4) : rgb.g/12.92,\n    rgb.b > 0.04045 ? pow((rgb.b+0.055)/1.055,2.4) : rgb.b/12.92);\n}\n\n// CIE Standard Illuminant D65, [300, 830] nanometers with 1 nm step size\nconst float[531] cied65 = float[531] (\n0.000341,\n0.003601,\n0.006862,\n0.010122,\n0.013383,\n0.016643,\n0.019903,\n0.023164,\n0.026424,\n0.029685,\n0.032945,\n0.049887,\n0.066828,\n0.083770,\n0.100711,\n0.117652,\n0.134594,\n0.151535,\n0.168477,\n0.185418,\n0.202360,\n0.219177,\n0.235995,\n0.252812,\n0.269630,\n0.286447,\n0.303265,\n0.320082,\n0.336900,\n0.353717,\n0.370535,\n0.373430,\n0.376326,\n0.379221,\n0.382116,\n0.385011,\n0.387907,\n0.390802,\n0.393697,\n0.396593,\n0.399488,\n0.404451,\n0.409414,\n0.414377,\n0.419340,\n0.424302,\n0.429265,\n0.434228,\n0.439191,\n0.444154,\n0.449117,\n0.450844,\n0.452570,\n0.454297,\n0.456023,\n0.457750,\n0.459477,\n0.461203,\n0.462930,\n0.464656,\n0.466383,\n0.471834,\n0.477285,\n0.482735,\n0.488186,\n0.493637,\n0.499088,\n0.504539,\n0.509989,\n0.515440,\n0.520891,\n0.518777,\n0.516664,\n0.514550,\n0.512437,\n0.510323,\n0.508209,\n0.506096,\n0.503982,\n0.501869,\n0.499755,\n0.504428,\n0.509100,\n0.513773,\n0.518446,\n0.523118,\n0.527791,\n0.532464,\n0.537137,\n0.541809,\n0.546482,\n0.574589,\n0.602695,\n0.630802,\n0.658909,\n0.687015,\n0.715122,\n0.743229,\n0.771336,\n0.799442,\n0.827549,\n0.836280,\n0.845011,\n0.853742,\n0.862473,\n0.871204,\n0.879936,\n0.888667,\n0.897398,\n0.906129,\n0.914860,\n0.916806,\n0.918752,\n0.920697,\n0.922643,\n0.924589,\n0.926535,\n0.928481,\n0.930426,\n0.932372,\n0.934318,\n0.927568,\n0.920819,\n0.914069,\n0.907320,\n0.900570,\n0.893821,\n0.887071,\n0.880322,\n0.873572,\n0.866823,\n0.885006,\n0.903188,\n0.921371,\n0.939554,\n0.957736,\n0.975919,\n0.994102,\n1.012280,\n1.030470,\n1.048650,\n1.060790,\n1.072940,\n1.085080,\n1.097220,\n1.109360,\n1.121510,\n1.133650,\n1.145790,\n1.157940,\n1.170080,\n1.170880,\n1.171690,\n1.172490,\n1.173300,\n1.174100,\n1.174900,\n1.175710,\n1.176510,\n1.177320,\n1.178120,\n1.175170,\n1.172220,\n1.169270,\n1.166320,\n1.163360,\n1.160410,\n1.157460,\n1.154510,\n1.151560,\n1.148610,\n1.149670,\n1.150730,\n1.151800,\n1.152860,\n1.153920,\n1.154980,\n1.156040,\n1.157110,\n1.158170,\n1.159230,\n1.152120,\n1.145010,\n1.137890,\n1.130780,\n1.123670,\n1.116560,\n1.109450,\n1.102330,\n1.095220,\n1.088110,\n1.088650,\n1.089200,\n1.089740,\n1.090280,\n1.090820,\n1.091370,\n1.091910,\n1.092450,\n1.093000,\n1.093540,\n1.091990,\n1.090440,\n1.088880,\n1.087330,\n1.085780,\n1.084230,\n1.082680,\n1.081120,\n1.079570,\n1.078020,\n1.075010,\n1.072000,\n1.068980,\n1.065970,\n1.062960,\n1.059950,\n1.056940,\n1.053920,\n1.050910,\n1.047900,\n1.050800,\n1.053700,\n1.056600,\n1.059500,\n1.062390,\n1.065290,\n1.068190,\n1.071090,\n1.073990,\n1.076890,\n1.073610,\n1.070320,\n1.067040,\n1.063750,\n1.060470,\n1.057190,\n1.053900,\n1.050620,\n1.047330,\n1.044050,\n1.043690,\n1.043330,\n1.042970,\n1.042610,\n1.042250,\n1.041900,\n1.041540,\n1.041180,\n1.040820,\n1.040460,\n1.036410,\n1.032370,\n1.028320,\n1.024280,\n1.020230,\n1.016180,\n1.012140,\n1.008090,\n1.004050,\n1.000000,\n0.996334,\n0.992668,\n0.989003,\n0.985337,\n0.981671,\n0.978005,\n0.974339,\n0.970674,\n0.967008,\n0.963342,\n0.962796,\n0.962250,\n0.961703,\n0.961157,\n0.960611,\n0.960065,\n0.959519,\n0.958972,\n0.958426,\n0.957880,\n0.950778,\n0.943675,\n0.936573,\n0.929470,\n0.922368,\n0.915266,\n0.908163,\n0.901061,\n0.893958,\n0.886856,\n0.888177,\n0.889497,\n0.890818,\n0.892138,\n0.893459,\n0.894780,\n0.896100,\n0.897421,\n0.898741,\n0.900062,\n0.899655,\n0.899248,\n0.898841,\n0.898434,\n0.898026,\n0.897619,\n0.897212,\n0.896805,\n0.896398,\n0.895991,\n0.894091,\n0.892190,\n0.890290,\n0.888389,\n0.886489,\n0.884589,\n0.882688,\n0.880788,\n0.878887,\n0.876987,\n0.872577,\n0.868167,\n0.863757,\n0.859347,\n0.854936,\n0.850526,\n0.846116,\n0.841706,\n0.837296,\n0.832886,\n0.833297,\n0.833707,\n0.834118,\n0.834528,\n0.834939,\n0.835350,\n0.835760,\n0.836171,\n0.836581,\n0.836992,\n0.833320,\n0.829647,\n0.825975,\n0.822302,\n0.818630,\n0.814958,\n0.811285,\n0.807613,\n0.803940,\n0.800268,\n0.800456,\n0.800644,\n0.800831,\n0.801019,\n0.801207,\n0.801395,\n0.801583,\n0.801770,\n0.801958,\n0.802146,\n0.804209,\n0.806272,\n0.808336,\n0.810399,\n0.812462,\n0.814525,\n0.816588,\n0.818652,\n0.820715,\n0.822778,\n0.818784,\n0.814791,\n0.810797,\n0.806804,\n0.802810,\n0.798816,\n0.794823,\n0.790829,\n0.786836,\n0.782842,\n0.774279,\n0.765716,\n0.757153,\n0.748590,\n0.740027,\n0.731465,\n0.722902,\n0.714339,\n0.705776,\n0.697213,\n0.699101,\n0.700989,\n0.702876,\n0.704764,\n0.706652,\n0.708540,\n0.710428,\n0.712315,\n0.714203,\n0.716091,\n0.718831,\n0.721571,\n0.724311,\n0.727051,\n0.729790,\n0.732530,\n0.735270,\n0.738010,\n0.740750,\n0.743490,\n0.730745,\n0.718000,\n0.705255,\n0.692510,\n0.679765,\n0.667020,\n0.654275,\n0.641530,\n0.628785,\n0.616040,\n0.624322,\n0.632603,\n0.640885,\n0.649166,\n0.657448,\n0.665730,\n0.674011,\n0.682293,\n0.690574,\n0.698856,\n0.704057,\n0.709259,\n0.714460,\n0.719662,\n0.724863,\n0.730064,\n0.735266,\n0.740467,\n0.745669,\n0.750870,\n0.739376,\n0.727881,\n0.716387,\n0.704893,\n0.693398,\n0.681904,\n0.670410,\n0.658916,\n0.647421,\n0.635927,\n0.618752,\n0.601578,\n0.584403,\n0.567229,\n0.550054,\n0.532880,\n0.515705,\n0.498531,\n0.481356,\n0.464182,\n0.484569,\n0.504956,\n0.525344,\n0.545731,\n0.566118,\n0.586505,\n0.606892,\n0.627280,\n0.647667,\n0.668054,\n0.664631,\n0.661209,\n0.657786,\n0.654364,\n0.650941,\n0.647518,\n0.644096,\n0.640673,\n0.637251,\n0.633828,\n0.634749,\n0.635670,\n0.636592,\n0.637513,\n0.638434,\n0.639355,\n0.640276,\n0.641198,\n0.642119,\n0.643040,\n0.638188,\n0.633336,\n0.628484,\n0.623632,\n0.618779,\n0.613927,\n0.609075,\n0.604223,\n0.599371,\n0.594519,\n0.587026,\n0.579533,\n0.572040,\n0.564547,\n0.557054,\n0.549562,\n0.542069,\n0.534576,\n0.527083,\n0.519590,\n0.525072,\n0.530553,\n0.536035,\n0.541516,\n0.546998,\n0.552480,\n0.557961,\n0.563443,\n0.568924,\n0.574406,\n0.577278,\n0.580150,\n0.583022,\n0.585894,\n0.588765,\n0.591637,\n0.594509,\n0.597381,\n0.600253,\n0.603125);\n\n// CIE Standard Illuminant D65 Spectral Power Distribution\nfloat cie_d65_spd(float lambda) {\n    // lambda: wavelength in nanometers\n\n    int index = int(lambda-300.0);\n\n    if((index < 0) || (index > 530)) return 0.0;\n\n    return mix(cied65[index+0], cied65[index+1], fract(lambda)); // linear interpolation\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Rendering buffer\n\nstruct rng_state_t {\n    uvec4 s0;\n};\n\n// https://www.jcgt.org/published/0009/03/02/\nuvec4 pcg4d(uvec4 v) {\n    v = v * 0x0019660Du + 0x3C6EF35Fu;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v ^= v >> 16u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat urand1(inout rng_state_t rng_state) {\n    rng_state.s0 = pcg4d(rng_state.s0);\n\n    return 2.32830629776081821092e-10*float(rng_state.s0.x);\n}\n\nvec2 urand2(inout rng_state_t rng_state) {\n    rng_state.s0 = pcg4d(rng_state.s0);\n\n    return 2.32830629776081821092e-10*vec2(rng_state.s0.xy);\n}\n\nvec3 urand3(inout rng_state_t rng_state) {\n    rng_state.s0 = pcg4d(rng_state.s0);\n\n    return 2.32830629776081821092e-10*vec3(rng_state.s0.xyz);\n}\n\nvec4 urand4(inout rng_state_t rng_state) {\n    rng_state.s0 = pcg4d(rng_state.s0);\n\n    return 2.32830629776081821092e-10*vec4(rng_state.s0);\n}\n\n#define PI 3.1415926535897932384626433832795028841971693993751058209749445923\n\n//uniformly spherically distributed\nvec3 udir3(inout rng_state_t rng_state) {\n    vec2 rng = urand2(rng_state);\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\nfloat sky(vec3 dir, float lambda) {\n    if(dot(dir,normalize(vec3(1,1,0.5)))>0.9) return 10.0;\n    return 0.95*smoothstep(0.0,1.0,dot(vec3(0,1,0),dir))+0.05;\n}\n\n// sphere of size ra centered at point ce\nvec2 sphIntersect(vec3 ro, vec3 rd, vec3 ce, float ra) {\n    vec3 oc = ro - ce;\n    float b = dot(oc, rd);\n    vec3 qc = oc - (b*rd);\n    float h = (ra*ra)-dot(qc,qc);\n    if(h < 0.0) return vec2(-1); // no intersection\n    h = sqrt(h);\n    return vec2(-b-h, -b+h);\n}\n\n// plane degined by p (p.xyz must be normalized)\nvec2 plaIntersect(in vec3 ro, in vec3 rd, in vec4 p) {\n    p.xyz = normalize(p.xyz);\n    float t = -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n    return vec2(t,t+1.0);\n}\n\nstruct Ray {\n    float tMin;\n    float tMax;\n    int id;\n    bool is_sky;\n    bool is_hit;\n    float albedo;\n    vec3 normal;\n};\n\n// Tomato SPD\nfloat tomatospd(float x) {\n    return 0.59*(1.0-pow(smoothstep(0.7,0.6,0.001*x),2.0))+0.01;\n}\n\n// Gaussian SPD\nfloat customspd(float x, float mu) {\n    x *= 0.001; // nm to um\n    x -= mu; // mean\n    x *=  15.0; // sigma\n    return 0.99*exp(-x*x)+0.01;\n}\n\nRay raytrace(in vec3 ro, in vec3 rd) {\n    Ray ray = Ray(-1.0, -1.0, -1, false, false, 0.5, vec3(0));\n\n    for(int i = 0; i < 5; i++) {\n        vec3 x = vec3(0);\n        if(i == 0) x = 1.5*vec3(0.0, 1.0, 0.0);\n        if(i == 1) x = 1.5*vec3(sin(4.0*PI/3.0),cos(4.0*PI/3.0), 0.0);\n        if(i == 2) x = vec3( 0.0, 0.0, 0.0);\n        if(i == 3) x = 1.5*vec3(sin(2.0*PI/3.0),cos(2.0*PI/3.0), 0.0);\n\n        vec2 t = sphIntersect(ro, rd, x, i==2?0.8:1.0);\n\n        if(i == 4) t = plaIntersect(ro, rd, vec4(0.0,0.0,1.0,0.0));\n\n        if((t.x >= 0.0) && (t.y > t.x)) {\n            if(ray.is_hit) {\n                if(t.x < ray.tMin) {\n                    ray.tMin = t.x;\n                    ray.tMax = t.y;\n                    ray.id = i;\n                    ray.is_hit = true;\n                    ray.is_sky = false;\n                    ray.normal = normalize((ro+(t.x*rd))-x);\n                    if(i == 4) ray.normal = vec3(0,0,1);\n                }\n            } else {\n                ray.tMin = t.x;\n                ray.tMax = t.y;\n                ray.id = i;\n                ray.is_hit = true;\n                ray.is_sky = false;\n                ray.normal = normalize((ro+(t.x*rd))-x);\n                if(i == 4) ray.normal = vec3(0,0,1);\n            }\n        } else {\n        }\n    }\n\n    return ray;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    rng_state_t rng_state;\n\n    rng_state.s0 = uvec4(fragCoord.x, fragCoord.y, iFrame, 1)+uvec4(1);\n\n    fragCoord = floor(fragCoord) + urand2(rng_state); // box filter\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 0.5; // fov\n\n    vec3 ro = vec3( 0.0,  0.3, 10.0); // ray origin\n    vec3 rd = vec3(uv.x, uv.y, -1.0); // ray direction\n\n    rd = normalize(rd); // normalize ray direction\n\n    //float lambda = (470.0*(fragCoord.x/iResolution.x))+360.0; fragColor.xyz = cie_1931_xyz_cmf(lambda); return;\n\n    float lambda = 470.0*urand1(rng_state)+360.0; // uniform sampling 360–830 nm\n\n    #ifdef USE_STANDARD_ILLUMINANT_E\n    float d = 1.0;\n    #else\n    float d = cie_d65_spd(lambda);\n    #endif\n\n    fragColor.r = d;\n\n    float emm = 0.0;\n\n    vec3 raypos = ro;\n    vec3 raydir = rd;\n\n    for(int i = 0; i < 32; i++) {\n        Ray ray = raytrace(raypos, raydir);\n\n        if(ray.is_hit) {\n            if(ray.id == 0) fragColor.r *= tomatospd(lambda);\n            //if(ray.id == 1) fragColor.r *= customspd(lambda, 0.40);\n            if(ray.id == 1) fragColor.r *= 0.85*smoothstep(0.45,0.44,0.001*lambda)+0.05;\n            if(ray.id == 2) fragColor.r *= customspd(lambda, 0.53);\n            //if(ray.id == 3) fragColor.r *= customspd(lambda, 0.60);\n            if(ray.id == 3) fragColor.r *= 0.85*smoothstep(0.54,0.6,0.001*lambda)+0.05;\n            if(ray.id == 4) fragColor.r *= 0.85;\n\n            raypos += raydir*ray.tMin;\n            raypos += 0.0001*ray.normal;\n            raydir = reflect(raydir, normalize((ray.id==4?1.0:1.0)*udir3(rng_state)+ray.normal));\n\n            vec3 light_dir = normalize(0.1*udir3(rng_state)+vec3(1.0,1.0,0.5));\n            Ray ray2 =  raytrace(raypos, light_dir);\n            emm += ray2.is_hit?0.0:fragColor.r*0.5*d*max(dot(ray.normal,light_dir),0.0);\n            continue;\n        }\n\n        if(ray.is_sky) {\n            break;\n        }\n\n        break;\n    }\n\n    fragColor.xyz = cie_1931_xyz_cmf(lambda)*((sky(raydir, lambda)*fragColor.r)+emm);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Accumulation Buffer (used for progressive rendering)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = iFrame > 0 ? texelFetch(iChannel1, ivec2(fragCoord), 0) : vec4(0);\n\n    fragColor += texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CIE 1931 XYZ\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    fragColor = vec4(fragColor.a != 0.0 ? fragColor.xyz / fragColor.a : fragColor.xyz, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Linear IEC 61966-2-1:1999 sRGB\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    fragColor = vec4(xyz_to_linear(fragColor.xyz), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}