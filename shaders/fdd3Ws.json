{
    "Shader": {
        "info": {
            "date": "1630891507",
            "description": "Result of experimentation with a new way to render highly distorted geometry",
            "flags": 32,
            "hasliked": 0,
            "id": "fdd3Ws",
            "likes": 55,
            "name": "Tangled Dreams",
            "published": 3,
            "tags": [
                "colorful",
                "weird",
                "dream"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1427
        },
        "renderpass": [
            {
                "code": "\n// main code is in Buffer A\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // render result of Buffer A\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// tangled dreams by leon denise 2021/09/06\n// using code from Inigo Quilez, Dave Hoskins, Nusan\n\n// result of experimentation with a new way to render highly distorted geometry\n// it is about temporal frame blending with ray shooting at random distance each frame\n// the shape is a repetition of folded and randomly twisted cylinders\n// frame buffer keeps the brightest color\n\n// geometry look\nconst float size = 0.01;\nconst float range = 0.2;\nconst float twist = 2.;\nconst float falloff = 1.6;\nconst float blend = 0.2;\n\n// how much we should distord space time\nconst float stretch = 1.9;\n\n// geometry count\nconst int count = 8;\n\n// delay between transition\nconst float delay = 10.0;\n\n// frame decay\nconst float decay = 0.001;\n\n// colors\nconst float colorMaterial = 0.1;\nconst float colorDistance = 1.5;\nconst float colorDot = -1.5;\nconst float colorOffset = -0.5;\nconst float saturation = .5;\n\n// distances\nconst float distanceFade = 5.0;\nconst float rayRange = 10.0;\n\n// camera\nconst float cameraDistance = 4.0;\nconst float fieldOfView = 8.5;\n\n// constant\nconst float pi = 3.14;\nconst float epsilon = 0.001;\n\n// globals\nfloat rng;\nfloat material;\n\n// signed distance function\nfloat map(vec3 p)\n{\n    // init distance field\n    float scene = 1000.0;\n    float shape = 1000.0;\n    \n    // init amplitude of transform falloff\n    float a = 1.0;\n    \n    // thickness\n    float w = pow(sin(rng*pi), .2);\n    \n    // offset rotation every seconds\n    float change = floor(iTime/delay);\n    \n    // reset material\n    material = 0.0;\n    for (int index = 0; index < count; ++index)\n    {\n        // rotate\n        p.xy *= rot(rng * stretch / a + (twist + change) / a);\n        \n        // fold\n        p.x = abs(p.x) - range*a;\n        \n        // shape\n        shape = length(p.xy)-size*a*w;\n        \n        // material blending\n        float k = smoothing(scene, shape, blend*a);\n        material = mix(float(index), material, k);\n        \n        // geometry blending\n        scene = smin(scene, shape, blend*a);\n        \n        // transform falloff\n        a /= falloff;\n    }\n\n    return scene;\n}\n\n// return color from pixel coordinate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // reset color\n    fragColor = vec4(0);\n    vec3 color = vec3(0);\n    \n    // coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 eye = vec3(0,0,cameraDistance);\n    vec3 ray = normalize(vec3(uv, -fieldOfView));\n    \n    // white noise\n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    rng = hash13(seed);\n\n    // ray shooting\n    vec3 pos = eye + ray * rayRange * rng;\n\n    // volume estimation\n    float dist = map(pos);\n    if (dist < epsilon)\n    {\n        // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n        vec2 off=vec2(epsilon,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n\n        // distance from origin\n        float d = length(pos);\n\n        // color palette by Inigo Quilez (https://iquilezles.org/articles/palettes)\n        float c = material*colorMaterial + d*colorDistance + colorOffset + colorDot*dot(normal, vec3(1,0,0));\n        vec3 tint = vec3(0.5)+vec3(0.5)*cos(vec3(1,2,3)+c);\n\n        // fade colors\n        color = mix(vec3(1), tint, saturation);\n\n        // distance shading\n        color *= smoothstep(distanceFade, 0., d);\n    }\n    \n    // frame buffer\n    vec4 frame = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    \n    // fade in fade out animation\n    frame *= pow(sin(fract(iTime/delay)*pi), 0.005);\n    \n    // temporal frame blending\n    fragColor = max(frame-decay, vec4(color, 1));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\nfloat smoothing(float d1, float d2, float k) { return clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 ); }\nfloat smax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}