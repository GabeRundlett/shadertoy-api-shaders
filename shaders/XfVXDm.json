{
    "Shader": {
        "info": {
            "date": "1715279698",
            "description": "a mandel zoomer aimed at low spec GPUs such as the Raspi 4",
            "flags": 0,
            "hasliked": 0,
            "id": "XfVXDm",
            "likes": 4,
            "name": "nonbinary",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "Seg",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "// a mandelbrot zoomer\n\n// mostly nicked from https://www.shadertoy.com/view/4df3Rn\n\n#define ITER 512\n#define SMOOTH 1\n\n// set >1 for antialias/motion blur, needs a beefy GPU\n#define AA 1\n\n// early out check for bulb, big win on raspi\nbool in_bulb(in vec2 c){float c2=dot(c,c);\n\t// inside M1 https://iquilezles.org/articles/mset1bulb\n\tif(256.0*c2*c2-96.*c2+32.*c.x-3.<0.) return true;\n\t// inside M2 https://iquilezles.org/articles/mset2bulb\n\tif(16.0*(c2+2.0*c.x+1.0)-1.<0.) return true;\n\treturn false;}\n\nfloat mandelbrot_iterate(in vec2 c){\n\tif(in_bulb(c)) return -1.0; // early out, big win on raspi\n#if SMOOTH\n\tconst float B=float(ITER)/4.;\n#else\n\tconst float B=2.;\n#endif\n\tfloat l=0.;\n\tvec2 z=vec2(0.);\n\tfor(int i=0;i<ITER;++i){\n\t\tz=vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y)+c;\n\t\tif(dot(z,z)>(B*B)) break;\n\t\tl+=1.;}\n\tif(l>float(ITER)-1.) return -1.;\n#if SMOOTH\n\t// https://iquilezles.org/articles/msetsmooth\n\t//l=l-log(log(length(z))/log(B))/log(2.);\n\tl=l-log2(log2(dot(z,z)))+4.;\n#endif\n\treturn l;}\n\n#if __VERSION__ > 120\nvec3 GradientMap(float t) {\n    // vec4(R, G, B, GradientPosition = 0..1)\n    const vec4 color[4] = vec4[4](\n        vec4(252.0/255.0, 244.0/255.0,  52.0/255.0, 0.0), // yellow\n        vec4(255.0/255.0, 255.0/255.0, 255.0/255.0, 1.0/3.0), // white\n        vec4(156.0/255.0,  89.0/255.0, 209.0/255.0, 2.0/3.0), // purple\n        vec4( 44.0/255.0,  44.0/255.0,  44.0/255.0, 1.0) // black\n    );\n\n    // find the correct color index\n    int i;\n    for(i = 1; i < color.length(); i++) {\n      if (t < color[i].a) {\n        break;\n      }\n    }\n    int j=i-1;\n\n    // normalize t\n    t = (t - color[j].a) / (color[i].a - color[j].a);\n\n#if 0\n    // non-smooth gradient\n    t = step(0.5, t);\n#endif\n    \n    // mix final color\n    return mix(color[j].rgb, color[i].rgb, t);\n}\n#endif\n\nvec3 hue(float h){\n    return .6+.6*cos(6.3*h+vec3(0,23,21));\n  //return .5+   cos(6.3*h+vec3(0,23,21)); // full saturated hue\n}\n\n#ifndef saturate\n#define saturate(v) clamp(v,0.,1.)\n#endif\n\nvec3 hsv2rgb(vec3 c){vec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,saturate(abs(fract(c.x+K.xyz)*6.-K.w)-K.x),c.y);}\n\n// https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb_smooth( in vec3 c ){\n\tvec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))/float(AA)))/iResolution.y;\n        float w = float(AA*m+n);\n        float time = iTime;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n        float time = iTime;\n#endif\n    \n        float zoo = 0.62 + 0.45*cos(.07*time);\n        float coa = cos( -0.15*time +1.55);\n        float sia = sin( -0.15*time +1.55);\n        zoo = pow( zoo,8.0);\n        vec2 xy = vec2( p.x*coa-p.y*sia, p.x*sia+p.y*coa);\n        vec2 c = vec2(-.745,.186) + xy*zoo;\n\n        float l=mandelbrot_iterate(c);\n        if(l<0.0){\n            col += vec3(0.0,0.0,0.0);\n        }else{\n            col += GradientMap(mod(l*(1.0/16.0)-(1.0/2.0)*iTime,1.0));\n\t    //col += 0.5 + 0.5*cos( 3.0 + l*0.15 + vec3(0.0,0.6,1.0));\n\t    //col+=hue(l*(1.0/16.0)-(1.0/4.0)*iTime);\n\t    //col+=hsv2rgb_smooth(vec3(l*(1.0/16.0)-(1.0/4.0)*iTime,.8,1.));\n        }\n#if AA>1\n    }\n    col *= 1.0/float(AA*AA);\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}