{
    "Shader": {
        "info": {
            "date": "1558574865",
            "description": "Study around the snake() function, to build uv-space shaped like a snake, where each section is half a circle.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt2GRh",
            "likes": 11,
            "name": "Snake deform",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "spacebending"
            ],
            "usePreview": 0,
            "username": "eliemichel",
            "viewed": 775
        },
        "renderpass": [
            {
                "code": "// Released under the MIT licence\n// Copyright (c) 2019 - Alt144 (Ã‰lie Michel)\n// Study around the snake() function, to build uv-space shaped like a snake,\n// where each section is half a circle.\n\n#define PI 3.141593\n\nfloat pbeat(float t, float p)\n{\n    return pow(1. - fract(t), p);\n}\n\nmat2 rot(float t)\n{\n    float s = sin(t);\n    float c = cos(t);\n    return mat2(c, s, -s, c);\n}\n\nfloat fill(float d)\n{\n    return smoothstep(.01, .0, d);\n}\n\nfloat sat(float x) { return clamp(x, 0., 1.); }\n\nfloat triangle(vec2 uv, float radius)\n{\n    return min(\n        fill(abs(uv.y) + (uv.x - radius) * tan(PI/6.)),\n    \tfill(-uv.x - radius)\n    );\n}\n\nfloat pattern(vec2 uv)\n{\n    vec2 udx = floor(uv*5.);\n    uv.y += mod(udx.x, 2.)/5. * 0.5;\n    udx = floor(uv*5.);\n    vec2 guv = fract(uv*5.)-.5;\n    guv = rot(0.) * guv;\n    return triangle(guv, mix(0.25, 0.45, pbeat(iTime + udx.x*.01, 10.0)));\n}\n\nfloat lstep(float a, float b, float x)\n{\n    return (x - a) / (b - a);\n}\n\nvec2 ring(vec2 uv, float innerRadius, float outerRadius)\n{\n    float a = atan(uv.y, uv.x);\n    float r = length(uv);\n    uv = vec2(a / PI, sat(smoothstep(innerRadius, outerRadius, r)));\n    return uv;\n}\n\n/**\n * uv: us-space to deform\n * rad1: Radius of the top arcs\n * rad2: Radius of the bottom arcs\n * th: Thickness of the snake\n */\nvec2 snake(vec2 uv, float rad1, float rad2, float th)\n{\n    float radsum = rad1 + th + rad2;\n    vec2 uv0 = uv;\n    vec2 uv2 = uv;\n    \n    uv.x = mod(uv.x - radsum, 2. * radsum) - radsum;\n    uv2.x = mod(uv2.x, 2. * radsum) - radsum;\n    \n    uv = ring(uv, rad1, rad1 + th);\n    uv2 = ring(uv2 * vec2(-1.,1.), rad2, rad2 + th);\n    float mid = (rad2+th/2.)/radsum;\n    uv2.x = mix(0.0, mid, lstep(-1.0, 0.0, uv2.x));\n    uv.x = mix(mid, 1.0, lstep(0.0, 1.0, uv.x));\n    uv2.y = 1. - uv2.y;\n    vec2 uv3 = mix(uv, uv2, step(0., -uv0.y));\n\n    uv = mix(uv, uv2, step(0., -uv0.y));\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy)/iResolution.x;\n    vec2 uv0 = uv;\n    float rad = 0.3;\n    float th = 0.1;\n    \n    uv = snake(uv, rad - th, rad, th);\n    uv.x *= 4./5.;\n    \n    float ss = 0.05;\n    float t = mix(0., 1., fract(iTime * .5));\n    float test = step(t,uv.x) * step(uv.x, t+ss);\n    test *= step(.1, uv.y) * step(uv.y, 0.9);\n    \n    vec2 tuv = uv - vec2(iTime*0.1,0.);\n    vec3 col = vec3(0., pattern(tuv), test);\n    \n    col = vec3(1.,1.,.9);\n    col = mix(col, vec3(.95, 0.15, 0.1), fill((abs(fract(tuv.x*5.-.05)-0.5)-0.15)*2.0));\n    col = mix(col, vec3(.9, 0.7, 0.2), fill((abs(fract(tuv.x*5.+.05)-0.5)-0.15)*2.0));\n    col = mix(col, vec3(.05, 0.35, 0.9), fill((abs(fract(tuv.x*5.)-0.5)-0.15)*2.0));\n    \n    col = mix(col, vec3(.1), pattern(tuv * vec2(15.,1.)) * step(.001, tuv.y) * step(tuv.y, .999));\n    \n    float o = 0.07;\n    uv = snake(uv0, rad-th - o, rad + o, th);\n    col = mix(col, vec3(.1), fill(max(.45 - uv.y, uv.y - .55) * 0.35));\n    \n    o = -o;\n    uv = snake(uv0, rad-th - o, rad + o, th);\n    col = mix(col, vec3(.1), fill(max(.45 - uv.y, uv.y - .55) * 0.35));\n    \n    o -= 0.01;\n    uv = snake(uv0, rad-th - o, rad + o, th);\n    //col = mix(col, vec3(.1), fill((.55 - uv.y) * 0.35));\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}