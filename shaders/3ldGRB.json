{
    "Shader": {
        "info": {
            "date": "1576742134",
            "description": "Lawrence's CSG shader based on iq's stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldGRB",
            "likes": 2,
            "name": "lawrence_csg",
            "published": 3,
            "tags": [
                "csg"
            ],
            "usePreview": 0,
            "username": "brad_grantham",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nmat4 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat4(\n        vec4(c, 0, s, 0),\n        vec4(0, 1, 0, 0),\n        vec4(-s, 0, c, 0),\n        vec4(0, 0, 0, 1)\n    );\n}\n\n// https://iquilezles.org/articles/distfunctions\n\nfloat sphere_dist(vec3 p, vec4 s) {\n    return distance(p, s.xyz) - s.w;\n}\n\nfloat box_dist(vec3 p, vec3 c, vec3 s, float r) {\n    vec3 d = abs(p - c) - (s - r);\n    return length(max(d, 0.0)) - r\n        + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat union_d(float d1, float d2) {\n    return min(d1, d2);\n}\n\nfloat intersection_d(float d1, float d2) {\n    return max(d1, d2);\n}\n\nfloat difference_d(float d1, float d2) {\n    return max(d1, -d2);\n}\n\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// (distance,oid)\n// oid -1.0 = miss\n// oid 0.0 = floor\n// oid 1.0 = main object\nvec2 dist(vec3 p, bool includeFloor) {\n    float sd = sphere_dist(p, vec4(0.0, 0.0, 0.0, 3.0));\n    float bd = box_dist(p, vec3(0.0, 0.0, 0.0), vec3(2.5), 0.5);\n\n    float od = difference_d(bd, sd);\n    // od = sd;\n\n    if (includeFloor) {\n\t    float fd = p.y - -3.0;\n    \tif (fd < od) {\n        \treturn vec2(fd, 0.0);\n    \t}\n    }\n\n    return vec2(od, 1.0);\n}\n\nvec2 march(vec3 ro, vec3 rd) {\n    float d = 0.0;\n\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + d*rd;\n        vec2 f = dist(p, true);\n        d += f.x;\n        if (d > MAX_DIST || f.x < SURF_DIST) {\n            return vec2(d, f.y);\n        }\n    }\n\n    return vec2(0.0, -1.0);\n}\n\nvec3 normal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n\n    return normalize(\n        dist(p, true).x - vec3(\n            dist(p - e.xyy, true).x,\n            dist(p - e.yxy, true).x,\n            dist(p - e.yyx, true).x));\n}\n\nvec3 shade(vec3 rd, vec3 p, int oid) {\n    vec3 l = vec3(0.0, 10.0, 0.0);\n    l.xz += vec2(sin(iTime+3.0), cos(iTime+3.0))*10.0;\n\n    vec3 to_l = normalize(l - p);\n    vec3 n = normal(p);\n    float diffuse = max(0.0, dot(to_l, n));\n    vec3 col;\n    if (oid == 0) {\n        // Floor.\n        float d = dist(p, false).x;\n        d = mod(d, 1.0) > 0.9 ? 1.0 : 0.9;\n        col = vec3(0.8, 0.8, 0.8)*diffuse*d;\n    } else if (oid == 1) {\n        // Object.\n        vec3 r = 2.0*dot(to_l, n)*n - to_l;\n        float specular = pow(max(dot(r, -rd), 0.0), 5.0);\n        col = vec3(1.0, 0.0, 0.0)*diffuse + vec3(1.0, 1.0, 1.0)*specular;\n    } else {\n        col = vec3(1.0, 1.0, 0.0);\n    }\n\n    // Shadow.\n    if (march(p + n*SURF_DIST*2.0, to_l).x < distance(l, p)) {\n        col *= 0.5;\n    }\n\n    return col;\n}\n\nmat3 makeCamera(vec3 eye, vec3 lookat) {\n    vec3 z = normalize(eye - lookat);\n    vec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), z));\n    vec3 y = cross(z, x);\n\n    return mat3(x, y, z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = (fragCoord - iResolution.xy/2.0)/iResolution.y;\n\n    vec3 eye = vec3(sin((iTime + 3.0)/10.0)*10.0, 7.0, cos((iTime + 3.0)/10.0)*10.0);\n    vec3 lookat = vec3(0.0, 0.0, 0.0);\n    mat3 cam = makeCamera(eye, lookat);\n\n    vec3 rd = normalize(-cam[2]*1.5 + cam[0]*xy.x + cam[1]*xy.y);\n    vec3 ro = eye;\n\n    vec2 hit = march(ro, rd);\n    vec3 col;\n    if (hit.y == -1.0) {\n        col = vec3(1.0, 0.0, 1.0);\n    } else {\n\t    vec3 p = ro + rd*hit.x;\n    \tcol = shade(rd, p, int(hit.y));\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}