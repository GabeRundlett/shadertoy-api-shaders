{
    "Shader": {
        "info": {
            "date": "1679547690",
            "description": "screen-space normals via dFdx() dFdy() on 3-space point position.\nleft: regular normals\nright: screenspace approach",
            "flags": 0,
            "hasliked": 0,
            "id": "mdcSR4",
            "likes": 6,
            "name": "dFdxy screenspace normals",
            "published": 3,
            "tags": [
                "normals",
                "screenspace",
                "screenspace"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "float gT;\nfloat gMapCalls;\nvec3  gLightDir = normalize(v1);\n\nfloat map(in vec3 p) {\n    gMapCalls += 1.0;\n    float d = 1e9;\n    \n    const vec2 donutSize = vec2(3.0, 1.0);\n    \n    // donut\n    d = min(d, sdTorus(p.yxz, donutSize));\n    \n    // cylinder\n    float cylRad = 0.5;\n    d = min(d, sdCappedCylinder(p.yxz + (donutSize.x - donutSize.y - cylRad) * (vec3(cos(gT), 0.0, sin(gT))), 3.0, cylRad));\n        \n    return d;\n}\n\nvec3 mapNormal_screenspace(vec3 p) {\n    vec3 dPdx = dFdx(p);\n    vec3 dPdy = dFdy(p);\n    return normalize(cross(dPdx, dPdy));\n}\n\nvec3 mapNormal_regular(vec3 p) {\n\tvec2 e = vec2 (0.01, 0.);\n\tfloat d  = map(p);\n    float d1 = map(p + e.xyy);\n    float d2 = map(p + e.yxy);\n    float d3 = map(p + e.yyx);\n  \treturn normalize(vec3(d1 - d, d2 - d, d3 - d));\n}\n\n\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n\n    gT = iTime;\n    \n    float zoom      = 1.2;\n    vec2  xy        = (XY * 2.0 - iResolution.xy) / MINRES * zoom;\n    vec2  ms        = (iMouse.xy * 2.0 - iResolution.xy) / MINRES * zoom;\n    if (length(iMouse.xy) < 50.0) {\n        ms = vec2(gT, -0.5);\n    }\n    \n    float camDist   = 10.0;\n    float camZoom   =  2.0;\n    vec3  lookTo    = v0;\n    vec3  lookFrom  = vec3(vec2(cos(ms.x), sin(ms.x)) * camDist, -ms.y * 4.0).xzy;\n    float ssEps     = 5.0 / MINRES;\n    \n    \n    vec3  camF      = normalize(lookTo - lookFrom);\n    vec3  camR      = normalize(cross(camF, vY));\n    vec3  camU      = cross(camR, camF);\n    \n    vec3  ro        = lookFrom;\n    vec3  rd        = normalize(camF + (xy.x * camR + xy.y * camU) / camZoom);\n    \n    // march\n    float maxSteps  = 150.0;\n    float underStep =   1.0;\n    float wsEps     =   0.001;\n    float t         =   0.0;\n    float minD      =   1e9;\n    bool  hit       = true;\n    vec3  p;\n    gMapCalls       = 0.0;\n    for (float n = 0.0; n < maxSteps; ++n) {\n        p = ro + rd * t;\n        float d = map(p);\n        minD = min(minD, d);\n        if (d < wsEps) {\n            break;\n        }\n        if (t > 1e2) {\n            hit = false;\n            break;\n        }\n        \n        t += d * underStep;\n    }\n    \n    \n    vec3 nrm;\n    \n    if (hit) {\n        if (XY.x < iResolution.x / 2.0) {\n            nrm = mapNormal_regular(p);\n        }\n        else {\n            nrm = mapNormal_screenspace(p);\n        }\n    }\n    else {\n        nrm = vZ;\n    }\n    \n    float ambient = 0.1;\n    float shade = max(ambient, dot(nrm, gLightDir));\n    \n    float expense = gMapCalls / maxSteps;\n    \n    vec3 rgb = vec3(shade);\n    rgb = pow(rgb, vec3(1.0/2.2));\n    if (iMouse.z > 0.0) {\n        rgb = mix(rgb, vec3(1.0, 0.6, 0.2), expense);\n    }\n\n    RGBA = vec4(rgb, 1.0);\n    \n    if (abs(XY.x - iResolution.x / 2.0) < 0.6) {\n        RGBA.rgb = vec3(0.6);\n    }\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 v0 = vec3(0.0);\nconst vec3 v1 = vec3(1.0);\nconst vec3 vX = vec3(1.0, 0.0, 0.0);\nconst vec3 vY = vec3(0.0, 1.0, 0.0);\nconst vec3 vZ = vec3(0.0, 0.0, 1.0);\n\n#define MINRES (min(iResolution.x, iResolution.y))\n\n\nfloat sdSphere(in vec3 p, in float r) {\n    return length(p) - r;\n}\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}