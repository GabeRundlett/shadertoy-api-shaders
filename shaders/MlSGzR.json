{
    "Shader": {
        "info": {
            "date": "1426633067",
            "description": "Interpolating four points as overlapping circles with a radius of 1. Bottom half shows derivative of linear / bokeh function.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlSGzR",
            "likes": 17,
            "name": "Bokeh Interpolation",
            "published": 3,
            "tags": [
                "bokeh",
                "interpolation"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 2104
        },
        "renderpass": [
            {
                "code": "float m;\n\n// uncomment to disable gamma correction\n#define GAMMA_CORRECT\n// uncomment to disable attenuation\n#define GAIN_ADJUST\n// uncomment for harder bokeh-like edges\n#define SQUARE_WEIGHTS\n\n// disabling GAIN_ADJUST and SQUARE_WEIGHTS gives you bokeh rings for each interpolant,\n// which contains discontinuities but is a nice alternative to the rectangular look\n// of bilinear interpolation, particularly at small magnification levels.\n// thx to @TheMarkedVapor for the inspiration\n\nvec3 linear_srgb(vec3 x) {\n#ifdef GAMMA_CORRECT\n    return mix(1.055*pow(x, vec3(1./2.4)) - 0.055, 12.92*x, step(x,vec3(0.0031308)));\n#else\n    return x;\n#endif\n}\n\nvec3 srgb_linear(vec3 x) {\n#ifdef GAMMA_CORRECT\n    return mix(pow((x + 0.055)/1.055,vec3(2.4)), x / 12.92, step(x,vec3(0.04045)));\n#else\n    return x;\n#endif\n}\n\nconst vec2 texsize = vec2(64.0);\nvec3 fetch(ivec2 uv) {\n    return srgb_linear(texture(iChannel0, (vec2(uv) + 0.5) / texsize).rgb);\n}\n\nfloat gain(float x, float P) {\n    if (x > 0.5)\n        return 1.0 - 0.5*pow(2.0-2.0*x, P);\n    else\n        return 0.5*pow(2.0*x, P);\n}\n\nfloat mdist(float a, float b) {\n#ifdef GAIN_ADJUST    \n    float P = 0.707;\n    a = gain(a, P);\n    b = gain(b, P);\n#endif\n    return length(vec2(a,b));\n}\n\nvec4 bokeh_interpolants(vec2 f) {\n    vec2 sp = f;\n    vec2 sq = 1.0 - f;\n    //sq = sq*sq;\n    vec4 sd = vec4(\n        mdist(sp.x,sp.y), \n\t\tmdist(sq.x,sp.y), \n        mdist(sp.x,sq.y),\n        mdist(sq.x,sq.y));\n    vec4 a = max(vec4(0.0),1.0-sd);\n#ifdef SQUARE_WEIGHTS\n    a *= a;\n#endif\n    float w = a.x+a.y+a.z+a.w;\n    return a/w;\n}\n\nvec3 samplef(vec2 uv) {\n    ivec2 ruv = ivec2(floor(uv));\n    \n    vec2 tuv = uv-0.5;\n    vec2 n = floor(tuv);\n    vec2 f = fract(tuv);\n    \n    ivec2 iuv = ivec2(n);\n    vec3 total = vec3(0.0);\n\n    vec4 a = bokeh_interpolants(f);    \n    total += fetch(iuv + ivec2(0,0)) * a.x;\n    total += fetch(iuv + ivec2(1,0)) * a.y;\n    total += fetch(iuv + ivec2(0,1)) * a.z;\n    total += fetch(iuv + ivec2(1,1)) * a.w;\n    \n    return linear_srgb(total);\n}\n\nvec3 samplefl(vec2 uv) {\n    vec2 suv = uv + iTime;\n    return ((uv.x+uv.y-m*8.0) < 0.0) ? texture(iChannel0,suv/texsize).rgb : samplef(suv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    float scale = mix(8.0,64.0,sin(iTime*0.3)*0.5+0.5);\n    uv *= scale;\n    m =( iMouse.x / iResolution.x)*2.0-1.0;\n    \n    fragColor = (uv.y > -1.0)?vec4(samplefl(uv),1.0):vec4((0.5/scale)*fwidth(samplefl(uv))*iResolution.x,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}