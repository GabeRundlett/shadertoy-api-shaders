{
    "Shader": {
        "info": {
            "date": "1672205272",
            "description": "scrolling nebula effect - waterfall remix\nhttps://store.steampowered.com/app/1751970/A_Blast_From_The_Past/",
            "flags": 0,
            "hasliked": 0,
            "id": "clX3zl",
            "likes": 15,
            "name": "CosmicWaterfall",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "blend"
            ],
            "usePreview": 1,
            "username": "Del",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "// Cheap(ish) scrolling nebula effect (just noise mixing)\n// https://store.steampowered.com/app/1751970/A_Blast_From_The_Past/\n\n// noise, IQ - https://www.shadertoy.com/view/4sfGzS\n// (somewhat jigged)\n\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n//#define UI3 uvec3(UI0, UI1, 2798796415U)\n//#define UI4 uvec4(UI3, 1979697957U)\n#define UIF (1.0 / float(0xffffffffU))\n\n\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * UI2;\n\tuint n = (q.x ^ q.y) * UI0;\n\treturn float(n) * UIF;\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    //vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n\n    return mix( mix( hash12( i + vec2(0.0,0.0) ), \n                     hash12( i + vec2(1.0,0.0) ), u.x),\n                mix( hash12( i + vec2(0.0,1.0) ), \n                     hash12( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat mNoise( in vec2 pos )\n{\n    vec2 q = pos;\n    const mat2 m = mat2( 0.36,  0.80,  -0.80,  0.36 );\n                    \n    float amplitude = 0.5;\n    float f  = amplitude*noise( q );\n    float scale = 2.12;\n    for (int i = 0; i < 4; ++i)\n    {    \n        q = m*q*scale; //q*=scale;\n    \tf += amplitude * noise( q );\n        amplitude *= 0.5;\n    }\n    return f;\n}\n\n\n// voronoi stars - simplified and slightly optimized to use a single texture fetch for the randomness\nvec3 stars(in vec2 pos)\n{\n    vec3 col = vec3(0.0);\n    vec2 n = floor(pos);\n    vec2 f = fract(pos);\n    vec2 dir = sign(f-0.5);\n    for( float j=0.0; j<=1.0; j+=1.0 )\n    {\n   \t\tfor( float i=0.0; i<=1.0; i+=1.0 )    \n\t    {\n            vec2 cell = vec2(i*dir.x,j*dir.y);\n            vec2 p = (n + cell)+0.5;\n            vec4 rnd1 = texture( iChannel0, p/256.0, -100.0 ).xyzw; // random offset,col,brightness\n            float d = length(cell + rnd1.xy - f);                \n            rnd1.w = max(0.2,rnd1.w);\n            // falloff\n            float dist = max(0.1, 1.0 - d);\n            float starfo = pow(dist, 60.0) * 6.5 + pow(dist, 120.0);\n\t        col += vec3(rnd1.z*0.2) * rnd1.w * starfo;\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\t\n\tvec2 uv = p;\n    \n    uv.x *= length(p-vec2(1.0));\n    \n    float ny = p.y+0.5; // ypos 0-1\n\n    uv.y *= 1.2;\n    uv.x *= 3.55;\n\n\tfloat t = iTime * .915;\n    uv.y += t;\n    \n    float fval1 = mNoise(uv);\n    uv.x *= 0.74;\n    \n    float fval = 0.33+(ny*0.1); // 0.13 less fuckage\n    uv.x += 3.5+(fval1*fval); // here, we fuck layer2 with layer1 a touch for a lavalamp style effect\n    uv.y -= t*0.53;\n    float fval2 = mNoise(uv);\n    \n    float cut = 0.3;  \n    fval1 = smoothstep(cut-0.1,1.8,fval1);\n    fval2 = smoothstep(cut,1.8,fval2);\n    fval1 = fval1+fval2;\n\n    // colors (layer1)\n    vec3 col1top = vec3(0.65,1.0,0.5);\n    vec3 col1bot = vec3(0.85,0.86,0.85);\n\n    // colors (layer2)\n    vec3 col2top = vec3(1.1,0.75,0.5)*1.8;\n    vec3 col2bot = vec3(1.0,0.85,0.7)*1.8;\n    \n    vec3 col1 = mix(col1bot,col1top,ny)*fval1;\n    vec3 col2 = mix(col2bot,col2top,ny)*fval2;\n    \n    // this blend is calculated with the asspluck constant\n    float blend = 0.5+(sin(fval1*4.25+fval2*1.75)*0.25);\n    vec3 color = mix(col1,col2,blend)*1.11;\n\n    // test it with a starfield background...\n    color = clamp(color,vec3(0.0),vec3(1.0));\n    float a = smoothstep(0.4,0.0,length(color)); // a = starmask\n    color +=  stars(p*15.0) * a;\n\n\n    // mouse = rgb swizzle\n    //if (iMouse.z>0.5)\n        color = color.zyx;\n    // vignetting\t\n   color *= 1.0 - 0.4*dot(p,p);\t\t// vignette\n\n\n\tfragColor = vec4(color.xyz,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}