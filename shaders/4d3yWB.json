{
    "Shader": {
        "info": {
            "date": "1519940955",
            "description": "I will soon limit the ball's position, so it doesn't clip through the frame border. Feel free to make it shorter!",
            "flags": 0,
            "hasliked": 0,
            "id": "4d3yWB",
            "likes": 7,
            "name": "Self-Playing Pong",
            "published": 3,
            "tags": [
                "2d",
                "game",
                "pong"
            ],
            "usePreview": 0,
            "username": "Kosro",
            "viewed": 1185
        },
        "renderpass": [
            {
                "code": "#define OFFSET 1.3541\n#define RADIUS 0.05\n#define SIZE vec2(0.02,0.3)\n#define TIME_SCALE 0.5\n\n#define NORM vec2(iResolution.x/iResolution.y,1.0)\n\nfloat frac(float c) {\n\treturn c - floor(c);\n}\n\nfloat lerp(float a, float b, float t) {\n\treturn a + (b-a) * t;\n}\n\nfloat pingpong(float t) {\n\treturn abs(frac(t)-0.5)*2.0;\n}\n\nvec2 ball(float t) {\n    return vec2(pingpong(t),pingpong(t*OFFSET));\n}\n\nfloat getPos(float t) {\n    return clamp(lerp(ball(ceil(t)).y,ball(ceil(t+1.0)).y,frac(t)),SIZE.y*0.5,1.0-SIZE.y*0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfloat t = iTime*TIME_SCALE;\n\n \tfloat a;\n\n\ta += step(length((uv-ball(t))*NORM),RADIUS);\n    \n    a += step(uv.x,SIZE.x) * step(abs(uv.y-getPos(t+0.5)),SIZE.y*0.5);\n    \n    a += step(1.0-SIZE.x,uv.x) * step(abs(uv.y-getPos(t-1.0)),SIZE.y*0.5);\n\n\tfragColor = vec4(vec3(a), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}