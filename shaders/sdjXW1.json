{
    "Shader": {
        "info": {
            "date": "1712187440",
            "description": "A quick test of CRT post-effect.",
            "flags": 32,
            "hasliked": 0,
            "id": "sdjXW1",
            "likes": 4,
            "name": "MCGA on CRT",
            "published": 3,
            "tags": [
                "postprocessing",
                "retro",
                "crt",
                "mcga"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "#define BLUR_LENGTH 100\n#define BLUR_STEPS 50\n\nfloat hash(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float v = fragCoord.y / iResolution.y;\n    float rand = hash(fragCoord);\n\n    float epsilon = 0.01;\n    float baseIntensity = pow(epsilon, 1./float(BLUR_STEPS));\n\n    vec3 color = vec3(0.);\n\n    for (int i = 0; i < BLUR_STEPS; ++i)\n    {\n        float offset = (float(i) + rand) * float(BLUR_LENGTH) / float(BLUR_STEPS);\n\n        float u = (fragCoord.x - offset) / iResolution.x;\n\n        float intensity = exp(-float(i) * 5. / offset);\n        color += texture(iChannel1, vec2(u, v)).rgb * pow(baseIntensity, float(i));\n    }\n    color *= 0.3*float(BLUR_LENGTH)/float(BLUR_STEPS);\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n// Input image, compositing a video with a static texture just so it looks more interesting.\n//\n\nvec3 rgb2hsv(vec3 rgb)\n{\n\tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n\tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = Cmax - Cmin;\n\n\tvec3 hsv = vec3(0., 0., Cmax);\n\t\n\tif (Cmax > Cmin)\n\t{\n\t\thsv.y = delta / Cmax;\n\n\t\tif (rgb.r == Cmax)\n\t\t\thsv.x = (rgb.g - rgb.b) / delta;\n\t\telse\n\t\t{\n\t\t\tif (rgb.g == Cmax)\n\t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n\t\t\telse\n\t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n\t\t}\n\t\thsv.x = fract(hsv.x / 6.);\n\t}\n\treturn hsv;\n}\n\nfloat chromaKey(vec3 color)\n{\n\tvec3 backgroundColor = vec3(0.157, 0.576, 0.129);\n\tvec3 weights = vec3(4., 1., 2.);\n\n\tvec3 hsv = rgb2hsv(color);\n\tvec3 target = rgb2hsv(backgroundColor);\n\tfloat dist = length(weights * (target - hsv));\n\treturn 1. - clamp(3. * dist - 1.5, 0., 1.);\n}\n\nvec3 changeSaturation(vec3 color, float saturation)\n{\n\tfloat luma = dot(vec3(0.213, 0.715, 0.072) * color, vec3(1.));\n\treturn mix(vec3(luma), color, saturation);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 color = texture(iChannel0, uv).rgb;\n\tvec3 bg = texture(iChannel1, uv).rgb;\n\t\n\tfloat incrustation = chromaKey(color);\n\t\n\tcolor = changeSaturation(color, 0.5);\n\tcolor = mix(color, bg, incrustation);\n\n    //color = vec3(smoothstep(0.01, 0.009, length(uv*vec2(iResolution.x/iResolution.y, 1.)-0.5)));\n    //color = debugPattern(fragCoord, iResolution.xy);\n\tfragColor = vec4(color, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PIXEL_SIZE 6\n#define COLOR_DEPTH vec3(8)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 resolution = floor(iResolution.xy / float(PIXEL_SIZE));\n\n    vec2 pixel = fract(fragCoord / float(PIXEL_SIZE));\n    vec3 mask = (pixel.x - vec3(0., 2., 4.)/6.) * 3.;\n    mask = 1. - clamp(pow(abs(1. - 2. * mask), vec3(8.)), 0., 1.);\n    mask *= 1. - clamp(pow(abs(1. - 2. * pixel.y), 3.), 0., 1.);\n\n\n    vec2 uv = floor(fragCoord/vec2(PIXEL_SIZE))/resolution;\n    vec3 color = texture(iChannel0, uv).rgb;\n    color = floor(color * COLOR_DEPTH) / COLOR_DEPTH;\n    color *= mask*mask;\n\n\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}