{
    "Shader": {
        "info": {
            "date": "1642996206",
            "description": "pink dance 2d",
            "flags": 8,
            "hasliked": 0,
            "id": "fsjczR",
            "likes": 10,
            "name": "pink dance 2d",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "draw"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(3.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.0001,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\nvec3 DrawFigRB(vec3 pColObj, vec3 colOut, float distObj, float r )\n{  colOut = mix(colOut,pColObj ,S2( distObj-r,0.0)); return colOut; }\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n\nvec3 hacerMano(vec2 p, vec3 col)\n{\nvec2 pc1p1=vec2(.314,.692);\nvec2 pc1p2=vec2(.262,.748);\nvec2 pc1p3=vec2(.292,.748);\n\nvec2 pc2p1=vec2(.292,.748);\nvec2 pc2p2=vec2(.318,.732);\nvec2 pc2p3=vec2(.336,.717);\n\nvec2 pc3p1=vec2(.336,.714);\nvec2 pc3p2=vec2(.310,.764);\nvec2 pc3p3=vec2(.332,.776);\n\nvec2 pc4p1=vec2(.336,.776);\nvec2 pc4p2=vec2(.350,.744);\nvec2 pc4p3=vec2(.360,.728);\n\nvec2 pc5p1=vec2(.360,.726);\nvec2 pc5p2=vec2(.356,.771);\nvec2 pc5p3=vec2(.360,.794);\n\nvec2 pc6p1=vec2(.360,.791);\nvec2 pc6p2=vec2(.372,.800);\nvec2 pc6p3=vec2(.392,.735);\n\nvec2 pc7p1=vec2(.314,.692);\nvec2 pc7p2=vec2(.370,.655);\nvec2 pc7p3=vec2(.386,.678);\n\nvec2 pc8p1=vec2(.388,.680);\nvec2 pc8p2=vec2(.425,.710);\nvec2 pc8p3=vec2(.392,.732);\n\nfloat d1= sdBezier(p,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(p,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(p,pc3p1,pc3p2,pc3p3);\nfloat d4= sdBezier(p,pc4p1,pc4p2,pc4p3);\nfloat d5= sdBezier(p,pc5p1,pc5p2,pc5p3);\nfloat d6= sdBezier(p,pc6p1,pc6p2,pc6p3);\nfloat d7= sdBezier(p,pc7p1,pc7p2,pc7p3);\nfloat d8= sdBezier(p,pc8p1,pc8p2,pc8p3);\ncol=DrawFigBorde(vec3(0.0),col,d1);\ncol=DrawFigBorde(vec3(0.0),col,d2);\ncol=DrawFigBorde(vec3(0.0),col,d3);\ncol=DrawFigBorde(vec3(0.0),col,d4);\ncol=DrawFigBorde(vec3(0.0),col,d5);\ncol=DrawFigBorde(vec3(0.0),col,d6);\ncol=DrawFigBorde(vec3(0.0),col,d7);\ncol=DrawFigBorde(vec3(0.0),col,d8);\nreturn col;\n}\n\nvec3 HacerBrazo(vec2 p, vec3 col)\n{   vec2 a1, b1,a2, b2;\n    vec2 a3,b3,a4,b4;\n    \n    a1=vec2(0.0,0.15);\n    b1=vec2(0.15,0.0);\n    float db1= sdSegment(p-vec2(0.05,0.5), a1,b1);\n    a2=b1;\n    b2=a2+vec2(0.15,-0.05);\n    float db2= sdSegment(p-vec2(0.05,0.5), a2, b2);\n    \n    vec2 mov=vec2(-0.05,-0.025);\n    a3=vec2(0.0,0.15)+mov;\n    b3=vec2(0.15,0.0)+mov;\n    float db3= sdSegment(p-vec2(0.05,0.5), a3,b3);\n    a4=b3;\n    b4=a4+vec2(0.15,-0.05);\n    float db4= sdSegment(p-vec2(0.05,0.5), a4,b4);\n    \n    \n    vec3 colbrazo=vec3(0.0);\n    col=DrawFigBorde(colbrazo,col,db1); //brazo\n    col=DrawFigBorde(colbrazo,col,db2); //brazo\n    col=DrawFigBorde(colbrazo,col,db3); //brazo\n    col=DrawFigBorde(colbrazo,col,db4); //brazo\n   return col;     \n}   \n\nvec3 RostroRosita(vec2 p, vec3 col)\n{\n vec2 p0=p;   \n//resolucion=x=497,   y441\n//c=Curva; p= puntos control\nvec2 pc1p1=vec2(.207,.726);\nvec2 pc1p2=vec2(.304,.812);\nvec2 pc1p3=vec2(.306,.705);\n\nvec2 pc2p1=vec2(.286,.803);\nvec2 pc2p2=vec2(.354,.830);\nvec2 pc2p3=vec2(.404,.789);\n\nvec2 pc3p1=vec2(.445,.531);\nvec2 pc3p2=vec2(.495,.692);\nvec2 pc3p3=vec2(.406,.787);\n\nvec2 pc4p1=vec2(.187,.558);\nvec2 pc4p2=vec2(.328,.397);\nvec2 pc4p3=vec2(.447,.533);\n\nvec2 pc5p1=vec2(.191,.551);\nvec2 pc5p2=vec2(.147,.730);\nvec2 pc5p3=vec2(.286,.805);\n\nvec2 pc6p1=vec2(.306,.705);\nvec2 pc6p2=vec2(.356,.837);\nvec2 pc6p3=vec2(.340,.676);\n\nvec2 pc7p1=vec2(.338,.678);\nvec2 pc7p2=vec2(.416,.805);\nvec2 pc7p3=vec2(.394,.662);\n\nvec2 pc8p1=vec2(.394,.664);\nvec2 pc8p2=vec2(.445,.721);\nvec2 pc8p3=vec2(.465,.639);\n\nvec2 pc9p1=vec2(.227,.624);\nvec2 pc9p2=vec2(.239,.689);\nvec2 pc9p3=vec2(.278,.685);\n\nvec2 pc10p1=vec2(.278,.685);\nvec2 pc10p2=vec2(.310,.662);\nvec2 pc10p3=vec2(.290,.610);\n\nvec2 pc11p1=vec2(.334,.594);\nvec2 pc11p2=vec2(.360,.660);\nvec2 pc11p3=vec2(.376,.639);\n\nvec2 pc12p1=vec2(.374,.642);\nvec2 pc12p2=vec2(.410,.619);\nvec2 pc12p3=vec2(.388,.578);\n\nvec2 pc13p1=vec2(.247,.540);\nvec2 pc13p2=vec2(.272,.499);\nvec2 pc13p3=vec2(.310,.497);\n\nvec2 pc14p1=vec2(.314,.494);\nvec2 pc14p2=vec2(.372,.510);\nvec2 pc14p3=vec2(.378,.537);\n\nvec2 pc15p1=vec2(.296,.587);\nvec2 pc15p2=vec2(.274,.560);\nvec2 pc15p3=vec2(.300,.558);\n\nvec2 pc16p1=vec2(.300,.560);\nvec2 pc16p2=vec2(.322,.551);\nvec2 pc16p3=vec2(.322,.576);\n\n float t=iTime;\n    float t1=mod(t,0.5);\n    float t2=mod(t,1.0);\n    if (t1<t2)\n    p=vec2(-p.x+0.7,p.y);\n\nfloat d1= sdBezier(p,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(p,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(p,pc3p1,pc3p2,pc3p3);\nfloat d4= sdBezier(p,pc4p1,pc4p2,pc4p3);\nfloat d5= sdBezier(p,pc5p1,pc5p2,pc5p3);\nfloat d6= sdBezier(p,pc6p1,pc6p2,pc6p3);\nfloat d7= sdBezier(p,pc7p1,pc7p2,pc7p3);\nfloat d8= sdBezier(p,pc8p1,pc8p2,pc8p3);\nfloat d9= sdBezier(p,pc9p1,pc9p2,pc9p3);\nfloat d10= sdBezier(p,pc10p1,pc10p2,pc10p3);\nfloat d11= sdBezier(p,pc11p1,pc11p2,pc11p3);\nfloat d12= sdBezier(p,pc12p1,pc12p2,pc12p3);\nfloat d13= sdBezier(p,pc13p1,pc13p2,pc13p3);\nfloat d14= sdBezier(p,pc14p1,pc14p2,pc14p3);\nfloat d15= sdBezier(p,pc15p1,pc15p2,pc15p3);\nfloat d16= sdBezier(p,pc16p1,pc16p2,pc16p3);\n\ncol=DrawFigBorde(vec3(0.0),col,d2); //cabeza\ncol=DrawFigBorde(vec3(0.0),col,d3);//cabeza\ncol=DrawFigBorde(vec3(0.0),col,d4); //cabeza\ncol=DrawFigBorde(vec3(0.0),col,d5); //cabeza\ncol=DrawFigBorde(vec3(0.0),col,d1); //pelo\ncol=DrawFigBorde(vec3(0.0),col,d6); //pelo\ncol=DrawFigBorde(vec3(0.0),col,d7); //pelo\ncol=DrawFigBorde(vec3(0.0),col,d8);  //pelo\ncol=DrawFigBorde(vec3(0.0),col,d9); //ojo der 1\ncol=DrawFigBorde(vec3(0.0),col,d10); //ojo der 2\ncol=DrawFigBorde(vec3(0.0),col,d11); //ojo izq 1 \ncol=DrawFigBorde(vec3(0.0),col,d12); //ojo izq 2\ncol=DrawFigBorde(vec3(0.0),col,d13);  //boca 1\ncol=DrawFigBorde(vec3(0.0),col,d14);  //boca 2\ncol=DrawFigBorde(vec3(0.0),col,d15); //nariz 1\ncol=DrawFigBorde(vec3(0.0),col,d16); //nariz 2\n    \n    p=p0;\n    if (t1<t2)\n    {   col= HacerBrazo(p-vec2(0.05,-0.05), col);\n        col=hacerMano(p-vec2(-0.29,-0.1), col);\n        \n        col= HacerBrazo(vec2(-p.x,-p.y)-vec2(-0.7,-0.83), col);\n        col=hacerMano(vec2(-p.x,-p.y)-vec2(-1.04,-0.88), col);\n     } \n    else\n    {   col= HacerBrazo(vec2(-p.x,p.y)-vec2(-0.7,-0.03), col);\n        col=hacerMano(vec2(-p.x,p.y)-vec2(-1.04,-0.08), col);\n        \n        col= HacerBrazo(vec2(p.x,-p.y)-vec2(-0.005,-0.83), col);\n        col=hacerMano(vec2(p.x,-p.y)-vec2(-0.35,-0.88), col);\n    } \n    p=p0;\n        \n    float dcuerpo= sdBox(p-vec2(0.35,0.3), vec2(0.05,0.15) );\n    float dcuello= sdBox(p-vec2(0.34,0.45), vec2(0.015,0.025) );\n    col=DrawFigBorde(vec3(0.0),col,dcuerpo); \n    col=DrawFigBorde(vec3(1.0,0.0,0.0),col,dcuello); \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=0.5;\n    uv*=esc;\n    vec2 uv0=uv;\n    //vec3 col=vec3(0.0,0.1,0.8);\n    vec3 col=vec3(1.0);\n    col= RostroRosita(uv-vec2(-0.4,-0.3), col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//referencia  gaziya\n//https://www.shadertoy.com/view/XsVBzt\n\n#define A 0.125\n#define PI 3.141592654\n\nfloat noise(float time)\n{ return  (fract(sin(time*99.)*50000.0)*2.0-1.0); }\n\n  //original\nfloat kick(float time) \n{  return sin(6.283 * 50.0 * time - 10.0 * exp( -70.0 * time ))*exp(-time*1.6);  }\n\n///modificado por jfp\nfloat bass(float time) \n{ return sin(6.283 * 60.0 * time - 10.0 * exp( -70.0 * time ))*exp(-time*0.56); }\n\nfloat snare(float time) \n{  return noise(time)*max(0.0,1.0-min(0.85,time*4.25)-(time-0.25)*0.3); }\n\nfloat hihat(float time) \n{  return noise(time)*exp(-time*150.0); }\n\nfloat saw(float phase) \n{   float s = 0.0;\n    for (int k = 1; k <= 8; k++) \n     {  s += (sin(2.0*PI*float(k)*phase) / float(k)); }\n    return (1.0/2.0) - (1.0/PI)*s - 0.5;\n}\n\nfloat sawNota(float time,  float freq )\n{   /// FM音源\n    return  saw(time*freq) *exp(-3.*time);\n}   \n\nfloat sequence(int s,float time)\n{\n  float n =mod(time,A);\n  for(int i=0;i<16;i++){\n    if((s>>(int(time/A)-i)%16&1)==1)break;\n    n+=A;\n  }\n  return n;\n}\n\nvec2 mainSound( in int samp, float time )\n{   float t1=mod(time,3.0);\n    float t2=mod(time,6.0);\n    float t1a=mod(time,6.0);\n    float t2a=mod(time,12.0);\n       \n    float s1,s2;\n    if(t1a<t2a)\n    {\n        s1=0.2 * sawNota(sequence(0x1505,time+t1a),440.0);\n        s1+=0.2 * sawNota(sequence(0x8505,time),600.0);\n        s1+=0.2 * sawNota(sequence(0x0225,time),750.0);\n        s1/=2.0;\n    }\n    else\n    {   s1+=0.2 * sawNota(sequence(0x3895,time),40.0 );\n        s1+=0.2 * sawNota(sequence(0x5465,time),140.0 );\n        s1/=2.0;\n    }\n    \n    if(t1<t2)\n        s2=0.2 * bass(sequence(0x1505,time));\n    else\n        s2=0.2 * bass(sequence(0x4895,time));\n    \n    return vec2(\n                 s1 + s2+\n                 0.2 * snare(sequence(0x1010,time))+\n                 0.4 * kick(sequence(0x4082,time))+\n                 0.2 * hihat(sequence(0x5555,time))\n                 );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}