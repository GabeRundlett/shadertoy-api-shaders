{
    "Shader": {
        "info": {
            "date": "1581631484",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "3ldSDB",
            "likes": 5,
            "name": "Day 56",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "// simple volumetric raymarching of voronoi\n\n// Inspired by izuix's Blender render on Fractal Discord\n\n// If slow uncomment slowdetail in buffera or click on screen\n\n#define T(uv) texture(iChannel0,uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    \n    float f = length(uv  - 0.5);\n    fragColor.x = T(uv + f*0.004).x;\n    fragColor.y = T(uv -f*0.004).y;\n    fragColor.z = T(uv).z;\n    fragColor = mix(fragColor, smoothstep(0.,1.,fragColor), 0.4);\n    fragColor *= 2.2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define iTime (iTime + 3.)\n// do not use texture\n#define FULL_PROCEDURAL\n#define LOWDETAIL\n\n\n#ifdef FULL_PROCEDURAL\nvec3 hash( vec3 x )\n{\n\tx = vec3( dot(x,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(x,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(x,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(x)*43758.5453123);\n}\n#else\nvec3 hash( vec3 x )\n{\n\treturn texture( iChannel0, (x.xy+vec2(3.0,1.0)*x.z+0.5)/256.0, -100.0 ).xyz;\n}\n#endif\n// voronoi code from inigo quilez\n\n// returns closest, second closest, and cell id\nvec3 voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n//#define mx (iTime + 40.*iMouse.x/iResolution.x)\n#define mx (iTime )\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define pal(a,b,c,d,e) (a + b*sin(tau*(c*d + e)))\n\nvec3 density(vec3 p){\n\tvec3 d = vec3(0);\n    vec3 q = p;\n    q.z += mx;\n    #define pi acos(-1.)\n    for (int i = 0; i < 3; i++){\n    \tq = abs(q);\n    \tq.xy *= rot(0.25*pi);\n        q.yz *= rot(0.3);\n    }\n    //q *= 1. - length(q)*0.002;\n    \n    vec3 v = voronoi(q);\n    #define tau (2.*pi)\n    \n    //#define cPal(a, b) pal(0.6,vec3(1.,1.,1.)*0.8,vec3(6.87,4.4,1.8), a , b)\n    #define cPal(a, b) pal(0.9,vec3(1.,1.,1.)*0.8,vec3(6.87,4.4,1.8), a , b)*0.5\n    vec3 lA = vec3(-1,2,7);\n    vec3 lCA = vec3(0,1,1);\n    \n    lCA = cPal(0.1, iTime*0.1 + 0.4);\n\n    vec3 lB = vec3(1,-02,5. );\n    vec3 lCB = vec3(1,0,1);\n    lCB = cPal(0.1, iTime*0.08);\n    vec3 lC = vec3(1,2,5);\n    vec3 lCC = vec3(3,2,1);\n    lCC = cPal(0.1, iTime*0.14 + 0.2);\n    \n\tfloat c = smoothstep(0., 0.01,v.x - 0.71 + sin(iTime*0.6)*0.0);\n    \n    float attenA = 2./(length(p-lA)*length(p-lA));\n    float attenB = 2./(length(p-lB)*length(p-lB));\n    float attenC = 2./(length(p-lC)*length(p-lC));\n    attenB = min(attenB, 1.);\n    attenA = min(attenA, 1.);\n    attenC = min(attenC, 1.);\n    d += c * attenA*lCA;\n    d += c * attenB*lCB;\n    d += c * attenC*lCC;\n    //d += c * attenB*lCB;\n    \n    \n    d -= vec3( pow(v.y*0.98, 20.))*0.4*cPal(0.5, 0.1 + iTime*0.1);\n    \n    \n    d *= 2.;\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. + length(uv)*0.2;\n    \n    vec3 col = vec3(0);\n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    rd.xy *= rot(sin(iTime*0.1)*0.1);\n    rd.yz *= rot(sin(iTime*0.1)*0.1);\n    \n    #define iters (400. - 400.*iMouse.x/iResolution.x)\n    vec3 p = ro;\n    \n    vec3 accum = vec3(0);\n    for(float i = 0.; i < iters; i++){\n    \t#ifdef LOWDETAIL\n    \t\tp += 0.06*rd;\n        #else \n        \tp += 0.03*rd;\n        #endif\n        vec3 d = density(p);\n        accum += d;\n    }\n    \n    accum *= 0.014;\n    \n    //accum /= iters;\n    \n    col += accum;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}