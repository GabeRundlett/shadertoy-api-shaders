{
    "Shader": {
        "info": {
            "date": "1697524270",
            "description": " This shader demonstrates a method to mitigate mipmapping issues in sphere mapping by alternating between two sets of partial derivatives, effectively eliminating flickering artifacts along the edge.",
            "flags": 0,
            "hasliked": 0,
            "id": "dsGcDc",
            "likes": 2,
            "name": "Spheremap Mip Fix",
            "published": 3,
            "tags": [
                "3d",
                "uv",
                "sphere",
                "mip",
                "mapping",
                "spheremap",
                "greenwich"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nWelcome to a simple demonstration of a method I've devised to address \nmipmapping issues that can arise in sphere mapping. Although this method \nis straightforward and likely not groundbreaking, it cheaply solves \nthe problem.\n\nHere's how it works: we sample the partial derivatives of sphere mapping \nand a 180-degree rotation of longitudinal coordinates. Then, we  \nswitch between these two sets of longitudinal partial derivatives on \nopposite sides of the sphere. This elegant solution resolves mip level \nproblems and eliminates flickering artifacts along the edge of sphere \nmapping, while maintaining the miplevel on the other regions. \n\nThe left side has the broken mips at the texture edge. The right side \nis my fixed version. Feel free to explore this interactive scene using \nmouse controls to adjust your viewpoint and move the border around.\n\nFor more exploration, see my tangent space matrix for spheremaps:\nhttps://www.shadertoy.com/view/ctXfDS\n*/\n\n// Spherical coordinate mapping (Mercator projection)\nvec2 sphereMap(vec3 uvw) {\n    // Mercator projection around the z-axis\n    float u = 0.5 + atan(uvw.y, uvw.x) / (2.0 * 3.1415);\n    float v = 0.5 + asin(uvw.z) / 3.1415;\n    return vec2(u, v);\n}\n\n// Simple spheremap texture sampler with broken mips\nvec4 sphereProjectionBroken(sampler2D tex, vec3 normal, float scale) {\n    // Sample spheremap\n    vec2 uv = sphereMap(normal);\n    \n    // Apply scale\n    uv *= scale;\n        \n    // Sample texture using default mip settings, which are broken\n    return texture(tex, uv);\n}\n\n// Simple spheremap texture sampler with corrected mips\nvec4 sphereProjectionFixed(sampler2D tex, vec3 normal, float scale) {\n    // Sample spheremap\n    vec2 uv = sphereMap(normal);\n    \n    // Append 180-degree flipped uv.x\n    vec3 uvn = vec3(uv, fract(uv.x - 0.5));\n    \n    // Apply scale\n    uvn *= scale;\n    \n    // Calculate partial derivatives of the 3 coordinates\n    vec3 duvndx = dFdx(uvn);\n    vec3 duvndy = dFdy(uvn);\n    \n    // Switch partial derivatives between sphere sides\n    vec2 duvdx;\n    vec2 duvdy;\n    if (normal.x < 0.0) {\n        // Fix edge side\n        duvdx = duvndx.zy;\n        duvdy = duvndy.zy;\n    } else {\n        // Default partial derivatives\n        duvdx = duvndx.xy;\n        duvdy = duvndy.xy;\n    }\n\n    // Sample texture using coordinates and the compound partial derivatives\n    return textureGrad(tex, uvn.xy, duvdx, duvdy);\n}\n\n// _____________________________3D Section_____________________________\n// https://www.shadertoy.com/view/4sjXW1 by nimitz (twitter: @stormoid)\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nvec2 iSphere(in vec3 ro, in vec3 rd) {\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - 1.;\n    float h = b*b - c;\n    //if(h <0.0) return vec2(-1.);\n    return vec2(-b - sqrt(h), h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\t\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 um = iMouse.xy / iResolution.xy-.5;\n\tum.x *= iResolution.x/iResolution.y;\n    p*= 1.5;\n\t\n    //camera\n\tvec3 ro = vec3(0.,0.,2.4);\n    vec3 rd = normalize(vec3(p,-1.5));\n    mat2 mx;\n    mat2 my;\n    if(iMouse.x > 0.0)\t{    \n        mx = mm2(1.5);\n        my = mm2(um.y*7.);\n    } else { \n        mx = mm2(mix(1.0,2.0,sin(iTime*.5)*0.5+0.5));\n        my = mm2(mix(-0.5,0.5,cos(iTime*.5)*0.5+0.5));\n    }\n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    \n    vec2 t = iSphere(ro,rd);\n    \n    // Calculate centered UV coordinates\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y + 0.5;\n\n    // Enable mouse controls when clicked, otherwise animate\n    float border = 0.5;    \n    if (iMouse.x > 0.0) {\n        vec2 mouse = (iMouse.xy - iResolution.xy * 0.5) / iResolution.y + 0.5;\n        border = mouse.x;\n    }\n\n    // Alternate between background and sphere mapping\n    vec3 colorA;\n    if (t.x > 0.) {\n        // Sphere mapping\n        vec3 normal = ro + rd * t.x; \n\n        // Alternate between fixed and broken spheremaps\n        vec4 projection;\n        if (uv.x > border) {\n            projection = sphereProjectionFixed(iChannel0, normal, 3.0);\n        } else {\n            projection = sphereProjectionBroken(iChannel0, normal, 3.0);\n        } \n        \n        // Latitude of the sphere projection for cosmetics\n        float lat = sphereMap(normal).x;\n        \n        // Apply looping colormap (rainbow unfortunatly makes the line hard to see)\n        vec3 colormap = twilight_shifted(fract(lat*2.));\n        \n        // Interpolate between Cat and Colormap\n        colorA = mix(colormap, projection.xyz, projection.w);\n        \n    }\n    // Background mapping\n    vec3 normal = rd;\n\n    // Latitude of the sphere projection for cosmetics\n    float lat = sphereMap(normal).x;\n\n    // Create a colorful background\n    vec3 colorB = twilight_shifted(fract((1.-lat) *3.));\n    \n    // Smooth blending of ball with background\n    vec3 color = mix(colorA, colorB, smoothstep(0.02, 0.0, t.y));\n\n    // Add a dividing line\n    color += step(abs(uv.x - border), 0.002);\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "//_________________________GENERIC FUNCTIONS_____________________________________\n\n// Increases the steepness of Alpha while forcing 0-1 range and 1 sum\n// See desmos graph example (https://www.desmos.com/calculator/dpxa6mytnv)\nfloat smoothContrast(float alpha, float contrast) {\n    // increase steepness using power\n    vec2 powAlpha = pow(vec2(alpha, 1.-alpha), vec2(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha.x/(powAlpha.x + powAlpha.y);\n}\n\n// makes twilight_shifted colormap with polynimal 6\nvec3 twilight_shifted(float t) {\n    const vec3 c0 = vec3(0.120488,0.047735,0.106111);\n    const vec3 c1 = vec3(5.175161,0.597944,7.333840);\n    const vec3 c2 = vec3(-47.426009,-0.862094,-49.143485);\n    const vec3 c3 = vec3(197.225325,47.538667,194.773468);\n    const vec3 c4 = vec3(-361.218441,-146.888121,-389.642741);\n    const vec3 c5 = vec3(298.941929,151.947507,359.860766);\n    const vec3 c6 = vec3(-92.697067,-52.312119,-123.143476);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}