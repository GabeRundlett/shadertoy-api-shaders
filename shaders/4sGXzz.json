{
    "Shader": {
        "info": {
            "date": "1462380626",
            "description": "Endless arrows",
            "flags": 0,
            "hasliked": 0,
            "id": "4sGXzz",
            "likes": 15,
            "name": "On the Up and Up",
            "published": 3,
            "tags": [
                "arrows"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 804
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS 128\nconst float twoPi = 6.283185307179586;\n\nfloat opU( float d1, float d2 ) {\n    return min(d1,d2);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h ) {\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat udBox( vec3 p, vec3 b ) {\n  return length(max(abs(p)-b,0.0));\n}\n \nfloat opRep( vec3 p, vec3 c ) {\n    vec3 q = mod(p,c)-0.5*c;\n    return opU( sdTriPrism( q, vec2(0.9, 0.6) ), udBox( q + vec3(0,0.9,0), vec3(0.2, 0.6, 0.6) ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t// retrieve the fragment's coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5, 0.5);\n\n\t// camera position and ray direction\n\tvec3 pos = vec3( 0, -5.0 * iTime/twoPi, 2.3 + 0.3 * -sin(iTime));\n\tvec3 dir = normalize( vec3( uv.x, uv.y, 1.) );\n \n    // ip will store where the ray hits the surface\n\tvec3 ip;\n \n\t// variable step size\n\tfloat t = 0.0;\n\tfloat findThresh = 0.01;\n\tint found = 0;\n    int last_i = 0;\n    \n\tfor(int i = 0; i < ITERATIONS; i++) {\n\t\tlast_i = i;\n        \n        // update position along path\n        ip = pos + dir * t;\n \t\tfloat temp;\n\n\t\t// make a repeating SDF shape\n\t\ttemp = opRep( ip, vec3(5.0 + 0.8 * sin(iTime), 5.0 + 0.1 * sin(iTime), 9.0 + 2.0 * sin(iTime)) );\n\t\tif( temp < findThresh ) {\n\t\t\tfloat r = 0.5 + 0.3 * sin(2. + sin(iTime) + ip.z/6. + ip.x/2.);\n\t\t\tfloat g = 0.6 + 0.4 * cos(1. + sin(iTime) + ip.x/6. + ip.z/2.);\n\t\t\tfloat b = 0.6 + 0.3 * sin(1. + sin(iTime) + ip.z/6. + ip.x);\n\t\t\tip = vec3(g, r, b);\n\t\t\tfound = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t//increment the step along the ray path\n\t\tt += temp;\n\t}\n\t\n\t// make background black if no shape was hit\n\tif(found == 0) {\n\t\tip = vec3(0,0,0);\n\t}\n \n\t// fragColor = vec4(ip, 1.0 - float(last_i) / float(ITERATIONS)/2. );\n   \tfragColor = vec4(ip - float(last_i) / float(ITERATIONS), 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}