{
    "Shader": {
        "info": {
            "date": "1526475501",
            "description": "Newton-raphson convergence fractal for the complex function x^3-1=0 with texture for \"clouds\".",
            "flags": 0,
            "hasliked": 0,
            "id": "4s3BWB",
            "likes": 7,
            "name": "SATELLITE",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "greendestruction",
            "viewed": 684
        },
        "renderpass": [
            {
                "code": "vec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cinv(vec2 a) {\n    return vec2(a.x, -a.y) / dot(a,a);\n}\n\nvec3 render(vec2 uv) {\n    \n    float ft = fract(iTime / 32.0) * 4.0;\n  float t0 = clamp(ft, 0.0, 1.0);\n    float t1 = clamp(ft - 1.0, 0.0, 1.0);\n    float t2 = clamp(ft - 2.0, 0.0, 1.0);\n    float t3 = clamp(ft - 3.0, 0.0, 1.0);\n    \n    uv *= exp(mix(2.0, 4.0, t0 - t2));\n    uv += (vec2(t1 - t2, t0 - t3) * 2.0 - 1.0) * 8.0;\n    \n    uv += vec2(cos(iTime), sin(iTime)) * 10.0;\n    float w = t0 - t2 + iTime * 0.25;\n    uv = cmul(uv, vec2(cos(w), sin(w)));\n    \n    vec2 z = uv;\n    for (int i = 0; i < 20; ++i) {\n        float t = 3.141592 * 0.125;\n        z = cmul(z, vec2(cos(t), sin(t)));\n        vec2 z2 = cmul(z, z);\n        vec2 z3 = cmul(z2, z);\n        z3.x -= 1.0;\n        z2 *= 3.0;\n        z -= cmul(z3, cinv(z2));\n    }\n    \n    vec2 dif = z - vec2(1.0, 0.0);\n    float d = dot(dif, dif);\n    \n    vec3 tex = texture(iChannel0, dif).xyz;\n    tex *= tex / (1.0 + d);\n    \n    return tex * 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n  vec3 fc = vec3(0.0);\n    \n    for (int i = 0; i < 9; ++i) {\n        vec2 f = vec2(0.0);\n        f.x = mod(float(i), 2.0) - 1.0;\n        f.y = floor(float(i) / 2.0) - 1.0;\n        f *= 1.0 / iResolution.xy;\n        fc += render(uv + f) / 9.0;\n    }\n    \n    fragColor = vec4(sqrt(fc), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}