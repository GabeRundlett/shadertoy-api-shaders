{
    "Shader": {
        "info": {
            "date": "1525076671",
            "description": "Updated \"Chaotic Pendulum\" - see source",
            "flags": 32,
            "hasliked": 0,
            "id": "Xd3BWN",
            "likes": 6,
            "name": "Chaotic Pendulum 2",
            "published": 3,
            "tags": [
                "mechanics",
                "chaos",
                "deterministic",
                "trajectory"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "// \"Chaotic Pendulum 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Update: includes alternative trajectory rendering.\n\n  The pendulum mass is attracted by several 'magnets' resulting in\n  chaotic motion.\n\n  The sliders control the strength and number of magnets. A trace of the\n  recent trajectory is shown, and the magnets flash when approached.\n*/\n\n#define AA  1   // optional antialiasing\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec4 LoadTx (vec2 uv);\nvec4 Loadv4 (ivec2 idVar);\n\n#define MAX_SITE 9\n\nvec3 rSite[MAX_SITE], qHit, rBall, ltDir;\nfloat dstFar, tCur, nSite, penLen, hDist, vDist;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, s;\n  dMin = dstFar;\n  p.y -= -0.5 * penLen;\n  q = p;  q.y -= penLen + vDist;\n  s = length (rBall.xy);\n  if (s > 0.) {\n    q.xz = Rot2D (q.xz, atan (rBall.y, - rBall.x));\n    q.xy = Rot2D (q.xy, atan (s, - rBall.z));\n  }\n  q.y -= -0.5 * penLen;\n  d = PrCylDf (q.xzy, 0.03, 0.5 * penLen);\n  DMINQ (1);\n  q = p - rBall.xzy;\n  q.y -= penLen + vDist;\n  d = PrSphDf (q, 0.12);\n  DMINQ (2);\n  q = p;\n  d = PrCylDf (q.xzy, 2., 0.1);\n  DMINQ (3);\n  q = p;  q.z -= 2.25;\n  d = PrCapsDf (q, 0.1, 0.25);\n  q = p;  q.yz -= vec2 (0.5 * (penLen + vDist), 2.5);\n  d = min (d, PrCapsDf (q.xzy, 0.1, 0.5 * (penLen + vDist)));\n  q.yz -= vec2 (0.5 * (penLen + vDist), -1.25);\n  d = min (d, PrCapsDf (q, 0.1, 1.25));\n  DMINQ (4);\n  for (int j = 0; j < MAX_SITE; j ++) {\n    if (float (j) == nSite) break;\n    q = p;  q.xz -= rSite[j].xy;  q.y -= 0.125;\n    d = PrCylDf (q.xzy, 0.12, 0.02);\n    DMINQ (5 + j);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0003 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col;\n  float dstObj;\n  bool isNr;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (0.9, 1., 0.9, 0.3) * (0.5 + 0.5 *\n         SmoothBump (0.1, 0.9, 0.05, mod (16. * qHit.y, 1.)));\n    } else if (idObj == 2) {\n      col4 = vec4 (0.9, 0.9, 1., 0.3);\n    } else if (idObj == 3) { \n      col4 = (vn.y > 0.99 && length (qHit.xz) < 1.97) ? LoadTx (0.25 * qHit.xz + 0.5) :\n         vec4 (0.5, 0.5, 0.55, 0.3);\n    } else if (idObj == 4) {\n      col4 = vec4 (0.6, 0.5, 0.5, 0.2);\n    } else if (idObj >= 5) {\n      if (vn.y > 0.99 && length (qHit.xz) < 0.1) {\n        isNr = false;\n        for (int j = 0; j < MAX_SITE; j ++) {\n          if (j == idObj - 5) {\n            if (length (rBall.xy - rSite[j].xy) < 0.5) isNr = true;\n          }\n        }\n        col4 = isNr ? vec4 (1., 0.3, 0.3, 0.2) : vec4 (0.3, 1., 0.3, 0.2);\n      } else col4 = vec4 (0.5, 0.5, 0.55, 0.3);\n    }\n    col = col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  col = clamp (col, 0., 1.);\n  return col;\n}\n\nvoid SetSites ()\n{\n  float a, fj;\n  for (int j = 0; j < MAX_SITE; j ++) {\n    fj = float (j);\n    if (fj == nSite) break;\n    a = (fj + 0.5) * 2. * pi / nSite;\n    rSite[j] = vec3 (hDist * sin (a), hDist * cos (a), - penLen - vDist);\n  }\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec2 slVal)\n{\n  vec4 wgBx[2];\n  vec2 ut, ust;\n  float vW[2], asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.38 * asp, -0.1, 0.012 * asp, 0.18);\n  wgBx[1] = vec4 (0.45 * asp, -0.1, 0.012 * asp, 0.18);\n  vW[0] = slVal.x;\n  vW[1] = slVal.y;\n  for (int k = 0; k < 2; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = vec3 (1., 0., 1.);\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? vec3 (1., 0., 1.) : vec3 (0.4, 0.3, 0.);\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 1.5);\n    if (max (abs (ut.x), abs (ut.y)) < 0.02 && max (ut.x, ut.y) > 0.013) col = vec3 (0.1, 1., 0.5);\n  }\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa, slVal;\n  float az, el, eTot;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dstFar = 30.;\n  penLen = 4.;\n  hDist = 1.6;\n  vDist = 0.4;\n  stDat = Loadv4 (ivec2 (0, 0));\n  rBall = stDat.xyz;\n  eTot = stDat.w;\n  stDat = Loadv4 (ivec2 (3, 0));\n  slVal  = stDat.xy;\n  el = stDat.z;\n  az = stDat.w + 0.3 * pi * sin (0.002 * 2. * pi * tCur);\n  nSite = floor (10. * slVal.y + 0.01);\n  SetSites ();\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -20.);\n  ltDir = vuMat * normalize (vec3 (-0.5, 1., -1.));\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), 6.5));\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col = ShowWg (uv, canvas, col, slVal);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 LoadTx (vec2 uv)\n{\n  return texture (txBuf, uv);\n}\n\nvec4 Loadv4 (ivec2 idVar)\n{\n  return texture (txBuf, (vec2 (idVar) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Chaotic Pendulum 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SegDist (vec2 p, vec2 v1, vec2 v2);\nfloat LineDist (vec2 p, vec2 v1, vec2 v2);\nvec3 HsvToRgb (vec3 c);\nfloat Hashff (float p);\nvec4 LoadTx (vec2 uv);\nvec4 Loadv4 (ivec2 idVar);\nvoid Savev4 (ivec2 idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define MAX_SITE 9\n\nvec3 rSite[MAX_SITE];\nvec2 pPen, ppPen;\nfloat tCur, nStep, nSite, fCon, fFac, grav, delT, penLen, hDist, vDist;\nconst float pi = 3.14159;\n\nvoid EvalRhs (vec3 q, vec3 qv, out vec3 fv, out vec3 f)\n{\n  vec3 dr;\n  float ri;\n  f = vec3 (0.);\n  for (int j = 0; j < MAX_SITE; j ++) {\n    if (float (j) == nSite) break;\n    dr = q - rSite[j];\n    ri = 1. / length (dr);\n    f -= fCon * ri * ri * ri * dr;\n  }\n  f += q * (grav * q.z - dot (f, q) - dot (qv, qv)) / (penLen * penLen);\n  f.z -= grav;\n  fv = qv;\n  f *= delT;\n  fv *= delT;\n}\n\nvoid Step (inout vec3 r, inout vec3 rv)\n{\n  vec3 k1r, k2r, k3r, k4r, k1v, k2v, k3v, k4v;\n  EvalRhs (r, rv, k1r, k1v);\n  EvalRhs (r + k1r / 2., rv + k1v / 2., k2r, k2v);\n  EvalRhs (r + k2r / 2., rv + k2v / 2., k3r, k3v);\n  EvalRhs (r + k3r, rv + k3v, k4r, k4v);\n  r += (k1r + k4r) / 6. + (k2r + k3r) / 3.;\n  rv += (k1v + k4v) / 6. + (k2v + k3v) / 3.;\n}\n\nvoid Init (out vec3 r, out vec3 rv)\n{\n  float a;\n  r = vec3 (0., 0., - penLen);\n  a = 2. * pi * Hashff (tCur);\n  rv = vec3 (cos (a), sin (a), 0.);\n}\n\nvoid SetSites ()\n{\n  float a, fj;\n  for (int j = 0; j < MAX_SITE; j ++) {\n    fj = float (j);\n    if (fj == nSite) break;\n    a = (fj + 0.5) * 2. * pi / nSite;\n    rSite[j] = vec3 (hDist * sin (a), hDist * cos (a), - penLen - vDist);\n  }\n}\n\nfloat Eng (vec3 r, vec3 rv)\n{\n  float en;\n  en = 0.5 * dot (rv, rv) + grav * r.z;\n  for (int j = 0; j < MAX_SITE; j ++) {\n    if (float (j) == nSite) break;\n    en -= fCon / length (r - rSite[j]);\n  }\n  return - en;\n}\n\nvec4 ShowScene (vec2 uv, vec4 col)\n{\n  vec2 p;\n  p = 4. * (uv - 0.5);\n  return (SegDist (p, ppPen, pPen) < 0.025) ? vec4 (HsvToRgb (vec3 (mod (0.00005 * nStep, 1.),\n     0.8, 1. - 0.5 * smoothstep (0.022, 0.025, LineDist (p, ppPen, pPen)))), 1.) :\n     mix (col, vec4 (0.1), 0.001);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[2], mPtr, mPtrP, stDat;\n  vec3 r, rv;\n  vec2 canvas, uvtx, ust, slVal;\n  ivec2 iFrag;\n  float asp, vW, eTot, el, az;\n  int wgSel, wgReg, kSel;\n  bool doInit;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  uvtx = fragCoord / txSize;\n  iFrag = ivec2 (fragCoord);\n  grav = 1.5;\n  penLen = 4.;\n  hDist = 1.6;\n  vDist = 0.4;\n  delT = 0.004;\n  fFac = 4.;\n  doInit = false;\n  wgReg = -2;\n  if (iFrame <= 5) {\n    fCon = 1.6;\n    nSite = 5.;\n    slVal = vec2 (fCon / fFac, 0.1 * nSite);\n    mPtrP = mPtr;\n    wgSel = -1;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (ivec2 (0, 0));\n    r = stDat.xyz;\n    nStep = stDat.w;\n    stDat = Loadv4 (ivec2 (1, 0));\n    rv = stDat.xyz;\n    stDat = Loadv4 (ivec2 (2, 0));\n    pPen = stDat.xy;\n    ppPen = stDat.zw;\n    stDat = Loadv4 (ivec2 (3, 0));\n    slVal = stDat.xy;\n    fCon = fFac * slVal.x;\n    nSite = floor (10. * slVal.y + 0.01);\n    stDat = Loadv4 (ivec2 (4, 0));\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.38 * asp, -0.1, 0.012 * asp, 0.18);\n    wgBx[1] = vec4 (0.45 * asp, -0.1, 0.012 * asp, 0.18);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  el = -0.2 * pi;\n  az = 0.;\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      el +=  pi * mPtr.y;\n      az += 2. * pi * mPtr.x;\n    }\n  } else {\n    for (int k = 0; k < 2; k ++) {\n      if (wgSel == k) {\n        kSel = k;\n        vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0.01, 0.99);\n        break;\n      }\n    }\n    if (kSel == 0) {\n      slVal.x = vW;\n      fCon = clamp (fFac * slVal.x, 0.4, 3.6);\n      slVal.x = fCon / fFac;\n    } else if (kSel == 1) {\n      slVal.y = vW;\n      nSite = clamp (floor (10. * slVal.y + 0.01), 2., float (MAX_SITE));\n      slVal.y = 0.1 * nSite;\n    }\n    doInit = true;\n  }\n  fragColor = doInit ? vec4 (0.1) : ShowScene (uvtx, LoadTx (uvtx));\n  if (iFrag.y == 0 && iFrag.x <= 4) {\n    if (iFrag.x <= 2) {\n      SetSites ();\n      if (doInit) {\n        Init (r, rv);\n        ppPen = r.xy;\n        pPen = ppPen;\n        nStep = 0.;\n      } else {\n        for (int k = 0; k < 32; k ++) {\n          Step (r, rv);\n          ++ nStep;\n          if (length (r.xy - ppPen) > 0.2) break;\n        }\n        eTot = Eng (r, rv);\n        ppPen = pPen;\n        pPen = r.xy;\n      }\n    }\n    if      (iFrag.x == 0) stDat = vec4 (r, nStep);\n    else if (iFrag.x == 1) stDat = vec4 (rv, eTot);\n    else if (iFrag.x == 2) stDat = vec4 (pPen, ppPen);\n    else if (iFrag.x == 3) stDat = vec4 (slVal, el, az);\n    else if (iFrag.x == 4) stDat = vec4 (mPtr.xyz, float (wgSel));\n    Savev4 (iFrag, stDat, fragColor, fragCoord);\n  }\n}\n\nfloat SegDist (vec2 p, vec2 v1, vec2 v2)\n{\n  vec2 a, b;\n  float s;\n  a = p - v1;\n  b = v2 - v1;\n  s = length (b);\n  b = (s > 0.) ? b / s : vec2 (0.);\n  return length (a - clamp (dot (a, b), 0., s) * b);\n}\n\nfloat LineDist (vec2 p, vec2 v1, vec2 v2)\n{\n  vec2 a, b;\n  float s;\n  a = p - v1;\n  b = v2 - v1;\n  s = length (b);\n  b = (s > 0.) ? b / s : vec2 (0.);\n  return length (a - dot (a, b) * b);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec4 LoadTx (vec2 uv)\n{\n  return texture (txBuf, uv);\n}\n\nvec4 Loadv4 (ivec2 idVar)\n{\n  return texture (txBuf, (vec2 (idVar) + 0.5) / txSize);\n}\n\nvoid Savev4 (ivec2 idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vec2 (idVar) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}