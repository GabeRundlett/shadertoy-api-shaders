{
    "Shader": {
        "info": {
            "date": "1668382749",
            "description": "finalllyyy!!!! yeey ",
            "flags": 0,
            "hasliked": 0,
            "id": "dsj3Dd",
            "likes": 4,
            "name": "polygon by shortest distance",
            "published": 3,
            "tags": [
                "polygon"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "const float n_tau = 6.283185;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_pix_cor_nor = (fragCoord.xy - iResolution.xy* 0.5) / iResolution.y;\n    vec2 o_mou_cor_nor = (iMouse.xy - iResolution.xy* 0.5) / iResolution.y;\n    \n    if(iMouse.w == 0.0){\n        o_mou_cor_nor = vec2(0.3);\n    }\n    float n_sides = 10.0*o_mou_cor_nor.x;\n    float n_dist_origin = length(vec2(0.0) - o_pix_cor_nor);\n    vec2 o_delta = vec2(0.0) - o_pix_cor_nor;\n    float n_angle_origin = atan(o_delta.x , o_delta.y)+(n_tau/2.0);\n    float n_angle_origin_nor = n_angle_origin / n_tau;\n    float n_radius = 0.4;\n    float n_dist_shortest = 1.0;\n    \n    float n_side_nor = floor(n_angle_origin_nor / (1.0/n_sides))*(1.0/n_sides);\n\n    float n_dist_origin_max = min(n_dist_origin,n_radius);\n    vec2 o_p1 = vec2(\n            sin(n_tau * n_side_nor)*n_dist_origin,\n            cos(n_tau * n_side_nor)*n_dist_origin\n    );\n    float n_dist1 = length(o_pix_cor_nor - o_p1);\n    vec2 o_p2 = vec2(\n            sin(n_tau * (n_side_nor+(1.0/n_sides)))*n_dist_origin,\n            cos(n_tau * (n_side_nor+(1.0/n_sides)))*n_dist_origin\n    );\n    float n_dist2 = length(o_pix_cor_nor - o_p2);\n    vec2 o_p3 = vec2(\n            sin(n_angle_origin)*n_radius,\n            cos(n_angle_origin)*n_radius\n    );\n    float n_dist3 = length(o_p3-o_pix_cor_nor);\n    float n_dist = min(n_dist1, n_dist2);\n\n    n_dist = min(n_dist, n_dist3);\n\n    \n    o_p1 = vec2(\n            sin(n_tau * n_side_nor)*n_radius,\n            cos(n_tau * n_side_nor)*n_radius\n    );\n    o_p2 = vec2(\n            sin(n_tau * (n_side_nor+(1.0/n_sides)))*n_radius,\n            cos(n_tau * (n_side_nor+(1.0/n_sides)))*n_radius\n    );\n    vec2 o_delta2 = o_p2-o_p1;\n    float n_m = o_delta2.y / o_delta2.x;\n    float n_q = -(n_m*o_p1.x) + o_p1.y;\n    \n    float n_x = o_pix_cor_nor.x;\n    float n_y = n_m * n_x + n_q; \n    float n_dist4 = abs(o_pix_cor_nor.y-n_y);\n    n_dist = min(n_dist, n_dist4);\n    \n    \n    \n    fragColor = vec4(sqrt(n_dist));\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}