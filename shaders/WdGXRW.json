{
    "Shader": {
        "info": {
            "date": "1573481696",
            "description": "animated version of my freestyle graphics entry for demosplash. programmed in bonzomatic in 15 minutes while waiting for my flight from toronto. set ANIMATED to 0 to see the compo version.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdGXRW",
            "likes": 2,
            "name": "Five Sides Should Be Enough",
            "published": 3,
            "tags": [
                "hexagon",
                "demosplash"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n#define ANIMATED 1\n\n#if ANIMATED\n#define time (iTime/3.+12.6)\n#else\n#define time 16.\n#endif\n\nvec4 plas( vec2 v, float t )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( t + v.y ) * 20.0 );\n  return vec4( sin(c * 0.2 + cos(t)), c * 0.15, cos( c * 0.1 + t / .4 ) * .25, 1.0 );\n}\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash (vec2 p) {\n  int x = FK(p.x);int y = FK(p.y);\n  return float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nfloat hash1(float k){\n  return hash(vec2(k,cos(k)+1.));\n}\n\nvec3 hash3(float k) {\n  float rnd = hash1(k);\n  return vec3(hash1(rnd*2.),hash1(rnd*3.),hash1(rnd*4.));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax,p,cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nfloat comp (vec3 p , vec3 off, vec3 ro) {\n  float ph = acos(ro.x);\n  float th = ro.y*3.1415;\n  vec3 ax = vec3(cos(ph),sin(ph)*cos(th), sin(ph)*sin(th));\n  p+=off;\n  p = erot(p, ax, ro.z*3.1415);\n  p = fract(p)-0.5;\n  return length(p)-pow(1./(3.1415*2.),1./3.);\n}\n\nfloat scene(vec3 p) {\n  float dt = 0.;\n  float cc = 0.;\n  for (int i = 0; i < 5; i++ ) {\n    vec3 off = hash3(float(i));\n    vec3 ro = hash3(cos(float(i)));\n    dt += comp(p, off, ro);\n    cc+=1.;\n  }\n  return dt/sqrt(cc*2.);\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p, mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat bpm = 22.*6.;\n\nfloat hockey(float y) {\n return 0.5*(y+sqrt(4.+y*y)); \n}\n\nfloat pentafriend(vec2 uv) {\n  float dt = 10000.;\n  for (int i = 0; i < 5; i++ ) {\n    float ag = 3.1415/5.*2.*float(i) + floor(time/60.*bpm)*3.1415/10.;\n    float off = 3.1415/5.*2.;\n    vec2 a = vec2(sin(ag),cos(ag));\n    vec2 b = vec2(sin(ag+off),cos(ag+off));\n    dt = min(dt, linedist(uv*3., a, b));\n  }\n  return smoothstep(0.08,0.09,dt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  float dt = pentafriend(uv);\n\n  vec3 cam = normalize(vec3(0.4, uv));\n  float sift = time/4.;\n  float srt = 2.;\n  vec3 init = vec3(-4.+time,cos(sift)*srt,sin(sift)*srt);\n  vec3 p = init;\n  float k = 1.;\n  for (int i =0;i< 15; i++) {\n    float dist = scene(p);\n    if(i == 0) k = sign(dist);\n    dist*=k;\n    //dist = hockey(dist)*2;\n    //if (abs(dist)<0.001) break;\n    if (distance(p, init) > 100.) break;\n    p += cam*dist;\n  }\n  float c = length(sin(p)*0.5+0.5)/sqrt(3.);\n  float d = exp(-distance(p,init))/exp(0.);\n  vec3 c1 = vec3(0.3,0.1,0.9);\n  vec3 c2 = vec3(0.9,0.2,0.1);\n  fragColor.xyz = sqrt(c1*c1*c + c2*c2*d) + hash(uv*time)*0.05;\n  \n  fragColor = sqrt(mix(pow(1.-fragColor, vec4(2.)), pow(fragColor, vec4(2.)), dt));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}