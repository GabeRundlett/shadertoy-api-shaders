{
    "Shader": {
        "info": {
            "date": "1615076174",
            "description": "Experimenting with SDF functions for triangularized meshes. Work-in-progress.\nMuch of the code is borrowed from iq's SDF triangle shader: https://www.shadertoy.com/view/4sXXRN",
            "flags": 0,
            "hasliked": 0,
            "id": "3tcfWf",
            "likes": 6,
            "name": "SDF Triangularized Mesh Tracer",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "jstrom2002",
            "viewed": 583
        },
        "renderpass": [
            {
                "code": "// NOTE: much of this code was borrowed from iq's SDF raymarching code\n// from the following shadertoy: https://www.shadertoy.com/view/4sXXRN\n\n// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmat4 RotateScaleTranslate( vec3 r, vec3 s, vec3 t )\n{\n    float a = sin(r.x); float b = cos(r.x); \n    float c = sin(r.y); float d = cos(r.y); \n    float e = sin(r.z); float f = cos(r.z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f*s.x,  d*e,          -c,      0.0,\n                 ac*f-b*e, ac*e+b*f*s.y, a*d,     0.0,\n                 bc*f+a*e, bc*e-a*f,     b*d*s.z, 0.0,\n                 t.x,      t.y,          t.z,     1.0 );\n}\nvec3 applyTransform(vec3 v, mat4 M)\n{\n    vec4 v_ = vec4(v, 1.0);\n    v_ = M * v_;\n    return v_.xyz / v_.w;\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n// from iq:\nfloat udTriangle(in vec3 ro, in vec3 rd, in vec3 v1, \n    in vec3 v2, in vec3 v3, in vec3 p, out vec3 bary )\n{\n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v32 = v3 - v2; vec3 p2 = p - v2;\n    vec3 v13 = v1 - v3; vec3 p3 = p - v3;\n    vec3 nor = cross( v21, v13 );\n\n    // I've added this bit to get the barycentric coordinates for texture mapping:\n    vec3 e2 = ( v1 - ro ) / dot( -nor, rd );\n    vec3 i  = cross( rd, e2 );\n    bary.y = dot( i, v13 );\n    bary.z = dot( i, v21 );\n    bary.x = 1.0 - bary.y - bary.z;\n\n    return sqrt( (sign(dot(cross(v21,nor),p1)) + \n                  sign(dot(cross(v32,nor),p2)) + \n                  sign(dot(cross(v13,nor),p3))<2.0) \n                  ?\n                  min( min( \n                  dot2(v21*clamp(dot(v21,p1)/dot2(v21),0.0,1.0)-p1), \n                  dot2(v32*clamp(dot(v32,p2)/dot2(v32),0.0,1.0)-p2) ), \n                  dot2(v13*clamp(dot(v13,p3)/dot2(v13),0.0,1.0)-p3) )\n                  :\n                  dot(nor,p1)*dot(nor,p1)/dot2(nor) );\n}\n\nfloat map(in vec3 ro, in vec3 rd, in float t, out vec3 bary, out int idx)\n{\n    vec3 p = ro + rd * t;\n    vec3 v1,v2,v3;\n    vec3 baryc;\n    float d_final = MAX_DISTANCE;\n    \n    mat4 M = RotateScaleTranslate(modelRot, modelScale, modelPos);\n    \n    for(int i=0; i < numIndices; i+=3)\n    {\n        // Get triangle data and transform vertices.\n        v1 = vertices[indices[i+0]];\n        v2 = vertices[indices[i+1]];\n        v3 = vertices[indices[i+2]];  \n        \n        v1 = applyTransform(v1, M);\n        v2 = applyTransform(v2, M);\n        v3 = applyTransform(v3, M);\n                \n        // Calc distance, compare with current distance.\n        float d1 = udTriangle(ro, rd, v1, v2, v3, p, baryc ) - 0.01;\n        if(d1 < d_final)\n        {\n            d_final = d1;\n            bary = baryc;\n            idx = i;\n        }\n    }\n\n    return d_final;\t\n}\nfloat intersect( in vec3 ro, in vec3 rd, out vec3 bary, out int idx)\n{\n\tfloat h = 1.0;\n    float t = 0.0;\n\n    // March ray, checking distance to mesh data at each step.\n    for(int i = 0; i < INTERSECTION_PASSES; i++)\n    {\n        if(h < INTERSECT_EPSILON || t > SCENE_MAX_BOUND) \n            break;\n\t    h = map(ro,rd,t,bary,idx);\n        t += h;\n    }\n\n    // If parameter t has been stepped beyond scene bounds, return null value.\n    if(t > SCENE_MAX_BOUND) \n        t=-1.0;\n\t\n    return t;\n}\n\n//=====================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * PI;\n    vec2 st = (fragCoord - center) / iResolution.y;\n    \n    // Rotate light source.\n    float theta = 2.0*iTime/PI;\n    lightPos += 5.0 * vec3(\n        cos(theta)*sin(theta),\n        sin(theta)*sin(theta),\n        sin(theta)\n    );\n\n    // Init ray.\n\tvec3 ro = camPos;\n\tvec3 rd = normalize(st.x * camRight + st.y * -camUp + camFront);\n\t\n    // Rotate with mouse -- borrowed from oneshade: https://www.shadertoy.com/view/WtVfDV\n    float cy = cos(mouse.x), sy = -sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);    \n    \n\tvec3 col = vec3(0.0);\n    bool anyHit = false;\n    \n    for(int bounce_number = 1; bounce_number < BOUNCES+1; ++bounce_number)\n    {\n        vec3 bary;\n        int idx = -1;\n        float t = intersect(ro,rd,bary,idx);\n        if( t>0.0 )\n        {               \n            anyHit = true;\n            vec3 pos = ro + t*rd;\n        \n            // Get normals from mesh data and interpolate with barycentric coordinate.\n            vec3 n1 = normals[indices[idx+0]];\n            vec3 n2 = normals[indices[idx+1]];\n            vec3 n3 = normals[indices[idx+2]];        \n            vec3 nor = normalize(bary.x * n1 + bary.y * n2 + bary.z * n3);\n            nor *= -sign(dot(nor, rd)); // Flip towards camera\n            \n            if(DEBUG_NORMALS != 0)\n            {\n                fragColor = vec4(nor,1.0);\n                return;\n            }\n            \n            // Get uvs from mesh data and interpolate with barycentric coordinate.\n            vec2 uv1 = uvs[indices[idx+0]];\n            vec2 uv2 = uvs[indices[idx+1]];\n            vec2 uv3 = uvs[indices[idx+2]];        \n            vec2 texCoord = bary.x * uv1 + bary.y * uv2 + bary.z * uv3;\n        \n            // Lambertian diffuse lighting w/ albedo map:\n            vec3 lightToHitFrag = lightPos - pos;        \n            vec3 L = normalize(lightToHitFrag);\n            float NdotL = max(dot(nor,L),0.0);\n            vec3 albedo = texture(iChannel1,texCoord).rgb;\n            vec3 diffuse = vec3(NdotL) * lightCol * albedo;\n        \n            // Light falloff.\n            float dist = dot2(lightToHitFrag);\n            float linear_falloff = dist / lightIntensity[1];\n            float quad_falloff = dist * dist / lightIntensity[2];\n            float attenuation = 1.0 / (1.0 + linear_falloff + quad_falloff);\n        \n            col += (diffuse * attenuation) / float(bounce_number);\n        \n            // Setup next ray.\n            ro = pos;\n            rd = reflect(pos, nor);\n        }\n    }\n    \n    // If ray missed all mesh triangles, shade skybox\n    if(!anyHit)\n        col = texture(iChannel0, -1.0 * rd).rgb;\n    \n    fragColor = vec4( col, 1.0 );\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Global definitions -- some of these values can kill your framerate, beware!\n#define BOUNCES 1\n#define DEBUG_NORMALS 0\n#define INTERSECT_EPSILON 0.01\n#define INTERSECTION_PASSES 30\n#define MAX_DISTANCE 10.0\n#define PI 3.1415926\n#define SCENE_MAX_BOUND 50.0\n\n// Triangularized Cornell box mesh data:\nconst int maxIndexValue = 20;\nvec3 vertices[maxIndexValue] = vec3[maxIndexValue](\nvec3(-10.0,10.0,10.0),\nvec3(-10.0,10.0,-10.0),\nvec3(10.0,10.0,-10.0),\nvec3(10.0,10.0,10.0),\nvec3(-10.0,-10.0,-10.0),\nvec3(10.0,-10.0,-10.0),\nvec3(10.0,10.0,-10.0),\nvec3(-10.0,10.0,-10.0),\nvec3(-10.0,-10.0,10.0),\nvec3(10.0,-10.0,10.0),\nvec3(10.0,-10.0,-10.0),\nvec3(-10.0,-10.0,-10.0),\nvec3(-10.0,-10.0,10.0),\nvec3(-10.0,-10.0,-10.0),\nvec3(-10.0,10.0,-10.0),\nvec3(-10.0,10.0,10.0),\nvec3(10.0,-10.0,-10.0),\nvec3(10.0,-10.0,10.0),\nvec3(10.0,10.0,10.0),\nvec3(10.0,10.0,-10.0)\n);\n\nvec2 uvs[maxIndexValue] = vec2[maxIndexValue](\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000)\n);\n\nvec3 normals[maxIndexValue] = vec3[maxIndexValue](\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000)\n);\n\n// Mesh vertex data is aligned to use a single index for position/normal/uv values.\nconst int numIndices = 30;\nint indices[numIndices] = int[numIndices]\n(\n0,1,2,\n0,2,3,\n4,5,6,\n4,6,7,\n8,9,10,\n8,10,11,\n12,13,14,\n12,14,15,\n16,17,18,\n16,18,19\n);\n\nvec3 modelPos = vec3(0,0,0);\nvec3 modelScale = vec3(1.0);\nvec3 modelRot = vec3(0.0,PI,0.0);\n\nvec3 camPos = vec3(0,0,-29);\nvec3 camRight = vec3(1,0,0);\nvec3 camUp = vec3(0,1,0);\nvec3 camFront = vec3(0,0,1);\n\n// Single point light.\nvec3 lightPos = vec3(0, 0, 0);\nvec3 lightCol = vec3(1.0);\nvec3 lightIntensity = vec3(5.0e4);//attenuation factors for constant/linear/quadratic light falloff\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}