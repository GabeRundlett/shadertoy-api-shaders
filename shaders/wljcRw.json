{
    "Shader": {
        "info": {
            "date": "1594211273",
            "description": "A curvier version than the last.",
            "flags": 0,
            "hasliked": 0,
            "id": "wljcRw",
            "likes": 12,
            "name": "Octagon and Square Truchet v2",
            "published": 3,
            "tags": [
                "truchet"
            ],
            "usePreview": 0,
            "username": "Oggbog",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(144.34, 1051.74));\n    p += dot(p, p + 230.45);\n    return fract(p.x * p.y + p.y + p.x);\n}\n\nvec2 rot(vec2 st, float a){\n   return st * mat2(cos(a),-sin(a),sin(a),cos(a)); \n}\n\nfloat arc(vec2 uv, vec2 centre, float r, float s, float e,float th){\n    \n    float d = length(uv-centre);\n    float a = atan(uv.x-centre.x,uv.y-centre.y);\n    \n    if (a>s && a<e){\n    \td = smoothstep(d,d+.01,r+th/2.)-smoothstep(d,d+.01,r-th/2.);\n    } else {\n        d = 0.;\n    }\n    return d;\n}\n\nfloat vline(vec2 p,float s, float e, float th){\n    float d = length(p-vec2(0.,clamp(p.y,s,e)));\n    d = smoothstep(d,d+.005,th/2.);\n    return d;\n}\n\nfloat hline(vec2 p,float s, float e, float th){\n    float d = length(p-vec2(clamp(p.x,s,e),0.));\n    d = smoothstep(d,d+.005,th/2.);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 qv = uv - 0.5;\n    \n    float g = 15.; // has to be an odd number to work correctly\n    \n    vec2 id = floor(uv * g);\n    uv = fract(uv * g)-.5;\n    vec2 qd = floor(qv * g);\n    qv = fract(qv * g)-.5;\n    vec2 gv = uv;\n    \n    float c = 2./3.;\n    float m = 0.;\n    float m1 = 0.;\n    float th = 0.19;\n  \n    \n    float t =(iTime*.5)*PI/4.;\n    float tq = (iTime * .5)*PI/2.;\n    float r = hash21(id);\n    float q = hash21(qd);\n    \n    uv = rot(uv,id.x*floor(t*r)*PI/4.);\n    qv = rot(qv,qd.x*floor(tq*q)*PI/2.);\n    \n    \n    // Octagon pattern\n#if 1\n    m += hline(uv,-.5,.5,th);\n    m += vline(uv,.3,.5,th);\n    m += vline(uv,-.5,-.3,th);\n    \n    m += arc(uv,vec2(0.,-.77),.55,-.8,.8,th);\n    m += arc(uv,vec2(0.,.77),.55,-3.142,-2.4,th);\n    m += arc(uv,vec2(0.,.77),.55,2.4,3.142,th);\n#endif\n    \n    // Square pattern\n#if 1\n    m1 += arc(qv,vec2(0.,-.4),.3,-.63,.63,th);\n    m1 += arc(qv,vec2(0.,.4),.3,-3.142,-2.57,th);\n    m1 += arc(qv,vec2(0.,.4),.3,2.57,3.142,th);\n    m += m1;\n#endif\n    \n    // Grid\n#if 0\n    m += gv.x<-0.48 && gv.y<c/3.5 && gv.y>-c/3.5 ? 1.:0.;\n    m += gv.y<-0.48 && gv.x<c/3.5 && gv.x>-c/3.5 ? 1.:0.;\n    m += smoothstep(gv.x,gv.x+b,gv.y-c)-smoothstep(gv.x,gv.x+b,gv.y-c-.02);\n\tm += smoothstep(-gv.x,-gv.x+b,gv.y-c)-smoothstep(-gv.x,-gv.x+b,gv.y-c-.02);\n    m += smoothstep(-gv.x,-gv.x+b,-gv.y-(c))-smoothstep(-gv.x,-gv.x+b,-gv.y-(c)-.02);\n    m += smoothstep(gv.x,gv.x+b,-gv.y-(c))-smoothstep(gv.x,gv.x+b,-gv.y-(c)-.02);\n#endif\n    \n    vec3 col =vec3(m);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}