{
    "Shader": {
        "info": {
            "date": "1655644420",
            "description": "Compare fwidth (left) to derivative length (right) for anti-aliasing a spiral.\n\nMouse controls: Click to move the line. \nClick and drag off-screen to the left or right to keep a specific spiral.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsKyDV",
            "likes": 7,
            "name": "fwidth vs derivative length",
            "published": 3,
            "tags": [
                "spiral",
                "derivatives",
                "aa",
                "fwidth"
            ],
            "usePreview": 0,
            "username": "cutesthypnotist",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "#define AA 75.\n#define SWIRLY 50.\n#define SCALE 75.\n#define SIZE 0.25\n#define TIMESCALE 2.0\n\nvec3 hue(float x) {\n    x = 1.5 + 1.5 * cos(sin(x / 6.283185) * 6.283185);\n    return clamp(abs(vec3(x) - vec3(1., 2., 3.)), 0., 1.);\n}\n\nvoid mainImage( out vec4 O, in vec2 FC )\n{\n    vec2 R = iResolution.xy;\n    vec2 U = ( FC - 0.5 * R ) / R.y;   \n    vec2 m = ( iMouse.xy - 0.5 * R) * 2.0 / R.y;\n    float t = iTime * TIMESCALE;\n    \n    // Which side of screen?\n    // Now with janky mouse control.\n    float side = iMouse.z > 0. ? ( FC.x - (0.5 + 0.3 * m.x) * R.x) : ( FC.x - (0.5 + sin(iTime)*0.20) * R.x );\n    //side = 1.;\n    \n    // 2D SDF\n    float dist = log( 1.0 - length(U) ) * SCALE;\n    \n    // Polar conversion\n    float angle = atan(U.x,U.y);\n    \n    // Derivative length.\n    vec2 derv = vec2( dFdx(dist), dFdy(dist) );\n    \n    // Note that fwidth is implemented as abs(dFdx(x)) + abs(dFdy(x)).\n    float width = ( side > 0. ) \n        ? length(derv) \n        : fwidth(dist);\n        \n    dist *= 0.5;\n    \n    // Apply anti-aliasing.\n    float aa = min( AA, AA * width );\n    float swirls = smoothstep(\n        -aa, \n        aa * width, \n        SIZE - sin(  dist + angle + t)\n    );\n    \n    // Screen divider\n    float divider = min( side * side / 8., 1.);\n    \n    \n    vec2 layer = vec2(\n        sin( angle * 0.5 ), \n        cos( swirls * swirls ) * SWIRLY \n    );\n    \n    // Give me the swirlies boss\n    O = vec4(divider * \n        mix(\n            1.0 - hue( length(layer) + t * 0.3 ), \n            hue( length(layer) + t * 0.1 ), \n            swirls\n        ), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}