{
    "Shader": {
        "info": {
            "date": "1524165339",
            "description": "Bottom: base noise. top: cascade   SPACE: raw noises\nLeft to right: improved true Perlin noise, displacement from 2D noise, from grad(1D noise), from curl(1D noise), from grad(cascade) ( which corrupts scale weights)\nNB: grads from hardware derivatives.",
            "flags": 16,
            "hasliked": 0,
            "id": "MdtBzH",
            "likes": 24,
            "name": "improved perlin noise (+tilable)",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "mz"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1150
        },
        "renderpass": [
            {
                "code": "// - shadertoy contains a lot of pseudo Perlin noise, showing indeed value noise \n//   (possibly spline-interpolated) rather than gradient noise\n// - original Perlin noise shows poor derivatives\n// - in 2002, Perlin proposed an improved version\n// - here, I show a 2D version (z=0) and replace permutations by quality integer hash.\n\nfloat noise_A = .5,               // displacement amplitude\n      noise_S = 10.,              // noise scale\n        WIDTH = .2;               // vein width: 1. .2 .01\nvec2 CYCLE = 0.*vec2(1./4.);      // tilable domain\nvec2 R;\n\n// === Perlin noise ( true gradient noise + improved scheme for nice derivatives )\n// Ref implem of 2002 Perlin improved noise: http://mrl.nyu.edu/~perlin/noise/\n// Here, 2D & integer hash instead of permutations.\n\n// std int hash, inspired from https://www.shadertoy.com/view/XlXcW4\nvec3 hash3i( uvec3 x ) \n{\n#   define scramble  x = ( (x>>8U) ^ x.yzx ) * 1103515245U // GLIB-C const\n    scramble; scramble; scramble; \n    return vec3(x) / float(0xffffffffU) + 1e-30; // <- eps to fix a windows/angle bug\n}\n#define unsigned(v) ( (v) >= 0. ? uint(v) : -1U-uint(-(v)) ) // for uint(float < 0) is bugged\n#define hash(v) hash3i(uvec3(unsigned((v).x),unsigned((v).y),11)).x \n//#define hash(v) hash3i(uvec3(v+float(0x0000ffffU),11)).x // why ?\n//#define hash(x)  fract(sin(dot(x,vec2(1,17.53))) * 43758.5453123)\n\nfloat grad(float r, vec2 p) {\n      int h = int(r*256.) & 15;\n      float u = h<8 ? p.x : p.y,                 // 12 gradient directions\n            v = h<4 ? p.y : h==12||h==14 ? p.x : 0.; // p.z;\n      return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n}\n\n#define G(v) grad(hash(I+v),p-v)\n#define fade(t)  t * t * t * (t * (t * 6. - 15.) + 10.) // super-smoothstep\n\nfloat Inoise2(vec2 p) {\n    vec2 I = floor(p); p -= I;    \n    vec2 f = fade(p);\n    \n    return mix( mix( G(vec2(0,0)),G(vec2(1,0)), f.x),\n                mix( G(vec2(0,1)),G(vec2(1,1)), f.x), f.y );\n}  \n\n//#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nfloat fbm2(vec2 p) {\n    float v = 0.,  a = .5;\n    //mat2 R = rot(.37); // should no longer be necessary\n\n    for (int i = 0; i < 3; i++, p*=2.,a/=2.) \n        //p *= R,\n        v += a * Inoise2(p);\n        //v += a *a*2.* Inoise2(p); // trying to get derivatives respect the scale profile\n\n    return v;\n}\n\n// --- tilable version \n#define Gt(v) grad(hash(mod(I+v,cycle)),p-v)\n\nfloat InoiseT2(vec2 p, vec2 cycle) {\n    vec2 I = floor(p); p -= I;    \n    vec2 f = fade(p);\n    \n    return mix( mix( Gt(vec2(0,0)),Gt(vec2(1,0)), f.x),\n                mix( Gt(vec2(0,1)),Gt(vec2(1,1)), f.x), f.y );\n}  \n\n//#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nfloat fbmT2(vec2 p, vec2 cycle) {\n    float v = 0.,  a = .5;\n    //mat2 R = rot(.37); // should no longer be necessary\n\n    for (int i = 0; i < 3; i++, p*=2.,a/=2.,cycle*=2.) \n        //p *= R,\n        v += a * InoiseT2(p,cycle);\n        //v += a *a*2.* Inoise2(p); // trying to get derivatives respect the scale profile\n\n    return v;\n}\n\n// --- version returning vec2\n#define G2(v) vec2( grad(hash(I+v),p-v), grad(hash(I+v+117.),p-v))\nvec2 Inoise22(vec2 p) {\n    vec2 I = floor(p); p -= I;    \n    vec2 f = fade(p);\n    \n    return mix( mix( G2(vec2(0,0)),G2(vec2(1,0)), f.x),\n                mix( G2(vec2(0,1)),G2(vec2(1,1)), f.x), f.y );\n}  \n\nvec2 fbm22(vec2 p) {\n    vec2 v = vec2(0); float  a = .5;\n    //mat2 R = rot(.37);\n\n    for (int i = 0; i < 3; i++, p*=2.,a/=2.) \n        //p *= R,\n        v += a * Inoise22(p);\n\n    return v;\n}\n\n// --- tilable version\n#define Gt2(v) vec2( grad(hash(mod(I+v,cycle)),p-v), grad(hash(mod(I+v,cycle)+117.),p-v))\nvec2 InoiseT22(vec2 p, vec2 cycle) {\n    vec2 I = floor(p); p -= I;    \n    vec2 f = fade(p);\n    \n    return mix( mix( Gt2(vec2(0,0)),Gt2(vec2(1,0)), f.x),\n                mix( Gt2(vec2(0,1)),Gt2(vec2(1,1)), f.x), f.y );\n}  \n\nvec2 fbmT22(vec2 p, vec2 cycle) {\n    vec2 v = vec2(0); float  a = .5;\n    //mat2 R = rot(.37);\n\n    for (int i = 0; i < 3; i++, p*=2.,a/=2., cycle*=2.) \n        //p *= R,\n        v += a * InoiseT22(p,cycle);\n\n    return v;\n}\n\n// --- variant: multifractal \nvec2 mfbm22(vec2 p) {\n    vec2 v = vec2(0), m=vec2(1), n; float  a = .5;\n    //mat2 R = rot(.37);\n\n    for (int i = 0; i < 3; i++, p*=2.,a/=2.) \n        //p *= R,\n        n = Inoise22(p),\n        v += a * m * n,\n        m *= n;\n\n    return v;\n}\n\n// --- variant: make 2D noise using derivative of base\nvec2 gradInoise2(vec2 p) { \n    float n = Inoise2(p); \n    return vec2( dFdx(n), dFdy(n) )/1.875/1.3 * R.y/noise_S ; // / vec2(dFdx(p.x) ,dFdy(p.y) ); \n}\nvec2 gradfbm2(vec2 p) {\n    vec2 v = vec2(0); float  a = .5;\n    //mat2 R = rot(.37); // should no longer be necessary\n\n    for (int i = 0; i < 3; i++, p*=2.,a/=2.) \n        //p *= R,\n        v += a * gradInoise2(p) * a/.5;\n        //v += a *a*2.* Inoise2(p); // trying to get derivatives respect the scale profile\n\n    return v;\n}\n// -- variant: make 2D noise using curl-derivative of base\nvec2 div0Inoise2(vec2 p) { \n    float n = Inoise2(p); \n    return vec2( -dFdy(n), dFdx(n) )/1.875/1.3  * R.y/noise_S ;  // / vec2(dFdx(p.x) ,dFdy(p.y) ); \n}\nvec2 div0fbm2(vec2 p) {\n    vec2 v = vec2(0); float  a = .5;\n    //mat2 R = rot(.37); // should no longer be necessary\n\n    for (int i = 0; i < 3; i++, p*=2.,a/=2.) \n        //p *= R,\n        v += a * div0Inoise2(p) * a/.5;\n\n    return v;\n}\n\n// ------------------------------------------------------\n\nbool keyToggle(int ascii) {\n\treturn (texture(iChannel3,vec2((.5+float(ascii))/256.,0.75)).x > 0.);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    R = iResolution.xy;\n    int i = int(5.*U.x/R.x), j = int(2.*U.y/R.y);\n    U /= R.y; \n    vec2 U0 = U, D;\n    U.y -= .1*iTime;\n    O -= O;\n    //i=0; j=1;\n    U *= noise_S; // U-=100.;\n    if (i==0) {        // raw noise\n        float v = j==1 ? CYCLE==vec2(0) ? fbm2(U)    : fbmT2(U,CYCLE*noise_S)\n                       : CYCLE==vec2(0) ? Inoise2(U) : InoiseT2(U,CYCLE*noise_S);\n        D = vec2(v);\n    } if (i==1) {      // displacement: 2D noise\n        vec2 v = j==1 ? CYCLE==vec2(0) ? fbm22(U)    : fbmT22(U,CYCLE*noise_S)\n                      : CYCLE==vec2(0) ? Inoise22(U) : InoiseT22(U,CYCLE*noise_S);\n        D = v;\n        O.b += .15;\n    } else if (i==2) { // displacement: grad(1D noise)\n        vec2 v = j==1 ? gradfbm2(U)\n                      : gradInoise2(U);\n        D = v;\n        O.g += .15;   \n    } else if (i==3) { // displacement: grad-curl(1D noise): conservative\n        vec2 v = j==1 ? div0fbm2(U)\n                      : div0Inoise2(U);\n        D = v;\n        O.r += .15;   \n    } else if (i==4) { // displacement: grad(cascade)\n        float v = j==1 ? fbm2(U)\n                       : Inoise2(U);\n        D = vec2( dFdx(v),dFdy(v) ) / 1.875  * R.y/noise_S;\n        O.rg += .15;\n    } \n    if (i==0 || keyToggle(32) )\n            O = vec4(.5+.5*D.xyxy);       // raw noise\n        else {\n            U = U0 + noise_A/noise_S * D; // displacement\n            WIDTH = .01+WIDTH*(.5+.5*sin(iTime));\n            O += pow(.5-.5*cos(10.*R.y/R.x*6.28*U.x), 1./WIDTH );\n            //U = (U*R.y-.5*R)/R.x*5.; U.x = fract(U.x-.5)-.5; O += pow(.5-.5*cos(6.28*length(U)*1.2), 1./WIDTH );\n            //O = texture(iChannel0, U);          \n        }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}