{
    "Shader": {
        "info": {
            "date": "1517140572",
            "description": "Dare fullscreen ! :-p\n\ntexture variant:\nU *= mat2(cos( vec4(0,33,55,0) ...   instead of U.y = dot( U, cos(\nO *= texture(iChannel0,.5+.5*U);     instead of smoothstep\n\nother greek friezes here: [url]https://www.shadertoy.com/results?query=frieze[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XtSBDK",
            "likes": 141,
            "name": "wave greek frieze 5 (animated)",
            "published": 3,
            "tags": [
                "waves",
                "patterns",
                "2tweets",
                "short",
                "greek",
                "frieze"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 3045
        },
        "renderpass": [
            {
                "code": "/**/ // variant of https://shadertoy.com/view/MljBDG\n\n#define l(a)  2.6*(a)*(a)                             // approx of spiral arc-length\n\nvoid mainImage(out vec4 O, vec2 U) \n{\n\tvec2 R = iResolution.xy, V;\n    U = 5.* ( U+U - R ) / R.y;                        // normalized coordinates\n    U = vec2( atan(U.y,U.x)/6.283 +.5, length(U) );   // polar coordinates\n    U.y-= U.x;                                        // lenght along spiral\n    U.x = l( ceil(U.y)+U.x ) - iTime;                 // arc-length\n    O   = vec4(1.- pow( abs( 2.*fract(U.y)-1.),10.)); // inter-spires antialiasing\n    V   = ceil(U); U = fract(U)-.5;                   // cell along spiral: id + loc coords\n // vortices (small spirals) : assume col = step(0,y) then rotate( (0,0), space&time*(.5-dist) )\n    U.y = dot( U, cos( vec2(-33,0)                    // U *= rot, only need U.y -> (-sin,cos)\n                       +  .3*( iTime + V.x )          // rot amount inc with space/time\n                         * max( 0., .5 - length(U) )  // rot amount dec with dist\n             )       );\n\tO *= smoothstep( -1., 1., U/fwidth(U) ).y;        // draw antialiased vortices\n}\n\n/**/\n\n        \n\n\n\n        \n/** // 266 chars  (golfed version of above)\n     // -15 without animation  -43 without big spiral antialiasing\n\n#define mainImage(O,u)                                       \\\n\tvec2 R = iResolution.xy, U = 5.* ( u+u - R ) / R.y;      \\\n    float a = atan(U.y,U.x)/6.283 +.5, l = length(U)-a;      \\\n    a += ceil(l); a = 2.6*a*a - iTime;                       \\\n    a = dot( U = fract(vec2(a,l)) - .5  ,                    \\\n             cos( .3*(iTime+a) * max(0.,.5-length(U)) - vec2(33,0) )); \\\n    O  += min(1., a/fwidth(a) +.5) - pow( abs( 2.*fract(l) -1. ), 10.) \n\n/**/\n\n/** // 324 chars  (golfed version of above)\n\n#define l(a)  (a)*(a)/2.     // (a)/2. * sqrt(1.+(a)*(a)) // approx of spiral arc-length\n\n#define mainImage(O,u)                                         \\\n\tvec2 R = iResolution.xy,                                   \\\n         U = u+u-R;                                            \\\n         U = vec2( atan(U.y,U.x)/6.283+.5, length(U)*5./R.y ); \\\n    U.y-= U.x;  U.x = l(2.3*(ceil(U.y)+U.x)) - iTime;          \\\n    O  += 1. - pow( abs( 1.-2.*fract(U.y) ), 10.);             \\\n    R   = ceil(U);                                             \\\n    U.y = dot( cos( .3*(iTime+R.x) * max(0.,.5-length(U = fract(U)-.5)) - vec2(33,0) ), U); \\\n\tO  *= smoothstep(-1.,1.,U.y/fwidth(U.y))\n\n/**/\n        \n \n\n        \n        \n/** // 319 chars\n\n#define mainImage(O,u)                                   \\\n\tvec2 R = iResolution.xy,                             \\\n         U = 5.*(u+u-R)/R.y, V;                          \\\n         U = vec2( atan(U.y,U.x)/6.283+.5, length(U) );  \\\n    float a = ceil( U.y-= U.x );                         \\\n    U.x = ( U.x+a/3. ) * a*6. - iTime;                   \\\n    O += 1. - pow( 1.- abs( 1.-2.*fract(U.y-.5) ), 10.); \\\n    V = ceil(U);                                         \\\n    U.y = dot( cos( .3*(iTime+V.x) * max(0.,.5-length(U = fract(U)-.5)) - vec2(33,0) ), U); \\\n\tO *= smoothstep(-1.,1.,U.y/fwidth(U.y))\n        \n/**/\n \n\n        \n        \n/** // 277 chars    missing: antialiasing along large spiral\n\n#define mainImage(O,u)                                   \\\n\tvec2 R = iResolution.xy,                             \\\n         U = 5.*(u+u-R)/R.y, V;                          \\\n         U = vec2( atan(U.y,U.x)/6.283+.5, length(U) );  \\\n    U.y -= U.x;                                          \\\n    U.x = ( U.x+ceil(U.y)/3. ) * ceil(U.y)*6. - iTime;   \\\n    V = ceil(U);                                         \\\n    U.y = dot( cos( .3*(iTime+V.x) * max(0.,.5-length(U = fract(U)-.5)) - vec2(33,0) ), U); \\\n\tO += smoothstep(-1.,1.,U.y/fwidth(U.y))\n        \n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}