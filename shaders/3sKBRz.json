{
    "Shader": {
        "info": {
            "date": "1606429904",
            "description": "gloop - - from in game  [url]https://www.youtube.com/watch?v=u3JePjNBRjM&feature=emb_logo[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3sKBRz",
            "likes": 3,
            "name": "glooper",
            "published": 3,
            "tags": [
                "gloop"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 400.0\n#define SURF_DIST 0.01\n\nfloat sdSphere(vec3 p, vec4 s){\n\treturn  length(p-s.xyz)-s.w;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat GetDist(vec3 p){\n    \n   \tfloat sd = sdSphere(p,vec4(0,1,6,1));\n\tfloat v = 0.5+sin(iTime*2.4 + p.z*5.4+p.y*3.4+p.x*4.1)*0.5;\n\tsd += v*0.25;\n\tfloat k = 3.5+sin(p.y*3.2+iTime*3.16);\n    float d = smin(sd*0.75,p.y+.5,k);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS;i++){\n        vec3 p = ro + rd  * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        \n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    \n    }\n    \n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p){\n\tfloat d = GetDist(p);\n    vec2 e = vec2(0.005,0);\n    \n    \n    vec3 n = d - vec3(GetDist(p - e.xyy),\n                      GetDist(p - e.yxy),\n                      GetDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\n\nfloat GetLight(vec3 p,vec3 rd)\n{\n    float t = fract(iTime*0.54)*6.28;\n\tvec3 lightPos = vec3(0,8.+sin(t+p.z)*5.0,3);\n    vec3 l = normalize(lightPos - p);\n    \n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.0,1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    \n    if(d < length(lightPos-p))\n        dif *= .5;\n    else\n    {\n\t    vec3 ref = reflect(rd, n);\n\t\tfloat spe = max(dot(ref, l), 0.0);\n\t  \tdif += pow(spe,64.0);\n    }\n\n    \n    return dif;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    vec3 ro = vec3(0,2,-2.5);\n    vec3 rd = normalize(vec3(uv.x,uv.y-.3,2));\n    float d = RayMarch(ro,rd);\n    vec3 p = ro + rd *d;\n    float dif = GetLight(p,rd);\n    col = vec3(dif*(1.0+sin(rd.x)),dif,dif*0.8);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}