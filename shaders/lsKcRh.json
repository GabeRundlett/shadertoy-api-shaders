{
    "Shader": {
        "info": {
            "date": "1521314934",
            "description": "A tribute to the well-known Lemmings cracktro by Skid Row for the Commodore Amiga. Take a look to the original piece at:\nhttp://www.pouet.net/prod.php?which=4021 (Pöuet).\nhttps://www.youtube.com/watch?v=2YJGHcCkYEw (Youtube).\n",
            "flags": 96,
            "hasliked": 0,
            "id": "lsKcRh",
            "likes": 21,
            "name": "Skid Row Lemmings Cracktro",
            "published": 3,
            "tags": [
                "2d",
                "amiga",
                "lemmings",
                "cracktro",
                "skidrow"
            ],
            "usePreview": 0,
            "username": "merry",
            "viewed": 1922
        },
        "renderpass": [
            {
                "code": "// Skid Row Lemmings Cracktro Remake by merry^Architect.\n// http://www.pouet.net/prod.php?which=4021 (Pöuet).\n// https://www.youtube.com/watch?v=2YJGHcCkYEw (Youtube).\n// Coded by merry ^ Architect in 2018.\n\n// This cracktro is my favourite of all times (the music by 4mat is probably the actual reason!!!).\n// With this little tribute I wanted to make a homage to all Amiga cracktros that introduced me into the demoscene. \n\n// Image: composes the image. Uses Buffer B for mipmapping, Buffer C for pixel-perfect sampling. Composes the image\n// by mixing different mipmap levels onto the original image, then applies some post-processing.\n\n// Uncomment SHOW_ORIGINAL_RASTERPORT to watch the rasterport without any postprocessing.\n// #define SHOW_ORIGINAL_RASTERPORT\n\n// The CRT tube distortion is driven by this parameter.\n#define CRT_FACTOR 1.1\n\n// Taken from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// Taken from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv  = fragCoord / iResolution.xy;\n    vec4 col = vec4(0);\n    float v  = 1.;\n    \n    // Fakes a CRT surface.\n#\tifndef SHOW_ORIGINAL_RASTERPORT    \n    uv = uv * 2. - 1.;\n    v  = length(uv);\n    uv = normalize(uv) * pow(v, CRT_FACTOR);\n    uv = uv * .5 + .5;\n#   endif//SHOW_ORIGINAL_RASTERPORT    \n\n    // Fake brightness using mipmaps.\n#\tifndef SHOW_ORIGINAL_RASTERPORT    \n    col+= clamp(pow(textureLod(iChannel0, uv, 4.), vec4(.1)), 0., 1.) * .02;\n    col+= clamp(pow(textureLod(iChannel0, uv, 3.), vec4(.1)), 0., 1.) * .02;\n    col+= clamp(pow(textureLod(iChannel0, uv, 2.), vec4(.1)), 0., 1.) * .02;\n\tcol+= clamp(textureLod(iChannel0, uv, 2.), 0., 1.) * 0.16;\n#   endif//SHOW_ORIGINAL_RASTERPORT    \n\tcol+= texture(iChannel1, uv);\t\n\n    vec2 coord = uv * vec2(SCR_WIDTH, SCR_HEIGHT);\n    vec2 coord2= coord;\n#   ifndef SHOW_ORIGINAL_RASTERPORT\n    coord+= vec2(iTime * 25.);\n#   endif//SHOW_ORIGINAL_RASTERPORT\n\n\t// Subpixel pattern.\n#\tifndef SHOW_ORIGINAL_RASTERPORT    \n    col*= vec4(mix(1.2, 1. - mod(coord.x     + coord.y, 3.), .12),\n\t           mix(1.2, 1. - mod(coord.x + 1.+ coord.y, 3.), .12),\n    \t       mix(1.2, 1. - mod(coord.x + 2.+ coord.y, 3.), .12), 1.);\n#   endif//SHOW_ORIGINAL_RASTERPORT    \n\n    // Some HSV correction.\n#\tifndef SHOW_ORIGINAL_RASTERPORT    \n    col = vec4(hsv2rgb(rgb2hsv(col.xyz) * vec3(.95,.95,.75)), 1);\n#   endif//SHOW_ORIGINAL_RASTERPORT    \n\n    // Scanlines & vignetting.\n#\tifndef SHOW_ORIGINAL_RASTERPORT    \n\tcol*= vec4(mix(1.2, 1. - mod(coord.y, 2.), .12));\n    col*= max (.9, 1. - pow(v,5.));\n#   endif//SHOW_ORIGINAL_RASTERPORT    \n       \n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 14043,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/david-canadas-mazo/lff"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Skid Row Lemmings Cracktro Remake by merry^Architect.\n// http://www.pouet.net/prod.php?which=4021 (Pöuet).\n// https://www.youtube.com/watch?v=2YJGHcCkYEw (Youtube).\n// Coded by merry ^ Architect in 2018.\n\n// This cracktro is my favourite of all times (the music by 4mat is probably the actual reason!!!).\n// With this little tribute I wanted to make a homage to all Amiga cracktros that introduced me into the demoscene. \n\n// Buffer A: Mimics the Skid Row Lemmings Cracktro at its original resolution.\n// For those interested, I did the worst approach ever to the UV-to-Amiga coordinates system mapping. Too late to \n// change it now. Further cracktro remakes will do better... :)\n\nconst float kPi = 3.14159265359;\n\n// Default font.\nconst int kDefaultFont[] = int[]\n(\n\t124, 198, 198, 230, 230, 254, 124,  0, // Number 0.\n     56,  24,  24,  56,  56, 254, 254,  0, // Number 1.\n    124, 198,   6, 124, 224, 254, 254,  0, // Number 2.\n    252,   6,   6,  60,  14, 254, 252,  0, // Number 3.\n    198, 198, 198, 126,  14,  14,  14,  0, // Number 4.\n    254, 192, 192, 252,  14, 254, 252,  0, // Number 5.\n    124, 198, 192, 252, 206, 254, 124,  0, // Number 6.\n    252, 254,   6,  14,  14,  14,  14,  0, // Number 7.\n    124, 198, 198, 124, 198, 254, 124,  0, // Number 8.\n    124, 198, 198, 126,  14, 254, 124,  0, // Number 9.\n     16,  16, 254, 124,  56, 108,  68,  0, // Star.\n    124, 198, 198, 254, 230, 230, 230,  0, // A.\n    252, 198, 198, 252, 230, 254, 252,  0, // B.\n    124, 198, 192, 224, 230, 254, 124,  0, // C.\n    252, 198, 198, 230, 230, 230, 252,  0, // D.\n    126, 192, 192, 248, 224, 254, 126,  0, // E.\n    126, 192, 192, 248, 224, 224, 224,  0, // F.\n    124, 198, 192, 238, 230, 254, 124,  0, // G.\n    198, 198, 198, 254, 230, 230, 230,  0, // H.\n    254,  24,  24,  56,  56, 254, 254,  0, // I.\n     12,  12,  12,  14, 206, 254, 124,  0, // J.\n    198, 204, 216, 240, 248, 236, 230,  0, // K.\n    192, 192, 192, 224, 224, 254, 126,  0, // L.\n    238, 254, 214, 230, 230, 230, 230,  0, // M.\n\t252, 198, 198, 230, 230, 230, 230,  0, // N.\n\t124, 198, 198, 230, 230, 254, 124,  0, // O.\n    252, 198, 198, 252, 224, 224, 224,  0, // P.\n\t124, 198, 198, 230, 230, 248, 126,  0, // Q.\n    252, 198, 198, 252, 248, 236, 230,  0, // R.\n    124, 198, 192, 124,   6, 254, 252,  0, // S.   \n    254,  24,  24,  56,  56,  56,  56,  0, // T.\n    198, 198, 198, 230, 230, 254, 124,  0, // U.\n    198, 198, 198, 230, 230, 124,  56,  0, // V.\n    198, 198, 198, 214, 254, 238, 198,  0, // W.    \n    198, 198, 108,  56, 124, 230, 230,  0, // X.\n    198, 198, 198, 126,   6, 254, 252,  0, // Y.\n    254,  12,  24, 112, 224, 254, 254,  0, // Z.\n      0,   0,   0,   0,   0,  48,  48,  0, // Period.\n      0,   0,   0,  60,  60,   0,   0,  0, // Hyphen.\n     56,  56,  56,  56,   0,  56,  56,  0, // Exclamation sign.\n      0,   0,   0,   0,   0,  48, 112,112, // Comma.\n    108, 254, 254, 254, 124,  56,  16,  0, // Heart.\n      0,   0,   0,   0,   0,   0,   0,  0, // Space.\n      0\n);//kDefaultFont.\n\nconst float kCreditsSprite[] = float[]\n(\n    .9,.6,.0,.0,.0,.6,.0,.0,.9,.6,.3,.0,.9,.6,.3,.0,.0,.9,.6,.3,.0,.0,.9,.6,.0,.6,.0,.0,.0,.0,.0,.9,.6,.0,.0,.0,.9,.6,.3,.0,.0,.0,.9,.6,.3,.0,.0,.9,.6,.3,.0,.0,.0,.9,.6,.3,.3,.0,.9,.6,.0,.6,.0,.9,.6,.0,.9,.6,.3,.3,.0,.0,.9,.6,.3,.0,.0,.9,.6,.3,.3,.0,.9,.6,.3,.3,\n    .6,.3,.3,.0,.3,.3,.0,.9,.3,.0,.0,.0,.6,.3,.0,.3,.0,.6,.3,.0,.3,.0,.6,.3,.0,.3,.0,.0,.0,.0,.9,.3,.0,.3,.0,.9,.3,.0,.0,.0,.0,.0,.6,.3,.0,.3,.0,.6,.3,.0,.3,.0,.9,.3,.0,.0,.0,.0,.6,.3,.0,.3,.0,.6,.3,.0,.0,.3,.3,.0,.0,.9,.3,.0,.0,.0,.9,.3,.0,.0,.0,.0,.0,.3,.3,.0,\n    .3,.3,.3,.3,.3,.3,.0,.6,.3,.3,.3,.0,.3,.3,.3,.0,.0,.3,.3,.3,.0,.0,.3,.3,.3,.3,.0,.0,.0,.0,.6,.3,.0,.3,.0,.6,.3,.3,.0,.0,.0,.0,.3,.3,.3,.3,.0,.3,.3,.3,.0,.0,.6,.3,.0,.0,.0,.0,.3,.3,.3,.3,.0,.3,.3,.0,.0,.3,.3,.0,.0,.6,.3,.3,.0,.0,.6,.3,.0,.0,.0,.0,.0,.3,.3,.0,\n    .3,.3,.0,.3,.0,.3,.0,.3,.3,.0,.0,.0,.3,.3,.0,.3,.0,.3,.3,.0,.3,.0,.0,.3,.3,.0,.0,.0,.0,.0,.3,.3,.0,.3,.0,.3,.3,.0,.0,.0,.0,.0,.3,.3,.0,.3,.0,.3,.3,.0,.3,.0,.6,.3,.0,.0,.0,.0,.3,.3,.0,.3,.0,.3,.3,.0,.0,.3,.3,.0,.0,.3,.3,.0,.0,.0,.6,.3,.0,.0,.0,.0,.0,.3,.3,.0,\n    .3,.6,.0,.0,.0,.6,.0,.3,.3,.3,.6,.0,.3,.6,.0,.6,.0,.3,.6,.0,.6,.0,.0,.3,.6,.0,.0,.0,.0,.0,.0,.3,.6,.0,.0,.3,.6,.0,.0,.0,.0,.0,.3,.6,.0,.6,.0,.3,.6,.0,.6,.0,.0,.3,.3,.3,.6,.0,.3,.6,.0,.6,.0,.3,.3,.0,.0,.3,.6,.0,.0,.3,.3,.3,.6,.0,.0,.3,.3,.3,.6,.0,.0,.3,.6,.0\n);//kCreditsSprite.\n\n#define N0  0\n#define N1  1\n#define N2  2\n#define N3  3\n#define N4  4\n#define N5  5\n#define N6  6\n#define N7  7\n#define N8  8\n#define N9  9\n#define XX 10 // Star.\n#define A  11\n#define B  12\n#define C  13\n#define D  14\n#define E  15\n#define F  16\n#define G  17\n#define H  18\n#define I  19\n#define J  20\n#define K  21\n#define L  22\n#define M  23\n#define N  24\n#define O  25\n#define P  26\n#define Q  27\n#define R  28\n#define S  29\n#define T  30\n#define U  31\n#define V  32\n#define W  33\n#define X  34\n#define Y  35\n#define Z  36\n#define DT 37 // Period.\n#define HP 38 // Hyphen.\n#define EX 39 // Exclamation sign.\n#define CM 40 // Comma.\n#define HT 41 // Heart.\n#define _  42 // Space.\n\n#define\tCHR_WIDTH   8\n#define CHR_HEIGHT  8\n#define TXT_WIDTH\t(SCR_WIDTH  / CHR_WIDTH )\n#define TXT_HEIGHT  (SCR_HEIGHT / CHR_HEIGHT)\n#define XCR_SPEED\t80\n#define XCR_MIN_Y   11\n#define XCR_MAX_Y   28\n#define VAR_Y_POS   (SCR_HEIGHT + CHR_HEIGHT + CHR_HEIGHT)\n#define NUM_STARS\t256\n\nbool charPixel(ivec2 pixelIndex, int charIndex) { return bool(kDefaultFont[charIndex * CHR_HEIGHT + (pixelIndex.y % CHR_HEIGHT)] & (1 << (8 - (pixelIndex.x % CHR_WIDTH)))); }\n\n// The static text that appears at the top of the screen character by character.\nconst int kStaticText[] = int[]\n(\n    _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , XX, _ , A , R , C , H , I , T , E , C , T , DT, _ , XX, _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Line 0 | * ARCHITECT. * \n    _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , P , R , E , S , E , N , T , S ,\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Line 1 | PRESENTS\n\t_ , _ , _ , _ , _ , _ , _ , A , N , O , T , H , E , R , _ , L , I , G , H , T , S , P , E , E , D , _ , R , E , L , E , A , S , E , _ , _ , _ , _ , _ , _ , _ , // Line 2 | ANOTHER LIGHT_ EED RELEASE\n\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Line 3 | <empty>\n    _ , _ , _ , S , K , I , D , _ , R , O , W , _ , L , E , M , M , I , N , G , S , _ , C , R , A , C , K , T , R , O , _ , R , E , M , A , K , E , DT, _ , _ , _ , // Line 4 | SKID ROW LEMMINGS CRACKTRO REMAKE\n \t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Line 5 | <empty>\n    _ , _ , _ , D , O , N , E , _ , B , Y , _ , M , E , R , R , Y , _ , O , F , _ , A , R , C , H , I , T , E , C , T , _ , I , N , _ , N2, N0, N1, N8, _ , _ , _ , // Line 6 | DONE BY MERRY FROM ARCHITECT IN 2018\n    C , H , E , C , K , _ , S , H , A , D , E , R , T , O , Y , DT, C , O , M , _ , F , O , R , _ , M , O , R , E , _ , F , A , N , C , Y , _ , S , T , U , F , F , // Line 7 | CHECK SHADERTOY.COM FOR MORE FANCY STUFF\n    _ , _ , _ , A , N , D , _ , O , U , R , _ , F , O , R , T , H , C , O , M , I , N , G , _ , P , R , O , D , U , C , T , I , O , N , S , DT, DT, DT, _ , _ , _ , // Line 8 | AND OUR FORTHCOMING PRODUCTIONS...\n    _ , _ , _ , S , E , E , _ , Y , O , U , _ , L , A , T , E , R , _ , I , N , _ , A , N , O , T , H , E , R , _ , I , N , T , R , O , _ , EX, EX, EX, _ , _ , _   // Line 9 | SEE YOU LATER IN ANOTHER INTRO !!!\n);//kStaticText.\n\n// The dynamic text that scrolls right to left using a sinus scroller.\nconst int kScrollingText[] = int[]\n(\n\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , \n\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , \n\tXX, _ , A , R , C , H , I , T , E , C , T , _ , XX,\n\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 0: * ARCHITECT *\n    HP, _ , T , H , E , _ , L , E , A , D , I , N , G , _ , F , O , R , C , E , _ , HP, \n\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 1: - THE LEADING FORCE - \n    I , S , _ , B , A , C , K , _ , O , N , _ , Y , O , U , R , _ , S , C , R , E , E , N , _ , W , I , T , H ,\n\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 2: IS BACK ON YOUR SCREEN WITH\n    XX, _ , S , K , I , D , _ , R , O , W , _ , L , E , M , M , I , N , G , S , _ , C , R , A , C , K , T , R , O , _ , \n    R , E , M , A , K , E , _ , XX, \n\t_ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 3: SKID ROW LEMMINGS CRACKTRO REMAKE\n    C , O , D , E , D , _ , B , Y , _ , M , E , R , R , Y , _ , O , F , _ ,\n    A , R , C , H , I , T , E , C , T , _ , I , N , _ , T , H , E , _ , Y , E , A , R , _ , O , F , _ , \n    N2, N0, N1, N8, _ , EX, EX, EX,\n    _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 4: CODED BY MERRY FROM ARCHITECT IN THE YEAR OF 2018\n\n    O , R , I , G , I , N , A , L , _ , C , O , D , E , _ , B , Y , _ , D , A , N , _ , O , F , _ , \n    A , N , A , R , C , H , Y , _ , XX, _ ,\n    O , R , I , G , I , N , A , L , _ , M , U , S , I , C , _ , M , O , D , U , L , E , _ ,\n    B , Y , _ , N4, M , A , T ,\n    _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 5: ORIGINAL CODE BY DAN OF ANACHY * ORIGINAL MUSIC MODULE BY 4MAT\n    I , F , _ , Y , O , U , _ , W , A , N , T , _ , T , O , _ , E , N , J , O , Y , _ , \n    T , H , E , _ , U , L , T , I , M , A , T , E , _ , N3, D , _ , \n    E , X , P , E , R , I , E , N , C , E , _ , I , N , _ , Y , O , U , R , _ , B , R , O , W , S , E , R , _ , \n    V , I , S , I , T , _ , S , H , A , D , E , R , T , O , Y , DT, C , O , M , _ , EX, EX, EX,\n    _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 6: IF YOU WANT TO ENJOY THE ULTIMATE 3D EXPERIENCE IN YOUR BROWSER VISIT SHADERTOY.COM !!!\n    G , R , E , E , T , I , N , G , S , _ , T , O , _ , A , L , L , _ , O , U , R , _ , F , R , I , E , N , D , S , _ ,\n    A , R , O , U , N , D , _ , T , H , E , _ , G , L , O , B , E , _ , EX, EX, EX,\n    _ , _ , _ , _ , _ , _ , _ , \n    HT, _ , A , L , C , A , T , R , A , Z , _ , HT, _ ,\n    A , N , A , R , C , H , Y , _ , HT, _ ,\n    A , N , G , E , L , S , _ , HT, _ ,\n    A , N , T , H , R , O , X , _ , HT, _ ,\n    B , A , M , I , G , A , _ , S , E , C , T , O , R , _ , O , N , E , _ , HT, _ ,\n    C , R , Y , S , T , A , L , _ , HT, _ ,\n    F , A , I , R , L , I , G , H , T , _ , HT, _ ,\n    H , O , R , I , Z , O , N , _ , HT, _ ,\n    L , E , M , O , N , DT, _ , HT, _ ,\n    M , E , L , O , N , _ , D , E , Z , I , G , N , _ , HT, _ ,\n    P , A , R , A , D , O , X , _ , HT, _ ,\n    P , A , R , A , N , O , I , M , I , A , _ , HT, _ ,\n    Q , U , A , R , T , E , X , _ , HT, _ ,\n    R , A , Z , O , R , _ , N1, N9, N1, N1, _ , HT, _ ,\n    R , E , D , _ , S , E , C , T , O , R , CM, _ , I , N , C , DT, _ , HT, _ ,\n    S , A , N , I , T , Y , _ , HT, _ ,\n    S , C , O , O , P , E , X , _ , HT, _ ,\n    S , K , I , D , _ , R , O , W , _ , HT, _ ,\n    S , U , P , P , L , E , X , _ , HT, _ ,\n    T , H , E , _ , S , I , L , E , N , T , S , _ , HT, _ ,\n    T , R , I , S , T , A , R , _ , HT, _ ,\n    V , I , S , I , O , N , _ , F , A , C , T , O , R , Y ,_ , HT , _ ,\n    _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 7: GREETINGS TO ALL OUR FRIENDS AROUND THE GLOBE !!!\n\tI , F , _ , Y , O , U , _ , U , S , E , _ , T , H , I , S , _ , \n    P , I , E , C , E , _ , O , F , _ ,\n    S , O , F , T , W , A , R , E , _ , C , A , L , L , E , D , _ , \n    S , H , A , D , E , R , T , O , Y , DT, C , O , M , _ ,\n    P , L , E , A , S , E , _ , C , O , N , S , I , D , E , R , _ , \n    C , O , N , T , R , I , B , U , T , I , N , G , _ , \n    T , O , _ , I , T , _ , O , N , _ , P , A , T , R , E , O , N , \n    _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , // Text 8: IF YOU USE THIS PIECE OF SOFTWARE CALLED SHADERTOY.COM PLEASE CONSIDER CONTRIBUTING TO IT ON PATREON\n    DT, DT, DT, _ ,\n    S , C , R , O , L , L , _ , R , E , S , T , A , R , T , S , _ ,\n    DT, DT, DT \t\t\t\t\t\t\t\t\t\t\t\t// Text 9: ... SCROLL RESTARTS ...\n);//kScrollingText.\n\nconst int kStaticTextScanColors[] = int[]\n(\n\t140,  0,  0,173, 32, 33,206, 69, 66,238,101, 99,206, 69, 66,173, 32, 33,140,  0,  0,0,0,0, // Red.\n\t140, 69,  0,173,101, 33,206,138, 66,238,170, 99,206,138, 66,173,101, 33,140, 69,  0,0,0,0, // Orange.\n    140,138,  0,173,170, 33,206,206, 66,238,239, 99,206,206, 66,173,170, 33,140,138,  0,0,0,0, // Yellow.\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0, // Black.\n      0,138,  0, 33,170, 33, 66,206, 66, 99,239, 99, 66,206, 66, 33,170, 33,  0,138,  0,0,0,0, // Green.\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,0,0,0, // Black.\n      0, 69,140, 33,101,173, 66,138,206, 99,170,238, 66,138,206, 33,101,173,  0, 69,140,0,0,0, // Light blue.\n      0,  0,140, 33, 32,173, 66, 69,206, 99,101,238, 66, 69,206, 33, 32,173,  0,  0,140,0,0,0, // Dark  blue.\n     66,  0,140, 99, 32,173,140, 69,206,173,101,238,140, 69,206, 99, 32,173, 66,  0,140,0,0,0, // Magenta.\n    140,  0,140,173, 32,173,206, 69,206,238,101,238,206, 69,206,173, 32,173,140,  0,140,0,0,0  // Pink.        \n);//kStaticTextScanColors.\n\nfloat rand(vec2 uv) { return fract(sin(dot(uv.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\n// Palette function by iq, see more at https://www.shadertoy.com/view/ll2GD3.\nvec3  pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) { return a + b*cos(6.28318*(c*t + d)); }\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    \n    float tTime = floor(iTime/.02)*.02; // Drops down the perceived frame rate.\n    vec2  uv  = fragCoord / iResolution.xy;\n\tvec4  col = vec4(0); \n    ivec2 wx  = ivec2(fragCoord.x, fragCoord.y); // Local fragment coordinate.\n\tint   chi = int(floor(tTime * 20.));// Static text character index.\n\n    // Writes out the starfield state.\n\tvec4 sfx = vec4(0);\n    if ((wx.y == VAR_Y_POS) && (wx.x < NUM_STARS))\n\t{\n    \tif (0 == iFrame)\n\t    {//\tInitializes starfield data.\n\t\t\tcol = vec4(rand(uv), rand(uv + fragCoord.xx), float(wx.x) / float(NUM_STARS), 0);\n    \t}\n\t    else\n    \t{// Updates the starfield data.\n            vec4 displacement = vec4(sin(tTime * 1.0/0.9) * .01, sin(tTime * 1.0/1.32) * .02, sin(iTime * .25) * .01 ,0.);\n\t\t\tcol = texture(iChannel0, uv);\n\t\t\tcol+= displacement * clamp(col.z, .3, 1.);\n\t\t\tcol = mod(col,1.);            \n\t    }\n\t}\n\t\n    // Oldskool way of \"starfielding\". Really dirty but didn't want an actual 3D approach.\n    if ((wx.y < (SCR_HEIGHT - CHR_HEIGHT)) && (wx.x < SCR_WIDTH))\n    {\n        for (int i = 0; i < NUM_STARS; ++i)\n\t\t{\n            vec2 ruv = vec2(float(i) / iResolution.x, float(VAR_Y_POS + 1) / iResolution.y);\n\t\t\tvec4 rstate = texture(iChannel0, ruv);\n\n            //\tSimulates depth.\n            rstate.xy = rstate.xy * 2.  - 1. ;\n\t\t\trstate.xy*= clamp(rstate.z,.7,2.);\n\t\t\trstate.xy = rstate.xy * .5  + .5 ;\n\t\t\tif ((int(rstate.x * float(SCR_WIDTH)) == wx.x) && (int(rstate.y*float(SCR_HEIGHT)) == wx.y))\n\t\t\t{\n\t\t\t    sfx = mix(vec4(.1), vec4(1), pow(rstate.z, 2.5));\n\t\t\t    break;\n\t\t\t}            \n\t\t}\n    }\n    \n    // Top Copper-like scanline.\n\tif ((wx.x < SCR_WIDTH) && (wx.y == 1))\n\t    col = vec4(pal(uv.x + tTime*.75, vec3(.5), vec3(5), vec3(1), vec3(.0,.33,.67)), 1);\n    \n    // Static text.\n    wx.y +=-8;    \n\tif ((wx.y >= 0) && (wx.y < (CHR_HEIGHT * kStaticText.length() / TXT_WIDTH)))\n    {\n\t\tint x = wx.x / CHR_WIDTH ;\n\t\tint y = wx.y / CHR_HEIGHT;\n        int i = y * TXT_WIDTH + x;\n        \n        if ((x < TXT_WIDTH) && (y < TXT_HEIGHT) && (chi > i))\n        {\n            vec4 mul = mix(vec4(1), vec4(\n\t\t\t    kStaticTextScanColors[wx.y*3    ],\n\t\t\t    kStaticTextScanColors[wx.y*3 + 1],\n\t\t\t    kStaticTextScanColors[wx.y*3 + 2],\n\t\t\t256)/ 256., min(1.,float(chi - i) * (tTime * 10.) - float(chi)));\n\t\t\tcol = vec4(charPixel(wx, kStaticText[i])) * mul;\n        }\n    }\n\n    // Scrolling text buffer.\n    if ((wx.y >= SCR_HEIGHT) && (wx.y < SCR_HEIGHT+CHR_HEIGHT))\n    {\n\t    ivec2 zx = wx;\n        zx.x  = zx.x + int(tTime * float(XCR_SPEED));\n\t\tint x = zx.x / CHR_WIDTH ;\n\t\tint y = (zx.y) / CHR_HEIGHT - CHR_HEIGHT * TXT_HEIGHT;\n        if (((int(fragCoord.x) / CHR_WIDTH) < TXT_WIDTH) && (y < TXT_HEIGHT))\n        \tcol = vec4(charPixel(ivec2(mod(vec2(zx), vec2(CHR_WIDTH, 0))), kScrollingText[x % kScrollingText.length()]));\n    }    \n\n    // Scrolling remap to the viewport area.\n    if ((wx.x < SCR_WIDTH) && (wx.y >= CHR_HEIGHT*XCR_MIN_Y) && (wx.y <= CHR_HEIGHT*XCR_MAX_Y+CHR_HEIGHT))\n    {\n\t\tfloat vv  = ((fragCoord.y) - float(CHR_HEIGHT*XCR_MIN_Y-CHR_HEIGHT)) / float((XCR_MAX_Y - XCR_MIN_Y) * CHR_HEIGHT);\n\t\tvec4  mul = pow(vec4(.4, 0, 0, 1) * (     sin(vv * kPi * 2.)), vec4(1.0))\n\t              + pow(vec4(.6, 0, 0, 1) * (1. - sin(vv * kPi * 2.)), vec4(0.7))\n            \t  + pow(vec4(.6,.4,.2, 1) * (1. - sin(vv * kPi * 2.)), vec4(1.5));\n\n        vec2 fc   = fragCoord;\n\t\tfc.x*=.5;\n\t\tfc.y = float(SCR_HEIGHT + CHR_HEIGHT) \n\t\t     + ((fragCoord.y) - float(CHR_HEIGHT*XCR_MIN_Y+CHR_HEIGHT))*.5 \n             + (sin(tTime + tTime + tTime + tTime - fragCoord.x / float(SCR_WIDTH) * kPi * 1.5) * .25 - .25) * float((XCR_MAX_Y - XCR_MIN_Y - 1) * CHR_HEIGHT);\n\t\tif (fc.y >= float(SCR_HEIGHT+ CHR_HEIGHT) && fc.y <= float(SCR_HEIGHT + CHR_HEIGHT+ CHR_HEIGHT))\n        {        \n\t\t\tfc.y  = fc.y;\n\t\t\tcol   = texture(iChannel0, fc / iResolution.xy) * mul;\n        }\n    }\n\n    // Bottom Copper-like scanline.\n    wx.y += 8;\n\tif ((wx.x < SCR_WIDTH) && (wx.y == (SCR_HEIGHT - 1 - 8)))\n\t    col = vec4(pal(uv.x - tTime*.75, vec3(.5), vec3(5), vec3(1), vec3(.0,.33,.67)), 1);\n    \n    // Credits sprite.\n    wx.y-=SCR_HEIGHT - CHR_HEIGHT + 2;\n    wx.x-=SCR_WIDTH  - kCreditsSprite.length() / 4;\n    int limitMin     = wx.x;\n    \n\tif ((wx.y >= 0) && (wx.y < 5) && (wx.x >= 0) && (wx.x < kCreditsSprite.length()/5))\n    \tcol = vec4(kCreditsSprite[wx.y*kCreditsSprite.length()/5 + wx.x]);\n\n    if (wx.y < 0)\n    {// Mixes with the starfield.\n        col = mix(sfx, col, col.a);\n    }\n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Skid Row Lemmings Cracktro Remake by merry^Architect.\n// http://www.pouet.net/prod.php?which=4021 (Pöuet).\n// https://www.youtube.com/watch?v=2YJGHcCkYEw (Youtube).\n// Coded by merry ^ Architect in 2018.\n\n// This cracktro is my favourite of all times (the music by 4mat is probably the actual reason!!!).\n// With this little tribute I wanted to make a homage to all Amiga cracktros that introduced me into the demoscene. \n\n// Common: shared definitions.\n\n#define SCR_WIDTH  320 // Amiga viewport width , in pixels.\n#define SCR_HEIGHT 256 // Amiga viewport height, in pixels.\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Skid Row Lemmings Cracktro Remake by merry^Architect.\n// http://www.pouet.net/prod.php?which=4021 (Pöuet).\n// https://www.youtube.com/watch?v=2YJGHcCkYEw (Youtube).\n// Coded by merry ^ Architect in 2018.\n\n// This cracktro is my favourite of all times (the music by 4mat is probably the actual reason!!!).\n// With this little tribute I wanted to make a homage to all Amiga cracktros that introduced me into the demoscene. \n\n// Buffer B: Remaps the 320x256, 4:3 screen ratio source image to the destination viewport.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv  = fragCoord / iResolution.xy;\n    uv.x =(uv.x - ((float(SCR_HEIGHT) / float(SCR_WIDTH))- (iResolution.y / iResolution.x))*.5) * 4./3.;\n    uv.x = uv.x *   float(SCR_WIDTH ) / iResolution.x;\n    uv.y = 1. - uv.y;\n    uv.y = uv.y *   float(SCR_HEIGHT) / iResolution.y;\n    \n    if (uv.x >= 0.)\n    {\n        fragColor = floor(texture(iChannel0, uv)*16.)/16.;\n\t}\n    else\n    {\n        fragColor = vec4(0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Skid Row Lemmings Cracktro Remake by merry^Architect.\n// http://www.pouet.net/prod.php?which=4021 (Pöuet).\n// https://www.youtube.com/watch?v=2YJGHcCkYEw (Youtube).\n// Coded by merry ^ Architect in 2018.\n\n// This cracktro is my favourite of all times (the music by 4mat is probably the actual reason!!!).\n// With this little tribute I wanted to make a homage to all Amiga cracktros that introduced me into the demoscene. \n\n// Buffer C: Remaps the 320x256, 4:3 screen ratio source image to the destination viewport.\n// Same than Buffer B. Due to a Shadertoy limitation, it is not possible to use the same texture twice in a pass with\n// different sampler filtering. Due to this, Buffers B and C prepares the exact same output to be processed \n// as both mipmapped and nearest-neighbor samplers in Image.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv  = fragCoord / iResolution.xy;\n    uv.x =(uv.x - ((float(SCR_HEIGHT) / float(SCR_WIDTH))- (iResolution.y / iResolution.x))*.5) * 4./3.;\n    uv.x = uv.x *   float(SCR_WIDTH ) / iResolution.x;\n    uv.y = 1. - uv.y;\n    uv.y = uv.y *   float(SCR_HEIGHT) / iResolution.y;\n    \n    if (uv.x >= 0.)\n    {\n        fragColor = floor(texture(iChannel0, uv)*16.)/16.;\n\t}\n    else\n    {\n        fragColor = vec4(0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}