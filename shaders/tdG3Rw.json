{
    "Shader": {
        "info": {
            "date": "1571261730",
            "description": "My attempt at how blood rain on a glass window would look like. ",
            "flags": 0,
            "hasliked": 0,
            "id": "tdG3Rw",
            "likes": 46,
            "name": "Raining Blood",
            "published": 3,
            "tags": [
                "refraction",
                "fog",
                "glass",
                "rain",
                "blood",
                "refract",
                "raindrops"
            ],
            "usePreview": 1,
            "username": "piyushslayer",
            "viewed": 3014
        },
        "renderpass": [
            {
                "code": "/**\n\"Raining Blood, From a lacerated sky. Bleeding its horror, creating my\nstructure now I shall reign in blood.\" - Slayer\n\nThis is inspired by bigwings' heartfelt (https://www.shadertoy.com/view/ltffzl)\n*/\n\n#define PI 3.141592653589793\n\nfloat hash21(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) / float(0xffffffffU);\n}\n\nvec3 hash13(float p) {\n   vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat rainDrops(vec2 st, float time, float size)\n{\n    vec2 uv = st * size;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 gridUv = fract(uv) - .5; // grid\n   \tvec2 id = floor(uv);\n    vec3 h = (hash13(id.x * 467.983 + id.y * 1294.387) - .5) * .8;\n    vec2 dropUv = gridUv - h.xy;\n    vec4 noise = textureLod(iChannel1, id * .05, 0.);\n    float drop = smoothstep(.25, 0., length(dropUv)) *\n        max(0., 1. - fract(time * (noise.b + .1) * .2 + noise.g) * 2.);\n    return drop;\n}\n\nvec2 wigglyDrops(vec2 st, float time, float size)\n{\n    vec2 wigglyDropAspect = vec2(2., 1.);\n    vec2 uv = st * size * wigglyDropAspect;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.y += time * .23;\n\n    vec2 gridUv = fract(uv) - .5; // rectangular grid\n    vec2 id = floor(uv);\n    \n    float h = hash21(id);\n    time += h * 2. * PI;\n    float w = st.y * 10.;\n    float dx = (h - .5) * .8;\n    dx += (.3 - abs(dx)) * pow(sin(w), 2.) * sin(2. * w) *\n        pow(cos(w), 3.) * 1.05; // wiggle\n    float dy = -sin(time + sin(time + sin(time) * .5)) * .45; // slow down drop before continuing falling\n    dy -= (gridUv.x - dx) * (gridUv.x - dx);\n    \n    vec2 dropUv = (gridUv - vec2(dx, dy)) / wigglyDropAspect;\n    float drop = smoothstep(.06, .0, length(dropUv));\n    \n    vec2 trailUv = (gridUv - vec2(dx, time * .23)) / wigglyDropAspect;\n    trailUv.y = (fract((trailUv.y) * 8.) - .5) / 8.;\n    float trailDrop = smoothstep(.03, .0, length(trailUv));\n    trailDrop *= smoothstep(-.05, .05, dropUv.y) * smoothstep(.4, dy, gridUv.y) *\n        \t(1.-step(.4, gridUv.y));\n    \n    float fogTrail = smoothstep(-.05, .05, dropUv.y) * smoothstep(.4, dy, gridUv.y) *\n\t\t\tsmoothstep(.05, .01, abs(dropUv.x)) * (1.-step(.4, gridUv.y));\n    \n    return vec2(drop + trailDrop, fogTrail);\n}\n\nvec2 getDrops(vec2 st, float time)\n{\n    vec2 largeDrops = wigglyDrops(st, time * 2., 1.6);\n    vec2 mediumDrops = wigglyDrops(st + 2.65, (time + 1296.675) * 1.4, 2.5);\n    vec2 smallDrops = wigglyDrops(st - 1.67, time - 896.431, 3.6);\n    float rain = rainDrops(st, time, 20.);\n    \n    vec2 drops;\n    drops.y = max(largeDrops.y, max(mediumDrops.y, smallDrops.y));\n    drops.x = smoothstep(.4, 2., (1. - drops.y) * rain + largeDrops.x +\n                          mediumDrops.x + smallDrops.x); // drops kinda blend together\n\n    return drops;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord / iResolution.xy;\n    float time = mod(iTime + 100., 7200.);\n    \n    vec2 drops = getDrops(st, time);\n    vec2 offset = drops.xy;\n    float lod = (1. - drops.y) * 4.8;\n    \n    // This is kinda expensive, would love to use a cheaper method here.\n    vec2 dropsX = getDrops(st + vec2(.001, 0.), time);\n    vec2 dropsY = getDrops(st + vec2(0., .001), time);\n    vec3 normal = vec3(dropsX.x - drops.x, dropsY.x - drops.x, 0.);\n    normal.z = sqrt(1. - normal.x * normal.x - normal.y * normal.y);\n    normal = normalize(normal);\n    \n    float lightning = sin(time * sin(time * 30.)); // screen flicker\n    float lightningTime = mod(time, 10.) / 9.9;\n   \tlightning *= 1. - smoothstep(.0, .1, lightningTime)\n        + smoothstep(.9, 1., lightningTime); // lightning flash mask\n    \n\tvec3 col = textureLod(iChannel0, st+normal.xy * 3., lod).rgb;\n    col *= (1. + lightning);\n    \n    col *= vec3(1., .8, .7); // slight red-ish tint\n    col += (drops.y > 0. ? vec3(.5, -.1, -.15)*drops.y : vec3(0.)); // bloody trails\n    col *= (drops.x > 0. ? vec3(.8, .2, .1) * (1.-drops.x) : vec3(1.)); // blood colored drops\n    \n    col = mix(col, col*smoothstep(.8, .35, length(st - .5)), .6); // vignette\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}