{
    "Shader": {
        "info": {
            "date": "1720477014",
            "description": "Gauss\nNormalized Gauss\nModified Gauss\nInverse Modified Gauss",
            "flags": 0,
            "hasliked": 0,
            "id": "433XRs",
            "likes": 1,
            "name": "More Spectral Colour Schemes",
            "published": 3,
            "tags": [
                "spectrum",
                "rgb",
                "wavelength",
                "spectral",
                "visiblelight"
            ],
            "usePreview": 0,
            "username": "jafam",
            "viewed": 68
        },
        "renderpass": [
            {
                "code": "vec3 gauss(vec3 x) {\n    return exp2(-x*x);\n}\nvec3 invgauss(vec3 x) {\n    return sqrt(-log2(abs(x)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    const vec2 grid = vec2(1.0,4.0);\n    vec2 gp = grid*(p);\n    vec2 lp = fract(gp);\n    ivec2 index = ivec2(floor(gp));\n    vec3 peak = vec3(1.0,3.0,5.0)/6.0;\n    const float FWHM = 2.0/6.0;\n    vec3 hue = (lp.x-peak)/FWHM;\n    vec3 g = gauss(hue);\n    vec3 ng = normalize(g);\n    vec3 mg = log2(ng+1.0);\n    vec3 ig = invgauss(hue);\n    vec3 col;\n    switch (index.y) {\n        case 3: col = g;\n        break;\n        case 2: col = ng;\n        break;\n        case 1: col = mg;\n        break;\n        case 0: col = ig;\n        break;\n    }\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}