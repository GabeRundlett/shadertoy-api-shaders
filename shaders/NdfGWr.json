{
    "Shader": {
        "info": {
            "date": "1615752213",
            "description": "tunel circular--falla",
            "flags": 8,
            "hasliked": 0,
            "id": "NdfGWr",
            "likes": 0,
            "name": "tunel circular--falla",
            "published": 3,
            "tags": [
                "tunelcircularfalla"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n// fallo la camara en el giro dentro de cilindros\n//// camera failed to rotate within cylinders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\n\n \nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\nmat2 rot2D(float a)\n{\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n    \n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    res =opU3(res, vec3(planeDist1,-1.0,5.0)); //inf\n\n   \n    float separacion=15.0;\n    float radioA=20.0;\n    float radioB=radioA+separacion;\n    float radioC=radioB+separacion;\n    \n    float alto=10.0;\n    \n    float dc1= sdCylinderXZ(p- vec3(0.0,0.0,0.0), vec2(radioA,alto) );\n    float dc2= sdCylinderXZ(p- vec3(0.0,0.0,0.0), vec2(radioB,alto+.5) );\n    float dc3= sdCylinderXZ(p- vec3(0.0,0.0,0.0), vec2(radioC,alto) );\n    \n    float dif;\n    dif= differenceSDF( dc3,dc2);\n    res =opU3(res, vec3(dc1,-1.0,6)); \n    res =opU3(res, vec3(dif,-1.0,6.0)); \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro) \n{\n    vec3 l = lp - p;\n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = normal;\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    vec3 lin = vec3(0.2);\n    lin += 1.0*dif*vec3(1, .97, .85);\n    lin += 2.5*spe*vec3(1, .97, .85)*dif;\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    return lin*atten;\n}\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\n\n\n\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    \n    float marchCount = 0.0;\n    vec3 p;\n    \n    #define DISTANCE_BIAS 0.75\n    float minDist = 999.0; \n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        \n        \n         if ( abs(dS.x)<MIN_DIST)\n        {\n            mObj.hitbln = true; \n            minDist = abs(dO);\n            break; \n        }\n        \n        \n        if(dO>MAX_DIST)\n        { mObj.hitbln = false; \n          minDist = min(minDist, dO);\n          break; \n        }\n        \n        \n        //dO += dS.x*DISTANCE_BIAS;  //caso especial\n        dO += dS.x;\n        marchCount++;\n         \n    }\n    \n    mObj.dist = minDist;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n//-------------------------------------------\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    float intensity=1.0;\n     vec3 result;\n     \n    result = lightingv3( nor, p, plight_pos,  rd,ro)*colobj*6.0;\n     \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\nvec2 getSphereUV(in vec3 pos)\n{\n    \n    //vec3(20.0,20.0,25.0)\n    ////vec3 posLocal = pos - SpherePos;\n    vec3 SpherePos=vec3(20.0,20.0,25.0);\n    vec3 posLocal = pos - SpherePos;\n    //vec3 posLocal = pos ;\n    float SphereRadius=20.0;\n    //经纬角度\n    float longitudeAngle = atan(posLocal.x/posLocal.z)/3.1415926*180.0;\n    float latitudeAngle = acos(posLocal.y/SphereRadius)/3.1415926*180.0;\n    \n    return vec2(longitudeAngle,latitudeAngle);\n}\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if(id_material== 1.0 )\n    {\n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c;\n    }\n    \n\tif(id_material== 2.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n\tif(id_material== 3.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n\n    if (id_material==4.0)\n    { // nothing hit: background gradient\n     return vec3(0.2, 0.2, 0.2) * (-mObj.uv.y+1.2);\n    }\n    \n    if (id_material==5.0)\n    {\n        float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n\t    return vec3( clamp(d,0.0,1.0) );\n    }\n    \n    \n    if (id_material==6.0)\n    {\n        float escala=0.125;\n        vec2 r2= getSphereUV( p);\n        \n        float d = mod(floor(r2.x*escala)+floor(r2.y*escala*1.0),2.0);\n\t    return vec3( clamp(d,0.0,1.0) )*vec3(1.0,0.2,0.2);\n    }\n    \n    \n    \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\n\nvec3 getSkyColA(vec3 rd) \n{\n    float t = (rd.x + 1.0) / 2.0;\n    return vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n}\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(5.0, 3.0, 5.0 );  light_color1 =1.25*vec3( 1.0 ,0.1,0.1);\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 =1.25* vec3( .1 ,0.1,1.0); //light_color1; //vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n    float radio=22.0;\n    vec3 ro=vec3(0.0+radio*cos(t),3.0,0.0+radio*sin(t));\n    \n    vec3 rd=normalize(vec3(uv,1.0));\n    vec3 rdpos=rd;\n     \n    rd.xz*= rot2D(radians(iTime*10.0));\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    if(mObj.hitbln) \n    {\n        vec3 p = (ro + rd * d ); \n        mObj.p=p;\n        mObj.dist =d;\n        vec3 nor=mObj.normal;\n\n        vec3 colobj;\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n        result/=1.25;\n        col= result*dif1;\n\n        //sugerencia por dean_the_coder,\n        //col *= 1.0 - pow(d / 100.0, 1.5);\n        col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n        col = pow(col, vec3(1.0/2.2));\n    \n    }\n    else if(d>MAX_DIST)\n    //col= getSkyColB(rd, uv, vec3(0.0));\n     col= getSkyColA(rd);\n    \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow;\n    bool hitbln;\n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n#define COLORSKY vec3(0.1, 0.1, 0.6)\n\n\n\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.) //31\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//modificado por jorge flores p.  -9-mar-2020\n\n//Created by nabr in 2019-06-05\n//https://www.shadertoy.com/view/WlSGWw\n\n\n// nabr\n// https://www.shadertoy.com/view/WlSGWw\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\nvec2 synthv2( float t)\n{\n// --------- SYNTH\n    int t1=int(t) % 4;\n\tvec2 s = sin(t * mat4x2(496, 656, 696, 376, 776, 456, 656, 276)[t1]) - .5;\n    \n\tif(t<6.) // intro\n\t\ts *= sin(s * mod(t, 8.) + 18. * sin(t));\n\telse \n\t\ts *=  sin(s * mod(t, 8.) * 16.) * min(1., fract(t * 6.) * 100.) * max(0., 1. - fract(t * 6.));\n        \n    return s;\n }  \n   \n\nvec2 synthv3( float pt)\n{\n    float t=mod(pt,10.0);\n// --------- SYNTH\n    int t1=int(t) % 5;\n\tvec2 s = sin(t * mat4x2(3496, 1656, 1696, 1376, 1776, 1456, 1656, 276)[t1]) - .5;\n    \n\tif(t<6.) // intro\n\t\ts *= sin(s * mod(t, 8.) + 18. * sin(t));\n\telse \n\t\ts *=  sin(s * mod(t, 8.) * 16.) * min(1., fract(t * 6.) * 100.) * max(0., 1. - fract(t * 6.));\n        \n    return s;\n }  \n\n\n\nvec2 pt3[10]=vec2[](vec2(.3,.37),vec2(.37,.73),vec2(.39,.76),vec2(.51,.83),\nvec2(.53,.83),vec2(.64,.76),vec2(.66,.74),vec2(.68,.6),vec2(.71,.37),vec2(.29,.37) );\n\nvec2 pt2[29]=vec2[](\nvec2(.55,.37),vec2(.72,.36),vec2(.81,.34),vec2(.86,.34),vec2(.95,.35),vec2(.83,.47),\nvec2(.9,.49),vec2(.95,.52),vec2(.79,.64),vec2(.89,.68),vec2(.75,.72),vec2(.8,.76),\nvec2(.61,.79),vec2(.65,.75),vec2(.66,.73),vec2(.68,.73),vec2(.73,.69),vec2(.74,.64),\nvec2(.74,.58),vec2(.72,.58),vec2(.67,.61),vec2(.68,.56),vec2(.66,.58),vec2(.66,.49),\nvec2(.66,.44),vec2(.64,.48),vec2(.58,.54),vec2(.58,.46),vec2(.54,.37)  );\n\n\n\nvec2 synthv5( float pt)\n{\n    float t=mod(pt,29.0);\n// --------- SYNTH\n    int t1=int(t) % 29;\n    int t2=int(t) % 10;\n    \n    vec2 vfreq1=pt2[int(t1)]*800.0;\n    vec2 vfreq2=pt3[int(t2)]*400.0;\n    \n\tvec2 s = sin(t * vfreq1+vfreq2) - .5;\n    \n\tif(t<15.) // intro\n\t\ts *= sin(s.yx * mod(t, 6.) + 18. * sin(t)*sin(s));\n\telse \n\t\ts *=  sin(s * mod(t, 6.) * 16.) * min(1., fract(t * 6.) * 100.) * max(0., 1. - fract(t * 6.));\n        \n    return s;\n }  \n\n\nvec2 synthv4( float pt)\n{\n    float t=mod(pt,10.0);\n// --------- SYNTH\n    int t1=int(t) % 10;\n\tvec2 s = sin(t * pt3[int(t)]*500.0) - .5;\n    \n\tif(t<6.) // intro\n\t\ts *= sin(s * mod(t, 8.) + 18. * sin(t));\n\telse \n\t\ts *=  sin(s * mod(t, 8.) * 16.) * min(1., fract(t * 6.) * 100.) * max(0., 1. - fract(t * 6.));\n        \n    return s;\n }  \n\n\nvec2 m(float t)\n{\n\t\n    // --------- SYNTH\n    int t1=int(t) % 4;\n\tvec2 s = sin(t * mat4x2(596, 756, 796, 476, 676, 356, 556, 476)[t1]) - .5;\n    \n\tif(t<6.) // intro\n\t\ts *= sin(s * mod(t, 8.) + 18. * sin(t));\n\telse \n\t\ts *=  sin(s * mod(t, 8.) * 16.) * min(1., fract(t * 6.) * 100.) * max(0., 1. - fract(t * 6.));\n    \n    \n    vec2 s2= synthv2( t);\n    float ta1=mod(t,5.);\n    float ta2=mod(t,10.);\n    \n    if (ta1<ta2)\n    s+=s2;\n    else\n    s+=5.0*s2*sin(s2);\n    \n   \n     s+= synthv4(t)*4.0+synthv5( t);\n    \n\t// --------- DRUMS(kick)\n    \n\tfloat tm = mod(t, .5);\n    float tm2 = mod(t, 1.8);\n    \n\tif(t<6.) tm = mod(t, 1.5); // intro\n\tfloat finetune = 1.8;\n    \n   \n    \n\t// kick\n\t\n    float k = (sin(80.0 * exp(-sin(tm * finetune) * 10.0)) * exp(-tm * 10.0));\n\tk *= cos(120.0 * exp(-tm * 2.0));\n    \n    \n    \n    // sub\n\tfloat kovt = (k - sin(tm * 580.) * exp(-tm * 1.5));\n\tkovt *= min(1., tm * 100.) * max(0., .5 - tm);\n\tkovt -= (.25 - asin(kovt * tm * 12.));\n\tk *= min(1., tm * 500.) * max(0., 1. - tm);\n\tk = 1.9 * (kovt + k);\n    \n    \n    \n\t\n    // -------- MASTER\n    \n\treturn (k + .4 * s ) * .25;\n}\n\nvec2 mainSound( in int samp,float time){return m(time);}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}