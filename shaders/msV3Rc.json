{
    "Shader": {
        "info": {
            "date": "1688047352",
            "description": "Infinite rotating gears",
            "flags": 0,
            "hasliked": 0,
            "id": "msV3Rc",
            "likes": 6,
            "name": "BC - Gears",
            "published": 3,
            "tags": [
                "gears",
                "modulo",
                "repeating"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "#define tilt (cos(p.x)/4.0 + (cos(p.y)/4.0)+2.) \n#define size (tilt*15.5 + cos(iTime/8. - 3.14)*10.)/20.\n#define SS(U) smoothstep((size*3.)/iResolution.y, 0., U)\nfloat circle (vec2 p, float r){return length(p)-r;}\n\n\nmat2 rot(float d)\n{\n    float s = sin(d),\n          c = cos(d);\n    return mat2(c, -s, s, c);\n}\n\n\nvec2 lightDir = vec2(0.5,0.5);\n\nvec2 getCell(vec2 uv)\n{\n    float m = 1.42;\n    return mod(uv+m/2.,m)-m/2.;\n}\nfloat gear(vec2 p, float r, float m, float tm)\n{\n    float time = iTime * tm;\n    \n    float shine = dot(normalize(p), normalize(-lightDir));\n    float t = floor(time) + 1.0-pow(1.0-fract(time),3.);\n    \n    \n    t*=0.5 * m;\n    p *= rot(t);\n    float a = atan(p.y, p.x);\n    float gearBump =  cos(a*10.)*0.1;\n    gearBump = clamp(gearBump, -0.05, 0.05);\n    float outer = circle(p, r + gearBump);\n    float inner = circle(p, r-0.25);\n    \n    float s = clamp(SS(outer) - SS(inner), 0., 1.);\n    float sdf = (abs(outer) * 1.0-SS(inner)) * SS(outer);\n    float sdfi = 1.0-sdf;\n    \n    sdfi = smoothstep(1.,.9, sdfi);\n    \n    float s2 = smoothstep(0.3,0.,sdfi);\n    \n    float fo = s*(sdfi);\n    \n    shine*=1.0-fo;\n    shine*= s*.5;\n    shine*=(1.0-sdfi);\n    return clamp(s + shine*s2,0.,1.)*1.;\n}\n\nfloat getGears(vec2 uv, float tm)\n{\n    float g1 = gear(uv, 0.5, 1., tm);\n    float g2 = gear(uv + 0.71, 0.5, -1., tm);\n    g2 = max(g2,gear(uv - 0.71, 0.5, -1., tm));\n    g2 = max(g2,gear(uv - vec2(0.71, -0.71), 0.5, -1., tm));\n    g2 = max(g2,gear(uv - vec2(-0.71, 0.71), 0.5, -1., tm));\n    \n    return max(g1,g2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    p*=size;\n    vec2 puv = p;\n    p = getCell(p);\n    \n    float g = getGears(p,1.0)/6.;\n    float iter = 6.;\n    for(float i=2.; i<2.+iter; i++)\n    {\n    \n        float m = mod(i,2.0) == 1.0 ? 1.0 : -1.0;\n    \n        float time = i/4.*m;\n        g = max(g, getGears(getCell(puv*i),time)/i);\n        \n    }\n    vec3 col = vec3(g);\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}