{
    "Shader": {
        "info": {
            "date": "1654103454",
            "description": "Trying out ray marching. Animated 3 spheres.",
            "flags": 0,
            "hasliked": 0,
            "id": "slBBDh",
            "likes": 2,
            "name": "Some Spheres",
            "published": 3,
            "tags": [
                "raymarching",
                "learning"
            ],
            "usePreview": 0,
            "username": "droidkid",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "vec2 opU(vec2 d1, vec2 d2) {\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nvec3 pallete(float t) {\n    vec3 a = vec3(0.2);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b * cos(6.28318 * (c*t + d));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nvec2 map(vec3 p) {\n    vec2 d = vec2(length(p-vec3(0.0, 0.2 + cos(iTime) * 0.05, 0.0 + sin(iTime)*0.02)) - 0.2, 0.05);\n    d = opU(d, vec2(length(p-vec3(0.5, 0.05 + sin(1.4*iTime+2.0)*0.03, 0.0 + cos(iTime)*0.03)) - 0.1, 2.2));\n    d = opU(d, vec2(length(p-vec3(-0.4 + cos(iTime) * 0.02, 0.1 + sin(iTime)*0.01, 0.1* sin(3.0*iTime)*0.3)) - 0.1, 0.8));\n    \n    d = opU(d, vec2(sdBox(p - vec3(0.0, 0.0, 0.5), vec3(2.1, 3.1, 0.1)), 0.7));\n    d = opU(d, vec2(sdBox(p - vec3(0.0, -0.3, 0.0), vec3(2.1, 0.1, 2.1)), 0.6));\n\n    return d;\n}\n\nfloat shadow(vec3 p, vec3 light) {\n    vec3 ro = p;\n    vec3 rd = normalize(light-p);\n    \n    float tmin = 0.21;\n    float t = tmin;\n    int maxSteps = 700;\n    \n    float res = 1.0;\n    for (int i=0; i<maxSteps; i++) {\n            vec3 p = ro + t*rd;\n            vec2 h = map(p);\n            if (h.x < 0.0001) {\n                return 0.0;\n            }\n            res = min(res, 32.0*h.x/t);\n            t += h.x;\n    }\n    return res;\n\n}\n\nvec3 calcNormal(vec3 p) {\n    vec3 d = vec3(0.0001, 0.0, 0.0);\n    \n    float dx = (map(p + d.xyy) - map(p - d.xyy)).x;\n    float dy = (map(p + d.yxy) - map(p - d.yxy)).x;\n    float dz = (map(p + d.yyx) - map(p - d.yyx)).x;\n\n    return normalize(vec3(dx, dy, dz));\n}\n\nmat3 setUpCamera(vec3 camera_pos, vec3 camera_target, float angle) {\n\tvec3 up = vec3(sin(angle), cos(angle), 0.0);\n\tvec3 cz = normalize(camera_target - camera_pos);\n\tvec3 cx = normalize(cross(up, cz));\n\tvec3 cy = normalize(cross(cz, cx));\n\treturn mat3(cx, cy, cz);\n}\n\nvec2 rayCast(vec3 ro, vec3 rd) {\n    float tmin = 0.1;\n    float tmax = 200.0;\n    float t = tmin;\n    int maxSteps = 70;\n    \n    vec2 res = vec2(-1.0, -7.0);\n    \n    for (int i=0; i<maxSteps && t<tmax; i++) {\n            vec3 p = ro + t*rd;\n            vec2 h = map(p);\n            if (h.x < 0.0001) {\n                res = vec2(t, h.y);\n                break;\n            }\n            t += h.x;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 ro = vec3(0.0, 0.1, -1.0);\n    vec3 ta = vec3(0.0, 0.1, 0.0);\n    mat3 camera = setUpCamera(ro, ta, 0.0);\n    float fo = 2.5;\n    \n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 rd = camera * normalize(vec3(uv, fo));\n    \n    vec2 h = rayCast(ro, rd);\n    if (h.y < 0.0) {\n        fragColor = vec4(0.0);\n        return;\n     }\n     \n     vec3 light = vec3(0.5, 0.5, -1.0);\n     vec3 point = ro + rd * h.x;\n     vec3 ld = normalize(light-point);\n     vec3 normal = calcNormal(point);\n     \n     vec3 color = pallete(h.y) * max(0.0, dot(normal, ld));\n     \n     // specular\n     vec3 hf = normalize(normal + ld);\n     color += vec3(0.5) * pow(dot(normal, hf), 1000.0);\n     \n     color = shadow(point, light) * color;\n     \n     // gamma correction\n     color = pow( color, vec3(0.4545) );\n     \n     fragColor = vec4(color, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}