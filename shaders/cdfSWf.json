{
    "Shader": {
        "info": {
            "date": "1669730466",
            "description": "Learn from IQ live",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfSWf",
            "likes": 0,
            "name": "Wizk_Learn",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "wizk",
            "viewed": 165
        },
        "renderpass": [
            {
                "code": "float map(in vec3 pos)\n{\n    float d = length(pos) - 0.5;\n    \n    float d2 = pos.y - (-0.5);\n    \n    return min(d, d2);\n}\n\nvec3 calcNormal( in vec3 pos)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize( vec3(\n        map(pos + e.xyy) - map(pos-e.xyy),\n        map(pos + e.yxy) - map(pos-e.yxy),\n        map(pos + e.yyx) - map(pos-e.yyx) ));\n}\n\nfloat castRay(in vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for (int i = 0; i < 100; ++i)\n    {\n        vec3 pos = ro + t * rd;\n        \n        float h = map(pos);  // pos is in the edge or inside an object.\n        if (h < 0.001)\n        {\n            break;\n        }\n        \n        t += h;\n        if (t > 20.0) break;\n    }\n    if (t > 20.0) \n        t = -1.0;\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2.0*fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 2.0);\n    vec3 rd = normalize( vec3(p, -1.5) );\n    \n    vec3 col = vec3(0.0);\n    \n    float t = castRay(ro, rd);    \n    if (t > 0.0)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = calcNormal(pos);\n        \n        vec3 sun_dir = normalize( vec3( 0.8, 0.4, 0.2 ) );\n        float sun_dif = clamp( dot (nor, sun_dir),0.0, 1.0);\n        float sun_shadow = step(castRay(pos + nor*0.001, sun_dir), 0.0);;\n        float sky_dif = clamp( 0.5 + 0.5*dot (nor, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n        \n        col = vec3(1.0, 0.7, 0.5) * sun_dif * sun_shadow;\n        col += vec3(0.0, 0.1, 0.3) * sky_dif;\n        \n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}