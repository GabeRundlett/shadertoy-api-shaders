{
    "Shader": {
        "info": {
            "date": "1551876113",
            "description": "Chaos from multiple reflections; mouse controls beam origin (left-right)",
            "flags": 0,
            "hasliked": 0,
            "id": "tdfXRs",
            "likes": 10,
            "name": "Multiple Scattering",
            "published": 3,
            "tags": [
                "reflection",
                "chaos"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 572
        },
        "renderpass": [
            {
                "code": "// \"Multiple Scattering\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec3 HsvToRgb (vec3 c);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nfloat tCur, dstFar, diskRad, cRad, oRad, xOrg;\nconst float pi = 3.14159;\n\nconst float nDisk = 7.;\nconst float maxHit = 60.;\n\nfloat DiskDraw (vec2 q)\n{\n  float dMin, a;\n  dMin = dstFar;\n  a = 2. * pi / nDisk;\n  for (float k = 0.; k < nDisk; k ++) {\n    dMin = min (dMin, abs (length (q - cRad * cos (a * (k + 0.5) + vec2 (0.5 * pi, pi))) - diskRad));\n  }\n  return 1. - smoothstep (0.01, 0.015, dMin);\n}\n\nfloat LineDist (vec2 q, vec2 u)\n{\n  float s;\n  s = length (u);\n  u /= s;\n  return length (q - clamp (dot (q, u), 0., s) * u);\n}\n\nvec2 TrajDraw (vec2 q)\n{\n  vec2 p, pN, u, v, c, cMin;\n  float d, t, r, a, rMin, dMin, nMin;\n  bool hit;\n  dMin = dstFar;\n  if (abs (xOrg) < 0.5) p.x = clamp (0.3 * xOrg, - 0.9 * oRad, 0.9 * oRad);\n  else p.x = 0.9 * oRad * (-1. + 2. * SmoothBump (0.25, 0.75, 0.25, mod (0.02 * tCur + 0.25, 1.)));\n  p.y = - 1.1 * oRad;\n  v = vec2 (0., 1.);\n  a = 2. * pi / nDisk;\n  nMin = maxHit;\n  for (float n = 0.; n < maxHit; n ++) {\n    hit = false;\n    rMin = 2. * oRad;\n    for (float k = 0.; k < nDisk; k ++) {\n      c = cRad * cos (a * (k + 0.5) + vec2 (0.5 * pi, pi));\n      u = p - c;\n      t = dot (v, u);\n      r = t * t - dot (u, u) + diskRad * diskRad;\n      if (r > 0.) {\n        r = - t - sqrt (r);\n        if (r > 0. && r < rMin) {\n          rMin = r;\n          cMin = c;\n          hit = true;\n        }\n      }\n    }\n    if (hit) {\n      pN = p + rMin * v;\n      v = reflect (v, normalize (pN - cMin));\n    } else {\n      pN = p;\n      t = dot (v, p);\n      r = t * t - dot (p, p) + oRad * oRad;\n      if (r > 0.) {\n        r = - t + sqrt (r);\n        if (r > 0.) pN += r * v;\n      }\n    }\n    d = LineDist (q - p, pN - p);\n    if (d < dMin) {\n      dMin = d;\n      nMin = n;\n    }\n    p = pN + 0.01 * v;\n    if (! hit) break;\n  }\n  return vec2 (1. - smoothstep (0.005, 0.01, dMin), nMin);\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  return vec4 (((df > 0. && dn < df) ? dn : dstFar),\n     - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 bb;\n  vec3 col;\n  vec2 hh;\n  col = vec3 (0.1, 0.1, 0.2);\n  bb = BlkHit (ro, rd, vec3 (2., 0.01, 2.));\n  if (bb.x < dstFar) {\n    ro += bb.x * rd;\n    diskRad = 0.46;\n    cRad = 0.5 / sin (pi / nDisk);\n    oRad = cRad + 1.5 * diskRad;\n    if (bb.z > 0.99) {\n      col = mix (vec3 (0.2, 0.2, 0.5) * (1. - 0.05 * smoothstep (0., 0.02,\n         length (ro.xz) - oRad)), vec3 (0.8, 0.8, 0.8), DiskDraw (ro.xz));\n      hh = TrajDraw (ro.xz);\n      col = mix (col, HsvToRgb (vec3 (mod (4. * hh.y / maxHit, 1.), 1., 1.)), hh.x);\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1 \n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.3 * pi;\n  xOrg = (mPtr.z > 0.) ? mPtr.x : -99.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., -0.27, -6.8);\n  dstFar = 20.;\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 4.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}