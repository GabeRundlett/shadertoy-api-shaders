{
    "Shader": {
        "info": {
            "date": "1675736760",
            "description": "2 rank convolution. WASD QE and mouse to move. Press R to stop movement.",
            "flags": 48,
            "hasliked": 0,
            "id": "dlBSRD",
            "likes": 5,
            "name": "3D Star Field 3",
            "published": 3,
            "tags": [
                "camera"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "#define exposure 1.2\n#define sqrexposure 0.6\n#define gamma 1.3\n\nvec3 expose(vec3 c)\n{\n    return 1.0 - exp(-exposure*c-sqrexposure*c*c);\n}\n\nvec3 saturate(vec3 c)\n{\n    return pow(expose(c),vec3(1.0/gamma));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 acc = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 bloom = texture(iChannel1, fragCoord/iResolution.xy);\n    \n      ivec2 coord = ivec2(fragCoord);\n    \n    vec4 pixel = texelFetch(iChannel3, ivec2(coord.x, coord.y), 0);\n    vec3 val1, val2;\n    unpack2vec3(pixel.xyz, val1, val2);\n    \n    vec3 col = acc.xyz/acc.w + 10.0*bloom.xyz/bloom.w;\n    \n    \n    vec3 packed = pack2vec3(col, 2.0*col);\n    \n    \n    //unpack2vec3(packed, val1, val2);\n    \n    fragColor = vec4(saturate(col), 1.0);\n   // fragColor.xyz = 0.0001 * texture(iChannel3, fragCoord/iResolution.xy).xyz;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//controller\n\n//Keyboard constants\nconst int keyLe = 37, keyUp = 38, keyRi = 39, keyDn = 40, keyA = 65, keyB = 66, keyC = 67, keyD = 68, keyE = 69, keyF = 70, keyG = 71, keyH = 72, keyI = 73, keyJ = 74, keyK = 75, keyL = 76, keyM = 77, keyN = 78, keyO = 79, keyP = 80, keyQ = 81, keyR = 82, keyS = 83, keyT = 84, keyU = 85, keyV = 86, keyW = 87, keyX = 88, keyY = 89, keyZ = 90;\n\nbool pressed(int k) \n{\n    return texelFetch(iChannel3, ivec2(k, 0), 0).x > 0.5;\n}\n\nconst float force = 32.0;\nconst float mouse_sens = 100.0;\nconst float roll_speed = 0.5;\n\nvoid mainImage( out vec4 o, in vec2 p )\n{\n    p = floor(p);\n    if(p.x > NAddr && p.y > 0.) discard;\n    \n    //get camera data\n    vec3 cp = get(CamP).xyz;\n    vec4 ca = get(CamA);\n    \n    float mode = get(CamP).w;\n    if(pressed(keyR)) mode = 1.0 - mode;\n    \n    //initialization\n    if(iFrame == 0)\n    {\n        mode = 1.0;\n        cp =  vec3(6,6,5);\n        ca = aa2q( normalize(vec3(0.0,1,0.)), -1.15);\n    }\n    vec4 oldca = ca;\n    if(p.x == PrevCamP) o = vec4(cp, 0);\n    if(p.x == PrevCamA) o = ca;\n    \n    mat3 cam = getCam(ca);\n    \n    //get velocities\n    vec3 cv = get(CamV).xyz;\n    vec4 cav = get(CamAV);\n    \n    float dt = 1./60.0;\n    //update position\n    if(pressed(keyW)) cv += force*dt*cam*vec3(0,0,1);\n    if(pressed(keyS)) cv += force*dt*cam*vec3(0,0,-1);\n    if(pressed(keyA)) cv += force*dt*cam*vec3(-1,0,0);\n    if(pressed(keyD)) cv += force*dt*cam*vec3(1,0,0);\n    \n    cp += dt*cv + 5.0*iTimeDelta*vec3(1,0,0)*mode;\n    cv += -cv*tanh(10.0*dt);\n    \n    //update camera orientation\n    vec2 dmouse = dt*mouse_sens*(iMouse.xy - get(PrevMouse).xy)/iResolution.x;\n    \n    if(length(dmouse) < 0.1)\n    {\n        //rotate around y ax\n        ca = qq2q(ca, aa2q(cam*vec3(0,1,0), -dmouse.x)); \n        //rotate around x ax\n        ca = qq2q(ca, aa2q(cam*vec3(1,0,0), dmouse.y));\n    }\n    \n    //roll camera\n    if(pressed(keyQ)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), -roll_speed*dt)); \n    if(pressed(keyE)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), roll_speed*dt)); \n    \n    if(p.x == CamP) o = vec4(cp, mode);\n    if(p.x == CamA) o = ca;\n    if(p.x == CamV) o = vec4(cv, 0.0);\n    if(p.x == CamAV) o = vec4(0.0);\n    if(p.x == PrevMouse) o = vec4(iMouse.xy, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n#define FOV 0.8\n#define MAX_STEPS 256\n#define MIN_DIST 1e-5\n#define MAX_DIST 60.0\n\n//(reused some of @ollj's code, made it more readible)\n\nfloat CAM_ANGLE = 0.003;\n\n// basic parameters\nfloat R = 2.1;\t\t\t\t\t\t\t\t// planet radius\nfloat H = 0.1;\t\t\t\t\t\t\t// density scale-height of atmosphere (not pressure scale height)\n\nvec3 light = normalize(vec3(1,0.8,-0.6));\nconst float light_bright =1.0;\nconst float light_ang = 0.1;\n\n//specific controller buffer Addresses\nconst float CamP = 0.,     //camera position \n            CamA = 1.,     //camera rotation quaternion    \n            CamV = 2.,     //camera velocity\n            CamAV = 3.,    //camera rotation velocity\n            PrevCamP = 4., //previous frame camera position\n            PrevCamA = 5., //previous frame camera rotation quaternion\n            PrevMouse = 6.,//previous mouse pos\n            NAddr = 7.;    //max address count\n            \n#define get(i) texelFetch(iChannel2,ivec2(i,0),0)\n\n\n\n//ollj quaternionRotation math\n//\n//ANY rotations in 3d are non-commutative!\n//\n//matrix rotations are just bulky, memory wasting\n//EulerRotations almost certainly fail to rotate over the SHORTEST path.\n//EulerRotations almost certainly will gimbalLock and get stuck along one axis\n//QuaternionRotations are superior here.\n//-> we only use EulerRorations for simple input devices (keyboard input)\n//-> we convert to quaternions, buffered as vec4.\n\n//quaternion Identity\nvec4 qid() \n{\n    return vec4(0, 0, 0, 1);\n}\n\n//return quaternion from axis and angle\nvec4 aa2q(vec3 axis, float ang) \n{\n    vec2 g = vec2(sin(ang), cos(ang)) * 0.5;\n    return normalize(vec4(axis * g.x, g.y));\n}\n\n//return AxisAngle of NORMALIZED quaternion input\nvec4 q2aa(vec4 q) \n{\n    return vec4(q.xyz / sqrt(1.0 - q.w * q.w), acos(q.w) * 2.);\n}\n\n//return q2, rotated by q1, order matters (is non commutative) : (aka quaternion multiplication == AxisAngleRotation)\nvec4 qq2q(vec4 q1, vec4 q2) \n{\n    return vec4(q1.xyz * q2.w + q2.xyz * q1.w + cross(q1.xyz, q2.xyz), (q1.w * q2.w) - dot(q1.xyz, q2.xyz));\n}\n\n//extension to qq2q(), scaled by sensitivity [f] (==quaternion ANGULAR equivalent to slerp() )\nvec4 qq2qLerp(vec4 a, vec4 b, float f) \n{\n    float d = dot(a, b), t = acos(abs(d)), o = (1. / sin(t));\n    return normalize(a * sin(t * (1.0 - f)) * o * sign(d) + b * sin(t * f) * o);\n}\n\n//doing qq2q() multiple times, you need to normalize() the quaternion, to fix rounding errors.\n//how often you do this is up to you.\n\n//normalize q (assuming length(q) is already close to 1, we can skip whe sqrt()\nvec4 qn(vec4 q) \n{\n    return q / dot(q,q);\n}\n\n//return quaternion, that is the shortest rotation, between looking to [a before], and looking to [b after] the rotation.\n//http://wiki.secondlife.com/wiki/LlRotBetween\nvec4 qBetween(vec3 a, vec3 b) \n{\n    float v = sqrt(dot(a,a) * dot(a,a));\n\n    if(v == 0.) return qid();\n    \n    v = dot(a, b) / v;\n    vec3 c = a.yzx * b.zxy - a.zxy * b.yzx / v;\n    float d = dot(c,c);\n    \n    if(d != 0.) \n    {\n        float s = (v > - 0.707107) ? 1. + v : d / (1. + sqrt(1. - d));\n        return vec4(c, s) / sqrt(d + s * s);\n    }\n    \n    if(v > 0.) return qid();\n    \n    float m = length(a.xy);\n    \n    return (m != 0.) ? vec4(a.y, - a.x, 0, 0) / m : vec4(1, 0, 0, 0);\n}\n\n//return inverse of quaternion\nvec4 qinv(vec4 q) \n{\n    return vec4(- q.xyz, q.w) / dot(q,q);\n}\n\n//return VECTOR p, rotated by quaterion q;\nvec3 qv2v(vec4 q, vec3 p) \n{\n    return qq2q(q, qq2q(vec4(p, .0), qinv(q))).xyz;\n}\n\n//qv2v()  with swapped inputs\n//return quaterion P (as vector), as if it is rotated by VECTOR p (as if it is a quaternion)\nvec3 vq2v(vec3 p, vec4 q) \n{\n    return qq2q(qinv(q), qq2q(vec4(p, 0.0), q)).xyz;\n}\n\nvec3 vq2v(vec4 a, vec3 b) \n{\n    return qv2v(a, b);\n}\n\n//in case of namespace confuction\nvec3 qv2v(vec3 a, vec4 b) \n{\n    return vq2v(a, b);\n}\n\n//return mat3 of quaternion (rotation matrix without translation)\n//https://www.shadertoy.com/view/WsGfWm\nmat3 q2m(vec4 q) \n{\n    vec3 a = vec3(-1, 1, 1);\n    vec3 u = q.zyz * a, v = q.xyx * a.xxy;\n    mat3 m = mat3(0.5) + mat3(0, u.x,u.y,u.z, 0, v.x,v.y,v.z, 0) * q.w + matrixCompMult(outerProduct(q.xyz, q.xyz), 1. - mat3(1));\n    q *= q; \n    m -= mat3(q.y + q.z, 0, 0, 0, q.x + q.z, 0, 0, 0, q.x + q.y);\n    return m * 2.0;\n}\n\n//return quaternion of orthogonal matrix (with determinant==1., or else quaternionm will not be normalized)\nvec4 m2q(mat3 m) \n{\n#define m2f(a,b) m[a][b]-m[b][a]\n    //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n    float q = 2. * sqrt(abs(1. + m[0][0] + m[1][1] + m[2][2]));\n    return vec4(vec3(m2f(2, 1), m2f(0, 1), m2f(1, 0)) / q / 4., q);\n#undef m2f\n}\n\nfloat at2e(vec2 a) \n{\n    a *= 2.;\n    return atan(a.x, 1. - a.y);\n}\n\n//return quaternion of Euler[yaw,pitch,roll]     \nvec4 eYPR2q(vec3 o) \n{\n    o *= .5;\n    vec3 s = sin(o);\n    //https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Source_code\n    o = cos(o);\n    vec4 a = vec4(s.xz, o.xz);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(-1, 1, -1, 1);\n}\n\nvec4 eYPR2q(vec2 o) \n{\n    o *= .5;\n    vec2 s = sin(o);\n    o = cos(o);\n    vec4 a = vec4(s.x, 0., o.x, 0.);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(- 1, 1, - 1, 1);\n}\n\nmat3 getCam(vec4 q) \n{\n    return q2m(q);\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n\n//uniformly spherically distributed\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\nvec3 pack2vec3(vec3 a, vec3 b) \n{\n    uvec3 packed = uvec3(packHalf2x16(vec2(a.x,b.x)), packHalf2x16(vec2(a.y,b.y)), packHalf2x16(vec2(a.z,b.z)));\n    return vec3(uintBitsToFloat(packed.x), uintBitsToFloat(packed.y), uintBitsToFloat(packed.z));\n}\n\nvoid unpack2vec3(vec3 packed, out vec3 a, out vec3 b) \n{\n    uvec3 unpacked = uvec3(floatBitsToUint(packed.x), floatBitsToUint(packed.y), floatBitsToUint(packed.z));\n    vec2 unpackedA = unpackHalf2x16(unpacked.x);\n    vec2 unpackedB = unpackHalf2x16(unpacked.y);\n    vec2 unpackedC = unpackHalf2x16(unpacked.z);\n    a = vec3(unpackedA.x, unpackedB.x, unpackedC.x);\n    b = vec3(unpackedA.y, unpackedB.y, unpackedC.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SLICES 50.0\n\nfloat minimum_distance(vec3 v, vec3 w, vec3 p) \n{\n  vec3 dx = w - v;\n  float l2 = dot(dx, dx);  \n  if (l2 == 0.0) return distance(p, v);   \n  float t = max(0.0, min(1.0, dot(p - v, w - v) / l2));\n  vec3 projection = v + t * (w - v);\n  return distance(p, projection);\n}\n\nvec3 blackBody(float T)\n{\n    vec3 O = vec3(0.0);\n    for (float i=0.; i<3.; i++) \n    { \n        float f = 1.+.5*i; \n        O[int(i)] += 10. * (f*f*f) / (exp((19E3*f/T)) - 1.);  // Planck law\n    }\n    return O;\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat region(vec3 pos)\n{\n    return texture(iChannel1, pos/200.0).x;\n}\n\nvec3 sampleVoxel(vec3 ro, vec3 rd, vec3 pos)\n{\n    float r = region(pos);\n    if(r < 0.5) return vec3(0.0);\n    float temp = hash13(pos);\n    vec3 heat = pow(blackBody(temp*temp*temp*20000.), vec3(1.0));\n    vec3 spos = hash33(pos) + pos;\n    float mdist = minimum_distance(ro, ro + rd*100.0, spos);\n    float camdist = distance(ro, spos);\n    float mindist = CAM_ANGLE*camdist;\n    float dec = smoothstep(SLICES, SLICES*0.8, camdist);\n    return min(vec3(100.0), 20.0*heat * smoothstep(mindist, 0.0, mdist) * dec / (camdist*camdist));\n}\n\nvec3 VoxelRaycast(vec3 ro, vec3 rd, float maxt)\n{\n\tvec3 voxelPos = floor(ro);\n\t\n    vec3 rayInv = 1.0/rd;\n    vec3 rayMask = vec3(greaterThan(rd, vec3(0.0)));\n\tvec3 rayStep = rayMask * 2.0 - 1.0;          \n\tvec3 offset = (rayMask - ro) * rayInv;\n\n\tvec3 mask = vec3(0.0);\n    vec3 sideLength = vec3(0.0);\n    \n    float traveled = 0.0;\n    vec3 col = vec3(0.0);\n\tfor(int i = 0; i < MAX_STEPS; i++) \n\t{\n        col += sampleVoxel(ro, rd, voxelPos);\n        \n        sideLength = voxelPos * rayInv + offset;\n        mask = vec3(lessThanEqual(sideLength.xyz, min(sideLength.yzx, sideLength.zxy)));\n        voxelPos += mask * rayStep;\n        traveled = dot(sideLength, mask);\n        \n        if(traveled > maxt) break;\n\t}\n    \n    ro = ro + rd*traveled;\n\treturn col;\n}\n\nbool getRay(vec2 uv, out vec3 ro, out vec3 rd)\n{\n    mat3 cam = getCam(get(CamA));\n    \n    ro = get(CamP).xyz;\n   \n    rd = normalize(cam*vec3(FOV*uv, 1.0));\n    \n    return true;\n}\n\nvec4 render(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 cp, rd;\n    if(!getRay(uv, cp, rd)) return vec4(0,0,0,1);\n   \n    return vec4(VoxelRaycast(cp, rd, SLICES), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CAM_ANGLE = 1.5 * FOV / iResolution.y;\n    fragColor = vec4(0.0);   \n\n    fragColor += render(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//first pass of separable convolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n//The first 2 columns of the U matrix:\nfloat U1[257] = float[](\n    -9.447276371199465e-07,     -8.746306452089847e-06,     -2.435235298829273e-05,     -4.7654215714622334e-05,     -7.854043616277397e-05,     -0.00011689837526148944,     -0.000162614785398873,     -0.00021557608261832699,     -0.0002756685195746159,     -0.00034277828407665246,     -0.00041679158774765503,     -0.0004975947113244268,     -0.0005850740690194479,     -0.000679116233575867,     -0.0007796079795609152,     -0.0008864363157302569,     -0.000999488515888899,     -0.0011186521439984813,     -0.001243815084854518,     -0.001374865580785615,     -0.0015116922483710783,     -0.0016541841074021895,     -0.0018022306277955728,     -0.001955721732637126,     -0.002114547859009097,     -0.0022785999702936823,     -0.002447769595019475,     -0.0026219488784535883,     -0.0028010305999610265,     -0.00298490822358693,     -0.0031734759437216926,     -0.0033666287312007067,     -0.003564262375332959,     -0.0037662735401070603,     -0.0039725598198168555,     -0.004183019798092924,     -0.004397553111115977,     -0.004616060515365114,     -0.00483844396028876,     -0.00506460666632468,     -0.005294453208738164,     -0.005527889607795078,     -0.005764823425839191,     -0.00600516387190212,     -0.006248821914539559,     -0.0064957104036607455,     -0.00674574420199852,     -0.006998840325816297,     -0.007254918102417866,     -0.0075138993367360705,     -0.00777570849238033,     -0.008040272888239006,     -0.008307522910574261,     -0.008577392252832557,     -0.008849818167867002,     -0.009124741743159375,     -0.009402108204909668,     -0.009681867256121426,     -0.009963973434832457,     -0.010248386511940238,     -0.010535071937512108,     -0.010824001314988205,     -0.011115152934195538,     -0.011408512361213262,     -0.01170407307589016,     -0.012001837196350031,     -0.012301816263469672,     -0.012604032122672987,     -0.012908517900440761,     -0.013215319087189387,     -0.013524494753942717,     -0.013836118899000062,     -0.014150281968357244,     -0.014467092546800097,     -0.01478667927038489,     -0.015109192967726885,     -0.015434809084940859,     -0.015763730419994987,     -0.016096190224445427,     -0.016432455726227452,     -0.016772832136277675,     -0.017117667227796854,     -0.01746735656907537,     -0.017822349533857935,     -0.01818315621441528,     -0.018550355399260064,     -0.018924603811679215,     -0.01930664683543329,     -0.019697331014985088,     -0.020097618673154127,     -0.020508605064782796,     -0.02093153858763259,     -0.021367844689471106,     -0.021819154265302423,     -0.022287337539508754,     -0.02277454468006337,     -0.023283254720597283,     -0.023816334794185986,     -0.024377112244514897,     -0.024969462918938697,     -0.02559791993402917,     -0.026267808526236888,     -0.026985414390478437,     -0.027758195353824622,     -0.028595049604865294,     -0.02950665840038563,     -0.030505927795825512,     -0.031608563388968114,     -0.03283382569296869,     -0.03420553367429835,     -0.03575341350964996,     -0.03751493399193991,     -0.03953783773723997,     -0.041883682313747644,     -0.04463287072863554,     -0.047891915432344216,     -0.05180411383565565,     -0.05656557088341403,     -0.0624501174776393,     -0.06985142327113548,     -0.07936644027001014,     -0.09198604106444543,     -0.10951080243243982,     -0.1352058595745457,     -0.1741044577744155,     -0.23129432566121957,     -0.3059553997650019,     -0.3802350838907087,     -0.4139051784416186,     -0.3802350838907087,     -0.3059553997650019,     -0.23129432566121957,     -0.1741044577744155,     -0.1352058595745457,     -0.10951080243243982,     -0.09198604106444543,     -0.07936644027001014,     -0.06985142327113548,     -0.0624501174776393,     -0.05656557088341403,     -0.05180411383565565,     -0.047891915432344216,     -0.04463287072863554,     -0.041883682313747644,     -0.03953783773723997,     -0.03751493399193991,     -0.03575341350964996,     -0.03420553367429835,     -0.03283382569296869,     -0.031608563388968114,     -0.030505927795825512,     -0.02950665840038563,     -0.028595049604865294,     -0.027758195353824622,     -0.026985414390478437,     -0.026267808526236888,     -0.02559791993402917,     -0.024969462918938697,     -0.024377112244514897,     -0.023816334794185986,     -0.023283254720597283,     -0.02277454468006337,     -0.022287337539508754,     -0.021819154265302423,     -0.021367844689471106,     -0.02093153858763259,     -0.020508605064782796,     -0.020097618673154127,     -0.019697331014985088,     -0.01930664683543329,     -0.018924603811679215,     -0.018550355399260064,     -0.01818315621441528,     -0.017822349533857935,     -0.01746735656907537,     -0.017117667227796854,     -0.016772832136277675,     -0.016432455726227452,     -0.016096190224445427,     -0.015763730419994987,     -0.015434809084940859,     -0.015109192967726885,     -0.01478667927038489,     -0.014467092546800097,     -0.014150281968357244,     -0.013836118899000062,     -0.013524494753942717,     -0.013215319087189387,     -0.012908517900440761,     -0.012604032122672987,     -0.012301816263469672,     -0.012001837196350031,     -0.01170407307589016,     -0.011408512361213262,     -0.011115152934195538,     -0.010824001314988205,     -0.010535071937512108,     -0.010248386511940238,     -0.009963973434832457,     -0.009681867256121426,     -0.009402108204909668,     -0.009124741743159375,     -0.008849818167867002,     -0.008577392252832557,     -0.008307522910574261,     -0.008040272888239006,     -0.00777570849238033,     -0.0075138993367360705,     -0.007254918102417866,     -0.006998840325816297,     -0.00674574420199852,     -0.0064957104036607455,     -0.006248821914539559,     -0.00600516387190212,     -0.005764823425839191,     -0.005527889607795078,     -0.005294453208738164,     -0.00506460666632468,     -0.00483844396028876,     -0.004616060515365114,     -0.004397553111115977,     -0.004183019798092924,     -0.0039725598198168555,     -0.0037662735401070603,     -0.003564262375332959,     -0.0033666287312007067,     -0.0031734759437216926,     -0.00298490822358693,     -0.0028010305999610265,     -0.0026219488784535883,     -0.002447769595019475,     -0.0022785999702936823,     -0.002114547859009097,     -0.001955721732637126,     -0.0018022306277955728,     -0.0016541841074021895,     -0.0015116922483710783,     -0.001374865580785615,     -0.001243815084854518,     -0.0011186521439984813,     -0.000999488515888899,     -0.0008864363157302569,     -0.0007796079795609152,     -0.000679116233575867,     -0.0005850740690194479,     -0.0004975947113244268,     -0.00041679158774765503,     -0.00034277828407665246,     -0.0002756685195746159,     -0.00021557608261832699,     -0.000162614785398873,     -0.00011689837526148942,     -7.854043616277397e-05,     -4.7654215714622334e-05,     -2.4352352988292662e-05,     -8.746306452103537e-06,     -9.447276370389832e-07 \n);\nfloat U2[257] = float[](\n    3.615292652081603e-06,     3.034958188141701e-05,     8.251227428235364e-05,     0.000159728606358156,     0.0002616634953330754,     0.0003879831275138821,     0.0005383475093399692,     0.000712408760321564,     0.0009098114964470476,     0.0011301931047976322,     0.0013731847549022518,     0.0016384115459869674,     0.0019254936023212802,     0.0022340459968619767,     0.0025636793976814296,     0.002914000387154268,     0.0032846117458787353,     0.0036751125219508223,     0.004085098285812485,     0.004514161587243684,     0.0049618916284123755,     0.005427874339807163,     0.005911693088721383,     0.006412927663896293,     0.006931155384138883,     0.0074659502886282505,     0.00801688325417556,     0.008583522514548168,     0.009165432769286764,     0.009762175460789037,     0.010373308749922722,     0.010998387384318575,     0.011636962273097034,     0.012288580463218972,     0.012952784934817784,     0.01362911435576847,     0.014317102810778557,     0.015016279502536983,     0.01572616842224402,     0.016446287986606144,     0.017176150638112786,     0.017915262405112032,     0.018663122417866627,     0.01941922237639401,     0.0201830459654697,     0.020954068211695473,     0.021731754769109667,     0.02251556107432741,     0.02330493162029988,     0.024099298992718683,     0.024898082820905387,     0.02570068862052413,     0.026506506452306997,     0.027314909795563752,     0.02812525394362213,     0.028936874234666395,     0.029749084234138,     0.03056117394206785,     0.031372407335383816,     0.03218201984734595,     0.0329892159508219,     0.03379316582690479,     0.034593002101335125,     0.03538781630596291,     0.03617665440037838,     0.03695851256021167,     0.03773233177623397,     0.03849699228903231,     0.03925130724613867,     0.03999401545504584,     0.040723773641269626,     0.04143914728734179,     0.04213860088606108,     0.04282048645393346,     0.04348303110978645,     0.044124322621433724,     0.04474229346678801,     0.04533470253617213,     0.04589911455193886,     0.046432876726742726,     0.046933092080393306,     0.04739658931028152,     0.047819888131156854,     0.048199159895259136,     0.04853018237082193,     0.04880828781749755,     0.04902830339109665,     0.04918448230945037,     0.04927042441285721,     0.049278984207467284,     0.04920216406127891,     0.04903099001456379,     0.04875536695687932,     0.04836390927058729,     0.04784374236386539,     0.04718026947778564,     0.04635689697419406,     0.04535470989176122,     0.04415208786090945,     0.0427242492976653,     0.041042709283076795,     0.039074633490238424,     0.036782066961548655,     0.03412101239734203,     0.031040328086804115,     0.027480410930205423,     0.023371625914759185,     0.018632441320896285,     0.013167231710217098,     0.006863723786068318,     -0.0004099062502382582,     -0.008808201933106016,     -0.018511631031115368,     -0.029729299418335072,     -0.04270007633514081,     -0.057689926572364866,     -0.07498109623496449,     -0.09484455939687013,     -0.11747841570567924,     -0.14287551516002173,     -0.17053720142354464,     -0.19884609170274342,     -0.22374442115134854,     -0.23631411139227593,     -0.21948377082252632,     -0.14657724939494451,     0.007491048865397561,     0.2147579736250399,     0.3249140654356825,     0.2147579736250399,     0.007491048865397561,     -0.14657724939494451,     -0.21948377082252632,     -0.23631411139227593,     -0.22374442115134854,     -0.19884609170274342,     -0.17053720142354464,     -0.14287551516002173,     -0.11747841570567924,     -0.09484455939687013,     -0.07498109623496449,     -0.057689926572364866,     -0.04270007633514081,     -0.029729299418335072,     -0.018511631031115368,     -0.008808201933106016,     -0.0004099062502382582,     0.006863723786068318,     0.013167231710217098,     0.018632441320896285,     0.023371625914759185,     0.027480410930205423,     0.031040328086804115,     0.03412101239734203,     0.036782066961548655,     0.039074633490238424,     0.041042709283076795,     0.0427242492976653,     0.04415208786090945,     0.04535470989176122,     0.04635689697419406,     0.04718026947778564,     0.04784374236386539,     0.04836390927058729,     0.04875536695687932,     0.04903099001456379,     0.04920216406127891,     0.049278984207467284,     0.04927042441285721,     0.04918448230945037,     0.04902830339109665,     0.04880828781749755,     0.04853018237082193,     0.048199159895259136,     0.047819888131156854,     0.04739658931028152,     0.046933092080393306,     0.046432876726742726,     0.04589911455193886,     0.04533470253617213,     0.04474229346678801,     0.044124322621433724,     0.04348303110978645,     0.04282048645393346,     0.04213860088606108,     0.04143914728734179,     0.040723773641269626,     0.03999401545504584,     0.03925130724613867,     0.03849699228903231,     0.03773233177623397,     0.03695851256021167,     0.03617665440037838,     0.03538781630596291,     0.034593002101335125,     0.03379316582690479,     0.0329892159508219,     0.03218201984734595,     0.031372407335383816,     0.03056117394206785,     0.029749084234138,     0.028936874234666395,     0.02812525394362213,     0.027314909795563752,     0.026506506452306997,     0.02570068862052413,     0.024898082820905387,     0.024099298992718683,     0.02330493162029988,     0.02251556107432741,     0.021731754769109667,     0.020954068211695473,     0.0201830459654697,     0.01941922237639401,     0.018663122417866627,     0.017915262405112032,     0.017176150638112786,     0.016446287986606144,     0.01572616842224402,     0.015016279502536983,     0.014317102810778557,     0.01362911435576847,     0.012952784934817784,     0.012288580463218972,     0.011636962273097034,     0.010998387384318575,     0.010373308749922722,     0.009762175460789037,     0.009165432769286764,     0.008583522514548168,     0.00801688325417556,     0.0074659502886282505,     0.006931155384138883,     0.006412927663896293,     0.005911693088721383,     0.005427874339807163,     0.0049618916284123755,     0.004514161587243684,     0.004085098285812485,     0.0036751125219508223,     0.0032846117458787353,     0.002914000387154268,     0.0025636793976814296,     0.0022340459968619767,     0.0019254936023212802,     0.0016384115459869674,     0.0013731847549022518,     0.0011301931047976322,     0.0009098114964470476,     0.000712408760321564,     0.0005383475093399692,     0.00038798312751388205,     0.00026166349533307434,     0.00015972860635814247,     8.251227428221754e-05,     3.0349581881676408e-05,     3.6152926524011005e-06 \n);\n//The first 2 rows of the V matrix:\nfloat V1[257] = float[](\n    -9.447276370389931e-07,     -8.746306452311892e-06,     -2.4352352988296633e-05,     -4.7654215714622774e-05,     -7.85404361627747e-05,     -0.0001168983752614905,     -0.00016261478539887446,     -0.00021557608261832896,     -0.00027566851957461843,     -0.0003427782840766555,     -0.00041679158774765893,     -0.0004975947113244314,     -0.0005850740690194532,     -0.0006791162335758732,     -0.0007796079795609224,     -0.0008864363157302651,     -0.000999488515888908,     -0.0011186521439984919,     -0.0012438150848545291,     -0.0013748655807856271,     -0.0015116922483710917,     -0.0016541841074022047,     -0.0018022306277955895,     -0.0019557217326371438,     -0.0021145478590091165,     -0.0022785999702937027,     -0.0024477695950194975,     -0.002621948878453611,     -0.0028010305999610517,     -0.002984908223586957,     -0.0031734759437217212,     -0.0033666287312007384,     -0.003564262375332991,     -0.003766273540107095,     -0.003972559819816892,     -0.00418301979809296,     -0.004397553111116016,     -0.004616060515365156,     -0.004838443960288803,     -0.005064606666324725,     -0.005294453208738211,     -0.005527889607795124,     -0.005764823425839241,     -0.006005163871902173,     -0.006248821914539615,     -0.006495710403660803,     -0.006745744201998579,     -0.0069988403258163575,     -0.007254918102417928,     -0.007513899336736138,     -0.007775708492380402,     -0.00804027288823908,     -0.008307522910574332,     -0.008577392252832638,     -0.008849818167867078,     -0.009124741743159458,     -0.009402108204909752,     -0.009681867256121511,     -0.009963973434832548,     -0.010248386511940334,     -0.010535071937512198,     -0.010824001314988297,     -0.011115152934195634,     -0.011408512361213359,     -0.011704073075890258,     -0.012001837196350139,     -0.01230181626346978,     -0.012604032122673095,     -0.012908517900440867,     -0.013215319087189498,     -0.013524494753942835,     -0.013836118899000181,     -0.01415028196835736,     -0.014467092546800215,     -0.014786679270385008,     -0.015109192967727008,     -0.015434809084940984,     -0.015763730419995115,     -0.01609619022444556,     -0.016432455726227584,     -0.016772832136277806,     -0.01711766722779699,     -0.017467356569075505,     -0.017822349533858067,     -0.01818315621441542,     -0.018550355399260202,     -0.018924603811679357,     -0.019306646835433424,     -0.019697331014985234,     -0.020097618673154263,     -0.020508605064782935,     -0.020931538587632723,     -0.021367844689471244,     -0.021819154265302558,     -0.022287337539508883,     -0.022774544680063506,     -0.02328325472059741,     -0.023816334794186114,     -0.02437711224451503,     -0.024969462918938826,     -0.025597919934029285,     -0.026267808526236995,     -0.02698541439047853,     -0.027758195353824726,     -0.028595049604865377,     -0.029506658400385702,     -0.03050592779582558,     -0.03160856338896816,     -0.03283382569296872,     -0.03420553367429838,     -0.03575341350964996,     -0.03751493399193989,     -0.039537837737239935,     -0.04188368231374758,     -0.04463287072863543,     -0.047891915432344064,     -0.05180411383565545,     -0.05656557088341379,     -0.062450117477638976,     -0.06985142327113511,     -0.07936644027000965,     -0.0919860410644449,     -0.10951080243243924,     -0.13520585957454503,     -0.1741044577744149,     -0.2312943256612192,     -0.30595539976500186,     -0.38023508389070926,     -0.41390517844161956,     -0.38023508389070926,     -0.30595539976500186,     -0.2312943256612192,     -0.1741044577744149,     -0.13520585957454503,     -0.10951080243243924,     -0.0919860410644449,     -0.07936644027000965,     -0.06985142327113511,     -0.062450117477638976,     -0.05656557088341379,     -0.05180411383565545,     -0.047891915432344064,     -0.04463287072863543,     -0.04188368231374758,     -0.039537837737239935,     -0.03751493399193989,     -0.03575341350964996,     -0.03420553367429838,     -0.03283382569296872,     -0.03160856338896816,     -0.03050592779582558,     -0.029506658400385702,     -0.028595049604865377,     -0.027758195353824726,     -0.02698541439047853,     -0.026267808526236995,     -0.025597919934029285,     -0.024969462918938826,     -0.02437711224451503,     -0.023816334794186114,     -0.02328325472059741,     -0.022774544680063506,     -0.022287337539508883,     -0.021819154265302558,     -0.021367844689471244,     -0.020931538587632723,     -0.020508605064782935,     -0.020097618673154263,     -0.019697331014985234,     -0.019306646835433424,     -0.018924603811679357,     -0.018550355399260202,     -0.01818315621441542,     -0.017822349533858067,     -0.017467356569075505,     -0.01711766722779699,     -0.016772832136277806,     -0.016432455726227584,     -0.01609619022444556,     -0.015763730419995115,     -0.015434809084940984,     -0.015109192967727008,     -0.014786679270385008,     -0.014467092546800215,     -0.01415028196835736,     -0.013836118899000181,     -0.013524494753942835,     -0.013215319087189498,     -0.012908517900440867,     -0.012604032122673095,     -0.01230181626346978,     -0.012001837196350139,     -0.011704073075890258,     -0.011408512361213359,     -0.011115152934195634,     -0.010824001314988297,     -0.010535071937512198,     -0.010248386511940334,     -0.009963973434832548,     -0.009681867256121511,     -0.009402108204909752,     -0.009124741743159458,     -0.008849818167867078,     -0.008577392252832638,     -0.008307522910574332,     -0.00804027288823908,     -0.007775708492380402,     -0.007513899336736138,     -0.007254918102417928,     -0.0069988403258163575,     -0.006745744201998579,     -0.006495710403660803,     -0.006248821914539615,     -0.006005163871902173,     -0.005764823425839241,     -0.005527889607795124,     -0.005294453208738211,     -0.005064606666324725,     -0.004838443960288803,     -0.004616060515365156,     -0.004397553111116016,     -0.00418301979809296,     -0.003972559819816892,     -0.003766273540107095,     -0.003564262375332991,     -0.0033666287312007384,     -0.0031734759437217212,     -0.002984908223586957,     -0.0028010305999610517,     -0.002621948878453611,     -0.0024477695950194975,     -0.0022785999702937027,     -0.0021145478590091165,     -0.0019557217326371438,     -0.0018022306277955895,     -0.0016541841074022047,     -0.0015116922483710917,     -0.0013748655807856271,     -0.0012438150848545291,     -0.0011186521439984919,     -0.000999488515888908,     -0.0008864363157302651,     -0.0007796079795609224,     -0.0006791162335758732,     -0.0005850740690194532,     -0.0004975947113244314,     -0.00041679158774765893,     -0.0003427782840766555,     -0.00027566851957461843,     -0.00021557608261832896,     -0.00016261478539887446,     -0.0001168983752614905,     -7.85404361627747e-05,     -4.765421571462279e-05,     -2.43523529882929e-05,     -8.74630645210362e-06,     -9.447276370389932e-07 \n);\nfloat V2[257] = float[](\n    3.6152926524010912e-06,     3.0349581881115167e-05,     8.251227428246466e-05,     0.000159728606358156,     0.0002616634953330754,     0.00038798312751388135,     0.0005383475093399678,     0.0007124087603215624,     0.0009098114964470455,     0.0011301931047976292,     0.0013731847549022479,     0.0016384115459869633,     0.001925493602321275,     0.0022340459968619706,     0.0025636793976814235,     0.002914000387154261,     0.003284611745878726,     0.0036751125219508145,     0.004085098285812474,     0.004514161587243675,     0.004961891628412366,     0.005427874339807152,     0.005911693088721369,     0.006412927663896278,     0.006931155384138865,     0.007465950288628234,     0.008016883254175542,     0.008583522514548145,     0.009165432769286743,     0.00976217546078901,     0.010373308749922696,     0.01099838738431855,     0.011636962273097002,     0.012288580463218943,     0.012952784934817751,     0.013629114355768437,     0.01431710281077852,     0.01501627950253695,     0.015726168422243978,     0.016446287986606103,     0.017176150638112755,     0.017915262405111976,     0.018663122417866582,     0.01941922237639397,     0.020183045965469656,     0.020954068211695414,     0.021731754769109612,     0.022515561074327346,     0.02330493162029983,     0.024099298992718624,     0.024898082820905325,     0.025700688620524076,     0.026506506452306934,     0.027314909795563693,     0.028125253943622065,     0.028936874234666322,     0.029749084234137933,     0.030561173942067782,     0.03137240733538375,     0.032182019847345894,     0.03298921595082181,     0.03379316582690471,     0.034593002101335056,     0.03538781630596281,     0.0361766544003783,     0.036958512560211584,     0.03773233177623388,     0.03849699228903221,     0.039251307246138574,     0.03999401545504576,     0.04072377364126954,     0.041439147287341695,     0.04213860088606101,     0.04282048645393335,     0.04348303110978635,     0.04412432262143361,     0.04474229346678791,     0.04533470253617205,     0.045899114551938756,     0.04643287672674262,     0.04693309208039321,     0.04739658931028141,     0.047819888131156736,     0.04819915989525903,     0.04853018237082181,     0.04880828781749745,     0.049028303391096546,     0.04918448230945025,     0.0492704244128571,     0.049278984207467166,     0.0492021640612788,     0.04903099001456368,     0.04875536695687918,     0.04836390927058717,     0.047843742363865294,     0.047180269477785496,     0.04635689697419395,     0.0453547098917611,     0.04415208786090931,     0.04272424929766518,     0.04104270928307668,     0.03907463349023829,     0.036782066961548544,     0.034121012397341936,     0.031040328086804,     0.027480410930205302,     0.02337162591475908,     0.018632441320896156,     0.013167231710216982,     0.006863723786068246,     -0.0004099062502383979,     -0.008808201933106143,     -0.01851163103111544,     -0.02972929941833521,     -0.04270007633514095,     -0.05768992657236502,     -0.0749810962349646,     -0.09484455939687024,     -0.11747841570567934,     -0.14287551516002187,     -0.1705372014235449,     -0.19884609170274356,     -0.2237444211513489,     -0.23631411139227632,     -0.21948377082252676,     -0.14657724939494474,     0.007491048865396655,     0.21475797362503896,     0.3249140654356813,     0.21475797362503896,     0.007491048865396655,     -0.14657724939494474,     -0.21948377082252676,     -0.23631411139227632,     -0.2237444211513489,     -0.19884609170274356,     -0.1705372014235449,     -0.14287551516002187,     -0.11747841570567934,     -0.09484455939687024,     -0.0749810962349646,     -0.05768992657236502,     -0.04270007633514095,     -0.02972929941833521,     -0.01851163103111544,     -0.008808201933106143,     -0.0004099062502383979,     0.006863723786068246,     0.013167231710216982,     0.018632441320896156,     0.02337162591475908,     0.027480410930205302,     0.031040328086804,     0.034121012397341936,     0.036782066961548544,     0.03907463349023829,     0.04104270928307668,     0.04272424929766518,     0.04415208786090931,     0.0453547098917611,     0.04635689697419395,     0.047180269477785496,     0.047843742363865294,     0.04836390927058717,     0.04875536695687918,     0.04903099001456368,     0.0492021640612788,     0.049278984207467166,     0.0492704244128571,     0.04918448230945025,     0.049028303391096546,     0.04880828781749745,     0.04853018237082181,     0.04819915989525903,     0.047819888131156736,     0.04739658931028141,     0.04693309208039321,     0.04643287672674262,     0.045899114551938756,     0.04533470253617205,     0.04474229346678791,     0.04412432262143361,     0.04348303110978635,     0.04282048645393335,     0.04213860088606101,     0.041439147287341695,     0.04072377364126954,     0.03999401545504576,     0.039251307246138574,     0.03849699228903221,     0.03773233177623388,     0.036958512560211584,     0.0361766544003783,     0.03538781630596281,     0.034593002101335056,     0.03379316582690471,     0.03298921595082181,     0.032182019847345894,     0.03137240733538375,     0.030561173942067782,     0.029749084234137933,     0.028936874234666322,     0.028125253943622065,     0.027314909795563693,     0.026506506452306934,     0.025700688620524076,     0.024898082820905325,     0.024099298992718624,     0.02330493162029983,     0.022515561074327346,     0.021731754769109612,     0.020954068211695414,     0.020183045965469656,     0.01941922237639397,     0.018663122417866582,     0.017915262405111976,     0.017176150638112755,     0.016446287986606103,     0.015726168422243978,     0.01501627950253695,     0.01431710281077852,     0.013629114355768437,     0.012952784934817751,     0.012288580463218943,     0.011636962273097002,     0.01099838738431855,     0.010373308749922696,     0.00976217546078901,     0.009165432769286743,     0.008583522514548145,     0.008016883254175542,     0.007465950288628234,     0.006931155384138865,     0.006412927663896278,     0.005911693088721369,     0.005427874339807152,     0.004961891628412366,     0.004514161587243675,     0.004085098285812474,     0.0036751125219508145,     0.003284611745878726,     0.002914000387154261,     0.0025636793976814235,     0.0022340459968619706,     0.001925493602321275,     0.0016384115459869633,     0.0013731847549022479,     0.0011301931047976292,     0.0009098114964470454,     0.0007124087603215625,     0.0005383475093399678,     0.0003879831275138813,     0.0002616634953330736,     0.00015972860635814204,     8.251227428221734e-05,     3.0349581881676337e-05,     3.6152926524010917e-06 \n);\n//The first 2 singular values:\nfloat S[2] = float[](\n    0.024767292133289997,     0.002064586756323816 \n);\n//center of the convolution\nint Nc = 128;\n\n    //do a convolution in the x direction on iChannel0\n    vec3 sum1 = vec3(0.0);\n    vec3 sum2 = vec3(0.0);\n    ivec2 coord = ivec2(fragCoord);\n    for (int i = -Nc; i <= Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        vec4 pixel = texelFetch(iChannel0, ivec2(coord.x + i, coord.y), 0);\n        vec3 pcolor = pow(pixel.xyz/(pixel.w+1e-6),vec3(1.25));\n\n        sum1 += pcolor * U1[i + Nc];\n        sum2 += pcolor * U2[i + Nc];\n    }\n\n    //write the sum packed to the output\n    fragColor = vec4(pack2vec3(sum1, sum2), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//second pass: do the convolution in the y direction   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//The first 2 columns of the U matrix:\nfloat U1[257] = float[](\n    -9.447276371199465e-07,     -8.746306452089847e-06,     -2.435235298829273e-05,     -4.7654215714622334e-05,     -7.854043616277397e-05,     -0.00011689837526148944,     -0.000162614785398873,     -0.00021557608261832699,     -0.0002756685195746159,     -0.00034277828407665246,     -0.00041679158774765503,     -0.0004975947113244268,     -0.0005850740690194479,     -0.000679116233575867,     -0.0007796079795609152,     -0.0008864363157302569,     -0.000999488515888899,     -0.0011186521439984813,     -0.001243815084854518,     -0.001374865580785615,     -0.0015116922483710783,     -0.0016541841074021895,     -0.0018022306277955728,     -0.001955721732637126,     -0.002114547859009097,     -0.0022785999702936823,     -0.002447769595019475,     -0.0026219488784535883,     -0.0028010305999610265,     -0.00298490822358693,     -0.0031734759437216926,     -0.0033666287312007067,     -0.003564262375332959,     -0.0037662735401070603,     -0.0039725598198168555,     -0.004183019798092924,     -0.004397553111115977,     -0.004616060515365114,     -0.00483844396028876,     -0.00506460666632468,     -0.005294453208738164,     -0.005527889607795078,     -0.005764823425839191,     -0.00600516387190212,     -0.006248821914539559,     -0.0064957104036607455,     -0.00674574420199852,     -0.006998840325816297,     -0.007254918102417866,     -0.0075138993367360705,     -0.00777570849238033,     -0.008040272888239006,     -0.008307522910574261,     -0.008577392252832557,     -0.008849818167867002,     -0.009124741743159375,     -0.009402108204909668,     -0.009681867256121426,     -0.009963973434832457,     -0.010248386511940238,     -0.010535071937512108,     -0.010824001314988205,     -0.011115152934195538,     -0.011408512361213262,     -0.01170407307589016,     -0.012001837196350031,     -0.012301816263469672,     -0.012604032122672987,     -0.012908517900440761,     -0.013215319087189387,     -0.013524494753942717,     -0.013836118899000062,     -0.014150281968357244,     -0.014467092546800097,     -0.01478667927038489,     -0.015109192967726885,     -0.015434809084940859,     -0.015763730419994987,     -0.016096190224445427,     -0.016432455726227452,     -0.016772832136277675,     -0.017117667227796854,     -0.01746735656907537,     -0.017822349533857935,     -0.01818315621441528,     -0.018550355399260064,     -0.018924603811679215,     -0.01930664683543329,     -0.019697331014985088,     -0.020097618673154127,     -0.020508605064782796,     -0.02093153858763259,     -0.021367844689471106,     -0.021819154265302423,     -0.022287337539508754,     -0.02277454468006337,     -0.023283254720597283,     -0.023816334794185986,     -0.024377112244514897,     -0.024969462918938697,     -0.02559791993402917,     -0.026267808526236888,     -0.026985414390478437,     -0.027758195353824622,     -0.028595049604865294,     -0.02950665840038563,     -0.030505927795825512,     -0.031608563388968114,     -0.03283382569296869,     -0.03420553367429835,     -0.03575341350964996,     -0.03751493399193991,     -0.03953783773723997,     -0.041883682313747644,     -0.04463287072863554,     -0.047891915432344216,     -0.05180411383565565,     -0.05656557088341403,     -0.0624501174776393,     -0.06985142327113548,     -0.07936644027001014,     -0.09198604106444543,     -0.10951080243243982,     -0.1352058595745457,     -0.1741044577744155,     -0.23129432566121957,     -0.3059553997650019,     -0.3802350838907087,     -0.4139051784416186,     -0.3802350838907087,     -0.3059553997650019,     -0.23129432566121957,     -0.1741044577744155,     -0.1352058595745457,     -0.10951080243243982,     -0.09198604106444543,     -0.07936644027001014,     -0.06985142327113548,     -0.0624501174776393,     -0.05656557088341403,     -0.05180411383565565,     -0.047891915432344216,     -0.04463287072863554,     -0.041883682313747644,     -0.03953783773723997,     -0.03751493399193991,     -0.03575341350964996,     -0.03420553367429835,     -0.03283382569296869,     -0.031608563388968114,     -0.030505927795825512,     -0.02950665840038563,     -0.028595049604865294,     -0.027758195353824622,     -0.026985414390478437,     -0.026267808526236888,     -0.02559791993402917,     -0.024969462918938697,     -0.024377112244514897,     -0.023816334794185986,     -0.023283254720597283,     -0.02277454468006337,     -0.022287337539508754,     -0.021819154265302423,     -0.021367844689471106,     -0.02093153858763259,     -0.020508605064782796,     -0.020097618673154127,     -0.019697331014985088,     -0.01930664683543329,     -0.018924603811679215,     -0.018550355399260064,     -0.01818315621441528,     -0.017822349533857935,     -0.01746735656907537,     -0.017117667227796854,     -0.016772832136277675,     -0.016432455726227452,     -0.016096190224445427,     -0.015763730419994987,     -0.015434809084940859,     -0.015109192967726885,     -0.01478667927038489,     -0.014467092546800097,     -0.014150281968357244,     -0.013836118899000062,     -0.013524494753942717,     -0.013215319087189387,     -0.012908517900440761,     -0.012604032122672987,     -0.012301816263469672,     -0.012001837196350031,     -0.01170407307589016,     -0.011408512361213262,     -0.011115152934195538,     -0.010824001314988205,     -0.010535071937512108,     -0.010248386511940238,     -0.009963973434832457,     -0.009681867256121426,     -0.009402108204909668,     -0.009124741743159375,     -0.008849818167867002,     -0.008577392252832557,     -0.008307522910574261,     -0.008040272888239006,     -0.00777570849238033,     -0.0075138993367360705,     -0.007254918102417866,     -0.006998840325816297,     -0.00674574420199852,     -0.0064957104036607455,     -0.006248821914539559,     -0.00600516387190212,     -0.005764823425839191,     -0.005527889607795078,     -0.005294453208738164,     -0.00506460666632468,     -0.00483844396028876,     -0.004616060515365114,     -0.004397553111115977,     -0.004183019798092924,     -0.0039725598198168555,     -0.0037662735401070603,     -0.003564262375332959,     -0.0033666287312007067,     -0.0031734759437216926,     -0.00298490822358693,     -0.0028010305999610265,     -0.0026219488784535883,     -0.002447769595019475,     -0.0022785999702936823,     -0.002114547859009097,     -0.001955721732637126,     -0.0018022306277955728,     -0.0016541841074021895,     -0.0015116922483710783,     -0.001374865580785615,     -0.001243815084854518,     -0.0011186521439984813,     -0.000999488515888899,     -0.0008864363157302569,     -0.0007796079795609152,     -0.000679116233575867,     -0.0005850740690194479,     -0.0004975947113244268,     -0.00041679158774765503,     -0.00034277828407665246,     -0.0002756685195746159,     -0.00021557608261832699,     -0.000162614785398873,     -0.00011689837526148942,     -7.854043616277397e-05,     -4.7654215714622334e-05,     -2.4352352988292662e-05,     -8.746306452103537e-06,     -9.447276370389832e-07 \n);\nfloat U2[257] = float[](\n    3.615292652081603e-06,     3.034958188141701e-05,     8.251227428235364e-05,     0.000159728606358156,     0.0002616634953330754,     0.0003879831275138821,     0.0005383475093399692,     0.000712408760321564,     0.0009098114964470476,     0.0011301931047976322,     0.0013731847549022518,     0.0016384115459869674,     0.0019254936023212802,     0.0022340459968619767,     0.0025636793976814296,     0.002914000387154268,     0.0032846117458787353,     0.0036751125219508223,     0.004085098285812485,     0.004514161587243684,     0.0049618916284123755,     0.005427874339807163,     0.005911693088721383,     0.006412927663896293,     0.006931155384138883,     0.0074659502886282505,     0.00801688325417556,     0.008583522514548168,     0.009165432769286764,     0.009762175460789037,     0.010373308749922722,     0.010998387384318575,     0.011636962273097034,     0.012288580463218972,     0.012952784934817784,     0.01362911435576847,     0.014317102810778557,     0.015016279502536983,     0.01572616842224402,     0.016446287986606144,     0.017176150638112786,     0.017915262405112032,     0.018663122417866627,     0.01941922237639401,     0.0201830459654697,     0.020954068211695473,     0.021731754769109667,     0.02251556107432741,     0.02330493162029988,     0.024099298992718683,     0.024898082820905387,     0.02570068862052413,     0.026506506452306997,     0.027314909795563752,     0.02812525394362213,     0.028936874234666395,     0.029749084234138,     0.03056117394206785,     0.031372407335383816,     0.03218201984734595,     0.0329892159508219,     0.03379316582690479,     0.034593002101335125,     0.03538781630596291,     0.03617665440037838,     0.03695851256021167,     0.03773233177623397,     0.03849699228903231,     0.03925130724613867,     0.03999401545504584,     0.040723773641269626,     0.04143914728734179,     0.04213860088606108,     0.04282048645393346,     0.04348303110978645,     0.044124322621433724,     0.04474229346678801,     0.04533470253617213,     0.04589911455193886,     0.046432876726742726,     0.046933092080393306,     0.04739658931028152,     0.047819888131156854,     0.048199159895259136,     0.04853018237082193,     0.04880828781749755,     0.04902830339109665,     0.04918448230945037,     0.04927042441285721,     0.049278984207467284,     0.04920216406127891,     0.04903099001456379,     0.04875536695687932,     0.04836390927058729,     0.04784374236386539,     0.04718026947778564,     0.04635689697419406,     0.04535470989176122,     0.04415208786090945,     0.0427242492976653,     0.041042709283076795,     0.039074633490238424,     0.036782066961548655,     0.03412101239734203,     0.031040328086804115,     0.027480410930205423,     0.023371625914759185,     0.018632441320896285,     0.013167231710217098,     0.006863723786068318,     -0.0004099062502382582,     -0.008808201933106016,     -0.018511631031115368,     -0.029729299418335072,     -0.04270007633514081,     -0.057689926572364866,     -0.07498109623496449,     -0.09484455939687013,     -0.11747841570567924,     -0.14287551516002173,     -0.17053720142354464,     -0.19884609170274342,     -0.22374442115134854,     -0.23631411139227593,     -0.21948377082252632,     -0.14657724939494451,     0.007491048865397561,     0.2147579736250399,     0.3249140654356825,     0.2147579736250399,     0.007491048865397561,     -0.14657724939494451,     -0.21948377082252632,     -0.23631411139227593,     -0.22374442115134854,     -0.19884609170274342,     -0.17053720142354464,     -0.14287551516002173,     -0.11747841570567924,     -0.09484455939687013,     -0.07498109623496449,     -0.057689926572364866,     -0.04270007633514081,     -0.029729299418335072,     -0.018511631031115368,     -0.008808201933106016,     -0.0004099062502382582,     0.006863723786068318,     0.013167231710217098,     0.018632441320896285,     0.023371625914759185,     0.027480410930205423,     0.031040328086804115,     0.03412101239734203,     0.036782066961548655,     0.039074633490238424,     0.041042709283076795,     0.0427242492976653,     0.04415208786090945,     0.04535470989176122,     0.04635689697419406,     0.04718026947778564,     0.04784374236386539,     0.04836390927058729,     0.04875536695687932,     0.04903099001456379,     0.04920216406127891,     0.049278984207467284,     0.04927042441285721,     0.04918448230945037,     0.04902830339109665,     0.04880828781749755,     0.04853018237082193,     0.048199159895259136,     0.047819888131156854,     0.04739658931028152,     0.046933092080393306,     0.046432876726742726,     0.04589911455193886,     0.04533470253617213,     0.04474229346678801,     0.044124322621433724,     0.04348303110978645,     0.04282048645393346,     0.04213860088606108,     0.04143914728734179,     0.040723773641269626,     0.03999401545504584,     0.03925130724613867,     0.03849699228903231,     0.03773233177623397,     0.03695851256021167,     0.03617665440037838,     0.03538781630596291,     0.034593002101335125,     0.03379316582690479,     0.0329892159508219,     0.03218201984734595,     0.031372407335383816,     0.03056117394206785,     0.029749084234138,     0.028936874234666395,     0.02812525394362213,     0.027314909795563752,     0.026506506452306997,     0.02570068862052413,     0.024898082820905387,     0.024099298992718683,     0.02330493162029988,     0.02251556107432741,     0.021731754769109667,     0.020954068211695473,     0.0201830459654697,     0.01941922237639401,     0.018663122417866627,     0.017915262405112032,     0.017176150638112786,     0.016446287986606144,     0.01572616842224402,     0.015016279502536983,     0.014317102810778557,     0.01362911435576847,     0.012952784934817784,     0.012288580463218972,     0.011636962273097034,     0.010998387384318575,     0.010373308749922722,     0.009762175460789037,     0.009165432769286764,     0.008583522514548168,     0.00801688325417556,     0.0074659502886282505,     0.006931155384138883,     0.006412927663896293,     0.005911693088721383,     0.005427874339807163,     0.0049618916284123755,     0.004514161587243684,     0.004085098285812485,     0.0036751125219508223,     0.0032846117458787353,     0.002914000387154268,     0.0025636793976814296,     0.0022340459968619767,     0.0019254936023212802,     0.0016384115459869674,     0.0013731847549022518,     0.0011301931047976322,     0.0009098114964470476,     0.000712408760321564,     0.0005383475093399692,     0.00038798312751388205,     0.00026166349533307434,     0.00015972860635814247,     8.251227428221754e-05,     3.0349581881676408e-05,     3.6152926524011005e-06 \n);\n//The first 2 rows of the V matrix:\nfloat V1[257] = float[](\n    -9.447276370389931e-07,     -8.746306452311892e-06,     -2.4352352988296633e-05,     -4.7654215714622774e-05,     -7.85404361627747e-05,     -0.0001168983752614905,     -0.00016261478539887446,     -0.00021557608261832896,     -0.00027566851957461843,     -0.0003427782840766555,     -0.00041679158774765893,     -0.0004975947113244314,     -0.0005850740690194532,     -0.0006791162335758732,     -0.0007796079795609224,     -0.0008864363157302651,     -0.000999488515888908,     -0.0011186521439984919,     -0.0012438150848545291,     -0.0013748655807856271,     -0.0015116922483710917,     -0.0016541841074022047,     -0.0018022306277955895,     -0.0019557217326371438,     -0.0021145478590091165,     -0.0022785999702937027,     -0.0024477695950194975,     -0.002621948878453611,     -0.0028010305999610517,     -0.002984908223586957,     -0.0031734759437217212,     -0.0033666287312007384,     -0.003564262375332991,     -0.003766273540107095,     -0.003972559819816892,     -0.00418301979809296,     -0.004397553111116016,     -0.004616060515365156,     -0.004838443960288803,     -0.005064606666324725,     -0.005294453208738211,     -0.005527889607795124,     -0.005764823425839241,     -0.006005163871902173,     -0.006248821914539615,     -0.006495710403660803,     -0.006745744201998579,     -0.0069988403258163575,     -0.007254918102417928,     -0.007513899336736138,     -0.007775708492380402,     -0.00804027288823908,     -0.008307522910574332,     -0.008577392252832638,     -0.008849818167867078,     -0.009124741743159458,     -0.009402108204909752,     -0.009681867256121511,     -0.009963973434832548,     -0.010248386511940334,     -0.010535071937512198,     -0.010824001314988297,     -0.011115152934195634,     -0.011408512361213359,     -0.011704073075890258,     -0.012001837196350139,     -0.01230181626346978,     -0.012604032122673095,     -0.012908517900440867,     -0.013215319087189498,     -0.013524494753942835,     -0.013836118899000181,     -0.01415028196835736,     -0.014467092546800215,     -0.014786679270385008,     -0.015109192967727008,     -0.015434809084940984,     -0.015763730419995115,     -0.01609619022444556,     -0.016432455726227584,     -0.016772832136277806,     -0.01711766722779699,     -0.017467356569075505,     -0.017822349533858067,     -0.01818315621441542,     -0.018550355399260202,     -0.018924603811679357,     -0.019306646835433424,     -0.019697331014985234,     -0.020097618673154263,     -0.020508605064782935,     -0.020931538587632723,     -0.021367844689471244,     -0.021819154265302558,     -0.022287337539508883,     -0.022774544680063506,     -0.02328325472059741,     -0.023816334794186114,     -0.02437711224451503,     -0.024969462918938826,     -0.025597919934029285,     -0.026267808526236995,     -0.02698541439047853,     -0.027758195353824726,     -0.028595049604865377,     -0.029506658400385702,     -0.03050592779582558,     -0.03160856338896816,     -0.03283382569296872,     -0.03420553367429838,     -0.03575341350964996,     -0.03751493399193989,     -0.039537837737239935,     -0.04188368231374758,     -0.04463287072863543,     -0.047891915432344064,     -0.05180411383565545,     -0.05656557088341379,     -0.062450117477638976,     -0.06985142327113511,     -0.07936644027000965,     -0.0919860410644449,     -0.10951080243243924,     -0.13520585957454503,     -0.1741044577744149,     -0.2312943256612192,     -0.30595539976500186,     -0.38023508389070926,     -0.41390517844161956,     -0.38023508389070926,     -0.30595539976500186,     -0.2312943256612192,     -0.1741044577744149,     -0.13520585957454503,     -0.10951080243243924,     -0.0919860410644449,     -0.07936644027000965,     -0.06985142327113511,     -0.062450117477638976,     -0.05656557088341379,     -0.05180411383565545,     -0.047891915432344064,     -0.04463287072863543,     -0.04188368231374758,     -0.039537837737239935,     -0.03751493399193989,     -0.03575341350964996,     -0.03420553367429838,     -0.03283382569296872,     -0.03160856338896816,     -0.03050592779582558,     -0.029506658400385702,     -0.028595049604865377,     -0.027758195353824726,     -0.02698541439047853,     -0.026267808526236995,     -0.025597919934029285,     -0.024969462918938826,     -0.02437711224451503,     -0.023816334794186114,     -0.02328325472059741,     -0.022774544680063506,     -0.022287337539508883,     -0.021819154265302558,     -0.021367844689471244,     -0.020931538587632723,     -0.020508605064782935,     -0.020097618673154263,     -0.019697331014985234,     -0.019306646835433424,     -0.018924603811679357,     -0.018550355399260202,     -0.01818315621441542,     -0.017822349533858067,     -0.017467356569075505,     -0.01711766722779699,     -0.016772832136277806,     -0.016432455726227584,     -0.01609619022444556,     -0.015763730419995115,     -0.015434809084940984,     -0.015109192967727008,     -0.014786679270385008,     -0.014467092546800215,     -0.01415028196835736,     -0.013836118899000181,     -0.013524494753942835,     -0.013215319087189498,     -0.012908517900440867,     -0.012604032122673095,     -0.01230181626346978,     -0.012001837196350139,     -0.011704073075890258,     -0.011408512361213359,     -0.011115152934195634,     -0.010824001314988297,     -0.010535071937512198,     -0.010248386511940334,     -0.009963973434832548,     -0.009681867256121511,     -0.009402108204909752,     -0.009124741743159458,     -0.008849818167867078,     -0.008577392252832638,     -0.008307522910574332,     -0.00804027288823908,     -0.007775708492380402,     -0.007513899336736138,     -0.007254918102417928,     -0.0069988403258163575,     -0.006745744201998579,     -0.006495710403660803,     -0.006248821914539615,     -0.006005163871902173,     -0.005764823425839241,     -0.005527889607795124,     -0.005294453208738211,     -0.005064606666324725,     -0.004838443960288803,     -0.004616060515365156,     -0.004397553111116016,     -0.00418301979809296,     -0.003972559819816892,     -0.003766273540107095,     -0.003564262375332991,     -0.0033666287312007384,     -0.0031734759437217212,     -0.002984908223586957,     -0.0028010305999610517,     -0.002621948878453611,     -0.0024477695950194975,     -0.0022785999702937027,     -0.0021145478590091165,     -0.0019557217326371438,     -0.0018022306277955895,     -0.0016541841074022047,     -0.0015116922483710917,     -0.0013748655807856271,     -0.0012438150848545291,     -0.0011186521439984919,     -0.000999488515888908,     -0.0008864363157302651,     -0.0007796079795609224,     -0.0006791162335758732,     -0.0005850740690194532,     -0.0004975947113244314,     -0.00041679158774765893,     -0.0003427782840766555,     -0.00027566851957461843,     -0.00021557608261832896,     -0.00016261478539887446,     -0.0001168983752614905,     -7.85404361627747e-05,     -4.765421571462279e-05,     -2.43523529882929e-05,     -8.74630645210362e-06,     -9.447276370389932e-07 \n);\nfloat V2[257] = float[](\n    3.6152926524010912e-06,     3.0349581881115167e-05,     8.251227428246466e-05,     0.000159728606358156,     0.0002616634953330754,     0.00038798312751388135,     0.0005383475093399678,     0.0007124087603215624,     0.0009098114964470455,     0.0011301931047976292,     0.0013731847549022479,     0.0016384115459869633,     0.001925493602321275,     0.0022340459968619706,     0.0025636793976814235,     0.002914000387154261,     0.003284611745878726,     0.0036751125219508145,     0.004085098285812474,     0.004514161587243675,     0.004961891628412366,     0.005427874339807152,     0.005911693088721369,     0.006412927663896278,     0.006931155384138865,     0.007465950288628234,     0.008016883254175542,     0.008583522514548145,     0.009165432769286743,     0.00976217546078901,     0.010373308749922696,     0.01099838738431855,     0.011636962273097002,     0.012288580463218943,     0.012952784934817751,     0.013629114355768437,     0.01431710281077852,     0.01501627950253695,     0.015726168422243978,     0.016446287986606103,     0.017176150638112755,     0.017915262405111976,     0.018663122417866582,     0.01941922237639397,     0.020183045965469656,     0.020954068211695414,     0.021731754769109612,     0.022515561074327346,     0.02330493162029983,     0.024099298992718624,     0.024898082820905325,     0.025700688620524076,     0.026506506452306934,     0.027314909795563693,     0.028125253943622065,     0.028936874234666322,     0.029749084234137933,     0.030561173942067782,     0.03137240733538375,     0.032182019847345894,     0.03298921595082181,     0.03379316582690471,     0.034593002101335056,     0.03538781630596281,     0.0361766544003783,     0.036958512560211584,     0.03773233177623388,     0.03849699228903221,     0.039251307246138574,     0.03999401545504576,     0.04072377364126954,     0.041439147287341695,     0.04213860088606101,     0.04282048645393335,     0.04348303110978635,     0.04412432262143361,     0.04474229346678791,     0.04533470253617205,     0.045899114551938756,     0.04643287672674262,     0.04693309208039321,     0.04739658931028141,     0.047819888131156736,     0.04819915989525903,     0.04853018237082181,     0.04880828781749745,     0.049028303391096546,     0.04918448230945025,     0.0492704244128571,     0.049278984207467166,     0.0492021640612788,     0.04903099001456368,     0.04875536695687918,     0.04836390927058717,     0.047843742363865294,     0.047180269477785496,     0.04635689697419395,     0.0453547098917611,     0.04415208786090931,     0.04272424929766518,     0.04104270928307668,     0.03907463349023829,     0.036782066961548544,     0.034121012397341936,     0.031040328086804,     0.027480410930205302,     0.02337162591475908,     0.018632441320896156,     0.013167231710216982,     0.006863723786068246,     -0.0004099062502383979,     -0.008808201933106143,     -0.01851163103111544,     -0.02972929941833521,     -0.04270007633514095,     -0.05768992657236502,     -0.0749810962349646,     -0.09484455939687024,     -0.11747841570567934,     -0.14287551516002187,     -0.1705372014235449,     -0.19884609170274356,     -0.2237444211513489,     -0.23631411139227632,     -0.21948377082252676,     -0.14657724939494474,     0.007491048865396655,     0.21475797362503896,     0.3249140654356813,     0.21475797362503896,     0.007491048865396655,     -0.14657724939494474,     -0.21948377082252676,     -0.23631411139227632,     -0.2237444211513489,     -0.19884609170274356,     -0.1705372014235449,     -0.14287551516002187,     -0.11747841570567934,     -0.09484455939687024,     -0.0749810962349646,     -0.05768992657236502,     -0.04270007633514095,     -0.02972929941833521,     -0.01851163103111544,     -0.008808201933106143,     -0.0004099062502383979,     0.006863723786068246,     0.013167231710216982,     0.018632441320896156,     0.02337162591475908,     0.027480410930205302,     0.031040328086804,     0.034121012397341936,     0.036782066961548544,     0.03907463349023829,     0.04104270928307668,     0.04272424929766518,     0.04415208786090931,     0.0453547098917611,     0.04635689697419395,     0.047180269477785496,     0.047843742363865294,     0.04836390927058717,     0.04875536695687918,     0.04903099001456368,     0.0492021640612788,     0.049278984207467166,     0.0492704244128571,     0.04918448230945025,     0.049028303391096546,     0.04880828781749745,     0.04853018237082181,     0.04819915989525903,     0.047819888131156736,     0.04739658931028141,     0.04693309208039321,     0.04643287672674262,     0.045899114551938756,     0.04533470253617205,     0.04474229346678791,     0.04412432262143361,     0.04348303110978635,     0.04282048645393335,     0.04213860088606101,     0.041439147287341695,     0.04072377364126954,     0.03999401545504576,     0.039251307246138574,     0.03849699228903221,     0.03773233177623388,     0.036958512560211584,     0.0361766544003783,     0.03538781630596281,     0.034593002101335056,     0.03379316582690471,     0.03298921595082181,     0.032182019847345894,     0.03137240733538375,     0.030561173942067782,     0.029749084234137933,     0.028936874234666322,     0.028125253943622065,     0.027314909795563693,     0.026506506452306934,     0.025700688620524076,     0.024898082820905325,     0.024099298992718624,     0.02330493162029983,     0.022515561074327346,     0.021731754769109612,     0.020954068211695414,     0.020183045965469656,     0.01941922237639397,     0.018663122417866582,     0.017915262405111976,     0.017176150638112755,     0.016446287986606103,     0.015726168422243978,     0.01501627950253695,     0.01431710281077852,     0.013629114355768437,     0.012952784934817751,     0.012288580463218943,     0.011636962273097002,     0.01099838738431855,     0.010373308749922696,     0.00976217546078901,     0.009165432769286743,     0.008583522514548145,     0.008016883254175542,     0.007465950288628234,     0.006931155384138865,     0.006412927663896278,     0.005911693088721369,     0.005427874339807152,     0.004961891628412366,     0.004514161587243675,     0.004085098285812474,     0.0036751125219508145,     0.003284611745878726,     0.002914000387154261,     0.0025636793976814235,     0.0022340459968619706,     0.001925493602321275,     0.0016384115459869633,     0.0013731847549022479,     0.0011301931047976292,     0.0009098114964470454,     0.0007124087603215625,     0.0005383475093399678,     0.0003879831275138813,     0.0002616634953330736,     0.00015972860635814204,     8.251227428221734e-05,     3.0349581881676337e-05,     3.6152926524010917e-06 \n);\n//The first 2 singular values:\nfloat S[2] = float[](\n    0.024767292133289997,     0.002064586756323816 \n);\n//center of the convolution\nint Nc = 128;\n    //do a convolution in the y direction on iChannel0\n    vec3 sum = vec3(0.0);\n    ivec2 coord = ivec2(fragCoord);\n    for (int i = -Nc; i <= Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        vec4 pixel = texelFetch(iChannel0, ivec2(coord.x, coord.y + i), 0);\n        \n        vec3 val1, val2;\n        unpack2vec3(pixel.xyz, val1, val2);\n\n        sum += val1 * V1[i + Nc] * S[0];\n        sum += val2 * V2[i + Nc] * S[1];\n    }\n\n    fragColor = vec4(sum, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}