{
    "Shader": {
        "info": {
            "date": "1536239189",
            "description": "sky lighting on screen via occluder with holes (radius r, height h to screen). \n#THIN=0 -> thick\nRef image (see bottom) from \"strange shadows\" [url]https://www.boredpanda.com/amazing-shadows-optical-illusions/[/url]:\nuh, maybe wrong light source model.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MtycDW",
            "likes": 7,
            "name": "soft shadows through holes",
            "published": 3,
            "tags": [
                "shadows",
                "convolution",
                "soft"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 651
        },
        "renderpass": [
            {
                "code": "#define THIN 1  // 1: no thickness 0: thickness = 2e\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float h = .01 + .6*(.5+.5*sin(iTime)),    // distance occluder-screen\n          r = .3,                             // holes radius\n          e = .15/2.,                         // occluder thickness/2\n          I = 4.;                             // source intensity\n          \n    O -= O;\n\n    U *= 4. / iResolution.y;                  // scaling\n    U.x -= .5 * mod(floor(U.y),2.);\n    U = fract( U ) - .5;                      // local coordinates % hole center\n\n    for (int k=0; k<25; k++) {                // accounts for center + neighbor cells\n        vec2 P = vec2(k%5-2,k/5-2);\n        P.x -= .5 * mod(floor(P.y),2.);       // hole center\n        float d = length( U-P ),              // distance to it\n              a = atan(h,d-r) - atan(h,d+r);  // hole (thus sky) apperture from pixel on screen        \n#if THIN // thin occluder\n        a *= a;                               // solid angle = PI.(a/2)Â²\n#else // thick occluder (approx footprint by ellipse)\n        a *=   max( atan(h+e,d-r), atan(h-e,d-r) )\n             - max( atan(h+e,d+r), atan(h-e,d+r) );\n#endif\n        O +=  a / 8.; // hole (thus sky) solid angle / 2Pi from pixel on screen\n    }\n    \n    O = pow( I*O, vec4(1./2.2) );             // to sRGB / gamma\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}