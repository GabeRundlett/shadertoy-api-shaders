{
    "Shader": {
        "info": {
            "date": "1582477138",
            "description": "fun with raymarching + reflections/refractions",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGSWR",
            "likes": 12,
            "name": "RefractionTest_honorfil",
            "published": 3,
            "tags": [
                "refractionreflectioncubemapraymarch"
            ],
            "usePreview": 0,
            "username": "Honorfil",
            "viewed": 447
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\n#define baseColor vec3(0.6, 0.9, 0.9)\n\nmat2 GetRot(float alpha)\n{\n    float c = cos(alpha);\n    float s = sin(alpha);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 p)\n{\n    float disturbance = (sin(iTime * 2.) * .5 + .5) * .1 + .05;\n    float pOffset = noise(p * 2.5 + iTime) * disturbance;\n\n    p += pOffset;\n    return (length(p) - 1.) * (1. - 0.35);\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, .0);\n    \n    vec3 n = d - vec3(\n    \tGetDist(p - e.xyy),\n    \tGetDist(p - e.yxy),\n    \tGetDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float d0 = 0.;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * d0;\n        float ds = abs(GetDist(p));\n        d0 += ds;\n        \n        if (d0 > MAX_DIST)\n        {\n            return -1.;\n        }\n        \n        if (ds < SURF_DIST)\n        {\n            break;\n        }\n    }\n    \n    return min(d0, MAX_DIST);\n}\n\nvec3 decodeGamma(vec3 value)\n{\n    vec3 result;\n    result.x = sqrt(value.x);\n    result.y = sqrt(value.y);\n    result.z = sqrt(value.z);\n    \n    return result;\n}\n\nvec3 encodeGamma(vec3 value)\n{\n    vec3 result;\n    result.x = value.x * value.x;\n    result.y = value.y * value.y;\n    result.z = value.z * value.z;\n    \n    return result;\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec3 p)\n{   \n    vec3 lightPos = ro + rd * 3.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float diff = clamp(dot(n, l)*.5+.5, 0., 1.) * .9;\n\n    vec3 refractedVec = refract(rd, n, .2);\n    vec3 reflectedVec = reflect(rd, n);\n    \n    vec3 refractedCol = decodeGamma(texture(iChannel0, refractedVec).rgb);\n    \n    reflectedVec.y *= -1.;\n    vec3 reflectedCol = decodeGamma(texture(iChannel0, reflectedVec).rgb);\n    \n    float nDotV = 1. - clamp01(dot(n, -rd));\n    nDotV = pow(nDotV, 2.4) * .4;\n    \n    return baseColor * diff + refractedCol * .2 + reflectedCol * .4 + nDotV;\n}\n\nvec3 SetupCamera(vec2 uv, vec3 camPos, vec3 lookAt)\n{\n    const float zoom = 0.77;\n    \n    vec3 forward = normalize(lookAt - camPos);\n    vec3 right = cross(vec3(0., 1., 0.), forward);\n    vec3 up = cross(forward, right);\n    \n    vec3 center = camPos + forward * zoom;\n    vec3 intersectionPoint = center + uv.x * right + uv.y * up;\n    \n    return normalize(intersectionPoint - camPos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(cos(iTime* .1) , sin(iTime* .1), sin(iTime* .1)) * 2.;  \n    vec3 rd = SetupCamera(uv, ro, vec3(0., 0., 0.));\n\n    float d = RayMarch(ro, rd);\n    if (d < 0.)\n    {\n        float l = 1.3 - length(uv);\n        col = decodeGamma(texture(iChannel0, rd).rgb) * l;\n    }\n    else\n    {\n        vec3 p = ro + rd * d;\n    \tcol = Render(ro, rd, p);\n    }\n    \n\n    fragColor = vec4(encodeGamma(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define clamp01(x) clamp(x, 0.0, 1.0)\n\n\nfloat hash( float n )\n{\n  return fract(cos(n)*41415.92653);\n}\n\nfloat noise( in vec3 x )\n{\n  vec3 p  = floor(x);\n  vec3 f  = smoothstep(0.0, 1.0, fract(x));\n  float n = p.x + p.y*57.0 + 113.0*p.z;\n\n  return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n    mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}