{
    "Shader": {
        "info": {
            "date": "1626510162",
            "description": "Concrete Jungle",
            "flags": 0,
            "hasliked": 0,
            "id": "NlfSDj",
            "likes": 14,
            "name": "Concrete Jungle",
            "published": 3,
            "tags": [
                "concrete"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 256\n#define MAX_DIST 200.\n#define SURF_DIST .0001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define EDGE_WIDTH 0.01\n\n#define MATERIAL_DIFFUSE0 0\n#define MATERIAL_REFLECT 10\n\nfloat edge;\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// https://iquilezles.org/articles/fbmsdf\n// https://www.shadertoy.com/view/3dGSWR\nfloat sph( vec3 i, vec3 f, vec3 c )\n{\n    // random radius at grid vertex i+c (please replace this hash by\n    // something better if you plan to use this for a real application)\n    vec3  p = 17.0*fract( (i+c)*0.3183099+vec3(0.11,0.17,0.13) );\n    float w = fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n    float r = 0.8*w*w;\n    // distance to sphere at grid vertex i+c\n    return sdBox((f-c),vec3(r));\n}\n\n// https://iquilezles.org/articles/fbmsdf\nfloat sdBase( in vec3 p , bool animate)\n{\n    float t = iTime*2.0;\n    //if(animate)p.y-=t;\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    return min(min(min(sph(i,f,vec3(0,0,0)),\n                       sph(i,f,vec3(0,0,1))),\n                   min(sph(i,f,vec3(0,1,0)),\n                       sph(i,f,vec3(0,1,1)))),\n               min(min(sph(i,f,vec3(1,0,0)),\n                       sph(i,f,vec3(1,0,1))),\n                   min(sph(i,f,vec3(1,1,0)),\n                       sph(i,f,vec3(1,1,1)))));\n}\n\n\nvec2 GetDist(vec3 p) {\n    float t = iTime*6.0;\n    p.z+=t;\n    \n    vec3 prevP = p;\n    float d = sdBase(p,true);\n    float d2 = sdBase(p,false);\n    \n    p.xz = mod(p.xz,20.0)-10.0;\n    float b = sdBox(p,vec3(3.0,10.0,3.0));\n    \n    d = max(b,-d);\n    d2 = min(max(-p.y+10.0,-d2),max(p.y+10.0,-d2));\n   \n    vec2 res = vec2(min(d,d2)*0.5, MATERIAL_DIFFUSE0);\n       \n    vec2 model = res;\n    return model;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side) {\n    vec2 dO = vec2(0.0);\n    float lastDistEval = 1e10;\n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if (lastDistEval < EDGE_WIDTH && dS.x > lastDistEval + 0.001) {\n\t\t\tedge = 1.0;\n\t\t}\n        if (dS.x < lastDistEval) lastDistEval = dS.x;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n   \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n   \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n   \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 col) {\n    float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n    return vec3(dif)*col;\n}\n\nvec3 reflectMaterial(vec3 p, vec3 rd, vec3 n) {\n    vec3 r = reflect(rd,n);\n    vec3 col = r;\n   \n    float k = r.y*2.5+2.5;\n    col = mix(col*vec3(0.5),vec3(0.5),k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n   \n    vec3 ro = vec3(0, 2, -3.5);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-30.0));\n    //ro.xz *= Rot(radians(180.0));\n    \n    if(mod(iTime,20.0)<17.0){\n        ro.xz *= Rot(-iTime*.1+1.0);\n    } else {\n        ro.xz *= Rot(radians(180.0));\n    }\n    \n    #endif\n   \n    vec3 rd = R(uv, ro, vec3(0,0,0), 3.0);\n    vec2 d = RayMarch(ro, rd, 1.);\n    vec3 col = vec3((map(uv.y,0.0,1.0,1.0,0.5))-0.6);\n   \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n       \n        int mat = int(d.y);\n        if(mat == MATERIAL_DIFFUSE0){\n            col = diffuseMaterial(n,vec3(1.0));\n        } else if(mat == MATERIAL_REFLECT) {\n            col = reflectMaterial(p,rd,n);\n        }\n\n    }\n   \n    // gamma correction\n    col = pow( col, vec3(0.6545) );\n    col = mix(col,vec3(0.3,0.3,0.3),edge);\n   \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}