{
    "Shader": {
        "info": {
            "date": "1678009079",
            "description": "Basic infinite Sphere raymarch repetition. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Ddc3Ws",
            "likes": 2,
            "name": "Basic Learn Sphere Repetition",
            "published": 3,
            "tags": [
                "raymarch",
                "sphere",
                "fractals",
                "learn"
            ],
            "usePreview": 0,
            "username": "rge15",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "#define NUM_STEPS 70\n#define COLL_DIST 0.001\n#define MAX_DIST 100. \n\nfloat GetDist( in vec3 spLoc )\n{\n    vec3 modu = vec3(1.);\n    vec3 point = mod(spLoc+0.5*modu,modu) - 0.5*modu;\n\n    return length(point) - 0.08;\n}\n\n\nfloat RayMarch(in vec3 rO, in vec3 rD)\n{\n    float dist = 0.;\n    \n    for(int i = 0; i < NUM_STEPS; i++)\n    {\n        vec3 spLoc = rO + dist * rD;\n        float d = GetDist(spLoc);\n        dist += d;\n        if( dist > MAX_DIST || d < COLL_DIST)\n            return dist;\n    \n    }\n    return dist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 rO = vec3(0.5,1.,1.-iTime);\n    vec3 rD = normalize(vec3(uv,1.));\n\n\n    float d = RayMarch(rO, rD);\n\n    // Time varying pixel color\n    vec3 col = vec3(d/MAX_DIST);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}