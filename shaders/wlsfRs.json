{
    "Shader": {
        "info": {
            "date": "1597758694",
            "description": "Trying out Möller-Trumbore analytical triangle intersection test for ray tracing. Apparently, this is supposed to be faster than the inside-outside or the barycentric coordinates intersection test. ",
            "flags": 0,
            "hasliked": 0,
            "id": "wlsfRs",
            "likes": 9,
            "name": "Möller-Trumbore Intersection",
            "published": 3,
            "tags": [
                "raytracing",
                "triangle",
                "intersection",
                "barycentric"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "#define EPS .000002\n\n#define AA 4\n\n// uncomment this to enable backface culling\n// #define CULL_BACKFACE\n\nconst vec3 cameraPosition = vec3(0., 2., 12.);\n\nstruct Ray\n{\n\tvec3 origin, direction;  \n};\n\nvec2 hash21(uint q)\n{\n\tuvec2 n = q * uvec2(1597334673U, 3812015801U);\n\tn = (n.x ^ n.y) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(n) * (1. / float(0xffffffffU));\n}\n\nmat3 getCameraMatrix(vec3 origin, vec3 target)\n{\n    vec3 lookAt = normalize(target - origin);\n    vec3 right = normalize(cross(lookAt, vec3(0., 1., 0.)));\n    vec3 up = normalize(cross(right, lookAt));\n    return mat3(right, up, lookAt);\n}\n\nRay getCameraRay(vec2 uv)\n{\n    vec3 origin = cameraPosition;\n    vec3 target = vec3(0., 1., 0.);\n    mat3 camera = getCameraMatrix(origin, target);\n    vec3 direction = normalize(camera * vec3(uv, 2.));\n    return Ray(origin, direction);\n}\n\n/**\nTomas Möller & Ben Trumbore (1997) Fast, Minimum Storage Ray-Triangle Intersection,\nJournal of Graphics Tools\nhttps://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf\n*/\nvec3 rayTriangleIntersect(Ray ray, vec3 A, vec3 B, vec3 C)\n{\n\tvec3 result = vec3(-1.);\n    vec3 e1 = B - A; vec3 e2 = C - A;\n    vec3 dxe2 = cross(ray.direction, e2);\n    float det = dot(dxe2, e1);\n    // ray parallel to triangle plane\n\tif (abs(det) < EPS\n#ifdef CULL_BACKFACE\n\t// triangle facing away from camera (with vertices wound counter-clockwise)\n\t|| det < EPS\n#endif\n\t) return result;\n    float invDet = 1. / det;\n    vec3 t = ray.origin - A;\n    float u = dot(dxe2, t) * invDet;\n    vec3 txe1 = cross(t, e1);\n    float v = dot(txe1, ray.direction) * invDet;\n    if (u < 0. || v < 0. || u + v > 1.) return result;\n    float d = dot(txe1, e2) * invDet;\n    result = vec3(d, u, v);\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = vec3(0.);\n    int aaSamples = AA * AA;\n    for (int i = 0; i < aaSamples; ++i)\n    {\n        // Find x & y subpixel jitter locations\n        float x = mod(float(i), float(AA));\n        float y = mod(float(i / AA), float(AA));\n        \n        // Subpixel jitter\n        vec2 jitter = (hash21(uint(i)) + vec2(x, y)) / float(AA);\n        \n        vec2 uv = (2. * (fragCoord + jitter) - iResolution.xy) / iResolution.y;\n        \n        Ray ray = getCameraRay(uv);\n        \n        float t = iTime * .75;\n        \n        vec3 tri = rayTriangleIntersect(ray, vec3(0., 4. * sin(t), 2. * cos(t)), \n                                             vec3(-3. * cos(t), -3. * sin(t), -2.), \n                                             vec3(3. * cos(t), -1., -6. * sin(t)));\n        \n        // Color the triangle using barycentric weights\n        if (tri.x > 0.)\n\t\t\tcol += vec3(tri.yz, 1. - tri.y - tri.z);\n    }\n    \n    fragColor = vec4(pow(col/float(aaSamples), vec3(.4545)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}