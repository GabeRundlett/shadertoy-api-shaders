{
    "Shader": {
        "info": {
            "date": "1573749913",
            "description": "A new way of sdf squares, sdf a diamond then rotate it by 45 degrees.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsySWR",
            "likes": 6,
            "name": "Codevember05 - Light",
            "published": 3,
            "tags": [
                "light",
                "square",
                "geometry",
                "codevember"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float PI = 3.14159265;\n\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\n\nfloat lenny(vec2 uv)\n{\n  return abs(uv.x)+abs(uv.y);\n}\n\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\n\nvec3 sat(vec3 v)\n{\n  return vec3(sat(v.x),sat(v.y), sat(v.z));\n}\n\nfloat _sub(float a, float b)\n{\n  return max(-a,b);\n}\n\nfloat _union(float a, float b)\n{\n  return min(a,b);\n}\n\nfloat sdf_sqr(vec2 uv, float sz)\n{\n  return lenny(uv*r2d(PI/4.))-sz;\n}\n\nfloat sdf_sqrborder(vec2 uv, float sz, float th)\n{\n  return _sub(sdf_sqr(uv,sz-th),sdf_sqr(uv,sz));\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col;\n  vec3 acc;\n  const int cnt = 8;\n  float sp=0.1;\n  for (int i=0;i<cnt;++i)\n  {\n    float fi =float(i);\n    float fc = float(cnt);\n    vec2 pos = vec2(fi-fc*.5)*sp;\n    acc +=vec3(float(i)/8.+0.1,pos.x*4.-sin(iTime*2.)*.5,pos.y*5.)*0.5*sat(1.-(vec3(sin(iTime+fi)*0.5+0.9)*sdf_sqrborder(uv-pos,0.3,0.01)*10.));\n  }\n  return col + acc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*(iResolution.xy/iResolution.xx);\n    vec2 ouv = uv;\n  uv *= 2.;\n  vec3 col;\n  uv.y+=uv.x;\n  uv.x*=1.5;\n  col = rdr(uv);\n    col += (1.-lenny(ouv))*vec3(.35,.27,.59).zyx;\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}