{
    "Shader": {
        "info": {
            "date": "1506955981",
            "description": "Demo of an approach to approximating subsurface scattering/partial translucency. See comments for source reference.\n\nThis technique is used by some other shaders on this site, but haven't seen any with controls to play with.",
            "flags": 32,
            "hasliked": 0,
            "id": "4tlcWj",
            "likes": 40,
            "name": "Subsurface Scattering Demo",
            "published": 3,
            "tags": [
                "subsurfacescattering",
                "sss",
                "demo",
                "translucency"
            ],
            "usePreview": 1,
            "username": "ssell",
            "viewed": 4491
        },
        "renderpass": [
            {
                "code": "/**\n * ------------------------------------------------------------------------\n * - Subsurface Scattering Demo\n * - Created by Steven Sell (ssell) / 2017\n * - License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * - https://www.shadertoy.com/view/4tlcWj\n * ------------------------------------------------------------------------\n *\n * Demo of subsurface scattering and local thickness, based on:\n *\n *     'Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look'\n *      - Colin Barr√©-Brisebois and Marc Bouchard\n *      https://www.gdcvault.com/play/1014538/Approximating-Translucency-for-a-Fast\n * \n * A very simple approach to approximating subsurface scattering/partial translucency.\n * It consists of primarily two steps:\n *\n *     (1) Calculate local thickness for the surface position.\n *     (2) Calculate the SSS lighting based on the local thickness and other properties.\n *\n * In order to do (1), simply calculate ambient occlusion but on the reversed normals.\n * So in essence you calculate AO for the inside of the object. In this demo, the \n * thickness/inverted AO value is calculated by performing a random hemispherical sample\n * of SDF values along the inverted normal. See 'CalculateThickness' in Buf B. In the\n * source, their thickness values are baked into a texture and then sampled at runtime.\n *\n * The algorithm for (2) is explained neatly in the primary source linked above and is\n * implemented in 'Render' in Buf C.\n *\n * ------------------------------------------------------------------------\n * - Controls\n * ------------------------------------------------------------------------\n *\n * -- SSS [Enabled/Disabled]\n *\n *     Enables and disables SSS on the scene. Without SSS, standard direct\n *     illumination is used.\n *\n * -- Sample Count [1, 64]\n *\n *     Number of samples to perform when calculating the local thickness values.\n *\n * -- Sample Depth [0.01, 2.0]  <Back and Front Transluceny>\n *\n *     The maximum length of the random hemispherical sampling vector into the object.\n *     Naturally, the smaller this maximum value is the denser the object will be.\n *\n * -- Ambient [0.01, 1.0]       <Back and Front Transluceny>\n *\n *     Controls front and back translucency which is always present. Represents\n *     a minimum value for how much light is let through irregardless of whether\n *     the surface is in front (back translucency) or behind (front transluceny)\n *     the light source.\n *\n * -- Distortion [0.01, 2.0]    <Back Translucency>\n *\n *     Distorts the normal. Can be thought of the way the light bends around the\n *     surface, particularly at higher distortion values.\n *\n * -- Power [0.01, 2.0]         <Back Translucency>\n *\n *     Controls local power of scattering when in proximity to the light source.\n *\n * -- Scale [0.01, 5.0]         <Back Translucency>\n *\n *     Controls how much light goes through the back translucency. Higher value\n *     results in more light.\n *\n * -- Light Color\n *\n *     No idea what this does.\n *\n * ------------------------------------------------------------------------\n * - Buffers\n * ------------------------------------------------------------------------\n *\n *     Buf A: UI Logic and Rendering\n *     Buf B: Scene marching and G-Buffer\n *     Buf C: Scene rendering and shading\n *     Image: Scene + UI, Vignette, Gamma Correction\n *\n * ------------------------------------------------------------------------\n * - References / Sources\n * ------------------------------------------------------------------------\n *\n * [UI]\n *\n *     'UI easy to integrate' - XT95\n *     https://www.shadertoy.com/view/ldKSDm\n *\n * [SDF Shape and Normal Compression]\n *\n *     'Normals Compression - Octahedron' - iq\n *     https://www.shadertoy.com/view/Mtfyzl\n *\n * [Hash Functions]\n *\n *     'Hash without Sine' - Dave_Hoskins\n *     https://www.shadertoy.com/view/4djSRW\n */\n\n//------------------------------------------------------------------------------------------\n// UI Functions\n//------------------------------------------------------------------------------------------\n\nvec4 RenderSliders(in vec2 uv)\n{\n    return texture(iChannel1, uv);\n}\n\n//------------------------------------------------------------------------------------------\n// Main\n//------------------------------------------------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 ui = RenderSliders(uv);\n    \n\tfragColor      = texture(iChannel0, uv);\n    fragColor.rgb  = pow(fragColor.rgb, vec3(1.0 / 2.2));                                       // Gamma\n    fragColor.rgb *= 0.4 + (0.6 * pow(32.0 * uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y), 0.2));  // Vignette\n    fragColor.rgb  = mix(fragColor.rgb, ui.rgb, ui.a);                                          // UI mixing\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n * -----------------------------------------------------------\n * -- User Interface\n * -----------------------------------------------------------\n *\n *     'UI Easy to Integrate' - XT95\n *     https://www.shadertoy.com/view/ldKSDm\n */\n\n#define MAX_DIGIT 2\n#define FLOAT_PRECISION 2\n#define SLIDER_LENGTH 140.\n#define WIDGET_COLOR vec3(0.0)\n\n/* global var */  vec4  col = vec4(0.); vec2 pos = vec2(0.);  vec2 uv = vec2(0.);\n/* char sprite */ vec4 ch_spc = vec4(0x000000,0x000000,0x000000,0x000000); vec4 ch_exc = vec4(0x003078,0x787830,0x300030,0x300000); vec4 ch_quo = vec4(0x006666,0x662400,0x000000,0x000000); vec4 ch_hsh = vec4(0x006C6C,0xFE6C6C,0x6CFE6C,0x6C0000); vec4 ch_dol = vec4(0x30307C,0xC0C078,0x0C0CF8,0x303000); vec4 ch_pct = vec4(0x000000,0xC4CC18,0x3060CC,0x8C0000); vec4 ch_amp = vec4(0x0070D8,0xD870FA,0xDECCDC,0x760000); vec4 ch_apo = vec4(0x003030,0x306000,0x000000,0x000000); vec4 ch_lbr = vec4(0x000C18,0x306060,0x603018,0x0C0000); vec4 ch_rbr = vec4(0x006030,0x180C0C,0x0C1830,0x600000); vec4 ch_ast = vec4(0x000000,0x663CFF,0x3C6600,0x000000); vec4 ch_crs = vec4(0x000000,0x18187E,0x181800,0x000000); vec4 ch_com = vec4(0x000000,0x000000,0x000038,0x386000); vec4 ch_dsh = vec4(0x000000,0x0000FE,0x000000,0x000000); vec4 ch_per = vec4(0x000000,0x000000,0x000038,0x380000); vec4 ch_lsl = vec4(0x000002,0x060C18,0x3060C0,0x800000); vec4 ch_0 = vec4(0x007CC6,0xD6D6D6,0xD6D6C6,0x7C0000); vec4 ch_1 = vec4(0x001030,0xF03030,0x303030,0xFC0000); vec4 ch_2 = vec4(0x0078CC,0xCC0C18,0x3060CC,0xFC0000); vec4 ch_3 = vec4(0x0078CC,0x0C0C38,0x0C0CCC,0x780000); vec4 ch_4 = vec4(0x000C1C,0x3C6CCC,0xFE0C0C,0x1E0000); vec4 ch_5 = vec4(0x00FCC0,0xC0C0F8,0x0C0CCC,0x780000); vec4 ch_6 = vec4(0x003860,0xC0C0F8,0xCCCCCC,0x780000); vec4 ch_7 = vec4(0x00FEC6,0xC6060C,0x183030,0x300000); vec4 ch_8 = vec4(0x0078CC,0xCCEC78,0xDCCCCC,0x780000); vec4 ch_9 = vec4(0x0078CC,0xCCCC7C,0x181830,0x700000); vec4 ch_col = vec4(0x000000,0x383800,0x003838,0x000000); vec4 ch_scl = vec4(0x000000,0x383800,0x003838,0x183000); vec4 ch_les = vec4(0x000C18,0x3060C0,0x603018,0x0C0000); vec4 ch_equ = vec4(0x000000,0x007E00,0x7E0000,0x000000); vec4 ch_grt = vec4(0x006030,0x180C06,0x0C1830,0x600000); vec4 ch_que = vec4(0x0078CC,0x0C1830,0x300030,0x300000); vec4 ch_ats = vec4(0x007CC6,0xC6DEDE,0xDEC0C0,0x7C0000); vec4 ch_A = vec4(0x003078,0xCCCCCC,0xFCCCCC,0xCC0000); vec4 ch_B = vec4(0x00FC66,0x66667C,0x666666,0xFC0000); vec4 ch_C = vec4(0x003C66,0xC6C0C0,0xC0C666,0x3C0000); vec4 ch_D = vec4(0x00F86C,0x666666,0x66666C,0xF80000); vec4 ch_E = vec4(0x00FE62,0x60647C,0x646062,0xFE0000); vec4 ch_F = vec4(0x00FE66,0x62647C,0x646060,0xF00000); vec4 ch_G = vec4(0x003C66,0xC6C0C0,0xCEC666,0x3E0000); vec4 ch_H = vec4(0x00CCCC,0xCCCCFC,0xCCCCCC,0xCC0000); vec4 ch_I = vec4(0x007830,0x303030,0x303030,0x780000); vec4 ch_J = vec4(0x001E0C,0x0C0C0C,0xCCCCCC,0x780000); vec4 ch_K = vec4(0x00E666,0x6C6C78,0x6C6C66,0xE60000); vec4 ch_L = vec4(0x00F060,0x606060,0x626666,0xFE0000); vec4 ch_M = vec4(0x00C6EE,0xFEFED6,0xC6C6C6,0xC60000); vec4 ch_N = vec4(0x00C6C6,0xE6F6FE,0xDECEC6,0xC60000); vec4 ch_O = vec4(0x00386C,0xC6C6C6,0xC6C66C,0x380000); vec4 ch_P = vec4(0x00FC66,0x66667C,0x606060,0xF00000); vec4 ch_Q = vec4(0x00386C,0xC6C6C6,0xCEDE7C,0x0C1E00); vec4 ch_R = vec4(0x00FC66,0x66667C,0x6C6666,0xE60000); vec4 ch_S = vec4(0x0078CC,0xCCC070,0x18CCCC,0x780000); vec4 ch_T = vec4(0x00FCB4,0x303030,0x303030,0x780000); vec4 ch_U = vec4(0x00CCCC,0xCCCCCC,0xCCCCCC,0x780000); vec4 ch_V = vec4(0x00CCCC,0xCCCCCC,0xCCCC78,0x300000); vec4 ch_W = vec4(0x00C6C6,0xC6C6D6,0xD66C6C,0x6C0000); vec4 ch_X = vec4(0x00CCCC,0xCC7830,0x78CCCC,0xCC0000); vec4 ch_Y = vec4(0x00CCCC,0xCCCC78,0x303030,0x780000); vec4 ch_Z = vec4(0x00FECE,0x981830,0x6062C6,0xFE0000); vec4 ch_lsb = vec4(0x003C30,0x303030,0x303030,0x3C0000); vec4 ch_rsl = vec4(0x000080,0xC06030,0x180C06,0x020000); vec4 ch_rsb = vec4(0x003C0C,0x0C0C0C,0x0C0C0C,0x3C0000); vec4 ch_pow = vec4(0x10386C,0xC60000,0x000000,0x000000); vec4 ch_usc = vec4(0x000000,0x000000,0x000000,0x00FF00); vec4 ch_a = vec4(0x000000,0x00780C,0x7CCCCC,0x760000); vec4 ch_b = vec4(0x00E060,0x607C66,0x666666,0xDC0000); vec4 ch_c = vec4(0x000000,0x0078CC,0xC0C0CC,0x780000); vec4 ch_d = vec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000); vec4 ch_e = vec4(0x000000,0x0078CC,0xFCC0CC,0x780000); vec4 ch_f = vec4(0x00386C,0x6060F8,0x606060,0xF00000); vec4 ch_g = vec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78); vec4 ch_h = vec4(0x00E060,0x606C76,0x666666,0xE60000); vec4 ch_i = vec4(0x001818,0x007818,0x181818,0x7E0000); vec4 ch_j = vec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78); vec4 ch_k = vec4(0x00E060,0x60666C,0x786C66,0xE60000); vec4 ch_l = vec4(0x007818,0x181818,0x181818,0x7E0000); vec4 ch_m = vec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000); vec4 ch_n = vec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000); vec4 ch_o = vec4(0x000000,0x0078CC,0xCCCCCC,0x780000); vec4 ch_p = vec4(0x000000,0x00DC66,0x666666,0x7C60F0); vec4 ch_q = vec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E); vec4 ch_r = vec4(0x000000,0x00EC6E,0x766060,0xF00000); vec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000); vec4 ch_t = vec4(0x000020,0x60FC60,0x60606C,0x380000); vec4 ch_u = vec4(0x000000,0x00CCCC,0xCCCCCC,0x760000); vec4 ch_v = vec4(0x000000,0x00CCCC,0xCCCC78,0x300000); vec4 ch_w = vec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000); vec4 ch_x = vec4(0x000000,0x00C66C,0x38386C,0xC60000); vec4 ch_y = vec4(0x000000,0x006666,0x66663C,0x0C18F0); vec4 ch_z = vec4(0x000000,0x00FC8C,0x1860C4,0xFC0000); vec4 ch_lpa = vec4(0x001C30,0x3060C0,0x603030,0x1C0000); vec4 ch_bar = vec4(0x001818,0x181800,0x181818,0x180000); vec4 ch_rpa = vec4(0x00E030,0x30180C,0x183030,0xE00000); vec4 ch_tid = vec4(0x0073DA,0xCE0000,0x000000,0x000000); vec4 ch_lar = vec4(0x000000,0x10386C,0xC6C6FE,0x000000);\n#define _a  col += vec4( char(ch_a) );\n#define _b  col += vec4( char(ch_b) );\n#define _c  col += vec4( char(ch_c) );\n#define _d  col += vec4( char(ch_d) );\n#define _e  col += vec4( char(ch_e) );\n#define _f  col += vec4( char(ch_f) );\n#define _g  col += vec4( char(ch_g) );\n#define _h  col += vec4( char(ch_h) );\n#define _i  col += vec4( char(ch_i) );\n#define _j  col += vec4( char(ch_j) );\n#define _k  col += vec4( char(ch_k) );\n#define _l  col += vec4( char(ch_l) );\n#define _m  col += vec4( char(ch_m) );\n#define _n  col += vec4( char(ch_n) );\n#define _o  col += vec4( char(ch_o) );\n#define _p  col += vec4( char(ch_p) );\n#define _q  col += vec4( char(ch_q) );\n#define _r  col += vec4( char(ch_r) );\n#define _s  col += vec4( char(ch_s) );\n#define _t  col += vec4( char(ch_t) );\n#define _u  col += vec4( char(ch_u) );\n#define _v  col += vec4( char(ch_v) );\n#define _w  col += vec4( char(ch_w) );\n#define _x  col += vec4( char(ch_x) );\n#define _y  col += vec4( char(ch_y) );\n#define _z  col += vec4( char(ch_z) );\n#define _A  col += vec4( char(ch_A) );\n#define _B  col += vec4( char(ch_B) );\n#define _C  col += vec4( char(ch_C) );\n#define _D  col += vec4( char(ch_D) );\n#define _E  col += vec4( char(ch_E) );\n#define _F  col += vec4( char(ch_F) );\n#define _G  col += vec4( char(ch_G) );\n#define _H  col += vec4( char(ch_H) );\n#define _I  col += vec4( char(ch_I) );\n#define _J  col += vec4( char(ch_J) );\n#define _K  col += vec4( char(ch_K) );\n#define _L  col += vec4( char(ch_L) );\n#define _M  col += vec4( char(ch_M) );\n#define _N  col += vec4( char(ch_N) );\n#define _O  col += vec4( char(ch_O) );\n#define _P  col += vec4( char(ch_P) );\n#define _Q  col += vec4( char(ch_Q) );\n#define _R  col += vec4( char(ch_R) );\n#define _S  col += vec4( char(ch_S) );\n#define _T  col += vec4( char(ch_T) );\n#define _U  col += vec4( char(ch_U) );\n#define _V  col += vec4( char(ch_V) );\n#define _W  col += vec4( char(ch_W) );\n#define _X  col += vec4( char(ch_X) );\n#define _Y  col += vec4( char(ch_Y) );\n#define _Z  col += vec4( char(ch_Z) );\n#define _spc  col += vec4( char(ch_spc) );\n#define _float(a)  col += vec4(print_float(a));\n#define _int(a)  col += vec4(print_int(a));\n#define _slider(x,y,id,v) setCursor(x,y);print_slider(id,v);\n#define _color(x,y,id,v) setCursor(x,y);print_color(id,v);\n#define _box(p,s,c) print_box(p,s,c);\n#define _cursor(x,y)  setCursor(x,y);\nvoid setCursor(int x, int y){pos = vec2(float(x),iResolution.y-float(y));}float extract_bit(float n, float b){    b = clamp(b,-1.0,24.0);    return floor(mod(floor(n / pow(2.0,floor(b))),2.0));   }float sprite(vec4 spr, vec2 size, vec2 uv){    uv = floor(uv);    float bit = (size.x-uv.x-1.0) + uv.y * size.x;    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));        float pixels = 0.0;    pixels += extract_bit(spr.x, bit - 72.0);    pixels += extract_bit(spr.y, bit - 48.0);    pixels += extract_bit(spr.z, bit - 24.0);    pixels += extract_bit(spr.w, bit - 00.0);        return bounds ? pixels : 0.0;}float char(vec4 ch){    float px = sprite(ch, vec2(8, 12), uv - pos);    pos.x += 8.;    return px;}vec4 get_digit(float d){    d = floor(d);    if(d == 0.0) return ch_0;    if(d == 1.0) return ch_1;    if(d == 2.0) return ch_2;    if(d == 3.0) return ch_3;    if(d == 4.0) return ch_4;    if(d == 5.0) return ch_5;    if(d == 6.0) return ch_6;    if(d == 7.0) return ch_7;    if(d == 8.0) return ch_8;    if(d == 9.0) return ch_9;    return ch_0;}float print_float(float number){    float result = 0.0;        for(int i = MAX_DIGIT-1; i >= -FLOAT_PRECISION;i--)    {        float digit = mod( number / pow(10.0, float(i)) , 10.0);                if(i == -1)        {            result += char(ch_per);        }                if((abs(number) > pow(10.0, float(i))) || i <= 0)        {            result += char(get_digit(digit));        }    }     return result;}float print_int(float number){    float result = 0.0;        for(int i = MAX_DIGIT;i >= 0;i--)    {        float digit = mod( number / pow(10.0, float(i)) , 10.0);        if(abs(number) > pow(10.0, float(i)) || i == 0)        {            result += char(get_digit(digit));        }    }       return result;}vec3 hsv2rgb( in vec3 c ){vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );rgb = rgb*rgb*(3.0-2.0*rgb);return c.z * mix( vec3(1.0), rgb, c.y);}vec3 widgetSelected(){    return texture(iChannel0, vec2(.5,2.5)/iResolution.xy).rgb;}vec4 uiSlider(int id){return texture(iChannel0, vec2(float(id)+.5,0.5)/iResolution.xy);}vec4 uiColor(int id){return texture(iChannel0, vec2(float(id)+.5,1.5)/iResolution.xy);}float roundBox( in vec2 p, in vec2 b, in float r ) {    vec2 q = abs(p) - b;    vec2 m = vec2( min(q.x,q.y), max(q.x,q.y) );    float d = (m.x > 0.0) ? length(q) : m.y;     return d - r;}void print_slider( int id, float v ){    vec2 puv = uv-vec2(.5);    vec3 select = widgetSelected();    float sl2 = SLIDER_LENGTH/2.;    vec4 value = uiSlider(id);    if(value.a == 0.)        value.r = v;        bool selected = ( select.r == .1 && select.g*255. == float(id) );    bool mouseAndNoSelect = iMouse.w>.5 && roundBox( iMouse.xy-pos-vec2(sl2,6.), vec2(sl2,3.), 5.) < 0. && select.r == 0.;         if(mouseAndNoSelect || selected)    \tvalue.r = clamp((iMouse.x-pos.x-2.)/SLIDER_LENGTH,0.,1.);    float d = roundBox( uv-pos-vec2(sl2,6.), vec2(sl2,3.), 5.);    float layer = clamp(sign(-d),0.,1.);    col.rgb += vec3((clamp( 1.3-abs(d) , 0., 2.))*max(.0,-sign(uv.x-pos.x-value.r*SLIDER_LENGTH))*.5 );    col.rgb += WIDGET_COLOR*vec3( clamp( 1.-abs(d)*.75 , 0., 1.) );    col.a += layer + clamp( 1.-abs(d) , 0., 1.);        float oldx = pos.x;    pos.x += SLIDER_LENGTH-8.*4.;    _float(value.r)    pos.x = oldx;        if(puv.x == float(id) && puv.y==0.)        col = vec4(value.r,0.,0.,1.);        if(puv.x == 0. && puv.y == 2.)    {        if(iMouse.w<.5)            col = vec4(0.);        else if(mouseAndNoSelect)        \tcol = vec4(.1,float(id)/255.,0.,0.);    }}void print_color( int id, vec3 v){    vec2 puv = uv-vec2(.5);    vec3 select = widgetSelected();    float sl2 = SLIDER_LENGTH/2.;    vec4 color = uiColor(id);    if(color.a == 0.)        color.rgb = v;        bool selected = ( select.r == .2 && select.g*255. == float(id) );    bool mouseAndNoSelect = iMouse.w>.5 && roundBox( iMouse.xy-pos-vec2(sl2,6.), vec2(sl2,3.), 5.) < 0. && select.r == 0.;         if(mouseAndNoSelect || selected)    \tcolor.rgb = hsv2rgb( vec3( (iMouse.x-pos.x)/(SLIDER_LENGTH*.9),1.,1.) );    float d = roundBox( uv-pos-vec2(sl2,6.), vec2(sl2,3.), 5.);    float layer = clamp(sign(-d),0.,1.);    col.rgb += vec3( layer*color*max(.0,sign(uv.x-pos.x-SLIDER_LENGTH*.9)));    col.rgb += WIDGET_COLOR*vec3( clamp( 1.-abs(d)*.75 , 0., 1.) );    col.a += layer + clamp( 1.-abs(d) , 0., 1.);        if((mouseAndNoSelect || selected) && uv.x-pos.x-SLIDER_LENGTH*.9<0.)        col.rgb += layer*hsv2rgb( vec3( (uv.x-pos.x)/(SLIDER_LENGTH*.9),1.,1.) );            if(puv.x == float(id) && puv.y==1.)        col = vec4(color.rgb,1.);        if(puv.x == 0. && puv.y == 2.)    {        if(iMouse.w<.5)            col = vec4(0.);        else if(mouseAndNoSelect)        \tcol = vec4(.2,float(id)/255.,0.,0.);    }}void print_box(vec2 p, vec2 s, vec4 c){    if(uv.x>p.x && uv.x <p.x+s.x && uv.y>p.y && uv.y<p.y+s.y)        col += c;}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    uv = fragCoord.xy;\n    \n    int rx = int(iResolution.x * 0.5) - 295;\n    int ry = int(iResolution.y) - 30;\n    \n    if(uv.x-.5 == 0. && uv.y-.5 == 2.)\n        col = vec4(widgetSelected(),0.);\n        \n   \t//-----------------------------------------------------------\n    // Top Row\n    //-----------------------------------------------------------\n    \n    if(uiSlider(0).r >= 0.5)\n    {\n        _slider(rx, ry, 0, 1.0) _S _S _S _spc _E _n _a _b _l _e _d\n    }\n    else\n    {\n        _slider(rx, ry, 0, 1.0) _S _S _S _spc _D _i _s _a _b _l _e _d\n    }\n    \n    _slider(rx + 150, ry, 1, 0.5) _S _a _m _p _l _e _spc _C _o _u _n _t\n    _slider(rx + 300, ry, 2, 0.5) _S _a _m _p _l _e _spc _D _e _p _t _h\n    _slider(rx + 450, ry, 3, 0.5) _A _m _b _i _e _n _t\n        \n    //-----------------------------------------------------------\n    // Bottom Row\n    //-----------------------------------------------------------\n    \n    ry = int(iResolution.y) - 10;\n    \n    _slider(rx,       ry, 4, 0.5) _D _i _s _t _o _r _t _i _o _n\n    _slider(rx + 150, ry, 5, 1.0) _P _o _w _e _r\n    _slider(rx + 300, ry, 6, 0.2) _S _c _a _l _e\n    _color (rx + 450, ry, 7, vec3(0.0, 1.0, 1.0)) _L _i _g _h _t _spc  _C _o _l _o _r\n        \n    fragColor = min(col.rgba, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n * -----------------------------------------------------------\n * -- Scene Marching\n * -----------------------------------------------------------\n *\n * Marches the scene and generates a G-Buffer stored as:\n *\n *    .r = Depth\n *    .g = Thickness\n *    .b = Surface ID\n *    .a = Packed Normal\n */\n\n#define Epsilon  0.001\n#define NearClip Epsilon\n#define FarClip  10.0\n#define MaxSteps 100\n#define PI       3.14159265359\n\nfloat SSSSampleDepth       = 1.0;\nfloat SSSThicknessSamples  = 32.0;\nfloat SSSThicknessSamplesI = 0.03125;\n\n//------------------------------------------------------------------------------------------\n// Utilities\n//------------------------------------------------------------------------------------------\n\nfloat UISlider(int id)\n{\n    return texture(iChannel0, vec2(float(id) + 0.5, 0.5) / iResolution.xy).r;\n}\n\nvoid UpdateParameters()\n{\n    SSSThicknessSamples  = max(1.0, 64.0 * UISlider(1));\n    SSSThicknessSamplesI = 1.0 / SSSThicknessSamples;\n\tSSSSampleDepth       = max(0.1, 2.0 * UISlider(2));\n}\n\n// Octrahedron normals packing (https://www.shadertoy.com/view/Mtfyzl)\nuint PackNormal(in vec3 nor, uint sh)\n{\n    nor /= ( abs( nor.x ) + abs( nor.y ) + abs( nor.z ) );\n    nor.xy = (nor.z >= 0.0) ? nor.xy : (1.0-abs(nor.yx))*sign(nor.xy);\n    vec2 v = 0.5 + 0.5*nor.xy;\n\n    uint mu = (1u<<sh)-1u;\n    uvec2 d = uvec2(floor(v*float(mu)+0.5));\n    return (d.y<<sh)|d.x;\n}\n\n// Great tip from iq, see: https://www.shadertoy.com/view/4dBXz3\nvec3 MirrorVector(in vec3 v, in vec3 n)\n{\n    return v + 2.0 * n * max(0.0, -dot(n,v));\n}\n\n// Dave_Hoskins hash functions (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * 443.897);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 Hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n//------------------------------------------------------------------------------------------\n// Ray / Camera\n//------------------------------------------------------------------------------------------\n\nstruct Ray\n{\n\tvec3 o;\n    vec3 d;\n};\n\nRay Ray_LookAt(in vec2 uv, in vec3 o, in vec3 d)\n{\n    vec3 forward = normalize(d - o);\n    vec3 right   = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up      = normalize(cross(right, forward));\n\n    uv    = (uv * 2.0) - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n\n    Ray ray;\n    ray.o = o;\n    ray.d = normalize((uv.x * right) + (uv.y * up) + (forward * 2.0));\n\n    return ray;\n}\n\nvec3 OrbitAround(vec3 origin, float radius, float rate)\n{\n  \treturn vec3((origin.x + (radius * cos(iTime * rate))), (origin.y), (origin.z + (radius * sin(iTime * rate))));\n}\n\nvec3 CameraPos()\n{\n\treturn OrbitAround(vec3(0.0), 6.5, 0.25);\n}\n\n//------------------------------------------------------------------------------------------\n// Scene\n//------------------------------------------------------------------------------------------\n\nvec2 U(vec2 d1, vec2 d2) \n{ \n    return (d1.x < d2.x) ? d1 : d2; \n}\n\nvec2 Shape(vec3 p)\n{\n    // Shape credit to iq (https://www.shadertoy.com/view/Mtfyzl)\n    p.xz *= 0.8;\n    p.xyz += 1.000*sin(  2.0*p.yzx );\n    p.xyz -= 0.500*sin(  4.0*p.yzx );\n    float d = length( p.xyz ) - 1.5;\n    \n\treturn vec2(d * 0.25, 1.0);\n}\n\nvec2 Scene(vec3 p)\n{\n    vec2 shape = Shape(p);\n    vec2 light = vec2(length(p - vec3(0.0, sin(iTime), 0.0) * 3.0) - 0.1, 2.0);\n    \n    return U(shape, light);\n}\n\n//------------------------------------------------------------------------------------------\n// Marching\n//------------------------------------------------------------------------------------------\n\nvec2 March(in Ray ray)\n{\n    float depth = NearClip;\n    float id    = 0.0;\n    \n    for(int i = 0; i < MaxSteps; ++i)\n    {\n        vec3 pos = ray.o + (ray.d * depth);\n        vec2 sdf = Scene(pos);\n        \n        if(sdf.x < Epsilon)\n        {\n            id = sdf.y;\n            break;\n        }\n        \n        if(sdf.x >= FarClip)\n        {\n            break;\n        }\n        \n        depth += sdf.x;\n    }\n    \n    return vec2(clamp(depth, NearClip, FarClip), id);\n}\n\nvec3 SceneNormal(in vec3 pos)\n{\n\tvec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(Scene(pos + eps.xyy).x - Scene(pos - eps.xyy).x,\n                          Scene(pos + eps.yxy).x - Scene(pos - eps.yxy).x,\n                          Scene(pos + eps.yyx).x - Scene(pos - eps.yyx).x));\n}\n\n//------------------------------------------------------------------------------------------\n// Local Thickness\n//------------------------------------------------------------------------------------------\n\nvec3 GenerateSampleVector(in vec3 norm, in float i)\n{\n\tvec3 randDir = normalize(Hash33(norm + i));\n    return MirrorVector(randDir, norm);\n}\n\nfloat CalculateThickness(in vec3 pos, in vec3 norm)\n{\n    // Perform a number of samples, accumulate thickness, and then divide by number of samples.\n    float thickness = 0.0;\n    \n    for(float i = 0.0; i < SSSThicknessSamples; ++i)\n    {\n        // For each sample, generate a random length and direction.\n        float sampleLength = Hash11(i) * SSSSampleDepth;\n        vec3 sampleDir = GenerateSampleVector(-norm, i);\n        \n        // Thickness is the SDF depth value at that sample point.\n        // Remember, internal SDF values are negative. So we add the \n        // sample length to ensure we get a positive value.\n        thickness += sampleLength + Scene(pos + (sampleDir * sampleLength)).x;\n    }\n    \n    // Thickness on range [0, 1], where 0 is maximum thickness/density.\n    // Remember, the resulting thickness value is multipled against our \n    // lighting during the actual SSS calculation so a value closer to \n    // 1.0 means less absorption/brighter SSS lighting.\n    return clamp(thickness * SSSThicknessSamplesI, 0.0, 1.0);\n}\n\n//------------------------------------------------------------------------------------------\n// Render\n//------------------------------------------------------------------------------------------\n\nvec3 Sample(\n    in    Ray   ray, \n    inout vec3  normal, \n    inout float depth,\n    inout float id,\n    inout float thickness)\n{\n    vec3 color = vec3(0.0);\n    vec2 march = March(ray);\n    \n    depth = march.x;\n    id    = march.y;\n    \n    if(depth < FarClip)\n    {\n        vec3 pos = ray.o + (ray.d * depth);\n        \n        normal    = SceneNormal(pos);\n        thickness = CalculateThickness(pos, normal);\n        color     = vec3(thickness);\n    }\n    \n    return color;\n}\n\n//------------------------------------------------------------------------------------------\n// Main\n//------------------------------------------------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    UpdateParameters();\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    Ray ray = Ray_LookAt(uv, CameraPos(), vec3(0.0, -0.25, 0.0));\n    \n    vec3  normal    = vec3(0.0, 1.0, 0.0);\n    float depth     = 0.0;\n    float surfID    = 0.0;\n    float thickness = 1.0;\n    \n    vec3 color = Sample(ray, normal, depth, surfID, thickness);\n    \n    fragColor.r = clamp(depth / FarClip, Epsilon, 1.0);\n    fragColor.g = thickness;\n    fragColor.b = surfID;\n    fragColor.a = float(PackNormal(normal, 14u));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n * -----------------------------------------------------------\n * -- Scene Shading\n * -----------------------------------------------------------\n *\n * Applies basic lighting and subsurface scattering to the scene.\n * No additional effects (such as shadows or ambient occlusion) are\n * applied as to not detract from the focus on SSS.\n */\n\nfloat SSSAmbient     = 1.0;\nfloat SSSDistortion  = 1.0;\nfloat SSSPower       = 1.0;\nfloat SSSScale       = 1.0;\nvec3  LightCol       = vec3(1.0);\nvec3  LightPos       = vec3(0.0);\n\n//------------------------------------------------------------------------------------------\n// Utilities\n//------------------------------------------------------------------------------------------\n\nfloat UISlider(int id)\n{\n    return texture(iChannel1, vec2(float(id) + 0.5, 0.5) / iResolution.xy).r;\n}\n\nvec3 UIColor(int id)\n{\n    return texture(iChannel1, vec2(float(id) + 0.5, 1.5) / iResolution.xy).rgb;\n}\n\nvoid UpdateParameters()\n{\n    SSSAmbient     = max(0.01, UISlider(3));\n    SSSDistortion  = max(0.01, UISlider(4)) * 2.0;\n    SSSPower       = max(0.01, UISlider(5)) * 2.0;\n    SSSScale       = max(0.01, UISlider(6)) * 5.0;\n    LightCol       = UIColor(7);\n}\n\n// Octrahedron normals unpacking (https://www.shadertoy.com/view/Mtfyzl)\nvec3 UnpackNormal(uint data, uint sh)\n{\n    uint mu =(1u<<sh)-1u;\n    \n    uvec2 d = uvec2( data, data>>sh ) & mu;\n    vec2 v = vec2(d)/float(mu);\n    \n    v = -1.0 + 2.0*v;\n    vec3 nor;\n    nor.z = 1.0 - abs(v.x) - abs(v.y);\n    nor.xy = (nor.z>=0.0) ? v.xy : (1.0-abs(v.yx))*sign(v.xy);\n    return normalize( nor );\n}\n\n//------------------------------------------------------------------------------------------\n// Ray / Camera\n//------------------------------------------------------------------------------------------\n\nstruct Ray\n{\n\tvec3 o;\n    vec3 d;\n};\n\nRay Ray_LookAt(in vec2 uv, in vec3 o, in vec3 d)\n{\n    vec3 forward = normalize(d - o);\n    vec3 right   = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up      = normalize(cross(right, forward));\n\n    uv    = (uv * 2.0) - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n\n    Ray ray;\n    ray.o = o;\n    ray.d = normalize((uv.x * right) + (uv.y * up) + (forward * 2.0));\n\n    return ray;\n}\n\nvec3 OrbitAround(vec3 origin, float radius, float rate)\n{\n  \treturn vec3((origin.x + (radius * cos(iTime * rate))), (origin.y), (origin.z + (radius * sin(iTime * rate))));\n}\n\nvec3 CameraPos()\n{\n\treturn OrbitAround(vec3(0.0), 6.5, 0.25);\n}\n\n//------------------------------------------------------------------------------------------\n// Render\n//------------------------------------------------------------------------------------------\n\nfloat Attenuation(in vec3 toLight)\n{\n    float d = length(toLight);\n    return 1.0 / (1.0 + 1.0 * d + 1.0 * d * d);\n}\n\nvec3 Render(\n    in Ray   ray,\n    in vec3  norm, \n    in float depth, \n    in float surfID,\n    in float thickness)\n{\n    vec3 color = vec3(0.047);\n    \n    if(depth < 1.0)\n    {\n        if(surfID > 1.5)\n        {\n            // The light sphere, don't perform any actual shading on it.\n\t\t\treturn LightCol + 0.9;\n        }\n        \n        float sssEnabled = UISlider(0);\n        \n        vec3  position    = ray.o + (ray.d * depth * 10.0);\n        vec3  toLight     = LightPos - position;\n        vec3  albedo      = vec3(1.0);\n        vec3  diffuse     = LightCol;\n        float attenuation = Attenuation(toLight);\n        \n        if(sssEnabled < 0.5)\n        {\n            // SSS disabled, do extremely basic direct point lighting\n            color = albedo * attenuation * diffuse * max(0.0, dot(norm, normalize(toLight)));\n        }\n        else\n        {\n            // SSS enabled\n            vec3  toEye    = -ray.d;\n\t\t\tvec3  SSSLight = (normalize(LightPos - position) + norm * SSSDistortion);\n        \tfloat SSSDot   = pow(clamp(dot(toEye, -SSSLight), 0.0, 1.0), SSSPower) * SSSScale;\n        \tfloat SSS      = (SSSDot + SSSAmbient) * thickness * attenuation;\n            \n            color = albedo * diffuse * SSS;\n        }\n    }\n    \n    return color;\n}\n\n//------------------------------------------------------------------------------------------\n// Main\n//------------------------------------------------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    UpdateParameters();\n    \n    vec2 uv = (fragCoord / iResolution.xy);\n    vec4 tx = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    LightPos.y = sin(iTime) * 3.0;\n    \n    Ray   ray       = Ray_LookAt(uv, CameraPos(), vec3(0.0, -0.25, 0.0));\n    vec3  normal    = UnpackNormal(uint(tx.a), 14u);\n    float depth     = tx.r;\n    float thickness = tx.g;\n    float surfID    = tx.b;\n    \n    fragColor = vec4(Render(ray, normal, depth, surfID, thickness), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}