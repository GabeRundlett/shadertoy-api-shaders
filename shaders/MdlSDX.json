{
    "Shader": {
        "info": {
            "date": "1407459297",
            "description": "A demonstration of how GPU derivatives don't work across 2x2 render tile boundaries. GPUs render in tiles of 2x2 pixels, and derivatives can only be computed within it. Signal changes that occur between to tiles can't be detected by dFdx()/dFdy()/fwidth()",
            "flags": 0,
            "hasliked": 0,
            "id": "MdlSDX",
            "likes": 14,
            "name": "Derivatives - boundaries",
            "published": 3,
            "tags": [
                "2d",
                "glsl",
                "derivatives"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2534
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// I create a vertical line pattern which is 8 white pixels wide and 8 black pixels wide. \n// The pattern is moving one pixel to the left every second.\n//\n// Line 19 tries to detect edges in the iamge (the pattern) by taking derivatives/differences\n// of the pixel colros by using GLSL's dFdx() derivative operator. However, the operator only\n// detects the edges when the pattern is aligned to an odd pxiel (ever other second), but it\n// fails to detect it when the edge happens at the tile boundaries (even pixels)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float off = iTime;\n    \n    vec2 ti = floor((fragCoord.xy+off)/8.0);\n    \n    float f = mod( ti.x, 2.0 );\n    \n    if( fragCoord.x>(iResolution.x/2.0) )\n        f = clamp( 10.0*abs(dFdx(f)), 0.0, 1.0 );\n    \n\tfragColor = vec4(f,f,f,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}