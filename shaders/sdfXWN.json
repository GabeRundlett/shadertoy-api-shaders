{
    "Shader": {
        "info": {
            "date": "1618651070",
            "description": "V1 - cube\nV5 - water ",
            "flags": 32,
            "hasliked": 0,
            "id": "sdfXWN",
            "likes": 1,
            "name": "Task2_water_in_cube",
            "published": 3,
            "tags": [
                "cubewater"
            ],
            "usePreview": 0,
            "username": "zhbogdanov",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float INF = 1e10;\n\nconst vec3 CAMERA_POS = vec3(-1., 2.9, -7);\n\nconst vec3 LIGHT1_POS = vec3(-2, 1.5, -2);\nconst vec3 LIGHT1_SIZE = vec3(0.3, 0.3, 0.3);\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(-3, 0.5, -2.8);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT3_POS = vec3(-2, 0.5, 3);\nconst float LIGHT3_RADIUS = 0.25;\nconst vec3 LIGHT3_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT4_POS = vec3(-1.2,-0.2,2);\nconst float LIGHT4_RADIUS = 0.3;\nconst vec3 LIGHT4_COLOR = vec3(0.8, 0.9, 0.7);\n\nconst vec3 MOTHER_CUBE_SIZE = vec3(1, 1, 1);\n\nvec3 randDir;\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float GLASS_N  = 1.5;\nconst float WATER_N  = 1.33;\nconst float AIR_N    = 1.0;\n\nconst float def_coef = 0.05;\nconst int DEFAULT = 0;\nconst int DEFORMATION = 1;\n\n\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceCube(vec3 pos, vec3 dir, vec3 size, out vec3 normal)\n{\n    float t;\n    float min_t = INF;\n    vec3 cur_norm;\n    vec3 worldPos;\n\n    t = (-size.x - pos.x) / dir.x;\n    if (t > 0.0) {\n        worldPos = pos + dir * t;\n        if (abs(worldPos.y) <= size.y && abs(worldPos.z) <= size.z) {\n            normal = vec3(1, 0, 0);\n            if (t < min_t) {\n                min_t = t;\n                cur_norm = normal;\n            }\n        }\n    }\n\n    t = (size.x - pos.x) / dir.x;\n    if (t > 0.0) {\n        worldPos = pos + dir * t;\n        if (abs(worldPos.y) <= size.y && abs(worldPos.z) <= size.z) {\n            normal = vec3(-1, 0, 0);\n            if (t < min_t) {\n                min_t = t;\n                cur_norm = normal;\n            }\n        }\n    }\n\n    t = (-size.y - pos.y) / dir.y;\n    if (t > 0.0) {\n        worldPos = pos + dir * t;\n        if (abs(worldPos.x) <= size.x && abs(worldPos.z) <= size.z) {\n            normal = vec3(0, -1, 0);\n            if (t < min_t) {\n                min_t = t;\n                cur_norm = normal;\n            }\n        }\n    }\n\n    t = (size.y - pos.y) / dir.y;\n    if (t > 0.0) {\n        worldPos = pos + dir * t;\n        if (abs(worldPos.x) <= size.x && abs(worldPos.z) <= size.z) {\n            normal = vec3(0, 1, 0);\n            if (t < min_t) {\n                min_t = t;\n                cur_norm = normal;\n            }\n        }\n    }\n\n    t = (-size.z - pos.z) / dir.z;\n    if (t > 0.0) {\n        worldPos = pos + dir * t;\n        if (abs(worldPos.x) <= size.x && abs(worldPos.y) <= size.y) {\n            normal = vec3(0, 0, -1);\n            if (t < min_t) {\n            min_t = t;\n            cur_norm = normal;\n            }\n        }\n    }\n\n    t = (size.z - pos.z) / dir.z;\n    if (t > 0.0) {\n        worldPos = pos + dir * t;\n        if (abs(worldPos.x) <= size.x && abs(worldPos.y) <= size.y) {\n            normal = vec3(0, 0, 1);\n            if (t < min_t) {\n                min_t = t;\n                cur_norm = normal;\n            }\n        }\n    }\n    normal = cur_norm;\n    return min_t;\n}\n\nfloat sphere_deformation(vec3 p, vec3 d) {\n    return cos(20. * (p.x + d.x)) * cos(20. * (p.y + d.y)) * cos(20. * (p.z + d.z)) * def_coef;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal, int mode) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c;\n    if (mode == DEFAULT)\n        c = dot(pos, pos) - r * r;\n    else if (mode == DEFORMATION) {\n        float deform = sphere_deformation(pos, dir);\n        c = dot(pos, pos) - (r - deform) * (r - deform);\n    }\n    float D = b * b - a * c;\n    if (D < 0.0) \n        return INF;\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) \n        return INF;\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) \n    {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) \n    {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    \n    if (D < 0.0) \n    {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) \n    {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) \n        {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) \n    {\n        return INF;\n    }\n    \n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) \n    {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    return INF;\n}\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm, DEFAULT);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * 0.5) ? 0.0 : 5.0 / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 5.0 / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 5.0 / distSq3;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) \n{\n    if (dot(v, normal) < 0.0) \n    {\n        normal = -normal;\n    }\n    \n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3  tang = normalize(v - cosA * normal);\n    \n    float sinB = sinA / n2 * n1;\n    if (sinB >= 1.0)\n    {\n        return reflect(v, normal);\n    }\n    else \n    {\n        float cosB = sqrt(1.0 - sinB * sinB);\n        return sinB * tang + cosB * normal;\n    }\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir  = normalize(randVals - 0.5);\n    vec3 front    = normalize(-CAMERA_POS);\n    vec3 up       = vec3(0, 1, 0);\n    vec3 right    =  normalize(cross(front, up));\n    up            = normalize(cross(right, front));\n    vec2 uv       = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 viewVec  = normalize(front + right * uv.x + up * uv.y);\n    vec3 curPos   = CAMERA_POS;\n    vec3 curDir   = viewVec;\n    vec3 colorMult = vec3(1, 1, 1);\n\n    float n1      = AIR_N;\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color, normal, worldPos;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            worldPos = t * curDir + curPos;\n            color  = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            \n            if (randVals.x < 0.5) \n                materialType = REFLECTION;\n            else \n                materialType = DIFFUSE;\n        }\n\n        vec3 l1Norm;\n        float light1T = traceCube(curPos - LIGHT1_POS, curDir, LIGHT1_SIZE, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm, DEFAULT);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n\n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm, DEFAULT);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l3Norm;\n        }\n        vec3 L4Norm;\n        float light4T = traceSphere(curPos - LIGHT4_POS, curDir, LIGHT3_RADIUS, L4Norm, DEFAULT);\n        if (light4T < t) {\n            t = light4T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = LIGHT4_COLOR ;\n            normal = L4Norm;\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;;\n            vec3 worldPos = t * curDir + curPos;\n            color  = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n            materialType = DIFFUSE;\n        }\n\n        vec3 cubeNorm;\n        float cubeT = traceCube(curPos, curDir, MOTHER_CUBE_SIZE, cubeNorm);\n        if (cubeT < t) {\n            t = cubeT;\n            normal = cubeNorm;\n            if (randVals.x < GLASS_R) \n                materialType = REFLECTION;\n            else {\n                materialType = REFRACTION;\n                nEnter = dot(curDir, normal) > 0.0 ? AIR_N : GLASS_N;\n                \n            }\n        }\n\n        \n\n        if (randVals.x < 0.75)\n        {\n            vec3 water1Norm;\n            float water1T = traceSphere(curPos - vec3(-0.7, -0.7, -0.7), curDir, 0.223, water1Norm, DEFORMATION);\n            if (water1T < t) \n            {\n                t = water1T;\n                normal = water1Norm;\n                vec3 worldPos = t * curDir + curPos;\n                // for more realistic water\n                color = texture(iChannel3, worldPos).rgb + vec3(0, 0.3, 0.3);\n                materialType = REFRACTION;\n                if (randVals.x * 0.01 < WATER_R) \n                {\n                    materialType = EMISSION;\n                } \n                else \n                {\n                    colorMult *= vec3(0, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) \n                    {\n                        nEnter = GLASS_N;\n                    } \n                    else \n                    {\n                        nEnter = 1.33;\n                    }\n                }\n                \n            }\n        }\n        if (randVals.x < 0.75)\n        {\n            vec3 water2Norm;\n            float water2T = traceSphere(curPos - vec3(-0.35, -0.45, -0.55), curDir, 0.3, water2Norm, DEFORMATION);\n            if (water2T < t) {\n                t = water2T;\n                normal = water2Norm;\n                vec3 worldPos = t * curDir + curPos;\n                // for more realistic water\n                color = texture(iChannel3, worldPos).rgb + vec3(0, 0.3, 0.3);\n                materialType = REFRACTION;\n                if (randVals.x * 0.01 < WATER_R) \n                {\n                    materialType = EMISSION;\n                } \n                else \n                {\n                    colorMult *= vec3(0, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) \n                    {\n                        nEnter = GLASS_N;\n                    } \n                    else \n                    {\n                        nEnter = 1.33;\n                    }\n                }\n                \n            }\n        }\n        \n        if (randVals.x < 0.75)\n        {\n            vec3 water3Norm;\n            float water3T = traceSphere(curPos - vec3(0.05, -0.2, -0.1), curDir, 0.35, water3Norm, DEFORMATION);\n            if (water3T < t) {\n                t = water3T;                \n                normal = water3Norm;\n                vec3 worldPos = t * curDir + curPos;\n                // for more realistic water\n                color = texture(iChannel3, worldPos).rgb + vec3(0, 0.3, 0.3);\n                materialType = REFRACTION;\n                if (randVals.x * 0.01 < WATER_R) \n                {\n                    materialType = EMISSION;\n                } \n                else \n                {\n                    colorMult *= vec3(0, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) \n                    {\n                        nEnter = GLASS_N;\n                    } \n                    else \n                    {\n                        nEnter = WATER_N;\n                    }\n                }\n                \n            }\n        }\n\n        if (randVals.x < 0.75)\n        {\n            vec3 water3Norm;\n            float water3T = traceSphere(curPos - vec3(0.15, 0.4, 0.4), curDir, 0.5, water3Norm, DEFORMATION);\n            if (water3T < t) {\n                t = water3T;                \n                normal = water3Norm;\n                vec3 worldPos = t * curDir + curPos;\n                // for more realistic water\n                color = texture(iChannel3, worldPos).rgb + vec3(0, 0.3, 0.3);\n                materialType = REFRACTION;\n                if (randVals.x * 0.01 < WATER_R) \n                {\n                    materialType = EMISSION;\n                } \n                else \n                {\n                    colorMult *= vec3(0, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) \n                    {\n                        nEnter = GLASS_N;\n                    } \n                    else \n                    {\n                        nEnter = WATER_N;\n                    }\n                }\n                \n            }\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) + texture(iChannel1,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//https://www.shadertoy.com/view/MdlXz8\n//#define SHOW_TILING\n\n#define TAU 6.28318530718\n#define MAX_ITER 5\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n\tfloat time = iTime * 1.5+23.0;\n    // uv should be the 0-1 uv of texture...\n\tvec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    \n    \n#ifdef SHOW_TILING\n\tvec2 p = mod(uv*TAU*12.0, TAU)-250.0;\n#else\n    vec2 p = mod(uv*TAU, TAU)-250.0;\n#endif\n\tvec2 i = vec2(p);\n\tfloat c = 1.0;\n\tfloat inten = .005;\n\n\tfor (int n = 0; n < MAX_ITER; n++) \n\t{\n\t\tfloat t = time * (1.0 - (3.5 / float(n+1)));\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\tc += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n\t}\n\tc /= float(MAX_ITER);\n\tc = 1.17-pow(c, 1.4);\n\tvec3 colour = vec3(pow(abs(c), 8.0));\n    colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n    \n\n\t#ifdef SHOW_TILING\n\t// Flash tile borders...\n\tvec2 pixel = 2.0 / iResolution.xy;\n\tuv *= 1.0;\n\n\tfloat f = floor(mod(iTime*2.5, 2.0)); \t// Flash value.\n\tvec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\n\tuv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\n\tcolour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\n\t\n\t#endif\n\tfragColor = vec4(colour, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}