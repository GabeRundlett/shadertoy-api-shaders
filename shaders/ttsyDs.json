{
    "Shader": {
        "info": {
            "date": "1593499954",
            "description": "test111",
            "flags": 0,
            "hasliked": 0,
            "id": "ttsyDs",
            "likes": 2,
            "name": "test 111",
            "published": 3,
            "tags": [
                "test111"
            ],
            "usePreview": 0,
            "username": "indere",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "float trunct(float x, float num_levels)\n{\n    return floor(x * num_levels) / num_levels;\n}\n\nfloat randomNoise(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat myRandomColor(vec2 uv, float scale){\n\treturn fract(sin(dot(floor(uv * scale), vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat random1D(float p){\n\treturn fract(sin(p) * 100000.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    float uv_color =  myRandomColor(uv.yy + trunct(iTime, 4.0), 4.0);\n    \n    //try 1.0 and 2.0\n    // 1.0 only time Related\n    // 2.0 both time and uv coord Related\n    \n    //1.0\n    //float uv_offset = random1D(iTime * 0.01) * 0.1;\n    //2.0\n    float uv_offset = trunct(iTime, 24.0 * uv_color) * 6.;\n    \n    //生成随机非均匀宽度线条\n    float blockLine_random = 0.5 * myRandomColor(uv.yy + uv_offset, 6.0);\n    blockLine_random += 0.5 * myRandomColor(uv.yy + uv_offset, 10.0);\n    blockLine_random = blockLine_random * 2. - 1.0;\n    \n    fragColor = vec4(vec3(blockLine_random), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}