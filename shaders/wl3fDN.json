{
    "Shader": {
        "info": {
            "date": "1612743110",
            "description": "Lots of things going on all at once. Really needs some sound.",
            "flags": 0,
            "hasliked": 0,
            "id": "wl3fDN",
            "likes": 10,
            "name": "Radioactive Spacerock",
            "published": 3,
            "tags": [
                "space",
                "glow",
                "stars",
                "motion",
                "rock"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "// New hash based on hash13() from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\n// 4 in, 1 out\nfloat Hash41(in vec4 p) {\n\tp = fract(p * 0.1031);\n    p += dot(p, p.zwyx + 31.32);\n    return fract((p.x + p.y) * p.z - p.x * p.w);\n}\n\n// Hashes from \"Hash without Sine\"\nfloat Hash21(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 Hash22(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat SmoothNoise4D(in vec4 p) {\n    vec4 cell = floor(p);\n    vec4 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldbq = Hash41(cell);\n    float rdbq = Hash41(cell + vec4(1.0, 0.0, 0.0, 0.0));\n    float ldfq = Hash41(cell + vec4(0.0, 0.0, 1.0, 0.0));\n    float rdfq = Hash41(cell + vec4(1.0, 0.0, 1.0, 0.0));\n    float lubq = Hash41(cell + vec4(0.0, 1.0, 0.0, 0.0));\n    float rubq = Hash41(cell + vec4(1.0, 1.0, 0.0, 0.0));\n    float lufq = Hash41(cell + vec4(0.0, 1.0, 1.0, 0.0));\n    float rufq = Hash41(cell + vec4(1.0, 1.0, 1.0, 0.0));\n    float ldbw = Hash41(cell + vec4(0.0, 0.0, 0.0, 1.0));\n    float rdbw = Hash41(cell + vec4(1.0, 0.0, 0.0, 1.0));\n    float ldfw = Hash41(cell + vec4(0.0, 0.0, 1.0, 1.0));\n    float rdfw = Hash41(cell + vec4(1.0, 0.0, 1.0, 1.0));\n    float lubw = Hash41(cell + vec4(0.0, 1.0, 0.0, 1.0));\n    float rubw = Hash41(cell + vec4(1.0, 1.0, 0.0, 1.0));\n    float lufw = Hash41(cell + vec4(0.0, 1.0, 1.0, 1.0));\n    float rufw = Hash41(cell + 1.0);\n\n    return mix(mix(mix(mix(ldbq, rdbq, local.x),\n                       mix(lubq, rubq, local.x),\n                       local.y),\n\n                   mix(mix(ldfq, rdfq, local.x),\n                       mix(lufq, rufq, local.x),\n                       local.y),\n\n                   local.z),\n\n               mix(mix(mix(ldbw, rdbw, local.x),\n                       mix(lubw, rubw, local.x),\n                       local.y),\n\n                   mix(mix(ldfw, rdfw, local.x),\n                       mix(lufw, rufw, local.x),\n                       local.y),\n\n                   local.z),\n\n               local.w);\n}\n\nfloat FractalNoise4D(in vec4 p, in float scale, in float octaves) {\n    p *= scale;\n    float nscale = 1.0;\n    float tscale = 0.0;\n    float value = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += SmoothNoise4D(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nfloat mapScene(in vec3 p) {\n    return length(p) - 1.5 - FractalNoise4D(vec4(p, iTime), 1.0, 5.0) * 0.4;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n    float unit = 2.0 / iResolution.y;\n\n    vec2  mouse = (iMouse.xy - screenCenter) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float t = 0.0;\n    bool hit = false;\n    float iter = 0.0;\n\n    vec3 p;\n    for (float iters=0.0; iters < 30.0; iters++) {\n        p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            hit = true;\n            break;\n        }\n\n        if (t > 15.0) {\n            break;\n        }\n\n        t += d;\n        iter++;\n    }\n\n    if (hit) {\n        vec3 n = getNormal(p);\n        vec3 l = vec3(-0.58, 0.58, 0.58);\n        fragColor.rgb += max(0.0, dot(n, l));\n    }\n\n    else {\n        vec2 skyUv = rd.xy - iTime * sign(rd.xy);\n        if (all(greaterThan(vec2(abs(rd.y)), abs(rd.xz)))) skyUv = rd.xz - vec2(0.0, iTime);\n        if (all(greaterThan(vec2(abs(rd.x)), abs(rd.yz)))) skyUv = rd.yz - vec2(0.0, iTime);\n\n        skyUv *= 10.0;\n        vec2 cell = floor(skyUv);\n        vec2 local = fract(skyUv);\n\n        vec2 position = Hash22(cell);\n        float size = 0.05 * Hash21(cell);\n        float brightness = Hash21(cell + 347.583);\n\n        fragColor.rgb += smoothstep(unit, 0.0, length(local - position) - size) * brightness;\n        fragColor.rgb += (0.25 + 0.25 * sin(atan(uv.y, uv.x) * 6.0)) / (1.0 + length(uv) * 4.0);\n    }\n\n    fragColor.gb += iter / 30.0;\n    fragColor.rgb *= mod(dot(floor(fragCoord), vec2(1.0)), 2.0); // Checkerboard dither\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}