{
    "Shader": {
        "info": {
            "date": "1706057704",
            "description": "Recursive map for fractal generation. Mouse interaction, x -> rotation, y -> colouring.",
            "flags": 0,
            "hasliked": 0,
            "id": "lc2XR1",
            "likes": 8,
            "name": "Recursion flower",
            "published": 3,
            "tags": [
                "fractal",
                "interactive",
                "rotation",
                "sierpinski"
            ],
            "usePreview": 0,
            "username": "willwombell",
            "viewed": 189
        },
        "renderpass": [
            {
                "code": "#define PI 3.141529\n#define PHI 1.618033988\n\n#define DARK false\n#define STOP false\n\n// Set phase.x to 0 for Sierpinsky fractal\n#define PHASE vec2(-0.15, 0.) \n#define PRESS 1.5\n\n\nconst float r = 3./(3.+2.*sqrt(3.));\n\nvec3 expand(vec2 x) { return vec3(x, 1.); }\nvec2 reduce(vec3 w) { return vec2(w.xy)/w.z; }\n\nvec2 trans(vec2 uv, mat2 r, vec2 t) { return (uv-t)*r; }\n\nmat2 rot(float x) { return mat2(cos(x), -sin(x), sin(x), cos(x)); }\n\nmat2 I2 = mat2(1., 0., 0., 1.);\nmat3 I3 = mat3(1., 0., 0., 0., 1., 0., 0., 0., 1.);\n\nmat2 m0 = mat2(1./r, 0., 0., 1./r);\n\nmat3 rot_ax(float x, vec3 v) {\n    mat3 K = mat3(0., -v.z, v.y, v.z, 0., -v.x, -v.y, v.x, 0.);\n    return I3 + sin(x)*K + (1.-cos(x))*K*K;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 ms = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    if (STOP) {\n        ms = iMouse.z >0. ? ms : PHASE;\n    } else {\n        ms = iMouse.z >0. ? ms : vec2(pow(sin(iTime/(PHI*PHI)), 5.)*3.,\n                                      1./(pow(cos(iTime), 3.)+0.3));\n    }\n    \n    vec3 col = vec3(.95);\n    \n    float t = STOP ? PHASE.x : iTime;\n    \n    vec2 w1 = vec2(1.-r, 0),\n         w2 = rot(PI*2./3.)*w1,\n         w3 = rot(PI*4./3.)*w1;\n         \n    vec3 tri = vec3(1., 1., 1.)/sqrt(3.);\n    \n    if (length(uv) < 1.) { col += 0.05;}\n    for (int i = 0; i<10; i++) {\n        if (length(trans(uv, m0, w1)) < 1.) {\n            uv = trans(uv, m0, w1);\n            col -= vec3(0.17, 0., 0.)*rot_ax(t+float(i)*ms.y, tri);\n        }\n        if (length(trans(uv, m0, w2)) < 1.) {\n            uv = trans(uv, m0*rot(PI*ms.x), w2);\n            col -= vec3(0., 0.17, 0.)*rot_ax(t+float(i)*ms.y, tri);\n        }\n        if (length(trans(uv, m0, w3)) < 1.) {\n            uv = trans(uv, m0*rot(-PI*ms.x), w3);\n            col -= vec3(0., 0., 0.17)*rot_ax(t+float(i)*ms.y, tri);\n        }\n        \n    }\n    if (DARK) { col = 1. - col; }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}