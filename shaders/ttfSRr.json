{
    "Shader": {
        "info": {
            "date": "1561761762",
            "description": "Generated shader, original source at http://raiselandsoft.com/demo/#rocket\nSimple distance field functions composed together.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttfSRr",
            "likes": 2,
            "name": "Generated Rocket",
            "published": 3,
            "tags": [
                "generated"
            ],
            "usePreview": 0,
            "username": "davidm",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "\nprecision highp float;\n\n\n// Generated by http://raiselandsoft.com/demo/\n// You can see (and edit) the original source on http://raiselandsoft.com/demo/#rocket\n\n\nvec3 cameraPosition = vec3(4.76854769801169631194,2.42356690649268635696,5.79756280860986628056);\nmat3 viewMatrix = mat3(0.66686963500368789948,-0.00000000000000000347,-0.74517440234487952733,-0.03724319759097129146,0.99875026039496628272,-0.03332959036932479219,0.74424312838161166272,0.04997916927067834469,0.66603622160942932418);\nfloat fov = 1.2;\n \n\nvec2 uv;\n\n#define NaN (0./0.)\n\nfloat distanceToCamera = 0.;\n\n\n        #ifndef UNION\n        #define UNION\n        float opSmoothUnion( float d1, float d2, float k ) {\n          if (k==0.){\n            return min(d1,d2);\n          }\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) - k*h*(1.0-h);\n        }\n\n        vec4 colorUnion(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n        #ifndef SUBSTRACTION\n        #define SUBSTRACTION\n        float opSmoothSubtraction( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(-d1, d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n          return mix( d2, -d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorSubstraction(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n      \n        #ifndef UNION\n        #define UNION\n        float opSmoothUnion( float d1, float d2, float k ) {\n          if (k==0.){\n            return min(d1,d2);\n          }\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) - k*h*(1.0-h);\n        }\n\n        vec4 colorUnion(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n  \n\n      #ifndef PLANE\n      #define PLANE\n      float plane(vec3 p, vec3 n, float k){\n        return dot(p, normalize(n)) + k;\n      }\n      #endif\n      \n  \n\n        #ifndef REP_POLAR\n        #define REP_POLAR\n        vec3 opPolarRep(vec3 p, float step){\n            float r = length(p.xy);\n            float angle = atan(p.y, p.x);\n            angle += step*0.5;\n            angle = mod(angle, step) - step*0.5;\n            return vec3(r*cos(angle), r*sin(angle), p.z);\n        }\n        #endif\n\n      \n        #ifndef SUBSTRACTION\n        #define SUBSTRACTION\n        float opSmoothSubtraction( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(-d1, d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n          return mix( d2, -d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorSubstraction(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n      \n        #ifndef SUBSTRACTION\n        #define SUBSTRACTION\n        float opSmoothSubtraction( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(-d1, d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n          return mix( d2, -d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorSubstraction(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n      \n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n\n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n  \n\n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n  \n\n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n\n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n  \n    \n  \n\n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n\n      #ifndef CYLINDER\n      #define CYLINDER\n      float sdCappedCylinder( vec3 p, vec2 h )\n      {\n        vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n        return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n      }\n      #endif\n      \n  \n\n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n\n      #ifndef CYLINDER\n      #define CYLINDER\n      float sdCappedCylinder( vec3 p, vec2 h )\n      {\n        vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n        return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n      }\n      #endif\n      \n  \n\n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n\n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n  \n\n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n\n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n  \n\n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n\n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n  \n\n        #ifndef INTERSECTION\n        #define INTERSECTION\n        float opSmoothIntersection( float d1, float d2, float k ) {\n          if (k==0.){\n            return max(d1,d2);\n          }\n          float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix( d2, d1, h ) + k*h*(1.0-h);\n        }\n\n        vec4 colorIntersection(float d1, float d2, float k, vec4 c1, vec4 c2) {\n          float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n          return mix(c2, c1, vec4(h));\n        }\n\n        #endif\n\n        \n      #ifndef REVOLUTION\n      #define REVOLUTION\n      vec3 revolution(vec3 p){\n        float r = length(p.xz);\n        return vec3(r, p.y, 0.);\n      }\n      #endif\n\n      \n      #ifndef PARABOLOID\n      #define PARABOLOID\n      float paraboloid(vec3 p, vec3 n, float k, vec3 m){\n        k += dot(m, p*p);\n        return dot(p, n) + k;\n      }\n      #endif\n      \n\n      #ifndef BOX\n      #define BOX\n      float box(vec3 p, vec3 b){\n        vec3 d = abs(p) - b;\n        return length(max(d,0.0))\n              + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n      }\n      #endif\n      \n  \n\n        #ifndef REP_POLAR\n        #define REP_POLAR\n        vec3 opPolarRep(vec3 p, float step){\n            float r = length(p.xy);\n            float angle = atan(p.y, p.x);\n            angle += step*0.5;\n            angle = mod(angle, step) - step*0.5;\n            return vec3(r*cos(angle), r*sin(angle), p.z);\n        }\n        #endif\n\n      \n      #ifndef SPHERE\n      #define SPHERE\n      float sphere(vec3 p, float r){\n        return length(p) - r;\n      }\n      #endif\n      \n    \n\nfloat df(vec3 p){\n  return opSmoothUnion(sphere(((opPolarRep((p).xzy, 0.20943951023931953181)).xzy - vec3(1.66999999999999992895,-0.90000000000000002220,0.00000000000000000000)), 0.10000000000000000555), opSmoothUnion(opSmoothIntersection(box(((mat3(0.57357643635104615942,0.00000000000000000000,-0.81915204428899202060,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.81915204428899202060,0.00000000000000000000,0.57357643635104615942)*p) - vec3(1.00000000000000000000,-0.10000000000000000555,0.00000000000000000000)), vec3(0.66100000000000003197,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.57357643635104615942,0.00000000000000000000,-0.81915204428899202060,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.81915204428899202060,0.00000000000000000000,0.57357643635104615942)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p) - vec3(1.00000000000000000000,5.09999999999999964473,0.00000000000000000000)), vec3(0.64100000000000001421,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p) - vec3(1.00000000000000000000,1.69999999999999995559,0.00000000000000000000)), vec3(0.64100000000000001421,0.73999999999999999112,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p) - vec3(1.00000000000000000000,3.00000000000000000000,0.00000000000000000000)), vec3(0.40999999999999997558,0.40000000000000002220,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944);\n}\n\nfloat getAO(vec3 ro, vec3 N){\n    float ao=1.0;\n    float k=1.3;\n    float delta=0.135;\n    for (float j=1.; j<=6.; j++){\n        float diff=max(j*delta-df(ro+N*(j*delta)), 0.);\n        ao-=k*diff;\n        k=k*0.7;\n    }\n    return ao;\n}\nvec3 norm(vec3 p){\n    float eps=0.001;\n    return normalize(vec3(\n        df(p+vec3(eps,0,0)) - df(p-vec3(eps,0,0)),\n        df(p+vec3(0,eps,0)) - df(p-vec3(0,eps,0)),\n        df(p+vec3(0,0,eps)) - df(p-vec3(0,0,eps))\n    ));\n}\n\nfloat phong(vec3 I, vec3 N, vec3 rd, float df, float ef){\n    float diff=max(dot(N, -I), 0.)*df;\n    vec3 R=reflect(I, N);\n    diff= pow(max(dot(R, -rd), 0.), 10.) * ef +  diff;\n    return diff;\n}\n\nvec3 light2(vec3 N, vec3 rd, vec3 color){\n  float time = 10.;\n\n    float t=3.14*0.3;\n    t=time*0.3;\n    t=mod(t, 3.14);\n    vec3 L=vec3(cos(t), -0.5,1.*sin(t));\n    L = normalize(vec3(1));\n  return 4.*color*phong(normalize(-L), N, rd, 0.2, 0.15) +\n         4.*color*vec3(1)*phong(vec3(1,0,0), N, rd, 0.2, 0.) + \n         4.*color*vec3(1)*phong(vec3(0,1,0), N, rd, 0.2, 0.);\n}\n\nvec3 light(vec3 N, vec3 rd){\n  float time = 10.;\n\n    float t=3.14*0.3;\n    t=time*0.3;\n    t=mod(t, 3.14);\n    vec3 L=vec3(cos(t), -0.5,1.*sin(t));\n    L = normalize(vec3(1));\n        return vec3(0.25)+\n        vec3(1.64, 1.27, 0.99)*7.*vec3(0.2)*phong(normalize(-L),\n                            N, rd, 0.2, 0.7)\n                            +vec3(1)*phong(vec3(1,0,0), N, rd, 0.2, 0.)\n                                +vec3(1)*phong(vec3(0,1,0), N, rd, 0.2, 0.);\n}\n\n#ifdef WEBGL1\nbool isnan( float val )\n{\n  return ( val < 0.0 || 0.0 < val || val == 0.0 ) ? false : true;\n  // important: some nVidias failed to cope with version below.\n  // Probably wrong optimization.\n  /*return ( val <= 0.0 || 0.0 <= val ) ? false : true;*/\n}\n#endif\n\n\n\nvec4 color(vec3 p, vec3 rd){\n  vec3 N = norm(p);\n  float ao = getAO(p, N);\n  vec4 color = colorUnion(sphere(((opPolarRep((p).xzy, 0.20943951023931953181)).xzy - vec3(1.66999999999999992895,-0.90000000000000002220,0.00000000000000000000)), 0.10000000000000000555), opSmoothUnion(opSmoothIntersection(box(((mat3(0.57357643635104615942,0.00000000000000000000,-0.81915204428899202060,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.81915204428899202060,0.00000000000000000000,0.57357643635104615942)*p) - vec3(1.00000000000000000000,-0.10000000000000000555,0.00000000000000000000)), vec3(0.66100000000000003197,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.57357643635104615942,0.00000000000000000000,-0.81915204428899202060,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.81915204428899202060,0.00000000000000000000,0.57357643635104615942)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p) - vec3(1.00000000000000000000,5.09999999999999964473,0.00000000000000000000)), vec3(0.64100000000000001421,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p) - vec3(1.00000000000000000000,1.69999999999999995559,0.00000000000000000000)), vec3(0.64100000000000001421,0.73999999999999999112,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p) - vec3(1.00000000000000000000,3.00000000000000000000,0.00000000000000000000)), vec3(0.40999999999999997558,0.40000000000000002220,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944, vec4(1.), colorUnion(opSmoothIntersection(box(((mat3(0.57357643635104615942,0.00000000000000000000,-0.81915204428899202060,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.81915204428899202060,0.00000000000000000000,0.57357643635104615942)*p) - vec3(1.00000000000000000000,-0.10000000000000000555,0.00000000000000000000)), vec3(0.66100000000000003197,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.57357643635104615942,0.00000000000000000000,-0.81915204428899202060,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.81915204428899202060,0.00000000000000000000,0.57357643635104615942)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p) - vec3(1.00000000000000000000,5.09999999999999964473,0.00000000000000000000)), vec3(0.64100000000000001421,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p) - vec3(1.00000000000000000000,1.69999999999999995559,0.00000000000000000000)), vec3(0.64100000000000001421,0.73999999999999999112,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p) - vec3(1.00000000000000000000,3.00000000000000000000,0.00000000000000000000)), vec3(0.40999999999999997558,0.40000000000000002220,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944, vec4(1.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000), colorUnion(opSmoothIntersection(box(((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p) - vec3(1.00000000000000000000,5.09999999999999964473,0.00000000000000000000)), vec3(0.64100000000000001421,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p) - vec3(1.00000000000000000000,1.69999999999999995559,0.00000000000000000000)), vec3(0.64100000000000001421,0.73999999999999999112,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p) - vec3(1.00000000000000000000,3.00000000000000000000,0.00000000000000000000)), vec3(0.40999999999999997558,0.40000000000000002220,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944, colorIntersection(box(((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p) - vec3(1.00000000000000000000,5.09999999999999964473,0.00000000000000000000)), vec3(0.64100000000000001421,0.40000000000000002220,0.25000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.00000000000000006123,0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.00000000000000006123)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000, vec4(1.), vec4(1.)), colorUnion(opSmoothIntersection(box(((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p) - vec3(1.00000000000000000000,1.69999999999999995559,0.00000000000000000000)), vec3(0.64100000000000001421,0.73999999999999999112,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(box(((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p) - vec3(1.00000000000000000000,3.00000000000000000000,0.00000000000000000000)), vec3(0.40999999999999997558,0.40000000000000002220,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944, colorIntersection(box(((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p) - vec3(1.00000000000000000000,1.69999999999999995559,0.00000000000000000000)), vec3(0.64100000000000001421,0.73999999999999999112,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(0.76604444311897823550,0.00000000000000000000,-0.64278760968653936292,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.64278760968653936292,0.00000000000000000000,0.76604444311897823550)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000, vec4(1.), vec4(1.)), colorUnion(opSmoothIntersection(box(((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p) - vec3(1.00000000000000000000,3.00000000000000000000,0.00000000000000000000)), vec3(0.40999999999999997558,0.40000000000000002220,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944), 0.01499999999999999944), 0.01499999999999999944, colorIntersection(box(((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p) - vec3(1.00000000000000000000,3.00000000000000000000,0.00000000000000000000)), vec3(0.40999999999999997558,0.40000000000000002220,0.50000000000000000000)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((mat3(-0.17364817766693033119,0.00000000000000000000,-0.98480775301220824236,0.00000000000000000000,1.00000000000000000000,0.00000000000000000000,0.98480775301220824236,0.00000000000000000000,-0.17364817766693033119)*p)) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000, vec4(1.), vec4(1.)), colorUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944), 0.01499999999999999944, colorIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,-0.90000000000000002220,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000, vec4(1.), vec4(1.)), colorUnion(opSmoothIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), opSmoothUnion(opSmoothSubtraction(box((mat3(0.93969262078590842791,-0.34202014332566871291,0.00000000000000000000,0.34202014332566871291,0.93969262078590842791,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(3.39999999999999991118,0.00000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(box((mat3(0.98480775301220824236,0.17364817766693035894,0.00000000000000000000,-0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.29999999999999982236,-2.14999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), opSmoothSubtraction(paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution((opPolarRep((p).xzy, 1.25663706143591724640)).xzy) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), opSmoothSubtraction(box((mat3(0.96592582628906831221,0.25881904510252073948,0.00000000000000000000,-0.25881904510252073948,0.96592582628906831221,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*((opPolarRep((p).xzy, 1.25663706143591724640)).xzy - vec3(2.50000000000000000000,1.89999999999999991118,0.00000000000000000000))), vec3(1.00000000000000000000,1.00000000000000000000,1.00000000000000000000)), box((opPolarRep((p).xzy, 1.25663706143591724640)).xzy, vec3(2.89999999999999991118,1.50000000000000000000,0.10000000000000000555)), 0.90000000000000002220), 0.02999999999999999889), 0.02999999999999999889), 0.02999999999999999889), opSmoothIntersection(plane(p, vec3(0.00000000000000000000,-1.00000000000000000000,0.00000000000000000000), -1.00000000000000000000), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.00000000000000000000, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000), 0.00000000000000000000), 0.01499999999999999944, colorIntersection(sdCappedCylinder((p - vec3(0.00000000000000000000,4.00000000000000000000,0.00000000000000000000)), vec2(32.00000000000000000000, 0.20000000000000001110)), paraboloid((mat3(0.98480775301220824236,-0.17364817766693035894,0.00000000000000000000,0.17364817766693035894,0.98480775301220824236,0.00000000000000000000,0.00000000000000000000,0.00000000000000000000,1.00000000000000000000)*(revolution(p) - vec3(0.29999999999999998890,2.50000000000000000000,0.00000000000000000000))), vec3(1.00000000000000000000,0.00000000000000000000,0.00000000000000000000), -1.02099999999999990763, vec3(0.00000000000000000000,0.02000000000000000042,0.00000000000000000000)), 0.00000000000000000000, vec4(1.), vec4(1.)), vec4(1.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 1.00000000000000000000))))))));\n  return vec4(ao*light2(N, rd, color.rgb), color.a);\n}\n\n\n                void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n                    uv = 2.*fragCoord/iResolution.yy-vec2(iResolution.x/iResolution.y , 1.);\n  float d;\n\n  vec3 ro = cameraPosition;\n  vec3 rd = viewMatrix * normalize(vec3(uv.x, uv.y, -fov));\n\n  // Ray march here\n  for (float i=0.; i<1024.; i++){\n    d = abs(df(ro));\n    distanceToCamera +=d;\n    ro += rd*d*0.99;\n    if (d<0.001 || d>100. || distanceToCamera>200.){\n      break;\n    }\n  }\n  vec4 c;\n  if (d<0.001){\n    c = color(ro, rd);\n  }else{\n    c = vec4(0.9, 0.9, 0.9, 1.);\n  }\n  fragColor = c;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}