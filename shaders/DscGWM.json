{
    "Shader": {
        "info": {
            "date": "1677308426",
            "description": "bokeh blur generated using a dynamic \"spiral flower\" sampling pattern\n\nwarning: fairly heavy on performance",
            "flags": 32,
            "hasliked": 0,
            "id": "DscGWM",
            "likes": 3,
            "name": "Spiral Pattern Bokeh Blur",
            "published": 3,
            "tags": [
                "blur",
                "lens",
                "bokeh",
                "defocus",
                "fibonacci"
            ],
            "usePreview": 0,
            "username": "SaphiraKai",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "//? artifact-smoothing blur and HDR -> SDR pass\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    //? modulators for animation\n    float mod2 = sin(iTime * 1.0/2.0 * pi + pi/2.0) / 2.0 + 0.5;\n    \n    //? sample size/radius parameters\n    float radius = 3.0 * (mod2 + 1.0 );\n    float samples = pow((radius * 2.0 + 1.0), 2.0);\n    \n    float weights = 0.0;\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n    for (float x=-radius; x<radius; x++) {\n        for (float y=-radius; y<radius; y++) {\n\n            //? calculate distance between the sampled pixel and the output pixel\n            float d = sqrt(pow(float(abs(x)), 2.0) + pow(float(abs(y)), 2.0));\n            float d_norm = max(d / float(radius) * -1.0 + 1.0, 0.0);\n            \n            //? apply a sine function to the normalized distance for a smooth blur kernel\n            float weight = sin(pi * (d_norm + 1.5)) / 2.0 + 0.5;\n\n            //? retrieve the sampled pixel's color\n            vec2 offset = vec2(float(x), float(y));\n            vec2 uv = (fragCoord + offset) / iResolution.xy;\n            \n            //? perform a running sum of the sampled pixels and their weights\n            color += texture(iChannel0, uv) * weight;\n            weights += weight;\n        }\n    }\n    \n    //? derive an average pixel color from the samples and weights\n    color = color / weights;\n\n    //? convert HDR input back to SDR\n    fragColor = color / (1.0 + lum(color)) * post_gamma;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// things to play with ////////\nconst float blur_amount = 0.5;\nconst float pre_gamma = 0.6;\nconst float post_gamma = 1.1;\nconst float samples = 512.0;\nconst float angle = 137.5;\n////////                     //\n\n//? calculate luminance of color\nfloat lum(vec4 col) {\n    float lum = 0.2126*col.r + 0.7152*col.g + 0.0722*col.b;\n    return lum;\n}\n\n//? constants\nconst float pi = 3.14159;\nconst float phi = 1.61803;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//? SDR -> HDR pass\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n\n    //? convert SDR input to HDR\n    fragColor = color / (1.0 - lum(color)) * pre_gamma;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//? bokeh blur pass\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    //? modulators for animation\n    float mod1 = sin(iTime * 1.0/4.0 * pi + pi/2.0) / 2.0 + 0.5;\n    float mod2 = sin(iTime * 1.0/2.0 * pi + pi/2.0) / 2.0 + 0.5;\n\n    //? sample size parameters\n    float min_samples = 32.0;\n    float samples = mod1 * (samples - min_samples) + min_samples;\n\n    //? size of blur\n    float size = blur_amount * mod2;\n    float radius = size * pow(samples, -phi/pi) / 10.0;\n\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n    for (int i=0; i<int(ceil(samples)); i++) {\n\n        // calculate spiral pattern for sampling ////////\n        vec2 offset = vec2(0.0, 0.0);\n\n        float angle = float(i)*radians(angle);\n        float r = radius * sqrt(float(i)) * (iResolution.y);\n\n        offset.x += r * cos(angle);\n        offset.y += r * sin(angle);\n        ////////                                       //\n\n        //? perform a running sum of the sampled pixels\n        vec2 uv = (fragCoord + offset) / iResolution.xy;\n        color += texture(iChannel0, uv);\n    }\n\n    //? derive an average pixel color from the samples\n    fragColor = color / (ceil(samples));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}