{
    "Shader": {
        "info": {
            "date": "1557012354",
            "description": "A cup within a cup? What is this?!? And the small cup doesn't even have any coffee!\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4tdfDj",
            "likes": 5,
            "name": "Coffee Journey",
            "published": 3,
            "tags": [
                "procedural",
                "sdf",
                "coffee",
                "water",
                "adventure",
                "boat",
                "beautiful",
                "journey"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "float waveI(in vec3 p)\n{\n    float w = dot(p.xz, vec2(0.707, 0.707)) + iTime * 0.8;\n   \tfloat f = -abs(sin(w * 0.2)) * 0.5;\n    \n    w = dot(p.xz, normalize(vec2(-1.0, 0.3))) + iTime;\n    f += -(sin(w + 4.33)) * 0.1;\n    \n    w = dot(p.xz, normalize(vec2(0.5, -1.5))) + iTime * 0.5;\n    f += -abs(cos(w * 0.8)) * 0.3;\n    \n    f += textureLod(iChannel0, p.xz + iTime * 0.2, 8.5).x * 0.5;\n    \n    return f * (40.0 - p.z) / 40.0;\n}\n\nfloat wave(in vec3 p)\n{\n    float w = waveI(p);\n    w += waveI(p + vec3(0.0, 0.0, 0.1));\n    w += waveI(p + vec3(0.0, 0.0, -0.1));\n    \n    return w / 3.0;\n}\n\nfloat cof_sdf(in vec3 p)\n{\n    return p.y + 0.5- wave(p);\n}\n\nvec3 cof_norm(in vec3 p)\n{\n    const float e = 0.01;\n    vec3 n = vec3(\n        cof_sdf(p + vec3(e, 0.0, 0.0)) - cof_sdf(p - vec3(e, 0.0, 0.0)),\n        cof_sdf(p + vec3(0.0, e, 0.0)) - cof_sdf(p - vec3(0.0, e, 0.0)),\n        cof_sdf(p + vec3(0.0, 0.0, e)) - cof_sdf(p - vec3(0.0, 0.0, e)));\n    n += textureLod(iChannel0, (p.xz - iTime * 0.1) * 0.1, 0.0).xyz * 0.25;\n    return normalize(n);\n}\n\nfloat sphere(in vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(in vec3 p, in vec3 b)\n{\n    vec3 d = abs(p) - b;\n\treturn length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat smoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nvec3 rotate(in vec3 p, in float a)\n{\n    mat3x3 m = mat3x3(vec3(cos(a), -sin(a), 0.0), vec3(sin(a), cos(a), 0.0), vec3(0.0, 0.0, 1.0));\n    return m * p;\n}\n\nvec3 cup_c = vec3(0.0, -0.1, 2.0);\nfloat cup_sdf(in vec3 p)\n{\n    vec3 c = cup_c;\n    \n    float w1 = wave(c + vec3(0.0, 0.0, -0.2));\n    float w2 = wave(c + vec3(0.0, 0.0, 0.0));\n    float w3 = wave(c + vec3(0.0, 0.0, -0.1));\n    c.y += (w1 + w2 + w3) / 3.0;\n    \n    p = rotate(p, 3.1415 / 16.0 + sin(iTime) * 0.1);\n    p -= c;\n    \n    \n    float o = max(-box(p - vec3(0.0, 1.2, 0.0), vec3(5.0, 1.0, 5.0)), sphere(p, 0.9));\n    o = max(-sphere(p, 0.8), o);\n    o = smoothUnion(o, torus(p - vec3(1.0, -0.2, 0.0), vec2(0.3, 0.075)), 0.1);\n    \n    return o;\n}\n\nfloat cup_mask(in vec3 p)\n{\n    vec3 c = cup_c;\n    \n    float w1 = wave(c + vec3(0.0, 0.0, -0.2));\n    float w2 = wave(c + vec3(0.0, 0.0, 0.0));\n    float w3 = wave(c + vec3(0.0, 0.0, -0.1));\n    c.y += (w1 + w2 + w3) / 3.0;\n    \n    p = rotate(p, 3.1415 / 16.0 + sin(iTime) * 0.1);\n    p -= c;\n    \n    return sphere(p, 0.8);\n}\n\nvec3 cup_norm(in vec3 p)\n{\n    const float e = 0.01;\n    vec3 n = vec3(\n        cup_sdf(p + vec3(e, 0.0, 0.0)) - cup_sdf(p - vec3(e, 0.0, 0.0)),\n        cup_sdf(p + vec3(0.0, e, 0.0)) - cup_sdf(p - vec3(0.0, e, 0.0)),\n        cup_sdf(p + vec3(0.0, 0.0, e)) - cup_sdf(p - vec3(0.0, 0.0, e)));\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.0 - 1.0;\n    \n    vec3 o = vec3(0.0, 2.0, -1.5),\n        f = normalize(cup_c - o),\n        r = vec3(1.0, 0.0, 0.0),\n        u = normalize(cross(f, r));\n    float a = iResolution.y / iResolution.x;\n    \n    fragColor = vec4(0.0);\n    \n    vec3 d = normalize(f + u * uv.y * a + r * uv.x);\n    \n    vec3 l = normalize(vec3(0.707, 2.0, 0.0));\n    \n    fragColor = vec4(1.0) * 0.8;\n    \n    float cp = 100000.0;\n    {\n        float s = 0.0;\n        for(int i = 0; i < 32; i++)\n        {\n            vec3 p = o + d * s;\n            float m = cup_sdf(p);\n            if(m < 0.005)\n            {\n                vec3 n = cup_norm(p);\n                vec4 c = min(vec4(1.2) * (textureLod(iChannel1, n.xy, 2.0).r + 0.4), vec4(1.0));\n                fragColor = c * max(dot(n, l), 0.2);\n                cp = s;\n                break;\n            }\n            s += m;\n        }\n    }\n    \n    {\n        float s = 0.0;\n        for(int i = 0; i < 128; i++)\n        {\n            vec3 p = o + d * s;\n            float m = cof_sdf(p);\n            if(m < 0.05)\n            {\n                if(s > cp || cup_mask(p) < 0.05)\n                {\n                    return;\n                }\n                \n                float cup = cup_sdf(p);\n\n                vec3 c = vec3(0.18, 0.12, 0.05) * 0.5;\n                vec3 n = cof_norm(p);\n                vec3 d = c * dot(n, l);\n                vec3 sp = c * pow(max(dot(n, normalize(l + -d)), 0.0), 10.0) * 10.0;\n\n                float cupAmb = (1.0 - min(cup * 5.0, 1.0));\n                d += cupAmb * 3.0 * c;\n                d += c * max(s - 20.0, 0.0) * 0.75;\n                \n                fragColor = vec4(d + sp, 1.0);\n                break;\n            }\n            s += m;\n            \n            if(s > 30.0)\n            {\n                vec3 n = normalize(d);\n                vec4 c = min(vec4(1.2) * (textureLod(iChannel1, n.xy, 0.0).r + 0.4), vec4(2.0));\n                fragColor = c * max(dot(n, l), 0.2) * 1.3;\n                return;\n            }\n        }\n    }\n    \n    fragColor = pow(fragColor, vec4(1.4));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}