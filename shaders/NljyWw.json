{
    "Shader": {
        "info": {
            "date": "1649780266",
            "description": "hello",
            "flags": 32,
            "hasliked": 0,
            "id": "NljyWw",
            "likes": 2,
            "name": "Ferns and Other Fun Shapes",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "feedback",
                "buffer",
                "barnsleyfern"
            ],
            "usePreview": 0,
            "username": "DJDoomz",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n\nmat2 rot(in float a)\n{\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec4 last = texture(iChannel0, fragCoord/iResolution.xy);\n    //draw a stupid point somewhere\n    vec2 seed = vec2(0);\n    vec4 new = vec4(smoothstep(1.5/iResolution.y, 0., length(uv - seed)));\n    //4 copies\n    //1 - squished to line in center\n    vec2 cuv = uv;\n    cuv *= vec2(40., 3. );\n    cuv += vec2(0, .75);\n    new += texture(iChannel0, cuv);\n    \n    //2 - rotated left and shifted left\n    cuv = uv;\n    cuv *= rot(-PI/2.0);\n    cuv *= 2.8;\n    cuv += .5;\n    cuv += vec2(0.8, -.5);\n    new += texture(iChannel0, cuv);\n    \n    //3 - shfifted up and rotated a bit right, scaled down\n    cuv = uv;\n    cuv *= rot(.1 + sin(.1*iTime));\n    cuv *= 1.2;\n    cuv += .5;\n    cuv += vec2(-0.04, -.05);\n    new += texture(iChannel0, cuv);\n    \n    //4 - rotated right and shifted right\n    cuv = uv;\n    cuv *= rot(PI/2.0);\n    cuv *= 2.8;\n    cuv += .5;\n    cuv += vec2(-1., -.3);\n    new += texture(iChannel0, cuv);\n\n    fragColor = clamp(.4*last + new, 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}