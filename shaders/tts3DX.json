{
    "Shader": {
        "info": {
            "date": "1557952279",
            "description": "Done during Cookie collective workshop (paris, 05-2019)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tts3DX",
            "likes": 2,
            "name": "Cookie Collective workshop 2019",
            "published": 3,
            "tags": [
                "workshop"
            ],
            "usePreview": 0,
            "username": "flewww",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "// Some doc there: http://www.shaderific.com/features\n// Ggl iq distance function\n\nmat2 rotation (float a) {\n\tfloat c = cos(a);\n    float s = sin(a);\n   \treturn mat2(c, s, -s, c);\n}\n\nfloat sphere (vec3 pos, float radius) {\n\treturn length(pos) - radius;\n}\n\nfloat cylinder (vec3 pos, float radius) {\n\treturn length(pos.xy) - radius;\n}\n\nfloat box (vec3 pos, float radius) {\n    pos = abs(pos);\n    return max(pos.x, max(pos.y, pos.z)) - radius;\n}\n\nfloat map (vec3 pos) {\n    pos.xz *= rotation(0.5*iTime);\n    pos.yz *= rotation(0.7*iTime);\n    pos.xy *= rotation(0.3*sin(iTime)*pos.z);\n    \n    float size = 3.;\n    pos = mod(pos, size) - size/2.;\n    \n    \n    float cyl_radius  = .5*(sin(0.7*iTime)*0.5+0.5);\n    float cyl2_radius = .5*(cos(0.6*iTime)*0.5+0.5);\n    float cyl3_radius = .5*(sin(0.5*iTime)*0.5+0.5);\n    float box_radius  = .6*(cos(iTime)*0.5+0.5);\n\n    float geometry = box(pos, box_radius);\n    geometry = min(geometry, cylinder(pos.xyz, cyl_radius));\n    geometry = min(geometry, cylinder(pos.xzy, cyl2_radius));\n    geometry = min(geometry, cylinder(pos.yzx, cyl3_radius));\n    return geometry;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 position = fragCoord/iResolution.xy;\n    position = position*2. - 1.;\n    position.x *= iResolution.x/iResolution.y;\n    \n    vec3 eye = vec3(0., 0., -2);\n    vec3 ray = normalize(vec3(position, 1.));\n    float shade = 0.;\n    for (int index=0; index<20; ++index) {\n        float dist = map(eye);\n        if (dist < 0.001) {\n            shade = 1.;// - float(index)/20.;\n            break;\n        }\n        eye += ray*dist;\n    }\n    \n    fragColor = vec4(shade*(sin(iTime)*0.4 + 0.6), \n                     shade*(cos(iTime)*0.4 + 0.6), \n                     shade*(sin(0.5*iTime)*0.4 + 0.6), \n                     1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}