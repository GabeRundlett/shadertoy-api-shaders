{
    "Shader": {
        "info": {
            "date": "1482185976",
            "description": "Simple Voronoi Diagram in different metrics.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ltSDl",
            "likes": 1,
            "name": "Voronoi Diagram (MK)",
            "published": 3,
            "tags": [
                "voronoi",
                "diagram",
                "voronoidiagram"
            ],
            "usePreview": 0,
            "username": "Tryton",
            "viewed": 572
        },
        "renderpass": [
            {
                "code": "float test(vec2 s,vec2 e){\n \treturn mix(abs(reflect(s,e).x),abs(reflect(e,s).x),0.5);\n}\n    \nfloat metric(vec2 s, vec2 e, float p)\n{\n    return pow(pow(abs((e-s).x),p) + pow(abs((e-s).y),p),1.0f/p);\n}\n\nfloat triangular(vec2 s,vec2 e){\n \treturn max(abs((e-s).x)*0.866025+(e-s).y*0.5,-(e-s).y); \n}\n\nfloat supremum(vec2 s,vec2 e){\n \treturn max(abs((e-s).x), abs((e-s).y) );   \n}\n\nfloat manhattan(vec2 s,vec2 e){\n    return abs((e-s).x)+abs((e-s).y);\n}\n\nfloat euclid(vec2 s,vec2 e){\n    return sqrt(dot(s-e,s-e));\n}\n\nfloat river(vec2 s, vec2 e)\n{\n    float x_axis_shift = 0.5;\n    \n    if(s.x==s.y)\n    {\n        return abs(s.y-e.y);\n    }\n    else\n    {\n        return abs(s.y) + abs(e.y) - x_axis_shift + abs(s.x-e.x);\n    }\n}\n\nfloat station(vec2 s, vec2 e)\n{\n    vec2 station_pos = vec2(0.2, 0.2);\n    \n    s = s - station_pos;\n    e = e - station_pos;\n    \n    float s_angle = atan(s.y, s.x);\n  \tfloat e_angle = atan(e.y, e.x);\n    \n    if(s_angle == e_angle)\n    {\n        return euclid(s,e);\n    }\n    else\n    {\n        return euclid(s, station_pos) + euclid(station_pos, e);\n    }\n}\n\nfloat dist(vec2 s,vec2 e){\n \treturn metric(s,e,(sin(iTime) + 1.5f)*5.0f);  \n}\n\nvec3 color(vec2 p){\n    vec2 seeds[16];\n    vec3 colors[16];\n    \n    for(int i=0;i<16;i++){\n        float il = float(i+1);\n     \tvec2 pos = vec2(mod(il*16.0*log(il),1.0),mod(il*log(16.0*il)*exp(1.0/16.0),1.0));\n        float r = 1.0/(16.0+1.0);\n        \n        seeds[i] = vec2(pos.x+ r*cos(iTime+il),pos.y+r*sin(iTime+il));\n        colors[i] = vec3(mod(il*16.0*log(il),1.0),\n                         mod(il*log(16.0*il)*exp(1.0/16.0),1.0),\n                         mod(il*log(1.0/16.0)*exp(1.0/16.0*il),1.0));\n        \n    }\n    \n    float distb = dist(seeds[0], p);\n    vec3 color = colors[0];\n    for (int i = 0; i < 16; i++) {\n        float current = dist(seeds[i], p);\n        if (current < distb) {\n            color = colors[i];\n            distb = current;\n        }\n    }\n    \n    return color;//*(1.0-distb*2.5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.y;\n\tfragColor = vec4(color(p),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}