{
    "Shader": {
        "info": {
            "date": "1584190986",
            "description": "poto",
            "flags": 32,
            "hasliked": 0,
            "id": "wslcz8",
            "likes": 26,
            "name": "Day 86",
            "published": 3,
            "tags": [
                "mdmtjvm"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 726
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 85\" by jeyko. https://shadertoy.com/view/WdfczH\n// 2020-03-14 09:43:07\n\n// Fork of \"Day 84\" by jeyko. https://shadertoy.com/view/Wssczn\n// 2020-03-13 10:52:05\n\n// radial blur and chromatic abberation in this buffer\n// thx iq for pallette and hg-sdf for polarMod\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5),4.)*0.7;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.)*4.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor = radial*3.; \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.6);\n    //1fragColor *= 18.;\n    fragColor = max(fragColor, 0.);\n    fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*1.1));\n    fragColor *= 1. - dot(uvn,uvn)*0.6;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define iTime (iTime + 3.6 + 5.)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 att = vec3(1);\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(float t){\n\treturn mix(texture(iChannel0,vec2(floor(t)/256.)),texture(iChannel0,vec2(floor(t) + 1.)/256.), smoothstep(0.,1.,fract(t)));\n}\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\nfloat iii;\nfloat sdRhombus(vec3 p, vec3 s){\n\t\n    \n    p = abs(p) - s;\n    \n    float d = max(p.z, max(p.x, p.y));\n    \n    \n    d = max(d, dot(p.yx + s.yx*0.5, normalize(vec2(1.))));\n    d = max(d, dot(p.yz + s.yz*0.5, normalize(vec2(1.))));\n    //d = max(d - s.x*0., -dot(p.z,p.x));\n    //d \n    \n    \n    return d;\n}\n\n// Similar to fOpUnionRound, but more lipschitz-y at acute angles\n// (and less so at 90 degrees). Useful when fudging around too much\n// by MediaMolecule, from Alex Evans' siggraph slides\nfloat fOpUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\n// The \"Round\" variant uses a quarter-circle to join the two objects smoothly:\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n// The \"Chamfer\" flavour makes a 45-degree chamfered edge (the diagonal of a square of size <r>):\nfloat fOpUnionChamfer(float a, float b, float r) {\n\treturn min(min(a, b), (a - r + b)*sqrt(0.5));\n}\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// The \"Columns\" flavour makes n-1 circular columns at a 45 degree angle:\nfloat fOpUnionColumns(float a, float b, float r, float n) {\n\tif ((a < r) && (b < r)) {\n\t\tvec2 p = vec2(a, b);\n\t\tfloat columnradius = r*sqrt(2.)/((n-1.)*2.+sqrt(2.));\n\t\tpR45(p);\n\t\tp.x -= sqrt(2.)/2.*r;\n\t\tp.x += columnradius*sqrt(2.);\n\t\tif (mod(n,2.) == 1.) {\n\t\t\tp.y += columnradius;\n\t\t}\n\t\t// At this point, we have turned 45 degrees and moved at a point on the\n\t\t// diagonal that we want to place the columns on.\n\t\t// Now, repeat the domain along this direction and place a circle.\n\t\tpMod1(p.y, columnradius*2.);\n\t\tfloat result = length(p) - columnradius;\n\t\tresult = min(result, p.x);\n\t\tresult = min(result, a);\n\t\treturn min(result, b);\n\t} else {\n\t\treturn min(a, b);\n\t}\n}\n\n\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat sdBox( vec3 p, vec3 s )\n{\n    p = abs(p) - s;\n    return max(p.x, max(p.y, p.z));\n}\n\n    #define modD vec3(1.5,2.5,0.9)\nfloat sdThangiPong(vec3 p){\n    float mmm = sin(iTime);\n\n    mmm = sign(mmm)*pow(abs(mmm), 5.);\n    \n    p.y -= iTime + iii + sin(iTime + iii);\n    p.y = pmod(p.y, modD.y);\n    \n    \n    p.xz *= rot(mmm*PI); \n    p.xz = abs(p.xz);\n    float d = sdRhombus(p , vec3(0.12));\n    \n    glow += 0.5/(0.08+ d*d*4.)*vec3(0.1,0.43,0.3)*att;\n    \n    p.y -= 0.4;\n    p.xz *= rot(0.25*PI);\n    \n    float n = fOpUnionStairs(d, sdRhombus(p - vec3(0,0.0 + 0.0,0), vec3(0.1)), 0.2,4.);\n    d = min(d, n);\n    //fOpUnionStairs\n    return d;\n}\nfloat gg;\nfloat speed = 0.5;\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n    vec3 f = p;\n    \n    vec3 n = p;\n    vec3 q = p;\n    \n    iii = pModPolar(q.xz, 3.);\n    \n    \n    vec3 u = q;\n    q.x-= 2.2;\n    \n    float dd = -q.x ;\n\n    \n    vec3 i = q;\n    \n    \n    i.y = pmod(i.y, modD.y);\n    vec3 k = i;\n    i = abs(i);\n    \n    i = abs(i) - vec3(0.1,1.,0.4);\n    float dm = max(i.z,max(i.y,i.x)) ;\n    \n    \n    \n    //glow += 0.1/(0.04 + dd*dd*150.)*vec3(1.,0.2,0.1);    \n    \n    \n    q = abs(q);\n    \n    \n    q.z -= 1.8;\n    \n    //float ddC = length(q.xz) - 0.1;\n    float ddC = max(abs(q.x),abs(q.z)) - 0.2;\n    \n    \n    dd = fOpUnionStairs(ddC, dd, 0.7,5.);\n    \n    \n    \n    q = pmod(q, modD);\n    \n    \n    u = abs(q);\n    float dW = min( min(\n        \t\t\tmax(u.z, u.y),\n        \t\t\tmax(u.x, u.y)\n                ),        \t\t\tmax(u.x, u.z)) - 0.04 ;\n    \n    \n    dd = fOpUnionStairs(dd, dW, 0.4,4.);\n    \n    \n    \n    float dF = p.y + 0.4;\n    \n\n    \n    d = dmin(d, vec2(dd, 1.));\n    \n    d = dmin(d, vec2(dm, 11.));\n    \n    d = dmin(d, vec2(ddC, 1.));\n    \n    if(d.x == dW){\n    \td.y = 6.;\n    }\n    \n    n.y -= speed*iTime;\n    \n    \n\n    \n    float ddB = length(n) - 0.2;\n    \n    \n    float mmm = pow(abs(sin(f.y*0.5 + iTime*0.5 + cos(f.z + iTime*0.25) +  + cos(f.y + iTime*0.125) )), 5.);\n    float mmb = pow(abs(sin(f.y + iTime + cos(f.z*0.4 + iTime*0.45) +  + cos(f.y + iTime*0.5) )), 2.);\n    \n    float a= 0. + mmm*0.6;\n    \n    //ddB = fOpUnionStairs(ddB,ddD,2.,0.1 );\n    \n    \n    n.xz *= rot(mmm*4.);\n    n.yz *= rot(mmb*1.);\n    \n\tvec3 j = n;\n    \n    j = pmod(j, 0.1);\n    \n    \n    j = abs(j) - 0.06;\n    float ddD = max(j.x, max(j.y, j.z));    \n    \n    n = abs(n);\n    n.yz *= rot(0.9);\n    n.xz -= 0.1 + mmb*0.1;\n    \n \tfloat dRr = sdRhombus(n , -vec3(0.04));\n \tfloat dRb = sdRhombus(n , -vec3(0,0.1,0));\n    \n    \n    //ddB = mix(ddB,dRr,mmb*0.5 );\n    ddB = fOpUnionStairs(ddB,dRr,0.2 + mmb*0.1, 5. + sin(iTime) );\n    ddB = fOpUnionStairs(ddB,dRb,0.25 + sin(iTime)*0.2, 5. );\n    \n    ddB = mix(ddB,ddD,a );\n    d = dmin(d, vec2(ddB, 10.));\n    \n    \n    k.x += 1.2;\n    \n    //k.y = abs(k.y);    \n    \n    \n    \n \tfloat dT = sdThangiPong(k);\n    \n    \n    float dPp = length(k.xz) - 0.1; // pp huehue\n    //glow += 0.1/(0.04 + dPp*dPp*10.)*vec3(1.,0.2,0.1)*att;    \n\n    \n    k.x -= 0.5;\n    k = abs(k);\n    k.z -= 0.9;\n       \n    //float dPpb = length(k.xz) - 0.1; // pp huehue\n    \n    k = abs(k);\n    float dPpb = max(k.x,k.z) - 0.06; // pp huehue\n    //glow += 0.1/(0.01 + dPpb*dPpb*14.)*vec3(0.6,0.1,0.1)*att;    \n    glow += 0.2/(0.06 + dPpb*dPpb*dPpb*44.)*vec3(0.8,0.3,0.1)*att;    \n\n    \n    \n    d = dmin(d, vec2(dT, 4.));\n    d = dmin(d, vec2(abs(dPp) + 0.01, 4.));\n    d = dmin(d, vec2(abs(dPpb) + 0.01, 4.));\n    \n    \n    \n\n\n    \n    vec3 c = vec3(1);\n\td.x *= 0.6;\n    return d;\n}\nfloat dith;\n\nfloat side;\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = map(p);\n\n    \n    if(d.x < 0.3)\n        ro += rd*0.3;\n    p = ro; t = 0.; hit = false;\n    for(int i = 0; i < 140; i++){\n    \td = map(p);\n        d.x *= dith * side;\n        \n    \t//glow += exp(-d.x*20.);\n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir ));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + right*uv.x + up*uv.y);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.0004,0);  \n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\n#define mx (2.*iMouse.x/iResolution.x)\n#define my (0.6*iMouse.y/iResolution.x)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //\n\t//uv *= 1. - dot(uv,uv)*0.2;\n    uv.xy *= rot(sin((iTime*0.7 - 3.6))*0.3);\n    uv *= 1. + dot(uv,uv)*1.5;\n    \n    \n    vec3 col = vec3(0);\n\n    dith = mix(0.76,1., texture(iChannel0, 20.*uv*256.).x);\n    vec3 ro = vec3(0);\n    \n    ro.y += iTime*speed;\n    ro.y -= 0.57 - my;\n    \n    float n = pow(valueNoise(iTime*1.).x, 2.);\n    \n    \n    ro.y += sin(n);\n    float nb = valueNoise(iTime*1./2.).x;\n    float zoom = 1.2 + n*1.;\n    n *= 1.;\n    ro.xz += vec2(sin( nb*6.14*1.5 + mx),cos( nb*6.14*1.5 + mx))*zoom;\n    \n    ro.y += 0.3;\n    \n    vec3 lookAt = vec3(0,ro.y + sin(iTime)*0.05,0.);\n    lookAt.y += -0.5 + valueNoise(iTime*1./2.).x;\n    vec3 rd = getRd(ro, lookAt, uv);\n    //rd.yz *= rot(iTime);\n    \n    vec3 p; float t = 0.; bool hit;\n    float tA; side = 1.;\n    \n    for(int i = 0; i < 2   + min(0, iFrame) ; i ++){\n    \tvec2 d = march(ro, rd, p, t, hit);\n    \tvec3 n = getNormal(p)*side;\n        \n        vec3 ld = normalize(vec3(1));\n        vec3 j = normalize(ld - n);\n        \n        float diff = max(dot(n, ld), 0.);\n        float ss = pow(max(dot(n, j), 0.), 20.);\n        float fres = pow(1. - max(dot(n, -rd), 0.), 5.);\n        \n        //col += fres*0.04*vec3(0,0.5,1);\n        //col += diff*fres*0.03*vec3(0.8,0.2,0.7);\n        \n        col += ss*0.05*vec3(1,0.1,1)*att;\n        tA = max(tA,t);\n        if (d.y == 10.){\n            /*\n        \tside *= -1.;\n            att *= vec3(0.2,0.6,1.)*0.9;\n            \n            rd = refract(rd, n,0.5);\n            ro = p - n*0.4;*/\n\t\t\t\n        \tcol += fres*0.1*vec3(0,0.5,1)*diff*att;\n            ro = p + n*0.5;\n            att *= vec3(0.2,0.7,1.)*(0.9 );\n            \n            //rd = -refract(rd, n,0.4);\n            rd = reflect(rd, n);\n        } else if (d.y == 11.){\n            /*\n        \tside *= -1.;\n            att *= vec3(0.2,0.6,1.)*0.9;\n            \n            rd = refract(rd, n,0.5);\n            ro = p - n*0.1;*/\n            \n        \tcol += fres*0.1*vec3(0,0.5,1)*diff*att;\n            ro = p + n*0.5;\n            att *= vec3(0.2,0.6,1.)*0.9;   \n            rd = reflect(rd, n + sin(p*40.)*0.01);\n        }else if (d.y == 20.){\n            /*\n        \tside *= -1.;\n            att *= vec3(0.2,0.6,1.)*0.9;\n            \n            rd = refract(rd, n,0.5);\n            ro = p - n*0.1;*/\n            \n        \tcol += fres*0.5*vec3(0.5,0.5,0.5)*glow*0.05*att;\n            //ro = p + n*0.5;\n            //att *= vec3(0.2,0.6,1.)*0.9;\n            //rd = reflect(rd, n);\n            break;\n        } else {\n            //col += fres*0.5*vec3(0.5,0.7,0.8)*0.3*att;\n            #define aa(j) clamp(map(p + n/j).x*j, 0.,1.)\n            //float aaa = aa(0.5)*aa(0.1)*aa(0.7)*20.;\n            float aaa = aa(0.9)*aa(0.6)*10.;\n            //aaa = 0.3;\n            col += fres*0.5*vec3(0.5,0.7,0.8)*1.*att*aaa;\n            //col += spec*0.5*vec3(0.5,0.7,0.4)*0.3*att;\n        \tbreak;\n        }\n    }\n        \n    col += glow*0.006;\n    \n    \n    //col = mix(col, vec3(0.4,0.4,0.7)*0.3*att, pow(smoothstep(0.,1.,tA*0.143), 1.6));\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}