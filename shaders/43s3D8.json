{
    "Shader": {
        "info": {
            "date": "1707406650",
            "description": "Oil Painting like effect using fractional brownian motion",
            "flags": 8,
            "hasliked": 0,
            "id": "43s3D8",
            "likes": 5,
            "name": "Oil Painting - Spi3lot",
            "published": 3,
            "tags": [
                "fbm",
                "painting",
                "oil"
            ],
            "usePreview": 0,
            "username": "Spi3lot",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "// Fork of \"FBM - Spi3lot\" by Spi3lot. https://shadertoy.com/view/NtGyWt\n// 2024-02-08 15:27:32\n\n#define INTENSITY 0.005\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 p = vec3(uv * 10.0, iTime * 0.25);\n    vec2 n = dfbm(p);\n    fragColor = texture(iChannel0, uv + n * (INTENSITY));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n    vec3 p = vec3(time * 25.0, 0, 0);\n    float n = fbm(p);\n    \n    return vec2(0.5 * n);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// 3 4 5 triangle (bigger angle -> x=3, y=4)\nconst mat2 m = mat2(0.6, 0.8, -0.8, 0.6);\nconst vec3 v = vec3(12.9898, 78.233, 54.516);\n\n\nfloat noise31(vec3 p)\n{\n    float s = sin(dot(p, v));\n    float n = fract(s * 43713.245);\n\n    return n * 2.0 - 1.0;\n}\n\nfloat snoise31(vec3 p)\n{\n    vec3 lv = fract(p);\n    vec3 id = floor(p);\n    \n    lv = lv*lv*(3.0-2.0*lv);\n    vec2 offset = vec2(1, 0);\n    \n    float bl0 = noise31(id + offset.yyy);\n    float br0 = noise31(id + offset.xyy);\n    float tl0 = noise31(id + offset.yxy);\n    float tr0 = noise31(id + offset.xxy);\n    float bl1 = noise31(id + offset.yyx);\n    float br1 = noise31(id + offset.xyx);\n    float tl1 = noise31(id + offset.yxx);\n    float tr1 = noise31(id + offset.xxx);\n    \n    float b0 = mix(bl0, br0, lv.x);\n    float t0 = mix(tl0, tr0, lv.x);\n    float b1 = mix(bl1, br1, lv.x);\n    float t1 = mix(tl1, tr1, lv.x);\n    \n    float b = mix(b0, b1, lv.z);\n    float t = mix(t0, t1, lv.z);\n\n    return mix(b, t, lv.y);\n}\n\nfloat fbm(vec3 p)\n{\n    float fbm = 0.0;\n    float factor = 0.0;\n\n    for (int i = 0; i < 6; i++)\n    {\n        //float a = exp2(-float(i + 1));\n        float a = intBitsToFloat((126 - i) << 23);  // 127 - (i + 1) = 126 - i\n        fbm += snoise31(p / a) * a;\n        factor += a;\n        p.xy = m * p.xy;\n    }\n\n    return fbm / factor;\n}\n\nfloat sdFbm(vec3 p, float z)\n{\n    return p.z - fbm(vec3(p.xy, z));\n}\n\nvec3 gfbm(vec3 p, float z)\n{\n    vec2 e = vec2(0.001, 0);\n    return normalize(sdFbm(p, z) - vec3(sdFbm(p - e.xyy, z),\n                                        sdFbm(p - e.yxy, z),\n                                        sdFbm(p - e.yyx, z))\n    );\n}\n\nvec2 dfbm(vec3 p)\n{\n    vec2 e = vec2(0.001, 0);\n    return normalize(fbm(p) - vec2(fbm(p - e.xyy),\n                                   fbm(p - e.yxy))\n    );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}