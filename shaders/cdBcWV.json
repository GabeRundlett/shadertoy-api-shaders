{
    "Shader": {
        "info": {
            "date": "1688417092",
            "description": "Cool! 2\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cdBcWV",
            "likes": 6,
            "name": "octo-fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "bronson113",
            "viewed": 1386
        },
        "renderpass": [
            {
                "code": "//https://iquilezles.org/articles/distfunctions2d/\nfloat sdStar( in vec2 p, in float r, in int n, in float m)\n{\n    // next 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;  // m is between 2 and n\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) for regular polygon\n\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n//http://dev.thi.ng/gradients/\n//[[1.028 0.078 0.858] [3.138 1.388 -0.442] [-0.993 1.853 1.288] [-0.885 2.115 5.774]]\n//https://iquilezles.org/articles/palettes/\n// cosine based palette, 4 vec3 params\nvec3 palette( float t ) {\n    vec3 a = vec3(1.028, 0.078, 0.858);\n    vec3 b = vec3(3.138, 1.388, -0.442);\n    vec3 c = vec3(-0.993, 1.853, 1.288);\n    vec3 d = vec3(-0.885, 2.115, 5.774);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coord without streching\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    fragColor = vec4(0,0,0,0);\n    for(float k=1.0; k<3.1; k+=1.0){\n        vec2 uv0 = fract(uv*k-0.5) - 0.5;\n        float l = length(uv);\n        \n        float d = sdStar(uv0, k*0.6, 10,  k*2.0);\n\n        d = abs(sin(d*8.0-iTime/6.0));\n\n        d = (0.05/k) / d;\n        \n        // Time varying pixel color\n        vec3 col = palette(l-iTime/1.8+length(uv0))*d;\n\n        // Output to screen\n        fragColor += vec4(col, 1.0);\n    }\n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}