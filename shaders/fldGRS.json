{
    "Shader": {
        "info": {
            "date": "1636315472",
            "description": "First attempt at locating feature points, no actual extraction though. Eventually, I want to be able to track rotation to get accelerometer-like information.",
            "flags": 34,
            "hasliked": 0,
            "id": "fldGRS",
            "likes": 34,
            "name": "Image Tracking I",
            "published": 3,
            "tags": [
                "gradient",
                "image",
                "iterative",
                "tracking",
                "newton",
                "hessian",
                "extrema"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 1371
        },
        "renderpass": [
            {
                "code": "#define video(x, y) texture(iChannel0, vec2(x, y)).r\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 1.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // 2D Newton-Raphson optimization on gaussian blurred video\n    // Each step fits a paraboloid to the image function around\n    // p then steps to the extremum of that paraboloid\n    vec2 p = fragCoord / iResolution.xy;//vec2(0.5);\n    vec2 h = 1.0 / iResolution.xy;\n    for (int i=0; i < 10; i++) {\n        float up = video(p.x, p.y + h.y);\n        float right = video(p.x + h.x, p.y);\n        vec2 grad = vec2(right, up) - video(p.x, p.y);\n\n        float dxx = (video(p.x + 2.0 * h.x, p.y) - right - grad.x) / (h.x * h.x);\n        float dxy = (video(p.x + h.x, p.y + h.y) - right - grad.y) / (h.x * h.y);\n        float dyy = (video(p.x, p.y + 2.0 * h.y) - up    - grad.y) / (h.y * h.y);\n\n        grad /= h;\n        mat2 hessian = mat2(dxx, dxy, dxy, dyy);\n\n        p -= inverse(hessian) * grad;\n    }\n\n    color = texture(iChannel0, fragCoord / iResolution.xy).rrr;\n\n    p -= 0.5;\n    p.x *= iResolution.x / iResolution.y;\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, length(uv - p) - 0.01));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define WIN_W 40.0\n#define WIN_H 40.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    float total = 0.0;\n    for (float x=-WIN_W; x < WIN_W; x++) {\n        float weight = 0.1 * exp(-0.005 * x * x);\n        fragColor += vec4(texture(iChannel0, (fragCoord + vec2(x, 0.0)) / iResolution.xy).rgb * weight, weight);\n    }\n\n    fragColor.rgb /= fragColor.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define WIN_W 40.0\n#define WIN_H 40.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    float total = 0.0;\n    for (float y=-WIN_H; y < WIN_H; y++) {\n        float weight = 0.1 * exp(-0.005 * y * y);\n        fragColor += vec4(texture(iChannel0, (fragCoord + vec2(0.0, y)) / iResolution.xy).rgb * weight, weight);\n    }\n\n    fragColor.rgb /= fragColor.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}