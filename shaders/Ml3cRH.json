{
    "Shader": {
        "info": {
            "date": "1531800847",
            "description": "learn terrain render~\nreference:\nartical https://iquilezles.org/articles/terrainmarching/terrainmarching.htm;\nnoise: https://www.shadertoy.com/view/4sfGzS",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml3cRH",
            "likes": 1,
            "name": "Bad terrain render",
            "published": 3,
            "tags": [
                "terrainraymatchingvaluenoise"
            ],
            "usePreview": 0,
            "username": "WingStone",
            "viewed": 530
        },
        "renderpass": [
            {
                "code": "#define EPS 0.001\n#define lightCol vec3(1.0,1.0,1.0)\nvec3 lightDir = normalize(vec3(1.0, 0.3, 0.0));\n\n//value noise\n//reference: https://www.shadertoy.com/view/4sfGzS\nfloat Noise(vec3 pos)\n{\n    pos *=2.0;\n    vec3 p = floor(pos);\n    vec3 f = fract(pos);\n    vec2 uv = p.xy + vec2(37.0, 17.0)*p.z + f.xy;\n    \n    vec2 rg = texture(iChannel0, (uv+0.5)/256.0).yx;\n    return mix(rg.x, rg.y, f.z)*2.0-1.0;\n}\n\nfloat FractalNoise(vec3 pos)\n{\n    return Noise(pos)+Noise(pos*2.0)*0.5+Noise(pos*4.0)*0.25+Noise(pos*8.0)*0.125;\n}\n\nfloat HightFunction(vec3 pos)\n{\n    float hight = Noise(pos*0.05)*5.5;\n    float dthight = Noise(pos*0.4)*0.5;\n    hight += mix(0.0, dthight, clamp(hight+0.1, 0.1, 1.0));\n    dthight = Noise(pos*10.0)*0.01;\n    hight += mix(0.0, dthight, clamp(hight-1.5, 0.5, 1.0));\n\n    return hight;\n}\n\nvec3 GetNormal(vec3 pos)\n{\n    vec3 dx = vec3(EPS, HightFunction(pos+vec3(EPS, 0.0, 0.0))-HightFunction(pos), 0.0);\n    vec3 dz = vec3(0, HightFunction(pos+vec3(0.0, 0.0, EPS))-HightFunction(pos), EPS);\n    return normalize(cross(dz, dx));\n}\n\nfloat RayMatching(vec3 rayOri, vec3 rayDir)\n{\n\tfloat nearDist = 0.1f;\n    float farDist = 80.0f;\n    float stp = 0.05f;\n    \n    float d = nearDist;\n    float lastHeight;\n    float lastPosy;\n    while(d < farDist)\n    {\n        vec3 pos = rayOri + rayDir*d;\n        float hight = HightFunction(pos);    \n        if(hight > pos.y)\n        {\n            //intersection\n            float delt = hight - pos.y;\n            return d - stp*delt/(lastPosy -lastHeight + delt);\n        }\n        lastHeight = hight;\n        lastPosy = pos.y;\n        stp += 0.01;\n        d += stp;\n    }\n\n    return -1.0;\n}\n\nvec3 CalculateCol(vec3 pos, vec3 nor)\n{\n    vec3 mtrlCol = mix(vec3(0.3,0.6,0.1), vec3(0.7,0.7,0.6), pos.y/1.5+1.0);\n    \n    //snow color\n    float noise = FractalNoise(pos*0.7)+0.5;\n    mtrlCol += step(0.0, noise)*step(0.5, pos.y+noise*1.0)*vec3(1.0,1.0,1.0);\n    vec3 col = clamp(dot(lightDir, nor), 0.1, 1.0) * lightCol*mtrlCol;\n\n    //calculate shadow\n    float shadow = 1.2;\n    float stp = 0.01;\n    for(float d = 0.05; d < 20.0;)\n    {\n        vec3 dpos = pos + lightDir*d;\n        float hight = HightFunction(dpos);\n        if(hight > dpos.y)\n        {\n            shadow = 0.1;\n            break;\n        }\n        stp += 0.01;\n        d+= stp;\n    }\n    return col*shadow;\n}\n\nvec3 GetSkyCol(vec3 dir)\n{\n    float factor = dot(dir, lightDir);\n    return mix(vec3(0.5,0.6,1.0), lightCol, clamp(0.0, 1.0, pow(factor,7.0)) + smoothstep(0.985,1.0, factor));\n}\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy)/iResolution.y;\n    vec3 camera = vec3(-4.5 + 0.5*sin(iTime*0.1),8.0, 1.5);\n    vec3 target = vec3(0.0, 6.0, 0.0);\n    \n    vec3 front = normalize(target - camera);\n    vec3 right = cross(vec3(0.0, 1.0, 0.0), front);\n    vec3 up = cross(front,right);\n    vec3 rayDir = normalize(front*1.732 + uv.x*right + uv.y*up);\n\n    float dist = RayMatching(camera, rayDir);\n    \n    vec3 pos = camera + rayDir*dist;\n    vec3 nor = GetNormal(pos);\n    \n    vec3 col;\n    if(dist < 0.0)\n    {\n        col = GetSkyCol(rayDir);\n    }\n    else\n    {\n    \tcol = CalculateCol(pos, nor);\n        //fog color\n        col = mix(col, vec3(0.7,0.7,0.7), dist/300.0 + (5.0 - pos.y)/60.0);\n    }\n    \n    col = pow(col, vec3(1.0f/2.2f));\n    \n    //vignette\n    col *= clamp(0.0, 1.0, 2.0 - length(2.0*abs(fragCoord.xy / iResolution.xy - 0.5)));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}