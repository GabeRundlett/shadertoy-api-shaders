{
    "Shader": {
        "info": {
            "date": "1698847640",
            "description": "https://www.shadertoy.com/view/tlVGDt",
            "flags": 0,
            "hasliked": 0,
            "id": "csVfDt",
            "likes": 8,
            "name": "Octagramatron",
            "published": 3,
            "tags": [
                "parallax",
                "octagram"
            ],
            "usePreview": 0,
            "username": "ElSolem",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\nfloat gTime = 0.0;\nconst float REPEAT = 5.0;\n\n// 回転行列\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat box(vec3 pos, float scale) {\n    pos *= scale;\n    float base = sdBox(pos, vec3(0.4, 0.4, 0.1)) / 1.5;\n    pos.xy *= 5.0;\n    pos.y -= 3.5;\n    pos.xy *= rot(0.75);\n    float result = -base;\n    return result;\n}\n\nfloat box_set(vec3 pos, float iTime) {\n    vec3 pos_origin = pos;\n    pos = pos_origin;\n    pos.y += sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box1 = box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5);\n    pos = pos_origin;\n    pos.y -= sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box2 = box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5);\n    pos = pos_origin;\n    pos.x += sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box3 = box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5);\n    pos = pos_origin;\n    pos.x -= sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(0.8);\n    float box4 = box(pos, 2.0 - abs(sin(gTime * 0.4)) * 1.5);\n    pos = pos_origin;\n    pos.xy *= rot(0.8);\n    float box5 = box(pos, 0.5) * 6.0;\n    pos = pos_origin;\n    float box6 = box(pos, 0.5) * 6.0;\n    float result = max(max(max(max(max(box1, box2), box3), box4), box5), box6);\n    return result;\n}\n\nfloat map(vec3 pos, float iTime) {\n    vec3 pos_origin = pos;\n    float box_set1 = box_set(pos, iTime);\n    return box_set1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n    float xy = p.x / p.y;\n    float threshold = 2.0;\n\n    if (abs(xy) < abs(threshold)) {\n        vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n        vec3 ro = vec3(0.0, -0.2, iTime * 4.0);\n        vec3 ray = normalize(vec3(p, 1.5));\n        ray.xy = ray.xy * rot(sin(iTime * 0.03) * 5.0);\n        ray.yz = ray.yz * rot(sin(iTime * 0.05) * 0.2);\n        float t = 0.1;\n        vec3 col = vec3(0.0);\n        float ac = 0.0;\n\n        for (int i = 0; i < 99; i++) {\n            vec3 pos = ro + ray * t;\n            pos = mod(pos - 2.0, 4.0) - 2.0;\n            gTime = iTime - float(i) * 0.01;\n\n            float d = map(pos, iTime);\n            d = max(abs(d), 0.01);\n            ac += exp(-d * 23.0);\n            t += d * 0.55;\n        }\n\n        col = vec3(ac * 0.02);\n        col += vec3(0.0, 0.2 * abs(sin(iTime)), 0.5 + sin(iTime) * 0.2);\n        fragColor = vec4(col, 1.0 - t * (0.02 + 0.02 * sin(iTime)));\n    } else {\n        vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n        vec3 ro = vec3(0.0, -0.2, iTime * 4.0);\n        vec3 ray = normalize(vec3(p, 1.5));\n        ray.xy = ray.xy * rot(sin(iTime * 0.03) * 5.0);\n        ray.yz = ray.yz * rot(sin(iTime * 0.05) * 0.2);\n        float t = 0.1;\n        vec3 col = vec3(0.0);\n        float ac = 0.0;\n\n        for (int i = 0; i < 99; i++) {\n            vec3 pos = ro + ray * t;\n            pos = mod(pos - 2.0, 4.0) - 2.0;\n            gTime = iTime - float(i) * 0.01;\n\n            float d = map(pos, iTime);\n            d = max(abs(d), 0.01);\n            ac += exp(-d * 23.0);\n            t += d * 0.55;\n        }\n\n        col = vec3(ac * 0.02);\n        col += vec3(0.0, 0.2 * abs(sin(iTime)), 0.5 + sin(iTime) * 0.2);\n        fragColor = vec4(col, 1.0 - t * (0.02 + 0.02 * sin(iTime)));\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}