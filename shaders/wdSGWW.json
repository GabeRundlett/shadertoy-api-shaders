{
    "Shader": {
        "info": {
            "date": "1548838026",
            "description": "Two famous characters locked in eternal conflict",
            "flags": 0,
            "hasliked": 0,
            "id": "wdSGWW",
            "likes": 9,
            "name": "Snoopy and the Red Baron",
            "published": 3,
            "tags": [
                "plane",
                "flight",
                "peanuts",
                "aerobatics"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "// \"Snoopy and the Red Baron\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrConeDf (vec3 p, vec3 b);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nmat3 AxToRMat (vec3 vz, vec3 vy);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_SEG 12\n\nmat3 flyerMat[2], flMat;\nvec3 flyerPos[2], flPos, qHit, qHitTransObj, sunDir, trkA, trkF, cPt[N_SEG],\n   cPtOrg, cUpCirc, cDnCirc, oDir, oNorm;\nfloat tCur, dstFar, flyVel, tLen[N_SEG], hTop, rLoop, sHzRamp, rCirc, sDnRamp, sUpRamp,\n   sHzStr, pathDir, vfLoop, ptFac;\nint idObj, idObjGrp;\nconst int idFus = 1, idPipe = 2, idWing = 3, idStrut = 4, idHstab = 5,\n   idFin = 6, idLeg = 7, idAxl = 8, idWhl = 9, idNose = 10, idCan = 11, idPlt = 12;\nconst float pi = 3.14159;\n\nfloat GrndHt (vec2 p)\n{\n  mat2 qRot;\n  vec2 q;\n  float h, wAmp;\n  qRot = 1.9 * mat2 (0.8, -0.6, 0.6, 0.8);\n  q = 0.04 * p;\n  h = 0.;\n  wAmp = 1.;\n  for (int j = 0; j < 4; j ++) {\n    h += wAmp * Noisefv2 (q);\n    wAmp *= 0.45;\n    q *= qRot;\n  }\n  return 5. * h;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  const vec2 e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy), GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  vec2 ws;\n  float d, wr, h;\n  int ig;\n  ig = idObjGrp / 256;\n  q = p;\n  wr = -0.2 + q.z;\n  d = PrRoundBoxDf (q, vec3 (0.07 * (1. - 0.8 * wr * wr),\n     0.11 * (1. - 0.6 * wr * wr), 1.), 0.05);\n  d = max (d, - PrRoundBoxDf (q - vec3 (0., 0.16, 0.), vec3 (0.04, 0.03, 0.07), 0.04)); \n  DMINQ (idObjGrp + idFus);\n  q = p;  q -= vec3 (0., 0.17, 0.5);\n  d = PrCylDf (q, 0.015, 0.15);\n  DMINQ (idObjGrp + idCan);\n  q = p;  q.y -= 0.17;\n  d = PrSphDf (q, 0.04); \n  DMINQ (idObjGrp + idPlt);\n  q = p - vec3 (0., 0.03, 0.8);  q.x = abs (q.x) - 0.1;\n  d = PrCapsDf (q, 0.02, 0.15);\n  DMINQ (idObjGrp + idPipe);\n  q = p - vec3 (0., 0.03, 1.1);\n  d = PrConeDf (q, vec3 (0.8, 0.6, 0.06));\n  DMINQ (idObjGrp + idNose);\n  q = p - vec3 (0., ((ig == 1) ? 0.12 : 0.09), 0.4);\n  qq = q;\n  if (ig == 1) qq.y += 0.12;\n  h = (ig == 1) ? 0.24 : 0.42;\n  qq.y = mod (qq.y, h) - 0.5 * h;\n  wr = q.z / 0.24;\n  d = PrRoundBoxDf (qq, vec3 (1.2, 0.01 * (1. - wr * wr), 0.24), 0.005);\n  d = max (d, abs (q.y) - 0.26);\n  DMINQ (idObjGrp + idWing);\n  h = (ig == 1) ? 0.12 : 0.09;\n  q = p - vec3 (0., h, 0.42);  q.xz = abs (q.xz) - vec2 (0.5, 0.1);\n  h = (ig == 1) ? 0.24 : 0.21;\n  d = PrCylDf (q.xzy, 0.01, h);\n  DMINQ (idObjGrp + idStrut);\n  h = (ig == 1) ? 0.24 : 0.15;\n  q = p - vec3 (0., h, 0.42);  q.x = abs (q.x) - 0.1;\n  h = (ig == 1) ? 0.12 : 0.15;\n  d = PrCylDf (q.xzy, 0.01, h);\n  DMINQ (idObjGrp + idStrut);\n  q = p;  q.z -= -0.9;\n  wr = q.z / 0.15;\n  d = PrRoundBoxDf (q, vec3 (0.42, 0.005 * (1. - wr * wr), 0.15), 0.002);\n  q.x = abs (q.x);\n  d = max (d, 0.02 - 1.5 * q.x - q.z);\n  DMINQ (idObjGrp + idHstab);\n  q = p;  q.z -= -0.87;\n  q.yz = Rot2D (q.yz, 0.15);\n  ws = q.yz / vec2 (0.37, 0.15);\n  ws *= ws;\n  d = PrRoundBoxDf (q, vec3 (0.005 * (1. - ws.y), 0.37, 0.15 * (1. - 0.3 * ws.x)), 0.002);\n  d = max (d, - q.y);\n  DMINQ (idObjGrp + idFin);\n  q = p - vec3 (0., -0.24, 0.7);  q.x = abs (q.x) - 0.135;\n  q.xy = Rot2D (q.xy, -0.55);\n  q.yz = Rot2D (q.yz, 0.15);\n  d = PrCylDf (q.xzy, 0.013, 0.13);\n  DMINQ (idObjGrp + idLeg);\n  q = p - vec3 (0., -0.34, 0.715);  q.x = abs (q.x) - 0.22;\n  d = PrCylDf (q.yzx, 0.01, 0.035);\n  DMINQ (idObjGrp + idAxl);\n  q.x -= 0.01;\n  d = PrCylDf (q.yzx, 0.1, 0.015);\n  DMINQ (idObjGrp + idWhl);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  for (int j = 0; j < 2; j ++) {\n    idObjGrp = (j + 1) * 256;\n    dMin = FlyerDf (flyerMat[j] * (p - flyerPos[j]), dMin);\n  }\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat PropelDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p - vec3 (0., 0.02, 1.07);\n  d = PrCylDf (q, 0.3, 0.007);\n  if (d < dMin) { dMin = d;  qHitTransObj = q; }\n  return dMin;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  for (int j = 0; j < 2; j ++) {\n    dMin = PropelDf (flyerMat[j] * (p - flyerPos[j]), dMin);\n  }\n  return dMin;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 50; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec4 FlyerCol (int ig, int id, vec3 vn)\n{\n  vec3 col, bCol;\n  vec2 w;\n  float spec, s;\n  spec = 0.2;\n  bCol = vec3 (0.7, 0.4, 0.2);\n  col = (ig == 2) ? vec3 (0.1, 0.9, 0.) : vec3 (1., 0., 0.);\n  if (id == idFus) {\n    if (ig == 2) col = mix (col, bCol, step (mod (4. * qHit.z, 1.), 0.5));\n    if (qHit.z > 1.01) {\n      col = vec3 (0.9);\n      spec = 0.4;\n      if (length (abs (qHit.xy + vec2 (0., 0.05)) * vec2 (0.6, 1.)) < 0.03) col *= 1. -\n         0.7 * SmoothBump (0.2, 0.8, 0.05, mod (64. * ((ig == 1) ? qHit.y : qHit.x), 1.));\n    }\n    w = abs (qHit.xz) - vec2 (0.09, 0.12);\n    if (abs (qHit.y - 0.1) < 0.04 && max (w.x, w.y) < 0.) col = vec3 (0.2, 0.15, 0.05);\n    qHit.z += 0.3;\n    if (ig == 2) col = mix (vec3 (0.9), col,\n       (1. - SmoothBump (0.05, 0.08, 0.005, length (qHit.yz))) *\n       (1. - SmoothBump (-0.01, 0.03, 0.005, length (qHit.yz))));\n    else col = mix (vec3 (0.2), col,\n       (1. - SmoothBump (0.02, 0.04, 0.01, length (abs (qHit.yz) - 0.04))));\n  } else if (id == idWing) {\n    if (ig == 2) col = mix (col, bCol, step (mod (4. * abs (qHit.x) + 0.25, 1.), 0.5));\n    s = 1.2 / 8.;\n    s = mod (qHit.x + 0.5 * s, s) - 0.5 * s;\n    col *= 1. + 0.1 * SmoothBump (-0.01, 0.01, 0.002, s);\n    if (abs (qHit.y) > 0.1) {\n      if (abs (qHit.x) > 0.7)\n         col *= 1. - 0.6 * SmoothBump (-0.158, -0.147, 0.002, qHit.z);\n      if (qHit.z < -0.155)\n         col *= 1. - 0.6 * SmoothBump (0.695, 0.705, 0.002, abs (qHit.x));\n      if (qHit.y * vn.y > 0.) {\n        qHit.x = abs (qHit.x) - 0.8;\n        qHit.z -= 0.03;\n        if (ig == 2) col = mix (vec3 (0.9), col,\n           (1. - SmoothBump (0.08, 0.12, 0.01, length (qHit.xz))) *\n           (1. - SmoothBump (-0.01, 0.03, 0.01, length (qHit.xz))));\n        else col = mix (vec3 (0.2), col,\n           (1. - SmoothBump (0.03, 0.06, 0.01, length (abs (qHit.xz) - 0.06))));\n      }\n    }\n  } else if (id == idHstab) {\n    if (ig == 2) col = mix (col, bCol, step (mod (4. * abs (qHit.x) + 0.25, 1.), 0.5));\n    col *= 1. - 0.6 * SmoothBump (-0.062, -0.052, 0.002, qHit.z);\n  } else if (id == idFin) {\n    if (ig == 2) col = mix (col, bCol, step (mod (4. * qHit.y, 1.), 0.5));\n    col *= 1. - 0.6 * SmoothBump (-0.062, -0.052, 0.002, qHit.z);\n  } else if (id == idNose) {\n    if (qHit.z > -0.04) {\n      col = mix (col, vec3 (1.), 0.5);\n      spec = 0.4;\n    } else col = vec3 (0.1);\n  } else if (id == idPipe) {\n    col = vec3 (0.8, 0.8, 0.85) * (0.5 + 0.5 * SmoothBump (0.1, 0.9, 0.05, mod (16. * qHit.z, 1.)));\n    spec = 0.4;\n  } else if (id == idStrut || id == idLeg) {\n    col = 0.6 * col + vec3 (0.4);\n  } else if (id == idAxl) {\n    col = vec3 (0.3, 0.2, 0.);\n  } else if (id == idCan) {\n    col = vec3 (0.2, 0.2, 0.22);\n  } else if (id == idPlt) {\n    col = vec3 (0.4, 0.2, 0.1);\n    spec = 0.;\n    if (qHit.z > 0.02 && qHit.y < 0.03) col = (ig == 2) ? vec3 (0.9) : vec3 (0.6, 0.4, 0.4);\n    if (qHit.z > 0. && length (vec2 (abs (qHit.x) - 0.011, qHit.y - 0.015)) < 0.01) {\n      col = vec3 (0., 0.2, 0.);\n      spec = 0.4;\n    }\n    if (qHit.z > 0. && ig == 2 && length (qHit.xy - vec2 (0., -0.02)) < 0.012) col = vec3 (0.1);\n  } else if (id == idWhl) {\n    if (length (qHit.yz) < 0.07) col = vec3 (0.4, 0.4, 0.4);\n    else {\n      col = vec3 (0.02);\n      spec = 0.;\n    }\n  }\n  return vec4 (col, spec);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = mix (vec3 (0.4, 0.5, 0.7), vec3 (0.3, 0.41, 0.55), smoothstep (-0.02, 0.01, rd.y));\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) * min (0.3 * pow (sd, 64.) +\n       0.5 * pow (sd, 2048.), 1.);\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.8, 0.8, 0.7), skCol, 0.3 + 0.7 * fd), clCol, 0.1 + 0.9 * f * fd);\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col, roo;\n  float dstObj, dstGrnd, dstPropel, sh, f, s;\n  int ig, id;\n  dstObj = ObjRay (ro, rd);\n  dstPropel = TransObjRay (ro, rd);\n  if (dstObj < dstPropel) dstPropel = dstFar;\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    ig = idObj / 256;\n    id = idObj - 256 * ig;\n    col4 = FlyerCol (ig, id, ((ig == 1) ? flyerMat[0] : flyerMat[1]) * vn);\n    if (id == idWing || id == idHstab) vn = VaryNf (128. * ro, vn, 0.1);\n    sh = ObjSShadow (ro, sunDir);\n    col = col4.rgb * (0.2 + 0.2 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n       0.6 * sh * max (dot (vn, sunDir), 0.)) +\n       sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n  } else if (rd.y < 0.) {\n    roo = ro;\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    vn = GrndNf (ro);\n    f = 1. - clamp (0.5 * pow (vn.y, 4.) + Fbm2 (0.5 * ro.xz) - 0.5, 0., 1.);\n    s = 1. - smoothstep (0.2, 0.6, dstGrnd / dstFar);\n    vn = VaryNf (4. * ro, vn, 4. * f * f * s);\n    col = mix (vec3 (0.35, 0.5, 0.2), vec3 (0.3, 0.4, 0.1),\n       smoothstep (0.2, 0.8, Fbm2 (0.3 * ro.xz)));\n    col = mix (vec3 (0.33, 0.45, 0.15), col, s);\n    col = col * (0.1 + 0.2 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n       0.1 * max (vn.y, 0.) + 0.8 * max (dot (vn, sunDir), 0.));\n    col = mix (col, SkyBgCol (roo, rd), pow (1. + rd.y, 32.));\n  } else col = SkyBgCol (ro, rd);\n  if (dstPropel < dstFar) col = vec3 (0.1) * (1. - 0.3 * SmoothBump (0.25, 0.27,\n     0.006, length (qHitTransObj.xy))) + 0.7 * col;\n  return clamp (col, 0., 1.);\n}\n\nvoid PathSetup ()\n{\n  ptFac = 20.;\n  cPtOrg = vec3 (2. * pathDir, 0., -3.);\n  hTop = 1.5;\n  rLoop = 2.2;\n  sHzRamp = 1.;\n  rCirc = 2.;\n  sDnRamp = 1.5;\n  sUpRamp = 1.3 * sDnRamp;\n  sHzStr = sDnRamp - sUpRamp + 3. * sHzRamp;\n  vfLoop = 0.3;\n  cDnCirc = cPtOrg + vec3 (- rCirc * pathDir, 0., -2. * sHzRamp);\n  cUpCirc = cPtOrg + vec3 (- rCirc * pathDir, 2. * hTop, 2. * sDnRamp + 6. * sHzRamp);\n  cPt[0] = cDnCirc;   cPt[0].xz += vec2 (- rCirc * pathDir, sHzStr);\n  cPt[1] = cPt[0];    cPt[1].z += sHzStr;\n  cPt[3] = cUpCirc;   cPt[3].x -= rCirc * pathDir;\n  cPt[4] = cUpCirc;   cPt[4].x += rCirc * pathDir;\n  cPt[2] = cPt[3];    cPt[2].z -= 2. * sHzRamp;\n  cPt[5] = cPt[4];    cPt[5].z -= 2. * sHzRamp;\n  cPt[7] = cPtOrg;\n  cPt[8] = cPtOrg;\n  cPt[6] = cPt[7];    cPt[6].z += 4. * sHzRamp;\n  cPt[9] = cDnCirc;   cPt[9].x += rCirc * pathDir;\n  cPt[10] = cDnCirc;  cPt[10].x -= rCirc * pathDir;\n  cPt[11] = cPt[0];\n  tLen[0] = 0.;\n  for (int k = 1; k < N_SEG; k ++) tLen[k] = length (cPt[k] - cPt[k - 1]);\n  tLen[4] = pi * rCirc;\n  tLen[8] = 2. * pi * rLoop * (1. + vfLoop);\n  tLen[10] = pi * rCirc;\n  for (int k = 1; k < N_SEG; k ++) tLen[k] += tLen[k - 1];\n}\n\nvoid FlyerPM1 (float t)\n{\n  vec3 vel, va, flVd;\n  vec2 cs;\n  float oRl;\n  flPos = vec3 (dot (trkA, sin (trkF * t)), 10. + 3. * SmoothBump (0.25, 0.75, 0.2, mod (0.001 * t, 1.)), t);\n  vel = vec3 (dot (trkF * trkA, cos (trkF * t)), 0., 1.);\n  va = cross (vec3 (dot (trkF * trkF * trkA, - sin (trkF * t)), 0., 0.), vel) / length (vel);\n  flVd = normalize (vel);\n  oRl = 20. * length (va) * sign (va.y) + 0.4 * (Fbm1 (0.02 * t) - 0.5);\n  cs = sin (oRl + vec2 (0.5 * pi, 0.));\n  flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) *\n     mat3 (flVd.z, 0., flVd.x, 0., 1., 0., - flVd.x, 0., flVd.z);\n}\n\nvoid FlyerPM2 (float t, float vu)\n{\n  vec3 p, p1, p2, u;\n  vec2 cs;\n  float w, ft, ftt, s, h, oRl;\n  int ik;\n  h = 2. * sin (0.43 * pi * t) + sin (0.79 * pi * t);\n  oRl = 0.01 * pi * h;\n  t = mod (t, tLen[N_SEG - 1]);\n  for (int k = 1; k < N_SEG; k ++) {\n    if (t < tLen[k]) {\n      t -= tLen[k - 1];\n      p1 = cPt[k - 1];\n      p2 = cPt[k];\n      w = tLen[k] - tLen[k - 1];\n      ik = k;\n      break;\n    }\n  }\n  oNorm = vec3 (0., 1., 0.);\n  ftt = t / w;\n  ft = ftt;\n  if (ik == 4 || ik == 10) oRl += -0.25 * pi * SmoothBump (0.05, 0.95, 0.05, ft);\n  if (ik == 4) oRl += 2. * pi * smoothstep (0.4, 0.6, ft);\n  if (ik == 2 || ik == 6) {\n    oDir = p2 - p1;\n    p.xz = p1.xz + oDir.xz * ft * vec2 (pathDir, 1.);\n    p.y = p1.y + oDir.y * smoothstep (0., 1., ft);\n    oDir.y *= 6. * ft * (1. - ft);\n    oDir = normalize (oDir);\n  } else if (ik == 4) {\n    ft *= pi;\n    p = cUpCirc;\n    u = vec3 (- cos (ft) * pathDir, 0., sin (ft));\n    p.xz += rCirc * u.xz;\n    oDir = cross (oNorm, u);\n    oDir.xz *= pathDir;\n  } else if (ik == 8) {\n    ft = (ft < 0.5) ? ft * (1. + vfLoop * (1. - 2. * ft)) :\n       ft * (1. + 2. * vfLoop * (ft - 1.5)) + vfLoop;\n    p = 0.5 * (cPt[7] + cPt[8]);\n    ft *= 2. * pi;\n    u = vec3 (0., cos (ft), sin (ft));\n    p.yz += rLoop * (vec2 (1., 0.) - u.yz);\n    oNorm = u;\n    oDir = normalize (vec3 (0., 2. * pi * rLoop * vec2 (sin (ft), - cos (ft))));\n  } else if (ik == 10) {\n    ft *= pi;\n    p = cDnCirc;\n    u = vec3 (cos (ft) * pathDir, 0., - sin (ft));\n    p.xz += rCirc * u.xz;\n    oDir = cross (oNorm, u);\n    oDir.xz *= pathDir;\n  } else {\n    oDir = p2 - p1;\n    p = p1 + oDir * ft;\n    oDir = normalize (oDir);\n  }\n  p *= ptFac;\n  p.y += 2. + 0.1 * h;\n  p.y += 8.;\n  flPos = p;\n  if (vu > 0.) {\n    oDir *= -1.;\n    oRl *= -1.;\n  }\n  oRl += 0.2 * (Fbm1 (t) - 0.5) * SmoothBump (0.1, 0.9, 0.1, ftt);\n  cs = sin (oRl * pathDir + vec2 (0.5 * pi, 0.));\n  flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) * AxToRMat (oDir, oNorm);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvv, uvs, ori, ca, sa;\n  float az, el, s, t, sr;\n  int tpTrk;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  tCur = mod (tCur, 3600.) + floor (dateCur.w / 3600.);\n  tpTrk = 1;\n  t = 0.01 * tCur;\n  if (length (uvs) < 1.5 * SmoothBump (0.2, 0.9, 0.01, mod (t, 1.))) tpTrk = 2;\n  if (tpTrk == 1) {\n    flyVel = 20.;\n    trkA = 8. * vec3 (1.9, 2.9, 4.3);\n    trkF = 0.15 * vec3 (0.23, 0.17, 0.13);\n    s = mod (0.022 * tCur, 1.);\n  } else if (tpTrk == 2) {\n    tCur = 100. * mod (t, 1.) + 10.;\n    flyVel = 0.8;\n    pathDir = (mod (t, 2.) > 1.) ? 1. : -1.;\n    PathSetup ();\n  }\n  for (int j = 0; j < 3; j ++) {\n    t = tCur * flyVel;\n    if (tpTrk == 1) {\n      if (j < 2) t += (j == 0) ? 4.5 : 10.5;\n      else t += 1.5 + 12. * SmoothBump (0.25, 0.75, 0.15, s);\n    } else if (tpTrk == 2) {\n      if (j < 2) t += ((j == 0) ? 0.3 : 0.8);\n    }\n    if (tpTrk == 1) {\n      FlyerPM1 (t);\n    } else if (tpTrk == 2) {\n      FlyerPM2 (t, 0.);\n    }\n    if (j < 2) {\n      flyerPos[j] = flPos;\n      if (tpTrk == 1) flyerPos[j].x += (j == 0) ? -0.1 : 0.1;\n      flyerMat[j] = flMat;\n    } else {\n      ro = flPos;\n      if (tpTrk == 2) ro += 0.7 * oNorm + 0.5 * cross (oNorm, oDir) * sin (0.2 * t);\n    }\n  }\n  if (tpTrk == 1) {\n    ro.y += 0.5 + SmoothBump (0.25, 0.75, 0.15, mod (2. * s, 1.)) * sign (s - 0.5);\n    ro.x += 9. * SmoothBump (0.25, 0.75, 0.15, mod (2. * s, 1.)) * sign (s - 0.5);\n    vd = normalize (0.5 * (flyerPos[0] + flyerPos[1]) - ro);\n    az = 0.5 * pi + atan (- vd.z, vd.x);\n    el = asin (vd.y);\n  } else if (tpTrk == 2) {\n    az = 0.;\n    el = 0.;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  dstFar = 300.;\n  sunDir = normalize (vec3 (cos (0.01 * tCur), 2., - sin (0.01 * tCur)));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    uvv = uv;\n    if (naa > 1.) uvv += Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi);\n    rd = normalize (vec3 (uvv, 3.));\n    if (tpTrk == 2) rd = rd * flMat;\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 AxToRMat (vec3 vz, vec3 vy)\n{\n  vec3 vx;\n  vx = normalize (cross (vy, vz));\n  vy = cross (vz, vx);\n  return mat3 (vec3 (vx.x, vy.x, vz.x), vec3 (vx.y, vy.y, vz.y), vec3 (vx.z, vy.z, vz.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}