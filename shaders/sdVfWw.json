{
    "Shader": {
        "info": {
            "date": "1658336628",
            "description": "The ShaderRunner is running through from Portland to CA on I-5. He is hangry and rushing into the In-N-Out.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdVfWw",
            "likes": 21,
            "name": "ShaderRunner",
            "published": 3,
            "tags": [
                "shaderrunner"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define SkewX(a) mat2(1,tan(a),0,1)\n#define SkewY(a) mat2(1,0,tan(a),1)\n#define Skew(a) mat2(1,tan(a.x),tan(a.y),1)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\n// noise and fbm function from https://www.shadertoy.com/view/Xd3GD4\n//-----------------------------------------------------------------------------\nvec2 hash( vec2 p )\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise2d( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    \n    vec2 i = floor( p + (p.x+p.y)*K1 );\n    \n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    \n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    \n    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    \n    return dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n    float f;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise2d( uv ); uv = m*uv;\n    f += 0.2500*noise2d( uv ); uv = m*uv;\n    f += 0.1250*noise2d( uv ); uv = m*uv;\n    f += 0.0625*noise2d( uv ); uv = m*uv;\n    f = 0.5 + 0.5*f;\n    return f;\n}\n\nvec3 cuctusTex(vec2 p, vec3 col, float m){\n    p*=80.0;\n    p.x = fract(p.x)-0.5;\n    float d = abs(p.x)-0.2;\n    d = max(m,d);\n    return mix(col,vec3(0.0,0.6,0.0),S(d,-0.05));\n}\n\nvec3 cactus(vec2 p, vec3 col){\n    p*=2.0;\n    \n    vec2 id = floor(p)-0.5;\n    float n = Hash21(id);\n    float h = clamp(n, 0.3, 0.4);\n    \n    p.x = mod(p.x,1.0)-0.5;\n    p.y+=0.58;\n    \n    vec2 prevP = p;\n    \n    p.x*=0.7;\n    p.y+=0.015;\n    float shadow = length(p)-0.08;\n    col = mix(col,vec3(0.0),S(shadow,-0.15));\n    \n    p = prevP;\n    \n    p*=Rot(radians(10.0));\n    float size = 0.05;\n    float d = sdSegment(p,vec2(0.0,h),vec2(0.0,0.0))-size;\n    if(n<0.5){\n        float d2 = sdSegment(p,vec2(0.0,0.07),vec2(0.1,0.07))-size;\n        d = min(d,d2);\n        d2 = sdSegment(p,vec2(0.0,0.1),vec2(-0.1,0.1))-size;\n        d = min(d,d2);\n        d2 = sdSegment(p,vec2(0.1,0.2),vec2(0.1,0.07))-size;\n        d = min(d,d2);\n        d2 = sdSegment(p,vec2(-0.1,0.25),vec2(-0.1,0.1))-size;\n        d = min(d,d2);\n    } else {\n        float d2 = sdSegment(p,vec2(0.0,0.1),vec2(0.1,0.1))-size;\n        d = min(d,d2);\n        d2 = sdSegment(p,vec2(0.0,0.07),vec2(-0.1,0.07))-size;\n        d = min(d,d2);\n        d2 = sdSegment(p,vec2(0.1,0.2+(h*0.2)),vec2(0.1,0.1))-size;\n        d = min(d,d2);\n        d2 = sdSegment(p,vec2(-0.1,0.25),vec2(-0.1,0.07))-size;\n        d = min(d,d2);\n    }\n    \n    d = max(-p.y-0.02,d);\n    col = mix(col,vec3(0,0.3,0),S(d,-0.05));\n    col = cuctusTex(p,col, d);\n    return col;\n}\n\nvec3 rock(vec2 p, vec3 col){\n    p*=4.0;\n    p.y+=1.0;\n    \n    vec2 id = floor(p)-0.5;\n    float n = Hash21(id);\n    float h = clamp(n, 0.5 ,1.5);\n    float h2 = clamp(n, 1.3 ,2.0);\n    \n    p.y*= 2.5;\n    p.y+= sin(h2)*0.3;\n    p.x+=0.2;\n    p.x = mod(p.x,1.4)-0.7;\n    p.x*=h2;\n    float d = length(p)-0.2;\n    d = max((abs(p.y)-0.15),d);\n    \n    float a = radians(-30.0*h);\n    p.x+=0.16;\n    float slice = dot(p,vec2(cos(a),sin(a)));\n    d = max(-slice,d);\n    a = radians(50.0*h);\n    p.x-=0.35;\n    slice = dot(p,vec2(cos(a),sin(a)));\n    d = max(slice,d);\n    \n    p.x+=0.2;\n    p.y+=0.1;\n    float shadow = length(p)-0.3;\n    col = mix(col,vec3(0.0),S(shadow,-0.4));\n    \n    float nc = noise2d(p*20.)*0.2;\n    col = mix(col,vec3(0.6,0.5,0.2)+nc,S(d,-0.07));\n    \n    return col;\n}\n\nfloat sdTri(vec2 p, vec2 s){\n    p*=vec2(0.7,1.2);\n    p.x-=s.x*0.5;\n    float d = B(p,s);\n    float a = radians(45.);\n    p.y = abs(p.y);\n    float mask = dot(p,vec2(cos(a),sin(a)));\n    d = max(mask,d);\n    return d;\n}\n\nvec3 PolyRunner(vec2 p, vec3 col){\n    p*=2.0;\n    vec2 prevP = p;\n    \n    // feather back\n    p*=Rot(radians(10.*sin(iTime*30.0)));\n    p*=SkewX(0.95);\n    p.y*=1.1;\n    \n    float d = sdTri(p-vec2(-0.01,0.0),vec2(0.12));\n    col = mix(col,vec3(0.3,0.6,0.8),S(d,0.0));\n    \n    // head hair\n    p = prevP;\n    p*=Rot(radians(31.));\n    p*=vec2(1.0,2.5);\n    p-=vec2(0.,0.68);\n    d = sdTri(p,vec2(0.05));\n    col = mix(col,vec3(0.1,0.7,0.9),S(d,0.0));\n    \n    // neck\n    p = prevP;\n    p.x*=2.0;\n    p.x-=0.2;\n    p.y-=0.02;\n    p*=SkewY(-0.9);\n    p*=Rot(radians(90.));\n    d = sdTri(p,vec2(0.12));\n    col = mix(col,vec3(0.3,0.7,0.8),S(d,0.0));\n    \n    // mouth\n    p = prevP;\n    p*=Rot(radians(11.));\n    p*=vec2(1.0,1.7);\n    p-=vec2(0.142,0.39);\n    \n    d = sdTri(p,vec2(0.05));\n    col = mix(col,vec3(0.9,0.9,0.1),S(d,0.0));\n    \n    // body\n    p = prevP;\n    p*=vec2(0.5,1.1);\n    p-=vec2(0.02,-0.09);\n    p*=Rot(radians(90.));\n    d = sdTri(p,vec2(0.07));\n    col = mix(col,vec3(0.5,0.7,0.8),S(d,0.0));\n    \n    // feather front\n    p = prevP;\n    p*=Rot(radians(12.*sin(iTime*35.0)));\n    p*=SkewX(0.95);\n    d = sdTri(p-vec2(-0.01,-0.03),vec2(0.08));\n    col = mix(col,vec3(0.1,0.4,0.7),S(d,0.0));    \n    \n    // animated legs\n    p = prevP;\n    p.y*=1.3;\n    p.x-=0.03;\n    p.y+=0.23;\n    p*=Rot(radians(800.0*iTime));\n    d = abs(length(p)-0.12)-0.03;\n    d = max(-(abs(p.y)-0.05),d);\n    \n    col = mix(col,vec3(0.7,0.5,0.5),S(d,-0.05));\n    \n    p = prevP;\n    p.y*=1.3;\n    p.x-=0.03;\n    p.y+=0.23;\n    p*=Rot(radians(750.0*iTime+50.));\n    d = abs(length(p)-0.08)-0.03;\n    d = max(-(abs(p.y)-0.03),d);\n    \n    col = mix(col,vec3(0.5,0.5,0.1),S(d,-0.05));\n    \n    return col;\n}\n\nfloat dCharI(vec2 p){\n    float d = B(p,vec2(0.01,0.04));\n    return d;\n}\n\nfloat dCharN(vec2 p){\n    vec2 prevP = p;\n    p.x = abs(p.x)-0.03;\n    float d = B(p,vec2(0.01,0.04));\n    p = prevP;\n    p*=Rot(radians(-30.));\n    float d2 = B(p,vec2(0.01,0.06));\n    p = prevP;\n    d2 = max((abs(p.y)-0.04),d2);\n    \n    d = min(d,d2);\n    return d;\n}\n\nfloat dCharO(vec2 p){\n    float d = abs(length(p)-0.03)-0.01;\n    return d;\n}\n\nfloat dCharU(vec2 p){\n    vec2 prevP = p;\n    float d = abs(length(p)-0.03)-0.01;\n    d = max(p.y,d);\n    p.x = abs(p.x)-0.03;\n    p.y-=0.02;\n    float d2 = B(p,vec2(0.01,0.02));\n    d = min(d,d2);\n    return d;\n}\n\nfloat dCharT(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.01,0.04));\n    p.y-=0.03;\n    float d2 = B(p,vec2(0.03,0.01));\n    return min(d,d2);\n}\n\nfloat dInNOut(vec2 p){\n    float d = dCharI(p-vec2(-0.3,0.0));\n    float d2 = dCharN(p-vec2(-0.24,0.0));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.18,0.0),vec2(0.01));\n    d = min(d,d2);\n    d2 = dCharN(p-vec2(-0.12,0.0));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.06,0.0),vec2(0.01));\n    d = min(d,d2);\n    d2 = dCharO(p-vec2(0.,0.0));\n    d = min(d,d2);\n    d2 = dCharU(p-vec2(0.09,0.0));\n    d = min(d,d2);\n    d2 = dCharT(p-vec2(0.17,0.0));\n    d = min(d,d2);\n    return d;\n}\n\nvec3 inNOut(vec2 p, vec3 col) {\n    vec2 prevP = p;\n    float d = dInNOut(p);\n    col = mix(col,vec3(1.0,0.0,0.0),S(d,0.0));\n    \n    p-=vec2(-0.08,-0.09);\n    p*=Rot(radians(-28.));\n    d = sdUnevenCapsule(p,0.02,0.035,0.25);\n    p = prevP;\n    p-=vec2(0.1,0.09);\n    p*=Rot(radians(-80.));\n    float d2 = sdUnevenCapsule(p,0.01,0.035,0.3);\n    d = min(d,d2);\n    p = prevP;\n    \n    p*=Rot(radians(11.));\n    d2 = sdTri(p-vec2(0.09,0.107),vec2(0.04));\n    d = min(d,d2);\n    \n    p = prevP;\n    d = max(-(abs(p.y)-0.055),d);\n    \n    col = mix(col,vec3(1.,0.9,0.0),S(d,0.0));\n    return col;\n}\n\nvec3 speechBaloon(vec2 p, vec3 col){\n    p*=2.0;\n    vec2 prevP = p;\n    p.x*= 0.6;\n    float d = length(p)-0.2;\n    float d2 = length(p-vec2(-0.1,-0.25))-0.03;\n    d = min(d,d2);\n    p = prevP;\n    d2 = length(p-vec2(-0.23,-0.33))-0.03;\n    d = min(d,d2);\n    col = mix(col,vec3(1.0),S(d,0.0));\n    p = prevP;\n    col = inNOut(p-vec2(0.07,-0.04),col);\n    \n    return col;\n}\n\nfloat remap(float value, float low1, float high1, float low2, float high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    float zoom = 1.0;\n    \n    if(iMouse.z>0.){\n        uv*=zoom+0.3-remap(m.y,-0.7,0.7,0.0,0.3);\n    } else {\n        uv*=zoom;\n    }\n    \n    vec2 prevUV = uv;\n    \n    float slowestSpeed = 0.5;\n    float mediumSpeed = 1.3;\n    float fastestSpeed = 3.0;\n    \n    uv.x+=iTime*slowestSpeed;\n    uv*=15.0;\n    \n    vec3 col = mix(vec3(0.6,0.9,1.0),vec3(0.5,0.9,1.0),uv.y);\n    \n    // distant mountains\n    float n = fbm(uv*0.05)*5.0;\n    float nc = noise2d(uv*vec2(0.5,10.))*0.05;\n    float d = uv.y+n-3.;\n    col = mix(col,vec3(0.5,0.8,1.0)+nc,S(d,0.0));\n    \n    // sun\n    uv = prevUV;\n    uv.x+=sin(iTime*0.5)*0.05;\n    d = length(uv-vec2(0.5,0.3))-0.1;\n    col = mix(col,vec3(1.0),S(d,-0.07));\n    \n    // clouds\n    uv = prevUV;\n    uv.y-=0.62;\n    uv*=5.0;\n    n = fbm(uv - vec2(-iTime*slowestSpeed,iTime*(slowestSpeed*0.5)))*0.6;\n    uv*= n;\n    float clouds = B(uv,vec2(2.0,0.4));\n    col = mix(col,vec3(0.5,0.9,1.0)+n*0.2,S(clouds,-0.2));\n    \n    uv = prevUV;\n    uv.x+=iTime*mediumSpeed;\n    uv*=15.0;\n    \n    // closest mountains\n    uv-=vec2(0.3);\n    n = fbm(uv*0.1)*3.0+abs(sin(uv.x*0.1)*2.0);\n    d = uv.y+n-1.;\n    col = mix(col,vec3(0.6,0.5,0.1)-(n*0.05),S(d,0.0));\n    \n    uv+=vec2(0.3);\n    n = fbm(uv*0.1)*3.0+abs(sin(uv.x*0.1)*2.0);\n    d = uv.y+n-1.;\n    nc = noise2d(uv*vec2(0.5,10.))*0.1;\n    col = mix(col,vec3(1.5,0.8,0.5)-(n*0.05)+nc,S(d,0.0));\n    \n    uv = prevUV;\n    d = 0.0;\n    float scene = mod(iTime,30.0);\n    if(scene >=10. && scene<20.){\n        col = mix(col,vec3(0.9,0.4,0.1)*col*1.2,S(d,0.0));\n    } else if(scene >= 20.){\n        col = mix(col,vec3(0.1,0.4,0.9)*col*1.5,S(d,0.0));\n    }\n    \n    uv = prevUV;\n    d = uv.y+0.3;\n    col = mix(col,vec3(0.7),S(d,0.0));\n    \n    uv.y += 0.28;\n    d = (abs(uv.y)-0.07);\n    uv.x+=iTime*fastestSpeed;\n    n = noise2d(uv*100.)*0.05;\n    col = mix(col,vec3(0.9,0.9,0.6)+n,S(d,-0.05));\n    \n    uv = prevUV;\n    uv.x+=iTime*fastestSpeed;\n    col = rock(uv,col);\n    \n    uv = prevUV;\n    uv.x+=iTime*fastestSpeed;\n    col = cactus(uv,col);\n    \n    uv = prevUV;\n    uv.x+=sin(iTime)*0.1;\n    uv.y+=0.35;\n    uv*=5.0;\n    uv.x*=1.5;\n    uv*=Rot(radians(12.0));\n    uv.y*=mix(1.5,6.0,smoothstep(-1.0,1.0,uv.x));\n    float smokeD = B(uv,vec2(0.6,0.01))*fbm(uv - vec2(-iTime*3.0,iTime*0.01));\n    col = mix( col, (vec3(0.95)), 1.0-smoothstep(0.05,0.5,smokeD) );\n    \n    uv = prevUV;\n    uv.x+=sin(iTime)*0.1;\n    col = PolyRunner(uv-vec2(0.22,-0.3),col);\n    \n    uv = prevUV;\n    uv.x+=iTime*fastestSpeed;\n    uv.y+=0.5;\n    uv*=2.0;\n    uv.x = fract(uv.x)-0.5;\n    d = B(uv,vec2(0.2,0.02));\n    col = mix(col,vec3(1.),S(d,0.));\n    \n    uv = prevUV;\n    uv.x+=sin(iTime)*0.1;\n    col = speechBaloon(uv-vec2(0.47,0.),col);\n    \n    uv = prevUV;\n    uv.x+=mod(iTime,5.)*fastestSpeed;\n    col+=noise2d(uv*100.0)*0.05;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}