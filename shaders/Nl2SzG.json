{
    "Shader": {
        "info": {
            "date": "1628615104",
            "description": "\nA Visualiser manipulating a hexagonaly tiled truchet pattern's width and color values.\ncode is a bit obfuscated, might do the refactoring when have some spare time.\n\nFeel free to change the song!",
            "flags": 64,
            "hasliked": 0,
            "id": "Nl2SzG",
            "likes": 4,
            "name": "Hex Truchet Visualiser [Sound]",
            "published": 3,
            "tags": [
                "nyan",
                "interactive",
                "hexagon",
                "truchet",
                "cat",
                "hexagonal",
                "tilling",
                "traditional"
            ],
            "usePreview": 0,
            "username": "Pelegefen",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "\n\n//Made with love by Peleg Gefen <3\n\n///let's you see the tilling and rotations to each tile marked with color from black 0 - to whitish gray 2\n//#define Debug \n\n\n//Let's you toggle between constant and variable width - on by default\n#define Shrink\n\n#define ZOOM 15.\n\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#define PI  3.141592654\n#define TAU (2.0*PI)\n\n\n#define MROT(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst mat2 rot120   = MROT(TAU/3.0);\n\nfloat freqs[4];\n\nfloat hash(in vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) \n  * 13758.5453);\n}\n\n\nvec2 rot (vec2 p,float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return p*mat2(c,s,-s,c);\n}\n\n\n\nfloat hexDist(vec2 p) {\n    p = abs(p);\n    //distance to the diagonal line\n    float c = dot(p, normalize(vec2(1., 1.73)));\n\n    // distance to the vertical line\n    c = max(c, p.x);\n    //c += sin(iTime + 4000.) *5. +5.;\n    return c;\n  }\n\nvec4 hexCoords(vec2 uv) {\n    vec2 r = vec2(1., 1.73);\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n\n    vec2 gv;\n    if(length(a) < length(b))\n      gv = a;\n    else\n      gv = b;\n\n    float y = .5 - hexDist(gv);\n    float x = atan(gv.x, gv.y);\n    vec2 id = uv - gv;\n    return vec4(x, y, id.x, id.y);\n\n}\n\nvec4 hexCoordsOffs(vec2 uv) {\n    vec2 r = vec2(1., 1.73);\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n\n    vec2 gv;\n    if(length(a) < length(b))\n      gv = a;\n    else\n      gv = b;\n\n    float y = .5 - hexDist((gv - vec2(0., .5)));\n    y = abs(y + .25);\n    //y += .5 - hexDist((gv + vec2(0., .5)));\n    float x = atan(gv.x,gv.y);\n    \n    vec2 id = uv - gv;\n    return vec4(gv, id.x, id.y);\n\n}\n\nvec3 Truchet(vec2 uv, vec2 id, float width,vec2 seed, out float rotations){ //xy are UV, z is mask\n\n    \n    \n    // float checker = mod(id.x , 2.5);\n     \n     //Random Rotation\n     float h = hash(id + seed);\n     h *= 3.;\n     h = floor(h);\n     uv = rot(uv, (h *  (TAU / 3.)) );\n     \n     \n     \n     \n     \n     vec2 offs = vec2(.400,.7);\n     float a = length(uv + offs  );\n     float b = length(uv - offs );\n     vec2 cUv = uv + offs;\n        float aa = atan(cUv.x,cUv.y);\n        cUv = uv + offs;\n         float bb = atan(cUv.x,cUv.y);\n    \n      float c = smoothstep(.70001 + width,.7 + width, a); \n      c -= smoothstep(.70001 - width,.7- width, a); \n     \n     float d = smoothstep(.70001 + width,.7+ width, b); \n     d -= smoothstep(.70001 - width,.7- width, b); \n     \n     float l1 = length(uv.x - uv.y * .585 );//line gradiant\n     float w = width *1.25;\n     float l = smoothstep(w,w - .01,l1 );//line mask\n\n      float mask = (c + d + l );\n      \n       float s = length((uv.x +( width* .585)) - (uv.y + (width* .585)) * .585 );\n\n       //float x = ((aa * c) + (bb * d) + (((uv.x + uv.y)) * l));\n       \n       \n       float subMask = clamp( l-(c)-(d),0.0,1.);\n     //  mask = max(mask, subMask);\n              float x = (c+d+subMask) * length(uv);\n\n       float y = ((((1. - abs((a-(.705 - (w/2.)))/(w) -.5))) * c)// bottom \n      \n       + (((1. - abs((b-(.705- (w /2.)))/(w) -.5)))* d)// top\n        \n       \n       +clamp(min(l,subMask + w) * (1.- (s / (w))),0.0,1.));// stright line\n       \n             float m = min(mask,(subMask + c + d));\n\n      if(mod(id.x,2.) == 0.)x = .5-x /m;\n      \n      \n       rotations = h;\n       vec3 tUv = vec3(x,y,m);\n    tUv = clamp(tUv,0.,1.);\n    return tUv;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    freqs[0] = texture( iChannel2, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel2, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel2, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel2, vec2( 0.30, 0.25 ) ).x;\n    float avgFreq = (freqs[0] +freqs[1] +freqs[2] +freqs[3])/4.;\n\tfloat iTime = iTime * .25;\n\tiTime += 800.;\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy)\n\t/iResolution.y;\n    uv = rot(uv,sin((iTime+(1.- freqs[0])*.1)*TAU)*.5+.5);\n    \n     vec4 col = vec4(0.);\n     vec2 uv1 = uv;\n     uv *= max(ZOOM,1.1) + sin(iTime) * 5.;\n     //uv += 10.;\n     //uv *= (sin(iTime * .75)*1.5+1.5) + 3.;\n     uv += vec2(iTime * 7. +( freqs[1]));\n\n   \n     uv -= (iMouse.xy / iResolution.xy) * 15. ;\n     \n\n      vec4 uvid = hexCoords(uv);\n     vec4 uvidOf = hexCoordsOffs(uv);\n     vec4 uvidOf1 = hexCoordsOffs(uv - .25);\n\n    vec2 id = uvidOf.zw;\n        vec2 id1 = uvidOf1.zw;\n\n     vec2 huv = uvidOf.xy;\n     vec2 huv1 = uvidOf1.xy;\n\n       #ifdef Shrink\n       \n       \n       \n       float f = (avgFreq- freqs[0])*freqs[1];\n       float l =  length((((fragCoord.xy / iResolution.y) - vec2(.9,.5)) / (freqs[1]  ) ));\n       vec2 res = ((fragCoord.xy / iResolution.y) - vec2(.5,.5)) * (f )  ;\n       res = rot(res, (f+iTime) * PI);\n       float atanUv = atan(res.x + l,res.y + l) ;\n       \n       \n       float width = 1. -l / atanUv  ; \n        width = clamp(fract(width + sin(\n        (mix((uv1.x / freqs[1]) + (uv1.y* freqs[2]),uv1.y * uv1.x\n        , cos(iTime * .1)*1.5+1.5)))*1.5 * freqs[1]) * \n        length((1.-uv1)*.1 ),\n        0.3 - freqs[1],//mix\n        0.1)  ;\n       \n      \n      \n     \n       \n       \n       #else\n        float width = .07;\n       #endif\n       float r1,r2,r3;\n       vec3 tUv = Truchet(huv,id,width,vec2(.1,.7),r1);\n       \n       vec4 htUv = hexCoordsOffs(fract(tUv.xy * 0.1));\n\n       vec3 tUv1 = Truchet(huv1 ,id1,width * .75,vec2(.4,.2) ,r2);\n       //col = vec4(tUv.z) * .3;\n       \n       \n       float mask = tUv.z;\n       \n       \n       \n       vec3 hUv = Truchet(htUv.xy ,htUv.zw,width,vec2(1.1,4.2) ,r3);\n       \n       vec4 hTruchet = texture(iChannel0,(hUv.xy ));\n\n       vec4 truchet1 = texture(iChannel0,(tUv.xy )+ vec2(-iTime,0.)) * mask * tUv.y;\n       \n       \n       vec4 truchet2 = texture(iChannel1, tUv1.xy+ vec2(-iTime,0.)) * tUv1.z* tUv1.y;\n       \n       \n       col += mix(truchet1  , truchet2 , (tUv.x + (tUv1.y - (tUv.x) ))*.5);\n       col = mix(col * hTruchet,col,sin(freqs[1] )*.5+.5);\n       col /= vec4(hUv * freqs[0],1.);\n       vec4 randCol = vec4(\n       sin(iTime*.25)*.5+.5,\n       sin(iTime*.5)*.5+.5,\n       sin(iTime)*.5+.5,\n       1.);\n       col /= randCol;\n       col -= randCol;\n       // col = vec4(0.);\n       // col.x = tUv.z;\n        \n      \n         #ifdef Debug\n \t float grid =( smoothstep(.01,.011,smoothstep(.0071,.007,uvid.y)));\n     col.r += grid * .3;\n        col += vec4(((r1 + 1.5) / 3.) * 1. - mask) * .3;\n     #endif\n     col = clamp(col,0.,1.);\n     \n\tfragColor = vec4( col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 28007,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://m.soundcloud.com/cheshire/all-i-wanna-do"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}