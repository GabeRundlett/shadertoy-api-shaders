{
    "Shader": {
        "info": {
            "date": "1609329707",
            "description": "faster raymarching using a low resolution buffer as ai\ntry it with a low resolution texture like nyancat or with a video",
            "flags": 32,
            "hasliked": 0,
            "id": "3lcczB",
            "likes": 0,
            "name": "Faster RayMarching",
            "published": 3,
            "tags": [
                "raymarching",
                "optimization",
                "buffer",
                "faster"
            ],
            "usePreview": 0,
            "username": "Ric3cir121",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "mat2 rotate(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\nvec3 rotate(vec3 c,float r){return vec3(rotate(r)*c.xz,c.y).xzy;}\nfloat de(vec3 c){\n    vec2 r = iChannelResolution[1].xy;\n    float p = length(texelFetch(iChannel1,ivec2(mod(c.xz/2.,vec2(r.x/r.y,1.))*r.y),0))/300.;\n    return min(c.y+1.,length(c-vec3(0,0,3))-.3)+p;\n}\nvec4 doMarch(vec3 pos,vec3 cam){\n    int i = 0;\n    vec3 march = vec3(0);\n    float d = 1.;\n    \n    for(;i<100&&d>0.02&&length(march)<100.;i++){\n        d = de(pos+march);\n        march += d*cam;\n    }\n    return vec4(march+pos,i);\n}\nvec3 getnormal(vec3 n){\n    vec2 e = vec2(1.0,-1.0)*(n.y<0.002-1.?.002:.002);\n    return normalize(e.xyy*de(n+e.xyy)+e.yyx*de(n+e.yyx)+e.yxy*de(n+e.yxy)+e.xxx*de(n+e.xxx));\n}\nvoid mn(out vec4 o,vec2 u,float mmin){\n    vec2 uv = (u-iResolution.xy/2.)/iResolution.y;\n    vec3 pos = vec3(0);\n    vec2 look = vec2(0,0);\n    vec3 cam = rotate(rotate(normalize(vec3(uv,1)).yxz,-look.y).yxz,look.x);\n    \n    vec4 march = doMarch(mmin*cam,cam);\n    \n    if(length(march.xyz)<100.){\n        vec2 r = iChannelResolution[1].xy;\n        o = texelFetch(iChannel1,ivec2(mod(march.xz/2.,vec2(r.x/r.y,1.))*r.y),0);\n        o *= texture(iChannel3,reflect(cam,getnormal(march.xyz)));\n    } else \n        o = texture(iChannel2,cam);\n    \n}\nvoid mainImage(out vec4 o,vec2 u){\n    float m1 = length(texelFetch(iChannel0,ivec2(u/4.),0).xyz);\n    float m2 = length(texelFetch(iChannel0,ivec2(u/4.)+ivec2(0,1),0).xyz);\n    float m3 = length(texelFetch(iChannel0,ivec2(u/4.)+ivec2(0,-1),0).xyz);\n    float m4 = length(texelFetch(iChannel0,ivec2(u/4.)+ivec2(1,0),0).xyz);\n    float m5 = length(texelFetch(iChannel0,ivec2(u/4.)+ivec2(-1,0),0).xyz);\n    float mmin = min(min(m1,m2),min(m3,min(m4,m5)));\n    \n    o = vec4(0);\n    vec4 O = vec4(0);\n    int a = 3;\n    for(int ix = 0;ix < a;ix++){\n        for(int iy = 0;iy < a;iy++){\n            O = vec4(0);if(mmin != 0.)mn(O,u+vec2(ix,iy)/float(a),mmin);o += O;\n        }\n    }\n    o /= float(a*a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rotate(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\nvec3 rotate(vec3 c,float r){return vec3(rotate(r)*c.xz,c.y).xzy;}\nfloat de(vec3 c){\n    return min(c.y+1.,length(c-vec3(0,0,3))-.3);\n}\nvec4 doMarch(vec3 pos,vec3 cam){\n    int i = 0;\n    vec3 march = vec3(0);\n    float d = 1.;\n    \n    for(;i<200&&d>0.1&&length(march)<50.;i++){\n        d = de(pos+march);\n        march += d*cam;\n    }\n    return vec4(march+pos,i);\n}\nvoid mainImage(out vec4 o, in vec2 u){\n    if(u.x*4.>iResolution.x||u.y*4.>iResolution.y)return;\n    vec2 uv = (u*4.-iResolution.xy/2.)/iResolution.y;\n    \n    vec3 pos = vec3(0);\n    vec2 look = vec2(0);\n    vec3 cam = rotate(rotate(normalize(vec3(uv,1)).yxz,-look.y).yxz,look.x);\n    \n    vec4 march = doMarch(pos,cam);\n    \n    o = vec4(march);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}