{
    "Shader": {
        "info": {
            "date": "1722509455",
            "description": "blackwhite, spiral https://glslsandbox.com/e#44846.1",
            "flags": 0,
            "hasliked": 0,
            "id": "McSyzy",
            "likes": 1,
            "name": "color rotator",
            "published": 3,
            "tags": [
                "spiral",
                "blackwhite"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution.xy\n\n\n#define REPEAT_NUM 10\n#define PI 3.14159265359\n#define PI2 (PI * 2.)\n\n\n// [HSV to RGB]\n// http://www.demoscene.jp/?p=1460 より引用\nvec3 Hue_(float hue)\n{\n\tvec3 rgb = fract(hue + vec3(0.0, 2.0/3.0, 1.0/3.0));\n\trgb = abs(rgb*2.0 - 1.0);\n\treturn clamp(rgb*3.0-1.0, 0.0, 1.0);\n}\nvec3 HSVtoRGB(vec3 hsv)\n{\n\treturn ((Hue_(hsv.x)-1.0)*hsv.y + 1.0) * hsv.z;\n}\n// [END HSV to RGB]\nconst int num = 300;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = time / 10.0;\n    vec3 ro = vec3(.0, .0, -22.);\n    vec3 rd = normalize(vec3((gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y), 1.));\n float sum = -.27;\n    float size = resolution.x / 1000.0;\n    for (int i = 0; i < num; ++i) {\n        vec2 position = resolution / 2.0;\n\tfloat t = (float(i) + time) / 50.0;\n\tfloat c = float(i) * 4.0;\n        position.x += tan(3.0 * t + c) * abs(tan(t)+0.27) * resolution.x * 0.27;\n        position.y += tan(.50 * t - c) * abs(cos(t)+0.27) * resolution.y * 0.48;\n\n        sum += size / length(gl_FragCoord.xy - position);\n    }\n   \n    float  s = sin(t), c = cos(t);\n    mat3 r = mat3(1., 0, 0,\n                  0, c, s,\n                  0, s, c) * \n             mat3(c, 0, s,\n                  0, 1, 0,\n\t\t s, 0, c);\n\n  \n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\tvec3 color = vec3(0.);\n\t\n\tfor (int i=1; i <= 10; ++i)\n\t{\n\t\tfloat f = float(i) * 0.2;\n\t\n\t\tvec2 dir = p - vec2(cos(time*f), sin(time*f)) * abs(sin(time/27.0));\n\t\t\n\t\tvec3 col = HSVtoRGB(vec3(float(i) * PI / 10.0, 1.0, 1.0))+sum;\n\t\tcolor += col / (256. * (1.0 - length(dir))*(1.0+sin(time)));\n\t}\n    vec3 a = vec3(0.001, 0.001, 3.5), b = vec3(1.0);\n\n  \n    for (int i = 0; i < 50; i++) \n    ro += min(length(cos((ro + a) * r) - b) - 0.5, 0.5) * rd+color;\n\n  \n   fragColor.rgb = (vec3(0.5, 0.35, 0.72) * -ro.z * 0.3)+sum;\n    fragColor.a = 1.0;\n    }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}