{
    "Shader": {
        "info": {
            "date": "1635182524",
            "description": "fun with trig functions in shadertoy",
            "flags": 0,
            "hasliked": 0,
            "id": "7dGXRt",
            "likes": 1,
            "name": "Plotting Functions",
            "published": 3,
            "tags": [
                "maths"
            ],
            "usePreview": 0,
            "username": "droidkid",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "vec3 plot(float dist, vec3 color, float thickness) {\n    return color * (smoothstep(-thickness, 0.0, dist) - smoothstep(0.0, thickness, dist));\n} \n\nvec3 y_axis(vec2 uv) {\n    float dist = (uv.x - 0.5);\n    return plot(dist, vec3(1.0, 1.0, 0.0), 0.002);\n}\n\nvec3 x_axis(vec2 uv) {\n    float dist = (uv.y - 0.5);\n    return plot(dist, vec3(1.0, 1.0, 0.0), 0.003);\n}\n\nvec3 yx_line(vec2 uv) {\n    vec2 point = uv - 0.5;\n    float dist = abs(point.x - point.y);\n    return plot(dist, vec3(0.0, 1.0, 0.0), 0.003);\n}\n\nvec3 sin_line(vec2 uv) {\n    vec2 point = uv - 0.5;\n    float val = 0.4 * sin(iTime) * sin(point.x * 3.14 * 5. + iTime*2.);\n    float dist = abs(val - point.y);\n    return plot(dist, vec3(1.0, 0.0, 0.0), 0.02);\n}\n\nvec3 cos_line(vec2 uv) {\n    vec2 point = uv - 0.5;\n    float val = 0.3 * cos(iTime) * cos(point.x * 3.14 * 5. + iTime*5.);\n    float dist = abs(val - point.y);\n    return plot(dist, vec3(1.0, 0.0, 1.0), 0.02);\n}\n\nvec3 tan_line(vec2 uv) {\n    vec2 point = uv - 0.5;\n    float val = 0.3 * cos(iTime) * tan(point.x * 3.14 * 5. + iTime*4.);\n    float dist = abs(val - point.y);\n    return plot(dist, vec3(1.0, 1.0, 0.0), 0.02);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //vec4 yaxis_color = vec4(y_axis(uv), 1.0);\n    //vec4 xaxis_color = vec4(x_axis(uv), 1.0);\n    //vec4 yx_color = vec4(yx_line(uv), 1.0);\n    vec4 sin_color = vec4(sin_line(uv), 1.0);\n    vec4 cos_color = vec4(cos_line(uv), 1.0);\n    vec4 tan_color = vec4(tan_line(uv), 1.0);\n\n\n    //fragColor = vec4(max(yaxis_color, xaxis_color));\n    //fragColor = vec4(max(fragColor, yx_color));\n    fragColor = vec4(max(fragColor, sin_color));\n    fragColor = vec4(max(fragColor, cos_color));\n    fragColor = vec4(max(fragColor, tan_color));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}