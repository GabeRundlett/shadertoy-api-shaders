{
    "Shader": {
        "info": {
            "date": "1638022954",
            "description": "Find the connected component.  \nEnriched tiles variant of https://shadertoy.com/view/NlGGRV ( accelerated variant of https://shadertoy.com/view/7ty3zG ): no with straight lines and crossings.\n\nclick to restart a new truchet tiling.  Scale N in Common.",
            "flags": 32,
            "hasliked": 0,
            "id": "7tK3RK",
            "likes": 9,
            "name": "connected components in truchet5",
            "published": 3,
            "tags": [
                "flood",
                "short",
                "connected",
                "doodles",
                "truchets",
                "streamreduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "// enriched tiles variant of https://shadertoy.com/view/NlGGRV\n// accelerated variant of https://shadertoy.com/view/7ty3zG\n\n#define hue(v)  vec4( .6 + .6 * cos( .5+(v)  + vec3(0,23,21)  ) , 1 )\n#define S(v) smoothstep( N*1.5/R.y, 0., v )\nvoid mainImage( out vec4 O, vec2 u )\n{\n // O = T(u).agbr; return;\n    vec2 U = N * u / R.y + 0.*iTime, I = floor(U), F = fract(U);\n         \n    O = T(I);                                          // cell states \n                                                       // --- truchet drawing\n    if (O.w > 1.) {                                    // crossing type\n        F = abs(F-.5);\n        O =   S(min(F.x,F.y))                          // draw crossing\n            * hue( O[ F.x>F.y ? 1 : 2 ] );             // coloring\n      }\n    else {                                             // turns type\n        O.w > 0. ? F = vec2(1.-F.y,F.x) : F;\n        O =   S( abs(min(length(F),length(1.-F))-.5) ) // draw turns\n            * hue( O[ F.x+F.y < 1. ? 1 : 2 ] );        // coloring\n   }        \n // if (iMouse.z>0.) O += (1.-O.w)*.3*mod(I.x+I.y,2.); // debug: draw tiles\n // O += .3*T(I).w;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define H(p)  fract(sin(dot(p, vec2(12.9898, 78.233))-iTime) * 43758.5453)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    if ( iFrame < 1 || iMouse.z>0.) {         // --- init: create truchet\n        vec2 I = U;                           // store truchet data\n        O.w = floor(4.*H(I));                 // tile type: crossing or turns of \\ or / axis\n        O.y = 1.+I.x+4096.*I.y;               // id of tile segment #1\n        O.z = -O.y;                           // id of tile segment #2\n        return;\n    }\n    \n    O = T(U);                                 // previous state\n    float Nx = floor(N*R.x/R.y);\n    vec4 T,t;\n    if (U.x <= Nx && U.y > N+4. && U.y <= N+N+4.) // keep previous version\n      { U.y -= N+4.; O = T(U); return; }\n      \n    if (U.x >= Nx+4. && U.x <= Nx+4.+Nx/8. && U.y <= N/8.) { // reduction map of change\n        O-=O;\n        U.x -= Nx+4.;\n        for (int k=0; k < 64; k++ ) {\n            vec2 V = 8.*U + vec2(k%8,k/8),\n                 o = T(V + vec2(0.,N+4.)).yz, // old vs new value\n                 n = T(V).yz;\n            if ( o != n ) O = vec4(o,n);      // if changed, store\n        }\n        return;\n    }\n    if (U.x > Nx || U.y > N) return;          // propagate only visible tiles\n\n                                              // --- propagate id along connections\n#define right      T(U+vec2(1,0)).y\n#define left     ( T = T(U-vec2(1,0)), T.w< 2. ? T.z : T.y )\n#define top      ( T = T(U+vec2(0,1)), T.w==0. ? T.y : T.z )\n#define bot      ( T = T(U-vec2(0,1)), T.w==1. ? T.y : T.z )\n    if (O.w==0.)      // tile contains:  \\     new id = min(connections)\n        O.y = min( O.y, min( left , bot )),\n        O.z = min( O.z, min( right, top ));\n    else if (O.w==1.) // tile contains:  /     new id = min(connections)\n        O.y = min( O.y, min( left , top )),\n        O.z = min( O.z, min( right, bot ));\n    else              // tile containes: +     new id = min(connections)\n        O.y = min( O.y, min( left, right)),\n        O.z = min( O.z, min( bot , top  ));\n\n // return;\n                  // --- shortcut: at color change, update the color source pixel\n    for( float j = 0.; j < N/8.; j++)\n        for( float i = 0.; i < Nx/8.; i++) {\n            T = T( vec2(Nx+4.+i,j) );\n            vec2 o = T.xy, n = T.zw;          // changed old->new value\n            if (O.y==o.x) O.y = n.x;          // oldvalue was my seg1 : update\n            if (O.y==o.y) O.y = n.y;\n            if (O.z==o.x) O.z = n.x;          // oldvalue was my seg2 : update\n            if (O.z==o.y) O.z = n.y;\n        }\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float N = 64.; // vertical number of tiles\n\n#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U+R)%ivec2(R), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}