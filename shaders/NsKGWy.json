{
    "Shader": {
        "info": {
            "date": "1632100123",
            "description": "logo-mtv",
            "flags": 0,
            "hasliked": 0,
            "id": "NsKGWy",
            "likes": 6,
            "name": "logo-mtv",
            "published": 3,
            "tags": [
                "logomtv"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "\n//https://iquilezles.org/articles/distfunctions2d\n\n///por jorge2017a2...2021-sep-19\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n    \nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\nvec3 musicM(vec2 p, vec3 col)\n{\n     float sdb1= sdBox(p-vec2(-0.2,0.0), vec2(0.11,0.3) );//izq\n     float sdb2= sdBox(p-vec2(0.2,0.0), vec2(0.11,0.3) ); //der\n     float sdb3= sdBox(p-vec2(0.0,0.15), vec2(0.1,0.15) ); //centro\n     float sdt1= sdTriangleIsosceles(p-vec2(0.0,0.21), vec2(0.1,0.1) );\n     float sdt2= sdTriangleIsosceles(p-vec2(0.0,-0.1), vec2(0.1,0.11) );\n     sdb3= differenceSDF(sdb3, sdt1);\n     sdb3= unionSDF(sdb3, sdt2);\n     float sdtdmtv=unionSDF(sdb1, sdb3);\n     sdtdmtv=unionSDF(sdtdmtv, sdb2);\n     \n     col= DrawFigBorde(vec3(1.0,1.0,0.0)-p.y*1.5, col,sdtdmtv);\n     return col;\n}\n\nvec3 musicTv(vec2 p, vec3 col)\n{    float sdb1= sdBox(p-vec2(0.15,0.0), vec2(0.025,0.18) );\n     vec2 p1= rotatev2(p-vec2(0.15,0.12), radians(-25.0));\n     float sdb2= sdBox(p1, vec2(0.15,0.03) );//izq\n     float sunT=unionSDF(sdb1, sdb2);\n     vec2 p2= rotatev2(p-vec2(0.25,-0.05), radians(-10.0));\n     vec2 p3= rotatev2(p-vec2(0.33,-0.005), radians(25.0));\n     float sdbv1= sdBox(p2, vec2(0.025,0.12) );\n     float sdbv2= sdBox(p3, vec2(0.025,0.17) );\n     float sunv=unionSDF(sdbv1, sdbv2);\n     col= DrawFigBorde(vec3(1.0,0.0,0.0)-p.y*1.5, col,sunT);\n     col= DrawFigBorde(vec3(1.0,0.0,0.0)-p.y*1.5, col,sunv);\n     return col;\n}\n\nvec3 zigzag(vec2 p,vec3 colIn,  vec3 colOut)\n{\n     float wi=0.045;\n     float he=0.15;\n     float sk=0.1;\n     vec2 p1= rotatev2(p-vec2(0.2,0.0), radians(45.0));\n     float sdb1= sdBox(p1, vec2(0.025,0.12) );\n     vec2 p2= rotatev2(p-vec2(0.34,0.0), radians(-45.0));\n     float sdb2= sdBox(p2, vec2(0.025,0.12) );\n     \n     float sunb=unionSDF(sdb1, sdb2);\n     colOut= DrawFigBorde(colIn, colOut,sunb);\n     return colOut;\n} \n\nvec3 zig1(vec2 uv, vec3 colIn,vec3  colOut)\n{    float px=iTime;\n    vec2 uv2a=uv-vec2(px,0.0);\n    vec2 uv2b=uv-vec2(px,0.0);\n    uv2a.x= opRep1D(uv2a.x, 0.9 );\n    uv2a.y= opRep1D(uv2a.y, 0.22 );\n    \n    uv2b.x= opRep1D(uv2b.x+0.3, 0.9 );\n    uv2b.y= opRep1D(uv2b.y, 0.22 );\n    colOut=zigzag(uv2a,colIn,colOut);\n    colOut=zigzag(uv2b,colIn,colOut);\n    return colOut;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);    \n    vec3 col=vec3(1.0)-uv.y;\n    \n    col= zig1(uv, vec3(0.0,1.0,0.0), col);\n    \n    vec2 uv2=uv-vec2(1.0,0.0);\n    uv2= rotatev2(uv2, radians(45.0));\n    col= zig1(uv2, vec3(0.0,0.0,1.0), col);\n    \n    float py =uv.y + 0.015*sin(iTime*5.2 + uv.x*30.0);\n    \n    col= DrawFigBorde(vec3(0.5, 0., 1.)-uv.y*0.75, col, (py+0.3) );\n    col= DrawFig(vec3(1.0, 0., 0.)-uv.y, col, abs(py+0.33)-0.025 );\n    \n    col=musicM(uv, col);\n    col=musicTv(uv, col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}