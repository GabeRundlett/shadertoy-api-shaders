{
    "Shader": {
        "info": {
            "date": "1450304492",
            "description": "Peripheral aliasing demo. Stare at the red cross and observe aliasing in the peripheral image. Works best in fullscreen.",
            "flags": 0,
            "hasliked": 0,
            "id": "4d3GzS",
            "likes": 5,
            "name": "peripheral aliasing demo",
            "published": 3,
            "tags": [
                "aliasing",
                "peripheralvision"
            ],
            "usePreview": 0,
            "username": "ap",
            "viewed": 834
        },
        "renderpass": [
            {
                "code": "\nvec2 rand2(in vec2 p)\n{\n    return fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n}\n\nfloat softNear(float x, float y1, float y2, float d)\n{\n    return min(\n              smoothstep(y1-d, y1, x),\n        1.0 - smoothstep(y2, y2+d, x));\n}\n\nvec4 crossHair(vec2 fragCoord, vec2 uv, vec2 iResolution, vec2 loc)\n{\n    return (\n        softNear(fragCoord.x, loc.x,        loc.x,        2.0) * \n        softNear(fragCoord.y, loc.y - 20.0, loc.y + 20.0, 2.0) + \n        softNear(fragCoord.y, loc.y,        loc.y,        2.0) * \n        softNear(fragCoord.x, loc.x - 20.0, loc.x + 20.0, 2.0)) * vec4(1.0, 0.0, 0.0, 1.0);\n}\n\nvec4 stimulus(vec2 fragCoord, vec2 center, vec2 size)\n{\n    vec2 diffvec = fragCoord - center;\n    float angle  = atan(diffvec.y, diffvec.x);\n    \n    float freq = 100.0;\n    \n    float flatSine = floor(1.0 + 0.5 * sin(freq * angle));\n      \n    vec3 color = vec3(flatSine);\n    \n    float diffL = length(diffvec / (size * 0.5));\n    \n    return mix(vec4(color, 1.0), vec4(0.0),\n               smoothstep(0.99, 1.01, diffL));\n}\n\n#define SS 2\n\nfloat sinc(float x)\n{\n    return sin(3.14159 * x) / (3.14159 * x);\n}\n\nfloat lanczos(float x, float a)\n{\n    return sinc(x) * sinc(x / a);\n}\n \n\nvec4 superSampleStimulus(vec2 fragCoord, vec2 center, vec2 size)\n{\n    vec4 sum = vec4(0.0);\n\n    vec2 step = 4.0 * vec2(1.0 / float(SS), 1.0 / float(SS));\n    float sumWeight = 0.0;\n    for(int i = 0; i < SS; i++)\n    {\n        for(int j = 0; j < SS; j++)\n        {\n            vec2 delta = -vec2(0.5) + (vec2(i, j) + rand2(vec2(i,j))) * step;\n            float weight = lanczos(delta.x, 2.0) * lanczos(delta.y, 1.0);\n            sum += (weight * stimulus(fragCoord + delta, center, size));\n            //count = count + 1.0;\n            sumWeight += weight;\n        }\n    }\n\n    return sum / sumWeight;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float motionRad = 15.0;\n    float speed = -0.7;\n    \n    float phase = iTime * 6.28 * speed;\n    \n    if(mod((phase / 6.28), 3.0) <= 1.0)\n        phase = 0.0;\n    \n    \n    vec2 crossHairPos = iResolution.xy * vec2(0.5, 0.5) + motionRad * vec2(cos(phase), sin(phase));\n\n    fragColor = \n        crossHair(fragCoord, uv, iResolution.xy, crossHairPos) +\n        superSampleStimulus(fragCoord, vec2(0.25, 0.5) * iResolution.xy, iResolution.xx * 0.3);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}