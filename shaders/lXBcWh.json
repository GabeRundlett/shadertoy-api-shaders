{
    "Shader": {
        "info": {
            "date": "1727683903",
            "description": "Another iteration on my experiments with velocity-coupled particles",
            "flags": 32,
            "hasliked": 0,
            "id": "lXBcWh",
            "likes": 0,
            "name": "Heat Differentials 2",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "particles",
                "life",
                "multipass"
            ],
            "usePreview": 1,
            "username": "Ebanflo",
            "viewed": 51
        },
        "renderpass": [
            {
                "code": "// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n// Copyright © 2024 Eben Kadile\n\n/*\nThere is a \"sweet spot\" of kinetic energy in which particles couple to each other the strongest.\nThe idea was to demonstrate the emergence of self-regulating subsystems in a system where kinetic\nenergy is decaying except near a hot-spot.\n\nThe lesson learned is that this probably won't happen in such a simple system:\nIn order for an emergent cell to remain at equillibrium, it would have to orbit the\nhotspot at a \"goldilocks\" zone. Particles only have purely local information about the\nheat, no gradients, so the cell itself would have to develop a special mechanism for this,\nwhich seems unlikely with so few particles and so few particle types.\n\nThe basic physics idea is that particles are attracted or\nrepelled from other particle types at different ranges\nvia a super simple scattering physics defined in Buffer A.\nSystem parameters can be fiddled with in Common.\nAny decent gaming PC can probably handle 2X as many particles at 800x450\n*/\n\n\nconst mat4x4 palette = mat4x4(0.3, 0.7, 0.2, 1.0,\n                              0.0, 0.7, 0.5, 1.0,\n                              0.4, 0.2, 0.9, 1.0,\n                              0.8, 0.2, 0.5, 1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float dist = 1e6;\n    int atom_id = 0;\n\n    for(int i = 0; i < TOT_ATOMS; i++) {\n        vec4 atom = get_atom(iChannel0, i);\n    \tvec2 offs = fragCoord - atom.xy*iResolution.y;\n        float dsqr = dot(offs, offs);\n\n        if(dsqr < dist) {\n            dist = dsqr;\n            atom_id = i;\n        }\n    }\n\n    int atom_type = get_atom_type(atom_id);\n    fragColor = palette[atom_type] * smoothstep(2.0, 1.5, sqrt(dist));\n    \n    float dhot = distance(fragCoord.xy/iResolution.y, hotspot);\n    fragColor += vec4(0.5, 0.25, 0, 1)/(1.0 + 36.0*dhot*dhot);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n// Copyright © 2024 Eben Kadile\n\n#define PI 4.0*atan(1.0)\n\n#define N_ATOMS_0 1600\n#define N_ATOMS_1 1600\n#define N_ATOMS_2 1600\n#define N_ATOMS_3 1600\n#define TOT_ATOMS N_ATOMS_0 + N_ATOMS_1 + N_ATOMS_2 + N_ATOMS_3\n//#define LOW_ENTROPY_INIT\n\nint get_atom_type(int i) {\n    return 3 - int(i < N_ATOMS_0)\n             - int(i < N_ATOMS_0 + N_ATOMS_1)\n             - int(i < N_ATOMS_0 + N_ATOMS_1 + N_ATOMS_2);\n}\n\n// green, cyan, violet, magenta\nconst vec4 close_radii = vec4(0.1, 0.1, 0.05, 0.1);\nconst vec4 far_radii = vec4(0.2, 0.2, 0.2, 0.4);\n// same sign attractive, opposite sign repulsive\nconst vec4 close_potential = vec4(1.0, 1.0, 2.0, 3.0);\nconst vec4 far_potential = -vec4(4.0, 2.0, 3.0, 2.0);\nconst mat4x4 coupling_matrix = mat4x4(-1e4, 1e5, -1e5, 0,\n                                      -1e5, -1e3, 0, 0,\n                                      0, 1e5,  -1e3, -1e3,\n                                      0, 0, -1e5, 1e5);\nconst float max_init_speed = 0.003;\nconst float min_init_speed = 0.0015;\nconst float min_speed = 0.0005;\nvec4 speedup_factor = vec4(0.007);\nvec4 slowdown_factor = vec4(0.0018);\nfloat velocity_coupling_decay = 2e3;\nfloat velocity_coupling_amplitude = 1e2;\n\n#define hotspot (iMouse.xy == vec2(0) ? vec2(0.5) : iMouse.xy/iResolution.y)\n\nfloat potential(int t, float d2) {\n    float d = sqrt(d2);\n    float dclose = d/close_radii[t];\n    float dfar = (d - close_radii[t])/(far_radii[t] - close_radii[t]);\n    return step(0.0, far_radii[t] - d)\n          *(mix(close_potential[t], far_potential[t], dclose)*step(0.0, close_radii[t] - d)\n          + (1.0 - dfar)*far_potential[t]*step(0.0, d - close_radii[t]));\n}\n\nfloat new_potential(int t1, int t2, float d2) {\n    float d = sqrt(d2);\n    float far = max(far_radii[t1], far_radii[t2]);\n    if(d < far) {\n        if(coupling_matrix[t1][t2] < 0.0) {\n            float dclose = d/close_radii[t1];\n            float dfar = (d - close_radii[t1])/(far_radii[t1] - close_radii[t1]);\n            float p = step(0.0, far_radii[t1] - d)\n                    * (mix(close_potential[t1], far_potential[t1], dclose)*step(0.0, close_radii[t1] - d)\n                    + (1.0 - dfar)*far_potential[t1]*step(0.0, d - close_radii[t1]));\n            return coupling_matrix[t1][t2]*p*abs(p);\n        } else {\n            float d1 = d/far;\n            return -coupling_matrix[t1][t2]*(1.0 - d1)*(1.0 - d1)*far_potential[t1]*far_potential[t2];\n        }\n    } else {\n        return 0.0;\n    }\n}\n        \n\nfloat velocity_coupling(float v) {\n    v -= min_speed;\n    return step(0.0, v)*velocity_coupling_amplitude*v*exp(-velocity_coupling_decay*v);\n}\n\nbool in_range(float d2) {\n    float d = sqrt(d2);\n    return d2 < max(far_radii[0],\n                    max(far_radii[1],\n                    max(far_radii[2], far_radii[3])));\n}\n\nvec4 get_atom(sampler2D buf, int id) {\n    ivec2 res = textureSize(buf, 0);\n\tivec2 uv = ivec2(\n        (id/4)%res.x,\n        id%4 + 4*((id/4)/res.x)\n    );\n\n    return texelFetch(buf, uv, 0);\n}\n\n\nvec2 perp(vec2 v) {\n    return vec2(-v.y,v.x);\n}\n\nvec2 wrap(vec2 v, vec2 size) {\n\treturn mod(v + size/2.0, size) - size/2.0;\n}\n\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec2 expi(float t) {\n    return vec2(cos(t), sin(t));\n}\n\nvec2 rotate(vec2 x, float t) {\n    return cmul(x, expi(t));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n// Copyright © 2024 Eben Kadile\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy/iResolution.y;\n\n    ivec2 pixel = ivec2(fragCoord.xy);\n    int pixel_id = pixel.y%4 + 4*pixel.x + 4*int(iResolution.x)*(pixel.y/4);\n    vec4 pixel_atom = get_atom(iChannel0, pixel_id);\n    int pixel_type = get_atom_type(pixel_id);\n    vec2 pixel_velocity = pixel_atom.zw;\n    \n    float total_turn = 0.0;\n    \n    if(pixel_id < TOT_ATOMS) {\n        if(iFrame < 10) {\n            vec4 rnd = get_atom(iChannel1, pixel_id);\n            \n            #ifdef LOW_ENTROPY_INIT\n            pixel_atom.xy = vec2(0.2 + 0.7*float(pixel_id%3), 0.2 + 0.3*float(pixel_id%3));\n            pixel_atom.xy += 0.3*rnd.xy - 0.1;\n            #else\n            pixel_atom.xy = rnd.xy*res;\n            #endif\n\n            pixel_velocity = 2.0*max_init_speed*(rnd.zw - 0.5);\n            if(length(pixel_velocity) < min_init_speed) {\n                pixel_velocity = vec2(min_init_speed, 0.0);\n            }\n        } else {\n            for(int i = 0; i < TOT_ATOMS; i++) {\n                vec4 i_atom = get_atom(iChannel0, i);\n                vec2 dir = pixel_atom.xy - i_atom.xy;\n                dir = wrap(dir, res);\n                float d2 = dot(dir, dir);\n\n                int i_type = get_atom_type(i);\n\n                // - for left, + for right\n                float side = sign(dot(pixel_velocity, perp(dir)));\n//*\n                total_turn += float(i != pixel_id)\n                             *side\n                             *new_potential(pixel_type, i_type, d2)\n                             *velocity_coupling(length(pixel_velocity))\n                             *velocity_coupling(length(i_atom.zw));\n                total_turn = clamp(total_turn, -0.5*PI, 0.5*PI);\n//*/\n            }\n        }\n        \n        pixel_velocity = rotate(pixel_velocity, total_turn);\n        float dhot = distance(pixel_atom.xy, hotspot);\n        pixel_velocity *= 1.0 + speedup_factor[pixel_type]/(1.0 + 16.0*dhot*dhot);\n        pixel_velocity *= length(pixel_velocity) < min_speed ? 1.0 : 1.0 - slowdown_factor[pixel_type];\n        pixel_atom.zw = pixel_velocity;\n        pixel_atom.xy += pixel_velocity;\n        pixel_atom.xy = mod(pixel_atom.xy, res);\n        fragColor = pixel_atom;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}