{
    "Shader": {
        "info": {
            "date": "1700334059",
            "description": "All year long I'm going to just focus on truchet tiles and the likes! ",
            "flags": 64,
            "hasliked": 0,
            "id": "dlGyDw",
            "likes": 25,
            "name": "Year of Truchets #060",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "truchet",
                "tile"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #060\n    11/18/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n    see all https://www.shadertoy.com/user/byt3_m3chanic/sort=newest\n\n    truchet pattern https://www.shadertoy.com/view/ddXyzH\n*/\n\n#define R   iResolution\n#define M   iMouse\n#define T   iTime\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MAX_DIST    100.\n#define MIN_DIST    .0001\n\nmat2 r45,r1,r2;\nvec3 hit,hitPoint;\n\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 p){return fract(sin(dot(p,vec2(23.43,84.21)))*4832.323); }\nfloat box(vec3 p, vec3 b) {vec3 q = abs(p) - b;return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);}\n\n//@iq extrude & twist\nfloat opx(in float d, in float p, in float h){\n    vec2 w = vec2(d,abs(p)-h);\n  \treturn min(max(w.x, w.y),0.)+length(max(w,0.));\n}\nvec3 twist( in vec3 p ){\n    float cx = .015+.01*sin(T*.08);\n    return vec3(rot(cx*p.z)*p.xy,p.z)/1.5;\n}\n\nfloat tile(vec2 uv, float wd) {\n\n    vec2 id = floor(uv), q = fract(uv)-.5;\n    float hs = hash21(id.xy);\n\n    if(hs>.5)  q.xy *= rot(1.5707);\n    hs = fract(hs*75.32);\n    \n    float pf = .353;\n    vec2 q2 = q; q*=r45;\n    \n    vec2 p2 = vec2(length(q.x+pf),length(q.x-pf));\n    float pq = p2.x<p2.y? q.x+pf : q.x-pf;\n\n    // main pattern\n    float d = abs(length(pq))-wd;\n\n    // alt pattern\n    if(hs>.85) {\n        d = min(length(q2.x),length(q2.y))-(wd*1.4);\n        float xd = length(abs(q2.x)-(wd*1.65))-(wd*.25);\n        d = max(d,-xd);\n    }\n    \n    return d;\n}\n\nvec2 map(vec3 pos){\n\n    vec2 res = vec2(1e5,0);\n\n    vec3 xpo = pos;\n    xpo.z += 12.+5.*sin(T*.1);\n    xpo.yz*=r1;\n    xpo.xz*=r2;\n    \n    float bx = box(xpo,vec3(1.5))-.05;\n    if(bx<res.x) {\n        res = vec2(bx,4.);\n        hit = xpo;\n    }\n    \n    pos = twist(pos);\n    pos.z -= T;\n\n    float k = tile(pos.yz*.75,.15+.1*sin(pos.z*.2));\n    float b = opx(k,abs(pos.x)-8.,1.5)-.02;\n\n    if(b<res.x) {\n        res = vec2(b,2.);\n        hit = pos;\n    }\n\n    return res;\n}\n\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\nvec2 marcher(vec3 ro, vec3 rd){\n\tfloat d = 0.,m = 0.;\n    for(int i=0;i<100;i++){\n    \tvec2 ray = map(ro + rd * d);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST) break;\n        d += i<32?ray.x*.3:ray.x*.8;\n        m  = ray.y;\n    }\n\treturn vec2(d,m);\n}\n\nvec2 getHit(vec3 n) {\n        //@Shane https://www.shadertoy.com/view/3sVBDd\n        //finding the face of a cube using normal\n        vec3 aN = abs(n);\n        ivec3 idF = ivec3(n.x<-.25? 0 : 5, n.y<-.25? 1 : 4, n.z<-.25? 2 : 3);\n        int face = aN.x>.5? idF.x : aN.y>.5? idF.y : idF.z;\n        \n        vec2 hpp;\n        if(face==0) hpp = hitPoint.zy;\n        if(face==1) hpp = hitPoint.zx;\n        if(face==2) hpp = hitPoint.xy;\n        if(face==3) hpp = hitPoint.xy;\n        if(face==4) hpp = hitPoint.zx;\n        if(face==5) hpp = hitPoint.yz;\n        return hpp;\n}\n\nvec3 fog = vec3(.11,.09,.08);\nvec3 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, inout float d, vec2 uv, float bnc) {\n\n    vec3 C = vec3(0);\n    vec2 ray = marcher(ro,rd);\n    float m = ray.y;\n    d = ray.x;\n    hitPoint = hit;\n\n    if(d<MAX_DIST)\n    {\n        vec3 p = ro + rd * d,\n             n = normal(p,d);\n             \n        vec3 lpos =vec3(-1.,-2,5.),\n             l = normalize(lpos-p),\n             h = vec3(.5);\n        \n        float shdw = 1.,\n              diff = clamp(dot(n,l),0.,1.);\n              \n        for( float t=.1; t < 8.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 18.*h/t);\n            t += h;\n            if( shdw<MIN_DIST || t>8. ) break;\n        }\n        diff = mix(diff,diff*shdw,.75);\n\n        vec3 tn = n;\n        vec2 hpp = getHit(tn);\n\n        if(m==2.) {\n              h = texture(iChannel1,hpp*.5).rgb;\n            ref = h*.5;\n        }\n\n        tn = n;\n        tn.yz*=r1;\n        tn.xz*=r2;\n        hpp = getHit(tn);\n\n        if(m==4.) {\n              h = texture(iChannel2,hpp*.25).rgb;\n            ref = vec3(.5);\n        }\n        \n        C = diff * h;\n        \n        ro = p+n*.01;\n        rd = reflect(rd,n);\n    } \n\n    if(bnc>0.) C = mix(C,fog,1.-exp(-.000008*d*d*d));\n    return C;\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{   \n    r45 = rot(.7853981634);\n    r1 = rot(T*.05);\n    r2 = rot(T*.1);\n    \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,0,.5);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    //camera\n    float x = M.xy==vec2(0) || M.z<0. ? .0 : -(M.y / R.y * .2 - .1) * PI;\n    float y = M.xy==vec2(0) || M.z<0. ? .0 :  (M.x / R.x * .2 - .1) * PI;\n    mat2 rx = rot(x), ry = rot(y);\n    \n    ro.yz *= rx, ro.xz *= ry;\n    rd.yz *= rx, rd.xz *= ry;\n\n    // reflection loop (@BigWings)\n    vec3 C = vec3(0), ref=vec3(0), fil=vec3(1);\n    \n    float d =0., a = 0., bnc = 2.;\n    for(float i=0.; i<bnc; i++) {\n        vec3 pass = render(ro, rd, ref, d, uv, bnc);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.) a = exp(-.00001*d*d*d);\n    }\n    \n    C = mix(C,fog,1.-a);\n    C=pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35261,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/dom-in-ator/carbon-based-lifeforms-proton"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}