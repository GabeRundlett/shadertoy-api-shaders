{
    "Shader": {
        "info": {
            "date": "1725107528",
            "description": "originals  https://www.shadertoy.com/view/wssBzX",
            "flags": 0,
            "hasliked": 0,
            "id": "Xc2BzG",
            "likes": 1,
            "name": "unity boxes",
            "published": 3,
            "tags": [
                "fractal",
                "stars",
                "unity"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "#define resolution iResolution.xy\n#define time iTime\n\nfloat boxDist(vec2 p){\n    vec2 d = abs(p)-1.0;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\n#define PI 3.141592\n#define TAU 6.2831853071\n#define dt (mod(iTime+PI*0.5,TAU))\n\n// reference for animation curves: https://easings.net/\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n#define animation(time) (-1.+2.*easeInOutCirc(time))\nfloat square (vec2 uv)\n{\n    float width = 0.35;\n  \n\n\tuv = abs(uv);\n    return smoothstep(width,width*1.05,max(uv.x,uv.y));\n}\n\nfloat sc (vec3 p, float s)\n{\n    p = abs(p);\n    p = max(p, p.yzx);\n    return min(p.x, min(p.y, p.z)) - s;\n}\n\nfloat cube (vec3 p)\n{\n   \n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n  p.yz *= rot(iTime);\n    p.xz *= rot(iTime);\n    return max(-sc(p, 0.8),length(max(abs(p)-vec3(1.),0.)));\n}\nfloat cube2 (vec3 p)\n{\n   \n  \n    p.xz *= rot(PI/4.);\n  p.yz *= rot(iTime);\n    p.xy *= rot(iTime);\n    return max(-sc(p, 0.8),length(max(abs(p)-vec3(1.),0.)));\n}\nfloat cube3 (vec3 p)\n{\n   \n    p.yz *= rot(-atan(1./sqrt(2.)));\n \n  p.yz *= rot(-iTime);\n    p.xz *= rot(iTime);\n    return max(-sc(p, 0.8),length(max(abs(p)-vec3(1.),0.)));\n}\nvec3 raymarch (vec2 uv)\n{\n    vec3 ro = vec3(uv*3.,5.),\n        rd = normalize(vec3(0.,0.,-1.)),\n        p = ro,\n    \tcol = vec3(0.,0.05,0.05);\n    float shad;\n    bool hit = false;\n    \n    for (float i=0.; i<32.; i++)\n    {\n        float d = cube(p);\n        float d2 = cube2(p);\n        float d3 = cube2(p);\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/32.;\n            break;\n        }\n        p+=d*rd;\n    }\n    if (hit) col = vec3(1.-shad);\n    return col;\n}\n\nvec3 raymarch3 (vec2 uv)\n{\n    vec3 ro = vec3(uv*3.,5.),\n        rd = normalize(vec3(0.,0.,-1.)),\n        p = ro,\n    \tcol = vec3(0.,0.05,0.05);\n    float shad;\n    bool hit = false;\n    \n    for (float i=0.; i<32.; i++)\n    {\n        float d = cube2(p);\n\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/32.;\n            break;\n        }\n        p+=d*rd;\n    }\n    if (hit) col = vec3(1.-shad);\n    return col;\n}\nvec3 raymarch2 (vec2 uv)\n{\n    vec3 ro = vec3(uv*3.,5.),\n        rd = normalize(vec3(0.,0.,-1.)),\n        p = ro,\n    \tcol = vec3(0.,0.05,0.05);\n    float shad;\n    bool hit = false;\n    \n    for (float i=0.; i<32.; i++)\n    {\n        float d = cube3(p);\n        \n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/32.;\n            break;\n        }\n        p+=d*rd;\n    }\n    if (hit) col = vec3(1.-shad);\n    return col;\n}\n\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(1., 10.233))) * 40000.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nfloat invs(float y) {\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat isBetween(float a, float b, float c) {\n    //float k = 3. / iResolution.y;\n    return smoothstep(-0.5, 0., -mod(c-a, 2. * pi) + mod(b-a - 0.1 * pi, 2. * pi));\n   //return exp( -1. * (abs(-mod(c-a, 2. * pi) + mod(b-a, 2. * pi))) );\n}\n\nfloat ellipse(vec2 uv, vec2 p, vec2 q, float i) {\n    float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    i = 1.-quadTest;\n\n    // center point\n    vec2 c = (i == 1.) ? vec2(p.x, q.y)\n                       : vec2(q.x, p.y);\n\n    // axis distances between points\n    float x = abs(q.x - p.x), y = abs(q.y - p.y);\n\n    // ellipses (asymptotes when x==0 or y==0, annoying)\n    //float d = (i == 1.) ? length((uv - c) * vec2(y/x,1)) - y\n    //                    : length((uv - c) * vec2(1,x/y)) - x;\n\n    float d = sdEllipse(uv - c, vec2(x, y));\n\n    // (make this smoothstep or exp)\n    // float s = smoothstep(-0.02, 0.02, -abs(d) + 0.01);\n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, -abs(d) + 0.006);\n    s = exp(-100. * abs(d));\n    // a, b angles from center to points\n    // c angle from center to uv\n    float a1 = atan(p.x-c.x, p.y-c.y);\n    float a2 = atan(q.x-c.x, q.y-c.y); // move b from a-> b to \"draw\" thing\n    float b = atan(uv.x-c.x, uv.y-c.y);\n    \n    // flip clockwise <-> anticlockwise across diagonal quads\n    // float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    \n    // cut out a1,a2 segment of ellipse\n    float as = isBetween(a1, a2, b);\n    return s;// * mix(as, 1. - as, quadTest);\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{   \n\nvec2 position = 2.0 * ( fragCoord.xy - 0.5*resolution.xy) / resolution.y;\n\n\tvec3 dir=vec3(position*zoom,1.);\n    vec3 from=vec3(1.,.5,0.5);\n\t\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n\n\tvec2 m = 2.0*(vec2(0.5, 0.5) - 0.5);\n\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y); // 正規化\n\n    float l = 1.1 / abs(length(p*tan(time)) - 0.74);\n    l += 2.3 / abs(length(p) - 0.1);\n\t\n\tfloat a = 0.22 / length(position-m);\n\tfloat b = 0.21 / length(position-m);\n\tfloat c = 0.211 / length(position-m);\n\t\n\tfloat d = sin(100.0*10.0 + position.x*position.y);\n\tvec2 offset = -vec2(0.001*d, 0.01 + 0.001*d);\n\n\tvec4 prev = vec4 (position, offset + gl_FragCoord.xy/resolution.xy);\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\t\n   \n    vec3 col = raymarch(uv*0.5);\n        vec3 col2 = raymarch2(uv*1.01);\n           vec3 col3 = raymarch3(uv*1.50);\n\tfragColor = 0.25*prev  + vec4(a, b, c, 5.0);\n   fragColor+=vec4((col+col2+col3)*v*0.01,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}