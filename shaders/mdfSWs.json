{
    "Shader": {
        "info": {
            "date": "1669721101",
            "description": "i want to figure out how game of life works by not looking it up\n",
            "flags": 32,
            "hasliked": 0,
            "id": "mdfSWs",
            "likes": 2,
            "name": "game of life with lowres and fps",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trpino = fragCoord/iResolution.xy;\n    vec4 o_col = texture(iChannel0, o_trpino);\n    \n    \n    // Output to screen\n    fragColor = o_col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float f_n_rand(float n){\n    return fract(sin(n*1234.432)*1234.23);\n}\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float n_hz = 240.;\n    float n_fps = 30.;\n    vec2 o_scale = vec2(0.2);\n\n    vec2 o_fragCoord = floor((fragCoord.xy+vec2(1.))*o_scale);\n    vec2 o_mouseCoord = floor((iMouse.xy+vec2(1.))*o_scale);\n    vec2 o_iResolution = floor(iResolution.xy * o_scale);\n       \n    vec2 o_trpino = (o_fragCoord.xy)/ o_iResolution.xy;\n    vec2 o_trmono = (o_mouseCoord.xy)/ o_iResolution.xy;\n    //vec2 o_trpino = (fragCoord.xy)/ iResolution.xy;\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec4 o_col_last = texture(iChannel0, o_trpino);\n    vec4 o_fragColor = vec4(float(o_col_last.r > 0.5));\n    //float n_x_nor = 1./iResolution.x;\n    float n_x_nor = 1./o_iResolution.x;\n    //float n_y_nor = 1./iResolution.y;\n    float n_y_nor = 1./o_iResolution.y;\n\n    vec2 o_scpino = vec2(n_x_nor, n_y_nor);\n    \n    float n_index = fragCoord.y * iResolution.x + fragCoord.x;\n    \n    vec4 o_col_last_xp1yp1 = texture(iChannel0, o_trpino+vec2(1.,1.)*o_scpino);  //oox\n    vec4 o_col_last_xp1yp0 = texture(iChannel0, o_trpino+vec2(1.,0.)*o_scpino);  //o.x\n    vec4 o_col_last_xp1ym1 = texture(iChannel0, o_trpino+vec2(1.,-1.)*o_scpino); //oox\n    \n    vec4 o_col_last_xm1yp1 = texture(iChannel0, o_trpino+vec2(-1.,1.)*o_scpino); //xoo\n    vec4 o_col_last_xm1yp0 = texture(iChannel0, o_trpino+vec2(-1.,0.)*o_scpino); //x.o\n    vec4 o_col_last_xm1ym1 = texture(iChannel0, o_trpino+vec2(-1.,-1.)*o_scpino);//xoo\n    \n    vec4 o_col_last_xp0ym1 = texture(iChannel0, o_trpino+vec2(0.,-1.)*o_scpino); //oxo\n    vec4 o_col_last_xp0yp0 = texture(iChannel0, o_trpino+vec2(0.,0.)*o_scpino);  //oxo\n    vec4 o_col_last_xp0yp1 = texture(iChannel0, o_trpino+vec2(0.,1.)*o_scpino);  //oxo\n    \n    bool b_xp1yp1 = o_col_last_xp1yp1.x > 0.5;\n    bool b_xp1yp0 = o_col_last_xp1yp0.x > 0.5;\n    bool b_xp1ym1 = o_col_last_xp1ym1.x > 0.5;\n    bool b_xm1yp1 = o_col_last_xm1yp1.x > 0.5;\n    bool b_xm1yp0 = o_col_last_xm1yp0.x > 0.5;\n    bool b_xm1ym1 = o_col_last_xm1ym1.x > 0.5;\n    bool b_xp0ym1 = o_col_last_xp0ym1.x > 0.5;\n    bool b_xp0yp0 = o_col_last_xp0yp0.x > 0.5;\n    bool b_xp0yp1 = o_col_last_xp0yp1.x > 0.5;\n\n    float n_neightbors_on = \n        float(b_xp1yp1)+\n        float(b_xp1yp0)+\n        float(b_xp1ym1)+\n        float(b_xm1yp1)+\n        float(b_xm1yp0)+\n        float(b_xm1ym1)+\n        float(b_xp0ym1)+\n        float(b_xp0yp1);\n    fragColor = o_fragColor;\n\n\n    if(mod(float(iFrame), n_hz/n_fps) == 0.0){\n    \n        if(\n            (n_neightbors_on == 2. && b_xp0yp0)\n            ||\n            n_neightbors_on == 3.\n            ){\n             fragColor = vec4(1.);\n        }else{\n                fragColor = vec4(0.);\n        }\n\n\n        float n_t = iTime;\n\n\n        if(iFrame == 0){\n                fragColor = vec4(f_n_rand(o_trpino.y*o_trpino.x+o_trpino.x)-0.2);\n        }\n\n    }\n\n    if(float(iMouse.z >= 0.) != 0.){\n        float n = length(o_trpino-o_trmono);\n        n = smoothstep(0.2, 0.1, n);\n        fragColor = fragColor+vec4(n);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}