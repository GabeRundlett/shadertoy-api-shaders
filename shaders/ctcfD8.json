{
    "Shader": {
        "info": {
            "date": "1701169922",
            "description": "To distinguish the two spheres, I applied a different color to each sphere. The red ball uses red (vec3(1.0, 0.0, 0.0)), while the green ball uses green (vec3(0.0, 1.0, 0.0)).",
            "flags": 0,
            "hasliked": 0,
            "id": "ctcfD8",
            "likes": 0,
            "name": "Two of the most beautiful balls ",
            "published": 3,
            "tags": [
                "3d",
                "beginner",
                "balls",
                "nothingspecial"
            ],
            "usePreview": 0,
            "username": "Yusparkle",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n\n    vec3 lightPos = normalize(vec3(0.5, 0.5, 1.0));\n    vec3 lightIntensity = vec3(1.0);\n\n\n    vec3 redBallPos = vec3(-0.3, 0.0, 0.25);\n    vec3 greenBallPos = vec3(0.3, 0.0, 0.25);\n    float radius = 0.15;\n\n \n    vec3 color = vec3(0.0);\n\n\n    float redZ = radius * radius - (uv.x - redBallPos.x) * (uv.x - redBallPos.x) - (uv.y - redBallPos.y) * (uv.y - redBallPos.y);\n    float greenZ = radius * radius - (uv.x - greenBallPos.x) * (uv.x - greenBallPos.x) - (uv.y - greenBallPos.y) * (uv.y - greenBallPos.y);\n\n \n    if (redZ > 0.0) {\n        redZ = sqrt(redZ);\n        vec3 normal = normalize(vec3(uv.x - redBallPos.x, uv.y - redBallPos.y, redZ));\n        float diff = max(dot(normal, lightPos), 0.0);\n        float spec = pow(max(dot(reflect(-lightPos, normal), normal), 0.0), 64.0);\n        color = diff * vec3(1.0, 0.0, 0.0) + spec * lightIntensity;\n    }\n\n\n    if (greenZ > 0.0) {\n        greenZ = sqrt(greenZ);\n        vec3 normal = normalize(vec3(uv.x - greenBallPos.x, uv.y - greenBallPos.y, greenZ));\n        float diff = max(dot(normal, lightPos), 0.0);\n        float spec = pow(max(dot(reflect(-lightPos, normal), normal), 0.0), 64.0);\n        color = diff * vec3(0.0, 1.0, 0.0) + spec * lightIntensity;\n    }\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}