{
    "Shader": {
        "info": {
            "date": "1452914464",
            "description": "1 color channel gaussian pyramid blur. Mouse X to fade between blur levels.",
            "flags": 32,
            "hasliked": 0,
            "id": "Mdy3RR",
            "likes": 9,
            "name": "Gaussian Pyramid",
            "published": 3,
            "tags": [
                "blur",
                "gaussian",
                "pyramid"
            ],
            "usePreview": 1,
            "username": "cornusammonis",
            "viewed": 1224
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 vMouse = iMouse.xy / iResolution.xy;\n\n    vec4 one = vec4(1.0);\n    vec4 off = vec4(0.1);\n    vec4 b0 = vec4(texture(iChannel0, uv).yw, texture(iChannel1, uv).yw);\n    vec4 b1 = vec4(texture(iChannel2, uv).yw, texture(iChannel3, uv).yw);\n    float blurl = 7.0 * vMouse.x;\n    float bb = blurl * blurl;\n    vec4 d0 = vec4(bb, 1.0 - 2.0 * blurl + bb, 4.0 - 4.0 * blurl + bb, 9.0 - 6.0 * blurl + bb);\n    vec4 d1 = vec4(16.0 - 8.0 * blurl + bb, 25.0 - 10.0 * blurl + bb, 36.0 - 12.0 * blurl + bb, 49.0 - 14.0 * blurl + bb);\n    float n = dot(b0  / (off + d0), one) + dot(b1  / (off + d1), one);\n    float d = dot(one / (off + d0), one) + dot(one / (off + d1), one);\n    fragColor = vec4(n / d);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "#define G(ic,x) texture(ic, x)\n#define iC0 iChannel0\n#define iC1 iChannel1\n#define o0 1.0\n#define o1 1.7\n#define stddev 2.5\n\nfloat gaussian(float x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec4 gaussian(vec4 x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec2 wrap(vec2 x) {\n    return mod(mod(x, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 ix = vec2(1.0 / iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 / iResolution.y);\n    vec4 i0 = vec4(-4.0, -3.0, -2.0, -1.0);\n    vec4 i1 = vec4(1.0, 2.0, 3.0, 4.0);\n    vec4 g0 = gaussian(i0, stddev);\n    vec4 g1 = g0.wzyx;\n    float g = gaussian(0.0, stddev);\n    float sum = 2.0 * dot(g0, vec4(1.0)) + g;\n    g0 /= sum;\n    g1 /= sum;\n    g /= sum;\n\n    // 2 complete blur passes\n    vec4 leftX0  = g0 * vec4(G(iC0, wrap(uv + o0 * ix * i0.x)).x, G(iC0, wrap(uv + o0 * ix * i0.y)).x, G(iC0, wrap(uv + o0 * ix * i0.z)).x, G(iC0, wrap(uv + o0 * ix * i0.w)).x);\n    vec4 rightX0 = g1 * vec4(G(iC0, wrap(uv + o0 * ix * i1.x)).x, G(iC0, wrap(uv + o0 * ix * i1.y)).x, G(iC0, wrap(uv + o0 * ix * i1.z)).x, G(iC0, wrap(uv + o0 * ix * i1.w)).x); \n    float centerX0 = g * G(iC0, uv).x;\n    float sumX0 = centerX0 + dot(leftX0, vec4(1.0)) + dot(rightX0, vec4(1.0));\n\n    vec4 leftY0  = g0 * vec4(G(iC1, wrap(uv + o0 * iy * i0.x)).x, G(iC1, wrap(uv + o0 * iy * i0.y)).x, G(iC1, wrap(uv + o0 * iy * i0.z)).x, G(iC1, wrap(uv + o0 * iy * i0.w)).x);\n    vec4 rightY0 = g1 * vec4(G(iC1, wrap(uv + o0 * iy * i1.x)).x, G(iC1, wrap(uv + o0 * iy * i1.y)).x, G(iC1, wrap(uv + o0 * iy * i1.z)).x, G(iC1, wrap(uv + o0 * iy * i1.w)).x); \n    float centerY0 = g * G(iC1, uv).x;\n    float sumY0 = centerY0 + dot(leftY0, vec4(1.0)) + dot(rightY0, vec4(1.0));\n\n    vec4 leftX1  = g0 * vec4(G(iC1, wrap(uv + o1 * ix * i0.x)).y, G(iC1, wrap(uv + o1 * ix * i0.y)).y, G(iC1, wrap(uv + o1 * ix * i0.z)).y, G(iC1, wrap(uv + o1 * ix * i0.w)).y);\n    vec4 rightX1 = g1 * vec4(G(iC1, wrap(uv + o1 * ix * i1.x)).y, G(iC1, wrap(uv + o1 * ix * i1.y)).y, G(iC1, wrap(uv + o1 * ix * i1.z)).y, G(iC1, wrap(uv + o1 * ix * i1.w)).y); \n    float centerX1 = g * G(iC1, uv).y;\n    float sumX1 = centerX1 + dot(leftX1, vec4(1.0)) + dot(rightX1, vec4(1.0));\n\n    vec4 leftY1  = g0 * vec4(G(iC1, wrap(uv + o1 * iy * i0.x)).z, G(iC1, wrap(uv + o1 * iy * i0.y)).z, G(iC1, wrap(uv + o1 * iy * i0.z)).z, G(iC1, wrap(uv + o1 * iy * i0.w)).z);\n    vec4 rightY1 = g1 * vec4(G(iC1, wrap(uv + o1 * iy * i1.x)).z, G(iC1, wrap(uv + o1 * iy * i1.y)).z, G(iC1, wrap(uv + o1 * iy * i1.z)).z, G(iC1, wrap(uv + o1 * iy * i1.w)).z); \n    float centerY1 = g * G(iC1, uv).z;\n    float sumY1 = centerY1 + dot(leftY1, vec4(1.0)) + dot(rightY1, vec4(1.0));\n    \n    fragColor = vec4(sumX0, sumY0, sumX1, sumY1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define G(ic,x) texture(ic, x)\n#define iC0 iChannel0\n#define iC1 iChannel1\n#define o0 3.0\n#define o1 5.2\n#define stddev 2.5\n\nfloat gaussian(float x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec4 gaussian(vec4 x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec2 wrap(vec2 x) {\n    return mod(mod(x, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 ix = vec2(1.0 / iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 / iResolution.y);\n    vec4 i0 = vec4(-4.0, -3.0, -2.0, -1.0);\n    vec4 i1 = vec4(1.0, 2.0, 3.0, 4.0);\n    vec4 g0 = gaussian(i0, stddev);\n    vec4 g1 = g0.wzyx;\n    float g = gaussian(0.0, stddev);\n    float sum = 2.0 * dot(g0, vec4(1.0)) + g;\n    g0 /= sum;\n    g1 /= sum;\n    g /= sum;\n\n    // 2 complete blur passes\n    vec4 leftX0  = g0 * vec4(G(iC0, wrap(uv + o0 * ix * i0.x)).w, G(iC0, wrap(uv + o0 * ix * i0.y)).w, G(iC0, wrap(uv + o0 * ix * i0.z)).w, G(iC0, wrap(uv + o0 * ix * i0.w)).w);\n    vec4 rightX0 = g1 * vec4(G(iC0, wrap(uv + o0 * ix * i1.x)).w, G(iC0, wrap(uv + o0 * ix * i1.y)).w, G(iC0, wrap(uv + o0 * ix * i1.z)).w, G(iC0, wrap(uv + o0 * ix * i1.w)).w); \n    float centerX0 = g * G(iC0, uv).w;\n    float sumX0 = centerX0 + dot(leftX0, vec4(1.0)) + dot(rightX0, vec4(1.0));\n\n    vec4 leftY0  = g0 * vec4(G(iC1, wrap(uv + o0 * iy * i0.x)).x, G(iC1, wrap(uv + o0 * iy * i0.y)).x, G(iC1, wrap(uv + o0 * iy * i0.z)).x, G(iC1, wrap(uv + o0 * iy * i0.w)).x);\n    vec4 rightY0 = g1 * vec4(G(iC1, wrap(uv + o0 * iy * i1.x)).x, G(iC1, wrap(uv + o0 * iy * i1.y)).x, G(iC1, wrap(uv + o0 * iy * i1.z)).x, G(iC1, wrap(uv + o0 * iy * i1.w)).x); \n    float centerY0 = g * G(iC1, uv).x;\n    float sumY0 = centerY0 + dot(leftY0, vec4(1.0)) + dot(rightY0, vec4(1.0));\n\n    vec4 leftX1  = g0 * vec4(G(iC1, wrap(uv + o1 * ix * i0.x)).y, G(iC1, wrap(uv + o1 * ix * i0.y)).y, G(iC1, wrap(uv + o1 * ix * i0.z)).y, G(iC1, wrap(uv + o1 * ix * i0.w)).y);\n    vec4 rightX1 = g1 * vec4(G(iC1, wrap(uv + o1 * ix * i1.x)).y, G(iC1, wrap(uv + o1 * ix * i1.y)).y, G(iC1, wrap(uv + o1 * ix * i1.z)).y, G(iC1, wrap(uv + o1 * ix * i1.w)).y); \n    float centerX1 = g * G(iC1, uv).y;\n    float sumX1 = centerX1 + dot(leftX1, vec4(1.0)) + dot(rightX1, vec4(1.0));\n\n    vec4 leftY1  = g0 * vec4(G(iC1, wrap(uv + o1 * iy * i0.x)).z, G(iC1, wrap(uv + o1 * iy * i0.y)).z, G(iC1, wrap(uv + o1 * iy * i0.z)).z, G(iC1, wrap(uv + o1 * iy * i0.w)).z);\n    vec4 rightY1 = g1 * vec4(G(iC1, wrap(uv + o1 * iy * i1.x)).z, G(iC1, wrap(uv + o1 * iy * i1.y)).z, G(iC1, wrap(uv + o1 * iy * i1.z)).z, G(iC1, wrap(uv + o1 * iy * i1.w)).z); \n    float centerY1 = g * G(iC1, uv).z;\n    float sumY1 = centerY1 + dot(leftY1, vec4(1.0)) + dot(rightY1, vec4(1.0));\n    \n    fragColor = vec4(sumX0, sumY0, sumX1, sumY1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define G(ic,x) texture(ic, x)\n#define iC0 iChannel0\n#define iC1 iChannel1\n#define o0 9.0\n#define o1 15.6\n#define stddev 2.5\n\nfloat gaussian(float x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec4 gaussian(vec4 x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec2 wrap(vec2 x) {\n    return mod(mod(x, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 ix = vec2(1.0 / iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 / iResolution.y);\n    vec4 i0 = vec4(-4.0, -3.0, -2.0, -1.0);\n    vec4 i1 = vec4(1.0, 2.0, 3.0, 4.0);\n    vec4 g0 = gaussian(i0, stddev);\n    vec4 g1 = g0.wzyx;\n    float g = gaussian(0.0, stddev);\n    float sum = 2.0 * dot(g0, vec4(1.0)) + g;\n    g0 /= sum;\n    g1 /= sum;\n    g /= sum;\n\n    // 2 complete blur passes\n    vec4 leftX0  = g0 * vec4(G(iC0, wrap(uv + o0 * ix * i0.x)).w, G(iC0, wrap(uv + o0 * ix * i0.y)).w, G(iC0, wrap(uv + o0 * ix * i0.z)).w, G(iC0, wrap(uv + o0 * ix * i0.w)).w);\n    vec4 rightX0 = g1 * vec4(G(iC0, wrap(uv + o0 * ix * i1.x)).w, G(iC0, wrap(uv + o0 * ix * i1.y)).w, G(iC0, wrap(uv + o0 * ix * i1.z)).w, G(iC0, wrap(uv + o0 * ix * i1.w)).w); \n    float centerX0 = g * G(iC0, uv).w;\n    float sumX0 = centerX0 + dot(leftX0, vec4(1.0)) + dot(rightX0, vec4(1.0));\n\n    vec4 leftY0  = g0 * vec4(G(iC1, wrap(uv + o0 * iy * i0.x)).x, G(iC1, wrap(uv + o0 * iy * i0.y)).x, G(iC1, wrap(uv + o0 * iy * i0.z)).x, G(iC1, wrap(uv + o0 * iy * i0.w)).x);\n    vec4 rightY0 = g1 * vec4(G(iC1, wrap(uv + o0 * iy * i1.x)).x, G(iC1, wrap(uv + o0 * iy * i1.y)).x, G(iC1, wrap(uv + o0 * iy * i1.z)).x, G(iC1, wrap(uv + o0 * iy * i1.w)).x); \n    float centerY0 = g * G(iC1, uv).x;\n    float sumY0 = centerY0 + dot(leftY0, vec4(1.0)) + dot(rightY0, vec4(1.0));\n\n    vec4 leftX1  = g0 * vec4(G(iC1, wrap(uv + o1 * ix * i0.x)).y, G(iC1, wrap(uv + o1 * ix * i0.y)).y, G(iC1, wrap(uv + o1 * ix * i0.z)).y, G(iC1, wrap(uv + o1 * ix * i0.w)).y);\n    vec4 rightX1 = g1 * vec4(G(iC1, wrap(uv + o1 * ix * i1.x)).y, G(iC1, wrap(uv + o1 * ix * i1.y)).y, G(iC1, wrap(uv + o1 * ix * i1.z)).y, G(iC1, wrap(uv + o1 * ix * i1.w)).y); \n    float centerX1 = g * G(iC1, uv).y;\n    float sumX1 = centerX1 + dot(leftX1, vec4(1.0)) + dot(rightX1, vec4(1.0));\n\n    vec4 leftY1  = g0 * vec4(G(iC1, wrap(uv + o1 * iy * i0.x)).z, G(iC1, wrap(uv + o1 * iy * i0.y)).z, G(iC1, wrap(uv + o1 * iy * i0.z)).z, G(iC1, wrap(uv + o1 * iy * i0.w)).z);\n    vec4 rightY1 = g1 * vec4(G(iC1, wrap(uv + o1 * iy * i1.x)).z, G(iC1, wrap(uv + o1 * iy * i1.y)).z, G(iC1, wrap(uv + o1 * iy * i1.z)).z, G(iC1, wrap(uv + o1 * iy * i1.w)).z); \n    float centerY1 = g * G(iC1, uv).z;\n    float sumY1 = centerY1 + dot(leftY1, vec4(1.0)) + dot(rightY1, vec4(1.0));\n    \n    fragColor = vec4(sumX0, sumY0, sumX1, sumY1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define G(ic,x) texture(ic, x)\n#define iC0 iChannel0\n#define iC1 iChannel1\n#define o0 27.0\n#define o1 46.8\n#define stddev 2.5\n\nfloat gaussian(float x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec4 gaussian(vec4 x, float s) {\n    return exp(-x*x/(s*s));\n}\n\nvec2 wrap(vec2 x) {\n    return mod(mod(x, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 ix = vec2(1.0 / iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 / iResolution.y);\n    vec4 i0 = vec4(-4.0, -3.0, -2.0, -1.0);\n    vec4 i1 = vec4(1.0, 2.0, 3.0, 4.0);\n    vec4 g0 = gaussian(i0, stddev);\n    vec4 g1 = g0.wzyx;\n    float g = gaussian(0.0, stddev);\n    float sum = 2.0 * dot(g0, vec4(1.0)) + g;\n    g0 /= sum;\n    g1 /= sum;\n    g /= sum;\n\n    // 2 complete blur passes\n    vec4 leftX0  = g0 * vec4(G(iC0, wrap(uv + o0 * ix * i0.x)).w, G(iC0, wrap(uv + o0 * ix * i0.y)).w, G(iC0, wrap(uv + o0 * ix * i0.z)).w, G(iC0, wrap(uv + o0 * ix * i0.w)).w);\n    vec4 rightX0 = g1 * vec4(G(iC0, wrap(uv + o0 * ix * i1.x)).w, G(iC0, wrap(uv + o0 * ix * i1.y)).w, G(iC0, wrap(uv + o0 * ix * i1.z)).w, G(iC0, wrap(uv + o0 * ix * i1.w)).w); \n    float centerX0 = g * G(iC0, uv).w;\n    float sumX0 = centerX0 + dot(leftX0, vec4(1.0)) + dot(rightX0, vec4(1.0));\n    \n    vec4 leftY0  = g0 * vec4(G(iC1, wrap(uv + o0 * iy * i0.x)).x, G(iC1, wrap(uv + o0 * iy * i0.y)).x, G(iC1, wrap(uv + o0 * iy * i0.z)).x, G(iC1, wrap(uv + o0 * iy * i0.w)).x);\n    vec4 rightY0 = g1 * vec4(G(iC1, wrap(uv + o0 * iy * i1.x)).x, G(iC1, wrap(uv + o0 * iy * i1.y)).x, G(iC1, wrap(uv + o0 * iy * i1.z)).x, G(iC1, wrap(uv + o0 * iy * i1.w)).x); \n    float centerY0 = g * G(iC1, uv).x;\n    float sumY0 = centerY0 + dot(leftY0, vec4(1.0)) + dot(rightY0, vec4(1.0));\n\n    vec4 leftX1  = g0 * vec4(G(iC1, wrap(uv + o1 * ix * i0.x)).y, G(iC1, wrap(uv + o1 * ix * i0.y)).y, G(iC1, wrap(uv + o1 * ix * i0.z)).y, G(iC1, wrap(uv + o1 * ix * i0.w)).y);\n    vec4 rightX1 = g1 * vec4(G(iC1, wrap(uv + o1 * ix * i1.x)).y, G(iC1, wrap(uv + o1 * ix * i1.y)).y, G(iC1, wrap(uv + o1 * ix * i1.z)).y, G(iC1, wrap(uv + o1 * ix * i1.w)).y); \n    float centerX1 = g * G(iC1, uv).y;\n    float sumX1 = centerX1 + dot(leftX1, vec4(1.0)) + dot(rightX1, vec4(1.0));\n\n    vec4 leftY1  = g0 * vec4(G(iC1, wrap(uv + o1 * iy * i0.x)).z, G(iC1, wrap(uv + o1 * iy * i0.y)).z, G(iC1, wrap(uv + o1 * iy * i0.z)).z, G(iC1, wrap(uv + o1 * iy * i0.w)).z);\n    vec4 rightY1 = g1 * vec4(G(iC1, wrap(uv + o1 * iy * i1.x)).z, G(iC1, wrap(uv + o1 * iy * i1.y)).z, G(iC1, wrap(uv + o1 * iy * i1.z)).z, G(iC1, wrap(uv + o1 * iy * i1.w)).z); \n    float centerY1 = g * G(iC1, uv).z;\n    float sumY1 = centerY1 + dot(leftY1, vec4(1.0)) + dot(rightY1, vec4(1.0));\n    \n    fragColor = vec4(sumX0, sumY0, sumX1, sumY1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}