{
    "Shader": {
        "info": {
            "date": "1607508890",
            "description": "Based on the shaders of the excellent article 'Cameras and Lenses' by @BCiechanowski: [URL]https://ciechanow.ski/cameras-and-lenses[/URL]. Use your mouse to focus.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdyBRV",
            "likes": 59,
            "name": "Cameras and Lenses",
            "published": 3,
            "tags": [
                "dof",
                "aperture",
                "cameras",
                "lenses"
            ],
            "usePreview": 0,
            "username": "reinder",
            "viewed": 1840
        },
        "renderpass": [
            {
                "code": "// Cameras and Lenses. Created by Reinder Nijhoff 2020\n// https://www.shadertoy.com/view/wdyBRV\n//\n// Based on the shaders of the excellent article 'Cameras and Lenses' by \n// @BCiechanowski: https://ciechanow.ski/cameras-and-lenses/\n//\n\nconst float aperture = 0.15;\n\nvec2 hash2(float n) {\n\treturn fract(n * vec2(0.754878, 0.56984));\n}\n\nvec2 random_in_unit_disk(float seed) {\n    vec2 h = hash2(seed) * vec2(1.,6.28318530718);\n\treturn sqrt(h.x) * vec2(sin(h.y),cos(h.y));\n}\n\n// https://www.shadertoy.com/view/4d2XWV by Inigo Quilez\nfloat sphere_intersect(vec3 ro, vec3 rd, vec4 sph) {\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nvec4 render(vec3 ro, vec3 rd) {\n    vec3 color = vec3(0.94);\n\n    // sphere positions and sphere colors\n    const vec4 s0 = vec4(0.7, 0.7, 0.3, 0.3);\n    const vec4 s1 = vec4(-0.7, -0.7, 0.5, 0.5);\n    const vec3 c0 = vec3(1.0, 0.1, 0.05);\n    const vec3 c1 = vec3(0.1, 0.8, 0.05);\n\n    vec4 sphere = rd.y > 0.0 ? s0 : s1;\n\n    float dist = sphere_intersect(ro, rd, sphere);\n    if (dist > 0.0) { // spheres\n        float diff = 0.5 + 0.5 * normalize(ro + rd * dist - sphere.xyz).z;\n        color = ( rd.y > 0.0 ? c0 : c1) * sqrt(diff);\n    }\n    else if (rd.z < 0.0) { // plane\n        dist = -ro.z / rd.z;\n        vec2 pos = ro.xy + rd.xy * dist;\n\n        if (abs(pos.x) < 2. && abs(pos.y) < 2.) {\n            // checker pattern\n            vec2  fpos = floor(pos * 2.0);\n            float s = mod(fpos.x + fpos.y, 2.0) > 0.5 ? 0.54 : 0.66;\n            \n            // fake ambient occlusion\n            vec2  d0 = pos - s0.xy;\n            float f0 = 12.0 * dot(d0, d0);\n            vec2  d1 = pos - s1.xy;\n            float f1 = 5.0 * dot(d1, d1);\n            float f = (f0*f1 - 1.0) / ((f0 + 1.0)*(f1 + 1.0));\n\n            color = vec3(f * s);\n        }\n    }\n    return vec4(color, clamp(dist, 1.5, 3.7));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float seed = fract(sin(dot(fragCoord.xy, vec2(1234.0, 5134.0))));\n    \n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(2.7, 0, 0.7);\n    vec3 color = vec3(0.0);\n\n\tvec3  focusrd = normalize(vec3(-1., 0.6 * (iMouse.xy*2.-iResolution.xy)/iResolution.y));\n\tfloat focusingDistance = iMouse.x > 0. ? abs((ro + focusrd * render(ro, focusrd).w).x - ro.x) : 2.;\n      \n    for (float x = 0.0; x <= 6.0; x += 1.) {\n        for (float y = 0.0; y <= 6.0; y += 1.) {\n            vec2 offset = random_in_unit_disk(seed + x + 5.0 * y) * aperture;\n            vec2 aa     = vec2(x - 2.5, y - 2.5) * (0.4 / iResolution.y);\n            \n            vec3 rd = normalize(vec3(-focusingDistance, (uv + aa) * focusingDistance * 0.6 + offset));\n    \n            color += render(ro - vec3(0.0, offset), rd).rgb;\n        }\n    }\n \n    color *= (1.0/36.);\n    \n    fragColor = vec4(pow(color.rgb, vec3(0.45454)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}