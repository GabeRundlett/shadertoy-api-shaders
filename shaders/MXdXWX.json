{
    "Shader": {
        "info": {
            "date": "1719713578",
            "description": "Making it 3D now, using the timing lerp to flip and raise the boxes. \n4 tap map loop from @Shane",
            "flags": 0,
            "hasliked": 0,
            "id": "MXdXWX",
            "likes": 22,
            "name": "Byt3-daily-004",
            "published": 3,
            "tags": [
                "raymarching",
                "cube",
                "reflections",
                "lerp"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Making it 3D now, using the timing lerp to flip and raise the boxes.\n    \n    4 tap map loop from @Shane\n    \n    Byt3-daily-004\n    06/29/2024  @byt3_m3chanic\n    \n*/\n\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI  3.141592653\n#define PI2 6.283185307\n\n#define MIN_DIST 1e-3\n#define MAX_DIST 40.\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat lsp(float b, float e, float t) { return clamp((t - b) / (e - b), 0., 1.); }\nfloat eoc(float t) { return t = --t * t * t + 1.; }\n\nfloat box(vec3 p, vec3 b){\n    vec3 d = abs(p)-b;\n    return length(max(d,0.))+min(max(d.x,max(d.y,d.z)),.0);\n}\n\n//globals\nvec3 s_hit, g_hit;\nvec2 s_id, g_id;\nmat2 mx, my;\n\n//scales for all things\nconst float scale = 1./.5;\nconst float scale_h = scale*.5;\nconst vec2 s = vec2(scale)*2.;\n\n//positions and rotations\nconst vec2 pos = vec2(.5,-.5);\nconst vec2[4] ps4 = vec2[4](pos.yx,pos.xx,pos.xy,pos.yy);\n\n// block map -v4 tap technique from @Shane\nvec2 map(vec3 q3){\n\n    vec2 res = vec2(1e5,0.);\n    vec2 p,ip,id = vec2(0),ct = vec2(0);\n\n    float t=1e5, y=1e5, m=1.;\n\n    for(int i =0; i<4; i++){\n    \n        ct = ps4[i]/2. -  ps4[0]/2.;\n        p = q3.xz - ct*s;\n        ip = floor(p/s) + .5;\n        p -= (ip)*s;\n        vec2 idi = (ip + ct)*s;\n \n        float rnd = mod(idi.x,10.); \n              rnd+=(mod(idi.y,10.)*10.)*.15;\n        float tmod = mod(T, 24.); \n\n        //movement\n        float t3 = lsp(rnd, rnd+1., tmod);\n        t3 = eoc(t3); t3 = t3*t3*t3;\n        float t4 = lsp(rnd+1., rnd+2., tmod);\n        t4 = eoc(t4); t4 = t4*t4*t4;\n        float t5 = lsp(rnd+2., rnd+3., tmod);\n        t5 = eoc(t5); t5 = t5*t5*t5;\n        float t6 = lsp(rnd+3., rnd+4., tmod);\n        t6 = eoc(t6); t6 = t6*t6*t6;\n            \n        float xx = scale*(t3-t5);  \n        float yy = scale*(t4-t6); \n\n        vec3 q = vec3(p.x,q3.y-yy-xx,p.y);\n        mat2 rmx=rot((t3-t5)*PI);\n        mat2 rmy=rot((t4-t6)*PI);\n        \n        q.xy*=rmx;\n        q.zy*=rmy;\n\n        float b = box(q,vec3(scale*.385))-.065;\n        if(b<t ) {\n            t = b;\n            m = mod(float(i),2.)<1.? 5.:4.;\n            s_id = idi;\n            s_hit = q+(idi.xyx*vec3(.25)+float(i));\n            mx=rmx;\n            my=rmy;\n        }\n    }\n    \n\tif(t<res.x) res = vec2(t,m);\n\n    float f = q3.y+1.5;\n    if (f<res.x) {\n        res = vec2(f,2.);\n        s_hit = q3;\n    }\n    \n    return res;\n}\n\nvec3 normal(vec3 p, float t)\n{\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\nvec4 FC = vec4(.17,.14,.11,0.);\n\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last, inout float d) {\n\n    vec3 C = vec3(0);\n    float m = 0.;\n    vec3 p = ro;\n    // marcher\n    for(int i=0;i<132;i++) {\n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST)break;\n        d += i<32? ray.x*.25: ray.x*.75;\n        m  = ray.y;\n    } \n    g_hit = s_hit;\n    g_id = s_id;\n    \n    float alpha = 0.;\n    if(d<MAX_DIST)\n    {\n        vec3 n = normal(p,d);\n        vec3 lpos =  vec3(-5,8,0);\n        vec3 l = normalize(lpos);\n\n        float diff = clamp(dot(n,l),0.,1.);\n        \n        int face;\n        vec3 cuv = s_hit;\n           \n        if(m>2.) {\n            // quick find the correct face with normal\n            vec3 tn = n;\n            tn.xy*=mx;\n            tn.zy*=my;\n            vec3 aN = abs(tn);\n            ivec3 idF = ivec3(tn.x<-.25? 0 : 5, tn.y<-.25? 1 : 4, tn.z<-.25? 2 : 3);\n            face = aN.x>.5? idF.x : aN.y>.5? idF.y : idF.z;\n\n            if(face==0||face==5) cuv = s_hit.yzx;\n            if(face==1||face==4) cuv = s_hit.xzy+vec3(.5);\n            if(face==2||face==3) cuv = s_hit.xyz-vec3(.5);\n        }\n        \n        vec3 h = vec3(.15);\n\n        if( m==5.) {\n            h = texture(iChannel0,cuv.xy).rgb*vec3(.9,.4,.1);\n            ref = h;\n        }\n        if( m==4.) {\n            h = texture(iChannel1,cuv.xy*.25).rgb;\n            ref = h;\n        }\n        \n        if( m==2.) {\n            vec2 uv = fract(g_hit.xz*3.)-.5;\n            if(uv.x*uv.y>0.) h = vec3(.4);\n            ref=h;\n        }\n\n        float shdw = 1.;\n        for( float t=.01; t < 10.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 18.*h/t);\n            t += h;\n            if( shdw<MIN_DIST || t>18. ) break;\n        }\n        diff = mix(diff,diff*shdw,.65);\n\n        vec3 ret = reflect(normalize(lpos), n);\n        float spec = .5 * pow(max(dot(normalize(p-ro), ret), 0.), 14.);\n\n        C = h*diff+min(spec,shdw);\n        if(last) C = mix(FC.rgb,C,  exp(-.0025*d*d*d));\n    \n        ro = p+n*1e-3;\n        rd = reflect(rd,n);\n    \n    }else{\n        C = FC.rgb;\n    } \n    return vec4(C,alpha);\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n\n    //ray origin - direction\n    vec3 ro = vec3(0,0,12);\n    vec3 rd = normalize(vec3(uv, -1));\n\n    // mouse //\n    float x = M.xy==vec2(0)||M.z<0. ? .1+.08*sin(T*.35) : -(M.y/R.y*.25-.125)*PI;\n    float y = M.xy==vec2(0)||M.z<0. ? .1*cos(T*.15) : -(M.x/R.x*2.-1.)*PI;\n    \n    mat2 rx =rot(-.92+x);\n    mat2 ry =rot(.78+y);\n    \n    ro.zy*=rx;rd.zy*=rx;\n    ro.xz*=ry;rd.xz*=ry;\n   \n    ro.z+=T;\n\n    vec3 C = vec3(0),ref=vec3(0),fil=vec3(1);\n    \n    float d = 0.,a = 0.;\n\n    float numBounces = 2.;//3 ok on 4090 - slower on mac m3\n    \n    for(float i=0.; i<numBounces; i++) {\n        d =0.;\n        vec4 pass = render(ro, rd, ref, i==numBounces-1., d);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.) a = d;\n    }\n\n    C = mix(FC.rgb,C,  exp(-.0002*a*a*a));\n    O = vec4(pow(C, vec3(.4545)),1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}