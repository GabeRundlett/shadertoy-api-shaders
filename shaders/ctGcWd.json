{
    "Shader": {
        "info": {
            "date": "1700773737",
            "description": "Projected a Mercator earth map on sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "ctGcWd",
            "likes": 0,
            "name": "Mercator Earth Sphere Projection",
            "published": 3,
            "tags": [
                "sphere",
                "earth",
                "map",
                "projection",
                "mercator"
            ],
            "usePreview": 1,
            "username": "Peace",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "// Note: you can use actual world map SDF texture\n\nconst float PI = 3.14159265358;\n\nvec2 getCoord(vec2 uv, float z) {\n    vec2 coord = vec2(atan(z, uv.x) * 0.5, acos(-uv.y)) / PI;\n    coord.x += iTime * 0.1;\n    return coord;\n}\n\nvec3 sampleTex(vec2 uv, vec3 norm, float mr) {\n    const vec3 OUTLINE_COLOR = vec3(0.5, 0.4, 0.25);\n    const vec3 LAND_COLOR = vec3(0.7, 1, 0.6);\n    const vec3 DOT_COLOR = vec3(1);\n    const vec3 OCEAN_COLOR = vec3(0.3, 0.5, 1.0);\n    const vec3 FRESNEL_COLOR = vec3(0.15, 0.2, 0.5) * 0.5;\n    const float FRESNEL_POWER = 3.;\n    const float GRID = 128.;\n\n    float d = texture(iChannel0, uv).r;\n    vec3 col = vec3(0);\n    \n    // Outline\n    const float w = 0.05;\n    col += smoothstep(w, max(0.0, w - 16. / mr), abs(d - 0.5)) * OUTLINE_COLOR; \n    \n    // Land\n    col += smoothstep(0.5, 0.6, d) * 0.2 * LAND_COLOR;\n    \n    // Dots\n    float gd = texture(iChannel0, vec2(ivec2(uv * GRID)) / GRID + .5 / GRID).r;\n    vec2 guv = fract(uv * GRID) * 2. - 1.;\n    float dots = max(0.0, smoothstep(0.7, 0.3, length(guv * vec2(iResolution.x / iResolution.y, 1)))) * 0.3;\n    dots *= gd > 0.6 ? 1.0 : 0.0;\n    col += dots * DOT_COLOR;\n    \n    // Oceans\n    col += smoothstep(0.6, 0.5, d) * 0.08 * OCEAN_COLOR;\n\n    // Fresnel\n    float fresnel = pow(max(0.0, dot(norm.xy, norm.xy) - norm.z * norm.z), FRESNEL_POWER);\n    col = mix(col, FRESNEL_COLOR + fresnel * fresnel * length(FRESNEL_COLOR) * 0.3, fresnel);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mr = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / mr * 1.2;\n    vec3 col = vec3(0);\n\tfragColor = vec4(col, 1.0);\n    \n    float l = dot(uv, uv);\n    if (l > 1.0) \n        discard;\n\n    float z = -sqrt(1.0 - l);\n    \n    vec3 front = sampleTex(getCoord(uv, z), vec3(uv, z), mr).rgb;\n    vec3 back = sampleTex(getCoord(uv, -z), vec3(uv, -z), mr).rgb;\n    \n    float s = smoothstep(1.0, 1.0 - length(fwidth(uv)), sqrt(l));\n    col = (front * 0.7 + 0.3 * back) * s;\n \n\tfragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}