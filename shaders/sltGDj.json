{
    "Shader": {
        "info": {
            "date": "1636766055",
            "description": "Demosplash 2021\n5th place for the combined demo/intro category (https://www.pouet.net/prod.php?which=90296)\nBased on: https://www.nature.com/articles/s41467-019-12367-3\n",
            "flags": 32,
            "hasliked": 0,
            "id": "sltGDj",
            "likes": 8,
            "name": "democapsid",
            "published": 3,
            "tags": [
                "3d",
                "hexagon",
                "tetrahedron",
                "scroll",
                "icosahedron",
                "octahedron",
                "polyhedra",
                "virus",
                "demosplash",
                "2021",
                "capsid",
                "casparklug"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // set resolution\n    vec2 uv = fragCoord / iResolution.y;\n\n    // scene parameters\n    Scene scene = frame_to_scene(iFrame);\n\n    // lattice parameters\n    int m = scene.m;\n    float h = float(scene.h);\n    float k = float(scene.k);\n    Params p = mode_to_params(m, h, k);\n\n    /****/ if (iFrame < checkpoints[0]) {\n        vec2 uv = fragCoord / iResolution.y;\n        float R = 1.0 / 18.0;\n        float r = R * cos30;\n        float B = R * 0.125;\n        float off = floor(iTime / 0.1) * 2.0 * r;\n        vec3 col = (\n            in_reg(uv, uv_to_hex_R(uv, R), 6.0, R - B, radians(30.0)) ?\n            vec3(0.25) :\n            cos(iTime + uv.xyx) * vec3(0, 1, 1)\n        );\n        uv.x += off;\n        float dx = 2.0 * r;\n        float dy = 1.5 * R;\n        vec2 hex = uv_to_hex_R(uv, R);\n        float ir = round(hex.y / dy);\n        float ic = round((hex.x - ir * r) / dx / 5.0);\n        float code = message[int(mod(ic, float(message.length())))];\n        col = hex_display(uv, vec2(5.0 * ic * dx + 2.0 * dx, 0.5), code, R, B, col, false);\n        fragColor = vec4(col, 1);\n    } else if (iFrame < checkpoints[1]) {\n        fragColor = T(iChannel0, fragCoord / iResolution.xy);\n    } else if (iFrame < checkpoints[6]) {\n        // center\n        uv -= vec2(iResolution.x / iResolution.y / 2.0, 0.5);\n\n        // calculate vertex coordinates\n        vec2 t1 = mat2(p.hvec, p.kvec) * vec2(h, k);\n        vec2 t2 = rotmat2(rad60) * t1;\n        t1.x /= iResolution.x / iResolution.y;\n        t2.x /= iResolution.x / iResolution.y;\n        // triangular face\n        mat3 X = mat3(\n            0, 0, 1,\n            t1.x, t1.y, 1,\n            t2.x, t2.y, 1\n        );\n\n        // https://en.wikipedia.org/wiki/Camera_matrix\n        // https://www.cs.cmu.edu/~16385/s17/Slides/11.1_Camera_matrix.pdf\n        mat3 K = mat3(scene.z);                     // calibration\n        vec3 C = vec3(0);                           // translation\n        mat3 Q = rotmat3(                           // rotation\n            vec3(\n                radians(mod(iTime * float(scene.r), 360.0) * 10.0),\n                radians(mod(iTime * float(scene.r), 360.0) * 15.0),\n                radians(mod(iTime * float(scene.r), 360.0) * 20.0)\n            )\n        );\n        mat4x3 IC = mat4x3(mat3(1));\n        IC[3] = -C;\n        mat4x3 P = (K * Q) * IC;                    // projection\n\n        vec3 col = vec3(0);\n\n        int n = 0;       // n-th color\n        vec3[20] c;      // color value\n        float[20] z;     // color depth\n        int nf = 20;     // number of faces\n        switch (scene.p) {\n            case TET:\n                nf = 4;\n                break;\n            case OCT:\n                nf = 8;\n                break;\n            case ICO:\n                nf = 20;\n                break;\n        }\n        for (int i = 0; i < nf; i++)\n        {\n            // map face\n            vec3 q1, q2, q3;\n            switch (scene.p) {\n                case TET:\n                    q1 = P * TET_V[int(TET_F[i].x)]; q2 = P * TET_V[int(TET_F[i].y)]; q3 = P * TET_V[int(TET_F[i].z)];\n                    break;\n                case OCT:\n                    q1 = P * OCT_V[int(OCT_F[i].x)]; q2 = P * OCT_V[int(OCT_F[i].y)]; q3 = P * OCT_V[int(OCT_F[i].z)];\n                    break;\n                case ICO:\n                    q1 = P * ICO_V[int(ICO_F[i].x)]; q2 = P * ICO_V[int(ICO_F[i].y)]; q3 = P * ICO_V[int(ICO_F[i].z)];\n                    break;\n            }\n            if (in_tri(uv, q1.xy, q2.xy, q3.xy))\n            {\n                mat3 A = mat3(\n                    q1.x, q1.y, 1,\n                    q2.x, q2.y, 1,\n                    q3.x, q3.y, 1\n                );\n                // face centroid depth\n                z[n] = ((q1 + q2 + q3) / 3.0).z;\n                // https://stackoverflow.com/a/55550712\n                // map lattice texture to face\n                vec3 iv = X * inverse(A) * vec3(uv.x, uv.y, 1);\n                iv.x -= t2.x < 0.0 ? t2.x : 0.0;\n                c[n] = mix(texture(iChannel0, iv.xy).xyz, vec3(0), -z[n]);\n                n += 1;\n            }\n        }\n\n        // painter's algorithm\n        int i = 1;\n        while (i < n) {\n            float x = z[i];\n            vec3 X = c[i];\n            int j = i - 1;\n            while (j >= 0 && z[j] > x) {\n                z[j+1] = z[j];\n                c[j+1] = c[j];\n                j = j - 1;\n            }\n            z[j+1] = x;\n            c[j+1] = X;\n            i = i + 1;\n        }\n        for (int i = 0; i < n; i++) col = mix(col, c[i], scene.a);\n\n        fragColor = vec4(col, 1);\n    } else { \n        vec2 uv = fragCoord / iResolution.y;\n        float R = 1.0 / 32.0;\n        float r = R * cos30;\n        float B = R * WIDTH;\n        vec2 hex = uv_to_hex_R(uv, R);\n\n        vec3 col = (\n            in_reg(uv, hex, 6.0, R - B, rad30) ?\n            vec3(0) :\n            0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4))\n        );\n\n        int ir = int(round(hex.y / (1.5 * R)));\n        int ic = int(round((hex.x - mod(float(ir), 2.0) * r) / (2.0 * r)));\n        if (ir < img_m && ic < img_n)\n            if (img2[15 * ir + ic] == 1)\n                if (in_reg(uv, hex, 6.0, R - B, rad30))\n                    col = COLOR_ON;\n\n        fragColor = vec4(col, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// math\n#define phi (1.0 + sqrt(5.0)) / 2.0\n#define rad30 radians(30.0)\n#define rad60 radians(60.0)\n#define rad90 radians(90.0)\n#define cos30 cos(rad30)\n#define sqrt3 sqrt(3.0)\n\n// alias\n#define T texture\n\n// lattice pattern\n#define MODE_HEX              0\n#define MODE_TRIHEX           1\n#define MODE_SNUBHEX          2\n#define MODE_RHOMBITRIHEX     3\n#define MODE_DUALHEX          4\n#define MODE_DUALTRIHEX       5\n#define MODE_DUALSNUBHEX      6\n#define MODE_DUALRHOMBITRIHEX 7\n\n// border width factor\n#define WIDTH 0.05\n\n// colors\n#define COLOR_BACKGROUND vec3( 31, 120, 180) / 255.0\n#define COLOR_FACE       vec3(178, 223, 138) / 255.0\n#define COLOR_VERTEX     vec3( 51, 160,  44) / 255.0\n#define COLOR_TRIANGLE   vec3(166, 206, 227) / 255.0\n#define COLOR_LINE       vec3(166, 206, 227) / 255.0\n#define COLOR_ON         vec3(117, 107, 177) / 255.0\n\n// Caspar-Klug parameters\n// #define h 16.0\n// #define k 16.0\n// #define m MODE_HEX\n\n// polyhedra\n//// constants\n#define TET 0\n#define OCT 1\n#define ICO 2\n//// tetrahedron\n////// radius\n#define TET_R 0.25\n////// vertexes\n#define TET_V vec4[] (               \\\n    vec4(+TET_R, +TET_R, +TET_R, 1), \\\n    vec4(-TET_R, +TET_R, -TET_R, 1), \\\n    vec4(+TET_R, -TET_R, -TET_R, 1), \\\n    vec4(-TET_R, +TET_R, -TET_R, 1), \\\n    vec4(-TET_R, -TET_R, +TET_R, 1), \\\n    vec4(+TET_R, -TET_R, -TET_R, 1)  \\\n)                                    \\\n////// faces\n#define TET_F vec3[] ( \\\n    vec3(0, 1, 2),     \\\n    vec3(1, 4, 2),     \\\n    vec3(0, 2, 4),     \\\n    vec3(0, 4, 1)      \\\n)                      \\\n//// octahedron\n////// radius\n#define OCT_RADIUS 0.85\n#define OCT_A      1.0 / (2.0 * sqrt(2.0)) * OCT_RADIUS\n#define OCT_B      0.5 * OCT_RADIUS\n////// vertexes\n#define OCT_V vec4[] (          \\\n    vec4(-OCT_A, 0, +OCT_A, 1), \\\n    vec4(-OCT_A, 0, -OCT_A, 1), \\\n    vec4(0, +OCT_B, 0, 1),      \\\n    vec4(+OCT_A, 0, -OCT_A, 1), \\\n    vec4(+OCT_A, 0, +OCT_A, 1), \\\n    vec4(0, -OCT_B, 0, 1)       \\\n)                               \\\n////// faces\n#define OCT_F vec3[] ( \\\n    vec3(0, 1, 2),     \\\n    vec3(1, 3, 2),     \\\n    vec3(3, 4, 2),     \\\n    vec3(4, 0, 2),     \\\n    vec3(3, 1, 5),     \\\n    vec3(1, 0, 5),     \\\n    vec3(4, 3, 5),     \\\n    vec3(0, 4, 5)      \\\n)                      \\\n//// icosahedron\n////// radius\n#define ICO_RADIUS 0.85\n#define ICO_A      0.5 * ICO_RADIUS\n#define ICO_B      1.0 / (2.0 * phi) * ICO_RADIUS\n////// vertexes\n#define ICO_V vec4[] (      \\\nvec4(0, +ICO_B, -ICO_A, 1), \\\nvec4(+ICO_B, +ICO_A, 0, 1), \\\nvec4(-ICO_B, +ICO_A, 0, 1), \\\nvec4(0, +ICO_B, +ICO_A, 1), \\\nvec4(0, -ICO_B, +ICO_A, 1), \\\nvec4(-ICO_A, 0, +ICO_B, 1), \\\nvec4(0, -ICO_B, -ICO_A, 1), \\\nvec4(+ICO_A, 0, -ICO_B, 1), \\\nvec4(+ICO_A, 0, +ICO_B, 1), \\\nvec4(-ICO_A, 0, -ICO_B, 1), \\\nvec4(+ICO_B, -ICO_A, 0, 1), \\\nvec4(-ICO_B, -ICO_A, 0, 1)  \\\n)                           \\\n////// faces\n#define ICO_F vec3[] (  \\\n    vec3( 0,  1,  2),   \\\n    vec3( 3,  2,  1),   \\\n    vec3( 3,  4,  5),   \\\n    vec3( 3,  8,  4),   \\\n    vec3( 0,  6,  7),   \\\n    vec3( 0,  9,  6),   \\\n    vec3( 4, 10, 11),   \\\n    vec3( 6, 11, 10),   \\\n    vec3( 2,  5,  9),   \\\n    vec3(11,  9,  5),   \\\n    vec3( 1,  7,  8),   \\\n    vec3(10,  8,  7),   \\\n    vec3( 3,  5,  2),   \\\n    vec3( 3,  1,  8),   \\\n    vec3( 0,  2,  9),   \\\n    vec3( 0,  7,  1),   \\\n    vec3( 6,  9, 11),   \\\n    vec3( 6, 10,  7),   \\\n    vec3( 4, 11,  5),   \\\n    vec3( 4,  8, 10)    \\\n)                       \\\n\n// image\n#define img_m 22\n#define img_n 15\n#define img1 int[] (                              \\\n    0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \\\n    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n    0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n    0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, \\\n    1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, \\\n    0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0  \\\n)                                                \\\n\n#define img2 int[] (                             \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, \\\n    0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, \\\n    0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \\\n    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n    0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n    0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, \\\n    1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, \\\n    0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0  \\\n)                                                \\\n\n// message\n#define hex_codes float[] (                                                                   \\\n    16127.0, 12735.0,  9087.0, 10681.0, 16313.0, 11263.0, 19199.0, 14719.0, 16063.0, 14527.0, \\\n    12289.0, 16145.0, 14015.0,  8511.0, 15549.0, 14521.0, 14777.0,  3839.0, 16071.0, 18617.0, \\\n    13287.0, 10687.0, 14649.0, 16191.0, 14617.0, 23709.0, 14007.0, 16263.0, 10227.0, 16255.0, \\\n    15873.0, 12283.0, 16363.0, 16015.0, 15343.0, 15359.0, 15939.0, 16383.0, 16079.0,  8481.0, \\\n    18569.0, 16425.0, 11777.0, 20219.0,  8193.0, 16391.0, 17927.0, 16767.0, 16193.0           \\\n)                                                                                             \\\n\n#define message float[] (                                                                              \\\n        0.0,     0.0,      0.0,    0.0,     0.0,                                                       \\\n    16313.0, 11263.0, 15549.0, 14777.0, 13287.0,  3839.0,  8511.0, 16127.0, 13287.0, 16063.0,     0.0, \\\n    12283.0, 16255.0, 12283.0, 15873.0,     0.0,                                                       \\\n    14336.0, 13287.0,      0.0,                                                                        \\\n    14777.0, 14521.0,  8511.0, 14336.0, 14521.0, 11263.0,                                              \\\n    8192.0,  8192.0,  8192.0                                                                           \\\n)\n\n#define greets float[] (                                         \\\n    11263.0, 8511.0, 0.0,                                        \\\n    12735.0, 8511.0, 16127.0, 14521.0, 9087.0, 14777.0,          \\\n    0.0, 0.0, 0.0, 0.0,                                          \\\n    19199.0, 16191.0, 8511.0, 9087.0, 18617.0, 16191.0, 15549.0, \\\n    0.0, 0.0, 0.0, 0.0                                           \\\n)     \n\n#define credits float[] (                                                            \\\n    0.0, 0.0, 0.0, 0.0,                                                              \\\n    18617.0, 11263.0, 15549.0, 16127.0, 12289.0, 14521.0, 11263.0, 11263.0, 18617.0, \\\n    0.0, 0.0, 0.0, 0.0                                                               \\\n)                                                                                    \\\n\n// scene frame thresholds\n#define checkpoints int[] (                                                    \\\n    60 * (11),                             /* 0 - intro */                     \\\n    60 * (11 + 18),                        /* 1 - plane lattice cycle */       \\\n    60 * (11 + 18 + 12),                   /* 2 - icosahedral lattice cycle */ \\\n    60 * (11 + 18 + 12 + 12),              /* 3 - deer */                      \\\n    60 * (11 + 18 + 12 + 12 + 6),          /* 4 - random initialization */     \\\n    60 * (11 + 18 + 12 + 12 + 6 + 12),     /* 5 - cellular automata */         \\\n    60 * (11 + 18 + 12 + 12 + 6 + 12 + 12) /* 6 - greets */                    \\\n                                           /* 7 - credits */                   \\\n)                                                                              \\\n\nstruct Scene {\n    int    m; // lattice mode\n    int    h; // Caspar-Klug h parameter\n    int    k; // Caspar-Klug k parameter\n    int    p; // polyhedron\n    float  a; // alpha\n    float  z; // zoom\n    bool   g; // face glow\n    bool   r; // rotate\n};\n\nScene frame_to_scene(int frame) {\n    int s = frame, m = MODE_HEX, h = 0, k = 0, p = ICO;\n    float a = 1.0, z = 1.0;\n    bool g = true;\n    bool r = true;\n    /****/ if (frame < checkpoints[0]) {\n    h=18;\n    } else if (frame < checkpoints[1]) {\n        s -= checkpoints[1];\n        m = int(mod(round(float(s) / 120.0), 8.0));\n        h = int(1.0 + round(30.0 / 2.0 * sin(float(s) / 30.0)) + floor(30.0 / 2.0));\n    } else if (frame < checkpoints[2]) {\n        s -= checkpoints[2];\n        m = int(mod(round(float(s) / 120.0), 8.0));\n        h = int(1.0 + round(8.0 / 2.0 * sin(float(s) / 8.0)) + floor(8.0 / 2.0));\n        k = int(round(8.0 / 2.0 * sin(float(s) / 10.0)) + floor(8.0 / 2.0));\n        a = 0.5 + sin(float(s) / 30.0) * 0.25;\n        z = (3.0 + sin(float(s) / 60.0)) * 0.5;\n    } else if (frame < checkpoints[3]) {\n        s -= checkpoints[3];\n        h = 16;\n        k = 16;\n        p = int(mod(round(float(s) / 240.0), 3.0));\n        a = 0.5 + sin(float(s) / 30.0) * 0.25;\n        z = (3.0 + sin(float(s) / 60.0)) * 0.5;\n    } else if (frame < checkpoints[4]) {\n        s -= checkpoints[4];\n        h = 20;\n        k = 20;\n        p = int(mod(round(float(s) / 240.0), 3.0));\n        a = 0.5 + sin(float(s) / 30.0) * 0.25;\n        z = (3.0 + sin(float(s) / 60.0)) * 0.5;\n    } else if (frame < checkpoints[5]) {\n        s -= checkpoints[5];\n        h = 20;\n        k = 20;\n        p = int(mod(round(float(s) / 240.0), 3.0));\n        z = (3.0 + sin(float(s) / 60.0)) * 0.5;\n        g = false;\n    } else if (frame < checkpoints[6]) {\n        s -= checkpoints[6];\n        h = 18;\n        a = 0.65;\n        r = false;\n    } \n    return Scene(m, h, k, p, a, z, g, r);\n}\n\n// lattice parameters\nstruct Params {\n    float R;     // circumradius\n    float r;     // inradius\n    float theta; // rotation\n    vec2 hvec;   // basis vector\n    vec2 kvec;   // basis vector\n};\n\nParams mode_to_params(int mode, float h, float k) {\n    float R, r, theta;\n    vec2 hvec, kvec;\n    switch (mode) {\n        case MODE_DUALHEX:\n        case MODE_DUALRHOMBITRIHEX:\n        case MODE_HEX:\n        {\n            R = 1.0 / ((h + k) * 1.5);\n            r = cos30 * R;\n            theta = 30.0;\n            hvec = vec2(2.0 * r, 0.0);\n            kvec = vec2(r, 1.5 * R);\n            break;\n        }\n        case MODE_DUALTRIHEX:\n        case MODE_TRIHEX:\n        {\n            R = 1.0 / ((h + k) * 2.0 * cos30);\n            r = cos30 * R;\n            theta = 0.0;\n            hvec = vec2(2.0 * R, 0.0);\n            kvec = vec2(R, 2.0 * r);\n            break;\n        }\n        case MODE_DUALSNUBHEX:\n        case MODE_SNUBHEX:\n        {\n            R = 1.0 / (h < k / 2.0 ? k * 3.0 * cos30 + h * cos30 : h * 3.0 * cos30 + 2.0 * k * cos30);\n            r = cos30 * R;\n            theta = 0.0;\n            hvec = vec2(2.5 * R, r);\n            kvec = vec2(0.5 * R, 3.0 * r);\n            break;\n        }\n        case MODE_RHOMBITRIHEX:\n        {\n            R = 1.0 / ((h + k) * (1.5 + sqrt3 / 2.0));\n            r = cos30 * R;\n            theta = 30.0;\n            hvec = vec2(R + 2.0 * r, 0.0);\n            kvec = vec2(r + 0.5 * R, (1.5 + sqrt3 / 2.0) * R);\n            break;\n        }\n    }\n    return Params(R, r, radians(theta), hvec, kvec);\n}\n\nfloat cross2(vec2 p, vec2 q) {\n    return p.x * q.y - p.y * q.x;\n}\n\nmat2 rotmat2(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\nmat3 rotmat3(vec3 angle) {\n    float sintht = sin(angle.x), sinpsi = sin(angle.y), sinphi = sin(angle.z);\n    float costht = cos(angle.x), cospsi = cos(angle.y), cosphi = cos(angle.z);\n    return mat3(\n        costht * cospsi,\n        sintht * cospsi,\n        -sinpsi,\n        costht * sinpsi * sinphi - sintht * cosphi,\n        sintht * sinpsi * sinphi + costht * cosphi,\n        cospsi * sinphi,\n        costht * sinpsi * cosphi + sintht * sinphi,\n        sintht * sinpsi * cosphi - costht * sinphi,\n        cospsi * cosphi\n    );\n}\n\nbool in_tri(vec2 uv, vec2 v1, vec2 v2, vec2 v3) {\n    // https://mathworld.wolfram.com/TriangleInterior.html\n    // http://www.sunshine2k.de/coding/java/pointInTriangle/pointInTriangle.html\n    vec2 w1 = v2 - v1;\n    vec2 w2 = v3 - v1;\n    float d = determinant(mat2(w1, w2));\n    // check for d ≈ 0.0 ?\n    float s = determinant(mat2(uv - v1, w2)) / d;\n    float t = determinant(mat2(w1, uv - v2)) / d;\n    return s >= 0.0 && t >= 0.0 && (s + t) <= 1.0;\n}\n\nbool in_reg(vec2 uv, vec2 c, float n, float R, float theta) {\n    // break-up regular polygon into triangles\n    float dt = radians(360.0 / n);\n    for (float i = 0.0, j = 1.0; i < n; i++, j++)\n    {\n        vec2 a = R * vec2(cos(dt * i + theta), sin(dt * i + theta)) + c;\n        vec2 b = R * vec2(cos(dt * j + theta), sin(dt * j + theta)) + c;\n        if (in_tri(uv, a, b, c))\n            return true;\n    }\n    return false;\n}\n\nbool in_floret(vec2 uv, vec2 c, float R) {\n    // progressively break-up hexagon-inscribed floret into 3 triangles\n    float x = (3.0 * sqrt(3.0) * R) / 10.0;\n    float X = x / cos30;\n    float rtri = X * sqrt(3.0) / 6.0;\n    float Rtri = X * sqrt(3.0) / 3.0;\n    vec2 alpha = c + vec2(0, x + rtri);\n    vec2 beta = c + vec2(X / 2.0, x + Rtri);\n    vec2 gamma = c + vec2(X, x + rtri);\n    vec2 delta = c + vec2(X, Rtri);\n    for (float i = 0.0; i < 6.0; i++) {\n        vec2 a = (alpha - c) * rotmat2(radians(i * 60.0)) + c;\n        vec2 b = (beta  - c) * rotmat2(radians(i * 60.0)) + c;\n        vec2 g = (gamma - c) * rotmat2(radians(i * 60.0)) + c;\n        vec2 d = (delta - c) * rotmat2(radians(i * 60.0)) + c;\n        if (in_tri(uv, c, a, b) || in_tri(uv, c, b, g) || in_tri(uv, c, g, d))\n            return true;\n    }\n    return false;\n}\n\nvec2 uv_to_hex_p(vec2 uv, Params p) {\n    // get central hex coordinate\n    mat2 b = mat2(p.hvec, p.kvec);\n    vec2 hex = b * round(inverse(b) * uv);\n    bool inhex = in_reg(uv, hex, 6.0, p.R, p.theta);\n    // adjust hex coordinate due to overlap\n    if (!inhex)\n        if (cross2(vec2(p.r, 0.5 * p.R), hex - uv) < 0.)\n            hex += (uv.x > hex.x) ? p.kvec : -p.hvec;\n        else\n            hex += (uv.x > hex.x) ? p.hvec : -p.kvec;\n    return hex;\n}\n\nvec2 uv_to_hex_R(vec2 uv, float R) {\n    // get central hex coordinate\n    float r = R * cos30;\n    float theta = radians(30.0);\n    vec2 hvec = vec2(2.0 * r, 0.0);\n    vec2 kvec = vec2(r, 1.5 * R);\n    mat2 b = mat2(hvec, kvec);\n    vec2 hex = b * round(inverse(b) * uv);\n    bool inhex = in_reg(uv, hex, 6.0, R, radians(theta));\n    // adjust hex coordinate due to overlap\n    if (!inhex)\n        if (cross2(vec2(r, 0.5 * R), hex - uv) < 0.)\n            hex += (uv.x > hex.x) ? kvec : -hvec;\n        else\n            hex += (uv.x > hex.x) ? hvec : -kvec;\n    return hex;\n}\n\nfloat distline(vec2 uv, vec2 p, float theta) {\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    return abs(cos(theta) * (p.y - uv.y) - sin(theta) * (p.x - uv.x));\n}\n\nfloat random(vec2 seed) {\n    // https://thebookofshaders.com/10/\n    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 hex_display(vec2 uv, vec2 pos, float chr, float R, float B, vec3 col, bool yflip) {\n    // uv     the uv\n    // pos     the centreal display position\n    // chr     the character code to display\n    // R       the hexagon circumradius\n    // B       the border width\n    // yflip   the border width\n    // col the default color\n    //\n    //     0    5    8  -\n    //    1         9    |\n    //   2    6    A      > display bit mapping\n    //  3         B      |\n    // 4    7    C      -\n    //\n    // A a 16127          n 14521        0 16255  _ 08481\n    // b   12735          o 14777        1 15873  - 18569\n    // C c 09087 10681  P   03839        2 12283  : 16425\n    //   d 16313          q 16071        3 16363  ! 11777\n    // E   11263          r 18617        4 16015  ? 20219\n    // F   19199        S   13287        5 15343  . 08193\n    // G g 14719          t 10687        6 15359  ' 16391\n    // H h 16063 14527  U u 16191 14649  7 15939  \" 17927\n    //   i 12289        V   14617        8 16383  [ 16767\n    // J   16145          w 23709        9 16079  ] 16193\n    // K   14015        X   14007\n    // L   08511          y 16263\n    // M   15549        Z   10227\n\n    float r = R * cos30;\n    float theta = radians(30.0);\n    float n = chr;\n    // set display according to bit index\n    for (int i = 0; i < 13; i++) {\n        float q = floor(n / 2.0);\n        if (mod(q, 2.0) == 1.0) {\n            float ir = 0.0;\n            float ic = 0.0;\n            /**/ if (i == 0 || i == 5 || i == 8 ) ir  = +2.0;\n            else if (i == 1 || i == 9           ) ir  = +1.0;\n            else if (i == 3 || i == 11          ) ir  = -1.0;\n            else if (i == 4 || i == 7 || i == 12) ir  = -2.0;\n            /**/ if (i <= 4                     ) ic  = -1.0;\n            else if (i >= 8                     ) ic  = +1.0;\n            /**/ if (yflip                      ) ir *= -1.0;  \n            float dx = ic * 2.0 * r + ir * r;\n            float dy = ir * 1.5 * R;\n            if (in_reg(uv, pos + vec2(dx, dy), 6.0, R - B, theta)) {\n                col = vec3(0.75);\n                break;\n            }\n        }\n        n = q;\n    }\n    return col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 y_to_xy(vec2 uv) {\n    return uv / (iResolution.xy / iResolution.y) * (iResolution.xy / iResolution.xy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // set resolution\n    vec2 uv = fragCoord / iResolution.y;\n\n    // scene parameters\n    Scene scene = frame_to_scene(iFrame);\n\n    // lattice parameters\n    int m = scene.m;\n    float h = float(scene.h);\n    float k = float(scene.k);\n    Params p = mode_to_params(m, h, k);\n\n    if (iFrame < checkpoints[5]) {\n        // calculate vertex coordinates\n        vec2 t0 = vec2(0);\n        vec2 t1 = mat2(p.hvec, p.kvec) * vec2(h, k);\n        vec2 t2 = rotmat2(rad60) * t1;\n        uv.x += t2.x < 0.0 ? t2.x : 0.0;\n\n        if (iFrame < checkpoints[1])\n            uv.x -= (iResolution.x / iResolution.y - t1.x) / 2.0;\n\n        // set border\n        float dw = p.R * WIDTH;\n        if (m == MODE_HEX || m == MODE_DUALHEX || m == MODE_DUALRHOMBITRIHEX)\n            p.R -= dw;\n\n        // calculate hex coordinate\n        mat2 b = mat2(p.hvec, p.kvec);\n        vec2 hex = b * round(inverse(b) * uv);\n        bool in_hex = in_reg(uv, hex, 6.0, p.R, p.theta);\n        if (!in_hex)\n            if (cross2(vec2(p.r, 0.5 * p.R), hex - uv) < 0.)\n                hex += (uv.x > hex.x) ? p.kvec : -p.hvec;\n            else\n                hex += (uv.x > hex.x) ? p.hvec : -p.kvec;\n\n        // cellular automata\n        vec3 col_face = COLOR_FACE;\n        vec3 col_vertex = COLOR_VERTEX;\n        vec3 col_triangle = COLOR_TRIANGLE;\n        vec3 col_line = COLOR_LINE;\n        vec3 col_background = COLOR_BACKGROUND;\n\n        if (in_hex || in_reg(uv, hex, 6.0, p.R, p.theta)) {\n            /****/ if (iFrame < checkpoints[0]) {\n            } else if (iFrame < checkpoints[1]) {\n            } else if (iFrame < checkpoints[2]) {\n            } else if (iFrame < checkpoints[3]) {\n                vec2 uv = fragCoord / iResolution.y;\n                Params p = mode_to_params(m, h, k);\n                uv.y -= 6.0 * 1.5 * p.R;\n                float off = mod(floor(iTime / 0.1) * 2.0 * p.r, float(img_m + 5) * 2.0 * p.r);\n                uv.x -= off;\n                vec2 hex = uv_to_hex_p(uv, p);\n                int ir = int(round(hex.y / (1.5 * p.R)));\n                int ic = int(round((hex.x - mod(float(ir), 2.0) * p.r) / (2.0 * p.r)));\n                if (0 <= ic && ir < img_m && ic < img_n) {\n                    if (img1[15 * ir + ic] == 1) {\n                        if (in_reg(uv, hex, 6.0, p.R, rad30)) {\n                            col_face = cos(iTime + uv.xyx);\n                            col_face.x = 0.0;\n                        }\n                    }\n                }\n            } else if (iFrame < checkpoints[4]) {\n                // set random initial state\n                col_face = vec3(fract(random(iTime + hex * iTime)) <= 0.45 ? COLOR_ON : COLOR_FACE);\n            } else if (iFrame < checkpoints[5]) {\n                // get ON/OFF state of hexagonal neighborhood\n                int nw = int(T(iChannel0, y_to_xy(hex + vec2(-(1.0 * p.r), +(1.5 * p.R)))).rgb == COLOR_ON);\n                int ne = int(T(iChannel0, y_to_xy(hex + vec2(+(1.0 * p.r), +(1.5 * p.R)))).rgb == COLOR_ON);\n                int wc = int(T(iChannel0, y_to_xy(hex + vec2(-(2.0 * p.r), 0.0000000000))).rgb == COLOR_ON);\n                int cc = int(T(iChannel0, y_to_xy(hex + vec2(0.0000000000, 0.0000000000))).rgb == COLOR_ON);\n                int ec = int(T(iChannel0, y_to_xy(hex + vec2(+(2.0 * p.r), 0.0000000000))).rgb == COLOR_ON);\n                int sw = int(T(iChannel0, y_to_xy(hex + vec2(-(1.0 * p.r), -(1.5 * p.R)))).rgb == COLOR_ON);\n                int se = int(T(iChannel0, y_to_xy(hex + vec2(+(1.0 * p.r), -(1.5 * p.R)))).rgb == COLOR_ON);\n                int n = nw + ne + wc + ec + sw + se;\n                // update state of current central cell\n                if (cc == 1) col_face = vec3((n >= 4) ? COLOR_ON : col_face);\n                else /*****/ col_face = vec3((n <= 2) ? COLOR_ON : col_face);\n            }\n        }\n        if (col_face == COLOR_ON) {\n            col_vertex = COLOR_ON;\n            col_triangle = COLOR_ON;\n            col_line = COLOR_ON;\n            col_background = COLOR_ON;\n        }\n        vec3 col = col_background;\n\n        // base hex-pattern colors\n        if (in_hex || in_reg(uv, hex, 6.0, p.R, p.theta)) {\n            col = col_face;\n        }\n        if (\n            in_reg(uv, t0, 6.0, p.R, p.theta) ||\n            in_reg(uv, t1, 6.0, p.R, p.theta) ||\n            in_reg(uv, t2, 6.0, p.R, p.theta)\n        ) {\n            col = col_vertex;\n        }\n\n        // lattice colors\n        float R3 = p.R * sqrt3 / 3.0;\n        float r3 = p.R * sqrt3 / 6.0;\n        float a = R3 + r3;\n        switch (m) {\n            case MODE_SNUBHEX:\n            {\n                if (!in_hex) {\n                    vec2 uv = uv;\n                    uv.x += mod(floor(uv.y / a), 2.0) * 0.5 * p.R;\n                    vec2 c = vec2(p.R * round(uv.x / p.R), a * floor(uv.y / a));\n                    if (distline(uv, c, +rad60) < dw ||\n                        distline(uv, c, -rad60) < dw ||\n                        abs(uv.y - a * round(uv.y / a)) < dw\n                    ) col = col_line;\n                }\n                break;\n            }\n            case MODE_RHOMBITRIHEX:\n            {\n                float R = p.R;\n                float r = p.r;\n                float dx = R + r + r;\n                float dy = R + a + R + a + R;\n                vec2 c = vec2(dx * round(uv.x / dx), dy * round(uv.y / dy));\n                if (in_reg(uv, c + vec2(0, +(R + R3)), 3.0, R3, -rad90)                    ||\n                    in_reg(uv, c + vec2(0, -(R + R3)), 3.0, R3, +rad90)                    ||\n                    in_reg(uv, c + vec2(+(r + R / 2.0), +(R / 2.0 + r3)), 3.0, R3, +rad90) ||\n                    in_reg(uv, c + vec2(-(r + R / 2.0), +(R / 2.0 + r3)), 3.0, R3, +rad90) ||\n                    in_reg(uv, c + vec2(+(r + R / 2.0), -(R / 2.0 + r3)), 3.0, R3, -rad90) ||\n                    in_reg(uv, c + vec2(-(r + R / 2.0), -(R / 2.0 + r3)), 3.0, R3, -rad90)\n                ) col = col_triangle;\n                break;\n            }\n            case MODE_DUALTRIHEX:\n            {\n                if (in_reg(uv, hex, 3.0, p.R, p.theta)                  ||\n                    in_reg(uv, hex, 3.0, p.R, p.theta + radians(180.0))\n                )\n                    col = in_hex ? col : col_triangle;\n                else\n                    col = col_background;\n\n                // if (distline(uv, hex, +rad60) < dw ||\n                //     distline(uv, hex, -rad60) < dw ||\n                //     abs(uv.y - hex.y) < dw\n                //    )\n                //     col = col_line;\n\n                vec2 hex = b * round(inverse(b) * uv);\n                if (cross2(vec2(p.r, 0.5 * p.R), hex - uv) < 0.)\n                    hex += (uv.x > hex.x) ? p.kvec : -p.hvec;\n                else\n                    hex += (uv.x > hex.x) ? p.hvec : -p.kvec;\n                if ( in_reg(uv, hex, 6.0, p.R / cos30 + dw, rad30) &&\n                    !in_reg(uv, hex, 6.0, p.R / cos30 - dw, rad30)\n                )\n                    col = col_line;\n\n                break;\n            }\n            case MODE_DUALSNUBHEX:\n            {\n                if (in_floret(uv, t0, p.R + R3) ||\n                    in_floret(uv, t1, p.R + R3) ||\n                    in_floret(uv, t2, p.R + R3)\n                )\n                    col = col_vertex;\n                else {\n                    bool in_hex = false;\n                    mat2 b = mat2(p.hvec * 2.0, p.kvec * 2.0);\n                    {\n                        vec2 hex = b * round(inverse(b) * uv);\n                        in_hex = in_floret(uv, hex, p.R + R3);\n                    }\n                    if (!in_hex) {\n                        vec2 uv = uv - p.hvec;\n                        vec2 hex = b * round(inverse(b) * uv);\n                        in_hex = in_floret(uv, hex, p.R + R3);\n                    }\n                    if (!in_hex) {\n                        vec2 uv = uv + p.kvec;\n                        vec2 hex = b * round(inverse(b) * uv);\n                        in_hex = in_floret(uv, hex, p.R + R3);\n                    }\n                    if (!in_hex) {\n                        vec2 uv = uv + p.hvec + p.kvec;\n                        vec2 hex = b * round(inverse(b) * uv);\n                        in_hex = in_floret(uv, hex, p.R + R3);\n                    }\n                    if (in_hex) col = col_face;\n                }\n                break;\n            }\n            case MODE_DUALRHOMBITRIHEX:\n            {\n                if (distline(uv, hex, +rad60) <= dw ||\n                    distline(uv, hex, -rad60) <= dw ||\n                    abs(uv.y - hex.y) < dw\n                ) {\n                    col = col_background;\n                }\n                break;\n            }\n        }\n\n        if (scene.g) {\n            vec3 rnd = vec3(cos(iTime));\n            rnd.x = 0.0;\n            if (in_tri(uv, vec2(0), t1, t2)) col = mix(rnd, col, 0.85);\n        }\n\n        fragColor = vec4(col, 1.0);    \n    } else if (iFrame < checkpoints[6]) {\n        vec2 uv = fragCoord / iResolution.y;\n        float R = 1.0 / h;\n        float r = R * cos30;\n        float B = R * WIDTH;\n        float off = floor(iTime / 0.1) * 2.0 * r;\n        vec3 col = (\n            in_reg(uv, uv_to_hex_R(uv, R), 6.0, R - B, rad30) ?\n            vec3(0.25) :\n            cos(iTime + uv.xyx) * vec3(0, 1, 1)\n        );\n        uv.x += off;\n        float dx = 2.0 * r;\n        float dy = 1.5 * R;\n        vec2 hex = uv_to_hex_R(uv, R);\n        float ir = round(hex.y / dy);\n        float ic = round((hex.x - ir * r) / dx / 5.0);\n        float code = greets[int(mod(ic, float(greets.length())))];\n        col = hex_display(uv, vec2(5.0 * ic * dx + 2.0 * dx, 0.5), code, R, B, col, true);\n        fragColor = vec4(col, 1);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}