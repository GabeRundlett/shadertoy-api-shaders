{
    "Shader": {
        "info": {
            "date": "1479793586",
            "description": "ultra simple WASD \nwith \nultra simple raymarch",
            "flags": 48,
            "hasliked": 0,
            "id": "Xl3XWM",
            "likes": 5,
            "name": "ultra simple WASD",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 965
        },
        "renderpass": [
            {
                "code": "float objec(vec3 p)\n{\n    return max(sin(p.x)+sin(p.z)+p.y,length(p)-32.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 camDir = texture( iChannel0, (vec2(1.,0.)+.5)/iResolution.xy).xyz;\n    vec3 camPos = texture( iChannel0, (vec2(2.,0.)+.5)/iResolution.xy).xyz;\n         camPos+= vec3(0.,16.,-64.);\n    \n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    mat3 mtx;\n    mtx[0] = normalize(vec3(camDir.z,0.,-camDir.x));\n    mtx[1] = cross(camDir,mtx[0]);\n    mtx[2] = camDir;\n    vec3 ray = mtx*normalize(vec3(uv,1.));//direction of ray from camera\n \n    vec3 p = camPos;\n    float l = 0.;                         //distance to surface\n    for (int i = 0; i < 32; ++i)          //ray march\n    {\n        l = objec(p);\n        p += l*ray;\n    }\n    float s = 1./64.;\n    vec3 c1 = ray;                                                           //color of sky\n    vec3 c2 = normalize(vec3(objec(p+s*vec3(1,0,0)) - objec(p-s*vec3(1,0,0)),//color of surface\n                             objec(p+s*vec3(0,1,0)) - objec(p-s*vec3(0,1,0)),\n                             objec(p+s*vec3(0,0,1)) - objec(p-s*vec3(0,0,1))));\n    if(l<.1){c1 = c2;}\n\tfragColor = vec4(c1,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void rotVec(inout vec4 v, float x, float y)\n{\n    y = asin(v.y) - y;\n    if(-1.56 > y){y =-1.56;};\n    if( 1.56 < y){y = 1.56;};\n    float l = cos(y);\n    x = -x;\n    v.xz = vec2(v.x*cos(x) - v.z*sin(x),\n                v.x*sin(x) + v.z*cos(x));\n    v.xz*= l/length(v.xz);\n    v.y  = sin(y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float keyW  = texture( iChannel1, vec2(87.5/256.,.25) ).x;\n    float keyS  = texture( iChannel1, vec2(83.5/256.,.25) ).x;\n    float keyA  = texture( iChannel1, vec2(65.5/256.,.25) ).x;\n    float keyD  = texture( iChannel1, vec2(68.5/256.,.25) ).x;\n    vec4 mouse  = texture( iChannel0, vec2(0.5,.5)/iResolution.xy);\n    vec4 camDir = texture( iChannel0, vec2(1.5,.5)/iResolution.xy);\n    vec4 camPos = texture( iChannel0, vec2(2.5,.5)/iResolution.xy);\n    vec4 final = vec4(0.);\n    \n    //make sure camDir always is a normalized vector\n    if(dot(camDir,camDir)==0.){camDir = vec4(0.,0.,1.,0.);}\n    \n    if(fragCoord.x == 0.5)//mod mouse texel\n    {\n        if(iMouse.z>0.){ mouse = iMouse; }\n        else           { mouse.z = 0.;   }\n\t\tfinal = mouse;\n    }\n    if(fragCoord.x == 1.5)//mod camDir texel\n    {\n        if(iMouse.z>0. && mouse.z>0.)\n        {\n            mouse = (iMouse-mouse)*4./iResolution.y;\n            rotVec(camDir, mouse.x, -mouse.y); \n        }\n        final = camDir;\n    }\n    if(fragCoord.x == 2.5)//mod camPos texel\n    {\n        final = camPos + (keyW-keyS)*.1*camDir +\n                         (keyD-keyA)*.1*normalize(vec4(camDir.z,0.,-camDir.x,0.));\n    }\n    fragColor = final;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}