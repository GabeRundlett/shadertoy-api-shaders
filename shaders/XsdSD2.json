{
    "Shader": {
        "info": {
            "date": "1461596744",
            "description": "Maybe Nyan Cats Next Time...",
            "flags": 0,
            "hasliked": 0,
            "id": "XsdSD2",
            "likes": 0,
            "name": "Maybe Nyan Cats Next Time...",
            "published": 3,
            "tags": [
                "maybenyancatsnexttime"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n#define time ((saw(float(__LINE__))*.001+1.0)*iTime/PI)\n\nfloat saw(float x)\n{\n    return acos(cos(x))/PI;\n}\nvec2 saw(vec2 x)\n{\n    return acos(cos(x))/PI;\n}\nvec3 saw(vec3 x)\n{\n    return acos(cos(x))/PI;\n}\nvec4 saw(vec4 x)\n{\n    return acos(cos(x))/PI;\n}\nfloat stair(float x)\n{\n    return float(int(x));\n}\nvec2 stair(vec2 x)\n{\n    return vec2(stair(x.x), stair(x.y));\n}\n\n\nfloat cross( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nfloat jag(float x)\n{\n    return mod(x, 1.0);\n}\nvec2 jag(vec2 x)\n{\n    return vec2(jag(x.x), jag(x.y));\n}\n\n\nvec3 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c)\n{\n    vec2 duv = b-p;\n    \n    vec2 xdir = c-b;\n    vec2 ydir = a-b;\n    float w = cross(xdir, ydir);\n    return vec3((dot(duv, normalize(xdir))), (dot(duv, normalize(ydir))), w);\n}\n\nvec2 SinCos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\nvec3 RotateZ( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vSinCos.y * vPos.x + vSinCos.x * vPos.y, -vSinCos.x * vPos.x + vSinCos.y * vPos.y, vPos.z);\n}\n      \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n\treturn RotateZ( vPos, SinCos(fAngle) );\n}\nvec2 RotateZ( const in vec2 vPos, const in float fAngle )\n{\n\treturn RotateZ( vec3(vPos, 0.0), SinCos(fAngle) ).xy;\n}\nmat4 RotateZ( const in mat4 vPos, const in float fAngle )\n{\n\treturn mat4(RotateZ( vec3(vPos[0].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[1].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[2].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[3].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0);\n}\nmat4 translate( const in mat4 vPos, vec2 offset )\n{\n\treturn mat4(vPos[0].xy+offset, 0.0, 0.0,\n                vPos[1].xy+offset, 0.0, 0.0,\n                vPos[2].xy+offset, 0.0, 0.0,\n                vPos[3].xy+offset, 0.0, 0.0);\n} \nmat4 scale( const in mat4 vPos, vec2 factor )\n{\n\treturn mat4(vPos[0].xy*factor, 0.0, 0.0,\n                vPos[1].xy*factor, 0.0, 0.0,\n                vPos[2].xy*factor, 0.0, 0.0,\n                vPos[3].xy*factor, 0.0, 0.0);\n} \nvec4 tree(vec4 uv)\n{\n    vec4 uv0 = uv;\n\n    mat4 last = mat4(0.0);\n    float mind = 1.0E32;\n    float omega = 0.0;\n    const int max_iterations = 8;\n    \n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n    \tfloat iteration = PI*2.0*(float(i)/(float(max_iterations) ));//*(1.0+saw(time+float(i)))));\n        \n        mat4 square = mat4(-1.0, -1.0, 0.0, 0.0,\n                           1.0, -1.0, 0.0, 0.0,\n                           1.0, 1.0, 0.0, 0.0,\n                           -1.0, 1.0, 0.0, 0.0);\n\n        float size =  .5;\n\n        float r = iteration;\n        float theta = iteration-time;\n        square = RotateZ(square, theta);\n        \n        vec2 center = vec2(sin(theta+time), cos(theta+time));\n        square = translate(square, center);\n\t\tcenter = square[1].xy;\n        float d = length(center-uv0.xy);\n        if(d < mind)\n        {\n            last = square;\n            mind = d;\n            omega = theta;\n        }\n    }\n    \n    vec2 center = last[1].xy;\n    vec3 uv1 = vec3(invBilinear(uv0.xy, last[0].xy, last[1].xy, last[2].xy));\n\n    return vec4(uv1.xy, mind, uv1.z);\n}\n\n\nfloat square(vec2 uv, float iteration)\n{\n\tif(abs(abs(saw(uv.x*(1.5+sin(iTime*.654321))*PI+iTime*.7654321)*2.0-1.0)-abs(uv.y)) < .5)\n\t\treturn 1.0-abs(abs(saw(uv.x*(1.5+sin(iTime*.654321))*PI+iTime*.7654321)*2.0-1.0)-abs(uv.y))/.5*uv.x;\n\telse\n\t\treturn 0.0;\n}\n\n\nvec2 spiral(vec2 uv)\n{\n    float turns = 4.0+saw(time/4.0)*4.0;\n    float r = log(length(uv))-time/PI;\n    float theta = atan(uv.y, uv.x)*turns-r*PI;\n    return vec2(saw(r*PI+theta/turns), saw(theta/turns));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 uv = vec4(fragCoord.xy / iResolution.xy, 0.0, 0.0);\n    vec2 uv0 = uv.xy;\n    \n    float map = 0.0;\n    \n    float lambda = 4.0;\n    float scale;\n    \n\tconst int max_iterations =1;\n\n    \n    for(int i = 0; i <= max_iterations; i++)\n    {\n    \tfloat iteration = PI*(float(i)/(float(max_iterations) ));\n        if(i <= 0)\n        {\n        \tscale = 2.0*PI+time*4.0*PI;\n            uv.xy = uv.xy*scale-scale/2.0;\n            if(i == 0)\n            uv.x *= iResolution.x/iResolution.y;\n            uv.xy = RotateZ(uv.xy, time/PI+iteration);\n            uv.xy += .125*scale*vec2(sin(time/GR*.2345+iteration), cos(time/E*.345+iteration));\n            uv.xy = (saw(spiral(uv.xy)*2.0*PI)*2.0-1.0)*(GR+sin(time+iteration)/PI);\n        }\n    \telse\n        {\n        \tscale = GR+sin(time+iteration)/PI;//pow(amplitude, length(uv0*2.0-1.0)/sqrt(2.0)*sin(time*GR/2.0+float(i)-1.0));\n            uv.xy = uv.xy*scale-scale/2.0;\n            uv = tree(uv);\n            map += saw(uv.z+uv.w)*PI;//square(uv.xy, float(i))*noise;\n        }\n    }\n    \n    float map2 = 0.0;\n    /*\n    noise = 1.0;\n    for(int i = 0; i < max_iterations; i++)\n    {\n        uv.xy *= scale;\n        uv.xy -= scale/2.0;\n        if(i == 0)\n            uv.x *= iResolution.x/iResolution.y;\n        uv.xy = normalize(uv.xy)*log(length(uv.xy)+1.0);\n        uv = spiral(uv);\n        map2 += uv.g*noise;\n        \n        noise *= clamp(.95-fwidth(map2), 0.0, 1.0);\n    }\n    */\n    \n    \n    fragColor = texture(iChannel0, saw(uv.xy*PI+time));\n    \n    /*\n    fragColor.rg = uv.rg;//saw(uv.zw);//saw(uv.zw*PI);\n    fragColor.b = 0.0;\n    fragColor.a = 1.0;\n    //fragColor = vec4(noise);\n    map = map+time;//map*PI + time*PI;\n    fragColor = vec4(vec3(saw(map+map2),\n                          saw(4.0*PI/3.0+map+map2),\n                          saw(2.0*PI/3.0+map+map2)),\n                     1.0);\n    */\n    return;\n/*\n\tconst int max_iterations = 8;\n\n    float noise = 1.0;\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        noise += clamp(1.0-fwidth(map), 0.0, 1.0);\n        \n        uv = tree(uv); \n        \n        map += square(uv, float(i)/float(max_iterations))/noise;\n    } \n    map = map*PI + time;\n    fragColor = vec4(vec3(saw(map),\n                          saw(4.0*PI/3.0+map),\n                          saw(2.0*PI/3.0+map)),\n                     1.0);*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}