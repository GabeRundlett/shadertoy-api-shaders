{
    "Shader": {
        "info": {
            "date": "1540226367",
            "description": "red is normalized of green (and halfwidth offset)\nthis is uglsy due to dividing by a derivative, and a length, i low precision, has discontinuity/scaling/rasterization\n\nit can make cute twinkling stars, inefficiently.",
            "flags": 32,
            "hasliked": 0,
            "id": "Ml3fRj",
            "likes": 2,
            "name": "normalized galois is ugly",
            "published": 3,
            "tags": [
                "stars",
                "derivative",
                "twinkle",
                "differenciation",
                "halfspace",
                "galois"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 613
        },
        "renderpass": [
            {
                "code": "//i am going nuts over galois fields\n//and make many dumb errors/assertions , while experimenting with this wildly.\n\n//this shader is closer to its\n//parent: https://www.shadertoy.com/view/XsScD1\n//than all my other forks of the same parent.\n\n//i tried to change the ui to mouse controls\n//but that ui was just worse (some minot lessons taken here)\n\n \n//galois field                arrow rotation (!) is represented in red\n//galois field normalized (!) arrow rotation (!) is represented in red\n//- and that just doesnt look good, ever!\n//- -divides by analytic derivative and ny distance to vec2(0)\n//- -bad precision on short vectors.\n\n//it is impossible to make this look generally (!) continuous\n//such is the nature of [moire]\n//main issue is cases where that arrow has a length of 0, the derivative is NaN!\n//and thats better caught in [automatic differentiation] [chainRule] \n//... implementations than here\n\n//i dunno, maybe \n//https://www.shadertoy.com/view/Ml3BRj\n//is silly, or maybe its great at 2tap-derivatives, it sure is semi-messy.\n\n//this might be useful to de-moire, but i dont know how.\n//i get the feeling this is equivalent to [squaring the circle]\n//, axiomatically impossible.at leas i got many clues why it is impossible.\n\n// MODE 1: Rainbow\n// MODE 2: Greyscale\n// MODE 3: Just the zeros of the equation\n#define RENDER_MODE 1\n\n// For a Galios field, this number must be a prime\n// (or prime power). This ensures that multiplicative\n// inverses exist for all non-zero elements\nconst float nef = 1./3.;\n\nconst float numElf = 97.;\n\n// shoutouts to the amazing tool at\n//   http://dev.thi.ng/gradients/\n// for generating these color palettes\nvec3 color(float t)\n{\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.508, 0.508, 0.500);\n    vec3 c = vec3(1.000, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n    \n    vec3 ret = a + b * cos(2.0 * 3.14159 * (c * t + d));\n    return clamp(ret, 0.0, 1.0);\n}\n\nfloat absCircular(float t)\n{\n    float a = floor(t + 0.5);\n    return mod(abs(a - t), 1.0);\n}\n\nfloat m(float x\n){float n = (x)/(numElf)//floor neglible\n ;return float((x)-floor(n)*(numElf))//floor(n) is significant\n ;}\n\n\nfloat func(vec2 z,vec4 g//sets redness\n){//return 0.\n ;float a = floor(numElf * texture(iChannel0, vec2(0.5, 1.0/6.0 - 1.0/12.0)).x);\n ;float b = floor(numElf * texture(iChannel0, vec2(0.5, 2.0/6.0 - 1.0/12.0)).x);\n ;float c = (numElf*texture(iChannel0,vec2(0.5,3./6.-1./12.)).x)\n ;float d = (numElf*texture(iChannel0,vec2(0.5,4./6.-1./12.)).x)\n ;float e = (numElf*texture(iChannel0,vec2(0.5,5./6.-1./12.)).x)\n ;float f = (numElf*texture(iChannel0,vec2(0.5,6./6.-1./12.)).x)\n ;g=floor(vec4(c,d,e,f))////ui sliders overwrite mouse ui.\n ;return m(float(a*z.x*z.x + b*z.x + g.x*z.x*z.y + g.y*z.y*z.y + g.z*z.y + g.w))\n ;}\n\n\n//#define dd(a) dot(a,a)\n\n// This was going to be used to show the difference between the Gallios \n// field and the real-valued function of the same equation, but I couldn't\n// get it to look nice. If you want to take a crack at it, be my guest.\nfloat funcReal(vec2 z,vec4 g//sets greenness\n){float a = numElf * texture(iChannel0, vec2(0.5,1./6.-1.0/12.0)).x\n ;float b = numElf * texture(iChannel0, vec2(0.5,2./6.-1.0/12.0)).x\n ;float c = numElf * texture(iChannel0, vec2(0.5,3./6.-1.0/12.0)).x\n ;float d = numElf * texture(iChannel0, vec2(0.5,4./6.-1.0/12.0)).x\n ;float e = numElf * texture(iChannel0, vec2(0.5,5./6.-1.0/12.0)).x\n ;float f = numElf * texture(iChannel0, vec2(0.5,6./6.-1.0/12.0)).x\n ;g=floor(vec4(c,d,e,f))//ui sliders overwrite mouse ui.\n ;float i=2.0*mod(a*z.x*z.x+b*z.x+g.x*z.x*z.y+g.y*z.y*z.y+g.z*z.y+g.w,numElf)\n ;if(length(z)<=1.)return i//doesnt do much of significance\n ;float j= length(vec2(2.*a*z.x+b*z.y+g.y,2.*g.x*z.y+b*z.x+g.z))/length(z)\n ;if(j<=1.)return i//doesnt do much of significance\n ;return i/sqrt(j)\n ;}\n\nvec3 drawFunction(vec2 p\n){vec3 final;\n    \n   ;float x = floor(p.x*numElf+.5 )//numElf\n   ;float y = floor(p.y*numElf+.5 )//numElf\n    \n   ;float f=func(p*numElf,iMouse/iResolution.xyxy)\n   ;float diff=0.;\n   ;//diff= func(floor(p)*numElf  )/numElf//nonsense\n   ;//diff= func(floor(p)*(numElf))/numElf//nonsense\n   ;//diff+=func(floor(p*numElf))/numElf//rasterizing\n   ;//diff+=funcReal(x,y)\n   ;//final = color(diff);\n    \n    //usually a noise/shale that also returns derivatives, uses .xyz for domain-derivatives\n    //and .d for distance over all domains.\n    //as in [automatic differentiation] or the noise of [dr2].\n    \n    //so, lets just dual-monochrome this one   \n    //;final=vec3(func(floor(p*numElf))/numElf,0,funcReal(x,y))\n    //nope, kets ofset the difference by a halfspace...\n    ;vec4 m=(1.-iMouse/iResolution.xyxy).yxwz\n    ;final=vec3(func(floor(p*numElf),m)/numElf,funcReal(vec2(x,y),m),0)\n    \n   \n    ;if (RENDER_MODE == 2)\n        final = vec3(diff);\n    if (RENDER_MODE == 3)\n    {\n        final = vec3(0);\n\n        if (f == 0.)\n            final = vec3(1,1,1);\n    }\n    \n    ;return final;\n}\n\nvec3 drawSidebar(vec2 p)\n{\n    p.x -= 1.0;\n    p.x *= iResolution.y / iResolution.x;\n    \n    float t = texture(iChannel0,p).x;\n    vec3 final = vec3(0.85,0.85,0.85);\n    \n    final = mix(color(1.0), final, pow(smoothstep(0.0, 0.004, absCircular(p.x - t)), 3.0));\n    final = mix(color(0.4), final, pow(smoothstep(0.0, 0.04, absCircular(p.y*6.0)), 3.0));\n    \n    return final;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat frameWidth = iResolution.y / numElf;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec3 final = vec3(0,0,0);\n    \n    if (uv.x > 1.0)\n        final = drawSidebar(uv);\n    else\n        final = drawFunction(uv);\n    \n\tfragColor = vec4(final,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfloat final = texture(iChannel0, fragCoord.xy / iResolution.xy).x;\n    \n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec2 mouse = iMouse.xy / iResolution.y;\n    mouse.x -= 1.0;\n    mouse.x *= iResolution.y / iResolution.x;\n    \n    float sliderNumMouse = floor(mouse.y * 6.0);\n    float sliderNumUV = floor(uv.y * 6.0);\n    if (mouse.x >= 0.0 && sliderNumMouse == sliderNumUV)\n    {\n        final = mouse.x;\n    }\n    \n    final = clamp(final, 0.0, 1.0);\n    \n    fragColor = vec4(final);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}