{
    "Shader": {
        "info": {
            "date": "1692120398",
            "description": "Recreating the SMPTE TV pattern using some math. Started this before seeing https://www.shadertoy.com/view/XlGXRz which uses a different approach. Now with golfing!",
            "flags": 0,
            "hasliked": 0,
            "id": "ctByzK",
            "likes": 4,
            "name": "SMPTE Test Pattern",
            "published": 3,
            "tags": [
                "simple",
                "colors",
                "testpattern",
                "colorbars"
            ],
            "usePreview": 0,
            "username": "martymarty",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "//258 chars even shorter from Fabrice and Greg Rostami \nvoid mainImage( out vec4 O, vec2 u )\n{\n    u /= iResolution.xy;\n    float r = u.x*7.;\n    vec4 z, v = .075+z,\n         c = vec4(0,.22,.35,.5);\n   \n    O = mod( ceil(r/vec4( 2, 4, 1, 0)) , 2. );\n    \n    O = u.y > .33 ? O * .75\n      : u.y > .25 ? vec4(1.-O.xy, O.zz) * .75*O.z\n      : r < 1.25  ? c\n      : r < 2.5   ? v/v\n      : r < 3.75  ? c.yxwx\n      : r < 5.    ? v\n      : r < 5.33  ? z \n      : r < 6. && r > 5.67 ? z+.15 \n      : v;\n}\n\n//271 chars\n/*\nvoid mainImage( out vec4 O, vec2 u )\n{\n    u /= iResolution.xy;\n    float r = u.x*84.;\n    vec4 z, v = .075 +z,\n         c = vec4(0,.22,.35,.5);\n   \n    O = mod( floor(vec4( r/24., r/48., r/12. , 0)) -1. , 2. );\n    \n    O = u.y > .33   ? O * .75\n      : u.y > .25   ? vec4(1.-O.xy, O.zz ) * .75* O.z\n      : r < 15. ? c\n      : r < 30. ? v/v\n      : r < 45. ? c.yxwx\n      : r < 60. ? v\n      : r < 64. ? z \n      : r > 68. && r < 72. ? z+.15 \n      : v;\n}\n*/\n\n/* \n//296 chars from Fabrice and Greg Rostami \nvoid mainImage( out vec4 O, vec2 u )\n{\n    u /= iResolution.xy;\n    float t = u.x*7.-5., r = ceil(t+4.);\n    vec4 z, v = .075 +z,\n         c = vec4(0,.22,.35,.5);\n    \n    O = mod( floor( vec4( r/2., r/4., r+2. , 0) ) -1. , 2. );\n    \n    O = u.y > .33   ? O * .75\n      : u.y > .25   ? vec4(1.-O.xy, O.zz ) * .75* O.z\n      : r < 5.      ? r = ceil(u.x*28.),\n                      r < 6.  ? c\n                    : r < 11. ? v/v\n                    : r < 16. ? c.yxwx\n                    :           v\n      :               t < .33 ? z \n                    : t > .66 && t < 1. ? z+.15 \n                    :           v;\n}\n*/\n\n/*\n// Original implementation \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float rect = floor(uv.x*7.0);\n    vec3 col = vec3(0.0);\n    if(uv.y>(1.0/3.0)){\n        col = 0.75*vec3(floor(mod((rect-2.0)/2.0,2.0)),\n                        floor(mod((rect-4.0)/4.0,2.0)),\n                        floor(mod(rect+1.0,2.0)));\n    }\n    else if(uv.y > 0.25){\n        col = vec3(1.0-floor(mod((rect-2.0)/2.0,2.0)),\n                        1.0-floor(mod((rect-4.0)/4.0,2.0)),\n                        floor(mod(rect+1.0,2.0)));\n        col *= col.b;\n        col *= 0.75;\n    }\n    else if(rect < 5.0){\n        rect = floor(uv.x*28.0);\n        if(rect <= 4.0){\n            col = vec3(0.0,0.22,0.35);\n        }\n        else if(rect <= 9.0){\n            col = vec3(1.0);\n        }\n        else if(rect <= 14.0){\n            col = vec3(0.22,0.0,0.5);\n        }\n        else {\n            col = vec3(0.075);\n        }\n    }\n    else {\n        col = vec3(0.075);\n        float three = uv.x*7.0-5.0;\n        if(three < 0.33333333){\n            col = vec3(0.0);\n        }\n        else if (three > 0.6666666667 && three < 1.0){\n            col = vec3(0.15);\n        }\n    }\n    fragColor = vec4(col,1.0);\n}\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}