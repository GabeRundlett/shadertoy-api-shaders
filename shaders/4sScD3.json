{
    "Shader": {
        "info": {
            "date": "1501195594",
            "description": "A remake of my other shader [url=https://www.shadertoy.com/view/Xl3Gz2]Room with Lamp[/url]. This time I'm adding some basic physics. Click on the lamp to grab and drag it around.",
            "flags": 32,
            "hasliked": 0,
            "id": "4sScD3",
            "likes": 21,
            "name": "Room with Lamp and Physics",
            "published": 3,
            "tags": [
                "mouse",
                "interactive",
                "physics",
                "stateful"
            ],
            "usePreview": 0,
            "username": "glk7",
            "viewed": 923
        },
        "renderpass": [
            {
                "code": "//IMAGE\n\n// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst int STATE = 0;\nconst int WINDOW = 1;\n\nconst ivec2 S0 = ivec2(STATE, 0);\nconst ivec2 S1 = ivec2(STATE, 1);\n//const ivec2 S2 = ivec2(STATE, 2);\n//const ivec2 S3 = ivec2(STATE, 3);\n \nconst ivec2 SELECTION = ivec2(WINDOW, 0);\n\n#define load(P) texelFetch(iChannel1, P, 0)\n\nconst float PI = 3.141592;\n\nconst vec3 lamp = vec3(2.5, 5.0, 2.5);\nconst vec3 room = vec3(15.0); \nconst vec3 cam = room - 0.5;\n\nbool IRayAABox(in vec3 ro, in vec3 rd, in vec3 invrd, in vec3 b, \n               out vec3 p0, out vec3 p1) {\n    vec3 t0 = (-b - ro) * invrd;\n    vec3 t1 = (b - ro) * invrd;\n\n    vec3 tmin = min(t0, t1);\n    vec3 tmax = max(t0, t1);\n    \n    float fmin = max(max(tmin.x, tmin.y), tmin.z);\n    float fmax = min(min(tmax.x, tmax.y), tmax.z);\n    \n    p0 = ro + rd*fmin;\n    p1 = ro + rd*fmax;\n    return fmax >= fmin;   \n}\n\nvec3 AABoxNormal(vec3 b, vec3 p) {\n    return step(1e-5, abs(p + b)) - step(1e-5, abs(p - b));\n}\n\nfloat dAABoxCorners(vec3 b, vec3 p) {\n\tvec3 n1 = abs(b - p);\n    vec3 n2 = abs(b + p);\n    \n    vec3 m1 = 1.0 - step(1e-5, n1);\n    vec3 m2 = 1.0 - step(1e-5, n2);\n    \n    n1 += m1*1e5;\n    n2 += m2*1e5;\n    \n    float d1 = min(min(n1.x, n1.y), n1.z);\n    float d2 = min(min(n2.x, n2.y), n2.z);\n    \n    return min(d1, d2);\n}\n\nfloat udBox( vec3 p, vec3 b ) {\n    return length(max(abs(p)-b,0.0));\n}\n\nvec3 quatRotate(vec4 q, vec3 v) {\n    return 2.0 * dot(q.xyz, v) * q.xyz\n          + (q.w*q.w - dot(q.xyz, q.xyz)) * v\n          + 2.0 * q.w * cross(q.xyz, v);\n}\n\nvec4 quatConjugate(vec4 q) {\n\treturn vec4(-q.xyz, q.w);\n}\n\nmat2x4 getT() {\n    vec4 q = load(S0);\n    vec3 x = load(S1).xyz;\n\n    return mat2x4(q, vec4(x.xyz, 0.0));\n}\n\nvec4 getSelection() {\n\treturn load(SELECTION);   \n}\n\nvec3 Render(in vec3 ro, in vec3 rd) {\n    vec4 sel = getSelection();\n    \n    const float light_intensity = 100.0;\n    float i = light_intensity/(4.0*PI);\n    vec3 lc = vec3(1.0, 0.1, 0.01)*sel.w + vec3(0.01, 0.1, 1.0)*(1.0 - sel.w);\n \n    mat2x4 T = getT();\n   \tmat2x4 invT = mat2x4(quatConjugate(T[0]), -T[1]);\n    \n    vec3 ro_lamp = quatRotate(invT[0], ro + invT[1].xyz);\n    vec3 rd_lamp = quatRotate(invT[0], rd);\n      \n    vec3 p0 = vec3(0.0);\n    vec3 p1 = vec3(0.0);\n    if (IRayAABox(ro_lamp, rd_lamp, 1.0/rd_lamp, lamp, p0, p1)) {\n    \tfloat lcd = dAABoxCorners(lamp, p0);\n       \treturn lc * i * smoothstep(0.19, 0.21, lcd);\n    } \n    \n    IRayAABox(ro, rd, 1.0/rd, room, p0, p1);\n    vec3 n = -AABoxNormal(room, p1);\n    \n    float ldis = udBox(quatRotate(invT[0], p1 + invT[1].xyz), lamp*0.5) + 1.0;\n    vec3 ldir = normalize(T[1].xyz - p1);\n    float li = i/(ldis*ldis);\n\n    return li*lc*0.5*(max(0.0, dot(n, ldir)) + max(0.0, dot(n, normalize(-p1))));\n}\n\nvoid Camera(in vec2 fragCoord, out vec3 ro, out vec3 rd) {\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n\n    vec2 m = vec2(PI*1.25, PI*0.3);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, \n                     0.0, cos(m.y), sin(m.y), \n                     0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), \n                     0.0, 1.0, 0.0, \n                     sin(m.x), 0.0, cos(m.x));\n    \n    mat3 t = rotY * rotX;\n    \n    ro = t * vec3(0.0);\n    ro = cam + ro;\n\n    rd = t * rd;\n    \n    rd = normalize(rd);\n}\n\nvec3 dither(vec2 p, vec3 color) {\n\tfloat l = (color.r + color.g + color.b);\n    \n    //Dave_Haskins hash: https://www.shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    float h = fract((p3.x + p3.y) * p3.z);\n    \n    return color + smoothstep(0.0, 0.3, l) * h * 0.02;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec3 ro = vec3(0.0);\n    vec3 rd = vec3(0.0);\n    \n    Camera(fragCoord, ro, rd);\n    fragColor = vec4(dither(fragCoord, pow(Render(ro, rd), vec3(0.4545))), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//BUF_A\n\n// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst ivec2 MEMORY_BOUNDARY = ivec2(2, 4);\n\nconst int STATE = 0;\nconst int WINDOW = 1;\n\nconst ivec2 S0 = ivec2(STATE, 0);\nconst ivec2 S1 = ivec2(STATE, 1);\nconst ivec2 S2 = ivec2(STATE, 2);\nconst ivec2 S3 = ivec2(STATE, 3);\n\nconst ivec2 SELECTION = ivec2(WINDOW, 0);\nconst ivec2 MOUSE = ivec2(WINDOW, 1);\nconst ivec2 CLICK = ivec2(WINDOW, 2);\nconst ivec2 RESOLUTION = ivec2(WINDOW, 3);\n\n#define store(P, V) if (all(equal(ivec2(fragCoord), P))) fragColor = V\n#define load(P) texelFetch(iChannel1, P, 0)\n\nconst float PI = 3.141592;\nconst vec3 G = vec3(0.0, -9.8, 0.0);\n\nconst vec3 lamp = vec3(2.5, 5.0, 2.5);\nconst vec3 room = vec3(15.0);\nconst vec3 cam = room - 0.5;\n\n\nconst float invMass = 1.0 / 1.0;\nconst mat3 invI_lamp = inverse(\n        mat3((1.0/invMass)*(lamp.x*lamp.x + lamp.y*lamp.y)/3.0, 0.0, 0.0, \n             0.0, (1.0/invMass)*(lamp.x*lamp.x + lamp.z*lamp.z)/3.0, 0.0, \n             0.0, 0.0, (1.0/invMass)*(lamp.x*lamp.x + lamp.y*lamp.y)/3.0));\n\nmat4 getState() {\n    return mat4(load(S0), load(S1), load(S2), load(S3));\n}\n\nvoid storeState(inout vec4 fragColor, in ivec2 fragCoord, mat4 s) {\n    store(S0, s[0]);\n    store(S1, s[1]);\n    store(S2, s[2]);\n    store(S3, s[3]);\n}\n\nbool IRayAABox(in vec3 ro, in vec3 rd, in vec3 invrd, in vec3 b, \n               out vec3 p0, out vec3 p1) {\n    vec3 t0 = (-b - ro) * invrd;\n    vec3 t1 = (b - ro) * invrd;\n\n    vec3 tmin = min(t0, t1);\n    vec3 tmax = max(t0, t1);\n    \n    float fmin = max(max(tmin.x, tmin.y), tmin.z);\n    float fmax = min(min(tmax.x, tmax.y), tmax.z);\n    \n    p0 = ro + rd*fmin;\n    p1 = ro + rd*fmax;\n    return fmax >= fmin;   \n}\n\nvec4 quat(vec3 axis, float rads) {\n    return vec4(sin(rads*0.5)*axis, cos(rads*0.5)); \n}\n\nvec4 quatMult(vec4 q1, vec4 q2) {\n    return vec4(q1.w*q2.xyz + q2.w*q1.xyz + cross(q1.xyz, q2.xyz),\n                q1.w*q2.w - dot(q1.xyz, q2.xyz));\n}\n\nvec3 quatRotate(vec4 q, vec3 v) {\n    return 2.0 * dot(q.xyz, v) * q.xyz\n          + (q.w*q.w - dot(q.xyz, q.xyz)) * v\n          + 2.0 * q.w * cross(q.xyz, v);\n}\n\nvec4 quatConjugate(vec4 q) {\n\treturn vec4(-q.xyz, q.w);    \n}\n\nmat3 quatMat3Cast(vec4 q) {\n    float xx = 2.0*q.x*q.x;\n    float yy = 2.0*q.y*q.y;\n    float zz = 2.0*q.z*q.z;\n    float xy = 2.0*q.x*q.y;\n    float xz = 2.0*q.x*q.z;\n    float yz = 2.0*q.y*q.z;\n\n    float w = 2.0*q.w;\n    float wx = w*q.x;\n    float wy = w*q.y;\n    float wz = w*q.z;\n\n    return mat3(1.0 - yy - zz, xy + wz, xz - wy,\n                xy - wz, 1.0 - xx - zz, yz + wx,\n                xz + wy, yz - wx, 1.0 - xx - yy);\n                               \n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nvec3 sdBoxNormal(vec3 p, vec3 b) {\n    const vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(\n            sdBox(p + e.xyy, b) - sdBox(p - e.xyy, b),\n            sdBox(p + e.yxy, b) - sdBox(p - e.yxy, b),\n            sdBox(p + e.yyx, b) - sdBox(p - e.yyx, b)));\n}\n\nbool Collision(vec3 p, vec3 v, vec3 omega, vec4 n_and_d, out float vrel) {\n    if (n_and_d.w < 0.01) { \n    \tvrel = dot(n_and_d.xyz, v + cross(omega, p));\n        \n        return vrel < 0.0;\n    }\n    \n    return false;\n}\n\nvoid CollisionImpulse(vec3 x, vec4 q, vec3 v, vec3 omega, mat3 invI, inout vec3 P , inout vec3 L) {\n    vec3[8] lamp_box = vec3[](\n        vec3(-lamp.x, -lamp.y, -lamp.z),\n        vec3(lamp.x, -lamp.y, -lamp.z),\n        vec3(-lamp.x, lamp.y, -lamp.z),\n        vec3(lamp.x, lamp.y, -lamp.z),\n        vec3(-lamp.x, -lamp.y, lamp.z),\n        vec3(lamp.x, -lamp.y, lamp.z),\n        vec3(-lamp.x, lamp.y, lamp.z),\n        vec3(lamp.x, lamp.y, lamp.z));\n    \n    vec4[8] normal_and_dist;\n    for (int i = 0; i < 8; ++i) {\n        lamp_box[i] = quatRotate(q, lamp_box[i]);\n    \tvec3 p = lamp_box[i] + x;\n        normal_and_dist[i] = vec4(-sdBoxNormal(p, room), -sdBox(p, room));\n        lamp_box[i].y = max(-room.y, lamp_box[i].y);\n    }\n    \n    for (int s = 0; s < 10; ++s){\n     \tfor (int i = 0; i < 8; ++i) {\n   \t\t\tvec3 p = lamp_box[i];\n            \n            float vrel = 0.0;\n        \tif (Collision(p, v, omega, normal_and_dist[i], vrel)) {\n                const float epsilon = 0.5;\n                vec3 n = normal_and_dist[i].xyz;\n                vec3 f = n*((-vrel*(1.0 + epsilon)) \n                         / (invMass + dot(n, cross(invI*cross(p, n), p))));\n                P += f;\n                L += cross(p, f);\n                \n                v = P*invMass;\n                omega = invI*L;\n        \t}\n        }\n    }\n}\n\nvoid Integrate(in vec3 F, in vec3 T, inout mat4 s) {\n\tvec4 q = s[0];\n    vec3 x = s[1].xyz;\n    vec3 P = s[2].xyz;\n    vec3 L = s[3].xyz;\n\n    vec3 v = P*invMass;\n    mat3 R = quatMat3Cast(q);\n    mat3 invI = R*invI_lamp*transpose(R);\n    vec3 omega = invI*L;\n    \n    x += v*iTimeDelta;\n    q += 0.5 * quatMult(vec4(omega*iTimeDelta, 0.0), q);\n    q = normalize(q);\n\n    CollisionImpulse(x, q, v, omega, invI, P, L);\n    \n    P += F*iTimeDelta;\n\tL += T*iTimeDelta;\n    \n    s = mat4(q, vec4(x, 1.0), vec4(P, 0.0), vec4(L, 0.0));\n}\n\nvoid Camera(in vec2 fragCoord, out vec3 ro, out vec3 rd) {\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n\n    vec2 m = vec2(PI*1.25, PI*0.3);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, \n                     0.0, cos(m.y), sin(m.y), \n                     0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), \n                     0.0, 1.0, 0.0, \n                     sin(m.x), 0.0, cos(m.x));\n    \n    mat3 t = rotY * rotX;\n    \n    ro = t * vec3(0.0);\n    ro = cam + ro;\n\n    rd = t * rd;\n    \n    rd = normalize(rd);\n}\n\n\nbool Init(inout vec4 fragColor, in ivec2 fragCoord) {\n    vec2 resolution = load(RESOLUTION).xy;\n    store(RESOLUTION, vec4(iResolution.xy, 0.0, 0.0));\n    \n    if (iTime == 0.0 || iFrame == 0 || \n        any(notEqual(iResolution.xy, resolution))) {\n\n        mat4 s = mat4(quat(normalize(vec3(1.0, 1.0, 1.0)), 0.4),\n                      vec4(0.0, 0.0, 0.0, 1.0),\n                      vec4(0.0, 0.0, 0.0, 0.0),\n                      vec4(0.0, 0.0, 0.0, 0.0));\n\n        storeState(fragColor, fragCoord, s);  \n        store(SELECTION, vec4(0.0));\n   \t\tstore(MOUSE, vec4(-1.0));\n        store(CLICK, vec4(0.0));\n        \n        return true;\n    }\n    \n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 ifragCoord = ivec2(fragCoord);\n    if (any(greaterThan(ifragCoord, MEMORY_BOUNDARY))) return;\n\n    fragColor = load(ifragCoord);\n\n    if (Init(fragColor, ifragCoord)) return;\n   \n    mat4 s = getState();\n\n    vec3 ro = vec3(0.0);\n    vec3 rd = vec3(0.0);\n    Camera(iMouse.xy, ro, rd);\n    \n    vec4 mouse = load(MOUSE);\n    store(MOUSE, iMouse);\n    \n    vec4 selection = load(SELECTION);\n    \n\tvec3 p0 = vec3(0.0);\n    vec3 p1 = vec3(0.0);\n\n    if (iMouse.w > 0.0) {\n        vec4 invq = quatConjugate(s[0]);\n        vec3 ro_lamp = quatRotate(invq, ro - s[1].xyz);\n        vec3 rd_lamp = quatRotate(invq, rd);\n                \n  \t\tif (IRayAABox(ro_lamp, rd_lamp, 1.0/rd_lamp, lamp, p0, p1)) {\n            selection = vec4(p0, 1.0);\n            store(SELECTION, selection);\n    \t}\n        \n    }\n    else if (iMouse.z < 0.0) { \n        if (selection.w > 0.0) {\n            selection = vec4(0.0);\n            store(SELECTION, selection);\n        }\n    }\n\n    vec3 F = G*(1.0/invMass);\n    vec3 T = vec3(0.0);\n    if (selection.w == 1.0) {\n        IRayAABox(ro, rd, 1.0/rd, room, p0, p1);\n        vec3 p = quatRotate(s[0], selection.xyz);\n        vec3 f = (p1 - s[1].xyz)*(1.0/invMass)*0.6;\n        \n        F += f;\n        T += cross(p, f);\n    }\n\n    Integrate(F, T, s);\n    storeState(fragColor, ifragCoord, s);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}