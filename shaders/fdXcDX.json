{
    "Shader": {
        "info": {
            "date": "1642847716",
            "description": "[url]https://en.wikipedia.org/wiki/Royal_arms_of_England[/url]: first used by Richard I around 1198.\n\nFilled cubic Bezier curves, taken from the Wikipedia SVG, drawn as sequences of line segments, with some bounding boxes to stop things being too slow.",
            "flags": 16,
            "hasliked": 0,
            "id": "fdXcDX",
            "likes": 14,
            "name": "The Royal Banner of England",
            "published": 3,
            "tags": [
                "bezier",
                "flag",
                "fixedpoint",
                "svg",
                "arms"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// The Royal Banner of England, Matthew Arcus, mla. 2022\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// https://en.wikipedia.org/wiki/Royal_arms_of_England, first used by Richard I\n// around 1198. This forms two quarters of what usually known as the Royal\n// Standard (but should really be the \"Royal Banner\").\n//\n// zoom in with mouse\n// 'x' draws progressively\n//\n// Filled cubic Bezier curves, taken from the Wikipedia SVG, drawn as sequences\n// of line segments, with some bounding boxes to stop things being too slow.\n// Using line segments makes it easy to compute filling with the usual winding\n// number calculation.\n//\n// Since the lions overlap slightly in the y-direction, we draw everything\n// twice in the overlapping region (which isn't wide). The code to do this\n// is a little ad hoc.\n//\n// I've tried various other speedups, but nothing that makes a huge amount of\n// difference (I get an adequate 37fps on my Intel box at 512x288). \n// Precalculating the segment bounding boxes doesn't help much & increases\n// the amount of static data considerably. Scanning all the bounding boxes\n// and making a list of boxes to revisit doesn't help much either.\n//\n// [Looks like accessing large amounts of static data is slow, so I've\n// encoded all of the coordinate pairs as 16 bit fixed point integers,\n// packed into 32 bit uints. This gets FPS (on Intel) up to 60 at 512x288].\n//\n// On Nvidia, omitting the const modifiers for the static data greatly increases\n// compilation time (which is about 4 seconds for GTX1650/Linux/FF) [now less\n// than a second with the fixed point data change].\n//\n////////////////////////////////////////////////////////////////////////////////\n\nint wind = 0; // Compute winding number here\nvoid polywind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.y <= 0.0) {\n    if (r.y > 0.0 && t > 0.0) wind++;\n  } else {\n    if (r.y <= 0.0 && t < 0.0) wind--;\n  }\n}\n\n// The usual function, but also include segment in winding number computation\nfloat segment(vec2 p, vec2 q, vec2 r) {\n  polywind(p,q,r);\n  p -= q; r -= q; // Relative to q\n  float t = dot(p,r)/dot(r,r);\n  t = clamp(t, 0.0, 1.0);\n  return length(p-t*r);\n}\n\n#if 0\n// Precalculated coefficients for Bezier curves\n// On Intel anyway, faster to calculate as we go though.\nconst vec4 beziercoeffs[] =\n  vec4[](vec4(1,0,0,0),\n         vec4(0.823975,0.164795,0.0109863,0.000244141),\n         vec4(0.669922,0.287109,0.0410156,0.00195312),\n         vec4(0.536377,0.371338,0.0856934,0.0065918),\n         vec4(0.421875,0.421875,0.140625,0.015625),\n         vec4(0.324951,0.443115,0.201416,0.0305176),\n         vec4(0.244141,0.439453,0.263672,0.0527344),\n         vec4(0.177979,0.415283,0.322998,0.0837402),\n         vec4(0.125,0.375,0.375,0.125),\n         vec4(0.0837402,0.322998,0.415283,0.177979),\n         vec4(0.0527344,0.263672,0.439453,0.244141),\n         vec4(0.0305176,0.201416,0.443115,0.324951),\n         vec4(0.015625,0.140625,0.421875,0.421875),\n         vec4(0.0065918,0.0856934,0.371338,0.536377),\n         vec4(0.00195312,0.0410156,0.287109,0.669922),\n         vec4(0.000244141,0.0109863,0.164795,0.823975),\n         vec4(0,0,0,1));\nconst int nbeziercoeffs = beziercoeffs.length();\nvec4 beziercoeff(int i) {\n  return beziercoeffs[i];\n}\n#else\nconst int nbeziercoeffs = 16;\nvec4 beziercoeff(int i) {\n  // Matrix formulation due to Shane.\n  const int N = nbeziercoeffs;\n  float t = float(i)/float(N);\n  float u = 1.0-t, t2 = t*t, u2 = u*u;\n  return vec4(u*u2,3.0*t*u2,3.0*u*t2,t*t2);\n}\n#endif\n\n// Distance to cubic Bezier curve.\n// Split the path into N subsegments.\nfloat bezier(vec2 p, mat4x2 m) {\n  // Since we spend most of the time deciding not to draw\n  // curves, the value of N doesn't seem to be time critical.\n  const int N = nbeziercoeffs;\n  vec2 q = m[0];\n  float d = 1e8;\n  for (int i = 1; i <= N; i++) {\n    vec2 r = m*beziercoeff(i);\n    d = min(d,segment(p,q,r));\n    q = r;\n  }\n  return d;\n}\n\nvec3 getcolor(int i) {\n  vec3 col = vec3(1,0,1);\n  // Colors from Wikipedia SVG\n  if (i == 0) col = vec3(0xa0,0,0)/255.0;\n  if (i == 1) col = vec3(0x0a,0x26,0x62)/255.0;\n  if (i == 2) col = vec3(0xff,0xd1,0x28)/255.0;\n  if (i == 3) col = vec3(0xff,0xd2,0x14)/255.0;\n  if (i == 4) col = vec3(0);\n  if (i == 5) col = vec3(0xa0,0,0)/255.0;\n  col = pow(col,vec3(2.2));\n  return col;\n}\n\nvec2 decode(uint n) {\n  return vec2(n>>16,n&0xffffu)/64.0;\n}\n\nvec4 decode(uvec2 p) {\n  return vec4(decode(p.x),decode(p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = fragCoord/iResolution.xy;\n  if (iMouse.z > 0.0) {\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    p -= mouse;\n    p *= 0.25;\n    p += mouse;\n  }\n  p.y = 1.0-p.y;\n  p *= vec2(500,250);\n  vec3 col = getcolor(0);\n  float eps = 2.0; // Allow for line width \n  float px = fwidth(p.x);\n  float lwidth = 0.5;\n  // The lions overlap in the y direction, so draw twice, with a shift up,\n  // where necessary. This is a bit of a bodge\n  int M = 2;\n  if (p.y < 77.0) M = 1;\n  else if (p.y < 154.0) p.y -= 77.0;\n  else p.y -= 154.0;\n  if (p.y > 15.0) M = 1; // Draw twice only in a thin band\n  //assert(M == 1); // Check banding\n  for (int j = 0; j < M; j++, p.y += 77.0) {\n    int N = paths.length();\n    if (key(CHAR_X)) N = min(int(2.0*iTime)%60,N); // Progressive effect\n    for (int i = 0; i < N; i++) {\n      vec4 box = decode(boxes[i]);\n      if (p.x >= box.x-eps && p.x <= box.z+eps && p.y >= box.y-eps && p.y <= box.w+eps) {\n        //assert(i != N-1); // With progressive drawing, show bounding boxes\n        int start = i == 0 ? 0 : paths[i-1];\n        int end = paths[i];\n        vec2 initpos = decode(points[start/2]); //vec2(points[start],points[start+1]);\n        vec2 p0 = initpos;\n        wind = 0;\n        float d = 1e8;\n        for (int j = start+2; j < end; j += 6) {\n          vec2 c0 = decode(points[(j+0)/2]);//vec2(points[j+0],points[j+1]);\n          vec2 c1 = decode(points[(j+2)/2]);//vec2(points[j+2],points[j+3]);\n          vec2 p1 = decode(points[(j+4)/2]);vec2(points[j+4],points[j+5]);\n          vec2 box1 = min(min(c0,c1),min(p0,p1))-eps;\n          vec2 box2 = max(max(c0,c1),max(p0,p1))+eps;\n          if (p.x < box1.x || p.y  < box1.y  || p.x > box2.x || p.y > box2.y) {\n            polywind(p,p0,p1);\n          } else {\n            d = min(d,bezier(p,mat4x2(p0,c0,c1,p1)));\n          }\n          p0 = p1;\n        }\n        polywind(p,p0,initpos); // Close curve if necessary\n        if (colors[i] != 0 && (wind&1) == 1) col = getcolor(colors[i]);;\n        col = mix(vec3(0),col,smoothstep(0.0,px,d-lwidth));\n      }\n    }\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col = 1.0-col;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\nconst uint points[] = uint[](\n1023086715u, 1011159039u, 998510476u, 978587518u, 1008602819u, 1029115677u, 1051070385u, \n985666026u, 966398367u, 947196298u, 927928841u, 939593872u, 960761860u, 994513073u, \n1002115894u, 979178328u, 966398998u, 958076183u, 983110749u, 1002640464u, 1021908041u, \n1083577444u, 1081742612u, 1078334958u, 1067652746u, 1093473820u, 1107105133u, 1113855129u, \n1785270954u, 1759777642u, 1765676107u, 1771443499u, 1781535785u, 1793987495u, 1806504746u, \n161419226u, 137170948u, 120328394u, 105714012u, 129700117u, 148246786u, 163516753u, \n170003789u, 162860154u, 142805951u, 114298160u, 138218803u, 156831215u, 172035646u, \n203754858u, 197397685u, 189205519u, 173804453u, 195169197u, 215288779u, 218762517u, \n277875495u, 262474507u, 249629471u, 232590172u, 239602306u, 248187319u, 272763275u, \n259393533u, 250349361u, 237831859u, 221120151u, 237962775u, 256050653u, 280430337u, \n292881882u, 291898653u, 281609340u, 259589120u, 287114206u, 306512942u, 313001264u, \n341050963u, 345245127u, 350553419u, 348062817u, 362284183u, 367396171u, 362940036u, \n1838027821u, 1823085797u, 1826428346u, 1833440916u, 1841698230u, 1850021158u, 1858344109u, \n1954419137u, 1974407631u, 1986007417u, 1990398157u, 1969885389u, 1969885389u, 1949372621u, \n1922569334u, 1934300523u, 1953961237u, 1973621949u, 1958679702u, 1946096726u, 1941967806u, 1929843668u, 1923814421u, 1922569334u, 1922569334u, 1922569334u, 1922569334u, \n230626207u, 215815145u, 204674126u, 190780659u, 191370239u, 193860367u, 215093833u, \n1180503058u, 1179454798u, 1180044935u, 1225723757u, 1186533534u, 1127157977u, 1068503257u, 1037569649u, 1008799532u, 1007751385u, 996675788u, 991367272u, 973017192u, 961613928u, 944181908u, 998183572u, 972100989u, 1057625295u, 1072501611u, 1057232226u, 1124144509u, 1132401731u, 1147999248u, 1151603566u, 1159074544u, 1159271491u, 1153504497u, 1147934117u, 1183126904u, 1207374844u, 1227821685u, 1229460396u, 1221334176u, 1211176326u, 1260721568u, 1267209220u, 1273369189u, 1281823508u, 1283003351u, 1276646574u, 1313543271u, 1309545223u, 1326649931u, 1342575004u, 1375408661u, 1375408234u, 1375407833u, 1319964575u, 1319964177u, 1319963971u, 1340148952u, 1356598355u, 1343818658u, 1343818658u, 1331038961u, 1255738241u, 1255738241u, 1180503058u, 1180503058u, 1180503058u, 1180503058u, \n1007751385u, 1022693622u, 1033441533u, 1048383722u, \n998183572u, 1031738001u, 1031738001u, 1065292431u, \n829229832u, 959712008u, 1361708536u, 1458963960u, 1536951800u, 1610614452u, 1610614852u, 1610615377u, 1463159089u, 1405028657u, 1124534577u, 765791924u, 649792596u, 620564242u, 620564242u, 591335888u, 816322184u, 936971319u, 1186729015u, 1237453879u, 1299647990u, 1330449397u, 1410666918u, 1598885501u, 1730154109u, 1796148861u, 1831669545u, 1847595308u, 1725764012u, 1793528988u, 1832457197u, 1853625737u, 1875777101u, 1901794221u, 1911559533u, 1964774551u, 1940722243u, 1972113891u, 1959464894u, 1941966715u, 1963921181u, 1933577720u, 1893994051u, 1902906802u, 1904086279u, 1943997665u, 1923025872u, 1891175310u, 1852312528u, 1860963164u, 1869613746u, 1878264320u, 1802701172u, 1813974050u, 1784548386u, 1761676322u, 1765018356u, 1730153204u, 1679756020u, 1605832456u, 1440418462u, 1628310548u, 1669597185u, 1771243484u, 1729890121u, 1686898529u, 1641416831u, 1630209532u, 1583940878u, 1475151118u, 1342440718u, 1185089423u, 1127483279u, 1097926543u, 1075840599u, 1023346329u, 1035929391u, 1047267269u, 1046939739u, 1018562350u, 985138967u, 951650054u, 966985628u, 968558642u, 968362184u, 936576960u, 904857385u, 873072595u, 911476932u, 912460211u, 829229491u, \n598741454u, 608834190u, 607392630u, 606934106u, 586290292u, 576001058u, 566039500u, 555160846u, 539039009u, 521147709u, 521737377u, 521213089u, 519050245u, 505943323u, 482088370u, 457774468u, 464327864u, 460919857u, 456790960u, 445584571u, 430052736u, 402593156u, 404821243u, 408294521u, 402592716u, 385357163u, 361698635u, 339285380u, 346952940u, 350688341u, 347476926u, 323163325u, 298194222u, 268506315u, 279647345u, 290329617u, 294851421u, 276501477u, 238359623u, 245895837u, 236917858u, 196940743u, 195695209u, 170463967u, 138482114u, 158076797u, 130420367u, 163318705u, 191106421u, 207752368u, 229248064u, 229248468u, 229249221u, 344134288u, 373166054u, 342560900u, 314577093u, 300355370u, 313331474u, 326045426u, 333581892u, 290721476u, 276237830u, 277548180u, 289344693u, 300616880u, 309726226u, 293473406u, 286395281u, 303631169u, 259460228u, 260311428u, 270338368u, 230361191u, 263521907u, 287770281u, 270402969u, 330826615u, 332531246u, 360645954u, 387385010u, 359139289u, 320145775u, 370674970u, 386469338u, 419172201u, 457183229u, 501944351u, 541790220u, 541790220u, 581636090u, 590221540u, 590221540u, 598741454u, 598741454u, 598741454u, 598741454u, \n225579543u, 214700579u, 204214838u, 195695209u, \n230625608u, 202248455u, 186650498u, 158076797u, \n191106421u, 210898572u, 210898572u, 230625188u, \n270338368u, 280889567u, 287639925u, 295504324u, \n287770281u, 297928425u, 305072054u, 300550233u, \n332138076u, 334497415u, 339806053u, 338430058u, \n318116149u, 374673849u, 434573699u, 487461077u, \n602080847u, 613942485u, 639566649u, 637535933u, 654575007u, 672597368u, 658311087u, 679216794u, 688326519u, 667748776u, 696322303u, 693308623u, 659754122u, 668733093u, 656150753u, 629411609u, 650121366u, 608048000u, 590614847u, 572068614u, 553522152u, 534974806u, 513676166u, 470552824u, 496177026u, 467276044u, 463474240u, 492440795u, 492178644u, 492178644u, 491850957u, 466292010u, 485821126u, 502663917u, 504498822u, 502663752u, 505154066u, 473499998u, 501679463u, 529663811u, 535758181u, 544736360u, 561907319u, 576979933u, 595067983u, 602080847u, 602080847u, 602080847u, 602080847u, \n519243790u, 508495685u, 504105108u, 511838517u, \n658770601u, 676661796u, 669059963u, 661523421u, \n541722601u, 557254849u, 571214054u, 584517831u, 570034805u, 538643014u, 541722601u, 541722601u, 541722601u, 541722601u, \n568331043u, 580913912u, 591006500u, 597756866u, 592186414u, 583732351u, 573770947u, 573836344u, 576523182u, 568331043u, 568331043u, 568331043u, 568331043u, \n541265141u, 537464242u, 538447502u, 523243339u, 551161637u, 569184112u, 591269976u, 587075412u, 591924840u, 609095013u, 587796052u, 584322395u, 573377762u, 562629895u, 551947549u, 541265141u, 541265141u, 541265141u, 541265141u, \n548539647u, 548408969u, 544608127u, 540938430u, 560467932u, 572919728u, 595987904u, 586091916u, 579669288u, 574098617u, 566693100u, 558763282u, 548539647u, 548539647u, 548539647u, 548539647u, \n510987088u, 519506768u, 519506768u, 528026448u, 527437121u, 548736312u, 575147194u, 594546215u, 606998025u, 614272194u, 633146851u, 642780517u, 651168938u, \n1278413538u, 1307642584u, 1322584909u, 1330449397u, \n1851658771u, 1852379878u, 1845564208u, 1832326118u, \n1885868366u, 1885868648u, 1899303550u, 1901728681u, \n1909264578u, 1913065855u, 1909658190u, 1940197964u, \n1942687613u, 1928990585u, 1924272030u, 1916735415u, \n830016264u, 690227976u, 777586242u, 726598657u, 731972620u, 765068248u, 770573961u, 790103463u, 820642999u, 863241339u, 975832029u, 1232274802u, 1298859378u, 1417086322u, 1474691297u, 1543635318u, 1506411095u, 1479214178u, 1447298309u, 1506608389u, 1672610053u, 1746404263u, 1613103835u, 1507264676u, 1408370466u, 1415055233u, 1424951234u, 1440745421u, 1381304773u, 1349191514u, 1192298008u, 1119880579u, 1027671400u, 902301032u, 781059432u, 726075827u, 830015923u, \n1090720486u, 1083708157u, 1074336564u, 1071649663u, \n1124864841u, 1124733888u, 1127552015u, 1132467265u, \n648612487u, 627968613u, 616827358u, 609356079u, 598674168u, 622070850u, 648612487u, 648612487u, 648612487u, 648612487u);\nconst uvec2 boxes[] = uvec2[](\n  uvec2(978587331u,1051070587u),\n  uvec2(927928324u,994513417u),\n  uvec2(958075702u,1021908247u),\n  uvec2(1067652196u,1113855626u),\n  uvec2(1759777450u,1806505259u),\n  uvec2(105713626u,163516764u),\n  uvec2(114297791u,172035646u),\n  uvec2(173804453u,218762602u),\n  uvec2(232589707u,277875548u),\n  uvec2(221119965u,280430589u),\n  uvec2(259589086u,313001434u),\n  uvec2(341050465u,367396484u),\n  uvec2(1823085613u,1858344596u),\n  uvec2(1949372621u,1990398415u),\n  uvec2(1922569150u,1973622123u),\n  uvec2(190779977u,230626547u),\n  uvec2(944179953u,1375409573u),\n  uvec2(1007751385u,1048383741u),\n  uvec2(998183567u,1065292436u),\n  uvec2(591332622u,1972115080u),\n  uvec2(130417527u,608834994u),\n  uvec2(195695127u,225579625u),\n  uvec2(158076797u,230625608u),\n  uvec2(191106421u,230625188u),\n  uvec2(270338271u,295504324u),\n  uvec2(287770281u,305072217u),\n  uvec2(332138076u,339806314u),\n  uvec2(318116053u,487461305u),\n  uvec2(463471417u,696325096u),\n  uvec2(504104773u,519244085u),\n  uvec2(658770468u,676662237u),\n  uvec2(538642409u,584518261u),\n  uvec2(568331000u,597757123u),\n  uvec2(523242722u,609095768u),\n  uvec2(540937401u,595988670u),\n  uvec2(510987088u,651169319u),\n  uvec2(1278413528u,1330449397u),\n  uvec2(1832325651u,1852380134u),\n  uvec2(1885868366u,1901728681u),\n  uvec2(1909264578u,1940197966u),\n  uvec2(1916735353u,1942687671u),\n  uvec2(690225377u,1746406152u),\n  uvec2(1071649510u,1090720639u),\n  uvec2(1124733769u,1132467265u),\n  uvec2(598673711u,648612930u)\n);\n\nconst int paths[] = int[](\n  14,28,42,56,70,84,98,112,126,140,154,168,182,196,222,236,358,366,374,556,750,758,766,774,782,790,798,806,904,912,920,940,966,1004,1036,1062,1070,1078,1086,1094,1102,1176,1184,1192,1212);\n\nconst int colors[boxes.length()] =\n  int[](1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,0,0,0,0, 0,0, 0,3,0,0,4,4,5,1, 0,0,0,0,0, 2,3,0,0,4);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}