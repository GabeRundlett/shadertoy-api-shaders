{
    "Shader": {
        "info": {
            "date": "1584204801",
            "description": "Celebrating Pi's digits the night after Pi Day (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXyR4",
            "likes": 6,
            "name": "Pi Night",
            "published": 3,
            "tags": [
                "text",
                "numerology"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "// \"Pi Night\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Celebrating Pi's digits the night after Pi Day (mouseable)\n\n#define MORE_DIG_1   0   // more digits (slower compile and may not work everywhere)\n#define MORE_DIG_2   0   // even more digits\n#define AA           1   // optional antialiasing\n\n#define txFnt iChannel0\n\nint GetTxChar (vec2 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\n\nvec3 sunDir;\nvec2 qnTex;\nfloat dstFar, txDep;\nconst float pi = 3.14159;\n\nfloat FontTexDf (vec3 p)\n{\n  vec3 tx;\n  float d;\n  int ic;\n  ic = GetTxChar (p.xz);\n  if (ic != 0) {\n    tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n       15. - floor (float (ic) / 16.)) + fract (p.xz)) * (1. / 16.), 1.)).gba - 0.5;\n    qnTex = vec2 (tx.r, - tx.g);\n    d = tx.b + 1. / 256.;\n  } else d = 1.;\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 srd, h;\n  float dHit, dLim, d, w;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  srd = - sign (rd.xz);\n  rdi = 1. / abs (rd);\n  w = txDep;\n  dHit = max (rdi.y * (abs (ro.y) - 0.5 * w - 0.02), 0.);\n  dLim = min (dHit + rdi.y * (w + 0.02), dstFar);\n  for (int j = 0; j < 160; j ++) {\n    p = ro + dHit * rd;\n    h = fract (rdi.xz * fract (srd * p.xz));\n    d = max (FontTexDf (p), abs (p.y) - 0.5 * w);\n    dHit += min (d, 0.01 + min (h.x, h.y));\n    if (d < 0.0001 || dHit > dLim) break;\n  }\n  if (d >= 0.0001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 32. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn;\n  float dstTxt;\n  bgCol = StarPat (rd, 16.);\n  dstTxt = ObjRay (ro, rd);\n  if (dstTxt < dstFar) {\n    ro += rd * dstTxt;\n    if (abs (ro.y) < 0.495 * txDep) vn = normalize (vec3 (qnTex.x, 0.00001, qnTex.y));\n    else vn = vec3 (0., - sign (ro.y * rd.y), 0.);\n    col = vec3 (1., 1., 0.7) * (0.3 + 0.7 * max (dot (sunDir, vn), 0.) +\n       0.4 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.));\n    col = mix (col, bgCol, pow (min (dstTxt / dstFar, 1.), 5.));\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, tCur, tCyc, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = -0.5 * pi;\n  el = -0.33 * pi;\n  if (mPtr.z > 0.) {\n    az -= 3. * pi * mPtr.x;\n    el -= 1.5 * pi * mPtr.y;\n  }\n  ro = vec3 (0.01, 0., -40.);\n  sunDir = normalize (vec3 (0.5, 1., -1.));\n  ro.xz = Rot2D (ro.xz, 0.5 * pi + az);\n  ro.yz = Rot2D (ro.yz, 0.5 * pi + el);\n  sunDir.xz = Rot2D (sunDir.xz, 0.5 * pi + az);\n  sunDir.yz = Rot2D (sunDir.yz, 0.5 * pi + el);\n#if MORE_DIG_2\n  tCyc = 60.;\n#elif MORE_DIG_1\n  tCyc = 30.;\n#else\n  tCyc = 20.;\n#endif\n  txDep = 0.3;\n  ro.z += 1.5 * (tCyc - tCur);\n  ro.x -= 0.5;\n  dstFar = 200.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 2.));\n    rd.xz = Rot2D (rd.xz, 0.5 * pi + az);\n    rd.yz = Rot2D (rd.yz, 0.5 * pi + el);\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\n#define C(c) _ic = (_nc -- == 0) ? (c) : _ic;\n\n#define _0     C(0x30)\n#define _1     C(0x31)\n#define _2     C(0x32)\n#define _3     C(0x33)\n#define _4     C(0x34)\n#define _5     C(0x35)\n#define _6     C(0x36)\n#define _7     C(0x37)\n#define _8     C(0x38)\n#define _9     C(0x39)\n\nint GetTxChar (vec2 p)\n{\n  vec2 fp;\n  ivec2 ip;\n  float d;\n  int _ic, _nc;\n  fp = floor (p);\n  fp.y = - fp.y;\n#if MORE_DIG_2\n  fp.y = mod (fp.y, 38.);\n#elif MORE_DIG_1\n  fp.y = mod (fp.y, 21.);\n#else\n  fp.y = mod (fp.y, 12.);\n#endif\n  ip = ivec2 (fp);\n  ip.x += 20;\n  _nc = ip.x;\n  _ic = 0;\n  if (ip.x >= 0 && ip.x < 80) {\n    if (ip.y ==  0) { _3 _1 _4 _1 _5 _9 _2 _6 _5 _3 _5 _8 _9 _7 _9 _3 _2 _3 _8 _4 _6 _2 _6 _4 _3 _3 _8 _3 _2 _7 _9 _5 _0 _2 _8 _8 _4 _1 _9 }\n    if (ip.y ==  1) { _7 _1 _6 _9 _3 _9 _9 _3 _7 _5 _1 _0 _5 _8 _2 _0 _9 _7 _4 _9 _4 _4 _5 _9 _2 _3 _0 _7 _8 _1 _6 _4 _0 _6 _2 _8 _6 _2 _0 }\n    if (ip.y ==  2) { _8 _9 _9 _8 _6 _2 _8 _0 _3 _4 _8 _2 _5 _3 _4 _2 _1 _1 _7 _0 _6 _7 _9 _8 _2 _1 _4 _8 _0 _8 _6 _5 _1 _3 _2 _8 _2 _3 _0 }\n    if (ip.y ==  3) { _6 _6 _4 _7 _0 _9 _3 _8 _4 _4 _6 _0 _9 _5 _5 _0 _5 _8 _2 _2 _3 _1 _7 _2 _5 _3 _5 _9 _4 _0 _8 _1 _2 _8 _4 _8 _1 _1 _1 }\n    if (ip.y ==  4) { _7 _4 _5 _0 _2 _8 _4 _1 _0 _2 _7 _0 _1 _9 _3 _8 _5 _2 _1 _1 _0 _5 _5 _5 _9 _6 _4 _4 _6 _2 _2 _9 _4 _8 _9 _5 _4 _9 _3 }\n    if (ip.y ==  5) { _0 _3 _8 _1 _9 _6 _4 _4 _2 _8 _8 _1 _0 _9 _7 _5 _6 _6 _5 _9 _3 _3 _4 _4 _6 _1 _2 _8 _4 _7 _5 _6 _4 _8 _2 _3 _3 _7 _8 }\n    if (ip.y ==  6) { _6 _7 _8 _3 _1 _6 _5 _2 _7 _1 _2 _0 _1 _9 _0 _9 _1 _4 _5 _6 _4 _8 _5 _6 _6 _9 _2 _3 _4 _6 _0 _3 _4 _8 _6 _1 _0 _4 _5 }\n    if (ip.y ==  7) { _4 _3 _2 _6 _6 _4 _8 _2 _1 _3 _3 _9 _3 _6 _0 _7 _2 _6 _0 _2 _4 _9 _1 _4 _1 _2 _7 _3 _7 _2 _4 _5 _8 _7 _0 _0 _6 _6 _0 }\n    if (ip.y ==  8) { _6 _3 _1 _5 _5 _8 _8 _1 _7 _4 _8 _8 _1 _5 _2 _0 _9 _2 _0 _9 _6 _2 _8 _2 _9 _2 _5 _4 _0 _9 _1 _7 _1 _5 _3 _6 _4 _3 _6 }\n    if (ip.y ==  9) { _7 _8 _9 _2 _5 _9 _0 _3 _6 _0 _0 _1 _1 _3 _3 _0 _5 _3 _0 _5 _4 _8 _8 _2 _0 _4 _6 _6 _5 _2 _1 _3 _8 _4 _1 _4 _6 _9 _5 }\n    if (ip.y == 10) { _1 _9 _4 _1 _5 _1 _1 _6 _0 _9 _4 _3 _3 _0 _5 _7 _2 _7 _0 _3 _6 _5 _7 _5 _9 _5 _9 _1 _9 _5 _3 _0 _9 _2 _1 _8 _6 _1 _1 }\n#if MORE_DIG_1\n    if (ip.y == 11) { _7 _3 _8 _1 _9 _3 _2 _6 _1 _1 _7 _9 _3 _1 _0 _5 _1 _1 _8 _5 _4 _8 _0 _7 _4 _4 _6 _2 _3 _7 _9 _9 _6 _2 _7 _4 _9 _5 _6 }\n    if (ip.y == 12) { _7 _3 _5 _1 _8 _8 _5 _7 _5 _2 _7 _2 _4 _8 _9 _1 _2 _2 _7 _9 _3 _8 _1 _8 _3 _0 _1 _1 _9 _4 _9 _1 _2 _9 _8 _3 _3 _6 _7 }\n    if (ip.y == 13) { _3 _3 _6 _2 _4 _4 _0 _6 _5 _6 _6 _4 _3 _0 _8 _6 _0 _2 _1 _3 _9 _4 _9 _4 _6 _3 _9 _5 _2 _2 _4 _7 _3 _7 _1 _9 _0 _7 _0 }\n    if (ip.y == 14) { _2 _1 _7 _9 _8 _6 _0 _9 _4 _3 _7 _0 _2 _7 _7 _0 _5 _3 _9 _2 _1 _7 _1 _7 _6 _2 _9 _3 _1 _7 _6 _7 _5 _2 _3 _8 _4 _6 _7 }\n    if (ip.y == 15) { _4 _8 _1 _8 _4 _6 _7 _6 _6 _9 _4 _0 _5 _1 _3 _2 _0 _0 _0 _5 _6 _8 _1 _2 _7 _1 _4 _5 _2 _6 _3 _5 _6 _0 _8 _2 _7 _7 _8 }\n    if (ip.y == 16) { _5 _7 _7 _1 _3 _4 _2 _7 _5 _7 _7 _8 _9 _6 _0 _9 _1 _7 _3 _6 _3 _7 _1 _7 _8 _7 _2 _1 _4 _6 _8 _4 _4 _0 _9 _0 _1 _2 _2 }\n    if (ip.y == 17) { _4 _9 _5 _3 _4 _3 _0 _1 _4 _6 _5 _4 _9 _5 _8 _5 _3 _7 _1 _0 _5 _0 _7 _9 _2 _2 _7 _9 _6 _8 _9 _2 _5 _8 _9 _2 _3 _5 _4 }\n    if (ip.y == 18) { _2 _0 _1 _9 _9 _5 _6 _1 _1 _2 _1 _2 _9 _0 _2 _1 _9 _6 _0 _8 _6 _4 _0 _3 _4 _4 _1 _8 _1 _5 _9 _8 _1 _3 _6 _2 _9 _7 _7 }\n    if (ip.y == 19) { _4 _7 _7 _1 _3 _0 _9 _9 _6 _0 _5 _1 _8 _7 _0 _7 _2 _1 _1 _3 _4 _9 _9 _9 _9 _9 _9 _8 _3 _7 _2 _9 _7 _8 _0 _4 _9 _9 _5 }\n#endif\n#if MORE_DIG_2\n    if (ip.y == 20) { _1 _0 _5 _9 _7 _3 _1 _7 _3 _2 _8 _1 _6 _0 _9 _6 _3 _1 _8 _5 _9 _5 _0 _2 _4 _4 _5 _9 _4 _5 _5 _3 _4 _6 _9 _0 _8 _3 _0 }\n    if (ip.y == 21) { _2 _6 _4 _2 _5 _2 _2 _3 _0 _8 _2 _5 _3 _3 _4 _4 _6 _8 _5 _0 _3 _5 _2 _6 _1 _9 _3 _1 _1 _8 _8 _1 _7 _1 _0 _1 _0 _0 _0 }\n    if (ip.y == 22) { _3 _1 _3 _7 _8 _3 _8 _7 _5 _2 _8 _8 _6 _5 _8 _7 _5 _3 _3 _2 _0 _8 _3 _8 _1 _4 _2 _0 _6 _1 _7 _1 _7 _7 _6 _6 _9 _1 _4 }\n    if (ip.y == 23) { _7 _3 _0 _3 _5 _9 _8 _2 _5 _3 _4 _9 _0 _4 _2 _8 _7 _5 _5 _4 _6 _8 _7 _3 _1 _1 _5 _9 _5 _6 _2 _8 _6 _3 _8 _8 _2 _3 _5 }\n    if (ip.y == 24) { _3 _7 _8 _7 _5 _9 _3 _7 _5 _1 _9 _5 _7 _7 _8 _1 _8 _5 _7 _7 _8 _0 _5 _3 _2 _1 _7 _1 _2 _2 _6 _8 _0 _6 _6 _1 _3 _0 _0 }\n    if (ip.y == 25) { _1 _9 _2 _7 _8 _7 _6 _6 _1 _1 _1 _9 _5 _9 _0 _9 _2 _1 _6 _4 _2 _0 _1 _9 _8 _9 _3 _8 _0 _9 _5 _2 _5 _7 _2 _0 _1 _0 _6 }\n    if (ip.y == 26) { _5 _4 _8 _5 _8 _6 _3 _2 _7 _8 _8 _6 _5 _9 _3 _6 _1 _5 _3 _3 _8 _1 _8 _2 _7 _9 _6 _8 _2 _3 _0 _3 _0 _1 _9 _5 _2 _0 _3 }\n    if (ip.y == 27) { _5 _3 _0 _1 _8 _5 _2 _9 _6 _8 _9 _9 _5 _7 _7 _3 _6 _2 _2 _5 _9 _9 _4 _1 _3 _8 _9 _1 _2 _4 _9 _7 _2 _1 _7 _7 _5 _2 _8 }\n    if (ip.y == 28) { _3 _4 _7 _9 _1 _3 _1 _5 _1 _5 _5 _7 _4 _8 _5 _7 _2 _4 _2 _4 _5 _4 _1 _5 _0 _6 _9 _5 _9 _5 _0 _8 _2 _9 _5 _3 _3 _1 _1 }\n    if (ip.y == 29) { _6 _8 _6 _1 _7 _2 _7 _8 _5 _5 _8 _8 _9 _0 _7 _5 _0 _9 _8 _3 _8 _1 _7 _5 _4 _6 _3 _7 _4 _6 _4 _9 _3 _9 _3 _1 _9 _2 _5 }\n    if (ip.y == 30) { _5 _0 _6 _0 _4 _0 _0 _9 _2 _7 _7 _0 _1 _6 _7 _1 _1 _3 _9 _0 _0 _9 _8 _4 _8 _8 _2 _4 _0 _1 _2 _8 _5 _8 _3 _6 _1 _6 _0 }\n    if (ip.y == 31) { _3 _5 _6 _3 _7 _0 _7 _6 _6 _0 _1 _0 _4 _7 _1 _0 _1 _8 _1 _9 _4 _2 _9 _5 _5 _5 _9 _6 _1 _9 _8 _9 _4 _6 _7 _6 _7 _8 _3 }\n    if (ip.y == 32) { _7 _4 _4 _9 _4 _4 _8 _2 _5 _5 _3 _7 _9 _7 _7 _4 _7 _2 _6 _8 _4 _7 _1 _0 _4 _0 _4 _7 _5 _3 _4 _6 _4 _6 _2 _0 _8 _0 _4 }\n    if (ip.y == 33) { _6 _6 _8 _4 _2 _5 _9 _0 _6 _9 _4 _9 _1 _2 _9 _3 _3 _1 _3 _6 _7 _7 _0 _2 _8 _9 _8 _9 _1 _5 _2 _1 _0 _4 _7 _5 _2 _1 _6 }\n    if (ip.y == 34) { _2 _0 _5 _6 _9 _6 _6 _0 _2 _4 _0 _5 _8 _0 _3 _8 _1 _5 _0 _1 _9 _3 _5 _1 _1 _2 _5 _3 _3 _8 _2 _4 _3 _0 _0 _3 _5 _5 _8 }\n    if (ip.y == 35) { _7 _6 _4 _0 _2 _4 _7 _4 _9 _6 _4 _7 _3 _2 _6 _3 _9 _1 _4 _1 _9 _9 _2 _7 _2 _6 _0 _4 _2 _6 _9 _9 _2 _2 _7 _9 _6 _7 _8 }\n#endif\n  }\n  return _ic;\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}