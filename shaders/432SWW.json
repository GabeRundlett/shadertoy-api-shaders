{
    "Shader": {
        "info": {
            "date": "1710603481",
            "description": "DJ pillow",
            "flags": 0,
            "hasliked": 0,
            "id": "432SWW",
            "likes": 7,
            "name": "DJ Pillow",
            "published": 3,
            "tags": [
                "pillow"
            ],
            "usePreview": 0,
            "username": "tlloyd2002",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvoid erot(inout vec3 p, vec3 ax, float ro) {\n  p = mix(dot(ax,p)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nvec2 id;\nfloat scene(vec3 p) {\n  float scale=1.3;\n  id = floor(p.xy/scale);\n  p.xy = (fract(p.xy/scale)-0.5)*scale;\n  erot(p,vec3(0,0,1),acos(-1.)*0.25);\n  return (length(vec3(length(p.xy)-2.41, length(p.yz), length(p.zx))+0.8)-2.)/sqrt(2.);\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p) - mat3(0.001);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat smin(float a, float b, float k) {\n  float h  = max(0.,k-abs(a-b))/k;\n  return min(a,b)-h*h*h*k/6.;\n}\nvec3 smin(vec3 a, vec3 b, float k) {\n  vec3 h = max(vec3(0.),k-abs(a-b))/k;\n  return min(a,b)-h*h*h*k/6.;\n}\n\n#define FK(k) floatBitsToInt(k)^floatBitsToInt(cos(k))\nfloat hash(vec2 p) {\n  int x = FK(p.x); int y = FK(p.y);\n  return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord - .5* iResolution.xy ) / iResolution.y;\n\n  vec3 cam = normalize(vec3(0.9,uv));\n  vec3 init = vec3(-4,0,0);\n  erot(cam,vec3(0,1,0),0.8);\n  erot(init,vec3(0,1,0),0.8);\n  erot(cam,vec3(0,0,1),iTime/4.);\n  erot(init,vec3(0,0,1),iTime/4.);\n  vec3 p = init;\n  bool hit = false;\n  float mini = 1000.;\n  for (int i = 0; i < 150; i++) {\n    float dist = scene(p);\n    mini = min(dist,mini);\n    if (dist*dist < 0.00001) {hit = true; break;}\n    if (distance(init, p) > 100.) break;\n    p+= cam*dist;\n  }\n  vec3 n = norm(p);\n  float factor = 2.5;\n  float diffuse = length(sin(n*factor)*0.5+0.5)/sqrt(3.);\n  float frensel = 1.-abs(dot(cam, n))*0.98;\n  float spec = pow(length(sin(reflect(cam, n)*factor)*0.5+0.5)/sqrt(3.),8.);\n  float hs = hash(vec2(hash(id),floor(iTime/60.*140.)));\n  vec3 color = vec3(1.5);\n  if (hs < 0.3) color = vec3(1.6,1.2,0.4);\n  if (hs < -0.3) color = vec3(0.2,1.2,1.6);\n  fragColor.xyz = hit ? color*diffuse+mix(color,vec3(2),0.9)*frensel*spec : vec3(0.75)*smoothstep(-0.05,0.05,mini);\n  fragColor.xyz*=smoothstep(1.3,0.5,length(uv));\n  fragColor.xyz=pow(fragColor.xyz,vec3(0.55,0.55,0.55));\n  fragColor.xyz = smin(fragColor.xyz, vec3(0.99), 0.5)/0.99;\n  fragColor.xyz=pow(fragColor.xyz+hash(uv+iTime)*0.03,vec3(1.5));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}