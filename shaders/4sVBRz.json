{
    "Shader": {
        "info": {
            "date": "1527471788",
            "description": "Simple ring shape",
            "flags": 0,
            "hasliked": 0,
            "id": "4sVBRz",
            "likes": 1,
            "name": "Fuzzy White Ring",
            "published": 3,
            "tags": [
                "simple",
                "ring",
                "mit",
                "dlb"
            ],
            "usePreview": 0,
            "username": "dandymcgee",
            "viewed": 617
        },
        "renderpass": [
            {
                "code": "/*Copyright (c) 2018 Dan Bechard\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy of\n* this software and associated documentation files (the \"Software\"), to deal in\n* the Software without restriction, including without limitation the rights to\n* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n* the Software, and to permit persons to whom the Software is furnished to do so,\n* subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// NOTE: The goal of this shader is to make a very approachable introduction to a\n//\t     basic shape. Please see the discussion in the comments for some great\n//       suggestions to reduce verbosity and simplify some logic.\n\nfloat ring(vec2 st)\n{\n    float r = 0.4;   \t\t\t\t\t\t\t\t// radius\n    float dr = 0.15; \t\t\t\t\t\t\t\t// delta radius (thickness)\n    \t\t\t\t\t\t\n    float d = length(st);\t\t\t\t\t\t\t// distance of this pixel from origin\n    float c = smoothstep(r, r - (dr / 2.0), d) + \t// calculate color of this pixel based on\n        \t  smoothstep(r, r + (dr / 2.0), d); \t// ring parameters\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy - 0.5;\t\t// Center image\n    uv.x *= iResolution.x / iResolution.y;  \t\t// Adjust for aspect ratio\n    \n\tfragColor = vec4(1.0 - ring(uv));\t\t\t\t// Inverted ring color (white-on-black)\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}