{
    "Shader": {
        "info": {
            "date": "1676485423",
            "description": "Analytical projection to a hyperbola, which can be solved with a quartic equation. \nVisualization code from iq : https://www.shadertoy.com/view/4sS3zz",
            "flags": 0,
            "hasliked": 0,
            "id": "ctBSDG",
            "likes": 1,
            "name": "Hyperbola - projection 2D",
            "published": 3,
            "tags": [
                "2d",
                "distance",
                "analytic",
                "hyperbola"
            ],
            "usePreview": 0,
            "username": "Paul_31415",
            "viewed": 154
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n// Analytical distance to an 2D ellipse, which is more\n// complicated than it seems. It ends up being a quartic\n// equation, which can be resolved through a cubic, then\n// a quadratic. Some steps through the derivation can be\n// found in this article: \n//\n// https://iquilezles.org/articles/ellipsedist\n//\n//\n// Ellipse distances related shaders:\n//\n// Analytical     : https://www.shadertoy.com/view/4sS3zz\n// Newton Trig    : https://www.shadertoy.com/view/4lsXDN\n// Newton No-Trig : https://www.shadertoy.com/view/tttfzr \n// ?????????????? : https://www.shadertoy.com/view/tt3yz7\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\nfloat msign(in float x) { return (x<0.0)?-1.0:1.0; }\n\n\n\n\n\n// MIT License\n// Copyright © 2023 Paul Soulanille\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat cbrt(in float x) {\n    return sign(x)*pow(abs(x),1.0/3.0);\n}\nfloat quart(in float x) {\n    x *= x;\n    return x*x;\n}\n\n// Hyperbola \n//  \n// y=1/t       |\n// x=t         \\__\n// rotate 45°  (we do this to be able to change the open angle via x and y scaling)\n// x = t-1/t     \\_/\n// y = t+1/t\n// has min Y at 2 and focus at 2√2\n//     \n//  z,w s.t. |(x,y)-(z,w)| is min\n//       https://www.wolframalpha.com/input?i=d%2Fdt+%28%28a*%28t-1%2Ft%29-z%29%5E2%2B%28b*%28t%2B1%2Ft%29-w%29%5E2+%29+\n//  (2 a^2 t^4 - 2 a^2 - 2 a t^3 z - 2 a t z + 2 b^2 t^4 - 2 b^2 - 2 b t^3 w + 2 b t w)/t^3 = 0\n//  t^4 : 2 a^2 + 2 b^2 \n//  t^3 : - 2 a z - 2 b w\n//  t^2 : 0\n//  t   : - 2 a z + 2 b w\n//  1   : - 2 a^2 - 2 b^2\n// using: https://en.wikipedia.org/wiki/Quartic_equation#Summary_of_Ferrari's_method\n// let r^2 = a^2 + b^2\n// coeffs (A…E): 2r^2, -2(ab•zw), 0, -2((a,b)•(z,-w)), -2r^2\n//  α = -3/8 (B/A)^2 + C/A\n//  β = 1/8 (B/A)^3 - 1/2 BC/A^2 + D/A\n//  γ = - 3/256 (B/A)^4 + 1/16 CB^2/A^3 - 1/4 BD/A^2 + E/A\n// \n// when β = 0\n//  t = -B/4A ± √((-α ± √(α^2-4γ))/2)\n// else\n//  P = - α^2/12 - γ\n//  Q = - α^3/108 + αγ/3 - β^2/8\n//  R = - Q/2 ± √((Q/2)^2 + (P/3)^3)\n//  U = ∛R\n//\n//  d = -5/6 α + (U==0? -∛Q : U - P/(3U))\n//  W = √(α + 2d)\n//  t = -B/4A + 1/2( ±_s W ± √(-(3α + 2d ±_s 2β/W)))\n//\n//\n\n\n// currently suffers from precision loss in some areas\n//  which can be shown by uncommenting \"col = p.x<m.x?ploss: col;\" in mainImage\n//\nvec2 pHyperbola( vec2 p, in vec2 ab){\n    \n    //vec2 s1 = pHyperbola_sols(p,ab,1.0,1.0);\n    //vec2 s2 = pHyperbola_sols(p,ab,-1.0,1.0);\n    //vec2 s3 = pHyperbola_sols(p,ab,-1.0,-1.0);\n    //vec2 s4 = pHyperbola_sols(p,ab,1.0,-1.0);\n    //s1 = (length(s1-p)<length(s2-p))?s1:s2;\n    //s2 = (length(s3-p)<length(s4-p))?s3:s4;\n    //s1 = (length(s1-p)<length(s2-p))?s1:s2; \n    //return s1;\n    float sx = sign(p.x);\n    \n    float r2 = ab.x*ab.x+ab.y*ab.y;\n    float az = ab.x*abs(p.x);\n    float bw = ab.y*p.y;\n    \n    float A = 2.0*r2;\n    float B = -2.0*(az+bw);\n    float D = -2.0*(az-bw);\n    \n    \n    float boa = B/A;\n    float doa = D/A;\n    float boa2 = boa*boa;\n    \n    \n    //  α = -3/8 (B/A)^2 + C/A\n    float alpha = -0.375 * boa2;\n    //  β = 1/8 (B/A)^3 - 1/2 BC/A^2 + D/A\n    float beta  = 0.125 * boa2*boa + doa;\n    //  γ = - 3/256 (B/A)^4 + 1/16 CB^2/A^3 - 1/4 BD/A^2 + E/A\n    float gamma = -3.0/256.0 * (boa2*boa2) - 0.25 * boa*doa - 1.0;\n    //          = (-3/256 boa^3 - 1/4 doa)*boa - 1\n    //          _     ⎛az+bw⎞4   ⎛az+bw⎞⎛az-bw⎞\n    //          ¯  -3 ⎝¯4¯r2⎠  - ⎝¯4¯r2⎠⎝¯r2¯¯⎠ - 1\n    //          = \n    //          -(3 x^4)/(256 d^4) - (3 x^3 y)/(64 d^4) - (9 x^2 y^2)/(128 d^4) - (3 x y^3)/(64 d^4) - (3 y^4)/(256 d^4) - x^2/(4 d^2) + y^2/(4 d^2) - 1\n    //float gamma = -3.0/256.0 * quart(az / r2) - 3.0*(az\n    \n    \n    // when β = 0\n    //  t = -B/4A ± √((-α ± √(α^2-4γ))/2)\n    //t = -0.25*boa + s1*sqrt(0.5*(-alpha + s2*sqrt(alpha * alpha - 4.0*gamma)));\n    // else\n    float alpha2 = alpha * alpha;\n    //  P = - α^2/12 - γ\n    //float P = - alpha2 / 12.0 - gamma;\n    //  P = - (3/8 * boa2)^2/12 - (-3.0/256.0 * (boa2*boa2) - 0.25 * boa*doa - 1.0);\n    //    = - 3/256 boa^4 + 3.0/256.0 * (boa2*boa2) + 0.25 * boa*doa + 1.0;\n    //    = 0.25 * boa*doa + 1.0;\n    float P = 0.25 * boa*doa + 1.0;\n    \n    //  Q = - α^3/108 + αγ/3 - β^2/8\n    float Q = - alpha*(alpha2 / 108.0 - gamma/3.0) - beta*beta / 8.0;\n    //  R = - Q/2 ± √((Q/2)^2 + (P/3)^3)\n    float R = - Q * 0.5 + sign(-Q)*sqrt(abs(Q*Q*0.25 + P*P*P/27.0));\n    //                     ^^^ lowers cancellation error\n    \n    \n    //  U = ∛R\n    float U = cbrt(R);\n    \n    //  d = -5/6 α + (U==0? -∛Q : U - P/(3U))\n    float dp56a = (abs(U)<=0.0? -cbrt(Q) : U - P/(3.0*U));\n    float d = -5.0/6.0 * alpha + dp56a;\n    //  W = √(α + 2d)\n    //float W = sqrt(abs(alpha + 2.0 * d));\n    //  W = √(α + -5/3 α + (U==0? -2∛Q : 2U - 2P/(3U))\n    //    = √(-2/3 α + )\n    float W = sqrt(abs(-2.0/3.0 * alpha + 2.0 * dp56a));\n    //  W = √(-2/3 α + (U==0? -∛Q : U - P/(3U))\n    // case U==0\n    //  W = √(-2/3 α -∛Q)\n    //    = √(-2/3 α -∛(- α^3/108 + αγ/3 - β^2/8))\n    // case U!=0\n    //  W = √(-2/3 α + U + (α^2/12 + γ)/(3U))\n    //    = √(-2/3 α + U - P/(3U))\n    //  W = √(-2/3 α + ∛R - P/(3∛R))\n    \n    \n    //  t = -B/4A + 1/2( ±_s W ± √(-(3α + 2d ±_s 2β/W)))\n    //float t1 = -boa*0.25 + 0.5 * (W + sqrt(abs(3.0*alpha + 2.0*d + 2.0*beta/W)));\n    //float t2 = -boa*0.25 + 0.5 * (-W + sqrt(abs(3.0*alpha + 2.0*d + -2.0*beta/W)));\n    //        3α + 2d = 3α + 2(-5/6 α  + dp56a)\n    //                = (3-5/3) α  + 2 dp56a\n    //                =  4/3 α  + 2 dp56a\n    float t1 = -boa*0.25 + 0.5 * (W + sqrt(abs(4.0/3.0*alpha + 2.0*dp56a + 2.0*beta/W)));\n    float t2 = -boa*0.25 + 0.5 * (-W + sqrt(abs(4.0/3.0*alpha + 2.0*dp56a + -2.0*beta/W)));\n    \n    float recip_t1 = 1.0/t1;\n    float recip_t2 = 1.0/t2;\n    vec2 p1 = vec2((t1-recip_t1)*sx,t1+recip_t1)*ab;\n    vec2 p2 = vec2((t2-recip_t2)*sx,t2+recip_t2)*ab;\n    return (length(p1-p)<length(p2-p) && p1.y>=0.0) || p2.y < 0.0?p1:p2;\n    \n}\n\n//using the \"locus of points\" geometric defn of hyperbola\nfloat inside_Hyperbola( vec2 p, in vec2 ab){\n    float sqrt2 = sqrt(2.0);//foci are at (0,±√2)\n    p /= ab;\n    p /= 2.0;\n    return sign(length(p-vec2(0,sqrt2))-length(p-vec2(0,-sqrt2))+2.0);\n}\n\n\n//precision loss testing\nfloat add_ploss(in float a, in float b){\n    return -log2(abs(a+b)/(abs(a)+abs(b)))/24.0;\n}\nvec3 pHyperbola_loss( vec2 p, in vec2 ab)\n{\n    \n                                                                                                  \n    float loss1 = 0.0;\n    float loss2 = 0.0;\n    float loss3 = 0.0;\n    \n    float sx = sign(p.x);\n    \n    float r2 = ab.x*ab.x+ab.y*ab.y;\n    float az = ab.x*abs(p.x);\n    float bw = ab.y*p.y;\n    \n    float A = 2.0*r2;\n    float B = -2.0*(az+bw);\n    float D = -2.0*(az-bw);\n    \n    \n    float boa = B/A;\n    float doa = D/A;\n    float boa2 = boa*boa;\n    \n    \n    //  α = -3/8 (B/A)^2 + C/A\n    float alpha = -0.375 * boa2;\n    //  β = 1/8 (B/A)^3 - 1/2 BC/A^2 + D/A\n    float beta  = 0.125 * boa2*boa + doa;\n    //loss3 = add_ploss(0.125 * boa2*boa, doa);\n    //  γ = - 3/256 (B/A)^4 + 1/16 CB^2/A^3 - 1/4 BD/A^2 + E/A\n    float gamma = -3.0/256.0 * (boa2*boa2) - 0.25 * boa*doa - 1.0;\n    //loss3 = add_ploss(-3.0/256.0 * (boa2*boa2) ,- 0.25 * boa*doa-1.0);\n    loss3 = add_ploss(-3.0/256.0 * (boa2*boa2) - 0.25 * boa*doa,-1.0);\n    // when β = 0\n    //  t = -B/4A ± √((-α ± √(α^2-4γ))/2)\n    //t = -0.25*boa + s1*sqrt(0.5*(-alpha + s2*sqrt(alpha * alpha - 4.0*gamma)));\n    // else\n    float alpha2 = alpha * alpha;\n    //  P = - α^2/12 - γ\n    float P = - alpha2 / 12.0 - gamma;\n    loss1 = add_ploss(alpha2 / 12.0,gamma);\n    //  Q = - α^3/108 + αγ/3 - β^2/8\n    float Q = - alpha*(alpha2 / 108.0 - gamma/3.0) - beta*beta / 8.0;\n    //loss3 = add_ploss(alpha2 / 108.0, - gamma/3.0);\n    //loss3 = add_ploss(- alpha*(alpha2 / 108.0 - gamma/3.0),- beta*beta / 8.0); \n    //  R = - Q/2 ± √((Q/2)^2 + (P/3)^3)\n    float R = - Q * 0.5 + sign(-Q)*sqrt(abs(Q*Q*0.25 + P*P*P/27.0));\n    //loss3 = add_ploss(Q*Q*0.25,P*P*P/27.0);\n    //loss3 = add_ploss(- Q * 0.5,sqrt(abs(Q*Q*0.25 + P*P*P/27.0))); //lines up with P in upper half, fixed\n    //  U = ∛R\n    float U = cbrt(R);\n    \n    //  d = -5/6 α + (U==0? -∛Q : U - P/(3U))\n    float d = -5.0/6.0 * alpha + (abs(U)<=0.0? -cbrt(Q) : U - P/(3.0*U));\n    //loss3 = add_ploss(-5.0/6.0 * alpha, (abs(U)<=0.0? -cbrt(Q) : U - P/(3.0*U))); //not here\n    //loss3 = add_ploss(U, - P/(3.0*U));// not here\n    //  W = √(α + 2d)\n    //float W = sqrt(abs(alpha + 2.0 * d));\n    //loss2 = add_ploss(alpha,2.0*d);\n    float W = sqrt(abs(-2.0/3.0 * alpha + 2.0 * (abs(U)<=0.0? -cbrt(Q) : U - P/(3.0*U))));\n    loss2 = add_ploss(-2.0/3.0 * alpha,2.0*(abs(U)<=0.0? -cbrt(Q) : U - P/(3.0*U)));\n    //  t = -B/4A + 1/2( ±_s W ± √(-(3α + 2d ±_s 2β/W)))\n    //  W = √(-2/3 α + (U==0? -∛Q : U - P/(3U))\n    // case U==0\n    //  W = √(-2/3 α -∛Q)\n    //    = √(-2/3 α -∛(- α^3/108 + αγ/3 - β^2/8))\n    // case U!=0\n    //  W = √(-2/3 α + U + (α^2/12 + γ)/(3U))\n    //    = √(-2/3 α + U - P/(3U))\n    //  W = √(-2/3 α + ∛R - P/(3∛R))\n    //loss3 = add_ploss(-2.0/3.0 *alpha, + U);\n    \n    float t1 = -boa*0.25 + 0.5 * (W + sqrt(abs(3.0*alpha + 2.0*d + 2.0*beta/W)));\n    //loss3 = add_ploss(-boa*0.25,0.5*(W+sqrt(abs(3.0*alpha + 2.0*d + 2.0*beta/W))));\n    float t2 = -boa*0.25 + 0.5 * (-W + sqrt(abs(3.0*alpha + 2.0*d + -2.0*beta/W)));\n    //loss3 = add_ploss(-boa*0.25,0.5*(-W+sqrt(abs(3.0*alpha + 2.0*d - 2.0*beta/W))));\n    \n    \n    float recip_t1 = 1.0/t1;\n    float recip_t2 = 1.0/t2;\n    vec2 p1 = vec2((t1-recip_t1)*sx,t1+recip_t1)*ab;\n    vec2 p2 = vec2((t2-recip_t2)*sx,t2+recip_t2)*ab;\n    vec2 result = (length(p1-p)<length(p2-p) && p1.y>=0.0) || p2.y < 0.0?p1:p2;\n    \n    \n    return vec3(loss1,loss2,loss3);\n    \n}\n\n\n//for highlighting individual solutions\nvec2 pHyperbola_sols( vec2 p, in vec2 ab, in float s1, in float s2 )\n{\n    float t = 0.0;\n    \n    float r2 = ab.x*ab.x+ab.y*ab.y;\n    float az = ab.x*p.x;\n    float bw = ab.y*p.y;\n    \n    float A = 2.0*r2;\n    float B = -2.0*(az+bw);\n    float C = 0.0;\n    float D = -2.0*(az-bw);\n    float E = -2.0*r2;\n    \n    \n    float boa = B/A;\n    float coa = C/A;\n    float doa = D/A;\n    float eoa = E/A;\n    float boa2 = boa*boa;\n    \n    \n    //  α = -3/8 (B/A)^2 + C/A\n    float alpha = -0.375 * boa2 + coa;\n    //  β = 1/8 (B/A)^3 - 1/2 BC/A^2 + D/A\n    float beta  = 0.125 * boa2*boa - 0.5*boa*coa + doa;\n    //  γ = - 3/256 (B/A)^4 + 1/16 CB^2/A^3 - 1/4 BD/A^2 + E/A\n    float gamma = -3.0/256.0 * (boa2*boa2) + 0.0625 * coa*boa2 - 0.25 * boa*doa + eoa;\n    // when β = 0\n    //  t = -B/4A ± √((-α ± √(α^2-4γ))/2)\n    //t = -0.25*boa + s1*sqrt(0.5*(-alpha + s2*sqrt(alpha * alpha - 4.0*gamma)));\n    // else\n    float alpha2 = alpha * alpha;\n    //  P = - α^2/12 - γ\n    float P = - alpha2 / 12.0 - gamma;\n    //  Q = - α^3/108 + αγ/3 - β^2/8\n    float Q = - alpha*(alpha2 / 108.0 - gamma/3.0) - beta*beta / 8.0;\n    //  R = - Q/2 ± √((Q/2)^2 + (P/3)^3)\n    float R = - Q * 0.5 + sign(-Q)*sqrt(abs(Q*Q*0.25 + P*P*P/27.0));\n    //  U = ∛R\n    float U = cbrt(R);\n    \n    //  d = -5/6 α + (U==0? -∛Q : U - P/(3U))\n    float d = -5.0/6.0 * alpha + (U==0.0? -cbrt(Q) : U - P/(3.0*U));\n    //  W = √(α + 2d)\n    float W = sqrt(alpha + 2.0 * d);\n    //  t = -B/4A + 1/2( ±_s W ± √(-(3α + 2d ±_s 2β/W)))\n    t = -boa*0.25 + 0.5 * (s1*W + s2*sqrt(abs(3.0*alpha + 2.0*d + s1*2.0*beta/W)));\n    \n    float recip_t = 1.0/t;\n    return vec2(t-recip_t,t+recip_t)*ab;\n}\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    vec2 ra = (vec2(0.25,0.25) + 0.25*cos(iTime*vec2(1.1,1.3)+vec2(1.0,1.0) ))*0.25*(1.0625-sin(iTime));\n\t\n \tvec2 pd = pHyperbola( p, ra);\n    float d = length(pd-p)*inside_Hyperbola(p,ra);\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    \n    vec3 ploss = pHyperbola_loss(p,ra);\n    //uncomment the next line to see a map of floating point precision loss on the solution\n    col = p.x<m.x?ploss: col;\n    \n    \n    if( iMouse.z>0.001 )\n    {\n    pd = pHyperbola(m, ra);\n    d = length(pd-m);\n    col = mix(col, vec3(1.0,1.0,1.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0030));\n    col = mix(col, vec3(1.0,1.0,1.0), 1.0-smoothstep(0.0, 0.005, length(p-pd)-0.030));\n    \n    pd = pHyperbola_sols(m, ra,1.0,1.0);\n    d = length(pd-m);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-pd)-0.025));\n    \n    pd = pHyperbola_sols(m, ra,-1.0,1.0);\n    d = length(pd-m);\n    col = mix(col, vec3(1.0,0.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0020));\n    col = mix(col, vec3(1.0,0.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-pd)-0.020));\n    \n    pd = pHyperbola_sols(m, ra,1.0,-1.0);\n    d = length(pd-m);\n    col = mix(col, vec3(0.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0015));\n    col = mix(col, vec3(0.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-pd)-0.015));\n    \n    pd = pHyperbola_sols(m, ra,-1.0,-1.0);\n    d = length(pd-m);\n    col = mix(col, vec3(0.0,0.0,1.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0010));\n    col = mix(col, vec3(0.0,0.0,1.0), 1.0-smoothstep(0.0, 0.005, length(p-pd)-0.010));\n    \n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4( col, 1.0 );;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}