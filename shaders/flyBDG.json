{
    "Shader": {
        "info": {
            "date": "1665117852",
            "description": "Dante's natty vessel - Result of an improvised live coding session on Twitch\nLIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time:\nhttps://www.twitch.tv/evvvvil_",
            "flags": 0,
            "hasliked": 0,
            "id": "flyBDG",
            "likes": 2,
            "name": "Fork Dante's na hzeff2607 191",
            "published": 3,
            "tags": [
                "cute",
                "waves",
                "wave",
                "sea",
                "demoscene",
                "water",
                "ocean",
                "flag",
                "moon",
                "toon",
                "boat",
                "pirate",
                "divine",
                "dante",
                "comedy",
                "tide"
            ],
            "usePreview": 0,
            "username": "hzeff2607",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "// Dante's natty vessel - Result of an improvised live coding session on Twitch\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time: \n// https://www.twitch.tv/evvvvil_\n\n// \"You have to keep busy, after all, no dog ever pissed on a moving car.\" - Tom Waits\n\n// Major thankx to KALI for helping me \"rock the boat\", also thankx to CanadianCornDog, Brandon Stargrave, Neffers and Haptix for the recommendations and jokes\n\nvec2 z,v,e=vec2(.00035,-.00035),f=vec2(-1.7,1.7);float t,tt,b=0.,bb=0.,g=0.,sa;vec3 cp,rp,pp,po,no,al,zp,ld;\nfloat bo(vec3 p,vec3 r){  p=abs(p)-r;  return max(max(p.x,p.y),p.z);}\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\nconst mat2 r2fucked=mat2(cos(.023),sin(.023),-cos(.023),sin(.023));\nfloat el( vec3 p, float r,vec3 h ){ vec3 q = p - clamp( p, -h, h ); return length( q )-r;}\nfloat smin(float a,float b,float k){float h=max(k-abs(a-b),0.);return min(a,b)-h*h*.25/k;}\nvec4 texNoise(vec2 uv,sampler2D tex ){ float f = 0.; f+=texture(tex, uv*.125).r*.5; f+=texture(tex,uv*.25).r*.25;\n                       f+=texture(tex,uv*.5).r*.125; f+=texture(tex,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\nfloat noi(vec3 p){\n  vec3 f=floor(p),s=vec3(7,157,113);\n  p-=f;vec4 h=vec4(0,s.yz,s.y+s.z)+dot(f,s);\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43785.5),fract(sin(h+s.x)*43785.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);\n}\nfloat wave( vec3 p,int iter,float ga)\n{  \n  vec3 np=p-vec3(0,0,tt*3.); \n  float nois=0.,amp=3.0;\n  for(int i=0;i<iter;i++){\n   nois+=abs(sin(noi((np-vec3(0,0,tt*3.))*.15)-.5)*3.14)*(amp*=.51);   \n   np.xy*=r2fucked;\n   np*=1.75;    \n  }\n  if(ga>0.)cp=np,bb=nois;  \n  float t=p.y+nois;t*=0.5;    \n  return t;\n}\nmat3 lookat(vec3 dir,vec3 up) {vec3 rt=normalize(cross(dir,up));return mat3(rt,cross(rt,dir),dir);}//NOTE TO SELF: dir and up should be normalized \nvec2 mp( vec3 p,float ga)\n{    \n  vec2 h,t=vec2(wave(p,7,1.),5.);   \n  if(abs(p.x)-2.8<0.){\n    b=wave(vec3(0),4,0.);\n    rp = p+vec3(0,b,-6);\n    vec3 wp= p-vec3(0,b*.5,0);\n    no=normalize(f.xyy*wave(f.xyy,1,0.)+f.yyx*wave(f.yyx,1,0.)+f.yxy*wave(f.yxy,1,0.)+f.xxx*wave(f.xxx,1,0.));    \n    rp*=lookat(no,vec3(0.,0.,1.));     \n    float tnoi=texNoise(rp.xz*.15,iChannel1).r;  \n    float cose=cos(rp.y*.5);\n    float boat=0.9*el(rp,0.48-tnoi-sin(rp.z*15.)*0.03,vec3(cose*.75,2.9,cose));\n    h=vec2(boat,3);    \n    h.x=abs(h.x)-.15;\n    h.x=max(h.x,rp.z-1.+tnoi+cos(rp.y*.4)*.5);\n    h.x=min(h.x, max(length(rp.xy-vec2(0,2.6))-.2+tnoi*.3,abs(rp.z-2.3)-2.7)); h.x*=0.8;\n    zp=p+vec3(0,1.7,0);\n    float wake =max( length(zp.xy)-1.2-p.z*.05,-3.-p.z);\n    wake=max(wake,-(length(wp.xy-vec2(0,2.0-abs(sin(p.z*2.5-tt*12.))*.5+abs(sin(p.x*.2))))-4.5));\n    t.x=smin(t.x,0.7*wake,1.0);        \n    t.x=max(t.x,-boat+.2);    \n    t=t.x<h.x?t:h;\n    pp=rp;pp.y=abs(pp.y)-3.2;\n    h=vec2(length(pp)-.2,6);\n    if(ga>0.)g+=0.1/(.1+h.x*h.x*(10.-9.5*sin(p.z-tt*5.)));\n    pp=rp-vec3(sin(rp.z*rp.y*.4+tt*4.)*max(0.,rp.y-2.5)*.2,3.6,3.8);\n    h.x=min(h.x,.7*bo(pp,vec3(.02,1,1)));\n    t=t.x<h.x?t:h;\n  }\t  \n  return t;\n}\nvec2 tr( vec3 ro, vec3 rd )\n{\n  vec2 h,t=vec2(.1);\n  for(int i=0;i<128;i++){\n    h=mp(ro+rd*t.x,1.);\n    if(h.x<.0001||t.x>43.) break;\n    t.x+=h.x;t.y=h.y;\n  }\n  if(t.x>43.) t.y=0.;\n\treturn t;\n}\n#define a(d) clamp(mp(po+no*d,0.).x/d,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d,0.).x/d)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n  tt=mod(iTime,61.83);\n  vec3 ro = vec3(7.+cos(tt*.3)*3.,4.+sin(tt*.4)*2.,7.415),\n  cw=normalize(vec3(0)-ro),cu=normalize(cross(cw,vec3(0,1,0))),cv=normalize(cross(cu,cw)),\n  rd=mat3(cu,cv,cw)*normalize(vec3(uv,.6)),co,fo;\n  ld=normalize(vec3(0.0,.1,-.5));\n  v = ld.xy/ld.z-rd.xy/rd.z;\n  vec3 moon = vec3(0.15,0.45,.26)*pow(max(dot(rd,ld),0.1),54.0)+texNoise(v.xy+1.,iChannel0).r*smoothstep(.142, .13, length(v)); \n  co=fo=vec3(0.6, 2.6, 0.54)+moon-length(uv)*.2;  \n  z=tr(ro,rd);t=z.x;\n  if(z.y>0.){    \n    po=ro+rd*t; ld=normalize(vec3(.2,1.5,-.5));\n    no=normalize(e.xyy*mp(po+e.xyy,0.).x+e.yyx*mp(po+e.yyx,0.).x+e.yxy*mp(po+e.yxy,0.).x+e.xxx*mp(po+e.xxx,0.).x);\n    float tnoi=texNoise(cp.xz*.0005,iChannel0).r+texNoise(cp.xz*.005,iChannel0).r*.5;\n    al=vec3(.1,.2,1.9)*tnoi/bb*2.,sa=5.;   \n    if(z.y<5.) al=vec3(.3,.2,.0)-min(rp.z*.2,0.4),sa=0.;   \n    if(z.y>5.) al=vec3(1.)-max(ceil(rp.z-2.9),0.)*ceil(max(-(length(abs(pp+vec3(0,0,-.25))-vec3(0,0.,0))-.15), min(length(pp)-.4+.5*clamp(cos(rp.z*5.+1.3),-.6,.5),bo(abs(abs(pp.xzy)-vec3(0.0,0,0.2))-vec3(0,0,0.1),vec3(0.5,.5-2.*abs(sin(pp.y*.3)),.05))))),sa=0.;\n    float dif=max(0.,dot(no,ld)),\n    fr=pow(1.+dot(no,rd),4.);\n    co=mix(al*(a(.1)+.2)*(dif+s(1.0)*sa),fo,min(fr,.6));\n  }\n  fragColor = vec4(pow(co+g*.2*vec3(.7,.2,.1),vec3(0.55)),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}