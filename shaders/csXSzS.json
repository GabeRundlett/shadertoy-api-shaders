{
    "Shader": {
        "info": {
            "date": "1669127162",
            "description": "Experimenting with torus knots and iridescent metal shading as well as bump mapping (thanks to Shane)",
            "flags": 64,
            "hasliked": 0,
            "id": "csXSzS",
            "likes": 20,
            "name": "[phreax] curved space",
            "published": 3,
            "tags": [
                "raymarching",
                "metal",
                "moebius",
                "iridescent",
                "torusknot"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2022\n*/\n\n#define PI 3.141592\n#define TAU (2.*PI)\n#define SIN(x) (sin(x)*.5+.5)\n#define PHI 1.618033988749895\n#define hue(v) ( .6 + .6 * cos( 6.3*(v) + vec3(0,23,21) ) )\n//#define KALEIDOSCOPIC \n//#define POLARKALEI \n#define THICKNESS .01\n#define AA 0\n#define BUMP_EPS 0.004\n\n\nfloat tt, g_mat;\n\nmat2 rot(float a) { return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\nfloat fadeInOut(float t1, float t2, float fadeTime) {\n    return smoothstep(t1, t1+fadeTime, iTime)-smoothstep(t2-fadeTime, t2, iTime);\n}\n\n// zucconis spectral palette https://www.alanzucconi.com/2017/07/15/improving-the-rainbow-2/\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n    vec3 y = 1. - x * x;\n    y = clamp((y-yoffset), vec3(0), vec3(1));\n    return y;\n}\n\n\nvec3 spectral_zucconi6(float x) {\n    x = fract(x);\n    const vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n    const vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n    const vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n    const vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n    const vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n    const vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n    return bump3y(c1 * (x - x1), y1) + bump3y(c2 * (x - x2), y2) ;\n}\n\n// Amazing fractal texture from jarble https://www.shadertoy.com/view/csl3zl\nvec2 triangle_wave(vec2 a){\n    \n    vec2 a2 = vec2(1.,0.5),\n    \n    a1 = a-a2;\n    \n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\n\nfloat rect( vec2 p, vec2 b, float r ) {\n    vec2 d = abs(p) - (b - r);\n    return length(max(d, 0.)) + min(max(d.x, d.y), 0.) - r;\n}\n\n\nvec3 kalei(vec3 p) {\n    float iter = 3.;\n    p.yz *= rot(tt);\n    p.xy = abs(p.xy)+.9;\n    \n    #ifdef POLARKALEI\n    p.xy = vec2(length(p.xy)*.8, atan(p.y, p.x));\n    #endif\n   \n    float s= 1.;\n    for(float i=0.; i< iter; i++) {\n        p = abs(p);  \n        p.xz *= rot(i/iter*PI+.2*tt);\n        p.xz += .2 - .1*i + sin(p.y*.2) + .2*exp(.01+p.z*.2);\n        p.z -= .2*sin(p.z*.5*i/iter*2.*PI);\n        p -= .2;\n         \n    }\n\n    return clamp(p, -1e5, 1e5);\n\n}\n\n// fold space for toroid\nvec3 transform(vec3 p) {\n    p.yz *= rot(PI*.25 + .1*tt);\n    p.xz *= rot(.2*tt);\n    \n    #ifdef KALEIDOSCOPIC\n    p = kalei(p);\n    #endif\n\n    float r = 1.9;\n    vec2 cp = vec2(length(p.xz)-r, p.y);\n    \n\n    float rev = 2.5;\n    float a = atan(p.z, p.x);\n    \n \n    cp *= rot(rev*a+.3*tt);\n    cp= abs(cp) - mix(.1, 1., SIN(tt));\n    cp *= rot(.5*tt);\n\n\n    return vec3(cp, p.z);\n}\n\n\nfloat map(vec3 p) {   \n  \n    vec3 bp = p;\n    float edge = 0.01;\n   \n    vec2 cp = transform(p).xy;\n    float dr = rect(cp.xy, vec2(.8, THICKNESS), edge);\n    \n    // g_mat = db < dr ? 1. : 0.;\n    float d = dr;\n    return .2*d;\n}\n\n\nvec3 getNormal(vec3 p) {\n\n    vec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(map(p + eps.xyy) - map(p - eps.xyy),\n                          map(p + eps.yxy) - map(p - eps.yxy),\n                          map(p + eps.yyx) - map(p - eps.yyx)\n                         )\n                     );\n}\n\nfloat bumpSurf3D( in vec3 p){\n\n    p.z += .3*tt;\n    p = abs(mod(p*2., 2.*0.125)-0.0125);\n    \n    float x = min(p.x,min(p.z, p.y))/0.03125;\n\n    return clamp(x, 0., 1.);\n\n\n}\n\n// Standard function-based bump mapping function (from Shane)\nvec3 doBumpMap(in vec3 p, in vec3 nor, float bumpfactor){\n    \n    const float eps = BUMP_EPS;\n    float ref = bumpSurf3D(p);                 \n    vec3 grad = vec3( bumpSurf3D(vec3(p.x-eps, p.y, p.z))-ref,\n                      bumpSurf3D(vec3(p.x, p.y-eps, p.z))-ref,\n                      bumpSurf3D(vec3(p.x, p.y, p.z-eps))-ref )/eps;                     \n          \n    grad -= nor*dot(nor, grad);          \n                      \n    return normalize( nor + bumpfactor*grad );\n\t\n}\n\nvec2 raymarch(vec3 ro, vec3 rd, float steps) {\n\n    float mat = 0.,\n          t   = 0.,\n          d   = 0.;\n    vec3 p = ro;\n    for(float i=.0; i<steps; i++) {\n    \n        d = map(p);\n        mat = g_mat;  // save global material\n        \n        if(abs(d) < 0.0001 || t > 100.) break;\n        \n        t += d;\n        p += rd*d;\n    }\n    \n    return vec2(t, mat);\n}\n\nfloat n21(vec2 p) {\n      return fract(sin(dot(p, vec2(524.423,123.34)))*3228324.345);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0., 1.0);\n    vec2 b = floor(n);\n    vec2 f = mix(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(n21(b), n21(b + d.yx), f.x), mix(n21(b + d.xy), n21(b + d.yy), f.x), f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 tot = vec3(0);\n    #if AA>0\n    \n    for(int m=0; m<AA; m++) \n    for(int n=0; n<AA; n++) { \n        vec2 off = vec2(float(m), float(n));\n  \t    vec2 uv = (fragCoord+off - .5*iResolution.xy)/iResolution.y;\n    #else\n   \tvec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    #endif\n\n    tt = iTime + 17.;\n    vec3 ro = vec3(uv*6.,-4.),\n          rd = vec3(0,0,.6),\n          lp = vec3(2., 2., -10),\n          lp2 = vec3(-2., -3., -5);\n\n    vec3 col;\n       \n    float mat = 0.,\n          t   = 0.,\n          d   = 0.;\n \n\n    vec2 e = vec2(0.0035, -0.0035);\n     \n    // background color\n    vec3 c1 = vec3(0.000,1.000,0.835);\n    vec3 c2 = vec3(1.000,0.494,0.078);\n    \n    // light color\n    vec3 lc1 = vec3(0.961,0.816,0.737);\n    vec3 lc2 = vec3(0.588,0.992,0.945);\n    \n    \n    // currently only one pass\n    for(float i = 0.; i < 1.; i++) {\n        float steps = i > 0. ? 50. : 250.;\n        vec2 rm = raymarch(ro, rd, steps);\n        mat = rm.y;\n        \n        vec3 p = ro + rm.x*rd;\n        \n        vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                                e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n\n        vec3 pt = transform(p);\n        vec3 np = transform(n);\n        n = doBumpMap(pt, n, .004);\n    \n     \n        if(rm.x < 50.) {\n        \n            vec3 l = normalize(lp-p);\n            vec3 l2 = normalize(lp2-p);\n            float dif = max(dot(n, l), .0);\n            float dif2 = max(dot(n, l), .0);\n            float spe = pow(max(dot(reflect(-rd, n), -l), .0),40.);\n\n            float sss = smoothstep(0., 1., map(p + l * .4)) / .4;\n            vec3 n2 = n;\n            n2.xy += noise(p.xy) * .5 - .025;\n            n2 = normalize(n2);\n            float height = atan(n2.y, n2.x);\n\n            vec3 iri = spectral_zucconi6(height*1.11)*smoothstep(.8, .2, abs(n2.z));\n       \n            col += dif*lc1*.6 + .8*dif2*lc2 + .8*iri + .1;\n           \n            if(mat == 0.) {\n                n += .5*texture(iChannel1, n.xy*100.).rgb;\n                rd = reflect(rd, n);\n         \n                vec3 refl = texture(iChannel0, rd).rgb;\n                \n                refl *= mix(vec3(1), spectral_zucconi6(n.x*n.y*3.), .6); // reflect rainbows too\n                col = mix(col, refl, .7);\n                \n                float height = atan(n.y, n.x);\n              \n            } \n\n        } else {\n            col =  mix(c1-.5, c2, (.9-pow(dot(uv, uv), .3)))*.2+.7; // background\n            \n        } \n    \n    }\n\n    \n    col *= mix(.2, 1., (1.5-pow(dot(uv, uv), .5))); // vignette\n    col = pow(col, vec3(.7)); // gamma\n    \n    tot += col;\n    #if AA>0\n    }\n    tot /= float(AA*AA);\n    #endif\n    \n    fragColor = vec4(tot, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 30403,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/irsodeh/hang-massive-warmth-of-the-sun-s-rays-official?si=c480cd1a77ee4cf4b7e5272752e38314&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}