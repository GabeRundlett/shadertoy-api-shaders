{
    "Shader": {
        "info": {
            "date": "1522948593",
            "description": "Normalization = relative to borders.\nFor SDF normalized to world (for ray-marching), see comments.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lsGczd",
            "likes": 8,
            "name": "sdf of polygon (internal)",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "shapes",
                "short",
                "mz"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 677
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 O, vec2 U )\n{\n   float t = mod(iTime,8.), \n         r = 1.,\n         N = 3.+5.*min(t,8.-t);\n    \n    vec2 R = iResolution.xy;\n    U = ( U+U - R ) / R.y;\n    float a = atan(U.x,U.y), l = length(U),d,\n          b = 3.14159/N;\n    a = mod(a,2.*b)-b;\n    // --- SDF relative to borders\n    d = 1. - l * cos(a) / cos(b);\n#if 1                        // 0: cheap  1: full rounded outside\n    if (d<0.) d = -length(vec2(min(0., (sin(b) - abs(l * sin(a))) / cos(b) ), d));\n#endif\n    O = vec4(d);\n/** // variant :\n    U = l * vec2(cos(a),sin(a));\n    O = vec4( 1.-U.x/cos(b) );   // but if you simplify, it's same expression :-)\n/**/\n  // --- SDF relative to world:\n  //O = vec4( l = r*cos(b) - l * cos(a) ); // or r - l * cos(a) if r=faces instead of vertices\n    \n  //O = sin(30.*O);\n    if (O.x<0.) O=vec4(1,0,0,0);\n    O.b = .5*sin(6.28*10.*d);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}