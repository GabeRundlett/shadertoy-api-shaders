{
    "Shader": {
        "info": {
            "date": "1695289791",
            "description": "Just some old flowers... (mouse rotates, zooms)",
            "flags": 0,
            "hasliked": 0,
            "id": "dd3yzX",
            "likes": 14,
            "name": "Metallic Flowers",
            "published": 3,
            "tags": [
                "flower"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "// \"Metallic Flowers\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// (flowers from \"Losing Focus\")\n\n#define AA  1   // (= 0/1) optional antialiasing\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat Minv3 (vec3 p);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HsvToRgb (vec3 c);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashfv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nvec2 gId;\nfloat tCur, dstFar, gLim, szFac, rotAng, rotAngF, dTwist, vuAz;\nint nFrame, idObj;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define VAR_ZERO min (nFrame, 0)\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, a, r, h, sk;\n  dMin = dstFar / szFac;\n  p.xz -= HexToPix (gId);\n  p.xz = Rot2D (p.xz, rotAngF);\n  p.z -= 0.1;\n  p /= szFac;\n  q = p;\n  h = 1.5;\n  d = 0.8 * max (length (Rot2D (q.xz - vec2 (0., 0.07), 4. * pi * dTwist * q.y / h) -\n     vec2 (0., 0.03)) - (0.06 - 0.015 * q.y / h + 0.005 * sin (4. * pi * q.y)), abs (q.y - h) - h);\n  DMINQ (1);\n  qq = p;\n  qq.xz = Rot2D (qq.xz, rotAng);\n  qq.y -= 3.1;\n  qq.yz = Rot2D (qq.yz, 0.3 * pi + 0.1 * rotAng);\n  q = qq;\n  r = length (q.xz);\n  d = max (r - 0.25, abs (q.y) - 0.1 * (1. - 1.5 * r));\n  DMINQ (2);\n  d = length (q - vec3 (0., clamp (q.y, -0.2, 0.), 0.)) - 0.15;\n  DMINQ (3);\n  sk = 1.;\n  for (int k = 0; k < 2; k ++) {\n    q = qq;\n    q.xz = Rot2D (q.xz, sk * pi / 12.);\n    a = atan (q.z, - q.x);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * a / (2. * pi) + 0.5) / 6.));\n    q.x += 0.2;\n    q.y -= 0.01 * sk + 0.4 * dot (q.xz, q.xz);\n    sk = - sk;\n    q.z *= 2.5;\n    d = 0.5 * max (length (q.xz + vec2 (0.4, 0.)) - 0.5, abs (q.y) - 0.03 * (1.2 - length (q.xz)));\n    DMINQ (4);\n  }\n  q = qq;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (12. * ((r > 0.) ? atan (q.z, - q.x) /\n     (2. * pi) : 0.) + 0.5) / 12.));\n  q.y -= 0.15;\n  q.x = abs (q.x + 0.04 + 0.4 * q.y * (1. + 2. * q.y)) - 0.02;\n  d = 0.8 * PrCylDf (q.xzy, 0.003, 0.17);\n  DMINQ (5);\n  return szFac * dMin;\n}\n\nvoid SetFlwConf ()\n{\n  float s;\n  s = length (vec3 (gId.xy, gId.x + gId.y)) / gLim;\n  szFac = 0.65 * (1. - 0.2 * s * s + 0.2 * (Hashfv2 (17. * gId + 99.) - 0.5));\n  s = Hashfv2 (23. * gId + 99.) - 0.5;\n  dTwist = sign (s);\n  s = max (0.1, abs (s)) * dTwist;\n  rotAngF = 0.2 * pi * s;\n  rotAng = vuAz + 0.3 * pi * (sin (pi * s * (tCur + 10.)) + s) - rotAngF;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv;\n  vec2 edN[3], pM;\n  float dHit, d, s, eps;\n  bool cNu;\n  if (rd.x == 0.) rd.x = 1e-4;\n  if (rd.z == 0.) rd.z = 1e-4;\n  eps = 1e-3;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = 1. / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2]));\n  dHit = 0.;\n  gId = PixToHex (ro.xz);\n  pM = HexToPix (gId);\n  cNu = true;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    if (cNu) {\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n      SetFlwConf ();\n      cNu = false;\n    }\n    if (length (vec3 (gId.xy, gId.x + gId.y)) <= gLim) d = ObjDf (ro + dHit * rd);\n    else d = dstFar;\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      gId = PixToHex (ro.xz + dHit * rd.xz);\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      cNu = true;\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 20; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz);\n    if (length (vec3 (gId.xy, gId.x + gId.y)) <= gLim) {\n      if (gId != gIdP) {\n        gIdP = gId;\n        SetFlwConf ();\n      }\n      h = ObjDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n      d += h;\n    } else d += 0.2;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd, a;\n  a = atan (rd.z, - rd.x) / (2. * pi) + 0.5;\n  if (rd.y > -0.02 && rd.y < 0.04 * mix (Fbm1 (128. * (a + 1.)), Fbm1 (128. * a), a)) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return 0.8 * col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, r, a, sh, hue, glit;\n  bool isBg;\n  gLim = 20.;\n  isBg = true;\n  glit = 0.;\n  vf = vec2 (0.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    isBg = false;\n    ro += dstObj * rd;\n    gId = PixToHex (ro.xz);\n    vn = ObjNf (ro);\n    hue = Hashfv2 (gId * vec2 (17., 27.) + 0.5);\n    if (idObj >= 2) {\n      r = length (qHit.xz);\n      a = (r > 0.) ? atan (qHit.z, - qHit.x) / (2. * pi) : 0.;\n    }\n    if (idObj == 1) {\n      col4 = vec4 (0.7, 0.4, 0., 0.1);\n      vf = vec2 (64., 2.);\n    } else if (idObj == 2) {\n      col4 = vec4 (HsvToRgb (vec3 (fract (hue + 0.6), 1., 0.7)) *\n         (0.7 + 0.3 * SmoothBump (0.2, 0.8, 0.005, fract (32. * r + a))), 0.1);\n      vf = vec2 (32., 1.);\n    } else if (idObj == 3) {\n      col4 = vec4 (HsvToRgb (vec3 (fract (hue + 0.1), 0.7, 1.)) *\n         (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.01, fract (8. * a))), 0.1);\n      vf = vec2 (64., 1.);\n    } else if (idObj == 4) {\n      col4 = vec4 (HsvToRgb (vec3 (fract (hue), 0.7 + 0.3 * fract (7. * hue), 1.)), 0.05);\n      col4.rgb *= 1. - 0.1 * SmoothBump (0.05, 0.95, 0.01, fract (16. * a));\n      glit = 512. * step (0.01, max (0., dot (vn, sunDir))) *\n         pow (max (0., dot (sunDir, reflect (rd, vn))), 16.) *\n         pow (1. - 0.6 * abs (dot (normalize (sunDir - rd), VaryNf (1024. * ro, vn, 2.))), 8.);\n      vf = vec2 (128., 0.1);\n    } else if (idObj == 5) {\n      col4 = vec4 (mix (vec3 (0.9, 0.9, 0.2), vec3 (1., 0.1, 0.1), step (0.16, qHit.y)),\n         0.1 - step (0.16, qHit.y));\n    }\n  } else if (rd.y < 0.) {\n    isBg = false;\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    col4 = 0.9 * mix (vec4 (0.4, 0.5, 0.3, 0.), vec4 (0., 0.5, 0.1, 0.),\n       smoothstep (0.2, 0.8, Fbm2 (0.5 * ro.xz)));\n    gId = PixToHex (ro.xz);\n    if (length (vec3 (gId.xy, gId.x + gId.y)) <= gLim) col4 *= 0.7 +\n       0.3 * smoothstep (0.1, 0.2, length (ro.xz - vec2 (0., 0.1) - HexToPix (gId)));\n    qHit = ro;\n    vn = vec3 (0., 1., 0.);\n    vf = vec2 (1., (1. - smoothstep (0.4, 0.7, dstObj / dstFar)));\n  }\n  if (! isBg) {\n    if (vf.y > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n    sh = (dstObj < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n    col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       step (0.95, sh) * (glit + col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.));\n    if (dstObj >= dstFar) col = mix (col, 0.8 * vec3 (0.3, 0.41, 0.55), pow (1. + rd.y, 16.));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, sr, zmFac;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.05 * pi;\n  zmFac = 4.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    zmFac += 3. * abs (az);\n    el += pi * mPtr.y;\n  } else {\n    az += 0.7 * pi * sin (0.005 * pi * tCur);\n    el += 0.02 * pi * sin (0.021 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.02 * pi);\n  vuAz = az;\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -40.);\n  sunDir = vuMat * normalize (vec3 (0.7, 1.5, -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.2 * pi * cos (0.03 * pi * tCur));\n  dstFar = 80.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1. / sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (mod (dot (p, vec2 (37., 39.)), 2. * pi)) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (mod (p + vec2 (0., 1.), 2. * pi)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (mod (dot (p, cHashVA2) + vec2 (0., cHashVA2.x), 2. * pi)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}