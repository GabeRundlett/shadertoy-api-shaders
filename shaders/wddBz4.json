{
    "Shader": {
        "info": {
            "date": "1604539830",
            "description": "Something is missing but this is my first try.",
            "flags": 0,
            "hasliked": 0,
            "id": "wddBz4",
            "likes": 2,
            "name": "Texture mapping 3D",
            "published": 3,
            "tags": [
                "texture3d"
            ],
            "usePreview": 0,
            "username": "henrmota",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 2.*PI\n#define FBM_OCTAVES 4\n#define DX 1./iResolution.x\n#define DY 1./iResolution.y\n\n//1d pseudo-random for shaders\nfloat random(vec2 p) {\n    p = mod(p, 10000.);\n    \n \treturn fract(sin(dot(p, vec2(12.9898,78.233))) * 43758.5453); \n}\n\n//2d pseudo-random\nvec2 random2(vec2 p) {\n    p = mod(p, 10000.);\n    \n \treturn fract(\n        sin( \n            vec2( \n                dot(p,vec2(127.1,311.7)), \n                dot(p,vec2(269.5,183.3)) \n            ) \n        ) \n    \t* 43758.5453\n    ); \n}\n\nfloat noise(vec2 p) {\n\tvec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float bottom_left = random(i);\n    float bottom_right = random(i + vec2(1.0, 0.0));\n    float top_left = random(i + vec2(0.0, 1.0));\n    float top_right = random(i + vec2(1.0, 1.0));\n    \n    // Quintic interpolation\n    f = f*f*f*(f*(f*6.-15.)+10.);\n    \n    // Cubic interpolationn\n    //f = f*f*(3.0 - 2.0*f);\n    \n    float bottom = mix(bottom_left, bottom_right, f.x); \n    float top = mix(top_left, top_right, f.x); \n    \n    return mix(bottom, top, f.y);\n}\n\nfloat perlinNoise(vec2 p) {\n \tvec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    vec2 a = i;\n    vec2 b = i + vec2(1., 0.);\n    vec2 c = i + vec2(0., 1.);\n    vec2 d = i + vec2(1., 1.);\n    \n    //random angles\n    float bl_angle = random(a) * TWO_PI;\n    float br_angle = random(b) * TWO_PI;\n    float tl_angle = random(c) * TWO_PI;\n    float tr_angle = random(d) * TWO_PI;\n    \n    // corner vectors \n    vec2 bl_vec = vec2(-sin(bl_angle), cos(bl_angle));\n    vec2 br_vec = vec2(-sin(br_angle), cos(br_angle));\n    vec2 tl_vec = vec2(-sin(tl_angle), cos(tl_angle));\n    vec2 tr_vec = vec2(-sin(tr_angle), cos(tr_angle));\n   \n    float bl = dot(bl_vec, p - a);\n    float br = dot(br_vec, p - b);\n    float tl = dot(tl_vec, p - c);\n    float tr = dot(tr_vec, p - d);\n    \n    \n     // Quintic interpolation\n    f = f*f*f*(f*(f*6.-15.)+10.);\n    \n    // Cubic interpolationn\n    //f = f*f*(3.0 - 2.0*f);\n    \n    float bottom = mix(bl, br, f.x); \n    float top = mix(tl, tr, f.x); \n    \n    return clamp(mix(bottom, top, f.y) + 0.5, 0., 1.);  \n}\n\nfloat celularNoise(vec2 p) {\n\tvec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float minDist = 100.;\n    \n    for(float x=-1.; x < 2.; x++) {\n        for(float y=-1.; y < 2.; y++) {\n            vec2 coord = vec2(x, y);\n         \tvec2 point = random2(i + coord) + coord;\n            \n            float dist = distance(f, point);\n            \n            minDist = min(minDist, dist); \n        }\n    }\n    \n    return minDist;\n}\n\nfloat fbm(vec2 p, float shift) {\n   float amplitude = 1.0;\n   float freq = 4.;\n   float normalizeFactor = 0.0;\n   float value = 0.0;\n   \n    \n   for(int i = 0; i <= FBM_OCTAVES; i++) {\n      float angle = float(i) * PI;\n      //avoid axis bias\n      mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n      \n      value += perlinNoise(rotate * p * freq + shift) * amplitude;\n      normalizeFactor += amplitude;\n      amplitude *= 0.5;\n      freq *= 2.1;\n   }\n    \n   return value/normalizeFactor;\n}\n\nfloat map01(float a, float b, float value) {\n    return (value - a) / (b - a);\n}\n\nvec3 proj(vec3 a, vec3 b) {\n \tfloat scalar = dot(a,b)/dot(a, a);\n    \n    return scalar * a;\n}\n\nfloat lineDistance(vec3 ro, vec3 rd, vec3 p, float radius) {\n    vec3 rp = p - ro;\n    vec3 proj = dot(rp, rd) * rd;\n    \n    return length(rp - proj) - radius; \n}\n\nfloat lineCrossDistance(vec3 ro, vec3 rd, vec3 p, float radius) {\n    vec3 rp = p - ro;\n    \n    return length(cross(rp, rd)) / length(rd) - radius;\n}\n\nvec3 sphere(vec3 ro, vec3 rd, vec3 s, float r) {\n    vec3 p = ro + proj(rd, s - ro);\n    float t = cos(iTime) * 0.5;\n    float displacement = t * perlinNoise(rd.xy * 10. + rd.z + iTime * 0.2);\n    float y = length(s - p);\n    if(y < r) {\n        float x = sqrt(r * r - y * y);\n        vec3 b = p + x - s;\n        vec3 f = p - x - s;\n        float angle = iTime * 0.1;\n        f.xz *= mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n        vec2 uvF = vec2(atan(f.z, f.x)/PI * 2. * r, f.y );\n        uvF += 2. * r;\n        uvF /= 4. * r;\n        return texture(iChannel0, uvF.xy).rgb * map01(s.z-r, s.z, length(f));\n        \n    }\n    \n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\t\n    float t = cos(iTime) * 0.5 + 0.5;\n    float freq = 0.001/t; \n    vec3 ro = vec3(t, 0, -1);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 col = vec3(0.);\n    \n    vec3 s = vec3(0, 0, 5.);\n  \n    float r = 3. + t* 1.;\n\n    col += sphere(ro, rd, s, r);\n    \n    if(col.r == 0.) {\n    \trd.x += 0.2;\n        col.g = mix(\n            col.g, \n            sphere(ro, rd, s, r).r,\n            freq  \n        ) * 0.5;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}