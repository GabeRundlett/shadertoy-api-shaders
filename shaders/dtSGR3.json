{
    "Shader": {
        "info": {
            "date": "1673599580",
            "description": "SDF xor, based on [url]https://www.shadertoy.com/view/ctSGzV[/url] by AxisPod.",
            "flags": 16,
            "hasliked": 0,
            "id": "dtSGR3",
            "likes": 7,
            "name": "Concentric Xor",
            "published": 3,
            "tags": [
                "sdf",
                "xor",
                "opart"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////////////////////\n//\n// Concentric Xor, mla, 2023\n//\n// SDFs are nice for logical combinations of primitives,\n// including xor (aka symmetric difference):\n//\n// xor(A,B) = intersect(union(A,B),complement(intersect(A,B)))\n//\n// 'd': show distance field\n// 'r': randomly perturb radii\n// 'x': show boundaries of regions\n//\n// Based on on https://www.shadertoy.com/view/ctSGzV by AxisPod\n//\n//////////////////////////////////////////////////////////////////\n\n// SDF xor\nfloat xor(float d0, float d1) {\n  // Union minus the intersection\n  return max(min(d0,d1),-max(d0,d1));\n}\n\nfloat repCircle(vec2 p, float t, vec2 centre) {\n  p -= centre;\n  float r = length(p);\n  float i = round(r/t);\n  if (i == 0.0) i = 1.0; // No boundary at 0\n  float s = t*i; // s is nearest boundary\n  if (key(CHAR_R)) s += 0.5*t*(rand(int(i))-0.5); // Random perturbation\n  float sgn = mod(i,2.0) == 0.0 ? -1.0 : 1.0;\n  assert(sgn < 0.0);\n  return sgn*(r-s);\n}\n\nfloat repSquare(vec2 p, float t, vec2 centre) {\n  p -= centre;\n  p = abs(p);\n  float r = min(p.x,p.y);\n  float i = round(r/t);\n  if (i == 0.0) i = 1.0; // No boundary at 0\n  float s = t*i; // s is nearest boundary - adjust here if desired\n  if (key(CHAR_R)) s += 0.5*t*(rand(int(i)*255)-0.5); // Random perturbation\n  float sgn = mod(i,2.0) == 0.0 ? -1.0 : 1.0;\n  float dx = s-p.x;\n  float dy = s-p.y;\n  // We could just return max(dx,dy) but it doesn't cost\n  // much to get an exact distance.\n  float d = dx > 0.0 && dy > 0.0 ? distance(p,vec2(s)) : max(dx,dy);\n  return sgn*d;\n}\n\nvec3 drawScene(vec2 p) {\n  float px = fwidth(p.x);\n  float t = 0.25*iTime;\n  float d1 = repCircle(p, 0.5, vec2(sin(t)*1.0, cos(0.414*t)*1.5));\n  float d2 = repSquare(p, 0.5, vec2(-sin(0.618*t)*1.5, cos(t))*1.0);\n  float d = xor(d1,d2);\n  vec3 col = vec3(smoothstep(-0.5*px,0.5*px,d));\n  if (key(CHAR_D)) col *= 0.75-0.25*cos(0.5*PI*d/px);\n  if (key(CHAR_X)) col = mix(vec3(1,0,0),col,smoothstep(0.0,px,abs(d)-0.005));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n  p *= 4.0;\n  vec3 col = drawScene(p);\n  col = pow(col,vec3(0.4545));\n  if (key(CHAR_A) && alert) col.b = 1.0-col.b;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) { if (!b) alert = true; }\n\nconst float PI = 3.14159;\n\nconst int CHAR_A = 65;\nconst int CHAR_D = 68;\nconst int CHAR_R = 82;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\nuint ihash(uint x) {\n  x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat rand(int n) {\n  return float(ihash(uint(n)))/exp2(32.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}