{
    "Shader": {
        "info": {
            "date": "1662648974",
            "description": "font experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "NttBRH",
            "likes": 17,
            "name": "fake 15 grids segmentation font",
            "published": 3,
            "tags": [
                "font"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "float fonts(vec2 p){\n    p*=5.0;\n    p.x+=iTime*0.5;\n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n\n    float n = Hash21(id)*40.0;\n    \n    int char = int(n);\n    float size = 0.35;\n    float d = drawFont(gv*size,char);\n    if(char < 10){\n        int num = int(mod(iTime*float(n),10.0));\n        d = drawFont(gv*size,num);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    float d = fonts(uv);\n    \n    col = mix(col,vec3(1.),S(d,0.0));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define seg_0 0\n#define seg_1 1\n#define seg_2 2\n#define seg_3 3\n#define seg_4 4\n#define seg_5 5\n#define seg_6 6\n#define seg_7 7\n#define seg_8 8\n#define seg_9 9\n#define seg_A 10\n#define seg_B 11\n#define seg_C 12\n#define seg_D 13\n#define seg_E 14\n#define seg_F 15\n#define seg_G 16\n#define seg_H 17\n#define seg_I 18\n#define seg_J 19\n#define seg_K 20\n#define seg_L 21\n#define seg_M 22\n#define seg_N 23\n#define seg_O 24\n#define seg_P 25\n#define seg_Q 26\n#define seg_R 27\n#define seg_S 28\n#define seg_T 29\n#define seg_U 30\n#define seg_V 31\n#define seg_W 32\n#define seg_X 33\n#define seg_Y 34\n#define seg_Z 35\n#define seg_Plus 36\n#define seg_Minus 37\n#define seg_Colon 38\n#define seg_DP 39\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\nfloat segBase(vec2 p){\n    vec2 prevP = p;\n    \n    float size = 0.02;\n    float padding = 0.05;\n\n    float w = padding*3.0;\n    float h = padding*5.0;\n\n    p = mod(p,0.05)-0.025;\n    float thickness = 0.005;\n    float gridMask = min(abs(p.x)-thickness,abs(p.y)-thickness);\n    \n    p = prevP;\n    float d = B(p,vec2(w*0.5,h*0.5));\n    float a = radians(45.0);\n    p.x = abs(p.x)-0.1;\n    p.y = abs(p.y)-0.05;\n    float d2 = dot(p,vec2(cos(a),sin(a)));\n    d = max(d2,d);\n    d = max(-gridMask,d);\n    return d;\n}\n\nfloat seg0(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat seg1(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y+=size;\n    float mask = B(p,vec2(size*2.,size*3.7));\n    d = max(-mask,d);\n    \n    p = prevP;\n    \n    p.x+=size*1.8;\n    p.y-=size*3.5;\n    mask = B(p,vec2(size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg2(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x-=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg3(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y = abs(p.y);\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg4(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.x+=size;\n    p.y+=0.08;\n    float mask = B(p,vec2(size*2.,size*2.0));\n    d = max(-mask,d);\n\n    p = prevP;\n    \n    p.y-=0.08;\n    mask = B(p,vec2(size,size*2.0));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg5(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg6(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.y+=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg7(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y+=size;\n    float mask = B(p,vec2(size*2.,size*3.7));\n    d = max(-mask,d);\n    return d;\n}\n\n\nfloat seg8(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y = abs(p.y);\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg9(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\n\nfloat segA(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.y+=0.08;\n    mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segB(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y= abs(p.y);\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segC(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    float mask = B(p,vec2(size*2.,size*2.5));\n    d = max(-mask,d);\n    return d;\n    \n    return d;\n}\n\nfloat segD(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    \n    p.x-=0.05;\n    p.y= abs(p.y);\n    p.y-=0.1;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\n\nfloat segE(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y = abs(p.y);\n    p.x-=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segF(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=0.05;\n    p.y+=size;\n    float mask = B(p,vec2(size,size*3.7));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.y-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.y+=0.08;\n    mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);    \n    \n    return d;\n}\n\nfloat segG(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.x-=0.05;\n    p.y-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\n\nfloat segH(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.y = abs(p.y);\n    p.y-=0.08;\n    float mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segI(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x = abs(p.x);\n    p.x-=0.05;\n    float mask = B(p,vec2(size,size*2.5));\n    d = max(-mask,d);\n    return d;\n    \n    return d;\n}\n\nfloat segJ(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    \n    p.y-=0.05;\n    p.x+=0.05;\n    mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    \n    return d;\n}\n\n\nfloat segK(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.y = abs(p.y);\n    p.y-=0.08;\n    float mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.x-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\n\nfloat segL(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    p.y-=size;\n    float mask = B(p,vec2(size*2.,size*3.7));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat segM(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y+=0.05;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    p = prevP;\n    p.y-=0.1;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat segN(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y+=0.03;\n    float mask = B(p,vec2(size,size*3.5));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat segO(vec2 p){\n    return seg0(p);\n}\n\nfloat segP(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.x-=size;\n    p.y+=0.08;\n    float mask = B(p,vec2(size*2.,size*2.0));\n    d = max(-mask,d);\n\n    p = prevP;\n    \n    p.y-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\n\nfloat segQ(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.x+=size;\n    p.y+=0.1;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    \n    p.y-=0.03;\n    mask = B(p,vec2(size,size*1.7));\n    d = max(-mask,d);\n    \n    return d;\n}\n\n\nfloat segR(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.y+=0.08;\n    mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.x-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);    \n    \n    return d;\n}\n\nfloat segS(vec2 p){\n    return seg5(p);\n}\n\nfloat segT(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x = abs(p.x);\n    p.x-=0.05;\n    p.y+=0.03;\n    float mask = B(p,vec2(size,size*3.5));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat segU(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.03;\n    float mask = B(p,vec2(size,size*3.5));\n    d = max(-mask,d);\n    return d;\n}\n\n\nfloat segV(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    p = prevP;\n    p.y+=0.1;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    p = prevP;\n    \n    p.x-=0.05;\n    p.y+=0.08;\n    mask = B(p,vec2(size,size*2.0));\n    d = max(-mask,d);\n    return d;\n}\n\n\nfloat segW(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    p = prevP;\n    p.y+=0.1;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat segX(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.y = abs(p.y);\n    p.y-=0.08;\n    float mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segY(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.x=abs(p.x);\n    p.x-=0.05;\n    p.y+=0.05;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.y-=0.08;\n    mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segZ(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x-=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segPlus(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p = abs(p);\n    p.x-=0.05;\n    p.y-=0.08;\n    float mask = B(p,vec2(size,size*2.));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segMinus(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p = abs(p);\n    p.x-=0.05;\n    p.y-=0.08;\n    float mask = B(p,vec2(size*2.,size*2.));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat segColon(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.028;\n    p.y = abs(p.y);\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(mask,d);\n    \n    return d;\n}\n\nfloat segDecimalPoint(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.028;\n    p.y+=0.1;\n    float mask = B(p,vec2(size,size));\n    d = max(mask,d);\n    return d;\n}\n\nfloat drawFont(vec2 p, int char){\n    float d = 10.;\n    if(char == seg_0) {\n        d = seg0(p);\n    } else if(char == seg_1) {\n        d = seg1(p);\n    } else if(char == seg_2) {\n        d = seg2(p);\n    } else if(char == seg_3) {\n        d = seg3(p);\n    } else if(char == seg_4) {\n        d = seg4(p);\n    } else if(char == seg_5) {\n        d = seg5(p);\n    } else if(char == seg_6) {\n        d = seg6(p);\n    } else if(char == seg_7) {\n        d = seg7(p);\n    } else if(char == seg_8) {\n        d = seg8(p);\n    } else if(char == seg_9) {\n        d = seg9(p);\n    } else if(char == seg_A) {\n        d = segA(p);\n    } else if(char == seg_B) {\n        d = segB(p);\n    } else if(char == seg_C) {\n        d = segC(p);\n    } else if(char == seg_D) {\n        d = segD(p);\n    } else if(char == seg_E) {\n        d = segE(p);\n    } else if(char == seg_F) {\n        d = segF(p);\n    } else if(char == seg_G) {\n        d = segG(p);\n    } else if(char == seg_H) {\n        d = segH(p);\n    } else if(char == seg_I) {\n        d = segI(p);\n    } else if(char == seg_J) {\n        d = segJ(p);\n    } else if(char == seg_K) {\n        d = segK(p);\n    } else if(char == seg_L) {\n        d = segJ(p);\n    } else if(char == seg_M) {\n        d = segM(p);\n    } else if(char == seg_N) {\n        d = segN(p);\n    } else if(char == seg_O) {\n        d = segO(p);\n    } else if(char == seg_P) {\n        d = segP(p);\n    } else if(char == seg_Q) {\n        d = segQ(p);\n    } else if(char == seg_R) {\n        d = segR(p);\n    } else if(char == seg_S) {\n        d = segS(p);\n    } else if(char == seg_T) {\n        d = segT(p);\n    } else if(char == seg_U) {\n        d = segU(p);\n    } else if(char == seg_V) {\n        d = segV(p);\n    } else if(char == seg_W) {\n        d = segW(p);\n    } else if(char == seg_X) {\n        d = segX(p);\n    } else if(char == seg_Y) {\n        d = segY(p);\n    } else if(char == seg_Z) {\n        d = segZ(p);\n    } else if(char == seg_Plus) {\n        d = segPlus(p);\n    } else if(char == seg_Minus) {\n        d = segMinus(p);\n    } else if(char == seg_Colon) {\n        d = segColon(p);\n    } else if(char == seg_DP) {\n        d = segDecimalPoint(p);\n    }\n    \n    return d;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}