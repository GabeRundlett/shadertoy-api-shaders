{
    "Shader": {
        "info": {
            "date": "1724011976",
            "description": "combination of https://www.shadertoy.com/view/XXyGzh  https://www.shadertoy.com/view/mlfXD4",
            "flags": 0,
            "hasliked": 0,
            "id": "lcfBRj",
            "likes": 2,
            "name": "storm cloud",
            "published": 3,
            "tags": [
                "cloud",
                "storm"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 93
        },
        "renderpass": [
            {
                "code": "#define SPHERE_SIZE 0.75\n#define NOISE_SIZE 3.0\n#define NOISE_OCTAVES 5\n#define GAS_COLOR vec3(0.4, 0.3, 1.8)\n#define MARCH_STEPS 128\n\n#define norm(a) (a + 1.0) * 0.5\n    \n//thanks: https://www.shadertoy.com/view/ll33zS\nvec3 getCamera(vec3 z, vec3 p)\n{\n\tvec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), z));\n    return mat3(x, cross(z, x), z) * p;\n}\n\nvec3 quantic(vec3 t)\n{\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat rand3(vec3 n) \n{ \n\treturn fract(sin(dot(n, vec3(12.9898, 4.1414, 17.9361))) * 43758.5453);\n}\n\nvec2 spherize(in vec2 uv, vec2 center, float strength)\n{\n    vec2 delta = uv - center;\n    float delta2 = dot(delta.xy, delta.xy);\n    float delta4 = delta2 * delta2;\n    float delta_offset = delta4 * strength;\n    return center + delta * (1.+delta_offset)/(1.+0.2*strength);\n}\nfloat valueNoise3(vec3 p)\n{\n\tvec3 ip = floor(p);\n    vec3 lp = p - ip;\n    vec3 q  = quantic(lp);\n    \n    float v1   = rand3(ip); //+ vec3(0.0, 0.0, 0.0);\n    float v2   = rand3(ip     + vec3(1.0, 0.0, 0.0));\n    float v3   = rand3(ip     + vec3(0.0, 1.0, 0.0));\n    float v4   = rand3(ip     + vec3(1.0, 1.0, 0.0));\n    \n    float v5   = rand3(ip     + vec3(0.0, 0.0, 1.0));\n    float v6   = rand3(ip     + vec3(1.0, 0.0, 1.0));\n    float v7   = rand3(ip     + vec3(0.0, 1.0, 1.0));\n    float v8   = rand3(ip     + vec3(1.0, 1.0, 1.0));\n    \n\treturn mix(mix(mix(v1,v2,q.x), mix(v3,v4,q.x), q.y),\n               mix(mix(v5,v6,q.x), mix(v7,v8,q.x), q.y), q.z);\n}\n\nfloat valueFBM3(vec3 pos, int octaves)\n{\n    float res = 0.0;\n    float ma = 0.0;\n    float amplitude = 0.7;\n    const float persistance = 0.5;\n    \n    for(int x = 0; x < octaves; x++)\n    {\n        ma += amplitude;\n        \n        //res += abs((0.5 - valueNoise3(pos)) * amplitude * 2.0);\n        res += valueNoise3(pos) * amplitude;\n        pos *= 2.0;\n        amplitude *= persistance;\n    }\n    return res / ma;\n}\nvec4 raymarch(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    float density = 0.0;\n    float rs = length(rd) / float(MARCH_STEPS);\n    \n    vec4 res = vec4(0.0);\n    for(int x = 0; x < MARCH_STEPS; x++)\n    {\n        vec3 pos = ro + rd * t;\n        float lp = length(pos);\n        if(lp < SPHERE_SIZE)\n        {\n            float noise = valueFBM3(pos * NOISE_SIZE, NOISE_OCTAVES);\n            float sd = t * (1.0 - lp / SPHERE_SIZE);\n            \n            density = max(density,sd * 2.0 * pow(noise,4.0));\n            \n            vec4 A = res;\n            vec4 B = vec4(GAS_COLOR * density * 10.0, density);\n            \n            res = vec4(0.0);\n            res.a = A.a + B.a * (1.0 - A.a);\n            res.rgb = (A.rgb * A.a + B.rgb * B.a * (1.0 - A.a)) \n                              / res.a;\n        }\n        t +=rs;\n    }\n    \n    return res;\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat normnoise(float noise) {\n\treturn 0.5*(noise+1.0);\n}\n\nfloat clouds(vec2 uv) {\n    uv += vec2(iTime*0.05, + iTime*0.01);\n    \n    vec2 off1 = vec2(50.0,33.0);\n    vec2 off2 = vec2(0.0, 0.0);\n    vec2 off3 = vec2(-300.0, 50.0);\n    vec2 off4 = vec2(-100.0, 200.0);\n    vec2 off5 = vec2(400.0, -200.0);\n    vec2 off6 = vec2(100.0, -1000.0);\n\tfloat scale1 = 3.0;\n    float scale2 = 6.0;\n    float scale3 = 12.0;\n    float scale4 = 24.0;\n    float scale5 = 48.0;\n    float scale6 = 96.0;\n    return normnoise(snoise(vec3((uv+off1)*scale1,iTime*0.5))*0.8 + \n                     snoise(vec3((uv+off2)*scale2,iTime*0.4))*0.4 +\n                     snoise(vec3((uv+off3)*scale3,iTime*0.1))*0.2 +\n                     snoise(vec3((uv+off4)*scale4,iTime*0.7))*0.1 +\n                     snoise(vec3((uv+off5)*scale5,iTime*0.2))*0.05 +\n                     snoise(vec3((uv+off6)*scale6,iTime*0.3))*0.025);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n      \n   \n     uv=  spherize(uv,vec2(0.5,0.5),5.+5.*cos(iTime));\n    \n    // aspect ratio for correction rays..\n    float a = iResolution.x / iResolution.y;\n    \n    // ray origin\n    vec3 ro = vec3(0.0);\n    if(iMouse.z > 0.9)\n    {\n        float mPosX = (iMouse.x / iResolution.x - 0.5) * 15.0;\n        ro = vec3(sin(mPosX), 0.5, -cos(mPosX));\n    }\n    else\n        ro = vec3(sin(iTime * 0.4), 0.5, cos(iTime * 0.4));\n        vec4 o= fragColor;\n    vec2 u= fragCoord;\n    \n  vec2 v = iResolution.xy;\n         u = .2*(u+u-v)/v.y;    \n         \n    vec4 z = o = vec4(1,2,3,0);\n     \n    for (float a = 0.1, t = iTime*2.1, i; \n         ++i < 19.; \n         o += (10. + cos(z+t)) \n            / length((1.+i*dot(v,v)) \n                   * sin(1.5*u/(.5-dot(u,u)) - 9.*u.yx + t))\n         )  \n        v = cos(++t - 7.*u*pow(a += .005, i)) - 5.*u,                 \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n              \n     o = 25.6 / (min(o, 13.) + 164. / o) \n       - dot(u, u) / 250.;\n \n     vec2 center = vec2(0.5,0.5*(iResolution.y/iResolution.x));\n    \n    vec2 light1 = vec2(sin(iTime*1.2+50.0)*1.0 + cos(iTime*0.4+10.0)*0.6,sin(iTime*1.2+100.0)*0.8 + cos(iTime*0.2+20.0)*-0.2)*0.2+center;\n    vec3 lightColor1 = vec3(1.0, 0.3, 0.3);\n    \n    vec2 light2 = vec2(sin(iTime+3.0)*-2.0,cos(iTime+7.0)*1.0)*0.2+center;\n    vec3 lightColor2 = vec3(0.3, 1.0, 0.3);\n    \n    vec2 light3 = vec2(sin(iTime+3.0)*2.0,cos(iTime+14.0)*-1.0)*0.2+center;\n    vec3 lightColor3 = vec3(0.3, 0.3, 1.0);\n\n    \n    float cloudIntensity1 = 0.7*(1.0-(2.5*distance(uv, light1)));\n    float lighIntensity1 = 1.0/(100.0*distance(uv,light1));\n\n    float cloudIntensity2 = 0.7*(1.0-(2.5*distance(uv, light2)));\n    float lighIntensity2 = 1.0/(100.0*distance(uv,light2));\n    \n    float cloudIntensity3 = 0.7*(1.0-(2.5*distance(uv, light3)));\n    float lighIntensity3 = 1.0/(100.0*distance(uv,light3));\n    \n    \n\t\n vec2 pos = 0.5 - uv;\n    // Adjust y by aspect for uniform transforms\n    pos.y /= iResolution.x/iResolution.y;\n    \n \n    float dist = 1.0/length(pos);\n   \n    dist *= 0.1;\n    \n   \n    dist = pow(dist, 0.8);\n    \n   \n    vec3 col = dist * vec3(0.0, 1.0, 1.0);\n\t\n    // Tonemapping. See comment by P_Malin\n    col = 1.0 - exp( -col );\n    vec2 dTr = vec2(1.0, 1.0);\n    vec2 dTl = vec2(-1.0, 1.0);\n    vec2 dBr = vec2(1.0, -1.0);\n    vec2 dBl = vec2(-1.0, -1.0);\n    \n    // common uv ray direction\n    vec3 rd = vec3(mix(mix(dBl, dBr, uv.x),\n                       mix(dTl, dTr, uv.x), uv.y),\n                   1.0);\n    rd.x *= a;\n    rd = getCamera(ro, vec3(rd.xy, -0.9));\n    \n    fragColor = vec4(raymarch(ro,rd * 1.0))*o*2.25;\n  \n  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}