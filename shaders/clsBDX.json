{
    "Shader": {
        "info": {
            "date": "1693529082",
            "description": "A zellij tile pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "clsBDX",
            "likes": 4,
            "name": "Zellij pattern 18 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "zellige"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(fract(.5+(a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\nvec3 fractal(vec2 uv,vec2 t2){\n    vec3 col = vec3(0.);\n    bool b = true;\n    for(int k = 0; k < 6; k++){\n        uv =\n            abs(.5+uv+t2)/1.5\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n        b =\n            uv.y>uv.x\n            //uv.y>uv.x||!b\n        ;\n        if(\n            b\n        ) uv = uv.yx;\n        t2 =\n            -triangle_wave(uv-.5).yx\n        ;\n        uv =\n            (t2.yx-triangle_wave(uv.yx+1.)).yx\n        ;\n        //if(uv.y<uv.x||b)\n        col =\n            vec3(col.zx,max(abs(uv.x-uv.y)*sign(t2.x-t2.y),0.))\n            //vec3(col.zx,max((uv.x+uv.y+1.),0.))\n            //abs(vec3(col.zx,max(uv.y-uv.x,col.y)))\n            //vec3(col.zx,max(col.y,max(uv.y-uv.x,0.)))\n            //vec3(col.zx,max(col.y,max(abs(uv.x-uv.y)*sign(t2.x-t2.y),0.)))\n        ;\n        \n        }\n        return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0.0);\n    float t1 = 1.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1/2.0;\n    vec2 t2 = vec2(0.);\n    vec3 col = fractal(uv,t2);\n    for(int i = 0; i < 1; i++){\n        col = abs(fractal(uv,t2));\n    }\n    \n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //a /= 1. + mod(1.+b/2.,2.);\n    return\n        mod(mod(floor(a),b)*mod(floor((a)/b),b),b)\n        //mod(mod(floor(a),b+mod(floor(a/8.),b)),b)\n        //floor(mod(mod(floor(a)/b,b)*mod(floor((a)/b),b),b))\n        //floor(mod(mod(floor(a),b*2.)*mod(floor((a/2.)/b),b),b))\n        //mod(mod(floor(a),b)*mod(floor((a)/b),b),b*b)\n        //mod(mod(floor(a),b)*mod(floor((a)/8.),b),b)\n    ;\n}\n\nfloat prime_rhythm(float time){\n    //divide by prime numbers to get an interesting rhythm\n    return (1.+fmod(time/2.,2.))*(1.+fmod(time/3.,2.))*(1.+fmod(time/5.,2.))*(1.+fmod(time/7.,2.));\n}\n\nvec2 mainSound(int samp, float time){\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time)\n  ,\n  t = s1*time/tempo1,\n  t4 =\n      //t/tempo1\n      t*tempo1\n  ,\n  t1 = fmod(t4+1.,2.),\n  t5 = t,\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time/t3,\n  m3 =\n      floor(fmod(t6,s1/2.)/2.),\n      //floor(fmod(t6,s1/2.+floor(tempo1/2.))/2.),\n  m2 =\n      1. + fmod(t/t3/2.,s1/2.)\n      //1. + fmod(t/t3/2.,s1/2.)\n  ;\n  vec2 a= vec2(\n      //(1.-log(fract(t/tempo1)/2.))*(1.-log(fract(t/prime_rhythm(time+7.))/4.))\n      pow(1.-log(fract(t/tempo1)/2.),2.),pow(2.,1.-log(fract(t/prime_rhythm(time+7.))/4.))\n  ),\n  nb = vec2(\n      t*pow(2.,(m3+m2-t1*4.)/7.+7.5)*tempo1/8.\n  );\n  return\n      abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a\n      //log(a/8.-abs(a/16.-abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a))\n      //log(a/8.-abs(a/4.-abs(.5-vec2(fract(nb.x*.998),fract(nb.y/2.)))*a))\n      //abs(a/16.-abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a)\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a))\n      \n      //log(a/16.-abs(a/4.-abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a))\n      \n      \n      //abs(.5-vec2(fract(t*nb*.998/prime_rhythm(time+14.)),fract(t*nb/prime_rhythm(time+7.)/2.)))*a\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}