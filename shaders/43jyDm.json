{
    "Shader": {
        "info": {
            "date": "1727322319",
            "description": "zoom",
            "flags": 0,
            "hasliked": 0,
            "id": "43jyDm",
            "likes": 0,
            "name": "Sep252024v3",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 51
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nconst float torusMajorRadius = 1.0;\nconst float torusMinorRadius = 0.5;\n\nfloat torusSDF(vec3 p, float R, float r) {\n    vec2 q = vec2(length(p.xz) - R, p.y);\n    return length(q) - r;\n}\n\nvec2 rotateUV(vec2 uv, float rotation) {\n    float mid = 0.0;\n    return vec2(\n        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Center the UV with the provided zoom level\n    uv *= .1;\n    \n    // Rotate UV to simulate looking at the center of the torus\n    uv = rotateUV(uv, PI/2.0);\n    \n    // Convert UV to polar coordinates\n    float radius = length(uv);\n    float angle = atan(uv.y, uv.x);\n    \n    // Map radius to torus cross-section\n    float mappedRadius = (radius - torusMajorRadius + torusMinorRadius) / (torusMinorRadius * 2.0);\n    \n    // Create radiating pattern\n    float pattern = sin(angle * 10.0 + iTime * .5) * 0.5 + 0.5;\n    pattern *= sin(mappedRadius * PI * 10.0 - iTime * 1.0) * 0.5 + 0.5;\n    \n    // Add some variation based on radius\n    //pattern *= smoothstep(0.0, 0.2, abs(mappedRadius - 0.5)) + 0.5;\n    \n    // Create color gradient\n    vec3 color1 = vec3(0.1, 0.4, 0.8);\n    vec3 color2 = vec3(0.8, 0.1, 0.3);\n    vec3 finalColor = mix(color1, color2, pattern);\n    \n    // Add brightness variation\n    finalColor *= (0.8 + 0.2 * sin(angle * 4000.0 + iTime));\n    \n    // Output\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}