{
    "Shader": {
        "info": {
            "date": "1552856415",
            "description": "Exploring procedural painting",
            "flags": 32,
            "hasliked": 0,
            "id": "tsBXRh",
            "likes": 45,
            "name": "Bottomless depth",
            "published": 3,
            "tags": [
                "zoom"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1536
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Bottomless depth\n// Exploring procedural painting\n// Licensed under hippie love conspiracy\n// Leon Denise (ponk) 2019.03.17\n// Using code from:\n// Inigo Quilez (shadertoy.com/view/Xds3zN)\n// Morgan McGuire (shadertoy.com/view/4dS3Wd)\n\nconst float zoomSpeed = 0.05;\nconst float noiseScale = 4.;\nconst float noiseSpeed = 0.0;\n\nconst float PI = 3.1415;\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    float n = dot(i, step);\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\nfloat fbm (vec3 p) {\n  float amplitude = .5;\n  float result = 0.0;\n  for (float index = 0.0; index <= 5.0; ++index) {\n    result += noise(p / amplitude) * amplitude;\n    amplitude /= 2.;\n  }\n  return result;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec3 color = vec3(1);\n  float timeline = iTime*zoomSpeed;\n  vec2 unit = 1./iResolution.xy;\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  vec2 p = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n  float stage = floor(timeline);\n  float ratio = fract(timeline);\n  const float iterations = 3.;\n  float spawn = 1.;\n  float zoom = .5;\n  float scale = noiseScale * iResolution.y / 320.;\n  for (float index = iterations; index > 0.; --index) {\n    ratio = mod(ratio+1./iterations, 1.);\n    vec3 s = vec3(p*scale*(zoom-ratio*zoom), 1. + timeline*noiseSpeed);\n    float salty = fbm(s) * 2. - 1.;\n    float angle = salty * PI * 8.;\n    uv += vec2(cos(angle),sin(angle)) * unit * sin(ratio*PI);\n    spawn *= 1. - abs(sin(angle)) * sin(ratio*PI);\n  }\n  color *= spawn;\n  float blend = (.5+.5*(1.-spawn));\n  fragColor = texture(iChannel0, uv)*blend + (1.-blend)*vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}