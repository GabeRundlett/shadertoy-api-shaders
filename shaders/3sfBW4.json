{
    "Shader": {
        "info": {
            "date": "1588205288",
            "description": "my first little shader project :3",
            "flags": 0,
            "hasliked": 0,
            "id": "3sfBW4",
            "likes": 4,
            "name": "fun spiral",
            "published": 3,
            "tags": [
                "test",
                "beginner",
                "spiral"
            ],
            "usePreview": 0,
            "username": "kit_spin",
            "viewed": 423
        },
        "renderpass": [
            {
                "code": "float drawspiral(in float wingsize, float fuzz, float d, float offset, \n                 float wings, float zoom, float speed, float nudge){\n    //Draw displacement map\n\treturn smoothstep(wingsize, wingsize+fuzz,\n                      abs(sin(d*zoom+\n                              offset*wings+\n                              iTime*speed+\n                              nudge)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\t\n    //Place origin at center of screen\n    st = st *2.00-1.000;\n    st.x *= iResolution.x/iResolution.y;\n\t\n    //Concentric circles distance map from center\n    d = length( abs(st) );\n\t\n    //Nudge pixels towards the center relative to the angle from the X axis\n    float offset = (atan(st.y/st.x));  \n    \n    //Unfocus edgest more when closer to center\n    float focus = pow(d,-.5)/2.00;\n    \n    // Edit these things for fun and profit\n    // \t\t\t\t\t(size , fuzz \t  , d, offset, wings, zoom , speed, nudge)\n    float r = drawspiral(0.700, 0.20*focus, d, offset, \n                         6.000, 10.0, 1.000, iTime);\n    float g = drawspiral(0.700, 0.20*focus, d, offset, \n                         6.000, 10.*sin(iTime/3.0 ), 1.000, 2.000);\n    float b = drawspiral(0.700, 0.20*focus, d, offset, \n                         6.000, 10.*sin(iTime/3.0 +1.57078), 1.000, 2.200);\n    \n    color = vec3(r,g,b);\n    \n    fragColor = vec4(color, 1);\n    \n    //uncomment this line to force black and white and read only from 'b' only\n    //fragColor = vec4(vec3(b), 1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}