{
    "Shader": {
        "info": {
            "date": "1585338404",
            "description": "Tracking edges and neighbor edges. Loop hack to accelerate compilation times.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "wdsczB",
            "likes": 5,
            "name": "Voronoi edge tracking III",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "float gauss(float x, float r)\n{\n    x/=r;\n    return exp(-x*x);\n}\n\nivec4 get(ivec2 p)\n{\n    return floatBitsToInt(texel(ch0, p));\n}\n\nedges gete(ivec2 p)\n{\n    edges e;\n    ivec4 A = floatBitsToInt(texel(ch2, p));\n    for(int i = 0; i < 4; i++)\n    {\n        e.ids[i] = A[i]%tot_n;\n        e.ids[i+4] = A[i]/tot_n;\n    }\n    return e;\n}\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nbool loadparticles(in edges e, inout vec2[8] xy)\n{\n    for(int i = 0; i < 8; i++)\n    {\n        if(e.ids[i] < 0) return false;\n        xy[i] = getParticle(e.ids[i]).xy;\n    }\n    return true;\n}\n\nvec2 getCC(inout edges e, inout vec2[8] xy, int i) //get circumcenter\n{\n    int j = bitreverse3(i);\n    ivec2 par = getParents(j);\n    ivec2 id = ivec2((par.x + j)%8,(par.y + j)%8); \n    //get the circumcenter for this branch of the binary tree\n    if(any(equal(ivec3(e.ids[j],e.ids[id.x],e.ids[id.y]),\n                 ivec3(e.ids[id.x],e.ids[id.y],e.ids[j])))) return vec2(0.);\n    vec2 cc = circumcenter(xy[j], xy[id.x], xy[id.y]);\n \treturn cc; \n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat getEdgeDistance(ivec2 p, vec2 pos)\n{\n    edges e = gete(p);\n    vec2 xy[8];\n    if(!loadparticles(e, xy)) return 1e10;\n    vec4 edge0 = vec4(getCC(e, xy, 2),getCC(e, xy, 3));\n    vec4 side1 = vec4(getCC(e, xy, 4),getCC(e, xy, 5));\n    vec4 side2 = vec4(getCC(e, xy, 6),getCC(e, xy, 7));\n    float d = sdSegment(pos, edge0.xy, edge0.zw);\n    d = min(d, sdSegment(pos, edge0.xy, side1.xy));\n    d = min(d, sdSegment(pos, edge0.zw, side1.zw));\n    d = min(d, sdSegment(pos, edge0.xy, side2.xy));\n    d = min(d, sdSegment(pos, edge0.zw, side2.zw));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    vec4 mouse = iMouse;\n    if(mouse.z == 0.) mouse.xy = size*0.5;\n    pos = pos*0.15 + mouse.xy;\n    ivec2 p = ivec2(pos);\n    //get closest edge \n \t//edges e = gete(p);\n    //float D = float(e.ids[3]);\n    float D = gauss(getEdgeDistance(p, pos), 0.5);\n    float M = 2.*gauss(getEdgeDistance(ivec2(mouse.xy + 0.075*size), pos), 1.);\n    fragColor = 0.5 + 0.5*sin(vec4(1,3,1,4)*D + vec4(3,2,1,4)*M);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n#define N ivec2(64,64)\n#define dt 0.3\n\n#define loop(x) for(int i = min(0, iFrame); i < x; i++)\n\n\nconst int tot_n = N.x*N.y;\n\nfloat hash11(float p)\n{\n    p = fract(p * 15.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p) - 0.5;\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nconst int k = 1664525;  \n\nivec4 hash( ivec4 x )\n{\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    return ivec4(x);\n}\n\nivec2 i2xy(int id)\n{\n    return ivec2(id%N.x, id/N.x);\n}\n\nint xy2i(ivec2 p)\n{\n    return p.x + p.y*N.x;\n}\n\nivec2 cross_distribution(int i)\n{\n    return (1<<(i/4)) * ivec2( ((i&2)/2)^1, (i&2)/2 ) * ( 2*(i%2) - 1 );\n}\n\nvec2 circumcenter(vec2 x, vec2 y, vec2 z)\n{\n    vec2 xy = y - x;\n    vec2 xz = z - x;\n    vec2 a = 0.5*(x+y);\n    vec2 b = 0.5*(x+z);\n    vec2 d = vec2(dot(xy,a), dot(xz,b));\n    float det = determinant(mat2(xy, xz));\n    return vec2(determinant(mat2(d.x, xy.y, d.y, xz.y)),determinant(mat2(xy.x, d.x, xz.x, d.y)))/det;\n}\n\nstruct edges\n{\n    int ids[8];\n};\n    \n    \n//reverse the order of 3 bits\nint bitreverse3(int i)\n{\n    return ((i&1)<<2) +\n            (i&2) +\n           ((i&4)>>2);    \n}\n\nivec2 getParents(int i)\n{\n    if(i%2 == 0) return ivec2(-2,2);\n    return ivec2(-1,1);\n}\n    ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//particle buffer\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nfloat F(float d)\n{\n    return -1./(1.+0.05*d);\n}\n\nvec2 Fv(vec2 p0, vec2 p1)\n{\n    return normalize(p1-p0)*F(distance(p1,p0));\n}\n\nivec4 get(ivec2 p)\n{\n    return floatBitsToInt(texel(ch0, p));\n}\n\nvec4 save(ivec4 v)\n{\n    return intBitsToFloat(v);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    \n    if(p.x > N.x || p.y > N.y) discard;\n    \n    pos = floor(pos);\n    \n    //this pixel value\n    U = texel(ch1, pos);\n    int id = xy2i(p);\n\n    //neighbors\n    ivec4 cp = get(ivec2(U.xy));\n    vec4 p1 = getParticle(cp.y);\n    vec4 p2 = getParticle(cp.z);\n    vec4 p3 = getParticle(cp.w);\n\n    vec2 F = Fv(U.xy, p1.xy) +\n             Fv(U.xy, p2.xy) +\n             Fv(U.xy, p3.xy);\n\n    ivec4 mnb = get(ivec2(iMouse.xy));\n\n    if(any(equal(ivec2(id),mnb.xy)) && iMouse.z>0.)\n    {\n        F += 0.0*(iMouse.xy - iMouse.zw); \n    }\n\n    U.xy += F*dt;\n\n    if(size.x - U.x < 2.) U.x = size.x - 2.;\n    if(U.x < 2.) U.x = 2.;\n    if(size.y - U.y < 2.) U.y = size.y - 2.;\n    if(U.y < 2.) U.y = 2.;\n\n    //this pixel value\n    if(iFrame<1)\n    {\n        U.xy = size*hash22(pos);\n        U.zw = 2.*(hash22(3.14159*pos) - 0.5);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//4th order voronoi particle tracking \n\nivec4 get(ivec2 p)\n{\n    return floatBitsToInt(texel(ch0, p));\n}\n\nvec4 save(ivec4 v)\n{\n    return intBitsToFloat(v);\n}\n\nivec4 u; //ids\nvec4 d; //distances\nvec2 pos; //pixel position\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nfloat particleDistance(int id, vec2 p)\n{\n    return distance(getParticle(id).xy, p);\n}\n\n//insertion sort\nvoid sort(int utemp)\n{\n   \tfloat dtemp = particleDistance(utemp, pos);\n    //sorting\n    if(d.x > dtemp)\n    {\n        d = vec4(dtemp, d.xyz);\n        u = ivec4(utemp, u.xyz);\n    }\n    else if(d.y > dtemp && dtemp > d.x)\n    {\n        d.yzw = vec3(dtemp, d.yz);\n        u.yzw = ivec3(utemp, u.yz);\n    }\n    else if(d.z > dtemp && dtemp > d.y)\n    {\n        d.zw = vec2(dtemp, d.z);\n        u.zw = ivec2(utemp, u.z);\n    }\n    else if(d.w > dtemp && dtemp > d.z)\n    {\n        d.w = dtemp;\n        u.w = utemp;\n    }\n}\n\nvoid sortpos(ivec2 p)\n{\n    ivec4 nb = get(p);\n    for(int j = 0; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{\n    pos = fragCoord;\n    ivec2 p = ivec2(pos);\n     \n    u = ivec4(1); d = vec4(1e10); \n   \n    //jump flood sorting \n    sortpos(p); //resort this position\n    loop(8)\n    {\n        sortpos(p+cross_distribution(i)); \n    }\n    \n    loop(4)\n    {\n        sort(hash(ivec4(p, iFrame, i)).x%tot_n); //random sort    \n    }\n    \n    U = save(u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//2nd order edge tracking\nvec2 xy[8];     \nedges E;\nint n;\n\nivec4 GET(ivec2 p)\n{\n    return floatBitsToInt(texel(ch0, p));\n}\n\nedges get(ivec2 p)\n{\n    edges e;\n    ivec4 A = floatBitsToInt(texel(ch2, p));\n    for(int i = 0; i < 4; i++)\n    {\n        e.ids[i] = A[i]%tot_n;\n        e.ids[i+4] = A[i]/tot_n;\n    }\n    return e;\n}\n\nvec4 save()\n{\n    return intBitsToFloat(ivec4(E.ids[0],E.ids[1],E.ids[2],E.ids[3]) + \n                          ivec4(E.ids[4],E.ids[5],E.ids[6],E.ids[7])*tot_n);\n}\n\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nbool isSame(ivec3 a, ivec3 b) //is the id triplet the same\n{\n    return any(equal(a.xxx,b)) && any(equal(a.yyy,b)) && any(equal(a.zzz,b));\n}\n\nbool isEdgeParticle(int id, vec2 pxy, ivec2 id2, vec4 nbxy)\n{\n    //edge point guess\n    vec2 cc = circumcenter(nbxy.xy, nbxy.zw, pxy);\n    //check the voronoi diagram at the guess\n    if(cc.x > size.x-1. || cc.y > size.y-1. || cc.x < 0. || cc.y < 0.) return false;\n    ivec4 t = GET(ivec2(cc));\n    //the first 3 closest particles at the edge point pretty much always are the particles that produce the edge\n    return isSame(t.xyz, ivec3(id2, id));\n}\n\n\n\n//edge store\nvoid store(int utemp)\n{\n\tvec4 part = getParticle(utemp);\n    for(int i = 0; i < 8; i++)\n    {\n        if(E.ids[i] == utemp) return;\n    }\n    int j; bool found = false;\n\tloop(8)\n    {\n        j = bitreverse3(i);\n        if(E.ids[j] >= 0) continue;\n        ivec2 par = getParents(j);\n        ivec2 id = ivec2((par.x + j)%8,(par.y + j)%8); \n        ivec2 pid = ivec2(E.ids[id.x],E.ids[id.y]);\n        vec4 pxy = vec4(xy[id.x],xy[id.y]);\n        if(isEdgeParticle(utemp, part.xy, pid, pxy)) {\n         \tfound = true;\n            break;\n        }\n    }\n    \n    if(found)\n   \tfor(int i = 0; i < 8; i++)\n    {\n        if(i==j)\n        {\n            E.ids[j] = utemp;\n            xy[j] = part.xy;\n        }\n    }  \n}\n\nvoid storepos(ivec2 p)\n{\n    ivec4 nb = GET(p);\n    loop(4)\n    {\n        store(nb[i]);\n    }\n  \n}\n\nvoid storeE(in edges e)\n{\n    loop(8)\n    {\n        store(e.ids[i]);\n    }\n}\n\nvoid storeedge(ivec2 p)\n{\n   edges e = get(p);\n   storeE(e);\n}\n\nbool isUndef()\n{\n    loop(8)\n    {\n        if(E.ids[i] < 0) return true;\n    }\n    return false;\n}\n\n\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord;\n    \n    ivec2 p = ivec2(pos);\n\n    for(int i = 0; i < 8; i++)\n    {\n        xy[i] = vec2(1e10);\n        E.ids[i] = -1;\n    }\n    \n    //set parents of the binary tree;\n    ivec4 closest = GET(p);\n    E.ids[0] = closest.x;\n    E.ids[4] = closest.y;\n    xy[0] = getParticle(closest.x).xy;\n    xy[4] = getParticle(closest.y).xy;\n    \n    //jump flood sorting \n    \n    //prev edge \n    edges e = get(p);\n    \n    storeE(e); //resort this position\n    storepos(p);\n    \n    loop(4)\n    {\n        storeedge(p+cross_distribution(i));\n        store(hash(ivec4(p, iFrame, i)).x%tot_n); //random sort    \n    }\n    \n    loop(12)\n    {\n        storepos(p+cross_distribution(i));\n    }\n    \n    if(isUndef())\n    {\n        E = e;\n \t\tfor(int i = 0; i < 8; i++)\n    \t{\n            E.ids[i] = (E.ids[i] < 0)?i:E.ids[i];\n        }\n    }\n    \n    U = save();\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}