{
    "Shader": {
        "info": {
            "date": "1453602837",
            "description": "My first real attempt at drawing with raymarching functions. Thanks to everybody who helps beginners like me understand this stuff :)",
            "flags": 0,
            "hasliked": 0,
            "id": "XdGGzw",
            "likes": 103,
            "name": "First Raymarches",
            "published": 3,
            "tags": [
                "raymarching",
                "hexagons"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 11613
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS 128\n\nfloat sdHexPrism( vec3 p, vec2 h ) {\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat opRep( vec3 p, vec3 spacing ) {\n    vec3 q = mod(p, spacing) - 0.5 * spacing;\n    return sdHexPrism( q, vec2( 0.2 + 0.1 * cos(iTime/2.), 1.0 + 0.9 * sin(3.14 + iTime/2.) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 1 : retrieve the fragment's coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5, 0.5);\n\tuv.x *= iResolution.x / iResolution.y;\t\t// Correct for aspect ratio\n\t\n    // 2 : camera position and ray direction\n\t// vec3 pos = vec3( sin(iTime), 0, sin(iTime) * 5. );\n\tvec3 pos = vec3( sin(iTime), 0, iTime / 20. );\n\tvec3 dir = normalize( vec3( uv, 1. ) );\n \n\t// 3 : ray march loop\n    // ip will store where the ray hits the surface\n\tvec3 ip;\n \n\t// variable step size\n\tfloat t = 0.0;\n\tfloat findThresh = 0.001;\n\tint found = 0;\n    int last_i = 0;\n    \n\tfor(int i = 0; i < ITERATIONS; i++) {\n\t\tlast_i = i;\n        \n        //update position along path\n        ip = pos + dir * t;\n \n        //gets the shortest distance to the scene\n        //break the loop if the distance was too small\n        //this means that we are close enough to the surface\n \t\tfloat temp;\n\n\t\t// make a repeating SDF shape\n\t\ttemp = opRep( ip, vec3(2.5 + 2.0 * sin(iTime/2.) ) );\n\t\tif( temp < findThresh ) {\n\t\t\tfloat r = 0.7 + 0.3 * sin(ip.z/8. + ip.x/2.);\n\t\t\tfloat g = 0.6 + 0.3 * cos(ip.z/8. + ip.y/2.);\n\t\t\tfloat b = 0.5 + 0.4 * sin(ip.z/8. + ip.x);\n\t\t\tip = vec3(r, g, b);\n\t\t\tfound = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t//increment the step along the ray path\n\t\tt += temp;\n\t}\n\t\n\t// make background black if no shape was hit\n\tif(found == 0) {\n\t\tip = vec3(0,0,0);\n\t}\n \n\t// 4 : apply color to this fragment\n    // subtract from color as distance increases\n\tfragColor = vec4(ip - float(last_i) / float(ITERATIONS), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}