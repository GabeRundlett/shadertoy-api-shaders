{
    "Shader": {
        "info": {
            "date": "1719602813",
            "description": "st",
            "flags": 8,
            "hasliked": 0,
            "id": "McKSDy",
            "likes": 3,
            "name": "Techno Sequence Test 1",
            "published": 3,
            "tags": [
                "st"
            ],
            "usePreview": 0,
            "username": "taylormatson",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "#define time2 iTime*BPM_TO_TIME // use for env\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float phase = 0.0;\n    float wN = whole(time2, phase);\n    float qN = quarter(time2, phase);\n    float sN = sixteenth(time2, phase);\n    \n    \n    // Output to screen\n    fragColor = vec4(1.0)-qN;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define time2 time*BPM_TO_TIME // use for env, not osc\n\nvec2 mainSound( int samp, float time )\n{\n    float pc = 120./BPM; // Pitch correction - not in use\n    \n    float dest = 0.; // desitnation bus\n    \n    float kick_env = 2.*exp(-6.*quarter(time2, 0.));\n    float kick_osc = sin(TAU*58.*time);\n    \n    dest += (kick_env*kick_osc);\n    \n    float bass_env = sin(100.*exp(-10.*whole(time2, .25)));\n    float bass_osc = sin(TAU*30.*time);\n    \n    dest += (.5*bass_env*bass_osc);\n    \n    float ch_env = .01+exp(-10.*sixteenth(time2, 0.));\n    float ch_osc = random(time);\n    \n    dest += .1*(ch_env*ch_osc);\n    \n    float oh_env = .01+exp(-10.*quarter(time2, .5));\n    float oh_osc = random(time);\n    \n    dest += .1*(oh_env*oh_osc);\n    \n    return vec2(dest);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define PI 3.1415926535\n#define TAU 6.2831853071\n#define BPM 120.\n#define BPM_TO_TIME (1./120.)*BPM\n\n// Time Signatures\nfloat whole     (float time, float phase){ return fract(time   +phase); }\nfloat quarter   (float time, float phase){ return fract(time*2.+phase); }\nfloat sixteenth (float time, float phase){ return fract(time*8.+phase); }\n\n// Function to generate pseudo-random noise\nfloat random(float time) {\n    return fract(sin(dot(time, 78.233)) * 43758.5453123);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}