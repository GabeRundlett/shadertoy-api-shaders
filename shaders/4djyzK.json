{
    "Shader": {
        "info": {
            "date": "1509469600",
            "description": "Visualization of the Laplacian of a distance field. It measures average rate of of change. So it can be used to detect discontinuities and also rate of curvature of the distance field.",
            "flags": 0,
            "hasliked": 0,
            "id": "4djyzK",
            "likes": 35,
            "name": "Laplacian",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "laplacian",
                "disntancefield"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1816
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computes the laplacian of a distance field.\n\n// The Laplacian measures average rate of change at a given\n// location (while gradient measures the direction of maximum\n// change). Every linear distance region of the plane has\n// a zero laplacian, and each corner or rounded distance\n// region has a decaying 1/distance laplacian.\n//\n// The laplacian is computed analytically, but if you enable\n// the numerical laplacian in line 75 you'll see the edges of\n// the different basins of attraction, since the laplacian\n// acts as an edge filter.\n\n\n\n// .x = f(p)\n// .y = ∂f(p)/∂x\n// .z = ∂f(p)/∂y\n// .yz = ∇f(p), ‖∇f(p)‖ = 1\n// .w  = Δf(p)\nvec4 sdgBox( in vec2 p, in vec2 b )\n{\n    vec2 w = abs(p)-b;\n    vec2 s = vec2(p.x<0.0?-1:1,p.y<0.0?-1:1);\n    \n    float g = max(w.x,w.y);\n    float f = min(w.x,w.y);\n\tvec2  q = max(w,0.0);\n    float l = length(q);\n\n    return vec4(   (g>0.0)?l     : g,\n                s*((g>0.0)?q/l   : ((w.x>w.y)?vec2(1,0):vec2(0,1))),\n                   (f>0.0)?1.0/l : 0.0);\n}\n\n// .x = f(p)\n// .y = ∂f(p)/∂x\n// .z = ∂f(p)/∂y\n// .yz = ∇f(p), ‖∇f(p)‖ = 1\n// .w  = Δf(p)\nvec4 sdgCircle( in vec2 p, in float r ) \n{\n    float l = length(p);\n    return vec4( l-r, p/l, 1.0/l );\n}\n\nvec2 gPos1, gPos2;\n\nvec4 map( in vec2 p )\n{\n    vec4 d1 = sdgCircle( p-gPos1, 0.5 );\n    vec4 d2 = sdgBox(    p-gPos2, vec2(0.7,0.3) );\n    \n    if( d2.x<d1.x ) d1 = d2;\n    return d1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    gPos1 = 0.7*cos( iTime*0.55 + vec2(0.0,1.5) + 0.0 );\n\tgPos2 = 0.5*cos( iTime*0.50 + vec2(0.0,1.7) + 3.0 );\n\n\tvec4  dgl = map( p );\n    float dis = dgl.x;\n    vec2  gra = dgl.yz;\n    float lap = dgl.w;\n    \n    // enable for numerical validation\n    #if 0\n    vec2 e = vec2(2.0/iResolution.y,0.0);\n    gra = vec2(map(p+e.xy).x-map(p-e.xy).x, map(p+e.yx).x-map(p-e.yx).x)/(2.0*e.x);\n    lap = (map(p+e.xy).x + map(p-e.xy).x + map(p+e.yx).x + map(p-e.yx).x - 4.0*map(p).x)/(e.x*e.x);\n    #endif\n    \n    float shoG = smoothstep( 0.5,0.6,-sin( 6.283185*iTime/8.0 ));\n    float shoL = smoothstep(-1.0,1.0, sin( 6.283185*iTime/2.0 ));\n\tvec3 col = (dis>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.4,0.7,0.85);\n    col *= 1.0 + shoG*vec3(0.5*gra,0.0);\n\tcol *= 1.0 - exp(-16.0*abs(dis));\n    col *= 0.9 + 0.1*cos(150.0*dis);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(dis)) );\n    col += shoL*vec3(1.0,1.0,1.0)*abs(lap)*0.07;\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}