{
    "Shader": {
        "info": {
            "date": "1632287198",
            "description": "Simple example replicating the damage indicator from here: https://www.youtube.com/watch?v=xvuTdf-GGs4&t=29s",
            "flags": 0,
            "hasliked": 0,
            "id": "fdy3Dc",
            "likes": 2,
            "name": "triangle wave vfx",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "pugbyte",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// https://en.wikipedia.org/wiki/Triangle_wave\nfloat triangleWave(float t, float period) {\n    return 2. * abs(t/period - floor(t/period + .5));\n}\n\nfloat edgeEffect(float x, float y, float scale, float iTime) {\n    \n    // Make these shader uniforms and use game logic to manipulate the effect\n    float period = .07;\n    float amplitude = .07;\n    float border = mix(.0, .2, sin(iTime)*.5+.5);\n    float wave = mix(.0, .06, sin(x*scale*15.+iTime*10.)*.5+.5);\n    float shift = -iTime*.3;\n    \n    float ty = triangleWave(scale*(x+shift), period);\n    \n    return step(1.-abs(y), scale*(ty*amplitude+border+wave));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    float aspectRatio = iResolution.y/iResolution.x;\n    \n    vec3 col = vec3(0);\n    vec3 rainbow = hsv2rgb(vec3(iTime*.1, .9, .9));\n    \n    // top/bottom\n    col = mix(col, rainbow, edgeEffect(uv.x, uv.y, 1., iTime));\n    // left/right\n    col = mix(col, rainbow, edgeEffect(uv.y, uv.x, aspectRatio, iTime));\n\n    // Gamma correction\n    col = pow(max(col,0.), vec3(1./2.2));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}