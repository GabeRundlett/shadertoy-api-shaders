{
    "Shader": {
        "info": {
            "date": "1626707523",
            "description": "somewhat akin a flight over a polder landscape",
            "flags": 0,
            "hasliked": 0,
            "id": "flsSWf",
            "likes": 1,
            "name": "/polder/flight",
            "published": 3,
            "tags": [
                "grid",
                "abstract",
                "polder"
            ],
            "usePreview": 0,
            "username": "_fov",
            "viewed": 175
        },
        "renderpass": [
            {
                "code": "const vec2 cell_size = 1. / vec2(3., 10.);\nconst float diagonal_slope = 0.45;\nconst float diagonal_offset = 0.6;\n\nfloat hash1( uint n ) \n{\n    // integer hash copied from Hugo Elias\n    // implementation copied from https://www.shadertoy.com/view/llGSzw\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec4 image(vec2 uv)\n{\n    uv.y = 2.+uv.y;\n    vec2 cell_uv;\n    vec2 cell_fraction = modf(uv / cell_size, cell_uv);\n    cell_uv = cell_uv * cell_size;\n\n\n    // horizontal lines\n    bool h = (abs(cell_fraction.y -.5)>0.4275);\n\n    // vertical lines\n    float tex = hash1(uint(cell_uv.y * 20. + (cell_uv.x + floor(uv.x))* 20.));\n\n    float v_offset = 0.5 + tex /2.;\n    float cell_d_x = diagonal_offset + (1.0 - cell_uv.y) * diagonal_slope;\n    bool v = abs(cell_fraction.x - v_offset)<0.045;\n\n    if(cell_fraction.x > v_offset)\n    {\n        cell_uv.x += cell_size.x;\n        tex = hash1(uint(cell_uv.y * 20. + (cell_uv.x + floor(uv.x + cell_size.x))* 20.));\n    }\n\n    // diagonal line\n    float patch_slope = diagonal_slope * (hash1(uint(uv.x))-.5);\n    bool d = abs(diagonal_offset - fract(uv.x) + patch_slope * (1.0 - uv.y)) < 0.03;\n\n    vec3 col = h || v || d ? vec3(0.0) : vec3(tex);\n\n    return vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // dirty zoom\n    uv += 0.5;\n    uv *= 0.5;\n    \n    // basic perspective from https://www.shadertoy.com/view/ttscW2\n    float coeff =0.25 *sin(iTime/5.)+0.75;\n    \n    uv.x -= 0.5f;\n\tuv.x /= (1.0 - uv.y * coeff);\n    uv.y /= (1.0 - uv.y * coeff);\n   \n    uv.y += iTime/10.;\n    uv.x += sin(iTime/5.)/10.;\n    // Output to screen\n    fragColor = image(uv.yx);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}