{
    "Shader": {
        "info": {
            "date": "1627600020",
            "description": "single fractal letter",
            "flags": 0,
            "hasliked": 0,
            "id": "stjXDh",
            "likes": 4,
            "name": "single fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "zeo",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "/*\n\n\tdraw letter shapes after subdividing uv space randomly\n\n*/\n\n#define PI 3.1415926535\n\nfloat random2d(vec2 n) { \n    return fract(sin(dot(n, vec2(129.9898, 4.1414))) * 2398.5453);\n}\n\nvec2 getCellIJ(vec2 uv, float gridDims){\n    return floor(uv * gridDims)/ gridDims;\n}\n\nvec2 rotate2D(vec2 position, float theta)\n{\n    mat2 m = mat2( cos(theta), -sin(theta), sin(theta), cos(theta) );\n    return m * position;\n}\n\n//from https://github.com/keijiro/ShaderSketches/blob/master/Text.glsl\nfloat letter(vec2 coord, float size)\n{\n    vec2 gp = floor(coord / size * 7.); // global\n    vec2 rp = floor(fract(coord / size) * 7.); // repeated\n    vec2 odd = fract(rp * 0.5) * 2.;\n    float rnd = random2d(gp);\n    float c = max(odd.x, odd.y) * step(0.5, rnd); // random lines\n    c += min(odd.x, odd.y); // fill corner and center points\n    c *= rp.x * (6. - rp.x); // cropping\n    c *= rp.y * (6. - rp.y);\n    return clamp(c, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    //correct aspect ratio\n    // uv.x *= iResolution.x/iResolution.y;\n\n    float t = iTime;\n    float scrollSpeed = 0.3;\n    float dims = 0.5;\n    int maxSubdivisions = 0;\n    \n    // uv = rotate2D(uv,PI/12.0);\n    uv.y -= floor(iTime * scrollSpeed * 4.);\n    \n    float cellRand;\n    vec2 ij;\n    \n   \tfor(int i = 0; i <= maxSubdivisions; i++) { \n        ij = getCellIJ(uv, dims);\n        cellRand = random2d(ij);\n        dims *= 2.0;\n        //decide whether to subdivide cells again\n        float cellRand2 = random2d(ij + 454.4543);\n        if (cellRand2 > 0.3){\n        \tbreak; \n        }\n    }\n   \n    //draw letters    \n    float b = letter(uv, 1.0 / (dims));\n\t\n    //fade in\n    /* float scrollPos = iTime*scrollSpeed + 0.5;\n    float showPos = -ij.y + cellRand;\n    float fade = smoothstep(showPos ,showPos + 0.05, scrollPos );\n    b *= fade; */\n    \n    //hide some\n    //if (cellRand < 0.1) b = 0.0;\n    \n    fragColor = vec4(vec3(1.-b), 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}