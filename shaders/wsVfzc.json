{
    "Shader": {
        "info": {
            "date": "1607670980",
            "description": "A neat way to visualize a vector field (in 2D).",
            "flags": 0,
            "hasliked": 0,
            "id": "wsVfzc",
            "likes": 22,
            "name": "2D Vector Field Visualizer",
            "published": 3,
            "tags": [
                "2d",
                "visualization",
                "vector",
                "vectorfield"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 852
        },
        "renderpass": [
            {
                "code": "#define GRID_SCALE 0.1\n#define CELL_SCALE 1.0\n#define VECTOR_SCALE 0.35\n\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat sdVerticalLine(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\n\nfloat sdVectorArrow(in vec2 p, in vec2 v) {\n    float m = length(v);\n    vec2 n = v / m;\n    p = vec2(dot(p, n.yx * vec2(1.0, -1.0)), dot(p, n));\n    return min(sdVerticalLine(p, m), sdIsosceles(p - vec2(0.0, m), 0.1, 0.15));\n}\n\nvec2 VectorField(in vec2 p) {\n    float t = iTime * 0.6;\n    float co = cos(t), si = sin(t);\n    vec2 fragCoord = (p * iResolution.y + 0.5 * iResolution.xy) * 0.05;\n\tfloat a = 0.5 + 0.5 * sin(dot(fragCoord, vec2(si, co)) * 0.02 + t);\n\tfloat b = 0.5 + 0.5 * cos(length(fragCoord - vec2(320.0, 180.0) * (1.0 + vec2(-si, co))) * 0.03);\n\tfloat sup = a + b;\n\tfloat x = cos(3.14 * sup + t);\n\tfloat y\t= sin(3.14 * sup + t);\n    return vec2(x, y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec4 cell = vec4(floor(uv / GRID_SCALE / CELL_SCALE) * CELL_SCALE, mod(uv / GRID_SCALE, CELL_SCALE) - 0.5 * CELL_SCALE);\n    float unit = 2.0 / iResolution.y / GRID_SCALE;\n    float vector = sdVectorArrow(cell.zw, VectorField(cell.xy) * VECTOR_SCALE);\n    fragColor = vec4(smoothstep(unit, 0.0, vector));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}