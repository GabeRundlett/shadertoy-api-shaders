{
    "Shader": {
        "info": {
            "date": "1504102995",
            "description": "click mouse and drag.\nnot user friendly, but smmetrical\n\nCubic hermite spline interpolation.\njust a shitty liip of dots.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlscR7",
            "likes": 1,
            "name": " Cubic Hermite 2D b",
            "published": 3,
            "tags": [
                "spline",
                "cubic",
                "interpolation",
                "hermite"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 594
        },
        "renderpass": [
            {
                "code": "//parent: https://www.shadertoy.com/view/4dV3Wt\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 m=iMouse;\n    uv=uv*2.-1.;\n    vec2 p = uv * iResolution.xy;\n    \n        \n    \n    const vec2 p1 = vec2(0,0);\n    vec2 p2 = m.zw;\n    vec2 t1 = (vec2(sin(iTime),cos(iTime)))*iResolution.xy;\n    vec2 t2 = m.xy-m.zw;//vec2(1,1)*iResolution.xy;\n    \n    const float steps = 100.0;\n    \n    float n = 10.0;\n    \n    for (float step = 0.0; step < steps; step += 1.0)    {\n       \tfloat t = step / steps;\n        \n\t\tfloat h1 = 2.*t*t*t - 3.0 * pow(t, 2.0) + 1.0;\n\t\tfloat h2 = -2.0 * pow(t, 3.0) + 3.0 * pow(t, 2.0);\n\t\tfloat h3 = pow(t, 3.0) - 2.0 * pow(t, 2.0) + t;\n\t\tfloat h4 = pow(t, 3.0) - pow(t, 2.0);\n        \n        vec2 tp;\n        tp.x = h1 * p1.x + h2 * p2.x + h3 * t1.x + h4 * t2.x;\n        tp.y = h1 * p1.y + h2 * p2.y + h3 * t1.y + h4 * t2.y;\n        \n        n = min(length(tp-p), n);\n    }\n    \n    fragColor = mix(vec4(1,0,0,.01), vec4(0,0,0,1), clamp(0.0, 1.0, smoothstep(0.0, 1.0, n / 3.0)));\n}\n/**/\n// Version 2\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float m = abs( uv.x*uv.x*(3.0-2.0*uv.x) - uv.y);\n    fragColor = mix(vec4(1.0,0.0,0.0,.01), vec4(0,0,0,1.0), clamp(0.0, 1.0, smoothstep(0.0, 3.0, m*iResolution.y)));\n}\n*/\n/*\n// Version 3\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O-=O; \n    O.r = smoothstep( 5., 0.,  abs( smoothstep(0.,R.x,U.x)*R.y - U.y));\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}