{
    "Shader": {
        "info": {
            "date": "1694587233",
            "description": "Comparison of various wrong, good, better and best sRGB dithering/quantization.\n\nMouse up/down: select method,\nMouse left to right selects mode: temporal, average over time, plot proportionate error, average longer time.",
            "flags": 32,
            "hasliked": 0,
            "id": "mt2BDV",
            "likes": 8,
            "name": "sRGB Dithering",
            "published": 3,
            "tags": [
                "dithering",
                "srgb"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "/*\n\nsRGB Dithering\nhttps://www.shadertoy.com/view/mt2BDV\n\nComparison of various wrong, good, better and best sRGB dithering/quantization.\n\nMouse up/down: select method,\nMouse left to right selects mode:\n  temporal, average over time, plot proportionate error, average longer time.\n\n\nCopyright 2023-2024 Theron Tarigo.  All rights reserved.\n\nThis shader may be copied under the terms of the ISC License;\nsee end of file.  As an exception, the full permission notice may be\nomitted where this shader is copied within Shadertoy and the full URL,\n\"https://www.shadertoy.com/view/mt2BDV\", is displayed within the source.\n\n*/\nvec3 description (int method, bool isadj, bool isprop, vec2 uv);\n\nvoid mainImage (out vec4 ImgOut, vec2 f) {\n  vec2 R = iResolution.xy;\n  ivec2 I = ivec2(f);\n  ivec2 N = ivec2(R);\n  int rs = N.y/nrows;\n  int rb = I.y/rs*rs;\n  int i = nrows-1-I.y/rs;\n  vec2 u = f/R;\n\n  vec3 O = vec3(0.);\n  \n  int my = int(iMouse.y);\n  int methodsel=nrows-1-my/rs;\n  if(iMouse.y==0.)methodsel=8;\n  int rbm = (nrows-1-methodsel)*rs;\n  \n  if(u.x<.5) {\n    O = texture(iChannel0,u*vec2(2,1)).rrr;\n    //if(I.y==rbm+rs/2) O.g=1.;\n    ImgOut.rgb = O;\n    /* re-render the visual reference gradient at high quality using the best dither option */ if(i==9) for(int c=0;c<2;c++) ImgOut[c]=display_dither(8,hash(I.x+N.x*I.y)^iFrame,64,EOTF(O[c]));\n  } else {\n    u.x=u.x*2.-1.;\n    vec4 d = texelFetch(iChannel1,ivec2(u.x*R.x,rbm),0);\n    float y,t,s=exp2(3.-float(nbits));\n    \n    if(u.x<.03&&abs(float(rbm+rs/2-I.y)/R.y)<.5*u.x) O.g=1.;\n    \n    bool isadj = (methodsel>=5&&methodsel<=7);\n    bool isprop = (iMouse.x/R.x>.8);\n    \n    O+=description(methodsel,isadj,isprop,u);\n    \n    if(isprop) d=.5*d/d.w;\n    \n    y=u.y; t=1./R.y;\n    // grey plot: exact value\n    if (t>abs(-y+d.w)) O+=.1;\n    // blue plot: average result\n    if (t>abs(-y+d.x)) O.b++;\n    \n    y=(u.y*2.-1.)*.2*s; t=.4/R.y*s;\n    // grey plot: zero line\n    if (t>abs(-y)) O+=.1;\n    // red plot: error\n    if (t>abs(-y+d.x-d.w)) O.r++;\n    \n    y=u.y*.1*s*s; t=.1/R.y*s*s;\n    // green plot: variance (noise)\n    if (t>abs(-y+d.y)) O.g++;\n    ImgOut.rgb = IEOTF(O);\n  }\n}\n\nconst uint[] str_method =\n  STRING8(8, M,e,t,h,o,d,_,_);\n  \nconst uint[] str_method0 =\n  STRING16(9, N,o,_,d,i,t,h,e,r,_,_,_,_,_,_,_);\nconst uint[] str_method1 =\n  STRING32(17, R,P,D,F,_,b,e,f,o,r,e,_,I,E,O,T,F,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_);\nconst uint[] str_method2 =\n  STRING32(17, T,P,D,F,_,b,e,f,o,r,e,_,I,E,O,T,F,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_);\nconst uint[] str_method3 =\n  STRING32(16, R,P,D,F,_,a,f,t,e,r,_,I,E,O,T,F,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_);\nconst uint[] str_method4 =\n  STRING32(32, T,P,D,F,_,a,f,t,e,r,_,I,E,O,T,F,_,lp,w,i,t,h,_,c,l,i,p,p,i,n,g,rp);\nconst uint[] str_method5 =\n  STRING32(30, T,P,D,F,_,a,f,t,e,r,_,I,E,O,T,F,_,lp,n,o,_,c,l,i,p,p,i,n,g,rp,_,_);\nconst uint[] str_method6 =\n  STRING32(31, T,P,D,F,cm,_,h,a,c,k,y,_,l,i,n,e,a,r,_,q,u,a,n,t,i,z,a,t,i,o,n,_);\nconst uint[] str_method7 =\n  STRING32(31, R,P,D,F,cm,_,o,p,t,i,c,a,l,l,y,_,l,i,n,e,a,r,_,q,u,a,n,t,i,z,pe,_);\nconst uint[] str_method8 =\n  STRING32(24, V,a,r,i,a,n,c,e,_,p,r,o,b,a,b,i,l,i,t,y,_,m,i,x,_,_,_,_,_,_,_,_);\nconst uint[] str_method9 =\n  STRING32(17, E,x,a,c,t,_,lp,r,e,f,e,r,e,n,c,e,rp,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_);\n\nconst uint[] str_key0 =\n  STRING8(7, A,v,e,r,a,g,e,_);\nconst uint[] str_key1 =\n  STRING8(5, E,r,r,o,r,_,_,_);\nconst uint[] str_key2 =\n  STRING8(8, V,a,r,i,a,n,c,e);\n\nconst uint[] str_scaleabs =\n  STRING16(14, A,b,s,o,l,u,t,e,_,s,c,a,l,e,_,_);\nconst uint[] str_scaleprop =\n  STRING32(19, P,r,o,p,o,r,t,i,o,n,a,t,e,_,s,c,a,l,e,_,_,_,_,_,_,_,_,_,_,_,_,_);\nconst uint[] str_adjusted =\n  STRING16(8, A,d,j,u,s,t,e,d,_,_,_,_,_,_,_,_);\n\nvec3 description (int method, bool isadj, bool isprop, vec2 u) {\n#define tex iChannel2\n  u.y=1.-u.y;\n  u*=vec2(36,20);\n  u.x-=2.;\n  float x=u.x;\n  vec3 v=vec3(0);\n  if(method<9) {\n    u.x=x;\n    v+= draw_string(tex,u, str_method), u.x-=6.+1.;\n    v+= draw_string(tex,u,uint[2](1u,uint(0x30+method)));\n    u.y--;\n  }\n  u.x=x;\n  if(method==0) v+= draw_string(tex,u,str_method0);\n  if(method==1) v+= draw_string(tex,u,str_method1);\n  if(method==2) v+= draw_string(tex,u,str_method2);\n  if(method==3) v+= draw_string(tex,u,str_method3);\n  if(method==4) v+= draw_string(tex,u,str_method4);\n  if(method==5) v+= draw_string(tex,u,str_method5);\n  if(method==6) v+= draw_string(tex,u,str_method6);\n  if(method==7) v+= draw_string(tex,u,str_method7);\n  if(method==8) v+= draw_string(tex,u,str_method8);\n  if(method==9) v+= draw_string(tex,u,str_method9);\n  v*=.2;\n  u.y--;\n  v+= vec3(0,0,1)*draw_string(tex,u,str_key0), u.x-=7.+2.;\n  v+= vec3(1,0,0)*draw_string(tex,u,str_key1), u.x-=5.+2.;\n  v+= vec3(0,1,0)*draw_string(tex,u,str_key2), u.x-=8.+2.;\n  u.y--;\n  u.x=x;\n  if(isadj) v+= vec3(.2)*draw_string(tex,u,str_adjusted), u.x-=8.+1.;\n  if(isprop) v+= vec3(.2)*draw_string(tex,u,str_scaleprop);\n  else       v+= vec3(.2)*draw_string(tex,u,str_scaleabs);\n  return v;\n}\n\n/*\nCopyright 2023-2024 Theron Tarigo\n\nPermission to use, copy, modify, and/or distribute this software for any \npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// config tests\n\nconst int nbits = 4;\n\n#define EOTF srgb_eotf\n#define IEOTF srgb_ieotf\n\n//#define EOTF gamma22_eotf\n//#define IEOTF gamma22_ieotf\n\n\n\n#define T vec4\n\nT srgb_ieotf (T c) {\n  return mix(12.92*c,1.055*pow(c,T(1./2.4))-.055,step(.0031308,c));\n}\n\nT srgb_eotf (T e) {\n  return mix(e/12.92,pow((e+.055)/1.055,T(2.4)),step(.04045,e));\n}\n\nT gamma22_ieotf (T c) {\n  return pow(c,T(1./2.2));\n}\n\nT gamma22_eotf (T e) {\n  return pow(e,T(2.2));\n}\n\n// generics\n#define OVERLOAD_VECN(N) \\\n  float N (float v) { return N(vec4(v)).x; } \\\n  vec2 N (vec2 v) { return N(v.xyxx).xy; } \\\n  vec3 N (vec3 v) { return N(v.xyzx).xyz; }\nOVERLOAD_VECN(srgb_ieotf)\nOVERLOAD_VECN(srgb_eotf)\nOVERLOAD_VECN(gamma22_ieotf)\nOVERLOAD_VECN(gamma22_eotf)\n\n#undef T\n\nuint hash_triple32(uint x) {\n  // https://nullprogram.com/blog/2018/07/31/\n  x ^= x >> 17;\n  x *= 0xED5AD4BBu;\n  x ^= x >> 11;\n  x *= 0xAC4C1B51u;\n  x ^= x >> 15;\n  x *= 0x31848BABu;\n  x ^= x >> 14;\n  return x;\n}\n#define hash hash_triple32\nint hash(int x) { return int(hash(uint(x))); }\n\n\nfloat probmix(float A, float B, float C, float var, float rnd) {\n  float PB = clamp((A*C+var)/((B-A)*(B-C)),0.,.75);\n  float PA = mix(C,B,PB)/(C-A);\n  /* float PC = 1.-PA-PB; */\n  \n  // sanity check probabilities\n  // some fail, but with insignificant consequence\n  //if(PA<0.||PC<0.)return 10.;\n  //if(PA>1.||PC>1.)return 10.;\n\n  if(rnd<PA)\n    return A;\n  if(rnd<PA+PB)\n    return B;\n  /* if(rnd<PA+PB+PC) */ // cum prob = 1\n    return C;\n}\n\nconst int nrows = 10;\n\nfloat display_dither (int method, int seed, int nlevels, float x) {\n\n  float qres = 1./float(nlevels-1);\n  vec2 rnd = .5*unpackSnorm2x16(hash(uint(seed)));\n  \n  // noise with rectangular probability density function\n  float rpdf = rnd.x;\n  \n  // noise with triangular probability density function\n  float tpdf = rnd.x+rnd.y;\n\n  float r;\n  if (method==0) {\n    // no dither\n    return IEOTF(x);\n  }\n  if (method==1) {\n    // bad: RPDF dither before IEOTF\n    float xd = x + rpdf*.05;\n    return IEOTF(xd);\n  }\n  if (method==2) {\n    // bad: TPDF dither before IEOTF\n    float xd = x + tpdf*.05;\n    return IEOTF(xd);\n  }\n  if (method==3) {\n    // bad: RPDF dither in the space that will be quantized\n    float y = IEOTF(x);\n    y += rpdf*qres;\n    return y;\n  }\n  if (method==4) {\n    // bad: TPDF dither in the space that will be quantized\n    //      with no avoidance of clipping\n    float y = IEOTF(x);\n    y += tpdf*qres;\n    return y;\n  }\n  if (method==5) {\n    // good: TPDF dither in the space that will be quantized\n    // Note that with 8 bit depth, errors are imperceptible.\n    // Any further refinement yields especially high accuracy, or\n    // else improvements noticeable only at lower bit depths.\n    // 6 bits is common for low cost LCDs.\n    x *= (1.-qres);\n    float y = IEOTF(x);\n    y += tpdf*qres;\n    return y;\n  }\n  if (method==6) {\n    // better: quantized space TPDF dither, hacky linear quantization\n    x *= (1.-qres);\n    float y = IEOTF(x);\n    y += tpdf*qres;\n    float yl = floor(y/qres)*qres;\n    float yh = yl+qres;  /* ceil(y/bitres)*bitres */\n    y = 2.*EOTF(y) > EOTF(yl)+EOTF(yh) ? yh : yl;\n    return y;\n  }\n  if (method==7) {\n    // bad: quantized space RPDF dither, optically linear quantization\n    x *= (1.-qres);\n    float y = IEOTF(x);\n    // lower possible value\n    float yc = floor(y/qres)*qres;\n    // delta to upper possible value\n    float yd = qres;\n    // what fraction is optical intensity between these values\n    float f = (x-EOTF(yc))/(EOTF(yc+yd)-EOTF(yc));\n    // select value depending on random threshold\n    y = f-.5>rpdf ? yc+yd : yc;\n    return y;\n  }\n  if (method==8) {\n     // best: probabilistic mix of 3 quantized values for carefully controlled variance\n    float y = IEOTF(x);\n    float yb = round(y/qres)*qres;\n    float A = EOTF(clamp(yb-qres,0.,1.));\n    float B = EOTF(yb);\n    float C = EOTF(clamp(yb+qres,0.,1.));\n    float d = (EOTF(y+.01*qres)-x)/.01; // derivative\n    float var = d*d*.25;\n    //float var = sqrt(x)*.0001;\n    float xd = x+probmix(A-x,B-x,C-x,var,rnd.x+.5);\n    y = IEOTF(xd);\n    y = round(y/qres)*qres;\n    return y;\n  }\n}\n\n\n\n\n////////////////////////////////////////\n\n/*\n\nGLSL character printing library for octaviogood font texture.\nhttps://www.shadertoy.com/view/Wd2SDt\n\nCopyright 2019 Theron Tarigo.  All rights reserved.\nThis file may be used and copied under the terms of the ISC License;\nsee end of file.  As an exception, the full permission notice may be\nomitted where this file is copied within Shadertoy and the full URL,\n\"https://www.shadertoy.com/view/Wd2SDt\", is displayed prominently\nwithin the source.\n\n*/\n\nconst struct CCDS_T {\n  uint\n    _,   em,  dq,  ha,  ds,  mo,  am,  sq,  lp,  rp,  as,  pl,  cm,  hm,  pe,  sl,\n    _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  co,  sc,  lt,  eq,  gt,  qm,\n    at,   A,   B,   C,   D,   E,   F,   G,   H,   I,   J,   K,   L,   M,   N,   O,\n     P,   Q,   R,   S,   T,   U,   V,   W,   X,   Y,   Z,  lb,  bs,  rb,  up,  un,\n    bt,   a,   b,   c,   d,   e,   f,   g,   h,   i,   j,   k,   l,   m,   n,   o,\n     p,   q,   r,   s,   t,   u,   v,   w,   x,   y,   z,  lc,  ba,  rc,  ti, _U0,\n   alp, bet, gam, del, eps, the, lam,  mu,  xi,  pi, rho, sig, tau, phi, psi, ome,\n   Gam, Del, The, Lam,  Pi, Sig, Phi, Psi, Ome, inf,flor,ring,intg,pdrv, nab,sqrt,\n   _U1, iem, cen, pou, cur, yen, bba, sec, dia, cop, fem, lda, not, _U2, reg, mac,\n   deg, pms, su2, su3, acu, mic, pil, mid, ced, su1, mas, rda, v14, v12, v34, iqm,\n    AG,  AA,  AC,  AT,  AD,  AR,  AE,  CC,  EG,  EA,  EC,  ED,  IG,  IA,  IC,  ID,\n   Eth,  NT,  OG,  OA,  OC,  OT,  OD, mul,  OS,  UG,  UA,  UC,  UD,  YA, Tho, Sha,\n    aG,  aA,  aC,  aT,  aD,  aR,  ae,  cC,  eG,  eA,  eC,  eD,  iG,  iA,  iC,  iD,\n   eth,  nT,  oG,  oA,  oC,  oT,  oD, div,  oS,  uG,  uA,  uC,  uD,  yA, yho,  yD,  \n  _nul;\n} CCDS = CCDS_T(\n  0x20u,0x21u,0x22u,0x23u,0x24u,0x25u,0x26u,0x27u,0x28u,0x29u,0x2au,0x2bu,0x2cu,0x2du,0x2eu,0x2fu,\n  0x30u,0x31u,0x32u,0x33u,0x34u,0x35u,0x36u,0x37u,0x38u,0x39u,0x3au,0x3bu,0x3cu,0x3du,0x3eu,0x3fu,\n  0x40u,0x41u,0x42u,0x43u,0x44u,0x45u,0x46u,0x47u,0x48u,0x49u,0x4au,0x4bu,0x4cu,0x4du,0x4eu,0x4fu,\n  0x50u,0x51u,0x52u,0x53u,0x54u,0x55u,0x56u,0x57u,0x58u,0x59u,0x5au,0x5bu,0x5cu,0x5du,0x5eu,0x5fu,\n  0x60u,0x61u,0x62u,0x63u,0x64u,0x65u,0x66u,0x67u,0x68u,0x69u,0x6au,0x6bu,0x6cu,0x6du,0x6eu,0x6fu,\n  0x70u,0x71u,0x72u,0x73u,0x74u,0x75u,0x76u,0x77u,0x78u,0x79u,0x7au,0x7bu,0x7cu,0x7du,0x7eu,0x7fu,\n  0x80u,0x81u,0x82u,0x83u,0x84u,0x85u,0x86u,0x87u,0x88u,0x89u,0x8au,0x8bu,0x8cu,0x8du,0x8eu,0x8fu,\n  0x90u,0x91u,0x92u,0x93u,0x94u,0x95u,0x96u,0x97u,0x98u,0x99u,0x9au,0x9bu,0x9cu,0x9du,0x9eu,0x9fu,\n  0xa0u,0xa1u,0xa2u,0xa3u,0xa4u,0xa5u,0xa6u,0xa7u,0xa8u,0xa9u,0xaau,0xabu,0xacu,0xadu,0xaeu,0xafu,\n  0xb0u,0xb1u,0xb2u,0xb3u,0xb4u,0xb5u,0xb6u,0xb7u,0xb8u,0xb9u,0xbau,0xbbu,0xbcu,0xbdu,0xbeu,0xbfu,\n  0xc0u,0xc1u,0xc2u,0xc3u,0xc4u,0xc5u,0xc6u,0xc7u,0xc8u,0xc9u,0xcau,0xcbu,0xccu,0xcdu,0xceu,0xcfu,\n  0xd0u,0xd1u,0xd2u,0xd3u,0xd4u,0xd5u,0xd6u,0xd7u,0xd8u,0xd9u,0xdau,0xdbu,0xdcu,0xddu,0xdeu,0xdfu,\n  0xe0u,0xe1u,0xe2u,0xe3u,0xe4u,0xe5u,0xe6u,0xe7u,0xe8u,0xe9u,0xeau,0xebu,0xecu,0xedu,0xeeu,0xefu,\n  0xf0u,0xf1u,0xf2u,0xf3u,0xf4u,0xf5u,0xf6u,0xf7u,0xf8u,0xf9u,0xfau,0xfbu,0xfcu,0xfdu,0xfeu,0xffu,\n0x7fu);\n\n#define U4CHAR4(a,b,c,d) ((CCDS.a)+(CCDS.b<<8)+(CCDS.c<<16)+(CCDS.d<<24))\n\n#define STRING8(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7) )\n\n#define STRING16(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af) )\n\n#define STRING32(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,\\\n  b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af),\\\n      U4CHAR4(b0,b1,b2,b3),U4CHAR4(b4,b5,b6,b7),U4CHAR4(b8,b9,ba,bb),U4CHAR4(bc,bd,be,bf) )\n\n#define STRING64(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,\\\n  b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,\\\n  c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,ca,cb,cc,cd,ce,cf,\\\n  d0,d1,d2,d3,d4,d5,d6,d7,d8,d9,da,db,dc,dd,de,df)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af),\\\n      U4CHAR4(b0,b1,b2,b3),U4CHAR4(b4,b5,b6,b7),U4CHAR4(b8,b9,ba,bb),U4CHAR4(bc,bd,be,bf),\\\n      U4CHAR4(c0,c1,c2,c3),U4CHAR4(c4,c5,c6,c7),U4CHAR4(c8,c9,ca,cb),U4CHAR4(cc,cd,ce,cf),\\\n      U4CHAR4(d0,d1,d2,d3),U4CHAR4(d4,d5,d6,d7),U4CHAR4(d8,d9,da,db),U4CHAR4(dc,dd,de,df))\n\n#define STRING80(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,\\\n  b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,\\\n  c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,ca,cb,cc,cd,ce,cf,\\\n  d0,d1,d2,d3,d4,d5,d6,d7,d8,d9,da,db,dc,dd,de,df,\\\n  e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,ea,eb,ec,ed,ee,ef)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af),\\\n      U4CHAR4(b0,b1,b2,b3),U4CHAR4(b4,b5,b6,b7),U4CHAR4(b8,b9,ba,bb),U4CHAR4(bc,bd,be,bf),\\\n      U4CHAR4(c0,c1,c2,c3),U4CHAR4(c4,c5,c6,c7),U4CHAR4(c8,c9,ca,cb),U4CHAR4(cc,cd,ce,cf),\\\n      U4CHAR4(d0,d1,d2,d3),U4CHAR4(d4,d5,d6,d7),U4CHAR4(d8,d9,da,db),U4CHAR4(dc,dd,de,df),\\\n      U4CHAR4(e0,e1,e2,e3),U4CHAR4(e4,e5,e6,e7),U4CHAR4(e8,e9,ea,eb),U4CHAR4(ec,ed,ee,ef))\n\n#define DEF_DRAW_STRING(N) \\\nfloat draw_string (sampler2D sampler,                    \\\n                   in vec2 uv, const uint[1+N] string) { \\\n  int i = int(uv.x);                                     \\\n  int strlen = min(int(string[0]),N*4);                  \\\n  if (uv.x<0.||i>=strlen) return 0.;                     \\\n  int code = int( (string[i/4+1]>>((i%4)*8)) &0xFFu);    \\\n  if (uv.y<0.||uv.y>1.) return 0.;                       \\\n  uv.x=fract(uv.x)/2.+.25; uv.y=1.-uv.y;                 \\\n  uv+=vec2(code%16,15-code/16);                          \\\n  return texture(sampler, uv/16.).r;                   }\nDEF_DRAW_STRING(1)\nDEF_DRAW_STRING(2)\nDEF_DRAW_STRING(4)\nDEF_DRAW_STRING(8)\nDEF_DRAW_STRING(16)\nDEF_DRAW_STRING(20)\n#undef DEF_DRAW_STRING\n\n    \n/*\nCopyright 2019 Theron Tarigo\n\nPermission to use, copy, modify, and/or distribute this software for any \npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/\n\n// end of \"GLSL character printing library\"\n////////////////////////////////////////",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\n\nhttps://www.shadertoy.com/view/mt2BDV\n\nThis shader may be copied under the terms of the ISC License; see end of file.  As an exception, the full permission notice may be omitted where this shader is copied within Shadertoy.com and the full URL, \"https://www.shadertoy.com/view/mt2BDV\", is displayed within the source.\n\n*/\n\n\n\nvoid mainImage (out vec4 O, vec2 f) {\n  vec2 R = iResolution.xy;\n  ivec2 I = ivec2(f);\n  ivec2 N = ivec2(R);\n  int rs = N.y/nrows;\n  int i = nrows-1-I.y/rs;\n  int seed = I.x+N.x*I.y;\n  seed = hash(seed)^iFrame;\n\n  float x = f.x/R.x;\n  x=x*x*x;\n\n  int nlevels=1<<nbits;\n  float bitres = 1./(exp2(float(nbits))-1.);\n  float y = display_dither(i,seed,nlevels,x);\n\n  // quantize\n  float qres = 1./float(nlevels-1);\n  y = round(y/qres)*qres;\n  y = clamp(y,0.,1.);\n\n  if (i>=5&&i<=7) {\n    x *= (1.-qres);\n  }\n\n  if (i==9) { // reference level\n    y = IEOTF(x);\n  }\n\n  O.x = y;\n  O.w = x;\n}\n\n/*\nCopyright 2023 Theron Tarigo\n\nPermission to use, copy, modify, and/or distribute this software for any \npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage (out vec4 O, vec2 f) {\n  vec2 R = iResolution.xy;\n  ivec2 I = ivec2(f);\n  ivec2 N = ivec2(R);\n  int rs = N.y/nrows;\n  int rb = I.y/rs*rs;\n  int i = nrows-1-I.y/rs;\n\n  O = texelFetch(iChannel0,I,0);\n  vec4 d = texelFetch(iChannel1,I,0);\n  vec4 v = vec4(0.);\n  v.rgb = EOTF(d.rgb);\n  \n  if(I.y==rb) {\n    v = vec4(0.);\n    for (int i=0;i<rs;i++) {\n      float x = EOTF(texelFetch(iChannel1,ivec2(I.x,rb+i),0).r);\n      v.x += x;\n      v.y += x*x;\n    }\n    v /= float(rs);\n    v.y -= v.x*v.x;\n    v.w = d.w;\n  }\n  float M=iMouse.x/R.x;\n  O = M<.4?v:mix(O,v,M<.95?.01:.001);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}