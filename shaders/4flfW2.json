{
    "Shader": {
        "info": {
            "date": "1724381701",
            "description": "bruh",
            "flags": 0,
            "hasliked": 0,
            "id": "4flfW2",
            "likes": 0,
            "name": "aug222024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 68
        },
        "renderpass": [
            {
                "code": "// Fork of \"aug13024v3\" by brendanluu. https://shadertoy.com/view/4clBDn\n// 2024-08-23 02:52:59\n\nvec3 palette(float t) {\n    return vec3(0.5 + 0.5 * cos(t + vec3(1.000,1.000,1.000)));\n}\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(2.998,7.233))) * 58.5453123);\n}\n\nvec2 hash(vec2 p) {\n    p = vec2(dot(p,vec2(17.1,311.7)), dot(p,vec2(99999.5,183.3)));\n    return -1.0 + iTime/16.0 *fract(sin(p)*48.5453123);\n}\n\nfloat noise(vec2 p) {\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n    \n    vec2 i = floor(p + (p.x+p.y)*K1);\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    \n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c)), 0.0);\n    \n    vec3 n = h*h*h*h*vec3(dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    \n    return dot(n, vec3(7.0));\n}\n\nfloat specularHighlight(vec2 uv, vec2 lightDir, float roughness) {\n    vec2 reflectedLight = reflect(lightDir, vec2(0.0, 1.0));\n    float spec = max(0.0, dot(normalize(uv), reflectedLight));\n    return pow(spec, 1.0 / roughness);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Smooth dragging implementation\n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n    vec2 lastMouseUV = iMouse.zw / iResolution.xy;\n    \n    // Check if the mouse button is pressed (or touch is active)\n    bool isInteracting = iMouse.z > 0.0;\n    \n    // Calculate drag delta\n    vec2 dragDelta = isInteracting ? mouseUV - lastMouseUV : vec2(0.0);\n    \n    // Accumulate drag (you may need to adjust the multiplier for sensitivity)\n    vec2 panOffset = dragDelta * 8.0;\n    \n    // Apply the pan offset\n    uv -= panOffset;\n    \n    vec3 backgroundColor = vec3(1.0); // Pure white background\n    vec3 finalColor = backgroundColor;\n    \n    // Create chain link effect\n    float chainScale = 1.2;\n    vec2 chainUV = uv * chainScale;\n    vec2 id = floor(chainUV);\n    vec2 gv = fract(chainUV) - 0.1;\n    \n    for (float y = -1.0; y <= 1.0; y++) {\n        for (float x = -1.0; x <= 1.0; x++) {\n            vec2 offset = vec2(x, y);\n            vec2 n = hash(id + offset);\n            vec2 p = offset + sin(n * iTime * 0.2) * 0.1;\n            float d = length(gv - p);\n            \n            float linkSize = 0.12; // Keep the same size\n            float linkThickness = 0.90; // Even thinner for sharper edges\n            float r = smoothstep(linkSize + linkThickness, linkSize, d);\n            r *= smoothstep(linkSize - linkThickness, linkSize, d);\n            \n            if (r > 0.0) {\n                vec2 reflectUV = (gv - p) / linkSize + 0.5;\n                reflectUV = reflectUV * 2.0 - 1.0;\n                \n                float reflectD = length(reflectUV);\n                vec3 col = palette(iTime * 0.1 + noise(id + offset) * 2.0);\n                \n                // Enhanced variation for the reflection\n                float variation = sin(reflectD * 770.0 + (iTime + noise(id + offset) * 150.0)) * 0.5 + 0.5;\n                \n                // Improved Fresnel effect\n                float fresnel = pow(1.0 - abs(dot(normalize(reflectUV), vec2(0.0, 1.0))), 6.0);\n                \n                // Add multiple specular highlights for more realistic metal look\n                vec2 lightDir1 = normalize(vec2(1.0, 1.0));\n                vec2 lightDir2 = normalize(vec2(-1.0, 0.5));\n                vec2 lightDir3 = normalize(vec2(0.5, -0.5));\n                float spec1 = specularHighlight(reflectUV, lightDir1, 0.05);\n                float spec2 = specularHighlight(reflectUV, lightDir2, 0.1);\n                float spec3 = specularHighlight(reflectUV, lightDir3, 0.15);\n                \n                // Combine effects\n                col = mix(col, vec3(1.0), fresnel * 0.9);\n                col *= variation;\n                col += vec3(spec1) * 0.8 + vec3(spec2) * 0.6 + vec3(spec3) * 0.4;\n                \n                // Add a more detailed scratched metal effect\n                float scratch = noise(reflectUV * 100.0) * 0.03;\n                float microScratch = noise(reflectUV * 500.0) * 0.01;\n                col += vec3(scratch + microScratch);\n                \n                finalColor = mix(finalColor, col, r);\n            }\n        }\n    }\n    \n    // Enhance contrast and sharpness\n    finalColor = pow(finalColor, vec3(1.4));\n    \n    // Add subtle high-frequency detail\n    vec2 pixelUV = fragCoord / iResolution.xy;\n    float highFreqDetail = noise(pixelUV * 1000.0) * 0.02;\n    finalColor += vec3(highFreqDetail);\n    \n    // Clamp colors to prevent overflow\n    finalColor = clamp(finalColor, 0.0, 1.0);\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}