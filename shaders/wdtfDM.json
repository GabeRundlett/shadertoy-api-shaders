{
    "Shader": {
        "info": {
            "date": "1605305208",
            "description": "1-dimensional tiling using a variable stepsize.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtfDM",
            "likes": 12,
            "name": "Stage mountains",
            "published": 3,
            "tags": [
                "mountains",
                "tiling",
                "3tap",
                "1dimensional"
            ],
            "usePreview": 0,
            "username": "liamegan",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "vec2 getScreenSpace() {\n\tvec2 uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n\n\treturn uv;\n}\nvec3 randcol(float i) {\n    i = fract(i/4.);\n    if(i < .25) {\n      return vec3(.5, .51, .52);\n    } else if(i < .5) {\n      return vec3(.55, .62, .65);\n    } else if(i < .75) {\n      return vec3(.6, .72, .72);\n    } else if(i < 1.) {\n      return vec3(.4, .5, .51);\n    }\n}\n  \nconst float permTexUnit = 1.0/256.0;\nconst float permTexUnitHalf = 0.5/256.0;\n\n#define PI 3.14159265359\n\nvec2 hash12(float i) {\n    return texture(iChannel0, vec2(i*permTexUnit), -10.).xy;\n}\n\nfloat fade(in float t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat pnoise1D(in float p) {\n    float pi = permTexUnit*floor(p) + permTexUnitHalf;\n    float pf = fract(p);\n    float grad00 = texture(iChannel0, vec2(pi, 0.0), -10.).r * 4.0 - 1.0;\n    float n00 = dot(grad00, pf);\n    float grad10 = texture(iChannel0, pi + vec2(permTexUnit, 0.0), -10.).r * 4.0 - 1.0;\n    float n10 = dot(grad10, pf - 1.0);\n    float n = mix(n00, n10, fade(pf));\n\n    return n;\n}\nfloat waveform(vec2 uv, float id, vec2 hash, inout float waveid) {\n    uv *= 10.;\n\n    float m = 10.;\n\n    waveid = floor((uv.x - m) / (m*2.));\n\n    float wave = abs(pnoise1D(waveid * .2)) * -3. - .5;\n    return abs(mod(uv.x, m*2.) - m) * wave;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = getScreenSpace();\n    \n    uv *= 15.;\n    float os = sin(iTime*.1)*10.;\n    uv.y += sin(iTime*.1)*10.;\n    \n    vec3 col = vec3(0);\n\n    const float step = 1.5;\n    const float stepMultiplier = 1. / step;\n    const float lower = step * -2.;\n    const float upper = step + 1.;\n    \n    vec2 guv = vec2(uv.x, mod(uv.y, step));\n    float id = floor(uv.y*stepMultiplier);\n    \n    for(float i = lower; i < upper; i+=step) {\n      vec2 suv = guv + vec2(0., i);\n      vec2 suv1 = guv + vec2(0., i-1.);\n      \n      float sid = id - i * stepMultiplier;\n      float sid1 = id - i * stepMultiplier - 1.;\n      \n      vec2 hash = hash12(sid);\n      vec2 hash1 = hash12(sid1);\n      \n      vec2 p = suv - vec2(hash1.x, 0);\n      \n      suv.x += 100.*(hash.x*hash.x) - iTime * .5 * clamp(sid*.5-5., -10., 0.);\n      suv1.x += 100.*(hash1.x*hash1.x) - iTime * .5 * clamp(sid1*.5-5., -10., 0.);\n      \n      float waveid, waveid2;\n      float wave = waveform(suv, sid, hash, waveid);\n      float wave1 = waveform(suv1, sid1, hash1, waveid2);\n      \n      p = vec2(length(p*.25), ((p.y) + wave * .1))*.25;\n      \n      float sfield = (suv.y + wave * .1);\n      float sfield1 = (suv.y + wave1 * .1);\n      \n      vec2 aa = vec2(clamp((sid) * .15, 0., 1.), clamp((sid+5.) * .15, -1., 0.));\n      \n      float mask = smoothstep(.05 + aa.x, aa.y, sfield);\n      \n      float shadow = smoothstep(1., -2.5, sfield1+1.);\n      float sedimentary_wave = waveform(suv * 2., sid, hash, waveid2);\n      float sedimentary_field = sin((suv.y + sedimentary_wave * .02) * hash.x * 10.) * .5;\n      \n      vec3 colour = randcol(sid) - ((smoothstep(.15 + aa.x, .1 + aa.y, sedimentary_field) * smoothstep(-.15 - aa.x, -.1-aa.y, sedimentary_field)) * .05);\n      colour = mix(\n        colour, \n        vec3(1), \n        smoothstep(aa.y, aa.x, suv.y + wave * .01 - ((sin(.5 * waveid) * cos(PI * waveid * .1)) *.5 + .5) + waveform(suv * 5., sid, vec2(1.), waveid2) * .01)\n      );\n      colour *= clamp(suv.y * .1 + 1., 0., 1.) - shadow * .5;\n      \n      col = mix(col, colour, mask);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}