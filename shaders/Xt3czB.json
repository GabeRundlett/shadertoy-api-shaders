{
    "Shader": {
        "info": {
            "date": "1532966684",
            "description": "variant of [url]https://shadertoy.com/view/4lcyRB[/url] (see explanation there).\nHere: Bluenoise distribution (left) get denser when darker.    Try fullscreen.\nRight: white noise, for comparison (only simple collisions are managed).",
            "flags": 0,
            "hasliked": 0,
            "id": "Xt3czB",
            "likes": 7,
            "name": "cheap blue point distribution 2b",
            "published": 3,
            "tags": [
                "noise",
                "texture",
                "shadertoy",
                "bluenoise",
                "polkadots",
                "short",
                "poissondisc",
                "bluenoisetexture"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 798
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/4lcyRB\n// coloring: denser when darker \n\n// cheap Poisson-disc approximation ( almost-loopless ! )\n// Better than jittered-grid (as used in Voronoi shaders)\n\n// Variant of basic https://shadertoy.com/view/Xl3czS\n// allowing higher density without grid artifacts, or larger shapes.\n\n#define blend 0 // Correct blend on collisions. Costlier; usefull only for white noise\n\n//#define hue(v)  ( .6 + .6 * cos( 6.28*(v)  + vec4(0,23,21,0) ) )  // https://www.shadertoy.com/view/ll2cDc\n#define hue(v)  ( 1. - 1.5*(v) * vec4(.6,.8,1,0) )\n        \nconst float g = 8.,    // grid size. Trick: defines cell = trigger seed, shape = nxn cells\n      r = 24., k=r/g,  // shape size, in pixel & grid units.\n      d = 127./255. /k; // shape density / k\nconst int n = int(k);  // n x n: neighborhood covered by shape\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy, P,_P,V;\n    O-=O;\n  //O.b += mod(floor(U.x/g)+floor(U.y/g),2.);                // grid (debug)\n    if (U.x-.5 == R.x/2.) O.r++;                             // separator\n    \n    float t=1e9, v,_t;\n    if (U.x < R.x/2.)\n        for (int i=0; i<n*n; i++) { // search neighborhood covered by shape\n            V = U/g + vec2(i%n,i/n);\n            v = texelFetch(iChannel0,ivec2(V),0).x;          // left: blue noise\n          //if (v<t)  t=v, P=V;\n            if (v<t) _t=t,t=v, _P=P,P=V; else if(v<_t) _t=v, _P=V; // for collisions\n        }\n    else\n        for (int i=0; i<n*n; i++) {\n            V = U/g + vec2(i%n,i/n);\n            v = texelFetch(iChannel1,ivec2(V),0).x;          // right: white noise\n          //if (v<t)  t=v, P=V; \n            if (v<t) _t=t,t=v, _P=P,P=V; else if(v<_t) _t=v, _P=V; // for collisions\n        }\n \n#define dist      length( 2.* fract( ( ceil(P) - U/g ) / k )  - 1. )\n#define shape(v)  smoothstep(1.,1.-4./r, v )                 // disc shape\n    \n    if ( t < d ) {\n        v = dist;\n#if !blend\n        if (v > 1. && _t < d)                                // manage collisions\n            t=_t, P=_P, v = dist;\n#endif\n        v = shape(v);\n        O += v * hue(t/d); \n      \n#if blend  // correct blend on collisions. Costlier; usefull only for white noise\n        if (_t < d)              // note that we only manage simple collisions.\n            t=_t, P=_P,\n            O += (1.-v) * shape(dist) *hue(t/d);   \n#endif\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}