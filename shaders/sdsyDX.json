{
    "Shader": {
        "info": {
            "date": "1642847595",
            "description": "sgs",
            "flags": 32,
            "hasliked": 0,
            "id": "sdsyDX",
            "likes": 42,
            "name": "Playing around shader2",
            "published": 3,
            "tags": [
                "sdfsdg"
            ],
            "usePreview": 0,
            "username": "MinimilisticBits",
            "viewed": 1178
        },
        "renderpass": [
            {
                "code": "\n\n//NOT MY CODE//////////////////////\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.,1.);\n}\n//////////////////////////////////\n\nvec3 blur(vec2 uv, float r){\nvec3 c = vec3(0.);\nuv *= iResolution.xy;\nfloat iter = 0.;\nfor(int i = 0; i < 10; i++){\n  for(int k = 0; k < 10; k++){\n     float x = float(k)-5.;\n     float y = float(i)-5.;\n     x*=r;\n     y*=r;\n     //float bok = texture(iChannel1, vec2(0.5)+((vec2(x,y)*6.)/iResolution.xy)).y;\n     vec4 c2 = texture(iChannel0, (uv+vec2(x,y))/iResolution.xy).xyzw;\n     vec3 col = c2.xyz;\n     col = clamp(col,0.,1.);\n     //if(length(col) > 0.6)col*=1.2;\n     c += col;\n     iter+=1.;\n  }\n}\nc/=iter;\nreturn c;\n} \n\n\nvec3 blur2(vec2 p,float dist){\np*=iResolution.xy;\n    vec3 s;\n    \n    vec3 div = vec3(0.);\n    //vec2 off = vec2(0.0, r);\n    float k = 0.61803398875;\n    for(int i = 0; i < 150; i++){\n    float m = float(i)*0.01;\n    float r = 2.*3.14159*k*float(i);\n    vec2 coords = vec2(m*cos(r), m*sin(r))*dist;\n    vec4 c2 = texture(iChannel0, (p+coords)/iResolution.xy).xyzw;\n    vec3 c = c2.xyz / (c2.w+1.);\n    //c = c*c *1.8;\n    vec3 bok = pow(c,vec3(4.));\n      s+=c*bok;\n      div += bok;\n    }\n        \n    s/=div;\n    \n    return s;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec3 col = texture(iChannel0, uv).xyz;\n    // Output to screen\n    vec3 col = blur2(uv, length((uv*2.0-1.0)*3.));\n    float off = texture(iChannel0, uv).w;\n     vec3 rad;\n    vec2 offset2 = (fragCoord - iResolution.xy/2.)*1.;\n    for(int i = 0; i < 20; i++){\n       vec2 offset = fragCoord + offset2*smoothstep(0.,15.-length(uv*2.0-1.)*1.5, float(i)/20.)*1.;\n       rad.x += texture(iChannel0, (offset+offset2*0.044)/iResolution.xy).x;\n       rad.y += texture(iChannel0, (offset)/iResolution.xy).y;\n       rad.z += texture(iChannel0, (offset-offset2*0.044)/iResolution.xy).z;\n\n    }\n    rad /= 16.;\n    \n    col += rad*0.4;\n    col = clamp(col, 0., 1.);\n     col = vec3(1.)-exp(-1.4*col);\n\n    //NOT MY CODE//////////////////\n    vec3 a = vec3(0.3,0.3,0.4)-0.4;\n    col = mix(col, smoothstep(0.,1.,col),a);\n    //////////////////////////////\n    // Output to screen\n    vec3 aa = vec3(1.0,1.2,1.2);\n    col = sqrt(col/aa);\n    col = (1.0/((1.0)+exp(-(10.)*(col-0.5))));\ncol = pow(col, vec3(1.5))*1.8;\n//col = pow(col, vec3(0.7,0.8,0.9));\ncol = ACESFilm(col);\n    col = pow(col, vec3(1./2.2));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float ring(vec2 p, vec2 s){\nreturn length(normalize(p)*s.x - p)-s.y;\n}\n\nfloat box(vec2 p, vec2 s){\nvec2 a = abs(p)-s;\nreturn max(a.x,a.y);\n}\n\nvec3 pal(float es, vec3 a){\nreturn 0.5 + 0.5*cos(2.0*3.14159*es + a);\n}\n\nvec2 rot(vec2 p, float s){\nfloat l = length(p);\np/=l;\nfloat ang = (p.y < 0.)?2.0*3.14159 - acos(p.x):acos(p.x);\nang += s;\nreturn l*vec2(cos(ang), sin(ang));\n}\n\n//NOT MY CODE\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n \nfloat rndf(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n/////////////\n\nfloat escape = 0.;\nfloat jb(vec3 p){\n    float s=3., e;\n    s*=e=3./min(dot(p,p),50.);\n    p=abs(p)*e;\n    escape = 0.;\n    for(int i=0;i++<17;){\n        p=vec3(2,4,2)-abs(p-vec3(2,4,2)),\n            s*=e=8./min(dot(p,p),10.),\n            p=abs(p)*e;\n           escape += exp(-0.2*dot(p,p));\n            }\n    return min(length(p.xz)-.1,p.y)/s;\n}\n\nfloat jb3(vec3 p){\n    float s=3., e;\n    s*=e=3./min(dot(p,p),50.);\n    p=abs(p)*e;\n    escape = 0.;\n    for(int i=0;i++<17;){\n        p=vec3(2,4,2)-abs(p-vec3(2,4,2)),\n            s*=e=8./min(dot(p,p),10.),\n            p=abs(p)*e;\n            escape += exp(-0.2*dot(p,p));\n            }\n    return min(length(p.xz)-.1,p.y)/s;\n}\n\n  float DEmine(vec3 p0){\nvec4 p = vec4(p0, 1.);\nescape = 0.;\nfor(int i = 0; i < 7; i++){\np*=4.79;\np.xyz = mod(p.xyz-1.5, 3.)-1.5;\nfloat m = length(p.xyz);\n\np/=dot(p.xyz,p.xyz)+mod(m, 1.);\nescape += exp(-0.2*dot(p.xyz,p.xyz));\n}\n\nreturn length(p.xyz)/p.w;\n}\nvoid sphere_fold(inout vec3 z, inout float dz) {\n  float fixed_radius2 = 1.9;\n  float min_radius2 = .1;\n  float r2 = dot(z, z);\n  if(r2 < min_radius2) {\n    float temp = (fixed_radius2 / min_radius2);\n    z *= temp; dz *= temp;\n  }else if(r2 < fixed_radius2) {\n    float temp = (fixed_radius2 / r2);\n    z *= temp; dz *= temp;\n  }\n}\n\nfloat de22( vec3 p ){\n    vec3 CSize = vec3(1., 1.7, 1.);\n    p = p.xzy;\n    float scale = 1.1;\n    for( int i=0; i < 8;i++ ){\n      p = 2.0*clamp(p, -CSize, CSize) - p;\n      float r2 = dot(p,p+sin(p.z*.3));\n      float k = max((2.)/(r2), .5);\n      p *= k; scale *= k;\n    }\n    float l = length(p.xy);\n    float rxy = l - 1.0;\n    float n = l * p.z;\n    rxy = max(rxy, (n) / 8.);\n    return (rxy) / abs(scale);\n  }\n/////////////////////////////////////\nfloat DEeerr(vec3 p0){\n//p0 = mod(p0, 2.)-1.;\n    vec4 p = vec4(p0, 1.);\n    escape = 0.;\n        //p.xyz=1.0-abs(abs(p.xyz+sin(p.xyz)*1.)-1.);\n\n        if(p.x < p.z)p.xz = p.zx;\n        if(p.z > p.y)p.zy = p.yz;\n        if(p.y > p.x)p.yx = p.xy;\n\n    for(int i = 0; i < 12; i++){\n        //if(p.x > p.z)p.xz = p.zx;\n       //if(p.z > p.y)p.zy = p.yz;\n       if(p.y > p.x)p.yx = p.xy;\n               // p.xyz = abs(p.xyz);\n\n        //box_fold(p.xyz);\n        sphere_fold(p.xyz,p.w);\n        //p.xyz = abs(p.xyz);\n        uint seed = uint(p.x+p.y+p.z);\n        p*=(1.9/clamp(dot(p.xyz,p.xyz),0.,1.0));\n        p.xyz=abs(p.xyz)-vec3(3.5,.5,3.3);\n       //p*=1.2;\np.yxz -= sin(float(i)*1.)*0.9;\n        escape += exp(-0.2*dot(p.xyz,p.xyz));\n        //vec3 norm = normalize(p.xyz);\n        //float theta = acos(norm.z/length(norm.xyz));\n        //float phi = atan(norm.y/norm.x);\n        //escape = min(max(theta,phi),escape);\n    }\n    float m = 1.5;\n   p.xyz-=clamp(p.xyz,-m,m);\nreturn (length(p.xyz)/p.w)*0.5;\n}\nfloat newde(vec3 p0){\nvec4 p = vec4(p0, 1.);\nescape = 0.;\np.xz = (p.x > p.z)?p.zx:p.xz;\n//p.yz = (p.y > p.z)?p.zy:p.yz;\np.xy = (p.x > p.y)?p.yx:p.xy;\n\nfor(int i = 0; i < 12; i++){\n//p = abs(p);\n//p.xz = (p.x > p.z)?p.zx:p.xz;\n//p.yz = (p.y > p.z)?p.zy:p.yz;\n//p.xy = (p.x > p.y)?p.yx:p.xy;\n\np.xyz = mod(p.xyz-1., 2.)-1.;\np *= 1.1/clamp(dot(p.xyz,p.xyz),0.,1.2);\n//p.xyz -= vec3(2.,0.4,0.6);\nescape += exp(-0.2*dot(p.xyz,p.xyz));\n}\np/=p.w;\nreturn abs(p.x)*0.25;\n}\n\nfloat fractal(vec3 p0){\n//p0 = mod(p0, 2.)-1.;\n    vec4 p = vec4(p0, 1.);\n    escape = 0.;\n                                p.xyz=abs(p.xyz);\n                                uint seed = uint(p.x+p.y+p.z);\n        if(p.x < p.z)p.xz = p.zx;\n        if(p.z > p.y)p.zy = p.yz;\n        if(p.y > p.x)p.yx = p.xy;\n    for(int i = 0; i < 12; i++){\n        if(p.x < p.z)p.xz = p.zx;\n        if(p.z < p.y)p.zy = p.yz;\n        if(p.y < p.x)p.yx = p.xy;\n        \n        p.xyz = abs(p.xyz);\n\n        p*=((1.4+rndf(seed)*0.1)/clamp(dot(p.xyz,p.xyz),0.5,1.));\n        p.xyz-=vec3(0.2+rndf(seed)*0.2,0.6-rndf(seed)*0.3,2.3);\n        p*=1.2-rndf(seed)*0.4;\n\n        escape += exp(-0.2*dot(p.xyz,p.xyz));\n        //vec3 norm = normalize(p.xyz);\n        //float theta = acos(norm.z/length(norm.xyz));\n        //float phi = atan(norm.y/norm.x);\n        //escape = min(max(theta,phi),escape);\n    }\n    float m = 1.5;\n    p.xyz-=clamp(p.xyz,-m,m);\nreturn (length(p.xyz)/p.w)*0.5;\n}\n\nfloat fractal_de46(vec3 p){\n    float s = 2.;\n    float e = 0.;\n    escape = 0.;\n    for(int j=0;++j<7;){\n        p.xz=abs(p.xz)-2.3,\n        p.z>p.x?p=p.zyx:p,\n        p.z=1.5-abs(p.z-1.3+sin(p.z)*.2),\n        p.y>p.x?p=p.yxz:p,\n        p.x=3.-abs(p.x-5.+sin(p.x*3.)*.2),\n        p.y>p.x?p=p.yxz:p,\n        p.y=.9-abs(p.y-.4),\n        e=12.*clamp(.3/min(dot(p,p),1.),.0,1.)+\n        2.*clamp(.1/min(dot(p,p),1.),.0,1.),\n        p=e*p-vec3(7,1,1),\n        s*=e;\n        escape+=exp(-0.2*dot(p,p));\n        }\n    return length(p)/s;\n}\n\nfloat jb2(vec3 p){\n  p.xz=fract(p.xz)-.5;\n  escape = 0.;\n  float k=1.;\n  float s=0.;\n  for(int i=0;i++<12;){\n    s=2./clamp(dot(p,p),.1,1.),\n    p=abs(p)*s-vec3(.4,5,.5),\n    k*=s;\n    escape += exp(-0.2*dot(p,p));\n    }\n    \n\n  return length(p)/k-.001;\n}\nvec2 hash2( vec2 p )\n{\n\treturn textureLod( iChannel1, (p+0.5)/256.0, 0.0 ).xy;\n}\nvec2 voronoi(vec2 p){\nvec2 f = floor(p);\nvec2 res = vec2(8.);\nfor(int i = 0; i < 9; i++){\nvec2 coords = f + vec2(mod(float(i),3.)-1., float(i/3)-1.);\nvec2 o = hash2( coords );\no = 0.5 + 0.4*sin(6.2831*o );\nvec2 pos = (coords+o);\nfloat d = dot(pos-p,pos-p);\nif( d < res.x )\n{\n    res.y = res.x;\n    res.x = d;\n}\nelse if( d < res.y )\n{\n    res.y = d;\n}\n}\nreturn res;\n}\n\nvec3 lens(vec2 p, vec2 mouse,inout uint k){\nvec3 col = vec3(exp(-20.*length(mouse-p)));\ncol += exp(-20.*length(-mouse*rndf(k)*0.5-p));\ncol += exp(-ring(-mouse*0.4-p, vec2(0.7, 0.01))*20.)\n*sin(texture(iChannel0, normalize(p*rndf(k))).x);\ncol *= pal(exp(-length(-mouse*rndf(k)*0.9-p)), vec3(0.9,0.6,0.2));\nfor(int i = 0;i < 5; i++){\ncol += exp(-ring(mouse*2.*(0.1+float(i)/5.0)-p, vec2(0.1-float(i)/15.0, 0.001*float(i+1)))*20.);\n}\ncol *= pal(length(mouse*rndf(k)-p), vec3(0.9,0.2,0.2))*0.8;//\n//col += exp(-length(mouse-p))*vec3(0.9,0.6,0.2)\n//*sin(texture(iChannel0, normalize(mouse-p)).x)*exp(-length(mouse-p)*5.)*2.;\ncol += exp(-ring(mouse*0.5-p, vec2(0.9,0.01))*20.)*0.4;\n//col *= pal(length(mouse-p)*1., vec3(0.9,0.4,0.9));\ncol += exp(-(abs(box(-mouse*rndf(k)-p, vec2(0.1)))+0.2)*20.);\ncol += exp(-jb3((vec3(p*1.,iTime*0.1))/12.)*10000.);\ncol *= pal(escape, vec3(0.9,0.6,0.2));\n\ncol += exp(-voronoi(p).x*200.);\ncol *= pal(escape, vec3(0.9,0.6,0.2));\ncol *= pal(length(mouse-p), vec3(0.9,0.5,0.2));\nreturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    ///NOT MY CODE///\n    uint r = uint(uint(fragCoord.x) * uint(1973) \n    + uint(fragCoord.y) * uint(9277) \n    + uint(iFrame) * uint(26699)) | uint(1);\n    \n    ///////////////\n    \n    \nuv = uv * 2.0 - 1.0;\nuv.x *= 1.3;\nuv.y /= 1.3;\nuv *= 4.5;\n    // Time varying pixel color\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = mouse * 2.0 - 1.0;\n    vec3 col = vec3(0.);\n    \n    for(int i = 0; i < 10; i++){\n    uint k = uint(i+1);\n        float offset = rndf(k);\n        col += lens(rot(uv*(rndf(k)+0.04), offset*iTime), vec2(cos(offset*2.*3.14159+iTime), sin(offset*2.*3.14159-iTime)), k)*offset*0.4;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float dd = 0.9;\nfloat fal = 1.;\nfloat off2 = 2.;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}