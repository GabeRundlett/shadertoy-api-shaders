{
    "Shader": {
        "info": {
            "date": "1643828893",
            "description": "This is cooler than the chain tbh",
            "flags": 32,
            "hasliked": 0,
            "id": "ssXyRl",
            "likes": 7,
            "name": "Fork Video Gas rogo1965 325",
            "published": 3,
            "tags": [
                "particles",
                "aabb",
                "sort"
            ],
            "usePreview": 0,
            "username": "rogo1965",
            "viewed": 83
        },
        "renderpass": [
            {
                "code": "// Fork of \"Connected particle chain image\" by michael0884. https://shadertoy.com/view/3dXfDN\n// 2020-04-30 15:21:35\n\n// Fork of \"Large scale flocking\" by michael0884. https://shadertoy.com/view/tsScRG\n// 2020-04-30 07:24:31\n\nivec4 get(ivec2 p)\n{\n    return floatBitsToInt(texel(ch0, p));\n}\n\nivec4 getb(int id)\n{\n    return floatBitsToInt(texel(ch2, i2xy(id)));\n}\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nvec3 imageC(vec2 p)\n{\n    return texture(ch3, vec2(1., 1.)*p/size).xyz;\n}\n\nfloat particleDistance(int id, vec2 p)\n{\n    return distance(p, getParticle(id).xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n     N = ivec2(prop*iResolution.xy);\n    tot_n = N.x*N.y;\n    ivec4 nb = get(ivec2(pos));\n \tvec4 p0 = getParticle(nb.x);\n   \n    fragColor = vec4(0.,0,0,1);\n    for(int i = 0; i < 4; i++)\n    {\n       vec4 p0 = getParticle(nb[i]);\n    \tfragColor.xyz += 0.3*(0.85+0.25*imageC(p0.xy))\n            \t\t\t//*sin(vec3(1,2,3)*length(p0.zw))\n            \t\t\t*exp(-0.15*distance(p0.xy, pos));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n#define dt 0.4\n#define prop 0.5\n\nivec2 N;\nint tot_n;\n\nfloat hash11(float p)\n{\n    p = fract(p * 15.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p) - 0.5;\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nconst int k = 1664525;  \n\nivec4 hash( ivec4 x )\n{\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    return ivec4(x);\n}\n\nivec2 i2xy(int id)\n{\n    return ivec2(id%N.x, id/N.x);\n}\n\nint xy2i(ivec2 p)\n{\n    return p.x + p.y*N.x;\n}\n\nivec2 cross_distribution(int i)\n{\n    return (1<<(i/4)) * ivec2( ((i&2)/2)^1, (i&2)/2 ) * ( 2*(i%2) - 1 );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//particle buffer\n\nint cid;\n\nivec4 get(int id)\n{\n    return floatBitsToInt(texel(ch0, i2xy(id)));\n}\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nfloat F(float d)\n{\n    return (0.15*exp(-0.1*d) - 2.*exp(-0.2*d));\n}\n\nfloat imageV(vec2 p)\n{\n    return 1.-2.*texture(ch2, vec2(1., 1.)*p/size).x;\n}\n\nvec2 imageF(vec2 p)\n{\n    vec3 d = vec3(-1,0,1);\n    return vec2(imageV(p+d.zy) - imageV(p+d.xy), imageV(p+d.yz) - imageV(p+d.yx));\n}\n\nvec2 Fv(vec4 p0, int pid)\n{\n    if(pid < 0 || pid >= tot_n || pid == cid) return vec2(0); \n   \tvec4 p1 = getParticle(pid);\n    float d= distance(p0.xy, p1.xy);\n    vec2 dv = (p1.zw - p0.zw);\n    float dotv = dot(normalize(p1.xy-p0.xy), normalize(dv)); //divergence correction\n    vec2 antidivergence = 0.*dv*abs(dotv)*exp(-0.5*d);\n    vec2 viscosity = 0.25*dv*exp(-0.1*d);\n    vec2 pressure = normalize(p1.xy-p0.xy)*F(d);\n    return viscosity + pressure + antidivergence;\n}\n\nfloat irad;\n\nvec2 Fspring(vec4 p0, int pid)\n{\n    if(pid < 0 || pid >= tot_n || pid == cid) return vec2(0); \n   \tvec4 p1 = getParticle(pid);\n    vec2 interaction = normalize(p1.xy-p0.xy)*(distance(p1.xy,p0.xy)- 2.*PI*irad/float(tot_n) - 4.*tanh(0.1*iTime));\n    return interaction;\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    N = ivec2(prop*iResolution.xy);\n    tot_n = N.x*N.y;\n    if(p.x < N.x && p.y < N.y)\n    {\n        irad = 0.3*size.y;\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch1, pos);\n        int id = xy2i(p);\n        cid = id;\n        \n        //this pixel value\n        if(iFrame<10)\n        {\n            float t = 2.*PI*float(id)/float(tot_n);\n            U.xy = size*hash22(3.14159*pos);\n\t\t\tU.zw = 1.*(hash22(3.14159*pos) - 0.5);\n      \t\treturn;\n        }\n        \n        //neighbors\n   \t\tivec4 cp = get(id);\n   \t  \n        vec2 F = Fv(U, cp.x) +\n            \t Fv(U, cp.y) +\n            \t Fv(U, cp.z) +\n                 Fv(U, cp.w) +\n            \t -20.*imageF(U.xy);\n        \n        if(iMouse.z > 0.) \n        {\n            float d = distance(iMouse.xy, U.xy);\n            F += 2.*normalize(iMouse.xy - U.xy)/(sqrt(d)+2.);\n        }\n        \n        U.zw = 15.*tanh((F*dt + U.zw)/15.) ;\n        U.xy += U.zw*dt;\n        \n        //border conditions\n        if(size.x - U.x < 2.) U.z = -abs(U.z);\n        if(U.x < 2.) U.z = abs(U.z);\n        if(size.y - U.y < 2.) U.w = -abs(U.w);\n        if(U.y < 2.) U.w = abs(U.w);\n \n        \n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//sorting closest 4 particles in axis directions that make a bounding box\n//only in particle space, texture buffer not needed\n\nivec4 get(int id)\n{\n    return floatBitsToInt(texel(ch0, i2xy(id)));\n}\n\nvec4 save(ivec4 v)\n{\n    return intBitsToFloat(v);\n}\n\nivec4 u; //ids\nvec4 d; //distances\nvec2 pos; //this particle position\nint tid;\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\n//insertion sort\nvoid sort(int utemp)\n{\n    if(utemp == tid || utemp < 0) return;\n     \n   \tvec4 part = getParticle(utemp);\n    vec2 dx = part.xy - pos;\n    float dtemp = length(dx);\n    //sorting\n    if(dx.x > abs(dx.y))\n    {\n        if(d.x > dtemp) \n        {\n            d.x = dtemp;\n        \tu.x = utemp;\n        }\n    }\n    else if(dx.x < -abs(dx.y))\n    {\n        if(d.y > dtemp) \n        {\n            d.y = dtemp;\n        \tu.y = utemp;\n        }\n    }\n    else if(dx.y > abs(dx.x))\n    {\n        if(d.z > dtemp) \n        {\n            d.z = dtemp;\n        \tu.z = utemp;\n        }\n    }\n    else if(d.w > dtemp) \n    {\n        d.w = dtemp;\n        u.w = utemp;\n    }\n}\n\nvoid sortneighbor(int id)\n{\n    ivec4 nb = get(id);\n    for(int j = 0; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{  \n    ivec2 p = ivec2(fragCoord);\n    N = ivec2(prop*iResolution.xy);\n    tot_n = N.x*N.y;\n    if(p.x > N.x || p.y > N.y) discard;\n    \n    int id = xy2i(p);\n     \n    u = ivec4(-1); d = vec4(1e10); \n   \n    tid = id;\n    pos = getParticle(id).xy;\n    \n    sortneighbor(id); \n    \n    for(int i = 0; i < 8; i++)\n    {\n        sort(hash(ivec4(p, iFrame, i)).x%tot_n); //random sort    \n    }\n    \n    ivec4 nb = get(id);\n    for(int i = 0; i < 4; i++)\n    {\n        sortneighbor(nb[i]); \n    }\n    \n    if( any(lessThan(u, ivec4(-1))) || any(greaterThan(u, ivec4(tot_n))))\n    {\n        u = ivec4(0);\n    }\n    \n    \n    U = save(u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//4th order voronoi particle tracking \n\nivec4 get(ivec2 p)\n{\n    return floatBitsToInt(texel(ch0, p));\n}\n\nvec4 save(ivec4 v)\n{\n    return intBitsToFloat(v);\n}\n\nivec4 u; //ids\nvec4 d; //distances\nvec2 pos; //pixel position\n\nvec4 getParticle(int id)\n{\n    return texel(ch1, i2xy(id));\n}\n\nfloat particleDistance(int id, vec2 p)\n{\n    return distance(p, getParticle(id).xy);\n}\n\n//insertion sort\nvoid sort(int utemp)\n{\n    if(utemp <0) return; \n   \tfloat dtemp = particleDistance(utemp, pos);\n    //sorting\n    if(d.x > dtemp)\n    {\n        d = vec4(dtemp, d.xyz);\n        u = ivec4(utemp, u.xyz);\n    }\n    else if(d.y > dtemp && dtemp > d.x)\n    {\n        d.yzw = vec3(dtemp, d.yz);\n        u.yzw = ivec3(utemp, u.yz);\n    }\n    else if(d.z > dtemp && dtemp > d.y)\n    {\n        d.zw = vec2(dtemp, d.z);\n        u.zw = ivec2(utemp, u.z);\n    }\n    else if(d.w > dtemp && dtemp > d.z)\n    {\n        d.w = dtemp;\n        u.w = utemp;\n    }\n}\n\nvoid sortpos(ivec2 p)\n{\n    ivec4 nb = get(p);\n    for(int j = 0; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{\n    pos = fragCoord;\n     N = ivec2(prop*iResolution.xy);\n    tot_n = N.x*N.y;\n    ivec2 p = ivec2(pos);\n     \n    u = ivec4(-1); d = vec4(1e10); \n   \n    //jump flood sorting \n    sortpos(p); //resort this position\n    for(int i = 0; i < 8; i++)\n    {\n        sortpos(p+cross_distribution(i)); \n    }\n    \n    for(int i = 0; i < 4; i++)\n    {\n        sort(hash(ivec4(p, iFrame, i)).x%tot_n); //random sort    \n    }\n    \n    if( any(lessThan(u, ivec4(-1))) || any(greaterThan(u, ivec4(tot_n))) )\n    {\n        u = ivec4(0);\n    }\n    \n    U = save(u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 p )\n{\n    fragColor = texture(ch0, p/size);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}