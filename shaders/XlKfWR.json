{
    "Shader": {
        "info": {
            "date": "1542215519",
            "description": "march",
            "flags": 0,
            "hasliked": 0,
            "id": "XlKfWR",
            "likes": 5,
            "name": "raymarch anything 3",
            "published": 3,
            "tags": [
                "march"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "// raymarch anything #3 - Del 14/11/2018\n\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a),\n\t\ts = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat objID = 0.0;\nfloat svobjID = 0.0;\n\n#define\tTAU 6.28318\n\nfloat map(vec3 p)\n{\n    float time=iTime;\n    float zo = time*6.75;\n    float modz = mod(zo,44.0);\n    \n    float t2 = fract(time*1.1) * TAU;\n    float t3 = fract(time*0.7) * TAU;\n    float t4 = fract(time*0.14)* TAU;\n    \n    float m = 0.5+sin(t2+p.z*0.4)*0.5;\n    m += 0.5+cos(p.z*0.4+t3+p.x*0.4)*0.5;\n    \n    p.xy *= rotate(p.z * .08 + t4);\n    \n\tp.z += modz;\n    float c1 = pMod1(p.z,44.0);\n    \n\tfloat dist = 3.5 -abs(p.y)+m;\n    \n    vec3 p2 = p;\n\tfloat cz = pMod1(p2.z,4.0);\n\tfloat cx = pMod1(p2.x,4.0);\n\n    float r = hash(vec2(cz+(cz*0.31),cx+(cx*0.61)));\n\n    if (abs(cx)<1.0)\n        r=0.0;\n\n    if (r>0.75)\n    {\n\t\tfloat d2 = sdCylinder(p2,vec2(0.7,5.5));         \n        dist = smin(dist,d2,1.1);\n    }\n\n    objID = abs(p.z)/44.0;\n    return dist;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec2 e = vec2(.001, 0.);\n\tvec3 n;\n\tn.x = map(p + e.xyy) - map(p - e.xyy);\n\tn.y = map(p + e.yxy) - map(p - e.yxy);\n\tn.z = map(p + e.yyx) - map(p - e.yyx);\n\treturn normalize(n);\n}\n\nvec3 render(vec2 uv)\n{\n    float time = iTime;\n\tvec3 ro = vec3(0.0, 0.0, 0.0);\n\tvec3 rd = normalize(vec3(uv, 1.95));\n\tvec3 p = vec3(0.0);\n\tfloat t = 0.;\n\tfor (int i = 0; i < 180; i++)\n    {\n\t\tp = ro + rd * t;\n\t\tfloat d = map(p);\n\t\tif (d < .001 || t > 100.) break;\n\t\tt += .25 * d;\n\t}\n    \n    svobjID = objID;\n\tvec3 l = ro+vec3(0.0,0.0,12.0);\n\tvec3 n = normal(p);\n\tvec3 lp = normalize(l - p);\n\tfloat diff = 1.2 * max(dot(lp, n), 0.);\n    \n    vec3 c1 = vec3(2.54,2.2,1.25);\n    vec3 c2 = vec3(2.54,1.1,1.85);\n    \n    float m = svobjID;\n    vec3 col = mix(c1,c2,m);\n    \n\treturn col*diff / (1. + t * t * .01);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = render(uv);\n\t// vignette\n    col *= 0.4 + 0.6*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\tfragColor = vec4(col, 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}