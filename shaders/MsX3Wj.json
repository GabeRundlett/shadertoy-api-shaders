{
    "Shader": {
        "info": {
            "date": "1379262626",
            "description": "Just like the GIF many of us have seen.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsX3Wj",
            "likes": 82,
            "name": "Stripey Torus Interior",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "fb39ca4",
            "viewed": 5321
        },
        "renderpass": [
            {
                "code": "//Thank you iquilez for some of the primitive distance functions!\n\n\nconst float PI = 3.14159265358979323846264;\n\n\nconst int MAX_PRIMARY_RAY_STEPS = 64; //decrease this number if it runs slow on your computer\n\nvec2 rotate2d(vec2 v, float a) { \n\treturn vec2(v.x * cos(a) - v.y * sin(a), v.y * cos(a) + v.x * sin(a)); \n}\n\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat distanceField(vec3 p) {\n\treturn -sdTorus(p, vec2(4.0, 3.0));\n}\n\nvec3 castRay(vec3 pos, vec3 dir, float treshold) {\n\tfor (int i = 0; i < MAX_PRIMARY_RAY_STEPS; i++) {\n\t\t\tfloat dist = distanceField(pos);\n\t\t\t//if (abs(dist) < treshold) break;\n\t\t\tpos += dist * dir;\n\t}\n\treturn pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 mousePos = (iMouse / iResolution.xyxy) * 2.0 - 1.0;\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraPos = vec3(0.0, 0.0, -3.8);\n\t\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.5);\n\tvec3 planeU = vec3(1.0, 0.0, 0.0) * 0.8;\n\tvec3 planeV = vec3(0.0, iResolution.y / iResolution.x * 1.0, 0.0);\n\tvec3 rayDir = normalize(cameraDir + screenPos.x * planeU + screenPos.y * planeV);\n\t\n\t//cameraPos.yz = rotate2d(cameraPos.yz, mousePos.y);\n\t//rayDir.yz = rotate2d(rayDir.yz, mousePos.y);\n\t\n\t//cameraPos.xz = rotate2d(cameraPos.xz, mousePos.x);\n\t//rayDir.xz = rotate2d(rayDir.xz, mousePos.x);\n\t\n\tvec3 rayPos = castRay(cameraPos, rayDir, 0.01);\n\t\n\tfloat majorAngle = atan(rayPos.z, rayPos.x);\n\tfloat minorAngle = atan(rayPos.y, length(rayPos.xz) - 4.0);\n\t\t\n\tfloat edge = mod(8.0 * (minorAngle + majorAngle + iTime) / PI, 1.0);\n\tfloat color = edge < 0.7 ? smoothstep(edge, edge+0.03, 0.5) : 1.0-smoothstep(edge, edge+0.03, 0.96);\n\t//float color = step(mod(8.0 * (minorAngle + majorAngle + iTime) / PI, 1.0), 0.5);\n\t//color -= 0.20 * step(mod(1.0 * (minorAngle + 1.0 * majorAngle + PI / 2.0) / PI, 1.0), 0.2);\n\t\n\tfragColor = vec4(color);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}