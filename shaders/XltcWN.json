{
    "Shader": {
        "info": {
            "date": "1532691555",
            "description": "Outro scene from the Eldur demo released at Edison 2018 \nFull demo: https://www.youtube.com/watch?v=jvqahkoMs40",
            "flags": 32,
            "hasliked": 0,
            "id": "XltcWN",
            "likes": 6,
            "name": "Eldur fire symbol",
            "published": 3,
            "tags": [
                "3d",
                "fire",
                "volumetric",
                "lightning",
                "symbol"
            ],
            "usePreview": 0,
            "username": "jmb",
            "viewed": 801
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n\tfragColor.rgb *=  0.9 + 0.1*clamp(sin(uv.y*1000.0) + 0.8, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Globals\nvec3 lightPosition = vec3(-4.0, 5, -4);\n\nfloat sdSphere(vec3 p, float s)\n{\n  return length(p) - s;\n}\n\nfloat udRoundBox(vec3 p, vec3 b, float r)\n{\n  return length(max(abs(p)-b,0.0)) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n\tp.y *= 0.7;\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat sdTorusJ(vec3 p, vec2 t)\n{\n\t\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  float d = length(q)-t.y;\n\n\tif (p.y > 0.0) {\n\t\td = max(d, p.y);\n\t}\n\treturn d;\n}\n\nfloat hash( in vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat noiseOctave(in vec2 p, int octaves, float persistence)\n{\n\tfloat n = 0.;\n\tfloat amplitude = 1.;\n\tfloat frequency = 1.;\n\tfloat maxValue = 0.;\n\n\tfor(int i = 0; i < octaves; i++)\n\t{\n\t\tn += noise((p+float(i)) * frequency) * amplitude;\n\t\tmaxValue += amplitude;\n\t\tamplitude *= persistence;\n\t\tfrequency *= 2.0;\n\t}\n\treturn n / maxValue; \n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// Smooth min. k determines smoothness\nfloat smink( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n\n}\n\nfloat smin( float a, float b)\n{\n\tfloat k = 2.0;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 sun(vec4 a, vec4 b)\n{\n\tfloat sm = smin(a.x,b.x);\n\tfloat ca = abs(sm -a.x);\n\tfloat cb = abs(sm -b.x);\n\n\treturn ca < cb ? vec4(sm, a.yzw) : vec4(sm, b.yzw);\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1));\n}\n\n\n// a < b\nfloat inverseMix(float value, float a, float b)\n{\n\treturn clamp((value - a) / (b - a), 0.0, 1.0);\n}\n\nfloat posSin(float value) \n{\n\treturn 0.5 * (1.0 + sin(value));\n}\n\nvec3 tornadoPos(float time)\n{\n\treturn vec3(0);\n}\n\nfloat cros(vec3 p)\n{\n\tfloat time = mod(iTime, 40.0);\n\tfloat k1 = smoothstep(5.0, 6.0, time);\n\tfloat k2 = smoothstep(17.0, 18.0, time);\n\tfloat k3 = smoothstep(20.4, 21.5, time);\n\tfloat k4 = smoothstep(23.0, 24.0, time);\n\tfloat k5 = smoothstep(30.0, 40.0, time);\n\tfloat k6 = smoothstep(20.0, 37.0, time);\n\tfloat nv = noise((p.xy + vec2(iTime, 0.0)) * 3.0);\n\tfloat d = sdCappedCylinder(p, vec2(0.05 -k6*2.0*nv+ 0.1*nv + k1*0.3*nv, 4.0+ (k2 - k3)*0.0)); \n\tfloat d2 = sdCappedCylinder(p.zxy, vec2(0.05 -k6*2.0*nv+ 0.1*nv+ k1*0.3*nv, 4.0+ (k2 - k3)*0.0)); \n\treturn min(d, d2);\n}\n\nvec4 disMin(vec4 a, vec4 b)\n{\n\treturn a.x < b.x ? a : b;\n\n}\nvec3 symbolPos(float time)\n{\n\treturn vec3(0, 3.0, 14.0);\n}\n\nvec4 symbol(vec3 p)\n{\n\tfloat time = mod(iTime, 40.0);\n\tfloat k1 = smoothstep(6.0, 7.0, time);\n\tfloat k2 = smoothstep(20.0, 21.0, time);\n\tmat3 mm = rotateZ(0.3*log(1.0 + pow(2.17, -(time -15.0))));\n\n\n\tp -= symbolPos(iTime);\n\tfloat d = cros(inverse(mm)*p);\n\tmat3 m = rotateZ(3.14/4.0);\n\tfloat d2 = cros(inverse(mm)*inverse(m)*p);\n\n\tvec3 c1 = vec3(5.0,3.0,3.0);\n\tvec3 q1 = mod(p, c1)- 0.5*c1;\n\treturn vec4(min(d,  d2), 1.0, 0.1, 0.002);\n}\n\n\n\n\nvec4 map(vec3 p, vec3 rd) \n{\n\tfloat nv = noise((p.xy + p.xz + p.yz) * 3.0);\n\tfloat dis = -udRoundBox(p - vec3(0.0, 1.0, 0.0), vec3(23.0, 5.0, 22.0), 5.0);\n\tvec4 box = vec4(dis, vec3(0.3, 0.3, 0.3));\n\tvec3 c1 = vec3(3,3,3);\n\tvec3 q1 = mod(p, c1)- 0.5*c1;\n\tvec4 floor = vec4(sdBox(vec3(q1.x, p.y + 10.5, q1.z), vec3(1, 1, 1)), vec3(0.3, 0.3, 0.3));\n\t//floor = disMin(floor, vec4(sdBox(vec3(q1.x, p.y - 13.5, q1.z), vec3(1, 1, 1)), vec3(0.3, 0.3, 0.3)));\n\n\tvec2 c = vec2(25, 7);\n\tvec3 q = vec3(mod(p.x, c.x)- 0.5*c.x, p.y, mod(p.z, c.y) - 0.5*c.y);\n\tvec4 table = vec4(sdBox(p - vec3(0, -7, 22), vec3(6, 3, 5)), vec3(0.2, 0.2, 0.2));\n\ttable = sun(table, vec4(sdBox(p - vec3(0, -7, 22), vec3(4, 4, 5.3)), vec3(0.2, 0.2, 0.2)));\n\tvec4 pillars = vec4(sdBox(q - vec3(0, -9, 0), vec3(0.5, 22, 0.5)), vec3(0.2, 0.2, 0.2));\n\tvec4 disRoom = sun(floor, sun(pillars, sun(table, box)));\n\treturn disMin(symbol(p), disRoom);\n}\n\nvec3 getNormal(vec3 p, vec3 rd) {\n\tvec3 ep = vec3(0.01, 0, 0);\n    vec3 normal;\n    normal.x = map(p + ep.xyz, rd).x - map(p - ep.xyz, rd).x;\n    normal.y = map(p + ep.yxz, rd).x - map(p - ep.yxz, rd).x;\n    normal.z = map(p + ep.yzx, rd).x - map(p - ep.yzx, rd).x;\n    return normalize(normal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat u = fragCoord.x / iResolution.x * 2.0 - 1.0;\n\tfloat v = fragCoord.y / iResolution.y * 2.0 - 1.0;\n\n\tfloat k = 1.0;\n\tu *= 16.0 / 9.0;\n\tu *= k;\n\tv *= k;\n    vec3 ro = vec3(0,  -1.9+0.8*cos(iTime), -15.0);\n    vec3 tar = vec3(0, 0, 0);\n    vec3 dir = normalize(tar - ro);\n\tvec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), dir));\n\tvec3 up = cross(dir, right);\n\tvec3 rd = normalize(dir + right*u + up*v);\n\tfloat time = mod(iTime, 40.0);\n\t\n\tfloat k1 = smoothstep(5.0, 6.0, time);\n                    \n    float t = 0.0;\n    vec3 color = vec3(0.0);\n\tfloat transmittance = 1.0;\n\tvec3 scatteredLight = vec3(0.0);\n\n    \n    for (int i = 0; i < 200; i++) {\n    \tvec3 p = ro + rd * t;\n        \n        vec4 disColor = map(p, rd);\n\t\tfloat d = disColor.x;\n\t\tcolor = disColor.yzw;\n        float fogAmount = 0.005;\n\t\tvec4 lightDisColor = symbol(p);\n\t\tfloat ld = lightDisColor.x;\n\t\tvec3 light = 40.0 * lightDisColor.yzw / (ld*ld);\n\n\t\tvec3 lightIntegrated = light - light * exp(-fogAmount * d);\n\t\tscatteredLight += transmittance * lightIntegrated;\t\n\t\ttransmittance *= exp(-fogAmount * d);\n        \n\t\tif (d < 0.01) {\n         \n            float dis = symbol(p).x;\n            vec3 invLight = normalize(lightPosition - p);\n            \n            vec3 normal = getNormal(p, rd);\n            \n            float diffuse = max(0.0, dot(invLight, normal));\n            float s = 10.0;\n            float k = max(0.0, dot(rd, reflect(invLight, normal)));\n            float spec =  pow(k, s);\n            float str = (1.0 + 5.0*k1)/(0.01 + 0.4*dis + 0.03*dis*dis);\n            color *= (0.4 + 0.5*diffuse);\n\n\t\t\tcolor = transmittance * color + scatteredLight;\n\t\t\tcolor *= str;\n            break;\n        }\n        t += 0.5*d;\n    }   \n\tfloat fstr = smoothstep(0.0, 2.0, time);\n\tfloat fstr2 = smoothstep(30.0, 40.0, time);\n\tfragColor = vec4(color, 1.0);\n    fragColor.rgb = fragColor.rgb / (fragColor.rgb + vec3(1.0)) * (fstr - fstr2);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}