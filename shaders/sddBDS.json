{
    "Shader": {
        "info": {
            "date": "1657152612",
            "description": "Cellular automata build city.",
            "flags": 32,
            "hasliked": 0,
            "id": "sddBDS",
            "likes": 3,
            "name": "City Builder Cellular Automata",
            "published": 3,
            "tags": [
                "cell"
            ],
            "usePreview": 0,
            "username": "N8Shader",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    //vec3 objectNormal = normalize(vec3(\n        //1.0,//length(texture(iChannel0, uv + vec2(texelSize.x, 0.0)).rgb) - length(texture(iChannel0, uv - vec2(texelSize.x, 0.0)).rgb),\n       // 1.0,\n       // 1.0,//length(texture(iChannel0, uv + vec2(0.0, texelSize.y)).rgb) - length(texture(iChannel0, uv - vec2(0.0, texelSize.y)).rgb),\n   // ));\n    vec3 objectNormal = normalize(vec3(\n        4.0 * (length(texture(iChannel0, uv + vec2(texelSize.x, 0.0)).rgb) - length(texture(iChannel0, uv - vec2(texelSize.x, 0.0)).rgb)),\n        1.0,\n        4.0 * (length(texture(iChannel0, uv + vec2(0.0, texelSize.y)).rgb) - length(texture(iChannel0, uv - vec2(0.0, texelSize.y)).rgb))\n    ));\n    fragColor = vec4(vec3(dot(texture(iChannel0, uv).rgb * vec3(max(dot(objectNormal, vec3(0.0, 1.0, 0.0)), 0.0)), vec3( 0.299, 0.587, 0.114 ))),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "    float seed = 0.0;\n    highp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\nfloat rand(vec2 uv)\n{\n    /*float result = fract(sin(seed + mod(time, 1000.0) + dot(gl_FragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    //_Seed += 1.0;\n    seed += 1.0;\n    return result;*/\n    float result = random(uv + seed / 10.0);\n    seed += 1.0;\n    return result;\n}\nfloat ss(float x) {\n    return 3.0 * pow(x, 2.0) - 2.0 * pow(x, 3.0);\n}\nfloat activation(float x) {\n    if (x > 0.2) {\n        return max(ss (5.0 * x), 0.0);\n    } else {\n        return 0.0;\n    }\n}\nfloat dactivation(float x) {\n    return -4.0 * pow(x - 0.5, 2.0) + 1.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    vec4 amt = vec4(0.0);\n    if (iFrame == 0) {\n        fragColor = vec4(rand(uv), rand(uv), rand(uv), 1.0);\n    } else {\n    \n       vec4 curr = texture(iChannel0, uv);\n       float count = 0.0;\n       for(float i = -5.0; i <= 5.0; i++) {\n           for(float j = -5.0; j <= 5.0; j++) {\n               if (!(i == 0.0 && j == 0.0)) {\n                   float weight = 1.0 / (length(vec2(i, j)));\n                   amt += weight * texture(iChannel0, uv + vec2(i, j) * texelSize);\n                   count += weight;\n              }\n           }\n       }\n       amt /= count;\n       float killFactor = 0.2;\n       float changeSpeed = 0.41;\n       fragColor = vec4(mix(curr.r, max(activation(amt.r) - killFactor * (amt.g + amt.b), 0.0), changeSpeed),\n       mix(curr.g, max(activation(amt.g) - killFactor * (amt.r + amt.b), 0.0), changeSpeed),\n       mix(curr.b, max(activation(amt.b) - killFactor * (amt.g + amt.r), 0.0), changeSpeed), 1.0);\n    }\n    if (iMouse.z > 0.0) {\n        fragColor = mix(fragColor, vec4(rand(uv), rand(uv), rand(uv), 1.0), min(1.0 / (0.1 * distance(iMouse.xy, fragCoord)), 1.0));\n    }\n    fragColor = mix(fragColor, amt, 0.01);\n    fragColor *= 0.9;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}