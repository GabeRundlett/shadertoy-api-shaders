{
    "Shader": {
        "info": {
            "date": "1591295161",
            "description": "The result of second week of learning shaders with Book of Shaders.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttlyRn",
            "likes": 2,
            "name": "Tictactoe",
            "published": 3,
            "tags": [
                "2d",
                "2dshaders"
            ],
            "usePreview": 0,
            "username": "postviolet",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nvec3 cosPalette( float t, vec3 a, vec3 b, vec3 c, vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat random (float puk) {\n    return fract(sin(puk)* 43758.5453123);\n}\n\nfloat noise(float x) {\n  float i = floor(x);\n  float f = fract(x);\n  return mix(random(i), random(i + 1.0), smoothstep(0.,1.,f));\n}\n\nfloat circle(in vec2 _st, in float _radius, vec2 _pos, float border){\n    vec2 l = _st-_pos;\n    float c1 = 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n    float c2 = 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0*(border));\n    \n    return c1-c2;}\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.660;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 _st, float _size){\n    return  box(_st, vec2(_size+(noise(iTime*3.)),_size/4.)) +\n            box(_st, vec2(_size/4.,_size+(noise(iTime*3.))));\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 st = fragCoord.xy/vec2(iResolution.y, iResolution.y);\n  st.x -= iResolution.y / iResolution.x / 1.5;\n  \n  vec3 color = vec3(0.180,0.180,0.180);\n\n  vec2 space1 =st;\n  float n = noise(iTime);\n  float c = circle(space1,0.604, vec2(0.5,0.5), 1.5*(noise(iTime*3.)));\n  color = mix(color, vec3(0.620,0.479,0.601),c);\n\n  vec2 space3 = st;\n  space3 -= vec2(0.5);\n  space3 = rotate2d((noise(iTime*5.99999)))*space3;\n  space3 += vec2(0.5);\n  float cr2 = cross(space3, 0.50);\n  color = mix(color, vec3(0.945,0.858,0.930),cr2);\n\n  vec2 space2 = st;\n  space2 -= vec2(0.5);\n  space2 = rotate2d((noise(iTime*6.)))*space2;\n  space2 += vec2(0.5);\n  float cr1 = cross(space2, 0.5);\n  color = mix(color, vec3(0.0,0.,0.),cr1);\n\n  fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}