{
    "Shader": {
        "info": {
            "date": "1552529598",
            "description": "Ring of Fire",
            "flags": 0,
            "hasliked": 0,
            "id": "tslSDX",
            "likes": 63,
            "name": "The Ring",
            "published": 3,
            "tags": [
                "sun",
                "fire",
                "ring"
            ],
            "usePreview": 1,
            "username": "kubiak",
            "viewed": 2679
        },
        "renderpass": [
            {
                "code": "// Modification of https://www.shadertoy.com/view/ldlXRS by Nimitz\n\n\n#define time iTime*0.15\n#define tau 6.2831853\n\nmat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\nfloat noise( in vec2 x ){return texture(iChannel0, x*.01).x;}\n\nfloat fbm(in vec2 p)\n{\t\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 6.;i++)\n\t{\n\t\trz+= abs((noise(p)-0.5)*2.)/z;\n\t\tz = z*2.;\n\t\tp = p*2.;\n\t}\n\treturn rz;\n}\n\nfloat dualfbm(in vec2 p)\n{\n    //get two rotated fbm calls and displace the domain\n\tvec2 p2 = p*.7;\n\tvec2 basis = vec2(fbm(p2-time*1.6),fbm(p2+time*1.7));\n\tbasis = (basis-.5)*0.76;\n\tp += basis;\n\t\n\t//coloring\n\treturn fbm(p*makem2(time*0.72));\n}\n\nfloat circ(vec2 p) \n{\n\tfloat r = length(p);\n\tr = log(sqrt(r));\n\treturn abs(mod(r*5.1,tau)-3.14)*3.+.2;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//setup system\n\tvec2 p = (fragCoord.xy / iResolution.xy)-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tp*=4.;\n\t\n    float rz = dualfbm(p);\n\t\n\t//rings\n\tp /= exp(mod(3.*10.,3.14159));\n\trz *= pow(abs((0.1-circ(p))),.9);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec2 center = vec2(0.5, 0.5);\n    center.x *= iResolution.x/iResolution.y;\n    float d = length(uv - center);\n    float r = 0.4;\n    float a = 1.0;\n    if(d > r) {\n        a = max(0.0, 1.0 - ((d - r) / 0.1));\n    }\n    \n\t\n\t//final color\n\tvec3 col = vec3(.321,0.1,0.065)/rz;\n\tcol=pow(abs(col),vec3(.99));\n    col *= a;\n    \n\tfragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}