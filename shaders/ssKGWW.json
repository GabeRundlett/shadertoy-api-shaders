{
    "Shader": {
        "info": {
            "date": "1631583377",
            "description": "SDF test",
            "flags": 0,
            "hasliked": 0,
            "id": "ssKGWW",
            "likes": 2,
            "name": "Spongy Holes",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "shadows",
                "menger"
            ],
            "usePreview": 0,
            "username": "Bedragaren",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "#define LIGHT_BRIGHTNESS 2.\n#define SPHERE_RADIUS 3. \n// Radiuses 2. and 4. are also worth a look \n\nconst vec3  eye      = vec3 ( 0, 0, 0.5);\n vec3  light    = vec3  ( 0.0, 0.1, 5 );\nconst int   maxSteps = 700;\nconst float eps      = 0.01;\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nfloat dSphere ( vec3 p, in vec3 c, float r )\n{\n\treturn length ( p - c ) - r;\n}\n\nfloat dBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat dTorus ( vec3 p, vec2 t )\n{\n\tvec2 q = vec2 ( length ( p.xz ) - t.x, p.y );\n\t\n\treturn length ( q ) - t.y;\n}\n\nfloat smin ( float a, float b, float k )\n{\n\tfloat res = exp ( -k*a ) + exp ( -k*b );\n\treturn -log ( res ) / k;\n}\n\nfloat menger ( in vec3 p )\n{\n   float d = dBox(p,vec3(1.0));\n\n   float s = 1.0;\n   for( int m=0; m<4; m++ )\n   {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 3.0;\n      vec3 r = abs(1.0 - 3.0*abs(a));\n\n      float da = max(r.x,r.y);\n      float db = max(r.y,r.z);\n      float dc = max(r.z,r.x);\n      float c = (min(da,min(db,dc))-1.0)/s;\n\n      d = max(d,c);\n   }\n\n   return d;\n}\n\nfloat sdf ( in vec3 p, in mat3 m )\n{\n    vec3 q = m * p + vec3(0,0,-5)*iTime;\n    q.xyz -= 2.5;\n    q = mod(q, 5.0) - 2.5;\n    \n    //return dSphere ( p, vec3 ( 2, 0, 0 ) );\n    //return dBox ( q, vec3 ( 0.5, 0.2, 0.7 ) );\n\treturn max (menger(q/2.5), -dSphere ( q, vec3 ( 0, 0, 0 ), SPHERE_RADIUS ));\n}\n\nvec3 trace ( in vec3 from, in vec3 dir, out bool hit, in mat3 m, in float maxDist, out float softShadow)\n{\n\tvec3\tp         = from;\n\tfloat\ttotalDist = 0.0;\n\t\n\thit = false;\n    softShadow = 1.0;\n    float prevDist = 1e20;\n\t\n\tfor ( int steps = 0; steps < maxSteps; steps++ )\n\t{\n\t\tfloat dist = sdf ( p, m );\n        \n\t\tif ( dist < 0.001 )\n\t\t{\n\t\t\thit = true;\n\t\t\tbreak;\n\t\t}\n        \n        float y = dist*dist/(2.0*prevDist);\n        float d = sqrt(dist*dist-y*y);\n\t\tsoftShadow = min(softShadow, 200. * d / max(0.0, max(totalDist, 0.) - y));\n        prevDist = dist;\n        \n\t\ttotalDist += dist;\n\t\t\n\t\tif ( totalDist > maxDist )\n\t\t\tbreak;\n\t\t\t\n\t\tp += dist * dir;\n\t}\n    \n    if (hit) {\n        softShadow = 0.;\n    }\n\t\n\treturn p;\n}\n\nvec3 trace ( in vec3 from, in vec3 dir, out bool hit, in mat3 m) {\n    const float defaultMaxDist = 100.;\n    float softShadow = 0.;\n    return trace ( from, dir, hit, m, defaultMaxDist, softShadow);\n}\n\nfloat traceLightBulb ( in vec3 from, in vec3 dir, out bool hit, in vec3 lightPos, in mat3 m)\n{\n\tvec3\tp         = from;\n\tfloat\ttotalDist = 0.0;\n\t\n\thit = false;\n\t\n\tfor ( int steps = 0; steps < maxSteps; steps++ )\n\t{\n\t\tfloat dist = dSphere ( m * p, lightPos, 0.1 );\n        \n\t\tif ( dist < 0.001 )\n\t\t{\n\t\t\thit = true;\n\t\t\tbreak;\n\t\t}\n        \n\t\ttotalDist += dist;\n\t\t\n\t\tif ( totalDist > 20. )\n\t\t\tbreak;\n\t\t\t\n\t\tp += dist * dir;\n\t}\n\t\n\treturn totalDist;\n}\n\nvec3 generateNormal ( vec3 z, float d, in mat3 m )\n{\n    float e   = max (d * 0.5, eps );\n    float dx1 = sdf(z + vec3(e, 0, 0), m);\n    float dx2 = sdf(z - vec3(e, 0, 0), m);\n    float dy1 = sdf(z + vec3(0, e, 0), m);\n    float dy2 = sdf(z - vec3(0, e, 0), m);\n    float dz1 = sdf(z + vec3(0, 0, e), m);\n    float dz2 = sdf(z - vec3(0, 0, e), m);\n    \n    return normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\nvec3 encodeSRGB(vec3 linearRGB)\n{\n    vec3 a = 12.92 * linearRGB;\n    vec3 b = 1.055 * pow(linearRGB, vec3(1.0 / 2.4)) - 0.055;\n    vec3 c = step(vec3(0.0031308), linearRGB);\n    return mix(a, b, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n        // Normalized pixel coordinates (from 0 to 1)\n    bool hit;\n\tvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n    mat3 m     = rotateY ( 6.0*mouse.x) *  rotateX ( -6.0*mouse.y );\n    vec2 scale = 3.0 * iResolution.xy / max ( iResolution.x, iResolution.y ) ;\n    vec2 uv    = scale * ( fragCoord/iResolution.xy - vec2 ( 0.5 ) );\n\tvec3 dir   = normalize ( vec3 ( uv, 0 ) - eye );\n    vec3 color = vec3 ( 0 );\n    vec3 p     = trace ( eye, dir, hit, m );\n    vec3 solidColor = vec3(228, 155, 15) / 255.;\n    vec3 lightColor = vec3(255, (sin(iTime)+0.5)/2.*255., 255) / 255.;\n    \n    light = vec3(5. * -cos(iTime / 2.), 1.5 * sin(iTime + 1.) + 0.1, 5. * sin(iTime / 2.));\n    float hitDist = length( eye - p );\n\n\tif ( hit )\n\t{\n\t\tvec3  l  = normalize        ( light*m - p );\n        vec3  v  = normalize        ( eye - p );\n\t\tvec3  n  = generateNormal   ( p, 0.001, m );\n\t\tfloat nl = max ( 0.0, dot ( n, l ) );\n        vec3  r  = reflect(l, n);\n        float hn = max ( 0.0, dot ( r, v ) );\n        float sp = pow ( hn, 4.0 );\n        \n        if (dot(l, n) <= 0.) {\n            sp = 0.;\n        }\n\t\t\n\t\tcolor = 1. * solidColor * nl  + solidColor * sp * 0.2;\n        color *= lightColor ;\n        \n        float dist = length(light*m - p);\n        float shadow = 1.;\n        \n        trace(p + l * 0.1, l, hit, m, dist, shadow);\n        \n        color *= LIGHT_BRIGHTNESS / pow(dist, 2.) * shadow;\n        color += 0.001 * solidColor * lightColor / pow(dist, 2.);\n\t}\n    \n    float bulbDist = traceLightBulb(eye, dir, hit, light, m);\n    \n    if (hit && bulbDist < hitDist) {\n        float alpha = clamp(0., 1., pow(abs(bulbDist - length(light*m - eye))*10., 2.));\n        color = (1.-alpha)*color + alpha * (lightColor * 0.5 + vec3(1) * alpha*alpha);\n    }\n\n    // Output to screen\n    fragColor = vec4(encodeSRGB(color), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}