{
    "Shader": {
        "info": {
            "date": "1594565641",
            "description": "Chapter 5 - The Book of Shaders - Shaping Functions\n\nSinusoidal background gradient with function plotted over top.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjcDm",
            "likes": 1,
            "name": "Animated Sinusoid - TBOS 5.0",
            "published": 3,
            "tags": [
                "simple",
                "gradient",
                "sine",
                "tbos"
            ],
            "usePreview": 0,
            "username": "stungeye",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "// Working Through The Book of Shaders\n// Chapter 05 - Shaping Functions - https://thebookofshaders.com/05/\n// 5.0 - Animated Sinusoid - Details: https://shader-journey.netlify.app/docs/5-shaping-functions\n\n#define PI 3.14159265358979\n\n// Plot a line on Y using a value between 0.0-1.0\nfloat plot(vec2 st, float pct){ // (st = texture coordinates) (pct = percentage from 0.0 to 1.0)\n    \n  const float width_factor = 0.007;\n    \n  return  smoothstep(pct - width_factor, pct, st.y) \n          - smoothstep(pct, pct + width_factor, st.y);\n}\n\nvoid mainImage(out vec4 fragColor,  // Output (r, g, b, a) pixel color \n               in vec2 fragCoord) { // Input (x, y) image coordinate\n    \n\tconst vec3 plot_colour = vec3(1.,0.,1.); // Colour of our plot. \n    \n    vec2 st = fragCoord / iResolution.xy;    // Normalize texture coordinates from 0.0 to 1.0 in x and y.\n\n    float y = sin(st.x * PI + iTime);        // y is a sinusoid based on x position and time.\n          y = 0.5 * y + 0.5;                 // Scale and offset y to center plot.\n    \n    float plot = plot(st, y);                // Create a plot of y.\n    \n    vec3 colour = vec3(y, y, y);             // Black to white background gradient. Also: vec3(y) \n         colour *= 1. - plot;                // Remove gradient \"below\" where plot will be draw.\n         colour += plot * plot_colour;       // Paint the xy-plot.\n\n\tfragColor = vec4(colour, 1.0);           // Set pixel colour.\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}