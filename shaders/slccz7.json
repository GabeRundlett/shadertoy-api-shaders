{
    "Shader": {
        "info": {
            "date": "1659457507",
            "description": "inspired by reference:  https://twitter.com/kineticgraphics/status/1537861671296741376\n\nimproving https://www.shadertoy.com/view/7ldyRH\nwith the help of pyBlob https://shadertoy.com/view/NtdyRN",
            "flags": 0,
            "hasliked": 0,
            "id": "slccz7",
            "likes": 18,
            "name": "infinite nested block 2",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// improving https://www.shadertoy.com/view/7ldyRH\n// with the help of pyBlob https://shadertoy.com/view/NtdyRN\n\n\n#define rot(a)       mat2(cos(a+vec4(0,11,33,0)))          // rotation \n#define C(q)         max( q.x, max(q.y,q.z) )\n#define B(d,y,k,p)   r = abs( q+ vec3(6, y, 2.+4.*min(d,T-k)).p ), t = min(t, C(r) -2. )  \nfloat T;\n\nfloat S(vec3 q) {                                          // --- scene\n    //float t= C(q); vec3 r, a = 8.-abs(q); t = max(t, -C(-a) ); // cube - corner\n    float t = max(C(q), -C(-8.-q)); vec3 r;                    // pyBlob simplif\n    B(1.,6.,2.,xyz),                                           // flying bricks\n    B(0.,6.,3.,yzx), \n    B(0.,6.,4.,zxy), \n    B(0.,6.,5.,xyz), \n    B(0.,2.,6.,yzx), \n    B(0.,2.,7.,zxy), \n    B(0.,2.,8.,xyz);\n    return t;\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    T = mod(iTime,8.);\n    float t=9., l=0., s = exp2(-T/8.); \n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -4.*R.y) - R),           // ray direction\n          p = vec3(11.5),                                  // marching point along ray\n          e = vec3(1e-3,0,0), N,\n          M = iMouse.z > 0. ? 2.*(iMouse.xyz/R -.5)\n              :  0.*vec3( 10,4,0)/1e2 * cos(iTime + vec3(0,11,0)); \n    p *= s;                                                // zoom\n    D.xy *= rot(.5*iTime),\n    D.yz *= rot(-.6*M.y+.60),                              // rotations\n    D.xz *= rot(-.6*M.x+.78); \n    for( O = vec4(1); O.x > 0. &&  t > .01; O-=.01 )       // march scene\n        l += t = S(p),\n        p += t*D;                                          // step forward = dist to obj          \n\n    N = normalize( vec3(S(p+e),S(p+e.zxy), S(p+e.yzx) ) - S(p) ); // normal\n    O.rgb  = (1.+.3*N) * exp(-.1*(l/s-20.));               // color scheme\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}