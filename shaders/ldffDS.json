{
    "Shader": {
        "info": {
            "date": "1497858322",
            "description": "Make current reaching plugs.\nClick on cells to rotate.\n\n(only 2 level for now).",
            "flags": 32,
            "hasliked": 0,
            "id": "ldffDS",
            "likes": 27,
            "name": "Power line",
            "published": 3,
            "tags": [
                "game"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 947
        },
        "renderpass": [
            {
                "code": "#define T(u)    texelFetch(iChannel0, ivec2(u), 0)\n#define s(v,e)  smoothstep(.5,.45,v+e)\n#define line    m += (1.-m)* step(abs(F.y),E) * step(-E,F.x) // segment\n#define E .1                                            // pipe thickness\n#define rot     F = vec2(F.y,-F.x)\n#define delay   15.                                     // more = unconnected\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float S = T(0).z,                                   // grid size\n          t = T(0).w,                                   // current timestamp\n          m = 0., g;\n    U *= (S+2.)/iResolution.y; U.x -= 3.;               // cell id\n    float V = U.x<0. ? -1. : T(U).x;                    // cell content\n    if (U.x<=1.||U.y<=1.||U.x>=S+1.||U.y>=S+1.){        // out of grid\n        V = T(0).x; \n        O = V==-1. ? vec4(.82)                          // grey\n            :  .5 + .5 * cos( V + vec4(0,2.1,-2.1,0) ); // if end of game: flash\n        return;\n    }\n    vec2 F = fract(U)-.5;\n    g = step(.5-E/4.,abs(max(abs(F.x),abs(F.y))));      // draw grid\n              \n                                                        // --- draw content\n    t -= T(U).z+delay;                                  // connected if dt<15\n    if (V==1.) { m += s(length(F),E+E);                 // A disk\n                 if (t>0.) g -= s(length(F),.35); }     // poles connected\n    if (V>100.) m += s(length(F),E);                    // D disk\n    V = mod(V,100.);\n    int a = int(T(U).y)%4;                              // cell angle\n    if (a>1) F = -F;\n    if (a%2==1) rot;                                    // F point to angle\n    if (V == 1.)   line;                                // A arrival half-line\n    if (V == 2.) { line; F = -F; line; }                // I line\n    if (V == 3.) { line; rot; line;        }            // L turn\n    if (V == 4.) { line; rot; line; rot; line; }        // T branch  \n   \n    O = vec4(m);\n    O.gb -= .03*(t);\n    //O.gb *= sin(T(U).z);\n    O = clamp(O,0.,1.);\n    O += g;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define t(u)        texelFetch(iChannel0, ivec2(u), 0)\n#define pos(n)      ( u == ivec2(n) )\n#define rot         F = -ivec2(F.y,-F.x)\n#define delay   20.                                      // more = unconnected (no longer used)\n                                                         // building language\n#define init        i=0, j=S; (0\n#define end         );\n#define set(v)      ); i++; if(i>S) j--,i=1; if pos(vec2(i,j)) O.xy=vec2(v,\n#define D(n)        set(100+n)                           // Departure: source \n#define A           set(1)                               // Arrival. 1 segment\n#define I           set(2)                               // I: line\n#define L           set(3)                               // L: turn\n#define T           set(4)                               // T: branch\n\nfloat pull(ivec2 c0, ivec2 c1) { // propagate timestamp if c1 back-link to c0\n    ivec2 F = ivec2(1,0);\n    int V = int(t(c1).x) % 100,                          // c1 content\n        a = int(t(c1).y)%4;                              // c1 angle\n    if (a>1) F = -F;\n    if (a%2==1) rot;                                     // F point to angle\n    bool ok = c1+F==c0;                                  // test 1st branch\n    if (V==2 || V == 4) ok = ok || c1-F==c0;             // I or T last branch\n    rot; \n    if (V==3 || V == 4) ok = ok || c1+F==c0;             // L or T 2nd branch\n    return ok ? t(c1).z : 0.;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 u = ivec2(U), m;\n    if (t(0).z == 0.) {                                  // restart game\n        int i,j,S, g = int(t(0).y) + 0 ;                 // + N to start at level N-1\n        O -= O;\n        if (g == 0) {                                    // game #1\n            S=6;                                         // 6x6 \n            init\n            A 0  L 1  T 3  I 0  I 0  L 3\n           D(3)2 L 3  T 0  I 1  A 3  I 1\n            L 0  T 3  T 1  I 1  L 3  A 3\n            A 3  T 2  I 1  A 1  L 2  L 1\n            L 0  T 1  I 0  I 0  A 1  A 3\n            L 1  I 1  I 0  I 0  I 0  A 3\n            end\n        } \n        else if (g == 1) {                               // game #2\n            S=8;                                         // 8x8 \n            init\n            A 2  A 0  A 1  A 0  A 0  A 0  A 2  A 1\n            I 0  I 0  I 1  I 1  I 0  I 0  I 1  I 0\n            I 1  I 0  I 1  I 0  T 0  L 2  T 0  L 3\n            L 2  T 1  T 2  T 0  I 1  A 0  I 1  A 0\n            A 1  A 2  I 0  T 2  T 3  I 1  I 0  I 1\n            I 0  A 1  L 1  A 2  I 1  L 3  T 2  I 1\n            I 0  A 2  T 3  L 2  T 2  A 2  T 2  T 2\n            L 3  I 0  T 1  I 1  T 3  T 3 D(3)0 A 2\n            end\n        } \n        else  g = S = 0; \n        if (u.x==0||u.y==0||u.x==S+1||u.y==S+1) O.x--;   // walls\n                                                         // --- global flags\n        if pos(0) O.yzw = vec3(g,S,99.);                 // store game, size\n        return;\n    }\n    \n    O = t(u);                                            // previous cell state\n    float V,v, S = t(0).z; int s=int(S)+1;               // grid size\n \n\n    v = 1.;                                              // --- finished ? \n    for (int j=1; j<s; j++)\n        for (int i=1; i<s; i++) {                        \n            ivec2 p = ivec2(i,j); vec4 C = t(p);\n/**/  // Loosely compare emit vs received timestamp, but this is unsafe.\n            if ( C.x == 1. && t(0).w-C.z > delay ) v=0.; // detect unconnected plugs\n/**/  // Check if all is connected. Is there a cheaper  way ?\n            ivec2 F = ivec2(1,0);\n            V = mod(C.x,100.);                           // cell content\n            int a = int(C.y)%4;                          // cell angle\n            if (a>1) F = -F;\n            if (a%2==1) rot;                             // F point to angle\n            v *= pull(p,p+F);                            // pull 1st branch\n            if (V==2.||V==4.) v *= pull(p,p-F);          // I or T: pull last branch\n            rot;\n            if (V==3.||V==4.) v *= pull(p,p+F);          // L or T: pull 2nd branch\n            v = sign(v);                                 // t^64 could overflow\n/**/            \n        }\n    if (v>0.) {                                          //    win !\n        if (O.x<0.) O.x--;                               // flash during 135 frames\n        if (pos(0) && O.x<-135.) O.y++, O.z = 0.;        // next game\n        return;                                          // ( important... but droped by linux compiler )\n    }\n\n    if (max(U.x,U.y)>S+1.) return;                       // out of grid\n\n    if pos(0) O.w++;  // ref timestamp                   // --- test connectivity with timestamps\n    if ( O.x > 0.) {\n        if (O.x>100.) O.z=t(0).w;                        // timestamp source\n        else {                    // propagate timestamp if reciprocal connections valid\n            ivec2 F = ivec2(1,0);\n            V = O.x;                                     // cell content\n            int a = int(O.y)%4;                          // cell angle\n            if (a>1) F = -F;\n            if (a%2==1) rot;                             // F point to angle\n            v = max(0., pull(u,u+F));                    // pull 1st branch\n            if (V==2.||V==4.) v = max(v, pull(u,u-F));   // I or T: pull last branch\n            rot;\n            if (V==3.||V==4.) v = max(v, pull(u,u+F));   // L or T: pull 2nd branch\n            O.z = v;                                     // new timestamp\n        }\n    }\n                                                         // --- mouse \n    m = ivec2(iMouse.xy*(S+2.)/iResolution.y); m.x -= 3; // cell id under mouse\n \n    if (iMouse.z>0.) {                                   // on click\n        if ( pos(m) && t(1).w==0.) O.y++;                // turn\n        if   pos(1) O.w=1.;                              // only once per click\n    }\n    else if pos(1) O.w=0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}