{
    "Shader": {
        "info": {
            "date": "1493228834",
            "description": "Display alternatively:\n- mean +- std-dev\n- correlation with central value. ",
            "flags": 32,
            "hasliked": 0,
            "id": "4sScRd",
            "likes": 1,
            "name": "video statistics",
            "published": 3,
            "tags": [
                "correlation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 747
        },
        "renderpass": [
            {
                "code": "// recycling https://www.shadertoy.com/view/4dByzc\n\n//#define P0 (20.*(.5+vec2(13,11))) // reference location\n#define P0 (iResolution.x > 400. ? 20.*(.5+vec2(13,11)) : 20.*(.5+vec2(5)) ) // reference location\n\n\n// --- fonts from https://www.shadertoy.com/view/llySRh\n\nvec4 char(vec2 p, int c) { // access to the image of ascii code c\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\n\nvec4 pInt(vec2 p, float n) { //  display int4\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /= 10.,\n        v += char(p - vec2(.5*i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n#define C(c) U.x-=.5; O+= char(U,64+c).xxxx\n\n// --- display stats\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n         O = texelFetch(iChannel0, ivec2(U),0);      // E(P), E(P²), E(P.P0)\n    vec4 P = texelFetch(iChannel0, ivec2(P0),0);     // E(P0), E(P0²)\n    float N = float(iFrame),\n          EX = O.r/N, EY = P.r/N, EX2 = O.g/N, EY2 = P.g/N, EXY = O.b/N,\n          VX = EX2-EX*EX, VY = EY2-EY*EY,\n          c = (EXY-EX*EY)/sqrt(VX*VY);\n\n    \n    float t = floor(mod(.5*iTime,2.));\n    O = (t==0.) ? EX + sqrt(VX) * vec4(1,0,-1,0)\n                : EX + c * vec4(1,0,-1,0);\n    \n    vec2 R = iResolution.xy, V=U;\n    V.x -= R.x-.5*R.y;  V/= .25*R.y;                 // video inset\n    if (V.x > 0. && V.y < 1.) \n        O = texelFetch(iChannel1, ivec2(iResolution.y*V),0);\n\n    U = (U/iResolution.y-vec2(.1,.02))*16.;\n    O += pInt( U, N).r;                              // display number of samples\n    U.x -= 3.; C(13);C(5);C(1);C(14); C(-32);C(113);C(-32);\n    if (t==0.) { C(19);C(20);C(4);C(4);C(5);C(22); }\n    else       { C(3);C(15);C(18);C(18);C(5);C(12);}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    O = texture(iChannel0, U/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- computes moments, and commoment with location P0\n\n//#define P0 (20.*(.5+vec2(13,11))) // reference location\n#define P0 (iResolution.x > 400. ? 20.*(.5+vec2(13,11)) : 20.*(.5+vec2(5)) ) // reference location\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O = texelFetch(iChannel0, ivec2(U),0);\n\n    float v1 = texelFetch(iChannel1, ivec2(U),0).r,\n          v0 = texelFetch(iChannel1, ivec2(P0),0).r;\n    O.r += v1;\n    O.g += v1*v1;\n    O.b += v1*v0;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}