{
    "Shader": {
        "info": {
            "date": "1496939696",
            "description": "Computes BufA autocorrelation using Fourier transform. red/blue for negative/positive\n\nC to show spectrum\nmouse to set the autocorrelation center (by default it is at the middle)",
            "flags": 48,
            "hasliked": 0,
            "id": "lsXfRj",
            "likes": 7,
            "name": "image autocorrelation (w Fourier",
            "published": 3,
            "tags": [
                "fft",
                "dft",
                "autocorrelation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1031
        },
        "renderpass": [
            {
                "code": "// Compute autocorrelation of BufA using FFT based on https://www.shadertoy.com/view/4s3GDs\n\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n\n\n//Display modes\n#define MAGNITUDE 0.\n#define PHASE 1.\n#define COMPONENT 2.\n\nfloat DISPLAY_MODE = MAGNITUDE;\n\n//Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nvec4 rainbow(float x)  { return .5 + .5 * cos(6.2832*(x - vec4(0,1,2,0)/3.)); }\nvec4 rainbow(vec2 C)   { return rainbow(atan(C.y,C.x)/3.1416 + .5); }\n\nvec4 paintDFT(vec2 F) {\n  if (DISPLAY_MODE == MAGNITUDE)\n     #if MAG_SCALE == LOG\n        return vec4( log(length(F)) / log(SIZE*SIZE) );\n     #elif MAG_SCALE == LINEAR\n        return vec4( length(F) / SIZE );\n     #endif\n\n    else if ( DISPLAY_MODE == PHASE )     return rainbow(F);        \n    else /* if ( DISPLAY_MODE == COMPONENT ) */ return vec4(.5 + .5*F/SIZE, 0,0);        \n}\n\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    vec2 R = iResolution.xy, U=uv;\n        \n    vec2 pixel = ( uv - iResolution.xy/2.) / SIZE  + vec2(2,1)/2.,\n         tile  = floor(pixel),\n         stile = floor(mod(2.*pixel,2.)),\n         mouse = ( iMouse.xy - iResolution.xy/2.) / SIZE  + vec2(2,1)/2.;\n         uv = fract(pixel) * SIZE / R ;\n    mouse = fract(mouse);\n    if (length(iMouse.xy)<10.) mouse=vec2(.5);\n\t\n    float MODE = texture(iChannel3,vec2(1.5,.5)/R).w ; // C toggle\n    O-=O;\n    \n    DISPLAY_MODE = floor(texture(iChannel3, .5/R).w); // persistant key flag.\n    if (tile.y==-1. && abs(tile.x-.5)<1.) {   // buttons displaying current flags value\n        for (float i=0.; i<3.; i++) \n            O += smoothstep(.005,.0,abs(length(uv*R/SIZE-vec2(.2+i/7.,.97))-.025));\n        float v = DISPLAY_MODE;\n        O.b += smoothstep(.03,.02,length(uv*R/SIZE-vec2(.2+v/7.,.97)));\n    }\n    \n    if(tile == vec2(0,0))  //Input + DFT (Left)\n        if (stile == vec2(0) && MODE>0.)\n             O += paintDFT(texture(iChannel1, 2.*uv).xy);      // initial spectrum\n        else O += texture(iChannel0, uv).x;                    // initial texture\n\n    if(tile == vec2(1,0))  // Output +DFT (Right)\n        if (stile == vec2(0)  && MODE>0.)\n             O += paintDFT(texture(iChannel3, 2.*uv).xy);      // final spectrum\n        else  uv = fract(uv*R/SIZE-mouse)*SIZE/R,              // mouse offset\n              O += texture(iChannel2, uv).x                    // final texture\n                    *4e2/(SIZE*SIZE)*vec4(-1,0,1,0);       \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// choose your texture or generate your image here\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n#define T(U)  length(texture(iChannel0, U).rgb)/1.7\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n\tvec2 R = iResolution.xy;\n    O -= O;\n    U /= SIZE;\n    if (fract(U)==U) O = vec4( T(U) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fourier transform of the input\n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = tex(iChannel0, n+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, n+.5).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE/2.) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// R = FFT⁻1( module^2(image) ) -> here we compute module^2(image)\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\nbool keyPress(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.); }\nbool keyToggle(int ascii) {return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.75)).x > 0.); }\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 T = texture(iChannel0, U / iResolution.xy).xy;\n    U -= .5;\n    vec2 X = 2.*U/SIZE - 1.;\n    float l = length(X), s = sign(-X.x), y = iMouse.y/iResolution.y;\n\n    T = vec2(dot(T,T));                   // for autocorrelation, square of the module\n\tif (l<1e-5) T*=0.;                    // cancels DC since the input was not centered\n    O = vec4(T,0,0);\n \n    \n    if ( U==vec2(0)) {\n        O.w = texture(iChannel1,U/iResolution.xy).w;\n        if ( keyPress(32) ) O.w = mod(O.w+.1, 3.) ;  // persistant key flag\n    }\n    if ( U==vec2(1,0)) O.w = float(keyToggle(64+3)); // key C state\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// invFourier transform \n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } \n#define W(uv)   mod(uv+SIZE/2.,SIZE)                    // wrap [-1/2,1/2] to [0,1]\n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n\n    for(float n = 0.; n < SIZE; n++)  {\n        float m = W(n);       // W to warp 0,0 to mid-window.\n        vec2 xn = tex(iChannel0, m+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, m+.5).zw,\n             a =  6.2831853 *  (uv-.5) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    O /= SIZE;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}