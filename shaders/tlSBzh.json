{
    "Shader": {
        "info": {
            "date": "1598288157",
            "description": "IcosSym by https://www.shadertoy.com/view/MdXfWS",
            "flags": 0,
            "hasliked": 0,
            "id": "tlSBzh",
            "likes": 8,
            "name": "Icosahedron experiments",
            "published": 3,
            "tags": [
                "geometry"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON 0.0001\n#define PI 3.14159265\n#define RAY 1.\n#define BLUE 2.\n#define BLACK 3.\n#define BG 4.\n\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n} // TODO replace with Rot\n\nfloat sdSphere(vec3 p, float radius) { return length(p) - radius; }\nfloat sdBox( vec3 p, vec3 b ) { vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0); }\nfloat rnd( float x ) { return fract(10000. * sin(x * 1000.));}\n\nfloat sdTorus(vec3 p, float smallRadius, float largeRadius) {\n    return length(vec2(length(p.xz) - largeRadius, p.y)) - smallRadius;\n}\n\n\nvec3 IcosSym (vec3 p)\n{\n  float dihedIcos = 0.5 * acos (sqrt (5.) / 3.);\n  float a, w;\n  w = 2. * PI / 3.;\n  p.z = abs (p.z);\n  p.yz = Rot2D (p.yz, - dihedIcos);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 4; k ++) {\n    p.zy = Rot2D (p.zy, - dihedIcos);\n    p.y = - abs (p.y);\n    p.zy = Rot2D (p.zy, dihedIcos);\n    if (k < 3) p.xy = Rot2D (p.xy, - w);\n  }\n  p.z = - p.z;\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.x -= 2. * p.x * step (0., p.x);\n  return p;\n}\n\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nfloat rayTexSpeed = 0.2;\n\nvec2 getDist(vec3 p) {\n    \n    \n       float rayLen = 0.8;\n    float ballScale = 1.;\n    float sphereSize = 0.5;\n    float sphereShift = sin(iTime * 5.);\n     float boxRotation = .5 + .5 * sin(iTime) - 1.;\n    float boxGlitch = 0.1;\n    float rayAmp = 0.3;\n    float rayFreq = 2.5;\n\n  vec3 pplan = p;\n  pplan.x += iTime * 40.;\n  pplan.z -=  pow((sin(pplan.x) + sin(pplan.y)) / 2., 50.) * 10.;\n    vec2 plane = vec2(pplan.z + 50., BG);\n    plane.x *= 0.1;\n\n  p.xz *= Rot(iTime / 2.);\n  p = IcosSym (p);\n\n  vec3 psph = p / ballScale;\n  psph.z += 1.;\n  psph.x += .8 * (.5 + .5 * sphereShift) * sin(PI / 3.);\n  psph.y -= .8 * (.5 + .5 * sphereShift) * sin(PI / 6.);\n  vec2 sph = vec2((length(psph) - sphereSize) * ballScale, BLUE);\n\n  vec3 pbox = p * 2. / ballScale;\n  pbox.yx *= Rot(PI / 4.);\n  pbox.xz *= Rot(PI / 4.);\n  pbox.x += boxRotation;\n  vec2 box = vec2(sdBox(pbox, vec3(2)) * ballScale / 2., BLACK);\n  box.x += boxGlitch * rnd(pbox.x + pbox.y + iTime);\n    \n\nvec3 pray = p / rayLen;\n      pray.x += .8 * (.5 + .5 * sphereShift) * sin(PI / 3.);\n      pray.y -= .8 * (.5 + .5 * sphereShift) * sin(PI / 6.);\n    pray.xy *= Rot(pray.z * rayFreq);\n    pray.x += rayAmp;\n    //vec2 ray = vec2(length(pray.xy) - .015 * (.2 + .5 * sin(pray.z + iTime * 10.)), BLUE);\n\tvec2 ray = vec2(sdBox(pray, vec2(0.1 * (.5 + .5 * rayLen) + 0.02 * pray.z, 10.).xxy) * rayLen / 2., RAY);\n\n    vec2 res = sph.x < box.x ? sph : box;\n    res = res.x < ray.x ? res : ray;\n    res = res.x < plane.x ? res : plane;\n    return res;\n}\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\n\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    float info = 0.;\n    //float glow = 0.;\n    float minAngleToObstacle = 1e10;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d);\n        minAngleToObstacle = min(minAngleToObstacle, atan(distToClosest.x, d));\n        d += distToClosest.x;\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec3(d, info, minAngleToObstacle);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p).x - vec3(getDist(p - e.xyy).x,\n                               getDist(p - e.yxy).x,\n                               getDist(p - e.yyx).x);\n\treturn normalize(n);\n}\n\n\n\nvec3 getRayDirection (vec3 ro, vec2 uv, vec3 lookAt) {\n    vec3 rd;\n    rd = normalize(vec3(uv - vec2(0, 0.), 1.));\n    vec3 lookTo = lookAt - ro;\n    float horizAngle = acos(dot(lookTo.xz, rd.xz) / length(lookTo.xz) * length(rd.xz));\n    rd.xz *= Rot(horizAngle);\n    return rd;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // ray origin\n    vec3 ro = vec3(EPSILON, 0.01 * sin(iTime), 6.0001);\n    float zoom = 1.100;\n\n    // ray direction\n    vec3 rd = getRayDir(uv, ro, vec3(0), 1.);\n\n    vec3 rm = rayMarch(ro, rd);\n    float d = rm[0];\n    float info = rm[1];\n\n    float color_bw = 0.;\n    vec3 colorBg = vec3(length(0.5 + 0.5 * sin(uv * 40. + vec2(-iTime * 50., 0)))) * 0.2 + 0.2;\n    vec3 color = vec3(0);\n    vec3 light = vec3(50, 20, 50);\n    //light.xz *= Rot(iTime);\n    vec3 p = ro + rd * d;\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        //n.zy *= Rot(iTime);\n    \t//color = vec3( n + 1.0 );\n        //color *= info;\n        // vec3 tex = boxmap(u_tex_bg, ro + rd * d, n, 32.0 ).xyz;//\n        // self shadeing\n        color_bw = .5 + .5 * dot(n, normalize(light - p));\n        // drop shadeos\n        // trying to raymarch to the light for MAX_DIST\n        // and if we hit something, it's shadow\n        vec3 dirToLight = normalize(light - p);\n        vec3 rayMarchLight = rayMarch(p + dirToLight * .5, dirToLight);\n        float distToObstable = rayMarchLight.x;\n        float distToLight = length(light - p);\n        // if (distToObstable < distToLight) {\n        //     color_bw =  0.;\n        // }\n\n        // smooth shadows\n        //float shadow = smoothstep(0.0, .1, rayMarchLight.z / PI);\n        //color_bw *= .5 + .5 * shadow;\n\n\n        // tex *= color_bw;\n        // color = tex;\n    }\n    color += 0.6 + vec3( color_bw );\n    // coloring\n    if (info == RAY) {\n        color *= vec3(fract(length(p * 10.) - iTime * 10. * rayTexSpeed));\n    }\n    else if (info == BLUE) {\n        color *= vec3(0.810,0.256,0.397);\n    }\n    else if (info == BLACK) {\n        color *= vec3(0.130,0.130,0.130);\n    }\n    else if (info == BG) {\n        color *= vec3(0.230,0.230,0.230);\n    }\n    color = mix(color, colorBg, smoothstep(150., 158., d));\n\n\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}