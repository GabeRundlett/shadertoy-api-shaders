{
    "Shader": {
        "info": {
            "date": "1582208977",
            "description": "some inversion stuff",
            "flags": 32,
            "hasliked": 0,
            "id": "3lVSz1",
            "likes": 16,
            "name": "Day 63",
            "published": 3,
            "tags": [
                "inversion",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 61\" by jeyko. https://shadertoy.com/view/WlKXRR\n// 2020-02-20 13:48:59\n\n// thanks to mla and Kali!\n// They have super nice examples on inversion\n\n// it's really simple, basically\n// p /= dot(p,p);\n// p = sin(p);\n// SDFs\n// return distance*dot(p,p);\n\n\n// and ofc Inigo quilez for pallete!\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor += texture(iChannel0, fragCoord/iResolution.xy, 6.)*0.3;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    return normalize(dir + right*uv.x + up * uv.y);\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\n#define mx (iTime*0. + 20.*iMouse.x/iResolution.x)\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define T (iTime*0.125)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define pal(a,b,c,d,e) (a + b*cos(tau*(c*d + e)))\n\nvec3 pA = vec3(0);\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\t\n    vec3 q = p;\n    \n\n    float sc = 3.4 - sin(iTime*0.5)*2. ;\n    float dp = dot(p,p);\n    p /= dp;\n    p*= sc;\n    p=sin(p+vec3(-T*tau*2.2,1.4 - 1.*T*tau,.1 + T*tau*3. + sin(T*tau)*1.5));\n    pA = p;\n    d.x = 0.;\n    d.x = length(p) - 0.7 + length(q)*0.3;\n    d.x *= 0.5;\n\treturn d*dp/sc;\n}\n\nvec3 glow = vec3(0);\nvec2 trace(vec3 ro, vec3 rd,inout vec3 p,inout float t, inout bool hit){\n\tvec2 d = vec2(10e6);\n\tt = 0.; hit = false; p = ro;\n    \n    for(int i = 0; i < 170; i++){\n    \td = map(p);\n        glow += exp(-d.x*90.);\n        if(d.x < 0.0001){\n        \thit = true;\n            break;\n        }\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 t = vec2(0.001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    col += vec3(0.04,0.1,0.3)*0.02;\n    \n    col -= vec3(0.01,0.07,0.3)*length(uv)*0.03;\n    uv *= 1. + dot(uv,uv)*0.24;\n    vec3 ro = vec3(0.6,0.,1.)*0.9;\n\n    \n    //ro.x += sin(iTime)*0.1;\n    ro.z += 0.5-sin(iTime*0.5)*0.3;\n    vec3 lookAt = vec3(0.);\n    vec3 rd = getRd(ro, lookAt, uv);\n    rd.xy *= rot(sin(iTime*0.5)*0.6);\n    rd.xz *= rot(sin(iTime*0.75)*0.2);\n    vec3 p; float t; bool hit;\n    vec2 d = trace(ro, rd, p, t, hit);\n    \n    if(hit){\n        vec3 pAA = pA;\n        float modD = 0.1;\n        float id = floor(pA.x/modD);\n        pA = pmod(pA, modD);\n        //col += pal(0.,vec3(0.7,0.8 ,0.8)*1., vec3(3.1,9.5,4.1 ), 1.5, id*1.2 + pAA.z*0.9 + pAA.y*0.9 + iTime*0.92)*1.;\n        vec3 balls = pal(0.5,vec3(0.6,0.4 ,0.8)*1., vec3(3.1,9.5,4.1 ), 1.5, id*1.2 + pAA.z*0.9 + pAA.y*0.1 + iTime*0.52 )*1.;\n    \tballs = mix(balls, 1. - balls,0. + 1.*pow(abs(uv.x)*0.55,2.9)*4.5);\n        col += balls;\n        col *= step(abs(sin(id*20.))*1., 0.7);\n        col -= exp((abs(pA.x) - modD*0.5)*100.);\n\n        col -= exp(-length(p)*15.)*10.;\n        //col += 0.1;\n        //col += smoothstep(0.01,0., length(pA.x) - modD*0.175);\n    \tcol -= glow*0.025;\n    }\n    \n    col = clamp(col, 0., 1.);\n\n    col *= 1.1;\n    col = pow(col, vec3(0.45));\n    col *= 1. + 1.*pow(abs(uv.x)*0.55,2.9)*3.5;\n    col *= 1. - 1.*pow(abs(uv.y)*1.0,2.9)*0.5;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}