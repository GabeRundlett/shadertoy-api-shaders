{
    "Shader": {
        "info": {
            "date": "1578113425",
            "description": "Year after year it goes around.",
            "flags": 40,
            "hasliked": 0,
            "id": "WlK3RR",
            "likes": 6,
            "name": "Lost Satellite Orbit",
            "published": 3,
            "tags": [
                "3d",
                "sound",
                "space",
                "postprocess",
                "stars",
                "buffer",
                "gpusound"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 562
        },
        "renderpass": [
            {
                "code": "// Plento\nvec3 t(vec2 p){\n \treturn texelFetch(iChannel0, ivec2(p),0).xyz;   \n}\n\n// Give the stars some twinklyness and it also doubled as an aa blur thingy sorta.\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec3 acc = vec3(0);\n    \n    for(float i = -8.; i < 8. ;i++){\n     \tacc += t(u+vec2(0.,i));\n        acc += t(u+vec2(i,0.));\n    }\n    acc = max(acc, .1);\n    acc/=35.;\n    f = 1.-exp(-vec4((acc + t(u))/2., 1.));\n    \n    //f = vec4(t(u), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 R;\nconst float pi = 3.14159;\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// 3D simplex noise stuff from: https://www.shadertoy.com/view/XsX3zB\nconst float F3 =  .3333333;\nconst float G3 =  .1666667;\nvec3 random3(vec3 c) {\n\tfloat j = 4096.*sin(dot(c,vec3(17., 59.4, 15.)));\n\tvec3 r;\n\tr.z = fract(512.*j);\n\tj *= .125;\n\tr.x = fract(512.*j);\n\tj *= .125;\n\tr.y = fract(512.*j);\n\treturn r-.5;\n}\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t vec3 e = step(vec3(0.), x - x.yzx);\n\t vec3 i1 = e*(1. - e.zxy);\n\t vec3 i2 = 1. - e.zxy*(1. - e);\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.*G3;\n\t vec3 x3 = x - 1. + 3.*G3;\n\t vec4 w, d;\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t w = max(.6 - w, 0.);\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.), x3);\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t return dot(d, vec4(52.));\n}\n\n// Sdf stuff\nfloat Box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,.0)) + min(max(q.x,max(q.y,q.z)),.0);\n}\nfloat Cylinder( vec3 p, float h, float r ){\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),.0) + length(max(d,.0));\n}\n\n// Satellite\nfloat sat(vec3 rp){  \n    float body=99., wings = 99., sr = .6;\n    \n    vec3 pan = vec3(1.5,.6,.025);\n \tvec3 p0 = rp - vec3(1.7+sr, .4, 6.5);\n    vec3 p1 = rp - vec3(0, .4, 6.5);\n    vec3 p2 = rp - vec3(0, 1.1, 6.5); \n    vec3 p3 = rp - vec3(0, .5, 6.5); \n    \n    p3.xy*=rot(pi/2.);\n    p0.yz*=rot(.5);\n    p1.yz*=rot(-.5);\n    p2.yz*=rot(-.5);\n    \n    for(float i = 0.; i < 2.;i++){\n    \twings = min(wings,Box(p0, pan));\n        p0.x+=(pan.x*2.+sr*2.)*1.1;\n    }\n    \n    body = min(body, Cylinder(p1, sr, 1.1));\n    body = max(-Cylinder(p2, sr+.25, .25), body);\n    body = min(body, Cylinder(p1, sr-.25, 1.3));\n    body = min(body, Cylinder(p3, .05, 1.3));\n    \n    return min(wings, body);\n}\n\n\nfloat map(vec3 rp){\n \tvec3 p = rp - vec3(-iTime-8., .0, 18.);\n    vec3 b = vec3(50.,0.,0.);\n    p = mod(p, b)-b*.5;  \n    p.xy*=rot(iTime);\n    \n    return sat(p);\n}\n\nfloat trace(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0.;   \n    \n    for(int i = 0; i < 32; i++){\n    \td = map(ro + rd*t); \t   \n        \n        if(abs(d) < .006){break;}\n        t += d * .95;\n    }   \n    return t;\n}\n\n// stars and star\nvec3 cm(vec3 rd){\n    float star = smoothstep(.55,.96, simplex3d(rd*150.))*2.;\n    vec3 sun = vec3(.83, .4, .0)*exp(-rd.y*9.)*.2;\n    return sun + star;\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - .5*R.xy)/R.y;\n    vec3 ro = vec3(0), d = normalize(vec3(uv, 1.));\n    \n    d.yz *= rot(1.-exp(-.6*iTime) - 1.0); // initial camera movement\n    \n    f = vec4(mix( vec3(0), cm(d), step(35., trace(d, ro)) ), 1.);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float pi2 = 6.28318;\nconst float c = 32.03;\nfloat osc(float t, float hz){return sin(t*hz*pi2);}\n\nvec2 EndOfWorld(float t){\n    \n    float stp = c * -6.;\n    float f = floor(mod(1.+t*.66,2.));\n    float ow = 0.;\n    \n    ow = f*792.;\n    ow += (1.-f)*392.;\n    \n    vec2 wave = vec2(osc(t, 261.63 + stp), osc(t, 262.63 + stp))\n        + vec2(osc(t, 329.63 + stp), osc(t, 330.63 + stp))\n        + vec2(osc(t, ow + stp), osc(t, 393. + stp));\n    \n    wave /= 3.;\n    wave = clamp(wave, vec2(-.5), vec2(.5));\n    \n    return wave;\n}\n\nvec2 mainSound( in int samp, float time ){\n    time = mod(time, 28.);\n    return EndOfWorld(time) * (1.-exp(-time*.2)) * .2; // fade in;\n    return vec2(0);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}