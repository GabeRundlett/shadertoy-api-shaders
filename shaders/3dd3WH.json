{
    "Shader": {
        "info": {
            "date": "1568390879",
            "description": "Implementation of \"Generalized Barycentric Coordinates on Irregular Polygons\" by Meyer et al. http://geometry.caltech.edu/pubs/MHBD02.pdf\n\nTo calculate the weights for a point wrt polygon corners.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dd3WH",
            "likes": 7,
            "name": "Barycentric coords on polygons",
            "published": 3,
            "tags": [
                "math",
                "polygon",
                "coordinates"
            ],
            "usePreview": 1,
            "username": "kig",
            "viewed": 673
        },
        "renderpass": [
            {
                "code": "/*\nGeneralized Barycentric Coordinates on Irregular Polygons\n\nhttp://geometry.caltech.edu/pubs/MHBD02.pdf\n*/\n\n#define N 4\n\nfloat cross2d(vec3 a, vec3 b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nbool rayIntersectsLineSegment(vec3 rayOrigin, vec3 rayDirection, vec3 point1, vec3 point2) {\n    vec3 v1 = rayOrigin - point1;\n    vec3 v2 = point2 - point1;\n    vec3 v3 = vec3(-rayDirection.y, rayDirection.x, 0.0);\n\n    float d = dot(v2, v3);\n    if (abs(d) < 0.000001)\n        return false;\n\n    float t1 = cross2d(v2, v1) / d;\n    float t2 = dot(v1, v3) / d;\n\n    if (t1 >= 0.0 && (t2 >= 0.0 && t2 <= 1.0))\n        return true;\n\n    return false;\n}\n\nbool insidePolygon(vec3 p, vec3[N] points) {\n\tint intersections = 0;    \n    vec3 d = vec3(1.0, 0.0, 0.0);\n    for (int i = 0; i < N; i++) {\n        if (rayIntersectsLineSegment(p, d, points[i], points[(i+1) % N])) {\n            intersections++;\n        }\n    }\n    return intersections % 2 == 1;\n}\n\nfloat cotangent(vec3 a, vec3 b, vec3 c) {\n    vec3 ba = a - b;\n    vec3 bc = c - b;\n    return dot(bc, ba) / length(cross(bc, ba));\n}\n\nvoid computeBarycentric(vec3 p, vec3[N] points, out float[N] weights) {\n    float weightSum = 0.0;\n    for (int i = 0; i < N; i++) {\n        int prev = (i + N - 1) % N;\n        int next = (i + 1) % N;\n        vec3 pd = p - points[i];\n        float wf = (cotangent(p, points[i], points[prev]) + cotangent(p, points[i], points[next])) / dot(pd, pd);\n        weightSum += wf;\n        weights[i] = wf;\n    }\n    for (int i = 0; i < N; i++) {\n        weights[i] /= weightSum;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3[N] points;\n    points[0] = vec3(-0.2+0.2*cos(1.0*iTime), -0.2, 0.0);\n    points[1] = vec3(0.2, -0.2, 0.0);\n    points[2] = vec3(0.2, 0.2+0.2*sin(2.0*iTime), 0.0);\n    points[3] = vec3(-0.2, 0.2, 0.0);\n    \n    mat3 rot = mat3(cos(iTime), sin(iTime), 0, -sin(iTime), cos(iTime), 0, 0, 0, 1.0);\n    for (int i = 0; i < N; i++) {\n        points[i] = (2.75 + 0.5*sin(iTime)) * (rot * points[i]);\n    }\n    \n    float[N] weights;\n\n    vec2 uv = (2.0 * fragCoord/iResolution.xy - 1.0);\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 col = vec3(1.0);\n\n    computeBarycentric(vec3(uv, 0.0), points, weights);\n        \n    if (insidePolygon(vec3(uv, 0.0), points)) {\n        vec2 texCoord = vec2(\n            vec2(0.0, 0.0) * weights[0] +\n            vec2(1.0, 0.0) * weights[1] +\n            vec2(1.0, 1.0) * weights[2] +\n            vec2(0.0, 1.0) * weights[3]\n        );\n        vec3 ccol = \n            vec3(1.0, 0.0, 0.0) * weights[0] + \n            vec3(0.0, 1.0, 0.0) * weights[1] + \n            vec3(0.0, 0.0, 1.0) * weights[2] + \n            vec3(1.0, 0.0, 1.0) * weights[3];\n        col = mix(texture(iChannel0, texCoord).rgb, ccol, pow(cos(iTime*0.272), 2.0));\n\t    vec2 dg = mod(texCoord, vec2(0.1));\n        if (dg.x < 0.0075 || dg.y < 0.0075) {\n            col = vec3(1.0, 1.0, 1.0);\n        }\n            \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}