{
    "Shader": {
        "info": {
            "date": "1574667890",
            "description": "warping hexagonal mesh with universe within",
            "flags": 0,
            "hasliked": 0,
            "id": "wdGSD1",
            "likes": 15,
            "name": "HexMatrixUniverse_Aelfcraeft",
            "published": 3,
            "tags": [
                "hexuniverse"
            ],
            "usePreview": 0,
            "username": "XiaoHouzi",
            "viewed": 918
        },
        "renderpass": [
            {
                "code": "#define S(a,b,t) smoothstep(a,b,t)\n\nvec4 Grid(vec2 point, float num)\n{\n    vec2 r = vec2(1, 1.732);\n    vec2 h = r*.5;\n    vec2 uv = point*num;\n    \n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv-h, r) - h;\n    \n    uv = length(a)<length(b)? a:b;\n    vec2 id = floor(point*num);\n    \n    return vec4(uv, id); \n}\n\nfloat Hex(vec2 uv)\n{\n    uv=abs(uv);\n    float c = dot(uv, normalize(vec2(1, 1.732))); \n    c=max(c, uv.x);\n    float d = atan(uv.x, uv.y);\n    \n    return c;\n}\n\nvec2 Polar(vec2 uv)\n{\n    return vec2 (length(uv), atan(uv.x, uv.y)+3.1415);\n}\n\nfloat N21(vec2 p)\n{\n    p=fract(p*vec2(233.34, 851.73));\n    p+=dot(p,p+23.45);\n    return fract(p.x*p.y);\n}\n\nvec2 N22(vec2 p)\n{\n    float n=N21(p);\n    return vec2(n, N21(p+n));\n}\n\nvec2 GetPos(vec2 id, vec2 offs)\n{\n    vec2 n =N22(id+offs)*iTime;\n\n    return offs+sin(n)*.4;\n}\n\nfloat DistLine(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t=clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length(pa-ba*t);\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b)\n{\n    float d = DistLine(p,a,b);\n    float f = 1.-min(length(p-a), length(p-b));\n    float m= S(f*2., .2, d*20.);\n    m *=S(1.2, .8, length(a-b));\n    m *= f*f*f;\n    return m;\n}\n\nfloat Layer(vec2 uv)\n{\n    float m=0.;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n  \n    vec2 p[9];\n    int i=0;\n    for(int x=-1; x<2; x++)\n        for(int y=-1; y<2; y++)\n        {\n            p[i++] = GetPos(id, vec2(x,y));\n        }\n    for(int i=0; i<9; i++)\n    {\n        m+=Line(gv, p[4], p[i]);\n        \n        float j = length(vec2(p[i] - gv)*15.);\n        float spark =1. / dot(dot(j,j), j);\n        m+= spark * sin(iTime+id.x+id.y)*.5;\n    }\n    m+=Line(gv, p[1], p[3]);\n    m+=Line(gv, p[1], p[5]);\n    m+=Line(gv, p[7], p[3]);\n    m+=Line(gv, p[7], p[5]);\n    \n    return m;\n}\n\nvec3 Universe(vec2 uv, float m)\n{\n    if (m>0.) return vec3(0);\n    float t = iTime*.1;\n    mat2 rot = mat2(cos(t), -sin(t), sin(t), cos(t));\n    uv *=rot;\n    \n    for(float i=0.; i<1.; i+= 1./4.)\n    {\n        float z = fract(i+t);\n        float size = mix(10., .5, z);\n        float fade = S(0., .5, z) * S(1., .8, z);\n            \n        m+=Layer(uv*size+i*20.)*fade;\n    }\n    \n    vec3 base = sin(t*vec3(.3, .5, .7))*.2 +.6;\n    return vec3(m*base);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    //uv += iTime/10.;\n\tvec4 coord = Grid(uv, 20.);\n    vec2 st = coord.xy;\n    \n    // c= hex radius\n    float r = length(Hex(st));\n    float index = ((coord.w*3.) + (coord.z*3.))*.06;\n    float d = length(fragCoord - iResolution.xy/2.)/iResolution.y;\n    float r1 = smoothstep(.3+sin(iTime+d*3.)*.1,.4+sin(iTime+d*3.)*.1732 ,r);\n    float r2 = smoothstep(.27+sin(iTime+d*3.)*.1,.37+sin(iTime+d*3.)*.15 ,r);\n    \n    vec3 col = vec3(.0, .3, .4+(sin(iTime*.3+d)*.2))*(.5-r)*step(r1, .5);\n    if (r>r1 && r<r2) col+=vec3(.2);\n    \n    col +=Universe(uv, col.b);    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}