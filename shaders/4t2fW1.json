{
    "Shader": {
        "info": {
            "date": "1515603097",
            "description": "The complete experience - train, viaduct, tunnel, snow .. (mouse: horizontal selects view)",
            "flags": 0,
            "hasliked": 0,
            "id": "4t2fW1",
            "likes": 20,
            "name": "Alpine Express",
            "published": 3,
            "tags": [
                "tunnel",
                "snow",
                "train",
                "mountain",
                "bridge"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 874
        },
        "renderpass": [
            {
                "code": "// \"Alpine Express\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsAnDf (vec3 p, float r, float w, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2s (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_CAR 6\n\nvec4 carStat[N_CAR];\nvec3 qHit, sunDir;\nfloat dstFar, tCur, trCyc, trMov, szFac, trkWid, trkRad, rlWid, rlHt, tunRad, tunUp, vuMode, tunWl;\nint idObj;\nbool doShad;\nconst float pi = 3.14159;\nconst int idRail = 1, idRbase = 2, idSlp = 3, idVia = 4, idTun = 5, idGrnd = 6,\n   idCar = 11, idCon = 12, idWhl = 13, idFLamp = 14, idBLamp = 15;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GroundDf (vec3 p, float r, float dMin)\n{\n  vec3 q;\n  float d, dt, s;\n  q = p;  q.y -= tunUp;\n  dt = length (vec2 (r - trkRad, q.y)) - tunRad;\n  q = p;\n  s = 0.5 * Fbm2s (0.75 * q.xz);\n  q.y -= -1.7 + 0.4 * q.z;\n  d = max (r - 1.6 * trkRad, max (q.y - 0.1 - s, - q.y - 0.1));\n  q = p;  q.yz -= vec2 (7., -0.7 * trkRad);\n  d = SmoothMin (d, PrCapsAnDf (q.xzy, 1.7 * trkRad + 0.5 * q.y - s, 0.1 + s, 4.), 3.);\n  if (vuMode == 0.) d = max (d, - 0.5 * trkRad - q.z);\n  d = max (max (0.7 * d, - dt), q.y - 30.);\n  DMIN (idGrnd);\n  return dMin;\n}\n\nfloat CarDf (vec3 p, float dir, float dMin)\n{\n  vec3 q;\n  float d, dy;\n  p /= szFac;\n  q = p;\n  dy = -0.25 * max (q.z * dir - 0.5, 0.);\n  d = PrRoundBoxDf (q - vec3 (0., dy, 0.), vec3 (0.3, 0.25 + dy, 1.55), 0.4);\n  DMINQ (idCar);\n  q = p;  q.xz = abs (q.xz);  q.z = abs (q.z - 0.9);\n  q -= vec3 (0.35, -0.6, 0.2);\n  d = PrCylDf (q.yzx, 0.16, 0.08);\n  DMINQ (idWhl);\n  q = p;  q.z = (dir == 0.) ? abs (q.z) - 1.8 : q.z + 1.8 * dir;\n  d = PrCylDf (q.xzy, 0.3, 0.5);\n  DMINQ (idCon);\n  if (dir > 0.) {\n    q = p;  q.yz -= vec2 (-0.25, 1.9);\n    d = PrCylDf (q, 0.1, 0.1);\n    DMINQ (idFLamp);\n  } else if (dir < 0.) {\n    q = p;  q.x = abs (q.x) - 0.2;  q.yz -= vec2 (-0.25, -1.9);\n    d = PrCylDf (q, 0.08, 0.1);\n    DMINQ (idBLamp);\n  }\n  return dMin;\n}\n\nfloat TrackDf (vec3 p, float r, float dMin)\n{\n  vec3 q;\n  float d, a;\n  a = (r > 0.) ? atan (p.z, - p.x) / (2. * pi) : 0.;\n  q = p;  q.xz = Rot2D (q.xz, 2. * pi * (floor (80. * a + 0.5) / 80.));\n  q.y -= -5. - 0.6 * rlHt;\n  d = max (max (abs (r - trkRad) - 2. * trkWid, abs (q.y) - 5.),\n     - max (abs (r - trkRad) - 0.7 * trkWid, abs (q.y) - 4.));\n  d = max (d, - min (PrBox2Df (q.zy - vec2 (0., -1.), vec2 (0.5, 5.)),\n     length (q.zy - vec2 (0., 4.)) - 0.5));\n  DMIN (idVia);\n  dMin = max (dMin, - p.y + 0.4 * p.z - 2.5);\n  q = p;  q.y -= tunUp;\n  d = max (abs (length (vec2 (r - trkRad, q.y)) - tunRad) - 0.4 * trkWid,\n     - (p.z - 0.3 * p.y - 2.));\n  DMIN (idTun);\n  q = p;  q.xz = Rot2D (q.xz, 2. * pi * (floor (256. * a + 0.5) / 256.));\n  q.xy -= vec2 (- trkRad, -0.2 * rlHt);\n  d = PrBoxDf (q, vec3 (1.4 * trkWid, 0.5 * rlHt, 0.3 * trkWid));\n  DMIN (idSlp);\n  q = vec3 (r - trkRad, p.yz);  q.y -= -0.4 * rlHt;\n  d = PrBox2Df (q.xy, vec2 (1.6 * trkWid, 0.2 * rlHt));\n  DMIN (idRbase);\n  q = vec3 (abs (r - trkRad) - trkWid, p.yz);  q.y -= 0.7 * rlHt;\n  d = PrRoundBox2Df (q.xy, vec2 (rlWid, rlHt), 0.8 * rlWid);\n  DMIN (idRail);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, r;\n  dMin = dstFar;\n  r = length (p.xz);\n  if (! doShad) dMin = GroundDf (p, r, dMin);\n  dMin = TrackDf (p, r, dMin);\n  dMin /= szFac;\n  for (int k = 0; k < N_CAR; k ++) {\n    q = p - carStat[k].xyz;\n    q.xz = Rot2D (q.xz, carStat[k].w);\n    dMin = CarDf (q, ((k == 0) ? 1. : ((k == N_CAR - 1) ? -1. : 0.)), dMin);\n  }\n  dMin *= szFac;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 SceneCol (vec3 ro)\n{\n  vec4 objCol, carCol;\n  float a, r;\n  r = length (ro.xz);\n  a = (r > 0.) ? atan (ro.z, - ro.x) / (2. * pi) : 0.;\n  carCol = vec4 (0.8, 0.1, 0.1, 0.3);\n  if (idObj == idGrnd) {\n    objCol = vec4 (0.9, 0.9, 0.95, 0.1) * (1. - 0.1 * Fbm2 (4. * ro.xz));\n  } else if (idObj == idVia) {\n    objCol = vec4 (0.7, 0.5, 0.3, 0.1) * (0.6 +\n       0.6 * SmoothBump (0.05, 0.95, 0.02, mod (4. * ro.y, 1.)));\n  } else if (idObj == idTun) {\n    if (tunWl == 0.) {\n      if (abs (r - trkRad) < 0.1 * trkWid && mod (64. * a + 0.5, 1.) < 0.3)\n         objCol = vec4 (0.8, 0.8, 0.4, -1.);\n      else if (length (vec2 (abs (ro.y - tunUp + 0.5 * tunRad),\n         2. * (mod (16. * a + 0.5, 1.) - 0.5))) < 0.02) objCol = vec4 (0., 0.3, 0., -1.);\n      else objCol = vec4 (0.2, 0.15, 0.05, 0.) * (0.5 + 0.5 * SmoothBump (0.02, 0.98, 0.005,\n         mod (128. * a, 1.))) * (0.5 + 0.5 * smoothstep (0.002, 0.003,  abs (ro.y - tunUp +\n         tunRad * (floor (mod (128. * a, 2.)) - 0.5))));\n    } else {\n      if (length (vec2 (abs (r - trkRad) - 0.4 * trkWid, ro.y - tunUp - 1.02 * tunRad)) <\n         0.15 * trkWid) objCol = (ro.x > 0.) ? vec4 (0., 1., 0., -1.) : vec4 (1., 0., 0., -1.);\n      else objCol = mix (vec4 (0.5, 0.35, 0.2, 0.1), vec4 (0.8, 0.8, 0.85, 0.1),\n         step (2.05, ro.z - 0.3 * ro.y) * smoothstep (0., 0.1, ro.y - tunUp -\n         0.3 * tunRad * Fbm1 (8. * ro.z)));\n    }\n  } else if (idObj == idRail) {\n    objCol = vec4 (0.7, 0.7, 0.75, 0.5);\n  } else if (idObj == idRbase) {\n    objCol = vec4 (0.6, 0.4, 0.3, 0.) * (1. - 0.5 * Noisefv2 (128. * ro.xz));\n  } else if (idObj == idSlp) {\n    objCol = vec4 (0.6, 0.6, 0.7, 0.) * (1. - 0.7 * step (abs (abs (r - trkRad) - trkWid),\n       2.5 * rlWid) * step (abs (mod (256. * a + 0.5, 1.) - 0.5), 0.03));\n  } else if (idObj == idCar) {\n    objCol = (abs (qHit.y - 0.22) < 0.26) ? vec4 (0.3, 0.3, 0.5, 0.3) :\n       ((abs (abs (qHit.y - 0.22) - 0.28) < 0.02) ? vec4 (0.5, 0.8, 0.5, 0.3) : carCol);\n  } else if (idObj == idCon) {\n    objCol = carCol;\n  } else if (idObj == idWhl) {\n    objCol = (length (qHit.yz) < 0.07) ? vec4 (0.2, 0.2, 0.2, 0.1) : vec4 (0.6, 0.6, 0.6, 0.5);\n  } else if (idObj == idFLamp) {\n    objCol = (length (qHit.xy) < 0.09) ? vec4 (1., 1., 0.8, -1.) : carCol;\n  } else if (idObj == idBLamp) {\n    objCol = (length (qHit.xy) < 0.07) ? vec4 (1., 0.2, 0., -1.) : carCol;\n  }\n  return objCol;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.2;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.08 * d, h));\n    d += 0.3;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y < 0.02 * Fbm1 (256. * atan (rd.z, rd.x) / pi)) col = vec3 (0.5);\n  else {\n    rd.y = abs (rd.y);\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.05, 0.1, 0.25) + 0.2 * pow (1. - rd.y, 8.) +\n       0.2 * pow (sd, 8.) + 0.4 * min (pow (sd, 256.), 0.3);\n    f = 2. * Fbm2 (0.05 * (ro + rd * (100. - ro.y) / rd.y).xz);\n    col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  }\n  return col;\n}\n\nvec2 TrackPath (float t)\n{\n  return trkRad * vec2 (sin (t), - cos (t));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, ltVec;\n  vec2 rq;\n  float dstObj, d, reflFac, sh, f;\n  doShad = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    tunWl = (idObj == idTun) ? step (tunRad - 0.2 * trkWid,\n       length (vec2 (length (ro.xz) - trkRad, ro.y - tunUp))) : 0.;\n    objCol = SceneCol (ro);\n    if (idObj == idGrnd) vn = VaryNf (vec3 (4., 2., 4.) * ro, vn, 1.);\n    else if (idObj == idRbase || idObj == idSlp || idObj == idVia) vn = VaryNf (64. * ro, vn, 2.);\n    else if (idObj == idTun) vn = VaryNf (8. * ro, vn, 1.);\n    col = objCol.rgb;\n    if (objCol.a >= 0.) {\n      if (ro.z - 0.3 * ro.y > 2. && tunWl == 0. && idObj != idGrnd && idObj != idVia) {\n        if (idObj != idTun && idObj != idCar) col *= 0.4 + 0.3 * max (vn.y, 0.);\n        if (idObj != idCar) {\n          ltVec = vec3 (TrackPath (trMov + 0.3 * szFac), 0.3 * szFac).xzy - ro;\n          f = length (ltVec);\n          col *= 0.3 + (0.7 + 0.5 * max (dot (vn, ltVec), 0.) / f) / (1. + pow (f, 1.5));\n        } else {\n          col *= 0.1 + (0.1 + 0.1 * max (vn.y, 0.)) * (1. - smoothstep (4., 6., dstObj));\n          if (vn.y > 0.85) {\n            rq = ro.xz + (tunRad - 0.1 * trkWid - ro.y) * reflect (rd, vn).xz;\n            if (abs (length (rq) - trkRad) < 0.1 * trkWid && mod (32. *\n               atan (rq.y, rq.x) / pi + 0.5, 1.) < 0.3) col = mix (col, vec3 (0.8, 0.8, 0.4), 0.2);\n          }\n        }\n      } else {\n        reflFac = 0.;\n        if (idObj == idCar) reflFac = (abs (qHit.y - 0.22) < 0.26) ? 0.6 : 0.2;\n        if (idObj == idFLamp || idObj == idBLamp || idObj == idRail) reflFac = 0.2;\n        doShad = true;\n        sh = ObjSShadow (ro, sunDir);\n        doShad = false;\n        col = col * (0.3 + 0.7 * sh * max (dot (vn, sunDir), 0.) +\n           sh * objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n        if (reflFac > 0.) col = mix (col, 0.7 * BgCol (ro, reflect (rd, vn)), reflFac);\n      }\n      if (idObj == idGrnd) col +=\n         256. * pow (clamp (0.5 + 0.5 * dot (sunDir, reflect (rd, vn)), 0., 1.), 16.) *\n         pow (1. - 0.6 * abs (dot (normalize (sunDir - rd), VaryNf (1024. * ro, vn, 2.))), 8.);\n    }\n  } else col = BgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col, vd;\n  vec2 mMid[4], ut[4], mSize, canvas, uv, p1, p2, ori, ca, sa;\n  float el, az, zmFac, t1, t2, r, cGap, vuCorn;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  el = 0.;\n  az = 0.;\n  mSize = 0.23 * vec2 (canvas.x / canvas.y, 1.);\n  mMid[0] = (1. / mSize.y - 1.) * mSize;\n  mMid[1] = mMid[0] * vec2 (1., -1.);\n  mMid[2] = mMid[0] * vec2 (-1., -1.);\n  mMid[3] = mMid[0] * vec2 (-1., 1.);\n  for (int k = 0; k < 4; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  vuCorn = 0.;\n  for (int k = 0; k < 4; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuCorn = float (k + 1);\n      break;\n    }\n  }\n  vuMode = mod (vuCorn + floor (mod (0.2 * tCur, 5.)), 5.);\n  if (mPtr.z > 0.) vuMode = mod (vuCorn + floor (5. * clamp (mPtr.x + 0.5, 0., 0.99)), 5.);\n  dstFar = 100.;\n  szFac = 0.4;\n  trkRad = 20.;\n  trkWid = 0.15;\n  tunRad = 3.3 * trkWid;\n  tunUp = 2.4 * trkWid;\n  rlWid = 0.012;\n  rlHt = 0.025;\n  trMov = 0.2 * tCur;\n  cGap = 0.206 * szFac;\n  for (int n = 0; n < N_CAR; n ++) {\n    p1 = TrackPath (trMov - float (n) * cGap + 0.3 * cGap);\n    p2 = TrackPath (trMov - float (n) * cGap - 0.3 * cGap);\n    carStat[n].xz = 0.5 * (p1 + p2);\n    carStat[n].y = 2.7 * rlHt + 0.75 * szFac;\n    p1 -= p2;\n    carStat[n].w = atan (p1.x, p1.y);\n  }\n  if (vuMode == 0.) {\n    el += 0.05 * pi;\n    zmFac = 4.2;\n  } else if (vuMode == 1. || vuMode == 2. || vuMode == 3.) {\n     if (vuMode == 1.) {\n      t1 = trMov + 0.5 * cGap;\n      t2 = t1 + 1. * cGap;\n    } else if (vuMode == 2.) {\n      t1 = trMov + 1.8 * cGap;\n      t2 = t1 - 1.3 * cGap;\n    } else if (vuMode == 3.) {\n      t1 = trMov - (float (N_CAR - 1) + 1.8) * cGap;\n      t2 = t1 + 1.3 * cGap;\n    }\n    r = 1.;\n    if (vuMode == 2. || vuMode == 3.) r += (1. + 1.2 * sin (0.3 * pi * tCur)) * trkWid / trkRad;\n    ro.xz = r * TrackPath (t1);\n    ro.y = 0.55 + 0.03 * sin (0.1 * pi * tCur);\n    el += 0.02 * pi;\n    vd.xz = TrackPath (t2) - ro.xz;\n    az -= atan (vd.x, vd.z);\n    zmFac = 3.5;\n  }\n  if (vuMode == 4.) {\n    ro = vec3 (0., 2., -30.);\n    vd = normalize (carStat[2].xyz - ro);\n    vd.xz = Rot2D (vd.xz, az);\n    vd.yz = Rot2D (vd.yz, el);\n    vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n       vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n    zmFac = 7. * (atan (length (vd.xz), vd.y) / pi);\n  } else {\n    ori = vec2 (el, az);\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (ca.y, 0., sa.y, 0., 1., 0., - sa.y, 0., ca.y) *\n            mat3 (1., 0., 0., 0., ca.x, sa.x, 0., - sa.x, ca.x);\n    if (vuMode == 0.) ro = vuMat * vec3 (0., 0., -60.);\n  }\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (1., 3., -1.));\n  col = ShowScene (ro, rd);\n  for (int k = 0; k < 4; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = vec3 (0.1, 0.1, 0.8);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsAnDf (vec3 p, float r, float w, float h)\n{\n  p.z = abs (p.z) - h;\n  return max (length (vec3 (p.xy, max (0., p.z - w))) - r,\n     - length (vec3 (p.xy, max (0., p.z + w))) + r) - w;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2s (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.75);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}