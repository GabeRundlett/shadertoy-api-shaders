{
    "Shader": {
        "info": {
            "date": "1727643568",
            "description": "tried to illustrate Brownian motion ",
            "flags": 0,
            "hasliked": 0,
            "id": "lXBcWG",
            "likes": 2,
            "name": "Toxic Brownian motion",
            "published": 3,
            "tags": [
                "brownianmotion"
            ],
            "usePreview": 0,
            "username": "ospanovalen",
            "viewed": 37
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nconst int MAX_STEPS = 200;\nconst float MAX_DIST = 100.0;\nconst float MIN_DIST = 0.001;\nconst float SHADOW_SOFTNESS = 64.0;\nconst float SPECULAR_POWER = 32.0;\nconst float AMBIENT_LIGHT = 0.2;\nconst float BALL_RADIUS = 0.4;\nconst float REFLECTION_STRENGTH = 0.5;\nconst float BALL_SPEED = 0.7;\nconst float BALL_ROTATION_SPEED = 1.2;\n\nvec3 lightPos = vec3(4.0, 6.0, 8.0);\n\nmat3 rotateY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(vec3(c, 0.0, -s), vec3(0.0, 1.0, 0.0), vec3(s, 0.0, c));\n}\n\nmat3 rotateX(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, c, -s), vec3(0.0, s, c));\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nvec3 ballTrajectory(float time, float index) {\n    float jumpHeight = abs(sin(time * BALL_SPEED + index)) * 3.0; // Мяч прыгает\n    return vec3(sin(time * BALL_SPEED + index) * 4.0, jumpHeight, cos(time * BALL_SPEED + index) * 4.0);\n}\n\nfloat sceneSDF(vec3 p) {\n    float time = iTime * BALL_ROTATION_SPEED;\n    float d = MAX_DIST;\n\n    for (int i = 0; i < 5; i++) {\n        vec3 ballPos = ballTrajectory(time, float(i) * 2.0 * PI / 5.0);\n        float ballDist = sdSphere(p - ballPos, BALL_RADIUS);\n        d = opSmoothUnion(d, ballDist, 0.2);\n    }\n    \n    float ground = p.y + 0.4;\n    d = min(d, ground);\n    \n    return d;\n}\n\nvec3 getNormal(vec3 p) {\n    float h = MIN_DIST;\n    vec3 n = vec3(\n        sceneSDF(p + vec3(h, 0, 0)) - sceneSDF(p - vec3(h, 0, 0)),\n        sceneSDF(p + vec3(0, h, 0)) - sceneSDF(p - vec3(0, h, 0)),\n        sceneSDF(p + vec3(0, 0, h)) - sceneSDF(p - vec3(0, 0, h))\n    );\n    return normalize(n);\n}\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * t;\n        float dist = sceneSDF(p);\n        if (dist < MIN_DIST) {\n            return p;\n        }\n        t += dist;\n        if (t > MAX_DIST) break;\n    }\n    return vec3(MAX_DIST);\n}\n\nfloat softShadow(vec3 ro, vec3 rd, float k) {\n    float res = 1.0;\n    float t = 0.02;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        float h = sceneSDF(ro + rd * t);\n        if (h < MIN_DIST) return 0.0;\n        res = min(res, k * h / t);\n        t += h;\n        if (t > MAX_DIST) break;\n    }\n    return res;\n}\n\nvec3 phongLighting(vec3 p, vec3 normal, vec3 viewDir) {\n    vec3 lightDir = normalize(lightPos - p);\n    \n    vec3 ambient = AMBIENT_LIGHT * vec3(0.2, 0.8, 0.2);\n    \n    float diff = max(dot(normal, lightDir), 0.0);\n    vec3 diffuse = diff * vec3(1.0);\n    \n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), SPECULAR_POWER);\n    vec3 specular = spec * vec3(1.0);\n    \n    float shadow = softShadow(p, lightDir, SHADOW_SOFTNESS);\n    \n    return (ambient + shadow * (diffuse + specular));\n}\n\nvec3 getCameraPosition(float time) {\n    float radius = 10.0;\n    float height = 4.0;\n    return vec3(sin(time) * radius, height, cos(time) * radius);\n}\n\nvec3 getCameraTarget() {\n    return vec3(0.0, 1.0, 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    \n    float time = iTime * 0.2;\n    vec3 ro = getCameraPosition(time);\n    vec3 lookAt = getCameraTarget();    \n    \n    \n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    vec3 rd = normalize(forward + uv.x * right + uv.y * up);\n    \n    vec3 p = rayMarch(ro, rd);\n    \n    if (length(p) < MAX_DIST) {\n        vec3 normal = getNormal(p);\n        vec3 viewDir = normalize(ro - p);\n        vec3 color = phongLighting(p, normal, viewDir);\n        fragColor = vec4(color, 1.0);\n    } else {\n        fragColor = vec4(0.2, 0.8, 0.2, 1.0); \n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}