{
    "Shader": {
        "info": {
            "date": "1598146337",
            "description": "Generative tiles z",
            "flags": 0,
            "hasliked": 0,
            "id": "WtBfzR",
            "likes": 6,
            "name": "Generative tiles z",
            "published": 3,
            "tags": [
                "raymarchingfractalarchitecture"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON 0.0001\n#define PI 3.14159265\n#define IVORY 1.\n#define BLUE 2.\n#define BLACK 3.\n\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float radius) { return length(p) - radius; }\nfloat sdBox( vec3 p, vec3 b ) { vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0); }\n\n\nfloat sdTorus(vec3 p, float smallRadius, float largeRadius) {\n    return length(vec2(length(p.xz) - largeRadius, p.y)) - smallRadius;\n}\n\n\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nvec2 getDist(vec3 p) {\n    p.y -= 0.5;\n    vec2 plane = vec2(p.y+0.5, IVORY);\n    float step = 1.5;\n    p.x += iTime;\n    p.z -= iTime;\n    \n    vec3 pFrame = p;\n    pFrame.xz -= step / 2.;\n    pFrame.xz = mod(pFrame.xz, step) - step / 2.;\n    pFrame.xz *= Rot(PI / 4.);\n    pFrame.xz = abs(pFrame.xz);\n    pFrame.xz *= Rot(PI / 4.);\n    pFrame.xy *= Rot(PI / 4.);\n    float frame = sdBox(pFrame, vec2(0.074, step / 2.).xxy);\n    \n    vec2 id = floor(p.xz / step);\n    p.xz = mod(p.xz, step) - step / 2.;\n    //p.xz *= Rot(iTime / 4.);\n    vec3 pBox = p;\n    // pBox.xz /= 100.;// * (.5 + .5 * sin(iTime));\n    //vec3 pTiles = p;\n    float t = iTime;\n    t = floor(t) + smoothstep(0.4, 0.6, fract(t));\n\tp.y += sin(id.x + id.y * 2. + t / 10.);\n    float box = sdBox(pBox, vec2(0.05, step / 2.).yxy);\n    //p.yz *= Rot(PI / 2.);\n    float scale = 0.7;\n    vec2 torus = vec2(sdTorus(p, .4, 1.5), BLUE);\n    for (int i = 0; i < 7; i++) {\n\t\tp.xz = abs(p.xz);\n        p.xz -= 1.;\n        p /= scale;\n        p.yz *= Rot(PI / 2.);\n\t    p.xy *= Rot(PI / 4.);\n        vec2 newTorus = vec2(sdTorus(p, .4, 1.5) * pow(scale, float(i+1)), BLUE);\n        torus = torus.x < newTorus.x? torus : newTorus;\n    }\n    torus = box < torus.x ? torus : vec2(box, 0);\n    vec2 fractalAndPlane = torus.x < plane.x? torus : plane;\n    //torus.x -=  - 0.03;\n    return fractalAndPlane.x < frame ? fractalAndPlane : vec2(frame, BLACK);\n}\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\n\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    float info = 0.;\n    //float glow = 0.;\n    float minAngleToObstacle = 1e10;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d);\n        minAngleToObstacle = min(minAngleToObstacle, atan(distToClosest.x, d));\n        d += distToClosest.x;\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec3(d, info, minAngleToObstacle);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p).x - vec3(getDist(p - e.xyy).x,\n                               getDist(p - e.yxy).x,\n                               getDist(p - e.yyx).x);\n\treturn normalize(n);\n}\n\n\n\n\nvec3 getRayDirection (vec3 ro, vec2 uv, vec3 lookAt) {\n    vec3 rd;\n    rd = normalize(vec3(uv - vec2(0, 0.), 1.));\n    vec3 lookTo = lookAt - ro;\n    float horizAngle = acos(dot(lookTo.xz, rd.xz) / length(lookTo.xz) * length(rd.xz));\n    rd.xz *= Rot(horizAngle);\n    return rd;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // ray origin\n    vec3 ro = vec3(-3, 5, 3);\n    float zoom = 1.100;\n    \n    // ray direction\n    vec3 rd = getRayDir(uv, ro, vec3(0), 0.75);\n    \n    vec3 rm = rayMarch(ro, rd);\n    float d = rm[0];\n    float info = rm[1];\n    \n    float color_bw = 0.;\n    vec3 colorBg = vec3(0.233,0.715,0.920);\n    vec3 color = vec3(0);\n    vec3 light = vec3(50);\n    //light.xz *= Rot(iTime);\n    vec3 p = ro + rd * d;\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        //n.zy *= Rot(iTime);\n    \t//color = vec3( n + 1.0 );\n        //color *= info;\n        // vec3 tex = boxmap(u_tex_bg, ro + rd * d, n, 32.0 ).xyz;//\n        // self shadeing\n        color_bw = 0.5 + .5 * dot(n, normalize(light - p));\n        // drop shadeos\n        // trying to raymarch to the light for MAX_DIST\n        // and if we hit something, it's shadow\n        vec3 dirToLight = normalize(light - p);\n        vec3 rayMarchLight = rayMarch(p + dirToLight * .5, dirToLight);\n        float distToObstable = rayMarchLight.x;\n        float distToLight = length(light - p);\n        // if (distToObstable < distToLight) {\n        //     color_bw =  0.;\n        // }\n\n        // smooth shadows\n        float shadow = smoothstep(0.0, .1, rayMarchLight.z / PI);\n        color_bw *= .7 + .3 * shadow;\n        \n\n        // tex *= color_bw;\n        // color = tex;\n    }\n    color += 0.6 + vec3( color_bw );\n    // coloring\n    if (info == IVORY) {\n        color *= vec3(0.433,0.457,0.545);\n    }\n    else if (info == BLUE) {\n        color *= vec3(0.655,0.129,0.054);\n    }\n    else if (info == BLACK) {\n        color *= vec3(0.130,0.130,0.130);\n    }\n    color = mix(color, colorBg, smoothstep(20., 28., d));\n    \n    \n    \n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}