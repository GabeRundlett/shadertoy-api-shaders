{
    "Shader": {
        "info": {
            "date": "1564388142",
            "description": "low discrepancy sampling using Weyl sequence.  ( set #def to Uniform for comparison )",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsXWj",
            "likes": 13,
            "name": "Weyl sequence",
            "published": 3,
            "tags": [
                "sampling",
                "hash",
                "bluenoise",
                "rand",
                "lowdiscrepancy"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 588
        },
        "renderpass": [
            {
                "code": "#define hash Nth_weyl   // Nth_weyl or Uniform\n\nvec2 Nth_weyl(int n) { // borrowed from https://www.shadertoy.com/view/3lsXW2\n    return fract(vec2(n*12664745, n*9560333)/exp2(24.));\n}\n\n#define Uniform(p)  fract(sin(float(p) * vec2(12.9898, 78.233)) * 43758.5453)\n    \nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy, D;\n    U = U/R.y; U.x -= (R.x/R.y-1.)/2.;\n    float t = 50.*iTime, m=1e9, ii;\n    \n    for (int i = int(t); i > 0; i--) {\n        D = hash(i) - U; \n        m = dot(D,D); if(m*R.y*R.y/6.<2.) { ii=float(i);break; }\n     // O += smoothstep(3.5,2.,length(D)*R.y);\n     // O += clamp(2.-dot(D,D)*R.y*R.y/6.,0.,1.) \n     //      * min(float(i)/t * vec4(1.4,1,.8,0),1.);\n    }\n    O = clamp(2.-m*R.y*R.y/6.,0.,1.) \n        * min(float(ii)/t * vec4(1.4,1,.8,0),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}