{
    "Shader": {
        "info": {
            "date": "1621705086",
            "description": "trying a more complex scene",
            "flags": 0,
            "hasliked": 0,
            "id": "sll3RN",
            "likes": 3,
            "name": "scene eggs'n'milk",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "sirjofri",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "// define AA for better performance\n//#define AA\n\nfloat sdist = .002;      // bigger: better performance\nfloat culldist = 20.;    // smaller: better performance\nfloat maxlightdist = 4.; // smaller: better performance\nint basesteps = 256;     // smaller: better performance\nint shadowsteps = 24;    // smaller: better performance\n\nvec3 ambi = vec3(.6, .7, .9);\nvec3 sky = vec3(.3, .35, 1.2);\n\nstruct Sample{\nfloat dist;\nvec3 wp;\nvec3 norm;\nvec3 shadow;\nfloat ao;\nvec3 col;\nint mat;\n};\n\nstruct Map{\nfloat d;\nint m;\n};\n\nstruct Light{\nvec3 p;\nvec3 c;\nfloat d;\n};\n\nMap sdSphere(vec3 p, vec3 pos, float r, int mat)\n{\n    float d = distance(pos, p) - r;\n    return Map(d, d < sdist ? mat : 0);\n}\n\nMap sdBush(vec3 p, vec3 pos, float r, int mat)\n{\n    float d = distance(pos, p) - r - smoothstep(0., 1., texture(iChannel0, p.yz*vec2(.03, .07)+sin(iTime*1.6+p.z*5.)*vec2(0.005, .0)).r)*.6;\n    return Map(d, d < sdist ? mat : 0);\n}\n\nMap sdBox(vec3 p, vec3 pos, vec3 dim, int mat)\n{\n    float d = length(max(vec3(0), abs(p-pos)-dim));\n    return Map(d, d < sdist ? mat : 0);\n}\n\nMap sdGround(vec3 p, float h, int mat)\n{\n    float d = distance(p, vec3(p.x, p.y, h));\n    return Map(d, d < sdist ? mat : 0);\n}\n\nvec3 rotate(vec3 p, vec3 r)\n{\n    mat3 yaw = mat3(\n        cos(r.x), -sin(r.x), 0.,\n        sin(r.x),  cos(r.x), 0.,\n        0.      ,  0.      , 1.\n    );\n    mat3 pitch = mat3(\n        1.,       0.,        0.,\n        0., cos(r.y), -sin(r.y),\n        0., sin(r.y),  cos(r.y)\n    );\n    mat3 roll = mat3(\n         cos(r.z), 0., sin(r.z),\n               0., 1.,       0.,\n        -sin(r.z), 0., cos(r.z)\n    );\n    \n    p *= roll;\n    p *= pitch;\n    p *= yaw;\n    return normalize(p);\n}\n\nMap opUnion(Map a, Map b)\n{\n    float d = min(a.d, b.d);\n    int m = max(a.m, b.m);\n    return Map(d, m);\n}\n\nMap opSubtract(Map a, Map b)\n{\n    float d = max(-a.d, b.d);\n    int m = max(a.m, b.m);\n    return Map(d, m);\n}\n\nMap opIntersect(Map a, Map b)\n{\n    float d = max(a.d, b.d);\n    int m = max(a.m, b.m);\n    return Map(d, m);\n}\n\nMap map(vec3 p)\n{\n    Map bush1 = sdBush(p*vec3(1., 1., .6), vec3(4., -17., 1.1), .5, 6); // right bush\n    Map bush2 = sdBush(p*vec3(1., 1., .6), vec3(1., -17., 1.3), .5, 6); // left bush\n    Map bush3 = sdBush(p*vec3(1., 1., .5), vec3(13., -33., .8), .5, 6); // distant bush right\n    Map bush4 = sdBush(p*vec3(1., 1., .5)-vec3(0., 0., .3), vec3(7.5, -30., -.1), .5, 6); // distant bush left\n    Map ball1 = sdSphere(p*vec3(1., 1., 1.3), vec3(-2.1, -13.5, 1.58), .15, 5); // left ball\n    Map ball2 = sdSphere(p*vec3(1., 1., 1.5), vec3(-1.6, -13.7, 1.79), .15, 5); // right ball\n    Map box = sdBox(p, vec3(-1.4, -13.2, .5), vec3(1.3, 1., .5), 4);\n    Map boxTop = sdBox(p, vec3(-1.4, -13.2, 1.), vec3(1.32, 1.02, .1), 4);\n    Map obox = sdBox(p, vec3(-.7, -13.5, 1.3), vec3(.22, .18, .6), 7);\n    Map wallA = sdBox(p, vec3(-9.5, -15., 3.), vec3(10., .5, 3.), 3);\n    Map wallB = sdBox(p, vec3(1.5, -15, 5.), vec3(1., .5, 1.), 3);\n    Map wallC = sdBox(p, vec3(1.5, -15, .7), vec3(1., .5, .7), 3);\n    Map wallD = sdBox(p, vec3(5.5, -15, 3.), vec3(3., .5, 3.), 3);\n    Map wall = opUnion(opUnion(opUnion(wallA, wallB), wallC), wallD);\n    Map ground = sdGround(p, 0., 1);\n    Map bushes = opUnion(opUnion(bush1, bush2), opUnion(bush3, bush4));\n    Map objects = opUnion(opUnion(opUnion(ball1, ball2), obox), bushes);\n    return opUnion(opUnion(opUnion(wall, ground), opUnion(box, boxTop)), objects);\n}\n\n/* Thanks iq */\nvec3 getNormal(vec3 p)\n{\n    const float h = 0.0002;\n    #define ZERO (min(iFrame,0))\n    vec3 n = vec3(0.);\n    for (int i=ZERO; i<4; i++)\n    {\n        vec3 e = 0.5773*(2.*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.);\n        n += e*map(p+e*h).d; /* btw: s/pos/p */\n    }\n    return normalize(n);\n}\n\nfloat getAO(Sample s)\n{\n    float d = .18;\n    return clamp(mix(.5, 1., map(s.wp + s.norm*d).d/d), 0., 1.);\n}\n\nvec3 wood(Sample s)\n{\n    vec3 col = vec3(1., .4, .05);\n    float top = texture(iChannel0, s.wp.xy*vec2(.3, 1.)).r;\n    float left = texture(iChannel0, s.wp.yz*vec2(.1, 1.)).r;\n    float front = texture(iChannel0, s.wp.xz*vec2(.1, 1.)).r;\n    float m = mix(left, front, dot(s.norm, vec3(0., 1., 0.)));\n    m = mix(m, top, dot(s.norm, vec3(0., 0., 1.)));\n    \n    return col*pow(m, 1.8);\n}\n\nvec3 clay(Sample s)\n{\n    vec3 col = vec3(1., .4, .4);\n    float top = texture(iChannel1, s.wp.xy*2.).r;\n    float left = texture(iChannel1, s.wp.yz*2.).g;\n    float front = texture(iChannel1, s.wp.xz*2.).b;\n    float m = mix(left, front, dot(s.norm, vec3(0., 1., 0.)));\n    m = mix(m, top, dot(s.norm, vec3(0., 0., 1.)));\n    \n    return col*pow(m, .6);\n}\n\nvec3 concrete(Sample s)\n{\n    vec3 top = texture(iChannel0, s.wp.xy).rgb;\n    vec3 left = texture(iChannel0, s.wp.yz).rgb;\n    vec3 front = mix(texture(iChannel0, s.wp.xz).rgb, texture(iChannel0, s.wp.xz+vec2(.3, -.2)).rgb, smoothstep(0.3, .8, texture(iChannel1, s.wp.xz*.01).r));\n    vec3 m = mix(left, front, dot(s.norm, vec3(0., 1., 0.)));\n    m = mix(m, top, dot(s.norm, vec3(0., 0., 1.)));\n    return pow(m, vec3(2.2));\n}\n\nvec3 getColor(Sample s)\n{\n    switch (s.mat){\n    case 0:\n        return vec3(1.);\n    case 1:\n        return vec3(.1, .3, 0.)*smoothstep(0., 1., texture(iChannel0, s.wp.xy*.3).r);\n    case 2:\n        return vec3(0., 1., 0.);\n    case 3:\n        return concrete(s);\n    case 4:\n        return wood(s);\n    case 5:\n        return clay(s);vec3(.4, .3, .9);\n    case 6:\n        return vec3(.1, .3, .0);\n    case 7:\n        return vec3(mix(vec3(.05, .1, 1.), vec3(.7, .7, 1.), smoothstep(.4, .55, sin(s.wp.z*8.-s.wp.x-5.2)*.5+.5)));\n    }\n    return vec3(1., 0., 1.);\n}\n\nSample march(vec3 ro, vec3 rd, int ms, float md)\n{\n    Sample o;\n    Map m;\n    o.dist = 0.;\n    o.mat = 0;\n    float d = 0.;\n    for (int i=0; i<ms; i++){\n        m = map(ro + o.dist*rd);\n        o.dist += m.d;\n        if (m.d < sdist || m.d > md){\n            o.wp = ro + o.dist*rd;\n            o.mat = m.m;\n            o.norm = getNormal(o.wp);\n            o.ao = getAO(o);\n            o.col = getColor(o);\n            return o;\n        }\n    }\n    o.wp = ro + o.dist*rd;\n    o.norm = getNormal(o.wp);\n    o.ao = getAO(o);\n    o.col = getColor(o);\n    return o;\n}\n\nSample clight(Sample s, Light l)\n{\n    vec3 rd = normalize(l.p-s.wp);\n    float n = dot(rd, s.norm);\n    float dist = clamp(distance(l.p, s.wp), 0., l.d);\n    float d = clamp(min(n, march(s.wp+(sdist+.02)*rd, rd, shadowsteps, maxlightdist).dist/dist), 0.05, 1.);\n    s.shadow += d*l.c;\n    return s;\n}\n\nSample calcLight(Sample s)\n{\n    Light l1 = Light(\n        vec3(2., 0., 4.),\n        vec3(1.),\n        80.\n    );\n    Light l2 = Light(\n        vec3(-5., -3., 3.),\n        vec3(.7, .4, .3),\n        80.\n    );\n    s = clight(s, l1);\n    s = clight(s, l2);\n    return s;\n}\n\nvec3 composite(Sample s)\n{\n    s = calcLight(s);\n    vec3 col = mix(s.col * s.ao * s.shadow, sky, step(100., s.dist));\n    float fog = clamp(s.dist*.01-.1, 0., 1.)*smoothstep(0.2, .8, clamp(4.8-s.wp.z*.2, 0., 1.));\n  //  return vec3(fog);\n    return mix(col, ambi, fog);\n}\n\n/* stolen from https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/ */\n/* thanks, demofox */\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    float d = iResolution.x/iResolution.y;\n    uv.x *= d;\n    \n    float f = -2.4;\n    \n    vec3 cr = vec3(0.3+cos(iTime*3.21)*.001-sin(iTime)*.2, 0.05+sin(iTime*3.6)*.001, .0+sin(iTime*2.6)*.002);\n    vec3 cp = vec3(sin(iTime)-2.7, -8.0, 2.);\n    vec3 rd = rotate(vec3(uv.x, f, uv.y), cr);\n    \n    Sample s = march(cp, rd, basesteps, culldist);\n    vec3 col = composite(s);\n    \n#ifdef AA\n    /* sample neighbor pixels (2x2 only) */\n    /*  xx  */\n    /*  x   */\n    vec2 diff = ((fragCoord+vec2(1.))-fragCoord)/2./iResolution.xy;\n    rd = rotate(vec3(uv.x, f, uv.y+diff.y), cr);\n    s = march(cp, rd, basesteps, culldist);\n    col += composite(s);\n    rd = rotate(vec3(uv.x+diff.x, f, uv.y), cr);\n    s = march(cp, rd, basesteps, culldist);\n    col += composite(s);\n    col /= 3.;\n#endif\n\n    col = pow(ACESFilm(col*.6), vec3(1./2.2));\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}