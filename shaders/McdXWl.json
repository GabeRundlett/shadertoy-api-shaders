{
    "Shader": {
        "info": {
            "date": "1714648694",
            "description": "My version of simple text rendering, which I tried to make as easy to use as possible.\nI still has issues with 0 and powers of ten.",
            "flags": 0,
            "hasliked": 0,
            "id": "McdXWl",
            "likes": 2,
            "name": "Simple font renderer",
            "published": 3,
            "tags": [
                "text",
                "font",
                "display",
                "character",
                "fonts",
                "charmap"
            ],
            "usePreview": 0,
            "username": "jsulpis",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "// mainly inspired by Fabrice Neyret: https://www.shadertoy.com/view/llySRh\n\n#define log10(x) log(x) / log(10.)\n#define CHAR_WIDTH .42\n#define ZOOM_FACTOR 64.\n\nvec3 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec3(0,0,0);\n\treturn texture( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. )).rrr;\n}\n\nfloat numberOfDigits(int n) {\n    return floor(log10(float(n))+1.);\n}\n\nvoid drawInt(inout vec3 color, in int number, in vec2 uv) {\n    vec3 col = vec3(0.);\n    if (number == 0) {\n        // doesn't seem to work\n        col += char(uv, 48);\n        uv.x += CHAR_WIDTH;\n        color += col;\n        return;\n    }\n    uv.x -= (numberOfDigits(number) - 1.) * CHAR_WIDTH;\n    for (int i = number; i>0; i/=10) {\n        col += char(uv, 48+i%10 );\n        uv.x += CHAR_WIDTH;\n    }\n    color += col;\n}\n\n\n#define drawText(color, text, uv) { for (int i = 0; i < text.length(); i++) { color += char(uv,text[i]); uv.x-=CHAR_WIDTH; } }\n#define moveTo(position) { drawUV = (uv - position) * ZOOM_FACTOR / fontSize; }\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec3 color = vec3(0.);\n    vec2 position = vec2(0.);\n    float fontSize = 6.;\n    float charHeight = fontSize / ZOOM_FACTOR;\n    float charWidth = charHeight * CHAR_WIDTH;\n    vec2 drawUV = uv;\n    \n    \n    int[] center = int[](_c, _e, _n, _t, _e, _r);  \n    position.x = .5 * iResolution.x/iResolution.y - float(center.length()+1)/2. * charWidth;\n    position.y = .5 - charHeight / 2.;\n    moveTo(position);\n    drawText(color, center, drawUV)\n    \n    int[] bottomLeft = int[](_b, _o, _t, _t, _o, _m, _space, _l, _e, _f, _t);  \n    moveTo(vec2(0., 0.));\n    drawText(color, bottomLeft, drawUV)\n    \n    int[] topLeft = int[](_t, _o, _p, _space, _l, _e, _f, _t);  \n    position.x = 0.;\n    position.y = 1. - charHeight;\n    moveTo(position);\n    drawText(color, topLeft, drawUV)\n    \n    int[] topRight = int[](_t, _o, _p, _space, _r, _i, _g, _h, _t);  \n    position.x = iResolution.x/iResolution.y - float(topRight.length()+1) * charWidth;\n    position.y = 1. - charHeight;\n    moveTo(position);\n    drawText(color, topRight, drawUV)\n        \n    int[] bottomRight = int[](_b, _o, _t, _t, _o, _m, _space, _r, _i, _g, _h, _t);  \n    position.x = iResolution.x/iResolution.y - float(bottomRight.length()+1) * charWidth;\n    position.y = 0.;\n    moveTo(position);\n    drawText(color, bottomRight, drawUV)\n    \n    int n = 42;//int(floor(iTime*4.)); // with dynamic numbers I get a wrong position for powers of ten, I don't know why\n    position.y = .5 - 1.5*charHeight;\n    position.x = iResolution.x/iResolution.y /2. - (.5 * numberOfDigits(n) + .75) * charWidth;\n    moveTo(position);\n    drawInt(color, n, drawUV);\n    \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define _0 48\n#define _1 49\n#define _2 50\n#define _3 51\n#define _4 52\n#define _5 53\n#define _6 54\n#define _7 55\n#define _8 56\n#define _9 57\n#define _A 65\n#define _B 66\n#define _C 67\n#define _D 68\n#define _E 69\n#define _F 70\n#define _G 71\n#define _H 72\n#define _I 73\n#define _J 74\n#define _K 75\n#define _L 76\n#define _M 77\n#define _N 78\n#define _O 79\n#define _P 80\n#define _Q 81\n#define _R 82\n#define _S 83\n#define _T 84\n#define _U 85\n#define _V 86\n#define _W 87\n#define _X 88\n#define _Y 89\n#define _Z 90\n#define _a 97\n#define _b 98\n#define _c 99\n#define _d 100\n#define _e 101\n#define _f 102\n#define _g 103\n#define _h 104\n#define _i 105\n#define _j 106\n#define _k 107\n#define _l 108\n#define _m 109\n#define _n 110\n#define _o 111\n#define _p 112\n#define _q 113\n#define _r 114\n#define _s 115\n#define _t 116\n#define _u 117\n#define _v 118\n#define _w 119\n#define _x 120\n#define _y 121\n#define _z 122\n\n#define _space 32\n\n#define _period 46\n#define _comma 44\n#define _semicolon 59\n#define _colon 58\n#define _exclamation 33\n#define _question 63\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}