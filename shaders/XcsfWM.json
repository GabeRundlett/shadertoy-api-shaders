{
    "Shader": {
        "info": {
            "date": "1723884520",
            "description": "originals  https://www.shadertoy.com/view/WdjBWc https://www.shadertoy.com/view/4scGWj",
            "flags": 0,
            "hasliked": 0,
            "id": "XcsfWM",
            "likes": 1,
            "name": "lighting  machine",
            "published": 3,
            "tags": [
                "lighting",
                "machine",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "#define PI acos(-1.0)\n#define TAU PI*2.0\n\nconst float maxd=80.0;\n\nmat2 rot(float a)\n{\n    float s=sin(a), c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat lpNorm(vec3 p, float n)\n{\n   p.z+=0.2*cos(iTime);\n\tp = pow(abs(p), vec3(n));\n\treturn pow(p.x+p.y+p.z, 1.0/n);\n}\n\nvec2 pSFold(vec2 p,float n)\n{\n    float h=floor(log2(n)),a =6.2831*exp2(h)/n;\n    for(float i=0.0; i<h+2.0; i++)\n    {\n\t \tvec2 v = vec2(-cos(a),sin(a));\n           v.x+=0.2*cos(iTime);\n\t\tfloat g= dot(p,v);\n        \n \t\tp-= (g - sqrt(g * g + 5e-3))*v;\n \t\ta*=0.5;\n    }\n    return p;\n}\n\nvec2 sFold45(vec2 p, float k)\n{\n    vec2 v = vec2(-1,1)*0.7071;\n    float g= dot(p,v);\n \treturn p-(g-sqrt(g*g+k))*v;\n}\n\nfloat frameBox(vec3 p, vec3 s, float r)\n{   \n    p = abs(p)-s+0.2*cos(iTime);\n\n    p.x = max(0.0,p.x);\n\treturn lpNorm(p,5.0)-r;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat deObj(vec3 p)\n{   \n    return min(min(sdRoundBox(p,vec3(0.3),0.1),frameBox(p,vec3(0.7),0.05)),frameBox(p,vec3(0.5),0.01));\n}\n\nfloat g = 0.0;\n\nfloat map(vec3 p)\n{\np.xy*=mat2(cos(iTime),sin(iTime),-sin(iTime),  cos(iTime));\n    float de=1e9;\n\n    p.z=mod(p.z,12.)-6.;\n    vec3 q=p;\n    \n    p.xy=pSFold(p.xy+0.2*cos(iTime),6.0);\n    p.y-=5.+0.2*cos(iTime);\n     p.z+=0.2*cos(iTime);\n    float s=1.0;\n    for(float i=0.;i<6.;i++)\n    {\n        p.xy=abs(p.xy)-.5;\n        p.z=abs(p.z)-.3+0.2*cos(iTime);\n   \n       p.x+=0.2*cos(iTime);\n        s*=0.7;\n        p*=s;\n     \n        p.y-=0.5;\n        vec3 sp=p/s;\n        \n        de=min(de,\n           min(sdRoundBox(sp,vec3(0.3),0.1),\n               frameBox(sp,vec3(0.7),0.05)));\n    }\n    q.z-=clamp(q.z,-1.,1.);\n \n    float d=length(q)-0.5;\n    g += 0.1/(0.2+d*d*5.0); // Distance glow by balkhan\n    de=min(de,d+0.2);\n    return de;\n}\n\nvec3 calcNormal(vec3 pos){\n  vec2 e = vec2(1,-1) * 0.002;\n  return normalize(\n    e.xyy*map(pos+e.xyy)+e.yyx*map(pos+e.yyx)+ \n    e.yxy*map(pos+e.yxy)+e.xxx*map(pos+e.xxx)\n  );\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<100;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<0.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nfloat calcShadow( vec3 light, vec3 ld, float len ) {\n\tfloat depth = march( light, ld, 0.0, len );\t\n\treturn step( len - depth, 0.01 );\n}\n\nvec3 doColor(vec3 p)\n{\n    return vec3(0.3,0.5,0.8)+cos(p*0.2)*.5+.5;\n}\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n   \n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n    \n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t  \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n     \n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat noise(vec3 m) {\n    return   0.5333333*simplex3d(m)\n\t\t\t+0.2666667*simplex3d(2.0*m)\n\t\t\t+0.1333333*simplex3d(4.0*m)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro=vec3(5.5,5.5,0.);\n    vec3 ta =vec3(0,0,0);\n    \n   \n    vec2 uv2 = fragCoord.xy / iResolution.xy;    \n  uv2 = uv2 * 2. -1.;  \n\n  vec2 p = fragCoord.xy/iResolution.x;\n  vec3 p3 = vec3(p, iTime*0.4);    \n    \n  float intensity = noise(vec3(p3*12.0+12.0));\n                          \n  float t2 = clamp((uv2.x * -uv2.x * 0.16) + 0.15, 0., 1.);                         \n  float y = abs(intensity * -t2 + uv2.y);\n    \n  float g = pow(y, 0.2);\n                          \n  vec3 col2 = vec3(1.70, 1.48, 1.78);\n  col2 = col2 * -g + col2;                    \n  col2 = col2 * col2;\n  col2 = col2 * col2;\n                       \n  fragColor.w = 1.;  \n    vec3 w = normalize(ta-ro);\n    vec3 u = normalize(cross(w,vec3(0,1,0)));\n    vec3 rd=mat3(u,cross(u,w),w)*normalize(vec3(uv,2.0));\n    vec3 col= vec3(0.05,0.05,0.1);\n    float t=march(ro,rd,0.0,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=doColor(p); \n        vec3 n = calcNormal(p);      \n\t\tvec3 lightPos=vec3(5,5,1);\n    \tvec3 li = lightPos - p;\n\t\tfloat len = length( li );\n\t\tli /= len;\n\t\tfloat dif = clamp(dot(n, li), 0.0, 1.0);\n        float sha = calcShadow( lightPos, -li, len );\n        col *= max(sha*dif, 0.2);\n        float rimd = pow(clamp(1.0 - dot(reflect(-li, n), -rd), 0.0, 1.0), 2.5);\n\t\tfloat frn = rimd+2.2*(1.0-rimd);\n    \tcol *= frn*0.8;\n        col *= max(0.5+0.5*n.y, 0.0);\n        col *= exp2(-2.*pow(max(0.0, 1.0-map(p+n*0.3)/0.3),2.0));\n        col += vec3(0.8,0.6,0.2)*pow(clamp(dot(reflect(rd, n), li), 0.0, 1.0), 20.0);\n        col = mix(vec3(0.1,0.1,0.2),col,  exp(-0.001*t*t));\n\t\tcol += vec3(0.7,0.3,0.1)*g*(1.5+0.8*sin(iTime*3.5));\n    \tcol = clamp(col,0.0,1.0);\n            \n    }\n    col=pow(col,vec3(1.5));\n    fragColor.xyz = col+col2;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}