{
    "Shader": {
        "info": {
            "date": "1523972676",
            "description": "I started to become serious and try to make a real shader without tutorials, but i am always making sure there is a little bit of fun. :D (I'm still 10 years old and next month is my b-day)",
            "flags": 0,
            "hasliked": 0,
            "id": "Mstfzn",
            "likes": 2,
            "name": "Some bubbles with weird colors.",
            "published": 3,
            "tags": [
                "bubbles"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 510
        },
        "renderpass": [
            {
                "code": "\n#define ANTI_ALIASING\n\nvec3 circle( vec2 uv, vec2 pos, float radius, vec3 col ) {\n    \n    /*if( //sqrt(pow(uv.x-pos.x, 2.) + pow(uv.y-pos.y, 2.))\n        length(uv-pos)\n       <= radius) {\n        \n        return col;\n        \n    }*/\n    // @FabriceNeyret\n    \n    #ifdef ANTI_ALIASING\n    \treturn smoothstep( 4./iResolution.y, 0., length(uv-pos) - radius) * col;\n    #else\n  \t  return step( length(uv-pos), radius) * col;\n    #endif\n    \n}\n\nvec3 rBubble( vec2 uv, vec2 pos, float radius, vec3 col, float sw, float sws) {\n    \n    return circle(uv, vec2(pos.x+sin(iTime*2.*sws)/16.*sw, iTime/(radius*6.)), radius, col);\n    \n}\n\nvec3 tBubble( vec2 uv, vec2 pos, float radius, vec3 col, vec2 sw, vec2 sws ) {\n    \n    return circle(uv,vec2(pos.x+sin(iTime/2.*sws.x)/16.*sw.x,pos.y+cos(iTime/2.)/16.*sw.y), radius, col);\n    \n}\n\nvec3 tBubbleScatter( vec2 uv, float nB ) {\n    \n    vec3 circles = vec3(0.);\n    \n    for(float i = 0.; i < nB; i++) {\n        \n        circles += tBubble(uv, \n                           vec2(i/nB - nB/i + 1., tan(i-iTime) * nB/i - i/nB - 0.5), sin(i*2.+6.)/3., \n                           vec3(sin(i)+0.7),\n                           vec2(tan(i/2.)*3., tan(i/5.)*2.), \n            vec2( sin(i), cos(i) ) );\n        \n    }\n    \n    return circles;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    fragColor = vec4(1.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    //vec2 uv = fragCoord/iResolution.y - vec2(1.0);\n    uv = uv * 2.0-1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 circles = rBubble( uv, vec2(0.1, 0.1), 0.4, vec3(0., 0.6, 0.6), 2., 1.);\n    circles += tBubble( uv, vec2(0.3, 0.2), 0.3, vec3(0.5, 0.1, 0.2), vec2(8., 1.), vec2(3., 5.));\n    \n    vec3 circles2 = tBubbleScatter( uv, 200. );\n    \n    vec3 cbg = vec3(uv+sin(iTime), 1);\n    vec3 cbg2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    if(circles2 != vec3(0.)) {\n        fragColor = vec4(smoothstep(circles2, smoothstep(cbg2, cbg2, vec3(0.5)), vec3(0.5)), 1.);\n    } else {\n        if(uv.y <= -0.8+sin(uv.x+iTime+cos(iTime)+1.)/10.*cos(iTime)) {\n            fragColor = vec4(cbg2, 1.);\n        } else if(uv.y <= -0.6+sin(uv.x+iTime+cos(iTime)+1.)/15.*cos(iTime)){\n            fragColor = vec4(cbg2+vec3(0.4), 1.);\n        } else fragColor = vec4(1.);\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}