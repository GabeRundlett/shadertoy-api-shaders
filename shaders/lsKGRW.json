{
    "Shader": {
        "info": {
            "date": "1480935480",
            "description": "Visualisation of the quantum wavefunction of a single particle, via numerical solution of the Schrodinger equation. See [url]https://thomasbronzwaer.wordpress.com/2016/03/25/numerical-quantum-mechanics-the-time-dependent-schrodinger-equation-i/[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "lsKGRW",
            "likes": 43,
            "name": "Schrodinger equation",
            "published": 3,
            "tags": [
                "quantum"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 2780
        },
        "renderpass": [
            {
                "code": "#define psi(p) texture(iChannel0,(p)/iResolution.xy).xy\n\n\n\n\nfloat potential(vec2 p) {\n    return float(p.y < 5. || p.y > iResolution.y - 5. ||\n        (p.x < iResolution.x/2. && int(p.y) == int(iResolution.y/2.)));\n}\n\n#define PI 3.141592653589793\n#define hue2rgb(h) clamp(abs(mod(6.*(h)+vec3(0,4,2),6.)-3.)-1.,0.,1.)\nvoid mainImage(out vec4 o, in vec2 p) {\n    vec2 v = psi(p);\n    o = vec4(1.5 * length(v) * hue2rgb(atan(v.y,v.x)/(2.*PI)) +\n             0.25*potential(p), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define psi(p) texture(iChannel0,(p)/iResolution.xy).xy\n#define k1(p)  texture(iChannel1,(p)/iResolution.xy).xy\n#define k2(p)  texture(iChannel2,(p)/iResolution.xy).xy\n#define k3(p)  texture(iChannel3,(p)/iResolution.xy).xy\n\nfloat potential(vec2 p) {\n    return float(p.y < 5. || p.y > iResolution.y - 5. ||\n        (p.x < iResolution.x/2. && int(p.y) == int(iResolution.y/2.)));\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\n#define dt 0.25\n#define y(p) (psi(p) + dt*k3(p))\n\nvec2 k4(vec2 p) {\n    vec2 c = y(p);\n    vec2 n = y(p + vec2(0,1));\n    vec2 e = y(p + vec2(1,0));\n    vec2 s = y(p - vec2(0,1));\n    vec2 w = y(p - vec2(1,0));\n    vec2 laplacian = n + e + s + w - 4.*c;\n    return divi(-laplacian + potential(p) * c);\n}\n\n#define cis(theta) vec2(cos(theta),sin(theta))\n#define length2(p) dot(p,p)\nvec2 psi0(vec2 p) {\n    p = p / iResolution.xy - 0.5;\n    p.x *= iResolution.x / iResolution.y;\n    return exp(-70.*length2(p+vec2(0.675,0.225))) * cis(250.*(p.x+p.y));\n}\n\n#define rk4(p) (psi(p) + dt * (k1(p) + 2.*k2(p) + 2.*k3(p) + k4(p))/6.)\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    o.xy = (iFrame < 10) ? psi0(p) : rk4(p);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define psi(p) texture(iChannel0,(p)/iResolution.xy).xy\n\n\n\n\nfloat potential(vec2 p) {\n    return float(p.y < 5. || p.y > iResolution.y - 5. ||\n        (p.x < iResolution.x/2. && int(p.y) == int(iResolution.y/2.)));\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\n#define dt 0.25\n#define y(p) (psi(p))\n\nvec2 k1(vec2 p) {\n    vec2 c = y(p);\n    vec2 n = y(p + vec2(0,1));\n    vec2 e = y(p + vec2(1,0));\n    vec2 s = y(p - vec2(0,1));\n    vec2 w = y(p - vec2(1,0));\n    vec2 laplacian = n + e + s + w - 4.*c;\n    return divi(-laplacian + potential(p) * c);\n}\n\nvoid mainImage(out vec4 o, in vec2 p) { o.xy = k1(p); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define psi(p) texture(iChannel0,(p)/iResolution.xy).xy\n#define k1(p)  texture(iChannel1,(p)/iResolution.xy).xy\n\n\n\nfloat potential(vec2 p) {\n    return float(p.y < 5. || p.y > iResolution.y - 5. ||\n        (p.x < iResolution.x/2. && int(p.y) == int(iResolution.y/2.)));\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\n#define dt 0.25\n#define y(p) (psi(p) + 0.5*dt*k1(p))\n\nvec2 k2(vec2 p) {\n    vec2 c = y(p);\n    vec2 n = y(p + vec2(0,1));\n    vec2 e = y(p + vec2(1,0));\n    vec2 s = y(p - vec2(0,1));\n    vec2 w = y(p - vec2(1,0));\n    vec2 laplacian = n + e + s + w - 4.*c;\n    return divi(-laplacian + potential(p) * c);\n}\n\nvoid mainImage(out vec4 o, in vec2 p) { o.xy = k2(p); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define psi(p) texture(iChannel0,(p)/iResolution.xy).xy\n\n#define k2(p)  texture(iChannel2,(p)/iResolution.xy).xy\n\n\nfloat potential(vec2 p) {\n    return float(p.y < 5. || p.y > iResolution.y - 5. ||\n        (p.x < iResolution.x/2. && int(p.y) == int(iResolution.y/2.)));\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\n#define dt 0.25\n#define y(p) (psi(p) + 0.5*dt*k2(p))\n\nvec2 k3(vec2 p) {\n    vec2 c = y(p);\n    vec2 n = y(p + vec2(0,1));\n    vec2 e = y(p + vec2(1,0));\n    vec2 s = y(p - vec2(0,1));\n    vec2 w = y(p - vec2(1,0));\n    vec2 laplacian = n + e + s + w - 4.*c;\n    return divi(-laplacian + potential(p) * c);\n}\n\nvoid mainImage(out vec4 o, in vec2 p) { o.xy = k3(p); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}