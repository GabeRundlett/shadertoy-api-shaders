{
    "Shader": {
        "info": {
            "date": "1588881660",
            "description": "Got inspired by the loading animation in Tetris 99",
            "flags": 0,
            "hasliked": 0,
            "id": "3ssfRs",
            "likes": 12,
            "name": "大龙猫 - Тетрис",
            "published": 3,
            "tags": [
                "tetris"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "\n#define ITER 64.\n#define PI acos(-1.)\n#define v(p) vexel(p,vec3(.095),.01)\n#define us- 0.22\n#define ux vec3(us,0.,0.)\n#define uy vec3(0.,us,0.)\n#define uz vec3(0.,0.,us)\nvec3 global_color = vec3(1.,0.,0.);\nmat2 r(float a){\n    float c=cos(a),s=sin(a);\n    return mat2(c,s,-s,c);\n    \n    \n}\nfloat vexel(vec3 p,vec3 b, float r) {\n\n        vec3 q = abs(p) -b;\n        return length(max(q,0.0) + min(max(q.x,max(q.y,q.z)),0.0)) - r;\n}\n\n\n\nfloat b(vec3 p,float rot, vec2 offset){\nif(rot == PI) {\n        p.xy*=r(rot);\n        p.x -=us*3.;\n\n    }\n    else if(rot == PI/2.) {\n        p.xy*=r(rot);\n     \n    }\n    else if(rot == 3.*PI/2.) {\n        p.xy*=r(rot);\n        p.x -=us*3.;\n    }\n     global_color = vec3(.0,0.9,0.9);\n    return min(min(v(p),v(p+ux)),min(v(p+ux*3.),v(p+ux*2.)));\n}\nfloat t(vec3 p, float rot, vec2 offset){\n     p += mod(vec3(offset,0.),2.)*us;\n\n   if(rot == PI) {\n        p.xy*=r(rot);\n        p.x -=us*2.;\n        p.y -=us;\n    }\n    else if(rot == PI/2.) {\n        p.xy*=r(rot);\n        p.y -=us;\n    }\n    else if(rot == 3.*PI/2.) {\n        p.xy*=r(rot);\n        p.x -=us*2.;\n    }\n    global_color = vec3(.7,0.,1.);\n    return min(min(v(p),v(p+ux)),\n               min(v(p+(ux+uy)),v(p+ux*2.)));\n}\nfloat sq(vec3 p, float rot, vec2 offset){\n    global_color = vec3(.9,.8,.0);\n    return min(min(v(p),v(p+ux)),\n               min(v(p+(ux+uy)),v(p+uy)));\n}\nfloat l(vec3 p,float rot, vec2 offset){\n if(rot == PI) {\n        p.xy*=r(rot);\n        p.x -=us;\n        p.y -=us*2.;\n    }\n    else if(rot == PI/2.) {\n        p.xy*=r(rot);\n        p.y -=us*2.;\n    }\n    else if(rot == 3.*PI/2.) {\n        p.xy*=r(rot);\n        p.x -=us;\n    }\n    global_color = vec3(.9,0.5,.0);\n    return min(min(v(p),v(p+ux)),\n               min(v(p+(uy)*2.),v(p+uy)));\n\n}\nfloat j(vec3 p,float rot, vec2 offset){\nif(rot == PI) {\n        p.xy*=r(rot);\n        p.x -=us;\n        p.y -=us*2.;\n    }\n    else if(rot == PI/2.) {\n        p.xy*=r(rot);\n        p.y -=us*2.;\n    }\n    else if(rot == 3.*PI/2.) {\n        p.xy*=r(rot);\n        p.x -=us;\n    }\n     global_color = vec3(.0,0.,.8);\n    return min(min(v(p+ux),v(p)),\n               min(v(p+ux+(uy)*2.),v(p+ux+uy)));\n\n}\nfloat s(vec3 p,float rot,vec2 offset){\n if(rot == PI) {\n        p.xy*=r(rot);\n        p.x -=us*2.;\n        p.y -=us;\n    }\n    else if(rot == PI/2.) {\n        p.xy*=r(rot);\n        p.y -=us;\n    }\n    else if(rot == 3.*PI/2.) {\n        p.xy*=r(rot);\n        p.x -=us*2.;\n    }\n    global_color = vec3(.0,0.8,.0);\n    return min(min(v(p),v(p+ux)),\n               min(v(p+(uy)+ux),v(p+uy+ux*2.)));\n\n}\nfloat z(vec3 p,float rot,vec2 offset){\n if(rot == PI) {\n        p.xy*=r(rot);\n        p.x -=us*2.;\n        p.y -=us;\n    }\n    else if(rot == PI/2.) {\n        p.xy*=r(rot);\n        p.y -=us;\n    }\n    else if(rot == 3.*PI/2.) {\n        p.xy*=r(rot);\n        p.x -=us*2.;\n    }\n    global_color = vec3(.8,0.0,.0);\n    return min(min(v(p+ux),v(p+ux*2.)),\n               min(v(p+(uy)),v(p+uy+ux)));\n\n}\n// 1D random numbers\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\n\n\n\nbool activate=false;\n\nfloat fig(vec3 p) {\n             p.x -= us + us*.5;\n             p.y -= us + us*.5;\n            activate=false;\n            float choice = mod(floor(iTime),2.0);\n            float choiceFig = mod(ceil(iTime),7.0);\n            float selected;\n       \n              \n             float rot = 0.;\n             if(mod(floor(iTime*2.),4.0)==1.0){\n                rot = PI;\n             } else if(mod(floor(iTime),4.0)==2.0) {\n                rot = PI/2.;\n             } else if(mod(floor(iTime),4.0)==3.0) {\n                rot = 3.*PI/2.;\n             }\n             vec3 pp = p;\n             //pp.xy *=r(PI);\n             float rnd = floor(rand(choice+iTime*.00001)*6.);\n             float rnd2= floor(rand(choice-iTime*.00001)*6.);\n             if(choiceFig == 1.0) {\n              selected =  s(pp,rot,vec2(rnd,rnd2));\n             } else if(choiceFig == 2.0){\n                selected =  l(pp,rot,vec2(rnd,rnd2));\n             }else if(choiceFig == 3.0){\n                selected =  j(pp,rot,vec2(rnd,rnd2));\n             }else if(choiceFig == 4.0){\n                selected =  sq(pp,rot,vec2(rnd,rnd2));\n             }else if(choiceFig == 5.0){\n                selected =  b(pp,rot,vec2(rnd,rnd2));\n             }else if(choiceFig == 6.0){\n                selected =  t(pp,rot,vec2(rnd,rnd2));\n             } else {\n             selected =  z(pp,rot,vec2(rnd,rnd2));\n             }\n             float g = 100000.;\n             for(float y=0.;y<=3.;y++){\n                    for(float x=0.;x<=3.;x++){\n                         vec3 offset = vec3(ux.x*x,uy.y*y,0.);\n                         float cube = v(p+offset);\n                         g = min(g,cube); \n                     \n                    }\n             }\n             if(abs(g-selected) <=.00001){\n                activate = true;\n             }\n             return min(g,selected)*.9;\n            \n         \n}\nfloat SDF(vec3 p) {\n     \n      p.xz *=r(.5*cos(iTime+p.y));\n       p.yz*=r(.5*sin(iTime+p.x));\n       //p.xy *= r(iTime);\n     \n     return fig(p);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro =vec3(0.0001,0.00001,-1.5),\n    p = ro,\n    rd = normalize(vec3(uv,1.)),\n    col = vec3(0);\n  \n    float shad = 0.;\n    bool hit = false;\n    \n    for(float i=0.;i < ITER; i++) {\n      float d = SDF(p);\n        if(d< 0.00001) {\n        \n            hit = true;\n            shad = i / ITER;\n            break;\n        }\n        p += d*rd;\n    }\n    \n    if(hit) {\n        if(activate) {\n        \n          \n            col = global_color;\n        } else {\n            col = vec3(1.-+shad);\n        }\n        \n    }\n   \n     \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}