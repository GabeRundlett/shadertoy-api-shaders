{
    "Shader": {
        "info": {
            "date": "1435446944",
            "description": "simplest way to draw a triangle i could think of.",
            "flags": 0,
            "hasliked": 0,
            "id": "lllSRM",
            "likes": 1,
            "name": "lame_triangle",
            "published": 3,
            "tags": [
                "triangle"
            ],
            "usePreview": 0,
            "username": "md",
            "viewed": 1784
        },
        "renderpass": [
            {
                "code": "/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;    \n\n    if (-p.x + 0.6*p.y < 0.0 && p.x + 0.6*p.y < 1. && -p.y < -0.2 && \n        !(-p.x + 0.6*p.y < -0.01 && p.x + 0.6*p.y < 0.99 && -p.y < -0.21))\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1);\n    }\n    else\n    {\n        fragColor = vec4(0.9, 0.9, 0.9, 1);\n    }\n}*/\n\n\n/* A much neater way thanks to FabriceNeyret's comment: */\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \tvec3 p  = vec3( fragCoord / iResolution.xy, -1.),\n    \t n1 = vec3(-1,.6,0),  n2 =vec3(1,.6,1),    n3 = vec3(0,-1,-.2), \n  \t  \t d  = vec3( dot(p,n1), dot(p,n2), dot(p,n3) );\n    fragColor = vec4( all(lessThan(d,vec3(.01))) && any(greaterThan(d,vec3(0)))  ? .1 : 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}