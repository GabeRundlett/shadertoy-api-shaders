{
    "Shader": {
        "info": {
            "date": "1470817199",
            "description": "Subdivision of space by alternating horizontal and vertical splits recusively",
            "flags": 0,
            "hasliked": 0,
            "id": "MlcGRl",
            "likes": 6,
            "name": "HV Splits",
            "published": 3,
            "tags": [
                "abstract",
                "recursive",
                "split",
                "zone"
            ],
            "usePreview": 0,
            "username": "benoitM",
            "viewed": 759
        },
        "renderpass": [
            {
                "code": "// Created by Benoit Marini - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst int iter = 10;\n\n\nfloat parts (int i, int j)\n{\n    float a=sin(float(i*j)+iTime*float(j)*0.33);\n    return 0.25+(a+1.)*0.25;\n}\n\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 colorForZone (vec2 res)\n{\n    float t = res.x/pow(2., float(iter))+res.y*0.15;\n    return palette(t,vec3(0.5),vec3(0.5),vec3(1.0),vec3(0.,0.33,0.66));\n}\n   \n\n\nvec2 HVdivide (vec2 p)\n{\n    int zone = 0;\n    int a=1;\n    //float cc= cos(iTime*1.);\n    float ss= sin(iTime*0.23);\n    \n    for (int i=0;i<iter;i++)\n\t{\n\t\tfloat seuil = parts(zone,i);\n        //float cc= cos(iTime*1.+float(zone));\n    \t//float ss= sin(iTime*1.+float(zone));\n\n        float tt=p.x;//cc*p.x+ss*p.y;\n        seuil-=ss*p.y;\n        float s=sign(tt-seuil);\n        s=(s+1.)*0.5;\n        zone+=a*int(s);\n        p.x =s*(p.x-seuil)/(1.-seuil) + (1.-s) *p.x/seuil;\n        a*=2;\n        p=vec2(p.y, 1.-p.x);\n    }\n    \n    return vec2(float(zone),1.-p.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = colorForZone(HVdivide(uv));\n\n    fragColor = vec4(col.xyz,1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}