{
    "Shader": {
        "info": {
            "date": "1630792324",
            "description": "thunderstorm in the mountains at night",
            "flags": 0,
            "hasliked": 0,
            "id": "fsdGWf",
            "likes": 28,
            "name": "thunderstorm",
            "published": 3,
            "tags": [
                "clouds",
                "sky",
                "thunderstorm",
                "night",
                "mountains",
                "lightning"
            ],
            "usePreview": 0,
            "username": "miloszmaki",
            "viewed": 1642
        },
        "renderpass": [
            {
                "code": "float rand(float x)\n{\n    return fract(sin(x)*75154.32912);\n}\n\nfloat rand3d(vec3 x)\n{\n    return fract(375.10297 * sin(dot(x, vec3(103.0139,227.0595,31.05914))));\n}\n\nfloat noise(float x)\n{\n    float i = floor(x);\n    float a = rand(i), b = rand(i+1.);\n    float f = x - i;\n    return mix(a,b,f);\n}\n\nfloat perlin(float x)\n{\n    float r=0.,s=1.,w=1.;\n    for (int i=0; i<6; i++) {\n        s *= 2.0;\n        w *= 0.5;\n        r += w * noise(s*x);\n    }\n    return r;\n}\n\nfloat noise3d(vec3 x)\n{\n    vec3 i = floor(x);\n    float i000 = rand3d(i+vec3(0.,0.,0.)), i001 = rand3d(i+vec3(0.,0.,1.));\n    float i010 = rand3d(i+vec3(0.,1.,0.)), i011 = rand3d(i+vec3(0.,1.,1.));\n    float i100 = rand3d(i+vec3(1.,0.,0.)), i101 = rand3d(i+vec3(1.,0.,1.));\n    float i110 = rand3d(i+vec3(1.,1.,0.)), i111 = rand3d(i+vec3(1.,1.,1.));\n    vec3 f = x - i;\n    return mix(mix(mix(i000,i001,f.z), mix(i010,i011,f.z), f.y),\n               mix(mix(i100,i101,f.z), mix(i110,i111,f.z), f.y), f.x);\n}\n\nfloat perlin3d(vec3 x)\n{\n    float r = 0.0;\n    float w = 1.0, s = 1.0;\n    for (int i=0; i<5; i++) {\n        w *= 0.5;\n        s *= 2.0;\n        r += w * noise3d(s * x);\n    }\n    return r;\n}\n\nfloat f(float y)\n{\n    float w = 0.4; // width of strike\n    return w * (perlin(2. * y) - 0.5);\n}\n\nfloat plot(vec2 p, float d, bool thicker)\n{\n    if (thicker) d += 5. * abs(f(p.y + 0.001) - f(p.y));\n    return smoothstep(d, 0., abs(f(p.y) - p.x));\n}\n\nfloat cloud(vec2 uv, float speed, float scale, float cover)\n{\n    float c = perlin3d(vec3(uv * scale, iTime * speed * 2.));\n    return max(0., c - (1. - cover));\n}\n\nfloat mountain(vec2 uv, float scale, float offset, float h1, float h2)\n{\n    float h = h1 + perlin(scale*uv.x + offset) * (h2 - h1);\n    return smoothstep(h, h+0.01, uv.y);\n}\n\nvec3 render(vec2 uv)\n{\n    float x = iTime + 0.1;\n\n    float m = 0.25; // max duration of strike\n    float i = floor(x/m);\n    float f = x/m - i;\n    float k = 0.4; // frequency of strikes\n    float n = noise(i);\n    float t = ceil(n-k); // occurrence\n    float d = max(0., n-k) / (1.-k); // duration\n    float o = ceil(t - f - (1. - d)); // occurrence with duration\n    float gt = 0.1; // glare duration\n    float go = ceil(t - f - (1. - gt)); // glare occurrence\n    \n    float lightning = 0.;\n    float light = 0.;\n    float glare = 0.;\n    \n    if (o == 1.) {\n        vec2 uv2 = uv;\n        uv2.y += i * 2.; // select type of lightning\n        float p = (noise(i+10.) - 0.5) * 2.; // position of lightning\n        uv2.x -= p;\n        \n        float strike = plot(uv2, 0.01, true);\n        float glow = plot(uv2, 0.04, false);\n        float glow2 = plot(uv2, 1.5, false);\n\n        lightning = strike * 0.4 + glow * 0.15;\n\n        float h = noise(i+5.); // height\n        lightning *= smoothstep(h, h+0.05, uv.y + perlin(1.2*uv.x + 4.*h)*0.03);\n        lightning += glow2 * 0.3;\n        light = smoothstep(5., 0., abs(uv.x - p));\n        glare = go * light;\n    }\n    \n    vec3 clouds =\n        vec3(0.5,0.7,1.) * mix(0.6, 0.9, cloud(uv, 0.2, 0.1, 1.0)) +\n        vec3(0.7,0.8,1.) * 0.6 * cloud(uv*vec2(0.5,1.), 0.06, 0.8, 0.8) +\n        vec3(0.9,0.9,1.) * 0.3 * cloud(uv*vec2(0.1,1.), 0.08, 5.5, 0.6) +\n        vec3(1.,1.,1.) * 0.4 * cloud(uv*vec2(0.1,1.), 0.07, 10., 0.5);\n    \n    float horizon = mountain(uv, 0.8, 9., 0.3, 0.6);\n    vec3 terrain = mix(vec3(0.25,0.3,0.3)*0.5, 1.5*vec3(0.15,0.2,0.3),\n        1. - (1. - mountain(uv, 0.8, 3., 0.2, 0.4)) * 0.5 - \n        (1. - mountain(uv, 0.8, 17.5, 0.05, 0.25)) * 0.5);\n    \n    vec3 background = mix(terrain, clouds, horizon);\n    background *= (0.2 + light * 0.5);\n    \n    return vec3(background + lightning + glare);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = 2. * uv.x - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n\tfragColor = vec4(render(uv),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}