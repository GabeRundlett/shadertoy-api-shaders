{
    "Shader": {
        "info": {
            "date": "1572842000",
            "description": " Piet Mondrian painting",
            "flags": 0,
            "hasliked": 0,
            "id": "3dcXWj",
            "likes": 3,
            "name": "Piet Mondrian painting",
            "published": 3,
            "tags": [
                "pietmondrianpainting"
            ],
            "usePreview": 0,
            "username": "zrcoy",
            "viewed": 635
        },
        "renderpass": [
            {
                "code": "//l is the dist along the x between left side of the rectangle to the left most border\n//other value the same respectively\nfloat Rect(vec2 st, float l, float b, float r, float t, float blur)\n{\n    float left_border = smoothstep(l,l+blur,st.x);\n    float bottom_border = smoothstep(b,b+blur,st.y);\n    float right_border = smoothstep(r,r+blur,1.f-st.x);\n    float top_border = smoothstep(t,t+blur,1.f-st.y);\n\treturn left_border*bottom_border*right_border*top_border;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x / iResolution.y;\n    vec3 color = vec3(0.0);\n    vec3 blue = vec3(0,0,1);\n    vec3 red = vec3(1,0,0);\n    vec3 yellow = vec3(1,1,0);\n    float blur = .001f;\n\n    //white rect on left top  (l,b,r,t)\n   \tfloat w_r_lt = Rect(st, .0f,.65f,.8f,.0f,blur);\n    //white rect on left middle\n    float w_r_lm = Rect(st, .0f,.2f,.8f,.38f,blur);\n\t\n    float w_r_bm = Rect(st, .22f , .0f, .2f, .82f, blur); \n    \n    float w_r_rb = Rect(st, .82f, .12f, .0f, .82f, blur);\n    \n    float r_r_tr = Rect(st, .22f, .2f, .0f, .0f, blur); \n    \n    float y_r_rb = Rect(st, .82f, .0f, .0f, .9f, blur);\n    \n    float b_r_lb = Rect(st, .0f, .0f, .8f,.82f, blur);\n    \n    \n    \n    // The multiplication of left*bottom will be similar to the logical AND.\n    color = vec3(w_r_lt + w_r_lm + w_r_bm +w_r_rb) + red * r_r_tr + yellow * y_r_rb + blue * b_r_lb;\n    \n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}