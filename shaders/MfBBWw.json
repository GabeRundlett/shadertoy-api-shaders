{
    "Shader": {
        "info": {
            "date": "1724994214",
            "description": "originals   https://www.shadertoy.com/view/lcsfzB https://www.shadertoy.com/view/4cXBWB https://www.shadertoy.com/view/MdXSzS",
            "flags": 0,
            "hasliked": 0,
            "id": "MfBBWw",
            "likes": 1,
            "name": "hexagon and galaxy",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution.xy\nfloat speed = 0.1750;\n\nfloat ball(vec2 p, float fx, float fy, float ax, float ay)\n{\n\tvec2 r = vec2(p.x + sin(time*speed / 2.0 * fx) * ax * 4.0, p.y + cos(time*speed/ 2.0 * fy) * ay * 4.0);\t\n\treturn .027 / length(r / sin(fy * time * 0.1));\n}\n#define SPEED 0.2\n#define CENTER vec2(0.0);\n#define MAX_RADIUS 1.\n#define DISTORTION_RADIUS 0.2\n#define INTRO_END 0.1\n#define OUTRO_START 0.5\n#define EASE 1.5\n#define CHROMATIC_ABERRATION 1\n#define CHROMATIC_ABERRATION_DIFF 0.2\n\nvec2 normalize_coord(vec2 pos) { return (pos/iResolution.xy*2.-1.)*vec2(iResolution.x/iResolution.y,1.)*.5+.5; }\n\nvec2 get_offset(float t, vec2 pos, vec2 uv) {\n    //float r = MAX_RADIUS*t-DISTORTION_RADIUS;\n    float r = MAX_RADIUS * t;\n    float d = length(pos-uv)-r; // d is the magnitude of distortion\n    vec2 dir = normalize(pos-uv);\n    float distortion_mask = 1.-smoothstep(0., DISTORTION_RADIUS, abs(d));\n    float smooth_intro_mask = smoothstep(0., INTRO_END, t);\n    float smooth_outro_mask = 1.-smoothstep(OUTRO_START, 1., t);\n    return dir*d*distortion_mask*smooth_intro_mask*smooth_outro_mask;\n}\nvec2 spherize(in vec2 uv, vec2 center, float strength)\n{\n    vec2 delta = uv - center;\n    float delta2 = dot(delta.xy, delta.xy);\n    float delta4 = delta2 * delta2;\n    float delta_offset = delta4 * strength;\n    return center + delta * (1.+delta_offset)/(1.+0.2*strength);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 U =fragCoord;\n    vec4 o =fragColor;\n    \n  float lineWidth = 3.0;\n  float frame = time * 60.0;\n  float innerCircle = resolution.y / 5.0;\n  \n  \tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\tvec2 p = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;\np.x *= resolution.x / resolution.y;\n\tvec2 pos = CENTER;\n    p=  spherize(uv,vec2(0.0,0.0),5.+5.*cos(iTime));\n    \n    float t3 = pow(fract(iTime*SPEED), 1./EASE); // t is the progress through the animation\n\n\n\n\n\tfloat col = 0.0 ,col2 = 0.0;\n\tcol += ball(p, 31.0, 22.0, 0.03, 0.09);\n\tcol += ball(p, 22.5, 22.5, 0.04, 0.04);\n\tcol += ball(p, 12.0, 23.0, 0.05, 0.03);\n\tcol += ball(p, 32.5, 33.5, 0.06, 0.04);\n\tcol += ball(p, 23.0, 24.0, 0.07, 0.03);\t\n\tcol += ball(p, 21.5, 22.5, 0.08, 0.02);\n\tcol += ball(p, 33.1, 21.5, 0.09, 0.07);\n\tcol += ball(p, 23.5, 32.5, 0.09, 0.06);\n\tcol += ball(p, 14.1, 13.5, 0.09, 0.05);\n\t\n\tcol2 += ball(p, 22.0, 27.0, 0.03, 0.05);\n\tcol2 += ball(p, 12.5, 17.5, 0.04, 0.06);\n\tcol2 += ball(p, 23.0, 17.0, 0.05, 0.02);\n\tcol2 += ball(p, 19.5, 23.5, 0.06, 0.09);\n\tcol2 += ball(p, 33.0, 14.0, 0.07, 0.01);\t\n\tcol2 += ball(p, 11.5, 12.5, 0.08, 0.04);\n\tcol2 += ball(p, 23.1, 11.5, 0.09, 0.07);\n\tcol2 += ball(p, 13.5, 22.5, 0.09, 0.03);\n\tcol2 += ball(p, 14.1, 23.5, 0.09, 0.08);\n\t\n\t\n  \n  vec2 p2 = abs(gl_FragCoord.xy - (resolution / 2.));\n  \n  float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p2.xy) + .07)) * 10.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n       p2*=ma;\n  float dist = (p2.x + p2.y) / 2.0;\n  dist += mix(frame, -frame, step(innerCircle, length(p2)));\n \n    vec2 R = iResolution.xy,\n         k = vec2(-.5, .866),\n         \n         m = vec2(-.259, .966),\n         t = vec2(1.866, 1),\n         u = 6. * abs(U+U-R)/R.y,p3;\n \n    \n     p3.xy+= get_offset(t3-CHROMATIC_ABERRATION_DIFF, pos, p3);\n    #define D(q)  \\\n         (\\\n         p3 = abs(dot(q, k) > 0. ? reflect(q, k) : q),\\\n         p3 = dot(p3, m) > 0. ? p.x++, reflect(p3, m) : p3,\\\n         p3.y -= 2.5 * floor(p/t).x,\\\n         p3 = mod(p3, t) - abs(k).yx,   \\\n         abs(abs(p3.yyxy) + min(p3.x, 0.)*mod(floor(dist / lineWidth), 10.0) * .58)\\\n         ) \n         \n         \n  vec4   fragColor2 = .8-.01/min(D(u),D(u.yx));\n    \n    float v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\nuv*=2.*cos(iTime*0.51);\n\n\tfloat s = 0.0;\n\tfor (int i = 0; i <100; i++)\n\t{\n    \t\n\t\tvec3 p = s * vec3(uv, 0.0);\n\tp.xy*=ma* get_offset(t3-CHROMATIC_ABERRATION_DIFF, pos, uv);\n    p.xy*=get_offset(t3-CHROMATIC_ABERRATION_DIFF, pos,uv);\n\t\tp += vec3(.22, 0.3, s - 1.5 - sin(iTime * 1.13) * .1)+fragColor2.xyz;\n\t\tfor (int i = 0; i < 10; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.7 + sin(length(uv.xy * 130.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0005 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= mix(.7, .5, len);\n\tv2 *= smoothstep(.2, .20, len);\n\tv3 *= mix(.5, .0, len);\n\t\n\tvec3 col4 = vec3( v3 * (2.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n    fragColor=vec4(min(pow(abs(col4), vec3(1.2)), 1.0)+col*0.1+col2*0.1, 1.0);\n\n\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}