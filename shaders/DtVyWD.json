{
    "Shader": {
        "info": {
            "date": "1700234902",
            "description": "My 1st tunnel! A 3D example to demo the real world behavior of flat texture filtering & mipmaps.\nClick & Drag!\n[url=https://www.shadertoy.com/playlist/fX2cWm]PIXEL PLAYLIST[/url]\n[url=https://www.shadertoy.com/playlist/fXjyRd]GEOMETRY PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "DtVyWD",
            "likes": 10,
            "name": "Texture Smoothing Tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "flat",
                "texture",
                "aliasing",
                "filtering",
                "mipmap",
                "magnification",
                "smooth",
                "bilinear",
                "anti",
                "minification",
                "reconstruction"
            ],
            "usePreview": 1,
            "username": "domrally",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "/*\nby Dom Mandy in 2023\n*/\nfloat flatstep(float a, float b, float x) { float t = clamp((x - a) / (b - a), 9e-8, 1. - 9e-8), h = atanh(cos(3.14 * t)), H = h * h; return .5 - .5 * sign(h) * sqrt(1. - exp(-H * (.14 * H + 1.27323949) / (.14 * H + 1.))); }\nvec2 flatstep(vec2 a, vec2 b, vec2 x) { return vec2(flatstep(a.x, b.x, x.x), flatstep(a.y, b.y, x.y)); }\nvec4 Texture(sampler2D s, vec2 i) { float t = float(textureSize(s, 0).x); vec2 j = i * t + .5; j = floor(j) + flatstep(vec2(0), vec2(1), fract(j)); return texture(s, (j - .5) / t); }\n\n\nvoid mainImage(out vec4 o, vec2 i) {\n    vec2 I = iResolution.xy;\n    i += i - I;\n    i /= I.y;\n\n    vec2 v = vec2(.01, .04) * iTime + vec2(\n        atan(i.y, i.x) / 6.28,\n        .3 / sqrt(length(i))\n    );\n\n    // jaggy\n    vec4 a = texelFetch(iChannel0, ivec2(v * 256. + 256.) % 256, 0),\n         // flat magnify & built in mipmap minify\n         b = mix(textureLod(iChannel0, v, .2 / length(i)), Texture(iChannel0, v), .5 * dot(i, i));\n\n    // controls\n    float f = mix(sin(iTime), (2. * iMouse.y - I.y) / I.y, max(0., sign(iMouse.z)));\n\n    o = mix(a, b, step(i.y, f)) * 2. * smoothstep(1.6, .0, sqrt(length(i))) * smoothstep(1.5 / I.y, .0, max(.0, .02 - abs(i.y - f)));\n}\n\n\n/*\nSEE ALSO\n\ntexture\nhttps://www.shadertoy.com/view/XsfGDn\nhttps://iquilezles.org/articles/texture\nhttps://en.wikipedia.org/wiki/Texture_filtering\n\nflat\nhttps://www.shadertoy.com/view/mdKfRR\nhttps://en.wikipedia.org/wiki/Mollifier\nhttps://en.wikipedia.org/wiki/Flat_function\nhttps://en.wikipedia.org/wiki/Error_function#Approximation_with_elementary_functions\n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}