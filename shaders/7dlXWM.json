{
    "Shader": {
        "info": {
            "date": "1618713706",
            "description": "Shadow volumes.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dlXWM",
            "likes": 9,
            "name": "2D Shadow Volumes",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "light",
                "shadows",
                "shadowvolumes"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "// Whether or not shadows can hide objects\n//#define OBSTRUCT\n\n// Utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\nstruct ShadowVol2D {\n    vec2 ap;\n    vec2 ad;\n    vec2 bp;\n    vec2 bd;\n};\n\n// Shadow volumes\nShadowVol2D shadowVolLine(in vec2 l, in vec2 a, in vec2 b) {\n    return ShadowVol2D(a, normalize(a - l), b, normalize(b - l));\n}\n\nShadowVol2D shadowVolDisc(in vec2 l, in float r) {\n    float t = acos(r / length(l));\n    vec2 a = atan(l.y, l.x) + vec2(-t, t);\n    vec2 c1 = vec2(cos(a.x), sin(a.x)) * r;\n    vec2 c2 = vec2(cos(a.y), sin(a.y)) * r;\n    return ShadowVol2D(c1, normalize(c1 - l), c2, normalize(c2 - l));\n}\n\nShadowVol2D shadowVolBox(in vec2 l, in vec2 b) {\n    vec2 s = vec2(l.x < 0.0 ? -1.0 : 1.0, l.y < 0.0 ? -1.0 : 1.0);\n    vec2 c1 = vec2(b.x * sign(b.y - abs(l.y)), b.y) * s;\n    vec2 c2 = vec2(b.x, b.y * sign(b.x - abs(l.x))) * s;\n    return ShadowVol2D(c1, normalize(c1 - l), c2, normalize(c2 - l));\n}\n\n// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisc(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, q.y));\n}\n\nfloat sdShadowVolume2D(in vec2 p, in vec2 ap, in vec2 ad, in vec2 bp, in vec2 bd) {\n    vec2 pa = p - ap, pb = p - bp, ba = bp - ap;\n\n    vec2 b = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    vec2 e1 = pa - ad * max(0.0, dot(pa, ad) / dot(ad, ad));\n    vec2 e2 = pb - bd * max(0.0, dot(pb, bd) / dot(bd, bd));\n\n    vec2 bap = vec2(-ba.y, ba.x), h = 0.5 * (ad + bd);\n    float s = sign(max(dot(pa, vec2(-ad.y, ad.x)) * dot(pb, vec2(-bd.y, bd.x)), dot(pa, bap) * sign(dot(bap, -h))));\n    return sqrt(min(dot(b, b), min(dot(e1, e1), dot(e2, e2)))) * s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 4.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n\n    // Default before interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse.xy = vec2(0.0);\n\n    // Inverse square (kinda)\n    vec2 toLight = uv - mouse.xy;\n    vec3 color = vec3(1.0 / (1.0 + dot(toLight, toLight)));\n\n    // Shapes and shadow volumes\n    vec2 la = vec2(-2.0, -0.5), lb = vec2(-1.5, 1.0);\n    ShadowVol2D lineShadow = shadowVolLine(mouse.xy, la, lb);\n    float lineShadowVol = sdShadowVolume2D(uv, lineShadow.ap, lineShadow.ad, lineShadow.bp, lineShadow.bd); // Shadow volume distance\n    float line = sdLine(uv, la, lb); // Line distance\n\n    vec2 bp = vec2(0.0, -1.0), bb = vec2(0.5, 0.2);\n    ShadowVol2D boxShadow = shadowVolBox(mouse.xy - bp, bb); // Object space\n    boxShadow.ap += bp, boxShadow.bp += bp; // Back to world space\n    float boxShadowVol = sdShadowVolume2D(uv, boxShadow.ap, boxShadow.ad, boxShadow.bp, boxShadow.bd); // Shadow volume distance\n    float box = sdBox(uv - bp, bb); // Box distance\n\n    vec2 cp = vec2(1.0, 0.8); float cr = 0.6;\n    ShadowVol2D discShadow = shadowVolDisc(mouse.xy - cp, cr); // Object space\n    discShadow.ap += cp, discShadow.bp += cp; // Back to world space\n    float discShadowVol = sdShadowVolume2D(uv, discShadow.ap, discShadow.ad, discShadow.bp, discShadow.bd); // Shadow volume distance\n    float disc = sdDisc(uv - cp, cr); // Disc distance\n\n    if (min(sdLine(mouse.xy, la, lb), min(sdBox(mouse.xy - bp, bb), sdDisc(mouse.xy - cp, cr))) > 0.0) {\n        // Draw shadow volumes\n        drawSDF(lineShadowVol, vec3(0.0));\n        drawSDF(boxShadowVol, vec3(0.0));\n        drawSDF(discShadowVol, vec3(0.0));\n\n        // Draw shapes\n        #ifdef OBSTRUCT\n        drawSDF(max(line, -min(boxShadowVol, discShadowVol)), vec3(1.0, 0.8, 0.0));\n        drawSDF(max(box, -min(lineShadowVol, discShadowVol)), vec3(0.8, 0.0, 0.0));\n        drawSDF(max(disc, -min(lineShadowVol, boxShadowVol)), vec3(0.0, 0.0, 1.0));\n        #else\n        drawSDF(line, vec3(1.0, 0.8, 0.0));\n        drawSDF(box, vec3(0.8, 0.0, 0.0));\n        drawSDF(disc, vec3(0.0, 0.0, 1.0));\n        #endif\n    }\n\n    // Light is inside an object\n    else {\n        color = vec3(0.0);\n        #ifndef OBSTRUCT\n        drawSDF(line, vec3(1.0, 0.8, 0.0));\n        drawSDF(box, vec3(0.8, 0.0, 0.0));\n        drawSDF(disc, vec3(0.0, 0.0, 1.0));\n        #endif\n    }\n\n    // Draw light\n    drawSDF(sdDisc(uv - mouse.xy, 0.05), vec3(1.0, 0.8, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}