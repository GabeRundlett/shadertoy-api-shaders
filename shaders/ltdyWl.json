{
    "Shader": {
        "info": {
            "date": "1534705485",
            "description": "I made this for https://maki.cat/portfolio",
            "flags": 1,
            "hasliked": 0,
            "id": "ltdyWl",
            "likes": 8,
            "name": "Maki's Snoise Bubbles",
            "published": 3,
            "tags": [
                "noise",
                "raymarch",
                "snoise"
            ],
            "usePreview": 0,
            "username": "MakiXx",
            "viewed": 688
        },
        "renderpass": [
            {
                "code": "vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}vec4 mod289(vec4 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}float snoise(vec3 v){ const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);vec3 i  = floor(v + dot(v, C.yyy) );vec3 x0 =   v - i + dot(i, C.xxx) ;vec3 g = step(x0.yzx, x0.xyz);vec3 l = 1.0 - g;vec3 i1 = min( g.xyz, l.zxy );vec3 i2 = max( g.xyz, l.zxy );vec3 x1 = x0 - i1 + C.xxx;vec3 x2 = x0 - i2 + C.yyy; vec3 x3 = x0 - D.yyy;      i = mod289(i); vec4 p = permute( permute( permute(  i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));float n_ = 0.142857142857; vec3  ns = n_ * D.wyz - D.xzx;vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  vec4 x_ = floor(j * ns.z);vec4 y_ = floor(j - 7.0 * x_ );    vec4 x = x_ *ns.x + ns.yyyy;vec4 y = y_ *ns.x + ns.yyyy;vec4 h = 1.0 - abs(x) - abs(y);vec4 b0 = vec4( x.xy, y.xy );vec4 b1 = vec4( x.zw, y.zw );vec4 s0 = floor(b0)*2.0 + 1.0;vec4 s1 = floor(b1)*2.0 + 1.0;vec4 sh = -step(h, vec4(0.0));vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;vec3 p0 = vec3(a0.xy,h.x);vec3 p1 = vec3(a0.zw,h.y);vec3 p2 = vec3(a1.xy,h.z);vec3 p3 = vec3(a1.zw,h.w);vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));p0 *= norm.x;p1 *= norm.y;p2 *= norm.z;p3 *= norm.w;vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);m = m * m;return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );}\n\nvec3 orange = vec3(1.0,0.1,0);\nvec3 black = vec3(0,0,0); // Tomorrow Grey\n\nvec3 red = vec3(0xF4,0x43,0x36)/256.0; // Material Red\nvec3 purple = vec3(0x9C,0x27,0xB0)/256.0; // Material Purple\nvec3 pink = vec3(0xE9,0x1E,0x63)/256.0; // Material Pink\nvec3 cyan = vec3(0x00,0xBC,0xD4)/256.0; // Material Cyan\n\nvec3 cute = vec3(0xFF,0x8C,0x8C)/256.0; // Cute Salmon\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 fragRo, in vec3 fragRd) {\n    vec2 uv = -1.0+2.0*fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n\n\tvec3 cam = vec3(iMouse.xy*0.005,iTime*0.08);\n\n\tvec3 ro = fragRo;\n\tvec3 rd = fragRd;\n\n\tfloat c = 4.0;\n\n\tfor (float step=0.0; step<64.0; step+=1.0) {\n\t\tvec3 p = cam+ro+((rd*0.08)*step);\n\n\t\tfloat d = snoise(p);\n\t\tc = length(cam-p);\n\n\t\tif (d>0.5 && c>1.0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tc = (c>4.0)? 0.0: (4.0-c)*0.25;\n\tfragColor = vec4(mix(purple, orange, c)*c, 1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = -1.0+2.0*fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n\n\tvec3 cam = vec3(iMouse.xy*0.005,iTime*0.08);\n\n\tvec3 ro = vec3(0,0,0);\n\tvec3 rd = normalize(vec3(uv.xy,1));\n\n\tfloat c = 4.0;\n\n\tfor (float step=0.0; step<64.0; step+=1.0) {\n\t\tvec3 p = cam+ro+((rd*0.08)*step);\n\n\t\tfloat d = snoise(p);\n\t\tc = length(cam-p);\n\n\t\tif (d>0.5 && c>1.0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tc = (c>4.0)? 0.0: (4.0-c)*0.25;\n\tfragColor = vec4(mix(purple, orange, c)*c, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}