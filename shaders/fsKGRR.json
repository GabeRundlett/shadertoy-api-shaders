{
    "Shader": {
        "info": {
            "date": "1631186390",
            "description": "Do you like noise? Well slice it thick and rotate it on an isometric angle and call me happy! ( mouseable and stuff )",
            "flags": 0,
            "hasliked": 0,
            "id": "fsKGRR",
            "likes": 30,
            "name": "Stacked Slices of Noise",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "text",
                "transparent",
                "data"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Stacked Slices of Noise\n    @byt3_m3chanic | 09/08/21\n\n    Saw something on twitter and went - how would I build that.\n    Not toally happy with the noise \"slices\" doing a max of a\n    squre sdf + noise value.. Not as clean as I'd like...\n    \n    doing some concept shaders as background art in webpages.\n    scroll bar controls the noise - drag to spin.\n    https://longscroll-shader.surge.sh/\n\n*/\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MIN_DIST .001\n#define MAX_DIST 90.\n\n// Fabrice Neyret https://www.shadertoy.com/view/llySRh\n////////////////////////////////////////////////////////\n// text and font stuff\nint CAPS=0;\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.44;\n#define C(c) spc O+= char(U,64+CAPS+c);\n\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\nvec4 pInt(vec2 p, float n) {  \n// webGL2 variant with dynamic size\n    vec4 v = vec4(0);\n    for (int i = int(n); i>0; i/=10, p.x += .5 )\n        v += char(p, 48+ i%10 );\n    return v;\n}\n////////////////////////////////////////////////////////\n// end text and font stuff\n\n//linear step timing function - book of shaders\nfloat lsp(float begin, float end, float t) { return clamp((t - begin) / (end - begin), 0.0, 1.0); }\n//utils\nmat2 rot (float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21( vec2 p ) { return fract(sin(dot(p,vec2(23.43,84.21))) *4832.3234); }\n\n// @morgan3d https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n    float a = hash21(i);\n    float b = hash21(i + vec2(1., 0.));\n    float c = hash21(i + vec2(0., 1.));\n    float d = hash21(i + vec2(1., 1.));\n    vec2 u = f * f * (3.-2.*f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1. - u.x) + (d - b)* u.x * u.y;\n}\n\n//@iq 2Dbox functions and extrude\nfloat box( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat opx(in float sdf, in float pz, in float h){\n    vec2 w = vec2( sdf, abs(pz) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\n//globals\nvec3 hit,hitPoint;\nvec2 mtack;\nmat2 r21,rx,ry;\nfloat tmod=0.,time=0.,ga1=0.,ga2=0.,ga4=0.;\nfloat sns,gns;\n\nconst float size = .525;\nconst float hlf = size/2.;\nconst float dbl = size*2.;\n\nvec2 map(vec3 p) {\n    vec2 res = vec2(1e5,0);\n    vec3 o=p;\n    p+=vec3(-7,0,0);\n    p.xz*=r21;\n    \n    float id;\n    vec3 q;\n    p.y+= ga1;\n    for(int i = 0; i<2; i++)\n    {\n        float cnt = i<1 ? size : dbl;\n        q = vec3(p.x,p.y-cnt,p.z);\n        \n        id = floor(q.y/dbl) + .5;\n        q.y -= id*dbl;\n        float ns = 0.;\n        if(length(q.xz)<8.) {\n            ns = noise((q.xz*.35)+abs(id*.20)+mtack);\n            ns+= noise((q.zx*.85)-abs(id*.24)+mtack)*.45;\n        }\n        \n        ns=smoothstep(.55,.85,clamp(ns,0.,1.))*.45;\n        if(ns<.0125)ns=0.;\n        \n        float nz = box(q.xz,vec2(6.5,4.5));\n        float d = opx(max(ns,nz), q.y, .1+.09*sin(p.y*.5));\n        if(d<res.x){\n            res = vec2(d,3.);\n            hit = q;\n            gns=id;\n        }\n        \n        vec3 r = vec3(abs(q.x),q.y,abs(q.z))-vec3(5,0,6);\n        float pl = box(r.xz,vec2(1.75,.25));\n        float d9 = opx(pl, r.y, 1.);\n        if(d9<res.x) {\n            res = vec2(d9,1.);\n            hit=r;\n        }\n    }\n    return res;\n}\n// Tetrahedron technique @iq\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t, float mindist){\n    float e = mindist*t;\n    vec2 h = vec2(1.0,-1.0);\n    return normalize( h.xyy*map( p + h.xyy*e).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e).x );\n}\n//@iq https://iquilezles.org/articles/palettes\nvec3 hue(float t){ \n    vec3 d = vec3(0.808,0.318,0.051);\n    return .75 + .425*cos(PI2*t*(vec3(0.839,0.961,0.929)+d)); \n}\n\nvec3 render(vec3 p, vec3 rd, vec3 ro, float d, float m, inout vec3 n){\n    n = normal(p,d,1.01);\n    vec3 lpos =  vec3(-9,8,9);\n    vec3 l = normalize(lpos-p);\n\n    float diff = clamp(dot(n,l),.03,1.);\n    diff += clamp(dot(n,vec3(-1,1,-1)),.0,1.)*.15;\n    float riff = diff;\n    float shadow = 0.;\n    for(int i=0;i<20;i++)\n    {\n        vec3 q = (p + n * .1) + l * shadow;\n        float h = map(q).x;\n        if(h<MIN_DIST*d||shadow>MAX_DIST)break;\n        shadow += h;\n    } \n    if(shadow < length(p -  lpos)) riff *= .15;\n    diff = mix(diff,riff,.65);\n\n    vec3 h = vec3(0);\n    if(m==3.) h = hue(sns*.03);\n    if(m==1.) h = vec3(0.514,0.725,0.702);\n    \n    return vec3(h*diff);\n}\n\nvoid overLay(inout vec3 C, vec2 p) {\n\n    float dsz = 4.;\n    float dhf = 2.;\n    vec2 uv = p*5.;\n    float px = fwidth(p.x);\n    p.y+=ga1*.06;\n    p*=140.;\n    float id = floor((p.y+dhf)/dsz);\n    vec2 grid=p+vec2(53.5,0);\n    \n    grid.y=mod(grid.y+dhf,dsz)-dhf;\n\n    vec2 mvt = floor((mtack*50.)+.5);\n    float hs = noise((vec2(id,mvt))*.25);\n\n    float b = box(grid-vec2(2.5+hs*5.5,0),vec2(hs*5.5,1.75));\n    b=smoothstep(.02+px,-px,b);\n\n    C =mix(C,C+(hue(hs)*.3),b);\n \n    float mpt = length(uv+vec2(2.75,mtack.x-2.5))-.425;\n      mpt = min(length(uv+vec2(4.  ,mtack.y-2.5))-.425, mpt);\n    mpt=abs(mpt)-.025;\n    mpt=smoothstep(.02+px,-px,mpt);\n    C =mix(C,C+.2,mpt);\n    \n    vec2 fgd = grid;\n    vec4 O = vec4(0);\n    float FontSize = 5.25;\n    fgd.xy/=FontSize;\n\n    O = pInt(fgd.xy+vec2(.625,.5), floor(hs*10.)+1.);\n    float ck=smoothstep(-px,.05+px,O.x);\n    C =mix(C,C+.2,ck);\n    \n    O = pInt((uv)+vec2(3.225 ,mtack.x-1.995), floor(mtack.x)+2.);\n    ck= smoothstep(-px,.05+px,O.x);\n    C =mix(C,C+.2,ck);\n    \n    O = pInt((uv)+vec2(4.48 ,mtack.y-1.995), floor(mtack.y)+2.);\n    ck= smoothstep(-px,.05+px,O.x);\n    C =mix(C,C+.2,ck);\n}\n\nfloat zoom = 18.;\nvoid mainImage( out vec4 O, in vec2 F ) {\n\n    // precal all your vars\n    time = T;\n    tmod = mod(time, 10.);\n    mtack = M.xy==vec2(0)? vec2(1.,4.) : (M.xy/R.xy)*5.;\n    \n    float t1 = lsp(0.0, 4.0, tmod);\n    float t2 = lsp(4.0, 10.0, tmod);\n    ga4 = (t2)+floor(time*.1);\n    ga1 = (t1+floor(time*.1))*10.;\n    r21 = rot(ga4*PI);\n    // \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n\n    //orthographic camera\n    vec3 ro = vec3(uv*zoom,-zoom);\n    vec3 rd = vec3(0,0,1.);\n\n    rx = rot(-0.5259);\n    ry = rot(0.78539);\n                \n    ro.yz *= rx;ro.xz *= ry;\n    rd.yz *= rx;rd.xz *= ry;\n\n    vec3 C = vec3(0);\n    vec3  p = ro + rd;\n    float atten = .9;\n    float k = 1.;\n    float d = 0.;\n    for(int i=0;i<164;i++)\n    {\n        vec2 ray = map(p);\n        vec3 n=vec3(0);\n        float m = ray.y;\n\n        d = i<12||i>132 ? ray.x*.3 : ray.x;\n        p += rd * d * k;\n        float tg=0.;\n        if (d*d < 1e-6) {\n            hitPoint = hit;\n            sns=gns;\n            tg=1.;\n            \n            C+=render(p,rd,ro,d,ray.y,n)*atten;\n            if(m==3.)break;\n            \n            atten *= .8;\n            p += rd*.01;\n            k = sign(map(p).x);\n\n            float fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 9.);\n            fresnel = mix(.0, .9, fresnel);\n\n            if(int(F.x)%4 != int(F.y)%4) {\n                vec3 rr = refract(rd,n,.55);\n                rd=mix(rr,rd,fresnel);\n            }else{\n                rd=reflect(-rd,n);\n                p+=n*.01;\n            }\n        } \n\n        \n        if(distance(p,rd)>55.) {         \n            if(tg==0.) C=mix(vec3(0.400,0.576,0.541),C,clamp(uv.x+1.,0.,1.));\n            break; \n       }\n    }\n\n\n    C = mix(C,C+.055,hash21(uv));\n    C = clamp(C,vec3(.03),vec3(1));\n    \n    overLay(C,uv);\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n\n//end\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}