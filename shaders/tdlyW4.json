{
    "Shader": {
        "info": {
            "date": "1584826939",
            "description": "A spiral I've been experimenting with to create a milky way",
            "flags": 0,
            "hasliked": 0,
            "id": "tdlyW4",
            "likes": 4,
            "name": "Spiral Distance Function",
            "published": 3,
            "tags": [
                "spiralsdf"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "const float a=1.0;\nconst float b=.1759;\nconst float PI=3.14159265359;\n\nfloat spiralSDF(vec2 p,vec2 c){\n    // t = theta\n    p = p - c;\n    float t=atan(p.y, p.x) + iTime*8.0;\n    // t=(t+PI)/(2.*PI);\n    float r=length(p.xy);\n    \n    float n=(log(r/a)/b-t)/(2.*PI);\n\n    // Cap the spiral\n    // float nm = (log(0.11)/b-t)/(2.0*PI);\n    // n = min(n,nm);\n    // return (n+1.0)/100.0;\n    float upper_r=a*exp(b*(t+2.*PI*ceil(n)));\n    float lower_r=a*exp(b*(t+2.*PI*floor(n)));\n    // float lower_r = 0.0;\n    \n    return min(abs(upper_r-r),abs(r-lower_r));\n}\n\nvoid mainImage(out vec4 O,vec2 I)\n{\n    vec2 R=iResolution.xy;\n    vec2 uv=(2.*I-R)/R.y;\n    // vec2 c = vec2(sin(iTime)/1.7, cos(iTime)/1.7);\n    vec2 c = vec2(0.7*sin(iTime*1.3), 0.3*sin(iTime)*2.0);\n     float r=length(uv);\n    float d = spiralSDF(uv,vec2(c));\n    float v = d;\n    // Alter distance for prettier visualizat\n    O.rgb=vec3(v);\n    // O.rgb = O.rgb*1.0/r;\n    // O.xy=uv;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}