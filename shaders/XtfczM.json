{
    "Shader": {
        "info": {
            "date": "1503937937",
            "description": "I too wanted to make a sound visualizer from aiekick great [url]https://www.shadertoy.com/view/4t2SWW[/url]",
            "flags": 96,
            "hasliked": 0,
            "id": "XtfczM",
            "likes": 13,
            "name": "Sound experiment on experiment",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 896
        },
        "renderpass": [
            {
                "code": "// Original Shader by aiekick\n// https://www.shadertoy.com/view/4t2SWW\n\n// Remixed by Anton\n\nfloat dstef = 0.0;\n\n\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 grad(float f)\n{\n    return pal( f, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n} \n\n// based on my 2d shader https://www.shadertoy.com/view/llSSWD\nvec3 effect(vec2 g) \n{\n    float t = iTime * 1.5;\n    g /= 50.;\n    g.x += 0.55;\n    g.y += .1;\n    //g.y -= t*.1 ;\n\tg.x +=  sin(g.y *15. + t*.2) * .05  ;\n\t\n    float inputTex = textureLod(iChannel1, g,2. + 4.*(sin(t)*.5+.5)).r;\n\tvec3 c = grad(1. - inputTex);//textureLod(iChannel1, g, 4.*(sin(t)*.5+.5)).rgb;\n\tc = smoothstep(c+.5, c, vec3(.71));\n    return c;\n}\n\nvec2 rot(vec2 s, float a)\n{\n    float sa = sin(a);float ca = cos(a);\n    return mat2(ca,-sa,sa,ca) * s;\n}\n\n///////FRAMEWORK////////////////////////////////////\n#define mPi 3.14159\n#define m2Pi 6.28318\nvec2 uvMap(vec3 p)\n{\n\tp = normalize(p);\n    \n\tvec2 tex2DToSphere3D;\n\ttex2DToSphere3D.x = 0.5 + atan(p.z, p.x) / m2Pi;\n\ttex2DToSphere3D.y = 0.5 - asin(p.y) / mPi;\n\treturn tex2DToSphere3D;\n}\n\nvec4 displacement(vec3 p)\n{\n   // p.xy = rot(p.xy,1.);\n\tvec3 col = effect(p.xz);\n    \n\tcol = clamp(col, vec3(0), vec3(1.));\n\tfloat dist = dot(col,vec3(0.3)); \n    \n\treturn vec4(dist,col);\n}\n\n////////BASE OBJECTS///////////////////////\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\nfloat osphere( vec3 p, float r ){ return length(p)-r;}\n////////MAP////////////////////////////////\nvec4 map(vec3 p)\n{\n\tfloat scale = 1.; // displace scale\n\tfloat dist = 0.;\n    \n\tfloat x = 6.;\n\tfloat z = 6.;\n    \n\tvec4 disp = displacement(p);\n        \n\tfloat y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n\tdist = osphere(p, +5.-y);\n    \n\treturn vec4(dist, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n        map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n        map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n        map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n\tfloat sca = 1.0;\n\tfor( int i=0; i<5; i++ )\n    \n\t{\n\t\tfloat hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n\treturn clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cam_a = -1.7; // angle z\n    \n    float cam_e = 8.; // elevation\n    float cam_d = 4.; // distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); //Change camere view here\n  \tfloat li = 0.6; // light intensity\n    float prec = 0.00001; // ray marching precision\n    float maxd = 50.; // ray marching distance max\n    float refl_i = .6; // reflexion intensity\n    float refr_a = 1.2; // refraction angle\n    float refr_i = .8; // refraction intensity\n    float bii = 0.35; // bright init intensity\n    float marchPrecision = 0.25; // ray marching tolerance precision\n    \n    /////////////////////////////////////////////////////////\n    \n    float swingTime = iTime;\n    cam_e = (sin(swingTime * .2) * 3.) + 8.;\n    \n    \n    /////////////////////////////////////////////////////////\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = prec;\n    //rd.xz = rot(rd.xz,1.7);\n    vec3 ray, cubeRay;\n    \n    for(int i=0;i<250;i++)\n\t{      \n\t\tif (s<prec||s>maxd) break;\n\t\ts = map(p).x*marchPrecision;\n\t\td += s;\n\t\tp = ro+rd*d;\n\t}\n\n\tif (d<maxd)\n\t{\n\t\tvec2 e = vec2(-1., 1.)*0.005; \n\t\tvec3 n = calcNormal(p, 0.1);\n\n\t\tb=li;\n\n\t\tray = reflect(rd, n);\n\t\tcubeRay = texture(iChannel0, ray).rgb  * refl_i ;\n\n\t\tray = refract(ray, n, refr_a);\n\t\tcubeRay += texture(iChannel0, ray).rgb * refr_i;\n\n\t\tcol = cubeRay+pow(b,15.); \n\n            \n            // lighting        \n\t\tfloat occ = calcAO( p, n );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n\t\tfloat dif = clamp( dot( n, lig ), 0.0, 1.0 );\n\t\tfloat bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n\t\tfloat dom = smoothstep( -0.1, 0.1, cubeRay.y );\n\t\tfloat fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n\t\tbrdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n\t\tbrdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n\t\tbrdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n\t\tbrdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n\t\tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n\t\tcol = mix(col, map(p).yzw, 0.5);\n\n\t}\n\telse\n\t{\n\t\tcol = texture(iChannel0, rd).rgb;\n\t}\n\n    //col *= dstef;\n    \n    if(iMouse.z <= 0.)\n\t\tfragColor.rgb = col;\n    else\n        fragColor = texture(iChannel1,fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DEFFIL 2.\n\nfloat damp = .005;\n\n//from https://www.shadertoy.com/view/ltlyRM\n//from https://stackoverflow.com/questions/35799286\nfloat toLog(float value, float min, float max){\n\tfloat exp = (value-min) / (max-min);\n\treturn min * pow(max/min, exp);\n}\n\nfloat getLevel(float samplePos){\n    // the sound texture is 512x2\n\tint tx = int(samplePos*512.0);\n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\treturn texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    \n    \n    ////logarithmic sampling\n    //float xPos = toLog(uv.x, 0.01, 1.0);\n    //float now = getLevel(xPos);\n    \n    ////linear sampling\n    float now = texture(iChannel0,vec2(uv.x, .0)).x;\n    \n    \n    now -= .255;\n    now *= 2.;\n    \n   // fragColor = vec4(0.);\n\n    fragColor = vec4(now);\n    \n    if(fragCoord.y > DEFFIL)\n    {\n        float pastY = floor(fragCoord.y * DEFFIL) / DEFFIL - DEFFIL;\n        pastY /= iResolution.y;\n        vec4 past = texture(iChannel1,vec2(uv.x, pastY));\n        fragColor = past;\n    }\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 11858,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/myroneofficial/groove-ritual"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}