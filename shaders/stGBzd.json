{
    "Shader": {
        "info": {
            "date": "1665040282",
            "description": "golfing 1440 chars \"Squaring the Torus\" by jt. [url] https://shadertoy.com/view/7lyfzK  [/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "stGBzd",
            "likes": 10,
            "name": "Squaring the Torus (400 chars)",
            "published": 3,
            "tags": [
                "simple",
                "torus",
                "torus",
                "square",
                "tileable",
                "order",
                "short",
                "24",
                "golf",
                "golfing",
                "3tweets",
                "perfect",
                "squared",
                "squaring",
                "181",
                "gambini"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "// golfing 1440 chars \"Squaring the Torus\" by jt. https://shadertoy.com/view/7lyfzK\n\n\nvoid mainImage( out vec4 O, vec2 U ) { \n    O *= 0.;                     \n    for( int n = 0; n < 23; n++ ) {\n        ivec2 i = ivec2( mod( U-iMouse.xy                                                                          // squares:\n                             -vec2( int[](93,95,93,61,19,166,165,148, 0,95,71,93,71,  0,61,-15,148,30,19,118,98,98,  0)[n], // x\n                                    int[](75,98,45,77,87,49 ,33 ,33 ,45,75,77,50,101,98,45, 64,  0,87,45, 50, 0,98,-53)[n]  // y\n                            ) ,181.) ); \n        i *= i -                    int[]( 2, 3, 5,10,11,15, 16, 17, 19,23,24,25, 27,30,32, 34, 33,41,42 ,48,50,83, 98)[n]; // s\n        i.x < 0 && i.y < 0 ? O = .8 + .2 * cos( vec4(n,n+23,n+21,n) +3. ) : O;\n    }\n}\n\n\n\n\n\n\n/** // 409 chars\n\nvoid mainImage( out vec4 O, vec2 U ) {      //  square: ( x , y )  s\n    int[] C = int[](  93, 75 ,  2 ,     95, 98 ,  3 ,    93, 45 ,  5 ,     61, 77 , 10 ,\n                      19, 87 , 11 ,    166, 49 , 15 ,   165, 33 , 16 ,    148, 33 , 17 ,\n                       0, 45 , 19 ,     95, 75 , 23 ,    71, 77 , 24 ,     93, 50 , 25 ,\n                      71,101 , 27 ,      0, 98 , 30 ,    61, 45 , 32 ,    -15, 64 , 34 ,\n                     148,  0 , 33 ,     30, 87 , 41 ,    19, 45 , 42 ,    118, 50 , 48 ,\n                      98,  0 , 50 ,     98, 98 , 83 ,     0,-53 , 98                     );\n    O *= 0.;                     \n    for( int n = 0; n < 23; n++ ) {\n        ivec2 i = ivec2( mod( U-iMouse.xy -vec2(C[3*n],C[3*n+1]) ,181.) ); \n        i *= i - C[3*n+2];\n        i.x < 0 && i.y < 0 ? O = .8 + .2 * cos( vec4(n,n+23,n+21,n) +3. ) : O;\n    }\n}\n\n\n\n\n\n\n/** // 428 chars   -16\n\n\nivec2 i; float n=3.;\n#define S(X,Y,s)                                                     \\\n    i = ivec2( mod( U-iMouse.xy -vec2(X,Y) ,181.) ), i *= i-s;       \\\n    i.x < 0 && i.y < 0 ? O = .8 + .2 * cos( n + vec4(0,23,21,0)) :O; \\\n    n++;\n    \nvoid mainImage( out vec4 O, vec2 U ) {\n    O *= 0.;\n    S(  93, 75 ,  2 )\n    S(  95, 98 ,  3 )\n    S(  93, 45 ,  5 )\n    S(  61, 77 , 10 )\n    S(  19, 87 , 11 )\n    S( 166, 49 , 15 )\n    S( 165, 33 , 16 )\n    S( 148, 33 , 17 )\n    S(   0, 45 , 19 )\n    S(  95, 75 , 23 )\n    S(  71, 77 , 24 )\n    S(  93, 50 , 25 )\n    S(  71,101 , 27 )\n    S(   0, 98 , 30 )\n    S(  61, 45 , 32 )\n    S( -15, 64 , 34 )\n    S( 148,  0 , 33 )\n    S(  30, 87 , 41 )\n    S(  19, 45 , 42 )\n    S( 118, 50 , 48 )\n    S(  98,  0 , 50 )\n    S(  98, 98 , 83 )\n    S(   0,-53 , 98 )\n}\n\n/**/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}