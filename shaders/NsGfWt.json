{
    "Shader": {
        "info": {
            "date": "1659490387",
            "description": "Simulation of light rays bouncing inside Roger Penrose's solution to the \"unilluminable room\" problem.\n* Mouse to choose your own starting point\n* Arrow keys to limit the light ray only to that direction\n* Shift to debug draw the SDF",
            "flags": 48,
            "hasliked": 0,
            "id": "NsGfWt",
            "likes": 12,
            "name": "Penrose Unillumulinable Room",
            "published": 3,
            "tags": [
                "reflection",
                "illumination",
                "penrose"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2022\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  Demonstration of Roger Penrose's solution to the \"unilluminable room\" problem, presented\n//  in the 1958 Christmas edition of New Scientist magazine. The question is, can you\n//  build a room with mirrored walls, such that a light source anywhere in the room cannot\n//  shed light on the entire room?\n//\n//  The yellow lines are simulated rays of light originating from the blue dot. They should\n//  not* be able to reach any part of the room that is highlighted in red. \n//\n//  The way the optics works is that the top and bottom arcs are ellipses, and the corners of\n//  the \"arms\" are located at the ellipses' foci. You may know that light passing through one\n//  focus of an ellipse is guaranteed to pass through the other. But they key observation\n//  that makes this room work is that light coming from \"outside\" one focus will bounce\n//  to \"outside\" the other (and \"inside\" bounces to \"inside\").\n// \n//  * So, actually although this \"demonstrates\" the principle of the idea, it seems like\n//  precision issues are preventing it from working perfectly. I'm \"cheating\" in two ways:\n//      a) I'm letting the ray pass through the corners very close to the ellise foci\n//      b) In the attract mode, I only cycle among 20 light locations that don't happen to exhibit the problem\n//\n//  You'll find that if you use the mouse very much, especially if you increase NUM_LINES, it\n//  won't take too long to find some lines occasionally crossing the red area. I am considering\n//  it fair to say that I'm demonstrating the concept since it works at least 90% of the time.\n//  If anyone knows how to fix it, advice is appreciated!\n// \n//  Sources:\n//      https://en.wikipedia.org/wiki/Illumination_problem\n//      https://www.youtube.com/watch?v=x3VluzZTReE\n//\n// ---------------------------------------------------------------------------------------\n\n\nvec3 renderRay(int rayIndex, vec2 p)\n{\n    vec3 col;\n    vec2 begin = texelFetch(iChannel0, ivec2(0, rayIndex), 0).xy;\n    vec2 pointA = begin;\n    \n    // Just a dumb loop over all the rays. I thought I'd have to do some kind of voronoi type\n    // tracking, but it seems like it runs pretty fast? LMK if you disagree\n    if (pointA != vec2(0))\n    {\n        int NUM_LINES = 25;\n    \n        float minDist = 1e6;\n        for (int i = 0; i < NUM_LINES; ++i)\n        {\n            vec2 pointB = texelFetch(iChannel0, ivec2(i + 1, rayIndex), 0).xy;\n            if (pointB == vec2(0)) break;\n            float dist = linePointDist2(pointA, pointB, p, vec3(1.0, 1.0, 1.0));\n\n            minDist = min(minDist, dist);\n\n            pointA = pointB;\n        }\n        col += vec3(1.0, 1.0, 0.0) * (1.0 - smoothstep(0.0, 0.01, iResolution.x * minDist));\n        col = mix(col, vec3(0.0, 0.0, 1.0), 1.0 - smoothstep(15.0, 17.0, iResolution.x * length(begin - p)));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n \tfloat roomD = sdRoom( p );\n\n    vec3 col;\n    if (keyDown(KEY_SHIFT))\n    {\n        // iq's SDF debug draw e.g. https://www.shadertoy.com/view/4sS3zz\n        col = (roomD>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n        col *= 1.0 - exp(-6.0*abs(roomD));\n        col *= 0.8 + 0.2*cos(150.0*roomD);\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(roomD)) );\n    }\n    else\n    {\n        col = vec3(1.0 - smoothstep(0.0, 0.01, abs(roomD)));\n    }\n    \n    vec4 state = texelFetch(iChannel0, ivec2(0, NUM_RAY_DIRS), 0);\n    vec2 mouseP = state.xy;\n    \n    // Color the \"unreachable\" parts of the room\n    if (sdRoom(mouseP) > 0.0)\n    {\n        float topSideRoomD = sdSideRoom(mouseP, true);\n        float bottomSideRoomD = sdSideRoom(mouseP, false);\n\n        float unreachableD = 1e6;\n        if (topSideRoomD < 0.0)\n        {\n            unreachableD = sdMostOfRoom(p, false);\n        }\n        else if (bottomSideRoomD < 0.0)\n        {\n            unreachableD = sdMostOfRoom(p, true);\n        }\n        else if (mouseP.y > 0.0)\n        {\n            unreachableD = sdSideRoom(p, false);\n        }\n        else\n        {\n            unreachableD = sdSideRoom(p, true);\n        }\n  \n        if (roomD > 0.0)\n        {\n            col += (1.0 - smoothstep(0.0, 0.01, max(0.0, unreachableD))) * vec3(0.5, 0.0, 0.0);\n        }\n    }    \n    \n    int singleRay = -1;\n    if (keyDown(KEY_LEFT)) singleRay = 6;\n    if (keyDown(KEY_UP)) singleRay = 0;\n    if (keyDown(KEY_RIGHT)) singleRay = 2;\n    if (keyDown(KEY_DOWN)) singleRay = 4;\n    \n    if (singleRay != -1)\n    {\n        col += renderRay(singleRay, p);\n    }\n    else\n    {\n        for (int j = 0; j < NUM_RAY_DIRS; ++j)\n        {\n            col += renderRay(j, p);\n        }\n    }\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int NUM_RAY_DIRS = 8;\nconst float ATTRACT_FRAMES = 120.0;\nconst float PI = 3.141592653589793;\n\n//hashing noise by IQ\nfloat hash( int k )\n{\n    uint n = uint(k);\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\n// https://iquilezles.org/articles/ellipsedist/\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdCutDisk( in vec2 p, in float r, in float h )\n{\n    float w = sqrt(r*r-h*h); // constant for any given shape\n    p.x = abs(p.x);\n    float s = max( (h-r)*p.x*p.x+w*w*(h+r-2.0*p.y), h*p.x-w*p.y );\n    return (s<0.0) ? length(p)-r :\n           (p.x<w) ? h - p.y     :\n                     length(p-vec2(w,h));\n}\n\nconst float SDF_EPSILON = 1e-3;\nconst vec2 ELLIPSE_AXES = vec2(1.4,0.7);\nconst float FOCUS_DIST = sqrt(ELLIPSE_AXES.x*ELLIPSE_AXES.x - ELLIPSE_AXES.y*ELLIPSE_AXES.y);\nconst float SIDE_ROOM_WALL_HEIGHT = 0.05;\nconst float ELLIPSE_GAP = 0.2;\n\nfloat sdRoom(in vec2 p)\n{\n    const vec2 h = vec2(0.0, ELLIPSE_GAP);\n    vec2 q = abs(p)-h;\n\n    float minDist = sdEllipse( max(q,0.0), ELLIPSE_AXES ) + min(max(q.x,q.y),0.0);\n    minDist = max(minDist, -sdBox(p - vec2(1.7, 0.0), vec2(0.6, SIDE_ROOM_WALL_HEIGHT)));\n    minDist = max(minDist, -sdBox(p - vec2(-1.7, 0.0), vec2(0.6, SIDE_ROOM_WALL_HEIGHT)));\n    minDist = max(minDist, -sdCutDisk(vec2(p.y, p.x) + vec2(0.0, FOCUS_DIST), h.y, 0.0));\n    minDist = max(minDist, -sdCutDisk(vec2(p.y, -p.x) + vec2(0.0, FOCUS_DIST), h.y, 0.0));\n    return -minDist;\n}\n\nvec2 normRoom(in vec2 p)\n{\n    const float DELTA = 0.02;\n    return normalize(vec2(sdRoom(p + vec2(DELTA, 0.0)) - sdRoom(p - vec2(DELTA, 0.0)),\n                          sdRoom(p + vec2(0.0, DELTA)) - sdRoom(p - vec2(0.0, DELTA))));\n}\n\nfloat sdSideRoom(in vec2 p, bool top)\n{\n    p.x = abs(p.x);\n    p.y = top ? p.y : -p.y;\n    vec2 center = vec2((ELLIPSE_AXES.x + FOCUS_DIST) * 0.5, (ELLIPSE_GAP + SIDE_ROOM_WALL_HEIGHT) * 0.5);\n    return sdBox(p - center, vec2((ELLIPSE_AXES.x - FOCUS_DIST) * 0.5, (ELLIPSE_GAP - SIDE_ROOM_WALL_HEIGHT) * 0.5));\n}\n\nfloat sdMostOfRoom(in vec2 p, bool top)\n{\n    p.x = abs(p.x);\n    p.y = top ? p.y : -p.y;\n    float minDist = sdBox(p - vec2(0.0, 0.7), vec2(FOCUS_DIST, 0.7 + ELLIPSE_GAP));\n    minDist = min(minDist, sdBox(p - vec2(0.0, 0.7), vec2(ELLIPSE_AXES.x, 0.7)));\n    return minDist;\n}\n\nfloat linePointDist2(in vec2 newPos, in vec2 oldPos, in vec2 fragCoord, in vec3 resolution)\n{\n    vec2 pDelta = (fragCoord - oldPos);\n    vec2 delta = newPos - oldPos;\n    float deltaLen2 = dot(delta, delta);\n\n    // Find the closest point on the line segment from old to new\n    vec2 closest;\n    if (deltaLen2 > 0.0000001)\n    {\n        float deltaInvSqrt = inversesqrt(deltaLen2);\n        vec2 deltaNorm = delta * deltaInvSqrt;\n        closest = oldPos + deltaNorm * max(0.0, min(1.0 / deltaInvSqrt, dot(deltaNorm, pDelta)));\n    }\n    else\n    {\n        closest = oldPos;\n    }\n\n    // Distance to closest point on line segment\n    vec2 closestDelta = closest - fragCoord;\n    closestDelta *= resolution.xy / resolution.y;\n    return dot(closestDelta, closestDelta);\n}\n\nfloat length2(vec2 v)\n{\n    return dot(v, v);\n}\n\n#define keyDown(ascii)    ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\n#define KEY_SHIFT 16\n#define KEY_LEFT 37\n#define KEY_UP 38\n#define KEY_RIGHT 39\n#define KEY_DOWN 40\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// ---------------------------------------------------------------------------------------\n//    Buffer A computes the light rays, one bounce per pixel. Also manages state.\n// ---------------------------------------------------------------------------------------\n\nvec2 startingPoint()\n{\n    // Figure out a good starting point for our light rays\n    int frame = (iFrame / int(ATTRACT_FRAMES)) % 20;\n    \n    // It's the \"amazing\" case and we'd never hit it by accident, so force a choice in the small side rooms sometimes\n    bool forceSmallRoom = hash(frame * 7262) > 0.4;\n    \n    float h0 = hash(frame * 25519);\n    float h1 = hash(int(h0 * 1e9) + frame * 233448);\n    vec2 newMouse;\n    if (forceSmallRoom)\n    {        \n        // These rooms are square so it's simple to pick a safe spot here\n        newMouse = vec2(ELLIPSE_AXES.x - FOCUS_DIST, ELLIPSE_GAP - SIDE_ROOM_WALL_HEIGHT) * vec2(h0 * 2.0 - 1.0, h1 * 2.0 - 1.0);\n        newMouse += sign(newMouse) * vec2(FOCUS_DIST, SIDE_ROOM_WALL_HEIGHT);\n    }\n    else\n    {\n        newMouse = vec2(h0, h1) * ELLIPSE_AXES;\n\n        // To pick a random valid point, check if it's in the room and just try again if it isn't\n        while (sdRoom(newMouse) < 0.0)\n        {\n            h0 = hash(int(h1 * 1e9) + frame * 22541);\n            h1 = hash(int(h0 * 1e9) + frame * 29293);\n            newMouse = vec2(h0, h1) * ELLIPSE_AXES;\n        }\n    }\n    \n    return newMouse;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n\n    fragColor = vec4(0);\n\n    ivec2 ifc = ivec2(fragCoord);\n    \n    if (ifc == ivec2(0, NUM_RAY_DIRS))\n    {\n        // manage persistent state (for demo mode)\n        vec4 old = texelFetch(iChannel0, ifc, 0);\n        \n        if (iMouse.z > 0.0)\n        {\n            if (iMouse.w > 0.0)\n            {\n                // Set the mouse to zero for a frame when clicking. This allows a zero to propagate to the right\n                // one frame ahead of the actual calculation wavefront, telling our renderer where to stop.\n                fragColor = vec4(0);\n            }\n            else\n            {\n                // Stuff the mouse location into the state\n                vec2 p = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n                fragColor = vec4(p.xy, 1.0, 0.0);\n            }\n        }\n        else\n        {\n            if (old.z > 0.0)\n            {\n                // User cancelled attract mode, don't update the state automatically any more\n                fragColor = old;\n            }\n            else\n            {\n                if (old.w > 0.0)\n                {\n                    // Count down the frames...\n                    old.w -= 1.0;\n                    fragColor = old;\n                }\n                else\n                {\n                    // Timer ran out, pick a new starting point\n                    fragColor = vec4(startingPoint(), 0.0, ATTRACT_FRAMES);\n                }\n            }\n        }\n        \n        return;\n    }\n    \n    if (ifc.y >= NUM_RAY_DIRS) return;\n    \n    vec4 state = texelFetch(iChannel0, ivec2(0, NUM_RAY_DIRS), 0);\n    vec2 mouse = state.xy;\n    \n    if (ifc.x == 0)\n    {\n        // Column zero gets the computation started by recording the starting position and light direction\n        if (mouse != vec2(0) && sdRoom(mouse) > 0.0)\n        {\n            vec4 old = texelFetch(iChannel0, ivec2(ifc.x, ifc.y), 0);\n\n            if (old.xy == vec2(0) || old.xy == mouse.xy)\n            {\n                // Eight rays in each of the cardinal and ordinal directions\n                float theta = float(ifc.y) * 0.25 * PI;\n                fragColor = vec4(mouse, sin(theta), cos(theta));\n            }\n        }\n    }\n    else\n    {\n        vec4 left = texelFetch(iChannel0, ivec2(ifc.x - 1, ifc.y), 0);\n        if (left != vec4(0))\n        {\n            // march ray\n            vec2 cur = left.xy;\n            vec2 dir = left.zw;\n            float dist = 1e6;\n            const int STEPS = 100;\n            \n            for (int i = 0; i<STEPS; i++)\n            {\n                dist = sdRoom(cur);\n                if (abs(dist) < SDF_EPSILON)\n                {\n                    // Hack/cheat to avoid precision errors near foci, let the ray pass through if close enough\n                    const float CHEAT_DIST = 0.01;\n                    if (length2(abs(cur) - vec2(FOCUS_DIST, ELLIPSE_GAP)) < CHEAT_DIST * CHEAT_DIST)\n                    {\n                        dist = SDF_EPSILON;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                cur += dist * dir;\n            }\n            \n            vec2 newDir = reflect(dir, normRoom(cur));\n            fragColor = vec4(cur + newDir * SDF_EPSILON * 2.0, newDir);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}