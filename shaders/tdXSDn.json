{
    "Shader": {
        "info": {
            "date": "1551050988",
            "description": "asdfasdfasdfasdf",
            "flags": 0,
            "hasliked": 0,
            "id": "tdXSDn",
            "likes": 2,
            "name": "dotgrid2",
            "published": 3,
            "tags": [
                "grid",
                "dots"
            ],
            "usePreview": 0,
            "username": "lennyjpg",
            "viewed": 396
        },
        "renderpass": [
            {
                "code": "// Simplex 2D noise\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    vec2 p = fragCoord  + iMouse.xy + iTime ;    \n    \n    float dd = snoise(iTime*0.03+uv*.5)*3.0;\n    float ee = snoise(iTime*0.03+uv*.5)*370.0;\n\n    p.x+=sin(dd)*ee;\n    p.y+=cos(dd)*ee;\n\n    p.y -= iTime * 100.;\n    p.x -= iTime * 100.;\n\n    p.y+=sin(p.y*.1)*3.1;\n    float s = 100.;\n    \n    vec2 c = vec2(sin(iTime*3.),cos(iTime*3.))*0.2+1.2;\n    uv*=c;\n    //p+=snoise(p*.11)*uv.y*100.0;\n        \n    float n = 1.0;//snoise(uv*7.0)*2.0;\n    float t = 5. * iTime ;\n    \n    t += sin(uv.x*10.1);\n    float k = cos(t)+1.;\n\n   \tvec2 g = mod(p,s)/s;\n    float e = g.x*g.y;\n    float v = 1.0;\n    if( sin(t) > 0. ){\n\t    p.x -= k * step(s, mod(p.y, s * 2.)) * s;   \n    }else{\n        p.y -= k * step(s, mod(p.x, s * 2.)) * s;\n    }\n    \n    float d = length(mod(p,s)-0.5*s);    \n    v = uv.y * 1.2;\n    float points = smoothstep(d,d*.9,1.0+70.*v);\n    fragColor = vec4(.2+points);  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}