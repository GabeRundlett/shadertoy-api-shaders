{
    "Shader": {
        "info": {
            "date": "1506635870",
            "description": "Golan Levin's Exponential Shaping Functions[0] ported to GLSL as an exercise from The Book of Shaders[1].  Comment out lines to visualize the functions.\n\n[0]: http://www.flong.com/texts/code/shapers_exp/\n[1]: https://thebookofshaders.com/05/",
            "flags": 0,
            "hasliked": 0,
            "id": "ltfyWf",
            "likes": 5,
            "name": "Exponential Shaping",
            "published": 3,
            "tags": [
                "gradient",
                "curve",
                "shaping",
                "exponential"
            ],
            "usePreview": 0,
            "username": "lordbunson",
            "viewed": 1263
        },
        "renderpass": [
            {
                "code": "const vec3 lineColor = vec3(0.0, 1.0, 0.0);\n\nfloat plotLine(vec2 uv, float y){\n    return smoothstep(y - 0.02, y, uv.y) -\n           smoothstep(y, y + 0.02, uv.y);\n}\n\nfloat getA(float a){\n    \n    float epsilon = 0.00001;\n    float min_param_a = 0.0 + epsilon;\n    float max_param_a = 1.0 - epsilon;\n    \n    return max(min_param_a, min(max_param_a, a));\n}\n\n\n\n// Exponential ease-in and ease-out.\nfloat expEasing(float x, float a){\n    \n    a = getA(a);\n    \n    float y = 0.0;\n    if(a < 0.5){\n        // emphasis\n    \ta = 2.0 * a;\n        y = pow(x, a);\n    } else {\n        // de-emphasis\n        a = 2.0 * (a - 0.5);\n        y = pow(x, 1.0 / (1.0 - a));\n    }\n    \n    return y;\n}\n\n\n// Double-Exponential Seat\nfloat doubleExpSeat(float x, float a){\n    \n    a = getA(a);\n    \n    float y = 0.0;\n    \n    if(x <= 0.5){\n    \ty = (pow(2.0 * x, 1.0 - a)) / 2.0;   \n    } else {\n     \ty = 1.0 - (pow(2.0 * (1.0 - x), 1.0 - a)) / 2.0;   \n    }\n    \n    return y;\n}\n\n\n// Double-Exponential Sigmoid\n// Useful for adjustable contrast\n// When a is approximately 0.426 this function approximates Raised Inverted Cosine to within 1%\nfloat doubleExpSigmoid(float x, float a){\n    \n    a = getA(a);\n    a = 1.0 - a;\n    \n    float y = 0.0;\n    \n    if(x <= 0.5){\n    \ty = pow(2.0 * x, 1.0 / a) / 2.0;   \n    } else {\n        y = 1.0 - pow(2.0 * (1.0 - x), 1.0 / a) / 2.0;\n        \n    }\n                   \n    return y;  \n}\n\n\n// Logistic Sigmoid\n// Growth of organic populations\n// Signal response in neural nets\n// Expensive to calculate\nfloat logisticSigmoid(float x, float a){\n\n    a = getA(a);\n    a = 1.0 / (1.0 - a) - 1.0;\n    \n    float A = 1.0 / (1.0 + exp(0.0 - (x - 0.5) * a * 2.0));\n    float B = 1.0 / (1.0 + exp(a));\n    float C = 1.0 / (1.0 + exp(0.0 - a));\n    \n    return (A - B) / (C - B);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;  \n    \n\t//float y = expEasing(uv.x, 0.867);\t//ease in\n\t//float y = expEasing(uv.x, 0.220); //ease out\n    \n    //float y = doubleExpSeat(uv.x, 0.147);\n\t//float y = doubleExpSeat(uv.x, 0.607);\n    //float y = doubleExpSeat(uv.x, 0.907);\n    \n    //float y = doubleExpSigmoid(uv.x, 0.367);\n    //float y = doubleExpSigmoid(uv.x, 0.727);\n    float y = doubleExpSigmoid(uv.x, 0.887);\n    \n    //float y = logisticSigmoid(uv.x, 0.0);\n\t//float y = logisticSigmoid(uv.x, 0.787);\n    //float y = logisticSigmoid(uv.x, 0.920);\n\t//float y = logisticSigmoid(uv.x, 0.987);\n    \n    vec3 gradient = vec3(y);\n    \n    float line = plotLine(uv, y);\n    \n    vec3 color = (1.0 - line) * gradient + line * lineColor;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}