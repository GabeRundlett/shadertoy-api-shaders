{
    "Shader": {
        "info": {
            "date": "1572945185",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "3dtXzM",
            "likes": 4,
            "name": "shadetober #21 (treasure)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "#define MAXDIST 9999.\n#define GLYPHSIZE 1./16.\n\nmat3 rotx(float a) {\n    return mat3(\n        1., 0., 0.,\n        0., cos(a), sin(a),\n        0., -sin(a), cos(a)\n    );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat map(vec3 p) {\n    p *= rotx(fract(iTime * .1) * 6.283);\n    float d = MAXDIST;\n    float cylp = sdRoundedCylinder(p, .2, .01, .02);\n    return min(MAXDIST, cylp);\n}\n\nvec3 grad(vec3 p) {\n    vec2 eps = vec2(0.0001, 0.0);\n    return normalize(map(p) - vec3(map(p - eps.xyy), map(p - eps.yxy), map(p - eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n    vec3 col = vec3(.1,.1,0.1);\n    \n    vec3 ro = vec3(0., 0., 1.);\n    vec3 rd = normalize(vec3(uv.xy, -1.5));\n    \n    const vec2 GLYPHS[4] = vec2[4](\n        vec2(13,14), //SMILEY\n        vec2(12,14), //STAR\n        vec2(4,13), //DOLLAR\n        vec2(5,13) //PERCENTCER\n        );\n    \n    float t = 0.;\n    for(int i = 0; i < 100; ++i) {\n        vec3 p = ro + rd * t;\n        float h = map(p);\n        if (h < 0.0001) {\n            vec3 ip = rotx(fract(-iTime * .1) * 6.283) * p;\n            vec2 uvt = ip.xz;\n            \n            vec2 glyph = GLYPHS[0] * GLYPHSIZE;\n            vec2 glyph_uv = mix(glyph, glyph + GLYPHSIZE, uvt + .5);\n            vec3 textNormal = texture(iChannel0, glyph_uv).rgb;\n            \n            vec3 shapecol = texture(iChannel1, grad(p) - textNormal).rgb * vec3(1,1,0); \n            col = mix(shapecol, col, t/10.);\n            break; \n        }\n        t += h;\n        if (t > MAXDIST) { break; }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.);\n    \n    // debug view of the font texture\n    //fragColor = texture(iChannel0, fragCoord/iResolution.xy).rgba;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}