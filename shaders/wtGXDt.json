{
    "Shader": {
        "info": {
            "date": "1583834492",
            "description": "Hexagonal lattice for diffusion, cellular automata, and other symmetries.\nChange SCALE in the \"Common\" tab (must be divisible by 2).",
            "flags": 32,
            "hasliked": 0,
            "id": "wtGXDt",
            "likes": 4,
            "name": "Hexagonal Diffusion",
            "published": 3,
            "tags": [
                "diffusion",
                "hexagonal",
                "lattice"
            ],
            "usePreview": 0,
            "username": "brianhaak",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "void fetch_cell (in vec2 cell_pos, out Cell cell) {\n    \n    vec2 pos = vec2(2.0, 4.0) * cell_pos + 0.5;\n\n\tcell.data[0] = texture(iChannel0, (pos + vec2(0.0, 0.0)) / iChannelResolution[0].xy);\n    cell.data[1] = texture(iChannel0, (pos + vec2(1.0, 0.0)) / iChannelResolution[0].xy);\n    \n    cell.data[2] = texture(iChannel0, (pos + vec2(0.0, 1.0)) / iChannelResolution[0].xy);\n    cell.data[3] = texture(iChannel0, (pos + vec2(1.0, 1.0)) / iChannelResolution[0].xy);\n            \n    cell.data[4] = texture(iChannel0, (pos + vec2(0.0, 2.0)) / iChannelResolution[0].xy);\n    cell.data[5] = texture(iChannel0, (pos + vec2(1.0, 2.0)) / iChannelResolution[0].xy);\n    cell.data[6] = texture(iChannel0, (pos + vec2(0.0, 3.0)) / iChannelResolution[0].xy);\n    cell.data[7] = texture(iChannel0, (pos + vec2(1.0, 3.0)) / iChannelResolution[0].xy);\n}\n\n\nvoid render_visual_pixel (out vec4 frag_color, in vec2 frag_coord) {\n    \n    /*\n\t  Triangular tiling on hexagonal lattice:\n\n        01234567\n      0 a--b----\n      1 -------- (skip a line completely)\n      2 ----c--d\n      3 -------- (skip another line)\n\n\n      Hexagonal dense lattice:\n\n\t    01234567\n      0 a-b-c-d-\n      1 -------- (skip a line completely)\n      2 -e-f-g-h\n      3 -------- (skip another line)\n\n\n      Triangular dense dense lattice over the hexagonal:\n\n\t    01234567\n      0 a-b-.-d-\n      1 -------- (skip a line completely)\n      2 -.-f-.-h\n      3 -------- (skip another line)\n\t*/\n    \n    // The coordinate where vec4 frag_color is getting written.\n    vec2 write_coordinate = floor((frag_coord - 0.5) / SCALE);\n    // vec2 write_coordinate_for_cells = (frag_coord - 0.5) / SCALE;\n    vec2 write_coordinate_for_cells = (frag_coord - 0.5) / SCALE + vec2(0.5, 0.5) / SCALE; // - 0.5 / SCALE;\n    \n    vec2 is_odd = 1.0 - floor(mod(write_coordinate, 2.0));\n    \n    vec2 tile_coord = mod(write_coordinate, vec2(8.0, 4.0));// - 0.5;\n    \n    float line_0 = 1.0 - floor(mod(write_coordinate.y / 2.0, 2.0));\n    float line_2 = 1.0 - floor(mod((write_coordinate.y + 2.0) / 2.0, 2.0));\n    \n    //vec2 normalized_pixel_position = (2.0 * frag_coord / iResolution.xy) - 1.0; // -1..+1\n    //float viewport_screen_ratio = iResolution.x / iResolution.y;\n    //float horizontal_meters = VERTICAL_METERS * viewport_screen_ratio;\n    \n    //vec2 pixel_meters_position = vec2(\n    //    normalized_pixel_position.x * horizontal_meters,\n    //    normalized_pixel_position.y * VERTICAL_METERS);\n\n    \n    // float tile_x_isnt_4 = floor(abs(4.0 - tile_coord.x));\n    // float tile_x_isnt_1_or_5 = floor(abs(1.0 - tile_coord.x));\n    \n    // float render_intensity_dense_hex = is_odd.y * (line_0 * is_odd.x + line_2 * (1.0 - is_odd.x));\n    \n    float tile_x_is_0_or_3 = 1.0 - floor(abs(0.0 - tile_coord.x)) * floor(abs(3.0 - tile_coord.x));\n    float tile_x_is_4_or_7 = 1.0 - floor(abs(4.0 - tile_coord.x)) * floor(abs(7.0 - tile_coord.x));\n    \n    float render_intensity_sparse_tri = is_odd.y * (\n        line_0 * tile_x_is_0_or_3 +\n        \n        line_2 * tile_x_is_4_or_7\n    );\n    \n    \n    /*\n    \tCellular data storage uses the fact that on Shadertoy, buffers have the same size as screen.\n     \tSo our tiles get 8x4=32 pixels each and each contains 4 triangles (cells).\n     \tThese 32 pixels of buffer storage are spread over 4 cells.\n\t\tEach cell can use 8 pixels worth of data. Shadertoy provides float32 RGBA buffers,\n\t\tso each cell can have storage represented by 32 floating point numbers grouped into 8 vec4.\n    */\n    vec2 cell_position = vec2(\n        floor(write_coordinate_for_cells.x / 2.0),\n        floor(write_coordinate_for_cells.y / 4.0));\n    \n    Cell cell;\n    fetch_cell(cell_position, cell);\n            \n    float render_intensity = render_intensity_sparse_tri;\n\n    frag_color = vec4(\n        render_intensity * cell.data[0].r,\n        render_intensity * cell.data[0].g,\n        render_intensity * cell.data[0].b,\n    1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    render_visual_pixel(fragColor, vec2(fragCoord.x, iResolution.y - fragCoord.y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "precision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst float SCALE = 1.0;\n// const float DAMPING_RATE = 0.2502;\n//const float DAMPING_RATE = 0.252;\nconst float DAMPING_RATE = 0.250019;\n\nconst float VERTICAL_METERS = 100.0;\n\nconst float G = 6.67430e-11;\nconst float PI = 3.14159265358979323846264338327950288419716939937510;\n\nconst float MASS_OF_EARTH = 5.972e24;\nconst float MASS_OF_MOON = 7.34767309e22;\nconst float MASS_OF_SUN = 1.989e30;\n\nconst float DISTANCE_TO_SUN = 1.496e11;\nconst float DISTANCE_TO_MOON = 3.844e8;\n\nconst float ORBITAL_SPEED_OF_EARTH = 29780.0;\nconst float ORBITAL_SPEED_OF_MOON = 1022.0;\n\nfloat gravity_potential (float source_point_mass, vec2 source_position, vec2 at_position) {\n\n    return -1.0 * G * source_point_mass / distance(at_position, source_position);\n}\n\n\nstruct Cell {\n    // 0 - 7\n    /*\n    float a;\n    float b;\n    float c;\n    float d;\n    float e;\n    float f;\n    float g;\n    float h;\n\n    // 8 - 15\n    float j;\n    float k;\n    float l;\n    float m;\n    float n;\n    float o;\n    float p;\n    float q;\n\n    // 16-23\n    float r;\n    float s;\n    float t;\n    float u;\n    float v;\n    float w;\n    float x;\n    float y;\n\n    // 24-31\n    float z;\n    float aa;\n    float ab;\n    float ac;\n    float ad;\n    float ae;\n    float af;\n    float ag;\n\t*/\n    vec4 data[8];\n};\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\n  Hexagonal lattice can be mapped onto ordinary rectangular texture\n  with odd and even rows interleaving adjacency between cells (texels).\n\n  There is also a minimum adjacency lattice (of only three neighbor cells),\n  which has the same geometry as the hexagonal, it's just missing\n  cells in the centers of the hexagons.\n\n  It is hypothesized that adjacency-3 cells are also enough to fill up\n  3D space with organizing structure of cubeoctahedra.\n\n  The tiling structure 8x4 pixels of the\n  locations of the centers of triangular interconnects:\n\n  01234567\n  a--b----\n  -------- (skip a line completely)\n  ----c--d\n  -------- (skip another line)\n\n  Filling rendering (to show full bodies of the triangles)\n  is irregular and can't be split into rectangular tiles:\n\n  01234567\n  aabb----\n  a--bc--d\n  ----ccdd\n  e--fc--d\n\n*/\n\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nvoid fetch_cell (in vec2 cell_pos, out Cell cell) {\n    \n    vec2 pos = vec2(2.0, 4.0) * cell_pos + 0.5;\n\n\tcell.data[0] = texture(iChannel0, (pos + vec2(0.0, 0.0)) / iChannelResolution[0].xy);\n    cell.data[1] = texture(iChannel0, (pos + vec2(1.0, 0.0)) / iChannelResolution[0].xy);\n    \n    cell.data[2] = texture(iChannel0, (pos + vec2(0.0, 1.0)) / iChannelResolution[0].xy);\n    cell.data[3] = texture(iChannel0, (pos + vec2(1.0, 1.0)) / iChannelResolution[0].xy);\n            \n    cell.data[4] = texture(iChannel0, (pos + vec2(0.0, 2.0)) / iChannelResolution[0].xy);\n    cell.data[5] = texture(iChannel0, (pos + vec2(1.0, 2.0)) / iChannelResolution[0].xy);\n    cell.data[6] = texture(iChannel0, (pos + vec2(0.0, 3.0)) / iChannelResolution[0].xy);\n    cell.data[7] = texture(iChannel0, (pos + vec2(1.0, 3.0)) / iChannelResolution[0].xy);\n}\n\n\nvoid buffer_a_main (out vec4 frag_color, in vec2 frag_coord) { //, in float y_for_mouse) {\n    \n   \n    // The coordinate where vec4 frag_color is getting written.\n    vec2 write_coordinate = floor(frag_coord - 0.5);\n    //vec2 write_coordinate = frag_coord - 0.5;\n    \n    // 8 times per each cell this shader will be called to calculate different components.\n    // We need to compute the index of the target being \"rendered\" to determine what one of the 8\n    // components should be computed in this specific step.\n    vec2 cell_position = write_coordinate / vec2(2.0, 4.0);\n    \n    vec2 is_odd = floor(mod(frag_coord, 2.0));\n    \n    float data_index_y = floor(mod(write_coordinate.y, 4.0));\n    float data_index_x = is_odd.x;\n    \n    float data_index_float = data_index_y * 2.0 + data_index_x;\n    \n    float type = floor(mod(write_coordinate.x * 0.5, 4.0));\n    // float type_top_left = 1.0 - floor(mod(write_coordinate.x, 8.0));\n    \n    //float is_odd_y = mod(frag_coord.y, 2.0);\n    \n    vec2 this_texel = frag_coord/iChannelResolution[0].xy;\n    vec2 texel_step = 1.0 / iChannelResolution[0].xy;\n\n    // r: gravity potential\n    // g: discrete mass at the point or in the vicinity (mostly 0)\n    // b: velocity of the mass transfer (dx/dt)\n    // a: velocity of the mass transfer (dy/dt)\n    \n    \n    //\tCellular data storage uses the fact that on Shadertoy, buffers have the same size as screen.\n    // \tSo our tiles get 8x4=32 pixels each and each contains 4 triangles (cells).\n    // \tThese 32 pixels of buffer storage are spread over 4 cells.\n\t//\tEach cell can use 8 pixels worth of data. Shadertoy provides float32 RGBA buffers,\n\t//\tso each cell can have storage represented by 32 floating point numbers grouped into 8 vec4.\n    \n    // Fetch the previous values of this cell and its 3 neighbors:\n    Cell previous_this_cell_values;\n    fetch_cell(cell_position, previous_this_cell_values);\n    \n    // Fetch left and right cells (exact type depends on the cell type\n    Cell left_cell_values;\n    fetch_cell(cell_position + vec2(-1.0, 0.0), left_cell_values);\n    Cell right_cell_values;\n    fetch_cell(cell_position + vec2(1.0, 0.0), right_cell_values);\n    \n    // Fetch corner cell depending on the cell type\n    vec2 corner_cell_offset = vec2(\n        (2.0 * floor(mod(type, 2.0))) - 1.0,\n        (2.0 * floor(mod(type * 0.5, 2.0))) - 1.0);\n    \n    \n    Cell corner_cell_values;\n    fetch_cell(cell_position + corner_cell_offset, corner_cell_values);\n    \n    \n    vec2 mouse = vec2(iMouse.x, iResolution.y - iMouse.y);\n    vec2 write_coordinate_for_mouse = floor(frag_coord - 0.5) * SCALE;\n    \n    if (iMouse.z > 0.0 && length(mouse - write_coordinate_for_mouse) < 12.0 * SCALE && data_index_float < 0.5) {\n    \tfrag_color = vec4(1.0, 1.0, 1.0, 0.0);\n    } else {\n        if (data_index_float < 0.5) {\n            frag_color = vec4(\n\t        \tDAMPING_RATE * (previous_this_cell_values.data[0].r + left_cell_values.data[0].r + right_cell_values.data[0].r + corner_cell_values.data[0].r),\n                DAMPING_RATE * (previous_this_cell_values.data[0].g + left_cell_values.data[0].g + right_cell_values.data[0].g + corner_cell_values.data[0].g),\n                DAMPING_RATE * (previous_this_cell_values.data[0].b + left_cell_values.data[0].b + right_cell_values.data[0].b + corner_cell_values.data[0].b),\n                DAMPING_RATE * (previous_this_cell_values.data[0].a + left_cell_values.data[0].a + right_cell_values.data[0].a + corner_cell_values.data[0].a)\n\t    \t);\n        } else {\n            frag_color = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\t\n    }\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n    buffer_a_main(fragColor, vec2(fragCoord.x, fragCoord.y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}