{
    "Shader": {
        "info": {
            "date": "1566798650",
            "description": "Some strange simple procedural creatures and animations\nThere is a new one each 10 seconds ",
            "flags": 0,
            "hasliked": 0,
            "id": "tlBSzd",
            "likes": 14,
            "name": "Procedural Creatures",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "sdf",
                "animation",
                "creature"
            ],
            "usePreview": 0,
            "username": "thiagoborn",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "\nvec3 draw_line(float d, float thickness) {\n  const float aa = 3.0;\n  return vec3(smoothstep(0.0, aa / iResolution.y, max(0.0, abs(d) - thickness)));\n}\nvec3 draw_line(float d) {\n  return draw_line(d, 0.0025);\n}\n\nfloat draw_solid(float d) {\n  return smoothstep(0.0, 3.0 / iResolution.y, max(0.0, d));\n}\n\nvec3 draw_distance(float d, vec2 p) {\n  float t = clamp(d * 0.85, 0.0, 1.0);\n  vec3 grad = mix(vec3(1, 0.8, 0.5), vec3(0.3, 0.8, 1), t);\n\n  float d0 = abs(1.0 - draw_line(mod(d + 0.1, 0.2) - 0.1).x);\n  float d1 = abs(1.0 - draw_line(mod(d + 0.025, 0.05) - 0.025).x);\n  float d2 = abs(1.0 - draw_line(d).x);\n  vec3 rim = vec3(max(d2 * 0.85, max(d0 * 0.25, d1 * 0.06125)));\n\n  grad -= rim;\n  grad -= mix(vec3(0.05, 0.35, 0.35), vec3(0.0), draw_solid(d));\n\n  return grad;\n}\n\nfloat rand(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat srand(float n) {\n    return rand(n)*2.-1.;\n}\n\nfloat lineDist(vec2 p, vec2 start, vec2 end, float width)\n{\n\tvec2 dir = start - end;\n\tfloat lngth = length(dir);\n\tdir /= lngth;\n\tvec2 proj = max(0.0, min(lngth, dot((start - p), dir))) * dir;\n\treturn length( (start - p) - proj ) - (width / 2.0);\n}\nfloat smoothMerge(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0-h);\n}\n#define PI (3.1415*2.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 _uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float d = 10000000.;\n    float i = float(int(iTime/10.)+1234);\n    i = rand(i);\n    for(int b=0;b<3;b++){\n\t    vec2 last = vec2(0.0);\n    \tfloat la = 0.0;\n        for(int x=0;x<10;x++){\n            float a = srand(i++)*2.1415;\n            float s = .5+.5*rand(i++);\n            s*=.2;\n            // move\n            a += smoothstep(-.5,.5,sin(iTime*1.5))* srand(i++)*.2;\n            // preparation\n            a += sin(iTime*3.0)* srand(i++)*.25;\n            // breathe\n            //a += sin(iTime*1.0)* srand(i++)*.04;\n            // pulse\n            //a += smoothstep(.5,1.,sin(iTime*6.))* srand(i++)*.01;\n            a += la;\n            vec2 opos = last + vec2(sin(a),cos(a))*s;\n            float bs = rand(i++);\n            float ls = rand(i++);\n            float ma = rand(i++);\n            for(int k=0;k<2;k++){\n                vec2 uv = k==1?_uv:_uv*vec2(-1.,1.);\n\n                float o1 = lineDist(uv,opos,last,.02+ls*.03);\n                float o2= length( uv - opos)- (.01+bs*.02);\n                float o = min(o1,o2);\n                //d = smoothMerge(d,o,.01 + ma * .05);        \n                d= min(d,o);\n            }        \n            la = a;\n            last = opos;        \n        }\n    }\n\n    \n    vec3 col = draw_distance(d,_uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}