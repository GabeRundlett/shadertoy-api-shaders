{
    "Shader": {
        "info": {
            "date": "1615654500",
            "description": "Try for a nice effect on video",
            "flags": 0,
            "hasliked": 0,
            "id": "NsXGR7",
            "likes": 2,
            "name": "trichromie points 2",
            "published": 3,
            "tags": [
                "video",
                "filter",
                "postprocess",
                "points",
                "trichromie"
            ],
            "usePreview": 0,
            "username": "ManuManu",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "\n\n// use this define to test on separated palette, rather than on a green moving movie !\n//#define TEST\n\n\n#ifdef TEST\nvec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b * cos( 2.*3.14159 * ( c * t + d) );\n}\nvec3 MyPalette8(float t )\n{\n\treturn .6 + .4*cos(6.*t + vec3(5, 3, 1));\n}\n#endif \n\nfloat checker(vec2 uv, float scale, float angle, vec2 offset)\n{\n    float s = sin( angle ), c = cos( angle );\n    vec2 uv2 = vec2( c * uv.x - s * uv.y, s * uv.x + c * uv.y ) * scale;\n\treturn sin( uv2.x + offset.x) * sin( uv2.y + offset.y );\n}\n\nfloat processLum( vec2 uv, float lum, vec2 offset )\n{\n    float angle = 1.;\n    vec2 center = vec2(.5,.5);\n    float scale = 350.;\n\n    float dots = checker(uv, scale, angle, offset);\n    float intens = 5.;\n    float intens2 = ( intens - 1.) * .5;\n    return lum * intens - intens2 * ( 1. - dots);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n#ifdef TEST\n    vec3 col = MyPalette8( uv.x );\n#else\n    vec3 col = texture( iChannel0, uv ).xyz;\n#endif\n    \n    const float pi = 3.14159;\n    vec3 offset = vec3( pi, pi*.5, 0.);\n    \n    float colorR = processLum( uv, col.r, offset.zz );\n    float colorG = processLum( uv, col.g, offset.xz );\n    float colorB = processLum( uv, col.b, offset.yy );\n\n    vec3 outputColor = vec3( colorR, colorG, colorB);\n\n#ifdef TEST\n    if (uv.y > .7 )\n        outputColor = col;        \n#endif\n    fragColor = vec4(vec3(outputColor),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}