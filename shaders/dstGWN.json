{
    "Shader": {
        "info": {
            "date": "1677295850",
            "description": "A smooth zoom of Sierpiński's triangle",
            "flags": 0,
            "hasliked": 0,
            "id": "dstGWN",
            "likes": 6,
            "name": "Sierpiński's Hypnosis",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "been_jamming",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "//A zoom of Sierpinski's Triangle\n\n//Change these values to customize the shader\n\n//Defines the accuracy of the fractal\n//Increasing likely won't change the image because of anti-aliasing I've done\n#define ITERATIONS 20\n//A constant used for anti-aliasing\n//In pixels, this is how wide the boundary of the fractal is\n#define THRESHOLD_FACTOR 2.0\n//Rotations of the screen per second\n#define ROTATE_SPEED 0.06\n//Zooms per second\n#define ZOOM_SPEED 0.5\n//The color of the fractal\n#define FRACTAL_COLOR vec3(1.0, 1.0, 1.0)\n//The color near the fractal\n#define FADE_COLOR vec3(0.1, 0.3, 1.0)\n//The background color scaled by the distance of the point to the fractal\n#define BACKGROUND_COLOR vec3(0.0, 0.0, 0.0)\n//How quickly the background color scales\n#define BACKGROUND_FACTOR 0.05\n\n//Yum\n#define PI 3.1415927\n\n//The vertices of the largest triangle\nvec2 points[3];\n\n//Minimum of the screen width and screen height in pixels\nfloat min_res;\n\n//Chooes the position of the triangle vertices\nvoid initialize_points(float interp){\n    //Stores the point the screen will center on next\n    vec2 center = vec2(0.0);\n    \n    for(int i = 0; i < 3; i++){\n        //The coordinates of all 3 triangle vertices\n        points[i].x = (length(iResolution)/min_res + 2.0*BACKGROUND_FACTOR)*cos(2.0*(float(i) + 1.0/2.0)*PI/3.0 + mod(iTime*ROTATE_SPEED, 1.0)*2.0*PI);\n        points[i].y = (length(iResolution)/min_res + 2.0*BACKGROUND_FACTOR)*sin(2.0*(float(i) + 1.0/2.0)*PI/3.0 + mod(iTime*ROTATE_SPEED, 1.0)*2.0*PI);\n    }\n    \n    for(int i = 0; i < 3; i++){\n        //Alternate between zooming into each of the 3 sub-triangles\n        //The center is calculated by taking the average of the locations of the next 3 vertices\n        center = int(iTime*ZOOM_SPEED)%3 == i ? (points[i] + mix(points[(i + 1)%3], points[i], 0.5) + mix(points[(i + 2)%3], points[i], 0.5))/3.0 : center;\n    }\n    \n    //Interpolate between the starting positions and the future positions\n    points[0] = mix(points[0], 2.0*points[0] - 2.0*center, interp);\n    points[1] = mix(points[1], 2.0*points[1] - 2.0*center, interp);\n    points[2] = mix(points[2], 2.0*points[2] - 2.0*center, interp);\n}\n\n//Return the signed distance of a point p to a triangle (v0, v1, v2)\nfloat triangle_dist(vec2 p, vec2 v0, vec2 v1, vec2 v2){\n    //Outward facing normal vectors to the sides of the triangle\n    vec2 n0 = normalize(vec2(-1.0, 1.0)*(v0 - v1).yx);\n    vec2 n1 = normalize(vec2(-1.0, 1.0)*(v1 - v2).yx);\n    vec2 n2 = normalize(vec2(-1.0, 1.0)*(v2 - v0).yx);\n    \n    //The distance to the triangle is the maximum distance to each side\n    return max(max(dot(n0, p - v0), dot(n1, p - v1)), dot(n2, p - v2));\n}\n\n//Returns the distance of a point uv to the boundary of Serpinski's fractal\n//Uses points array for fractal vertices\nfloat fractal_dist(vec2 uv){\n    //The distance of uv to the nearest triangle vertex\n    float min_dist;\n    //The triangle vertex nearest to uv\n    int min_point = 0;\n    //A temporary variable to store distances\n    float dist;\n    //Adjusts the fractal dist based on the current iteration\n    float dist_factor = 1.0;\n    \n    //In each iteration, we move uv away from the nearest triangle vertex\n    //The distance between the uv and the vertex is doubled\n    //If the point eventually ends up outside of the triangle, the point is not in the fractal\n    //The distance of the point to the triangle's boundary at the end is the fractal distance up to the factor of dist_factor\n    for(int i = 0; i < ITERATIONS; i++){\n        //The first iteration should set min_dist\n        min_dist = 100.0;\n        for(int j = 0; j < 3; j++){\n            //Computes the squared dist of uv to point j up to a constant\n            dist = dot(uv - points[j], uv - points[j]);\n            //If the distance is minimal, record the vertex\n            if(dist < min_dist){\n                min_dist = dist;\n                min_point = j;\n            }\n        }\n        //Push uv away from the nearest triangle vertex\n        uv = 2.0*uv - points[min_point];\n        //Get the distance of uv to the triangle\n        dist = triangle_dist(uv, points[0], points[1], points[2]);\n        //If uv is outside of the triangle, return that distance times dist_factor\n        if(dist > 0.0){\n            return dist*dist_factor;\n        }\n        //Adjust dist_factor for the next iteration\n        dist_factor *= 0.5;\n    }\n    \n    //The point belongs to the fractal, so return a distance of zero\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    //The factor used to interpolate between states\n    float interp = smoothstep(0.0, 1.0/ZOOM_SPEED, mod(iTime, 1.0/ZOOM_SPEED));\n    //Save the minimum of the screen width and screen height\n    min_res = min(iResolution.x, iResolution.y);\n    //Compute the coordinates of the pixel\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/min_res*2.0;\n    \n    //Initialize the points of the triangle\n    initialize_points(interp);\n    //The distance to the fractal\n    float dist = fractal_dist(uv);\n    //Compute the color of the pixel\n    vec3 col = dist < THRESHOLD_FACTOR/min_res ? FRACTAL_COLOR : vec3(0.0) + mix(FADE_COLOR, BACKGROUND_COLOR, clamp(dist, 0.0, BACKGROUND_FACTOR)/BACKGROUND_FACTOR);\n    //Set the alpha channel of the color to 1 and return the color\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}