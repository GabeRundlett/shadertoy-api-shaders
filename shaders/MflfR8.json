{
    "Shader": {
        "info": {
            "date": "1723382809",
            "description": "CC0: A bit blurry \n  A sunday experiment with blur effects\n",
            "flags": 32,
            "hasliked": 0,
            "id": "MflfR8",
            "likes": 46,
            "name": "A bit blurry",
            "published": 3,
            "tags": [
                "3d",
                "blur"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// CC0: A bit blurry \n//  A sunday experiment with blur effects\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n\n  vec3 pcol = texture(iChannel0, q).xyz;\n  fragColor = vec4((pcol),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0: A bit blurry \n//  A sunday experiment with blur effects\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float\n  pi        = acos(-1.)\n, tau       = 2.*pi\n, planeDist = .5\n, furthest  = 12.\n, fadeFrom  = 6.\n;\n\nconst vec2 \n  pathA = vec2(.31, .41)\n, pathB = vec2(1.0,sqrt(0.5))\n;\n\nconst vec4 \n  U = vec4(0, 1, 2, 3)\n  ;\n  \n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6;\n  float a = 2.51;\n  float b = 0.03;\n  float c = 2.43;\n  float d = 0.59;\n  float e = 0.14;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0, 1.0);\n}\n\nvec3 offset(float z) {\n  return vec3(pathB*sin(pathA*z), z);\n}\n\nvec3 doffset(float z) {\n  return vec3(pathA*pathB*cos(pathA*z), 1.0);\n}\n\nvec3 ddoffset(float z) {\n  return vec3(-pathA*pathA*pathB*sin(pathA*z), 0.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\nvec3 palette(float n) {\n  return 0.5+0.5*sin(vec3(0.,1.,2.)+n);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d/\nfloat triangle(vec2 p, float r) {\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvec4 alphaBlend(vec4 back, vec4 front) {\n  // Based on: https://en.wikipedia.org/wiki/Alpha_compositing\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat hf(vec2 p, float tm) {\n  //vec2 cp = sin(vec2(1.,sqrt(0.5))*tm*.5);\n  vec2 cp = vec2(0.,0.);\n  float x = length(p-cp);\n  const float rper = 6.;\n  const float wper = 1.;\n  const float xfade= 1.;\n  const float xper = pi;\n  float anim0 = smoothstep(-sqrt(0.5), sqrt(0.5), -cos(tm*tau/rper));\n  float anim1 = smoothstep(-(0.5), (0.5), -cos(0.5*tm*tau/rper));\n\n  float x0 = x*xfade;\n  float x1 = x*xper;\n  float ampl = 0.5*tanh_approx(1./(x0*x0));\n  float ang = pabs(x1,1.)-tau*tm/wper;\n  float wave = cos(ang)*anim0;\n  float h0 = ampl*(wave+anim0);\n  float h1 = 1.-ampl*(-wave+anim0);\n  float h = mix(h0,h1, anim1);\n  \n  return h;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// CC0: A bit blurry \n//  A sunday experiment with blur effects\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 npp, float pd, vec3 cp, vec3 off, float n) {\n\n  float aa = 3.*pd*distance(pp.xy, npp.xy);\n  vec4 col = vec4(0.);\n  vec2 p2 = pp.xy;\n  p2 -= offset(pp.z).xy;\n  vec2 doff   = ddoffset(pp.z).xz;\n  vec2 ddoff  = doffset(pp.z).xz;\n  float dd = dot(doff, ddoff);\n  p2 *= ROT(dd*pi*5.);\n\n  float h0 = hash(n+123.4);\n\n  float z3 = 0.6*h0+0.125;\n  vec2 p3 = p2;\n  p3 += h0;\n  p3 /= z3;\n  p3 *= ROT(tau*h0);\n  vec2 n3 = round(p3);\n  p3 -= n3;\n  float h3 = hash(n+n3+123.4);\n\n  float l2 = length(p2);\n  float d0 = triangle(-p2, 0.65)-0.04;\n\n  if (h3 < 0.5) {\n    p3 = vec2(p3.y, -p3.x);\n  }\n\n  float d3 = length(p3-0.5)-0.5;\n  d3 = min(d3, length(p3+0.5)-0.5);\n  d3 = abs(d3)-0.05;\n  d3 *= z3;\n  \n  d0 = pmin(d0, d3,0.05);\n  \n  const float colp = pi*100.;\n  float colaa = aa*100.;\n  \n  col.xyz = palette(0.5*n+2.*l2)*mix(0.5/(l2*l2), 1., smoothstep(-0.5+colaa, 0.5+colaa, sin(l2*colp)))/max(3.*l2*l2, 5E-1);\n  col.xyz = mix(col.xyz, vec3(2.), smoothstep(aa, -aa, (d0-0.01*h0-0.01))); \n  col.w = smoothstep(aa, -aa, -(d0));\n  \n  return col;\n\n}\n\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1./RESOLUTION.xy;\n  float rdd = 2.;\n  \n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec4 acol = vec4(0.0);\n\n  vec3 aro = ro;\n  float apd = 0.0;\n\n  for (float i = 1.; i <= furthest; ++i) {\n    // Basically opaque bail \n    if (acol.w > 0.95) {\n      break;\n    }\n    float pz = planeDist*nz + planeDist*i;\n\n    float lpd = (pz - aro.z)/rd.z;\n    float npd = (pz - aro.z)/nrd.z;\n    float cpd = (pz - aro.z)/ww.z;\n\n    {\n      vec3 pp = aro + rd*lpd;\n      vec3 npp= aro + nrd*npd;\n      vec3 cp = aro+ww*cpd;\n\n      apd += lpd;\n\n      vec3 off = offset(pp.z);\n\n      float dz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*furthest, planeDist*fadeFrom, dz);\n      float fadeOut = smoothstep(0., planeDist*.1, dz);\n      float fadeOutRI = smoothstep(0., planeDist*1.0, dz);\n\n      float ri = mix(1.0, 0.9, fadeOutRI*fadeIn);\n\n      vec4 pcol = plane(ro, rd, pp, npp, apd, cp, off, nz+i);\n\n      pcol.w *= fadeOut*fadeIn;\n      acol = alphaBlend(pcol, acol);\n      aro = pp;\n    }\n    \n  }\n\n  vec3 col = vec3(0.0);\n  col = mix(col, acol.xyz, acol.w);\n\n  return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 r = RESOLUTION.xy, q = fragCoord/r, pp = -1.0+2.0*q, p = pp;\n  p.x *= r.x/r.y;\n\n  float tm  = planeDist*TIME*2.;\n\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(U.xyx+ddro, ww));\n  vec3 vv = cross(ww, uu);\n  vec3 col = vec3(.0);\n  \n  col = color(ww, uu, vv, ro, p);\n  \n  col = aces_approx(col);\n  fragColor = vec4(col, 1);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: A bit blurry \n//  A sunday experiment with blur effects\n\nfloat hf(vec2 p) {\n  return hf(p, TIME);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.+2.*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float tsz = 2./RESOLUTION.y;\n  float sf = hf(p);\n  float a = exp(-5.*sf);\n\n  vec3 col = texture(iChannel0, q).xyz;\n  float agg = 1.;\n  for (float  i = 1.; i < 20.; ++i) {\n    float off = tsz*i;\n    float mul = exp(-a*i*i); \n    col += mul*texture(iChannel0, q - vec2(off, 0.)).xyz; \n    col += mul*texture(iChannel0, q + vec2(off, 0.)).xyz;\n    agg += 2.*mul;\n  }\n\n  col /= agg;\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: A bit blurry \n//  A sunday experiment with blur effects\n\nfloat hf(vec2 p) {\n  return hf(p, TIME);\n}\n\nvec3 normal(vec2 p) {\n  vec2 eps = vec2(4.0/RESOLUTION.y, 0.0);\n\n  vec3 n;\n\n  n.x = hf(p + eps.xy) - hf(p - eps.xy);\n  n.y = hf(p + eps.yx) - hf(p - eps.yx);\n  n.z = 2.0*eps.x;\n\n  return normalize(n);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.+2.*q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float tsz = 2./RESOLUTION.y;\n  float sf = hf(p);\n  vec3 sn = normal(p);\n\n  vec3 sro  = vec3(0.0, 0.0, 10.0);\n  vec3 sp3  = vec3(p.x, p.y, 0.);\n  vec3 srd  = normalize(sp3-sro);\n  vec3 sr = reflect(srd, sn);\n  const vec3 ld = normalize(vec3(-1.,-1.5,0.5));\n  float sspe = pow(max(dot(ld, sr), 0.), 10.);\n\n  float a = exp(-5.*sf);\n\n  q = 0.5+0.5*(pp*(mix(1., 0.9*tanh(0.5+0.5*length(pp)), sf)));\n  \n  vec3 col = texture(iChannel0, q).xyz;\n  float agg = 1.;\n  for (float  i = 1.; i < 20.; ++i) {\n    float off = tsz*i;\n    float mul = exp(-a*i*i); \n    col += mul*texture(iChannel0, q - vec2(0., off)).xyz; \n    col += mul*texture(iChannel0, q + vec2(0., off)).xyz;\n    agg += 2.*mul;\n  }\n  col /= agg;\n  \n  vec4 pcol = texture(iChannel1, q);\n  col = mix(pcol.xyz,col*smoothstep(1.5, 0.5, length(pp)), sqrt(sf));\n  col += sspe*palette(length(pi*p+TIME));\n  col = sqrt(col);\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}