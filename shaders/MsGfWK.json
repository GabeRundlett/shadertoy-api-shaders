{
    "Shader": {
        "info": {
            "date": "1538280346",
            "description": "Ghosts in a sine wave! does not work in WebGL 1.0 will fix this soon!",
            "flags": 0,
            "hasliked": 0,
            "id": "MsGfWK",
            "likes": 6,
            "name": "Sine Wave Ghosts",
            "published": 3,
            "tags": [
                "sin",
                "pacman",
                "square",
                "ghosts"
            ],
            "usePreview": 0,
            "username": "Doctrometer",
            "viewed": 582
        },
        "renderpass": [
            {
                "code": "bool circle(vec2 center,vec2 point, float r){\n     \n      if(((point.x-center.x)*(point.x-center.x) + ((point.y-center.y)*(point.y-center.y))) <= (float(r*r))){\n          return true;\n      }\n    \n    return false;\n    \n}\n\n\nbool square(vec2 position,vec2 point,float w, float h){\n       \n    if(point.x > position.x && point.x < position.x+w && point.y > position.y && point.y < position.y+h){\n       return true;\n    } \n    return false;\n}\n\n\n\n    \n    const int blocks2[52] = // positions of blocks x,y,w,h\n        int[](5,12,4,1,\n              3,11,8,1,\n             2,10,10,1,\n             1,7,12,3,\n             0,2,14,6,\n             0,1,2,1,\n             3,1,3,1,\n             8,1,3,1,\n             12,1,2,1,\n             0,0,1,1,\n             4,0,2,1, // 52\n             8,0,2,1,\n             13,0,1,1  \n             );\n\t const int blocks[44] = // 44\n        int[](5,12,4,1,\n              3,11,8,1,\n             2,10,10,1,\n             1,7,12,3,\n             0,2,14,6,\n             0,1,4,1,\n             5,1,4,1,\n             10,1,4,1,\n             1,0,2,1,\n             6,0,2,1,\n             11,0,2,1\n              );\n\n\tconst int eye[12] = \n        int[](1,0,2,1,\n             0,1,4,3,\n             1,4,2,1);\n        \nvoid eyes(vec2 pos,vec2 frag, int scale,vec4 inCol, out vec4 colour){\n    \n    \n    for(int b = 0; b < 12;b+=4){\n        \n        int x = eye[b];\n        int y = eye[b+1];\n        int w = eye[b+2];\n        int h = eye[b+3];\n        \n        //int scale = 10;\n        if(square(vec2(float(x*scale)+pos.x,float(y*scale)+pos.y),frag,float(w*scale),float(h*scale))){\n            colour = vec4(1.0,1.0,1.0,1.0);\n               break;\n        }else{\n        \tcolour = inCol;\n        }\n        \n       \n            \n    } \n    \n}\n\nvoid ghost(vec2 pos,vec2 frag, int scale,vec4 inCol, out vec4 colour, vec4 ghostColour){\n    \n    \n    if(mod(float(iFrame/10),2.0) == 0.0){ // controls the speed of the sprite change\n        \n        for(int b = 0; b < 44;b+=4){\n\n            int x = blocks[b];\n            int y = blocks[b+1];\n            int w = blocks[b+2];\n            int h = blocks[b+3];\n\n            //int scale = 10;\n            if(square(vec2(float(x*scale)+pos.x,float(y*scale)+pos.y),frag,float(w*scale),float(h*scale))){\n                colour = ghostColour;\n                break;\n            }else{\n                colour = inCol;\n            }\n        }\n    \n    }else{\n        for(int b = 0; b < 52;b+=4){\n\n            int x = blocks2[b];\n            int y = blocks2[b+1];\n            int w = blocks2[b+2];\n            int h = blocks2[b+3];\n\n            //int scale = 10;\n            if(square(vec2(float(x*scale)+pos.x,float(y*scale)+pos.y),frag,float(w*scale),float(h*scale))){\n                colour = ghostColour;\n                break;\n            }else{\n                colour = inCol;\n            }\n        }\n    }\n    \n    vec2 rightEye = vec2(pos.x+2.0 * float(scale),pos.y+5.0 * float(scale));\n    vec2 leftEye = vec2(pos.x+8.0 * float(scale),pos.y+5.0 * float(scale));\n    \n    eyes(rightEye,frag,scale,colour,colour);\n    eyes(leftEye,frag,scale,colour,colour);\n    \n    \n    vec2 leftPupil = vec2(rightEye.x+1.0*float(scale),rightEye.y + 2.0 * float(scale));\n     vec2 rightPupil = vec2(leftEye.x+1.0*float(scale),leftEye.y + 2.0 * float(scale));\n    \n    leftPupil = vec2((sin(iTime*4.0)*1.0*float(scale))+leftPupil.x,leftPupil.y);\n    rightPupil = vec2((sin(iTime*4.0)*1.0*float(scale))+rightPupil.x,rightPupil.y);\n    \n    if(square(leftPupil,frag,2.0* float(scale),2.0* float(scale))){\n      colour = vec4(0.0,0.0,1.0,1.0); \n    }\n    \n    if(square(rightPupil,frag,2.0* float(scale),2.0* float(scale))){\n      colour = vec4(0.0,0.0,1.0,1.0); \n    }\n    \n    \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //background\n\tfragColor = vec4(uv.y,0.2,1.0,1.0);\n    \n    // need to fix scaling\n    int scale = 2 ;//int(iResolution.y/100.0);\n    \n    int ghostCount = int(iResolution.x/float(scale*20));\n    \n    for(int i= 0; i < ghostCount; i++){\n    float o = (sin((iTime+float(i)/2.0)*2.0)*40.0) + iResolution.y/2.0;\n    ghost(vec2(float(i)*20.0*float(scale) + float(scale*2),1.0*o),fragCoord,scale,fragColor,fragColor,mix(vec4(1.0,1.0,1.0,1.0), fragColor,0.5));\n    o = (-sin((iTime+float(i)/2.0)*2.0)*40.0) + iResolution.y/2.0;\n    ghost(vec2(float(i)*20.0*float(scale) + float(scale*2),1.0*o),fragCoord,scale,fragColor,fragColor,mix(vec4(1.0,0.0,0.0,1.0), fragColor,0.5));\n    }\n    \n    \n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}