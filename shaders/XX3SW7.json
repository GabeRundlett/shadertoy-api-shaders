{
    "Shader": {
        "info": {
            "date": "1719097057",
            "description": "https://chatgpt.com/share/6a29176b-e8c7-4458-a544-d223ab6c6aa5",
            "flags": 0,
            "hasliked": 0,
            "id": "XX3SW7",
            "likes": 3,
            "name": "ChatGPT made this",
            "published": 3,
            "tags": [
                "aigeneratedcode"
            ],
            "usePreview": 0,
            "username": "Danguafer",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "// ShaderToy GLSL script\n\n// Distance function for a cube\nfloat cubeDist(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\n// Distance function for a cylinder (used for tree trunks and other cylindrical shapes)\nfloat cylinderDist(vec3 p, vec2 h) {\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n// Distance function for a plane (used for the ground)\nfloat planeDist(vec3 p) {\n    return p.y + 1.0;\n}\n\n// Distance function for the river\nfloat riverDist(vec3 p) {\n    float riverWidth = 0.5 + 0.1 * sin(p.z * 2.0 + iTime);\n    return max(p.y + 1.0, abs(p.x + sin(p.z + iTime) * 0.1) - riverWidth);\n}\n\n// Distance function for a tree\nfloat treeDist(vec3 p, vec3 pos) {\n    // Tree trunk\n    float trunk = cylinderDist(p - pos, vec2(0.2, 2.0));\n    // Tree canopy (simple sphere)\n    float canopy = length(p - (pos + vec3(0.0, 2.0, 0.0))) - 1.0;\n    return min(trunk, canopy);\n}\n\n// Distance field combining the cube, the cylinder, the plane, the river, and the trees\nfloat distanceField(vec3 p, out int objID) {\n    float time = iTime * 0.5; // Control the speed of the movement\n    \n    // Circular movement\n    vec3 cubePos = vec3(cos(time), 0.0, sin(time)) * 1.5;\n    vec3 cylPos = vec3(cos(time + 3.14159), 0.5, sin(time + 3.14159)) * 1.5; // Higher floating cylinder\n    \n    float d1 = cubeDist(p - cubePos, vec3(0.5));\n    float d2 = cylinderDist(p - cylPos, vec2(0.5, 1.0));\n    float d3 = planeDist(p);\n    float d4 = riverDist(p); // River distance\n    \n    float d5 = 1e10;\n    for (float z = -5.0; z <= 5.0; z += 2.0) {\n        d5 = min(d5, treeDist(p, vec3(1.5, 0.0, z)));\n        d5 = min(d5, treeDist(p, vec3(-1.5, 0.0, z)));\n    }\n    \n    float minDist = min(min(d1, d2), min(d3, min(d4, d5)));\n    if (minDist == d1) objID = 1;\n    else if (minDist == d2) objID = 2;\n    else if (minDist == d4) objID = 4;\n    else if (minDist == d5) objID = 5;\n    else objID = 3;\n    return minDist;\n}\n\n// Calculate the normal at a point on the surface\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    int tmp;\n    return normalize(vec3(\n        distanceField(p + e.xyy, tmp) - distanceField(p - e.xyy, tmp),\n        distanceField(p + e.yxy, tmp) - distanceField(p - e.yxy, tmp),\n        distanceField(p + e.yyx, tmp) - distanceField(p - e.yyx, tmp)\n    ));\n}\n\n// Noise function for clouds and ripples\nfloat hash(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\n    return mix(mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n                   mix(hash(n + 57.0), hash(n + 58.0), f.x), f.y),\n               mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                   mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n}\n\nfloat fbm(vec3 p) {\n    float f = 0.0;\n    f += 0.5 * noise(p); p = p * 2.02;\n    f += 0.25 * noise(p); p = p * 2.03;\n    f += 0.125 * noise(p); p = p * 2.01;\n    f += 0.0625 * noise(p);\n    return f;\n}\n\nvec3 grassTexture(vec3 p) {\n    float scale = 10.0;\n    float n = noise(p * scale);\n    return vec3(0.0, 0.6, 0.0) * n + vec3(0.0, 0.8, 0.0) * (1.0 - n);\n}\n\nvec3 skyColor(vec3 rd) {\n    float t = rd.y * 0.5 + 0.5; // Map y direction to range [0, 1]\n    vec3 sky = mix(vec3(0.2, 0.4, 0.8), vec3(0.6, 0.8, 1.0), t); // Sky gradient\n\n    // Add some clouds\n    vec3 cloudPos = rd * 10.0 + vec3(0.0, iTime * 0.1, 0.0);\n    float cloud = smoothstep(0.5, 1.0, noise(cloudPos));\n    sky = mix(sky, vec3(1.0), cloud * 0.5);\n\n    return sky;\n}\n\n// Calculate the lighting and shading for a point\nvec3 shade(vec3 p, vec3 rd, vec3 normal, int objID, vec3 lightDir) {\n    vec3 lightColor = vec3(1.0);\n    \n    // Ambient, diffuse, and specular components\n    vec3 ambient = vec3(0.2); // Increased ambient light\n    vec3 diffuse = max(dot(normal, lightDir), 0.0) * lightColor;\n    vec3 viewDir = normalize(-rd);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    vec3 specular = pow(max(dot(viewDir, reflectDir), 0.0), 32.0) * lightColor;\n    \n    // Shadow calculation\n    float shadow = 1.0;\n    vec3 shadowP = p + normal * 0.01; // Offset to avoid self-shadowing\n    int shadowID;\n    for (int i = 0; i < 50; i++) {\n        float d = distanceField(shadowP, shadowID);\n        if (d < 0.001) {\n            shadow = 0.0;\n            break;\n        }\n        shadowP += lightDir * d;\n    }\n    \n    vec3 color;\n    if (objID == 1) {\n        color = vec3(0.0, 0.0, 1.0); // Blue for the cube\n    } else if (objID == 2) {\n        color = vec3(1.0, 0.0, 0.0); // Red for the cylinder\n    } else if (objID == 4) {\n        // Reflective and flowing rippled river surface\n        vec3 reflectDir = reflect(rd, normal);\n        vec3 reflection = skyColor(reflectDir);\n        float ripples = fbm(vec3(p.xz * 2.0, iTime));\n        color = mix(vec3(0.0, 0.5, 1.0), reflection, 0.5 + 0.5 * ripples);\n    } else if (objID == 5) {\n        if (p.y > 1.0) {\n            color = vec3(0.0, 0.5, 0.0); // Green for the tree canopy\n        } else {\n            color = vec3(0.4, 0.2, 0.0); // Brown for the tree trunk\n        }\n    } else {\n        color = grassTexture(p); // Grass texture for the plane\n    }\n    \n    vec3 lighting = ambient + shadow * (diffuse + specular);\n    return pow(color * lighting, vec3(0.454545)); // Apply gamma correction\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 1.0, 5.0); // Camera position\n    vec3 rd = normalize(vec3(uv, -1.5)); // Camera direction\n    \n    vec3 p = ro;\n    float t = 0.0;\n    int objID = 0;\n    for (int i = 0; i < 100; i++) {\n        float d = distanceField(p, objID);\n        if (d < 0.001) break;\n        t += d;\n        p = ro + rd * t;\n    }\n    \n    vec3 color = vec3(0.0);\n    if (t < 100.0) {\n        vec3 normal = calcNormal(p);\n        \n        // Map mouse coordinates to light direction\n        vec2 mouse = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n        vec3 lightDir = normalize(vec3(mouse.x, mouse.y + 1.0, 1.0));\n        \n        color = shade(p, rd, normal, objID, lightDir);\n    } else {\n        // Render sky color\n        color = skyColor(rd);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}