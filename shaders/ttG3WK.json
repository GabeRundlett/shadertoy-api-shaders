{
    "Shader": {
        "info": {
            "date": "1580369585",
            "description": "just learning",
            "flags": 0,
            "hasliked": 0,
            "id": "ttG3WK",
            "likes": 1,
            "name": "Follow BigWings's tutorial",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "firegump",
            "viewed": 701
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n  \tvec3 ab = b - a;\n    vec3 ap = p - a;\n    \n    float t = dot(ab, ap)/dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    vec3 c = a + t * ab;\n    \n    return length(p - c) - r;\n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n  \tvec3 ab = b - a;\n    vec3 ap = p - a;\n    \n    float t = dot(ab, ap)/dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    vec3 c = a + t * ab;\n    \n    float x = length(p - c) - r;\n    float y = (abs(t- .5) - .5) * length(ab);\n    float e = length(max(vec2(x,y), 0.));\n    float i = min(max(x,y), 0.);\n        \n    return e + i ;\n}\nfloat sdTorus(vec3 p, vec2 r){\n\tfloat x = length(p.xz) - r.x;\n    return length(vec2(x, p.y)) - r.y;\n}\nfloat sdBox(vec3 p, vec3 s){\n    return length(max(abs(p) - s, 0.));\n}\n\nfloat GetDist(vec3 p){ //p is the sample point\n    vec4 s = vec4(0, 1, 6, 1);\n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    float CapDist = sdCapsule(p, vec3(2, 1.5,5), vec3(3, 3,5), 0.3);\n    float TurDist = sdTorus(p - vec3(-3, 0.5 , 5), vec2(1.5, 0.3));\n    float BoxDist = sdBox(p - vec3(1.5,0.5 , 4), vec3(0.5));\n    float CylDist = sdCylinder(p, vec3(2, 0.3,2), vec3(6, 0.3,5), 0.3);\n    \n    float d= min(sphereDist, planeDist); \n    d = min(CapDist, d);\n    d = min(TurDist, d);\n    d = min(BoxDist, d);\n    d = min(CylDist, d);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.;\n    \n    for(int i = 0 ; i < MAX_STEPS; i++){\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\n\n\nvec3 GetNormal(vec3 p){\n\tfloat d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = d - vec3(GetDist(p - e.xyy),//same to vec3(d- d1, d- d2, d- d3);\n                      GetDist(p - e.yxy),\n                      GetDist(p - e.yyx));\n    \n   \n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p){\n\tvec3 lightPos = vec3(0, 5, 6);\n    vec3 ligthCol = vec3(1, 1 ,1);\n    \n    float MoveRadius = 3.;\n    float MoveSpeed = 2.;\n    \n    float t = iTime * MoveSpeed;\n    lightPos.xz += vec2(sin(t), cos(t)) * MoveRadius;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    float NdotL = dot(n, l);\n    //NdotL = NdotL*.5 + .5;\n    float dif = clamp(NdotL, 0. , 1.);\n    \n    //shadow\n    float d = RayMarch(p + n * SURF_DIST *2. , l);// 2. is fixed the center of the sphere sample\n    if(d < length(lightPos - p))\n    {\n        dif *= 0.1;\n    }\n    return dif * ligthCol;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    //camera position\n    vec3 ro = vec3(0,2,-3);\n    \n    vec3 rd = normalize(vec3(uv.x,uv.y, 1));\n    \n\tfloat d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    vec3 dif = GetLight(p);\n    \n    \n    col = vec3(dif);\n    \n    \n    \n    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}