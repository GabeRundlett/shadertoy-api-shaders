{
    "Shader": {
        "info": {
            "date": "1702698859",
            "description": "Slightly modded version of Pixel Blobs, huge thanks to SnoopethDuckDuck for all the cool designs.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xcf3z8",
            "likes": 4,
            "name": "Desert Goo Load Screen",
            "published": 3,
            "tags": [
                "blobs",
                "loading",
                "goo",
                "pixelart"
            ],
            "usePreview": 0,
            "username": "KanleyStubrick",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "#define cell(p) texelFetch(iChannel0, ivec2(p), 0 )\n\nvec3 pal(float t) {\n    vec3 d = 0.35 * vec3(1,3,5)/2.;\n    return 0.5 + 0.5 * cos(6.28319 * (0.5 * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0. * iResolution.xy) / iResolution.y;\n    \n    // Zoom + distort\n    float zm = 0.7 - 0.5 * min(1., tanh(iTime * iTime));\n    //zm += 0.3 - 0.3 * tanh(24. - length(uv) * 50.);\n    \n    // Pixel + cells etc.  \n    vec2 px = zm * fragCoord + (1.-zm) * 0.5 * iResolution.xy;\n        \n    vec4 c = cell(px),\n         b = cell(px - vec2(0,1)),\n         t = cell(px + vec2(0,1)),\n         l = cell(px - vec2(1,0)),\n         r = cell(px + vec2(1,0)), \n         sum = b + t + l + r;\n      \n    // Lighten right side\n    float cn = 0.06 * smoothstep(-0.2, 0.2, uv.x); \n    \n    // Shade from bottom to top\n    float fl = clamp((uv.y + 2.), 0.125, 10.0);\n    \n    // Background\n    vec3 col = pal(0.001 * (uv.x + 5. * uv.y) + 0.9 * cn - 0.7);\n    \n    // Exterior outline\n    if (c.r == 0. && (sum.r == 1. || sum.r == 2.))\n        col = pal(fl + cn - 0.4);  \n    // Interior\n    else if (sum.r == 4.) \n        col = pal(fl + cn - 0.52 - 0.18 * c.g);    \n\n    fragColor.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n// From iq\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    // Centre coords\n    f -= floor(0.5 * iResolution.xy);\n    \n    // Speed of time\n    float spd = 0.125;\n\n    // Number of blobs\n    float n = 50.;\n    \n    // Distance from blobs\n    float d = 1e5;\n    \n    for (float i = 0.; i < n; i++) {\n        // Offset each blob\n        float io = 2. * pi * i / n;\n        \n        // Time\n        float t = spd * iTime + 1. * pi * cos(0.5 * spd * iTime + io);\n        \n        // Motion of blobs (idk how this works)\n        float c = 1.8 + 0.1 * cos(7. * t + io); //first number controls how much blobs stick together (lower = stickier), second # controls affinity for center (higher = more concentrated on center), third # is how many nodes/folds they move between\n        d = smin(d, c * length(f - 30. * (c-0.5) * vec2(cos(t+io), sin(t+io))), 10.);  \n     }\n     \n     // Harsh shape\n     float r = step(d, 5.);\n     \n     // Soft shape (going inwards)\n     float s = smoothstep(0., 5., -d + 5.);\n     \n     col = vec4(r, s, 0, 0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}