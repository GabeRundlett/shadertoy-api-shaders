{
    "Shader": {
        "info": {
            "date": "1563487776",
            "description": "raymarching + texture",
            "flags": 0,
            "hasliked": 0,
            "id": "3tfXDN",
            "likes": 2,
            "name": "[Ese] texture",
            "published": 3,
            "tags": [
                "raymarching",
                "texture"
            ],
            "usePreview": 0,
            "username": "Eseris",
            "viewed": 399
        },
        "renderpass": [
            {
                "code": "#define pow(a,b) pow(abs(a),(b))\n\nconst int MARCHING_STEPS = 150;\nconst int ALIASING_STEPS = 1;\nconst float MIN_DIST = 0.;\nconst float MAX_DIST = 40.;\nconst float EPSILON = 1e-3;\n\nstruct Light {\n\tvec3 iamb; // ambient intensity\n\tvec3 idiff; // diffuse intensity\n\tvec3 ispec; // specular intensity\n\tvec3 pos;\n\tfloat shininess;\n};\n\nstruct Material {\n\tvec3 amb; // ambient constant\n\tvec3 diff; // diffuse constant\n\tvec3 spec; // specular constant\n};\n\nmat2 rot(float a) {\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat sdSphere(vec3 p, float radius) {\n\treturn length(p) - radius;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n\treturn length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.);\n}\n\nfloat sdPlane(vec3 p, vec4 n) {\n  return dot(p,n.xyz) + n.w;\n}\n\nvec3 repeat(vec3 p, vec3 s) {\n    return mod(p, s) - .5 * s;\n}\n\nfloat map(vec3 p) {\n    float d = 1e10;\n    vec3 q = vec3(mod(p.x, 1.), p.yz);\n    d = min(d, sdPlane(p, vec4(0, 1, 0, 1.)));\n    \n    {\n        vec3 p2 = p  - vec3(-4, 1, 0);\n        p2.zx *= rot(iTime);\n    \td = min(d, sdBox(p2, vec3(1, 2, 1)));\n    }\n    \n    d = min(d, sdSphere(p - vec3(4, 0., 1), 1.3));\n    d = min(d, sdBox(p - vec3(0, 2, - 2), vec3(2, 2, .01)));\n\treturn d;\n}\n\nvec3 mapGradient(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n\treturn normalize(vec3(\n\t\tmap(p + e.xyy) - map(p - e.xyy),\n\t\tmap(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n\t));\n}\n\nfloat rayProcess(vec3 camPos, vec3 rayDir, float start, float end) {\n\tfloat depth = start;\n\tfor(int i = 0; i < MARCHING_STEPS; ++i) {\n\t\tfloat dist = map(camPos + depth * rayDir);\n\t\tif(dist < EPSILON) return depth;\n\t\tdepth += dist;\n\t\tif(dist >= end) return end;\n\t}\n\treturn end;\n}\n\nvec3 rayDirection(float camAngle, vec2 coord) {\n\tvec2 uv = (coord - .5) * iResolution.xy;\n\tfloat focalDist = iResolution.y / 2. / tan(radians(camAngle) / 2.);\n\treturn normalize(vec3(uv, -focalDist));\n}\n\n\nfloat checkerboard(in vec3 p) {\n    vec3 q = floor(p);\n    return mod(q.x + q.y + q.z,2.);              \n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    const float maxHei = 2.;\n    float tp = (maxHei-ro.y)/rd.y; \n    if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=min(0, iFrame); i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 applyLight(Light light, vec3 p, vec3 rd, vec3 nor) {\n    vec3 col = vec3(0.);\n\n    // material        \n    vec3 mate = vec3(.3);\n    if(p.y < -.999) {\n        float f = checkerboard(p);\n        mate = 0.15 + f*vec3(0.05);\n    }\n    else if(abs(p.x) < 2.) {\n        vec2 uv = fract(p.yx * .25 - vec2(0, -.5));\n        mate = texture(iChannel0, uv.yx).rgb;\n        //mate = vec3(uv, 0.) * .3;\n    }\n\n    // key light\n    vec3  lig = normalize(light.pos);\n    vec3  hal = normalize( lig-rd );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n\n    float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),40.0)*\n        dif * (0.04 + 0.99*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 6.0 ));\n    \n    \n    dif *= calcSoftshadow(p, lig, .1, 3.);\n\n    col = mate * 3.3*dif*vec3(.80,0.70,0.6);\n    col +=      7.0*spe*vec3(1.00,0.70,0.5);\n\n    // ambient light\n    float amb = .5;\n    col += mate*amb;\n    \n\treturn col;\n}\n\nvec3 shading(vec3 ro, vec3 rd) {\n\tLight light;\n\tlight.iamb = vec3(.5, .6, .7);\n\tlight.idiff = vec3(.5);\n\tlight.ispec = vec3(.4);\n\tlight.pos = vec3(-8., 8., 5.);\n\tlight.shininess = 6.;\n\n\t//vec3 col = applyLight(mat, light, p, eye);\n    vec3 resCol = vec3(0);\n    vec3 p = ro;\n    float alpha = 1.;\n    for(int i = 0; i < 2; ++i) {\n        float depth = rayProcess(p, rd, MIN_DIST, MAX_DIST);\n    \tp += depth * rd;\n    \tvec3 nor = mapGradient(p);\n        \n    \tvec3 col = applyLight(light, p, rd, nor);\n        col *= pow(smoothstep(MAX_DIST, 10., depth), 2.); // fog\n        \n        resCol += col * alpha;\n        alpha *= .25;\n        \n    \trd = reflect(rd, nor);\n        p += rd * 1e-3; // small incr to avoid null dist\n    }\n    \n    \n\treturn resCol;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 tot = vec3(0.);\n    \n    for(int i = 0; i < ALIASING_STEPS; ++i) {\n        for(int j = 0; j < ALIASING_STEPS; ++j) {\n            vec2 offset = vec2(i, j) / 2. - .5;\n            vec3 camPos = vec3(0., 5., 7.);\n            vec3 dir = rayDirection(60., (fragCoord + offset) / iResolution.xy);\n            \n            //float ang = -.3 + .5*sin(.5 * iTime);\n            float ang = .5 * iTime;\n            camPos.zx *= rot(ang);\n            dir.yz *= rot(.5);\n            dir.zx *= rot(ang);\n\n            vec3 col = vec3(0.);\n            col = shading(camPos, dir);\n            \n            // gamma\n            tot += pow(col, vec3(1. / 1.7));\n        }\n    }\n    \n    tot /= float(ALIASING_STEPS * ALIASING_STEPS);\n\tfragColor = vec4(tot, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}