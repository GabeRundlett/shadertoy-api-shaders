{
    "Shader": {
        "info": {
            "date": "1643608975",
            "description": "A generalized ray-prism intersector for N number of sides.\nReturns the near distance and the normal.\n\nClick and drag for interaction.\nMouse X position controls the rotation.\nMouse Y position controls the number of sides.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssBcDD",
            "likes": 14,
            "name": "N-Sided Prism - Intersection",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "intersection",
                "prism",
                "intersector"
            ],
            "usePreview": 0,
            "username": "gelami",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "\n// N-Sided Prism - Intersection\n// https://www.shadertoy.com/view/ssBcDD\n\n/**\n * A generalized ray-prism intersector for N number of sides.\n * Returns the near distance and the normal.\n *\n * Click and drag for interaction.\n * Mouse X position controls the rotation.\n * Mouse Y position controls the number of sides.\n * \n *   This shader computes the intersection by looping through each plane face\n * and checking whether it is a front or a back side, and assigning it to the\n * near or far intersection respectively.\n *   Then the hit mask is computed by comparing the near and far distances.\n * Is there a name for this property?)\n * \n *   For prisms with an even number of sides, it would be much more efficient\n * to use slab intersections instead, where the front and the backside is already known.\n * (i.e. Hexprism - intersection by iq: https://www.shadertoy.com/view/tljBWy)\n * \n *   I've been wondering if this can be applied to subdivisions of polyhedrons,\n * maybe with octahedrons or icosahedrons.\n *   Something like Geodesic tiling by tdhooper: https://www.shadertoy.com/view/llVXRd\n * but only with just planar faces.\n * \n *   Edit: I've just found out about this amazing shader.\n * Somebody has already done this 3 years ago T_T\n * Wish I'd seen it before writing all of these lol.\n * Looks like it's the same method but theirs is much more elegant. TT_TT\n * \n * Truncated Icosahedron by marian42: https://www.shadertoy.com/view/ltsfzN\n * \n**/\n\n#define MAX_SIDES 12\n\n#define AA 2\n\n#define MAX_DIST 1e3\n#define PI 3.14159265359\n\n#define rot2D(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nvec4 iPrism( vec3 ro, vec3 rd, float ra, float he, int si )\n{\n    vec4 tN = vec4(-MAX_DIST, 0, 0, 0);\n    float tF = MAX_DIST;\n    \n    float s = PI * 2. / float(si);\n    float a = PI / 2.;\n    \n    ra = ra * cos(s*0.5);\n    \n    for (int i = 0; i < MAX_SIDES + 2; i++)\n    {\n        if (i > si + 1)\n            break;\n        \n        vec3 nd = i < si ? vec3(cos(a), 0, sin(a)) : vec3(0, float(i - si)*2.-1., 0);\n        float c = dot(ro, nd) + (i < si ? ra : he);\n        float d = dot(rd, nd);\n        \n        float nt = -c / d > 0. ? -c / d : -MAX_DIST;\n        nt = d < 0. ? -nt : nt;\n        \n        if (nt > tN.x)\n            tN = vec4(nt, -nd);\n\n        if (d < 0. && -nt < tF)\n            tF = -nt;\n        \n        a += s;\n    }\n    \n    if (tN.x > tF) return vec4(MAX_DIST);\n\n    return tN;\n}\n\nmat3 getCamMat(vec3 ro, vec3 lo)\n{\n    vec3 w = normalize(lo - ro);\n    vec3 u = normalize(cross(w, vec3(0, 1, 0)));\n    vec3 v = normalize(cross(u, w));\n    \n    return mat3(u, v, w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    float t = iTime * 0.4;\n    vec3 ro = vec3(0, 1.2, 1.8);\n    vec3 lo = vec3(0, 0, 0);\n    \n    //ro.yz *= rot2D(iMouse.z > 0. ? m.y * PI+PI*2./3. : 0.);\n    ro.yz *= rot2D(sin(t)*.15);\n    ro.xz *= rot2D(iMouse.z > 0. ? m.x * 2.*PI : t);\n    \n    float fn = iMouse.z > 0. ? m.y : (cos(iTime*PI/2.5)*0.5+0.5);\n    int n = int(fn * float(MAX_SIDES - 3)*.9999 + 3.);\n    \n    mat3 cm = getCamMat(ro, lo);\n\n    vec3 tot = vec3(0);\n    \n    #if AA > 1\n    for( int p=0; p<AA; p++ )\n    for( int v=0; v<AA; v++ )\n    {\n        vec2 o = vec2(float(p),float(v)) / float(AA) - 0.5;\n        vec2 pv = (2.0 * (fragCoord+o) - iResolution.xy) / iResolution.y;\n    #else\n        vec2 pv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    #endif\n        \n        vec3 col = vec3(0);\n\n        vec3 rd = normalize(cm * vec3(pv, 1.5));\n\n        vec4 d = iPrism(ro, rd, .8, .8, n);\n\n        if (d.x < MAX_DIST)\n        {   \n            vec3 p = ro + rd*d.x;\n            vec3 n = d.yzw;\n            vec3 l = normalize(vec3(1., .6, .5));\n            \n            vec2 uv = abs(n.y) > .5 ? p.xz : vec2(atan(p.z, p.x)/PI*2., p.y*1.2);\n            \n            vec3 env = textureLod(iChannel0, reflect(rd, n), 3.).rgb*.6+.4;\n            float ch = mod(dot(floor(uv*2.5), vec2(1)), 2.)*.4+.6;\n            float dif = max(dot(n, l), .1);\n            col = vec3(.1, .2, .3)*.6 + vec3(.9, .8, .6)*dif*env*ch;\n        } else\n        {\n            col = vec3(0.12)*(1.-0.45*length(pv));\n        }\n\n        tot += col;\n    #if AA > 1\n    }\n    tot /= float(AA*AA);\n    #endif\n    \n    tot = max(tot, vec3(0));\n    tot = tot / (1. + tot);\n    tot = pow(tot, vec3(1./2.2));\n    \n    tot += fract(sin(fragCoord.x*vec3(32,11,2)+fragCoord.y*vec3(3,31,21))*232.323)/255.;\n    \n    fragColor = vec4(tot, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}