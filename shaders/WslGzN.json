{
    "Shader": {
        "info": {
            "date": "1545221190",
            "description": "Boxes - matryoshka style",
            "flags": 0,
            "hasliked": 0,
            "id": "WslGzN",
            "likes": 20,
            "name": "Unboxing",
            "published": 3,
            "tags": [
                "box",
                "fold",
                "hinge"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "// \"Unboxing\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Boxes - matryoshka style\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\nvec3 ltDir, qHit;\nfloat dstFar, tCur, tBox;\nint idObj;\nconst int nBox = 10;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat DstBoxFlaps (vec3 p, float dMin, int k)\n{\n  vec4 bSize;\n  vec3 q;\n  vec2 b;\n  float d, fk, szBox, aBox, r, qt;\n  fk = float (k) / float (nBox);\n  szBox = 1. - 0.5 * fk;\n  aBox = -0.5 * pi * SmoothBump (0.32 - 0.2 * fk, 0.68 + 0.2 * fk, 0.13, tBox);\n  dMin /= szBox;\n  p /= szBox;\n  bSize = vec4 (2., 1., 1.5, 0.02);\n  p.y -= - bSize.y;\n  r = 0.3 * bSize.w;\n  q = p;\n  d = PrRoundBoxDf (q, bSize.xwz - r, r);\n  DMINQ (1 + k);\n  q = p;\n  q.x = abs (q.x);\n  q.xy = Rot2D (q.xy - bSize.xw, aBox) - bSize.yw * vec2 (1., -1.);\n  d = PrRoundBoxDf (q, bSize.ywz - r, r);\n  DMINQ (1 + k);\n  qt = q.x;\n  q.x = abs (qt);\n  q.xy -= bSize.yw;\n  d = PrCylDf (q, 1.3 * bSize.w, bSize.z - 2. * bSize.w);\n  DMINQ (1 + nBox);\n  q.x = qt - bSize.y;\n  q.xy = Rot2D (q.xy, aBox) - bSize.xw * vec2 (0.5, -1.);\n  b = vec2 (q.x, abs (q.z)) / bSize.xz;\n  d = 0.5 * SmoothMax (PrRoundBoxDf (q, bSize.xwz * vec3 (0.5, 1., 1.) - r, r),\n     dot (b, vec2 (1.)) - 0.5, 0.02);\n  DMINQ (1 + k);\n  q = p;\n  q.z = abs (q.z);\n  q.zy = Rot2D (q.zy - bSize.zw, aBox) - bSize.yw * vec2 (1., -1.);\n  d = PrRoundBoxDf (q, bSize.xwy - r, r);\n  DMINQ (1 + k);\n  qt = q.z;\n  q.z = abs (qt);\n  q.zy -= bSize.yw;\n  q = q.yzx;\n  d = PrCylDf (q, 1.3 * bSize.w, bSize.x - 2. * bSize.w);\n  DMINQ (1 + nBox);\n  q = q.zxy;\n  q.z = qt - bSize.y;\n  q.zy = Rot2D (q.zy, aBox) - bSize.zw * vec2 (0.5, -1.);\n  b = vec2 (abs (q.x), q.z) / bSize.xz;\n  d = 0.5 * SmoothMax (PrRoundBoxDf (q, bSize.xwz * vec3 (1., 1., 0.5) - r, r),\n     dot (b, vec2 (1.)) - 0.5, 0.02);\n  DMINQ (1 + k);\n  return dMin * szBox;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  for (int k = 0; k < nBox; k ++) dMin = DstBoxFlaps (p, dMin, k);\n  q = p;\n  d = PrSphDf (q, 1. - 0.5 * float (nBox - 1) / float (nBox));\n  DMINQ (2 + nBox);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, sh;\n  tBox = mod (0.07 * tCur + 0.5, 1.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj <= nBox) {\n      col4 = vec4 (HsvToRgb (vec3 (mod (0.1 + float (idObj - 1) / float (nBox), 1.),\n         1., 0.9)), 0.1);\n      if (idObj == 1 && qHit.y < 0.) col4.rgb *= 0.5 +\n         0.5 * smoothstep (0., 0.01, min (abs (qHit.x), abs (qHit.z)));\n    } else if (idObj == 1 + nBox) {\n      col4 = vec4 (0.9, 0.9, 0., 0.3) * (0.3 + 0.7 * SmoothBump (0.03, 0.97, 0.01,\n         mod (2. * qHit.z, 1.)));\n    } else if (idObj == 2 + nBox) {\n      col4 = vec4 (HsvToRgb (vec3 (mod (0.04 * tCur, 1.), 0.5, 0.8 +\n         0.1 * (sin (25. * tCur) + 0.5 * sin (33. * tCur)))), 0.3);\n    }\n    sh = ObjSShadow (ro, ltDir);\n    col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.) * max (dot (vn, ltDir), 0.)) +\n       step (0.9, sh) * sh * col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (0.3, 0.3, 0.6) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.205 * pi;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (-0.5, -0.3, -20.);\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  dstFar = 50.;\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 5.2));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col = mix (col, vec3 (0.1, 0.1, 0.7), smoothstep (0.08, 0.1, length (max (abs (uv) -\n     vec2 (canvas.x / canvas.y, 1.) + 0.15, 0.))));\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}