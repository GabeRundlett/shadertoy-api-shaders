{
    "Shader": {
        "info": {
            "date": "1559454240",
            "description": "raymarching experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "wlj3D1",
            "likes": 5,
            "name": "Sponge inside",
            "published": 3,
            "tags": [
                "raymarching",
                "infinity"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "#define BLACK_COL vec3(23, 32, 38) / 255.0\n#define WHITE_COL vec3(245, 248, 250) / 255.0\n\nfloat map(vec3 p) {\n    return length(mod(p, 2.0) - 1.0) - 1.3;\n}\n\nvec3 getNormal(vec3 p) {\n    float t = map(p);\n    vec2 d = vec2(0.001, 0.0);\n    return normalize(vec3(t - map(p + d.xyy), t - map(p + d.yxy), t - map(p + d.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    vec3 camDir = normalize(vec3(uv * 1.0, (sin(iTime) * 0.5 + 0.5) * 0.75 + 0.25));\n    vec3 camPos = vec3(1.0, (cos(iTime) * 3.0) - 1.57 , - iTime * 2.5);\n\n    float t = -0.5;\n    for(int i = 0 ; i < 100; i += 1) {\n        t += map(camDir * t + camPos);\n    }\n    vec3 surf = camDir * t + camPos;\n    vec3 light = normalize(vec3(0.0, 0.0, 1.0));\n    vec3 normal = getNormal(surf);\n\n    vec3 col = mix(BLACK_COL, WHITE_COL, dot(light, normal));\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}