{
    "Shader": {
        "info": {
            "date": "1704466911",
            "description": "An alien tech landscape with a floating blob\n\nPart of the RBBS PC Demo \"Melodicis Tropicis\"\nSee https://www.pouet.net/prod.php?which=95796",
            "flags": 0,
            "hasliked": 0,
            "id": "McB3Rc",
            "likes": 0,
            "name": "Oemfoe Alien Tech",
            "published": 3,
            "tags": [
                "landscape",
                "blob",
                "alien",
                "tech"
            ],
            "usePreview": 0,
            "username": "oemfoe",
            "viewed": 70
        },
        "renderpass": [
            {
                "code": "const float E = 0.001;\nconst float PI = 3.14159;\n\n\n#define T (iMouse.x / iResolution.x)\n\n\nmat3 rotateY(float r) {\n    return mat3(\n        cos(r), 0., sin(r),\n        0., 1., 0.,\n        -sin(r), 0., cos(r)\n    );\n}\n\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n\nfloat plane(vec3 p, vec3 n, float d) {\n\treturn dot(p, n) + d;\n}\n\nfloat sphere(vec3 p, float radius){\n    return length(p) - radius;\n}\n\nfloat box(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n#define PHI 6.28318530718\n\nfloat fBlob(vec3 p) {\n\tp = abs(p);\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tfloat b = max(max(max(\n\t\tdot(p, normalize(vec3(1, 1, 1))),\n\t\tdot(p.xz, normalize(vec2(PHI+1., 1)))),\n\t\tdot(p.yx, normalize(vec2(1, PHI)))),\n\t\tdot(p.xz, normalize(vec2(1, PHI))));\n\tfloat l = length(p) * (0.9 + 0.1 * sin(iTime));\n\treturn l - 1.5 - 0.2 * (1.5 / 2.)* cos(iTime * 8. + min(sqrt(1.01 - b / l)*(PI / 0.25), PI));\n}\n\nfloat scene(vec3 p) {\n    \n    float blob = fBlob(p * 3. - vec3(0., 2., 2.)) / 3.;\n\n\n    p.z += iTime;\n    p.y += 1.;\n    \n    float pl = plane(p, vec3(0., 1., 0.), 0.1);\n    pl = 100000.;\n    \n    float shift = 0.1 * sin(iTime);\n    \n    \n\n    pMod2(p.xz, vec2(1., 2.));\n    \n    \n    float box1 = box(p - vec3(0. - shift, 0., 0.), vec3(0.2, 0.1, 0.4));\n    float box2 = box(p - vec3(0.2, 0.1 + shift, 0. - shift), vec3(0.1, 0.1, 0.2));\n    float box3 = box(p - vec3(-0.2, 0.0, -0.3), vec3(0.4, 0.05, 0.3));\n    float box4 = box(p - vec3(0.2 + shift, -0.1, 0.), vec3(0.6, 0.1, 0.7));\n    float box5 = box(p - vec3(0.0 - shift, 0.0, 0.5), vec3(0.2, 0.2, 0.2));\n    float box6 = box(p - vec3(0.0 - shift, 0.0 + shift, 0.5), vec3(0.01, 2., 0.01));\n    \n    \n    return min(min(blob, min(min(pl, box1), box6)), min(min(box5, box2), min(box4, box3)));\n}\n\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        scene(vec3(p.x + E, p.y, p.z)) - scene(vec3(p.x - E, p.y, p.z)),\n        scene(vec3(p.x, p.y + E, p.z)) - scene(vec3(p.x, p.y - E, p.z)),\n        scene(vec3(p.x, p.y, p.z + E)) - scene(vec3(p.x, p.y, p.z - E))\n    ));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = fragCoord/iResolution.xy;\n\n    float aspect = iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    uv -= 0.5;\n    uv.y /= aspect;\n    \n    vec3 ro = vec3(0.0, 0.0, -5.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 ld = vec3(0., 1., -0.5);\n    float t = 0.0;\n    float d = 0.0;\n    \n    vec3 fc = vec3(0.463,0.176,0.545);\n    vec3 c = fc;\n    for (int i = 0; i < 100; i++){\n        vec3 p = ro + t * rd;\n        \n        d = scene(p);\n        if (d < E) {\n            // hit\n            float fog = smoothstep(10., -3., p.z);\n            vec3 n = normal(p);\n            float l = smoothstep(0.0, 1.0, dot(n, ld));\n            c = mix(fc, vec3(l * 0.8 + 0.2) * col, fog);\n            break;\n        }\n        t += d * 1.;\n    }\n    \n    // float wave = texelFetch(iChannel0, ivec2(int(512.0 * uv2.x), 1.), 0).x;\n    \n    // Output to screen\n    fragColor = vec4(c /* + texture(iChannel0, uv2).xxx*/, 1.0);\n    \n    //if (abs(wave - uv2.y) < 0.002)\n    //    fragColor = vec4(1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}