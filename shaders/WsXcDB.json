{
    "Shader": {
        "info": {
            "date": "1585452729",
            "description": "Simple parallax snow effect made by transforming a simple noise texture from another buffer. To see Buffer A, change the 1 on line 3 to a 0.",
            "flags": 32,
            "hasliked": 0,
            "id": "WsXcDB",
            "likes": 19,
            "name": "Snow Storm",
            "published": 3,
            "tags": [
                "particles",
                "snow"
            ],
            "usePreview": 0,
            "username": "natethegreat2525",
            "viewed": 810
        },
        "renderpass": [
            {
                "code": "#define TIME_SCALE .1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if 1\n    vec4 col=vec4(0.);\n    vec2 relCoord = fragCoord;\n    float idst = 1.;\n    for (int i = 0; i < 20; i++) {\n        idst = mod(float(i+1)/20. - iTime*TIME_SCALE, 1.) + .2;\n        relCoord =(fragCoord-iResolution.xy*.5)*(idst*idst) + iResolution.xy*.5;\n        float day = relCoord.y - floor(relCoord.y);\n        float offsX = mod(relCoord.x, 20.);\n        ivec2 pos = ivec2(int(relCoord.x/20.)+i*int(iResolution.y/20.), relCoord.y);\n        vec4 tex = texelFetch(iChannel0, pos, 0);\n        float da = sin(tex.g + relCoord.y*(.03+sin((float(i)+iTime*TIME_SCALE)*3.14*1.61)*0.01)+float(i)*32.32)*10.*.9 + 10.;\n        if (abs(da-offsX) < .5) {\n            if (tex.x > 0.) {\n                float dx = (da-offsX)*2.;\n            \tfloat dy = 2.*(day - .5);\n                float dist = (clamp(length(vec2(dx,dy)),0.5,1.)-.5)*2.;\n                col += 1.-dist;\n            }\n        }\n    }\n    col = max(col, vec4(0.5));\n    fragColor = vec4(col.xyz,1.0);\n#else\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 1) {\n        if (snoise(vec3(fragCoord.x*17.435, fragCoord.y*37.32+1000., 2.4+sin(fragCoord.y*1.)*5.3)) > .5) {\n            fragColor = vec4(1);\n            fragColor.g = snoise(vec3(fragCoord.y*75.34, fragCoord.x*98.4, 6.+sin(iTime)*5.3))*3.14+6.28;\n        }\n        return;\n    }\n    if (fragCoord.y > iResolution.y-1.) {\n        if (snoise(vec3(fragCoord.x*17.435, iTime*37.32+1000., 2.4+sin(iTime*1.)*5.3)) > .5) {\n            fragColor = vec4(1);\n            fragColor.g = snoise(vec3(iTime*75.34, fragCoord.x*98.4, 6.+sin(iTime)*5.3))*3.14+6.28;\n        }\n        return;\n    }\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord)+ivec2(0,1), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}