{
    "Shader": {
        "info": {
            "date": "1463225324",
            "description": "Tiling with Hyperbolic triangle. Their interior angles are (PI/2, PI/3, PI/8), (PI/2, PI/4, PI/8), and (PI/2, PI/5, PI/8). We use the Algorithm which called Iterated Inversion System (IIS) developed with Kazushi Ahara (Meiji University).",
            "flags": 0,
            "hasliked": 0,
            "id": "XsVXzW",
            "likes": 10,
            "name": "Hyperbolic triangular tiling 2",
            "published": 3,
            "tags": [
                "2d",
                "tiling"
            ],
            "usePreview": 0,
            "username": "soma_arc",
            "viewed": 913
        },
        "renderpass": [
            {
                "code": "/*\nCreated by soma_arc, Kazushi Ahara - 2016\nThis work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported.\n*/\n\n// from Syntopia http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/\nvec2 rand2n(vec2 co, float sampleIndex) {\n    vec2 seed = co * (sampleIndex + 1.0);\n\tseed+=vec2(-1,1);\n    // implementation based on: lumina.sourceforge.net/Tutorials/Noise.html\n    return vec2(fract(sin(dot(seed.xy ,vec2(12.9898,78.233))) * 43758.5453),\n                fract(cos(dot(seed.xy ,vec2(4.898,7.23))) * 23421.631));\n}\n\nvec2 tp1 = vec2(0.26607724, 0);\nvec2 tp2 = vec2(0, 0.14062592);\nvec2 cPos = vec2(2.01219217, 3.62584500);\nfloat r = 4.02438434;\nconst float PI = 3.14159265359;\n\nvoid calcCircle(float theta, float phi){\n\tfloat tanTheta = tan(PI/2. - theta);\n    float tanPhi = tan(phi);\n    float tanTheta2 = tanTheta * tanTheta;\n    float tanPhi2 = tanPhi * tanPhi;\n    \n    tp1 = vec2(sqrt((1. + tanTheta2)/(-tanPhi2 + tanTheta2)) - \n               tanTheta * sqrt((1. + tanPhi2)/(-tanPhi2 + tanTheta2))/tanTheta, 0.);\n    tp2 = vec2(0., -tanPhi * sqrt(-(1. + tanTheta2)/(tanPhi2 - tanTheta2))+\n              tanTheta * sqrt(-(1. + tanPhi2)/(tanPhi2 - tanTheta2)));\n    \n    \n    cPos = vec2(sqrt((1. + tanTheta2)/(-tanPhi2 + tanTheta2)),\n                 sqrt((1. + tanPhi2)*tanTheta2/(-tanPhi2 + tanTheta2))\n               );\n    r = sqrt((1. + tanPhi2)*(1. + tanTheta2) /(-tanPhi2 + tanTheta2));\n}\n\nvec2 circleInverse(vec2 pos, vec2 circlePos, float circleR){\n\treturn ((pos - circlePos) * circleR * circleR)/(length(pos - circlePos) * length(pos - circlePos) ) + circlePos;\n}\n\nconst int ITERATIONS = 50;\nfloat loopNum = 0.;\nint IIS(vec2 pos){\n    if(length(pos) > 1.) return 0;\n\n    int invCount = 1;\n    bool fund = true;\n\tfor(int i = 0 ; i < ITERATIONS ; i++){\n\t\tfund = true;\n        if (pos.x < 0.){\n            pos *= vec2(-1, 1);\n            invCount++;\n\t       \tfund = false;\n        }\n        if(pos.y < 0.){\n            pos *= vec2(1, -1);\n            invCount++;\n            fund = false;\n        }\n        if(distance(pos, cPos) < r ){\n        \tpos = circleInverse(pos, cPos, r);\n            invCount++;\n            fund = false;\n        }\n        if(fund)\n        \treturn invCount;\n    }\n\n\treturn invCount;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst float sampleNum = 50.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float ratio = iResolution.x / iResolution.y / 2.0;\n    vec3 sum = vec3(0);\n    calcCircle(PI/(4. + sin(iTime)), PI/8.);\n    for(float i = 0. ; i < sampleNum ; i++){\n        vec2 position = ( (fragCoord.xy + rand2n(fragCoord.xy, i)) / iResolution.yy ) - vec2(ratio, 0.5);\n\n        position = position * 2.;\n        //position *= 0.03 + abs(1. * sin(iTime) * sin(iTime));\n        position *= 1.0;\n        //position += vec2(cos(iTime), 0.3 * sin(iTime));\n\n        int d = IIS(position);\n\n        if(d == 0){\n            sum += vec3(0.,0.,0.);\n        }else{\n            if(mod(float(d), 2.) == 0.){\n                sum += hsv2rgb(vec3(0.3, 1., 1.));\n            }else{\n                sum += hsv2rgb(vec3(0.7, 1., 1.));\n            }\n        }\n    }\n    fragColor = vec4(sum/sampleNum, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}