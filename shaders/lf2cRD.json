{
    "Shader": {
        "info": {
            "date": "1722075661",
            "description": "Using  the single pass algorithm from Simplest detailed fluid (https://www.shadertoy.com/view/7t3SDf) by Davidar.\nNoise from Noise - wave - 2D by IQ (https://www.shadertoy.com/view/tldSRj)",
            "flags": 32,
            "hasliked": 0,
            "id": "lf2cRD",
            "likes": 8,
            "name": "Waterfall  10",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "guil",
            "viewed": 122
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 C, in vec2 fragCoord )\n{\n    vec2 u = fragCoord/iResolution.xy;\n    vec4 a = texture(iChannel0,u);\n    C = .7*a.z*vec4(1,1.5,1.7,1);    \n    C += (texture(iChannel1,u) + .25*dgx(fragCoord))*vec4(.3,.5,.35+.03*g(fragCoord),1);\n    C = mix(C,vec4(.5,.7,1.,1),clamp(exp(60.*u.y+8.*sin(5.*u.x)-56.-g(fragCoord)),0.,1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define A(u) texture(iChannel0,(u)/iResolution.xy)\n\n#define ks 4.0   //kernel convolution size\n#define kf 1.4   //kernel factor : 1/(2*sigmaÂ²)\n#define gf 0.03  //gravity force\n#define af .9   //attraction force \n#define tf .2   //terrain force \n\n/*vec2 h2( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}*/\nvec2 h2( vec2 n ) { return sin(n.x*n.y*vec2(12,17)+vec2(1,2)*1.49723); }\n \nfloat noise(vec2 p)\n{\n    const float kF = 3.;  // make 6 to see worms\n    \n    vec2 i = floor(p);\n\tvec2 f = fract(p);\n    //f = f*f*(3.0-2.0*f);\n    f = f*f*f*(f*(f*6.0-15.0)+10.0);\n    return mix(mix(sin(kF*dot(p,h2(i+vec2(0,0)))),\n               \t   sin(kF*dot(p,h2(i+vec2(1,0)))),f.x),\n               mix(sin(kF*dot(p,h2(i+vec2(0,1)))),\n               \t   sin(kF*dot(p,h2(i+vec2(1,1)))),f.x),f.y);\n}\n\n\n\nfloat g(vec2 u){\n   return 15.*abs(0.*noise(u*.004+2.)+noise(u*.02)+.7)-6.;\n}\n\n\nfloat dgx(vec2 u){\n   float r = g(u+vec2(1,0))-g(u-vec2(1,0));\n   return (r<0.)?0.:r;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec4  o = vec4(0);   \n    for(float i=-ks; i<=ks; i++){\n    for(float j=-ks; j<=ks; j++){\n      vec2 d = vec2(i,j);\n      vec2 v = A(u+d).xy-vec2(0,gf);       \n      o += A(u+d).z                                // neighbour mass\n         * exp(-dot(v+d,v+d)*kf) / 3.1416 *kf      // normalised Gaussian\n         * vec4(v + af*(1.- A(u+d).z- tf*g(u+d))*(v+d),1,0);    // velocity contribution      \n    }}\n   \n    if(o.z!=0.){o.xy /= o.z;} //calculate the average velocity        \n    float l = length(o.xy);   //clamp velocity to avoid mass leakage\n    if (l>2.)o.xy /=l/2.;\n     // Boundaries    \n    vec2 p = u/iResolution.xy;\n    if(p.x>.98||p.x<.02||p.y>.98||p.y<.02){o.z=0.;}\n            \n    if(iMouse.z>0.)                       //mouse click adds velocity\n    {\n        vec2 m = 8.*(u-iMouse.xy)/iResolution.y;\n        o += vec4(m,.1,0)*exp(-dot(m,m));\n    }\n    \n    vec2 m = .03*(u-iResolution.xy*vec2(.5,.9));\n        o += vec4(0,0,.04,1)*exp(-dot(m,m));\n    fragColor = o;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}