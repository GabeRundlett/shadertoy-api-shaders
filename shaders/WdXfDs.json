{
    "Shader": {
        "info": {
            "date": "1589243622",
            "description": "Really simple video color filter to give everything a more yellow-brown tone.\n\nOriginally inspired by reading articles like https://matadornetwork.com/read/yellow-filter-american-movies/ this filter allows you to apply a similar effect to your own home.",
            "flags": 2,
            "hasliked": 0,
            "id": "WdXfDs",
            "likes": 4,
            "name": "yellow filter",
            "published": 3,
            "tags": [
                "simple",
                "video",
                "filter"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 631
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // webcam pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    // simple colorspace transforms\n    mat3 rot = mat3(-0.3999643 ,  0.82848493, -0.39197103,\n       0.74160659,  0.04123861, -0.6695663 ,\n       0.53856125,  0.55849092,  0.63090386);\n    mat3 rot_inv = mat3(-0.3999643 ,  0.74160659,  0.53856125,\n       0.82848493,  0.04123861,  0.55849092,\n       -0.39197103, -0.6695663 ,  0.63090386);\n    vec3 cent = vec3(0.47968451, \n                     0.450743, \n                     0.45227517);\n    \n    vec3 rel = rot * (col - cent);\n\n    rel.xy *= 0.5 * rel.xy * rel.xy; // damp these channels, but especially for values near\n    // the color centroid\n    rel.z *= 1.0 + 0.5 * step(0.0,rel.z); // bump up these values where above centroid\n    vec3 new_col = (rot_inv * rel) + cent + vec3(0.15, 0.05, -0.1);\n    // take inverse of color transform, add colorspace center back in, add yellow offset\n\n    float weight = step(fragCoord.x, iMouse.x - 10.0);\n\n    col = mix(new_col, col, weight);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}