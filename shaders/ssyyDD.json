{
    "Shader": {
        "info": {
            "date": "1654867288",
            "description": "Secret brother of Mike Wazowski which can be found here: https://www.shadertoy.com/view/MsXGWr",
            "flags": 8,
            "hasliked": 0,
            "id": "ssyyDD",
            "likes": 2,
            "name": "Cursed Wazowski (Secret Brother)",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "distancefield",
                "audio",
                "cursed",
                "wazowski",
                "stolenmercilessly"
            ],
            "usePreview": 0,
            "username": "tsutsen",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n\n// Made with love after a famous movie character. Modeling is pretty\n// arbitrary and was done by visual inspiration from the first picture\n// you get in google images when you type \"mike wazowski\".\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*50.50);\n}\n\nfloat noise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    return mix( hash(p+0.0), hash(p+1.0),f);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*157.0;\n\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.9000*noise( p ); p = m2*p*1.0;\n    f += 0.500*noise( p ); p = m2*p*2.03;\n    f += 0.250*noise( p ); p = m2*p*2.01;\n    f += 0.5*noise( p );\n\n    return f/0.1;\n}\n\nvec3 texturize( sampler2D sa, vec3 p, vec3 n )\n{\n\tvec3 x = texture( sa, p.yz ).xyz;\n\tvec3 y = texture( sa, p.zx ).xyz;\n\tvec3 z = texture( sa, p.xy ).xyz;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\n//----------------------------------------------------------------\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegment( in vec3 p, in vec3 a, in vec3 b )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length(p/r) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n#define ZERO (min(iFrame,0))\n\n//----------------------------------------------------------------\n\nvec2 map( vec3 p )\n{\n\tp.y -= 1.8;\n\tp.x = abs(p.x)-0.2;\n\n\tvec3 q = p*(0.6);\n\tq.y -= 0.3*pow(1.0-length(p.xz),1.0)*smoothstep(0.0, 0.2, p.y);\n\tq.y *= 1.05;\n\tq.z *= 1.0 + 0.1*smoothstep( 0.0, 0.9, q.z )*smoothstep( -0.5, 0.5, p.y );\n    float dd = length( (p - vec3(0.0,0.65,0.8))*vec3(1.0,0.75,1.0) );\n\tfloat am = clamp( 4.0*abs(p.y-0.45), 0.0, 1.0 );\n\tfloat fo = -0.03*(1.0-smoothstep( 0.0, 0.04*am, abs(dd-0.42) ))*am;\n    float dd2 = length( (p - vec3(0.0,0.1,0.8))*vec3(1.0,0.25,1.0) );\n\tfloat am2 = clamp( 1.5*(p.y-0.45), 0.0, 1.0 );\n\tfloat fo2 = -0.085*(1.0-smoothstep( 0.0, 0.8*am2, abs(dd2-0.42) ))*am2;\n    q.y += -0.05+0.05*length(q.x);\n\t\n\tfloat d1 = length( q ) - 0.6 + fo + fo2;\n    vec2 res = vec2( d1, 0.5 );\n\n\t// arms\n\t//vec2 h = sdSegment( p, vec3(1,-0.12,0.3), vec3(1.4,-0.9,-0.1) );\n\t//float d2 = h.x - 0.2;\n\t//res.x = smin( res.x, d2, 0.1 );\n\t//h = sdSegment( p, vec3(0.1,1,-.1), vec3(0.9,-1.2,0.1) );\n\t//d2 = h.x - 0.1 + h.y*0.1;\n\t//res.x = smin( res.x, d2, 0.5 );\n    \n    // arms\n\tvec2 h = sdSegment( p, vec3(1,0.11,0.3), vec3(1.5,-0.8,-.1) );\n\tfloat d2 = h.x - 0.07;\n\tres.x = smin( res.x, d2, 0.1 );\n\th = sdSegment( p, vec3(1.5,-0.6,-.1), vec3(0.95,-1.2,0.1) );\n\td2 = h.x - 0.07 + h.y*0.02;\n\tres.x = smin( res.x, d2, 0.5 );\n\t\n\t// hands\n\tif( p.y<-1.0 )\n\t{\n    float fa = sin(3.0*iTime);\n\th = sdSegment( p, vec3(0.95,-1.2,0.1), vec3(0.97,-1.5,0.0) );\n\td2 = h.x - 0.03;\n\tres.x = smin( res.x, d2, 0.01 );\n\th = sdSegment( p, vec3(0.97,-1.5,0.0), vec3(0.95,-1.7,0.0)-0.01*fa );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2, 0.02 );\n\th = sdSegment( p, vec3(0.95,-1.2,0.1), vec3(1.05,-1.5,0.1) );\n\td2 = h.x - 0.03;\n\tres.x = smin( res.x, d2, 0.02 );\n\th = sdSegment( p, vec3(1.05,-1.5,0.1), vec3(1.0,-1.75,0.1)-0.01*fa );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2, 0.02 );\n\th = sdSegment( p, vec3(0.95,-1.2,0.1), vec3(0.98,-1.5,0.2) );\n\td2 = h.x - 0.03;\n\tres.x = smin( res.x, d2, 0.03 );\n\th = sdSegment( p, vec3(0.98,-1.5,0.2), vec3(0.95,-1.7,0.15)-0.01*fa );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2, 0.03 );\n\th = sdSegment( p, vec3(0.95,-1.2,0.1), vec3(0.85,-1.4,0.2) );\n\td2 = h.x - 0.04 + 0.01*h.y;\n\tres.x = smin( res.x, d2, 0.05 );\n\th = sdSegment( p, vec3(0.85,-1.4,0.2), vec3(0.85,-1.63,0.15)+0.01*fa );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2, 0.03 );\n\t}\n\t\n\t// legs\n\tif( p.y<0.0 )\n\t{\n\th = sdSegment( p, vec3(0.5,-0.1,0.0), vec3(0.6,-1.2,0.1) );\n\td2 = h.x - 0.14 + h.y*0.08;\n\tres.x = smin( res.x, d2, 0.1 );\n\th = sdSegment( p, vec3(0.6,-1.2,0.1), vec3(0.5,-1.8,0.0) );\n\td2 = h.x - 0.06;\n\tres.x = smin( res.x, d2, 0.51 );\n\t}\n\n    // feet\n\tif( p.y<-0.5 )\n\t{\n\th = sdSegment( p, vec3(0.5,-1.8,0.0), vec3(0.6,-1.8,0.4) );\n\td2 = h.x - 0.09 + 0.02*h.y;\n\tres.x = smin( res.x, d2, 0.06 );\n\th = sdSegment( p, vec3(0.5,-1.8,0.0), vec3(0.77,-1.8,0.35) );\n\td2 = h.x - 0.1 + 0.1*h.y;\n\tres.x = smin( res.x, d2, 0.06 );\n\th = sdSegment( p, vec3(0.5,-1.8,0.0), vec3(0.9,-1.8,0.2) );\n\td2 = h.x - 0.07 + 0.02*h.y;\n\tres.x = smin( res.x, d2, 0.06 );\n\t}\n\t\n\t// horns\n\tvec3 hp = p - vec3(1,0.8,0.0);\n    hp.xy = mat2(0.6,0.8,-0.8,0.6)*hp.xy;\n    hp.x += 0.8*hp.y*hp.y;\n    float d4 = sdEllipsoid( hp, vec3(0.13,0.5,0.16) );\n\tif( d4<res.x ) res = vec2( d4, 3.0 );\n    \n\t// eyes\n\tfloat d3 = length( (p - vec3(0.0,0.5,0.8))*vec3(1.0,0.8,1.0) ) - 0.5;\n\tif( d3<res.x ) res = vec2( d3, 2.0 );\n    \n    //float d03 = length( (p - vec3(0.0,0.1,0.5))*vec3(1.0,0.8,1.0) ) - 0.5;\n\t//if( d03<res.x ) res = vec2( d03, 2.0 );\n\n\t// mouth\n\tfloat mo = length( (q-vec3(0.0,-0.5,1.4))*vec3(1.0,0.9,-0.01)/1.2 ) -0.3/1.2;\n\tfloat of = 0.1*pow(smoothstep( 0.0, 0.8, abs(p.x-0.3) ),0.5);\n\tmo = max( mo, -q.y-0.35-of );\n\n\tfloat li = smoothstep( 0.0, 0.05, mo+0.02 ) - smoothstep( 0.05, 0.10, mo+0.02 );\n\tres.x -= 0.03*li*clamp( (-q.y-0.4)*10.0, 0.0, 1.0 );\n\t\n\tif( -mo > res.x )\n\t\tres = vec2( -mo, 4.0 );\n\n    res.x += 0.01*(smoothstep( 0.0, 0.05, mo+0.062 ) - smoothstep( 0.05, 0.10, mo+0.062 ));\n\n    // teeth\t\n    if( p.x<0.3 )\n\t{\n    p.x = mod( p.x, 0.16 )-0.08;\t\n    float d5 = length( (p-vec3(0.0,-0.45,0.65))*vec3(1.5,0.7,1.5))-0.07;\n\tif( d5<res.x )\n\t\tres = vec2( d5, 4.0 );\n\t}\n    \n    if( p.x<0.3 )\n\t{\n    p.x = mod( p.x, 0.16 )-0.08;\t\n    float d5 = length( (p-vec3(0.0,-0.23,0.79))*vec3(1.5,0.75,1.5))-0.08;\n\tif( d5<res.x )\n\t\tres = vec2( d5, 4.0 );\n\t}\n\t\n\treturn vec2(res.x*0.8,res.y);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 0    \n    vec3 eps = vec3(0.002,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.002*e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n    float m = -1.0;\n\tfloat mint = 10.0;\n\n    // floor\t\n\tfloat tf = (0.0-ro.y)/rd.y;\n\tif( tf>0.0 ) { mint = tf; m = 0.0; }\n\t\n\t// mike\n\tfloat maxd = min(5.0,mint);\n\tfloat precis = 0.001;\n    float t = 0.0;\n\tfloat d = 0.0;\n    for( int i=ZERO; i<128; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        float h = res.x;\n\t\td = res.y;\n        if( h<precis||t>maxd ) break;\n        t += h;\n    }\n\n    if( t<maxd && t<mint )\n\t{\n\t\tmint = t;\n\t\tm = d;\n\t}\n\n    return vec3( mint, m, m );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 0.2;\n    float t = mint;\n    for( int i=ZERO; i<50; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        res = min( res, smoothstep(0.0,1.0,k*h/t) );\n\t\tt += clamp( h, 0.01, 0.25 );\n\t\tif( res<0.005 || t>10.0 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\n\nconst vec3 lig = normalize(vec3(1.0,0.7,0.9));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = sin(-0.25 + 0.31416*iTime);\n\tvec3 ro = vec3(3.5*sin(an),1.8,3.5*cos(an));\n    vec3 ta = vec3(0.0,1.5,0.0);\n\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = vec3(1.0);\n\n\t// raymarch\n    vec3 tmat = intersect(ro,rd);\n    if( tmat.z>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\n        // materials\n\t\tvec4 mate = vec4(0.0);\n\t\tvec2 mate2 = vec2(1.0,1.0);\n\t\tif( tmat.z<0.5 )\n\t\t{\n\t\t\tnor = vec3(0.0,1.0,0.0);\n\t\t    ref = reflect( rd, nor );\n\t\t\tmate.xyz = vec3(1.0);\n            mate2.y = 1.0 - 0.9*(2.0/(2.0+dot(pos.xz,pos.xz)));\n\t\t}\n\t\telse if( tmat.z<1.5 )\n\t\t{\n            mate2.x = 4.0;\n\t\t\tmate = vec4(1.0,0.0,0.0,0.9);\n\n            float f = texturize( iChannel0, 0.5*pos, nor ).x * texturize( iChannel0, 0.2*0.25*pos, nor ).x;\n\t\t\tmate.xyz = mix( 0.56*mate.xyz, vec3(0.21,0.28,0.0), f );\n\n\t\t\tf = texturize( iChannel0, pos, nor ).x * texturize( iChannel0, 0.25*pos, nor ).x;\n\t\t\tf = f*f;\n\t\t    mate.xyz = mix( mate.xyz, vec3(0.5,0.28,0.0), 0.6*f );\n\n\t\t\tvec3 bnor = -1.0+2.0*texturize( iChannel0, 4.0*pos, nor );\n\t\t\tnor = normalize( nor + 0.15*bnor );\n\t\t}\n\t\telse if( tmat.z<2.5 )\n\t\t{\n\t\t\tvec3 q = pos-vec3(0.0,1.8,0.0) - vec3(0.0,0.44,0.35);\n\n\t\t\tfloat an2 = an + 0.015*(-1.0+2.0*noise( 6.0*iTime ));\n            vec3 oq = q;\t\t\t\n\t\t\tq.x += -2.0*0.2*clamp(sin(an2),-0.42,0.42);\n            \n            \n            //q.x = fract(sin(q.x)*1.0);\n\t\t\tfloat f = length( q.xy );\n\t\t\t\n\t\t\tmate2.y = 1.0-smoothstep(0.24,0.35,length( oq.xy-vec2(0.0,0.035) ));\n\t\t\tmate = vec4(0.5,0.5,0.5,1.0);\n\t\t\tmate.xyz = mix( mate.xyz, vec3(0.6,0.4,0.3), 0.5*smoothstep(0.1,0.4,f) );\n\t\t\t\n            vec3 c1 = vec3(0.0,0.15,0.05)*(1.0-0.85*f/0.19);\n\t\t\tfloat a = atan(q.y,-q.x);\n            float te = fbm( 50.0*vec2(0.9*a,1.2*f) );\n\t\t\tc1 *= 0.3 + 5.0*te;\n            \n            c1 += vec3(0.9,1.0,0.1)*0.35*(0.1+te)*\n                (1.0-smoothstep( 0.3,1.2,abs(a+0.5)))*\n                (1.0-smoothstep( 0.0, 0.06, abs(f-0.125) ));\n            \n\t\t\tmate.xyz = mix( mate.xyz, c1, 1.0-smoothstep( 0.50, -0.1, f ) );\n\n\t\t\toq.x += -2.0*0.19*clamp(sin(an2),-0.42,0.42);\n\t\t\tf = length( oq.xy );\n\t\t\tmate.xyz *= smoothstep( 0.02, 0.15, f );\n            mate.xyz *= 1.2-0.2*vec3(0.5,0.9,1.0)*smoothstep( 0.2, 0.4, f );\n            \n\t\t\tmate.w = 2.0;\n            mate2.x = 64.0;\n\t\t}\n\t\telse if( tmat.z<3.5 )\n\t\t{\n\t\t\tmate = 0.8*vec4(0.85,0.7,0.1,0.0);\n            mate2.x = 0.0;\n\t\t\tfloat f = smoothstep( 0.0, 0.1, 0.5*abs(pos.x)+pos.y-3.02 );\n\t\t\tmate.xyz *= 1.0 - 0.8*vec3( f );\n\t\t\tmate.xyz *= 0.2 + 0.8*smoothstep( 0.0, 1.0, texturize( iChannel0, 0.1*2.1*pos*vec3(4.0,0.1,4.0), nor ).x );\n\t\t}\n\t\telse if( tmat.z<4.5 )\n\t\t{\n\t\t\tfloat z = smoothstep( 0.0, 2.0, pos.z+0.5 );\n\t\t\tmate = 0.5*vec4(0.5,0.25,0.1,0.0);\n\t\t\tmate.x += 0.1*(1.0-z);\n\t\t\tmate2.y = z;\n\t\t}\n\n\t\t// lighting\n\t\tfloat occ = (0.5 + 0.5*nor.y)*mate2.y;\n        float amb = 0.5;\n\t\tfloat bou = clamp(-nor.y,0.0,1.0);\n\t\tfloat dif = max(dot(nor,lig),0.0);\n        float bac = max(0.3 + 0.7*dot(nor,-lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.01*nor, lig, 0.001, 32.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 2.0 );\n        vec3  hal = normalize(lig-rd);\n        float spe = max(pow( clamp( dot(nor,hal), 0.0, 1.0), mate2.x*4.0 ),0.0 );\n\t\t\n\t\t// lights\n\t\tvec3 lin = vec3(0.0);\n        lin += 2.0*dif*vec3(1.00,1.00,1.00)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n\t\tlin += 1.0*amb*vec3(0.30,0.30,0.30)*occ;\n\t\tlin += 2.0*bou*vec3(0.40,0.40,0.40)*mate2.y;\n\t\tlin += 4.0*bac*vec3(0.40,0.30,0.25)*occ;\n        lin += 1.0*fre*vec3(1.00,1.00,1.00)*2.0*mate.w*(0.5+0.5*dif*sha)*occ;\n\t\tcol = mate.xyz*lin;\n\t\tcol += 4.0*spe*vec3(2.0)*mate.w*dif*sha*(0.04+0.96*pow(clamp(1.0+dot(hal,rd),0.0,1.0),5.0));\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\n\t// vigneting\n\tvec2 q = fragCoord / iResolution.xy;\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.5 );\n\t   \n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Trying to sync by using AND's code from\n// https://www.shadertoy.com/view/4sSSWz\n#define WARMUP_TIME     (2.0)\n\nconst float loopSpeed   = .1;\nconst float loopTime    = 5.;\nconst float impactTime  = 1.;\nconst float impactFade  = .3;\nconst float fadeOutTime = .1;\nconst float fadeInTime  = .1;\nconst float whiteTime   = .3; // fade to white\n    \n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n\n/*\n\t\n\tFrom https://www.shadertoy.com/view/MdfXWX\n\n*/\n\nfloat n2f(float note)\n{\n   return 55.0*pow(2.0,(note-3.0)/12.); \n}\n\nvec2 bass(float time, float tt, float note)\n{\n    if (tt<0.0)\n      return vec2(0.0);\n\n    float freqTime = 6.2831*time*n2f(note);\n    \n    return vec2(( sin(     freqTime\n                      +sin(freqTime)*7.0*exp(-2.0*tt)\n                     )+\n                  sin(     freqTime*2.0\n                      +cos(freqTime*2.0)*1.0*sin(time*3.14)\n                      +sin(freqTime*8.0)*0.25*sin(1.0+time*3.14)\n                    )*exp(-2.0*tt)+\n                  cos(     freqTime*4.0\n                      +cos(freqTime*2.0)*3.0*sin(time*3.14+0.3)\n                    )*exp(-2.0*tt)\n                )\n                \n                *exp(-1.0*tt) );\n}\n\n\n/*\n\t\n\tFrom https://www.shadertoy.com/view/4ts3z2\n\n*/\n\n//Audio by Dave_Hoskins\n\nvec2 add = vec2(1.0, 0.0);\n#define MOD2 vec2(.16632,.17369)\n#define MOD3 vec3(.16532,.17369,.15787)\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in ...\nfloat hash11(float p)\n{\n\tvec2 p2 = fract(vec2(p) * MOD2);\n    p2 += dot(p2.yx, p2.xy+19.19);\n\treturn fract(p2.x * p2.y);\n}\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\t//p  = fract(p * MOD3);\n    vec3 p3 = fract(vec3(p) * MOD3);\n    p3 += dot(p3.xyz, p3.yzx + 19.19);\n   return fract(vec2(p3.x * p3.y, p3.z*p3.x))-.5;\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3.zxy, p3.yxz+19.19);\n    return fract(vec2(p3.x * p3.y, p3.z*p3.x));\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 Noise21(float x)\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return  mix( hash21(p), hash21(p + 1.0), f)-.5;\n    \n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nfloat Noise11(float x)\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix( hash11(p), hash11(p + 1.0), f)-.5;\n\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 2 in...\nvec2 Noise22(vec2 x)\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    vec2 res = mix(mix( hash22(p),          hash22(p + add.xy),f.x),\n                    mix( hash22(p + add.yx), hash22(p + add.xx),f.x),f.y);\n    return res-.5;\n}\n\n//----------------------------------------------------------------------------------------\n// Fractal Brownian Motion...\nvec2 FBM21(float v)\n{\n    vec2 r = vec2(0.0);\n    vec2 x = vec2(v, v*1.3+23.333);\n    float a = .6;\n    \n    for (int i = 0; i < 8; i++)\n    {\n        r += Noise22(x * a) / a;\n        a += a;\n    }\n     \n    return r;\n}\n\n//----------------------------------------------------------------------------------------\n// Fractal Brownian Motion...\nvec2 FBM22(vec2 x)\n{\n    vec2 r = vec2(0.0);\n    \n    float a = .6;\n    \n    for (int i = 0; i < 8; i++)\n    {\n        r += Noise22(x * a) / a;\n        a += a;\n    }\n     \n    return r;\n}\n\n\n/*\n\n\tFROM @LukeXI\n\n*/\n\n#define PI              (3.1415)\n#define TWOPI           (6.2832)\n\n\nfloat square(float time, float freq) {\n    \n    return sin(time * TWOPI * freq) > 0.0 ? 1.0 : -1.0;\n}\n\nfloat sine(float time, float freq) {\n    \n    return sin(time * TWOPI * freq);\n}\n\nvec2 sineLoop(float time, float freq, float rhythm) {\n    vec2 sig =vec2( 0.);\n    float loop = fract(time * rhythm);\n    \n    float modFreq = freq + (sine(time, 7.0));\n    \n    sig += vec2( sine(time, freq) * exp(-3.0*loop) );\n  //  sig += vec2( square(time, freq/2.0) * exp(-3.0*loop) ) *0.2;\n    \n    float panfreq = rhythm * 0.3;\n    float panSin = sine(time, panfreq);\n    float pan = (panSin + 1.0) / 2.0;\n    sig.x *= pan;\n    sig.y *= (1.0 - pan);\n    \n    return sig;\n}\n\nvec2 chimeTrack(float time) {\n    vec2 sig = vec2( 0. );\n    sig += sineLoop(time, 1730.0, 0.44) * 0.2;\n    sig += sineLoop(time, 880.0, 1.0);\n    sig += sineLoop(time, 990.0, 0.3) * 0.4;\n    sig += sineLoop(time, 330.0, 0.4);\n    sig += sineLoop(time, 110.0, 0.1);\n    sig += sineLoop(time, 60.0, 0.05);\n    \n    sig /= 6.0;\n    \n    return sig;\n}\n\n\n// Choreography:\n\n// total peace \n// When comet arrives, start ominous music\n// ominous music builds\n// when fade to white, ominouse\n\n\nfloat tone( float freq , float time  ){\n    \n    return sin(6.2831* freq *time);\n    \n}\n\nfloat chord( float base , float time ){\n    \n\n    float f = 0.;\n    \n    f += tone( base , time )           * (1. + .1 * sin( time * 5.2 )) ;\n    f += tone( base , time * 1.26  ) * .6 * (1. + .3 * sin( time * 10.02)) ;\n    f += tone( base , time * 1.498 ) * .4 * (1. + .3 * sin( time * 23.4)) ;\n    f += tone( base , time * 2.* 1.498 ) * .2 * (1. + .3* sin( time * 43.4)) ;\n    f += tone( base , time * 2.* 1.26 ) * .2 * (1. + .3* sin( time * 10.4)) ;\n    //f += tone( base , time * 4. ) * .3 * (1. + .1 * sin( time * .1)) ;\n    //f += tone( base , time * 5. ) * .2 * (1. + .1 * sin( time * .04)) ;\n    //f += tone( base , time * 6. ) * .1 * (1. + .1 * sin( time * .08)) ;\n    \n    return f / 2.;\n    \n}\n\nvec2 mainSound( in int samp,float time)\n{\n    \n    \n \ttime = max(0.0, time - WARMUP_TIME);\n\n    float tInput = time;\n    float timeInLoop = loopTime - time * loopSpeed;\n    \n\n   \tfloat per = ( (loopTime - timeInLoop) / loopTime ); \n    \n     // Fading in / fading out\n    float fadeIn = ((loopTime - clamp( timeInLoop , loopTime - fadeInTime , loopTime ))) / fadeInTime;\n    \n    float fadeOut = ((loopTime - clamp( (loopTime- timeInLoop) , loopTime - fadeOutTime , loopTime ))) / fadeOutTime;\n    \n    \n    // Gives us a straight fade to white\n\n    if( timeInLoop < impactTime + whiteTime ){\n        \n    \n    }\n    \n    \n     // TEXT\n    if( timeInLoop < impactTime ){ \n        \n        float textFade = pow( max( 0. , timeInLoop - (impactTime - impactFade) ) / impactFade , 2. );\n\n    }\n    \n    \n    float peaceTone = 0.;\n    float cometTone = 0.;\n    float textTone = 0.;\n    float explosionTone = 0.;\n    float finalTone = 0.;\n      \n    \n    peaceTone = smoothstep( .0 , .1 , per );\n    if( per > .6 ){\n     peaceTone = smoothstep( .8 , .6 , per);\n    }\n    \n  \n    if( per > .41 ){\n        cometTone = smoothstep( .41 , .49 , per ); \n        if( per > .49  && per < .75){\n          cometTone = 1. +  pow( (per - .49) /  ( .75 - .49 ) , 3.);\n        }\n        if( per > .75 ){\n          cometTone = smoothstep( .84 , .75  , per) * 2.;\n        }\n    }\n    \n    \n    explosionTone = pow( cometTone , 5. );\n    textTone = smoothstep( .76 , .9 , per );\n    finalTone = pow( smoothstep( .93 , .96 , per ), 2.) / max( 1. , exp( (per - .96)* 80. ));\n\n  \n    \n    vec2 noiseT = vec2( rand( vec2(time , 20.51) ) ,  rand( vec2(time*4. , 2.51) ));\n    \n    vec2 noiseFBM =  FBM22(time*(Noise21(time*.4)+900.0))*abs(Noise21(time*1.5));\n    //261.63\n    //329.63\n    //392.00\n    \n    //float cornT = 0.;\n    vec2 comet = vec2( chord( 55. , time))* cometTone;\n    //vec2 comet = vec2( 0. );\n    vec2 peace = chimeTrack(  time ) * peaceTone;\n    vec2 text  = chimeTrack(time*20.0) * textTone;\n   \n    vec2 final  =  vec2( chord( 110. , time))* 3.  * finalTone;\n      \n    vec2 explosion = ( noiseT + noiseFBM * 5. ) * .03  * explosionTone;\n\n    \n    vec2 b =  bass( time , 1.7 , 15. );\n    b += bass( time , 1.7 , 10.);\n    b *= textTone * 3.;\n    \n\n\n    vec2  a = min( fadeOut , fadeIn ) * (b + (comet + peace + text + explosion + final)  * .4);\n    //a2 =vec2( pow( a.x , 2. ),pow( a.y , 2. ));\n    return clamp( a ,-.8 , .8 );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}