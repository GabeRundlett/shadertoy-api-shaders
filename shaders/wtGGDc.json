{
    "Shader": {
        "info": {
            "date": "1580063830",
            "description": "Tangents of a sphere rotating around.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtGGDc",
            "likes": 6,
            "name": "Spherical Tangents",
            "published": 3,
            "tags": [
                "spherical",
                "tangents"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))*GR/2.0/PI+GR/PI)*iTime+100.0)\n#define saw(x) (acos(cos(x))/PI)\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\n\n//#define iTime (iTime*.1)\n\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n\t//vec3 eye = vec3(0.0, 0.0, 3.0);\n\tvec3 eye = vec3(cos(iTime), sin(iTime*.5), sin(iTime))*2.0;\n    vec3 look = vec3(0.0, 0.0, 0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 foward = normalize(look-eye);\n    vec3 right = normalize(cross(foward, up));\n    up = normalize(cross(right, foward));\n    vec3 ray = normalize(foward+uv.x*right+uv.y*up);\n    \n    fragColor = vec4(0.0);\n    \n \tconst float outerCount = 10.0;\n \tconst float innerCount = 8.0;\n        \n    float map = 0.0;\n    float sum = 0.0;\n    \n    vec2 xy = vec2(0.);\n    \n    for(float i = 0.0; i < outerCount; i+=1.0)\n    {\n        \n        float theta1 = i/outerCount*4.0*PI+time*PI*i/outerCount;\n        \n        for(float j = 0.0; j < innerCount; j+=1.0)\n        {\n            float theta2 = theta1+j/innerCount*PI*4.0+time*PI*j/innerCount;\n\n       \t \tvec3 p1 = vec3(cos(theta1)*sin(theta2),\n                           sin(theta1)*sin(theta2),\n                           cos(theta2));\n                           \n       \t \tvec3 p2 = vec3(cos(theta1)*sin(theta2+PI/8.0),\n                           sin(theta1)*sin(theta2+PI/8.0),\n                           cos(theta2+PI/8.0));\n            \n            vec3 ray2 = normalize(p2-p1);\n            \n            float a = dot(ray,ray);\n            float b = dot(ray,ray2);\n            float c = dot(ray2,ray2);\n            float d = dot(ray,eye-p1);\n            float e = dot(eye-p1,ray2);\n            \n            float t1 = (b*e-c*d)/(a*c-b*b);\n            float t2 = (a*e-b*d)/(a*c-b*b);\n            \n            float dist = length((eye+ray*t1)-(p1+ray2*t2));\n            \n            float lineWidth = .1;\n            \n            float lineLength = 1.5+.5*sin(time);\n            \n            if(t1 > 0.0 && abs(t2) < lineLength && dist < lineWidth)\n            {\n                float sides = (1.0-smoothstep(0.0, lineWidth, dist));\n                float ends = (1.0-smoothstep(0.0, lineLength, abs(t2)));\n                float line = sides*ends;\n                \n                map += line;\n                sum += 1.0;\n            }\n        }\n    }\n    \n\tfragColor = vec4(flux(PI*pow(map/sum, 1.0+.5*sin(-time/GR))+time), 1.0)*clamp(map, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}