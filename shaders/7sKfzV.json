{
    "Shader": {
        "info": {
            "date": "1658938871",
            "description": "Exploring shapes.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sKfzV",
            "likes": 14,
            "name": "HUD Aim",
            "published": 3,
            "tags": [
                "shapes",
                "polarcoordinates",
                "ui",
                "hud"
            ],
            "usePreview": 0,
            "username": "VPaltoDance",
            "viewed": 408
        },
        "renderpass": [
            {
                "code": "// this shader is an attempt to reproduse one of the huds at https://graphicriver.net/item/hud-elements-/17159709#\n\n#define N 7.0f\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define SMOOTH_BORDER_SIZE 0.0035\n\n#define BACKGROUND_COLOR vec3(0.01, 0.06, 0.11)\n#define BASE_COLOR vec3(0.13, 0.53, 0.6)\n#define SECOND_COLOR vec3(0.4, 0.45, 0.5)\n#define CIRCLE_COLOR vec3(0.74, 0.85, 0.93)\n#define DARK_RED_COLOR vec3(0.64, 0.16, 0.2)\n\nstruct Transform\n{\n    vec2 offset;\n    vec2 scale;\n    float angle;\n};\n\nvec2 transform_cartesian(vec2 xy, Transform transform)\n{\n     xy -= transform.offset;\n     xy *= transform.scale;\n     return xy;\n}\n\nvec2 transform_to_polar(vec2 xy)\n{\n    return vec2(length(xy), atan(xy.y, xy.x));\n}\n\nvec2 transform_to_polar(vec2 xy, Transform transform)\n{\n    return vec2(length(xy), atan(xy.y, xy.x) - transform.angle);\n}\n\nfloat circle_field(vec2 coords, Transform transform, float size,  float smooth_border)\n{\n    vec2 polar_coords = transform_to_polar(coords, transform);  \n\n    return smoothstep(polar_coords.x, polar_coords.x + smooth_border, size);\n}\n\nfloat circle_line(vec2 uv, Transform transform, float size, float smooth_border,float thickness)\n{\n    \n    vec2 uvT = transform_cartesian(uv, transform);\n    return circle_field(uvT, transform, size, smooth_border) - \n            circle_field(uvT, transform, size - thickness, smooth_border);\n}\n\nfloat circle_pannel_field(vec2 coords, Transform transform, float size,  float smooth_border)\n{\n    vec2 polar_coords = transform_to_polar(coords, transform);\n    float restrictions = float(abs(cos(polar_coords.y + PI / 2.0 + transform.angle)) < 0.55); \n    \n    return smoothstep(polar_coords.x, polar_coords.x + smooth_border, size) * \n            smoothstep(0.0,1.0,sin( 509.0 * (polar_coords.y) / TWO_PI)) * restrictions;\n}\n\nfloat create_circle_pannel(vec2 uv, Transform transform, float size, float smooth_border,float thickness)\n{\n    vec2 uvT = transform_cartesian(uv, transform);\n    return circle_pannel_field(uvT, transform, size, smooth_border) - \n            circle_pannel_field(uvT, transform, size - thickness, smooth_border);\n}\n\nfloat regular_polygon_field(vec2 coords, Transform transform, float num_sides, float size, float smooth_border)\n{    \n\n    vec2 polar_coords = transform_to_polar(coords, transform);  \n    // We need to map each circle point to a particular triangle point in polar coordinates to get\n    // a concentric triangles like field\n    float da = TWO_PI / num_sides;\n    \n    float tf = cos(floor(0.5 + polar_coords.y/da) * da - polar_coords.y) * polar_coords.x;\n    return smoothstep(tf,tf + smooth_border, size);\n}\n\nfloat regular_polygon_line(vec2 coords, Transform transform, float num_sides, float size, float smooth_border,float thickness)\n{\n    return regular_polygon_field(coords, transform, num_sides, size, smooth_border) - \n            regular_polygon_field(coords, transform, num_sides, size - thickness, smooth_border);\n}\n\nfloat create_brace(vec2 uv, Transform transform, float num_sides, float size, float smooth_border, float thickness, vec4 crop)\n{\n    vec2 uvT = transform_cartesian(uv, transform);\n    \n    float brace = regular_polygon_line(uvT, transform, num_sides, size, smooth_border, thickness) * \n            (smoothstep(crop.x, crop.x + smooth_border, uvT.x) - \n             smoothstep(crop.y, crop.y + smooth_border, uvT.x)) *\n            (smoothstep(crop.z, crop.z + smooth_border, uvT.y) - \n             smoothstep(crop.w, crop.w + smooth_border, uvT.y));\n             \n    return brace;\n}\n\n\nfloat create_symmetrical_braces(vec2 uv, Transform transform, float num_sides, float size, float smooth_border, float thickness, vec4 crop)\n{\n    \n    float brace1 = create_brace(uv, transform, num_sides, size, smooth_border, thickness, crop);\n             \n    transform.offset.x = -transform.offset.x;\n    crop = -crop.yxwz;\n             \n    float brace2 = create_brace(uv, transform, num_sides, size, smooth_border, thickness, crop);\n             \n     return max(brace1, brace2);\n}\n\nvoid animation()\n{\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 baseUV = uv - 0.5f;\n    baseUV.x *= iResolution.x/iResolution.y;\n    \n    vec3 color = BACKGROUND_COLOR;\n    \n    \n    \n    // ----------------------------- Animation -----------------------------\n    \n    float animation_timer = smoothstep(0.0, 0.7,sin(iTime * 2.0));\n    float arrows_animation = -0.02 * animation_timer;\n    float braces_animation = -0.08 * animation_timer;\n    float circle_animation = -0.01 * animation_timer;\n    float cross_animation = -PI * animation_timer / 2.0;\n    \n    // ----------------------------- Main braces -----------------------------\n    \n    Transform transform = Transform(vec2(-0.3, 0.0), vec2(1.0, 1.0), 0.0);\n    vec4 crop = vec4(-1.0, -0.3, -0.5, 0.5);\n    float object = create_symmetrical_braces(baseUV, transform, 6.0f, 0.52, SMOOTH_BORDER_SIZE, 0.006, crop);\n\n    color = mix(color, mix(BASE_COLOR, DARK_RED_COLOR , animation_timer), object); \n    \n    // ----------------------------- Double braces -----------------------------\n    \n    transform = Transform(vec2(0.2 + braces_animation, 0.0), vec2(1.0, 1.0), PI / 6.0);\n    crop = vec4(0.3, 1.0, -0.5, 0.5);\n    object = create_symmetrical_braces(baseUV, transform, 6.0f, 0.4, SMOOTH_BORDER_SIZE, 0.006, crop);\n    \n    \n    transform = Transform(vec2(-0.22 - braces_animation, 0.0), vec2(1.0, 1.0), PI / 6.0);\n    crop = vec4(-1.0, -0.3, -0.5, 0.5);\n    object += create_symmetrical_braces(baseUV, transform, 6.0f, 0.4, SMOOTH_BORDER_SIZE, 0.006, crop);\n    \n    color = mix(color, SECOND_COLOR, object); \n    \n    // ----------------------------- Aim arrows -----------------------------\n    \n    transform = Transform(vec2(0.23 + arrows_animation, 0.0), vec2(1.0, 1.0), PI / 6.0);\n    crop = vec4(-1.0, 0.0, -0.07, 0.07);\n    object = create_symmetrical_braces(baseUV, transform, 6.0f, 0.1, SMOOTH_BORDER_SIZE, 0.02, crop);\n    \n    color = mix(color,  mix(BASE_COLOR, DARK_RED_COLOR , animation_timer), object); \n    \n    // ----------------------------- Aim rhombuses -----------------------------\n    \n    transform = Transform(vec2(0.165 + arrows_animation, 0.0), vec2(1.85, 1.0), PI / 4.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object = create_symmetrical_braces(baseUV, transform, 4.0f, 0.025, SMOOTH_BORDER_SIZE, 1.0, crop);\n    \n    color = mix(color, mix(BASE_COLOR, DARK_RED_COLOR , animation_timer), object); \n    \n    transform = Transform(vec2(0.2, 0.0), vec2(1.85, 1.0), PI / 4.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object = create_symmetrical_braces(baseUV, transform, 4.0f, 0.01875, 1.3 * SMOOTH_BORDER_SIZE, 1.0, crop);\n    \n    transform = Transform(vec2(0.23, 0.0), vec2(1.85, 1.0), PI / 4.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object += create_symmetrical_braces(baseUV, transform, 4.0f, 0.01875,1.3 *  SMOOTH_BORDER_SIZE, 1.0, crop);\n    \n    transform = Transform(vec2(0.26, 0.0), vec2(1.85, 1.0), PI / 4.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object += create_symmetrical_braces(baseUV, transform, 4.0f, 0.01875, 1.3 * SMOOTH_BORDER_SIZE, 1.0, crop);\n    \n    \n    color = mix(color, CIRCLE_COLOR, object); \n    \n    // ----------------------------- Central circle -----------------------------\n    \n    transform = Transform(vec2(0.0, 0.0), vec2(1.0, 1.0), 0.0);\n    object = circle_line(baseUV, transform,  0.1+ circle_animation, SMOOTH_BORDER_SIZE, 0.03 + circle_animation);\n    color = mix(color, mix(CIRCLE_COLOR, DARK_RED_COLOR , animation_timer), object);\n    \n    \n    // ----------------------------- Central cross object -----------------------------\n    \n    transform = Transform(vec2(0.036, 0.0), vec2(1.0, 1.0), PI / 4.0 + cross_animation);\n    crop = vec4(-1.0, 0.0, -0.07, 0.07);\n    object = create_symmetrical_braces(baseUV, transform, 4.0f, 0.03, SMOOTH_BORDER_SIZE, 0.005, crop);\n    \n    \n    transform = Transform(vec2(0.0, 0.0), vec2(1.0, 1.0), 0.0);\n    object = max(object, circle_line(baseUV, transform,  0.02, SMOOTH_BORDER_SIZE, 1.0));\n    color = mix(color, mix(DARK_RED_COLOR, vec3(0.7, 0.7, 0.7), animation_timer), object);\n    \n    // ----------------------------- Triangle objects + braces -----------------------------\n    \n    transform = Transform(vec2(0.7, 0.26), vec2(1.0, 1.0), PI / 2.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object = create_symmetrical_braces(baseUV, transform, 3.0f, 0.015, SMOOTH_BORDER_SIZE, 0.05, crop);\n    \n    transform = Transform(vec2(0.7, -0.26), vec2(1.0, 1.0), -PI / 2.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object += create_symmetrical_braces(baseUV, transform, 3.0f, 0.015, SMOOTH_BORDER_SIZE, 0.05, crop);\n    \n    transform = Transform(vec2(0.0, 0.0), vec2(1.0, 1.0), 0.0);\n    crop = vec4(-1.0, 1.0, -0.26, 0.26);\n    object = max(object, create_symmetrical_braces(baseUV, transform, 4.0f, 0.7035, SMOOTH_BORDER_SIZE, 0.0025, crop));\n    \n    color = mix(color, mix(DARK_RED_COLOR, vec3(0.7, 0.0, 0.0), animation_timer), object);\n    \n    // ----------------------------- Central pannel -----------------------------\n    \n    transform = Transform(vec2(0.0, 0.0), vec2(1.0, 1.0), 0.0);\n    object = create_circle_pannel(baseUV, transform,  0.4, SMOOTH_BORDER_SIZE, 0.033);\n    color = mix(color, mix(BASE_COLOR, DARK_RED_COLOR , animation_timer), object);\n    \n    \n    // ----------------------------- Vertical bars -----------------------------\n    \n    transform = Transform(vec2(0.0, 0.0), vec2(0.6, 1.1), 0.0);\n    crop = vec4(-0.3, 0.3, -0.5, 0.5);\n    object = create_brace(baseUV, transform, 4.0f, 0.4, SMOOTH_BORDER_SIZE, 0.009, crop);\n    \n    transform = Transform(vec2(0.5, 0.3554), vec2(0.5, 2.0), PI / 2.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object = max(object,create_symmetrical_braces(baseUV, transform, 3.0f, 0.015, SMOOTH_BORDER_SIZE, 0.05, crop));\n    \n    transform = Transform(vec2(0.5, -0.3554), vec2(0.5, 2.0), -PI / 2.0);\n    crop = vec4(-1.0, 1.0, -0.5, 0.5);\n    object = max(object,create_symmetrical_braces(baseUV, transform, 3.0f, 0.015, SMOOTH_BORDER_SIZE, 0.05, crop));\n    \n    color = mix(color, mix(BASE_COLOR, DARK_RED_COLOR , animation_timer), object);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0f);\n    //fragColor = vec4(baseUV, 0.0f, 1.0f);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}