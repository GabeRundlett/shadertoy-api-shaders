{
    "Shader": {
        "info": {
            "date": "1600670786",
            "description": "The scene is raymarched in 3D, however, ambient occlusion is computed using raymarching in 2D space. This trick is possible due to the specifics of the scene and allows less noisy result with few rays traced. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3sdyR4",
            "likes": 18,
            "name": "2D ambient occlusion",
            "published": 3,
            "tags": [
                "occlusion"
            ],
            "usePreview": 0,
            "username": "Pidhorskyi",
            "viewed": 822
        },
        "renderpass": [
            {
                "code": "/* Stanislav Pidhorskyi - 2020 */\n\n#define PI 3.14159265359\n\n\n#define P2 0.0001 // precision\n#define P3 0.0001 // precision\n#define S 80.    // steps\n#define D 100.  // distance\n#define PI 3.14159265359\n\n#define N_RAYS 24.\n\nfloat sqr(float x) {return x * x; } \n\n//https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec3 gamma(vec3 x) {\n    return mix(12.92 * x, 1.055 * pow(x, vec3(1.0 / 2.4)) - 0.055, step(0.0031308, x));\n}\n\n// SDF functions from iq: https://iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map2(vec2 p)\n{\n    p.x = abs(p.x);\n    \n \tfloat d = sdBox(p, vec2(0.3, 0.4));\n    d = max(d, -sdBox(p + vec2(-0.15, 0.0), vec2(0.1, 0.1)));\n    d = max(d, -sdBox(p + vec2(-0.15, -0.4), vec2(0.1, 0.1)));\n    d = max(d, -sdBox(p + vec2(-0.15, 0.4), vec2(0.1, 0.1)));\n    d = min(d, sdCircle(p + vec2(-0.8, 0.5), 0.2));\n    d = min(d, sdCircle(p + vec2(-0.8, 0.2), 0.1));\n    d = min(d, sdCircle(p + vec2(-0.8, 0.0), 0.03));\n    d = min(d, sdCircle(p + vec2(-0.8, -0.2), 0.01));\n    d = min(d, sdTriangleIsosceles(-(p + vec2(-1.2, -0.0)), vec2(0.1, 0.3)));\n    return d;\n}\n\nfloat map3(vec3 p, float h)\n{\n \tfloat d = map2(p.xz);\n    d = max(d, sdBox(p + vec3(0., -h / 2., 0.), vec3(2., h / 2., 2.)));\n    d = min(d, sdBox(p + vec3(0., 0.1, 0.), vec3(2., 0.1, 2.)));\n    return d;\n}\n\nvec4 march(vec3 ro, vec3 rd, float h)\n{\n    float t = 0., s = float(S), d;\n    for(float i = 0.; i < S; i++)\n    {\n        d = map3(ro+rd*t, h);\n\n        if (d < P3 * t || t > D)\n        {\n            s = float(i);\n            break;\n        }\n\n        t += d;\n    }\n    \n    return vec4(ro+rd*t, t);\n}\n\nvec4 march(vec2 ro, vec2 rd)\n{\n    float t = 0., s = float(S), d;\n    for(float i = 0.; i < S; i++)\n    {\n        d = map2(ro+rd*t);\n\n        if (d < P2 * t || t > D)\n        {\n            s = float(i);\n            break;\n        }\n\n        t += d;\n    }\n    \n    return vec4(ro+rd*t,d,t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n    if (iMouse.xy == vec2(0.))\n    {\n        mo = vec2(0.3, 0.5);\n    }\n    const vec3 lookat = vec3(0.0, 0.2, 0.0);\n    \n    float theta = 6.283*(0.25 * mo.y - 0.25);\n    vec3 ro = vec3(cos(6.283*mo.x) * sin(theta),\n                   cos(theta),\n                   sin(6.283*mo.x) * sin(theta));\n  \tro *= 4.0;\n    \n   \tfloat aspect = float(iResolution.x) / float(iResolution.y);\n    float vfov = 20.0f;\n    \n    float th = vfov * PI / 180.0;\n    float halfHeight = tan(th / 2.0);\n    float halfWidth = aspect * halfHeight;\n\tvec3 vup = vec3(0.0f, 1.0f, 0.0f);\n    \n    vec3 z = normalize(ro - lookat);\n    vec3 x = normalize(cross(vup, z));\n    vec3 y = normalize(cross(z, x));\n    \n    mat3 cam = mat3(x, y, z);\n    mat3 k = mat3(vec3(1.0 / halfWidth, 0, 0), vec3(0, 1.0 / halfHeight, 0), vec3(0.0, 0.0, -1.));\n    \n    vec2 uv = fragCoord / vec2(iResolution);\n    uv = 2.0 * uv - 1.0;\n\n    vec3 rd = cam * (normalize(inverse(k) * vec3(uv, 1.0)));\n\n    \n    float h = sqr((0.5 + 0.5 * cos(3.14 * iTime * 0.2))) * 0.6;\n    \n    vec4 res = march(ro, rd, h);\n    if (res.w > 10.0)\n    {\n    \tfragColor = vec4(gamma(vec3(0.6)),1.0);\n        return;\n    }\n    \n    h -= max(res.y, 0.);\n    \n    float d = map2(res.xz);\n    vec3 color;\n    if (d < -0.1 * P2)\n    \tcolor = vec3(1.);\n    else\n    {\n                float f = 0.;\n                vec2 rd = normalize(hash22(fragCoord + iTime * 1500. + 50.0) * 2.0 - 1.0); \n                for (float dir = 0.; dir < N_RAYS; ++dir)\n                {\n                    rd = mat2( cos(2. / N_RAYS * 3.14), sin(2. / N_RAYS * 3.14),\n                              -sin(2. / N_RAYS * 3.14), cos(2. / N_RAYS * 3.14)) * rd;\n                    vec4 r = march(res.xz, rd);\n                    \n                    float alpha = atan(h / r.w);\n                    // https://www.wolframalpha.com/input/?i=integrate+x+*+cos%28x%29+*+sin%28x%29+from+a+to+pi+%2F+2\n                    float I = 1./8. * (-sin(2. * alpha) + 2. * alpha * cos(2. * alpha) + PI);\n                    \n                    f += I;\n                }\n                f /= N_RAYS * PI / 8.;\n                color = vec3(f * 1.);\n\n\t}\n    \n    // Output to screen\n    fragColor = vec4(gamma(color * 0.6),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}