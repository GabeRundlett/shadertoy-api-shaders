{
    "Shader": {
        "info": {
            "date": "1610411391",
            "description": "routing the ray by sdf normal thus any shape can trivially impact on lensing although only spheres will be correctly evaluated. still interesting to mess around with different shapes. though code is ugly..",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGczh",
            "likes": 9,
            "name": "Gravitation Lensing",
            "published": 3,
            "tags": [
                "gravitationlenselensingraymarchblackhole"
            ],
            "usePreview": 0,
            "username": "ich",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "#define pi 3.141\n#define surf_dist .001\n#define max_steps  100\n#define max_dist 20.\n#define intensity .05\n\nmat3 look_at(vec3 d)\n{\n\tvec3 r = normalize(cross(vec3(0, 1, 0), d));\n\tvec3 u = normalize(cross(d, r));\n\treturn mat3(r, u, d);\n}\n\nmat2 rot(float a)\n{\n\treturn mat2(\n\t\tcos(a), -sin(a),\n\t\tsin(a), cos(a)\n\t);\n}\n\nfloat smin(float a, float b, float k)\n{\n\tfloat h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k)\n{\n\treturn -smin(-a, -b, k);\n}\n\nfloat sphere(vec3 p, float r)\n{\n\treturn length(p) - r;\n}\n\nfloat roundcube(vec3 p, vec2 r)\n{\n\treturn length(max(abs(p) - (r.x - r.y), vec3(0))) - r.y;\n}\n\nfloat roundcube(vec3 p, vec4 r)\n{\n\treturn length(max(abs(p) - (r.xyz - r.w), vec3(0))) - r.w;\n}\n\nfloat cube(vec3 p, float r)\n{\n\treturn roundcube(p, vec2(r, .0));\n}\n\nfloat cube(vec3 p, vec3 r)\n{\n\treturn roundcube(p, vec4(r, 0));\n}\n\nfloat quickcube(vec3 p, float r)\n{\n\tp = abs(p);\n\treturn max(p.x, max(p.y, p.z)) - r;\n}\n\nfloat quickcube(vec3 p, vec3 r)\n{\n\tp = abs(p);\n\treturn max(p.x - r.x, max(p.y - r.y, p.z - r.z));\n}\n\nfloat plane(vec3 p, vec3 n, float r)\n{\n\treturn dot(p, n) - r;\n}\n\nstruct Line  {\n\tvec3 a;\n\tvec3 b;\n\tfloat r;\n};\n\nfloat line(vec3 p, Line l)\n{\n\tvec3 ab = l.b - l.a;\n\tvec3 ap = p - l.a;\n\tfloat h = clamp(dot(ap, ab) / dot(ab, ab), 0., 1.);\n\treturn length(ap - h * ab) - l.r;\n}\n\nfloat torus(vec3 p, vec2 r)\n{\n\tvec3 p0 = normalize(vec3(p.xy, 0)) * r.x;\n\treturn length(p0 - p) - r.y;\n}\n\nfloat onion(float d, float thickness)\n{\n\treturn abs(d + thickness) - thickness;\n}\n\nvec3 elongate(vec3 p, vec3 a, vec3 b)\n{\n\treturn max(min(p, a), p - b);\n}\n\nconst vec2 e = vec2(0, .001);\nconst vec3 ex = e.yxx;\nconst vec3 ey = e.xyx;\nconst vec3 ez = e.xxy;\n\nvec3 normal_(float l, float lx, float ly, float lz) {\n\treturn normalize(\n\t\tl - vec3(lx, ly, lz)\n\t);\n}\n\n// get signee distance of function f\n#define l_(f, p, a) \\\n\tf(p, a)\n\n// get normal of function f\n#define n_(f, l, p, a) \\\n\tnormal_(l, f(p - ex, a), f(p - ey, a), f(p - ez, a))\n\n// get normal and signed distance of function f\n#define nl_(f, l, n, p, a) \\\n\tl = f(p, a); \\\n\tn = n_(f, l, p, a)\n\nvoid min_(inout float lo, inout vec3 g, in float l, in vec3 n) {\n\tg -= n / l;\n\tlo = min(lo, l);\n}\n\nfloat scene_(vec3 p, out vec3 g) {\n\tfloat l = max_dist;\n\tg = vec3(0);\n\n\tfloat s0l; vec3 s0n;\n\tnl_(sphere, s0l, s0n, p, .1);\n\n\t/* float l0l; vec3 l0n; */\n\t/* nl_(line, l0l, l0n, p, Line(vec3(0, 0, 3), vec3(0, 0, -3), .1)); */\n\n\tl = min(l, sphere(p - vec3(1, 1, 1), .5));\n    l = min(l, roundcube(p - vec3(-1, 1, 1), vec2(.5, .1)));\n    \n\t/* l = min(l, line(p, Line(vec3(1, 0, 3), vec3(1, 0, -3), .1 ))); */\n\tl = min(l, max(\n        quickcube(sin(p * 5.), vec3(.99)) / 5.,\n        quickcube(p - vec3(0, -2., 0), vec3(3, .2, 3))\n    ));\n\t//l = min(l, sphere(p - vec3(-1, -.5, -1), .5));\n\n\tmin_(l, g, s0l, s0n);\n\t/* min_(l, g, l0l, l0n); */\n\n\treturn l;\n}\n\nfloat scene(vec3 p) {\n\tfloat l = max_dist;\n\n\tvec3 d = vec3(0);\n    \n\tl = min(l, sphere(p, .1));\n    \n\tl = min(l, sphere(p - vec3(1, 1, 1), .5));\n    l = min(l, roundcube(p - vec3(-1, 1, 1), vec2(.5, .1)));\n    \n\t/* l = min(l, line(p, Line(vec3(0, 0, 3), vec3(0, 0, -3), .1 ))); */\n\tl = min(l, max(\n        quickcube(sin(p * 5.), vec3(.99)) / 5.,\n        quickcube(p - vec3(0, -2., 0), vec3(3, .2, 3))\n    ));\n\t//l = min(l, sphere(p - vec3(-1, -.5, -1), .5));\n\n\treturn l;\n}\n\nvec3 normal(vec3 p)\n{\n\tfloat l = scene(p);\n\tvec2 e = vec2(0, .001);\n\n\treturn normalize(\n\t\tl - vec3(\n\t\t\tscene(p - e.yxx),\n\t\t\tscene(p - e.xyx),\n\t\t\tscene(p - e.xxy)\n\t\t)\n\t);\n}\n\nbool march(vec3 ro, inout vec3 rd, out vec3 p, out float steps) {\n\tp = ro;\n\tfloat lo = .0;\n\n\tfor (int i = 0; i < max_steps && lo < max_dist; ++i) {\n\t\tvec3 g;\n\t\tfloat l = scene_(p, g);\n\t\tl = min(l, .5);\n\t\tlo += l;\n\t\trd += l * g * (intensity + intensity * .5 * (sin(iTime * .4) * .5 + .5));\n\t\t/* rd = normalize(rd); */\n\t\tp += l * normalize(rd);\n\t\tsteps = 1. - float(i) / float(max_steps);\n\n\t\tif (l < surf_dist)\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n\tvec2 uv = (frag_coord - iResolution.xy * .5) / iResolution.y;\n    vec2 m = (iMouse.xy - iResolution.xy * .5) / iResolution.y;\n    vec3 c = vec3(0);\n\n\tvec2 m2 = m * pi;\n\tvec3 ro = vec3(sin(m2.x) * cos(m2.y), sin(m2.y), cos(m2.x) * cos(m2.y)) * -1.;\n\tvec3 rd = look_at(normalize(-ro)) * normalize(vec3(uv, .5));\n\n\tvec3 p;\n\tfloat steps;\n\tif (march(ro, rd, p, steps)) {\n\t\trd = normalize(rd);\n\t\tvec3 n = normal(p);\n\t\tc.r += 1.;\n\t\tc.g += .5 + .5 * pow(dot(-rd, n), 3.);\n\n\t\tc *= smoothstep(1., 0., length(ro - p) / max_dist);\n\t} else {\n        c = texture(iChannel0, rd).rgb;\n    }\n\t/* c.b += 1. - floor(steps * steps * 10.) / 10.; */\n\n\tfrag_color = vec4(c, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}