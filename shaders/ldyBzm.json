{
    "Shader": {
        "info": {
            "date": "1528050363",
            "description": "BVH0 BVH1\n      1   1   :   30 fps    33 ms\n      1   0   :   12 fps    83 ms\n      0   1   :   12 fps    83 ms\n      0   0   :     5 fps  200 ms",
            "flags": 0,
            "hasliked": 0,
            "id": "ldyBzm",
            "likes": 24,
            "name": "BVH-optimized SDF ray-marching",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "lod",
                "bvh",
                "short",
                "hierarchical",
                "boundingbox",
                "bbox"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 2064
        },
        "renderpass": [
            {
                "code": "#define N 3\n\nfloat map1(vec3 U) {\n    float d = dot(U,U), r = float((N+1)/2);\n    if (d > 4. ) return sqrt(d)-1.;           // bounding sphere\n    //d = 1e3;   // why useless ?\n    for (int k=0; k< N*N*N; k++) {            // complex object. Stub: grid of spheres\n        vec3 C = vec3( k%N -N/2, k/N%N -N/2, k/(N*N) -N/2) / r;\n        d = min( d, length(U-C) - .3/r) ;\n    }\n    return d;\n}\n\nfloat map0(vec3 U) {\n    float d = length(U), r = ( 1.+ 4.*float((N+1)/2) ) *1.26;\n    if (d > 2.*r) return d-r;                 // bounding sphere\n    mat2  R = mat2( sin(.5*iTime+vec4(0,33,11,0)) );\n\n    for (int k=0; k< N*N*N; k++) {            // complex group. Stub: grid of groups\n        vec3 C = vec3( k%N -N/2, k/N%N -N/2, k/(N*N) -N/2) *4.;\n        C -= U;\n        C.xz *= R, C.yz *= R;                 // rotation\n        d = min(d, map1(C));\n    } \n    return d;\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t = iTime, m=1e3;\n    mat2  R = mat2( sin(.1*t+vec4(0,33,11,0)) );\n    vec3  q = iResolution,\n          D = vec3(.3*(U+U-q.xy)/q.y, -1),    // ray direction\n          p = 30./q;                          // marching point along ray \n    O-=O;\n    for ( O++; O.x > 0. && t > .01 ; O-=.03 ) {\n        q = p;\n        q.xz *= R, q.yz *= R;                 // rotation\n        t = map0(q); m = min(m,t);\n        p += t*D;                             // step forward = dist to obj\n    }\n    O.r +=  1. - m *4. / ( ( 1.+ 4.*float((N+1)/2) ) *1.26 );  // closest\n  //O.r += sin( m *40. / ( ( 1.+ 4.*float((N+1)/2) ) *1.26 )); // closest\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}