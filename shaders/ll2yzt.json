{
    "Shader": {
        "info": {
            "date": "1509936811",
            "description": "lazy efficiency",
            "flags": 0,
            "hasliked": 0,
            "id": "ll2yzt",
            "likes": 1,
            "name": "Z10 11/5/2017 recycle",
            "published": 3,
            "tags": [
                "grarpog"
            ],
            "usePreview": 0,
            "username": "L1tang",
            "viewed": 106
        },
        "renderpass": [
            {
                "code": "vec3 box(vec2 uv, vec2 pos, vec2 dimension, vec3 fill, \n         vec3 bColor, vec2 bThicc, bool bSmooth, bool borderOnly)\n{\n    uv *= 5.0;\n    \n    uv = fract(uv);\n    if (borderOnly == true)\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, vec3(0.), box);\n        return finalBox;\n    }\n    \n    else\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, fill, box);\n        return finalBox;\n    }\n}\n\nfloat parabola( float x, float k )\n{\n    return pow( 4.0*x*(1.0-x), k );\n}\nfloat gain(float x, float k) \n{\n    float a = 0.5*pow(2.0*((x<0.5)?x:1.0-x), k);\n    return (x<0.5)?a:1.0-a;\n}\nfloat impulse( float k, float x )\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nmat2 scale2d(vec2 value)\n{\n    return mat2(value.x, 0, 0, value.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv *= 2.0;\n    \n    uv = fract(uv);\n    uv.x *= ratio;\n    vec2 uv2= uv;\n    //uv2 += vec2(.5,.2);\n    vec2 uv3 = uv;\n    vec2 uv4 = uv;\n    //uv3 += vec2(-.5,-.2);\n    \n    vec2 pos = vec2(0.5*ratio, 0.5);\n    uv -= pos;\n    uv2-=pos;\n    uv3-=pos;\n    uv4-=pos;\n    \n    uv *= rotate2d(iTime) * scale2d(vec2(abs(sin(iTime/2.))));\n    uv2 *= rotate2d(iTime) * -scale2d(vec2(abs(sin(iTime/2.))));\n    uv3 *= rotate2d(-iTime) * -scale2d(vec2(abs(sin(iTime/2.))));\n    uv4 *= rotate2d(-iTime) * scale2d(vec2(abs(sin(iTime/2.))));\n    \n    uv += pos;\n    uv2 += pos;\n    uv3+= pos;\n    uv4+= pos ;\n    \n    /*vec3 orb = shape(.3, ratio, 0.01, pos, uv, vec3(1,.8,0));\n    vec3 orb2 = shape(.3, ratio, 0.01, pos, uv2, vec3(1,.8,0));\n    vec3 orb3 = shape(.3, ratio, 0.01, pos, uv3, vec3(1,.8,0));\n    vec3 orb4 = shape(.3, ratio, 0.01, pos, uv4, vec3(1,.8,0));\n    */\n    vec3 frame1 = box(uv, pos, vec2(1., .2), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.01,.01), false, false);\n    vec3 frame2 = box(uv2, pos, vec2(1., .2), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.01,.01), false, false);\n    vec3 frame3 = box(uv3, pos, vec2(1., .2), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.01,.01), false, false);\n    vec3 frame4 = box(uv4, pos, vec2(1., .2), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.01,.01), false, false);\n    \n    vec3 final = mix(vec3(0,0,0), vec3(1,.9,0), frame1);\n    \n\tfinal = mix(final, vec3(0,1,.5), frame2); // mask\n    final = mix(final, vec3(1,0,.5), frame3);\n    final = mix(final, vec3(.7,.5,.5), frame4);\n\tfragColor = vec4(final,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}