{
    "Shader": {
        "info": {
            "date": "1634005663",
            "description": "shader jugando con varias superposiciones de de color",
            "flags": 0,
            "hasliked": 0,
            "id": "7ddSW2",
            "likes": 4,
            "name": "luces",
            "published": 3,
            "tags": [
                "light",
                "color",
                "fract",
                "id"
            ],
            "usePreview": 0,
            "username": "nictemeral",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec2 map(vec2 value, vec2 min1, vec2 max1, vec2 min2, vec2 max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map(vec2 value, vec3 min1, vec3 max1, vec3 min2, vec3 max2) {\n  return min2 + ((value.s+value.t)/2.0 - min1) * (max2 - min2) / (max1 - min1);\n}\n\n\nvec2 rotate2d(vec2 _st, float _angle){\n  _st -=0.5;\n  _st = mat2(cos(_angle),-sin(_angle),\n    sin(_angle),cos(_angle))*_st;\n    _st +=0.5;\nreturn _st;\n}\n\n#define PI 3.14159235669\n\n#define TAU PI*2\n\n\nvec2 latice_id(in vec2 st,float div){\n    vec2 uv=st;\n    uv*=div;\n    return floor(uv);\n}\nvec2 latice_map(in vec2 st,float div,vec2 min,vec2 max){\n    vec2 uv=st;\n    uv*=div;\n    return map(floor(uv),vec2(0.0),vec2(7.0),vec2(min),vec2(max));\n}\nfloat latice_f(in vec2 st,float div){\n    vec2 uv=st;\n    uv*=div;\n    uv=floor(uv);\n    return (uv.s+uv.t)/2.0;\n}\nfloat lf_map(in vec2 st,float div,float min,float max){\n    vec2 uv=st;\n    uv*=div;\n    uv= map(floor(uv),vec2(0.0),vec2(7.0),vec2(min),vec2(max));\n    return (uv.s+uv.t)/2.0;\n}\nfloat lf_cmap(in vec2 st,float div,float min,float max){\n    vec2 uv=st-vec2(.50);\n    uv*=div;\n    uv=abs(uv);\n    uv=floor(uv)/div;\n    uv= map(uv,vec2(0.0),vec2(1.0),vec2(min),vec2(max));\n    return (uv.s+uv.t);\n}\nfloat lf(in vec2 st,float div,float min,float max){\n    vec2 uv=st-vec2(.50);\n    uv*=div;\n    uv=abs(uv);\n    uv=floor(uv)/div;\n    return (uv.s+uv.t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n\n  // st.x *= iResolution.x/iResolution.y;\n   vec2 uv=st;\n   vec2 st2=st;\n    st*=7.0;\n    st.s+=abs(sin(iTime*-0.1));\n    \n    vec2 ipos = floor(st);  // get the integer coords\n    vec2 fpos = fract(st);  // get the fractional coords\n\n    \n\n    st2=uv;\n   vec3  color = vec3(lf_cmap(vec2(st2.s,st2.t),50.,.25,0.75));\n    color.r+= lf_cmap(vec2(st2.s,-1.*st2.t+sin(iTime*.5)*01.5+01.5),15.,.0,0.5)/2.;\n    color.g+= lf_cmap(vec2(-1.*st2.s,st2.t+cos(iTime*.25+1.)*0.7+0.7),9.,.0,0.5)/3.;\n   color.b+= lf_cmap(vec2(st2.s,-1.*st2.t+sin(iTime*.5+sin(iTime*.5))*01.5+01.5),12.,.0,0.5)/2.;\n   // color.g+= lf_cmap(vec2(-1.*st2.s,st2.t+cos(u_time*.25+1.)*0.7+0.7),8.,.0,0.5)/3.;\n\n    \n    \n    //para recortar areas puede ser util\n   // color=clamp(color,vec3(0.675,0.675,0.675),vec3(0.450*abs(cos(u_time*0.01))+.90));\n     //color-=0.5;\n\tfragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}